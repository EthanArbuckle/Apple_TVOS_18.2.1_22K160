uint64_t sub_100245B54()
{
  uint64_t v0;
  uint64_t v1;
  uint64_t v2;
  uint64_t v3;
  uint64_t v4;
  int *v5;
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  uint64_t v9;
  uint64_t v10;
  uint64_t v11;
  uint64_t v12;
  uint64_t v13;
  void (*v14)(uint64_t, uint64_t);
  uint64_t v15;
  uint64_t v16;
  uint64_t v17;
  void (*v18)(uint64_t, uint64_t);
  uint64_t v19;
  uint64_t v20;
  uint64_t v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  v1 = type metadata accessor for LocationFetcher(0LL);
  v2 = *(void *)(v1 - 8);
  v26 = *(unsigned __int8 *)(v2 + 80);
  v3 = (v26 + 24) & ~v26;
  v4 = *(void *)(v2 + 64);
  v5 = (int *)type metadata accessor for BeaconEstimatedLocation(0LL);
  v6 = *((void *)v5 - 1);
  v25 = *(unsigned __int8 *)(v6 + 80);
  v7 = (v3 + v4 + v25) & ~v25;
  v23 = *(void *)(v6 + 64);
  v8 = type metadata accessor for UUID(0LL);
  v9 = *(void *)(v8 - 8);
  v10 = *(unsigned __int8 *)(v9 + 80);
  v22 = *(void *)(v9 + 64);

  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + v3 + 24));
  v11 = v0 + v3 + *(int *)(v1 + 32);
  v12 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(v11, v12);
  swift_bridgeObjectRelease();
  swift_release();
  v24 = v7;
  v13 = v0 + v7;
  sub_100016F9C(*(void *)(v0 + v7), *(void *)(v0 + v7 + 8));
  v14 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v14(v0 + v7 + v5[5], v8);
  v14(v0 + v7 + v5[6], v8);
  v15 = v0 + v7 + v5[10];
  v16 = type metadata accessor for Date(0LL);
  v17 = *(void *)(v16 - 8);
  v18 = *(void (**)(uint64_t, uint64_t))(v17 + 8);
  v18(v15, v16);
  v19 = v13 + v5[12];
  v20 = (v24 + v23 + v10) & ~v10;
  swift_bridgeObjectRelease();
  v14(v0 + v20, v8);
  return swift_deallocObject(v0, v22 + v20 + 1, v26 | v25 | v10 | 7);
}

void sub_100245D40(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for LocationFetcher(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for BeaconEstimatedLocation(0LL) - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  sub_100234734( a1,  *(dispatch_group_s **)(v1 + 16),  v1 + v4,  (os_log_s *)(v1 + v7),  v1 + v10,  *(unsigned __int8 *)(v1 + v10 + *(void *)(v9 + 64)));
}

uint64_t sub_100245DE4(uint64_t a1)
{
  return sub_100233CC0(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_100245E00(uint64_t a1)
{
  return sub_100510218( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(unsigned __int8 *)(v1 + 48),  *(unsigned __int8 *)(v1 + 49));
}

uint64_t sub_100245E24()
{
  uint64_t v1 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v35 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = (v35 + 16) & ~v35;
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v5 = (int *)type metadata accessor for RawSearchResult(0LL);
  uint64_t v6 = *((void *)v5 - 1);
  unint64_t v25 = (v4 + *(unsigned __int8 *)(v6 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v32 = *(void *)(v6 + 64);
  uint64_t v33 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v31 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v30 = *(void *)(v8 + 64);
  uint64_t v36 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v36 - 8);
  uint64_t v29 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v28 = *(void *)(v9 + 64);
  uint64_t v34 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  uint64_t v10 = *(void *)(v34 - 8);
  uint64_t v27 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v26 = *(void *)(v10 + 64);
  uint64_t v11 = v0 + v3;
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v11 + 24));
  uint64_t v12 = v11 + *(int *)(v1 + 32);
  uint64_t v13 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(v12, v13);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v14 = *(void *)(v0 + v4 + 8);
  if ((~v14 & 0x3000000000000000LL) != 0) {
    sub_1000869A4(*(void *)(v0 + v4), v14);
  }
  uint64_t v15 = v0 + v25;
  v16 = *(void (**)(unint64_t, uint64_t))(v8 + 8);
  v16(v0 + v25 + v5[5], v7);
  unint64_t v17 = v0 + v25 + v5[10];
  uint64_t v18 = v15 + v5[11];
  int v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 48))(v18, 1LL, v34);
  v20 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  if (!v19)
  {
    v20(v18, v36);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v18 + *(int *)(v34 + 20)));
  }

  unint64_t v21 = (v25 + v32 + v31) & ~v31;
  unint64_t v22 = (v21 + v30 + v29) & ~v29;
  unint64_t v23 = (v22 + v28 + v27) & ~v27;
  v20(v15 + v5[12], v36);
  v16(v0 + v21, v7);
  v20(v0 + v22, v36);
  v20(v0 + v23, v36);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + v23 + *(int *)(v34 + 20)));
  return swift_deallocObject(v0, v23 + v26, v35 | v33 | v31 | v29 | v27 | 7);
}

uint64_t sub_1002460F0()
{
  uint64_t v2 = *(void *)(type metadata accessor for LocationFetcher(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v5 = *(void *)(type metadata accessor for RawSearchResult(0LL) - 8);
  unint64_t v6 = (v4 + *(unsigned __int8 *)(v5 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for Date(0LL) - 8);
  unint64_t v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = *(void *)(v8 + 64);
  uint64_t v11 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v12 = (v9 + v10 + *(unsigned __int8 *)(v11 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = *(void *)(v11 + 64);
  uint64_t v14 = *(unsigned __int8 *)(*(void *)(type metadata accessor for BeaconKeyManager.IndexInformation(0LL) - 8) + 80LL);
  unint64_t v15 = (v12 + v13 + v14) & ~v14;
  uint64_t v16 = v0 + v3;
  uint64_t v17 = v0 + v4;
  uint64_t v18 = *(void *)(v0 + v4);
  uint64_t v19 = *(void *)(v17 + 8);
  uint64_t v20 = v0 + v6;
  uint64_t v21 = v0 + v9;
  uint64_t v22 = v0 + v12;
  uint64_t v23 = v0 + v15;
  v24 = (void *)swift_task_alloc(dword_1009A663C);
  *(void *)(v1 + 16) = v24;
  void *v24 = v1;
  v24[1] = sub_100015D58;
  return sub_100237EDC(v16, v18, v19, v20, v21, v22, v23);
}

uint64_t sub_100246228(uint64_t a1, uint64_t a2)
{
  if ((~a2 & 0x3000000000000000LL) != 0) {
    return sub_10008699C(a1, a2);
  }
  return a1;
}

uint64_t sub_10024623C(uint64_t a1, uint64_t a2)
{
  if ((~a2 & 0x3000000000000000LL) != 0) {
    return sub_1000869A4(a1, a2);
  }
  return a1;
}

uint64_t sub_100246250(uint64_t a1)
{
  return a1;
}

uint64_t sub_100246284(uint64_t a1)
{
  return sub_1003E2374(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10024628C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002462BC(os_log_s *a1)
{
  return sub_10021EAD0(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1002462D8(uint64_t a1)
{
  return sub_10021F578(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(_BYTE *)(v1 + 32));
}

void sub_1002462F8(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
}

uint64_t sub_100246310@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002299E8(a1, *(void **)(v2 + 24), a2);
}

unint64_t sub_100246328()
{
  unint64_t result = qword_1009A6688;
  if (!qword_1009A6688)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F7968, &type metadata for LocationFetcher.LocationFetcherError);
    atomic_store(result, &qword_1009A6688);
  }

  return result;
}

void *sub_10024636C@<X0>(_OWORD *a1@<X8>)
{
  return sub_1005C8720(v1, a1);
}

void *sub_100246384(void *a1)
{
  uint64_t v2 = a1[8];
  uint64_t v3 = a1[21];
  uint64_t v4 = a1[23];
  swift_bridgeObjectRelease(a1[25]);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_1002463D8()
{
  uint64_t v1 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v0 + v4;
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v7 + 24));
  uint64_t v8 = v7 + *(int *)(v1 + 32);
  uint64_t v9 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 40, v5);
}

uint64_t sub_1002464B0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for LocationFetcher(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  uint64_t v8 = (void *)swift_task_alloc(dword_1009A6694);
  *(void *)(v2 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100015D58;
  return sub_100236634(a1, v6, v7);
}

uint64_t sub_100246540(uint64_t a1)
{
  return sub_10021DAC0(a1, *(uint64_t **)(v1 + 16), *(void *)(v1 + 24), *(uint64_t **)(v1 + 32), *(uint64_t **)(v1 + 40)) & 1;
}

uint64_t sub_100246560()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100246584()
{
  uint64_t v1 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v0 + v4;
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v7 + 24));
  uint64_t v8 = v7 + *(int *)(v1 + 32);
  uint64_t v9 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_10024666C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for LocationFetcher(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_100223138(a1, v1 + v4, *(void *)(v1 + v5), *(dispatch_group_s **)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1002466C8()
{
  uint64_t v1 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release();
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + v4 + 24));
  uint64_t v7 = v0 + v4 + *(int *)(v1 + 32);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();

  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1002467B8(uint64_t *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for LocationFetcher(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_100223374( a1,  *(void *)(v1 + 16),  v1 + v4,  *(void *)(v1 + v5),  *(dispatch_group_s **)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100246818()
{
  uint64_t v1 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v35 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = (v35 + 32) & ~v35;
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v29 = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v34 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v7 = (v4 + v34 + 40) & ~v34;
  uint64_t v27 = v7;
  uint64_t v32 = v6;
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v33 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v11 = (v7 + v8 + v33) & ~v33;
  uint64_t v12 = *(void *)(v10 + 64);
  uint64_t v13 = (int *)type metadata accessor for RawSearchResult(0LL);
  uint64_t v14 = *((void *)v13 - 1);
  uint64_t v31 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v15 = (v11 + v12 + v31) & ~v31;
  uint64_t v28 = *(void *)(v14 + 64);
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + v3 + 24));
  uint64_t v16 = v0 + v3 + *(int *)(v1 + 32);
  uint64_t v17 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v17 - 8) + 8LL))(v16, v17);
  swift_bridgeObjectRelease();
  uint64_t v18 = v5;
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + v29));
  uint64_t v19 = type metadata accessor for UUID(0LL);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(*(void *)(v19 - 8) + 8LL);
  v20(v0 + v27, v19);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + v27 + *(int *)(v18 + 20)));
  uint64_t v21 = v0 + v11;
  uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v22(v21, v9);
  uint64_t v30 = v15;
  uint64_t v23 = v0 + v15;
  v22(v23 + v13[5], v9);
  uint64_t v24 = v23 + v13[10];
  uint64_t v25 = v23 + v13[11];
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v32 + 48))(v25, 1LL, v18))
  {
    v20(v25, v19);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v25 + *(int *)(v18 + 20)));
  }

  v20(v23 + v13[12], v19);
  return swift_deallocObject(v0, v30 + v28, v35 | v34 | v33 | v31 | 7);
}

uint64_t sub_100246A8C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for LocationFetcher(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = *(void *)(type metadata accessor for BeaconKeyManager.IndexInformation(0LL) - 8);
  unint64_t v8 = (v6 + *(unsigned __int8 *)(v7 + 80) + 40) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  uint64_t v10 = *(void *)(type metadata accessor for Date(0LL) - 8);
  unint64_t v11 = (v8 + v9 + *(unsigned __int8 *)(v10 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = *(void *)(v10 + 64);
  uint64_t v13 = *(unsigned __int8 *)(*(void *)(type metadata accessor for RawSearchResult(0LL) - 8) + 80LL);
  unint64_t v14 = v11 + v12 + v13;
  uint64_t v15 = *(void *)(v1 + 16);
  uint64_t v16 = *(void *)(v1 + 24);
  uint64_t v17 = v1 + v5;
  uint64_t v18 = v1 + v6;
  uint64_t v19 = v1 + v8;
  uint64_t v20 = v1 + v11;
  uint64_t v21 = v1 + (v14 & ~v13);
  uint64_t v22 = (void *)swift_task_alloc(dword_1009A66B4);
  *(void *)(v2 + 16) = v22;
  *uint64_t v22 = v2;
  v22[1] = sub_100015D58;
  return sub_10022F534(a1, v15, v16, v17, v18, v19, v20, v21);
}

uint64_t sub_100246BAC()
{
  uint64_t v1 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((((v4 + *(void *)(v2 + 64)) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + v4 + 24));
  uint64_t v7 = v0 + v4 + *(int *)(v1 + 32);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100246CA4(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for LocationFetcher(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  char v10 = *((_BYTE *)v1 + v6);
  uint64_t v11 = (uint64_t)v1 + v5;
  uint64_t v12 = *(void *)((char *)v1 + (v6 & 0xFFFFFFFFFFFFFFF8LL) + 8);
  uint64_t v13 = *(void *)((char *)v1 + (((v6 & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFF8LL));
  unint64_t v14 = (void *)swift_task_alloc(dword_1009A66DC);
  *(void *)(v2 + 16) = v14;
  *unint64_t v14 = v2;
  v14[1] = sub_100015D58;
  return sub_100236F5C(a1, v7, v8, v9, v11, v10, v12, v13);
}

uint64_t sub_100246D70()
{
  return sub_100246EA8((void (*)(void))&_swift_errorRelease, 32LL);
}

uint64_t sub_100246D80@<X0>(_BYTE *a1@<X8>)
{
  uint64_t result = Future.finish(error:)(*(void *)(v1 + 24));
  *a1 = result & 1;
  return result;
}

unint64_t sub_100246DB0()
{
  unint64_t result = qword_1009A66E8;
  if (!qword_1009A66E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080DC44, &type metadata for FetchRequest);
    atomic_store(result, (unint64_t *)&qword_1009A66E8);
  }

  return result;
}

unint64_t sub_100246DF4()
{
  unint64_t result = qword_1009A66F0;
  if (!qword_1009A66F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100807ED8, &type metadata for FetchResponse);
    atomic_store(result, (unint64_t *)&qword_1009A66F0);
  }

  return result;
}

uint64_t sub_100246E38()
{
  return sub_100246EA8((void (*)(void))&_swift_bridgeObjectRelease, 33LL);
}

uint64_t sub_100246E48@<X0>(_BYTE *a1@<X8>)
{
  return sub_100237E80(*(void *)(v1 + 24), a1);
}

unint64_t sub_100246E54()
{
  unint64_t result = qword_1009A66F8;
  if (!qword_1009A66F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100807EB0, &type metadata for OwnedDeviceFetchResponse);
    atomic_store(result, (unint64_t *)&qword_1009A66F8);
  }

  return result;
}

uint64_t sub_100246E98()
{
  return sub_100246EA8((void (*)(void))&_swift_bridgeObjectRelease, 32LL);
}

uint64_t sub_100246EA8(void (*a1)(void), uint64_t a2)
{
  return swift_deallocObject(v2, a2, 7LL);
}

uint64_t sub_100246EEC@<X0>(_BYTE *a1@<X8>)
{
  return sub_100237E80(*(void *)(v1 + 24), a1);
}

uint64_t sub_100246EF4(uint64_t a1)
{
  return sub_10054A2CC(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_100246F10()
{
  return swift_deallocObject(v0, 21LL, 7LL);
}

BOOL sub_100246F20(_BYTE *a1)
{
  if (v1[20]) {
    int v2 = 0x1000000;
  }
  else {
    int v2 = 0;
  }
  if (v1[19]) {
    int v3 = 0x10000;
  }
  else {
    int v3 = 0;
  }
  if (v1[18]) {
    int v4 = 256;
  }
  else {
    int v4 = 0;
  }
  return sub_10022A6EC(a1, v1[16], v4 | v1[17] | v3 | v2);
}

uint64_t sub_100246F68()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  char v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

BOOL sub_100247200(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8) + 80LL);
  return sub_10023AA30(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_10024723C(unint64_t *a1, uint64_t a2)
{
  return sub_10023AB10(a1, a2, v2[2], v2[3], v2[4], v2[5]);
}

uint64_t sub_100247258(uint64_t a1)
{
  return sub_10019A174(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100247264()
{
  uint64_t v1 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release();
  swift_release();
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + v4 + 24));
  uint64_t v7 = v0 + v4 + *(int *)(v1 + 32);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100247374(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v7 = *(void *)(type metadata accessor for LocationFetcher(0LL) - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_1002195E8( a1,  a2,  a3,  *(void *)(v3 + 16),  *(void *)(v3 + 24),  v3 + v8,  *(void *)(v3 + v9),  *(void *)(v3 + ((v9 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v3 + ((((v9 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100247408(uint64_t a1, uint64_t a2)
{
  return sub_10021D204( a1,  a2,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  *(uint64_t **)(v2 + 48),  *(void *)(v2 + 56),  *(void (**)(char *, uint64_t, uint64_t))(v2 + 64),  *(void *)(v2 + 72));
}

uint64_t sub_100247438()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100247460()
{
  uint64_t v1 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + v4 + 24));
  uint64_t v7 = v0 + v4 + *(int *)(v1 + 32);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t storeEnumTagSinglePayload for LocationFetcher.LocationFetcherError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100247578 + 4 * byte_1007F787E[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1002475AC + 4 * byte_1007F7879[v4]))();
}

uint64_t sub_1002475AC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002475B4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1002475BCLL);
  }
  return result;
}

uint64_t sub_1002475C8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1002475D0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1002475D4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002475DC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocationFetcher.LocationFetcherError()
{
  return &type metadata for LocationFetcher.LocationFetcherError;
}

uint64_t sub_1002475F8(uint64_t a1, uint64_t *a2, int *a3)
{
  int v3 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  uint64_t v4 = *a2;
  *(void *)a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v7 = v4 + ((v3 + 16LL) & ~(unint64_t)v3);
  }

  else
  {
    uint64_t v7 = a1;
    uint64_t v8 = a2[1];
    unint64_t v9 = (void *)a2[2];
    *(void *)(a1 + 8) = v8;
    *(void *)(a1 + 16) = v9;
    uint64_t v10 = a1 + 24;
    uint64_t v11 = a2 + 3;
    __int128 v12 = *((_OWORD *)a2 + 3);
    *(_OWORD *)(a1 + 48) = v12;
    uint64_t v13 = v12;
    uint64_t v14 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v12 - 8);
    swift_retain(v4);
    swift_retain(v8);
    id v15 = v9;
    v14(v10, v11, v13);
    uint64_t v16 = a3[8];
    uint64_t v17 = v7 + v16;
    uint64_t v18 = (uint64_t)a2 + v16;
    uint64_t v19 = type metadata accessor for Logger(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16LL))(v17, v18, v19);
    uint64_t v20 = a3[9];
    uint64_t v21 = a3[10];
    uint64_t v22 = *(uint64_t *)((char *)a2 + v20);
    *(void *)(v7 + v20) = v22;
    uint64_t v4 = *(uint64_t *)((char *)a2 + v21);
    *(void *)(v7 + v21) = v4;
    swift_bridgeObjectRetain(v22);
  }

  swift_retain(v4);
  return v7;
}

uint64_t sub_1002476FC(uint64_t a1, uint64_t a2)
{
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(a1 + 24));
  uint64_t v4 = a1 + *(int *)(a2 + 32);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_10024777C(uint64_t a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v7;
  uint64_t v8 = (void *)a2[2];
  *(void *)(a1 + 16) = v8;
  unint64_t v9 = a2 + 3;
  __int128 v10 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(a1 + 48) = v10;
  uint64_t v11 = v10;
  __int128 v12 = **(void (***)(uint64_t, uint64_t *, uint64_t))(v10 - 8);
  swift_retain(v6);
  swift_retain(v7);
  id v13 = v8;
  v12(a1 + 24, v9, v11);
  uint64_t v14 = a3[8];
  uint64_t v15 = a1 + v14;
  uint64_t v16 = (uint64_t)a2 + v14;
  uint64_t v17 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16LL))(v15, v16, v17);
  uint64_t v18 = a3[9];
  uint64_t v19 = a3[10];
  uint64_t v20 = *(uint64_t *)((char *)a2 + v18);
  *(void *)(a1 + v18) = v20;
  uint64_t v21 = *(uint64_t *)((char *)a2 + v19);
  *(void *)(a1 + v19) = v21;
  swift_bridgeObjectRetain(v20);
  swift_retain(v21);
  return a1;
}

void *sub_10024785C(void *a1, void *a2, int *a3)
{
  *a1 = *a2;
  swift_retain();
  swift_release();
  a1[1] = a2[1];
  swift_retain();
  swift_release();
  uint64_t v6 = (void *)a2[2];
  uint64_t v7 = (void *)a1[2];
  a1[2] = v6;
  id v8 = v6;

  sub_1000B5D38(a1 + 3, a2 + 3);
  uint64_t v9 = a3[8];
  __int128 v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Logger(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 24LL))(v10, v11, v12);
  uint64_t v13 = a3[9];
  uint64_t v14 = *(void *)((char *)a2 + v13);
  *(void *)((char *)a1 + v13) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease();
  *(void *)((char *)a1 + a3[10]) = *(void *)((char *)a2 + a3[10]);
  swift_retain();
  swift_release();
  return a1;
}

uint64_t sub_100247948(uint64_t a1, uint64_t a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v6 = a3[8];
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  uint64_t v10 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(void *)(a1 + v10) = *(void *)(a2 + v10);
  return a1;
}

uint64_t sub_1002479E8(uint64_t a1, uint64_t a2, int *a3)
{
  *(void *)a1 = *(void *)a2;
  swift_release();
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_release();
  uint64_t v6 = *(void **)(a1 + 16);
  *(void *)(a1 + 16) = *(void *)(a2 + 16);

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(a1 + 24));
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v7 = a3[8];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  swift_release();
  return a1;
}

uint64_t sub_100247AC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100247AD0);
}

uint64_t sub_100247AD0(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for Logger(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 32)],  a2,  v8);
  }

uint64_t sub_100247B4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100247B58);
}

char *sub_100247B58(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)unint64_t result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Logger(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 32)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_100247BCC(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[3] = "(";
  uint64_t result = type metadata accessor for Logger(319LL);
  if (v3 <= 0x3F)
  {
    v4[4] = *(void *)(result - 8) + 64LL;
    v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_initStructMetadata(a1, 256LL, 7LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

unint64_t sub_100247C70()
{
  unint64_t result = qword_1009A67C8;
  if (!qword_1009A67C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F7940, &type metadata for LocationFetcher.LocationFetcherError);
    atomic_store(result, (unint64_t *)&qword_1009A67C8);
  }

  return result;
}

uint64_t sub_100247CD4(os_log_s *a1)
{
  return sub_1002462BC(a1);
}

uint64_t sub_100247CE8(uint64_t a1)
{
  return sub_1002462D8(a1);
}

void *sub_100247CFC(uint64_t a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009A6B70);
  uint64_t v21 = *(void *)(v3 - 8);
  uint64_t v22 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v6 = *(void *)(a1 + 16);
  uint64_t v7 = _swiftEmptyArrayStorage;
  if (v6)
  {
    v20[1] = v1;
    uint64_t v25 = _swiftEmptyArrayStorage;
    sub_10003304C(0, v6, 0);
    uint64_t v7 = v25;
    uint64_t v8 = (uint64_t *)(a1 + 40);
    do
    {
      int v23 = *((unsigned __int8 *)v8 - 8);
      uint64_t v9 = *v8;
      uint64_t v10 = sub_100004AEC(&qword_1009A6C80);
      swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
      swift_retain_n(v9, 2LL);
      uint64_t v24 = Future.init(_:)(sub_100254600, v9);
      uint64_t v11 = sub_1000372EC( &qword_1009A6C88,  &qword_1009A6C80,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
      uint64_t v12 = Publisher.eraseToAnyPublisher()(v10, v11);
      swift_release();
      uint64_t v24 = v12;
      uint64_t v13 = swift_allocObject(&unk_10094AFF8, 32LL, 7LL);
      *(_BYTE *)(v13 + 16) = v23;
      *(void *)(v13 + 24) = v9;
      swift_retain();
      uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009A6C90);
      uint64_t v15 = sub_100004AEC(&qword_1009B1490);
      uint64_t v16 = sub_1000372EC( &qword_1009A6CA0,  (uint64_t *)&unk_1009A6C90,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      Publisher.map<A>(_:)(sub_10025462C, v13, v14, v15, v16);
      swift_release();
      swift_release();
      swift_release();
      uint64_t v25 = v7;
      unint64_t v18 = v7[2];
      unint64_t v17 = v7[3];
      if (v18 >= v17 >> 1)
      {
        sub_10003304C(v17 > 1, v18 + 1, 1);
        uint64_t v7 = v25;
      }

      v7[2] = v18 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v21 + 32))( (unint64_t)v7 + ((*(unsigned __int8 *)(v21 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80))
      + *(void *)(v21 + 72) * v18,
        v5,
        v22);
      v8 += 2;
      --v6;
    }

    while (v6);
  }

  return v7;
}

uint64_t sub_100247F64()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v0);
  uint64_t v2 = (char *)v19 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v19[1] = sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  unsigned int v20 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v21 = *(uint64_t (**)(char *))(v7 + 104);
  uint64_t v10 = v21(v9);
  static DispatchQoS.unspecified.getter(v10);
  int v23 = _swiftEmptyArrayStorage;
  uint64_t v11 = sub_100007864( (unint64_t *)&qword_10099BAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
  uint64_t v13 = sub_1000372EC( (unint64_t *)&qword_10099BAB0,  (uint64_t *)&unk_1009A0CD0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v12, v13, v0, v11);
  uint64_t v14 = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000035LL,  0x800000010085AC40LL,  v5,  v2,  v9,  0LL);
  uint64_t v15 = v21;
  uint64_t v16 = v22;
  *(void *)(v22 + 16) = v14;
  uint64_t v17 = ((uint64_t (*)(char *, void, uint64_t))v15)(v9, v20, v6);
  static DispatchQoS.unspecified.getter(v17);
  int v23 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v12, v13, v0, v11);
  *(void *)(v16 + 24) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000003BLL,  0x800000010085AC80LL,  v5,  v2,  v9,  0LL);
  *(void *)(v16 + 32) = &_swiftEmptySetSingleton;
  return v16;
}

uint64_t sub_1002481D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004AEC(&qword_1009BB4F0);
  uint64_t v3 = swift_allocObject(v2, 20LL, 7LL);
  *(_DWORD *)(v3 + 16) = 0;
  v0[6] = v3;
  v0[7] = &_swiftEmptyDictionarySingleton;
  v0[8] = &_swiftEmptySetSingleton;
  uint64_t v4 = type metadata accessor for DeviceIdentityUtility(0LL);
  v0[10] = 0LL;
  v0[11] = 0LL;
  v0[9] = 0LL;
  uint64_t v5 = swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  swift_retain();
  swift_defaultActor_initialize(v5);
  uint64_t v6 = v5 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  *(void *)(v5 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0LL;
  *(void *)(v5 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v5 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 8;
  v1[12] = v5;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009A6B10);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  v1[13] = PassthroughSubject.init()();
  *((_BYTE *)v1 + 112) = 0;
  uint64_t v9 = (char *)v1 + qword_1009A67D0;
  uint64_t v10 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v9, 1LL, 1LL, v10);
  if (qword_10099B628 != -1) {
    swift_once(&qword_10099B628, sub_1005E2E30);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = sub_10000A720(v11, (uint64_t)qword_100A2AEB8);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.info.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "AccessoryDiscoverySession.init()", v15, 2u);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009B5B20);
  unsafeFromAsyncTask<A>(_:)(&unk_1009C0FD0, 0LL, v16);
  if (v23)
  {
    v1[5] = v23;
    id v17 = v23;
    swift_release();
    uint64_t v18 = sub_100247F64();

    return v18;
  }

  else
  {
    unint64_t v20 = sub_100122CD4();
    uint64_t v21 = swift_allocError(&type metadata for CentralManager.Error, v20, 0LL, 0LL);
    *(void *)uint64_t v22 = 15LL;
    *(_OWORD *)(v22 + 8) = 0u;
    *(_OWORD *)(v22 + 24) = 0u;
    *(_BYTE *)(v22 + 40) = 11;
    swift_willThrow(v21);
    swift_errorRelease(v21);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000032LL,  0x800000010085AC00LL,  "searchpartyd/AccessoryDiscoverySession.swift",  44LL,  2LL,  39LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t sub_1002484BC()
{
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  return sub_100015794(v0 + qword_1009A67D0, (uint64_t *)&unk_1009AE480);
}

id *sub_10024852C()
{
  uint64_t v1 = v0;
  if (qword_10099B628 != -1) {
    swift_once(&qword_10099B628, sub_1005E2E30);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_10000A720(v2, (uint64_t)qword_100A2AEB8);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.info.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "AccessoryDiscoverySession.deinit", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100015794((uint64_t)v1 + qword_1009A67D0, (uint64_t *)&unk_1009AE480);
  return v1;
}

uint64_t sub_100248678()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for AccessoryDiscoverySession(uint64_t a1)
{
  uint64_t result = qword_1009A6860;
  if (!qword_1009A6860) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryDiscoverySession);
  }
  return result;
}

void sub_1002486D8(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[4] = "\b";
  v4[5] = "\b";
  v4[6] = "\b";
  void v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[9] = &unk_1007F7A70;
  sub_1001D74F4(319LL);
  if (v3 <= 0x3F)
  {
    v4[10] = *(void *)(v2 - 8) + 64LL;
    swift_initClassMetadata2(a1, 256LL, 11LL, v4, a1 + 216);
  }

uint64_t sub_10024878C()
{
  uint64_t v1 = v0;
  if (qword_10099B628 != -1) {
    swift_once(&qword_10099B628, sub_1005E2E30);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_10000A720(v2, (uint64_t)qword_100A2AEB8);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Stop scanning", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  sub_1007CEA34();
  uint64_t v7 = *(void *)(v1 + 48);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_100254D44,  v1,  v7,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
  uint64_t v13 = 0LL;
  memset(v12, 0, sizeof(v12));
  char v14 = -1;
  swift_retain();
  PassthroughSubject.send(completion:)(v12);
  swift_release();
  sub_100015794((uint64_t)v12, (uint64_t *)&unk_1009B1320);
  uint64_t result = OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_100254D7C,  v1,  v7,  (char *)&type metadata for () + 8,  &type metadata for Bool);
  if (LOBYTE(v12[0]) == 1)
  {
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(result);
    os_log_type_t v10 = static os_log_type_t.default.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v11 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "Found pending scanning request. Starting discovery session...",  v11,  2u);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    return sub_100248ADC();
  }

  return result;
}

void *sub_100248990(void *result, uint64_t a2)
{
  if (*result == 4LL)
  {
    uint64_t v2 = a2 + 16;
    swift_beginAccess(a2 + 16, v13, 0LL, 0LL);
    uint64_t result = (void *)swift_weakLoadStrong(v2);
    if (result)
    {
      uint64_t v3 = result;
      type metadata accessor for SPAccessoryDiscoverySessionError(0LL);
      uint64_t v5 = v4;
      uint64_t v11 = 1LL;
      unint64_t v6 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v7 = sub_100007864( &qword_10099C088,  (uint64_t (*)(uint64_t))type metadata accessor for SPAccessoryDiscoverySessionError,  (uint64_t)&unk_1007E2D64);
      _BridgedStoredNSError.init(_:userInfo:)(&v12, &v11, v6, v5, v7);
      uint64_t v8 = v12;
      uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009A6AF0);
      uint64_t v10 = OS_dispatch_queue.sync<A>(execute:)(sub_100253B8C, v3, v9);
      __chkstk_darwin(v10);
      os_activity(name:block:)("SPAccessoryDiscoverySessionError", 32LL, 2LL, sub_100253BD8);

      swift_release();
      return (void *)swift_bridgeObjectRelease();
    }
  }

  return result;
}

uint64_t sub_100248ADC()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A6CA8);
  uint64_t v79 = *(void *)(v2 - 8);
  uint64_t v80 = v2;
  __chkstk_darwin(v2);
  v78 = (char *)&v72 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC(&qword_1009A6CB0);
  uint64_t v82 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  v81 = (char *)&v72 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_1009A6E28);
  uint64_t v85 = *(void *)(v6 - 8);
  uint64_t v86 = v6;
  __chkstk_darwin(v6);
  v83 = (char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009A6E30);
  uint64_t v90 = *(void *)(v8 - 8);
  uint64_t v91 = v8;
  __chkstk_darwin(v8);
  v88 = (char *)&v72 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A6E38);
  uint64_t v92 = *(void *)(v10 - 8);
  uint64_t v93 = v10;
  __chkstk_darwin(v10);
  v89 = (char *)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  uint64_t v76 = *(void *)(v12 - 8);
  uint64_t v13 = *(void *)(v76 + 64);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v77 = (uint64_t)&v72 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v14);
  id v17 = (char *)&v72 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  unint64_t v20 = (char *)&v72 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v72 - v21;
  uint64_t v87 = *(void *)(v0 + 48);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100254A58, v0, v87, (char *)&type metadata for () + 8, v23);
  uint64_t v84 = 0LL;
  if (qword_10099B628 != -1) {
    swift_once(&qword_10099B628, sub_1005E2E30);
  }
  uint64_t v24 = type metadata accessor for Logger(0LL);
  sub_10000A720(v24, (uint64_t)qword_100A2AEB8);
  uint64_t v25 = sub_10001581C((uint64_t)v22, (uint64_t)v20, (uint64_t *)&unk_1009AE480);
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  int v27 = static os_log_type_t.default.getter(v26);
  if (os_log_type_enabled(v26, (os_log_type_t)v27))
  {
    int v73 = v27;
    uint64_t v74 = v4;
    v75 = v22;
    uint64_t v28 = swift_slowAlloc(32LL, -1LL);
    uint64_t v72 = swift_slowAlloc(64LL, -1LL);
    v95[0] = v72;
    *(_DWORD *)uint64_t v28 = 136315651;
    uint64_t v29 = Array.description.getter(&off_100934010, &type metadata for BAServiceIdentifier);
    uint64_t v94 = sub_1003F11D4(v29, v30, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v28 + 4, v28 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v28 + 12) = 2160;
    uint64_t v94 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v28 + 14, v28 + 22);
    *(_WORD *)(v28 + 22) = 2081;
    sub_10001581C((uint64_t)v20, (uint64_t)v17, (uint64_t *)&unk_1009AE480);
    uint64_t v31 = type metadata accessor for MACAddress(0LL);
    uint64_t v32 = *(void *)(v31 - 8);
    uint64_t v33 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v32 + 48))(v17, 1LL, v31);
    if ((_DWORD)v33 == 1)
    {
      sub_100015794((uint64_t)v17, (uint64_t *)&unk_1009AE480);
      uint64_t v34 = 0LL;
      unint64_t v35 = 0xE000000000000000LL;
    }

    else
    {
      uint64_t v34 = MACAddress.description.getter(v33);
      unint64_t v35 = v36;
      (*(void (**)(char *, uint64_t))(v32 + 8))(v17, v31);
    }

    uint64_t v4 = v74;
    uint64_t v94 = sub_1003F11D4(v34, v35, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, v95, v28 + 24, v28 + 32);
    swift_bridgeObjectRelease();
    sub_100015794((uint64_t)v20, (uint64_t *)&unk_1009AE480);
    _os_log_impl( (void *)&_mh_execute_header,  v26,  (os_log_type_t)v73,  "Call centralManager.startScanning for %s macAddress: %{private,mask.hash}s",  (uint8_t *)v28,  0x20u);
    uint64_t v37 = v72;
    swift_arrayDestroy(v72, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_slowDealloc(v28, -1LL, -1LL);

    uint64_t v22 = v75;
  }

  else
  {
    sub_100015794((uint64_t)v20, (uint64_t *)&unk_1009AE480);
  }

  v38 = sub_1004E8110((uint64_t)&off_100934010);
  uint64_t v39 = sub_1007CE38C((uint64_t)v38);
  v75 = (char *)v39;
  swift_bridgeObjectRelease();
  v95[0] = v39;
  uint64_t v40 = sub_100004AEC(&qword_1009A6CC8);
  uint64_t v41 = type metadata accessor for Peripheral(0LL);
  uint64_t v74 = v41;
  uint64_t v42 = sub_1000372EC( &qword_1009A6CD0,  &qword_1009A6CC8,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v43 = v78;
  Publisher.compactMap<A>(_:)(sub_100249478, 0LL, v40, v41, v42);
  uint64_t v44 = sub_1000372EC( &qword_1009A6CD8,  &qword_1009A6CA8,  (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  uint64_t v45 = v80;
  v46 = v81;
  Publisher.filter(_:)(sub_1002494AC, 0LL, v80, v44);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v43, v45);
  uint64_t v47 = v77;
  sub_10001581C((uint64_t)v22, v77, (uint64_t *)&unk_1009AE480);
  uint64_t v48 = *(unsigned __int8 *)(v76 + 80);
  uint64_t v49 = (v48 + 16) & ~v48;
  unint64_t v50 = (v13 + v49 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v51 = swift_allocObject(&unk_10094B1B0, v50 + 8, v48 | 7);
  sub_100254B24(v47, v51 + v49);
  *(void *)(v51 + v50) = v1;
  uint64_t v52 = sub_1000372EC( &qword_1009A6CE0,  &qword_1009A6CB0,  (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
  swift_retain();
  v53 = v83;
  Publisher.first(where:)(sub_100254B6C, v51, v4, v52);
  swift_release();
  (*(void (**)(char *, uint64_t))(v82 + 8))(v46, v4);
  uint64_t v54 = swift_retain();
  uint64_t v55 = static Subscribers.Demand.unlimited.getter(v54);
  uint64_t v56 = sub_100004AEC((uint64_t *)&unk_1009A6C10);
  uint64_t v57 = sub_1000372EC( &qword_1009A6E40,  &qword_1009A6E28,  (uint64_t)&protocol conformance descriptor for Publishers.FirstWhere<A>);
  uint64_t v58 = sub_1000372EC( &qword_1009A6C20,  (uint64_t *)&unk_1009A6C10,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  v59 = v88;
  uint64_t v60 = v86;
  Publisher<>.flatMap<A>(maxPublishers:_:)(v55, sub_10025469C, v1, v86, v56, v57, v58);
  swift_release();
  (*(void (**)(char *, uint64_t))(v85 + 8))(v53, v60);
  uint64_t v61 = swift_allocObject(&unk_10094B1D8, 24LL, 7LL);
  *(void *)(v61 + 16) = &off_100934010;
  uint64_t v62 = static Subscribers.Demand.unlimited.getter(v61);
  uint64_t v63 = sub_1000372EC( &qword_1009A6E48,  &qword_1009A6E30,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  uint64_t v64 = (uint64_t)v22;
  v65 = v89;
  uint64_t v66 = v91;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v62, sub_100254BC0, v61, v91, v74, v56, v63, v58);
  swift_release();
  (*(void (**)(char *, uint64_t))(v90 + 8))(v59, v66);
  uint64_t v67 = sub_1000372EC( (unint64_t *)&unk_1009A6E50,  &qword_1009A6E38,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  uint64_t v68 = v93;
  uint64_t v69 = Publisher.eraseToAnyPublisher()(v93, v67);
  uint64_t v70 = (*(uint64_t (**)(char *, uint64_t))(v92 + 8))(v65, v68);
  __chkstk_darwin(v70);
  *(&v72 - 2) = v1;
  *(&v72 - 1) = v69;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_100254BD8,  &v72 - 4,  v87,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
  swift_release();
  sub_100015794(v64, (uint64_t *)&unk_1009AE480);
  return swift_release();
}

uint64_t sub_10024937C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  __chkstk_darwin(v4);
  uint64_t v6 = &v10[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = a1 + qword_1009A67D0;
  swift_beginAccess(a1 + qword_1009A67D0, v11, 0LL, 0LL);
  sub_10001581C(v7, a2, (uint64_t *)&unk_1009AE480);
  *(_BYTE *)(a1 + 112) = 0;
  uint64_t v8 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v6, 1LL, 1LL, v8);
  swift_beginAccess(v7, v10, 33LL, 0LL);
  sub_100254CFC((uint64_t)v6, v7);
  return swift_endAccess(v10);
}

void **sub_100249478@<X0>(void **result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  else {
    uint64_t result = v3;
  }
  *a2 = v3;
  return result;
}

uint64_t sub_1002494AC(void *a1)
{
  return sub_10024A7FC(a1, (uint64_t)sub_100254DA4);
}

uint64_t sub_1002494B8(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v47 = a3;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v45 = *(void *)(v5 - 8);
  uint64_t v46 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v44 - v9;
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for MACAddress(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v44 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  unint64_t v20 = (char *)&v44 - v19;
  uint64_t v21 = *a1;
  sub_10001581C(a2, (uint64_t)v13, (uint64_t *)&unk_1009AE480);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14) == 1)
  {
    sub_100015794((uint64_t)v13, (uint64_t *)&unk_1009AE480);
    char v22 = 1;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v15 + 32))(v20, v13, v14);
    uint64_t v48 = v20;
    if (qword_10099B628 != -1) {
      swift_once(&qword_10099B628, sub_1005E2E30);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    sub_10000A720(v23, (uint64_t)qword_100A2AEB8);
    sub_1004A2AC8(0xD000000000000016LL, 0x800000010085ADD0LL);
    __chkstk_darwin(v24);
    *(&v44 - 2) = (uint64_t)v48;
    *(&v44 - 1) = v25;
    uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009B5B30);
    Lock.callAsFunction<A>(_:)(sub_100254CE4, &v44 - 4, v26);
    int v27 = v51;
    if (v51)
    {
      sub_1004A2AC8(0xD000000000000015LL, 0x800000010085ADF0LL);
      id v28 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(v21
                                                                  + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "identifier"));
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v28);

      id v29 = [*(id *)&v27[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v29);

      char v22 = static UUID.== infix(_:_:)(v10, v8);
      uint64_t v30 = v46;
      uint64_t v31 = *(void (**)(char *, uint64_t))(v45 + 8);
      v31(v8, v46);
      v31(v10, v30);
      (*(void (**)(char *, uint64_t))(v15 + 8))(v48, v14);
    }

    else
    {
      uint64_t v32 = v48;
      uint64_t v33 = (*(uint64_t (**)(char *, char *, uint64_t))(v15 + 16))(v18, v48, v14);
      uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
      os_log_type_t v35 = static os_log_type_t.error.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = swift_slowAlloc(22LL, -1LL);
        uint64_t v51 = (char *)swift_slowAlloc(32LL, -1LL);
        uint64_t v37 = (uint64_t)v51;
        *(_DWORD *)uint64_t v36 = 141558275;
        uint64_t v49 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v36 + 4, v36 + 12);
        *(_WORD *)(v36 + 12) = 2081;
        uint64_t v38 = sub_100007864( &qword_1009A6E60,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
        uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter(v14, v38);
        uint64_t v49 = sub_1003F11D4(v39, v40, (uint64_t *)&v51);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v36 + 14, v36 + 22);
        swift_bridgeObjectRelease();
        uint64_t v41 = *(void (**)(char *, uint64_t))(v15 + 8);
        v41(v18, v14);
        _os_log_impl( (void *)&_mh_execute_header,  v34,  v35,  "Missing peripheral for %{private,mask.hash}s",  (uint8_t *)v36,  0x16u);
        swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v37, -1LL, -1LL);
        swift_slowDealloc(v36, -1LL, -1LL);

        uint64_t v42 = v48;
      }

      else
      {

        uint64_t v41 = *(void (**)(char *, uint64_t))(v15 + 8);
        v41(v18, v14);
        uint64_t v42 = v32;
      }

      v41(v42, v14);
      char v22 = 0;
    }
  }

  return v22 & 1;
}

uint64_t sub_10024997C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A6CF8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v47 = v4;
  uint64_t v48 = v5;
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009A6D00);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v50 = v8;
  uint64_t v51 = v9;
  __chkstk_darwin(v8);
  uint64_t v45 = (char *)&v43 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_1009A6D08);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v52 = v11;
  uint64_t v53 = v12;
  __chkstk_darwin(v11);
  uint64_t v46 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100004AEC(&qword_1009A6D10);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v54 = v14;
  uint64_t v55 = v15;
  __chkstk_darwin(v14);
  uint64_t v49 = (char *)&v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v56 = sub_1002543EC(a2);
  uint64_t v17 = swift_retain();
  uint64_t v44 = static Subscribers.Demand.unlimited.getter(v17);
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009A6C10);
  uint64_t v19 = sub_100022898(0LL, &qword_1009A6D18, &OBJC_CLASS___SPDiscoveredAccessory_ptr);
  uint64_t v20 = sub_100004AEC(&qword_1009A6D20);
  uint64_t v21 = sub_1000372EC( &qword_1009A6C20,  (uint64_t *)&unk_1009A6C10,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v22 = sub_1000372EC( &qword_1009A6D28,  &qword_1009A6D20,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.flatMap<A, B>(maxPublishers:_:)(v44, sub_100254BF0, a1, v18, v19, v20, v21, v22);
  swift_release();
  swift_release();
  uint64_t v23 = swift_retain();
  uint64_t v24 = static Subscribers.Demand.unlimited.getter(v23);
  uint64_t v25 = sub_1000372EC( &qword_1009A6D30,  &qword_1009A6CF8,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  uint64_t v26 = v45;
  uint64_t v27 = v24;
  uint64_t v28 = v47;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v27, sub_100254C1C, a1, v47, v19, v20, v25, v22);
  swift_release();
  (*(void (**)(char *, uint64_t))(v48 + 8))(v7, v28);
  uint64_t v29 = sub_100004AEC(&qword_1009A6B80);
  uint64_t v30 = sub_1000372EC( &qword_1009A6D38,  &qword_1009A6D00,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  uint64_t v31 = v46;
  uint64_t v32 = v50;
  Publisher.map<A>(_:)(sub_100249DA8, 0LL, v50, v29, v30);
  (*(void (**)(char *, uint64_t))(v51 + 8))(v26, v32);
  uint64_t v33 = sub_100004AEC(&qword_1009A6D40);
  uint64_t v34 = sub_1000372EC( &qword_1009A6D48,  &qword_1009A6D08,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  uint64_t v35 = sub_1000372EC(&qword_1009A6D50, &qword_1009A6D40, (uint64_t)&protocol conformance descriptor for Just<A>);
  uint64_t v36 = v49;
  uint64_t v37 = v52;
  Publisher.catch<A>(_:)(sub_100249DB8, 0LL, v52, v33, v34, v35);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v31, v37);
  uint64_t v38 = swift_allocObject(&unk_10094AF80, 24LL, 7LL);
  swift_weakInit(v38 + 16, a1);
  uint64_t v39 = sub_1000372EC( &qword_1009A6D58,  &qword_1009A6D10,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
  uint64_t v40 = v54;
  uint64_t v41 = Publisher<>.sink(receiveValue:)(sub_100254C54, v38, v54, v39);
  swift_release();
  (*(void (**)(char *, uint64_t))(v55 + 8))(v36, v40);
  *(void *)(a1 + 80) = v41;
  return swift_release();
}

id sub_100249DA8@<X0>(void **a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v2 = *a1;
  *(void *)a2 = v2;
  *(_BYTE *)(a2 + 41) = 0;
  return v2;
}

uint64_t sub_100249DB8(void *a1)
{
  return sub_10024FF84(a1, &qword_1009A6B80);
}

void sub_100249DC4(uint64_t a1, uint64_t a2)
{
  if ((v27 & 1) != 0)
  {
    sub_100254338((uint64_t)v26, (uint64_t)&v24);
    if (qword_10099B628 != -1) {
      swift_once(&qword_10099B628, sub_1005E2E30);
    }
    uint64_t v3 = type metadata accessor for Logger(0LL);
    sub_10000A720(v3, (uint64_t)qword_100A2AEB8);
    uint64_t v4 = sub_100254374(&v24, (uint64_t)v23);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v8 = swift_slowAlloc(32LL, -1LL);
      uint64_t v22 = v8;
      *(_DWORD *)uint64_t v7 = 136446210;
      sub_1007C9800();
      uint64_t v21 = sub_1003F11D4(v9, v10, &v22);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v7 + 4, v7 + 12);
      swift_bridgeObjectRelease();
      sub_1002543B0(v23);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Peripheral discovery error %{public}s", v7, 0xCu);
      swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1LL, -1LL);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    else
    {

      sub_1002543B0(v23);
    }

    sub_1002543B0((uint64_t *)&v24);
  }

  else
  {
    uint64_t v11 = a2 + 16;
    uint64_t v12 = (void *)v26[0];
    if (qword_10099B628 != -1) {
      swift_once(&qword_10099B628, sub_1005E2E30);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10000A720(v13, (uint64_t)qword_100A2AEB8);
    id v14 = v12;
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.default.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v18 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v17 = 138543362;
      id v24 = v14;
      id v19 = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v17 + 4, v17 + 12);
      *uint64_t v18 = v14;

      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Discovered %{public}@", v17, 0xCu);
      uint64_t v20 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v18, 1LL, v20);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    else
    {

      uint64_t v15 = (os_log_s *)v14;
    }

    swift_beginAccess(v11, &v24, 0LL, 0LL);
    if (swift_weakLoadStrong(v11))
    {
      swift_retain();
      swift_release();
      v23[0] = (uint64_t)v14;
      PassthroughSubject.send(_:)(v23);

      swift_release();
    }

    else
    {
    }
  }

uint64_t sub_10024A13C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A6CA8);
  uint64_t v61 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v52 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC(&qword_1009A6CB0);
  uint64_t v62 = *(void *)(v5 - 8);
  uint64_t v63 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009A6CB8);
  uint64_t v66 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v64 = (char *)&v52 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A6CC0);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  v65 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = *(void *)(v1 + 48);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_10025466C,  v1,  v13,  (char *)&type metadata for () + 8,  &type metadata for Bool);
  if (LOBYTE(v69[0]) == 1)
  {
    uint64_t v67 = v2;
    uint64_t v60 = v13;
    if (qword_10099B628 != -1) {
      swift_once(&qword_10099B628, sub_1005E2E30);
    }
    uint64_t v56 = v8;
    uint64_t v57 = v11;
    uint64_t v58 = v10;
    uint64_t v59 = 0LL;
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = sub_10000A720(v14, (uint64_t)qword_100A2AEB8);
    os_log_type_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      v69[0] = v19;
      *(_DWORD *)uint64_t v18 = 136315138;
      uint64_t v20 = Array.description.getter(&off_100934090, &type metadata for BAServiceIdentifier);
      uint64_t v68 = sub_1003F11D4(v20, v21, v69);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, v69, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Call centralManager.startScanning for %s", v18, 0xCu);
      swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v19, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    uint64_t v22 = sub_1004E8110((uint64_t)&off_100934090);
    uint64_t v23 = sub_1007CE38C((uint64_t)v22);
    uint64_t v55 = v23;
    swift_bridgeObjectRelease();
    v69[0] = v23;
    uint64_t v24 = sub_100004AEC(&qword_1009A6CC8);
    uint64_t v54 = v24;
    uint64_t v25 = type metadata accessor for Peripheral(0LL);
    uint64_t v52 = v25;
    uint64_t v53 = sub_1000372EC( &qword_1009A6CD0,  &qword_1009A6CC8,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.compactMap<A>(_:)(sub_100254DB8, 0LL, v24, v25, v53);
    uint64_t v26 = sub_1000372EC( &qword_1009A6CD8,  &qword_1009A6CA8,  (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
    uint64_t v27 = v67;
    Publisher.filter(_:)(sub_10024A7F0, 0LL, v67, v26);
    uint64_t v61 = *(void *)(v61 + 8);
    ((void (*)(char *, uint64_t))v61)(v4, v27);
    uint64_t v28 = swift_retain();
    uint64_t v29 = static Subscribers.Demand.unlimited.getter(v28);
    uint64_t v30 = sub_100004AEC((uint64_t *)&unk_1009A6C10);
    uint64_t v31 = sub_1000372EC( &qword_1009A6CE0,  &qword_1009A6CB0,  (uint64_t)&protocol conformance descriptor for Publishers.Filter<A>);
    uint64_t v32 = sub_1000372EC( &qword_1009A6C20,  (uint64_t *)&unk_1009A6C10,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    uint64_t v33 = v63;
    uint64_t v34 = v64;
    Publisher<>.flatMap<A>(maxPublishers:_:)(v29, sub_10025469C, v1, v63, v30, v31, v32);
    swift_release();
    (*(void (**)(char *, uint64_t))(v62 + 8))(v7, v33);
    uint64_t v35 = swift_allocObject(&unk_10094B020, 24LL, 7LL);
    *(void *)(v35 + 16) = &off_100934090;
    uint64_t v36 = static Subscribers.Demand.unlimited.getter(v35);
    uint64_t v37 = sub_1000372EC( &qword_1009A6CE8,  &qword_1009A6CB8,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    uint64_t v38 = v65;
    uint64_t v39 = v56;
    uint64_t v63 = v1;
    uint64_t v40 = v4;
    uint64_t v41 = v52;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v36, sub_100254DA0, v35, v56, v52, v30, v37, v32);
    swift_release();
    (*(void (**)(char *, uint64_t))(v66 + 8))(v34, v39);
    uint64_t v42 = sub_1000372EC( &qword_1009A6CF0,  &qword_1009A6CC0,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    uint64_t v43 = v58;
    uint64_t v44 = Publisher.eraseToAnyPublisher()(v58, v42);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v38, v43);
    v69[0] = v55;
    uint64_t v45 = Publisher.compactMap<A>(_:)(sub_10024A96C, 0LL, v54, v41, v53);
    __chkstk_darwin(v45);
    *(&v52 - 4) = v63;
    *(&v52 - 3) = v44;
    *(&v52 - 2) = (uint64_t)v40;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_1002546D8,  &v52 - 6,  v60,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
    swift_release();
    swift_release();
    return ((uint64_t (*)(char *, uint64_t))v61)(v40, v67);
  }

  else
  {
    if (qword_10099B628 != -1) {
      swift_once(&qword_10099B628, sub_1005E2E30);
    }
    uint64_t v47 = type metadata accessor for Logger(0LL);
    uint64_t v48 = sub_10000A720(v47, (uint64_t)qword_100A2AEB8);
    uint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
    os_log_type_t v50 = static os_log_type_t.error.getter(v49);
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v51 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v49,  v50,  "Scanning in progress. Will try again once existing session stops scanning.",  v51,  2u);
      swift_slowDealloc(v51, -1LL, -1LL);
    }

    return OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_100254690,  v1,  v13,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
  }

uint64_t sub_10024A7F0(void *a1)
{
  return sub_10024A7FC(a1, (uint64_t)sub_100254A40);
}

uint64_t sub_10024A7FC(void *a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*a1 + OBJC_IVAR____TtC12searchpartyd10Peripheral_lock);
  v6[2] = *a1;
  uint64_t v4 = sub_100004AEC(&qword_1009A6E20);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(a2, v6, v3, (char *)&type metadata for () + 8, v4);
  return v7 & 1;
}

uint64_t sub_10024A87C@<X0>(char **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009C0FA0);
  uint64_t inited = swift_initStackObject(v4, &v10);
  *(_OWORD *)(inited + 16) = xmmword_1007E67D0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBConnectPeripheralOptionHideFromBTSettings);
  *(void *)(inited + 40) = v6;
  *(void *)(inited + 72) = &type metadata for Bool;
  *(_BYTE *)(inited + 48) = 1;
  unint64_t v7 = sub_100412CF8(inited);
  uint64_t v8 = sub_1007CEDA0(v3, v7);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v8;
  return result;
}

uint64_t sub_10024A924@<X0>(uint64_t a1@<X1>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_1004E8110(a1);
  uint64_t v4 = sub_1004A3734((uint64_t)v3);
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v4;
  return result;
}

uint64_t *sub_10024A96C@<X0>(uint64_t *result@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = *result;
  if (*result < 0)
  {
    uint64_t v4 = v3 & 0x7FFFFFFFFFFFFFFFLL;
    uint64_t result = (uint64_t *)(id)(v3 & 0x7FFFFFFFFFFFFFFFLL);
  }

  else
  {
    uint64_t v4 = 0LL;
  }

  *a2 = v4;
  return result;
}

uint64_t sub_10024A9A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v59 = a3;
  uint64_t v5 = sub_100004AEC(&qword_1009A6CF8);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v50 = v5;
  uint64_t v51 = v6;
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009A6D00);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v53 = v9;
  uint64_t v54 = v10;
  __chkstk_darwin(v9);
  uint64_t v48 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009A6D08);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v55 = v12;
  uint64_t v56 = v13;
  __chkstk_darwin(v12);
  uint64_t v49 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009A6D10);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v57 = v15;
  uint64_t v58 = v16;
  __chkstk_darwin(v15);
  uint64_t v52 = (char *)&v47 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v60 = sub_1002543EC(a2);
  uint64_t v18 = swift_retain();
  uint64_t v47 = static Subscribers.Demand.unlimited.getter(v18);
  uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009A6C10);
  uint64_t v20 = sub_100022898(0LL, &qword_1009A6D18, &OBJC_CLASS___SPDiscoveredAccessory_ptr);
  uint64_t v21 = sub_100004AEC(&qword_1009A6D20);
  uint64_t v22 = sub_1000372EC( &qword_1009A6C20,  (uint64_t *)&unk_1009A6C10,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v23 = sub_1000372EC( &qword_1009A6D28,  &qword_1009A6D20,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.flatMap<A, B>(maxPublishers:_:)(v47, sub_1002546F4, a1, v19, v20, v21, v22, v23);
  swift_release();
  swift_release();
  uint64_t v24 = swift_retain();
  uint64_t v25 = static Subscribers.Demand.unlimited.getter(v24);
  uint64_t v26 = sub_1000372EC( &qword_1009A6D30,  &qword_1009A6CF8,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  uint64_t v27 = v48;
  uint64_t v28 = v50;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v25, sub_100254720, a1, v50, v20, v21, v26, v23);
  swift_release();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v8, v28);
  uint64_t v29 = sub_100004AEC(&qword_1009A6B80);
  uint64_t v30 = sub_1000372EC( &qword_1009A6D38,  &qword_1009A6D00,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  uint64_t v31 = v49;
  uint64_t v32 = v53;
  Publisher.map<A>(_:)(sub_100254DD0, 0LL, v53, v29, v30);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v27, v32);
  uint64_t v33 = sub_100004AEC(&qword_1009A6D40);
  uint64_t v34 = sub_1000372EC( &qword_1009A6D48,  &qword_1009A6D08,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  uint64_t v35 = sub_1000372EC(&qword_1009A6D50, &qword_1009A6D40, (uint64_t)&protocol conformance descriptor for Just<A>);
  uint64_t v36 = v52;
  uint64_t v37 = v55;
  Publisher.catch<A>(_:)(sub_100249DB8, 0LL, v55, v33, v34, v35);
  (*(void (**)(char *, uint64_t))(v56 + 8))(v31, v37);
  uint64_t v38 = swift_allocObject(&unk_10094AF80, 24LL, 7LL);
  swift_weakInit(v38 + 16, a1);
  uint64_t v39 = sub_1000372EC( &qword_1009A6D58,  &qword_1009A6D10,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
  uint64_t v40 = v57;
  uint64_t v41 = Publisher<>.sink(receiveValue:)(sub_100254758, v38, v57, v39);
  swift_release();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v36, v40);
  *(void *)(a1 + 80) = v41;
  swift_release();
  uint64_t v42 = swift_allocObject(&unk_10094AF80, 24LL, 7LL);
  swift_weakInit(v42 + 16, a1);
  uint64_t v43 = sub_100004AEC(&qword_1009A6CA8);
  uint64_t v44 = sub_1000372EC( &qword_1009A6CD8,  &qword_1009A6CA8,  (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  uint64_t v45 = Publisher<>.sink(receiveValue:)(sub_100254760, v42, v43, v44);
  swift_release();
  *(void *)(a1 + 88) = v45;
  return swift_release();
}

uint64_t sub_10024AE54@<X0>( void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t *a7@<X8>)
{
  uint64_t v26 = a6;
  uint64_t v28 = a7;
  uint64_t v12 = sub_100004AEC(&qword_1009A6D68);
  uint64_t v27 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *a1;
  uint64_t v16 = swift_allocObject(a3, 32LL, 7LL);
  *(void *)(v16 + 16) = v15;
  *(void *)(v16 + 24) = a2;
  uint64_t v17 = sub_100004AEC(&qword_1009A6D70);
  swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
  id v18 = v15;
  swift_retain();
  uint64_t v29 = Future.init(_:)(a4, v16);
  uint64_t v19 = swift_allocObject(a5, 24LL, 7LL);
  *(void *)(v19 + 16) = v18;
  uint64_t v20 = sub_100022898(0LL, &qword_1009A6D18, &OBJC_CLASS___SPDiscoveredAccessory_ptr);
  uint64_t v21 = sub_1000372EC(&qword_1009A6D78, &qword_1009A6D70, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  id v22 = v18;
  Publisher.map<A>(_:)(v26, v19, v17, v20, v21);
  swift_release();
  swift_release();
  uint64_t v23 = sub_1000372EC( (unint64_t *)&unk_1009A6D80,  &qword_1009A6D68,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  uint64_t v24 = Publisher.eraseToAnyPublisher()(v12, v23);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v14, v12);
  *uint64_t v28 = v24;
  return result;
}

void sub_10024B020(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Endianness(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001581C(a1, (uint64_t)v50, &qword_1009A6B80);
  if ((v51 & 1) == 0)
  {
    os_log_t v18 = (os_log_t)v50[0];
    id v19 = [v50[0] discoveredMetadata];
    id v20 = [v19 productData];

    uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
    uint64_t v23 = v22;

    sub_1000F6254(v21, v23);
    if (v25 >> 60 != 15)
    {
      uint64_t v26 = v24;
      unint64_t v27 = v25;
      sub_1000F54C8(v24, v25);
      uint64_t v29 = v28;
      uint64_t v30 = sub_1000F55FC(v26, v27);
      uint64_t v32 = v31;
      static Endianness.current.getter(v30);
      sub_100018B30();
      FixedWidthInteger.init(data:ofEndianness:)(&v48, v30, v32, v6);
      if (BYTE4(v48)) {
        uint64_t v33 = 0LL;
      }
      else {
        uint64_t v33 = (int)v48;
      }
      if (sub_1005E269C(v29, v33))
      {
        if (qword_10099B628 != -1) {
          swift_once(&qword_10099B628, sub_1005E2E30);
        }
        uint64_t v34 = type metadata accessor for Logger(0LL);
        sub_10000A720(v34, (uint64_t)qword_100A2AEB8);
        uint64_t v35 = v18;
        os_log_t v18 = (os_log_t)Logger.logObject.getter(v35);
        os_log_type_t v36 = static os_log_type_t.default.getter(v18);
        if (os_log_type_enabled(v18, v36))
        {
          v45[0] = v18;
          uint64_t v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v38 = (os_log_s **)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)uint64_t v37 = 138412290;
          uint64_t v48 = v35;
          uint64_t v39 = v35;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, &v49, v37 + 4, v37 + 12);
          char *v38 = v35;

          os_log_t v18 = v45[0];
          _os_log_impl((void *)&_mh_execute_header, v45[0], v36, "Ignoring Apple audio accessory %@.", v37, 0xCu);
          uint64_t v40 = sub_100004AEC((uint64_t *)&unk_10099FB20);
          swift_arrayDestroy(v38, 1LL, v40);
          swift_slowDealloc(v38, -1LL, -1LL);
          swift_slowDealloc(v37, -1LL, -1LL);
          sub_1000182F0(v26, v27);
        }

        else
        {

          sub_1000182F0(v26, v27);
        }

uint64_t sub_10024B574(void **a1, uint64_t a2)
{
  uint64_t v2 = *a1;
  uint64_t v3 = a2 + 16;
  if (qword_10099B628 != -1) {
    swift_once(&qword_10099B628, sub_1005E2E30);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000A720(v4, (uint64_t)qword_100A2AEB8);
  id v5 = v2;
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    id v13 = v5;
    id v10 = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v13, &v14, v8 + 4, v8 + 12);
    *uint64_t v9 = v5;

    _os_log_impl((void *)&_mh_execute_header, v6, v7, "AccessoryDiscoverySession Lost %@", v8, 0xCu);
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
  }

  swift_beginAccess(v3, &v13, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    sub_100253980((uint64_t)v5);
    return swift_release();
  }

  return result;
}

uint64_t sub_10024B73C@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v5 = sub_100004AEC(&qword_1009C0FF0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009A6E00);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v13 = (char *)*a1;
  v33[3] = &type metadata for BAServiceIdentifier;
  v33[4] = &off_10094C298;
  LOBYTE(v33[0]) = 0;
  uint64_t v14 = (uint64_t *)&v13[OBJC_IVAR____TtC12searchpartyd10Peripheral_services];
  swift_beginAccess(&v13[OBJC_IVAR____TtC12searchpartyd10Peripheral_services], v32, 0LL, 0LL);
  uint64_t v15 = *v14;
  uint64_t v31 = v33;
  swift_bridgeObjectRetain(v15);
  sub_100373D00((uint64_t (*)(uint64_t *))sub_100254D88, (uint64_t)v30, v15);
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
  if (v17)
  {
    os_log_t v18 = sub_1004E826C(a2);
    uint64_t v19 = swift_allocObject(&unk_10094B188, 32LL, 7LL);
    *(void *)(v19 + 16) = v17;
    *(void *)(v19 + 24) = v18;
    uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009A6E10);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    swift_retain();
    swift_bridgeObjectRetain(v18);
    v33[0] = Future.init(_:)(sub_100254DD4, v19);
    uint64_t v21 = sub_1000372EC( (unint64_t *)&qword_1009C0F80,  (uint64_t *)&unk_1009A6E10,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
    uint64_t v22 = Publisher.eraseToAnyPublisher()(v20, v21);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
  }

  else
  {
    v33[0] = v13;
    uint64_t v24 = type metadata accessor for Peripheral(0LL);
    unint64_t v25 = v13;
    Just.init(_:)(v33, v24);
    unint64_t v26 = sub_100122CD4();
    Just.setFailureType<A>(to:)( &type metadata for CentralManager.Error,  v5,  &type metadata for CentralManager.Error,  v26);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v27 = sub_1000372EC( &qword_1009A6E08,  &qword_1009A6E00,  (uint64_t)&protocol conformance descriptor for Result<A, B>.Publisher);
    uint64_t v22 = Publisher.eraseToAnyPublisher()(v9, v27);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  *uint64_t v29 = v22;
  return result;
}

uint64_t sub_10024B9E0@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v29 = a3;
  uint64_t v5 = sub_100004AEC(&qword_1009C0FF0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009A6E00);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v13 = (char *)*a1;
  v33[3] = &type metadata for BAServiceIdentifier;
  v33[4] = &off_10094C298;
  LOBYTE(v33[0]) = 1;
  uint64_t v14 = (uint64_t *)&v13[OBJC_IVAR____TtC12searchpartyd10Peripheral_services];
  swift_beginAccess(&v13[OBJC_IVAR____TtC12searchpartyd10Peripheral_services], v32, 0LL, 0LL);
  uint64_t v15 = *v14;
  uint64_t v31 = v33;
  swift_bridgeObjectRetain(v15);
  sub_100373D00((uint64_t (*)(uint64_t *))sub_100254D88, (uint64_t)v30, v15);
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
  if (v17)
  {
    os_log_t v18 = sub_1004E8280(a2);
    uint64_t v19 = swift_allocObject(&unk_10094B160, 32LL, 7LL);
    *(void *)(v19 + 16) = v17;
    *(void *)(v19 + 24) = v18;
    uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009A6E10);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    swift_retain();
    swift_bridgeObjectRetain(v18);
    v33[0] = Future.init(_:)(sub_100254A08, v19);
    uint64_t v21 = sub_1000372EC( (unint64_t *)&qword_1009C0F80,  (uint64_t *)&unk_1009A6E10,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
    uint64_t v22 = Publisher.eraseToAnyPublisher()(v20, v21);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
  }

  else
  {
    v33[0] = v13;
    uint64_t v24 = type metadata accessor for Peripheral(0LL);
    unint64_t v25 = v13;
    Just.init(_:)(v33, v24);
    unint64_t v26 = sub_100122CD4();
    Just.setFailureType<A>(to:)( &type metadata for CentralManager.Error,  v5,  &type metadata for CentralManager.Error,  v26);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v27 = sub_1000372EC( &qword_1009A6E08,  &qword_1009A6E00,  (uint64_t)&protocol conformance descriptor for Result<A, B>.Publisher);
    uint64_t v22 = Publisher.eraseToAnyPublisher()(v9, v27);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  *uint64_t v29 = v22;
  return result;
}

uint64_t sub_10024BC88(void *a1, int a2)
{
  uint64_t v3 = v2;
  int v40 = a2;
  uint64_t v5 = type metadata accessor for MACAddress(0LL);
  uint64_t v38 = *(void *)(v5 - 8);
  uint64_t v39 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B628 != -1) {
    swift_once(&qword_10099B628, sub_1005E2E30);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  sub_10000A720(v12, (uint64_t)qword_100A2AEB8);
  id v13 = a1;
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc(22LL, -1LL);
    uint64_t v37 = v3;
    uint64_t v17 = v16;
    uint64_t v36 = swift_slowAlloc(64LL, -1LL);
    uint64_t v42 = v36;
    *(_DWORD *)uint64_t v17 = 136315394;
    uint64_t v35 = v17 + 4;
    id v18 = [*(id *)&v13[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v18);

    uint64_t v19 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v8, v19);
    unint64_t v22 = v21;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    uint64_t v41 = sub_1003F11D4(v20, v22, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v35, v17 + 12);

    swift_bridgeObjectRelease();
    *(_WORD *)(v17 + 12) = 2080;
    uint64_t v23 = sub_1004A1510(v7);
    uint64_t v24 = MACAddress.hexString.getter(v23);
    unint64_t v26 = v25;
    (*(void (**)(char *, uint64_t))(v38 + 8))(v7, v39);
    uint64_t v41 = sub_1003F11D4(v24, v26, &v42);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v17 + 14, v17 + 22);

    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "createAccessory from peripheral: %s [%s]",  (uint8_t *)v17,  0x16u);
    uint64_t v27 = v36;
    swift_arrayDestroy(v36, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    uint64_t v28 = v17;
    uint64_t v3 = v37;
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v29 = swift_allocObject(&unk_10094AF58, 33LL, 7LL);
  *(void *)(v29 + 16) = v13;
  *(void *)(v29 + 24) = v3;
  *(_BYTE *)(v29 + 32) = v40 & 1;
  uint64_t v30 = sub_100004AEC(&qword_1009A6B30);
  swift_allocObject(v30, *(unsigned int *)(v30 + 48), *(unsigned __int16 *)(v30 + 52));
  uint64_t v31 = v13;
  swift_retain();
  uint64_t v42 = Future.init(_:)(sub_100254280, v29);
  uint64_t v32 = sub_1000372EC( (unint64_t *)&unk_1009A6B38,  &qword_1009A6B30,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
  uint64_t v33 = Publisher.eraseToAnyPublisher()(v30, v32);
  swift_release();
  return v33;
}

uint64_t sub_10024C048(void (*a1)(void **), uint64_t a2, char *a3, uint64_t a4, int a5)
{
  int v139 = a5;
  uint64_t v141 = a4;
  uint64_t v143 = a2;
  uint64_t v150 = sub_100004AEC(&qword_1009A6B48);
  uint64_t v149 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  v148 = (char *)&v124 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v129 = sub_100004AEC(&qword_1009A6B50);
  uint64_t v128 = *(void *)(v129 - 8);
  __chkstk_darwin(v129);
  v127 = (char *)&v124 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v132 = sub_100004AEC(&qword_1009A6B58);
  uint64_t v131 = *(void *)(v132 - 8);
  __chkstk_darwin(v132);
  v130 = (char *)&v124 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v135 = sub_100004AEC(&qword_1009A6B60);
  uint64_t v134 = *(void *)(v135 - 8);
  __chkstk_darwin(v135);
  v133 = (char *)&v124 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v138 = sub_100004AEC(&qword_1009A6B68);
  uint64_t v137 = *(void *)(v138 - 8);
  __chkstk_darwin(v138);
  v136 = (char *)&v124 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v152 = sub_100004AEC(&qword_1009A6B70);
  uint64_t v153 = *(void *)(v152 - 8);
  __chkstk_darwin(v152);
  v151 = (char *)&v124 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v146 = sub_100004AEC(&qword_1009A6B78);
  uint64_t v145 = *(void *)(v146 - 8);
  __chkstk_darwin(v146);
  v142 = (char *)&v124 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for MACAddress(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v124 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for UUID(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  unint64_t v21 = (char *)&v124 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v22 = [objc_allocWithZone(SPDiscoveredAccessory) init];
  id v23 = [*(id *)&a3[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v23);

  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  [v22 setIdentifier:isa];

  unint64_t v25 = v22;
  uint64_t v26 = sub_1004A1510(v17);
  uint64_t v27 = MACAddress.data.getter(v26);
  unint64_t v29 = v28;
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  Class v30 = Data._bridgeToObjectiveC()().super.isa;
  sub_100016F9C(v27, v29);
  [v22 setMacAddress:v30];

  v160 = &type metadata for BAServiceIdentifier;
  v161 = &off_10094C298;
  LOBYTE(v159) = 0;
  v140 = a3;
  uint64_t v31 = (uint64_t *)&a3[OBJC_IVAR____TtC12searchpartyd10Peripheral_services];
  swift_beginAccess(&a3[OBJC_IVAR____TtC12searchpartyd10Peripheral_services], v163, 0LL, 0LL);
  uint64_t v32 = *v31;
  v155 = (uint64_t *)&v159;
  swift_bridgeObjectRetain(v32);
  sub_100373D00((uint64_t (*)(uint64_t *))sub_10025428C, (uint64_t)v154, v32);
  uint64_t v34 = v33;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v159);
  if (!v34)
  {
    v160 = &type metadata for BAServiceIdentifier;
    v161 = &off_10094C298;
    LOBYTE(v159) = 0;
    __int16 v162 = 257;
    a1(&v159);

    return sub_100015794((uint64_t)&v159, &qword_1009A6B80);
  }

  v125 = v25;
  v126 = (void (*)(void))a1;
  if (qword_10099B628 != -1) {
    swift_once(&qword_10099B628, sub_1005E2E30);
  }
  uint64_t v35 = type metadata accessor for Logger(0LL);
  sub_10000A720(v35, (uint64_t)qword_100A2AEB8);
  uint64_t v36 = swift_retain_n(v34, 2LL);
  uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v38 = static os_log_type_t.default.getter(v37);
  BOOL v39 = os_log_type_enabled(v37, v38);
  uint64_t v144 = v34;
  if (v39)
  {
    int v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v41 = swift_slowAlloc(32LL, -1LL);
    v159 = (void *)v41;
    *(_DWORD *)int v40 = 136315138;
    swift_retain();
    uint64_t v42 = sub_1006E281C();
    unint64_t v44 = v43;
    swift_release();
    uint64_t v157 = sub_1003F11D4(v42, v44, (uint64_t *)&v159);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v158, v40 + 4, v40 + 12);
    swift_release_n(v144, 2LL);
    uint64_t v34 = v144;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "AccessoryInformationService: %s", v40, 0xCu);
    swift_arrayDestroy(v41, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1LL, -1LL);
    swift_slowDealloc(v40, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v34, 2LL);
  }

  uint64_t v46 = swift_retain_n(v34, 2LL);
  uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
  os_log_type_t v48 = static os_log_type_t.default.getter(v47);
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v49 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v50 = swift_slowAlloc(32LL, -1LL);
    v159 = (void *)v50;
    *(_DWORD *)uint64_t v49 = 136315138;
    swift_beginAccess(v34 + 40, v156, 0LL, 0LL);
    uint64_t v51 = *(void *)(v34 + 40);
    uint64_t v52 = type metadata accessor for Characteristic();
    uint64_t v53 = sub_100007864( &qword_1009AFB00,  (uint64_t (*)(uint64_t))type metadata accessor for Characteristic,  (uint64_t)&unk_100805758);
    swift_bridgeObjectRetain(v51);
    uint64_t v55 = Set.description.getter(v54, v52, v53);
    unint64_t v57 = v56;
    swift_bridgeObjectRelease();
    uint64_t v157 = sub_1003F11D4(v55, v57, (uint64_t *)&v159);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v157, v158, v49 + 4, v49 + 12);
    swift_release_n(v144, 2LL);
    uint64_t v34 = v144;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "  characteristics: %s", v49, 0xCu);
    swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v50, -1LL, -1LL);
    swift_slowDealloc(v49, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v34, 2LL);
  }

  uint64_t v58 = 9LL;
  uint64_t v59 = (uint64_t *)(v34 + 40);
  swift_retain();
  swift_beginAccess(v34 + 40, &v157, 0LL, 0LL);
  uint64_t v61 = _swiftEmptyArrayStorage;
  uint64_t v62 = &byte_1009340D8;
  do
  {
    char v65 = *v62++;
    char v64 = v65;
    v160 = &type metadata for BACharacteristicIdentifier.AccessoryInformation;
    v161 = &off_10094C278;
    LOBYTE(v159) = v65;
    uint64_t v66 = *v59;
    __chkstk_darwin(isUniquelyReferenced_nonNull_native);
    *(&v124 - 2) = (uint64_t)&v159;
    swift_bridgeObjectRetain(v66);
    sub_100373D2C((uint64_t (*)(uint64_t *))sub_1002542A8, (uint64_t)(&v124 - 4), v66);
    uint64_t v68 = v67;
    swift_bridgeObjectRelease();
    uint64_t isUniquelyReferenced_nonNull_native = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v159);
    if (v68)
    {
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v61);
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1004C5DEC(0LL, v61[2] + 1LL, 1, v61);
        uint64_t v61 = (void *)isUniquelyReferenced_nonNull_native;
      }

      unint64_t v70 = v61[2];
      unint64_t v69 = v61[3];
      if (v70 >= v69 >> 1)
      {
        uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1004C5DEC((void *)(v69 > 1), v70 + 1, 1, v61);
        uint64_t v61 = (void *)isUniquelyReferenced_nonNull_native;
      }

      v61[2] = v70 + 1;
      uint64_t v63 = &v61[2 * v70];
      *((_BYTE *)v63 + 32) = v64;
      v63[5] = v68;
    }

    --v58;
  }

  while (v58);
  swift_release();
  v71 = (char *)sub_100247CFC((uint64_t)v61);
  uint64_t result = swift_bridgeObjectRelease();
  unint64_t v72 = *((void *)v71 + 2);
  unint64_t v73 = v72 != 0;
  uint64_t v74 = v152;
  v75 = v151;
  if (v72)
  {
    uint64_t v76 = v153;
    unint64_t v77 = (*(unsigned __int8 *)(v76 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v76 + 80);
    v147 = *(void (**)(char *, char *, uint64_t))(v153 + 16);
    v147(v151, &v71[v77], v152);
    uint64_t v78 = sub_100004AEC(&qword_1009A6B88);
    uint64_t v79 = v142;
    uint64_t v80 = v78;
    Publishers.Map.map<A>(_:)(sub_10024CF78, 0LL, v74);
    v81 = v75;
    uint64_t v82 = *(void (**)(char *, uint64_t))(v76 + 8);
    v82(v81, v74);
    uint64_t v83 = sub_100004AEC(&qword_1009A6B90);
    uint64_t v84 = (char *)swift_allocObject(v83, *(unsigned int *)(v83 + 48), *(unsigned __int16 *)(v83 + 52));
    uint64_t result = (*(uint64_t (**)(char *, char *, uint64_t))(v145 + 32))( &v84[*(void *)(class metadata base offset for PublisherBox + *(void *)v84 + 16LL)],  v79,  v146);
    unint64_t v85 = v72 - v73;
    if (v72 == v73)
    {
      swift_bridgeObjectRelease();
      uint64_t v86 = v126;
LABEL_26:
      v159 = v84;
      uint64_t v97 = sub_100004AEC(&qword_1009A6B98);
      uint64_t v98 = sub_100022898(0LL, &qword_1009A6BB8, &OBJC_CLASS___SPDiscoveredAccessoryMetadata_ptr);
      uint64_t v99 = sub_1000372EC( &qword_1009A6BA0,  &qword_1009A6B98,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      v100 = v127;
      Publisher.tryMap<A>(_:)(sub_10024D0D0, 0LL, v97, v98, v99);
      uint64_t v101 = sub_1000372EC( &qword_1009A6BC0,  &qword_1009A6B50,  (uint64_t)&protocol conformance descriptor for Publishers.TryMap<A, B>);
      unint64_t v102 = sub_100122CD4();
      v103 = v130;
      uint64_t v104 = v129;
      Publisher.mapError<A>(_:)(sub_10024ED18, 0LL, v129, &type metadata for CentralManager.Error, v101, v102);
      (*(void (**)(char *, uint64_t))(v128 + 8))(v100, v104);
      uint64_t v105 = sub_100004AEC(&qword_1009A6BC8);
      uint64_t v106 = sub_1000372EC( &qword_1009A6BD0,  &qword_1009A6B58,  (uint64_t)&protocol conformance descriptor for Publishers.MapError<A, B>);
      v107 = v133;
      uint64_t v108 = v132;
      Publisher.map<A>(_:)(sub_100254DD0, 0LL, v132, v105, v106);
      (*(void (**)(char *, uint64_t))(v131 + 8))(v103, v108);
      uint64_t v109 = sub_100004AEC(&qword_1009A6BD8);
      uint64_t v110 = sub_1000372EC( &qword_1009A6BE0,  &qword_1009A6B60,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
      uint64_t v111 = sub_1000372EC(&qword_1009A6BE8, &qword_1009A6BD8, (uint64_t)&protocol conformance descriptor for Just<A>);
      v112 = v136;
      uint64_t v113 = v135;
      Publisher.catch<A>(_:)(sub_10024EDC8, 0LL, v135, v109, v110, v111);
      (*(void (**)(char *, uint64_t))(v134 + 8))(v107, v113);
      uint64_t v114 = swift_allocObject(&unk_10094AF80, 24LL, 7LL);
      uint64_t v115 = v141;
      swift_weakInit(v114 + 16, v141);
      uint64_t v116 = swift_allocObject(&unk_10094AFA8, 64LL, 7LL);
      v117 = v125;
      *(void *)(v116 + 16) = v114;
      *(void *)(v116 + 24) = v117;
      uint64_t v118 = v143;
      *(void *)(v116 + 32) = v86;
      *(void *)(v116 + 40) = v118;
      *(_BYTE *)(v116 + 48) = v139 & 1;
      v119 = v140;
      *(void *)(v116 + 56) = v140;
      uint64_t v120 = sub_1000372EC( (unint64_t *)&unk_1009A6BF0,  &qword_1009A6B68,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
      id v121 = v117;
      swift_retain();
      id v122 = v119;
      uint64_t v123 = v138;
      Publisher<>.sink(receiveValue:)(sub_100254324, v116, v138, v120);
      swift_release();
      (*(void (**)(char *, uint64_t))(v137 + 8))(v112, v123);
      swift_beginAccess(v115 + 64, &v159, 33LL, 0LL);
      AnyCancellable.store(in:)(v115 + 64);
      swift_endAccess(&v159);

      swift_release();
      swift_release();
      return swift_release();
    }

    if (v72 > v73)
    {
      uint64_t v87 = *(void *)(v153 + 72);
      __n128 v88 = swift_bridgeObjectRetain(v71);
      uint64_t v146 = v87;
      v142 = v71;
      v89 = &v71[v77 + v87 * v73];
      uint64_t v145 = v80;
      uint64_t v90 = v151;
      uint64_t v91 = v152;
      uint64_t v92 = v148;
      do
      {
        ((void (*)(char *, char *, uint64_t, __n128))v147)(v90, v89, v91, v88);
        v159 = v84;
        uint64_t v153 = sub_100004AEC(&qword_1009A6B98);
        uint64_t v93 = sub_1000372EC( &qword_1009A6BA0,  &qword_1009A6B98,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
        uint64_t v94 = sub_1000372EC( &qword_1009A6BA8,  &qword_1009A6B70,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
        Publisher.zip<A, B>(_:_:)(v90, sub_10024CFF4, 0LL, v153, v91, v145, v93, v94);
        swift_release();
        uint64_t v95 = sub_1000372EC( &qword_1009A6BB0,  &qword_1009A6B48,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
        uint64_t v96 = v150;
        uint64_t v84 = (char *)Publisher.eraseToAnyPublisher()(v150, v95);
        (*(void (**)(char *, uint64_t))(v149 + 8))(v92, v96);
        v82(v90, v91);
        v89 += v146;
        --v85;
      }

      while (v85);
      swift_bridgeObjectRelease_n(v142, 2LL);
      uint64_t v86 = v126;
      goto LABEL_26;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_10024CF78@<X0>(char *a1@<X0>, uint64_t *a2@<X8>)
{
  char v3 = *a1;
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *((void *)a1 + 2);
  unint64_t v6 = *((void *)a1 + 3);
  uint64_t v7 = sub_100004AEC(&qword_1009A6C78);
  uint64_t v8 = swift_allocObject(v7, 64LL, 7LL);
  *(_OWORD *)(v8 + 16) = xmmword_1007E67D0;
  *(_BYTE *)(v8 + 32) = v3;
  *(void *)(v8 + 40) = v4;
  *(void *)(v8 + 48) = v5;
  *(void *)(v8 + 56) = v6;
  *a2 = v8;
  swift_retain();
  return sub_10001736C(v5, v6);
}

uint64_t sub_10024CFF4@<X0>(uint64_t *a1@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  uint64_t v4 = *a1;
  char v5 = *a2;
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v7 = *((void *)a2 + 2);
  unint64_t v8 = *((void *)a2 + 3);
  uint64_t v9 = sub_100004AEC(&qword_1009A6C78);
  uint64_t inited = swift_initStackObject(v9, v12);
  *(_OWORD *)(inited + 16) = xmmword_1007E67D0;
  *(_BYTE *)(inited + 32) = v5;
  *(void *)(inited + 40) = v6;
  *(void *)(inited + 48) = v7;
  *(void *)(inited + 56) = v8;
  swift_retain();
  sub_10001736C(v7, v8);
  swift_bridgeObjectRetain(v4);
  uint64_t result = sub_100184B78(inited);
  *a3 = v4;
  return result;
}

id sub_10024D0D0@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for Endianness(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *a1;
  id result = [objc_allocWithZone(SPDiscoveredAccessoryMetadata) init];
  id v10 = result;
  if (*(void *)(v8 + 16))
  {
    v12[0] = a2;
    uint64_t v15 = v2;
    __n128 v11 = swift_bridgeObjectRetain(v8);
    uint64_t v14 = v8;
    v11.n128_u64[0] = 136446210LL;
    __n128 v13 = v11;
    v12[1] = (char *)&type metadata for Any + 8;
    id v16 = v10;
    uint64_t v17 = v7;
    __asm { BR              X9 }
  }

  *a2 = result;
  return result;
}

uint64_t sub_10024ED18@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = *a1;
  uint64_t v9 = v3;
  swift_errorRetain(v3);
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  if ((swift_dynamicCast(v6, &v9, v4, &type metadata for CentralManager.Error, 6LL) & 1) != 0)
  {
    sub_100254338((uint64_t)v6, (uint64_t)v10);
    return sub_100254338((uint64_t)v10, a2);
  }

  else
  {
    uint64_t v7 = 0LL;
    memset(v6, 0, sizeof(v6));
    char v8 = -1;
    sub_100015794((uint64_t)v6, (uint64_t *)&unk_1009A9C90);
    *(void *)a2 = v3;
    *(_BYTE *)(a2 + 40) = 0;
    return swift_errorRetain(v3);
  }

uint64_t sub_10024EDC8(void *a1)
{
  return sub_10024FF84(a1, &qword_1009A6BC8);
}

uint64_t sub_10024EDD4( uint64_t a1, uint64_t a2, void *a3, void (*a4)(uint64_t *), uint64_t a5, int a6, void *a7)
{
  uint64_t v137 = a7;
  uint64_t v139 = a5;
  v140 = a4;
  uint64_t v136 = sub_100004AEC(&qword_1009A6C00);
  uint64_t v11 = *(void *)(v136 - 8);
  __chkstk_darwin(v136);
  __n128 v13 = (char *)&v125 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100004AEC(&qword_1009A6C08);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v125 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v148, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v19 = result;
    sub_10001581C(a1, (uint64_t)v146, &qword_1009A6BC8);
    uint64_t v135 = v11;
    if ((v147 & 1) != 0)
    {
      sub_100254338((uint64_t)v146, (uint64_t)&v144);
      sub_100254374(&v144, (uint64_t)&v141);
      char v143 = 1;
      v140(&v141);
      sub_100015794((uint64_t)&v141, &qword_1009A6B80);
      sub_1002543B0(&v144);
      if ((a6 & 1) == 0) {
        return swift_release();
      }
    }

    else
    {
      uint64_t v131 = v17;
      uint64_t v132 = v15;
      uint64_t v133 = v14;
      uint64_t v134 = v19;
      id v128 = (id)v146[0];
      objc_msgSend(a3, "setDiscoveredMetadata:");
      if (qword_10099B628 != -1) {
        swift_once(&qword_10099B628, sub_1005E2E30);
      }
      uint64_t v20 = type metadata accessor for Logger(0LL);
      uint64_t v21 = sub_10000A720(v20, (uint64_t)qword_100A2AEB8);
      id v22 = a3;
      id v23 = (os_log_s *)Logger.logObject.getter(v22);
      os_log_type_t v24 = static os_log_type_t.default.getter(v23);
      BOOL v25 = os_log_type_enabled(v23, v24);
      uint64_t v138 = v21;
      v130 = v13;
      int v129 = a6;
      if (v25)
      {
        uint64_t v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v127 = swift_slowAlloc(32LL, -1LL);
        uint64_t v141 = v127;
        *(_DWORD *)uint64_t v26 = 136446210;
        v126 = v26 + 4;
        id v27 = [v22 discoveredMetadata];
        id v28 = [v27 productData];

        uint64_t v29 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v28);
        unint64_t v31 = v30;

        uint64_t v32 = Data.hexString.getter(v29, v31);
        unint64_t v34 = v33;
        sub_100016F9C(v29, v31);
        uint64_t v144 = sub_1003F11D4(v32, v34, &v141);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v145, v126, v26 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v23, v24, "productData: %{public}s", v26, 0xCu);
        uint64_t v35 = v127;
        swift_arrayDestroy(v127, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v35, -1LL, -1LL);
        swift_slowDealloc(v26, -1LL, -1LL);
      }

      else
      {
      }

      id v36 = v22;
      uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
      os_log_type_t v38 = static os_log_type_t.default.getter(v37);
      if (os_log_type_enabled(v37, v38))
      {
        BOOL v39 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v40 = swift_slowAlloc(32LL, -1LL);
        uint64_t v141 = v40;
        *(_DWORD *)BOOL v39 = 136446210;
        id v41 = [v36 discoveredMetadata];
        id v42 = [v41 manufacturerName];

        uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(v42);
        unint64_t v45 = v44;

        uint64_t v144 = sub_1003F11D4(v43, v45, &v141);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v145, v39 + 4, v39 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v37, v38, "manufacturerName: %{public}s", v39, 0xCu);
        swift_arrayDestroy(v40, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v40, -1LL, -1LL);
        swift_slowDealloc(v39, -1LL, -1LL);
      }

      else
      {
      }

      id v46 = v36;
      uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
      os_log_type_t v48 = static os_log_type_t.default.getter(v47);
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v50 = swift_slowAlloc(32LL, -1LL);
        uint64_t v141 = v50;
        *(_DWORD *)uint64_t v49 = 136446210;
        id v51 = [v46 discoveredMetadata];
        id v52 = [v51 modelName];

        uint64_t v53 = static String._unconditionallyBridgeFromObjectiveC(_:)(v52);
        unint64_t v55 = v54;

        uint64_t v144 = sub_1003F11D4(v53, v55, &v141);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v145, v49 + 4, v49 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "modelName: %{public}s", v49, 0xCu);
        swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v50, -1LL, -1LL);
        swift_slowDealloc(v49, -1LL, -1LL);
      }

      else
      {
      }

      id v56 = v46;
      unint64_t v57 = (os_log_s *)Logger.logObject.getter(v56);
      os_log_type_t v58 = static os_log_type_t.default.getter(v57);
      if (os_log_type_enabled(v57, v58))
      {
        uint64_t v59 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)uint64_t v59 = 134349056;
        id v60 = [v56 discoveredMetadata];
        id v61 = [v60 accessoryCategory];

        uint64_t v141 = (uint64_t)v61;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, &v142, v59 + 4, v59 + 12);

        _os_log_impl((void *)&_mh_execute_header, v57, v58, "accessoryCategory: %{public}llu", v59, 0xCu);
        swift_slowDealloc(v59, -1LL, -1LL);
      }

      else
      {

        unint64_t v57 = (os_log_s *)v56;
      }

      id v62 = v56;
      uint64_t v63 = (os_log_s *)Logger.logObject.getter(v62);
      os_log_type_t v64 = static os_log_type_t.default.getter(v63);
      if (os_log_type_enabled(v63, v64))
      {
        char v65 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)char v65 = 67240192;
        id v66 = [v62 discoveredMetadata];
        unsigned int v67 = [v66 accessoryCapabilities];

        LODWORD(v141) = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, (char *)&v141 + 4, v65 + 4, v65 + 8);

        _os_log_impl((void *)&_mh_execute_header, v63, v64, "accessoryCapabilities: %{public}u", v65, 8u);
        swift_slowDealloc(v65, -1LL, -1LL);
      }

      else
      {

        uint64_t v63 = (os_log_s *)v62;
      }

      id v68 = v62;
      unint64_t v69 = (os_log_s *)Logger.logObject.getter(v68);
      os_log_type_t v70 = static os_log_type_t.default.getter(v69);
      if (os_log_type_enabled(v69, v70))
      {
        v71 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v72 = swift_slowAlloc(32LL, -1LL);
        uint64_t v141 = v72;
        *(_DWORD *)v71 = 136446210;
        id v73 = [v68 discoveredMetadata];
        id v74 = [v73 firmwareVersion];

        uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v74);
        unint64_t v77 = v76;

        uint64_t v144 = sub_1003F11D4(v75, v77, &v141);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v145, v71 + 4, v71 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v69, v70, "firmwareVersion: %{public}s", v71, 0xCu);
        swift_arrayDestroy(v72, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v72, -1LL, -1LL);
        swift_slowDealloc(v71, -1LL, -1LL);
      }

      else
      {
      }

      id v78 = v68;
      uint64_t v79 = (os_log_s *)Logger.logObject.getter(v78);
      os_log_type_t v80 = static os_log_type_t.default.getter(v79);
      if (os_log_type_enabled(v79, v80))
      {
        v81 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v82 = swift_slowAlloc(32LL, -1LL);
        uint64_t v141 = v82;
        *(_DWORD *)v81 = 136446210;
        id v83 = [v78 discoveredMetadata];
        id v84 = [v83 protocolVersion];

        uint64_t v85 = static String._unconditionallyBridgeFromObjectiveC(_:)(v84);
        unint64_t v87 = v86;

        uint64_t v144 = sub_1003F11D4(v85, v87, &v141);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v145, v81 + 4, v81 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v79, v80, "protocolVersion: %{public}s", v81, 0xCu);
        swift_arrayDestroy(v82, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v82, -1LL, -1LL);
        swift_slowDealloc(v81, -1LL, -1LL);
      }

      else
      {
      }

      __n128 v13 = v130;
      id v88 = v128;
      v89 = (os_log_s *)Logger.logObject.getter(v88);
      os_log_type_t v90 = static os_log_type_t.default.getter(v89);
      if (os_log_type_enabled(v89, v90))
      {
        uint64_t v91 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v92 = swift_slowAlloc(32LL, -1LL);
        uint64_t v141 = v92;
        *(_DWORD *)uint64_t v91 = 136446210;
        unsigned int v93 = [v88 batteryType];
        if (v93)
        {
          if (v93 == 2)
          {
            unint64_t v96 = 0xEB00000000656C62LL;
            uint64_t v95 = 0x6167726168636572LL;
          }

          else
          {
            BOOL v94 = v93 == 1;
            if (v93 == 1) {
              uint64_t v95 = 0x61686365526E6F6ELL;
            }
            else {
              uint64_t v95 = 0x6E776F6E6B6E75LL;
            }
            if (v94) {
              unint64_t v96 = 0xEE00656C62616772LL;
            }
            else {
              unint64_t v96 = 0xE700000000000000LL;
            }
          }
        }

        else
        {
          unint64_t v96 = 0xE700000000000000LL;
          uint64_t v95 = 0x64657265776F70LL;
        }

        uint64_t v144 = sub_1003F11D4(v95, v96, &v141);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v144, v145, v91 + 4, v91 + 12);

        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v89, v90, "batteryType: %{public}s", v91, 0xCu);
        swift_arrayDestroy(v92, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v92, -1LL, -1LL);
        swift_slowDealloc(v91, -1LL, -1LL);
      }

      else
      {
      }

      char v97 = v129;
      if (qword_10099B670 != -1) {
        swift_once(&qword_10099B670, sub_100605974);
      }
      uint64_t v98 = (void *)qword_100A2AF38;
      id v99 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
      unsigned int v100 = [v99 isInternalBuild];

      if (v100)
      {
        NSString v101 = String._bridgeToObjectiveC()();
        unsigned int v102 = [v98 BOOLForKey:v101];
      }

      else
      {
        unsigned int v102 = 0;
      }

      unsigned int v103 = [v88 batteryState];
      if (v103 < 4 && (v103 & 0xF) == 3) {
        uint64_t v105 = 1LL;
      }
      else {
        uint64_t v105 = v102;
      }
      uint64_t v106 = (os_log_s *)Logger.logObject.getter([v78 setIsBatteryTooLow:v105]);
      os_log_type_t v107 = static os_log_type_t.default.getter(v106);
      if (os_log_type_enabled(v106, v107))
      {
        if (v103 >= 4) {
          uint64_t v108 = 4LL;
        }
        else {
          uint64_t v108 = v103;
        }
        uint64_t v109 = (_DWORD *)swift_slowAlloc(12LL, -1LL);
        uint64_t v141 = swift_slowAlloc(32LL, -1LL);
        *uint64_t v109 = 136446210;
        __asm { BR              X9 }
      }

      uint64_t v141 = (uint64_t)v78;
      char v143 = 0;
      id v110 = v78;
      v140(&v141);

      sub_100015794((uint64_t)&v141, &qword_1009A6B80);
      uint64_t v19 = v134;
      uint64_t v14 = v133;
      uint64_t v15 = v132;
      uint64_t v17 = v131;
      if ((v97 & 1) == 0) {
        return swift_release();
      }
    }

    id v111 = *(id *)(v19 + 40);
    v112 = v13;
    uint64_t v113 = v137;
    uint64_t v114 = sub_1007CF938(v137);

    v146[0] = v114;
    uint64_t v115 = sub_100004AEC((uint64_t *)&unk_1009A6C10);
    uint64_t v116 = sub_100004AEC(&qword_1009AFAF0);
    uint64_t v117 = sub_1000372EC( &qword_1009A6C20,  (uint64_t *)&unk_1009A6C10,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.map<A>(_:)(sub_100254DD0, 0LL, v115, v116, v117);
    swift_release();
    uint64_t v118 = sub_100004AEC(&qword_1009A6C28);
    uint64_t v119 = sub_1000372EC( &qword_1009A6C30,  &qword_1009A6C00,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    uint64_t v120 = sub_1000372EC(&qword_1009A6C38, &qword_1009A6C28, (uint64_t)&protocol conformance descriptor for Just<A>);
    uint64_t v121 = v136;
    Publisher.catch<A>(_:)(sub_10024FF78, 0LL, v136, v118, v119, v120);
    (*(void (**)(char *, uint64_t))(v135 + 8))(v112, v121);
    uint64_t v122 = swift_allocObject(&unk_10094AFD0, 24LL, 7LL);
    *(void *)(v122 + 16) = v113;
    uint64_t v123 = sub_1000372EC( (unint64_t *)&unk_1009A6C40,  &qword_1009A6C08,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
    id v124 = v113;
    Publisher<>.sink(receiveValue:)(sub_1002543E4, v122, v14, v123);
    swift_release();
    (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
    swift_beginAccess(v19 + 64, v146, 33LL, 0LL);
    AnyCancellable.store(in:)(v19 + 64);
    swift_endAccess(v146);
    swift_release();
    return swift_release();
  }

  return result;
}

uint64_t sub_10024FF78(void *a1)
{
  return sub_10024FF84(a1, &qword_1009AFAF0);
}

uint64_t sub_10024FF84(void *a1, uint64_t *a2)
{
  v5[41] = 1;
  uint64_t v3 = sub_100004AEC(a2);
  return Just.init(_:)(v5, v3);
}

void sub_10024FFD4(uint64_t a1, void *a2)
{
  if ((v29 & 1) != 0)
  {
    sub_100254338((uint64_t)v28, (uint64_t)&v26);
    if (qword_10099B628 != -1) {
      swift_once(&qword_10099B628, sub_1005E2E30);
    }
    uint64_t v3 = type metadata accessor for Logger(0LL);
    sub_10000A720(v3, (uint64_t)qword_100A2AEB8);
    sub_100254374(&v26, (uint64_t)v25);
    id v4 = a2;
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = swift_slowAlloc(22LL, -1LL);
      char v8 = (void *)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v7 = 138412546;
      uint64_t v23 = (uint64_t)v4;
      id v9 = v4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v7 + 4, v7 + 12);
      *char v8 = v4;

      *(_WORD *)(v7 + 12) = 2112;
      sub_100254374(v25, (uint64_t)&v23);
      unint64_t v10 = sub_100122CD4();
      uint64_t v11 = swift_allocError(&type metadata for CentralManager.Error, v10, 0LL, 0LL);
      sub_100254338((uint64_t)&v23, v12);
      uint64_t v13 = _convertErrorToNSError(_:)(v11);
      swift_errorRelease(v11);
      uint64_t v23 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v23, v24, v7 + 14, v7 + 22);
      v8[1] = v13;
      sub_1002543B0(v25);
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to disconnect from %@: %@", (uint8_t *)v7, 0x16u);
      uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v8, 2LL, v14);
      swift_slowDealloc(v8, -1LL, -1LL);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    else
    {

      sub_1002543B0(v25);
    }

    sub_1002543B0((uint64_t *)&v26);
  }

  else
  {

    if (qword_10099B628 != -1) {
      swift_once(&qword_10099B628, sub_1005E2E30);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    sub_10000A720(v15, (uint64_t)qword_100A2AEB8);
    id v16 = a2;
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v20 = (void *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v19 = 138412290;
      id v26 = v16;
      id v21 = v16;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v26, &v27, v19 + 4, v19 + 12);
      *uint64_t v20 = v16;

      _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Successfully disconnected after readMetadata on %@",  v19,  0xCu);
      uint64_t v22 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v20, 1LL, v22);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
    }
  }

uint64_t sub_100250374(void (*a1)(void), uint8_t *a2, void *a3, uint64_t a4)
{
  uint64_t v82 = a4;
  uint64_t v7 = sub_100004AEC(&qword_1009B9250);
  __chkstk_darwin(v7);
  id v9 = (char *)&v75 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AccessoryMetadata(0LL);
  unint64_t v11 = *(void *)(v10 - 8);
  uint64_t v88 = v10;
  unint64_t v89 = v11;
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v81 = (uint64_t)&v75 - v15;
  __chkstk_darwin(v14);
  uint64_t v86 = (uint64_t)&v75 - v16;
  uint64_t v17 = type metadata accessor for UUID(0LL);
  uint64_t v84 = *(void *)(v17 - 8);
  uint64_t v85 = v17;
  __chkstk_darwin(v17);
  id v83 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B628 != -1) {
    swift_once(&qword_10099B628, sub_1005E2E30);
  }
  uint64_t v19 = type metadata accessor for Logger(0LL);
  uint64_t v20 = sub_10000A720(v19, (uint64_t)qword_100A2AEB8);
  id v21 = a3;
  uint64_t v87 = v20;
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.default.getter(v22);
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v80 = (uint64_t)&v75 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (v24)
  {
    BOOL v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v26 = swift_slowAlloc(32LL, -1LL);
    id v78 = a1;
    uint64_t v76 = v26;
    uint64_t v92 = v26;
    uint64_t v79 = a2;
    *(_DWORD *)BOOL v25 = 136315138;
    uint64_t v75 = v25 + 4;
    id v27 = [v21 identifier];
    id v28 = v83;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v27);

    uint64_t v29 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v30 = v85;
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(v85, v29);
    uint64_t v77 = v12;
    uint64_t v32 = v9;
    unint64_t v34 = v33;
    (*(void (**)(char *, uint64_t))(v84 + 8))(v28, v30);
    uint64_t v90 = sub_1003F11D4(v31, v34, &v92);
    a2 = v79;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v75, v25 + 12);

    id v9 = v32;
    uint64_t v12 = v77;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "retrieveProductInfo for accessory: %s", v25, 0xCu);
    uint64_t v35 = v76;
    swift_arrayDestroy(v76, 1LL, (char *)&type metadata for Any + 8);
    a1 = v78;
    swift_slowDealloc(v35, -1LL, -1LL);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  else
  {
  }

  id v36 = v21;
  sub_10008A3E0(v36, (uint64_t)v9);
  unint64_t v37 = v89;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v89 + 48))(v9, 1LL, v88) == 1)
  {
    uint64_t v38 = sub_100015794((uint64_t)v9, &qword_1009B9250);
LABEL_12:
    os_log_type_t v70 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v71 = static os_log_type_t.error.getter(v70);
    if (os_log_type_enabled(v70, v71))
    {
      uint64_t v72 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v72 = 0;
      _os_log_impl((void *)&_mh_execute_header, v70, v71, "retrieveProductInfo: invalid parameters", v72, 2u);
      swift_slowDealloc(v72, -1LL, -1LL);
    }

    uint64_t v92 = 5LL;
    __int128 v93 = 0u;
    __int128 v94 = 0u;
    __int16 v95 = 267;
    a1(&v92);
    return sub_100015794((uint64_t)&v92, &qword_1009A6D90);
  }

  uint64_t v39 = v86;
  sub_10002218C((uint64_t)v9, v86, type metadata accessor for AccessoryMetadata);
  uint64_t v40 = v81;
  sub_10001DC4C(v39, v81, type metadata accessor for AccessoryMetadata);
  uint64_t v41 = *(unsigned __int8 *)(v37 + 80);
  uint64_t v42 = (v41 + 16) & ~v41;
  unint64_t v43 = (v12 + v42 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v44 = swift_allocObject(&unk_10094B098, v43 + 8, v41 | 7);
  sub_10002218C(v40, v44 + v42, type metadata accessor for AccessoryMetadata);
  *(void *)(v44 + v43) = v82;
  swift_retain();
  uint64_t v45 = sub_100004AEC(&qword_1009A1B88);
  unsafeFromAsyncTask<A>(_:)(&unk_1009A6DA0, v44, v45);
  swift_release();
  uint64_t v46 = v92;
  if (!v92)
  {
    uint64_t v38 = sub_100018C68(v39, type metadata accessor for AccessoryMetadata);
    goto LABEL_12;
  }

  unint64_t v48 = *((void *)&v93 + 1);
  uint64_t v47 = v93;
  uint64_t v49 = v80;
  sub_10001DC4C(v39, v80, type metadata accessor for AccessoryMetadata);
  id v50 = v36;
  id v51 = (os_log_s *)Logger.logObject.getter(v50);
  os_log_type_t v52 = static os_log_type_t.default.getter(v51);
  int v53 = v52;
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v54 = swift_slowAlloc(22LL, -1LL);
    uint64_t v88 = swift_slowAlloc(64LL, -1LL);
    uint64_t v92 = v88;
    *(_DWORD *)uint64_t v54 = 136315394;
    uint64_t v79 = a2;
    uint64_t v82 = v54 + 4;
    id v55 = [v50 identifier];
    LODWORD(v87) = v53;
    id v56 = v55;
    uint64_t v57 = v47;
    os_log_type_t v58 = v83;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v55);

    uint64_t v59 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    unint64_t v89 = v48;
    uint64_t v60 = v85;
    uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter(v85, v59);
    id v62 = a1;
    unint64_t v64 = v63;
    char v65 = v58;
    uint64_t v47 = v57;
    (*(void (**)(char *, uint64_t))(v84 + 8))(v65, v60);
    uint64_t v90 = sub_1003F11D4(v61, v64, &v92);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v82, v54 + 12);

    a1 = v62;
    swift_bridgeObjectRelease();
    *(_WORD *)(v54 + 12) = 2082;
    uint64_t v66 = v80;
    uint64_t v67 = sub_100089B5C();
    uint64_t v90 = sub_1003F11D4(v67, v68, &v92);
    unint64_t v48 = v89;
    a2 = v79;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v90, &v91, v54 + 14, v54 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68(v66, type metadata accessor for AccessoryMetadata);
    _os_log_impl( (void *)&_mh_execute_header,  v51,  (os_log_type_t)v87,  "%s product info: %{public}s",  (uint8_t *)v54,  0x16u);
    uint64_t v69 = v88;
    swift_arrayDestroy(v88, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1LL, -1LL);
    swift_slowDealloc(v54, -1LL, -1LL);
  }

  else
  {

    sub_100018C68(v49, type metadata accessor for AccessoryMetadata);
  }

  uint64_t v74 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v74);
  *(&v75 - 6) = (uint8_t *)v46;
  *(&v75 - 5) = (uint8_t *)v47;
  *(&v75 - 4) = (uint8_t *)v48;
  *(&v75 - 3) = (uint8_t *)a1;
  *(&v75 - 2) = a2;
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.AccessoryDiscoverySession.retrieveProductInfo",  75LL,  2LL,  sub_100254978);
  sub_100018C68(v86, type metadata accessor for AccessoryMetadata);
  return sub_100117A58(v46, v47, v48);
}

uint64_t sub_100250B24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[3] = a2;
  v3[4] = a3;
  v3[2] = a1;
  return swift_task_switch(sub_100250B40, 0LL, 0LL);
}

uint64_t sub_100250B40()
{
  uint64_t v1 = v0[3];
  uint64_t v2 = v0[4];
  uint64_t v3 = sub_100004AEC(&qword_1009A6DE0);
  uint64_t v4 = *(void *)(type metadata accessor for AccessoryMetadata(0LL) - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 32) & ~v6;
  uint64_t v8 = swift_allocObject(v3, v7 + v5, v6 | 7);
  *(_OWORD *)(v8 + 16) = xmmword_1007E67D0;
  sub_10001DC4C(v1, v8 + v7, type metadata accessor for AccessoryMetadata);
  uint64_t v9 = *(void *)(v2 + 96);
  uint64_t v10 = unk_1009B7A64;
  uint64_t v13 = (uint64_t (*)(uint64_t, char, char, uint64_t))((char *)&dword_1009B7A60 + dword_1009B7A60);
  swift_retain();
  unint64_t v11 = (void *)swift_task_alloc(v10);
  v0[5] = v11;
  *unint64_t v11 = v0;
  v11[1] = sub_100250C30;
  return v13(v8, 0, 3, v9);
}

uint64_t sub_100250C30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(*(void *)v3 + 40LL);
  v4[6] = a1;
  void v4[7] = a2;
  v4[8] = a3;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_100250C90, 0LL, 0LL);
}

uint64_t sub_100250C90()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 16);
  *(_OWORD *)uint64_t v2 = *(_OWORD *)(v0 + 48);
  *(void *)(v2 + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100250CAC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v32 = a6;
  uint64_t v33 = a5;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A6DB0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v32 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for AccessoryInfoEndPoint(0LL);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v32 - v17;
  uint64_t v19 = enum case for FMNAccountType.accessory(_:);
  uint64_t v20 = type metadata accessor for FMNAccountType(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 104LL))(v18, v19, v20);
  uint64_t v21 = type metadata accessor for SearchPartyURLSessionFactory(0LL);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  uint64_t v22 = type metadata accessor for FMNMockingPreferences(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v12, 1LL, 1LL, v22);
  uint64_t v23 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0LL, 0LL, v12);
  uint64_t v24 = type metadata accessor for ServerInteractionController(0LL);
  uint64_t v25 = swift_allocObject(v24, *(unsigned int *)(v24 + 48), *(unsigned __int16 *)(v24 + 52));
  sub_10001DC4C((uint64_t)v18, (uint64_t)v16, type metadata accessor for AccessoryInfoEndPoint);
  uint64_t v26 = (void *)sub_1004317E4((uint64_t)v16, v23, v25);
  sub_100018C68((uint64_t)v18, type metadata accessor for AccessoryInfoEndPoint);
  swift_bridgeObjectRetain(a2);
  sub_10001736C(a3, a4);
  sub_100431DCC(a2, a3, a4, 0LL, v26);
  swift_bridgeObjectRelease();
  sub_100016F9C(a3, a4);
  id v27 = (void *)swift_allocObject(&unk_10094B0C0, 40LL, 7LL);
  uint64_t v28 = v32;
  uint64_t v29 = v33;
  v27[2] = a1;
  v27[3] = v29;
  v27[4] = v28;
  swift_retain();
  swift_retain();
  Future.addFailure(block:)(sub_10025499C, v27);
  swift_release();
  swift_release();
  uint64_t v30 = (void *)swift_allocObject(&unk_10094B0E8, 40LL, 7LL);
  v30[2] = a1;
  v30[3] = v29;
  v30[4] = v28;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_1002549AC, v30);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_100250F58(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  uint64_t v7 = type metadata accessor for AccessoryInfoResponseContent(0LL);
  __chkstk_darwin(v7);
  uint64_t v38 = (uint64_t)v35 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_10099CE68);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for AccessoryProductInfo(0LL);
  uint64_t v36 = *(void *)(v12 - 8);
  uint64_t v37 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Transaction.capture()();
  if (qword_10099B628 != -1) {
    swift_once(&qword_10099B628, sub_1005E2E30);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = sub_10000A720(v15, (uint64_t)qword_100A2AEB8);
  uint64_t v17 = swift_errorRetain(a1);
  v35[2] = v16;
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.error.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    v35[0] = a3;
    v35[1] = a4;
    uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v21 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v20 = 138543362;
    uint64_t v22 = _convertErrorToNSError(_:)(a1);
    uint64_t v39 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v20 + 4, v20 + 12);
    *uint64_t v21 = v22;
    a3 = (void (*)(uint64_t *))v35[0];
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Error in product info request. Error - %{public}@", v20, 0xCu);
    uint64_t v23 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v21, 1LL, v23);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(a1);
  }

  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  uint64_t v24 = (void *)qword_100A2AF38;
  id v25 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v26 = [v25 isInternalBuild];

  if (!v26) {
    goto LABEL_14;
  }
  NSString v27 = String._bridgeToObjectiveC()();
  unsigned int v28 = [v24 BOOLForKey:v27];

  if (!v28) {
    goto LABEL_14;
  }
  uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
  os_log_type_t v31 = static os_log_type_t.default.getter(v30);
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v32 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "AccessoryHardcodedPairingEnabled: bypassing product info check failure",  v32,  2u);
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  uint64_t v33 = v38;
  sub_1002EF064(v38);
  sub_1007438A8(v33, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v36 + 48))(v11, 1LL, v37) == 1)
  {
    sub_100015794((uint64_t)v11, &qword_10099CE68);
LABEL_14:
    uint64_t v39 = 5LL;
    memset(v40, 0, sizeof(v40));
    __int16 v41 = 267;
    a3(&v39);
    return sub_100015794((uint64_t)&v39, &qword_1009A6D90);
  }

  sub_10002218C((uint64_t)v11, (uint64_t)v14, type metadata accessor for AccessoryProductInfo);
  uint64_t v39 = (uint64_t)sub_10074488C();
  HIBYTE(v41) = 0;
  a3(&v39);
  sub_100015794((uint64_t)&v39, &qword_1009A6D90);
  return sub_100018C68((uint64_t)v14, type metadata accessor for AccessoryProductInfo);
}

uint64_t sub_1002513A0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t *), uint64_t a4)
{
  NSString v101 = a3;
  uint64_t v95 = type metadata accessor for AccessoryInfoResponseContent(0LL);
  __chkstk_darwin(v95);
  uint64_t v98 = (uint64_t)v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_10099CE68);
  uint64_t v8 = __chkstk_darwin(v7);
  __int128 v94 = (char *)v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v93 - v10;
  uint64_t v12 = type metadata accessor for AccessoryProductInfo(0LL);
  uint64_t v96 = *(void *)(v12 - 8);
  uint64_t v97 = v12;
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v99 = (uint64_t)v93 - v16;
  uint64_t v17 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  uint64_t v102 = *(void *)(v17 - 8);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v20 = (char *)v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)v93 - v21;
  uint64_t v23 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v23);
  id v25 = (char *)v93 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Transaction.capture()();
  uint64_t v27 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v26);
  uint64_t v100 = a4;
  if (v27 == 200)
  {
    uint64_t v99 = a1;
    uint64_t v28 = FMNServerInteractionController.FMNResponseFields.data.getter(200LL);
    unint64_t v30 = v29;
    static String.Encoding.utf8.getter(v28);
    uint64_t v31 = String.init(data:encoding:)(v28, v30, v25);
    unint64_t v33 = v32;
    sub_100016F9C(v28, v30);
    v93[1] = v15;
    if (v33)
    {
      if (qword_10099B628 != -1) {
        swift_once(&qword_10099B628, sub_1005E2E30);
      }
      uint64_t v34 = type metadata accessor for Logger(0LL);
      sub_10000A720(v34, (uint64_t)qword_100A2AEB8);
      swift_bridgeObjectRetain(v33);
      uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
      os_log_type_t v37 = static os_log_type_t.default.getter(v36);
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v39 = swift_slowAlloc(32LL, -1LL);
        uint64_t v104 = v39;
        *(_DWORD *)uint64_t v38 = 136315138;
        swift_bridgeObjectRetain(v33);
        uint64_t v103 = sub_1003F11D4(v31, v33, &v104);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v38 + 4, v38 + 12);
        swift_bridgeObjectRelease_n(v33, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "response data: %s", v38, 0xCu);
        swift_arrayDestroy(v39, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v39, -1LL, -1LL);
        swift_slowDealloc(v38, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v33, 2LL);
      }
    }

    if (qword_10099B628 != -1) {
      swift_once(&qword_10099B628, sub_1005E2E30);
    }
    uint64_t v62 = type metadata accessor for Logger(0LL);
    uint64_t v63 = sub_10000A720(v62, (uint64_t)qword_100A2AEB8);
    uint64_t v64 = v102;
    uint64_t v65 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v102 + 16))(v22, v99, v17);
    uint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
    os_log_type_t v67 = static os_log_type_t.default.getter(v66);
    if (os_log_type_enabled(v66, v67))
    {
      unint64_t v68 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v69 = swift_slowAlloc(32LL, -1LL);
      uint64_t v104 = v69;
      v93[0] = v63;
      *(_DWORD *)unint64_t v68 = 136446210;
      uint64_t v70 = sub_100007864( &qword_1009A6DC0,  (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields,  (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      uint64_t v71 = dispatch thunk of CustomStringConvertible.description.getter(v17, v70);
      uint64_t v103 = sub_1003F11D4(v71, v72, &v104);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v68 + 4, v68 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v64 + 8))(v22, v17);
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "   %{public}s", v68, 0xCu);
      swift_arrayDestroy(v69, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v69, -1LL, -1LL);
      swift_slowDealloc(v68, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v64 + 8))(v22, v17);
    }

    uint64_t v73 = type metadata accessor for JSONDecoder(0LL);
    uint64_t v74 = swift_allocObject(v73, *(unsigned int *)(v73 + 48), *(unsigned __int16 *)(v73 + 52));
    uint64_t v75 = JSONDecoder.init()(v74);
    uint64_t v76 = FMNServerInteractionController.FMNResponseFields.data.getter(v75);
    unint64_t v78 = v77;
    unint64_t v79 = sub_100122C30();
    dispatch thunk of JSONDecoder.decode<A>(_:from:)( &type metadata for AccessoryInfoResponse,  v76,  v78,  &type metadata for AccessoryInfoResponse,  v79);
    sub_100016F9C(v76, v78);
    uint64_t v80 = v104;
    uint64_t v81 = swift_bridgeObjectRetain_n(v104, 2LL);
    uint64_t v82 = (os_log_s *)Logger.logObject.getter(v81);
    os_log_type_t v83 = static os_log_type_t.default.getter(v82);
    if (os_log_type_enabled(v82, v83))
    {
      uint64_t v84 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v85 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v84 = 136446210;
      uint64_t v103 = v85;
      uint64_t v104 = 0LL;
      *(void *)&__int128 v105 = 0xE000000000000000LL;
      swift_bridgeObjectRetain(v80);
      _StringGuts.grow(_:)(34LL);
      swift_bridgeObjectRelease();
      uint64_t v104 = 0xD000000000000020LL;
      *(void *)&__int128 v105 = 0x8000000100854800LL;
      swift_bridgeObjectRetain(v80);
      v87._countAndFlagsBits = Array.description.getter(v86, v95);
      String.append(_:)(v87);
      swift_bridgeObjectRelease_n(v80, 2LL);
      swift_bridgeObjectRelease();
      uint64_t v104 = sub_1003F11D4(v104, v105, &v103);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v84 + 4, v84 + 12);
      swift_bridgeObjectRelease_n(v80, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v82, v83, "decodedResponse %{public}s", v84, 0xCu);
      swift_arrayDestroy(v85, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v85, -1LL, -1LL);
      swift_slowDealloc(v84, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v80, 2LL);
    }

    uint64_t v88 = sub_1002521CC(v80);
    swift_bridgeObjectRelease();
    if (v88)
    {
      uint64_t v104 = (uint64_t)v88;
      HIBYTE(v107) = 0;
      unint64_t v89 = v88;
      v101(&v104);
    }

    else
    {
      uint64_t v104 = 5LL;
      __int128 v105 = 0u;
      __int128 v106 = 0u;
      __int16 v107 = 267;
      v101(&v104);
    }

    swift_release();
    return sub_100015794((uint64_t)&v104, &qword_1009A6D90);
  }

  if (qword_10099B628 != -1) {
    swift_once(&qword_10099B628, sub_1005E2E30);
  }
  uint64_t v40 = type metadata accessor for Logger(0LL);
  uint64_t v41 = sub_10000A720(v40, (uint64_t)qword_100A2AEB8);
  uint64_t v42 = v102;
  uint64_t v43 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v102 + 16))(v20, a1, v17);
  uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
  os_log_type_t v45 = static os_log_type_t.error.getter(v44);
  if (os_log_type_enabled(v44, v45))
  {
    uint64_t v46 = swift_slowAlloc(12LL, -1LL);
    __int128 v94 = (char *)v41;
    uint64_t v95 = (uint64_t)v11;
    uint64_t v47 = (uint8_t *)v46;
    uint64_t v48 = swift_slowAlloc(32LL, -1LL);
    uint64_t v104 = v48;
    *(_DWORD *)uint64_t v47 = 136446210;
    uint64_t v49 = sub_100007864( &qword_1009A6DC0,  (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields,  (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
    uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter(v17, v49);
    uint64_t v103 = sub_1003F11D4(v50, v51, &v104);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v103, &v104, v47 + 4, v47 + 12);
    swift_bridgeObjectRelease();
    uint64_t v11 = (char *)v95;
    (*(void (**)(char *, uint64_t))(v42 + 8))(v20, v17);
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "Product info check failed %{public}s", v47, 0xCu);
    swift_arrayDestroy(v48, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1LL, -1LL);
    swift_slowDealloc(v47, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v42 + 8))(v20, v17);
  }

  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  os_log_type_t v52 = (void *)qword_100A2AF38;
  id v53 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v54 = [v53 isInternalBuild];

  if (!v54
    || (NSString v55 = String._bridgeToObjectiveC()(),
        unsigned int v56 = [v52 BOOLForKey:v55],
        v55,
        !v56))
  {
LABEL_20:
    uint64_t v104 = 5LL;
    __int128 v105 = 0u;
    __int128 v106 = 0u;
    __int16 v107 = 267;
    v101(&v104);
    return sub_100015794((uint64_t)&v104, &qword_1009A6D90);
  }

  os_log_type_t v58 = (os_log_s *)Logger.logObject.getter(v57);
  os_log_type_t v59 = static os_log_type_t.default.getter(v58);
  if (os_log_type_enabled(v58, v59))
  {
    uint64_t v60 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v60 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v58,  v59,  "AccessoryHardcodedPairingEnabled: bypassing product info check failure",  v60,  2u);
    swift_slowDealloc(v60, -1LL, -1LL);
  }

  uint64_t v61 = v98;
  sub_1002EF064(v98);
  sub_1007438A8(v61, (uint64_t)v11);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v96 + 48))(v11, 1LL, v97) == 1)
  {
    sub_100015794((uint64_t)v11, &qword_10099CE68);
    goto LABEL_20;
  }

  uint64_t v91 = (uint64_t)v11;
  uint64_t v92 = v99;
  sub_10002218C(v91, v99, type metadata accessor for AccessoryProductInfo);
  uint64_t v104 = (uint64_t)sub_10074488C();
  HIBYTE(v107) = 0;
  v101(&v104);
  sub_100015794((uint64_t)&v104, &qword_1009A6D90);
  return sub_100018C68(v92, type metadata accessor for AccessoryProductInfo);
}

os_log_s *sub_1002521CC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for LocalizationUtility.Table(0LL);
  v216 = *(uint8_t **)(v2 - 8);
  __chkstk_darwin(v2);
  v215 = (char *)&v206 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  uint64_t v5 = __chkstk_darwin(v4);
  v217 = (char *)&v206 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  v219 = (char *)&v206 - v7;
  uint64_t v8 = sub_100004AEC(&qword_1009A6DC8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v206 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v221 = type metadata accessor for AccessoryInfoResponseContent.Assets(0LL);
  uint64_t v11 = *(void *)(v221 - 8);
  __chkstk_darwin(v221);
  uint64_t v218 = (uint64_t)&v206 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_1009A6DD0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v206 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v220 = (uint64_t)&v206 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for AccessoryInfoResponseContent(0LL);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v206 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v20);
  id v25 = (os_log_s *)((char *)&v206 - v24);
  uint64_t v26 = __chkstk_darwin(v23);
  unint64_t v29 = (char *)&v206 - v28;
  if (!*(void *)(a1 + 16)) {
    return 0LL;
  }
  uint64_t v214 = v2;
  unint64_t v30 = (int *)v26;
  sub_10001DC4C( a1 + ((*(unsigned __int8 *)(v27 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v27 + 80)),  (uint64_t)&v206 - v28,  type metadata accessor for AccessoryInfoResponseContent);
  sub_10001581C((uint64_t)&v29[v30[6]], (uint64_t)v15, &qword_1009A6DD0);
  uint64_t v31 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  unint64_t v32 = (int *)v16;
  if (v31(v15, 1LL, v16) == 1)
  {
    sub_100018C68((uint64_t)v29, type metadata accessor for AccessoryInfoResponseContent);
    unint64_t v33 = &qword_1009A6DD0;
    uint64_t v34 = (uint64_t)v15;
LABEL_6:
    sub_100015794(v34, v33);
    return 0LL;
  }

  uint64_t v35 = (void *)v220;
  sub_10002218C((uint64_t)v15, v220, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  v211 = v30;
  sub_10001581C((uint64_t)&v29[v30[7]], (uint64_t)v10, &qword_1009A6DC8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))(v10, 1LL, v221) == 1)
  {
    sub_100018C68((uint64_t)v35, type metadata accessor for AccessoryInfoResponseContent.Configuration);
    sub_100018C68((uint64_t)v29, type metadata accessor for AccessoryInfoResponseContent);
    unint64_t v33 = &qword_1009A6DC8;
    uint64_t v34 = (uint64_t)v10;
    goto LABEL_6;
  }

  uint64_t v37 = v218;
  sub_10002218C((uint64_t)v10, v218, type metadata accessor for AccessoryInfoResponseContent.Assets);
  if (*((void *)v29 + 9) == 2LL)
  {
    sub_100018C68(v37, type metadata accessor for AccessoryInfoResponseContent.Assets);
    sub_100018C68((uint64_t)v35, type metadata accessor for AccessoryInfoResponseContent.Configuration);
    sub_100018C68((uint64_t)v29, type metadata accessor for AccessoryInfoResponseContent);
    return 0LL;
  }

  uint64_t v209 = *((void *)v29 + 9);
  unsigned int v210 = *((_DWORD *)v29 + 20);
  if (qword_10099B628 != -1) {
    goto LABEL_88;
  }
  while (1)
  {
    uint64_t v38 = type metadata accessor for Logger(0LL);
    uint64_t v39 = sub_10000A720(v38, (uint64_t)qword_100A2AEB8);
    uint64_t v40 = sub_10001DC4C((uint64_t)v29, (uint64_t)v25, type metadata accessor for AccessoryInfoResponseContent);
    uint64_t v208 = v39;
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v42 = static os_log_type_t.default.getter(v41);
    BOOL v43 = os_log_type_enabled(v41, v42);
    v212 = v29;
    id v44 = v219;
    if (v43)
    {
      v213 = v41;
      os_log_type_t v45 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v46 = swift_slowAlloc(32LL, -1LL);
      v225[0] = v46;
      *(_DWORD *)os_log_type_t v45 = 136315138;
      v207 = v45 + 4;
      uint64_t v47 = sub_1002F5888();
      v223 = (char *)sub_1003F11D4(v47, v48, v225);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, &v224, v207, v45 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v25, type metadata accessor for AccessoryInfoResponseContent);
      uint64_t v49 = v213;
      _os_log_impl((void *)&_mh_execute_header, v213, v42, "Product info content: %s", v45, 0xCu);
      swift_arrayDestroy(v46, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1LL, -1LL);
      id v44 = v219;
      swift_slowDealloc(v45, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v25, type metadata accessor for AccessoryInfoResponseContent);
    }

    if (qword_10099B670 != -1) {
      swift_once(&qword_10099B670, sub_100605974);
    }
    uint64_t v50 = (void *)qword_100A2AF38;
    id v51 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
    unsigned int v52 = [v51 isInternalBuild];

    if (v52)
    {
      NSString v53 = String._bridgeToObjectiveC()();
      unsigned int v54 = [v50 BOOLForKey:v53];
    }

    else
    {
      unsigned int v54 = 0;
    }

    uint64_t v55 = (uint64_t)v212;
    uint64_t v56 = (uint64_t)v217;
    id v57 = [objc_allocWithZone(SPDiscoveredAccessoryProductInformation) init];
    os_log_type_t v58 = v57;
    if (*(_BYTE *)(v55 + 8)) {
      uint64_t v59 = 0LL;
    }
    else {
      uint64_t v59 = *(void *)v55;
    }
    [v57 setBeaconGroupVersion:v59];
    sub_10001DC4C(v55, (uint64_t)v22, type metadata accessor for AccessoryInfoResponseContent);
    if (v54)
    {
      sub_100018C68((uint64_t)v22, type metadata accessor for AccessoryInfoResponseContent);
      uint64_t v60 = 1LL;
    }

    else
    {
      int v61 = v22[32];
      sub_100018C68((uint64_t)v22, type metadata accessor for AccessoryInfoResponseContent);
      uint64_t v60 = v61 & 1;
    }

    [v58 setEligibleForPairing:v60];
    [v58 setHidden:*(_BYTE *)(v55 + 36) & 1];
    [v58 setIsHELEAccessory:*(_BYTE *)(v55 + 33) & 1];
    [v58 setSupportBeaconGroupInfo:*(_BYTE *)(v55 + 35) & 1];
    [v58 setIsManagedAccessory:*(_BYTE *)(v55 + 34) & 1];
    swift_bridgeObjectRetain(*(void *)(v55 + 24));
    NSString v62 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v58 setFindmyProductId:v62];

    swift_bridgeObjectRetain(v35[3]);
    NSString v63 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v58 setManufacturerName:v63];

    swift_bridgeObjectRetain(v35[5]);
    NSString v64 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v58 setModelName:v64];

    if (v35[1])
    {
      swift_bridgeObjectRetain(v35[1]);
      NSString v65 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }

    else
    {
      NSString v65 = 0LL;
    }

    v213 = (os_log_s *)v58;
    [v58 setAppBundleIdentifier:v65];

    sub_10001581C((uint64_t)v35 + v32[10], (uint64_t)v44, (uint64_t *)&unk_1009A34D0);
    uint64_t v66 = type metadata accessor for URL(0LL);
    uint64_t v67 = *(void *)(v66 - 8);
    unint64_t v68 = *(unsigned int (**)(id, uint64_t, uint64_t))(v67 + 48);
    uint64_t v70 = 0LL;
    if (v68(v44, 1LL, v66) != 1)
    {
      URL._bridgeToObjectiveC()(v69);
      uint64_t v70 = v71;
      (*(void (**)(id, uint64_t))(v67 + 8))(v44, v66);
    }

    -[os_log_s setLowBatteryInfoURL:](v213, "setLowBatteryInfoURL:", v70);

    sub_10001581C((uint64_t)v35 + v32[11], v56, (uint64_t *)&unk_1009A34D0);
    if (v68((id)v56, 1LL, v66) == 1)
    {
      uint64_t v73 = 0LL;
    }

    else
    {
      URL._bridgeToObjectiveC()(v72);
      uint64_t v73 = v74;
      (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v56, v66);
    }

    uint64_t v75 = v213;
    -[os_log_s setDisableURL:](v213, "setDisableURL:", v73);

    swift_bridgeObjectRetain(*(void *)&v212[v211[8] + 8]);
    NSString v76 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    -[os_log_s setVersion:](v75, "setVersion:", v76);

    unint64_t v77 = (double *)((char *)v35 + v32[12]);
    double v78 = *v77;
    if (*((_BYTE *)v77 + 8)) {
      double v78 = 0.0;
    }
    -[os_log_s setTxPower:](v75, "setTxPower:", v78);
    -[os_log_s setCapabilities:](v75, "setCapabilities:", sub_1002EFA14(v209 & 0xFFFFFFFF01010101LL, v210));
    URL._bridgeToObjectiveC()(v79);
    uint64_t v81 = v80;
    -[os_log_s setDefaultHeroIcon:](v75, "setDefaultHeroIcon:", v80);

    uint64_t v82 = (int *)v221;
    URL._bridgeToObjectiveC()((NSURL *)*(int *)(v221 + 20));
    uint64_t v84 = v83;
    -[os_log_s setDefaultListIcon:](v75, "setDefaultListIcon:", v83);

    URL._bridgeToObjectiveC()((NSURL *)v82[6]);
    uint64_t v86 = v85;
    -[os_log_s setDefaultHeroIcon2x:](v75, "setDefaultHeroIcon2x:", v85);

    URL._bridgeToObjectiveC()((NSURL *)v82[7]);
    uint64_t v88 = v87;
    -[os_log_s setDefaultListIcon2x:](v75, "setDefaultListIcon2x:", v87);

    URL._bridgeToObjectiveC()((NSURL *)v82[8]);
    uint64_t v90 = v89;
    -[os_log_s setDefaultHeroIcon3x:](v75, "setDefaultHeroIcon3x:", v89);

    URL._bridgeToObjectiveC()((NSURL *)v82[9]);
    uint64_t v92 = v91;
    -[os_log_s setDefaultListIcon3x:](v75, "setDefaultListIcon3x:", v91);

    uint64_t v93 = *(void *)((char *)v35 + v32[13] + 8);
    uint64_t v94 = *(void *)((char *)v35 + v32[14]);
    uint64_t v95 = (double *)((char *)v35 + v32[17]);
    double v96 = -1.0;
    double v97 = -1.0;
    double v98 = -1.0;
    if (((_BYTE)v95[2] & 1) == 0)
    {
      double v98 = *v95;
      double v97 = v95[1];
    }

    v219 = (char *)objc_allocWithZone(&OBJC_CLASS___SPUnknownProductMetadata);
    swift_bridgeObjectRetain(v93);
    swift_bridgeObjectRetain(v94);
    NSString v99 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    URL._bridgeToObjectiveC()(v101);
    uint64_t v103 = v102;
    URL._bridgeToObjectiveC()(v104);
    __int128 v106 = v105;
    URL._bridgeToObjectiveC()(v107);
    uint64_t v109 = v108;
    id v110 = [v219 initWithTitle:v99 description:isa percentageX:v103 percentageY:v106 image:v108 image2x:v98 image3x:v97];

    -[os_log_s setLearnModeMetadata:](v213, "setLearnModeMetadata:", v110);
    uint64_t v111 = *(void *)(v220 + v32[15] + 8);
    uint64_t v112 = *(void *)(v220 + v32[16]);
    uint64_t v113 = v220 + v32[18];
    double v114 = -1.0;
    if ((*(_BYTE *)(v113 + 16) & 1) == 0)
    {
      double v114 = *(double *)v113;
      double v96 = *(double *)(v113 + 8);
    }

    id v115 = objc_allocWithZone(&OBJC_CLASS___SPUnknownProductMetadata);
    swift_bridgeObjectRetain(v111);
    swift_bridgeObjectRetain(v112);
    NSString v116 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    Class v117 = Array._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    URL._bridgeToObjectiveC()(v118);
    uint64_t v120 = v119;
    URL._bridgeToObjectiveC()(v121);
    uint64_t v123 = v122;
    URL._bridgeToObjectiveC()(v124);
    v126 = v125;
    id v127 = [v115 initWithTitle:v116 description:v117 percentageX:v120 percentageY:v123 image:v125 image2x:v114 image3x:v96];

    id v25 = v213;
    -[os_log_s setDisableMetadata:](v213, "setDisableMetadata:", v127);

    unint64_t v29 = v212;
    int v129 = *(char **)&v212[v211[11]];
    uint64_t v130 = v214;
    if (v129)
    {
      uint64_t v131 = *((void *)v129 + 2);
      if (v131)
      {
        v225[0] = (uint64_t)_swiftEmptyArrayStorage;
        swift_bridgeObjectRetain(v129);
        specialized ContiguousArray.reserveCapacity(_:)(v131);
        uint64_t v132 = 0LL;
        v217 = v129;
        do
        {
          uint64_t v137 = v129[v132 + 32];
          uint64_t v138 = *(void *)&v129[v132 + 48];
          uint64_t v139 = *(void *)&v129[v132 + 64];
          uint64_t v140 = *(void *)&v129[v132 + 80];
          v219 = *(char **)&v129[v132 + 72];
          LODWORD(v221) = v129[v132 + 88];
          id v141 = objc_allocWithZone(&OBJC_CLASS___SPAccessoryLayoutTemplate);
          swift_bridgeObjectRetain(v140);
          swift_bridgeObjectRetain(v138);
          id v142 = objc_msgSend(v141, "init", swift_bridgeObjectRetain(v139).n128_f64[0]);
          [v142 setPartIdentifier:v137];
          NSString v143 = String._bridgeToObjectiveC()();
          [v142 setPartType:v143];

          NSString v144 = String._bridgeToObjectiveC()();
          [v142 setPartName:v144];

          if (v140)
          {
            swift_bridgeObjectRetain(v140);
            NSString v133 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
          }

          else
          {
            NSString v133 = 0LL;
          }

          [v142 setPartSymbol:v133];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          [v142 setIsPrimary:v221 & 1];
          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v134);
          uint64_t v135 = *(void *)(v225[0] + 16);
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v135);
          uint64_t v136 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v135, v142);
          specialized ContiguousArray._endMutation()(v136);
          v132 += 64LL;
          --v131;
          int v129 = v217;
        }

        while (v131);
        swift_bridgeObjectRelease();
        unint64_t v29 = v212;
        id v25 = v213;
        uint64_t v130 = v214;
      }

      sub_100022898(0LL, (unint64_t *)&qword_1009A6DD8, &OBJC_CLASS___SPAccessoryLayoutTemplate_ptr);
      Class v145 = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      -[os_log_s setLayoutTemplate:](v25, "setLayoutTemplate:", v145);
    }

    if ((*(_BYTE *)(v220 + 72) & 1) != 0)
    {
      uint64_t v146 = (os_log_s *)Logger.logObject.getter(v128);
      os_log_type_t v147 = static os_log_type_t.default.getter(v146);
      BOOL v148 = os_log_type_enabled(v146, v147);
      uint64_t v149 = v218;
      if (v148)
      {
        uint64_t v150 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v150 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v146,  v147,  "No defaultRole provided. Fallback to custom role.",  v150,  2u);
        swift_slowDealloc(v150, -1LL, -1LL);
      }

      uint64_t v152 = v215;
      v151 = v216;
      (*((void (**)(char *, void, uint64_t))v216 + 13))( v215,  enum case for LocalizationUtility.Table.default(_:),  v130);
      static LocalizationUtility.localizedString(key:table:)(0xD000000000000010LL, 0x800000010085ADB0LL, v152);
      (*((void (**)(char *, uint64_t))v151 + 1))(v152, v130);
      id v153 = objc_allocWithZone(&OBJC_CLASS___SPBeaconRole);
      NSString v154 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      NSString v155 = String._bridgeToObjectiveC()();
      id v156 = [v153 initWithRoleId:999 role:v154 roleEmoji:v155];

      -[os_log_s setDefaultRole:](v25, "setDefaultRole:", v156);
      sub_100018C68(v149, type metadata accessor for AccessoryInfoResponseContent.Assets);
      uint64_t v157 = v220;
      goto LABEL_76;
    }

    uint64_t v22 = *(char **)(v220 + 64);
    uint64_t v158 = v218;
    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
    uint64_t v159 = sub_1006A0C70(v225[0]);
    swift_bridgeObjectRelease();
    uint64_t v160 = *(void *)(v159 + 16);
    if (!v160) {
      break;
    }
    unint64_t v161 = 0LL;
    unint64_t v32 = (int *)(v159 + 32);
    uint64_t v35 = (void *)v220;
    while (v161 < *(void *)(v159 + 16))
    {
      uint64_t v170 = *(void *)&v32[8 * v161 + 6];
      uint64_t v171 = *(void *)(v170 + 16);
      if (v171)
      {
        if (*(char **)(v170 + 32) == v22)
        {
          __int16 v162 = (uint64_t *)(v170 + 64);
          v163 = (uint64_t *)(v170 + 48);
LABEL_58:
          uint64_t v164 = *v163;
          uint64_t v165 = *v162;
          swift_bridgeObjectRetain(*v163);
          swift_bridgeObjectRetain(v165);
          id v166 = objc_allocWithZone(&OBJC_CLASS___SPBeaconRole);
          swift_bridgeObjectRetain(v164);
          swift_bridgeObjectRetain(v165);
          NSString v167 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          NSString v168 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          id v169 = [v166 initWithRoleId:v22 role:v167 roleEmoji:v168];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          id v25 = v213;
          -[os_log_s setDefaultRole:](v213, "setDefaultRole:", v169);

          unint64_t v29 = v212;
          uint64_t v35 = (void *)v220;
        }

        else if (v171 != 1)
        {
          __int16 v162 = (uint64_t *)(v170 + 104);
          uint64_t v172 = 1LL;
          while (1)
          {
            uint64_t v173 = v172 + 1;
            if (__OFADD__(v172, 1LL)) {
              break;
            }
            if ((char *)*(v162 - 4) == v22)
            {
              v163 = v162 - 2;
              goto LABEL_58;
            }

            v162 += 5;
            ++v172;
            if (v173 == v171) {
              goto LABEL_59;
            }
          }

          __break(1u);
          break;
        }
      }

double sub_100253844@<D0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  id v10 = [a2 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v10);

  swift_beginAccess(a1 + 56, v16, 33LL, 0LL);
  id v11 = a2;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(a1 + 56));
  uint64_t v15 = *(void *)(a1 + 56);
  *(void *)(a1 + 56) = 0x8000000000000000LL;
  sub_10005DFF8((uint64_t)v11, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
  *(void *)(a1 + 56) = v15;
  swift_bridgeObjectRelease();
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  swift_endAccess(v16);
  swift_beginAccess(a1 + 32, v16, 0LL, 0LL);
  uint64_t v13 = *(void *)(a1 + 32);
  *a3 = v13;
  *(void *)&double result = swift_bridgeObjectRetain(v13).n128_u64[0];
  return result;
}

void sub_100253980(uint64_t a1)
{
  id v8 = 0LL;
  uint64_t v6 = &v8;
  uint64_t v7 = a1;
  uint64_t v1 = sub_100004AEC((uint64_t *)&unk_1009A6AF0);
  uint64_t v2 = OS_dispatch_queue.sync<A>(execute:)(sub_100253F10, v5, v1);
  if (v8)
  {
    __chkstk_darwin(v2);
    id v4 = v3;
    os_activity(name:block:)("LostAccessory", 13LL, 2LL, sub_100253F2C);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
  }
}

double sub_100253A68@<D0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  id v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  id v12 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a3
                                                              + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "identifier"));
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v12);

  swift_beginAccess(a2 + 56, v18, 33LL, 0LL);
  uint64_t v13 = sub_1000485D4((uint64_t)v11);
  (*(void (**)(_BYTE *, uint64_t))(v9 + 8))(v11, v8);
  swift_endAccess(v18);
  uint64_t v14 = *a1;
  *a1 = (void *)v13;

  swift_beginAccess(a2 + 32, v18, 0LL, 0LL);
  uint64_t v15 = *(void *)(a2 + 32);
  *a4 = v15;
  *(void *)&double result = swift_bridgeObjectRetain(v15).n128_u64[0];
  return result;
}

uint64_t sub_100253B8C@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 32);
  *a1 = v3;
  return swift_bridgeObjectRetain(v3);
}

void sub_100253BD8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  id v2 = *(id *)(v0 + 24);
  sub_100253C24(v1, (uint64_t)v2);
}

void sub_100253C24(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = __CocoaSet.makeIterator()(v4);
    uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009A0AB0);
    uint64_t v7 = sub_1000372EC( (unint64_t *)&unk_1009A6B00,  (uint64_t *)&unk_1009A0AB0,  (uint64_t)&protocol conformance descriptor for XPCSession<A>);
    uint64_t v8 = Set.Iterator.init(_cocoa:)(v32, v5, v6, v7);
    uint64_t v3 = v32[0];
    uint64_t v30 = v32[1];
    uint64_t v9 = v32[2];
    uint64_t v10 = v32[3];
    unint64_t v11 = v32[4];
  }

  else
  {
    uint64_t v12 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v30 = a1 + 56;
    uint64_t v9 = ~v12;
    uint64_t v13 = -v12;
    if (v13 < 64) {
      uint64_t v14 = ~(-1LL << v13);
    }
    else {
      uint64_t v14 = -1LL;
    }
    unint64_t v11 = v14 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    uint64_t v10 = 0LL;
  }

  int64_t v15 = (unint64_t)(v9 + 64) >> 6;
  while (v3 < 0)
  {
    uint64_t v19 = __CocoaSet.Iterator.next()(v8);
    if (!v19) {
      goto LABEL_38;
    }
    uint64_t v20 = v19;
    uint64_t v31 = v19;
    swift_unknownObjectRetain(v19);
    uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009A0AB0);
    swift_dynamicCast(&v33, &v31, (char *)&type metadata for Swift.AnyObject + 8, v21, 7LL);
    uint64_t v22 = v33;
    uint64_t v23 = swift_unknownObjectRelease(v20);
    uint64_t v18 = v10;
    uint64_t v16 = v11;
    if (!v22) {
      goto LABEL_38;
    }
LABEL_36:
    XPCSession.proxy.getter(v23);
    uint64_t v28 = v33;
    if (v33)
    {
      unint64_t v29 = (void *)_convertErrorToNSError(_:)(a2);
      [v28 accessoryDiscoveryError:v29];
      swift_release();

      uint64_t v8 = (void *)swift_unknownObjectRelease(v28);
    }

    else
    {
      uint64_t v8 = (void *)swift_release();
    }

    uint64_t v10 = v18;
    unint64_t v11 = v16;
  }

  if (v11)
  {
    uint64_t v16 = (v11 - 1) & v11;
    unint64_t v17 = __clz(__rbit64(v11)) | (v10 << 6);
    uint64_t v18 = v10;
LABEL_35:
    uint64_t v27 = *(void *)(*(void *)(v3 + 48) + 8 * v17);
    uint64_t v23 = swift_retain();
    if (!v27) {
      goto LABEL_38;
    }
    goto LABEL_36;
  }

  int64_t v24 = v10 + 1;
  if (!__OFADD__(v10, 1LL))
  {
    if (v24 >= v15) {
      goto LABEL_38;
    }
    unint64_t v25 = *(void *)(v30 + 8 * v24);
    uint64_t v18 = v10 + 1;
    if (!v25)
    {
      uint64_t v18 = v10 + 2;
      if (v10 + 2 >= v15) {
        goto LABEL_38;
      }
      unint64_t v25 = *(void *)(v30 + 8 * v18);
      if (!v25)
      {
        uint64_t v18 = v10 + 3;
        if (v10 + 3 >= v15) {
          goto LABEL_38;
        }
        unint64_t v25 = *(void *)(v30 + 8 * v18);
        if (!v25)
        {
          uint64_t v18 = v10 + 4;
          if (v10 + 4 >= v15) {
            goto LABEL_38;
          }
          unint64_t v25 = *(void *)(v30 + 8 * v18);
          if (!v25)
          {
            uint64_t v18 = v10 + 5;
            if (v10 + 5 >= v15) {
              goto LABEL_38;
            }
            unint64_t v25 = *(void *)(v30 + 8 * v18);
            if (!v25)
            {
              uint64_t v26 = v10 + 6;
              while (v15 != v26)
              {
                unint64_t v25 = *(void *)(v30 + 8 * v26++);
                if (v25)
                {
                  uint64_t v18 = v26 - 1;
                  goto LABEL_34;
                }
              }

double sub_100253F10@<D0>(void *a1@<X8>)
{
  return sub_100253A68(*(void ***)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

void sub_100253F2C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  id v2 = *(id *)(v0 + 24);
  sub_100253F80(v1, (uint64_t)v2, (SEL *)&selRef_lostAccessory_);
}

void sub_100253F80(uint64_t a1, uint64_t a2, SEL *a3)
{
  uint64_t v5 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v6 = a1;
    }
    else {
      uint64_t v6 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v7 = __CocoaSet.makeIterator()(v6);
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009A0AB0);
    uint64_t v9 = sub_1000372EC( (unint64_t *)&unk_1009A6B00,  (uint64_t *)&unk_1009A0AB0,  (uint64_t)&protocol conformance descriptor for XPCSession<A>);
    uint64_t v10 = Set.Iterator.init(_cocoa:)(v34, v7, v8, v9);
    uint64_t v5 = v34[0];
    uint64_t v32 = v34[1];
    uint64_t v11 = v34[2];
    uint64_t v12 = v34[3];
    unint64_t v13 = v34[4];
  }

  else
  {
    uint64_t v14 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v32 = a1 + 56;
    uint64_t v15 = ~v14;
    uint64_t v16 = -v14;
    if (v16 < 64) {
      uint64_t v17 = ~(-1LL << v16);
    }
    else {
      uint64_t v17 = -1LL;
    }
    unint64_t v13 = v17 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    uint64_t v11 = v15;
    uint64_t v12 = 0LL;
  }

  int64_t v31 = (unint64_t)(v11 + 64) >> 6;
  while (v5 < 0)
  {
    uint64_t v21 = __CocoaSet.Iterator.next()(v10);
    if (!v21) {
      goto LABEL_38;
    }
    uint64_t v22 = v21;
    uint64_t v33 = v21;
    swift_unknownObjectRetain(v21);
    uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009A0AB0);
    swift_dynamicCast(&v35, &v33, (char *)&type metadata for Swift.AnyObject + 8, v23, 7LL);
    id v24 = v35;
    uint64_t v25 = swift_unknownObjectRelease(v22);
    uint64_t v20 = v12;
    uint64_t v18 = v13;
    if (!v24) {
      goto LABEL_38;
    }
LABEL_36:
    XPCSession.proxy.getter(v25);
    id v30 = v35;
    if (v35)
    {
      objc_msgSend(v35, *a3, a2);
      swift_release();
      uint64_t v10 = (void *)swift_unknownObjectRelease(v30);
    }

    else
    {
      uint64_t v10 = (void *)swift_release();
    }

    uint64_t v12 = v20;
    unint64_t v13 = v18;
  }

  if (v13)
  {
    uint64_t v18 = (v13 - 1) & v13;
    unint64_t v19 = __clz(__rbit64(v13)) | (v12 << 6);
    uint64_t v20 = v12;
LABEL_35:
    uint64_t v29 = *(void *)(*(void *)(v5 + 48) + 8 * v19);
    uint64_t v25 = swift_retain();
    if (!v29) {
      goto LABEL_38;
    }
    goto LABEL_36;
  }

  int64_t v26 = v12 + 1;
  if (!__OFADD__(v12, 1LL))
  {
    if (v26 >= v31) {
      goto LABEL_38;
    }
    unint64_t v27 = *(void *)(v32 + 8 * v26);
    uint64_t v20 = v12 + 1;
    if (!v27)
    {
      uint64_t v20 = v12 + 2;
      if (v12 + 2 >= v31) {
        goto LABEL_38;
      }
      unint64_t v27 = *(void *)(v32 + 8 * v20);
      if (!v27)
      {
        uint64_t v20 = v12 + 3;
        if (v12 + 3 >= v31) {
          goto LABEL_38;
        }
        unint64_t v27 = *(void *)(v32 + 8 * v20);
        if (!v27)
        {
          uint64_t v20 = v12 + 4;
          if (v12 + 4 >= v31) {
            goto LABEL_38;
          }
          unint64_t v27 = *(void *)(v32 + 8 * v20);
          if (!v27)
          {
            uint64_t v20 = v12 + 5;
            if (v12 + 5 >= v31) {
              goto LABEL_38;
            }
            unint64_t v27 = *(void *)(v32 + 8 * v20);
            if (!v27)
            {
              uint64_t v28 = v12 + 6;
              while (v31 != v28)
              {
                unint64_t v27 = *(void *)(v32 + 8 * v28++);
                if (v27)
                {
                  uint64_t v20 = v28 - 1;
                  goto LABEL_34;
                }
              }

uint64_t sub_100254278()
{
  return sub_100254C64(33LL);
}

uint64_t sub_100254280(void (*a1)(void **), uint64_t a2)
{
  return sub_10024C048(a1, a2, *(char **)(v2 + 16), *(void *)(v2 + 24), *(unsigned __int8 *)(v2 + 32));
}

uint64_t sub_10025428C(uint64_t a1)
{
  return sub_1004A3BA0(a1, *(void **)(v1 + 16)) & 1;
}

uint64_t sub_1002542A8(uint64_t a1)
{
  return sub_1006E22C0(a1, *(void **)(v1 + 16)) & 1;
}

uint64_t sub_1002542C4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002542E8()
{
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100254324(uint64_t a1)
{
  return sub_10024EDD4( a1,  *(void *)(v1 + 16),  *(void **)(v1 + 24),  *(void (**)(uint64_t *))(v1 + 32),  *(void *)(v1 + 40),  *(unsigned __int8 *)(v1 + 48),  *(void **)(v1 + 56));
}

uint64_t sub_100254338(uint64_t a1, uint64_t a2)
{
  return a2;
}

uint64_t sub_100254374(void *a1, uint64_t a2)
{
  return a2;
}

uint64_t *sub_1002543B0(uint64_t *a1)
{
  return a1;
}

void sub_1002543E4(uint64_t a1)
{
}

uint64_t sub_1002543EC(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A6DE8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = a1;
  uint64_t v6 = swift_allocObject(&unk_10094B110, 24LL, 7LL);
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = &off_100934038;
  uint64_t v7 = swift_retain();
  uint64_t v8 = static Subscribers.Demand.unlimited.getter(v7);
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009A6C10);
  uint64_t v10 = type metadata accessor for Peripheral(0LL);
  uint64_t v11 = sub_1000372EC( &qword_1009A6C20,  (uint64_t *)&unk_1009A6C10,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.flatMap<A, B>(maxPublishers:_:)(v8, sub_1002549F4, v6, v9, v10, v9, v11, v11);
  swift_release();
  swift_release();
  uint64_t v12 = sub_1000372EC( (unint64_t *)&unk_1009A6DF0,  &qword_1009A6DE8,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  uint64_t v13 = Publisher.eraseToAnyPublisher()(v2, v12);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v3 + 8);
  v14(v5, v2);
  uint64_t v21 = v13;
  uint64_t v15 = swift_allocObject(&unk_10094B138, 24LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = &off_100934068;
  uint64_t v16 = swift_retain();
  uint64_t v17 = static Subscribers.Demand.unlimited.getter(v16);
  Publisher.flatMap<A, B>(maxPublishers:_:)(v17, sub_1002549FC, v15, v9, v10, v9, v11, v11);
  swift_release();
  swift_release();
  uint64_t v18 = Publisher.eraseToAnyPublisher()(v2, v12);
  swift_release();
  v14(v5, v2);
  return v18;
}

uint64_t sub_100254600(void (*a1)(_BYTE *), uint64_t a2)
{
  return sub_1004C276C(a1, a2, v2);
}

uint64_t sub_100254608()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10025462C@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  char v3 = *(_BYTE *)(v2 + 16);
  uint64_t v4 = *(void *)(v2 + 24);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *(_BYTE *)a2 = v3;
  *(void *)(a2 + 8) = v4;
  *(void *)(a2 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)(a2 + 24) = v6;
  swift_retain();
  return sub_10001736C(v5, v6);
}

void sub_10025466C(BOOL *a1@<X8>)
{
  if (*(void *)(v1 + 80)) {
    *a1 = 0;
  }
  else {
    *a1 = *(void *)(v1 + 88) == 0LL;
  }
}

void sub_100254690()
{
  *(_BYTE *)(v0 + 112) = 1;
}

uint64_t sub_10025469C@<X0>(char **a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10024A87C(a1, a2);
}

uint64_t sub_1002546B4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002546D8()
{
  return sub_10024A9A4(v0[2], v0[3], v0[4]);
}

uint64_t sub_1002546F4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10024BC88(*a1, 1);
  *a2 = result;
  return result;
}

uint64_t sub_100254720@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10024AE54( a1,  v2,  (uint64_t)&unk_10094B048,  (uint64_t)sub_1002547DC,  (uint64_t)&unk_10094B070,  (uint64_t)sub_100254808,  a2);
}

void sub_100254758(uint64_t a1)
{
}

uint64_t sub_100254760(void **a1)
{
  return sub_10024B574(a1, v1);
}

double sub_100254768@<D0>(void *a1@<X8>)
{
  return sub_100253844(*(void *)(v1 + 16), *(void **)(v1 + 24), a1);
}

void sub_100254780()
{
  uint64_t v1 = *(void *)(v0 + 16);
  id v2 = *(id *)(v0 + 24);
  sub_100253F80(v1, (uint64_t)v2, (SEL *)&selRef_discoveredAccessory_);
}

uint64_t sub_1002547D4()
{
  return sub_100254C64(32LL);
}

uint64_t sub_1002547DC(void (*a1)(void), uint8_t *a2)
{
  return sub_100250374(a1, a2, *(void **)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1002547E4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10025480C()
{
  uint64_t v1 = type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  uint64_t v7 = v0 + v4;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  sub_100016F9C(*(void *)(v7 + *(int *)(v1 + 20)), *(void *)(v7 + *(int *)(v1 + 20) + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1002548DC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for AccessoryMetadata(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1 + v5;
  uint64_t v7 = *(void *)(v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  uint64_t v8 = (void *)swift_task_alloc(dword_1009A6D9C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_1000159BC;
  v8[3] = v6;
  v8[4] = v7;
  v8[2] = a1;
  return swift_task_switch(sub_100250B40, 0LL, 0LL);
}

uint64_t sub_100254978(uint64_t a1)
{
  return sub_100250CAC( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_10025499C(uint64_t a1)
{
  return sub_100250F58(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1002549AC(uint64_t a1)
{
  return sub_1002513A0(a1, *(void *)(v1 + 16), *(void (**)(uint64_t *))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1002549B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2)
  {
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRetain(a4);
    return swift_bridgeObjectRetain(a6);
  }

  return result;
}

uint64_t sub_1002549F4@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10024B73C(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_1002549FC@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10024B9E0(a1, *(void *)(v2 + 16), a2);
}

void sub_100254A08(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100254A14()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100254A40@<X0>(_BYTE *a1@<X8>)
{
  return sub_1004A33A0(*(void *)(v1 + 16), a1);
}

uint64_t sub_100254A58@<X0>(uint64_t a1@<X8>)
{
  return sub_10024937C(v1, a1);
}

uint64_t sub_100254A70()
{
  uint64_t v1 = *(void *)(sub_100004AEC((uint64_t *)&unk_1009AE480) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = type metadata accessor for MACAddress(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  swift_release();
  return swift_deallocObject(v0, ((v4 + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8, v2 | 7);
}

uint64_t sub_100254B24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100254B6C(uint64_t *a1)
{
  uint64_t v3 = *(void *)(sub_100004AEC((uint64_t *)&unk_1009AE480) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_1002494B8(a1, v1 + v4, *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100254BC0@<X0>(uint64_t *a1@<X8>)
{
  return sub_10024A924(*(void *)(v1 + 16), a1);
}

uint64_t sub_100254BD8()
{
  return sub_10024997C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100254BF0@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10024BC88(*a1, 0);
  *a2 = result;
  return result;
}

uint64_t sub_100254C1C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10024AE54( a1,  v2,  (uint64_t)&unk_10094B200,  (uint64_t)sub_100254DD8,  (uint64_t)&unk_10094B228,  (uint64_t)sub_100254808,  a2);
}

void sub_100254C54(uint64_t a1)
{
}

uint64_t sub_100254C5C()
{
  return sub_100254C64(32LL);
}

uint64_t sub_100254C64(uint64_t a1)
{
  swift_release(*(void *)(v1 + 24));
  return swift_deallocObject(v1, a1, 7LL);
}

id sub_100254C9C@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  id v5 = *(id *)(v2 + 16);
  [v5 setProductInformation:*a1];
  *a2 = v5;
  return v5;
}

void sub_100254CE4(void *a1@<X8>)
{
}

uint64_t sub_100254CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_100254D44()
{
  uint64_t v1 = *(void *)(v0 + 80);
  *(void *)(v0 + 80) = 0LL;
  swift_release(v1);
  uint64_t v2 = *(void *)(v0 + 88);
  *(void *)(v0 + 88) = 0LL;
  return swift_release(v2);
}

void sub_100254D7C(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 112);
}

uint64_t sub_100254D88(uint64_t a1)
{
  return sub_10025428C(a1) & 1;
}

uint64_t sub_100254DA4@<X0>(_BYTE *a1@<X8>)
{
  return sub_100254A40(a1);
}

void *initializeBufferWithCopyOfBuffer for MessagingAccount(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

void *assignWithCopy for MessagingAccount(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  a1[1] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

void *assignWithTake for MessagingAccount(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  uint64_t v4 = a1[1];
  *a1 = *a2;
  a1[1] = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for MessagingAccount()
{
  return &type metadata for MessagingAccount;
}

uint64_t sub_100254E88(uint64_t *a1, void *a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = a2[1];
  if (v4 == *a2 && v5 == v6) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *a2, v6, 0LL);
  }
}

unint64_t sub_100254EBC()
{
  unint64_t result = qword_1009A6E68;
  if (!qword_1009A6E68)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F7AA4, &type metadata for MessagingAccount);
    atomic_store(result, (unint64_t *)&qword_1009A6E68);
  }

  return result;
}

void sub_100254F04(char a1)
{
  __asm { BR              X10 }

ValueMetadata *sub_100254F2C()
{
  return &type metadata for AccessoryCommandResponsePayload;
}

uint64_t sub_100254FDC(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100255018 + 4 * byte_1007F7B1C[a1]))( 0x7972616D6972702ELL,  0xEB0000000079654BLL);
}

unint64_t sub_100255018()
{
  return 0xD000000000000011LL;
}

void sub_100255120()
{
  __asm { BR              X12 }

uint64_t sub_10025516C()
{
  return 3LL;
}

void sub_1002551E4()
{
  __asm { BR              X11 }

uint64_t sub_10025525C()
{
  v0[3] = &type metadata for VerifyFindMyNetworkIdPayload;
  v0[4] = sub_100256698();
  *uint64_t v0 = v3;
  v0[1] = v5;
  return sub_10001736C(v2, v1);
}

void sub_10025530C( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  unint64_t v13 = a1 & 0xCFFFFFFFFFFFFFFFLL;
  v9[3] = &type metadata for AccessoryCommandResponsePayload;
  v9[4] = sub_1000F4F34();
  uint64_t v14 = (void *)swift_allocObject(&unk_10094B3B0, 48LL, 7LL);
  *uint64_t v9 = v14;
  v14[2] = v12;
  v14[3] = a8;
  v14[4] = a9;
  v14[5] = v13;
  sub_10001736C(v11, v10);
  JUMPOUT(0x1002552E8LL);
}

void sub_100255368()
{
  *(void *)(v0 + 24) = &type metadata for VerifyFindMyNetworkIdResponsePayload;
  *(void *)(v0 + 32) = sub_100256654();
  *(_BYTE *)uint64_t v0 = v1 & 1;
  JUMPOUT(0x1002552ECLL);
}

void sub_100255388( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15)
{
  *(void *)(v15 + 24) = &type metadata for VerifyFindMyNetworkIdResponseV2Payload;
  *(void *)(v15 + 32) = sub_100256610();
  *(_WORD *)uint64_t v15 = v17;
  *(void *)(v15 + 8) = a15;
  swift_bridgeObjectRetain(v16);
  JUMPOUT(0x1002552ECLL);
}

void sub_1002553BC( uint64_t a1@<X8>, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  if (a1 | v10 | a9 | a8)
  {
    if (v10 != 1 || a9 | a1 | a8)
    {
      *(void *)(v9 + 24) = &type metadata for AccessoryGenericPayload;
      *(void *)(v9 + 32) = sub_1000F4DE0();
    }

    else
    {
      *(void *)(v9 + 24) = &type metadata for GetiCloudIdentifierPayload;
      *(void *)(v9 + 32) = sub_1002567A8();
    }
  }

  else
  {
    *(void *)(v9 + 24) = &type metadata for GetPrimaryKeyPayload;
    *(void *)(v9 + 32) = sub_1002567EC();
  }

  JUMPOUT(0x1002552ECLL);
}

uint64_t sub_10025542C(void *a1)
{
  uint64_t v3 = type metadata accessor for Endianness(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100012ED8(a1, v7);
  dispatch thunk of BinaryEncoding.container()(v17, v7, v8);
  sub_100255120();
  char v10 = v9;
  LOWORD(v15) = v9 | 0x400;
  static Endianness.current.getter(v9);
  unint64_t v11 = sub_1000F4D24();
  FixedWidthInteger.convert(to:)(&v16, v6, &type metadata for UInt16, v11);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  LOWORD(v15) = v16;
  uint64_t v12 = v18;
  uint64_t v13 = v19;
  sub_100037298((uint64_t)v17, v18);
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v15, &type metadata for UInt16, v11, v12, v13);
  if (!v1) {
    __asm { BR              X10 }
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v17);
}

uint64_t sub_100255A34@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_100256388(a1, (uint64_t)v5);
  if (!v2) {
    return sub_1002565B4(v5, a2);
  }
  return result;
}

uint64_t sub_100255A78(void *a1)
{
  return sub_10025542C(a1);
}

uint64_t sub_100255AC4(unsigned __int16 a1)
{
  int v1 = a1;
  uint64_t result = 1LL;
  switch(v1)
  {
    case 1024:
      uint64_t result = 0LL;
      break;
    case 1025:
      return result;
    case 1026:
      uint64_t result = 2LL;
      break;
    case 1027:
      uint64_t result = 3LL;
      break;
    case 1028:
      uint64_t result = 4LL;
      break;
    case 1029:
      uint64_t result = 5LL;
      break;
    case 1030:
      uint64_t result = 6LL;
      break;
    case 1031:
      uint64_t result = 7LL;
      break;
    case 1032:
      uint64_t result = 8LL;
      break;
    case 1033:
      uint64_t result = 9LL;
      break;
    case 1034:
      uint64_t result = 10LL;
      break;
    default:
      if (v1 == 770) {
        uint64_t result = 11LL;
      }
      else {
        uint64_t result = 12LL;
      }
      break;
  }

  return result;
}

double sub_100255B54(uint64_t a1, unint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  switch((a4 >> 60) & 3 | (4 * a5))
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 4uLL:
    case 6uLL:
      sub_10001736C(a1, a2);
      break;
    case 3uLL:
      unint64_t v7 = a4 & 0xCFFFFFFFFFFFFFFFLL;
      sub_10001736C(a1, a2);
      sub_10001736C(a3, v7);
      break;
    case 7uLL:
      *(void *)&double result = swift_bridgeObjectRetain(a2).n128_u64[0];
      break;
    default:
      return result;
  }

  return result;
}

uint64_t destroy for AccessoryOwnerCommand(uint64_t a1)
{
  return sub_100255BD4( *(void *)a1,  *(void *)(a1 + 8),  *(void *)(a1 + 16),  *(void *)(a1 + 24),  *(_BYTE *)(a1 + 32));
}

uint64_t sub_100255BD4(uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  switch((a4 >> 60) & 3 | (4 * a5))
  {
    case 0uLL:
    case 1uLL:
    case 2uLL:
    case 4uLL:
    case 6uLL:
      double result = sub_100016F9C(result, a2);
      break;
    case 3uLL:
      unint64_t v6 = a4 & 0xCFFFFFFFFFFFFFFFLL;
      sub_100016F9C(result, a2);
      double result = sub_100016F9C(a3, v6);
      break;
    case 7uLL:
      double result = swift_bridgeObjectRelease();
      break;
    default:
      return result;
  }

  return result;
}

uint64_t initializeWithCopy for AccessoryOwnerCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(_BYTE *)(a2 + 32);
  sub_100255B54(*(void *)a2, v4, v5, v6, v7);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  *(_BYTE *)(a1 + 32) = v7;
  return a1;
}

uint64_t assignWithCopy for AccessoryOwnerCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  unint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a2 + 16);
  unint64_t v6 = *(void *)(a2 + 24);
  char v7 = *(_BYTE *)(a2 + 32);
  sub_100255B54(*(void *)a2, v4, v5, v6, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  uint64_t v10 = *(void *)(a1 + 16);
  unint64_t v11 = *(void *)(a1 + 24);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)(a1 + 24) = v6;
  char v12 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v7;
  sub_100255BD4(v8, v9, v10, v11, v12);
  return a1;
}

uint64_t assignWithTake for AccessoryOwnerCommand(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 32);
  uint64_t v4 = *(void *)a1;
  unint64_t v6 = *(void *)(a1 + 8);
  uint64_t v5 = *(void *)(a1 + 16);
  unint64_t v7 = *(void *)(a1 + 24);
  __int128 v8 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v8;
  char v9 = *(_BYTE *)(a1 + 32);
  *(_BYTE *)(a1 + 32) = v3;
  sub_100255BD4(v4, v6, v5, v7, v9);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryOwnerCommand(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x3F8 && *(_BYTE *)(a1 + 33)) {
    return (*(_DWORD *)a1 + 1016);
  }
  unsigned int v3 = ((*(void *)(a1 + 24) >> 60) & 3 | (4 * *(unsigned __int8 *)(a1 + 32))) ^ 0x3FF;
  if (v3 >= 0x3F7) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AccessoryOwnerCommand( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x3F7)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 0;
    *(void *)double result = a2 - 1016;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0x3F8) {
      *(_BYTE *)(result + 33) = 1;
    }
  }

  else
  {
    if (a3 >= 0x3F8) {
      *(_BYTE *)(result + 33) = 0;
    }
    if (a2)
    {
      *(void *)double result = 0LL;
      *(void *)(result + 8) = 0LL;
      *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
      *(void *)(result + 24) = (-a2 & 3LL) << 60;
      *(_BYTE *)(result + 32) = -a2 >> 2;
    }
  }

  return result;
}

uint64_t sub_100255E04(uint64_t a1)
{
  else {
    return (*(void *)(a1 + 24) >> 60) & 3 | (4 * *(_BYTE *)(a1 + 32));
  }
}

uint64_t sub_100255E2C(uint64_t result)
{
  *(void *)(result + 24) &= 0xCFFFFFFFFFFFFFFFLL;
  return result;
}

uint64_t sub_100255E3C(uint64_t result, unsigned int a2)
{
  if (a2 < 8)
  {
    *(void *)(result + 24) = *(void *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 3) << 60);
    *(_BYTE *)(result + 32) = a2 >> 2;
  }

  else
  {
    *(void *)double result = a2 - 8;
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(_BYTE *)(result + 32) = 2;
  }

  return result;
}

ValueMetadata *type metadata accessor for AccessoryOwnerCommand()
{
  return &type metadata for AccessoryOwnerCommand;
}

void sub_100255E84(char a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v9;
  unint64_t v6 = sub_100012ED8(v8, v9);
  uint64_t DynamicType = swift_getDynamicType(v6, v5, 1LL);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
  if (v4 == DynamicType) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x100256358LL);
}

uint64_t sub_100256388@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v4 = type metadata accessor for Endianness(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v26[-1] - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100012ED8(a1, v8);
  dispatch thunk of BinaryDecoding.container()(v28, v8, v9);
  uint64_t v10 = v29;
  uint64_t v11 = v30;
  sub_100037298((uint64_t)v28, v29);
  unint64_t v12 = sub_1000F4D24();
  uint64_t v13 = dispatch thunk of BinaryDecodingContaining.decode<A>(_:)( v26,  &type metadata for UInt16,  &type metadata for UInt16,  v12,  v10,  v11);
  if (!v2)
  {
    uint64_t v14 = v25;
    __int16 v32 = v26[0];
    static Endianness.current.getter(v13);
    FixedWidthInteger.convert(to:)(v27, v7, &type metadata for UInt16, v12);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    char v15 = sub_100255AC4(v27[0]);
    if (v15 != 12)
    {
      char v19 = v15;
      sub_100254F04(v15);
      uint64_t v21 = v20;
      uint64_t v23 = v22;
      sub_100013044((uint64_t)a1, (uint64_t)v26);
      v27[3] = v21;
      v27[4] = v23;
      sub_10000A7C8(v27);
      dispatch thunk of BinaryDecodable.init(from:)(v26, v21, *(void *)(v23 + 8));
      sub_100013044((uint64_t)v27, (uint64_t)v26);
      sub_100255E84(v19, (uint64_t)v26);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
      return sub_1002565B4(v31, v14);
    }

    unint64_t v16 = sub_1002565CC();
    uint64_t v17 = swift_allocError(&type metadata for AccessoryOwnerCommand.AccessoryOwnerCommandError, v16, 0LL, 0LL);
    *uint64_t v18 = 1;
    swift_willThrow(v17);
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_1002565B4(__int128 *a1, uint64_t a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[1];
  *(_BYTE *)(a2 + 32) = *((_BYTE *)a1 + 32);
  *(_OWORD *)a2 = v2;
  *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v3;
  return a2;
}

unint64_t sub_1002565CC()
{
  unint64_t result = qword_1009A6E70;
  if (!qword_1009A6E70)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F7C64, &type metadata for AccessoryOwnerCommand.AccessoryOwnerCommandError);
    atomic_store(result, (unint64_t *)&qword_1009A6E70);
  }

  return result;
}

unint64_t sub_100256610()
{
  unint64_t result = qword_1009A6E78;
  if (!qword_1009A6E78)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EB410, &type metadata for VerifyFindMyNetworkIdResponseV2Payload);
    atomic_store(result, (unint64_t *)&qword_1009A6E78);
  }

  return result;
}

unint64_t sub_100256654()
{
  unint64_t result = qword_1009A6E80;
  if (!qword_1009A6E80)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080C088, &type metadata for VerifyFindMyNetworkIdResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009A6E80);
  }

  return result;
}

unint64_t sub_100256698()
{
  unint64_t result = qword_1009A6E88;
  if (!qword_1009A6E88)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FDF70, &type metadata for VerifyFindMyNetworkIdPayload);
    atomic_store(result, (unint64_t *)&qword_1009A6E88);
  }

  return result;
}

unint64_t sub_1002566DC()
{
  unint64_t result = qword_1009A6E90;
  if (!qword_1009A6E90)
  {
    unint64_t result = swift_getWitnessTable(&unk_100819B18, &type metadata for EncryptedSerialNumberResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009A6E90);
  }

  return result;
}

unint64_t sub_100256720()
{
  unint64_t result = qword_1009A6E98;
  if (!qword_1009A6E98)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080B910, &type metadata for iCloudIdentifierResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009A6E98);
  }

  return result;
}

unint64_t sub_100256764()
{
  unint64_t result = qword_1009A6EA0;
  if (!qword_1009A6EA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10081348C, &type metadata for PrimaryKeyResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009A6EA0);
  }

  return result;
}

unint64_t sub_1002567A8()
{
  unint64_t result = qword_1009A6EA8;
  if (!qword_1009A6EA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F938C, &type metadata for GetiCloudIdentifierPayload);
    atomic_store(result, (unint64_t *)&qword_1009A6EA8);
  }

  return result;
}

unint64_t sub_1002567EC()
{
  unint64_t result = qword_1009A6EB0;
  if (!qword_1009A6EB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100812188, &type metadata for GetPrimaryKeyPayload);
    atomic_store(result, (unint64_t *)&qword_1009A6EB0);
  }

  return result;
}

unint64_t sub_100256830()
{
  unint64_t result = qword_1009A6EB8;
  if (!qword_1009A6EB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080C060, &type metadata for VerifyFindMyNetworkIdResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009A6EB8);
  }

  return result;
}

unint64_t sub_100256874()
{
  unint64_t result = qword_1009A6EC0;
  if (!qword_1009A6EC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FDF48, &type metadata for VerifyFindMyNetworkIdPayload);
    atomic_store(result, (unint64_t *)&qword_1009A6EC0);
  }

  return result;
}

unint64_t sub_1002568B8()
{
  unint64_t result = qword_1009A6EC8;
  if (!qword_1009A6EC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100819AF0, &type metadata for EncryptedSerialNumberResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009A6EC8);
  }

  return result;
}

unint64_t sub_1002568FC()
{
  unint64_t result = qword_1009A6ED0;
  if (!qword_1009A6ED0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080B8E8, &type metadata for iCloudIdentifierResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009A6ED0);
  }

  return result;
}

unint64_t sub_100256940()
{
  unint64_t result = qword_1009A6ED8;
  if (!qword_1009A6ED8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100813464, &type metadata for PrimaryKeyResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009A6ED8);
  }

  return result;
}

unint64_t sub_100256984()
{
  unint64_t result = qword_1009A6EE0;
  if (!qword_1009A6EE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9364, &type metadata for GetiCloudIdentifierPayload);
    atomic_store(result, (unint64_t *)&qword_1009A6EE0);
  }

  return result;
}

unint64_t sub_1002569C8()
{
  unint64_t result = qword_1009A6EE8;
  if (!qword_1009A6EE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100812160, &type metadata for GetPrimaryKeyPayload);
    atomic_store(result, (unint64_t *)&qword_1009A6EE8);
  }

  return result;
}

uint64_t sub_100256A0C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t storeEnumTagSinglePayload for AccessoryOwnerCommand.AccessoryOwnerCommandError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100256A84 + 4 * byte_1007F7B65[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100256AB8 + 4 * byte_1007F7B60[v4]))();
}

uint64_t sub_100256AB8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100256AC0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100256AC8LL);
  }
  return result;
}

uint64_t sub_100256AD4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100256ADCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100256AE0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100256AE8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryOwnerCommand.AccessoryOwnerCommandError()
{
  return &type metadata for AccessoryOwnerCommand.AccessoryOwnerCommandError;
}

unint64_t sub_100256B08()
{
  unint64_t result = qword_1009A6EF0;
  if (!qword_1009A6EF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F7C3C, &type metadata for AccessoryOwnerCommand.AccessoryOwnerCommandError);
    atomic_store(result, (unint64_t *)&qword_1009A6EF0);
  }

  return result;
}

ValueMetadata *type metadata accessor for AirTagSoundStartPayload()
{
  return &type metadata for AirTagSoundStartPayload;
}

uint64_t sub_100256B5C(void *a1, unsigned int a2)
{
  uint64_t v5 = sub_100004AEC(&qword_1009A6F18);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 4];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1002574F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AirTagSoundSequence.CodingKeys,  &type metadata for AirTagSoundSequence.CodingKeys,  v11,  v9,  v10);
  char v17 = a2;
  char v16 = 0;
  unint64_t v12 = sub_100257580();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v17, &v16, v5, &type metadata for AirTagSoundAsset, v12);
  if (!v2)
  {
    v15[1] = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a2 >> 8);
    v15[0] = 2;
    KeyedEncodingContainer.encode(_:forKey:)(HIWORD(a2), v15, v5);
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100256CAC@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_100257214(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_100256CD4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10025787C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_100256D30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10025787C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100256D7C()
{
  uint64_t v1 = 1886351212LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6E6F697461727564LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x7465737361LL;
  }
}

uint64_t sub_100256DCC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100257228(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100256DF0(uint64_t a1)
{
  unint64_t v2 = sub_1002574F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100256E18(uint64_t a1)
{
  unint64_t v2 = sub_1002574F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100256E40@<X0>(void *a1@<X0>, _DWORD *a2@<X8>)
{
  uint64_t result = sub_100257364(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_100256E78(void *a1)
{
  return sub_100256B5C(a1, *v1);
}

uint64_t sub_100256E90(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100012ED8(a1, v4);
  dispatch thunk of BinaryEncoding.container()(v33, v4, v5);
  uint64_t v6 = *(void *)(a2 + 16);
  if (v6)
  {
    unint64_t v7 = sub_100041584();
    swift_bridgeObjectRetain(a2);
    uint64_t v8 = (_WORD *)(a2 + 34);
    do
    {
      uint64_t v28 = v8;
      uint64_t v29 = v6;
      char v9 = *((_BYTE *)v8 - 1);
      __int16 v30 = *v8;
      LOBYTE(v31) = *((_BYTE *)v8 - 2);
      uint64_t v10 = FixedWidthInteger.data.getter(&type metadata for UInt8, v7);
      unint64_t v12 = v11;
      uint64_t v31 = v10;
      unint64_t v32 = v11;
      uint64_t v13 = v34;
      uint64_t v36 = v35;
      sub_100037298((uint64_t)v33, v34);
      unint64_t v14 = sub_100042440();
      dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v31, &type metadata for Data, v14, v13, v36);
      sub_100016F9C(v10, v12);
      if (v2) {
        break;
      }
      LOBYTE(v31) = v9;
      unint64_t v15 = v7;
      uint64_t v16 = FixedWidthInteger.data.getter(&type metadata for UInt8, v7);
      unint64_t v18 = v17;
      uint64_t v31 = v16;
      unint64_t v32 = v17;
      uint64_t v19 = v34;
      uint64_t v20 = v35;
      sub_100037298((uint64_t)v33, v34);
      dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v31, &type metadata for Data, v14, v19, v20);
      sub_100016F9C(v16, v18);
      LOWORD(v31) = v30;
      unint64_t v21 = sub_1000F4D24();
      uint64_t v22 = FixedWidthInteger.data.getter(&type metadata for UInt16, v21);
      unint64_t v24 = v23;
      uint64_t v31 = v22;
      unint64_t v32 = v23;
      uint64_t v25 = v34;
      uint64_t v26 = v35;
      sub_100037298((uint64_t)v33, v34);
      dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v31, &type metadata for Data, v14, v25, v26);
      sub_100016F9C(v22, v24);
      uint64_t v8 = v28 + 2;
      --v6;
      unint64_t v7 = v15;
    }

    while (v29 != 1);
    swift_bridgeObjectRelease();
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
}

uint64_t sub_1002570B8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  *a2 = _swiftEmptyArrayStorage;
  return result;
}

uint64_t sub_1002570EC(void *a1)
{
  return sub_100256E90(a1, *v1);
}

unint64_t sub_100257104(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100257130();
  unint64_t result = sub_10015C244();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_100257130()
{
  unint64_t result = qword_1009A6EF8;
  if (!qword_1009A6EF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F7D88, &type metadata for AirTagSoundStartPayload);
    atomic_store(result, (unint64_t *)&qword_1009A6EF8);
  }

  return result;
}

_DWORD *initializeBufferWithCopyOfBuffer for VersionNumber(_DWORD *result, _DWORD *a2)
{
  *unint64_t result = *a2;
  return result;
}

uint64_t getEnumTagSinglePayload for AirTagSoundSequence(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFA && a1[4]) {
    return (*(_DWORD *)a1 + 250);
  }
  unsigned int v3 = *a1;
  BOOL v4 = v3 >= 7;
  int v5 = v3 - 7;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for AirTagSoundSequence(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xF9)
  {
    *(_DWORD *)unint64_t result = a2 - 250;
    if (a3 >= 0xFA) {
      *(_BYTE *)(result + 4) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFA) {
      *(_BYTE *)(result + 4) = 0;
    }
    if (a2) {
      *(_BYTE *)unint64_t result = a2 + 6;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AirTagSoundSequence()
{
  return &type metadata for AirTagSoundSequence;
}

uint64_t sub_100257214(uint64_t result)
{
  else {
    return result;
  }
}

uint64_t sub_100257228(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x7465737361LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v5 = 0xE500000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7465737361LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 1886351212 && a2 == 0xE400000000000000LL)
  {
    unint64_t v7 = 0xE400000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1886351212LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x6E6F697461727564LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease(0xE800000000000000LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461727564LL, 0xE800000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_100257364(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009A6F00);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100012ED8(a1, v7);
  unint64_t v9 = sub_1002574F8();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AirTagSoundSequence.CodingKeys,  &type metadata for AirTagSoundSequence.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  char v18 = 0;
  unint64_t v10 = sub_10025753C();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v19,  &type metadata for AirTagSoundAsset,  &v18,  v3,  &type metadata for AirTagSoundAsset,  v10);
  unsigned int v11 = v19;
  char v17 = 1;
  unsigned __int8 v12 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v3);
  char v16 = 2;
  int v13 = KeyedDecodingContainer.decode(_:forKey:)(&v16, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return (v12 << 8) | (v13 << 16) | v11;
}

unint64_t sub_1002574F8()
{
  unint64_t result = qword_1009A6F08;
  if (!qword_1009A6F08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F802C, &type metadata for AirTagSoundSequence.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A6F08);
  }

  return result;
}

unint64_t sub_10025753C()
{
  unint64_t result = qword_1009A6F10;
  if (!qword_1009A6F10)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F8004, &type metadata for AirTagSoundAsset);
    atomic_store(result, (unint64_t *)&qword_1009A6F10);
  }

  return result;
}

unint64_t sub_100257580()
{
  unint64_t result = qword_1009A6F20;
  if (!qword_1009A6F20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F7FDC, &type metadata for AirTagSoundAsset);
    atomic_store(result, (unint64_t *)&qword_1009A6F20);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for AirTagSoundSequence.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100257610 + 4 * byte_1007F7D55[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100257644 + 4 * asc_1007F7D50[v4]))();
}

uint64_t sub_100257644(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10025764C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100257654LL);
  }
  return result;
}

uint64_t sub_100257660(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100257668LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10025766C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100257674(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirTagSoundSequence.CodingKeys()
{
  return &type metadata for AirTagSoundSequence.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AirTagSoundAsset(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_1002576DC + 4 * byte_1007F7D5F[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100257710 + 4 * byte_1007F7D5A[v4]))();
}

uint64_t sub_100257710(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100257718(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100257720LL);
  }
  return result;
}

uint64_t sub_10025772C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100257734LL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_100257738(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100257740(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirTagSoundAsset()
{
  return &type metadata for AirTagSoundAsset;
}

unint64_t sub_100257760()
{
  unint64_t result = qword_1009A6F28;
  if (!qword_1009A6F28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F7EFC, &type metadata for AirTagSoundAsset);
    atomic_store(result, (unint64_t *)&qword_1009A6F28);
  }

  return result;
}

unint64_t sub_1002577A8()
{
  unint64_t result = qword_1009A6F30;
  if (!qword_1009A6F30)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F7FB4, &type metadata for AirTagSoundSequence.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A6F30);
  }

  return result;
}

unint64_t sub_1002577F0()
{
  unint64_t result = qword_1009A6F38;
  if (!qword_1009A6F38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F7F24, &type metadata for AirTagSoundSequence.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A6F38);
  }

  return result;
}

unint64_t sub_100257838()
{
  unint64_t result = qword_1009A6F40;
  if (!qword_1009A6F40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F7F4C, &type metadata for AirTagSoundSequence.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A6F40);
  }

  return result;
}

unint64_t sub_10025787C()
{
  unint64_t result = qword_1009A6F48;
  if (!qword_1009A6F48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F7E84, &type metadata for AirTagSoundAsset);
    atomic_store(result, (unint64_t *)&qword_1009A6F48);
  }

  return result;
}

uint64_t sub_1002578C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100265514();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10025791C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_100265514();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_100257968(void *a1, uint64_t a2, uint64_t a3, int a4, double a5)
{
  int v22 = a4;
  uint64_t v10 = sub_100004AEC(&qword_1009A7210);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  int v13 = (char *)&v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v15 = a1[4];
  sub_100012ED8(a1, v14);
  unint64_t v16 = sub_100264F34();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SecureLocationsEncodedInfo.CodingKeys,  &type metadata for SecureLocationsEncodedInfo.CodingKeys,  v16,  v14,  v15);
  v24[0] = a2;
  v24[1] = a3;
  char v23 = 0;
  unint64_t v17 = sub_1000170A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v24, &v23, v10, &type metadata for Data, v17);
  if (!v5)
  {
    char v18 = v22;
    LOBYTE(v24[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v24, v10, a5);
    LOBYTE(v24[0]) = v18;
    char v23 = 2;
    unint64_t v19 = sub_100264FBC();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)( v24,  &v23,  v10,  &type metadata for SecureLocationsPayloadFormat,  v19);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v11 + 8))(v13, v10);
}

uint64_t sub_100257AEC()
{
  uint64_t v1 = 7630182LL;
  if (*v0 == 1) {
    uint64_t v1 = 0x6E6F697461636F6CLL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6E6F697461636F6CLL;
  }
}

uint64_t sub_100257B34@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100262A54(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100257B58(uint64_t a1)
{
  unint64_t v2 = sub_100264F34();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100257B80(uint64_t a1)
{
  unint64_t v2 = sub_100264F34();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_100257BA8(void *a1@<X0>, uint64_t a2@<X8>)
{
  double v7 = sub_100262B9C(a1);
  if (!v2)
  {
    *(void *)a2 = v4;
    *(void *)(a2 + 8) = v5;
    *(double *)(a2 + swift_weakDestroy(v0 + 16) = v7;
    *(_BYTE *)(a2 + 24) = v6;
  }

uint64_t sub_100257BD8(void *a1)
{
  return sub_100257968(a1, *(void *)v1, *(void *)(v1 + 8), *(unsigned __int8 *)(v1 + 24), *(double *)(v1 + 16));
}

uint64_t sub_100257BF8(void *a1)
{
  int v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A70C8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_100263220();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SecureLocationsEncodedPayload.CodingKeys,  &type metadata for SecureLocationsEncodedPayload.CodingKeys,  v11,  v9,  v10);
  __int128 v22 = *v3;
  char v21 = 0;
  unint64_t v12 = sub_1000170A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, &type metadata for Data, v12);
  if (!v2)
  {
    uint64_t v13 = *((void *)v3 + 2);
    uint64_t v14 = *((unsigned __int8 *)v3 + 24);
    LOBYTE(v22) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v13, v14, &v22, v5);
    uint64_t v15 = *((void *)v3 + 4);
    uint64_t v16 = *((void *)v3 + 5);
    LOBYTE(v22) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v22, v5);
    *(void *)&__int128 v22 = *((void *)v3 + 6);
    char v21 = 3;
    uint64_t v17 = sub_100004AEC(&qword_1009A70B0);
    uint64_t v18 = sub_1001C8A7C( &qword_1009A70D0,  &qword_1009A70B0,  (void (*)(void))sub_1002632A8,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, v17, v18);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100257DBC()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_100257DE0 + 4 * byte_1007F8080[*v0]))( 25705LL,  0xE200000000000000LL);
}

uint64_t sub_100257DE0()
{
  return 0x6570795479656BLL;
}

uint64_t sub_100257DF8()
{
  return 1701080941LL;
}

uint64_t sub_100257E08()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_100257E28@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100262DA0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100257E4C(uint64_t a1)
{
  unint64_t v2 = sub_100263220();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100257E74(uint64_t a1)
{
  unint64_t v2 = sub_100263220();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_100257E9C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }

  return result;
}

uint64_t sub_100257EE8(void *a1)
{
  return sub_100257BF8(a1);
}

uint64_t sub_100257EFC(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v8 = sub_100004AEC(&qword_1009A7248);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v12);
  unint64_t v14 = sub_100265044();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SecureLocationsEncodedPushPayload.CodingKeys,  &type metadata for SecureLocationsEncodedPushPayload.CodingKeys,  v14,  v12,  v13);
  char v21 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a2, a3, &v21, v8);
  if (!v4)
  {
    uint64_t v19 = v18;
    char v20 = 1;
    uint64_t v15 = sub_100004AEC(&qword_1009A1EC8);
    uint64_t v16 = sub_1001C8A7C( (unint64_t *)&qword_1009A1ED0,  &qword_1009A1EC8,  (void (*)(void))sub_10012AB78,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v8, v15, v16);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_100258068()
{
  if (*v0) {
    return 0x6E6F697461636F6CLL;
  }
  else {
    return 0x54646E6553706174LL;
  }
}

uint64_t sub_1002580B4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1002633C4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002580D8(uint64_t a1)
{
  unint64_t v2 = sub_100265044();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100258100(uint64_t a1)
{
  unint64_t v2 = sub_100265044();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100258128@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1002634E4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }

  return result;
}

uint64_t sub_100258154(void *a1)
{
  return sub_100257EFC(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_100258170()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000A8AC(v2, qword_100A2A428);
  sub_10000A720(v0, (uint64_t)qword_100A2A428);
  type metadata accessor for BeaconStore(0LL);
  sub_1004E6208((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000013LL, 0x800000010085B020LL, 1LL);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_100258240(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A7240);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_100265000();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SecureLocationsCachedPayload.CodingKeys,  &type metadata for SecureLocationsCachedPayload.CodingKeys,  v11,  v9,  v10);
  char v20 = 0;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v20, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = v3 + *(int *)(type metadata accessor for SecureLocationsCachedPayload(0LL) + 20);
    char v19 = 1;
    uint64_t v15 = type metadata accessor for SecureLocation(0LL);
    uint64_t v16 = sub_100007864(&qword_1009A7108, type metadata accessor for SecureLocation, (uint64_t)&unk_10080CA78);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v19, v5, v15, v16);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002583C4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v27 = type metadata accessor for SecureLocation(0LL);
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = type metadata accessor for UUID(0LL);
  uint64_t v28 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  unint64_t v32 = (uint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v30 = sub_100004AEC(&qword_1009A7220);
  uint64_t v6 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for SecureLocationsCachedPayload(0LL);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a1[3];
  uint64_t v12 = a1[4];
  sub_100012ED8(a1, v13);
  unint64_t v14 = sub_100265000();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SecureLocationsCachedPayload.CodingKeys,  &type metadata for SecureLocationsCachedPayload.CodingKeys,  v14,  v13,  v12);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v24 = v6;
  uint64_t v25 = a1;
  uint64_t v15 = (uint64_t)v11;
  uint64_t v16 = v28;
  uint64_t v17 = v29;
  char v34 = 0;
  uint64_t v18 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v19 = v31;
  uint64_t v20 = v30;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v32, v31, &v34, v30, v31, v18);
  (*(void (**)(uint64_t, void *, uint64_t))(v16 + 32))(v15, v32, v19);
  char v33 = 1;
  uint64_t v21 = sub_100007864(&qword_1009A7100, type metadata accessor for SecureLocation, (uint64_t)&unk_10080CAA0);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v27, &v33, v20, v27, v21);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v8, v20);
  sub_10002218C((uint64_t)v17, v15 + *(int *)(v9 + 20), type metadata accessor for SecureLocation);
  sub_10001DC4C(v15, v26, type metadata accessor for SecureLocationsCachedPayload);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
  return sub_100018C68(v15, type metadata accessor for SecureLocationsCachedPayload);
}

uint64_t sub_1002586B4()
{
  if (*v0) {
    return 0x6F4C657275636573LL;
  }
  else {
    return 0x696669746E656469LL;
  }
}

uint64_t sub_100258700@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100263690(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100258724(uint64_t a1)
{
  unint64_t v2 = sub_100265000();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10025874C(uint64_t a1)
{
  unint64_t v2 = sub_100265000();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_100258774()
{
  uint64_t v0 = type metadata accessor for UUID(0LL);
  uint64_t v1 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  sub_1005EFB94((uint64_t)v3);
  return Hasher._finalize()();
}

void sub_1002587FC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  sub_1005EFB94(a1);
}

Swift::Int sub_10025886C(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  sub_1005EFB94((uint64_t)v4);
  return Hasher._finalize()();
}

uint64_t sub_1002588F0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1002583C4(a1, a2);
}

uint64_t sub_100258904(void *a1)
{
  return sub_100258240(a1);
}

uint64_t sub_100258918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static UUID.== infix(_:_:)(a1, a2) & 1) != 0) {
    return sub_1005F08B4((double *)(a1 + *(int *)(a3 + 20)), a2 + *(int *)(a3 + 20));
  }
  else {
    return 0LL;
  }
}

void sub_10025896C(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X2>, int a4@<W3>, uint64_t a5@<X8>)
{
  int v147 = a4;
  id v155 = a3;
  uint64_t v158 = a5;
  uint64_t v151 = type metadata accessor for HashAlgorithm(0LL);
  uint64_t v150 = *(void *)(v151 - 8);
  __chkstk_darwin(v151);
  uint64_t v149 = (char *)&v142 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009A7110);
  __chkstk_darwin(v8);
  uint64_t v146 = (uint64_t)&v142 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SecureLocation(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  NSString v144 = (char *)&v142 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v143 = (uint64_t)&v142 - v14;
  __chkstk_darwin(v13);
  uint64_t v145 = (uint64_t)&v142 - v15;
  uint64_t v16 = sub_100004AEC(&qword_1009A7128);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v142 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v153 = type metadata accessor for SecureLocationsCachedSharedKey(0LL);
  uint64_t v19 = *(void *)(v153 - 8);
  uint64_t v20 = __chkstk_darwin(v153);
  BOOL v148 = (char *)&v142 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v152 = (uint64_t)&v142 - v22;
  uint64_t v23 = type metadata accessor for String.Encoding(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v142 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v27);
  uint64_t v29 = (char *)&v142 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = type metadata accessor for UUID(0LL);
  uint64_t v31 = *(void *)(v30 - 8);
  uint64_t v32 = __chkstk_darwin(v30);
  id v156 = (char *)&v142 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static String.Encoding.utf8.getter(v32);
  uint64_t v157 = a1;
  uint64_t v159 = a2;
  uint64_t v34 = String.data(using:allowLossyConversion:)(v26, 0LL, a1, a2);
  unint64_t v36 = v35;
  (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  if (v36 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v31 + 56))(v29, 1LL, 1LL, v30);
LABEL_4:
    sub_100015794((uint64_t)v29, &qword_10099D8A0);
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v38 = type metadata accessor for Logger(0LL);
    sub_10000A720(v38, (uint64_t)qword_100A2AE08);
    unint64_t v39 = v159;
    uint64_t v40 = swift_bridgeObjectRetain_n(v159, 2LL);
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v42 = static os_log_type_t.error.getter(v41);
    if (os_log_type_enabled(v41, v42))
    {
      BOOL v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v44 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v167 = v44;
      *(_DWORD *)BOOL v43 = 136315138;
      swift_bridgeObjectRetain(v39);
      *(void *)&__int128 v164 = sub_1003F11D4(v157, v39, (uint64_t *)&v167);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, (char *)&v164 + 8, v43 + 4, v43 + 12);
      swift_bridgeObjectRelease_n(v39, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v41, v42, "Unable to create stableUUID from findMyId %s", v43, 0xCu);
      swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1LL, -1LL);
      swift_slowDealloc(v43, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v39, 2LL);
    }

    uint64_t v45 = 0LL;
    uint64_t v46 = 0LL;
    uint64_t v47 = 0LL;
    char v48 = 0;
LABEL_10:
    uint64_t v49 = v158;
    goto LABEL_11;
  }

  *(void *)&__int128 v167 = v34;
  *((void *)&v167 + 1) = v36;
  unint64_t v37 = sub_100042F34();
  DataProtocol.stableUUID.getter(&type metadata for Data, v37);
  sub_1000182F0(v34, v36);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v31 + 56))(v29, 0LL, 1LL, v30);
  uint64_t v50 = (uint64_t)v156;
  (*(void (**)(char *, char *, uint64_t))(v31 + 32))(v156, v29, v30);
  if ([v155 subscriptionMode] == (id)4)
  {
    sub_10058A05C(&v162);
    sub_100015750((uint64_t)&v162, (uint64_t)&v164, &qword_1009A6630);
    if (*((void *)&v165 + 1) >> 60 == 15LL)
    {
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v50, v30);
      uint64_t v46 = v159;
      swift_bridgeObjectRetain(v159);
      char v48 = 4;
      uint64_t v47 = _swiftEmptyArrayStorage;
      uint64_t v49 = v158;
      uint64_t v45 = v157;
      goto LABEL_11;
    }

    __int128 v167 = v164;
    __int128 v168 = v165;
    __int128 v169 = v166;
    uint64_t v61 = sub_100004AEC(&qword_10099D3B8);
    uint64_t v47 = (void *)swift_allocObject(v61, 48LL, 7LL);
    *((_OWORD *)v47 + 1) = xmmword_1007E67D0;
    __int128 v170 = v168;
    __int128 v62 = v168;
    sub_100018BF8((uint64_t)&v170);
    uint64_t v63 = sub_1004DFCF0(v62, *((uint64_t *)&v62 + 1));
    uint64_t v46 = v159;
    uint64_t v45 = v157;
    uint64_t v64 = v63;
    uint64_t v66 = v65;
    uint64_t v154 = v30;
    uint64_t v142 = v31;
    sub_100164F64((uint64_t)&v170);
    sub_1001782E4(v64, v66);
    uint64_t v67 = v160;
    unint64_t v68 = v161;
    uint64_t v69 = v150;
    uint64_t v70 = v149;
    uint64_t v71 = v151;
    (*(void (**)(char *, void, uint64_t))(v150 + 104))(v149, enum case for HashAlgorithm.sha256(_:), v151);
    uint64_t v72 = Data.hash(algorithm:)(v70, v67, v68);
    uint64_t v74 = v73;
    (*(void (**)(char *, uint64_t))(v69 + 8))(v70, v71);
    sub_100016F9C(v67, v68);
    v47[4] = v72;
    v47[5] = v74;
    sub_100246250((uint64_t)&v162);
    (*(void (**)(char *, uint64_t))(v142 + 8))(v156, v154);
    swift_bridgeObjectRetain(v46);
    char v48 = 4;
    goto LABEL_10;
  }

  sub_10050C9A8(v50, (uint64_t)v18);
  id v51 = (int *)v153;
  int v52 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48))(v18, 1LL, v153);
  NSString v53 = &off_10099B000;
  if (v52 == 1)
  {
    sub_100015794((uint64_t)v18, &qword_1009A7128);
    uint64_t v54 = (uint64_t)v148;
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 16))(v148, v50, v30);
    uint64_t v55 = v54 + v51[11];
    uint64_t v56 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56LL))(v55, 1LL, 1LL, v56);
    id v57 = (void *)(v54 + v51[5]);
    uint64_t v45 = v157;
    uint64_t v46 = v159;
    *id v57 = v157;
    v57[1] = v46;
    *(_OWORD *)(v54 + v51[6]) = xmmword_1007E7660;
    *(_OWORD *)(v54 + v51[7]) = xmmword_1007E7660;
    os_log_type_t v58 = (void *)(v54 + v51[8]);
    *os_log_type_t v58 = 0LL;
    v58[1] = 0LL;
    v58[2] = 0LL;
    uint64_t v59 = (void *)(v54 + v51[9]);
    void *v59 = 0LL;
    v59[1] = 0LL;
    *(void *)(v54 + v51[10]) = 0LL;
    uint64_t v60 = swift_allocObject(&unk_10094BAA8, 32LL, 7LL);
    *(void *)(v60 + swift_weakDestroy(v0 + 16) = v45;
    *(void *)(v60 + 24) = v46;
    swift_bridgeObjectRetain_n(v46, 2LL);
    sub_1006B32BC(v54, (uint64_t)sub_100264294, v60);
    swift_release();
    uint64_t v49 = v158;
    if (qword_10099B850 == -1)
    {
LABEL_17:
      swift_retain();
      sub_1006BC188(v45, v46, 0);
      swift_release();
      sub_100018C68(v54, type metadata accessor for SecureLocationsCachedSharedKey);
      (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v50, v30);
      swift_bridgeObjectRetain(v46);
      char v48 = 0;
      uint64_t v47 = _swiftEmptyArrayStorage;
      goto LABEL_11;
    }

LABEL_58:
  id v117 = objc_msgSend(v155, "clientApp", v111, v142);
  uint64_t v118 = static String._unconditionallyBridgeFromObjectiveC(_:)(v117);
  uint64_t v120 = v119;

  if (v118 == 0xD000000000000015LL && v120 == 0x800000010085B0A0LL)
  {
    swift_bridgeObjectRelease();
    uint64_t v49 = v158;
    uint64_t v121 = v151;
  }

  else
  {
    char v122 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x800000010085B0A0LL, v118, v120, 0LL);
    swift_bridgeObjectRelease();
    uint64_t v49 = v158;
    uint64_t v121 = v151;
    if ((v122 & 1) == 0)
    {
      uint64_t v125 = sub_100004AEC(&qword_10099D3B8);
      uint64_t v47 = (void *)swift_allocObject(v125, 48LL, 7LL);
      *((_OWORD *)v47 + 1) = xmmword_1007E67D0;
      uint64_t v126 = v153;
      v47[4] = v121;
      v47[5] = v126;
      sub_100018C68(v54, type metadata accessor for SecureLocationsCachedSharedKey);
      (*(void (**)(char *, uint64_t))(v142 + 8))(v156, v30);
      swift_bridgeObjectRetain(v46);
      char v48 = 2;
      goto LABEL_11;
    }
  }

  uint64_t v123 = sub_100004AEC(&qword_10099D3B8);
  uint64_t v47 = (void *)swift_allocObject(v123, 48LL, 7LL);
  *((_OWORD *)v47 + 1) = xmmword_1007E67D0;
  uint64_t v124 = v153;
  v47[4] = v121;
  v47[5] = v124;
  sub_100018C68(v54, type metadata accessor for SecureLocationsCachedSharedKey);
  (*(void (**)(char *, uint64_t))(v142 + 8))(v156, v30);
  swift_bridgeObjectRetain(v46);
  char v48 = 3;
LABEL_11:
  *(void *)uint64_t v49 = v45;
  *(void *)(v49 + 8) = v46;
  *(void *)(v49 + swift_weakDestroy(v0 + 16) = v47;
  *(void *)(v49 + 24) = 0LL;
  *(_BYTE *)(v49 + 32) = v48;
}

    LODWORD(v52) = 0;
    NSString v53 = 1;
    goto LABEL_61;
  }

void sub_100259FA8(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v6 = type metadata accessor for SecureLocationsCachedSharedKey(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009A7130);
  __chkstk_darwin(v9);
  uint64_t v11 = (uint64_t *)((char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v11, &qword_1009A7130);
  if (swift_getEnumCaseMultiPayload(v11, v9) == 1)
  {
    uint64_t v12 = *v11;
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10000A720(v13, (uint64_t)qword_100A2AE08);
    swift_errorRetain(v12);
    uint64_t v14 = swift_errorRetain(v12);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v18 = swift_slowAlloc(32LL, -1LL);
      uint64_t v28 = v12;
      uint64_t v29 = v18;
      *(_DWORD *)uint64_t v17 = 136315138;
      swift_errorRetain(v12);
      uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v20 = String.init<A>(describing:)(&v28, v19);
      uint64_t v28 = sub_1003F11D4(v20, v21, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v12);
      swift_errorRelease(v12);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Failed to save new sharedKeyRecord %s", v17, 0xCu);
      swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);

      swift_errorRelease(v12);
    }

    else
    {
      swift_errorRelease(v12);
      swift_errorRelease(v12);
      swift_errorRelease(v12);
    }
  }

  else
  {
    sub_10002218C((uint64_t)v11, (uint64_t)v8, type metadata accessor for SecureLocationsCachedSharedKey);
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    sub_10000A720(v22, (uint64_t)qword_100A2AE08);
    uint64_t v23 = swift_bridgeObjectRetain_n(a3, 2LL);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v27 = swift_slowAlloc(32LL, -1LL);
      uint64_t v29 = v27;
      *(_DWORD *)uint64_t v26 = 136315138;
      swift_bridgeObjectRetain(a3);
      uint64_t v28 = sub_1003F11D4(a2, a3, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v28, &v29, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease_n(a3, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v24, v25, "Created new sharedKeyRecord awaiting keys for %s", v26, 0xCu);
      swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a3, 2LL);
    }

    sub_100018C68((uint64_t)v8, type metadata accessor for SecureLocationsCachedSharedKey);
  }

uint64_t sub_10025A3A4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v44 = a3;
  uint64_t v5 = sub_100004AEC(&qword_1009A7128);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = type metadata accessor for SecureLocationsCachedSharedKey(0LL);
  uint64_t v40 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v39 = (uint64_t)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for String.Encoding(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v39 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for UUID(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static String.Encoding.utf8.getter(v18);
  uint64_t v42 = a1;
  unint64_t v43 = a2;
  uint64_t v21 = String.data(using:allowLossyConversion:)(v12, 0LL, a1, a2);
  unint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  if (v23 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1LL, 1LL, v16);
LABEL_4:
    os_log_type_t v25 = &qword_10099D8A0;
    uint64_t v26 = (uint64_t)v15;
    goto LABEL_5;
  }

  v45[0] = v21;
  v45[1] = v23;
  unint64_t v24 = sub_100042F34();
  DataProtocol.stableUUID.getter(&type metadata for Data, v24);
  sub_1000182F0(v21, v23);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v15, 0LL, 1LL, v16);
  (*(void (**)(char *, char *, uint64_t))(v17 + 32))(v20, v15, v16);
  sub_10050C9A8((uint64_t)v20, (uint64_t)v7);
  (*(void (**)(char *, uint64_t))(v17 + 8))(v20, v16);
  uint64_t v37 = v41;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v40 + 48))(v7, 1LL, v41) != 1)
  {
    uint64_t v38 = v39;
    sub_10002218C((uint64_t)v7, v39, type metadata accessor for SecureLocationsCachedSharedKey);
    sub_10001581C(v38 + *(int *)(v37 + 44), v44, (uint64_t *)&unk_10099D720);
    return sub_100018C68(v38, type metadata accessor for SecureLocationsCachedSharedKey);
  }

  os_log_type_t v25 = &qword_1009A7128;
  uint64_t v26 = (uint64_t)v7;
LABEL_5:
  sub_100015794(v26, v25);
  unint64_t v28 = v43;
  uint64_t v27 = v44;
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v29 = type metadata accessor for Logger(0LL);
  sub_10000A720(v29, (uint64_t)qword_100A2AE08);
  swift_bridgeObjectRetain_n(v28, 2LL);
  uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v32 = static os_log_type_t.error.getter(v31);
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v34 = swift_slowAlloc(32LL, -1LL);
    v45[0] = v34;
    *(_DWORD *)uint64_t v33 = 136315138;
    swift_bridgeObjectRetain(v28);
    uint64_t v46 = sub_1003F11D4(v42, v28, v45);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v33 + 4, v33 + 12);
    swift_bridgeObjectRelease_n(v28, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v31,  v32,  "Unable to get SecureLocationsCachedSharedKey for findMyId %s",  v33,  0xCu);
    swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v33, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v28, 2LL);
  }

  uint64_t v35 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL))( v27,  1LL,  1LL,  v35);
}

void sub_10025A818(uint64_t a1, unint64_t a2, uint64_t a3)
{
  uint64_t v80 = a3;
  uint64_t v5 = type metadata accessor for DispatchTime(0LL);
  uint64_t v89 = *(void *)(v5 - 8);
  uint64_t v90 = v5;
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v94 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v95 = (char *)&v79 - v8;
  uint64_t v81 = sub_100004AEC(&qword_1009A7130);
  __chkstk_darwin(v81);
  uint64_t v82 = (uint64_t)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v87 = *(void *)(v10 - 8);
  uint64_t v88 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v86 = (char *)&v79 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v85 = (char *)&v79 - v13;
  uint64_t v14 = sub_100004AEC(&qword_1009A7128);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v79 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for SecureLocationsCachedSharedKey(0LL);
  uint64_t v91 = *(void *)(v17 - 8);
  uint64_t v92 = v17;
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v83 = (uint64_t)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v84 = (uint64_t)&v79 - v20;
  uint64_t v21 = type metadata accessor for String.Encoding(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  unint64_t v24 = (char *)&v79 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v79 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = type metadata accessor for UUID(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v96 = (char *)&v79 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static String.Encoding.utf8.getter(v30);
  uint64_t v97 = a1;
  uint64_t v32 = a1;
  unint64_t v33 = a2;
  uint64_t v34 = String.data(using:allowLossyConversion:)(v24, 0LL, v32, a2);
  unint64_t v36 = v35;
  (*(void (**)(char *, uint64_t))(v22 + 8))(v24, v21);
  if (v36 >> 60 == 15)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v29 + 56))(v27, 1LL, 1LL, v28);
LABEL_4:
    sub_100015794((uint64_t)v27, &qword_10099D8A0);
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v38 = type metadata accessor for Logger(0LL);
    sub_10000A720(v38, (uint64_t)qword_100A2AE08);
    uint64_t v39 = swift_bridgeObjectRetain_n(v33, 2LL);
    uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
    os_log_type_t v41 = static os_log_type_t.error.getter(v40);
    if (os_log_type_enabled(v40, v41))
    {
      uint64_t v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v43 = swift_slowAlloc(32LL, -1LL);
      v98[0] = v43;
      *(_DWORD *)uint64_t v42 = 136315138;
      swift_bridgeObjectRetain(v33);
      uint64_t v99 = sub_1003F11D4(v97, v33, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100, v42 + 4, v42 + 12);
      swift_bridgeObjectRelease_n(v33, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "Unable to create stableUUID from findMyId %s", v42, 0xCu);
      swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1LL, -1LL);
      swift_slowDealloc(v42, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v33, 2LL);
    }

    return;
  }

  v98[0] = v34;
  v98[1] = v36;
  unint64_t v37 = sub_100042F34();
  DataProtocol.stableUUID.getter(&type metadata for Data, v37);
  sub_1000182F0(v34, v36);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v27, 0LL, 1LL, v28);
  uint64_t v44 = v28;
  uint64_t v45 = (uint64_t)v96;
  (*(void (**)(char *, char *, uint64_t))(v29 + 32))(v96, v27, v28);
  uint64_t v46 = dispatch_group_create();
  dispatch_group_enter(v46);
  uint64_t v47 = *(void *)(v93 + 24);
  sub_10050C9A8(v45, (uint64_t)v16);
  uint64_t v48 = v92;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v91 + 48))(v16, 1LL, v92) == 1)
  {
    uint64_t v49 = sub_100015794((uint64_t)v16, &qword_1009A7128);
    uint64_t v50 = v89;
    uint64_t v51 = v90;
  }

  else
  {
    uint64_t v93 = v29;
    uint64_t v91 = v28;
    uint64_t v52 = v84;
    sub_10002218C((uint64_t)v16, v84, type metadata accessor for SecureLocationsCachedSharedKey);
    uint64_t v79 = v47;
    uint64_t v54 = v87;
    uint64_t v53 = v88;
    uint64_t v55 = v48;
    uint64_t v56 = *(void (**)(char *, uint64_t, uint64_t))(v87 + 16);
    id v57 = v85;
    uint64_t v58 = v80;
    v56(v85, v80, v88);
    v56(v86, v58, v53);
    uint64_t v59 = v83;
    sub_10001DC4C(v52, v83, type metadata accessor for SecureLocationsCachedSharedKey);
    uint64_t v60 = v59 + *(int *)(v55 + 44);
    uint64_t v61 = v46;
    swift_bridgeObjectRetain(v33);
    sub_100015794(v60, (uint64_t *)&unk_10099D720);
    v56((char *)v60, (uint64_t)v57, v53);
    uint64_t v62 = (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v54 + 56))(v60, 0LL, 1LL, v53);
    __chkstk_darwin(v62);
    *(&v79 - 2) = v63;
    *(&v79 - 1) = v59;
    OS_dispatch_queue.sync<A>(execute:)(sub_100264258, &v79 - 4, (char *)&type metadata for () + 8);
    sub_1004E696C(8u);
    uint64_t v64 = v82;
    sub_10001DC4C(v59, v82, type metadata accessor for SecureLocationsCachedSharedKey);
    swift_storeEnumTagMultiPayload(v64, v81, 0LL);
    unint64_t v65 = v33;
    uint64_t v66 = (uint64_t)v86;
    sub_10025B198(v64, v61, v97, v65, (uint64_t)v86);
    uint64_t v67 = v61;
    uint64_t v51 = v90;
    uint64_t v44 = v91;
    sub_100015794(v64, &qword_1009A7130);
    sub_100018C68(v59, type metadata accessor for SecureLocationsCachedSharedKey);
    swift_bridgeObjectRelease();

    uint64_t v68 = v88;
    uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v87 + 8);
    v69(v66, v88);
    v69((uint64_t)v85, v68);
    uint64_t v49 = sub_100018C68(v84, type metadata accessor for SecureLocationsCachedSharedKey);
    uint64_t v50 = v89;
    uint64_t v29 = v93;
  }

  uint64_t v70 = v94;
  static DispatchTime.now()(v49);
  uint64_t v71 = v95;
  + infix(_:_:)(v70, 5.0);
  uint64_t v72 = *(void (**)(char *, uint64_t))(v50 + 8);
  v72(v70, v51);
  uint64_t v73 = OS_dispatch_group.wait(timeout:)(v71) & 1;
  v72(v71, v51);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v73, 1LL) & 1) != 0)
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v74 = type metadata accessor for Logger(0LL);
    uint64_t v75 = sub_10000A720(v74, (uint64_t)qword_100A2AE08);
    unint64_t v76 = (os_log_s *)Logger.logObject.getter(v75);
    os_log_type_t v77 = static os_log_type_t.default.getter(v76);
    if (os_log_type_enabled(v76, v77))
    {
      uint64_t v78 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v78 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v76,  v77,  "Timed out trying to update last proactive subscribe time",  v78,  2u);
      swift_slowDealloc(v78, -1LL, -1LL);
    }

    (*(void (**)(char *, uint64_t))(v29 + 8))(v96, v44);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v96, v44);
  }

void sub_10025B198(uint64_t a1, dispatch_group_s *a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v38 = a3;
  dispatch_group_t v39 = a2;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for SecureLocationsCachedSharedKey(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v36 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009A7130);
  __chkstk_darwin(v15);
  uint64_t v17 = (uint64_t *)((char *)&v36 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v17, &qword_1009A7130);
  if (swift_getEnumCaseMultiPayload(v17, v15) == 1)
  {
    uint64_t v18 = *v17;
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    sub_10000A720(v19, (uint64_t)qword_100A2AE08);
    uint64_t v20 = swift_bridgeObjectRetain_n(a4, 2LL);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      uint64_t v41 = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      swift_bridgeObjectRetain(a4);
      uint64_t v40 = sub_1003F11D4(v38, a4, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease_n(a4, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "Error updating lastProactiveSubmissionTime for %s",  v23,  0xCu);
      swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(a4, 2LL);
    }

    swift_errorRelease(v18);
  }

  else
  {
    sub_10002218C((uint64_t)v17, (uint64_t)v14, type metadata accessor for SecureLocationsCachedSharedKey);
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    sub_10000A720(v25, (uint64_t)qword_100A2AE08);
    (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, a5, v8);
    uint64_t v26 = swift_bridgeObjectRetain_n(a4, 2LL);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.default.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = swift_slowAlloc(22LL, -1LL);
      unint64_t v37 = v14;
      uint64_t v30 = v29;
      uint64_t v31 = swift_slowAlloc(64LL, -1LL);
      uint64_t v41 = v31;
      *(_DWORD *)uint64_t v30 = 136315394;
      swift_bridgeObjectRetain(a4);
      uint64_t v40 = sub_1003F11D4(v38, a4, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v30 + 4, v30 + 12);
      swift_bridgeObjectRelease_n(a4, 3LL);
      *(_WORD *)(v30 + 12) = 2080;
      uint64_t v32 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter(v8, v32);
      uint64_t v40 = sub_1003F11D4(v33, v34, &v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v30 + 14, v30 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "Updated lastProactiveSubscriptionTime for %s to %s",  (uint8_t *)v30,  0x16u);
      swift_arrayDestroy(v31, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v30, -1LL, -1LL);

      uint64_t v35 = (uint64_t)v37;
    }

    else
    {

      (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      swift_bridgeObjectRelease_n(a4, 2LL);
      uint64_t v35 = (uint64_t)v14;
    }

    sub_100018C68(v35, type metadata accessor for SecureLocationsCachedSharedKey);
  }

  dispatch_group_leave(v39);
}

uint64_t sub_10025B650(uint64_t a1, unint64_t a2)
{
  uint64_t v74 = type metadata accessor for HashAlgorithm(0LL);
  uint64_t v73 = *(void *)(v74 - 8);
  __chkstk_darwin(v74);
  uint64_t v72 = (char *)&v71 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC(&qword_1009A7128);
  __chkstk_darwin(v5);
  uint64_t v78 = (uint64_t)&v71 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = type metadata accessor for SecureLocationsCachedSharedKey(0LL);
  uint64_t v76 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v75 = (uint64_t)&v71 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for String.Encoding(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v71 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v71 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v80 = (char *)&v71 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static String.Encoding.utf8.getter(v17);
  uint64_t v19 = a1;
  unint64_t v20 = a2;
  uint64_t v21 = String.data(using:allowLossyConversion:)(v11, 0LL, a1, a2);
  unint64_t v23 = v22;
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if (v23 >> 60 != 15)
  {
    *(void *)&__int128 v87 = v21;
    *((void *)&v87 + 1) = v23;
    unint64_t v25 = sub_100042F34();
    DataProtocol.stableUUID.getter(&type metadata for Data, v25);
    sub_1000182F0(v21, v23);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v14, 0LL, 1LL, v15);
    uint64_t v24 = v19;
    uint64_t v33 = v15;
    uint64_t v71 = v16;
    uint64_t v34 = (uint64_t)v80;
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v80, v14, v33);
    uint64_t v35 = *(void *)(v79 + 32);
    uint64_t v36 = sub_100004AEC(&qword_1009A34B0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100263FD0, v35, v36);
    unint64_t v37 = v20;
    if (*((void *)&v87 + 1))
    {
      if (v87 == __PAIR128__(v20, v24))
      {
        swift_bridgeObjectRelease();
LABEL_14:
        sub_10058A05C(v83);
        sub_100015750((uint64_t)v83, (uint64_t)&v84, &qword_1009A6630);
        if (*((void *)&v85 + 1) >> 60 == 15LL)
        {
          (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v34, v33);
          swift_bridgeObjectRetain(v20);
          return v24;
        }

        __int128 v87 = v84;
        __int128 v88 = v85;
        __int128 v89 = v86;
        uint64_t v50 = sub_100004AEC(&qword_10099D3B8);
        uint64_t v51 = swift_allocObject(v50, 48LL, 7LL);
        *(_OWORD *)(v51 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
        __int128 v90 = v88;
        __int128 v52 = v88;
        sub_100018BF8((uint64_t)&v90);
        uint64_t v53 = sub_1004DFCF0(v52, *((uint64_t *)&v52 + 1));
        uint64_t v55 = v54;
        uint64_t v79 = v33;
        sub_100164F64((uint64_t)&v90);
        sub_1001782E4(v53, v55);
        uint64_t v56 = v81;
        unint64_t v57 = v82;
        uint64_t v58 = v73;
        uint64_t v59 = v72;
        uint64_t v60 = v74;
        (*(void (**)(char *, void, uint64_t))(v73 + 104))(v72, enum case for HashAlgorithm.sha256(_:), v74);
        uint64_t v61 = Data.hash(algorithm:)(v59, v56, v57);
        uint64_t v63 = v62;
        (*(void (**)(char *, uint64_t))(v58 + 8))(v59, v60);
        sub_100016F9C(v56, v57);
        *(void *)(v51 + 32) = v61;
        *(void *)(v51 + 40) = v63;
        sub_100246250((uint64_t)v83);
        (*(void (**)(char *, uint64_t))(v71 + 8))(v80, v79);
LABEL_33:
        swift_bridgeObjectRetain(v37);
        return v24;
      }

      char v38 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v20, v87, *((void *)&v87 + 1), 0LL);
      swift_bridgeObjectRelease();
      if ((v38 & 1) != 0) {
        goto LABEL_14;
      }
    }

    uint64_t v39 = v78;
    sub_10050C9A8(v34, v78);
    uint64_t v40 = v77;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v39, 1LL, v77) == 1)
    {
      sub_100015794(v39, &qword_1009A7128);
    }

    else
    {
      uint64_t v41 = v75;
      sub_10002218C(v39, v75, type metadata accessor for SecureLocationsCachedSharedKey);
      uint64_t v42 = v41 + *(int *)(v40 + 28);
      unint64_t v43 = *(void *)(v42 + 8);
      if (v43 >> 60 != 15)
      {
        uint64_t v65 = *(void *)v42;
        sub_10001736C(*(void *)v42, *(void *)(v42 + 8));
        sub_10001736C(v65, v43);
        uint64_t v66 = sub_1004C4FBC(0LL, 1LL, 1, _swiftEmptyArrayStorage);
        unint64_t v68 = v66[2];
        unint64_t v67 = v66[3];
        if (v68 >= v67 >> 1) {
          uint64_t v66 = sub_1004C4FBC((void *)(v67 > 1), v68 + 1, 1, v66);
        }
        uint64_t v64 = v71;
        v66[2] = v68 + 1;
        uint64_t v69 = &v66[2 * v68];
        v69[4] = v65;
        v69[5] = v43;
        sub_1000182F0(v65, v43);
        sub_100018C68(v41, type metadata accessor for SecureLocationsCachedSharedKey);
        uint64_t v34 = (uint64_t)v80;
        goto LABEL_32;
      }

      sub_100018C68(v41, type metadata accessor for SecureLocationsCachedSharedKey);
    }

    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v44 = type metadata accessor for Logger(0LL);
    sub_10000A720(v44, (uint64_t)qword_100A2AE08);
    swift_bridgeObjectRetain_n(v20, 2LL);
    uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v47 = static os_log_type_t.default.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = swift_slowAlloc(22LL, -1LL);
      uint64_t v49 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v87 = v49;
      *(_DWORD *)uint64_t v48 = 141558275;
      *(void *)&__int128 v84 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, (char *)&v84 + 8, v48 + 4, v48 + 12);
      *(_WORD *)(v48 + 12) = 2081;
      swift_bridgeObjectRetain(v37);
      *(void *)&__int128 v84 = sub_1003F11D4(v24, v37, (uint64_t *)&v87);
      uint64_t v34 = (uint64_t)v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, (char *)&v84 + 8, v48 + 14, v48 + 22);
      swift_bridgeObjectRelease_n(v37, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v46,  v47,  "Unsubscribe: Cannot find shared key record or locationId. Looks like we didn't receive keys for %{private,mask.hash}s",  (uint8_t *)v48,  0x16u);
      swift_arrayDestroy(v49, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1LL, -1LL);
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v37, 2LL);
    }

    uint64_t v64 = v71;
    if (qword_10099B850 != -1) {
      swift_once(&qword_10099B850, sub_1006BAC84);
    }
    swift_retain();
    sub_1006BC188(v24, v37, 0);
    swift_release();
LABEL_32:
    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v34, v33);
    goto LABEL_33;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v14, 1LL, 1LL, v15);
  uint64_t v24 = v19;
LABEL_4:
  sub_100015794((uint64_t)v14, &qword_10099D8A0);
  unint64_t v26 = v20;
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v27 = type metadata accessor for Logger(0LL);
  sub_10000A720(v27, (uint64_t)qword_100A2AE08);
  swift_bridgeObjectRetain_n(v20, 2LL);
  uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
  os_log_type_t v30 = static os_log_type_t.error.getter(v29);
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v32 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 v87 = v32;
    *(_DWORD *)uint64_t v31 = 136315138;
    swift_bridgeObjectRetain(v26);
    *(void *)&__int128 v84 = sub_1003F11D4(v24, v26, (uint64_t *)&v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, (char *)&v84 + 8, v31 + 4, v31 + 12);
    swift_bridgeObjectRelease_n(v26, 3LL);
    _os_log_impl((void *)&_mh_execute_header, v29, v30, "Unable to create stableUUID from findMyId %s", v31, 0xCu);
    swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v31, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v26, 2LL);
  }

  return 0LL;
}

uint64_t sub_10025C0EC(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v25 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v24[1] = *(void *)(v5 + 16);
  uint64_t v17 = swift_allocObject(&unk_10094BA08, 56LL, 7LL);
  *(void *)(v17 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v17 + 24) = v5;
  *(_BYTE *)(v17 + 32) = a2;
  *(void *)(v17 + 40) = a3;
  *(void *)(v17 + 48) = a4;
  aBlock[4] = sub_100264108;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10094BA20;
  uint64_t v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a1);
  swift_retain();
  uint64_t v19 = swift_retain();
  static DispatchQoS.unspecified.getter(v19);
  unint64_t v26 = _swiftEmptyArrayStorage;
  uint64_t v20 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  unint64_t v22 = sub_100012FF8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v21, v22, v10, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v16, v12, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  return swift_release();
}

uint64_t sub_10025C2EC(uint64_t a1, uint64_t a2, int a3, void (*a4)(__n128), uint64_t a5)
{
  uint64_t v165 = a5;
  __int128 v166 = a4;
  uint64_t v197 = a2;
  uint64_t v190 = type metadata accessor for DispatchTime(0LL);
  uint64_t v189 = *(void *)(v190 - 8);
  uint64_t v7 = __chkstk_darwin(v190);
  unint64_t v188 = (char *)v155 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  unint64_t v187 = (char *)v155 - v9;
  uint64_t v198 = type metadata accessor for SecureLocationsCachedPayload(0LL);
  uint64_t v196 = *(void *)(v198 - 8);
  uint64_t v10 = __chkstk_darwin(v198);
  uint64_t v186 = (char *)v155 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v155 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v158 = (uint64_t)v155 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v173 = (uint64_t)v155 - v18;
  __chkstk_darwin(v17);
  uint64_t v204 = (uint64_t)v155 - v19;
  uint64_t v20 = type metadata accessor for UUID(0LL);
  uint64_t v202 = *(void *)(v20 - 8);
  uint64_t v203 = v20;
  __chkstk_darwin(v20);
  unint64_t v201 = (char *)v155 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_100004AEC(&qword_1009A7110);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v25 = (char *)v155 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v177 = (uint64_t)v155 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  os_log_type_t v30 = (char *)v155 - v29;
  __chkstk_darwin(v28);
  uint64_t v207 = (uint64_t)v155 - v31;
  uint64_t v179 = type metadata accessor for SecureLocation(0LL);
  uint64_t v32 = *(void *)(v179 - 8);
  uint64_t v33 = *(void *)(v32 + 64);
  uint64_t v34 = __chkstk_darwin(v179);
  uint64_t v35 = (char *)v155 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v167 = (uint64_t)v155 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v192 = (uint64_t)v155 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v176 = (uint64_t)v155 - v41;
  __chkstk_darwin(v40);
  uint64_t v200 = (char *)v155 - v42;
  uint64_t v43 = swift_allocObject(&unk_10094B940, 24LL, 7LL);
  uint64_t v193 = v43;
  *(void *)(v43 + swift_weakDestroy(v0 + 16) = _swiftEmptyArrayStorage;
  uint64_t v171 = (unint64_t *)(v43 + 16);
  uint64_t v44 = swift_allocObject(&unk_10094BA58, 24LL, 7LL);
  uint64_t v45 = v44;
  *(void *)(v44 + swift_weakDestroy(v0 + 16) = 0LL;
  uint64_t v157 = v44 + 16;
  uint64_t v46 = *(void *)(a1 + 16);
  if (v46)
  {
    __int128 v164 = v25;
    uint64_t v191 = v44;
    uint64_t v47 = *(unsigned __int8 *)(v32 + 80);
    uint64_t v156 = (v47 + 32) & ~v47;
    uint64_t v48 = a1 + v156;
    uint64_t v206 = *(void *)(v32 + 72);
    uint64_t v163 = &v211;
    int v175 = a3;
    int v162 = a3 & 1;
    unint64_t v161 = (char *)&v210 + 4;
    v155[0] = &v209;
    uint64_t v183 = v47 | 7;
    uint64_t v184 = (v47 + 24) & ~v47;
    unint64_t v182 = (v33 + v184 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v181 = (v182 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v180 = v181 + 8;
    v155[1] = a1;
    __n128 v49 = swift_bridgeObjectRetain(a1);
    uint64_t v170 = 0LL;
    v49.n128_u64[0] = 136315650LL;
    __n128 v160 = v49;
    uint64_t v159 = (char *)&type metadata for Any + 8;
    v49.n128_u64[0] = 136315138LL;
    __n128 v178 = v49;
    v185 = v14;
    uint64_t v50 = v204;
    uint64_t v51 = v200;
    uint64_t v194 = v30;
    unint64_t v195 = (char *)v155 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    while (1)
    {
      sub_10001DC4C(v48, (uint64_t)v51, type metadata accessor for SecureLocation);
      if (qword_10099B5E8 != -1) {
        swift_once(&qword_10099B5E8, sub_1005C66A4);
      }
      swift_retain();
      char v53 = sub_1005C7E64((uint64_t)v51);
      swift_release();
      if ((v53 & 1) != 0)
      {
        uint64_t v205 = v46;
        uint64_t v54 = String.utf8Data.getter(*v51, v51[1]);
        uint64_t v55 = (uint64_t)v51;
        unint64_t v57 = v56;
        uint64_t v210 = v54;
        unint64_t v211 = v56;
        unint64_t v58 = sub_100042F34();
        uint64_t v59 = (uint64_t)v201;
        DataProtocol.stableUUID.getter(&type metadata for Data, v58);
        sub_100016F9C(v54, v57);
        uint64_t v60 = v207;
        sub_10050C994(v59, v207);
        uint64_t v61 = (uint64_t)v194;
        (*(void (**)(uint64_t, uint64_t))(v202 + 8))(v59, v203);
        sub_10001581C(v60, v61, &qword_1009A7110);
        uint64_t v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v196 + 48);
        uint64_t v63 = v198;
        if (v62(v61, 1LL, v198) == 1)
        {
          uint64_t v199 = v48;
          sub_100015794(v61, &qword_1009A7110);
          uint64_t v51 = (void *)v55;
LABEL_17:
          uint64_t v77 = v192;
          sub_10001DC4C((uint64_t)v51, v192, type metadata accessor for SecureLocation);
          uint64_t v78 = v186;
          uint64_t v79 = &v186[*(int *)(v63 + 20)];
          sub_10001DC4C(v77, (uint64_t)v79, type metadata accessor for SecureLocation);
          uint64_t v80 = String.utf8Data.getter(*(void *)v79, *((void *)v79 + 1));
          uint64_t v81 = (uint64_t)v51;
          unint64_t v83 = v82;
          uint64_t v210 = v80;
          unint64_t v211 = v82;
          __int128 v84 = v201;
          DataProtocol.stableUUID.getter(&type metadata for Data, v58);
          sub_100016F9C(v80, v83);
          sub_100018C68(v77, type metadata accessor for SecureLocation);
          (*(void (**)(char *, char *, uint64_t))(v202 + 32))(v78, v84, v203);
          uint64_t v85 = (uint64_t)v78;
          uint64_t v86 = (uint64_t)v185;
          sub_10002218C(v85, (uint64_t)v185, type metadata accessor for SecureLocationsCachedPayload);
          __int128 v87 = dispatch_group_create();
          dispatch_group_enter(v87);
          sub_10001DC4C(v81, v77, type metadata accessor for SecureLocation);
          uint64_t v88 = swift_allocObject(&unk_10094BA80, v180, v183);
          *(void *)(v88 + swift_weakDestroy(v0 + 16) = v87;
          sub_10002218C(v77, v88 + v184, type metadata accessor for SecureLocation);
          *(void *)(v88 + v182) = v193;
          *(void *)(v88 + v181) = v191;
          swift_retain();
          __int128 v89 = v87;
          swift_retain();
          sub_1006B3564(v86, (uint64_t)sub_1002641F8, v88);
          uint64_t v90 = swift_release();
          uint64_t v91 = v188;
          static DispatchTime.now()(v90);
          uint64_t v92 = v187;
          + infix(_:_:)(v91, 10.0);
          uint64_t v93 = *(void (**)(char *, uint64_t))(v189 + 8);
          uint64_t v94 = v190;
          v93(v91, v190);
          uint64_t v95 = OS_dispatch_group.wait(timeout:)(v92) & 1;
          v93(v92, v94);
          if ((static DispatchTimeoutResult.== infix(_:_:)(v95, 1LL) & 1) != 0)
          {
            uint64_t v46 = v205;
            uint64_t v48 = v199;
            if (qword_10099B5E0 != -1) {
              swift_once(&qword_10099B5E0, sub_1005C6624);
            }
            uint64_t v96 = type metadata accessor for Logger(0LL);
            uint64_t v97 = sub_10000A720(v96, (uint64_t)qword_100A2AE08);
            __int128 v52 = (os_log_s *)Logger.logObject.getter(v97);
            os_log_type_t v98 = static os_log_type_t.default.getter(v52);
            BOOL v99 = os_log_type_enabled(v52, v98);
            uint64_t v51 = v200;
            if (v99)
            {
              uint64_t v100 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
              *(_WORD *)uint64_t v100 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v52,  v98,  "saveLocation: timed out waiting to save securelocation record",  v100,  2u);
              swift_slowDealloc(v100, -1LL, -1LL);
            }

            uint64_t v35 = v195;
          }

          else
          {
            __int128 v52 = (os_log_s *)v89;
            uint64_t v35 = v195;
            uint64_t v48 = v199;
            uint64_t v51 = v200;
            uint64_t v46 = v205;
          }

          sub_100018C68(v86, type metadata accessor for SecureLocationsCachedPayload);
          sub_100015794(v207, &qword_1009A7110);
          sub_100018C68((uint64_t)v51, type metadata accessor for SecureLocation);
          uint64_t v50 = v204;
          goto LABEL_5;
        }

        uint64_t v75 = v204;
        sub_10002218C(v61, v204, type metadata accessor for SecureLocationsCachedPayload);
        uint64_t v76 = *(int *)(v179 + 52);
        uint64_t v199 = v75 + *(int *)(v63 + 20);
        uint64_t v51 = (void *)v55;
        if ((static Date.< infix(_:_:)(v199 + v76, v55 + v76) & 1) != 0)
        {
          uint64_t v199 = v48;
          sub_100018C68(v75, type metadata accessor for SecureLocationsCachedPayload);
          goto LABEL_17;
        }

        if (qword_10099B5E0 != -1) {
          swift_once(&qword_10099B5E0, sub_1005C6624);
        }
        uint64_t v102 = type metadata accessor for Logger(0LL);
        uint64_t v103 = sub_10000A720(v102, (uint64_t)qword_100A2AE08);
        uint64_t v104 = v177;
        sub_10001581C(v207, v177, &qword_1009A7110);
        uint64_t v105 = v176;
        uint64_t v106 = sub_10001DC4C(v55, v176, type metadata accessor for SecureLocation);
        uint64_t v172 = (uint8_t *)v103;
        uint64_t v107 = (os_log_s *)Logger.logObject.getter(v106);
        LODWORD(v174) = static os_log_type_t.default.getter(v107);
        BOOL v108 = os_log_type_enabled(v107, (os_log_type_t)v174);
        uint64_t v35 = v195;
        uint64_t v46 = v205;
        if (v108)
        {
          os_log_t v169 = v107;
          uint64_t v109 = swift_slowAlloc(28LL, -1LL);
          uint64_t v168 = swift_slowAlloc(64LL, -1LL);
          uint64_t v208 = v168;
          *(_DWORD *)uint64_t v109 = v160.n128_u32[0];
          uint64_t v110 = v104;
          uint64_t v111 = (uint64_t)v164;
          sub_10001581C(v110, (uint64_t)v164, &qword_1009A7110);
          uint64_t v112 = v198;
          if (v62(v111, 1LL, v198) == 1)
          {
            sub_100015794(v111, &qword_1009A7110);
            uint64_t v113 = 0LL;
            unint64_t v114 = 0LL;
          }

          else
          {
            uint64_t v115 = v111 + *(int *)(v112 + 20);
            uint64_t v116 = v192;
            sub_10001DC4C(v115, v192, type metadata accessor for SecureLocation);
            sub_100018C68(v111, type metadata accessor for SecureLocationsCachedPayload);
            uint64_t v113 = sub_1005EE53C();
            unint64_t v114 = v117;
            sub_100018C68(v116, type metadata accessor for SecureLocation);
          }

          uint64_t v210 = v113;
          unint64_t v211 = v114;
          uint64_t v118 = sub_100004AEC(&qword_1009A34B0);
          uint64_t v119 = String.init<A>(describing:)(&v210, v118);
          uint64_t v210 = sub_1003F11D4(v119, v120, &v208);
          uint64_t v121 = v163;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v210, v163, v109 + 4, v109 + 12);
          swift_bridgeObjectRelease();
          sub_100015794(v177, &qword_1009A7110);
          *(_WORD *)(v109 + 12) = 2080;
          uint64_t v122 = v176;
          uint64_t v123 = sub_1005EE53C();
          uint64_t v210 = sub_1003F11D4(v123, v124, &v208);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v210, v121, v109 + 14, v109 + 22);
          swift_bridgeObjectRelease();
          sub_100018C68(v122, type metadata accessor for SecureLocation);
          *(_WORD *)(v109 + 22) = 1024;
          LODWORD(v210) = v162;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v210, v161, v109 + 24, v109 + 28);
          os_log_t v125 = v169;
          _os_log_impl( (void *)&_mh_execute_header,  v169,  (os_log_type_t)v174,  "saveLocation: Not updating since existing location %s is same or newer than updated location %s returnOnlyPe rsisted %{BOOL}d",  (uint8_t *)v109,  0x1Cu);
          uint64_t v126 = v168;
          swift_arrayDestroy(v168, 2LL, v159);
          swift_slowDealloc(v126, -1LL, -1LL);
          swift_slowDealloc(v109, -1LL, -1LL);

          uint64_t v51 = v200;
        }

        else
        {
          sub_100015794(v104, &qword_1009A7110);
          sub_100018C68(v105, type metadata accessor for SecureLocation);
        }

        uint64_t v127 = v173;
        sub_10001DC4C(v204, v173, type metadata accessor for SecureLocationsCachedPayload);
        if ((v175 & 1) != 0)
        {
          sub_100018C68(v127, type metadata accessor for SecureLocationsCachedPayload);
LABEL_44:
          uint64_t v50 = v204;
          uint64_t v146 = v204;
LABEL_45:
          sub_100018C68(v146, type metadata accessor for SecureLocationsCachedPayload);
          sub_100015794(v207, &qword_1009A7110);
          uint64_t v101 = (uint64_t)v51;
          goto LABEL_25;
        }

        uint64_t v128 = v127 + *(int *)(v198 + 20);
        swift_retain();
        LOBYTE(v128) = sub_1005C7E64(v128);
        swift_release();
        sub_100018C68(v127, type metadata accessor for SecureLocationsCachedPayload);
        if ((v128 & 1) == 0) {
          goto LABEL_44;
        }
        sub_10001DC4C(v199, v167, type metadata accessor for SecureLocation);
        uint64_t v129 = v171;
        swift_beginAccess(v171, &v210, 33LL, 0LL);
        unint64_t v130 = *v129;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v129);
        *uint64_t v129 = v130;
        uint64_t v50 = v204;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0)
        {
          unint64_t v130 = sub_1004C6004(0, *(void *)(v130 + 16) + 1LL, 1, v130);
          *uint64_t v171 = v130;
        }

        unint64_t v133 = *(void *)(v130 + 16);
        unint64_t v132 = *(void *)(v130 + 24);
        if (v133 >= v132 >> 1)
        {
          unint64_t v130 = sub_1004C6004(v132 > 1, v133 + 1, 1, v130);
          *uint64_t v171 = v130;
        }

        *(void *)(v130 + swift_weakDestroy(v0 + 16) = v133 + 1;
        sub_10002218C(v167, v130 + v156 + v133 * v206, type metadata accessor for SecureLocation);
        uint64_t result = swift_endAccess(&v210);
        if (__OFADD__(v170++, 1LL))
        {
          __break(1u);
          return result;
        }

        uint64_t v136 = v158;
        uint64_t v137 = sub_10001DC4C(v50, v158, type metadata accessor for SecureLocationsCachedPayload);
        uint64_t v138 = (void *)Logger.logObject.getter(v137);
        os_log_type_t v139 = static os_log_type_t.debug.getter(v138);
        if (!os_log_type_enabled((os_log_t)v138, v139))
        {

          sub_100018C68(v136, type metadata accessor for SecureLocationsCachedPayload);
          uint64_t v146 = v50;
          goto LABEL_45;
        }

        uint64_t v140 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v174 = swift_slowAlloc(32LL, -1LL);
        uint64_t v210 = v174;
        *(_DWORD *)uint64_t v140 = v178.n128_u32[0];
        uint64_t v172 = v140 + 4;
        uint64_t v141 = v136 + *(int *)(v198 + 20);
        uint64_t v142 = v192;
        uint64_t v199 = v48;
        sub_10001DC4C(v141, v192, type metadata accessor for SecureLocation);
        uint64_t v143 = String.init<A>(describing:)(v142, v179);
        uint64_t v208 = sub_1003F11D4(v143, v144, &v210);
        uint64_t v51 = v200;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v208, v155[0], v172, v140 + 12);
        swift_bridgeObjectRelease();
        uint64_t v48 = v199;
        sub_100018C68(v136, type metadata accessor for SecureLocationsCachedPayload);
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v138,  v139,  "saveLocation: returnLatest cache has newer %s",  v140,  0xCu);
        uint64_t v145 = v174;
        swift_arrayDestroy(v174, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v145, -1LL, -1LL);
        swift_slowDealloc(v140, -1LL, -1LL);

        uint64_t v50 = v204;
        sub_100018C68(v204, type metadata accessor for SecureLocationsCachedPayload);
        sub_100015794(v207, &qword_1009A7110);
      }

      else
      {
        if (qword_10099B5E0 != -1) {
          swift_once(&qword_10099B5E0, sub_1005C6624);
        }
        uint64_t v64 = type metadata accessor for Logger(0LL);
        sub_10000A720(v64, (uint64_t)qword_100A2AE08);
        uint64_t v65 = sub_10001DC4C((uint64_t)v51, (uint64_t)v35, type metadata accessor for SecureLocation);
        uint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
        os_log_type_t v67 = static os_log_type_t.default.getter(v66);
        if (os_log_type_enabled(v66, v67))
        {
          uint64_t v68 = v50;
          uint64_t v69 = swift_slowAlloc(12LL, -1LL);
          uint64_t v70 = swift_slowAlloc(32LL, -1LL);
          uint64_t v210 = v70;
          *(_DWORD *)uint64_t v69 = v178.n128_u32[0];
          uint64_t v71 = sub_1005EE53C();
          *(void *)(v69 + 4) = sub_1003F11D4(v71, v72, &v210);
          swift_bridgeObjectRelease();
          sub_100018C68((uint64_t)v35, type metadata accessor for SecureLocation);
          _os_log_impl( (void *)&_mh_execute_header,  v66,  v67,  "saveLocation: not saving since location older than threshold %s",  (uint8_t *)v69,  0xCu);
          swift_arrayDestroy(v70, 1LL, (char *)&type metadata for Any + 8);
          uint64_t v73 = v70;
          uint64_t v51 = v200;
          swift_slowDealloc(v73, -1LL, -1LL);
          uint64_t v74 = v69;
          uint64_t v50 = v68;
          swift_slowDealloc(v74, -1LL, -1LL);
        }

        else
        {

          sub_100018C68((uint64_t)v35, type metadata accessor for SecureLocation);
        }
      }

      uint64_t v101 = (uint64_t)v51;
LABEL_25:
      sub_100018C68(v101, type metadata accessor for SecureLocation);
LABEL_5:
      v48 += v206;
      if (!--v46)
      {
        swift_bridgeObjectRelease();
        LOBYTE(a3) = v175;
        uint64_t v45 = v191;
        uint64_t v147 = v170;
        goto LABEL_49;
      }
    }
  }

  uint64_t v147 = 0LL;
LABEL_49:
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v148 = type metadata accessor for Logger(0LL);
  sub_10000A720(v148, (uint64_t)qword_100A2AE08);
  uint64_t v149 = swift_retain();
  uint64_t v150 = (os_log_s *)Logger.logObject.getter(v149);
  os_log_type_t v151 = static os_log_type_t.default.getter(v150);
  if (os_log_type_enabled(v150, v151))
  {
    uint64_t v152 = swift_slowAlloc(28LL, -1LL);
    *(_DWORD *)uint64_t v152 = 67109632;
    LODWORD(v210) = a3 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v210, (char *)&v210 + 4, v152 + 4, v152 + 8);
    *(_WORD *)(v152 + 8) = 2048;
    swift_beginAccess(v157, &v208, 0LL, 0LL);
    uint64_t v210 = *(void *)(v45 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v210, &v211, v152 + 10, v152 + 18);
    swift_release();
    *(_WORD *)(v152 + 18) = 2048;
    uint64_t v210 = v147;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v210, &v211, v152 + 20, v152 + 28);
    _os_log_impl( (void *)&_mh_execute_header,  v150,  v151,  "saveLocation: returnOnlyPersisted %{BOOL}d updated count %ld returnedFromCache %ld",  (uint8_t *)v152,  0x1Cu);
    swift_slowDealloc(v152, -1LL, -1LL);
  }

  else
  {

    swift_release();
  }

  uint64_t v153 = v166;
  swift_beginAccess(v171, &v210, 0LL, 0LL);
  __n128 v154 = swift_bridgeObjectRetain(*(void *)(v193 + 16));
  v153(v154);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

void sub_10025D5D4(uint64_t a1, dispatch_group_s *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v52 = a5;
  dispatch_group_t v55 = a2;
  uint64_t v8 = type metadata accessor for SecureLocation(0LL);
  uint64_t v54 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v53 = (uint64_t)&v50 - v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v50 - v14;
  uint64_t v16 = type metadata accessor for SecureLocationsCachedPayload(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100004AEC(&qword_1009A7120);
  __chkstk_darwin(v19);
  uint64_t v21 = (uint64_t *)((char *)&v50 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v21, &qword_1009A7120);
  if (swift_getEnumCaseMultiPayload(v21, v19) == 1)
  {
    uint64_t v22 = *v21;
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    sub_10000A720(v23, (uint64_t)qword_100A2AE08);
    sub_10001DC4C(a3, (uint64_t)v11, type metadata accessor for SecureLocation);
    swift_errorRetain(v22);
    uint64_t v24 = swift_errorRetain(v22);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc(22LL, -1LL);
      uint64_t v28 = swift_slowAlloc(64LL, -1LL);
      v56[0] = v28;
      *(_DWORD *)uint64_t v27 = 136315394;
      uint64_t v29 = *v11;
      unint64_t v30 = v11[1];
      swift_bridgeObjectRetain(v30);
      uint64_t v57 = sub_1003F11D4(v29, v30, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v11, type metadata accessor for SecureLocation);
      *(_WORD *)(v27 + 12) = 2080;
      uint64_t v57 = v22;
      swift_errorRetain(v22);
      uint64_t v31 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v32 = String.init<A>(describing:)(&v57, v31);
      uint64_t v57 = sub_1003F11D4(v32, v33, v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v27 + 14, v27 + 22);
      swift_bridgeObjectRelease();
      swift_errorRelease(v22);
      swift_errorRelease(v22);
      _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "saveLocation: Failed to update locations record for findMyId %s error %s",  (uint8_t *)v27,  0x16u);
      swift_arrayDestroy(v28, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);

      swift_errorRelease(v22);
    }

    else
    {
      swift_errorRelease(v22);
      sub_100018C68((uint64_t)v11, type metadata accessor for SecureLocation);
      swift_errorRelease(v22);
      swift_errorRelease(v22);
    }

    goto LABEL_18;
  }

  sub_10002218C((uint64_t)v21, (uint64_t)v18, type metadata accessor for SecureLocationsCachedPayload);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v34 = (unint64_t *)(a4 + 16);
  uint64_t v35 = type metadata accessor for Logger(0LL);
  sub_10000A720(v35, (uint64_t)qword_100A2AE08);
  uint64_t v36 = sub_10001DC4C(a3, (uint64_t)v15, type metadata accessor for SecureLocation);
  uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v38 = static os_log_type_t.default.getter(v37);
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v39 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v40 = swift_slowAlloc(32LL, -1LL);
    v56[0] = v40;
    *(_DWORD *)uint64_t v39 = 136315138;
    uint64_t v51 = v18;
    uint64_t v41 = sub_1005EE53C();
    uint64_t v57 = sub_1003F11D4(v41, v42, v56);
    uint64_t v18 = v51;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v39 + 4, v39 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v15, type metadata accessor for SecureLocation);
    _os_log_impl((void *)&_mh_execute_header, v37, v38, "saveLocation: Updated location to %s", v39, 0xCu);
    swift_arrayDestroy(v40, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_slowDealloc(v39, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v15, type metadata accessor for SecureLocation);
  }

  uint64_t v43 = (uint64_t)&v18[*(int *)(v16 + 20)];
  uint64_t v44 = v53;
  sub_10001DC4C(v43, v53, type metadata accessor for SecureLocation);
  swift_beginAccess(v34, v56, 33LL, 0LL);
  unint64_t v45 = *v34;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v34);
  *uint64_t v34 = v45;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v45 = sub_1004C6004(0, *(void *)(v45 + 16) + 1LL, 1, v45);
    *uint64_t v34 = v45;
  }

  uint64_t v47 = (void *)(v52 + 16);
  unint64_t v49 = *(void *)(v45 + 16);
  unint64_t v48 = *(void *)(v45 + 24);
  if (v49 >= v48 >> 1)
  {
    unint64_t v45 = sub_1004C6004(v48 > 1, v49 + 1, 1, v45);
    *uint64_t v34 = v45;
  }

  *(void *)(v45 + swift_weakDestroy(v0 + 16) = v49 + 1;
  sub_10002218C( v44,  v45 + ((*(unsigned __int8 *)(v54 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v54 + 80))
  + *(void *)(v54 + 72) * v49,
    type metadata accessor for SecureLocation);
  swift_endAccess(v56);
  sub_100018C68((uint64_t)v18, type metadata accessor for SecureLocationsCachedPayload);
  swift_beginAccess(v47, v56, 1LL, 0LL);
  if (!__OFADD__(*v47, 1LL))
  {
    ++*v47;
LABEL_18:
    dispatch_group_leave(v55);
    return;
  }

  __break(1u);
}

uint64_t sub_10025DC10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v25 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v24 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v24 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v24[1] = *(void *)(v5 + 16);
  uint64_t v17 = (void *)swift_allocObject(&unk_10094B9B8, 56LL, 7LL);
  v17[2] = a1;
  void v17[3] = a2;
  v17[4] = v5;
  v17[5] = a3;
  v17[6] = a4;
  aBlock[4] = sub_1002640C4;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10094B9D0;
  uint64_t v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a2);
  swift_retain();
  uint64_t v19 = swift_retain();
  static DispatchQoS.unspecified.getter(v19);
  os_log_type_t v26 = _swiftEmptyArrayStorage;
  uint64_t v20 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  unint64_t v22 = sub_100012FF8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v26, v21, v22, v10, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v16, v12, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v12, v10);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  return swift_release();
}

uint64_t sub_10025DE10(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  uint64_t v29 = a5;
  unint64_t v30 = a4;
  uint64_t v27 = a3;
  uint64_t v7 = sub_100004AEC(&qword_1009A7118);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A7110);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for SecureLocationsCachedPayload(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = type metadata accessor for UUID(0LL);
  uint64_t v17 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v19 = (char *)&v27 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = String.utf8Data.getter(a1, a2);
  unint64_t v22 = v21;
  uint64_t v31 = v20;
  unint64_t v32 = v21;
  unint64_t v23 = sub_100042F34();
  DataProtocol.stableUUID.getter(&type metadata for Data, v23);
  sub_100016F9C(v20, v22);
  sub_10050C994((uint64_t)v19, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) == 1)
  {
    sub_100015794((uint64_t)v12, &qword_1009A7110);
    uint64_t v24 = type metadata accessor for SecureLocation(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL))(v9, 1LL, 1LL, v24);
    v30(v9);
    sub_100015794((uint64_t)v9, &qword_1009A7118);
  }

  else
  {
    sub_10002218C((uint64_t)v12, (uint64_t)v16, type metadata accessor for SecureLocationsCachedPayload);
    sub_10001DC4C((uint64_t)&v16[*(int *)(v13 + 20)], (uint64_t)v9, type metadata accessor for SecureLocation);
    uint64_t v25 = type metadata accessor for SecureLocation(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56LL))(v9, 0LL, 1LL, v25);
    v30(v9);
    sub_100015794((uint64_t)v9, &qword_1009A7118);
    sub_100018C68((uint64_t)v16, type metadata accessor for SecureLocationsCachedPayload);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v17 + 8))(v19, v28);
}

uint64_t sub_10025E090(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchTime(0LL);
  uint64_t v39 = *(void *)(v3 - 8);
  uint64_t v40 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v35 - v7;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v38 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v36 = *(void *)(v12 - 8);
  uint64_t v37 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = swift_allocObject(&unk_10094B940, 24LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = _swiftEmptyArrayStorage;
  uint64_t v41 = v15 + 16;
  uint64_t v16 = dispatch_group_create();
  dispatch_group_enter(v16);
  uint64_t v35 = *(void *)(v1 + 16);
  uint64_t v17 = (void *)swift_allocObject(&unk_10094B968, 48LL, 7LL);
  v17[2] = a1;
  void v17[3] = v1;
  v17[4] = v15;
  v17[5] = v16;
  aBlock[4] = sub_100264084;
  aBlock[5] = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10094B980;
  uint64_t v18 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a1);
  swift_retain();
  swift_retain();
  uint64_t v19 = v16;
  static DispatchQoS.unspecified.getter(v19);
  unint64_t v42 = _swiftEmptyArrayStorage;
  uint64_t v20 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  unint64_t v22 = sub_100012FF8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v42, v21, v22, v9, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v11, v18);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v9);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v14, v37);
  uint64_t v23 = swift_release();
  static DispatchTime.now()(v23);
  + infix(_:_:)(v6, 10.0);
  uint64_t v24 = v40;
  uint64_t v25 = *(void (**)(char *, uint64_t))(v39 + 8);
  v25(v6, v40);
  uint64_t v26 = OS_dispatch_group.wait(timeout:)(v8) & 1;
  v25(v8, v24);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v26, 1LL) & 1) != 0)
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v27 = type metadata accessor for Logger(0LL);
    uint64_t v28 = sub_10000A720(v27, (uint64_t)qword_100A2AE08);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.default.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "getCachedLocations - timed out reading locations", v31, 2u);
      swift_slowDealloc(v31, -1LL, -1LL);
      unint64_t v32 = (os_log_s *)v19;
      uint64_t v19 = (dispatch_group_s *)v29;
    }

    else
    {
      unint64_t v32 = v29;
    }
  }

  swift_beginAccess(v41, aBlock, 0LL, 0LL);
  uint64_t v33 = *(void *)(v15 + 16);
  swift_bridgeObjectRetain(v33);
  swift_release();
  return v33;
}

void sub_10025E454(uint64_t a1, char *a2, uint64_t a3, dispatch_group_s *a4)
{
  uint64_t v7 = (unint64_t *)(a3 + 16);
  swift_retain();
  sub_1002628A0(a1, a2, v7);
  swift_release();
  dispatch_group_leave(a4);
}

uint64_t sub_10025E4B4(uint64_t *a1, char *a2, unint64_t *a3)
{
  unint64_t v49 = a3;
  uint64_t v52 = a2;
  uint64_t v4 = type metadata accessor for SecureLocation(0LL);
  uint64_t v50 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v51 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v48 = (uint64_t)&v47 - v7;
  uint64_t v8 = sub_100004AEC(&qword_1009A7110);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for SecureLocationsCachedPayload(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v47 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v53 = *(void *)(v15 - 8);
  uint64_t v54 = v15;
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v18 = a1[1];
  uint64_t v47 = *a1;
  uint64_t v19 = String.utf8Data.getter(v47, v18);
  unint64_t v21 = v20;
  v55[0] = v19;
  v55[1] = v20;
  unint64_t v22 = sub_100042F34();
  DataProtocol.stableUUID.getter(&type metadata for Data, v22);
  sub_100016F9C(v19, v21);
  uint64_t v52 = v17;
  sub_10050C994((uint64_t)v17, (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11) == 1)
  {
    sub_100015794((uint64_t)v10, &qword_1009A7110);
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    sub_10000A720(v23, (uint64_t)qword_100A2AE08);
    uint64_t v24 = swift_bridgeObjectRetain_n(v18, 2LL);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      v55[0] = v28;
      *(_DWORD *)uint64_t v27 = 136315138;
      swift_bridgeObjectRetain(v18);
      uint64_t v56 = sub_1003F11D4(v47, v18, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease_n(v18, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "getCachedLocations - no location found for %s", v27, 0xCu);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(v18, 2LL);
    }
  }

  else
  {
    sub_10002218C((uint64_t)v10, (uint64_t)v14, type metadata accessor for SecureLocationsCachedPayload);
    uint64_t v29 = (uint64_t)&v14[*(int *)(v11 + 20)];
    uint64_t v30 = v48;
    sub_10001DC4C(v29, v48, type metadata accessor for SecureLocation);
    uint64_t v31 = v49;
    swift_beginAccess(v49, v55, 33LL, 0LL);
    unint64_t v32 = *v31;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v31);
    *uint64_t v31 = v32;
    uint64_t v34 = (uint64_t)v14;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      unint64_t v32 = sub_1004C6004(0, *(void *)(v32 + 16) + 1LL, 1, v32);
      *uint64_t v31 = v32;
    }

    uint64_t v35 = (uint64_t)v51;
    unint64_t v37 = *(void *)(v32 + 16);
    unint64_t v36 = *(void *)(v32 + 24);
    if (v37 >= v36 >> 1)
    {
      unint64_t v32 = sub_1004C6004(v36 > 1, v37 + 1, 1, v32);
      *uint64_t v31 = v32;
    }

    *(void *)(v32 + swift_weakDestroy(v0 + 16) = v37 + 1;
    sub_10002218C( v30,  v32 + ((*(unsigned __int8 *)(v50 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v50 + 80))
    + *(void *)(v50 + 72) * v37,
      type metadata accessor for SecureLocation);
    swift_endAccess(v55);
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v38 = type metadata accessor for Logger(0LL);
    sub_10000A720(v38, (uint64_t)qword_100A2AE08);
    uint64_t v39 = sub_10001DC4C(v29, v35, type metadata accessor for SecureLocation);
    uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
    os_log_type_t v41 = static os_log_type_t.default.getter(v40);
    if (os_log_type_enabled(v40, v41))
    {
      unint64_t v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v43 = swift_slowAlloc(32LL, -1LL);
      v55[0] = v43;
      *(_DWORD *)unint64_t v42 = 136315138;
      uint64_t v44 = sub_1005EE53C();
      uint64_t v56 = sub_1003F11D4(v44, v45, v55);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v56, &v57, v42 + 4, v42 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68(v35, type metadata accessor for SecureLocation);
      _os_log_impl((void *)&_mh_execute_header, v40, v41, "getCachedLocations - %s", v42, 0xCu);
      swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1LL, -1LL);
      swift_slowDealloc(v42, -1LL, -1LL);
    }

    else
    {

      sub_100018C68(v35, type metadata accessor for SecureLocation);
    }

    sub_100018C68(v34, type metadata accessor for SecureLocationsCachedPayload);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v52, v54);
}

void *sub_10025EA78()
{
  uint64_t v17 = type metadata accessor for SecureLocationsCachedPayload(0LL);
  uint64_t v0 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v2 = (char *)&v15 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for SecureLocation(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_10057776C();
  int64_t v8 = v7[2];
  if (v8)
  {
    unint64_t v18 = _swiftEmptyArrayStorage;
    sub_100033078(0, v8, 0);
    uint64_t v9 = *(unsigned __int8 *)(v0 + 80);
    uint64_t v15 = v7;
    uint64_t v10 = (uint64_t)v7 + ((v9 + 32) & ~v9);
    uint64_t v16 = *(void *)(v0 + 72);
    uint64_t v11 = v18;
    do
    {
      sub_10001DC4C(v10, (uint64_t)v2, type metadata accessor for SecureLocationsCachedPayload);
      sub_10001DC4C((uint64_t)&v2[*(int *)(v17 + 20)], (uint64_t)v6, type metadata accessor for SecureLocation);
      sub_100018C68((uint64_t)v2, type metadata accessor for SecureLocationsCachedPayload);
      if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
      {
        sub_100033078(0, v11[2] + 1LL, 1);
        uint64_t v11 = v18;
      }

      unint64_t v13 = v11[2];
      unint64_t v12 = v11[3];
      if (v13 >= v12 >> 1)
      {
        sub_100033078(v12 > 1, v13 + 1, 1);
        uint64_t v11 = v18;
      }

      v11[2] = v13 + 1;
      sub_10002218C( (uint64_t)v6,  (uint64_t)v11 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
      + *(void *)(v4 + 72) * v13,
        type metadata accessor for SecureLocation);
      v10 += v16;
      --v8;
    }

    while (v8);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    return _swiftEmptyArrayStorage;
  }

  return v11;
}

uint64_t sub_10025EC74(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for SecureLocation(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  uint64_t v12 = sub_10000A720(v11, (uint64_t)qword_100A2AE08);
  unint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "createEncodedLocationInfo", v15, 2u);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  sub_10001DC4C(a1, (uint64_t)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL), type metadata accessor for SecureLocation);
  uint64_t v16 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v17 = (v16 + 40) & ~v16;
  unint64_t v18 = (void *)swift_allocObject(&unk_10094B918, v17 + v10, v16 | 7);
  v18[2] = a2;
  v18[3] = a3;
  v18[4] = v4;
  sub_10002218C( (uint64_t)&v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  (uint64_t)v18 + v17,  type metadata accessor for SecureLocation);
  swift_retain();
  swift_retain();
  sub_100585AC0();
  return swift_release();
}

uint64_t sub_10025EE20( uint64_t a1, uint64_t a2, uint64_t (*a3)(void *), uint64_t a4, unint64_t a5, uint64_t a6)
{
  uint64_t v97 = a6;
  unint64_t v101 = a5;
  uint64_t v104 = a4;
  sub_100015750(a1, (uint64_t)v107, &qword_1009A6630);
  uint64_t v9 = v107[0];
  unint64_t v10 = v107[1];
  uint64_t v11 = v107[2];
  unint64_t v12 = v107[3];
  uint64_t v13 = v107[4];
  unint64_t v14 = v107[5];
  *(void *)&__int128 v95 = type metadata accessor for HashAlgorithm(0LL);
  uint64_t v94 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v93 = (char *)&v89 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v98 = type metadata accessor for SecureLocation(0LL);
  __chkstk_darwin(v98);
  uint64_t v96 = (unint64_t *)((char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v100 = type metadata accessor for Date(0LL);
  uint64_t v99 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v103 = (char *)&v89 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v102 = a1;
  sub_100015750(a1, (uint64_t)&v108, &qword_1009A6630);
  if (*((void *)&v109 + 1) >> 60 == 15LL)
  {
    unint64_t v18 = a3;
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    sub_10000A720(v19, (uint64_t)qword_100A2AE08);
    swift_errorRetain(a2);
    uint64_t v20 = swift_errorRetain(a2);
    unint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v111 = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      *(void *)&__int128 v114 = a2;
      swift_errorRetain(a2);
      uint64_t v25 = sub_100004AEC(&qword_10099C678);
      uint64_t v26 = String.init<A>(describing:)(&v114, v25);
      *(void *)&__int128 v114 = sub_1003F11D4(v26, v27, (uint64_t *)&v111);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, (char *)&v114 + 8, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "No keys available for sharing location to followers. Error %s",  v23,  0xCu);
      swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    return v18(_swiftEmptyArrayStorage);
  }

  else
  {
    uint64_t v92 = (void (*)(uint64_t, __n128))a3;
    __int128 v111 = v108;
    __int128 v112 = v109;
    __int128 v113 = v110;
    uint64_t v28 = *(void *)(v101 + 32);
    sub_100018BE4(v9, v10);
    sub_10001736C(v11, v12);
    sub_100018BE4(v13, v14);
    uint64_t v29 = sub_100004AEC(&qword_1009A34B0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100263FD0, v28, v29);
    uint64_t v30 = *((void *)&v114 + 1);
    if (*((void *)&v114 + 1))
    {
      uint64_t v31 = v114;
      uint64_t v32 = type metadata accessor for JSONEncoder(0LL);
      swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
      uint64_t v33 = JSONEncoder.init()();
      sub_100630AB4();
      uint64_t v34 = v103;
      Date.init(timeIntervalSinceReferenceDate:)(v35);
      unint64_t v36 = v96;
      sub_10001DC4C(v97, (uint64_t)v96, type metadata accessor for SecureLocation);
      uint64_t v37 = v98;
      uint64_t v38 = (char *)v36 + *(int *)(v98 + 52);
      if ((static Date.> infix(_:_:)(v38, v34) & 1) != 0)
      {
        double v39 = Date.timeIntervalSince(_:)(v34);
        if (qword_10099B5E0 != -1) {
          swift_once(&qword_10099B5E0, sub_1005C6624);
        }
        uint64_t v40 = type metadata accessor for Logger(0LL);
        uint64_t v41 = sub_10000A720(v40, (uint64_t)qword_100A2AE08);
        unint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
        os_log_type_t v43 = static os_log_type_t.default.getter(v42);
        if (os_log_type_enabled(v42, v43))
        {
          uint64_t v44 = v33;
          unint64_t v45 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          *(_DWORD *)unint64_t v45 = 134349056;
          uint64_t v34 = v103;
          *(double *)&__int128 v114 = v39;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, (char *)&v114 + 8, v45 + 4, v45 + 12);
          _os_log_impl( (void *)&_mh_execute_header,  v42,  v43,  "SecureLocation: timestamp payload adjusted by %{public}f",  v45,  0xCu);
          uint64_t v46 = v45;
          uint64_t v33 = v44;
          uint64_t v37 = v98;
          swift_slowDealloc(v46, -1LL, -1LL);
        }

        (*(void (**)(char *, char *, uint64_t))(v99 + 24))(v38, v34, v100);
      }

      swift_bridgeObjectRelease();
      *unint64_t v36 = v31;
      v36[1] = v30;
      uint64_t v47 = sub_100007864(&qword_1009A7108, type metadata accessor for SecureLocation, (uint64_t)&unk_10080CA78);
      uint64_t v54 = dispatch thunk of JSONEncoder.encode<A>(_:)(v36, v37, v47);
      __int128 v114 = v112;
      __int128 v55 = v112;
      unint64_t v57 = v56;
      sub_100018BF8((uint64_t)&v114);
      uint64_t v58 = objc_autoreleasePoolPush();
      sub_1004DEA64(&v105);
      unint64_t v89 = v57;
      uint64_t v90 = *((void *)&v55 + 1);
      uint64_t v98 = v55;
      uint64_t v91 = v54;
      objc_autoreleasePoolPop(v58);
      sub_100164F64((uint64_t)&v114);
      uint64_t v59 = v105;
      unint64_t v101 = v106;
      if (qword_10099B5E0 != -1) {
        swift_once(&qword_10099B5E0, sub_1005C6624);
      }
      uint64_t v60 = type metadata accessor for Logger(0LL);
      uint64_t v61 = sub_10000A720(v60, (uint64_t)qword_100A2AE08);
      uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
      os_log_type_t v63 = static os_log_type_t.default.getter(v62);
      BOOL v64 = os_log_type_enabled(v62, v63);
      uint64_t v65 = v103;
      if (v64)
      {
        uint64_t v66 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v66 = 0;
        _os_log_impl((void *)&_mh_execute_header, v62, v63, "Successfully Encrypted locationData", v66, 2u);
        swift_slowDealloc(v66, -1LL, -1LL);
      }

      uint64_t v97 = v59;
      uint64_t v67 = sub_10001736C(v59, v101);
      uint64_t v68 = Date.epoch.getter(v67);
      sub_100018BF8((uint64_t)&v114);
      uint64_t v69 = sub_1004DFCF0(v98, v90);
      uint64_t v71 = v70;
      unint64_t v72 = v89;
      uint64_t v98 = v33;
      sub_100164F64((uint64_t)&v114);
      sub_1001782E4(v69, v71);
      double v73 = (double)v68;
      uint64_t v74 = v105;
      unint64_t v75 = v106;
      uint64_t v76 = v94;
      uint64_t v77 = v93;
      uint64_t v78 = v95;
      (*(void (**)(char *, void, void))(v94 + 104))(v93, enum case for HashAlgorithm.sha256(_:), v95);
      uint64_t v79 = Data.hash(algorithm:)(v77, v74, v75);
      unint64_t v81 = v80;
      (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v78);
      sub_100016F9C(v74, v75);
      uint64_t v82 = sub_100004AEC(&qword_10099D568);
      uint64_t v83 = swift_allocObject(v82, 64LL, 7LL);
      __int128 v95 = xmmword_1007E67D0;
      *(_OWORD *)(v83 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v84 = v97;
      unint64_t v85 = v101;
      *(void *)(v83 + 32) = v97;
      *(void *)(v83 + 40) = v85;
      *(double *)(v83 + 48) = v73;
      *(_BYTE *)(v83 + 56) = 0;
      uint64_t v86 = sub_100004AEC(&qword_1009A6210);
      uint64_t v87 = swift_allocObject(v86, 88LL, 7LL);
      *(_OWORD *)(v87 + swift_weakDestroy(v0 + 16) = v95;
      *(void *)(v87 + 32) = v79;
      *(void *)(v87 + 40) = v81;
      *(void *)(v87 + 48) = 0LL;
      *(_BYTE *)(v87 + 56) = 1;
      *(void *)(v87 + 64) = 0LL;
      *(void *)(v87 + 72) = 0LL;
      *(void *)(v87 + 80) = v83;
      sub_10001736C(v84, v85);
      sub_10001736C(v79, v81);
      __n128 v88 = swift_bridgeObjectRetain(v83);
      v92(v87, v88);
      swift_bridgeObjectRelease();
      sub_100016F9C(v91, v72);
      swift_release();
      sub_100246250(v102);
      sub_100016F9C(v79, v81);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100016F9C(v84, v85);
      sub_100016F9C(v84, v85);
      (*(void (**)(char *, uint64_t))(v99 + 8))(v65, v100);
      return sub_100018C68((uint64_t)v36, type metadata accessor for SecureLocation);
    }

    else
    {
      if (qword_10099B5E0 != -1) {
        swift_once(&qword_10099B5E0, sub_1005C6624);
      }
      uint64_t v49 = type metadata accessor for Logger(0LL);
      uint64_t v50 = sub_10000A720(v49, (uint64_t)qword_100A2AE08);
      uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
      os_log_type_t v52 = static os_log_type_t.default.getter(v51);
      if (os_log_type_enabled(v51, v52))
      {
        uint64_t v53 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v53 = 0;
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "Unable to get my personID. Can't encode location", v53, 2u);
        swift_slowDealloc(v53, -1LL, -1LL);
      }

      ((void (*)(void *))v92)(_swiftEmptyArrayStorage);
      return sub_100246250(v102);
    }
  }

void *sub_10025FA5C(uint64_t a1)
{
  uint64_t v108 = type metadata accessor for SecureLocation(0LL);
  uint64_t v106 = *(void *)(v108 - 8);
  uint64_t v3 = __chkstk_darwin(v108);
  uint64_t v107 = (uint64_t)&v97 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v6 = __chkstk_darwin(v5);
  __chkstk_darwin(v6);
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v110 = (uint64_t)&v97 - v7;
  uint64_t v104 = v9;
  uint64_t v102 = v8;
  uint64_t v112 = v1;
  uint64_t v121 = *(void *)(v1 + 32);
  uint64_t v122 = OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_decryptionKeyAccessQueue;
  unint64_t v101 = &v127;
  __n128 v12 = swift_bridgeObjectRetain(a1);
  uint64_t v13 = 0LL;
  __int128 v109 = _swiftEmptyArrayStorage;
  uint64_t v105 = a1;
  unint64_t v14 = (void *)(a1 + 80);
  v12.n128_u64[0] = 136315138LL;
  __n128 v115 = v12;
  __int128 v114 = (char *)&type metadata for Any + 8;
  while (1)
  {
    uint64_t v15 = *(v14 - 6);
    unint64_t v16 = *(v14 - 5);
    uint64_t v18 = *(v14 - 1);
    uint64_t v17 = (void *)*v14;
    __chkstk_darwin(v11);
    *(&v97 - 4) = v19;
    *(&v97 - 3) = (uint8_t *)v15;
    *(&v97 - 2) = (uint8_t *)v16;
    sub_10001736C(v15, v16);
    swift_bridgeObjectRetain(v18);
    os_log_t v125 = v17;
    swift_bridgeObjectRetain(v17);
    uint64_t v20 = sub_100004AEC(&qword_1009A70F8);
    OS_dispatch_queue.sync<A>(execute:)(sub_100263E98, &v97 - 6, v20);
    unint64_t v21 = v129;
    if (v129 >> 60 != 15) {
      break;
    }
    unint64_t v124 = v13;
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    sub_10000A720(v22, (uint64_t)qword_100A2AE08);
    sub_10001736C(v15, v16);
    swift_bridgeObjectRetain(v18);
    uint64_t v23 = v125;
    swift_bridgeObjectRetain(v125);
    sub_10001736C(v15, v16);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v23);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = (void *)swift_slowAlloc(32LL, -1LL);
      uint64_t v123 = v18;
      uint64_t v29 = v28;
      uint64_t v128 = v28;
      *(_DWORD *)uint64_t v27 = v115.n128_u32[0];
      sub_10001736C(v15, v16);
      unint64_t v30 = v16;
      uint64_t v31 = Data.description.getter(v15, v16);
      uint64_t v32 = v14;
      uint64_t v33 = v10;
      unint64_t v35 = v34;
      sub_100016F9C(v15, v30);
      *(void *)(v27 + 4) = sub_1003F11D4(v31, v35, (uint64_t *)&v128);
      uint64_t v10 = v33;
      unint64_t v14 = v32;
      swift_bridgeObjectRelease();
      sub_100016F9C(v15, v30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100016F9C(v15, v30);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "No decryption key found for locationId %s. Not proceeding with decoding",  (uint8_t *)v27,  0xCu);
      swift_arrayDestroy(v29, 1LL, v114);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);

      sub_100016F9C(v15, v30);
    }

    else
    {
      sub_100016F9C(v15, v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100016F9C(v15, v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100016F9C(v15, v16);
    }

    swift_bridgeObjectRelease();
    uint64_t v11 = swift_bridgeObjectRelease();
    uint64_t v13 = v124;
LABEL_4:
    v14 += 7;
    if (!--v10)
    {
      swift_bridgeObjectRelease();
      return v109;
    }
  }

  unint64_t v120 = v128;
  if (!v125[2])
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    unint64_t v116 = v21;
    uint64_t v41 = type metadata accessor for Logger(0LL);
    unint64_t v42 = (os_log_s *)sub_10000A720(v41, (uint64_t)qword_100A2AE08);
    sub_10001736C(v15, v16);
    swift_bridgeObjectRetain(v18);
    os_log_type_t v43 = v125;
    swift_bridgeObjectRetain(v125);
    sub_10001736C(v15, v16);
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v43);
    unint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
    os_log_type_t v46 = static os_log_type_t.default.getter(v45);
    if (os_log_type_enabled(v45, v46))
    {
      uint64_t v47 = swift_slowAlloc(12LL, -1LL);
      uint64_t v123 = v18;
      uint64_t v48 = v47;
      uint64_t v128 = (void *)swift_slowAlloc(32LL, -1LL);
      unint64_t v124 = v42;
      uint64_t v49 = v128;
      *(_DWORD *)uint64_t v48 = v115.n128_u32[0];
      Swift::String v50 = Data.base64EncodedString(options:)(0LL);
      *(void *)(v48 + 4) = sub_1003F11D4(v50._countAndFlagsBits, (unint64_t)v50._object, (uint64_t *)&v128);
      swift_bridgeObjectRelease();
      sub_100016F9C(v15, v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100016F9C(v15, v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v45, v46, "Empty location data for locationId %s", (uint8_t *)v48, 0xCu);
      swift_arrayDestroy(v49, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1LL, -1LL);
      uint64_t v51 = v48;
      uint64_t v18 = v123;
      swift_slowDealloc(v51, -1LL, -1LL);
    }

    else
    {
      sub_100016F9C(v15, v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100016F9C(v15, v16);

      swift_bridgeObjectRelease();
      uint64_t v52 = swift_bridgeObjectRelease();
    }

    __chkstk_darwin(v52);
    *(&v97 - 4) = v67;
    *(&v97 - 3) = (uint8_t *)v15;
    *(&v97 - 2) = (uint8_t *)v16;
    uint64_t v68 = sub_100004AEC(&qword_1009A34B0);
    OS_dispatch_queue.sync<A>(execute:)(sub_100263EB4, &v97 - 6, v68);
    if (v129)
    {
      PassthroughSubject.send(_:)(&v128);
      sub_1000182F0((uint64_t)v120, v116);
      sub_100016F9C(v15, v16);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v11 = swift_bridgeObjectRelease();
    }

    else
    {
      sub_10001736C(v15, v16);
      swift_bridgeObjectRetain(v18);
      uint64_t v69 = v125;
      swift_bridgeObjectRetain(v125);
      sub_10001736C(v15, v16);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v69);
      uint64_t v71 = (os_log_s *)Logger.logObject.getter(v70);
      uint64_t v72 = v18;
      os_log_type_t v73 = static os_log_type_t.default.getter(v71);
      unint64_t v124 = v71;
      if (os_log_type_enabled(v71, v73))
      {
        uint64_t v74 = swift_slowAlloc(12LL, -1LL);
        unint64_t v75 = (void *)swift_slowAlloc(32LL, -1LL);
        uint64_t v123 = v72;
        uint64_t v76 = v75;
        uint64_t v128 = v75;
        *(_DWORD *)uint64_t v74 = v115.n128_u32[0];
        Swift::String v77 = Data.base64EncodedString(options:)(0LL);
        *(void *)(v74 + 4) = sub_1003F11D4(v77._countAndFlagsBits, (unint64_t)v77._object, (uint64_t *)&v128);
        swift_bridgeObjectRelease();
        sub_100016F9C(v15, v16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100016F9C(v15, v16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v78 = v124;
        _os_log_impl( (void *)&_mh_execute_header,  v124,  v73,  "No findMyId found for locationId %s",  (uint8_t *)v74,  0xCu);
        swift_arrayDestroy(v76, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v76, -1LL, -1LL);
        swift_slowDealloc(v74, -1LL, -1LL);
        sub_1000182F0((uint64_t)v120, v116);

        sub_100016F9C(v15, v16);
      }

      else
      {
        sub_1000182F0((uint64_t)v120, v116);
        sub_100016F9C(v15, v16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100016F9C(v15, v16);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_100016F9C(v15, v16);
      }

      swift_bridgeObjectRelease();
      uint64_t v11 = swift_bridgeObjectRelease();
    }

    goto LABEL_4;
  }

  uint64_t v128 = v125;
  swift_bridgeObjectRetain_n(v125, 2LL);
  sub_100261EB0((uint64_t *)&v128);
  if (v13) {
    goto LABEL_45;
  }
  swift_bridgeObjectRelease();
  unint64_t v36 = v128;
  if (v128[2])
  {
    unint64_t v118 = v16;
    uint64_t v119 = v10;
    uint64_t v37 = v128[4];
    uint64_t v38 = (os_log_s *)v128[5];
    sub_10001736C(v37, (unint64_t)v38);
    uint64_t v39 = (uint64_t)v120;
    sub_100018BE4((uint64_t)v120, v21);
    uint64_t v40 = objc_autoreleasePoolPush();
    sub_1004DEF84((uint64_t *)&v128);
    uint64_t v113 = v37;
    unint64_t v124 = v38;
    objc_autoreleasePoolPop(v40);
    sub_1000182F0(v39, v21);
    uint64_t v54 = (uint64_t)v128;
    unint64_t v53 = v129;
    unint64_t v55 = v21;
    char v56 = *((_BYTE *)v36 + 56);
    swift_release();
    if ((v56 & 1) != 0)
    {
      sub_100016F9C(v54, v53);
      sub_100016F9C(v113, (unint64_t)v124);
      sub_1000182F0(v39, v55);
      sub_100016F9C(v15, v118);
      swift_bridgeObjectRelease();
      uint64_t v11 = swift_bridgeObjectRelease();
      uint64_t v10 = v119;
    }

    else
    {
      uint64_t v111 = v54;
      unint64_t v116 = v55;
      if (qword_10099B5E0 != -1) {
        swift_once(&qword_10099B5E0, sub_1005C6624);
      }
      uint64_t v57 = type metadata accessor for Logger(0LL);
      uint64_t v58 = sub_10000A720(v57, (uint64_t)qword_100A2AE08);
      uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
      os_log_type_t v60 = static os_log_type_t.default.getter(v59);
      if (os_log_type_enabled(v59, v60))
      {
        uint64_t v61 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v61 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v59,  v60,  "Got decrypted JSON data now trying to decode JSON",  v61,  2u);
        swift_slowDealloc(v61, -1LL, -1LL);
      }

      uint64_t v62 = type metadata accessor for JSONDecoder(0LL);
      uint64_t v63 = swift_allocObject(v62, *(unsigned int *)(v62 + 48), *(unsigned __int16 *)(v62 + 52));
      uint64_t v64 = JSONDecoder.init()(v63);
      uint64_t v65 = sub_100007864(&qword_1009A7100, type metadata accessor for SecureLocation, (uint64_t)&unk_10080CAA0);
      uint64_t v66 = v110;
      dispatch thunk of JSONDecoder.decode<A>(_:from:)(v108, v111, v53, v108, v65);
      uint64_t v117 = v15;
      uint64_t v103 = v64;
      uint64_t v79 = v104;
      uint64_t v80 = sub_10001DC4C(v66, v104, type metadata accessor for SecureLocation);
      unint64_t v81 = (os_log_s *)Logger.logObject.getter(v80);
      os_log_type_t v82 = static os_log_type_t.debug.getter(v81);
      if (os_log_type_enabled(v81, v82))
      {
        uint64_t v83 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v100 = (void *)swift_slowAlloc(32LL, -1LL);
        uint64_t v128 = v100;
        uint64_t v99 = v83;
        *(_DWORD *)uint64_t v83 = v115.n128_u32[0];
        uint64_t v97 = v83 + 4;
        os_log_t v98 = v81;
        uint64_t v84 = v102;
        sub_10001DC4C(v79, v102, type metadata accessor for SecureLocation);
        uint64_t v85 = String.init<A>(describing:)(v84, v108);
        uint64_t v126 = sub_1003F11D4(v85, v86, (uint64_t *)&v128);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v101, v97, v83 + 12);
        swift_bridgeObjectRelease();
        sub_100018C68(v79, type metadata accessor for SecureLocation);
        unint64_t v81 = v98;
        uint64_t v87 = v99;
        _os_log_impl((void *)&_mh_execute_header, v98, v82, "Got decoded location %s", v99, 0xCu);
        __n128 v88 = v100;
        swift_arrayDestroy(v100, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v88, -1LL, -1LL);
        swift_slowDealloc(v87, -1LL, -1LL);
      }

      else
      {
        sub_100018C68(v79, type metadata accessor for SecureLocation);
      }

      sub_10001DC4C(v110, v107, type metadata accessor for SecureLocation);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v109);
      unint64_t v90 = v118;
      uint64_t v10 = v119;
      uint64_t v91 = v113;
      if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
        unint64_t v92 = (unint64_t)v109;
      }
      else {
        unint64_t v92 = sub_1004C6004(0, v109[2] + 1LL, 1, (unint64_t)v109);
      }
      unint64_t v94 = *(void *)(v92 + 16);
      unint64_t v93 = *(void *)(v92 + 24);
      if (v94 >= v93 >> 1) {
        unint64_t v92 = sub_1004C6004(v93 > 1, v94 + 1, 1, v92);
      }
      *(void *)(v92 + swift_weakDestroy(v0 + 16) = v94 + 1;
      unint64_t v95 = (*(unsigned __int8 *)(v106 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v106 + 80);
      __int128 v109 = (void *)v92;
      sub_10002218C(v107, v92 + v95 + *(void *)(v106 + 72) * v94, type metadata accessor for SecureLocation);
      sub_100016F9C(v111, v53);
      sub_100016F9C(v91, (unint64_t)v124);
      sub_1000182F0((uint64_t)v120, v116);
      swift_release();
      sub_100016F9C(v117, v90);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v11 = sub_100018C68(v110, type metadata accessor for SecureLocation);
    }

    goto LABEL_4;
  }

  __break(1u);
LABEL_45:
  uint64_t result = (void *)swift_release();
  __break(1u);
  return result;
}

void sub_1002609FC(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = *(void *)a1;
  uint64_t v2 = *(void *)(a1 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  uint64_t v5 = *(void *)(a1 + 32);
  uint64_t v6 = *(void *)(a1 + 40);
  uint64_t v41 = *(void *)(a1 + 48);
  unint64_t v42 = *(void *)(a1 + 24);
  uint64_t v7 = *(void *)(a1 + 64);
  uint64_t v40 = *(void *)(a1 + 56);
  uint64_t v8 = *(void *)(a1 + 72);
  uint64_t v9 = *(void *)(a1 + 80);
  if ((*(_BYTE *)(a1 + 88) & 1) != 0)
  {
    os_log_t oslog = *(os_log_t *)(a1 + 64);
    uint64_t v39 = *(void *)(a1 + 8);
    swift_errorRetain(v3);
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    sub_10000A720(v10, (uint64_t)qword_100A2AE08);
    swift_errorRetain(v3);
    uint64_t v11 = swift_errorRetain(v3);
    __n128 v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.error.getter(v12);
    log = v12;
    uint64_t v35 = v9;
    if (os_log_type_enabled(v12, v13))
    {
      unint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v31 = swift_slowAlloc(32LL, -1LL);
      uint64_t v43 = v3;
      v44[0] = v31;
      *(_DWORD *)unint64_t v14 = 136315138;
      swift_errorRetain(v3);
      uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v16 = String.init<A>(describing:)(&v43, v15);
      uint64_t v43 = sub_1003F11D4(v16, v17, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease();
      sub_100263E00(v3, v39, v4, v42, v5, v6, v41, v40, v7, v8, v9, 1);
      uint64_t v29 = v9;
      uint64_t v18 = v3;
      uint64_t v19 = v6;
      sub_100263E00(v3, v39, v4, v42, v5, v6, v41, v40, (uint64_t)oslog, v8, v29, 1);
      uint64_t v20 = v5;
      _os_log_impl( (void *)&_mh_execute_header,  log,  v13,  "LabelledLocations - Failed to save location label error %s",  v14,  0xCu);
      swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v31, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    else
    {
      sub_100263E00(v3, v39, v4, v42, v5, v6, v41, v40, v7, v8, v9, 1);
      uint64_t v30 = v9;
      uint64_t v18 = v3;
      uint64_t v28 = v3;
      uint64_t v20 = v5;
      uint64_t v19 = v6;
      sub_100263E00(v28, v39, v4, v42, v5, v6, v41, v40, (uint64_t)oslog, v8, v30, 1);
    }

    swift_errorRetain(v18);
    a2(v18);
    sub_100263E00(v18, v39, v4, v42, v20, v19, v41, v40, (uint64_t)oslog, v8, v35, 1);
    sub_100263E00(v18, v39, v4, v42, v20, v6, v41, v40, (uint64_t)oslog, v8, v35, 1);
  }

  else
  {
    uint64_t v21 = qword_10099B5E0;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v9);
    BOOL v22 = v21 == -1;
    uint64_t v23 = v2;
    if (!v22) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_10000A720(v24, (uint64_t)qword_100A2AE08);
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRetain(v6);
    swift_bridgeObjectRetain(v9);
    osloga = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v26 = static os_log_type_t.default.getter(osloga);
    if (os_log_type_enabled(osloga, v26))
    {
      uint64_t v36 = v8;
      uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v34 = swift_slowAlloc(32LL, -1LL);
      v44[0] = v34;
      *(_DWORD *)uint64_t v27 = 136315138;
      swift_bridgeObjectRetain(v42);
      uint64_t v43 = sub_1003F11D4(v4, v42, v44);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease();
      sub_100263E00(v3, v23, v4, v42, v5, v6, v41, v40, v7, v36, v9, 0);
      sub_100263E00(v3, v23, v4, v42, v5, v6, v41, v40, v7, v36, v9, 0);
      _os_log_impl( (void *)&_mh_execute_header,  osloga,  v26,  "LabelledLocations - Successfully saved location label record %s",  v27,  0xCu);
      swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    else
    {
      sub_100263E00(v3, v23, v4, v42, v5, v6, v41, v40, v7, v8, v9, 0);
      sub_100263E00(v3, v23, v4, v42, v5, v6, v41, v40, v7, v8, v9, 0);
    }
  }

uint64_t sub_10026104C()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v63 = *(void *)(v1 - 8);
  uint64_t v64 = v1;
  __chkstk_darwin(v1);
  uint64_t v62 = (char *)&v54 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v68 = type metadata accessor for UUID(0LL);
  uint64_t v61 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v4 = (char *)&v54 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v60 = *(void *)(v0 + 24);
  uint64_t v5 = sub_100577748();
  uint64_t v7 = v5[2];
  if (v7)
  {
    uint64_t v72 = 0LL;
    uint64_t v54 = v5;
    uint64_t v8 = v5 + 7;
    *(void *)&__int128 v6 = 136315394LL;
    __int128 v56 = v6;
    unint64_t v55 = (char *)&type metadata for Any + 8;
    do
    {
      uint64_t v71 = v7;
      uint64_t v10 = (os_log_s *)*(v8 - 3);
      uint64_t v9 = *(v8 - 2);
      unint64_t v11 = *v8;
      uint64_t v66 = *(v8 - 1);
      unint64_t v12 = v8[2];
      unint64_t v13 = v8[7];
      swift_bridgeObjectRetain(v13);
      swift_bridgeObjectRetain(v9);
      unint64_t v14 = v11;
      swift_bridgeObjectRetain(v11);
      unint64_t v70 = v12;
      swift_bridgeObjectRetain(v12);
      os_log_t v67 = v10;
      uint64_t v69 = v9;
      uint64_t v15 = String.utf8Data.getter(v10, v9);
      unint64_t v17 = v16;
      uint64_t v74 = v15;
      unint64_t v75 = v16;
      unint64_t v65 = sub_100042F34();
      DataProtocol.stableUUID.getter(&type metadata for Data, v65);
      sub_100016F9C(v15, v17);
      uint64_t v18 = *(void **)(v60 + 136);
      uint64_t v19 = v4;
      if (qword_10099B800 != -1) {
        swift_once(&qword_10099B800, sub_10069017C);
      }
      uint64_t v20 = v64;
      uint64_t v21 = sub_10000A720(v64, (uint64_t)qword_100A2B170);
      uint64_t v23 = v62;
      uint64_t v22 = v63;
      uint64_t v24 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v63 + 16))(v62, v21, v20);
      __chkstk_darwin(v24);
      *(&v54 - 4) = v18;
      *(&v54 - 3) = v19;
      *(&v54 - 2) = v23;
      uint64_t v25 = v72;
      OS_dispatch_queue.sync<A>(execute:)(sub_1000901D4, &v54 - 6, &type metadata for Bool);
      uint64_t v72 = v25;
      char v26 = v74;
      (*(void (**)(char *, uint64_t))(v22 + 8))(v23, v20);
      uint64_t v27 = *(void (**)(char *, uint64_t))(v61 + 8);
      v27(v19, v68);
      uint64_t v4 = v19;
      if ((v26 & 1) != 0)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        unint64_t v28 = v14;
        unint64_t v29 = v13;
        if (qword_10099B5E0 != -1) {
          swift_once(&qword_10099B5E0, sub_1005C6624);
        }
        uint64_t v30 = type metadata accessor for Logger(0LL);
        sub_10000A720(v30, (uint64_t)qword_100A2AE08);
        uint64_t v31 = v69;
        swift_bridgeObjectRetain(v69);
        swift_bridgeObjectRetain(v14);
        unint64_t v32 = v70;
        swift_bridgeObjectRetain(v70);
        swift_bridgeObjectRetain(v29);
        uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
        os_log_type_t v35 = static os_log_type_t.default.getter(v34);
        int v36 = v35;
        if (os_log_type_enabled(v34, v35))
        {
          uint64_t v37 = swift_slowAlloc(22LL, -1LL);
          int v59 = v36;
          uint64_t v38 = v37;
          uint64_t v57 = v37;
          uint64_t v58 = swift_slowAlloc(64LL, -1LL);
          v73[0] = v58;
          *(_DWORD *)uint64_t v38 = v56;
          swift_bridgeObjectRetain(v28);
          *(void *)(v38 + 4) = sub_1003F11D4(v66, v28, v73);
          swift_bridgeObjectRelease();
          *(_WORD *)(v38 + 12) = 2080;
          uint64_t v39 = String.utf8Data.getter(v67, v31);
          unint64_t v41 = v40;
          uint64_t v74 = v39;
          unint64_t v75 = v40;
          os_log_t v67 = v34;
          DataProtocol.stableUUID.getter(&type metadata for Data, v65);
          sub_100016F9C(v39, v41);
          uint64_t v42 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v43 = v68;
          unint64_t v44 = v29;
          uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter(v68, v42);
          unint64_t v47 = v46;
          v27(v4, v43);
          uint64_t v48 = sub_1003F11D4(v45, v47, v73);
          uint64_t v49 = (uint8_t *)v57;
          *(void *)(v57 + 14) = v48;
          swift_bridgeObjectRelease_n(v44, 2LL);
          swift_bridgeObjectRelease_n(v32, 2LL);
          swift_bridgeObjectRelease_n(v28, 2LL);
          swift_bridgeObjectRelease_n(v31, 2LL);
          swift_bridgeObjectRelease();
          os_log_t v50 = v67;
          uint64_t v51 = v49;
          _os_log_impl( (void *)&_mh_execute_header,  v67,  (os_log_type_t)v59,  "Failed to remove cached location label %s %s",  v49,  0x16u);
          uint64_t v52 = v58;
          swift_arrayDestroy(v58, 2LL, v55);
          swift_slowDealloc(v52, -1LL, -1LL);
          swift_slowDealloc(v51, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v29, 2LL);
          swift_bridgeObjectRelease_n(v32, 2LL);
          swift_bridgeObjectRelease_n(v28, 2LL);
          swift_bridgeObjectRelease_n(v31, 2LL);
        }
      }

      v8 += 11;
      uint64_t v7 = v71 - 1;
    }

    while (v71 != 1);
  }

  return swift_bridgeObjectRelease();
}

void sub_10026158C(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  __int128 v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void *)(v1 + 24);
  if (qword_10099B250 != -1) {
    swift_once(&qword_10099B250, sub_1002E7C7C);
  }
  uint64_t v12 = sub_10000A720(v7, (uint64_t)qword_100A2A4D0);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, v12, v7);
  uint64_t v53 = v7;
  uint64_t v54 = v8;
  uint64_t v13 = *(void *)(v11 + 136);
  uint64_t v52 = v10;
  if (qword_10099B248 != -1) {
    swift_once(&qword_10099B248, sub_1002E7BAC);
  }
  uint64_t v14 = sub_10000A720(v3, (uint64_t)qword_100A2A4B8);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, v14, v3);
  v15._object = (void *)0x800000010085B040LL;
  v15._countAndFlagsBits = 0xD000000000000014LL;
  prohibitAsyncContext(functionName:)(v15);
  __int128 v56 = &type metadata for SecureLocationsConfig;
  uint64_t v16 = sub_100004AEC(&qword_1009A70E8);
  uint64_t v17 = String.init<A>(describing:)(&v56, v16);
  uint64_t v51 = v3;
  uint64_t v18 = v17;
  uint64_t v20 = v19;
  uint64_t v21 = objc_autoreleasePoolPush();
  uint64_t v50 = v4;
  __chkstk_darwin(v21);
  *(&v49 - 6) = v13;
  uint64_t v22 = v52;
  *(&v49 - 5) = (uint64_t)v52;
  *(&v49 - 4) = (uint64_t)v6;
  *(&v49 - 3) = v18;
  *(&v49 - 2) = v20;
  uint64_t v23 = sub_100004AEC(&qword_1009A70F0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100263E60, &v49 - 8, v23);
  objc_autoreleasePoolPop(v21);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v6, v51);
  sub_100015750((uint64_t)&v56, (uint64_t)v55, &qword_1009A70F0);
  (*(void (**)(char *, uint64_t))(v54 + 8))(v22, v53);
  sub_100015750((uint64_t)v55, (uint64_t)&v56, &qword_1009A70F0);
  if (sub_100263E80((uint64_t)&v56) == 1)
  {
    if (qword_10099B258 != -1) {
      swift_once(&qword_10099B258, sub_1002E8774);
    }
    uint64_t v24 = 808334129LL;
    swift_bridgeObjectRetain(qword_100A2A4E8);
    char v26 = 0LL;
    char v27 = 0;
    __int128 v28 = xmmword_1007F8890;
    __int128 v29 = xmmword_1007F88A0;
    __int128 v30 = xmmword_1007F88B0;
    uint64_t v31 = 808334897LL;
    unint64_t v32 = 0xE300000000000000LL;
    __int128 v33 = xmmword_1007F88C0;
    unint64_t v34 = 0xE400000000000000LL;
    char v35 = 1;
    uint64_t v36 = 3157561LL;
    uint64_t v37 = 0x409C200000000000LL;
    uint64_t v38 = 0x405E000000000000LL;
    uint64_t v39 = 5LL;
    char v40 = 1;
    uint64_t v41 = 5LL;
    char v42 = 1;
    char v43 = 1;
    char v44 = 1;
    char v45 = 1;
    uint64_t v46 = 5LL;
    char v47 = 1;
    unint64_t v48 = 0xE400000000000000LL;
  }

  else
  {
    char v42 = v68;
    char v43 = v69;
    char v44 = v70;
    char v45 = v71;
    uint64_t v46 = v72;
    __int128 v28 = v73;
    char v47 = v74;
    uint64_t v31 = v75;
    unint64_t v34 = v76;
    uint64_t v24 = v77;
    unint64_t v48 = v78;
    uint64_t v36 = v79;
    unint64_t v32 = v80;
    __int128 v29 = v67;
    uint64_t v41 = v66;
    uint64_t v37 = v65;
    char v40 = v64;
    uint64_t v38 = v63;
    uint64_t v25 = v62;
    char v27 = v61;
    __int128 v30 = v60;
    uint64_t v39 = v59;
    __int128 v33 = v58;
    char v35 = v57;
    char v26 = v56;
  }

  *(void *)a1 = v26;
  *(_BYTE *)(a1 + 8) = v35;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v33;
  *(void *)(a1 + 32) = v39;
  *(_OWORD *)(a1 + 40) = v30;
  *(_BYTE *)(a1 + 56) = v27;
  *(void *)(a1 + 64) = v25;
  *(void *)(a1 + 72) = v38;
  *(_BYTE *)(a1 + 80) = v40;
  *(void *)(a1 + 88) = v37;
  *(void *)(a1 + 96) = v41;
  *(_OWORD *)(a1 + 104) = v29;
  *(_BYTE *)(a1 + 120) = v42;
  *(_BYTE *)(a1 + 121) = v43;
  *(_BYTE *)(a1 + 122) = v44;
  *(_BYTE *)(a1 + 123) = v45;
  *(void *)(a1 + 128) = v46;
  *(_OWORD *)(a1 + 136) = v28;
  *(_BYTE *)(a1 + 152) = v47;
  *(void *)(a1 + 160) = v31;
  *(void *)(a1 + 168) = v34;
  *(void *)(a1 + 176) = v24;
  *(void *)(a1 + 184) = v48;
  *(void *)(a1 + 192) = v36;
  *(void *)(a1 + 200) = v32;
}

void sub_10026197C(uint64_t a1)
{
  if (sub_1002632EC((uint64_t)v25) == 1)
  {
    DeviceInformationProviderFactory.init()();
    uint64_t v2 = *v1;
    sub_100015750((uint64_t)v24, (uint64_t)v22, &qword_1009A70E0);
    DeviceInformationProviderFactory.init()();
    uint64_t v4 = *v3;
    swift_errorRetain(*v3);
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    sub_10000A720(v5, (uint64_t)qword_100A2AE08);
    sub_100015750((uint64_t)v24, (uint64_t)v23, &qword_1009A70E0);
    DeviceInformationProviderFactory.init()();
    swift_errorRetain(*v6);
    uint64_t v7 = swift_errorRetain(v4);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v11 = swift_slowAlloc(32LL, -1LL);
      uint64_t v20 = v2;
      v21[0] = v11;
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_errorRetain(v4);
      uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v13 = String.init<A>(describing:)(&v20, v12);
      uint64_t v20 = sub_1003F11D4(v13, v14, v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, v21, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease();
      sub_1002632F4((uint64_t)v24);
      sub_1002632F4((uint64_t)v24);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Error saving config %s", v10, 0xCu);
      swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1LL, -1LL);
      swift_slowDealloc(v10, -1LL, -1LL);

      sub_1002632F4((uint64_t)v24);
      return;
    }

    sub_1002632F4((uint64_t)v24);
    sub_1002632F4((uint64_t)v24);
    sub_100015750((uint64_t)v24, (uint64_t)v21, &qword_1009A70E0);
    DeviceInformationProviderFactory.init()();
    swift_errorRelease(*v19);
  }

  else
  {
    DeviceInformationProviderFactory.init()();
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    uint64_t v16 = sub_10000A720(v15, (uint64_t)qword_100A2AE08);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v17 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v17, "Successfully saved config", v18, 2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }
  }
}

uint64_t sub_100261CA4()
{
  swift_release(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 48));
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t type metadata accessor for SecureLocationsPayloadManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd29SecureLocationsPayloadManager);
}

uint64_t destroy for SecureLocationsEncodedPayload(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for SecureLocationsEncodedPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_10001736C(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v6 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v6;
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for SecureLocationsEncodedPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_10001736C(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_100016F9C(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v8;
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v9 = *(void *)(a2 + 40);
  *(void *)(a1 + 40) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for SecureLocationsEncodedPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016F9C(v4, v5);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for SecureLocationsEncodedPayload()
{
  return &type metadata for SecureLocationsEncodedPayload;
}

Swift::Int sub_100261EB0(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v2 = sub_1003D4AA0(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_100261F18(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_100261F18(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_141;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v88 = *a1;
      uint64_t v89 = *a1 + 32;
      uint64_t v90 = -1LL;
      for (uint64_t i = 1LL; i != v3; ++i)
      {
        uint64_t v92 = v89;
        uint64_t v93 = v90;
        do
        {
          double v94 = *(double *)(v92 + 16);
          if (!v88) {
            goto LABEL_145;
          }
          char v95 = *(_BYTE *)(v92 + 24);
          __int128 v96 = *(_OWORD *)v92;
          __int128 v97 = *(_OWORD *)(v92 - 16);
          *(_OWORD *)uint64_t v92 = *(_OWORD *)(v92 - 32);
          *(_OWORD *)(v92 + swift_weakDestroy(v0 + 16) = v97;
          *(double *)(v92 - swift_weakDestroy(v0 + 16) = v94;
          *(_BYTE *)(v92 - 8) = v95;
          *(_OWORD *)(v92 - 32) = v96;
          v92 -= 32LL;
        }

        while (!__CFADD__(v93++, 1LL));
        --v90;
        v89 += 32LL;
      }
    }

    return result;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_150;
  }
  Swift::Int v6 = result;
  uint64_t v107 = a1;
  if (v3 < 2)
  {
    uint64_t v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      uint64_t v12 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      uint64_t v99 = v12;
      uint64_t v110 = v9;
      if (v13 >= 2)
      {
        uint64_t v100 = *v107;
        do
        {
          unint64_t v101 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_136;
          }
          if (!v100) {
            goto LABEL_149;
          }
          uint64_t v102 = v99;
          uint64_t v103 = *(void *)&v99[16 * v101 + 32];
          uint64_t v104 = *(void *)&v99[16 * v13 + 24];
          sub_100262618( (char *)(v100 + 32 * v103),  (char *)(v100 + 32LL * *(void *)&v99[16 * v13 + 16]),  v100 + 32 * v104,  __dst);
          if (v1) {
            break;
          }
          if (v104 < v103) {
            goto LABEL_137;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v102) & 1) == 0) {
            uint64_t v102 = sub_1003CBA90((uint64_t)v102);
          }
          if (v101 >= *((void *)v102 + 2)) {
            goto LABEL_138;
          }
          uint64_t v105 = &v102[16 * v101 + 32];
          *(void *)uint64_t v105 = v103;
          *((void *)v105 + 1) = v104;
          unint64_t v106 = *((void *)v102 + 2);
          if (v13 > v106) {
            goto LABEL_139;
          }
          memmove(&v102[16 * v13 + 16], &v102[16 * v13 + 32], 16 * (v106 - v13));
          uint64_t v99 = v102;
          *((void *)v102 + 2) = v106 - 1;
          unint64_t v13 = v106 - 1;
        }

        while (v106 > 2);
      }

uint64_t sub_100262618(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 31;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 5;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 31;
  uint64_t v13 = v12 >> 5;
  __int128 v30 = __dst;
  uint64_t v31 = __src;
  if (v10 >= v13)
  {
    if (v11 >= -31)
    {
      uint64_t v20 = 32 * v13;
      if (__dst != a2 || &a2[v20] <= __dst) {
        memmove(__dst, a2, 32 * v13);
      }
      Swift::Int v21 = &v4[v20];
      Swift::Int v29 = &v4[v20];
      uint64_t v31 = v6;
      if (v7 < v6 && (unint64_t)(v11 - 32) <= 0xFFFFFFFFFFFFFFC0LL)
      {
        __int128 v22 = (char *)(a3 - 32);
        do
        {
          uint64_t v23 = v22 + 32;
          if (*((double *)v6 - 2) >= *((double *)v21 - 2))
          {
            Swift::Int v29 = v21 - 32;
            if (v23 < v21 || v22 >= v21 || v23 != v21)
            {
              __int128 v26 = *((_OWORD *)v21 - 1);
              *(_OWORD *)__int128 v22 = *((_OWORD *)v21 - 2);
              *((_OWORD *)v22 + 1) = v26;
            }

            uint64_t v24 = v6;
            v21 -= 32;
            if (v6 <= v7) {
              break;
            }
          }

          else
          {
            uint64_t v24 = v6 - 32;
            if (v23 != v6 || v22 >= v6)
            {
              __int128 v25 = *((_OWORD *)v6 - 1);
              *(_OWORD *)__int128 v22 = *(_OWORD *)v24;
              *((_OWORD *)v22 + 1) = v25;
            }

            uint64_t v31 = v6 - 32;
            if (v24 <= v7) {
              break;
            }
          }

          v22 -= 32;
          Swift::Int v6 = v24;
        }

        while (v21 > v4);
      }

void sub_1002628A0(uint64_t a1, char *a2, unint64_t *a3)
{
  uint64_t v7 = a1 + 56;
  uint64_t v8 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v9 = -1LL;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  unint64_t v10 = v9 & *(void *)(a1 + 56);
  int64_t v11 = (unint64_t)(v8 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v12 = 0LL;
  if (!v10) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v13 = __clz(__rbit64(v10));
  v10 &= v10 - 1;
  for (unint64_t i = v13 | (v12 << 6); ; unint64_t i = __clz(__rbit64(v16)) + (v12 << 6))
  {
    uint64_t v18 = (uint64_t *)(*(void *)(a1 + 48) + 16 * i);
    uint64_t v19 = v18[1];
    v21[0] = *v18;
    v21[1] = v19;
    swift_bridgeObjectRetain(v19);
    sub_10025E4B4(v21, a2, a3);
    if (v3)
    {
      swift_release();
      swift_bridgeObjectRelease();
      return;
    }

    swift_bridgeObjectRelease();
    if (v10) {
      goto LABEL_4;
    }
LABEL_5:
    if (__OFADD__(v12++, 1LL))
    {
      __break(1u);
      goto LABEL_28;
    }

    if (v12 >= v11) {
      goto LABEL_26;
    }
    unint64_t v16 = *(void *)(v7 + 8 * v12);
    if (!v16)
    {
      int64_t v17 = v12 + 1;
      if (v12 + 1 >= v11) {
        goto LABEL_26;
      }
      unint64_t v16 = *(void *)(v7 + 8 * v17);
      if (v16) {
        goto LABEL_14;
      }
      int64_t v17 = v12 + 2;
      if (v12 + 2 >= v11) {
        goto LABEL_26;
      }
      unint64_t v16 = *(void *)(v7 + 8 * v17);
      if (v16) {
        goto LABEL_14;
      }
      int64_t v17 = v12 + 3;
      if (v12 + 3 >= v11) {
        goto LABEL_26;
      }
      unint64_t v16 = *(void *)(v7 + 8 * v17);
      if (v16)
      {
LABEL_14:
        int64_t v12 = v17;
        goto LABEL_15;
      }

      int64_t v20 = v12 + 4;
      if (v12 + 4 >= v11)
      {
LABEL_26:
        swift_release();
        return;
      }

      unint64_t v16 = *(void *)(v7 + 8 * v20);
      v12 += 4LL;
      if (!v16) {
        break;
      }
    }

uint64_t sub_100262A54(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEA00000000007354LL)
  {
    unint64_t v7 = 0xEA00000000007354LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEA00000000007354LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 7630182 && a2 == 0xE300000000000000LL)
  {
    swift_bridgeObjectRelease(0xE300000000000000LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(7630182LL, 0xE300000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

double sub_100262B9C(void *a1)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A71F8);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100012ED8(a1, v8);
  unint64_t v10 = sub_100264F34();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SecureLocationsEncodedInfo.CodingKeys,  &type metadata for SecureLocationsEncodedInfo.CodingKeys,  v10,  v8,  v9);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    char v19 = 0;
    unint64_t v11 = sub_100016FE0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, &type metadata for Data, &v19, v4, &type metadata for Data, v11);
    uint64_t v13 = v17;
    unint64_t v14 = v18;
    LOBYTE(v17) = 1;
    sub_10001736C(v13, v18);
    KeyedDecodingContainer.decode(_:forKey:)(&v17, v4);
    double v2 = v15;
    char v19 = 2;
    unint64_t v16 = sub_100264F78();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for SecureLocationsPayloadFormat,  &v19,  v4,  &type metadata for SecureLocationsPayloadFormat,  v16);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    sub_100016F9C(v13, v14);
  }

  return v2;
}

uint64_t sub_100262DA0(uint64_t a1, unint64_t a2)
{
  if (a1 == 25705 && a2 == 0xE200000000000000LL)
  {
    unint64_t v5 = 0xE200000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705LL, 0xE200000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6570795479656BLL && a2 == 0xE700000000000000LL)
  {
    unint64_t v7 = 0xE700000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6570795479656BLL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 1701080941 && a2 == 0xE400000000000000LL)
  {
    unint64_t v8 = 0xE400000000000000LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701080941LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEC0000006F666E49LL)
  {
    swift_bridgeObjectRelease(0xEC0000006F666E49LL);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEC0000006F666E49LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_100262F48@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009A70A0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_100263220();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SecureLocationsEncodedPayload.CodingKeys,  &type metadata for SecureLocationsEncodedPayload.CodingKeys,  v11,  v9,  v10);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    return swift_bridgeObjectRelease();
  }

  else
  {
    char v33 = 0;
    unint64_t v12 = sub_100016FE0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v30, &type metadata for Data, &v33, v5, &type metadata for Data, v12);
    uint64_t v13 = v30;
    unint64_t v14 = v31;
    LOBYTE(v30) = 1;
    sub_10001736C(v13, v31);
    uint64_t v15 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
    int v32 = v16;
    uint64_t v28 = v15;
    Swift::Int v29 = a2;
    LOBYTE(v30) = 2;
    uint64_t v17 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v30, v5);
    uint64_t v19 = v18;
    uint64_t v27 = v17;
    uint64_t v20 = sub_100004AEC(&qword_1009A70B0);
    char v33 = 3;
    uint64_t v21 = sub_1001C8A7C( &qword_1009A70B8,  &qword_1009A70B0,  (void (*)(void))sub_100263264,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v19);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v30, v20, &v33, v5, v20, v21);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    uint64_t v22 = v30;
    sub_10001736C(v13, v14);
    swift_bridgeObjectRetain(v22);
    sub_100016F9C(v13, v14);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    sub_100016F9C(v13, v14);
    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v24 = v28;
    __int128 v25 = v29;
    *Swift::Int v29 = v13;
    v25[1] = v14;
    v25[2] = v24;
    *((_BYTE *)v25 + 24) = v32 & 1;
    v25[4] = v27;
    v25[5] = v19;
    uint64_t v25[6] = v22;
  }

  return result;
}

unint64_t sub_100263220()
{
  unint64_t result = qword_1009A70A8;
  if (!qword_1009A70A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F8408, &type metadata for SecureLocationsEncodedPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A70A8);
  }

  return result;
}

unint64_t sub_100263264()
{
  unint64_t result = qword_1009A70C0;
  if (!qword_1009A70C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F83E0, &type metadata for SecureLocationsEncodedInfo);
    atomic_store(result, (unint64_t *)&qword_1009A70C0);
  }

  return result;
}

unint64_t sub_1002632A8()
{
  unint64_t result = qword_1009A70D8;
  if (!qword_1009A70D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F83B8, &type metadata for SecureLocationsEncodedInfo);
    atomic_store(result, (unint64_t *)&qword_1009A70D8);
  }

  return result;
}

uint64_t sub_1002632EC(uint64_t a1)
{
  return *(unsigned __int8 *)(a1 + 208);
}

uint64_t sub_1002632F4(uint64_t a1)
{
  return a1;
}

uint64_t sub_100263364( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, char a27)
{
  if ((a27 & 1) != 0) {
    return swift_errorRelease(a1);
  }
  swift_bridgeObjectRelease(a9);
  swift_bridgeObjectRelease(a22);
  swift_bridgeObjectRelease(a24);
  return swift_bridgeObjectRelease(a26);
}

uint64_t sub_1002633C4(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x54646E6553706174LL && a2 == 0xE900000000000053LL)
  {
    unint64_t v5 = 0xE900000000000053LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x54646E6553706174LL, 0xE900000000000053LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEF64616F6C796150LL)
  {
    swift_bridgeObjectRelease(0xEF64616F6C796150LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEF64616F6C796150LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1002634E4(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009A7230);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100012ED8(a1, v7);
  unint64_t v9 = sub_100265044();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SecureLocationsEncodedPushPayload.CodingKeys,  &type metadata for SecureLocationsEncodedPushPayload.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
  }

  else
  {
    char v16 = 0;
    uint64_t v8 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v16, v3);
    uint64_t v11 = sub_100004AEC(&qword_1009A1EC8);
    char v15 = 1;
    uint64_t v12 = sub_1001C8A7C( (unint64_t *)&qword_1009A56B0,  &qword_1009A1EC8,  (void (*)(void))sub_1001C8994,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, v11, &v15, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  return v8;
}

uint64_t sub_100263690(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v5 = 0xEA00000000007265LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6F4C657275636573LL && a2 == 0xEE006E6F69746163LL)
  {
    swift_bridgeObjectRelease(0xEE006E6F69746163LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F4C657275636573LL, 0xEE006E6F69746163LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1002637B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v69 = a2;
  uint64_t v60 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v7 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  unint64_t v9 = (char *)&v52 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v52 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = swift_allocObject(&unk_10094B878, 32LL, 7LL);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v14 + 24) = a4;
  uint64_t v15 = qword_10099B5E0;
  swift_retain();
  swift_bridgeObjectRetain(a4);
  if (v15 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v61 = v13;
  uint64_t v62 = v11;
  uint64_t v70 = v14;
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = sub_10000A720(v16, (uint64_t)qword_100A2AE08);
  swift_bridgeObjectRetain(a1);
  uint64_t v55 = v17;
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter(v19);
  uint64_t v21 = v10;
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v22 = 134217984;
    aBlock = *(void ***)(a1 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v73, v22 + 4, v22 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "LabelledLocations: saveLocationLabels %ld", v22, 0xCu);
    swift_slowDealloc(v22, -1LL, -1LL);

    uint64_t v24 = *(void *)(a1 + 16);
    if (!v24) {
      goto LABEL_10;
    }
  }

  else
  {

    uint64_t v23 = swift_bridgeObjectRelease();
    uint64_t v24 = *(void *)(a1 + 16);
    if (!v24) {
      goto LABEL_10;
    }
  }

  uint64_t v53 = a3;
  uint64_t v54 = a4;
  uint64_t v59 = *(void *)(v69 + 24);
  swift_bridgeObjectRetain(a1);
  uint64_t v52 = a1;
  __int128 v25 = (uint64_t *)(a1 + 56);
  uint64_t v57 = v7;
  uint64_t v56 = v9;
  uint64_t v58 = v21;
  do
  {
    uint64_t v69 = v24;
    uint64_t v27 = *(v25 - 3);
    uint64_t v26 = *(v25 - 2);
    uint64_t v29 = *(v25 - 1);
    uint64_t v28 = *v25;
    uint64_t v31 = v25[1];
    uint64_t v30 = v25[2];
    __int128 v64 = *(_OWORD *)(v25 + 3);
    uint64_t v32 = v25[5];
    uint64_t v33 = v25[7];
    uint64_t v63 = v25[6];
    uint64_t v34 = swift_allocObject(&unk_10094B8A0, 32LL, 7LL);
    uint64_t v35 = v70;
    *(void *)(v34 + swift_weakDestroy(v0 + 16) = sub_100263D24;
    *(void *)(v34 + 24) = v35;
    uint64_t v36 = v59;
    uint64_t v68 = *(void *)(v59 + 48);
    uint64_t v37 = swift_allocObject(&unk_10094B8C8, 128LL, 7LL);
    *(void *)(v37 + swift_weakDestroy(v0 + 16) = v27;
    *(void *)(v37 + 24) = v26;
    uint64_t v38 = v26;
    uint64_t v66 = v33;
    uint64_t v67 = v26;
    uint64_t v39 = v69;
    *(void *)(v37 + 32) = v29;
    *(void *)(v37 + 40) = v28;
    uint64_t v65 = v28;
    *(void *)(v37 + 48) = v31;
    *(void *)(v37 + 56) = v30;
    *(_OWORD *)(v37 + 64) = v64;
    *(void *)(v37 + 80) = v32;
    *(void *)(v37 + 88) = v63;
    *(void *)(v37 + 96) = v33;
    *(void *)(v37 + 104) = v36;
    *(void *)(v37 + 112) = sub_100263D50;
    *(void *)(v37 + 120) = v34;
    v73[3] = sub_100263DA4;
    v73[4] = v37;
    aBlock = _NSConcreteStackBlock;
    v73[0] = 1107296256LL;
    v73[1] = sub_1001C31E8;
    uint64_t v73[2] = &unk_10094B8E0;
    char v40 = _Block_copy(&aBlock);
    swift_bridgeObjectRetain_n(v33, 2LL);
    swift_bridgeObjectRetain_n(v38, 2LL);
    swift_bridgeObjectRetain_n(v28, 2LL);
    swift_bridgeObjectRetain_n(v30, 2LL);
    swift_retain();
    swift_retain();
    uint64_t v41 = swift_retain();
    uint64_t v42 = v61;
    static DispatchQoS.unspecified.getter(v41);
    uint64_t v71 = _swiftEmptyArrayStorage;
    uint64_t v43 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v44 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    unint64_t v45 = sub_100012FF8();
    uint64_t v46 = v56;
    uint64_t v47 = v60;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v71, v44, v45, v60, v43);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v42, v46, v40);
    _Block_release(v40);
    (*(void (**)(char *, uint64_t))(v57 + 8))(v46, v47);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v42, v58);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    v25 += 11;
    uint64_t v24 = v39 - 1;
  }

  while (v24);
  uint64_t v23 = swift_bridgeObjectRelease();
  a4 = v54;
  a3 = v53;
LABEL_10:
  uint64_t v48 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v49 = static os_log_type_t.default.getter(v48);
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v50 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v48,  v49,  "LabelledLocations - SaveLocationLabels - calling completion",  v50,  2u);
    swift_slowDealloc(v50, -1LL, -1LL);
  }

  sub_10032F318(a3, a4);
  return swift_release();
}

uint64_t sub_100263CF8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100263D24(uint64_t a1)
{
}

uint64_t sub_100263D2C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100263D50(uint64_t a1)
{
}

uint64_t sub_100263D58()
{
  return swift_deallocObject(v0, 128LL, 7LL);
}

void *sub_100263DA4()
{
  uint64_t v1 = *(void (**)(__int128 *))(v0 + 112);
  __int128 v2 = *(_OWORD *)(v0 + 64);
  _OWORD v6[2] = *(_OWORD *)(v0 + 48);
  v6[3] = v2;
  v6[4] = *(_OWORD *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v7 = *(void *)(v0 + 96);
  __int128 v4 = *(_OWORD *)(v0 + 32);
  v6[0] = *(_OWORD *)(v0 + 16);
  v6[1] = v4;
  return sub_1006B3A84((uint64_t *)v6, v3, v1);
}

uint64_t sub_100263DE8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100263DF8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100263E00( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, char a12)
{
  if ((a12 & 1) != 0) {
    return swift_errorRelease(a1);
  }
  swift_bridgeObjectRelease(a2);
  swift_bridgeObjectRelease(a4);
  swift_bridgeObjectRelease(a6);
  return swift_bridgeObjectRelease(a11);
}

uint64_t sub_100263E60@<X0>(void *a1@<X8>)
{
  return sub_10053187C( *(void **)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  a1);
}

uint64_t sub_100263E80(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 64);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

uint64_t sub_100263E98@<X0>(uint64_t *a1@<X8>)
{
  return sub_100590F54(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_100263EB4@<X0>(void *a1@<X8>)
{
  return sub_100591BF4(*(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_100263ED0()
{
  uint64_t v1 = type metadata accessor for SecureLocation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  uint64_t v7 = v0 + v4 + *(int *)(v1 + 52);
  uint64_t v8 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100263F7C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(type metadata accessor for SecureLocation(0LL) - 8) + 80LL);
  return sub_10025EE20( a1,  a2,  *(uint64_t (**)(void *))(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  v2 + ((v5 + 40) & ~v5));
}

void sub_100263FD0(void *a1@<X8>)
{
}

uint64_t type metadata accessor for SecureLocationsCachedPayload(uint64_t a1)
{
  uint64_t result = qword_1009A7190;
  if (!qword_1009A7190) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SecureLocationsCachedPayload);
  }
  return result;
}

uint64_t sub_100264024()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100264048()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_100264084()
{
}

uint64_t sub_100264090()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1002640C4()
{
  return sub_10025DE10( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void (**)(char *))(v0 + 40),  *(void *)(v0 + 48));
}

uint64_t sub_1002640D4()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_100264108()
{
  return sub_10025C2EC( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(unsigned __int8 *)(v0 + 32),  *(void (**)(__n128))(v0 + 40),  *(void *)(v0 + 48));
}

uint64_t sub_100264118()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100264128()
{
  uint64_t v1 = type metadata accessor for SecureLocation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;

  swift_bridgeObjectRelease();
  uint64_t v7 = v0 + v4 + *(int *)(v1 + 52);
  uint64_t v8 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1002641F8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SecureLocation(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_10025D5D4( a1,  *(dispatch_group_s **)(v1 + 16),  v1 + v4,  *(void *)(v1 + v5),  *(void *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFF8LL)));
}

void sub_100264258()
{
}

uint64_t sub_100264270()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100264294(uint64_t a1)
{
}

void *sub_1002642A0(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for SecureLocationsEncodedPushPayload(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

void *assignWithTake for SecureLocationsEncodedPushPayload(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MessagingDestination(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MessagingDestination(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + swift_weakDestroy(v0 + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsEncodedPushPayload()
{
  return &type metadata for SecureLocationsEncodedPushPayload;
}

uint64_t *sub_10026441C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v26 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v26 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    unint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = *(uint64_t *)((char *)a2 + v8);
    uint64_t v12 = *((void *)v10 + 1);
    *(void *)unint64_t v9 = v11;
    *((void *)v9 + 1) = v12;
    __int128 v13 = *((_OWORD *)v10 + 2);
    *((_OWORD *)v9 + 1) = *((_OWORD *)v10 + 1);
    *((_OWORD *)v9 + 2) = v13;
    *((_OWORD *)v9 + 3) = *((_OWORD *)v10 + 3);
    uint64_t v14 = *((void *)v10 + 9);
    *((void *)v9 + 8) = *((void *)v10 + 8);
    *((void *)v9 + 9) = v14;
    v9[80] = v10[80];
    uint64_t v15 = (int *)type metadata accessor for SecureLocation(0LL);
    uint64_t v16 = v15[13];
    uint64_t v17 = &v9[v16];
    uint64_t v18 = &v10[v16];
    uint64_t v19 = type metadata accessor for Date(0LL);
    os_log_type_t v20 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v19 - 8) + 16LL);
    __n128 v21 = swift_bridgeObjectRetain(v12);
    v20(v17, v18, v19, v21);
    *(void *)&v9[v15[14]] = *(void *)&v10[v15[14]];
    *(void *)&v9[v15[15]] = *(void *)&v10[v15[15]];
    uint64_t v22 = v15[16];
    uint64_t v23 = &v9[v22];
    uint64_t v24 = &v10[v22];
    uint64_t v25 = *((void *)v24 + 1);
    *(void *)uint64_t v23 = *(void *)v24;
    *((void *)v23 + 1) = v25;
    swift_bridgeObjectRetain(v25);
  }

  return a1;
}

uint64_t sub_100264558(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  uint64_t v6 = v5 + *(int *)(type metadata accessor for SecureLocation(0LL) + 52);
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002645E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  *(void *)uint64_t v8 = *(void *)(a2 + v7);
  *(void *)(v8 + 8) = v10;
  __int128 v11 = *(_OWORD *)(a2 + v7 + 32);
  *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + v7 + 16);
  *(_OWORD *)(v8 + 32) = v11;
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(a2 + v7 + 48);
  uint64_t v12 = *(void *)(a2 + v7 + 72);
  *(void *)(v8 + 64) = *(void *)(a2 + v7 + 64);
  *(void *)(v8 + 72) = v12;
  *(_BYTE *)(v8 + 80) = *(_BYTE *)(a2 + v7 + 80);
  __int128 v13 = (int *)type metadata accessor for SecureLocation(0LL);
  uint64_t v14 = v13[13];
  uint64_t v15 = v8 + v14;
  uint64_t v16 = v9 + v14;
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v17 - 8) + 16LL);
  __n128 v19 = swift_bridgeObjectRetain(v10);
  v18(v15, v16, v17, v19);
  *(void *)(v8 + v13[14]) = *(void *)(v9 + v13[14]);
  *(void *)(v8 + v13[15]) = *(void *)(v9 + v13[15]);
  uint64_t v20 = v13[16];
  __n128 v21 = (void *)(v8 + v20);
  uint64_t v22 = (void *)(v9 + v20);
  uint64_t v23 = v22[1];
  *__n128 v21 = *v22;
  v21[1] = v23;
  swift_bridgeObjectRetain(v23);
  return a1;
}

uint64_t sub_1002646F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)(a2 + v7);
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  *(void *)(v8 + 8) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = *(void *)(v9 + 16);
  *(void *)(v8 + 24) = *(void *)(v9 + 24);
  *(void *)(v8 + 32) = *(void *)(v9 + 32);
  *(void *)(v8 + 40) = *(void *)(v9 + 40);
  *(void *)(v8 + 48) = *(void *)(v9 + 48);
  *(void *)(v8 + 56) = *(void *)(v9 + 56);
  *(void *)(v8 + 64) = *(void *)(v9 + 64);
  uint64_t v11 = *(void *)(v9 + 72);
  *(_BYTE *)(v8 + 80) = *(_BYTE *)(v9 + 80);
  *(void *)(v8 + 72) = v11;
  uint64_t v12 = (int *)type metadata accessor for SecureLocation(0LL);
  uint64_t v13 = v12[13];
  uint64_t v14 = v8 + v13;
  uint64_t v15 = v9 + v13;
  uint64_t v16 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 24LL))(v14, v15, v16);
  *(void *)(v8 + v12[14]) = *(void *)(v9 + v12[14]);
  *(void *)(v8 + v12[15]) = *(void *)(v9 + v12[15]);
  uint64_t v17 = v12[16];
  uint64_t v18 = (void *)(v8 + v17);
  __n128 v19 = (void *)(v9 + v17);
  *uint64_t v18 = *v19;
  uint64_t v20 = v19[1];
  v18[1] = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100264840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  __int128 v10 = *(_OWORD *)(a2 + v7 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)(a2 + v7);
  *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = v10;
  __int128 v11 = *(_OWORD *)(a2 + v7 + 48);
  *(_OWORD *)(v8 + 32) = *(_OWORD *)(a2 + v7 + 32);
  *(_OWORD *)(v8 + 48) = v11;
  uint64_t v12 = *(void *)(a2 + v7 + 72);
  *(void *)(v8 + 64) = *(void *)(a2 + v7 + 64);
  *(void *)(v8 + 72) = v12;
  *(_BYTE *)(v8 + 80) = *(_BYTE *)(a2 + v7 + 80);
  uint64_t v13 = (int *)type metadata accessor for SecureLocation(0LL);
  uint64_t v14 = v13[13];
  uint64_t v15 = v8 + v14;
  uint64_t v16 = v9 + v14;
  uint64_t v17 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 32LL))(v15, v16, v17);
  *(void *)(v8 + v13[14]) = *(void *)(v9 + v13[14]);
  *(void *)(v8 + v13[15]) = *(void *)(v9 + v13[15]);
  *(_OWORD *)(v8 + v13[16]) = *(_OWORD *)(v9 + v13[16]);
  return a1;
}

uint64_t sub_100264920(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  *(void *)uint64_t v8 = *(void *)(a2 + v7);
  *(void *)(v8 + 8) = v10;
  swift_bridgeObjectRelease();
  __int128 v11 = *(_OWORD *)(v9 + 32);
  *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(v9 + 16);
  *(_OWORD *)(v8 + 32) = v11;
  *(_OWORD *)(v8 + 48) = *(_OWORD *)(v9 + 48);
  *(void *)(v8 + 64) = *(void *)(v9 + 64);
  *(void *)(v8 + 72) = *(void *)(v9 + 72);
  *(_BYTE *)(v8 + 80) = *(_BYTE *)(v9 + 80);
  uint64_t v12 = (int *)type metadata accessor for SecureLocation(0LL);
  uint64_t v13 = v12[13];
  uint64_t v14 = v8 + v13;
  uint64_t v15 = v9 + v13;
  uint64_t v16 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 40LL))(v14, v15, v16);
  *(void *)(v8 + v12[14]) = *(void *)(v9 + v12[14]);
  *(void *)(v8 + v12[15]) = *(void *)(v9 + v12[15]);
  uint64_t v17 = v12[16];
  uint64_t v18 = (void *)(v8 + v17);
  __n128 v19 = (uint64_t *)(v9 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  *uint64_t v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_100264A28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100264A34);
}

uint64_t sub_100264A34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v8 = type metadata accessor for SecureLocation(0LL);
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_100264AA8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100264AB4);
}

uint64_t sub_100264AB4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    __int128 v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v10 = type metadata accessor for SecureLocation(0LL);
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    __int128 v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_100264B30(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for SecureLocation(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 2LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsEncodedPayload.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100264C00 + 4 * byte_1007F8089[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100264C34 + 4 * byte_1007F8084[v4]))();
}

uint64_t sub_100264C34(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100264C3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100264C44LL);
  }
  return result;
}

uint64_t sub_100264C50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100264C58LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_100264C5C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100264C64(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsEncodedPayload.CodingKeys()
{
  return &type metadata for SecureLocationsEncodedPayload.CodingKeys;
}

uint64_t initializeWithCopy for SecureLocationsEncodedInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_10001736C(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for SecureLocationsEncodedInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_10001736C(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_100016F9C(v6, v7);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithTake for SecureLocationsEncodedInfo(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016F9C(v4, v5);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsEncodedInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 254);
  }
  else {
    int v3 = *(unsigned __int8 *)(a1 + 24);
  }
  int v4 = v3 - 3;
  else {
    int v5 = v4;
  }
  return (v5 + 1);
}

ValueMetadata *type metadata accessor for SecureLocationsEncodedInfo()
{
  return &type metadata for SecureLocationsEncodedInfo;
}

unint64_t sub_100264DD8()
{
  unint64_t result = qword_1009A71C8;
  if (!qword_1009A71C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F826C, &type metadata for SecureLocationsEncodedPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A71C8);
  }

  return result;
}

uint64_t sub_100264E1C()
{
  return sub_100007864( &qword_1009A71D0,  type metadata accessor for SecureLocationsCachedPayload,  (uint64_t)&unk_1007F8294);
}

uint64_t sub_100264E48(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100007864( &qword_1009A71D8,  type metadata accessor for SecureLocationsCachedPayload,  (uint64_t)&unk_1007F8390);
  uint64_t result = sub_100007864( &qword_1009A71E0,  type metadata accessor for SecureLocationsCachedPayload,  (uint64_t)&unk_1007F8340);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_100264EA8()
{
  unint64_t result = qword_1009A71E8;
  if (!qword_1009A71E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F81DC, &type metadata for SecureLocationsEncodedPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A71E8);
  }

  return result;
}

unint64_t sub_100264EF0()
{
  unint64_t result = qword_1009A71F0;
  if (!qword_1009A71F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F8204, &type metadata for SecureLocationsEncodedPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A71F0);
  }

  return result;
}

unint64_t sub_100264F34()
{
  unint64_t result = qword_1009A7200;
  if (!qword_1009A7200)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F8838, &type metadata for SecureLocationsEncodedInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A7200);
  }

  return result;
}

unint64_t sub_100264F78()
{
  unint64_t result = qword_1009A7208;
  if (!qword_1009A7208)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F8810, &type metadata for SecureLocationsPayloadFormat);
    atomic_store(result, (unint64_t *)&qword_1009A7208);
  }

  return result;
}

unint64_t sub_100264FBC()
{
  unint64_t result = qword_1009A7218;
  if (!qword_1009A7218)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F87E8, &type metadata for SecureLocationsPayloadFormat);
    atomic_store(result, (unint64_t *)&qword_1009A7218);
  }

  return result;
}

unint64_t sub_100265000()
{
  unint64_t result = qword_1009A7228;
  if (!qword_1009A7228)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F8798, &type metadata for SecureLocationsCachedPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A7228);
  }

  return result;
}

unint64_t sub_100265044()
{
  unint64_t result = qword_1009A7238;
  if (!qword_1009A7238)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F8748, &type metadata for SecureLocationsEncodedPushPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A7238);
  }

  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsEncodedPushPayload.CodingKeys()
{
  return &type metadata for SecureLocationsEncodedPushPayload.CodingKeys;
}

ValueMetadata *type metadata accessor for SecureLocationsCachedPayload.CodingKeys()
{
  return &type metadata for SecureLocationsCachedPayload.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsEncodedInfo.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1002650F8 + 4 * byte_1007F8093[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10026512C + 4 * byte_1007F808E[v4]))();
}

uint64_t sub_10026512C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100265134(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10026513CLL);
  }
  return result;
}

uint64_t sub_100265148(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100265150LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100265154(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10026515C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsEncodedInfo.CodingKeys()
{
  return &type metadata for SecureLocationsEncodedInfo.CodingKeys;
}

uint64_t _s12searchpartyd28SecureLocationsPayloadFormatOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1002651C4 + 4 * byte_1007F809D[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1002651F8 + 4 * byte_1007F8098[v4]))();
}

uint64_t sub_1002651F8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100265200(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100265208LL);
  }
  return result;
}

uint64_t sub_100265214(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10026521CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100265220(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100265228(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsPayloadFormat()
{
  return &type metadata for SecureLocationsPayloadFormat;
}

unint64_t sub_100265248()
{
  unint64_t result = qword_1009A7250;
  if (!qword_1009A7250)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F84F8, &type metadata for SecureLocationsPayloadFormat);
    atomic_store(result, (unint64_t *)&qword_1009A7250);
  }

  return result;
}

unint64_t sub_100265290()
{
  unint64_t result = qword_1009A7258;
  if (!qword_1009A7258)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F85B0, &type metadata for SecureLocationsEncodedInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A7258);
  }

  return result;
}

unint64_t sub_1002652D8()
{
  unint64_t result = qword_1009A7260;
  if (!qword_1009A7260)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F8668, &type metadata for SecureLocationsCachedPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A7260);
  }

  return result;
}

unint64_t sub_100265320()
{
  unint64_t result = qword_1009A7268;
  if (!qword_1009A7268)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F8720, &type metadata for SecureLocationsEncodedPushPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A7268);
  }

  return result;
}

unint64_t sub_100265368()
{
  unint64_t result = qword_1009A7270;
  if (!qword_1009A7270)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F8690, &type metadata for SecureLocationsEncodedPushPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A7270);
  }

  return result;
}

unint64_t sub_1002653B0()
{
  unint64_t result = qword_1009A7278;
  if (!qword_1009A7278)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F86B8, &type metadata for SecureLocationsEncodedPushPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A7278);
  }

  return result;
}

unint64_t sub_1002653F8()
{
  unint64_t result = qword_1009A7280;
  if (!qword_1009A7280)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F85D8, &type metadata for SecureLocationsCachedPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A7280);
  }

  return result;
}

unint64_t sub_100265440()
{
  unint64_t result = qword_1009A7288;
  if (!qword_1009A7288)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F8600, &type metadata for SecureLocationsCachedPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A7288);
  }

  return result;
}

unint64_t sub_100265488()
{
  unint64_t result = qword_1009A7290;
  if (!qword_1009A7290)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F8520, &type metadata for SecureLocationsEncodedInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A7290);
  }

  return result;
}

unint64_t sub_1002654D0()
{
  unint64_t result = qword_1009A7298;
  if (!qword_1009A7298)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F8548, &type metadata for SecureLocationsEncodedInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A7298);
  }

  return result;
}

unint64_t sub_100265514()
{
  unint64_t result = qword_1009A72A0;
  if (!qword_1009A72A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F8480, &type metadata for SecureLocationsPayloadFormat);
    atomic_store(result, (unint64_t *)&qword_1009A72A0);
  }

  return result;
}

uint64_t sub_100265570()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A440);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2A440);
  if (qword_10099B218 != -1) {
    swift_once(&qword_10099B218, sub_1002663E8);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_100A2A458);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_100265600()
{
  void v1[4] = v0;
  uint64_t v2 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  v1[5] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[6] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[7] = swift_task_alloc(v4);
  v1[8] = swift_task_alloc(v4);
  return swift_task_switch(sub_100265670, v0, 0LL);
}

uint64_t sub_100265670(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 56);
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  static SystemInfo.lockState.getter(a1);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))( v3,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v4);
  uint64_t v6 = sub_100015C48( &qword_1009B0560,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter((void *)(v1 + 16), v4, v6);
  dispatch thunk of RawRepresentable.rawValue.getter((void *)(v1 + 24), v4, v6);
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v9(v3, v4);
  v9(v2, v4);
  if (v8 == v7)
  {
    sub_100265820();
  }

  else
  {
    if (qword_10099B210 != -1) {
      swift_once(&qword_10099B210, sub_100265570);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = sub_10000A720(v10, (uint64_t)qword_100A2A440);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Device is already unlocked -- not registering", v14, 2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }
  }

  uint64_t v15 = *(void *)(v1 + 56);
  swift_task_dealloc(*(void *)(v1 + 64));
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

void sub_100265820()
{
  uint64_t v1 = v0;
  uint64_t v2 = *(void *)v0;
  sub_100004AB0();
  uint64_t v3 = (dispatch_queue_s *)static OS_dispatch_queue.main.getter();
  uint64_t v4 = swift_allocObject(&unk_10094C020, 32LL, 7LL);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v0;
  *(void *)(v4 + 24) = v2;
  v11[4] = sub_10026648C;
  v11[5] = v4;
  v11[0] = _NSConcreteStackBlock;
  v11[1] = 1107296256LL;
  v11[2] = sub_100265B4C;
  v11[3] = &unk_10094C038;
  uint64_t v5 = _Block_copy(v11);
  swift_retain();
  swift_release();
  v1 += 34;
  swift_beginAccess(v1, v11, 33LL, 0LL);
  notify_register_dispatch("com.apple.mobile.keybagd.lock_status", v1, v3, v5);
  swift_endAccess(v11);
  _Block_release(v5);

  if (qword_10099B210 != -1) {
    swift_once(&qword_10099B210, sub_100265570);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_10000A720(v6, (uint64_t)qword_100A2A440);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "Registered handler for kMobileKeyBagLockStatusNotificationID",  v10,  2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }
}

uint64_t sub_1002659C4(int a1, uint64_t a2)
{
  if (qword_10099B210 != -1) {
    swift_once(&qword_10099B210, sub_100265570);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2A440);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "Received kMobileKeyBagLockStatusNotificationID notification",  v8,  2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  type metadata accessor for Transaction(0LL);
  uint64_t v9 = swift_allocObject(&unk_10094C070, 28LL, 7LL);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = a2;
  *(_DWORD *)(v9 + 24) = a1;
  swift_retain();
  static Transaction.asyncTask(name:block:)("FirstUnlock", 11LL, 2LL, &unk_1009A73D8, v9);
  return swift_release();
}

uint64_t sub_100265AF8(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + 24) = a2;
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  return swift_task_switch(sub_100265B18, a1, 0LL);
}

uint64_t sub_100265B18()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100265B4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  v4(a2);
  return swift_release(v3);
}

void sub_100265B88(int a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100004AEC(&qword_1009B1040);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  os_log_type_t v7 = &v38[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v8 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = &v38[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = &v38[-v14 - 8];
  static SystemInfo.lockState.getter(v13);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))( v12,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v8);
  uint64_t v16 = sub_100015C48( (unint64_t *)&qword_1009A2650,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  char v17 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v12, v8, v16);
  uint64_t v18 = *(void (**)(char *, uint64_t))(v9 + 8);
  v18(v12, v8);
  v18(v15, v8);
  if ((v17 & 1) != 0)
  {
    if (qword_10099B210 != -1) {
      swift_once(&qword_10099B210, sub_100265570);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    uint64_t v20 = sub_10000A720(v19, (uint64_t)qword_100A2A440);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "still locked -- keep listening", v23, 2u);
      swift_slowDealloc(v23, -1LL, -1LL);
    }
  }

  else
  {
    notify_cancel(a1);
    swift_beginAccess(v2 + 136, v41, 1LL, 0LL);
    *(_DWORD *)(v2 + 136) = 0;
    if (qword_10099B210 != -1) {
      swift_once(&qword_10099B210, sub_100265570);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_10000A720(v24, (uint64_t)qword_100A2A440);
    uint64_t v25 = swift_retain();
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v28 = 134217984;
      swift_beginAccess(v2 + 128, v38, 0LL, 0LL);
      uint64_t v39 = *(void *)(*(void *)(v2 + 128) + 16LL);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, &v40, v28 + 4, v28 + 12);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Notifying %ld clients of first unlock", v28, 0xCu);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    else
    {

      swift_release();
    }

    uint64_t v29 = (void *)(v2 + 128);
    swift_beginAccess(v2 + 128, &v39, 1LL, 0LL);
    uint64_t v30 = *(void *)(v2 + 128);
    uint64_t v31 = *(void *)(v30 + 16);
    if (v31)
    {
      uint64_t v32 = v30 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      uint64_t v33 = *(void *)(v5 + 72);
      uint64_t v34 = *(uint64_t (**)(char *, uint64_t, uint64_t, __n128))(v5 + 16);
      __n128 v35 = swift_bridgeObjectRetain(v30);
      do
      {
        uint64_t v36 = v34(v7, v32, v4, v35);
        CheckedContinuation.resume(returning:)(v36, v4);
        (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
        v32 += v33;
        --v31;
      }

      while (v31);
      swift_bridgeObjectRelease();
    }

    *uint64_t v29 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRelease();
  }

uint64_t sub_100265F64()
{
  void v1[4] = v0;
  uint64_t v2 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  v1[5] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[6] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[7] = swift_task_alloc(v4);
  v1[8] = swift_task_alloc(v4);
  return swift_task_switch(sub_100265FD4, v0, 0LL);
}

uint64_t sub_100265FD4(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 56);
  uint64_t v2 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(v1 + 40);
  uint64_t v5 = *(void *)(v1 + 48);
  static SystemInfo.lockState.getter(a1);
  (*(void (**)(uint64_t, void, uint64_t))(v5 + 104))( v3,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v4);
  uint64_t v6 = sub_100015C48( &qword_1009B0560,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter((void *)(v1 + 16), v4, v6);
  dispatch thunk of RawRepresentable.rawValue.getter((void *)(v1 + 24), v4, v6);
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v9(v3, v4);
  v9(v2, v4);
  if (v8 == v7)
  {
    uint64_t v11 = *(void *)(v1 + 32);
    uint64_t v12 = sub_100015C48( &qword_1009A73C8,  v10,  (uint64_t (*)(uint64_t))type metadata accessor for FirstUnlockService,  (uint64_t)&unk_1007F8930);
    uint64_t v13 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
    *(void *)(v1 + 72) = v13;
    *uint64_t v13 = v1;
    v13[1] = sub_100266168;
    return withCheckedContinuation<A>(isolation:function:_:)( v13,  v11,  v12,  0xD000000000000014LL,  0x800000010085B130LL,  sub_1002663E0,  *(void *)(v1 + 32),  (char *)&type metadata for () + 8);
  }

  else
  {
    uint64_t v15 = *(void *)(v1 + 56);
    swift_task_dealloc(*(void *)(v1 + 64));
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

uint64_t sub_100266168()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 72LL));
  return swift_task_switch(sub_1002661C0, v1, 0LL);
}

uint64_t sub_1002661C0()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 64));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002661F8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009B1040);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v8 = (unint64_t *)(a2 + 128);
  swift_beginAccess(a2 + 128, v15, 33LL, 0LL);
  unint64_t v9 = *(void *)(a2 + 128);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v9);
  *(void *)(a2 + 128) = v9;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v9 = sub_1004C5B30(0, *(void *)(v9 + 16) + 1LL, 1, v9);
    *uint64_t v8 = v9;
  }

  unint64_t v12 = *(void *)(v9 + 16);
  unint64_t v11 = *(void *)(v9 + 24);
  if (v12 >= v11 >> 1)
  {
    unint64_t v9 = sub_1004C5B30(v11 > 1, v12 + 1, 1, v9);
    *uint64_t v8 = v9;
  }

  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v12 + 1;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v5 + 32))( v9 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80))
  + *(void *)(v5 + 72) * v12,
    v7,
    v4);
  return swift_endAccess(v15);
}

uint64_t type metadata accessor for FirstUnlockService()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd18FirstUnlockService);
}

uint64_t sub_100266360()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1009A72D4);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100015D58;
  return sub_100265600();
}

uint64_t sub_1002663A4(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100015C48( &qword_1009A73C8,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for FirstUnlockService,  (uint64_t)&unk_1007F8930);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1002663E0(uint64_t a1)
{
  return sub_1002661F8(a1, v1);
}

uint64_t sub_1002663E8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A458);
  sub_10000A720(v0, (uint64_t)qword_100A2A458);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000012LL,  0x80000001007F88D0LL);
}

uint64_t sub_100266468()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10026648C(int a1)
{
  return sub_1002659C4(a1, *(void *)(v1 + 16));
}

uint64_t sub_100266494(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002664A4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1002664AC()
{
  return swift_deallocObject(v0, 28LL, 7LL);
}

uint64_t sub_1002664D0()
{
  uint64_t v2 = *(void *)(v0 + 16);
  int v3 = *(_DWORD *)(v0 + 24);
  uint64_t v4 = swift_task_alloc(dword_1009A73D4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  *(void *)uint64_t v4 = v1;
  *(void *)(v4 + 8) = sub_1000159BC;
  *(_DWORD *)(v4 + 24) = v3;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v2;
  return swift_task_switch(sub_100265B18, v2, 0LL);
}

ValueMetadata *type metadata accessor for BACharacteristicIdentifier()
{
  return &type metadata for BACharacteristicIdentifier;
}

uint64_t storeEnumTagSinglePayload for BACharacteristicIdentifier.AccessoryInformation( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_100266594 + 4 * byte_1007F8965[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1002665C8 + 4 * byte_1007F8960[v4]))();
}

uint64_t sub_1002665C8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002665D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1002665D8LL);
  }
  return result;
}

uint64_t sub_1002665E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1002665ECLL);
  }
  *(_BYTE *)uint64_t result = a2 + 8;
  return result;
}

uint64_t sub_1002665F0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002665F8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BACharacteristicIdentifier.AccessoryInformation()
{
  return &type metadata for BACharacteristicIdentifier.AccessoryInformation;
}

uint64_t storeEnumTagSinglePayload for BACharacteristicIdentifier.FindMy( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_100266660 + 4 * byte_1007F896F[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_100266694 + 4 * byte_1007F896A[v4]))();
}

uint64_t sub_100266694(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10026669C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1002666A4LL);
  }
  return result;
}

uint64_t sub_1002666B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1002666B8LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1002666BC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002666C4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BACharacteristicIdentifier.FindMy()
{
  return &type metadata for BACharacteristicIdentifier.FindMy;
}

uint64_t storeEnumTagSinglePayload for BAServiceIdentifier(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10026672C + 4 * byte_1007F8979[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_100266760 + 4 * byte_1007F8974[v4]))();
}

uint64_t sub_100266760(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100266768(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100266770LL);
  }
  return result;
}

uint64_t sub_10026677C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100266784LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100266788(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100266790(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BAServiceIdentifier()
{
  return &type metadata for BAServiceIdentifier;
}

uint64_t sub_1002667AC()
{
  return sub_1001886EC(&qword_1009A73E0, &qword_1009A73E8);
}

void sub_1002667D0(void *a1@<X8>)
{
  *a1 = &off_1009340E8;
}

unint64_t sub_1002667E4()
{
  unint64_t result = qword_1009A73F0;
  if (!qword_1009A73F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F8A4C, &type metadata for BAServiceIdentifier);
    atomic_store(result, (unint64_t *)&qword_1009A73F0);
  }

  return result;
}

unint64_t sub_10026682C()
{
  unint64_t result = qword_1009A73F8;
  if (!qword_1009A73F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F8AB4, &type metadata for BACharacteristicIdentifier.FindMy);
    atomic_store(result, (unint64_t *)&qword_1009A73F8);
  }

  return result;
}

void sub_100266870(char a1)
{
  uint64_t v2 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v10 = __chkstk_darwin(v9);
  __chkstk_darwin(v10);
  __asm { BR              X10 }

uint64_t sub_1002669CC()
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v0, 1LL, v2) == 1)
  {
    __break(1u);
    JUMPOUT(0x100266D34LL);
  }

  return (*(uint64_t (**)(void, uint64_t, uint64_t))(v3 + 32))(*(void *)(v1 - 88), v0, v2);
}

void sub_100266D78()
{
}

void sub_100266D80(void *a1@<X8>)
{
  *a1 = &off_1009340B8;
}

void sub_100266D90(char a1)
{
  uint64_t v2 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v6 = __chkstk_darwin(v5);
  __chkstk_darwin(v6);
  __asm { BR              X10 }

uint64_t sub_100266E74()
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1LL, v2) == 1)
  {
    __break(1u);
    JUMPOUT(0x100267074LL);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v0, v1, v2);
}

uint64_t sub_10026708C()
{
  return sub_1001886EC(&qword_1009A7400, &qword_1009A7408);
}

unint64_t sub_1002670B4()
{
  unint64_t result = qword_1009A7410;
  if (!qword_1009A7410)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F8B54, &type metadata for BACharacteristicIdentifier.AccessoryInformation);
    atomic_store(result, (unint64_t *)&qword_1009A7410);
  }

  return result;
}

void sub_1002670F8()
{
}

void sub_100267100(uint64_t a1)
{
  uint64_t v1 = a1;
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    if (a1 < 0) {
      uint64_t v2 = a1;
    }
    else {
      uint64_t v2 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = __CocoaSet.makeIterator()(v2);
    uint64_t v4 = type metadata accessor for AnyCancellable(0LL);
    uint64_t v5 = sub_100007864( (unint64_t *)&unk_1009AC370,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
    uint64_t v6 = Set.Iterator.init(_cocoa:)(v27, v3, v4, v5);
    uint64_t v1 = v27[0];
    uint64_t v25 = v27[1];
    uint64_t v7 = v27[2];
    uint64_t v8 = v27[3];
    unint64_t v9 = v27[4];
  }

  else
  {
    uint64_t v10 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v25 = a1 + 56;
    uint64_t v7 = ~v10;
    uint64_t v11 = -v10;
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v9 = v12 & *(void *)(a1 + 56);
    swift_bridgeObjectRetain(a1);
    uint64_t v8 = 0LL;
  }

  int64_t v13 = (unint64_t)(v7 + 64) >> 6;
  if (v1 < 0) {
    goto LABEL_13;
  }
  while (1)
  {
    if (v9)
    {
      uint64_t v14 = (v9 - 1) & v9;
      unint64_t v15 = __clz(__rbit64(v9)) | (v8 << 6);
      uint64_t v16 = v8;
      goto LABEL_32;
    }

    int64_t v21 = v8 + 1;
    if (__OFADD__(v8, 1LL)) {
      break;
    }
    if (v21 >= v13) {
      goto LABEL_35;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    uint64_t v16 = v8 + 1;
    if (!v22)
    {
      uint64_t v16 = v8 + 2;
      if (v8 + 2 >= v13) {
        goto LABEL_35;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v16);
      if (!v22)
      {
        uint64_t v16 = v8 + 3;
        if (v8 + 3 >= v13) {
          goto LABEL_35;
        }
        unint64_t v22 = *(void *)(v25 + 8 * v16);
        if (!v22)
        {
          uint64_t v16 = v8 + 4;
          if (v8 + 4 >= v13) {
            goto LABEL_35;
          }
          unint64_t v22 = *(void *)(v25 + 8 * v16);
          if (!v22)
          {
            uint64_t v16 = v8 + 5;
            if (v8 + 5 >= v13) {
              goto LABEL_35;
            }
            unint64_t v22 = *(void *)(v25 + 8 * v16);
            if (!v22)
            {
              uint64_t v23 = v8 + 6;
              while (v13 != v23)
              {
                unint64_t v22 = *(void *)(v25 + 8 * v23++);
                if (v22)
                {
                  uint64_t v16 = v23 - 1;
                  goto LABEL_31;
                }
              }

id sub_1002673A0@<X0>(void **a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *a1;
  *a2 = v2;
  return v2;
}

uint64_t sub_1002673AC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A470);
  sub_10000A720(v0, (uint64_t)qword_100A2A470);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x6D6F4372656E776FLL,  0xEC000000646E616DLL);
}

uint64_t sub_100267428()
{
  v1[3] = v0;
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009B9450);
  void v1[4] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for CentralManager.Options(0LL);
  v1[5] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[6] = v4;
  v1[7] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1002674AC, v0, 0LL);
}

uint64_t sub_1002674AC()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 24) + 112LL);
  uint64_t v2 = *(void *)(v0 + 56);
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 32);
    swift_retain();
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
  }

  else
  {
    uint64_t v5 = *(void *)(v0 + 40);
    uint64_t v6 = *(void *)(v0 + 48);
    uint64_t v7 = *(void *)(v0 + 32);
    uint64_t v8 = sub_100004AEC(&qword_1009A7C68);
    uint64_t v9 = swift_allocObject( v8,  ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80))
         + 3LL * *(void *)(v6 + 72),
           *(unsigned __int8 *)(v6 + 80) | 7LL);
    *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_1007E4050;
    uint64_t v10 = static CentralManager.Options.enableFindMy.getter();
    uint64_t v11 = static CentralManager.Options.receiveSystemEvents.getter(v10);
    static CentralManager.Options.receiveIncomingObjectDiscoveryData.getter(v11);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v9;
    uint64_t v12 = sub_100007864( (unint64_t *)&unk_1009B9460,  (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager.Options,  (uint64_t)&protocol conformance descriptor for CentralManager.Options);
    uint64_t v13 = sub_100004AEC(&qword_1009A7C70);
    uint64_t v14 = sub_1000372EC( (unint64_t *)&unk_1009B9470,  &qword_1009A7C70,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 16, v13, v14, v5, v12);
    type metadata accessor for CentralManager(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v7, v2, v5);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v7, 0LL, 1LL, v5);
    unint64_t v15 = (void *)swift_task_alloc(async function pointer to CentralManager.__allocating_init(options:)[1]);
    *(void *)(v0 + 64) = v15;
    *unint64_t v15 = v0;
    v15[1] = sub_100267678;
    return CentralManager.__allocating_init(options:)(*(void *)(v0 + 32));
  }

uint64_t sub_100267678(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 64LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 24LL);
  *(void *)(*(void *)v1 + 72LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002676D8, v3, 0LL);
}

uint64_t sub_1002676D8()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 24);
  (*(void (**)(void, void))(*(void *)(v0 + 48) + 8LL))(*(void *)(v0 + 56), *(void *)(v0 + 40));
  uint64_t v3 = *(void *)(v2 + 112);
  *(void *)(v2 + 112) = v1;
  swift_retain(v1);
  swift_release(v3);
  uint64_t v4 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 32);
  swift_task_dealloc(*(void *)(v0 + 56));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v4);
}

uint64_t sub_100267758()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for OwnerCommandManagerAccessController()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartydP33_1176F63AB7943FF661C3FB24903269B835OwnerCommandManagerAccessController);
}

uint64_t sub_10026779C()
{
  uint64_t v0 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0LL);
  sub_10000A8AC(v0, qword_1009A7418);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_1009A7418);
  return static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(v1, 60.0);
}

uint64_t sub_1002677EC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_1009A7430);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_1009A7430);
  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_100A2A470);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

void sub_10026787C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for OwnerCommandManager.Error(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(v0, (uint64_t)v4, v5);
  uint64_t v6 = (char *)sub_100267954 + 4 * byte_1007F8BE0[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }

uint64_t sub_100267954()
{
  *(void *)(v4 - 64) = 0LL;
  *(void *)(v4 - 56) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(30LL);
  swift_bridgeObjectRelease();
  *(void *)(v4 - 64) = 0xD00000000000001CLL;
  *(void *)(v4 - 56) = 0x800000010085B4F0LL;
  uint64_t v5 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v5);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(void *)(v4 - 64);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
  return v7;
}

uint64_t sub_100267D08(uint64_t a1, void *a2, void *a3, void (*a4)(uint64_t, uint64_t))
{
  v248 = a4;
  id v253 = a3;
  id v255 = a2;
  uint64_t v238 = type metadata accessor for DispatchTime(0LL);
  uint64_t v236 = *(void *)(v238 - 8);
  uint64_t v6 = __chkstk_darwin(v238);
  v235 = (char *)&v228 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  v237 = (char *)&v228 - v8;
  uint64_t v246 = type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin(v246);
  v247 = (char *)&v228 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v256 = type metadata accessor for UUID(0LL);
  v254 = *(os_log_s **)(v256 - 8);
  uint64_t v10 = __chkstk_darwin(v256);
  v251 = (char *)&v228 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  v244 = (char *)&v228 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  v231 = (char *)&v228 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  v232 = (char *)&v228 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  v240 = (uint64_t *)((char *)&v228 - v19);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v233 = (uint64_t)&v228 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  v239 = (char *)&v228 - v23;
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v228 - v24;
  uint64_t v245 = type metadata accessor for AccessoryCommand(0LL);
  __chkstk_darwin(v245);
  os_log_type_t v27 = (char *)&v228 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v31 = (uint64_t *)((char *)&v228 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v32 = (void *)v4[9];
  *uint64_t v31 = v32;
  (*(void (**)(void *, void, uint64_t))(v29 + 104))(v31, enum case for DispatchPredicate.onQueue(_:), v28);
  id v33 = v32;
  char v34 = _dispatchPreconditionTest(_:)(v31);
  (*(void (**)(void *, uint64_t))(v29 + 8))(v31, v28);
  if ((v34 & 1) != 0)
  {
    if (qword_10099B230 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B230, sub_1002677EC);
LABEL_3:
  uint64_t v241 = type metadata accessor for Logger(0LL);
  __n128 v35 = (uint8_t *)sub_10000A720(v241, (uint64_t)qword_1009A7430);
  uint64_t v243 = a1;
  sub_10001DC4C(a1, (uint64_t)v27, type metadata accessor for AccessoryCommand);
  uint64_t v36 = (uint8_t *)v253;
  v250 = v35;
  uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v38 = static os_log_type_t.default.getter(v37);
  BOOL v39 = os_log_type_enabled(v37, v38);
  v252 = v4;
  id v253 = v25;
  id v234 = v33;
  if (v39)
  {
    uint64_t v40 = swift_slowAlloc(22LL, -1LL);
    uint64_t v242 = swift_slowAlloc(64LL, -1LL);
    uint64_t aBlock = v242;
    *(_DWORD *)uint64_t v40 = 136446466;
    v230 = (uint64_t *)(v40 + 4);
    id v41 = [*(id *)&v36[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v41);

    uint64_t v42 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v43 = v25;
    uint64_t v44 = v256;
    uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter(v256, v42);
    unint64_t v47 = v46;
    (*((void (**)(char *, uint64_t))v254 + 1))(v43, v44);
    uint64_t v268 = sub_1003F11D4(v45, v47, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, v269, v230, v40 + 12);
    swift_bridgeObjectRelease();

    *(_WORD *)(v40 + 12) = 2082;
    uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter(v44, v42);
    uint64_t v268 = sub_1003F11D4(v48, v49, &aBlock);
    uint64_t v50 = v252;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v268, v269, v40 + 14, v40 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v27, type metadata accessor for AccessoryCommand);
    _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "Cleaning up for peripheral %{public}s CommandId %{public}s",  (uint8_t *)v40,  0x16u);
    uint64_t v51 = v242;
    swift_arrayDestroy(v242, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v51, -1LL, -1LL);
    swift_slowDealloc(v40, -1LL, -1LL);
  }

  else
  {

    sub_100018C68((uint64_t)v27, type metadata accessor for AccessoryCommand);
    uint64_t v50 = v4;
  }

  v50[12] = 0LL;
  uint64_t v52 = swift_release();
  if (v248)
  {
    OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_10028B0D0,  v248,  *((void *)v248 + 2),  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
    uint64_t aBlock = 12LL;
    __int128 v263 = 0u;
    __int128 v264 = 0u;
    LOBYTE(v265) = 11;
    sub_1004C30A4(&aBlock);
    uint64_t v52 = (uint64_t)sub_1002543B0(&aBlock);
  }

  uint64_t v53 = v256;
  __chkstk_darwin(v52);
  *(&v228 - 2) = v54;
  *(&v228 - 1) = (uint64_t)v36;
  Lock.callAsFunction<A>(_:)(sub_10028B0AC, &v228 - 4, (char *)&type metadata for () + 8);
  uint64_t v242 = 0LL;
  uint64_t v55 = v251;
  uint64_t v56 = (uint64_t)v255;
  v249 = v36;
  if (!v255) {
    goto LABEL_47;
  }
  uint64_t v57 = *(char **)&v36[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
  swift_retain();
  uint64_t v58 = v57;
  id v59 = [v57 identifier];
  uint64_t v60 = (uint64_t)v239;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v59);

  v230 = v50 + 13;
  __n128 v61 = swift_beginAccess(v50 + 13, v260, 0LL, 0LL);
  uint64_t v62 = v50[13];
  if (!*(void *)(v62 + 16)) {
    goto LABEL_20;
  }
  swift_bridgeObjectRetain(v50[13]);
  unint64_t v63 = sub_10030D124(v60);
  if ((v64 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_20:
    os_log_type_t v82 = (void (*)(uint64_t, uint64_t, __n128))*((void *)v254 + 1);
    v82(v60, v53, v61);
    uint64_t v83 = (char *)v240;
    uint64_t v84 = v58;
    goto LABEL_35;
  }

  uint64_t v65 = *(void *)(*(void *)(v62 + 56) + 8 * v63);
  swift_bridgeObjectRetain(v65);
  swift_bridgeObjectRelease();
  v248 = (void (*)(uint64_t, uint64_t))*((void *)v254 + 1);
  v248(v60, v53);
  uint64_t v268 = v65;
  sub_1003D0080(v56);
  swift_release();
  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  sub_10000A720(v241, (uint64_t)qword_100A2A470);
  uint64_t v66 = v268;
  uint64_t v67 = v36;
  swift_bridgeObjectRetain_n(v66, 2LL);
  uint64_t v68 = v67;
  uint64_t v69 = (os_log_s *)Logger.logObject.getter(v68);
  os_log_type_t v70 = static os_log_type_t.debug.getter(v69);
  if (os_log_type_enabled(v69, v70))
  {
    uint64_t v71 = swift_slowAlloc(22LL, -1LL);
    uint64_t v72 = swift_slowAlloc(32LL, -1LL);
    uint64_t aBlock = v72;
    *(_DWORD *)uint64_t v71 = 136315394;
    uint64_t v229 = v71 + 4;
    v239 = v58;
    id v73 = [v58 identifier];
    uint64_t v74 = v53;
    uint64_t v75 = (uint64_t)v253;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v73);

    uint64_t v76 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v77 = dispatch thunk of CustomStringConvertible.description.getter(v74, v76);
    unint64_t v79 = v78;
    v248(v75, v74);
    uint64_t v266 = sub_1003F11D4(v77, v79, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v266, v267, v229, v71 + 12);
    swift_bridgeObjectRelease();

    *(_WORD *)(v71 + 12) = 2048;
    if ((v66 & 0xC000000000000001LL) != 0)
    {
      if (v66 < 0) {
        uint64_t v80 = v66;
      }
      else {
        uint64_t v80 = v66 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v81 = __CocoaSet.count.getter(v80);
    }

    else
    {
      uint64_t v81 = *(void *)(v66 + 16);
    }

    uint64_t v56 = (uint64_t)v255;
    swift_bridgeObjectRelease();
    uint64_t v266 = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v266, v267, v71 + 14, v71 + 22);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v69,  v70,  "Peripheral %s. commandSubscriptions count %ld",  (uint8_t *)v71,  0x16u);
    swift_arrayDestroy(v72, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v72, -1LL, -1LL);
    swift_slowDealloc(v71, -1LL, -1LL);

    uint64_t v50 = v252;
    uint64_t v53 = v256;
    uint64_t v36 = v249;
    uint64_t v84 = v239;
  }

  else
  {
    swift_bridgeObjectRelease_n(v66, 2LL);

    uint64_t v56 = (uint64_t)v255;
    uint64_t v84 = v58;
  }

  id v85 = [v84 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v85);

  swift_beginAccess(&v268, v257, 0LL, 0LL);
  uint64_t v86 = v268;
  os_log_type_t v82 = (void (*)(uint64_t, uint64_t, __n128))v248;
  if ((v268 & 0xC000000000000001LL) == 0)
  {
    if (*(void *)(v268 + 16)) {
      goto LABEL_29;
    }
LABEL_32:
    swift_bridgeObjectRelease();
    swift_beginAccess(v230, &aBlock, 33LL, 0LL);
    goto LABEL_33;
  }

  if (v268 < 0) {
    uint64_t v87 = v268;
  }
  else {
    uint64_t v87 = v268 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v268);
  uint64_t v88 = __CocoaSet.count.getter(v87);
  swift_bridgeObjectRelease();
  if (!v88) {
    goto LABEL_32;
  }
LABEL_29:
  uint64_t v89 = v230;
  swift_beginAccess(v230, &aBlock, 33LL, 0LL);
  if (!v86)
  {
LABEL_33:
    uint64_t v93 = v233;
    sub_1000485FC(v233);
    uint64_t v36 = v249;
    ((void (*)(uint64_t, uint64_t))v82)(v93, v53);
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }

  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v89);
  uint64_t v266 = *v89;
  uint64_t *v89 = 0x8000000000000000LL;
  uint64_t v91 = v86;
  uint64_t v92 = v233;
  sub_10005E010(v91, v233, isUniquelyReferenced_nonNull_native);
  uint64_t *v89 = v266;
  swift_bridgeObjectRelease();
  ((void (*)(uint64_t, uint64_t))v82)(v92, v53);
LABEL_34:
  swift_endAccess(&aBlock);
  uint64_t v83 = (char *)v240;
LABEL_35:
  id v94 = [v84 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v94);

  __n128 v95 = swift_beginAccess(v50 + 11, v259, 0LL, 0LL);
  uint64_t v96 = (uint64_t)v83;
  uint64_t v97 = v50[11];
  if (!*(void *)(v97 + 16))
  {
LABEL_46:
    v82(v96, v53, v95);
    swift_release();
    uint64_t v55 = v251;
    goto LABEL_47;
  }

  swift_bridgeObjectRetain(v50[11]);
  unint64_t v98 = sub_10030D124(v96);
  if ((v99 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_46;
  }

  v240 = v50 + 11;
  v239 = v84;
  uint64_t v100 = *(void *)(*(void *)(v97 + 56) + 8 * v98);
  swift_bridgeObjectRetain(v100);
  swift_bridgeObjectRelease();
  uint64_t v101 = v53;
  v248 = (void (*)(uint64_t, uint64_t))v82;
  ((void (*)(uint64_t, uint64_t))v82)(v96, v53);
  uint64_t v268 = v100;
  sub_1003D0080(v56);
  swift_release();
  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  sub_10000A720(v241, (uint64_t)qword_100A2A470);
  uint64_t v102 = v268;
  uint64_t v103 = v36;
  swift_bridgeObjectRetain_n(v102, 2LL);
  uint64_t v104 = v103;
  uint64_t v105 = (os_log_s *)Logger.logObject.getter(v104);
  os_log_type_t v106 = static os_log_type_t.debug.getter(v105);
  if (os_log_type_enabled(v105, v106))
  {
    uint64_t v107 = swift_slowAlloc(22LL, -1LL);
    uint64_t v108 = swift_slowAlloc(32LL, -1LL);
    uint64_t aBlock = v108;
    *(_DWORD *)uint64_t v107 = 136315394;
    uint64_t v233 = v107 + 4;
    id v109 = [v239 identifier];
    uint64_t v110 = (uint64_t)v253;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v109);

    uint64_t v111 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v112 = v101;
    uint64_t v113 = dispatch thunk of CustomStringConvertible.description.getter(v101, v111);
    unint64_t v115 = v114;
    v248(v110, v112);
    uint64_t v266 = sub_1003F11D4(v113, v115, &aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v266, v267, v233, v107 + 12);
    swift_bridgeObjectRelease();

    *(_WORD *)(v107 + 12) = 2048;
    if ((v102 & 0xC000000000000001LL) != 0)
    {
      if (v102 < 0) {
        uint64_t v116 = v102;
      }
      else {
        uint64_t v116 = v102 & 0xFFFFFFFFFFFFFF8LL;
      }
      uint64_t v117 = __CocoaSet.count.getter(v116);
    }

    else
    {
      uint64_t v117 = *(void *)(v102 + 16);
    }

    uint64_t v50 = v252;
    uint64_t v36 = v249;
    uint64_t v137 = (uint64_t)v232;
    swift_bridgeObjectRelease();
    uint64_t v266 = v117;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v266, v267, v107 + 14, v107 + 22);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v105,  v106,  "Peripheral %s. notifySubscriptions count %ld",  (uint8_t *)v107,  0x16u);
    swift_arrayDestroy(v108, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v108, -1LL, -1LL);
    swift_slowDealloc(v107, -1LL, -1LL);

    uint64_t v53 = v256;
  }

  else
  {
    swift_bridgeObjectRelease_n(v102, 2LL);

    uint64_t v50 = v252;
    uint64_t v36 = v249;
    uint64_t v53 = v101;
    uint64_t v137 = (uint64_t)v232;
  }

  id v213 = [v239 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v213);

  swift_beginAccess(&v268, v258, 0LL, 0LL);
  uint64_t v214 = v268;
  v215 = v248;
  if ((v268 & 0xC000000000000001LL) == 0)
  {
    if (*(void *)(v268 + 16)) {
      goto LABEL_93;
    }
LABEL_96:
    swift_beginAccess(v240, &aBlock, 33LL, 0LL);
    goto LABEL_97;
  }

  if (v268 < 0) {
    uint64_t v216 = v268;
  }
  else {
    uint64_t v216 = v268 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v268);
  uint64_t v217 = __CocoaSet.count.getter(v216);
  swift_bridgeObjectRelease();
  if (!v217) {
    goto LABEL_96;
  }
LABEL_93:
  swift_bridgeObjectRetain(v214);
  uint64_t v218 = v240;
  swift_beginAccess(v240, &aBlock, 33LL, 0LL);
  if (v214)
  {
    char v219 = swift_isUniquelyReferenced_nonNull_native(*v218);
    uint64_t v266 = *v218;
    *uint64_t v218 = 0x8000000000000000LL;
    sub_10005E010(v214, v137, v219);
    *uint64_t v218 = v266;
    swift_bridgeObjectRelease();
    v215(v137, v53);
    goto LABEL_98;
  }

uint64_t sub_100269A80(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v33, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a1);
  if (result)
  {
    uint64_t v9 = result;
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    sub_10000A720(v10, (uint64_t)qword_100A2A470);
    uint64_t v11 = a2;
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v30 = swift_slowAlloc(32LL, -1LL);
      uint64_t v32 = v30;
      uint64_t v29 = v14;
      *(_DWORD *)uint64_t v14 = 136446210;
      uint64_t v15 = v14 + 12;
      uint64_t v28 = v14 + 4;
      id v16 = [*(id *)&v11[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v16);

      uint64_t v17 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter(v4, v17);
      unint64_t v20 = v19;
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      uint64_t v31 = sub_1003F11D4(v18, v20, &v32);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v28, v15);
      swift_bridgeObjectRelease();

      uint64_t v21 = v29;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Disconnecting from %{public}s", v29, 0xCu);
      uint64_t v22 = v30;
      swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
    }

    swift_retain();
    uint64_t v23 = sub_1007CF938(v11);
    swift_release();
    uint64_t v32 = v23;
    uint64_t v24 = swift_allocObject(&unk_10094CDF0, 32LL, 7LL);
    *(void *)(v24 + swift_weakDestroy(v0 + 16) = v11;
    *(void *)(v24 + 24) = v9;
    uint64_t v25 = v11;
    swift_retain();
    uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009A6C10);
    uint64_t v27 = sub_1000372EC( &qword_1009A6C20,  (uint64_t *)&unk_1009A6C10,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.oneshot(_:)(sub_10028B114, v24, v26, v27);
    swift_release();
    swift_release();
    return swift_release();
  }

  return result;
}

uint64_t sub_100269DB4(uint64_t a1, void *a2, void **a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v64 = *(void *)(v6 - 8);
  uint64_t v65 = v6;
  __chkstk_darwin(v6);
  unint64_t v63 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v62 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v61 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v60 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001581C(a1, (uint64_t)&aBlock, &qword_1009AFAF0);
  if ((v68 & 0x100) != 0)
  {
    sub_100254338((uint64_t)&aBlock, (uint64_t)&v70);
    unint64_t v13 = sub_100122CD4();
    swift_willThrowTypedImpl(&v70, &type metadata for CentralManager.Error, v13);
    sub_100254338((uint64_t)&v70, (uint64_t)v69);
    uint64_t v14 = swift_allocError(&type metadata for CentralManager.Error, v13, 0LL, 0LL);
    sub_100254338((uint64_t)v69, v15);
    swift_errorRetain(v14);
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    sub_10000A720(v16, (uint64_t)qword_100A2A470);
    uint64_t v17 = a2;
    uint64_t v18 = swift_errorRetain(v14);
    unint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc(22LL, -1LL);
      id v59 = a2;
      uint64_t v22 = v21;
      uint64_t v23 = (void ***)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v22 = 138543618;
      uint64_t v24 = (void **)_convertErrorToNSError(_:)(v14);
      uint64_t v58 = a3;
      uint64_t v25 = v24;
      uint64_t aBlock = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v67, v22 + 4, v22 + 12);
      *uint64_t v23 = v25;
      swift_errorRelease(v14);
      *(_WORD *)(v22 + 12) = 2114;
      uint64_t aBlock = v17;
      uint64_t v26 = v17;
      a3 = v58;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v67, v22 + 14, v22 + 22);
      v23[1] = v17;

      _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "Disconnection failure: %{public}@ %{public}@!",  (uint8_t *)v22,  0x16u);
      uint64_t v27 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v23, 2LL, v27);
      swift_slowDealloc(v23, -1LL, -1LL);
      uint64_t v28 = v22;
      a2 = v59;
      swift_slowDealloc(v28, -1LL, -1LL);

      swift_errorRelease(v14);
    }

    else
    {
      swift_errorRelease(v14);
      swift_errorRelease(v14);
    }

    swift_errorRelease(v14);
  }

  else
  {

    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v29 = type metadata accessor for Logger(0LL);
    sub_10000A720(v29, (uint64_t)qword_100A2A470);
    uint64_t v30 = a2;
    uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
    os_log_type_t v32 = static os_log_type_t.default.getter(v31);
    if (os_log_type_enabled(v31, v32))
    {
      id v33 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v58 = (void **)swift_slowAlloc(32LL, -1LL);
      uint64_t aBlock = v58;
      id v59 = a2;
      uint64_t v57 = v33;
      *(_DWORD *)id v33 = 136446210;
      char v34 = v33 + 12;
      uint64_t v56 = v33 + 4;
      id v35 = [*(id *)&v30[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject] identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v35);

      uint64_t v36 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter(v9, v36);
      os_log_type_t v38 = a3;
      unint64_t v40 = v39;
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      os_log_type_t v70 = (void *)sub_1003F11D4(v37, v40, (uint64_t *)&aBlock);
      id v41 = v34;
      a2 = v59;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v56, v41);
      a3 = v38;
      swift_bridgeObjectRelease();

      uint64_t v42 = v57;
      _os_log_impl((void *)&_mh_execute_header, v31, v32, "Disconnected from %{public}s", v57, 0xCu);
      uint64_t v43 = v58;
      swift_arrayDestroy(v58, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1LL, -1LL);
      swift_slowDealloc(v42, -1LL, -1LL);
    }

    else
    {
    }
  }

  uint64_t v44 = swift_allocObject(&unk_10094CE18, 32LL, 7LL);
  *(void *)(v44 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v44 + 24) = a2;
  v67[3] = sub_10028B14C;
  uint64_t v68 = v44;
  uint64_t aBlock = _NSConcreteStackBlock;
  v67[0] = 1107296256LL;
  v67[1] = sub_1001C31E8;
  v67[2] = &unk_10094CE30;
  uint64_t v45 = _Block_copy(&aBlock);
  id v46 = a2;
  uint64_t v47 = swift_retain();
  uint64_t v48 = v60;
  static DispatchQoS.unspecified.getter(v47);
  os_log_type_t v70 = _swiftEmptyArrayStorage;
  uint64_t v49 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v50 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v51 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v52 = v63;
  uint64_t v53 = v65;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v70, v50, v51, v65, v49);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v48, v52, v45);
  _Block_release(v45);
  (*(void (**)(char *, uint64_t))(v64 + 8))(v52, v53);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v48, v62);
  return swift_release();
}

uint64_t sub_10026A470(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = &v11[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  id v8 = objc_retainAutoreleasedReturnValue(objc_msgSend(*(id *)(a2
                                                             + OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject), "identifier"));
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v8);

  swift_beginAccess(a1 + 112, v11, 33LL, 0LL);
  sub_1000485E8((uint64_t)v7);
  (*(void (**)(_BYTE *, uint64_t))(v5 + 8))(v7, v4);
  swift_endAccess(v11);
  return swift_release();
}

uint64_t sub_10026A558(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v5[12] = a4;
  v5[13] = v4;
  v5[10] = a2;
  v5[11] = a3;
  v5[9] = a1;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  v5[14] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for MACAddress(0LL);
  v5[15] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  _BYTE v5[16] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[17] = swift_task_alloc(v9);
  v5[18] = swift_task_alloc(v9);
  v5[19] = swift_task_alloc(v9);
  v5[20] = swift_task_alloc(v9);
  return swift_task_switch(sub_10026A60C, 0LL, 0LL);
}

uint64_t sub_10026A60C()
{
  uint64_t v93 = v0 + 48;
  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v1 = v0 + 24;
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v3 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v6 = *(void *)(v0 + 88);
  unint64_t v5 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 80);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  sub_10000A720(v8, (uint64_t)qword_100A2A470);
  uint64_t v96 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v96(v2, v7, v3);
  sub_10001736C(v6, v5);
  uint64_t v9 = sub_10001736C(v6, v5);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter(v10);
  BOOL v12 = os_log_type_enabled(v10, v11);
  uint64_t v13 = *(void *)(v0 + 160);
  uint64_t v14 = *(void *)(v0 + 120);
  uint64_t v15 = *(void *)(v0 + 128);
  uint64_t v17 = *(void *)(v0 + 88);
  unint64_t v16 = *(void *)(v0 + 96);
  if (v12)
  {
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    uint64_t v94 = swift_slowAlloc(64LL, -1LL);
    v98[0] = v94;
    *(_DWORD *)uint64_t v18 = 136446723;
    uint64_t v19 = sub_100007864( &qword_1009A6E60,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v14, v19);
    *(void *)(v0 + 48) = sub_1003F11D4(v20, v21, v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v93, v0 + 56, v18 + 4, v18 + 12);
    swift_bridgeObjectRelease();
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v22(v13, v14);
    *(_WORD *)(v18 + 12) = 2160;
    *(void *)(v0 + 56) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v18 + 14, v18 + 22);
    *(_WORD *)(v18 + 22) = 2081;
    uint64_t v23 = Data.hexString.getter(v17, v16);
    *(void *)(v0 + 64) = sub_1003F11D4(v23, v24, v98);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v18 + 24, v18 + 32);
    swift_bridgeObjectRelease();
    sub_100016F9C(v17, v16);
    sub_100016F9C(v17, v16);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "Connect using %{public}s and LTK %{private,mask.hash}s",  (uint8_t *)v18,  0x20u);
    swift_arrayDestroy(v94, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v94, -1LL, -1LL);
    uint64_t v25 = v18;
    uint64_t v1 = v0 + 24;
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  else
  {
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
    v22(*(void *)(v0 + 160), *(void *)(v0 + 120));
    sub_100016F9C(v17, v16);
    sub_100016F9C(v17, v16);
  }

  __n128 v95 = v22;
  *(void *)(v0 + 168) = v22;
  uint64_t v27 = *(void *)(v0 + 120);
  uint64_t v28 = *(void *)(v0 + 128);
  uint64_t v29 = *(void *)(v0 + 112);
  uint64_t v30 = MACAddress.data.getter(v26);
  uint64_t v32 = v31;
  char v33 = MACAddress.type.getter(v30);
  MACAddress.init(addressToSanitize:type:)(v30, v32, v33 & 1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v29, 1LL, v27) == 1)
  {
    uint64_t v34 = *(void *)(v0 + 136);
    uint64_t v35 = *(void *)(v0 + 120);
    uint64_t v36 = *(void *)(v0 + 80);
    sub_100015794(*(void *)(v0 + 112), (uint64_t *)&unk_1009AE480);
    uint64_t v37 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v96)(v34, v36, v35);
    os_log_type_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.error.getter(v38);
    BOOL v40 = os_log_type_enabled(v38, v39);
    uint64_t v41 = *(void *)(v0 + 136);
    uint64_t v42 = *(void *)(v0 + 120);
    if (v40)
    {
      uint64_t v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v44 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v43 = 136446210;
      v98[0] = v44;
      uint64_t v45 = sub_100007864( &qword_1009A6E60,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
      uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter(v42, v45);
      *(void *)(v0 + swift_weakDestroy(v0 + 16) = sub_1003F11D4(v46, v47, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v1, v43 + 4, v43 + 12);
      swift_bridgeObjectRelease();
      v95(v41, v42);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Invalid MAC address %{public}s", v43, 0xCu);
      swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1LL, -1LL);
      swift_slowDealloc(v43, -1LL, -1LL);
    }

    else
    {
      v95(*(void *)(v0 + 136), *(void *)(v0 + 120));
    }

    uint64_t v61 = *(void *)(v0 + 72);
    uint64_t v62 = type metadata accessor for OwnerCommandManager.Error(0LL);
    uint64_t v63 = v61;
    uint64_t v64 = v62;
    uint64_t v65 = 12LL;
LABEL_20:
    swift_storeEnumTagMultiPayload(v63, v64, v65);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v62 - 8) + 56LL))(v61, 0LL, 1LL, v62);
    uint64_t v89 = *(void *)(v0 + 152);
    uint64_t v91 = *(void *)(v0 + 136);
    uint64_t v90 = *(void *)(v0 + 144);
    uint64_t v92 = *(void *)(v0 + 112);
    swift_task_dealloc(*(void *)(v0 + 160));
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v48 = *(void *)(v0 + 152);
  uint64_t v49 = *(void *)(v0 + 104);
  (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 128) + 32LL))( v48,  *(void *)(v0 + 112),  *(void *)(v0 + 120));
  uint64_t v50 = *(void *)(*(void *)(v49 + 56) + 24LL);
  uint64_t v51 = swift_task_alloc(32LL);
  *(void *)(v51 + swift_weakDestroy(v0 + 16) = v48;
  *(void *)(v51 + 24) = v50;
  uint64_t v52 = sub_100004AEC((uint64_t *)&unk_1009B5B30);
  Lock.callAsFunction<A>(_:)(sub_10028B644, v51, v52);
  swift_task_dealloc(v51);
  uint64_t v53 = *(void **)(v0 + 24);
  *(void *)(v0 + 176) = v53;
  if (!v53)
  {
    uint64_t v66 = ((uint64_t (*)(void, void, void))v96)( *(void *)(v0 + 144),  *(void *)(v0 + 80),  *(void *)(v0 + 120));
    uint64_t v67 = (os_log_s *)Logger.logObject.getter(v66);
    os_log_type_t v68 = static os_log_type_t.error.getter(v67);
    BOOL v69 = os_log_type_enabled(v67, v68);
    uint64_t v70 = *(void *)(v0 + 144);
    uint64_t v71 = *(void *)(v0 + 152);
    uint64_t v72 = *(void *)(v0 + 120);
    if (v69)
    {
      uint64_t v97 = *(void *)(v0 + 152);
      id v73 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v74 = swift_slowAlloc(32LL, -1LL);
      v98[0] = v74;
      *(_DWORD *)id v73 = 136446210;
      uint64_t v75 = sub_100007864( &qword_1009A6E60,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
      uint64_t v76 = dispatch thunk of CustomStringConvertible.description.getter(v72, v75);
      *(void *)(v0 + 32) = sub_1003F11D4(v76, v77, v98);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v73 + 4, v73 + 12);
      swift_bridgeObjectRelease();
      uint64_t v78 = v70;
      unint64_t v79 = v95;
      v95(v78, v72);
      _os_log_impl((void *)&_mh_execute_header, v67, v68, "No peripheral for MAC address %{public}s", v73, 0xCu);
      swift_arrayDestroy(v74, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v74, -1LL, -1LL);
      swift_slowDealloc(v73, -1LL, -1LL);

      uint64_t v80 = v97;
    }

    else
    {

      uint64_t v88 = v70;
      unint64_t v79 = v95;
      v95(v88, v72);
      uint64_t v80 = v71;
    }

    v79(v80, v72);
    uint64_t v61 = *(void *)(v0 + 72);
    uint64_t v62 = type metadata accessor for OwnerCommandManager.Error(0LL);
    uint64_t v63 = v61;
    uint64_t v64 = v62;
    uint64_t v65 = 16LL;
    goto LABEL_20;
  }

  id v54 = v53;
  uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
  os_log_type_t v56 = static os_log_type_t.default.getter(v55);
  if (os_log_type_enabled(v55, v56))
  {
    uint64_t v57 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v58 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v57 = 138543362;
    *(void *)(v0 + 40) = v54;
    id v59 = v54;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v93, v57 + 4, v57 + 12);
    *uint64_t v58 = v53;

    _os_log_impl((void *)&_mh_execute_header, v55, v56, "Peripheral to connect: %{public}@", v57, 0xCu);
    uint64_t v60 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v58, 1LL, v60);
    swift_slowDealloc(v58, -1LL, -1LL);
    swift_slowDealloc(v57, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v82 = *(void *)(v0 + 96);
  uint64_t v81 = *(void *)(v0 + 104);
  uint64_t v83 = *(void *)(v0 + 88);
  uint64_t v84 = (void *)swift_task_alloc(48LL);
  *(void *)(v0 + 184) = v84;
  v84[2] = v81;
  v84[3] = v54;
  v84[4] = v83;
  v84[5] = v82;
  id v85 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v0 + 192) = v85;
  uint64_t v86 = sub_100004AEC(&qword_1009A78B8);
  *id v85 = v0;
  v85[1] = sub_10026AEEC;
  return withCheckedContinuation<A>(isolation:function:_:)( *(void *)(v0 + 72),  0LL,  0LL,  0xD00000000000001BLL,  0x800000010085B770LL,  sub_10028AF90,  v84,  v86);
}

uint64_t sub_10026AEEC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 184LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 192LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10026AF48, 0LL, 0LL);
}

uint64_t sub_10026AF48()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 120);

  v1(v2, v3);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v6 = *(void *)(v0 + 136);
  uint64_t v5 = *(void *)(v0 + 144);
  uint64_t v7 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 160));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10026AFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v11[2] = a2;
  v11[3] = a3;
  v11[4] = a4;
  v11[5] = a5;
  void v11[6] = a1;
  return static Transaction.named<A>(_:with:)( "OwnerCommandManager.connectUsingMACAndLTK",  41LL,  2LL,  sub_10028AF9C,  v11);
}

uint64_t sub_10026B058(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v29 = a6;
  uint64_t v30 = a1;
  uint64_t v28 = sub_100004AEC(&qword_1009A7C48);
  uint64_t v9 = *(void *)(v28 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v28);
  os_log_type_t v11 = (char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009A78D8);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v31 = v12;
  uint64_t v32 = v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100272C28(a3, a4, a5);
  uint64_t v33 = v16;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009A6C10);
  uint64_t v18 = type metadata accessor for OwnerCommandManager.Error(0LL);
  uint64_t v19 = sub_1000372EC( &qword_1009A6C20,  (uint64_t *)&unk_1009A6C10,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v20 = sub_100007864(&qword_1009A78C0, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_1007F8DC0);
  Publisher.mapError<A>(_:)(sub_10026B284, 0LL, v17, v18, v19, v20);
  swift_release();
  uint64_t v21 = v28;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v11, v29, v28);
  uint64_t v22 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v23 = (v22 + 24) & ~v22;
  uint64_t v24 = swift_allocObject(&unk_10094CD78, v23 + v10, v22 | 7);
  *(void *)(v24 + swift_weakDestroy(v0 + 16) = v30;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v24 + v23, v11, v21);
  uint64_t v25 = sub_1000372EC( &qword_1009A78E0,  &qword_1009A78D8,  (uint64_t)&protocol conformance descriptor for Publishers.MapError<A, B>);
  swift_retain();
  uint64_t v26 = v31;
  Publisher.oneshot(_:)(sub_10028B038, v24, v31, v25);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v32 + 8))(v15, v26);
}

uint64_t sub_10026B288(uint64_t a1)
{
  void v2[4] = a1;
  v2[5] = v1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  v2[9] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10026B30C, 0LL, 0LL);
}

uint64_t sub_10026B30C()
{
  if (!*(void *)(*(void *)(v0 + 40) + 184LL)) {
    goto LABEL_4;
  }
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 32);
  swift_retain();
  sub_100504F30(v2, v1);
  swift_release();
  uint64_t v3 = type metadata accessor for OwnedBeaconRecord(0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 48LL))(v1, 1LL, v3) == 1)
  {
    sub_100015794(*(void *)(v0 + 72), (uint64_t *)&unk_1009A9C30);
LABEL_4:
    char v4 = 0;
    goto LABEL_12;
  }

  sub_1005D3A0C();
  uint64_t v6 = v5;
  uint64_t v7 = SPBeaconTypeHele;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
  uint64_t v10 = v9;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
  if (v8 == v11 && v10 == v12) {
    char v4 = 1;
  }
  else {
    char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v8, v10, v11, v12, 0LL);
  }
  uint64_t v14 = *(void *)(v0 + 72);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100018C68(v14, type metadata accessor for OwnedBeaconRecord);
LABEL_12:
  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v15 = *(void *)(v0 + 32);
  uint64_t v16 = *(void *)(v0 + 56);
  uint64_t v17 = *(void *)(v0 + 64);
  uint64_t v18 = *(void *)(v0 + 48);
  uint64_t v19 = type metadata accessor for Logger(0LL);
  sub_10000A720(v19, (uint64_t)qword_100A2A470);
  uint64_t v20 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v16 + 16))(v17, v15, v18);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.default.getter(v21);
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v25 = *(void *)(v0 + 56);
  uint64_t v24 = *(void *)(v0 + 64);
  uint64_t v26 = *(void *)(v0 + 48);
  if (v23)
  {
    uint64_t v27 = swift_slowAlloc(28LL, -1LL);
    uint64_t v34 = swift_slowAlloc(32LL, -1LL);
    uint64_t v35 = v34;
    *(_DWORD *)uint64_t v27 = 141558531;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v27 + 4, v27 + 12);
    *(_WORD *)(v27 + 12) = 2081;
    uint64_t v28 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter(v26, v28);
    *(void *)(v0 + 24) = sub_1003F11D4(v29, v30, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v27 + 14, v27 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v24, v26);
    *(_WORD *)(v27 + 22) = 1024;
    *(_DWORD *)(v0 + 96) = v4 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 100, v27 + 24, v27 + 28);
    _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "Read TX Power for %{private,mask.hash}s. isHELE: %{BOOL}d",  (uint8_t *)v27,  0x1Cu);
    swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v27, -1LL, -1LL);

    if ((v4 & 1) == 0)
    {
LABEL_16:
      uint64_t v31 = (void *)swift_task_alloc(dword_1009A7C64);
      *(void *)(v0 + 88) = v31;
      *uint64_t v31 = v0;
      v31[1] = sub_10026B738;
      return sub_100287018(*(void *)(v0 + 32));
    }
  }

  else
  {
    (*(void (**)(void, void))(v25 + 8))(*(void *)(v0 + 64), *(void *)(v0 + 48));

    if ((v4 & 1) == 0) {
      goto LABEL_16;
    }
  }

  uint64_t v33 = (void *)swift_task_alloc(dword_1009A7554);
  *(void *)(v0 + 80) = v33;
  *uint64_t v33 = v0;
  v33[1] = sub_10026B6D0;
  return sub_10026B7A0(*(void *)(v0 + 32));
}

uint64_t sub_10026B6D0(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 80);
  uint64_t v5 = *v2;
  swift_task_dealloc(v4);
  uint64_t v6 = *(void *)(v5 + 64);
  swift_task_dealloc(*(void *)(v5 + 72));
  uint64_t v7 = swift_task_dealloc(v6);
  if (!v1) {
    uint64_t v7 = a1;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v7);
}

uint64_t sub_10026B738(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 88);
  uint64_t v5 = *v2;
  swift_task_dealloc(v4);
  uint64_t v6 = *(void *)(v5 + 64);
  swift_task_dealloc(*(void *)(v5 + 72));
  uint64_t v7 = swift_task_dealloc(v6);
  if (!v1) {
    uint64_t v7 = a1;
  }
  return (*(uint64_t (**)(uint64_t))(v5 + 8))(v7);
}

uint64_t sub_10026B7A0(uint64_t a1)
{
  v2[5] = a1;
  v2[6] = v1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[7] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[8] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[9] = swift_task_alloc(v5);
  v2[10] = swift_task_alloc(v5);
  unint64_t v6 = (*(void *)(*(void *)(sub_100004AEC(&qword_10099D8A0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[11] = swift_task_alloc(v6);
  v2[12] = swift_task_alloc(v6);
  uint64_t v7 = type metadata accessor for AccessoryCommand(0LL);
  v2[13] = v7;
  unint64_t v8 = (*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[14] = swift_task_alloc(v8);
  v2[15] = swift_task_alloc(v8);
  return swift_task_switch(sub_10026B878, 0LL, 0LL);
}

uint64_t sub_10026B878()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[7];
  uint64_t v5 = v0[8];
  uint64_t v6 = v0[5];
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(v2, 1LL, 1LL, v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v6, v4);
  sub_10001581C(v2, v1, &qword_10099D8A0);
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v1, 1LL, v4);
  uint64_t v9 = v0[11];
  uint64_t v8 = v0[12];
  uint64_t v11 = v0[8];
  uint64_t v10 = v0[9];
  if ((_DWORD)v7 == 1)
  {
    UUID.init()(v7);
    sub_100015794(v8, &qword_10099D8A0);
    sub_100015794(v9, &qword_10099D8A0);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
  }

  else
  {
    uint64_t v13 = v0[7];
    sub_100015794(v0[12], &qword_10099D8A0);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32);
    v12(v10, v9, v13);
  }

  uint64_t v14 = v0[15];
  uint64_t v15 = (int *)v0[13];
  uint64_t v16 = v0[10];
  uint64_t v17 = v0[7];
  int8x16_t v22 = *(int8x16_t *)(v0 + 5);
  v12(v14, v0[9], v17);
  v12(v14 + v15[5], v16, v17);
  uint64_t v18 = v14 + v15[6];
  *(void *)uint64_t v18 = 3LL;
  *(_BYTE *)(v18 + 8) = 3;
  *(_BYTE *)(v14 + v15[7]) = 1;
  *(_BYTE *)(v14 + v15[8]) = 1;
  uint64_t v19 = (int8x16_t *)swift_task_alloc(48LL);
  v0[16] = v19;
  v19[1] = vextq_s8(v22, v22, 8uLL);
  v19[2].i64[0] = v14;
  uint64_t v20 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[17] = v20;
  *uint64_t v20 = v0;
  v20[1] = sub_10026BA64;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 2,  0LL,  0LL,  0xD000000000000014LL,  0x800000010085B750LL,  sub_10028AE04,  v19,  &type metadata for Int);
}

uint64_t sub_10026BA64()
{
  uint64_t v3 = *(void *)(*(void *)v1 + 128LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 136LL);
  *(void *)(*(void *)v1 + 144LL) = v0;
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10026BD00;
  }
  else {
    uint64_t v4 = sub_10026BAD0;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10026BAD0()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000A720(v4, (uint64_t)qword_100A2A470);
  uint64_t v5 = sub_10001DC4C(v2, v3, type metadata accessor for AccessoryCommand);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter(v6);
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 112);
  if (v8)
  {
    uint64_t v10 = swift_slowAlloc(22LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v21 = v11;
    *(_DWORD *)uint64_t v10 = 134218242;
    *(void *)(v0 + 24) = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v10 + 4, v10 + 12);
    *(_WORD *)(v10 + 12) = 2080;
    sub_1006CC4C0();
    *(void *)(v0 + 32) = sub_1003F11D4(v12, v13, &v21);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v10 + 14, v10 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68(v9, type metadata accessor for AccessoryCommand);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Read TX Power HELE: %ld. Command %s", (uint8_t *)v10, 0x16u);
    swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(*(void *)(v0 + 112), type metadata accessor for AccessoryCommand);
  }

  uint64_t v15 = *(void *)(v0 + 112);
  uint64_t v14 = *(void *)(v0 + 120);
  uint64_t v17 = *(void *)(v0 + 88);
  uint64_t v16 = *(void *)(v0 + 96);
  uint64_t v19 = *(void *)(v0 + 72);
  uint64_t v18 = *(void *)(v0 + 80);
  sub_100018C68(v14, type metadata accessor for AccessoryCommand);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v1);
}

uint64_t sub_10026BD00()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 72);
  uint64_t v5 = *(void *)(v0 + 80);
  sub_100018C68(v2, type metadata accessor for AccessoryCommand);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10026BD88(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a4;
  uint64_t v7 = type metadata accessor for AccessoryCommand(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v10);
  uint64_t v12 = &v28[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v13 = sub_100004AEC(&qword_10099E4C0);
  __chkstk_darwin(v13);
  uint64_t v15 = &v28[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v16 = type metadata accessor for UUID(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = &v28[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  (*(void (**)(_BYTE *, uint64_t))(v19 + 16))(v18, a3);
  uint64_t v20 = sub_100004AEC(&qword_10099E4C8);
  uint64_t v21 = *(void *)(v20 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v21 + 16))(v15, a1, v20);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v21 + 56))(v15, 0LL, 1LL, v20);
  swift_beginAccess(a2 + 120, v28, 33LL, 0LL);
  sub_100045688((uint64_t)v15, (uint64_t)v18);
  swift_endAccess(v28);
  uint64_t v22 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v12, 1LL, 1LL, v22);
  sub_10001DC4C( v27,  (uint64_t)&v28[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8],  type metadata accessor for AccessoryCommand);
  uint64_t v23 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v24 = (v23 + 40) & ~v23;
  uint64_t v25 = (void *)swift_allocObject(&unk_10094CD50, v24 + v9, v23 | 7);
  v25[2] = 0LL;
  v25[3] = 0LL;
  v25[4] = a2;
  sub_10002218C( (uint64_t)&v28[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8],  (uint64_t)v25 + v24,  type metadata accessor for AccessoryCommand);
  swift_retain();
  sub_1003B76DC((uint64_t)v12, (uint64_t)&unk_1009A7C58, (uint64_t)v25);
  return swift_release();
}

uint64_t sub_10026BFC8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v7 = (void *)swift_task_alloc(dword_1009A7564);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_1000159BC;
  return sub_10026D010(a5);
}

uint64_t sub_10026C01C(uint64_t a1, uint64_t a2)
{
  v3[7] = a2;
  v3[8] = v2;
  v3[6] = a1;
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  void v3[9] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for MACAddress(0LL);
  v3[10] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[11] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[12] = swift_task_alloc(v7);
  v3[13] = swift_task_alloc(v7);
  v3[14] = swift_task_alloc(v7);
  return swift_task_switch(sub_10026C0C0, 0LL, 0LL);
}

uint64_t sub_10026C0C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 88);
  uint64_t v4 = *(void *)(v1 + 72);
  uint64_t v5 = MACAddress.data.getter(a1);
  uint64_t v7 = v6;
  char v8 = MACAddress.type.getter(v5);
  MACAddress.init(addressToSanitize:type:)(v5, v7, v8 & 1);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v4, 1LL, v2) == 1)
  {
    sub_100015794(*(void *)(v1 + 72), (uint64_t *)&unk_1009AE480);
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v10 = *(void *)(v1 + 88);
    uint64_t v9 = *(void *)(v1 + 96);
    uint64_t v11 = *(void *)(v1 + 80);
    uint64_t v12 = *(void *)(v1 + 56);
    uint64_t v13 = type metadata accessor for Logger(0LL);
    sub_10000A720(v13, (uint64_t)qword_100A2A470);
    uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v10 + 16))(v9, v12, v11);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter(v15);
    BOOL v17 = os_log_type_enabled(v15, v16);
    uint64_t v19 = *(void *)(v1 + 88);
    uint64_t v18 = *(void *)(v1 + 96);
    uint64_t v20 = *(void *)(v1 + 80);
    if (v17)
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v22 = swift_slowAlloc(32LL, -1LL);
      v72[0] = v22;
      *(_DWORD *)uint64_t v21 = 136446210;
      uint64_t v23 = sub_100007864( &qword_1009A6E60,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v20, v23);
      *(void *)(v1 + swift_weakDestroy(v0 + 16) = sub_1003F11D4(v24, v25, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 16, v1 + 24, v21 + 4, v21 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "Invalid MAC address %{public}s", v21, 0xCu);
      swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(void, void))(v19 + 8))(*(void *)(v1 + 96), *(void *)(v1 + 80));
    }

    uint64_t v39 = *(void *)(v1 + 48);
    uint64_t v40 = type metadata accessor for OwnerCommandManager.Error(0LL);
    uint64_t v41 = v39;
    uint64_t v42 = v40;
    uint64_t v43 = 12LL;
LABEL_21:
    swift_storeEnumTagMultiPayload(v41, v42, v43);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56LL))(v39, 0LL, 1LL, v40);
    uint64_t v68 = *(void *)(v1 + 104);
    uint64_t v69 = *(void *)(v1 + 96);
    uint64_t v70 = *(void *)(v1 + 72);
    swift_task_dealloc(*(void *)(v1 + 112));
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  uint64_t v26 = *(void *)(v1 + 112);
  uint64_t v27 = *(void *)(v1 + 64);
  (*(void (**)(uint64_t, void, void))(*(void *)(v1 + 88) + 32LL))( v26,  *(void *)(v1 + 72),  *(void *)(v1 + 80));
  uint64_t v28 = *(void *)(*(void *)(v27 + 56) + 24LL);
  uint64_t v29 = swift_task_alloc(32LL);
  *(void *)(v29 + swift_weakDestroy(v0 + 16) = v26;
  *(void *)(v29 + 24) = v28;
  uint64_t v30 = sub_100004AEC((uint64_t *)&unk_1009B5B30);
  Lock.callAsFunction<A>(_:)(sub_100254CE4, v29, v30);
  swift_task_dealloc(v29);
  uint64_t v31 = *(void **)(v1 + 24);
  *(void *)(v1 + 120) = v31;
  if (!v31)
  {
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v44 = *(void *)(v1 + 104);
    uint64_t v45 = *(void *)(v1 + 80);
    uint64_t v46 = *(void *)(v1 + 88);
    uint64_t v47 = *(void *)(v1 + 56);
    uint64_t v48 = type metadata accessor for Logger(0LL);
    sub_10000A720(v48, (uint64_t)qword_100A2A470);
    uint64_t v49 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v46 + 16))(v44, v47, v45);
    uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = static os_log_type_t.error.getter(v50);
    BOOL v52 = os_log_type_enabled(v50, v51);
    uint64_t v53 = *(void *)(v1 + 104);
    uint64_t v54 = *(void *)(v1 + 112);
    uint64_t v56 = *(void *)(v1 + 80);
    uint64_t v55 = *(void *)(v1 + 88);
    if (v52)
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v58 = swift_slowAlloc(32LL, -1LL);
      v72[0] = v58;
      *(_DWORD *)uint64_t v57 = 136446210;
      uint64_t v59 = sub_100007864( &qword_1009A6E60,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter(v56, v59);
      *(void *)(v1 + 32) = sub_1003F11D4(v60, v61, v72);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 32, v1 + 40, v57 + 4, v57 + 12);
      swift_bridgeObjectRelease();
      uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
      v62(v53, v56);
      _os_log_impl((void *)&_mh_execute_header, v50, v51, "No peripheral for MAC address %{public}s", v57, 0xCu);
      swift_arrayDestroy(v58, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1LL, -1LL);
      swift_slowDealloc(v57, -1LL, -1LL);
    }

    else
    {

      uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v55 + 8);
      v62(v53, v56);
    }

    v62(v54, v56);
    uint64_t v39 = *(void *)(v1 + 48);
    uint64_t v40 = type metadata accessor for OwnerCommandManager.Error(0LL);
    uint64_t v41 = v39;
    uint64_t v42 = v40;
    uint64_t v43 = 16LL;
    goto LABEL_21;
  }

  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v32 = type metadata accessor for Logger(0LL);
  sub_10000A720(v32, (uint64_t)qword_100A2A470);
  id v33 = v31;
  uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
  os_log_type_t v35 = static os_log_type_t.default.getter(v34);
  if (os_log_type_enabled(v34, v35))
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v71 = (void *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v36 = 138543362;
    *(void *)(v1 + 40) = v33;
    id v37 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 40, v1 + 48, v36 + 4, v36 + 12);
    void *v71 = v31;

    _os_log_impl((void *)&_mh_execute_header, v34, v35, "Peripheral to disconnect: %{public}@", v36, 0xCu);
    uint64_t v38 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v71, 1LL, v38);
    swift_slowDealloc(v71, -1LL, -1LL);
    swift_slowDealloc(v36, -1LL, -1LL);
  }

  else
  {
  }

  uint64_t v63 = *(void *)(v1 + 64);
  uint64_t v64 = swift_task_alloc(32LL);
  *(void *)(v1 + 128) = v64;
  *(void *)(v64 + swift_weakDestroy(v0 + 16) = v63;
  *(void *)(v64 + 24) = v33;
  uint64_t v65 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  *(void *)(v1 + 136) = v65;
  uint64_t v66 = sub_100004AEC(&qword_1009A78B8);
  void *v65 = v1;
  v65[1] = sub_10026C7CC;
  return withCheckedContinuation<A>(isolation:function:_:)( *(void *)(v1 + 48),  0LL,  0LL,  0xD000000000000011LL,  0x800000010085B710LL,  sub_10028ADC8,  v64,  v66);
}

uint64_t sub_10026C7CC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 128LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 136LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10026C828, 0LL, 0LL);
}

uint64_t sub_10026C828()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 88);

  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10026C8A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v7[2] = a2;
  v7[3] = a3;
  v7[4] = a1;
  return static Transaction.named<A>(_:with:)("OwnerCommandManager.disconnect", 30LL, 2LL, sub_10028ADD0, v7);
}

uint64_t sub_10026C91C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  uint64_t v24 = a4;
  uint64_t v25 = a1;
  uint64_t v23 = sub_100004AEC(&qword_1009A7C48);
  uint64_t v5 = *(void *)(v23 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v23);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009A78D8);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v26 = v8;
  uint64_t v27 = v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = sub_1007CF938(a3);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009A6C10);
  uint64_t v13 = type metadata accessor for OwnerCommandManager.Error(0LL);
  uint64_t v14 = sub_1000372EC( &qword_1009A6C20,  (uint64_t *)&unk_1009A6C10,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v15 = sub_100007864(&qword_1009A78C0, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_1007F8DC0);
  Publisher.mapError<A>(_:)(sub_10026B284, 0LL, v12, v13, v14, v15);
  swift_release();
  uint64_t v16 = v23;
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v24, v23);
  uint64_t v17 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v18 = (v17 + 24) & ~v17;
  uint64_t v19 = swift_allocObject(&unk_10094CD28, v18 + v6, v17 | 7);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = v25;
  (*(void (**)(uint64_t, char *, uint64_t))(v5 + 32))(v19 + v18, v7, v16);
  uint64_t v20 = sub_1000372EC( &qword_1009A78E0,  &qword_1009A78D8,  (uint64_t)&protocol conformance descriptor for Publishers.MapError<A, B>);
  swift_retain();
  uint64_t v21 = v26;
  Publisher.oneshot(_:)(sub_10028ADF0, v19, v26, v20);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v11, v21);
}

void sub_10026CB40(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, const char *a5)
{
  uint64_t v41 = a4;
  uint64_t v42 = (char *)a5;
  uint64_t v7 = (const char *)type metadata accessor for OwnerCommandManager.Error(0LL);
  uint64_t v8 = *((void *)v7 - 1);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v40 - v12;
  uint64_t v14 = sub_100004AEC(&qword_1009A78B8);
  __chkstk_darwin(v14);
  uint64_t v43 = (uint64_t)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100004AEC(&qword_1009A78E8);
  __chkstk_darwin(v16);
  uint64_t v18 = (void **)((char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Transaction.capture()();
  sub_10001581C(a1, (uint64_t)v18, &qword_1009A78E8);
  if (swift_getEnumCaseMultiPayload(v18, v16) == 1)
  {
    uint64_t v41 = v7;
    sub_10002218C((uint64_t)v18, (uint64_t)v13, type metadata accessor for OwnerCommandManager.Error);
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    sub_10000A720(v19, (uint64_t)qword_100A2A470);
    uint64_t v20 = sub_10001DC4C((uint64_t)v13, (uint64_t)v11, type metadata accessor for OwnerCommandManager.Error);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      uint64_t v45 = v24;
      uint64_t v40 = a3;
      *(_DWORD *)uint64_t v23 = 136446210;
      sub_10026787C();
      uint64_t v44 = sub_1003F11D4(v25, v26, &v45);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, &v45, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v11, type metadata accessor for OwnerCommandManager.Error);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, v42, v23, 0xCu);
      swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v11, type metadata accessor for OwnerCommandManager.Error);
    }

    uint64_t v36 = v43;
    sub_10001DC4C((uint64_t)v13, v43, type metadata accessor for OwnerCommandManager.Error);
    (*(void (**)(uint64_t, void, uint64_t, const char *))(v8 + 56))(v36, 0LL, 1LL, v41);
    uint64_t v37 = sub_100004AEC(&qword_1009A7C48);
    CheckedContinuation.resume(returning:)(v36, v37);
    sub_100018C68((uint64_t)v13, type metadata accessor for OwnerCommandManager.Error);
  }

  else
  {
    uint64_t v27 = *v18;
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    sub_10000A720(v28, (uint64_t)qword_100A2A470);
    id v29 = v27;
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.default.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v40 = a3;
      uint64_t v32 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v42 = (char *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v32 = 138543362;
      uint64_t v45 = (uint64_t)v29;
      id v33 = v29;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v32 + 4, v32 + 12);
      uint64_t v34 = v42;
      *(void *)uint64_t v42 = v29;

      _os_log_impl((void *)&_mh_execute_header, v30, v31, v41, v32, 0xCu);
      uint64_t v35 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v34, 1LL, v35);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    else
    {

      uint64_t v30 = (os_log_s *)v29;
    }

    uint64_t v38 = v43;
    (*(void (**)(uint64_t, uint64_t, uint64_t, const char *))(v8 + 56))(v43, 1LL, 1LL, v7);
    uint64_t v39 = sub_100004AEC(&qword_1009A7C48);
    CheckedContinuation.resume(returning:)(v38, v39);
  }

uint64_t sub_10026D010(uint64_t a1)
{
  v2[58] = a1;
  v2[59] = v1;
  uint64_t v3 = type metadata accessor for BinaryDecoder(0LL);
  v2[60] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[61] = v4;
  v2[62] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for BinaryEncoder(0LL);
  v2[63] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[64] = v6;
  v2[65] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009B9340);
  v2[66] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[67] = v8;
  v2[68] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009A1BC0);
  v2[69] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[70] = v10;
  v2[71] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_1009A7BF8);
  v2[72] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Peripheral.ConnectionOptions(0LL);
  v2[73] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v2[74] = v13;
  v2[75] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100004AEC(&qword_1009A7C00);
  v2[76] = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009A7C08);
  v2[77] = swift_task_alloc((*(void *)(*(void *)(v15 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for CentralManager.State(0LL);
  v2[78] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v2[79] = v17;
  v2[80] = swift_task_alloc((*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for AccessoryCommand(0LL);
  v2[81] = v18;
  v2[82] = swift_task_alloc((*(void *)(*(void *)(v18 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for UUID(0LL);
  v2[83] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v2[84] = v20;
  unint64_t v21 = (*(void *)(v20 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[85] = swift_task_alloc(v21);
  v2[86] = swift_task_alloc(v21);
  v2[87] = swift_task_alloc(v21);
  v2[88] = swift_task_alloc(v21);
  v2[89] = swift_task_alloc(v21);
  v2[90] = swift_task_alloc(v21);
  v2[91] = swift_task_alloc(v21);
  return swift_task_switch(sub_10026D244, 0LL, 0LL);
}

uint64_t sub_10026D244()
{
  uint64_t v1 = v0[91];
  uint64_t v2 = v0[90];
  uint64_t v3 = v0[83];
  uint64_t v4 = v0[58];
  uint64_t v5 = v4 + *(int *)(v0[81] + 20LL);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0[84] + 16LL);
  v0[92] = v6;
  v6(v1, v5, v3);
  v6(v2, v4, v3);
  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v7 = v0[91];
  uint64_t v8 = v0[89];
  uint64_t v9 = v0[83];
  uint64_t v10 = v0[82];
  uint64_t v11 = v0[58];
  uint64_t v12 = type metadata accessor for Logger(0LL);
  v0[93] = sub_10000A720(v12, (uint64_t)qword_100A2A470);
  sub_10001DC4C(v11, v10, type metadata accessor for AccessoryCommand);
  uint64_t v13 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v8, v7, v9);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.info.getter(v14);
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v17 = v0[89];
  uint64_t v18 = v0[84];
  uint64_t v19 = v0[83];
  uint64_t v20 = v0[82];
  if (v16)
  {
    uint64_t v30 = v0[84];
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v31 = swift_slowAlloc(64LL, -1LL);
    uint64_t v32 = v31;
    *(_DWORD *)uint64_t v21 = 136446723;
    sub_1006CC4C0();
    v0[55] = sub_1003F11D4(v22, v23, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 55, v0 + 56, v21 + 4, v21 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68(v20, type metadata accessor for AccessoryCommand);
    *(_WORD *)(v21 + 12) = 2160;
    v0[56] = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 57, v21 + 14, v21 + 22);
    *(_WORD *)(v21 + 22) = 2081;
    uint64_t v24 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(v19, v24);
    v0[57] = sub_1003F11D4(v25, v26, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 57, v0 + 58, v21 + 24, v21 + 32);
    swift_bridgeObjectRelease();
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v30 + 8);
    v27(v17, v19);
    _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "[FindMyBluetooth] Execute command %{public}s for beacon %{private,mask.hash}s",  (uint8_t *)v21,  0x20u);
    swift_arrayDestroy(v31, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(v0[82], type metadata accessor for AccessoryCommand);
    uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v27(v17, v19);
  }

  v0[94] = v27;
  uint64_t v28 = (void *)swift_task_alloc(dword_1009A7474);
  v0[95] = v28;
  *uint64_t v28 = v0;
  v28[1] = sub_10026D560;
  return sub_100267428();
}

uint64_t sub_10026D560(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 760);
  *(void *)(v3 + 768) = a1;
  *(void *)(v3 + 776) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_10026D6F4;
  }
  else {
    uint64_t v5 = sub_10026D5D0;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_10026D5D0()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to CentralManagerProtocol.await(state:)[1]);
  v0[98] = v1;
  uint64_t v2 = type metadata accessor for CentralManager(0LL);
  uint64_t v3 = sub_100007864( &qword_1009A1BA0,  (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager,  (uint64_t)&protocol conformance descriptor for CentralManager);
  *uint64_t v1 = v0;
  v1[1] = sub_10026D67C;
  return CentralManagerProtocol.await(state:)(v0[80], v2, v3);
}

uint64_t sub_10026D67C()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 784LL);
  *(void *)(*(void *)v1 + 792LL) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2[79] + 8LL))(v2[80], v2[78]);
  if (v0) {
    uint64_t v4 = sub_10026F9D8;
  }
  else {
    uint64_t v4 = sub_10026D844;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10026D6F4()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
  uint64_t v2 = *(void *)(v0 + 728);
  uint64_t v3 = *(void *)(v0 + 664);
  v1(*(void *)(v0 + 720), v3);
  v1(v2, v3);
  uint64_t v4 = *(void *)(v0 + 720);
  uint64_t v5 = *(void *)(v0 + 712);
  uint64_t v6 = *(void *)(v0 + 704);
  uint64_t v7 = *(void *)(v0 + 696);
  uint64_t v8 = *(void *)(v0 + 688);
  uint64_t v9 = *(void *)(v0 + 680);
  uint64_t v10 = *(void *)(v0 + 656);
  uint64_t v11 = *(void *)(v0 + 640);
  uint64_t v12 = *(void *)(v0 + 616);
  uint64_t v14 = *(void *)(v0 + 608);
  uint64_t v15 = *(void *)(v0 + 600);
  uint64_t v16 = *(void *)(v0 + 576);
  uint64_t v17 = *(void *)(v0 + 568);
  uint64_t v18 = *(void *)(v0 + 544);
  uint64_t v19 = *(void *)(v0 + 520);
  uint64_t v20 = *(void *)(v0 + 496);
  swift_task_dealloc(*(void *)(v0 + 728));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10026D844()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[92];
  uint64_t v2 = v0[91];
  uint64_t v3 = v0[84];
  uint64_t v4 = v0[83];
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 32) & ~v6;
  uint64_t v8 = swift_allocObject(v5, v7 + *(void *)(v3 + 72), v6 | 7);
  v0[100] = v8;
  *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  v1(v8 + v7, v2, v4);
  v0[101] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_10026D910;
  return v11(v8);
}

uint64_t sub_10026D910(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 808);
  *(void *)(v3 + 8swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v3 + 824) = v1;
  swift_task_dealloc(v4);
  swift_bridgeObjectRelease();
  if (v1) {
    uint64_t v5 = sub_10026FB34;
  }
  else {
    uint64_t v5 = sub_10026D988;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_10026D988()
{
  uint64_t v1 = *(void *)(v0 + 816);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v5 = *(void *)(v0 + 816);
    }
    else {
      uint64_t v5 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*(void *)(v0 + 816));
    uint64_t v6 = _CocoaArrayWrapper.endIndex.getter(v5);
    swift_bridgeObjectRelease();
    if (v6)
    {
LABEL_3:
      if ((v1 & 0xC000000000000001LL) != 0)
      {
        uint64_t v2 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, *(void *)(v0 + 816));
      }

      else
      {
        if (!*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
        {
          __break(1u);
          JUMPOUT(0x10026DEACLL);
        }

        uint64_t v2 = *(void *)(*(void *)(v0 + 816) + 32LL);
        swift_retain();
      }

      *(void *)(v0 + 832) = v2;
      uint64_t v3 = *(void *)(v0 + 648);
      uint64_t v4 = *(void *)(v0 + 464);
      swift_bridgeObjectRelease();
      __asm { BR              X11 }
    }
  }

  else if (*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    goto LABEL_3;
  }

  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 736);
  uint64_t v9 = *(void *)(v0 + 728);
  uint64_t v10 = *(void *)(v0 + 720);
  uint64_t v11 = *(void *)(v0 + 664);
  swift_bridgeObjectRelease();
  uint64_t v12 = type metadata accessor for OwnerCommandManager.Error(0LL);
  uint64_t v13 = sub_100007864(&qword_1009A78C0, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_1007F8DC0);
  swift_allocError(v12, v13, 0LL, 0LL);
  uint64_t v15 = v14;
  v8(v14, v9, v11);
  uint64_t v16 = swift_storeEnumTagMultiPayload(v15, v12, 0LL);
  swift_willThrow(v16);
  swift_release();
  v7(v10, v11);
  v7(v9, v11);
  uint64_t v17 = *(void *)(v0 + 720);
  uint64_t v18 = *(void *)(v0 + 712);
  uint64_t v19 = *(void *)(v0 + 704);
  uint64_t v20 = *(void *)(v0 + 696);
  uint64_t v21 = *(void *)(v0 + 688);
  uint64_t v22 = *(void *)(v0 + 680);
  uint64_t v23 = *(void *)(v0 + 656);
  uint64_t v24 = *(void *)(v0 + 640);
  uint64_t v25 = *(void *)(v0 + 616);
  uint64_t v27 = *(void *)(v0 + 608);
  uint64_t v28 = *(void *)(v0 + 600);
  uint64_t v29 = *(void *)(v0 + 576);
  uint64_t v30 = *(void *)(v0 + 568);
  uint64_t v31 = *(void *)(v0 + 544);
  uint64_t v32 = *(void *)(v0 + 520);
  uint64_t v33 = *(void *)(v0 + 496);
  swift_task_dealloc(*(void *)(v0 + 728));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10026DEBC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 840);
  *(void *)(*v1 + 848) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 616);
  sub_100015794(*(void *)(v2 + 608), &qword_1009A7C00);
  sub_100015794(v4, &qword_1009A7C08);
  if (v0) {
    uint64_t v5 = sub_10026FC90;
  }
  else {
    uint64_t v5 = sub_10026DF4C;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_10026DF4C()
{
  uint64_t v1 = swift_retain_n(*(void *)(v0 + 832), 2LL);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 832);
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = swift_slowAlloc(32LL, -1LL);
    uint64_t v44 = v6;
    *(_DWORD *)uint64_t v5 = 136315138;
    *(void *)(v0 + 424) = v4;
    uint64_t v7 = type metadata accessor for Peripheral(0LL);
    uint64_t v8 = sub_100007864( &qword_1009A7C40,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
    *(void *)(v0 + 432) = sub_1003F11D4(v9, v10, &v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 432, v0 + 440, v5 + 4, v5 + 12);
    swift_release_n(v4, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Connected to peripheral: %s", v5, 0xCu);
    swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    uint64_t v11 = *(void *)(v0 + 832);

    swift_release_n(v11, 2LL);
  }

  sub_1006CC0BC();
  *(void *)(v0 + 856) = v12;
  *(void *)(v0 + 864) = v13;
  *(void *)(v0 + 872) = v14;
  *(void *)(v0 + 880) = v15;
  if ((~(v15 & v13) & 0x3000000000000000LL) != 0)
  {
    uint64_t v34 = type metadata accessor for Service(0LL);
    Identifier.init(stringLiteral:)("FD44", 4LL, 2LL, v34);
    uint64_t v43 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.subscript.getter
                                         + async function pointer to dispatch thunk of Peripheral.subscript.getter);
    uint64_t v35 = (void *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.subscript.getter
                                     + 1));
    *(void *)(v0 + 888) = v35;
    *uint64_t v35 = v0;
    v35[1] = sub_10026E334;
    return v43(*(void *)(v0 + 568));
  }

  else
  {
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v17 = static os_log_type_t.default.getter(v16);
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
    uint64_t v20 = *(void *)(v0 + 728);
    uint64_t v21 = *(void *)(v0 + 720);
    uint64_t v22 = *(void *)(v0 + 664);
    if (v18)
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "No command to execute. Calling completion.", v23, 2u);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    swift_release();

    swift_release();
    v19(v21, v22);
    v19(v20, v22);
    uint64_t v24 = *(void *)(v0 + 720);
    uint64_t v25 = *(void *)(v0 + 712);
    uint64_t v26 = *(void *)(v0 + 704);
    uint64_t v27 = *(void *)(v0 + 696);
    uint64_t v28 = *(void *)(v0 + 688);
    uint64_t v29 = *(void *)(v0 + 680);
    uint64_t v30 = *(void *)(v0 + 656);
    uint64_t v31 = *(void *)(v0 + 640);
    uint64_t v32 = *(void *)(v0 + 616);
    uint64_t v36 = *(void *)(v0 + 608);
    uint64_t v37 = *(void *)(v0 + 600);
    uint64_t v38 = *(void *)(v0 + 576);
    uint64_t v39 = *(void *)(v0 + 568);
    uint64_t v40 = *(void *)(v0 + 544);
    uint64_t v41 = *(void *)(v0 + 520);
    uint64_t v42 = *(void *)(v0 + 496);
    swift_task_dealloc(*(void *)(v0 + 728));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10026E334(uint64_t a1)
{
  os_log_type_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 888LL);
  v3[112] = a1;
  v3[113] = v1;
  swift_task_dealloc(v4);
  (*(void (**)(void, void))(v3[70] + 8LL))(v3[71], v3[69]);
  if (v1) {
    uint64_t v5 = sub_10026FDF8;
  }
  else {
    uint64_t v5 = sub_10026E3B8;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_10026E3B8()
{
  uint64_t v1 = type metadata accessor for Characteristic(0LL);
  Identifier.init(stringLiteral:)("4F860002-943B-49EF-BED4-2F730304427A", 36LL, 2LL, v1);
  uint64_t v4 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Service.subscript.getter
                                      + async function pointer to dispatch thunk of Service.subscript.getter);
  uint64_t v2 = (void *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Service.subscript.getter
                                  + 1));
  *(void *)(v0 + 912) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10026E444;
  return v4(*(void *)(v0 + 544));
}

uint64_t sub_10026E444(uint64_t a1)
{
  os_log_type_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 912LL);
  v3[115] = a1;
  v3[116] = v1;
  swift_task_dealloc(v4);
  (*(void (**)(void, void))(v3[67] + 8LL))(v3[68], v3[66]);
  swift_release();
  if (v1) {
    uint64_t v5 = sub_10026FF78;
  }
  else {
    uint64_t v5 = sub_10026E4DC;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_10026E4DC(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Discovered FindMy services and Config characteristic.", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v5 = *(void *)(v1 + 928);
  uint64_t v6 = *(void *)(v1 + 880);
  uint64_t v7 = *(void *)(v1 + 872);
  __int128 v40 = *(_OWORD *)(v1 + 856);

  BinaryEncoder.init()();
  *(_OWORD *)(v1 + 288) = v40;
  *(void *)(v1 + 304) = v7;
  *(void *)(v1 + 312) = v6;
  unint64_t v8 = sub_1002896D0();
  *(void *)(v1 + 936) = v8;
  *(void *)(v1 + 944) = BinaryEncoder.encode<A>(_:)(v1 + 288, &type metadata for AccessoryConfigCommand, v8);
  *(void *)(v1 + 952) = v9;
  if (v5)
  {
    uint64_t v36 = *(void *)(v1 + 872);
    unint64_t v38 = *(void *)(v1 + 880);
    uint64_t v32 = *(void *)(v1 + 856);
    uint64_t v34 = *(void *)(v1 + 864);
    unint64_t v10 = *(void (**)(uint64_t, uint64_t))(v1 + 752);
    uint64_t v11 = *(void *)(v1 + 728);
    uint64_t v12 = *(void *)(v1 + 720);
    uint64_t v13 = *(void *)(v1 + 664);
    uint64_t v14 = *(void *)(v1 + 520);
    uint64_t v15 = *(void *)(v1 + 504);
    uint64_t v16 = *(void *)(v1 + 512);
    swift_release();
    swift_release();
    swift_release();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v14, v15);
    v10(v12, v13);
    v10(v11, v13);
    sub_100289940(v32, v34, v36, v38);
    uint64_t v17 = *(void *)(v1 + 720);
    uint64_t v18 = *(void *)(v1 + 712);
    uint64_t v19 = *(void *)(v1 + 704);
    uint64_t v20 = *(void *)(v1 + 696);
    uint64_t v21 = *(void *)(v1 + 688);
    uint64_t v22 = *(void *)(v1 + 680);
    uint64_t v23 = *(void *)(v1 + 656);
    uint64_t v24 = *(void *)(v1 + 640);
    uint64_t v25 = *(void *)(v1 + 616);
    uint64_t v29 = *(void *)(v1 + 608);
    uint64_t v30 = *(void *)(v1 + 600);
    uint64_t v31 = *(void *)(v1 + 576);
    uint64_t v33 = *(void *)(v1 + 568);
    uint64_t v35 = *(void *)(v1 + 544);
    uint64_t v37 = *(void *)(v1 + 520);
    uint64_t v39 = *(void *)(v1 + 496);
    swift_task_dealloc(*(void *)(v1 + 728));
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v33);
    swift_task_dealloc(v35);
    swift_task_dealloc(v37);
    swift_task_dealloc(v39);
    uint64_t v26 = *(uint64_t (**)(void))(v1 + 8);
  }

  else
  {
    uint64_t v41 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Characteristic.mtu.getter
                            + async function pointer to dispatch thunk of Characteristic.mtu.getter);
    uint64_t v27 = (void *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Characteristic.mtu.getter
                                     + 1));
    *(void *)(v1 + 960) = v27;
    *uint64_t v27 = v1;
    v27[1] = sub_10026E794;
    uint64_t v26 = v41;
  }

  return v26();
}

uint64_t sub_10026E794(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 960);
  *(void *)(*v2 + 968) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_1002700F8;
  }

  else
  {
    *(void *)(v4 + 976) = a1;
    uint64_t v6 = sub_10026E808;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_10026E808()
{
  uint64_t v1 = fragment(data:mtu:)(v0[118], v0[119], v0[122]);
  v0[123] = v1;
  uint64_t v2 = v0[115];
  uint64_t v3 = swift_allocObject(&unk_10094CD00, 32LL, 7LL);
  v0[124] = v3;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)(v3 + 24) = v1;
  uint64_t v4 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain();
  swift_bridgeObjectRetain(v1);
  uint64_t v5 = (void *)swift_task_alloc(v4);
  v0[125] = v5;
  *uint64_t v5 = v0;
  v5[1] = sub_10026E8E0;
  return withTimeout<A>(_:block:)(v0 + 40, 0x40AAD21B3B700000LL, 3LL, &unk_1009A7C38, v3, &type metadata for Data);
}

uint64_t sub_10026E8E0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1000LL);
  *(void *)(*(void *)v1 + 1008LL) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v3 = sub_1002702C4;
  }

  else
  {
    swift_release();
    uint64_t v3 = sub_10026E968;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10026E968()
{
  uint64_t v2 = *(void *)(v0 + 320);
  unint64_t v1 = *(void *)(v0 + 328);
  uint64_t v3 = swift_retain_n(*(void *)(v0 + 832), 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    unint64_t v6 = v1;
    uint64_t v7 = *(void *)(v0 + 832);
    uint64_t v8 = swift_slowAlloc(12LL, -1LL);
    uint64_t v162 = v2;
    v168[0] = swift_slowAlloc(32LL, -1LL);
    uint64_t v9 = v168[0];
    *(_DWORD *)uint64_t v8 = 136315138;
    *(void *)(v0 + 4swift_weakDestroy(v0 + 16) = v7;
    uint64_t v10 = type metadata accessor for Peripheral(0LL);
    uint64_t v11 = sub_100007864( &qword_1009A7C40,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
    *(void *)(v8 + 4) = sub_1003F11D4(v12, v13, v168);
    unint64_t v1 = v6;
    swift_release_n(v7, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Command successfully sent to: %s", (uint8_t *)v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v14 = v9;
    uint64_t v2 = v162;
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    uint64_t v16 = *(void *)(v0 + 832);

    uint64_t v15 = swift_release_n(v16, 2LL);
  }

  uint64_t v17 = *(void *)(v0 + 1008);
  BinaryDecoder.init()(v15);
  unint64_t v18 = sub_10028968C();
  BinaryDecoder.decode<A>(_:from:)( (void *)(v0 + 256),  &type metadata for AccessoryConfigCommand,  v2,  v1,  &type metadata for AccessoryConfigCommand,  v18);
  if (v17)
  {
    unint64_t v19 = *(void *)(v0 + 952);
    uint64_t v20 = *(void *)(v0 + 944);
    uint64_t v21 = v2;
    unint64_t v22 = *(void *)(v0 + 880);
    uint64_t v23 = *(void *)(v0 + 872);
    uint64_t v24 = *(void *)(v0 + 864);
    uint64_t v25 = *(void *)(v0 + 856);
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
    uint64_t v158 = *(void *)(v0 + 720);
    uint64_t v163 = *(void *)(v0 + 728);
    uint64_t v27 = *(void *)(v0 + 664);
    uint64_t v155 = *(void *)(v0 + 520);
    uint64_t v147 = *(void *)(v0 + 512);
    uint64_t v150 = *(void *)(v0 + 504);
    os_log_t log = *(os_log_t *)(v0 + 488);
    *(void *)type = *(void *)(v0 + 480);
    uint64_t v139 = *(void *)(v0 + 496);
    sub_100016F9C(v21, v1);
    sub_100016F9C(v20, v19);
    sub_100289940(v25, v24, v23, v22);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    (*((void (**)(uint64_t, os_log_type_t *))log + 1))(v139, *(os_log_type_t **)type);
    (*(void (**)(uint64_t, uint64_t))(v147 + 8))(v155, v150);
    v26(v158, v27);
    v26(v163, v27);
LABEL_14:
    uint64_t v89 = *(void *)(v0 + 720);
    uint64_t v90 = *(void *)(v0 + 712);
    uint64_t v91 = *(void *)(v0 + 704);
    uint64_t v92 = *(void *)(v0 + 696);
    uint64_t v93 = *(void *)(v0 + 688);
    uint64_t v94 = *(void *)(v0 + 680);
    uint64_t v95 = *(void *)(v0 + 656);
    uint64_t v96 = *(void *)(v0 + 640);
    uint64_t v97 = *(void *)(v0 + 616);
    uint64_t v146 = *(void *)(v0 + 608);
    uint64_t v149 = *(void *)(v0 + 600);
    uint64_t v152 = *(void *)(v0 + 576);
    uint64_t v154 = *(void *)(v0 + 568);
    uint64_t v157 = *(void *)(v0 + 544);
    uint64_t v161 = *(void *)(v0 + 520);
    uint64_t v166 = *(void *)(v0 + 496);
    swift_task_dealloc(*(void *)(v0 + 728));
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v146);
    swift_task_dealloc(v149);
    swift_task_dealloc(v152);
    swift_task_dealloc(v154);
    swift_task_dealloc(v157);
    swift_task_dealloc(v161);
    swift_task_dealloc(v166);
    unint64_t v98 = *(uint64_t (**)(void))(v0 + 8);
    return v98();
  }

  unint64_t v156 = v1;
  uint64_t v28 = *(void *)(v0 + 936);
  unint64_t v144 = (void *)(v0 + 376);
  uint64_t v159 = *(void *)(v0 + 464);
  uint64_t v29 = *(void *)(v0 + 256);
  uint64_t v30 = *(void *)(v0 + 264);
  uint64_t v31 = *(void *)(v0 + 272);
  unint64_t v32 = *(void *)(v0 + 280);
  *(void *)(v0 + 40) = &type metadata for AccessoryConfigCommand;
  *(void *)(v0 + 48) = v18;
  *(void *)(v0 + 56) = v28;
  uint64_t v33 = (void *)swift_allocObject(&unk_10094C5D0, 48LL, 7LL);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v33;
  v33[2] = v29;
  void v33[3] = v30;
  v33[4] = v31;
  void v33[5] = v32;
  uint64_t v145 = v29;
  uint64_t v148 = v30;
  uint64_t v151 = v31;
  unint64_t v153 = v32;
  sub_1000F40B4(v29, v30, v31, v32, sub_10001736C);
  sub_10027F824((void (*)(void, void))(v0 + 16), v159, v0 + 64);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  sub_10001581C(v0 + 64, v0 + 112, &qword_1009A7998);
  if ((*(_BYTE *)(v0 + 153) & 1) != 0)
  {
    uint64_t v164 = v2;
    uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 736);
    uint64_t v35 = *(void *)(v0 + 728);
    uint64_t v36 = *(void *)(v0 + 720);
    uint64_t v37 = *(void *)(v0 + 688);
    uint64_t v38 = *(void *)(v0 + 680);
    uint64_t v39 = *(void *)(v0 + 664);
    swift_bridgeObjectRelease();
    sub_100254338(v0 + 112, v0 + 208);
    sub_100254374((void *)(v0 + 208), v0 + 160);
    v34(v37, v35, v39);
    uint64_t v40 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v34)(v38, v36, v39);
    uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v42 = static os_log_type_t.error.getter(v41);
    BOOL v43 = os_log_type_enabled(v41, v42);
    uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
    uint64_t v45 = *(void *)(v0 + 688);
    uint64_t v46 = *(void *)(v0 + 680);
    uint64_t v47 = *(void *)(v0 + 664);
    os_log_t v142 = (os_log_t)(v0 + 208);
    if (v43)
    {
      uint64_t v130 = *(void *)(v0 + 680);
      uint64_t v48 = swift_slowAlloc(42LL, -1LL);
      uint64_t v140 = swift_slowAlloc(96LL, -1LL);
      v168[0] = v140;
      *(_DWORD *)uint64_t v48 = 136446979;
      sub_1007C9800();
      *(void *)(v0 + 344) = sub_1003F11D4(v49, v50, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v48 + 4, v48 + 12);
      swift_bridgeObjectRelease();
      sub_1002543B0((uint64_t *)(v0 + 160));
      *(_WORD *)(v48 + 12) = 2160;
      *(void *)(v0 + 352) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v0 + 360, v48 + 14, v48 + 22);
      *(_WORD *)(v48 + 22) = 2081;
      uint64_t v51 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter(v47, v51);
      *(void *)(v0 + 360) = sub_1003F11D4(v52, v53, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 360, v0 + 368, v48 + 24, v48 + 32);
      swift_bridgeObjectRelease();
      v44(v45, v47);
      *(_WORD *)(v48 + 32) = 2082;
      uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter(v47, v51);
      *(void *)(v0 + 368) = sub_1003F11D4(v54, v55, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 368, v144, v48 + 34, v48 + 42);
      swift_bridgeObjectRelease();
      v44(v130, v47);
      _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "Command failed with %{public}s.\nBeacon %{private,mask.hash}s Command %{public}s",  (uint8_t *)v48,  0x2Au);
      swift_arrayDestroy(v140, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v140, -1LL, -1LL);
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    else
    {
      sub_1002543B0((uint64_t *)(v0 + 160));
      v44(v45, v47);
      v44(v46, v47);
    }

    uint64_t v77 = *(void *)(v0 + 944);
    unint64_t v123 = *(void *)(v0 + 952);
    uint64_t v124 = *(void *)(v0 + 872);
    uint64_t v122 = *(void *)(v0 + 864);
    uint64_t v78 = *(void *)(v0 + 856);
    unint64_t v125 = *(void *)(v0 + 880);
    unint64_t v79 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
    *(void *)typea = *(void *)(v0 + 720);
    uint64_t v141 = *(void *)(v0 + 728);
    uint64_t v80 = *(void *)(v0 + 664);
    uint64_t v134 = *(void *)(v0 + 504);
    os_log_t loga = *(os_log_t *)(v0 + 520);
    *(void *)unint64_t v129 = *(void *)(v0 + 496);
    uint64_t v132 = *(void *)(v0 + 512);
    uint64_t v126 = *(void *)(v0 + 488);
    uint64_t v128 = *(void *)(v0 + 480);
    uint64_t v81 = type metadata accessor for OwnerCommandManager.Error(0LL);
    uint64_t v82 = sub_100007864(&qword_1009A78C0, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_1007F8DC0);
    swift_allocError(v81, v82, 0LL, 0LL);
    uint64_t v84 = v83;
    unint64_t v85 = sub_100122CD4();
    uint64_t v86 = swift_allocError(&type metadata for CentralManager.Error, v85, 0LL, 0LL);
    sub_100254374(v142, v87);
    *uint64_t v84 = v86;
    uint64_t v88 = swift_storeEnumTagMultiPayload(v84, v81, 1LL);
    swift_willThrow(v88);
    sub_100016F9C(v164, v156);
    sub_1000F40B4(v145, v148, v151, v153, sub_100016F9C);
    sub_100016F9C(v77, v123);
    sub_100289940(v78, v122, v124, v125);
    swift_release();
    swift_release();
    swift_release();
    sub_1002543B0((uint64_t *)v142);
    sub_100015794(v0 + 64, &qword_1009A7998);
    (*(void (**)(os_log_type_t *, uint64_t))(v126 + 8))(*(os_log_type_t **)v129, v128);
    (*(void (**)(os_log_t, uint64_t))(v132 + 8))(loga, v134);
    v79(*(void *)typea, v80);
    v79(v141, v80);
    goto LABEL_14;
  }

  int v56 = *(unsigned __int8 *)(v0 + 144);
  sub_100289940(*(void *)(v0 + 112), *(void *)(v0 + 120), *(void *)(v0 + 128), *(void *)(v0 + 136));
  if (v56 == 1)
  {
    uint64_t v160 = v0 + 64;
    uint64_t v165 = v2;
    uint64_t v57 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 736);
    uint64_t v58 = *(void *)(v0 + 720);
    uint64_t v59 = *(void *)(v0 + 696);
    uint64_t v60 = *(void *)(v0 + 664);
    v57(*(void *)(v0 + 704), *(void *)(v0 + 728), v60);
    uint64_t v61 = v57(v59, v58, v60);
    uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
    os_log_type_t v63 = static os_log_type_t.default.getter(v62);
    unint64_t v143 = v62;
    BOOL v64 = os_log_type_enabled(v62, v63);
    uint64_t v65 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
    uint64_t v66 = *(void *)(v0 + 704);
    uint64_t v67 = *(void *)(v0 + 664);
    uint64_t v69 = *(void *)(v0 + 488);
    uint64_t v68 = *(void *)(v0 + 496);
    uint64_t v70 = *(void *)(v0 + 480);
    if (v64)
    {
      uint64_t v127 = *(void *)(v0 + 696);
      uint64_t v71 = swift_slowAlloc(32LL, -1LL);
      uint64_t v131 = swift_slowAlloc(64LL, -1LL);
      v168[0] = v131;
      *(_DWORD *)uint64_t v71 = 141558531;
      *(void *)(v0 + 392) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 392, v0 + 400, v71 + 4, v71 + 12);
      *(_WORD *)(v71 + 12) = 2081;
      uint64_t v133 = v70;
      uint64_t v72 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v73 = dispatch thunk of CustomStringConvertible.description.getter(v67, v72);
      *(void *)(v0 + 400) = sub_1003F11D4(v73, v74, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 400, v0 + 408, v71 + 14, v71 + 22);
      swift_bridgeObjectRelease();
      v65(v66, v67);
      *(_WORD *)(v71 + 22) = 2082;
      uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter(v67, v72);
      *(void *)(v0 + 408) = sub_1003F11D4(v75, v76, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 408, v0 + 416, v71 + 24, v71 + 32);
      swift_bridgeObjectRelease();
      v65(v127, v67);
      _os_log_impl( (void *)&_mh_execute_header,  v143,  v63,  "Command completed successfully! Beacon %{private,mask.hash}s Command %{public}s.",  (uint8_t *)v71,  0x20u);
      swift_arrayDestroy(v131, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v131, -1LL, -1LL);
      swift_slowDealloc(v71, -1LL, -1LL);
      sub_100016F9C(v165, v156);
      sub_1000F40B4(v145, v148, v151, v32, sub_100016F9C);

      sub_100015794(v160, &qword_1009A7998);
      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v133);
    }

    else
    {
      uint64_t v108 = *(void *)(v0 + 696);
      sub_100016F9C(v165, v156);
      sub_1000F40B4(v145, v148, v151, v153, sub_100016F9C);

      v65(v108, v67);
      v65(v66, v67);
      sub_100015794(v160, &qword_1009A7998);
      (*(void (**)(uint64_t, uint64_t))(v69 + 8))(v68, v70);
    }

    uint64_t v109 = *(void *)(v0 + 832);
    swift_bridgeObjectRelease();
    uint64_t v110 = swift_retain_n(v109, 2LL);
    uint64_t v111 = (os_log_s *)Logger.logObject.getter(v110);
    os_log_type_t v112 = static os_log_type_t.default.getter(v111);
    BOOL v113 = os_log_type_enabled(v111, v112);
    uint64_t v114 = *(void *)(v0 + 832);
    if (v113)
    {
      unint64_t v115 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v116 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)unint64_t v115 = 136315138;
      v168[0] = v116;
      *unint64_t v144 = v114;
      uint64_t v117 = type metadata accessor for Peripheral(0LL);
      uint64_t v118 = sub_100007864( &qword_1009A7C40,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
      uint64_t v119 = dispatch thunk of CustomStringConvertible.description.getter(v117, v118);
      *(void *)(v0 + 384) = sub_1003F11D4(v119, v120, v168);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 384, v0 + 392, v115 + 4, v115 + 12);
      swift_release_n(v114, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v111, v112, "Canceling connection to %s", v115, 0xCu);
      swift_arrayDestroy(v116, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v116, -1LL, -1LL);
      swift_slowDealloc(v115, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v114, 2LL);
    }

    *(void *)(v0 + 10swift_weakDestroy(v0 + 16) = v121;
    *__n128 v121 = v0;
    v121[1] = sub_10026F7B0;
    unint64_t v98 = v167;
    return v98();
  }

  uint64_t v101 = *(void *)(v0 + 488);
  uint64_t v100 = *(void *)(v0 + 496);
  uint64_t v102 = *(void *)(v0 + 480);
  sub_100016F9C(v2, v156);
  sub_1000F40B4(v145, v148, v151, v32, sub_100016F9C);
  sub_100015794(v0 + 64, &qword_1009A7998);
  (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v100, v102);
  uint64_t v103 = *(void *)(v0 + 984);
  uint64_t v104 = *(void *)(v0 + 920);
  uint64_t v105 = swift_allocObject(&unk_10094CD00, 32LL, 7LL);
  *(void *)(v0 + 992) = v105;
  *(void *)(v105 + swift_weakDestroy(v0 + 16) = v104;
  *(void *)(v105 + 24) = v103;
  uint64_t v106 = async function pointer to withTimeout<A>(_:block:)[1];
  swift_retain();
  swift_bridgeObjectRetain(v103);
  uint64_t v107 = (void *)swift_task_alloc(v106);
  *(void *)(v0 + 1000) = v107;
  void *v107 = v0;
  v107[1] = sub_10026E8E0;
  return withTimeout<A>(_:block:)(v0 + 320, 0x40AAD21B3B700000LL, 3LL, &unk_1009A7C38, v105, &type metadata for Data);
}

uint64_t sub_10026F7B0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1016LL);
  *(void *)(*(void *)v1 + 1024LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100270490;
  }
  else {
    uint64_t v3 = sub_10026F814;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10026F814()
{
  unint64_t v1 = *(void *)(v0 + 880);
  uint64_t v2 = *(void *)(v0 + 872);
  uint64_t v3 = *(void *)(v0 + 864);
  uint64_t v4 = *(void *)(v0 + 856);
  os_log_type_t v5 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
  uint64_t v25 = *(void *)(v0 + 720);
  uint64_t v27 = *(void *)(v0 + 728);
  uint64_t v6 = *(void *)(v0 + 664);
  uint64_t v21 = *(void *)(v0 + 520);
  uint64_t v7 = *(void *)(v0 + 504);
  uint64_t v8 = *(void *)(v0 + 512);
  sub_100016F9C(*(void *)(v0 + 944), *(void *)(v0 + 952));
  sub_100289940(v4, v3, v2, v1);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v21, v7);
  v5(v25, v6);
  v5(v27, v6);
  uint64_t v9 = *(void *)(v0 + 720);
  uint64_t v10 = *(void *)(v0 + 712);
  uint64_t v11 = *(void *)(v0 + 704);
  uint64_t v12 = *(void *)(v0 + 696);
  uint64_t v13 = *(void *)(v0 + 688);
  uint64_t v14 = *(void *)(v0 + 680);
  uint64_t v15 = *(void *)(v0 + 656);
  uint64_t v16 = *(void *)(v0 + 640);
  uint64_t v17 = *(void *)(v0 + 616);
  uint64_t v19 = *(void *)(v0 + 608);
  uint64_t v20 = *(void *)(v0 + 600);
  uint64_t v22 = *(void *)(v0 + 576);
  uint64_t v23 = *(void *)(v0 + 568);
  uint64_t v24 = *(void *)(v0 + 544);
  uint64_t v26 = *(void *)(v0 + 520);
  uint64_t v28 = *(void *)(v0 + 496);
  swift_task_dealloc(*(void *)(v0 + 728));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10026F9D8()
{
  unint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
  uint64_t v2 = *(void *)(v0 + 728);
  uint64_t v3 = *(void *)(v0 + 720);
  uint64_t v4 = *(void *)(v0 + 664);
  swift_release(*(void *)(v0 + 768));
  v1(v3, v4);
  v1(v2, v4);
  uint64_t v5 = *(void *)(v0 + 720);
  uint64_t v6 = *(void *)(v0 + 712);
  uint64_t v7 = *(void *)(v0 + 704);
  uint64_t v8 = *(void *)(v0 + 696);
  uint64_t v9 = *(void *)(v0 + 688);
  uint64_t v10 = *(void *)(v0 + 680);
  uint64_t v11 = *(void *)(v0 + 656);
  uint64_t v12 = *(void *)(v0 + 640);
  uint64_t v13 = *(void *)(v0 + 616);
  uint64_t v15 = *(void *)(v0 + 608);
  uint64_t v16 = *(void *)(v0 + 600);
  uint64_t v17 = *(void *)(v0 + 576);
  uint64_t v18 = *(void *)(v0 + 568);
  uint64_t v19 = *(void *)(v0 + 544);
  uint64_t v20 = *(void *)(v0 + 520);
  uint64_t v21 = *(void *)(v0 + 496);
  swift_task_dealloc(*(void *)(v0 + 728));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10026FB34()
{
  unint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
  uint64_t v2 = *(void *)(v0 + 728);
  uint64_t v3 = *(void *)(v0 + 720);
  uint64_t v4 = *(void *)(v0 + 664);
  swift_release(*(void *)(v0 + 768));
  v1(v3, v4);
  v1(v2, v4);
  uint64_t v5 = *(void *)(v0 + 720);
  uint64_t v6 = *(void *)(v0 + 712);
  uint64_t v7 = *(void *)(v0 + 704);
  uint64_t v8 = *(void *)(v0 + 696);
  uint64_t v9 = *(void *)(v0 + 688);
  uint64_t v10 = *(void *)(v0 + 680);
  uint64_t v11 = *(void *)(v0 + 656);
  uint64_t v12 = *(void *)(v0 + 640);
  uint64_t v13 = *(void *)(v0 + 616);
  uint64_t v15 = *(void *)(v0 + 608);
  uint64_t v16 = *(void *)(v0 + 600);
  uint64_t v17 = *(void *)(v0 + 576);
  uint64_t v18 = *(void *)(v0 + 568);
  uint64_t v19 = *(void *)(v0 + 544);
  uint64_t v20 = *(void *)(v0 + 520);
  uint64_t v21 = *(void *)(v0 + 496);
  swift_task_dealloc(*(void *)(v0 + 728));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10026FC90()
{
  uint64_t v1 = *(void *)(v0 + 832);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
  uint64_t v3 = *(void *)(v0 + 728);
  uint64_t v4 = *(void *)(v0 + 720);
  uint64_t v5 = *(void *)(v0 + 664);
  swift_release(*(void *)(v0 + 768));
  swift_release(v1);
  v2(v4, v5);
  v2(v3, v5);
  uint64_t v6 = *(void *)(v0 + 720);
  uint64_t v7 = *(void *)(v0 + 712);
  uint64_t v8 = *(void *)(v0 + 704);
  uint64_t v9 = *(void *)(v0 + 696);
  uint64_t v10 = *(void *)(v0 + 688);
  uint64_t v11 = *(void *)(v0 + 680);
  uint64_t v12 = *(void *)(v0 + 656);
  uint64_t v13 = *(void *)(v0 + 640);
  uint64_t v14 = *(void *)(v0 + 616);
  uint64_t v16 = *(void *)(v0 + 608);
  uint64_t v17 = *(void *)(v0 + 600);
  uint64_t v18 = *(void *)(v0 + 576);
  uint64_t v19 = *(void *)(v0 + 568);
  uint64_t v20 = *(void *)(v0 + 544);
  uint64_t v21 = *(void *)(v0 + 520);
  uint64_t v22 = *(void *)(v0 + 496);
  swift_task_dealloc(*(void *)(v0 + 728));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10026FDF8()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
  uint64_t v2 = *(void *)(v0 + 728);
  uint64_t v3 = *(void *)(v0 + 720);
  uint64_t v4 = *(void *)(v0 + 664);
  sub_100289940(*(void *)(v0 + 856), *(void *)(v0 + 864), *(void *)(v0 + 872), *(void *)(v0 + 880));
  swift_release();
  swift_release();
  v1(v3, v4);
  v1(v2, v4);
  uint64_t v5 = *(void *)(v0 + 720);
  uint64_t v6 = *(void *)(v0 + 712);
  uint64_t v7 = *(void *)(v0 + 704);
  uint64_t v8 = *(void *)(v0 + 696);
  uint64_t v9 = *(void *)(v0 + 688);
  uint64_t v10 = *(void *)(v0 + 680);
  uint64_t v11 = *(void *)(v0 + 656);
  uint64_t v12 = *(void *)(v0 + 640);
  uint64_t v13 = *(void *)(v0 + 616);
  uint64_t v15 = *(void *)(v0 + 608);
  uint64_t v16 = *(void *)(v0 + 600);
  uint64_t v17 = *(void *)(v0 + 576);
  uint64_t v18 = *(void *)(v0 + 568);
  uint64_t v19 = *(void *)(v0 + 544);
  uint64_t v20 = *(void *)(v0 + 520);
  uint64_t v21 = *(void *)(v0 + 496);
  swift_task_dealloc(*(void *)(v0 + 728));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10026FF78()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
  uint64_t v2 = *(void *)(v0 + 728);
  uint64_t v3 = *(void *)(v0 + 720);
  uint64_t v4 = *(void *)(v0 + 664);
  sub_100289940(*(void *)(v0 + 856), *(void *)(v0 + 864), *(void *)(v0 + 872), *(void *)(v0 + 880));
  swift_release();
  swift_release();
  v1(v3, v4);
  v1(v2, v4);
  uint64_t v5 = *(void *)(v0 + 720);
  uint64_t v6 = *(void *)(v0 + 712);
  uint64_t v7 = *(void *)(v0 + 704);
  uint64_t v8 = *(void *)(v0 + 696);
  uint64_t v9 = *(void *)(v0 + 688);
  uint64_t v10 = *(void *)(v0 + 680);
  uint64_t v11 = *(void *)(v0 + 656);
  uint64_t v12 = *(void *)(v0 + 640);
  uint64_t v13 = *(void *)(v0 + 616);
  uint64_t v15 = *(void *)(v0 + 608);
  uint64_t v16 = *(void *)(v0 + 600);
  uint64_t v17 = *(void *)(v0 + 576);
  uint64_t v18 = *(void *)(v0 + 568);
  uint64_t v19 = *(void *)(v0 + 544);
  uint64_t v20 = *(void *)(v0 + 520);
  uint64_t v21 = *(void *)(v0 + 496);
  swift_task_dealloc(*(void *)(v0 + 728));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002700F8()
{
  unint64_t v1 = *(void *)(v0 + 880);
  uint64_t v2 = *(void *)(v0 + 872);
  uint64_t v3 = *(void *)(v0 + 864);
  uint64_t v4 = *(void *)(v0 + 856);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
  uint64_t v26 = *(void *)(v0 + 720);
  uint64_t v28 = *(void *)(v0 + 728);
  uint64_t v6 = *(void *)(v0 + 664);
  uint64_t v22 = *(void *)(v0 + 520);
  uint64_t v7 = *(void *)(v0 + 504);
  uint64_t v8 = *(void *)(v0 + 512);
  sub_100016F9C(*(void *)(v0 + 944), *(void *)(v0 + 952));
  sub_100289940(v4, v3, v2, v1);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v22, v7);
  v5(v26, v6);
  v5(v28, v6);
  uint64_t v9 = *(void *)(v0 + 720);
  uint64_t v10 = *(void *)(v0 + 712);
  uint64_t v11 = *(void *)(v0 + 704);
  uint64_t v12 = *(void *)(v0 + 696);
  uint64_t v13 = *(void *)(v0 + 688);
  uint64_t v14 = *(void *)(v0 + 680);
  uint64_t v15 = *(void *)(v0 + 656);
  uint64_t v16 = *(void *)(v0 + 640);
  uint64_t v17 = *(void *)(v0 + 616);
  uint64_t v19 = *(void *)(v0 + 608);
  uint64_t v20 = *(void *)(v0 + 600);
  uint64_t v21 = *(void *)(v0 + 576);
  uint64_t v23 = *(void *)(v0 + 568);
  uint64_t v24 = *(void *)(v0 + 544);
  uint64_t v25 = *(void *)(v0 + 520);
  uint64_t v27 = *(void *)(v0 + 496);
  swift_task_dealloc(*(void *)(v0 + 728));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002702C4()
{
  unint64_t v1 = *(void *)(v0 + 880);
  uint64_t v2 = *(void *)(v0 + 872);
  uint64_t v3 = *(void *)(v0 + 864);
  uint64_t v4 = *(void *)(v0 + 856);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
  uint64_t v26 = *(void *)(v0 + 720);
  uint64_t v28 = *(void *)(v0 + 728);
  uint64_t v6 = *(void *)(v0 + 664);
  uint64_t v22 = *(void *)(v0 + 520);
  uint64_t v7 = *(void *)(v0 + 504);
  uint64_t v8 = *(void *)(v0 + 512);
  sub_100016F9C(*(void *)(v0 + 944), *(void *)(v0 + 952));
  sub_100289940(v4, v3, v2, v1);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v22, v7);
  v5(v26, v6);
  v5(v28, v6);
  uint64_t v9 = *(void *)(v0 + 720);
  uint64_t v10 = *(void *)(v0 + 712);
  uint64_t v11 = *(void *)(v0 + 704);
  uint64_t v12 = *(void *)(v0 + 696);
  uint64_t v13 = *(void *)(v0 + 688);
  uint64_t v14 = *(void *)(v0 + 680);
  uint64_t v15 = *(void *)(v0 + 656);
  uint64_t v16 = *(void *)(v0 + 640);
  uint64_t v17 = *(void *)(v0 + 616);
  uint64_t v19 = *(void *)(v0 + 608);
  uint64_t v20 = *(void *)(v0 + 600);
  uint64_t v21 = *(void *)(v0 + 576);
  uint64_t v23 = *(void *)(v0 + 568);
  uint64_t v24 = *(void *)(v0 + 544);
  uint64_t v25 = *(void *)(v0 + 520);
  uint64_t v27 = *(void *)(v0 + 496);
  swift_task_dealloc(*(void *)(v0 + 728));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100270490()
{
  unint64_t v1 = *(void *)(v0 + 880);
  uint64_t v2 = *(void *)(v0 + 872);
  uint64_t v3 = *(void *)(v0 + 864);
  uint64_t v4 = *(void *)(v0 + 856);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t))(v0 + 752);
  uint64_t v26 = *(void *)(v0 + 720);
  uint64_t v28 = *(void *)(v0 + 728);
  uint64_t v6 = *(void *)(v0 + 664);
  uint64_t v22 = *(void *)(v0 + 520);
  uint64_t v7 = *(void *)(v0 + 504);
  uint64_t v8 = *(void *)(v0 + 512);
  sub_100016F9C(*(void *)(v0 + 944), *(void *)(v0 + 952));
  sub_100289940(v4, v3, v2, v1);
  swift_release();
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v22, v7);
  v5(v26, v6);
  v5(v28, v6);
  uint64_t v9 = *(void *)(v0 + 720);
  uint64_t v10 = *(void *)(v0 + 712);
  uint64_t v11 = *(void *)(v0 + 704);
  uint64_t v12 = *(void *)(v0 + 696);
  uint64_t v13 = *(void *)(v0 + 688);
  uint64_t v14 = *(void *)(v0 + 680);
  uint64_t v15 = *(void *)(v0 + 656);
  uint64_t v16 = *(void *)(v0 + 640);
  uint64_t v17 = *(void *)(v0 + 616);
  uint64_t v19 = *(void *)(v0 + 608);
  uint64_t v20 = *(void *)(v0 + 600);
  uint64_t v21 = *(void *)(v0 + 576);
  uint64_t v23 = *(void *)(v0 + 568);
  uint64_t v24 = *(void *)(v0 + 544);
  uint64_t v25 = *(void *)(v0 + 520);
  uint64_t v27 = *(void *)(v0 + 496);
  swift_task_dealloc(*(void *)(v0 + 728));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10027065C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a1;
  uint64_t v5 = sub_100004AEC(&qword_1009A1BB8);
  v3[3] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[4] = v6;
  uint64_t v7 = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v3[5] = v7;
  v3[6] = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_100270708;
  return v10(v7, a3);
}

uint64_t sub_100270708()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 48LL);
  uint64_t v3 = *(void **)v1;
  v3[7] = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_1002708A0, 0LL, 0LL);
  }
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to AsyncSequence<>.reassemble()[1]);
  v3[8] = v5;
  uint64_t v6 = sub_1000372EC( (unint64_t *)&qword_1009B9420,  &qword_1009A1BB8,  (uint64_t)&protocol conformance descriptor for AsyncThrowingStream<A, B>);
  *uint64_t v5 = v3;
  v5[1] = sub_1002707CC;
  return AsyncSequence<>.reassemble()(v3[3], v6);
}

uint64_t sub_1002707CC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *(void **)v3;
  uint64_t v7 = *(void *)(*(void *)v3 + 64LL);
  *(void *)(*(void *)v3 + 72LL) = v2;
  swift_task_dealloc(v7);
  uint64_t v9 = v6[4];
  uint64_t v8 = v6[5];
  uint64_t v10 = v6[3];
  if (v2)
  {
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    uint64_t v11 = sub_1002708D4;
  }

  else
  {
    v6[10] = a2;
    v6[11] = a1;
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    uint64_t v11 = sub_10027085C;
  }

  return swift_task_switch(v11, 0LL, 0LL);
}

uint64_t sub_10027085C()
{
  uint64_t v1 = *(void *)(v0 + 40);
  *(int8x16_t *)*(void *)(v0 + swift_weakDestroy(v0 + 16) = vextq_s8(*(int8x16_t *)(v0 + 80), *(int8x16_t *)(v0 + 80), 8uLL);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002708A0()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002708D4()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100270908(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[16] = a3;
  v4[17] = a4;
  v4[14] = a1;
  v4[15] = a2;
  uint64_t v5 = sub_100004AEC(&qword_1009A78B8);
  v4[18] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  v4[19] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[20] = v7;
  v4[21] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  v4[22] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[23] = v9;
  v4[24] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AccessoryCommand(0LL);
  v4[25] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v4[26] = v11;
  uint64_t v12 = *(void *)(v11 + 64);
  v4[27] = v12;
  unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v4[28] = swift_task_alloc(v13);
  v4[29] = swift_task_alloc(v13);
  uint64_t v14 = type metadata accessor for UUID(0LL);
  v4[30] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v4[31] = v15;
  unint64_t v16 = (*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[32] = swift_task_alloc(v16);
  v4[33] = swift_task_alloc(v16);
  v4[34] = swift_task_alloc(v16);
  return swift_task_switch(sub_100270A38, 0LL, 0LL);
}

uint64_t sub_100270A38()
{
  uint64_t v1 = v0[34];
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[31];
  uint64_t v4 = v0[14] + *(int *)(v0[25] + 20LL);
  uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[35] = v5;
  v5(v1, v4, v2);
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
  uint64_t v7 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v8 = (v7 + 32) & ~v7;
  uint64_t v9 = swift_allocObject(v6, v8 + *(void *)(v3 + 72), v7 | 7);
  v0[36] = v9;
  *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  v5(v9 + v8, v1, v2);
  uint64_t v10 = (void *)swift_task_alloc(dword_1009C0ECC);
  v0[37] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100270B10;
  return sub_1007CBF38(v9);
}

uint64_t sub_100270B10(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 296LL);
  *(void *)(*(void *)v1 + 304LL) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100270B74, 0LL, 0LL);
}

uint64_t sub_100270B74()
{
  uint64_t v1 = *(void *)(v0 + 304);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v40 = *(void *)(v0 + 304);
    }
    else {
      uint64_t v40 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*(void *)(v0 + 304));
    uint64_t v41 = _CocoaArrayWrapper.endIndex.getter(v40);
    swift_bridgeObjectRelease();
    if (v41)
    {
LABEL_3:
      if ((v1 & 0xC000000000000001LL) != 0)
      {
        id v85 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, *(void *)(v0 + 304));
      }

      else
      {
        if (!*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
        {
          __break(1u);
          goto LABEL_24;
        }

        id v85 = *(id *)(*(void *)(v0 + 304) + 32LL);
      }

      uint64_t aBlock = (void *)(v0 + 16);
      uint64_t v86 = v0 + 64;
      swift_bridgeObjectRelease();
      if (qword_10099B220 == -1)
      {
LABEL_7:
        uint64_t v2 = *(void *)(v0 + 272);
        uint64_t v3 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 280);
        uint64_t v4 = *(void *)(v0 + 256);
        uint64_t v6 = *(void *)(v0 + 232);
        uint64_t v5 = *(void *)(v0 + 240);
        uint64_t v7 = *(void *)(v0 + 112);
        uint64_t v8 = type metadata accessor for Logger(0LL);
        sub_10000A720(v8, (uint64_t)qword_100A2A470);
        sub_10001DC4C(v7, v6, type metadata accessor for AccessoryCommand);
        uint64_t v9 = v3(v4, v2, v5);
        uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
        os_log_type_t v11 = static os_log_type_t.default.getter(v10);
        BOOL v12 = os_log_type_enabled(v10, v11);
        uint64_t v14 = *(void *)(v0 + 248);
        uint64_t v13 = *(void *)(v0 + 256);
        uint64_t v16 = *(void *)(v0 + 232);
        uint64_t v15 = *(void *)(v0 + 240);
        if (v12)
        {
          uint64_t v82 = *(void *)(v0 + 248);
          uint64_t v17 = swift_slowAlloc(32LL, -1LL);
          uint64_t v79 = swift_slowAlloc(64LL, -1LL);
          uint64_t v87 = v79;
          *(_DWORD *)uint64_t v17 = 136446723;
          sub_1006CC4C0();
          *(void *)(v0 + 72) = sub_1003F11D4(v18, v19, &v87);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v17 + 4, v17 + 12);
          swift_bridgeObjectRelease();
          sub_100018C68(v16, type metadata accessor for AccessoryCommand);
          *(_WORD *)(v17 + 12) = 2160;
          *(void *)(v0 + 80) = 1752392040LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v17 + 14, v17 + 22);
          *(_WORD *)(v17 + 22) = 2081;
          uint64_t v20 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(v15, v20);
          *(void *)(v0 + 88) = sub_1003F11D4(v21, v22, &v87);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v0 + 96, v17 + 24, v17 + 32);
          swift_bridgeObjectRelease();
          uint64_t v83 = *(void (**)(uint64_t, uint64_t))(v82 + 8);
          v83(v13, v15);
          _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "Executing %{public}s for beacon %{private,mask.hash}s",  (uint8_t *)v17,  0x20u);
          swift_arrayDestroy(v79, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v79, -1LL, -1LL);
          swift_slowDealloc(v17, -1LL, -1LL);
        }

        else
        {
          sub_100018C68(*(void *)(v0 + 232), type metadata accessor for AccessoryCommand);
          uint64_t v83 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
          v83(v13, v15);
        }

        uint64_t v80 = *(void *)(v0 + 240);
        *(void *)type = *(void *)(v0 + 272);
        uint64_t v24 = *(void *)(v0 + 216);
        uint64_t v23 = *(void *)(v0 + 224);
        uint64_t v25 = *(void *)(v0 + 208);
        uint64_t v77 = *(void *)(v0 + 184);
        uint64_t v78 = *(void *)(v0 + 176);
        uint64_t v73 = *(void *)(v0 + 192);
        uint64_t v74 = *(void *)(v0 + 168);
        uint64_t v75 = *(void *)(v0 + 152);
        uint64_t v27 = *(void *)(v0 + 128);
        uint64_t v26 = *(void *)(v0 + 136);
        uint64_t v28 = *(void *)(v0 + 120);
        uint64_t v76 = *(void *)(v0 + 160);
        sub_10001DC4C(*(void *)(v0 + 112), v23, type metadata accessor for AccessoryCommand);
        uint64_t v29 = *(unsigned __int8 *)(v25 + 80);
        uint64_t v30 = (v29 + 32) & ~v29;
        unint64_t v31 = (v24 + v30 + 7) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v32 = swift_allocObject(&unk_10094C3F0, v31 + 16, v29 | 7);
        *(void *)(v32 + swift_weakDestroy(v0 + 16) = v28;
        *(void *)(v32 + 24) = v85;
        sub_10002218C(v23, v32 + v30, type metadata accessor for AccessoryCommand);
        uint64_t v33 = (void *)(v32 + v31);
        *uint64_t v33 = v27;
        v33[1] = v26;
        *(void *)(v0 + 48) = sub_100286BB4;
        *(void *)(v0 + 56) = v32;
        *(void *)(v0 + swift_weakDestroy(v0 + 16) = _NSConcreteStackBlock;
        *(void *)(v0 + 24) = 1107296256LL;
        *(void *)(v0 + 32) = sub_1001C31E8;
        *(void *)(v0 + 40) = &unk_10094C408;
        uint64_t v34 = _Block_copy(aBlock);
        swift_retain();
        id v35 = v85;
        uint64_t v36 = swift_retain();
        static DispatchQoS.unspecified.getter(v36);
        *(void *)(v0 + 64) = _swiftEmptyArrayStorage;
        uint64_t v37 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v38 = sub_100004AEC((uint64_t *)&unk_1009AB860);
        uint64_t v39 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
        dispatch thunk of SetAlgebra.init<A>(_:)(v86, v38, v39, v75, v37);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v73, v74, v34);
        _Block_release(v34);

        (*(void (**)(uint64_t, uint64_t))(v76 + 8))(v74, v75);
        (*(void (**)(uint64_t, uint64_t))(v77 + 8))(v73, v78);
        v83(*(void *)type, v80);
        swift_release();
        goto LABEL_21;
      }

uint64_t sub_10027133C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[14] = a4;
  v5[15] = a5;
  v5[12] = a2;
  v5[13] = a3;
  v5[11] = a1;
  uint64_t v6 = sub_100004AEC(&qword_1009A78B8);
  _BYTE v5[16] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  v5[17] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v5[18] = v8;
  v5[19] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  v5[20] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v5[21] = v10;
  v5[22] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  v5[23] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  _BYTE v5[24] = v12;
  uint64_t v13 = *(void *)(v12 + 64);
  v5[25] = v13;
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v5[26] = swift_task_alloc(v14);
  v5[27] = swift_task_alloc(v14);
  v5[28] = swift_task_alloc(v14);
  return swift_task_switch(sub_100271438, 0LL, 0LL);
}

uint64_t sub_100271438()
{
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
  uint64_t v5 = *(void *)(v2 + 72);
  LODWORD(v6) = *(_DWORD *)(v2 + 80);
  *(_DWORD *)(v0 + 264) = v6;
  uint64_t v6 = v6;
  uint64_t v7 = (v6 + 32) & ~v6;
  uint64_t v8 = swift_allocObject(v4, v7 + v5, v6 | 7LL);
  *(void *)(v0 + 232) = v8;
  *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16);
  *(void *)(v0 + 240) = v9;
  v9(v8 + v7, v3, v1);
  uint64_t v10 = (void *)swift_task_alloc(dword_1009C0ECC);
  *(void *)(v0 + 248) = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_1002714FC;
  return sub_1007CBF38(v8);
}

uint64_t sub_1002714FC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 248LL);
  *(void *)(*(void *)v1 + 256LL) = a1;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100271564, 0LL, 0LL);
}

uint64_t sub_100271564()
{
  uint64_t v1 = *(void *)(v0 + 256);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v23 = *(void *)(v0 + 256);
    }
    else {
      uint64_t v23 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*(void *)(v0 + 256));
    uint64_t v24 = _CocoaArrayWrapper.endIndex.getter(v23);
    swift_bridgeObjectRelease();
    if (v24) {
      goto LABEL_3;
    }
  }

  else if (*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
LABEL_3:
    if ((v1 & 0xC000000000000001LL) != 0)
    {
      id v56 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, *(void *)(v0 + 256));
      goto LABEL_6;
    }

    if (*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      id v56 = *(id *)(*(void *)(v0 + 256) + 32LL);
LABEL_6:
      uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 240);
      uint64_t v3 = *(unsigned __int8 *)(v0 + 264);
      uint64_t v4 = *(void *)(v0 + 208);
      uint64_t v5 = *(void *)(v0 + 216);
      uint64_t v6 = *(void *)(v0 + 200);
      uint64_t v52 = *(void *)(v0 + 192);
      uint64_t v7 = *(void *)(v0 + 184);
      uint64_t v55 = *(void *)(v0 + 176);
      uint64_t v60 = *(void *)(v0 + 168);
      uint64_t v61 = *(void *)(v0 + 160);
      uint64_t v57 = *(void *)(v0 + 152);
      uint64_t v59 = *(void *)(v0 + 144);
      uint64_t v58 = *(void *)(v0 + 136);
      uint64_t v51 = *(void *)(v0 + 120);
      uint64_t v8 = *(void *)(v0 + 96);
      uint64_t v53 = *(void *)(v0 + 104);
      uint64_t v54 = *(void *)(v0 + 112);
      uint64_t v9 = *(void *)(v0 + 88);
      swift_bridgeObjectRelease();
      uint64_t v10 = (v3 + 32) & ~v3;
      v2(v5, v8, v7);
      v2(v4, v51, v7);
      uint64_t v11 = (v6 + v3 + v10) & ~v3;
      unint64_t v12 = (v6 + v11 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v13 = swift_allocObject(&unk_10094C490, v12 + 16, v3 | 7);
      *(void *)(v13 + swift_weakDestroy(v0 + 16) = v9;
      *(void *)(v13 + 24) = v56;
      uint64_t v14 = v13 + v10;
      uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 32);
      v15(v14, v5, v7);
      v15(v13 + v11, v4, v7);
      uint64_t v16 = (void *)(v13 + v12);
      *uint64_t v16 = v53;
      v16[1] = v54;
      *(void *)(v0 + 48) = sub_100286DB4;
      *(void *)(v0 + 56) = v13;
      *(void *)(v0 + swift_weakDestroy(v0 + 16) = _NSConcreteStackBlock;
      *(void *)(v0 + 24) = 1107296256LL;
      *(void *)(v0 + 32) = sub_1001C31E8;
      *(void *)(v0 + 40) = &unk_10094C4A8;
      uint64_t v17 = _Block_copy((const void *)(v0 + 16));
      swift_retain();
      id v18 = v56;
      uint64_t v19 = swift_retain();
      static DispatchQoS.unspecified.getter(v19);
      *(void *)(v0 + 64) = _swiftEmptyArrayStorage;
      uint64_t v20 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v22 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 64, v21, v22, v58, v20);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v55, v57, v17);
      _Block_release(v17);

      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v57, v58);
      (*(void (**)(uint64_t, uint64_t))(v60 + 8))(v55, v61);
      swift_release();
      goto LABEL_16;
    }

    __break(1u);
    goto LABEL_19;
  }

  swift_bridgeObjectRelease();
  if (qword_10099B220 != -1) {
LABEL_19:
  }
    swift_once(&qword_10099B220, sub_1002673AC);
  uint64_t v25 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 240);
  uint64_t v26 = *(void *)(v0 + 224);
  uint64_t v27 = *(void *)(v0 + 184);
  uint64_t v28 = *(void *)(v0 + 96);
  uint64_t v29 = type metadata accessor for Logger(0LL);
  sub_10000A720(v29, (uint64_t)qword_100A2A470);
  uint64_t v30 = v25(v26, v28, v27);
  unint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v32 = static os_log_type_t.error.getter(v31);
  BOOL v33 = os_log_type_enabled(v31, v32);
  uint64_t v34 = *(void *)(v0 + 224);
  uint64_t v35 = *(void *)(v0 + 184);
  uint64_t v36 = *(void *)(v0 + 192);
  if (v33)
  {
    uint64_t v37 = swift_slowAlloc(22LL, -1LL);
    uint64_t v38 = swift_slowAlloc(32LL, -1LL);
    uint64_t v62 = v38;
    *(_DWORD *)uint64_t v37 = 141558275;
    *(void *)(v0 + 72) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v37 + 4, v37 + 12);
    *(_WORD *)(v37 + 12) = 2081;
    uint64_t v39 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter(v35, v39);
    *(void *)(v0 + 80) = sub_1003F11D4(v40, v41, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v37 + 14, v37 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v34, v35);
    _os_log_impl( (void *)&_mh_execute_header,  v31,  v32,  "No peripheral for beacon %{private,mask.hash}s",  (uint8_t *)v37,  0x16u);
    swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v37, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(void, void))(v36 + 8))(*(void *)(v0 + 224), *(void *)(v0 + 184));
  }

  uint64_t v42 = *(void *)(v0 + 128);
  BOOL v43 = *(void (**)(uint64_t))(v0 + 104);
  uint64_t v44 = type metadata accessor for OwnerCommandManager.Error(0LL);
  swift_storeEnumTagMultiPayload(v42, v44, 16LL);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v44 - 8) + 56LL))(v42, 0LL, 1LL, v44);
  v43(v42);
  sub_100015794(v42, &qword_1009A78B8);
LABEL_16:
  uint64_t v45 = *(void *)(v0 + 216);
  uint64_t v46 = *(void *)(v0 + 208);
  uint64_t v47 = *(void *)(v0 + 176);
  uint64_t v48 = *(void *)(v0 + 152);
  uint64_t v49 = *(void *)(v0 + 128);
  swift_task_dealloc(*(void *)(v0 + 224));
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100271AEC( uint64_t a1, char *a2, void (*a3)(void, void), void (*a4)(void, void), uint64_t a5, uint64_t a6)
{
  uint64_t v107 = a6;
  uint64_t v105 = a5;
  uint64_t v100 = sub_100004AEC(&qword_1009A78D8);
  uint64_t v108 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v106 = (char *)&v93 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  unint64_t v12 = *(char **)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v104 = (char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  os_log_type_t v112 = (char *)&v93 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v103 = (char *)&v93 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v93 - v20;
  uint64_t v101 = v22;
  __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v93 - v23;
  uint64_t v111 = a2;
  uint64_t v25 = *(void **)&a2[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
  id v26 = [v25 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v26);

  uint64_t v27 = a1 + 112;
  __n128 v28 = swift_beginAccess(a1 + 112, v115, 0LL, 0LL);
  uint64_t v99 = a1;
  uint64_t v29 = *(void *)(a1 + 112);
  uint64_t v30 = *(void *)(v29 + 16);
  uint64_t v109 = a4;
  uint64_t v110 = v21;
  if (!v30) {
    goto LABEL_8;
  }
  swift_bridgeObjectRetain(v29);
  unint64_t v31 = sub_10030D124((uint64_t)v24);
  if ((v32 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_8:
    uint64_t v55 = (void (*)(char *, uint64_t, __n128))*((void *)v12 + 1);
    v55(v24, v11, v28);
    id v56 = v103;
    goto LABEL_11;
  }

  uint64_t v98 = *(void *)(*(void *)(v29 + 56) + 8 * v31);
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v102 = (void (*)(char *, uint64_t))*((void *)v12 + 1);
  v102(v24, v11);
  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v33 = type metadata accessor for Logger(0LL);
  sub_10000A720(v33, (uint64_t)qword_100A2A470);
  uint64_t v34 = v111;
  uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
  os_log_type_t v36 = static os_log_type_t.default.getter(v35);
  int v37 = v36;
  if (os_log_type_enabled(v35, v36))
  {
    os_log_t v97 = v35;
    uint64_t v38 = swift_slowAlloc(12LL, -1LL);
    int v95 = v37;
    uint64_t v39 = (uint8_t *)v38;
    uint64_t v96 = swift_slowAlloc(32LL, -1LL);
    v113[0] = v96;
    uint64_t v93 = v39;
    *(_DWORD *)uint64_t v39 = 136446210;
    uint64_t v40 = v39 + 12;
    uint64_t v94 = v39 + 4;
    id v41 = [v25 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v41);

    uint64_t v42 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter(v11, v42);
    uint64_t v44 = a3;
    uint64_t v45 = v12;
    unint64_t v47 = v46;
    v102(v110, v11);
    uint64_t v114 = sub_1003F11D4(v43, v47, v113);
    uint64_t v48 = v40;
    a4 = v109;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115, v94, v48);

    unint64_t v12 = v45;
    a3 = v44;
    uint64_t v21 = v110;
    swift_bridgeObjectRelease();
    os_log_t v49 = v97;
    BOOL v50 = v93;
    _os_log_impl( (void *)&_mh_execute_header,  v97,  (os_log_type_t)v95,  "Canceling disconnection block for %{public}s",  v93,  0xCu);
    uint64_t v51 = v96;
    swift_arrayDestroy(v96, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v52 = v51;
    uint64_t v53 = v102;
    swift_slowDealloc(v52, -1LL, -1LL);
    swift_slowDealloc(v50, -1LL, -1LL);
  }

  else
  {

    uint64_t v53 = v102;
  }

  dispatch thunk of DispatchWorkItem.cancel()(v54);
  id v57 = [v25 identifier];
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v57);

  swift_beginAccess(v27, v113, 33LL, 0LL);
  sub_1000485E8((uint64_t)v21);
  v53(v21, v11);
  swift_endAccess(v113);
  swift_release();
  swift_release();
  id v56 = v103;
  uint64_t v55 = (void (*)(char *, uint64_t, __n128))v53;
LABEL_11:
  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v58 = type metadata accessor for Logger(0LL);
  sub_10000A720(v58, (uint64_t)qword_100A2A470);
  uint64_t v102 = (void (*)(char *, uint64_t))a3;
  uint64_t v103 = v12;
  uint64_t v59 = (void (*)(char *, void (*)(void, void), uint64_t))*((void *)v12 + 2);
  v59(v56, a3, v11);
  uint64_t v60 = v112;
  uint64_t v61 = ((uint64_t (*)(char *, void (*)(void, void), uint64_t))v59)(v112, a4, v11);
  uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
  os_log_type_t v63 = static os_log_type_t.default.getter(v62);
  int v64 = v63;
  if (os_log_type_enabled(v62, v63))
  {
    uint64_t v65 = swift_slowAlloc(32LL, -1LL);
    uint64_t v98 = swift_slowAlloc(64LL, -1LL);
    v113[0] = v98;
    *(_DWORD *)uint64_t v65 = 141558531;
    uint64_t v114 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115, v65 + 4, v65 + 12);
    *(_WORD *)(v65 + 12) = 2081;
    uint64_t v66 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    LODWORD(v97) = v64;
    uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter(v11, v66);
    uint64_t v114 = sub_1003F11D4(v67, v68, v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115, v65 + 14, v65 + 22);
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v55)(v56, v11);
    *(_WORD *)(v65 + 22) = 2082;
    uint64_t v69 = v112;
    uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter(v11, v66);
    uint64_t v114 = sub_1003F11D4(v70, v71, v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v114, v115, v65 + 24, v65 + 32);
    swift_bridgeObjectRelease();
    ((void (*)(char *, uint64_t))v55)(v69, v11);
    _os_log_impl( (void *)&_mh_execute_header,  v62,  (os_log_type_t)v97,  "Disconnecting from beacon %{private,mask.hash}s. CommandId: %{public}s",  (uint8_t *)v65,  0x20u);
    uint64_t v72 = v98;
    swift_arrayDestroy(v98, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v72, -1LL, -1LL);
    swift_slowDealloc(v65, -1LL, -1LL);
  }

  else
  {
    ((void (*)(char *, uint64_t))v55)(v56, v11);
    ((void (*)(char *, uint64_t))v55)(v60, v11);
  }

  uint64_t v73 = v100;
  v113[0] = sub_1007CF938(v111);
  uint64_t v74 = sub_100004AEC((uint64_t *)&unk_1009A6C10);
  uint64_t v75 = type metadata accessor for OwnerCommandManager.Error(0LL);
  uint64_t v76 = sub_1000372EC( &qword_1009A6C20,  (uint64_t *)&unk_1009A6C10,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v77 = sub_100007864(&qword_1009A78C0, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_1007F8DC0);
  uint64_t v78 = v106;
  Publisher.mapError<A>(_:)(sub_10026B284, 0LL, v74, v75, v76, v77);
  swift_release();
  uint64_t v79 = v110;
  v59(v110, (void (*)(void, void))v102, v11);
  uint64_t v80 = v104;
  v59(v104, v109, v11);
  uint64_t v81 = v103;
  uint64_t v82 = v103[80];
  uint64_t v83 = (v82 + 16) & ~v82;
  uint64_t v84 = (v101 + v82 + v83) & ~v82;
  unint64_t v85 = (v101 + v84 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v86 = swift_allocObject(&unk_10094C4E0, v85 + 16, v82 | 7);
  uint64_t v87 = v86 + v83;
  uint64_t v88 = (void (*)(uint64_t, char *, uint64_t))*((void *)v81 + 4);
  v88(v87, v79, v11);
  v88(v86 + v84, v80, v11);
  uint64_t v89 = (void *)(v86 + v85);
  uint64_t v90 = v107;
  void *v89 = v105;
  v89[1] = v90;
  uint64_t v91 = sub_1000372EC( &qword_1009A78E0,  &qword_1009A78D8,  (uint64_t)&protocol conformance descriptor for Publishers.MapError<A, B>);
  swift_retain();
  Publisher.oneshot(_:)(sub_100286EB0, v86, v73, v91);
  swift_release();
  return (*(uint64_t (**)(char *, uint64_t))(v108 + 8))(v78, v73);
}

uint64_t sub_1002723AC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  unint64_t v4 = sub_100122CD4();
  uint64_t v5 = swift_allocError(&type metadata for CentralManager.Error, v4, 0LL, 0LL);
  sub_100254374(a1, v6);
  *a2 = v5;
  uint64_t v7 = type metadata accessor for OwnerCommandManager.Error(0LL);
  return swift_storeEnumTagMultiPayload(a2, v7, 1LL);
}

uint64_t sub_100272414(uint64_t a1, uint64_t a2, char *a3, void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v80 = a5;
  uint64_t v81 = a4;
  uint64_t v75 = a2;
  uint64_t v76 = a3;
  uint64_t v79 = type metadata accessor for OwnerCommandManager.Error(0LL);
  uint64_t v77 = *(void *)(v79 - 8);
  uint64_t v6 = __chkstk_darwin(v79);
  uint64_t v73 = (uint64_t *)((char *)&v72 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v72 - v8;
  uint64_t v10 = sub_100004AEC(&qword_1009A78B8);
  __chkstk_darwin(v10);
  uint64_t v78 = (uint64_t)&v72 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  os_log_t v74 = (os_log_t)((char *)&v72 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v72 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v72 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v72 - v22;
  uint64_t v24 = sub_100004AEC(&qword_1009A78E8);
  __chkstk_darwin(v24);
  id v26 = (void **)((char *)&v72 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v26, &qword_1009A78E8);
  if (swift_getEnumCaseMultiPayload(v26, v24) == 1)
  {
    sub_10002218C((uint64_t)v26, (uint64_t)v9, type metadata accessor for OwnerCommandManager.Error);
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v27 = type metadata accessor for Logger(0LL);
    sub_10000A720(v27, (uint64_t)qword_100A2A470);
    __n128 v28 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v28(v18, v75, v12);
    uint64_t v29 = v73;
    sub_10001DC4C((uint64_t)v9, (uint64_t)v73, type metadata accessor for OwnerCommandManager.Error);
    os_log_t v30 = v74;
    uint64_t v31 = ((uint64_t (*)(os_log_t, char *, uint64_t))v28)(v74, v76, v12);
    char v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.error.getter(v32);
    int v34 = v33;
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v35 = swift_slowAlloc(42LL, -1LL);
      uint64_t v36 = swift_slowAlloc(96LL, -1LL);
      uint64_t v75 = v36;
      *(_DWORD *)uint64_t v35 = 141558787;
      uint64_t v82 = 1752392040LL;
      uint64_t v83 = v36;
      uint64_t v76 = v9;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v35 + 4, v35 + 12);
      *(_WORD *)(v35 + 12) = 2081;
      uint64_t v37 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      LODWORD(v72) = v34;
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter(v12, v37);
      uint64_t v82 = sub_1003F11D4(v38, v39, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v35 + 14, v35 + 22);
      swift_bridgeObjectRelease();
      uint64_t v40 = *(void (**)(char *, uint64_t))(v13 + 8);
      v40(v18, v12);
      *(_WORD *)(v35 + 22) = 2082;
      sub_10026787C();
      uint64_t v82 = sub_1003F11D4(v41, v42, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v35 + 24, v35 + 32);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v29, type metadata accessor for OwnerCommandManager.Error);
      *(_WORD *)(v35 + 32) = 2082;
      os_log_t v43 = v74;
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter(v12, v37);
      uint64_t v82 = sub_1003F11D4(v44, v45, &v83);
      uint64_t v9 = v76;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v35 + 34, v35 + 42);
      swift_bridgeObjectRelease();
      v40((char *)v43, v12);
      _os_log_impl( (void *)&_mh_execute_header,  v32,  (os_log_type_t)v72,  "Disconnection from beacon: %{private,mask.hash}s failed due to %{public}s. CommandId: %{public}s.",  (uint8_t *)v35,  0x2Au);
      uint64_t v46 = v75;
      swift_arrayDestroy(v75, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1LL, -1LL);
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    else
    {
      uint64_t v67 = *(void (**)(char *, uint64_t))(v13 + 8);
      v67(v18, v12);
      sub_100018C68((uint64_t)v29, type metadata accessor for OwnerCommandManager.Error);
      v67((char *)v30, v12);
    }

    uint64_t v68 = v78;
    sub_10001DC4C((uint64_t)v9, v78, type metadata accessor for OwnerCommandManager.Error);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v77 + 56))(v68, 0LL, 1LL, v79);
    v81(v68);
    sub_100015794(v68, &qword_1009A78B8);
    return sub_100018C68((uint64_t)v9, type metadata accessor for OwnerCommandManager.Error);
  }

  else
  {
    unint64_t v47 = *v26;
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v48 = type metadata accessor for Logger(0LL);
    sub_10000A720(v48, (uint64_t)qword_100A2A470);
    os_log_t v49 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
    v49(v23, v75, v12);
    v49(v21, (uint64_t)v76, v12);
    id v50 = v47;
    uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
    os_log_type_t v52 = static os_log_type_t.default.getter(v51);
    int v53 = v52;
    if (os_log_type_enabled(v51, v52))
    {
      uint64_t v54 = swift_slowAlloc(42LL, -1LL);
      LODWORD(v75) = v53;
      uint64_t v55 = v54;
      uint64_t v73 = (void *)swift_slowAlloc(8LL, -1LL);
      uint64_t v56 = swift_slowAlloc(64LL, -1LL);
      uint64_t v76 = (char *)v56;
      *(_DWORD *)uint64_t v55 = 141558787;
      uint64_t v82 = 1752392040LL;
      uint64_t v83 = v56;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v55 + 4, v55 + 12);
      *(_WORD *)(v55 + 12) = 2081;
      uint64_t v72 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      os_log_t v74 = v51;
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter(v12, v72);
      uint64_t v82 = sub_1003F11D4(v57, v58, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v55 + 14, v55 + 22);
      swift_bridgeObjectRelease();
      uint64_t v59 = *(void (**)(char *, uint64_t))(v13 + 8);
      v59(v23, v12);
      *(_WORD *)(v55 + 22) = 2114;
      uint64_t v82 = (uint64_t)v50;
      id v60 = v50;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v55 + 24, v55 + 32);
      uint64_t v61 = v73;
      *uint64_t v73 = v50;

      *(_WORD *)(v55 + 32) = 2082;
      uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter(v12, v72);
      uint64_t v82 = sub_1003F11D4(v62, v63, &v83);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v55 + 34, v55 + 42);
      swift_bridgeObjectRelease();
      v59(v21, v12);
      os_log_t v64 = v74;
      _os_log_impl( (void *)&_mh_execute_header,  v74,  (os_log_type_t)v75,  "Disconnected from beacon: %{private,mask.hash}s. Peripheral: %{public}@. CommandId: %{public}s.",  (uint8_t *)v55,  0x2Au);
      uint64_t v65 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v61, 1LL, v65);
      swift_slowDealloc(v61, -1LL, -1LL);
      uint64_t v66 = v76;
      swift_arrayDestroy(v76, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v66, -1LL, -1LL);
      swift_slowDealloc(v55, -1LL, -1LL);
    }

    else
    {
      uint64_t v70 = *(void (**)(char *, uint64_t))(v13 + 8);
      v70(v23, v12);

      v70(v21, v12);
    }

    uint64_t v71 = v78;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v77 + 56))(v78, 1LL, 1LL, v79);
    v81(v71);

    return sub_100015794(v71, &qword_1009A78B8);
  }

void sub_100272C28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBConnectPeripheralOptionHideFromBTSettings);
  uint64_t v6 = v5;
  uint64_t v10 = &type metadata for Bool;
  LOBYTE(v9) = 1;
  sub_10006A358(&v9, v8);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
  uint64_t v11 = (void *)0x8000000000000000LL;
  sub_10005CAD4(v8, v4, v6, isUniquelyReferenced_nonNull_native);
  uint64_t v11 = &_swiftEmptyDictionarySingleton;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  __asm { BR              X10 }

uint64_t sub_100272D00()
{
  if (BYTE6(v1) == 16LL)
  {
    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBConnectPeripheralOptionUseTempLTK);
    uint64_t v6 = v5;
    uint64_t v37 = &type metadata for Data;
    *(void *)&__int128 v36 = v2;
    *((void *)&v36 + 1) = v1;
    sub_10006A358(&v36, v35);
    sub_10001736C(v2, v1);
  }

  else
  {
    uint64_t v7 = Data.subdata(in:)(0LL);
    unint64_t v9 = v8;
    if (*(void *)(v3 + 544) != -1LL) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    sub_10000A720(v10, (uint64_t)qword_100A2A470);
    sub_10001736C(v7, v9);
    sub_10001736C(v7, v9);
    sub_10001736C(v7, v9);
    uint64_t v11 = sub_10001736C(v7, v9);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.info.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = swift_slowAlloc(22LL, -1LL);
      *(void *)&__int128 v36 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v14 = 136315394;
      uint64_t v15 = Data.hexString.getter(v7, v9);
      *(void *)&v35[0] = sub_1003F11D4(v15, v16, (uint64_t *)&v36);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v35, (char *)v35 + 8, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease();
      sub_100016F9C(v7, v9);
      sub_100016F9C(v7, v9);
      *(_WORD *)(v14 + 12) = 2048;
      __asm { BR              X9 }
    }

    sub_100016F9C(v7, v9);
    sub_100016F9C(v7, v9);
    sub_100016F9C(v7, v9);
    sub_100016F9C(v7, v9);

    uint64_t v4 = static String._unconditionallyBridgeFromObjectiveC(_:)(CBConnectPeripheralOptionUseTempLTK);
    uint64_t v6 = v17;
    uint64_t v37 = &type metadata for Data;
    *(void *)&__int128 v36 = v7;
    *((void *)&v36 + 1) = v9;
    sub_10006A358(&v36, v35);
  }

  uint64_t v18 = v38[0];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v38[0]);
  uint64_t v34 = v18;
  v38[0] = 0x8000000000000000LL;
  sub_10005CAD4(v35, v4, v6, isUniquelyReferenced_nonNull_native);
  v38[0] = v18;
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (*(void *)(v3 + 544) != -1LL) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  uint64_t v21 = sub_10000A720(v20, (uint64_t)qword_100A2A470);
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.info.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v25 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 v36 = v25;
    *(_DWORD *)uint64_t v24 = 136315138;
    swift_beginAccess(v38, v35, 0LL, 0LL);
    swift_bridgeObjectRetain(v38[0]);
    uint64_t v27 = Dictionary.description.getter( v26,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);
    __n128 v28 = v0;
    unint64_t v30 = v29;
    swift_bridgeObjectRelease();
    uint64_t v34 = sub_1003F11D4(v27, v30, (uint64_t *)&v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, v35, v24 + 4, v24 + 12);
    uint64_t v0 = v28;
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "Connecting with options %s", v24, 0xCu);
    swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  swift_beginAccess(v38, &v36, 0LL, 0LL);
  uint64_t v31 = v38[0];
  swift_bridgeObjectRetain(v38[0]);
  uint64_t v32 = sub_1007CEDA0(v0, v31);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v32;
}

uint64_t sub_1002732A0(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v88 = a4;
  uint64_t v87 = a3;
  uint64_t v92 = a2;
  uint64_t v94 = a1;
  uint64_t v86 = *v4;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v89 = (char *)&v78 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v78 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v90 = (char *)&v78 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v91 = (char *)&v78 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v78 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v78 - v19;
  uint64_t v21 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v22 = *(char **)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (uint64_t *)((char *)&v78 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  v98[0] = 0x7365547265646E75LL;
  v98[1] = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v95, v98, sub_10000A71C, 0LL, &type metadata for Bool);
  uint64_t result = swift_bridgeObjectRelease();
  if ((v95 & 1) == 0)
  {
    uint64_t v26 = v93;
    uint64_t v27 = *(void **)(v93 + 72);
    void *v24 = v27;
    (*((void (**)(void *, void, uint64_t))v22 + 13))( v24,  enum case for DispatchPredicate.onQueue(_:),  v21);
    id v28 = v27;
    LOBYTE(v27) = _dispatchPreconditionTest(_:)(v24);
    (*((void (**)(void *, uint64_t))v22 + 1))(v24, v21);
    if ((v27 & 1) == 0)
    {
      __break(1u);
LABEL_29:
      swift_once(&qword_10099B220, sub_1002673AC);
LABEL_16:
      uint64_t v56 = type metadata accessor for Logger(0LL);
      sub_10000A720(v56, (uint64_t)qword_100A2A470);
      sub_1004A2AC8(0xD000000000000021LL, 0x800000010085B680LL);
      ((void (*)(char *, uint64_t, uint64_t))v6)(v11, v21, v5);
      uint64_t v57 = ((uint64_t (*)(char *, void *, uint64_t))v6)(v22, v24, v5);
      unint64_t v58 = (os_log_s *)Logger.logObject.getter(v57);
      os_log_type_t v59 = static os_log_type_t.default.getter(v58);
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = swift_slowAlloc(32LL, -1LL);
        id v85 = (id)swift_slowAlloc(64LL, -1LL);
        v98[0] = (uint64_t)v85;
        *(_DWORD *)uint64_t v60 = 141558531;
        *(void *)&__int128 v95 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, (char *)&v95 + 8, v60 + 4, v60 + 12);
        *(_WORD *)(v60 + 12) = 2081;
        uint64_t v61 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter(v5, v61);
        *(void *)&__int128 v95 = sub_1003F11D4(v62, v63, v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, (char *)&v95 + 8, v60 + 14, v60 + 22);
        swift_bridgeObjectRelease();
        ((void (*)(char *, uint64_t))v26)(v11, v5);
        *(_WORD *)(v60 + 22) = 2082;
        os_log_t v64 = v89;
        uint64_t v65 = dispatch thunk of CustomStringConvertible.description.getter(v5, v61);
        *(void *)&__int128 v95 = sub_1003F11D4(v65, v66, v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, (char *)&v95 + 8, v60 + 24, v60 + 32);
        swift_bridgeObjectRelease();
        uint64_t v67 = v64;
        uint64_t v68 = (uint64_t (*)(uint64_t, uint64_t))v26;
        ((void (*)(char *, uint64_t))v26)(v67, v5);
        _os_log_impl( (void *)&_mh_execute_header,  v58,  v59,  "Beacon %{private,mask.hash}s Command %{public}s.",  (uint8_t *)v60,  0x20u);
        id v69 = v85;
        swift_arrayDestroy(v85, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v69, -1LL, -1LL);
        uint64_t v70 = v60;
        uint64_t v24 = v90;
        uint64_t v21 = (uint64_t)v91;
        swift_slowDealloc(v70, -1LL, -1LL);
      }

      else
      {
        ((void (*)(char *, uint64_t))v26)(v11, v5);
        uint64_t v68 = (uint64_t (*)(uint64_t, uint64_t))v26;
        ((void (*)(char *, uint64_t))v26)(v22, v5);
      }

      uint64_t v71 = v87;
      uint64_t v72 = v93;
      if (*(void *)(v93 + 184))
      {
        swift_retain();
        sub_100504C28(v21, (uint64_t)&v95);
        swift_release();
        if (*((void *)&v96 + 1))
        {
          sub_100012EC0(&v95, (uint64_t)v98);
          uint64_t v73 = v99;
          uint64_t v74 = v100;
          sub_100012ED8(v98, v99);
          if (((*(uint64_t (**)(uint64_t, uint64_t))(v74 + 96))(v73, v74) & 1) != 0)
          {
            sub_100275BD8(v94, v92, v71, v88);
            v68((uint64_t)v24, v5);
            v68(v21, v5);
            return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v98);
          }

          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v98);
          goto LABEL_26;
        }
      }

      else
      {
        uint64_t v97 = 0LL;
        __int128 v95 = 0u;
        __int128 v96 = 0u;
      }

      sub_100015794((uint64_t)&v95, (uint64_t *)&unk_1009A9C40);
LABEL_26:
      uint64_t v75 = type metadata accessor for Transaction(0LL);
      __chkstk_darwin(v75);
      uint64_t v76 = v94;
      *(&v78 - 10) = v72;
      *(&v78 - 9) = (uint64_t)v76;
      *(&v78 - 8) = (uint64_t)v92;
      *(&v78 - 7) = (uint64_t)&off_100934110;
      uint64_t v77 = v88;
      *(&v78 - 6) = v71;
      *(&v78 - 5) = v77;
      *(&v78 - 4) = v21;
      *(&v78 - 3) = (uint64_t)v24;
      *(&v78 - 2) = v86;
      static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.OwnerCommandManager.connect",  57LL,  2LL,  sub_10028AB74,  &v78 - 12);
      v68((uint64_t)v24, v5);
      return v68(v21, v5);
    }

    unint64_t v29 = *(void **)&v94[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
    id v30 = [v29 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v30);

    uint64_t v31 = v26 + 112;
    __n128 v32 = swift_beginAccess(v26 + 112, v101, 0LL, 0LL);
    uint64_t v33 = *(void *)(v26 + 112);
    if (*(void *)(v33 + 16))
    {
      swift_bridgeObjectRetain(*(void *)(v26 + 112));
      unint64_t v34 = sub_10030D124((uint64_t)v20);
      if ((v35 & 1) != 0)
      {
        id v85 = v29;
        uint64_t v84 = *(void *)(*(void *)(v33 + 56) + 8 * v34);
        swift_retain();
        swift_bridgeObjectRelease();
        uint64_t v26 = *(void *)(v6 + 8);
        ((void (*)(char *, uint64_t))v26)(v20, v5);
        if (qword_10099B220 != -1) {
          swift_once(&qword_10099B220, sub_1002673AC);
        }
        uint64_t v36 = type metadata accessor for Logger(0LL);
        sub_10000A720(v36, (uint64_t)qword_100A2A470);
        uint64_t v37 = v94;
        uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
        os_log_type_t v39 = static os_log_type_t.default.getter(v38);
        int v83 = v39;
        p_name = &stru_100995FF8.name;
        if (os_log_type_enabled(v38, v39))
        {
          uint64_t v41 = v38;
          unint64_t v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v81 = swift_slowAlloc(32LL, -1LL);
          v98[0] = v81;
          uint64_t v82 = v11;
          uint64_t v80 = v42;
          *(_DWORD *)unint64_t v42 = 136446210;
          os_log_t v43 = v42 + 12;
          uint64_t v79 = v42 + 4;
          id v44 = [v85 identifier];
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v44);

          uint64_t v45 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter(v5, v45);
          unint64_t v48 = v47;
          ((void (*)(char *, uint64_t))v26)(v18, v5);
          *(void *)&__int128 v95 = sub_1003F11D4(v46, v48, v98);
          os_log_t v49 = v43;
          uint64_t v11 = v82;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, (char *)&v95 + 8, v79, v49);
          p_name = (char **)(&stru_100995FF8 + 8);
          swift_bridgeObjectRelease();

          uint64_t v38 = v41;
          id v50 = v80;
          _os_log_impl( (void *)&_mh_execute_header,  v41,  (os_log_type_t)v83,  "Canceling disconnection block for %{public}s",  v80,  0xCu);
          uint64_t v51 = v81;
          swift_arrayDestroy(v81, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v51, -1LL, -1LL);
          swift_slowDealloc(v50, -1LL, -1LL);
        }

        else
        {
        }

        dispatch thunk of DispatchWorkItem.cancel()(v52);
        id v53 = objc_msgSend(v85, p_name[401]);
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v53);

        swift_beginAccess(v31, v98, 33LL, 0LL);
        sub_1000485E8((uint64_t)v18);
        ((void (*)(char *, uint64_t))v26)(v18, v5);
        swift_endAccess(v98);
        swift_release();
        swift_release();
LABEL_15:
        uint64_t v54 = type metadata accessor for AccessoryCommand(0LL);
        uint64_t v21 = (uint64_t)v91;
        uint64_t v55 = v92;
        uint64_t v6 = *(void *)(v6 + 16);
        ((void (*)(char *, char *, uint64_t))v6)(v91, &v92[*(int *)(v54 + 20)], v5);
        uint64_t v24 = v90;
        ((void (*)(char *, char *, uint64_t))v6)(v90, v55, v5);
        uint64_t v22 = v89;
        if (qword_10099B220 == -1) {
          goto LABEL_16;
        }
        goto LABEL_29;
      }

      swift_bridgeObjectRelease();
    }

    uint64_t v26 = *(void *)(v6 + 8);
    ((void (*)(char *, uint64_t, __n128))v26)(v20, v5, v32);
    goto LABEL_15;
  }

  return result;
}

void sub_100273C34( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v59 = a8;
  uint64_t v65 = a7;
  uint64_t v62 = a6;
  uint64_t v42 = a5;
  uint64_t v64 = a1;
  uint64_t v58 = a9;
  uint64_t v63 = type metadata accessor for UUID(0LL);
  uint64_t v61 = *(void *)(v63 - 8);
  uint64_t v10 = __chkstk_darwin(v63);
  uint64_t v68 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v60 = v11;
  __chkstk_darwin(v10);
  uint64_t v67 = (char *)v29 - v12;
  uint64_t v13 = type metadata accessor for AccessoryCommand(0LL);
  uint64_t v54 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v55 = v14;
  uint64_t v56 = (char *)v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009B0670);
  __chkstk_darwin(v15);
  uint64_t v30 = sub_100004AEC(&qword_1009A7AC8);
  v29[5] = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  uint64_t v33 = sub_100004AEC(&qword_1009A7B78);
  uint64_t v32 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  v29[6] = (char *)v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = sub_100004AEC(&qword_1009A7B80);
  uint64_t v34 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v31 = (char *)v29 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = sub_100004AEC(&qword_1009A7B88);
  uint64_t v38 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v36 = (char *)v29 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = sub_100004AEC(&qword_1009A7B90);
  uint64_t v40 = *(void *)(v41 - 8);
  __chkstk_darwin(v41);
  uint64_t v37 = (char *)v29 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = sub_100004AEC(&qword_1009A7B98);
  uint64_t v44 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  os_log_t v43 = (char *)v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v48 = sub_100004AEC(&qword_1009A7BA0);
  uint64_t v47 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v46 = (char *)v29 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v51 = sub_100004AEC(&qword_1009A7BA8);
  uint64_t v50 = *(void *)(v51 - 8);
  __chkstk_darwin(v51);
  os_log_t v49 = (char *)v29 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = sub_100004AEC(&qword_1009A7BB0);
  uint64_t v52 = *(void *)(v53 - 8);
  __chkstk_darwin(v53);
  unint64_t v66 = (char *)v29 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = sub_100004AEC((uint64_t *)&unk_1009C0FA0);
  uint64_t inited = swift_initStackObject(v24, v69);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBConnectPeripheralOptionHideFromBTSettings);
  *(void *)(inited + 40) = v26;
  *(void *)(inited + 72) = &type metadata for Bool;
  *(_BYTE *)(inited + 48) = 1;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBConnectPeripheralOptionConnectionUseCase);
  *(void *)(inited + 88) = v27;
  id v28 = (char *)sub_1002740F8 + 4 * byte_1007F8BF8[*(unsigned __int8 *)(a4 + *(int *)(v13 + 24) + 8)];
  uint64_t v57 = a4;
  __asm { BR              X11 }

uint64_t sub_1002740F8()
{
  else {
    int v8 = 15;
  }
  *(void *)(v1 + 120) = &type metadata for UInt32;
  *(_DWORD *)(v1 + 96) = v8 + 65540;
  unint64_t v9 = sub_100412CF8(v1);
  uint64_t v10 = sub_1007CEDA0(v2, v9);
  swift_bridgeObjectRelease();
  *(void *)(v7 - 240) = v10;
  uint64_t v11 = *(void **)(v3 + 72);
  *(void *)(v7 - 72) = v11;
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
  *(void *)(v7 - 288) = v3;
  *(void *)(v7 - 304) = v12;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL);
  *(void *)(v7 - 248) = v13;
  v13(v4, 1LL, 1LL, v12);
  *(void *)(v7 - 640) = v11;
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009A6C10);
  unint64_t v15 = sub_100004AB0();
  uint64_t v16 = sub_1000372EC( &qword_1009A6C20,  (uint64_t *)&unk_1009A6C10,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v17 = sub_100007864( (unint64_t *)&qword_1009B06C0,  (uint64_t (*)(uint64_t))sub_100004AB0,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  *(void *)(v7 - 256) = v17;
  *(void *)(v7 - 632) = v14;
  *(void *)(v7 - 296) = v15;
  *(void *)(v7 - 624) = v16;
  Publisher.receive<A>(on:options:)(v7 - 72, v4, v14, v15, v16, v17);
  sub_100015794(v4, &qword_1009B0670);

  uint64_t v18 = swift_release();
  uint64_t v19 = static Subscribers.Demand.unlimited.getter(v18);
  uint64_t v20 = type metadata accessor for Peripheral(0LL);
  *(void *)(v7 - 648) = v20;
  uint64_t v21 = sub_1000372EC( &qword_1009A7AE8,  &qword_1009A7AC8,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v22 = *(void *)(v7 - 608);
  uint64_t v23 = *(void *)(v7 - 600);
  Publisher.flatMap<A, B>(maxPublishers:_:)(v19, sub_1002749FC, 0LL, v23, v20, v14, v21, v16);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 616) + 8LL))(v6, v23);
  uint64_t v24 = *(void **)(v7 - 640);
  *(void *)(v7 - 240) = v24;
  uint64_t v25 = *(void *)(v7 - 304);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 - 248))(v4, 1LL, 1LL, v25);
  uint64_t v26 = sub_1000372EC( &qword_1009A7BB8,  &qword_1009A7B78,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  id v27 = v24;
  uint64_t v28 = *(void *)(v7 - 592);
  uint64_t v29 = *(void *)(v7 - 576);
  Publisher.receive<A>(on:options:)(v7 - 240, v4, v29, v15, v26, *(void *)(v7 - 256));
  sub_100015794(v4, &qword_1009B0670);

  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 584) + 8LL))(v22, v29);
  uint64_t v30 = swift_allocObject(&unk_10094CC88, 24LL, 7LL);
  uint64_t v31 = *(void *)(v7 - 504);
  *(void *)(v30 + swift_weakDestroy(v0 + 16) = v31;
  swift_bridgeObjectRetain(v31);
  uint64_t v33 = static Subscribers.Demand.unlimited.getter(v32);
  uint64_t v34 = sub_1000372EC( &qword_1009A7BC0,  &qword_1009A7B80,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v35 = *(void *)(v7 - 552);
  uint64_t v36 = *(void *)(v7 - 560);
  uint64_t v37 = *(void *)(v7 - 648);
  Publisher.flatMap<A, B>(maxPublishers:_:)( v33,  sub_10028ABCC,  v30,  v36,  v37,  *(void *)(v7 - 632),  v34,  *(void *)(v7 - 624));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 568) + 8LL))(v28, v36);
  *(void *)(v7 - 240) = v27;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 - 248))(v4, 1LL, 1LL, v25);
  uint64_t v38 = sub_1000372EC( &qword_1009A7BC8,  &qword_1009A7B88,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  id v39 = v27;
  uint64_t v40 = *(void *)(v7 - 544);
  uint64_t v41 = *(void *)(v7 - 528);
  Publisher.receive<A>(on:options:)(v7 - 240, v4, v41, *(void *)(v7 - 296), v38, *(void *)(v7 - 256));
  sub_100015794(v4, &qword_1009B0670);

  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 536) + 8LL))(v35, v41);
  uint64_t v42 = sub_1000372EC( &qword_1009A7BD0,  &qword_1009A7B90,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v43 = *(void *)(v7 - 496);
  uint64_t v44 = *(void *)(v7 - 512);
  Publisher.compactMap<A>(_:)(sub_1002673A0, 0LL, v44, v37, v42);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 520) + 8LL))(v40, v44);
  if (qword_10099B228 != -1) {
    swift_once(&qword_10099B228, sub_10026779C);
  }
  uint64_t v45 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0LL);
  uint64_t v46 = sub_10000A720(v45, (uint64_t)qword_1009A7418);
  *(void *)(v7 - 240) = v39;
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(v7 - 248))(v4, 1LL, 1LL, *(void *)(v7 - 304));
  uint64_t v47 = sub_1000372EC( &qword_1009A7BD8,  &qword_1009A7B98,  (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  id v48 = v39;
  uint64_t v49 = *(void *)(v7 - 472);
  uint64_t v50 = *(void *)(v7 - 480);
  Publisher.timeout<A>(_:scheduler:options:customError:)( v46,  v7 - 240,  v4,  sub_10028B5FC,  0LL,  v50,  *(void *)(v7 - 296),  v47,  *(void *)(v7 - 256));
  sub_100015794(v4, &qword_1009B0670);

  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 488) + 8LL))(v43, v50);
  uint64_t v51 = sub_100004AEC(&qword_1009AFAF0);
  uint64_t v52 = sub_1000372EC( &qword_1009A7BE0,  &qword_1009A7BA0,  (uint64_t)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  uint64_t v53 = *(void *)(v7 - 448);
  uint64_t v54 = *(void *)(v7 - 456);
  Publisher.map<A>(_:)(sub_100254DD0, 0LL, v54, v51, v52);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 464) + 8LL))(v49, v54);
  uint64_t v55 = sub_100004AEC(&qword_1009A6C28);
  uint64_t v56 = sub_1000372EC( &qword_1009A7BE8,  &qword_1009A7BA8,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  uint64_t v57 = sub_1000372EC(&qword_1009A6C38, &qword_1009A6C28, (uint64_t)&protocol conformance descriptor for Just<A>);
  uint64_t v58 = *(void *)(v7 - 432);
  Publisher.catch<A>(_:)(sub_10024FF78, 0LL, v58, v55, v56, v57);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 440) + 8LL))(v53, v58);
  uint64_t v59 = swift_allocObject(&unk_10094C558, 24LL, 7LL);
  swift_weakInit(v59 + 16, *(void *)(v7 - 288));
  uint64_t v60 = *(void *)(v7 - 392);
  sub_10001DC4C(*(void *)(v7 - 384), v60, type metadata accessor for AccessoryCommand);
  uint64_t v61 = *(void *)(v7 - 352);
  uint64_t v62 = *(void (**)(void, void, uint64_t))(v61 + 16);
  uint64_t v63 = *(void *)(v7 - 336);
  v62(*(void *)(v7 - 272), *(void *)(v7 - 368), v63);
  v62(*(void *)(v7 - 264), *(void *)(v7 - 376), v63);
  uint64_t v64 = *(unsigned __int8 *)(*(void *)(v7 - 408) + 80LL);
  uint64_t v65 = (v64 + 48) & ~v64;
  uint64_t v66 = *(unsigned __int8 *)(v61 + 80);
  uint64_t v67 = (*(void *)(v7 - 400) + v66 + v65) & ~v66;
  uint64_t v68 = *(void *)(v7 - 360);
  uint64_t v69 = (v68 + v66 + v67) & ~v66;
  uint64_t v70 = (char *)swift_allocObject(&unk_10094CCB0, v69 + v68, v64 | v66 | 7);
  uint64_t v71 = *(void *)(v7 - 328);
  *((void *)v70 + 2) = v59;
  *((void *)v70 + 3) = v71;
  uint64_t v72 = *(void *)(v7 - 320);
  *((void *)v70 + 4) = *(void *)(v7 - 344);
  *((void *)v70 + 5) = v72;
  sub_10002218C(v60, (uint64_t)&v70[v65], type metadata accessor for AccessoryCommand);
  uint64_t v73 = *(void (**)(char *, void, uint64_t))(v61 + 32);
  v73(&v70[v67], *(void *)(v7 - 272), v63);
  v73(&v70[v69], *(void *)(v7 - 264), v63);
  uint64_t v74 = sub_1000372EC( &qword_1009A7BF0,  &qword_1009A7BB0,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
  swift_retain();
  swift_retain();
  uint64_t v75 = *(void *)(v7 - 416);
  uint64_t v76 = *(void *)(v7 - 280);
  Publisher<>.sink(receiveValue:)(sub_10028ACC8, v70, v75, v74);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 424) + 8LL))(v76, v75);
  uint64_t v77 = *(void *)(v7 - 288) + 80LL;
  swift_beginAccess(v77, v7 - 240, 33LL, 0LL);
  AnyCancellable.store(in:)(v77);
  swift_endAccess(v7 - 240);
  return swift_release();
}

uint64_t sub_1002749FC@<X0>(uint64_t *a1@<X8>)
{
  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2A470);
  sub_1004A2AC8(0xD000000000000018LL, 0x800000010085B6F0LL);
  uint64_t v3 = sub_100004AEC(&qword_10099D578);
  uint64_t inited = swift_initStackObject(v3, v8);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(inited + 56) = &type metadata for BAServiceIdentifier;
  *(void *)(inited + 64) = &off_10094C298;
  *(_BYTE *)(inited + 32) = 1;
  uint64_t v5 = sub_1004A3734(inited);
  swift_setDeallocating(inited);
  uint64_t v6 = sub_100004AEC(&qword_10099D580);
  uint64_t result = swift_arrayDestroy(inited + 32, 1LL, v6);
  *a1 = v5;
  return result;
}

uint64_t sub_100274AFC@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v38 = a3;
  uint64_t v5 = sub_100004AEC(&qword_1009C0FF0);
  uint64_t v36 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009A6E00);
  uint64_t v37 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (char *)*a1;
  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = sub_10000A720(v12, (uint64_t)qword_100A2A470);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Discovered FindMy services.", v16, 2u);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  v40[3] = &type metadata for BAServiceIdentifier;
  v40[4] = &off_10094C298;
  LOBYTE(v40[0]) = 1;
  uint64_t v17 = (uint64_t *)&v11[OBJC_IVAR____TtC12searchpartyd10Peripheral_services];
  swift_beginAccess(&v11[OBJC_IVAR____TtC12searchpartyd10Peripheral_services], v39, 0LL, 0LL);
  uint64_t v18 = *v17;
  __chkstk_darwin(v19);
  *(&v36 - 2) = (uint64_t)v40;
  swift_bridgeObjectRetain(v18);
  sub_100373D00((uint64_t (*)(uint64_t *))sub_100254D88, (uint64_t)(&v36 - 4), v18);
  uint64_t v21 = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v40);
  if (v21)
  {
    uint64_t v23 = sub_1004E8280(a2);
    uint64_t v24 = swift_allocObject(&unk_10094CCD8, 32LL, 7LL);
    *(void *)(v24 + swift_weakDestroy(v0 + 16) = v21;
    *(void *)(v24 + 24) = v23;
    uint64_t v25 = sub_100004AEC((uint64_t *)&unk_1009A6E10);
    swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
    swift_retain();
    swift_bridgeObjectRetain(v23);
    v40[0] = Future.init(_:)(sub_100254A08, v24);
    uint64_t v26 = sub_1000372EC( (unint64_t *)&qword_1009C0F80,  (uint64_t *)&unk_1009A6E10,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
    uint64_t v27 = Publisher.eraseToAnyPublisher()(v25, v26);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t result = swift_release();
  }

  else
  {
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v22);
    uint64_t v30 = static os_log_type_t.error.getter(v29);
    if (os_log_type_enabled(v29, (os_log_type_t)v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v31 = 0;
      _os_log_impl((void *)&_mh_execute_header, v29, (os_log_type_t)v30, "No FindMy service", v31, 2u);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    v40[0] = v11;
    uint64_t v32 = type metadata accessor for Peripheral(0LL);
    uint64_t v33 = v11;
    Just.init(_:)(v40, v32);
    unint64_t v34 = sub_100122CD4();
    Just.setFailureType<A>(to:)( &type metadata for CentralManager.Error,  v5,  &type metadata for CentralManager.Error,  v34);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v7, v5);
    uint64_t v35 = sub_1000372EC( &qword_1009A6E08,  &qword_1009A6E00,  (uint64_t)&protocol conformance descriptor for Result<A, B>.Publisher);
    uint64_t v27 = Publisher.eraseToAnyPublisher()(v8, v35);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v37 + 8))(v10, v8);
  }

  uint64_t *v38 = v27;
  return result;
}

void sub_100274EF4( uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v106 = a7;
  uint64_t v105 = a6;
  uint64_t v108 = a5;
  uint64_t v109 = a4;
  uint64_t v11 = sub_100004AEC(&qword_1009A78B8);
  __chkstk_darwin(v11);
  uint64_t v13 = &v101[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v107 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = &v101[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = &v101[-v19];
  __chkstk_darwin(v18);
  uint64_t v22 = &v101[-v21];
  uint64_t v23 = type metadata accessor for AccessoryCommand(0LL);
  __chkstk_darwin(v23);
  uint64_t v25 = &v101[-((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  a2 += 16LL;
  swift_beginAccess(a2, v118, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a2);
  if (!Strong) {
    return;
  }
  uint64_t v27 = Strong;
  Transaction.capture()();
  sub_10001581C(a1, (uint64_t)v116, &qword_1009AFAF0);
  if ((v117 & 1) != 0)
  {
    sub_100254338((uint64_t)v116, (uint64_t)v113);
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    sub_10000A720(v28, (uint64_t)qword_100A2A470);
    sub_100254374(v113, (uint64_t)v112);
    uint64_t v29 = v107;
    uint64_t v30 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v107 + 16);
    v30(v20, v106, v14);
    uint64_t v31 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v30)(v17, a8, v14);
    uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.error.getter(v32);
    int v34 = v33;
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v35 = swift_slowAlloc(42LL, -1LL);
      uint64_t v104 = v27;
      uint64_t v36 = v35;
      uint64_t v106 = swift_slowAlloc(96LL, -1LL);
      v110[0] = v106;
      *(_DWORD *)uint64_t v36 = 136446979;
      unint64_t v37 = sub_100122CD4();
      LODWORD(v105) = v34;
      uint64_t v38 = Error.localizedDescription.getter(&type metadata for CentralManager.Error, v37);
      uint64_t v111 = sub_1003F11D4(v38, v39, v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease();
      sub_1002543B0(v112);
      *(_WORD *)(v36 + 12) = 2160;
      uint64_t v111 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v36 + 14, v36 + 22);
      *(_WORD *)(v36 + 22) = 2081;
      uint64_t v40 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(v14, v40);
      uint64_t v111 = sub_1003F11D4(v41, v42, v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v36 + 24, v36 + 32);
      swift_bridgeObjectRelease();
      uint64_t v43 = *(void (**)(_BYTE *, uint64_t))(v107 + 8);
      v43(v20, v14);
      *(_WORD *)(v36 + 32) = 2082;
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter(v14, v40);
      uint64_t v111 = sub_1003F11D4(v44, v45, v110);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v36 + 34, v36 + 42);
      swift_bridgeObjectRelease();
      v43(v17, v14);
      _os_log_impl( (void *)&_mh_execute_header,  v32,  (os_log_type_t)v105,  "ownerCommand error: %{public}s. Beacon %{private,mask.hash}s Command %{public}s.",  (uint8_t *)v36,  0x2Au);
      uint64_t v46 = v106;
      swift_arrayDestroy(v106, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v46, -1LL, -1LL);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    else
    {
      sub_1002543B0(v112);
      uint64_t v70 = *(void (**)(_BYTE *, uint64_t))(v29 + 8);
      v70(v20, v14);
      v70(v17, v14);
    }

    unint64_t v71 = sub_100122CD4();
    uint64_t v72 = swift_allocError(&type metadata for CentralManager.Error, v71, 0LL, 0LL);
    sub_100254374(v113, v73);
    *(void *)uint64_t v13 = v72;
    uint64_t v74 = type metadata accessor for OwnerCommandManager.Error(0LL);
    swift_storeEnumTagMultiPayload(v13, v74, 1LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v74 - 8) + 56LL))(v13, 0LL, 1LL, v74);
    v109(v13);
    swift_release();
    sub_100015794((uint64_t)v13, &qword_1009A78B8);
    sub_1002543B0(v113);
    return;
  }

  uint64_t v104 = v27;
  uint64_t v114 = &type metadata for BAServiceIdentifier;
  unint64_t v115 = &off_10094C298;
  LOBYTE(v113[0]) = 1;
  uint64_t v103 = (void *)v116[0];
  uint64_t v47 = (uint64_t *)(v116[0] + OBJC_IVAR____TtC12searchpartyd10Peripheral_services);
  swift_beginAccess(v116[0] + OBJC_IVAR____TtC12searchpartyd10Peripheral_services, v112, 0LL, 0LL);
  uint64_t v48 = *v47;
  __chkstk_darwin(v49);
  *(void *)&v101[-16] = v113;
  swift_bridgeObjectRetain(v48);
  sub_100373D00((uint64_t (*)(uint64_t *))sub_10025428C, (uint64_t)&v101[-32], v48);
  uint64_t v51 = v50;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v113);
  if (!v51)
  {
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v75 = type metadata accessor for Logger(0LL);
    uint64_t v76 = sub_10000A720(v75, (uint64_t)qword_100A2A470);
    uint64_t v77 = (os_log_s *)Logger.logObject.getter(v76);
    os_log_type_t v78 = static os_log_type_t.error.getter(v77);
    if (os_log_type_enabled(v77, v78))
    {
      uint64_t v79 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v79 = 0;
      _os_log_impl((void *)&_mh_execute_header, v77, v78, "No FindMy service!", v79, 2u);
      swift_slowDealloc(v79, -1LL, -1LL);
    }

    uint64_t v80 = type metadata accessor for OwnerCommandManager.Error(0LL);
    swift_storeEnumTagMultiPayload(v13, v80, 7LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56LL))(v13, 0LL, 1LL, v80);
    v109(v13);
    goto LABEL_27;
  }

  uint64_t v114 = &type metadata for BACharacteristicIdentifier.FindMy;
  unint64_t v115 = &off_10094C288;
  LOBYTE(v113[0]) = 1;
  swift_beginAccess(v51 + 40, v110, 0LL, 0LL);
  uint64_t v52 = *(void *)(v51 + 40);
  __chkstk_darwin(v53);
  *(void *)&v101[-16] = v113;
  swift_bridgeObjectRetain(v52);
  sub_100373D2C((uint64_t (*)(uint64_t *))sub_1002542A8, (uint64_t)&v101[-32], v52);
  uint64_t v55 = v54;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v113);
  if (!v55)
  {
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v81 = type metadata accessor for Logger(0LL);
    uint64_t v82 = sub_10000A720(v81, (uint64_t)qword_100A2A470);
    int v83 = (os_log_s *)Logger.logObject.getter(v82);
    os_log_type_t v84 = static os_log_type_t.error.getter(v83);
    if (os_log_type_enabled(v83, v84))
    {
      id v85 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v85 = 0;
      _os_log_impl((void *)&_mh_execute_header, v83, v84, "Missing Config Characteristic!", v85, 2u);
      swift_slowDealloc(v85, -1LL, -1LL);
    }

    uint64_t v86 = type metadata accessor for OwnerCommandManager.Error(0LL);
    swift_storeEnumTagMultiPayload(v13, v86, 17LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v86 - 8) + 56LL))(v13, 0LL, 1LL, v86);
    v109(v13);
    swift_release();
LABEL_27:
    swift_release();

LABEL_28:
    sub_100015794((uint64_t)v13, &qword_1009A78B8);
    return;
  }

  uint64_t v56 = v105;
  sub_1006CC0BC();
  uint64_t v58 = v57;
  unint64_t v60 = v59;
  sub_100289940(v61, v57, v62, v59);
  if ((~(v60 & v58) & 0x3000000000000000LL) == 0)
  {
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v63 = type metadata accessor for Logger(0LL);
    uint64_t v64 = sub_10000A720(v63, (uint64_t)qword_100A2A470);
    uint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
    os_log_type_t v66 = static os_log_type_t.default.getter(v65);
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v67 = 0;
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "No config command to execute. Calling completion.", v67, 2u);
      swift_slowDealloc(v67, -1LL, -1LL);
    }

    swift_retain();
    uint64_t v68 = v103;
    sub_100267D08(v56, 0LL, v103, v55);
    swift_release();
    uint64_t v69 = type metadata accessor for OwnerCommandManager.Error(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56LL))(v13, 1LL, 1LL, v69);
    v109(v13);
    swift_release();
    swift_release();

    swift_release();
    goto LABEL_28;
  }

  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v87 = type metadata accessor for Logger(0LL);
  sub_10000A720(v87, (uint64_t)qword_100A2A470);
  sub_10001DC4C(v56, (uint64_t)v25, type metadata accessor for AccessoryCommand);
  uint64_t v88 = v107;
  uint64_t v89 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v107 + 16))(v22, v106, v14);
  uint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
  os_log_type_t v91 = static os_log_type_t.info.getter(v90);
  int v92 = v91;
  if (os_log_type_enabled(v90, v91))
  {
    uint64_t v93 = swift_slowAlloc(32LL, -1LL);
    uint64_t v106 = swift_slowAlloc(64LL, -1LL);
    v113[0] = v106;
    *(_DWORD *)uint64_t v93 = 136446723;
    int v102 = v92;
    sub_1006CC4C0();
    uint64_t v111 = sub_1003F11D4(v94, v95, v113);
    uint64_t v56 = v105;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v93 + 4, v93 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v25, type metadata accessor for AccessoryCommand);
    *(_WORD *)(v93 + 12) = 2160;
    uint64_t v111 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v93 + 14, v93 + 22);
    *(_WORD *)(v93 + 22) = 2081;
    uint64_t v96 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v97 = dispatch thunk of CustomStringConvertible.description.getter(v14, v96);
    uint64_t v111 = sub_1003F11D4(v97, v98, v113);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, v112, v93 + 24, v93 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(_BYTE *, uint64_t))(v107 + 8))(v22, v14);
    _os_log_impl( (void *)&_mh_execute_header,  v90,  (os_log_type_t)v102,  "Execute command %{public}s for beacon %{private,mask.hash}s",  (uint8_t *)v93,  0x20u);
    uint64_t v99 = v106;
    swift_arrayDestroy(v106, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v99, -1LL, -1LL);
    swift_slowDealloc(v93, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v25, type metadata accessor for AccessoryCommand);
    (*(void (**)(_BYTE *, uint64_t))(v88 + 8))(v22, v14);
  }

  uint64_t v100 = v103;
  sub_10027C3D0(v56, (uint64_t)v103, (uint64_t)v55);
  sub_1002795C0(v56, (uint64_t)v100, (uint64_t)v55, v109, v108);
  swift_release();
  swift_release();
  swift_release();
}

uint64_t sub_100275BD8(char *a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v62 = a3;
  unint64_t v60 = a1;
  uint64_t v63 = *v4;
  uint64_t v64 = a4;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v65 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v59 = (char *)&v53 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v53 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v53 - v15;
  uint64_t v17 = (void (*)(char *, char *, uint64_t))type metadata accessor for DispatchPredicate(0LL);
  uint64_t v18 = *((void *)v17 - 1);
  __chkstk_darwin(v17);
  uint64_t v20 = (uint64_t *)((char *)&v53 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v61 = v4;
  uint64_t v21 = (void *)v4[9];
  *uint64_t v20 = v21;
  (*(void (**)(void *, void, void *))(v18 + 104))( v20,  enum case for DispatchPredicate.onQueue(_:),  v17);
  id v22 = v21;
  uint64_t v23 = _dispatchPreconditionTest(_:)(v20);
  (*(void (**)(void *, void (*)(char *, char *, uint64_t)))(v18 + 8))(v20, v17);
  if ((v23 & 1) != 0)
  {
    uint64_t v24 = type metadata accessor for AccessoryCommand(0LL);
    uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v7 + 16);
    v17(v16, &a2[*(int *)(v24 + 20)], v6);
    v17(v14, a2, v6);
    uint64_t v23 = (uint64_t)v14;
    uint64_t v18 = v7;
    if (qword_10099B220 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B220, sub_1002673AC);
LABEL_3:
  uint64_t v25 = type metadata accessor for Logger(0LL);
  sub_10000A720(v25, (uint64_t)qword_100A2A470);
  uint64_t v26 = v59;
  uint64_t v58 = v16;
  v17(v59, v16, v6);
  uint64_t v27 = v65;
  v17(v65, (char *)v23, v6);
  uint64_t v28 = v60;
  uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
  os_log_type_t v30 = static os_log_type_t.default.getter(v29);
  int v31 = v30;
  if (os_log_type_enabled(v29, v30))
  {
    uint64_t v32 = swift_slowAlloc(42LL, -1LL);
    unint64_t v60 = a2;
    uint64_t v57 = v23;
    uint64_t v33 = v32;
    uint64_t v34 = swift_slowAlloc(8LL, -1LL);
    uint64_t v53 = v18;
    uint64_t v54 = v34;
    uint64_t v35 = (void *)v34;
    uint64_t v56 = swift_slowAlloc(64LL, -1LL);
    uint64_t v66 = (uint64_t)v28;
    v67[0] = v56;
    *(_DWORD *)uint64_t v33 = 138413059;
    int v55 = v31;
    uint64_t v36 = v28;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v33 + 4, v33 + 12);
    *uint64_t v35 = v28;

    *(_WORD *)(v33 + 12) = 2160;
    uint64_t v66 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v33 + 14, v33 + 22);
    *(_WORD *)(v33 + 22) = 2081;
    uint64_t v37 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter(v6, v37);
    uint64_t v66 = sub_1003F11D4(v38, v39, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v33 + 24, v33 + 32);
    swift_bridgeObjectRelease();
    uint64_t v40 = *(void (**)(char *, uint64_t))(v53 + 8);
    v40(v26, v6);
    *(_WORD *)(v33 + 32) = 2082;
    uint64_t v41 = v65;
    uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter(v6, v37);
    uint64_t v66 = sub_1003F11D4(v42, v43, v67);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v66, v67, v33 + 34, v33 + 42);
    swift_bridgeObjectRelease();
    v40(v41, v6);
    _os_log_impl( (void *)&_mh_execute_header,  v29,  (os_log_type_t)v55,  "Attempt to connect to AirTag using peripheral: %@. Beacon %{private,mask.hash}s Command %{public}s.",  (uint8_t *)v33,  0x2Au);
    uint64_t v44 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    uint64_t v45 = v54;
    swift_arrayDestroy(v54, 1LL, v44);
    swift_slowDealloc(v45, -1LL, -1LL);
    uint64_t v46 = v56;
    swift_arrayDestroy(v56, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1LL, -1LL);
    uint64_t v47 = v33;
    uint64_t v23 = v57;
    a2 = v60;
    swift_slowDealloc(v47, -1LL, -1LL);
  }

  else
  {

    uint64_t v40 = *(void (**)(char *, uint64_t))(v18 + 8);
    v40(v26, v6);
    v40(v27, v6);
  }

  uint64_t v48 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v48);
  *(&v53 - 8) = (uint64_t)v61;
  *(&v53 - 7) = (uint64_t)v28;
  uint64_t v49 = v62;
  *(&v53 - 6) = (uint64_t)a2;
  *(&v53 - 5) = v49;
  uint64_t v50 = v58;
  *(&v53 - 4) = v64;
  *(&v53 - 3) = (uint64_t)v50;
  uint64_t v51 = v63;
  *(&v53 - 2) = v23;
  *(&v53 - 1) = v51;
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.OwnerCommandManager.connectAirTag",  63LL,  2LL,  sub_10028A92C,  &v53 - 10);
  v40((char *)v23, v6);
  return ((uint64_t (*)(char *, uint64_t))v40)(v50, v6);
}

uint64_t sub_100276100( uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v122 = a8;
  uint64_t v121 = a7;
  uint64_t v127 = a6;
  uint64_t v125 = a5;
  uint64_t v120 = a4;
  uint64_t v129 = a1;
  uint64_t v126 = type metadata accessor for UUID(0LL);
  uint64_t v124 = *(void *)(v126 - 8);
  uint64_t v10 = __chkstk_darwin(v126);
  uint64_t v134 = (char *)&v98 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v123 = v11;
  __chkstk_darwin(v10);
  uint64_t v133 = (char *)&v98 - v12;
  uint64_t v13 = type metadata accessor for AccessoryCommand(0LL);
  uint64_t v118 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v119 = v14;
  uint64_t v132 = (uint64_t)&v98 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009B0670);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v98 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v104 = sub_100004AEC(&qword_1009A7AC8);
  uint64_t v105 = *(void *)(v104 - 8);
  __chkstk_darwin(v104);
  uint64_t v19 = (char *)&v98 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v106 = sub_100004AEC(&qword_1009A7B08);
  uint64_t v107 = *(void *)(v106 - 8);
  __chkstk_darwin(v106);
  int v102 = (char *)&v98 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v109 = sub_100004AEC(&qword_1009A7B10);
  uint64_t v108 = *(void *)(v109 - 8);
  __chkstk_darwin(v109);
  uint64_t v103 = (char *)&v98 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v112 = sub_100004AEC(&qword_1009A7B18);
  uint64_t v111 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  uint64_t v110 = (char *)&v98 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v115 = sub_100004AEC(&qword_1009A7B20);
  uint64_t v114 = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  BOOL v113 = (char *)&v98 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v117 = sub_100004AEC(&qword_1009A7B28);
  uint64_t v116 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  uint64_t v131 = (char *)&v98 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = a2;
  uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009C0FA0);
  uint64_t inited = swift_initStackObject(v26, v136);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBConnectPeripheralOptionHideFromBTSettings);
  *(void *)(inited + 40) = v28;
  *(void *)(inited + 72) = &type metadata for Bool;
  *(_BYTE *)(inited + 48) = 1;
  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(CBConnectPeripheralOptionConnectionUseCase);
  *(void *)(inited + 88) = v29;
  *(void *)(inited + 120) = &type metadata for UInt32;
  *(_DWORD *)(inited + 96) = 0x10000;
  unint64_t v30 = sub_100412CF8(inited);
  uint64_t v128 = a3;
  int v31 = (void *)sub_1007CEDA0(a3, v30);
  swift_bridgeObjectRelease();
  id v137 = v31;
  uint64_t v32 = *(void **)(a2 + 72);
  uint64_t v33 = v25;
  id v135 = *(id *)(v25 + 72);
  uint64_t v34 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
  uint64_t v100 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL);
  uint64_t v35 = (uint64_t)v17;
  v100(v17, 1LL, 1LL, v34);
  id v99 = v32;
  uint64_t v36 = sub_100004AEC((uint64_t *)&unk_1009A6C10);
  unint64_t v37 = sub_100004AB0();
  unint64_t v130 = v37;
  uint64_t v38 = sub_1000372EC( &qword_1009A6C20,  (uint64_t *)&unk_1009A6C10,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v98 = sub_100007864( (unint64_t *)&qword_1009B06C0,  (uint64_t (*)(uint64_t))sub_100004AB0,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(&v135, v35, v36, v37, v38, v98);
  sub_100015794(v35, &qword_1009B0670);

  swift_release();
  uint64_t v39 = swift_retain();
  uint64_t v40 = static Subscribers.Demand.unlimited.getter(v39);
  uint64_t v41 = sub_100004AEC(&qword_1009A7B30);
  uint64_t v42 = sub_1000372EC( &qword_1009A7AE8,  &qword_1009A7AC8,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v43 = sub_1000372EC( &qword_1009A7B38,  &qword_1009A7B30,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v44 = v102;
  uint64_t v45 = v40;
  uint64_t v46 = v104;
  Publisher.flatMap<A>(maxPublishers:_:)(v45, sub_10028A95C, v33, v104, v41, v42, v43);
  uint64_t v101 = v33;
  swift_release();
  (*(void (**)(char *, uint64_t))(v105 + 8))(v19, v46);
  uint64_t v47 = v99;
  id v137 = v99;
  uint64_t v48 = v34;
  uint64_t v49 = v34;
  uint64_t v50 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v100;
  v100((char *)v35, 1LL, 1LL, v49);
  uint64_t v51 = sub_1000372EC( &qword_1009A7B40,  &qword_1009A7B08,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  id v52 = v47;
  uint64_t v53 = v103;
  id v54 = v52;
  uint64_t v55 = v35;
  uint64_t v56 = v98;
  uint64_t v57 = v106;
  uint64_t v58 = v44;
  uint64_t v59 = v55;
  Publisher.receive<A>(on:options:)(&v137, v55, v106, v130, v51, v98);
  sub_100015794(v59, &qword_1009B0670);

  (*(void (**)(char *, uint64_t))(v107 + 8))(v58, v57);
  if (qword_10099B228 != -1) {
    swift_once(&qword_10099B228, sub_10026779C);
  }
  uint64_t v60 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0LL);
  uint64_t v61 = sub_10000A720(v60, (uint64_t)qword_1009A7418);
  id v137 = v54;
  v50(v59, 1LL, 1LL, v48);
  uint64_t v62 = sub_1000372EC( &qword_1009A7B48,  &qword_1009A7B10,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  id v63 = v54;
  uint64_t v97 = v56;
  uint64_t v64 = v110;
  uint64_t v65 = v61;
  uint64_t v66 = v109;
  Publisher.timeout<A>(_:scheduler:options:customError:)(v65, &v137, v59, sub_10028B5FC, 0LL, v109, v130, v62, v97);
  sub_100015794(v59, &qword_1009B0670);

  (*(void (**)(char *, uint64_t))(v108 + 8))(v53, v66);
  uint64_t v67 = sub_100004AEC(&qword_1009AFAF0);
  uint64_t v68 = sub_1000372EC( &qword_1009A7B50,  &qword_1009A7B18,  (uint64_t)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  uint64_t v69 = v113;
  uint64_t v70 = v112;
  Publisher.map<A>(_:)(sub_100249DA8, 0LL, v112, v67, v68);
  (*(void (**)(char *, uint64_t))(v111 + 8))(v64, v70);
  uint64_t v71 = sub_100004AEC(&qword_1009A6C28);
  uint64_t v72 = sub_1000372EC( &qword_1009A7B58,  &qword_1009A7B20,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  uint64_t v73 = sub_1000372EC(&qword_1009A6C38, &qword_1009A6C28, (uint64_t)&protocol conformance descriptor for Just<A>);
  uint64_t v74 = v115;
  Publisher.catch<A>(_:)(sub_10024FF78, 0LL, v115, v71, v72, v73);
  (*(void (**)(char *, uint64_t))(v114 + 8))(v69, v74);
  uint64_t v75 = swift_allocObject(&unk_10094C558, 24LL, 7LL);
  swift_weakInit(v75 + 16, v101);
  sub_10001DC4C(v120, v132, type metadata accessor for AccessoryCommand);
  uint64_t v76 = v124;
  uint64_t v77 = *(void (**)(char *, uint64_t, uint64_t))(v124 + 16);
  uint64_t v78 = v126;
  v77(v133, v121, v126);
  v77(v134, v122, v78);
  uint64_t v79 = *(unsigned __int8 *)(v118 + 80);
  uint64_t v80 = (v79 + 32) & ~v79;
  unint64_t v81 = (v119 + v80 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v82 = *(unsigned __int8 *)(v76 + 80);
  uint64_t v83 = (v82 + v81 + 16) & ~v82;
  uint64_t v84 = (v123 + v82 + v83) & ~v82;
  unint64_t v85 = (v123 + v84 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v86 = swift_allocObject(&unk_10094CC10, v85 + 8, v79 | v82 | 7);
  *(void *)(v86 + swift_weakDestroy(v0 + 16) = v75;
  uint64_t v87 = v129;
  *(void *)(v86 + 24) = v129;
  sub_10002218C(v132, v86 + v80, type metadata accessor for AccessoryCommand);
  uint64_t v88 = (void *)(v86 + v81);
  uint64_t v89 = v127;
  void *v88 = v125;
  v88[1] = v89;
  uint64_t v90 = *(void (**)(uint64_t, char *, uint64_t))(v76 + 32);
  v90(v86 + v83, v133, v78);
  v90(v86 + v84, v134, v78);
  os_log_type_t v91 = v128;
  *(void *)(v86 + v85) = v128;
  uint64_t v92 = sub_1000372EC( &qword_1009A7B60,  &qword_1009A7B28,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
  swift_retain();
  swift_retain();
  uint64_t v93 = v91;
  uint64_t v94 = v117;
  unint64_t v95 = v131;
  Publisher<>.sink(receiveValue:)(sub_10028AA88, v86, v117, v92);
  swift_release();
  (*(void (**)(char *, uint64_t))(v116 + 8))(v95, v94);
  AnyCancellable.store(in:)(v87);
  return swift_release();
}

uint64_t sub_100276B78@<X0>(void **a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v5 = *a1;
  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10000A720(v6, (uint64_t)qword_100A2A470);
  sub_1004A2AC8(0xD00000000000001FLL, 0x800000010085B660LL);
  uint64_t v7 = *(void *)(a2 + 56);
  uint64_t v8 = swift_allocObject(&unk_10094CC60, 32LL, 7LL);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = v7;
  *(void *)(v8 + 24) = v5;
  uint64_t v9 = sub_100004AEC(&qword_1009A7B68);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  swift_retain();
  id v10 = v5;
  Future.init(_:)(sub_10028AB6C, v8);
  uint64_t v11 = sub_1000372EC(&qword_1009A7B70, &qword_1009A7B68, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  uint64_t v12 = Publisher.eraseToAnyPublisher()(v9, v11);
  uint64_t result = swift_release();
  *a3 = v12;
  return result;
}

void sub_100276CBC( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6, uint64_t a7, uint64_t a8, void *a9)
{
  uint64_t v87 = a6;
  uint64_t v85 = a4;
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = &v80[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v16);
  uint64_t v20 = &v80[-v19];
  uint64_t v21 = sub_100004AEC(&qword_1009A78B8);
  __chkstk_darwin(v21);
  uint64_t v86 = (uint64_t *)&v80[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  a2 += 16LL;
  swift_beginAccess(a2, v95, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a2);
  if (Strong)
  {
    uint64_t v24 = Strong;
    Transaction.capture()();
    sub_10001581C(a1, (uint64_t)v93, &qword_1009AFAF0);
    if ((v94 & 1) != 0)
    {
      uint64_t v85 = v24;
      sub_100254338((uint64_t)v93, (uint64_t)&v91);
      if (qword_10099B220 != -1) {
        swift_once(&qword_10099B220, sub_1002673AC);
      }
      uint64_t v84 = a9;
      uint64_t v25 = type metadata accessor for Logger(0LL);
      sub_10000A720(v25, (uint64_t)qword_100A2A470);
      sub_100254374(&v91, (uint64_t)v90);
      uint64_t v26 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 16);
      v26(v20, a7, v14);
      uint64_t v27 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v26)(v18, a8, v14);
      uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
      os_log_type_t v29 = static os_log_type_t.error.getter(v28);
      int v30 = v29;
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v31 = swift_slowAlloc(42LL, -1LL);
        int v81 = v30;
        uint64_t v32 = v31;
        uint64_t v82 = swift_slowAlloc(96LL, -1LL);
        uint64_t v89 = v82;
        *(_DWORD *)uint64_t v32 = 136446979;
        unint64_t v33 = sub_100122CD4();
        uint64_t v34 = Error.localizedDescription.getter(&type metadata for CentralManager.Error, v33);
        uint64_t v88 = sub_1003F11D4(v34, v35, &v89);
        uint64_t v83 = a5;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v32 + 4, v32 + 12);
        swift_bridgeObjectRelease();
        sub_1002543B0(v90);
        *(_WORD *)(v32 + 12) = 2160;
        uint64_t v88 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v32 + 14, v32 + 22);
        *(_WORD *)(v32 + 22) = 2081;
        uint64_t v36 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter(v14, v36);
        uint64_t v88 = sub_1003F11D4(v37, v38, &v89);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v32 + 24, v32 + 32);
        swift_bridgeObjectRelease();
        uint64_t v39 = *(void (**)(_BYTE *, uint64_t))(v15 + 8);
        v39(v20, v14);
        *(_WORD *)(v32 + 32) = 2082;
        uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter(v14, v36);
        uint64_t v88 = sub_1003F11D4(v40, v41, &v89);
        a5 = (void (*)(void))v83;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v88, &v89, v32 + 34, v32 + 42);
        swift_bridgeObjectRelease();
        v39(v18, v14);
        _os_log_impl( (void *)&_mh_execute_header,  v28,  (os_log_type_t)v81,  "connectAirTag error: %{public}s. Beacon %{private,mask.hash}s Command %{public}s.",  (uint8_t *)v32,  0x2Au);
        uint64_t v42 = v82;
        swift_arrayDestroy(v82, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v42, -1LL, -1LL);
        swift_slowDealloc(v32, -1LL, -1LL);
      }

      else
      {
        sub_1002543B0(v90);
        uint64_t v55 = *(void (**)(_BYTE *, uint64_t))(v15 + 8);
        v55(v20, v14);
        v55(v18, v14);
      }

      swift_retain();
      uint64_t v56 = v84;
      uint64_t v57 = sub_1007CF938(v84);
      swift_release();
      v90[0] = v57;
      uint64_t v58 = swift_allocObject(&unk_10094CC38, 24LL, 7LL);
      *(void *)(v58 + swift_weakDestroy(v0 + 16) = v56;
      id v59 = v56;
      uint64_t v60 = sub_100004AEC((uint64_t *)&unk_1009A6C10);
      uint64_t v61 = sub_1000372EC( &qword_1009A6C20,  (uint64_t *)&unk_1009A6C10,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      Publisher.oneshot(_:)(sub_10028AB60, v58, v60, v61);
      swift_release();
      swift_release();
      unint64_t v62 = sub_100122CD4();
      uint64_t v63 = swift_allocError(&type metadata for CentralManager.Error, v62, 0LL, 0LL);
      sub_100254374(&v91, v64);
      uint64_t v65 = (uint64_t)v86;
      *uint64_t v86 = v63;
      uint64_t v66 = type metadata accessor for OwnerCommandManager.Error(0LL);
      swift_storeEnumTagMultiPayload(v65, v66, 1LL);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v66 - 8) + 56LL))(v65, 0LL, 1LL, v66);
      a5(v65);
      swift_release();
      sub_100015794(v65, &qword_1009A78B8);
      sub_1002543B0((uint64_t *)&v91);
    }

    else
    {
      uint64_t v43 = (void *)v93[0];
      if (qword_10099B220 != -1) {
        swift_once(&qword_10099B220, sub_1002673AC);
      }
      uint64_t v44 = type metadata accessor for Logger(0LL);
      uint64_t v45 = (void *)sub_10000A720(v44, (uint64_t)qword_100A2A470);
      id v46 = v43;
      uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
      os_log_type_t v48 = static os_log_type_t.default.getter(v47);
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = swift_slowAlloc(12LL, -1LL);
        uint64_t v84 = v45;
        uint64_t v50 = (uint8_t *)v49;
        uint64_t v83 = (void *)swift_slowAlloc(8LL, -1LL);
        *(_DWORD *)uint64_t v50 = 138412290;
        id v91 = v46;
        uint64_t v51 = a5;
        id v52 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v91, &v92, v50 + 4, v50 + 12);
        uint64_t v53 = v83;
        void *v83 = v46;

        a5 = v51;
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "AirTag %@ is connected and ready to send data.", v50, 0xCu);
        uint64_t v54 = sub_100004AEC((uint64_t *)&unk_10099FB20);
        swift_arrayDestroy(v53, 1LL, v54);
        swift_slowDealloc(v53, -1LL, -1LL);
        swift_slowDealloc(v50, -1LL, -1LL);
      }

      else
      {

        uint64_t v47 = (os_log_s *)v46;
      }

      uint64_t v67 = v85;

      sub_1006CC0BC();
      uint64_t v69 = v68;
      unint64_t v71 = v70;
      uint64_t v74 = sub_100289940(v72, v68, v73, v70);
      if ((~(v71 & v69) & 0x3000000000000000LL) != 0)
      {
        sub_10027A8C8(v67, (uint64_t)v46);
        sub_10027777C(v67, (uint64_t)v46, (uint64_t)a5, v87);
        swift_release();
      }

      else
      {
        uint64_t v75 = (os_log_s *)Logger.logObject.getter(v74);
        os_log_type_t v76 = static os_log_type_t.default.getter(v75);
        if (os_log_type_enabled(v75, v76))
        {
          uint64_t v77 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v77 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v75,  v76,  "No AirTag command to execute. Calling completion.",  v77,  2u);
          swift_slowDealloc(v77, -1LL, -1LL);
        }

        sub_100267D08(v67, 0LL, v46, 0LL);
        uint64_t v78 = type metadata accessor for OwnerCommandManager.Error(0LL);
        uint64_t v79 = (uint64_t)v86;
        (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56LL))(v86, 1LL, 1LL, v78);
        a5(v79);
        swift_release();

        sub_100015794(v79, &qword_1009A78B8);
      }
    }
  }

void sub_100277504(uint64_t a1, void *a2)
{
  if ((v19[33] & 1) != 0)
  {
    sub_100254338((uint64_t)&v18, (uint64_t)v17);
    unint64_t v3 = sub_100122CD4();
    swift_willThrowTypedImpl(v17, &type metadata for CentralManager.Error, v3);
    sub_100254338((uint64_t)v17, (uint64_t)v16);
    uint64_t v4 = swift_allocError(&type metadata for CentralManager.Error, v3, 0LL, 0LL);
    sub_100254338((uint64_t)v16, v5);
    swift_errorRetain(v4);
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    sub_10000A720(v6, (uint64_t)qword_100A2A470);
    id v7 = a2;
    uint64_t v8 = swift_errorRetain(v4);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = swift_slowAlloc(22LL, -1LL);
      uint64_t v12 = (void *)swift_slowAlloc(16LL, -1LL);
      *(_DWORD *)uint64_t v11 = 138543618;
      uint64_t v13 = (void *)_convertErrorToNSError(_:)(v4);
      id v18 = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v11 + 4, v11 + 12);
      *uint64_t v12 = v13;
      swift_errorRelease(v4);
      *(_WORD *)(v11 + 12) = 2114;
      id v18 = v7;
      id v14 = v7;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, v19, v11 + 14, v11 + 22);
      v12[1] = v7;

      _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "Disconnection failure: %{public}@ %{public}@!",  (uint8_t *)v11,  0x16u);
      uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v12, 2LL, v15);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);

      swift_errorRelease(v4);
    }

    else
    {
      swift_errorRelease(v4);
      swift_errorRelease(v4);
    }

    swift_errorRelease(v4);
  }

  else
  {
  }

void sub_10027777C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v53 = a3;
  uint64_t v54 = a4;
  uint64_t v56 = a2;
  uint64_t v6 = sub_100004AEC(&qword_1009A78B8);
  __chkstk_darwin(v6);
  id v52 = (char *)v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = type metadata accessor for UUID(0LL);
  uint64_t v45 = *(void *)(v47 - 8);
  uint64_t v8 = __chkstk_darwin(v47);
  id v46 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v44 = (char *)v31 - v10;
  uint64_t v11 = sub_100004AEC(&qword_1009B0670);
  __chkstk_darwin(v11);
  v31[9] = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = sub_100004AEC(&qword_1009A7AC8);
  v31[8] = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  v31[7] = (char *)v31 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = sub_100004AEC(&qword_1009A7AD0);
  uint64_t v34 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  unint64_t v33 = (char *)v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = sub_100004AEC(&qword_1009A7AD8);
  uint64_t v39 = *(void *)(v40 - 8);
  __chkstk_darwin(v40);
  uint64_t v36 = (char *)v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v43 = sub_100004AEC(&qword_1009A7AE0);
  uint64_t v42 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  unint64_t v41 = (char *)v31 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for AccessoryCommand(0LL);
  uint64_t v38 = *(void *)(v17 - 8);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v37 = (char *)v31 - v21;
  __chkstk_darwin(v20);
  os_log_type_t v48 = (char *)v31 - v22;
  uint64_t v23 = type metadata accessor for BinaryEncoder(0LL);
  uint64_t v50 = *(void *)(v23 - 8);
  uint64_t v51 = v23;
  __chkstk_darwin(v23);
  uint64_t v55 = (char *)v31 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v28 = (void *)((char *)v31 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v49 = v4;
  os_log_type_t v29 = *(void **)(v4 + 72);
  *uint64_t v28 = v29;
  (*(void (**)(void *, void, uint64_t))(v26 + 104))(v28, enum case for DispatchPredicate.onQueue(_:), v25);
  id v30 = v29;
  LOBYTE(v29) = _dispatchPreconditionTest(_:)(v28);
  (*(void (**)(void *, uint64_t))(v26 + 8))(v28, v25);
  if ((v29 & 1) != 0)
  {
    v31[6] = v30;
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x100278A60LL);
}

uint64_t *sub_100278AE8( uint64_t a1, uint64_t a2, uint64_t a3, int a4, uint64_t a5, void (*a6)(uint64_t *), uint64_t a7)
{
  uint64_t v100 = a7;
  uint64_t v101 = a6;
  uint64_t v99 = a5;
  int v92 = a4;
  uint64_t v91 = a3;
  uint64_t v9 = sub_100004AEC(&qword_1009A78B8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v86 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v98 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v97 = *(void *)(v98 - 8);
  __chkstk_darwin(v98);
  uint64_t v96 = (char *)&v86 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v95 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v94 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v93 = (char *)&v86 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v87 = type metadata accessor for AccessoryCommand(0LL);
  uint64_t v90 = *(void *)(v87 - 8);
  uint64_t v14 = *(void *)(v90 + 64);
  uint64_t v15 = __chkstk_darwin(v87);
  uint64_t v16 = (char *)&v86 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v86 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v86 - v20;
  uint64_t v22 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v86 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a2 += 16LL;
  swift_beginAccess(a2, v109, 0LL, 0LL);
  uint64_t result = (uint64_t *)swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v89 = (uint64_t *)v11;
    uint64_t v88 = result;
    uint64_t v27 = (void *)result[8];
    if (v27)
    {
      uint64_t v28 = (void *)result[8];
    }

    else
    {
      sub_100004AB0();
      (*(void (**)(char *, void, uint64_t))(v23 + 104))( v25,  enum case for DispatchQoS.QoSClass.default(_:),  v22);
      uint64_t v29 = static OS_dispatch_queue.global(qos:)(v25);
      id v30 = v25;
      uint64_t v28 = (void *)v29;
      (*(void (**)(char *, uint64_t))(v23 + 8))(v30, v22);
    }

    sub_10001581C(a1, (uint64_t)v107, &qword_1009AFAF0);
    if ((v108 & 1) != 0)
    {
      sub_100254338((uint64_t)v107, (uint64_t)&aBlock);
      uint64_t v31 = qword_10099B220;
      id v32 = v27;
      if (v31 != -1) {
        swift_once(&qword_10099B220, sub_1002673AC);
      }
      uint64_t v33 = type metadata accessor for Logger(0LL);
      sub_10000A720(v33, (uint64_t)qword_100A2A470);
      sub_100254374(&aBlock, (uint64_t)v106);
      uint64_t v34 = v99;
      sub_10001DC4C(v99, (uint64_t)v19, type metadata accessor for AccessoryCommand);
      uint64_t v35 = sub_10001DC4C(v34, (uint64_t)v16, type metadata accessor for AccessoryCommand);
      uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
      os_log_type_t v37 = static os_log_type_t.error.getter(v36);
      int v38 = v37;
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v39 = swift_slowAlloc(42LL, -1LL);
        uint64_t v99 = swift_slowAlloc(96LL, -1LL);
        uint64_t v105 = v99;
        *(_DWORD *)uint64_t v39 = 136446979;
        unint64_t v40 = sub_100122CD4();
        uint64_t v41 = Error.localizedDescription.getter(&type metadata for CentralManager.Error, v40);
        uint64_t v104 = sub_1003F11D4(v41, v42, &v105);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v39 + 4, v39 + 12);
        swift_bridgeObjectRelease();
        sub_1002543B0(v106);
        *(_WORD *)(v39 + 12) = 2160;
        uint64_t v104 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v39 + 14, v39 + 22);
        *(_WORD *)(v39 + 22) = 2081;
        uint64_t v43 = type metadata accessor for UUID(0LL);
        LODWORD(v98) = v38;
        uint64_t v44 = v43;
        uint64_t v45 = v28;
        uint64_t v46 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter(v44, v46);
        uint64_t v104 = sub_1003F11D4(v47, v48, &v105);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v39 + 24, v39 + 32);
        swift_bridgeObjectRelease();
        sub_100018C68((uint64_t)v19, type metadata accessor for AccessoryCommand);
        *(_WORD *)(v39 + 32) = 2082;
        uint64_t v49 = v46;
        uint64_t v28 = v45;
        uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter(v44, v49);
        uint64_t v104 = sub_1003F11D4(v50, v51, &v105);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v39 + 34, v39 + 42);
        swift_bridgeObjectRelease();
        sub_100018C68((uint64_t)v16, type metadata accessor for AccessoryCommand);
        _os_log_impl( (void *)&_mh_execute_header,  v36,  (os_log_type_t)v98,  "_executeAirTag error: %{public}s. Beacon %{private,mask.hash}s Command %{public}s.",  (uint8_t *)v39,  0x2Au);
        uint64_t v52 = v99;
        swift_arrayDestroy(v99, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v52, -1LL, -1LL);
        swift_slowDealloc(v39, -1LL, -1LL);
      }

      else
      {
        sub_1002543B0(v106);
        sub_100018C68((uint64_t)v19, type metadata accessor for AccessoryCommand);
        sub_100018C68((uint64_t)v16, type metadata accessor for AccessoryCommand);
      }

      uint64_t v65 = v89;
      unint64_t v66 = sub_100122CD4();
      uint64_t v67 = swift_allocError(&type metadata for CentralManager.Error, v66, 0LL, 0LL);
      sub_100254374(&aBlock, v68);
      uint64_t *v65 = v67;
      uint64_t v69 = type metadata accessor for OwnerCommandManager.Error(0LL);
      swift_storeEnumTagMultiPayload(v65, v69, 1LL);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v69 - 8) + 56LL))(v65, 0LL, 1LL, v69);
      v101(v65);

      swift_release();
      sub_100015794((uint64_t)v65, &qword_1009A78B8);
      return sub_1002543B0((uint64_t *)&aBlock);
    }

    else
    {
      uint64_t v53 = (void *)v107[0];
      uint64_t v54 = qword_10099B220;
      id v55 = v27;
      if (v54 != -1) {
        swift_once(&qword_10099B220, sub_1002673AC);
      }
      uint64_t v56 = type metadata accessor for Logger(0LL);
      sub_10000A720(v56, (uint64_t)qword_100A2A470);
      uint64_t v57 = v53;
      uint64_t v58 = (os_log_s *)Logger.logObject.getter(v57);
      os_log_type_t v59 = static os_log_type_t.default.getter(v58);
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v86 = (void ***)swift_slowAlloc(8LL, -1LL);
        uint64_t v87 = (uint64_t)v28;
        *(_DWORD *)uint64_t v60 = 138412290;
        uint64_t aBlock = v57;
        uint64_t v61 = v57;
        unint64_t v62 = v57;
        uint64_t v28 = (void *)v87;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, v103, v60 + 4, v60 + 12);
        uint64_t v63 = v86;
        *uint64_t v86 = v61;

        uint64_t v57 = v61;
        _os_log_impl((void *)&_mh_execute_header, v58, v59, "Command successfully sent to AirTag %@", v60, 0xCu);
        uint64_t v64 = sub_100004AEC((uint64_t *)&unk_10099FB20);
        swift_arrayDestroy(v63, 1LL, v64);
        swift_slowDealloc(v63, -1LL, -1LL);
        swift_slowDealloc(v60, -1LL, -1LL);
      }

      else
      {

        uint64_t v58 = (os_log_s *)v57;
      }

      uint64_t v70 = (uint64_t)v89;

      sub_10001DC4C(v99, (uint64_t)v21, type metadata accessor for AccessoryCommand);
      uint64_t v71 = *(unsigned __int8 *)(v90 + 80);
      uint64_t v72 = (v71 + 40) & ~v71;
      uint64_t v73 = swift_allocObject(&unk_10094CBC0, v72 + v14, v71 | 7);
      uint64_t v74 = v91;
      *(void *)(v73 + swift_weakDestroy(v0 + 16) = v91;
      char v75 = v92;
      *(_BYTE *)(v73 + 24) = v92;
      *(void *)(v73 + 32) = v88;
      sub_10002218C((uint64_t)v21, v73 + v72, type metadata accessor for AccessoryCommand);
      v103[3] = sub_10028A8F4;
      v103[4] = v73;
      uint64_t aBlock = _NSConcreteStackBlock;
      v103[0] = 1107296256LL;
      v103[1] = sub_1001C31E8;
      v103[2] = &unk_10094CBD8;
      os_log_type_t v76 = _Block_copy(&aBlock);
      sub_10015BB0C(v74, v75);
      uint64_t v77 = swift_retain();
      uint64_t v78 = v93;
      static DispatchQoS.unspecified.getter(v77);
      v106[0] = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t v79 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v80 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v81 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v82 = v96;
      uint64_t v83 = v80;
      uint64_t v84 = v98;
      dispatch thunk of SetAlgebra.init<A>(_:)(v106, v83, v81, v98, v79);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v78, v82, v76);
      _Block_release(v76);
      (*(void (**)(char *, uint64_t))(v97 + 8))(v82, v84);
      (*(void (**)(char *, uint64_t))(v94 + 8))(v78, v95);
      swift_release();
      uint64_t v85 = type metadata accessor for OwnerCommandManager.Error(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v85 - 8) + 56LL))(v70, 1LL, 1LL, v85);
      v101((uint64_t *)v70);

      swift_release();
      return (uint64_t *)sub_100015794(v70, &qword_1009A78B8);
    }
  }

  return result;
}

uint64_t sub_1002794D4(uint64_t result, char a2, uint64_t a3, uint64_t a4)
{
  if (a2)
  {
    if (a2 == 1)
    {
      uint64_t result = swift_unknownObjectWeakLoadStrong(a3 + 40);
      if (!result) {
        return result;
      }
      uint64_t v5 = result;
      uint64_t v6 = a4 + *(int *)(type metadata accessor for AccessoryCommand(0LL) + 20);
      swift_retain();
      uint64_t v7 = "SPPlaySound didStartPlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s";
      uint64_t v8 = sub_100392A18;
LABEL_10:
      sub_100288F7C(v6, a4, 0LL, v5, v7, (uint64_t (*)(void, void))v8);
      swift_release();
      return swift_unknownObjectRelease(v5);
    }

    uint64_t v9 = result;
    uint64_t result = swift_unknownObjectWeakLoadStrong(a3 + 40);
    uint64_t v5 = result;
    if (!v9)
    {
      if (!result) {
        return result;
      }
      uint64_t v6 = a4 + *(int *)(type metadata accessor for AccessoryCommand(0LL) + 20);
      swift_retain();
      uint64_t v7 = "SPPlaySound didStopPlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s";
      uint64_t v8 = sub_100394848;
      goto LABEL_10;
    }

    if (result) {
      return swift_unknownObjectRelease(v5);
    }
  }

  return result;
}

uint64_t sub_1002795C0(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v47 = a4;
  uint64_t v48 = a5;
  uint64_t v9 = *v6;
  uint64_t v45 = a2;
  uint64_t v46 = v9;
  uint64_t v10 = sub_100004AEC(&qword_1009A78B8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for AccessoryCommand(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t *)((char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v20 = (void *)v6[9];
  *uint64_t v19 = v20;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  id v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  (*(void (**)(void *, uint64_t))(v17 + 8))(v19, v16);
  if ((v20 & 1) == 0)
  {
    __break(1u);
    goto LABEL_12;
  }

  sub_1006CC0BC();
  if ((~(v25 & v23) & 0x3000000000000000LL) == 0)
  {
    if (qword_10099B220 == -1)
    {
LABEL_4:
      uint64_t v26 = type metadata accessor for Logger(0LL);
      sub_10000A720(v26, (uint64_t)qword_100A2A470);
      uint64_t v27 = sub_10001DC4C(a1, (uint64_t)v15, type metadata accessor for AccessoryCommand);
      uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
      os_log_type_t v29 = static os_log_type_t.error.getter(v28);
      if (os_log_type_enabled(v28, v29))
      {
        id v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v31 = swift_slowAlloc(32LL, -1LL);
        uint64_t v50 = v31;
        *(_DWORD *)id v30 = 136446210;
        sub_1006CC4C0();
        uint64_t v49 = sub_1003F11D4(v32, v33, &v50);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v30 + 4, v30 + 12);
        swift_bridgeObjectRelease();
        sub_100018C68((uint64_t)v15, type metadata accessor for AccessoryCommand);
        _os_log_impl((void *)&_mh_execute_header, v28, v29, "_execute invalid command %{public}s", v30, 0xCu);
        swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v31, -1LL, -1LL);
        swift_slowDealloc(v30, -1LL, -1LL);
      }

      else
      {
        sub_100018C68((uint64_t)v15, type metadata accessor for AccessoryCommand);
      }

      uint64_t v43 = type metadata accessor for OwnerCommandManager.Error(0LL);
      swift_storeEnumTagMultiPayload(v12, v43, 9LL);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v43 - 8) + 56LL))(v12, 0LL, 1LL, v43);
      v47(v12);
      return sub_100015794((uint64_t)v12, &qword_1009A78B8);
    }

uint64_t sub_1002799B0( uint64_t a1, uint64_t a2, void *a3, void *a4, void *a5, void *a6, uint64_t a7, uint64_t a8, void *a9, uint64_t a10, uint64_t a11)
{
  uint64_t v125 = a8;
  uint64_t v127 = a1;
  uint64_t v129 = a11;
  uint64_t v126 = a10;
  uint64_t v128 = a9;
  uint64_t v108 = type metadata accessor for UUID(0LL);
  uint64_t v106 = *(void *)(v108 - 8);
  uint64_t v17 = __chkstk_darwin(v108);
  uint64_t v107 = (char *)&v106 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v109 = (char *)&v106 - v19;
  uint64_t v20 = type metadata accessor for AccessoryCommand(0LL);
  uint64_t v122 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v123 = v21;
  uint64_t v124 = (uint64_t)&v106 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_100004AEC(&qword_1009B0670);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v106 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v111 = sub_100004AEC(&qword_1009A7A88);
  uint64_t v110 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  uint64_t v132 = (char *)&v106 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v114 = sub_100004AEC(&qword_1009A7A90);
  uint64_t v113 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  uint64_t v112 = (char *)&v106 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v117 = sub_100004AEC(&qword_1009A7A98);
  uint64_t v116 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  uint64_t v115 = (char *)&v106 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v121 = sub_100004AEC(&qword_1009A7AA0);
  uint64_t v120 = *(void *)(v121 - 8);
  __chkstk_darwin(v121);
  uint64_t v133 = (char *)&v106 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = swift_allocObject(&unk_10094CA80, 24LL, 7LL);
  uint64_t v119 = v29;
  *(void *)(v29 + swift_weakDestroy(v0 + 16) = 0LL;
  uint64_t v118 = v29 + 16;
  v138[0] = a3;
  v138[1] = a4;
  v138[2] = a5;
  v138[3] = a6;
  char v139 = 0;
  char v140 = 0;
  sub_1000F40B4((uint64_t)a3, (uint64_t)a4, (uint64_t)a5, (unint64_t)a6, sub_10001736C);
  uint64_t v130 = a7;
  id v30 = (void *)sub_1002833B8((uint64_t)v138, a7);
  sub_100015794((uint64_t)v138, &qword_1009A7998);
  v138[0] = v30;
  uint64_t v131 = a2;
  id v137 = *(id *)(a2 + 72);
  id v31 = v137;
  uint64_t v32 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
  unint64_t v33 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL);
  v33(v24, 1LL, 1LL, v32);
  id v34 = v31;
  uint64_t v35 = sub_100004AEC(&qword_1009A7988);
  unint64_t v36 = sub_100004AB0();
  uint64_t v37 = sub_1000372EC(&qword_1009A7A08, &qword_1009A7988, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  uint64_t v38 = sub_100007864( (unint64_t *)&qword_1009B06C0,  (uint64_t (*)(uint64_t))sub_100004AB0,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(&v137, v24, v35, v36, v37, v38);
  sub_100015794((uint64_t)v24, &qword_1009B0670);

  swift_release();
  if (qword_10099B228 != -1) {
    swift_once(&qword_10099B228, sub_10026779C);
  }
  uint64_t v39 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0LL);
  uint64_t v40 = sub_10000A720(v39, (uint64_t)qword_1009A7418);
  v138[0] = v34;
  v33(v24, 1LL, 1LL, v32);
  uint64_t v41 = sub_1000372EC( &qword_1009A7AA8,  &qword_1009A7A88,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  id v42 = v34;
  uint64_t v43 = v112;
  uint64_t v44 = v40;
  uint64_t v45 = v111;
  uint64_t v46 = v132;
  Publisher.timeout<A>(_:scheduler:options:customError:)(v44, v138, v24, sub_10028B5FC, 0LL, v111, v36, v41, v38);
  sub_100015794((uint64_t)v24, &qword_1009B0670);

  (*(void (**)(char *, uint64_t))(v110 + 8))(v46, v45);
  uint64_t v47 = sub_100004AEC(&qword_1009A7950);
  uint64_t v48 = sub_1000372EC( &qword_1009A7AB0,  &qword_1009A7A90,  (uint64_t)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  uint64_t v49 = v115;
  uint64_t v50 = v114;
  Publisher.map<A>(_:)(sub_10028B658, 0LL, v114, v47, v48);
  (*(void (**)(char *, uint64_t))(v113 + 8))(v43, v50);
  uint64_t v51 = sub_100004AEC(&qword_1009A7A20);
  uint64_t v52 = sub_1000372EC( &qword_1009A7AB8,  &qword_1009A7A98,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  uint64_t v53 = sub_1000372EC(&qword_1009A7A30, &qword_1009A7A20, (uint64_t)&protocol conformance descriptor for Just<A>);
  uint64_t v54 = v117;
  Publisher.catch<A>(_:)(sub_10027A4CC, 0LL, v117, v51, v52, v53);
  (*(void (**)(char *, uint64_t))(v116 + 8))(v49, v54);
  uint64_t v55 = swift_allocObject(&unk_10094C558, 24LL, 7LL);
  swift_weakInit(v55 + 16, v131);
  uint64_t v56 = v124;
  sub_10001DC4C(v125, v124, type metadata accessor for AccessoryCommand);
  uint64_t v57 = *(unsigned __int8 *)(v122 + 80);
  uint64_t v58 = (v57 + 32) & ~v57;
  unint64_t v59 = (v123 + v58 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v60 = (v59 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v61 = (v60 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v62 = (v61 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v63 = swift_allocObject(&unk_10094CB70, v62 + 16, v57 | 7);
  *(void *)(v63 + swift_weakDestroy(v0 + 16) = v55;
  *(void *)(v63 + 24) = v127;
  sub_10002218C(v56, v63 + v58, type metadata accessor for AccessoryCommand);
  uint64_t v64 = v119;
  *(void *)(v63 + v59) = v119;
  uint64_t v65 = v128;
  *(void *)(v63 + v60) = v128;
  *(void *)(v63 + v61) = v130;
  unint64_t v66 = (void *)(v63 + v62);
  uint64_t v67 = v129;
  *unint64_t v66 = v126;
  v66[1] = v67;
  uint64_t v68 = sub_1000372EC( &qword_1009A7AC0,  &qword_1009A7AA0,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
  swift_retain();
  swift_retain();
  uint64_t v69 = v65;
  swift_retain();
  swift_retain();
  uint64_t v70 = v121;
  uint64_t v71 = v133;
  uint64_t v72 = Publisher<>.sink(receiveValue:)(sub_10028A69C, v63, v121, v68);
  swift_release();
  (*(void (**)(char *, uint64_t))(v120 + 8))(v71, v70);
  swift_beginAccess(v118, v138, 1LL, 0LL);
  *(void *)(v64 + swift_weakDestroy(v0 + 16) = v72;
  swift_release();
  uint64_t v73 = *(void *)(v64 + 16);
  if (v73)
  {
    uint64_t v74 = *(void **)&v69[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
    swift_retain();
    id v75 = [v74 identifier];
    uint64_t v76 = (uint64_t)v109;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v75);

    uint64_t v77 = v131;
    uint64_t v78 = (uint64_t *)(v131 + 104);
    __n128 v79 = swift_beginAccess(v131 + 104, &v137, 0LL, 0LL);
    uint64_t v80 = *(void *)(v77 + 104);
    if (*(void *)(v80 + 16))
    {
      swift_bridgeObjectRetain(v80);
      unint64_t v81 = sub_10030D124(v76);
      if ((v82 & 1) != 0)
      {
        uint64_t v83 = *(void *)(*(void *)(v80 + 56) + 8 * v81);
        swift_bridgeObjectRetain(v83);
        swift_bridgeObjectRelease();
        uint64_t v84 = *(void (**)(uint64_t, uint64_t))(v106 + 8);
        uint64_t v85 = v76;
        uint64_t v86 = v108;
        v84(v85, v108);
        uint64_t v141 = v83;
        swift_retain();
        sub_1000C0570(v135, v73);
        swift_release();
        id v87 = [v74 identifier];
        uint64_t v88 = (uint64_t)v107;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v87);

        uint64_t v89 = v141;
        swift_beginAccess(v78, v135, 33LL, 0LL);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v78);
        uint64_t v134 = *v78;
        uint64_t *v78 = 0x8000000000000000LL;
        sub_10005E010(v89, v88, isUniquelyReferenced_nonNull_native);
        uint64_t *v78 = v134;
        swift_bridgeObjectRelease();
        v84(v88, v86);
LABEL_14:
        swift_endAccess(v135);
        swift_release();
        return swift_release();
      }

      swift_bridgeObjectRelease();
    }

    uint64_t v96 = *(void (**)(uint64_t, uint64_t, __n128))(v106 + 8);
    uint64_t v97 = v108;
    v96(v76, v108, v79);
    id v98 = [v74 identifier];
    uint64_t v99 = (uint64_t)v107;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v98);

    uint64_t v100 = sub_100004AEC(&qword_1009B0610);
    uint64_t inited = swift_initStackObject(v100, v136);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007F8BB0;
    *(void *)(inited + 32) = v73;
    v135[0] = inited;
    specialized Array._endMutation()(inited);
    uint64_t v102 = v135[0];
    swift_retain();
    uint64_t v103 = sub_1006F195C(v102);
    swift_bridgeObjectRelease();
    swift_beginAccess(v78, v135, 33LL, 0LL);
    char v104 = swift_isUniquelyReferenced_nonNull_native(*v78);
    uint64_t v141 = *v78;
    uint64_t *v78 = 0x8000000000000000LL;
    sub_10005E010(v103, v99, v104);
    uint64_t *v78 = v141;
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v96)(v99, v97);
    goto LABEL_14;
  }

  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v91 = type metadata accessor for Logger(0LL);
  uint64_t v92 = sub_10000A720(v91, (uint64_t)qword_100A2A470);
  uint64_t v93 = (os_log_s *)Logger.logObject.getter(v92);
  os_log_type_t v94 = static os_log_type_t.error.getter(v93);
  if (os_log_type_enabled(v93, v94))
  {
    uint64_t v95 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v95 = 0;
    _os_log_impl((void *)&_mh_execute_header, v93, v94, "No command cancellation", v95, 2u);
    swift_slowDealloc(v95, -1LL, -1LL);
  }

  return swift_release();
}

uint64_t sub_10027A4CC(void *a1)
{
  return sub_10024FF84(a1, &qword_1009A7950);
}

uint64_t *sub_10027A4D8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, void *a6, void (*a7)(uint64_t, uint64_t), void (*a8)(void), uint64_t a9)
{
  uint64_t v44 = a1;
  uint64_t v15 = sub_100004AEC(&qword_1009A78B8);
  __chkstk_darwin(v15);
  uint64_t v17 = (uint64_t *)((char *)&v38 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  a2 += 16LL;
  swift_beginAccess(a2, v49, 0LL, 0LL);
  uint64_t result = (uint64_t *)swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v19 = result;
    Transaction.capture()();
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    sub_10000A720(v20, (uint64_t)qword_100A2A470);
    uint64_t v21 = sub_10001581C(v44, (uint64_t)v48, &qword_1009A7950);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v43 = a8;
      uint64_t v24 = swift_slowAlloc(12LL, -1LL);
      uint64_t v41 = a7;
      uint64_t v25 = (uint8_t *)v24;
      uint64_t v26 = swift_slowAlloc(32LL, -1LL);
      uint64_t v42 = a9;
      uint64_t v27 = v26;
      uint64_t v47 = v26;
      uint64_t v40 = v19;
      *(_DWORD *)uint64_t v25 = 136446210;
      uint64_t v39 = a5;
      sub_10001581C((uint64_t)v48, (uint64_t)&v45, &qword_1009A7950);
      uint64_t v28 = sub_100004AEC(&qword_1009A7950);
      uint64_t v29 = String.init<A>(describing:)(&v45, v28);
      uint64_t v45 = sub_1003F11D4(v29, v30, &v47);
      a5 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v45, &v46, v25 + 4, v25 + 12);
      a8 = v43;
      swift_bridgeObjectRelease();
      sub_100015794((uint64_t)v48, &qword_1009A7950);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "commandSubscription result: %{public}s", v25, 0xCu);
      swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1LL, -1LL);
      id v31 = v25;
      a7 = v41;
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    else
    {
      sub_100015794((uint64_t)v48, &qword_1009A7950);
    }

    sub_10001581C(v44, (uint64_t)v48, &qword_1009A7950);
    if ((v48[41] & 1) != 0)
    {
      sub_100254338((uint64_t)v48, (uint64_t)&v45);
      swift_beginAccess(a5 + 16, v48, 0LL, 0LL);
      uint64_t v32 = *(void **)(a5 + 16);
      swift_retain();
      sub_100267D08(a4, v32, a6, a7);
      swift_release();
      unint64_t v33 = sub_100122CD4();
      uint64_t v34 = swift_allocError(&type metadata for CentralManager.Error, v33, 0LL, 0LL);
      sub_100254374(&v45, v35);
      *uint64_t v17 = v34;
      uint64_t v36 = type metadata accessor for OwnerCommandManager.Error(0LL);
      swift_storeEnumTagMultiPayload(v17, v36, 1LL);
      (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v36 - 8) + 56LL))(v17, 0LL, 1LL, v36);
      a8(v17);
      swift_release();
      sub_100015794((uint64_t)v17, &qword_1009A78B8);
      return sub_1002543B0(&v45);
    }

    else
    {
      sub_100015794((uint64_t)v48, &qword_1009A7950);
      uint64_t v37 = type metadata accessor for OwnerCommandManager.Error(0LL);
      (*(void (**)(uint64_t *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56LL))(v17, 1LL, 1LL, v37);
      a8(v17);
      swift_release();
      return (uint64_t *)sub_100015794((uint64_t)v17, &qword_1009A78B8);
    }
  }

  return result;
}

uint64_t sub_10027A8C8(uint64_t a1, uint64_t a2)
{
  uint64_t v53 = a1;
  uint64_t v3 = *v2;
  uint64_t v50 = a2;
  uint64_t v51 = v3;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v52 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v45 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v45 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v45 - v14;
  uint64_t v16 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v17 = *(char **)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v45 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = (void *)v2[9];
  *(void *)uint64_t v19 = v20;
  (*((void (**)(char *, void, uint64_t))v17 + 13))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  id v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  (*((void (**)(char *, uint64_t))v17 + 1))(v19, v16);
  if ((v20 & 1) != 0)
  {
    uint64_t v49 = v2;
    uint64_t v22 = type metadata accessor for AccessoryCommand(0LL);
    uint64_t v23 = v53;
    uint64_t v24 = v53 + *(int *)(v22 + 20);
    uint64_t v47 = v5;
    uint64_t v19 = *(char **)(v5 + 16);
    ((void (*)(char *, uint64_t, uint64_t))v19)(v15, v24, v4);
    ((void (*)(char *, uint64_t, uint64_t))v19)(v13, v23, v4);
    uint64_t v17 = v13;
    if (qword_10099B220 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B220, sub_1002673AC);
LABEL_3:
  uint64_t v25 = type metadata accessor for Logger(0LL);
  sub_10000A720(v25, (uint64_t)qword_100A2A470);
  uint64_t v48 = v15;
  ((void (*)(char *, char *, uint64_t))v19)(v10, v15, v4);
  uint64_t v26 = v52;
  uint64_t v27 = ((uint64_t (*)(char *, char *, uint64_t))v19)(v52, v17, v4);
  uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = swift_slowAlloc(32LL, -1LL);
    uint64_t v31 = swift_slowAlloc(64LL, -1LL);
    uint64_t v45 = v31;
    *(_DWORD *)uint64_t v30 = 141558531;
    uint64_t v54 = 1752392040LL;
    v55[0] = v31;
    uint64_t v46 = v17;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v30 + 4, v30 + 12);
    *(_WORD *)(v30 + 12) = 2081;
    uint64_t v32 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter(v4, v32);
    uint64_t v54 = sub_1003F11D4(v33, v34, v55);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v30 + 14, v30 + 22);
    swift_bridgeObjectRelease();
    uint64_t v35 = *(void (**)(char *, uint64_t))(v47 + 8);
    v35(v10, v4);
    *(_WORD *)(v30 + 22) = 2082;
    uint64_t v36 = v52;
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter(v4, v32);
    uint64_t v54 = sub_1003F11D4(v37, v38, v55);
    uint64_t v17 = v46;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v30 + 24, v30 + 32);
    swift_bridgeObjectRelease();
    v35(v36, v4);
    _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "receiveData: beacon %{private,mask.hash}s Command %{public}s",  (uint8_t *)v30,  0x20u);
    uint64_t v39 = v45;
    swift_arrayDestroy(v45, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1LL, -1LL);
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  else
  {
    uint64_t v35 = *(void (**)(char *, uint64_t))(v47 + 8);
    v35(v10, v4);
    v35(v26, v4);
  }

  uint64_t v40 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v40);
  uint64_t v41 = v48;
  uint64_t v42 = v50;
  *(&v45 - 6) = (uint64_t)v49;
  *(&v45 - 5) = v42;
  *(&v45 - 4) = v53;
  *(&v45 - 3) = (uint64_t)v41;
  uint64_t v43 = v51;
  *(&v45 - 2) = (uint64_t)v17;
  *(&v45 - 1) = v43;
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.OwnerCommandManager.receiveData",  61LL,  2LL,  sub_10028A21C,  &v45 - 8);
  v35(v17, v4);
  return ((uint64_t (*)(char *, uint64_t))v35)(v41, v4);
}

uint64_t sub_10027AD38(uint64_t a1, uint64_t a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v147 = a6;
  uint64_t v146 = a5;
  uint64_t v136 = a4;
  uint64_t v149 = a1;
  uint64_t v155 = type metadata accessor for UUID(0LL);
  uint64_t v154 = *(void *)(v155 - 8);
  uint64_t v9 = __chkstk_darwin(v155);
  uint64_t v122 = (char *)&v122 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v153 = (char *)&v122 - v12;
  uint64_t v148 = v13;
  __chkstk_darwin(v11);
  uint64_t v157 = (char *)&v122 - v14;
  uint64_t v15 = type metadata accessor for AccessoryCommand(0LL);
  uint64_t v134 = *(void *)(v15 - 8);
  uint64_t v152 = *(void *)(v134 + 64);
  __chkstk_darwin(v15);
  uint64_t v156 = (uint64_t)&v122 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC(&qword_1009B0670);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v122 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v130 = sub_100004AEC(&qword_1009A79B0);
  uint64_t v131 = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  id v21 = (char *)&v122 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v133 = sub_100004AEC(&qword_1009A79B8);
  uint64_t v135 = *(void *)(v133 - 8);
  __chkstk_darwin(v133);
  uint64_t v126 = (char *)&v122 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v138 = sub_100004AEC(&qword_1009A7A40);
  uint64_t v137 = *(void *)(v138 - 8);
  __chkstk_darwin(v138);
  uint64_t v132 = (char *)&v122 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v141 = sub_100004AEC(&qword_1009A7A48);
  uint64_t v140 = *(void *)(v141 - 8);
  __chkstk_darwin(v141);
  char v139 = (char *)&v122 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v145 = sub_100004AEC(&qword_1009A7A50);
  uint64_t v144 = *(void *)(v145 - 8);
  __chkstk_darwin(v145);
  uint64_t v151 = (char *)&v122 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = swift_allocObject(&unk_10094CA80, 24LL, 7LL);
  uint64_t v143 = v26;
  *(void *)(v26 + swift_weakDestroy(v0 + 16) = 0LL;
  uint64_t v142 = v26 + 16;
  uint64_t v159 = *(void *)(*(void *)(a2 + 56) + 24LL);
  uint64_t v160 = a3;
  uint64_t v150 = a3;
  uint64_t v27 = sub_100004AEC((uint64_t *)&unk_1009A6C90);
  Lock.callAsFunction<A>(_:)(sub_10028A23C, v158, v27);
  uint64_t v123 = v6;
  id v164 = *(id *)(a2 + 72);
  id v28 = v164;
  uint64_t v29 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
  uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL);
  uint64_t v128 = v29;
  uint64_t v127 = v30;
  ((void (*)(char *, uint64_t, uint64_t))v30)(v19, 1LL, 1LL);
  unint64_t v31 = sub_100004AB0();
  uint64_t v32 = sub_1000372EC( &qword_1009A6CA0,  (uint64_t *)&unk_1009A6C90,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v33 = sub_100007864( (unint64_t *)&qword_1009B06C0,  (uint64_t (*)(uint64_t))sub_100004AB0,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  id v124 = v28;
  unint64_t v129 = v31;
  uint64_t v125 = v33;
  Publisher.receive<A>(on:options:)(&v164, v19, v27, v31, v32, v33);
  sub_100015794((uint64_t)v19, &qword_1009B0670);

  swift_release();
  uint64_t v34 = swift_retain();
  uint64_t v35 = static Subscribers.Demand.unlimited.getter(v34);
  uint64_t v36 = sub_100004AEC(&qword_1009A79A8);
  uint64_t v37 = sub_100004AEC(&qword_1009A7958);
  uint64_t v38 = sub_1000372EC( &qword_1009A79E8,  &qword_1009A79B0,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  uint64_t v39 = sub_1000372EC(&qword_1009A79F0, &qword_1009A7958, (uint64_t)&protocol conformance descriptor for Future<A, B>);
  uint64_t v40 = v126;
  uint64_t v41 = v130;
  uint64_t v42 = v37;
  uint64_t v43 = v136;
  Publisher.flatMap<A, B>(maxPublishers:_:)(v35, sub_10028A254, a2, v130, v36, v42, v38, v39);
  swift_release();
  (*(void (**)(char *, uint64_t))(v131 + 8))(v21, v41);
  uint64_t v44 = v156;
  sub_10001DC4C(v43, v156, type metadata accessor for AccessoryCommand);
  uint64_t v45 = *(unsigned __int8 *)(v134 + 80);
  uint64_t v134 = ~v45;
  uint64_t v46 = (v45 + 24) & ~v45;
  uint64_t v47 = swift_allocObject(&unk_10094CB20, v46 + v152, v45 | 7);
  *(void *)(v47 + swift_weakDestroy(v0 + 16) = a2;
  sub_10002218C(v44, v47 + v46, type metadata accessor for AccessoryCommand);
  swift_retain();
  uint64_t v48 = sub_100004AEC(&qword_1009A7A58);
  uint64_t v49 = sub_1000372EC( &qword_1009A79F8,  &qword_1009A79B8,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  uint64_t v50 = v132;
  uint64_t v51 = v133;
  Publisher.map<A>(_:)(sub_10028A330, v47, v133, v48, v49);
  swift_release();
  (*(void (**)(char *, uint64_t))(v135 + 8))(v40, v51);
  if (qword_10099B228 != -1) {
    swift_once(&qword_10099B228, sub_10026779C);
  }
  uint64_t v52 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0LL);
  uint64_t v53 = sub_10000A720(v52, (uint64_t)qword_1009A7418);
  uint64_t v54 = v124;
  id v165 = v124;
  v127(v19, 1LL, 1LL, v128);
  uint64_t v55 = sub_1000372EC( &qword_1009A7A60,  &qword_1009A7A40,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  id v56 = v54;
  uint64_t v57 = v139;
  uint64_t v58 = v138;
  Publisher.timeout<A>(_:scheduler:options:customError:)(v53, &v165, v19, sub_10027BA6C, 0LL, v138, v129, v55, v125);
  sub_100015794((uint64_t)v19, &qword_1009B0670);

  (*(void (**)(char *, uint64_t))(v137 + 8))(v50, v58);
  uint64_t v59 = sub_100004AEC(&qword_1009A7A68);
  uint64_t v60 = sub_1000372EC( &qword_1009A7A70,  &qword_1009A7A48,  (uint64_t)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  uint64_t v61 = sub_1000372EC(&qword_1009A7A78, &qword_1009A7A68, (uint64_t)&protocol conformance descriptor for Just<A>);
  uint64_t v62 = v141;
  Publisher.catch<A>(_:)(sub_10027BA8C, 0LL, v141, v59, v60, v61);
  (*(void (**)(char *, uint64_t))(v140 + 8))(v57, v62);
  uint64_t v63 = swift_allocObject(&unk_10094C558, 24LL, 7LL);
  swift_weakInit(v63 + 16, a2);
  uint64_t v64 = v154;
  uint64_t v65 = *(void (**)(char *, uint64_t, uint64_t))(v154 + 16);
  uint64_t v66 = v155;
  v65(v157, v146, v155);
  v65(v153, v147, v66);
  sub_10001DC4C(v43, v156, type metadata accessor for AccessoryCommand);
  uint64_t v67 = *(unsigned __int8 *)(v64 + 80);
  uint64_t v68 = (v67 + 32) & ~v67;
  uint64_t v147 = a2;
  uint64_t v69 = (v148 + v67 + v68) & ~v67;
  uint64_t v70 = (v148 + v45 + v69) & v134;
  uint64_t v71 = v45 | v67 | 7;
  unint64_t v72 = (v152 + v70 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v73 = (v72 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v74 = swift_allocObject(&unk_10094CB48, v73 + 8, v71);
  uint64_t v75 = v149;
  *(void *)(v74 + swift_weakDestroy(v0 + 16) = v63;
  *(void *)(v74 + 24) = v75;
  uint64_t v76 = v74 + v68;
  uint64_t v77 = *(void (**)(uint64_t, char *, uint64_t))(v64 + 32);
  uint64_t v78 = v155;
  v77(v76, v157, v155);
  uint64_t v79 = v74 + v69;
  uint64_t v80 = v78;
  v77(v79, v153, v78);
  sub_10002218C(v156, v74 + v70, type metadata accessor for AccessoryCommand);
  uint64_t v81 = v143;
  *(void *)(v74 + v72) = v143;
  char v82 = v150;
  *(void *)(v74 + v73) = v150;
  uint64_t v83 = sub_1000372EC( &qword_1009A7A80,  &qword_1009A7A50,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
  swift_retain();
  swift_retain();
  uint64_t v84 = v82;
  uint64_t v85 = v145;
  uint64_t v86 = v151;
  uint64_t v87 = Publisher<>.sink(receiveValue:)(sub_10028A4A4, v74, v145, v83);
  swift_release();
  (*(void (**)(char *, uint64_t))(v144 + 8))(v86, v85);
  swift_beginAccess(v142, &v165, 1LL, 0LL);
  *(void *)(v81 + swift_weakDestroy(v0 + 16) = v87;
  swift_release();
  uint64_t v88 = *(void *)(v81 + 16);
  uint64_t v89 = (uint64_t)v157;
  uint64_t v90 = v154;
  if (v88)
  {
    uint64_t v91 = v80;
    uint64_t v92 = *(void **)&v84[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
    swift_retain();
    id v93 = [v92 identifier];
    uint64_t v94 = (uint64_t)v122;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v93);

    uint64_t v95 = v147;
    uint64_t v96 = (uint64_t *)(v147 + 88);
    __n128 v97 = swift_beginAccess(v147 + 88, &v164, 0LL, 0LL);
    uint64_t v98 = *(void *)(v95 + 88);
    if (*(void *)(v98 + 16))
    {
      swift_bridgeObjectRetain(v98);
      unint64_t v99 = sub_10030D124(v94);
      if ((v100 & 1) != 0)
      {
        uint64_t v101 = v94;
        uint64_t v102 = v90;
        uint64_t v103 = *(void *)(*(void *)(v98 + 56) + 8 * v99);
        swift_bridgeObjectRetain(v103);
        swift_bridgeObjectRelease();
        char v104 = *(void (**)(uint64_t, uint64_t))(v102 + 8);
        v104(v101, v91);
        uint64_t v166 = v103;
        swift_retain();
        sub_1000C0570(&v162, v88);
        swift_release();
        id v105 = [v92 identifier];
        uint64_t v106 = (uint64_t)v157;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v105);

        uint64_t v107 = v166;
        swift_beginAccess(v96, &v162, 33LL, 0LL);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v96);
        uint64_t v161 = *v96;
        *uint64_t v96 = 0x8000000000000000LL;
        sub_10005E010(v107, v106, isUniquelyReferenced_nonNull_native);
        *uint64_t v96 = v161;
        swift_bridgeObjectRelease();
        v104(v106, v91);
LABEL_14:
        swift_endAccess(&v162);
        swift_release();
        return swift_release();
      }

      swift_bridgeObjectRelease();
    }

    uint64_t v114 = *(void (**)(uint64_t, uint64_t, __n128))(v90 + 8);
    v114(v94, v91, v97);
    id v115 = [v92 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v115);

    uint64_t v116 = sub_100004AEC(&qword_1009B0610);
    uint64_t inited = swift_initStackObject(v116, v163);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007F8BB0;
    *(void *)(inited + 32) = v88;
    uint64_t v162 = inited;
    specialized Array._endMutation()(inited);
    uint64_t v118 = v162;
    swift_retain();
    uint64_t v119 = sub_1006F195C(v118);
    swift_bridgeObjectRelease();
    swift_beginAccess(v96, &v162, 33LL, 0LL);
    char v120 = swift_isUniquelyReferenced_nonNull_native(*v96);
    uint64_t v166 = *v96;
    *uint64_t v96 = 0x8000000000000000LL;
    sub_10005E010(v119, v89, v120);
    *uint64_t v96 = v166;
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v114)(v89, v91);
    goto LABEL_14;
  }

  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v109 = type metadata accessor for Logger(0LL);
  uint64_t v110 = sub_10000A720(v109, (uint64_t)qword_100A2A470);
  uint64_t v111 = (os_log_s *)Logger.logObject.getter(v110);
  os_log_type_t v112 = static os_log_type_t.error.getter(v111);
  if (os_log_type_enabled(v111, v112))
  {
    uint64_t v113 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v113 = 0;
    _os_log_impl((void *)&_mh_execute_header, v111, v112, "No notify cancellation", v113, 2u);
    swift_slowDealloc(v113, -1LL, -1LL);
  }

  return swift_release();
}

double sub_10027BA6C@<D0>(uint64_t a1@<X8>)
{
  *(void *)a1 = 10LL;
  double result = 0.0;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_BYTE *)(a1 + 40) = 11;
  return result;
}

uint64_t sub_10027BA8C(void *a1)
{
  return sub_10024FF84(a1, &qword_1009A7A58);
}

uint64_t *sub_10027BA98( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, os_log_s *a5, uint64_t a6, uint64_t a7, void *a8)
{
  uint64_t v92 = a8;
  uint64_t v93 = a7;
  uint64_t v94 = a4;
  uint64_t v95 = (void **)a1;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v84 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v84 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  id v21 = (char *)&v84 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v84 - v22;
  a2 += 16LL;
  swift_beginAccess(a2, v106, 0LL, 0LL);
  double result = (uint64_t *)swift_weakLoadStrong(a2);
  if (result)
  {
    os_log_t v89 = a5;
    uint64_t v90 = result;
    Transaction.capture()();
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    uint64_t v26 = sub_10000A720(v25, (uint64_t)qword_100A2A470);
    uint64_t v27 = sub_10001581C((uint64_t)v95, (uint64_t)&v102, &qword_1009A7A58);
    uint64_t v88 = v26;
    id v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.default.getter(v28);
    BOOL v30 = os_log_type_enabled(v28, v29);
    uint64_t v91 = a6;
    uint64_t v86 = v23;
    if (v30)
    {
      uint64_t v87 = v15;
      uint64_t v31 = swift_slowAlloc(12LL, -1LL);
      uint64_t v85 = v21;
      uint64_t v32 = (uint8_t *)v31;
      uint64_t v33 = swift_slowAlloc(32LL, -1LL);
      uint64_t v84 = v18;
      uint64_t v34 = v33;
      uint64_t v100 = v33;
      *(_DWORD *)uint64_t v32 = 136446210;
      sub_10001581C((uint64_t)&v102, (uint64_t)&v96, &qword_1009A7A58);
      uint64_t v35 = sub_100004AEC(&qword_1009A7A58);
      uint64_t v36 = String.init<A>(describing:)(&v96, v35);
      uint64_t v96 = sub_1003F11D4(v36, v37, &v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v32 + 4, v32 + 12);
      uint64_t v15 = v87;
      swift_bridgeObjectRelease();
      sub_100015794((uint64_t)&v102, &qword_1009A7A58);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "receiveData result: %{public}s", v32, 0xCu);
      swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v38 = v34;
      uint64_t v18 = v84;
      swift_slowDealloc(v38, -1LL, -1LL);
      uint64_t v39 = v32;
      id v21 = v85;
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    else
    {
      sub_100015794((uint64_t)&v102, &qword_1009A7A58);
    }

    os_log_t v40 = v89;
    uint64_t v41 = (void **)(v93 + 16);
    sub_10001581C((uint64_t)v95, (uint64_t)&v102, &qword_1009A7A58);
    if ((v105 & 1) != 0)
    {
      sub_100254338((uint64_t)&v102, (uint64_t)&v96);
      sub_100254374(&v96, (uint64_t)&v100);
      uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
      v42(v18, v94, v11);
      uint64_t v43 = ((uint64_t (*)(char *, os_log_t, uint64_t))v42)(v15, v40, v11);
      uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
      os_log_type_t v45 = static os_log_type_t.error.getter(v44);
      int v46 = v45;
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v47 = swift_slowAlloc(42LL, -1LL);
        uint64_t v48 = swift_slowAlloc(96LL, -1LL);
        uint64_t v95 = v41;
        uint64_t v49 = v48;
        uint64_t v99 = v48;
        *(_DWORD *)uint64_t v47 = 136446979;
        uint64_t v87 = v15;
        LODWORD(v94) = v46;
        sub_1007C9800();
        uint64_t v98 = sub_1003F11D4(v50, v51, &v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v47 + 4, v47 + 12);
        swift_bridgeObjectRelease();
        sub_1002543B0(&v100);
        *(_WORD *)(v47 + 12) = 2160;
        uint64_t v98 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v47 + 14, v47 + 22);
        *(_WORD *)(v47 + 22) = 2081;
        uint64_t v52 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter(v11, v52);
        uint64_t v98 = sub_1003F11D4(v53, v54, &v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v47 + 24, v47 + 32);
        swift_bridgeObjectRelease();
        uint64_t v55 = *(void (**)(char *, uint64_t))(v12 + 8);
        v55(v18, v11);
        *(_WORD *)(v47 + 32) = 2082;
        id v56 = v87;
        uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter(v11, v52);
        uint64_t v98 = sub_1003F11D4(v57, v58, &v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v98, &v99, v47 + 34, v47 + 42);
        swift_bridgeObjectRelease();
        v55(v56, v11);
        _os_log_impl( (void *)&_mh_execute_header,  v44,  (os_log_type_t)v94,  "receiveData error %{public}s.\nBeacon %{private,mask.hash}s Command %{public}s",  (uint8_t *)v47,  0x2Au);
        swift_arrayDestroy(v49, 3LL, (char *)&type metadata for Any + 8);
        uint64_t v59 = v49;
        uint64_t v41 = v95;
        swift_slowDealloc(v59, -1LL, -1LL);
        swift_slowDealloc(v47, -1LL, -1LL);
      }

      else
      {
        sub_1002543B0(&v100);
        uint64_t v78 = *(void (**)(char *, uint64_t))(v12 + 8);
        v78(v18, v11);
        v78(v15, v11);
      }

      uint64_t v79 = v91;
      swift_beginAccess(v41, &v100, 0LL, 0LL);
      uint64_t v80 = *v41;
      swift_retain();
      sub_100267D08(v79, v80, v92, 0LL);
      swift_release();
      swift_release();
      return sub_1002543B0(&v96);
    }

    else
    {
      int v60 = v104;
      sub_10028A548(v102, v103);
      uint64_t v61 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
      uint64_t v62 = v86;
      v61(v86, v94, v11);
      uint64_t v63 = ((uint64_t (*)(char *, os_log_t, uint64_t))v61)(v21, v40, v11);
      uint64_t v64 = (os_log_s *)Logger.logObject.getter(v63);
      os_log_type_t v65 = static os_log_type_t.default.getter(v64);
      int v66 = v65;
      if (os_log_type_enabled(v64, v65))
      {
        uint64_t v67 = swift_slowAlloc(38LL, -1LL);
        uint64_t v94 = swift_slowAlloc(64LL, -1LL);
        uint64_t v96 = v94;
        *(_DWORD *)uint64_t v67 = 67109891;
        LODWORD(v100) = v60;
        LODWORD(v93) = v66;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, (char *)&v100 + 4, v67 + 4, v67 + 8);
        *(_WORD *)(v67 + 8) = 2160;
        uint64_t v100 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v67 + 10, v67 + 18);
        *(_WORD *)(v67 + 18) = 2081;
        LODWORD(v95) = v60;
        uint64_t v68 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        os_log_t v89 = v64;
        uint64_t v69 = v21;
        uint64_t v70 = v68;
        uint64_t v71 = dispatch thunk of CustomStringConvertible.description.getter(v11, v68);
        uint64_t v100 = sub_1003F11D4(v71, v72, &v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v67 + 20, v67 + 28);
        swift_bridgeObjectRelease();
        unint64_t v73 = *(void (**)(char *, uint64_t))(v12 + 8);
        v73(v62, v11);
        *(_WORD *)(v67 + 28) = 2082;
        uint64_t v74 = dispatch thunk of CustomStringConvertible.description.getter(v11, v70);
        uint64_t v100 = sub_1003F11D4(v74, v75, &v96);
        int v60 = (int)v95;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v67 + 30, v67 + 38);
        swift_bridgeObjectRelease();
        v73(v69, v11);
        os_log_t v76 = v89;
        _os_log_impl( (void *)&_mh_execute_header,  v89,  (os_log_type_t)v93,  "receiveData success complete? %{BOOL}d. Beacon %{private,mask.hash}s Command %{public}s.",  (uint8_t *)v67,  0x26u);
        uint64_t v77 = v94;
        swift_arrayDestroy(v94, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v77, -1LL, -1LL);
        swift_slowDealloc(v67, -1LL, -1LL);
      }

      else
      {
        uint64_t v81 = *(void (**)(char *, uint64_t))(v12 + 8);
        v81(v62, v11);
        v81(v21, v11);
      }

      uint64_t v82 = v91;
      if (v60)
      {
        swift_beginAccess(v41, &v96, 0LL, 0LL);
        uint64_t v83 = *v41;
        swift_retain();
        sub_100267D08(v82, v83, v92, 0LL);
        swift_release();
        swift_release();
        swift_beginAccess(v41, &v100, 1LL, 0LL);
        *uint64_t v41 = 0LL;
      }

      return (uint64_t *)swift_release();
    }
  }

  return result;
}

uint64_t sub_10027C3D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v27 = a2;
  uint64_t v5 = *v3;
  uint64_t v25 = a3;
  uint64_t v26 = v5;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v25 - v11;
  uint64_t v13 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (uint64_t *)((char *)&v25 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v17 = (void *)v3[9];
  *uint64_t v16 = v17;
  (*(void (**)(void *, void, uint64_t))(v14 + 104))(v16, enum case for DispatchPredicate.onQueue(_:), v13);
  id v18 = v17;
  LOBYTE(v17) = _dispatchPreconditionTest(_:)(v16);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v14 + 8))(v16, v13);
  if ((v17 & 1) != 0)
  {
    uint64_t v20 = type metadata accessor for AccessoryCommand(0LL);
    id v21 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
    v21(v12, a1 + *(int *)(v20 + 20), v6);
    v21(v10, a1, v6);
    uint64_t v22 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v22);
    *(&v25 - 8) = v25;
    *(&v25 - 7) = (uint64_t)v3;
    *(&v25 - 6) = a1;
    *(&v25 - 5) = (uint64_t)v12;
    uint64_t v23 = v27;
    *(&v25 - 4) = (uint64_t)v10;
    *(&v25 - 3) = v23;
    *(&v25 - 2) = v26;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.OwnerCommandManager.didNotify",  59LL,  2LL,  sub_100289F40,  &v25 - 10);
    uint64_t v24 = *(void (**)(char *, uint64_t))(v7 + 8);
    v24(v10, v6);
    return ((uint64_t (*)(char *, uint64_t))v24)(v12, v6);
  }

  else
  {
    __break(1u);
  }

  return result;
}

void sub_10027C5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  unint64_t v182 = a7;
  uint64_t v180 = a6;
  uint64_t v179 = a5;
  uint64_t v190 = a4;
  uint64_t v184 = a3;
  uint64_t v193 = a1;
  uint64_t v183 = type metadata accessor for UUID(0LL);
  uint64_t v185 = *(void *)(v183 - 8);
  uint64_t v8 = __chkstk_darwin(v183);
  uint64_t v161 = (char *)&v150 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v191 = (char *)&v150 - v11;
  uint64_t v181 = v12;
  __chkstk_darwin(v10);
  uint64_t v194 = (char *)&v150 - v13;
  uint64_t v14 = type metadata accessor for AccessoryCommand(0LL);
  uint64_t v166 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v189 = v15;
  uint64_t v187 = (uint64_t)&v150 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100004AEC(&qword_1009B0670);
  __chkstk_darwin(v16);
  unint64_t v188 = (char *)&v150 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v165 = sub_100004AEC(&qword_1009A79B0);
  uint64_t v164 = *(void *)(v165 - 8);
  __chkstk_darwin(v165);
  uint64_t v163 = (char *)&v150 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v169 = sub_100004AEC(&qword_1009A79B8);
  uint64_t v168 = *(void *)(v169 - 8);
  __chkstk_darwin(v169);
  uint64_t v167 = (char *)&v150 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v172 = sub_100004AEC(&qword_1009A79C0);
  uint64_t v171 = *(void *)(v172 - 8);
  __chkstk_darwin(v172);
  unint64_t v170 = (char *)&v150 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v174 = sub_100004AEC(&qword_1009A79C8);
  uint64_t v173 = *(void *)(v174 - 8);
  __chkstk_darwin(v174);
  uint64_t v186 = (char *)&v150 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v177 = sub_100004AEC(&qword_1009A79D0);
  uint64_t v176 = *(void *)(v177 - 8);
  __chkstk_darwin(v177);
  int v175 = (char *)&v150 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v178 = sub_100004AEC(&qword_1009A79D8);
  uint64_t v23 = *(void *)(v178 - 8);
  __chkstk_darwin(v178);
  uint64_t v25 = (char *)&v150 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = sub_100004AEC(&qword_1009A79E0);
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  os_log_type_t v29 = (char *)&v150 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = swift_allocObject(&unk_10094CA80, 24LL, 7LL);
  *(void *)(v30 + swift_weakDestroy(v0 + 16) = 0LL;
  uint64_t v31 = *(void *)(a2 + 16);
  uint64_t v32 = sub_100004AEC((uint64_t *)&unk_1009A6C90);
  uint64_t v192 = a2;
  unint64_t v162 = v32;
  uint64_t v33 = v195;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100289F88, a2, v31, (char *)&type metadata for () + 8, v32);
  if (!v33)
  {
    uint64_t v154 = v25;
    uint64_t v155 = v23;
    uint64_t v156 = v30 + 16;
    uint64_t v195 = v29;
    uint64_t v157 = v27;
    uint64_t v158 = v26;
    uint64_t v160 = v30;
    uint64_t v159 = 0LL;
    uint64_t v43 = v184;
    id v199 = *(id *)(v184 + 72);
    id v44 = v199;
    uint64_t v45 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
    int v46 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v45 - 8) + 56LL);
    uint64_t v47 = (uint64_t)v188;
    uint64_t v153 = v45;
    uint64_t v152 = v46;
    ((void (*)(char *, uint64_t, uint64_t))v46)(v188, 1LL, 1LL);
    unint64_t v48 = sub_100004AB0();
    uint64_t v49 = sub_1000372EC( &qword_1009A6CA0,  (uint64_t *)&unk_1009A6C90,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    uint64_t v50 = sub_100007864( (unint64_t *)&qword_1009B06C0,  (uint64_t (*)(uint64_t))sub_100004AB0,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
    id v150 = v44;
    unint64_t v51 = v163;
    unint64_t v52 = v162;
    unint64_t v162 = v48;
    uint64_t v151 = v50;
    Publisher.receive<A>(on:options:)(&v199, v47, v52, v48, v49, v50);
    sub_100015794(v47, &qword_1009B0670);

    swift_release();
    uint64_t v53 = swift_retain();
    uint64_t v54 = static Subscribers.Demand.unlimited.getter(v53);
    uint64_t v55 = sub_100004AEC(&qword_1009A79A8);
    uint64_t v56 = sub_100004AEC(&qword_1009A7958);
    uint64_t v57 = sub_1000372EC( &qword_1009A79E8,  &qword_1009A79B0,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    uint64_t v58 = sub_1000372EC(&qword_1009A79F0, &qword_1009A7958, (uint64_t)&protocol conformance descriptor for Future<A, B>);
    uint64_t v59 = v167;
    uint64_t v60 = v165;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v54, sub_100289FA0, v43, v165, v55, v56, v57, v58);
    swift_release();
    (*(void (**)(char *, uint64_t))(v164 + 8))(v51, v60);
    uint64_t v61 = v187;
    sub_10001DC4C(v190, v187, type metadata accessor for AccessoryCommand);
    uint64_t v62 = *(unsigned __int8 *)(v166 + 80);
    uint64_t v165 = ~v62;
    uint64_t v63 = (v62 + 24) & ~v62;
    uint64_t v166 = v62;
    uint64_t v64 = swift_allocObject(&unk_10094CAA8, v63 + v189, v62 | 7);
    *(void *)(v64 + swift_weakDestroy(v0 + 16) = v43;
    sub_10002218C(v61, v64 + v63, type metadata accessor for AccessoryCommand);
    swift_retain();
    uint64_t v65 = sub_100004AEC(&qword_1009A7998);
    uint64_t v66 = sub_1000372EC( &qword_1009A79F8,  &qword_1009A79B8,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    uint64_t v67 = v170;
    uint64_t v68 = v169;
    Publisher.map<A>(_:)(sub_100289FAC, v64, v169, v65, v66);
    swift_release();
    (*(void (**)(char *, uint64_t))(v168 + 8))(v59, v68);
    uint64_t v69 = swift_allocObject(&unk_10094CAD0, 32LL, 7LL);
    uint64_t v70 = v192;
    *(void *)(v69 + swift_weakDestroy(v0 + 16) = v43;
    *(void *)(v69 + 24) = v70;
    swift_retain();
    uint64_t v71 = swift_retain();
    uint64_t v72 = static Subscribers.Demand.unlimited.getter(v71);
    uint64_t v73 = sub_100004AEC(&qword_1009A7988);
    uint64_t v74 = sub_1000372EC( &qword_1009A7A00,  &qword_1009A79C0,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    uint64_t v75 = sub_1000372EC(&qword_1009A7A08, &qword_1009A7988, (uint64_t)&protocol conformance descriptor for Future<A, B>);
    uint64_t v76 = v172;
    Publisher.flatMap<A, B>(maxPublishers:_:)(v72, sub_10028A008, v69, v172, &type metadata for Bool, v73, v74, v75);
    swift_release();
    (*(void (**)(char *, uint64_t))(v171 + 8))(v67, v76);
    if (qword_10099B228 != -1) {
      swift_once(&qword_10099B228, sub_10026779C);
    }
    uint64_t v77 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0LL);
    uint64_t v78 = sub_10000A720(v77, (uint64_t)qword_1009A7418);
    uint64_t v79 = v150;
    id v201 = v150;
    uint64_t v80 = (uint64_t)v188;
    v152(v188, 1LL, 1LL, v153);
    uint64_t v81 = sub_1000372EC( &qword_1009A7A10,  &qword_1009A79C8,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
    id v82 = v79;
    uint64_t v83 = v175;
    uint64_t v84 = v78;
    uint64_t v85 = v174;
    uint64_t v86 = v81;
    uint64_t v87 = v186;
    Publisher.timeout<A>(_:scheduler:options:customError:)(v84, &v201, v80, sub_10028B5FC, 0LL, v174, v162, v86, v151);
    sub_100015794(v80, &qword_1009B0670);

    (*(void (**)(char *, uint64_t))(v173 + 8))(v87, v85);
    uint64_t v88 = sub_100004AEC(&qword_1009A7950);
    uint64_t v89 = sub_1000372EC( &qword_1009A7A18,  &qword_1009A79D0,  (uint64_t)&protocol conformance descriptor for Publishers.Timeout<A, B>);
    uint64_t v90 = v154;
    uint64_t v91 = v177;
    Publisher.map<A>(_:)(sub_10027D7E4, 0LL, v177, v88, v89);
    (*(void (**)(char *, uint64_t))(v176 + 8))(v83, v91);
    uint64_t v92 = sub_100004AEC(&qword_1009A7A20);
    uint64_t v93 = sub_1000372EC( &qword_1009A7A28,  &qword_1009A79D8,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    uint64_t v94 = sub_1000372EC(&qword_1009A7A30, &qword_1009A7A20, (uint64_t)&protocol conformance descriptor for Just<A>);
    uint64_t v95 = v178;
    Publisher.catch<A>(_:)(sub_10027A4CC, 0LL, v178, v92, v93, v94);
    (*(void (**)(char *, uint64_t))(v155 + 8))(v90, v95);
    unint64_t v188 = (char *)swift_allocObject(&unk_10094C558, 24LL, 7LL);
    swift_weakInit(v188 + 16, v43);
    uint64_t v96 = v185;
    uint64_t v97 = *(void (**)(char *, uint64_t, uint64_t))(v185 + 16);
    uint64_t v98 = v183;
    v97(v194, v179, v183);
    v97(v191, v180, v98);
    sub_10001DC4C(v190, v61, type metadata accessor for AccessoryCommand);
    uint64_t v99 = *(unsigned __int8 *)(v96 + 80);
    uint64_t v100 = (v99 + 32) & ~v99;
    uint64_t v101 = (v181 + v99 + v100) & ~v99;
    uint64_t v102 = (v181 + v166 + v101) & v165;
    unint64_t v103 = (v189 + v102 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v104 = (v103 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v105 = (v104 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v106 = swift_allocObject(&unk_10094CAF8, v105 + 8, v166 | v99 | 7);
    uint64_t v108 = v193;
    uint64_t v107 = v194;
    *(void *)(v106 + swift_weakDestroy(v0 + 16) = v188;
    *(void *)(v106 + 24) = v108;
    uint64_t v109 = *(void (**)(uint64_t, char *, uint64_t))(v96 + 32);
    v109(v106 + v100, v107, v98);
    v109(v106 + v101, v191, v98);
    sub_10002218C(v187, v106 + v102, type metadata accessor for AccessoryCommand);
    uint64_t v110 = v160;
    *(void *)(v106 + v103) = v160;
    uint64_t v111 = v182;
    *(void *)(v106 + v104) = v182;
    *(void *)(v106 + v105) = v192;
    uint64_t v112 = sub_1000372EC( &qword_1009A7A38,  &qword_1009A79E0,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
    swift_retain();
    swift_retain();
    swift_retain();
    uint64_t v113 = v111;
    uint64_t v114 = v158;
    id v115 = v195;
    uint64_t v116 = Publisher<>.sink(receiveValue:)(sub_10028A15C, v106, v158, v112);
    swift_release();
    (*(void (**)(char *, uint64_t))(v157 + 8))(v115, v114);
    swift_beginAccess(v156, &v201, 1LL, 0LL);
    *(void *)(v110 + swift_weakDestroy(v0 + 16) = v116;
    swift_release();
    uint64_t v117 = *(void *)(v110 + 16);
    if (!v117)
    {
      if (qword_10099B220 != -1) {
        swift_once(&qword_10099B220, sub_1002673AC);
      }
      uint64_t v136 = type metadata accessor for Logger(0LL);
      uint64_t v137 = sub_10000A720(v136, (uint64_t)qword_100A2A470);
      uint64_t v138 = (os_log_s *)Logger.logObject.getter(v137);
      os_log_type_t v139 = static os_log_type_t.error.getter(v138);
      if (os_log_type_enabled(v138, v139))
      {
        uint64_t v140 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v140 = 0;
        _os_log_impl((void *)&_mh_execute_header, v138, v139, "No notify cancellation", v140, 2u);
        swift_slowDealloc(v140, -1LL, -1LL);
      }

      goto LABEL_20;
    }

    uint64_t v118 = *(void **)&v113[OBJC_IVAR____TtC12searchpartyd10Peripheral_underlyingObject];
    swift_retain();
    id v119 = [v118 identifier];
    uint64_t v120 = (uint64_t)v161;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v119);

    uint64_t v121 = v184;
    uint64_t v122 = (uint64_t *)(v184 + 88);
    __n128 v123 = swift_beginAccess(v184 + 88, &v199, 0LL, 0LL);
    uint64_t v124 = *(void *)(v121 + 88);
    uint64_t v125 = v185;
    if (*(void *)(v124 + 16))
    {
      swift_bridgeObjectRetain(v124);
      unint64_t v126 = sub_10030D124(v120);
      if ((v127 & 1) != 0)
      {
        uint64_t v128 = *(void *)(*(void *)(v124 + 56) + 8 * v126);
        swift_bridgeObjectRetain(v128);
        swift_bridgeObjectRelease();
        unint64_t v129 = *(void (**)(uint64_t, uint64_t))(v125 + 8);
        uint64_t v130 = v120;
        uint64_t v131 = v183;
        v129(v130, v183);
        uint64_t v202 = v128;
        swift_retain();
        sub_1000C0570(&v197, v117);
        swift_release();
        id v132 = [v118 identifier];
        uint64_t v133 = (uint64_t)v194;
        static UUID._unconditionallyBridgeFromObjectiveC(_:)(v132);

        uint64_t v134 = v202;
        swift_beginAccess(v122, &v197, 33LL, 0LL);
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v122);
        uint64_t v196 = *v122;
        *uint64_t v122 = 0x8000000000000000LL;
        sub_10005E010(v134, v133, isUniquelyReferenced_nonNull_native);
        *uint64_t v122 = v196;
        swift_bridgeObjectRelease();
        v129(v133, v131);
        swift_endAccess(&v197);
        swift_release();
LABEL_20:
        swift_release();
        return;
      }

      swift_bridgeObjectRelease();
    }

    uint64_t v141 = *(void (**)(uint64_t, uint64_t, __n128))(v125 + 8);
    uint64_t v142 = v183;
    v141(v120, v183, v123);
    id v143 = [v118 identifier];
    uint64_t v144 = (uint64_t)v194;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v143);

    uint64_t v145 = sub_100004AEC(&qword_1009B0610);
    uint64_t inited = swift_initStackObject(v145, v198);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007F8BB0;
    *(void *)(inited + 32) = v117;
    uint64_t v197 = inited;
    specialized Array._endMutation()(inited);
    uint64_t v147 = v197;
    swift_retain();
    uint64_t v148 = sub_1006F195C(v147);
    swift_bridgeObjectRelease();
    swift_beginAccess(v122, &v197, 33LL, 0LL);
    char v149 = swift_isUniquelyReferenced_nonNull_native(*v122);
    uint64_t v202 = *v122;
    *uint64_t v122 = 0x8000000000000000LL;
    sub_10005E010(v148, v144, v149);
    *uint64_t v122 = v202;
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v141)(v144, v142);
    swift_endAccess(&v197);
    swift_release();
    goto LABEL_20;
  }

  swift_release();
  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v34 = type metadata accessor for Logger(0LL);
  sub_10000A720(v34, (uint64_t)qword_100A2A470);
  swift_errorRetain(v33);
  uint64_t v35 = swift_errorRetain(v33);
  uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
  os_log_type_t v37 = static os_log_type_t.error.getter(v36);
  if (os_log_type_enabled(v36, v37))
  {
    uint64_t v38 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v39 = (void *)swift_slowAlloc(32LL, -1LL);
    id v201 = v39;
    *(_DWORD *)uint64_t v38 = 136446210;
    id v199 = v33;
    swift_errorRetain(v33);
    uint64_t v40 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v41 = String.init<A>(describing:)(&v199, v40);
    id v199 = (id)sub_1003F11D4(v41, v42, (uint64_t *)&v201);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v200, v38 + 4, v38 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v33);
    swift_errorRelease(v33);
    _os_log_impl((void *)&_mh_execute_header, v36, v37, "Notify error: %{public}s", v38, 0xCu);
    swift_arrayDestroy(v39, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1LL, -1LL);
    swift_slowDealloc(v38, -1LL, -1LL);

    swift_errorRelease(v33);
  }

  else
  {
    swift_errorRelease(v33);
    swift_errorRelease(v33);
    swift_errorRelease(v33);
  }

uint64_t sub_10027D70C@<X0>( void (*a1)(void, void)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v8 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (uint64_t *)((char *)&v15 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = *(void **)(a2 + 72);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  __break(1u);
  return result;
}

_BYTE *sub_10027D7E4@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  a2[41] = 0;
  return result;
}

uint64_t *sub_10027D7F4( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void **a7, void *a8, void (*a9)(uint64_t, uint64_t))
{
  uint64_t v91 = a8;
  uint64_t v92 = a7;
  uint64_t v93 = a4;
  uint64_t v94 = a1;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v81 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v81 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v81 - v21;
  __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v81 - v23;
  a2 += 16LL;
  swift_beginAccess(a2, v102, 0LL, 0LL);
  uint64_t result = (uint64_t *)swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v88 = a5;
    uint64_t v89 = result;
    Transaction.capture()();
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v86 = a9;
    uint64_t v26 = type metadata accessor for Logger(0LL);
    uint64_t v27 = sub_10000A720(v26, (uint64_t)qword_100A2A470);
    uint64_t v28 = sub_10001581C(v94, (uint64_t)v101, &qword_1009A7950);
    uint64_t v87 = v27;
    os_log_type_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.info.getter(v29);
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v90 = a6;
    uint64_t v84 = v24;
    if (v31)
    {
      uint64_t v85 = v16;
      uint64_t v32 = swift_slowAlloc(12LL, -1LL);
      uint64_t v83 = v12;
      uint64_t v33 = (uint8_t *)v32;
      uint64_t v34 = swift_slowAlloc(32LL, -1LL);
      id v82 = v22;
      uint64_t v35 = v34;
      uint64_t v99 = v34;
      *(_DWORD *)uint64_t v33 = 136446210;
      sub_10001581C((uint64_t)v101, (uint64_t)&v95, &qword_1009A7950);
      uint64_t v36 = sub_100004AEC(&qword_1009A7950);
      uint64_t v37 = String.init<A>(describing:)(&v95, v36);
      uint64_t v95 = sub_1003F11D4(v37, v38, &v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, &v96, v33 + 4, v33 + 12);
      swift_bridgeObjectRelease();
      uint64_t v16 = v85;
      sub_100015794((uint64_t)v101, &qword_1009A7950);
      _os_log_impl((void *)&_mh_execute_header, v29, v30, "handleNotify result: %{public}s", v33, 0xCu);
      swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v39 = v35;
      uint64_t v22 = v82;
      swift_slowDealloc(v39, -1LL, -1LL);
      uint64_t v40 = v33;
      uint64_t v12 = v83;
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    else
    {
      sub_100015794((uint64_t)v101, &qword_1009A7950);
    }

    uint64_t v41 = v88;
    v92 += 2;
    sub_10001581C(v94, (uint64_t)v101, &qword_1009A7950);
    if ((v101[41] & 1) != 0)
    {
      sub_100254338((uint64_t)v101, (uint64_t)&v95);
      sub_100254374(&v95, (uint64_t)&v99);
      unint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
      v42(v19, v93, v12);
      uint64_t v43 = ((uint64_t (*)(char *, uint64_t, uint64_t))v42)(v16, v41, v12);
      id v44 = (os_log_s *)Logger.logObject.getter(v43);
      os_log_type_t v45 = static os_log_type_t.error.getter(v44);
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = swift_slowAlloc(42LL, -1LL);
        uint64_t v47 = swift_slowAlloc(96LL, -1LL);
        uint64_t v85 = v16;
        uint64_t v94 = v47;
        uint64_t v98 = v47;
        *(_DWORD *)uint64_t v46 = 136446979;
        sub_1007C9800();
        uint64_t v97 = sub_1003F11D4(v48, v49, &v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v46 + 4, v46 + 12);
        swift_bridgeObjectRelease();
        sub_1002543B0(&v99);
        *(_WORD *)(v46 + 12) = 2160;
        uint64_t v97 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v46 + 14, v46 + 22);
        *(_WORD *)(v46 + 22) = 2081;
        uint64_t v50 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter(v12, v50);
        uint64_t v97 = sub_1003F11D4(v51, v52, &v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v46 + 24, v46 + 32);
        swift_bridgeObjectRelease();
        uint64_t v53 = *(void (**)(char *, uint64_t))(v13 + 8);
        v53(v19, v12);
        *(_WORD *)(v46 + 32) = 2082;
        uint64_t v54 = v85;
        uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter(v12, v50);
        uint64_t v97 = sub_1003F11D4(v55, v56, &v98);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v97, &v98, v46 + 34, v46 + 42);
        swift_bridgeObjectRelease();
        v53(v54, v12);
        _os_log_impl( (void *)&_mh_execute_header,  v44,  v45,  "handleNotify error %{public}s.\nBeacon %{private,mask.hash}s Command %{public}s",  (uint8_t *)v46,  0x2Au);
        uint64_t v57 = v94;
        swift_arrayDestroy(v94, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v57, -1LL, -1LL);
        swift_slowDealloc(v46, -1LL, -1LL);
      }

      else
      {
        sub_1002543B0(&v99);
        uint64_t v73 = *(void (**)(char *, uint64_t))(v13 + 8);
        v73(v19, v12);
        v73(v16, v12);
      }

      uint64_t v74 = v90;
      uint64_t v75 = v92;
      swift_beginAccess(v92, &v99, 0LL, 0LL);
      uint64_t v76 = *v75;
      swift_retain();
      sub_100267D08(v74, v76, v91, v86);
      swift_release();
      swift_release();
      return sub_1002543B0(&v95);
    }

    else
    {
      int v58 = v101[0];
      uint64_t v59 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
      uint64_t v60 = v84;
      v59(v84, v93, v12);
      uint64_t v61 = ((uint64_t (*)(char *, uint64_t, uint64_t))v59)(v22, v41, v12);
      uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
      os_log_type_t v63 = static os_log_type_t.default.getter(v62);
      int v64 = v63;
      if (os_log_type_enabled(v62, v63))
      {
        uint64_t v65 = swift_slowAlloc(38LL, -1LL);
        uint64_t v93 = swift_slowAlloc(64LL, -1LL);
        uint64_t v95 = v93;
        *(_DWORD *)uint64_t v65 = 67109891;
        LODWORD(v99) = v58;
        LODWORD(v88) = v64;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, (char *)&v99 + 4, v65 + 4, v65 + 8);
        *(_WORD *)(v65 + 8) = 2160;
        uint64_t v99 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v65 + 10, v65 + 18);
        *(_WORD *)(v65 + 18) = 2081;
        LODWORD(v94) = v58;
        uint64_t v66 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter(v12, v66);
        uint64_t v99 = sub_1003F11D4(v67, v68, &v95);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v65 + 20, v65 + 28);
        swift_bridgeObjectRelease();
        uint64_t v69 = *(void (**)(char *, uint64_t))(v13 + 8);
        v69(v60, v12);
        *(_WORD *)(v65 + 28) = 2082;
        uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter(v12, v66);
        uint64_t v99 = sub_1003F11D4(v70, v71, &v95);
        int v58 = v94;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v65 + 30, v65 + 38);
        swift_bridgeObjectRelease();
        v69(v22, v12);
        _os_log_impl( (void *)&_mh_execute_header,  v62,  (os_log_type_t)v88,  "handleNotify success complete? %{BOOL}d. Beacon %{private,mask.hash}s Command %{public}s.",  (uint8_t *)v65,  0x26u);
        uint64_t v72 = v93;
        swift_arrayDestroy(v93, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v72, -1LL, -1LL);
        swift_slowDealloc(v65, -1LL, -1LL);
      }

      else
      {
        uint64_t v77 = *(void (**)(char *, uint64_t))(v13 + 8);
        v77(v60, v12);
        v77(v22, v12);
      }

      uint64_t v78 = v90;
      if (v58)
      {
        uint64_t v79 = v92;
        swift_beginAccess(v92, &v95, 0LL, 0LL);
        uint64_t v80 = *v79;
        swift_retain();
        sub_100267D08(v78, v80, v91, v86);
        swift_release();
        swift_release();
        swift_beginAccess(v79, &v99, 1LL, 0LL);
        *uint64_t v79 = 0LL;
      }

      return (uint64_t *)swift_release();
    }
  }

  return result;
}

uint64_t sub_10027E128@<X0>( void (*a1)(char *, char *, uint64_t)@<X0>, char *a2@<X1>, void *a3@<X8>)
{
  uint64_t v225 = a1;
  unint64_t v226 = a2;
  uint64_t v222 = a3;
  uint64_t v227 = type metadata accessor for AccessoryCommand(0LL);
  uint64_t v204 = *(void *)(v227 - 8);
  __chkstk_darwin(v227);
  uint64_t v205 = v4;
  uint64_t v206 = (uint64_t)&v195 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v215 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v213 = *(void *)(v215 - 8);
  __chkstk_darwin(v215);
  os_log_type_t v211 = (char *)&v195 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v216 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v214 = *(void *)(v216 - 8);
  __chkstk_darwin(v216);
  v212 = (char *)&v195 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v209 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v208 = *(void *)(v209 - 8);
  __chkstk_darwin(v209);
  uint64_t v207 = (char *)&v195 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v219 = (uint64_t)&v195 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v203 = (char *)&v195 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v210 = (char *)&v195 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  id v200 = (char *)&v195 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  id v199 = (char *)&v195 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v202 = (char *)&v195 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  id v201 = (char *)&v195 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  id v220 = (char *)&v195 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v218 = (char *)&v195 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  os_log_type_t v30 = (char *)&v195 - v29;
  __chkstk_darwin(v28);
  uint64_t v32 = (char *)&v195 - v31;
  uint64_t v33 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v34 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v36 = (void ***)((char *)&v195 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v221 = v3;
  unint64_t v38 = *(void **)(v3 + 72);
  *uint64_t v36 = v38;
  (*(void (**)(void *, void, uint64_t))(v34 + 104))(v36, enum case for DispatchPredicate.onQueue(_:), v33);
  id v37 = v38;
  LODWORD(v38) = _dispatchPreconditionTest(_:)(v36);
  (*(void (**)(void *, uint64_t))(v34 + 8))(v36, v33);
  if ((v38 & 1) == 0)
  {
    __break(1u);
LABEL_44:
    swift_once(&qword_10099B220, sub_1002673AC);
LABEL_4:
    uint64_t v42 = type metadata accessor for Logger(0LL);
    uint64_t v43 = sub_10000A720(v42, (uint64_t)qword_100A2A470);
    id v44 = v218;
    os_log_type_t v45 = v228;
    uint64_t v46 = (void (*)(char *, char *, void *))v225;
    v225(v218, (char *)v227, (uint64_t)v228);
    uint64_t v47 = v220;
    v46(v220, v30, v45);
    sub_10015BB0C(v8, v34);
    uint64_t v48 = sub_10015BB0C(v8, v34);
    uint64_t v198 = v43;
    unint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
    int v50 = static os_log_type_t.default.getter(v49);
    BOOL v51 = os_log_type_enabled(v49, (os_log_type_t)v50);
    uint64_t v219 = v8;
    int v52 = v34;
    int v217 = (int)v38;
    if (v51)
    {
      uint64_t v53 = v228;
      uint64_t v54 = swift_slowAlloc(42LL, -1LL);
      uint64_t v195 = (void **)swift_slowAlloc(96LL, -1LL);
      uint64_t aBlock = v195;
      *(_DWORD *)uint64_t v54 = 136315907;
      uint64_t v55 = v44;
      os_log_t v197 = v49;
      int v196 = v50;
      if (v52)
      {
        uint64_t v56 = v223;
        if (v52 == 1)
        {
          uint64_t v57 = 0x7453646E756F732ELL;
          unint64_t v58 = 0xEB00000000747261LL;
        }

        else
        {
          if (v219) {
            uint64_t v57 = 0x726961706E752ELL;
          }
          else {
            uint64_t v57 = 0x7453646E756F732ELL;
          }
          if (v219) {
            unint64_t v58 = 0xE700000000000000LL;
          }
          else {
            unint64_t v58 = 0xEA0000000000706FLL;
          }
        }
      }

      else
      {
        uint64_t v57 = 0x646E616D6D6F632ELL;
        unint64_t v58 = 0xEB000000006B6341LL;
        uint64_t v56 = v223;
      }

      uint64_t v229 = sub_1003F11D4(v57, v58, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v54 + 4, v54 + 12);
      swift_bridgeObjectRelease();
      uint64_t v79 = v219;
      sub_10015BB30(v219, v52);
      sub_10015BB30(v79, v52);
      *(_WORD *)(v54 + 12) = 2160;
      uint64_t v229 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v54 + 14, v54 + 22);
      *(_WORD *)(v54 + 22) = 2081;
      uint64_t v80 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter(v53, v80);
      uint64_t v229 = sub_1003F11D4(v81, v82, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v54 + 24, v54 + 32);
      swift_bridgeObjectRelease();
      uint64_t v83 = *(void (**)(char *, void *))(v56 + 8);
      v83(v55, v53);
      *(_WORD *)(v54 + 32) = 2082;
      uint64_t v84 = v220;
      uint64_t v85 = dispatch thunk of CustomStringConvertible.description.getter(v53, v80);
      uint64_t v229 = sub_1003F11D4(v85, v86, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v54 + 34, v54 + 42);
      swift_bridgeObjectRelease();
      id v220 = (char *)v83;
      v83(v84, v53);
      os_log_t v87 = v197;
      _os_log_impl( (void *)&_mh_execute_header,  v197,  (os_log_type_t)v196,  "AirTag command: %s. Beacon %{private,mask.hash}s Command %{public}s",  (uint8_t *)v54,  0x2Au);
      uint64_t v88 = v195;
      swift_arrayDestroy(v195, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v88, -1LL, -1LL);
      swift_slowDealloc(v54, -1LL, -1LL);
    }

    else
    {
      sub_10015BB30(v8, v34);
      sub_10015BB30(v8, v34);
      uint64_t v74 = *(void (**)(char *, void *))(v223 + 8);
      uint64_t v75 = v228;
      v74(v44, v228);
      id v220 = (char *)v74;
      v74(v47, v75);
    }

    uint64_t v89 = *(void **)(v221 + 64);
    uint64_t v90 = v224;
    uint64_t v91 = (uint64_t)v226;
    if (v89)
    {
      uint64_t v92 = *(char **)(v221 + 64);
      if (v52) {
        goto LABEL_25;
      }
    }

    else
    {
      sub_100004AB0();
      uint64_t v120 = v208;
      uint64_t v121 = v207;
      uint64_t v122 = v209;
      (*(void (**)(char *, void, uint64_t))(v208 + 104))( v207,  enum case for DispatchQoS.QoSClass.default(_:),  v209);
      uint64_t v123 = static OS_dispatch_queue.global(qos:)(v121);
      uint64_t v91 = (uint64_t)v226;
      uint64_t v90 = v224;
      uint64_t v92 = (char *)v123;
      (*(void (**)(char *, uint64_t))(v120 + 8))(v121, v122);
      if (v52)
      {
LABEL_25:
        if (v52 == 1)
        {
          uint64_t v93 = v210;
          uint64_t v94 = v89;
          uint64_t v95 = v227;
          uint64_t v96 = v228;
          uint64_t v97 = (void (*)(char *, char *, void *))v225;
          v225(v210, (char *)v227, (uint64_t)v228);
          uint64_t v98 = v203;
          v97(v203, v90, v96);
          uint64_t v99 = v223;
          uint64_t v100 = *(unsigned __int8 *)(v223 + 80);
          unint64_t v226 = v92;
          uint64_t v101 = (v100 + 24) & ~v100;
          uint64_t v102 = (v10 + v100 + v101) & ~v100;
          uint64_t v103 = swift_allocObject(&unk_10094CA30, v102 + v10, v100 | 7);
          *(void *)(v103 + swift_weakDestroy(v0 + 16) = v221;
          uint64_t v104 = v103 + v101;
          unint64_t v105 = *(void (**)(uint64_t, char *, void *))(v99 + 32);
          v105(v104, v93, v96);
          v105(v103 + v102, v98, v96);
          uint64_t v236 = sub_1002899E4;
          uint64_t v237 = v103;
          uint64_t aBlock = _NSConcreteStackBlock;
          uint64_t v233 = 1107296256LL;
          id v234 = sub_1001C31E8;
          v235 = &unk_10094CA48;
          uint64_t v106 = _Block_copy(&aBlock);
          id v107 = v94;
          uint64_t v108 = swift_retain();
          uint64_t v109 = v212;
          static DispatchQoS.unspecified.getter(v108);
          uint64_t v229 = (uint64_t)_swiftEmptyArrayStorage;
          uint64_t v110 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          uint64_t v111 = v95;
          uint64_t v112 = sub_100004AEC((uint64_t *)&unk_1009AB860);
          uint64_t v113 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
          uint64_t v114 = v211;
          uint64_t v115 = v112;
          uint64_t v116 = v215;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v229, v115, v113, v215, v110);
          id v117 = v226;
          OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v109, v114, v106);

          _Block_release(v106);
          sub_10015BB30(v219, 1);
          (*(void (**)(char *, uint64_t))(v213 + 8))(v114, v116);
          (*(void (**)(char *, uint64_t))(v214 + 8))(v109, v216);
          uint64_t v118 = (void (*)(uint64_t, void *))v220;
          ((void (*)(char *, void *))v220)(v224, v96);
          uint64_t v119 = v111;
        }

        else
        {
          id v143 = v92;
          uint64_t v144 = v89;
          uint64_t v145 = v206;
          sub_10001DC4C(v91, v206, type metadata accessor for AccessoryCommand);
          if (v219)
          {
            uint64_t v146 = *(unsigned __int8 *)(v204 + 80);
            uint64_t v147 = v90;
            uint64_t v148 = (v146 + 24) & ~v146;
            uint64_t v149 = swift_allocObject(&unk_10094C990, v148 + v205, v146 | 7);
            *(void *)(v149 + swift_weakDestroy(v0 + 16) = v221;
            sub_10002218C(v145, v149 + v148, type metadata accessor for AccessoryCommand);
            uint64_t v236 = sub_100289B44;
            uint64_t v237 = v149;
            uint64_t aBlock = _NSConcreteStackBlock;
            uint64_t v233 = 1107296256LL;
            id v234 = sub_1001C31E8;
            v235 = &unk_10094C9A8;
            id v150 = _Block_copy(&aBlock);
            id v151 = v89;
            uint64_t v152 = swift_retain();
            uint64_t v153 = v212;
            static DispatchQoS.unspecified.getter(v152);
            uint64_t v229 = (uint64_t)_swiftEmptyArrayStorage;
            uint64_t v154 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            uint64_t v155 = sub_100004AEC((uint64_t *)&unk_1009AB860);
            uint64_t v156 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
            uint64_t v157 = v211;
            uint64_t v158 = v155;
            uint64_t v159 = v215;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v229, v158, v156, v215, v154);
            OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v153, v157, v150);

            _Block_release(v150);
            (*(void (**)(char *, uint64_t))(v213 + 8))(v157, v159);
            (*(void (**)(char *, uint64_t))(v214 + 8))(v153, v216);
            uint64_t v160 = v228;
            uint64_t v118 = (void (*)(uint64_t, void *))v220;
            ((void (*)(char *, void *))v220)(v147, v228);
            uint64_t v119 = v227;
            uint64_t v161 = v160;
LABEL_37:
            v118(v119, v161);
            uint64_t result = swift_release();
            uint64_t v78 = v222;
            *uint64_t v222 = 0LL;
            __int16 v190 = 511;
LABEL_41:
            *((_WORD *)v78 + 4) = v190;
            LOBYTE(v38) = v217;
            goto LABEL_42;
          }

          uint64_t v174 = v210;
          uint64_t v96 = v228;
          v225(v210, v90, (uint64_t)v228);
          uint64_t v175 = *(unsigned __int8 *)(v204 + 80);
          uint64_t v176 = (v175 + 24) & ~v175;
          uint64_t v177 = v223;
          uint64_t v178 = *(unsigned __int8 *)(v223 + 80);
          uint64_t v179 = (v205 + v178 + v176) & ~v178;
          uint64_t v180 = swift_allocObject(&unk_10094C9E0, v179 + v10, v175 | v178 | 7);
          *(void *)(v180 + swift_weakDestroy(v0 + 16) = v221;
          sub_10002218C(v145, v180 + v176, type metadata accessor for AccessoryCommand);
          (*(void (**)(uint64_t, char *, void *))(v177 + 32))(v180 + v179, v174, v96);
          uint64_t v236 = sub_100289B64;
          uint64_t v237 = v180;
          uint64_t aBlock = _NSConcreteStackBlock;
          uint64_t v233 = 1107296256LL;
          id v234 = sub_1001C31E8;
          v235 = &unk_10094C9F8;
          uint64_t v181 = _Block_copy(&aBlock);
          id v182 = v144;
          uint64_t v183 = swift_retain();
          uint64_t v184 = v212;
          static DispatchQoS.unspecified.getter(v183);
          uint64_t v229 = (uint64_t)_swiftEmptyArrayStorage;
          uint64_t v185 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
          uint64_t v186 = sub_100004AEC((uint64_t *)&unk_1009AB860);
          uint64_t v187 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
          unint64_t v188 = v211;
          uint64_t v189 = v215;
          dispatch thunk of SetAlgebra.init<A>(_:)(&v229, v186, v187, v215, v185);
          OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v184, v188, v181);

          _Block_release(v181);
          (*(void (**)(char *, uint64_t))(v213 + 8))(v188, v189);
          (*(void (**)(char *, uint64_t))(v214 + 8))(v184, v216);
          uint64_t v118 = (void (*)(uint64_t, void *))v220;
          ((void (*)(char *, void *))v220)(v224, v96);
          uint64_t v119 = v227;
        }

        uint64_t v161 = v96;
        goto LABEL_37;
      }
    }

    char v124 = sub_10015BA78(v219);
    if (v124 == 4)
    {
      unint64_t v226 = v92;
      uint64_t v125 = v199;
      unint64_t v126 = v228;
      char v127 = (void (*)(char *, char *, void *))v225;
      v225(v199, (char *)v227, (uint64_t)v228);
      uint64_t v128 = v200;
      v127(v200, v90, v126);
      unint64_t v129 = v90;
      uint64_t v130 = (os_log_s *)Logger.logObject.getter(v89);
      os_log_type_t v131 = static os_log_type_t.error.getter(v130);
      if (os_log_type_enabled(v130, v131))
      {
        uint64_t v132 = swift_slowAlloc(35LL, -1LL);
        uint64_t v225 = (void (*)(char *, char *, uint64_t))swift_slowAlloc(64LL, -1LL);
        uint64_t aBlock = (void **)v225;
        *(_DWORD *)uint64_t v132 = 16909315;
        LOBYTE(v229) = v219;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, (char *)&v229 + 1, v132 + 4, v132 + 5);
        *(_WORD *)(v132 + 5) = 2160;
        uint64_t v229 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v132 + 7, v132 + 15);
        *(_WORD *)(v132 + 15) = 2081;
        uint64_t v133 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v134 = v228;
        uint64_t v135 = v133;
        uint64_t v136 = dispatch thunk of CustomStringConvertible.description.getter(v228, v133);
        uint64_t v229 = sub_1003F11D4(v136, v137, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v132 + 17, v132 + 25);
        swift_bridgeObjectRelease();
        uint64_t v138 = v125;
        os_log_type_t v139 = (void (*)(char *, void *))v220;
        ((void (*)(char *, void *))v220)(v138, v134);
        *(_WORD *)(v132 + 25) = 2082;
        uint64_t v140 = dispatch thunk of CustomStringConvertible.description.getter(v134, v135);
        uint64_t v229 = sub_1003F11D4(v140, v141, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v132 + 27, v132 + 35);
        swift_bridgeObjectRelease();
        v139(v128, v134);
        _os_log_impl( (void *)&_mh_execute_header,  v130,  v131,  "Invalid opcode: %{public}hhu. Beacon %{private,mask.hash}s Command %{public}s.",  (uint8_t *)v132,  0x23u);
        uint64_t v142 = v225;
        swift_arrayDestroy(v225, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v142, -1LL, -1LL);
        swift_slowDealloc(v132, -1LL, -1LL);

        v139(v224, v134);
        uint64_t result = ((uint64_t (*)(uint64_t, void *))v139)(v227, v134);
      }

      else
      {

        uint64_t v191 = v228;
        uint64_t v192 = (void (*)(char *, void *))v220;
        ((void (*)(char *, void *))v220)(v128, v228);
        v192(v125, v191);
        v192(v129, v191);
        uint64_t result = ((uint64_t (*)(uint64_t, void *))v192)(v227, v191);
      }
    }

    else
    {
      char v162 = v124;
      uint64_t v163 = v92;
      uint64_t v164 = v201;
      uint64_t v166 = v227;
      uint64_t v165 = v228;
      uint64_t v167 = (void (*)(char *, char *, void *))v225;
      v225(v201, (char *)v227, (uint64_t)v228);
      uint64_t v168 = v202;
      v167(v202, v90, v165);
      uint64_t v169 = v90;
      unint64_t v170 = (os_log_s *)Logger.logObject.getter(v89);
      os_log_type_t v171 = static os_log_type_t.default.getter(v170);
      uint64_t v172 = v166;
      if (os_log_type_enabled(v170, v171))
      {
        unint64_t v226 = v163;
        uint64_t v173 = (_DWORD *)swift_slowAlloc(42LL, -1LL);
        uint64_t v225 = (void (*)(char *, char *, uint64_t))swift_slowAlloc(96LL, -1LL);
        uint64_t aBlock = (void **)v225;
        *uint64_t v173 = 136315907;
        __asm { BR              X10 }
      }

      uint64_t v193 = v228;
      uint64_t v194 = (void (*)(char *, void *))v220;
      ((void (*)(char *, void *))v220)(v168, v228);
      v194(v164, v193);
      v194(v169, v193);
      uint64_t result = ((uint64_t (*)(uint64_t, void *))v194)(v172, v193);
    }

    uint64_t v78 = v222;
    *uint64_t v222 = 0LL;
    __int16 v190 = 255;
    goto LABEL_41;
  }

  uint64_t v39 = v226;
  uint64_t v40 = *(void (**)(char *, char *, uint64_t))(v9 + 16);
  v40(v32, &v226[*(int *)(v227 + 20)], v8);
  v40(v30, v39, v8);
  sub_10028975C((uint64_t)v225, (uint64_t)&aBlock);
  uint64_t v41 = sub_100004AEC(&qword_1009A79A8);
  LODWORD(v38) = swift_dynamicCast(&v229, &aBlock, v41, &type metadata for AirTagCommand, 6LL);
  uint64_t v227 = (uint64_t)v32;
  uint64_t v228 = (void *)v8;
  uint64_t v223 = v9;
  uint64_t v224 = v30;
  if ((_DWORD)v38)
  {
    uint64_t v225 = v40;
    uint64_t v8 = v229;
    LODWORD(v34) = v230[0];
    if (qword_10099B220 == -1) {
      goto LABEL_4;
    }
    goto LABEL_44;
  }

  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v59 = type metadata accessor for Logger(0LL);
  sub_10000A720(v59, (uint64_t)qword_100A2A470);
  sub_10028975C((uint64_t)v225, (uint64_t)&aBlock);
  uint64_t v60 = v219;
  uint64_t v61 = ((uint64_t (*)(uint64_t, uint64_t, void *))v40)(v219, v227, v228);
  uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
  os_log_type_t v63 = static os_log_type_t.error.getter(v62);
  if (os_log_type_enabled(v62, v63))
  {
    uint64_t v64 = swift_slowAlloc(32LL, -1LL);
    uint64_t v65 = swift_slowAlloc(64LL, -1LL);
    uint64_t v231 = v65;
    *(_DWORD *)uint64_t v64 = 136315651;
    sub_10028975C((uint64_t)&aBlock, (uint64_t)&v229);
    uint64_t v66 = String.init<A>(describing:)(&v229, v41);
    int v217 = 0;
    unint64_t v38 = v228;
    uint64_t v229 = sub_1003F11D4(v66, v67, &v231);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v64 + 4, v64 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
    *(_WORD *)(v64 + 12) = 2160;
    uint64_t v229 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v64 + 14, v64 + 22);
    *(_WORD *)(v64 + 22) = 2081;
    uint64_t v68 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter(v38, v68);
    uint64_t v229 = sub_1003F11D4(v69, v70, &v231);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v229, v230, v64 + 24, v64 + 32);
    swift_bridgeObjectRelease();
    unint64_t v71 = *(void (**)(uint64_t, void *))(v223 + 8);
    v71(v60, v38);
    _os_log_impl( (void *)&_mh_execute_header,  v62,  v63,  "Invalid AirTag command from payload %s for %{private,mask.hash}s",  (uint8_t *)v64,  0x20u);
    swift_arrayDestroy(v65, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v65, -1LL, -1LL);
    swift_slowDealloc(v64, -1LL, -1LL);

    v71((uint64_t)v224, v38);
    uint64_t v72 = v38;
    LOBYTE(v38) = v217;
    uint64_t result = ((uint64_t (*)(uint64_t, void *))v71)(v227, v72);
  }

  else
  {

    uint64_t v76 = *(void (**)(uint64_t, void *))(v223 + 8);
    uint64_t v77 = v228;
    v76(v60, v228);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
    v76((uint64_t)v224, v77);
    uint64_t result = ((uint64_t (*)(uint64_t, void *))v76)(v227, v77);
  }

  uint64_t v78 = v222;
  *uint64_t v222 = 13LL;
  *(_OWORD *)(v78 + 1) = 0u;
  *(_OWORD *)(v78 + 3) = 0u;
  *((_BYTE *)v78 + 40) = 11;
LABEL_42:
  *((_BYTE *)v78 + 41) = v38 ^ 1;
  return result;
}

uint64_t sub_10027F824@<X0>(void (*a1)(void, void)@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v538 = a3;
  v541 = a1;
  uint64_t v530 = sub_100004AEC(&qword_10099E4C8);
  uint64_t v529 = *(void *)(v530 - 8);
  __chkstk_darwin(v530);
  v512 = (char *)&v498 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC(&qword_10099E4C0);
  __chkstk_darwin(v5);
  v528 = (char *)&v498 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v516 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v514 = *(void *)(v516 - 8);
  __chkstk_darwin(v516);
  v515 = (char *)&v498 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v518 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v518 - 8);
  __chkstk_darwin(v518);
  v517 = (char *)&v498 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for AccessoryCommand(0LL);
  uint64_t v502 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v510 = (uint64_t)&v498 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v522 = (uint64_t)&v498 - v14;
  uint64_t v503 = v15;
  __chkstk_darwin(v13);
  uint64_t v504 = (uint64_t)&v498 - v16;
  uint64_t v17 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v498 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for UUID(0LL);
  uint64_t v22 = *(void *)(*(void *)(v21 - 8) + 64LL);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v498 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v23);
  os_log_t v532 = (os_log_t)((char *)&v498 - v26);
  uint64_t v27 = __chkstk_darwin(v25);
  v536 = (os_log_s *)((char *)&v498 - v28);
  uint64_t v29 = __chkstk_darwin(v27);
  v527 = (char *)&v498 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  v526 = (char *)&v498 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  v507 = (char *)&v498 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  v524 = (char *)&v498 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  v535 = (char *)&v498 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  v520 = (char *)&v498 - v40;
  uint64_t v41 = __chkstk_darwin(v39);
  v534 = (char *)&v498 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  v521 = (char *)&v498 - v44;
  uint64_t v45 = __chkstk_darwin(v43);
  v506 = (char *)&v498 - v46;
  uint64_t v47 = __chkstk_darwin(v45);
  v501 = (char *)&v498 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  v509 = (char *)&v498 - v50;
  uint64_t v51 = __chkstk_darwin(v49);
  v508 = (char *)&v498 - v52;
  uint64_t v53 = __chkstk_darwin(v51);
  v513 = (char *)&v498 - v54;
  uint64_t v55 = __chkstk_darwin(v53);
  v519 = (char *)&v498 - v56;
  uint64_t v57 = __chkstk_darwin(v55);
  v505 = (char *)&v498 - v58;
  uint64_t v59 = __chkstk_darwin(v57);
  uint64_t v61 = (char *)&v498 - v60;
  __chkstk_darwin(v59);
  uint64_t v523 = v10;
  v539 = (void **)v62;
  os_log_type_t v63 = *(void (**)(void))(v62 + 16);
  v543 = (char *)&v498 - v64;
  v63();
  v542 = v61;
  uint64_t v525 = a2;
  uint64_t v65 = a2;
  uint64_t v66 = v541;
  uint64_t v540 = v21;
  ((void (*)(char *, uint64_t, uint64_t))v63)(v61, v65, v21);
  sub_10028975C((uint64_t)v66, (uint64_t)&aBlock);
  v533 = (void **)sub_100004AEC(&qword_1009A79A8);
  if (!swift_dynamicCast(&v544, &aBlock, v533, &type metadata for AccessoryConfigCommand, 6LL))
  {
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v70 = type metadata accessor for Logger(0LL);
    sub_10000A720(v70, (uint64_t)qword_100A2A470);
    sub_10028975C((uint64_t)v66, (uint64_t)&aBlock);
    unint64_t v71 = v543;
    uint64_t v72 = v540;
    uint64_t v73 = ((uint64_t (*)(char *, char *, uint64_t))v63)(v24, v543, v540);
    uint64_t v74 = (os_log_s *)Logger.logObject.getter(v73);
    os_log_type_t v75 = static os_log_type_t.error.getter(v74);
    BOOL v76 = os_log_type_enabled(v74, v75);
    uint64_t v77 = v538;
    if (v76)
    {
      uint64_t v78 = swift_slowAlloc(32LL, -1LL);
      uint64_t v79 = swift_slowAlloc(64LL, -1LL);
      uint64_t v547 = v79;
      *(_DWORD *)uint64_t v78 = 136315651;
      sub_10028975C((uint64_t)&aBlock, (uint64_t)&v544);
      uint64_t v80 = String.init<A>(describing:)(&v544, v533);
      uint64_t v544 = sub_1003F11D4(v80, v81, &v547);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v78 + 4, v78 + 12);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      *(_WORD *)(v78 + 12) = 2160;
      uint64_t v544 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v78 + 14, v78 + 22);
      *(_WORD *)(v78 + 22) = 2081;
      uint64_t v82 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v83 = dispatch thunk of CustomStringConvertible.description.getter(v72, v82);
      uint64_t v544 = sub_1003F11D4(v83, v84, &v547);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v78 + 24, v78 + 32);
      swift_bridgeObjectRelease();
      uint64_t v85 = (void (*)(char *, uint64_t))v539[1];
      v85(v24, v72);
      _os_log_impl( (void *)&_mh_execute_header,  v74,  v75,  "Invalid command from payload %s for %{private,mask.hash}s",  (uint8_t *)v78,  0x20u);
      swift_arrayDestroy(v79, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v79, -1LL, -1LL);
      swift_slowDealloc(v78, -1LL, -1LL);

      v85(v542, v72);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v85)(v543, v72);
    }

    else
    {

      os_log_t v87 = (void (*)(char *, uint64_t))v539[1];
      v87(v24, v72);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
      v87(v542, v72);
      uint64_t result = ((uint64_t (*)(char *, uint64_t))v87)(v71, v72);
    }

    uint64_t v88 = 13LL;
    goto LABEL_10;
  }

  unint64_t v67 = v545[0];
  uint64_t v531 = v544;
  unint64_t v68 = (unint64_t)v546;
  uint64_t v511 = v545[1];
  uint64_t v69 = v537[8];
  if (v69)
  {
    id v500 = v537[8];
  }

  else
  {
    uint64_t v90 = v546;
    v499 = v63;
    unint64_t v91 = v545[0];
    sub_100004AB0();
    (*(void (**)(char *, void, uint64_t))(v18 + 104))( v20,  enum case for DispatchQoS.QoSClass.default(_:),  v17);
    id v500 = (id)static OS_dispatch_queue.global(qos:)(v20);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
    unint64_t v67 = v91;
    os_log_type_t v63 = v499;
    unint64_t v68 = (unint64_t)v90;
    uint64_t v66 = v541;
  }

  uint64_t v92 = v536;
  int v93 = (v68 >> 59) & 6 | ((v67 & 0x2000000000000000LL) != 0);
  uint64_t v94 = v535;
  uint64_t v95 = v534;
  if (v93 == 1)
  {
    uint64_t v530 = v8;
    unint64_t v147 = v67 & 0xDFFFFFFFFFFFFFFFLL;
    unint64_t v148 = v68 & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v149 = v68;
    id v150 = (os_log_s *)v67;
    id v151 = v69;
    uint64_t v152 = v531;
    v536 = v150;
    uint64_t v153 = (uint64_t)v150;
    uint64_t v154 = v511;
    v541 = (void (*)(void, void))v149;
    sub_1000F40B4(v531, v153, v511, v149, sub_10001736C);
    sub_10001736C(v152, v147);
    sub_10001736C(v154, v148);
    unsigned int v155 = sub_10015AC18(v152, v147, v154, v148);
    if ((v155 & 0xFF0000) != 0x60000)
    {
      unsigned int v197 = v155;
      uint64_t v198 = sub_1000F4060(v155);
      id v199 = v542;
      id v200 = v543;
      if (v198 != 19)
      {
        uint64_t v250 = v198;
        if (qword_10099B220 != -1) {
          swift_once(&qword_10099B220, sub_1002673AC);
        }
        uint64_t v251 = type metadata accessor for Logger(0LL);
        uint64_t v252 = sub_10000A720(v251, (uint64_t)qword_100A2A470);
        id v253 = v505;
        uint64_t v254 = v540;
        ((void (*)(char *, char *, uint64_t))v63)(v505, v200, v540);
        uint64_t v255 = ((uint64_t (*)(char *, char *, uint64_t))v63)(v519, v199, v254);
        v535 = (char *)v252;
        uint64_t v256 = (os_log_s *)Logger.logObject.getter(v255);
        os_log_type_t v257 = static os_log_type_t.default.getter(v256);
        int v258 = v257;
        BOOL v259 = os_log_type_enabled(v256, v257);
        unsigned int v260 = HIWORD(v197);
        v499 = v63;
        if (v259)
        {
          uint64_t v261 = swift_slowAlloc(52LL, -1LL);
          v533 = (void **)swift_slowAlloc(128LL, -1LL);
          uint64_t aBlock = v533;
          *(_DWORD *)uint64_t v261 = 136316163;
          os_log_t v532 = v256;
          v262 = (char *)v250;
          uint64_t v263 = sub_1000F335C(v250);
          LODWORD(v529) = v258;
          uint64_t v544 = sub_1003F11D4(v263, v264, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v261 + 4, v261 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v261 + 12) = 2082;
          if ((_BYTE)v260) {
            unsigned __int8 v265 = v260;
          }
          else {
            unsigned __int8 v265 = 6;
          }
          uint64_t v266 = sub_10015A6A0(v265);
          uint64_t v544 = sub_1003F11D4(v266, v267, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v261 + 14, v261 + 22);
          swift_bridgeObjectRelease();
          *(_WORD *)(v261 + 22) = 2160;
          uint64_t v544 = 1752392040LL;
          v528 = (char *)v545;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v261 + 24, v261 + 32);
          *(_WORD *)(v261 + 32) = 2081;
          uint64_t v250 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v268 = dispatch thunk of CustomStringConvertible.description.getter(v254, v250);
          uint64_t v544 = sub_1003F11D4(v268, v269, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v261 + 34, v261 + 42);
          swift_bridgeObjectRelease();
          v270 = v539;
          v271 = v253;
          v272 = (void **)v539[1];
          ((void (*)(char *, uint64_t))v272)(v271, v254);
          *(_WORD *)(v261 + 42) = 2082;
          v534 = v262;
          v273 = v519;
          uint64_t v274 = dispatch thunk of CustomStringConvertible.description.getter(v254, v250);
          uint64_t v544 = sub_1003F11D4(v274, v275, (uint64_t *)&aBlock);
          LOBYTE(v250) = (_BYTE)v534;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v528, v261 + 44, v261 + 52);
          swift_bridgeObjectRelease();
          ((void (*)(char *, uint64_t))v272)(v273, v254);
          uint64_t v256 = v532;
          _os_log_impl( (void *)&_mh_execute_header,  v532,  (os_log_type_t)v529,  "Opcode: %s. Status %{public}s. Beacon %{private,mask.hash}s Command %{public}s.",  (uint8_t *)v261,  0x34u);
          v276 = v533;
          swift_arrayDestroy(v533, 4LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v276, -1LL, -1LL);
          swift_slowDealloc(v261, -1LL, -1LL);
        }

        else
        {
          v270 = v539;
          v311 = v253;
          v272 = (void **)v539[1];
          ((void (*)(char *, uint64_t))v272)(v311, v254);
          ((void (*)(char *, uint64_t))v272)(v519, v254);
        }

        if ((_BYTE)v260) {
          unsigned __int8 v313 = v260;
        }
        else {
          unsigned __int8 v313 = 6;
        }
        v314 = v509;
        v315 = v508;
        switch((char)v250)
        {
          case 0:
          case 18:
            v539 = v272;
            v316 = v542;
            uint64_t v317 = v504;
            sub_10001DC4C(v525, v504, type metadata accessor for AccessoryCommand);
            if (v313 == 6)
            {
              v318 = v513;
              uint64_t v319 = v540;
              ((void (*)(char *, char *, uint64_t))v499)(v513, v316, v540);
              uint64_t v320 = *(unsigned __int8 *)(v502 + 80);
              uint64_t v321 = (v320 + 24) & ~v320;
              uint64_t v322 = *((unsigned __int8 *)v270 + 80);
              v323 = v270;
              uint64_t v324 = (v503 + v322 + v321) & ~v322;
              uint64_t v325 = swift_allocObject(&unk_10094C940, v324 + v22, v320 | v322 | 7);
              *(void *)(v325 + swift_weakDestroy(v0 + 16) = v537;
              sub_10002218C(v317, v325 + v321, type metadata accessor for AccessoryCommand);
              ((void (*)(uint64_t, char *, uint64_t))v323[4])(v325 + v324, v318, v319);
              v552 = sub_100289D98;
              uint64_t v553 = v325;
              uint64_t aBlock = _NSConcreteStackBlock;
              uint64_t v549 = 1107296256LL;
              v550 = sub_1001C31E8;
              v551 = &unk_10094C958;
              v326 = _Block_copy(&aBlock);
              uint64_t v327 = swift_retain();
              v328 = v517;
              static DispatchQoS.unspecified.getter(v327);
              uint64_t v544 = (uint64_t)_swiftEmptyArrayStorage;
              uint64_t v329 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
              uint64_t v330 = sub_100004AEC((uint64_t *)&unk_1009AB860);
              uint64_t v331 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
              v332 = v515;
              uint64_t v333 = v516;
              dispatch thunk of SetAlgebra.init<A>(_:)(&v544, v330, v331, v516, v329);
              id v334 = v500;
              OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v328, v332, v326);
              _Block_release(v326);

              uint64_t v335 = v531;
              v336 = v536;
              uint64_t v337 = v511;
              unint64_t v338 = (unint64_t)v541;
              sub_1000F40B4(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_100016F9C);
              sub_1000F40B4(v335, (uint64_t)v336, v337, v338, sub_100016F9C);
              (*(void (**)(char *, uint64_t))(v514 + 8))(v332, v333);
              (*(void (**)(char *, uint64_t))(v530 + 8))(v328, v518);
              v339 = v539;
              ((void (*)(char *, uint64_t))v539)(v316, v319);
              v340 = v543;
              uint64_t v341 = v319;
            }

            else
            {
              v418 = v513;
              uint64_t v419 = v540;
              ((void (*)(char *, char *, uint64_t))v499)(v513, v316, v540);
              uint64_t v420 = *(unsigned __int8 *)(v502 + 80);
              v421 = v270;
              uint64_t v422 = (v420 + 24) & ~v420;
              uint64_t v423 = *((unsigned __int8 *)v421 + 80);
              uint64_t v424 = (v503 + v423 + v422) & ~v423;
              uint64_t v425 = swift_allocObject(&unk_10094C8F0, v424 + v22 + 1, v420 | v423 | 7);
              *(void *)(v425 + swift_weakDestroy(v0 + 16) = v537;
              sub_10002218C(v317, v425 + v422, type metadata accessor for AccessoryCommand);
              ((void (*)(uint64_t, char *, uint64_t))v421[4])(v425 + v424, v418, v419);
              *(_BYTE *)(v425 + v424 + v22) = v313;
              v552 = sub_100289D80;
              uint64_t v553 = v425;
              uint64_t aBlock = _NSConcreteStackBlock;
              uint64_t v549 = 1107296256LL;
              v550 = sub_1001C31E8;
              v551 = &unk_10094C908;
              v426 = _Block_copy(&aBlock);
              uint64_t v427 = swift_retain();
              v428 = v517;
              static DispatchQoS.unspecified.getter(v427);
              uint64_t v544 = (uint64_t)_swiftEmptyArrayStorage;
              uint64_t v429 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
              uint64_t v430 = sub_100004AEC((uint64_t *)&unk_1009AB860);
              uint64_t v431 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
              v432 = v515;
              uint64_t v433 = v516;
              dispatch thunk of SetAlgebra.init<A>(_:)(&v544, v430, v431, v516, v429);
              id v434 = v500;
              OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v428, v432, v426);

              _Block_release(v426);
              uint64_t v435 = v531;
              v436 = v536;
              uint64_t v437 = v511;
              unint64_t v438 = (unint64_t)v541;
              sub_1000F40B4(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_100016F9C);
              sub_1000F40B4(v435, (uint64_t)v436, v437, v438, sub_100016F9C);
              (*(void (**)(char *, uint64_t))(v514 + 8))(v432, v433);
              (*(void (**)(char *, uint64_t))(v530 + 8))(v428, v518);
              v339 = v539;
              ((void (*)(char *, uint64_t))v539)(v542, v419);
              v340 = v543;
              uint64_t v341 = v419;
            }

            goto LABEL_109;
          case 1:
            v539 = v272;
            uint64_t v343 = v504;
            sub_10001DC4C(v525, v504, type metadata accessor for AccessoryCommand);
            v344 = v513;
            uint64_t v345 = v540;
            ((void (*)(char *, char *, uint64_t))v499)(v513, v542, v540);
            uint64_t v346 = *(unsigned __int8 *)(v502 + 80);
            uint64_t v347 = (v346 + 24) & ~v346;
            uint64_t v348 = *((unsigned __int8 *)v270 + 80);
            v349 = v270;
            uint64_t v350 = (v503 + v348 + v347) & ~v348;
            uint64_t v351 = v350 + v22;
            uint64_t v352 = v346 | v348 | 7;
            if (v313 == 6)
            {
              uint64_t v353 = swift_allocObject(&unk_10094C800, v350 + v22, v352);
              *(void *)(v353 + swift_weakDestroy(v0 + 16) = v537;
              sub_10002218C(v343, v353 + v347, type metadata accessor for AccessoryCommand);
              ((void (*)(uint64_t, char *, uint64_t))v349[4])(v353 + v350, v344, v345);
              v552 = sub_100289B64;
              uint64_t v553 = v353;
              uint64_t aBlock = _NSConcreteStackBlock;
              uint64_t v549 = 1107296256LL;
              v550 = sub_1001C31E8;
              v551 = &unk_10094C818;
            }

            else
            {
              uint64_t v439 = swift_allocObject(&unk_10094C7B0, v351 + 1, v352);
              *(void *)(v439 + swift_weakDestroy(v0 + 16) = v537;
              sub_10002218C(v343, v439 + v347, type metadata accessor for AccessoryCommand);
              ((void (*)(uint64_t, char *, uint64_t))v349[4])(v439 + v350, v344, v345);
              *(_BYTE *)(v439 + v351) = v313;
              v552 = sub_100289B4C;
              uint64_t v553 = v439;
              uint64_t aBlock = _NSConcreteStackBlock;
              uint64_t v549 = 1107296256LL;
              v550 = sub_1001C31E8;
              v551 = &unk_10094C7C8;
            }

            v354 = _Block_copy(&aBlock);
            uint64_t v440 = swift_retain();
            v441 = v517;
            static DispatchQoS.unspecified.getter(v440);
            uint64_t v544 = (uint64_t)_swiftEmptyArrayStorage;
            uint64_t v442 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            uint64_t v443 = sub_100004AEC((uint64_t *)&unk_1009AB860);
            uint64_t v444 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
            v445 = v515;
            uint64_t v446 = v516;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v544, v443, v444, v516, v442);
            id v447 = v500;
            OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v441, v445, v354);

            _Block_release(v354);
            uint64_t v448 = v531;
            v449 = v536;
            uint64_t v450 = v511;
            unint64_t v451 = (unint64_t)v541;
            sub_1000F40B4(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_100016F9C);
            sub_1000F40B4(v448, (uint64_t)v449, v450, v451, sub_100016F9C);
            (*(void (**)(char *, uint64_t))(v514 + 8))(v445, v446);
            (*(void (**)(char *, uint64_t))(v530 + 8))(v441, v518);
            v452 = v539;
            ((void (*)(char *, uint64_t))v539)(v542, v345);
            ((void (*)(char *, uint64_t))v452)(v543, v345);
            goto LABEL_103;
          case 4:
            uint64_t v380 = v504;
            sub_10001DC4C(v525, v504, type metadata accessor for AccessoryCommand);
            uint64_t v381 = *(unsigned __int8 *)(v502 + 80);
            uint64_t v382 = (v381 + 24) & ~v381;
            uint64_t v383 = v382 + v503;
            uint64_t v384 = v381 | 7;
            v385 = v542;
            if (v313 == 6)
            {
              uint64_t v386 = swift_allocObject(&unk_10094C760, v382 + v503, v384);
              *(void *)(v386 + swift_weakDestroy(v0 + 16) = v537;
              sub_10002218C(v380, v386 + v382, type metadata accessor for AccessoryCommand);
              v552 = sub_100289B44;
              uint64_t v553 = v386;
              uint64_t aBlock = _NSConcreteStackBlock;
              uint64_t v549 = 1107296256LL;
              v550 = sub_1001C31E8;
              v551 = &unk_10094C778;
            }

            else
            {
              uint64_t v458 = swift_allocObject(&unk_10094C710, v383 + 1, v384);
              *(void *)(v458 + swift_weakDestroy(v0 + 16) = v537;
              sub_10002218C(v380, v458 + v382, type metadata accessor for AccessoryCommand);
              *(_BYTE *)(v458 + v383) = v313;
              v552 = sub_100289B04;
              uint64_t v553 = v458;
              uint64_t aBlock = _NSConcreteStackBlock;
              uint64_t v549 = 1107296256LL;
              v550 = sub_1001C31E8;
              v551 = &unk_10094C728;
            }

            v387 = _Block_copy(&aBlock);
            uint64_t v459 = swift_retain();
            v460 = v517;
            static DispatchQoS.unspecified.getter(v459);
            uint64_t v544 = (uint64_t)_swiftEmptyArrayStorage;
            uint64_t v461 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            uint64_t v462 = sub_100004AEC((uint64_t *)&unk_1009AB860);
            uint64_t v463 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
            v464 = v515;
            uint64_t v465 = v516;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v544, v462, v463, v516, v461);
            id v466 = v500;
            OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v460, v464, v387);

            _Block_release(v387);
            uint64_t v467 = v531;
            v468 = v536;
            uint64_t v469 = v511;
            unint64_t v470 = (unint64_t)v541;
            sub_1000F40B4(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_100016F9C);
            sub_1000F40B4(v467, (uint64_t)v468, v469, v470, sub_100016F9C);
            (*(void (**)(char *, uint64_t))(v514 + 8))(v464, v465);
            (*(void (**)(char *, uint64_t))(v530 + 8))(v460, v518);
            uint64_t v471 = v540;
            ((void (*)(char *, uint64_t))v272)(v385, v540);
            ((void (*)(char *, uint64_t))v272)(v543, v471);
LABEL_103:
            uint64_t result = swift_release();
            char v89 = 0;
            __int128 v342 = xmmword_1007F8BC0;
            uint64_t v77 = v538;
            goto LABEL_84;
          case 7:
            v388 = v542;
            v389 = v543;
            if (*((_BYTE *)v537 + 176) == 1)
            {
              *((_BYTE *)v537 + 176) = 0;
              v390 = v315;
              uint64_t v391 = v540;
              uint64_t v392 = ((uint64_t (*)(char *, char *, uint64_t))v499)(v315, v389, v540);
              v393 = (os_log_s *)Logger.logObject.getter(v392);
              os_log_type_t v394 = static os_log_type_t.default.getter(v393);
              BOOL v395 = os_log_type_enabled(v393, v394);
              uint64_t v77 = v538;
              if (v395)
              {
                uint64_t v396 = swift_slowAlloc(22LL, -1LL);
                v539 = (void **)swift_slowAlloc(32LL, -1LL);
                uint64_t aBlock = v539;
                *(_DWORD *)uint64_t v396 = 141558275;
                uint64_t v544 = 1752392040LL;
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v396 + 4, v396 + 12);
                *(_WORD *)(v396 + 12) = 2081;
                uint64_t v397 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
                uint64_t v398 = dispatch thunk of CustomStringConvertible.description.getter(v391, v397);
                uint64_t v544 = sub_1003F11D4(v398, v399, (uint64_t *)&aBlock);
                UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v396 + 14, v396 + 22);
                swift_bridgeObjectRelease();
                ((void (*)(char *, uint64_t))v272)(v390, v391);
                _os_log_impl( (void *)&_mh_execute_header,  v393,  v394,  "Sending unpair command for beacon %{private,mask.hash}s.",  (uint8_t *)v396,  0x16u);
                v400 = v539;
                swift_arrayDestroy(v539, 1LL, (char *)&type metadata for Any + 8);
                swift_slowDealloc(v400, -1LL, -1LL);
                swift_slowDealloc(v396, -1LL, -1LL);

                uint64_t v401 = v531;
                v402 = v536;
                uint64_t v403 = v511;
                unint64_t v404 = (unint64_t)v541;
                sub_1000F40B4(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_100016F9C);
                sub_1000F40B4(v401, (uint64_t)v402, v403, v404, sub_100016F9C);
                ((void (*)(char *, uint64_t))v272)(v542, v391);
                v405 = v543;
              }

              else
              {

                uint64_t v494 = v531;
                v495 = v536;
                uint64_t v496 = v511;
                unint64_t v497 = (unint64_t)v541;
                sub_1000F40B4(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_100016F9C);
                sub_1000F40B4(v494, (uint64_t)v495, v496, v497, sub_100016F9C);
                ((void (*)(char *, uint64_t))v272)(v390, v391);
                ((void (*)(char *, uint64_t))v272)(v388, v391);
                v405 = v389;
              }

              uint64_t result = ((uint64_t (*)(char *, uint64_t))v272)(v405, v391);
              char v89 = 0;
              *(_OWORD *)uint64_t v77 = xmmword_1007F8BD0;
              *(_OWORD *)(v77 + swift_weakDestroy(v0 + 16) = xmmword_1007F8BC0;
              *(_BYTE *)(v77 + 32) = 0;
              goto LABEL_85;
            }

            v472 = (os_log_s *)Logger.logObject.getter(v312);
            os_log_type_t v473 = static os_log_type_t.default.getter(v472);
            BOOL v474 = os_log_type_enabled(v472, v473);
            uint64_t v77 = v538;
            uint64_t v475 = v540;
            if (v474)
            {
              v476 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
              *(_WORD *)v476 = 0;
              _os_log_impl((void *)&_mh_execute_header, v472, v473, "Ignoring .setMaxConnections response.", v476, 2u);
              swift_slowDealloc(v476, -1LL, -1LL);
            }

            uint64_t v477 = v531;
            v478 = v536;
            uint64_t v479 = v511;
            unint64_t v480 = (unint64_t)v541;
            sub_1000F40B4(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_100016F9C);
            sub_1000F40B4(v477, (uint64_t)v478, v479, v480, sub_100016F9C);
            ((void (*)(char *, uint64_t))v272)(v388, v475);
            uint64_t result = ((uint64_t (*)(char *, uint64_t))v272)(v389, v475);
            break;
          case 12:
            v539 = v272;
            uint64_t v406 = v504;
            sub_10001DC4C(v525, v504, type metadata accessor for AccessoryCommand);
            v407 = v513;
            uint64_t v408 = v540;
            ((void (*)(char *, char *, uint64_t))v499)(v513, v542, v540);
            uint64_t v409 = *(unsigned __int8 *)(v502 + 80);
            uint64_t v410 = (v409 + 24) & ~v409;
            uint64_t v411 = *((unsigned __int8 *)v270 + 80);
            v412 = v270;
            uint64_t v413 = (v503 + v411 + v410) & ~v411;
            uint64_t v414 = v413 + v22;
            uint64_t v415 = v409 | v411 | 7;
            if (v313 == 6)
            {
              uint64_t v416 = swift_allocObject(&unk_10094C8A0, v413 + v22, v415);
              *(void *)(v416 + swift_weakDestroy(v0 + 16) = v537;
              sub_10002218C(v406, v416 + v410, type metadata accessor for AccessoryCommand);
              ((void (*)(uint64_t, char *, uint64_t))v412[4])(v416 + v413, v407, v408);
              v552 = sub_100289C20;
              uint64_t v553 = v416;
              uint64_t aBlock = _NSConcreteStackBlock;
              uint64_t v549 = 1107296256LL;
              v550 = sub_1001C31E8;
              v551 = &unk_10094C8B8;
            }

            else
            {
              uint64_t v481 = swift_allocObject(&unk_10094C850, v414 + 1, v415);
              *(void *)(v481 + swift_weakDestroy(v0 + 16) = v537;
              sub_10002218C(v406, v481 + v410, type metadata accessor for AccessoryCommand);
              ((void (*)(uint64_t, char *, uint64_t))v412[4])(v481 + v413, v407, v408);
              *(_BYTE *)(v481 + v414) = v313;
              v552 = sub_100289B7C;
              uint64_t v553 = v481;
              uint64_t aBlock = _NSConcreteStackBlock;
              uint64_t v549 = 1107296256LL;
              v550 = sub_1001C31E8;
              v551 = &unk_10094C868;
            }

            v417 = _Block_copy(&aBlock);
            uint64_t v482 = swift_retain();
            v483 = v517;
            static DispatchQoS.unspecified.getter(v482);
            uint64_t v544 = (uint64_t)_swiftEmptyArrayStorage;
            uint64_t v484 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            uint64_t v485 = sub_100004AEC((uint64_t *)&unk_1009AB860);
            uint64_t v486 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
            v487 = v515;
            uint64_t v488 = v516;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v544, v485, v486, v516, v484);
            id v489 = v500;
            OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v483, v487, v417);

            _Block_release(v417);
            uint64_t v490 = v531;
            v491 = v536;
            uint64_t v492 = v511;
            unint64_t v493 = (unint64_t)v541;
            sub_1000F40B4(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_100016F9C);
            sub_1000F40B4(v490, (uint64_t)v491, v492, v493, sub_100016F9C);
            (*(void (**)(char *, uint64_t))(v514 + 8))(v487, v488);
            (*(void (**)(char *, uint64_t))(v530 + 8))(v483, v518);
            v339 = v539;
            ((void (*)(char *, uint64_t))v539)(v542, v408);
            v340 = v543;
            uint64_t v341 = v408;
LABEL_109:
            ((void (*)(char *, uint64_t))v339)(v340, v341);
            uint64_t result = swift_release();
            goto LABEL_37;
          default:
            v539 = v272;
            v355 = v543;
            uint64_t v356 = v540;
            v357 = v499;
            ((void (*)(char *, char *, uint64_t))v499)(v509, v543, v540);
            v358 = v501;
            uint64_t v359 = ((uint64_t (*)(char *, char *, uint64_t))v357)(v501, v542, v356);
            v360 = (os_log_s *)Logger.logObject.getter(v359);
            os_log_type_t v361 = static os_log_type_t.error.getter(v360);
            if (os_log_type_enabled(v360, v361))
            {
              uint64_t v362 = swift_slowAlloc(52LL, -1LL);
              v537 = (void **)swift_slowAlloc(128LL, -1LL);
              uint64_t aBlock = v537;
              *(_DWORD *)uint64_t v362 = 136316163;
              uint64_t v363 = sub_1000F335C(v250);
              v364 = v314;
              uint64_t v544 = sub_1003F11D4(v363, v365, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v362 + 4, v362 + 12);
              swift_bridgeObjectRelease();
              *(_WORD *)(v362 + 12) = 2080;
              uint64_t v366 = sub_10015A6A0(v313);
              uint64_t v544 = sub_1003F11D4(v366, v367, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v362 + 14, v362 + 22);
              swift_bridgeObjectRelease();
              *(_WORD *)(v362 + 22) = 2160;
              uint64_t v544 = 1752392040LL;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v362 + 24, v362 + 32);
              *(_WORD *)(v362 + 32) = 2081;
              uint64_t v368 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
              uint64_t v369 = dispatch thunk of CustomStringConvertible.description.getter(v356, v368);
              uint64_t v544 = sub_1003F11D4(v369, v370, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v362 + 34, v362 + 42);
              swift_bridgeObjectRelease();
              v371 = v364;
              v372 = v539;
              ((void (*)(char *, uint64_t))v539)(v371, v356);
              *(_WORD *)(v362 + 42) = 2082;
              uint64_t v373 = dispatch thunk of CustomStringConvertible.description.getter(v356, v368);
              uint64_t v544 = sub_1003F11D4(v373, v374, (uint64_t *)&aBlock);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v362 + 44, v362 + 52);
              swift_bridgeObjectRelease();
              ((void (*)(char *, uint64_t))v372)(v358, v356);
              _os_log_impl( (void *)&_mh_execute_header,  v360,  v361,  "Unsupported %s. Status %s. Beacon %{private,mask.hash}s Command %{public}s.",  (uint8_t *)v362,  0x34u);
              v375 = v537;
              swift_arrayDestroy(v537, 4LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v375, -1LL, -1LL);
              swift_slowDealloc(v362, -1LL, -1LL);

              uint64_t v376 = v531;
              v377 = v536;
              uint64_t v378 = v511;
              unint64_t v379 = (unint64_t)v541;
              sub_1000F40B4(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_100016F9C);
              sub_1000F40B4(v376, (uint64_t)v377, v378, v379, sub_100016F9C);
              ((void (*)(char *, uint64_t))v372)(v542, v356);
              uint64_t result = ((uint64_t (*)(char *, uint64_t))v372)(v543, v356);
            }

            else
            {

              uint64_t v453 = v531;
              v454 = v536;
              uint64_t v455 = v511;
              unint64_t v456 = (unint64_t)v541;
              sub_1000F40B4(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_100016F9C);
              sub_1000F40B4(v453, (uint64_t)v454, v455, v456, sub_100016F9C);
              v457 = v539;
              ((void (*)(char *, uint64_t))v539)(v358, v356);
              ((void (*)(char *, uint64_t))v457)(v314, v356);
              ((void (*)(char *, uint64_t))v457)(v542, v356);
              uint64_t result = ((uint64_t (*)(char *, uint64_t))v457)(v355, v356);
            }

            goto LABEL_37;
        }

        goto LABEL_38;
      }

      id v201 = v543;
      if (qword_10099B220 != -1) {
        swift_once(&qword_10099B220, sub_1002673AC);
      }
      uint64_t v202 = type metadata accessor for Logger(0LL);
      sub_10000A720(v202, (uint64_t)qword_100A2A470);
      uint64_t v203 = v506;
      uint64_t v204 = v540;
      ((void (*)(char *, char *, uint64_t))v63)(v506, v201, v540);
      uint64_t v205 = ((uint64_t (*)(char *, char *, uint64_t))v63)(v521, v199, v204);
      uint64_t v206 = (os_log_s *)Logger.logObject.getter(v205);
      os_log_type_t v207 = static os_log_type_t.error.getter(v206);
      if (os_log_type_enabled(v206, v207))
      {
        uint64_t v208 = swift_slowAlloc(36LL, -1LL);
        v537 = (void **)swift_slowAlloc(64LL, -1LL);
        uint64_t aBlock = v537;
        *(_DWORD *)uint64_t v208 = 33686531;
        LOWORD(v544) = v197;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, (char *)&v544 + 2, v208 + 4, v208 + 6);
        *(_WORD *)(v208 + 6) = 2160;
        uint64_t v544 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v208 + 8, v208 + 16);
        *(_WORD *)(v208 + swift_weakDestroy(v0 + 16) = 2081;
        uint64_t v209 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v210 = dispatch thunk of CustomStringConvertible.description.getter(v204, v209);
        uint64_t v544 = sub_1003F11D4(v210, v211, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v208 + 18, v208 + 26);
        swift_bridgeObjectRelease();
        v212 = v521;
        uint64_t v213 = (void (*)(char *, uint64_t))v539[1];
        v213(v203, v204);
        *(_WORD *)(v208 + 26) = 2082;
        uint64_t v214 = dispatch thunk of CustomStringConvertible.description.getter(v204, v209);
        uint64_t v544 = sub_1003F11D4(v214, v215, (uint64_t *)&aBlock);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v544, v545, v208 + 28, v208 + 36);
        swift_bridgeObjectRelease();
        v213(v212, v204);
        _os_log_impl( (void *)&_mh_execute_header,  v206,  v207,  "Invalid opcode: %{public}hu. Beacon %{private,mask.hash}s Command %{public}s.",  (uint8_t *)v208,  0x24u);
        uint64_t v216 = v537;
        swift_arrayDestroy(v537, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v216, -1LL, -1LL);
        swift_slowDealloc(v208, -1LL, -1LL);

        uint64_t v217 = v531;
        uint64_t v218 = v536;
        uint64_t v219 = v511;
        unint64_t v220 = (unint64_t)v541;
        sub_1000F40B4(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_100016F9C);
        sub_1000F40B4(v217, (uint64_t)v218, v219, v220, sub_100016F9C);
        v213(v542, v204);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v213)(v543, v204);
      }

      else
      {

        uint64_t v306 = v531;
        v307 = v536;
        uint64_t v308 = v511;
        unint64_t v309 = (unint64_t)v541;
        sub_1000F40B4(v531, (uint64_t)v536, v511, (unint64_t)v541, sub_100016F9C);
        sub_1000F40B4(v306, (uint64_t)v307, v308, v309, sub_100016F9C);
        v310 = (void (*)(char *, uint64_t))v539[1];
        v310(v521, v204);
        v310(v203, v204);
        v310(v199, v204);
        uint64_t result = ((uint64_t (*)(char *, uint64_t))v310)(v201, v204);
      }

LABEL_83:
  char v89 = 0;
  __int128 v342 = xmmword_1007F8BC0;
LABEL_84:
  *(_OWORD *)uint64_t v77 = v342;
  *(_OWORD *)(v77 + swift_weakDestroy(v0 + 16) = v342;
  *(_BYTE *)(v77 + 32) = 1;
LABEL_85:
  *(_BYTE *)(v77 + 41) = v89;
  return result;
}

        if ((v70 & 1) != 0) {
          goto LABEL_123;
        }
        uint64_t v78 = &v45[16 * v47];
        uint64_t v80 = *(void *)v78;
        uint64_t v79 = *((void *)v78 + 1);
        uint64_t v58 = __OFSUB__(v79, v80);
        unint64_t v81 = v79 - v80;
        if (v58) {
          goto LABEL_126;
        }
        if (v81 < v69) {
          goto LABEL_15;
        }
LABEL_91:
        unint64_t v86 = v47 - 1;
        if (v47 - 1 >= v13)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }

        if (!v11) {
          goto LABEL_141;
        }
        os_log_t v87 = &v45[16 * v86];
        uint64_t v88 = *(void *)v87;
        char v89 = &v45[16 * v47];
        uint64_t v90 = *((void *)v89 + 1);
        sub_10069A198( (char *)(v11 + 16LL * *(void *)v87),  (char *)(v11 + 16LL * *(void *)v89),  v11 + 16 * v90,  __dst);
        if (v1) {
          goto LABEL_99;
        }
        if (v90 < v88) {
          goto LABEL_116;
        }
        if (v47 > *((void *)v12 + 2)) {
          goto LABEL_117;
        }
        *(void *)os_log_t v87 = v88;
        *(void *)&v45[16 * v86 + 8] = v90;
        unint64_t v91 = *((void *)v12 + 2);
        if (v47 >= v91) {
          goto LABEL_118;
        }
        uint64_t v13 = v91 - 1;
        memmove(&v45[16 * v47], v89 + 16, 16 * (v91 - 1 - v47));
        *((void *)v12 + 2) = v91 - 1;
        uint64_t v11 = v107;
        if (v91 <= 2) {
          goto LABEL_15;
        }
      }
    }

    uint64_t v13 = 1LL;
LABEL_15:
    uint64_t v6 = v105;
    uint64_t v3 = v106;
    if (v10 >= v106)
    {
      uint64_t v9 = v104;
      goto LABEL_102;
    }
  }

uint64_t sub_100283060(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t result = swift_unknownObjectWeakLoadStrong(a1 + 40);
  if (result)
  {
    uint64_t v5 = result;
    uint64_t v6 = type metadata accessor for OwnerCommandManager.Error(0LL);
    uint64_t v7 = sub_100007864(&qword_1009A78C0, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_1007F8DC0);
    uint64_t v8 = swift_allocError(v6, v7, 0LL, 0LL);
    *uint64_t v9 = a3;
    swift_storeEnumTagMultiPayload(v9, v6, 2LL);
    swift_retain();
    swift_errorRelease(v8);
    swift_unknownObjectRelease(v5);
    return swift_release();
  }

  return result;
}

uint64_t sub_100283124( uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t (*a5)(void, void))
{
  uint64_t result = swift_unknownObjectWeakLoadStrong(a1 + 40);
  if (result)
  {
    uint64_t v10 = result;
    uint64_t v11 = a2 + *(int *)(type metadata accessor for AccessoryCommand(0LL) + 20);
    swift_retain();
    sub_100288F7C(v11, a3, 0LL, v10, a4, a5);
    swift_release();
    return swift_unknownObjectRelease(v10);
  }

  return result;
}

uint64_t sub_1002831C4( uint64_t a1, uint64_t a2, uint64_t a3, char a4, const char *a5, uint64_t (*a6)(void, void))
{
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v26 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a1 + 40);
  if (result)
  {
    uint64_t v17 = result;
    uint64_t v18 = type metadata accessor for AccessoryCommand(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a2 + *(int *)(v18 + 20), v12);
    uint64_t v19 = type metadata accessor for OwnerCommandManager.Error(0LL);
    uint64_t v20 = sub_100007864(&qword_1009A78C0, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_1007F8DC0);
    uint64_t v21 = swift_allocError(v19, v20, 0LL, 0LL);
    char v22 = a4;
    uint64_t v23 = a6;
    uint64_t v24 = v21;
    *uint64_t v25 = v22;
    swift_storeEnumTagMultiPayload(v25, v19, 2LL);
    swift_retain();
    sub_100288F7C((uint64_t)v15, a3, v24, v17, a5, v23);
    swift_errorRelease(v24);
    swift_unknownObjectRelease(v17);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    return swift_release();
  }

  return result;
}

uint64_t sub_100283328( uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t (*a5)(void, void))
{
  uint64_t result = swift_unknownObjectWeakLoadStrong(a1 + 40);
  if (result)
  {
    uint64_t v10 = result;
    swift_retain();
    sub_100288F7C(a2, a3, 0LL, v10, a4, a5);
    swift_release();
    return swift_unknownObjectRelease(v10);
  }

  return result;
}

uint64_t sub_1002833B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v7 = type metadata accessor for DispatchPredicate(0LL);
  unint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (uint64_t)&v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void **)(v4 + 72);
  *(void *)uint64_t v10 = v11;
  (*(void (**)(uint64_t, void, uint64_t))(v8 + 104))(v10, enum case for DispatchPredicate.onQueue(_:), v7);
  id v12 = v11;
  uint64_t v13 = _dispatchPreconditionTest(_:)(v10);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v10, v7);
  if ((v13 & 1) == 0)
  {
    __break(1u);
LABEL_14:
    swift_once(&qword_10099B220, sub_1002673AC);
    goto LABEL_5;
  }

  sub_10001581C(a1, (uint64_t)&v39, &qword_1009A7998);
  if ((v44 & 1) != 0)
  {
    sub_100254338((uint64_t)&v39, (uint64_t)&v37);
    sub_100254374(&v37, (uint64_t)v36);
    uint64_t v14 = swift_allocObject(&unk_10094C620, 57LL, 7LL);
    sub_100254338((uint64_t)v36, v14 + 16);
    uint64_t v15 = sub_100004AEC(&qword_1009A7988);
    swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
    uint64_t v16 = Future.init(_:)(sub_10028990C, v14);
    sub_1002543B0(&v37);
    return v16;
  }

  a1 = v39;
  uint64_t v10 = v40;
  uint64_t v13 = v41;
  unint64_t v8 = v42;
  int v3 = v43;
  sub_100289914(v39, v40, v41, v42);
  if (qword_10099B220 != -1) {
    goto LABEL_14;
  }
LABEL_5:
  uint64_t v17 = type metadata accessor for Logger(0LL);
  sub_10000A720(v17, (uint64_t)qword_100A2A470);
  sub_100289914(a1, v10, v13, v8);
  uint64_t v18 = sub_100289914(a1, v10, v13, v8);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.info.getter(v19);
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v35 = v4;
    uint64_t v21 = swift_slowAlloc(12LL, -1LL);
    uint64_t v34 = a2;
    char v22 = (uint8_t *)v21;
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    int v33 = v3;
    *(_DWORD *)char v22 = 136315138;
    v36[0] = v23;
    uint64_t v32 = v22 + 4;
    uint64_t v37 = a1;
    v38[0] = v10;
    v38[1] = v13;
    v38[2] = v8;
    sub_100289914(a1, v10, v13, v8);
    uint64_t v24 = sub_100004AEC(&qword_1009A79A0);
    uint64_t v25 = String.init<A>(describing:)(&v37, v24);
    uint64_t v37 = sub_1003F11D4(v25, v26, v36);
    LOBYTE(v3) = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, v38, v32, v22 + 12);
    swift_bridgeObjectRelease();
    sub_100289940(a1, v10, v13, v8);
    sub_100289940(a1, v10, v13, v8);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Sending: %s", v22, 0xCu);
    swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1LL, -1LL);
    uint64_t v27 = v22;
    a2 = v34;
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  else
  {
    sub_100289940(a1, v10, v13, v8);
    sub_100289940(a1, v10, v13, v8);
  }

  if ((~(v10 & v8) & 0x3000000000000000LL) != 0)
  {
    sub_100289914(a1, v10, v13, v8);
    uint64_t v16 = sub_100283894(a1, v10, v13, v8, a2);
    sub_100289940(a1, v10, v13, v8);
    sub_100289940(a1, v10, v13, v8);
  }

  else
  {
    uint64_t v28 = swift_allocObject(&unk_10094C648, 17LL, 7LL);
    *(_BYTE *)(v28 + swift_weakDestroy(v0 + 16) = v3;
    uint64_t v29 = sub_100004AEC(&qword_1009A7988);
    swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
    uint64_t v16 = Future.init(_:)(sub_10028997C, v28);
  }

  sub_100289940(a1, v10, v13, v8);
  return v16;
}

uint64_t sub_100283814(void (*a1)(void *), uint64_t a2, void *a3)
{
  unint64_t v5 = sub_100122CD4();
  uint64_t v6 = swift_allocError(&type metadata for CentralManager.Error, v5, 0LL, 0LL);
  sub_100254374(a3, v7);
  v9[0] = v6;
  __int16 v10 = 256;
  a1(v9);
  return sub_100015794((uint64_t)v9, &qword_1009A7950);
}

uint64_t sub_100283894(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5)
{
  uint64_t v11 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = *(void **)(v5 + 72);
  *uint64_t v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) != 0)
  {
    uint64_t v18 = swift_allocObject(&unk_10094C558, 24LL, 7LL);
    swift_weakInit(v18 + 16, v5);
    uint64_t v19 = (void *)swift_allocObject(&unk_10094C5F8, 64LL, 7LL);
    void v19[2] = v18;
    v19[3] = a1;
    v19[4] = a2;
    v19[5] = a3;
    v19[6] = a4;
    v19[7] = a5;
    uint64_t v20 = sub_100004AEC(&qword_1009A7988);
    swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
    sub_1000F40B4(a1, a2, a3, a4, sub_10001736C);
    swift_retain();
    return Future.init(_:)(sub_100289868, v19);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100283A04( void (*a1)(void), uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v32 = a8;
  uint64_t v15 = type metadata accessor for BinaryEncoder(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v31 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a3 += 16LL;
  swift_beginAccess(a3, v39, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a3);
  if (Strong)
  {
    uint64_t v20 = Strong;
    uint64_t v33 = v16;
    uint64_t v34 = v15;
    uint64_t v21 = *(void *)(Strong + 128);
    uint64_t v22 = *(void *)(Strong + 136);
    uint64_t v31 = a1;
    *(void *)(Strong + 128) = a1;
    *(void *)(Strong + 136) = a2;
    swift_retain();
    uint64_t v23 = sub_10002214C(v21, v22);
    BinaryEncoder.init()(v23);
    *(void *)&__int128 v35 = a4;
    *((void *)&v35 + 1) = a5;
    *(void *)&__int128 v36 = a6;
    *((void *)&v36 + 1) = a7;
    unint64_t v24 = sub_1002896D0();
    uint64_t v25 = BinaryEncoder.encode<A>(_:)(&v35, &type metadata for AccessoryConfigCommand, v24);
    unint64_t v27 = v26;
    uint64_t v28 = Data.chunked(into:)(255LL, v25, v26);
    uint64_t v29 = sub_100289364(v28);
    swift_bridgeObjectRelease();
    swift_beginAccess(v20 + 144, &v35, 33LL, 0LL);
    sub_100184CE4((uint64_t)v29);
    swift_endAccess(&v35);
    sub_100284F14(v32);
    sub_100016F9C(v25, v27);
    swift_release();
    return (*(uint64_t (**)(char *, uint64_t))(v33 + 8))(v18, v34);
  }

  else
  {
    uint64_t v37 = 0LL;
    __int128 v35 = 0u;
    __int128 v36 = 0u;
    __int16 v38 = 267;
    a1(&v35);
    return sub_100015794((uint64_t)&v35, &qword_1009A7950);
  }

uint64_t sub_100283DC0(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (void *)((char *)v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v12 = *(void **)(v4 + 72);
  *uint64_t v11 = v12;
  (*(void (**)(void *, void, uint64_t))(v9 + 104))(v11, enum case for DispatchPredicate.onQueue(_:), v8);
  id v13 = v12;
  LOBYTE(v12) = _dispatchPreconditionTest(_:)(v11);
  (*(void (**)(void *, uint64_t))(v9 + 8))(v11, v8);
  if ((v12 & 1) != 0)
  {
    if (qword_10099B220 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B220, sub_1002673AC);
LABEL_3:
  uint64_t v14 = type metadata accessor for Logger(0LL);
  sub_10000A720(v14, (uint64_t)qword_100A2A470);
  sub_10001736C(a1, a2);
  uint64_t v15 = sub_10001736C(a1, a2);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.info.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (_DWORD *)swift_slowAlloc(22LL, -1LL);
    v23[3] = swift_slowAlloc(32LL, -1LL);
    *uint64_t v18 = 134218242;
    __asm { BR              X10 }
  }

  sub_100016F9C(a1, a2);
  sub_100016F9C(a1, a2);

  uint64_t v19 = swift_allocObject(&unk_10094C558, 24LL, 7LL);
  swift_weakInit(v19 + 16, v4);
  uint64_t v20 = swift_allocObject(&unk_10094C5A8, 48LL, 7LL);
  *(void *)(v20 + swift_weakDestroy(v0 + 16) = v19;
  *(_BYTE *)(v20 + 24) = a3 & 1;
  *(void *)(v20 + 32) = a1;
  *(void *)(v20 + 40) = a2;
  uint64_t v21 = sub_100004AEC(&qword_1009A7958);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  sub_10001736C(a1, a2);
  return Future.init(_:)(sub_10028967C, v20);
}

void sub_100284120( void (*a1)(__int128 *), uint64_t a2, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  unint64_t v131 = a6;
  uint64_t v11 = type metadata accessor for BinaryDecodingError(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v116 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009A4880);
  __chkstk_darwin(v15);
  unint64_t v126 = (char *)&v116 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v128 = type metadata accessor for Bit(0LL);
  uint64_t v127 = *(void *)(v128 - 8);
  uint64_t v17 = __chkstk_darwin(v128);
  uint64_t v123 = (char *)&v116 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  os_log_t v124 = (char *)&v116 - v19;
  uint64_t v20 = type metadata accessor for BinaryDecoder(0LL);
  uint64_t v129 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v116 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a3 += 16LL;
  swift_beginAccess(a3, v144, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(a3);
  uint64_t v130 = Strong;
  if (!Strong)
  {
    unint64_t v141 = 0LL;
    __int128 v139 = 0u;
    __int128 v140 = 0u;
    LOBYTE(v142) = 11;
    char v143 = 1;
    a1(&v139);
    sub_100015794((uint64_t)&v139, &qword_1009A7960);
    return;
  }

  uint64_t v125 = a2;
  unint64_t v122 = a1;
  BinaryDecoder.init()(Strong);
  if ((a4 & 1) != 0)
  {
    uint64_t v24 = v20;
    *((void *)&v140 + 1) = &type metadata for AirTagCommand;
    unint64_t v25 = sub_1002897A0();
    unint64_t v141 = v25;
    unint64_t v142 = sub_1002897E4();
    BinaryDecoder.decode<A>(_:from:)( &v139,  &type metadata for AirTagCommand,  a5,  v131,  &type metadata for AirTagCommand,  v25);
    os_log_type_t v63 = v22;
    sub_100289744(&v139, v138);
LABEL_17:
    uint64_t v64 = *(void *)(v130 + 152);
    unint64_t v65 = *(void *)(v130 + 160);
    *(_OWORD *)(v130 + 152) = xmmword_1007E7660;
    sub_1000182F0(v64, v65);
    sub_10028975C((uint64_t)v138, (uint64_t)&v139);
    char v143 = 0;
    v122(&v139);
    swift_release();
    sub_100015794((uint64_t)&v139, &qword_1009A7960);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v138);
    (*(void (**)(char *, uint64_t))(v129 + 8))(v63, v24);
    return;
  }

  uint64_t v121 = v14;
  uint64_t v119 = v12;
  uint64_t v120 = v11;
  uint64_t v26 = *(void *)(v130 + 152);
  unint64_t v27 = *(void *)(v130 + 160);
  if (v27 >> 60 == 15) {
    uint64_t v28 = 0LL;
  }
  else {
    uint64_t v28 = *(void *)(v130 + 152);
  }
  unint64_t v29 = 0xC000000000000000LL;
  if (v27 >> 60 != 15) {
    unint64_t v29 = *(void *)(v130 + 160);
  }
  uint64_t v136 = v28;
  unint64_t v137 = v29;
  sub_100018BE4(v26, v27);
  uint64_t v30 = v131;
  sub_10001736C(a5, v131);
  sub_1004C990C(1LL, a5, v30);
  __int128 v31 = v139;
  Data.append(_:)(v139, *((void *)&v139 + 1));
  sub_100016F9C(v31, *((unint64_t *)&v31 + 1));
  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v32 = type metadata accessor for Logger(0LL);
  uint64_t v33 = sub_10000A720(v32, (uint64_t)qword_100A2A470);
  uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
  os_log_type_t v35 = static os_log_type_t.info.getter(v34);
  BOOL v36 = os_log_type_enabled(v34, v35);
  uint64_t v117 = v20;
  uint64_t v118 = v22;
  if (v36)
  {
    uint64_t v37 = swift_slowAlloc(12LL, -1LL);
    uint64_t v116 = a5;
    __int16 v38 = (uint8_t *)v37;
    uint64_t v39 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 v139 = v39;
    *(_DWORD *)__int16 v38 = 136315138;
    swift_beginAccess(&v136, v132, 0LL, 0LL);
    uint64_t v40 = v136;
    unint64_t v41 = v137;
    sub_10001736C(v136, v137);
    uint64_t v42 = Data.description.getter(v40, v41);
    unint64_t v44 = v43;
    sub_100016F9C(v40, v41);
    uint64_t v134 = sub_1003F11D4(v42, v44, (uint64_t *)&v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, &v135, v38 + 4, v38 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v34, v35, "localReadBuffer %s", v38, 0xCu);
    swift_arrayDestroy(v39, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1LL, -1LL);
    uint64_t v45 = v38;
    a5 = v116;
    swift_slowDealloc(v45, -1LL, -1LL);
  }

  uint64_t v46 = v120;
  uint64_t v47 = v119;
  uint64_t v48 = v121;
  uint64_t v49 = v128;
  swift_beginAccess(&v136, &v134, 0LL, 0LL);
  uint64_t v50 = v136;
  unint64_t v51 = v137;
  uint64_t v52 = v130;
  uint64_t v53 = *(void *)(v130 + 152);
  unint64_t v54 = *(void *)(v130 + 160);
  *(void *)(v130 + 152) = v136;
  *(void *)(v52 + 160) = v51;
  sub_10001736C(v50, v51);
  sub_1000182F0(v53, v54);
  unint64_t v55 = v131;
  sub_10001736C(a5, v131);
  sub_1006F2B10(a5, v55);
  __int16 v57 = v56;
  sub_100016F9C(a5, v55);
  uint64_t v58 = v127;
  uint64_t v59 = (uint64_t)v126;
  if ((v57 & 0x100) != 0) {
    goto LABEL_21;
  }
  LOBYTE(v139) = v57;
  unint64_t v60 = sub_100041584();
  uint64_t v61 = FixedWidthInteger.bits()(&type metadata for UInt8, v60);
  if (*(void *)(v61 + 16))
  {
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v58 + 16))( v59,  v61 + ((*(unsigned __int8 *)(v58 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v58 + 80)),  v49);
    uint64_t v62 = 0LL;
  }

  else
  {
    uint64_t v62 = 1LL;
  }

  uint64_t v66 = v124;
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v58 + 56))(v59, v62, 1LL, v49);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v58 + 48))(v59, 1LL, v49) == 1)
  {
    sub_100015794(v59, &qword_1009A4880);
LABEL_21:
    uint64_t v67 = type metadata accessor for OwnerCommandManager.Error(0LL);
    uint64_t v68 = sub_100007864(&qword_1009A78C0, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_1007F8DC0);
    uint64_t v69 = swift_allocError(v67, v68, 0LL, 0LL);
    uint64_t v71 = swift_storeEnumTagMultiPayload(v70, v67, 3LL);
    swift_willThrow(v71);
    (*(void (**)(char *, uint64_t))(v129 + 8))(v118, v117);
    sub_100016F9C(v136, v137);
    goto LABEL_25;
  }

  uint64_t v116 = a5;
  (*(void (**)(char *, uint64_t, uint64_t))(v58 + 32))(v66, v59, v49);
  uint64_t v72 = v66;
  uint64_t v73 = v123;
  (*(void (**)(char *, void, uint64_t))(v58 + 104))(v123, enum case for Bit.one(_:), v49);
  uint64_t v74 = sub_100007864( (unint64_t *)&qword_10099DAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for Bit,  (uint64_t)&protocol conformance descriptor for Bit);
  dispatch thunk of RawRepresentable.rawValue.getter(&v139, v49, v74);
  dispatch thunk of RawRepresentable.rawValue.getter(&v133, v49, v74);
  int v75 = v139;
  LODWORD(v74) = v133;
  BOOL v76 = *(void (**)(char *, uint64_t))(v58 + 8);
  v76(v73, v49);
  if (v75 == (_DWORD)v74)
  {
    uint64_t v77 = v136;
    unint64_t v78 = v137;
    *((void *)&v140 + 1) = &type metadata for AccessoryConfigCommand;
    unint64_t v79 = sub_10028968C();
    unint64_t v141 = v79;
    unint64_t v142 = sub_1002896D0();
    uint64_t v80 = swift_allocObject(&unk_10094C5D0, 48LL, 7LL);
    unint64_t v81 = (void *)(v80 + 16);
    *(void *)&__int128 v139 = v80;
    sub_10001736C(v77, v78);
    unint64_t v82 = v79;
    uint64_t v83 = v118;
    BinaryDecoder.decode<A>(_:from:)( v81,  &type metadata for AccessoryConfigCommand,  v77,  v78,  &type metadata for AccessoryConfigCommand,  v82);
    os_log_type_t v63 = v83;
    v76(v124, v49);
    sub_100016F9C(v77, v78);
    sub_100289744(&v139, v138);
    sub_100016F9C(v136, v137);
    uint64_t v24 = v117;
    goto LABEL_17;
  }

  uint64_t v84 = sub_100007864( (unint64_t *)&qword_1009A27E0,  (uint64_t (*)(uint64_t))&type metadata accessor for BinaryDecodingError,  (uint64_t)&protocol conformance descriptor for BinaryDecodingError);
  uint64_t v69 = swift_allocError(v46, v84, 0LL, 0LL);
  uint64_t v86 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v47 + 104))( v85,  enum case for BinaryDecodingError.insufficientData(_:),  v46);
  swift_willThrow(v86);
  v76(v72, v49);
  (*(void (**)(char *, uint64_t))(v129 + 8))(v118, v117);
  sub_100016F9C(v136, v137);
  a5 = v116;
  uint64_t v48 = v121;
LABEL_25:
  *(void *)&__int128 v139 = v69;
  swift_errorRetain(v69);
  uint64_t v87 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  if (swift_dynamicCast(v48, &v139, v87, v46, 0LL))
  {
    if ((*(unsigned int (**)(char *, uint64_t))(v47 + 88))(v48, v46) == enum case for BinaryDecodingError.insufficientData(_:))
    {
      swift_errorRelease(v69);
      if (qword_10099B220 != -1) {
        swift_once(&qword_10099B220, sub_1002673AC);
      }
      uint64_t v88 = type metadata accessor for Logger(0LL);
      uint64_t v89 = sub_10000A720(v88, (uint64_t)qword_100A2A470);
      uint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
      os_log_type_t v91 = static os_log_type_t.info.getter(v90);
      if (os_log_type_enabled(v90, v91))
      {
        uint64_t v92 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v92 = 0;
        _os_log_impl((void *)&_mh_execute_header, v90, v91, "insufficientData. Keep reading...", v92, 2u);
        swift_slowDealloc(v92, -1LL, -1LL);

        swift_release();
      }

      else
      {
        swift_release();
      }

      uint64_t v115 = v139;
      goto LABEL_42;
    }

    (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v46);
  }

  swift_errorRelease(v139);
  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v93 = type metadata accessor for Logger(0LL);
  uint64_t v94 = sub_10000A720(v93, (uint64_t)qword_100A2A470);
  unint64_t v95 = v131;
  sub_10001736C(a5, v131);
  uint64_t v96 = sub_10001736C(a5, v95);
  uint64_t v129 = v94;
  uint64_t v97 = (os_log_s *)Logger.logObject.getter(v96);
  os_log_type_t v98 = static os_log_type_t.error.getter(v97);
  if (os_log_type_enabled(v97, v98))
  {
    uint64_t v99 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v100 = swift_slowAlloc(32LL, -1LL);
    unint64_t v101 = v131;
    uint64_t v102 = v100;
    *(void *)&__int128 v139 = v100;
    *(_DWORD *)uint64_t v99 = 136446210;
    uint64_t v128 = (uint64_t)(v99 + 4);
    uint64_t v103 = Data.hexString.getter(a5, v101);
    *(void *)&v138[0] = sub_1003F11D4(v103, v104, (uint64_t *)&v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v138, (char *)v138 + 8, v128, v99 + 12);
    swift_bridgeObjectRelease();
    sub_100016F9C(a5, v101);
    sub_100016F9C(a5, v101);
    _os_log_impl((void *)&_mh_execute_header, v97, v98, "Failed to decode data %{public}s", v99, 0xCu);
    swift_arrayDestroy(v102, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v102, -1LL, -1LL);
    swift_slowDealloc(v99, -1LL, -1LL);
  }

  else
  {
    unint64_t v105 = v131;
    sub_100016F9C(a5, v131);
    sub_100016F9C(a5, v105);
  }

  uint64_t v106 = *(void *)(v130 + 152);
  unint64_t v107 = *(void *)(v130 + 160);
  *(_OWORD *)(v130 + 152) = xmmword_1007E7660;
  sub_1000182F0(v106, v107);
  swift_errorRetain(v69);
  uint64_t v108 = swift_errorRetain(v69);
  uint64_t v109 = (void *)Logger.logObject.getter(v108);
  os_log_type_t v110 = static os_log_type_t.default.getter(v109);
  if (!os_log_type_enabled((os_log_t)v109, v110))
  {
    swift_release();
    swift_errorRelease(v69);
    swift_errorRelease(v69);
    swift_errorRelease(v69);

    return;
  }

  uint64_t v111 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v112 = swift_slowAlloc(32LL, -1LL);
  *(void *)&__int128 v139 = v112;
  *(_DWORD *)uint64_t v111 = 136446210;
  *(void *)&v138[0] = v69;
  swift_errorRetain(v69);
  uint64_t v113 = String.init<A>(describing:)(v138, v87);
  *(void *)&v138[0] = sub_1003F11D4(v113, v114, (uint64_t *)&v139);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v138, (char *)v138 + 8, v111 + 4, v111 + 12);
  swift_bridgeObjectRelease();
  swift_errorRelease(v69);
  swift_errorRelease(v69);
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v109,  v110,  "Ignoring unhandled commands for now. Error: %{public}s",  v111,  0xCu);
  swift_arrayDestroy(v112, 1LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v112, -1LL, -1LL);
  swift_slowDealloc(v111, -1LL, -1LL);

  swift_release();
  uint64_t v115 = v69;
LABEL_42:
  swift_errorRelease(v115);
}

void sub_100284F14(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100004AEC(&qword_1009B0670);
  __chkstk_darwin(v4);
  __int16 v56 = (char *)v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_1009A78F8);
  uint64_t v58 = *(void *)(v6 - 8);
  uint64_t v59 = v6;
  __chkstk_darwin(v6);
  __int16 v57 = (char *)v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009A7900);
  uint64_t v61 = *(void *)(v8 - 8);
  uint64_t v62 = v8;
  __chkstk_darwin(v8);
  unint64_t v60 = (char *)v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = sub_100004AEC(&qword_1009A7908);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (void *)((char *)v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = (void *)v2[9];
  *uint64_t v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  id v19 = v18;
  uint64_t v20 = _dispatchPreconditionTest(_:)(v17);
  (*(void (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if ((v20 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }

  swift_beginAccess(v2 + 18, v66, 0LL, 0LL);
  uint64_t v21 = (void *)v2[18];
  if (v21[2])
  {
    uint64_t v54 = v11;
    unint64_t v55 = v10;
    uint64_t v20 = v21[4];
    unint64_t v10 = v21[5];
    sub_10001736C(v20, v10);
    if (qword_10099B220 == -1)
    {
LABEL_4:
      uint64_t v53 = v13;
      uint64_t v22 = type metadata accessor for Logger(0LL);
      sub_10000A720(v22, (uint64_t)qword_100A2A470);
      sub_10001736C(v20, v10);
      uint64_t v23 = sub_10001736C(v20, v10);
      uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
      os_log_type_t v25 = static os_log_type_t.info.getter(v24);
      if (os_log_type_enabled(v24, v25))
      {
        uint64_t v26 = (_DWORD *)swift_slowAlloc(22LL, -1LL);
        v63[0] = swift_slowAlloc(32LL, -1LL);
        *uint64_t v26 = 134218242;
        v51[1] = v19;
        uint64_t v52 = a1;
        __asm { BR              X11 }
      }

      sub_100016F9C(v20, v10);
      sub_100016F9C(v20, v10);

      uint64_t v52 = sub_1004C2924(v20, v10);
      v63[0] = v52;
      id v65 = v19;
      uint64_t v29 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
      uint64_t v30 = (uint64_t)v56;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v29 - 8) + 56LL))(v56, 1LL, 1LL, v29);
      id v31 = v19;
      uint64_t v32 = sub_100004AEC(&qword_1009A7910);
      unint64_t v33 = sub_100004AB0();
      uint64_t v34 = sub_1000372EC( &qword_1009A7918,  &qword_1009A7910,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
      uint64_t v35 = sub_100007864( (unint64_t *)&qword_1009B06C0,  (uint64_t (*)(uint64_t))sub_100004AB0,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
      BOOL v36 = v57;
      Publisher.receive<A>(on:options:)(&v65, v30, v32, v33, v34, v35);
      sub_100015794(v30, &qword_1009B0670);

      uint64_t v37 = sub_100004AEC(&qword_1009A7920);
      uint64_t v38 = sub_1000372EC( &qword_1009A7928,  &qword_1009A78F8,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
      uint64_t v39 = v59;
      uint64_t v40 = v60;
      Publisher.map<A>(_:)(sub_100285644, 0LL, v59, v37, v38);
      (*(void (**)(char *, uint64_t))(v58 + 8))(v36, v39);
      uint64_t v41 = sub_100004AEC(&qword_1009A7930);
      uint64_t v42 = sub_1000372EC( &qword_1009A7938,  &qword_1009A7900,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
      uint64_t v43 = sub_1000372EC(&qword_1009A7940, &qword_1009A7930, (uint64_t)&protocol conformance descriptor for Just<A>);
      unint64_t v44 = v53;
      uint64_t v45 = v62;
      Publisher.catch<A>(_:)(sub_10028564C, 0LL, v62, v41, v42, v43);
      (*(void (**)(char *, uint64_t))(v61 + 8))(v40, v45);
      uint64_t v46 = swift_allocObject(&unk_10094C558, 24LL, 7LL);
      swift_weakInit(v46 + 16, v2);
      uint64_t v47 = swift_allocObject(&unk_10094C580, 32LL, 7LL);
      *(void *)(v47 + swift_weakDestroy(v0 + 16) = v46;
      *(void *)(v47 + 24) = a1;
      uint64_t v48 = sub_1000372EC( &qword_1009A7948,  &qword_1009A7908,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
      swift_retain();
      unint64_t v49 = v55;
      Publisher<>.sink(receiveValue:)(sub_100287010, v47, v55, v48);
      swift_release();
      (*(void (**)(char *, unint64_t))(v54 + 8))(v44, v49);
      uint64_t v50 = v2 + 10;
      swift_beginAccess(v50, v63, 33LL, 0LL);
      AnyCancellable.store(in:)(v50);
      swift_endAccess(v63);
      swift_release();
      swift_release();
      sub_100016F9C(v20, v10);
      return;
    }

void sub_100285644(uint64_t a1@<X8>)
{
  *(_BYTE *)(a1 + 41) = 0;
}

uint64_t sub_10028564C(void *a1)
{
  return sub_10024FF84(a1, &qword_1009A7920);
}

void sub_100285658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = a2 + 16;
  swift_beginAccess(a2 + 16, v37, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v5);
  if (Strong)
  {
    uint64_t v7 = (void *)Strong;
    sub_10001581C(a1, (uint64_t)v36, &qword_1009A7920);
    if ((v36[41] & 1) != 0)
    {
      sub_100254338((uint64_t)v36, (uint64_t)v35);
      if (qword_10099B220 != -1) {
        swift_once(&qword_10099B220, sub_1002673AC);
      }
      uint64_t v8 = type metadata accessor for Logger(0LL);
      sub_10000A720(v8, (uint64_t)qword_100A2A470);
      uint64_t v9 = sub_100254374(v35, (uint64_t)v33);
      unint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
      os_log_type_t v11 = static os_log_type_t.error.getter(v10);
      if (os_log_type_enabled(v10, v11))
      {
        uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v13 = swift_slowAlloc(32LL, -1LL);
        uint64_t v32 = v13;
        *(_DWORD *)uint64_t v12 = 136446210;
        sub_1007C9800();
        uint64_t v31 = sub_1003F11D4(v14, v15, &v32);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v12 + 4, v12 + 12);
        swift_bridgeObjectRelease();
        sub_1002543B0(v33);
        _os_log_impl((void *)&_mh_execute_header, v10, v11, "writeFuture error: %{public}s", v12, 0xCu);
        swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v13, -1LL, -1LL);
        swift_slowDealloc(v12, -1LL, -1LL);
      }

      else
      {
        sub_1002543B0(v33);
      }

      uint64_t v26 = (void (*)(uint64_t *))v7[16];
      if (v26)
      {
        uint64_t v27 = v7[17];
        unint64_t v28 = sub_100122CD4();
        uint64_t v29 = swift_allocError(&type metadata for CentralManager.Error, v28, 0LL, 0LL);
        sub_100254374(v35, v30);
        v33[0] = v29;
        __int16 v34 = 256;
        swift_retain();
        v26(v33);
        sub_10002214C((uint64_t)v26, v27);
        swift_release();
        sub_100015794((uint64_t)v33, &qword_1009A7950);
        sub_1002543B0(v35);
        return;
      }

      sub_1002543B0(v35);
    }

    else
    {
      if (qword_10099B220 != -1) {
        swift_once(&qword_10099B220, sub_1002673AC);
      }
      uint64_t v16 = type metadata accessor for Logger(0LL);
      uint64_t v17 = sub_10000A720(v16, (uint64_t)qword_100A2A470);
      uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
      os_log_type_t v19 = static os_log_type_t.info.getter(v18);
      if (os_log_type_enabled(v18, v19))
      {
        uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v20 = 0;
        _os_log_impl((void *)&_mh_execute_header, v18, v19, "writeFuture success", v20, 2u);
        swift_slowDealloc(v20, -1LL, -1LL);
      }

      uint64_t v21 = v7 + 18;
      __n128 v22 = swift_beginAccess(v7 + 18, v33, 0LL, 0LL);
      if (*(void *)(v7[18] + 16LL))
      {
        swift_beginAccess(v7 + 18, v35, 33LL, 0LL);
        uint64_t v23 = *v21;
        if (!*(void *)(*v21 + 16LL))
        {
          __break(1u);
          return;
        }

        uint64_t v25 = *(void *)(v23 + 32);
        unint64_t v24 = *(void *)(v23 + 40);
        sub_10001736C(v25, v24);
        sub_100499154(0LL, 1LL);
        swift_endAccess(v35);
        sub_100016F9C(v25, v24);
      }

      sub_100284F14(a3, v22);
    }

    swift_release();
  }

uint64_t sub_100285A08()
{
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_10002214C(*(void *)(v0 + 128), *(void *)(v0 + 136));
  swift_bridgeObjectRelease();
  sub_1000182F0(*(void *)(v0 + 152), *(void *)(v0 + 160));
  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_100285AA4()
{
  return swift_deallocClassInstance(v0, 192LL, 7LL);
}

uint64_t type metadata accessor for OwnerCommandManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd19OwnerCommandManager);
}

uint64_t sub_100285AE4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 16LL);
  swift_bridgeObjectRetain(*(void *)(*(void *)v0 + 24LL));
  return v1;
}

uint64_t sub_100285B14(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v4 = sub_100004AEC(&qword_1009A78B8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001581C(a1, (uint64_t)v6, &qword_1009A78B8);
  uint64_t v7 = type metadata accessor for OwnerCommandManager.Error(0LL);
  uint64_t v8 = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v6, 1LL, v7) != 1)
  {
    uint64_t v9 = sub_100007864(&qword_1009A78C0, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_1007F8DC0);
    uint64_t v8 = swift_allocError(v7, v9, 0LL, 0LL);
    sub_10002218C((uint64_t)v6, v10, type metadata accessor for OwnerCommandManager.Error);
  }

  a2(v8);
  return swift_errorRelease(v8);
}

uint64_t sub_100285C1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v66 = a4;
  uint64_t v60 = a3;
  uint64_t v61 = a2;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v58 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  os_log_type_t v63 = (char *)&v56 - v11;
  uint64_t v12 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v13 = __chkstk_darwin(v12);
  unint64_t v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v56 - v16;
  uint64_t v18 = (int *)type metadata accessor for AccessoryCommand(0LL);
  uint64_t v64 = *((void *)v18 - 1);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v65 = (uint64_t)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v59 = v20;
  __chkstk_darwin(v19);
  __n128 v22 = (char *)&v56 - v21;
  uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = *(void *)(v4 + 184);
  uint64_t v67 = v5;
  uint64_t v62 = a1;
  if (!v26) {
    goto LABEL_4;
  }
  swift_retain();
  sub_100504F30(a1, (uint64_t)v25);
  swift_release();
  uint64_t v27 = type metadata accessor for OwnedBeaconRecord(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48LL))(v25, 1LL, v27) == 1)
  {
    sub_100015794((uint64_t)v25, (uint64_t *)&unk_1009A9C30);
LABEL_4:
    char v28 = 0;
    goto LABEL_12;
  }

  sub_1005D3A0C();
  uint64_t v29 = SPBeaconTypeHele;
  id v57 = v30;
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  uint64_t v33 = v32;
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  if (v31 == v34 && v33 == v35) {
    char v37 = 1;
  }
  else {
    char v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v33, v34, v35, 0LL);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100018C68((uint64_t)v25, type metadata accessor for OwnedBeaconRecord);
  char v28 = v37;
LABEL_12:
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v38(v17, v61, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v17, 0LL, 1LL, v7);
  uint64_t v39 = v63;
  v38(v63, v62, v7);
  sub_10001581C((uint64_t)v17, (uint64_t)v15, &qword_10099D8A0);
  uint64_t v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v15, 1LL, v7);
  if ((_DWORD)v40 == 1)
  {
    uint64_t v41 = v58;
    UUID.init()(v40);
    sub_100015794((uint64_t)v17, &qword_10099D8A0);
    sub_100015794((uint64_t)v15, &qword_10099D8A0);
    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  }

  else
  {
    sub_100015794((uint64_t)v17, &qword_10099D8A0);
    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    uint64_t v41 = v58;
    v42(v58, v15, v7);
  }

  uint64_t v44 = v59;
  uint64_t v43 = v60;
  v42(v22, v41, v7);
  v42(&v22[v18[5]], v39, v7);
  uint64_t v45 = &v22[v18[6]];
  *(void *)uint64_t v45 = 0LL;
  v45[8] = 3;
  v22[v18[7]] = v28 & 1;
  v22[v18[8]] = 1;
  uint64_t v46 = swift_allocObject(&unk_10094C508, 32LL, 7LL);
  uint64_t v47 = v66;
  *(void *)(v46 + swift_weakDestroy(v0 + 16) = v43;
  *(void *)(v46 + 24) = v47;
  type metadata accessor for Transaction(0LL);
  uint64_t v48 = v65;
  sub_10001DC4C((uint64_t)v22, v65, type metadata accessor for AccessoryCommand);
  uint64_t v49 = *(unsigned __int8 *)(v64 + 80);
  uint64_t v50 = (v49 + 16) & ~v49;
  unint64_t v51 = (v44 + v50 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v52 = (v51 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v53 = swift_allocObject(&unk_10094C530, v52 + 16, v49 | 7);
  sub_10002218C(v48, v53 + v50, type metadata accessor for AccessoryCommand);
  *(void *)(v53 + v51) = v67;
  uint64_t v54 = (void *)(v53 + v52);
  *uint64_t v54 = sub_10028B65C;
  v54[1] = v46;
  swift_retain();
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("OwnerCommandManager.execute", 27LL, 2LL, &unk_1009A78F0, v53);
  swift_release();
  swift_release();
  return sub_100018C68((uint64_t)v22, type metadata accessor for AccessoryCommand);
}

uint64_t sub_1002860C8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v67 = a5;
  uint64_t v61 = a3;
  uint64_t v62 = a4;
  uint64_t v64 = a2;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v58 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v69 = (char *)&v56 - v12;
  uint64_t v13 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v56 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v56 - v17;
  uint64_t v19 = (int *)type metadata accessor for AccessoryCommand(0LL);
  uint64_t v59 = *((void *)v19 - 1);
  uint64_t v20 = __chkstk_darwin(v19);
  uint64_t v66 = (uint64_t)&v56 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v60 = v21;
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v56 - v22;
  uint64_t v24 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v56 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = *(void *)(v5 + 184);
  uint64_t v68 = v6;
  uint64_t v65 = a1;
  if (!v27) {
    goto LABEL_4;
  }
  swift_retain();
  sub_100504F30(a1, (uint64_t)v26);
  swift_release();
  uint64_t v28 = type metadata accessor for OwnedBeaconRecord(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48LL))(v26, 1LL, v28) == 1)
  {
    sub_100015794((uint64_t)v26, (uint64_t *)&unk_1009A9C30);
LABEL_4:
    int v63 = 0;
    goto LABEL_12;
  }

  sub_1005D3A0C();
  uint64_t v29 = SPBeaconTypeHele;
  id v57 = v30;
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  uint64_t v33 = v32;
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  if (v31 == v34 && v33 == v35) {
    int v63 = 1;
  }
  else {
    int v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v33, v34, v35, 0LL);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100018C68((uint64_t)v26, type metadata accessor for OwnedBeaconRecord);
LABEL_12:
  uint64_t v37 = v67;
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v38(v18, v64, v8);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v9 + 56))(v18, 0LL, 1LL, v8);
  v38(v69, v65, v8);
  sub_10001581C((uint64_t)v18, (uint64_t)v16, &qword_10099D8A0);
  uint64_t v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48))(v16, 1LL, v8);
  if ((_DWORD)v39 == 1)
  {
    uint64_t v40 = v58;
    UUID.init()(v39);
    sub_100015794((uint64_t)v18, &qword_10099D8A0);
    sub_100015794((uint64_t)v16, &qword_10099D8A0);
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  }

  else
  {
    sub_100015794((uint64_t)v18, &qword_10099D8A0);
    uint64_t v41 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    uint64_t v40 = v58;
    v41(v58, v16, v8);
  }

  uint64_t v43 = v61;
  uint64_t v42 = v62;
  uint64_t v45 = v59;
  uint64_t v44 = v60;
  v41(v23, v40, v8);
  v41(&v23[v19[5]], v69, v8);
  uint64_t v46 = &v23[v19[6]];
  *(void *)uint64_t v46 = v43;
  v46[8] = 1;
  v23[v19[7]] = v63 & 1;
  v23[v19[8]] = 1;
  uint64_t v47 = swift_allocObject(&unk_10094C440, 32LL, 7LL);
  *(void *)(v47 + swift_weakDestroy(v0 + 16) = v42;
  *(void *)(v47 + 24) = v37;
  type metadata accessor for Transaction(0LL);
  uint64_t v48 = v66;
  sub_10001DC4C((uint64_t)v23, v66, type metadata accessor for AccessoryCommand);
  uint64_t v49 = *(unsigned __int8 *)(v45 + 80);
  uint64_t v50 = (v49 + 16) & ~v49;
  unint64_t v51 = (v44 + v50 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v52 = (v51 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v53 = swift_allocObject(&unk_10094C468, v52 + 16, v49 | 7);
  sub_10002218C(v48, v53 + v50, type metadata accessor for AccessoryCommand);
  *(void *)(v53 + v51) = v68;
  uint64_t v54 = (void *)(v53 + v52);
  *uint64_t v54 = sub_10028B65C;
  v54[1] = v47;
  swift_retain();
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("OwnerCommandManager.execute", 27LL, 2LL, &unk_1009A78C8, v53);
  swift_release();
  swift_release();
  return sub_100018C68((uint64_t)v23, type metadata accessor for AccessoryCommand);
}

uint64_t sub_10028657C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v66 = a4;
  uint64_t v60 = a3;
  uint64_t v61 = a2;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v58 = (char *)&v56 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  int v63 = (char *)&v56 - v11;
  uint64_t v12 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v56 - v16;
  uint64_t v18 = (int *)type metadata accessor for AccessoryCommand(0LL);
  uint64_t v64 = *((void *)v18 - 1);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v65 = (uint64_t)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v59 = v20;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v56 - v21;
  uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v23);
  uint64_t v25 = (char *)&v56 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = *(void *)(v4 + 184);
  uint64_t v67 = v5;
  uint64_t v62 = a1;
  if (!v26) {
    goto LABEL_4;
  }
  swift_retain();
  sub_100504F30(a1, (uint64_t)v25);
  swift_release();
  uint64_t v27 = type metadata accessor for OwnedBeaconRecord(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48LL))(v25, 1LL, v27) == 1)
  {
    sub_100015794((uint64_t)v25, (uint64_t *)&unk_1009A9C30);
LABEL_4:
    char v28 = 0;
    goto LABEL_12;
  }

  sub_1005D3A0C();
  uint64_t v29 = SPBeaconTypeHele;
  id v57 = v30;
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  uint64_t v33 = v32;
  uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v29);
  if (v31 == v34 && v33 == v35) {
    char v37 = 1;
  }
  else {
    char v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v33, v34, v35, 0LL);
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100018C68((uint64_t)v25, type metadata accessor for OwnedBeaconRecord);
  char v28 = v37;
LABEL_12:
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v8 + 16);
  v38(v17, v61, v7);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v17, 0LL, 1LL, v7);
  uint64_t v39 = v63;
  v38(v63, v62, v7);
  sub_10001581C((uint64_t)v17, (uint64_t)v15, &qword_10099D8A0);
  uint64_t v40 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v15, 1LL, v7);
  if ((_DWORD)v40 == 1)
  {
    uint64_t v41 = v58;
    UUID.init()(v40);
    sub_100015794((uint64_t)v17, &qword_10099D8A0);
    sub_100015794((uint64_t)v15, &qword_10099D8A0);
    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
  }

  else
  {
    sub_100015794((uint64_t)v17, &qword_10099D8A0);
    uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    uint64_t v41 = v58;
    v42(v58, v15, v7);
  }

  uint64_t v44 = v59;
  uint64_t v43 = v60;
  v42(v22, v41, v7);
  v42(&v22[v18[5]], v39, v7);
  uint64_t v45 = &v22[v18[6]];
  *(void *)uint64_t v45 = 1LL;
  v45[8] = 3;
  v22[v18[7]] = v28 & 1;
  v22[v18[8]] = 1;
  uint64_t v46 = swift_allocObject(&unk_10094C3A0, 32LL, 7LL);
  uint64_t v47 = v66;
  *(void *)(v46 + swift_weakDestroy(v0 + 16) = v43;
  *(void *)(v46 + 24) = v47;
  type metadata accessor for Transaction(0LL);
  uint64_t v48 = v65;
  sub_10001DC4C((uint64_t)v22, v65, type metadata accessor for AccessoryCommand);
  uint64_t v49 = *(unsigned __int8 *)(v64 + 80);
  uint64_t v50 = (v49 + 16) & ~v49;
  unint64_t v51 = (v44 + v50 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v52 = (v51 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v53 = swift_allocObject(&unk_10094C3C8, v52 + 16, v49 | 7);
  sub_10002218C(v48, v53 + v50, type metadata accessor for AccessoryCommand);
  *(void *)(v53 + v51) = v67;
  uint64_t v54 = (uint64_t (**)(uint64_t))(v53 + v52);
  *uint64_t v54 = sub_100286A4C;
  v54[1] = (uint64_t (*)(uint64_t))v46;
  swift_retain();
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)("OwnerCommandManager.execute", 27LL, 2LL, &unk_1009A78B0, v53);
  swift_release();
  swift_release();
  return sub_100018C68((uint64_t)v22, type metadata accessor for AccessoryCommand);
}

uint64_t sub_100286A28()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100286A4C(uint64_t a1)
{
  return sub_100285B14(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_100286A58()
{
  uint64_t v2 = *(void *)(type metadata accessor for AccessoryCommand(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v5 = *(void *)(v0 + v4);
  uint64_t v6 = v0 + v3;
  uint64_t v7 = (uint64_t *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t v10 = (void *)swift_task_alloc(dword_1009A78AC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v10;
  *uint64_t v10 = v1;
  v10[1] = sub_100015D58;
  return sub_100270908(v6, v5, v8, v9);
}

uint64_t sub_100286AF4()
{
  uint64_t v1 = type metadata accessor for AccessoryCommand(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  swift_release();

  uint64_t v7 = v0 + v4;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
  v9(v7, v8);
  v9(v7 + *(int *)(v1 + 20), v8);
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100286BB4()
{
  uint64_t v1 = *(void *)(type metadata accessor for AccessoryCommand(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_1002732A0(*(char **)(v0 + 24), (char *)(v0 + v2), *(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
}

uint64_t sub_100286C0C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + sub_10016CF88(v0 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100286C1C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t type metadata accessor for OwnerCommandManager.Error(uint64_t a1)
{
  uint64_t result = qword_1009A7CF8;
  if (!qword_1009A7CF8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OwnerCommandManager.Error);
  }
  return result;
}

uint64_t sub_100286C64()
{
  uint64_t v2 = *(void *)(type metadata accessor for AccessoryCommand(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v5 = *(void *)(v0 + v4);
  uint64_t v6 = v0 + v3;
  uint64_t v7 = (uint64_t *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  uint64_t v10 = (void *)swift_task_alloc(dword_1009A78AC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v10;
  *uint64_t v10 = v1;
  v10[1] = sub_1000159BC;
  return sub_100270908(v6, v5, v8, v9);
}

uint64_t sub_100286D00()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  unint64_t v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));

  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  swift_release(*(void *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v6);
}

uint64_t sub_100286DB4()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  return sub_100271AEC( *(void *)(v0 + 16),  *(char **)(v0 + 24),  (void (*)(void, void))(v0 + v3),  (void (*)(void, void))(v0 + ((v4 + v2 + v3) & ~v2)),  *(void *)(v0 + ((v4 + ((v4 + v2 + v3) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((v4 + ((v4 + v2 + v3) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_100286E0C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  unint64_t v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  swift_release(*(void *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v6);
}

uint64_t sub_100286EB0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 16) & ~v4;
  uint64_t v6 = *(void *)(v3 + 64);
  return sub_100272414( a1,  v1 + v5,  (char *)(v1 + ((v6 + v4 + v5) & ~v4)),  *(void (**)(uint64_t))(v1 + ((v6 + ((v6 + v4 + v5) & ~v4) + 7) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + ((v6 + ((v6 + v4 + v5) & ~v4) + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_100286F18()
{
  uint64_t v1 = type metadata accessor for AccessoryCommand(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v0 + v4;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
  v9(v7, v8);
  v9(v7 + *(int *)(v1 + 20), v8);
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100286FE0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100287004()
{
  return sub_1001538E8((void (*)(void))&_swift_release);
}

void sub_100287010(uint64_t a1)
{
}

uint64_t sub_100287018(uint64_t a1)
{
  v1[11] = a1;
  uint64_t v2 = type metadata accessor for Endianness(0LL);
  v1[12] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_1009B9340);
  v1[13] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[14] = v4;
  v1[15] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC(&qword_1009A1BB8);
  v1[16] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v1[17] = v6;
  v1[18] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009A1BC0);
  v1[19] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v1[20] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[21] = swift_task_alloc(v9);
  v1[22] = swift_task_alloc(v9);
  uint64_t v10 = sub_100004AEC(&qword_1009A7C00);
  v1[23] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_1009A7C08);
  v1[24] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for CentralManager.State(0LL);
  v1[25] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v1[26] = v13;
  v1[27] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009B9450);
  v1[28] = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100287198, 0LL, 0LL);
}

uint64_t sub_100287198()
{
  uint64_t v1 = v0[28];
  v0[29] = type metadata accessor for CentralManager(0LL);
  uint64_t v2 = sub_100004AEC(&qword_1009A7C68);
  uint64_t v3 = type metadata accessor for CentralManager.Options(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = swift_allocObject( v2,  ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
       + 2LL * *(void *)(v4 + 72),
         *(unsigned __int8 *)(v4 + 80) | 7LL);
  *(_OWORD *)(v5 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v6 = static CentralManager.Options.allowDuplicates.getter();
  static CentralManager.Options.enableFindMy.getter(v6);
  v0[4] = v5;
  uint64_t v7 = sub_100007864( (unint64_t *)&unk_1009B9460,  (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager.Options,  (uint64_t)&protocol conformance descriptor for CentralManager.Options);
  uint64_t v8 = sub_100004AEC(&qword_1009A7C70);
  uint64_t v9 = sub_1000372EC( (unint64_t *)&unk_1009B9470,  &qword_1009A7C70,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 4, v8, v9, v3, v7);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v1, 0LL, 1LL, v3);
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to CentralManager.__allocating_init(options:)[1]);
  v0[30] = v10;
  *uint64_t v10 = v0;
  v10[1] = sub_100287308;
  return CentralManager.__allocating_init(options:)(v0[28]);
}

uint64_t sub_100287308(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 240LL);
  *(void *)(*(void *)v1 + 248LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100287364, 0LL, 0LL);
}

uint64_t sub_100287364()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to CentralManagerProtocol.await(state:)[1]);
  v0[32] = v1;
  uint64_t v2 = sub_100007864( &qword_1009A1BA0,  (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager,  (uint64_t)&protocol conformance descriptor for CentralManager);
  *uint64_t v1 = v0;
  v1[1] = sub_1002873F8;
  return CentralManagerProtocol.await(state:)(v0[27], v0[29], v2);
}

uint64_t sub_1002873F8()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 256LL);
  *(void *)(*(void *)v1 + 264LL) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2[26] + 8LL))(v2[27], v2[25]);
  if (v0) {
    uint64_t v4 = sub_100288900;
  }
  else {
    uint64_t v4 = sub_10028746C;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10028746C()
{
  uint64_t v1 = v0[11];
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v0[34] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (v5 + 32) & ~v5;
  uint64_t v7 = swift_allocObject(v2, v6 + *(void *)(v4 + 72), v5 | 7);
  v0[35] = v7;
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[36] = v8;
  v8(v7 + v6, v1, v3);
  v0[37] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_100287550;
  return v11(v7);
}

uint64_t sub_100287550(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 296);
  *(void *)(v3 + 304) = a1;
  *(void *)(v3 + 312) = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    uint64_t v5 = sub_1002889B0;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_1002875C4;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_1002875C4()
{
  uint64_t v1 = *(void *)(v0 + 304);
  if ((unint64_t)v1 >> 62)
  {
    if (v1 < 0) {
      uint64_t v11 = *(void *)(v0 + 304);
    }
    else {
      uint64_t v11 = v1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*(void *)(v0 + 304));
    uint64_t v12 = _CocoaArrayWrapper.endIndex.getter(v11);
    swift_bridgeObjectRelease();
    if (v12) {
      goto LABEL_3;
    }
  }

  else if (*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
LABEL_3:
    if ((v1 & 0xC000000000000001LL) != 0)
    {
      uint64_t v2 = specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, *(void *)(v0 + 304));
      goto LABEL_6;
    }

    if (*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
      uint64_t v2 = *(void *)(*(void *)(v0 + 304) + 32LL);
      swift_retain();
LABEL_6:
      *(void *)(v0 + 320) = v2;
      uint64_t v4 = *(void *)(v0 + 184);
      uint64_t v3 = *(void *)(v0 + 192);
      swift_bridgeObjectRelease();
      uint64_t v5 = enum case for ConnectUseCase.findMyAction(_:);
      uint64_t v6 = type metadata accessor for ConnectUseCase(0LL);
      uint64_t v7 = *(void *)(v6 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 104))(v3, v5, v6);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v3, 0LL, 1LL, v6);
      uint64_t v8 = type metadata accessor for Peripheral.Options(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v4, 1LL, 1LL, v8);
      *(void *)(v0 + 328) = v9;
      *uint64_t v9 = v0;
      v9[1] = sub_1002878FC;
      return ((uint64_t (*)(void, void))v34)(*(void *)(v0 + 192), *(void *)(v0 + 184));
    }

    __break(1u);
    goto LABEL_17;
  }

  swift_bridgeObjectRelease();
  if (qword_10099B220 != -1) {
LABEL_17:
  }
    swift_once(&qword_10099B220, sub_1002673AC);
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = sub_10000A720(v13, (uint64_t)qword_100A2A470);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.error.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v17 = 0;
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Missing peripheral to read TX power!", v17, 2u);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  uint64_t v18 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 288);
  uint64_t v19 = *(void *)(v0 + 272);
  uint64_t v20 = *(void *)(v0 + 88);

  uint64_t v21 = type metadata accessor for OwnerCommandManager.Error(0LL);
  uint64_t v22 = sub_100007864(&qword_1009A78C0, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_1007F8DC0);
  swift_allocError(v21, v22, 0LL, 0LL);
  uint64_t v24 = v23;
  v18(v23, v20, v19);
  uint64_t v25 = swift_storeEnumTagMultiPayload(v24, v21, 0LL);
  swift_willThrow(v25);
  swift_release();
  uint64_t v26 = *(void *)(v0 + 216);
  uint64_t v28 = *(void *)(v0 + 184);
  uint64_t v27 = *(void *)(v0 + 192);
  uint64_t v30 = *(void *)(v0 + 168);
  uint64_t v29 = *(void *)(v0 + 176);
  uint64_t v31 = *(void *)(v0 + 144);
  uint64_t v32 = *(void *)(v0 + 120);
  uint64_t v33 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 224));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002878FC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 328);
  *(void *)(*v1 + 336) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 192);
  sub_100015794(*(void *)(v2 + 184), &qword_1009A7C00);
  sub_100015794(v4, &qword_1009A7C08);
  if (v0) {
    uint64_t v5 = sub_100288A6C;
  }
  else {
    uint64_t v5 = sub_100287988;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_100287988()
{
  if (qword_10099B220 != -1) {
    swift_once(&qword_10099B220, sub_1002673AC);
  }
  uint64_t v1 = v0[40];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v0[43] = sub_10000A720(v2, (uint64_t)qword_100A2A470);
  uint64_t v3 = swift_retain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[40];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v18 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    v0[10] = v7;
    uint64_t v10 = type metadata accessor for Peripheral(0LL);
    uint64_t v11 = sub_100007864( &qword_1009A7C40,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter(v10, v11);
    v0[8] = sub_1003F11D4(v12, v13, &v18);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v8 + 4, v8 + 12);
    swift_release_n(v7, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Connected to peripheral: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {

    swift_release_n(v7, 2LL);
  }

  uint64_t v14 = type metadata accessor for Service(0LL);
  Identifier.init(stringLiteral:)("1804", 4LL, 2LL, v14);
  uint64_t v17 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Peripheral.subscript.getter
                                       + async function pointer to dispatch thunk of Peripheral.subscript.getter);
  uint64_t v15 = (void *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Peripheral.subscript.getter
                                   + 1));
  v0[44] = v15;
  *uint64_t v15 = v0;
  v15[1] = sub_100287BDC;
  return v17(v0[22]);
}

uint64_t sub_100287BDC(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 352);
  *(void *)(v3 + 360) = a1;
  *(void *)(v3 + 368) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    os_log_type_t v5 = sub_100288B28;
  }
  else {
    os_log_type_t v5 = sub_100287C48;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_100287C48()
{
  uint64_t v1 = (*(uint64_t (**)(void, void, void))(v0[20] + 16LL))(v0[21], v0[22], v0[19]);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[21];
    uint64_t v18 = v0[20];
    uint64_t v5 = v0[19];
    BOOL v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v20 = v7;
    *(_DWORD *)BOOL v6 = 136315138;
    uint64_t v8 = sub_1000372EC(&qword_1009A7C80, &qword_1009A1BC0, (uint64_t)&protocol conformance descriptor for Identifier<A>);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    v0[9] = sub_1003F11D4(v9, v10, &v20);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
    v11(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Discovered TX Power service: %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v0[20] + 8LL);
    v11(v0[21], v0[19]);
  }

  v0[47] = v11;
  uint64_t v12 = v0[14];
  uint64_t v13 = sub_100004AEC(&qword_10099D480);
  uint64_t v14 = swift_allocObject( v13,  ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
        + *(void *)(v12 + 72),
          *(unsigned __int8 *)(v12 + 80) | 7LL);
  v0[48] = v14;
  *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v15 = type metadata accessor for Characteristic(0LL);
  v0[49] = v15;
  Identifier.init(stringLiteral:)("2A07", 4LL, 2LL, v15);
  v0[50] = v16;
  *os_log_type_t v16 = v0;
  v16[1] = sub_100287E94;
  return v19(v14);
}

uint64_t sub_100287E94()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 400LL);
  *(void *)(*(void *)v1 + 408LL) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  if (v0)
  {
    os_log_type_t v3 = sub_100288BFC;
  }

  else
  {
    swift_bridgeObjectRelease();
    os_log_type_t v3 = sub_100287F14;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100287F14(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Discovered TX Power characteristic", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v5 = v1[49];

  Identifier.init(stringLiteral:)("2A07", 4LL, 2LL, v5);
  uint64_t v8 = (uint64_t (*)(void))((char *)&async function pointer to dispatch thunk of Service.subscript.getter
                                      + async function pointer to dispatch thunk of Service.subscript.getter);
  BOOL v6 = (void *)swift_task_alloc(*((unsigned int *)&async function pointer to dispatch thunk of Service.subscript.getter
                                  + 1));
  v1[52] = v6;
  *BOOL v6 = v1;
  v6[1] = sub_100288014;
  return v8(v1[15]);
}

uint64_t sub_100288014(uint64_t a1)
{
  uint64_t v4 = *(void *)(*(void *)v2 + 416LL);
  uint64_t v5 = *(void **)v2;
  v5[53] = a1;
  v5[54] = v1;
  swift_task_dealloc(v4);
  (*(void (**)(void, void))(v5[14] + 8LL))(v5[15], v5[13]);
  if (v1) {
    return swift_task_switch(sub_100288CDC, 0LL, 0LL);
  }
  v5[55] = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_1002880DC;
  return v8(v5[18]);
}

uint64_t sub_1002880DC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 440LL);
  os_log_type_t v3 = *(void **)v1;
  v3[56] = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0) {
    return swift_task_switch(sub_100288DBC, 0LL, 0LL);
  }
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
  v3[57] = v5;
  uint64_t v6 = sub_1000372EC( (unint64_t *)&qword_1009B9420,  &qword_1009A1BB8,  (uint64_t)&protocol conformance descriptor for AsyncThrowingStream<A, B>);
  *uint64_t v5 = v3;
  v5[1] = sub_1002881B8;
  return AsyncSequence.first()(v3 + 2, v3[16], v6);
}

uint64_t sub_1002881B8()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 456LL);
  *(void *)(*(void *)v1 + 464LL) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2[17] + 8LL))(v2[18], v2[16]);
  if (v0) {
    uint64_t v4 = sub_100288E9C;
  }
  else {
    uint64_t v4 = sub_10028822C;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10028822C(uint64_t a1)
{
  unint64_t v2 = *(void *)(v1 + 24);
  if (v2 >> 60 == 15)
  {
    uint64_t v3 = (os_log_s *)Logger.logObject.getter(a1);
    os_log_type_t v4 = static os_log_type_t.error.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to read TX Power characteristic", v5, 2u);
      swift_slowDealloc(v5, -1LL, -1LL);
    }

    uint64_t v6 = *(void (**)(uint64_t, uint64_t))(v1 + 376);
    uint64_t v7 = *(void *)(v1 + 176);
    uint64_t v8 = *(void *)(v1 + 152);

    uint64_t v9 = type metadata accessor for OwnerCommandManager.Error(0LL);
    uint64_t v10 = sub_100007864(&qword_1009A78C0, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_1007F8DC0);
    swift_allocError(v9, v10, 0LL, 0LL);
    uint64_t v12 = swift_storeEnumTagMultiPayload(v11, v9, 11LL);
    swift_willThrow(v12);
    swift_release();
    swift_release();
    swift_release();
    v6(v7, v8);
LABEL_16:
    uint64_t v47 = *(void *)(v1 + 216);
    uint64_t v49 = *(void *)(v1 + 184);
    uint64_t v48 = *(void *)(v1 + 192);
    uint64_t v51 = *(void *)(v1 + 168);
    uint64_t v50 = *(void *)(v1 + 176);
    uint64_t v52 = *(void *)(v1 + 144);
    uint64_t v53 = *(void *)(v1 + 120);
    uint64_t v54 = *(void *)(v1 + 96);
    swift_task_dealloc(*(void *)(v1 + 224));
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  uint64_t v13 = (uint64_t *)(v1 + 48);
  uint64_t v64 = v1 + 56;
  uint64_t v14 = (void *)(v1 + 472);
  uint64_t v15 = *(void *)(v1 + 16);
  sub_10001736C(v15, v2);
  uint64_t v16 = sub_10001736C(v15, v2);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v59 = swift_slowAlloc(32LL, -1LL);
    v67[0] = v59;
    *(_DWORD *)uint64_t v19 = 136315138;
    uint64_t v20 = Data.hexString.getter(v15, v2);
    *(void *)(v1 + sub_10016CF88(v0 + 40) = sub_1003F11D4(v20, v21, v67);
    uint64_t v13 = (uint64_t *)(v1 + 48);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 40, v1 + 48, v19 + 4, v19 + 12);
    uint64_t v14 = (void *)(v1 + 472);
    swift_bridgeObjectRelease();
    sub_1000182F0(v15, v2);
    sub_1000182F0(v15, v2);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Read raw TX Power %s", v19, 0xCu);
    swift_arrayDestroy(v59, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v59, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {
    sub_1000182F0(v15, v2);
    sub_1000182F0(v15, v2);
  }

  uint64_t v22 = *(void *)(v1 + 96);
  uint64_t v23 = sub_10001736C(v15, v2);
  static Endianness.current.getter(v23);
  sub_10028AF4C();
  uint64_t v24 = FixedWidthInteger.init(data:ofEndianness:)(v14, v15, v2, v22);
  uint64_t v66 = v15;
  if ((*(_BYTE *)(v1 + 473) & 1) != 0)
  {
    sub_10001736C(v15, v2);
    uint64_t v25 = sub_10001736C(v15, v2);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v62 = swift_slowAlloc(32LL, -1LL);
      v67[0] = v62;
      *(_DWORD *)uint64_t v28 = 136315138;
      uint64_t v29 = Data.hexString.getter(v15, v2);
      *uint64_t v13 = sub_1003F11D4(v29, v30, v67);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v13, v64, v28 + 4, v28 + 12);
      swift_bridgeObjectRelease();
      sub_1000182F0(v15, v2);
      sub_1000182F0(v15, v2);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Invalid TX Power: %s!", v28, 0xCu);
      swift_arrayDestroy(v62, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1LL, -1LL);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    else
    {
      sub_1000182F0(v15, v2);
      sub_1000182F0(v15, v2);
    }

    uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v1 + 376);
    uint64_t v41 = *(void *)(v1 + 176);
    uint64_t v42 = *(void *)(v1 + 152);
    uint64_t v43 = type metadata accessor for OwnerCommandManager.Error(0LL);
    uint64_t v44 = sub_100007864(&qword_1009A78C0, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_1007F8DC0);
    swift_allocError(v43, v44, 0LL, 0LL);
    uint64_t v46 = swift_storeEnumTagMultiPayload(v45, v43, 11LL);
    swift_willThrow(v46);
    swift_release();
    swift_release();
    sub_1000182F0(v15, v2);
    swift_release();
    v40(v41, v42);
    goto LABEL_16;
  }

  uint64_t v31 = *(char *)v14;
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v33 = static os_log_type_t.default.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v34 = 134217984;
    *(void *)(v1 + 56) = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v64, v1 + 64, v34 + 4, v34 + 12);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Read TX Power %ld", v34, 0xCu);
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v1 + 376);
  uint64_t v36 = *(void *)(v1 + 224);
  uint64_t v55 = *(void *)(v1 + 216);
  uint64_t v56 = *(void *)(v1 + 192);
  uint64_t v37 = *(void *)(v1 + 176);
  uint64_t v57 = *(void *)(v1 + 184);
  uint64_t v58 = *(void *)(v1 + 168);
  uint64_t v65 = v31;
  uint64_t v38 = *(void *)(v1 + 152);
  uint64_t v60 = *(void *)(v1 + 144);
  uint64_t v61 = *(void *)(v1 + 120);
  uint64_t v63 = *(void *)(v1 + 96);

  swift_release();
  swift_release();
  sub_1000182F0(v66, v2);
  swift_release();
  v35(v37, v38);
  swift_task_dealloc(v36);
  swift_task_dealloc(v55);
  swift_task_dealloc(v56);
  swift_task_dealloc(v57);
  swift_task_dealloc(v37);
  swift_task_dealloc(v58);
  swift_task_dealloc(v60);
  swift_task_dealloc(v61);
  swift_task_dealloc(v63);
  return (*(uint64_t (**)(uint64_t))(v1 + 8))(v65);
}

uint64_t sub_100288900()
{
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v5 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v7 = *(void *)(v0 + 120);
  uint64_t v8 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 224));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002889B0()
{
  uint64_t v1 = *(void *)(v0 + 248);
  swift_bridgeObjectRelease(*(void *)(v0 + 280));
  swift_release(v1);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 176);
  uint64_t v7 = *(void *)(v0 + 144);
  uint64_t v8 = *(void *)(v0 + 120);
  uint64_t v9 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 224));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100288A6C()
{
  uint64_t v1 = *(void *)(v0 + 248);
  swift_release(*(void *)(v0 + 320));
  swift_release(v1);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 176);
  uint64_t v7 = *(void *)(v0 + 144);
  uint64_t v8 = *(void *)(v0 + 120);
  uint64_t v9 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 224));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100288B28()
{
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 160);
  swift_release(*(void *)(v0 + 248));
  swift_release(v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  uint64_t v5 = *(void *)(v0 + 216);
  uint64_t v7 = *(void *)(v0 + 184);
  uint64_t v6 = *(void *)(v0 + 192);
  uint64_t v9 = *(void *)(v0 + 168);
  uint64_t v8 = *(void *)(v0 + 176);
  uint64_t v10 = *(void *)(v0 + 144);
  uint64_t v11 = *(void *)(v0 + 120);
  uint64_t v12 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 224));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100288BFC()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v5 = *(void *)(v0 + 152);
  swift_release(*(void *)(v0 + 360));
  swift_release(v3);
  swift_release(v2);
  v1(v4, v5);
  uint64_t v6 = *(void *)(v0 + 216);
  uint64_t v8 = *(void *)(v0 + 184);
  uint64_t v7 = *(void *)(v0 + 192);
  uint64_t v10 = *(void *)(v0 + 168);
  uint64_t v9 = *(void *)(v0 + 176);
  uint64_t v11 = *(void *)(v0 + 144);
  uint64_t v12 = *(void *)(v0 + 120);
  uint64_t v13 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 224));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100288CDC()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v5 = *(void *)(v0 + 152);
  swift_release(*(void *)(v0 + 360));
  swift_release(v3);
  swift_release(v2);
  v1(v4, v5);
  uint64_t v6 = *(void *)(v0 + 216);
  uint64_t v8 = *(void *)(v0 + 184);
  uint64_t v7 = *(void *)(v0 + 192);
  uint64_t v10 = *(void *)(v0 + 168);
  uint64_t v9 = *(void *)(v0 + 176);
  uint64_t v11 = *(void *)(v0 + 144);
  uint64_t v12 = *(void *)(v0 + 120);
  uint64_t v13 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 224));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100288DBC()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v5 = *(void *)(v0 + 152);
  swift_release(*(void *)(v0 + 360));
  swift_release(v3);
  swift_release(v2);
  v1(v4, v5);
  uint64_t v6 = *(void *)(v0 + 216);
  uint64_t v8 = *(void *)(v0 + 184);
  uint64_t v7 = *(void *)(v0 + 192);
  uint64_t v10 = *(void *)(v0 + 168);
  uint64_t v9 = *(void *)(v0 + 176);
  uint64_t v11 = *(void *)(v0 + 144);
  uint64_t v12 = *(void *)(v0 + 120);
  uint64_t v13 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 224));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100288E9C()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v4 = *(void *)(v0 + 176);
  uint64_t v5 = *(void *)(v0 + 152);
  swift_release(*(void *)(v0 + 360));
  swift_release(v3);
  swift_release(v2);
  v1(v4, v5);
  uint64_t v6 = *(void *)(v0 + 216);
  uint64_t v8 = *(void *)(v0 + 184);
  uint64_t v7 = *(void *)(v0 + 192);
  uint64_t v10 = *(void *)(v0 + 168);
  uint64_t v9 = *(void *)(v0 + 176);
  uint64_t v11 = *(void *)(v0 + 144);
  uint64_t v12 = *(void *)(v0 + 120);
  uint64_t v13 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 224));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100288F7C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t (*a6)(void, void))
{
  uint64_t v45 = a5;
  uint64_t v46 = a4;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v40 - v15;
  if (qword_10099B330 != -1) {
    swift_once(&qword_10099B330, sub_100374304);
  }
  uint64_t v17 = type metadata accessor for Logger(0LL);
  sub_10000A720(v17, (uint64_t)qword_100A2A748);
  os_log_type_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v47 = a1;
  v18(v16, a1, v10);
  v18(v14, a2, v10);
  swift_errorRetain(a3);
  uint64_t v19 = swift_errorRetain(a3);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.default.getter(v20);
  int v22 = v21;
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v23 = swift_slowAlloc(42LL, -1LL);
    uint64_t v44 = a6;
    uint64_t v24 = v23;
    uint64_t v25 = swift_slowAlloc(96LL, -1LL);
    uint64_t v43 = v25;
    *(_DWORD *)uint64_t v24 = 141558787;
    uint64_t v48 = 1752392040LL;
    v49[0] = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v24 + 4, v24 + 12);
    *(_WORD *)(v24 + 12) = 2081;
    int v42 = v22;
    uint64_t v41 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v10, v41);
    uint64_t v48 = sub_1003F11D4(v26, v27, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v24 + 14, v24 + 22);
    swift_bridgeObjectRelease();
    uint64_t v28 = *(void (**)(char *, uint64_t))(v11 + 8);
    v28(v16, v10);
    *(_WORD *)(v24 + 22) = 2082;
    uint64_t v48 = a3;
    swift_errorRetain(a3);
    uint64_t v29 = sub_100004AEC(&qword_10099C678);
    uint64_t v30 = String.init<A>(describing:)(&v48, v29);
    uint64_t v48 = sub_1003F11D4(v30, v31, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v24 + 24, v24 + 32);
    swift_bridgeObjectRelease();
    swift_errorRelease(a3);
    swift_errorRelease(a3);
    *(_WORD *)(v24 + 32) = 2082;
    uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter(v10, v41);
    uint64_t v48 = sub_1003F11D4(v32, v33, v49);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v24 + 34, v24 + 42);
    swift_bridgeObjectRelease();
    v28(v14, v10);
    _os_log_impl((void *)&_mh_execute_header, v20, (os_log_type_t)v42, v45, (uint8_t *)v24, 0x2Au);
    uint64_t v34 = v43;
    swift_arrayDestroy(v43, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    uint64_t v35 = v24;
    a6 = v44;
    swift_slowDealloc(v35, -1LL, -1LL);
  }

  else
  {
    uint64_t v36 = *(void (**)(char *, uint64_t))(v11 + 8);
    v36(v16, v10);
    swift_errorRelease(a3);
    swift_errorRelease(a3);
    v36(v14, v10);
  }

  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  v49[3] = My;
  v49[4] = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  uint64_t v38 = sub_10000A7C8(v49);
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v38,  enum case for Feature.FindMy.spPlaySoundAll(_:),  My);
  LOBYTE(My) = isFeatureEnabled(_:)(v49);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v49);
  uint64_t result = v47;
  if ((My & 1) != 0) {
    return a6(v47, a3);
  }
  return result;
}

void *sub_100289364(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  swift_bridgeObjectRetain(a1);
  uint64_t v2 = _swiftEmptyArrayStorage;
  uint64_t v4 = (unint64_t *)(v3 + 40);
  do
  {
    uint64_t v5 = *(v4 - 1);
    unint64_t v6 = *v4;
    uint64_t v7 = sub_100004AEC(&qword_10099D328);
    uint64_t v8 = swift_allocObject(v7, 33LL, 7LL);
    *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(_BYTE *)(v8 + 32) = v1 == 1;
    uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009AC380);
    uint64_t v30 = v9;
    uint64_t v31 = sub_1000372EC( &qword_1009A7990,  (uint64_t *)&unk_1009AC380,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    uint64_t v28 = v8;
    uint64_t v10 = sub_100012ED8(&v28, v9);
    uint64_t v11 = *v10;
    size_t v12 = *(void *)(*v10 + 16LL);
    if (v12)
    {
      uint64_t v13 = v11 + 32;
      if (v12 <= 0xE)
      {
        memset(__dst, 0, sizeof(__dst));
        unsigned __int8 v27 = v12;
        memcpy(__dst, (const void *)(v11 + 32), v12);
        uint64_t v17 = *(void *)__dst;
        unint64_t v18 = *(unsigned int *)&__dst[8] | ((unint64_t)__dst[12] << 32) | ((unint64_t)__dst[13] << 40) | ((unint64_t)v27 << 48);
        sub_10001736C(v5, v6);
        swift_bridgeObjectRetain(v8);
      }

      else
      {
        uint64_t v14 = type metadata accessor for __DataStorage(0LL);
        swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
        sub_10001736C(v5, v6);
        swift_bridgeObjectRetain(v8);
        uint64_t v15 = __DataStorage.init(bytes:length:)(v13, v12);
        uint64_t v16 = v15;
        if (v12 >= 0x7FFFFFFF)
        {
          uint64_t v19 = type metadata accessor for Data.RangeReference(0LL);
          uint64_t v17 = swift_allocObject(v19, 32LL, 7LL);
          *(void *)(v17 + swift_weakDestroy(v0 + 16) = 0LL;
          *(void *)(v17 + 24) = v12;
          unint64_t v18 = v16 | 0x8000000000000000LL;
        }

        else
        {
          uint64_t v17 = v12 << 32;
          unint64_t v18 = v15 | 0x4000000000000000LL;
        }
      }
    }

    else
    {
      sub_10001736C(v5, v6);
      swift_bridgeObjectRetain(v8);
      uint64_t v17 = 0LL;
      unint64_t v18 = 0xC000000000000000LL;
    }

    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v28);
    uint64_t v28 = v17;
    unint64_t v29 = v18;
    Data.append(_:)(v5, v6);
    uint64_t v20 = v28;
    unint64_t v21 = v29;
    sub_10001736C(v28, v29);
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_1004C4FBC(0LL, v2[2] + 1LL, 1, v2);
    }
    unint64_t v23 = v2[2];
    unint64_t v22 = v2[3];
    if (v23 >= v22 >> 1) {
      uint64_t v2 = sub_1004C4FBC((void *)(v22 > 1), v23 + 1, 1, v2);
    }
    v4 += 2;
    v2[2] = v23 + 1;
    uint64_t v24 = &v2[2 * v23];
    v24[4] = v20;
    v24[5] = v21;
    sub_100016F9C(v5, v6);
    sub_100016F9C(v20, v21);
    --v1;
  }

  while (v1);
  swift_bridgeObjectRelease();
  return v2;
}

uint64_t sub_100289650()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_10028967C(void (*a1)(__int128 *), uint64_t a2)
{
}

unint64_t sub_10028968C()
{
  unint64_t result = qword_1009A7968;
  if (!qword_1009A7968)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EC910, &type metadata for AccessoryConfigCommand);
    atomic_store(result, (unint64_t *)&qword_1009A7968);
  }

  return result;
}

unint64_t sub_1002896D0()
{
  unint64_t result = qword_1009A7970;
  if (!qword_1009A7970)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EC8E8, &type metadata for AccessoryConfigCommand);
    atomic_store(result, (unint64_t *)&qword_1009A7970);
  }

  return result;
}

uint64_t sub_100289714()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

_OWORD *sub_100289744(__int128 *a1, _OWORD *a2)
{
  __int128 v2 = *a1;
  __int128 v3 = a1[2];
  a2[1] = a1[1];
  a2[2] = v3;
  *a2 = v2;
  return a2;
}

uint64_t sub_10028975C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 24);
  *(void *)(a2 + 24) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  (**(void (***)(uint64_t, uint64_t))(v3 - 8))(a2, a1);
  return a2;
}

unint64_t sub_1002897A0()
{
  unint64_t result = qword_1009A7978;
  if (!qword_1009A7978)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE8D4, &type metadata for AirTagCommand);
    atomic_store(result, (unint64_t *)&qword_1009A7978);
  }

  return result;
}

unint64_t sub_1002897E4()
{
  unint64_t result = qword_1009A7980;
  if (!qword_1009A7980)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE8AC, &type metadata for AirTagCommand);
    atomic_store(result, (unint64_t *)&qword_1009A7980);
  }

  return result;
}

uint64_t sub_100289828()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_100289868(void (*a1)(void), uint64_t a2)
{
  return sub_100283A04(a1, a2, v2[2], v2[3], v2[4], v2[5], v2[6], v2[7]);
}

uint64_t sub_100289878()
{
  uint64_t v1 = (id *)(v0 + 16);
  switch(*(_BYTE *)(v0 + 56))
  {
    case 0:
    case 7:
    case 0xA:
      id v2 = *v1;
      goto LABEL_9;
    case 1:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
      return swift_deallocObject(v0, 57LL, 7LL);
    case 2:

      goto LABEL_8;
    case 3:

      return swift_deallocObject(v0, 57LL, 7LL);
    case 4:
    case 5:
    case 6:
      swift_release();
      return swift_deallocObject(v0, 57LL, 7LL);
    case 8:
      swift_release();
LABEL_8:
      id v2 = *(id *)(v0 + 24);
LABEL_9:
      swift_errorRelease(v2);
      break;
    case 9:
      swift_bridgeObjectRelease();
      break;
    default:
      return swift_deallocObject(v0, 57LL, 7LL);
  }

  return swift_deallocObject(v0, 57LL, 7LL);
}

uint64_t sub_10028990C(void (*a1)(void *), uint64_t a2)
{
  return sub_100283814(a1, a2, (void *)(v2 + 16));
}

uint64_t sub_100289914(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((~(a2 & a4) & 0x3000000000000000LL) != 0) {
    return sub_1000F40B4(result, a2, a3, a4, sub_10001736C);
  }
  return result;
}

uint64_t sub_100289940(uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if ((~(a2 & a4) & 0x3000000000000000LL) != 0) {
    return sub_1000F40B4(result, a2, a3, a4, sub_100016F9C);
  }
  return result;
}

uint64_t sub_10028996C()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

uint64_t sub_10028997C(void (*a1)(_BYTE *))
{
  v3[0] = *(_BYTE *)(v1 + 16);
  v3[41] = 0;
  a1(v3);
  return sub_100015794((uint64_t)v3, &qword_1009A7950);
}

uint64_t sub_1002899CC()
{
  return sub_1002899F8( "SPPlaySound didStopPlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s",  (uint64_t (*)(void, void))sub_100394848);
}

uint64_t sub_1002899E4()
{
  return sub_1002899F8( "SPPlaySound didCompletePlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s",  (uint64_t (*)(void, void))sub_1003958C0);
}

uint64_t sub_1002899F8(const char *a1, uint64_t (*a2)(void, void))
{
  uint64_t v5 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  return sub_100283328( *(void *)(v2 + 16),  v2 + ((v6 + 24) & ~v6),  v2 + ((*(void *)(v5 + 64) + v6 + ((v6 + 24) & ~v6)) & ~v6),  a1,  a2);
}

uint64_t sub_100289A60()
{
  uint64_t v1 = type metadata accessor for AccessoryCommand(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + v4 + 1;
  swift_release();
  uint64_t v7 = v0 + v4;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
  v9(v7, v8);
  v9(v7 + *(int *)(v1 + 20), v8);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100289B04()
{
  uint64_t v1 = *(void *)(type metadata accessor for AccessoryCommand(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_100283060(*(void *)(v0 + 16), v0 + v2, *(_BYTE *)(v0 + v2 + *(void *)(v1 + 64)));
}

uint64_t sub_100289B4C()
{
  return sub_100289B90( "SPPlaySound didStopPlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s",  (uint64_t (*)(void, void))sub_100394848);
}

uint64_t sub_100289B64()
{
  return sub_100289C34( "SPPlaySound didStopPlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s",  (uint64_t (*)(void, void))sub_100394848);
}

uint64_t sub_100289B7C()
{
  return sub_100289B90( "SPPlaySound didCompletePlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s",  (uint64_t (*)(void, void))sub_1003958C0);
}

uint64_t sub_100289B90(const char *a1, uint64_t (*a2)(void, void))
{
  uint64_t v5 = *(void *)(type metadata accessor for AccessoryCommand(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v9 = (v6 + v7 + *(unsigned __int8 *)(v8 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  return sub_1002831C4(*(void *)(v2 + 16), v2 + v6, v2 + v9, *(_BYTE *)(v2 + v9 + *(void *)(v8 + 64)), a1, a2);
}

uint64_t sub_100289C20()
{
  return sub_100289C34( "SPPlaySound didCompletePlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s",  (uint64_t (*)(void, void))sub_1003958C0);
}

uint64_t sub_100289C34(const char *a1, uint64_t (*a2)(void, void))
{
  uint64_t v5 = *(void *)(type metadata accessor for AccessoryCommand(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = *(void *)(v5 + 64);
  uint64_t v8 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  return sub_100283124(*(void *)(v2 + 16), v2 + v6, v2 + ((v6 + v7 + v8) & ~v8), a1, a2);
}

uint64_t sub_100289CB8()
{
  uint64_t v1 = type metadata accessor for AccessoryCommand(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  uint64_t v11 = *(void *)(v7 + 64) + v9 + 1;
  swift_release();
  uint64_t v12 = v0 + v4;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v13(v12, v6);
  v13(v12 + *(int *)(v1 + 20), v6);
  v13(v0 + v9, v6);
  return swift_deallocObject(v0, v11, v10);
}

uint64_t sub_100289D80()
{
  return sub_100289B90( "SPPlaySound didStartPlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s",  (uint64_t (*)(void, void))sub_100392A18);
}

uint64_t sub_100289D98()
{
  return sub_100289C34( "SPPlaySound didStartPlayingSoundOnDevice %{private,mask.hash}s error %{public}s. CommandId: %{public}s",  (uint64_t (*)(void, void))sub_100392A18);
}

uint64_t sub_100289DB0()
{
  uint64_t result = swift_unknownObjectWeakLoadStrong(*(void *)(v0 + 16) + 40LL);
  if (result) {
    return swift_unknownObjectRelease(result);
  }
  return result;
}

uint64_t sub_100289DE4()
{
  uint64_t v1 = type metadata accessor for AccessoryCommand(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_release();
  uint64_t v12 = v0 + v4;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v13(v12, v6);
  v13(v12 + *(int *)(v1 + 20), v6);
  v13(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_100289EAC()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  uint64_t v8 = v7 + v5;
  swift_release(*(void *)(v0 + 16));
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  return swift_deallocObject(v0, v8, v6);
}

void sub_100289F40(uint64_t a1)
{
}

uint64_t sub_100289F64()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100289F88@<X0>(uint64_t *a1@<X8>)
{
  return sub_1004C2E34(v1, a1);
}

uint64_t sub_100289FA0@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10028A25C(a1, 0, a2);
}

uint64_t sub_100289FAC@<X0>(void (*a1)(void, void)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(type metadata accessor for AccessoryCommand(0LL) - 8) + 80LL);
  return sub_10027D70C(a1, *(void *)(v2 + 16), v2 + ((v5 + 24) & ~v5), a2);
}

uint64_t sub_100289FFC()
{
  return sub_1001538E8((void (*)(void))&_swift_release);
}

uint64_t sub_10028A008@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1002833B8(a1, *(void *)(v2 + 24));
  *a2 = result;
  return result;
}

uint64_t sub_10028A034()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (v5 + v3 + v4) & ~v3;
  uint64_t v7 = type metadata accessor for AccessoryCommand(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v5 + v9 + v6) & ~v9;
  uint64_t v11 = v3 | v9 | 7;
  unint64_t v12 = (((*(void *)(v8 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v16 = v11;
  swift_release();
  swift_release();
  uint64_t v13 = v0 + v4;
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v14(v13, v1);
  v14(v0 + v6, v1);
  v14(v0 + v10, v1);
  v14(v0 + v10 + *(int *)(v7 + 20), v1);
  swift_release();

  swift_release();
  return swift_deallocObject(v0, ((v12 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8, v16);
}

uint64_t *sub_10028A15C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = *(void *)(v3 + 64);
  uint64_t v7 = (v6 + v4 + v5) & ~v4;
  uint64_t v8 = *(void *)(type metadata accessor for AccessoryCommand(0LL) - 8);
  unint64_t v9 = (v6 + *(unsigned __int8 *)(v8 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v10 = (*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10027D7F4( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  v1 + v5,  v1 + v7,  v1 + v9,  *(void ***)(v1 + v10),  *(void **)(v1 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void (**)(uint64_t, uint64_t))(v1 + ((((v10 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10028A21C(uint64_t a1)
{
  return sub_10027AD38( a1,  *(void *)(v1 + 16),  *(void **)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48));
}

uint64_t sub_10028A23C@<X0>(uint64_t *a1@<X8>)
{
  return sub_1007D0460(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_10028A254@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_10028A25C(a1, 1, a2);
}

uint64_t sub_10028A25C@<X0>(uint64_t a1@<X0>, char a2@<W1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_100283DC0(*(void *)a1, *(void *)(a1 + 8), a2);
  *a3 = result;
  return result;
}

uint64_t sub_10028A290()
{
  uint64_t v1 = type metadata accessor for AccessoryCommand(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  uint64_t v7 = v0 + v4;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  unint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
  v9(v7, v8);
  v9(v7 + *(int *)(v1 + 20), v8);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10028A330@<X0>(void (*a1)(char *, char *, uint64_t)@<X0>, void *a2@<X8>)
{
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(type metadata accessor for AccessoryCommand(0LL) - 8) + 80LL);
  return sub_10027E128(a1, (char *)(v2 + ((v5 + 24) & ~v5)), a2);
}

uint64_t sub_10028A388()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (v5 + v3 + v4) & ~v3;
  uint64_t v7 = type metadata accessor for AccessoryCommand(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v10 = (v5 + v9 + v6) & ~v9;
  uint64_t v15 = v3 | v9 | 7;
  unint64_t v11 = (((*(void *)(v8 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release();
  swift_release();
  uint64_t v12 = v0 + v4;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v13(v12, v1);
  v13(v0 + v6, v1);
  v13(v0 + v10, v1);
  v13(v0 + v10 + *(int *)(v7 + 20), v1);
  swift_release();

  return swift_deallocObject(v0, v11 + 8, v15);
}

uint64_t *sub_10028A4A4(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = *(void *)(v3 + 64);
  uint64_t v7 = (v6 + v4 + v5) & ~v4;
  uint64_t v8 = *(void *)(type metadata accessor for AccessoryCommand(0LL) - 8);
  unint64_t v9 = (v6 + *(unsigned __int8 *)(v8 + 80) + v7) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  unint64_t v10 = (*(void *)(v8 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10027BA98( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  v1 + v5,  (os_log_s *)(v1 + v7),  v1 + v9,  *(void *)(v1 + v10),  *(void **)(v1 + ((v10 + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10028A548(uint64_t result, char a2)
{
  if (a2 != -1) {
    return sub_10015BB30(result, a2);
  }
  return result;
}

uint64_t sub_10028A55C(uint64_t a1)
{
  return sub_1002799B0( a1,  *(void *)(v1 + 16),  *(void **)(v1 + 24),  *(void **)(v1 + 32),  *(void **)(v1 + 40),  *(void **)(v1 + 48),  *(void *)(v1 + 56),  *(void *)(v1 + 64),  *(void **)(v1 + 72),  *(void *)(v1 + 80),  *(void *)(v1 + 88));
}

uint64_t sub_10028A598()
{
  uint64_t v1 = type metadata accessor for AccessoryCommand(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v10 = v3 | 7;
  unint64_t v5 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v4;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
  v8(v6, v7);
  v8(v6 + *(int *)(v1 + 20), v7);
  swift_release();

  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 16, v10);
}

uint64_t *sub_10028A69C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AccessoryCommand(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10027A4D8( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  v1 + v4,  *(void *)(v1 + v5),  *(void **)(v1 + v6),  *(void (**)(uint64_t, uint64_t))(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void (**)(void))(v1 + ((((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + ((((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_10028A728()
{
  uint64_t v1 = type metadata accessor for AccessoryCommand(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 33) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  swift_release();
  sub_10015BB30(*(void *)(v0 + 24), *(_BYTE *)(v0 + 32));
  uint64_t v7 = v0 + v4;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  unint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
  v9(v7, v8);
  v9(v7 + *(int *)(v1 + 20), v8);
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t *sub_10028A7EC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AccessoryCommand(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 33LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_100278AE8( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(unsigned __int8 *)(v1 + 32),  v1 + v4,  *(void (**)(uint64_t *))v5,  *(void *)(v5 + 8));
}

uint64_t sub_10028A848()
{
  uint64_t v1 = type metadata accessor for AccessoryCommand(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  sub_10015BB30(*(void *)(v0 + 16), *(_BYTE *)(v0 + 24));
  swift_release();
  uint64_t v7 = v0 + v4;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  unint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
  v9(v7, v8);
  v9(v7 + *(int *)(v1 + 20), v8);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10028A8F4()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for AccessoryCommand(0LL) - 8) + 80LL);
  return sub_1002794D4(*(void *)(v0 + 16), *(_BYTE *)(v0 + 24), *(void *)(v0 + 32), v0 + ((v1 + 40) & ~v1));
}

uint64_t sub_10028A92C(uint64_t a1)
{
  return sub_100276100( a1,  *(void *)(v1 + 16),  *(char **)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(void *)(v1 + 56),  *(void *)(v1 + 64));
}

uint64_t sub_10028A95C@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100276B78(a1, v2, a2);
}

uint64_t sub_10028A964()
{
  uint64_t v1 = type metadata accessor for AccessoryCommand(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 16) & ~v8;
  uint64_t v10 = *(void *)(v7 + 64);
  uint64_t v16 = v3 | v8 | 7;
  uint64_t v11 = (v10 + v8 + v9) & ~v8;
  unint64_t v12 = (v10 + v11 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release();
  swift_release();
  uint64_t v13 = v0 + v4;
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v14(v13, v6);
  v14(v13 + *(int *)(v1 + 20), v6);
  swift_release();
  v14(v0 + v9, v6);
  v14(v0 + v11, v6);

  return swift_deallocObject(v0, v12 + 8, v16);
}

void sub_10028AA88(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AccessoryCommand(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v5 + v7 + 16) & ~v7;
  sub_100276CBC( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  v1 + v4,  *(void (**)(void))(v1 + v5),  *(void *)(v1 + v5 + 8),  v1 + v8,  v1 + ((*(void *)(v6 + 64) + v7 + v8) & ~v7),  *(void **)(v1 + ((*(void *)(v6 + 64) + ((*(void *)(v6 + 64) + v7 + v8) & ~v7) + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10028AB3C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10028AB60(uint64_t a1)
{
}

uint64_t sub_10028AB6C(uint64_t a1, uint64_t a2)
{
  return sub_10073BC20(a1, a2, *(void *)(v2 + 16), *(void **)(v2 + 24));
}

void sub_10028AB74(uint64_t a1)
{
}

uint64_t sub_10028ABA8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10028ABCC@<X0>(void **a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_100274AFC(a1, *(void *)(v2 + 16), a2);
}

uint64_t sub_10028ABD4()
{
  uint64_t v1 = type metadata accessor for AccessoryCommand(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  uint64_t v12 = (v10 + v8 + v9) & ~v8;
  uint64_t v13 = v12 + v10;
  swift_release();
  swift_release();
  swift_release();
  uint64_t v14 = v0 + v4;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v15(v14, v6);
  v15(v14 + *(int *)(v1 + 20), v6);
  v15(v0 + v9, v6);
  v15(v0 + v12, v6);
  return swift_deallocObject(v0, v13, v11);
}

void sub_10028ACC8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for AccessoryCommand(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  sub_100274EF4( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void (**)(char *))(v1 + 32),  *(void *)(v1 + 40),  v1 + v4,  v1 + ((v4 + v5 + v7) & ~v7),  v1 + ((*(void *)(v6 + 64) + v7 + ((v4 + v5 + v7) & ~v7)) & ~v7));
}

uint64_t sub_10028AD4C()
{
  return sub_1001538E8((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10028AD58()
{
  return sub_1001538E8((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10028AD64(uint64_t a1)
{
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v4 = *(void *)(v1 + 24);
  uint64_t v6 = (void *)swift_task_alloc(dword_1009A7C34);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100015D58;
  return sub_10027065C(a1, v5, v4);
}

uint64_t sub_10028ADC8(uint64_t a1)
{
  return sub_10026C8A0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10028ADD0(uint64_t a1)
{
  return sub_10026C91C(a1, *(void *)(v1 + 16), *(void **)(v1 + 24), *(void *)(v1 + 32));
}

void sub_10028ADF0(uint64_t a1)
{
}

uint64_t sub_10028AE04(uint64_t a1)
{
  return sub_10026BD88(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10028AE10()
{
  uint64_t v1 = type metadata accessor for AccessoryCommand(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release();
  uint64_t v7 = v0 + v4;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
  v9(v7, v8);
  v9(v7 + *(int *)(v1 + 20), v8);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10028AEB8()
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for AccessoryCommand(0LL) - 8) + 80LL);
  uint64_t v3 = v0 + ((v2 + 40) & ~v2);
  uint64_t v4 = (void *)swift_task_alloc(dword_1009A7C54);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000159BC;
  uint64_t v5 = (void *)swift_task_alloc(dword_1009A7564);
  v4[2] = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_1000159BC;
  return sub_10026D010(v3);
}

unint64_t sub_10028AF4C()
{
  unint64_t result = qword_1009A7C78;
  if (!qword_1009A7C78)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Int8, &type metadata for Int8);
    atomic_store(result, (unint64_t *)&qword_1009A7C78);
  }

  return result;
}

uint64_t sub_10028AF90(uint64_t a1)
{
  return sub_10026AFC8(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10028AF9C(uint64_t a1)
{
  return sub_10026B058(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_10028AFC0()
{
  uint64_t v1 = sub_100004AEC(&qword_1009A7C48);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_10028B038(uint64_t a1)
{
}

void sub_10028B04C(uint64_t a1, const char *a2, const char *a3)
{
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(sub_100004AEC(&qword_1009A7C48) - 8) + 80LL);
  sub_10026CB40(a1, *(void *)(v3 + 16), v3 + ((v7 + 24) & ~v7), a2, a3);
}

uint64_t sub_10028B0AC()
{
  return sub_1007D0710(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_10028B0C8()
{
  return sub_100269A80(*(void *)(v0 + 16), *(void **)(v0 + 24));
}

uint64_t sub_10028B0D0()
{
  return sub_1004C2FD4(v0);
}

uint64_t sub_10028B0E8()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10028B114(uint64_t a1)
{
  return sub_100269DB4(a1, *(void **)(v1 + 16), *(void ***)(v1 + 24));
}

uint64_t sub_10028B120()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10028B14C()
{
  return sub_10026A470(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t *sub_10028B154(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v10);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = *a2;
      swift_errorRetain(v11);
      *a1 = v11;
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      uint64_t v9 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16LL))(a1, a2, v9);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t sub_10028B230(void *a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 1) {
    return swift_errorRelease(*a1);
  }
  if (!(_DWORD)result)
  {
    uint64_t v4 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  }

  return result;
}

void *sub_10028B290(void *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = *a2;
    swift_errorRetain(v8);
    *a1 = v8;
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

uint64_t *sub_10028B344(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100018C68((uint64_t)a1, type metadata accessor for OwnerCommandManager.Error);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = *a2;
      swift_errorRetain(v8);
      *a1 = v8;
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      uint64_t v7 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

void *sub_10028B410(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v6 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

void *sub_10028B498(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100018C68((uint64_t)a1, type metadata accessor for OwnerCommandManager.Error);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      uint64_t v6 = type metadata accessor for UUID(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t sub_10028B538(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "\b";
    v4[2] = &unk_1007F8D80;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 3LL, v4);
    return 0LL;
  }

  return result;
}

void sub_10028B644(void *a1@<X8>)
{
}

uint64_t sub_10028B660(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100004AEC((uint64_t *)&unk_10099E570);
    unint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    unint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v27 = a1 + 64;
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(v4 + 63) >> 6;
  uint64_t v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  uint64_t result = swift_retain(v3);
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_26;
    }

    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }

    if (v14 >= v28) {
      goto LABEL_35;
    }
    unint64_t v15 = *(void *)(v27 + 8 * v14);
    ++v9;
    if (!v15)
    {
      int64_t v9 = v14 + 1;
      if (v14 + 1 >= v28) {
        goto LABEL_35;
      }
      unint64_t v15 = *(void *)(v27 + 8 * v9);
      if (!v15)
      {
        int64_t v9 = v14 + 2;
        if (v14 + 2 >= v28) {
          goto LABEL_35;
        }
        unint64_t v15 = *(void *)(v27 + 8 * v9);
        if (!v15) {
          break;
        }
      }
    }

uint64_t sub_10028B9E0(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100004AEC(&qword_1009A7D30);
    uint64_t v2 = (void *)static _DictionaryStorage.allocate(capacity:)(v1);
  }

  else
  {
    uint64_t v2 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v35 = a1 + 64;
  uint64_t v3 = 1LL << *(_BYTE *)(a1 + 32);
  if (v3 < 64) {
    uint64_t v4 = ~(-1LL << v3);
  }
  else {
    uint64_t v4 = -1LL;
  }
  unint64_t v5 = v4 & *(void *)(a1 + 64);
  int64_t v36 = (unint64_t)(v3 + 63) >> 6;
  unint64_t v6 = (char *)(v2 + 8);
  swift_bridgeObjectRetain(a1);
  uint64_t result = swift_retain();
  int64_t v8 = 0LL;
  while (1)
  {
    if (v5)
    {
      unint64_t v10 = __clz(__rbit64(v5));
      v5 &= v5 - 1;
      unint64_t v11 = v10 | (v8 << 6);
      goto LABEL_26;
    }

    int64_t v12 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
LABEL_36:
      __break(1u);
      goto LABEL_37;
    }

    if (v12 >= v36) {
      goto LABEL_35;
    }
    unint64_t v13 = *(void *)(v35 + 8 * v12);
    ++v8;
    if (!v13)
    {
      int64_t v8 = v12 + 1;
      if (v12 + 1 >= v36) {
        goto LABEL_35;
      }
      unint64_t v13 = *(void *)(v35 + 8 * v8);
      if (!v13)
      {
        int64_t v8 = v12 + 2;
        if (v12 + 2 >= v36) {
          goto LABEL_35;
        }
        unint64_t v13 = *(void *)(v35 + 8 * v8);
        if (!v13) {
          break;
        }
      }
    }

void sub_10028BD3C(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100004AEC(&qword_10099E1F8);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v41 = v1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(v1 + 64);
  int64_t v40 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = &v47;
  int64_t v8 = &v49;
  swift_bridgeObjectRetain(v1);
  int64_t i = 0LL;
  unint64_t v10 = (char *)&type metadata for Any + 8;
  unint64_t v11 = &type metadata for String;
  if (v6) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v20 = i + 1;
  if (__OFADD__(i, 1LL)) {
    goto LABEL_35;
  }
  if (v20 >= v40) {
    goto LABEL_32;
  }
  unint64_t v21 = *(void *)(v41 + 8 * v20);
  int64_t v22 = i + 1;
  if (!v21)
  {
    int64_t v22 = i + 2;
    if (i + 2 >= v40) {
      goto LABEL_32;
    }
    unint64_t v21 = *(void *)(v41 + 8 * v22);
    if (!v21)
    {
      int64_t v22 = i + 3;
      if (i + 3 >= v40) {
        goto LABEL_32;
      }
      unint64_t v21 = *(void *)(v41 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = i + 4;
        if (i + 4 >= v40) {
          goto LABEL_32;
        }
        unint64_t v21 = *(void *)(v41 + 8 * v22);
        if (!v21)
        {
          int64_t v23 = i + 5;
          if (i + 5 < v40)
          {
            unint64_t v21 = *(void *)(v41 + 8 * v23);
            if (v21)
            {
              int64_t v22 = i + 5;
              goto LABEL_26;
            }

            while (1)
            {
              int64_t v22 = v23 + 1;
              if (__OFADD__(v23, 1LL)) {
                goto LABEL_36;
              }
              if (v22 >= v40) {
                break;
              }
              unint64_t v21 = *(void *)(v41 + 8 * v22);
              ++v23;
              if (v21) {
                goto LABEL_26;
              }
            }
          }

uint64_t sub_10028C0A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100004AEC((uint64_t *)&unk_10099E570);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v30 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v29 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = (char *)(v3 + 8);
  swift_bridgeObjectRetain(a1);
  uint64_t result = swift_retain();
  int64_t v9 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v12 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      goto LABEL_28;
    }

    int64_t v14 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v14 >= v29) {
      goto LABEL_37;
    }
    unint64_t v15 = *(void *)(v30 + 8 * v14);
    int64_t v16 = v9 + 1;
    if (!v15)
    {
      int64_t v16 = v9 + 2;
      if (v9 + 2 >= v29) {
        goto LABEL_37;
      }
      unint64_t v15 = *(void *)(v30 + 8 * v16);
      if (!v15)
      {
        int64_t v16 = v9 + 3;
        if (v9 + 3 >= v29) {
          goto LABEL_37;
        }
        unint64_t v15 = *(void *)(v30 + 8 * v16);
        if (!v15)
        {
          int64_t v16 = v9 + 4;
          if (v9 + 4 >= v29) {
            goto LABEL_37;
          }
          unint64_t v15 = *(void *)(v30 + 8 * v16);
          if (!v15) {
            break;
          }
        }
      }
    }

void sub_10028C498(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100004AEC(&qword_10099E4F0);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
  }

  uint64_t v41 = v1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(v1 + 64);
  int64_t v40 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = &v46;
  int64_t v8 = &v48;
  swift_bridgeObjectRetain(v1);
  int64_t i = 0LL;
  unint64_t v10 = &type metadata for String;
  if (v6) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v19 = i + 1;
  if (__OFADD__(i, 1LL)) {
    goto LABEL_35;
  }
  if (v19 >= v40) {
    goto LABEL_32;
  }
  unint64_t v20 = *(void *)(v41 + 8 * v19);
  int64_t v21 = i + 1;
  if (!v20)
  {
    int64_t v21 = i + 2;
    if (i + 2 >= v40) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v41 + 8 * v21);
    if (!v20)
    {
      int64_t v21 = i + 3;
      if (i + 3 >= v40) {
        goto LABEL_32;
      }
      unint64_t v20 = *(void *)(v41 + 8 * v21);
      if (!v20)
      {
        int64_t v21 = i + 4;
        if (i + 4 >= v40) {
          goto LABEL_32;
        }
        unint64_t v20 = *(void *)(v41 + 8 * v21);
        if (!v20)
        {
          int64_t v22 = i + 5;
          if (i + 5 < v40)
          {
            unint64_t v20 = *(void *)(v41 + 8 * v22);
            if (v20)
            {
              int64_t v21 = i + 5;
              goto LABEL_26;
            }

            while (1)
            {
              int64_t v21 = v22 + 1;
              if (__OFADD__(v22, 1LL)) {
                goto LABEL_36;
              }
              if (v21 >= v40) {
                break;
              }
              unint64_t v20 = *(void *)(v41 + 8 * v21);
              ++v22;
              if (v20) {
                goto LABEL_26;
              }
            }
          }

void sub_10028C804(uint64_t a1)
{
  uint64_t v1 = a1;
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100004AEC(&qword_10099E1F8);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
  }

  uint64_t v37 = v1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(v1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(v1 + 64);
  int64_t v36 = (unint64_t)(63 - v4) >> 6;
  uint64_t v7 = v49;
  int64_t v8 = v47;
  int64_t v9 = &v43;
  unint64_t v10 = &v45;
  swift_bridgeObjectRetain(v1);
  int64_t v38 = 0LL;
  if (v6) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v19 = v38 + 1;
  if (__OFADD__(v38, 1LL)) {
    goto LABEL_35;
  }
  if (v19 >= v36) {
    goto LABEL_32;
  }
  unint64_t v20 = *(void *)(v37 + 8 * v19);
  int64_t v21 = v38 + 1;
  if (!v20)
  {
    int64_t v21 = v38 + 2;
    if (v38 + 2 >= v36) {
      goto LABEL_32;
    }
    unint64_t v20 = *(void *)(v37 + 8 * v21);
    if (!v20)
    {
      int64_t v21 = v38 + 3;
      if (v38 + 3 >= v36) {
        goto LABEL_32;
      }
      unint64_t v20 = *(void *)(v37 + 8 * v21);
      if (!v20)
      {
        int64_t v21 = v38 + 4;
        if (v38 + 4 >= v36) {
          goto LABEL_32;
        }
        unint64_t v20 = *(void *)(v37 + 8 * v21);
        if (!v20)
        {
          int64_t v22 = v38 + 5;
          if (v38 + 5 < v36)
          {
            unint64_t v20 = *(void *)(v37 + 8 * v22);
            if (v20)
            {
              int64_t v21 = v38 + 5;
              goto LABEL_26;
            }

            while (1)
            {
              int64_t v21 = v22 + 1;
              if (__OFADD__(v22, 1LL)) {
                goto LABEL_36;
              }
              if (v21 >= v36) {
                break;
              }
              unint64_t v20 = *(void *)(v37 + 8 * v21);
              ++v22;
              if (v20) {
                goto LABEL_26;
              }
            }
          }

void sub_10028CBAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2)
  {
    sub_100004AEC(&qword_10099E270);
    uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  }

  else
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
  }

  uint64_t v29 = a1 + 64;
  uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
  if (-v4 < 64) {
    uint64_t v5 = ~(-1LL << -(char)v4);
  }
  else {
    uint64_t v5 = -1LL;
  }
  unint64_t v6 = v5 & *(void *)(a1 + 64);
  int64_t v28 = (unint64_t)(63 - v4) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t i = 0LL;
  if (v6) {
    goto LABEL_10;
  }
LABEL_11:
  int64_t v12 = i + 1;
  if (__OFADD__(i, 1LL)) {
    goto LABEL_35;
  }
  if (v12 >= v28) {
    goto LABEL_32;
  }
  unint64_t v13 = *(void *)(v29 + 8 * v12);
  int64_t v14 = i + 1;
  if (!v13)
  {
    int64_t v14 = i + 2;
    if (i + 2 >= v28) {
      goto LABEL_32;
    }
    unint64_t v13 = *(void *)(v29 + 8 * v14);
    if (!v13)
    {
      int64_t v14 = i + 3;
      if (i + 3 >= v28) {
        goto LABEL_32;
      }
      unint64_t v13 = *(void *)(v29 + 8 * v14);
      if (!v13)
      {
        int64_t v14 = i + 4;
        if (i + 4 >= v28) {
          goto LABEL_32;
        }
        unint64_t v13 = *(void *)(v29 + 8 * v14);
        if (!v13)
        {
          int64_t v15 = i + 5;
          if (i + 5 < v28)
          {
            unint64_t v13 = *(void *)(v29 + 8 * v15);
            if (v13)
            {
              int64_t v14 = i + 5;
              goto LABEL_26;
            }

            while (1)
            {
              int64_t v14 = v15 + 1;
              if (__OFADD__(v15, 1LL)) {
                goto LABEL_36;
              }
              if (v14 >= v28) {
                break;
              }
              unint64_t v13 = *(void *)(v29 + 8 * v14);
              ++v15;
              if (v13) {
                goto LABEL_26;
              }
            }
          }

uint64_t sub_10028CE4C()
{
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v17 = v18[0];
  uint64_t v0 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  uint64_t v1 = JSONEncoder.init()();
  unint64_t v2 = sub_10003926C();
  uint64_t v3 = dispatch thunk of JSONEncoder.encode<A>(_:)(&v17, &type metadata for Configuration, v2);
  unint64_t v5 = v4;
  unint64_t v6 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v16[0] = 0LL;
  id v8 = [v6 JSONObjectWithData:isa options:4 error:v16];

  id v9 = v16[0];
  if (!v8)
  {
    unint64_t v13 = v9;
    uint64_t v14 = _convertNSErrorToError(_:)(v9);

    swift_willThrow();
    swift_errorRelease(v14);
    goto LABEL_7;
  }

  _bridgeAnyObjectToAny(_:)(v18, v8);
  swift_unknownObjectRelease(v8);
  uint64_t v10 = sub_100004AEC(&qword_1009A0CE8);
  if ((swift_dynamicCast(v16, v18, (char *)&type metadata for Any + 8, v10, 6LL) & 1) == 0)
  {
LABEL_7:
    swift_release(v1);
    sub_100016F9C(v3, v5);
    swift_bridgeObjectRelease(v17);
    return 0LL;
  }

  id v11 = v16[0];
  uint64_t v12 = sub_10028B660((uint64_t)v16[0]);
  swift_release(v1);
  sub_100016F9C(v3, v5);
  swift_bridgeObjectRelease(v11);
  swift_bridgeObjectRelease(v17);
  return v12;
}

void *sub_10028D078(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SafeLocation(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v16 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    v15[1] = v1;
    uint64_t v9 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    sub_100022898(0LL, &qword_1009A0B60, &OBJC_CLASS___SPSafeLocation_ptr);
    uint64_t v10 = *(void *)(v4 + 72);
    v15[0] = a1;
    swift_bridgeObjectRetain(a1);
    do
    {
      sub_10001DC4C(v9, (uint64_t)v6, type metadata accessor for SafeLocation);
      id v11 = sub_10047B1A8((uint64_t)v6);
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      unint64_t v13 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v12 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v13 >= v12 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1LL);
      }
      uint64_t v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v11);
      specialized Array._endMutation()(v14);
      v9 += v10;
      --v8;
    }

    while (v8);
    swift_bridgeObjectRelease();
    return (void *)v16;
  }

  return result;
}

void *sub_10028D1D8(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    uint64_t v4 = type metadata accessor for StandaloneBeacon(0LL);
    uint64_t v5 = *(void *)(v4 - 8);
    uint64_t v6 = a1 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v23 = *(void *)(v5 + 72);
    uint64_t v24 = v4;
    do
    {
      uint64_t v32 = v2;
      uint64_t v7 = MACAddress.dataRepresentation.getter(v4);
      unint64_t v30 = v8;
      uint64_t v31 = v7;
      uint64_t v29 = MACAddress.dataRepresentation.getter(v7);
      uint64_t v9 = *(void *)(v6 + *(int *)(v24 + 28) + 8);
      unint64_t v26 = v10;
      id v11 = (uint64_t *)(v6 + *(int *)(v24 + 36));
      uint64_t v13 = *v11;
      unint64_t v12 = v11[1];
      id v27 = objc_allocWithZone(&OBJC_CLASS___SPStandaloneBeacon);
      swift_bridgeObjectRetain(v9);
      unint64_t v14 = v12;
      sub_10001736C(v13, v12);
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      Class v15 = Data._bridgeToObjectiveC()().super.isa;
      Class v16 = Data._bridgeToObjectiveC()().super.isa;
      NSString v17 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      Class v18 = Date._bridgeToObjectiveC()().super.isa;
      Class v19 = Data._bridgeToObjectiveC()().super.isa;
      id v28 = [v27 initWithIdentifier:isa macAddress:v15 classicMacAddress:v16 serialNumber:v17 pairingDate:v18 productData:v19];

      sub_100016F9C(v13, v14);
      sub_100016F9C(v29, v26);
      uint64_t v20 = sub_100016F9C(v31, v30);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v20);
      uint64_t v21 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v21);
      uint64_t v22 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v21, v28);
      uint64_t v4 = specialized ContiguousArray._endMutation()(v22);
      v6 += v23;
      uint64_t v2 = v32 - 1;
    }

    while (v32 != 1);
    return _swiftEmptyArrayStorage;
  }

  return result;
}

id sub_10028D3F4(uint64_t a1, void (*a2)(void), uint64_t a3)
{
  uint64_t v138 = a3;
  __int128 v139 = a2;
  uint64_t v129 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v129);
  uint64_t v130 = (uint64_t)&v126 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v6);
  uint64_t v133 = (char *)&v126 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v134 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v132 = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  uint64_t v131 = (uint64_t)&v126 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009AE470);
  __chkstk_darwin(v9);
  uint64_t v136 = (char *)&v126 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for SafeLocation(0LL);
  uint64_t v146 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v161 = (uint64_t)&v126 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v145 = (uint64_t)&v126 - v14;
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v15);
  uint64_t v149 = (uint64_t)&v126 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v153 = *(void *)(v17 - 8);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v159 = (char *)&v126 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  unint64_t v148 = (char *)&v126 - v20;
  uint64_t v21 = type metadata accessor for UUID(0LL);
  uint64_t v154 = *(void *)(v21 - 8);
  uint64_t v155 = v21;
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v152 = (char *)&v126 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  id v151 = (char *)&v126 - v24;
  uint64_t v147 = type metadata accessor for ShareRecord(0LL);
  uint64_t v25 = *(uint64_t (**)(uint64_t))(v147 - 8);
  __chkstk_darwin(v147);
  uint64_t v150 = (uint64_t)&v126 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v28 = __chkstk_darwin(v27);
  __int128 v140 = (char *)&v126 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v30 = (unint64_t *)static os_log_type_t.info.getter(v28);
  if (qword_10099B6F8 != -1) {
    goto LABEL_39;
  }
  while (1)
  {
    uint64_t v31 = qword_100A2B008;
    uint64_t v135 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v32 = swift_allocObject(v135, 112LL, 7LL);
    *(_OWORD *)(v32 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    uint64_t v164 = *v3;
    uint64_t v33 = sub_100004AEC(&qword_1009A7D50);
    uint64_t v34 = String.init<A>(describing:)(&v164, v33);
    unint64_t v141 = v3;
    uint64_t v35 = v34;
    uint64_t v37 = v36;
    *(void *)(v32 + 56) = &type metadata for String;
    unint64_t v38 = sub_1000226F4();
    *(void *)(v32 + 32) = v35;
    *(void *)(v32 + sub_10016CF88(v0 + 40) = v37;
    *(void *)(v32 + 96) = &type metadata for String;
    *(void *)(v32 + 104) = v38;
    *(void *)(v32 + 64) = v38;
    *(void *)(v32 + 72) = 0xD000000000000017LL;
    *(void *)(v32 + 80) = 0x800000010085C800LL;
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "%@: %@", 6LL, 2LL, v32);
    swift_bridgeObjectRelease();
    uint64_t v39 = v141[32];
    sub_100504C28(a1, (uint64_t)&v162);
    if (!v163)
    {
      sub_100015794((uint64_t)&v162, (uint64_t *)&unk_1009A9C40);
      return (id)((uint64_t (*)(void))v139)(0LL);
    }

    uint64_t v40 = a1;
    sub_100012EC0(&v162, (uint64_t)&v164);
    uint64_t v41 = sub_1005777D8();
    uint64_t v42 = v41[2];
    unint64_t v137 = (void *)a1;
    if (v42)
    {
      uint64_t v128 = v39;
      *(void *)&__int128 v162 = _swiftEmptyArrayStorage;
      uint64_t v160 = v42;
      specialized ContiguousArray.reserveCapacity(_:)(v42);
      unint64_t v43 = (*((unsigned __int8 *)v25 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v25 + 80);
      uint64_t v127 = v41;
      __int128 v44 = (char *)v41 + v43;
      id v144 = (id)objc_opt_self(&OBJC_CLASS___SPBeacon);
      uint64_t v45 = (uint64_t)v44;
      uint64_t v143 = *((void *)v25 + 9);
      uint64_t v46 = v154;
      a1 = v155;
      __int128 v48 = v152;
      uint64_t v47 = v153;
      uint64_t v49 = v159;
      uint64_t v50 = v151;
      uint64_t v51 = v150;
      unint64_t v142 = v17;
      do
      {
        uint64_t v159 = (char *)v45;
        sub_10001DC4C(v45, v51, type metadata accessor for ShareRecord);
        uint64_t v67 = (int *)v147;
        uint64_t v68 = *(void (**)(char *, uint64_t, uint64_t))(v46 + 16);
        v68(v50, v51 + *(int *)(v147 + 20), a1);
        v68(v48, v51 + v67[6], a1);
        id v158 = [v144 SPOwner];
        uint64_t v157 = sub_1006054A8(*(_BYTE *)(v51 + v67[9]), *(void *)(v51 + v67[9] + 8), *(void **)(v51 + v67[9] + 16));
        uint64_t v69 = v148;
        (*(void (**)(char *, uint64_t, unint64_t))(v47 + 16))(v148, v51 + v67[7], v17);
        uint64_t v70 = v149;
        sub_10001581C(v51 + v67[8], v149, (uint64_t *)&unk_10099D720);
        if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v47 + 48))(v70, 1LL, v17) == 1)
        {
          static Date.distantFuture.getter();
          sub_100015794(v70, (uint64_t *)&unk_10099D720);
        }

        else
        {
          (*(void (**)(char *, uint64_t, unint64_t))(v47 + 32))(v49, v70, v17);
        }

        uint64_t v52 = v47;
        id v53 = objc_allocWithZone(&OBJC_CLASS___SPBeaconShare);
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        Class v55 = UUID._bridgeToObjectiveC()().super.isa;
        Class v56 = Date._bridgeToObjectiveC()().super.isa;
        uint64_t v57 = v49;
        Class v58 = Date._bridgeToObjectiveC()().super.isa;
        uint64_t v59 = v53;
        uint64_t v61 = (void *)v157;
        uint64_t v60 = v158;
        id v156 = [v59 initWithIdentifier:isa beaconIdentifier:v55 owner:v158 sharee:v157 state:5 creationDate:v56 expirationDate:v58];

        uint64_t v62 = *(void (**)(char *, unint64_t))(v52 + 8);
        uint64_t v49 = v57;
        unint64_t v17 = v142;
        v62(v57, v142);
        v62(v69, v17);
        uint64_t v46 = v154;
        a1 = v155;
        uint64_t v63 = *(void (**)(void))(v154 + 8);
        __int128 v48 = v152;
        v63();
        uint64_t v50 = v151;
        v63();
        uint64_t v51 = v150;
        uint64_t v64 = sub_100018C68(v150, type metadata accessor for ShareRecord);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v64);
        uint64_t v65 = *(void *)(v162 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v65);
        uint64_t v66 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v65, v156);
        specialized ContiguousArray._endMutation()(v66);
        uint64_t v45 = (uint64_t)&v159[v143];
        --v160;
        uint64_t v47 = v153;
      }

      while (v160);
      uint64_t v71 = (void *)v162;
      swift_bridgeObjectRelease();
      uint64_t v40 = (uint64_t)v137;
      uint64_t v39 = v128;
      uint64_t v72 = v46;
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v71 = _swiftEmptyArrayStorage;
      uint64_t v72 = v154;
      a1 = v155;
    }

    sub_1006F1368((uint64_t)v71);
    swift_bridgeObjectRelease();
    uint64_t v75 = v165;
    uint64_t v74 = v166;
    BOOL v76 = sub_100012ED8(&v164, v165);
    uint64_t v77 = sub_10054A858((uint64_t)v76, v39, v75, v74);
    unint64_t v30 = &qword_1009A0B70;
    sub_100022898(0LL, &qword_1009A0B70, &OBJC_CLASS___SPBeaconShare_ptr);
    sub_10014EFD4(&qword_1009A2448, &qword_1009A0B70, &OBJC_CLASS___SPBeaconShare_ptr);
    Class v78 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v77 setShares:v78];

    if (qword_10099B300 != -1) {
      swift_once(&qword_10099B300, sub_1003459EC);
    }
    id v79 = sub_10074BADC(v40);
    [v77 setSeparationState:v79];

    uint64_t v80 = v140;
    (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v140, v40, a1);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v72 + 56))(v80, 0LL, 1LL, a1);
    unint64_t v81 = sub_100576844();
    uint64_t v82 = v81[2];
    if (!v82) {
      break;
    }
    unint64_t v83 = 0LL;
    uint64_t v3 = _swiftEmptyArrayStorage;
    uint64_t v25 = type metadata accessor for SafeLocation;
    while (v83 < v81[2])
    {
      unint64_t v30 = (unint64_t *)((*(unsigned __int8 *)(v146 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v146 + 80));
      a1 = *(void *)(v146 + 72);
      uint64_t v84 = v145;
      sub_10001DC4C((uint64_t)v30 + (void)v81 + a1 * v83, v145, type metadata accessor for SafeLocation);
      sub_10002218C(v84, v161, type metadata accessor for SafeLocation);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
      *(void *)&__int128 v162 = v3;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100032BF0(0, v3[2] + 1LL, 1);
        uint64_t v3 = (void *)v162;
      }

      unint64_t v17 = v3[2];
      unint64_t v86 = v3[3];
      if (v17 >= v86 >> 1)
      {
        sub_100032BF0(v86 > 1, v17 + 1, 1);
        uint64_t v3 = (void *)v162;
      }

      ++v83;
      v3[2] = v17 + 1;
      sub_10002218C(v161, (uint64_t)v30 + (void)v3 + v17 * a1, type metadata accessor for SafeLocation);
      if (v82 == v83) {
        goto LABEL_24;
      }
    }

    __break(1u);
LABEL_39:
    swift_once(&qword_10099B6F8, sub_100651098);
  }

  uint64_t v3 = _swiftEmptyArrayStorage;
LABEL_24:
  uint64_t v87 = swift_bridgeObjectRelease();
  __chkstk_darwin(v87);
  uint64_t v88 = (uint64_t)v140;
  uint64_t v125 = v140;
  uint64_t v89 = sub_100023CDC((uint64_t (*)(char *))sub_1002DDE28, (void *)&v126 - 4, (uint64_t)v3);
  uint64_t v90 = sub_10028D078(v89);
  swift_bridgeObjectRelease();
  sub_100015794(v88, &qword_10099D8A0);
  sub_1006F138C((uint64_t)v90);
  swift_bridgeObjectRelease();
  sub_100022898(0LL, &qword_1009A0B60, &OBJC_CLASS___SPSafeLocation_ptr);
  sub_10014EFD4((unint64_t *)&qword_1009A7D80, &qword_1009A0B60, &OBJC_CLASS___SPSafeLocation_ptr);
  Class v91 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v77 setSafeLocations:v91];

  uint64_t v92 = v165;
  uint64_t v93 = v166;
  uint64_t v94 = sub_100012ED8(&v164, v165);
  uint64_t v95 = (uint64_t)v141;
  objc_msgSend(v77, "setCanBeLeashedByHost:", sub_1004974CC((uint64_t)v94, (uint64_t)v141, v92, v93) & 1);
  uint64_t v96 = v137;
  id result = [v77 setBeaconSeparationState:sub_10047AB14((uint64_t)v137)];
  uint64_t v97 = *(void *)(v95 + 40);
  if (v97)
  {
    uint64_t v98 = *(unsigned __int8 *)(v97 + 304);
    uint64_t v99 = swift_retain();
    uint64_t v100 = static os_log_type_t.info.getter(v99);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v101 = qword_100A2B010;
    uint64_t v102 = swift_allocObject(v135, 72LL, 7LL);
    *(_OWORD *)(v102 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v102 + 56) = &type metadata for Bool;
    *(void *)(v102 + 64) = &protocol witness table for Bool;
    *(_BYTE *)(v102 + 32) = v98;
    os_log(_:dso:log:_:_:)(v100, &_mh_execute_header, v101, "thisDeviceConnectionAllowed: %i", v126);
    swift_release(v97);
    swift_bridgeObjectRelease();
    [v77 setConnectionAllowed:v98];
    sub_100013044((uint64_t)&v164, (uint64_t)&v162);
    uint64_t v103 = sub_100004AEC(&qword_1009B0530);
    uint64_t v104 = type metadata accessor for SharedBeaconRecord(0LL);
    uint64_t v105 = (uint64_t)v136;
    int v106 = swift_dynamicCast(v136, &v162, v103, v104, 6LL);
    unint64_t v107 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v104 - 8) + 56LL);
    if (v106)
    {
      v107(v105, 0LL, 1LL, v104);
      sub_100015794(v105, (uint64_t *)&unk_1009AE470);
      [v77 setConnectableDeviceCount:0];
      uint64_t v108 = (void (*)(char *))v139;
    }

    else
    {
      v107(v105, 1LL, 1LL, v104);
      sub_100015794(v105, (uint64_t *)&unk_1009AE470);
      sub_100013044((uint64_t)&v164, (uint64_t)&v162);
      uint64_t v109 = (uint64_t)v133;
      uint64_t v110 = v103;
      uint64_t v111 = v134;
      char v112 = swift_dynamicCast(v133, &v162, v110, v134, 6LL);
      uint64_t v113 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v132 + 56);
      uint64_t v108 = (void (*)(char *))v139;
      if ((v112 & 1) != 0)
      {
        v113(v109, 0LL, 1LL, v111);
        uint64_t v114 = v131;
        uint64_t v115 = sub_10002218C(v109, v131, type metadata accessor for OwnedBeaconRecord);
        CurrentValueSubject.value.getter(&v162, v115);
        uint64_t v116 = v111;
        uint64_t v117 = v162;
        sub_100292440(v96, v162);
        [v77 setConnectableDeviceCount:v117];
        uint64_t v118 = v130;
        sub_10001DC4C(v114 + *(int *)(v116 + 24), v130, type metadata accessor for StableIdentifier);
        int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v118, v129);
        if (EnumCaseMultiPayload == 2)
        {
          sub_100004AEC((uint64_t *)&unk_1009B0520);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          NSString v123 = String._bridgeToObjectiveC()();
          swift_bridgeObjectRelease();
          [v77 setSerialNumber:v123];

          sub_100018C68(v131, type metadata accessor for OwnedBeaconRecord);
          (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v118, v155);
        }

        else
        {
          if (EnumCaseMultiPayload == 1)
          {
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            NSString v120 = String._bridgeToObjectiveC()();
            swift_bridgeObjectRelease();
            [v77 setSerialNumber:v120];

            uint64_t v121 = type metadata accessor for OwnedBeaconRecord;
            uint64_t v122 = v131;
          }

          else
          {
            [v77 setSerialNumber:0];
            sub_100018C68(v131, type metadata accessor for OwnedBeaconRecord);
            uint64_t v121 = type metadata accessor for StableIdentifier;
            uint64_t v122 = v118;
          }

          sub_100018C68(v122, v121);
        }
      }

      else
      {
        v113(v109, 1LL, 1LL, v111);
        sub_100015794(v109, (uint64_t *)&unk_1009A9C30);
      }
    }

    os_log_t v124 = v77;
    v108(v77);

    return (id)_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v164);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10028E3A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v31 = a1;
  uint64_t v32 = a3;
  uint64_t v30 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v35 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v33 = *(void *)(v7 - 8);
  uint64_t v34 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = static os_log_type_t.info.getter(v8);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v12 = qword_100A2B008;
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v14 = swift_allocObject(v13, 112LL, 7LL);
  *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  aBlock[0] = *v3;
  uint64_t v15 = sub_100004AEC(&qword_1009A7D50);
  uint64_t v16 = String.init<A>(describing:)(aBlock, v15);
  uint64_t v18 = v17;
  *(void *)(v14 + 56) = &type metadata for String;
  unint64_t v19 = sub_1000226F4();
  *(void *)(v14 + 32) = v16;
  *(void *)(v14 + sub_10016CF88(v0 + 40) = v18;
  *(void *)(v14 + 96) = &type metadata for String;
  *(void *)(v14 + 104) = v19;
  *(void *)(v14 + 64) = v19;
  *(void *)(v14 + 72) = 0xD000000000000022LL;
  *(void *)(v14 + 80) = 0x800000010085BD00LL;
  os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "%@: %@", 6LL, 2LL, v14);
  swift_bridgeObjectRelease();
  uint64_t v20 = (void *)swift_allocObject(&unk_10094D538, 48LL, 7LL);
  uint64_t v21 = v30;
  void v20[2] = v3;
  v20[3] = v21;
  uint64_t v22 = v31;
  v20[4] = v32;
  v20[5] = v22;
  aBlock[4] = sub_1002D750C;
  aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10094D550;
  uint64_t v23 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v24 = swift_retain();
  static DispatchQoS.unspecified.getter(v24);
  uint64_t v36 = _swiftEmptyArrayStorage;
  uint64_t v25 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v27 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v26, v27, v4, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v6, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v34);
  return swift_release();
}

void *sub_10028E698(uint64_t a1, uint64_t a2, char a3, int a4)
{
  int v39 = a4;
  uint64_t v7 = sub_10050CBD8();
  uint64_t v8 = sub_1004E7C18((uint64_t)v7);
  swift_bridgeObjectRelease();
  uint64_t v9 = sub_10050CD78();
  uint64_t v10 = sub_1004E7C3C((uint64_t)v9);
  swift_bridgeObjectRelease();
  *(void *)&__int128 v46 = v8;
  sub_100184210((uint64_t)v10);
  uint64_t v11 = v8;
  uint64_t v12 = _swiftEmptyArrayStorage;
  v42[0] = _swiftEmptyArrayStorage;
  uint64_t v13 = v8[2];
  if (v13)
  {
    uint64_t v14 = (uint64_t)(v8 + 4);
    swift_bridgeObjectRetain(v11);
    do
    {
      sub_100013044(v14, (uint64_t)&v46);
      uint64_t v16 = v47;
      uint64_t v15 = v48;
      sub_100012ED8(&v46, v47);
      uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t))(v15 + 16))(v16, v15);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v46);
      sub_10018439C(v17);
      v14 += 40LL;
      --v13;
    }

    while (v13);
    swift_bridgeObjectRelease_n(v11, 2LL);
    uint64_t v18 = (void *)v42[0];
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v18 = _swiftEmptyArrayStorage;
  }

  uint64_t v19 = sub_1006F1060((uint64_t)v18);
  swift_bridgeObjectRelease();
  uint64_t v45 = _swiftEmptyArrayStorage;
  uint64_t v20 = a1;
  uint64_t v21 = *(void *)(a1 + 16);
  swift_bridgeObjectRetain(v20);
  uint64_t v40 = v22;
  if (v21)
  {
    uint64_t v23 = v22 + 32;
    char v24 = a3 & 1;
    int v41 = a3 & 1;
    do
    {
      sub_100013044(v23, (uint64_t)&v46);
      if ((sub_100298938(&v46, v24, a2, v19) & 1) != 0)
      {
        sub_100012EC0(&v46, (uint64_t)v42);
        uint64_t v25 = v45;
        if ((swift_isUniquelyReferenced_nonNull_native(v45) & 1) == 0)
        {
          sub_100032928(0, v25[2] + 1LL, 1);
          uint64_t v25 = v45;
        }

        uint64_t v26 = v19;
        unint64_t v28 = v25[2];
        unint64_t v27 = v25[3];
        if (v28 >= v27 >> 1) {
          sub_100032928(v27 > 1, v28 + 1, 1);
        }
        uint64_t v29 = v43;
        uint64_t v30 = v44;
        uint64_t v31 = sub_100037298((uint64_t)v42, v43);
        __chkstk_darwin(v31);
        uint64_t v33 = (char *)&v38 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v34 + 16))(v33);
        sub_1002BBA60(v28, (uint64_t)v33, (uint64_t *)&v45, v29, v30);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
        uint64_t v19 = v26;
        char v24 = v41;
      }

      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v46);
      }

      v23 += 40LL;
      --v21;
    }

    while (v21);
    uint64_t v12 = v45;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v39 & 1) == 0)
  {
    uint64_t v35 = v38;
    swift_retain();
    uint64_t v36 = sub_1002C4960((uint64_t)v12, v35);
    swift_release();
    swift_release();
    return v36;
  }

  return v12;
}

uint64_t sub_10028E9A4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SharedBeaconGroup(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v15[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v15[-1] - v9;
  sub_100013044(a1, (uint64_t)v15);
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009B1230);
  if (swift_dynamicCast(v10, v15, v11, v5, 0LL))
  {
    sub_10002218C((uint64_t)v10, (uint64_t)v8, type metadata accessor for OwnedBeaconGroup);
    uint64_t v12 = (void *)sub_1002A3250((uint64_t)v8);
    sub_100018C68((uint64_t)v8, type metadata accessor for OwnedBeaconGroup);
LABEL_5:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v15);
    return (uint64_t)v12;
  }

  if (swift_dynamicCast(v4, v15, v11, v2, 0LL))
  {
    sub_100018C68((uint64_t)v4, type metadata accessor for SharedBeaconGroup);
    uint64_t v12 = &_swiftEmptyDictionarySingleton;
    goto LABEL_5;
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000001BLL,  0x800000010085C9E0LL,  "searchpartyd/BeaconManagerService_BeaconManagerProtocol.swift",  61LL,  2LL,  1763LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_10028EB6C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A488);
  sub_10000A720(v0, (uint64_t)qword_100A2A488);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000012LL,  0x800000010085BDF0LL);
}

uint64_t sub_10028EBEC(int a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v37 = a4;
  uint64_t v36 = a3;
  int v34 = a1;
  uint64_t v5 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v35 = (uint64_t)v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v33 - v9;
  if (qword_10099B7A0 != -1) {
    swift_once(&qword_10099B7A0, sub_1006518D8);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_10000A720(v11, (uint64_t)qword_100A2B0B0);
  uint64_t v39 = a2;
  uint64_t v12 = sub_10001DC4C(a2, (uint64_t)v10, type metadata accessor for OwnedBeaconGroup);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = v6;
    uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v17 = swift_slowAlloc(32LL, -1LL);
    uint64_t v41 = v17;
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v18 = sub_1001D0FA8();
    uint64_t v40 = sub_1003F11D4(v18, v19, &v41);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v10, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "updateFindMyNetwork for %s", v16, 0xCu);
    swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    uint64_t v20 = v16;
    uint64_t v6 = v15;
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v10, type metadata accessor for OwnedBeaconGroup);
  }

  uint64_t v21 = v38;
  uint64_t v22 = v39;
  v33[1] = *(void *)(v38 + 256);
  uint64_t v23 = v35;
  sub_10001DC4C(v39, v35, type metadata accessor for OwnedBeaconGroup);
  uint64_t v24 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v25 = (v24 + 17) & ~v24;
  uint64_t v26 = v24 | 7;
  uint64_t v27 = swift_allocObject(&unk_10094E3E8, v25 + v7, v24 | 7);
  char v28 = v34 & 1;
  *(_BYTE *)(v27 + swift_weakDestroy(v0 + 16) = v34 & 1;
  sub_10002218C(v23, v27 + v25, type metadata accessor for OwnedBeaconGroup);
  sub_10001DC4C(v22, v23, type metadata accessor for OwnedBeaconGroup);
  uint64_t v29 = (v24 + 48) & ~v24;
  uint64_t v30 = swift_allocObject(&unk_10094E410, v29 + v7, v26);
  *(_BYTE *)(v30 + swift_weakDestroy(v0 + 16) = v28;
  uint64_t v31 = v37;
  *(void *)(v30 + 24) = v36;
  *(void *)(v30 + 32) = v31;
  *(void *)(v30 + sub_10016CF88(v0 + 40) = v21;
  sub_10002218C(v23, v30 + v29, type metadata accessor for OwnedBeaconGroup);
  swift_retain();
  swift_retain();
  sub_1002B3B58( v22,  0,  (void (*)(uint64_t))sub_1002DD9D4,  v27,  (void (*)(uint64_t))sub_1002DDAF0,  (void (*)(uint64_t))v30);
  swift_release();
  return swift_release();
}

void sub_10028EF10(uint64_t a1, uint64_t a2, dispatch_group_s *a3)
{
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a2 + swift_weakDestroy(v0 + 16) = a1;
  swift_errorRetain(a1);
  swift_errorRelease(v6);
  dispatch_group_leave(a3);
}

uint64_t sub_10028EF78(uint64_t a1, char a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t result = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v12 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(_BYTE *)(a1 + *(int *)(result + swift_release(*(void *)(v0 + 32)) = a2;
  if ((a2 & 1) == 0)
  {
    sub_10001DC4C(a3, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
    sub_1001D1EB4();
    uint64_t v10 = *(void *)&v9[*(int *)(v6 + 40)];
    swift_bridgeObjectRetain(v10);
    sub_100018C68((uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
    uint64_t v11 = *(int *)(v6 + 40);
    uint64_t result = swift_bridgeObjectRelease();
    *(void *)(a1 + v11) = v10;
  }

  return result;
}

uint64_t sub_10028F040(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v90 = a3;
  uint64_t v91 = a4;
  int v81 = a2;
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v89 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v83 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v88 = *(void *)(v83 - 8);
  __chkstk_darwin(v83);
  uint64_t v87 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v85 = *(void *)(v12 - 8);
  uint64_t v86 = v12;
  __chkstk_darwin(v12);
  uint64_t v84 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v79 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v79 - v21;
  uint64_t v23 = sub_100004AEC(&qword_1009A49F0);
  __chkstk_darwin(v23);
  uint64_t v25 = (uint64_t *)((char *)&v79 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v25, &qword_1009A49F0);
  if (swift_getEnumCaseMultiPayload(v25, v23) == 1)
  {
    uint64_t v82 = v9;
    uint64_t v26 = (void *)*v25;
    if (qword_10099B7A0 != -1) {
      swift_once(&qword_10099B7A0, sub_1006518D8);
    }
    uint64_t v27 = type metadata accessor for Logger(0LL);
    sub_10000A720(v27, (uint64_t)qword_100A2B0B0);
    sub_10001DC4C(a6, (uint64_t)v17, type metadata accessor for OwnedBeaconGroup);
    swift_errorRetain(v26);
    uint64_t v28 = swift_errorRetain(v26);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.error.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc(22LL, -1LL);
      uint64_t v32 = swift_slowAlloc(64LL, -1LL);
      uint64_t aBlock = v32;
      *(_DWORD *)uint64_t v31 = 136315394;
      uint64_t v33 = sub_1001D0FA8();
      uint64_t v92 = (void *)sub_1003F11D4(v33, v34, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93, v31 + 4, v31 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v17, type metadata accessor for OwnedBeaconGroup);
      *(_WORD *)(v31 + 12) = 2082;
      uint64_t v92 = v26;
      swift_errorRetain(v26);
      uint64_t v35 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v36 = String.init<A>(describing:)(&v92, v35);
      uint64_t v92 = (void *)sub_1003F11D4(v36, v37, &aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93, v31 + 14, v31 + 22);
      swift_bridgeObjectRelease();
      swift_errorRelease(v26);
      swift_errorRelease(v26);
      _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "Failed to set FMN status for %s. Error %{public}s",  (uint8_t *)v31,  0x16u);
      swift_arrayDestroy(v32, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v17, type metadata accessor for OwnedBeaconGroup);
      swift_errorRelease(v26);
      swift_errorRelease(v26);
    }

    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v47 = v84;
    uint64_t v46 = v85;
    uint64_t v48 = v86;
    (*(void (**)(char *, void, uint64_t))(v85 + 104))( v84,  enum case for DispatchQoS.QoSClass.default(_:),  v86);
    uint64_t v49 = (void *)static OS_dispatch_queue.global(qos:)(v47);
    (*(void (**)(char *, uint64_t))(v46 + 8))(v47, v48);
    uint64_t v50 = (void *)swift_allocObject(&unk_10094E4B0, 40LL, 7LL);
    uint64_t v51 = v91;
    _OWORD v50[2] = v90;
    v50[3] = v51;
    v50[4] = v26;
    *((void *)&v96 + 1) = sub_1000D4F98;
    uint64_t v97 = v50;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    *(void *)&__int128 v95 = 1107296256LL;
    *((void *)&v95 + 1) = sub_1001C31E8;
    *(void *)&__int128 v96 = &unk_10094E4C8;
    uint64_t v52 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v53 = swift_errorRetain(v26);
    uint64_t v54 = v87;
    static DispatchQoS.unspecified.getter(v53);
    uint64_t v92 = _swiftEmptyArrayStorage;
    uint64_t v55 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v56 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v57 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    Class v58 = v89;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v92, v56, v57, v8, v55);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v54, v58, v52);
    _Block_release(v52);

    swift_errorRelease(v26);
    (*(void (**)(char *, uint64_t))(v82 + 8))(v58, v8);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v54, v83);
    return swift_release();
  }

  sub_10002218C((uint64_t)v25, (uint64_t)v22, type metadata accessor for OwnedBeaconGroup);
  if (qword_10099B7A0 != -1) {
    swift_once(&qword_10099B7A0, sub_1006518D8);
  }
  uint64_t v38 = type metadata accessor for Logger(0LL);
  sub_10000A720(v38, (uint64_t)qword_100A2B0B0);
  uint64_t v80 = v22;
  uint64_t v39 = sub_10001DC4C((uint64_t)v22, (uint64_t)v20, type metadata accessor for OwnedBeaconGroup);
  uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
  os_log_type_t v41 = static os_log_type_t.default.getter(v40);
  if (os_log_type_enabled(v40, v41))
  {
    uint64_t v42 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v43 = swift_slowAlloc(32LL, -1LL);
    uint64_t aBlock = v43;
    *(_DWORD *)uint64_t v42 = 136315138;
    uint64_t v82 = v9;
    uint64_t v44 = sub_1001D0FA8();
    uint64_t v92 = (void *)sub_1003F11D4(v44, v45, &aBlock);
    uint64_t v9 = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v92, v93, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v20, type metadata accessor for OwnedBeaconGroup);
    _os_log_impl((void *)&_mh_execute_header, v40, v41, "Successfully set FMN status for %s", v42, 0xCu);
    swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v20, type metadata accessor for OwnedBeaconGroup);
  }

  if ((v81 & 1) == 0)
  {
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v63 = v84;
    uint64_t v62 = v85;
    uint64_t v64 = v86;
    (*(void (**)(char *, void, uint64_t))(v85 + 104))( v84,  enum case for DispatchQoS.QoSClass.default(_:),  v86);
    uint64_t v65 = (void *)static OS_dispatch_queue.global(qos:)(v63);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v64);
    uint64_t v66 = swift_allocObject(&unk_10094E500, 32LL, 7LL);
    uint64_t v67 = v91;
    *(void *)(v66 + swift_weakDestroy(v0 + 16) = v90;
    *(void *)(v66 + 24) = v67;
    *((void *)&v96 + 1) = sub_10020FF70;
    uint64_t v97 = (void *)v66;
    uint64_t aBlock = (uint64_t)_NSConcreteStackBlock;
    *(void *)&__int128 v95 = 1107296256LL;
    *((void *)&v95 + 1) = sub_1001C31E8;
    *(void *)&__int128 v96 = &unk_10094E518;
    uint64_t v68 = _Block_copy(&aBlock);
    uint64_t v69 = swift_retain();
    uint64_t v70 = v87;
    static DispatchQoS.unspecified.getter(v69);
    uint64_t v92 = _swiftEmptyArrayStorage;
    uint64_t v71 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v72 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v73 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v74 = v89;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v92, v72, v73, v8, v71);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v70, v74, v68);
    _Block_release(v68);

    (*(void (**)(char *, uint64_t))(v9 + 8))(v74, v8);
    (*(void (**)(char *, uint64_t))(v88 + 8))(v70, v83);
    sub_100018C68((uint64_t)v80, type metadata accessor for OwnedBeaconGroup);
    return swift_release();
  }

  uint64_t aBlock = 2LL;
  __int128 v95 = 0u;
  __int128 v96 = 0u;
  LOBYTE(v97) = 11;
  sub_10001581C((uint64_t)&aBlock, (uint64_t)&v92, (uint64_t *)&unk_1009A9C90);
  if (v93[32] == 255)
  {
    uint64_t v60 = 0LL;
  }

  else
  {
    unint64_t v59 = sub_100122CD4();
    uint64_t v60 = (void *)swift_allocError(&type metadata for CentralManager.Error, v59, 0LL, 0LL);
    sub_100254338((uint64_t)&v92, v61);
  }

  uint64_t v77 = v90;
  uint64_t v76 = v91;
  uint64_t v78 = (uint64_t)v80;
  swift_retain();
  sub_10028F9F0(v60, v77, v76);
  swift_errorRelease(v60);
  sub_100015794((uint64_t)&aBlock, (uint64_t *)&unk_1009A9C90);
  swift_release();
  return sub_100018C68(v78, type metadata accessor for OwnedBeaconGroup);
}

uint64_t sub_10028F9F0(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v43 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v42 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v40 = *(void *)(v8 - 8);
  uint64_t v41 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    swift_errorRetain(a1);
    if (qword_10099B7A0 != -1) {
      swift_once(&qword_10099B7A0, sub_1006518D8);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    sub_10000A720(v15, (uint64_t)qword_100A2B0B0);
    swift_errorRetain(a1);
    uint64_t v16 = swift_errorRetain(a1);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v37 = a2;
      uint64_t v19 = swift_slowAlloc(12LL, -1LL);
      uint64_t v38 = a3;
      uint64_t v20 = (uint8_t *)v19;
      uint64_t v36 = swift_slowAlloc(32LL, -1LL);
      uint64_t v44 = a1;
      aBlock[0] = v36;
      uint64_t v39 = v6;
      *(_DWORD *)uint64_t v20 = 136446210;
      uint64_t v35 = v20 + 4;
      swift_errorRetain(a1);
      uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v22 = String.init<A>(describing:)(&v44, v21);
      uint64_t v44 = (void *)sub_1003F11D4(v22, v23, aBlock);
      uint64_t v6 = v39;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v44, aBlock, v35, v20 + 12);
      a2 = v37;
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "fakeClassicPairing failed due to %{public}s", v20, 0xCu);
      uint64_t v24 = v36;
      swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      uint64_t v25 = v20;
      a3 = v38;
      swift_slowDealloc(v25, -1LL, -1LL);

      swift_errorRelease(a1);
    }

    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }
  }

  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v12 + 104))( v14,  enum case for DispatchQoS.QoSClass.default(_:),  v11);
  uint64_t v26 = (void *)static OS_dispatch_queue.global(qos:)(v14);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v27 = swift_allocObject(&unk_10094E550, 32LL, 7LL);
  *(void *)(v27 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v27 + 24) = a3;
  aBlock[4] = (uint64_t)sub_10020CE78;
  aBlock[5] = v27;
  aBlock[0] = (uint64_t)_NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = (uint64_t)sub_1001C31E8;
  aBlock[3] = (uint64_t)&unk_10094E568;
  uint64_t v28 = _Block_copy(aBlock);
  uint64_t v29 = swift_retain();
  static DispatchQoS.unspecified.getter(v29);
  uint64_t v44 = _swiftEmptyArrayStorage;
  uint64_t v30 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v31 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v32 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v33 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v44, v31, v32, v6, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v33, v28);
  _Block_release(v28);

  (*(void (**)(char *, uint64_t))(v43 + 8))(v33, v6);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v10, v41);
  return swift_release();
}

uint64_t sub_10028FE38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[19] = a5;
  v6[20] = a6;
  v6[17] = a3;
  v6[18] = a4;
  v6[15] = a1;
  v6[16] = a2;
  unint64_t v7 = (*(void *)(*(void *)(sub_100004AEC(&qword_1009A78B8) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[21] = swift_task_alloc(v7);
  v6[22] = swift_task_alloc(v7);
  return swift_task_switch(sub_10028FEAC, 0LL, 0LL);
}

uint64_t sub_10028FEAC()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C950 + dword_10099C950);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C954);
    *(void *)(v0 + 184) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10028FFAC;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10028FFAC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 184LL);
  *(void *)(*(void *)v1 + 192LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100290008, 0LL, 0LL);
}

uint64_t sub_100290008()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 192))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc(dword_1009A7544);
    *(void *)(v0 + 200) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100290184;
    return sub_10026A558(*(void *)(v0 + 176), *(void *)(v0 + 144), *(void *)(v0 + 152), *(void *)(v0 + 160));
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2A470);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing OwnerCommandManager service to connect!", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    uint64_t v9 = *(void (**)(void))(v0 + 128);

    unint64_t v10 = sub_10014A2C0();
    uint64_t v11 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v10, 0LL, 0LL);
    *uint64_t v12 = 11;
    v9();
    swift_errorRelease(v11);
    uint64_t v13 = *(void *)(v0 + 168);
    swift_task_dealloc(*(void *)(v0 + 176));
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100290184()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 200LL);
  *(void *)(*(void *)v1 + 208LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1002902FC;
  }
  else {
    uint64_t v3 = sub_1002901E8;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1002901E8()
{
  uint64_t v1 = *(void *)(v0 + 168);
  sub_10001581C(*(void *)(v0 + 176), v1, &qword_1009A78B8);
  uint64_t v2 = type metadata accessor for OwnerCommandManager.Error(0LL);
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(v1, 1LL, v2);
  uint64_t v4 = *(void *)(v0 + 168);
  if (v3 == 1)
  {
    sub_100015794(*(void *)(v0 + 168), &qword_1009A78B8);
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v6 = sub_100007864(&qword_1009A78C0, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_1007F8DC0);
    uint64_t v5 = swift_allocError(v2, v6, 0LL, 0LL);
    sub_10002218C(v4, v7, type metadata accessor for OwnerCommandManager.Error);
  }

  uint64_t v8 = *(void *)(v0 + 176);
  (*(void (**)(uint64_t))(v0 + 128))(v5);
  swift_errorRelease(v5);
  swift_release();
  sub_100015794(v8, &qword_1009A78B8);
  uint64_t v9 = *(void *)(v0 + 168);
  swift_task_dealloc(*(void *)(v0 + 176));
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002902FC()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void (**)(uint64_t))(v0 + 128);
  swift_release(*(void *)(v0 + 192));
  swift_errorRetain(v1);
  v2(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  uint64_t v3 = *(void *)(v0 + 168);
  swift_task_dealloc(*(void *)(v0 + 176));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10029036C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[17] = a3;
  v4[18] = a4;
  v4[15] = a1;
  v4[16] = a2;
  unint64_t v5 = (*(void *)(*(void *)(sub_100004AEC(&qword_1009A78B8) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[19] = swift_task_alloc(v5);
  v4[20] = swift_task_alloc(v5);
  return swift_task_switch(sub_1002903DC, 0LL, 0LL);
}

uint64_t sub_1002903DC()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C950 + dword_10099C950);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C954);
    *(void *)(v0 + 168) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1002904DC;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1002904DC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 168LL);
  *(void *)(*(void *)v1 + 176LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100290538, 0LL, 0LL);
}

uint64_t sub_100290538()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 176))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc(dword_1009A755C);
    *(void *)(v0 + 184) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1002906B0;
    return sub_10026C01C(*(void *)(v0 + 160), *(void *)(v0 + 144));
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2A470);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing OwnerCommandManager service to disconnect!", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    uint64_t v9 = *(void (**)(void))(v0 + 128);

    unint64_t v10 = sub_10014A2C0();
    uint64_t v11 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v10, 0LL, 0LL);
    *uint64_t v12 = 11;
    v9();
    swift_errorRelease(v11);
    uint64_t v13 = *(void *)(v0 + 152);
    swift_task_dealloc(*(void *)(v0 + 160));
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1002906B0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 184LL);
  *(void *)(*(void *)v1 + 192LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100290828;
  }
  else {
    uint64_t v3 = sub_100290714;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100290714()
{
  uint64_t v1 = *(void *)(v0 + 152);
  sub_10001581C(*(void *)(v0 + 160), v1, &qword_1009A78B8);
  uint64_t v2 = type metadata accessor for OwnerCommandManager.Error(0LL);
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(v1, 1LL, v2);
  uint64_t v4 = *(void *)(v0 + 152);
  if (v3 == 1)
  {
    sub_100015794(*(void *)(v0 + 152), &qword_1009A78B8);
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v6 = sub_100007864(&qword_1009A78C0, type metadata accessor for OwnerCommandManager.Error, (uint64_t)&unk_1007F8DC0);
    uint64_t v5 = swift_allocError(v2, v6, 0LL, 0LL);
    sub_10002218C(v4, v7, type metadata accessor for OwnerCommandManager.Error);
  }

  uint64_t v8 = *(void *)(v0 + 160);
  (*(void (**)(uint64_t))(v0 + 128))(v5);
  swift_errorRelease(v5);
  swift_release();
  sub_100015794(v8, &qword_1009A78B8);
  uint64_t v9 = *(void *)(v0 + 152);
  swift_task_dealloc(*(void *)(v0 + 160));
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100290828()
{
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void (**)(uint64_t))(v0 + 128);
  swift_release(*(void *)(v0 + 176));
  swift_errorRetain(v1);
  v2(v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  uint64_t v3 = *(void *)(v0 + 152);
  swift_task_dealloc(*(void *)(v0 + 160));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100290898(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v22 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v21 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v21 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v21[1] = *(void *)(v3 + 104);
  uint64_t v14 = (void *)swift_allocObject(&unk_10094E258, 48LL, 7LL);
  v14[2] = a1;
  v14[3] = v3;
  v14[4] = a2;
  v14[5] = a3;
  aBlock[4] = sub_1002DD794;
  aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10094E270;
  uint64_t v15 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a1);
  swift_retain();
  uint64_t v16 = swift_retain();
  static DispatchQoS.unspecified.getter(v16);
  unint64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v19 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v23, v18, v19, v7, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release();
}

uint64_t sub_100290AAC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v37 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v12 = *(void *)(v37 - 8);
  __chkstk_darwin(v37);
  uint64_t v14 = (char *)&v35 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(void *)(a1 + 16))
  {
    swift_retain();
    uint64_t v15 = (uint64_t)sub_1002C4AC8(a1, a2);
  }

  else
  {
    uint64_t v36 = v9;
    if (qword_10099B670 != -1) {
      swift_once(&qword_10099B670, sub_100605974);
    }
    uint64_t v16 = (void *)qword_100A2AF38;
    id v17 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
    unsigned int v18 = [v17 isInternalBuild];

    uint64_t v35 = a3;
    if (v18)
    {
      NSString v19 = String._bridgeToObjectiveC()();
      char v20 = [v16 BOOLForKey:v19];
    }

    else
    {
      char v20 = 0;
    }

    uint64_t v21 = sub_10050CBD8();
    uint64_t v22 = sub_1004E7C18((uint64_t)v21);
    swift_bridgeObjectRelease();
    unint64_t v23 = sub_10050CD78();
    uint64_t v24 = sub_1004E7C3C((uint64_t)v23);
    swift_bridgeObjectRelease();
    aBlock[0] = v22;
    sub_100184210((uint64_t)v24);
    uint64_t v25 = aBlock[0];
    swift_retain();
    uint64_t v15 = sub_1002C51D0(v25, a2, v20);
    a3 = v35;
    uint64_t v9 = v36;
  }

  swift_release();
  swift_retain();
  uint64_t v26 = sub_1002C53B8(v15, a2);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v27 = sub_1006F1ADC((uint64_t)v26);
  swift_bridgeObjectRelease();
  uint64_t v28 = (void *)swift_allocObject(&unk_10094E2A8, 40LL, 7LL);
  v28[2] = a3;
  void v28[3] = a4;
  v28[4] = v27;
  aBlock[4] = sub_1001FA824;
  aBlock[5] = v28;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10094E2C0;
  uint64_t v29 = _Block_copy(aBlock);
  uint64_t v30 = swift_retain();
  static DispatchQoS.unspecified.getter(v30);
  uint64_t v38 = _swiftEmptyArrayStorage;
  uint64_t v31 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v32 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v33 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v32, v33, v8, v31);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v11, v29);
  _Block_release(v29);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v37);
  return swift_release();
}

uint64_t sub_100290E34(uint64_t a1, uint64_t a2, int a3)
{
  uint64_t v6 = type metadata accessor for Endianness(0LL);
  __chkstk_darwin(v6);
  uint64_t v66 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v62 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v62);
  uint64_t v63 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v61 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v9 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v64 = (uint64_t)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  id v17 = (char *)&v51 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100013044(a1, (uint64_t)v67);
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009B1230);
  char v19 = swift_dynamicCast(v13, v67, v18, v14, 6LL);
  char v20 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v15 + 56);
  if ((v19 & 1) != 0)
  {
    v20(v13, 0LL, 1LL, v14);
    sub_10002218C((uint64_t)v13, (uint64_t)v17, type metadata accessor for OwnedBeaconGroup);
    sub_1001CC778();
    uint64_t v22 = v21;
    swift_retain();
    sub_10014AE60(v22);
    uint64_t v24 = v23;
    swift_release();
    swift_bridgeObjectRelease();
    if (*(void *)(v24 + 16))
    {
      uint64_t v53 = v17;
      uint64_t v54 = v14;
      int v55 = a3;
      uint64_t v56 = v3;
      uint64_t v60 = v24 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80));
      uint64_t v25 = v24;
      uint64_t v26 = (uint64_t)v63;
      uint64_t v27 = *(void *)(v9 + 72);
      Class v58 = v63 + 8;
      uint64_t v59 = v27;
      uint64_t v52 = v25;
      swift_bridgeObjectRetain(v25);
      uint64_t v28 = v64;
      sub_10001DC4C(v60, v64, type metadata accessor for OwnedBeaconRecord);
      uint64_t v29 = v61;
      sub_10001DC4C(v28 + *(int *)(v61 + 24), v26, type metadata accessor for StableIdentifier);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v26, v62);
      if (EnumCaseMultiPayload == 3)
      {
        sub_100004AEC((uint64_t *)&unk_1009AF840);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        if (EnumCaseMultiPayload != 2)
        {
          sub_100018C68(v26, type metadata accessor for StableIdentifier);
          goto LABEL_25;
        }

        sub_100004AEC((uint64_t *)&unk_1009B0520);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRelease();
      uint64_t v31 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t, uint64_t))(*(void *)(v31 - 8) + 8LL))(v26, v31);
      sub_1000F5F2C(*(void *)(v28 + *(int *)(v29 + 64)), *(void *)(v28 + *(int *)(v29 + 68)));
      if (v32 >> 60 != 15)
      {
        unint64_t v33 = v32;
        uint64_t v65 = 1LL;
        uint64_t v34 = Set.init(minimumCapacity:)(2LL);
        uint64_t v35 = 0LL;
        uint64_t v36 = v34 + 56;
        while (1)
        {
          uint64_t v37 = (uint64_t)*(&off_100932940 + v35 + 4);
          uint64_t v38 = v35 + 1;
          uint64_t v39 = static Hasher._hash(seed:_:)(*(void *)(v34 + 40), v37);
          uint64_t v40 = -1LL << *(_BYTE *)(v34 + 32);
          unint64_t v41 = v39 & ~v40;
          if (((*(void *)(v36 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v41) & 1) == 0) {
            goto LABEL_16;
          }
          uint64_t v42 = *(void *)(v34 + 48);
          if (*(void *)(v42 + 8 * v41) == v37)
          {
LABEL_9:
            uint64_t v35 = 1LL;
            if (v38 == 2) {
              goto LABEL_18;
            }
          }

          else
          {
            uint64_t v43 = ~v40;
            while (1)
            {
              unint64_t v41 = (v41 + 1) & v43;
              if (((*(void *)(v36 + ((v41 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v41) & 1) == 0) {
                break;
              }
              if (*(void *)(v42 + 8 * v41) == v37) {
                goto LABEL_9;
              }
            }

uint64_t sub_100291634(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a1;
  uint64_t v28 = a2;
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v31 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v29 = *(void *)(v6 - 8);
  uint64_t v30 = v6;
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = static os_log_type_t.info.getter(v7);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v11 = qword_100A2B008;
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v13 = swift_allocObject(v12, 112LL, 7LL);
  *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  aBlock[0] = *v2;
  uint64_t v14 = sub_100004AEC(&qword_1009A7D50);
  uint64_t v15 = String.init<A>(describing:)(aBlock, v14);
  uint64_t v17 = v16;
  *(void *)(v13 + 56) = &type metadata for String;
  unint64_t v18 = sub_1000226F4();
  *(void *)(v13 + 32) = v15;
  *(void *)(v13 + sub_10016CF88(v0 + 40) = v17;
  *(void *)(v13 + 96) = &type metadata for String;
  *(void *)(v13 + 104) = v18;
  *(void *)(v13 + 64) = v18;
  *(void *)(v13 + 72) = 0xD00000000000001DLL;
  *(void *)(v13 + 80) = 0x800000010085BDD0LL;
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "%@: %@", 6LL, 2LL, v13);
  swift_bridgeObjectRelease();
  char v19 = (void *)swift_allocObject(&unk_10094D678, 40LL, 7LL);
  uint64_t v20 = v28;
  void v19[2] = v27;
  v19[3] = v20;
  v19[4] = v2;
  aBlock[4] = sub_1002D75D0;
  aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10094D690;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v22 = swift_retain();
  static DispatchQoS.unspecified.getter(v22);
  unint64_t v32 = _swiftEmptyArrayStorage;
  uint64_t v23 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v24 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v25 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v24, v25, v3, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v5, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v30);
  return swift_release();
}

uint64_t sub_100291920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[19] = a6;
  v7[20] = a7;
  v7[17] = a4;
  v7[18] = a5;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  v7[21] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v7[22] = v9;
  v7[23] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100291984, 0LL, 0LL);
}

uint64_t sub_100291984()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C908 + dword_10099C908);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C90C);
    *(void *)(v0 + 192) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100291A84;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100291A84(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 192LL);
  *(void *)(*(void *)v1 + 20Hasher.init(_seed:)(v3, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100291AE0, 0LL, 0LL);
}

uint64_t sub_100291AE0()
{
  uint64_t v1 = *(void *)(v0 + 200);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v1)
  {
    if (qword_10099B118 != -1) {
      swift_once(&qword_10099B118, sub_1000F95A0);
    }
    uint64_t v3 = *(void *)(v0 + 176);
    uint64_t v2 = *(void *)(v0 + 184);
    uint64_t v5 = *(void *)(v0 + 160);
    uint64_t v4 = *(void *)(v0 + 168);
    uint64_t v6 = type metadata accessor for Logger(0LL);
    sub_10000A720(v6, (uint64_t)qword_100A2A1C8);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v5, v4);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter(v8);
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v12 = *(void *)(v0 + 176);
    uint64_t v11 = *(void *)(v0 + 184);
    uint64_t v13 = *(void *)(v0 + 168);
    if (v10)
    {
      uint64_t v14 = swift_slowAlloc(28LL, -1LL);
      uint64_t v25 = swift_slowAlloc(32LL, -1LL);
      uint64_t v26 = v25;
      *(_DWORD *)uint64_t v14 = 141558531;
      *(void *)(v0 + 120) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v14 + 4, v14 + 12);
      *(_WORD *)(v14 + 12) = 2081;
      uint64_t v15 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter(v13, v15);
      *(void *)(v0 + 128) = sub_1003F11D4(v16, v17, &v26);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v14 + 14, v14 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
      *(_WORD *)(v14 + 22) = 1024;
      *(_DWORD *)(v0 + 208) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 212, v14 + 24, v14 + 28);
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "Posted local NWF notification for beacon %{private,mask.hash}s %{BOOL}d.",  (uint8_t *)v14,  0x1Cu);
      swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v25, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(void, void))(v12 + 8))(*(void *)(v0 + 184), *(void *)(v0 + 168));
    }

    (*(void (**)(void))(v0 + 144))(0LL);
    swift_release();
  }

  else
  {
    if (qword_10099B118 != -1) {
      swift_once(&qword_10099B118, sub_1000F95A0);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    uint64_t v19 = sub_10000A720(v18, (uint64_t)qword_100A2A1C8);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "Missing NotifyWhenFoundManager.", v22, 2u);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    uint64_t v23 = *(void (**)(void))(v0 + 144);

    v23(0LL);
  }

  swift_task_dealloc(*(void *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100291DF8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[18] = a4;
  v5[19] = a5;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  v5[20] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v5[21] = v7;
  v5[22] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100291E58, 0LL, 0LL);
}

uint64_t sub_100291E58()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C908 + dword_10099C908);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C90C);
    *(void *)(v0 + 184) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100291F58;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100291F58(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 184LL);
  *(void *)(*(void *)v1 + 192LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100291FB4, 0LL, 0LL);
}

uint64_t sub_100291FB4()
{
  uint64_t v1 = *(void *)(v0 + 192);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v1) {
    return swift_task_switch(sub_100292320, *(void *)(v0 + 192), 0LL);
  }
  unint64_t v3 = sub_1000157D0();
  uint64_t v4 = swift_allocError(&type metadata for DaemonError, v3, 0LL, 0LL);
  *uint64_t v5 = 0xD000000000000016LL;
  v5[1] = 0x80000001008553D0LL;
  swift_willThrow(v4);
  if (qword_10099B4D8 != -1) {
    swift_once(&qword_10099B4D8, sub_1004AB71C);
  }
  uint64_t v7 = *(void *)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 176);
  uint64_t v9 = *(void *)(v0 + 152);
  uint64_t v8 = *(void *)(v0 + 160);
  uint64_t v10 = type metadata accessor for Logger(0LL);
  sub_10000A720(v10, (uint64_t)qword_100A2AB18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v9, v8);
  swift_errorRetain(v4);
  uint64_t v11 = swift_errorRetain(v4);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.error.getter(v12);
  BOOL v14 = os_log_type_enabled(v12, v13);
  uint64_t v16 = *(void *)(v0 + 168);
  uint64_t v15 = *(void *)(v0 + 176);
  uint64_t v17 = *(void *)(v0 + 160);
  if (v14)
  {
    os_log_t log = v12;
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    uint64_t v24 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v26 = swift_slowAlloc(32LL, -1LL);
    uint64_t v27 = v26;
    *(_DWORD *)uint64_t v18 = 141558531;
    *(void *)(v0 + 120) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v18 + 4, v18 + 12);
    *(_WORD *)(v18 + 12) = 2081;
    uint64_t v19 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v17, v19);
    *(void *)(v0 + 128) = sub_1003F11D4(v20, v21, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v18 + 14, v18 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    *(_WORD *)(v18 + 22) = 2114;
    swift_errorRetain(v4);
    uint64_t v22 = _swift_stdlib_bridgeErrorToNSError(v4);
    *(void *)(v0 + 136) = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v18 + 24, v18 + 32);
    uint64_t *v24 = v22;
    swift_errorRelease(v4);
    swift_errorRelease(v4);
    _os_log_impl( (void *)&_mh_execute_header,  log,  v13,  "Failed to force publish for beacon %{private,mask.hash}s, error: %{public}@.",  (uint8_t *)v18,  0x20u);
    uint64_t v23 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v24, 1LL, v23);
    swift_slowDealloc(v24, -1LL, -1LL);
    swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_slowDealloc(v18, -1LL, -1LL);

    swift_errorRelease(v4);
  }

  else
  {
    swift_errorRelease(v4);
    (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
    swift_errorRelease(v4);
    swift_errorRelease(v4);
  }

  swift_task_dealloc(*(void *)(v0 + 176));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100292320()
{
  if (qword_10099B118 != -1) {
    swift_once(&qword_10099B118, sub_1000F95A0);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2A1C8);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "No force publish on this platform.", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  return swift_task_switch(sub_100292408, 0LL, 0LL);
}

uint64_t sub_100292408()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100292440(void *a1, uint64_t a2)
{
  uint64_t v110 = a2;
  uint64_t v3 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v116 = *(void *)(v3 - 8);
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v98 = (uint64_t)&v96 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v107 = (uint64_t)&v96 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v101 = (char *)&v96 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v115 = (uint64_t)&v96 - v11;
  __chkstk_darwin(v10);
  os_log_type_t v13 = (char *)&v96 - v12;
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009A5990);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v103 = (uint64_t)&v96 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v100 = (uint64_t)&v96 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v109 = (char *)&v96 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v99 = (uint64_t)&v96 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v104 = (uint64_t)&v96 - v24;
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v96 - v25;
  if (qword_10099B300 != -1) {
LABEL_48:
  }
    swift_once(&qword_10099B300, sub_1003459EC);
  uint64_t v27 = qword_100A2A6C8;
  uint64_t v108 = objc_autoreleasePoolPush();
  uint64_t v28 = sub_100004AEC((uint64_t *)&unk_1009AF790);
  OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, v27, v28);
  uint64_t v105 = 0LL;
  uint64_t v29 = v120[0];
  uint64_t v30 = *(void *)(v120[0] + 16LL);
  int v106 = a1;
  if (v30 && (unint64_t v31 = sub_10030D124((uint64_t)a1), (v32 & 1) != 0))
  {
    uint64_t v33 = *(void *)(*(void *)(v29 + 56) + 8 * v31);
    swift_bridgeObjectRetain(v33);
    swift_bridgeObjectRelease();
    uint64_t v34 = sub_1002FE5F8(v33);
    swift_bridgeObjectRelease();
    sub_1002FFE1C((uint64_t)v34);
    uint64_t v36 = v35;
    swift_release(v34);
    uint64_t v37 = _swiftEmptyArrayStorage;
    *(void *)&__int128 v123 = _swiftEmptyArrayStorage;
    uint64_t v114 = *(void *)(v36 + 16);
    if (v114)
    {
      uint64_t v97 = v26;
      unint64_t v38 = 0LL;
      uint64_t v26 = (char *)&off_100932918;
      a1 = qword_1007F8F38;
      uint64_t v113 = v3;
      char v112 = v13;
      uint64_t v111 = v36;
      while (1)
      {
        if (v38 >= *(void *)(v36 + 16))
        {
          __break(1u);
          goto LABEL_48;
        }

        uint64_t v39 = *(void *)(v116 + 72);
        unint64_t v118 = (*(unsigned __int8 *)(v116 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v116 + 80);
        unint64_t v119 = v38 + 1;
        uint64_t v117 = v39;
        sub_10001DC4C(v36 + v118 + v39 * v38, (uint64_t)v13, type metadata accessor for BeaconObservation);
        sub_1001D6134();
        uint64_t v40 = Set.init(minimumCapacity:)(2LL);
        uint64_t v41 = 0LL;
        for (uint64_t i = v40 + 56; ; uint64_t i = v40 + 56)
        {
          while (1)
          {
            uint64_t v43 = *((char *)&off_100932918 + v41++ + 32);
            Hasher.init(_seed:)(v120, *(void *)(v40 + 40));
            Swift::UInt v44 = qword_1007F8F38[v43];
            Hasher._combine(_:)(v44);
            Swift::Int v45 = Hasher._finalize()();
            uint64_t v46 = -1LL << *(_BYTE *)(v40 + 32);
            unint64_t v47 = v45 & ~v46;
            if (((*(void *)(i + ((v47 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v47) & 1) == 0) {
              goto LABEL_17;
            }
            uint64_t v48 = *(void *)(v40 + 48);
LABEL_10:
            if (v41 == 2) {
              goto LABEL_19;
            }
          }

          uint64_t v49 = ~v46;
          while (1)
          {
            unint64_t v47 = (v47 + 1) & v49;
            if (((*(void *)(i + ((v47 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v47) & 1) == 0) {
              break;
            }
          }

uint64_t sub_100292F1C(uint64_t a1, double a2)
{
  *(void *)(v2 + 24) = a1;
  *(double *)(v2 + swift_weakDestroy(v0 + 16) = a2;
  return swift_task_switch(sub_100292F38, 0LL, 0LL);
}

uint64_t sub_100292F38()
{
  uint64_t v1 = *(void **)(v0 + 24);
  uint64_t v2 = type metadata accessor for AnalyticsEvent(0LL);
  uint64_t v3 = (char *)swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  *(void *)(v0 + 32) = v3;
  swift_defaultActor_initialize(v3);
  unint64_t v4 = sub_10041271C((uint64_t)_swiftEmptyArrayStorage);
  *((void *)v3 + 14) = v4;
  UUID.init()(v4);
  uint64_t v5 = &v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL);
  v7(v5, 1LL, 1LL, v6);
  v7(&v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1LL, 1LL, v6);
  *((void *)v3 + 15) = 0xD00000000000003DLL;
  *((void *)v3 + swift_weakDestroy(v0 + 16) = 0x800000010085BB30LL;
  id v8 = v1;
  return swift_task_switch(sub_10029303C, v3, 0LL);
}

uint64_t sub_10029303C()
{
  return swift_task_switch(sub_1002930A8, 0LL, 0LL);
}

uint64_t sub_1002930A8()
{
  uint64_t v1 = type metadata accessor for AnalyticsPublisher();
  uint64_t v2 = swift_allocObject(v1, 112LL, 15LL);
  v0[5] = v2;
  swift_defaultActor_initialize(v2);
  uint64_t v3 = (uint64_t **)swift_task_alloc(dword_1009BDE0C);
  v0[6] = (uint64_t)v3;
  *uint64_t v3 = v0;
  v3[1] = (uint64_t *)sub_100293114;
  return sub_100713F88(v0[4]);
}

uint64_t sub_100293114()
{
  return swift_task_switch(sub_100293170, 0LL, 0LL);
}

uint64_t sub_100293170()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1002931A0(void *a1, double a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v52 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009A0E28);
  uint64_t inited = swift_initStackObject(v8, v54);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  *(void *)(inited + 32) = 0xD000000000000016LL;
  *(void *)(inited + sub_10016CF88(v0 + 40) = 0x800000010085BB70LL;
  *(void *)(inited + 48) = 0LL;
  *(_BYTE *)(inited + 56) = 1;
  *(void *)(inited + 64) = 0x6E6F697461727564LL;
  *(void *)(inited + 72) = 0xE800000000000000LL;
  *(void *)(inited + 80) = [objc_allocWithZone(NSNumber) initWithDouble:a2];
  *(_BYTE *)(inited + 88) = 0;
  unint64_t v10 = sub_100412AA4(inited);
  if (!a1) {
    return (id)v10;
  }
  id v11 = a1;
  id result = [v11 systemVersion];
  if (result)
  {
    uint64_t v13 = (uint64_t)result;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
    unint64_t v53 = v10;
    sub_10005C698(v13, 0, 0xD000000000000013LL, 0x8000000100857290LL, isUniquelyReferenced_nonNull_native);
    unint64_t v15 = v53;
    swift_bridgeObjectRelease();
    id result = [v11 systemVersion];
    if (result)
    {
      uint64_t v16 = (uint64_t)result;
      char v17 = swift_isUniquelyReferenced_nonNull_native(v15);
      unint64_t v53 = v15;
      sub_10005C698(v16, 0, 0xD00000000000001BLL, 0x80000001008572B0LL, v17);
      unint64_t v18 = v53;
      swift_bridgeObjectRelease();
      id v19 = objc_msgSend( objc_allocWithZone(NSNumber),  "initWithInteger:",  objc_msgSend(v11, "batteryLevel"));
      char v20 = swift_isUniquelyReferenced_nonNull_native(v18);
      unint64_t v53 = v18;
      sub_10005C698((uint64_t)v19, 0, 0x4C79726574746162LL, 0xEC0000006C657665LL, v20);
      unint64_t v21 = v53;
      swift_bridgeObjectRelease();
      id v22 = SPBeaconTaskNameBeginLeashing;
      id v23 = [v11 taskInformation];
      type metadata accessor for SPBeaconTaskName(0LL);
      uint64_t v25 = v24;
      uint64_t v26 = sub_100022898(0LL, (unint64_t *)&unk_1009AE4B0, &OBJC_CLASS___SPBeaconTaskInformation_ptr);
      uint64_t v27 = sub_100007864( (unint64_t *)&qword_10099C3B0,  (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName,  (uint64_t)&unk_1007E3C50);
      uint64_t v28 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v23, v25, v26, v27);

      if (*(void *)(v28 + 16) && (uint64_t v29 = sub_10030D388(v22), (v30 & 1) != 0))
      {
        id v31 = *(id *)(*(void *)(v28 + 56) + 8 * v29);

        swift_bridgeObjectRelease();
        id v32 = [v31 state];

        BOOL v33 = v32 == 0LL;
      }

      else
      {

        swift_bridgeObjectRelease();
        BOOL v33 = 0LL;
      }

      char v34 = swift_isUniquelyReferenced_nonNull_native(v21);
      unint64_t v53 = v21;
      sub_10005C698(v33, 1, 0x6563697665447369LL, 0xEF6465687361654CLL, v34);
      unint64_t v35 = v53;
      swift_bridgeObjectRelease();
      uint64_t v36 = [v11 connected];
      char v37 = swift_isUniquelyReferenced_nonNull_native(v35);
      unint64_t v53 = v35;
      sub_10005C698(v36, 1, 0xD000000000000011LL, 0x8000000100853CF0LL, v37);
      unint64_t v10 = v53;
      swift_bridgeObjectRelease();
      id v38 = [v11 role];
      if (v38)
      {
        uint64_t v39 = v38;
        id v40 = [v38 role];

        static String._unconditionallyBridgeFromObjectiveC(_:)(v40);
        NSString v41 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        char v42 = swift_isUniquelyReferenced_nonNull_native(v10);
        unint64_t v53 = v10;
        sub_10005C698((uint64_t)v41, 0, 1701605234LL, 0xE400000000000000LL, v42);
        unint64_t v10 = v53;
        swift_bridgeObjectRelease();
      }

      id v43 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
      unsigned int v44 = [v43 isInternalBuild];

      if (!v44) {
        goto LABEL_13;
      }
      id v45 = [v11 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v45);

      UUID.uuidString.getter(v46);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      NSString v47 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      char v48 = swift_isUniquelyReferenced_nonNull_native(v10);
      unint64_t v53 = v10;
      sub_10005C698((uint64_t)v47, 0, 0x6544646572696170LL, 0xEE00444965636976LL, v48);
      unint64_t v10 = v53;
      swift_bridgeObjectRelease();
      id v49 = [v11 serialNumber];
      if (v49)
      {
        uint64_t v50 = (uint64_t)v49;
        char v51 = swift_isUniquelyReferenced_nonNull_native(v10);
        unint64_t v53 = v10;
        sub_10005C698(v50, 0, 0xD000000000000018LL, 0x8000000100853D10LL, v51);
        unint64_t v10 = v53;

        swift_bridgeObjectRelease();
      }

      else
      {
LABEL_13:
      }

      return (id)v10;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_100293798(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v36 = a2;
  uint64_t v37 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v41 = *(void *)(v6 - 8);
  uint64_t v42 = v6;
  __chkstk_darwin(v6);
  id v40 = (char *)&v36 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v38 = *(void *)(v8 - 8);
  uint64_t v39 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  id v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = static os_log_type_t.info.getter(v9);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v13 = qword_100A2B008;
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v15 = swift_allocObject(v14, 112LL, 7LL);
  *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  aBlock[0] = *v3;
  uint64_t v16 = sub_100004AEC(&qword_1009A7D50);
  uint64_t v17 = String.init<A>(describing:)(aBlock, v16);
  uint64_t v19 = v18;
  *(void *)(v15 + 56) = &type metadata for String;
  unint64_t v20 = sub_1000226F4();
  *(void *)(v15 + 32) = v17;
  *(void *)(v15 + sub_10016CF88(v0 + 40) = v19;
  *(void *)(v15 + 96) = &type metadata for String;
  *(void *)(v15 + 104) = v20;
  *(void *)(v15 + 64) = v20;
  *(void *)(v15 + 72) = 0xD00000000000001FLL;
  *(void *)(v15 + 80) = 0x800000010085C850LL;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "%@: %@", 6LL, 2LL, v15);
  uint64_t v21 = swift_bridgeObjectRelease();
  uint64_t v22 = static os_log_type_t.default.getter(v21);
  if (qword_10099B788 != -1) {
    swift_once(&qword_10099B788, sub_1006517A0);
  }
  uint64_t v23 = qword_100A2B098;
  uint64_t v24 = swift_allocObject(v14, 72LL, 7LL);
  *(_OWORD *)(v24 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(v24 + 56) = sub_100004AEC((uint64_t *)&unk_1009B81E0);
  *(void *)(v24 + 64) = sub_1000372EC( &qword_1009A7F20,  (uint64_t *)&unk_1009B81E0,  (uint64_t)&protocol conformance descriptor for [A]);
  *(void *)(v24 + 32) = a1;
  *(void *)&double v25 = swift_bridgeObjectRetain(a1).n128_u64[0];
  os_log(_:dso:log:_:_:)(v22, &_mh_execute_header, v23, "unknownBeacons for uuids: %{public}@", 36LL, 2LL, v24, v25);
  swift_bridgeObjectRelease();
  uint64_t v26 = (void *)swift_allocObject(&unk_10094E1B8, 48LL, 7LL);
  v26[2] = a1;
  v26[3] = v4;
  uint64_t v27 = v37;
  v26[4] = v36;
  void v26[5] = v27;
  aBlock[4] = sub_1002DD58C;
  aBlock[5] = v26;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10094E1D0;
  uint64_t v28 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a1);
  swift_retain();
  uint64_t v29 = swift_retain();
  static DispatchQoS.unspecified.getter(v29);
  id v43 = _swiftEmptyArrayStorage;
  uint64_t v30 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v31 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v32 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  BOOL v33 = v40;
  uint64_t v34 = v42;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v31, v32, v42, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v33, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v33, v34);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v11, v39);
  return swift_release();
}

uint64_t sub_100293B64(uint64_t a1, uint64_t a2, void (*a3)(void *), uint64_t a4)
{
  v69[1] = a4;
  uint64_t v70 = a3;
  uint64_t v6 = sub_100004AEC(&qword_1009A4890);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v69 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v81 = (void *)type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v9 = *(v81 - 1);
  uint64_t v10 = __chkstk_darwin(v81);
  uint64_t v79 = (char *)v69 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v69 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v74 = (uint64_t)v69 - v16;
  __chkstk_darwin(v15);
  uint64_t v73 = (uint64_t)v69 - v17;
  uint64_t v18 = type metadata accessor for UUID(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v76 = (char *)v69 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)v69 - v22;
  uint64_t v24 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)v69 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = *(void *)(a1 + 16);
  uint64_t v77 = v19;
  uint64_t v78 = v18;
  uint64_t v75 = a2;
  if (v27)
  {
    uint64_t v28 = a1;
    uint64_t v29 = a1 + ((*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80));
    uint64_t v30 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v19 + 16);
    uint64_t v71 = *(void *)(v19 + 72);
    int v72 = v30;
    v69[0] = v28;
    __n128 v31 = swift_bridgeObjectRetain(v28);
    uint64_t v80 = _swiftEmptyArrayStorage;
    while (1)
    {
      v72(v26, v29, v18, v31);
      uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v19 + 56);
      v32(v26, 0LL, 1LL, v18);
      (*(void (**)(char *, char *, uint64_t))(v19 + 32))(v23, v26, v18);
      sub_10050BDEC((uint64_t)v23, (uint64_t)v8);
      if ((*(unsigned int (**)(char *, uint64_t, void *))(v9 + 48))(v8, 1LL, v81) == 1)
      {
        sub_100015794((uint64_t)v8, &qword_1009A4890);
      }

      else
      {
        uint64_t v33 = v73;
        sub_10002218C((uint64_t)v8, v73, type metadata accessor for WildModeAssociationRecord);
        sub_10001DC4C(v33, v74, type metadata accessor for WildModeAssociationRecord);
        unint64_t v34 = (unint64_t)v80;
        if ((swift_isUniquelyReferenced_nonNull_native(v80) & 1) == 0) {
          unint64_t v34 = sub_1004C5A84(0, *(void *)(v34 + 16) + 1LL, 1, v34);
        }
        unint64_t v36 = *(void *)(v34 + 16);
        unint64_t v35 = *(void *)(v34 + 24);
        uint64_t v37 = v34;
        if (v36 >= v35 >> 1) {
          uint64_t v37 = sub_1004C5A84(v35 > 1, v36 + 1, 1, v34);
        }
        uint64_t v80 = (void *)v37;
        *(void *)(v37 + swift_weakDestroy(v0 + 16) = v36 + 1;
        sub_10002218C( v74,  v37 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80))
        + *(void *)(v9 + 72) * v36,
          type metadata accessor for WildModeAssociationRecord);
        sub_100018C68(v73, type metadata accessor for WildModeAssociationRecord);
      }

      uint64_t v19 = v77;
      uint64_t v18 = v78;
      (*(void (**)(char *, uint64_t))(v77 + 8))(v23, v78);
      v29 += v71;
      if (!--v27)
      {
        v32(v26, 1LL, 1LL, v18);
        break;
      }
    }

    swift_bridgeObjectRelease();
    uint64_t v38 = v80;
  }

  else
  {
    uint64_t v38 = sub_100781CC0();
  }

  uint64_t v39 = v38[2];
  id v40 = v76;
  if (!v39)
  {
    v70(_swiftEmptyArrayStorage);
    return swift_bridgeObjectRelease();
  }

  uint64_t v84 = _swiftEmptyArrayStorage;
  swift_bridgeObjectRetain(v38);
  unint64_t v41 = 0LL;
  uint64_t v80 = v38;
  do
  {
    if (v41 >= v38[2])
    {
      __break(1u);
      goto LABEL_49;
    }

    unint64_t v42 = (*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    uint64_t v43 = *(void *)(v9 + 72);
    sub_10001DC4C((uint64_t)v38 + v42 + v43 * v41, (uint64_t)v14, type metadata accessor for WildModeAssociationRecord);
    int v44 = v14[*((int *)v81 + 16)];
    if (v44 == 8 || (v44 & 0xFA) == 0)
    {
      sub_100018C68((uint64_t)v14, type metadata accessor for WildModeAssociationRecord);
    }

    else
    {
      sub_10002218C((uint64_t)v14, (uint64_t)v79, type metadata accessor for WildModeAssociationRecord);
      uint64_t v46 = v84;
      if ((swift_isUniquelyReferenced_nonNull_native(v84) & 1) == 0)
      {
        sub_1000330A4(0, v46[2] + 1LL, 1);
        uint64_t v46 = v84;
      }

      unint64_t v48 = v46[2];
      unint64_t v47 = v46[3];
      if (v48 >= v47 >> 1)
      {
        sub_1000330A4(v47 > 1, v48 + 1, 1);
        uint64_t v46 = v84;
      }

      v46[2] = v48 + 1;
      sub_10002218C((uint64_t)v79, (uint64_t)v46 + v42 + v48 * v43, type metadata accessor for WildModeAssociationRecord);
      uint64_t v38 = v80;
      id v40 = v76;
    }

    ++v41;
  }

  while (v39 != v41);
  swift_bridgeObjectRelease();
  uint64_t v49 = (uint64_t)v84;
  swift_retain();
  uint64_t v39 = (uint64_t)sub_1002C5940(v49);
  swift_release();
  swift_release();
  if (qword_10099B2F8 == -1) {
    goto LABEL_30;
  }
LABEL_49:
  swift_once(&qword_10099B2F8, sub_100340AA8);
LABEL_30:
  uint64_t v50 = type metadata accessor for Logger(0LL);
  sub_10000A720(v50, (uint64_t)qword_100A2A6B0);
  uint64_t v51 = swift_bridgeObjectRetain_n(v39, 4LL);
  uint64_t v52 = (char *)Logger.logObject.getter(v51);
  int v53 = static os_log_type_t.debug.getter(v52);
  if (!os_log_type_enabled((os_log_t)v52, (os_log_type_t)v53))
  {

    swift_bridgeObjectRelease_n(v39, 4LL);
LABEL_46:
    v70((void *)v39);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  uint64_t v54 = swift_slowAlloc(22LL, -1LL);
  uint64_t v81 = (void *)swift_slowAlloc(32LL, -1LL);
  uint64_t v84 = v81;
  *(_DWORD *)uint64_t v54 = 134218242;
  if ((unint64_t)v39 >> 62)
  {
    if (v39 < 0) {
      uint64_t v68 = v39;
    }
    else {
      uint64_t v68 = v39 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v39);
    uint64_t v55 = _CocoaArrayWrapper.endIndex.getter(v68);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v55 = *(void *)((v39 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  swift_bridgeObjectRelease();
  uint64_t v82 = (void *)v55;
  uint64_t v79 = v83;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v83, v54 + 4, v54 + 12);
  swift_bridgeObjectRelease();
  *(_WORD *)(v54 + 12) = 2082;
  uint64_t v56 = _swiftEmptyArrayStorage;
  if (!v55)
  {
LABEL_45:
    uint64_t v64 = Array.description.getter(v56, v78);
    unint64_t v66 = v65;
    swift_bridgeObjectRelease();
    uint64_t v82 = (void *)sub_1003F11D4(v64, v66, (uint64_t *)&v84);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, v79, v54 + 14, v54 + 22);
    swift_bridgeObjectRelease_n(v39, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v52,  (os_log_type_t)v53,  "unknownBeacons[%ld]: %{public}s ",  (uint8_t *)v54,  0x16u);
    uint64_t v67 = v81;
    swift_arrayDestroy(v81, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v67, -1LL, -1LL);
    swift_slowDealloc(v54, -1LL, -1LL);

    goto LABEL_46;
  }

  LODWORD(v75) = v53;
  uint64_t v76 = v52;
  uint64_t v82 = _swiftEmptyArrayStorage;
  uint64_t result = sub_1000328D0(0, v55 & ~(v55 >> 63), 0);
  if ((v55 & 0x8000000000000000LL) == 0)
  {
    uint64_t v58 = 0LL;
    uint64_t v56 = v82;
    do
    {
      if ((v39 & 0xC000000000000001LL) != 0) {
        id v59 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v58, v39);
      }
      else {
        id v59 = *(id *)(v39 + 8 * v58 + 32);
      }
      id v60 = v59;
      id v61 = [v60 identifier];
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v61);

      uint64_t v82 = v56;
      unint64_t v63 = v56[2];
      unint64_t v62 = v56[3];
      if (v63 >= v62 >> 1)
      {
        sub_1000328D0(v62 > 1, v63 + 1, 1);
        uint64_t v56 = v82;
      }

      ++v58;
      v56[2] = v63 + 1;
      (*(void (**)(unint64_t, char *, uint64_t))(v77 + 32))( (unint64_t)v56 + ((*(unsigned __int8 *)(v77 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80))
      + *(void *)(v77 + 72) * v63,
        v40,
        v78);
    }

    while (v55 != v58);
    uint64_t v52 = v76;
    LOBYTE(v53) = v75;
    goto LABEL_45;
  }

  __break(1u);
  return result;
}

void *sub_1002943B0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for WildModeAssociationRecord(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v79 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v79 - v10;
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v79 - v12;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v98 = *(void *)(v14 - 8);
  uint64_t v99 = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v88 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v79 - v17;
  __int16 v19 = sub_10078380C(a1);
  uint64_t v20 = sub_1006DA7F4(v19);
  uint64_t v92 = v20[2];
  if (!v92)
  {
    swift_bridgeObjectRelease();
    return &_swiftEmptyDictionarySingleton;
  }

  uint64_t v87 = v11;
  uint64_t v22 = 0LL;
  uint64_t v95 = 0LL;
  uint64_t v23 = &_swiftEmptyDictionarySingleton;
  uint64_t v85 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_soundPlaybackManager;
  uint64_t v82 = &v105;
  uint64_t v89 = SPBeaconTaskNamePlaySound;
  *(void *)&__int128 v21 = 136315394LL;
  __int128 v81 = v21;
  uint64_t v80 = (char *)&type metadata for Any + 8;
  uint64_t v91 = v4;
  uint64_t v96 = v18;
  uint64_t v83 = a1;
  uint64_t v86 = v8;
  uint64_t v97 = v13;
  double v90 = v20;
  do
  {
    uint64_t v101 = (uint64_t)v23;
    uint64_t v102 = v22;
    id v30 = (id)v20[v22 + 4];
    static Date.trustedNow.getter((uint64_t)v18);
    uint64_t v31 = type metadata accessor for UUID(0LL);
    uint64_t v100 = *(void *)(v31 - 8);
    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v100 + 56);
    uint64_t v103 = v31;
    v32(v13, 1LL, 1LL);
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
    uint64_t v35 = v34;
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
    if (v33 == v36 && v35 == v37)
    {
      uint64_t v40 = swift_bridgeObjectRelease_n(v35, 2LL);
    }

    else
    {
      char v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v36, v37, 0LL);
      swift_bridgeObjectRelease();
      uint64_t v40 = swift_bridgeObjectRelease();
      if ((v39 & 1) == 0)
      {
        id v41 = 0LL;
        uint64_t v42 = 2LL;
        goto LABEL_21;
      }
    }

    uint64_t v93 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v32;
    id v94 = v30;
    __chkstk_darwin(v40);
    *(&v79 - 2) = v43;
    *(&v79 - 1) = a1;
    uint64_t v44 = sub_100022898(0LL, (unint64_t *)&unk_1009AE4B0, &OBJC_CLASS___SPBeaconTaskInformation_ptr);
    uint64_t v45 = v95;
    OS_dispatch_queue.sync<A>(execute:)(sub_1002DDFD4, &v79 - 4, v44);
    uint64_t v95 = v45;
    uint64_t v46 = (void *)v106[0];
    if (qword_10099B330 != -1) {
      swift_once(&qword_10099B330, sub_100374304);
    }
    uint64_t v47 = type metadata accessor for Logger(0LL);
    sub_10000A720(v47, (uint64_t)qword_100A2A748);
    sub_10001DC4C(a1, (uint64_t)v4, type metadata accessor for WildModeAssociationRecord);
    id v48 = v46;
    uint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
    os_log_type_t v50 = static os_log_type_t.info.getter(v49);
    if (os_log_type_enabled(v49, v50))
    {
      uint64_t v51 = (uint64_t)v4;
      uint64_t v52 = swift_slowAlloc(22LL, -1LL);
      uint64_t v84 = swift_slowAlloc(64LL, -1LL);
      v106[0] = v84;
      *(_DWORD *)uint64_t v52 = v81;
      uint64_t v53 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter(v103, v53);
      uint64_t v104 = sub_1003F11D4(v54, v55, v106);
      uint64_t v56 = v82;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v82, v52 + 4, v52 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68(v51, type metadata accessor for WildModeAssociationRecord);
      *(_WORD *)(v52 + 12) = 2080;
      id v57 = [v48 debugDescription];
      uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(v57);
      unint64_t v60 = v59;

      a1 = v83;
      uint64_t v104 = sub_1003F11D4(v58, v60, v106);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v56, v52 + 14, v52 + 22);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v49, v50, "UT Play taskInfo for %s: %s", (uint8_t *)v52, 0x16u);
      uint64_t v61 = v84;
      swift_arrayDestroy(v84, 2LL, v80);
      swift_slowDealloc(v61, -1LL, -1LL);
      swift_slowDealloc(v52, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v4, type metadata accessor for WildModeAssociationRecord);
    }

    uint64_t v8 = v86;
    uint64_t v42 = (uint64_t)[v48 state];
    id v62 = [v48 lastUpdated];
    unint64_t v63 = v88;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v62);

    uint64_t v65 = v98;
    uint64_t v64 = v99;
    unint64_t v66 = v96;
    (*(void (**)(char *, uint64_t))(v98 + 8))(v96, v99);
    (*(void (**)(char *, char *, uint64_t))(v65 + 32))(v66, v63, v64);
    id v41 = [v48 error];
    id v67 = [v48 commandIdentifier];
    if (v67)
    {
      id v68 = v67;
      uint64_t v69 = (uint64_t)v87;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v67);

      uint64_t v70 = 0LL;
      id v48 = v68;
    }

    else
    {
      uint64_t v70 = 1LL;
      uint64_t v69 = (uint64_t)v87;
    }

    uint64_t v71 = (uint64_t)v97;
    sub_100015794((uint64_t)v97, &qword_10099D8A0);
    v93(v69, v70, 1LL, v103);
    sub_100015750(v69, v71, &qword_10099D8A0);
    id v30 = v94;
LABEL_21:
    id v72 = v30;
    swift_errorRetain(v41);
    v73.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
    if (v41)
    {
      uint64_t v74 = (void *)_convertErrorToNSError(_:)(v41);
      swift_errorRelease(v41);
    }

    else
    {
      uint64_t v74 = 0LL;
    }

    id v75 = [objc_allocWithZone(SPBeaconTaskInformation) initWithName:v72 lastUpdated:v73.super.isa error:v74 state:v42];

    uint64_t v13 = v97;
    sub_10001581C((uint64_t)v97, (uint64_t)v8, &qword_10099D8A0);
    uint64_t v76 = v100;
    uint64_t v77 = v103;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v100 + 48))(v8, 1LL, v103) == 1)
    {
      v24.super.Class isa = 0LL;
    }

    else
    {
      v24.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v76 + 8))(v8, v77);
    }

    uint64_t v18 = v96;
    uint64_t v25 = v102 + 1;
    [v75 setCommandIdentifier:v24.super.isa];

    id v26 = v72;
    id v27 = v75;
    uint64_t v28 = v101;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v101);
    v106[0] = v28;
    sub_10005D250((uint64_t)v27, v26, isUniquelyReferenced_nonNull_native);
    uint64_t v23 = (void *)v106[0];

    uint64_t v22 = v25;
    swift_bridgeObjectRelease();
    swift_errorRelease(v41);
    sub_100015794((uint64_t)v13, &qword_10099D8A0);
    (*(void (**)(char *, uint64_t))(v98 + 8))(v18, v99);
    uint64_t v4 = v91;
    uint64_t v20 = v90;
  }

  while (v92 != v25);
  swift_bridgeObjectRelease();
  return v23;
}

uint64_t sub_100294BBC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  if (qword_10099B2F8 != -1) {
    swift_once(&qword_10099B2F8, sub_100340AA8);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_10000A720(v6, (uint64_t)qword_100A2A6B0);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v11;
    *(_DWORD *)uint64_t v10 = 136446210;
    uint64_t v14 = sub_1003F11D4(0xD000000000000035LL, 0x800000010085C8E0LL, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v14, &v15, v10 + 4, v10 + 12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "%{public}s", v10, 0xCu);
    swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  type metadata accessor for Transaction(0LL);
  uint64_t v12 = (void *)swift_allocObject(&unk_10094E208, 40LL, 7LL);
  void v12[2] = v3;
  v12[3] = a1;
  v12[4] = a2;
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)( "BeaconManagerService.stopFetchingUnauthorizedEncryptedPayload",  61LL,  2LL,  &unk_1009A7F30,  v12);
  return swift_release();
}

uint64_t sub_100294DA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[18] = a2;
  v3[19] = a3;
  v3[17] = a1;
  return swift_task_switch(sub_100294DC0, 0LL, 0LL);
}

uint64_t sub_100294DC0()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C920 + dword_10099C920);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C924);
    *(void *)(v0 + 160) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100294EC0;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100294EC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 160LL);
  *(void *)(*(void *)v1 + 168LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100294F1C, 0LL, 0LL);
}

uint64_t sub_100294F1C()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 168))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc(dword_1009BF614);
    *(void *)(v0 + 176) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1002950F0;
    return sub_100775318();
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2A470);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v9 = swift_slowAlloc(32LL, -1LL);
      uint64_t v10 = v9;
      *(_DWORD *)uint64_t v8 = 136446210;
      *(void *)(v0 + 120) = sub_1003F11D4(0xD000000000000035LL, 0x800000010085C8E0LL, &v10);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v8 + 4, v8 + 12);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "%{public}s Missing OwnerCommandService!", v8, 0xCu);
      swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1LL, -1LL);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    (*(void (**)(void))(v0 + 144))(0LL);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1002950F0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 176LL);
  *(void *)(*(void *)v1 + 184LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100295194;
  }
  else {
    uint64_t v3 = sub_100295154;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100295154()
{
  uint64_t v1 = *(void *)(v0 + 168);
  (*(void (**)(void))(v0 + 144))(0LL);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100295194()
{
  if (qword_10099B2F8 != -1) {
    swift_once(&qword_10099B2F8, sub_100340AA8);
  }
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2A6B0);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 184);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138543362;
    swift_errorRetain(v7);
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(void *)(v0 + 128) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v8 + 4, v8 + 12);
    *uint64_t v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Error stop fetching encrypted serial number %{public}@",  v8,  0xCu);
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 184));
    swift_errorRelease(v7);
  }

  uint64_t v12 = *(void *)(v0 + 184);
  uint64_t v13 = *(void (**)(void))(v0 + 144);

  v13(0LL);
  swift_release();
  swift_errorRelease(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100295370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v37 = a2;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v36 = (char *)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v30 - v11;
  if (qword_10099B2F8 != -1) {
    swift_once(&qword_10099B2F8, sub_100340AA8);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  sub_10000A720(v13, (uint64_t)qword_100A2A6B0);
  uint64_t v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v14 = v35(v12, a1, v7);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = swift_slowAlloc(22LL, -1LL);
    uint64_t v32 = a1;
    uint64_t v18 = v17;
    uint64_t v31 = swift_slowAlloc(64LL, -1LL);
    uint64_t v39 = v31;
    *(_DWORD *)uint64_t v18 = 136446466;
    uint64_t v38 = sub_1003F11D4(0xD000000000000030LL, 0x800000010085C960LL, &v39);
    uint64_t v33 = v3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v18 + 4, v18 + 12);
    *(_WORD *)(v18 + 12) = 2082;
    uint64_t v34 = a3;
    uint64_t v19 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v7, v19);
    uint64_t v38 = sub_1003F11D4(v20, v21, &v39);
    uint64_t v4 = v33;
    a3 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v18 + 14, v18 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "%{public}s identifier: %{public}s", (uint8_t *)v18, 0x16u);
    uint64_t v22 = v31;
    swift_arrayDestroy(v31, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v22, -1LL, -1LL);
    uint64_t v23 = v18;
    a1 = v32;
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v8 + 8))(v12, v7);
  }

  type metadata accessor for Transaction(0LL);
  NSUUID v24 = v36;
  v35(v36, a1, v7);
  uint64_t v25 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v26 = (v25 + 40) & ~v25;
  id v27 = (char *)swift_allocObject(&unk_10094E230, v26 + v9, v25 | 7);
  uint64_t v28 = v37;
  *((void *)v27 + 2) = v4;
  *((void *)v27 + 3) = v28;
  *((void *)v27 + 4) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v27[v26], v24, v7);
  swift_retain();
  swift_retain();
  static Transaction.asyncTask(name:block:)( "BeaconManagerService.fetchUnauthorizedEncryptedPayload",  54LL,  2LL,  &unk_1009A7F40,  v27);
  return swift_release();
}

uint64_t sub_1002956A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[22] = a3;
  v4[23] = a4;
  v4[20] = a1;
  v4[21] = a2;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  v4[24] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for URL(0LL);
  v4[25] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[26] = v7;
  v4[27] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  v4[28] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[29] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[30] = swift_task_alloc(v10);
  v4[31] = swift_task_alloc(v10);
  v4[32] = swift_task_alloc(v10);
  uint64_t v11 = sub_100004AEC(&qword_1009A4890);
  v4[33] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for WildModeAssociationRecord(0LL);
  v4[34] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v4[35] = v13;
  v4[36] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1002957B8, 0LL, 0LL);
}

uint64_t sub_1002957B8()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C920 + dword_10099C920);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C924);
    *(void *)(v0 + 296) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1002958B8;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1002958B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 296LL);
  *(void *)(*(void *)v1 + 304LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100295914, 0LL, 0LL);
}

uint64_t sub_100295914()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (!*(void *)(v0 + 304))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B220 != -1) {
      swift_once(&qword_10099B220, sub_1002673AC);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    uint64_t v23 = sub_10000A720(v22, (uint64_t)qword_100A2A470);
    NSUUID v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v26 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "Missing OwnerCommandService to fetchUnauthorizedEncryptedPayload!",  v26,  2u);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    uint64_t v27 = *(void *)(v0 + 200);
    uint64_t v28 = *(void *)(v0 + 208);
    uint64_t v29 = *(void *)(v0 + 192);
    uint64_t v30 = *(void (**)(uint64_t))(v0 + 168);

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v29, 1LL, 1LL, v27);
    v30(v29);
    goto LABEL_18;
  }

  uint64_t v3 = *(void *)(v0 + 272);
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v5 = *(void *)(v0 + 184);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  sub_10050BDEC(v5, v4);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1LL, v3) == 1)
  {
    sub_100015794(*(void *)(v0 + 264), &qword_1009A4890);
    if (qword_10099B2F8 != -1) {
      swift_once(&qword_10099B2F8, sub_100340AA8);
    }
    uint64_t v6 = *(void *)(v0 + 256);
    uint64_t v8 = *(void *)(v0 + 224);
    uint64_t v7 = *(void *)(v0 + 232);
    uint64_t v9 = *(void *)(v0 + 184);
    uint64_t v10 = type metadata accessor for Logger(0LL);
    sub_10000A720(v10, (uint64_t)qword_100A2A6B0);
    uint64_t v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v9, v8);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.error.getter(v12);
    BOOL v14 = os_log_type_enabled(v12, v13);
    uint64_t v15 = *(void *)(v0 + 256);
    uint64_t v16 = *(void *)(v0 + 224);
    if (v14)
    {
      uint64_t v59 = *(void *)(v0 + 232);
      uint64_t v17 = swift_slowAlloc(22LL, -1LL);
      uint64_t v18 = swift_slowAlloc(32LL, -1LL);
      uint64_t v60 = v18;
      *(_DWORD *)uint64_t v17 = 141558275;
      *(void *)(v0 + 120) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v17 + 4, v17 + 12);
      *(_WORD *)(v17 + 12) = 2081;
      uint64_t v19 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v16, v19);
      *(void *)(v0 + 128) = sub_1003F11D4(v20, v21, &v60);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v17 + 14, v17 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v15, v16);
      _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "No wildModeAssociationRecord for %{private,mask.hash}s",  (uint8_t *)v17,  0x16u);
      swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(void, void))(*(void *)(v0 + 232) + 8LL))( *(void *)(v0 + 256),  *(void *)(v0 + 224));
    }

    uint64_t v29 = *(void *)(v0 + 192);
    uint64_t v49 = *(void (**)(uint64_t))(v0 + 168);
    (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 208) + 56LL))( v29,  1LL,  1LL,  *(void *)(v0 + 200));
    v49(v29);
    swift_release();
LABEL_18:
    sub_100015794(v29, (uint64_t *)&unk_1009A34D0);
    uint64_t v50 = *(void *)(v0 + 256);
    uint64_t v51 = *(void *)(v0 + 264);
    uint64_t v53 = *(void *)(v0 + 240);
    uint64_t v52 = *(void *)(v0 + 248);
    uint64_t v54 = *(void *)(v0 + 216);
    uint64_t v55 = *(void *)(v0 + 192);
    swift_task_dealloc(*(void *)(v0 + 288));
    swift_task_dealloc(v51);
    swift_task_dealloc(v50);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  sub_10002218C(*(void *)(v0 + 264), *(void *)(v0 + 288), type metadata accessor for WildModeAssociationRecord);
  if (qword_10099B2F8 != -1) {
    swift_once(&qword_10099B2F8, sub_100340AA8);
  }
  uint64_t v31 = *(void *)(v0 + 248);
  uint64_t v33 = *(void *)(v0 + 224);
  uint64_t v32 = *(void *)(v0 + 232);
  uint64_t v34 = *(void *)(v0 + 184);
  uint64_t v35 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 312) = sub_10000A720(v35, (uint64_t)qword_100A2A6B0);
  uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v32 + 16);
  *(void *)(v0 + 320) = v36;
  uint64_t v37 = v36(v31, v34, v33);
  uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v39 = static os_log_type_t.default.getter(v38);
  BOOL v40 = os_log_type_enabled(v38, v39);
  uint64_t v41 = *(void *)(v0 + 248);
  uint64_t v42 = *(void *)(v0 + 224);
  uint64_t v43 = *(void *)(v0 + 232);
  if (v40)
  {
    uint64_t v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v58 = swift_slowAlloc(32LL, -1LL);
    uint64_t v60 = v58;
    *(_DWORD *)uint64_t v44 = 136446210;
    uint64_t v45 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter(v42, v45);
    *(void *)(v0 + 152) = sub_1003F11D4(v46, v47, &v60);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v44 + 4, v44 + 12);
    swift_bridgeObjectRelease();
    id v48 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    v48(v41, v42);
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "Fetching encrypted serial number for %{public}s", v44, 0xCu);
    swift_arrayDestroy(v58, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1LL, -1LL);
    swift_slowDealloc(v44, -1LL, -1LL);
  }

  else
  {
    id v48 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    v48(*(void *)(v0 + 248), *(void *)(v0 + 224));
  }

  *(void *)(v0 + 328) = v48;
  id v57 = (void *)swift_task_alloc(dword_1009BF60C);
  *(void *)(v0 + 336) = v57;
  *id v57 = v0;
  v57[1] = sub_100295F24;
  return sub_100773870(*(void *)(v0 + 216), *(void *)(v0 + 288));
}

uint64_t sub_100295F24()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 336LL);
  *(void *)(*(void *)v1 + 344LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100296090;
  }
  else {
    uint64_t v3 = sub_100295F88;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100295F88()
{
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v6 = *(void (**)(uint64_t))(v0 + 168);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v5, v2, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v3 + 56))(v5, 0LL, 1LL, v4);
  v6(v5);
  swift_release();
  sub_100015794(v5, (uint64_t *)&unk_1009A34D0);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_100018C68(v1, type metadata accessor for WildModeAssociationRecord);
  uint64_t v7 = *(void *)(v0 + 256);
  uint64_t v8 = *(void *)(v0 + 264);
  uint64_t v10 = *(void *)(v0 + 240);
  uint64_t v9 = *(void *)(v0 + 248);
  uint64_t v11 = *(void *)(v0 + 216);
  uint64_t v12 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 288));
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100296090()
{
  uint64_t v1 = *(void *)(v0 + 344);
  (*(void (**)(void, void, void))(v0 + 320))( *(void *)(v0 + 240),  *(void *)(v0 + 184),  *(void *)(v0 + 224));
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 344);
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v0 + 328);
    uint64_t v6 = *(void *)(v0 + 240);
    uint64_t v7 = *(void *)(v0 + 224);
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    uint64_t v27 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v28 = swift_slowAlloc(32LL, -1LL);
    uint64_t v29 = v28;
    *(_DWORD *)uint64_t v8 = 136446466;
    uint64_t v9 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter(v7, v9);
    *(void *)(v0 + 136) = sub_1003F11D4(v10, v11, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    v26(v6, v7);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v5);
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + 144) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v8 + 14, v8 + 22);
    *uint64_t v27 = v12;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "Error fetching encrypted serial number for %{public}s. Error %{public}@",  (uint8_t *)v8,  0x16u);
    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v27, 1LL, v13);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    uint64_t v14 = *(void *)(v0 + 344);
    (*(void (**)(void, void))(v0 + 328))(*(void *)(v0 + 240), *(void *)(v0 + 224));
    swift_errorRelease(v14);
    swift_errorRelease(v14);
  }

  uint64_t v15 = *(void *)(v0 + 344);
  uint64_t v16 = *(void *)(v0 + 288);
  uint64_t v17 = *(void *)(v0 + 192);
  uint64_t v18 = *(void (**)(uint64_t))(v0 + 168);
  (*(void (**)(uint64_t, uint64_t, uint64_t, void))(*(void *)(v0 + 208) + 56LL))( v17,  1LL,  1LL,  *(void *)(v0 + 200));
  v18(v17);
  swift_release();
  swift_errorRelease(v15);
  sub_100015794(v17, (uint64_t *)&unk_1009A34D0);
  sub_100018C68(v16, type metadata accessor for WildModeAssociationRecord);
  uint64_t v19 = *(void *)(v0 + 256);
  uint64_t v20 = *(void *)(v0 + 264);
  uint64_t v22 = *(void *)(v0 + 240);
  uint64_t v21 = *(void *)(v0 + 248);
  uint64_t v23 = *(void *)(v0 + 216);
  uint64_t v24 = *(void *)(v0 + 192);
  swift_task_dealloc(*(void *)(v0 + 288));
  swift_task_dealloc(v20);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100296390@<X0>(uint64_t a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v126 = a1;
  uint64_t v101 = a3;
  uint64_t v4 = type metadata accessor for SafeLocation(0LL);
  uint64_t v133 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  NSString v120 = (char *)v97 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v103 = (char *)v97 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v132 = (char *)v97 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v119 = (char *)v97 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v121 = (char *)v97 - v14;
  __chkstk_darwin(v13);
  uint64_t v104 = (char *)v97 - v15;
  uint64_t v16 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v17 = __chkstk_darwin(v16);
  v97[4] = (char *)v97 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  v97[7] = (char *)v97 - v20;
  __chkstk_darwin(v19);
  v97[5] = (char *)v97 - v21;
  uint64_t v22 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v108 = (char *)v97 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v23);
  int v106 = (char *)v97 - v26;
  __chkstk_darwin(v25);
  uint64_t v107 = (char *)v97 - v27;
  uint64_t v129 = type metadata accessor for Date(0LL);
  uint64_t v135 = *(void *)(v129 - 8);
  uint64_t v28 = __chkstk_darwin(v129);
  uint64_t v115 = (char *)v97 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = __chkstk_darwin(v28);
  __int128 v123 = (char *)v97 - v31;
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v105 = (char *)v97 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v122 = (char *)v97 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  unint64_t v118 = (char *)v97 - v37;
  __chkstk_darwin(v36);
  uint64_t v125 = (char *)v97 - v38;
  uint64_t v128 = type metadata accessor for ShareRecord(0LL);
  v97[2] = *(void *)(v128 - 8);
  uint64_t v39 = __chkstk_darwin(v128);
  uint64_t v114 = (char *)v97 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v117 = (char *)v97 - v42;
  __chkstk_darwin(v41);
  uint64_t v134 = (char *)v97 - v43;
  uint64_t v98 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v98);
  uint64_t v99 = (uint64_t)v97 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v100 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v45 = __chkstk_darwin(v100);
  v97[0] = (char *)v97 - ((v46 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = __chkstk_darwin(v45);
  v97[1] = (char *)v97 - v48;
  uint64_t v49 = __chkstk_darwin(v47);
  uint64_t v102 = (uint64_t)v97 - v50;
  __chkstk_darwin(v49);
  uint64_t v127 = (char *)v97 - v51;
  uint64_t v52 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v53 = __chkstk_darwin(v52);
  uint64_t v55 = (char *)v97 - ((v54 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v53);
  id v57 = (char *)v97 - v56;
  uint64_t v58 = type metadata accessor for UUID(0LL);
  uint64_t v59 = *(void *)(v58 - 8);
  uint64_t v60 = __chkstk_darwin(v58);
  uint64_t v124 = (char *)v97 - ((v61 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v62 = __chkstk_darwin(v60);
  uint64_t v113 = (char *)v97 - v63;
  uint64_t v64 = __chkstk_darwin(v62);
  char v112 = (char *)v97 - v65;
  uint64_t v66 = __chkstk_darwin(v64);
  uint64_t v111 = (char *)v97 - v67;
  uint64_t v68 = __chkstk_darwin(v66);
  v97[6] = (char *)v97 - v69;
  uint64_t v70 = __chkstk_darwin(v68);
  v97[3] = (char *)v97 - v71;
  uint64_t v72 = __chkstk_darwin(v70);
  uint64_t v110 = (char *)v97 - v73;
  uint64_t v74 = __chkstk_darwin(v72);
  uint64_t v109 = (char *)v97 - v75;
  __chkstk_darwin(v74);
  uint64_t v77 = (char *)v97 - v76;
  uint64_t v79 = a2[3];
  uint64_t v78 = a2[4];
  sub_100012ED8(a2, v79);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v78 + 8) + 8LL) + 32LL))(v79);
  uint64_t v130 = v59;
  uint64_t v80 = *(void (**)(char *, uint64_t))(v59 + 8);
  uint64_t v116 = v77;
  uint64_t v131 = v58;
  v80(v77, v58);
  sub_100013044((uint64_t)a2, (uint64_t)&v137);
  uint64_t v81 = sub_100004AEC(&qword_1009B0530);
  if (swift_dynamicCast(v57, &v137, v81, v52, 0LL))
  {
    sub_10002218C((uint64_t)v57, (uint64_t)v55, type metadata accessor for SharedBeaconRecord);
    uint64_t v82 = (char *)v126;
    id v83 = sub_10014795C((uint64_t)v55, *(void *)(v126 + 256));
    [v83 setConnectionAllowed:0];
    [v83 setConnectableDeviceCount:0];
    sub_1002BC568((uint64_t)v55, 0, v82);
    type metadata accessor for SPBeaconTaskName(0LL);
    sub_100022898(0LL, (unint64_t *)&unk_1009AE4B0, &OBJC_CLASS___SPBeaconTaskInformation_ptr);
    sub_100007864( (unint64_t *)&qword_10099C3B0,  (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName,  (uint64_t)&unk_1007E3C50);
    Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v83 setTaskInformation:isa];

    sub_100018C68((uint64_t)v55, type metadata accessor for SharedBeaconRecord);
    *uint64_t v101 = v83;
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v137);
  }

  else
  {
    uint64_t v86 = v127;
    uint64_t v87 = v100;
    if (swift_dynamicCast(v127, &v137, v81, v100, 0LL))
    {
      uint64_t v88 = (uint64_t)v86;
      uint64_t v89 = v102;
      sub_10002218C(v88, v102, type metadata accessor for OwnedBeaconRecord);
      uint64_t v90 = v99;
      sub_10001DC4C(v89 + *(int *)(v87 + 24), v99, type metadata accessor for StableIdentifier);
      uint64_t v91 = (char *)&loc_100296BEC + dword_100298924[swift_getEnumCaseMultiPayload(v90, v98)];
      uint64_t v127 = (char *)v80;
      __asm { BR              X10 }
    }

    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v93 = v92;
    uint64_t v136 = 18LL;
    unint64_t v94 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v95 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    uint64_t v96 = _BridgedStoredNSError.init(_:userInfo:)(&v138, &v136, v94, v93, v95);
    swift_willThrow(v96);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v137);
  }

#error "100298704: call analysis failed (funcsize=616)"
#error "10029751C: call analysis failed (funcsize=371)"
uint64_t sub_100298938(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v6;
  uint64_t v7;
  uint64_t v8;
  char *v9;
  uint64_t v10;
  uint64_t v11;
  char *v12;
  uint64_t v13;
  uint64_t v14;
  char *v15;
  uint64_t v16;
  uint64_t v17;
  uint64_t v18;
  char *v19;
  uint64_t v20;
  uint64_t v21;
  void *v22;
  char v23;
  uint64_t v25;
  char v26;
  void (*v27)(char *, uint64_t, uint64_t, uint64_t);
  void *v28;
  uint64_t v29;
  uint64_t v30;
  unint64_t v31;
  uint64_t v32;
  uint64_t v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  uint64_t v37;
  uint64_t v38;
  uint64_t v39;
  uint64_t v40;
  void *v41;
  char v42;
  uint64_t v43;
  unint64_t v44;
  uint64_t My;
  void *v46;
  uint64_t v47;
  char *v48;
  char *v49;
  char *v50;
  uint64_t v51;
  uint64_t v52;
  uint64_t v53;
  void v54[3];
  uint64_t v55;
  uint64_t v56;
  uint64_t v52 = a4;
  uint64_t v53 = a3;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v47 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v47 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a2 & 1) != 0)
  {
    uint64_t v20 = a1[3];
    uint64_t v21 = a1[4];
    sub_100012ED8(a1, v20);
    uint64_t v22 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v21 + 176))(v20, v21);
    uint64_t v23 = sub_1004E56A4((uint64_t)v22, v53);

    return v23 & 1;
  }

  uint64_t v49 = v19;
  uint64_t v50 = v12;
  uint64_t v48 = v9;
  uint64_t v51 = v7;
  sub_100013044((uint64_t)a1, (uint64_t)v54);
  uint64_t v25 = sub_100004AEC(&qword_1009B0530);
  uint64_t v26 = swift_dynamicCast(v15, v54, v25, v16, 6LL);
  uint64_t v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56);
  uint64_t v28 = a1;
  if ((v26 & 1) == 0)
  {
    v27(v15, 1LL, 1LL, v16);
    sub_100015794((uint64_t)v15, (uint64_t *)&unk_1009A9C30);
    goto LABEL_7;
  }

  v27(v15, 0LL, 1LL, v16);
  uint64_t v29 = (uint64_t)v49;
  sub_10002218C((uint64_t)v15, (uint64_t)v49, type metadata accessor for OwnedBeaconRecord);
  uint64_t v30 = sub_1005D2984();
  if (v31 >> 60 == 15)
  {
    sub_100018C68(v29, type metadata accessor for OwnedBeaconRecord);
    goto LABEL_7;
  }

  uint64_t v43 = v30;
  uint64_t v44 = v31;
  if (!sub_1005E2538(v30, v31))
  {
    sub_100018C68((uint64_t)v49, type metadata accessor for OwnedBeaconRecord);
    sub_1000182F0(v43, v44);
LABEL_7:
    uint64_t v32 = a1[3];
    uint64_t v33 = a1[4];
    sub_100012ED8(a1, v32);
    uint64_t v34 = (uint64_t)v50;
    (*(void (**)(uint64_t, uint64_t))(v33 + 192))(v32, v33);
    uint64_t v35 = v51;
    LODWORD(v32) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v51 + 48))(v34, 1LL, v6);
    sub_100015794(v34, &qword_10099D8A0);
    if ((_DWORD)v32 == 1)
    {
      sub_100013044((uint64_t)v28, (uint64_t)v54);
    }

    else
    {
      uint64_t v36 = v28[3];
      uint64_t v37 = v28[4];
      sub_100012ED8(v28, v36);
      uint64_t v38 = (uint64_t)v48;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v37 + 8) + 8LL) + 32LL))(v36);
      LOBYTE(v36) = sub_1004E4BF0(v38, v52);
      (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v38, v6);
      sub_100013044((uint64_t)v28, (uint64_t)v54);
      if ((v36 & 1) == 0)
      {
        uint64_t v42 = 0;
        goto LABEL_15;
      }
    }

    uint64_t v39 = v55;
    uint64_t v40 = v56;
    sub_100012ED8(v54, v55);
    uint64_t v41 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v40 + 176))(v39, v40);
    uint64_t v42 = sub_1004E56A4((uint64_t)v41, v53);

LABEL_15:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v54);
    return v42 & 1;
  }

  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  uint64_t v55 = My;
  uint64_t v56 = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  uint64_t v46 = sub_10000A7C8(v54);
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v46,  enum case for Feature.FindMy.alphaWasp(_:),  My);
  LOBYTE(My) = isFeatureEnabled(_:)(v54);
  sub_1000182F0(v43, v44);
  sub_100018C68((uint64_t)v49, type metadata accessor for OwnedBeaconRecord);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v54);
  if ((My & 1) != 0) {
    goto LABEL_7;
  }
  uint64_t v42 = 0;
  return v42 & 1;
}

void sub_100298D58(void *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v52 = a2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009AA870);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for BeaconProductInfoRecord(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v51 = (uint64_t)&v49 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((sub_1003DFB44(a1) & 1) != 0)
  {
    uint64_t v53 = v3;
    uint64_t v54 = a3;
    uint64_t v52 = *(void *)(v52 + 256);
    uint64_t v17 = a1[3];
    uint64_t v16 = a1[4];
    sub_100012ED8(a1, v17);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v16 + 8) + 8LL) + 32LL))(v17);
    sub_10050B884((uint64_t)v9, (uint64_t)v12);
    uint64_t v18 = *(void (**)(char *, uint64_t))(v7 + 8);
    v18(v9, v6);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) == 1)
    {
      sub_100015794((uint64_t)v12, &qword_1009AA870);
      uint64_t v19 = (uint64_t)a1;
      uint64_t v20 = v54;
LABEL_16:
      sub_100013044(v19, v20);
      return;
    }

    uint64_t v34 = v51;
    sub_10002218C((uint64_t)v12, v51, type metadata accessor for BeaconProductInfoRecord);
    uint64_t v35 = v54;
    if (*(_BYTE *)(v34 + *(int *)(v13 + 28)) != 1)
    {
      sub_100018C68(v34, type metadata accessor for BeaconProductInfoRecord);
      uint64_t v19 = (uint64_t)a1;
      uint64_t v20 = v35;
      goto LABEL_16;
    }

    if (qword_10099B4D8 != -1) {
      swift_once(&qword_10099B4D8, sub_1004AB71C);
    }
    uint64_t v36 = type metadata accessor for Logger(0LL);
    sub_10000A720(v36, (uint64_t)qword_100A2AB18);
    uint64_t v37 = sub_100013044((uint64_t)a1, (uint64_t)v56);
    uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.default.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = swift_slowAlloc(22LL, -1LL);
      uint64_t v52 = swift_slowAlloc(32LL, -1LL);
      uint64_t v59 = v52;
      *(_DWORD *)uint64_t v40 = 141558275;
      uint64_t v55 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v40 + 4, v40 + 12);
      *(_WORD *)(v40 + 12) = 2081;
      uint64_t v50 = v40 + 14;
      uint64_t v42 = v57;
      uint64_t v41 = v58;
      sub_100012ED8(v56, v57);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v41 + 8) + 8LL) + 32LL))(v42);
      uint64_t v43 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter(v6, v43);
      unint64_t v46 = v45;
      v18(v9, v6);
      uint64_t v55 = sub_1003F11D4(v44, v46, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v50, v40 + 22);
      uint64_t v35 = v54;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v56);
      _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "Hiding beacon %{private,mask.hash}s because productInfo has hidden flag set.",  (uint8_t *)v40,  0x16u);
      uint64_t v47 = v52;
      swift_arrayDestroy(v52, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1LL, -1LL);
      swift_slowDealloc(v40, -1LL, -1LL);

      uint64_t v48 = v51;
    }

    else
    {

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v56);
      uint64_t v48 = v34;
    }

    sub_100018C68(v48, type metadata accessor for BeaconProductInfoRecord);
    *(void *)(v35 + 32) = 0LL;
    *(_OWORD *)uint64_t v35 = 0u;
    *(_OWORD *)(v35 + swift_weakDestroy(v0 + 16) = 0u;
  }

  else
  {
    uint64_t v21 = a3;
    uint64_t v52 = v7;
    if (qword_10099B4D8 != -1) {
      swift_once(&qword_10099B4D8, sub_1004AB71C);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    sub_10000A720(v22, (uint64_t)qword_100A2AB18);
    uint64_t v23 = sub_100013044((uint64_t)a1, (uint64_t)v56);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = swift_slowAlloc(22LL, -1LL);
      uint64_t v51 = swift_slowAlloc(32LL, -1LL);
      uint64_t v59 = v51;
      *(_DWORD *)uint64_t v26 = 141558275;
      uint64_t v55 = 1752392040LL;
      uint64_t v53 = v3;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v26 + 4, v26 + 12);
      *(_WORD *)(v26 + 12) = 2081;
      uint64_t v50 = v26 + 14;
      uint64_t v54 = a3;
      uint64_t v28 = v57;
      uint64_t v27 = v58;
      sub_100012ED8(v56, v57);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v27 + 8) + 8LL) + 32LL))(v28);
      uint64_t v29 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter(v6, v29);
      unint64_t v32 = v31;
      (*(void (**)(char *, uint64_t))(v52 + 8))(v9, v6);
      uint64_t v55 = sub_1003F11D4(v30, v32, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v50, v26 + 22);
      uint64_t v21 = v54;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v56);
      _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "Filtering %{private,mask.hash}s because it has automatic share type (e.g. it's Family member's item) or Items Sh aring feature disabled.",  (uint8_t *)v26,  0x16u);
      uint64_t v33 = v51;
      swift_arrayDestroy(v51, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v56);
    }

    *(void *)(v21 + 32) = 0LL;
    *(_OWORD *)uint64_t v21 = 0u;
    *(_OWORD *)(v21 + swift_weakDestroy(v0 + 16) = 0u;
  }

uint64_t sub_100299384(uint64_t a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v54 = a4;
  int v55 = a3;
  uint64_t v56 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v10 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v57 = &v51[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v58 = *(void *)(v12 - 8);
  uint64_t v59 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = &v51[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v15 = mach_continuous_time();
  if (qword_10099B4D8 != -1) {
    swift_once(&qword_10099B4D8, sub_1004AB71C);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = sub_10000A720(v16, (uint64_t)qword_100A2AB18);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.info.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    int v20 = a2;
    uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v21 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "BeaconManagerService: allBeacons(ofTypes:includeDupes:includeHidden:completion:(",  v21,  2u);
    uint64_t v22 = v21;
    a2 = v20;
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  if (*(void *)(a1 + 16))
  {
    swift_bridgeObjectRetain(a1);
  }

  else
  {
    uint64_t v23 = sub_100004AEC(&qword_1009A7D78);
    uint64_t inited = swift_initStackObject(v23, v60);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E8280;
    os_log_type_t v25 = (void *)SPBeaconTypeSelfBeaconing;
    int v52 = a2;
    *(void *)(inited + 32) = SPBeaconTypeSelfBeaconing;
    uint64_t v26 = (void *)SPBeaconTypeDurian;
    uint64_t v27 = (void *)SPBeaconTypeAccessory;
    *(void *)(inited + sub_10016CF88(v0 + 40) = SPBeaconTypeDurian;
    *(void *)(inited + 48) = v27;
    uint64_t v28 = v6;
    uint64_t v29 = v10;
    uint64_t v30 = (void *)SPBeaconTypeVirtualMeDevice;
    uint64_t v53 = v14;
    uint64_t v31 = a5;
    unint64_t v32 = (void *)SPBeaconTypeHele;
    *(void *)(inited + 56) = SPBeaconTypeVirtualMeDevice;
    *(void *)(inited + 64) = v32;
    id v33 = v25;
    id v34 = v26;
    id v35 = v27;
    id v36 = v30;
    uint64_t v10 = v29;
    uint64_t v6 = v28;
    id v37 = v32;
    a5 = v31;
    uint64_t v14 = v53;
    a1 = sub_1006F1530(inited);
    swift_setDeallocating(inited);
    type metadata accessor for SPBeaconType(0LL);
    LOBYTE(a2) = v52;
    swift_arrayDestroy(inited + 32, 5LL, v38);
  }

  id v39 = [(id)objc_opt_self(NSXPCConnection) currentConnection];
  if (v39)
  {
    uint64_t v40 = v39;
    unsigned int v41 = [v39 processIdentifier];
  }

  else
  {
    unsigned int v41 = 0;
  }

  uint64_t v42 = swift_allocObject(&unk_10094D218, 72LL, 7LL);
  *(void *)(v42 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)(v42 + 24) = a1;
  *(_BYTE *)(v42 + 32) = a2 & 1;
  *(_BYTE *)(v42 + 33) = v55 & 1;
  *(void *)(v42 + sub_10016CF88(v0 + 40) = v15;
  *(_DWORD *)(v42 + 48) = v41;
  *(void *)(v42 + 56) = v54;
  *(void *)(v42 + 64) = a5;
  aBlock[4] = sub_1002D7254;
  aBlock[5] = v42;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10094D230;
  uint64_t v43 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v44 = swift_retain();
  static DispatchQoS.unspecified.getter(v44);
  uint64_t v61 = _swiftEmptyArrayStorage;
  uint64_t v45 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v46 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v47 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v49 = v56;
  uint64_t v48 = v57;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v61, v46, v47, v56, v45);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v48, v43);
  _Block_release(v43);
  (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v48, v49);
  (*(void (**)(_BYTE *, uint64_t))(v58 + 8))(v14, v59);
  return swift_release();
}

uint64_t sub_1002997B4( uint64_t a1, uint64_t a2, char a3, int a4, Swift::UInt64 a5, int a6, void (*a7)(uint64_t))
{
  uint64_t v13 = mach_continuous_time();
  uint64_t v14 = sub_100508644();
  uint64_t v15 = sub_10028E698((uint64_t)v14, a2, a3, a4);
  swift_bridgeObjectRelease();
  uint64_t v29 = _swiftEmptyArrayStorage;
  swift_retain();
  uint64_t v16 = sub_1002C4F88((uint64_t)v15, a1);
  swift_bridgeObjectRelease();
  swift_release();
  sub_100185294((uint64_t)v16);
  uint64_t v17 = mach_continuous_time();
  if (v17 >= a5)
  {
    a5 = convertToNanoseconds(_:)(v17 - a5);
    if (v17 >= v13)
    {
      uint64_t v13 = convertToNanoseconds(_:)(v17 - v13);
      if (qword_10099B4D8 == -1) {
        goto LABEL_5;
      }
      goto LABEL_9;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
LABEL_9:
  swift_once(&qword_10099B4D8, sub_1004AB71C);
LABEL_5:
  uint64_t v18 = type metadata accessor for Logger(0LL);
  sub_10000A720(v18, (uint64_t)qword_100A2AB18);
  variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus();
  variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus();
  variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus();
  uint64_t v19 = variable initialization expression of CurrentLocationMonitor._currentAuthorizationStatus();
  int v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.default.getter(v20);
  if (os_log_type_enabled(v20, v21))
  {
    double v22 = (double)a5 / 1000000.0;
    uint64_t v23 = swift_slowAlloc(40LL, -1LL);
    *(_DWORD *)uint64_t v23 = 67110144;
    LODWORD(v27) = a6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, (char *)&v27 + 4, v23 + 4, v23 + 8);
    *(_WORD *)(v23 + 8) = 1040;
    LODWORD(v27) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, (char *)&v27 + 4, v23 + 10, v23 + 14);
    *(_WORD *)(v23 + 14) = 2048;
    double v27 = (double)v13 / 1000000.0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v23 + 16, v23 + 24);
    *(_WORD *)(v23 + 24) = 1040;
    LODWORD(v27) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, (char *)&v27 + 4, v23 + 26, v23 + 30);
    *(_WORD *)(v23 + 30) = 2048;
    double v27 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v23 + 32, v23 + 40);
    _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "allBeacons [pid: %d] duration: %.*fms  -- queued: %.*fms",  (uint8_t *)v23,  0x28u);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  uint64_t v24 = sub_1006F16D4((uint64_t)v29);
  swift_bridgeObjectRelease();
  a7(v24);
  return swift_bridgeObjectRelease();
}

uint64_t sub_100299A7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[17] = a6;
  v7[18] = a7;
  v7[15] = a4;
  v7[16] = a5;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  v7[19] = v8;
  v7[20] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100299ADC, 0LL, 0LL);
}

uint64_t sub_100299ADC()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C8F0 + dword_10099C8F0);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C8F4);
    *(void *)(v0 + 168) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100299BC8;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100299BC8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 168LL);
  *(void *)(*(void *)v1 + 176LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100299C24, 0LL, 0LL);
}

uint64_t sub_100299C24()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 176))
  {
    uint64_t v2 = *(void **)(v0 + 144);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    id v3 = v2;
    *(void *)(v0 + 184) = [v3 fetchProperties];
    id v4 = [v3 bundleIdentifier];
    if (v4)
    {
      uint64_t v5 = v4;
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v4);
      uint64_t v8 = v7;
    }

    else
    {
      uint64_t v6 = 0LL;
      uint64_t v8 = 0LL;
    }

    *(void *)(v0 + 192) = v6;
    *(void *)(v0 + 200) = v8;
    uint64_t v14 = *(void **)(v0 + 144);
    uint64_t v15 = *(void *)(v0 + 152);
    *(_BYTE *)(v0 + 223) = [v14 sendInitialBeacons];
    id v16 = [v14 filterBeaconUUIDs];
    *(void *)(v0 + 208) = static Array._unconditionallyBridgeFromObjectiveC(_:)(v16, v15);

    return swift_task_switch(sub_100299D78, *(void *)(v0 + 176), 0LL);
  }

  else
  {
    uint64_t v9 = *(void (**)(void, uint64_t))(v0 + 120);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    unint64_t v10 = sub_10014A2C0();
    uint64_t v11 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v10, 0LL, 0LL);
    *uint64_t v12 = 11;
    v9(0LL, v11);
    swift_errorRelease(v11);
    swift_task_dealloc(*(void *)(v0 + 160));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100299D78()
{
  uint64_t v2 = *(void *)(v0 + 200);
  uint64_t v1 = *(void *)(v0 + 208);
  char v3 = *(_BYTE *)(v0 + 223);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 176);
  uint64_t v7 = *(void *)(v0 + 160);
  uint64_t v8 = *(void **)(v0 + 136);
  type metadata accessor for WorkItemQueue.WorkItem(0LL);
  uint64_t v9 = swift_allocObject(&unk_10094DE20, 72LL, 7LL);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)(v9 + 24) = v8;
  *(void *)(v9 + 32) = v4;
  *(void *)(v9 + sub_10016CF88(v0 + 40) = v5;
  *(void *)(v9 + 48) = v2;
  *(_BYTE *)(v9 + 56) = v3;
  *(_DWORD *)(v9 + 57) = *(_DWORD *)(v0 + 216);
  *(_DWORD *)(v9 + 60) = *(_DWORD *)(v0 + 219);
  *(void *)(v9 + 64) = v1;
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v1);
  swift_retain();
  UUID.init()(v8);
  uint64_t v10 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)( v7,  &unk_1009A7E70,  v9,  &unk_1009AE400,  0LL);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v10);
  swift_release();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100299EA0, 0LL, 0LL);
}

uint64_t sub_100299EA0()
{
  uint64_t v1 = *(void *)(v0 + 176);
  (*(void (**)(uint64_t, void))(v0 + 120))(1LL, 0LL);
  swift_release(v1);
  swift_task_dealloc(*(void *)(v0 + 160));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100299EEC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v21 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)v20 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = swift_allocObject(&unk_10094D600, 24LL, 7LL);
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = &_swiftEmptySetSingleton;
  v20[1] = *(void *)(v2 + 120);
  uint64_t v13 = (void *)swift_allocObject(&unk_10094D628, 48LL, 7LL);
  v13[2] = v2;
  v13[3] = v12;
  v13[4] = a1;
  v13[5] = a2;
  aBlock[4] = sub_1002D75B8;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10094D640;
  uint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  uint64_t v15 = swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  double v22 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v18 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v22, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v7, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v21 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  swift_release();
  return swift_release();
}

uint64_t sub_10029A12C(uint64_t a1, uint64_t a2, void (*a3)(__n128), uint64_t a4)
{
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009AE470);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = *(void *)(a1 + 256);
  unint64_t v32 = (void *)(a2 + 16);
  uint64_t v15 = sub_100508644();
  uint64_t v16 = v15[2];
  if (v16)
  {
    v28[1] = a4;
    uint64_t v29 = a3;
    v28[0] = v15;
    uint64_t v17 = (uint64_t)(v15 + 4);
    uint64_t v18 = &qword_1009B0530;
    uint64_t v30 = v14;
    do
    {
      sub_100013044(v17, (uint64_t)v34);
      uint64_t v19 = sub_100004AEC(v18);
      char v20 = swift_dynamicCast(v10, v34, v19, v11, 6LL);
      uint64_t v21 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
      if ((v20 & 1) != 0)
      {
        v21(v10, 0LL, 1LL, v11);
        sub_10002218C((uint64_t)v10, (uint64_t)v14, type metadata accessor for SharedBeaconRecord);
        if ((v14[*(int *)(v11 + 52)] & 1) == 0)
        {
          double v22 = v18;
          id v23 = sub_10014795C((uint64_t)v14, v31);
          swift_beginAccess(v32, v34, 33LL, 0LL);
          uint64_t v24 = v23;
          uint64_t v18 = v22;
          sub_1000BFFC0((Swift::Int *)&v33, v24);
          uint64_t v14 = v30;
          swift_endAccess(v34);
        }

        sub_100018C68((uint64_t)v14, type metadata accessor for SharedBeaconRecord);
      }

      else
      {
        v21(v10, 1LL, 1LL, v11);
        sub_100015794((uint64_t)v10, (uint64_t *)&unk_1009AE470);
      }

      v17 += 40LL;
      --v16;
    }

    while (v16);
    swift_bridgeObjectRelease();
    a3 = v29;
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  os_log_type_t v25 = v32;
  swift_beginAccess(v32, v34, 0LL, 0LL);
  __n128 v26 = swift_bridgeObjectRetain(*v25);
  a3(v26);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10029A378(uint64_t a1, uint64_t (*a2)(void *), uint64_t a3, uint64_t a4)
{
  uint64_t v44 = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v43 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v42 = (char *)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v40 = *(void *)(v9 - 8);
  uint64_t v41 = v9;
  __chkstk_darwin(v9);
  id v39 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v38 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v38 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  char v20 = (char *)&v38 - v19;
  if (*(void *)(a1 + 32))
  {
    uint64_t v38 = v7;
    swift_retain();
    uint64_t v21 = sub_100654240(a4);
    type metadata accessor for Transaction(0LL);
    uint64_t v22 = swift_allocObject(&unk_10094D588, 24LL, 7LL);
    *(void *)(v22 + swift_weakDestroy(v0 + 16) = v21;
    swift_bridgeObjectRetain(v21);
    static Transaction.asyncTask(name:block:)("AdvertisementChangedAnalytics", 29LL, 2LL, &unk_1009A7DD0, v22);
    swift_release();
    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    static Date.trustedNow.getter((uint64_t)v20);
    uint64_t v23 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL))(v20, 0LL, 1LL, v23);
    sub_100024954();
    sub_10001581C((uint64_t)v20, (uint64_t)v18, (uint64_t *)&unk_10099D720);
    sub_1006208A0((uint64_t)v18);
    swift_release();
    sub_100015794((uint64_t)v20, (uint64_t *)&unk_10099D720);
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    (*(void (**)(char *, void, uint64_t))(v12 + 104))( v14,  enum case for DispatchQoS.QoSClass.default(_:),  v11);
    uint64_t v24 = (void *)static OS_dispatch_queue.global(qos:)(v14);
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    os_log_type_t v25 = (void *)swift_allocObject(&unk_10094D5B0, 40LL, 7LL);
    v25[2] = v44;
    v25[3] = a3;
    v25[4] = v21;
    aBlock[4] = sub_1001FA824;
    aBlock[5] = v25;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    aBlock[3] = &unk_10094D5C8;
    __n128 v26 = _Block_copy(aBlock);
    uint64_t v27 = swift_retain();
    uint64_t v28 = v39;
    static DispatchQoS.unspecified.getter(v27);
    uint64_t v45 = _swiftEmptyArrayStorage;
    uint64_t v29 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v30 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v31 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    unint64_t v32 = v42;
    uint64_t v33 = v38;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v30, v31, v38, v29);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v28, v32, v26);
    _Block_release(v26);
    swift_release();

    (*(void (**)(char *, uint64_t))(v43 + 8))(v32, v33);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v28, v41);
    return swift_release();
  }

  else
  {
    uint64_t v35 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    id v36 = (void *)static OS_os_log.default.getter(v35);
    uint64_t v37 = static os_log_type_t.default.getter(v36);
    os_log(_:dso:log:type:_:)( "No localBeaconingManager",  24LL,  2LL,  &_mh_execute_header,  v36,  v37,  _swiftEmptyArrayStorage);

    return v44(_swiftEmptyArrayStorage);
  }

uint64_t sub_10029A7F8(uint64_t a1)
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = a1;
  return swift_task_switch(sub_10029A810, 0LL, 0LL);
}

uint64_t sub_10029A810()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for AnalyticsEvent(0LL);
  char v3 = (char *)swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  *(void *)(v0 + 24) = v3;
  swift_defaultActor_initialize(v3);
  unint64_t v4 = sub_10041271C((uint64_t)_swiftEmptyArrayStorage);
  *((void *)v3 + 14) = v4;
  UUID.init()(v4);
  uint64_t v5 = &v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL);
  v7(v5, 1LL, 1LL, v6);
  v7(&v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1LL, 1LL, v6);
  *((void *)v3 + 15) = 0xD000000000000032LL;
  *((void *)v3 + swift_weakDestroy(v0 + 16) = 0x800000010085BD70LL;
  swift_bridgeObjectRetain(v1);
  return swift_task_switch(sub_10029A918, v3, 0LL);
}

uint64_t sub_10029A918()
{
  return swift_task_switch(sub_10029A980, 0LL, 0LL);
}

uint64_t sub_10029A980()
{
  uint64_t v1 = type metadata accessor for AnalyticsPublisher();
  uint64_t v2 = swift_allocObject(v1, 112LL, 15LL);
  v0[4] = v2;
  swift_defaultActor_initialize(v2);
  char v3 = (uint64_t **)swift_task_alloc(dword_1009BDE0C);
  v0[5] = (uint64_t)v3;
  *char v3 = v0;
  v3[1] = (uint64_t *)sub_10029A9EC;
  return sub_100713F88(v0[3]);
}

uint64_t sub_10029A9EC()
{
  return swift_task_switch(sub_10029AA48, 0LL, 0LL);
}

uint64_t sub_10029AA48()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_10029AA78(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for HashAlgorithm(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v25[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_100022898(0LL, &qword_1009AF510, &OBJC_CLASS___NSString_ptr);
  uint64_t v6 = (void *)NSString.init(stringLiteral:)("", 0LL, 2LL);
  if (!((unint64_t)a1 >> 62))
  {
    uint64_t v7 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(a1);
    if (v7) {
      goto LABEL_3;
    }
LABEL_11:
    swift_bridgeObjectRelease();
    goto LABEL_12;
  }

  if (a1 < 0) {
    uint64_t v21 = a1;
  }
  else {
    uint64_t v21 = a1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(a1);
  if (!_CocoaArrayWrapper.endIndex.getter(v21)) {
    goto LABEL_11;
  }
LABEL_3:
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    id v8 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a1);
    goto LABEL_6;
  }

  if (*(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    id v8 = *(id *)(a1 + 32);
LABEL_6:
    uint64_t v9 = v8;
    swift_bridgeObjectRelease();
    id v10 = [v9 key];

    uint64_t v11 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v10);
    unint64_t v13 = v12;

    sub_10001736C(v11, v13);
    sub_1001782E4(v11, v13);
    uint64_t v15 = v26;
    unint64_t v14 = v27;
    unint64_t v24 = v27;
    (*(void (**)(char *, void, uint64_t))(v3 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v2);
    uint64_t v16 = Data.hash(algorithm:)(v5, v15, v14);
    unint64_t v18 = v17;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
    uint64_t v26 = v16;
    unint64_t v27 = v18;
    unint64_t v19 = sub_10009BDE4();
    RawRepresentable<>.hexString.getter(&type metadata for HashedAdvertisement, v19);
    sub_100016F9C(v16, v18);
    NSString v20 = String._bridgeToObjectiveC()();

    sub_100016F9C(v11, v13);
    swift_bridgeObjectRelease();
    sub_100016F9C(v15, v24);
    uint64_t v6 = v20;
LABEL_12:
    uint64_t v22 = sub_100004AEC(&qword_1009A0E28);
    uint64_t inited = swift_initStackObject(v22, v25);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(inited + 32) = 0xD000000000000010LL;
    *(void *)(inited + sub_10016CF88(v0 + 40) = 0x800000010085BDB0LL;
    *(void *)(inited + 48) = v6;
    *(_BYTE *)(inited + 56) = 0;
    sub_100412AA4(inited);
    return;
  }

  __break(1u);
}

void *sub_10029AD1C(uint64_t a1, uint64_t a2)
{
  uint64_t v247 = a2;
  uint64_t v264 = _s18ConnectionKeyGroupVMa(0LL);
  uint64_t v242 = *(void *)(v264 - 8);
  __chkstk_darwin(v264);
  uint64_t v263 = (uint64_t *)((char *)&v231 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = sub_100004AEC(&qword_1009A1760);
  __chkstk_darwin(v5);
  uint64_t v232 = (uint64_t)&v231 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DateInterval(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  unsigned __int8 v265 = (char *)&v231 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v262 = type metadata accessor for TimeBasedKey(0LL);
  uint64_t v243 = *(void *)(v262 - 8);
  __chkstk_darwin(v262);
  uint64_t v11 = (char *)&v231 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009A7DB8);
  __chkstk_darwin(v12);
  uint64_t v238 = (uint64_t)&v231 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for LostModeInfoRecord(0LL);
  uint64_t v237 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v231 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC(&qword_1009A4890);
  __chkstk_darwin(v17);
  uint64_t v254 = (char *)&v231 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v245 = type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v241 = *(void *)(v245 - 8);
  __chkstk_darwin(v245);
  uint64_t v240 = (uint64_t)&v231 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for UUID(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v256 = (char *)&v231 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  uint64_t v261 = (char *)&v231 - v24;
  uint64_t v25 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v25);
  unint64_t v27 = (char *)&v231 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v250 = *(void *)(a1 + 16);
  uint64_t v234 = a1;
  if (v250)
  {
    uint64_t v252 = a1 + ((*(unsigned __int8 *)(v21 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    uint64_t v251 = *(void *)(v21 + 72);
    BOOL v259 = *(void (**)(char *, uint64_t, uint64_t))(v21 + 16);
    swift_bridgeObjectRetain(a1);
    uint64_t v28 = 0LL;
    uint64_t v270 = 0LL;
    int v258 = _swiftEmptyDictionarySingleton;
    __int128 v239 = xmmword_1007F8BB0;
    __int128 v233 = xmmword_1007E4750;
    __int128 v244 = xmmword_1007E67D0;
    uint64_t v249 = v2;
    uint64_t v266 = v7;
    uint64_t v268 = v8;
    unint64_t v269 = v11;
    uint64_t v236 = v14;
    v235 = v16;
    uint64_t v257 = v20;
    uint64_t v29 = (uint64_t)v254;
    uint64_t v255 = v21;
    uint64_t v246 = v27;
    while (1)
    {
      uint64_t v260 = v28;
      v259(v27, v252 + v251 * v28, v20);
      unint64_t v248 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v21 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v248)(v27, 0LL, 1LL, v20);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v27, 1LL, v20) == 1)
      {
        id v200 = v258;
        goto LABEL_61;
      }

      uint64_t v30 = (uint64_t)v261;
      (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v261, v27, v20);
      uint64_t v31 = *(void *)(v2 + 256);
      sub_100504C28(v30, (uint64_t)&v274);
      if (v275) {
        break;
      }
      sub_100015794((uint64_t)&v274, (uint64_t *)&unk_1009A9C40);
      sub_10050BDEC(v30, v29);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v241 + 48))(v29, 1LL, v245) != 1)
      {
        uint64_t v129 = sub_10002218C(v29, v240, type metadata accessor for WildModeAssociationRecord);
        uint64_t v130 = static os_log_type_t.default.getter(v129);
        if (qword_10099B788 != -1) {
          swift_once(&qword_10099B788, sub_1006517A0);
        }
        uint64_t v131 = qword_100A2B098;
        uint64_t v132 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v133 = swift_allocObject(v132, 72LL, 7LL);
        *(_OWORD *)(v133 + swift_weakDestroy(v0 + 16) = v244;
        uint64_t v134 = UUID.uuidString.getter(v133);
        uint64_t v136 = v135;
        *(void *)(v133 + 56) = &type metadata for String;
        *(void *)(v133 + 64) = sub_1000226F4();
        *(void *)(v133 + 32) = v134;
        *(void *)(v133 + sub_10016CF88(v0 + 40) = v136;
        os_log(_:dso:log:_:_:)(v130, &_mh_execute_header, v131, "#Durian: UUID %@ is a UT record", 31LL, 2LL, v133);
        uint64_t v137 = swift_bridgeObjectRelease();
        uint64_t v138 = MACAddress.data.getter(v137);
        unint64_t v140 = v139;
        id v141 = objc_allocWithZone(&OBJC_CLASS___SPBeaconingKey);
        Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
        Class v143 = Data._bridgeToObjectiveC()().super.isa;
        id v144 = [v141 initWithDateInterval:isa key:v143];

        sub_100016F9C(v138, v140);
        id v145 = objc_allocWithZone(&OBJC_CLASS___SPCommandKeys);
        id v146 = v144;
        Class v147 = Data._bridgeToObjectiveC()().super.isa;
        Class v148 = Data._bridgeToObjectiveC()().super.isa;
        Class v149 = Data._bridgeToObjectiveC()().super.isa;
        id v150 = [v145 initWithBeaconingKey:v146 commandKey:v147 connectionToken:v148 nearbyToken:v149];

        uint64_t v151 = (uint64_t)v256;
        uint64_t v152 = v261;
        uint64_t v153 = v257;
        v259(v256, (uint64_t)v261, v257);
        uint64_t v154 = sub_100004AEC(&qword_1009B0610);
        uint64_t v155 = swift_allocObject(v154, 40LL, 7LL);
        *(_OWORD *)(v155 + swift_weakDestroy(v0 + 16) = v239;
        *(void *)(v155 + 32) = v150;
        *(void *)&__int128 v274 = v155;
        specialized Array._endMutation()(v155);
        uint64_t v156 = v274;
        id v157 = v150;
        id v158 = v258;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v258);
        *(void *)&__int128 v274 = v158;
        sub_10005E1C4(v156, v151, isUniquelyReferenced_nonNull_native);
        int v258 = (void *)v274;
        swift_bridgeObjectRelease();
        uint64_t v160 = v255;
        uint64_t v161 = *(void (**)(uint64_t, uint64_t))(v255 + 8);
        v161(v151, v153);

        uint64_t v20 = v153;
        uint64_t v21 = v160;
        sub_100018C68(v240, type metadata accessor for WildModeAssociationRecord);
        v161((uint64_t)v152, v153);
        uint64_t v11 = v269;
LABEL_49:
        unint64_t v27 = v246;
        goto LABEL_50;
      }

      sub_100015794(v29, &qword_1009A4890);
      int v52 = sub_100577028(v30);
      if (v52[2])
      {
        uint64_t v53 = v237;
        uint64_t v54 = v238;
        sub_10001DC4C( (uint64_t)v52 + ((*(unsigned __int8 *)(v237 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v237 + 80)),  v238,  type metadata accessor for LostModeInfoRecord);
        uint64_t v55 = v53;
        uint64_t v56 = 0LL;
      }

      else
      {
        uint64_t v56 = 1LL;
        uint64_t v55 = v237;
        uint64_t v54 = v238;
      }

      uint64_t v162 = v236;
      uint64_t v163 = v55;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v55 + 56))(v54, v56, 1LL, v236);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v163 + 48))(v54, 1LL, v162) != 1)
      {
        uint64_t v164 = (uint64_t)v235;
        sub_10002218C(v54, (uint64_t)v235, type metadata accessor for LostModeInfoRecord);
        uint64_t v165 = (uint64_t *)(v164 + *(int *)(v162 + 44));
        uint64_t v166 = *v165;
        unint64_t v167 = v165[1];
        uint64_t v168 = v20;
        id v169 = objc_allocWithZone(&OBJC_CLASS___SPBeaconingKey);
        sub_10001736C(v166, v167);
        Class v170 = DateInterval._bridgeToObjectiveC()().super.isa;
        Class v171 = Data._bridgeToObjectiveC()().super.isa;
        id v172 = [v169 initWithDateInterval:v170 key:v171];

        sub_100016F9C(v166, v167);
        id v173 = objc_allocWithZone(&OBJC_CLASS___SPCommandKeys);
        id v174 = v172;
        Class v175 = Data._bridgeToObjectiveC()().super.isa;
        Class v176 = Data._bridgeToObjectiveC()().super.isa;
        Class v177 = Data._bridgeToObjectiveC()().super.isa;
        id v178 = [v173 initWithBeaconingKey:v174 commandKey:v175 connectionToken:v176 nearbyToken:v177];

        uint64_t v179 = (uint64_t)v256;
        uint64_t v180 = v261;
        uint64_t v181 = v168;
        v259(v256, (uint64_t)v261, v168);
        uint64_t v182 = sub_100004AEC(&qword_1009B0610);
        uint64_t v183 = swift_allocObject(v182, 40LL, 7LL);
        *(_OWORD *)(v183 + swift_weakDestroy(v0 + 16) = v239;
        *(void *)(v183 + 32) = v178;
        *(void *)&__int128 v274 = v183;
        specialized Array._endMutation()(v183);
        uint64_t v184 = v274;
        id v267 = v178;
        uint64_t v185 = v258;
        char v186 = swift_isUniquelyReferenced_nonNull_native(v258);
        *(void *)&__int128 v274 = v185;
        sub_10005E1C4(v184, v179, v186);
        int v258 = (void *)v274;
        swift_bridgeObjectRelease();
        os_log_type_t v187 = *(uint64_t (**)(uint64_t, uint64_t))(v255 + 8);
        uint64_t v188 = v187(v179, v181);
        uint64_t v189 = static os_log_type_t.default.getter(v188);
        if (qword_10099B778 != -1) {
          swift_once(&qword_10099B778, sub_1006516DC);
        }
        uint64_t v190 = qword_100A2B088;
        uint64_t v191 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v192 = swift_allocObject(v191, 112LL, 7LL);
        *(_OWORD *)(v192 + swift_weakDestroy(v0 + 16) = v233;
        uint64_t v193 = UUID.uuidString.getter(v192);
        unint64_t v194 = v180;
        uint64_t v196 = v195;
        *(void *)(v192 + 56) = &type metadata for String;
        unint64_t v197 = sub_1000226F4();
        *(void *)(v192 + 32) = v193;
        *(void *)(v192 + sub_10016CF88(v0 + 40) = v196;
        *(void *)(v192 + 96) = &type metadata for Int;
        *(void *)(v192 + 104) = &protocol witness table for Int;
        *(void *)(v192 + 64) = v197;
        *(void *)(v192 + 72) = 1LL;
        os_log(_:dso:log:_:_:)( v189,  &_mh_execute_header,  v190,  "UUID %@ is a lostMode record with %d records",  44LL,  2LL,  v192);

        swift_bridgeObjectRelease();
        sub_100018C68((uint64_t)v235, type metadata accessor for LostModeInfoRecord);
        uint64_t v20 = v257;
        v187((uint64_t)v194, v257);
        uint64_t v2 = v249;
        uint64_t v7 = v266;
        uint64_t v11 = v269;
        uint64_t v21 = v255;
        goto LABEL_51;
      }

      uint64_t v21 = v255;
      (*(void (**)(char *, uint64_t))(v255 + 8))(v261, v20);
      sub_100015794(v54, &qword_1009A7DB8);
LABEL_50:
      uint64_t v2 = v249;
LABEL_51:
      uint64_t v28 = v260 + 1;
      uint64_t v29 = (uint64_t)v254;
      if (v260 + 1 == v250)
      {
        id v200 = v258;
        v248(v27, 1LL, 1LL, v20, v128);
        goto LABEL_61;
      }
    }

    sub_100012EC0(&v274, (uint64_t)&v273);
    sub_100012EC0(&v273, (uint64_t)&v274);
    uint64_t v32 = v275;
    uint64_t v33 = v276;
    id v34 = sub_100012ED8(&v274, v275);
    uint64_t v35 = sub_10054CE6C((uint64_t)v34, v247, 0, 0, 0, v31, v32, v33);
    uint64_t v38 = (void *)v35;
    if (v37)
    {
      if (v37 != 1)
      {
        uint64_t v39 = static os_log_type_t.default.getter(v35);
        if (qword_10099B6F8 != -1) {
          swift_once(&qword_10099B6F8, sub_100651098);
        }
        uint64_t v40 = qword_100A2B008;
        uint64_t v41 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v42 = swift_allocObject(v41, 72LL, 7LL);
        *(_OWORD *)(v42 + swift_weakDestroy(v0 + 16) = v244;
        uint64_t v44 = v275;
        uint64_t v43 = v276;
        sub_100012ED8(&v274, v275);
        uint64_t v45 = v256;
        uint64_t v46 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v43 + 8) + 8LL) + 32LL))(v44);
        uint64_t v47 = UUID.uuidString.getter(v46);
        uint64_t v49 = v48;
        uint64_t v50 = v45;
        uint64_t v51 = v257;
        (*(void (**)(char *, uint64_t))(v21 + 8))(v50, v257);
        *(void *)(v42 + 56) = &type metadata for String;
        *(void *)(v42 + 64) = sub_1000226F4();
        *(void *)(v42 + 32) = v47;
        *(void *)(v42 + sub_10016CF88(v0 + 40) = v49;
        uint64_t v20 = v51;
        swift_bridgeObjectRelease();
        uint64_t v38 = _swiftEmptyArrayStorage;
      }
    }

    else
    {
      uint64_t v57 = v36;
      swift_bridgeObjectRetain(v35);
      uint64_t v59 = static os_log_type_t.default.getter(v58);
      id v253 = v38;
      if (qword_10099B6F8 != -1) {
        swift_once(&qword_10099B6F8, sub_100651098);
      }
      uint64_t v60 = qword_100A2B008;
      uint64_t v61 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v62 = swift_allocObject(v61, 72LL, 7LL);
      *(_OWORD *)(v62 + swift_weakDestroy(v0 + 16) = v244;
      uint64_t v64 = v275;
      uint64_t v63 = v276;
      sub_100012ED8(&v274, v275);
      uint64_t v65 = v256;
      uint64_t v66 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v63 + 8) + 8LL) + 32LL))(v64);
      uint64_t v67 = UUID.uuidString.getter(v66);
      uint64_t v69 = v68;
      uint64_t v70 = v65;
      uint64_t v71 = v257;
      (*(void (**)(char *, uint64_t))(v21 + 8))(v70, v257);
      *(void *)(v62 + 56) = &type metadata for String;
      *(void *)(v62 + 64) = sub_1000226F4();
      *(void *)(v62 + 32) = v67;
      *(void *)(v62 + sub_10016CF88(v0 + 40) = v69;
      uint64_t v72 = v60;
      uint64_t v20 = v71;
      swift_bridgeObjectRelease();
      uint64_t v38 = v253;
      sub_100117B2C((uint64_t)v253, v57, 0);
      uint64_t v11 = v269;
    }

    uint64_t v73 = v38[2];
    if (v73)
    {
      unint64_t v272 = (unint64_t)_swiftEmptyArrayStorage;
      specialized ContiguousArray.reserveCapacity(_:)(v73);
      unint64_t v74 = (*(unsigned __int8 *)(v243 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v243 + 80);
      id v253 = v38;
      id v267 = *(id *)(v243 + 72);
      uint64_t v75 = v265;
      sub_10001DC4C((uint64_t)v38 + v74, (uint64_t)v11, type metadata accessor for TimeBasedKey);
      uint64_t v76 = v262;
      (*(void (**)(char *, char *, uint64_t))(v8 + 16))(v75, &v11[*(int *)(v262 + 20)], v7);
      uint64_t v77 = &v11[*(int *)(v76 + 24)];
      uint64_t v79 = *((void *)v77 + 2);
      unint64_t v78 = *((void *)v77 + 3);
      sub_10001736C(v79, v78);
      uint64_t v80 = v270;
      sub_1004DFE7C(v79, v78);
      uint64_t v270 = v80;
      if (!v80)
      {
        uint64_t v82 = v81;
        *(void *)&__int128 v273 = 57LL;
        uint64_t v83 = type metadata accessor for __DataStorage(0LL);
        swift_allocObject(v83, *(unsigned int *)(v83 + 48), *(unsigned __int16 *)(v83 + 52));
        uint64_t v84 = __DataStorage.init(length:)(57LL);
        uint64_t v85 = swift_isUniquelyReferenced_nonNull_native(v84);
        if ((v85 & 1) == 0)
        {
          uint64_t v86 = __DataStorage._bytes.getter(v85);
          if (v86)
          {
            uint64_t v87 = v86;
            uint64_t v88 = __DataStorage._offset.getter();
            if (!__OFSUB__(0LL, v88))
            {
              uint64_t v89 = v87 - v88;
              goto LABEL_23;
            }

            __break(1u);
LABEL_65:
            __break(1u);
            JUMPOUT(0x10029C288LL);
          }

          uint64_t v89 = 0LL;
LABEL_23:
          swift_allocObject(v83, *(unsigned int *)(v83 + 48), *(unsigned __int16 *)(v83 + 52));
          uint64_t v90 = __DataStorage.init(bytes:length:copy:deallocator:offset:)(v89, 57LL, 1LL, 0LL, 0LL, 0LL);
          uint64_t v85 = swift_release();
          uint64_t v84 = v90;
        }

        uint64_t v91 = __DataStorage._bytes.getter(v85);
        if (!v91) {
          goto LABEL_65;
        }
        uint64_t v92 = v91;
        uint64_t v93 = __DataStorage._offset.getter();
        if (__OFSUB__(0LL, v93))
        {
          __break(1u);
          goto LABEL_63;
        }

        uint64_t v94 = v92 - v93;
        __DataStorage._length.getter();
        uint64_t v95 = CCECCryptorExportKey(2LL, v94, &v273, 0LL, v82);
        if (!(_DWORD)v95)
        {
          if ((v273 & 0x8000000000000000LL) == 0)
          {
            else {
              unint64_t v96 = v273;
            }
            if (v96)
            {
              if (v96 <= 0xE)
              {
                swift_retain();
                sub_1002C3D3C(0x3900000000LL, v84, v96);
                uint64_t v99 = v98;
                swift_release_n(v84, 2LL);
                uint64_t v97 = v99 & 0xFFFFFFFFFFFFFFLL;
              }

              else
              {
                uint64_t v97 = v84 | 0x4000000000000000LL;
              }

              CCECCryptorRelease(v82);
              sub_100016F9C(v79, v78);
              __asm { BR              X9 }
            }

            swift_release();
            CCECCryptorRelease(v82);
            sub_100016F9C(v79, v78);
            unint64_t v215 = sub_100117AD0();
            uint64_t v216 = swift_allocError(&type metadata for KeyRepresentableError, v215, 0LL, 0LL);
            *(void *)uint64_t v217 = 28LL;
            *(void *)(v217 + 8) = 0LL;
            *(_BYTE *)(v217 + swift_weakDestroy(v0 + 16) = 0;
            swift_willThrow(v216);
            unint64_t v78 = 0xC000000000000000LL;
            uint64_t v79 = 0LL;
            goto LABEL_76;
          }

uint64_t sub_10029C684(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v45 = a1;
  uint64_t v46 = a4;
  uint64_t v43 = a2;
  uint64_t v44 = a3;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v51 = *(void *)(v6 - 8);
  uint64_t v52 = v6;
  __chkstk_darwin(v6);
  uint64_t v50 = &v41[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v48 = *(void *)(v8 - 8);
  uint64_t v49 = v8;
  __chkstk_darwin(v8);
  uint64_t v47 = &v41[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = type metadata accessor for DateInterval(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v14 = &v41[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  unsigned int v42 = static os_log_type_t.info.getter(v13);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v15 = qword_100A2B008;
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v16, 112LL, 7LL);
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  aBlock[0] = *v5;
  uint64_t v18 = sub_100004AEC(&qword_1009A7D50);
  uint64_t v19 = String.init<A>(describing:)(aBlock, v18);
  uint64_t v21 = v20;
  *(void *)(v17 + 56) = &type metadata for String;
  unint64_t v22 = sub_1000226F4();
  *(void *)(v17 + 32) = v19;
  *(void *)(v17 + sub_10016CF88(v0 + 40) = v21;
  *(void *)(v17 + 96) = &type metadata for String;
  *(void *)(v17 + 104) = v22;
  *(void *)(v17 + 64) = v22;
  *(void *)(v17 + 72) = 0xD000000000000029LL;
  *(void *)(v17 + 80) = 0x800000010085BBB0LL;
  os_log(_:dso:log:_:_:)(v42, &_mh_execute_header, v15, "%@: %@", 6LL, 2LL, v17);
  swift_bridgeObjectRelease();
  uint64_t v23 = swift_allocObject(&unk_10094D470, 24LL, 7LL);
  swift_weakInit(v23 + 16, v5);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(&v41[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)], v43, v10);
  uint64_t v24 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v25 = (v24 + 32) & ~v24;
  unint64_t v26 = (v12 + v25 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v27 = swift_allocObject(&unk_10094D498, v26 + 16, v24 | 7);
  uint64_t v28 = v45;
  *(void *)(v27 + swift_weakDestroy(v0 + 16) = v23;
  *(void *)(v27 + 24) = v28;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v11 + 32))(v27 + v25, v14, v10);
  uint64_t v29 = (void *)(v27 + v26);
  uint64_t v30 = v46;
  *uint64_t v29 = v44;
  v29[1] = v30;
  aBlock[4] = sub_1002D749C;
  aBlock[5] = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10094D4B0;
  uint64_t v31 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain(v28);
  uint64_t v32 = swift_retain();
  uint64_t v33 = v47;
  static DispatchQoS.unspecified.getter(v32);
  uint64_t v53 = _swiftEmptyArrayStorage;
  uint64_t v34 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v35 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v36 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  char v37 = v50;
  uint64_t v38 = v35;
  uint64_t v39 = v52;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v53, v38, v36, v52, v34);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v33, v37, v31);
  _Block_release(v31);
  (*(void (**)(_BYTE *, uint64_t))(v51 + 8))(v37, v39);
  (*(void (**)(_BYTE *, uint64_t))(v48 + 8))(v33, v49);
  swift_release();
  return swift_release();
}

void sub_10029CA48(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t), uint64_t a5)
{
  v67[1] = a5;
  uint64_t v68 = a4;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v81 = (char *)v67 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v78 = sub_100004AEC(&qword_1009A7DB0);
  uint64_t v11 = __chkstk_darwin(v78);
  uint64_t v77 = (char *)v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)v67 - v14;
  __chkstk_darwin(v13);
  uint64_t v76 = (char *)v67 - v16;
  a1 += 16LL;
  swift_beginAccess(a1, v83, 0LL, 0LL);
  if (swift_weakLoadStrong(a1))
  {
    uint64_t v17 = (uint64_t)sub_10029AD1C(a2, a3);
    unint64_t v18 = swift_release();
  }

  else
  {
    unint64_t v18 = sub_100413A20((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v17 = v18;
  }

  int64_t v19 = static os_log_type_t.default.getter(v18);
  if (qword_10099B720 != -1) {
LABEL_48:
  }
    swift_once(&qword_10099B720, sub_10065128C);
  os_log(_:dso:log:_:_:)( v19,  &_mh_execute_header,  qword_100A2B030,  "#Durian: Returning keys for command",  35LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v20 = *(void *)(v17 + 64);
  uint64_t v69 = v17 + 64;
  uint64_t v21 = 1LL << *(_BYTE *)(v17 + 32);
  uint64_t v22 = -1LL;
  if (v21 < 64) {
    uint64_t v22 = ~(-1LL << v21);
  }
  int64_t v19 = v22 & v20;
  int64_t v70 = (unint64_t)(v21 + 63) >> 6;
  swift_bridgeObjectRetain(v17);
  int64_t v23 = 0LL;
  __int128 v72 = xmmword_1007E4750;
  uint64_t v74 = v17;
  uint64_t v75 = v9;
  uint64_t v73 = v15;
  uint64_t v71 = v8;
  while (1)
  {
    if (v19)
    {
      uint64_t v79 = (v19 - 1) & v19;
      int64_t v80 = v23;
      unint64_t v40 = __clz(__rbit64(v19)) | (v23 << 6);
      goto LABEL_29;
    }

    int64_t v41 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      goto LABEL_47;
    }
    if (v41 >= v70)
    {
LABEL_45:
      swift_release();
      v68(v17);
      swift_bridgeObjectRelease();
      return;
    }

    unint64_t v42 = *(void *)(v69 + 8 * v41);
    int64_t v43 = v23 + 1;
    if (!v42)
    {
      int64_t v43 = v23 + 2;
      if (v23 + 2 >= v70) {
        goto LABEL_45;
      }
      unint64_t v42 = *(void *)(v69 + 8 * v43);
      if (!v42)
      {
        int64_t v43 = v23 + 3;
        if (v23 + 3 >= v70) {
          goto LABEL_45;
        }
        unint64_t v42 = *(void *)(v69 + 8 * v43);
        if (!v42)
        {
          int64_t v43 = v23 + 4;
          if (v23 + 4 >= v70) {
            goto LABEL_45;
          }
          unint64_t v42 = *(void *)(v69 + 8 * v43);
          if (!v42)
          {
            int64_t v43 = v23 + 5;
            if (v23 + 5 >= v70) {
              goto LABEL_45;
            }
            unint64_t v42 = *(void *)(v69 + 8 * v43);
            if (!v42) {
              break;
            }
          }
        }
      }
    }

uint64_t sub_10029D0E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v34 = a1;
  uint64_t v35 = a3;
  uint64_t v33 = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v38 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v36 = *(void *)(v8 - 8);
  uint64_t v37 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = static os_log_type_t.info.getter(v9);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v13 = qword_100A2B008;
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v15 = swift_allocObject(v14, 112LL, 7LL);
  *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  aBlock[0] = *v3;
  uint64_t v16 = sub_100004AEC(&qword_1009A7D50);
  uint64_t v17 = String.init<A>(describing:)(aBlock, v16);
  uint64_t v19 = v18;
  *(void *)(v15 + 56) = &type metadata for String;
  unint64_t v20 = sub_1000226F4();
  *(void *)(v15 + 32) = v17;
  *(void *)(v15 + sub_10016CF88(v0 + 40) = v19;
  *(void *)(v15 + 96) = &type metadata for String;
  *(void *)(v15 + 104) = v20;
  *(void *)(v15 + 64) = v20;
  *(void *)(v15 + 72) = 0xD00000000000001CLL;
  *(void *)(v15 + 80) = 0x800000010085BCC0LL;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "%@: %@", 6LL, 2LL, v15);
  swift_bridgeObjectRelease();
  uint64_t v21 = swift_allocObject(&unk_10094D470, 24LL, 7LL);
  swift_weakInit(v21 + 16, v4);
  uint64_t v22 = (void *)swift_allocObject(&unk_10094D4E8, 48LL, 7LL);
  uint64_t v23 = v33;
  uint64_t v24 = v34;
  v22[2] = v21;
  v22[3] = v24;
  uint64_t v25 = v35;
  v22[4] = v23;
  v22[5] = v25;
  aBlock[4] = sub_1002D74F8;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10094D500;
  uint64_t v26 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain(v24);
  uint64_t v27 = swift_retain();
  static DispatchQoS.unspecified.getter(v27);
  uint64_t v39 = _swiftEmptyArrayStorage;
  uint64_t v28 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v29 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v30 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v29, v30, v5, v28);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v11, v7, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v36 + 8))(v11, v37);
  swift_release();
  return swift_release();
}

void sub_10029D414(uint64_t a1, uint64_t a2, void (*a3)(void *), uint64_t a4)
{
  uint64_t v76 = a4;
  uint64_t v77 = a3;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v89 = *(void *)(v6 - 8);
  uint64_t v90 = v6;
  __chkstk_darwin(v6);
  uint64_t v88 = (char *)&v76 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v83 = sub_100004AEC(&qword_1009A7DB0);
  uint64_t v8 = __chkstk_darwin(v83);
  uint64_t v82 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v87 = (uint64_t)&v76 - v11;
  __chkstk_darwin(v10);
  uint64_t v81 = (char *)&v76 - v12;
  uint64_t v13 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v76 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DateInterval(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v76 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a1 += 16LL;
  swift_beginAccess(a1, v93, 0LL, 0LL);
  if (swift_weakLoadStrong(a1))
  {
    static Date.trustedNow.getter((uint64_t)v15);
    DateInterval.init(start:duration:)(v15, 1.0);
    uint64_t v84 = sub_10029AD1C(a2, (uint64_t)v19);
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    unint64_t v20 = swift_release();
  }

  else
  {
    unint64_t v20 = sub_100413A20((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v84 = (void *)v20;
  }

  int64_t v21 = static os_log_type_t.default.getter(v20);
  if (qword_10099B720 != -1) {
LABEL_48:
  }
    swift_once(&qword_10099B720, sub_10065128C);
  os_log(_:dso:log:_:_:)( v21,  &_mh_execute_header,  qword_100A2B030,  "Returning keys for command",  26LL,  2LL,  _swiftEmptyArrayStorage,  v76);
  uint64_t v22 = v84;
  uint64_t v23 = v84[8];
  uint64_t v78 = v84 + 8;
  uint64_t v24 = 1LL << *((_BYTE *)v84 + 32);
  uint64_t v25 = -1LL;
  if (v24 < 64) {
    uint64_t v25 = ~(-1LL << v24);
  }
  int64_t v21 = v25 & v23;
  int64_t v79 = (unint64_t)(v24 + 63) >> 6;
  swift_bridgeObjectRetain(v84);
  int64_t v26 = 0LL;
  __int128 v80 = xmmword_1007E4750;
  while (1)
  {
    if (v21)
    {
      uint64_t v85 = (v21 - 1) & v21;
      int64_t v86 = v26;
      unint64_t v44 = __clz(__rbit64(v21)) | (v26 << 6);
      goto LABEL_29;
    }

    int64_t v45 = v26 + 1;
    if (__OFADD__(v26, 1LL)) {
      goto LABEL_47;
    }
    if (v45 >= v79)
    {
LABEL_45:
      swift_release();
      v77(v22);
      swift_bridgeObjectRelease();
      return;
    }

    unint64_t v46 = v78[v45];
    int64_t v47 = v26 + 1;
    if (!v46)
    {
      int64_t v47 = v26 + 2;
      if (v26 + 2 >= v79) {
        goto LABEL_45;
      }
      unint64_t v46 = v78[v47];
      if (!v46)
      {
        int64_t v47 = v26 + 3;
        if (v26 + 3 >= v79) {
          goto LABEL_45;
        }
        unint64_t v46 = v78[v47];
        if (!v46)
        {
          int64_t v47 = v26 + 4;
          if (v26 + 4 >= v79) {
            goto LABEL_45;
          }
          unint64_t v46 = v78[v47];
          if (!v46)
          {
            int64_t v47 = v26 + 5;
            if (v26 + 5 >= v79) {
              goto LABEL_45;
            }
            unint64_t v46 = v78[v47];
            if (!v46) {
              break;
            }
          }
        }
      }
    }

uint64_t sub_10029DB50@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  uint64_t v49 = a3;
  uint64_t v5 = type metadata accessor for TimeBasedKey(0LL);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (unint64_t *)((char *)&v46 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = __chkstk_darwin(v6);
  __chkstk_darwin(v9);
  unint64_t v13 = *a1 / 0x60uLL;
  uint64_t v48 = *a1;
  if (v48) {
    unint64_t v14 = v13 + 1;
  }
  else {
    unint64_t v14 = 0LL;
  }
  uint64_t v15 = *(void *)(a2 + 16);
  if (v15)
  {
    unint64_t v46 = v12;
    uint64_t v47 = (uint64_t)&v46 - v11;
    uint64_t v16 = a2 + ((*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80));
    uint64_t v17 = *(void *)(v10 + 72);
    swift_bridgeObjectRetain(a2);
    while (1)
    {
      sub_10001DC4C(v16, (uint64_t)v8, type metadata accessor for TimeBasedKey);
      if (*v8 == v14) {
        break;
      }
      sub_100018C68((uint64_t)v8, type metadata accessor for TimeBasedKey);
      v16 += v17;
      if (!--v15)
      {
        swift_bridgeObjectRelease();
        goto LABEL_9;
      }
    }

    swift_bridgeObjectRelease();
    unint64_t v28 = v46;
    sub_10002218C((uint64_t)v8, v46, type metadata accessor for TimeBasedKey);
    uint64_t v29 = v28;
    uint64_t v30 = v47;
    sub_10002218C(v29, v47, type metadata accessor for TimeBasedKey);
    uint64_t v31 = (__int128 *)((char *)a1 + *(int *)(v5 + 24));
    __int128 v32 = v31[2];
    __int128 v33 = *v31;
    __int128 v52 = v31[1];
    __int128 v53 = v32;
    __int128 v51 = v33;
    uint64_t v34 = sub_1004DA048();
    unint64_t v46 = v35;
    uint64_t v36 = (__int128 *)(v30 + *(int *)(v5 + 24));
    __int128 v37 = v36[2];
    __int128 v38 = *v36;
    v50[1] = v36[1];
    _OWORD v50[2] = v37;
    v50[0] = v38;
    sub_1002DAC30( v50,  (void (*)(void, void))sub_1002DDE24,  (void (*)(uint64_t, uint64_t))sub_10001736C,  (void (*)(uint64_t, uint64_t))sub_100018BE4);
    uint64_t v39 = sub_1004DA048();
    unint64_t v41 = v40;
    sub_1002DAC30( v50,  (void (*)(void, void))sub_1002DDE20,  (void (*)(uint64_t, uint64_t))sub_100016F9C,  (void (*)(uint64_t, uint64_t))sub_1000182F0);
    id v42 = objc_allocWithZone(&OBJC_CLASS___SPBeaconingKey);
    Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
    Class v44 = Data._bridgeToObjectiveC()().super.isa;
    Class v45 = Data._bridgeToObjectiveC()().super.isa;
    sub_100016F9C(v39, v41);
    id v26 = [v42 initWithDateInterval:isa key:v44 secondaryKey:v45 primaryIndex:v48 secondaryIndex:v14];

    sub_100016F9C(v34, v46);
    uint64_t result = sub_100018C68(v47, type metadata accessor for TimeBasedKey);
  }

  else
  {
LABEL_9:
    uint64_t v18 = (__int128 *)((char *)a1 + *(int *)(v5 + 24));
    __int128 v19 = v18[1];
    __int128 v51 = *v18;
    __int128 v52 = v19;
    __int128 v53 = v18[2];
    uint64_t v20 = sub_1004DA048();
    unint64_t v22 = v21;
    id v23 = objc_allocWithZone(&OBJC_CLASS___SPBeaconingKey);
    Class v24 = DateInterval._bridgeToObjectiveC()().super.isa;
    Class v25 = Data._bridgeToObjectiveC()().super.isa;
    id v26 = [v23 initWithDateInterval:v24 key:v25 secondaryKey:0 primaryIndex:v48 secondaryIndex:0];

    uint64_t result = sub_100016F9C(v20, v22);
  }

  *uint64_t v49 = v26;
  return result;
}

uint64_t sub_10029DEA8(uint64_t a1, uint64_t a2)
{
  uint64_t v135 = a2;
  uint64_t v4 = sub_100004AEC(&qword_1009A7DB8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v131 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for LostModeInfoRecord(0LL);
  uint64_t v8 = *(char **)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v131 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_1009A4890);
  __chkstk_darwin(v11);
  unint64_t v13 = (char *)&v131 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v131 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for UUID(0LL);
  uint64_t v132 = *(void *)(v18 - 8);
  uint64_t v133 = v18;
  __chkstk_darwin(v18);
  uint64_t v131 = (char *)&v131 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v142 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v134 = v2;
  uint64_t v20 = *((void *)v2 + 32);
  sub_100504C28(a1, (uint64_t)&v137);
  if (!v138)
  {
    uint64_t v134 = v8;
    sub_100015794((uint64_t)&v137, (uint64_t *)&unk_1009A9C40);
    sub_10050BDEC(a1, (uint64_t)v13);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v15 + 48))(v13, 1LL, v14) == 1)
    {
      sub_100015794((uint64_t)v13, &qword_1009A4890);
      uint64_t v39 = sub_100577028(a1);
      if (v39[2])
      {
        unint64_t v40 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v134;
        uint64_t v41 = (uint64_t)v6;
        sub_10001DC4C( (uint64_t)v39 + ((v134[80] + 32LL) & ~(unint64_t)v134[80]),  (uint64_t)v6,  type metadata accessor for LostModeInfoRecord);
        uint64_t v42 = 0LL;
      }

      else
      {
        uint64_t v42 = 1LL;
        unint64_t v40 = (void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v134;
        uint64_t v41 = (uint64_t)v6;
      }

      v40[7](v41, v42, 1LL, v7);
      swift_bridgeObjectRelease();
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v40[6])(v41, 1LL, v7) == 1)
      {
        sub_100015794(v41, &qword_1009A7DB8);
        return v142;
      }

      sub_10002218C(v41, (uint64_t)v10, type metadata accessor for LostModeInfoRecord);
      uint64_t v102 = (uint64_t *)&v10[*(int *)(v7 + 44)];
      uint64_t v103 = *v102;
      unint64_t v104 = v102[1];
      id v105 = objc_allocWithZone(&OBJC_CLASS___SPBeaconingKey);
      sub_10001736C(v103, v104);
      Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
      Class v107 = Data._bridgeToObjectiveC()().super.isa;
      id v108 = [v105 initWithDateInterval:isa key:v107];

      sub_100016F9C(v103, v104);
      id v109 = objc_allocWithZone(&OBJC_CLASS___SPCommandKey);
      id v110 = v108;
      Class v111 = Data._bridgeToObjectiveC()().super.isa;
      Class v112 = Data._bridgeToObjectiveC()().super.isa;
      Class v113 = Data._bridgeToObjectiveC()().super.isa;
      id v114 = [v109 initWithBeaconingKey:v110 commandKey:v111 connectionToken:v112 nearbyToken:v113 primaryIndex:0 secondaryIndex:0 type:2];

      uint64_t v116 = static os_log_type_t.default.getter(v115);
      if (qword_10099B778 != -1) {
        swift_once(&qword_10099B778, sub_1006516DC);
      }
      uint64_t v117 = qword_100A2B088;
      uint64_t v118 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v119 = swift_allocObject(v118, 112LL, 7LL);
      *(_OWORD *)(v119 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
      uint64_t v120 = UUID.uuidString.getter(v119);
      uint64_t v122 = v121;
      *(void *)(v119 + 56) = &type metadata for String;
      unint64_t v123 = sub_1000226F4();
      *(void *)(v119 + 32) = v120;
      *(void *)(v119 + sub_10016CF88(v0 + 40) = v122;
      *(void *)(v119 + 96) = &type metadata for Int;
      *(void *)(v119 + 104) = &protocol witness table for Int;
      *(void *)(v119 + 64) = v123;
      *(void *)(v119 + 72) = 1LL;
      os_log(_:dso:log:_:_:)( v116,  &_mh_execute_header,  v117,  "UUID %@ is a lostMode record with %d records",  44LL,  2LL,  v119);
      swift_bridgeObjectRelease();
      id v124 = v114;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v124);
      unint64_t v126 = *(void *)((v142 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v125 = *(void *)((v142 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v126 >= v125 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v125 > 1, v126 + 1, 1LL);
      }
      uint64_t v127 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v126, v124);
      specialized Array._endMutation()(v127);

      uint64_t v100 = type metadata accessor for LostModeInfoRecord;
      uint64_t v101 = (uint64_t)v10;
    }

    else
    {
      uint64_t v74 = sub_10002218C((uint64_t)v13, (uint64_t)v17, type metadata accessor for WildModeAssociationRecord);
      uint64_t v75 = static os_log_type_t.default.getter(v74);
      if (qword_10099B788 != -1) {
        swift_once(&qword_10099B788, sub_1006517A0);
      }
      uint64_t v76 = qword_100A2B098;
      uint64_t v77 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v78 = swift_allocObject(v77, 72LL, 7LL);
      *(_OWORD *)(v78 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v79 = UUID.uuidString.getter(v78);
      uint64_t v81 = v80;
      *(void *)(v78 + 56) = &type metadata for String;
      *(void *)(v78 + 64) = sub_1000226F4();
      *(void *)(v78 + 32) = v79;
      *(void *)(v78 + sub_10016CF88(v0 + 40) = v81;
      os_log(_:dso:log:_:_:)(v75, &_mh_execute_header, v76, "#Durian: UUID %@ is a UT record", 31LL, 2LL, v78);
      uint64_t v82 = swift_bridgeObjectRelease();
      uint64_t v83 = MACAddress.data.getter(v82);
      unint64_t v85 = v84;
      id v86 = objc_allocWithZone(&OBJC_CLASS___SPBeaconingKey);
      Class v87 = DateInterval._bridgeToObjectiveC()().super.isa;
      Class v88 = Data._bridgeToObjectiveC()().super.isa;
      id v89 = [v86 initWithDateInterval:v87 key:v88];

      sub_100016F9C(v83, v85);
      id v90 = objc_allocWithZone(&OBJC_CLASS___SPCommandKey);
      id v91 = v89;
      Class v92 = Data._bridgeToObjectiveC()().super.isa;
      Class v93 = Data._bridgeToObjectiveC()().super.isa;
      Class v94 = Data._bridgeToObjectiveC()().super.isa;
      id v95 = [v90 initWithBeaconingKey:v91 commandKey:v92 connectionToken:v93 nearbyToken:v94 primaryIndex:0 secondaryIndex:0 type:2];

      id v96 = v95;
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v96);
      unint64_t v98 = *(void *)((v142 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
      unint64_t v97 = *(void *)((v142 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (v98 >= v97 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v97 > 1, v98 + 1, 1LL);
      }
      uint64_t v99 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v98, v96);
      specialized Array._endMutation()(v99);

      uint64_t v100 = type metadata accessor for WildModeAssociationRecord;
      uint64_t v101 = (uint64_t)v17;
    }

    sub_100018C68(v101, v100);
    return v142;
  }

  sub_100012EC0(&v137, (uint64_t)v139);
  uint64_t v21 = v140;
  uint64_t v22 = v141;
  id v23 = sub_100012ED8(v139, v140);
  uint64_t v24 = sub_10054CE6C((uint64_t)v23, v135, 0, 1, 0, v20, v21, v22);
  uint64_t v27 = (void *)v24;
  if (v26)
  {
    if (v26 != 1)
    {
      uint64_t v28 = static os_log_type_t.default.getter(v24);
      if (qword_10099B6F8 != -1) {
        swift_once(&qword_10099B6F8, sub_100651098);
      }
      uint64_t v29 = qword_100A2B008;
      uint64_t v30 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v31 = swift_allocObject(v30, 72LL, 7LL);
      *(_OWORD *)(v31 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v33 = v140;
      uint64_t v32 = v141;
      sub_100012ED8(v139, v140);
      uint64_t v34 = v131;
      uint64_t v35 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v32 + 8) + 8LL) + 32LL))(v33);
      uint64_t v36 = UUID.uuidString.getter(v35);
      uint64_t v38 = v37;
      (*(void (**)(char *, uint64_t))(v132 + 8))(v34, v133);
      *(void *)(v31 + 56) = &type metadata for String;
      *(void *)(v31 + 64) = sub_1000226F4();
      *(void *)(v31 + 32) = v36;
      *(void *)(v31 + sub_10016CF88(v0 + 40) = v38;
      uint64_t v24 = swift_bridgeObjectRelease();
      uint64_t v27 = _swiftEmptyArrayStorage;
    }
  }

  else
  {
    uint64_t v43 = v25;
    swift_bridgeObjectRetain(v24);
    uint64_t v45 = static os_log_type_t.default.getter(v44);
    if (qword_10099B6F8 != -1) {
      swift_once(&qword_10099B6F8, sub_100651098);
    }
    uint64_t v46 = qword_100A2B008;
    uint64_t v47 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v48 = swift_allocObject(v47, 72LL, 7LL);
    *(_OWORD *)(v48 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v50 = v140;
    uint64_t v49 = v141;
    sub_100012ED8(v139, v140);
    __int128 v51 = v131;
    uint64_t v52 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v49 + 8) + 8LL) + 32LL))(v50);
    uint64_t v53 = UUID.uuidString.getter(v52);
    uint64_t v55 = v54;
    (*(void (**)(char *, uint64_t))(v132 + 8))(v51, v133);
    *(void *)(v48 + 56) = &type metadata for String;
    *(void *)(v48 + 64) = sub_1000226F4();
    *(void *)(v48 + 32) = v53;
    *(void *)(v48 + sub_10016CF88(v0 + 40) = v55;
    swift_bridgeObjectRelease();
    uint64_t v24 = sub_100117B2C((uint64_t)v27, v43, 0);
  }

  *(void *)&__int128 v137 = _swiftEmptyArrayStorage;
  __chkstk_darwin(v24);
  uint64_t v56 = sub_100631FEC( (void *(*)(uint64_t *__return_ptr, uint64_t, __n128))sub_1002DAB18,  (uint64_t)(&v131 - 4),  (uint64_t)v27);
  swift_bridgeObjectRelease();
  sub_100185458((uint64_t)v56);
  sub_100185458((uint64_t)_swiftEmptyArrayStorage);
  swift_bridgeObjectRetain(v137);
  uint64_t v58 = sub_1006F1B00(v57);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(v58);
  uint64_t v60 = sub_1002FEB50(v59);
  swift_bridgeObjectRelease();
  uint64_t v136 = v60;
  sub_1002B2EE8((uint64_t *)&v136);
  uint64_t v61 = swift_bridgeObjectRelease();
  uint64_t v62 = (uint64_t)v136;
  __chkstk_darwin(v61);
  uint64_t v129 = v134;
  uint64_t v130 = v139;
  unint64_t v63 = sub_100632000((void (*)(uint64_t *, __n128))sub_1002DAB30, (uint64_t)(&v131 - 4), v62);
  swift_release();
  uint64_t v136 = _swiftEmptyArrayStorage;
  uint64_t v64 = v63[2];
  if (v64)
  {
    uint64_t v65 = *(void *)(_s18ConnectionKeyGroupVMa(0LL) - 8);
    uint64_t v66 = (char *)v63 + ((*(unsigned __int8 *)(v65 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80));
    uint64_t v67 = *(void *)(v65 + 72);
    uint64_t v68 = v142;
    swift_bridgeObjectRetain(v63);
    do
    {
      __chkstk_darwin(v69);
      uint64_t v129 = v66;
      swift_bridgeObjectRetain(v68);
      uint64_t v70 = sub_10063228C((void (*)(uint64_t *__return_ptr, id *))sub_1002DAB48, (uint64_t)(&v131 - 4), v68);
      swift_bridgeObjectRelease();
      uint64_t v69 = sub_100185458((uint64_t)v70);
      v66 += v67;
      --v64;
    }

    while (v64);
    swift_bridgeObjectRelease_n(v63, 2LL);
    uint64_t v71 = v136;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v71 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRetain(v71);
  sub_100185458(v72);
  uint64_t v73 = v142;
  swift_bridgeObjectRetain(v142);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v139);
  swift_bridgeObjectRelease();
  return v73;
}

uint64_t sub_10029EA30@<X0>(unint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X2>, void *a4@<X8>)
{
  id v96 = a4;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v85 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for TimeBasedKey(0LL);
  unint64_t v13 = (char *)a1 + *(int *)(v12 + 24);
  unint64_t v14 = *((void *)v13 + 1);
  uint64_t v97 = v4;
  if (v14 >> 60 == 15)
  {
    LODWORD(v95) = static os_log_type_t.error.getter(v12);
    if (qword_10099B6F8 != -1) {
      swift_once(&qword_10099B6F8, sub_100651098);
    }
    uint64_t v15 = qword_100A2B008;
    uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v17 = swift_allocObject(v16, 112LL, 7LL);
    *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    uint64_t v18 = a2[3];
    uint64_t v19 = a2[4];
    sub_100012ED8(a2, v18);
    uint64_t v20 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v19 + 8) + 8LL) + 32LL))(v18);
    uint64_t v21 = UUID.uuidString.getter(v20);
    uint64_t v23 = v22;
    (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
    *(void *)(v17 + 56) = &type metadata for String;
    unint64_t v24 = sub_1000226F4();
    *(void *)(v17 + 32) = v21;
    *(void *)(v17 + sub_10016CF88(v0 + 40) = v23;
    unint64_t v25 = *a1;
    *(void *)(v17 + 96) = &type metadata for UInt64;
    *(void *)(v17 + 104) = &protocol witness table for UInt64;
    *(void *)(v17 + 64) = v24;
    *(void *)(v17 + 72) = v25;
    uint64_t result = swift_bridgeObjectRelease();
    id v27 = 0LL;
    goto LABEL_14;
  }

  uint64_t v100 = *(void *)v13;
  uint64_t v28 = v100;
  unint64_t v101 = v14;
  __int128 v29 = *((_OWORD *)v13 + 2);
  __int128 v102 = *((_OWORD *)v13 + 1);
  __int128 v103 = v29;
  sub_10001736C(v100, v14);
  uint64_t v30 = sub_1004DA048();
  unint64_t v32 = v31;
  id v33 = objc_allocWithZone(&OBJC_CLASS___SPBeaconingKey);
  Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
  Class v35 = Data._bridgeToObjectiveC()().super.isa;
  id v94 = [v33 initWithDateInterval:isa key:v35];

  sub_100016F9C(v30, v32);
  unint64_t v36 = *a1;
  uint64_t v37 = (objc_class *)[objc_allocWithZone(NSNumber) initWithUnsignedLongLong:*a1];
  if (v36) {
    unint64_t v38 = v36 / 0x60 + 1;
  }
  else {
    unint64_t v38 = 0LL;
  }
  uint64_t v39 = (void *)*a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a3);
  *a3 = v39;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t v39 = sub_1004C61B8(0LL, v39[2] + 1LL, 1, v39);
    *a3 = v39;
  }

  unint64_t v42 = v39[2];
  unint64_t v41 = v39[3];
  if (v42 >= v41 >> 1) {
    uint64_t v39 = sub_1004C61B8((void *)(v41 > 1), v42 + 1, 1, v39);
  }
  _OWORD v39[2] = v42 + 1;
  v39[v42 + 4] = v38;
  *a3 = v39;
  uint64_t v43 = String.utf8Data.getter(0x646E616D6D6F63LL, 0xE700000000000000LL);
  unint64_t v45 = v44;
  sub_10001736C(v28, v14);
  uint64_t v46 = v97;
  sub_1004DF7EC(v28, v14, v43, v45, 32LL);
  if (!v46)
  {
    uint64_t v49 = v47;
    uint64_t v50 = v48;
    sub_1000182F0(v28, v14);
    sub_1001782BC(v49, v50);
    unint64_t v51 = v14;
    sub_100016F9C(v43, v45);
    uint64_t v52 = v98;
    unint64_t v92 = v99;
    uint64_t v53 = String.utf8Data.getter(0x7463656E6E6F63LL, 0xE700000000000000LL);
    unint64_t v55 = v54;
    sub_10001736C(v28, v51);
    sub_1004DF7EC(v28, v51, v53, v55, 32LL);
    uint64_t v57 = v56;
    uint64_t v59 = v58;
    Class v93 = v37;
    unint64_t v95 = v51;
    sub_1000182F0(v28, v51);
    sub_1001782BC(v57, v59);
    sub_100016F9C(v53, v55);
    unint64_t v90 = v99;
    uint64_t v91 = v98;
    uint64_t v60 = sub_1004DA048();
    unint64_t v62 = v61;
    uint64_t v63 = String.utf8Data.getter(0x646E616D6D6F63LL, 0xE700000000000000LL);
    unint64_t v65 = v64;
    uint64_t v66 = v95;
    sub_10001736C(v28, v95);
    sub_1004DF7EC(v28, v66, v63, v65, 32LL);
    uint64_t v68 = v67;
    uint64_t v70 = v69;
    sub_1000182F0(v28, v95);
    sub_1001782BC(v68, v70);
    uint64_t v97 = 0LL;
    uint64_t v89 = v28;
    sub_100016F9C(v63, v65);
    uint64_t v71 = v98;
    unint64_t v72 = v99;
    uint64_t v73 = sub_10017AFAC(v98, v99, v60, v62);
    unint64_t v86 = v74;
    uint64_t v87 = v73;
    sub_100016F9C(v71, v72);
    sub_100016F9C(v60, v62);
    id v88 = objc_allocWithZone(&OBJC_CLASS___SPCommandKey);
    uint64_t v75 = v93;
    unint64_t v76 = v92;
    Class v77 = Data._bridgeToObjectiveC()().super.isa;
    Class v93 = v77;
    unint64_t v78 = v90;
    uint64_t v79 = v91;
    Class v80 = Data._bridgeToObjectiveC()().super.isa;
    Class v81 = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v82 = v94;
    id v27 = [v88 initWithBeaconingKey:v94 commandKey:v77 connectionToken:v80 nearbyToken:v81 primaryIndex:v75 secondaryIndex:0 type:0];

    sub_100016F9C(v87, v86);
    sub_100016F9C(v79, v78);
    sub_100016F9C(v52, v76);

    uint64_t result = sub_1000182F0(v89, v95);
LABEL_14:
    *id v96 = v27;
    return result;
  }

  sub_100016F9C(v43, v45);
  sub_1000182F0(v28, v14);
  uint64_t v98 = 0LL;
  unint64_t v99 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(32LL);
  v83._object = (void *)0x800000010085B8E0LL;
  v83._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v83);
  uint64_t v104 = v46;
  uint64_t v84 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  _print_unlocked<A, B>(_:_:)( &v104,  &v98,  v84,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v98,  v99,  "searchpartyd/KeyRepresentable.swift",  35LL,  2LL,  415LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_10029F214@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v96 = a4;
  uint64_t v7 = sub_100004AEC(&qword_1009A7E30);
  uint64_t v8 = __chkstk_darwin(v7);
  __int128 v102 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  __int128 v103 = (char *)&v93 - v10;
  uint64_t v11 = _s18ConnectionKeyGroupVMa(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  id v108 = (char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v101 = (char *)&v93 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v98 = (char *)&v93 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v93 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  Class v107 = (char *)&v93 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v100 = (char *)&v93 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v97 = (char *)&v93 - v27;
  __chkstk_darwin(v26);
  unint64_t v99 = (char *)&v93 - v28;
  uint64_t v113 = type metadata accessor for TimeBasedKey(0LL);
  uint64_t v29 = *(void *)(v113 - 8);
  uint64_t v30 = __chkstk_darwin(v113);
  unint64_t v32 = (char *)&v93 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = __chkstk_darwin(v30);
  Class v35 = (char *)&v93 - v34;
  uint64_t v36 = __chkstk_darwin(v33);
  id v109 = (char *)&v93 - v37;
  __chkstk_darwin(v36);
  Class v111 = (uint64_t *)((char *)&v93 - v38);
  uint64_t v39 = *a1;
  sub_100013044(a3, (uint64_t)&v115);
  uint64_t v40 = swift_allocObject(&unk_10094DCE0, 72LL, 7LL);
  *(void *)(v40 + swift_weakDestroy(v0 + 16) = a2;
  sub_100012EC0(&v115, v40 + 24);
  *(void *)(v40 + 64) = v39;
  swift_retain();
  unsafeFromAsyncTask<A>(_:)(&unk_1009A7E40, v40, &_s9KeyResultON);
  swift_release();
  uint64_t v94 = *((void *)&v115 + 1);
  uint64_t v105 = v12;
  uint64_t v106 = v11;
  if (v116)
  {
    if (v116 != 1) {
      return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v96, 1LL, 1LL, v11);
    }
    uint64_t v41 = *(void *)(v115 + 16);
    uint64_t v95 = v115;
    if (v41)
    {
      uint64_t v42 = v115 + ((*(unsigned __int8 *)(v29 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
      __int128 v102 = v100 + 32;
      uint64_t v104 = *(void *)(v29 + 72);
      swift_bridgeObjectRetain(v115);
      uint64_t v43 = _swiftEmptyArrayStorage;
      unint64_t v44 = type metadata accessor for TimeBasedKey;
      uint64_t v45 = (uint64_t)v103;
      uint64_t v46 = (uint64_t)v109;
      while (1)
      {
        id v110 = v43;
        uint64_t v47 = (uint64_t)v111;
        sub_10001DC4C(v42, (uint64_t)v111, v44);
        sub_10001DC4C(v47, v46, v44);
        uint64_t v48 = v44;
        uint64_t v49 = v46 + *(int *)(v113 + 24);
        unint64_t v50 = *(void *)(v49 + 8);
        if (v50 >> 60 != 15) {
          break;
        }
        sub_100018C68(v46, v48);
        unint64_t v44 = v48;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v45, 1LL, 1LL, v11);
        sub_100018C68((uint64_t)v111, v48);
        int v60 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v45, 1LL, v11);
        uint64_t v43 = v110;
        if (v60 == 1)
        {
          sub_100015794(v45, &qword_1009A7E30);
        }

        else
        {
          uint64_t v61 = (uint64_t)v99;
          sub_10002218C(v45, (uint64_t)v99, _s18ConnectionKeyGroupVMa);
          sub_10002218C(v61, (uint64_t)v107, _s18ConnectionKeyGroupVMa);
          if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0) {
            uint64_t v43 = (void *)sub_1004C61A4(0, v43[2] + 1LL, 1, (unint64_t)v43);
          }
          unint64_t v63 = v43[2];
          unint64_t v62 = v43[3];
          if (v63 >= v62 >> 1) {
            uint64_t v43 = (void *)sub_1004C61A4(v62 > 1, v63 + 1, 1, (unint64_t)v43);
          }
          void v43[2] = v63 + 1;
          sub_10002218C( (uint64_t)v107,  (uint64_t)v43 + ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
          + *(void *)(v12 + 72) * v63,
            _s18ConnectionKeyGroupVMa);
          uint64_t v46 = (uint64_t)v109;
        }

        v42 += v104;
        if (!--v41)
        {
          uint64_t v85 = v94;
          sub_100117B2C(v95, v94, 1);
          goto LABEL_35;
        }
      }

      uint64_t v51 = *(void *)v49;
      sub_10001736C(*(void *)v49, *(void *)(v49 + 8));
      uint64_t v52 = String.utf8Data.getter(0x7463656E6E6F63LL, 0xE700000000000000LL);
      unint64_t v54 = v53;
      sub_10001736C(v51, v50);
      uint64_t v55 = v112;
      sub_1004DF7EC(v51, v50, v52, v54, 32LL);
      id v108 = v57;
      uint64_t v58 = v55;
      if (!v55)
      {
        uint64_t v59 = v56;
        sub_1000182F0(v51, v50);
        __asm { BR              X9 }
      }

      sub_100016F9C(v52, v54);
      uint64_t v89 = v51;
      unint64_t v90 = v50;
      goto LABEL_47;
    }

    uint64_t v43 = _swiftEmptyArrayStorage;
    uint64_t v85 = v94;
LABEL_35:
    uint64_t v86 = v96;
    if (v43[2])
    {
      sub_10001DC4C( (uint64_t)v43 + ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)),  v96,  _s18ConnectionKeyGroupVMa);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v86, 0LL, 1LL, v11);
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v96, 1LL, 1LL, v11);
    }

    sub_100117B2C(v95, v85, 1);
  }

  else
  {
    uint64_t v100 = v35;
    id v109 = v32;
    Class v107 = v21;
    unint64_t v64 = *(void **)(v115 + 16);
    uint64_t v95 = v115;
    if (v64)
    {
      uint64_t v65 = v115 + ((*(unsigned __int8 *)(v29 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v29 + 80));
      unint64_t v99 = v101 + 32;
      uint64_t v104 = *(void *)(v29 + 72);
      swift_bridgeObjectRetain(v115);
      uint64_t v66 = _swiftEmptyArrayStorage;
      uint64_t v67 = (uint64_t)v102;
      uint64_t v68 = (uint64_t)v109;
      uint64_t v69 = (uint64_t)v100;
      while (1)
      {
        id v110 = v64;
        Class v111 = v66;
        sub_10001DC4C(v65, v69, type metadata accessor for TimeBasedKey);
        sub_10001DC4C(v69, v68, type metadata accessor for TimeBasedKey);
        uint64_t v70 = v68 + *(int *)(v113 + 24);
        unint64_t v71 = *(void *)(v70 + 8);
        if (v71 >> 60 != 15) {
          break;
        }
        sub_100018C68(v68, type metadata accessor for TimeBasedKey);
        uint64_t v72 = (uint64_t)v108;
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v67, 1LL, 1LL, v11);
        sub_100018C68(v69, type metadata accessor for TimeBasedKey);
        int v80 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v67, 1LL, v11);
        uint64_t v81 = (uint64_t)v107;
        uint64_t v66 = v111;
        if (v80 == 1)
        {
          sub_100015794(v67, &qword_1009A7E30);
        }

        else
        {
          sub_10002218C(v67, (uint64_t)v107, _s18ConnectionKeyGroupVMa);
          sub_10002218C(v81, v72, _s18ConnectionKeyGroupVMa);
          if ((swift_isUniquelyReferenced_nonNull_native(v66) & 1) == 0) {
            uint64_t v66 = (void *)sub_1004C61A4(0, v66[2] + 1LL, 1, (unint64_t)v66);
          }
          unint64_t v83 = v66[2];
          unint64_t v82 = v66[3];
          if (v83 >= v82 >> 1) {
            uint64_t v66 = (void *)sub_1004C61A4(v82 > 1, v83 + 1, 1, (unint64_t)v66);
          }
          v66[2] = v83 + 1;
          sub_10002218C( v72,  (uint64_t)v66 + ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
          + *(void *)(v12 + 72) * v83,
            _s18ConnectionKeyGroupVMa);
          uint64_t v68 = (uint64_t)v109;
        }

        v65 += v104;
        unint64_t v64 = (void *)((char *)v110 - 1);
        if (v110 == (void *)1)
        {
          swift_bridgeObjectRelease();
          goto LABEL_38;
        }
      }

      uint64_t v73 = *(void *)v70;
      sub_10001736C(*(void *)v70, *(void *)(v70 + 8));
      uint64_t v74 = String.utf8Data.getter(0x7463656E6E6F63LL, 0xE700000000000000LL);
      unint64_t v76 = v75;
      sub_10001736C(v73, v71);
      uint64_t v77 = v112;
      sub_1004DF7EC(v73, v71, v74, v76, 32LL);
      uint64_t v58 = v77;
      if (!v77)
      {
        uint64_t v79 = v78;
        sub_1000182F0(v73, v71);
        __asm { BR              X9 }
      }

      sub_100016F9C(v74, v76);
      uint64_t v89 = v73;
      unint64_t v90 = v71;
LABEL_47:
      sub_1000182F0(v89, v90);
      *(void *)&__int128 v115 = 0LL;
      *((void *)&v115 + 1) = 0xE000000000000000LL;
      _StringGuts.grow(_:)(35LL);
      v91._object = (void *)0x8000000100855F00LL;
      v91._countAndFlagsBits = 0xD000000000000021LL;
      String.append(_:)(v91);
      uint64_t v114 = v58;
      uint64_t v92 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      _print_unlocked<A, B>(_:_:)( &v114,  &v115,  v92,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v115,  *((void *)&v115 + 1),  "searchpartyd/KeyRepresentable.swift",  35LL,  2LL,  423LL,  0);
      __break(1u);
      JUMPOUT(0x1002A0524LL);
    }

    uint64_t v66 = _swiftEmptyArrayStorage;
LABEL_38:
    uint64_t v87 = v96;
    uint64_t v88 = v94;
    if (v66[2])
    {
      sub_10001DC4C( (uint64_t)v66 + ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80)),  v96,  _s18ConnectionKeyGroupVMa);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v12 + 56))(v87, 0LL, 1LL, v11);
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v12 + 56))(v96, 1LL, 1LL, v11);
    }

    sub_100117B2C(v95, v88, 0);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002A05A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[5] = a3;
  v4[6] = a4;
  void v4[3] = a1;
  v4[4] = a2;
  return swift_task_switch(sub_1002A05C0, 0LL, 0LL);
}

uint64_t sub_1002A05C0()
{
  uint64_t v1 = *(void *)(v0[4] + 256LL);
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  uint64_t v3 = type metadata accessor for BeaconKeyManager(0LL);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10014F014, v1, v2, (char *)&type metadata for () + 8, v3);
  v0[7] = v0[2];
  uint64_t v4 = (void *)swift_task_alloc(dword_1009A8024);
  v0[8] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1002A0678;
  return sub_1002DE3E0(v0[5], v0[6], v0[6], 1, 0, 0);
}

uint64_t sub_1002A0678(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v8 = *v4;
  uint64_t v9 = *(void *)(*v4 + 64);
  *(void *)(*v4 + 72) = v3;
  swift_task_dealloc(v9);
  if (v3)
  {
    uint64_t v10 = sub_1002A0728;
  }

  else
  {
    swift_release();
    *(_BYTE *)(v8 + 96) = a3;
    *(void *)(v8 + 80) = a2;
    *(void *)(v8 + 88) = a1;
    uint64_t v10 = sub_1002A0708;
  }

  return swift_task_switch(v10, 0LL, 0LL);
}

uint64_t sub_1002A0708()
{
  __int8 v1 = *(_BYTE *)(v0 + 96);
  uint64_t v2 = *(int8x16_t **)(v0 + 24);
  *uint64_t v2 = vextq_s8(*(int8x16_t *)(v0 + 80), *(int8x16_t *)(v0 + 80), 8uLL);
  v2[1].i8[0] = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002A0728()
{
  uint64_t v1 = *(void *)(v0 + 72);
  swift_release(*(void *)(v0 + 56));
  swift_errorRelease(v1);
  uint64_t v2 = *(void *)(v0 + 24);
  *(void *)uint64_t v2 = 0LL;
  *(void *)(v2 + 8) = 0LL;
  *(_BYTE *)(v2 + swift_weakDestroy(v0 + 16) = 2;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1002A0774(void **a1@<X0>, uint64_t *a2@<X1>, void *a3@<X8>)
{
  uint64_t v46 = a3;
  uint64_t v5 = _s18ConnectionKeyGroupVMa(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = *a1;
  uint64_t v9 = a2[2];
  unint64_t v10 = a2[3];
  sub_10001736C(v9, v10);
  id v11 = [v8 connectionToken];
  uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
  unint64_t v14 = v13;

  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v9, v10);
  LOBYTE(v11) = v15;
  sub_100016F9C(v12, v14);
  sub_100016F9C(v9, v10);
  sub_10001DC4C((uint64_t)a2, (uint64_t)v7, _s18ConnectionKeyGroupVMa);
  if ((v11 & 1) != 0)
  {
    sub_100018C68((uint64_t)v7, _s18ConnectionKeyGroupVMa);
    id v16 = 0LL;
  }

  else
  {
    uint64_t v17 = *v7;
    unint64_t v18 = v7[1];
    sub_10001736C(*v7, v18);
    id v19 = [v8 beaconingKey];
    id v20 = [v19 key];

    uint64_t v21 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v20);
    unint64_t v23 = v22;

    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v17, v18);
    LOBYTE(v20) = v24;
    sub_100016F9C(v21, v23);
    sub_100016F9C(v17, v18);
    sub_100018C68((uint64_t)v7, _s18ConnectionKeyGroupVMa);
    if ((v20 & 1) != 0)
    {
      id v16 = 0LL;
    }

    else
    {
      uint64_t v25 = *a2;
      unint64_t v26 = a2[1];
      id v27 = objc_allocWithZone(&OBJC_CLASS___SPBeaconingKey);
      sub_10001736C(v25, v26);
      Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
      Class v29 = Data._bridgeToObjectiveC()().super.isa;
      id v30 = [v27 initWithDateInterval:isa key:v29];

      sub_100016F9C(v25, v26);
      uint64_t v31 = a2[7];
      uint64_t v32 = a2[8];
      sub_100012ED8(a2 + 4, v31);
      dispatch thunk of RawRepresentable.rawValue.getter(&v47, v31, *(void *)(v32 + 56));
      id v33 = [objc_allocWithZone(NSNumber) initWithUnsignedLongLong:v47];
      id v34 = [v8 primaryIndex];
      id v35 = [v8 connectionToken];
      uint64_t v36 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v35);
      unint64_t v38 = v37;

      id v39 = objc_allocWithZone(&OBJC_CLASS___SPCommandKey);
      id v40 = v33;
      Class v41 = Data._bridgeToObjectiveC()().super.isa;
      Class v42 = Data._bridgeToObjectiveC()().super.isa;
      Class v43 = Data._bridgeToObjectiveC()().super.isa;
      unint64_t v44 = v39;
      uint64_t v45 = v30;
      id v16 = [v44 initWithBeaconingKey:v30 commandKey:v41 connectionToken:v42 nearbyToken:v43 primaryIndex:v34 secondaryIndex:v40 type:1];

      sub_100016F9C(v36, v38);
    }
  }

  void *v46 = v16;
}

void *sub_1002A0AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimeBasedKeysCriteria(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_100504C28(a1, (uint64_t)&v13);
  if (v14)
  {
    sub_100012EC0(&v13, (uint64_t)v15);
    *uint64_t v6 = a2;
    swift_storeEnumTagMultiPayload(v6, v4, 1LL);
    swift_bridgeObjectRetain(a2);
    sub_1004EBE70((uint64_t)v15, (uint64_t)v6);
    uint64_t v8 = v7;
    uint64_t v9 = sub_100018C68((uint64_t)v6, type metadata accessor for TimeBasedKeysCriteria);
    __chkstk_darwin(v9);
    *(&v12 - 2) = a1;
    unint64_t v10 = sub_100631FEC( (void *(*)(uint64_t *__return_ptr, uint64_t, __n128))sub_1002DABE0,  (uint64_t)(&v12 - 4),  v8);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v15);
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_100015794((uint64_t)&v13, (uint64_t *)&unk_1009A9C40);
    return _swiftEmptyArrayStorage;
  }

  return v10;
}

uint64_t sub_1002A0D34@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for TimeBasedKey(0LL);
  uint64_t v6 = (char *)a1 + *(int *)(v5 + 24);
  unint64_t v7 = *((void *)v6 + 1);
  if (v7 >> 60 == 15)
  {
    uint64_t v8 = static os_log_type_t.error.getter(v5);
    if (qword_10099B6F8 != -1) {
      swift_once(&qword_10099B6F8, sub_100651098);
    }
    uint64_t v9 = qword_100A2B008;
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v11 = swift_allocObject(v10, 112LL, 7LL);
    *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    uint64_t v12 = UUID.uuidString.getter(v11);
    uint64_t v14 = v13;
    *(void *)(v11 + 56) = &type metadata for String;
    unint64_t v15 = sub_1000226F4();
    *(void *)(v11 + 32) = v12;
    *(void *)(v11 + sub_10016CF88(v0 + 40) = v14;
    uint64_t v16 = *a1;
    *(void *)(v11 + 96) = &type metadata for UInt64;
    *(void *)(v11 + 104) = &protocol witness table for UInt64;
    *(void *)(v11 + 64) = v15;
    *(void *)(v11 + 72) = v16;
    uint64_t result = swift_bridgeObjectRelease();
    id v18 = 0LL;
    goto LABEL_7;
  }

  unint64_t v64 = a2;
  uint64_t v67 = *(void *)v6;
  unint64_t v68 = v7;
  __int128 v19 = *((_OWORD *)v6 + 2);
  __int128 v69 = *((_OWORD *)v6 + 1);
  __int128 v70 = v19;
  sub_10001736C(v67, v7);
  uint64_t v20 = sub_1004DA048();
  unint64_t v22 = v21;
  id v23 = objc_allocWithZone(&OBJC_CLASS___SPBeaconingKey);
  Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
  Class v25 = Data._bridgeToObjectiveC()().super.isa;
  id v26 = [v23 initWithDateInterval:isa key:v25];

  sub_100016F9C(v20, v22);
  id v27 = [objc_allocWithZone(NSNumber) initWithUnsignedLongLong:*a1];
  uint64_t v28 = String.utf8Data.getter(0x646E616D6D6F63LL, 0xE700000000000000LL);
  unint64_t v30 = v29;
  sub_10001736C(v67, v7);
  sub_1004DF7EC(v67, v7, v28, v30, 32LL);
  if (!v2)
  {
    uint64_t v33 = v31;
    uint64_t v34 = v32;
    sub_1000182F0(v67, v7);
    sub_1001782BC(v33, v34);
    sub_100016F9C(v28, v30);
    uint64_t v35 = String.utf8Data.getter(0x7463656E6E6F63LL, 0xE700000000000000LL);
    unint64_t v37 = v36;
    sub_10001736C(v67, v7);
    sub_1004DF7EC(v67, v7, v35, v37, 32LL);
    uint64_t v39 = v38;
    uint64_t v41 = v40;
    unint64_t v62 = v26;
    sub_1000182F0(v67, v7);
    sub_1001782BC(v39, v41);
    sub_100016F9C(v35, v37);
    uint64_t v42 = sub_1004DA048();
    unint64_t v44 = v43;
    uint64_t v45 = String.utf8Data.getter(0x646E616D6D6F63LL, 0xE700000000000000LL);
    unint64_t v47 = v46;
    sub_10001736C(v67, v7);
    sub_1004DF7EC(v67, v7, v45, v47, 32LL);
    uint64_t v49 = v48;
    uint64_t v51 = v50;
    sub_1000182F0(v67, v7);
    sub_1001782BC(v49, v51);
    sub_100016F9C(v45, v47);
    uint64_t v52 = sub_10017AFAC(v65, v66, v42, v44);
    unint64_t v59 = v53;
    uint64_t v60 = v52;
    sub_100016F9C(v65, v66);
    sub_100016F9C(v42, v44);
    id v61 = objc_allocWithZone(&OBJC_CLASS___SPCommandKey);
    id v54 = v27;
    Class v63 = Data._bridgeToObjectiveC()().super.isa;
    Class v55 = Data._bridgeToObjectiveC()().super.isa;
    Class v56 = Data._bridgeToObjectiveC()().super.isa;
    id v18 = [v61 initWithBeaconingKey:v62 commandKey:v63 connectionToken:v55 nearbyToken:v56 primaryIndex:v54 secondaryIndex:0 type:0];

    sub_100016F9C(v60, v59);
    sub_100016F9C(v65, v66);
    sub_100016F9C(v65, v66);

    uint64_t result = sub_1000182F0(v67, v7);
    a2 = v64;
LABEL_7:
    *a2 = v18;
    return result;
  }

  sub_100016F9C(v28, v30);
  sub_1000182F0(v67, v7);
  uint64_t v65 = 0LL;
  unint64_t v66 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(32LL);
  v57._object = (void *)0x800000010085B8E0LL;
  v57._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v57);
  uint64_t v71 = v2;
  uint64_t v58 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  _print_unlocked<A, B>(_:_:)( &v71,  &v65,  v58,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v65,  v66,  "searchpartyd/KeyRepresentable.swift",  35LL,  2LL,  415LL,  0);
  __break(1u);
  return result;
}

void *sub_1002A13FC(uint64_t a1, char a2, uint64_t a3, char a4)
{
  uint64_t v9 = type metadata accessor for TimeBasedKey(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = &v21[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = type metadata accessor for TimeBasedKeysCriteria(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = &v21[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_100504C28(a1, (uint64_t)&v22);
  if (v23)
  {
    sub_100012EC0(&v22, (uint64_t)v24);
    *uint64_t v14 = a2 & 1;
    *((void *)v14 + 1) = a3;
    v14[16] = a4;
    swift_storeEnumTagMultiPayload(v14, v12, 3LL);
    sub_1004EBE70((uint64_t)v24, (uint64_t)v14);
    uint64_t v16 = v15;
    uint64_t v17 = sub_100018C68((uint64_t)v14, type metadata accessor for TimeBasedKeysCriteria);
    if ((a2 & 1) != 0)
    {
      uint64_t v18 = sub_1004EA204(v24, a3, 1, 0, (uint64_t)v11);
      __chkstk_darwin(v18);
      *(void *)&v21[-32] = v4;
      *(void *)&v21[-24] = v24;
      *(void *)&v21[-16] = a1;
      *(void *)&v21[-8] = v11;
      __int128 v19 = sub_100631FEC( (void *(*)(uint64_t *__return_ptr, uint64_t, __n128))sub_1002DABF8,  (uint64_t)&v21[-48],  v16);
      sub_100018C68((uint64_t)v11, type metadata accessor for TimeBasedKey);
    }

    else
    {
      __chkstk_darwin(v17);
      *(void *)&v21[-32] = v4;
      *(void *)&v21[-24] = v24;
      *(void *)&v21[-16] = a3;
      *(void *)&v21[-8] = a1;
      __int128 v19 = sub_100631FEC( (void *(*)(uint64_t *__return_ptr, uint64_t, __n128))sub_1002DAC14,  (uint64_t)&v21[-48],  v16);
    }

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_100015794((uint64_t)&v22, (uint64_t *)&unk_1009A9C40);
    return _swiftEmptyArrayStorage;
  }

  return v19;
}

uint64_t sub_1002A1934@<X0>(id *a1@<X0>, void *a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t v86 = a4;
  uint64_t v10 = type metadata accessor for TimeBasedKey(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = sub_1004EA204(a2, a3, 0, 0, (uint64_t)v12);
  if (!v5)
  {
    uint64_t v84 = a5;
    uint64_t v85 = v12;
    uint64_t v14 = *(int *)(v10 + 24);
    uint64_t v15 = (char *)a1 + v14;
    unint64_t v16 = *(unint64_t *)((char *)a1 + v14 + 8);
    if (v16 >> 60 == 15)
    {
      uint64_t v17 = static os_log_type_t.error.getter(result);
      if (qword_10099B6F8 != -1) {
        swift_once(&qword_10099B6F8, sub_100651098);
      }
      uint64_t v18 = qword_100A2B008;
      uint64_t v19 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v20 = swift_allocObject(v19, 112LL, 7LL);
      *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
      uint64_t v21 = UUID.uuidString.getter(v20);
      uint64_t v23 = v22;
      *(void *)(v20 + 56) = &type metadata for String;
      unint64_t v24 = sub_1000226F4();
      *(void *)(v20 + 32) = v21;
      *(void *)(v20 + sub_10016CF88(v0 + 40) = v23;
      id v25 = *a1;
      *(void *)(v20 + 96) = &type metadata for UInt64;
      *(void *)(v20 + 104) = &protocol witness table for UInt64;
      *(void *)(v20 + 64) = v24;
      *(void *)(v20 + 72) = v25;
      swift_bridgeObjectRelease();
      uint64_t result = sub_100018C68((uint64_t)v85, type metadata accessor for TimeBasedKey);
      *uint64_t v84 = 0LL;
    }

    else
    {
      uint64_t v26 = *(void *)v15;
      id v81 = *a1;
      id v27 = &v85[v14];
      __int128 v28 = *((_OWORD *)v27 + 1);
      v93[0] = *(_OWORD *)v27;
      v93[1] = v28;
      void v93[2] = *((_OWORD *)v27 + 2);
      sub_100018BE4(v26, v16);
      sub_1002DAC30( v93,  (void (*)(void, void))sub_1002DDE24,  (void (*)(uint64_t, uint64_t))sub_10001736C,  (void (*)(uint64_t, uint64_t))sub_100018BE4);
      uint64_t v29 = sub_1004DA048();
      unint64_t v31 = v30;
      sub_1002DAC30( v93,  (void (*)(void, void))sub_1002DDE20,  (void (*)(uint64_t, uint64_t))sub_100016F9C,  (void (*)(uint64_t, uint64_t))sub_1000182F0);
      id v32 = objc_allocWithZone(&OBJC_CLASS___SPBeaconingKey);
      Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
      Class v34 = Data._bridgeToObjectiveC()().super.isa;
      id v83 = [v32 initWithDateInterval:isa key:v34];

      sub_100016F9C(v29, v31);
      uint64_t v89 = v26;
      unint64_t v90 = v16;
      __int128 v35 = *((_OWORD *)v15 + 2);
      __int128 v91 = *((_OWORD *)v15 + 1);
      __int128 v92 = v35;
      uint64_t v86 = sub_1004DA048();
      unint64_t v37 = v36;
      uint64_t v38 = String.utf8Data.getter(0x646E616D6D6F63LL, 0xE700000000000000LL);
      unint64_t v40 = v39;
      sub_10001736C(v26, v16);
      sub_1004DF7EC(v26, v16, v38, v40, 32LL);
      uint64_t v42 = v41;
      uint64_t v44 = v43;
      sub_1000182F0(v26, v16);
      sub_1001782BC(v42, v44);
      sub_100016F9C(v38, v40);
      uint64_t v45 = v87;
      unint64_t v46 = v88;
      uint64_t v47 = v86;
      uint64_t v48 = sub_10017AFAC(v87, v88, v86, v37);
      unint64_t v78 = v49;
      sub_100016F9C(v45, v46);
      sub_100016F9C(v47, v37);
      uint64_t v50 = String.utf8Data.getter(0x646E616D6D6F63LL, 0xE700000000000000LL);
      unint64_t v52 = v51;
      sub_10001736C(v26, v16);
      sub_1004DF7EC(v26, v16, v50, v52, 32LL);
      uint64_t v54 = v53;
      uint64_t v56 = v55;
      uint64_t v79 = v48;
      sub_1000182F0(v26, v16);
      sub_1001782BC(v54, v56);
      sub_100016F9C(v50, v52);
      unint64_t v57 = v88;
      uint64_t v86 = v87;
      uint64_t v58 = String.utf8Data.getter(0x7463656E6E6F63LL, 0xE700000000000000LL);
      unint64_t v60 = v59;
      sub_10001736C(v26, v16);
      sub_1004DF7EC(v26, v16, v58, v60, 32LL);
      uint64_t v62 = v61;
      uint64_t v64 = v63;
      uint64_t v82 = v26;
      unint64_t v80 = v16;
      sub_1000182F0(v26, v16);
      sub_1001782BC(v62, v64);
      sub_100016F9C(v58, v60);
      uint64_t v77 = v87;
      unint64_t v76 = v88;
      id v65 = objc_allocWithZone(&OBJC_CLASS___NSNumber);
      id v66 = [v65 initWithUnsignedLongLong:v81];
      id v67 = objc_allocWithZone(&OBJC_CLASS___SPCommandKey);
      Class v68 = Data._bridgeToObjectiveC()().super.isa;
      Class v69 = Data._bridgeToObjectiveC()().super.isa;
      uint64_t v70 = v79;
      unint64_t v71 = v78;
      Class v72 = Data._bridgeToObjectiveC()().super.isa;
      uint64_t v73 = v67;
      uint64_t v74 = v83;
      id v81 = [v73 initWithBeaconingKey:v83 commandKey:v68 connectionToken:v69 nearbyToken:v72 primaryIndex:v66 secondaryIndex:0 type:0];

      sub_100016F9C(v70, v71);
      sub_100016F9C(v77, v76);
      sub_100016F9C(v86, v57);

      sub_1000182F0(v82, v80);
      uint64_t result = sub_100018C68((uint64_t)v85, type metadata accessor for TimeBasedKey);
      *uint64_t v84 = v81;
    }
  }

  return result;
}

uint64_t sub_1002A2090@<X0>(void *a1@<X0>, void *a2@<X2>, uint64_t a3@<X4>, void *a4@<X8>)
{
  uint64_t v8 = type metadata accessor for DateInterval(0LL);
  uint64_t v98 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (void *)*a1;
  if (*a1) {
    uint64_t v11 = (objc_class *)(*a1 / 0x60uLL + 1);
  }
  else {
    uint64_t v11 = 0LL;
  }
  uint64_t v12 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Class v96 = v11;
  id v97 = v10;
  sub_1004ED494(a2, (uint64_t)v11, 1, (uint64_t)v12);
  uint64_t v13 = type metadata accessor for TimeBasedKey(0LL);
  uint64_t v14 = *(int *)(v13 + 24);
  uint64_t v15 = (char *)a1 + v14;
  unint64_t v16 = *(void *)((char *)a1 + v14 + 8);
  if (v16 >> 60 == 15)
  {
    uint64_t v17 = v12;
    uint64_t v18 = static os_log_type_t.error.getter(v13);
    if (qword_10099B6F8 != -1) {
      swift_once(&qword_10099B6F8, sub_100651098);
    }
    uint64_t v19 = qword_100A2B008;
    uint64_t v20 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v21 = swift_allocObject(v20, 112LL, 7LL);
    *(_OWORD *)(v21 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    uint64_t v22 = UUID.uuidString.getter(v21);
    uint64_t v24 = v23;
    *(void *)(v21 + 56) = &type metadata for String;
    unint64_t v25 = sub_1000226F4();
    *(void *)(v21 + 32) = v22;
    *(void *)(v21 + sub_10016CF88(v0 + 40) = v24;
    *(void *)(v21 + 96) = &type metadata for UInt64;
    *(void *)(v21 + 104) = &protocol witness table for UInt64;
    id v26 = v97;
    *(void *)(v21 + 64) = v25;
    *(void *)(v21 + 72) = v26;
    swift_bridgeObjectRelease();
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v17, v8);
    id v28 = 0LL;
    goto LABEL_10;
  }

  uint64_t v92 = v8;
  uint64_t v93 = a4;
  uint64_t v29 = *(void *)v15;
  unint64_t v30 = (__int128 *)(a3 + v14);
  __int128 v31 = v30[1];
  __int128 v107 = *v30;
  __int128 v108 = v31;
  __int128 v109 = v30[2];
  sub_10001736C(v29, v16);
  uint64_t v32 = sub_1004DA048();
  unint64_t v34 = v33;
  __int128 v35 = v12;
  id v36 = objc_allocWithZone(&OBJC_CLASS___SPBeaconingKey);
  __int128 v91 = v35;
  Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
  Class v38 = Data._bridgeToObjectiveC()().super.isa;
  id v90 = [v36 initWithDateInterval:isa key:v38];

  sub_100016F9C(v32, v34);
  uint64_t v103 = v29;
  unint64_t v104 = v16;
  __int128 v39 = *((_OWORD *)v15 + 2);
  __int128 v105 = *((_OWORD *)v15 + 1);
  __int128 v106 = v39;
  uint64_t v40 = sub_1004DA048();
  unint64_t v42 = v41;
  uint64_t v43 = String.utf8Data.getter(0x646E616D6D6F63LL, 0xE700000000000000LL);
  unint64_t v45 = v44;
  sub_10001736C(v29, v16);
  uint64_t v46 = v100;
  sub_1004DF7EC(v29, v16, v43, v45, 32LL);
  if (!v46)
  {
    uint64_t v49 = v47;
    uint64_t v50 = v48;
    sub_1000182F0(v29, v16);
    sub_1001782BC(v49, v50);
    sub_100016F9C(v43, v45);
    uint64_t v51 = v101;
    unint64_t v52 = v102;
    uint64_t v53 = sub_10017AFAC(v101, v102, v40, v42);
    unint64_t v55 = v54;
    sub_100016F9C(v51, v52);
    sub_100016F9C(v40, v42);
    uint64_t v56 = String.utf8Data.getter(0x646E616D6D6F63LL, 0xE700000000000000LL);
    unint64_t v58 = v57;
    sub_10001736C(v29, v16);
    unint64_t v99 = v16;
    sub_1004DF7EC(v29, v16, v56, v58, 32LL);
    uint64_t v60 = v59;
    uint64_t v62 = v61;
    uint64_t v63 = v53;
    unint64_t v89 = v55;
    sub_1000182F0(v29, v99);
    sub_1001782BC(v60, v62);
    sub_100016F9C(v56, v58);
    uint64_t v64 = v101;
    unint64_t v94 = v102;
    uint64_t v65 = String.utf8Data.getter(0x7463656E6E6F63LL, 0xE700000000000000LL);
    unint64_t v67 = v66;
    uint64_t v68 = v99;
    sub_10001736C(v29, v99);
    uint64_t v95 = v29;
    sub_1004DF7EC(v29, v68, v65, v67, 32LL);
    uint64_t v70 = v69;
    uint64_t v72 = v71;
    uint64_t v73 = v63;
    sub_1000182F0(v95, v99);
    sub_1001782BC(v70, v72);
    uint64_t v100 = 0LL;
    sub_100016F9C(v65, v67);
    uint64_t v88 = v101;
    unint64_t v87 = v102;
    id v74 = objc_allocWithZone(&OBJC_CLASS___NSNumber);
    id v97 = [v74 initWithUnsignedLongLong:v97];
    id v75 = objc_allocWithZone(&OBJC_CLASS___NSNumber);
    id v76 = [v75 initWithUnsignedLongLong:v96];
    id v77 = objc_allocWithZone(&OBJC_CLASS___SPCommandKey);
    Class v78 = Data._bridgeToObjectiveC()().super.isa;
    Class v96 = v78;
    Class v79 = Data._bridgeToObjectiveC()().super.isa;
    unint64_t v80 = v89;
    Class v81 = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v82 = v90;
    Class v83 = v78;
    uint64_t v84 = v97;
    id v28 = [v77 initWithBeaconingKey:v90 commandKey:v83 connectionToken:v79 nearbyToken:v81 primaryIndex:v97 secondaryIndex:v76 type:1];

    sub_100016F9C(v73, v80);
    sub_100016F9C(v88, v87);
    sub_100016F9C(v64, v94);

    sub_1000182F0(v95, v99);
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v98 + 8))(v91, v92);
    a4 = v93;
LABEL_10:
    *a4 = v28;
    return result;
  }

  sub_100016F9C(v43, v45);
  sub_1000182F0(v29, v16);
  uint64_t v101 = 0LL;
  unint64_t v102 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(32LL);
  v85._object = (void *)0x800000010085B8E0LL;
  v85._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v85);
  uint64_t v110 = v46;
  uint64_t v86 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  _print_unlocked<A, B>(_:_:)( &v110,  &v101,  v86,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v101,  v102,  "searchpartyd/KeyRepresentable.swift",  35LL,  2LL,  415LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_1002A2870(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v54 = a2;
  uint64_t v56 = a3;
  uint64_t v57 = a4;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v62 = *(void *)(v5 - 8);
  uint64_t v63 = v5;
  __chkstk_darwin(v5);
  uint64_t v61 = (char *)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v59 = *(void *)(v7 - 8);
  uint64_t v60 = v7;
  __chkstk_darwin(v7);
  unint64_t v58 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v55 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v55 - 8);
  __chkstk_darwin(v55);
  uint64_t v51 = v10;
  unint64_t v52 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for TimeBasedKeysCriteria(0LL);
  uint64_t v49 = *(void *)(v11 - 8);
  uint64_t v12 = *(void *)(v49 + 64);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  LODWORD(v50) = static os_log_type_t.default.getter(v13);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v15 = qword_100A2B030;
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v16, 112LL, 7LL);
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v18 = UUID.uuidString.getter(v17);
  uint64_t v20 = v19;
  *(void *)(v17 + 56) = &type metadata for String;
  unint64_t v21 = sub_1000226F4();
  *(void *)(v17 + 64) = v21;
  *(void *)(v17 + 32) = v18;
  *(void *)(v17 + sub_10016CF88(v0 + 40) = v20;
  uint64_t v22 = v54;
  TimeBasedKeysCriteria.description.getter();
  *(void *)(v17 + 96) = &type metadata for String;
  *(void *)(v17 + 104) = v21;
  *(void *)(v17 + 72) = v23;
  *(void *)(v17 + 80) = v24;
  os_log(_:dso:log:_:_:)( v50,  &_mh_execute_header,  v15,  "commandKeys for uuid %{mask.hash}@, criteria %{public}@.",  56LL,  2LL,  v17);
  swift_bridgeObjectRelease();
  uint64_t v25 = v53;
  uint64_t v50 = *(void *)(v53 + 136);
  uint64_t v26 = swift_allocObject(&unk_10094D470, 24LL, 7LL);
  swift_weakInit(v26 + 16, v25);
  sub_10001DC4C( v22,  (uint64_t)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  type metadata accessor for TimeBasedKeysCriteria);
  id v27 = v52;
  uint64_t v28 = v55;
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))(v52, a1, v55);
  uint64_t v29 = *(unsigned __int8 *)(v49 + 80);
  uint64_t v30 = (v29 + 16) & ~v29;
  unint64_t v31 = (v12 + v30 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v32 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v33 = (v32 + v31 + 8) & ~v32;
  unint64_t v34 = (v51 + v33 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v35 = swift_allocObject(&unk_10094DC90, v34 + 16, v29 | v32 | 7);
  sub_10002218C((uint64_t)v14, v35 + v30, type metadata accessor for TimeBasedKeysCriteria);
  *(void *)(v35 + v31) = v26;
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))(v35 + v33, v27, v28);
  id v36 = (void *)(v35 + v34);
  uint64_t v37 = v57;
  *id v36 = v56;
  v36[1] = v37;
  aBlock[4] = sub_1002DAA90;
  aBlock[5] = v35;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10094DCA8;
  Class v38 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v39 = swift_retain();
  uint64_t v40 = v58;
  static DispatchQoS.unspecified.getter(v39);
  uint64_t v64 = _swiftEmptyArrayStorage;
  uint64_t v41 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v42 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v43 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  unint64_t v44 = v61;
  uint64_t v45 = v42;
  uint64_t v46 = v63;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v64, v45, v43, v63, v41);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v40, v44, v38);
  _Block_release(v38);
  (*(void (**)(char *, uint64_t))(v62 + 8))(v44, v46);
  (*(void (**)(char *, uint64_t))(v59 + 8))(v40, v60);
  swift_release();
  return swift_release();
}

void sub_1002A2CA4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v14[1] = a5;
  v14[2] = a4;
  uint64_t v6 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v6);
  uint64_t v7 = type metadata accessor for DateInterval(0LL);
  uint64_t v8 = __chkstk_darwin(v7);
  __chkstk_darwin(v8);
  uint64_t v9 = type metadata accessor for TimeBasedKeysCriteria(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v14 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(a1, (uint64_t)v11, v12);
  uint64_t v13 = (char *)sub_1002A2DD4 + 4 * byte_1007F8E60[swift_getEnumCaseMultiPayload(v11, v9)];
  __asm { BR              X10 }

uint64_t sub_1002A2DD4()
{
  if (swift_weakLoadStrong(v4))
  {
    uint64_t v7 = sub_10029DEA8(v0, v3);
    swift_release();
    (*(void (**)(uint64_t))(v6 - 112))(v7);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v8 = static os_log_type_t.error.getter(0LL);
    if (qword_10099B720 != -1) {
      swift_once(&qword_10099B720, sub_10065128C);
    }
    uint64_t v9 = qword_100A2B030;
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v11 = swift_allocObject(v10, 72LL, 7LL);
    *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v12 = UUID.uuidString.getter(v11);
    uint64_t v14 = v13;
    *(void *)(v11 + 56) = &type metadata for String;
    *(void *)(v11 + 64) = sub_1000226F4();
    *(void *)(v11 + 32) = v12;
    *(void *)(v11 + sub_10016CF88(v0 + 40) = v14;
    os_log(_:dso:log:_:_:)( v8,  &_mh_execute_header,  v9,  "Failed to retrieve command keys for %{mask.hash}@",  49LL,  2LL,  v11);
    swift_bridgeObjectRelease();
    (*(void (**)(void *))(v6 - 112))(_swiftEmptyArrayStorage);
  }

  return (*(uint64_t (**)(uint64_t, uint64_t))(v1 + 8))(v3, v2);
}

unint64_t sub_1002A3250(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009AA840);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v162 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v162 - v6;
  uint64_t v8 = type metadata accessor for OwnedBeaconGroup(0LL);
  __chkstk_darwin(v8);
  uint64_t v181 = (uint64_t)&v162 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v197 = *(void *)(v10 - 8);
  uint64_t v198 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v184 = (char *)&v162 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v162 - v13;
  uint64_t v15 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v162 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  id v172 = (char *)&v162 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v180 = (char *)&v162 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  Class v177 = (char *)&v162 - v24;
  __chkstk_darwin(v23);
  uint64_t v26 = (__int128 *)((char *)&v162 - v25);
  uint64_t v27 = type metadata accessor for UUID(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v162 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v191 = a1;
  sub_1001CC778();
  sub_1006F2C58(v31, (uint64_t)v26);
  swift_bridgeObjectRelease();
  uint64_t v185 = *(unsigned int (**)(__int128 *, uint64_t, uint64_t))(v28 + 48);
  if (v185(v26, 1LL, v27) == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = &qword_10099D8A0;
    uint64_t v33 = v26;
LABEL_62:
    sub_100015794((uint64_t)v33, v32);
    if (qword_10099B330 != -1) {
      swift_once(&qword_10099B330, sub_100374304);
    }
    uint64_t v156 = type metadata accessor for Logger(0LL);
    uint64_t v157 = sub_10000A720(v156, (uint64_t)qword_100A2A748);
    id v158 = (os_log_s *)Logger.logObject.getter(v157);
    os_log_type_t v159 = static os_log_type_t.error.getter(v158);
    if (os_log_type_enabled(v158, v159))
    {
      uint64_t v160 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v160 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v158,  v159,  "Missing member record to compute group taskInfos!",  v160,  2u);
      swift_slowDealloc(v160, -1LL, -1LL);
    }

    return sub_10041362C((uint64_t)_swiftEmptyArrayStorage);
  }

  (*(void (**)(char *, __int128 *, uint64_t))(v28 + 32))(v30, v26, v27);
  uint64_t v170 = *(void *)(v186 + 256);
  sub_100504C28((uint64_t)v30, (uint64_t)&v202);
  if (!v203)
  {
    (*(void (**)(char *, uint64_t))(v28 + 8))(v30, v27);
    swift_bridgeObjectRelease();
    uint64_t v32 = (uint64_t *)&unk_1009A9C40;
    uint64_t v33 = &v202;
    goto LABEL_62;
  }

  id v169 = v30;
  uint64_t v190 = v28;
  uint64_t v188 = v27;
  sub_100012EC0(&v202, (uint64_t)&v204);
  uint64_t v34 = v205;
  uint64_t v35 = v206;
  id v36 = sub_100012ED8(&v204, v205);
  uint64_t v37 = sub_1002C32D4((uint64_t)v36, v186, v34, v35);
  uint64_t v39 = v37[2];
  uint64_t v168 = v37;
  if (v39)
  {
    uint64_t v166 = v7;
    uint64_t v164 = v5;
    uint64_t v192 = 0LL;
    uint64_t v40 = (void **)(v37 + 4);
    Class v175 = &v200;
    id v41 = &_swiftEmptyDictionarySingleton;
    uint64_t v182 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_soundPlaybackManager;
    uint64_t v183 = SPBeaconTaskNamePlaySound;
    uint64_t v171 = SPBeaconTaskNameStopSound;
    uint64_t v167 = SPBeaconTaskNameEnableLostMode;
    uint64_t v165 = SPBeaconTaskNameDisableLostMode;
    uint64_t v163 = SPBeaconTaskNameEnableNotifyWhenFound;
    *(void *)&__int128 v38 = 141558531LL;
    __int128 v174 = v38;
    id v173 = (char *)&type metadata for Any + 8;
    uint64_t v176 = v8;
    os_log_type_t v187 = v14;
    uint64_t v42 = v188;
    uint64_t v43 = v190;
    uint64_t v44 = (uint64_t)v177;
    uint64_t v179 = v18;
    while (1)
    {
      unint64_t v194 = v40;
      id v195 = v41;
      uint64_t v50 = *v40;
      *(void *)&__int128 v202 = 2LL;
      id v51 = v50;
      Date.init()(v51);
      uint64_t v193 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v43 + 56);
      v193(v44, 1LL, 1LL, v42);
      uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v183);
      uint64_t v54 = v53;
      uint64_t v55 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      BOOL v57 = v52 == v55 && v54 == v56;
      uint64_t v196 = v39;
      if (v57)
      {
        uint64_t v59 = swift_bridgeObjectRelease_n(v54, 2LL);
LABEL_17:
        id v189 = v51;
        __chkstk_darwin(v59);
        *(&v162 - 2) = v66;
        *(&v162 - 1) = v67;
        uint64_t v68 = sub_100022898(0LL, (unint64_t *)&unk_1009AE4B0, &OBJC_CLASS___SPBeaconTaskInformation_ptr);
        uint64_t v69 = v192;
        OS_dispatch_queue.sync<A>(execute:)(sub_1002DDFD4, &v162 - 4, v68);
        uint64_t v192 = v69;
        id v70 = v201;
        if (qword_10099B330 != -1) {
          swift_once(&qword_10099B330, sub_100374304);
        }
        uint64_t v71 = type metadata accessor for Logger(0LL);
        sub_10000A720(v71, (uint64_t)qword_100A2A748);
        uint64_t v72 = v181;
        sub_10001DC4C(v191, v181, type metadata accessor for OwnedBeaconGroup);
        id v73 = v70;
        id v74 = (os_log_s *)Logger.logObject.getter(v73);
        os_log_type_t v75 = static os_log_type_t.info.getter(v74);
        if (os_log_type_enabled(v74, v75))
        {
          uint64_t v76 = swift_slowAlloc(32LL, -1LL);
          uint64_t v77 = v72;
          id v178 = (void *)swift_slowAlloc(64LL, -1LL);
          id v201 = v178;
          *(_DWORD *)uint64_t v76 = v174;
          uint64_t v199 = 1752392040LL;
          Class v78 = v175;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v175, v76 + 4, v76 + 12);
          *(_WORD *)(v76 + 12) = 2081;
          uint64_t v79 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v80 = dispatch thunk of CustomStringConvertible.description.getter(v188, v79);
          uint64_t v199 = sub_1003F11D4(v80, v81, (uint64_t *)&v201);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v78, v76 + 14, v76 + 22);
          swift_bridgeObjectRelease();
          sub_100018C68(v77, type metadata accessor for OwnedBeaconGroup);
          *(_WORD *)(v76 + 22) = 2080;
          id v82 = [v73 debugDescription];
          uint64_t v83 = static String._unconditionallyBridgeFromObjectiveC(_:)(v82);
          unint64_t v85 = v84;

          uint64_t v86 = v83;
          uint64_t v8 = v176;
          uint64_t v199 = sub_1003F11D4(v86, v85, (uint64_t *)&v201);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v199, v78, v76 + 24, v76 + 32);

          uint64_t v44 = (uint64_t)v177;
          swift_bridgeObjectRelease();
          _os_log_impl( (void *)&_mh_execute_header,  v74,  v75,  "Play taskInfo for group %{private,mask.hash}s: %s",  (uint8_t *)v76,  0x20u);
          unint64_t v87 = v178;
          swift_arrayDestroy(v178, 2LL, v173);
          swift_slowDealloc(v87, -1LL, -1LL);
          uint64_t v88 = v76;
          uint64_t v14 = v187;
          swift_slowDealloc(v88, -1LL, -1LL);
        }

        else
        {
          sub_100018C68(v72, type metadata accessor for OwnedBeaconGroup);
        }

        unint64_t v89 = v193;
        *(void *)&__int128 v202 = [v73 state];
        id v90 = [v73 lastUpdated];
        __int128 v91 = v184;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v90);

        uint64_t v93 = v197;
        uint64_t v92 = v198;
        (*(void (**)(char *, uint64_t))(v197 + 8))(v14, v198);
        (*(void (**)(char *, char *, uint64_t))(v93 + 32))(v14, v91, v92);
        id v94 = [v73 error];
        id v95 = [v73 commandIdentifier];
        id v51 = v189;
        if (v95)
        {
          Class v96 = v95;
          uint64_t v97 = (uint64_t)v180;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v95);

          uint64_t v98 = 0LL;
          uint64_t v42 = v188;
        }

        else
        {
          uint64_t v98 = 1LL;
          uint64_t v42 = v188;
          uint64_t v97 = (uint64_t)v180;
        }

        v89(v97, v98, 1LL, v42);
        sub_1000D4D50(v97, v44, &qword_10099D8A0);
        uint64_t v18 = v179;
        goto LABEL_26;
      }

      char v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v52, v54, v55, v56, 0LL);
      swift_bridgeObjectRelease();
      uint64_t v59 = swift_bridgeObjectRelease();
      if ((v58 & 1) != 0) {
        goto LABEL_17;
      }
      uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v171);
      uint64_t v62 = v61;
      uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      if (v60 == v64 && v62 == v63)
      {
        uint64_t v65 = swift_bridgeObjectRelease_n(v62, 2LL);
LABEL_32:
        __chkstk_darwin(v65);
        *(&v162 - 2) = v105;
        *(&v162 - 1) = v106;
        uint64_t v107 = sub_100022898(0LL, (unint64_t *)&unk_1009AE4B0, &OBJC_CLASS___SPBeaconTaskInformation_ptr);
        uint64_t v108 = v192;
        OS_dispatch_queue.sync<A>(execute:)(sub_1002DD7AC, &v162 - 4, v107);
        uint64_t v192 = v108;
        id v109 = v201;
        *(void *)&__int128 v202 = [v201 state];
        id v110 = [v109 lastUpdated];
        Class v111 = v184;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v110);

        uint64_t v113 = v197;
        uint64_t v112 = v198;
        (*(void (**)(char *, uint64_t))(v197 + 8))(v14, v198);
        (*(void (**)(char *, char *, uint64_t))(v113 + 32))(v14, v111, v112);
        id v94 = [v109 error];
        id v114 = [v109 commandIdentifier];
        if (v114)
        {
          id v115 = v114;
          char v116 = v172;
          static UUID._unconditionallyBridgeFromObjectiveC(_:)(v114);

          uint64_t v117 = 0LL;
          id v109 = v115;
        }

        else
        {
          uint64_t v117 = 1LL;
          char v116 = v172;
        }

        uint64_t v118 = v188;
        v193((uint64_t)v116, v117, 1LL, v188);
        uint64_t v119 = (uint64_t)v116;
        uint64_t v42 = v118;
        sub_1000D4D50(v119, v44, &qword_10099D8A0);
        goto LABEL_26;
      }

      char v104 = _stringCompareWithSmolCheck(_:_:expecting:)(v60, v62, v64, v63, 0LL);
      swift_bridgeObjectRelease();
      uint64_t v65 = swift_bridgeObjectRelease();
      if ((v104 & 1) != 0) {
        goto LABEL_32;
      }
      uint64_t v120 = static String._unconditionallyBridgeFromObjectiveC(_:)(v167);
      uint64_t v122 = v121;
      uint64_t v124 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      if (v120 == v124 && v122 == v123) {
        break;
      }
      char v125 = _stringCompareWithSmolCheck(_:_:expecting:)(v120, v122, v124, v123, 0LL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v125 & 1) != 0) {
        goto LABEL_40;
      }
      uint64_t v133 = static String._unconditionallyBridgeFromObjectiveC(_:)(v165);
      uint64_t v135 = v134;
      uint64_t v137 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
      if (v133 == v137 && v135 == v136)
      {
        swift_bridgeObjectRelease_n(v135, 2LL);
      }

      else
      {
        char v138 = _stringCompareWithSmolCheck(_:_:expecting:)(v133, v135, v137, v136, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v138 & 1) == 0)
        {
          uint64_t v146 = static String._unconditionallyBridgeFromObjectiveC(_:)(v163);
          uint64_t v148 = v147;
          uint64_t v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(v51);
          if (v146 == v150 && v148 == v149)
          {
            swift_bridgeObjectRelease_n(v148, 2LL);
            goto LABEL_59;
          }

          char v151 = _stringCompareWithSmolCheck(_:_:expecting:)(v146, v148, v150, v149, 0LL);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v151 & 1) != 0)
          {
LABEL_59:
            sub_1001CC778();
            uint64_t v153 = v152;
            uint64_t v154 = v186;
            swift_retain();
            uint64_t v155 = v192;
            sub_1002C3E30(v153, v154, v44, &v202);
            uint64_t v192 = v155;
            uint64_t v42 = v188;
            swift_bridgeObjectRelease();
            swift_release();
          }

          id v94 = 0LL;
          goto LABEL_26;
        }
      }

      unint64_t v139 = sub_100577004(v191 + *(int *)(v8 + 24));
      uint64_t v140 = v139[2];
      uint64_t v141 = type metadata accessor for LostModeRecord(0LL);
      uint64_t v142 = *(void *)(v141 - 8);
      if (v140)
      {
        uint64_t v143 = (uint64_t)v164;
        sub_10001DC4C( (uint64_t)v139 + ((*(unsigned __int8 *)(v142 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v142 + 80)),  (uint64_t)v164,  type metadata accessor for LostModeRecord);
        uint64_t v144 = 0LL;
      }

      else
      {
        uint64_t v144 = 1LL;
        uint64_t v143 = (uint64_t)v164;
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v142 + 56))(v143, v144, 1LL, v141);
      swift_bridgeObjectRelease();
      int v145 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v142 + 48))(v143, 1LL, v141);
      sub_100015794(v143, &qword_1009AA840);
      uint64_t v8 = v176;
      if (v145 == 1)
      {
LABEL_53:
        id v94 = 0LL;
        *(void *)&__int128 v202 = 0LL;
        goto LABEL_54;
      }

uint64_t sub_1002A4370(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7)
{
  uint64_t v52 = a7;
  uint64_t v57 = a6;
  char v58 = a3;
  uint64_t v54 = a4;
  uint64_t v55 = a5;
  uint64_t v9 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v53 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v56 = (uint64_t)&v51 - v12;
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  id v51 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v51 - v20;
  uint64_t v22 = type metadata accessor for UUID(0LL);
  uint64_t v59 = *(void *)(v22 - 8);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v51 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = a2[3];
  uint64_t v25 = a2[4];
  sub_100012ED8(a2, v26);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v25 + 8) + 8LL) + 32LL))(v26);
  uint64_t v27 = (void *)(a1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorByBeaconIdentifier);
  __n128 v28 = swift_beginAccess(v27, v61, 0LL, 0LL);
  uint64_t v29 = *v27;
  if (!*(void *)(*v27 + 16LL)) {
    goto LABEL_7;
  }
  swift_bridgeObjectRetain(*v27);
  unint64_t v30 = sub_10030D124((uint64_t)v24);
  if ((v31 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    (*(void (**)(char *, uint64_t, __n128))(v59 + 8))(v24, v22, v28);
    *char v58 = 2LL;
    goto LABEL_8;
  }

  uint64_t v32 = *(void *)(*(void *)(v29 + 56) + 8 * v30);
  swift_retain();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v59 + 8))(v24, v22);
  uint64_t v33 = sub_100022898(0LL, (unint64_t *)&unk_1009AE4B0, &OBJC_CLASS___SPBeaconTaskInformation_ptr);
  swift_retain();
  OS_dispatch_queue.sync<A>(execute:)(v52, v32, v33);
  swift_release();
  id v34 = v60;
  id v35 = [v60 state];
  *char v58 = v35;
  if (!v34)
  {
LABEL_8:
    char v41 = 1;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v17 + 56))(v15, 1LL, 1LL, v16);
    id v34 = 0LL;
    uint64_t v40 = v54;
    goto LABEL_9;
  }

  id v36 = [v34 lastUpdated];
  uint64_t v37 = v51;
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v36);

  __int128 v38 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v38(v15, v37, v16);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v17 + 56))(v15, 0LL, 1LL, v16);
  int v39 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v17 + 48))(v15, 1LL, v16);
  uint64_t v40 = v54;
  if (v39 != 1)
  {
    v38(v21, v15, v16);
    (*(void (**)(uint64_t, char *, uint64_t))(v17 + 40))(v40, v21, v16);
    goto LABEL_12;
  }

  char v41 = 0;
LABEL_9:
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))(v21, v40, v16);
  sub_100015794((uint64_t)v15, (uint64_t *)&unk_10099D720);
  (*(void (**)(uint64_t, char *, uint64_t))(v17 + 40))(v40, v21, v16);
  if ((v41 & 1) != 0)
  {
    uint64_t v42 = *v55;
    *uint64_t v55 = 0LL;
    swift_errorRelease(v42);
    swift_release();
    uint64_t v43 = v56;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56))(v56, 1LL, 1LL, v22);
    return sub_1000D4D50(v43, v57, &qword_10099D8A0);
  }

uint64_t sub_1002A4818(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = static os_log_type_t.info.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v6 = qword_100A2B008;
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v8 = swift_allocObject(v7, 112LL, 7LL);
  *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v23 = *v2;
  uint64_t v9 = sub_100004AEC(&qword_1009A7D50);
  uint64_t v10 = String.init<A>(describing:)(&v23, v9);
  uint64_t v12 = v11;
  *(void *)(v8 + 56) = &type metadata for String;
  unint64_t v13 = sub_1000226F4();
  *(void *)(v8 + 32) = v10;
  *(void *)(v8 + sub_10016CF88(v0 + 40) = v12;
  *(void *)(v8 + 96) = &type metadata for String;
  *(void *)(v8 + 104) = v13;
  *(void *)(v8 + 64) = v13;
  *(void *)(v8 + 72) = 0xD000000000000017LL;
  *(void *)(v8 + 80) = 0x800000010085BAD0LL;
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "%@: %@", 6LL, 2LL, v8);
  swift_bridgeObjectRelease();
  uint64_t v14 = sub_100004AEC(&qword_1009A7D78);
  uint64_t inited = swift_initStackObject(v14, &v22);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v16 = (void *)SPBeaconTypeDurian;
  *(void *)(inited + 32) = SPBeaconTypeDurian;
  id v17 = v16;
  uint64_t v18 = sub_1007686A4(inited);
  swift_setDeallocating(inited);
  type metadata accessor for SPBeaconType(0LL);
  swift_arrayDestroy(inited + 32, 1LL, v19);
  uint64_t v20 = swift_allocObject(&unk_10094D1F0, 32LL, 7LL);
  *(void *)(v20 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v20 + 24) = a2;
  swift_retain();
  sub_100299384((uint64_t)v18, 0, 0, (uint64_t)sub_1002D7218, v20);
  swift_bridgeObjectRelease();
  return swift_release();
}

Swift::Int sub_1002A4A08(uint64_t a1, void (*a2)(void *))
{
  if ((a1 & 0xC000000000000001LL) != 0)
  {
    uint64_t v3 = &_swiftEmptySetSingleton;
    uint64_t v26 = &_swiftEmptySetSingleton;
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v5 = __CocoaSet.makeIterator()(v4);
    uint64_t v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = sub_100022898(0LL, (unint64_t *)&unk_1009A0B20, &OBJC_CLASS___SPBeacon_ptr);
      do
      {
        uint64_t v24 = v7;
        swift_dynamicCast(&v25, &v24, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
        id v10 = [v25 role];

        id v11 = v25;
        if (v10)
        {
          uint64_t v12 = v26;
          unint64_t v13 = v26[2];
          if (v26[3] <= v13)
          {
            sub_1000C5BE4(v13 + 1);
            uint64_t v12 = v26;
          }

          Swift::Int result = NSObject._rawHashValue(seed:)(v12[5]);
          uint64_t v14 = v12 + 7;
          uint64_t v15 = -1LL << *((_BYTE *)v12 + 32);
          unint64_t v16 = result & ~v15;
          unint64_t v17 = v16 >> 6;
          if (((-1LL << v16) & ~v12[(v16 >> 6) + 7]) != 0)
          {
            unint64_t v18 = __clz(__rbit64((-1LL << v16) & ~v12[(v16 >> 6) + 7])) | v16 & 0x7FFFFFFFFFFFFFC0LL;
          }

          else
          {
            char v19 = 0;
            unint64_t v20 = (unint64_t)(63 - v15) >> 6;
            do
            {
              if (++v17 == v20 && (v19 & 1) != 0)
              {
                __break(1u);
                return result;
              }

              BOOL v21 = v17 == v20;
              if (v17 == v20) {
                unint64_t v17 = 0LL;
              }
              v19 |= v21;
              uint64_t v22 = v14[v17];
            }

            while (v22 == -1);
            unint64_t v18 = __clz(__rbit64(~v22)) + (v17 << 6);
          }

          *(void *)((char *)v14 + ((v18 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v18;
          *(void *)(v12[6] + 8 * v18) = v11;
          ++v12[2];
        }

        else
        {
        }

        uint64_t v7 = __CocoaSet.Iterator.next()(result);
      }

      while (v7);
      uint64_t v3 = v26;
    }

    swift_release();
  }

  else
  {
    swift_bridgeObjectRetain(a1);
    uint64_t v3 = (void *)sub_1002B87DC(v23);
  }

  a2(v3);
  return swift_release();
}

uint64_t sub_1002A4C44(uint64_t a1, id a2)
{
  id v3 = [a2 roleId];
  uint64_t result = type metadata accessor for BeaconNamingRecord(0LL);
  *(void *)(a1 + *(int *)(result + 28)) = v3;
  return result;
}

uint64_t sub_1002A4C88(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_100004AEC(&qword_1009A7DE0);
  __chkstk_darwin(v9);
  id v11 = (uint64_t *)((char *)&v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v11, &qword_1009A7DE0);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v9);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v13 = *v11;
    uint64_t v14 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
    *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v29 = v13;
    swift_errorRetain(v13);
    uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v18 = String.init<A>(describing:)(&v29, v17);
    uint64_t v20 = v19;
    *(void *)(v16 + 56) = &type metadata for String;
    *(void *)(v16 + 64) = sub_1000226F4();
    *(void *)(v16 + 32) = v18;
    *(void *)(v16 + sub_10016CF88(v0 + 40) = v20;
    uint64_t v21 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v22 = (void *)static OS_os_log.default.getter(v21);
    os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  v22,  "Could not set role on the beacon. Error - %@",  44LL,  2LL,  v16);
    swift_bridgeObjectRelease();

    ((void (*)(void))a2)(0LL);
    return swift_errorRelease(v13);
  }

  else
  {
    uint64_t v24 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    id v25 = (void *)static OS_os_log.default.getter(v24);
    uint64_t v26 = static os_log_type_t.default.getter(v25);
    os_log(_:dso:log:type:_:)( "Successfully updated beacon with role.",  38LL,  2LL,  &_mh_execute_header,  v25,  v26,  _swiftEmptyArrayStorage);

    uint64_t v27 = sub_1001455C0(a5, *(void *)(a4 + 256));
    a2();

    return sub_100015794((uint64_t)v11, &qword_1009A7DE0);
  }

id sub_1002A4EA4(uint64_t a1, id a2, uint64_t a3, uint64_t a4, void *a5)
{
  id v10 = [a2 name];
  if (v10)
  {

    id v11 = (void *)(a1 + *(int *)(type metadata accessor for BeaconNamingRecord(0LL) + 32));
    swift_bridgeObjectRetain(a4);
    swift_bridgeObjectRelease();
    *id v11 = a3;
    v11[1] = a4;
  }

  uint64_t v12 = a5[3];
  uint64_t v13 = a5[4];
  sub_100012ED8(a5, v12);
  uint64_t v14 = (void *)(*(uint64_t (**)(id, uint64_t, uint64_t))(v13 + 200))([a2 roleId], v12, v13);
  if (v14)
  {
    uint64_t v15 = v14;
    id v16 = [v14 roleId];

    *(void *)(a1 + *(int *)(type metadata accessor for BeaconNamingRecord(0LL) + 28)) = v16;
  }

  id result = [a2 emoji];
  if (result)
  {
    uint64_t v18 = result;
    uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(result);
    uint64_t v21 = v20;

    uint64_t v22 = (uint64_t *)(a1 + *(int *)(type metadata accessor for BeaconNamingRecord(0LL) + 36));
    id result = (id)swift_bridgeObjectRelease();
    *uint64_t v22 = v19;
    v22[1] = v21;
  }

  return result;
}

uint64_t sub_1002A4FD8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v69 = a2;
  uint64_t v70 = a5;
  uint64_t v68 = a3;
  uint64_t v65 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v65);
  uint64_t v64 = (uint64_t)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v8);
  id v10 = (char *)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v67 = (uint64_t)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v64 - v16;
  __chkstk_darwin(v15);
  uint64_t v66 = (uint64_t)&v64 - v18;
  uint64_t v19 = sub_100004AEC(&qword_1009A7DE0);
  __chkstk_darwin(v19);
  uint64_t v21 = (uint64_t *)((char *)&v64 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v21, &qword_1009A7DE0);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v21, v19);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v23 = *v21;
    uint64_t v24 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    uint64_t v25 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v26 = swift_allocObject(v25, 72LL, 7LL);
    *(_OWORD *)(v26 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    v73[0] = v23;
    swift_errorRetain(v23);
    uint64_t v27 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v28 = String.init<A>(describing:)(v73, v27);
    uint64_t v30 = v29;
    *(void *)(v26 + 56) = &type metadata for String;
    *(void *)(v26 + 64) = sub_1000226F4();
    *(void *)(v26 + 32) = v28;
    *(void *)(v26 + sub_10016CF88(v0 + 40) = v30;
    uint64_t v31 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v32 = (void *)static OS_os_log.default.getter(v31);
    os_log(_:dso:log:_:_:)(v24, &_mh_execute_header, v32, "Could not update beacon name. Error - %@", 40LL, 2LL, v26);
    swift_bridgeObjectRelease();

    a4(0LL);
    return swift_errorRelease(v23);
  }

  uint64_t v34 = static os_log_type_t.default.getter(EnumCaseMultiPayload);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  os_log(_:dso:log:_:_:)( v34,  &_mh_execute_header,  qword_100A2B018,  "Successfully updated beacon name record",  39LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v35 = *(void *)(v69 + 256);
  sub_1004E696C(0xFu);
  type metadata accessor for Transaction(0LL);
  static Transaction.named<A>(_:with:)( "com.apple.searchpartyd.triggerSiriDeviceNameSync",  48LL,  2LL,  sub_1000220C8,  v35);
  uint64_t v36 = swift_retain();
  PassthroughSubject.send(_:)(v36);
  swift_release();
  sub_100504C28(v68, (uint64_t)&v71);
  if (!v72)
  {
    uint64_t v54 = sub_100015794((uint64_t)&v71, (uint64_t *)&unk_1009A9C40);
    uint64_t v55 = static os_log_type_t.error.getter(v54);
    uint64_t v56 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v57 = swift_allocObject(v56, 72LL, 7LL);
    *(_OWORD *)(v57 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v58 = UUID.uuidString.getter(v57);
    uint64_t v60 = v59;
    *(void *)(v57 + 56) = &type metadata for String;
    *(void *)(v57 + 64) = sub_1000226F4();
    *(void *)(v57 + 32) = v58;
    *(void *)(v57 + sub_10016CF88(v0 + 40) = v60;
    uint64_t v61 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v62 = (void *)static OS_os_log.default.getter(v61);
    os_log(_:dso:log:_:_:)(v55, &_mh_execute_header, v62, "Could not find just updated record: %@", 38LL, 2LL, v57);
    swift_bridgeObjectRelease();

    a4(0LL);
    return sub_100015794((uint64_t)v21, &qword_1009A7DE0);
  }

  sub_100012EC0(&v71, (uint64_t)v73);
  sub_100013044((uint64_t)v73, (uint64_t)&v71);
  uint64_t v37 = sub_100004AEC(&qword_1009B0530);
  char v38 = swift_dynamicCast(v10, &v71, v37, v11, 6LL);
  int v39 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v12 + 56);
  if ((v38 & 1) == 0)
  {
    v39(v10, 1LL, 1LL, v11);
    sub_100015794((uint64_t)v10, (uint64_t *)&unk_1009A9C30);
    a4(1LL);
LABEL_15:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v73);
    return sub_100015794((uint64_t)v21, &qword_1009A7DE0);
  }

  v39(v10, 0LL, 1LL, v11);
  uint64_t v40 = v66;
  sub_10002218C((uint64_t)v10, v66, type metadata accessor for OwnedBeaconRecord);
  sub_10001DC4C(v40, (uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
  sub_10001DC4C((uint64_t)v17, v67, type metadata accessor for OwnedBeaconRecord);
  uint64_t v41 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v42 = (v41 + 16) & ~v41;
  unint64_t v43 = (v13 + v42 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  id v44 = (void **)swift_allocObject(&unk_10094DC18, v43 + 16, v41 | 7);
  sub_10002218C((uint64_t)v17, (uint64_t)v44 + v42, type metadata accessor for OwnedBeaconRecord);
  uint64_t v45 = (uint64_t (**)(uint64_t))((char *)v44 + v43);
  uint64_t v46 = v40;
  uint64_t v47 = a4;
  *uint64_t v45 = a4;
  uint64_t v48 = v70;
  v45[1] = (uint64_t (*)(uint64_t))v70;
  swift_retain_n(v48, 2LL);
  uint64_t v49 = sub_1005777D8();
  if (!v49[2]
    || (uint64_t v50 = v40 + *(int *)(v11 + 24),
        uint64_t v51 = v64,
        sub_10001DC4C(v50, v64, type metadata accessor for StableIdentifier),
        int v52 = swift_getEnumCaseMultiPayload(v51, v65),
        sub_100018C68(v51, type metadata accessor for StableIdentifier),
        v52))
  {
    uint64_t v53 = v67;
    sub_1002A5680(v67, v47, v48);
    swift_release();
    swift_bridgeObjectRelease();
LABEL_14:
    sub_100018C68(v53, type metadata accessor for OwnedBeaconRecord);
    swift_release();
    sub_100018C68(v46, type metadata accessor for OwnedBeaconRecord);
    goto LABEL_15;
  }

  uint64_t v63 = *(void *)(v69 + 40);
  if (v63)
  {
    swift_retain();
    swift_retain();
    sub_10020B9D0((uint64_t)v49, v46, v63, (void (*)(uint64_t))sub_1002DA64C, v44);
    swift_bridgeObjectRelease();
    swift_release();
    swift_release_n(v44, 2LL);
    uint64_t v53 = v67;
    goto LABEL_14;
  }

  sub_100018C68(v67, type metadata accessor for OwnedBeaconRecord);
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1002A5680(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B4D8 != -1) {
    swift_once(&qword_10099B4D8, sub_1004AB71C);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_10000A720(v9, (uint64_t)qword_100A2AB18);
  uint64_t v10 = sub_10001DC4C(a1, (uint64_t)v8, type metadata accessor for OwnedBeaconRecord);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = swift_slowAlloc(22LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v13 = 141558275;
    uint64_t v21 = 1752392040LL;
    uint64_t v22 = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2081;
    v20[1] = a3;
    uint64_t v15 = type metadata accessor for UUID(0LL);
    uint64_t v16 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v15, v16);
    uint64_t v21 = sub_1003F11D4(v17, v18, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v8, type metadata accessor for OwnedBeaconRecord);
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "Successfully pushed record update to shares: %{private,mask.hash}s.",  (uint8_t *)v13,  0x16u);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v8, type metadata accessor for OwnedBeaconRecord);
  }

  return a2(1LL);
}

uint64_t sub_1002A58E4(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v7 = sub_100004AEC(&qword_1009A7DE0);
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v9, &qword_1009A7DE0);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v7);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v11 = *v9;
    uint64_t v12 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v13 = qword_100A2B018;
    uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
    *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v25 = v11;
    swift_errorRetain(v11);
    uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v17 = String.init<A>(describing:)(&v25, v16);
    uint64_t v19 = v18;
    *(void *)(v15 + 56) = &type metadata for String;
    *(void *)(v15 + 64) = sub_1000226F4();
    *(void *)(v15 + 32) = v17;
    *(void *)(v15 + sub_10016CF88(v0 + 40) = v19;
    os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "create BeaconNameRecord failed %@.", 34LL, 2LL, v15);
    swift_bridgeObjectRelease();
    a2(0LL);
    return swift_errorRelease(v11);
  }

  else
  {
    uint64_t v21 = static os_log_type_t.default.getter(EnumCaseMultiPayload);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v21,  &_mh_execute_header,  qword_100A2B018,  "create BeaconNameRecord success.",  32LL,  2LL,  _swiftEmptyArrayStorage);
    a2(1LL);
    uint64_t v22 = *(void *)(a4 + 256);
    sub_1004E696C(0xFu);
    type metadata accessor for Transaction(0LL);
    static Transaction.named<A>(_:with:)( "com.apple.searchpartyd.triggerSiriDeviceNameSync",  48LL,  2LL,  sub_1000220C8,  v22);
    uint64_t v23 = swift_retain();
    PassthroughSubject.send(_:)(v23);
    swift_release();
    return sub_100015794((uint64_t)v9, &qword_1009A7DE0);
  }

uint64_t sub_1002A5B5C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v71 = a5;
  uint64_t v69 = a4;
  uint64_t v74 = a3;
  uint64_t v75 = a2;
  uint64_t v76 = a1;
  uint64_t v8 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v8);
  uint64_t v77 = (uint64_t)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v73 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v68 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v65 = v12;
  __chkstk_darwin(v11);
  uint64_t v72 = (char *)&v61 - v13;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v67 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v66 = (char *)&v61 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v61 - v18;
  uint64_t v20 = static os_log_type_t.info.getter(v17);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v21 = qword_100A2B008;
  uint64_t v22 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v23 = swift_allocObject(v22, 112LL, 7LL);
  *(_OWORD *)(v23 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v70 = v6;
  v79[0] = *v6;
  uint64_t v24 = sub_100004AEC(&qword_1009A7D50);
  uint64_t v25 = String.init<A>(describing:)(v79, v24);
  uint64_t v27 = v26;
  *(void *)(v23 + 56) = &type metadata for String;
  unint64_t v28 = sub_1000226F4();
  *(void *)(v23 + 32) = v25;
  *(void *)(v23 + sub_10016CF88(v0 + 40) = v27;
  *(void *)(v23 + 96) = &type metadata for String;
  *(void *)(v23 + 104) = v28;
  *(void *)(v23 + 64) = v28;
  *(void *)(v23 + 72) = 0xD000000000000038LL;
  *(void *)(v23 + 80) = 0x800000010085B9D0LL;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "%@: %@", 6LL, 2LL, v23);
  swift_bridgeObjectRelease();
  if (qword_10099B4D8 != -1) {
    swift_once(&qword_10099B4D8, sub_1004AB71C);
  }
  uint64_t v29 = type metadata accessor for Logger(0LL);
  sub_10000A720(v29, (uint64_t)qword_100A2AB18);
  uint64_t v30 = v67;
  uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t))(v67 + 16);
  v63(v19, v75, v14);
  uint64_t v32 = v72;
  uint64_t v31 = v73;
  uint64_t v62 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v73 + 16);
  uint64_t v33 = v62(v72, v74, v10);
  uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
  os_log_type_t v35 = static os_log_type_t.default.getter(v34);
  BOOL v36 = os_log_type_enabled(v34, v35);
  uint64_t v37 = v76;
  if (v36)
  {
    uint64_t v38 = swift_slowAlloc(52LL, -1LL);
    uint64_t v61 = swift_slowAlloc(64LL, -1LL);
    v79[0] = v61;
    *(_DWORD *)uint64_t v38 = 134219011;
    uint64_t v78 = *(void *)&a6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, v79, v38 + 4, v38 + 12);
    *(_WORD *)(v38 + 12) = 2048;
    uint64_t v78 = v37;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, v79, v38 + 14, v38 + 22);
    *(_WORD *)(v38 + 22) = 2080;
    uint64_t v39 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter(v14, v39);
    uint64_t v78 = sub_1003F11D4(v40, v41, v79);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, v79, v38 + 24, v38 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v30 + 8))(v19, v14);
    *(_WORD *)(v38 + 32) = 2160;
    uint64_t v78 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, v79, v38 + 34, v38 + 42);
    *(_WORD *)(v38 + 42) = 2081;
    uint64_t v42 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    unint64_t v43 = v72;
    uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter(v10, v42);
    uint64_t v78 = sub_1003F11D4(v44, v45, v79);
    uint64_t v31 = v73;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v78, v79, v38 + 44, v38 + 52);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v31 + 8))(v43, v10);
    _os_log_impl( (void *)&_mh_execute_header,  v34,  v35,  "        setAlignmentUncertainty called: uncertainty: %f, index: %llu, date: %s, beaconUUID: %{private,mask.hash}s",  (uint8_t *)v38,  0x34u);
    uint64_t v46 = v61;
    swift_arrayDestroy(v61, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v46, -1LL, -1LL);
    swift_slowDealloc(v38, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v30 + 8))(v19, v14);
    (*(void (**)(char *, uint64_t))(v31 + 8))(v32, v10);
  }

  uint64_t v47 = v70;
  uint64_t v48 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v48 - 8) + 56LL))(v77, 1LL, 1LL, v48);
  uint64_t v49 = v68;
  v62(v68, v74, v10);
  uint64_t v50 = v66;
  v63(v66, v75, v14);
  uint64_t v51 = *(unsigned __int8 *)(v31 + 80);
  uint64_t v52 = (v51 + 56) & ~v51;
  unint64_t v53 = (v65 + v52 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v54 = *(unsigned __int8 *)(v30 + 80);
  uint64_t v55 = (v54 + v53 + 8) & ~v54;
  uint64_t v56 = (char *)swift_allocObject(&unk_10094D128, v55 + v64, v51 | v54 | 7);
  uint64_t v57 = v31;
  uint64_t v58 = (uint64_t)v56;
  *((void *)v56 + 2) = 0LL;
  *((void *)v56 + 3) = 0LL;
  uint64_t v59 = v69;
  *((void *)v56 + 4) = v47;
  *((void *)v56 + 5) = v59;
  *((void *)v56 + 6) = v71;
  (*(void (**)(char *, char *, uint64_t))(v57 + 32))(&v56[v52], v49, v10);
  *(void *)(v58 + v53) = v76;
  (*(void (**)(uint64_t, char *, uint64_t))(v30 + 32))(v58 + v55, v50, v14);
  swift_retain();
  swift_retain();
  sub_1003EDB00(v77, (uint64_t)&unk_1009A7D60, v58);
  return swift_release();
}

uint64_t sub_1002A6170( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[35] = a8;
  v8[36] = v23;
  v8[33] = a6;
  v8[34] = a7;
  v8[31] = a4;
  v8[32] = a5;
  uint64_t v9 = type metadata accessor for Date(0LL);
  v8[37] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[38] = v10;
  uint64_t v11 = *(void *)(v10 + 64);
  v8[39] = v11;
  v8[40] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for KeySyncMetadata(0LL);
  v8[41] = v12;
  v8[42] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  v8[43] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v8[44] = v14;
  uint64_t v15 = *(void *)(v14 + 64);
  v8[45] = v15;
  unint64_t v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v8[46] = swift_task_alloc(v16);
  v8[47] = swift_task_alloc(v16);
  v8[48] = swift_task_alloc(v16);
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  v8[49] = v17;
  v8[50] = swift_task_alloc((*(void *)(*(void *)(v17 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for OwnedBeaconRecord(0LL);
  v8[51] = v18;
  uint64_t v19 = *(void *)(v18 - 8);
  v8[52] = v19;
  uint64_t v20 = *(void *)(v19 + 64);
  v8[53] = v20;
  unint64_t v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v8[54] = swift_task_alloc(v21);
  v8[55] = swift_task_alloc(v21);
  return swift_task_switch(sub_1002A62B0, 0LL, 0LL);
}

uint64_t sub_1002A62B0()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 176, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    id v3 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 448) = v3;
    *id v3 = v0;
    v3[1] = sub_1002A63B0;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1002A63B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 448LL);
  *(void *)(*(void *)v1 + 456LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002A640C, 0LL, 0LL);
}

uint64_t sub_1002A640C()
{
  uint64_t v1 = *(void *)(v0 + 456);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v1)
  {
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 136, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 160))
    {
      sub_100012EC0((__int128 *)(v0 + 136), v0 + 96);
      sub_100012ED8((void *)(v0 + 96), *(void *)(v0 + 120));
      uint64_t v17 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
      id v3 = (void *)swift_task_alloc(unk_10099C894);
      *(void *)(v0 + 464) = v3;
      *id v3 = v0;
      v3[1] = sub_1002A6600;
      return v17();
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    if (qword_10099B4D8 != -1) {
      swift_once(&qword_10099B4D8, sub_1004AB71C);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2AB18);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No ObservationStoreService.", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    uint64_t v9 = *(void (**)(void))(v0 + 256);

    v9(0LL);
    uint64_t v10 = *(void *)(v0 + 432);
    uint64_t v11 = *(void *)(v0 + 400);
    uint64_t v13 = *(void *)(v0 + 376);
    uint64_t v12 = *(void *)(v0 + 384);
    uint64_t v14 = *(void *)(v0 + 368);
    uint64_t v15 = *(void *)(v0 + 336);
    uint64_t v16 = *(void *)(v0 + 320);
    swift_task_dealloc(*(void *)(v0 + 440));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  return result;
}

uint64_t sub_1002A6600(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 464LL);
  *(void *)(*(void *)v1 + 472LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002A665C, 0LL, 0LL);
}

uint64_t sub_1002A665C()
{
  uint64_t v1 = *(void *)(v0 + 472);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 96));
  if (v1) {
    return swift_task_switch(sub_1002A67F0, *(void *)(v0 + 472), 0LL);
  }
  if (qword_10099B4D8 != -1) {
    swift_once(&qword_10099B4D8, sub_1004AB71C);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2AB18);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "No beaconStoreActor.", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  uint64_t v8 = *(void (**)(void))(v0 + 256);

  v8(0LL);
  swift_release();
  uint64_t v9 = *(void *)(v0 + 432);
  uint64_t v10 = *(void *)(v0 + 400);
  uint64_t v12 = *(void *)(v0 + 376);
  uint64_t v11 = *(void *)(v0 + 384);
  uint64_t v13 = *(void *)(v0 + 368);
  uint64_t v14 = *(void *)(v0 + 336);
  uint64_t v15 = *(void *)(v0 + 320);
  swift_task_dealloc(*(void *)(v0 + 440));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002A67F0()
{
  uint64_t v1 = *(void *)(v0 + 472);
  uint64_t v2 = *(void *)(v0 + 384);
  uint64_t v4 = *(void *)(v0 + 352);
  uint64_t v3 = *(void *)(v0 + 360);
  uint64_t v5 = *(void *)(v0 + 344);
  uint64_t v6 = *(void *)(v0 + 272);
  *(void *)(v0 + 480) = *(void *)(v1 + 136);
  os_log_type_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 488) = v7;
  v7(v2, v6, v5);
  LODWORD(v8) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 584) = v8;
  uint64_t v8 = v8;
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_10094D150, v9 + v3, v8 | 7LL);
  *(void *)(v0 + 496) = v10;
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(void *)(v0 + 504) = v11;
  v11(v10 + v9, v2, v5);
  swift_retain();
  return swift_task_switch(sub_1002A68B4, 0LL, 0LL);
}

uint64_t sub_1002A68B4()
{
  uint64_t v1 = v0[62];
  uint64_t v2 = v0[60];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[64] = v3;
  v3[2] = v2;
  v3[3] = sub_1001B2A64;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[65] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1002A6960;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[50],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100117968,  v3,  v0[49]);
}

uint64_t sub_1002A6960()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 512LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 520LL));
  swift_release();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1002A69CC, 0LL, 0LL);
}

uint64_t sub_1002A69CC()
{
  uint64_t v1 = *(void *)(v0 + 400);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 416) + 48LL))( v1,  1LL,  *(void *)(v0 + 408)) == 1)
  {
    sub_100015794(v1, (uint64_t *)&unk_1009A9C30);
    if (qword_10099B4D8 != -1) {
      swift_once(&qword_10099B4D8, sub_1004AB71C);
    }
    uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 488);
    uint64_t v3 = *(void *)(v0 + 376);
    uint64_t v4 = *(void *)(v0 + 344);
    uint64_t v5 = *(void *)(v0 + 272);
    uint64_t v6 = type metadata accessor for Logger(0LL);
    sub_10000A720(v6, (uint64_t)qword_100A2AB18);
    uint64_t v7 = v2(v3, v5, v4);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.error.getter(v8);
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void *)(v0 + 376);
    uint64_t v12 = *(void *)(v0 + 344);
    uint64_t v13 = *(void *)(v0 + 352);
    if (v10)
    {
      uint64_t v14 = swift_slowAlloc(22LL, -1LL);
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      uint64_t v40 = v15;
      *(_DWORD *)uint64_t v14 = 141558275;
      *(void *)(v0 + 200) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v14 + 4, v14 + 12);
      *(_WORD *)(v14 + 12) = 2081;
      uint64_t v16 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v12, v16);
      *(void *)(v0 + 208) = sub_1003F11D4(v17, v18, &v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v14 + 14, v14 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "                    OwnedBeaconRecord with identifier not found - %{private,mask.hash}s",  (uint8_t *)v14,  0x16u);
      swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(void, void))(v13 + 8))(*(void *)(v0 + 376), *(void *)(v0 + 344));
    }

    (*(void (**)(void))(v0 + 256))(0LL);
    swift_release();
    swift_release();
    uint64_t v32 = *(void *)(v0 + 432);
    uint64_t v33 = *(void *)(v0 + 400);
    uint64_t v35 = *(void *)(v0 + 376);
    uint64_t v34 = *(void *)(v0 + 384);
    uint64_t v36 = *(void *)(v0 + 368);
    uint64_t v37 = *(void *)(v0 + 336);
    uint64_t v38 = *(void *)(v0 + 320);
    swift_task_dealloc(*(void *)(v0 + 440));
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 488);
    uint64_t v21 = *(void *)(v0 + 336);
    uint64_t v20 = *(void *)(v0 + 344);
    uint64_t v22 = *(int **)(v0 + 328);
    uint64_t v23 = *(void *)(v0 + 304);
    uint64_t v39 = *(void *)(v0 + 296);
    uint64_t v24 = *(void *)(v0 + 280);
    uint64_t v25 = *(void *)(v0 + 288);
    uint64_t v26 = *(void *)(v0 + 272);
    sub_10002218C(v1, *(void *)(v0 + 440), type metadata accessor for OwnedBeaconRecord);
    v19(v21, v26, v20);
    uint64_t v27 = (void *)(v21 + v22[6]);
    v27[3] = &type metadata for PrimaryIndex;
    v27[4] = sub_1000868E4();
    *uint64_t v27 = v24;
    uint64_t v28 = v21 + v22[7];
    uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 16);
    *(void *)(v0 + 528) = v29;
    v29(v28, v25, v39);
    *(_BYTE *)(v21 + v22[5]) = 2;
    uint64_t v30 = (void *)swift_task_alloc(dword_1009BCDBC);
    *(void *)(v0 + 536) = v30;
    *uint64_t v30 = v0;
    v30[1] = sub_1002A6D60;
    return sub_1006D55B8(*(void *)(v0 + 336));
  }

uint64_t sub_1002A6D60()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 536LL);
  *(void *)(*(void *)v1 + 544LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1002A7440;
  }
  else {
    uint64_t v3 = sub_1002A6DC4;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1002A6DC4()
{
  if (qword_10099B4D8 != -1) {
    swift_once(&qword_10099B4D8, sub_1004AB71C);
  }
  uint64_t v1 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v0[61];
  uint64_t v2 = v0[46];
  uint64_t v3 = v0[43];
  uint64_t v4 = v0[34];
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_10000A720(v5, (uint64_t)qword_100A2AB18);
  uint64_t v6 = v1(v2, v4, v3);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter(v7);
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = v0[46];
  uint64_t v11 = v0[43];
  uint64_t v12 = v0[44];
  if (v9)
  {
    uint64_t v13 = swift_slowAlloc(22LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    uint64_t v19 = v14;
    *(_DWORD *)uint64_t v13 = 141558275;
    v0[29] = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 29, v0 + 30, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2081;
    uint64_t v15 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter(v11, v15);
    v0[30] = sub_1003F11D4(v16, v17, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 30, v0 + 31, v13 + 14, v13 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v10, v11);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Successfully updated alignment uncertainty for beacon %{private,mask.hash}s",  (uint8_t *)v13,  0x16u);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(void, void))(v12 + 8))(v0[46], v0[43]);
  }

  return swift_task_switch(sub_1002A6FE4, v0[59], 0LL);
}

uint64_t sub_1002A6FE4()
{
  *(void *)(v0 + 552) = *(void *)(*(void *)(v0 + 472) + 136LL);
  swift_retain();
  return swift_task_switch(sub_1002A7028, 0LL, 0LL);
}

uint64_t sub_1002A7028()
{
  uint64_t v1 = v0[69];
  uint64_t v2 = v0[59];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[70] = v3;
  v3[2] = v1;
  v3[3] = sub_100117B18;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[71] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0LL);
  *uint64_t v4 = v0;
  v4[1] = sub_1002A70E4;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 28,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100117B20,  v3,  v5);
}

uint64_t sub_1002A70E4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 560);
  swift_task_dealloc(*(void *)(*v0 + 568));
  swift_release();
  swift_task_dealloc(v2);
  *(void *)(v1 + 576) = *(void *)(v1 + 224);
  return swift_task_switch(sub_1002A715C, 0LL, 0LL);
}

uint64_t sub_1002A715C()
{
  uint64_t v45 = *(void *)(v0 + 576);
  uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 528);
  uint64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 504);
  uint64_t v1 = *(unsigned __int8 *)(v0 + 584);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 488);
  uint64_t v43 = *(void *)(v0 + 440);
  uint64_t v37 = *(void *)(v0 + 432);
  uint64_t v33 = *(void *)(v0 + 424);
  uint64_t v31 = *(void *)(v0 + 416);
  uint64_t v3 = *(void *)(v0 + 384);
  uint64_t v38 = v3;
  uint64_t v35 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v46 = *(void *)(v0 + 336);
  uint64_t v5 = *(void *)(v0 + 320);
  uint64_t v36 = *(void *)(v0 + 312);
  uint64_t v6 = *(void *)(v0 + 296);
  uint64_t v32 = *(void *)(v0 + 304);
  uint64_t v39 = v6;
  uint64_t v7 = *(void *)(v0 + 288);
  uint64_t v8 = *(void *)(v0 + 272);
  uint64_t v42 = *(void *)(v0 + 264);
  uint64_t v9 = *(void *)(v0 + 248);
  uint64_t v40 = *(void *)(v0 + 280);
  uint64_t v41 = *(void *)(v0 + 256);
  sub_10001DC4C(v43, v37, type metadata accessor for OwnedBeaconRecord);
  uint64_t v10 = v3;
  uint64_t v11 = v4;
  v2(v10, v8, v4);
  v34(v5, v7, v6);
  uint64_t v12 = *(unsigned __int8 *)(v31 + 80);
  uint64_t v13 = (v12 + 24) & ~v12;
  unint64_t v14 = (v33 + v13 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v15 = (v1 + v14 + 8) & ~v1;
  uint64_t v16 = *(unsigned __int8 *)(v32 + 80);
  uint64_t v17 = (v35 + v16 + v15) & ~v16;
  uint64_t v18 = v1 | v12 | v16 | 7;
  unint64_t v19 = (v36 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v20 = swift_allocObject(&unk_10094D178, v19 + 16, v18);
  *(void *)(v20 + swift_weakDestroy(v0 + 16) = v9;
  sub_10002218C(v37, v20 + v13, type metadata accessor for OwnedBeaconRecord);
  *(void *)(v20 + v14) = v40;
  v44(v20 + v15, v38, v11);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v32 + 32))(v20 + v17, v5, v39);
  uint64_t v21 = (void *)(v20 + v19);
  *uint64_t v21 = v41;
  v21[1] = v42;
  type metadata accessor for Transaction(0LL);
  uint64_t v22 = swift_task_alloc(64LL);
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = v45;
  *(void *)(v22 + 24) = v43;
  *(_BYTE *)(v22 + 32) = 2;
  *(void *)(v22 + sub_10016CF88(v0 + 40) = sub_1002D6908;
  *(void *)(v22 + 48) = v20;
  swift_retain();
  swift_retain();
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.checkForMissingKeyMaps.forbeacon",  62LL,  2LL,  sub_1002D69C0);
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc(v22);
  sub_100018C68(v46, type metadata accessor for KeySyncMetadata);
  sub_100018C68(v43, type metadata accessor for OwnedBeaconRecord);
  uint64_t v23 = *(void *)(v0 + 432);
  uint64_t v24 = *(void *)(v0 + 400);
  uint64_t v26 = *(void *)(v0 + 376);
  uint64_t v25 = *(void *)(v0 + 384);
  uint64_t v27 = *(void *)(v0 + 368);
  uint64_t v28 = *(void *)(v0 + 336);
  uint64_t v29 = *(void *)(v0 + 320);
  swift_task_dealloc(*(void *)(v0 + 440));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002A7440()
{
  uint64_t v1 = *(void *)(v0 + 440);
  uint64_t v2 = *(void *)(v0 + 336);
  swift_release();
  sub_100018C68(v2, type metadata accessor for KeySyncMetadata);
  sub_100018C68(v1, type metadata accessor for OwnedBeaconRecord);
  if (qword_10099B4D8 != -1) {
    swift_once(&qword_10099B4D8, sub_1004AB71C);
  }
  uint64_t v3 = *(void *)(v0 + 544);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000A720(v4, (uint64_t)qword_100A2AB18);
  swift_errorRetain(v3);
  uint64_t v5 = swift_errorRetain(v3);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter(v6);
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 544);
  if (v8)
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v10 = 138543362;
    swift_errorRetain(v9);
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v10 + 4, v10 + 12);
    *uint64_t v11 = v12;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to update key sync %{public}@.", v10, 0xCu);
    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v11, 1LL, v13);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 544));
    swift_errorRelease(v9);
  }

  uint64_t v14 = *(void *)(v0 + 544);
  uint64_t v15 = *(void (**)(void))(v0 + 256);

  v15(0LL);
  swift_errorRelease(v14);
  swift_release();
  uint64_t v16 = *(void *)(v0 + 432);
  uint64_t v17 = *(void *)(v0 + 400);
  uint64_t v19 = *(void *)(v0 + 376);
  uint64_t v18 = *(void *)(v0 + 384);
  uint64_t v20 = *(void *)(v0 + 368);
  uint64_t v21 = *(void *)(v0 + 336);
  uint64_t v22 = *(void *)(v0 + 320);
  swift_task_dealloc(*(void *)(v0 + 440));
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002A76A0( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v45 = a6;
  uint64_t v46 = a7;
  uint64_t v42 = a4;
  uint64_t v43 = a5;
  uint64_t v37 = a1;
  unint64_t v38 = a3;
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v40 = *(void *)(v9 - 8);
  uint64_t v41 = v9;
  uint64_t v44 = *(void *)(v40 + 64);
  __chkstk_darwin(v9);
  uint64_t v48 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v47 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v47 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v47);
  uint64_t v36 = (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v35 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = v19;
  sub_1002A792C(a2, a3);
  uint64_t v20 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v19, 1LL, 1LL, v20);
  sub_10001DC4C(a2, (uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)&v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v42,  v47);
  uint64_t v22 = v40;
  uint64_t v21 = v41;
  (*(void (**)(char *, uint64_t, uint64_t))(v40 + 16))(v48, v43, v41);
  uint64_t v23 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v24 = (v23 + 32) & ~v23;
  uint64_t v25 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v26 = (v15 + v25 + v24) & ~v25;
  unint64_t v27 = (v12 + v26 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v28 = *(unsigned __int8 *)(v22 + 80);
  uint64_t v29 = (v28 + v27 + 8) & ~v28;
  unint64_t v30 = (v44 + v29 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v31 = swift_allocObject(&unk_10094D1A0, v30 + 16, v23 | v25 | v28 | 7);
  *(void *)(v31 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(v31 + 24) = 0LL;
  sub_10002218C((uint64_t)v16, v31 + v24, type metadata accessor for OwnedBeaconRecord);
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v31 + v26, v36, v47);
  *(void *)(v31 + v27) = v38;
  (*(void (**)(uint64_t, char *, uint64_t))(v22 + 32))(v31 + v29, v48, v21);
  uint64_t v32 = (void *)(v31 + v30);
  uint64_t v33 = v46;
  *uint64_t v32 = v45;
  v32[1] = v33;
  swift_retain();
  sub_1003EDB00((uint64_t)v39, (uint64_t)&unk_1009A7D70, v31);
  return swift_release();
}

uint64_t sub_1002A792C(uint64_t a1, unint64_t a2)
{
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v48 = *(void *)(v5 - 8);
  uint64_t v6 = *(void *)(v48 + 64);
  __chkstk_darwin(v5);
  uint64_t v47 = (uint64_t)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v51 = type metadata accessor for ShareRecord(0LL);
  uint64_t v7 = *(void *)(v51 - 8);
  uint64_t v8 = __chkstk_darwin(v51);
  uint64_t v45 = (uint64_t)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v46 = v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v37 - v10;
  uint64_t v49 = a1;
  uint64_t v50 = v2;
  uint64_t v44 = *(void *)(v2 + 256);
  uint64_t v12 = sub_1005777D8();
  uint64_t v13 = v12[2];
  if (v13)
  {
    uint64_t v14 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v42 = ~v14;
    uint64_t v43 = v14;
    uint64_t v37 = v12;
    uint64_t v15 = (uint64_t)v12 + ((v14 + 32) & ~v14);
    uint64_t v41 = v6 + v14;
    uint64_t v16 = *(void *)(v7 + 72);
    __int128 v39 = xmmword_1007E4050;
    uint64_t v17 = v51;
    uint64_t v40 = v16;
    unint64_t v38 = a2;
    do
    {
      uint64_t v32 = sub_10001DC4C(v15, (uint64_t)v11, type metadata accessor for ShareRecord);
      unint64_t v33 = *(void *)&v11[*(int *)(v17 + 44)];
      if (v33 > a2)
      {
        unint64_t v34 = a2;
        uint64_t v35 = static os_log_type_t.default.getter(v32);
        if (qword_10099B6F8 != -1) {
          swift_once(&qword_10099B6F8, sub_100651098);
        }
        uint64_t v18 = qword_100A2B008;
        uint64_t v19 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v20 = swift_allocObject(v19, 152LL, 7LL);
        *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = v39;
        uint64_t v21 = UUID.uuidString.getter(v20);
        uint64_t v23 = v22;
        *(void *)(v20 + 56) = &type metadata for String;
        unint64_t v24 = sub_1000226F4();
        *(void *)(v20 + 32) = v21;
        *(void *)(v20 + sub_10016CF88(v0 + 40) = v23;
        *(void *)(v20 + 96) = &type metadata for UInt64;
        *(void *)(v20 + 104) = &protocol witness table for UInt64;
        *(void *)(v20 + 112) = v33;
        *(void *)(v20 + 64) = v24;
        *(void *)(v20 + 72) = v34;
        *(void *)(v20 + 136) = &type metadata for UInt64;
        *(void *)(v20 + 144) = &protocol witness table for UInt64;
        os_log(_:dso:log:_:_:)( v35,  &_mh_execute_header,  v18,  "Redistributing keys for share %@: newPrimaryIndex: %lu, share, sharePrimaryIndex: %lu",  85LL,  2LL,  v20,  v37);
        swift_bridgeObjectRelease();
        uint64_t v25 = v47;
        sub_10001DC4C(v49, v47, type metadata accessor for OwnedBeaconRecord);
        uint64_t v26 = v45;
        sub_10001DC4C((uint64_t)v11, v45, type metadata accessor for ShareRecord);
        uint64_t v27 = *(unsigned __int8 *)(v48 + 80);
        uint64_t v28 = (v27 + 24) & ~v27;
        uint64_t v29 = (v41 + v28) & v42;
        uint64_t v30 = swift_allocObject(&unk_10094D1C8, v29 + v46, v43 | v27 | 7);
        *(void *)(v30 + swift_weakDestroy(v0 + 16) = v50;
        uint64_t v31 = v30 + v28;
        uint64_t v17 = v51;
        sub_10002218C(v25, v31, type metadata accessor for OwnedBeaconRecord);
        sub_10002218C(v26, v30 + v29, type metadata accessor for ShareRecord);
        a2 = v38;
        swift_retain();
        sub_100502AF8( (uint64_t)v11,  0,  (void (*)(uint64_t))sub_1002D71AC,  (void (*)(uint64_t))v30,  v44,  a2);
        swift_release();
        uint64_t v16 = v40;
      }

      sub_100018C68((uint64_t)v11, type metadata accessor for ShareRecord);
      v15 += v16;
      --v13;
    }

    while (v13);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_1002A7C90( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[9] = a8;
  v8[10] = v15;
  v8[7] = a6;
  v8[8] = a7;
  v8[6] = a5;
  uint64_t v9 = type metadata accessor for Date(0LL);
  v8[11] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[12] = v10;
  v8[13] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  v8[14] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v8[15] = v12;
  v8[16] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = (void *)swift_task_alloc(dword_1009B536C);
  v8[17] = v13;
  *uint64_t v13 = v8;
  v13[1] = sub_1002A7D38;
  return sub_1005D2AFC();
}

uint64_t sub_1002A7D38(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 136LL);
  *(_BYTE *)(*(void *)v1 + 144LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002A7D94, 0LL, 0LL);
}

uint64_t sub_1002A7D94()
{
  if (*(_BYTE *)(v0 + 144) == 1)
  {
    if (qword_10099B4F0 != -1) {
      swift_once(&qword_10099B4F0, sub_1004B82C0);
    }
    uint64_t v1 = *(void *)(v0 + 48);
    uint64_t v3 = *(void *)(v0 + 120);
    uint64_t v2 = *(void *)(v0 + 128);
    uint64_t v4 = *(void *)(v0 + 112);
    *(void *)type = *(void *)(v0 + 104);
    uint64_t v6 = *(void *)(v0 + 88);
    uint64_t v5 = *(void *)(v0 + 96);
    uint64_t v7 = *(void *)(v0 + 64);
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_10000A720(v8, (uint64_t)qword_100A2AB30);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
    uint64_t v9 = (*(uint64_t (**)(os_log_type_t *, uint64_t, uint64_t))(v5 + 16))(*(os_log_type_t **)type, v7, v6);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.default.getter(v10);
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v14 = *(void *)(v0 + 120);
    uint64_t v13 = *(void *)(v0 + 128);
    uint64_t v15 = *(void *)(v0 + 104);
    uint64_t v16 = *(void *)(v0 + 112);
    uint64_t v17 = *(void *)(v0 + 88);
    uint64_t v18 = *(void *)(v0 + 96);
    if (v12)
    {
      uint64_t v31 = *(void *)(v0 + 56);
      uint64_t v32 = *(void *)(v0 + 88);
      uint64_t v19 = swift_slowAlloc(42LL, -1LL);
      uint64_t v33 = swift_slowAlloc(64LL, -1LL);
      v35[0] = v33;
      *(_DWORD *)uint64_t v19 = 141558787;
      *(void *)(v0 + swift_weakDestroy(v0 + 16) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v19 + 4, v19 + 12);
      *(_WORD *)(v19 + 12) = 2081;
      uint64_t v20 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v21 = dispatch thunk of CustomStringConvertible.description.getter(v16, v20);
      *(void *)(v0 + 24) = sub_1003F11D4(v21, v22, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v19 + 14, v19 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v16);
      *(_WORD *)(v19 + 22) = 2048;
      *(void *)(v0 + 32) = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v19 + 24, v19 + 32);
      *(_WORD *)(v19 + 32) = 2080;
      uint64_t v23 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v32, v23);
      *(void *)(v0 + sub_10016CF88(v0 + 40) = sub_1003F11D4(v24, v25, v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v19 + 34, v19 + 42);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v15, v32);
      _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "Posting SPManagedCBPeripheralChanged on keySyncRecord update from CL for %{private,mask.hash}s index %llu date %s.",  (uint8_t *)v19,  0x2Au);
      swift_arrayDestroy(v33, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(void, void))(v14 + 8))(*(void *)(v0 + 128), *(void *)(v0 + 112));
      (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v15, v17);
    }

    uint64_t v26 = (void *)SPManagedCBPeripheralChangedNotification;
    uint64_t v27 = type metadata accessor for DarwinNotificationHelper(0LL);
    swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
    DarwinNotificationHelper.init(notificationName:rateLimit:)(v26, 0.0);
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
    swift_release();
  }

  uint64_t v28 = *(void *)(v0 + 128);
  uint64_t v29 = *(void *)(v0 + 104);
  (*(void (**)(uint64_t))(v0 + 72))(1LL);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002A8138(uint64_t a1, uint64_t a2)
{
  uint64_t result = type metadata accessor for ShareRecord(0LL);
  *(void *)(a1 + *(int *)(result + 44)) = a2;
  return result;
}

uint64_t sub_1002A8168(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for ShareRecord(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  os_log_type_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v36 - v12;
  uint64_t v14 = sub_100004AEC(&qword_1009A6100);
  __chkstk_darwin(v14);
  uint64_t v16 = (uint64_t *)((char *)&v36 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v16, &qword_1009A6100);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v14);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v18 = *v16;
    uint64_t v19 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_10099B6F8 != -1) {
      swift_once(&qword_10099B6F8, sub_100651098);
    }
    uint64_t v20 = qword_100A2B008;
    uint64_t v21 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v22 = swift_allocObject(v21, 72LL, 7LL);
    *(_OWORD *)(v22 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v37 = v18;
    swift_errorRetain(v18);
    uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v24 = String.init<A>(describing:)(&v37, v23);
    uint64_t v26 = v25;
    *(void *)(v22 + 56) = &type metadata for String;
    *(void *)(v22 + 64) = sub_1000226F4();
    *(void *)(v22 + 32) = v24;
    *(void *)(v22 + sub_10016CF88(v0 + 40) = v26;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Could not update ShareRecord. Error - %@", 40LL, 2LL, v22);
    swift_bridgeObjectRelease();
    uint64_t result = swift_errorRelease(v18);
  }

  else
  {
    uint64_t v28 = sub_10002218C((uint64_t)v16, (uint64_t)v13, type metadata accessor for ShareRecord);
    uint64_t v29 = static os_log_type_t.default.getter(v28);
    if (qword_10099B6F8 != -1) {
      swift_once(&qword_10099B6F8, sub_100651098);
    }
    uint64_t v30 = qword_100A2B008;
    uint64_t v31 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v32 = swift_allocObject(v31, 72LL, 7LL);
    *(_OWORD *)(v32 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    sub_10001DC4C((uint64_t)v13, (uint64_t)v11, type metadata accessor for ShareRecord);
    uint64_t v33 = String.init<A>(describing:)(v11, v8);
    uint64_t v35 = v34;
    *(void *)(v32 + 56) = &type metadata for String;
    *(void *)(v32 + 64) = sub_1000226F4();
    *(void *)(v32 + 32) = v33;
    *(void *)(v32 + sub_10016CF88(v0 + 40) = v35;
    os_log(_:dso:log:_:_:)( v29,  &_mh_execute_header,  v30,  "Successfully updated sharePrimaryIndex of %@",  44LL,  2LL,  v32);
    swift_bridgeObjectRelease();
    uint64_t result = sub_100018C68((uint64_t)v13, type metadata accessor for ShareRecord);
  }

  if (*(void *)(a2 + 40))
  {
    swift_retain();
    sub_1001F7298(a3, a4);
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1002A8474(void (*a1)(uint64_t), uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = swift_allocObject(&unk_10094DA38, 24LL, 7LL);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = a4;
  swift_retain();
  sub_1002B52B4(a3, 0, (void (*)(uint64_t))sub_1002D9E60, v7, (void (*)(uint64_t))sub_1002D9E68, a1);
  swift_release();
  return swift_release();
}

uint64_t sub_1002A850C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v10 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for KeyAlignmentRecord(0LL);
  *(void *)(a1 + *(int *)(v8 + 28)) = a2;
  static Date.trustedNow.getter((uint64_t)v7);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v5 + 40))(a1 + *(int *)(v8 + 32), v7, v4);
}

uint64_t sub_1002A85AC(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A7E08);
  __chkstk_darwin(v2);
  uint64_t v4 = (uint64_t *)((char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Transaction.capture()();
  sub_10001581C(a1, (uint64_t)v4, &qword_1009A7E08);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v2);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v6 = *v4;
    uint64_t v7 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
    *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v21 = v6;
    swift_errorRetain(v6);
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v11 = String.init<A>(describing:)(&v21, v10);
    uint64_t v13 = v12;
    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 64) = sub_1000226F4();
    *(void *)(v9 + 32) = v11;
    *(void *)(v9 + sub_10016CF88(v0 + 40) = v13;
    uint64_t v14 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v15 = (void *)static OS_os_log.default.getter(v14);
    os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  v15,  "Could not update last seen key indexto alignment record. Error - %@",  67LL,  2LL,  v9);
    swift_bridgeObjectRelease();

    return swift_errorRelease(v6);
  }

  else
  {
    uint64_t v17 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v18 = (void *)static OS_os_log.default.getter(v17);
    uint64_t v19 = static os_log_type_t.default.getter(v18);
    os_log(_:dso:log:type:_:)( "Successfully update last seen key index to alignment record.",  60LL,  2LL,  &_mh_execute_header,  v18,  v19,  _swiftEmptyArrayStorage);

    return sub_100015794((uint64_t)v4, &qword_1009A7E08);
  }

uint64_t sub_1002A8790( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[26] = a8;
  v8[27] = v14;
  v8[24] = a6;
  v8[25] = a7;
  v8[22] = a4;
  v8[23] = a5;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  v8[28] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[29] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[30] = swift_task_alloc(v11);
  v8[31] = swift_task_alloc(v11);
  uint64_t v12 = type metadata accessor for KeySyncMetadata(0LL);
  v8[32] = v12;
  v8[33] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1002A8830, 0LL, 0LL);
}

uint64_t sub_1002A8830()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 272) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1002A8930;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1002A8930(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 272LL);
  *(void *)(*(void *)v1 + 28swift_beginAccess(v4, v6 - 104, 0LL, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002A898C, 0LL, 0LL);
}

uint64_t sub_1002A898C()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 280))
  {
    uint64_t v3 = *(int **)(v0 + 256);
    uint64_t v2 = *(void *)(v0 + 264);
    uint64_t v4 = *(void *)(v0 + 224);
    uint64_t v5 = *(void *)(v0 + 232);
    uint64_t v7 = *(void *)(v0 + 208);
    uint64_t v6 = *(void *)(v0 + 216);
    uint64_t v8 = *(void *)(v0 + 200);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    *(void *)(v0 + 288) = v9;
    v9(v2, v8, v4);
    uint64_t v10 = (void *)(v2 + v3[6]);
    v10[3] = &type metadata for PrimaryIndex;
    v10[4] = sub_1000868E4();
    *uint64_t v10 = v7;
    uint64_t v11 = v2 + v3[7];
    uint64_t v12 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))(v11, v6, v12);
    *(_BYTE *)(v2 + v3[5]) = 4;
    uint64_t v13 = (void *)swift_task_alloc(dword_1009BCDBC);
    *(void *)(v0 + 296) = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_1002A8B74;
    return sub_1006D55B8(*(void *)(v0 + 264));
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B4D8 != -1) {
      swift_once(&qword_10099B4D8, sub_1004AB71C);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    uint64_t v16 = sub_10000A720(v15, (uint64_t)qword_100A2AB18);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Missing ObservationStoreService.", v19, 2u);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    uint64_t v20 = *(void (**)(void))(v0 + 184);

    v20(0LL);
    uint64_t v21 = *(void *)(v0 + 240);
    uint64_t v22 = *(void *)(v0 + 248);
    swift_task_dealloc(*(void *)(v0 + 264));
    swift_task_dealloc(v22);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1002A8B74()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 296LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 264LL);
  *(void *)(*(void *)v1 + 304LL) = v0;
  swift_task_dealloc(v2);
  sub_100018C68(v3, type metadata accessor for KeySyncMetadata);
  if (v0) {
    uint64_t v4 = sub_1002A8E60;
  }
  else {
    uint64_t v4 = sub_1002A8BEC;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1002A8BEC()
{
  if (qword_10099B4D8 != -1) {
    swift_once(&qword_10099B4D8, sub_1004AB71C);
  }
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_10000A720(v5, (uint64_t)qword_100A2AB18);
  uint64_t v6 = v1(v2, v4, v3);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter(v7);
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 248);
  uint64_t v11 = *(void *)(v0 + 224);
  if (v9)
  {
    uint64_t v12 = *(void *)(v0 + 208);
    uint64_t v20 = *(void *)(v0 + 232);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v22 = v21;
    *(_DWORD *)uint64_t v13 = 134218499;
    *(void *)(v0 + 152) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v13 + 4, v13 + 12);
    *(_WORD *)(v13 + 12) = 2160;
    *(void *)(v0 + 160) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v13 + 14, v13 + 22);
    *(_WORD *)(v13 + 22) = 2081;
    uint64_t v14 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v11, v14);
    *(void *)(v0 + 168) = sub_1003F11D4(v15, v16, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v13 + 24, v13 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v10, v11);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "            Successfully updated last seen key index %lu for %{private,mask.hash}s.",  (uint8_t *)v13,  0x20u);
    swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 232) + 8LL))(*(void *)(v0 + 248), *(void *)(v0 + 224));
  }

  (*(void (**)(uint64_t))(v0 + 184))(1LL);
  swift_release();
  uint64_t v17 = *(void *)(v0 + 240);
  uint64_t v18 = *(void *)(v0 + 248);
  swift_task_dealloc(*(void *)(v0 + 264));
  swift_task_dealloc(v18);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002A8E60()
{
  if (qword_10099B4D8 != -1) {
    swift_once(&qword_10099B4D8, sub_1004AB71C);
  }
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 224);
  uint64_t v5 = *(void *)(v0 + 200);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10000A720(v6, (uint64_t)qword_100A2AB18);
  v2(v3, v5, v4);
  swift_errorRetain(v1);
  uint64_t v7 = swift_errorRetain(v1);
  os_log_type_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.error.getter(v8);
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = *(void *)(v0 + 304);
  uint64_t v13 = *(void *)(v0 + 232);
  uint64_t v12 = *(void *)(v0 + 240);
  uint64_t v14 = *(void *)(v0 + 224);
  if (v10)
  {
    uint64_t v15 = *(void *)(v0 + 208);
    os_log_type_t type = v9;
    uint64_t v16 = swift_slowAlloc(42LL, -1LL);
    uint64_t v26 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v28 = swift_slowAlloc(32LL, -1LL);
    uint64_t v29 = v28;
    *(_DWORD *)uint64_t v16 = 134218755;
    *(void *)(v0 + 120) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v16 + 4, v16 + 12);
    *(_WORD *)(v16 + 12) = 2160;
    *(void *)(v0 + 128) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v16 + 14, v16 + 22);
    *(_WORD *)(v16 + 22) = 2081;
    uint64_t v17 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter(v14, v17);
    *(void *)(v0 + 136) = sub_1003F11D4(v18, v19, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v16 + 24, v16 + 32);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
    *(_WORD *)(v16 + 32) = 2114;
    swift_errorRetain(v11);
    uint64_t v20 = _swift_stdlib_bridgeErrorToNSError(v11);
    *(void *)(v0 + 144) = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v16 + 34, v16 + 42);
    *uint64_t v26 = v20;
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  type,  "            Failed to updated last seen key index %lu for %{private,mask.hash}s, error: %{public}@.",  (uint8_t *)v16,  0x2Au);
    uint64_t v21 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v26, 1LL, v21);
    swift_slowDealloc(v26, -1LL, -1LL);
    swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(void, void))(v13 + 8))(*(void *)(v0 + 240), *(void *)(v0 + 224));
    swift_errorRelease(v11);
    swift_errorRelease(v11);
  }

  uint64_t v22 = *(void *)(v0 + 304);
  (*(void (**)(void))(v0 + 184))(0LL);
  swift_release();
  swift_errorRelease(v22);
  uint64_t v23 = *(void *)(v0 + 240);
  uint64_t v24 = *(void *)(v0 + 248);
  swift_task_dealloc(*(void *)(v0 + 264));
  swift_task_dealloc(v24);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002A91A4(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v2 + 24) = a2;
  return swift_task_switch(sub_1002A91BC, 0LL, 0LL);
}

uint64_t sub_1002A91BC()
{
  uint64_t v1 = *(void **)(v0 + 24);
  uint64_t v2 = type metadata accessor for AnalyticsEvent(0LL);
  uint64_t v3 = (char *)swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
  *(void *)(v0 + 32) = v3;
  swift_defaultActor_initialize(v3);
  unint64_t v4 = sub_10041271C((uint64_t)_swiftEmptyArrayStorage);
  *((void *)v3 + 14) = v4;
  UUID.init()(v4);
  uint64_t v5 = &v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v6 = type metadata accessor for DispatchTime(0LL);
  uint64_t v7 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL);
  v7(v5, 1LL, 1LL, v6);
  v7(&v3[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1LL, 1LL, v6);
  *((void *)v3 + 15) = 0xD000000000000031LL;
  *((void *)v3 + swift_weakDestroy(v0 + 16) = 0x800000010085BFD0LL;
  id v8 = v1;
  return swift_task_switch(sub_1002A92C0, v3, 0LL);
}

uint64_t sub_1002A92C0()
{
  return swift_task_switch(sub_1002930A8, 0LL, 0LL);
}

id sub_1002A932C(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009A0E28);
  uint64_t inited = swift_initStackObject(v8, v29);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(inited + 32) = 0x6E4979654B77656ELL;
  *(void *)(inited + sub_10016CF88(v0 + 40) = 0xEB00000000786564LL;
  *(void *)(inited + 48) = [objc_allocWithZone(NSNumber) initWithUnsignedInteger:a1];
  *(_BYTE *)(inited + 56) = 0;
  unint64_t v10 = sub_100412AA4(inited);
  id result = [a2 systemVersion];
  if (!result)
  {
    __break(1u);
    goto LABEL_8;
  }

  uint64_t v12 = (uint64_t)result;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
  unint64_t v28 = v10;
  sub_10005C698(v12, 0, 0xD000000000000013LL, 0x8000000100857290LL, isUniquelyReferenced_nonNull_native);
  unint64_t v14 = v28;
  swift_bridgeObjectRelease();
  id result = [a2 systemVersion];
  if (!result)
  {
LABEL_8:
    __break(1u);
    return result;
  }

  uint64_t v15 = (uint64_t)result;
  char v16 = swift_isUniquelyReferenced_nonNull_native(v14);
  unint64_t v28 = v14;
  sub_10005C698(v15, 0, 0xD00000000000001BLL, 0x80000001008572B0LL, v16);
  unint64_t v17 = v28;
  swift_bridgeObjectRelease();
  id v18 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v19 = [v18 isInternalBuild];

  if (v19)
  {
    id v20 = [a2 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v20);

    UUID.uuidString.getter(v21);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    NSString v22 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    char v23 = swift_isUniquelyReferenced_nonNull_native(v17);
    unint64_t v28 = v17;
    sub_10005C698((uint64_t)v22, 0, 0x6544646572696170LL, 0xEE00444965636976LL, v23);
    unint64_t v17 = v28;
    swift_bridgeObjectRelease();
    id v24 = [a2 serialNumber];
    if (v24)
    {
      uint64_t v25 = (uint64_t)v24;
      char v26 = swift_isUniquelyReferenced_nonNull_native(v17);
      unint64_t v28 = v17;
      sub_10005C698(v25, 0, 0xD000000000000018LL, 0x8000000100853D10LL, v26);
      unint64_t v17 = v28;
      swift_bridgeObjectRelease();
    }
  }

  return (id)v17;
}

uint64_t sub_1002A9630(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v20 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v20 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = *(void *)(v2 + 136);
  uint64_t v13 = (void *)swift_allocObject(&unk_10094D088, 40LL, 7LL);
  v13[2] = v2;
  v13[3] = a1;
  v13[4] = a2;
  aBlock[4] = sub_1002B2EC4;
  aBlock[5] = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10094D0A0;
  unint64_t v14 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v15 = swift_retain();
  static DispatchQoS.unspecified.getter(v15);
  uint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v18 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v17, v18, v5, v16);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v8, v14);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return swift_release();
}

uint64_t sub_1002A9830(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  uint64_t v85 = a3;
  uint64_t v86 = a2;
  uint64_t v4 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v4);
  uint64_t v98 = (uint64_t)&v83 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DateInterval(0LL);
  uint64_t v96 = *(void *)(v6 - 8);
  uint64_t v97 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v83 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v100 = *(void *)(v9 - 8);
  uint64_t v101 = v9;
  __chkstk_darwin(v9);
  uint64_t v99 = (char *)&v83 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v95 = sub_100004AEC(&qword_1009AE490);
  __chkstk_darwin(v95);
  uint64_t v12 = (char *)&v83 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v94 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v93 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  uint64_t v88 = (uint64_t)&v83 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = objc_autoreleasePoolPush();
  uint64_t v15 = *(void *)(a1 + 256);
  uint64_t v16 = sub_100508644();
  uint64_t KeyPath = (uint64_t)v16;
  id v110 = _swiftEmptyArrayStorage;
  uint64_t v18 = v16[2];
  unint64_t v89 = v8;
  uint64_t v90 = v15;
  uint64_t v92 = v18;
  if (!v18)
  {
    uint64_t v37 = _swiftEmptyArrayStorage;
LABEL_16:
    swift_bridgeObjectRelease();
    *(void *)&__int128 v107 = v37;
    swift_retain();
    swift_retain();
    sub_1002D62D4((void **)&v107, a1);
    swift_release();
    swift_release();
    uint64_t v38 = v107;
    objc_autoreleasePoolPop(v14);
    id v110 = _swiftEmptyArrayStorage;
    uint64_t v39 = *(void *)(v38 + 16);
    if (!v39)
    {
      swift_release();
      uint64_t v77 = _swiftEmptyArrayStorage;
LABEL_33:
      v86(v77);
      return swift_bridgeObjectRelease();
    }

    uint64_t v93 = v38;
    uint64_t v40 = v38 + 32;
    __int128 v95 = xmmword_1007E67D0;
    while (1)
    {
      sub_100013044(v40, (uint64_t)&v107);
      if (qword_10099B318 != -1) {
        swift_once(&qword_10099B318, sub_100352F58);
      }
      OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
      uint64_t v54 = v103;
      uint64_t KeyPath = swift_getKeyPath(&unk_1007F8F10);
      uint64_t v55 = sub_1006A1DC4(KeyPath, v54);
      if ((v56 & 1) != 0) {
        goto LABEL_35;
      }
      uint64_t v57 = v55;
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v58 = v98;
      static Date.trustedNow.getter(v98);
      DateInterval.init(start:duration:)(v58, (double)v57 * 60.0);
      uint64_t v59 = v108;
      uint64_t v60 = v109;
      uint64_t v61 = sub_100012ED8(&v107, v108);
      uint64_t v51 = sub_10054CE6C((uint64_t)v61, (uint64_t)v8, 0, 0, 0, v15, v59, v60);
      uint64_t v52 = (void *)v51;
      if (v63)
      {
        if (v63 == 1) {
          goto LABEL_20;
        }
        uint64_t v64 = static os_log_type_t.default.getter(v51);
        if (qword_10099B6F8 != -1) {
          swift_once(&qword_10099B6F8, sub_100651098);
        }
        uint64_t v41 = qword_100A2B008;
        uint64_t v42 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v43 = swift_allocObject(v42, 72LL, 7LL);
        *(_OWORD *)(v43 + swift_weakDestroy(v0 + 16) = v95;
        uint64_t v45 = v108;
        uint64_t v44 = v109;
        sub_100012ED8(&v107, v108);
        uint64_t v46 = v99;
        uint64_t v47 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v44 + 8) + 8LL) + 32LL))(v45);
        uint64_t v48 = UUID.uuidString.getter(v47);
        uint64_t v50 = v49;
        (*(void (**)(char *, uint64_t))(v100 + 8))(v46, v101);
        *(void *)(v43 + 56) = &type metadata for String;
        *(void *)(v43 + 64) = sub_1000226F4();
        *(void *)(v43 + 32) = v48;
        *(void *)(v43 + sub_10016CF88(v0 + 40) = v50;
        uint64_t v51 = swift_bridgeObjectRelease();
        uint64_t v52 = _swiftEmptyArrayStorage;
      }

      else
      {
        uint64_t v65 = v62;
        swift_bridgeObjectRetain(v51);
        LODWORD(v94) = static os_log_type_t.default.getter(v66);
        if (qword_10099B6F8 != -1) {
          swift_once(&qword_10099B6F8, sub_100651098);
        }
        uint64_t v67 = qword_100A2B008;
        uint64_t v68 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v69 = swift_allocObject(v68, 72LL, 7LL);
        *(_OWORD *)(v69 + swift_weakDestroy(v0 + 16) = v95;
        uint64_t v70 = v108;
        uint64_t v71 = v109;
        sub_100012ED8(&v107, v108);
        uint64_t v72 = v99;
        uint64_t v73 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v71 + 8) + 8LL) + 32LL))(v70);
        uint64_t v74 = UUID.uuidString.getter(v73);
        uint64_t v76 = v75;
        (*(void (**)(char *, uint64_t))(v100 + 8))(v72, v101);
        *(void *)(v69 + 56) = &type metadata for String;
        *(void *)(v69 + 64) = sub_1000226F4();
        *(void *)(v69 + 32) = v74;
        *(void *)(v69 + sub_10016CF88(v0 + 40) = v76;
        sub_100117B2C((uint64_t)v52, v65, 0);
        uint64_t v51 = swift_bridgeObjectRelease();
        uint64_t v8 = v89;
      }

      uint64_t v15 = v90;
LABEL_20:
      __chkstk_darwin(v51);
      unint64_t v81 = &v107;
      unint64_t v53 = sub_100631FEC( (void *(*)(uint64_t *__return_ptr, uint64_t, __n128))sub_1002D63C4,  (uint64_t)(&v83 - 4),  (uint64_t)v52);
      swift_bridgeObjectRelease();
      sub_1001852A0((uint64_t)v53);
      (*(void (**)(char *, uint64_t))(v96 + 8))(v8, v97);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v107);
      v40 += 40LL;
      if (!--v39)
      {
        swift_release();
        uint64_t v77 = v110;
        goto LABEL_33;
      }
    }
  }

  uint64_t v83 = v14;
  uint64_t v84 = a1;
  unint64_t v19 = 0LL;
  uint64_t v91 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueueSynchronizer;
  uint64_t v20 = (uint64_t)(v16 + 4);
  uint64_t v87 = SPBeaconRoleIdUndefined;
  while (v19 < *(void *)(KeyPath + 16))
  {
    sub_100013044(v20, (uint64_t)&v107);
    uint64_t v22 = v108;
    uint64_t v21 = v109;
    sub_100012ED8(&v107, v108);
    char v23 = v99;
    uint64_t v24 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v21 + 8) + 8LL) + 32LL))(v22);
    __chkstk_darwin(v24);
    unint64_t v81 = (__int128 *)v15;
    id v82 = v23;
    QueueSynchronizer.conditionalSync<A>(_:)(sub_10014F098);
    (*(void (**)(char *, uint64_t))(v100 + 8))(v23, v101);
    uint64_t v25 = v94;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v12, 1LL, v94) == 1)
    {
      sub_100015794((uint64_t)v12, &qword_1009AE490);
    }

    else
    {
      uint64_t v26 = v88;
      sub_10002218C((uint64_t)v12, v88, type metadata accessor for BeaconNamingRecord);
      uint64_t v27 = *(void *)(v26 + *(int *)(v25 + 28));
      sub_100018C68(v26, type metadata accessor for BeaconNamingRecord);
      if (v87 < v27)
      {
        sub_100012EC0(&v107, (uint64_t)&v103);
        unint64_t v28 = v110;
        if ((swift_isUniquelyReferenced_nonNull_native(v110) & 1) == 0)
        {
          sub_100032928(0, v28[2] + 1LL, 1);
          unint64_t v28 = v110;
        }

        unint64_t v30 = v28[2];
        unint64_t v29 = v28[3];
        if (v30 >= v29 >> 1) {
          sub_100032928(v29 > 1, v30 + 1, 1);
        }
        uint64_t v31 = v105;
        uint64_t v32 = v106;
        uint64_t v33 = sub_100037298((uint64_t)&v103, v105);
        __chkstk_darwin(v33);
        uint64_t v35 = (char *)&v83 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v36 + 16))(v35);
        sub_1002BBA60(v30, (uint64_t)v35, (uint64_t *)&v110, v31, v32);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v103);
        uint64_t v8 = v89;
        uint64_t v15 = v90;
        goto LABEL_5;
      }
    }

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v107);
LABEL_5:
    ++v19;
    v20 += 40LL;
    if (v92 == v19)
    {
      uint64_t v37 = v110;
      a1 = v84;
      unint64_t v14 = v83;
      goto LABEL_16;
    }
  }

  __break(1u);
LABEL_35:
  uint64_t v103 = 0LL;
  unint64_t v104 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(40LL);
  v79._object = (void *)0x800000010085A890LL;
  v79._countAndFlagsBits = 0xD000000000000026LL;
  String.append(_:)(v79);
  uint64_t v102 = KeyPath;
  uint64_t v80 = sub_100004AEC(&qword_1009A65E0);
  _print_unlocked<A, B>(_:_:)( &v102,  &v103,  v80,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v103,  v104,  "searchpartyd/Configuration.swift",  32LL,  2LL,  24LL,  0);
  __break(1u);
  swift_release();
  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1002AA19C@<X0>(uint64_t *a1@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  uint64_t v87 = a3;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for TimeBasedKey(0LL);
  uint64_t v11 = (char *)a1 + *(int *)(v10 + 24);
  unint64_t v88 = *((void *)v11 + 1);
  if (v88 >> 60 == 15)
  {
    uint64_t v86 = v3;
    LODWORD(v88) = static os_log_type_t.error.getter(v10);
    if (qword_10099B6F8 != -1) {
      swift_once(&qword_10099B6F8, sub_100651098);
    }
    uint64_t v12 = qword_100A2B008;
    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v14 = swift_allocObject(v13, 112LL, 7LL);
    *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    uint64_t v15 = a2[3];
    uint64_t v16 = a2[4];
    sub_100012ED8(a2, v15);
    uint64_t v17 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v16 + 8) + 8LL) + 32LL))(v15);
    uint64_t v18 = UUID.uuidString.getter(v17);
    uint64_t v20 = v19;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    *(void *)(v14 + 56) = &type metadata for String;
    unint64_t v21 = sub_1000226F4();
    *(void *)(v14 + 32) = v18;
    *(void *)(v14 + sub_10016CF88(v0 + 40) = v20;
    uint64_t v22 = *a1;
    *(void *)(v14 + 96) = &type metadata for UInt64;
    *(void *)(v14 + 104) = &protocol witness table for UInt64;
    *(void *)(v14 + 64) = v21;
    *(void *)(v14 + 72) = v22;
    uint64_t result = swift_bridgeObjectRelease();
    id v24 = 0LL;
    goto LABEL_7;
  }

  unint64_t v26 = v88;
  uint64_t v91 = *(void *)v11;
  uint64_t v25 = v91;
  unint64_t v92 = v88;
  __int128 v27 = *((_OWORD *)v11 + 2);
  __int128 v93 = *((_OWORD *)v11 + 1);
  __int128 v94 = v27;
  sub_10001736C(v91, v88);
  uint64_t v28 = sub_1004DA048();
  unint64_t v30 = v29;
  id v31 = objc_allocWithZone(&OBJC_CLASS___SPBeaconingKey);
  Class isa = DateInterval._bridgeToObjectiveC()().super.isa;
  Class v33 = Data._bridgeToObjectiveC()().super.isa;
  id v34 = [v31 initWithDateInterval:isa key:v33];

  sub_100016F9C(v28, v30);
  uint64_t v35 = String.utf8Data.getter(0x646E616D6D6F63LL, 0xE700000000000000LL);
  unint64_t v37 = v36;
  sub_10001736C(v25, v26);
  sub_1004DF7EC(v25, v26, v35, v37, 32LL);
  if (!v3)
  {
    uint64_t v40 = v38;
    uint64_t v41 = v39;
    sub_1000182F0(v25, v88);
    sub_1001782BC(v40, v41);
    sub_100016F9C(v35, v37);
    uint64_t v42 = v89;
    unint64_t v84 = v90;
    uint64_t v43 = String.utf8Data.getter(0x7463656E6E6F63LL, 0xE700000000000000LL);
    unint64_t v45 = v44;
    uint64_t v46 = v88;
    sub_10001736C(v25, v88);
    sub_1004DF7EC(v25, v46, v43, v45, 32LL);
    uint64_t v48 = v47;
    uint64_t v50 = v49;
    id v83 = v34;
    sub_1000182F0(v25, v88);
    sub_1001782BC(v48, v50);
    sub_100016F9C(v43, v45);
    unint64_t v81 = v90;
    uint64_t v82 = v89;
    uint64_t v51 = sub_1004DA048();
    unint64_t v53 = v52;
    uint64_t v54 = String.utf8Data.getter(0x646E616D6D6F63LL, 0xE700000000000000LL);
    unint64_t v56 = v55;
    uint64_t v57 = v88;
    sub_10001736C(v25, v88);
    uint64_t v85 = v25;
    sub_1004DF7EC(v25, v57, v54, v56, 32LL);
    uint64_t v59 = v58;
    uint64_t v61 = v60;
    sub_1000182F0(v85, v88);
    sub_1001782BC(v59, v61);
    uint64_t v86 = 0LL;
    sub_100016F9C(v54, v56);
    uint64_t v62 = v89;
    unint64_t v63 = v90;
    uint64_t v64 = sub_10017AFAC(v89, v90, v51, v53);
    unint64_t v66 = v65;
    sub_100016F9C(v62, v63);
    sub_100016F9C(v51, v53);
    id v67 = objc_allocWithZone(&OBJC_CLASS___SPCommandKeys);
    uint64_t v80 = v42;
    Class v68 = Data._bridgeToObjectiveC()().super.isa;
    unint64_t v70 = v81;
    uint64_t v69 = v82;
    Class v71 = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v72 = v64;
    unint64_t v73 = v66;
    Class v74 = Data._bridgeToObjectiveC()().super.isa;
    uint64_t v75 = v67;
    uint64_t v76 = v83;
    id v24 = [v75 initWithBeaconingKey:v83 commandKey:v68 connectionToken:v71 nearbyToken:v74];
    sub_100016F9C(v72, v73);
    sub_100016F9C(v69, v70);
    sub_100016F9C(v80, v84);

    uint64_t result = sub_1000182F0(v85, v88);
LABEL_7:
    *uint64_t v87 = v24;
    return result;
  }

  sub_100016F9C(v35, v37);
  sub_1000182F0(v25, v88);
  uint64_t v89 = 0LL;
  unint64_t v90 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(32LL);
  v77._object = (void *)0x800000010085B8E0LL;
  v77._countAndFlagsBits = 0xD00000000000001ELL;
  String.append(_:)(v77);
  uint64_t v95 = v3;
  uint64_t v78 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  _print_unlocked<A, B>(_:_:)( &v95,  &v89,  v78,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v89,  v90,  "searchpartyd/KeyRepresentable.swift",  35LL,  2LL,  415LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_1002AA894(__int128 *a1, uint64_t (*a2)(__int128 *))
{
  uint64_t v2 = *((void *)a1 + 7);
  char v3 = *((_BYTE *)a1 + 64);
  unint64_t v4 = *((unsigned __int8 *)a1 + 16) | ((unint64_t)*((unsigned __int16 *)a1 + 9) << 16);
  __int128 v6 = *a1;
  unint64_t v7 = v4;
  __int128 v8 = *(__int128 *)((char *)a1 + 24);
  __int128 v9 = *(__int128 *)((char *)a1 + 40);
  uint64_t v10 = v2;
  char v11 = v3;
  return a2(&v6);
}

uint64_t sub_1002AA8F8(uint64_t a1, uint64_t (*a2)(_OWORD *))
{
  uint64_t v4 = static os_log_type_t.error.getter(a1);
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v6 = swift_allocObject(v5, 72LL, 7LL);
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)&v14[0] = a1;
  swift_errorRetain(a1);
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  uint64_t v8 = String.init<A>(describing:)(v14, v7);
  uint64_t v10 = v9;
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = sub_1000226F4();
  *(void *)(v6 + 32) = v8;
  *(void *)(v6 + sub_10016CF88(v0 + 40) = v10;
  uint64_t v11 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v12 = (void *)static OS_os_log.default.getter(v11);
  os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  v12,  "Failed to fetch user stats. Error - %@",  38LL,  2LL,  v6,  *(void *)&v14[0]);
  swift_bridgeObjectRelease();

  v14[0] = xmmword_1007F8E30;
  memset(&v14[1], 0, 48);
  char v15 = 0;
  return a2(v14);
}

uint64_t sub_1002AAA24(void *a1, void *a2, uint64_t a3)
{
  uint64_t v62 = a2;
  uint64_t v5 = sub_100004AEC(&qword_1009A7D38);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v63 = (uint64_t)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v55 - v8;
  uint64_t v69 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v69 - 8);
  uint64_t v11 = __chkstk_darwin(v69);
  unint64_t v66 = (char *)&v55 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v55 - v13;
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009AE450);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v64 = (uint64_t)&v55 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v55 - v18;
  uint64_t v20 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v21 = __chkstk_darwin(v20);
  unint64_t v65 = (char *)&v55 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  id v24 = (char *)&v55 - v23;
  uint64_t v68 = type metadata accessor for Date(0LL);
  uint64_t v70 = *(void *)(v68 - 8);
  uint64_t v25 = __chkstk_darwin(v68);
  uint64_t v59 = (char *)&v55 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v25);
  id v67 = (char *)&v55 - v27;
  uint64_t v28 = *(void *)(a3 + 256);
  uint64_t v30 = a1[3];
  uint64_t v29 = a1[4];
  sub_100012ED8(a1, v30);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v29 + 8) + 8LL) + 32LL))(v30);
  uint64_t v61 = v28;
  sub_10050FF80((uint64_t)v14, (uint64_t)v9);
  uint64_t v31 = sub_100004AEC(&qword_1009A7D40);
  uint64_t v60 = *(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48LL);
  if (v60(v9, 1LL, v31) == 1)
  {
    sub_100015794((uint64_t)v9, &qword_1009A7D38);
    uint64_t v32 = type metadata accessor for BeaconStatus(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))(v19, 1LL, 1LL, v32);
  }

  else
  {
    sub_10002218C((uint64_t)v9, (uint64_t)v19, type metadata accessor for BeaconStatus);
    uint64_t v32 = type metadata accessor for BeaconStatus(0LL);
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))(v19, 0LL, 1LL, v32);
  }

  Class v33 = *(void (**)(char *, uint64_t))(v10 + 8);
  v33(v14, v69);
  type metadata accessor for BeaconStatus(0LL);
  uint64_t v34 = *(void *)(v32 - 8);
  uint64_t v35 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v34 + 48);
  int v36 = v35(v19, 1LL, v32);
  uint64_t v37 = v70;
  uint64_t v38 = v68;
  if (v36 == 1)
  {
    sub_100015794((uint64_t)v19, (uint64_t *)&unk_1009AE450);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56))(v24, 1LL, 1LL, v38);
  }

  else
  {
    uint64_t v39 = &v19[*(int *)(v32 + 24)];
    uint64_t v58 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
    v58(v24, v39, v68);
    sub_100018C68((uint64_t)v19, type metadata accessor for BeaconStatus);
    uint64_t v40 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v37 + 56);
    v40(v24, 0LL, 1LL, v38);
    uint64_t v57 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v37 + 48);
    if (v57(v24, 1LL, v38) != 1)
    {
      unint64_t v55 = *(void (**)(char *, char *, uint64_t))(v37 + 32);
      unint64_t v56 = v40;
      v55(v67, v24, v38);
      uint64_t v41 = v62[3];
      uint64_t v42 = v62[4];
      sub_100012ED8(v62, v41);
      uint64_t v43 = (uint64_t)v66;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v42 + 8) + 8LL) + 32LL))(v41);
      uint64_t v44 = v63;
      sub_10050FF80(v43, v63);
      if (v60((char *)v44, 1LL, v31) == 1)
      {
        sub_100015794(v44, &qword_1009A7D38);
        uint64_t v45 = 1LL;
        uint64_t v46 = v64;
        id v24 = v65;
      }

      else
      {
        uint64_t v46 = v64;
        sub_10002218C(v44, v64, type metadata accessor for BeaconStatus);
        uint64_t v45 = 0LL;
        id v24 = v65;
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v34 + 56))(v46, v45, 1LL, v32);
      v33(v66, v69);
      int v47 = v35((char *)v46, 1LL, v32);
      uint64_t v48 = v70;
      uint64_t v49 = v56;
      if (v47 == 1)
      {
        sub_100015794(v46, (uint64_t *)&unk_1009AE450);
        v49(v24, 1LL, 1LL, v38);
      }

      else
      {
        v58(v24, (char *)(v46 + *(int *)(v32 + 24)), v38);
        sub_100018C68(v46, type metadata accessor for BeaconStatus);
        v49(v24, 0LL, 1LL, v38);
        if (v57(v24, 1LL, v38) != 1)
        {
          unint64_t v52 = v59;
          v55(v59, v24, v38);
          unint64_t v53 = v67;
          char v50 = static Date.> infix(_:_:)(v67, v52);
          uint64_t v54 = *(void (**)(char *, uint64_t))(v48 + 8);
          v54(v52, v38);
          v54(v53, v38);
          return v50 & 1;
        }
      }

      (*(void (**)(char *, uint64_t))(v48 + 8))(v67, v38);
    }
  }

  sub_100015794((uint64_t)v24, (uint64_t *)&unk_10099D720);
  char v50 = 0;
  return v50 & 1;
}

void *sub_1002AAFD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v97 = type metadata accessor for TimeBasedKey(0LL);
  uint64_t v7 = *(void *)(v97 - 8);
  __chkstk_darwin(v97);
  uint64_t v9 = (char *)&v84 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for TimeBasedKeysCriteria(0LL);
  __chkstk_darwin(v10);
  unint64_t v12 = (unint64_t)&v84 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v13 = v100;
  if (a2 == 2)
  {
    uint64_t v96 = v10;
    uint64_t v89 = v7;
    uint64_t v20 = (char *)sub_1006A14CC(v100);
    uint64_t v21 = sub_1006A14E0(v13);
  }

  else
  {
    if (a2 != 1)
    {
      swift_bridgeObjectRelease();
      if (qword_10099B238 == -1)
      {
LABEL_6:
        uint64_t v14 = type metadata accessor for Logger(0LL);
        uint64_t v15 = sub_10000A720(v14, (uint64_t)qword_100A2A488);
        uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
        os_log_type_t v17 = static os_log_type_t.error.getter(v16);
        if (os_log_type_enabled(v16, v17))
        {
          uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v18 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "_offlineAdvertisingKeys called for .invalid reason!",  v18,  2u);
          swift_slowDealloc(v18, -1LL, -1LL);
        }

        return _swiftEmptyArrayStorage;
      }

LABEL_52:
  __break(1u);
LABEL_53:
  swift_once(&qword_10099B238, sub_10028EB6C);
LABEL_16:
  uint64_t v30 = type metadata accessor for Logger(0LL);
  uint64_t v90 = sub_10000A720(v30, (uint64_t)qword_100A2A488);
  uint64_t v31 = (os_log_s *)Logger.logObject.getter(v90);
  uint64_t v32 = static os_log_type_t.info.getter(v31);
  if (os_log_type_enabled(v31, (os_log_type_t)v32))
  {
    Class v33 = (void *)v22;
    uint64_t v22 = swift_slowAlloc(22LL, -1LL);
    uint64_t v34 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v102 = v34;
    *(_DWORD *)uint64_t v22 = 134218242;
    uint64_t v91 = v33;
    if (__CFADD__(v23, v33))
    {
      __break(1u);
      goto LABEL_55;
    }

    uint64_t v100 = (uint64_t)v33 + v23;
    unint64_t v88 = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v22 + 4, v22 + 12);
    *(_WORD *)(v22 + 12) = 2080;
    uint64_t v86 = v22 + 14;
    uint64_t v98 = v20;
    uint64_t v99 = v26;
    int v87 = v32;
    unint64_t v35 = (unint64_t)v20;
    uint64_t v100 = 0LL;
    v101[0] = 0xE000000000000000LL;
    int64_t v36 = v23;
    _print_unlocked<A, B>(_:_:)( &v99,  &v100,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    v37._countAndFlagsBits = 3026478LL;
    v37._object = (void *)0xE300000000000000LL;
    String.append(_:)(v37);
    _print_unlocked<A, B>(_:_:)( &v98,  &v100,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v100 = sub_1003F11D4(v100, v101[0], (uint64_t *)&v102);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v86, v22 + 22);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v31,  (os_log_type_t)v87,  "Getting %llu keys in range: %s",  (uint8_t *)v22,  0x16u);
    uint64_t v38 = v88;
    swift_arrayDestroy(v88, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);

    uint64_t v22 = (uint64_t)v91;
  }

  else
  {

    unint64_t v35 = (unint64_t)v20;
    int64_t v36 = v23;
  }

  *(void *)unint64_t v12 = sub_1002FEDA4(v26, v35);
  swift_storeEnumTagMultiPayload(v12, v96, 1LL);
  v101[2] = v95;
  v101[3] = sub_100007864( (unint64_t *)&qword_10099D000,  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_10080B120);
  uint64_t v39 = sub_10000A7C8(&v100);
  sub_10001DC4C(v93, (uint64_t)v39, type metadata accessor for OwnedBeaconRecord);
  uint64_t v19 = v94;
  uint64_t v40 = v92;
  sub_1004EBE70((uint64_t)&v100, v12);
  if (v40)
  {
    sub_100018C68(v12, type metadata accessor for TimeBasedKeysCriteria);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v100);
    return (void *)v19;
  }

  int64_t v42 = v41;
  unint64_t v95 = v12;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v100);
  int64_t v43 = *(void *)(v42 + 16);
  uint64_t v85 = v36;
  if (v43)
  {
    uint64_t v91 = (void *)v22;
    uint64_t v102 = _swiftEmptyArrayStorage;
    sub_1000329E4(0, v43, 0);
    uint64_t v44 = *(unsigned __int8 *)(v89 + 80);
    int64_t v94 = v42;
    uint64_t v96 = *(void *)(v89 + 72);
    sub_10001DC4C(v42 + ((v44 + 32) & ~v44), (uint64_t)v9, type metadata accessor for TimeBasedKey);
    uint64_t v45 = &v9[*(int *)(v97 + 24)];
    uint64_t v46 = *((void *)v45 + 2);
    unint64_t v47 = *((void *)v45 + 3);
    sub_10001736C(v46, v47);
    sub_1004DFE7C(v46, v47);
    uint64_t v49 = v48;
    sub_1004DDA84(v48, 0);
    uint64_t v51 = v50;
    CCECCryptorRelease(v49);
    sub_100016F9C(v46, v47);
    __asm { BR              X9 }
  }

  swift_bridgeObjectRelease();
  Class v33 = _swiftEmptyArrayStorage;
  if (v36 < 0)
  {
    __break(1u);
    JUMPOUT(0x1002ABA00LL);
  }

  int64_t v23 = sub_100178E50(v36, (uint64_t)_swiftEmptyArrayStorage);
  uint64_t v20 = v52;
  uint64_t v32 = v53;
  unint64_t v12 = v54;
  if ((v54 & 1) != 0)
  {
    uint64_t v55 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
    swift_unknownObjectRetain_n(v23, 2LL);
    swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    unint64_t v56 = (void *)swift_dynamicCastClass(v23, v55);
    if (!v56)
    {
      swift_unknownObjectRelease(v23);
      unint64_t v56 = _swiftEmptyArrayStorage;
    }

    uint64_t v57 = v56[2];
    uint64_t v34 = (void *)swift_release();
    if (__OFSUB__(v12 >> 1, v32)) {
      goto LABEL_56;
    }
    uint64_t v34 = (void *)v23;
    if (v57 != (v12 >> 1) - v32) {
      goto LABEL_57;
    }
    uint64_t v20 = (char *)swift_dynamicCastClass(v23, v55);
    if (!v20)
    {
      swift_unknownObjectRelease(v23);
      uint64_t v20 = (char *)_swiftEmptyArrayStorage;
    }

    goto LABEL_33;
  }

  swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
  while (1)
  {
    uint64_t v20 = (char *)sub_1002FEC34(v23, (uint64_t)v20, v32, v12);
LABEL_33:
    uint64_t v34 = (void *)swift_unknownObjectRelease(v23);
    if ((v22 & 0x8000000000000000LL) == 0) {
      break;
    }
LABEL_55:
    __break(1u);
LABEL_56:
    __break(1u);
LABEL_57:
    swift_unknownObjectRelease(v34);
  }

  uint64_t v58 = sub_1003B7828(v22, (uint64_t)v33);
  uint64_t v60 = v59;
  uint64_t v62 = v61;
  unint64_t v64 = v63;
  if ((v63 & 1) != 0)
  {
    uint64_t v65 = type metadata accessor for __ContiguousArrayStorageBase(0LL);
    uint64_t v66 = swift_unknownObjectRetain_n(v58, 2LL);
    id v67 = (void *)swift_dynamicCastClass(v66, v65);
    if (!v67)
    {
      swift_unknownObjectRelease(v58);
      id v67 = _swiftEmptyArrayStorage;
    }

    uint64_t v68 = v67[2];
    uint64_t v69 = swift_release();
    if (__OFSUB__(v64 >> 1, v62))
    {
      __break(1u);
    }

    else
    {
      uint64_t v69 = v58;
      if (v68 == (v64 >> 1) - v62)
      {
        if (!swift_dynamicCastClass(v58, v65)) {
          swift_unknownObjectRelease(v58);
        }
        goto LABEL_42;
      }
    }

    swift_unknownObjectRelease(v69);
  }

  sub_1002FEC34(v58, v60, v62, v64);
LABEL_42:
  uint64_t v70 = swift_unknownObjectRelease(v58);
  Class v71 = (os_log_s *)Logger.logObject.getter(v70);
  os_log_type_t v72 = static os_log_type_t.info.getter(v71);
  if (os_log_type_enabled(v71, v72))
  {
    uint64_t v73 = swift_slowAlloc(22LL, -1LL);
    *(_DWORD *)uint64_t v73 = 134218240;
    uint64_t v100 = v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v73 + 4, v73 + 12);
    *(_WORD *)(v73 + 12) = 2048;
    uint64_t v100 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v100, v101, v73 + 14, v73 + 22);
    _os_log_impl( (void *)&_mh_execute_header,  v71,  v72,  "Returning %llu shortInterval keys and %llu longInterval keys",  (uint8_t *)v73,  0x16u);
    swift_slowDealloc(v73, -1LL, -1LL);
  }

  uint64_t v74 = sub_100004AEC(&qword_1009B0610);
  uint64_t v75 = swift_allocObject(v74, 48LL, 7LL);
  *(_OWORD *)(v75 + swift_weakDestroy(v0 + 16) = xmmword_1007F8E40;
  id v76 = objc_allocWithZone(&OBJC_CLASS___SPOfflineAdvertisingKeys);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  id v78 = [v76 initWithInterval:15 keys:isa];

  *(void *)(v75 + 32) = v78;
  id v79 = objc_allocWithZone(&OBJC_CLASS___SPOfflineAdvertisingKeys);
  Class v80 = Array._bridgeToObjectiveC()().super.isa;
  swift_release();
  id v81 = [v79 initWithInterval:1440 keys:v80];

  *(void *)(v75 + sub_10016CF88(v0 + 40) = v81;
  uint64_t v100 = v75;
  specialized Array._endMutation()(v82);
  uint64_t v19 = v100;
  sub_100018C68(v95, type metadata accessor for TimeBasedKeysCriteria);
  return (void *)v19;
}

  __break(1u);
  return result;
}

    swift_once(&qword_10099B330, sub_100374304);
    goto LABEL_11;
  }

  unint64_t v35 = v155;
  sub_100012ED8(v153, v154);
  (*(void (**)(uint64_t, uint64_t))(v35 + 192))(v34, v35);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v153);
  uint64_t v29 = v147;
  int64_t v36 = v27;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v27, v9, v29);
  if (qword_10099B330 != -1) {
    swift_once(&qword_10099B330, sub_100374304);
  }
  Swift::String v37 = type metadata accessor for Logger(0LL);
  sub_10000A720(v37, (uint64_t)qword_100A2A748);
  uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  uint64_t v39 = v140;
  uint64_t v40 = v148;
  v38(v140, v148, v29);
  int64_t v41 = v141;
  int v145 = (uint64_t (*)(char *, uint64_t, uint64_t))v38;
  int64_t v42 = ((uint64_t (*)(char *, char *, uint64_t))v38)(v141, v36, v29);
  int64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
  uint64_t v44 = static os_log_type_t.default.getter(v43);
  uint64_t v45 = v44;
  if (os_log_type_enabled(v43, v44))
  {
    uint64_t v46 = swift_slowAlloc(32LL, -1LL);
    uint64_t v136 = swift_slowAlloc(64LL, -1LL);
    v153[0] = v136;
    *(_DWORD *)uint64_t v46 = 141558531;
    uint64_t v150 = 1752392040LL;
    uint64_t v135 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, v151, v46 + 4, v46 + 12);
    *(_WORD *)(v46 + 12) = 2081;
    unint64_t v47 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v134 = v43;
    uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter(v29, v47);
    uint64_t v150 = sub_1003F11D4(v48, v49, v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, v151, v46 + 14, v46 + 22);
    swift_bridgeObjectRelease();
    uint64_t v50 = *(void (**)(char *, uint64_t))(v10 + 8);
    v50(v39, v29);
    *(_WORD *)(v46 + 22) = 2082;
    uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter(v29, v47);
    uint64_t v150 = sub_1003F11D4(v51, v52, v153);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, v151, v46 + 24, v46 + 32);
    swift_bridgeObjectRelease();
    v50(v41, v29);
    uint64_t v53 = v134;
    _os_log_impl( (void *)&_mh_execute_header,  v134,  (os_log_type_t)v135,  "didStartPlayingSoundOnDevice %{private,mask.hash}s. groupId %{public}s",  (uint8_t *)v46,  0x20u);
    unint64_t v54 = v136;
    swift_arrayDestroy(v136, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1LL, -1LL);
    uint64_t v55 = v46;
    uint64_t v40 = v148;
    swift_slowDealloc(v55, -1LL, -1LL);
  }

  else
  {

    uint64_t v50 = *(void (**)(char *, uint64_t))(v10 + 8);
    v50(v41, v29);
    v50(v39, v29);
  }

  v50(v36, v29);
LABEL_16:
  uint64_t v65 = v144;
  uint64_t v66 = (uint64_t)v146;
  id v67 = (uint64_t *)(v144 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators);
  swift_beginAccess(v144 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators, v153, 0LL, 0LL);
  uint64_t v68 = *v67;
  if (!*(void *)(v68 + 16))
  {
    id v76 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v76 - 8) + 56LL))(v66, 1LL, 1LL, v76);
LABEL_22:
    sub_100015794(v66, &qword_10099E488);
    if (qword_10099B330 != -1) {
      swift_once(&qword_10099B330, sub_100374304);
    }
    id v78 = type metadata accessor for Logger(0LL);
    sub_10000A720(v78, (uint64_t)qword_100A2A748);
    id v79 = v143;
    Class v80 = v145(v143, v40, v29);
    id v81 = (os_log_s *)Logger.logObject.getter(v80);
    uint64_t v82 = static os_log_type_t.error.getter(v81);
    if (os_log_type_enabled(v81, v82))
    {
      id v83 = v29;
      uint64_t v84 = v50;
      uint64_t v85 = v79;
      uint64_t v86 = swift_slowAlloc(12LL, -1LL);
      int v87 = swift_slowAlloc(32LL, -1LL);
      uint64_t v150 = v87;
      *(_DWORD *)uint64_t v86 = 136315138;
      unint64_t v88 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v89 = dispatch thunk of CustomStringConvertible.description.getter(v83, v88);
      uint64_t v152 = sub_1003F11D4(v89, v90, &v150);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v152, v153, v86 + 4, v86 + 12);
      swift_bridgeObjectRelease();
      v84(v85, v83);
      uint64_t v91 = "didStartPlayingSoundOnDevice called with unknown device %s";
      uint64_t v92 = v81;
      uint64_t v93 = v82;
      int64_t v94 = (uint8_t *)v86;
      unint64_t v95 = 12;
LABEL_39:
      _os_log_impl((void *)&_mh_execute_header, v92, v93, v91, v94, v95);
      swift_arrayDestroy(v87, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v87, -1LL, -1LL);
      swift_slowDealloc(v86, -1LL, -1LL);
LABEL_42:

      return;
    }

    uint64_t v96 = v79;
    goto LABEL_41;
  }

  swift_bridgeObjectRetain(v68);
  uint64_t v69 = sub_10030D124(v40);
  if ((v70 & 1) != 0)
  {
    Class v71 = v69;
    os_log_type_t v72 = *(void *)(v68 + 56);
    uint64_t v73 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
    uint64_t v74 = *(void *)(v73 - 8);
    uint64_t v75 = v72 + *(void *)(v74 + 72) * v71;
    uint64_t v29 = v147;
    sub_10001DC4C(v75, v66, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v74 + 56))(v66, 0LL, 1LL, v73);
  }

  else
  {
    uint64_t v73 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v73 - 8) + 56LL))(v66, 1LL, 1LL, v73);
  }

  Swift::String v77 = v142;
  swift_bridgeObjectRelease();
  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
  sub_100015794(v66, &qword_10099E488);
  uint64_t v97 = (uint64_t *)(v65 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_playSoundSubjects);
  swift_beginAccess(v65 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_playSoundSubjects, &v150, 0LL, 0LL);
  uint64_t v98 = *v97;
  if (!*(void *)(v98 + 16))
  {
LABEL_35:
    if (qword_10099B330 != -1) {
      swift_once(&qword_10099B330, sub_100374304);
    }
    uint64_t v117 = type metadata accessor for Logger(0LL);
    sub_10000A720(v117, (uint64_t)qword_100A2A748);
    uint64_t v118 = v139;
    uint64_t v119 = v145(v139, v40, v29);
    id v81 = (os_log_s *)Logger.logObject.getter(v119);
    uint64_t v120 = static os_log_type_t.error.getter(v81);
    if (os_log_type_enabled(v81, v120))
    {
      uint64_t v86 = swift_slowAlloc(22LL, -1LL);
      int v87 = swift_slowAlloc(32LL, -1LL);
      uint64_t v152 = v87;
      *(_DWORD *)uint64_t v86 = 141558275;
      uint64_t v149 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150, v86 + 4, v86 + 12);
      *(_WORD *)(v86 + 12) = 2081;
      uint64_t v121 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v122 = dispatch thunk of CustomStringConvertible.description.getter(v29, v121);
      uint64_t v149 = sub_1003F11D4(v122, v123, &v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150, v86 + 14, v86 + 22);
      swift_bridgeObjectRelease();
      v50(v118, v29);
      uint64_t v91 = "Missing playSoundSubject for device %{private,mask.hash}s!";
      uint64_t v92 = v81;
      uint64_t v93 = v120;
      int64_t v94 = (uint8_t *)v86;
      unint64_t v95 = 22;
      goto LABEL_39;
    }

    uint64_t v96 = v118;
LABEL_41:
    v50(v96, v29);
    goto LABEL_42;
  }

  swift_bridgeObjectRetain(v98);
  uint64_t v99 = sub_10030D124(v40);
  if ((v100 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_35;
  }

  uint64_t v101 = *(void *)(*(void *)(v98 + 56) + 8 * v99);
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v102 = v138;
  if (v138)
  {
    swift_errorRetain(v138);
    if (qword_10099B330 != -1) {
      swift_once(&qword_10099B330, sub_100374304);
    }
    uint64_t v103 = type metadata accessor for Logger(0LL);
    sub_10000A720(v103, (uint64_t)qword_100A2A748);
    v145(v77, v40, v29);
    swift_errorRetain(v102);
    unint64_t v104 = swift_errorRetain(v102);
    uint64_t v105 = (os_log_s *)Logger.logObject.getter(v104);
    uint64_t v106 = static os_log_type_t.error.getter(v105);
    __int128 v107 = v106;
    if (os_log_type_enabled(v105, v106))
    {
      uint64_t v108 = v77;
      uint64_t v109 = swift_slowAlloc(32LL, -1LL);
      uint64_t v148 = swift_slowAlloc(64LL, -1LL);
      uint64_t v152 = v148;
      *(_DWORD *)uint64_t v109 = 141558531;
      uint64_t v149 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150, v109 + 4, v109 + 12);
      *(_WORD *)(v109 + 12) = 2081;
      id v110 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      LODWORD(v147) = v107;
      Class v111 = dispatch thunk of CustomStringConvertible.description.getter(v29, v110);
      uint64_t v149 = sub_1003F11D4(v111, v112, &v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150, v109 + 14, v109 + 22);
      swift_bridgeObjectRelease();
      v50(v108, v29);
      *(_WORD *)(v109 + 22) = 2082;
      uint64_t v149 = v102;
      swift_errorRetain(v102);
      uint64_t v113 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      id v114 = String.init<A>(describing:)(&v149, v113);
      uint64_t v149 = sub_1003F11D4(v114, v115, &v152);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150, v109 + 24, v109 + 32);
      swift_bridgeObjectRelease();
      swift_errorRelease(v102);
      swift_errorRelease(v102);
      _os_log_impl( (void *)&_mh_execute_header,  v105,  (os_log_type_t)v147,  "didStartPlayingSoundOnDevice %{private,mask.hash}s failed due to %{public}s",  (uint8_t *)v109,  0x20u);
      char v116 = v148;
      swift_arrayDestroy(v148, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v116, -1LL, -1LL);
      swift_slowDealloc(v109, -1LL, -1LL);
    }

    else
    {
      v50(v77, v29);
      swift_errorRelease(v102);
      swift_errorRelease(v102);
    }

    uint64_t v152 = v102;
    swift_errorRetain(v102);
    PassthroughSubject.send(completion:)(&v152);
    swift_release(v101);
    swift_errorRelease(v102);
    swift_errorRelease(v102);
  }

  else
  {
    if (qword_10099B330 != -1) {
      swift_once(&qword_10099B330, sub_100374304);
    }
    uint64_t v124 = type metadata accessor for Logger(0LL);
    sub_10000A720(v124, (uint64_t)qword_100A2A748);
    char v125 = v137;
    unint64_t v126 = v145(v137, v40, v29);
    uint64_t v127 = (os_log_s *)Logger.logObject.getter(v126);
    uint64_t v128 = static os_log_type_t.default.getter(v127);
    if (os_log_type_enabled(v127, v128))
    {
      uint64_t v129 = swift_slowAlloc(22LL, -1LL);
      uint64_t v130 = swift_slowAlloc(32LL, -1LL);
      uint64_t v152 = v130;
      *(_DWORD *)uint64_t v129 = 141558275;
      uint64_t v149 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150, v129 + 4, v129 + 12);
      *(_WORD *)(v129 + 12) = 2081;
      uint64_t v147 = v101;
      uint64_t v131 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      int v132 = dispatch thunk of CustomStringConvertible.description.getter(v29, v131);
      uint64_t v149 = sub_1003F11D4(v132, v133, &v152);
      uint64_t v101 = v147;
      uint64_t v40 = v148;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v149, &v150, v129 + 14, v129 + 22);
      swift_bridgeObjectRelease();
      v50(v125, v29);
      _os_log_impl( (void *)&_mh_execute_header,  v127,  v128,  "didStartPlayingSoundOnDevice %{private,mask.hash}s succeeded",  (uint8_t *)v129,  0x16u);
      swift_arrayDestroy(v130, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v130, -1LL, -1LL);
      swift_slowDealloc(v129, -1LL, -1LL);
    }

    else
    {
      v50(v125, v29);
    }

    PassthroughSubject.send(_:)(v40);
    uint64_t v152 = 4LL;
    PassthroughSubject.send(completion:)(&v152);
    swift_release(v101);
  }

  sub_1000A6F30(v61);
  swift_release();
  uint64_t v30 = -1LL << *(_BYTE *)(v57 + 32);
  uint64_t v31 = ~v30;
  uint64_t v32 = -v30;
  Class v33 = v32 < 64 ? ~(-1LL << v32) : -1LL;
  uint64_t v61 = v57;
  unint64_t v63 = v58;
  uint64_t v65 = v31;
  id v67 = v33 & *(void *)(v57 + 64);
  swift_bridgeObjectRetain(v57);
  swift_retain();
  sub_100601248();
  if (v35 == 3)
  {
LABEL_56:
    sub_1000A6F30(v61);
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    return 0LL;
  }

  uint64_t v59 = v34;
  j = 0LL;
  uint64_t v38 = (unint64_t)(v65 + 64) >> 6;
  uint64_t v39 = v67;
  if (v67) {
    goto LABEL_61;
  }
LABEL_62:
  int64_t v43 = j + 1;
  if (__OFADD__(j, 1LL))
  {
    __break(1u);
  }

  else if (v43 < v38)
  {
    uint64_t v44 = *(void *)(v63 + 8 * v43);
    if (v44)
    {
LABEL_71:
      uint64_t v39 = (v44 - 1) & v44;
      int64_t v42 = __clz(__rbit64(v44)) + (v43 << 6);
      for (j = v43; ; int64_t v42 = v41 | (j << 6))
      {
        unint64_t v47 = *(void *)(v57 + 56) + 16 * v42;
        if (*(_BYTE *)(v47 + 8))
        {
          if (*(_BYTE *)(v47 + 8) == 1)
          {
            uint64_t v48 = 0x7261646E6F636553LL;
            uint64_t v49 = 0xE900000000000079LL;
            uint64_t v50 = a1;
            if (!a1) {
              goto LABEL_84;
            }
          }

          else
          {
            uint64_t v48 = 0x6F4C657275636553LL;
            uint64_t v49 = 0xEF736E6F69746163LL;
            uint64_t v50 = a1;
            if (!a1)
            {
LABEL_84:
              unint64_t v52 = 0xE700000000000000LL;
              uint64_t v51 = 0x7972616D697250LL;
              goto LABEL_85;
            }
          }
        }

        else
        {
          uint64_t v49 = 0xE700000000000000LL;
          uint64_t v48 = 0x7972616D697250LL;
          uint64_t v50 = a1;
          if (!a1) {
            goto LABEL_84;
          }
        }

        if (v50 == 1) {
          uint64_t v51 = 0x7261646E6F636553LL;
        }
        else {
          uint64_t v51 = 0x6F4C657275636553LL;
        }
        if (v50 == 1) {
          unint64_t v52 = 0xE900000000000079LL;
        }
        else {
          unint64_t v52 = 0xEF736E6F69746163LL;
        }
LABEL_85:
        uint64_t v53 = *(void *)v47;
        if (v48 == v51 && v49 == v52)
        {
          swift_bridgeObjectRelease_n(v49, 2LL);
        }

        else
        {
          uint64_t v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v48, v49, v51, v52, 0LL);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v40 & 1) == 0)
          {
            if (!v39) {
              goto LABEL_62;
            }
            goto LABEL_61;
          }
        }

        unint64_t v54 = v59;
        if (v59 <= v53) {
          unint64_t v54 = v53;
        }
        uint64_t v59 = v54;
        if (!v39) {
          goto LABEL_62;
        }
LABEL_61:
        int64_t v41 = __clz(__rbit64(v39));
        v39 &= v39 - 1;
      }
    }

    uint64_t v45 = j + 2;
    if (j + 2 < v38)
    {
      uint64_t v44 = *(void *)(v63 + 8 * v45);
      if (v44)
      {
LABEL_67:
        int64_t v43 = v45;
        goto LABEL_71;
      }

      uint64_t v46 = j + 3;
      if (j + 3 < v38)
      {
        uint64_t v44 = *(void *)(v63 + 8 * v46);
        if (v44)
        {
LABEL_70:
          int64_t v43 = v46;
          goto LABEL_71;
        }

        uint64_t v45 = j + 4;
        if (j + 4 < v38)
        {
          uint64_t v44 = *(void *)(v63 + 8 * v45);
          if (v44) {
            goto LABEL_67;
          }
          uint64_t v46 = j + 5;
          if (j + 5 < v38)
          {
            uint64_t v44 = *(void *)(v63 + 8 * v46);
            if (v44) {
              goto LABEL_70;
            }
            uint64_t v45 = j + 6;
            if (j + 6 < v38)
            {
              uint64_t v44 = *(void *)(v63 + 8 * v45);
              if (v44) {
                goto LABEL_67;
              }
              int64_t v43 = j + 7;
              if (j + 7 < v38)
              {
                uint64_t v44 = *(void *)(v63 + 8 * v43);
                if (!v44)
                {
                  uint64_t v55 = j + 8;
                  do
                  {
                    if (v38 == v55) {
                      goto LABEL_104;
                    }
                    uint64_t v44 = *(void *)(v63 + 8 * v55++);
                  }

                  while (!v44);
                  int64_t v43 = v55 - 1;
                }

                goto LABEL_71;
              }
            }
          }
        }
      }
    }
  }

    if (v10 < v14) {
      goto LABEL_130;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0) {
      unint64_t v12 = sub_1003CB1DC(0LL, *((void *)v12 + 2) + 1LL, 1, v12);
    }
    uint64_t v44 = *((void *)v12 + 2);
    int64_t v43 = *((void *)v12 + 3);
    uint64_t v13 = v44 + 1;
    uint64_t v11 = v107;
    if (v44 >= v43 >> 1)
    {
      uint64_t v92 = sub_1003CB1DC((char *)(v43 > 1), v44 + 1, 1, v12);
      uint64_t v11 = v107;
      unint64_t v12 = v92;
    }

    *((void *)v12 + 2) = v13;
    uint64_t v45 = v12 + 32;
    uint64_t v46 = &v12[16 * v44 + 32];
    *(void *)uint64_t v46 = v14;
    *((void *)v46 + 1) = v10;
    if (v44)
    {
      while (1)
      {
        unint64_t v47 = v13 - 1;
        if (v13 >= 4)
        {
          unint64_t v52 = &v45[16 * v13];
          uint64_t v53 = *((void *)v52 - 8);
          unint64_t v54 = *((void *)v52 - 7);
          uint64_t v58 = __OFSUB__(v54, v53);
          uint64_t v55 = v54 - v53;
          if (v58) {
            goto LABEL_119;
          }
          uint64_t v57 = *((void *)v52 - 6);
          unint64_t v56 = *((void *)v52 - 5);
          uint64_t v58 = __OFSUB__(v56, v57);
          uint64_t v50 = v56 - v57;
          uint64_t v51 = v58;
          if (v58) {
            goto LABEL_120;
          }
          uint64_t v59 = v13 - 2;
          uint64_t v60 = &v45[16 * v13 - 32];
          uint64_t v62 = *(void *)v60;
          uint64_t v61 = *((void *)v60 + 1);
          uint64_t v58 = __OFSUB__(v61, v62);
          unint64_t v63 = v61 - v62;
          if (v58) {
            goto LABEL_122;
          }
          uint64_t v58 = __OFADD__(v50, v63);
          unint64_t v64 = v50 + v63;
          if (v58) {
            goto LABEL_125;
          }
          if (v64 >= v55)
          {
            uint64_t v82 = &v45[16 * v47];
            uint64_t v84 = *(void *)v82;
            id v83 = *((void *)v82 + 1);
            uint64_t v58 = __OFSUB__(v83, v84);
            uint64_t v85 = v83 - v84;
            if (v58) {
              goto LABEL_129;
            }
            uint64_t v75 = v50 < v85;
            goto LABEL_89;
          }
        }

        else
        {
          if (v13 != 3)
          {
            id v76 = *((void *)v12 + 4);
            Swift::String v77 = *((void *)v12 + 5);
            uint64_t v58 = __OFSUB__(v77, v76);
            uint64_t v69 = v77 - v76;
            uint64_t v70 = v58;
            goto LABEL_83;
          }

          uint64_t v49 = *((void *)v12 + 4);
          uint64_t v48 = *((void *)v12 + 5);
          uint64_t v58 = __OFSUB__(v48, v49);
          uint64_t v50 = v48 - v49;
          uint64_t v51 = v58;
        }

        if ((v51 & 1) != 0) {
          goto LABEL_121;
        }
        uint64_t v59 = v13 - 2;
        uint64_t v65 = &v45[16 * v13 - 32];
        id v67 = *(void *)v65;
        uint64_t v66 = *((void *)v65 + 1);
        uint64_t v68 = __OFSUB__(v66, v67);
        uint64_t v69 = v66 - v67;
        uint64_t v70 = v68;
        if (v68) {
          goto LABEL_124;
        }
        Class v71 = &v45[16 * v47];
        uint64_t v73 = *(void *)v71;
        os_log_type_t v72 = *((void *)v71 + 1);
        uint64_t v58 = __OFSUB__(v72, v73);
        uint64_t v74 = v72 - v73;
        if (v58) {
          goto LABEL_127;
        }
        if (__OFADD__(v69, v74)) {
          goto LABEL_128;
        }
        if (v69 + v74 >= v50)
        {
          uint64_t v75 = v50 < v74;
LABEL_89:
          if (v75) {
            unint64_t v47 = v59;
          }
          goto LABEL_91;
        }

    swift_bridgeObjectRelease();
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
    __break(1u);
    JUMPOUT(0x1006A4288LL);
  }

  if (v21 < 0) {
    goto LABEL_52;
  }
  int64_t v23 = v21 * v18;
  if (a4 < a2 || a2 + v23 <= a4)
  {
    swift_arrayInitWithTakeFrontToBack(a4, a2, v21, v43);
  }

  else if (a4 != a2)
  {
    swift_arrayInitWithTakeBackToFront(a4, a2);
  }

  uint64_t v29 = a4 + v23;
  uint64_t v50 = a4 + v23;
  unint64_t v52 = a2;
  if (v23 >= 1 && a1 < a2)
  {
    uint64_t v31 = -v18;
    uint64_t v32 = a5 + 32;
    Class v33 = *(void *)(a5 + 16);
    uint64_t v45 = a4;
    int64_t v42 = a1;
    uint64_t v48 = -v18;
    do
    {
      sub_10042811C(v29 + v31, v46);
      sub_10042811C(a2 + v31, v49);
      if (v33)
      {
        unint64_t v47 = a2;
        uint64_t v44 = a3;
        __asm { BR              X9 }
      }

      uint64_t v34 = v48;
      unint64_t v35 = a3 + v48;
      sub_100428160(v49);
      sub_100428160(v46);
      int64_t v36 = v50;
      Swift::String v37 = v50 + v34;
      v50 += v34;
      uint64_t v38 = v45;
      uint64_t v39 = v42;
      uint64_t v31 = v34;
      if (a3 < v36 || v35 >= v36)
      {
        swift_arrayInitWithTakeFrontToBack(a3 + v34, v37, 1LL, v43);
      }

      else if (a3 != v36)
      {
        swift_arrayInitWithTakeBackToFront(a3 + v34, v37);
      }

      uint64_t v29 = v50;
      if (v50 <= v38) {
        break;
      }
      a3 = v35;
    }

    while (a2 > v39);
  }

uint64_t sub_1002ABCCC(uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = a1 + 16;
  swift_beginAccess(a1 + 16, v10, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v8);
  if (result)
  {
    sub_1002AAFD4(a4, a5);
    a2();
    swift_bridgeObjectRelease();
    return swift_release();
  }

  return result;
}

uint64_t sub_1002ABF20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5)
{
  uint64_t v9 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  sub_10001DC4C(a3, (uint64_t)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL), v12);
  sub_100013044(a4, (uint64_t)v19);
  uint64_t v13 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v14 = (v13 + 24) & ~v13;
  unint64_t v15 = (v11 + v14 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v16 = swift_allocObject(&unk_10094D998, v15 + 41, v13 | 7);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = a1;
  sub_10002218C( (uint64_t)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v16 + v14,  type metadata accessor for BeaconEstimatedLocation);
  sub_100012EC0(v19, v16 + v15);
  *(_BYTE *)(v16 + v15 + sub_10016CF88(v0 + 40) = a5;
  swift_retain();
  sub_1004F89A0(a3, (uint64_t)sub_1002D9B6C, v16);
  return swift_release();
}

void sub_1002AC054(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, int a5)
{
  int v135 = a5;
  uint64_t v141 = (char *)a4;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v138 = *(void *)(v7 - 8);
  uint64_t v139 = v7;
  __chkstk_darwin(v7);
  uint64_t v137 = (char *)&v130 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v136 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v9 = __chkstk_darwin(v136);
  uint64_t v133 = (uint64_t)&v130 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  os_log_t v132 = (os_log_t)((char *)&v130 - v12);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v134 = (uint64_t)&v130 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v140 = (uint64_t)&v130 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v130 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v130 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v130 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v130 - v26;
  uint64_t v28 = sub_100004AEC(&qword_1009A6628);
  __chkstk_darwin(v28);
  uint64_t v30 = (uint64_t *)((char *)&v130 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Transaction.capture()();
  sub_10001581C(a1, (uint64_t)v30, &qword_1009A6628);
  if (swift_getEnumCaseMultiPayload(v30, v28) == 1)
  {
    uint64_t v31 = *v30;
    v144[0] = v31;
    swift_errorRetain(v31);
    uint64_t v32 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    if ((swift_dynamicCast(&v143, v144, v32, &type metadata for BeaconStore.BeaconStoreError, 6LL) & 1) != 0)
    {
      if (v143 == 8)
      {
        if (qword_10099B4D8 != -1) {
          swift_once(&qword_10099B4D8, sub_1004AB71C);
        }
        uint64_t v33 = type metadata accessor for Logger(0LL);
        sub_10000A720(v33, (uint64_t)qword_100A2AB18);
        os_log_t v34 = v132;
        sub_10001DC4C(a3, (uint64_t)v132, type metadata accessor for BeaconEstimatedLocation);
        uint64_t v35 = sub_100013044((uint64_t)v141, (uint64_t)v144);
        int64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
        os_log_type_t v37 = static os_log_type_t.default.getter(v36);
        int v38 = v37;
        if (os_log_type_enabled(v36, v37))
        {
          uint64_t v39 = swift_slowAlloc(42LL, -1LL);
          uint64_t v40 = swift_slowAlloc(64LL, -1LL);
          uint64_t v141 = (char *)v40;
          *(_DWORD *)uint64_t v39 = 141558787;
          uint64_t v142 = 1752392040LL;
          uint64_t v143 = v40;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v39 + 4, v39 + 12);
          *(_WORD *)(v39 + 12) = 2081;
          LODWORD(v1sub_10016CF88(v0 + 40) = v38;
          uint64_t v41 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v42 = v139;
          uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter(v139, v41);
          uint64_t v142 = sub_1003F11D4(v43, v44, &v143);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v39 + 14, v39 + 22);
          swift_bridgeObjectRelease();
          sub_100018C68((uint64_t)v34, type metadata accessor for BeaconEstimatedLocation);
          *(_WORD *)(v39 + 22) = 2160;
          uint64_t v142 = 1752392040LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v39 + 24, v39 + 32);
          *(_WORD *)(v39 + 32) = 2081;
          uint64_t v46 = v145;
          uint64_t v45 = v146;
          sub_100012ED8(v144, v145);
          unint64_t v47 = v137;
          (*(void (**)(uint64_t))(*(void *)(*(void *)(v45 + 8) + 8LL) + 32LL))(v46);
          uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter(v42, v41);
          unint64_t v50 = v49;
          (*(void (**)(char *, uint64_t))(v138 + 8))(v47, v42);
          uint64_t v142 = sub_1003F11D4(v48, v50, &v143);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v39 + 34, v39 + 42);
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v144);
          _os_log_impl( (void *)&_mh_execute_header,  v36,  (os_log_type_t)v140,  "Skipped saving outdated LocationID: %{private,mask.hash}s for Beacon: %{private,mask.hash}s.",  (uint8_t *)v39,  0x2Au);
          uint64_t v51 = (char *)&type metadata for Any + 8;
          uint64_t v52 = (uint64_t)v141;
          uint64_t v53 = (uint64_t)v141;
          uint64_t v54 = 2LL;
LABEL_16:
          swift_arrayDestroy(v53, v54, v51);
          swift_slowDealloc(v52, -1LL, -1LL);
          uint64_t v108 = v39;
LABEL_23:
          swift_slowDealloc(v108, -1LL, -1LL);

          swift_errorRelease(v31);
          return;
        }

        swift_errorRelease(v31);
        sub_100018C68((uint64_t)v34, type metadata accessor for BeaconEstimatedLocation);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v144);
        goto LABEL_28;
      }

      if (qword_10099B4D8 != -1) {
        swift_once(&qword_10099B4D8, sub_1004AB71C);
      }
      uint64_t v109 = type metadata accessor for Logger(0LL);
      sub_10000A720(v109, (uint64_t)qword_100A2AB18);
      uint64_t v110 = v133;
      sub_10001DC4C(a3, v133, type metadata accessor for BeaconEstimatedLocation);
      sub_100013044((uint64_t)v141, (uint64_t)v144);
      swift_errorRetain(v31);
      uint64_t v111 = swift_errorRetain(v31);
      int64_t v36 = (os_log_s *)Logger.logObject.getter(v111);
      os_log_type_t v112 = static os_log_type_t.error.getter(v36);
      int v113 = v112;
      if (os_log_type_enabled(v36, v112))
      {
        uint64_t v114 = swift_slowAlloc(52LL, -1LL);
        uint64_t v115 = swift_slowAlloc(96LL, -1LL);
        uint64_t v140 = v115;
        *(_DWORD *)uint64_t v114 = 141559043;
        uint64_t v142 = 1752392040LL;
        uint64_t v143 = v115;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v114 + 4, v114 + 12);
        *(_WORD *)(v114 + 12) = 2081;
        uint64_t v141 = (char *)v32;
        LODWORD(v136) = v113;
        uint64_t v116 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v117 = v139;
        uint64_t v118 = dispatch thunk of CustomStringConvertible.description.getter(v139, v116);
        uint64_t v142 = sub_1003F11D4(v118, v119, &v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v114 + 14, v114 + 22);
        swift_bridgeObjectRelease();
        sub_100018C68(v110, type metadata accessor for BeaconEstimatedLocation);
        *(_WORD *)(v114 + 22) = 2160;
        uint64_t v142 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v114 + 24, v114 + 32);
        *(_WORD *)(v114 + 32) = 2081;
        uint64_t v121 = v145;
        uint64_t v120 = v146;
        sub_100012ED8(v144, v145);
        uint64_t v122 = v137;
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v120 + 8) + 8LL) + 32LL))(v121);
        uint64_t v123 = dispatch thunk of CustomStringConvertible.description.getter(v117, v116);
        unint64_t v125 = v124;
        (*(void (**)(char *, uint64_t))(v138 + 8))(v122, v117);
        uint64_t v142 = sub_1003F11D4(v123, v125, &v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v114 + 34, v114 + 42);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v144);
        *(_WORD *)(v114 + 42) = 2082;
        uint64_t v142 = v31;
        swift_errorRetain(v31);
        uint64_t v126 = String.init<A>(describing:)(&v142, v141);
        uint64_t v142 = sub_1003F11D4(v126, v127, &v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v114 + 44, v114 + 52);
        swift_bridgeObjectRelease();
        swift_errorRelease(v31);
        swift_errorRelease(v31);
        _os_log_impl( (void *)&_mh_execute_header,  v36,  (os_log_type_t)v136,  "Failed to save LocationID: %{private,mask.hash}s for Beacon: %{private,mask.hash}s: %{public}s.",  (uint8_t *)v114,  0x34u);
        uint64_t v128 = v140;
        swift_arrayDestroy(v140, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v128, -1LL, -1LL);
        uint64_t v108 = v114;
        goto LABEL_23;
      }

      swift_errorRelease(v31);
      uint64_t v129 = v110;
    }

    else
    {
      if (qword_10099B4D8 != -1) {
        swift_once(&qword_10099B4D8, sub_1004AB71C);
      }
      uint64_t v89 = type metadata accessor for Logger(0LL);
      sub_10000A720(v89, (uint64_t)qword_100A2AB18);
      uint64_t v90 = v134;
      sub_10001DC4C(a3, v134, type metadata accessor for BeaconEstimatedLocation);
      sub_100013044((uint64_t)v141, (uint64_t)v144);
      swift_errorRetain(v31);
      uint64_t v91 = swift_errorRetain(v31);
      int64_t v36 = (os_log_s *)Logger.logObject.getter(v91);
      os_log_type_t v92 = static os_log_type_t.error.getter(v36);
      int v93 = v92;
      if (os_log_type_enabled(v36, v92))
      {
        uint64_t v94 = swift_slowAlloc(52LL, -1LL);
        uint64_t v141 = (char *)v32;
        uint64_t v39 = v94;
        uint64_t v95 = swift_slowAlloc(96LL, -1LL);
        uint64_t v140 = v95;
        *(_DWORD *)uint64_t v39 = 141559043;
        uint64_t v142 = 1752392040LL;
        uint64_t v143 = v95;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v39 + 4, v39 + 12);
        *(_WORD *)(v39 + 12) = 2081;
        LODWORD(v136) = v93;
        uint64_t v96 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v97 = v139;
        uint64_t v98 = dispatch thunk of CustomStringConvertible.description.getter(v139, v96);
        uint64_t v142 = sub_1003F11D4(v98, v99, &v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v39 + 14, v39 + 22);
        swift_bridgeObjectRelease();
        sub_100018C68(v90, type metadata accessor for BeaconEstimatedLocation);
        *(_WORD *)(v39 + 22) = 2160;
        uint64_t v142 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v39 + 24, v39 + 32);
        *(_WORD *)(v39 + 32) = 2081;
        uint64_t v101 = v145;
        uint64_t v100 = v146;
        sub_100012ED8(v144, v145);
        uint64_t v102 = v137;
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v100 + 8) + 8LL) + 32LL))(v101);
        uint64_t v103 = dispatch thunk of CustomStringConvertible.description.getter(v97, v96);
        unint64_t v105 = v104;
        (*(void (**)(char *, uint64_t))(v138 + 8))(v102, v97);
        uint64_t v142 = sub_1003F11D4(v103, v105, &v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v39 + 34, v39 + 42);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v144);
        *(_WORD *)(v39 + 42) = 2082;
        uint64_t v142 = v31;
        swift_errorRetain(v31);
        uint64_t v106 = String.init<A>(describing:)(&v142, v141);
        uint64_t v142 = sub_1003F11D4(v106, v107, &v143);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v39 + 44, v39 + 52);
        swift_bridgeObjectRelease();
        swift_errorRelease(v31);
        swift_errorRelease(v31);
        _os_log_impl( (void *)&_mh_execute_header,  v36,  (os_log_type_t)v136,  "Failed to save LocationID: %{private,mask.hash}s for Beacon: %{private,mask.hash}s: %{public}s.",  (uint8_t *)v39,  0x34u);
        uint64_t v51 = (char *)&type metadata for Any + 8;
        uint64_t v52 = v140;
        uint64_t v53 = v140;
        uint64_t v54 = 3LL;
        goto LABEL_16;
      }

      swift_errorRelease(v31);
      uint64_t v129 = v90;
    }

    sub_100018C68(v129, type metadata accessor for BeaconEstimatedLocation);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v144);
    swift_errorRelease(v31);
    swift_errorRelease(v31);
LABEL_28:

    return;
  }

  if (qword_10099B4D8 != -1) {
    swift_once(&qword_10099B4D8, sub_1004AB71C);
  }
  uint64_t v55 = type metadata accessor for Logger(0LL);
  sub_10000A720(v55, (uint64_t)qword_100A2AB18);
  sub_10001DC4C(a3, (uint64_t)v27, type metadata accessor for BeaconEstimatedLocation);
  sub_100013044((uint64_t)v141, (uint64_t)v144);
  uint64_t v141 = v25;
  sub_10001DC4C(a3, (uint64_t)v25, type metadata accessor for BeaconEstimatedLocation);
  sub_10001DC4C(a3, (uint64_t)v22, type metadata accessor for BeaconEstimatedLocation);
  unint64_t v56 = v19;
  sub_10001DC4C(a3, (uint64_t)v19, type metadata accessor for BeaconEstimatedLocation);
  uint64_t v57 = v140;
  uint64_t v58 = sub_10001DC4C(a3, v140, type metadata accessor for BeaconEstimatedLocation);
  uint64_t v59 = (os_log_s *)Logger.logObject.getter(v58);
  os_log_type_t v60 = static os_log_type_t.default.getter(v59);
  int v61 = v60;
  if (os_log_type_enabled(v59, v60))
  {
    uint64_t v62 = swift_slowAlloc(92LL, -1LL);
    LODWORD(v133) = v61;
    uint64_t v63 = v62;
    uint64_t v64 = swift_slowAlloc(128LL, -1LL);
    uint64_t v134 = v64;
    *(_DWORD *)uint64_t v63 = 141560067;
    uint64_t v142 = 1752392040LL;
    uint64_t v143 = v64;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v63 + 4, v63 + 12);
    *(_WORD *)(v63 + 12) = 2081;
    uint64_t v130 = v22;
    uint64_t v65 = (int *)v136;
    os_log_t v132 = v59;
    uint64_t v66 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v131 = (uint64_t)v56;
    uint64_t v67 = v66;
    uint64_t v68 = v139;
    uint64_t v69 = dispatch thunk of CustomStringConvertible.description.getter(v139, v66);
    uint64_t v142 = sub_1003F11D4(v69, v70, &v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v63 + 14, v63 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v27, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v63 + 22) = 2160;
    uint64_t v142 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v63 + 24, v63 + 32);
    *(_WORD *)(v63 + 32) = 2081;
    uint64_t v72 = v145;
    uint64_t v71 = v146;
    sub_100012ED8(v144, v145);
    uint64_t v73 = v137;
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v71 + 8) + 8LL) + 32LL))(v72);
    uint64_t v74 = dispatch thunk of CustomStringConvertible.description.getter(v68, v67);
    unint64_t v76 = v75;
    (*(void (**)(char *, uint64_t))(v138 + 8))(v73, v68);
    uint64_t v142 = sub_1003F11D4(v74, v76, &v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v63 + 34, v63 + 42);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v144);
    *(_WORD *)(v63 + 42) = 2082;
    uint64_t v77 = sub_100167394(v135);
    uint64_t v142 = sub_1003F11D4(v77, v78, &v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v63 + 44, v63 + 52);
    swift_bridgeObjectRelease();
    *(_WORD *)(v63 + 52) = 2082;
    uint64_t v79 = (uint64_t)v141;
    uint64_t v80 = type metadata accessor for Date(0LL);
    uint64_t v81 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter(v80, v81);
    uint64_t v142 = sub_1003F11D4(v82, v83, &v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v63 + 54, v63 + 62);
    swift_bridgeObjectRelease();
    sub_100018C68(v79, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v63 + 62) = 2049;
    uint64_t v84 = (uint64_t)v130;
    uint64_t v142 = *(void *)&v130[v65[7]];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v63 + 64, v63 + 72);
    sub_100018C68(v84, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v63 + 72) = 2049;
    uint64_t v85 = v131;
    uint64_t v142 = *(void *)(v131 + v65[8]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v63 + 74, v63 + 82);
    sub_100018C68(v85, type metadata accessor for BeaconEstimatedLocation);
    *(_WORD *)(v63 + 82) = 2050;
    uint64_t v86 = v140;
    uint64_t v142 = *(void *)(v140 + v65[9]);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, &v143, v63 + 84, v63 + 92);
    sub_100018C68(v86, type metadata accessor for BeaconEstimatedLocation);
    os_log_t v87 = v132;
    _os_log_impl( (void *)&_mh_execute_header,  v132,  (os_log_type_t)v133,  "Saved LKL LocationID: %{private,mask.hash}s for Beacon: %{private,mask.hash}s, source: %{public}s, timestamp: %{pu blic}s, lat: %{private}f, lon: %{private}f, acc: %{public}f.",  (uint8_t *)v63,  0x5Cu);
    uint64_t v88 = v134;
    swift_arrayDestroy(v134, 4LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v88, -1LL, -1LL);
    swift_slowDealloc(v63, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v27, type metadata accessor for BeaconEstimatedLocation);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v144);
    sub_100018C68((uint64_t)v141, type metadata accessor for BeaconEstimatedLocation);
    sub_100018C68((uint64_t)v22, type metadata accessor for BeaconEstimatedLocation);
    sub_100018C68((uint64_t)v19, type metadata accessor for BeaconEstimatedLocation);
    sub_100018C68(v57, type metadata accessor for BeaconEstimatedLocation);
  }

  sub_100015794((uint64_t)v30, &qword_1009A6628);
}

uint64_t sub_1002AD02C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7)
{
  int v42 = a7;
  uint64_t v40 = a5;
  uint64_t v41 = a6;
  uint64_t v37 = a1;
  uint64_t v38 = a4;
  uint64_t v36 = a2;
  uint64_t v45 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v48 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  unint64_t v44 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v46 = *(void *)(v10 - 8);
  uint64_t v47 = v10;
  __chkstk_darwin(v10);
  uint64_t v39 = (char *)&v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v43 = *(void *)(a2 + 48);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v15, a3, v12);
  uint64_t v16 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v17 = (v16 + 16) & ~v16;
  unint64_t v18 = (v14 + v17 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v19 = (v18 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v22 = swift_allocObject(&unk_10094D6C8, v21 + 17, v16 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v22 + v17, v15, v12);
  uint64_t v23 = v37;
  *(void *)(v22 + v18) = v38;
  *(void *)(v22 + v19) = v36;
  *(void *)(v22 + v20) = v23;
  unint64_t v24 = v22 + v21;
  uint64_t v25 = v41;
  *(void *)unint64_t v24 = v40;
  *(void *)(v24 + 8) = v25;
  *(_BYTE *)(v24 + swift_weakDestroy(v0 + 16) = v42;
  aBlock[4] = sub_1002D76AC;
  aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10094D6E0;
  uint64_t v26 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  uint64_t v27 = swift_retain();
  uint64_t v28 = v39;
  static DispatchQoS.unspecified.getter(v27);
  unint64_t v50 = _swiftEmptyArrayStorage;
  uint64_t v29 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v30 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v31 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v33 = v44;
  uint64_t v32 = v45;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v50, v30, v31, v45, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v28, v33, v26);
  _Block_release(v26);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v33, v32);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v28, v47);
  return swift_release();
}

void sub_1002AD310( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6, int a7)
{
  int v83 = a7;
  uint64_t v94 = a4;
  uint64_t v98 = a2;
  uint64_t v85 = sub_100004AEC(&qword_1009AE490);
  __chkstk_darwin(v85);
  os_log_t v87 = (char *)&v75 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v12);
  uint64_t v86 = (uint64_t)&v75 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v14);
  uint64_t v92 = (uint64_t)&v75 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v93 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v91 = *(void *)(v93 - 8);
  __chkstk_darwin(v93);
  uint64_t v84 = (uint64_t)&v75 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v17);
  unint64_t v19 = (char *)&v75 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v95 = *(void *)(v20 - 8);
  uint64_t v96 = v20;
  __chkstk_darwin(v20);
  uint64_t v90 = (uint64_t)&v75 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = type metadata accessor for UUID(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v82 = (char *)&v75 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v75 - v26;
  if (qword_10099B4D8 != -1) {
    swift_once(&qword_10099B4D8, sub_1004AB71C);
  }
  uint64_t v28 = type metadata accessor for Logger(0LL);
  uint64_t v29 = sub_10000A720(v28, (uint64_t)qword_100A2AB18);
  uint64_t v30 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 16);
  uint64_t v97 = a1;
  uint64_t v80 = v30;
  uint64_t v31 = v30(v27, a1, v22);
  uint64_t v81 = v29;
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.default.getter(v32);
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v89 = v22;
  uint64_t v79 = v23;
  if (v34)
  {
    uint64_t v35 = swift_slowAlloc(32LL, -1LL);
    uint64_t v88 = a5;
    uint64_t v36 = v35;
    uint64_t v37 = swift_slowAlloc(32LL, -1LL);
    uint64_t v77 = a3;
    uint64_t v76 = v37;
    *(_DWORD *)uint64_t v36 = 141558531;
    uint64_t v99 = 1752392040LL;
    v100[0] = v37;
    uint64_t v78 = a6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v36 + 4, v36 + 12);
    *(_WORD *)(v36 + 12) = 2081;
    uint64_t v38 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter(v22, v38);
    uint64_t v99 = sub_1003F11D4(v39, v40, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v36 + 14, v36 + 22);
    swift_bridgeObjectRelease();
    uint64_t v41 = *(void (**)(char *, uint64_t))(v23 + 8);
    v41(v27, v22);
    *(_WORD *)(v36 + 22) = 2048;
    uint64_t v42 = v98;
    uint64_t v99 = v98;
    a6 = v78;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v36 + 24, v36 + 32);
    _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "createDuplicateBeacons uuid: %{private,mask.hash}s count:%ld",  (uint8_t *)v36,  0x20u);
    uint64_t v43 = v76;
    swift_arrayDestroy(v76, 1LL, (char *)&type metadata for Any + 8);
    a3 = v77;
    swift_slowDealloc(v43, -1LL, -1LL);
    uint64_t v44 = v36;
    a5 = v88;
    swift_slowDealloc(v44, -1LL, -1LL);
  }

  else
  {
    uint64_t v41 = *(void (**)(char *, uint64_t))(v23 + 8);
    v41(v27, v22);

    uint64_t v42 = v98;
  }

  uint64_t v45 = *(void *)(a3 + 256);
  uint64_t v46 = v97;
  sub_10050F124(v97, (uint64_t)v19);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v95 + 48))(v19, 1LL, v96) != 1)
  {
    uint64_t v61 = v90;
    sub_10002218C((uint64_t)v19, v90, type metadata accessor for OwnedBeaconGroup);
    uint64_t v62 = (void *)swift_allocObject(&unk_10094D740, 40LL, 7LL);
    v62[2] = v94;
    v62[3] = a5;
    v62[4] = a6;
    swift_retain();
    swift_retain();
    sub_1002ADB9C(v61, v42, (uint64_t)sub_1002DDF50, (uint64_t)v62);
    swift_release();
    uint64_t v63 = v61;
    uint64_t v64 = type metadata accessor for OwnedBeaconGroup;
LABEL_17:
    sub_100018C68(v63, v64);
    return;
  }

  sub_100015794((uint64_t)v19, &qword_1009AA830);
  uint64_t v47 = v92;
  sub_100504F30(v46, v92);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v91 + 48))(v47, 1LL, v93) != 1)
  {
    uint64_t v65 = v84;
    sub_10002218C(v47, v84, type metadata accessor for OwnedBeaconRecord);
    uint64_t v66 = v86;
    if ((v83 & 1) != 0) {
      uint64_t v67 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v79 + 56))(v86, 1LL, 1LL, v89);
    }
    else {
      uint64_t v67 = sub_10001581C(v65 + *(int *)(v93 + 28), v86, &qword_10099D8A0);
    }
    __chkstk_darwin(v67);
    *(&v75 - 2) = v45;
    *(&v75 - 1) = v46;
    uint64_t v73 = (uint64_t)v87;
    QueueSynchronizer.conditionalSync<A>(_:)(sub_10015471C);
    uint64_t v74 = (void *)swift_allocObject(&unk_10094D718, 40LL, 7LL);
    v74[2] = v94;
    v74[3] = a5;
    v74[4] = a6;
    swift_retain();
    swift_retain();
    sub_1002AE7B8(v65, v73, v66, v42, (uint64_t)sub_1002D7720, (uint64_t)v74);
    swift_release();
    sub_100015794(v73, &qword_1009AE490);
    sub_100015794(v66, &qword_10099D8A0);
    uint64_t v64 = type metadata accessor for OwnedBeaconRecord;
    uint64_t v63 = v65;
    goto LABEL_17;
  }

  sub_100015794(v47, (uint64_t *)&unk_1009A9C30);
  uint64_t v48 = v82;
  uint64_t v49 = v89;
  uint64_t v50 = v80(v82, v46, v89);
  uint64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
  os_log_type_t v52 = static os_log_type_t.error.getter(v51);
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v53 = swift_slowAlloc(22LL, -1LL);
    uint64_t v88 = a5;
    uint64_t v54 = v53;
    uint64_t v55 = swift_slowAlloc(32LL, -1LL);
    uint64_t v98 = v55;
    *(_DWORD *)uint64_t v54 = 141558275;
    uint64_t v99 = 1752392040LL;
    v100[0] = v55;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v54 + 4, v54 + 12);
    *(_WORD *)(v54 + 12) = 2081;
    uint64_t v56 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter(v49, v56);
    uint64_t v99 = sub_1003F11D4(v57, v58, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v54 + 14, v54 + 22);
    swift_bridgeObjectRelease();
    v41(v48, v49);
    _os_log_impl( (void *)&_mh_execute_header,  v51,  v52,  "No beaconGroup or beacon found for %{private,mask.hash}s",  (uint8_t *)v54,  0x16u);
    uint64_t v59 = v98;
    swift_arrayDestroy(v98, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v59, -1LL, -1LL);
    uint64_t v60 = v54;
    a5 = v88;
    swift_slowDealloc(v60, -1LL, -1LL);
  }

  else
  {
    v41(v48, v49);
  }

  type metadata accessor for SPOwnerSessionError(0LL);
  uint64_t v69 = v68;
  uint64_t v99 = 2LL;
  unint64_t v70 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v71 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
  _BridgedStoredNSError.init(_:userInfo:)(v100, &v99, v70, v69, v71);
  uint64_t v72 = (void *)v100[0];
  a5(v100[0]);
}

void sub_1002ADB9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = v4;
  uint64_t v117 = a4;
  uint64_t v116 = a3;
  uint64_t v130 = a1;
  uint64_t v115 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v114 = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  int v113 = (char *)&v100 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v112 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v111 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  uint64_t v110 = (char *)&v100 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v109 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v108 = v10;
  uint64_t v107 = (uint64_t)&v100 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v11);
  uint64_t v106 = (char *)&v100 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_1009AE490);
  __chkstk_darwin(v13);
  uint64_t v100 = (char *)&v100 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v135 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v139 = (char *)&v100 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v17);
  unint64_t v19 = (char *)&v100 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v102 = sub_100004AEC(&qword_10099D470);
  uint64_t v101 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  uint64_t v21 = (char *)&v100 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v145 = type metadata accessor for UUID(0LL);
  uint64_t v22 = *(void *)(v145 - 8);
  uint64_t v23 = __chkstk_darwin(v145);
  unint64_t v105 = (char *)&v100 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v142 = v24;
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v100 - v25;
  uint64_t v27 = type metadata accessor for DispatchPredicate(0LL);
  dispatch_group_t v146 = *(dispatch_group_t *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v29 = (char **)((char *)&v100 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v30 = *(void **)(v5 + 48);
  *uint64_t v29 = v30;
  uint64_t v32 = *(void (**)(void))(v31 + 104);
  unsigned int v126 = enum case for DispatchPredicate.onQueue(_:);
  unint64_t v125 = (void (*)(void *, void, uint64_t))v32;
  v32(v29);
  id v124 = v30;
  LOBYTE(v30) = _dispatchPreconditionTest(_:)(v29);
  os_log_type_t v33 = (void (*)(void *, uint64_t))*((void *)v146 + 1);
  unint64_t v127 = v29;
  uint64_t v128 = v27;
  uint64_t v123 = v33;
  v33(v29, v27);
  uint64_t v34 = swift_allocObject(&unk_10094D768, 24LL, 7LL);
  *(void *)(v34 + swift_weakDestroy(v0 + 16) = 0LL;
  uint64_t v35 = dispatch_group_create();
  id v118 = v35;
  if (a2 < 0)
  {
LABEL_22:
    __break(1u);
  }

  else
  {
    if (a2)
    {
      uint64_t v36 = 0LL;
      os_log_t v132 = 0LL;
      uint64_t v103 = v142 + 7;
      uint64_t v140 = v5;
      uint64_t v104 = a2;
      uint64_t v134 = v15;
      uint64_t v133 = v19;
      uint64_t v138 = v21;
      uint64_t v141 = v26;
      uint64_t v143 = v22;
      uint64_t v144 = v34;
      do
      {
        if (v36 == a2)
        {
          __break(1u);
LABEL_20:
          __break(1u);
LABEL_21:
          __break(1u);
          goto LABEL_22;
        }

        uint64_t v131 = v36;
        UUID.init()(v35);
        uint64_t v44 = swift_allocObject(&unk_10094D790, 24LL, 7LL);
        *(void *)(v44 + swift_weakDestroy(v0 + 16) = _swiftEmptyDictionarySingleton;
        dispatch_group_t v146 = dispatch_group_create();
        uint64_t v45 = v127;
        uint64_t v46 = v124;
        void *v127 = v124;
        uint64_t v47 = v128;
        v125(v45, v126, v128);
        id v129 = v46;
        LOBYTE(v46) = _dispatchPreconditionTest(_:)(v45);
        v123(v45, v47);
        sub_1001CC778();
        uint64_t v49 = v48;
        swift_retain();
        uint64_t v50 = v132;
        sub_1002C4518(v49, v5);
        uint64_t v52 = v51;
        swift_release();
        uint64_t v53 = *(void *)(v52 + 16);
        uint64_t v54 = *(void *)(v49 + 16);
        swift_bridgeObjectRelease();
        if (v53 == v54)
        {
          swift_retain();
          uint64_t v55 = sub_1002C5AB4(v52, v5);
          dispatch_group_t v43 = v146;
          if (!v50)
          {
            uint64_t v56 = v55;
            uint64_t v142 = v44;
            os_log_t v132 = 0LL;
            swift_bridgeObjectRelease();
            swift_release();
            uint64_t v57 = v22;
            uint64_t v58 = v56[2];
            uint64_t v59 = (uint64_t)v106;
            if (v58)
            {
              uint64_t v137 = &v138[*(int *)(v102 + 48)];
              uint64_t v60 = v101;
              uint64_t v61 = (uint64_t)v56
                  + ((*(unsigned __int8 *)(v101 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v101 + 80));
              uint64_t v122 = v56;
              swift_bridgeObjectRetain(v56);
              uint64_t v136 = *(void (**)(char *, uint64_t))(v60 + 72);
              uint64_t v62 = (uint64_t)v100;
              uint64_t v63 = (uint64_t)v139;
              do
              {
                uint64_t v64 = (uint64_t)v138;
                sub_10001581C(v61, (uint64_t)v138, &qword_10099D470);
                uint64_t v65 = (uint64_t)v133;
                sub_10002218C(v64, (uint64_t)v133, type metadata accessor for OwnedBeaconRecord);
                sub_10002218C((uint64_t)v137, v63, type metadata accessor for BeaconNamingRecord);
                dispatch_group_t v66 = v146;
                dispatch_group_enter(v146);
                sub_10001DC4C(v63, v62, type metadata accessor for BeaconNamingRecord);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v135 + 56))(v62, 0LL, 1LL, v134);
                uint64_t v67 = v143;
                uint64_t v68 = v145;
                (*(void (**)(uint64_t, char *, uint64_t))(v143 + 16))(v59, v141, v145);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v67 + 56))(v59, 0LL, 1LL, v68);
                uint64_t v69 = (void *)swift_allocObject(&unk_10094D7B8, 48LL, 7LL);
                uint64_t v70 = v140;
                void v69[2] = v66;
                uint64_t v69[3] = v70;
                uint64_t v71 = v144;
                v69[4] = v142;
                v69[5] = v71;
                swift_retain();
                uint64_t v72 = v66;
                swift_retain();
                swift_retain();
                sub_1002B019C(v65, v62, v59, (uint64_t)sub_1002D77A8, (uint64_t)v69);
                uint64_t v63 = (uint64_t)v139;
                swift_release();
                sub_100015794(v59, &qword_10099D8A0);
                sub_100015794(v62, &qword_1009AE490);
                sub_100018C68(v63, type metadata accessor for BeaconNamingRecord);
                sub_100018C68(v65, type metadata accessor for OwnedBeaconRecord);
                v61 += (uint64_t)v136;
                --v58;
              }

              while (v58);
              uint64_t v56 = v122;
              swift_bridgeObjectRelease();
              uint64_t v57 = v143;
              uint64_t v26 = v141;
            }

            uint64_t v73 = v107;
            sub_10001DC4C(v130, v107, type metadata accessor for OwnedBeaconGroup);
            uint64_t v74 = *(void (**)(char *, char *, uint64_t))(v57 + 16);
            uint64_t v75 = v105;
            uint64_t v76 = v145;
            v74(v105, v26, v145);
            uint64_t v77 = *(unsigned __int8 *)(v109 + 80);
            uint64_t v78 = (v77 + 40) & ~v77;
            uint64_t v79 = *(unsigned __int8 *)(v143 + 80);
            uint64_t v80 = (v108 + v79 + v78) & ~v79;
            uint64_t v81 = v56;
            unint64_t v82 = (v103 + v80) & 0xFFFFFFFFFFFFFFF8LL;
            unint64_t v83 = (v82 + 15) & 0xFFFFFFFFFFFFFFF8LL;
            uint64_t v84 = (char *)swift_allocObject(&unk_10094D7E0, v83 + 8, v77 | v79 | 7);
            *((void *)v84 + 2) = v142;
            *((void *)v84 + 3) = v81;
            id v85 = v118;
            *((void *)v84 + 4) = v118;
            sub_10002218C(v73, (uint64_t)&v84[v78], type metadata accessor for OwnedBeaconGroup);
            (*(void (**)(char *, char *, uint64_t))(v143 + 32))(&v84[v80], v75, v76);
            uint64_t v5 = v140;
            *(void *)&v84[v82] = v140;
            uint64_t v86 = v144;
            *(void *)&v84[v83] = v144;
            char v151 = sub_1002D78FC;
            uint64_t v152 = v84;
            uint64_t aBlock = _NSConcreteStackBlock;
            uint64_t v148 = 1107296256LL;
            uint64_t v149 = sub_1001C31E8;
            uint64_t v150 = &unk_10094D7F8;
            os_log_t v87 = _Block_copy(&aBlock);
            swift_retain();
            swift_retain();
            swift_retain();
            uint64_t v137 = (char *)v85;
            uint64_t v88 = v110;
            static DispatchQoS.unspecified.getter(v137);
            uint64_t v153 = (uint64_t)_swiftEmptyArrayStorage;
            uint64_t v89 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
            uint64_t v120 = v89;
            uint64_t v90 = sub_100004AEC((uint64_t *)&unk_1009AB860);
            uint64_t v119 = v90;
            uint64_t v121 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
            uint64_t v91 = v113;
            uint64_t v92 = v115;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v153, v90, v121, v115, v89);
            id v93 = v129;
            dispatch_group_t v94 = v146;
            OS_dispatch_group.notify(qos:flags:queue:execute:)(v88, v91, v129, v87);
            _Block_release(v87);
            uint64_t v136 = *(void (**)(char *, uint64_t))(v114 + 8);
            v136(v91, v92);
            uint64_t v122 = *(void **)(v111 + 8);
            uint64_t v95 = v112;
            ((void (*)(char *, uint64_t))v122)(v88, v112);
            swift_release();
            uint64_t v96 = (char *)swift_allocObject(&unk_10094D830, 48LL, 7LL);
            uint64_t v97 = v116;
            *((void *)v96 + 2) = v86;
            *((void *)v96 + 3) = v97;
            *((void *)v96 + 4) = v117;
            *((void *)v96 + 5) = v5;
            char v151 = sub_1002D7988;
            uint64_t v152 = v96;
            uint64_t aBlock = _NSConcreteStackBlock;
            uint64_t v148 = 1107296256LL;
            uint64_t v149 = sub_1001C31E8;
            uint64_t v150 = &unk_10094D848;
            uint64_t v98 = _Block_copy(&aBlock);
            swift_retain();
            swift_retain();
            uint64_t v99 = swift_retain();
            static DispatchQoS.unspecified.getter(v99);
            uint64_t v153 = (uint64_t)_swiftEmptyArrayStorage;
            dispatch thunk of SetAlgebra.init<A>(_:)(&v153, v119, v121, v92, v120);
            OS_dispatch_group.notify(qos:flags:queue:execute:)(v88, v91, v93, v98);
            _Block_release(v98);

            v136(v91, v92);
            ((void (*)(char *, uint64_t))v122)(v88, v95);
            uint64_t v22 = v143;
            uint64_t v26 = v141;
            (*(void (**)(char *, uint64_t))(v143 + 8))(v141, v145);
            swift_release();
            uint64_t v35 = (void *)swift_release();
            a2 = v104;
            goto LABEL_7;
          }

          swift_bridgeObjectRelease();
          swift_release();
          uint64_t v42 = v50;
          os_log_t v132 = 0LL;
        }

        else
        {
          swift_bridgeObjectRelease();
          type metadata accessor for SPOwnerSessionError(0LL);
          uint64_t v38 = v37;
          uint64_t v153 = 2LL;
          unint64_t v39 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
          uint64_t v40 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
          uint64_t v41 = _BridgedStoredNSError.init(_:userInfo:)(&aBlock, &v153, v39, v38, v40);
          uint64_t v42 = aBlock;
          swift_willThrow(v41);
          os_log_t v132 = 0LL;
          dispatch_group_t v43 = v146;
        }

        (*(void (**)(char *, uint64_t))(v22 + 8))(v26, v145);

        swift_errorRelease(v42);
        uint64_t v35 = (void *)swift_release();
LABEL_7:
        uint64_t v36 = v131 + 1;
      }

      while (v131 + 1 != a2);
    }

    swift_release();
  }

dispatch_group_t sub_1002AE7B8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v39 = a6;
  uint64_t v37 = a5;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v44 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  dispatch_group_t v43 = (char *)&v36 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v41 = *(void *)(v13 - 8);
  uint64_t v42 = v13;
  __chkstk_darwin(v13);
  uint64_t v40 = (char *)&v36 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (uint64_t *)((char *)&v36 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v19 = *(void **)(v6 + 48);
  *uint64_t v18 = v19;
  (*(void (**)(void *, void, uint64_t))(v16 + 104))(v18, enum case for DispatchPredicate.onQueue(_:), v15);
  id v38 = v19;
  LOBYTE(v19) = _dispatchPreconditionTest(_:)(v18);
  dispatch_group_t result = (dispatch_group_t)(*(uint64_t (**)(void *, uint64_t))(v16 + 8))(v18, v15);
  if ((v19 & 1) == 0)
  {
    __break(1u);
    goto LABEL_7;
  }

  uint64_t v36 = v11;
  uint64_t v21 = swift_allocObject(&unk_10094D768, 24LL, 7LL);
  *(void *)(v21 + swift_weakDestroy(v0 + 16) = 0LL;
  dispatch_group_t result = dispatch_group_create();
  if (a4 < 0)
  {
LABEL_7:
    __break(1u);
    return result;
  }

  for (uint64_t i = result; a4; --a4)
  {
    dispatch_group_enter(i);
    uint64_t v23 = swift_allocObject(&unk_10094D920, 32LL, 7LL);
    *(void *)(v23 + swift_weakDestroy(v0 + 16) = i;
    *(void *)(v23 + 24) = v21;
    uint64_t v24 = i;
    swift_retain();
    sub_1002B019C(a1, a2, a3, (uint64_t)sub_1002D99E0, v23);
    swift_release();
  }

  uint64_t v25 = (void *)swift_allocObject(&unk_10094D948, 48LL, 7LL);
  uint64_t v26 = v37;
  v25[2] = v21;
  v25[3] = v26;
  v25[4] = v39;
  v25[5] = v6;
  aBlock[4] = sub_1002D7988;
  aBlock[5] = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_10094D960;
  uint64_t v27 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  uint64_t v28 = swift_retain();
  uint64_t v29 = v40;
  static DispatchQoS.unspecified.getter(v28);
  uint64_t v45 = _swiftEmptyArrayStorage;
  uint64_t v30 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v31 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v32 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  os_log_type_t v33 = v43;
  uint64_t v34 = v31;
  uint64_t v35 = v36;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v34, v32, v36, v30);
  OS_dispatch_group.notify(qos:flags:queue:execute:)(v29, v33, v38, v27);
  _Block_release(v27);

  (*(void (**)(char *, uint64_t))(v44 + 8))(v33, v35);
  (*(void (**)(char *, uint64_t))(v41 + 8))(v29, v42);
  swift_release();
  return (dispatch_group_t)swift_release();
}

uint64_t sub_1002AEB14()
{
  v1[39] = v0;
  uint64_t v2 = type metadata accessor for KeySyncMetadata(0LL);
  v1[40] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[41] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[42] = swift_task_alloc(v4);
  v1[43] = swift_task_alloc(v4);
  uint64_t v5 = type metadata accessor for KeySyncMetadataDisplay(0LL);
  v1[44] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v1[45] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[46] = swift_task_alloc(v7);
  v1[47] = swift_task_alloc(v7);
  uint64_t v8 = sub_100004AEC(&qword_10099E6D0);
  v1[48] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v1[49] = v9;
  v1[50] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Table(0LL);
  v1[51] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v1[52] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[53] = swift_task_alloc(v12);
  v1[54] = swift_task_alloc(v12);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  v1[55] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v1[56] = v14;
  unint64_t v15 = (*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[57] = swift_task_alloc(v15);
  v1[58] = swift_task_alloc(v15);
  return swift_task_switch(sub_1002AEC58, 0LL, 0LL);
}

uint64_t sub_1002AEC58()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 256, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 96, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 120))
  {
    sub_100012EC0((__int128 *)(v0 + 96), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    unint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 472) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1002AED58;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1002AED58(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 472LL);
  *(void *)(*(void *)v1 + 48swift_beginAccess(v4, v6 - 104, 0LL, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002AEDB4, 0LL, 0LL);
}

uint64_t sub_1002AEDB4()
{
  uint64_t v1 = *(void *)(v0 + 480);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v1)
  {
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 176, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 200))
    {
      sub_100012EC0((__int128 *)(v0 + 176), v0 + 136);
      sub_100012ED8((void *)(v0 + 136), *(void *)(v0 + 160));
      unint64_t v15 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
      uint64_t v3 = (void *)swift_task_alloc(unk_10099C894);
      *(void *)(v0 + 488) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_1002AEF44;
      return v15();
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    unint64_t v4 = sub_1000157D0();
    uint64_t v5 = swift_allocError(&type metadata for DaemonError, v4, 0LL, 0LL);
    *uint64_t v6 = 0xD000000000000017LL;
    v6[1] = 0x800000010085BE10LL;
    swift_willThrow(v5);
    uint64_t v7 = *(void *)(v0 + 456);
    uint64_t v9 = *(void *)(v0 + 424);
    uint64_t v8 = *(void *)(v0 + 432);
    uint64_t v10 = *(void *)(v0 + 400);
    uint64_t v12 = *(void *)(v0 + 368);
    uint64_t v11 = *(void *)(v0 + 376);
    uint64_t v14 = *(void *)(v0 + 336);
    uint64_t v13 = *(void *)(v0 + 344);
    swift_task_dealloc(*(void *)(v0 + 464));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  return result;
}

uint64_t sub_1002AEF44(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 488LL);
  *(void *)(*(void *)v1 + 496LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002AEFA0, 0LL, 0LL);
}

uint64_t sub_1002AEFA0()
{
  uint64_t v1 = (void *)(v0 + 136);
  if (*(void *)(v0 + 496))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    *(void *)(v0 + 288) = _swiftEmptyArrayStorage;
    return swift_task_switch(sub_1002AF0E0, *(void *)(v0 + 496), 0LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    unint64_t v3 = sub_1000157D0();
    uint64_t v4 = swift_allocError(&type metadata for DaemonError, v3, 0LL, 0LL);
    *uint64_t v5 = 0xD000000000000010LL;
    v5[1] = 0x8000000100850F20LL;
    swift_willThrow(v4);
    swift_release();
    uint64_t v6 = *(void *)(v0 + 456);
    uint64_t v8 = *(void *)(v0 + 424);
    uint64_t v7 = *(void *)(v0 + 432);
    uint64_t v9 = *(void *)(v0 + 400);
    uint64_t v11 = *(void *)(v0 + 368);
    uint64_t v10 = *(void *)(v0 + 376);
    uint64_t v13 = *(void *)(v0 + 336);
    uint64_t v12 = *(void *)(v0 + 344);
    swift_task_dealloc(*(void *)(v0 + 464));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1002AF0E0()
{
  *(void *)(v0 + 504) = *(void *)(*(void *)(v0 + 496) + 136LL);
  swift_retain();
  return swift_task_switch(sub_1002AF124, 0LL, 0LL);
}

uint64_t sub_1002AF124()
{
  uint64_t v2 = v0[62];
  uint64_t v1 = v0[63];
  unint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[64] = v3;
  v3[2] = v1;
  v3[3] = sub_100117B74;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[65] = v4;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009AE510);
  *uint64_t v4 = v0;
  v4[1] = sub_1002AF1E0;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 35,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100117B7C,  v3,  v5);
}

uint64_t sub_1002AF1E0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 512);
  swift_task_dealloc(*(void *)(*v0 + 520));
  swift_release();
  swift_task_dealloc(v2);
  *(void *)(v1 + 528) = *(void *)(v1 + 280);
  return swift_task_switch(sub_1002AF258, 0LL, 0LL);
}

uint64_t sub_1002AF258()
{
  uint64_t result = *(void *)(v0 + 528);
  uint64_t v2 = *(void *)(result + 16);
  *(void *)(v0 + 536) = v2;
  if (v2)
  {
    *(_OWORD *)(v0 + 544) = 0u;
    if (*(void *)(result + 16))
    {
      sub_100013044(result + 32, v0 + 56);
      uint64_t v3 = *(void *)(v0 + 80);
      uint64_t v4 = *(void *)(v0 + 88);
      sub_100012ED8((void *)(v0 + 56), v3);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v4 + 8) + 8LL) + 32LL))(v3);
      return swift_task_switch(sub_1002AF3B8, *(void *)(v0 + 480), 0LL);
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v5 = *(void *)(v0 + 456);
    uint64_t v6 = *(void *)(v0 + 464);
    uint64_t v8 = *(void *)(v0 + 424);
    uint64_t v7 = *(void *)(v0 + 432);
    uint64_t v9 = *(void *)(v0 + 400);
    uint64_t v11 = *(void *)(v0 + 368);
    uint64_t v10 = *(void *)(v0 + 376);
    uint64_t v13 = *(void *)(v0 + 336);
    uint64_t v12 = *(void *)(v0 + 344);
    swift_release();
    uint64_t v14 = *(void *)(v0 + 288);
    swift_task_dealloc(v6);
    swift_task_dealloc(v5);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v14);
  }

  return result;
}

uint64_t sub_1002AF3B8()
{
  if (*(void *)(v0[60] + 128LL))
  {
    uint64_t v34 = v0 + 27;
    uint64_t v1 = qword_10099B8E0;
    swift_retain();
    if (v1 != -1) {
      swift_once(&qword_10099B8E0, sub_100751568);
    }
    uint64_t v2 = v0[58];
    uint64_t v3 = v0[55];
    uint64_t v5 = v0[50];
    uint64_t v4 = v0[51];
    uint64_t v7 = v0[48];
    uint64_t v6 = v0[49];
    uint64_t v8 = sub_100004AEC(&qword_10099E6D8);
    uint64_t v9 = sub_10000A720(v8, (uint64_t)qword_100A2B3E8);
    == infix<A>(_:_:)(v9, v2, v3, &protocol witness table for UUID, &protocol witness table for String);
    QueryType.filter(_:)(v5, v4, &protocol witness table for Table);
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
    uint64_t v10 = sub_100004AEC(&qword_10099E6F8);
    uint64_t v11 = swift_allocObject(v10, 72LL, 7LL);
    *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    if (qword_10099B9A0 != -1) {
      swift_once(&qword_10099B9A0, sub_10075230C);
    }
    uint64_t v33 = v0[68];
    uint64_t v13 = v0[53];
    uint64_t v12 = v0[54];
    uint64_t v15 = v0[51];
    uint64_t v14 = v0[52];
    uint64_t v16 = sub_100004AEC(&qword_10099E700);
    sub_10000A720(v16, (uint64_t)qword_100A2B628);
    uint64_t v17 = sub_1000372EC(&qword_10099E708, &qword_10099E700, (uint64_t)&protocol conformance descriptor for Expression<A>);
    ExpressionType.desc.getter(v16, v17);
    QueryType.order(_:)(v11, v15, &protocol witness table for Table);
    swift_bridgeObjectRelease();
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v18(v13, v15);
    v0[30] = v15;
    v0[31] = &protocol witness table for Table;
    unint64_t v19 = sub_10000A7C8(v34);
    (*(void (**)(void *, uint64_t, uint64_t))(v14 + 16))(v19, v12, v15);
    sub_10007D27C((uint64_t)v34);
    v0[70] = v33;
    if (!v33)
    {
      uint64_t v28 = v0[58];
      uint64_t v29 = v0[55];
      uint64_t v30 = v0[56];
      v18(v0[54], v0[51]);
      uint64_t v31 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v34);
      v0[71] = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(v31);
      swift_release();
      swift_release();
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
      uint64_t v27 = sub_1002AF770;
      return swift_task_switch(v27, 0LL, 0LL);
    }

    uint64_t v20 = v33;
    v18(v0[54], v0[51]);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v34);
    swift_release();
  }

  else
  {
    if (qword_10099B888 != -1) {
      swift_once(&qword_10099B888, sub_1006D6C7C);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    uint64_t v22 = sub_10000A720(v21, (uint64_t)qword_1009BCAF8);
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.fault.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v25 = 0;
      _os_log_impl((void *)&_mh_execute_header, v23, v24, "No observation store on this platform!", v25, 2u);
      swift_slowDealloc(v25, -1LL, -1LL);
    }

    unint64_t v26 = sub_10023B3D4();
    uint64_t v20 = swift_allocError(&type metadata for ObservationStoreService.ObservationStoreServiceError, v26, 0LL, 0LL);
    swift_willThrow(v20);
  }

  v0[72] = v20;
  (*(void (**)(void, void))(v0[56] + 8LL))(v0[58], v0[55]);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v27 = sub_1002AFD78;
  return swift_task_switch(v27, 0LL, 0LL);
}

uint64_t sub_1002AF770()
{
  uint64_t v27 = (void *)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 568);
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 328);
    *(void *)(v0 + 296) = _swiftEmptyArrayStorage;
    sub_1000330FC(0, v2, 0);
    uint64_t v28 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v5 = *(void *)(v0 + 448);
    uint64_t v4 = *(void *)(v0 + 456);
    uint64_t v6 = *(void *)(v0 + 440);
    uint64_t v8 = *(void *)(v0 + 336);
    uint64_t v7 = *(void *)(v0 + 344);
    uint64_t v9 = *(void *)(v0 + 320);
    sub_10001DC4C(v28, v7, type metadata accessor for KeySyncMetadata);
    sub_10001DC4C(v7, v8, type metadata accessor for KeySyncMetadata);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v8, v6);
    __asm { BR              X9 }
  }

  swift_release();
  uint64_t v10 = *(void *)(v0 + 536);
  uint64_t v11 = *(void *)(v0 + 552) + 1LL;
  sub_100185620((uint64_t)_swiftEmptyArrayStorage);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  if (v11 == v10)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v12 = *(void *)(v0 + 456);
    uint64_t v13 = *(void *)(v0 + 464);
    uint64_t v15 = *(void *)(v0 + 424);
    uint64_t v14 = *(void *)(v0 + 432);
    uint64_t v16 = *(void *)(v0 + 400);
    uint64_t v18 = *(void *)(v0 + 368);
    uint64_t v17 = *(void *)(v0 + 376);
    uint64_t v20 = *(void *)(v0 + 336);
    uint64_t v19 = *(void *)(v0 + 344);
    swift_release();
    uint64_t v29 = *(void *)(v0 + 288);
    swift_task_dealloc(v13);
    swift_task_dealloc(v12);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v29);
  }

  else
  {
    uint64_t v22 = *(void *)(v0 + 560);
    unint64_t v23 = *(void *)(v0 + 552) + 1LL;
    *(void *)(v0 + 552) = v23;
    *(void *)(v0 + 544) = v22;
    uint64_t v24 = *(void *)(v0 + 528);
    if (v23 >= *(void *)(v24 + 16))
    {
      __break(1u);
      JUMPOUT(0x1002AFD54LL);
    }

    sub_100013044(v24 + 40 * v23 + 32, (uint64_t)v27);
    uint64_t v26 = *(void *)(v0 + 80);
    uint64_t v25 = *(void *)(v0 + 88);
    sub_100012ED8(v27, v26);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v25 + 8) + 8LL) + 32LL))(v26);
    return swift_task_switch(sub_1002AF3B8, *(void *)(v0 + 480), 0LL);
  }

uint64_t sub_1002AFD78()
{
  uint64_t v1 = *(void *)(v0 + 456);
  uint64_t v3 = *(void *)(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 432);
  uint64_t v4 = *(void *)(v0 + 400);
  uint64_t v6 = *(void *)(v0 + 368);
  uint64_t v5 = *(void *)(v0 + 376);
  uint64_t v8 = *(void *)(v0 + 336);
  uint64_t v7 = *(void *)(v0 + 344);
  swift_task_dealloc(*(void *)(v0 + 464));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1002AFE3C(uint64_t a1, dispatch_group_s *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = sub_100004AEC(&qword_10099E310);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v39 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  __chkstk_darwin(v12);
  uint64_t v14 = (void *)((char *)v39 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001581C(a1, (uint64_t)v14, (uint64_t *)&unk_1009B0830);
  if (swift_getEnumCaseMultiPayload(v14, v12) == 1)
  {
    uint64_t v18 = *v14;
    v41[0] = *v14;
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    swift_willThrowTypedImpl(v41, v19, &protocol self-conformance witness table for Error);
  }

  else
  {
    sub_10002218C((uint64_t)v14, (uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
    uint64_t v20 = sub_1002D96F8((uint64_t)v17);
    if (v21 >> 60 != 15)
    {
      uint64_t v28 = v20;
      unint64_t v29 = v21;
      v39[0] = a4 + 16;
      uint64_t v30 = (int *)sub_100004AEC((uint64_t *)&unk_1009A58E0);
      uint64_t v31 = &v11[v30[12]];
      uint64_t v32 = v30[16];
      uint64_t v33 = &v11[v30[20]];
      uint64_t v34 = &v11[v30[24]];
      uint64_t v35 = &v17[*(int *)(v15 + 20)];
      uint64_t v36 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v36 - 8) + 16LL))(v11, v35, v36);
      uint64_t v37 = type metadata accessor for MACAddress(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v37 - 8) + 56LL))(v31, 1LL, 1LL, v37);
      *(_OWORD *)&v11[v32] = xmmword_1007E7660;
      *(void *)uint64_t v33 = 0LL;
      v33[8] = 1;
      *(_WORD *)uint64_t v34 = 256;
      v34[2] = 3;
      uint64_t v38 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
      swift_storeEnumTagMultiPayload(v11, v38, 1LL);
      (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56LL))(v11, 0LL, 1LL, v38);
      swift_beginAccess(v39[0], v41, 33LL, 0LL);
      sub_10001736C(v28, v29);
      sub_10004551C((uint64_t)v11, v28, v29);
      swift_endAccess(v41);
      sub_1000182F0(v28, v29);
      sub_100018C68((uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
      goto LABEL_7;
    }

    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v23 = v22;
    uint64_t v40 = 2LL;
    unint64_t v24 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v25 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    uint64_t v26 = _BridgedStoredNSError.init(_:userInfo:)(v41, &v40, v24, v23, v25);
    uint64_t v18 = v41[0];
    swift_willThrow(v26);
    sub_100018C68((uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
  }

  swift_beginAccess(a5 + 16, v41, 1LL, 0LL);
  uint64_t v27 = *(void *)(a5 + 16);
  *(void *)(a5 + swift_weakDestroy(v0 + 16) = v18;
  swift_errorRelease(v27);
LABEL_7:
  dispatch_group_leave(a2);
}

uint64_t sub_1002B019C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v92 = a4;
  uint64_t v93 = a5;
  uint64_t v86 = a3;
  uint64_t v90 = a2;
  uint64_t v87 = a1;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v98 = *(void *)(v6 - 8);
  uint64_t v99 = v6;
  __chkstk_darwin(v6);
  uint64_t v97 = (char *)&v79 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v95 = *(void *)(v8 - 8);
  uint64_t v96 = v8;
  __chkstk_darwin(v8);
  dispatch_group_t v94 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009AE490);
  __chkstk_darwin(v10);
  uint64_t v89 = (uint64_t)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v100 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v88 = *(void *)(v100 - 8);
  uint64_t v12 = __chkstk_darwin(v100);
  unint64_t v82 = (char *)&v79 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v81 = (uint64_t)&v79 - v14;
  uint64_t v102 = type metadata accessor for UUID(0LL);
  uint64_t v15 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  uint64_t v101 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void *)(v18 + 64);
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v85 = (uint64_t)&v79 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v20);
  uint64_t v22 = (_OWORD *)((char *)&v79 - v21);
  uint64_t v23 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (uint64_t *)((char *)&v79 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v91 = v5;
  uint64_t v27 = *(void **)(v5 + 48);
  *uint64_t v26 = v27;
  (*(void (**)(void *, void, uint64_t))(v24 + 104))(v26, enum case for DispatchPredicate.onQueue(_:), v23);
  id v28 = v27;
  LOBYTE(v27) = _dispatchPreconditionTest(_:)(v26);
  uint64_t result = (*(uint64_t (**)(void *, uint64_t))(v24 + 8))(v26, v23);
  if ((v27 & 1) != 0)
  {
    id v83 = v28;
    uint64_t v30 = dispatch_group_create();
    uint64_t v31 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
    uint64_t v32 = v15;
    uint64_t v33 = swift_allocBox(v31);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v18 + 56))(v34, 1LL, 1LL, v17);
    uint64_t v35 = v18;
    uint64_t v36 = swift_allocObject(&unk_10094D768, 24LL, 7LL);
    *(void *)(v36 + swift_weakDestroy(v0 + 16) = 0LL;
    uint64_t v37 = v87;
    double v38 = sub_1002B10A0(v87, v86, v22);
    uint64_t v39 = (char *)v22 + *(int *)(v17 + 20);
    uint64_t v86 = v32;
    uint64_t v80 = *(void (**)(char *, char *, uint64_t, double))(v32 + 16);
    v80(v101, v39, v102, v38);
    dispatch_group_enter(v30);
    uint64_t v40 = *(void *)(v91 + 256);
    uint64_t v41 = v85;
    sub_10001DC4C(v37, v85, type metadata accessor for OwnedBeaconRecord);
    uint64_t v42 = *(unsigned __int8 *)(v35 + 80);
    uint64_t v43 = (v42 + 24) & ~v42;
    unint64_t v44 = (v19 + v43 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v45 = (v44 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v46 = swift_allocObject(&unk_10094D8A8, v45 + 8, v42 | 7);
    *(void *)(v46 + swift_weakDestroy(v0 + 16) = v30;
    sub_10002218C(v41, v46 + v43, type metadata accessor for OwnedBeaconRecord);
    *(void *)(v46 + v44) = v33;
    *(void *)(v46 + v45) = v36;
    uint64_t v47 = v30;
    uint64_t v48 = v33;
    swift_retain();
    swift_retain();
    sub_1004FC074((uint64_t)v22, 0, (uint64_t)sub_1002D7DB4, v46);
    swift_release();
    uint64_t v49 = v89;
    sub_10001581C(v90, v89, &qword_1009AE490);
    int v50 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v88 + 48))(v49, 1LL, v100);
    uint64_t v51 = v101;
    uint64_t v84 = v22;
    if (v50 == 1)
    {
      sub_100015794(v49, &qword_1009AE490);
    }

    else
    {
      uint64_t v52 = v81;
      uint64_t v53 = sub_10002218C(v49, v81, type metadata accessor for BeaconNamingRecord);
      uint64_t v54 = (int *)v100;
      uint64_t v55 = v82;
      UUID.init()(v53);
      ((void (*)(char *, char *, uint64_t))v80)((char *)v55 + v54[6], v51, v102);
      uint64_t v56 = v54[7];
      uint64_t v57 = *(void *)(v52 + v56);
      uint64_t v58 = (uint64_t *)(v52 + v54[8]);
      uint64_t v59 = *v58;
      uint64_t v60 = v58[1];
      uint64_t v61 = (uint64_t *)(v52 + v54[9]);
      uint64_t v63 = *v61;
      uint64_t v62 = v61[1];
      *uint64_t v55 = xmmword_1007E4480;
      *(void *)((char *)v55 + v56) = v57;
      uint64_t v64 = (void *)((char *)v55 + v54[8]);
      *uint64_t v64 = v59;
      v64[1] = v60;
      uint64_t v65 = (void *)((char *)v55 + v54[9]);
      void *v65 = v63;
      v65[1] = v62;
      swift_bridgeObjectRetain(v62);
      swift_bridgeObjectRetain(v60);
      dispatch_group_enter(v47);
      dispatch_group_t v66 = v47;
      swift_retain();
      sub_1005594C8((uint64_t)v55, 0, v40, v66, v36);

      swift_release();
      sub_100018C68((uint64_t)v55, type metadata accessor for BeaconNamingRecord);
      sub_100018C68(v52, type metadata accessor for BeaconNamingRecord);
    }

    uint64_t v67 = (void *)swift_allocObject(&unk_10094D8D0, 48LL, 7LL);
    uint64_t v68 = v92;
    uint64_t v69 = v93;
    void v67[2] = v48;
    v67[3] = v68;
    void v67[4] = v69;
    v67[5] = v36;
    aBlock[4] = sub_1002D7E18;
    aBlock[5] = v67;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    aBlock[3] = &unk_10094D8E8;
    uint64_t v70 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    uint64_t v71 = swift_retain();
    uint64_t v72 = v94;
    static DispatchQoS.unspecified.getter(v71);
    uint64_t v103 = _swiftEmptyArrayStorage;
    uint64_t v73 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v74 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v75 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v76 = v97;
    uint64_t v77 = v74;
    uint64_t v78 = v99;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v103, v77, v75, v99, v73);
    OS_dispatch_group.notify(qos:flags:queue:execute:)(v72, v76, v83, v70);
    _Block_release(v70);

    (*(void (**)(char *, uint64_t))(v98 + 8))(v76, v78);
    (*(void (**)(char *, uint64_t))(v95 + 8))(v72, v96);
    (*(void (**)(char *, uint64_t))(v86 + 8))(v51, v102);
    sub_100018C68((uint64_t)v84, type metadata accessor for OwnedBeaconRecord);
    swift_release();
    swift_release();
    return swift_release();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1002B088C( uint64_t a1, uint64_t a2, dispatch_group_s *a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v50 = a6;
  uint64_t v51 = a7;
  uint64_t v49 = a5;
  uint64_t v11 = (int *)type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v12 = *((void *)v11 - 1);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v15 = &v45[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v14);
  uint64_t v17 = &v45[-v16];
  uint64_t v18 = (uint64_t *)(a1 + 16);
  swift_beginAccess(a1 + 16, v54, 0LL, 0LL);
  if (*(void *)(*(void *)(a1 + 16) + 16LL) == *(void *)(a2 + 16))
  {
    uint64_t v48 = a3;
    dispatch_group_enter(a3);
    uint64_t v47 = *(void *)(a4 + 16);
    int v46 = *(unsigned __int8 *)(a4 + 24);
    uint64_t v19 = &v17[v11[6]];
    uint64_t v20 = type metadata accessor for UUID(0LL);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16LL))(v19, v49, v20);
    uint64_t v21 = v11[7];
    uint64_t v22 = a4 + v21;
    uint64_t v23 = &v17[v21];
    uint64_t v24 = type metadata accessor for MACAddress(0LL);
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 16LL))(v23, v22, v24);
    LOBYTE(v22) = *(_BYTE *)(a4 + v11[8]);
    uint64_t v25 = (uint64_t *)(a4 + v11[9]);
    uint64_t v26 = *v25;
    uint64_t v27 = v25[1];
    swift_beginAccess(v18, v52, 0LL, 0LL);
    uint64_t v28 = *v18;
    *(_OWORD *)uint64_t v17 = xmmword_1007E4480;
    *((void *)v17 + 2) = v47;
    v17[24] = v46;
    v17[v11[8]] = v22;
    unint64_t v29 = &v17[v11[9]];
    *unint64_t v29 = v26;
    v29[1] = v27;
    *(void *)&v17[v11[10]] = v28;
    sub_10001DC4C((uint64_t)v17, (uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
    uint64_t v30 = *(unsigned __int8 *)(v12 + 80);
    uint64_t v31 = (v30 + 24) & ~v30;
    unint64_t v32 = (v13 + v31 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v33 = swift_allocObject(&unk_10094D880, v32 + 8, v30 | 7);
    uint64_t v34 = v48;
    *(void *)(v33 + swift_weakDestroy(v0 + 16) = v48;
    sub_10002218C((uint64_t)v15, v33 + v31, type metadata accessor for OwnedBeaconGroup);
    *(void *)(v33 + v32) = v51;
    swift_bridgeObjectRetain(v27);
    swift_bridgeObjectRetain(v28);
    uint64_t v35 = v34;
    swift_retain();
    sub_1004FCE6C((uint64_t)v17, 0, (void (*)(char *))sub_1002D7A9C, v33);
    swift_release();
    return sub_100018C68((uint64_t)v17, type metadata accessor for OwnedBeaconGroup);
  }

  else
  {
    uint64_t v37 = v51;
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v39 = v38;
    uint64_t v53 = 2LL;
    unint64_t v40 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v41 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    uint64_t v42 = _BridgedStoredNSError.init(_:userInfo:)(v52, &v53, v40, v39, v41);
    uint64_t v43 = v52[0];
    swift_willThrow(v42);
    swift_beginAccess(v37 + 16, v52, 1LL, 0LL);
    uint64_t v44 = *(void *)(v37 + 16);
    *(void *)(v37 + swift_weakDestroy(v0 + 16) = v43;
    return swift_errorRelease(v44);
  }

void sub_1002B0B80(uint64_t a1, dispatch_group_s *a2, uint64_t a3, uint64_t a4)
{
  dispatch_group_t v48 = a2;
  uint64_t v7 = sub_100004AEC(&qword_1009A49F0);
  __chkstk_darwin(v7);
  uint64_t v9 = (uint64_t *)((char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v45 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v45 - v17;
  sub_10001581C(a1, (uint64_t)v9, &qword_1009A49F0);
  if (swift_getEnumCaseMultiPayload(v9, v7) == 1)
  {
    uint64_t v19 = *v9;
    uint64_t v50 = *v9;
    uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    swift_willThrowTypedImpl(&v50, v20, &protocol self-conformance witness table for Error);
    if (qword_10099B4D8 != -1) {
      swift_once(&qword_10099B4D8, sub_1004AB71C);
    }
    uint64_t v21 = (uint64_t *)(a4 + 16);
    uint64_t v22 = type metadata accessor for Logger(0LL);
    sub_10000A720(v22, (uint64_t)qword_100A2AB18);
    uint64_t v23 = swift_errorRetain(v19);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.error.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v27 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v26 = 138543362;
      uint64_t v28 = _convertErrorToNSError(_:)(v19);
      uint64_t v50 = v28;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v26 + 4, v26 + 12);
      *uint64_t v27 = v28;
      swift_errorRelease(v19);
      _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "Error creating duplicate OwnerBeaconGroup:%{public}@",  v26,  0xCu);
      uint64_t v29 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v27, 1LL, v29);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v19);
    }

    swift_beginAccess(a4 + 16, &v50, 1LL, 0LL);
    uint64_t v44 = *v21;
    *uint64_t v21 = v19;
    swift_errorRelease(v44);
  }

  else
  {
    sub_10002218C((uint64_t)v9, (uint64_t)v18, type metadata accessor for OwnedBeaconGroup);
    if (qword_10099B4D8 != -1) {
      swift_once(&qword_10099B4D8, sub_1004AB71C);
    }
    uint64_t v30 = type metadata accessor for Logger(0LL);
    sub_10000A720(v30, (uint64_t)qword_100A2AB18);
    sub_10001DC4C(a3, (uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
    uint64_t v31 = sub_10001DC4C((uint64_t)v18, (uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
    unint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
    os_log_type_t v33 = static os_log_type_t.default.getter(v32);
    int v34 = v33;
    if (os_log_type_enabled(v32, v33))
    {
      uint64_t v35 = swift_slowAlloc(22LL, -1LL);
      uint64_t v47 = swift_slowAlloc(64LL, -1LL);
      uint64_t v50 = v47;
      *(_DWORD *)uint64_t v35 = 136446466;
      uint64_t v45 = v35 + 4;
      uint64_t v36 = type metadata accessor for UUID(0LL);
      uint64_t v37 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      int v46 = v34;
      uint64_t v38 = v37;
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter(v36, v37);
      uint64_t v49 = sub_1003F11D4(v39, v40, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v45, v35 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
      *(_WORD *)(v35 + 12) = 2082;
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(v36, v38);
      uint64_t v49 = sub_1003F11D4(v41, v42, &v50);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v35 + 14, v35 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
      _os_log_impl( (void *)&_mh_execute_header,  v32,  (os_log_type_t)v46,  "Duplicated group %{public}s -> %{public}s",  (uint8_t *)v35,  0x16u);
      uint64_t v43 = v47;
      swift_arrayDestroy(v47, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1LL, -1LL);
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    else
    {

      sub_100018C68((uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
      sub_100018C68((uint64_t)v16, type metadata accessor for OwnedBeaconGroup);
    }

    sub_100018C68((uint64_t)v18, type metadata accessor for OwnedBeaconGroup);
  }

  dispatch_group_leave(v48);
}

double sub_1002B10A0@<D0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _OWORD *a3@<X8>)
{
  uint64_t v6 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  UUID.init()(v6);
  sub_10001DC4C(a1 + v6[6], (uint64_t)a3 + v6[6], type metadata accessor for StableIdentifier);
  sub_10001581C(a2, (uint64_t)a3 + v6[7], &qword_10099D8A0);
  uint64_t v7 = v6[8];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (char *)a3 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v9, v8, v10);
  uint64_t v11 = (uint64_t *)(a1 + v6[9]);
  uint64_t v12 = *v11;
  unint64_t v13 = v11[1];
  uint64_t v14 = (uint64_t *)(a1 + v6[10]);
  uint64_t v16 = *v14;
  unint64_t v15 = v14[1];
  uint64_t v17 = (uint64_t *)(a1 + v6[11]);
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  uint64_t v20 = (uint64_t *)(a1 + v6[12]);
  uint64_t v22 = *v20;
  unint64_t v21 = v20[1];
  uint64_t v23 = (uint64_t *)(a1 + v6[13]);
  uint64_t v25 = *v23;
  unint64_t v24 = v23[1];
  uint64_t v26 = (uint64_t *)(a1 + v6[14]);
  uint64_t v27 = *v26;
  uint64_t v45 = v18;
  uint64_t v46 = v26[1];
  uint64_t v28 = (uint64_t *)(a1 + v6[15]);
  uint64_t v29 = *v28;
  uint64_t v30 = v28[1];
  uint64_t v31 = *(void *)(a1 + v6[16]);
  uint64_t v32 = *(void *)(a1 + v6[17]);
  char v33 = *(_BYTE *)(a1 + v6[18]);
  char v34 = *(_BYTE *)(a1 + v6[19]);
  char v35 = *(_BYTE *)(a1 + v6[20]);
  *a3 = xmmword_1007E4480;
  uint64_t v36 = (uint64_t *)((char *)a3 + v6[9]);
  *uint64_t v36 = v12;
  v36[1] = v13;
  uint64_t v37 = (uint64_t *)((char *)a3 + v6[10]);
  *uint64_t v37 = v16;
  v37[1] = v15;
  uint64_t v38 = (uint64_t *)((char *)a3 + v6[11]);
  uint64_t *v38 = v18;
  v38[1] = v19;
  unint64_t v39 = v19;
  unint64_t v40 = (uint64_t *)((char *)a3 + v6[12]);
  *unint64_t v40 = v22;
  v40[1] = v21;
  uint64_t v41 = (uint64_t *)((char *)a3 + v6[13]);
  *uint64_t v41 = v25;
  v41[1] = v24;
  unint64_t v42 = (void *)((char *)a3 + v6[14]);
  *unint64_t v42 = v27;
  v42[1] = v46;
  uint64_t v43 = (void *)((char *)a3 + v6[15]);
  void *v43 = v29;
  v43[1] = v30;
  *(void *)((char *)a3 + v6[16]) = v31;
  *(void *)((char *)a3 + v6[17]) = v32;
  *((_BYTE *)a3 + v6[18]) = v33;
  *((_BYTE *)a3 + v6[19]) = v34;
  *((_BYTE *)a3 + v6[20]) = v35;
  sub_10001736C(v12, v13);
  sub_100018BE4(v16, v15);
  sub_100018BE4(v45, v39);
  sub_10001736C(v22, v21);
  sub_10001736C(v25, v24);
  swift_bridgeObjectRetain(v46);
  *(void *)&double result = swift_bridgeObjectRetain(v30).n128_u64[0];
  return result;
}

void sub_1002B1294(uint64_t a1, dispatch_group_s *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  dispatch_group_t v60 = a2;
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v9);
  uint64_t v59 = (uint64_t)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  __chkstk_darwin(v11);
  unint64_t v13 = (uint64_t *)((char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v57 = *(void *)(v14 - 8);
  uint64_t v58 = v14;
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v53 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v53 - v21;
  uint64_t v23 = swift_projectBox(a4);
  sub_10001581C(a1, (uint64_t)v13, (uint64_t *)&unk_1009B0830);
  if (swift_getEnumCaseMultiPayload(v13, v11) == 1)
  {
    uint64_t v24 = *v13;
    uint64_t v62 = *v13;
    uint64_t v25 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    swift_willThrowTypedImpl(&v62, v25, &protocol self-conformance witness table for Error);
    if (qword_10099B4D8 != -1) {
      swift_once(&qword_10099B4D8, sub_1004AB71C);
    }
    uint64_t v26 = (uint64_t *)(a5 + 16);
    uint64_t v27 = type metadata accessor for Logger(0LL);
    sub_10000A720(v27, (uint64_t)qword_100A2AB18);
    uint64_t v28 = swift_errorRetain(v24);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.error.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v32 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v31 = 138543362;
      uint64_t v33 = _convertErrorToNSError(_:)(v24);
      uint64_t v62 = v33;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, &v63, v31 + 4, v31 + 12);
      *uint64_t v32 = v33;
      swift_errorRelease(v24);
      _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "Error creating duplicate OwnedBeaconRecord:%{public}@",  v31,  0xCu);
      uint64_t v34 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v32, 1LL, v34);
      swift_slowDealloc(v32, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v24);
    }

    swift_beginAccess(v26, &v62, 1LL, 0LL);
    uint64_t v50 = *v26;
    *uint64_t v26 = v24;
    swift_errorRelease(v50);
  }

  else
  {
    uint64_t v56 = v23;
    sub_10002218C((uint64_t)v13, (uint64_t)v22, type metadata accessor for OwnedBeaconRecord);
    if (qword_10099B4D8 != -1) {
      swift_once(&qword_10099B4D8, sub_1004AB71C);
    }
    uint64_t v35 = type metadata accessor for Logger(0LL);
    sub_10000A720(v35, (uint64_t)qword_100A2AB18);
    sub_10001DC4C(a3, (uint64_t)v20, type metadata accessor for OwnedBeaconRecord);
    uint64_t v36 = sub_10001DC4C((uint64_t)v22, (uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
    uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.default.getter(v37);
    int v39 = v38;
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v40 = swift_slowAlloc(22LL, -1LL);
      uint64_t v55 = swift_slowAlloc(64LL, -1LL);
      uint64_t v62 = v55;
      *(_DWORD *)uint64_t v40 = 136446466;
      uint64_t v53 = v40 + 4;
      int v54 = v39;
      uint64_t v41 = v58;
      uint64_t v42 = type metadata accessor for UUID(0LL);
      uint64_t v43 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter(v42, v43);
      uint64_t v61 = sub_1003F11D4(v44, v45, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v53, v40 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v20, type metadata accessor for OwnedBeaconRecord);
      *(_WORD *)(v40 + 12) = 2082;
      uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter(v42, v43);
      uint64_t v61 = sub_1003F11D4(v46, v47, &v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v61, &v62, v40 + 14, v40 + 22);
      uint64_t v48 = v41;
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v37,  (os_log_type_t)v54,  "Duplicated %{public}s -> %{public}s",  (uint8_t *)v40,  0x16u);
      uint64_t v49 = v55;
      swift_arrayDestroy(v55, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1LL, -1LL);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v20, type metadata accessor for OwnedBeaconRecord);
      sub_100018C68((uint64_t)v17, type metadata accessor for OwnedBeaconRecord);

      uint64_t v48 = v58;
    }

    uint64_t v51 = v59;
    sub_10002218C((uint64_t)v22, v59, type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v57 + 56))(v51, 0LL, 1LL, v48);
    uint64_t v52 = v56;
    swift_beginAccess(v56, &v62, 1LL, 0LL);
    sub_1000D4D50(v51, v52, (uint64_t *)&unk_1009A9C30);
  }

  dispatch_group_leave(v60);
}

void sub_1002B1858(uint64_t a1, dispatch_group_s *a2, uint64_t a3)
{
  uint64_t v6 = sub_100004AEC(&qword_1009A7DE0);
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t *)((char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v8, &qword_1009A7DE0);
  if (swift_getEnumCaseMultiPayload(v8, v6) == 1)
  {
    uint64_t v9 = *v8;
    uint64_t v22 = v9;
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    swift_willThrowTypedImpl(&v22, v10, &protocol self-conformance witness table for Error);
    if (qword_10099B4D8 != -1) {
      swift_once(&qword_10099B4D8, sub_1004AB71C);
    }
    uint64_t v11 = (uint64_t *)(a3 + 16);
    uint64_t v12 = type metadata accessor for Logger(0LL);
    sub_10000A720(v12, (uint64_t)qword_100A2AB18);
    uint64_t v13 = swift_errorRetain(v9);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v17 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v16 = 138543362;
      uint64_t v18 = _convertErrorToNSError(_:)(v9);
      uint64_t v22 = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v16 + 4, v16 + 12);
      *uint64_t v17 = v18;
      swift_errorRelease(v9);
      _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "Error creating duplicate BeaconNamingRecord:%{public}@",  v16,  0xCu);
      uint64_t v19 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v17, 1LL, v19);
      swift_slowDealloc(v17, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v9);
    }

    swift_beginAccess(v11, &v22, 1LL, 0LL);
    uint64_t v20 = *v11;
    *uint64_t v11 = v9;
    swift_errorRelease(v20);
  }

  else
  {
    sub_100015794((uint64_t)v8, &qword_1009A7DE0);
  }

  dispatch_group_leave(a2);
}

uint64_t sub_1002B1AB4(uint64_t a1, void (*a2)(void *), uint64_t a3, uint64_t a4)
{
  uint64_t v24 = a2;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  __chkstk_darwin(v6);
  uint64_t v8 = (void *)((char *)&v25[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v25[-1] - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  os_log_type_t v15 = (char *)&v25[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = swift_projectBox(a1);
  swift_beginAccess(v16, v27, 0LL, 0LL);
  sub_10001581C(v16, (uint64_t)v11, (uint64_t *)&unk_1009A9C30);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
  {
    sub_100015794((uint64_t)v11, (uint64_t *)&unk_1009A9C30);
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v18 = v17;
    uint64_t v26 = 2LL;
    unint64_t v19 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v20 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    _BridgedStoredNSError.init(_:userInfo:)(v25, &v26, v19, v18, v20);
    *uint64_t v8 = v25[0];
    swift_storeEnumTagMultiPayload(v8, v6, 1LL);
    v24(v8);
    return sub_100015794((uint64_t)v8, (uint64_t *)&unk_1009B0830);
  }

  else
  {
    uint64_t v22 = v24;
    sub_10002218C((uint64_t)v11, (uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
    swift_beginAccess(a4 + 16, v25, 0LL, 0LL);
    uint64_t v23 = *(void *)(a4 + 16);
    if (v23)
    {
      *uint64_t v8 = v23;
      swift_storeEnumTagMultiPayload(v8, v6, 1LL);
      swift_errorRetain(v23);
      swift_errorRetain(v23);
      v22(v8);
      swift_errorRelease(v23);
    }

    else
    {
      sub_10001DC4C((uint64_t)v15, (uint64_t)v8, type metadata accessor for OwnedBeaconRecord);
      swift_storeEnumTagMultiPayload(v8, v6, 0LL);
      v22(v8);
    }

    sub_100015794((uint64_t)v8, (uint64_t *)&unk_1009B0830);
    return sub_100018C68((uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
  }

void sub_1002B1D80(uint64_t a1, dispatch_group_s *a2, uint64_t a3)
{
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  __chkstk_darwin(v6);
  uint64_t v8 = (void *)((char *)&v13[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v8, (uint64_t *)&unk_1009B0830);
  if (swift_getEnumCaseMultiPayload(v8, v6) == 1)
  {
    uint64_t v9 = *v8;
    v13[0] = v9;
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    swift_willThrowTypedImpl(v13, v10, &protocol self-conformance witness table for Error);
    swift_beginAccess(a3 + 16, v13, 1LL, 0LL);
    uint64_t v11 = *(void *)(a3 + 16);
    *(void *)(a3 + swift_weakDestroy(v0 + 16) = v9;
    swift_errorRelease(v11);
  }

  else
  {
    sub_100015794((uint64_t)v8, (uint64_t *)&unk_1009B0830);
  }

  dispatch_group_leave(a2);
}

uint64_t sub_1002B1E88(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v8 = *(void *)(a1 + 16);
  if (v8)
  {
    swift_errorRetain(v8);
    a2(v8);
    return swift_errorRelease(v8);
  }

  else
  {
    QueueSynchronizer.conditionalSync<A>(_:)(a5);
    return ((uint64_t (*)(void))a2)(0LL);
  }

uint64_t sub_1002B1F3C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[2] = a6;
  v7[3] = a7;
  uint64_t v10 = sub_100004AEC(&qword_1009A7EF0);
  v7[4] = v10;
  v7[5] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for RawAccessoryMetadata(0LL);
  uint64_t v12 = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  void v7[6] = v12;
  type metadata accessor for AccessoryMetadataManager();
  uint64_t v13 = (void *)swift_task_alloc(dword_1009A1BE4);
  v7[7] = v13;
  *uint64_t v13 = v7;
  v13[1] = sub_1002B2008;
  if ((a4 & 1) != 0) {
    char v14 = 3;
  }
  else {
    char v14 = 2;
  }
  return sub_10011B39C(v12, a5, v14);
}

uint64_t sub_1002B2008()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56LL);
  *(void *)(*(void *)v1 + 64LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1002DDFEC;
  }
  else {
    uint64_t v3 = sub_1002DDE6C;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1002B206C(uint64_t a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[2] = a6;
  v7[3] = a7;
  uint64_t v10 = sub_100004AEC(&qword_1009A7ED8);
  v7[4] = v10;
  v7[5] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v12 = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  void v7[6] = v12;
  type metadata accessor for AccessoryMetadataManager();
  uint64_t v13 = (void *)swift_task_alloc(dword_1009A1B9C);
  v7[7] = v13;
  *uint64_t v13 = v7;
  v13[1] = sub_1002B2138;
  if ((a4 & 1) != 0) {
    char v14 = 3;
  }
  else {
    char v14 = 2;
  }
  return sub_10012226C(v12, a5, v14);
}

uint64_t sub_1002B2138()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56LL);
  *(void *)(*(void *)v1 + 64LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1002DDFF0;
  }
  else {
    uint64_t v3 = sub_1002DDE70;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1002B219C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  v7[2] = a6;
  v7[3] = a7;
  uint64_t v10 = sub_100004AEC(&qword_1009A7EF0);
  v7[4] = v10;
  v7[5] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for RawAccessoryMetadata(0LL);
  uint64_t v12 = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  void v7[6] = v12;
  type metadata accessor for AccessoryMetadataManager();
  uint64_t v13 = (void *)swift_task_alloc(dword_1009A1BE4);
  v7[7] = v13;
  *uint64_t v13 = v7;
  v13[1] = sub_1002B2260;
  return sub_10011B39C(v12, a4, a5);
}

uint64_t sub_1002B2260()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56LL);
  *(void *)(*(void *)v1 + 64LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1002B2364;
  }
  else {
    uint64_t v3 = sub_1002B22C4;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1002B22C4()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void (**)(uint64_t))(v0 + 16);
  sub_10001DC4C(v1, v2, type metadata accessor for RawAccessoryMetadata);
  swift_storeEnumTagMultiPayload(v2, v3, 0LL);
  v4(v2);
  sub_100015794(v2, &qword_1009A7EF0);
  sub_100018C68(v1, type metadata accessor for RawAccessoryMetadata);
  uint64_t v5 = *(void *)(v0 + 40);
  swift_task_dealloc(*(void *)(v0 + 48));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002B2364()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void **)(v0 + 40);
  uint64_t v4 = *(void (**)(void *))(v0 + 16);
  *uint64_t v3 = v1;
  swift_storeEnumTagMultiPayload(v3, v2, 1LL);
  swift_errorRetain(v1);
  v4(v3);
  swift_errorRelease(v1);
  sub_100015794((uint64_t)v3, &qword_1009A7EF0);
  uint64_t v5 = *(void *)(v0 + 40);
  swift_task_dealloc(*(void *)(v0 + 48));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002B23E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6, uint64_t a7)
{
  v7[2] = a6;
  v7[3] = a7;
  uint64_t v10 = sub_100004AEC(&qword_1009A7ED8);
  v7[4] = v10;
  v7[5] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v12 = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  void v7[6] = v12;
  type metadata accessor for AccessoryMetadataManager();
  uint64_t v13 = (void *)swift_task_alloc(dword_1009A1B9C);
  v7[7] = v13;
  *uint64_t v13 = v7;
  v13[1] = sub_1002B24AC;
  return sub_10012226C(v12, a4, a5);
}

uint64_t sub_1002B24AC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56LL);
  *(void *)(*(void *)v1 + 64LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1002B25B0;
  }
  else {
    uint64_t v3 = sub_1002B2510;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1002B2510()
{
  uint64_t v2 = *(void *)(v0 + 40);
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v3 = *(void *)(v0 + 32);
  uint64_t v4 = *(void (**)(uint64_t))(v0 + 16);
  sub_10001DC4C(v1, v2, type metadata accessor for AccessoryMetadata);
  swift_storeEnumTagMultiPayload(v2, v3, 0LL);
  v4(v2);
  sub_100015794(v2, &qword_1009A7ED8);
  sub_100018C68(v1, type metadata accessor for AccessoryMetadata);
  uint64_t v5 = *(void *)(v0 + 40);
  swift_task_dealloc(*(void *)(v0 + 48));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002B25B0()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void **)(v0 + 40);
  uint64_t v4 = *(void (**)(void *))(v0 + 16);
  *uint64_t v3 = v1;
  swift_storeEnumTagMultiPayload(v3, v2, 1LL);
  swift_errorRetain(v1);
  v4(v3);
  swift_errorRelease(v1);
  sub_100015794((uint64_t)v3, &qword_1009A7ED8);
  uint64_t v5 = *(void *)(v0 + 40);
  swift_task_dealloc(*(void *)(v0 + 48));
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002B2634(uint64_t a1, uint64_t a2)
{
  *(void *)(v2 + 120) = a1;
  *(void *)(v2 + 128) = a2;
  return swift_task_switch(sub_1002B264C, 0LL, 0LL);
}

uint64_t sub_1002B264C()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C9D0 + dword_10099C9D0);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C9D4);
    *(void *)(v0 + 136) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1002B2738;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1002B2738(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 136LL);
  *(void *)(*(void *)v1 + 144LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002B2794, 0LL, 0LL);
}

uint64_t sub_1002B2794()
{
  uint64_t v1 = *(void *)(v0 + 144);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v1) {
    return swift_task_switch(sub_1002B28F4, *(void *)(v0 + 144), 0LL);
  }
  if (qword_10099B4D8 != -1) {
    swift_once(&qword_10099B4D8, sub_1004AB71C);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2AB18);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Error on publishWildModeRecords, no WildModeAssociationRecordsPublisher object!",  v7,  2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 120);

  unint64_t v9 = sub_1000157D0();
  uint64_t v10 = swift_allocError(&type metadata for DaemonError, v9, 0LL, 0LL);
  *uint64_t v11 = 0xD000000000000023LL;
  v11[1] = 0x800000010085C820LL;
  v8(v10, 1LL);
  swift_errorRelease(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002B28F4()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc(v2);
  *(void *)(v0 + 152) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1002B2978;
  return v5(&unk_1009A7ED0, v1);
}

uint64_t sub_1002B2978()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 152);
  *(void *)(*v1 + 160) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 144);
  if (v0)
  {
    uint64_t v5 = sub_1002B2A2C;
  }

  else
  {
    swift_release();
    uint64_t v5 = sub_1002B29E8;
    uint64_t v4 = 0LL;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_1002B29E8()
{
  uint64_t v1 = *(void *)(v0 + 144);
  (*(void (**)(void, void))(v0 + 120))(0LL, 0LL);
  swift_release(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002B2A2C()
{
  return swift_task_switch(sub_1002B2A68, 0LL, 0LL);
}

uint64_t sub_1002B2A68()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0 + 120);
  swift_errorRetain(v1);
  v3(v1, 1LL);
  swift_release(v2);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t SPBeaconObservationType.description.getter(uint64_t a1)
{
  unint64_t result = 0x6E776F6E6B6E752ELL;
  switch(a1)
  {
    case 0LL:
      return result;
    case 1LL:
      unint64_t result = 0x7463656E6E6F632ELL;
      break;
    case 2LL:
      unint64_t result = 0xD000000000000016LL;
      break;
    case 3LL:
      unint64_t result = 0x6E6E6F637369642ELL;
      break;
    default:
      _StringGuts.grow(_:)(47LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      object = v3._object;
      String.append(_:)(v3);
      swift_bridgeObjectRelease(object);
      unint64_t result = 0xD00000000000002DLL;
      break;
  }

  return result;
}

unint64_t sub_1002B2BF8()
{
  return SPBeaconObservationType.description.getter(*v0);
}

uint64_t sub_1002B2CE8()
{
  uint64_t v1 = v0;
  _StringGuts.grow(_:)(21LL);
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v4 = dispatch thunk of CustomStringConvertible.description.getter(v2, v3);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 8250LL;
  v5._object = (void *)0xE200000000000000LL;
  String.append(_:)(v5);
  uint64_t v6 = type metadata accessor for KeySyncMetadataDisplay(0LL);
  uint64_t v7 = (uint64_t *)(v1 + *(int *)(v6 + 20));
  uint64_t v8 = *v7;
  unint64_t v9 = (void *)v7[1];
  swift_bridgeObjectRetain(v9);
  v10._countAndFlagsBits = v8;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 773860640LL;
  v11._object = (void *)0xE400000000000000LL;
  String.append(_:)(v11);
  uint64_t v12 = (uint64_t *)(v1 + *(int *)(v6 + 28));
  uint64_t v13 = *v12;
  char v14 = (void *)v12[1];
  swift_bridgeObjectRetain(v14);
  v15._countAndFlagsBits = v13;
  v15._object = v14;
  String.append(_:)(v15);
  swift_bridgeObjectRelease();
  v16._countAndFlagsBits = 40LL;
  v16._object = (void *)0xE100000000000000LL;
  String.append(_:)(v16);
  v17._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  String.append(_:)(v17);
  swift_bridgeObjectRelease();
  v18._countAndFlagsBits = 539828265LL;
  v18._object = (void *)0xE400000000000000LL;
  String.append(_:)(v18);
  uint64_t v19 = type metadata accessor for Date(0LL);
  uint64_t v20 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  v21._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v19, v20);
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1002B2EBC()
{
  return sub_1002DD5A0(40LL);
}

uint64_t sub_1002B2EC4()
{
  return sub_1002A9830(*(void *)(v0 + 16), *(void (**)(void *))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_1002B2ED0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + sub_10016CF88(v0 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1002B2EE0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

Swift::Int sub_1002B2EE8(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v2 = sub_1003D4AC8(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_1002B7840(v5);
  *a1 = v2;
  return result;
}

void sub_1002B2F50( uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t), void (*a6)(uint64_t))
{
  uint64_t v60 = a1;
  uint64_t v56 = a5;
  uint64_t v57 = a6;
  uint64_t v58 = a3;
  uint64_t v59 = a4;
  uint64_t v53 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  __chkstk_darwin(v53);
  uint64_t v54 = (uint64_t)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v55 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v11);
  char v14 = (char *)&v51 - v13;
  uint64_t v15 = static os_log_type_t.default.getter(v12);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v16 = qword_100A2B018;
  uint64_t v52 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v52, 72LL, 7LL);
  uint64_t v18 = v17;
  __int128 v51 = xmmword_1007E67D0;
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  int v19 = a2 & 1;
  if (v19) {
    uint64_t v20 = 1702195828LL;
  }
  else {
    uint64_t v20 = 0x65736C6166LL;
  }
  if (v19) {
    unint64_t v21 = 0xE400000000000000LL;
  }
  else {
    unint64_t v21 = 0xE500000000000000LL;
  }
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + sub_10016CF88(v0 + 40) = v21;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Modify record. Disk First? (%@)", 31LL, 2LL, v18, v51);
  swift_bridgeObjectRelease();
  uint64_t v22 = objc_autoreleasePoolPush();
  if (v19)
  {
    uint64_t v23 = v60;
    sub_100545150(v60);
    uint64_t v25 = v24;
    objc_autoreleasePoolPop(v22);
    v62[0] = v25;
    uint64_t v26 = (uint64_t)v55;
    sub_10001DC4C(v23, (uint64_t)v55, type metadata accessor for OwnedBeaconRecord);
    v58(v26);
    sub_1002B5878(v62, v26);
    uint64_t v27 = v61;
    uint64_t v28 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
    __chkstk_darwin(v28);
    *((void *)&v51 - 2) = v29;
    *((void *)&v51 - 1) = v26;
    OS_dispatch_queue.sync<A>(execute:)(sub_100022790, &v51 - 2, (char *)&type metadata for () + 8);
    QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
    sub_1004E696C(8u);
    uint64_t v49 = v54;
    sub_10001DC4C(v26, v54, type metadata accessor for OwnedBeaconRecord);
    swift_storeEnumTagMultiPayload(v49, v53, 0LL);
    v56(v49);
    sub_100015794(v49, (uint64_t *)&unk_1009B0830);
    uint64_t v50 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v50);
    *((void *)&v51 - 4) = v27;
    *((void *)&v51 - 3) = v62;
    *((void *)&v51 - 2) = v23;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-updateToCloud",  42LL,  2LL,  sub_1002DB77C,  &v51 - 3);
    sub_100018C68(v26, type metadata accessor for OwnedBeaconRecord);
  }

  else
  {
    uint64_t v30 = v60;
    sub_100545150(v60);
    uint64_t v32 = v31;
    uint64_t v55 = v31;
    objc_autoreleasePoolPop(v22);
    uint64_t v33 = sub_1004F730C();
    sub_10001DC4C(v30, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
    uint64_t v34 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v35 = (v34 + 32) & ~v34;
    uint64_t v54 = v34 | 7;
    uint64_t v36 = swift_allocObject(&unk_10094DE48, v35 + v10, v34 | 7);
    uint64_t v37 = v59;
    *(void *)(v36 + swift_weakDestroy(v0 + 16) = v58;
    *(void *)(v36 + 24) = v37;
    sub_10002218C((uint64_t)v14, v36 + v35, type metadata accessor for OwnedBeaconRecord);
    swift_retain();
    uint64_t v38 = sub_10067F4C4(v32, (void (*)(id *))sub_1002DB48C, v36);
    swift_release(v36);
    swift_release(v33);
    uint64_t v39 = swift_allocObject(&unk_10094DE70, 32LL, 7LL);
    uint64_t v40 = v56;
    uint64_t v41 = v57;
    *(void *)(v39 + swift_weakDestroy(v0 + 16) = v56;
    *(void *)(v39 + 24) = v41;
    swift_retain();
    uint64_t v42 = Future.addFailure(block:)(sub_1002DB4A0, v39);
    swift_release(v42);
    swift_release(v39);
    sub_10001DC4C(v30, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
    uint64_t v43 = (v34 + 16) & ~v34;
    unint64_t v44 = (v10 + v43 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v45 = (v44 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v46 = swift_allocObject(&unk_10094DE98, v45 + 16, v54);
    sub_10002218C((uint64_t)v14, v46 + v43, type metadata accessor for OwnedBeaconRecord);
    *(void *)(v46 + v44) = v61;
    unint64_t v47 = (void (**)(uint64_t))(v46 + v45);
    *unint64_t v47 = v40;
    v47[1] = v41;
    swift_retain();
    swift_retain();
    uint64_t v48 = Future.addSuccess(block:)(sub_1002DB768, v46);

    swift_release(v38);
    swift_release(v48);
    swift_release(v46);
  }

void sub_1002B3554( uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t), void (*a6)(uint64_t))
{
  uint64_t v60 = a1;
  uint64_t v56 = a5;
  uint64_t v57 = a6;
  uint64_t v58 = a3;
  uint64_t v59 = a4;
  uint64_t v53 = sub_100004AEC(&qword_1009A0E30);
  __chkstk_darwin(v53);
  uint64_t v54 = (uint64_t)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v55 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v11);
  char v14 = (char *)&v51 - v13;
  uint64_t v15 = static os_log_type_t.default.getter(v12);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v16 = qword_100A2B018;
  uint64_t v52 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v52, 72LL, 7LL);
  uint64_t v18 = v17;
  __int128 v51 = xmmword_1007E67D0;
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  int v19 = a2 & 1;
  if (v19) {
    uint64_t v20 = 1702195828LL;
  }
  else {
    uint64_t v20 = 0x65736C6166LL;
  }
  if (v19) {
    unint64_t v21 = 0xE400000000000000LL;
  }
  else {
    unint64_t v21 = 0xE500000000000000LL;
  }
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + sub_10016CF88(v0 + 40) = v21;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Modify record. Disk First? (%@)", 31LL, 2LL, v18, v51);
  swift_bridgeObjectRelease();
  uint64_t v22 = objc_autoreleasePoolPush();
  if (v19)
  {
    uint64_t v23 = v60;
    sub_1005454D0(v60);
    uint64_t v25 = v24;
    objc_autoreleasePoolPop(v22);
    v62[0] = v25;
    uint64_t v26 = (uint64_t)v55;
    sub_10001DC4C(v23, (uint64_t)v55, type metadata accessor for SharedBeaconRecord);
    v58(v26);
    sub_1002B6A70(v62, v26);
    uint64_t v27 = v61;
    uint64_t v28 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
    __chkstk_darwin(v28);
    *((void *)&v51 - 2) = v29;
    *((void *)&v51 - 1) = v26;
    OS_dispatch_queue.sync<A>(execute:)(sub_1000227A8, &v51 - 2, (char *)&type metadata for () + 8);
    QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
    sub_1004E696C(8u);
    uint64_t v49 = v54;
    sub_10001DC4C(v26, v54, type metadata accessor for SharedBeaconRecord);
    swift_storeEnumTagMultiPayload(v49, v53, 0LL);
    v56(v49);
    sub_100015794(v49, &qword_1009A0E30);
    uint64_t v50 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v50);
    *((void *)&v51 - 4) = v27;
    *((void *)&v51 - 3) = v62;
    *((void *)&v51 - 2) = v23;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-updateToCloud",  42LL,  2LL,  sub_1002DBB90,  &v51 - 3);
    sub_100018C68(v26, type metadata accessor for SharedBeaconRecord);
  }

  else
  {
    uint64_t v30 = v60;
    sub_1005454D0(v60);
    uint64_t v32 = v31;
    uint64_t v55 = v31;
    objc_autoreleasePoolPop(v22);
    uint64_t v33 = sub_1004F730C();
    sub_10001DC4C(v30, (uint64_t)v14, type metadata accessor for SharedBeaconRecord);
    uint64_t v34 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v35 = (v34 + 32) & ~v34;
    uint64_t v54 = v34 | 7;
    uint64_t v36 = swift_allocObject(&unk_10094DEC0, v35 + v10, v34 | 7);
    uint64_t v37 = v59;
    *(void *)(v36 + swift_weakDestroy(v0 + 16) = v58;
    *(void *)(v36 + 24) = v37;
    sub_10002218C((uint64_t)v14, v36 + v35, type metadata accessor for SharedBeaconRecord);
    swift_retain();
    uint64_t v38 = sub_10067F4C4(v32, (void (*)(id *))sub_1002DB930, v36);
    swift_release(v36);
    swift_release(v33);
    uint64_t v39 = swift_allocObject(&unk_10094DEE8, 32LL, 7LL);
    uint64_t v40 = v56;
    uint64_t v41 = v57;
    *(void *)(v39 + swift_weakDestroy(v0 + 16) = v56;
    *(void *)(v39 + 24) = v41;
    swift_retain();
    uint64_t v42 = Future.addFailure(block:)(sub_1002DB944, v39);
    swift_release(v42);
    swift_release(v39);
    sub_10001DC4C(v30, (uint64_t)v14, type metadata accessor for SharedBeaconRecord);
    uint64_t v43 = (v34 + 16) & ~v34;
    unint64_t v44 = (v10 + v43 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v45 = (v44 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v46 = swift_allocObject(&unk_10094DF10, v45 + 16, v54);
    sub_10002218C((uint64_t)v14, v46 + v43, type metadata accessor for SharedBeaconRecord);
    *(void *)(v46 + v44) = v61;
    unint64_t v47 = (void (**)(uint64_t))(v46 + v45);
    *unint64_t v47 = v40;
    v47[1] = v41;
    swift_retain();
    swift_retain();
    uint64_t v48 = Future.addSuccess(block:)(sub_1002DBB0C, v46);

    swift_release(v38);
    swift_release(v48);
    swift_release(v46);
  }

void sub_1002B3B58( uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t), void (*a6)(uint64_t))
{
  uint64_t v56 = a1;
  uint64_t v52 = a5;
  uint64_t v53 = a6;
  uint64_t v54 = a3;
  uint64_t v55 = a4;
  uint64_t v49 = sub_100004AEC(&qword_1009A49F0);
  __chkstk_darwin(v49);
  uint64_t v50 = (uint64_t)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  __int128 v51 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v11);
  char v14 = (char *)&v47 - v13;
  uint64_t v15 = static os_log_type_t.default.getter(v12);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v16 = qword_100A2B018;
  uint64_t v48 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v48, 72LL, 7LL);
  uint64_t v18 = v17;
  __int128 v47 = xmmword_1007E67D0;
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  int v19 = a2 & 1;
  if (v19) {
    uint64_t v20 = 1702195828LL;
  }
  else {
    uint64_t v20 = 0x65736C6166LL;
  }
  if (v19) {
    unint64_t v21 = 0xE400000000000000LL;
  }
  else {
    unint64_t v21 = 0xE500000000000000LL;
  }
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + sub_10016CF88(v0 + 40) = v21;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Modify record. Disk First? (%@)", 31LL, 2LL, v18, v47);
  swift_bridgeObjectRelease();
  uint64_t v22 = objc_autoreleasePoolPush();
  if (v19)
  {
    uint64_t v23 = v56;
    sub_100544E34(v56);
    uint64_t v25 = v24;
    objc_autoreleasePoolPop(v22);
    v58[0] = v25;
    uint64_t v26 = (uint64_t)v51;
    sub_10001DC4C(v23, (uint64_t)v51, type metadata accessor for OwnedBeaconGroup);
    v54(v26);
    uint64_t v27 = sub_1004E9B0C(v58, v26);
    uint64_t v28 = v57;
    __chkstk_darwin(v27);
    *((void *)&v47 - 2) = v29;
    *((void *)&v47 - 1) = v26;
    OS_dispatch_queue.sync<A>(execute:)(sub_1000227C0, &v47 - 2, (char *)&type metadata for () + 8);
    sub_1004E696C(8u);
    uint64_t v45 = v50;
    sub_10001DC4C(v26, v50, type metadata accessor for OwnedBeaconGroup);
    swift_storeEnumTagMultiPayload(v45, v49, 0LL);
    v52(v45);
    sub_100015794(v45, &qword_1009A49F0);
    uint64_t v46 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v46);
    *((void *)&v47 - 4) = v28;
    *((void *)&v47 - 3) = v58;
    *((void *)&v47 - 2) = v23;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-updateToCloud",  42LL,  2LL,  sub_1002DDDF8,  &v47 - 3);
    sub_100018C68(v26, type metadata accessor for OwnedBeaconGroup);
  }

  else
  {
    uint64_t v30 = v56;
    sub_100544E34(v56);
    uint64_t v32 = v31;
    __int128 v51 = v31;
    objc_autoreleasePoolPop(v22);
    sub_1004F730C();
    sub_10001DC4C(v30, (uint64_t)v14, type metadata accessor for OwnedBeaconGroup);
    uint64_t v33 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v34 = (v33 + 32) & ~v33;
    uint64_t v50 = v33 | 7;
    uint64_t v35 = swift_allocObject(&unk_10094E438, v34 + v10, v33 | 7);
    uint64_t v36 = v55;
    *(void *)(v35 + swift_weakDestroy(v0 + 16) = v54;
    *(void *)(v35 + 24) = v36;
    sub_10002218C((uint64_t)v14, v35 + v34, type metadata accessor for OwnedBeaconGroup);
    swift_retain();
    sub_10067F4C4(v32, (void (*)(id *))sub_1002DDC0C, v35);
    swift_release();
    swift_release();
    uint64_t v37 = swift_allocObject(&unk_10094E460, 32LL, 7LL);
    uint64_t v38 = v52;
    uint64_t v39 = v53;
    *(void *)(v37 + swift_weakDestroy(v0 + 16) = v52;
    *(void *)(v37 + 24) = v39;
    swift_retain();
    Future.addFailure(block:)(sub_1002DDC70, v37);
    swift_release();
    swift_release();
    sub_10001DC4C(v30, (uint64_t)v14, type metadata accessor for OwnedBeaconGroup);
    uint64_t v40 = (v33 + 16) & ~v33;
    unint64_t v41 = (v10 + v40 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v43 = swift_allocObject(&unk_10094E488, v42 + 16, v50);
    sub_10002218C((uint64_t)v14, v43 + v40, type metadata accessor for OwnedBeaconGroup);
    *(void *)(v43 + v41) = v57;
    unint64_t v44 = (void (**)(uint64_t))(v43 + v42);
    *unint64_t v44 = v38;
    v44[1] = v39;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_1002DDD74, v43);

    swift_release();
    swift_release();
    swift_release();
  }

void sub_1002B4120( uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t), void (*a6)(uint64_t))
{
  uint64_t v56 = a1;
  uint64_t v52 = a5;
  uint64_t v53 = a6;
  uint64_t v54 = a3;
  uint64_t v55 = a4;
  uint64_t v49 = sub_100004AEC(&qword_1009A7F18);
  __chkstk_darwin(v49);
  uint64_t v50 = (uint64_t)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for LostModeRecord(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  __int128 v51 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v11);
  char v14 = (char *)&v47 - v13;
  uint64_t v15 = static os_log_type_t.default.getter(v12);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v16 = qword_100A2B018;
  uint64_t v48 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v48, 72LL, 7LL);
  uint64_t v18 = v17;
  __int128 v47 = xmmword_1007E67D0;
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  int v19 = a2 & 1;
  if (v19) {
    uint64_t v20 = 1702195828LL;
  }
  else {
    uint64_t v20 = 0x65736C6166LL;
  }
  if (v19) {
    unint64_t v21 = 0xE400000000000000LL;
  }
  else {
    unint64_t v21 = 0xE500000000000000LL;
  }
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + sub_10016CF88(v0 + 40) = v21;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Modify record. Disk First? (%@)", 31LL, 2LL, v18, v47);
  swift_bridgeObjectRelease();
  uint64_t v22 = objc_autoreleasePoolPush();
  if (v19)
  {
    uint64_t v23 = v56;
    sub_100544DF0(v56);
    uint64_t v25 = v24;
    objc_autoreleasePoolPop(v22);
    v58[0] = v25;
    uint64_t v26 = (uint64_t)v51;
    sub_10001DC4C(v23, (uint64_t)v51, type metadata accessor for LostModeRecord);
    v54(v26);
    uint64_t v27 = sub_100543938(v58, v26);
    uint64_t v28 = v57;
    __chkstk_darwin(v27);
    *((void *)&v47 - 2) = v29;
    *((void *)&v47 - 1) = v26;
    OS_dispatch_queue.sync<A>(execute:)(sub_100022850, &v47 - 2, (char *)&type metadata for () + 8);
    sub_1004E696C(8u);
    uint64_t v45 = v50;
    sub_10001DC4C(v26, v50, type metadata accessor for LostModeRecord);
    swift_storeEnumTagMultiPayload(v45, v49, 0LL);
    v52(v45);
    sub_100015794(v45, &qword_1009A7F18);
    uint64_t v46 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v46);
    *((void *)&v47 - 4) = v28;
    *((void *)&v47 - 3) = v58;
    *((void *)&v47 - 2) = v23;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-updateToCloud",  42LL,  2LL,  sub_1002DD55C,  &v47 - 3);
    sub_100018C68(v26, type metadata accessor for LostModeRecord);
  }

  else
  {
    uint64_t v30 = v56;
    sub_100544DF0(v56);
    uint64_t v32 = v31;
    __int128 v51 = v31;
    objc_autoreleasePoolPop(v22);
    sub_1004F730C();
    sub_10001DC4C(v30, (uint64_t)v14, type metadata accessor for LostModeRecord);
    uint64_t v33 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v34 = (v33 + 32) & ~v33;
    uint64_t v50 = v33 | 7;
    uint64_t v35 = swift_allocObject(&unk_10094E140, v34 + v10, v33 | 7);
    uint64_t v36 = v55;
    *(void *)(v35 + swift_weakDestroy(v0 + 16) = v54;
    *(void *)(v35 + 24) = v36;
    sub_10002218C((uint64_t)v14, v35 + v34, type metadata accessor for LostModeRecord);
    swift_retain();
    sub_10067F4C4(v32, (void (*)(id *))sub_1002DD424, v35);
    swift_release();
    swift_release();
    uint64_t v37 = swift_allocObject(&unk_10094E168, 32LL, 7LL);
    uint64_t v38 = v52;
    uint64_t v39 = v53;
    *(void *)(v37 + swift_weakDestroy(v0 + 16) = v52;
    *(void *)(v37 + 24) = v39;
    swift_retain();
    Future.addFailure(block:)(sub_1002DD438, v37);
    swift_release();
    swift_release();
    sub_10001DC4C(v30, (uint64_t)v14, type metadata accessor for LostModeRecord);
    uint64_t v40 = (v33 + 16) & ~v33;
    unint64_t v41 = (v10 + v40 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v43 = swift_allocObject(&unk_10094E190, v42 + 16, v50);
    sub_10002218C((uint64_t)v14, v43 + v40, type metadata accessor for LostModeRecord);
    *(void *)(v43 + v41) = v57;
    unint64_t v44 = (void (**)(uint64_t))(v43 + v42);
    *unint64_t v44 = v38;
    v44[1] = v39;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_1002DD548, v43);

    swift_release();
    swift_release();
    swift_release();
  }

void sub_1002B46E8( uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t), void (*a6)(uint64_t))
{
  uint64_t v56 = a1;
  uint64_t v52 = a5;
  uint64_t v53 = a6;
  uint64_t v54 = a3;
  uint64_t v55 = a4;
  uint64_t v49 = sub_100004AEC(&qword_1009A7DE0);
  __chkstk_darwin(v49);
  uint64_t v50 = (uint64_t)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  __int128 v51 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v11);
  char v14 = (char *)&v47 - v13;
  uint64_t v15 = static os_log_type_t.default.getter(v12);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v16 = qword_100A2B018;
  uint64_t v48 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v48, 72LL, 7LL);
  uint64_t v18 = v17;
  __int128 v47 = xmmword_1007E67D0;
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  int v19 = a2 & 1;
  if (v19) {
    uint64_t v20 = 1702195828LL;
  }
  else {
    uint64_t v20 = 0x65736C6166LL;
  }
  if (v19) {
    unint64_t v21 = 0xE400000000000000LL;
  }
  else {
    unint64_t v21 = 0xE500000000000000LL;
  }
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + sub_10016CF88(v0 + 40) = v21;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Modify record. Disk First? (%@)", 31LL, 2LL, v18, v47);
  swift_bridgeObjectRelease();
  uint64_t v22 = objc_autoreleasePoolPush();
  if (v19)
  {
    uint64_t v23 = v56;
    sub_100545494(v56);
    uint64_t v25 = v24;
    objc_autoreleasePoolPop(v22);
    v58[0] = v25;
    uint64_t v26 = (uint64_t)v51;
    sub_10001DC4C(v23, (uint64_t)v51, type metadata accessor for BeaconNamingRecord);
    v54(v26);
    sub_1002B6684(v58, v26);
    uint64_t v27 = v57;
    uint64_t v28 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
    __chkstk_darwin(v28);
    *((void *)&v47 - 2) = v29;
    *((void *)&v47 - 1) = v26;
    OS_dispatch_queue.sync<A>(execute:)(sub_1000227F0, &v47 - 2, (char *)&type metadata for () + 8);
    QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
    sub_1004E696C(8u);
    uint64_t v45 = v50;
    sub_10001DC4C(v26, v50, type metadata accessor for BeaconNamingRecord);
    swift_storeEnumTagMultiPayload(v45, v49, 0LL);
    v52(v45);
    sub_100015794(v45, &qword_1009A7DE0);
    uint64_t v46 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v46);
    *((void *)&v47 - 4) = v27;
    *((void *)&v47 - 3) = v58;
    *((void *)&v47 - 2) = v23;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-updateToCloud",  42LL,  2LL,  sub_1002DA380,  &v47 - 3);
    sub_100018C68(v26, type metadata accessor for BeaconNamingRecord);
  }

  else
  {
    uint64_t v30 = v56;
    sub_100545494(v56);
    uint64_t v32 = v31;
    __int128 v51 = v31;
    objc_autoreleasePoolPop(v22);
    sub_1004F730C();
    sub_10001DC4C(v30, (uint64_t)v14, type metadata accessor for BeaconNamingRecord);
    uint64_t v33 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v34 = (v33 + 32) & ~v33;
    uint64_t v50 = v33 | 7;
    uint64_t v35 = swift_allocObject(&unk_10094DBA0, v34 + v10, v33 | 7);
    uint64_t v36 = v55;
    *(void *)(v35 + swift_weakDestroy(v0 + 16) = v54;
    *(void *)(v35 + 24) = v36;
    sub_10002218C((uint64_t)v14, v35 + v34, type metadata accessor for BeaconNamingRecord);
    swift_retain();
    sub_10067F4C4(v32, (void (*)(id *))sub_1002DA258, v35);
    swift_release();
    swift_release();
    uint64_t v37 = swift_allocObject(&unk_10094DBC8, 32LL, 7LL);
    uint64_t v38 = v52;
    uint64_t v39 = v53;
    *(void *)(v37 + swift_weakDestroy(v0 + 16) = v52;
    *(void *)(v37 + 24) = v39;
    swift_retain();
    Future.addFailure(block:)(sub_1002DA26C, v37);
    swift_release();
    swift_release();
    sub_10001DC4C(v30, (uint64_t)v14, type metadata accessor for BeaconNamingRecord);
    uint64_t v40 = (v33 + 16) & ~v33;
    unint64_t v41 = (v10 + v40 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v43 = swift_allocObject(&unk_10094DBF0, v42 + 16, v50);
    sub_10002218C((uint64_t)v14, v43 + v40, type metadata accessor for BeaconNamingRecord);
    *(void *)(v43 + v41) = v57;
    unint64_t v44 = (void (**)(uint64_t))(v43 + v42);
    *unint64_t v44 = v38;
    v44[1] = v39;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_1002DA36C, v43);

    swift_release();
    swift_release();
    swift_release();
  }

void sub_1002B4CEC( uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t), void (*a6)(uint64_t))
{
  uint64_t v56 = a1;
  uint64_t v52 = a5;
  uint64_t v53 = a6;
  uint64_t v54 = a3;
  uint64_t v55 = a4;
  uint64_t v49 = sub_100004AEC(&qword_1009A6100);
  __chkstk_darwin(v49);
  uint64_t v50 = (uint64_t)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for ShareRecord(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  __int128 v51 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v11);
  char v14 = (char *)&v47 - v13;
  uint64_t v15 = static os_log_type_t.default.getter(v12);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v16 = qword_100A2B018;
  uint64_t v48 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v48, 72LL, 7LL);
  uint64_t v18 = v17;
  __int128 v47 = xmmword_1007E67D0;
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  int v19 = a2 & 1;
  if (v19) {
    uint64_t v20 = 1702195828LL;
  }
  else {
    uint64_t v20 = 0x65736C6166LL;
  }
  if (v19) {
    unint64_t v21 = 0xE400000000000000LL;
  }
  else {
    unint64_t v21 = 0xE500000000000000LL;
  }
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + sub_10016CF88(v0 + 40) = v21;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Modify record. Disk First? (%@)", 31LL, 2LL, v18, v47);
  swift_bridgeObjectRelease();
  uint64_t v22 = objc_autoreleasePoolPush();
  if (v19)
  {
    uint64_t v23 = v56;
    sub_100544DB0(v56);
    uint64_t v25 = v24;
    objc_autoreleasePoolPop(v22);
    v58[0] = v25;
    uint64_t v26 = (uint64_t)v51;
    sub_10001DC4C(v23, (uint64_t)v51, type metadata accessor for ShareRecord);
    v54(v26);
    uint64_t v27 = sub_1004E6DFC(v58, v26);
    uint64_t v28 = v57;
    __chkstk_darwin(v27);
    *((void *)&v47 - 2) = v29;
    *((void *)&v47 - 1) = v26;
    OS_dispatch_queue.sync<A>(execute:)(sub_1000227D8, &v47 - 2, (char *)&type metadata for () + 8);
    sub_1004E696C(8u);
    uint64_t v45 = v50;
    sub_10001DC4C(v26, v50, type metadata accessor for ShareRecord);
    swift_storeEnumTagMultiPayload(v45, v49, 0LL);
    v52(v45);
    sub_100015794(v45, &qword_1009A6100);
    uint64_t v46 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v46);
    *((void *)&v47 - 4) = v28;
    *((void *)&v47 - 3) = v58;
    *((void *)&v47 - 2) = v23;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-updateToCloud",  42LL,  2LL,  sub_1002DBED0,  &v47 - 3);
    sub_100018C68(v26, type metadata accessor for ShareRecord);
  }

  else
  {
    uint64_t v30 = v56;
    sub_100544DB0(v56);
    uint64_t v32 = v31;
    __int128 v51 = v31;
    objc_autoreleasePoolPop(v22);
    sub_1004F730C();
    sub_10001DC4C(v30, (uint64_t)v14, type metadata accessor for ShareRecord);
    uint64_t v33 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v34 = (v33 + 32) & ~v33;
    uint64_t v50 = v33 | 7;
    uint64_t v35 = swift_allocObject(&unk_10094DF38, v34 + v10, v33 | 7);
    uint64_t v36 = v55;
    *(void *)(v35 + swift_weakDestroy(v0 + 16) = v54;
    *(void *)(v35 + 24) = v36;
    sub_10002218C((uint64_t)v14, v35 + v34, type metadata accessor for ShareRecord);
    swift_retain();
    sub_10067F4C4(v32, (void (*)(id *))sub_1002DBD54, v35);
    swift_release();
    swift_release();
    uint64_t v37 = swift_allocObject(&unk_10094DF60, 32LL, 7LL);
    uint64_t v38 = v52;
    uint64_t v39 = v53;
    *(void *)(v37 + swift_weakDestroy(v0 + 16) = v52;
    *(void *)(v37 + 24) = v39;
    swift_retain();
    Future.addFailure(block:)(sub_1002DBD68, v37);
    swift_release();
    swift_release();
    sub_10001DC4C(v30, (uint64_t)v14, type metadata accessor for ShareRecord);
    uint64_t v40 = (v33 + 16) & ~v33;
    unint64_t v41 = (v10 + v40 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v42 = (v41 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v43 = swift_allocObject(&unk_10094DF88, v42 + 16, v50);
    sub_10002218C((uint64_t)v14, v43 + v40, type metadata accessor for ShareRecord);
    *(void *)(v43 + v41) = v57;
    unint64_t v44 = (void (**)(uint64_t))(v43 + v42);
    *unint64_t v44 = v38;
    v44[1] = v39;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_1002DBEBC, v43);

    swift_release();
    swift_release();
    swift_release();
  }

void sub_1002B52B4( uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, void (*a5)(uint64_t), void (*a6)(uint64_t))
{
  uint64_t v60 = a1;
  uint64_t v56 = a5;
  uint64_t v57 = a6;
  uint64_t v58 = a3;
  uint64_t v59 = a4;
  uint64_t v53 = sub_100004AEC(&qword_1009A7E08);
  __chkstk_darwin(v53);
  uint64_t v54 = (uint64_t)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v55 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v11);
  char v14 = (char *)&v51 - v13;
  uint64_t v15 = static os_log_type_t.default.getter(v12);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v16 = qword_100A2B018;
  uint64_t v52 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v52, 72LL, 7LL);
  uint64_t v18 = v17;
  __int128 v51 = xmmword_1007E67D0;
  *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  int v19 = a2 & 1;
  if (v19) {
    uint64_t v20 = 1702195828LL;
  }
  else {
    uint64_t v20 = 0x65736C6166LL;
  }
  if (v19) {
    unint64_t v21 = 0xE400000000000000LL;
  }
  else {
    unint64_t v21 = 0xE500000000000000LL;
  }
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + sub_10016CF88(v0 + 40) = v21;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Modify record. Disk First? (%@)", 31LL, 2LL, v18, v51);
  swift_bridgeObjectRelease();
  uint64_t v22 = objc_autoreleasePoolPush();
  if (v19)
  {
    uint64_t v23 = v60;
    sub_100544A9C(v60);
    uint64_t v25 = v24;
    objc_autoreleasePoolPop(v22);
    v62[0] = v25;
    uint64_t v26 = (uint64_t)v55;
    sub_10001DC4C(v23, (uint64_t)v55, type metadata accessor for KeyAlignmentRecord);
    v58(v26);
    uint64_t v27 = sub_10003AF4C(v26, v62);
    uint64_t v28 = v61;
    __chkstk_darwin(v27);
    *((void *)&v51 - 2) = v29;
    *((void *)&v51 - 1) = v26;
    OS_dispatch_queue.sync<A>(execute:)(sub_100022868, &v51 - 2, (char *)&type metadata for () + 8);
    sub_1004E696C(8u);
    uint64_t v49 = v54;
    sub_10001DC4C(v26, v54, type metadata accessor for KeyAlignmentRecord);
    swift_storeEnumTagMultiPayload(v49, v53, 0LL);
    v56(v49);
    sub_100015794(v49, &qword_1009A7E08);
    uint64_t v50 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v50);
    *((void *)&v51 - 4) = v28;
    *((void *)&v51 - 3) = v62;
    *((void *)&v51 - 2) = v23;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-updateToCloud",  42LL,  2LL,  sub_1002DA070,  &v51 - 3);
    sub_100018C68(v26, type metadata accessor for KeyAlignmentRecord);
  }

  else
  {
    uint64_t v30 = v60;
    sub_100544A9C(v60);
    uint64_t v32 = v31;
    uint64_t v55 = v31;
    objc_autoreleasePoolPop(v22);
    uint64_t v33 = sub_1004F730C();
    sub_10001DC4C(v30, (uint64_t)v14, type metadata accessor for KeyAlignmentRecord);
    uint64_t v34 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v35 = (v34 + 32) & ~v34;
    uint64_t v54 = v34 | 7;
    uint64_t v36 = swift_allocObject(&unk_10094DA60, v35 + v10, v34 | 7);
    uint64_t v37 = v59;
    *(void *)(v36 + swift_weakDestroy(v0 + 16) = v58;
    *(void *)(v36 + 24) = v37;
    sub_10002218C((uint64_t)v14, v36 + v35, type metadata accessor for KeyAlignmentRecord);
    swift_retain();
    uint64_t v38 = sub_10067F4C4(v32, (void (*)(id *))sub_1002D9F44, v36);
    swift_release(v36);
    swift_release(v33);
    uint64_t v39 = swift_allocObject(&unk_10094DA88, 32LL, 7LL);
    uint64_t v40 = v56;
    unint64_t v41 = v57;
    *(void *)(v39 + swift_weakDestroy(v0 + 16) = v56;
    *(void *)(v39 + 24) = v41;
    swift_retain();
    uint64_t v42 = Future.addFailure(block:)(sub_1002D9F58, v39);
    swift_release(v42);
    swift_release(v39);
    sub_10001DC4C(v30, (uint64_t)v14, type metadata accessor for KeyAlignmentRecord);
    uint64_t v43 = (v34 + 16) & ~v34;
    unint64_t v44 = (v10 + v43 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v45 = (v44 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v46 = swift_allocObject(&unk_10094DAB0, v45 + 16, v54);
    sub_10002218C((uint64_t)v14, v46 + v43, type metadata accessor for KeyAlignmentRecord);
    *(void *)(v46 + v44) = v61;
    __int128 v47 = (void (**)(uint64_t))(v46 + v45);
    *__int128 v47 = v40;
    v47[1] = v41;
    swift_retain();
    swift_retain();
    uint64_t v48 = Future.addSuccess(block:)(sub_1002DA05C, v46);

    swift_release(v38);
    swift_release(v48);
    swift_release(v46);
  }

uint64_t sub_1002B5878(id *a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v134 = *(void *)(v5 - 8);
  uint64_t v135 = v5;
  __chkstk_darwin(v5);
  uint64_t v138 = &v128[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v136 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v136 - 8);
  __chkstk_darwin(v136);
  uint64_t v130 = &v128[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v137 = sub_100004AEC((uint64_t *)&unk_1009B5370);
  __chkstk_darwin(v137);
  uint64_t v10 = &v128[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v133 = &v128[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v131 = &v128[-v15];
  __chkstk_darwin(v14);
  uint64_t v17 = &v128[-v16];
  uint64_t v18 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v18);
  uint64_t v20 = &v128[-((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  unint64_t v21 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v21);
  uint64_t v23 = &v128[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_10001DC4C(a2, (uint64_t)v23, v24);
  uint64_t v141 = a1;
  id v139 = [*a1 encryptedValues];
  uint64_t ObjectType = swift_getObjectType(v139);
  sub_10001DC4C(v2 + v21[6], (uint64_t)v20, type metadata accessor for StableIdentifier);
  sub_1006DF8C4((uint64_t)v20, (uint64_t)&v23[v21[6]]);
  LOBYTE(a1) = v25;
  sub_100018C68((uint64_t)v20, type metadata accessor for StableIdentifier);
  if ((a1 & 1) == 0)
  {
    sub_1006DD1E4();
    *((void *)&v144 + 1) = &type metadata for String;
    uint64_t v145 = &protocol witness table for String;
    *(void *)&__int128 v143 = v26;
    *((void *)&v143 + 1) = v27;
    uint64_t v28 = sub_100022898(0LL, (unint64_t *)&qword_10099D920, &OBJC_CLASS___CKRecord_ptr);
    CKRecordKeyValueSetting.subscript.setter(&v143, 0xD000000000000010LL, 0x800000010084E540LL, v28);
  }

  uint64_t v29 = v21[7];
  uint64_t v140 = v2;
  sub_10001581C(v2 + v29, (uint64_t)v17, &qword_10099D8A0);
  uint64_t v30 = (uint64_t)&v23[v21[7]];
  uint64_t v31 = (uint64_t)&v10[*(int *)(v137 + 48)];
  sub_10001581C((uint64_t)v17, (uint64_t)v10, &qword_10099D8A0);
  sub_10001581C(v30, v31, &qword_10099D8A0);
  uint64_t v32 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v7 + 48);
  uint64_t v33 = v136;
  int v34 = v32(v10, 1LL, v136);
  uint64_t v132 = v30;
  if (v34 == 1)
  {
    sub_100015794((uint64_t)v17, &qword_10099D8A0);
    if (v32((_BYTE *)v31, 1LL, v33) == 1)
    {
      sub_100015794((uint64_t)v10, &qword_10099D8A0);
      uint64_t v36 = v134;
      uint64_t v35 = v135;
      goto LABEL_13;
    }
  }

  else
  {
    uint64_t v37 = v131;
    sub_10001581C((uint64_t)v10, (uint64_t)v131, &qword_10099D8A0);
    if (v32((_BYTE *)v31, 1LL, v33) != 1)
    {
      uint64_t v109 = v130;
      (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 32))(v130, v31, v33);
      uint64_t v110 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      int v129 = dispatch thunk of static Equatable.== infix(_:_:)(v37, v109, v33, v110);
      uint64_t v137 = v7;
      uint64_t v111 = v37;
      uint64_t v112 = *(void (**)(_BYTE *, uint64_t))(v7 + 8);
      v112(v109, v33);
      sub_100015794((uint64_t)v17, &qword_10099D8A0);
      uint64_t v38 = v33;
      v112(v111, v33);
      sub_100015794((uint64_t)v10, &qword_10099D8A0);
      uint64_t v36 = v134;
      uint64_t v35 = v135;
      if ((v129 & 1) != 0) {
        goto LABEL_13;
      }
      goto LABEL_9;
    }

    sub_100015794((uint64_t)v17, &qword_10099D8A0);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v37, v33);
  }

  uint64_t v38 = v33;
  uint64_t v137 = v7;
  sub_100015794((uint64_t)v10, (uint64_t *)&unk_1009B5370);
  uint64_t v36 = v134;
  uint64_t v35 = v135;
LABEL_9:
  uint64_t v39 = v133;
  sub_10001581C(v132, (uint64_t)v133, &qword_10099D8A0);
  uint64_t v40 = v32(v39, 1LL, v38);
  if ((_DWORD)v40 == 1)
  {
    sub_100015794((uint64_t)v39, &qword_10099D8A0);
    __int128 v143 = 0u;
    __int128 v144 = 0u;
    uint64_t v145 = 0LL;
  }

  else
  {
    uint64_t v41 = UUID.uuidString.getter(v40);
    *((void *)&v144 + 1) = &type metadata for String;
    uint64_t v145 = &protocol witness table for String;
    *(void *)&__int128 v143 = v41;
    *((void *)&v143 + 1) = v42;
    (*(void (**)(_BYTE *, uint64_t))(v137 + 8))(v39, v38);
  }

  uint64_t v43 = sub_100022898(0LL, (unint64_t *)&qword_10099D920, &OBJC_CLASS___CKRecord_ptr);
  CKRecordKeyValueSetting.subscript.setter(&v143, 0x65644970756F7267LL, 0xEF7265696669746ELL, v43);
LABEL_13:
  uint64_t v44 = v140;
  unint64_t v45 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v36 + 16);
  uint64_t v46 = v138;
  v45(v138, v140 + v21[8], v35);
  __int128 v47 = &v23[v21[8]];
  uint64_t v48 = sub_100007864( &qword_10099DA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  char v49 = dispatch thunk of static Equatable.== infix(_:_:)(v46, v47, v35, v48);
  (*(void (**)(_BYTE *, uint64_t))(v36 + 8))(v46, v35);
  uint64_t v50 = v139;
  uint64_t v51 = ObjectType;
  if ((v49 & 1) == 0)
  {
    *((void *)&v144 + 1) = v35;
    uint64_t v145 = &protocol witness table for Date;
    uint64_t v52 = sub_10000A7C8(&v143);
    v45(v52, (uint64_t)v47, v35);
    CKRecordKeyValueSetting.subscript.setter(&v143, 0x44676E6972696170LL, 0xEB00000000657461LL, v51);
  }

  uint64_t v53 = v21[9];
  uint64_t v54 = *(void *)(v44 + v53);
  unint64_t v55 = *(void *)(v44 + v53 + 8);
  uint64_t v56 = (uint64_t *)&v23[v53];
  uint64_t v57 = *v56;
  unint64_t v58 = v56[1];
  sub_10001736C(v54, v55);
  sub_10001736C(v57, v58);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v54, v55);
  char v60 = v59;
  sub_100016F9C(v57, v58);
  sub_100016F9C(v54, v55);
  if ((v60 & 1) == 0)
  {
    *((void *)&v144 + 1) = &type metadata for Data;
    uint64_t v145 = &protocol witness table for Data;
    *(void *)&__int128 v143 = v57;
    *((void *)&v143 + 1) = v58;
    sub_10001736C(v57, v58);
    CKRecordKeyValueSetting.subscript.setter(&v143, 0x6553646572616873LL, 0xEC00000074657263LL, v51);
  }

  uint64_t v61 = v21[12];
  uint64_t v62 = *(void *)(v44 + v61);
  unint64_t v63 = *(void *)(v44 + v61 + 8);
  uint64_t v64 = (uint64_t *)&v23[v61];
  uint64_t v65 = *v64;
  unint64_t v66 = v64[1];
  sub_10001736C(v62, v63);
  sub_10001736C(v65, v66);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v62, v63);
  char v68 = v67;
  sub_100016F9C(v65, v66);
  sub_100016F9C(v62, v63);
  if ((v68 & 1) == 0)
  {
    *((void *)&v144 + 1) = &type metadata for Data;
    uint64_t v145 = &protocol witness table for Data;
    *(void *)&__int128 v143 = v65;
    *((void *)&v143 + 1) = v66;
    sub_10001736C(v65, v66);
    CKRecordKeyValueSetting.subscript.setter(&v143, 0x4B65746176697270LL, 0xEA00000000007965LL, v51);
  }

  uint64_t v69 = v21[13];
  uint64_t v70 = *(void *)(v44 + v69);
  unint64_t v71 = *(void *)(v44 + v69 + 8);
  uint64_t v72 = (uint64_t *)&v23[v69];
  uint64_t v73 = *v72;
  unint64_t v74 = v72[1];
  sub_10001736C(v70, v71);
  sub_10001736C(v73, v74);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v70, v71);
  char v76 = v75;
  sub_100016F9C(v73, v74);
  sub_100016F9C(v70, v71);
  if ((v76 & 1) == 0)
  {
    *((void *)&v144 + 1) = &type metadata for Data;
    uint64_t v145 = &protocol witness table for Data;
    *(void *)&__int128 v143 = v73;
    *((void *)&v143 + 1) = v74;
    sub_10001736C(v73, v74);
    CKRecordKeyValueSetting.subscript.setter(&v143, 0x654B63696C627570LL, 0xE900000000000079LL, ObjectType);
  }

  uint64_t v77 = v21[14];
  uint64_t v78 = *(void *)(v44 + v77);
  uint64_t v79 = *(void *)(v44 + v77 + 8);
  uint64_t v80 = &v23[v77];
  uint64_t v82 = *v80;
  uint64_t v81 = v80[1];
  uint64_t v83 = ObjectType;
  if ((v78 != *v80 || v79 != v81)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v78, v79, *v80, v80[1], 0LL) & 1) == 0)
  {
    *((void *)&v144 + 1) = &type metadata for String;
    uint64_t v145 = &protocol witness table for String;
    *(void *)&__int128 v143 = v82;
    *((void *)&v143 + 1) = v81;
    swift_bridgeObjectRetain(v81);
    CKRecordKeyValueSetting.subscript.setter(&v143, 0x6C65646F6DLL, 0xE500000000000000LL, v83);
  }

  uint64_t v84 = v21[15];
  uint64_t v85 = *(void *)(v44 + v84);
  uint64_t v86 = *(void *)(v44 + v84 + 8);
  uint64_t v87 = &v23[v84];
  uint64_t v89 = *v87;
  uint64_t v88 = v87[1];
  if ((v85 != *v87 || v86 != v88)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v85, v86, *v87, v87[1], 0LL) & 1) == 0)
  {
    *((void *)&v144 + 1) = &type metadata for String;
    uint64_t v145 = &protocol witness table for String;
    *(void *)&__int128 v143 = v89;
    *((void *)&v143 + 1) = v88;
    swift_bridgeObjectRetain(v88);
    CKRecordKeyValueSetting.subscript.setter(&v143, 0x65566D6574737973LL, 0xED00006E6F697372LL, v83);
  }

  uint64_t v90 = v21[16];
  uint64_t v91 = *(void *)(v44 + v90);
  uint64_t v92 = *(void *)&v23[v90];
  if (v91 != v92)
  {
    *((void *)&v144 + 1) = &type metadata for Int;
    uint64_t v145 = &protocol witness table for Int;
    *(void *)&__int128 v143 = v92;
    CKRecordKeyValueSetting.subscript.setter(&v143, 0x6449726F646E6576LL, 0xE800000000000000LL, v83);
  }

  uint64_t v93 = v21[17];
  uint64_t v94 = *(void *)(v44 + v93);
  uint64_t v95 = *(void *)&v23[v93];
  if (v94 != v95)
  {
    *((void *)&v144 + 1) = &type metadata for Int;
    uint64_t v145 = &protocol witness table for Int;
    *(void *)&__int128 v143 = v95;
    CKRecordKeyValueSetting.subscript.setter(&v143, 0x49746375646F7270LL, 0xE900000000000064LL, v83);
  }

  uint64_t v96 = v21[18];
  int v97 = *(unsigned __int8 *)(v44 + v96);
  uint64_t v98 = v23[v96];
  if (v97 == 3)
  {
    if ((_DWORD)v98 == 3) {
      goto LABEL_42;
    }
    goto LABEL_40;
  }

  if ((_DWORD)v98 == 3 || v97 != (_DWORD)v98)
  {
    if ((_DWORD)v98 == 3)
    {
      uint64_t v145 = 0LL;
      __int128 v143 = 0u;
      __int128 v144 = 0u;
LABEL_41:
      CKRecordKeyValueSetting.subscript.setter(&v143, 0x65646F4D74736F6CLL, 0xEE00737574617453LL, v83);
      goto LABEL_42;
    }

uint64_t sub_1002B6684(id *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = (int *)type metadata accessor for BeaconNamingRecord(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(a2, (uint64_t)v12, v13);
  id v14 = [*a1 encryptedValues];
  uint64_t ObjectType = swift_getObjectType(v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, v3 + v10[6], v6);
  uint64_t v16 = &v12[v10[6]];
  uint64_t v17 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  char v18 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v16, v6, v17);
  uint64_t v19 = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((v18 & 1) == 0)
  {
    uint64_t v20 = UUID.uuidString.getter(v19);
    *((void *)&v41 + 1) = &type metadata for String;
    uint64_t v42 = &protocol witness table for String;
    *(void *)&__int128 v40 = v20;
    *((void *)&v40 + 1) = v21;
    CKRecordKeyValueSetting.subscript.setter(&v40, 0xD000000000000010LL, 0x800000010084E610LL, ObjectType);
  }

  uint64_t v22 = v10[7];
  uint64_t v23 = *(void *)(v3 + v22);
  uint64_t v24 = *(void *)&v12[v22];
  if (v23 != v24)
  {
    *((void *)&v41 + 1) = &type metadata for Int;
    uint64_t v42 = &protocol witness table for Int;
    *(void *)&__int128 v40 = v24;
    CKRecordKeyValueSetting.subscript.setter(&v40, 0x6449656C6F72LL, 0xE600000000000000LL, ObjectType);
  }

  uint64_t v25 = v10[8];
  uint64_t v26 = *(void *)(v3 + v25);
  uint64_t v27 = *(void *)(v3 + v25 + 8);
  uint64_t v28 = &v12[v25];
  uint64_t v30 = *(void *)v28;
  uint64_t v29 = *((void *)v28 + 1);
  BOOL v31 = v26 == *(void *)v28 && v27 == v29;
  if (!v31
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, *(void *)v28, *((void *)v28 + 1), 0LL) & 1) == 0)
  {
    *((void *)&v41 + 1) = &type metadata for String;
    uint64_t v42 = &protocol witness table for String;
    *(void *)&__int128 v40 = v30;
    *((void *)&v40 + 1) = v29;
    swift_bridgeObjectRetain(v29);
    CKRecordKeyValueSetting.subscript.setter(&v40, 1701667182LL, 0xE400000000000000LL, ObjectType);
  }

  uint64_t v32 = v10[9];
  uint64_t v33 = (void *)(v3 + v32);
  uint64_t v34 = *(void *)(v3 + v32 + 8);
  uint64_t v35 = &v12[v32];
  uint64_t v37 = *(void *)v35;
  uint64_t v36 = *((void *)v35 + 1);
  if (v34)
  {
    if (!v36)
    {
      uint64_t v42 = 0LL;
      __int128 v40 = 0u;
      __int128 v41 = 0u;
      goto LABEL_22;
    }

    BOOL v38 = *v33 == v37 && v34 == v36;
    if (v38
      || (_stringCompareWithSmolCheck(_:_:expecting:)(*v33, v34, *(void *)v35, *((void *)v35 + 1), 0LL) & 1) != 0)
    {
      goto LABEL_18;
    }
  }

  else if (!v36)
  {
LABEL_18:
    sub_100018C68((uint64_t)v12, type metadata accessor for BeaconNamingRecord);
    return swift_unknownObjectRelease(v14);
  }

  *((void *)&v41 + 1) = &type metadata for String;
  uint64_t v42 = &protocol witness table for String;
  *(void *)&__int128 v40 = v37;
  *((void *)&v40 + 1) = v36;
LABEL_22:
  swift_bridgeObjectRetain(v36);
  CKRecordKeyValueSetting.subscript.setter(&v40, 0x696A6F6D65LL, 0xE500000000000000LL, ObjectType);
  swift_unknownObjectRelease(v14);
  return sub_100018C68((uint64_t)v12, type metadata accessor for BeaconNamingRecord);
}

void sub_1002B69B0(uint64_t a1, uint64_t a2)
{
}

void sub_1002B69C4(uint64_t a1, uint64_t a2, unint64_t *a3, void *a4)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);
}

uint64_t sub_1002B6A20@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 96))(v3, v4);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1002B6A70(id *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v140 = sub_100004AEC((uint64_t *)&unk_1009B5370);
  __chkstk_darwin(v140);
  uint64_t v133 = (char *)&v124 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v131 = (uint64_t)&v124 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v129 = (uint64_t)&v124 - v11;
  __chkstk_darwin(v10);
  uint64_t v143 = (uint64_t)&v124 - v12;
  uint64_t v13 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
  uint64_t v137 = *(void *)(v13 - 8);
  uint64_t v138 = v13;
  __chkstk_darwin(v13);
  int v125 = (_DWORD *)((char *)&v124 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v136 = sub_100004AEC((uint64_t *)&unk_1009BEF60);
  __chkstk_darwin(v136);
  id v139 = (char *)&v124 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v130 = sub_100004AEC(&qword_1009AE600);
  uint64_t v16 = __chkstk_darwin(v130);
  uint64_t v128 = (uint64_t)&v124 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v142 = (uint64_t)&v124 - v18;
  uint64_t v19 = type metadata accessor for Date(0LL);
  uint64_t v135 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v134 = (char *)&v124 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for UUID(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v124 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = (int *)type metadata accessor for SharedBeaconRecord(0LL);
  __chkstk_darwin(v25);
  uint64_t v27 = (char *)&v124 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(a2, (uint64_t)v27, v28);
  id v146 = [*a1 encryptedValues];
  uint64_t ObjectType = swift_getObjectType(v146);
  (*(void (**)(char *, uint64_t, uint64_t))(v22 + 16))(v24, v3 + v25[6], v21);
  uint64_t v29 = &v27[v25[6]];
  uint64_t v126 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  LOBYTE(a1) = dispatch thunk of static Equatable.== infix(_:_:)(v24, v29, v21, v126);
  uint64_t v141 = v22;
  uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
  unint64_t v127 = v24;
  uint64_t v144 = v21;
  uint64_t v132 = v30;
  uint64_t v31 = ((uint64_t (*)(char *, uint64_t))v30)(v24, v21);
  if ((a1 & 1) == 0)
  {
    uint64_t v32 = UUID.uuidString.getter(v31);
    *((void *)&v148 + 1) = &type metadata for String;
    uint64_t v149 = &protocol witness table for String;
    *(void *)&__int128 v147 = v32;
    *((void *)&v147 + 1) = v33;
    CKRecordKeyValueSetting.subscript.setter(&v147, 0x6564496572616873LL, 0xEF7265696669746ELL, ObjectType);
  }

  uint64_t v34 = v25[7];
  uint64_t v35 = v3 + v34;
  int v36 = *(unsigned __int8 *)(v3 + v34);
  uint64_t v37 = &v27[v34];
  uint64_t v39 = *((void *)v37 + 1);
  uint64_t v38 = *((void *)v37 + 2);
  if (v36 != *v37
    || ((uint64_t v40 = *(void *)(v35 + 8), v41 = *(void *)(v35 + 16), v40 != v39) || v41 != v38)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, *((void *)v37 + 1), *((void *)v37 + 2), 0LL) & 1) == 0)
  {
    *((void *)&v148 + 1) = &type metadata for String;
    uint64_t v149 = &protocol witness table for String;
    *(void *)&__int128 v147 = v39;
    *((void *)&v147 + 1) = v38;
    swift_bridgeObjectRetain(v38);
    CKRecordKeyValueSetting.subscript.setter(&v147, 0x6E614872656E776FLL, 0xEB00000000656C64LL, ObjectType);
  }

  uint64_t v42 = v25[8];
  uint64_t v43 = *(void *)(v3 + v42);
  uint64_t v44 = *(void *)(v3 + v42 + 8);
  unint64_t v45 = &v27[v42];
  uint64_t v47 = *(void *)v45;
  uint64_t v46 = *((void *)v45 + 1);
  uint64_t v48 = (uint64_t)v139;
  if ((v43 != *(void *)v45 || v44 != v46)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v43, v44, *(void *)v45, *((void *)v45 + 1), 0LL) & 1) == 0)
  {
    *((void *)&v148 + 1) = &type metadata for String;
    uint64_t v149 = &protocol witness table for String;
    *(void *)&__int128 v147 = v47;
    *((void *)&v147 + 1) = v46;
    swift_bridgeObjectRetain(v46);
    CKRecordKeyValueSetting.subscript.setter(&v147, 0xD000000000000015LL, 0x800000010084DA30LL, ObjectType);
  }

  uint64_t v49 = v25[9];
  uint64_t v50 = *(void *)(v3 + v49);
  uint64_t v51 = *(void *)(v3 + v49 + 8);
  uint64_t v52 = &v27[v49];
  uint64_t v54 = *(void *)v52;
  uint64_t v53 = *((void *)v52 + 1);
  if ((v50 != *(void *)v52 || v51 != v53)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v50, v51, *(void *)v52, *((void *)v52 + 1), 0LL) & 1) == 0)
  {
    *((void *)&v148 + 1) = &type metadata for String;
    uint64_t v149 = &protocol witness table for String;
    *(void *)&__int128 v147 = v54;
    *((void *)&v147 + 1) = v53;
    swift_bridgeObjectRetain(v53);
    CKRecordKeyValueSetting.subscript.setter(&v147, 0x6C65646F6DLL, 0xE500000000000000LL, ObjectType);
  }

  uint64_t v55 = v25[10];
  uint64_t v56 = *(void *)(v3 + v55);
  uint64_t v57 = *(void *)(v3 + v55 + 8);
  unint64_t v58 = &v27[v55];
  uint64_t v60 = *(void *)v58;
  uint64_t v59 = *((void *)v58 + 1);
  if ((v56 != *(void *)v58 || v57 != v59)
    && (_stringCompareWithSmolCheck(_:_:expecting:)(v56, v57, *(void *)v58, *((void *)v58 + 1), 0LL) & 1) == 0)
  {
    *((void *)&v148 + 1) = &type metadata for String;
    uint64_t v149 = &protocol witness table for String;
    *(void *)&__int128 v147 = v60;
    *((void *)&v147 + 1) = v59;
    swift_bridgeObjectRetain(v59);
    CKRecordKeyValueSetting.subscript.setter(&v147, 0x65566D6574737973LL, 0xED00006E6F697372LL, ObjectType);
  }

  uint64_t v61 = v25[11];
  uint64_t v62 = *(void *)(v3 + v61);
  uint64_t v63 = *(void *)&v27[v61];
  if (v62 != v63)
  {
    *((void *)&v148 + 1) = &type metadata for Int;
    uint64_t v149 = &protocol witness table for Int;
    *(void *)&__int128 v147 = v63;
    CKRecordKeyValueSetting.subscript.setter(&v147, 0x6449726F646E6576LL, 0xE800000000000000LL, ObjectType);
  }

  uint64_t v64 = v25[12];
  uint64_t v65 = *(void *)(v3 + v64);
  uint64_t v66 = *(void *)&v27[v64];
  if (v65 != v66)
  {
    *((void *)&v148 + 1) = &type metadata for Int;
    uint64_t v149 = &protocol witness table for Int;
    *(void *)&__int128 v147 = v66;
    CKRecordKeyValueSetting.subscript.setter(&v147, 0x49746375646F7270LL, 0xE900000000000064LL, ObjectType);
  }

  uint64_t v67 = v25[15];
  uint64_t v68 = *(void *)(v3 + v67);
  uint64_t v69 = *(void *)&v27[v67];
  if (v68 != v69)
  {
    *((void *)&v148 + 1) = &type metadata for Int;
    uint64_t v149 = &protocol witness table for Int;
    *(void *)&__int128 v147 = v69;
    CKRecordKeyValueSetting.subscript.setter(&v147, 1701605234LL, 0xE400000000000000LL, ObjectType);
  }

  uint64_t v70 = v25[13];
  int v71 = *(unsigned __int8 *)(v3 + v70);
  int v72 = v27[v70];
  if (v71 != v72)
  {
    *((void *)&v148 + 1) = &type metadata for Bool;
    uint64_t v149 = &protocol witness table for Bool;
    LOBYTE(v147) = v72;
    CKRecordKeyValueSetting.subscript.setter(&v147, 0x6465747065636361LL, 0xE800000000000000LL, ObjectType);
  }

  uint64_t v73 = v25[16];
  uint64_t v74 = qword_1007F9090[*(char *)(v3 + v73)];
  uint64_t v75 = qword_1007F9090[v27[v73]];
  if (v74 != v75)
  {
    *((void *)&v148 + 1) = &type metadata for Int;
    uint64_t v149 = &protocol witness table for Int;
    *(void *)&__int128 v147 = v75;
    CKRecordKeyValueSetting.subscript.setter(&v147, 0x7079546572616873LL, 0xE900000000000065LL, ObjectType);
  }

  uint64_t v76 = v25[17];
  uint64_t v77 = *(void *)(v3 + v76);
  uint64_t v78 = *(void *)&v27[v76];
  if (v77 != v78)
  {
    *((void *)&v148 + 1) = &type metadata for UInt64;
    uint64_t v149 = &protocol witness table for UInt64;
    *(void *)&__int128 v147 = v78;
    CKRecordKeyValueSetting.subscript.setter(&v147, 0x7369747265766461LL, 0xEF7865646E496465LL, ObjectType);
  }

  uint64_t v80 = v134;
  uint64_t v79 = v135;
  uint64_t v81 = *(void (**)(char *, uint64_t, uint64_t))(v135 + 16);
  v81(v134, v3 + v25[18], v19);
  uint64_t v82 = &v27[v25[18]];
  uint64_t v83 = sub_100007864( &qword_10099DA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  char v84 = dispatch thunk of static Equatable.== infix(_:_:)(v80, v82, v19, v83);
  (*(void (**)(char *, uint64_t))(v79 + 8))(v80, v19);
  if ((v84 & 1) == 0)
  {
    *((void *)&v148 + 1) = v19;
    uint64_t v149 = &protocol witness table for Date;
    uint64_t v85 = (char *)sub_10000A7C8(&v147);
    v81(v85, (uint64_t)v82, v19);
    CKRecordKeyValueSetting.subscript.setter(&v147, 0x7461446572616873LL, 0xE900000000000065LL, ObjectType);
  }

  uint64_t v86 = v142;
  sub_10001581C(v3 + v25[20], v142, &qword_1009AE600);
  uint64_t v87 = (uint64_t)&v27[v25[20]];
  uint64_t v88 = v48 + *(int *)(v136 + 48);
  sub_10001581C(v86, v48, &qword_1009AE600);
  sub_10001581C(v87, v88, &qword_1009AE600);
  uint64_t v89 = v138;
  uint64_t v90 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v137 + 48);
  BOOL v91 = v90(v48, 1LL, v138) == 1;
  uint64_t v92 = v86;
  uint64_t v93 = v143;
  if (v91)
  {
    sub_100015794(v92, &qword_1009AE600);
    if (v90(v88, 1LL, v89) == 1)
    {
      sub_100015794(v48, &qword_1009AE600);
      uint64_t v94 = (uint64_t)v133;
      goto LABEL_43;
    }

    goto LABEL_40;
  }

  uint64_t v95 = v128;
  sub_10001581C(v48, v128, &qword_1009AE600);
  if (v90(v88, 1LL, v89) == 1)
  {
    sub_100015794(v142, &qword_1009AE600);
    sub_100018C68(v95, type metadata accessor for SharedBeaconRecord.PropertyListContent);
LABEL_40:
    sub_100015794(v48, (uint64_t *)&unk_1009BEF60);
    uint64_t v94 = (uint64_t)v133;
LABEL_41:
    uint64_t v96 = type metadata accessor for PropertyListEncoder(0LL);
    uint64_t v97 = swift_allocObject(v96, *(unsigned int *)(v96 + 48), *(unsigned __int16 *)(v96 + 52));
    uint64_t v98 = PropertyListEncoder.init()(v97);
    unint64_t v99 = sub_1002DBBAC();
    uint64_t v103 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(v87, v130, v99);
    unint64_t v105 = v104;
    swift_release(v98);
    *((void *)&v148 + 1) = &type metadata for Data;
    uint64_t v149 = &protocol witness table for Data;
    *(void *)&__int128 v147 = v103;
    *((void *)&v147 + 1) = v105;
    sub_10001736C(v103, v105);
    CKRecordKeyValueSetting.subscript.setter(&v147, 1701667182LL, 0xE400000000000000LL, ObjectType);
    sub_100016F9C(v103, v105);
    uint64_t v93 = v143;
    goto LABEL_43;
  }

  int v100 = (_DWORD *)v95;
  uint64_t v101 = v125;
  sub_10002218C(v88, (uint64_t)v125, type metadata accessor for SharedBeaconRecord.PropertyListContent);
  BOOL v102 = sub_100767BF0(v100, v101);
  sub_100018C68((uint64_t)v101, type metadata accessor for SharedBeaconRecord.PropertyListContent);
  sub_100015794(v142, &qword_1009AE600);
  sub_100018C68((uint64_t)v100, type metadata accessor for SharedBeaconRecord.PropertyListContent);
  uint64_t v93 = v143;
  sub_100015794(v48, &qword_1009AE600);
  uint64_t v94 = (uint64_t)v133;
  if (!v102) {
    goto LABEL_41;
  }
LABEL_43:
  sub_10001581C(v3 + v25[19], v93, &qword_10099D8A0);
  uint64_t v106 = (uint64_t)&v27[v25[19]];
  uint64_t v107 = v94 + *(int *)(v140 + 48);
  sub_10001581C(v93, v94, &qword_10099D8A0);
  sub_10001581C(v106, v107, &qword_10099D8A0);
  uint64_t v108 = v93;
  uint64_t v109 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v141 + 48);
  if (v109(v94, 1LL, v144) == 1)
  {
    sub_100015794(v108, &qword_10099D8A0);
    if (v109(v107, 1LL, v144) == 1)
    {
      sub_100015794(v94, &qword_10099D8A0);
      goto LABEL_53;
    }
  }

  else
  {
    uint64_t v110 = v129;
    sub_10001581C(v94, v129, &qword_10099D8A0);
    if (v109(v107, 1LL, v144) != 1)
    {
      uint64_t v120 = v127;
      uint64_t v121 = v107;
      uint64_t v122 = v144;
      (*(void (**)(char *, uint64_t, uint64_t))(v141 + 32))(v127, v121, v144);
      LODWORD(v142) = dispatch thunk of static Equatable.== infix(_:_:)(v110, v120, v122, v126);
      char v123 = v132;
      v132((uint64_t)v120, v122);
      sub_100015794(v143, &qword_10099D8A0);
      v123(v110, v122);
      sub_100015794(v94, &qword_10099D8A0);
      if ((v142 & 1) != 0) {
        goto LABEL_53;
      }
      goto LABEL_49;
    }

    sub_100015794(v143, &qword_10099D8A0);
    v132(v110, v144);
  }

  sub_100015794(v94, (uint64_t *)&unk_1009B5370);
LABEL_49:
  uint64_t v111 = v131;
  sub_10001581C(v106, v131, &qword_10099D8A0);
  uint64_t v112 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v109)(v111, 1LL, v144);
  if ((_DWORD)v112 == 1)
  {
    sub_100015794(v111, &qword_10099D8A0);
    __int128 v147 = 0u;
    __int128 v148 = 0u;
    uint64_t v149 = 0LL;
  }

  else
  {
    uint64_t v113 = UUID.uuidString.getter(v112);
    *((void *)&v148 + 1) = &type metadata for String;
    uint64_t v149 = &protocol witness table for String;
    *(void *)&__int128 v147 = v113;
    *((void *)&v147 + 1) = v114;
    v132(v111, v144);
  }

  CKRecordKeyValueSetting.subscript.setter(&v147, 0x65644970756F7267LL, 0xEF7265696669746ELL, ObjectType);
LABEL_53:
  uint64_t v115 = v25[14];
  int v116 = *(unsigned __int8 *)(v3 + v115);
  uint64_t v117 = v27[v115];
  if (v116 == 3)
  {
    if ((_DWORD)v117 != 3) {
      goto LABEL_61;
    }
LABEL_58:
    sub_100018C68((uint64_t)v27, type metadata accessor for SharedBeaconRecord);
    return swift_unknownObjectRelease(v146);
  }

  if ((_DWORD)v117 != 3 && v116 == (_DWORD)v117) {
    goto LABEL_58;
  }
  if ((_DWORD)v117 != 3)
  {
LABEL_61:
    *((void *)&v148 + 1) = &type metadata for Int;
    uint64_t v149 = &protocol witness table for Int;
    *(void *)&__int128 v147 = v117;
    goto LABEL_62;
  }

  uint64_t v149 = 0LL;
  __int128 v147 = 0u;
  __int128 v148 = 0u;
LABEL_62:
  id v119 = v146;
  CKRecordKeyValueSetting.subscript.setter(&v147, 0x65646F4D74736F6CLL, 0xEE00737574617453LL, ObjectType);
  swift_unknownObjectRelease(v119);
  return sub_100018C68((uint64_t)v27, type metadata accessor for SharedBeaconRecord);
}

Swift::Int sub_1002B7840(void *a1)
{
  uint64_t v2 = a1;
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_137;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v78 = 0LL;
      uint64_t v79 = *v2;
      for (uint64_t i = 1LL; i != v3; ++i)
      {
        unint64_t v81 = *(void *)(v79 + 8 * i);
        uint64_t v82 = v78;
        do
        {
          unint64_t v83 = *(void *)(v79 + v82);
          if (v81 >= v83) {
            break;
          }
          if (!v79) {
            goto LABEL_141;
          }
          *(void *)(v79 + v82 + 8) = v83;
          *(void *)(v79 + v82) = v81;
          v82 -= 8LL;
        }

        while (v82 != -8);
        v78 += 8LL;
      }
    }

    return result;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_146;
  }
  Swift::Int v95 = result;
  Swift::Int v96 = v3;
  if (v3 < 2)
  {
    uint64_t v8 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      uint64_t v11 = (char *)_swiftEmptyArrayStorage;
LABEL_103:
      uint64_t v94 = v8;
      if (v12 >= 2)
      {
        uint64_t v84 = *v2;
        do
        {
          unint64_t v85 = v12 - 2;
          if (v12 < 2) {
            goto LABEL_132;
          }
          if (!v84) {
            goto LABEL_145;
          }
          uint64_t v86 = v11;
          uint64_t v87 = v11 + 32;
          uint64_t v88 = *(void *)&v11[16 * v85 + 32];
          uint64_t v89 = *(void *)&v11[16 * v12 + 24];
          sub_1002B8254( (char *)(v84 + 8 * v88),  (char *)(v84 + 8LL * *(void *)&v87[16 * v12 - 16]),  v84 + 8 * v89,  __dst);
          if (v1) {
            break;
          }
          if (v89 < v88) {
            goto LABEL_133;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v86) & 1) == 0) {
            uint64_t v86 = sub_1003CBA90((uint64_t)v86);
          }
          if (v85 >= *((void *)v86 + 2)) {
            goto LABEL_134;
          }
          uint64_t v90 = &v86[16 * v85 + 32];
          *(void *)uint64_t v90 = v88;
          *((void *)v90 + 1) = v89;
          unint64_t v91 = *((void *)v86 + 2);
          if (v12 > v91) {
            goto LABEL_135;
          }
          memmove(&v86[16 * v12 + 16], &v86[16 * v12 + 32], 16 * (v91 - v12));
          uint64_t v11 = v86;
          *((void *)v86 + 2) = v91 - 1;
          unint64_t v12 = v91 - 1;
        }

        while (v91 > 2);
      }

LABEL_114:
      swift_bridgeObjectRelease();
      v94[2] = 0LL;
      return swift_bridgeObjectRelease();
    }

    uint64_t v94 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v6 = v5 >> 1;
    uint64_t v7 = static Array._allocateBufferUninitialized(minimumCapacity:)(v5 >> 1, &type metadata for UInt64);
    *(void *)(v7 + swift_weakDestroy(v0 + 16) = v6;
    Swift::Int v3 = v96;
    uint64_t v94 = (void *)v7;
    __dst = (char *)(v7 + 32);
  }

  Swift::Int v9 = 0LL;
  uint64_t v10 = *v2;
  uint64_t v92 = v2;
  uint64_t v93 = *v2 - 8LL;
  uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  uint64_t v97 = *v2;
  while (1)
  {
    Swift::Int v13 = v9++;
    if (v9 < v3)
    {
      unint64_t v14 = *(void *)(v10 + 8 * v9);
      unint64_t v15 = *(void *)(v10 + 8 * v13);
      Swift::Int v9 = v13 + 2;
      if (v13 + 2 < v3)
      {
        unint64_t v16 = v14;
        while (1)
        {
          unint64_t v17 = *(void *)(v10 + 8 * v9);
          if (v14 < v15 == v17 >= v16) {
            break;
          }
          ++v9;
          unint64_t v16 = v17;
          if (v3 == v9)
          {
            Swift::Int v9 = v3;
            break;
          }
        }
      }

      if (v14 < v15)
      {
        if (v9 < v13) {
          goto LABEL_138;
        }
        if (v13 < v9)
        {
          Swift::Int v18 = v9 - 1;
          Swift::Int v19 = v13;
          do
          {
            if (v19 != v18)
            {
              if (!v10) {
                goto LABEL_144;
              }
              uint64_t v20 = *(void *)(v10 + 8 * v19);
              *(void *)(v10 + 8 * v19) = *(void *)(v10 + 8 * v18);
              *(void *)(v10 + 8 * v18) = v20;
            }

            BOOL v59 = ++v19 < v18--;
          }

          while (v59);
        }
      }
    }

    if (v9 >= v3) {
      goto LABEL_47;
    }
    if (__OFSUB__(v9, v13)) {
      goto LABEL_136;
    }
    if (v9 - v13 >= v95) {
      goto LABEL_47;
    }
    Swift::Int v21 = v13 + v95;
    if (__OFADD__(v13, v95)) {
      goto LABEL_139;
    }
    if (v21 >= v3) {
      Swift::Int v21 = v3;
    }
    if (v21 < v13) {
      break;
    }
    if (v9 != v21)
    {
      uint64_t v22 = (unint64_t *)(v93 + 8 * v9);
      do
      {
        unint64_t v23 = *(void *)(v10 + 8 * v9);
        Swift::Int v24 = v13;
        uint64_t v25 = v22;
        do
        {
          unint64_t v26 = *v25;
          if (v23 >= *v25) {
            break;
          }
          if (!v10) {
            goto LABEL_142;
          }
          *uint64_t v25 = v23;
          v25[1] = v26;
          --v25;
          ++v24;
        }

        while (v9 != v24);
        ++v9;
        ++v22;
      }

      while (v9 != v21);
      Swift::Int v9 = v21;
    }

uint64_t sub_1002B7EC8(char *__src, char *a2, unint64_t a3, char *__dst, uint64_t a5)
{
  uint64_t v6 = __dst;
  uint64_t v8 = a2;
  int64_t v10 = a2 - __src;
  int64_t v11 = (a2 - __src) / 40;
  uint64_t v12 = a3 - (void)a2;
  uint64_t v13 = (uint64_t)(a3 - (void)a2) / 40;
  uint64_t v41 = __src;
  uint64_t v40 = __dst;
  if (v11 >= v13)
  {
    if (v12 >= -39)
    {
      if (__dst != a2 || &a2[40 * v13] <= __dst) {
        memmove(__dst, a2, 40 * v13);
      }
      Swift::Int v24 = &v6[40 * v13];
      uint64_t v39 = v24;
      uint64_t v41 = v8;
      if (__src >= v8 || v12 < 40) {
        goto LABEL_44;
      }
      unint64_t v25 = a3 - 40;
      while (1)
      {
        sub_100013044((uint64_t)(v24 - 40), (uint64_t)v38);
        unint64_t v28 = v8 - 40;
        sub_100013044((uint64_t)(v8 - 40), (uint64_t)v37);
        char v29 = sub_1002AAA24(v38, v37, a5);
        if (v5) {
          goto LABEL_43;
        }
        char v30 = v29;
        unint64_t v31 = (char *)(v25 + 40);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
        if ((v30 & 1) != 0)
        {
          if (v31 != v8 || v25 >= (unint64_t)v8)
          {
            __int128 v26 = *(_OWORD *)v28;
            __int128 v27 = *(_OWORD *)(v8 - 24);
            *(void *)(v25 + 32) = *((void *)v8 - 1);
            *(_OWORD *)unint64_t v25 = v26;
            *(_OWORD *)(v25 + swift_weakDestroy(v0 + 16) = v27;
          }

          v41 -= 40;
          Swift::Int v24 = v39;
          if (v39 <= v6) {
            goto LABEL_44;
          }
        }

        else
        {
          uint64_t v32 = v39;
          Swift::Int v24 = v39 - 40;
          v39 -= 40;
          if (v31 < v32 || v25 >= (unint64_t)v32 || v31 != v32)
          {
            __int128 v33 = *(_OWORD *)v24;
            __int128 v34 = *(_OWORD *)(v32 - 24);
            *(void *)(v25 + 32) = *((void *)v32 - 1);
            *(_OWORD *)unint64_t v25 = v33;
            *(_OWORD *)(v25 + swift_weakDestroy(v0 + 16) = v34;
          }

          unint64_t v28 = v8;
          if (v24 <= v6) {
            goto LABEL_44;
          }
        }

        v25 -= 40LL;
        uint64_t v8 = v28;
        if (v28 <= __src) {
          goto LABEL_44;
        }
      }
    }
  }

  else if (v10 >= -39)
  {
    if (__dst != __src || &__src[40 * v11] <= __dst) {
      memmove(__dst, __src, 40 * v11);
    }
    unint64_t v14 = (unint64_t)&v6[40 * v11];
    uint64_t v39 = (char *)v14;
    while (1)
    {
      sub_100013044((uint64_t)v8, (uint64_t)v38);
      sub_100013044((uint64_t)v6, (uint64_t)v37);
      char v15 = sub_1002AAA24(v38, v37, a5);
      if (v5) {
        break;
      }
      char v16 = v15;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
      unint64_t v17 = v41;
      if ((v16 & 1) != 0)
      {
        unint64_t v18 = (unint64_t)(v8 + 40);
        if (v41 >= v8 && (unint64_t)v41 < v18 && v41 == v8)
        {
          unint64_t v17 = v8;
        }

        else
        {
          __int128 v19 = *(_OWORD *)v8;
          __int128 v20 = *((_OWORD *)v8 + 1);
          *((void *)v41 + 4) = *((void *)v8 + 4);
          *unint64_t v17 = v19;
          v17[1] = v20;
        }
      }

      else
      {
        Swift::Int v21 = v40 + 40;
        if (v41 != v40 || v41 >= v21)
        {
          __int128 v22 = *(_OWORD *)v40;
          __int128 v23 = *((_OWORD *)v40 + 1);
          *((void *)v41 + 4) = *((void *)v40 + 4);
          *unint64_t v17 = v22;
          v17[1] = v23;
        }

        uint64_t v40 = v21;
        unint64_t v18 = (unint64_t)v8;
      }

      uint64_t v41 = (char *)v17 + 40;
      uint64_t v6 = v40;
      if ((unint64_t)v40 < v14)
      {
        uint64_t v8 = (char *)v18;
        if (v18 < a3) {
          continue;
        }
      }

      goto LABEL_44;
    }

uint64_t sub_1002B8254(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  uint64_t v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  uint64_t v13 = v12 >> 3;
  Swift::Int v24 = __src;
  __int128 v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      char v16 = &v4[8 * v13];
      __int128 v22 = v16;
      Swift::Int v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        unint64_t v17 = (unint64_t *)(a3 - 8);
        while (1)
        {
          unint64_t v18 = (char *)(v17 + 1);
          __int128 v19 = v6 - 8;
          unint64_t v20 = *((void *)v6 - 1);
          if (*((void *)v16 - 1) >= v20)
          {
            __int128 v22 = v16 - 8;
            v16 -= 8;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }

          else
          {
            Swift::Int v24 = v6 - 8;
            v6 -= 8;
            if (v19 <= v7) {
              goto LABEL_42;
            }
          }

          --v17;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }

      goto LABEL_42;
    }
  }

  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    unint64_t v14 = &v4[8 * v10];
    __int128 v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(void *)v6 >= *(void *)v4)
        {
          if (v7 != v4) {
            *(void *)uint64_t v7 = *(void *)v4;
          }
          v4 += 8;
          __int128 v23 = v4;
          char v15 = v6;
        }

        else
        {
          char v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(void *)uint64_t v7 = *(void *)v6;
          }
        }

        v7 += 8;
        if (v4 >= v14) {
          break;
        }
        uint64_t v6 = v15;
      }

      while ((unint64_t)v15 < a3);
      Swift::Int v24 = v7;
    }

void sub_1002B84C0(uint64_t a1)
{
  __asm { BR              X11 }

uint64_t sub_1002B8524@<X0>(uint64_t a1@<X8>)
{
  uint64_t v8 = v2;
  LOWORD(v9) = a1;
  BYTE2(v9) = BYTE2(a1);
  HIBYTE(v9) = BYTE3(a1);
  unsigned __int8 v10 = BYTE4(a1);
  unsigned __int8 v11 = BYTE5(a1);
  unsigned __int8 v12 = BYTE6(a1);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t *, uint64_t, uint64_t))CCECCryptorExportKey)(v5, &v8, v4, v3);
  unint64_t v7 = v9 | ((unint64_t)v10 << 32) | ((unint64_t)v11 << 40) | ((unint64_t)v12 << 48);
  *uint64_t v1 = v8;
  v1[1] = v7;
  return result;
}

uint64_t sub_1002B87DC(uint64_t isStackAllocationSafe)
{
  uint64_t v2 = isStackAllocationSafe;
  char v3 = *(_BYTE *)(isStackAllocationSafe + 32);
  unsigned int v4 = v3 & 0x3F;
  unint64_t v5 = (1LL << v3) + 63;
  uint64_t v6 = v5 >> 6;
  size_t v7 = 8 * (v5 >> 6);
  if (v4 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v5 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v14 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0LL), v7);
    sub_1002B8938((unint64_t *)((char *)&v14 - ((v7 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v6, v2);
    uint64_t v9 = v8;
    uint64_t v10 = swift_release();
    if (v1) {
      swift_willThrow(v10);
    }
  }

  else
  {
    unsigned __int8 v11 = (void *)swift_slowAlloc(v7, -1LL);
    bzero(v11, v7);
    sub_1002B8938((unint64_t *)v11, v6, v2);
    uint64_t v9 = v12;
    swift_release();
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  return v9;
}

void sub_1002B8938(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v20 = 0LL;
  int64_t v4 = 0LL;
  uint64_t v5 = a3 + 56;
  uint64_t v6 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v7 = -1LL;
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  unint64_t v8 = v7 & *(void *)(a3 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  while (1)
  {
    if (v8)
    {
      unint64_t v10 = __clz(__rbit64(v8));
      v8 &= v8 - 1;
      unint64_t v11 = v10 | (v4 << 6);
      goto LABEL_5;
    }

    int64_t v14 = v4 + 1;
    if (__OFADD__(v4, 1LL))
    {
      __break(1u);
      goto LABEL_26;
    }

    if (v14 >= v9) {
      goto LABEL_24;
    }
    unint64_t v15 = *(void *)(v5 + 8 * v14);
    ++v4;
    if (!v15)
    {
      int64_t v4 = v14 + 1;
      if (v14 + 1 >= v9) {
        goto LABEL_24;
      }
      unint64_t v15 = *(void *)(v5 + 8 * v4);
      if (!v15)
      {
        int64_t v4 = v14 + 2;
        if (v14 + 2 >= v9) {
          goto LABEL_24;
        }
        unint64_t v15 = *(void *)(v5 + 8 * v4);
        if (!v15) {
          break;
        }
      }
    }

uint64_t sub_1002B8AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A7D98);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v69 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009AA870);
  __chkstk_darwin(v7);
  int64_t v9 = (char *)&v69 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for BeaconProductInfoRecord(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  id v13 = (char *)&v69 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v14);
  int64_t v16 = (char *)&v69 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(a1, (uint64_t)v16, v17);
  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  v73[3] = My;
  v73[4] = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  __int128 v19 = sub_10000A7C8(v73);
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v19,  enum case for Feature.FindMy.separationAlerts(_:),  My);
  LOBYTE(My) = isFeatureEnabled(_:)(v73);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v73);
  if ((My & 1) != 0)
  {
    int v71 = (int *)v10;
    uint64_t v72 = a2;
    unint64_t v70 = v6;
    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
    uint64_t v20 = v73[0];
    sub_1005D3A0C();
    __int128 v22 = v21;
    uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeDurian);
    uint64_t v25 = v24;
    uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    if (v23 == v27 && v25 == v26)
    {
      swift_bridgeObjectRelease_n(v25, 2LL);
LABEL_9:

      LOBYTE(v22) = sub_1006A0C84(v20);
      swift_bridgeObjectRelease();
      goto LABEL_10;
    }

    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v25, v27, v26, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v28 & 1) != 0) {
      goto LABEL_9;
    }
    uint64_t v30 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeAccessory);
    uint64_t v32 = v31;
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    if (v30 == v34 && v32 == v33) {
      goto LABEL_13;
    }
    char v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v30, v32, v34, v33, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v35 & 1) != 0) {
      goto LABEL_15;
    }
    uint64_t v38 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeHele);
    uint64_t v32 = v39;
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    if (v38 == v41 && v32 == v40)
    {
LABEL_13:
      swift_bridgeObjectRelease_n(v32, 2LL);
LABEL_15:

      swift_bridgeObjectRelease();
      sub_10050B884((uint64_t)&v16[*(int *)(v14 + 20)], (uint64_t)v9);
      __int128 v22 = v71;
      if ((*(unsigned int (**)(char *, uint64_t, int *))(v11 + 48))(v9, 1LL, v71) != 1)
      {
        sub_10002218C((uint64_t)v9, (uint64_t)v13, type metadata accessor for BeaconProductInfoRecord);
        LODWORD(v22) = (*(_DWORD *)&v13[v22[17]] >> 11) & 1;
        sub_100018C68((uint64_t)v13, type metadata accessor for BeaconProductInfoRecord);
        goto LABEL_10;
      }

      int v36 = &qword_1009AA870;
      uint64_t v37 = (uint64_t)v9;
      goto LABEL_17;
    }

    char v42 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v32, v41, v40, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v42 & 1) != 0) {
      goto LABEL_15;
    }
    uint64_t v43 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeSelfBeaconing);
    uint64_t v45 = v44;
    uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    if (v43 == v47 && v45 == v46)
    {
      swift_bridgeObjectRelease_n(v45, 2LL);
      goto LABEL_26;
    }

    char v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v43, v45, v47, v46, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v48 & 1) != 0)
    {
LABEL_26:

      uint64_t v49 = sub_1006A0C90(v20);
      swift_bridgeObjectRelease();
      if (*(void *)(v49 + 16) && (unint64_t v50 = sub_10030CF28(1), (v51 & 1) != 0))
      {
        unint64_t v52 = v50;
        uint64_t v53 = *(void *)(v49 + 56);
        uint64_t v54 = type metadata accessor for FeatureSupportMatrix(0LL);
        uint64_t v55 = *(void *)(v54 - 8);
        uint64_t v56 = v53 + *(void *)(v55 + 72) * v52;
        uint64_t v57 = (uint64_t)v70;
        sub_10001DC4C(v56, (uint64_t)v70, type metadata accessor for FeatureSupportMatrix);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v55 + 56))(v57, 0LL, 1LL, v54);
      }

      else
      {
        uint64_t v54 = type metadata accessor for FeatureSupportMatrix(0LL);
        uint64_t v57 = (uint64_t)v70;
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 56LL))(v70, 1LL, 1LL, v54);
      }

      swift_bridgeObjectRelease();
      type metadata accessor for FeatureSupportMatrix(0LL);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v54 - 8) + 48LL))(v57, 1LL, v54) != 1)
      {
        LOBYTE(v22) = sub_1002B9190((uint64_t)v16, v57);
        sub_100018C68(v57, type metadata accessor for FeatureSupportMatrix);
        goto LABEL_10;
      }

      int v36 = &qword_1009A7D98;
      uint64_t v37 = v57;
LABEL_17:
      sub_100015794(v37, v36);
      LOBYTE(v22) = 0;
      goto LABEL_10;
    }

    swift_bridgeObjectRelease();
    uint64_t v58 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeVirtualMeDevice);
    uint64_t v60 = v59;
    uint64_t v62 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    if (v58 == v62 && v60 == v61)
    {
      swift_bridgeObjectRelease_n(v60, 2LL);
LABEL_37:

      LOBYTE(v22) = 0;
      goto LABEL_10;
    }

    char v63 = _stringCompareWithSmolCheck(_:_:expecting:)(v58, v60, v62, v61, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v63 & 1) != 0) {
      goto LABEL_37;
    }
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeNone);
    uint64_t v66 = v65;
    uint64_t v68 = static String._unconditionallyBridgeFromObjectiveC(_:)(v22);
    if (v64 == v68 && v66 == v67)
    {

      swift_bridgeObjectRelease_n(v66, 2LL);
      LOBYTE(v22) = 0;
    }

    else
    {
      _stringCompareWithSmolCheck(_:_:expecting:)(v64, v66, v68, v67, 0LL);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      LOBYTE(v22) = 0;
    }
  }

  else
  {
    LOBYTE(v22) = 0;
  }

BOOL sub_1002B9190(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A6598);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for SystemVersionNumber(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v31 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v11);
  id v13 = (char *)v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(a1, (uint64_t)v13, v14);
  uint64_t v15 = (uint64_t *)&v13[*(int *)(v11 + 56)];
  uint64_t v16 = *v15;
  uint64_t v17 = v15[1];
  swift_bridgeObjectRetain(v17);
  uint64_t v18 = sub_1003DF540(v16, v17);
  if (v19)
  {
    uint64_t v22 = v18;
    uint64_t v23 = v19;
    uint64_t v24 = v21;
    v31[0] = v20;
    v31[1] = a2;
    uint64_t v25 = &v13[*(int *)(v11 + 60)];
    uint64_t v27 = *(void *)v25;
    uint64_t v26 = *((void *)v25 + 1);
    __n128 v28 = swift_bridgeObjectRetain(v26);
    SystemVersionNumber.init(rawValue:)(v27, v26, v28);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v10, v6, v7);
      BOOL v29 = sub_1005F5874(v22, v23, v31[0], v24, (uint64_t)v10);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
      goto LABEL_6;
    }

    swift_bridgeObjectRelease();
    sub_100015794((uint64_t)v6, &qword_1009A6598);
  }

  BOOL v29 = 0;
LABEL_6:
  sub_100018C68((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
  return v29;
}

uint64_t sub_1002B9384(void **a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  return sub_100504028(*a1, a2, a3, a4);
}

uint64_t sub_1002B938C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A7D90);
  __chkstk_darwin(v4);
  uint64_t v6 = &v23[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  void v25[3] = type metadata accessor for OwnedBeaconRecord(0LL);
  v25[4] = sub_100007864( (unint64_t *)&qword_10099D000,  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_10080B120);
  uint64_t v7 = sub_10000A7C8(v25);
  sub_10001DC4C(a1, (uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
  if (qword_10099BA48 != -1) {
    swift_once(&qword_10099BA48, sub_1007C7B1C);
  }
  uint64_t v8 = *(void *)(qword_100A2B838 + 24);
  uint64_t v9 = swift_retain();
  AnyCurrentValuePublisher.value.getter(v24, v9);
  swift_release(v8);
  LODWORD(v8) = LOBYTE(v24[0]);
  sub_100013044((uint64_t)v25, (uint64_t)v24);
  if ((_DWORD)v8 != 1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
LABEL_7:
    id v13 = sub_100576FE0();
    uint64_t v14 = v13[2];
    uint64_t v15 = type metadata accessor for LeashRecord(0LL);
    uint64_t v16 = *(void *)(v15 - 8);
    if (v14)
    {
      sub_10001DC4C( (uint64_t)v13 + ((*(unsigned __int8 *)(v16 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)),  (uint64_t)v6,  type metadata accessor for LeashRecord);
      uint64_t v17 = 0LL;
    }

    else
    {
      uint64_t v17 = 1LL;
    }

    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v6, v17, 1LL, v15);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48))(v6, 1LL, v15) == 1)
    {
      sub_100015794((uint64_t)v6, &qword_1009A7D90);
    }

    else
    {
      uint64_t v18 = *(void *)&v6[*(int *)(v15 + 24)];
      swift_bridgeObjectRetain(v18);
      uint64_t v19 = sub_100018C68((uint64_t)v6, type metadata accessor for LeashRecord);
      __chkstk_darwin(v19);
      *(void *)&v23[-16] = v20;
      BOOL v21 = sub_1004E98E4((uint64_t (*)(char *))sub_1002DDE40, (BOOL)&v23[-32], v18);
      swift_bridgeObjectRelease();
      if (v21)
      {
        uint64_t v12 = 0LL;
        goto LABEL_15;
      }
    }

    uint64_t v12 = 2LL;
    goto LABEL_15;
  }

  uint64_t v10 = sub_100012ED8(v24, v24[3]);
  char v11 = sub_1002B98A4((uint64_t)v10, a2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
  if ((v11 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v12 = 5LL;
LABEL_15:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
  return v12;
}

uint64_t sub_1002B9618(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A7D90);
  __chkstk_darwin(v4);
  uint64_t v6 = &v23[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  void v25[3] = type metadata accessor for SharedBeaconRecord(0LL);
  v25[4] = sub_100007864(&qword_10099CFF8, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_10081ADAC);
  uint64_t v7 = sub_10000A7C8(v25);
  sub_10001DC4C(a1, (uint64_t)v7, type metadata accessor for SharedBeaconRecord);
  if (qword_10099BA48 != -1) {
    swift_once(&qword_10099BA48, sub_1007C7B1C);
  }
  uint64_t v8 = swift_retain();
  AnyCurrentValuePublisher.value.getter(v24, v8);
  swift_release();
  int v9 = LOBYTE(v24[0]);
  sub_100013044((uint64_t)v25, (uint64_t)v24);
  if (v9 != 1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
LABEL_7:
    id v13 = sub_100576FE0();
    uint64_t v14 = v13[2];
    uint64_t v15 = type metadata accessor for LeashRecord(0LL);
    uint64_t v16 = *(void *)(v15 - 8);
    if (v14)
    {
      sub_10001DC4C( (uint64_t)v13 + ((*(unsigned __int8 *)(v16 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80)),  (uint64_t)v6,  type metadata accessor for LeashRecord);
      uint64_t v17 = 0LL;
    }

    else
    {
      uint64_t v17 = 1LL;
    }

    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v16 + 56))(v6, v17, 1LL, v15);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v16 + 48))(v6, 1LL, v15) == 1)
    {
      sub_100015794((uint64_t)v6, &qword_1009A7D90);
    }

    else
    {
      uint64_t v18 = *(void *)&v6[*(int *)(v15 + 24)];
      swift_bridgeObjectRetain(v18);
      uint64_t v19 = sub_100018C68((uint64_t)v6, type metadata accessor for LeashRecord);
      __chkstk_darwin(v19);
      *(void *)&v23[-16] = v20;
      BOOL v21 = sub_1004E98E4((uint64_t (*)(char *))sub_100246EF4, (BOOL)&v23[-32], v18);
      swift_bridgeObjectRelease();
      if (v21)
      {
        uint64_t v12 = 0LL;
        goto LABEL_15;
      }
    }

    uint64_t v12 = 2LL;
    goto LABEL_15;
  }

  uint64_t v10 = sub_100012ED8(v24, v24[3]);
  char v11 = sub_1002BA9A4((uint64_t)v10, a2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
  if ((v11 & 1) == 0) {
    goto LABEL_7;
  }
  uint64_t v12 = 5LL;
LABEL_15:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
  return v12;
}

uint64_t sub_1002B98A4(uint64_t a1, uint64_t a2)
{
  uint64_t v131 = a2;
  uint64_t v128 = type metadata accessor for Date(0LL);
  uint64_t v127 = *(void *)(v128 - 8);
  __chkstk_darwin(v128);
  uint64_t v126 = (uint64_t)v122 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v134 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v136 = *(void *)(v134 - 8);
  uint64_t v4 = __chkstk_darwin(v134);
  uint64_t v135 = (uint64_t)v122 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v122 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v122 - v9;
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009A5990);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v129 = (uint64_t)v122 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)v122 - v14;
  uint64_t v16 = type metadata accessor for UUID(0LL);
  uint64_t v133 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t)v122 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v130 = (char *)v122 - v20;
  uint64_t v21 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)v122 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for OwnedBeaconRecord(0LL);
  v146[3] = v24;
  v146[4] = sub_100007864( (unint64_t *)&qword_10099D000,  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_10080B120);
  uint64_t v25 = sub_10000A7C8(v146);
  sub_10001DC4C(a1, (uint64_t)v25, type metadata accessor for OwnedBeaconRecord);
  uint64_t v132 = v24;
  LOBYTE(a1) = sub_1005E269C( *(void *)((char *)v25 + *(int *)(v24 + 64)),  *(void *)((char *)v25 + *(int *)(v24 + 68)));
  sub_100013044((uint64_t)v146, (uint64_t)v145);
  if ((a1 & 1) != 0)
  {
    char v123 = v8;
    uint64_t v125 = v16;
    uint64_t v124 = v15;
    sub_100012ED8(v145, v145[3]);
    sub_1005D3A0C();
    uint64_t v27 = v26;
    uint64_t v28 = SPBeaconTypeHele;
    uint64_t v29 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    uint64_t v31 = v30;
    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v28);
    if (v29 == v33 && v31 == v32)
    {

      swift_bridgeObjectRelease_n(v31, 2LL);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v145);
      unint64_t v34 = v134;
    }

    else
    {
      char v37 = _stringCompareWithSmolCheck(_:_:expecting:)(v29, v31, v33, v32, 0LL);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v145);
      uint64_t v36 = 0LL;
      unint64_t v34 = v134;
      if ((v37 & 1) == 0) {
        goto LABEL_55;
      }
    }

    if (qword_10099B318 != -1) {
      goto LABEL_59;
    }
    while (1)
    {
      OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
      char v38 = sub_1006A1500(v142[0]);
      swift_bridgeObjectRelease();
      uint64_t v39 = v125;
      if ((v38 & 1) == 0)
      {
        uint64_t v36 = 0LL;
        goto LABEL_55;
      }

      uint64_t v40 = *(void *)(v131 + 256);
      sub_10001581C((uint64_t)v25 + *(int *)(v132 + 28), (uint64_t)v23, &qword_10099D8A0);
      uint64_t v41 = v133;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v133 + 48))(v23, 1LL, v39) == 1)
      {
        uint64_t v141 = 0LL;
        __int128 v140 = 0u;
        __int128 v139 = 0u;
LABEL_27:
        sub_100015794((uint64_t)&v139, (uint64_t *)&unk_1009AA790);
        if (qword_10099B4C8 != -1) {
          swift_once(&qword_10099B4C8, sub_10047B404);
        }
        uint64_t v55 = type metadata accessor for Logger(0LL);
        sub_10000A720(v55, (uint64_t)qword_100A2AAA0);
        uint64_t v56 = sub_100013044((uint64_t)v146, (uint64_t)v142);
        uint64_t v57 = (os_log_s *)Logger.logObject.getter(v56);
        os_log_type_t v58 = static os_log_type_t.default.getter(v57);
        if (os_log_type_enabled(v57, v58))
        {
          uint64_t v59 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v60 = swift_slowAlloc(32LL, -1LL);
          *(void *)&__int128 v139 = v60;
          *(_DWORD *)uint64_t v59 = 136315138;
          uint64_t v61 = (char *)sub_100012ED8(v142, v143);
          uint64_t v62 = v133;
          char v63 = v130;
          (*(void (**)(char *, char *, uint64_t))(v133 + 16))(v130, &v61[*(int *)(v132 + 20)], v39);
          uint64_t v64 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v65 = dispatch thunk of CustomStringConvertible.description.getter(v39, v64);
          uint64_t v66 = v39;
          unint64_t v68 = v67;
          (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v66);
          uint64_t v138 = sub_1003F11D4(v65, v68, (uint64_t *)&v139);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v59 + 4, v59 + 12);
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v142);
          _os_log_impl( (void *)&_mh_execute_header,  v57,  v58,  "Can't monitor beacon: %s due to: airpods but missing beacon group.",  v59,  0xCu);
          swift_arrayDestroy(v60, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v60, -1LL, -1LL);
          swift_slowDealloc(v59, -1LL, -1LL);
        }

        else
        {
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v142);
        }

        goto LABEL_54;
      }

      uint64_t v42 = (uint64_t)v130;
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v130, v23, v39);
      swift_retain();
      sub_100513108(v42, (uint64_t)&v139);
      uint64_t v43 = *(void (**)(uint64_t, uint64_t))(v41 + 8);
      v43(v42, v39);
      swift_release(v40);
      if (!*((void *)&v140 + 1)) {
        goto LABEL_27;
      }
      sub_100012EC0(&v139, (uint64_t)v142);
      if (qword_10099B300 != -1) {
        swift_once(&qword_10099B300, sub_1003459EC);
      }
      uint64_t v44 = qword_100A2A6C8;
      uint64_t v45 = v143;
      uint64_t v46 = v144;
      sub_100012ED8(v142, v143);
      (*(void (**)(uint64_t, uint64_t))(v46 + 8))(v45, v46);
      uint64_t v47 = objc_autoreleasePoolPush();
      sub_100346B24(v44, v19, 0LL, 0LL, &v139);
      v122[1] = 0LL;
      objc_autoreleasePoolPop(v47);
      char v48 = (void *)v139;
      v43(v19, v125);
      uint64_t v25 = _swiftEmptyArrayStorage;
      *(void *)&__int128 v139 = _swiftEmptyArrayStorage;
      uint64_t v131 = v48[2];
      if (!v131) {
        break;
      }
      v122[0] = v43;
      unint64_t v49 = 0LL;
      uint64_t v23 = (char *)_swiftEmptyArrayStorage;
      uint64_t v50 = v34;
      while (v49 < v48[2])
      {
        unint64_t v51 = (*(unsigned __int8 *)(v136 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v136 + 80);
        uint64_t v19 = *(void *)(v136 + 72);
        uint64_t v25 = v48;
        sub_10001DC4C((uint64_t)v48 + v51 + v19 * v49, (uint64_t)v10, type metadata accessor for BeaconObservation);
        sub_1001D6134();
        uint64_t v138 = Set.init(minimumCapacity:)(2LL);
        unint64_t v34 = (unint64_t)type metadata accessor for BeaconObservation;
        sub_1000BE44C(&v137, 37LL);
        sub_1000BE44C(&v137, 38LL);
        uint64_t v52 = v50;
        BOOL v53 = sub_1004E55A0(v10[*(int *)(v50 + 24)], v138);
        swift_bridgeObjectRelease();
        if (v53)
        {
          sub_10002218C((uint64_t)v10, v135, type metadata accessor for BeaconObservation);
          if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0) {
            sub_100032AA8(0, *((void *)v23 + 2) + 1LL, 1);
          }
          uint64_t v23 = (char *)v139;
          unint64_t v34 = *(void *)(v139 + 16);
          unint64_t v54 = *(void *)(v139 + 24);
          char v48 = v25;
          if (v34 >= v54 >> 1)
          {
            sub_100032AA8(v54 > 1, v34 + 1, 1);
            uint64_t v23 = (char *)v139;
          }

          *((void *)v23 + 2) = v34 + 1;
          sub_10002218C(v135, (uint64_t)&v23[v51 + v34 * v19], type metadata accessor for BeaconObservation);
          uint64_t v50 = v134;
        }

        else
        {
          sub_100018C68((uint64_t)v10, type metadata accessor for BeaconObservation);
          uint64_t v50 = v52;
          char v48 = v25;
        }

        if (v131 == ++v49)
        {
          uint64_t v25 = (void *)v139;
          uint64_t v43 = (void (*)(uint64_t, uint64_t))v122[0];
          goto LABEL_35;
        }
      }

      __break(1u);
LABEL_59:
      swift_once(&qword_10099B318, sub_100352F58);
    }

    uint64_t v50 = v34;
LABEL_35:
    swift_bridgeObjectRelease();
    uint64_t v69 = (uint64_t)v124;
    sub_1000F0A44((uint64_t)v25, (uint64_t)v124);
    swift_release(v25);
    uint64_t v70 = v129;
    sub_10001581C(v69, v129, (uint64_t *)&unk_1009A5990);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v136 + 48))(v70, 1LL, v50) == 1)
    {
      sub_100015794(v70, (uint64_t *)&unk_1009A5990);
      if (qword_10099B4C8 != -1) {
        swift_once(&qword_10099B4C8, sub_10047B404);
      }
      uint64_t v71 = type metadata accessor for Logger(0LL);
      sub_10000A720(v71, (uint64_t)qword_100A2AAA0);
      uint64_t v72 = sub_100013044((uint64_t)v146, (uint64_t)&v139);
      uint64_t v73 = (os_log_s *)Logger.logObject.getter(v72);
      os_log_type_t v74 = static os_log_type_t.default.getter(v73);
      if (os_log_type_enabled(v73, v74))
      {
        uint64_t v75 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v76 = swift_slowAlloc(32LL, -1LL);
        uint64_t v138 = v76;
        *(_DWORD *)uint64_t v75 = 136315138;
        uint64_t v77 = (char *)sub_100012ED8(&v139, *((uint64_t *)&v140 + 1));
        uint64_t v78 = v130;
        uint64_t v79 = v125;
        (*(void (**)(char *, char *, uint64_t))(v133 + 16))(v130, &v77[*(int *)(v132 + 20)], v125);
        uint64_t v80 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter(v79, v80);
        uint64_t v82 = (void (*)(char *, uint64_t))v43;
        uint64_t v83 = v81;
        unint64_t v85 = v84;
        v82(v78, v79);
        uint64_t v137 = sub_1003F11D4(v83, v85, &v138);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v75 + 4, v75 + 12);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v139);
        _os_log_impl( (void *)&_mh_execute_header,  v73,  v74,  "Can't monitor beacon: %s due to: airpods but missing last BT observation.",  v75,  0xCu);
        swift_arrayDestroy(v76, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v76, -1LL, -1LL);
        swift_slowDealloc(v75, -1LL, -1LL);

        uint64_t v86 = (uint64_t)v124;
        goto LABEL_53;
      }

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v139);
LABEL_52:
      uint64_t v86 = v69;
LABEL_53:
      sub_100015794(v86, (uint64_t *)&unk_1009A5990);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v142);
LABEL_54:
      uint64_t v36 = 1LL;
      goto LABEL_55;
    }

    uint64_t v87 = v70;
    uint64_t v88 = (uint64_t)v123;
    sub_10002218C(v87, (uint64_t)v123, type metadata accessor for BeaconObservation);
    uint64_t v89 = v126;
    static Date.trustedNow.getter(v126);
    double v90 = Date.timeIntervalSince(_:)(v88 + *(int *)(v50 + 20));
    (*(void (**)(uint64_t, uint64_t))(v127 + 8))(v89, v128);
    OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
    sub_1006A14F4(v139);
    double v92 = v91;
    swift_bridgeObjectRelease();
    if (v92 < v90)
    {
      if (qword_10099B4C8 != -1) {
        swift_once(&qword_10099B4C8, sub_10047B404);
      }
      uint64_t v93 = type metadata accessor for Logger(0LL);
      sub_10000A720(v93, (uint64_t)qword_100A2AAA0);
      uint64_t v94 = sub_100013044((uint64_t)v146, (uint64_t)&v139);
      Swift::Int v95 = (os_log_s *)Logger.logObject.getter(v94);
      os_log_type_t v96 = static os_log_type_t.default.getter(v95);
      if (os_log_type_enabled(v95, v96))
      {
        uint64_t v97 = swift_slowAlloc(32LL, -1LL);
        uint64_t v98 = swift_slowAlloc(32LL, -1LL);
        uint64_t v138 = v98;
        *(_DWORD *)uint64_t v97 = 136315650;
        uint64_t v136 = v97 + 4;
        unint64_t v99 = (char *)sub_100012ED8(&v139, *((uint64_t *)&v140 + 1));
        int v100 = v130;
        uint64_t v101 = (void (*)(char *, uint64_t))v43;
        uint64_t v102 = v125;
        (*(void (**)(char *, char *, uint64_t))(v133 + 16))(v130, &v99[*(int *)(v132 + 20)], v125);
        uint64_t v103 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v104 = dispatch thunk of CustomStringConvertible.description.getter(v102, v103);
        unint64_t v106 = v105;
        v101(v100, v102);
        uint64_t v137 = sub_1003F11D4(v104, v106, &v138);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v136, v97 + 12);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v139);
        *(_WORD *)(v97 + 12) = 2048;
        uint64_t v137 = *(void *)&v90;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v97 + 14, v97 + 22);
        *(_WORD *)(v97 + 22) = 2048;
        uint64_t v137 = *(void *)&v92;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v97 + 24, v97 + 32);
        _os_log_impl( (void *)&_mh_execute_header,  v95,  v96,  "Can't monitor beacon: %s due to: airpods but expired (%f > %f sec ago)",  (uint8_t *)v97,  0x20u);
        swift_arrayDestroy(v98, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v98, -1LL, -1LL);
        swift_slowDealloc(v97, -1LL, -1LL);
      }

      else
      {

        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v139);
      }

      sub_100018C68((uint64_t)v123, type metadata accessor for BeaconObservation);
      goto LABEL_52;
    }

    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v107 = type metadata accessor for Logger(0LL);
    sub_10000A720(v107, (uint64_t)qword_100A2AAA0);
    uint64_t v108 = sub_100013044((uint64_t)v146, (uint64_t)&v139);
    uint64_t v109 = (os_log_s *)Logger.logObject.getter(v108);
    os_log_type_t v110 = static os_log_type_t.default.getter(v109);
    if (os_log_type_enabled(v109, v110))
    {
      uint64_t v111 = swift_slowAlloc(32LL, -1LL);
      uint64_t v112 = swift_slowAlloc(32LL, -1LL);
      uint64_t v138 = v112;
      *(_DWORD *)uint64_t v111 = 136315650;
      uint64_t v136 = v111 + 4;
      uint64_t v113 = (char *)sub_100012ED8(&v139, *((uint64_t *)&v140 + 1));
      uint64_t v114 = v130;
      uint64_t v115 = (void (*)(char *, uint64_t))v43;
      uint64_t v116 = v125;
      (*(void (**)(char *, char *, uint64_t))(v133 + 16))(v130, &v113[*(int *)(v132 + 20)], v125);
      uint64_t v117 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v118 = dispatch thunk of CustomStringConvertible.description.getter(v116, v117);
      unint64_t v120 = v119;
      v115(v114, v116);
      uint64_t v137 = sub_1003F11D4(v118, v120, &v138);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v136, v111 + 12);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v139);
      *(_WORD *)(v111 + 12) = 2048;
      uint64_t v137 = *(void *)&v90;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v111 + 14, v111 + 22);
      *(_WORD *)(v111 + 22) = 2048;
      uint64_t v137 = *(void *)&v92;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v111 + 24, v111 + 32);
      _os_log_impl( (void *)&_mh_execute_header,  v109,  v110,  "Will monitor beacon: %s due to: airpods, not expired (%f < %f sec ago)",  (uint8_t *)v111,  0x20u);
      swift_arrayDestroy(v112, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v112, -1LL, -1LL);
      swift_slowDealloc(v111, -1LL, -1LL);
    }

    else
    {

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v139);
    }

    sub_100018C68((uint64_t)v123, type metadata accessor for BeaconObservation);
    sub_100015794(v69, (uint64_t *)&unk_1009A5990);
    char v35 = v142;
  }

  else
  {
    char v35 = v145;
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v35);
  uint64_t v36 = 0LL;
LABEL_55:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v146);
  return v36;
}

uint64_t sub_1002BA9A4(uint64_t a1, uint64_t a2)
{
  uint64_t v125 = a2;
  uint64_t v123 = type metadata accessor for Date(0LL);
  uint64_t v122 = *(void *)(v123 - 8);
  __chkstk_darwin(v123);
  uint64_t v121 = (uint64_t)&v116 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v129 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v131 = *(uint8_t **)(v129 - 8);
  uint64_t v4 = __chkstk_darwin(v129);
  uint64_t v130 = (uint64_t)&v116 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v116 - v7;
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v116 - v9;
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009A5990);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v124 = (uint64_t)&v116 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v116 - v14;
  uint64_t v128 = type metadata accessor for UUID(0LL);
  uint64_t v126 = *(void *)(v128 - 8);
  uint64_t v16 = __chkstk_darwin(v128);
  uint64_t v18 = (uint64_t)&v116 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v116 - v19;
  uint64_t v21 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v116 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for SharedBeaconRecord(0LL);
  v141[3] = v24;
  v141[4] = sub_100007864(&qword_10099CFF8, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_10081ADAC);
  uint64_t v25 = sub_10000A7C8(v141);
  sub_10001DC4C(a1, (uint64_t)v25, type metadata accessor for SharedBeaconRecord);
  uint64_t v127 = v24;
  LOBYTE(a1) = sub_1005E269C( *(void *)((char *)v25 + *(int *)(v24 + 44)),  *(void *)((char *)v25 + *(int *)(v24 + 48)));
  sub_100013044((uint64_t)v141, (uint64_t)v140);
  if ((a1 & 1) != 0)
  {
    unint64_t v120 = v20;
    unint64_t v119 = v8;
    sub_100012ED8(v140, v140[3]);
    uint64_t v26 = sub_1007681BC();
    uint64_t v27 = SPBeaconTypeHele;
    uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
    uint64_t v30 = v29;
    uint64_t v32 = static String._unconditionallyBridgeFromObjectiveC(_:)(v27);
    if (v28 == v32 && v30 == v31)
    {
      swift_bridgeObjectRelease_n(v30, 2LL);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v140);
    }

    else
    {
      char v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v32, v31, 0LL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v140);
      uint64_t v34 = 0LL;
      if ((v35 & 1) == 0) {
        goto LABEL_54;
      }
    }

    if (qword_10099B318 != -1) {
      goto LABEL_58;
    }
    while (1)
    {
      OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
      char v36 = sub_1006A1500(v137[0]);
      swift_bridgeObjectRelease();
      if ((v36 & 1) == 0)
      {
        uint64_t v34 = 0LL;
        goto LABEL_54;
      }

      sub_10001581C((uint64_t)v25 + *(int *)(v127 + 76), (uint64_t)v23, &qword_10099D8A0);
      uint64_t v37 = v126;
      uint64_t v38 = v128;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v126 + 48))(v23, 1LL, v128) == 1)
      {
        uint64_t v136 = 0LL;
        __int128 v135 = 0u;
        __int128 v134 = 0u;
        uint64_t v39 = (uint64_t)v120;
LABEL_27:
        sub_100015794((uint64_t)&v134, (uint64_t *)&unk_1009AA790);
        if (qword_10099B4C8 != -1) {
          swift_once(&qword_10099B4C8, sub_10047B404);
        }
        uint64_t v52 = type metadata accessor for Logger(0LL);
        sub_10000A720(v52, (uint64_t)qword_100A2AAA0);
        uint64_t v53 = sub_100013044((uint64_t)v141, (uint64_t)v137);
        unint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
        os_log_type_t v55 = static os_log_type_t.default.getter(v54);
        if (os_log_type_enabled(v54, v55))
        {
          uint64_t v56 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v57 = swift_slowAlloc(32LL, -1LL);
          *(void *)&__int128 v134 = v57;
          *(_DWORD *)uint64_t v56 = 136315138;
          uint64_t v58 = v39;
          uint64_t v131 = v56 + 4;
          uint64_t v59 = (char *)sub_100012ED8(v137, v138);
          uint64_t v60 = v128;
          (*(void (**)(uint64_t, char *, uint64_t))(v37 + 16))(v39, &v59[*(int *)(v127 + 20)], v128);
          uint64_t v61 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter(v60, v61);
          unint64_t v64 = v63;
          (*(void (**)(uint64_t, uint64_t))(v37 + 8))(v58, v60);
          uint64_t v133 = sub_1003F11D4(v62, v64, (uint64_t *)&v134);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v131, v56 + 12);
          swift_bridgeObjectRelease();
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v137);
          _os_log_impl( (void *)&_mh_execute_header,  v54,  v55,  "Can't monitor beacon: %s due to: airpods but missing beacon group.",  v56,  0xCu);
          swift_arrayDestroy(v57, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v57, -1LL, -1LL);
          swift_slowDealloc(v56, -1LL, -1LL);
        }

        else
        {
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v137);
        }

        goto LABEL_53;
      }

      uint64_t v39 = (uint64_t)v120;
      (*(void (**)(char *, char *, uint64_t))(v37 + 32))(v120, v23, v38);
      swift_retain();
      sub_100513108(v39, (uint64_t)&v134);
      uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v37 + 8);
      v40(v39, v38);
      swift_release();
      if (!*((void *)&v135 + 1)) {
        goto LABEL_27;
      }
      uint64_t v118 = v15;
      sub_100012EC0(&v134, (uint64_t)v137);
      if (qword_10099B300 != -1) {
        swift_once(&qword_10099B300, sub_1003459EC);
      }
      uint64_t v41 = qword_100A2A6C8;
      uint64_t v42 = v138;
      uint64_t v43 = v139;
      sub_100012ED8(v137, v138);
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v42, v43);
      uint64_t v44 = objc_autoreleasePoolPush();
      sub_100346B24(v41, v18, 0LL, 0LL, &v134);
      uint64_t v116 = 0LL;
      objc_autoreleasePoolPop(v44);
      uint64_t v45 = v134;
      v40(v18, v128);
      uint64_t v46 = _swiftEmptyArrayStorage;
      *(void *)&__int128 v134 = _swiftEmptyArrayStorage;
      uint64_t v47 = v129;
      uint64_t v125 = *(void *)(v45 + 16);
      uint64_t v117 = v40;
      if (!v125) {
        break;
      }
      unint64_t v48 = 0LL;
      uint64_t v23 = (char *)_swiftEmptyArrayStorage;
      uint64_t v25 = type metadata accessor for BeaconObservation;
      while (v48 < *(void *)(v45 + 16))
      {
        uint64_t v15 = (char *)((v131[80] + 32LL) & ~(unint64_t)v131[80]);
        uint64_t v49 = *((void *)v131 + 9);
        sub_10001DC4C((uint64_t)&v15[v45 + v49 * v48], (uint64_t)v10, type metadata accessor for BeaconObservation);
        sub_1001D6134();
        uint64_t v133 = Set.init(minimumCapacity:)(2LL);
        sub_1000BE44C(&v132, 37LL);
        sub_1000BE44C(&v132, 38LL);
        uint64_t v18 = sub_1004E55A0(v10[*(int *)(v47 + 24)], v133);
        swift_bridgeObjectRelease();
        if ((v18 & 1) != 0)
        {
          sub_10002218C((uint64_t)v10, v130, type metadata accessor for BeaconObservation);
          if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0) {
            sub_100032AA8(0, *((void *)v23 + 2) + 1LL, 1);
          }
          uint64_t v23 = (char *)v134;
          unint64_t v51 = *(void *)(v134 + 16);
          unint64_t v50 = *(void *)(v134 + 24);
          uint64_t v18 = v51 + 1;
          if (v51 >= v50 >> 1)
          {
            sub_100032AA8(v50 > 1, v51 + 1, 1);
            uint64_t v23 = (char *)v134;
          }

          *((void *)v23 + 2) = v18;
          sub_10002218C(v130, (uint64_t)&v15[(void)v23 + v51 * v49], type metadata accessor for BeaconObservation);
          uint64_t v47 = v129;
        }

        else
        {
          sub_100018C68((uint64_t)v10, type metadata accessor for BeaconObservation);
        }

        if (v125 == ++v48)
        {
          uint64_t v46 = (void *)v134;
          uint64_t v40 = v117;
          goto LABEL_34;
        }
      }

      __break(1u);
LABEL_58:
      swift_once(&qword_10099B318, sub_100352F58);
    }

uint64_t sub_1002BBA60(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v13 = a4;
  uint64_t v14 = a5;
  uint64_t v9 = sub_10000A7C8(&v12);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 32LL))(v9, a2, a4);
  uint64_t v10 = *a3;
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = a1 + 1;
  return sub_100012EC0(&v12, v10 + 40 * a1 + 32);
}

void *sub_1002BBAD8(uint64_t a1, uint64_t a2)
{
  uint64_t v35 = a2;
  uint64_t v3 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v36[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v36[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v36[-1] - v10;
  __int128 v12 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v36[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v36[-1] - v17;
  v39[3] = v16;
  _OWORD v39[4] = sub_100007864( (unint64_t *)&qword_10099D000,  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_10080B120);
  uint64_t v19 = sub_10000A7C8(v39);
  sub_10001DC4C(a1, (uint64_t)v19, type metadata accessor for OwnedBeaconRecord);
  sub_100013044((uint64_t)v39, (uint64_t)v38);
  uint64_t v20 = sub_100004AEC(&qword_1009B0530);
  if (!swift_dynamicCast(v18, v38, v20, v12, 0LL))
  {
    if ((swift_dynamicCast(v11, v38, v20, v6, 0LL) & 1) != 0)
    {
      sub_10002218C((uint64_t)v11, (uint64_t)v9, type metadata accessor for SharedBeaconRecord);
      if (qword_10099BA28 != -1) {
        swift_once(&qword_10099BA28, sub_100794C10);
      }
      v36[0] = qword_100A2B7D0;
      if (v9[*(int *)(v6 + 52)] == 1)
      {
        swift_bridgeObjectRetain(qword_100A2B7D0);
        sub_1003CF378(0x14u);
        sub_1003CF378(4u);
        sub_1003CF378(8u);
        sub_1003CF378(9u);
        sub_100018C68((uint64_t)v9, type metadata accessor for SharedBeaconRecord);
        uint64_t v30 = (void *)v36[0];
        goto LABEL_30;
      }

      sub_100018C68((uint64_t)v9, type metadata accessor for SharedBeaconRecord);
    }

    uint64_t v30 = &_swiftEmptySetSingleton;
    goto LABEL_30;
  }

  sub_10002218C((uint64_t)v18, (uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  swift_bridgeObjectRelease();
  uint64_t v21 = &v15[v12[14]];
  uint64_t v23 = *(void *)v21;
  unint64_t v22 = *((void *)v21 + 1);
  uint64_t v24 = v23 & 0xFFFFFFFFFFFFLL;
  if ((v22 & 0x2000000000000000LL) != 0) {
    uint64_t v25 = HIBYTE(v22) & 0xF;
  }
  else {
    uint64_t v25 = v24;
  }
  if (!v25)
  {
    v36[0] = 0LL;
    v36[1] = 0xE000000000000000LL;
    uint64_t v37 = *(void **)&v15[v12[16]];
    v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    String.append(_:)(v26);
    swift_bridgeObjectRelease();
    v27._countAndFlagsBits = 95LL;
    v27._object = (void *)0xE100000000000000LL;
    String.append(_:)(v27);
    uint64_t v37 = *(void **)&v15[v12[17]];
    v28._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    String.append(_:)(v28);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (qword_10099BA28 != -1) {
    swift_once(&qword_10099BA28, sub_100794C10);
  }
  uint64_t v29 = qword_100A2B7D0;
  swift_bridgeObjectRetain(qword_100A2B7D0);
  if ((sub_10062701C() & 1) != 0)
  {
    v36[0] = v29;
    sub_1003CF378(2u);
    sub_1003CF378(1u);
    uint64_t v29 = v36[0];
  }

  uint64_t v37 = (void *)v29;
  if ((sub_1002B8AF8((uint64_t)v15, v35) & 1) != 0 && (sub_10062701C() & 1) == 0)
  {
    sub_1000BDD20(v36, 8LL);
    sub_1000BDD20(v36, 9LL);
  }

  else
  {
    sub_1003CF378(8u);
    sub_1003CF378(9u);
  }

  sub_10001DC4C((uint64_t)&v15[v12[6]], (uint64_t)v5, type metadata accessor for StableIdentifier);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v5, v3);
  sub_100018C68((uint64_t)v5, type metadata accessor for StableIdentifier);
  if (EnumCaseMultiPayload != 1)
  {
    sub_1003CF378(0xCu);
    sub_1003CF378(0xDu);
  }

  if ((sub_1005D38B0() & 1) == 0
    || (uint64_t My = type metadata accessor for Feature.FindMy(0LL),
        v36[3] = My,
        v36[4] = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy),  uint64_t v33 = sub_10000A7C8(v36),  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v33,  enum case for Feature.FindMy.btRSSIFinding(_:),  My),  LOBYTE(My) = isFeatureEnabled(_:)(v36),  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v36),  (My & 1) == 0))
  {
    sub_1003CF378(0xAu);
    sub_1003CF378(0xBu);
  }

  sub_1003CF378(0x13u);
  sub_100018C68((uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
  uint64_t v30 = v37;
LABEL_30:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v39);
  return v30;
}

void *sub_1002BC020(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = a2;
  uint64_t v3 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v35[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v35[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v35[-1] - v10;
  __int128 v12 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v35[-1] - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v35[-1] - v16;
  v38[3] = v6;
  v38[4] = sub_100007864(&qword_10099CFF8, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_10081ADAC);
  uint64_t v18 = sub_10000A7C8(v38);
  sub_10001DC4C(a1, (uint64_t)v18, type metadata accessor for SharedBeaconRecord);
  sub_100013044((uint64_t)v38, (uint64_t)v37);
  uint64_t v19 = sub_100004AEC(&qword_1009B0530);
  if (!swift_dynamicCast(v17, v37, v19, v12, 0LL))
  {
    if ((swift_dynamicCast(v11, v37, v19, v6, 0LL) & 1) != 0)
    {
      sub_10002218C((uint64_t)v11, (uint64_t)v9, type metadata accessor for SharedBeaconRecord);
      if (qword_10099BA28 != -1) {
        swift_once(&qword_10099BA28, sub_100794C10);
      }
      v35[0] = qword_100A2B7D0;
      if (v9[*(int *)(v6 + 52)] == 1)
      {
        swift_bridgeObjectRetain(qword_100A2B7D0);
        sub_1003CF378(0x14u);
        sub_1003CF378(4u);
        sub_1003CF378(8u);
        sub_1003CF378(9u);
        sub_100018C68((uint64_t)v9, type metadata accessor for SharedBeaconRecord);
        uint64_t v29 = (void *)v35[0];
        goto LABEL_30;
      }

      sub_100018C68((uint64_t)v9, type metadata accessor for SharedBeaconRecord);
    }

    uint64_t v29 = &_swiftEmptySetSingleton;
    goto LABEL_30;
  }

  sub_10002218C((uint64_t)v17, (uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  swift_bridgeObjectRelease();
  uint64_t v20 = &v15[v12[14]];
  uint64_t v22 = *(void *)v20;
  unint64_t v21 = *((void *)v20 + 1);
  uint64_t v23 = v22 & 0xFFFFFFFFFFFFLL;
  if ((v21 & 0x2000000000000000LL) != 0) {
    uint64_t v24 = HIBYTE(v21) & 0xF;
  }
  else {
    uint64_t v24 = v23;
  }
  if (!v24)
  {
    v35[0] = 0LL;
    v35[1] = 0xE000000000000000LL;
    char v36 = *(void **)&v15[v12[16]];
    v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    String.append(_:)(v25);
    swift_bridgeObjectRelease();
    v26._countAndFlagsBits = 95LL;
    v26._object = (void *)0xE100000000000000LL;
    String.append(_:)(v26);
    char v36 = *(void **)&v15[v12[17]];
    v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
    String.append(_:)(v27);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  if (qword_10099BA28 != -1) {
    swift_once(&qword_10099BA28, sub_100794C10);
  }
  uint64_t v28 = qword_100A2B7D0;
  swift_bridgeObjectRetain(qword_100A2B7D0);
  if ((sub_10062701C() & 1) != 0)
  {
    v35[0] = v28;
    sub_1003CF378(2u);
    sub_1003CF378(1u);
    uint64_t v28 = v35[0];
  }

  char v36 = (void *)v28;
  if ((sub_1002B8AF8((uint64_t)v15, v34) & 1) != 0 && (sub_10062701C() & 1) == 0)
  {
    sub_1000BDD20(v35, 8LL);
    sub_1000BDD20(v35, 9LL);
  }

  else
  {
    sub_1003CF378(8u);
    sub_1003CF378(9u);
  }

  sub_10001DC4C((uint64_t)&v15[v12[6]], (uint64_t)v5, type metadata accessor for StableIdentifier);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v5, v3);
  sub_100018C68((uint64_t)v5, type metadata accessor for StableIdentifier);
  if (EnumCaseMultiPayload != 1)
  {
    sub_1003CF378(0xCu);
    sub_1003CF378(0xDu);
  }

  if ((sub_1005D38B0() & 1) == 0
    || (uint64_t My = type metadata accessor for Feature.FindMy(0LL),
        void v35[3] = My,
        v35[4] = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy),  uint64_t v32 = sub_10000A7C8(v35),  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v32,  enum case for Feature.FindMy.btRSSIFinding(_:),  My),  LOBYTE(My) = isFeatureEnabled(_:)(v35),  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v35),  (My & 1) == 0))
  {
    sub_1003CF378(0xAu);
    sub_1003CF378(0xBu);
  }

  sub_1003CF378(0x13u);
  sub_100018C68((uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
  uint64_t v29 = v36;
LABEL_30:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v38);
  return v29;
}

uint64_t sub_1002BC568(uint64_t a1, int a2, char *a3)
{
  LODWORD(v290) = a2;
  uint64_t v5 = sub_100004AEC(&qword_1009AA900);
  __chkstk_darwin(v5);
  uint64_t v268 = (uint64_t)&v237 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord(0LL);
  uint64_t v7 = *(void *)(found - 8);
  __chkstk_darwin(found);
  uint64_t v266 = (uint64_t)&v237 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009AA840);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v272 = (uint64_t)&v237 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v274 = (uint64_t)&v237 - v12;
  uint64_t v13 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v14 = __chkstk_darwin(v13);
  unsigned __int8 v265 = (char *)&v237 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v237 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v288 = (uint64_t)&v237 - v20;
  __chkstk_darwin(v19);
  uint64_t v293 = (uint64_t)&v237 - v21;
  uint64_t v296 = type metadata accessor for Date(0LL);
  uint64_t v292 = *(void *)(v296 - 8);
  uint64_t v22 = __chkstk_darwin(v296);
  uint64_t v270 = (char *)&v237 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v291 = (char *)&v237 - v25;
  __chkstk_darwin(v24);
  uint64_t v289 = (char *)&v237 - v26;
  uint64_t v27 = type metadata accessor for UUID(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v264 = (char *)&v237 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = __chkstk_darwin(v29);
  unint64_t v269 = (char *)&v237 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  __int128 v273 = (char *)&v237 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  os_log_type_t v280 = (char *)&v237 - v36;
  __chkstk_darwin(v35);
  uint64_t v38 = (char *)&v237 - v37;
  uint64_t v39 = type metadata accessor for SharedBeaconRecord(0LL);
  v306[3] = v39;
  v306[4] = sub_100007864(&qword_10099CFF8, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_10081ADAC);
  uint64_t v40 = sub_10000A7C8(v306);
  sub_10001DC4C(a1, (uint64_t)v40, type metadata accessor for SharedBeaconRecord);
  uint64_t v41 = sub_100004AEC(&qword_1009A7D88);
  OS_dispatch_queue.sync<A>(execute:)(sub_1002D728C, a3, v41);
  uint64_t v42 = aBlock;
  uint64_t v43 = (char *)v40 + *(int *)(v39 + 20);
  uint64_t v294 = v28;
  uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
  uint64_t v295 = v27;
  v44(v38, v43, v27);
  uint64_t v45 = v42[2];
  uint64_t v271 = v18;
  uint64_t v283 = v42;
  if (v45)
  {
    sub_10030D124((uint64_t)v38);
    if ((v46 & 1) != 0) {
      uint64_t v47 = 0LL;
    }
    else {
      uint64_t v47 = 2LL;
    }
  }

  else
  {
    uint64_t v47 = 2LL;
  }

  v286 = *(void (**)(char *, uint64_t))(v294 + 8);
  v286(v38, v295);
  unint64_t v48 = sub_1002C2B78((uint64_t)v40, a3);
  uint64_t v49 = v48[2];
  if (!v49)
  {
    swift_bridgeObjectRelease();
    uint64_t v236 = 0LL;
    uint64_t v235 = 0LL;
    uint64_t v234 = 0LL;
    uint64_t v233 = 0LL;
    uint64_t v53 = (void **)&_swiftEmptyDictionarySingleton;
LABEL_128:
    swift_bridgeObjectRelease();
    sub_10002214C((uint64_t)v236, v235);
    sub_10002214C((uint64_t)v234, v233);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v306);
    return (uint64_t)v53;
  }

  uint64_t v244 = v47;
  uint64_t v260 = v44;
  uint64_t v261 = v43;
  uint64_t v257 = v40;
  uint64_t v245 = v7;
  uint64_t v262 = a3;
  uint64_t v278 = 0LL;
  v279 = 0LL;
  uint64_t v276 = 0LL;
  uint64_t v277 = 0LL;
  uint64_t v256 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorModQueue;
  uint64_t v255 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_soundPlaybackManager;
  uint64_t v287 = SPBeaconTaskNameUnknown;
  uint64_t v285 = SPBeaconTaskNameStartSharing;
  uint64_t v282 = SPBeaconTaskNameStopSharing;
  uint64_t v263 = SPBeaconTaskNameEnableLostMode;
  uint64_t v259 = SPBeaconTaskNameDisableLostMode;
  uint64_t v258 = SPBeaconTaskNamePlaySound;
  uint64_t v254 = SPBeaconTaskNameStopSound;
  uint64_t v253 = SPBeaconTaskNameBeginLeashing;
  uint64_t v252 = SPBeaconTaskNameEndLeashing;
  uint64_t v251 = SPBeaconTaskNameBeginBTFinding;
  uint64_t v250 = SPBeaconTaskNameEndBTFinding;
  uint64_t v249 = SPBeaconTaskNameConnect;
  uint64_t v248 = SPBeaconTaskNameDisconnect;
  uint64_t v247 = SPBeaconTaskNameRename;
  uint64_t v246 = SPBeaconTaskNameBeginRanging;
  uint64_t v243 = SPBeaconTaskNameEndRanging;
  uint64_t v242 = SPBeaconTaskNameAccessoryFirmwareUpdate;
  uint64_t v241 = SPBeaconTaskNameEnableNotifyWhenFound;
  uint64_t v240 = SPBeaconTaskNameDisableNotifyWhenFound;
  uint64_t v239 = SPBeaconTaskNameLocating;
  uint64_t v275 = v48;
  unint64_t v50 = (void **)(v48 + 4);
  uint64_t v51 = 2LL;
  else {
    uint64_t v52 = 0LL;
  }
  uint64_t v281 = v52;
  uint64_t v284 = v51;
  uint64_t v53 = (void **)&_swiftEmptyDictionarySingleton;
  uint64_t v54 = v293;
  os_log_type_t v55 = v289;
  while (1)
  {
    uint64_t v290 = v53;
    uint64_t v61 = *v50;
    uint64_t v305 = 2LL;
    id v62 = v61;
    Date.init()(v62);
    id v304 = 0LL;
    unint64_t v63 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v294 + 56);
    v63(v54, 1LL, 1LL, v295);
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v287);
    uint64_t v66 = v65;
    uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
    if (v64 == v67 && v66 == v68)
    {
      swift_bridgeObjectRelease_n(v66, 2LL);
LABEL_24:
      uint64_t v76 = -1LL;
      goto LABEL_25;
    }

    char v70 = _stringCompareWithSmolCheck(_:_:expecting:)(v64, v66, v67, v68, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v70 & 1) != 0) {
      goto LABEL_24;
    }
    uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v285);
    uint64_t v73 = v72;
    uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
    if (v71 == v75 && v73 == v74)
    {
      swift_bridgeObjectRelease_n(v73, 2LL);
LABEL_32:
      uint64_t v76 = v284;
      goto LABEL_25;
    }

    char v86 = _stringCompareWithSmolCheck(_:_:expecting:)(v71, v73, v75, v74, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v86 & 1) != 0) {
      goto LABEL_32;
    }
    uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v282);
    uint64_t v89 = v88;
    uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
    if (v87 == v91 && v89 == v90)
    {
      swift_bridgeObjectRelease_n(v89, 2LL);
LABEL_37:
      uint64_t v76 = v281;
LABEL_25:
      uint64_t v305 = v76;
      goto LABEL_26;
    }

    char v92 = _stringCompareWithSmolCheck(_:_:expecting:)(v87, v89, v91, v90, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v92 & 1) != 0) {
      goto LABEL_37;
    }
    uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v263);
    uint64_t v95 = v94;
    uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
    if (v93 == v97 && v95 == v96)
    {
      swift_bridgeObjectRelease_n(v95, 2LL);
LABEL_42:
      uint64_t v99 = (uint64_t)v280;
      v260(v280, v261, v295);
      unint64_t v100 = sub_100577004(v99);
      uint64_t v101 = v100[2];
      uint64_t v102 = type metadata accessor for LostModeRecord(0LL);
      uint64_t v103 = *(void *)(v102 - 8);
      if (v101)
      {
        uint64_t v104 = v274;
        sub_10001DC4C( (uint64_t)v100 + ((*(unsigned __int8 *)(v103 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80)),  v274,  type metadata accessor for LostModeRecord);
        uint64_t v105 = 0LL;
      }

      else
      {
        uint64_t v105 = 1LL;
        uint64_t v104 = v274;
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v103 + 56))(v104, v105, 1LL, v102);
      swift_bridgeObjectRelease();
      v286(v280, v295);
      int v106 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v103 + 48))(v104, 1LL, v102);
      sub_100015794(v104, &qword_1009AA840);
      if (v106 != 1) {
        goto LABEL_55;
      }
LABEL_46:
      uint64_t v76 = 2LL;
      goto LABEL_25;
    }

    char v98 = _stringCompareWithSmolCheck(_:_:expecting:)(v93, v95, v97, v96, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v98 & 1) != 0) {
      goto LABEL_42;
    }
    uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(v259);
    uint64_t v109 = v108;
    uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
    if (v107 == v111 && v109 == v110)
    {
      swift_bridgeObjectRelease_n(v109, 2LL);
LABEL_51:
      uint64_t v113 = (uint64_t)v273;
      v260(v273, v261, v295);
      unint64_t v114 = sub_100577004(v113);
      uint64_t v115 = v114[2];
      uint64_t v116 = type metadata accessor for LostModeRecord(0LL);
      uint64_t v117 = *(void *)(v116 - 8);
      if (v115)
      {
        uint64_t v118 = v272;
        sub_10001DC4C( (uint64_t)v114 + ((*(unsigned __int8 *)(v117 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80)),  v272,  type metadata accessor for LostModeRecord);
        uint64_t v119 = 0LL;
      }

      else
      {
        uint64_t v119 = 1LL;
        uint64_t v118 = v272;
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v117 + 56))(v118, v119, 1LL, v116);
      swift_bridgeObjectRelease();
      v286(v273, v295);
      int v120 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v117 + 48))(v118, 1LL, v116);
      sub_100015794(v118, &qword_1009AA840);
      if (v120 == 1)
      {
LABEL_55:
        uint64_t v305 = 0LL;
        goto LABEL_26;
      }

      goto LABEL_46;
    }

    char v112 = _stringCompareWithSmolCheck(_:_:expecting:)(v107, v109, v111, v110, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v112 & 1) != 0) {
      goto LABEL_51;
    }
    uint64_t v121 = static String._unconditionallyBridgeFromObjectiveC(_:)(v258);
    uint64_t v123 = v122;
    uint64_t v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
    if (v121 == v125 && v123 == v124) {
      break;
    }
    char v126 = _stringCompareWithSmolCheck(_:_:expecting:)(v121, v123, v125, v124, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v126 & 1) != 0) {
      goto LABEL_60;
    }
    uint64_t v145 = static String._unconditionallyBridgeFromObjectiveC(_:)(v254);
    uint64_t v147 = v146;
    uint64_t v149 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
    if (v145 == v149 && v147 == v148)
    {
      swift_bridgeObjectRelease_n(v147, 2LL);
    }

    else
    {
      char v150 = _stringCompareWithSmolCheck(_:_:expecting:)(v145, v147, v149, v148, 0LL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v150 & 1) == 0)
      {
        uint64_t v155 = static String._unconditionallyBridgeFromObjectiveC(_:)(v253);
        uint64_t v157 = v156;
        uint64_t v159 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
        if (v155 == v159 && v157 == v158) {
          goto LABEL_76;
        }
        char v160 = _stringCompareWithSmolCheck(_:_:expecting:)(v155, v157, v159, v158, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v160 & 1) != 0) {
          goto LABEL_78;
        }
        uint64_t v161 = static String._unconditionallyBridgeFromObjectiveC(_:)(v252);
        uint64_t v157 = v162;
        uint64_t v164 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
        if (v161 == v164 && v157 == v163)
        {
LABEL_76:
          swift_bridgeObjectRelease_n(v157, 2LL);
LABEL_78:
          uint64_t v305 = sub_1002B9618((uint64_t)v257, (uint64_t)v262);
          goto LABEL_26;
        }

        char v165 = _stringCompareWithSmolCheck(_:_:expecting:)(v161, v157, v164, v163, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v165 & 1) != 0) {
          goto LABEL_78;
        }
        uint64_t v166 = static String._unconditionallyBridgeFromObjectiveC(_:)(v251);
        uint64_t v168 = v167;
        uint64_t v170 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
        if (v166 == v170 && v168 == v169)
        {
LABEL_84:
          swift_bridgeObjectRelease_n(v168, 2LL);
          goto LABEL_86;
        }

        char v171 = _stringCompareWithSmolCheck(_:_:expecting:)(v166, v168, v170, v169, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v171 & 1) == 0)
        {
          uint64_t v172 = static String._unconditionallyBridgeFromObjectiveC(_:)(v250);
          uint64_t v168 = v173;
          uint64_t v175 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
          if (v172 == v175 && v168 == v174) {
            goto LABEL_84;
          }
          char v176 = _stringCompareWithSmolCheck(_:_:expecting:)(v172, v168, v175, v174, 0LL);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v176 & 1) == 0)
          {
            uint64_t v177 = static String._unconditionallyBridgeFromObjectiveC(_:)(v249);
            uint64_t v168 = v178;
            uint64_t v180 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
            if (v177 == v180 && v168 == v179) {
              goto LABEL_84;
            }
            char v181 = _stringCompareWithSmolCheck(_:_:expecting:)(v177, v168, v180, v179, 0LL);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v181 & 1) == 0)
            {
              uint64_t v182 = static String._unconditionallyBridgeFromObjectiveC(_:)(v248);
              uint64_t v168 = v183;
              uint64_t v185 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
              if (v182 == v185 && v168 == v184) {
                goto LABEL_84;
              }
              char v186 = _stringCompareWithSmolCheck(_:_:expecting:)(v182, v168, v185, v184, 0LL);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v186 & 1) == 0)
              {
                uint64_t v187 = static String._unconditionallyBridgeFromObjectiveC(_:)(v247);
                uint64_t v168 = v188;
                uint64_t v190 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
                if (v187 == v190 && v168 == v189) {
                  goto LABEL_84;
                }
                char v191 = _stringCompareWithSmolCheck(_:_:expecting:)(v187, v168, v190, v189, 0LL);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v191 & 1) == 0)
                {
                  uint64_t v192 = static String._unconditionallyBridgeFromObjectiveC(_:)(v246);
                  uint64_t v168 = v193;
                  uint64_t v195 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
                  if (v192 == v195 && v168 == v194) {
                    goto LABEL_84;
                  }
                  char v196 = _stringCompareWithSmolCheck(_:_:expecting:)(v192, v168, v195, v194, 0LL);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v196 & 1) == 0)
                  {
                    uint64_t v197 = static String._unconditionallyBridgeFromObjectiveC(_:)(v243);
                    uint64_t v168 = v198;
                    uint64_t v200 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
                    if (v197 == v200 && v168 == v199) {
                      goto LABEL_84;
                    }
                    char v201 = _stringCompareWithSmolCheck(_:_:expecting:)(v197, v168, v200, v199, 0LL);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if ((v201 & 1) == 0)
                    {
                      uint64_t v202 = static String._unconditionallyBridgeFromObjectiveC(_:)(v242);
                      uint64_t v168 = v203;
                      uint64_t v205 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
                      if (v202 == v205 && v168 == v204) {
                        goto LABEL_84;
                      }
                      char v206 = _stringCompareWithSmolCheck(_:_:expecting:)(v202, v168, v205, v204, 0LL);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if ((v206 & 1) == 0)
                      {
                        uint64_t v207 = static String._unconditionallyBridgeFromObjectiveC(_:)(v241);
                        uint64_t v209 = v208;
                        uint64_t v211 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
                        if (v207 == v211 && v209 == v210)
                        {
                          swift_bridgeObjectRelease_n(v209, 2LL);
                          goto LABEL_112;
                        }

                        char v212 = _stringCompareWithSmolCheck(_:_:expecting:)(v207, v209, v211, v210, 0LL);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        if ((v212 & 1) != 0)
                        {
LABEL_112:
                          uint64_t v213 = (uint64_t)v264;
                          v260(v264, v261, v295);
                          uint64_t v214 = sub_100577F1C(v213);
                          if (v214[2])
                          {
                            sub_10001DC4C( (uint64_t)v214 + ((*(unsigned __int8 *)(v245 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v245 + 80)),  v268,  type metadata accessor for NotifyWhenFoundRecord);
                            uint64_t v215 = 0LL;
                          }

                          else
                          {
                            uint64_t v215 = 1LL;
                          }

                          uint64_t v216 = v245;
                          uint64_t v217 = v268;
                          uint64_t v218 = found;
                          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v245 + 56))( v268,  v215,  1LL,  found);
                          swift_bridgeObjectRelease();
                          v286(v264, v295);
                          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v216 + 48))(v217, 1LL, v218) == 1)
                          {
                            sub_100015794(v268, &qword_1009AA900);
                            goto LABEL_86;
                          }

                          uint64_t v219 = v266;
                          sub_10002218C(v268, v266, type metadata accessor for NotifyWhenFoundRecord);
                          uint64_t v220 = (uint64_t)v265;
                          uint64_t v221 = v295;
                          v260(v265, (char *)(v219 + *(int *)(found + 20)), v295);
                          sub_100018C68(v219, type metadata accessor for NotifyWhenFoundRecord);
                          v63(v220, 0LL, 1LL, v221);
                          sub_1000D4D50(v220, v293, &qword_10099D8A0);
                          uint64_t v305 = 0LL;
LABEL_70:
                          os_log_type_t v55 = v289;
                          goto LABEL_26;
                        }

                        uint64_t v222 = static String._unconditionallyBridgeFromObjectiveC(_:)(v240);
                        uint64_t v168 = v223;
                        uint64_t v225 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
                        if (v222 == v225 && v168 == v224) {
                          goto LABEL_84;
                        }
                        char v226 = _stringCompareWithSmolCheck(_:_:expecting:)(v222, v168, v225, v224, 0LL);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        if ((v226 & 1) == 0)
                        {
                          uint64_t v227 = static String._unconditionallyBridgeFromObjectiveC(_:)(v239);
                          uint64_t v229 = v228;
                          uint64_t v231 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
                          if (v227 == v231 && v229 == v230)
                          {
                            swift_bridgeObjectRelease_n(v229, 2LL);
                          }

                          else
                          {
                            char v232 = _stringCompareWithSmolCheck(_:_:expecting:)(v227, v229, v231, v230, 0LL);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            if ((v232 & 1) == 0) {
                              goto LABEL_70;
                            }
                          }

                          uint64_t v305 = v244;
                          goto LABEL_70;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }

uint64_t sub_1002BDFA4(uint64_t a1, int a2, uint64_t a3)
{
  LODWORD(v291) = a2;
  uint64_t v5 = sub_100004AEC(&qword_1009AA900);
  __chkstk_darwin(v5);
  uint64_t v269 = (uint64_t)&v238 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord(0LL);
  uint64_t v7 = *(void *)(found - 8);
  __chkstk_darwin(found);
  uint64_t v267 = (uint64_t)&v238 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009AA840);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v273 = (uint64_t)&v238 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v275 = (uint64_t)&v238 - v12;
  uint64_t v13 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v266 = (char *)&v238 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v238 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v289 = (uint64_t)&v238 - v20;
  __chkstk_darwin(v19);
  uint64_t v294 = (uint64_t)&v238 - v21;
  uint64_t v297 = type metadata accessor for Date(0LL);
  uint64_t v293 = *(void *)(v297 - 8);
  uint64_t v22 = __chkstk_darwin(v297);
  uint64_t v271 = (char *)&v238 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v292 = (char *)&v238 - v25;
  __chkstk_darwin(v24);
  uint64_t v290 = (char *)&v238 - v26;
  uint64_t v27 = type metadata accessor for UUID(0LL);
  uint64_t v28 = *(void *)(v27 - 8);
  uint64_t v29 = __chkstk_darwin(v27);
  unsigned __int8 v265 = (char *)&v238 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v270 = (char *)&v238 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v274 = (char *)&v238 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v281 = (char *)&v238 - v36;
  __chkstk_darwin(v35);
  uint64_t v38 = (char *)&v238 - v37;
  uint64_t v39 = type metadata accessor for OwnedBeaconRecord(0LL);
  v307[3] = v39;
  v307[4] = sub_100007864( (unint64_t *)&qword_10099D000,  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_10080B120);
  uint64_t v40 = sub_10000A7C8(v307);
  sub_10001DC4C(a1, (uint64_t)v40, type metadata accessor for OwnedBeaconRecord);
  uint64_t v41 = sub_100004AEC(&qword_1009A7D88);
  OS_dispatch_queue.sync<A>(execute:)(sub_1002DDE74, a3, v41);
  uint64_t v42 = aBlock;
  uint64_t v43 = (char *)v40 + *(int *)(v39 + 20);
  uint64_t v295 = v28;
  uint64_t v44 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
  uint64_t v296 = v27;
  v44(v38, v43, v27);
  uint64_t v45 = v42[2];
  uint64_t v272 = v18;
  uint64_t v284 = v42;
  if (v45)
  {
    sub_10030D124((uint64_t)v38);
    if ((v46 & 1) != 0) {
      uint64_t v47 = 0LL;
    }
    else {
      uint64_t v47 = 2LL;
    }
  }

  else
  {
    uint64_t v47 = 2LL;
  }

  uint64_t v287 = *(void (**)(char *, uint64_t))(v295 + 8);
  v287(v38, v296);
  unint64_t v48 = sub_1002C2438((uint64_t)v40, a3);
  uint64_t v49 = v48[2];
  if (!v49)
  {
    swift_bridgeObjectRelease();
    uint64_t v237 = 0LL;
    uint64_t v236 = 0LL;
    uint64_t v235 = 0LL;
    uint64_t v234 = 0LL;
    uint64_t v53 = (void **)&_swiftEmptyDictionarySingleton;
LABEL_128:
    swift_bridgeObjectRelease();
    sub_10002214C((uint64_t)v237, v236);
    sub_10002214C((uint64_t)v235, v234);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v307);
    return (uint64_t)v53;
  }

  uint64_t v245 = v47;
  uint64_t v261 = v44;
  uint64_t v262 = v43;
  uint64_t v258 = v40;
  uint64_t v246 = v7;
  uint64_t v263 = a3;
  v279 = 0LL;
  os_log_type_t v280 = 0LL;
  uint64_t v277 = 0LL;
  uint64_t v278 = 0LL;
  uint64_t v257 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorModQueue;
  uint64_t v256 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_soundPlaybackManager;
  uint64_t v288 = SPBeaconTaskNameUnknown;
  uint64_t v286 = SPBeaconTaskNameStartSharing;
  uint64_t v283 = SPBeaconTaskNameStopSharing;
  uint64_t v264 = SPBeaconTaskNameEnableLostMode;
  uint64_t v260 = SPBeaconTaskNameDisableLostMode;
  uint64_t v259 = SPBeaconTaskNamePlaySound;
  uint64_t v255 = SPBeaconTaskNameStopSound;
  uint64_t v254 = SPBeaconTaskNameBeginLeashing;
  uint64_t v253 = SPBeaconTaskNameEndLeashing;
  uint64_t v252 = SPBeaconTaskNameBeginBTFinding;
  uint64_t v251 = SPBeaconTaskNameEndBTFinding;
  uint64_t v250 = SPBeaconTaskNameConnect;
  uint64_t v249 = SPBeaconTaskNameDisconnect;
  uint64_t v248 = SPBeaconTaskNameRename;
  uint64_t v247 = SPBeaconTaskNameBeginRanging;
  uint64_t v244 = SPBeaconTaskNameEndRanging;
  uint64_t v243 = SPBeaconTaskNameAccessoryFirmwareUpdate;
  uint64_t v242 = SPBeaconTaskNameEnableNotifyWhenFound;
  uint64_t v241 = SPBeaconTaskNameDisableNotifyWhenFound;
  uint64_t v240 = SPBeaconTaskNameLocating;
  uint64_t v276 = v48;
  unint64_t v50 = (void **)(v48 + 4);
  uint64_t v51 = 2LL;
  else {
    uint64_t v52 = 0LL;
  }
  uint64_t v282 = v52;
  uint64_t v285 = v51;
  uint64_t v53 = (void **)&_swiftEmptyDictionarySingleton;
  uint64_t v54 = v294;
  os_log_type_t v55 = v290;
  while (1)
  {
    uint64_t v291 = v53;
    uint64_t v61 = *v50;
    uint64_t v306 = 2LL;
    id v62 = v61;
    Date.init()(v62);
    id v305 = 0LL;
    unint64_t v63 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v295 + 56);
    v63(v54, 1LL, 1LL, v296);
    uint64_t v64 = static String._unconditionallyBridgeFromObjectiveC(_:)(v288);
    uint64_t v66 = v65;
    uint64_t v67 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
    if (v64 == v67 && v66 == v68)
    {
      swift_bridgeObjectRelease_n(v66, 2LL);
LABEL_24:
      uint64_t v76 = -1LL;
      goto LABEL_25;
    }

    char v70 = _stringCompareWithSmolCheck(_:_:expecting:)(v64, v66, v67, v68, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v70 & 1) != 0) {
      goto LABEL_24;
    }
    uint64_t v71 = static String._unconditionallyBridgeFromObjectiveC(_:)(v286);
    uint64_t v73 = v72;
    uint64_t v75 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
    if (v71 == v75 && v73 == v74)
    {
      swift_bridgeObjectRelease_n(v73, 2LL);
LABEL_32:
      uint64_t v76 = v285;
      goto LABEL_25;
    }

    char v86 = _stringCompareWithSmolCheck(_:_:expecting:)(v71, v73, v75, v74, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v86 & 1) != 0) {
      goto LABEL_32;
    }
    uint64_t v87 = static String._unconditionallyBridgeFromObjectiveC(_:)(v283);
    uint64_t v89 = v88;
    uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
    if (v87 == v91 && v89 == v90)
    {
      swift_bridgeObjectRelease_n(v89, 2LL);
LABEL_37:
      uint64_t v76 = v282;
LABEL_25:
      uint64_t v306 = v76;
      goto LABEL_26;
    }

    char v92 = _stringCompareWithSmolCheck(_:_:expecting:)(v87, v89, v91, v90, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v92 & 1) != 0) {
      goto LABEL_37;
    }
    uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v264);
    uint64_t v95 = v94;
    uint64_t v97 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
    if (v93 == v97 && v95 == v96)
    {
      swift_bridgeObjectRelease_n(v95, 2LL);
LABEL_42:
      uint64_t v99 = (uint64_t)v281;
      v261(v281, v262, v296);
      unint64_t v100 = sub_100577004(v99);
      uint64_t v101 = v100[2];
      uint64_t v102 = type metadata accessor for LostModeRecord(0LL);
      uint64_t v103 = *(void *)(v102 - 8);
      if (v101)
      {
        uint64_t v104 = v275;
        sub_10001DC4C( (uint64_t)v100 + ((*(unsigned __int8 *)(v103 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v103 + 80)),  v275,  type metadata accessor for LostModeRecord);
        uint64_t v105 = 0LL;
      }

      else
      {
        uint64_t v105 = 1LL;
        uint64_t v104 = v275;
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v103 + 56))(v104, v105, 1LL, v102);
      swift_bridgeObjectRelease();
      v287(v281, v296);
      int v106 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v103 + 48))(v104, 1LL, v102);
      sub_100015794(v104, &qword_1009AA840);
      if (v106 != 1) {
        goto LABEL_55;
      }
LABEL_46:
      uint64_t v76 = 2LL;
      goto LABEL_25;
    }

    char v98 = _stringCompareWithSmolCheck(_:_:expecting:)(v93, v95, v97, v96, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v98 & 1) != 0) {
      goto LABEL_42;
    }
    uint64_t v107 = static String._unconditionallyBridgeFromObjectiveC(_:)(v260);
    uint64_t v109 = v108;
    uint64_t v111 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
    if (v107 == v111 && v109 == v110)
    {
      swift_bridgeObjectRelease_n(v109, 2LL);
LABEL_51:
      uint64_t v113 = (uint64_t)v274;
      v261(v274, v262, v296);
      unint64_t v114 = sub_100577004(v113);
      uint64_t v115 = v114[2];
      uint64_t v116 = type metadata accessor for LostModeRecord(0LL);
      uint64_t v117 = *(void *)(v116 - 8);
      if (v115)
      {
        uint64_t v118 = v273;
        sub_10001DC4C( (uint64_t)v114 + ((*(unsigned __int8 *)(v117 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v117 + 80)),  v273,  type metadata accessor for LostModeRecord);
        uint64_t v119 = 0LL;
      }

      else
      {
        uint64_t v119 = 1LL;
        uint64_t v118 = v273;
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v117 + 56))(v118, v119, 1LL, v116);
      swift_bridgeObjectRelease();
      v287(v274, v296);
      int v120 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v117 + 48))(v118, 1LL, v116);
      sub_100015794(v118, &qword_1009AA840);
      if (v120 == 1)
      {
LABEL_55:
        uint64_t v306 = 0LL;
        goto LABEL_26;
      }

      goto LABEL_46;
    }

    char v112 = _stringCompareWithSmolCheck(_:_:expecting:)(v107, v109, v111, v110, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v112 & 1) != 0) {
      goto LABEL_51;
    }
    uint64_t v121 = static String._unconditionallyBridgeFromObjectiveC(_:)(v259);
    uint64_t v123 = v122;
    uint64_t v125 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
    if (v121 == v125 && v123 == v124) {
      break;
    }
    char v126 = _stringCompareWithSmolCheck(_:_:expecting:)(v121, v123, v125, v124, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v126 & 1) != 0) {
      goto LABEL_60;
    }
    uint64_t v146 = static String._unconditionallyBridgeFromObjectiveC(_:)(v255);
    uint64_t v148 = v147;
    uint64_t v150 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
    if (v146 == v150 && v148 == v149)
    {
      swift_bridgeObjectRelease_n(v148, 2LL);
    }

    else
    {
      char v151 = _stringCompareWithSmolCheck(_:_:expecting:)(v146, v148, v150, v149, 0LL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v151 & 1) == 0)
      {
        uint64_t v156 = static String._unconditionallyBridgeFromObjectiveC(_:)(v254);
        uint64_t v158 = v157;
        uint64_t v160 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
        if (v156 == v160 && v158 == v159) {
          goto LABEL_76;
        }
        char v161 = _stringCompareWithSmolCheck(_:_:expecting:)(v156, v158, v160, v159, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v161 & 1) != 0) {
          goto LABEL_78;
        }
        uint64_t v162 = static String._unconditionallyBridgeFromObjectiveC(_:)(v253);
        uint64_t v158 = v163;
        uint64_t v165 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
        if (v162 == v165 && v158 == v164)
        {
LABEL_76:
          swift_bridgeObjectRelease_n(v158, 2LL);
LABEL_78:
          uint64_t v306 = sub_1002B938C((uint64_t)v258, v263);
          goto LABEL_26;
        }

        char v166 = _stringCompareWithSmolCheck(_:_:expecting:)(v162, v158, v165, v164, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v166 & 1) != 0) {
          goto LABEL_78;
        }
        uint64_t v167 = static String._unconditionallyBridgeFromObjectiveC(_:)(v252);
        uint64_t v169 = v168;
        uint64_t v171 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
        if (v167 == v171 && v169 == v170)
        {
LABEL_84:
          swift_bridgeObjectRelease_n(v169, 2LL);
          goto LABEL_86;
        }

        char v172 = _stringCompareWithSmolCheck(_:_:expecting:)(v167, v169, v171, v170, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v172 & 1) == 0)
        {
          uint64_t v173 = static String._unconditionallyBridgeFromObjectiveC(_:)(v251);
          uint64_t v169 = v174;
          uint64_t v176 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
          if (v173 == v176 && v169 == v175) {
            goto LABEL_84;
          }
          char v177 = _stringCompareWithSmolCheck(_:_:expecting:)(v173, v169, v176, v175, 0LL);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v177 & 1) == 0)
          {
            uint64_t v178 = static String._unconditionallyBridgeFromObjectiveC(_:)(v250);
            uint64_t v169 = v179;
            uint64_t v181 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
            if (v178 == v181 && v169 == v180) {
              goto LABEL_84;
            }
            char v182 = _stringCompareWithSmolCheck(_:_:expecting:)(v178, v169, v181, v180, 0LL);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v182 & 1) == 0)
            {
              uint64_t v183 = static String._unconditionallyBridgeFromObjectiveC(_:)(v249);
              uint64_t v169 = v184;
              uint64_t v186 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
              if (v183 == v186 && v169 == v185) {
                goto LABEL_84;
              }
              char v187 = _stringCompareWithSmolCheck(_:_:expecting:)(v183, v169, v186, v185, 0LL);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              if ((v187 & 1) == 0)
              {
                uint64_t v188 = static String._unconditionallyBridgeFromObjectiveC(_:)(v248);
                uint64_t v169 = v189;
                uint64_t v191 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
                if (v188 == v191 && v169 == v190) {
                  goto LABEL_84;
                }
                char v192 = _stringCompareWithSmolCheck(_:_:expecting:)(v188, v169, v191, v190, 0LL);
                swift_bridgeObjectRelease();
                swift_bridgeObjectRelease();
                if ((v192 & 1) == 0)
                {
                  uint64_t v193 = static String._unconditionallyBridgeFromObjectiveC(_:)(v247);
                  uint64_t v169 = v194;
                  uint64_t v196 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
                  if (v193 == v196 && v169 == v195) {
                    goto LABEL_84;
                  }
                  char v197 = _stringCompareWithSmolCheck(_:_:expecting:)(v193, v169, v196, v195, 0LL);
                  swift_bridgeObjectRelease();
                  swift_bridgeObjectRelease();
                  if ((v197 & 1) == 0)
                  {
                    uint64_t v198 = static String._unconditionallyBridgeFromObjectiveC(_:)(v244);
                    uint64_t v169 = v199;
                    uint64_t v201 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
                    if (v198 == v201 && v169 == v200) {
                      goto LABEL_84;
                    }
                    char v202 = _stringCompareWithSmolCheck(_:_:expecting:)(v198, v169, v201, v200, 0LL);
                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    if ((v202 & 1) == 0)
                    {
                      uint64_t v203 = static String._unconditionallyBridgeFromObjectiveC(_:)(v243);
                      uint64_t v169 = v204;
                      uint64_t v206 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
                      if (v203 == v206 && v169 == v205) {
                        goto LABEL_84;
                      }
                      char v207 = _stringCompareWithSmolCheck(_:_:expecting:)(v203, v169, v206, v205, 0LL);
                      swift_bridgeObjectRelease();
                      swift_bridgeObjectRelease();
                      if ((v207 & 1) == 0)
                      {
                        uint64_t v208 = static String._unconditionallyBridgeFromObjectiveC(_:)(v242);
                        uint64_t v210 = v209;
                        uint64_t v212 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
                        if (v208 == v212 && v210 == v211)
                        {
                          swift_bridgeObjectRelease_n(v210, 2LL);
                          goto LABEL_112;
                        }

                        char v213 = _stringCompareWithSmolCheck(_:_:expecting:)(v208, v210, v212, v211, 0LL);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        if ((v213 & 1) != 0)
                        {
LABEL_112:
                          uint64_t v214 = (uint64_t)v265;
                          v261(v265, v262, v296);
                          uint64_t v215 = sub_100577F1C(v214);
                          if (v215[2])
                          {
                            sub_10001DC4C( (uint64_t)v215 + ((*(unsigned __int8 *)(v246 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v246 + 80)),  v269,  type metadata accessor for NotifyWhenFoundRecord);
                            uint64_t v216 = 0LL;
                          }

                          else
                          {
                            uint64_t v216 = 1LL;
                          }

                          uint64_t v217 = v246;
                          uint64_t v218 = v269;
                          uint64_t v219 = found;
                          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v246 + 56))( v269,  v216,  1LL,  found);
                          swift_bridgeObjectRelease();
                          v287(v265, v296);
                          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v217 + 48))(v218, 1LL, v219) == 1)
                          {
                            sub_100015794(v269, &qword_1009AA900);
                            goto LABEL_86;
                          }

                          uint64_t v220 = v267;
                          sub_10002218C(v269, v267, type metadata accessor for NotifyWhenFoundRecord);
                          uint64_t v221 = (uint64_t)v266;
                          uint64_t v222 = v296;
                          v261(v266, (char *)(v220 + *(int *)(found + 20)), v296);
                          sub_100018C68(v220, type metadata accessor for NotifyWhenFoundRecord);
                          v63(v221, 0LL, 1LL, v222);
                          sub_1000D4D50(v221, v294, &qword_10099D8A0);
                          uint64_t v306 = 0LL;
LABEL_70:
                          os_log_type_t v55 = v290;
                          goto LABEL_26;
                        }

                        uint64_t v223 = static String._unconditionallyBridgeFromObjectiveC(_:)(v241);
                        uint64_t v169 = v224;
                        uint64_t v226 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
                        if (v223 == v226 && v169 == v225) {
                          goto LABEL_84;
                        }
                        char v227 = _stringCompareWithSmolCheck(_:_:expecting:)(v223, v169, v226, v225, 0LL);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        if ((v227 & 1) == 0)
                        {
                          uint64_t v228 = static String._unconditionallyBridgeFromObjectiveC(_:)(v240);
                          uint64_t v230 = v229;
                          uint64_t v232 = static String._unconditionallyBridgeFromObjectiveC(_:)(v62);
                          if (v228 == v232 && v230 == v231)
                          {
                            swift_bridgeObjectRelease_n(v230, 2LL);
                          }

                          else
                          {
                            char v233 = _stringCompareWithSmolCheck(_:_:expecting:)(v228, v230, v232, v231, 0LL);
                            swift_bridgeObjectRelease();
                            swift_bridgeObjectRelease();
                            if ((v233 & 1) == 0) {
                              goto LABEL_70;
                            }
                          }

                          uint64_t v306 = v245;
                          goto LABEL_70;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }

uint64_t sub_1002BF9E0(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  LODWORD(v296) = a2;
  uint64_t v9 = sub_100004AEC(&qword_1009AA900);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v242 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord(0LL);
  uint64_t v271 = *(void *)(found - 8);
  __chkstk_darwin(found);
  uint64_t v270 = (uint64_t)&v242 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_1009AA840);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v277 = (uint64_t)&v242 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v279 = (uint64_t)&v242 - v16;
  uint64_t v17 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v269 = (char *)&v242 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v242 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v297 = (uint64_t)&v242 - v24;
  __chkstk_darwin(v23);
  uint64_t v300 = (uint64_t)&v242 - v25;
  uint64_t v303 = type metadata accessor for Date(0LL);
  uint64_t v299 = *(void *)(v303 - 8);
  uint64_t v26 = __chkstk_darwin(v303);
  uint64_t v274 = (char *)&v242 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v298 = (char *)&v242 - v29;
  __chkstk_darwin(v28);
  uint64_t v31 = (char *)&v242 - v30;
  uint64_t v302 = type metadata accessor for UUID(0LL);
  uint64_t v301 = *(void *)(v302 - 8);
  uint64_t v32 = __chkstk_darwin(v302);
  uint64_t v268 = (char *)&v242 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v276 = (char *)&v242 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v278 = (char *)&v242 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v287 = (char *)&v242 - v39;
  __chkstk_darwin(v38);
  uint64_t v41 = (char *)&v242 - v40;
  v313[3] = a4;
  v313[4] = a5;
  uint64_t v42 = sub_10000A7C8(v313);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a4 - 8) + 16LL))(v42, a1, a4);
  uint64_t v43 = sub_100004AEC(&qword_1009A7D88);
  uint64_t v44 = 0LL;
  OS_dispatch_queue.sync<A>(execute:)(sub_1002DDE74, a3, v43);
  uint64_t v45 = *(void *)(a5[1] + 8LL);
  char v46 = *(void (**)(unint64_t, uint64_t))(v45 + 32);
  uint64_t v291 = v42;
  uint64_t v47 = aBlock;
  uint64_t v286 = v45;
  uint64_t v285 = v46;
  ((void (*)(uint64_t))v46)(a4);
  unint64_t v48 = v47[2];
  uint64_t v275 = v22;
  if (v48)
  {
    sub_10030D124((uint64_t)v41);
    uint64_t v50 = 2LL;
    if ((v49 & 1) != 0) {
      uint64_t v50 = 0LL;
    }
  }

  else
  {
    uint64_t v50 = 2LL;
  }

  uint64_t v273 = v50;
  uint64_t v51 = v302;
  uint64_t v294 = *(void (**)(char *, uint64_t))(v301 + 8);
  v294(v41, v302);
  uint64_t v52 = sub_1002C32D4((uint64_t)v291, a3, a4, (uint64_t)a5);
  uint64_t v53 = v52[2];
  uint64_t v290 = v52;
  if (!v53)
  {
    swift_bridgeObjectRelease();
    uint64_t v241 = 0LL;
    uint64_t v240 = 0LL;
    dispatch_queue_t v239 = 0LL;
    uint64_t v238 = 0LL;
    id v57 = (void **)&_swiftEmptyDictionarySingleton;
LABEL_129:
    swift_bridgeObjectRelease();
    sub_10002214C((uint64_t)v241, v240);
    sub_10002214C((uint64_t)v239, v238);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v313);
    return (uint64_t)v57;
  }

  os_log_type_t v280 = v47;
  uint64_t v250 = v11;
  uint64_t v266 = a3;
  unint64_t v265 = a4;
  uint64_t v262 = a5;
  uint64_t v283 = 0LL;
  uint64_t v284 = 0LL;
  uint64_t v281 = 0LL;
  uint64_t v282 = 0LL;
  uint64_t v261 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_playbackCoordinatorModQueue;
  uint64_t v260 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_soundPlaybackManager;
  uint64_t v295 = SPBeaconTaskNameUnknown;
  uint64_t v293 = SPBeaconTaskNameStartSharing;
  uint64_t v289 = SPBeaconTaskNameStopSharing;
  uint64_t v267 = SPBeaconTaskNameEnableLostMode;
  uint64_t v264 = SPBeaconTaskNameDisableLostMode;
  uint64_t v263 = SPBeaconTaskNamePlaySound;
  uint64_t v259 = SPBeaconTaskNameStopSound;
  uint64_t v258 = SPBeaconTaskNameBeginLeashing;
  uint64_t v257 = SPBeaconTaskNameEndLeashing;
  uint64_t v256 = SPBeaconTaskNameBeginBTFinding;
  uint64_t v255 = SPBeaconTaskNameEndBTFinding;
  uint64_t v254 = SPBeaconTaskNameConnect;
  uint64_t v253 = SPBeaconTaskNameDisconnect;
  uint64_t v252 = SPBeaconTaskNameRename;
  uint64_t v251 = SPBeaconTaskNameBeginRanging;
  uint64_t v249 = SPBeaconTaskNameEndRanging;
  uint64_t v248 = SPBeaconTaskNameAccessoryFirmwareUpdate;
  uint64_t v247 = SPBeaconTaskNameEnableNotifyWhenFound;
  uint64_t v246 = SPBeaconTaskNameDisableNotifyWhenFound;
  uint64_t v245 = SPBeaconTaskNameLocating;
  uint64_t v54 = (void **)(v52 + 4);
  uint64_t v55 = 2LL;
  else {
    uint64_t v56 = 0LL;
  }
  uint64_t v288 = v56;
  uint64_t v292 = v55;
  id v57 = (void **)&_swiftEmptyDictionarySingleton;
  uint64_t v58 = v300;
  uint64_t v296 = v31;
  while (1)
  {
    unint64_t v63 = *v54;
    uint64_t v312 = 2LL;
    id v64 = v63;
    Date.init()(v64);
    id v311 = 0LL;
    uint64_t v65 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v301 + 56);
    v65(v58, 1LL, 1LL, v51);
    uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v295);
    uint64_t v68 = v67;
    uint64_t v69 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    if (v66 == v69 && v68 == v70)
    {
      swift_bridgeObjectRelease_n(v68, 2LL);
LABEL_24:
      uint64_t v78 = -1LL;
      goto LABEL_25;
    }

    char v72 = _stringCompareWithSmolCheck(_:_:expecting:)(v66, v68, v69, v70, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v72 & 1) != 0) {
      goto LABEL_24;
    }
    uint64_t v73 = static String._unconditionallyBridgeFromObjectiveC(_:)(v293);
    uint64_t v75 = v74;
    uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    if (v73 == v77 && v75 == v76)
    {
      swift_bridgeObjectRelease_n(v75, 2LL);
LABEL_32:
      uint64_t v78 = v292;
      goto LABEL_25;
    }

    char v88 = _stringCompareWithSmolCheck(_:_:expecting:)(v73, v75, v77, v76, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v88 & 1) != 0) {
      goto LABEL_32;
    }
    uint64_t v89 = static String._unconditionallyBridgeFromObjectiveC(_:)(v289);
    uint64_t v91 = v90;
    uint64_t v93 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    if (v89 == v93 && v91 == v92)
    {
      swift_bridgeObjectRelease_n(v91, 2LL);
LABEL_37:
      uint64_t v78 = v288;
LABEL_25:
      uint64_t v312 = v78;
      goto LABEL_26;
    }

    char v94 = _stringCompareWithSmolCheck(_:_:expecting:)(v89, v91, v93, v92, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v94 & 1) != 0) {
      goto LABEL_37;
    }
    uint64_t v95 = static String._unconditionallyBridgeFromObjectiveC(_:)(v267);
    uint64_t v97 = v96;
    uint64_t v99 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    if (v95 == v99 && v97 == v98)
    {
      swift_bridgeObjectRelease_n(v97, 2LL);
LABEL_42:
      uint64_t v101 = (uint64_t)v287;
      v285(v265, v286);
      uint64_t v102 = sub_100577004(v101);
      uint64_t v103 = v102[2];
      uint64_t v104 = type metadata accessor for LostModeRecord(0LL);
      uint64_t v105 = *(void *)(v104 - 8);
      if (v103)
      {
        uint64_t v106 = v279;
        sub_10001DC4C( (uint64_t)v102 + ((*(unsigned __int8 *)(v105 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80)),  v279,  type metadata accessor for LostModeRecord);
        uint64_t v107 = 0LL;
      }

      else
      {
        uint64_t v107 = 1LL;
        uint64_t v106 = v279;
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v105 + 56))(v106, v107, 1LL, v104);
      swift_bridgeObjectRelease();
      v294(v287, v302);
      int v108 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v105 + 48))(v106, 1LL, v104);
      sub_100015794(v106, &qword_1009AA840);
      if (v108 != 1) {
        goto LABEL_55;
      }
LABEL_46:
      uint64_t v78 = 2LL;
      goto LABEL_25;
    }

    char v100 = _stringCompareWithSmolCheck(_:_:expecting:)(v95, v97, v99, v98, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v100 & 1) != 0) {
      goto LABEL_42;
    }
    uint64_t v109 = static String._unconditionallyBridgeFromObjectiveC(_:)(v264);
    uint64_t v111 = v110;
    uint64_t v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    if (v109 == v113 && v111 == v112)
    {
      swift_bridgeObjectRelease_n(v111, 2LL);
LABEL_51:
      uint64_t v115 = (uint64_t)v278;
      v285(v265, v286);
      uint64_t v116 = sub_100577004(v115);
      uint64_t v117 = v116[2];
      uint64_t v118 = type metadata accessor for LostModeRecord(0LL);
      uint64_t v119 = *(void *)(v118 - 8);
      if (v117)
      {
        uint64_t v120 = v277;
        sub_10001DC4C( (uint64_t)v116 + ((*(unsigned __int8 *)(v119 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v119 + 80)),  v277,  type metadata accessor for LostModeRecord);
        uint64_t v121 = 0LL;
      }

      else
      {
        uint64_t v121 = 1LL;
        uint64_t v120 = v277;
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v119 + 56))(v120, v121, 1LL, v118);
      swift_bridgeObjectRelease();
      v294(v278, v302);
      int v122 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v119 + 48))(v120, 1LL, v118);
      sub_100015794(v120, &qword_1009AA840);
      if (v122 == 1)
      {
LABEL_55:
        uint64_t v312 = 0LL;
        goto LABEL_26;
      }

      goto LABEL_46;
    }

    char v114 = _stringCompareWithSmolCheck(_:_:expecting:)(v109, v111, v113, v112, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v114 & 1) != 0) {
      goto LABEL_51;
    }
    uint64_t v123 = static String._unconditionallyBridgeFromObjectiveC(_:)(v263);
    uint64_t v125 = v124;
    uint64_t v127 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    if (v123 == v127 && v125 == v126) {
      break;
    }
    char v128 = _stringCompareWithSmolCheck(_:_:expecting:)(v123, v125, v127, v126, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v128 & 1) != 0) {
      goto LABEL_60;
    }
    uint64_t v149 = static String._unconditionallyBridgeFromObjectiveC(_:)(v259);
    uint64_t v151 = v150;
    uint64_t v153 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
    if (v149 == v153 && v151 == v152)
    {
      swift_bridgeObjectRelease_n(v151, 2LL);
    }

    else
    {
      char v154 = _stringCompareWithSmolCheck(_:_:expecting:)(v149, v151, v153, v152, 0LL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v154 & 1) == 0)
      {
        uint64_t v159 = static String._unconditionallyBridgeFromObjectiveC(_:)(v258);
        uint64_t v161 = v160;
        uint64_t v163 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v159 == v163 && v161 == v162)
        {
LABEL_75:
          swift_bridgeObjectRelease_n(v161, 2LL);
          goto LABEL_77;
        }

        char v164 = _stringCompareWithSmolCheck(_:_:expecting:)(v159, v161, v163, v162, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v164 & 1) != 0) {
          goto LABEL_77;
        }
        uint64_t v165 = static String._unconditionallyBridgeFromObjectiveC(_:)(v257);
        uint64_t v161 = v166;
        uint64_t v168 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v165 == v168 && v161 == v167) {
          goto LABEL_75;
        }
        char v169 = _stringCompareWithSmolCheck(_:_:expecting:)(v165, v161, v168, v167, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v169 & 1) != 0)
        {
LABEL_77:
          uint64_t v312 = sub_1004960C8((uint64_t)v291, v266, v265, v262);
          goto LABEL_26;
        }

        uint64_t v170 = static String._unconditionallyBridgeFromObjectiveC(_:)(v256);
        uint64_t v172 = v171;
        uint64_t v174 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v170 == v174 && v172 == v173)
        {
LABEL_83:
          swift_bridgeObjectRelease_n(v172, 2LL);
          goto LABEL_85;
        }

        char v175 = _stringCompareWithSmolCheck(_:_:expecting:)(v170, v172, v174, v173, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v175 & 1) != 0) {
          goto LABEL_85;
        }
        uint64_t v177 = static String._unconditionallyBridgeFromObjectiveC(_:)(v255);
        uint64_t v172 = v178;
        uint64_t v180 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v177 == v180 && v172 == v179) {
          goto LABEL_83;
        }
        char v181 = _stringCompareWithSmolCheck(_:_:expecting:)(v177, v172, v180, v179, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v181 & 1) != 0) {
          goto LABEL_85;
        }
        uint64_t v182 = static String._unconditionallyBridgeFromObjectiveC(_:)(v254);
        uint64_t v172 = v183;
        uint64_t v185 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v182 == v185 && v172 == v184) {
          goto LABEL_83;
        }
        char v186 = _stringCompareWithSmolCheck(_:_:expecting:)(v182, v172, v185, v184, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v186 & 1) != 0) {
          goto LABEL_85;
        }
        uint64_t v187 = static String._unconditionallyBridgeFromObjectiveC(_:)(v253);
        uint64_t v172 = v188;
        uint64_t v190 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v187 == v190 && v172 == v189) {
          goto LABEL_83;
        }
        char v191 = _stringCompareWithSmolCheck(_:_:expecting:)(v187, v172, v190, v189, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v191 & 1) != 0) {
          goto LABEL_85;
        }
        uint64_t v192 = static String._unconditionallyBridgeFromObjectiveC(_:)(v252);
        uint64_t v172 = v193;
        uint64_t v195 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v192 == v195 && v172 == v194) {
          goto LABEL_83;
        }
        char v196 = _stringCompareWithSmolCheck(_:_:expecting:)(v192, v172, v195, v194, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v196 & 1) != 0) {
          goto LABEL_85;
        }
        uint64_t v197 = static String._unconditionallyBridgeFromObjectiveC(_:)(v251);
        uint64_t v172 = v198;
        uint64_t v200 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v197 == v200 && v172 == v199) {
          goto LABEL_83;
        }
        char v201 = _stringCompareWithSmolCheck(_:_:expecting:)(v197, v172, v200, v199, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v201 & 1) != 0) {
          goto LABEL_85;
        }
        uint64_t v202 = static String._unconditionallyBridgeFromObjectiveC(_:)(v249);
        uint64_t v172 = v203;
        uint64_t v205 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v202 == v205 && v172 == v204) {
          goto LABEL_83;
        }
        char v206 = _stringCompareWithSmolCheck(_:_:expecting:)(v202, v172, v205, v204, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v206 & 1) != 0) {
          goto LABEL_85;
        }
        uint64_t v207 = static String._unconditionallyBridgeFromObjectiveC(_:)(v248);
        uint64_t v172 = v208;
        uint64_t v210 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v207 == v210 && v172 == v209) {
          goto LABEL_83;
        }
        char v211 = _stringCompareWithSmolCheck(_:_:expecting:)(v207, v172, v210, v209, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v211 & 1) != 0) {
          goto LABEL_85;
        }
        uint64_t v212 = static String._unconditionallyBridgeFromObjectiveC(_:)(v247);
        uint64_t v214 = v213;
        uint64_t v216 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v212 == v216 && v214 == v215)
        {
          swift_bridgeObjectRelease_n(v214, 2LL);
          goto LABEL_113;
        }

        char v217 = _stringCompareWithSmolCheck(_:_:expecting:)(v212, v214, v216, v215, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v217 & 1) != 0)
        {
LABEL_113:
          uint64_t v218 = (uint64_t)v268;
          v285(v265, v286);
          uint64_t v219 = sub_100577F1C(v218);
          if (v219[2])
          {
            sub_10001DC4C( (uint64_t)v219 + ((*(unsigned __int8 *)(v271 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v271 + 80)),  (uint64_t)v250,  type metadata accessor for NotifyWhenFoundRecord);
            uint64_t v220 = 0LL;
          }

          else
          {
            uint64_t v220 = 1LL;
          }

          uint64_t v221 = v271;
          uint64_t v222 = (uint64_t)v250;
          uint64_t v223 = found;
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v271 + 56))(v250, v220, 1LL, found);
          swift_bridgeObjectRelease();
          v294(v268, v302);
          if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v221 + 48))(v222, 1LL, v223) == 1)
          {
            sub_100015794((uint64_t)v250, &qword_1009AA900);
            goto LABEL_85;
          }

          uint64_t v224 = v270;
          sub_10002218C((uint64_t)v250, v270, type metadata accessor for NotifyWhenFoundRecord);
          uint64_t v225 = (uint64_t)v269;
          uint64_t v226 = v302;
          (*(void (**)(char *, uint64_t, uint64_t))(v301 + 16))(v269, v224 + *(int *)(found + 20), v302);
          sub_100018C68(v224, type metadata accessor for NotifyWhenFoundRecord);
          v65(v225, 0LL, 1LL, v226);
          sub_1000D4D50(v225, v300, &qword_10099D8A0);
          uint64_t v312 = 0LL;
LABEL_87:
          uint64_t v31 = v296;
          goto LABEL_26;
        }

        uint64_t v227 = static String._unconditionallyBridgeFromObjectiveC(_:)(v246);
        uint64_t v172 = v228;
        uint64_t v230 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
        if (v227 == v230 && v172 == v229) {
          goto LABEL_83;
        }
        char v231 = _stringCompareWithSmolCheck(_:_:expecting:)(v227, v172, v230, v229, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        if ((v231 & 1) != 0)
        {
LABEL_85:
          uint64_t v176 = 2LL;
        }

        else
        {
          uint64_t v232 = static String._unconditionallyBridgeFromObjectiveC(_:)(v245);
          uint64_t v234 = v233;
          uint64_t v236 = static String._unconditionallyBridgeFromObjectiveC(_:)(v64);
          if (v232 == v236 && v234 == v235)
          {
            swift_bridgeObjectRelease_n(v234, 2LL);
          }

          else
          {
            char v237 = _stringCompareWithSmolCheck(_:_:expecting:)(v232, v234, v236, v235, 0LL);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v237 & 1) == 0) {
              goto LABEL_87;
            }
          }

          uint64_t v176 = v273;
        }

        uint64_t v312 = v176;
        goto LABEL_87;
      }
    }

    uint64_t v155 = v266;
    dispatch_queue_t v244 = *(dispatch_queue_t *)(v266 + v261);
    sub_100013044((uint64_t)v313, (uint64_t)&v310);
    uint64_t v156 = (void *)swift_allocObject(&unk_10094DFB0, 96LL, 7LL);
    v156[2] = v155;
    sub_100012EC0(&v310, (uint64_t)(v156 + 3));
    char v156[8] = &v312;
    v156[9] = v31;
    v156[10] = &v311;
    v156[11] = v300;
    swift_retain();
    sub_10002214C((uint64_t)v281, (uint64_t)v282);
    uint64_t v157 = swift_allocObject(&unk_10094DFD8, 32LL, 7LL);
    *(void *)(v157 + swift_weakDestroy(v0 + 16) = sub_1002D72BC;
    *(void *)(v157 + 24) = v156;
    uint64_t v308 = sub_100154688;
    uint64_t v309 = v157;
    uint64_t aBlock = _NSConcreteStackBlock;
    uint64_t v305 = 1107296256LL;
    uint64_t v306 = sub_100025BD4;
    v307 = &unk_10094DFF0;
    uint64_t v158 = _Block_copy(&aBlock);
    swift_retain();
    swift_release();
    dispatch_sync(v244, v158);
    _Block_release(v158);
    LOBYTE(v155) = swift_isEscapingClosureAtFileLocation(v157, "", 151LL, 1926LL, 50LL, 1LL);
    uint64_t result = swift_release();
    if ((v155 & 1) != 0) {
      goto LABEL_131;
    }
    uint64_t v281 = sub_1002D72BC;
    uint64_t v282 = v156;
LABEL_26:
    (*(void (**)(char *, char *, uint64_t))(v299 + 16))(v298, v31, v303);
    id v80 = v311;
    uint64_t v79 = v312;
    id v81 = v64;
    swift_errorRetain(v80);
    v82.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
    if (v80)
    {
      uint64_t v83 = (void *)_convertErrorToNSError(_:)(v80);
      swift_errorRelease(v80);
    }

    else
    {
      uint64_t v83 = 0LL;
    }

    id v84 = [objc_allocWithZone(SPBeaconTaskInformation) initWithName:v81 lastUpdated:v82.super.isa error:v83 state:v79];

    uint64_t v85 = *(void (**)(char *, uint64_t))(v299 + 8);
    v85(v298, v303);
    uint64_t v86 = v297;
    sub_10001581C(v300, v297, &qword_10099D8A0);
    uint64_t v87 = v302;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v301 + 48))(v86, 1LL, v302) == 1)
    {
      v59.super.Class isa = 0LL;
    }

    else
    {
      v59.super.Class isa = UUID._bridgeToObjectiveC()().super.isa;
      v294((char *)v86, v87);
    }

    [v84 setCommandIdentifier:v59.super.isa];

    id v60 = v81;
    id v61 = v84;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v57);
    uint64_t aBlock = v57;
    sub_10005D250((uint64_t)v61, v60, isUniquelyReferenced_nonNull_native);
    id v57 = aBlock;

    swift_bridgeObjectRelease();
    uint64_t v58 = v300;
    sub_100015794(v300, &qword_10099D8A0);
    swift_errorRelease(v311);
    uint64_t v31 = v296;
    v85(v296, v303);
    ++v54;
    --v53;
    uint64_t v51 = v302;
    if (!v53)
    {
      swift_bridgeObjectRelease();
      uint64_t v238 = (uint64_t)v282;
      dispatch_queue_t v239 = v281;
      uint64_t v240 = (uint64_t)v284;
      uint64_t v241 = v283;
      goto LABEL_129;
    }
  }

  swift_bridgeObjectRelease_n(v125, 2LL);
LABEL_60:
  unint64_t v129 = v265;
  if ((((uint64_t (*)(unint64_t))v262[18])(v265) & 1) != 0)
  {
    uint64_t v130 = *(void *)(v266 + v260);
    uint64_t v131 = ((uint64_t (*)(unint64_t, uint64_t))v285)(v129, v286);
    dispatch_queue_t v244 = (dispatch_queue_t)&v242;
    __chkstk_darwin(v131);
    *(&v242 - 2) = v130;
    id v132 = v276;
    *(&v242 - 1) = (uint64_t)v276;
    uint64_t v133 = sub_100022898(0LL, (unint64_t *)&unk_1009AE4B0, &OBJC_CLASS___SPBeaconTaskInformation_ptr);
    OS_dispatch_queue.sync<A>(execute:)(sub_1002DDFD4, &v242 - 4, v133);
    id v134 = aBlock;
    v294(v132, v302);
    uint64_t v312 = (uint64_t)[v134 state];
    id v135 = [v134 lastUpdated];
    id v136 = v274;
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v135);

    (*(void (**)(char *, char *, uint64_t))(v299 + 40))(v31, v136, v303);
    id v137 = [v134 error];
    id v138 = v311;
    id v311 = v137;
    swift_errorRelease(v138);
    uint64_t v139 = (void **)[v134 commandIdentifier];
    if (v139)
    {
      uint64_t v140 = v139;
      uint64_t v141 = (uint64_t)v275;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v139);

      id v134 = v140;
      uint64_t v142 = 0LL;
    }

    else
    {
      uint64_t v142 = 1LL;
      uint64_t v141 = (uint64_t)v275;
    }

    v65(v141, v142, 1LL, v302);
    sub_1000D4D50(v141, v300, &qword_10099D8A0);
    goto LABEL_26;
  }

  uint64_t v243 = v44;
  uint64_t v143 = v266;
  dispatch_queue_t v244 = *(dispatch_queue_t *)(v266 + v261);
  sub_100013044((uint64_t)v313, (uint64_t)&v310);
  uint64_t v144 = (void *)swift_allocObject(&unk_10094E028, 96LL, 7LL);
  v144[2] = v143;
  sub_100012EC0(&v310, (uint64_t)(v144 + 3));
  char v144[8] = &v312;
  v144[9] = v31;
  v144[10] = &v311;
  v144[11] = v300;
  swift_retain();
  sub_10002214C((uint64_t)v283, (uint64_t)v284);
  uint64_t v145 = swift_allocObject(&unk_10094E050, 32LL, 7LL);
  *(void *)(v145 + swift_weakDestroy(v0 + 16) = sub_1002D72E0;
  *(void *)(v145 + 24) = v144;
  uint64_t v308 = sub_100154688;
  uint64_t v309 = v145;
  uint64_t aBlock = _NSConcreteStackBlock;
  uint64_t v305 = 1107296256LL;
  uint64_t v306 = sub_100025BD4;
  v307 = &unk_10094E068;
  uint64_t v146 = _Block_copy(&aBlock);
  swift_retain();
  swift_release();
  dispatch_sync(v244, v146);
  _Block_release(v146);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v145, "", 151LL, 1915LL, 54LL, 1LL);
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) == 0)
  {
    uint64_t v283 = sub_1002D72E0;
    uint64_t v284 = v144;
    uint64_t v44 = v243;
    goto LABEL_26;
  }

  __break(1u);
LABEL_131:
  __break(1u);
  return result;
}

uint64_t sub_1002C1464(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v89 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v89 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v89 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v94 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v92 = (char *)&v89 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v93 = (char *)&v89 - v17;
  uint64_t v95 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  v100[3] = v95;
  v100[4] = sub_100007864( (unint64_t *)&qword_10099D000,  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_10080B120);
  uint64_t v18 = sub_10000A7C8(v100);
  sub_10001DC4C(a1, (uint64_t)v18, type metadata accessor for OwnedBeaconRecord);
  if ((sub_1002C22EC((uint64_t)v18, a2) & 1) == 0)
  {
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v34 = type metadata accessor for Logger(0LL);
    sub_10000A720(v34, (uint64_t)qword_100A2AAA0);
    uint64_t v35 = sub_100013044((uint64_t)v100, (uint64_t)v98);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc(22LL, -1LL);
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v23 = 141558275;
      uint64_t v96 = 1752392040LL;
      uint64_t v97 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v23 + 4, v23 + 12);
      *(_WORD *)(v23 + 12) = 2081;
      uint64_t v36 = v14;
      uint64_t v92 = (char *)(v23 + 14);
      uint64_t v37 = (char *)sub_100012ED8(v98, v99);
      uint64_t v38 = v94;
      uint64_t v39 = v93;
      (*(void (**)(char *, char *, uint64_t))(v94 + 16))(v93, &v37[v95[5]], v14);
      uint64_t v40 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(v14, v40);
      unint64_t v43 = v42;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v36);
      uint64_t v96 = sub_1003F11D4(v41, v43, &v97);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v96, &v97, v92, v23 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v98);
      uint64_t v33 = "Can't monitor beacon: %{private,mask.hash}s due to: unsupported beacon.";
      goto LABEL_11;
    }

uint64_t sub_1002C1FA4(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009AA870);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v12[-1] - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord(0LL);
  v12[3] = v5;
  v12[4] = sub_100007864( (unint64_t *)&qword_10099D000,  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_10080B120);
  uint64_t v6 = sub_10000A7C8(v12);
  sub_10001DC4C(a1, (uint64_t)v6, type metadata accessor for OwnedBeaconRecord);
  sub_10050B884((uint64_t)v6 + *(int *)(v5 + 20), (uint64_t)v4);
  uint64_t v7 = type metadata accessor for BeaconProductInfoRecord(0LL);
  LODWORD(a1) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 48LL))(v4, 1LL, v7);
  sub_100015794((uint64_t)v4, &qword_1009AA870);
  if ((_DWORD)a1 == 1)
  {
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009B1080);
    uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
    *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    sub_100013044((uint64_t)v12, v9 + 32);
    sub_1006B4F24(v9, 1, 0LL, 0LL);
    swift_bridgeObjectRelease();
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
}

uint64_t sub_1002C2124(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v20[-1] - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_1009AA870);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v20[-1] - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v20[3] = a3;
  v20[4] = a4;
  uint64_t v14 = sub_10000A7C8(v20);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16LL))(v14, a1, a3);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(a4 + 8) + 8LL) + 32LL))(a3);
  sub_10050B884((uint64_t)v10, (uint64_t)v13);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  uint64_t v15 = type metadata accessor for BeaconProductInfoRecord(0LL);
  LODWORD(a4) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v13, 1LL, v15);
  sub_100015794((uint64_t)v13, &qword_1009AA870);
  if ((_DWORD)a4 == 1)
  {
    uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009B1080);
    uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
    *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    sub_100013044((uint64_t)v20, v17 + 32);
    sub_1006B4F24(v17, 1, 0LL, 0LL);
    swift_bridgeObjectRelease();
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v20);
}

uint64_t sub_1002C22EC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(a1, (uint64_t)v6, v7);
  sub_1005D3A0C();
  uint64_t v9 = v8;
  uint64_t v10 = SPBeaconTypeVirtualMeDevice;
  uint64_t v11 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
  uint64_t v13 = v12;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v10);
  if (v11 == v14 && v13 == v15)
  {

    swift_bridgeObjectRelease();
    goto LABEL_9;
  }

  char v17 = _stringCompareWithSmolCheck(_:_:expecting:)(v11, v13, v14, v15, 0LL);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  char v18 = 0;
  if ((v17 & 1) == 0)
  {
    uint64_t v19 = sub_1002BBAD8((uint64_t)v6, *(void *)(a2 + 256));
    if ((sub_1004E4F28(8u, (uint64_t)v19) & 1) != 0)
    {
      char v18 = sub_1004E4F28(9u, (uint64_t)v19);
LABEL_10:
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }

void *sub_1002C2438(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009AA870);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for BeaconProductInfoRecord(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  _OWORD v37[3] = v4;
  v37[4] = sub_100007864( (unint64_t *)&qword_10099D000,  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_10080B120);
  uint64_t v14 = sub_10000A7C8(v37);
  sub_10001DC4C(a1, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
  if ((sub_1005D38B0() & 1) == 0)
  {
    uint64_t v15 = sub_1002BBAD8((uint64_t)v14, *(void *)(a2 + 256));
    int64_t v16 = v15[2];
    if (!v16)
    {
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }

    v35[0] = _swiftEmptyArrayStorage;
    sub_100032D90(0, v16, 0);
    uint64_t v17 = sub_1006F6728(v15);
    v33[20] = SPBeaconTaskNameUnpair;
    uint64_t v34 = (char *)(v15 + 7);
    v33[19] = SPBeaconTaskNameAccessoryFirmwareUpdate;
    v33[18] = SPBeaconTaskNameStopSharing;
    v33[17] = SPBeaconTaskNameStartSharing;
    v33[16] = SPBeaconTaskNameRename;
    v33[15] = SPBeaconTaskNameDisconnect;
    v33[14] = SPBeaconTaskNameConnect;
    v33[13] = SPBeaconTaskNameDisableLostMode;
    v33[12] = SPBeaconTaskNameEnableLostMode;
    v33[11] = SPBeaconTaskNameEndRanging;
    v33[10] = SPBeaconTaskNameBeginRanging;
    v33[9] = SPBeaconTaskNameEndBTFinding;
    v33[8] = SPBeaconTaskNameBeginBTFinding;
    v33[7] = SPBeaconTaskNameEndLeashing;
    v33[6] = SPBeaconTaskNameBeginLeashing;
    uint64_t v33[5] = SPBeaconTaskNameStopSound;
    v33[4] = SPBeaconTaskNamePlaySound;
    void v33[3] = SPBeaconTaskNameLocating;
    void v33[2] = SPBeaconTaskNameDisableNotifyWhenFound;
    v33[1] = SPBeaconTaskNameEnableNotifyWhenFound;
    if (v17 < 0 || v17 >= 1LL << *((_BYTE *)v15 + 32))
    {
      __break(1u);
    }

    else if (((*(void *)&v34[((unint64_t)v17 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v17) & 1) != 0)
    {
      if (*((_DWORD *)v15 + 9) == v18) {
        __asm { BR              X9 }
      }

void *sub_1002C2B78(uint64_t a1, char *a2)
{
  uint64_t v36 = a2;
  uint64_t v3 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_1009AA870);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for BeaconProductInfoRecord(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)v35 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for SharedBeaconRecord(0LL);
  v39[3] = v13;
  _OWORD v39[4] = sub_100007864(&qword_10099CFF8, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_10081ADAC);
  uint64_t v14 = sub_10000A7C8(v39);
  sub_10001DC4C(a1, (uint64_t)v14, type metadata accessor for SharedBeaconRecord);
  if (!sub_100764974())
  {
    int64_t v16 = sub_1002BC020((uint64_t)v14, *((void *)v36 + 32));
    int64_t v17 = v16[2];
    if (!v17)
    {
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }

    v37[0] = _swiftEmptyArrayStorage;
    sub_100032D90(0, v17, 0);
    uint64_t v18 = sub_1006F6728(v16);
    v35[20] = SPBeaconTaskNameUnpair;
    uint64_t v36 = (char *)(v16 + 7);
    v35[19] = SPBeaconTaskNameAccessoryFirmwareUpdate;
    v35[18] = SPBeaconTaskNameStopSharing;
    v35[17] = SPBeaconTaskNameStartSharing;
    v35[16] = SPBeaconTaskNameRename;
    v35[15] = SPBeaconTaskNameDisconnect;
    v35[14] = SPBeaconTaskNameConnect;
    v35[13] = SPBeaconTaskNameDisableLostMode;
    v35[12] = SPBeaconTaskNameEnableLostMode;
    v35[11] = SPBeaconTaskNameEndRanging;
    v35[10] = SPBeaconTaskNameBeginRanging;
    v35[9] = SPBeaconTaskNameEndBTFinding;
    v35[8] = SPBeaconTaskNameBeginBTFinding;
    v35[7] = SPBeaconTaskNameEndLeashing;
    uint64_t v35[6] = SPBeaconTaskNameBeginLeashing;
    id v35[5] = SPBeaconTaskNameStopSound;
    v35[4] = SPBeaconTaskNamePlaySound;
    void v35[3] = SPBeaconTaskNameLocating;
    uint64_t v35[2] = SPBeaconTaskNameDisableNotifyWhenFound;
    v35[1] = SPBeaconTaskNameEnableNotifyWhenFound;
    if (v18 < 0 || v18 >= 1LL << *((_BYTE *)v16 + 32))
    {
      __break(1u);
    }

    else if (((*(void *)&v36[((unint64_t)v18 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v18) & 1) != 0)
    {
      if (*((_DWORD *)v16 + 9) == v19) {
        __asm { BR              X9 }
      }

void *sub_1002C32D4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v45 = (char *)a2;
  uint64_t v42 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v42);
  uint64_t v8 = (char *)v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v43 = *(void *)(v9 - 8);
  uint64_t v44 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009AA870);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for BeaconProductInfoRecord(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v48[3] = a3;
  v48[4] = a4;
  int v19 = sub_10000A7C8(v48);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16LL))(v19, a1, a3);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a4 + 104))(a3, a4) & 1) == 0)
  {
    uint64_t v20 = sub_10047A494((uint64_t)v19, *((void *)v45 + 32), a3, a4);
    int64_t v21 = v20[2];
    if (!v21)
    {
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }

    v46[0] = _swiftEmptyArrayStorage;
    sub_100032D90(0, v21, 0);
    uint64_t v22 = sub_1006F6728(v20);
    uint64_t v44 = SPBeaconTaskNameUnpair;
    uint64_t v45 = (char *)(v20 + 7);
    uint64_t v43 = SPBeaconTaskNameAccessoryFirmwareUpdate;
    uint64_t v42 = SPBeaconTaskNameStopSharing;
    uint64_t v41 = (char *)SPBeaconTaskNameStartSharing;
    v40[16] = SPBeaconTaskNameRename;
    v40[15] = SPBeaconTaskNameDisconnect;
    v40[14] = SPBeaconTaskNameConnect;
    v40[13] = SPBeaconTaskNameDisableLostMode;
    v40[12] = SPBeaconTaskNameEnableLostMode;
    v40[11] = SPBeaconTaskNameEndRanging;
    v40[10] = SPBeaconTaskNameBeginRanging;
    v40[9] = SPBeaconTaskNameEndBTFinding;
    v40[8] = SPBeaconTaskNameBeginBTFinding;
    v40[7] = SPBeaconTaskNameEndLeashing;
    v40[6] = SPBeaconTaskNameBeginLeashing;
    void v40[5] = SPBeaconTaskNameStopSound;
    v40[4] = SPBeaconTaskNamePlaySound;
    _OWORD v40[3] = SPBeaconTaskNameLocating;
    _OWORD v40[2] = SPBeaconTaskNameDisableNotifyWhenFound;
    v40[1] = SPBeaconTaskNameEnableNotifyWhenFound;
    if (v22 < 0 || v22 >= 1LL << *((_BYTE *)v20 + 32))
    {
      __break(1u);
    }

    else if (((*(void *)&v45[((unint64_t)v22 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v22) & 1) != 0)
    {
      if (*((_DWORD *)v20 + 9) == v23) {
        __asm { BR              X9 }
      }

uint64_t sub_1002C3A7C(void **a1, uint64_t a2, uint64_t a3, void (*a4)(char *))
{
  return sub_100504620(*a1, a2, a3, a4);
}

uint64_t sub_1002C3A84(void *a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5)
{
  uint64_t v32 = a5;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = (int *)type metadata accessor for BeaconEstimatedLocation(0LL);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v39 = sub_100007864( (unint64_t *)&qword_10099D000,  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_10080B120);
  uint64_t v16 = sub_10000A7C8(v37);
  uint64_t v17 = sub_10001DC4C(a3, (uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
  UUID.init()(v17);
  uint64_t v19 = v38;
  uint64_t v18 = v39;
  sub_100012ED8(v37, v38);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v18 + 8) + 8LL) + 32LL))(v19);
  [a1 latitude];
  uint64_t v21 = v20;
  [a1 longitude];
  uint64_t v23 = v22;
  [a1 horizontalAccuracy];
  uint64_t v25 = v24;
  id v26 = [a1 timestamp];
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v26);

  uint64_t v27 = &v15[v13[12]];
  uint64_t v28 = type metadata accessor for Date(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v29 + 16))(v27, a2, v28);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v29 + 56))(v27, 0LL, 1LL, v28);
  *(_OWORD *)uint64_t v15 = xmmword_1007E4480;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(&v15[v13[5]], v12, v9);
  *(void *)&v15[v13[7]] = v21;
  *(void *)&v15[v13[8]] = v23;
  *(void *)&v15[v13[9]] = v25;
  v15[v13[11]] = a4;
  *(void *)&v15[v13[13]] = 0LL;
  type metadata accessor for Transaction(0LL);
  uint64_t v33 = v32;
  char v34 = v15;
  uint64_t v35 = v37;
  char v36 = a4;
  static Transaction.named<A>(_:with:)("BeaconManagerService.saveLastKnownLocation", 42LL, 2LL, sub_1002D9A20);
  sub_100018C68((uint64_t)v15, type metadata accessor for BeaconEstimatedLocation);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
}

uint64_t sub_1002C3D3C(uint64_t a1, uint64_t a2, unint64_t a3)
{
  if ((a3 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
    goto LABEL_10;
  }

  if (a3 > 0xFF)
  {
LABEL_10:
    __break(1u);
    goto LABEL_11;
  }

  memset(v9, 0, sizeof(v9));
  v10[0] = a3;
  uint64_t v4 = (int)a1;
  if ((int)a1 > a1 >> 32)
  {
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  uint64_t v5 = __DataStorage._bytes.getter();
  if (!v5)
  {
    __DataStorage._length.getter();
    unint64_t v7 = 0LL;
    goto LABEL_8;
  }

  uint64_t v6 = __DataStorage._offset.getter();
  if (__OFSUB__(v4, v6)) {
LABEL_12:
  }
    __break(1u);
  v5 += v4 - v6;
  __DataStorage._length.getter();
  unint64_t v7 = v5 + a3;
LABEL_8:
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v5, v7, v9, v10);
  return *(void *)v9;
}

void sub_1002C3E30(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  uint64_t v49 = a2;
  uint64_t v5 = sub_100004AEC(&qword_1009AA900);
  __chkstk_darwin(v5);
  unint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord(0LL);
  uint64_t v45 = *(void *)(found - 8);
  __chkstk_darwin(found);
  uint64_t v40 = (uint64_t)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v39 = (char *)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v38 - v16;
  uint64_t v18 = *(void *)(a1 + 56);
  uint64_t v43 = a1 + 56;
  uint64_t v19 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v20 = -1LL;
  if (v19 < 64) {
    uint64_t v20 = ~(-1LL << v19);
  }
  unint64_t v21 = v20 & v18;
  int64_t v44 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v50 = a1;
  __n128 v22 = swift_bridgeObjectRetain(a1);
  int64_t v23 = 0LL;
  char v46 = v17;
  for (uint64_t i = v12; ; (*(void (**)(char *, uint64_t))(v10 + 8))(i, v9))
  {
    if (v21)
    {
      unint64_t v24 = __clz(__rbit64(v21));
      v21 &= v21 - 1;
      unint64_t v25 = v24 | (v23 << 6);
      goto LABEL_24;
    }

    int64_t v26 = v23 + 1;
    if (__OFADD__(v23, 1LL))
    {
      __break(1u);
      goto LABEL_33;
    }

    if (v26 >= v44) {
      goto LABEL_30;
    }
    unint64_t v27 = *(void *)(v43 + 8 * v26);
    ++v23;
    if (!v27)
    {
      int64_t v23 = v26 + 1;
      if (v26 + 1 >= v44) {
        goto LABEL_30;
      }
      unint64_t v27 = *(void *)(v43 + 8 * v23);
      if (!v27)
      {
        int64_t v23 = v26 + 2;
        if (v26 + 2 >= v44) {
          goto LABEL_30;
        }
        unint64_t v27 = *(void *)(v43 + 8 * v23);
        if (!v27)
        {
          int64_t v23 = v26 + 3;
          if (v26 + 3 >= v44) {
            goto LABEL_30;
          }
          unint64_t v27 = *(void *)(v43 + 8 * v23);
          if (!v27) {
            break;
          }
        }
      }
    }

void *sub_1002C428C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v24 = (char *)v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)(a1 + 16);
  if (v9)
  {
    uint64_t v10 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v11 = *(void *)(v4 + 72);
    void v21[2] = v1;
    uint64_t v22 = v11;
    int64_t v23 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16);
    v21[1] = a1;
    __n128 v12 = swift_bridgeObjectRetain(a1);
    int64_t v28 = _swiftEmptyArrayStorage;
    while (1)
    {
      v23(v8, v10, v3, v12);
      uint64_t v13 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v13)(v8, 0LL, 1LL, v3);
      uint64_t v14 = (uint64_t)v24;
      (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v24, v8, v3);
      sub_100504C28(v14, (uint64_t)&v25);
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v14, v3);
      if (v26)
      {
        sub_100012EC0(&v25, (uint64_t)v27);
        sub_100012EC0(v27, (uint64_t)&v25);
        if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0) {
          int64_t v28 = sub_1004C4740(0LL, v28[2] + 1LL, 1, v28);
        }
        unint64_t v16 = v28[2];
        unint64_t v15 = v28[3];
        if (v16 >= v15 >> 1) {
          int64_t v28 = sub_1004C4740((void *)(v15 > 1), v16 + 1, 1, v28);
        }
        uint64_t v17 = v28;
        void v28[2] = v16 + 1;
        sub_100012EC0(&v25, (uint64_t)&v17[5 * v16 + 4]);
      }

      else
      {
        sub_100015794((uint64_t)&v25, (uint64_t *)&unk_1009A9C40);
      }

      v10 += v22;
      if (!--v9)
      {
        v13(v8, 1LL, 1LL, v3, v12);
        break;
      }
    }
  }

  else
  {
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56);
    __n128 v19 = swift_bridgeObjectRetain(a1);
    int64_t v28 = _swiftEmptyArrayStorage;
    v18(v8, 1LL, 1LL, v3, v19);
  }

  swift_bridgeObjectRelease();
  return v28;
}

void sub_1002C4518(uint64_t a1, uint64_t a2)
{
  uint64_t v42 = a2;
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v34 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v43 = *(void *)(v41 - 8);
  uint64_t v6 = __chkstk_darwin(v41);
  uint64_t v37 = (uint64_t)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v36 = (uint64_t)&v34 - v8;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  __n128 v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v13);
  unint64_t v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v39 = a1 + 56;
  uint64_t v17 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v18 = -1LL;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  unint64_t v19 = v18 & v16;
  int64_t v40 = (unint64_t)(v17 + 63) >> 6;
  __n128 v20 = swift_bridgeObjectRetain(a1);
  int64_t v21 = 0LL;
  uint64_t v38 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v19)
    {
      unint64_t v22 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v23 = v22 | (v21 << 6);
      goto LABEL_22;
    }

    int64_t v24 = v21 + 1;
    if (__OFADD__(v21, 1LL))
    {
      __break(1u);
      goto LABEL_33;
    }

    if (v24 >= v40) {
      goto LABEL_30;
    }
    unint64_t v25 = *(void *)(v39 + 8 * v24);
    ++v21;
    if (!v25)
    {
      int64_t v21 = v24 + 1;
      if (v24 + 1 >= v40) {
        goto LABEL_30;
      }
      unint64_t v25 = *(void *)(v39 + 8 * v21);
      if (!v25)
      {
        int64_t v21 = v24 + 2;
        if (v24 + 2 >= v40) {
          goto LABEL_30;
        }
        unint64_t v25 = *(void *)(v39 + 8 * v21);
        if (!v25)
        {
          int64_t v21 = v24 + 3;
          if (v24 + 3 >= v40) {
            goto LABEL_30;
          }
          unint64_t v25 = *(void *)(v39 + 8 * v21);
          if (!v25) {
            break;
          }
        }
      }
    }

void *sub_1002C4960(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v5 = (void *)(a1 + 32);
  swift_bridgeObjectRetain(a1);
  uint64_t v6 = _swiftEmptyArrayStorage;
  do
  {
    sub_100298D58(v5, a2, (uint64_t)&v10);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v6;
    }

    if (v11)
    {
      sub_100012EC0(&v10, (uint64_t)v12);
      sub_100012EC0(v12, (uint64_t)&v10);
      if ((swift_isUniquelyReferenced_nonNull_native(v6) & 1) == 0) {
        uint64_t v6 = sub_1004C4740(0LL, v6[2] + 1LL, 1, v6);
      }
      unint64_t v8 = v6[2];
      unint64_t v7 = v6[3];
      if (v8 >= v7 >> 1) {
        uint64_t v6 = sub_1004C4740((void *)(v7 > 1), v8 + 1, 1, v6);
      }
      _OWORD v6[2] = v8 + 1;
      sub_100012EC0(&v10, (uint64_t)&v6[5 * v8 + 4]);
    }

    else
    {
      sub_100015794((uint64_t)&v10, (uint64_t *)&unk_1009A9C40);
    }

    v5 += 5;
    --v3;
  }

  while (v3);
  swift_bridgeObjectRelease();
  return v6;
}

void *sub_1002C4AC8(uint64_t a1, uint64_t a2)
{
  uint64_t v45 = a2;
  uint64_t v4 = sub_100004AEC(&qword_1009A7F48);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v41 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v55 = (char *)v41 - v15;
  uint64_t v16 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v16);
  char v46 = (char *)v41 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = *(void *)(a1 + 16);
  if (v18)
  {
    _OWORD v41[2] = v2;
    uint64_t v42 = v6;
    uint64_t v19 = a1;
    uint64_t v20 = a1 + ((*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80));
    uint64_t v43 = *(void *)(v11 + 72);
    unsigned __int8 v48 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v11 + 16);
    v41[1] = v19;
    __n128 v21 = swift_bridgeObjectRetain(v19);
    unint64_t v22 = _swiftEmptyArrayStorage;
    int64_t v44 = v9;
    unint64_t v23 = v46;
    while (1)
    {
      v48(v23, v20, v10, v21);
      int64_t v24 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v11 + 56);
      ((void (*)(char *, void, uint64_t, uint64_t))v24)(v23, 0LL, 1LL, v10);
      uint64_t v47 = v22;
      uint64_t v25 = v11;
      uint64_t v26 = (uint64_t)v14;
      uint64_t v27 = v25;
      uint64_t v28 = (uint64_t)v55;
      (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v55, v23, v10);
      sub_10050F124(v28, (uint64_t)v9);
      uint64_t v29 = (uint64_t)v9;
      uint64_t v30 = type metadata accessor for OwnedBeaconGroup(0LL);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 48LL))(v29, 1LL, v30) == 1)
      {
        sub_100015794(v29, &qword_1009AA830);
        __int128 v52 = 0u;
        __int128 v53 = 0u;
        uint64_t v54 = 0LL;
      }

      else
      {
        *((void *)&v53 + 1) = v30;
        uint64_t v54 = &off_100947888;
        uint64_t v31 = sub_10000A7C8(&v52);
        sub_10002218C(v29, (uint64_t)v31, type metadata accessor for OwnedBeaconGroup);
      }

      uint64_t v9 = (char *)v29;
      uint64_t v14 = (char *)v26;
      ((void (*)(uint64_t, char *, uint64_t))v48)(v26, v55, v10);
      if (*((void *)&v53 + 1))
      {
        uint64_t v11 = v27;
        uint64_t v32 = *(void (**)(char *, uint64_t))(v27 + 8);
        v32(v14, v10);
        sub_100012EC0(&v52, (uint64_t)&v49);
        unint64_t v22 = v47;
      }

      else
      {
        uint64_t v33 = (uint64_t)v42;
        sub_10050F7D0(v26, (uint64_t)v42);
        uint64_t v34 = type metadata accessor for SharedBeaconGroup(0LL);
        uint64_t v11 = v27;
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 48LL))(v33, 1LL, v34) == 1)
        {
          uint64_t v32 = *(void (**)(char *, uint64_t))(v27 + 8);
          v32(v14, v10);
          sub_100015794(v33, &qword_1009A7F48);
          __int128 v49 = 0u;
          __int128 v50 = 0u;
          int64_t v51 = 0LL;
        }

        else
        {
          *((void *)&v50 + 1) = v34;
          int64_t v51 = &off_100941408;
          unint64_t v35 = sub_10000A7C8(&v49);
          sub_10002218C(v33, (uint64_t)v35, type metadata accessor for SharedBeaconGroup);
          uint64_t v32 = *(void (**)(char *, uint64_t))(v27 + 8);
          v32(v14, v10);
        }

        unint64_t v22 = v47;
        sub_100015794((uint64_t)&v52, (uint64_t *)&unk_1009AA790);
        uint64_t v9 = v44;
      }

      v32(v55, v10);
      if (*((void *)&v50 + 1))
      {
        sub_100012EC0(&v49, (uint64_t)&v52);
        sub_100012EC0(&v52, (uint64_t)&v49);
        if ((swift_isUniquelyReferenced_nonNull_native(v22) & 1) == 0) {
          unint64_t v22 = sub_1004C55C0(0LL, v22[2] + 1LL, 1, v22);
        }
        unint64_t v37 = v22[2];
        unint64_t v36 = v22[3];
        if (v37 >= v36 >> 1) {
          unint64_t v22 = sub_1004C55C0((void *)(v36 > 1), v37 + 1, 1, v22);
        }
        v22[2] = v37 + 1;
        sub_100012EC0(&v49, (uint64_t)&v22[5 * v37 + 4]);
        uint64_t v9 = v44;
      }

      else
      {
        sub_100015794((uint64_t)&v49, (uint64_t *)&unk_1009AA790);
      }

      unint64_t v23 = v46;
      v20 += v43;
      if (!--v18)
      {
        v24(v46, 1LL, 1LL, v10, v21);
        break;
      }
    }
  }

  else
  {
    uint64_t v38 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v11 + 56);
    __n128 v39 = swift_bridgeObjectRetain(a1);
    unint64_t v22 = _swiftEmptyArrayStorage;
    v38(v46, 1LL, 1LL, v10, v39);
  }

  swift_bridgeObjectRelease();
  return v22;
}

void *sub_1002C4F88(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v16 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(a1 + 16);
  if (v6)
  {
    uint64_t v8 = (void *)(a1 + 32);
    swift_bridgeObjectRetain(a1);
    do
    {
      uint64_t v9 = objc_autoreleasePoolPush();
      sub_100296390(a2, v8, &v15);
      if (v3)
      {
        objc_autoreleasePoolPop(v9);
        swift_errorRelease(v3);
        uint64_t v3 = 0LL;
      }

      else
      {
        objc_autoreleasePoolPop(v9);
        uint64_t v10 = v15;
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
        unint64_t v13 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v12 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v13 >= v12 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v12 > 1, v13 + 1, 1LL);
        }
        uint64_t v14 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v13, v10);
        specialized Array._endMutation()(v14);
      }

      v8 += 5;
      --v6;
    }

    while (v6);
    swift_bridgeObjectRelease();
    return (void *)v16;
  }

  return result;
}

void *sub_1002C50A0(uint64_t a1, uint64_t a2)
{
  uint64_t result = _swiftEmptyArrayStorage;
  unint64_t v16 = (unint64_t)_swiftEmptyArrayStorage;
  uint64_t v5 = *(void *)(a1 + 16);
  if (v5)
  {
    uint64_t v7 = *(void *)(type metadata accessor for TimeBasedKey(0LL) - 8);
    uint64_t v8 = (uint64_t *)(a1 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80)));
    uint64_t v9 = *(void *)(v7 + 72);
    swift_bridgeObjectRetain(a1);
    do
    {
      uint64_t v11 = sub_10029DB50(v8, a2, &v15);
      if (v2)
      {
        swift_bridgeObjectRelease();
        return (void *)swift_bridgeObjectRelease();
      }

      uint64_t v12 = v15;
      if (v15)
      {
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v11);
        unint64_t v14 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v13 = *(void *)((v16 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v14 >= v13 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v13 > 1, v14 + 1, 1LL);
        }
        uint64_t v10 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v14, v12);
        specialized Array._endMutation()(v10);
      }

      uint64_t v8 = (uint64_t *)((char *)v8 + v9);
      --v5;
    }

    while (v5);
    swift_bridgeObjectRelease();
    return (void *)v16;
  }

  return result;
}

uint64_t sub_1002C51D0(uint64_t result, uint64_t a2, char a3)
{
  uint64_t v4 = result;
  uint64_t v5 = _swiftEmptyArrayStorage;
  uint64_t v28 = _swiftEmptyArrayStorage;
  uint64_t v6 = *(void *)(result + 16);
  if (v6)
  {
    unint64_t v8 = 0LL;
    uint64_t v9 = result + 32;
    uint64_t v5 = (void *)(a3 & 1);
    uint64_t v22 = *(void *)(result + 16);
    uint64_t v23 = result;
    unsigned int v21 = a3 & 1;
    while (v8 < *(void *)(v4 + 16))
    {
      sub_100013044(v9, (uint64_t)v27);
      char v10 = sub_100290E34((uint64_t)v27, a2, (int)v5);
      if (v3)
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
        swift_bridgeObjectRelease();
        swift_release();
        return (uint64_t)v5;
      }

      if ((v10 & 1) != 0)
      {
        sub_100012EC0(v27, (uint64_t)v24);
        uint64_t v11 = v28;
        if ((swift_isUniquelyReferenced_nonNull_native(v28) & 1) == 0)
        {
          sub_100032D38(0, v11[2] + 1LL, 1);
          uint64_t v11 = v28;
        }

        unint64_t v13 = v11[2];
        unint64_t v12 = v11[3];
        if (v13 >= v12 >> 1) {
          sub_100032D38(v12 > 1, v13 + 1, 1);
        }
        uint64_t v14 = v25;
        uint64_t v15 = v26;
        uint64_t v16 = sub_100037298((uint64_t)v24, v25);
        __chkstk_darwin(v16);
        uint64_t v18 = (char *)&v20 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v19 + 16))(v18);
        sub_1002BBA60(v13, (uint64_t)v18, (uint64_t *)&v28, v14, v15);
        uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
        uint64_t v6 = v22;
        uint64_t v4 = v23;
        uint64_t v5 = (void *)v21;
      }

      else
      {
        uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
      }

      ++v8;
      v9 += 40LL;
      if (v6 == v8)
      {
        uint64_t v5 = v28;
        goto LABEL_15;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v5;
  }

  return result;
}

void *sub_1002C53B8(uint64_t a1, uint64_t a2)
{
  uint64_t v44 = type metadata accessor for SharedBeaconGroup(0LL);
  uint64_t v5 = __chkstk_darwin(v44);
  uint64_t v41 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v39 = (uint64_t)v35 - v8;
  __chkstk_darwin(v7);
  int64_t v40 = (char *)v35 - v9;
  uint64_t v10 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v43 = (char *)v35 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)v35 - v14;
  __chkstk_darwin(v13);
  uint64_t v42 = (char *)v35 - v16;
  uint64_t v17 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (!v17) {
    return result;
  }
  v35[1] = v2;
  char v46 = _swiftEmptyArrayStorage;
  specialized ContiguousArray.reserveCapacity(_:)(v17);
  uint64_t v19 = a1 + 32;
  uint64_t v37 = *(void *)(a2 + 256);
  uint64_t v38 = a2;
  uint64_t v20 = &selRef_initWithCoder_;
  unint64_t v36 = v15;
  while (1)
  {
    sub_100013044(v19, (uint64_t)v45);
    uint64_t v25 = sub_100004AEC((uint64_t *)&unk_1009B1230);
    uint64_t v26 = (uint64_t)v42;
    if (swift_dynamicCast(v42, v45, v25, v10, 0LL))
    {
      sub_10002218C(v26, (uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
      id v27 = sub_10050D3D4((uint64_t)v15);
      sub_100018C68((uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
      uint64_t v28 = (uint64_t)v43;
    }

    else
    {
      uint64_t v29 = (uint64_t)v40;
      if ((swift_dynamicCast(v40, v45, v25, v44, 0LL) & 1) == 0)
      {
        uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000001BLL,  0x800000010085C9E0LL,  "searchpartyd/BeaconStore.swift",  30LL,  2LL,  2219LL,  0);
        goto LABEL_16;
      }

      uint64_t v30 = v39;
      sub_10002218C(v29, v39, type metadata accessor for SharedBeaconGroup);
      id v27 = [objc_allocWithZone(SPBeaconGroup) init];
      [v27 setVersion:-1];
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      [v27 setIdentifier:isa];

      NSString v32 = String._bridgeToObjectiveC()();
      [v27 setName:v32];

      [v27 setClassification:0];
      [v27 setIsPairingComplete:1];
      [v27 setIsFindMyNetworkEnabled:0];
      [v27 setStatus:0];
      type metadata accessor for UUID(0LL);
      sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      Class v33 = Set._bridgeToObjectiveC()().super.isa;
      [v27 setBeaconIdentifiers:v33];

      [v27 setIsConnected:0];
      sub_100018C68(v30, type metadata accessor for SharedBeaconGroup);
      uint64_t v28 = (uint64_t)v43;
      uint64_t v15 = v36;
      uint64_t v20 = &selRef_initWithCoder_;
    }

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v45);
    sub_100013044(v19, (uint64_t)v45);
    if ((swift_dynamicCast(v28, v45, v25, v10, 0LL) & 1) == 0) {
      break;
    }
    sub_10002218C(v28, (uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
    sub_1002A3250((uint64_t)v15);
    sub_100018C68((uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
LABEL_4:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v45);
    type metadata accessor for SPBeaconTaskName(0LL);
    sub_100022898(0LL, (unint64_t *)&unk_1009AE4B0, &OBJC_CLASS___SPBeaconTaskInformation_ptr);
    sub_100007864( (unint64_t *)&qword_10099C3B0,  (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName,  (uint64_t)&unk_1007E3C50);
    Class v21 = Dictionary._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    objc_msgSend(v27, v20[33], v21);

    specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v22);
    uint64_t v23 = v46[2];
    specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v23);
    uint64_t v24 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v23, v27);
    specialized ContiguousArray._endMutation()(v24);
    v19 += 40LL;
    if (!--v17) {
      return v46;
    }
  }

  uint64_t v34 = (uint64_t)v41;
  if ((swift_dynamicCast(v41, v45, v25, v44, 0LL) & 1) != 0)
  {
    sub_100018C68(v34, type metadata accessor for SharedBeaconGroup);
    goto LABEL_4;
  }

  uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000001BLL,  0x800000010085C9E0LL,  "searchpartyd/BeaconManagerService_BeaconManagerProtocol.swift",  61LL,  2LL,  1763LL,  0);
LABEL_16:
  __break(1u);
  return result;
}

void *sub_1002C5940(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v2)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    uint64_t v4 = *(void *)(type metadata accessor for WildModeAssociationRecord(0LL) - 8);
    uint64_t v5 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v6 = *(void *)(v4 + 72);
    do
    {
      id v7 = sub_1007823B0(v5);
      sub_1002943B0(v5);
      type metadata accessor for SPBeaconTaskName(0LL);
      sub_100022898(0LL, (unint64_t *)&unk_1009AE4B0, &OBJC_CLASS___SPBeaconTaskInformation_ptr);
      sub_100007864( (unint64_t *)&qword_10099C3B0,  (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName,  (uint64_t)&unk_1007E3C50);
      Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      [v7 setTaskInformation:isa];

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v9);
      uint64_t v10 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v10);
      uint64_t v11 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v10, v7);
      specialized ContiguousArray._endMutation()(v11);
      v5 += v6;
      --v2;
    }

    while (v2);
    return _swiftEmptyArrayStorage;
  }

  return result;
}

void *sub_1002C5AB4(uint64_t a1, uint64_t a2)
{
  uint64_t v36 = sub_100004AEC(&qword_1009AE490);
  __chkstk_darwin(v36);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v34 = *(void *)(v6 - 8);
  uint64_t v35 = v6;
  __chkstk_darwin(v6);
  uint64_t v33 = (uint64_t)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_10099D470);
  uint64_t v31 = *(void *)(v8 - 8);
  uint64_t v32 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v11 = *(void *)(a1 + 16);
  uint64_t v12 = _swiftEmptyArrayStorage;
  if (v11)
  {
    uint64_t v39 = _swiftEmptyArrayStorage;
    sub_1000330D0(0, v11, 0);
    uint64_t v13 = type metadata accessor for OwnedBeaconRecord(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = a1 + ((*(unsigned __int8 *)(v14 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v14 + 80));
    uint64_t v16 = *(void *)(a2 + 256);
    uint64_t v29 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueueSynchronizer;
    uint64_t v30 = v13;
    uint64_t v28 = *(void *)(v14 + 72);
    while (1)
    {
      __chkstk_darwin(v13);
      *(&v27 - 2) = v16;
      *(&v27 - 1) = v17;
      QueueSynchronizer.conditionalSync<A>(_:)(sub_10015471C);
      uint64_t v18 = v33;
      sub_10002218C((uint64_t)v5, v33, type metadata accessor for BeaconNamingRecord);
      uint64_t v19 = (uint64_t)&v10[*(int *)(v32 + 48)];
      sub_10001DC4C(v15, (uint64_t)v10, type metadata accessor for OwnedBeaconRecord);
      sub_10002218C(v18, v19, type metadata accessor for BeaconNamingRecord);
      uint64_t v12 = v39;
      if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0)
      {
        sub_1000330D0(0, v12[2] + 1LL, 1);
        uint64_t v12 = v39;
      }

      unint64_t v21 = v12[2];
      unint64_t v20 = v12[3];
      if (v21 >= v20 >> 1)
      {
        sub_1000330D0(v20 > 1, v21 + 1, 1);
        uint64_t v12 = v39;
      }

      __int128 v12[2] = v21 + 1;
      uint64_t v13 = sub_100015750( (uint64_t)v10,  (uint64_t)v12 + ((*(unsigned __int8 *)(v31 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v31 + 80))
            + *(void *)(v31 + 72) * v21,
              &qword_10099D470);
      v15 += v28;
      if (!--v11) {
        return v12;
      }
    }

    sub_100015794((uint64_t)v5, &qword_1009AE490);
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v12 = v22;
    uint64_t v37 = 2LL;
    unint64_t v23 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v24 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    uint64_t v25 = _BridgedStoredNSError.init(_:userInfo:)(&v38, &v37, v23, v12, v24);
    swift_willThrow(v25);
    swift_release();
  }

  return v12;
}

uint64_t sub_1002C5DF4(unint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v130 = a3;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v5);
  uint64_t v140 = (uint64_t)&v120 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (void *)type metadata accessor for Date(0LL);
  uint64_t v144 = *(v7 - 1);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v149 = (char *)&v120 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v153 = (char *)&v120 - v10;
  uint64_t v145 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v145 - 8);
  uint64_t v12 = __chkstk_darwin(v145);
  uint64_t v143 = (char *)&v120 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v142 = (char *)&v120 - v14;
  uint64_t v139 = type metadata accessor for ShareRecord(0LL);
  uint64_t v15 = *(uint64_t (**)(uint64_t))(v139 - 8);
  __chkstk_darwin(v139);
  uint64_t v141 = (uint64_t)&v120 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v122 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v122);
  uint64_t v124 = (uint64_t)&v120 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v18);
  uint64_t v126 = (char *)&v120 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v127 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v125 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  uint64_t v123 = (uint64_t)&v120 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009AE470);
  __chkstk_darwin(v21);
  unint64_t v129 = (char *)&v120 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for SafeLocation(0LL);
  uint64_t v138 = *(void *)(v23 - 8);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v152 = (uint64_t)&v120 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  uint64_t v137 = (uint64_t)&v120 - v26;
  uint64_t v27 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v28 = __chkstk_darwin(v27);
  id v132 = (char *)&v120 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = (void *)static os_log_type_t.info.getter(v28);
  if (qword_10099B6F8 != -1) {
    goto LABEL_39;
  }
  while (1)
  {
    uint64_t v31 = qword_100A2B008;
    uint64_t v128 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v32 = swift_allocObject(v128, 112LL, 7LL);
    *(_OWORD *)(v32 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    uint64_t v156 = *a2;
    uint64_t v33 = sub_100004AEC(&qword_1009A7D50);
    uint64_t v34 = String.init<A>(describing:)(&v156, v33);
    uint64_t v36 = v35;
    uint64_t v133 = a2;
    *(void *)(v32 + 56) = &type metadata for String;
    unint64_t v37 = sub_1000226F4();
    *(void *)(v32 + 32) = v34;
    *(void *)(v32 + sub_10016CF88(v0 + 40) = v36;
    *(void *)(v32 + 96) = &type metadata for String;
    *(void *)(v32 + 104) = v37;
    *(void *)(v32 + 64) = v37;
    *(void *)(v32 + 72) = 0xD000000000000017LL;
    *(void *)(v32 + 80) = 0x800000010085C800LL;
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "%@: %@", 6LL, 2LL, v32);
    swift_bridgeObjectRelease();
    uint64_t v38 = v133[32];
    sub_100504C28(a1, (uint64_t)&v154);
    if (!v155) {
      return sub_100015794((uint64_t)&v154, (uint64_t *)&unk_1009A9C40);
    }
    sub_100012EC0(&v154, (uint64_t)&v156);
    uint64_t v131 = (void *)a1;
    uint64_t v39 = sub_1005777D8();
    uint64_t v40 = v39[2];
    uint64_t v151 = v11;
    if (v40)
    {
      uint64_t v121 = v38;
      *(void *)&__int128 v154 = _swiftEmptyArrayStorage;
      uint64_t v150 = v40;
      specialized ContiguousArray.reserveCapacity(_:)(v40);
      unint64_t v41 = (*((unsigned __int8 *)v15 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v15 + 80);
      uint64_t v120 = v39;
      uint64_t v42 = (uint64_t)v39 + v41;
      id v136 = (id)objc_opt_self(&OBJC_CLASS___SPBeacon);
      uint64_t v135 = *((void *)v15 + 9);
      uint64_t v43 = v144;
      uint64_t v44 = v145;
      uint64_t v45 = v149;
      char v46 = v143;
      a1 = (unint64_t)v142;
      uint64_t v47 = v11;
      uint64_t v48 = v141;
      id v134 = v7;
      do
      {
        uint64_t v149 = (char *)v42;
        sub_10001DC4C(v42, v48, type metadata accessor for ShareRecord);
        uint64_t v64 = (int *)v139;
        uint64_t v65 = *(void (**)(unint64_t, uint64_t, uint64_t))(v47 + 16);
        v65(a1, v48 + *(int *)(v139 + 20), v44);
        v65((unint64_t)v46, v48 + v64[6], v44);
        id v148 = [v136 SPOwner];
        uint64_t v147 = sub_1006054A8(*(_BYTE *)(v48 + v64[9]), *(void *)(v48 + v64[9] + 8), *(void **)(v48 + v64[9] + 16));
        (*(void (**)(char *, uint64_t, void *))(v43 + 16))(v153, v48 + v64[7], v7);
        uint64_t v66 = v140;
        sub_10001581C(v48 + v64[8], v140, (uint64_t *)&unk_10099D720);
        uint64_t v67 = (*(uint64_t (**)(uint64_t, uint64_t, void *))(v43 + 48))(v66, 1LL, v7);
        if ((_DWORD)v67 == 1)
        {
          static Date.distantFuture.getter(v67);
          sub_100015794(v66, (uint64_t *)&unk_10099D720);
        }

        else
        {
          (*(void (**)(char *, uint64_t, void *))(v43 + 32))(v45, v66, v7);
        }

        uint64_t v49 = v43;
        id v50 = objc_allocWithZone(&OBJC_CLASS___SPBeaconShare);
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        char v46 = v143;
        Class v52 = UUID._bridgeToObjectiveC()().super.isa;
        __int128 v53 = v153;
        Class v54 = Date._bridgeToObjectiveC()().super.isa;
        Class v55 = Date._bridgeToObjectiveC()().super.isa;
        char v56 = v50;
        uint64_t v58 = (void *)v147;
        uint64_t v57 = v148;
        id v146 = [v56 initWithIdentifier:isa beaconIdentifier:v52 owner:v148 sharee:v147 state:5 creationDate:v54 expirationDate:v55];

        uint64_t v59 = *(void (**)(char *, void *))(v49 + 8);
        uint64_t v7 = v134;
        v59(v45, v134);
        v59(v53, v7);
        uint64_t v47 = v151;
        uint64_t v60 = *(void (**)(void))(v151 + 8);
        uint64_t v44 = v145;
        ((void (*)(char *, uint64_t))v60)(v46, v145);
        a1 = (unint64_t)v142;
        v60();
        uint64_t v48 = v141;
        uint64_t v61 = sub_100018C68(v141, type metadata accessor for ShareRecord);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v61);
        uint64_t v62 = *(void *)(v154 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v62);
        uint64_t v63 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v62, v146);
        specialized ContiguousArray._endMutation()(v63);
        uint64_t v42 = (uint64_t)&v149[v135];
        --v150;
        uint64_t v43 = v144;
      }

      while (v150);
      uint64_t v68 = (void *)v154;
      swift_bridgeObjectRelease();
      uint64_t v11 = v47;
      uint64_t v38 = v121;
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v68 = _swiftEmptyArrayStorage;
      uint64_t v44 = v145;
    }

    sub_1006F1368((uint64_t)v68);
    swift_bridgeObjectRelease();
    uint64_t v70 = v157;
    uint64_t v71 = v158;
    char v72 = sub_100012ED8(&v156, v157);
    uint64_t v73 = sub_10054A858((uint64_t)v72, v38, v70, v71);
    sub_100022898(0LL, &qword_1009A0B70, &OBJC_CLASS___SPBeaconShare_ptr);
    sub_10014EFD4(&qword_1009A2448, &qword_1009A0B70, &OBJC_CLASS___SPBeaconShare_ptr);
    Class v74 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v73 setShares:v74];

    if (qword_10099B300 != -1) {
      swift_once(&qword_10099B300, sub_1003459EC);
    }
    uint64_t v75 = v131;
    id v76 = sub_10074BADC((uint64_t)v131);
    [v73 setSeparationState:v76];

    os_log_type_t v77 = v132;
    (*(void (**)(char *, void *, uint64_t))(v11 + 16))(v132, v75, v44);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v77, 0LL, 1LL, v44);
    uint64_t v7 = sub_100576844();
    a2 = (void *)v7[2];
    if (!a2) {
      break;
    }
    unint64_t v78 = 0LL;
    uint64_t v30 = _swiftEmptyArrayStorage;
    uint64_t v15 = type metadata accessor for SafeLocation;
    while (v78 < v7[2])
    {
      unint64_t v79 = (*(unsigned __int8 *)(v138 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v138 + 80);
      uint64_t v80 = *(void *)(v138 + 72);
      uint64_t v81 = v137;
      sub_10001DC4C((uint64_t)v7 + v79 + v80 * v78, v137, type metadata accessor for SafeLocation);
      sub_10002218C(v81, v152, type metadata accessor for SafeLocation);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v30);
      *(void *)&__int128 v154 = v30;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100032BF0(0, v30[2] + 1LL, 1);
        uint64_t v30 = (void *)v154;
      }

      a1 = v30[2];
      unint64_t v83 = v30[3];
      if (a1 >= v83 >> 1)
      {
        sub_100032BF0(v83 > 1, a1 + 1, 1);
        uint64_t v30 = (void *)v154;
      }

      ++v78;
      v30[2] = a1 + 1;
      sub_10002218C(v152, (uint64_t)v30 + v79 + a1 * v80, type metadata accessor for SafeLocation);
      uint64_t v11 = v151;
      if (a2 == (void *)v78) {
        goto LABEL_24;
      }
    }

    __break(1u);
LABEL_39:
    swift_once(&qword_10099B6F8, sub_100651098);
  }

  uint64_t v30 = _swiftEmptyArrayStorage;
LABEL_24:
  uint64_t v84 = swift_bridgeObjectRelease();
  __chkstk_darwin(v84);
  uint64_t v85 = (uint64_t)v132;
  uint64_t v119 = v132;
  uint64_t v86 = sub_100023CDC((uint64_t (*)(char *))sub_1002DDE28, &v120 - 4, (uint64_t)v30);
  unint64_t v87 = sub_10028D078(v86);
  swift_bridgeObjectRelease();
  sub_100015794(v85, &qword_10099D8A0);
  sub_1006F138C((uint64_t)v87);
  swift_bridgeObjectRelease();
  sub_100022898(0LL, &qword_1009A0B60, &OBJC_CLASS___SPSafeLocation_ptr);
  sub_10014EFD4((unint64_t *)&qword_1009A7D80, &qword_1009A0B60, &OBJC_CLASS___SPSafeLocation_ptr);
  Class v88 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  [v73 setSafeLocations:v88];

  uint64_t v89 = v157;
  uint64_t v90 = v158;
  uint64_t v91 = sub_100012ED8(&v156, v157);
  uint64_t v92 = (uint64_t)v133;
  objc_msgSend(v73, "setCanBeLeashedByHost:", sub_1004974CC((uint64_t)v91, (uint64_t)v133, v89, v90) & 1);
  [v73 setBeaconSeparationState:sub_10047AB14((uint64_t)v131)];
  uint64_t v93 = *(void *)(v92 + 40);
  if (v93)
  {
    uint64_t v94 = *(unsigned __int8 *)(v93 + 304);
    uint64_t v95 = swift_retain();
    uint64_t v96 = static os_log_type_t.info.getter(v95);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v97 = qword_100A2B010;
    uint64_t v98 = swift_allocObject(v128, 72LL, 7LL);
    *(_OWORD *)(v98 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v98 + 56) = &type metadata for Bool;
    *(void *)(v98 + 64) = &protocol witness table for Bool;
    *(_BYTE *)(v98 + 32) = v94;
    os_log(_:dso:log:_:_:)(v96, &_mh_execute_header, v97, "thisDeviceConnectionAllowed: %i", (_DWORD)v120);
    swift_release();
    swift_bridgeObjectRelease();
    [v73 setConnectionAllowed:v94];
    sub_100013044((uint64_t)&v156, (uint64_t)&v154);
    uint64_t v99 = sub_100004AEC(&qword_1009B0530);
    uint64_t v100 = type metadata accessor for SharedBeaconRecord(0LL);
    uint64_t v101 = (uint64_t)v129;
    char v102 = swift_dynamicCast(v129, &v154, v99, v100, 6LL);
    uint64_t v103 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v100 - 8) + 56LL);
    if ((v102 & 1) != 0)
    {
      v103(v101, 0LL, 1LL, v100);
      sub_100015794(v101, (uint64_t *)&unk_1009AE470);
      [v73 setConnectableDeviceCount:0];
LABEL_37:
      uint64_t v118 = *(void **)(v130 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_targetBeacon);
      *(void *)(v130 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_targetBeacon) = v73;

      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v156);
    }

    v103(v101, 1LL, 1LL, v100);
    sub_100015794(v101, (uint64_t *)&unk_1009AE470);
    sub_100013044((uint64_t)&v156, (uint64_t)&v154);
    uint64_t v104 = (uint64_t)v126;
    uint64_t v105 = v127;
    char v106 = swift_dynamicCast(v126, &v154, v99, v127, 6LL);
    uint64_t v107 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v125 + 56);
    if ((v106 & 1) == 0)
    {
      v107(v104, 1LL, 1LL, v105);
      sub_100015794(v104, (uint64_t *)&unk_1009A9C30);
      goto LABEL_37;
    }

    v107(v104, 0LL, 1LL, v105);
    uint64_t v108 = v123;
    uint64_t v109 = sub_10002218C(v104, v123, type metadata accessor for OwnedBeaconRecord);
    CurrentValueSubject.value.getter(&v154, v109);
    uint64_t v110 = v154;
    sub_100292440(v131, v154);
    [v73 setConnectableDeviceCount:v110];
    uint64_t v111 = v108 + *(int *)(v105 + 24);
    uint64_t v112 = v124;
    sub_10001DC4C(v111, v124, type metadata accessor for StableIdentifier);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v112, v122);
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      NSString v115 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v73 setSerialNumber:v115];

      uint64_t v116 = type metadata accessor for OwnedBeaconRecord;
      uint64_t v117 = v108;
    }

    else
    {
      if (EnumCaseMultiPayload == 2)
      {
        sub_100004AEC((uint64_t *)&unk_1009B0520);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        NSString v114 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v73 setSerialNumber:v114];

        sub_100018C68(v108, type metadata accessor for OwnedBeaconRecord);
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v112, v145);
        goto LABEL_37;
      }

      [v73 setSerialNumber:0];
      sub_100018C68(v108, type metadata accessor for OwnedBeaconRecord);
      uint64_t v116 = type metadata accessor for StableIdentifier;
      uint64_t v117 = v112;
    }

    sub_100018C68(v117, v116);
    goto LABEL_37;
  }

  uint64_t result = swift_release();
  __break(1u);
  return result;
}

void sub_1002C6D6C(void *a1, uint64_t (*a2)(uint64_t a1), void (**a3)(void, void))
{
  uint64_t v135 = a3;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v5);
  unint64_t v7 = (unint64_t)&v125 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v156 = *(char **)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v145 = (char *)&v125 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v152 = (char *)&v125 - v11;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v147 = (void *)v12;
  uint64_t v148 = v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v151 = (char *)&v125 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v150 = (char *)&v125 - v16;
  uint64_t v144 = type metadata accessor for ShareRecord(0LL);
  uint64_t v17 = *(void **)(v144 - 8);
  __chkstk_darwin(v144);
  uint64_t v146 = (uint64_t)&v125 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v127 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v127);
  uint64_t v129 = (uint64_t)&v125 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v20);
  uint64_t v131 = (char *)&v125 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v132 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v130 = *(void *)(v132 - 8);
  __chkstk_darwin(v132);
  uint64_t v128 = (uint64_t)&v125 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009AE470);
  __chkstk_darwin(v23);
  id v134 = (char *)&v125 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for SafeLocation(0LL);
  uint64_t v143 = *(void *)(v25 - 8);
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v155 = (uint64_t)&v125 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v26);
  uint64_t v142 = (uint64_t)&v125 - v28;
  uint64_t v29 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v137 = (char *)&v125 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = (void *)static os_log_type_t.info.getter(v30);
  if (qword_10099B6F8 != -1) {
    goto LABEL_39;
  }
  while (1)
  {
    uint64_t v33 = qword_100A2B008;
    uint64_t v133 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v34 = swift_allocObject(v133, 112LL, 7LL);
    *(_OWORD *)(v34 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    uint64_t v159 = *(void *)a2;
    uint64_t v35 = sub_100004AEC(&qword_1009A7D50);
    uint64_t v36 = String.init<A>(describing:)(&v159, v35);
    uint64_t v138 = a2;
    uint64_t v37 = v36;
    uint64_t v39 = v38;
    *(void *)(v34 + 56) = &type metadata for String;
    unint64_t v40 = sub_1000226F4();
    *(void *)(v34 + 32) = v37;
    *(void *)(v34 + sub_10016CF88(v0 + 40) = v39;
    *(void *)(v34 + 96) = &type metadata for String;
    *(void *)(v34 + 104) = v40;
    *(void *)(v34 + 64) = v40;
    *(void *)(v34 + 72) = 0xD000000000000017LL;
    *(void *)(v34 + 80) = 0x800000010085C800LL;
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "%@: %@", 6LL, 2LL, v34);
    swift_bridgeObjectRelease();
    uint64_t v41 = *((void *)v138 + 32);
    sub_100504C28((uint64_t)a1, (uint64_t)&v157);
    if (!v158)
    {
      sub_100015794((uint64_t)&v157, (uint64_t *)&unk_1009A9C40);
      v135[2](v135, 0LL);
      return;
    }

    sub_100012EC0(&v157, (uint64_t)&v159);
    id v136 = a1;
    uint64_t v42 = sub_1005777D8();
    uint64_t v43 = v42[2];
    if (v43)
    {
      uint64_t v126 = v41;
      *(void *)&__int128 v157 = _swiftEmptyArrayStorage;
      uint64_t v154 = v43;
      specialized ContiguousArray.reserveCapacity(_:)(v43);
      unint64_t v44 = (*((unsigned __int8 *)v17 + 80) + 32LL) & ~(unint64_t)*((unsigned __int8 *)v17 + 80);
      uint64_t v125 = v42;
      uint64_t v45 = (uint64_t)v42 + v44;
      id v140 = (id)objc_opt_self(&OBJC_CLASS___SPBeacon);
      uint64_t v139 = v17[9];
      a1 = v147;
      uint64_t v46 = v148;
      unint64_t v141 = v7;
      uint64_t v153 = v8;
      uint64_t v48 = v151;
      uint64_t v47 = v152;
      uint64_t v8 = (uint64_t)v150;
      uint64_t v49 = v146;
      do
      {
        uint64_t v152 = (char *)v45;
        sub_10001DC4C(v45, v49, type metadata accessor for ShareRecord);
        uint64_t v65 = (int *)v144;
        uint64_t v66 = *(void (**)(uint64_t, uint64_t, void *))(v46 + 16);
        uint64_t v67 = v8;
        v66(v8, v49 + *(int *)(v144 + 20), a1);
        uint64_t v68 = v48;
        v66((uint64_t)v48, v49 + v65[6], a1);
        uint64_t v151 = (char *)[v140 SPOwner];
        uint64_t v150 = (char *)sub_1006054A8( *(_BYTE *)(v49 + v65[9]),  *(void *)(v49 + v65[9] + 8),  *(void **)(v49 + v65[9] + 16));
        uint64_t v69 = v156;
        uint64_t v70 = v47;
        uint64_t v71 = v153;
        (*((void (**)(char *, uint64_t, uint64_t))v156 + 2))(v47, v49 + v65[7], v153);
        sub_10001581C(v49 + v65[8], v7, (uint64_t *)&unk_10099D720);
        uint64_t v72 = (*((uint64_t (**)(unint64_t, uint64_t, uint64_t))v69 + 6))(v7, 1LL, v71);
        uint64_t v73 = v145;
        if ((_DWORD)v72 == 1)
        {
          static Date.distantFuture.getter(v72);
          sub_100015794(v7, (uint64_t *)&unk_10099D720);
        }

        else
        {
          (*((void (**)(char *, unint64_t, uint64_t))v69 + 4))(v145, v7, v71);
        }

        id v50 = objc_allocWithZone(&OBJC_CLASS___SPBeaconShare);
        Class isa = UUID._bridgeToObjectiveC()().super.isa;
        Class v52 = UUID._bridgeToObjectiveC()().super.isa;
        Class v53 = Date._bridgeToObjectiveC()().super.isa;
        Class v54 = Date._bridgeToObjectiveC()().super.isa;
        Class v55 = v50;
        uint64_t v57 = v150;
        char v56 = v151;
        id v149 = [v55 initWithIdentifier:isa beaconIdentifier:v52 owner:v151 sharee:v150 state:5 creationDate:v53 expirationDate:v54];

        uint64_t v58 = (void (*)(char *, uint64_t))*((void *)v156 + 1);
        uint64_t v59 = v153;
        v58(v73, v153);
        uint64_t v47 = v70;
        v58(v70, v59);
        a1 = v147;
        uint64_t v46 = v148;
        uint64_t v60 = *(void (**)(char *, void *))(v148 + 8);
        uint64_t v48 = v68;
        v60(v68, v147);
        uint64_t v8 = v67;
        v60((char *)v67, a1);
        uint64_t v49 = v146;
        uint64_t v61 = sub_100018C68(v146, type metadata accessor for ShareRecord);
        specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v61);
        uint64_t v62 = *(void *)(v157 + 16);
        specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v62);
        uint64_t v63 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v62, v149);
        specialized ContiguousArray._endMutation()(v63);
        uint64_t v45 = (uint64_t)&v152[v139];
        BOOL v64 = v154-- == 1;
        unint64_t v7 = v141;
      }

      while (!v64);
      Class v74 = (void *)v157;
      swift_bridgeObjectRelease();
      uint64_t v41 = v126;
    }

    else
    {
      swift_bridgeObjectRelease();
      Class v74 = _swiftEmptyArrayStorage;
      a1 = v147;
    }

    sub_1006F1368((uint64_t)v74);
    swift_bridgeObjectRelease();
    uint64_t v75 = v160;
    uint64_t v76 = v161;
    os_log_type_t v77 = sub_100012ED8(&v159, v160);
    unint64_t v78 = sub_10054A858((uint64_t)v77, v41, v75, v76);
    sub_100022898(0LL, &qword_1009A0B70, &OBJC_CLASS___SPBeaconShare_ptr);
    sub_10014EFD4(&qword_1009A2448, &qword_1009A0B70, &OBJC_CLASS___SPBeaconShare_ptr);
    Class v79 = Set._bridgeToObjectiveC()().super.isa;
    swift_bridgeObjectRelease();
    [v78 setShares:v79];

    if (qword_10099B300 != -1) {
      swift_once(&qword_10099B300, sub_1003459EC);
    }
    uint64_t v80 = v136;
    id v81 = sub_10074BADC((uint64_t)v136);
    uint64_t v156 = v78;
    [v78 setSeparationState:v81];

    uint64_t v82 = v148;
    unint64_t v83 = v137;
    (*(void (**)(char *, void *, void *))(v148 + 16))(v137, v80, a1);
    (*(void (**)(char *, void, uint64_t, void *))(v82 + 56))(v83, 0LL, 1LL, a1);
    uint64_t v17 = sub_100576844();
    uint64_t v84 = v17[2];
    if (!v84) {
      break;
    }
    unint64_t v7 = 0LL;
    uint64_t v32 = _swiftEmptyArrayStorage;
    a2 = type metadata accessor for SafeLocation;
    while (v7 < v17[2])
    {
      a1 = (void *)((*(unsigned __int8 *)(v143 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v143 + 80));
      uint64_t v8 = *(void *)(v143 + 72);
      uint64_t v85 = v142;
      sub_10001DC4C((uint64_t)a1 + (void)v17 + v8 * v7, v142, type metadata accessor for SafeLocation);
      sub_10002218C(v85, v155, type metadata accessor for SafeLocation);
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v32);
      *(void *)&__int128 v157 = v32;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        sub_100032BF0(0, v32[2] + 1LL, 1);
        uint64_t v32 = (void *)v157;
      }

      unint64_t v88 = v32[2];
      unint64_t v87 = v32[3];
      if (v88 >= v87 >> 1)
      {
        sub_100032BF0(v87 > 1, v88 + 1, 1);
        uint64_t v32 = (void *)v157;
      }

      ++v7;
      _OWORD v32[2] = v88 + 1;
      sub_10002218C(v155, (uint64_t)a1 + (void)v32 + v88 * v8, type metadata accessor for SafeLocation);
      if (v84 == v7) {
        goto LABEL_24;
      }
    }

    __break(1u);
LABEL_39:
    swift_once(&qword_10099B6F8, sub_100651098);
  }

  uint64_t v32 = _swiftEmptyArrayStorage;
LABEL_24:
  uint64_t v89 = swift_bridgeObjectRelease();
  __chkstk_darwin(v89);
  uint64_t v90 = (uint64_t)v137;
  uint64_t v124 = v137;
  uint64_t v91 = sub_100023CDC((uint64_t (*)(char *))sub_1002DDE28, &v125 - 4, (uint64_t)v32);
  uint64_t v92 = sub_10028D078(v91);
  swift_bridgeObjectRelease();
  sub_100015794(v90, &qword_10099D8A0);
  sub_1006F138C((uint64_t)v92);
  swift_bridgeObjectRelease();
  sub_100022898(0LL, &qword_1009A0B60, &OBJC_CLASS___SPSafeLocation_ptr);
  sub_10014EFD4((unint64_t *)&qword_1009A7D80, &qword_1009A0B60, &OBJC_CLASS___SPSafeLocation_ptr);
  Class v93 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  uint64_t v94 = v156;
  [v156 setSafeLocations:v93];

  uint64_t v95 = v160;
  uint64_t v96 = v161;
  uint64_t v97 = sub_100012ED8(&v159, v160);
  uint64_t v98 = (uint64_t)v138;
  objc_msgSend(v94, "setCanBeLeashedByHost:", sub_1004974CC((uint64_t)v97, (uint64_t)v138, v95, v96) & 1);
  [v94 setBeaconSeparationState:sub_10047AB14((uint64_t)v136)];
  uint64_t v99 = *(void *)(v98 + 40);
  if (v99)
  {
    uint64_t v100 = *(unsigned __int8 *)(v99 + 304);
    uint64_t v101 = swift_retain();
    uint64_t v102 = static os_log_type_t.info.getter(v101);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v103 = qword_100A2B010;
    uint64_t v104 = swift_allocObject(v133, 72LL, 7LL);
    *(_OWORD *)(v104 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v104 + 56) = &type metadata for Bool;
    *(void *)(v104 + 64) = &protocol witness table for Bool;
    *(_BYTE *)(v104 + 32) = v100;
    os_log(_:dso:log:_:_:)(v102, &_mh_execute_header, v103, "thisDeviceConnectionAllowed: %i", (_DWORD)v125);
    swift_release();
    swift_bridgeObjectRelease();
    [v94 setConnectionAllowed:v100];
    sub_100013044((uint64_t)&v159, (uint64_t)&v157);
    uint64_t v105 = sub_100004AEC(&qword_1009B0530);
    uint64_t v106 = type metadata accessor for SharedBeaconRecord(0LL);
    uint64_t v107 = (uint64_t)v134;
    char v108 = swift_dynamicCast(v134, &v157, v105, v106, 6LL);
    uint64_t v109 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v106 - 8) + 56LL);
    if ((v108 & 1) != 0)
    {
      v109(v107, 0LL, 1LL, v106);
      sub_100015794(v107, (uint64_t *)&unk_1009AE470);
      [v94 setConnectableDeviceCount:0];
LABEL_37:
      ((void (**)(void, char *))v135)[2](v135, v94);

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v159);
      return;
    }

    v109(v107, 1LL, 1LL, v106);
    sub_100015794(v107, (uint64_t *)&unk_1009AE470);
    sub_100013044((uint64_t)&v159, (uint64_t)&v157);
    uint64_t v110 = (uint64_t)v131;
    uint64_t v111 = v132;
    char v112 = swift_dynamicCast(v131, &v157, v105, v132, 6LL);
    uint64_t v113 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v130 + 56);
    if ((v112 & 1) == 0)
    {
      v113(v110, 1LL, 1LL, v111);
      sub_100015794(v110, (uint64_t *)&unk_1009A9C30);
      goto LABEL_37;
    }

    v113(v110, 0LL, 1LL, v111);
    uint64_t v114 = v128;
    uint64_t v115 = sub_10002218C(v110, v128, type metadata accessor for OwnedBeaconRecord);
    CurrentValueSubject.value.getter(&v157, v115);
    uint64_t v116 = v157;
    sub_100292440(v136, v157);
    [v94 setConnectableDeviceCount:v116];
    uint64_t v117 = v114 + *(int *)(v111 + 24);
    uint64_t v118 = v129;
    sub_10001DC4C(v117, v129, type metadata accessor for StableIdentifier);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v118, v127);
    if (EnumCaseMultiPayload == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      NSString v121 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      [v94 setSerialNumber:v121];

      uint64_t v122 = type metadata accessor for OwnedBeaconRecord;
      uint64_t v123 = v114;
    }

    else
    {
      if (EnumCaseMultiPayload == 2)
      {
        sub_100004AEC((uint64_t *)&unk_1009B0520);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        NSString v120 = String._bridgeToObjectiveC()();
        swift_bridgeObjectRelease();
        [v94 setSerialNumber:v120];

        sub_100018C68(v114, type metadata accessor for OwnedBeaconRecord);
        (*(void (**)(uint64_t, void *))(v148 + 8))(v118, v147);
        goto LABEL_37;
      }

      [v94 setSerialNumber:0];
      sub_100018C68(v114, type metadata accessor for OwnedBeaconRecord);
      uint64_t v122 = type metadata accessor for StableIdentifier;
      uint64_t v123 = v118;
    }

    sub_100018C68(v123, v122);
    goto LABEL_37;
  }

  _Block_release(v135);
  __break(1u);
}

uint64_t sub_1002C7CE0()
{
  *(void *)(v1 + 184) = v0;
  return swift_task_switch(sub_1002C7CF8, 0LL, 0LL);
}

uint64_t sub_1002C7CF8()
{
  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  *(void *)(v0 + sub_10016CF88(v0 + 40) = My;
  *(void *)(v0 + 48) = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  uint64_t v2 = sub_10000A7C8((void *)(v0 + 16));
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v2,  enum case for Feature.FindMy.managedCBPeripheral(_:),  My);
  LOBYTE(My) = isFeatureEnabled(_:)(v0 + 16);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if ((My & 1) != 0)
  {
    uint64_t v3 = qword_10099B9E0;
    swift_retain();
    if (v3 != -1) {
      swift_once(&qword_10099B9E0, sub_10076012C);
    }
    swift_beginAccess(&xmmword_1009BED80, v0 + 136, 0LL, 0LL);
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 96, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 120))
    {
      sub_100012EC0((__int128 *)(v0 + 96), v0 + 56);
      swift_release();
      sub_100012ED8((void *)(v0 + 56), *(void *)(v0 + 80));
      uint64_t v11 = (uint64_t (__cdecl *)())((char *)&dword_10099C8D8 + dword_10099C8D8);
      uint64_t v5 = (void *)swift_task_alloc(unk_10099C8DC);
      *(void *)(v0 + 192) = v5;
      *uint64_t v5 = v0;
      v5[1] = sub_1002C7F34;
      return v11();
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    if (qword_10099B4D8 != -1) {
      swift_once(&qword_10099B4D8, sub_1004AB71C);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    uint64_t v7 = sub_10000A720(v6, (uint64_t)qword_100A2AB18);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "managedCBPeripheral FF is disabled!", v10, 2u);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    return (*(uint64_t (**)(void *))(v0 + 8))(&_swiftEmptySetSingleton);
  }

  return result;
}

uint64_t sub_1002C7F34(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 192LL);
  *(void *)(*(void *)v1 + 20swift_beginAccess(v4, v6 - 104, 0LL, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002C7F90, 0LL, 0LL);
}

uint64_t sub_1002C7F90()
{
  uint64_t v1 = *(void *)(v0 + 200);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
  if (v1) {
    return swift_task_switch(sub_1002C80A8, *(void *)(v0 + 200), 0LL);
  }
  if (qword_10099B4D8 != -1) {
    swift_once(&qword_10099B4D8, sub_1004AB71C);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2AB18);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "standaloneBeacons: missing StandaloneBeaconService service!",  v7,  2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  return (*(uint64_t (**)(void *))(v0 + 8))(&_swiftEmptySetSingleton);
}

uint64_t sub_1002C80A8()
{
  uint64_t v1 = sub_1006571FC(*(void *)(v0[25] + 128LL));
  v0[26] = 0LL;
  v0[27] = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(v1);
  swift_release();
  return swift_task_switch(sub_1002C811C, 0LL, 0LL);
}

uint64_t sub_1002C811C()
{
  uint64_t v1 = sub_10028D1D8(*(void *)(v0 + 216));
  swift_release();
  uint64_t v2 = sub_1006F1AB8((uint64_t)v1);
  swift_bridgeObjectRelease();
  swift_release();
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
}

uint64_t sub_1002C818C()
{
  if (qword_10099B4D8 != -1) {
    swift_once(&qword_10099B4D8, sub_1004AB71C);
  }
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2AB18);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 208);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = v9;
    *(_DWORD *)uint64_t v8 = 136446210;
    *(void *)(v0 + 160) = v7;
    swift_errorRetain(v7);
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v11 = String.init<A>(describing:)(v0 + 160, v10);
    *(void *)(v0 + 168) = sub_1003F11D4(v11, v12, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "standaloneBeacons error %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_release();
  }

  else
  {
    swift_release();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);

  return (*(uint64_t (**)(void *))(v0 + 8))(&_swiftEmptySetSingleton);
}

uint64_t sub_1002C838C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v77 = a2;
  uint64_t v5 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v5);
  uint64_t v79 = (uint64_t)&v68 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v80 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v76 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v8 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v74 = (uint64_t)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v75 = (char *)&v68 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  id v81 = (char *)&v68 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v68 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v72 = (uint64_t)&v68 - v20;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v68 - v21;
  uint64_t v23 = type metadata accessor for MACAddress(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v68 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B7A0 != -1) {
    swift_once(&qword_10099B7A0, sub_1006518D8);
  }
  uint64_t v27 = type metadata accessor for Logger(0LL);
  uint64_t v28 = sub_10000A720(v27, (uint64_t)qword_100A2B0B0);
  uint64_t v29 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v24 + 16);
  uint64_t v78 = a1;
  uint64_t v30 = v29(v26, a1, v23);
  uint64_t v71 = v28;
  uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v32 = static os_log_type_t.default.getter(v31);
  BOOL v33 = os_log_type_enabled(v31, v32);
  uint64_t v73 = v22;
  uint64_t v70 = v18;
  if (v33)
  {
    uint64_t v34 = swift_slowAlloc(22LL, -1LL);
    uint64_t v35 = swift_slowAlloc(32LL, -1LL);
    uint64_t v69 = a3;
    uint64_t v36 = v35;
    *(_DWORD *)uint64_t v34 = 141558275;
    uint64_t v82 = 1752392040LL;
    uint64_t v83 = v35;
    uint64_t v68 = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v34 + 4, v34 + 12);
    *(_WORD *)(v34 + 12) = 2081;
    uint64_t v37 = sub_100007864( &qword_1009A6E60,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter(v23, v37);
    uint64_t v82 = sub_1003F11D4(v38, v39, &v83);
    uint64_t v8 = v68;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v34 + 14, v34 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
    _os_log_impl( (void *)&_mh_execute_header,  v31,  v32,  "beaconingIdentifier for %{private,mask.hash}s",  (uint8_t *)v34,  0x16u);
    swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v40 = v36;
    a3 = v69;
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v24 + 8))(v26, v23);
  }

  uint64_t v41 = (uint64_t)v81;
  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  uint64_t v42 = (void *)qword_100A2AF38;
  id v43 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v44 = [v43 isInternalBuild];

  if (v44)
  {
    NSString v45 = String._bridgeToObjectiveC()();
    id v46 = [v42 stringForKey:v45];

    if (v46)
    {
      uint64_t v47 = static String._unconditionallyBridgeFromObjectiveC(_:)(v46);
      unint64_t v49 = v48;

      uint64_t v50 = swift_bridgeObjectRetain_n(v49, 2LL);
      int64_t v51 = (os_log_s *)Logger.logObject.getter(v50);
      os_log_type_t v52 = static os_log_type_t.default.getter(v51);
      if (os_log_type_enabled(v51, v52))
      {
        Class v53 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v54 = swift_slowAlloc(32LL, -1LL);
        uint64_t v83 = v54;
        *(_DWORD *)Class v53 = 136315138;
        swift_bridgeObjectRetain(v49);
        uint64_t v82 = sub_1003F11D4(v47, v49, &v83);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v82, &v83, v53 + 4, v53 + 12);
        swift_bridgeObjectRelease_n(v49, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v51, v52, "beaconingIdentifierOverride: %s", v53, 0xCu);
        swift_arrayDestroy(v54, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v54, -1LL, -1LL);
        swift_slowDealloc(v53, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v49, 2LL);
      }

      uint64_t v65 = (uint64_t)v73;
      UUID.init(uuidString:)(v47, v49);
      swift_bridgeObjectRelease();
      uint64_t v66 = v72;
      sub_10001581C(v65, v72, &qword_10099D8A0);
      uint64_t v63 = type metadata accessor for UUID(0LL);
      uint64_t v64 = *(void *)(v63 - 8);
      goto LABEL_22;
    }
  }

  uint64_t v55 = v79;
  sub_10050F4B4(v78, v79);
  uint64_t v56 = v80;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v55, 1LL, v80) == 1)
  {
    sub_100015794(v55, &qword_1009AA830);
LABEL_19:
    uint64_t v63 = type metadata accessor for UUID(0LL);
    uint64_t v64 = *(void *)(v63 - 8);
    uint64_t v65 = (uint64_t)v75;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v64 + 56))(v75, 1LL, 1LL, v63);
    uint64_t v66 = v74;
    sub_10001581C(v65, v74, &qword_10099D8A0);
LABEL_22:
    Class isa = 0LL;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v64 + 48))(v66, 1LL, v63) != 1)
    {
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v66, v63);
    }

    (*(void (**)(uint64_t, Class))(a3 + 16))(a3, isa);

    return sub_100015794(v65, &qword_10099D8A0);
  }

  sub_10002218C(v55, (uint64_t)v8, type metadata accessor for OwnedBeaconGroup);
  if ((v8[*(int *)(v56 + 32)] & 1) == 0)
  {
    sub_100018C68((uint64_t)v8, type metadata accessor for OwnedBeaconGroup);
    goto LABEL_19;
  }

  uint64_t v57 = &v8[*(int *)(v56 + 24)];
  uint64_t v58 = type metadata accessor for UUID(0LL);
  uint64_t v59 = *(void *)(v58 - 8);
  uint64_t v60 = (uint64_t)v70;
  (*(void (**)(char *, char *, uint64_t))(v59 + 16))(v70, v57, v58);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v59 + 56))(v60, 0LL, 1LL, v58);
  sub_10001581C(v60, v41, &qword_10099D8A0);
  Class v61 = 0LL;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v59 + 48))(v41, 1LL, v58) != 1)
  {
    Class v61 = UUID._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v41, v58);
  }

  (*(void (**)(uint64_t, Class))(a3 + 16))(a3, v61);

  sub_100015794(v60, &qword_10099D8A0);
  return sub_100018C68((uint64_t)v8, type metadata accessor for OwnedBeaconGroup);
}

uint64_t sub_1002C8B54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v55 = a2;
  uint64_t v5 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v5);
  uint64_t v57 = (uint64_t)&v48 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v56 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v54 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v52 = (uint64_t)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for MACAddress(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v48 - v13;
  if (qword_10099B7A0 != -1) {
    swift_once(&qword_10099B7A0, sub_1006518D8);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = sub_10000A720(v15, (uint64_t)qword_100A2B0B0);
  uint64_t v50 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v17 = v50(v14, a1, v8);
  uint64_t v51 = v16;
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc(22LL, -1LL);
    uint64_t v53 = a3;
    uint64_t v21 = v20;
    uint64_t v22 = swift_slowAlloc(32LL, -1LL);
    uint64_t v48 = a1;
    uint64_t v23 = v22;
    *(_DWORD *)uint64_t v21 = 141558275;
    uint64_t v58 = 1752392040LL;
    uint64_t v59 = v22;
    unint64_t v49 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v21 + 4, v21 + 12);
    *(_WORD *)(v21 + 12) = 2081;
    uint64_t v24 = sub_100007864( &qword_1009A6E60,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(v8, v24);
    uint64_t v58 = sub_1003F11D4(v25, v26, &v59);
    uint64_t v12 = v49;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease();
    uint64_t v27 = *(void (**)(char *, uint64_t))(v9 + 8);
    v27(v14, v8);
    _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "fetchFindMyNetworkStatus for %{private,mask.hash}s",  (uint8_t *)v21,  0x16u);
    swift_arrayDestroy(v23, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v28 = v23;
    a1 = v48;
    swift_slowDealloc(v28, -1LL, -1LL);
    uint64_t v29 = v21;
    a3 = v53;
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  else
  {
    uint64_t v27 = *(void (**)(char *, uint64_t))(v9 + 8);
    v27(v14, v8);
  }

  uint64_t v30 = v57;
  sub_10050F4B4(a1, v57);
  uint64_t v31 = v56;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v54 + 48))(v30, 1LL, v56) == 1)
  {
    sub_100015794(v30, &qword_1009AA830);
    uint64_t v32 = v50(v12, a1, v8);
    BOOL v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v34 = static os_log_type_t.error.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = swift_slowAlloc(12LL, -1LL);
      uint64_t v53 = a3;
      uint64_t v36 = (uint8_t *)v35;
      uint64_t v37 = swift_slowAlloc(32LL, -1LL);
      uint64_t v59 = v37;
      *(_DWORD *)uint64_t v36 = 136315138;
      uint64_t v38 = sub_100007864( &qword_1009A6E60,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter(v8, v38);
      uint64_t v58 = sub_1003F11D4(v39, v40, &v59);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v58, &v59, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease();
      v27(v12, v8);
      _os_log_impl((void *)&_mh_execute_header, v33, v34, "No beacon group for %s", v36, 0xCu);
      swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1LL, -1LL);
      uint64_t v41 = v36;
      a3 = v53;
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    else
    {
      v27(v12, v8);
    }

    unint64_t v44 = sub_10014A2C0();
    uint64_t v45 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v44, 0LL, 0LL);
    _BYTE *v46 = 1;
    uint64_t v47 = (void *)_convertErrorToNSError(_:)(v45);
    (*(void (**)(uint64_t, void, void *))(a3 + 16))(a3, 0LL, v47);

    return swift_errorRelease(v45);
  }

  else
  {
    uint64_t v42 = v52;
    sub_10002218C(v30, v52, type metadata accessor for OwnedBeaconGroup);
    (*(void (**)(uint64_t, void, void))(a3 + 16))(a3, *(unsigned __int8 *)(v42 + *(int *)(v31 + 32)), 0LL);
    return sub_100018C68(v42, type metadata accessor for OwnedBeaconGroup);
  }

uint64_t sub_1002C9080(uint64_t *a1, int a2, uint64_t a3, void *a4)
{
  LODWORD(v253) = a2;
  uint64_t v226 = sub_100004AEC(&qword_1009A2578);
  uint64_t v225 = *(void *)(v226 - 8);
  __chkstk_darwin(v226);
  uint64_t v223 = (char *)&v222 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v229 = sub_100004AEC(&qword_1009A2580);
  uint64_t v228 = *(void *)(v229 - 8);
  __chkstk_darwin(v229);
  uint64_t v227 = (char *)&v222 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v232 = sub_100004AEC(&qword_1009A2588);
  uint64_t v231 = *(void *)(v232 - 8);
  __chkstk_darwin(v232);
  uint64_t v230 = (char *)&v222 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v235 = sub_100004AEC(&qword_1009A2590);
  uint64_t v234 = *(void *)(v235 - 8);
  __chkstk_darwin(v235);
  uint64_t v233 = (char *)&v222 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v244 = type metadata accessor for DispatchTime(0LL);
  uint64_t v239 = *(void *)(v244 - 8);
  uint64_t v11 = __chkstk_darwin(v244);
  uint64_t v242 = (char *)&v222 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v243 = (char *)&v222 - v13;
  uint64_t v14 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v14);
  uint64_t v252 = (dispatch_group_s *)((char *)&v222 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v251 = (dispatch_group_s *)type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v16 = *((void *)v251 - 1);
  uint64_t v17 = __chkstk_darwin(v251);
  uint64_t v224 = (uint64_t)&v222 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v237 = (uint64_t)&v222 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v236 = (uint64_t)&v222 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v238 = (uint64_t)&v222 - v24;
  uint64_t v222 = v25;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v222 - v26;
  uint64_t v28 = type metadata accessor for MACAddress(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v247 = (char *)&v222 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v30);
  BOOL v33 = (char *)&v222 - v32;
  uint64_t v250 = swift_allocObject(&unk_10094E2F8, 24LL, 7LL);
  *(void *)(v250 + swift_weakDestroy(v0 + 16) = a4;
  _Block_copy(a4);
  if (qword_10099B7A0 != -1) {
    swift_once(&qword_10099B7A0, sub_1006518D8);
  }
  uint64_t v34 = type metadata accessor for Logger(0LL);
  uint64_t v35 = sub_10000A720(v34, (uint64_t)qword_100A2B0B0);
  uint64_t v36 = *(uint64_t (**)(char *, uint64_t *, uint64_t))(v29 + 16);
  uint64_t v254 = a1;
  uint64_t v246 = v36;
  uint64_t v37 = v36(v33, a1, v28);
  uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v39 = static os_log_type_t.default.getter(v38);
  BOOL v40 = os_log_type_enabled(v38, v39);
  uint64_t v248 = (void (**)(const void *, void *))a4;
  uint64_t v249 = v35;
  if (v40)
  {
    uint64_t v41 = swift_slowAlloc(18LL, -1LL);
    uint64_t v240 = v27;
    uint64_t v42 = v41;
    uint64_t v43 = swift_slowAlloc(32LL, -1LL);
    uint64_t v260 = v43;
    *(_DWORD *)uint64_t v42 = 67240450;
    LODWORD(v257) = v253 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v257, (char *)&v257 + 4, v42 + 4, v42 + 8);
    *(_WORD *)(v42 + 8) = 2082;
    uint64_t v245 = a3;
    uint64_t v241 = v16;
    uint64_t v44 = sub_100007864( &qword_1009A6E60,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
    uint64_t v45 = dispatch thunk of CustomStringConvertible.description.getter(v28, v44);
    uint64_t v257 = sub_1003F11D4(v45, v46, &v260);
    uint64_t v16 = v241;
    a3 = v245;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v257, v258, v42 + 10, v42 + 18);
    swift_bridgeObjectRelease();
    uint64_t v47 = *(void (**)(char *, uint64_t))(v29 + 8);
    v47(v33, v28);
    _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "setFindMyNetworkStatus %{BOOL,public}d for %{public}s",  (uint8_t *)v42,  0x12u);
    swift_arrayDestroy(v43, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1LL, -1LL);
    uint64_t v48 = v42;
    uint64_t v27 = v240;
    swift_slowDealloc(v48, -1LL, -1LL);
  }

  else
  {
    uint64_t v47 = *(void (**)(char *, uint64_t))(v29 + 8);
    v47(v33, v28);
  }

  unint64_t v49 = v252;
  uint64_t v50 = v254;
  sub_10050F4B4((uint64_t)v254, (uint64_t)v252);
  if ((*(unsigned int (**)(dispatch_group_s *, uint64_t, dispatch_group_s *))(v16 + 48))(v49, 1LL, v251) != 1)
  {
    sub_10002218C((uint64_t)v49, (uint64_t)v27, type metadata accessor for OwnedBeaconGroup);
    if ((v253 & 1) != 0)
    {
      sub_10028EBEC(1, (uint64_t)v27, (uint64_t)sub_10009C044, v250);
      sub_100018C68((uint64_t)v27, type metadata accessor for OwnedBeaconGroup);
      return swift_release();
    }

    uint64_t v65 = swift_allocObject(&unk_10094D768, 24LL, 7LL);
    *(void *)(v65 + swift_weakDestroy(v0 + 16) = 0LL;
    uint64_t v254 = (uint64_t *)(v65 + 16);
    uint64_t v66 = dispatch_group_create();
    dispatch_group_enter(v66);
    swift_retain();
    uint64_t v67 = v66;
    uint64_t v245 = a3;
    sub_10015068C((uint64_t)v27, 1, a3, v65, v67);

    uint64_t v68 = swift_release();
    uint64_t v69 = v242;
    static DispatchTime.now()(v68);
    uint64_t v70 = v243;
    + infix(_:_:)(v69, 60.0);
    uint64_t v71 = *(dispatch_group_s **)(v239 + 8);
    uint64_t v72 = v244;
    ((void (*)(char *, uint64_t))v71)(v69, v244);
    uint64_t v73 = OS_dispatch_group.wait(timeout:)(v70) & 1;
    uint64_t v252 = v71;
    ((void (*)(char *, uint64_t))v71)(v70, v72);
    char v74 = static DispatchTimeoutResult.== infix(_:_:)(v73, 1LL);
    uint64_t v253 = v65;
    if ((v74 & 1) != 0)
    {
      uint64_t v241 = v16;
      uint64_t v75 = v238;
      uint64_t v76 = sub_10001DC4C((uint64_t)v27, v238, type metadata accessor for OwnedBeaconGroup);
      uint64_t v77 = (os_log_s *)Logger.logObject.getter(v76);
      os_log_type_t v78 = static os_log_type_t.error.getter(v77);
      if (os_log_type_enabled(v77, v78))
      {
        uint64_t v79 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v80 = swift_slowAlloc(32LL, -1LL);
        uint64_t v260 = v80;
        uint64_t v240 = v27;
        *(_DWORD *)uint64_t v79 = 136315138;
        uint64_t v81 = sub_1001D0FA8();
        uint64_t v257 = sub_1003F11D4(v81, v82, &v260);
        uint64_t v27 = v240;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v257, v258, v79 + 4, v79 + 12);
        swift_bridgeObjectRelease();
        sub_100018C68(v75, type metadata accessor for OwnedBeaconGroup);
        _os_log_impl((void *)&_mh_execute_header, v77, v78, "Timed out waiting for pairing lock removal %s", v79, 0xCu);
        swift_arrayDestroy(v80, 1LL, (char *)&type metadata for Any + 8);
        uint64_t v83 = v80;
        uint64_t v65 = v253;
        swift_slowDealloc(v83, -1LL, -1LL);
        swift_slowDealloc(v79, -1LL, -1LL);
      }

      else
      {
        sub_100018C68(v75, type metadata accessor for OwnedBeaconGroup);
      }

      unint64_t v84 = sub_10014A2C0();
      uint64_t v85 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v84, 0LL, 0LL);
      *uint64_t v86 = 9;
      unint64_t v87 = v254;
      swift_beginAccess(v254, v255, 1LL, 0LL);
      uint64_t v88 = *v87;
      *unint64_t v87 = v85;
      swift_errorRelease(v88);
      uint64_t v16 = v241;
    }

    uint64_t v89 = v254;
    swift_beginAccess(v254, &v260, 1LL, 0LL);
    uint64_t v90 = *v89;
    if (*v89)
    {
      swift_errorRetain(*v89);
      swift_errorRetain(v90);
      uint64_t v91 = swift_errorRetain(v90);
      uint64_t v92 = (os_log_s *)Logger.logObject.getter(v91);
      os_log_type_t v93 = static os_log_type_t.error.getter(v92);
      if (os_log_type_enabled(v92, v93))
      {
        uint64_t v94 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v95 = swift_slowAlloc(32LL, -1LL);
        uint64_t v257 = v95;
        *(_DWORD *)uint64_t v94 = 136446210;
        unint64_t v259 = v90;
        swift_errorRetain(v90);
        uint64_t v96 = sub_100004AEC((uint64_t *)&unk_1009A5470);
        uint64_t v97 = String.init<A>(describing:)(&v259, v96);
        unint64_t v259 = sub_1003F11D4(v97, v98, &v257);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, &v260, v94 + 4, v94 + 12);
        swift_bridgeObjectRelease();
        swift_errorRelease(v90);
        swift_errorRelease(v90);
        _os_log_impl( (void *)&_mh_execute_header,  v92,  v93,  "Unable to remove pairing lock. Error %{public}s",  v94,  0xCu);
        swift_arrayDestroy(v95, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v95, -1LL, -1LL);
        swift_slowDealloc(v94, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease(v90);
        swift_errorRelease(v90);
      }

      uint64_t v117 = v248;
      swift_errorRetain(v90);
      uint64_t v118 = (void *)_convertErrorToNSError(_:)(v90);
      v117[2](v117, v118);

      swift_errorRelease(v90);
      swift_errorRelease(v90);

LABEL_46:
      uint64_t v206 = (uint64_t)v27;
LABEL_47:
      sub_100018C68(v206, type metadata accessor for OwnedBeaconGroup);
      swift_release();
      return swift_release();
    }

    dispatch_group_enter(v67);
    uint64_t v99 = swift_allocObject(&unk_10094E320, 32LL, 7LL);
    *(void *)(v99 + swift_weakDestroy(v0 + 16) = v65;
    *(void *)(v99 + 24) = v67;
    swift_retain();
    uint64_t v100 = v67;
    sub_100139054((uint64_t)v27, (uint64_t)sub_1002DD7C8, v99);
    uint64_t v101 = swift_release();
    uint64_t v102 = v242;
    static DispatchTime.now()(v101);
    uint64_t v103 = v243;
    + infix(_:_:)(v102, 60.0);
    uint64_t v104 = v244;
    uint64_t v105 = v252;
    ((void (*)(char *, uint64_t))v252)(v102, v244);
    uint64_t v251 = v100;
    uint64_t v106 = OS_dispatch_group.wait(timeout:)(v103) & 1;
    ((void (*)(char *, uint64_t))v105)(v103, v104);
    char v107 = static DispatchTimeoutResult.== infix(_:_:)(v106, 1LL);
    uint64_t v240 = v27;
    uint64_t v241 = v16;
    if ((v107 & 1) != 0)
    {
      uint64_t v108 = v236;
      uint64_t v109 = sub_10001DC4C((uint64_t)v27, v236, type metadata accessor for OwnedBeaconGroup);
      uint64_t v110 = (os_log_s *)Logger.logObject.getter(v109);
      os_log_type_t v111 = static os_log_type_t.error.getter(v110);
      if (os_log_type_enabled(v110, v111))
      {
        char v112 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v113 = swift_slowAlloc(32LL, -1LL);
        uint64_t v257 = v113;
        *(_DWORD *)char v112 = 136315138;
        uint64_t v114 = sub_1001D0FA8();
        unint64_t v259 = sub_1003F11D4(v114, v115, &v257);
        uint64_t v27 = v240;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, &v260, v112 + 4, v112 + 12);
        swift_bridgeObjectRelease();
        sub_100018C68(v108, type metadata accessor for OwnedBeaconGroup);
        _os_log_impl( (void *)&_mh_execute_header,  v110,  v111,  "Timed out waiting for unpair command response %s",  v112,  0xCu);
        swift_arrayDestroy(v113, 1LL, (char *)&type metadata for Any + 8);
        uint64_t v116 = v113;
        uint64_t v65 = v253;
        swift_slowDealloc(v116, -1LL, -1LL);
        swift_slowDealloc(v112, -1LL, -1LL);
      }

      else
      {
        sub_100018C68(v108, type metadata accessor for OwnedBeaconGroup);
      }

      unint64_t v119 = sub_10014A2C0();
      uint64_t v120 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v119, 0LL, 0LL);
      *NSString v121 = 9;
      uint64_t v122 = *v254;
      uint64_t *v254 = v120;
      swift_errorRelease(v122);
    }

    uint64_t v123 = *v254;
    if (*v254)
    {
      swift_errorRetain(*v254);
      swift_errorRetain(v123);
      uint64_t v124 = swift_errorRetain(v123);
      uint64_t v125 = (os_log_s *)Logger.logObject.getter(v124);
      os_log_type_t v126 = static os_log_type_t.error.getter(v125);
      if (os_log_type_enabled(v125, v126))
      {
        uint64_t v127 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v128 = swift_slowAlloc(32LL, -1LL);
        uint64_t v257 = v128;
        *(_DWORD *)uint64_t v127 = 136446210;
        unint64_t v259 = v123;
        swift_errorRetain(v123);
        uint64_t v129 = sub_100004AEC((uint64_t *)&unk_1009A5470);
        uint64_t v130 = String.init<A>(describing:)(&v259, v129);
        unint64_t v259 = sub_1003F11D4(v130, v131, &v257);
        uint64_t v27 = v240;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, &v260, v127 + 4, v127 + 12);
        swift_bridgeObjectRelease();
        swift_errorRelease(v123);
        swift_errorRelease(v123);
        _os_log_impl((void *)&_mh_execute_header, v125, v126, "Unpair command failed. Error %{public}s", v127, 0xCu);
        swift_arrayDestroy(v128, 1LL, (char *)&type metadata for Any + 8);
        uint64_t v132 = v128;
        uint64_t v65 = v253;
        swift_slowDealloc(v132, -1LL, -1LL);
        swift_slowDealloc(v127, -1LL, -1LL);

        swift_errorRelease(v123);
      }

      else
      {
        swift_errorRelease(v123);
        swift_errorRelease(v123);
        swift_errorRelease(v123);
      }

      uint64_t v133 = *v254;
      uint64_t *v254 = 0LL;
      swift_errorRelease(v133);
    }

    id v134 = v251;
    dispatch_group_enter(v251);
    uint64_t v135 = swift_allocObject(&unk_10094E348, 32LL, 7LL);
    *(void *)(v135 + swift_weakDestroy(v0 + 16) = v65;
    *(void *)(v135 + 24) = v134;
    swift_retain();
    id v136 = v134;
    sub_10028EBEC(0, (uint64_t)v27, (uint64_t)sub_1002DDFF4, v135);
    uint64_t v137 = swift_release();
    uint64_t v138 = v242;
    static DispatchTime.now()(v137);
    uint64_t v139 = v243;
    + infix(_:_:)(v138, 60.0);
    id v140 = v138;
    uint64_t v141 = v244;
    uint64_t v142 = v252;
    ((void (*)(char *, uint64_t))v252)(v140, v244);
    uint64_t v251 = v136;
    uint64_t v143 = OS_dispatch_group.wait(timeout:)(v139) & 1;
    ((void (*)(char *, uint64_t))v142)(v139, v141);
    if ((static DispatchTimeoutResult.== infix(_:_:)(v143, 1LL) & 1) != 0)
    {
      uint64_t v144 = v237;
      uint64_t v145 = sub_10001DC4C((uint64_t)v27, v237, type metadata accessor for OwnedBeaconGroup);
      uint64_t v146 = (os_log_s *)Logger.logObject.getter(v145);
      os_log_type_t v147 = static os_log_type_t.error.getter(v146);
      if (os_log_type_enabled(v146, v147))
      {
        uint64_t v148 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v149 = swift_slowAlloc(32LL, -1LL);
        uint64_t v257 = v149;
        *(_DWORD *)uint64_t v148 = 136315138;
        uint64_t v150 = sub_1001D0FA8();
        unint64_t v259 = sub_1003F11D4(v150, v151, &v257);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, &v260, v148 + 4, v148 + 12);
        swift_bridgeObjectRelease();
        sub_100018C68(v144, type metadata accessor for OwnedBeaconGroup);
        _os_log_impl((void *)&_mh_execute_header, v146, v147, "Timed out waiting for FMNS status update %s", v148, 0xCu);
        swift_arrayDestroy(v149, 1LL, (char *)&type metadata for Any + 8);
        uint64_t v152 = v149;
        uint64_t v65 = v253;
        swift_slowDealloc(v152, -1LL, -1LL);
        swift_slowDealloc(v148, -1LL, -1LL);
      }

      else
      {
        sub_100018C68(v144, type metadata accessor for OwnedBeaconGroup);
      }

      unint64_t v153 = sub_10014A2C0();
      uint64_t v154 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v153, 0LL, 0LL);
      _BYTE *v155 = 9;
      uint64_t v156 = *v254;
      uint64_t *v254 = v154;
      swift_errorRelease(v156);
    }

    uint64_t v157 = *v254;
    if (*v254)
    {
      swift_errorRetain(*v254);
      swift_errorRetain(v157);
      uint64_t v158 = swift_errorRetain(v157);
      uint64_t v159 = (os_log_s *)Logger.logObject.getter(v158);
      os_log_type_t v160 = static os_log_type_t.error.getter(v159);
      if (os_log_type_enabled(v159, v160))
      {
        uint64_t v161 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v162 = swift_slowAlloc(32LL, -1LL);
        uint64_t v257 = v162;
        *(_DWORD *)uint64_t v161 = 136446210;
        unint64_t v259 = v157;
        swift_errorRetain(v157);
        uint64_t v163 = sub_100004AEC((uint64_t *)&unk_1009A5470);
        uint64_t v164 = String.init<A>(describing:)(&v259, v163);
        unint64_t v259 = sub_1003F11D4(v164, v165, &v257);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v259, &v260, v161 + 4, v161 + 12);
        swift_bridgeObjectRelease();
        swift_errorRelease(v157);
        swift_errorRelease(v157);
        _os_log_impl( (void *)&_mh_execute_header,  v159,  v160,  "Unable to update FMNS status. Error %{public}s",  v161,  0xCu);
        swift_arrayDestroy(v162, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v162, -1LL, -1LL);
        swift_slowDealloc(v161, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease(v157);
        swift_errorRelease(v157);
      }

      uint64_t v204 = v248;
      swift_errorRetain(v157);
      uint64_t v205 = (void *)_convertErrorToNSError(_:)(v157);
      v204[2](v204, v205);

      swift_errorRelease(v157);
      swift_errorRelease(v157);

      goto LABEL_46;
    }

    uint64_t v166 = v251;
    dispatch_group_enter(v251);
    uint64_t v167 = swift_allocObject(&unk_10094E370, 32LL, 7LL);
    *(void *)(v167 + swift_weakDestroy(v0 + 16) = v65;
    *(void *)(v167 + 24) = v166;
    unint64_t v259 = (unint64_t)_swiftEmptyArrayStorage;
    swift_retain_n(v65, 2LL);
    uint64_t v168 = v166;
    sub_1001CC778();
    uint64_t v170 = v169;
    uint64_t v171 = v245;
    swift_retain();
    sub_10014A98C(v170, v171, &v259, 0);
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v172 = v259;
    if (v259 >> 62)
    {
      if ((v259 & 0x8000000000000000LL) != 0LL) {
        uint64_t v208 = v259;
      }
      else {
        uint64_t v208 = v259 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v259);
      uint64_t v209 = _CocoaArrayWrapper.endIndex.getter(v208);
      swift_bridgeObjectRelease();
      if (v209) {
        goto LABEL_43;
      }
    }

    else if (*(void *)((v259 & 0xFFFFFFFFFFFFF8LL) + 0x10))
    {
LABEL_43:
      uint64_t v173 = (void *)swift_allocObject(&unk_10094E398, 24LL, 7LL);
      uint64_t v251 = (dispatch_group_s *)v173;
      v173[2] = 0LL;
      uint64_t v174 = v173 + 2;
      uint64_t v257 = v172;
      swift_bridgeObjectRetain(v172);
      uint64_t v175 = sub_100004AEC(&qword_1009A2598);
      uint64_t v176 = sub_100004AEC(&qword_1009A25A0);
      uint64_t v252 = v168;
      uint64_t v177 = v176;
      uint64_t v178 = sub_1000372EC( &qword_1009A25A8,  &qword_1009A2598,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
      uint64_t v179 = sub_1000372EC(&qword_1009A25B0, &qword_1009A25A0, (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v180 = v223;
      Publishers.MergeMany.init<A>(_:)(&v257, v175, v177, v178, v179);
      uint64_t v181 = sub_1000372EC( &qword_1009A25B8,  &qword_1009A2578,  (uint64_t)&protocol conformance descriptor for Publishers.MergeMany<A>);
      uint64_t v182 = v227;
      uint64_t v183 = v226;
      Publisher.collect()(v226, v181);
      (*(void (**)(char *, uint64_t))(v225 + 8))(v180, v183);
      uint64_t v184 = sub_100004AEC(&qword_1009A25C0);
      uint64_t v185 = sub_1000372EC( &qword_1009A25C8,  &qword_1009A2580,  (uint64_t)&protocol conformance descriptor for Publishers.Collect<A>);
      char v186 = v230;
      uint64_t v187 = v229;
      Publisher.map<A>(_:)(sub_10013B668, 0LL, v229, v184, v185);
      (*(void (**)(char *, uint64_t))(v228 + 8))(v182, v187);
      uint64_t v188 = sub_100004AEC(&qword_1009A25D0);
      uint64_t v189 = sub_1000372EC( &qword_1009A25D8,  &qword_1009A2588,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
      uint64_t v190 = sub_1000372EC(&qword_1009A25E0, &qword_1009A25D0, (uint64_t)&protocol conformance descriptor for Just<A>);
      char v191 = v233;
      uint64_t v192 = v232;
      Publisher.catch<A>(_:)(sub_10013B678, 0LL, v232, v188, v189, v190);
      (*(void (**)(char *, uint64_t))(v231 + 8))(v186, v192);
      uint64_t v193 = v224;
      sub_10001DC4C((uint64_t)v240, v224, type metadata accessor for OwnedBeaconGroup);
      uint64_t v194 = *(unsigned __int8 *)(v241 + 80);
      uint64_t v195 = (v194 + 16) & ~v194;
      unint64_t v196 = (v222 + v195 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v197 = (v196 + 23) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v198 = swift_allocObject(&unk_10094E3C0, v197 + 8, v194 | 7);
      sub_10002218C(v193, v198 + v195, type metadata accessor for OwnedBeaconGroup);
      uint64_t v199 = (void (**)(uint64_t))(v198 + v196);
      uint64_t v200 = v251;
      uint64_t v168 = v252;
      *uint64_t v199 = sub_1002DDFF4;
      v199[1] = (void (*)(uint64_t))v167;
      *(void *)(v198 + v197) = v200;
      uint64_t v201 = sub_1000372EC( &qword_1009A25E8,  &qword_1009A2590,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
      swift_retain();
      swift_retain();
      uint64_t v202 = v235;
      uint64_t v203 = Publisher<>.sink(receiveValue:)(sub_100152F4C, v198, v235, v201);
      swift_release();
      (*(void (**)(char *, uint64_t))(v234 + 8))(v191, v202);
      swift_beginAccess(v174, &v257, 1LL, 0LL);
      uint64_t *v174 = v203;
      swift_release();
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      goto LABEL_54;
    }

    uint64_t v210 = *(void *)(v65 + 16);
    *(void *)(v65 + swift_weakDestroy(v0 + 16) = 0LL;
    swift_errorRelease(v210);
    dispatch_group_leave(v168);
    swift_release();
    swift_release();
    swift_bridgeObjectRelease();
LABEL_54:

    uint64_t v211 = *v254;
    if (*v254)
    {
      swift_errorRetain(*v254);
      swift_errorRetain(v211);
      uint64_t v212 = swift_errorRetain(v211);
      uint64_t v213 = (os_log_s *)Logger.logObject.getter(v212);
      os_log_type_t v214 = static os_log_type_t.error.getter(v213);
      if (os_log_type_enabled(v213, v214))
      {
        uint64_t v215 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v216 = swift_slowAlloc(32LL, -1LL);
        unint64_t v259 = v216;
        *(_DWORD *)uint64_t v215 = 136446210;
        uint64_t v256 = v211;
        swift_errorRetain(v211);
        uint64_t v217 = sub_100004AEC((uint64_t *)&unk_1009A5470);
        uint64_t v218 = String.init<A>(describing:)(&v256, v217);
        uint64_t v256 = sub_1003F11D4(v218, v219, (uint64_t *)&v259);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v256, &v257, v215 + 4, v215 + 12);
        swift_bridgeObjectRelease();
        swift_errorRelease(v211);
        swift_errorRelease(v211);
        _os_log_impl( (void *)&_mh_execute_header,  v213,  v214,  "Unable to remove related records. Error %{public}s",  v215,  0xCu);
        swift_arrayDestroy(v216, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v216, -1LL, -1LL);
        swift_slowDealloc(v215, -1LL, -1LL);
      }

      else
      {
        swift_errorRelease(v211);
        swift_errorRelease(v211);
      }

      uint64_t v220 = (uint64_t)v240;
      swift_errorRetain(v211);
      uint64_t v221 = (void *)_convertErrorToNSError(_:)(v211);
      v248[2](v248, v221);

      swift_errorRelease(v211);
      swift_errorRelease(v211);

      uint64_t v206 = v220;
    }

    else
    {
      v248[2](v248, 0LL);

      uint64_t v206 = (uint64_t)v240;
    }

    goto LABEL_47;
  }

  sub_100015794((uint64_t)v49, &qword_1009AA830);
  uint64_t v51 = v247;
  uint64_t v52 = v246(v247, v50, v28);
  uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
  os_log_type_t v54 = static os_log_type_t.error.getter(v53);
  if (os_log_type_enabled(v53, v54))
  {
    uint64_t v55 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v56 = swift_slowAlloc(32LL, -1LL);
    uint64_t v260 = v56;
    *(_DWORD *)uint64_t v55 = 136446210;
    uint64_t v57 = sub_100007864( &qword_1009A6E60,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
    uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter(v28, v57);
    uint64_t v257 = sub_1003F11D4(v58, v59, &v260);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v257, v258, v55 + 4, v55 + 12);
    swift_bridgeObjectRelease();
    v47(v51, v28);
    _os_log_impl((void *)&_mh_execute_header, v53, v54, "No beacon group for %{public}s", v55, 0xCu);
    swift_arrayDestroy(v56, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v56, -1LL, -1LL);
    swift_slowDealloc(v55, -1LL, -1LL);
  }

  else
  {
    v47(v51, v28);
  }

  uint64_t v60 = v248;
  unint64_t v61 = sub_10014A2C0();
  uint64_t v62 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v61, 0LL, 0LL);
  *uint64_t v63 = 1;
  uint64_t v64 = (void *)_convertErrorToNSError(_:)(v62);
  v60[2](v60, v64);

  swift_errorRelease(v62);
  return swift_release();
}

uint64_t sub_1002CAAF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = static os_log_type_t.default.getter(a1);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v5 = qword_100A2B030;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v8 = UUID.uuidString.getter(v7);
  uint64_t v10 = v9;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v11 = sub_1000226F4();
  *(void *)(v7 + 64) = v11;
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + sub_10016CF88(v0 + 40) = v10;
  os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  v5,  "#Durian: Command fetchFirmwareVersion identifier: %@",  52LL,  2LL,  v7);
  uint64_t v12 = swift_bridgeObjectRelease();
  uint64_t v13 = static os_log_type_t.default.getter(v12);
  uint64_t v14 = qword_100A2B030;
  uint64_t v15 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v16 = UUID.uuidString.getter(v15);
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = v11;
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + sub_10016CF88(v0 + 40) = v17;
  os_log(_:dso:log:_:_:)( v13,  &_mh_execute_header,  v14,  "#Durian: Will fetch firwmare version for device %@.",  51LL,  2LL,  v15);
  swift_bridgeObjectRelease();
  uint64_t v18 = sub_100004AEC(&qword_1009A7D48);
  swift_allocObject(v18, *(unsigned int *)(v18 + 48), *(unsigned __int16 *)(v18 + 52));
  Future.init()(v19);
  uint64_t v20 = swift_allocObject(&unk_10094D0D8, 32LL, 7LL);
  *(void *)(v20 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v20 + 24) = a3;
  swift_retain();
  Future.addSuccess(block:)(sub_1002D63F4, v20);
  swift_release();
  swift_release();
  uint64_t v21 = swift_allocObject(&unk_10094D100, 32LL, 7LL);
  *(void *)(v21 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v21 + 24) = a3;
  swift_retain();
  Future.addFailure(block:)(sub_1002D6440, v21);
  swift_release();
  swift_release();
  return swift_release();
}

void sub_1002CAD1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v107 = a2;
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v120 = *(void *)(v5 - 8);
  uint64_t v121 = v5;
  __chkstk_darwin(v5);
  unint64_t v119 = (char *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for HashAlgorithm(0LL);
  uint64_t v117 = *(void *)(v7 - 8);
  uint64_t v118 = v7;
  __chkstk_darwin(v7);
  uint64_t v116 = (char *)&v99 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v125 = type metadata accessor for OwnedDeviceKeyRecord(0LL);
  uint64_t v114 = *(void *)(v125 - 8);
  __chkstk_darwin(v125);
  uint64_t v129 = (uint64_t)&v99 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A4780);
  __chkstk_darwin(v10);
  uint64_t v124 = (uint64_t)&v99 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009A7E78);
  __chkstk_darwin(v12);
  uint64_t v110 = (char *)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v128 = sub_100004AEC(&qword_1009A7E80);
  uint64_t v113 = *(void *)(v128 - 8);
  uint64_t v14 = __chkstk_darwin(v128);
  uint64_t v108 = (char *)&v99 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  os_log_type_t v111 = (uint64_t *)((char *)&v99 - v16);
  uint64_t v103 = type metadata accessor for URL(0LL);
  unint64_t v115 = *(char **)(v103 - 8);
  uint64_t v17 = __chkstk_darwin(v103);
  uint64_t v105 = (char *)&v99 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v104 = (char *)&v99 - v20;
  __chkstk_darwin(v19);
  uint64_t v127 = (char *)&v99 - v21;
  uint64_t v22 = sub_100004AEC(&qword_1009A7E88);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v106 = (char *)&v99 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23);
  uint64_t v109 = (uint64_t)&v99 - v25;
  uint64_t v26 = type metadata accessor for UUID(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v30 = (char *)&v99 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = __chkstk_darwin(v28);
  unint64_t v131 = (char *)&v99 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v130 = (char *)&v99 - v34;
  __chkstk_darwin(v33);
  uint64_t v36 = (char *)&v99 - v35;
  if (qword_10099BA30 != -1) {
    swift_once(&qword_10099BA30, sub_100795FD8);
  }
  uint64_t v99 = type metadata accessor for Logger(0LL);
  sub_10000A720(v99, (uint64_t)qword_100A2B7D8);
  uint64_t v123 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v27 + 16);
  uint64_t v37 = v123(v36, a1, v26);
  uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v39 = static os_log_type_t.default.getter(v38);
  BOOL v40 = os_log_type_enabled(v38, v39);
  uint64_t v126 = v26;
  uint64_t v101 = a3;
  uint64_t v112 = a1;
  uint64_t v100 = v30;
  if (v40)
  {
    uint64_t v41 = swift_slowAlloc(22LL, -1LL);
    uint64_t v42 = swift_slowAlloc(32LL, -1LL);
    uint64_t v133 = v42;
    *(_DWORD *)uint64_t v41 = 141558275;
    uint64_t v134 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, v135, v41 + 4, v41 + 12);
    *(_WORD *)(v41 + 12) = 2081;
    uint64_t v43 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter(v126, v43);
    uint64_t v134 = sub_1003F11D4(v44, v45, &v133);
    uint64_t v26 = v126;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, v135, v41 + 14, v41 + 22);
    swift_bridgeObjectRelease();
    uint64_t v122 = *(void (**)(char *, uint64_t))(v27 + 8);
    v122(v36, v26);
    _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "OwnedDeviceKeyRecord for uuid %{private,mask.hash}s.",  (uint8_t *)v41,  0x16u);
    swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1LL, -1LL);
    swift_slowDealloc(v41, -1LL, -1LL);
  }

  else
  {
    uint64_t v122 = *(void (**)(char *, uint64_t))(v27 + 8);
    v122(v36, v26);
  }

  uint64_t v107 = *(void *)(*(void *)(v107 + 256) + 136LL);
  unint64_t v46 = (int *)v125;
  if (qword_10099B8A8 != -1) {
    swift_once(&qword_10099B8A8, sub_1006E33E8);
  }
  uint64_t v47 = v103;
  uint64_t v48 = sub_10000A720(v103, (uint64_t)qword_100A2B2E0);
  uint64_t v49 = UUID.uuidString.getter(v48);
  uint64_t v50 = v127;
  URL.appendingPathComponent(_:isDirectory:)(v49, v51, 1LL);
  swift_bridgeObjectRelease();
  uint64_t v52 = (void (*)(char *, char *, uint64_t))*((void *)v115 + 2);
  uint64_t v53 = v104;
  v52(v104, v50, v47);
  uint64_t v54 = v128;
  uint64_t v55 = (uint64_t)v108;
  uint64_t v102 = &v108[*(int *)(v128 + 40)];
  uint64_t v56 = (uint64_t)v102;
  uint64_t v57 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56LL);
  v58(v56, 1LL, 1LL, v57);
  v52((char *)v55, v53, v47);
  *(void *)(v55 + *(int *)(v54 + 36)) = v107;
  unint64_t v59 = v105;
  v52(v105, v53, v47);
  swift_retain();
  uint64_t v60 = (uint64_t)v110;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)(v59, 0LL, 0LL);
  unint64_t v61 = (void (*)(char *, uint64_t))*((void *)v115 + 1);
  v61(v53, v47);
  v58(v60, 0LL, 1LL, v57);
  sub_1000D4D50(v60, (uint64_t)v102, &qword_1009A7E78);
  uint64_t v62 = (uint64_t)v111;
  sub_100015750(v55, (uint64_t)v111, &qword_1009A7E80);
  uint64_t v63 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v113 + 56);
  uint64_t v64 = (uint64_t)v106;
  uint64_t v65 = v128;
  v63(v106, 1LL, 1LL, v128);
  sub_100015794(v64, &qword_1009A7E90);
  sub_100015750(v62, v64, &qword_1009A7E80);
  v63((char *)v64, 0LL, 1LL, v65);
  uint64_t v66 = v109;
  sub_100015750(v64, v109, &qword_1009A7E88);
  v61(v127, v47);
  uint64_t v67 = sub_100004AEC(&qword_1009A7E98);
  uint64_t v68 = (void *)swift_allocObject(v67, *(unsigned int *)(v67 + 48), *(unsigned __int16 *)(v67 + 52));
  sub_100015750( v66,  (uint64_t)v68 + *(void *)(class metadata base offset for _SequenceBox + *v68 + 16LL),  &qword_1009A7E88);
  uint64_t v134 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v69 = *(void *)(class metadata base offset for _SequenceBox + *v68 + 16LL);
  os_log_type_t v111 = v68;
  uint64_t v70 = (uint64_t)v68 + v69;
  uint64_t v71 = sub_100004AEC(&qword_1009A7EB0);
  uint64_t v72 = (char *)swift_allocObject(v71, *(unsigned int *)(v71 + 48), *(unsigned __int16 *)(v71 + 52));
  sub_10001581C( v70,  (uint64_t)&v72[*(void *)(class metadata base offset for _IteratorBox + *(void *)v72 + 16LL)],  &qword_1009A7E88);
  uint64_t v73 = &v72[*(void *)(class metadata base offset for _IteratorBox + *(void *)v72 + 16LL)];
  uint64_t v110 = v72;
  swift_retain();
  uint64_t v74 = v124;
  unint64_t v115 = v73;
  sub_1005441EC(v124);
  uint64_t v114 = *(void *)(v114 + 48);
  int v75 = ((uint64_t (*)(uint64_t, uint64_t, int *))v114)(v74, 1LL, v46);
  uint64_t v76 = v129;
  if (v75 != 1)
  {
    LODWORD(v113) = enum case for HashAlgorithm.sha256(_:);
    sub_10002218C(v74, v129, type metadata accessor for OwnedDeviceKeyRecord);
    uint64_t v89 = (void (*)(char *, uint64_t, uint64_t))v123;
    v123(v130, v76 + v46[5], v26);
    v89(v131, v76 + v46[6], v26);
    uint64_t v90 = (uint64_t *)(v76 + v46[7]);
    uint64_t v91 = *v90;
    unint64_t v92 = v90[1];
    sub_10001736C(*v90, v92);
    sub_10001736C(v91, v92);
    sub_1004DFE7C(v91, v92);
    uint64_t v94 = v93;
    sub_1004DDA84(v93, 0);
    uint64_t v96 = v95;
    CCECCryptorRelease(v94);
    sub_100016F9C(v91, v92);
    __asm { BR              X9 }
  }

  uint64_t v77 = v110;
  swift_release();
  swift_setDeallocating(v77);
  sub_100015794( (uint64_t)&v77[*(void *)(class metadata base offset for _IteratorBox + *(void *)v77 + 16LL)],  &qword_1009A7E88);
  swift_deallocClassInstance( v77,  *(unsigned int *)(*(void *)v77 + 48LL),  *(unsigned __int16 *)(*(void *)v77 + 52LL));
  if (qword_10099B4D8 != -1) {
    swift_once(&qword_10099B4D8, sub_1004AB71C);
  }
  sub_10000A720(v99, (uint64_t)qword_100A2AB18);
  uint64_t v78 = v134;
  uint64_t v79 = v100;
  v123(v100, v112, v26);
  swift_bridgeObjectRetain_n(v78, 2LL);
  uint64_t v81 = (os_log_s *)Logger.logObject.getter(v80);
  os_log_type_t v82 = static os_log_type_t.default.getter(v81);
  if (os_log_type_enabled(v81, v82))
  {
    uint64_t v83 = swift_slowAlloc(32LL, -1LL);
    uint64_t v84 = swift_slowAlloc(32LL, -1LL);
    uint64_t v133 = v84;
    *(_DWORD *)uint64_t v83 = 134218499;
    if ((unint64_t)v78 >> 62)
    {
      if (v78 < 0) {
        uint64_t v98 = v78;
      }
      else {
        uint64_t v98 = v78 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v78);
      uint64_t v85 = _CocoaArrayWrapper.endIndex.getter(v98);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v85 = *(void *)((v78 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    swift_bridgeObjectRelease();
    uint64_t v132 = v85;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v83 + 4, v83 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v83 + 12) = 2160;
    uint64_t v132 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v83 + 14, v83 + 22);
    *(_WORD *)(v83 + 22) = 2081;
    uint64_t v86 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v87 = dispatch thunk of CustomStringConvertible.description.getter(v26, v86);
    uint64_t v132 = sub_1003F11D4(v87, v88, &v133);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v83 + 24, v83 + 32);
    swift_bridgeObjectRelease();
    v122(v79, v26);
    _os_log_impl( (void *)&_mh_execute_header,  v81,  v82,  "Got %ld ownedDeviceKeyRecord for %{private,mask.hash}s.",  (uint8_t *)v83,  0x20u);
    swift_arrayDestroy(v84, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v84, -1LL, -1LL);
    swift_slowDealloc(v83, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v78, 2LL);
    v122(v79, v26);
  }

  swift_beginAccess(&v134, &v133, 0LL, 0LL);
  sub_100022898(0LL, &qword_1009A7EA8, &OBJC_CLASS___SPOwnedDeviceKeyRecord_ptr);
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(v101 + 16))(v101, isa);
  swift_bridgeObjectRelease();
  swift_release();
}

uint64_t sub_1002CC120(uint64_t a1, void (*a2)(char *, uint64_t), uint64_t a3)
{
  uint64_t v103 = a2;
  uint64_t v96 = type metadata accessor for Date(0LL);
  uint64_t v95 = *(void *)(v96 - 8);
  __chkstk_darwin(v96);
  uint64_t v101 = (char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v94 = type metadata accessor for HashAlgorithm(0LL);
  uint64_t v93 = *(void *)(v94 - 8);
  __chkstk_darwin(v94);
  unint64_t v92 = (char *)&v88 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (int *)type metadata accessor for OwnedDeviceKeyRecord(0LL);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v97 = (uint64_t)&v88 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v88 - v10;
  uint64_t v110 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v110 - 8);
  uint64_t v13 = __chkstk_darwin(v110);
  uint64_t v15 = (char *)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v100 = (char *)&v88 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v107 = (char *)&v88 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v106 = (char *)&v88 - v21;
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v88 - v22;
  if (qword_10099BA30 != -1) {
    swift_once(&qword_10099BA30, sub_100795FD8);
  }
  uint64_t v24 = type metadata accessor for Logger(0LL);
  uint64_t v25 = sub_10000A720(v24, (uint64_t)qword_100A2B7D8);
  uint64_t v108 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v109 = a1;
  uint64_t v26 = v108(v23, a1, v110);
  uint64_t v104 = v25;
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.default.getter(v27);
  BOOL v29 = os_log_type_enabled(v27, v28);
  uint64_t v105 = a3;
  uint64_t v99 = v15;
  if (v29)
  {
    uint64_t v30 = swift_slowAlloc(22LL, -1LL);
    uint64_t v31 = swift_slowAlloc(32LL, -1LL);
    uint64_t v98 = v7;
    uint64_t v32 = v31;
    uint64_t v111 = v31;
    *(_DWORD *)uint64_t v30 = 141558275;
    uint64_t v113 = 1752392040LL;
    uint64_t v33 = v110;
    uint64_t v102 = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v30 + 4, v30 + 12);
    *(_WORD *)(v30 + 12) = 2081;
    uint64_t v34 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter(v33, v34);
    uint64_t v113 = sub_1003F11D4(v35, v36, &v111);
    uint64_t v11 = v102;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v30 + 14, v30 + 22);
    swift_bridgeObjectRelease();
    uint64_t v37 = *(void (**)(char *, uint64_t))(v12 + 8);
    v37(v23, v33);
    _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "Creating ownedDeviceKeyRecord for uuid %{private,mask.hash}s",  (uint8_t *)v30,  0x16u);
    swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v38 = v32;
    uint64_t v7 = v98;
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  else
  {
    uint64_t v37 = *(void (**)(char *, uint64_t))(v12 + 8);
    v37(v23, v110);
  }

  sub_1004EAB38(v109, (uint64_t)v11);
  uint64_t v103 = v37;
  uint64_t v39 = v110;
  BOOL v40 = (void (*)(char *, char *, uint64_t))v108;
  v108(v106, (uint64_t)&v11[v7[5]], v110);
  v40(v107, &v11[v7[6]], v39);
  uint64_t v41 = (uint64_t *)&v11[v7[7]];
  uint64_t v43 = *v41;
  unint64_t v42 = v41[1];
  sub_10001736C(*v41, v42);
  sub_10001736C(v43, v42);
  uint64_t v44 = sub_1004DFCF0(v43, v42);
  uint64_t v46 = v45;
  uint64_t v98 = v7;
  sub_100016F9C(v43, v42);
  sub_1001782E4(v44, v46);
  sub_100016F9C(v43, v42);
  uint64_t v47 = v111;
  unint64_t v48 = v112;
  sub_10001736C(v43, v42);
  sub_10001736C(v43, v42);
  uint64_t v49 = sub_1004DFCF0(v43, v42);
  uint64_t v51 = v50;
  sub_100016F9C(v43, v42);
  sub_1001782E4(v49, v51);
  uint64_t v91 = v47;
  sub_100016F9C(v43, v42);
  uint64_t v52 = v111;
  unint64_t v53 = v112;
  uint64_t v54 = v93;
  uint64_t v55 = v92;
  uint64_t v56 = v94;
  (*(void (**)(char *, void, uint64_t))(v93 + 104))(v92, enum case for HashAlgorithm.sha256(_:), v94);
  uint64_t v90 = Data.hash(algorithm:)(v55, v52, v53);
  unint64_t v89 = v57;
  (*(void (**)(char *, uint64_t))(v54 + 8))(v55, v56);
  sub_100016F9C(v52, v53);
  uint64_t v58 = objc_autoreleasePoolPush();
  sub_100544824((uint64_t)v11);
  uint64_t v102 = v11;
  objc_autoreleasePoolPop(v58);
  uint64_t v100 = (char *)objc_allocWithZone(&OBJC_CLASS___SPOwnedDeviceKeyRecord);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  Class v60 = UUID._bridgeToObjectiveC()().super.isa;
  uint64_t v61 = v91;
  Class v62 = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v63 = v90;
  unint64_t v64 = v89;
  Class v65 = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v66 = v101;
  Class v67 = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v100 = (char *)[v100 initWithIdentifier:isa deviceIdentifier:v60 advertisement:v62 hashedAdvertisement:v65 creationDate:v67];

  sub_100016F9C(v63, v64);
  sub_100016F9C(v61, v48);
  (*(void (**)(char *, uint64_t))(v95 + 8))(v66, v96);
  uint64_t v68 = v110;
  uint64_t v69 = v103;
  v103(v107, v110);
  v69(v106, v68);
  uint64_t v70 = (uint64_t)v102;
  uint64_t v71 = v97;
  sub_10001DC4C((uint64_t)v102, v97, type metadata accessor for OwnedDeviceKeyRecord);
  uint64_t v72 = v99;
  uint64_t v73 = v108(v99, v109, v68);
  uint64_t v74 = (os_log_s *)Logger.logObject.getter(v73);
  os_log_type_t v75 = static os_log_type_t.default.getter(v74);
  int v76 = v75;
  if (os_log_type_enabled(v74, v75))
  {
    uint64_t v77 = swift_slowAlloc(42LL, -1LL);
    uint64_t v109 = swift_slowAlloc(64LL, -1LL);
    uint64_t v111 = v109;
    *(_DWORD *)uint64_t v77 = 141558787;
    uint64_t v113 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v77 + 4, v77 + 12);
    *(_WORD *)(v77 + 12) = 2081;
    LODWORD(v108) = v76;
    uint64_t v78 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v79 = v110;
    uint64_t v80 = dispatch thunk of CustomStringConvertible.description.getter(v110, v78);
    uint64_t v113 = sub_1003F11D4(v80, v81, &v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v77 + 14, v77 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68(v71, type metadata accessor for OwnedDeviceKeyRecord);
    *(_WORD *)(v77 + 22) = 2160;
    uint64_t v113 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v77 + 24, v77 + 32);
    *(_WORD *)(v77 + 32) = 2081;
    os_log_type_t v82 = v99;
    uint64_t v83 = dispatch thunk of CustomStringConvertible.description.getter(v79, v78);
    uint64_t v113 = sub_1003F11D4(v83, v84, &v111);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v113, v114, v77 + 34, v77 + 42);
    swift_bridgeObjectRelease();
    v69(v82, v79);
    _os_log_impl( (void *)&_mh_execute_header,  v74,  (os_log_type_t)v108,  "New OwnedDeviceKeyRecord with uuid: %{private,mask.hash}s created for %{private,mask.hash}s.",  (uint8_t *)v77,  0x2Au);
    uint64_t v85 = v109;
    swift_arrayDestroy(v109, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v85, -1LL, -1LL);
    swift_slowDealloc(v77, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(v71, type metadata accessor for OwnedDeviceKeyRecord);
    v69(v72, v110);
  }

  uint64_t v86 = v100;
  (*(void (**)(uint64_t, char *, void))(v105 + 16))(v105, v100, 0LL);

  return sub_100018C68(v70, type metadata accessor for OwnedDeviceKeyRecord);
}

uint64_t sub_1002CCD2C(uint64_t a1, size_t a2, const void *a3)
{
  uint64_t v139 = a3;
  size_t v152 = a2;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v161 = *(void *)(v4 - 8);
  uint64_t v162 = v4;
  __chkstk_darwin(v4);
  unint64_t v151 = (char *)&v136 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for HashAlgorithm(0LL);
  uint64_t v159 = *(void *)(v6 - 8);
  uint64_t v160 = v6;
  __chkstk_darwin(v6);
  uint64_t v158 = (char *)&v136 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v164 = type metadata accessor for OwnedDeviceKeyRecord(0LL);
  uint64_t v137 = *(void *)(v164 - 8);
  __chkstk_darwin(v164);
  uint64_t v9 = (char *)&v136 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A7E78);
  __chkstk_darwin(v10);
  uint64_t v166 = (char *)&v136 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009A7E80);
  uint64_t v169 = *(void *)(v12 - 8);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v171 = (uint64_t)&v136 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  size_t v156 = (size_t)&v136 - v15;
  uint64_t v16 = type metadata accessor for URL(0LL);
  uint64_t v147 = *(void *)(v16 - 8);
  uint64_t v17 = __chkstk_darwin(v16);
  unint64_t v153 = (char *)&v136 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v148 = (char *)&v136 - v20;
  __chkstk_darwin(v19);
  uint64_t v168 = (char *)&v136 - v21;
  uint64_t v22 = sub_100004AEC(&qword_1009A7E88);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v149 = (char *)&v136 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23);
  uint64_t v154 = (uint64_t)&v136 - v25;
  uint64_t v26 = type metadata accessor for UUID(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v173 = (char *)&v136 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v172 = (char *)&v136 - v31;
  __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v136 - v32;
  if (qword_10099BA30 != -1) {
    swift_once(&qword_10099BA30, sub_100795FD8);
  }
  uint64_t v34 = type metadata accessor for Logger(0LL);
  uint64_t v35 = sub_10000A720(v34, (uint64_t)qword_100A2B7D8);
  unint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v27 + 16);
  uint64_t v155 = a1;
  uint64_t v163 = v36;
  uint64_t v37 = ((uint64_t (*)(char *, uint64_t, uint64_t))v36)(v33, a1, v26);
  uint64_t v150 = v35;
  uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v39 = static os_log_type_t.default.getter(v38);
  BOOL v40 = os_log_type_enabled(v38, v39);
  uint64_t v170 = v9;
  uint64_t v165 = v26;
  uint64_t v157 = v27;
  uint64_t v167 = v12;
  if (v40)
  {
    uint64_t v41 = swift_slowAlloc(22LL, -1LL);
    uint64_t v42 = swift_slowAlloc(32LL, -1LL);
    uint64_t v175 = v42;
    *(_DWORD *)uint64_t v41 = 141558275;
    uint64_t v177 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v41 + 4, v41 + 12);
    *(_WORD *)(v41 + 12) = 2081;
    uint64_t v43 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter(v165, v43);
    uint64_t v177 = sub_1003F11D4(v44, v45, &v175);
    uint64_t v12 = v167;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v41 + 14, v41 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v27 + 8))(v33, v165);
    _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "Purging ownedDeviceKeyRecord for uuid %{private,mask.hash}s.",  (uint8_t *)v41,  0x16u);
    swift_arrayDestroy(v42, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v42, -1LL, -1LL);
    swift_slowDealloc(v41, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v27 + 8))(v33, v26);
  }

  uint64_t v146 = *(void *)(v152 + 256);
  uint64_t v46 = *(void *)(v146 + 136);
  if (qword_10099B8A8 != -1) {
    swift_once(&qword_10099B8A8, sub_1006E33E8);
  }
  uint64_t v145 = sub_10000A720(v16, (uint64_t)qword_100A2B2E0);
  uint64_t v47 = UUID.uuidString.getter(v145);
  unint64_t v48 = v168;
  URL.appendingPathComponent(_:isDirectory:)(v47, v49, 1LL);
  swift_bridgeObjectRelease();
  uint64_t v50 = v147;
  uint64_t v51 = *(void (**)(char *, char *, uint64_t))(v147 + 16);
  uint64_t v52 = v148;
  v51(v148, v48, v16);
  unint64_t v53 = (void (*)(uint64_t, char *, uint64_t))v51;
  uint64_t v144 = (void (*)(uint64_t, char *, uint64_t))v51;
  uint64_t v54 = v12;
  uint64_t v55 = v171;
  uint64_t v56 = v171 + *(int *)(v12 + 40);
  uint64_t v57 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v58 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v57 - 8) + 56LL);
  uint64_t v142 = v57;
  v58(v56, 1LL, 1LL, v57);
  uint64_t v141 = v58;
  v53(v55, v52, v16);
  *(void *)(v55 + *(int *)(v54 + 36)) = v46;
  uint64_t v59 = v55;
  Class v60 = v153;
  v53((uint64_t)v153, v52, v16);
  swift_retain();
  uint64_t v61 = (uint64_t)v166;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)(v60, 0LL, 0LL);
  Class v62 = *(void (**)(char *, uint64_t))(v50 + 8);
  v62(v52, v16);
  uint64_t v63 = v62;
  id v140 = v62;
  v58(v61, 0LL, 1LL, v57);
  sub_1000D4D50(v61, v56, &qword_1009A7E78);
  uint64_t v64 = v156;
  sub_100015750(v59, v156, &qword_1009A7E80);
  Class v65 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v169 + 56);
  uint64_t v66 = (uint64_t)v149;
  uint64_t v67 = v167;
  v65(v149, 1LL, 1LL, v167);
  uint64_t v143 = v65;
  sub_100015794(v66, &qword_1009A7E90);
  sub_100015750(v64, v66, &qword_1009A7E80);
  v65((char *)v66, 0LL, 1LL, v67);
  uint64_t v68 = v154;
  sub_100015750(v66, v154, &qword_1009A7E88);
  uint64_t v69 = v168;
  v63(v168, v16);
  uint64_t v147 = sub_100004AEC(&qword_1009A7E98);
  uint64_t v70 = swift_allocObject(v147, *(unsigned int *)(v147 + 48), *(unsigned __int16 *)(v147 + 52));
  sub_100015750( v68,  v70 + *(void *)(class metadata base offset for _SequenceBox + *(void *)v70 + 16LL),  &qword_1009A7E88);
  size_t v152 = sub_100300538(v70 + *(void *)(class metadata base offset for _SequenceBox + *(void *)v70 + 16LL));
  swift_setDeallocating(v70);
  sub_100015794( v70 + *(void *)(class metadata base offset for _SequenceBox + *(void *)v70 + 16LL),  &qword_1009A7E88);
  swift_deallocClassInstance( v70,  *(unsigned int *)(*(void *)v70 + 48LL),  *(unsigned __int16 *)(*(void *)v70 + 52LL));
  uint64_t v71 = v146;
  uint64_t v72 = *(void *)(v146 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  uint64_t v73 = type metadata accessor for BeaconKeyManager(0LL);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10014F014, v71, v72, (char *)&type metadata for () + 8, v73);
  uint64_t v169 = 0LL;
  int v138 = sub_1007A0890(v155);
  uint64_t v74 = swift_release();
  uint64_t v75 = *(void *)(v71 + 136);
  uint64_t v76 = UUID.uuidString.getter(v74);
  uint64_t v77 = v67;
  URL.appendingPathComponent(_:isDirectory:)(v76, v78, 1LL);
  swift_bridgeObjectRelease();
  uint64_t v79 = v144;
  v144((uint64_t)v52, v69, v16);
  uint64_t v80 = *(int *)(v67 + 40);
  uint64_t v81 = v171;
  uint64_t v82 = v171 + v80;
  uint64_t v83 = v142;
  unint64_t v84 = v141;
  v141(v171 + v80, 1LL, 1LL, v142);
  v79(v81, v52, v16);
  *(void *)(v81 + *(int *)(v77 + 36)) = v75;
  uint64_t v85 = v153;
  uint64_t v86 = v16;
  v79((uint64_t)v153, v52, v16);
  swift_retain();
  uint64_t v87 = (uint64_t)v166;
  DirectorySequence.init(at:includingPropertiesForKeys:options:)(v85, 0LL, 0LL);
  uint64_t v88 = v86;
  unint64_t v89 = v140;
  v140(v52, v86);
  v84(v87, 0LL, 1LL, v83);
  size_t v90 = v152;
  sub_1000D4D50(v87, v82, &qword_1009A7E78);
  uint64_t v91 = v156;
  sub_100015750(v171, v156, &qword_1009A7E80);
  uint64_t v92 = v167;
  uint64_t v93 = v143;
  v143((char *)v66, 1LL, 1LL, v167);
  sub_100015794(v66, &qword_1009A7E90);
  sub_100015750(v91, v66, &qword_1009A7E80);
  v93((char *)v66, 0LL, 1LL, v92);
  uint64_t v94 = v154;
  sub_100015750(v66, v154, &qword_1009A7E88);
  v89(v168, v88);
  uint64_t v95 = swift_allocObject(v147, *(unsigned int *)(v147 + 48), *(unsigned __int16 *)(v147 + 52));
  sub_100015750( v94,  v95 + *(void *)(class metadata base offset for _SequenceBox + *(void *)v95 + 16LL),  &qword_1009A7E88);
  size_t v96 = sub_100300538(v95 + *(void *)(class metadata base offset for _SequenceBox + *(void *)v95 + 16LL));
  swift_setDeallocating(v95);
  sub_100015794( v95 + *(void *)(class metadata base offset for _SequenceBox + *(void *)v95 + 16LL),  &qword_1009A7E88);
  swift_deallocClassInstance( v95,  *(unsigned int *)(*(void *)v95 + 48LL),  *(unsigned __int16 *)(*(void *)v95 + 52LL));
  swift_retain();
  uint64_t v97 = swift_retain();
  uint64_t v98 = (os_log_s *)Logger.logObject.getter(v97);
  os_log_type_t v99 = static os_log_type_t.default.getter(v98);
  if (os_log_type_enabled(v98, v99))
  {
    uint64_t v100 = swift_slowAlloc(22LL, -1LL);
    *(_DWORD *)uint64_t v100 = 134218240;
    uint64_t v175 = *(void *)(v90 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, &v176, v100 + 4, v100 + 12);
    swift_release();
    *(_WORD *)(v100 + 12) = 2048;
    uint64_t v175 = *(void *)(v96 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v175, &v176, v100 + 14, v100 + 22);
    swift_release();
    _os_log_impl( (void *)&_mh_execute_header,  v98,  v99,  "OldRecords count = %ld recordsAfterPurge count = %ld.",  (uint8_t *)v100,  0x16u);
    swift_slowDealloc(v100, -1LL, -1LL);
  }

  else
  {

    swift_release();
    swift_release();
  }

  uint64_t v101 = (uint64_t)v170;
  uint64_t v177 = (uint64_t)_swiftEmptyArrayStorage;
  uint64_t v102 = *(void *)(v90 + 16);
  uint64_t v103 = v165;
  if (v102)
  {
    uint64_t v104 = v90 + ((*(unsigned __int8 *)(v137 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v137 + 80));
    LODWORD(v155) = enum case for HashAlgorithm.sha256(_:);
    uint64_t v105 = *(void *)(v137 + 72);
    size_t v156 = v96;
    uint64_t v154 = v105;
    do
    {
      sub_10001DC4C(v104, v101, type metadata accessor for OwnedDeviceKeyRecord);
      if ((sub_1000BAD08(v101, v96) & 1) == 0)
      {
        uint64_t v107 = v163;
        uint64_t v106 = v164;
        v163(v172, v101 + *(int *)(v164 + 20), v103);
        v107(v173, v101 + *(int *)(v106 + 24), v103);
        uint64_t v108 = (uint64_t *)(v101 + *(int *)(v106 + 28));
        uint64_t v110 = *v108;
        unint64_t v109 = v108[1];
        sub_10001736C(*v108, v109);
        sub_10001736C(v110, v109);
        uint64_t v111 = v169;
        sub_1004DFE7C(v110, v109);
        uint64_t v113 = v111;
        if (!v111)
        {
          uint64_t v114 = v112;
          uint64_t v171 = sub_1004DDA84(v112, 0);
          uint64_t v116 = v115;
          CCECCryptorRelease(v114);
          sub_100016F9C(v110, v109);
          __asm { BR              X9 }
        }

        uint64_t v123 = static os_log_type_t.error.getter(v112);
        if (qword_10099B520 != -1) {
          swift_once(&qword_10099B520, sub_1004DC610);
        }
        uint64_t v124 = qword_100A2AC90;
        uint64_t v125 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v126 = swift_allocObject(v125, 72LL, 7LL);
        *(_OWORD *)(v126 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
        uint64_t v175 = v113;
        swift_errorRetain(v113);
        uint64_t v127 = sub_100004AEC((uint64_t *)&unk_1009A5470);
        uint64_t v128 = String.init<A>(describing:)(&v175, v127);
        uint64_t v130 = v129;
        *(void *)(v126 + 56) = &type metadata for String;
        *(void *)(v126 + 64) = sub_1000226F4();
        *(void *)(v126 + 32) = v128;
        *(void *)(v126 + sub_10016CF88(v0 + 40) = v130;
        os_log(_:dso:log:_:_:)(v123, &_mh_execute_header, v124, "Error deriving advertisementKey: %@", 35LL, 2LL, v126);
        swift_bridgeObjectRelease();
        unint64_t v131 = sub_100117A8C();
        uint64_t v132 = swift_allocError(&type metadata for CryptoTokenError, v131, 0LL, 0LL);
        _BYTE *v133 = 0;
        swift_willThrow(v132);
        swift_errorRelease(v113);
        uint64_t v171 = v110;
        sub_100016F9C(v110, v109);
        uint64_t v175 = 0LL;
        unint64_t v176 = 0xE000000000000000LL;
        _StringGuts.grow(_:)(35LL);
        v134._object = (void *)0x8000000100854640LL;
        v134._countAndFlagsBits = 0xD000000000000021LL;
        String.append(_:)(v134);
        uint64_t v174 = v132;
        uint64_t v135 = sub_100004AEC((uint64_t *)&unk_1009A5470);
        _print_unlocked<A, B>(_:_:)( &v174,  &v175,  v135,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
        _Block_release(v139);
        _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v175,  v176,  "searchpartyd/KeyRepresentable.swift",  35LL,  2LL,  256LL,  0);
        __break(1u);
        JUMPOUT(0x1002CE1E8LL);
      }

      sub_100018C68(v101, type metadata accessor for OwnedDeviceKeyRecord);
      v104 += v105;
      --v102;
    }

    while (v102);
  }

  swift_release();
  swift_release();
  if ((v138 & 1) != 0)
  {
    uint64_t v117 = 0LL;
  }

  else
  {
    unint64_t v118 = sub_1002DB1A8();
    uint64_t v117 = swift_allocError(&type metadata for BeaconKeyManager.Error, v118, 0LL, 0LL);
    _BYTE *v119 = 9;
  }

  sub_100022898(0LL, &qword_1009A7EA8, &OBJC_CLASS___SPOwnedDeviceKeyRecord_ptr);
  v120.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
  if (v117) {
    uint64_t v121 = (void *)_convertErrorToNSError(_:)(v117);
  }
  else {
    uint64_t v121 = 0LL;
  }
  (*((void (**)(const void *, Class, void *))v139 + 2))(v139, v120.super.isa, v121);

  swift_errorRelease(v117);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1002CE240(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v122 = a3;
  uint64_t v125 = a2;
  uint64_t v4 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v4);
  uint64_t v116 = (uint64_t)&v110 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v117 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v115 = *(void *)(v117 - 8);
  uint64_t v6 = __chkstk_darwin(v117);
  uint64_t v113 = (uint64_t)&v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v114 = (uint64_t)&v110 - v8;
  uint64_t v9 = sub_100004AEC(&qword_1009AA900);
  __chkstk_darwin(v9);
  os_log_t v124 = (os_log_t)((char *)&v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v11 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v12 = __chkstk_darwin(v11);
  unint64_t v119 = (char *)&v110 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v126 = (char *)&v110 - v15;
  __chkstk_darwin(v14);
  uint64_t v127 = (char *)&v110 - v16;
  uint64_t v17 = type metadata accessor for UUID(0LL);
  uint64_t v18 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v111 = (char *)&v110 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v112 = (char *)&v110 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v110 - v24;
  uint64_t v26 = __chkstk_darwin(v23);
  uint64_t v28 = (char *)&v110 - v27;
  uint64_t v29 = __chkstk_darwin(v26);
  uint64_t v31 = (char *)&v110 - v30;
  __chkstk_darwin(v29);
  uint64_t v33 = (char *)&v110 - v32;
  if (qword_10099B4D8 != -1) {
    swift_once(&qword_10099B4D8, sub_1004AB71C);
  }
  uint64_t v123 = v28;
  uint64_t v34 = type metadata accessor for Logger(0LL);
  uint64_t v35 = sub_10000A720(v34, (uint64_t)qword_100A2AB18);
  uint64_t v128 = (uint64_t (*)(char *, uint64_t, uint64_t))*((void *)v18 + 2);
  uint64_t v36 = v128(v33, a1, v17);
  uint64_t v120 = v35;
  uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v38 = static os_log_type_t.default.getter(v37);
  BOOL v39 = os_log_type_enabled(v37, v38);
  unint64_t v118 = v25;
  uint64_t v121 = a1;
  if (v39)
  {
    uint64_t v40 = swift_slowAlloc(22LL, -1LL);
    uint64_t v110 = swift_slowAlloc(32LL, -1LL);
    v134[0] = v110;
    *(_DWORD *)uint64_t v40 = 141558275;
    *(void *)&__int128 v131 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, (char *)&v131 + 8, v40 + 4, v40 + 12);
    *(_WORD *)(v40 + 12) = 2081;
    uint64_t v41 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v42 = dispatch thunk of CustomStringConvertible.description.getter(v17, v41);
    *(void *)&__int128 v131 = sub_1003F11D4(v42, v43, v134);
    a1 = v121;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, (char *)&v131 + 8, v40 + 14, v40 + 22);
    swift_bridgeObjectRelease();
    uint64_t v44 = (void (*)(char *, uint64_t))*((void *)v18 + 1);
    v44(v33, v17);
    _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "notificationBeacon for subscriptionId %{private,mask.hash}s",  (uint8_t *)v40,  0x16u);
    uint64_t v45 = v110;
    swift_arrayDestroy(v110, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v45, -1LL, -1LL);
    swift_slowDealloc(v40, -1LL, -1LL);
  }

  else
  {
    uint64_t v44 = (void (*)(char *, uint64_t))*((void *)v18 + 1);
    v44(v33, v17);
  }

  uint64_t v46 = v18;
  os_log_t v47 = v124;
  uint64_t v48 = *(void *)(v125 + 256);
  sub_100577F64(a1, (uint64_t)v124);
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord(0LL);
  int v50 = (*(uint64_t (**)(os_log_t, uint64_t, uint64_t))(*(void *)(found - 8) + 48LL))(v47, 1LL, found);
  uint64_t v51 = (uint64_t)v126;
  if (v50 == 1)
  {
    sub_100015794((uint64_t)v47, &qword_1009AA900);
    uint64_t v52 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v46 + 7);
    v52(v51, 1LL, 1LL, v17);
    unint64_t v53 = (void (*)(char *, uint64_t, uint64_t))v128;
  }

  else
  {
    unint64_t v53 = (void (*)(char *, uint64_t, uint64_t))v128;
    v128(v126, (uint64_t)v47 + *(int *)(found + 24), v17);
    sub_100018C68((uint64_t)v47, type metadata accessor for NotifyWhenFoundRecord);
    uint64_t v52 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v46 + 7);
    v52(v51, 0LL, 1LL, v17);
  }

  uint64_t v54 = (uint64_t)v123;
  v53(v123, a1, v17);
  uint64_t v55 = (unsigned int (*)(char *, uint64_t, uint64_t))*((void *)v46 + 6);
  if (v55((char *)v51, 1LL, v17) == 1)
  {
    uint64_t v56 = v127;
    sub_1004EB960(v54, v127);
    v44((char *)v54, v17);
    sub_100015794(v51, &qword_10099D8A0);
    if (v55(v56, 1LL, v17) != 1)
    {
      uint64_t v57 = (void (*)(char *, char *, uint64_t))*((void *)v46 + 4);
      v57(v31, v56, v17);
      goto LABEL_17;
    }
  }

  else
  {
    v44((char *)v54, v17);
    uint64_t v58 = v51;
    uint64_t v57 = (void (*)(char *, char *, uint64_t))*((void *)v46 + 4);
    uint64_t v59 = v127;
    v57(v127, (char *)v58, v17);
    v52((uint64_t)v59, 0LL, 1LL, v17);
    uint64_t v56 = v59;
    if (v55(v59, 1LL, v17) != 1)
    {
      v57(v31, v59, v17);
LABEL_17:
      sub_100504C28((uint64_t)v31, (uint64_t)&v131);
      if (!v132)
      {
        sub_100015794((uint64_t)&v131, (uint64_t *)&unk_1009A9C40);
        (*(void (**)(uint64_t, void, void))(v122 + 16))(v122, 0LL, 0LL);
        return ((uint64_t (*)(char *, uint64_t))v44)(v31, v17);
      }

      uint64_t v127 = v31;
      sub_100012EC0(&v131, (uint64_t)v134);
      uint64_t v65 = v135;
      uint64_t v66 = v136;
      sub_100012ED8(v134, v135);
      uint64_t v67 = v65;
      uint64_t v68 = v119;
      (*(void (**)(uint64_t, uint64_t))(v66 + 192))(v67, v66);
      if (v55(v68, 1LL, v17) == 1)
      {
        uint64_t v69 = &qword_10099D8A0;
        uint64_t v70 = (uint64_t)v68;
      }

      else
      {
        uint64_t v71 = (uint64_t)v118;
        v57(v118, v68, v17);
        uint64_t v72 = v116;
        sub_10050F124(v71, v116);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v115 + 48))(v72, 1LL, v117) != 1)
        {
          uint64_t v78 = v114;
          sub_10002218C(v72, v114, type metadata accessor for OwnedBeaconGroup);
          uint64_t v79 = v112;
          v128(v112, v121, v17);
          sub_100013044((uint64_t)v134, (uint64_t)&v131);
          uint64_t v80 = v113;
          uint64_t v81 = sub_10001DC4C(v78, v113, type metadata accessor for OwnedBeaconGroup);
          uint64_t v82 = (os_log_s *)Logger.logObject.getter(v81);
          os_log_type_t v83 = static os_log_type_t.default.getter(v82);
          int v84 = v83;
          if (os_log_type_enabled(v82, v83))
          {
            uint64_t v85 = swift_slowAlloc(62LL, -1LL);
            uint64_t v86 = swift_slowAlloc(96LL, -1LL);
            uint64_t v126 = (char *)v86;
            *(_DWORD *)uint64_t v85 = 141559299;
            uint64_t v129 = 1752392040LL;
            uint64_t v130 = v86;
            uint64_t v128 = v46;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130, v85 + 4, v85 + 12);
            *(_WORD *)(v85 + 12) = 2081;
            uint64_t v87 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            LODWORD(v125) = v84;
            uint64_t v88 = dispatch thunk of CustomStringConvertible.description.getter(v17, v87);
            uint64_t v129 = sub_1003F11D4(v88, v89, &v130);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130, v85 + 14, v85 + 22);
            swift_bridgeObjectRelease();
            v44(v79, v17);
            *(_WORD *)(v85 + 22) = 2160;
            uint64_t v129 = 1752392040LL;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130, v85 + 24, v85 + 32);
            *(_WORD *)(v85 + 32) = 2081;
            uint64_t v91 = v132;
            uint64_t v90 = v133;
            sub_100012ED8(&v131, v132);
            uint64_t v92 = *(void (**)(uint64_t))(*(void *)(*(void *)(v90 + 8) + 8LL) + 32LL);
            os_log_t v124 = v82;
            uint64_t v93 = v111;
            v92(v91);
            uint64_t v94 = dispatch thunk of CustomStringConvertible.description.getter(v17, v87);
            unint64_t v96 = v95;
            v44(v93, v17);
            uint64_t v129 = sub_1003F11D4(v94, v96, &v130);
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130, v85 + 34, v85 + 42);
            swift_bridgeObjectRelease();
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v131);
            *(_WORD *)(v85 + 42) = 2160;
            uint64_t v129 = 1752392040LL;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130, v85 + 44, v85 + 52);
            *(_WORD *)(v85 + 52) = 2081;
            uint64_t v97 = v113;
            uint64_t v98 = v87;
            uint64_t v71 = (uint64_t)v118;
            uint64_t v99 = dispatch thunk of CustomStringConvertible.description.getter(v17, v98);
            uint64_t v129 = sub_1003F11D4(v99, v100, &v130);
            uint64_t v46 = v128;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v129, &v130, v85 + 54, v85 + 62);
            swift_bridgeObjectRelease();
            sub_100018C68(v97, type metadata accessor for OwnedBeaconGroup);
            os_log_t v101 = v124;
            _os_log_impl( (void *)&_mh_execute_header,  v124,  (os_log_type_t)v125,  "Subscription %{private,mask.hash}s. Beacon %{private,mask.hash}s.\nGroup %{private,mask.hash}s",  (uint8_t *)v85,  0x3Eu);
            uint64_t v102 = v126;
            swift_arrayDestroy(v126, 3LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v102, -1LL, -1LL);
            swift_slowDealloc(v85, -1LL, -1LL);
          }

          else
          {
            v44(v79, v17);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v131);
            sub_100018C68(v80, type metadata accessor for OwnedBeaconGroup);
          }

          uint64_t v103 = v135;
          uint64_t v104 = v136;
          uint64_t v105 = sub_100012ED8(v134, v135);
          uint64_t v106 = sub_10054A858((uint64_t)v105, v48, v103, v104);
          uint64_t v107 = v114;
          uint64_t v108 = sub_10050D3D4(v114);
          (*(void (**)(uint64_t, char *, void *))(v122 + 16))(v122, v106, v108);

          sub_100018C68(v107, type metadata accessor for OwnedBeaconGroup);
          unint64_t v109 = (void (*)(uint64_t, uint64_t))*((void *)v46 + 1);
          v109(v71, v17);
          v109((uint64_t)v127, v17);
          return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v134);
        }

        v44((char *)v71, v17);
        uint64_t v69 = &qword_1009AA830;
        uint64_t v70 = v72;
      }

      sub_100015794(v70, v69);
      uint64_t v73 = v127;
      uint64_t v74 = v135;
      uint64_t v75 = v136;
      uint64_t v76 = sub_100012ED8(v134, v135);
      uint64_t v77 = sub_10054A858((uint64_t)v76, v48, v74, v75);
      (*(void (**)(uint64_t, char *, void))(v122 + 16))(v122, v77, 0LL);

      v44(v73, v17);
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v134);
    }
  }

  uint64_t v60 = sub_100015794((uint64_t)v56, &qword_10099D8A0);
  uint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
  os_log_type_t v62 = static os_log_type_t.error.getter(v61);
  if (os_log_type_enabled(v61, v62))
  {
    uint64_t v63 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v63 = 0;
    _os_log_impl((void *)&_mh_execute_header, v61, v62, "No record found for notify subscriptionId", v63, 2u);
    swift_slowDealloc(v63, -1LL, -1LL);
  }

  return (*(uint64_t (**)(uint64_t, void, void))(v122 + 16))(v122, 0LL, 0LL);
}

void sub_1002CEE3C(void *a1, void (**a2)(void, void, void))
{
  uint64_t v4 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = swift_allocObject(&unk_10094DDD0, 24LL, 7LL);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = a2;
  uint64_t v8 = (void *)objc_opt_self(&OBJC_CLASS___NSXPCConnection);
  _Block_copy(a2);
  id v9 = [v8 currentConnection];
  if (v9)
  {
    uint64_t v10 = v9;
    if (([a1 fetchProperties] & 0x200) != 0)
    {
      char v25 = 5;
      unint64_t v20 = sub_1002DB000();
      if ((NSXPCConnection.hasEntitlement<A>(_:)(&v25, &type metadata for BeaconManagerEntitlement, v20) & 1) == 0) {
        goto LABEL_4;
      }
    }

    else
    {
      char v26 = 6;
      unint64_t v11 = sub_1002DB000();
      if ((NSXPCConnection.hasEntitlement<A>(_:)(&v26, &type metadata for BeaconManagerEntitlement, v11) & 1) == 0)
      {
LABEL_4:
        unint64_t v12 = sub_10014A2C0();
        uint64_t v13 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v12, 0LL, 0LL);
        *uint64_t v14 = 12;
        uint64_t v15 = (void *)_convertErrorToNSError(_:)(v13);
        ((void (**)(void, void, void *))a2)[2](a2, 0LL, v15);

        swift_errorRelease(v13);
        swift_release();

        return;
      }
    }

    uint64_t v21 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v6, 1LL, 1LL, v21);
    uint64_t v22 = (void *)swift_allocObject(&unk_10094DDF8, 64LL, 7LL);
    v22[2] = 0LL;
    v22[3] = 0LL;
    v22[4] = sub_1002DAFF8;
    v22[5] = v7;
    v22[6] = v10;
    v22[7] = a1;
    swift_retain();
    id v23 = a1;
    sub_1003EDB00((uint64_t)v6, (uint64_t)&unk_1009A7E68, (uint64_t)v22);
    swift_release();
    swift_release();
  }

  else
  {
    unint64_t v16 = sub_10014A2C0();
    uint64_t v17 = swift_allocError(&type metadata for BeaconManagerService.BeaconManagerServiceError, v16, 0LL, 0LL);
    *uint64_t v18 = 7;
    uint64_t v19 = (void *)_convertErrorToNSError(_:)(v17);
    ((void (**)(void, void, void *))a2)[2](a2, 0LL, v19);

    swift_errorRelease(v17);
    swift_release();
  }

void sub_1002CF0AC(uint64_t a1, uint64_t a2, int a3, void *a4, void (**a5)(void, void))
{
  int v109 = a3;
  uint64_t v117 = a2;
  uint64_t v108 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v107 = *(void *)(v108 - 8);
  __chkstk_darwin(v108);
  uint64_t v114 = (char *)&v104 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v112 = *(void *)(v9 - 8);
  uint64_t v113 = v9;
  __chkstk_darwin(v9);
  uint64_t v111 = (char *)&v104 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v106 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v105 = *(void *)(v106 - 8);
  __chkstk_darwin(v106);
  uint64_t v110 = (char *)&v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v115 = *(void *)(v12 - 8);
  uint64_t v116 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v104 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v118 = swift_allocObject(&unk_10094DD08, 24LL, 7LL);
  *(void *)(v118 + swift_weakDestroy(v0 + 16) = a5;
  uint64_t v15 = _Block_copy(a5);
  uint64_t v16 = static os_log_type_t.info.getter(v15);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v17 = qword_100A2B008;
  uint64_t v119 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v119, 112LL, 7LL);
  *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  *(void *)&__int128 aBlock = *a4;
  uint64_t v19 = sub_100004AEC(&qword_1009A7D50);
  uint64_t v20 = String.init<A>(describing:)(&aBlock, v19);
  uint64_t v22 = v21;
  *(void *)(v18 + 56) = &type metadata for String;
  unint64_t v23 = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + sub_10016CF88(v0 + 40) = v22;
  *(void *)(v18 + 96) = &type metadata for String;
  *(void *)(v18 + 104) = v23;
  unint64_t v24 = v23;
  *(void *)(v18 + 64) = v23;
  *(void *)(v18 + 72) = 0xD00000000000003CLL;
  *(void *)(v18 + 80) = 0x800000010085C690LL;
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "%@: %@", 6LL, 2LL, v18);
  swift_bridgeObjectRelease();
  uint64_t v25 = a4[32];
  sub_100504C28(a1, (uint64_t)&aBlock);
  if (v123)
  {
    sub_100012EC0(&aBlock, (uint64_t)v126);
    uint64_t v26 = v127;
    uint64_t v27 = v128;
    uint64_t v28 = sub_100012ED8(v126, v127);
    uint64_t v29 = v117;
    uint64_t v30 = sub_10054CE6C((uint64_t)v28, v117, 0, 1, v109 & 1, v25, v26, v27);
    uint64_t v33 = (void *)v30;
    if (v32)
    {
      if (v32 != 1)
      {
        uint64_t v34 = static os_log_type_t.default.getter(v30);
        uint64_t v35 = qword_100A2B008;
        uint64_t v36 = swift_allocObject(v119, 72LL, 7LL);
        *(_OWORD *)(v36 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
        uint64_t v38 = v127;
        uint64_t v37 = v128;
        sub_100012ED8(v126, v127);
        uint64_t v39 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v37 + 8) + 8LL) + 32LL))(v38);
        uint64_t v40 = UUID.uuidString.getter(v39);
        uint64_t v42 = v41;
        (*(void (**)(char *, uint64_t))(v115 + 8))(v14, v116);
        *(void *)(v36 + 56) = &type metadata for String;
        *(void *)(v36 + 64) = v24;
        *(void *)(v36 + 32) = v40;
        *(void *)(v36 + sub_10016CF88(v0 + 40) = v42;
        swift_bridgeObjectRelease();
        uint64_t v33 = _swiftEmptyArrayStorage;
      }
    }

    else
    {
      uint64_t v50 = v31;
      swift_bridgeObjectRetain(v30);
      uint64_t v52 = static os_log_type_t.default.getter(v51);
      uint64_t v53 = qword_100A2B008;
      uint64_t v54 = swift_allocObject(v119, 72LL, 7LL);
      *(_OWORD *)(v54 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v56 = v127;
      uint64_t v55 = v128;
      sub_100012ED8(v126, v127);
      uint64_t v57 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v55 + 8) + 8LL) + 32LL))(v56);
      uint64_t v58 = UUID.uuidString.getter(v57);
      uint64_t v60 = v59;
      (*(void (**)(char *, uint64_t))(v115 + 8))(v14, v116);
      *(void *)(v54 + 56) = &type metadata for String;
      *(void *)(v54 + 64) = v24;
      *(void *)(v54 + 32) = v58;
      *(void *)(v54 + sub_10016CF88(v0 + 40) = v60;
      uint64_t v29 = v117;
      sub_100117B2C((uint64_t)v33, v50, 0);
      swift_bridgeObjectRelease();
    }

    uint64_t v61 = v127;
    uint64_t v62 = v128;
    uint64_t v63 = sub_100012ED8(v126, v127);
    uint64_t v64 = sub_10054CE6C((uint64_t)v63, v29, 1, 1, 0, v25, v61, v62);
    uint64_t v67 = (void *)v64;
    if (v66)
    {
      if (v66 != 1)
      {
        uint64_t v68 = static os_log_type_t.default.getter(v64);
        uint64_t v69 = qword_100A2B008;
        uint64_t v70 = swift_allocObject(v119, 72LL, 7LL);
        *(_OWORD *)(v70 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
        uint64_t v72 = v127;
        uint64_t v71 = v128;
        sub_100012ED8(v126, v127);
        uint64_t v73 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v71 + 8) + 8LL) + 32LL))(v72);
        uint64_t v74 = UUID.uuidString.getter(v73);
        uint64_t v76 = v75;
        (*(void (**)(char *, uint64_t))(v115 + 8))(v14, v116);
        *(void *)(v70 + 56) = &type metadata for String;
        *(void *)(v70 + 64) = v24;
        *(void *)(v70 + 32) = v74;
        *(void *)(v70 + sub_10016CF88(v0 + 40) = v76;
        swift_bridgeObjectRelease();
        uint64_t v67 = _swiftEmptyArrayStorage;
      }
    }

    else
    {
      uint64_t v77 = v65;
      swift_bridgeObjectRetain(v64);
      uint64_t v79 = static os_log_type_t.default.getter(v78);
      uint64_t v80 = qword_100A2B008;
      uint64_t v81 = swift_allocObject(v119, 72LL, 7LL);
      *(_OWORD *)(v81 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v83 = v127;
      uint64_t v82 = v128;
      sub_100012ED8(v126, v127);
      uint64_t v84 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v82 + 8) + 8LL) + 32LL))(v83);
      uint64_t v85 = UUID.uuidString.getter(v84);
      uint64_t v87 = v86;
      (*(void (**)(char *, uint64_t))(v115 + 8))(v14, v116);
      *(void *)(v81 + 56) = &type metadata for String;
      *(void *)(v81 + 64) = v24;
      *(void *)(v81 + 32) = v85;
      *(void *)(v81 + sub_10016CF88(v0 + 40) = v87;
      sub_100117B2C((uint64_t)v67, v77, 0);
      swift_bridgeObjectRelease();
    }

    uint64_t v88 = v118;
    uint64_t v89 = v108;
    uint64_t v90 = v107;
    uint64_t v91 = v106;
    uint64_t v92 = v105;
    swift_bridgeObjectRetain(v67);
    uint64_t v93 = sub_1002C50A0((uint64_t)v33, (uint64_t)v67);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease_n(v67, 2LL);
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v94 = v110;
    (*(void (**)(char *, void, uint64_t))(v92 + 104))( v110,  enum case for DispatchQoS.QoSClass.default(_:),  v91);
    unint64_t v95 = (void *)static OS_dispatch_queue.global(qos:)(v94);
    (*(void (**)(char *, uint64_t))(v92 + 8))(v94, v91);
    unint64_t v96 = (void *)swift_allocObject(&unk_10094DD30, 40LL, 7LL);
    v96[2] = sub_1002DACA0;
    v96[3] = v88;
    v96[4] = v93;
    os_log_t v124 = sub_1001FA824;
    uint64_t v125 = v96;
    *(void *)&__int128 aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256LL;
    uint64_t v122 = sub_1001C31E8;
    uint64_t v123 = &unk_10094DD48;
    uint64_t v97 = _Block_copy(&aBlock);
    uint64_t v98 = swift_retain();
    uint64_t v99 = v111;
    static DispatchQoS.unspecified.getter(v98);
    uint64_t v120 = _swiftEmptyArrayStorage;
    uint64_t v100 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v101 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v102 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v103 = v114;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v120, v101, v102, v89, v100);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v99, v103, v97);
    _Block_release(v97);

    (*(void (**)(char *, uint64_t))(v90 + 8))(v103, v89);
    (*(void (**)(char *, uint64_t))(v112 + 8))(v99, v113);
    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v126);
    swift_release();
  }

  else
  {
    uint64_t v43 = sub_100015794((uint64_t)&aBlock, (uint64_t *)&unk_1009A9C40);
    uint64_t v44 = static os_log_type_t.error.getter(v43);
    if (qword_10099B720 != -1) {
      swift_once(&qword_10099B720, sub_10065128C);
    }
    uint64_t v45 = qword_100A2B030;
    uint64_t v46 = swift_allocObject(v119, 72LL, 7LL);
    *(_OWORD *)(v46 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v47 = UUID.uuidString.getter(v46);
    *(void *)(v46 + 56) = &type metadata for String;
    *(void *)(v46 + 64) = v24;
    *(void *)(v46 + 32) = v47;
    *(void *)(v46 + sub_10016CF88(v0 + 40) = v48;
    os_log(_:dso:log:_:_:)( v44,  &_mh_execute_header,  v45,  "allBeaconingKeys failed to retrieve beacon record for %@",  56LL,  2LL,  v46);
    swift_bridgeObjectRelease();
    sub_100022898(0LL, &qword_1009A7E48, &OBJC_CLASS___SPBeaconingKey_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    ((void (**)(void, Class))a5)[2](a5, isa);
    swift_release();
  }

void sub_1002CFA30(uint64_t *a1, void (**a2)(const void *, Class, void))
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v54 = *(void *)(v4 - 8);
  uint64_t v55 = v4;
  __chkstk_darwin(v4);
  uint64_t v53 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v60 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v6 = *(void *)(v60 - 8);
  __chkstk_darwin(v60);
  uint64_t v8 = (char *)&v51 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v52 = a2;
  uint64_t v9 = _Block_copy(a2);
  uint64_t v10 = static os_log_type_t.info.getter(v9);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v11 = qword_100A2B008;
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v13 = swift_allocObject(v12, 112LL, 7LL);
  *(_OWORD *)(v13 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v63 = *a1;
  uint64_t v14 = sub_100004AEC(&qword_1009A7D50);
  uint64_t v15 = String.init<A>(describing:)(&v63, v14);
  uint64_t v17 = v16;
  *(void *)(v13 + 56) = &type metadata for String;
  unint64_t v18 = sub_1000226F4();
  *(void *)(v13 + 32) = v15;
  *(void *)(v13 + sub_10016CF88(v0 + 40) = v17;
  *(void *)(v13 + 96) = &type metadata for String;
  *(void *)(v13 + 104) = v18;
  *(void *)(v13 + 64) = v18;
  *(void *)(v13 + 72) = 0xD00000000000002ALL;
  *(void *)(v13 + 80) = 0x800000010085C4A0LL;
  os_log(_:dso:log:_:_:)(v10, &_mh_execute_header, v11, "%{public}@: %{public}@", 22LL, 2LL, v13);
  swift_bridgeObjectRelease();
  unint64_t v19 = sub_100413A34((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v59 = a1[32];
  uint64_t v20 = sub_100506C30();
  uint64_t v21 = *((void *)v20 + 2);
  if (v21)
  {
    unint64_t v61 = v19;
    uint64_t v58 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock;
    uint64_t v22 = *(unsigned __int8 *)(v6 + 80);
    uint64_t v51 = v20;
    uint64_t v23 = (uint64_t)&v20[(v22 + 32) & ~v22];
    unint64_t v24 = type metadata accessor for OwnedBeaconRecord;
    uint64_t v57 = *(void *)(v6 + 72);
    uint64_t v56 = (char *)&type metadata for () + 8;
    do
    {
      uint64_t v31 = v24;
      sub_10001DC4C(v23, (uint64_t)v8, v24);
      uint64_t v32 = v59;
      uint64_t v33 = *(void *)(v59 + v58);
      uint64_t v34 = type metadata accessor for BeaconKeyManager(0LL);
      OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10014F014, v32, v33, v56, v34);
      uint64_t v35 = (uint64_t)&v8[*(int *)(v60 + 20)];
      uint64_t v63 = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t v36 = objc_autoreleasePoolPush();
      sub_10079B1BC(v35, 0, 0, v62);
      objc_autoreleasePoolPop(v36);
      if (v62[0])
      {
        id v37 = v62[0];
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v37);
        unint64_t v39 = *(void *)((v63 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v38 = *(void *)((v63 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v39 >= v38 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v38 > 1, v39 + 1, 1LL);
        }
        uint64_t v40 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v39, v37);
        specialized Array._endMutation()(v40);
      }

      uint64_t v41 = objc_autoreleasePoolPush();
      sub_10079B1BC(v35, 1, 0, v62);
      objc_autoreleasePoolPop(v41);
      if (v62[0])
      {
        id v42 = v62[0];
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v42);
        unint64_t v44 = *(void *)((v63 & 0xFFFFFFFFFFFFFF8LL) + 0x10);
        unint64_t v43 = *(void *)((v63 & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (v44 >= v43 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v43 > 1, v44 + 1, 1LL);
        }
        uint64_t v45 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, v42);
        specialized Array._endMutation()(v45);
      }

      uint64_t v46 = v63;
      swift_release();
      if ((unint64_t)v46 >> 62)
      {
        if (v46 < 0) {
          uint64_t v47 = v46;
        }
        else {
          uint64_t v47 = v46 & 0xFFFFFFFFFFFFFF8LL;
        }
        swift_bridgeObjectRetain(v46);
        uint64_t v48 = _CocoaArrayWrapper.endIndex.getter(v47);
        swift_bridgeObjectRelease();
        if (!v48)
        {
LABEL_17:
          unint64_t v24 = v31;
          sub_100018C68((uint64_t)v8, v31);
          swift_bridgeObjectRelease();
          goto LABEL_6;
        }
      }

      else if (!*(void *)((v46 & 0xFFFFFFFFFFFFF8LL) + 0x10))
      {
        goto LABEL_17;
      }

      uint64_t v26 = (uint64_t)v53;
      uint64_t v25 = v54;
      uint64_t v27 = v35;
      uint64_t v28 = v55;
      (*(void (**)(char *, uint64_t, uint64_t))(v54 + 16))(v53, v27, v55);
      uint64_t v29 = (void *)v61;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v61);
      uint64_t v63 = (uint64_t)v29;
      sub_10005E1D0(v46, v26, isUniquelyReferenced_nonNull_native);
      unint64_t v61 = v63;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v25 + 8))(v26, v28);
      unint64_t v24 = v31;
      sub_100018C68((uint64_t)v8, v31);
LABEL_6:
      v23 += v57;
      --v21;
    }

    while (v21);
  }

  swift_bridgeObjectRelease();
  uint64_t v49 = v52;
  _Block_copy(v52);
  sub_100004AEC(&qword_1009A7E28);
  sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  v49[2](v49, isa, 0LL);

  _Block_release(v49);
  swift_bridgeObjectRelease();
  _Block_release(v49);
}

void sub_1002CFF64(void **a1, uint64_t a2)
{
  uint64_t v4 = static os_log_type_t.info.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v5 = qword_100A2B008;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v48 = *a1;
  uint64_t v8 = sub_100004AEC(&qword_1009A7D50);
  uint64_t v9 = String.init<A>(describing:)(&v48, v8);
  uint64_t v11 = v10;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v12 = sub_1000226F4();
  *(void *)(v7 + 32) = v9;
  *(void *)(v7 + sub_10016CF88(v0 + 40) = v11;
  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = v12;
  *(void *)(v7 + 64) = v12;
  *(void *)(v7 + 72) = 0xD00000000000001BLL;
  *(void *)(v7 + 80) = 0x800000010085C460LL;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "%@: %@", 6LL, 2LL, v7);
  swift_bridgeObjectRelease();
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v13 = sub_1006A0C70((uint64_t)v48);
  swift_bridgeObjectRelease();
  uint64_t v14 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(v14 + 56) = sub_100004AEC(&qword_10099D640);
  *(void *)(v14 + 64) = sub_1000372EC( &qword_1009A7E10,  &qword_10099D640,  (uint64_t)&protocol conformance descriptor for [A]);
  *(void *)(v14 + 32) = v13;
  sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  swift_bridgeObjectRetain(v13);
  uint64_t v16 = (void *)static OS_os_log.default.getter(v15);
  uint64_t v17 = static os_log_type_t.default.getter(v16);
  os_log(_:dso:log:type:_:)("Got categories - %@", 19LL, 2LL, &_mh_execute_header, v16, v17, v14);
  swift_bridgeObjectRelease();

  uint64_t v18 = *(void *)(v13 + 16);
  if (v18)
  {
    uint64_t v48 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v18);
    uint64_t v19 = 0LL;
    uint64_t v43 = v18;
    uint64_t v44 = v13 + 32;
    do
    {
      uint64_t v27 = (uint64_t *)(v44 + 32 * v19);
      uint64_t v47 = *v27;
      uint64_t v28 = v27[2];
      uint64_t v29 = v27[3];
      uint64_t v30 = *(void *)(v29 + 16);
      if (v30)
      {
        uint64_t v46 = v19;
        swift_bridgeObjectRetain_n(v29, 2LL);
        uint64_t v45 = v28;
        swift_bridgeObjectRetain(v28);
        specialized ContiguousArray.reserveCapacity(_:)(v30);
        uint64_t v31 = (uint64_t *)(v29 + 64);
        do
        {
          uint64_t v32 = *(v31 - 4);
          uint64_t v33 = *(v31 - 2);
          uint64_t v34 = *v31;
          v31 += 5;
          id v35 = objc_allocWithZone(&OBJC_CLASS___SPBeaconRole);
          swift_bridgeObjectRetain(v33);
          swift_bridgeObjectRetain(v34);
          NSString v36 = String._bridgeToObjectiveC()();
          NSString v37 = String._bridgeToObjectiveC()();
          id v38 = [v35 initWithRoleId:v32 role:v36 roleEmoji:v37];
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();

          specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v39);
          uint64_t v40 = _swiftEmptyArrayStorage[2];
          specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v40);
          uint64_t v41 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v40, v38);
          specialized ContiguousArray._endMutation()(v41);
          --v30;
        }

        while (v30);
        swift_bridgeObjectRelease();
        uint64_t v18 = v43;
        uint64_t v28 = v45;
        uint64_t v19 = v46;
      }

      else
      {
        swift_bridgeObjectRetain(v27[2]);
        swift_bridgeObjectRetain(v29);
      }

      ++v19;
      id v20 = objc_allocWithZone(&OBJC_CLASS___SPBeaconRoleCategory);
      swift_bridgeObjectRetain(v28);
      NSString v21 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      sub_100022898(0LL, &qword_1009A7E18, &OBJC_CLASS___SPBeaconRole_ptr);
      Class isa = Array._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      id v23 = [v20 initWithCategoryId:v47 category:v21 roles:isa];
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();

      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v24);
      uint64_t v25 = v48[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v25);
      uint64_t v26 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v25, v23);
      specialized ContiguousArray._endMutation()(v26);
    }

    while (v19 != v18);
  }

  swift_bridgeObjectRelease();
  sub_100022898(0LL, &qword_1009A7E20, &OBJC_CLASS___SPBeaconRoleCategory_ptr);
  Class v42 = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, v42);
  swift_bridgeObjectRelease();
}

uint64_t sub_1002D048C( unint64_t a1, uint64_t a2, void *a3, void (**a4)(const void *, void))
{
  unint64_t v81 = a1;
  uint64_t v78 = sub_100004AEC(&qword_1009AE490);
  __chkstk_darwin(v78);
  uint64_t v79 = (char *)&v73 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v77 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v76 = *(void *)(v77 - 8);
  __chkstk_darwin(v77);
  uint64_t v80 = (uint64_t)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v73 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v88 = *(void **)(v12 - 8);
  uint64_t v89 = v12;
  uint64_t v13 = v88[8];
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v74 = (uint64_t)&v73 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v82 = (uint64_t)&v73 - v15;
  uint64_t v16 = swift_allocObject(&unk_10094DC40, 24LL, 7LL);
  uint64_t v86 = a4;
  uint64_t v87 = v16;
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = a4;
  uint64_t v17 = _Block_copy(a4);
  uint64_t v18 = static os_log_type_t.info.getter(v17);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v19 = qword_100A2B008;
  uint64_t v84 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v20 = swift_allocObject(v84, 112LL, 7LL);
  __int128 v73 = xmmword_1007E4750;
  *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  *(void *)&__int128 v90 = *a3;
  uint64_t v21 = sub_100004AEC(&qword_1009A7D50);
  uint64_t v22 = String.init<A>(describing:)(&v90, v21);
  uint64_t v24 = v23;
  *(void *)(v20 + 56) = &type metadata for String;
  unint64_t v25 = sub_1000226F4();
  *(void *)(v20 + 32) = v22;
  *(void *)(v20 + sub_10016CF88(v0 + 40) = v24;
  *(void *)(v20 + 96) = &type metadata for String;
  *(void *)(v20 + 104) = v25;
  unint64_t v85 = v25;
  *(void *)(v20 + 64) = v25;
  *(void *)(v20 + 72) = 0xD00000000000001FLL;
  *(void *)(v20 + 80) = 0x800000010085C390LL;
  os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "%@: %@", 6LL, 2LL, v20);
  swift_bridgeObjectRelease();
  uint64_t v75 = a3;
  uint64_t v26 = a3[32];
  uint64_t v27 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
  uint64_t v28 = type metadata accessor for UUID(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = *(unsigned __int8 *)(v29 + 80);
  uint64_t v31 = (v30 + 32) & ~v30;
  uint64_t v32 = swift_allocObject(v27, v31 + *(void *)(v29 + 72), v30 | 7);
  __int128 v83 = xmmword_1007E67D0;
  *(_OWORD *)(v32 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v33 = v32 + v31;
  uint64_t v34 = a2;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 16))(v33, a2, v28);
  swift_retain();
  id v35 = sub_1002C428C(v32);
  swift_release();
  swift_setDeallocating(v32);
  swift_arrayDestroy(v33, *(void *)(v32 + 16), v28);
  swift_deallocClassInstance(v32, 32LL, 7LL);
  if (v35[2])
  {
    sub_100013044((uint64_t)(v35 + 4), (uint64_t)&v90);
  }

  else
  {
    uint64_t v92 = 0LL;
    __int128 v90 = 0u;
    __int128 v91 = 0u;
  }

  NSString v36 = v88;
  swift_bridgeObjectRelease();
  if (!*((void *)&v91 + 1))
  {
    sub_100015794((uint64_t)&v90, (uint64_t *)&unk_1009A9C40);
    ((void (*)(char *, uint64_t, uint64_t, uint64_t))v36[7])(v11, 1LL, 1LL, v89);
    goto LABEL_12;
  }

  uint64_t v37 = v13;
  uint64_t v38 = sub_100004AEC(&qword_1009B0530);
  uint64_t v39 = v89;
  int v40 = swift_dynamicCast(v11, &v90, v38, v89, 6LL);
  ((void (*)(char *, void, uint64_t, uint64_t))v36[7])(v11, v40 ^ 1u, 1LL, v39);
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v36[6])(v11, 1LL, v39) == 1)
  {
LABEL_12:
    uint64_t v46 = sub_100015794((uint64_t)v11, (uint64_t *)&unk_1009A9C30);
    uint64_t v47 = static os_log_type_t.error.getter(v46);
    uint64_t v48 = qword_100A2B008;
    uint64_t v49 = swift_allocObject(v84, 72LL, 7LL);
    *(_OWORD *)(v49 + swift_weakDestroy(v0 + 16) = v83;
    uint64_t v50 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter(v28, v50);
    unint64_t v52 = v85;
    *(void *)(v49 + 56) = &type metadata for String;
    *(void *)(v49 + 64) = v52;
    *(void *)(v49 + 32) = v51;
    *(void *)(v49 + sub_10016CF88(v0 + 40) = v53;
    os_log(_:dso:log:_:_:)(v47, &_mh_execute_header, v48, "Beacon with the identifier not found - %@", 41LL, 2LL, v49);
    swift_bridgeObjectRelease();
    v86[2](v86, 0LL);
    return swift_release();
  }

  uint64_t v41 = v82;
  sub_10002218C((uint64_t)v11, v82, type metadata accessor for OwnedBeaconRecord);
  Class v42 = (void *)sub_10013E41C(v81);
  if (v42)
  {
    uint64_t v88 = v42;
    __chkstk_darwin(v42);
    *((void *)&v73 - 2) = v26;
    *((void *)&v73 - 1) = v34;
    uint64_t v43 = (uint64_t)v79;
    QueueSynchronizer.conditionalSync<A>(_:)(sub_10015471C);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v76 + 48))(v43, 1LL, v77) != 1)
    {
      sub_10002218C(v43, v80, type metadata accessor for BeaconNamingRecord);
      uint64_t v56 = swift_allocObject(v84, 112LL, 7LL);
      *(_OWORD *)(v56 + swift_weakDestroy(v0 + 16) = v73;
      uint64_t v57 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter(v28, v57);
      unint64_t v59 = v85;
      *(void *)(v56 + 56) = &type metadata for String;
      *(void *)(v56 + 64) = v59;
      *(void *)(v56 + 32) = v58;
      *(void *)(v56 + sub_10016CF88(v0 + 40) = v60;
      id v61 = v88;
      id v62 = [v88 roleId];
      *(void *)(v56 + 96) = &type metadata for Int;
      *(void *)(v56 + 104) = &protocol witness table for Int;
      *(void *)(v56 + 72) = v62;
      uint64_t v63 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
      uint64_t v64 = (void *)static OS_os_log.default.getter(v63);
      uint64_t v65 = static os_log_type_t.default.getter(v64);
      os_log(_:dso:log:type:_:)("Updating beacon [%@] with role - %i", 35LL, 2LL, &_mh_execute_header, v64, v65, v56);
      swift_bridgeObjectRelease();

      uint64_t v66 = v74;
      sub_10001DC4C(v41, v74, type metadata accessor for OwnedBeaconRecord);
      uint64_t v67 = *((unsigned __int8 *)v36 + 80);
      uint64_t v68 = (v67 + 40) & ~v67;
      uint64_t v69 = swift_allocObject(&unk_10094DC68, v68 + v37, v67 | 7);
      uint64_t v70 = v87;
      *(void *)(v69 + swift_weakDestroy(v0 + 16) = sub_10009C440;
      *(void *)(v69 + 24) = v70;
      *(void *)(v69 + 32) = v75;
      sub_10002218C(v66, v69 + v68, type metadata accessor for OwnedBeaconRecord);
      id v71 = v61;
      swift_retain();
      swift_retain();
      uint64_t v72 = v80;
      sub_1005577F4(v80, 0, (void (*)(uint64_t))sub_1002DA938, (void (*)(uint64_t))v69, v26, v71);
      swift_release();

      sub_100018C68(v72, type metadata accessor for BeaconNamingRecord);
      sub_100018C68(v41, type metadata accessor for OwnedBeaconRecord);
      return swift_release();
    }

    uint64_t v44 = sub_100015794(v43, &qword_1009AE490);
    uint64_t v45 = static os_log_type_t.error.getter(v44);
    os_log(_:dso:log:_:_:)( v45,  &_mh_execute_header,  qword_100A2B008,  "Valid role not found.",  21LL,  2LL,  _swiftEmptyArrayStorage);
    v86[2](v86, 0LL);
  }

  else
  {
    uint64_t v54 = static os_log_type_t.error.getter(0LL);
    os_log(_:dso:log:_:_:)( v54,  &_mh_execute_header,  qword_100A2B008,  "Valid role not found.",  21LL,  2LL,  _swiftEmptyArrayStorage);
    v86[2](v86, 0LL);
  }

  sub_100018C68(v41, type metadata accessor for OwnedBeaconRecord);
  return swift_release();
}

uint64_t sub_1002D0CA0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100004AEC(&qword_1009A7DE0);
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t *)((char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v8, &qword_1009A7DE0);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v6);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v10 = *v8;
    uint64_t v11 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v12 = qword_100A2B018;
    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v14 = swift_allocObject(v13, 72LL, 7LL);
    *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v24 = v10;
    swift_errorRetain(v10);
    uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v16 = String.init<A>(describing:)(&v24, v15);
    uint64_t v18 = v17;
    *(void *)(v14 + 56) = &type metadata for String;
    *(void *)(v14 + 64) = sub_1000226F4();
    *(void *)(v14 + 32) = v16;
    *(void *)(v14 + sub_10016CF88(v0 + 40) = v18;
    os_log(_:dso:log:_:_:)(v11, &_mh_execute_header, v12, "create BeaconNameRecord failed %@.", 34LL, 2LL, v14);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, void))(a3 + 16))(a3, 0LL);
    return swift_errorRelease(v10);
  }

  else
  {
    uint64_t v20 = static os_log_type_t.default.getter(EnumCaseMultiPayload);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v20,  &_mh_execute_header,  qword_100A2B018,  "create BeaconNameRecord success.",  32LL,  2LL,  _swiftEmptyArrayStorage);
    (*(void (**)(uint64_t, uint64_t))(a3 + 16))(a3, 1LL);
    uint64_t v21 = *(void *)(a2 + 256);
    sub_1004E696C(0xFu);
    type metadata accessor for Transaction(0LL);
    static Transaction.named<A>(_:with:)( "com.apple.searchpartyd.triggerSiriDeviceNameSync",  48LL,  2LL,  sub_1000220C8,  v21);
    uint64_t v22 = swift_retain();
    PassthroughSubject.send(_:)(v22);
    swift_release();
    return sub_100015794((uint64_t)v8, &qword_1009A7DE0);
  }

void sub_1002D0F24(void (*a1)(void, void, void), os_log_s *a2, void *a3, const void *a4)
{
  uint64_t v188 = a2;
  uint64_t v194 = a1;
  uint64_t v178 = type metadata accessor for SharedBeaconRecord(0LL);
  __chkstk_darwin(v178);
  uint64_t v179 = (char *)&v169 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v190 = sub_100004AEC(&qword_1009AE490);
  uint64_t v7 = __chkstk_darwin(v190);
  uint64_t v175 = (char *)&v169 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  char v186 = (char *)&v169 - v9;
  uint64_t v198 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v184 = *(void *)(v198 - 8);
  uint64_t v10 = __chkstk_darwin(v198);
  uint64_t v170 = (uint64_t)&v169 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v171 = (uint64_t)&v169 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v180 = (_OWORD *)((char *)&v169 - v15);
  __chkstk_darwin(v14);
  uint64_t v189 = (uint64_t)&v169 - v16;
  id v193 = (id)sub_100004AEC(&qword_10099D8A0);
  uint64_t v17 = __chkstk_darwin(v193);
  uint64_t v192 = (char *)&v169 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v169 - v19;
  uint64_t v21 = type metadata accessor for UUID(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v172 = (char *)&v169 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v177 = (char *)&v169 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v173 = (char *)&v169 - v28;
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v174 = (char *)&v169 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v187 = (char *)&v169 - v32;
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v185 = (char *)&v169 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  char v191 = (char *)&v169 - v36;
  uint64_t v176 = v37;
  __chkstk_darwin(v35);
  uint64_t v199 = (char *)&v169 - v38;
  uint64_t v196 = swift_allocObject(&unk_10094DAD8, 24LL, 7LL);
  *(void *)(v196 + swift_weakDestroy(v0 + 16) = a4;
  _Block_copy(a4);
  uint64_t v195 = a4;
  uint64_t v39 = _Block_copy(a4);
  uint64_t v40 = static os_log_type_t.info.getter(v39);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v41 = qword_100A2B008;
  uint64_t v182 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v42 = swift_allocObject(v182, 112LL, 7LL);
  *(_OWORD *)(v42 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v203 = *a3;
  uint64_t v43 = sub_100004AEC(&qword_1009A7D50);
  uint64_t v44 = String.init<A>(describing:)(&v203, v43);
  uint64_t v46 = v45;
  *(void *)(v42 + 56) = &type metadata for String;
  unint64_t v47 = sub_1000226F4();
  *(void *)(v42 + 32) = v44;
  *(void *)(v42 + sub_10016CF88(v0 + 40) = v46;
  *(void *)(v42 + 96) = &type metadata for String;
  *(void *)(v42 + 104) = v47;
  unint64_t v183 = v47;
  *(void *)(v42 + 64) = v47;
  *(void *)(v42 + 72) = 0xD000000000000023LL;
  *(void *)(v42 + 80) = 0x800000010085C220LL;
  os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "%@: %@", 6LL, 2LL, v42);
  swift_bridgeObjectRelease();
  uint64_t v181 = a3;
  uint64_t v48 = a3[32];
  sub_1005073E4();
  uint64_t v49 = swift_bridgeObjectRelease();
  __chkstk_darwin(v49);
  uint64_t v50 = v194;
  *(&v169 - 2) = v48;
  *(&v169 - 1) = (uint64_t)v50;
  uint64_t v51 = (uint64_t)v192;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_1001B1B1C);
  sub_100015750(v51, (uint64_t)v20, &qword_10099D8A0);
  unint64_t v52 = *(void (**)(char *, uint64_t, uint64_t))(v22 + 16);
  uint64_t v53 = v191;
  v52(v191, (uint64_t)v50, v21);
  int v54 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21);
  uint64_t v55 = v21;
  uint64_t v197 = v22;
  if (v54 == 1)
  {
    uint64_t v56 = (uint64_t)v199;
    uint64_t v194 = *(void (**)(void, void, void))(v22 + 32);
    v194(v199, v53, v55);
    sub_100015794((uint64_t)v20, &qword_10099D8A0);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v22 + 8))(v53, v21);
    uint64_t v56 = (uint64_t)v199;
    uint64_t v194 = *(void (**)(void, void, void))(v22 + 32);
    v194(v199, v20, v55);
  }

  sub_100504C28(v56, (uint64_t)&v201);
  if (!v202)
  {
    uint64_t v69 = sub_100015794((uint64_t)&v201, (uint64_t *)&unk_1009A9C40);
    uint64_t v70 = static os_log_type_t.error.getter(v69);
    uint64_t v71 = swift_allocObject(v182, 72LL, 7LL);
    *(_OWORD *)(v71 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v72 = UUID.uuidString.getter(v71);
    unint64_t v73 = v183;
    *(void *)(v71 + 56) = &type metadata for String;
    *(void *)(v71 + 64) = v73;
    *(void *)(v71 + 32) = v72;
    *(void *)(v71 + sub_10016CF88(v0 + 40) = v74;
    uint64_t v75 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v76 = (void *)static OS_os_log.default.getter(v75);
    os_log(_:dso:log:_:_:)(v70, &_mh_execute_header, v76, "Beacon with the identifier not found - %@", 41LL, 2LL, v71);
    swift_bridgeObjectRelease();

    uint64_t v77 = v195;
    (*((void (**)(const void *, void))v195 + 2))(v195, 0LL);
    (*(void (**)(uint64_t, uint64_t))(v197 + 8))(v56, v55);
    goto LABEL_45;
  }

  uint64_t v57 = sub_100012EC0(&v201, (uint64_t)&v203);
  __chkstk_darwin(v57);
  *(&v169 - 2) = v48;
  *(&v169 - 1) = v56;
  uint64_t v58 = v186;
  QueueSynchronizer.conditionalSync<A>(_:)(sub_10015471C);
  uint64_t v59 = (uint64_t)v58;
  uint64_t v60 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v184 + 48);
  if (v60(v59, 1LL, v198) == 1)
  {
    uint64_t v61 = sub_100015794(v59, &qword_1009AE490);
    UUID.init()(v61);
    v52(v187, v56, v55);
    id v62 = v188;
    id v193 = -[os_log_s roleId](v188, "roleId");
    id v63 = -[os_log_s name](v62, "name");
    if (v63)
    {
      uint64_t v64 = v63;
      uint64_t v65 = v55;
      uint64_t v66 = static String._unconditionallyBridgeFromObjectiveC(_:)(v63);
      unint64_t v68 = v67;
    }

    else
    {
      uint64_t v65 = v55;
      unint64_t v68 = 0xE700000000000000LL;
      uint64_t v66 = 0x4E574F4E4B4E55LL;
    }

    uint64_t v77 = v195;
    id v119 = -[os_log_s emoji](v62, "emoji");
    if (v119)
    {
      uint64_t v120 = v119;
      uint64_t v121 = static String._unconditionallyBridgeFromObjectiveC(_:)(v119);
      uint64_t v123 = v122;
    }

    else
    {
      uint64_t v121 = 0LL;
      uint64_t v123 = 0LL;
    }

    uint64_t v105 = (uint64_t)v180;
    *uint64_t v180 = xmmword_1007E4480;
    os_log_t v124 = (int *)v198;
    uint64_t v111 = v65;
    uint64_t v125 = v65;
    uint64_t v126 = (void (*)(uint64_t, char *, uint64_t))v194;
    v194(v105 + *(int *)(v198 + 20), v185, v125);
    v126(v105 + v124[6], v187, v111);
    *(void *)(v105 + v124[7]) = v193;
    uint64_t v127 = (uint64_t *)(v105 + v124[8]);
    uint64_t *v127 = v66;
    v127[1] = v68;
    uint64_t v128 = (uint64_t *)(v105 + v124[9]);
    *uint64_t v128 = v121;
    v128[1] = v123;
    _Block_copy(v77);
    swift_retain();
    uint64_t v129 = (uint64_t)v181;
    swift_retain();
    sub_100558CE8(v105, 0, v48, v129, v77);
    _Block_release(v77);
    swift_release();
    swift_release();
LABEL_26:
    sub_100018C68(v105, type metadata accessor for BeaconNamingRecord);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v203);
    (*(void (**)(char *, uint64_t))(v197 + 8))(v199, v111);
    goto LABEL_45;
  }

  sub_10002218C(v59, v189, type metadata accessor for BeaconNamingRecord);
  uint64_t v78 = v188;
  if ((-[os_log_s restoreDefaultName](v188, "restoreDefaultName") & 1) == 0)
  {
    id v95 = -[os_log_s name](v78, "name");
    if (v95)
    {
      unint64_t v96 = v95;
      uint64_t v97 = v78;
      uint64_t v169 = v55;
      uint64_t v98 = static String._unconditionallyBridgeFromObjectiveC(_:)(v95);
      uint64_t v100 = v99;

      uint64_t v102 = static os_log_type_t.default.getter(v101);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v103 = qword_100A2B018;
      uint64_t v104 = swift_allocObject(v182, 72LL, 7LL);
      *(_OWORD *)(v104 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v105 = v189;
      uint64_t v106 = UUID.uuidString.getter(v104);
      unint64_t v107 = v183;
      *(void *)(v104 + 56) = &type metadata for String;
      *(void *)(v104 + 64) = v107;
      *(void *)(v104 + 32) = v106;
      *(void *)(v104 + sub_10016CF88(v0 + 40) = v108;
      os_log(_:dso:log:_:_:)(v102, &_mh_execute_header, v103, "updating existing record id %@", 30LL, 2LL, v104);
      swift_bridgeObjectRelease();
      sub_100013044((uint64_t)&v203, (uint64_t)&v201);
      int v109 = (void *)swift_allocObject(&unk_10094DB00, 80LL, 7LL);
      v109[2] = v97;
      v109[3] = v98;
      v109[4] = v100;
      sub_100012EC0(&v201, (uint64_t)(v109 + 5));
      uint64_t v110 = v177;
      uint64_t v111 = v169;
      v52(v177, (uint64_t)v199, v169);
      uint64_t v112 = *(unsigned __int8 *)(v197 + 80);
      uint64_t v113 = (v112 + 24) & ~v112;
      unint64_t v114 = (v176 + v113 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v115 = swift_allocObject(&unk_10094DB28, v114 + 16, v112 | 7);
      *(void *)(v115 + swift_weakDestroy(v0 + 16) = v181;
      v194(v115 + v113, v110, v111);
      uint64_t v116 = (uint64_t (**)(char))(v115 + v114);
      uint64_t v117 = v196;
      *uint64_t v116 = sub_1002DDE88;
      v116[1] = (uint64_t (*)(char))v117;
      swift_retain();
      uint64_t v118 = v97;
      swift_retain();
      sub_1002B46E8( v105,  1,  (void (*)(uint64_t))sub_1002DA0C0,  (uint64_t)v109,  (void (*)(uint64_t))sub_1002DA0D4,  (void (*)(uint64_t))v115);
      swift_release();
      swift_release();
      uint64_t v77 = v195;
      goto LABEL_26;
    }

    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v142 = type metadata accessor for Logger(0LL);
    sub_10000A720(v142, (uint64_t)qword_100A2AC98);
    __int128 v131 = v172;
    uint64_t v143 = ((uint64_t (*)(char *, uint64_t, uint64_t))v52)(v172, v56, v55);
    uint64_t v133 = (os_log_s *)Logger.logObject.getter(v143);
    os_log_type_t v134 = static os_log_type_t.error.getter(v133);
    if (os_log_type_enabled(v133, v134))
    {
      uint64_t v135 = swift_slowAlloc(22LL, -1LL);
      uint64_t v136 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v135 = 141558275;
      uint64_t v200 = 1752392040LL;
      *(void *)&__int128 v201 = v136;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, &v201, v135 + 4, v135 + 12);
      *(_WORD *)(v135 + 12) = 2081;
      uint64_t v144 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v145 = dispatch thunk of CustomStringConvertible.description.getter(v55, v144);
      uint64_t v200 = sub_1003F11D4(v145, v146, (uint64_t *)&v201);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v200, &v201, v135 + 14, v135 + 22);
      swift_bridgeObjectRelease();
      id v140 = *(void (**)(char *, uint64_t))(v197 + 8);
      v140(v131, v55);
      uint64_t v141 = "Cannot set empty name for item. Beacon: %{private,mask.hash}s.";
      goto LABEL_35;
    }

uint64_t sub_1002D22E8(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = static os_log_type_t.info.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v6 = qword_100A2B008;
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v8 = swift_allocObject(v7, 112LL, 7LL);
  *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v19 = *a2;
  uint64_t v9 = sub_100004AEC(&qword_1009A7D50);
  uint64_t v10 = String.init<A>(describing:)(&v19, v9);
  uint64_t v12 = v11;
  *(void *)(v8 + 56) = &type metadata for String;
  unint64_t v13 = sub_1000226F4();
  *(void *)(v8 + 32) = v10;
  *(void *)(v8 + sub_10016CF88(v0 + 40) = v12;
  *(void *)(v8 + 96) = &type metadata for String;
  *(void *)(v8 + 104) = v13;
  *(void *)(v8 + 64) = v13;
  *(void *)(v8 + 72) = 0xD00000000000002BLL;
  *(void *)(v8 + 80) = 0x800000010085C150LL;
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "%@: %@", 6LL, 2LL, v8);
  uint64_t v14 = swift_bridgeObjectRelease();
  uint64_t v15 = static os_log_type_t.error.getter(v14);
  uint64_t v16 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v17 = (void *)static OS_os_log.default.getter(v16);
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v17,  "Could not update key roll interval - not implemented.",  53LL,  2LL,  _swiftEmptyArrayStorage);

  return (*(uint64_t (**)(uint64_t, void))(a3 + 16))(a3, 0LL);
}

uint64_t sub_1002D2484(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6)
{
  uint64_t v80 = a6;
  uint64_t v81 = a1;
  uint64_t v82 = a3;
  uint64_t v78 = a2;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v74 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v74 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v74 - v16;
  if (qword_10099B4D8 != -1) {
    swift_once(&qword_10099B4D8, sub_1004AB71C);
  }
  uint64_t v18 = type metadata accessor for Logger(0LL);
  uint64_t v19 = sub_10000A720(v18, (uint64_t)qword_100A2AB18);
  uint64_t v20 = swift_retain_n(a5, 2LL);
  uint64_t v83 = v19;
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.info.getter(v21);
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v76 = v15;
  uint64_t v77 = v12;
  if (v23)
  {
    uint64_t v24 = swift_slowAlloc(22LL, -1LL);
    uint64_t v25 = swift_slowAlloc(64LL, -1LL);
    uint64_t v75 = v25;
    *(_DWORD *)uint64_t v24 = 136315394;
    uint64_t v84 = *a5;
    uint64_t v85 = v25;
    uint64_t v26 = sub_100004AEC(&qword_1009A7D50);
    uint64_t v79 = (uint64_t (*)(char *, uint64_t, uint64_t))v8;
    uint64_t v27 = String.init<A>(describing:)(&v84, v26);
    uint64_t v84 = sub_1003F11D4(v27, v28, &v85);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v24 + 4, v24 + 12);
    swift_release_n(a5, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2080;
    uint64_t v84 = sub_1003F11D4(0xD00000000000003ALL, 0x800000010085C1E0LL, &v85);
    uint64_t v8 = (uint64_t)v79;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v24 + 14, v24 + 22);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "%s: %s", (uint8_t *)v24, 0x16u);
    uint64_t v29 = v75;
    swift_arrayDestroy(v75, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v29, -1LL, -1LL);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  else
  {

    swift_release_n(a5, 2LL);
  }

  uint64_t v79 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v30 = v79(v17, a4, v8);
  uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
  os_log_type_t v32 = static os_log_type_t.info.getter(v31);
  if (os_log_type_enabled(v31, v32))
  {
    uint64_t v33 = swift_slowAlloc(52LL, -1LL);
    uint64_t v34 = swift_slowAlloc(32LL, -1LL);
    uint64_t v74 = v34;
    *(_DWORD *)uint64_t v33 = 134219011;
    uint64_t v35 = v81;
    uint64_t v84 = v81;
    uint64_t v85 = v34;
    uint64_t v75 = a4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v33 + 4, v33 + 12);
    *(_WORD *)(v33 + 12) = 2048;
    uint64_t v84 = v78;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v33 + 14, v33 + 22);
    *(_WORD *)(v33 + 22) = 2048;
    uint64_t v84 = v82;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v33 + 24, v33 + 32);
    *(_WORD *)(v33 + 32) = 2160;
    uint64_t v84 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v33 + 34, v33 + 42);
    *(_WORD *)(v33 + 42) = 2081;
    uint64_t v36 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter(v8, v36);
    uint64_t v84 = sub_1003F11D4(v37, v38, &v85);
    a4 = v75;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v33 + 44, v33 + 52);
    swift_bridgeObjectRelease();
    uint64_t v39 = *(void (**)(char *, uint64_t))(v9 + 8);
    v39(v17, v8);
    _os_log_impl( (void *)&_mh_execute_header,  v31,  v32,  "setWildKeyBase called:\nbase: %lu,\ninterval: %lu,\nfallback: %lu\nbeaconUUID: %{private,mask.hash}s",  (uint8_t *)v33,  0x34u);
    uint64_t v40 = v74;
    swift_arrayDestroy(v74, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v40, -1LL, -1LL);
    swift_slowDealloc(v33, -1LL, -1LL);

    if (v35) {
      goto LABEL_8;
    }
LABEL_11:
    unint64_t v52 = v76;
    uint64_t v53 = v79(v76, a4, v8);
    int v54 = (os_log_s *)Logger.logObject.getter(v53);
    os_log_type_t v55 = static os_log_type_t.error.getter(v54);
    BOOL v56 = os_log_type_enabled(v54, v55);
    uint64_t v42 = v82;
    if (v56)
    {
      uint64_t v57 = swift_slowAlloc(42LL, -1LL);
      uint64_t v58 = swift_slowAlloc(32LL, -1LL);
      uint64_t v81 = v58;
      *(_DWORD *)uint64_t v57 = 141558787;
      uint64_t v84 = 1752392040LL;
      uint64_t v85 = v58;
      uint64_t v75 = a4;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v57 + 4, v57 + 12);
      *(_WORD *)(v57 + 12) = 2081;
      uint64_t v59 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter(v8, v59);
      uint64_t v84 = sub_1003F11D4(v60, v61, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v57 + 14, v57 + 22);
      swift_bridgeObjectRelease();
      v39(v52, v8);
      *(_WORD *)(v57 + 22) = 2048;
      uint64_t v84 = 1LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v57 + 24, v57 + 32);
      *(_WORD *)(v57 + 32) = 2048;
      uint64_t v84 = 0LL;
      a4 = v75;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v57 + 34, v57 + 42);
      _os_log_impl( (void *)&_mh_execute_header,  v54,  v55,  "Ignoring setWildKeyBase update because wildIndexBase for beacon %{private,mask.hash}s:\n existing: %llu new: %llu",  (uint8_t *)v57,  0x2Au);
      uint64_t v62 = v81;
      swift_arrayDestroy(v81, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1LL, -1LL);
      swift_slowDealloc(v57, -1LL, -1LL);
    }

    else
    {
      v39(v52, v8);
    }

    if (v42) {
      goto LABEL_19;
    }
    goto LABEL_15;
  }

  uint64_t v39 = *(void (**)(char *, uint64_t))(v9 + 8);
  v39(v17, v8);

  if (!v81) {
    goto LABEL_11;
  }
LABEL_8:
  uint64_t v42 = v82;
  if (!v82)
  {
LABEL_15:
    id v63 = v77;
    uint64_t v64 = v79(v77, a4, v8);
    uint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
    os_log_type_t v66 = static os_log_type_t.error.getter(v65);
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = swift_slowAlloc(42LL, -1LL);
      uint64_t v68 = swift_slowAlloc(32LL, -1LL);
      uint64_t v83 = v68;
      *(_DWORD *)uint64_t v67 = 141558787;
      uint64_t v84 = 1752392040LL;
      uint64_t v85 = v68;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v67 + 4, v67 + 12);
      *(_WORD *)(v67 + 12) = 2081;
      uint64_t v69 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter(v8, v69);
      uint64_t v84 = sub_1003F11D4(v70, v71, &v85);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v67 + 14, v67 + 22);
      swift_bridgeObjectRelease();
      v39(v63, v8);
      *(_WORD *)(v67 + 22) = 2048;
      uint64_t v84 = 1LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v67 + 24, v67 + 32);
      *(_WORD *)(v67 + 32) = 2048;
      uint64_t v84 = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v84, &v85, v67 + 34, v67 + 42);
      _os_log_impl( (void *)&_mh_execute_header,  v65,  v66,  "Ignoring setWildKeyBase update because wildIndexFallback for beacon %{private,mask.hash}s:\n existing: %llu new: %llu",  (uint8_t *)v67,  0x2Au);
      uint64_t v72 = v83;
      swift_arrayDestroy(v83, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v72, -1LL, -1LL);
      swift_slowDealloc(v67, -1LL, -1LL);
    }

    else
    {
      v39(v63, v8);
    }

LABEL_19:
    uint64_t v51 = 0LL;
    return (*(uint64_t (**)(uint64_t, uint64_t))(v80 + 16))(v80, v51);
  }

  uint64_t v43 = static os_log_type_t.default.getter(v41);
  uint64_t v44 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v45 = swift_allocObject(v44, 72LL, 7LL);
  *(_OWORD *)(v45 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v46 = UUID.uuidString.getter(v45);
  uint64_t v48 = v47;
  *(void *)(v45 + 56) = &type metadata for String;
  *(void *)(v45 + 64) = sub_1000226F4();
  *(void *)(v45 + 32) = v46;
  *(void *)(v45 + sub_10016CF88(v0 + 40) = v48;
  uint64_t v49 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v50 = (void *)static OS_os_log.default.getter(v49);
  os_log(_:dso:log:_:_:)(v43, &_mh_execute_header, v50, "Ignoring wild base update - %@", 30LL, 2LL, v45);
  swift_bridgeObjectRelease();

  uint64_t v51 = 1LL;
  return (*(uint64_t (**)(uint64_t, uint64_t))(v80 + 16))(v80, v51);
}

uint64_t sub_1002D2D80(uint64_t a1, uint64_t a2, uint64_t *a3, const void *a4)
{
  uint64_t v68 = a2;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(char **)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v65 = (char *)&v61 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v61 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v61 - v14;
  if (qword_10099B4D8 != -1) {
    swift_once(&qword_10099B4D8, sub_1004AB71C);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = sub_10000A720(v16, (uint64_t)qword_100A2AB18);
  uint64_t v18 = swift_retain_n(a3, 2LL);
  uint64_t v67 = v17;
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.info.getter(v19);
  BOOL v21 = os_log_type_enabled(v19, v20);
  os_log_type_t v66 = a4;
  uint64_t v64 = v13;
  if (v21)
  {
    uint64_t v22 = swift_slowAlloc(22LL, -1LL);
    uint64_t v23 = swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v22 = 136315394;
    id v63 = (uint64_t (*)(char *, uint64_t, uint64_t))v7;
    uint64_t v69 = *a3;
    uint64_t v70 = v23;
    uint64_t v24 = sub_100004AEC(&qword_1009A7D50);
    uint64_t v62 = v15;
    uint64_t v25 = String.init<A>(describing:)(&v69, v24);
    uint64_t v69 = sub_1003F11D4(v25, v26, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v22 + 4, v22 + 12);
    swift_release_n(a3, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v22 + 12) = 2080;
    uint64_t v69 = sub_1003F11D4(0xD00000000000002FLL, 0x800000010085C120LL, &v70);
    uint64_t v15 = v62;
    uint64_t v7 = (uint64_t)v63;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v22 + 14, v22 + 22);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "%s: %s", (uint8_t *)v22, 0x16u);
    swift_arrayDestroy(v23, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v23, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  else
  {

    swift_release_n(a3, 2LL);
  }

  if (a1 < 0)
  {
    _Block_release(v66);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t v27 = (uint64_t (*)(char *, uint64_t, uint64_t))*((void *)v8 + 2);
    uint64_t v28 = v27(v15, v68, v7);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.info.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      uint64_t v31 = swift_slowAlloc(32LL, -1LL);
      id v63 = v27;
      uint64_t v32 = v31;
      uint64_t v33 = swift_slowAlloc(32LL, -1LL);
      uint64_t v69 = a1;
      uint64_t v70 = v33;
      *(_DWORD *)uint64_t v32 = 134218499;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v32 + 4, v32 + 12);
      *(_WORD *)(v32 + 12) = 2160;
      uint64_t v69 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v32 + 14, v32 + 22);
      *(_WORD *)(v32 + 22) = 2081;
      uint64_t v62 = v8;
      uint64_t v34 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter(v7, v34);
      uint64_t v69 = sub_1003F11D4(v35, v36, &v70);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v32 + 24, v32 + 32);
      swift_bridgeObjectRelease();
      uint64_t v37 = (void (*)(char *, uint64_t))*((void *)v62 + 1);
      v37(v15, v7);
      _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "setCurrentWildKeyIndex called: index: %llu, beaconUUID: %{private,mask.hash}s",  (uint8_t *)v32,  0x20u);
      swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1LL, -1LL);
      uint64_t v38 = v32;
      uint64_t v27 = v63;
      swift_slowDealloc(v38, -1LL, -1LL);
    }

    else
    {
      uint64_t v37 = (void (*)(char *, uint64_t))*((void *)v8 + 1);
      v37(v15, v7);
    }

    uint64_t v39 = v65;
    if (a1)
    {
      uint64_t v40 = v27(v65, v68, v7);
      uint64_t v41 = (os_log_s *)Logger.logObject.getter(v40);
      os_log_type_t v42 = static os_log_type_t.default.getter(v41);
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = swift_slowAlloc(22LL, -1LL);
        uint64_t v44 = swift_slowAlloc(32LL, -1LL);
        uint64_t v68 = a1;
        uint64_t v45 = v44;
        *(_DWORD *)uint64_t v43 = 141558275;
        uint64_t v69 = 1752392040LL;
        uint64_t v70 = v44;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v43 + 4, v43 + 12);
        *(_WORD *)(v43 + 12) = 2081;
        uint64_t v46 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter(v7, v46);
        uint64_t v69 = sub_1003F11D4(v47, v48, &v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v43 + 14, v43 + 22);
        swift_bridgeObjectRelease();
        v37(v39, v7);
        _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "Ignoring update for wild key index for %{private,mask.hash}s",  (uint8_t *)v43,  0x16u);
        swift_arrayDestroy(v45, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v45, -1LL, -1LL);
        swift_slowDealloc(v43, -1LL, -1LL);
      }

      else
      {
        v37(v39, v7);
      }
    }

    else
    {
      uint64_t v49 = v64;
      uint64_t v50 = v27(v64, v68, v7);
      uint64_t v51 = v7;
      unint64_t v52 = (os_log_s *)Logger.logObject.getter(v50);
      os_log_type_t v53 = static os_log_type_t.error.getter(v52);
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = swift_slowAlloc(42LL, -1LL);
        uint64_t v68 = 0LL;
        uint64_t v55 = v54;
        uint64_t v56 = swift_slowAlloc(32LL, -1LL);
        *(_DWORD *)uint64_t v55 = 141558787;
        uint64_t v69 = 1752392040LL;
        uint64_t v70 = v56;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v55 + 4, v55 + 12);
        *(_WORD *)(v55 + 12) = 2081;
        uint64_t v57 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter(v51, v57);
        uint64_t v69 = sub_1003F11D4(v58, v59, &v70);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v55 + 14, v55 + 22);
        swift_bridgeObjectRelease();
        v37(v49, v51);
        *(_WORD *)(v55 + 22) = 2048;
        uint64_t v69 = 1LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v55 + 24, v55 + 32);
        *(_WORD *)(v55 + 32) = 2048;
        uint64_t v69 = 0LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v69, &v70, v55 + 34, v55 + 42);
        _os_log_impl( (void *)&_mh_execute_header,  v52,  v53,  "Ignoring setCurrentWildKeyindex update because wildIndexFallback for beacon %{private,mask.hash}s:\n existing: %llu new: %llu",  (uint8_t *)v55,  0x2Au);
        swift_arrayDestroy(v56, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v56, -1LL, -1LL);
        swift_slowDealloc(v55, -1LL, -1LL);
      }

      else
      {
        v37(v49, v51);
      }
    }

    return (*((uint64_t (**)(void))v66 + 2))();
  }

  return result;
}

uint64_t sub_1002D3580(uint64_t a1, uint64_t a2, void *a3, char *a4)
{
  uint64_t v76 = a2;
  uint64_t v80 = a1;
  uint64_t v70 = type metadata accessor for UUID(0LL);
  uint64_t v69 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v66 = v6;
  uint64_t v68 = (char *)&v63 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v7);
  uint64_t v75 = (uint64_t)&v63 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009A2430);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v72 = *(void **)(v12 - 8);
  uint64_t v73 = v12;
  __chkstk_darwin(v12);
  uint64_t v71 = (uint64_t)&v63 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v79 = type metadata accessor for Date(0LL);
  uint64_t v77 = *(void *)(v79 - 8);
  uint64_t v14 = __chkstk_darwin(v79);
  uint64_t v74 = (char *)&v63 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v65 = v15;
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v63 - v16;
  uint64_t v78 = swift_allocObject(&unk_10094D9C0, 24LL, 7LL);
  *(void *)(v78 + swift_weakDestroy(v0 + 16) = a4;
  uint64_t v67 = a4;
  uint64_t v18 = _Block_copy(a4);
  uint64_t v19 = static os_log_type_t.info.getter(v18);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v20 = qword_100A2B008;
  uint64_t v64 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v21 = swift_allocObject(v64, 112LL, 7LL);
  *(_OWORD *)(v21 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  v83[0] = *a3;
  uint64_t v22 = sub_100004AEC(&qword_1009A7D50);
  uint64_t v23 = String.init<A>(describing:)(v83, v22);
  uint64_t v25 = v24;
  *(void *)(v21 + 56) = &type metadata for String;
  unint64_t v26 = sub_1000226F4();
  *(void *)(v21 + 32) = v23;
  *(void *)(v21 + sub_10016CF88(v0 + 40) = v25;
  *(void *)(v21 + 96) = &type metadata for String;
  *(void *)(v21 + 104) = v26;
  *(void *)(v21 + 64) = v26;
  *(void *)(v21 + 72) = 0xD000000000000029LL;
  *(void *)(v21 + 80) = 0x800000010085BF10LL;
  os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "%@: %@", 6LL, 2LL, v21);
  swift_bridgeObjectRelease();
  static Date.trustedNow.getter((uint64_t)v17);
  uint64_t v27 = a3[32];
  uint64_t v28 = v80;
  sub_100576BD4((uint64_t)v11);
  uint64_t v29 = v17;
  if (((unsigned int (*)(char *, uint64_t, uint64_t))v72[6])(v11, 1LL, v73) == 1)
  {
    uint64_t v30 = sub_100015794((uint64_t)v11, &qword_1009A2430);
    uint64_t v31 = static os_log_type_t.error.getter(v30);
    uint64_t v32 = swift_allocObject(v64, 72LL, 7LL);
    *(_OWORD *)(v32 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v33 = UUID.uuidString.getter(v32);
    *(void *)(v32 + 56) = &type metadata for String;
    *(void *)(v32 + 64) = v26;
    *(void *)(v32 + 32) = v33;
    *(void *)(v32 + sub_10016CF88(v0 + 40) = v34;
    uint64_t v35 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    unint64_t v36 = (void *)static OS_os_log.default.getter(v35);
    os_log(_:dso:log:_:_:)( v31,  &_mh_execute_header,  v36,  "KeySyncRecord with the identifier not found - %@",  48LL,  2LL,  v32);
    swift_bridgeObjectRelease();

    (*((void (**)(char *, void))v67 + 2))(v67, 0LL);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v29, v79);
  }

  else
  {
    uint64_t v37 = v71;
    sub_10002218C((uint64_t)v11, v71, type metadata accessor for KeyAlignmentRecord);
    uint64_t v38 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v38);
    *(&v63 - 4) = (uint64_t)a3;
    *(&v63 - 3) = v37;
    *(&v63 - 2) = v76;
    uint64_t v64 = v39;
    uint64_t v72 = a3;
    static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd-saveKeyAlignment", 46LL, 2LL, sub_1002D9BE8);
    uint64_t v40 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v40 - 8) + 56LL))(v75, 1LL, 1LL, v40);
    uint64_t v73 = v27;
    uint64_t v41 = v69;
    os_log_type_t v42 = v68;
    uint64_t v43 = v70;
    (*(void (**)(char *, uint64_t, uint64_t))(v69 + 16))(v68, v28, v70);
    uint64_t v44 = v77;
    uint64_t v45 = v79;
    (*(void (**)(char *, char *, uint64_t))(v77 + 16))(v74, v17, v79);
    uint64_t v46 = *(unsigned __int8 *)(v41 + 80);
    uint64_t v47 = (v46 + 56) & ~v46;
    unint64_t v48 = (v66 + v47 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v49 = *(unsigned __int8 *)(v44 + 80);
    uint64_t v67 = v17;
    uint64_t v50 = (v49 + v48 + 8) & ~v49;
    uint64_t v51 = (char *)swift_allocObject(&unk_10094D9E8, v50 + v65, v46 | v49 | 7);
    *((void *)v51 + 2) = 0LL;
    *((void *)v51 + 3) = 0LL;
    *((void *)v51 + 4) = v72;
    *((void *)v51 + 5) = sub_1000DEB08;
    *((void *)v51 + 6) = v78;
    unint64_t v52 = &v51[v47];
    uint64_t v53 = v73;
    uint64_t v54 = v43;
    uint64_t v55 = v76;
    (*(void (**)(char *, char *, uint64_t))(v41 + 32))(v52, v42, v54);
    *(void *)&v51[v48] = v55;
    (*(void (**)(char *, char *, uint64_t))(v44 + 32))(&v51[v50], v74, v45);
    swift_retain();
    swift_retain();
    sub_1003EDB00(v75, (uint64_t)&unk_1009A7DF0, (uint64_t)v51);
    swift_release();
    sub_100504C28(v80, (uint64_t)&v81);
    if (v82)
    {
      sub_100012EC0(&v81, (uint64_t)v83);
      uint64_t v56 = v84;
      uint64_t v57 = v85;
      uint64_t v58 = sub_100012ED8(v83, v84);
      unint64_t v59 = sub_10054A858((uint64_t)v58, v53, v56, v57);
      uint64_t v60 = swift_allocObject(&unk_10094DA10, 32LL, 7LL);
      *(void *)(v60 + swift_weakDestroy(v0 + 16) = v55;
      *(void *)(v60 + 24) = v59;
      uint64_t v61 = v59;
      static Transaction.asyncTask(name:block:)("ItemUpdateKeyIndexAnalytics", 27LL, 2LL, &unk_1009A7E00, v60);

      swift_release();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v83);
      (*(void (**)(char *, uint64_t))(v44 + 8))(v67, v45);
      sub_100018C68(v71, type metadata accessor for KeyAlignmentRecord);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v44 + 8))(v67, v45);
      sub_100018C68(v71, type metadata accessor for KeyAlignmentRecord);
      sub_100015794((uint64_t)&v81, (uint64_t *)&unk_1009A9C40);
    }
  }

  return swift_release();
}

uint64_t sub_1002D3C58(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v126 = a4;
  uint64_t v108 = a1;
  uint64_t v148 = sub_100004AEC(&qword_10099E378);
  uint64_t v10 = __chkstk_darwin(v148);
  uint64_t v115 = (char *)&v107 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v107 - v12;
  uint64_t v14 = sub_100004AEC(&qword_1009A7D38);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v114 = (uint64_t)&v107 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v107 - v17;
  uint64_t v141 = type metadata accessor for UUID(0LL);
  uint64_t v121 = *(void *)(v141 - 8);
  uint64_t v19 = __chkstk_darwin(v141);
  uint64_t v132 = (char *)&v107 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v107 - v21;
  uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009AE450);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v113 = (uint64_t)&v107 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  uint64_t v120 = (char *)&v107 - v26;
  uint64_t v27 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v28 = __chkstk_darwin(v27);
  uint64_t v30 = (char *)&v107 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v28);
  id v119 = (char *)&v107 - v31;
  uint64_t v32 = type metadata accessor for Date(0LL);
  uint64_t v140 = *(void *)(v32 - 8);
  uint64_t v33 = __chkstk_darwin(v32);
  uint64_t v110 = (char *)&v107 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v33);
  __int128 v131 = (char *)&v107 - v36;
  uint64_t v107 = a2;
  if (a3 != a2)
  {
    uint64_t v37 = 40 * a3 - 40;
    uint64_t v138 = *(void *)(a5 + 256);
    unint64_t v112 = (unint64_t)"Unable to derive commandKey!: ";
    uint64_t v118 = (void *)0x800000010085B900LL;
    uint64_t v116 = v13;
    uint64_t v130 = v18;
    uint64_t v111 = v30;
    uint64_t v139 = result;
    uint64_t v117 = v22;
LABEL_7:
    uint64_t v41 = v108;
    uint64_t v109 = v37;
    uint64_t v42 = v37;
    uint64_t v122 = a3;
    while (1)
    {
      uint64_t v125 = v41;
      uint64_t v43 = *v126;
      uint64_t v124 = v42;
      uint64_t v44 = v43 + v42;
      sub_100013044(v43 + v42 + 40, (uint64_t)&v145);
      sub_100013044(v44, (uint64_t)&v142);
      uint64_t v45 = v146;
      uint64_t v46 = v147;
      sub_100012ED8(&v145, v146);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v46 + 8) + 8LL) + 32LL))(v45);
      v47._countAndFlagsBits = 0xD000000000000015LL;
      v47._object = v118;
      prohibitAsyncContext(functionName:)(v47);
      __chkstk_darwin(v48);
      *(&v107 - 2) = v49;
      *(&v107 - 1) = (uint64_t)v22;
      uint64_t v50 = v6;
      OS_dispatch_queue.sync<A>(execute:)(sub_1002DDFC0, &v107 - 4, v148);
      uint64_t v51 = sub_100004AEC(&qword_10099E380);
      uint64_t v136 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v51 - 8) + 48LL);
      int v52 = v136(v13, 1LL, v51);
      uint64_t v137 = v51;
      if (v52 == 1)
      {
        sub_100015794((uint64_t)v13, &qword_10099E378);
        uint64_t v53 = sub_100004AEC(&qword_1009A7D40);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v53 - 8) + 56LL))(v18, 1LL, 1LL, v53);
      }

      else
      {
        char v54 = v13[*(int *)(v51 + 48)];
        uint64_t v55 = sub_100004AEC(&qword_1009A7D40);
        uint64_t v56 = *(int *)(v55 + 48);
        sub_10002218C((uint64_t)v13, (uint64_t)v18, type metadata accessor for BeaconStatus);
        v18[v56] = v54;
        (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v55 - 8) + 56LL))(v18, 0LL, 1LL, v55);
      }

      uint64_t v57 = (uint64_t)v120;
      uint64_t v58 = sub_100004AEC(&qword_1009A7D40);
      uint64_t v59 = *(void *)(v58 - 8);
      uint64_t v60 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v59 + 48);
      if (v60(v18, 1LL, v58) == 1)
      {
        sub_100015794((uint64_t)v18, &qword_1009A7D38);
        uint64_t v61 = type metadata accessor for BeaconStatus(0LL);
        (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56LL))(v57, 1LL, 1LL, v61);
      }

      else
      {
        sub_10002218C((uint64_t)v18, v57, type metadata accessor for BeaconStatus);
        uint64_t v61 = type metadata accessor for BeaconStatus(0LL);
        (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56LL))(v57, 0LL, 1LL, v61);
      }

      uint64_t v62 = *(void (**)(char *, uint64_t))(v121 + 8);
      v62(v22, v141);
      type metadata accessor for BeaconStatus(0LL);
      uint64_t v135 = *(void *)(v61 - 8);
      uint64_t v63 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48);
      if (v63(v57, 1LL, v61) == 1) {
        break;
      }
      uint64_t v133 = v63;
      os_log_type_t v134 = v62;
      uint64_t v64 = v58;
      uint64_t v65 = (void *)v140;
      uint64_t v66 = v57 + *(int *)(v61 + 24);
      uint64_t v67 = v119;
      uint64_t v68 = v139;
      uint64_t v129 = *(void (**)(char *, uint64_t, uint64_t))(v140 + 16);
      v129(v119, v66, v139);
      uint64_t v69 = v57;
      uint64_t v70 = (uint64_t)v67;
      sub_100018C68(v69, type metadata accessor for BeaconStatus);
      uint64_t v71 = (void (*)(char *, uint64_t, uint64_t, uint64_t))v65[7];
      v71((char *)v70, 0LL, 1LL, v68);
      uint64_t v128 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v65[6];
      if (v128(v70, 1LL, v68) == 1)
      {
        uint64_t v39 = v70;
        uint64_t v13 = v116;
        uint64_t v18 = v130;
        uint64_t v22 = v117;
        uint64_t v6 = v50;
        uint64_t v40 = v122;
        goto LABEL_5;
      }

      uint64_t v127 = v71;
      uint64_t v123 = (void (*)(char *, uint64_t, uint64_t))v65[4];
      v123(v131, v70, v68);
      uint64_t v73 = v143;
      uint64_t v72 = v144;
      sub_100012ED8(&v142, v143);
      uint64_t v74 = v132;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v72 + 8) + 8LL) + 32LL))(v73);
      v75._object = (void *)(v112 | 0x8000000000000000LL);
      v75._countAndFlagsBits = 0xD000000000000015LL;
      prohibitAsyncContext(functionName:)(v75);
      __chkstk_darwin(v76);
      *(&v107 - 2) = v77;
      *(&v107 - 1) = (uint64_t)v74;
      uint64_t v78 = v115;
      OS_dispatch_queue.sync<A>(execute:)(sub_1002DDFC0, &v107 - 4, v148);
      uint64_t v79 = (uint64_t)v78;
      uint64_t v80 = v78;
      uint64_t v81 = v137;
      if (v136(v80, 1LL, v137) == 1)
      {
        sub_100015794(v79, &qword_10099E378);
        uint64_t v82 = 1LL;
        uint64_t v83 = v114;
      }

      else
      {
        uint64_t v84 = v79;
        char v85 = *(_BYTE *)(v79 + *(int *)(v81 + 48));
        uint64_t v86 = *(int *)(v64 + 48);
        uint64_t v83 = v114;
        sub_10002218C(v84, v114, type metadata accessor for BeaconStatus);
        uint64_t v82 = 0LL;
        *(_BYTE *)(v83 + v86) = v85;
      }

      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v59 + 56))(v83, v82, 1LL, v64);
      BOOL v87 = v60((char *)v83, 1LL, v64) == 1;
      uint64_t v88 = v134;
      uint64_t v89 = v83;
      if (v87)
      {
        sub_100015794(v83, &qword_1009A7D38);
        uint64_t v91 = 1LL;
        uint64_t v40 = v122;
        uint64_t v13 = v116;
        uint64_t v90 = v113;
      }

      else
      {
        uint64_t v90 = v113;
        sub_10002218C(v89, v113, type metadata accessor for BeaconStatus);
        uint64_t v91 = 0LL;
        uint64_t v40 = v122;
        uint64_t v13 = v116;
      }

      unint64_t v92 = v133;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v135 + 56))(v90, v91, 1LL, v61);
      v88(v132, v141);
      if (v92(v90, 1LL, v61) == 1)
      {
        sub_100015794(v90, (uint64_t *)&unk_1009AE450);
        uint64_t v93 = (uint64_t)v111;
        uint64_t v94 = v139;
        v127(v111, 1LL, 1LL, v139);
        uint64_t v18 = v130;
        uint64_t v22 = v117;
LABEL_31:
        (*(void (**)(char *, uint64_t))(v140 + 8))(v131, v94);
        uint64_t v39 = v93;
        uint64_t v6 = v50;
        goto LABEL_5;
      }

      uint64_t v93 = (uint64_t)v111;
      uint64_t v94 = v139;
      v129(v111, v90 + *(int *)(v61 + 24), v139);
      sub_100018C68(v90, type metadata accessor for BeaconStatus);
      v127((char *)v93, 0LL, 1LL, v94);
      unsigned int v95 = v128(v93, 1LL, v94);
      uint64_t v18 = v130;
      uint64_t v22 = v117;
      if (v95 == 1) {
        goto LABEL_31;
      }
      unint64_t v96 = v117;
      uint64_t v97 = v40;
      uint64_t v98 = v13;
      uint64_t v99 = v110;
      v123(v110, v93, v94);
      uint64_t v100 = v131;
      char v101 = static Date.> infix(_:_:)(v131, v99);
      uint64_t v102 = *(void (**)(char *, uint64_t))(v140 + 8);
      v102(v99, v94);
      v102(v100, v94);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v142);
      uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v145);
      if ((v101 & 1) == 0)
      {
        uint64_t v6 = v50;
        uint64_t v13 = v98;
        uint64_t v40 = v97;
        uint64_t v22 = v96;
        uint64_t v18 = v130;
LABEL_6:
        a3 = v40 + 1;
        uint64_t v37 = v109 + 40;
        if (a3 == v107) {
          return result;
        }
        goto LABEL_7;
      }

      uint64_t v103 = *v126;
      if (!*v126)
      {
        __break(1u);
        return result;
      }

      uint64_t v6 = v50;
      uint64_t v13 = v98;
      uint64_t v104 = v124;
      uint64_t v105 = v103 + v124;
      sub_100012EC0((__int128 *)(v103 + v124 + 40), (uint64_t)&v145);
      __int128 v106 = *(_OWORD *)(v105 + 16);
      *(_OWORD *)(v105 + sub_10016CF88(v0 + 40) = *(_OWORD *)v105;
      *(_OWORD *)(v105 + 56) = v106;
      *(void *)(v105 + 72) = *(void *)(v105 + 32);
      uint64_t result = sub_100012EC0(&v145, v105);
      uint64_t v42 = v104 - 40;
      uint64_t v41 = v125 + 1;
      uint64_t v40 = v97;
      BOOL v87 = v97 == v125 + 1;
      uint64_t v22 = v96;
      uint64_t v18 = v130;
      if (v87) {
        goto LABEL_6;
      }
    }

    sub_100015794(v57, (uint64_t *)&unk_1009AE450);
    uint64_t v38 = v119;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v140 + 56))(v119, 1LL, 1LL, v139);
    uint64_t v39 = (uint64_t)v38;
    uint64_t v13 = v116;
    uint64_t v18 = v130;
    uint64_t v22 = v117;
    uint64_t v40 = v122;
LABEL_5:
    sub_100015794(v39, (uint64_t *)&unk_10099D720);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v142);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v145);
    goto LABEL_6;
  }

  return result;
}

uint64_t sub_1002D4744(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v322 = sub_100004AEC(&qword_10099E378);
  uint64_t v6 = __chkstk_darwin(v322);
  uint64_t v298 = (char *)&v272 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v272 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v279 = (char *)&v272 - v12;
  __chkstk_darwin(v11);
  uint64_t v287 = (char *)&v272 - v13;
  uint64_t v14 = sub_100004AEC(&qword_1009A7D38);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v272 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v301 = (uint64_t)&v272 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v278 = (uint64_t)&v272 - v21;
  __chkstk_darwin(v20);
  uint64_t v286 = (uint64_t)&v272 - v22;
  uint64_t v321 = type metadata accessor for UUID(0LL);
  uint64_t v302 = *(void *)(v321 - 8);
  uint64_t v23 = __chkstk_darwin(v321);
  unsigned __int8 v313 = (char *)&v272 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v320 = (char *)&v272 - v26;
  uint64_t v27 = __chkstk_darwin(v25);
  uint64_t v281 = (char *)&v272 - v28;
  __chkstk_darwin(v27);
  uint64_t v290 = (char *)&v272 - v29;
  uint64_t v30 = sub_100004AEC((uint64_t *)&unk_1009AE450);
  uint64_t v31 = __chkstk_darwin(v30);
  uint64_t v297 = (uint64_t)&v272 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = __chkstk_darwin(v31);
  uint64_t v300 = (char *)&v272 - v34;
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v277 = (char *)&v272 - v36;
  __chkstk_darwin(v35);
  uint64_t v285 = (char *)&v272 - v37;
  uint64_t v38 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v39 = __chkstk_darwin(v38);
  uint64_t v296 = (char *)&v272 - ((v40 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v41 = __chkstk_darwin(v39);
  uint64_t v299 = (char *)&v272 - v42;
  uint64_t v43 = __chkstk_darwin(v41);
  uint64_t v276 = (char *)&v272 - v44;
  __chkstk_darwin(v43);
  uint64_t v284 = (char *)&v272 - v45;
  uint64_t v46 = type metadata accessor for Date(0LL);
  uint64_t v323 = *(void *)(v46 - 8);
  uint64_t v47 = __chkstk_darwin(v46);
  uint64_t v294 = (char *)&v272 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v49 = __chkstk_darwin(v47);
  uint64_t v312 = (char *)&v272 - v50;
  uint64_t v51 = __chkstk_darwin(v49);
  uint64_t v275 = (char *)&v272 - v52;
  __chkstk_darwin(v51);
  os_log_type_t v280 = (char *)&v272 - v53;
  uint64_t v324 = a1;
  Swift::Int v54 = a1[1];
  uint64_t v292 = a2;
  swift_retain_n(a2, 3LL);
  Swift::Int v55 = _minimumMergeRunLength(_:)(v54);
  if (v55 >= v54)
  {
    if (v54 < 0) {
      goto LABEL_188;
    }
    if (v54)
    {
      uint64_t v60 = v292;
      swift_retain();
      sub_1002D3C58(0LL, v54, 1LL, v324, v60);
      uint64_t v61 = v60;
      uint64_t v62 = 3LL;
    }

    else
    {
      uint64_t v61 = v292;
      uint64_t v62 = 2LL;
    }

    swift_release_n(v61, v62);
    return swift_release();
  }

  if (v54 >= 0) {
    uint64_t v56 = v54;
  }
  else {
    uint64_t v56 = v54 + 1;
  }
  if (v54 < -1) {
    goto LABEL_196;
  }
  Swift::Int v274 = v55;
  if (v54 < 2)
  {
    uint64_t v291 = (char *)&_swiftEmptyArrayStorage[4];
    uint64_t v273 = _swiftEmptyArrayStorage;
    if (v54 != 1)
    {
      unint64_t v196 = _swiftEmptyArrayStorage[2];
      uint64_t v64 = (char *)_swiftEmptyArrayStorage;
LABEL_152:
      uint64_t v331 = v3;
      if (v196 >= 2)
      {
        uint64_t v256 = (uint64_t *)*v324;
        uint64_t v324 = (uint64_t *)*v324;
        uint64_t v257 = v292;
        do
        {
          unint64_t v258 = v196 - 2;
          if (v196 < 2) {
            goto LABEL_182;
          }
          if (!v256) {
            goto LABEL_195;
          }
          unint64_t v259 = v64;
          uint64_t v260 = *(void *)&v64[16 * v258 + 32];
          uint64_t v261 = *(void *)&v64[16 * v196 + 24];
          uint64_t v262 = (char *)&v256[5 * v260];
          uint64_t v263 = (char *)&v256[5 * *(void *)&v64[16 * v196 + 16]];
          unint64_t v264 = (unint64_t)&v256[5 * v261];
          swift_retain();
          unint64_t v265 = v262;
          uint64_t v266 = v331;
          sub_1002B7EC8(v265, v263, v264, v291, v257);
          uint64_t v331 = v266;
          if (v266)
          {
            swift_bridgeObjectRelease();
            goto LABEL_166;
          }

          if (v261 < v260) {
            goto LABEL_184;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v259) & 1) == 0) {
            unint64_t v259 = sub_1003CBA90((uint64_t)v259);
          }
          if (v258 >= *((void *)v259 + 2)) {
            goto LABEL_185;
          }
          uint64_t v267 = &v259[16 * v258 + 32];
          *(void *)uint64_t v267 = v260;
          *((void *)v267 + 1) = v261;
          unint64_t v268 = *((void *)v259 + 2);
          if (v196 > v268) {
            goto LABEL_186;
          }
          memmove(&v259[16 * v196 + 16], &v259[16 * v196 + 32], 16 * (v268 - v196));
          uint64_t v64 = v259;
          *((void *)v259 + 2) = v268 - 1;
          unint64_t v196 = v268 - 1;
          uint64_t v256 = v324;
        }

        while (v268 > 2);
      }

      swift_bridgeObjectRelease();
      v273[2] = 0LL;
      swift_release_n(v292, 2LL);
      swift_bridgeObjectRelease();
      return swift_release();
    }
  }

  else
  {
    uint64_t v57 = v56 >> 1;
    uint64_t v58 = sub_100004AEC(&qword_1009B0530);
    uint64_t v59 = static Array._allocateBufferUninitialized(minimumCapacity:)(v57, v58);
    *(void *)(v59 + swift_weakDestroy(v0 + 16) = v57;
    uint64_t v273 = (void *)v59;
    uint64_t v291 = (char *)(v59 + 32);
  }

  Swift::Int v63 = 0LL;
  uint64_t v64 = (char *)_swiftEmptyArrayStorage;
  unint64_t v319 = (unint64_t)"Unable to derive commandKey!: ";
  uint64_t v283 = (void *)0x800000010085B900LL;
  uint64_t v303 = v10;
  uint64_t v295 = v17;
  uint64_t v305 = v46;
  while (1)
  {
    uint64_t v293 = v64;
    uint64_t v65 = v63;
    Swift::Int v66 = v63 + 1;
    Swift::Int v289 = v63;
    if (v63 + 1 >= v54)
    {
      uint64_t v124 = v292;
      goto LABEL_55;
    }

    uint64_t v67 = *v324;
    Swift::Int v68 = v63;
    sub_100013044(*v324 + 40 * v66, (uint64_t)&v328);
    uint64_t v308 = v67;
    sub_100013044(v67 + 40 * v68, (uint64_t)&v325);
    LODWORD(v317) = sub_1002AAA24(&v328, &v325, v292);
    if (v3)
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v325);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v328);
      swift_bridgeObjectRelease();
LABEL_166:
      uint64_t v254 = v273;
LABEL_147:
      v254[2] = 0LL;
      swift_release_n(v292, 2LL);
      swift_bridgeObjectRelease();
      return swift_release();
    }

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v325);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v328);
    Swift::Int v66 = v68 + 2;
    uint64_t v65 = v68;
    if (v68 + 2 < v54) {
      break;
    }
    uint64_t v124 = v292;
    if ((v317 & 1) != 0) {
      goto LABEL_46;
    }
LABEL_55:
    if (v66 < v54)
    {
      if (__OFSUB__(v66, v65)) {
        goto LABEL_187;
      }
      if (v66 - v65 < v274)
      {
        if (__OFADD__(v65, v274)) {
          goto LABEL_189;
        }
        if (v65 + v274 >= v54) {
          uint64_t v135 = (void (*)(char *, uint64_t, uint64_t))v54;
        }
        else {
          uint64_t v135 = (void (*)(char *, uint64_t, uint64_t))(v65 + v274);
        }
        if ((uint64_t)v135 < v65)
        {
LABEL_190:
          __break(1u);
          goto LABEL_191;
        }

        if ((void (*)(char *, uint64_t, uint64_t))v66 != v135)
        {
          v318 = *(char **)(v124 + 256);
          uint64_t v136 = 40 * v66 - 40;
          uint64_t v282 = v135;
          do
          {
            uint64_t v288 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v136;
            uint64_t v139 = (char *)v136;
            Swift::Int v304 = v66;
            while (1)
            {
              uint64_t v308 = v65;
              uint64_t v140 = *v324;
              v307 = v139;
              uint64_t v141 = (uint64_t)&v139[v140];
              sub_100013044((uint64_t)&v139[v140 + 40], (uint64_t)&v328);
              sub_100013044(v141, (uint64_t)&v325);
              uint64_t v142 = v329;
              uint64_t v143 = v330;
              sub_100012ED8(&v328, v329);
              uint64_t v144 = v320;
              (*(void (**)(uint64_t))(*(void *)(*(void *)(v143 + 8) + 8LL) + 32LL))(v142);
              v145._object = (void *)(v319 | 0x8000000000000000LL);
              v145._countAndFlagsBits = 0xD000000000000015LL;
              prohibitAsyncContext(functionName:)(v145);
              __chkstk_darwin(v146);
              uint64_t v270 = v147;
              uint64_t v271 = v144;
              OS_dispatch_queue.sync<A>(execute:)(sub_1002D63DC, &v269, v322);
              uint64_t v148 = sub_100004AEC(&qword_10099E380);
              v316 = *(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v148 - 8) + 48LL);
              int v149 = v316(v10, 1LL, v148);
              uint64_t v331 = v3;
              uint64_t v317 = v148;
              if (v149 == 1)
              {
                sub_100015794((uint64_t)v10, &qword_10099E378);
                uint64_t v150 = sub_100004AEC(&qword_1009A7D40);
                uint64_t v151 = v301;
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v150 - 8) + 56LL))( v301,  1LL,  1LL,  v150);
              }

              else
              {
                char v152 = v10[*(int *)(v148 + 48)];
                uint64_t v153 = sub_100004AEC(&qword_1009A7D40);
                uint64_t v154 = *(int *)(v153 + 48);
                uint64_t v151 = v301;
                sub_10002218C((uint64_t)v10, v301, type metadata accessor for BeaconStatus);
                *(_BYTE *)(v151 + v154) = v152;
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v153 - 8) + 56LL))( v151,  0LL,  1LL,  v153);
              }

              uint64_t v155 = (uint64_t)v300;
              uint64_t v156 = sub_100004AEC(&qword_1009A7D40);
              uint64_t v314 = *(void *)(v156 - 8);
              uint64_t v315 = *(void *)(v314 + 48);
              BOOL v92 = ((unsigned int (*)(uint64_t, uint64_t, uint64_t))v315)(v151, 1LL, v156) == 1;
              uint64_t v157 = v299;
              if (v92)
              {
                sub_100015794(v151, &qword_1009A7D38);
                uint64_t v158 = type metadata accessor for BeaconStatus(0LL);
                (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v158 - 8) + 56LL))( v155,  1LL,  1LL,  v158);
              }

              else
              {
                sub_10002218C(v151, v155, type metadata accessor for BeaconStatus);
                uint64_t v158 = type metadata accessor for BeaconStatus(0LL);
                (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v158 - 8) + 56LL))( v155,  0LL,  1LL,  v158);
              }

              uint64_t v159 = *(void (**)(char *, uint64_t))(v302 + 8);
              v159(v320, v321);
              type metadata accessor for BeaconStatus(0LL);
              uint64_t v160 = *(void *)(v158 - 8);
              uint64_t v161 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v160 + 48);
              int v162 = v161(v155, 1LL, v158);
              uint64_t v163 = v323;
              if (v162 == 1)
              {
                sub_100015794(v155, (uint64_t *)&unk_1009AE450);
                (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v163 + 56))(v157, 1LL, 1LL, v46);
LABEL_66:
                uint64_t v137 = (uint64_t)v157;
                uint64_t v3 = v331;
                uint64_t v10 = v303;
                goto LABEL_67;
              }

              uint64_t v164 = v155 + *(int *)(v158 + 24);
              id v311 = *(void (**)(char *, uint64_t, uint64_t))(v323 + 16);
              v311(v157, v164, v46);
              sub_100018C68(v155, type metadata accessor for BeaconStatus);
              uint64_t v165 = *(void (**)(char *, uint64_t))(v163 + 56);
              ((void (*)(char *, void, uint64_t, uint64_t))v165)(v157, 0LL, 1LL, v46);
              __int128 v310 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v163 + 48);
              if (v310(v157, 1LL, v46) == 1) {
                goto LABEL_66;
              }
              uint64_t v309 = v165;
              uint64_t v306 = *(void (**)(char *, char *, uint64_t))(v163 + 32);
              v306(v312, v157, v46);
              uint64_t v166 = v326;
              uint64_t v167 = v327;
              sub_100012ED8(&v325, v326);
              uint64_t v168 = v313;
              (*(void (**)(uint64_t))(*(void *)(*(void *)(v167 + 8) + 8LL) + 32LL))(v166);
              v169._object = (void *)(v319 | 0x8000000000000000LL);
              v169._countAndFlagsBits = 0xD000000000000015LL;
              prohibitAsyncContext(functionName:)(v169);
              __chkstk_darwin(v170);
              uint64_t v270 = v171;
              uint64_t v271 = v168;
              uint64_t v172 = (uint64_t)v298;
              uint64_t v173 = v331;
              OS_dispatch_queue.sync<A>(execute:)(sub_1002DDFC0, &v269, v322);
              uint64_t v331 = v173;
              uint64_t v174 = v317;
              if (v316((char *)v172, 1LL, v317) == 1)
              {
                sub_100015794(v172, &qword_10099E378);
                uint64_t v175 = 1LL;
                uint64_t v176 = (uint64_t)v295;
              }

              else
              {
                uint64_t v177 = v172;
                char v178 = *(_BYTE *)(v172 + *(int *)(v174 + 48));
                uint64_t v179 = *(int *)(v156 + 48);
                uint64_t v176 = (uint64_t)v295;
                sub_10002218C(v177, (uint64_t)v295, type metadata accessor for BeaconStatus);
                uint64_t v175 = 0LL;
                *(_BYTE *)(v176 + v179) = v178;
              }

              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v314 + 56))(v176, v175, 1LL, v156);
              BOOL v92 = ((unsigned int (*)(uint64_t, uint64_t, uint64_t))v315)(v176, 1LL, v156) == 1;
              uint64_t v180 = v323;
              if (v92)
              {
                sub_100015794(v176, &qword_1009A7D38);
                uint64_t v182 = 1LL;
                uint64_t v181 = v297;
              }

              else
              {
                uint64_t v181 = v297;
                sub_10002218C(v176, v297, type metadata accessor for BeaconStatus);
                uint64_t v182 = 0LL;
              }

              (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v160 + 56))(v181, v182, 1LL, v158);
              v159(v313, v321);
              int v183 = v161(v181, 1LL, v158);
              uint64_t v46 = v305;
              if (v183 == 1) {
                break;
              }
              uint64_t v184 = v296;
              v311(v296, v181 + *(int *)(v158 + 24), v305);
              sub_100018C68(v181, type metadata accessor for BeaconStatus);
              ((void (*)(char *, void, uint64_t, uint64_t))v309)(v184, 0LL, 1LL, v46);
              unsigned int v185 = v310(v184, 1LL, v46);
              uint64_t v3 = v331;
              uint64_t v10 = v303;
              if (v185 == 1) {
                goto LABEL_92;
              }
              char v186 = v294;
              v306(v294, v184, v46);
              uint64_t v187 = v312;
              char v188 = static Date.> infix(_:_:)(v312, v186);
              uint64_t v189 = *(void (**)(char *, uint64_t))(v180 + 8);
              v189(v186, v46);
              v189(v187, v46);
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v325);
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v328);
              if ((v188 & 1) == 0) {
                goto LABEL_68;
              }
              uint64_t v190 = *v324;
              if (!*v324) {
                goto LABEL_192;
              }
              char v191 = v307;
              uint64_t v192 = (uint64_t)&v307[v190];
              sub_100012EC0((__int128 *)&v307[v190 + 40], (uint64_t)&v328);
              __int128 v193 = *(_OWORD *)(v192 + 16);
              *(_OWORD *)(v192 + sub_10016CF88(v0 + 40) = *(_OWORD *)v192;
              *(_OWORD *)(v192 + 56) = v193;
              *(void *)(v192 + 72) = *(void *)(v192 + 32);
              sub_100012EC0(&v328, v192);
              uint64_t v139 = v191 - 40;
              uint64_t v65 = v308 + 1;
              Swift::Int v138 = v304;
              if (v304 == v308 + 1) {
                goto LABEL_69;
              }
            }

            sub_100015794(v181, (uint64_t *)&unk_1009AE450);
            uint64_t v184 = v296;
            ((void (*)(char *, uint64_t, uint64_t, uint64_t))v309)(v296, 1LL, 1LL, v46);
            uint64_t v3 = v331;
            uint64_t v10 = v303;
LABEL_92:
            (*(void (**)(char *, uint64_t))(v180 + 8))(v312, v46);
            uint64_t v137 = (uint64_t)v184;
LABEL_67:
            sub_100015794(v137, (uint64_t *)&unk_10099D720);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v325);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v328);
LABEL_68:
            Swift::Int v138 = v304;
LABEL_69:
            Swift::Int v66 = v138 + 1;
            uint64_t v136 = (uint64_t)v288 + 40;
            uint64_t v65 = v289;
          }

          while ((void (*)(char *, uint64_t, uint64_t))v66 != v282);
          Swift::Int v66 = (Swift::Int)v282;
        }
      }
    }

    if (v66 < v65) {
      goto LABEL_183;
    }
    Swift::Int v304 = v66;
    if ((swift_isUniquelyReferenced_nonNull_native(v293) & 1) != 0) {
      uint64_t v64 = v293;
    }
    else {
      uint64_t v64 = sub_1003CB1DC(0LL, *((void *)v293 + 2) + 1LL, 1, v293);
    }
    unint64_t v195 = *((void *)v64 + 2);
    unint64_t v194 = *((void *)v64 + 3);
    unint64_t v196 = v195 + 1;
    if (v195 >= v194 >> 1) {
      uint64_t v64 = sub_1003CB1DC((char *)(v194 > 1), v195 + 1, 1, v64);
    }
    *((void *)v64 + 2) = v196;
    uint64_t v197 = v64 + 32;
    uint64_t v198 = &v64[16 * v195 + 32];
    Swift::Int v199 = v304;
    *(void *)uint64_t v198 = v289;
    *((void *)v198 + 1) = v199;
    if (v195)
    {
      uint64_t v293 = v64;
      while (1)
      {
        unint64_t v200 = v196 - 1;
        if (v196 >= 4)
        {
          uint64_t v205 = &v197[16 * v196];
          uint64_t v206 = *((void *)v205 - 8);
          uint64_t v207 = *((void *)v205 - 7);
          BOOL v211 = __OFSUB__(v207, v206);
          uint64_t v208 = v207 - v206;
          if (v211) {
            goto LABEL_171;
          }
          uint64_t v210 = *((void *)v205 - 6);
          uint64_t v209 = *((void *)v205 - 5);
          BOOL v211 = __OFSUB__(v209, v210);
          uint64_t v203 = v209 - v210;
          char v204 = v211;
          if (v211) {
            goto LABEL_172;
          }
          unint64_t v212 = v196 - 2;
          uint64_t v213 = &v197[16 * v196 - 32];
          uint64_t v215 = *(void *)v213;
          uint64_t v214 = *((void *)v213 + 1);
          BOOL v211 = __OFSUB__(v214, v215);
          uint64_t v216 = v214 - v215;
          if (v211) {
            goto LABEL_174;
          }
          BOOL v211 = __OFADD__(v203, v216);
          uint64_t v217 = v203 + v216;
          if (v211) {
            goto LABEL_177;
          }
          if (v217 >= v208)
          {
            uint64_t v235 = &v197[16 * v200];
            uint64_t v237 = *(void *)v235;
            uint64_t v236 = *((void *)v235 + 1);
            BOOL v211 = __OFSUB__(v236, v237);
            uint64_t v238 = v236 - v237;
            if (v211) {
              goto LABEL_181;
            }
            BOOL v228 = v203 < v238;
            goto LABEL_132;
          }
        }

        else
        {
          if (v196 != 3)
          {
            uint64_t v229 = *((void *)v64 + 4);
            uint64_t v230 = *((void *)v64 + 5);
            BOOL v211 = __OFSUB__(v230, v229);
            uint64_t v222 = v230 - v229;
            char v223 = v211;
            goto LABEL_126;
          }

          uint64_t v202 = *((void *)v64 + 4);
          uint64_t v201 = *((void *)v64 + 5);
          BOOL v211 = __OFSUB__(v201, v202);
          uint64_t v203 = v201 - v202;
          char v204 = v211;
        }

        if ((v204 & 1) != 0) {
          goto LABEL_173;
        }
        unint64_t v212 = v196 - 2;
        uint64_t v218 = &v197[16 * v196 - 32];
        uint64_t v220 = *(void *)v218;
        uint64_t v219 = *((void *)v218 + 1);
        BOOL v221 = __OFSUB__(v219, v220);
        uint64_t v222 = v219 - v220;
        char v223 = v221;
        if (v221) {
          goto LABEL_176;
        }
        uint64_t v224 = &v197[16 * v200];
        uint64_t v226 = *(void *)v224;
        uint64_t v225 = *((void *)v224 + 1);
        BOOL v211 = __OFSUB__(v225, v226);
        uint64_t v227 = v225 - v226;
        if (v211) {
          goto LABEL_179;
        }
        if (__OFADD__(v222, v227)) {
          goto LABEL_180;
        }
        if (v222 + v227 >= v203)
        {
          BOOL v228 = v203 < v227;
LABEL_132:
          if (v228) {
            unint64_t v200 = v212;
          }
          goto LABEL_134;
        }

LABEL_134:
        unint64_t v239 = v200 - 1;
        if (v200 - 1 >= v196)
        {
          __break(1u);
LABEL_168:
          __break(1u);
LABEL_169:
          __break(1u);
LABEL_170:
          __break(1u);
LABEL_171:
          __break(1u);
LABEL_172:
          __break(1u);
LABEL_173:
          __break(1u);
LABEL_174:
          __break(1u);
LABEL_175:
          __break(1u);
LABEL_176:
          __break(1u);
LABEL_177:
          __break(1u);
LABEL_178:
          __break(1u);
LABEL_179:
          __break(1u);
LABEL_180:
          __break(1u);
LABEL_181:
          __break(1u);
LABEL_182:
          __break(1u);
LABEL_183:
          __break(1u);
LABEL_184:
          __break(1u);
LABEL_185:
          __break(1u);
LABEL_186:
          __break(1u);
LABEL_187:
          __break(1u);
LABEL_188:
          __break(1u);
LABEL_189:
          __break(1u);
          goto LABEL_190;
        }

        uint64_t v240 = *v324;
        if (!*v324) {
          goto LABEL_193;
        }
        uint64_t v241 = v3;
        uint64_t v242 = &v197[16 * v239];
        uint64_t v243 = *(void *)v242;
        uint64_t v244 = v197;
        unint64_t v245 = v200;
        uint64_t v246 = &v197[16 * v200];
        uint64_t v247 = *(void *)v246;
        uint64_t v248 = *((void *)v246 + 1);
        uint64_t v331 = (char *)(v240 + 40LL * *(void *)v242);
        v318 = (char *)(v240 + 40 * v247);
        unint64_t v249 = v240 + 40 * v248;
        uint64_t v250 = v292;
        swift_retain();
        sub_1002B7EC8(v331, v318, v249, v291, v250);
        if (v241)
        {
          swift_bridgeObjectRelease();
          uint64_t v254 = v273;
          goto LABEL_147;
        }

        uint64_t v251 = v293;
        if (v248 < v243) {
          goto LABEL_168;
        }
        if (v245 > *((void *)v293 + 2)) {
          goto LABEL_169;
        }
        unint64_t v252 = v245;
        *(void *)uint64_t v242 = v243;
        *(void *)&v244[16 * v239 + 8] = v248;
        unint64_t v253 = *((void *)v251 + 2);
        if (v252 >= v253) {
          goto LABEL_170;
        }
        uint64_t v197 = v244;
        unint64_t v196 = v253 - 1;
        memmove(v246, v246 + 16, 16 * (v253 - 1 - v252));
        uint64_t v64 = v293;
        *((void *)v293 + 2) = v253 - 1;
        uint64_t v10 = v303;
        uint64_t v46 = v305;
        uint64_t v3 = 0LL;
        if (v253 <= 2) {
          goto LABEL_143;
        }
      }
    }

    unint64_t v196 = 1LL;
LABEL_143:
    Swift::Int v54 = v324[1];
    Swift::Int v63 = v304;
    if (v304 >= v54) {
      goto LABEL_152;
    }
  }

  v318 = *(char **)(v292 + 256);
  uint64_t v69 = v308 + 40 * v68 + 40;
  id v311 = (void (*)(char *, uint64_t, uint64_t))v54;
  while (1)
  {
    Swift::Int v304 = v66;
    sub_100013044(v69 + 40, (uint64_t)&v328);
    sub_100013044(v69, (uint64_t)&v325);
    uint64_t v71 = v329;
    uint64_t v70 = v330;
    sub_100012ED8(&v328, v329);
    uint64_t v72 = v290;
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v70 + 8) + 8LL) + 32LL))(v71);
    v73._countAndFlagsBits = 0xD000000000000015LL;
    v73._object = v283;
    prohibitAsyncContext(functionName:)(v73);
    __chkstk_darwin(v74);
    uint64_t v270 = v75;
    uint64_t v271 = v72;
    uint64_t v76 = (uint64_t)v287;
    OS_dispatch_queue.sync<A>(execute:)(sub_1002DDFC0, &v269, v322);
    uint64_t v77 = sub_100004AEC(&qword_10099E380);
    uint64_t v78 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 48LL);
    int v79 = v78(v76, 1LL, v77);
    uint64_t v331 = v3;
    v316 = (uint64_t (*)(char *, uint64_t, uint64_t))v78;
    if (v79 == 1)
    {
      sub_100015794(v76, &qword_10099E378);
      uint64_t v80 = sub_100004AEC(&qword_1009A7D40);
      uint64_t v81 = v286;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v80 - 8) + 56LL))(v286, 1LL, 1LL, v80);
    }

    else
    {
      char v82 = *(_BYTE *)(v76 + *(int *)(v77 + 48));
      uint64_t v83 = sub_100004AEC(&qword_1009A7D40);
      uint64_t v84 = *(int *)(v83 + 48);
      uint64_t v85 = v76;
      uint64_t v86 = v286;
      sub_10002218C(v85, v286, type metadata accessor for BeaconStatus);
      *(_BYTE *)(v86 + v84) = v82;
      uint64_t v81 = v86;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v83 - 8) + 56LL))(v86, 0LL, 1LL, v83);
    }

    uint64_t v87 = (uint64_t)v285;
    uint64_t v88 = (uint64_t)v284;
    uint64_t v89 = sub_100004AEC(&qword_1009A7D40);
    uint64_t v90 = *(void *)(v89 - 8);
    uint64_t v91 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v90 + 48);
    BOOL v92 = v91(v81, 1LL, v89) == 1;
    uint64_t v315 = v90;
    if (v92)
    {
      sub_100015794(v81, &qword_1009A7D38);
      uint64_t v93 = type metadata accessor for BeaconStatus(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v93 - 8) + 56LL))(v87, 1LL, 1LL, v93);
    }

    else
    {
      sub_10002218C(v81, v87, type metadata accessor for BeaconStatus);
      uint64_t v93 = type metadata accessor for BeaconStatus(0LL);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v93 - 8) + 56LL))(v87, 0LL, 1LL, v93);
    }

    uint64_t v94 = *(void (**)(char *, uint64_t))(v302 + 8);
    v94(v290, v321);
    type metadata accessor for BeaconStatus(0LL);
    uint64_t v95 = *(void *)(v93 - 8);
    uint64_t v314 = *(void *)(v95 + 48);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v314)(v87, 1LL, v93) == 1)
    {
      sub_100015794(v87, (uint64_t *)&unk_1009AE450);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v323 + 56))(v88, 1LL, 1LL, v305);
LABEL_26:
      sub_100015794(v88, (uint64_t *)&unk_10099D720);
      int v101 = 0;
      uint64_t v3 = v331;
      uint64_t v46 = v305;
      Swift::Int v54 = (Swift::Int)v311;
      goto LABEL_27;
    }

    uint64_t v309 = v94;
    __int128 v310 = (unsigned int (*)(char *, uint64_t, uint64_t))v91;
    uint64_t v96 = v87 + *(int *)(v93 + 24);
    uint64_t v97 = v323;
    uint64_t v98 = v305;
    v307 = *(char **)(v323 + 16);
    ((void (*)(uint64_t, uint64_t, uint64_t))v307)(v88, v96, v305);
    sub_100018C68(v87, type metadata accessor for BeaconStatus);
    uint64_t v99 = *(void (**)(char *, char *, uint64_t))(v97 + 56);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v99)(v88, 0LL, 1LL, v98);
    uint64_t v100 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v97 + 48);
    if (v100(v88, 1LL, v98) == 1) {
      goto LABEL_26;
    }
    uint64_t v288 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v100;
    uint64_t v306 = v99;
    uint64_t v282 = *(void (**)(char *, uint64_t, uint64_t))(v323 + 32);
    v282(v280, v88, v305);
    uint64_t v102 = v326;
    uint64_t v103 = v327;
    sub_100012ED8(&v325, v326);
    uint64_t v104 = v281;
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v103 + 8) + 8LL) + 32LL))(v102);
    v105._object = (void *)(v319 | 0x8000000000000000LL);
    v105._countAndFlagsBits = 0xD000000000000015LL;
    prohibitAsyncContext(functionName:)(v105);
    __chkstk_darwin(v106);
    uint64_t v270 = v107;
    uint64_t v271 = v104;
    uint64_t v108 = (uint64_t)v279;
    uint64_t v109 = v331;
    OS_dispatch_queue.sync<A>(execute:)(sub_1002DDFC0, &v269, v322);
    uint64_t v331 = v109;
    if (v316((char *)v108, 1LL, v77) == 1)
    {
      sub_100015794(v108, &qword_10099E378);
      uint64_t v110 = 1LL;
      uint64_t v111 = v278;
    }

    else
    {
      uint64_t v112 = v108;
      char v113 = *(_BYTE *)(v108 + *(int *)(v77 + 48));
      uint64_t v114 = *(int *)(v89 + 48);
      uint64_t v111 = v278;
      sub_10002218C(v112, v278, type metadata accessor for BeaconStatus);
      uint64_t v110 = 0LL;
      *(_BYTE *)(v111 + v114) = v113;
    }

    uint64_t v115 = (uint64_t)v277;
    uint64_t v116 = (uint64_t)v276;
    uint64_t v117 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))v310;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v315 + 56))(v111, v110, 1LL, v89);
    BOOL v92 = v117(v111, 1LL, v89) == 1;
    uint64_t v118 = v323;
    Swift::Int v54 = (Swift::Int)v311;
    if (v92)
    {
      sub_100015794(v111, &qword_1009A7D38);
      uint64_t v119 = 1LL;
    }

    else
    {
      sub_10002218C(v111, v115, type metadata accessor for BeaconStatus);
      uint64_t v119 = 0LL;
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 56))(v115, v119, 1LL, v93);
    v309(v281, v321);
    if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v314)(v115, 1LL, v93) == 1)
    {
      sub_100015794(v115, (uint64_t *)&unk_1009AE450);
      uint64_t v46 = v305;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v306)(v116, 1LL, 1LL, v305);
      uint64_t v3 = v331;
LABEL_39:
      (*(void (**)(char *, uint64_t))(v118 + 8))(v280, v46);
      sub_100015794(v116, (uint64_t *)&unk_10099D720);
      int v101 = 0;
      goto LABEL_27;
    }

    uint64_t v46 = v305;
    ((void (*)(uint64_t, uint64_t, uint64_t))v307)(v116, v115 + *(int *)(v93 + 24), v305);
    sub_100018C68(v115, type metadata accessor for BeaconStatus);
    ((void (*)(uint64_t, void, uint64_t, uint64_t))v306)(v116, 0LL, 1LL, v46);
    int v120 = v288(v116, 1LL, v46);
    uint64_t v3 = v331;
    if (v120 == 1) {
      goto LABEL_39;
    }
    uint64_t v121 = v275;
    v282(v275, v116, v46);
    uint64_t v122 = v280;
    int v101 = static Date.> infix(_:_:)(v280, v121);
    uint64_t v123 = *(void (**)(char *, uint64_t))(v118 + 8);
    Swift::Int v54 = (Swift::Int)v311;
    v123(v121, v46);
    v123(v122, v46);
LABEL_27:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v325);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v328);
    Swift::Int v66 = v304 + 1;
    v69 += 40LL;
    if (v54 == v304 + 1)
    {
      Swift::Int v66 = v54;
      uint64_t v124 = v292;
      uint64_t v10 = v303;
      goto LABEL_45;
    }
  }

  uint64_t v124 = v292;
  uint64_t v10 = v303;
  Swift::Int v66 = v304;
LABEL_45:
  uint64_t v65 = v289;
  if ((v317 & 1) == 0) {
    goto LABEL_55;
  }
LABEL_46:
  if (v66 >= v65)
  {
    if (v65 < v66)
    {
      id v311 = (void (*)(char *, uint64_t, uint64_t))v54;
      uint64_t v125 = v3;
      uint64_t v126 = 40 * v66 - 40;
      uint64_t v127 = 40 * v65;
      Swift::Int v128 = v66;
      Swift::Int v129 = v65;
      do
      {
        if (v129 != --v128)
        {
          if (!v308) {
            goto LABEL_194;
          }
          Swift::Int v130 = v66;
          uint64_t v131 = v308 + v127;
          uint64_t v132 = v308 + v126;
          sub_100012EC0((__int128 *)(v308 + v127), (uint64_t)&v328);
          uint64_t v133 = *(void *)(v132 + 32);
          __int128 v134 = *(_OWORD *)(v132 + 16);
          *(_OWORD *)uint64_t v131 = *(_OWORD *)v132;
          *(_OWORD *)(v131 + swift_weakDestroy(v0 + 16) = v134;
          *(void *)(v131 + 32) = v133;
          sub_100012EC0(&v328, v132);
          uint64_t v124 = v292;
          Swift::Int v66 = v130;
          uint64_t v65 = v289;
        }

        ++v129;
        v126 -= 40LL;
        v127 += 40LL;
      }

      while (v129 < v128);
      uint64_t v3 = v125;
      uint64_t v46 = v305;
      Swift::Int v54 = (Swift::Int)v311;
    }

    goto LABEL_55;
  }

uint64_t sub_1002D62D4(void **a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  swift_retain_n(a2, 2LL);
  if ((swift_isUniquelyReferenced_nonNull_native(v4) & 1) == 0) {
    uint64_t v4 = (void *)sub_1003D4A14(v4);
  }
  uint64_t v5 = v4[2];
  v7[0] = (uint64_t)(v4 + 4);
  v7[1] = v5;
  swift_retain();
  sub_1002D4744(v7, a2);
  swift_release();
  *a1 = v4;
  return swift_release_n(a2, 2LL);
}

uint64_t sub_1002D6374@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 96))(v3, v4);
  *(void *)a2 = result;
  *(_BYTE *)(a2 + 8) = v6 & 1;
  return result;
}

uint64_t sub_1002D63C4@<X0>(uint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_1002AA19C(a1, *(void **)(v2 + 16), a2);
}

uint64_t sub_1002D63DC@<X0>(uint64_t a1@<X8>)
{
  return sub_1005100F0(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1002D63F4(void *a1)
{
  return (*(uint64_t (**)(void, void))(v1 + 16))(*a1, a1[1]);
}

uint64_t sub_1002D641C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1002D6440()
{
  return (*(uint64_t (**)(void, unint64_t))(v0 + 16))(0LL, 0xF000000000000000LL);
}

uint64_t sub_1002D646C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 56LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  type metadata accessor for Date(0LL);
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = v1[5];
  uint64_t v11 = v1[6];
  uint64_t v12 = *(void *)((char *)v1 + v6);
  uint64_t v13 = (void *)swift_task_alloc(dword_1009A7D5C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = sub_100015D58;
  return sub_1002A6170(a1, v7, v8, v9, v10, v11, (uint64_t)v1 + v5, v12);
}

uint64_t sub_1002D6558()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002D65CC()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v25 = *(void *)(v2 + 64);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v27 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v23 = *(void *)(v5 + 64);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v24 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v22 = *(void *)(v7 + 64);
  swift_release();
  uint64_t v26 = (v3 + 24) & ~v3;
  uint64_t v8 = v0 + v26;
  sub_100016F9C(*(void *)v8, *(void *)(v8 + 8));
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v9(v0 + v26 + v1[5], v4);
  uint64_t v10 = v0 + v26 + v1[6];
  uint64_t v11 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v10, v11))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v9(v10, v4);
      uint64_t v28 = v3;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v9(v10, v4);
      uint64_t v28 = v3;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v28;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v12 = v8 + v1[7];
  uint64_t v29 = v4;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v13(v8 + v1[8], v6);
  sub_100016F9C(*(void *)(v8 + v1[9]), *(void *)(v8 + v1[9] + 8));
  uint64_t v14 = (uint64_t *)(v8 + v1[10]);
  unint64_t v15 = v14[1];
  if (v15 >> 60 != 15) {
    sub_100016F9C(*v14, v15);
  }
  uint64_t v16 = (void (*)(unint64_t, uint64_t))v9;
  uint64_t v17 = (uint64_t *)(v8 + v1[11]);
  unint64_t v18 = v17[1];
  if (v18 >> 60 != 15) {
    sub_100016F9C(*v17, v18);
  }
  unint64_t v19 = (((v25 + v26 + 7) & 0xFFFFFFFFFFFFFFF8LL) + v27 + 8) & ~v27;
  unint64_t v20 = (v19 + v23 + v24) & ~v24;
  sub_100016F9C(*(void *)(v8 + v1[12]), *(void *)(v8 + v1[12] + 8));
  sub_100016F9C(*(void *)(v8 + v1[13]), *(void *)(v8 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16(v0 + v19, v29);
  v13(v0 + v20, v6);
  swift_release();
  return swift_deallocObject(v0, ((v22 + v20 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | v27 | v24 | 7);
}

uint64_t sub_1002D6908()
{
  uint64_t v1 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for Date(0LL) - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (uint64_t *)(v0 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  return sub_1002A76A0(*(void *)(v0 + 16), v0 + v2, *(void *)(v0 + v3), v0 + v5, v0 + v8, *v9, v9[1]);
}

uint64_t sub_1002D69C0(uint64_t a1)
{
  return sub_1001B3160(a1);
}

uint64_t sub_1002D69D4()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v25 = *(void *)(v2 + 64);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v27 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v23 = *(void *)(v5 + 64);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v24 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v22 = *(void *)(v7 + 64);
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  uint64_t v26 = (v3 + 32) & ~v3;
  uint64_t v8 = v0 + v26;
  sub_100016F9C(*(void *)v8, *(void *)(v8 + 8));
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v9(v0 + v26 + v1[5], v4);
  uint64_t v10 = v0 + v26 + v1[6];
  uint64_t v11 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v10, v11))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v9(v10, v4);
      uint64_t v28 = v3;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v9(v10, v4);
      uint64_t v28 = v3;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v28;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v12 = v8 + v1[7];
  uint64_t v29 = v4;
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v13(v8 + v1[8], v6);
  sub_100016F9C(*(void *)(v8 + v1[9]), *(void *)(v8 + v1[9] + 8));
  uint64_t v14 = (uint64_t *)(v8 + v1[10]);
  unint64_t v15 = v14[1];
  if (v15 >> 60 != 15) {
    sub_100016F9C(*v14, v15);
  }
  uint64_t v16 = v9;
  uint64_t v17 = (uint64_t *)(v8 + v1[11]);
  unint64_t v18 = v17[1];
  if (v18 >> 60 != 15) {
    sub_100016F9C(*v17, v18);
  }
  uint64_t v19 = (v26 + v25 + v27) & ~v27;
  unint64_t v20 = (((v23 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL) + v24 + 8) & ~v24;
  sub_100016F9C(*(void *)(v8 + v1[12]), *(void *)(v8 + v1[12] + 8));
  sub_100016F9C(*(void *)(v8 + v1[13]), *(void *)(v8 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v16(v0 + v19, v29);
  v13(v0 + v20, v6);
  swift_release();
  return swift_deallocObject(v0, ((v22 + v20 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | v27 | v24 | 7);
}

uint64_t sub_1002D6D10(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v10 = *(void *)(type metadata accessor for Date(0LL) - 8);
  unint64_t v11 = (v9 + *(unsigned __int8 *)(v10 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = *(void *)(v1 + 16);
  uint64_t v13 = *(void *)(v1 + 24);
  uint64_t v14 = v1 + v5;
  uint64_t v15 = v1 + v8;
  uint64_t v16 = *(void *)(v1 + v9);
  uint64_t v17 = v1 + v11;
  uint64_t v18 = *(void *)(v1 + ((*(void *)(v10 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v19 = (void *)swift_task_alloc(dword_1009A7D6C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v19;
  *uint64_t v19 = v2;
  v19[1] = sub_100015D58;
  return sub_1002A7C90(a1, v12, v13, v14, v15, v16, v17, v18);
}

uint64_t sub_1002D6E30()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v28 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v3 = (v28 + 24) & ~v28;
  uint64_t v4 = *(void *)(v2 + 64);
  unint64_t v5 = (int *)type metadata accessor for ShareRecord(0LL);
  uint64_t v6 = *((void *)v5 - 1);
  uint64_t v31 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v27 = *(void *)(v6 + 64);
  swift_release();
  uint64_t v7 = v0 + v3;
  sub_100016F9C(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  uint64_t v8 = v0 + v3 + v1[5];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  unint64_t v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v11(v8, v9);
  uint64_t v12 = v0 + v3 + v1[6];
  uint64_t v13 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v12, v13))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v11(v12, v9);
      uint64_t v29 = v4;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v11(v12, v9);
      uint64_t v29 = v4;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v4 = v29;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v30 = v0;
  uint64_t v14 = v7 + v1[7];
  uint64_t v15 = v3 + v4 + v31;
  uint64_t v16 = v7 + v1[8];
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v18 + 8);
  v19(v16, v17);
  sub_100016F9C(*(void *)(v7 + v1[9]), *(void *)(v7 + v1[9] + 8));
  unint64_t v20 = (uint64_t *)(v7 + v1[10]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15) {
    sub_100016F9C(*v20, v21);
  }
  uint64_t v22 = v15 & ~v31;
  uint64_t v23 = (uint64_t *)(v7 + v1[11]);
  unint64_t v24 = v23[1];
  if (v24 >> 60 != 15) {
    sub_100016F9C(*v23, v24);
  }
  sub_100016F9C(*(void *)(v7 + v1[12]), *(void *)(v7 + v1[12] + 8));
  sub_100016F9C(*(void *)(v7 + v1[13]), *(void *)(v7 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  sub_100016F9C(*(void *)(v30 + v22), *(void *)(v30 + v22 + 8));
  v11(v30 + v22 + v5[5], v9);
  v11(v30 + v22 + v5[6], v9);
  v19(v30 + v22 + v5[7], v17);
  uint64_t v25 = v30 + v22 + v5[8];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v30, v22 + v27, v28 | v31 | 7);
}

uint64_t sub_1002D71AC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(type metadata accessor for ShareRecord(0LL) - 8) + 80LL);
  return sub_1002A8168(a1, *(void *)(v1 + 16), v1 + v4, v1 + ((v4 + v5 + v6) & ~v6));
}

Swift::Int sub_1002D7218(uint64_t a1)
{
  return sub_1002A4A08(a1, *(void (**)(void *))(v1 + 16));
}

uint64_t sub_1002D7220()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_1002D7254()
{
  return sub_1002997B4( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(_BYTE *)(v0 + 32),  *(unsigned __int8 *)(v0 + 33),  *(void *)(v0 + 40),  *(_DWORD *)(v0 + 48),  *(void (**)(uint64_t))(v0 + 56));
}

BOOL sub_1002D7270(uint64_t a1)
{
  return sub_10047DAAC(a1, *(void *)(v1 + 16));
}

uint64_t sub_1002D728C@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocating);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_1002D72B4()
{
  return sub_1002DBF0C(96LL);
}

uint64_t sub_1002D72BC()
{
  return sub_1002DBF44((uint64_t)sub_1002D732C);
}

uint64_t sub_1002D72C8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1002D72D8()
{
  return sub_1002DBF0C(96LL);
}

uint64_t sub_1002D72E0()
{
  return sub_1002DBF44((uint64_t)sub_1002D7314);
}

uint64_t sub_1002D72EC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1002D72FC@<X0>(void *a1@<X8>)
{
  return sub_10037A124(*(void **)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1002D7314@<X0>(unint64_t a1@<X8>)
{
  return sub_10059F7F0(v1, a1);
}

uint64_t sub_1002D732C@<X0>(unint64_t a1@<X8>)
{
  return sub_10059FF08(v1, a1);
}

uint64_t sub_1002D7344()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  unint64_t v4 = (void *)swift_task_alloc(dword_1009A7DA4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  *unint64_t v4 = v1;
  v4[1] = sub_100015D58;
  void v4[3] = v3;
  v4[2] = v2;
  return swift_task_switch(sub_100292F38, 0LL, 0LL);
}

uint64_t sub_1002D73AC()
{
  return sub_1002DBF0C(96LL);
}

uint64_t sub_1002D73B4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1002D73C4()
{
  return sub_1002DBF0C(96LL);
}

uint64_t sub_1002D73CC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1002D73DC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002D7400()
{
  uint64_t v1 = type metadata accessor for DateInterval(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));
  swift_bridgeObjectRelease(*(void *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

void sub_1002D749C()
{
  uint64_t v1 = *(void *)(type metadata accessor for DateInterval(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  sub_10029CA48( *(void *)(v0 + 16),  *(void *)(v0 + 24),  v0 + v2,  *(void (**)(uint64_t))v3,  *(void *)(v3 + 8));
}

uint64_t sub_1002D74E4()
{
  return sub_1002DD750( (void (*)(void))&_swift_release,  (void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_1002D74F8()
{
}

uint64_t sub_1002D7504()
{
  return sub_1002DD5A0(48LL);
}

uint64_t sub_1002D750C()
{
  return sub_10029A378( *(void *)(v0 + 16),  *(uint64_t (**)(void *))(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40));
}

uint64_t sub_1002D7518()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002D753C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc(dword_1009A7DCC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100015D58;
  v3[2] = v2;
  return swift_task_switch(sub_10029A810, 0LL, 0LL);
}

uint64_t sub_1002D759C()
{
  return sub_10020F99C((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1002D75A8()
{
  return sub_1002DD750((void (*)(void))&_swift_release, (void (*)(void))&_swift_release);
}

uint64_t sub_1002D75B8()
{
  return sub_10029A12C( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void (**)(__n128))(v0 + 32),  *(void *)(v0 + 40));
}

uint64_t sub_1002D75C4()
{
  return sub_10020F99C((void (*)(void))&_swift_release);
}

uint64_t sub_1002D75D0()
{
  return (*(uint64_t (**)(BOOL))(v0 + 16))(*(void *)(*(void *)(v0 + 32) + 32LL) != 0LL);
}

uint64_t sub_1002D7604()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  swift_release(*(void *)(v0 + v7));
  swift_release(*(void *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 17, v5);
}

void sub_1002D76AC()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1002AD310( v0 + v2,  *(void *)(v0 + v3),  *(void *)(v0 + v4),  *(void *)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void (**)(void))(v0 + ((((v4 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((((v4 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(unsigned __int8 *)(v0 + ((((v4 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 16));
}

uint64_t sub_1002D7718()
{
  return sub_1002DD5A0(40LL);
}

uint64_t sub_1002D7720()
{
  return (*(uint64_t (**)(void))(v0 + 24))();
}

uint64_t sub_1002D7740()
{
  return sub_1002DD5A0(40LL);
}

uint64_t sub_1002D7748()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002D776C()
{
  swift_release(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_1002D77A8(uint64_t a1)
{
}

uint64_t sub_1002D77B4()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v15 = v3 | v8 | 7;
  unint64_t v10 = (((*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release();
  swift_bridgeObjectRelease();

  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  unint64_t v11 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v11(v0 + v4 + *(int *)(v1 + 24), v6);
  uint64_t v12 = v0 + v4 + *(int *)(v1 + 28);
  uint64_t v13 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(v12, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v11(v0 + v9, v6);
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v10 + 8, v15);
}

uint64_t sub_1002D78FC()
{
  uint64_t v1 = *(void *)(type metadata accessor for OwnedBeaconGroup(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_1002B088C( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(dispatch_group_s **)(v0 + 32),  v0 + v2,  v0 + v5,  *(void *)(v0 + v6),  *(void *)(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1002D7988()
{
  return sub_1002B1E88( *(void *)(v0 + 16),  *(void (**)(uint64_t))(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  (uint64_t)sub_100021ABC);
}

uint64_t sub_1002D79AC()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;

  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + *(int *)(v1 + 24);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  uint64_t v10 = v7 + *(int *)(v1 + 28);
  uint64_t v11 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_1002D7A9C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconGroup(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_1002B0B80( a1,  *(dispatch_group_s **)(v1 + 16),  v1 + v4,  *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1002D7AF0()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);

  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8, v3 | 7);
}

void sub_1002D7DB4(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1002B1294( a1,  *(dispatch_group_s **)(v1 + 16),  v1 + v4,  *(void *)(v1 + v5),  *(void *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1002D7E18()
{
  return sub_1002B1AB4( *(void *)(v0 + 16),  *(void (**)(void *))(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40));
}

uint64_t sub_1002D7E24(unint64_t a1)
{
  if (a1 < 4) {
    return (a1 + 32);
  }
  uint64_t v3 = static os_log_type_t.error.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  uint64_t v4 = qword_100A2B008;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v6 = swift_allocObject(v5, 72LL, 7LL);
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(v6 + 56) = &type metadata for Int;
  *(void *)(v6 + 64) = &protocol witness table for Int;
  *(void *)(v6 + 32) = a1;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "unsupported beaconObservationType, %d", v7);
  swift_bridgeObjectRelease();
  return 32LL;
}

uint64_t sub_1002D7F04(uint64_t a1, uint64_t a2, uint64_t (**a3)(void, void))
{
  uint64_t v148 = a3;
  uint64_t v149 = a2;
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v147 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v155 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v154 = *(void *)(v155 - 8);
  uint64_t v7 = __chkstk_darwin(v155);
  uint64_t v153 = (uint64_t)&v147 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v152 = (uint64_t)&v147 - v9;
  uint64_t v163 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v162 = *(void *)(v163 - 8);
  __chkstk_darwin(v163);
  uint64_t v161 = (char *)&v147 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v179 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v147 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (uint64_t (*)(uint64_t))((char *)&v147 - v15);
  uint64_t v181 = type metadata accessor for UUID(0LL);
  uint64_t v173 = *(void *)(v181 - 8);
  __chkstk_darwin(v181);
  uint64_t v180 = (uint64_t (*)(uint64_t))((char *)&v147 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if ((unint64_t)a1 >> 62)
  {
LABEL_54:
    if (a1 < 0) {
      uint64_t v143 = a1;
    }
    else {
      uint64_t v143 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v18 = _CocoaArrayWrapper.endIndex.getter(v143);
    if (v18) {
      goto LABEL_3;
    }
LABEL_58:
    swift_bridgeObjectRelease();
    return v148[2](v148, 0LL);
  }

  uint64_t v18 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  __n128 v19 = swift_bridgeObjectRetain(a1);
  if (!v18) {
    goto LABEL_58;
  }
LABEL_3:
  uint64_t v170 = 0LL;
  unint64_t v168 = a1 & 0xC000000000000001LL;
  uint64_t v171 = *(void *)(v149 + 256);
  uint64_t v172 = v183;
  uint64_t v150 = v6;
  uint64_t v20 = 4LL;
  v19.n128_u64[0] = 141560067LL;
  __n128 v157 = v19;
  uint64_t v156 = (char *)&type metadata for Any + 8;
  v19.n128_u64[0] = 141558275LL;
  __n128 v151 = v19;
  __int128 v160 = xmmword_1007E67D0;
  uint64_t v159 = (char *)&type metadata for () + 8;
  uint64_t v169 = a1;
  uint64_t v174 = v11;
  uint64_t v165 = v14;
  uint64_t v164 = (uint64_t (*)(uint64_t))v18;
  uint64_t v158 = v16;
  while (1)
  {
    uint64_t v6 = (char *)(v20 - 4);
    if (v168) {
      id v38 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v20 - 4, a1);
    }
    else {
      id v38 = *(id *)(a1 + 8 * v20);
    }
    uint64_t v39 = v38;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_54;
    }

    uint64_t v177 = v20 - 3;
    uint64_t v178 = v20;
    if (qword_10099B4D8 != -1) {
      swift_once(&qword_10099B4D8, sub_1004AB71C);
    }
    uint64_t v40 = type metadata accessor for Logger(0LL);
    uint64_t v41 = sub_10000A720(v40, (uint64_t)qword_100A2AB18);
    id v42 = v39;
    uint64_t v176 = v41;
    uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
    int v44 = static os_log_type_t.default.getter(v43);
    if (os_log_type_enabled(v43, (os_log_type_t)v44))
    {
      LODWORD(v167) = v44;
      os_log_t v175 = v43;
      uint64_t v45 = swift_slowAlloc(92LL, -1LL);
      uint64_t v46 = swift_slowAlloc(160LL, -1LL);
      uint64_t v166 = v46;
      *(_DWORD *)uint64_t v45 = v157.n128_u32[0];
      uint64_t v182 = 1752392040LL;
      v183[0] = v46;
      uint64_t v47 = v172;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v172, v45 + 4, v45 + 12);
      *(_WORD *)(v45 + 12) = 2081;
      id v48 = [v42 beaconIdentifier];
      uint64_t v49 = v180;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v48);

      uint64_t v50 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v51 = v181;
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter(v181, v50);
      unint64_t v54 = v53;
      (*(void (**)(uint64_t (*)(uint64_t), uint64_t))(v173 + 8))(v49, v51);
      uint64_t v182 = sub_1003F11D4(v52, v54, v183);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v47, v45 + 14, v45 + 22);

      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 22) = 2082;
      unint64_t v55 = SPBeaconObservationType.description.getter((uint64_t)[v42 type]);
      uint64_t v182 = sub_1003F11D4(v55, v56, v183);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v47, v45 + 24, v45 + 32);

      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 32) = 2082;
      id v57 = [v42 date];
      uint64_t v58 = v158;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v57);

      uint64_t v59 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter(v11, v59);
      unint64_t v62 = v61;
      Swift::Int v63 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))(v179 + 8);
      v63(v58, v11);
      uint64_t v182 = sub_1003F11D4(v60, v62, v183);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v47, v45 + 34, v45 + 42);

      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 42) = 2082;
      id v64 = [v42 location];

      if (v64) {
        uint64_t v65 = 7562617LL;
      }
      else {
        uint64_t v65 = 28526LL;
      }
      if (v64) {
        unint64_t v66 = 0xE300000000000000LL;
      }
      else {
        unint64_t v66 = 0xE200000000000000LL;
      }
      uint64_t v182 = sub_1003F11D4(v65, v66, v183);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v47, v45 + 44, v45 + 52);

      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 52) = 2082;
      id v67 = [v42 location];
      if (v67)
      {
        Swift::Int v68 = v67;
        id v69 = [v67 timestamp];

        static Date._unconditionallyBridgeFromObjectiveC(_:)(v69);
        uint64_t v71 = Date.debugDescription.getter(v70);
        unint64_t v73 = v72;
        v63(v58, v11);
      }

      else
      {
        uint64_t v71 = 0LL;
        unint64_t v73 = 0xE000000000000000LL;
      }

      uint64_t v182 = sub_1003F11D4(v71, v73, v183);
      uint64_t v76 = v172;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v172, v45 + 54, v45 + 62);

      swift_bridgeObjectRelease();
      *(_WORD *)(v45 + 62) = 2049;
      id v77 = [v42 location];
      double v78 = -1.0;
      double v79 = -1.0;
      uint64_t v75 = &selRef_initWithCoder_;
      if (v77)
      {
        uint64_t v80 = v77;
        [v77 latitude];
        double v79 = v81;
      }

      uint64_t v182 = *(void *)&v79;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v76, v45 + 64, v45 + 72);

      *(_WORD *)(v45 + 72) = 2049;
      id v82 = [v42 location];
      a1 = v169;
      uint64_t v74 = (uint64_t)v164;
      if (v82)
      {
        uint64_t v83 = v82;
        [v82 longitude];
        double v78 = v84;
      }

      uint64_t v182 = *(void *)&v78;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v76, v45 + 74, v45 + 82);

      *(_WORD *)(v45 + 82) = 2050;
      id v85 = [v42 location];
      if (v85)
      {
        uint64_t v86 = v85;
        [v85 horizontalAccuracy];
        double v88 = v87;
      }

      else
      {
        double v88 = -1.0;
      }

      uint64_t v182 = *(void *)&v88;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v76, v45 + 84, v45 + 92);

      os_log_t v89 = v175;
      _os_log_impl( (void *)&_mh_execute_header,  v175,  (os_log_type_t)v167,  "Updating Beacon %{private,mask.hash}s observation type: %{public}s, date: %{public}s. With location: %{public}s, timestamp: %{public}s, lat: %{private}f, lon: %{private}f, acc: %{public}f.",  (uint8_t *)v45,  0x5Cu);
      uint64_t v90 = v166;
      swift_arrayDestroy(v166, 5LL, v156);
      swift_slowDealloc(v90, -1LL, -1LL);
      swift_slowDealloc(v45, -1LL, -1LL);

      uint64_t v14 = v165;
    }

    else
    {
      uint64_t v74 = v18;

      uint64_t v75 = &selRef_initWithCoder_;
    }

    id v91 = [v42 date];
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v91);

    id v92 = [v42 v75[131]];
    uint64_t v16 = v180;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v92);

    sub_100504C28((uint64_t)v16, (uint64_t)v183);
    os_log_t v175 = *(os_log_t *)(v173 + 8);
    ((void (*)(uint64_t (*)(uint64_t), uint64_t))v175)(v16, v181);
    uint64_t v93 = v183[3];
    sub_100015794((uint64_t)v183, (uint64_t *)&unk_1009A9C40);
    if (v93) {
      break;
    }
    id v120 = v42;
    uint64_t v121 = (void *)Logger.logObject.getter(v120);
    os_log_type_t v122 = static os_log_type_t.error.getter(v121);
    if (!os_log_type_enabled((os_log_t)v121, v122))
    {

      goto LABEL_49;
    }

    uint64_t v21 = swift_slowAlloc(22LL, -1LL);
    uint64_t v22 = swift_slowAlloc(32LL, -1LL);
    uint64_t v176 = v22;
    *(_DWORD *)uint64_t v21 = v151.n128_u32[0];
    uint64_t v182 = 1752392040LL;
    v183[0] = v22;
    uint64_t v23 = v172;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v172, v21 + 4, v21 + 12);
    *(_WORD *)(v21 + 12) = 2081;
    uint64_t v167 = v21 + 14;
    id v24 = [v120 beaconIdentifier];
    uint64_t v25 = v180;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v24);

    uint64_t v26 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v27 = a1;
    uint64_t v28 = v181;
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter(v181, v26);
    unint64_t v31 = v30;
    uint64_t v32 = v25;
    uint64_t v33 = v28;
    a1 = v27;
    uint64_t v16 = v164;
    ((void (*)(uint64_t (*)(uint64_t), uint64_t))v175)(v32, v33);
    uint64_t v182 = sub_1003F11D4(v29, v31, v183);
    uint64_t v34 = v23;
    uint64_t v18 = (uint64_t)v16;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v34, v167, v21 + 22);

    uint64_t v14 = v165;
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v121,  v122,  "No beacon found to updateBeaconObservations %{private,mask.hash}s.",  (uint8_t *)v21,  0x16u);
    uint64_t v35 = v176;
    swift_arrayDestroy(v176, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);

LABEL_5:
    uint64_t v11 = v174;
    (*(void (**)(char *, uint64_t))(v179 + 8))(v14, v174);
LABEL_6:
    uint64_t v36 = v177;
    uint64_t v37 = v178;
LABEL_7:
    uint64_t v20 = v37 + 1;
    if (v36 == v18) {
      goto LABEL_58;
    }
  }

  if (qword_10099B300 != -1) {
    swift_once(&qword_10099B300, sub_1003459EC);
  }
  uint64_t v94 = qword_100A2A6C8;
  id v95 = [v42 v75[131]];
  uint64_t v96 = (uint64_t)v161;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v95);

  uint64_t v97 = v163;
  (*(void (**)(uint64_t, char *, uint64_t))(v179 + 16))(v96 + *(int *)(v163 + 20), v14, v174);
  *(_BYTE *)(v96 + *(int *)(v97 + swift_release(*(void *)(v0 + 24)) = sub_1002D7E24((unint64_t)[v42 type]);
  uint64_t v98 = sub_100004AEC(&qword_10099D318);
  uint64_t v99 = *(unsigned __int8 *)(v162 + 80);
  uint64_t v100 = (v99 + 32) & ~v99;
  uint64_t v101 = swift_allocObject(v98, v100 + *(void *)(v162 + 72), v99 | 7);
  *(_OWORD *)(v101 + swift_weakDestroy(v0 + 16) = v160;
  sub_10001DC4C(v96, v101 + v100, type metadata accessor for BeaconObservation);
  uint64_t v102 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v102);
  *(&v147 - 4) = v94;
  *(&v147 - 3) = v101;
  uint64_t v145 = 0LL;
  uint64_t v146 = 0LL;
  uint64_t v16 = v170;
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.BeaconObservationStore.save",  57LL,  2LL,  sub_1002DDE58);
  uint64_t v170 = v16;
  swift_bridgeObjectRelease();
  sub_100018C68(v96, type metadata accessor for BeaconObservation);
  id v103 = [v42 location];
  if (!v103)
  {
    id v123 = v42;
    uint64_t v124 = (os_log_s *)Logger.logObject.getter(v123);
    os_log_type_t v125 = static os_log_type_t.default.getter(v124);
    if (os_log_type_enabled(v124, v125))
    {
      uint64_t v126 = swift_slowAlloc(22LL, -1LL);
      uint64_t v127 = swift_slowAlloc(32LL, -1LL);
      uint64_t v176 = v127;
      *(_DWORD *)uint64_t v126 = v151.n128_u32[0];
      uint64_t v182 = 1752392040LL;
      v183[0] = v127;
      Swift::Int v128 = v172;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v172, v126 + 4, v126 + 12);
      *(_WORD *)(v126 + 12) = 2081;
      uint64_t v167 = v126 + 14;
      id v129 = [v123 v75[131]];
      uint64_t v16 = v180;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v129);

      uint64_t v130 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v131 = v181;
      uint64_t v132 = dispatch thunk of CustomStringConvertible.description.getter(v181, v130);
      unint64_t v134 = v133;
      uint64_t v18 = (uint64_t)v164;
      ((void (*)(uint64_t (*)(uint64_t), uint64_t))v175)(v16, v131);
      uint64_t v182 = sub_1003F11D4(v132, v134, v183);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v128, v167, v126 + 22);

      uint64_t v14 = v165;
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v124,  v125,  "No location in observation for beacon %{private,mask.hash}s. Update completed.",  (uint8_t *)v126,  0x16u);
      uint64_t v135 = v176;
      swift_arrayDestroy(v176, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v135, -1LL, -1LL);
      swift_slowDealloc(v126, -1LL, -1LL);

      uint64_t v11 = v174;
      (*(void (**)(char *, uint64_t))(v179 + 8))(v14, v174);
      uint64_t v36 = v177;
      uint64_t v37 = v178;
      a1 = v169;
    }

    else
    {

      uint64_t v11 = v174;
      (*(void (**)(char *, uint64_t))(v179 + 8))(v14, v174);
      uint64_t v36 = v177;
      uint64_t v37 = v178;
      a1 = v169;
      uint64_t v18 = v74;
    }

    goto LABEL_7;
  }

  uint64_t v104 = v103;
  id v105 = [v42 v75[131]];
  uint64_t v16 = v180;
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(v105);

  uint64_t v106 = (uint64_t)v150;
  sub_100504F30((uint64_t)v16, (uint64_t)v150);
  ((void (*)(uint64_t (*)(uint64_t), uint64_t))v175)(v16, v181);
  BOOL v107 = (*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v154 + 48))(v106, 1LL, v155) == 1;
  a1 = v169;
  if (v107)
  {
    sub_100015794(v106, (uint64_t *)&unk_1009A9C30);
    id v108 = v42;
    uint64_t v109 = (os_log_s *)Logger.logObject.getter(v108);
    os_log_type_t v110 = static os_log_type_t.default.getter(v109);
    if (os_log_type_enabled(v109, v110))
    {
      uint64_t v111 = swift_slowAlloc(22LL, -1LL);
      uint64_t v112 = swift_slowAlloc(32LL, -1LL);
      uint64_t v176 = v112;
      *(_DWORD *)uint64_t v111 = v151.n128_u32[0];
      uint64_t v182 = 1752392040LL;
      v183[0] = v112;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v172, v111 + 4, v111 + 12);
      *(_WORD *)(v111 + 12) = 2081;
      uint64_t v167 = v111 + 14;
      id v113 = [v108 v75[131]];
      uint64_t v114 = v180;
      static UUID._unconditionallyBridgeFromObjectiveC(_:)(v113);

      uint64_t v115 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v16 = (uint64_t (*)(uint64_t))v181;
      uint64_t v116 = dispatch thunk of CustomStringConvertible.description.getter(v181, v115);
      unint64_t v118 = v117;
      ((void (*)(uint64_t (*)(uint64_t), uint64_t (*)(uint64_t)))v175)(v114, v16);
      uint64_t v182 = sub_1003F11D4(v116, v118, v183);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v182, v172, v167, v111 + 22);

      uint64_t v18 = (uint64_t)v164;
      a1 = v169;
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v109,  v110,  "Beacon %{private,mask.hash}s is not an owned beacon. Cannot update beacon observation.",  (uint8_t *)v111,  0x16u);
      uint64_t v119 = v176;
      swift_arrayDestroy(v176, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v14 = v165;
      swift_slowDealloc(v119, -1LL, -1LL);
      swift_slowDealloc(v111, -1LL, -1LL);

      goto LABEL_5;
    }

LABEL_49:
    uint64_t v11 = v174;
    (*(void (**)(char *, uint64_t))(v179 + 8))(v14, v174);
    uint64_t v36 = v177;
    uint64_t v37 = v178;
    uint64_t v18 = v74;
    goto LABEL_7;
  }

  uint64_t v136 = v152;
  uint64_t v16 = type metadata accessor for OwnedBeaconRecord;
  sub_10002218C(v106, v152, type metadata accessor for OwnedBeaconRecord);
  sub_10001DC4C(v136, v153, type metadata accessor for OwnedBeaconRecord);
  id v137 = v104;
  Swift::Int v138 = (char *)[v42 type];
  if ((unint64_t)(v138 - 1) < 3)
  {
    char v139 = (_BYTE)v138 + 1;
    uint64_t v11 = v174;
    uint64_t v18 = v74;
LABEL_52:
    uint64_t v142 = v153;
    sub_1002C3A84(v137, (uint64_t)v14, v153, v139, v149);

    sub_100018C68(v152, type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(char *, uint64_t))(v179 + 8))(v14, v11);
    sub_100018C68(v142, type metadata accessor for OwnedBeaconRecord);

    goto LABEL_6;
  }

  id v140 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v141 = [v140 isInternalBuild];

  uint64_t v11 = v174;
  if (!v141)
  {
    uint64_t v18 = v74;
    char v139 = 0;
    goto LABEL_52;
  }

  _Block_release(v148);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000038LL,  0x800000010085BE70LL,  "searchpartyd/BeaconManagerService_BeaconManagerProtocol.swift",  61LL,  2LL,  3288LL,  0);
  __break(1u);
  return result;
}

void sub_1002D9270(uint64_t a1, uint64_t a2, void (**a3)(void, void))
{
  uint64_t v38 = a1;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v36 = (uint64_t)v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v37 = (uint64_t)v35 - v12;
  uint64_t v39 = swift_allocObject(&unk_10094DD80, 24LL, 7LL);
  *(void *)(v39 + swift_weakDestroy(v0 + 16) = a3;
  _Block_copy(a3);
  if (qword_10099B238 != -1) {
    swift_once(&qword_10099B238, sub_10028EB6C);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = sub_10000A720(v13, (uint64_t)qword_100A2A488);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.info.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v17 = 134217984;
    uint64_t v40 = v38;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v40, &v41, v17 + 4, v17 + 12);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "offlineAdvertisingKeys for reason: %ld", v17, 0xCu);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  sub_1001320A0((uint64_t)v7);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1LL, v8) == 1)
  {
    uint64_t v18 = sub_100015794((uint64_t)v7, (uint64_t *)&unk_1009A9C30);
    __n128 v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.info.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "offlineAdvertisingKeys requested with no localBeaconRecord",  v21,  2u);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    sub_100022898(0LL, &qword_1009A7E50, &OBJC_CLASS___SPOfflineAdvertisingKeys_ptr);
    Class isa = Array._bridgeToObjectiveC()().super.isa;
    ((void (**)(void, Class))a3)[2](a3, isa);
    swift_release();
  }

  else
  {
    uint64_t v23 = v37;
    sub_10002218C((uint64_t)v7, v37, type metadata accessor for OwnedBeaconRecord);
    uint64_t v24 = *(void *)(a2 + 256);
    uint64_t v25 = *(void *)(v24 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
    uint64_t v26 = type metadata accessor for BeaconKeyManager(0LL);
    v35[1] = (char *)&type metadata for () + 8;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10014F014, v24, v25, (char *)&type metadata for () + 8, v26);
    v35[0] = 0LL;
    uint64_t v27 = v40;
    uint64_t v28 = swift_allocObject(&unk_10094D470, 24LL, 7LL);
    swift_weakInit(v28 + 16, a2);
    uint64_t v29 = v36;
    sub_10001DC4C(v23, v36, type metadata accessor for OwnedBeaconRecord);
    uint64_t v30 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v31 = (v30 + 40) & ~v30;
    unint64_t v32 = (v10 + v31 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v33 = (void *)swift_allocObject(&unk_10094DDA8, v32 + 8, v30 | 7);
    void v33[2] = v28;
    void v33[3] = sub_1002DACD4;
    v33[4] = v39;
    sub_10002218C(v29, (uint64_t)v33 + v31, type metadata accessor for OwnedBeaconRecord);
    *(void *)((char *)v33 + v32) = v38;
    uint64_t v34 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v34);
    v35[-6] = v27;
    v35[-5] = v23;
    LOBYTE(v35[-4]) = 2;
    v35[-3] = sub_1002DAFB0;
    v35[-2] = v33;
    swift_retain();
    swift_retain();
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.checkForMissingKeyMaps.forbeacon",  62LL,  2LL,  sub_1002D69C0);
    swift_release();
    swift_release();
    sub_100018C68(v23, type metadata accessor for OwnedBeaconRecord);
    swift_release();
    swift_release();
  }

uint64_t sub_1002D96F8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v33 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord(0LL);
  sub_10001DC4C(a1 + *(int *)(v5 + 24), (uint64_t)v4, type metadata accessor for StableIdentifier);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v2);
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009AF840);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    os_log_type_t v16 = &v4[*(int *)(v15 + 80)];
    uint64_t v18 = *(void *)v16;
    unint64_t v17 = *((void *)v16 + 1);
    uint64_t v33 = v18;
    unint64_t v34 = v17;
  }

  else
  {
    if (EnumCaseMultiPayload != 2)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v7 = *((void *)v4 + 4);
        unint64_t v8 = *((void *)v4 + 5);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v33 = v7;
        unint64_t v34 = v8;
        unint64_t v9 = sub_1000155F8();
        uint64_t v10 = Data.init<A>(hexString:)(&v33, &type metadata for String, v9);
        if (v11 >> 60 != 15)
        {
          uint64_t v12 = v10;
          unint64_t v13 = v11;
          uint64_t v33 = v10;
          unint64_t v34 = v11;
          unint64_t v14 = sub_100042F34();
          if ((DataProtocol.isNull.getter(&type metadata for Data, v14) & 1) == 0)
          {
            uint64_t v30 = Data.trimmed.getter(v12, v13);
            sub_1000182F0(v12, v13);
            return v30;
          }

          sub_1000182F0(v12, v13);
        }
      }

      else
      {
        sub_100018C68((uint64_t)v4, type metadata accessor for StableIdentifier);
      }

      return 0LL;
    }

    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009B0520);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    os_log_type_t v20 = &v4[*(int *)(v19 + 80)];
    uint64_t v21 = *(void *)v20;
    unint64_t v22 = *((void *)v20 + 1);
    swift_bridgeObjectRelease();
    uint64_t v33 = v21;
    unint64_t v34 = v22;
  }

  unint64_t v23 = sub_1000155F8();
  uint64_t v24 = Data.init<A>(hexString:)(&v33, &type metadata for String, v23);
  if (v25 >> 60 == 15)
  {
    uint64_t v26 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v26 - 8) + 8LL))(v4, v26);
    return 0LL;
  }

  uint64_t v27 = v24;
  unint64_t v28 = v25;
  uint64_t v33 = v24;
  unint64_t v34 = v25;
  unint64_t v29 = sub_100042F34();
  if ((DataProtocol.isNull.getter(&type metadata for Data, v29) & 1) != 0) {
    uint64_t v30 = 0LL;
  }
  else {
    uint64_t v30 = Data.trimmed.getter(v27, v28);
  }
  sub_1000182F0(v27, v28);
  uint64_t v31 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v31 - 8) + 8LL))(v4, v31);
  return v30;
}

uint64_t sub_1002D99B4()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1002D99E0(uint64_t a1)
{
}

uint64_t sub_1002D99EC()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1002D9A20(uint64_t a1)
{
  return sub_1002ABF20(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(_BYTE *)(v1 + 40));
}

uint64_t sub_1002D9A40()
{
  uint64_t v1 = (int *)type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  uint64_t v9 = v0 + v4 + v1[10];
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  uint64_t v13 = v0 + v4 + v1[12];
  unint64_t v14 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + v14));
  return swift_deallocObject(v0, v14 + 41, v3 | 7);
}

void sub_1002D9B6C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeaconEstimatedLocation(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  sub_1002AC054(a1, *(void *)(v1 + 16), v1 + v4, v5, *(unsigned __int8 *)(v5 + 40));
}

uint64_t sub_1002D9BC4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002D9BE8(void (*a1)(uint64_t))
{
  return sub_1002A8474(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1002D9C08()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 56) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_unknownObjectRelease(*((void *)v0 + 2));
  swift_release(*((void *)v0 + 4));
  swift_release(*((void *)v0 + 6));
  (*(void (**)(char *, uint64_t))(v2 + 8))(&v0[v4], v1);
  (*(void (**)(char *, uint64_t))(v7 + 8))(&v0[v9], v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_1002D9CE0(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 56LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  type metadata accessor for Date(0LL);
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = v1[5];
  uint64_t v11 = v1[6];
  uint64_t v12 = *(void *)((char *)v1 + v6);
  uint64_t v13 = (void *)swift_task_alloc(dword_1009A7DEC);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v13;
  *uint64_t v13 = v2;
  v13[1] = sub_100015D58;
  return sub_1002A8790(a1, v7, v8, v9, v10, v11, (uint64_t)v1 + v5, v12);
}

uint64_t sub_1002D9DCC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1002D9DF0()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_1009A7DFC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100015D58;
  v4[2] = v2;
  void v4[3] = v3;
  return swift_task_switch(sub_1002A91BC, 0LL, 0LL);
}

uint64_t sub_1002D9E50()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002D9E60(uint64_t a1)
{
  return sub_1002A850C(a1, *(void *)(v1 + 16));
}

uint64_t sub_1002D9E68(uint64_t a1)
{
  return sub_1002A85AC(a1);
}

uint64_t sub_1002D9E70()
{
  uint64_t v1 = (int *)type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + v1[5];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  v10(v7 + v1[6], v9);
  uint64_t v11 = v7 + v1[8];
  uint64_t v12 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(v11, v12);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002D9F44(uint64_t a1)
{
  return sub_1002DDC20( a1,  type metadata accessor for KeyAlignmentRecord,  (uint64_t (*)(uint64_t, void, void, uint64_t))sub_100503ACC);
}

uint64_t sub_1002D9F58(uint64_t a1)
{
  return sub_100504010(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1002D9F60()
{
  uint64_t v1 = (int *)type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v7 + v1[5];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  v10(v7 + v1[6], v9);
  uint64_t v11 = v7 + v1[8];
  uint64_t v12 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(v11, v12);
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1002DA05C(void *a1)
{
  return sub_1002DBB20( a1,  type metadata accessor for KeyAlignmentRecord,  (uint64_t (*)(void, unint64_t, void, void, void))sub_10050491C);
}

uint64_t sub_1002DA070(uint64_t a1)
{
  return sub_10050326C(a1, *(void *)(v1 + 16), *(id **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1002DA08C()
{
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 40));
  return swift_deallocObject(v0, 80LL, 7LL);
}

id sub_1002DA0C0(uint64_t a1)
{
  return sub_1002A4EA4(a1, *(id *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), (void *)(v1 + 40));
}

uint64_t sub_1002DA0D4(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_1002A4FD8(a1, *(void *)(v1 + 16), v1 + v4, *(uint64_t (**)(uint64_t))v5, *(void *)(v5 + 8));
}

uint64_t sub_1002DA130(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_10050B6F4( a1,  *(void *)(v1 + 16),  v1 + v4,  *(uint64_t (**)(uint64_t))(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1002DA188()
{
  uint64_t v1 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002DA258(uint64_t a1)
{
  return sub_1002DDC20( a1,  type metadata accessor for BeaconNamingRecord,  (uint64_t (*)(uint64_t, void, void, uint64_t))sub_100503A94);
}

uint64_t sub_1002DA26C(uint64_t a1)
{
  return sub_100503FE0(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1002DA274()
{
  uint64_t v1 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v7 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1002DA36C(void *a1)
{
  return sub_1002DBB20( a1,  type metadata accessor for BeaconNamingRecord,  (uint64_t (*)(void, unint64_t, void, void, void))sub_100504620);
}

uint64_t sub_1002DA380(uint64_t a1)
{
  return sub_100503214(a1, *(void *)(v1 + 16), *(id **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1002DA39C()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  os_log_type_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | 7);
}

uint64_t sub_1002DA64C()
{
  uint64_t v1 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_1002A5680(v0 + v2, *(uint64_t (**)(uint64_t))v3, *(void *)(v3 + 8));
}

uint64_t sub_1002DA690()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  os_log_type_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1002DA938(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8) + 80LL);
  return sub_1002A4C88( a1,  *(void (**)(void))(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  v1 + ((v3 + 40) & ~v3));
}

uint64_t sub_1002DA97C()
{
  uint64_t v1 = type metadata accessor for TimeBasedKeysCriteria(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = *(void *)(v7 + 64);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v0 + v4, v1);
  if (EnumCaseMultiPayload == 1)
  {
    swift_bridgeObjectRelease();
  }

  else if (!EnumCaseMultiPayload)
  {
    uint64_t v11 = type metadata accessor for DateInterval(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v0 + v4, v11);
  }

  unint64_t v12 = (((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + v8 + 8) & ~v8;
  swift_release();
  (*(void (**)(unint64_t, uint64_t))(v7 + 8))(v0 + v12, v6);
  swift_release();
  return swift_deallocObject(v0, ((v9 + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | v8 | 7);
}

void sub_1002DAA90()
{
  uint64_t v1 = *(void *)(type metadata accessor for TimeBasedKeysCriteria(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v5 = (v3 + *(unsigned __int8 *)(v4 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (uint64_t *)(v0 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  sub_1002A2CA4(v0 + v2, *(void *)(v0 + v3), v0 + v5, *v6, v6[1]);
}

uint64_t sub_1002DAB18@<X0>(unint64_t *a1@<X0>, void *a2@<X8>)
{
  return sub_10029EA30(a1, *(void **)(v2 + 16), *(void **)(v2 + 24), a2);
}

uint64_t sub_1002DAB30@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10029F214(a1, *(void *)(v2 + 16), *(void *)(v2 + 24), a2);
}

void sub_1002DAB48(void **a1@<X0>, void *a2@<X8>)
{
}

uint64_t sub_1002DAB60()
{
  return sub_1002DBF0C(72LL);
}

uint64_t sub_1002DAB68(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = v1 + 24;
  uint64_t v6 = *(void *)(v1 + 64);
  uint64_t v7 = (void *)swift_task_alloc(dword_1009A7E3C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000159BC;
  v7[5] = v5;
  void v7[6] = v6;
  v7[3] = a1;
  v7[4] = v4;
  return swift_task_switch(sub_1002A05C0, 0LL, 0LL);
}

uint64_t sub_1002DABE0@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1002A0D34(a1, a2);
}

uint64_t sub_1002DABF8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  return sub_1002A2090(a1, *(void **)(v2 + 24), *(void *)(v2 + 40), a2);
}

uint64_t sub_1002DAC14@<X0>(id *a1@<X0>, void *a2@<X8>)
{
  return sub_1002A1934(a1, *(void **)(v2 + 24), *(void *)(v2 + 32), *(void *)(v2 + 40), a2);
}

void *sub_1002DAC30( void *a1, void (*a2)(void, void), void (*a3)(uint64_t, uint64_t), void (*a4)(uint64_t, uint64_t))
{
  uint64_t v7 = a1[2];
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v10 = a1[5];
  a2(*a1, a1[1]);
  a3(v7, v8);
  a4(v9, v10);
  return a1;
}

void sub_1002DACA0(uint64_t a1)
{
}

uint64_t sub_1002DACC8()
{
  return sub_10020F99C((void (*)(void))&_swift_bridgeObjectRelease);
}

void sub_1002DACD4(uint64_t a1)
{
}

uint64_t sub_1002DACFC()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  os_log_type_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8, v3 | 7);
}

uint64_t sub_1002DAFB0()
{
  uint64_t v1 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1002ABCCC( *(void *)(v0 + 16),  *(void (**)(void))(v0 + 24),  *(void *)(v0 + 32),  v0 + v2,  *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

void sub_1002DAFF8(char a1, uint64_t a2)
{
}

unint64_t sub_1002DB000()
{
  unint64_t result = qword_1009A7E58;
  if (!qword_1009A7E58)
  {
    unint64_t result = swift_getWitnessTable(&unk_100805264, &type metadata for BeaconManagerEntitlement);
    atomic_store(result, &qword_1009A7E58);
  }

  return result;
}

uint64_t sub_1002DB044()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1002DB080(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  uint64_t v10 = (void *)swift_task_alloc(dword_1009A7E64);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v10;
  *uint64_t v10 = v2;
  v10[1] = sub_100015D58;
  return sub_100299A7C(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1002DB10C()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  swift_bridgeObjectRelease(*(void *)(v0 + 64));
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_1002DB148()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  uint64_t v4 = (void *)swift_task_alloc(dword_1009AE40C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000159BC;
  return sub_100441CC4(v2, v3, v0 + 32);
}

unint64_t sub_1002DB1A8()
{
  unint64_t result = qword_1009A7EA0;
  if (!qword_1009A7EA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10081CF3C, &type metadata for BeaconKeyManager.Error);
    atomic_store(result, (unint64_t *)&qword_1009A7EA0);
  }

  return result;
}

uint64_t sub_1002DB1EC()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  os_log_type_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1002DB48C(uint64_t a1)
{
  return sub_1002DDC20( a1,  type metadata accessor for OwnedBeaconRecord,  (uint64_t (*)(uint64_t, void, void, uint64_t))sub_100503A40);
}

uint64_t sub_1002DB4A0(uint64_t a1)
{
  return sub_100503F98(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1002DB4A8()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  os_log_type_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | 7);
}

uint64_t sub_1002DB768(void *a1)
{
  return sub_1002DBB20( a1,  type metadata accessor for OwnedBeaconRecord,  (uint64_t (*)(void, unint64_t, void, void, void))sub_100504324);
}

uint64_t sub_1002DB77C(uint64_t a1)
{
  return sub_100503190(a1, *(void *)(v1 + 16), *(id **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1002DB798()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v0 + v4 + v1[18];
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  uint64_t v12 = v0 + v4 + v1[19];
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1LL, v7)) {
    v9(v12, v7);
  }
  uint64_t v14 = v0 + v4 + v1[20];
  uint64_t v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v14, 1LL, v15))
  {
    uint64_t v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1LL, v7)) {
      v9(v16, v7);
    }
  }

  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1002DB930(uint64_t a1)
{
  return sub_1002DDC20( a1,  type metadata accessor for SharedBeaconRecord,  (uint64_t (*)(uint64_t, void, void, uint64_t))sub_100503A24);
}

uint64_t sub_1002DB944(uint64_t a1)
{
  return sub_100503F80(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1002DB94C()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v0 + v4 + v1[18];
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  uint64_t v12 = v0 + v4 + v1[19];
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1LL, v7)) {
    v9(v12, v7);
  }
  uint64_t v14 = v0 + v4 + v1[20];
  uint64_t v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v14, 1LL, v15))
  {
    uint64_t v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1LL, v7)) {
      v9(v16, v7);
    }
  }

  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | 7);
}

uint64_t sub_1002DBB0C(void *a1)
{
  return sub_1002DBB20( a1,  type metadata accessor for SharedBeaconRecord,  (uint64_t (*)(void, unint64_t, void, void, void))sub_100504028);
}

uint64_t sub_1002DBB20( void *a1, uint64_t (*a2)(void), uint64_t (*a3)(void, unint64_t, void, void, void))
{
  uint64_t v5 = *(void *)(a2(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return a3( *a1,  v3 + v6,  *(void *)(v3 + v7),  *(void *)(v3 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v3 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_1002DBB90(uint64_t a1)
{
  return sub_100503164(a1, *(void *)(v1 + 16), *(id **)(v1 + 24), *(void *)(v1 + 32));
}

unint64_t sub_1002DBBAC()
{
  unint64_t result = qword_1009A7EB8;
  if (!qword_1009A7EB8)
  {
    uint64_t v1 = sub_100004B78(&qword_1009AE600);
    sub_100007864( &qword_1009A7EC0,  type metadata accessor for SharedBeaconRecord.PropertyListContent,  (uint64_t)&unk_10081AC6C);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1009A7EB8);
  }

  return result;
}

uint64_t sub_1002DBC28()
{
  uint64_t v1 = (int *)type metadata accessor for ShareRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  uint64_t v9 = v0 + v4 + v1[7];
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  uint64_t v13 = v0 + v4 + v1[8];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1002DBD54(uint64_t a1)
{
  return sub_1002DDC20( a1,  type metadata accessor for ShareRecord,  (uint64_t (*)(uint64_t, void, void, uint64_t))sub_100503AB0);
}

uint64_t sub_1002DBD68(uint64_t a1)
{
  return sub_100503FF8(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1002DBD70()
{
  uint64_t v1 = (int *)type metadata accessor for ShareRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  uint64_t v9 = v0 + v4 + v1[7];
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  uint64_t v13 = v0 + v4 + v1[8];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | 7);
}

uint64_t sub_1002DBEBC(uint64_t a1)
{
  return sub_1002DDD88( a1,  type metadata accessor for ShareRecord,  (uint64_t (*)(uint64_t, unint64_t, void, void, void))sub_10054D038);
}

uint64_t sub_1002DBED0(uint64_t a1)
{
  return sub_100503240(a1, *(void *)(v1 + 16), *(id **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1002DBEEC()
{
  return sub_1002DBF0C(96LL);
}

uint64_t sub_1002DBEF4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1002DBF04()
{
  return sub_1002DBF0C(96LL);
}

uint64_t sub_1002DBF0C(uint64_t a1)
{
  return swift_deallocObject(v1, a1, 7LL);
}

uint64_t sub_1002DBF44(uint64_t a1)
{
  return sub_1002A4370( *(void *)(v1 + 16),  (void *)(v1 + 24),  *(void **)(v1 + 64),  *(void *)(v1 + 72),  *(uint64_t **)(v1 + 80),  *(void *)(v1 + 88),  a1);
}

uint64_t sub_1002DBF6C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1002DBF7C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1009B4184);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100015D58;
  return sub_1005AE294();
}

uint64_t sub_1002DBFC4(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t), uint64_t a4)
{
  uint64_t v116 = (void (*)(void *, uint64_t))a1;
  uint64_t v7 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v7);
  uint64_t v106 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  __chkstk_darwin(v9);
  BOOL v107 = (char *)&v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for MACAddress(0LL);
  uint64_t v112 = *(void *)(v11 - 8);
  uint64_t v113 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  id v105 = (char *)&v102 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v104 = v13;
  __chkstk_darwin(v12);
  id v108 = (char *)&v102 - v14;
  uint64_t v15 = type metadata accessor for TimeBasedKey(0LL);
  uint64_t v16 = *(char **)(v15 - 8);
  uint64_t v114 = v15;
  uint64_t v115 = v16;
  __chkstk_darwin(v15);
  uint64_t v109 = (uint64_t)&v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100004AEC(&qword_1009A7EF0);
  __chkstk_darwin(v18);
  os_log_type_t v20 = (uint64_t *)((char *)&v102 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v21 = sub_100004AEC((uint64_t *)&unk_10099FB50);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v102 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v102 - v25;
  uint64_t v27 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v27);
  unint64_t v29 = (char *)&v102 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = type metadata accessor for DateInterval(0LL);
  uint64_t v110 = *(void *)(v30 - 8);
  uint64_t v111 = v30;
  __chkstk_darwin(v30);
  unint64_t v32 = (char *)&v102 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = swift_allocObject(&unk_10094E0F0, 32LL, 7LL);
  *(void *)(v33 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v33 + 24) = a4;
  uint64_t v34 = *(void *)(a2 + 256);
  swift_retain();
  sub_100504C28((uint64_t)v116, (uint64_t)&v122);
  if (!*((void *)&v123 + 1))
  {
    sub_100015794((uint64_t)&v122, (uint64_t *)&unk_1009A9C40);
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v51 = v50;
    v119[0] = 2LL;
    unint64_t v52 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v53 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    _BridgedStoredNSError.init(_:userInfo:)(&v122, v119, v52, v51, v53);
    *os_log_type_t v20 = v122;
    swift_storeEnumTagMultiPayload(v20, v18, 1LL);
    sub_10034D3F4((uint64_t)v20, a3, a4);
    sub_100015794((uint64_t)v20, &qword_1009A7EF0);
    return swift_release();
  }

  uint64_t v103 = v18;
  uint64_t v116 = a3;
  sub_100012EC0(&v122, (uint64_t)v119);
  static Date.trustedNow.getter((uint64_t)v29);
  DateInterval.init(start:duration:)(v29, 1.0);
  uint64_t v35 = v120;
  uint64_t v36 = v121;
  uint64_t v37 = sub_100012ED8(v119, v120);
  uint64_t v38 = sub_10054CE6C((uint64_t)v37, (uint64_t)v32, 0, 0, 0, v34, v35, v36);
  uint64_t v40 = v38;
  uint64_t v42 = v41;
  if (!v39)
  {
    uint64_t v43 = a4;
    uint64_t v44 = (uint64_t)v26;
    unint64_t v54 = v115;
    if (*(void *)(v38 + 16))
    {
      sub_10001DC4C( v38 + ((v115[80] + 32LL) & ~(unint64_t)v115[80]),  v44,  type metadata accessor for TimeBasedKey);
      unint64_t v55 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v54 + 7);
      uint64_t v56 = v44;
      uint64_t v57 = 0LL;
    }

    else
    {
      unint64_t v55 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v115 + 7);
      uint64_t v56 = v44;
      uint64_t v57 = 1LL;
    }

    uint64_t v62 = v114;
    v55(v56, v57, 1LL, v114);
    uint64_t v63 = v42;
    uint64_t v58 = v62;
    sub_100117B2C(v40, v63, 0);
    goto LABEL_14;
  }

  uint64_t v43 = a4;
  uint64_t v44 = (uint64_t)v26;
  if (v39 != 1)
  {
    uint64_t v58 = v114;
    unint64_t v54 = v115;
    (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v115 + 7))(v44, 1LL, 1LL, v114);
LABEL_14:
    uint64_t v61 = v33;
    uint64_t v45 = v116;
    goto LABEL_15;
  }

  uint64_t v46 = v115;
  uint64_t v45 = v116;
  if (*(void *)(v38 + 16))
  {
    sub_10001DC4C( v38 + ((v115[80] + 32LL) & ~(unint64_t)v115[80]),  v44,  type metadata accessor for TimeBasedKey);
    uint64_t v47 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v46 + 7);
    uint64_t v48 = v44;
    uint64_t v49 = 0LL;
  }

  else
  {
    uint64_t v47 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v115 + 7);
    uint64_t v48 = v44;
    uint64_t v49 = 1LL;
  }

  uint64_t v59 = v114;
  v47(v48, v49, 1LL, v114);
  uint64_t v60 = v42;
  uint64_t v58 = v59;
  unint64_t v54 = v115;
  sub_100117B2C(v40, v60, 1);
  uint64_t v61 = v33;
LABEL_15:
  sub_10001581C(v44, (uint64_t)v24, (uint64_t *)&unk_10099FB50);
  if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v54 + 6))(v24, 1LL, v58) == 1)
  {
    sub_100015794((uint64_t)v24, (uint64_t *)&unk_10099FB50);
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v65 = v64;
    uint64_t v117 = 14LL;
    unint64_t v66 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v67 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    _BridgedStoredNSError.init(_:userInfo:)(&v122, &v117, v66, v65, v67);
    *os_log_type_t v20 = v122;
    swift_storeEnumTagMultiPayload(v20, v103, 1LL);
    sub_10034D3F4((uint64_t)v20, v45, v43);
    sub_100015794((uint64_t)v20, &qword_1009A7EF0);
    sub_100015794(v44, (uint64_t *)&unk_10099FB50);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v32, v111);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v119);
    return swift_release();
  }

  uint64_t v116 = (void (*)(void *, uint64_t))v44;
  uint64_t v68 = v109;
  sub_10002218C((uint64_t)v24, v109, type metadata accessor for TimeBasedKey);
  id v69 = (__int128 *)(v68 + *(int *)(v58 + 24));
  __int128 v70 = v69[2];
  __int128 v71 = *v69;
  __int128 v123 = v69[1];
  __int128 v124 = v70;
  __int128 v122 = v71;
  sub_1002DAC30( &v122,  (void (*)(void, void))sub_1002DDE24,  (void (*)(uint64_t, uint64_t))sub_10001736C,  (void (*)(uint64_t, uint64_t))sub_100018BE4);
  uint64_t v72 = sub_1004DA048();
  uint64_t v74 = v73;
  sub_1002DAC30( &v122,  (void (*)(void, void))sub_1002DDE20,  (void (*)(uint64_t, uint64_t))sub_100016F9C,  (void (*)(uint64_t, uint64_t))sub_1000182F0);
  sub_100178C64(6LL, v72, v74);
  uint64_t v75 = v117;
  unint64_t v76 = v118;
  sub_10001736C(v117, v118);
  id v77 = v107;
  MACAddress.init(addressToSanitize:type:)(v75, v76, 1LL);
  uint64_t v79 = v112;
  uint64_t v78 = v113;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v77, 1LL, v113) != 1)
  {
    uint64_t v114 = v61;
    uint64_t v115 = v32;
    BOOL v107 = *(char **)(v79 + 32);
    ((void (*)(char *, char *, uint64_t))v107)(v108, v77, v78);
    sub_100016F9C(v75, v76);
    uint64_t v80 = v120;
    uint64_t v81 = v121;
    sub_100012ED8(v119, v120);
    uint64_t v82 = (*(uint64_t (**)(uint64_t, uint64_t))(v81 + 168))(v80, v81);
    char v84 = 2;
    if (v83 >> 60 != 15)
    {
      uint64_t v85 = v82;
      unint64_t v86 = v83;
      BOOL v87 = sub_1005E2550(v82, v83);
      sub_1000182F0(v85, v86);
      if (v87) {
        char v84 = 3;
      }
      else {
        char v84 = 2;
      }
    }

    uint64_t v88 = type metadata accessor for TaskPriority(0LL);
    uint64_t v89 = (uint64_t)v106;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56LL))(v106, 1LL, 1LL, v88);
    uint64_t v90 = v112;
    uint64_t v91 = v113;
    id v92 = v105;
    uint64_t v93 = v108;
    (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v105, v108, v113);
    uint64_t v94 = *(unsigned __int8 *)(v90 + 80);
    uint64_t v95 = (v94 + 32) & ~v94;
    uint64_t v96 = v95 + v104;
    unint64_t v97 = (v95 + v104) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v98 = swift_allocObject(&unk_10094E118, v97 + 24, v94 | 7);
    unint64_t v99 = v97 + v98;
    *(void *)(v98 + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(v98 + 24) = 0LL;
    ((void (*)(uint64_t, char *, uint64_t))v107)(v98 + v95, v92, v91);
    *(_BYTE *)(v98 + v96) = v84;
    uint64_t v100 = v114;
    *(void *)(v99 + 8) = sub_1002DD1F0;
    *(void *)(v99 + swift_weakDestroy(v0 + 16) = v100;
    swift_retain();
    sub_1003EDB00(v89, (uint64_t)&unk_1009A7F00, v98);
    swift_release();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v93, v91);
    sub_100018C68(v109, type metadata accessor for TimeBasedKey);
    sub_100015794((uint64_t)v116, (uint64_t *)&unk_10099FB50);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v115, v111);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v119);
    return swift_release();
  }

  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1002DC878(uint64_t a1, uint64_t a2, void (*a3)(void *, uint64_t), uint64_t a4)
{
  uint64_t v116 = (void (*)(void *, uint64_t))a1;
  uint64_t v7 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v7);
  uint64_t v106 = (char *)&v102 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  __chkstk_darwin(v9);
  BOOL v107 = (char *)&v102 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for MACAddress(0LL);
  uint64_t v112 = *(void *)(v11 - 8);
  uint64_t v113 = v11;
  uint64_t v12 = __chkstk_darwin(v11);
  id v105 = (char *)&v102 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v104 = v13;
  __chkstk_darwin(v12);
  id v108 = (char *)&v102 - v14;
  uint64_t v15 = type metadata accessor for TimeBasedKey(0LL);
  uint64_t v16 = *(char **)(v15 - 8);
  uint64_t v114 = v15;
  uint64_t v115 = v16;
  __chkstk_darwin(v15);
  uint64_t v109 = (uint64_t)&v102 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100004AEC(&qword_1009A7ED8);
  __chkstk_darwin(v18);
  os_log_type_t v20 = (uint64_t *)((char *)&v102 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v21 = sub_100004AEC((uint64_t *)&unk_10099FB50);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v24 = (char *)&v102 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v102 - v25;
  uint64_t v27 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v27);
  unint64_t v29 = (char *)&v102 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = type metadata accessor for DateInterval(0LL);
  uint64_t v110 = *(void *)(v30 - 8);
  uint64_t v111 = v30;
  __chkstk_darwin(v30);
  unint64_t v32 = (char *)&v102 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = swift_allocObject(&unk_10094E0A0, 32LL, 7LL);
  *(void *)(v33 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v33 + 24) = a4;
  uint64_t v34 = *(void *)(a2 + 256);
  swift_retain();
  sub_100504C28((uint64_t)v116, (uint64_t)&v122);
  if (!*((void *)&v123 + 1))
  {
    sub_100015794((uint64_t)&v122, (uint64_t *)&unk_1009A9C40);
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v51 = v50;
    v119[0] = 2LL;
    unint64_t v52 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v53 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    _BridgedStoredNSError.init(_:userInfo:)(&v122, v119, v52, v51, v53);
    *os_log_type_t v20 = v122;
    swift_storeEnumTagMultiPayload(v20, v18, 1LL);
    sub_10034D50C((uint64_t)v20, a3, a4);
    sub_100015794((uint64_t)v20, &qword_1009A7ED8);
    return swift_release();
  }

  uint64_t v103 = v18;
  uint64_t v116 = a3;
  sub_100012EC0(&v122, (uint64_t)v119);
  static Date.trustedNow.getter((uint64_t)v29);
  DateInterval.init(start:duration:)(v29, 1.0);
  uint64_t v35 = v120;
  uint64_t v36 = v121;
  uint64_t v37 = sub_100012ED8(v119, v120);
  uint64_t v38 = sub_10054CE6C((uint64_t)v37, (uint64_t)v32, 0, 0, 0, v34, v35, v36);
  uint64_t v40 = v38;
  uint64_t v42 = v41;
  if (!v39)
  {
    uint64_t v43 = a4;
    uint64_t v44 = (uint64_t)v26;
    unint64_t v54 = v115;
    if (*(void *)(v38 + 16))
    {
      sub_10001DC4C( v38 + ((v115[80] + 32LL) & ~(unint64_t)v115[80]),  v44,  type metadata accessor for TimeBasedKey);
      unint64_t v55 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v54 + 7);
      uint64_t v56 = v44;
      uint64_t v57 = 0LL;
    }

    else
    {
      unint64_t v55 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v115 + 7);
      uint64_t v56 = v44;
      uint64_t v57 = 1LL;
    }

    uint64_t v62 = v114;
    v55(v56, v57, 1LL, v114);
    uint64_t v63 = v42;
    uint64_t v58 = v62;
    sub_100117B2C(v40, v63, 0);
    goto LABEL_14;
  }

  uint64_t v43 = a4;
  uint64_t v44 = (uint64_t)v26;
  if (v39 != 1)
  {
    uint64_t v58 = v114;
    unint64_t v54 = v115;
    (*((void (**)(uint64_t, uint64_t, uint64_t, uint64_t))v115 + 7))(v44, 1LL, 1LL, v114);
LABEL_14:
    uint64_t v61 = v33;
    uint64_t v45 = v116;
    goto LABEL_15;
  }

  uint64_t v46 = v115;
  uint64_t v45 = v116;
  if (*(void *)(v38 + 16))
  {
    sub_10001DC4C( v38 + ((v115[80] + 32LL) & ~(unint64_t)v115[80]),  v44,  type metadata accessor for TimeBasedKey);
    uint64_t v47 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v46 + 7);
    uint64_t v48 = v44;
    uint64_t v49 = 0LL;
  }

  else
  {
    uint64_t v47 = (void (*)(uint64_t, uint64_t, uint64_t, uint64_t))*((void *)v115 + 7);
    uint64_t v48 = v44;
    uint64_t v49 = 1LL;
  }

  uint64_t v59 = v114;
  v47(v48, v49, 1LL, v114);
  uint64_t v60 = v42;
  uint64_t v58 = v59;
  unint64_t v54 = v115;
  sub_100117B2C(v40, v60, 1);
  uint64_t v61 = v33;
LABEL_15:
  sub_10001581C(v44, (uint64_t)v24, (uint64_t *)&unk_10099FB50);
  if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v54 + 6))(v24, 1LL, v58) == 1)
  {
    sub_100015794((uint64_t)v24, (uint64_t *)&unk_10099FB50);
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v65 = v64;
    uint64_t v117 = 14LL;
    unint64_t v66 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v67 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    _BridgedStoredNSError.init(_:userInfo:)(&v122, &v117, v66, v65, v67);
    *os_log_type_t v20 = v122;
    swift_storeEnumTagMultiPayload(v20, v103, 1LL);
    sub_10034D50C((uint64_t)v20, v45, v43);
    sub_100015794((uint64_t)v20, &qword_1009A7ED8);
    sub_100015794(v44, (uint64_t *)&unk_10099FB50);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v32, v111);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v119);
    return swift_release();
  }

  uint64_t v116 = (void (*)(void *, uint64_t))v44;
  uint64_t v68 = v109;
  sub_10002218C((uint64_t)v24, v109, type metadata accessor for TimeBasedKey);
  id v69 = (__int128 *)(v68 + *(int *)(v58 + 24));
  __int128 v70 = v69[2];
  __int128 v71 = *v69;
  __int128 v123 = v69[1];
  __int128 v124 = v70;
  __int128 v122 = v71;
  sub_1002DAC30( &v122,  (void (*)(void, void))sub_1002DDE24,  (void (*)(uint64_t, uint64_t))sub_10001736C,  (void (*)(uint64_t, uint64_t))sub_100018BE4);
  uint64_t v72 = sub_1004DA048();
  uint64_t v74 = v73;
  sub_1002DAC30( &v122,  (void (*)(void, void))sub_1002DDE20,  (void (*)(uint64_t, uint64_t))sub_100016F9C,  (void (*)(uint64_t, uint64_t))sub_1000182F0);
  sub_100178C64(6LL, v72, v74);
  uint64_t v75 = v117;
  unint64_t v76 = v118;
  sub_10001736C(v117, v118);
  id v77 = v107;
  MACAddress.init(addressToSanitize:type:)(v75, v76, 1LL);
  uint64_t v79 = v112;
  uint64_t v78 = v113;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v112 + 48))(v77, 1LL, v113) != 1)
  {
    uint64_t v114 = v61;
    uint64_t v115 = v32;
    BOOL v107 = *(char **)(v79 + 32);
    ((void (*)(char *, char *, uint64_t))v107)(v108, v77, v78);
    sub_100016F9C(v75, v76);
    uint64_t v80 = v120;
    uint64_t v81 = v121;
    sub_100012ED8(v119, v120);
    uint64_t v82 = (*(uint64_t (**)(uint64_t, uint64_t))(v81 + 168))(v80, v81);
    char v84 = 2;
    if (v83 >> 60 != 15)
    {
      uint64_t v85 = v82;
      unint64_t v86 = v83;
      BOOL v87 = sub_1005E2550(v82, v83);
      sub_1000182F0(v85, v86);
      if (v87) {
        char v84 = 3;
      }
      else {
        char v84 = 2;
      }
    }

    uint64_t v88 = type metadata accessor for TaskPriority(0LL);
    uint64_t v89 = (uint64_t)v106;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v88 - 8) + 56LL))(v106, 1LL, 1LL, v88);
    uint64_t v90 = v112;
    uint64_t v91 = v113;
    id v92 = v105;
    uint64_t v93 = v108;
    (*(void (**)(char *, char *, uint64_t))(v112 + 16))(v105, v108, v113);
    uint64_t v94 = *(unsigned __int8 *)(v90 + 80);
    uint64_t v95 = (v94 + 32) & ~v94;
    uint64_t v96 = v95 + v104;
    unint64_t v97 = (v95 + v104) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v98 = swift_allocObject(&unk_10094E0C8, v97 + 24, v94 | 7);
    unint64_t v99 = v97 + v98;
    *(void *)(v98 + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(v98 + 24) = 0LL;
    ((void (*)(uint64_t, char *, uint64_t))v107)(v98 + v95, v92, v91);
    *(_BYTE *)(v98 + v96) = v84;
    uint64_t v100 = v114;
    *(void *)(v99 + 8) = sub_1002DD12C;
    *(void *)(v99 + swift_weakDestroy(v0 + 16) = v100;
    swift_retain();
    sub_1003EDB00(v89, (uint64_t)&unk_1009A7EE8, v98);
    swift_release();
    (*(void (**)(char *, uint64_t))(v90 + 8))(v93, v91);
    sub_100018C68(v109, type metadata accessor for TimeBasedKey);
    sub_100015794((uint64_t)v116, (uint64_t *)&unk_10099FB50);
    (*(void (**)(char *, uint64_t))(v110 + 8))(v115, v111);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v119);
    return swift_release();
  }

  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1002DD12C(uint64_t a1)
{
  return sub_10034D50C(a1, *(void (**)(void *, uint64_t))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1002DD138(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for MACAddress(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  uint64_t v7 = (v6 & 0xFFFFFFFFFFFFFFF8LL) + v1;
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = *(void *)(v1 + 24);
  uint64_t v10 = v1 + v5;
  uint64_t v11 = *(void *)(v7 + 8);
  uint64_t v12 = *(void *)(v7 + 16);
  char v13 = *(_BYTE *)(v1 + v6);
  uint64_t v14 = (void *)swift_task_alloc(dword_1009A7EE4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_100015D58;
  return sub_1002B23E8(a1, v8, v9, v10, v13, v11, v12);
}

uint64_t sub_1002DD1F0(uint64_t a1)
{
  return sub_10034D3F4(a1, *(void (**)(void *, uint64_t))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1002DD1FC()
{
  uint64_t v1 = type metadata accessor for MACAddress(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8LL) + v0;
  unint64_t v8 = (v5 & 0xFFFFFFFFFFFFFFF8LL) + 24;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v7 + 16));
  return swift_deallocObject(v0, v8, v6);
}

uint64_t sub_1002DD28C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for MACAddress(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  uint64_t v7 = (v6 & 0xFFFFFFFFFFFFFFF8LL) + v1;
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v9 = *(void *)(v1 + 24);
  uint64_t v10 = v1 + v5;
  uint64_t v11 = *(void *)(v7 + 8);
  uint64_t v12 = *(void *)(v7 + 16);
  char v13 = *(_BYTE *)(v1 + v6);
  uint64_t v14 = (void *)swift_task_alloc(dword_1009A7EFC);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_100015D58;
  return sub_1002B219C(a1, v8, v9, v10, v13, v11, v12);
}

uint64_t sub_1002DD344()
{
  uint64_t v1 = type metadata accessor for LostModeRecord(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002DD424(uint64_t a1)
{
  return sub_1002DDC20( a1,  type metadata accessor for LostModeRecord,  (uint64_t (*)(uint64_t, void, void, uint64_t))sub_100503A78);
}

uint64_t sub_1002DD438(uint64_t a1)
{
  return sub_100503FC8(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1002DD440()
{
  uint64_t v1 = type metadata accessor for LostModeRecord(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v7 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1002DD548(uint64_t a1)
{
  return sub_1002DDD88( a1,  type metadata accessor for LostModeRecord,  (uint64_t (*)(uint64_t, unint64_t, void, void, void))sub_10054CE28);
}

uint64_t sub_1002DD55C(uint64_t a1)
{
  return sub_1005031E8(a1, *(void *)(v1 + 16), *(id **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1002DD578()
{
  return sub_1002DD750( (void (*)(void))&_swift_bridgeObjectRelease,  (void (*)(void))&_swift_release);
}

uint64_t sub_1002DD58C()
{
  return sub_100293B64( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void (**)(void *))(v0 + 32),  *(void *)(v0 + 40));
}

uint64_t sub_1002DD598()
{
  return sub_1002DD5A0(40LL);
}

uint64_t sub_1002DD5A0(uint64_t a1)
{
  return swift_deallocObject(v1, a1, 7LL);
}

uint64_t sub_1002DD5D8()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = swift_task_alloc(dword_1009A7F2C);
  __int128 v4 = *(_OWORD *)(v0 + 16);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)uint64_t v3 = v1;
  *(void *)(v3 + 8) = sub_100015D58;
  *(void *)(v3 + 152) = v2;
  *(_OWORD *)(v3 + 136) = v4;
  return swift_task_switch(sub_100294DC0, 0LL, 0LL);
}

uint64_t sub_1002DD640()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002DD6BC()
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  uint64_t v3 = v0[2];
  uint64_t v4 = v0[3];
  uint64_t v5 = v0[4];
  uint64_t v6 = (uint64_t)v0 + ((v2 + 40) & ~v2);
  uint64_t v7 = (void *)swift_task_alloc(dword_1009A7F3C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_100015D58;
  return sub_1002956A0(v3, v4, v5, v6);
}

uint64_t sub_1002DD73C()
{
  return sub_1002DD750( (void (*)(void))&_swift_bridgeObjectRelease,  (void (*)(void))&_swift_release);
}

uint64_t sub_1002DD750(void (*a1)(void), void (*a2)(void))
{
  return swift_deallocObject(v2, 48LL, 7LL);
}

uint64_t sub_1002DD794()
{
  return sub_100290AAC(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1002DD7A0()
{
  return sub_10020F99C((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_1002DD7AC@<X0>(void *a1@<X8>)
{
  return sub_10037D160(*(void **)(v1 + 16), *(void *)(v1 + 24), a1);
}

void sub_1002DD7C8(uint64_t a1)
{
}

uint64_t sub_1002DD7E8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002DD80C()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v7 + *(int *)(v1 + 24);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  uint64_t v10 = v7 + *(int *)(v1 + 28);
  uint64_t v11 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1002DD908()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 17) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v7 + *(int *)(v1 + 24);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  uint64_t v10 = v7 + *(int *)(v1 + 28);
  uint64_t v11 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002DD9D4(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnedBeaconGroup(0LL) - 8) + 80LL);
  return sub_10028EF78(a1, *(_BYTE *)(v1 + 16), v1 + ((v3 + 17) & ~v3));
}

uint64_t sub_1002DDA14()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + *(int *)(v1 + 24);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  uint64_t v10 = v7 + *(int *)(v1 + 28);
  uint64_t v11 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002DDAF0(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnedBeaconGroup(0LL) - 8) + 80LL);
  return sub_10028F040( a1,  *(unsigned __int8 *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  v1 + ((v3 + 48) & ~v3));
}

uint64_t sub_1002DDB38()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + *(int *)(v1 + 24);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  uint64_t v10 = v7 + *(int *)(v1 + 28);
  uint64_t v11 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1002DDC0C(uint64_t a1)
{
  return sub_1002DDC20( a1,  type metadata accessor for OwnedBeaconGroup,  (uint64_t (*)(uint64_t, void, void, uint64_t))sub_100503A5C);
}

uint64_t sub_1002DDC20( uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, void, void, uint64_t))
{
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(a2(0LL) - 8) + 80LL);
  return a3(a1, *(void *)(v3 + 16), *(void *)(v3 + 24), v3 + ((v5 + 32) & ~v5));
}

uint64_t sub_1002DDC70(uint64_t a1)
{
  return sub_100503FB0(a1, *(void (**)(void *))(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1002DDC78()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v7 + *(int *)(v1 + 24);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  uint64_t v10 = v7 + *(int *)(v1 + 28);
  uint64_t v11 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1002DDD74(uint64_t a1)
{
  return sub_1002DDD88( a1,  type metadata accessor for OwnedBeaconGroup,  (uint64_t (*)(uint64_t, unint64_t, void, void, void))sub_10054CDE4);
}

uint64_t sub_1002DDD88( uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, unint64_t, void, void, void))
{
  uint64_t v5 = *(void *)(a2(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return a3( a1,  v3 + v6,  *(void *)(v3 + v7),  *(void *)(v3 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v3 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_1002DDDF8(uint64_t a1)
{
  return sub_1005031BC(a1, *(void *)(v1 + 16), *(id **)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1002DDE14()
{
  return sub_10020F99C((void (*)(void))&_swift_errorRelease);
}

BOOL sub_1002DDE28(uint64_t a1)
{
  return sub_1002D7270(a1);
}

uint64_t sub_1002DDE40(uint64_t a1)
{
  return sub_100246EF4(a1) & 1;
}

uint64_t sub_1002DDE58(uint64_t a1)
{
  return sub_1000DF788(a1);
}

uint64_t sub_1002DDE74@<X0>(void *a1@<X8>)
{
  return sub_1002D728C(a1);
}

uint64_t sub_1002DDFC0@<X0>(uint64_t a1@<X8>)
{
  return sub_1002D63DC(a1);
}

uint64_t sub_1002DDFD4@<X0>(void *a1@<X8>)
{
  return sub_1002D72FC(a1);
}

void sub_1002DE010(char *a1, int a2, void *aBlock, void (*a4)(uint64_t, void *))
{
  unint64_t v6 = _Block_copy(aBlock);
  uint64_t v7 = *(void *)&a1[OBJC_IVAR____TtC12searchpartyd28AccessoryDiscoveryTrampoline_implementation];
  _Block_copy(v6);
  uint64_t v8 = a1;
  a4(v7, v6);
  _Block_release(v6);
  _Block_release(v6);
}

id sub_1002DE35C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for AccessoryDiscoveryTrampoline();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for AccessoryDiscoveryTrampoline()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd28AccessoryDiscoveryTrampoline);
}

uint64_t sub_1002DE3BC()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1002DE3E0(uint64_t a1, uint64_t a2, uint64_t a3, char a4, char a5, char a6)
{
  *(_BYTE *)(v7 + 570) = a6;
  *(_BYTE *)(v7 + 569) = a5;
  *(_BYTE *)(v7 + 568) = a4;
  *(void *)(v7 + 376) = a3;
  *(void *)(v7 + 384) = v6;
  *(void *)(v7 + 360) = a1;
  *(void *)(v7 + 368) = a2;
  uint64_t v8 = type metadata accessor for TimeBasedKey(0LL);
  *(void *)(v7 + 392) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v7 + 400) = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v7 + 408) = swift_task_alloc(v10);
  *(void *)(v7 + 4swift_weakDestroy(v0 + 16) = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for Date(0LL);
  *(void *)(v7 + 424) = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  *(void *)(v7 + 432) = v12;
  *(void *)(v7 + 4sub_10016CF88(v0 + 40) = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DateInterval(0LL);
  *(void *)(v7 + 448) = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  *(void *)(v7 + 456) = v14;
  *(void *)(v7 + 464) = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  *(void *)(v7 + 472) = v15;
  *(void *)(v7 + 480) = swift_task_alloc((*(void *)(*(void *)(v15 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for UUID(0LL);
  *(void *)(v7 + 488) = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  *(void *)(v7 + 496) = v17;
  unint64_t v18 = (*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v7 + 504) = swift_task_alloc(v18);
  *(void *)(v7 + 512) = swift_task_alloc(v18);
  *(void *)(v7 + 520) = swift_task_alloc(v18);
  *(void *)(v7 + 528) = swift_task_alloc(v18);
  uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  *(void *)(v7 + 536) = swift_task_alloc((*(void *)(*(void *)(v19 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for OwnedBeaconRecord(0LL);
  *(void *)(v7 + 544) = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  *(void *)(v7 + 552) = v21;
  *(void *)(v7 + 560) = swift_task_alloc((*(void *)(v21 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1002DE570, 0LL, 0LL);
}

uint64_t sub_1002DE570()
{
  int v2 = *(unsigned __int8 *)(v1 + 569);
  *(void *)(v1 + 344) = _swiftEmptyArrayStorage;
  if (v2 == 1)
  {
    uint64_t v3 = *(void *)(v1 + 552);
    uint64_t v4 = *(void *)(v1 + 544);
    uint64_t v5 = *(void *)(v1 + 536);
    sub_100013044(*(void *)(v1 + 360), v1 + 160);
    uint64_t v6 = sub_100004AEC(&qword_1009B0530);
    int v7 = swift_dynamicCast(v5, v1 + 160, v6, v4, 6LL);
    uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t, void))(v3 + 56);
    if (v7)
    {
      uint64_t v142 = (char *)(v1 + 344);
      uint64_t v9 = (char *)(v1 + 328);
      uint64_t v10 = *(void *)(v1 + 560);
      uint64_t v11 = *(void *)(v1 + 536);
      v8(v11, 0LL, 1LL, *(void *)(v1 + 544));
      uint64_t v12 = sub_10002218C(v11, v10, type metadata accessor for OwnedBeaconRecord);
      unint64_t v0 = static os_log_type_t.error.getter(v12);
      if (qword_10099B3E8 == -1) {
        goto LABEL_4;
      }
      goto LABEL_43;
    }

    uint64_t v53 = *(void *)(v1 + 536);
    v8(v53, 1LL, 1LL, *(void *)(v1 + 544));
    uint64_t v54 = sub_100015794(v53, (uint64_t *)&unk_1009A9C30);
    uint64_t v55 = static os_log_type_t.error.getter(v54);
    if (qword_10099B3E8 != -1) {
      swift_once(&qword_10099B3E8, sub_1003E02E8);
    }
    unsigned int v172 = 2;
    os_log(_:dso:log:_:_:)( v55,  &_mh_execute_header,  qword_100A2A8F0,  "Can't use forceGenerate for a SharedBeaconRecord!",  49LL,  2LL,  _swiftEmptyArrayStorage);
LABEL_72:
    swift_bridgeObjectRelease();
    uint64_t v167 = 0LL;
    uint64_t v176 = 0LL;
    goto LABEL_73;
  }

  uint64_t v142 = (char *)(v1 + 344);
  uint64_t v9 = *(char **)(v1 + 368);
  if (*(void *)(v1 + 376) < (unint64_t)v9)
  {
LABEL_42:
    __break(1u);
LABEL_43:
    swift_once(&qword_10099B3E8, sub_1003E02E8);
LABEL_4:
    uint64_t v13 = *(void *)(v1 + 560);
    unint64_t v15 = *(void *)(v1 + 368);
    unint64_t v14 = *(void *)(v1 + 376);
    char v16 = *(_BYTE *)(v1 + 568);
    os_log(_:dso:log:_:_:)( v0,  &_mh_execute_header,  qword_100A2A8F0,  "*** forceGenerate triggered ***",  31LL,  2LL,  _swiftEmptyArrayStorage);
    *(void *)(v1 + 328) = v15;
    unint64_t v0 = swift_task_alloc(48LL);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v13;
    *(void *)(v0 + 24) = v9;
    *(_BYTE *)(v0 + 32) = v16;
    uint64_t v9 = v142;
    *(void *)(v0 + sub_10016CF88(v0 + 40) = v142;
    sub_1007C189C( v13,  v16,  v15,  v14,  (void (*)(unint64_t, uint64_t, unint64_t, _OWORD *))sub_1002E1DCC);
LABEL_37:
    sub_100018C68(*(void *)(v1 + 560), type metadata accessor for OwnedBeaconRecord);
    swift_task_dealloc(v0);
    uint64_t v176 = 0LL;
    uint64_t v56 = *(void *)v9;
    goto LABEL_38;
  }

  uint64_t v17 = 0LL;
  uint64_t v155 = *(void *)(v1 + 496);
  uint64_t v147 = (_OWORD *)(v1 + 16);
  uint64_t v154 = *(void *)(v1 + 472);
  uint64_t v163 = (_OWORD *)(v1 + 112);
  uint64_t v152 = (void *)(v1 + 200);
  uint64_t v151 = *(void *)(v1 + 456);
  uint64_t v145 = *(void *)(v1 + 400);
  uint64_t v146 = *(void *)(v1 + 432);
  uint64_t v144 = *(void *)(v1 + 392);
  unint64_t v18 = _swiftEmptyArrayStorage;
  uint64_t v19 = *(void *)(v1 + 360);
  BOOL v20 = 1;
  uint64_t v162 = v19;
  uint64_t v153 = (_OWORD *)(v1 + 64);
  while (1)
  {
    int v27 = *(unsigned __int8 *)(v1 + 568);
    uint64_t v28 = *(void *)(v19 + 24);
    uint64_t v29 = *(void *)(v19 + 32);
    sub_100012ED8(*(void **)(v1 + 360), v28);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v29 + 8) + 8LL) + 32LL))(v28);
    uint64_t v171 = v17;
    BOOL v166 = v20;
    if (v27)
    {
      if (v27 == 1)
      {
        *(void *)(v1 + 264) = &type metadata for SecondaryIndex;
        unint64_t v30 = sub_1000868A0();
      }

      else
      {
        *(void *)(v1 + 264) = &type metadata for SecureLocationsIndex;
        unint64_t v30 = sub_10008685C();
      }
    }

    else
    {
      *(void *)(v1 + 264) = &type metadata for PrimaryIndex;
      unint64_t v30 = sub_1000868E4();
    }

    *(void *)(v1 + 272) = v30;
    *(void *)(v1 + 2sub_10016CF88(v0 + 40) = v9;
    uint64_t v31 = *(void *)(v1 + 528);
    uint64_t v32 = *(void *)(v1 + 480);
    uint64_t v33 = *(void *)(v1 + 488);
    int v34 = *(unsigned __int8 *)(v1 + 570);
    sub_100012EC0((__int128 *)(v1 + 240), (uint64_t)v152);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v155 + 16))(v32, v31, v33);
    sub_100013044((uint64_t)v152, v32 + *(int *)(v154 + 20));
    sub_10079C86C(v32, v34, v163);
    unint64_t v156 = *(void *)(v1 + 120);
    uint64_t v157 = *(void *)(v1 + 112);
    unint64_t v158 = *(void *)(v1 + 136);
    uint64_t v159 = *(void *)(v1 + 128);
    unint64_t v160 = *(void *)(v1 + 152);
    uint64_t v161 = *(void *)(v1 + 144);
    sub_100018C68(v32, type metadata accessor for BeaconKeyManager.IndexInformation);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v152);
    unint64_t v0 = *(void *)(v155 + 8);
    ((void (*)(uint64_t, uint64_t))v0)(v31, v33);
    sub_1002E1CF4((uint64_t)v163, (uint64_t)v153);
    BOOL v20 = *(void *)(v1 + 88) >> 60 != 15LL;
    if (*(void *)(v1 + 88) >> 60 == 15LL) {
      break;
    }
    uint64_t v143 = (void (*)(uint64_t, uint64_t))v0;
    uint64_t v35 = *(void *)(v1 + 464);
    uint64_t v36 = *(char **)(v1 + 440);
    uint64_t v37 = *(char **)(v1 + 416);
    uint64_t v148 = *(void *)(v1 + 424);
    uint64_t v149 = *(void *)(v1 + 448);
    uint64_t v150 = *(void *)(v1 + 408);
    uint64_t v38 = *(void **)(v1 + 360);
    __int128 v39 = *(_OWORD *)(v1 + 80);
    *uint64_t v147 = *v153;
    *(_OWORD *)(v1 + 32) = v39;
    *(_OWORD *)(v1 + 48) = *(_OWORD *)(v1 + 96);
    uint64_t v41 = *(void *)(v162 + 24);
    uint64_t v40 = *(void *)(v162 + 32);
    char v42 = *(_BYTE *)(v1 + 568);
    sub_100012ED8(v38, v41);
    (*(void (**)(uint64_t, uint64_t))(v40 + 184))(v41, v40);
    unint64_t v43 = sub_1002DF51C(v42);
    sub_1003DB840(v36, (uint64_t)v9, v43, v35);
    (*(void (**)(char *, uint64_t))(v146 + 8))(v36, v148);
    (*(void (**)(char *, uint64_t, uint64_t))(v151 + 16))(&v37[*(int *)(v144 + 20)], v35, v149);
    *(void *)uint64_t v37 = v9;
    uint64_t v44 = &v37[*(int *)(v144 + 24)];
    __int128 v46 = *(_OWORD *)(v1 + 32);
    __int128 v45 = *(_OWORD *)(v1 + 48);
    *(_OWORD *)uint64_t v44 = *v147;
    *((_OWORD *)v44 + 1) = v46;
    *((_OWORD *)v44 + 2) = v45;
    sub_1002E1D88((uint64_t)v37, v150);
    unint64_t v0 = *(void *)(v1 + 344);
    sub_100018BE4(v157, v156);
    sub_10001736C(v159, v158);
    sub_100018BE4(v161, v160);
    if ((swift_isUniquelyReferenced_nonNull_native(v0) & 1) == 0) {
      unint64_t v0 = sub_1004C51D4(0, *(void *)(v0 + 16) + 1LL, 1, v0);
    }
    unint64_t v48 = *(void *)(v0 + 16);
    unint64_t v47 = *(void *)(v0 + 24);
    uint64_t v19 = v162;
    if (v48 >= v47 >> 1) {
      unint64_t v0 = sub_1004C51D4(v47 > 1, v48 + 1, 1, v0);
    }
    uint64_t v49 = *(void *)(v1 + 408);
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v48 + 1;
    sub_10002218C( v49,  v0 + ((*(unsigned __int8 *)(v145 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v145 + 80))
    + *(void *)(v145 + 72) * v48,
      type metadata accessor for TimeBasedKey);
    *(void *)(v1 + 344) = v0;
    if (!v166)
    {
      uint64_t v50 = v9 - 1;
      if (!v9) {
        goto LABEL_40;
      }
      if (v50 < v171) {
        goto LABEL_41;
      }
      if ((swift_isUniquelyReferenced_nonNull_native(v18) & 1) == 0) {
        unint64_t v18 = sub_1004C50C8(0LL, v18[2] + 1LL, 1, v18);
      }
      unint64_t v52 = v18[2];
      unint64_t v51 = v18[3];
      if (v52 >= v51 >> 1) {
        unint64_t v18 = sub_1004C50C8((void *)(v51 > 1), v52 + 1, 1, v18);
      }
      v18[2] = v52 + 1;
      uint64_t v21 = &v18[2 * v52];
      v21[4] = v171;
      v21[5] = v50;
    }

    unint64_t v0 = *(void *)(v1 + 464);
    uint64_t v22 = *(void *)(v1 + 448);
    uint64_t v23 = *(void *)(v1 + 416);
    uint64_t v24 = *(char **)(v1 + 376);
    sub_100246250((uint64_t)v163);
    sub_100018C68(v23, type metadata accessor for TimeBasedKey);
    uint64_t isUniquelyReferenced_nonNull_native = (*(uint64_t (**)(unint64_t, uint64_t))(v151 + 8))(v0, v22);
    if (v9 == v24) {
      goto LABEL_49;
    }
    uint64_t v17 = 0LL;
    BOOL v20 = 1;
LABEL_10:
    if (__CFADD__(v9++, 1LL))
    {
      __break(1u);
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      goto LABEL_42;
    }
  }

  uint64_t v17 = v171;
  if (v166) {
    uint64_t v17 = v9;
  }
  if (v9 != *(char **)(v1 + 376))
  {
    uint64_t v19 = v162;
    goto LABEL_10;
  }

  if (v17 > v9)
  {
    __break(1u);
    goto LABEL_37;
  }

  uint64_t v143 = (void (*)(uint64_t, uint64_t))v0;
  uint64_t v19 = v162;
  uint64_t v57 = v18;
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v18);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1004C50C8(0LL, v18[2] + 1LL, 1, v18);
    uint64_t v57 = (void *)isUniquelyReferenced_nonNull_native;
  }

  unint64_t v59 = v57[2];
  unint64_t v58 = v57[3];
  if (v59 >= v58 >> 1)
  {
    uint64_t isUniquelyReferenced_nonNull_native = (uint64_t)sub_1004C50C8((void *)(v58 > 1), v59 + 1, 1, v57);
    uint64_t v57 = (void *)isUniquelyReferenced_nonNull_native;
  }

  uint64_t v60 = *(void *)(v1 + 376);
  unint64_t v18 = v57;
  v57[2] = v59 + 1;
  uint64_t v61 = &v57[2 * v59];
  v61[4] = v17;
  v61[5] = v60;
LABEL_49:
  if (!*(void *)(*(void *)v142 + 16LL))
  {
    uint64_t v82 = v19;
    uint64_t v83 = swift_bridgeObjectRelease();
    unsigned int v177 = static os_log_type_t.error.getter(v83);
    if (qword_10099B3E8 != -1) {
      swift_once(&qword_10099B3E8, sub_1003E02E8);
    }
    uint64_t v84 = *(void *)(v1 + 504);
    uint64_t v85 = *(void **)(v1 + 384);
    int v86 = *(unsigned __int8 *)(v1 + 568);
    BOOL v87 = *(void **)(v1 + 360);
    uint64_t v169 = *(void *)(v1 + 488);
    uint64_t v174 = qword_100A2A8F0;
    uint64_t v88 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v89 = swift_allocObject(v88, 272LL, 7LL);
    *(_OWORD *)(v89 + swift_weakDestroy(v0 + 16) = xmmword_1007E82A0;
    *(void *)(v1 + 312) = *v85;
    uint64_t v90 = sub_100004AEC(&qword_1009A8030);
    uint64_t v91 = String.init<A>(describing:)(v1 + 312, v90);
    uint64_t v93 = v92;
    *(void *)(v89 + 56) = &type metadata for String;
    unint64_t v94 = sub_1000226F4();
    *(void *)(v89 + 32) = v91;
    *(void *)(v89 + sub_10016CF88(v0 + 40) = v93;
    *(void *)(v89 + 96) = &type metadata for String;
    *(void *)(v89 + 104) = v94;
    *(void *)(v89 + 64) = v94;
    *(void *)(v89 + 72) = 0xD00000000000004DLL;
    *(void *)(v89 + 80) = 0x800000010085CBD0LL;
    uint64_t v95 = *(void *)(v82 + 24);
    uint64_t v96 = *(void *)(v82 + 32);
    sub_100012ED8(v87, v95);
    uint64_t v97 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v96 + 8) + 8LL) + 32LL))(v95);
    uint64_t v98 = UUID.uuidString.getter(v97);
    uint64_t v100 = v99;
    v143(v84, v169);
    *(void *)(v89 + 136) = &type metadata for String;
    *(void *)(v89 + 144) = v94;
    *(void *)(v89 + 112) = v98;
    *(void *)(v89 + 120) = v100;
    if (v86)
    {
      if (v86 == 1)
      {
        unint64_t v101 = 0x61646E6F6365732ELL;
        unint64_t v102 = 0xEA00000000007972LL;
      }

      else
      {
        unint64_t v102 = 0x80000001008533C0LL;
        unint64_t v101 = 0xD000000000000010LL;
      }
    }

    else
    {
      unint64_t v102 = 0xE800000000000000LL;
      unint64_t v101 = 0x7972616D6972702ELL;
    }

    uint64_t v127 = v174;
    uint64_t v129 = *(void *)(v1 + 368);
    uint64_t v128 = *(void *)(v1 + 376);
    *(void *)(v89 + 176) = &type metadata for String;
    *(void *)(v89 + 184) = v94;
    *(void *)(v89 + 152) = v101;
    *(void *)(v89 + 160) = v102;
    *(void *)(v89 + 2swift_weakDestroy(v0 + 16) = &type metadata for UInt64;
    *(void *)(v89 + 224) = &protocol witness table for UInt64;
    *(void *)(v89 + 192) = v129;
    *(void *)(v89 + 256) = &type metadata for UInt64;
    *(void *)(v89 + 264) = &protocol witness table for UInt64;
    *(void *)(v89 + 232) = v128;
    unsigned int v172 = 2;
    os_log(_:dso:log:_:_:)( v177,  &_mh_execute_header,  v127,  "%@: %@. Unable to obtain keys for beacon %{mask.hash}@, sequence %@, index %llu - %llu",  86LL,  2LL,  v89);
    swift_bridgeObjectRelease();
    goto LABEL_72;
  }

  if (!v18[2])
  {
    uint64_t v103 = v19;
    uint64_t v104 = swift_bridgeObjectRelease();
    unsigned int v178 = static os_log_type_t.default.getter(v104);
    if (qword_10099B3E8 != -1) {
      swift_once(&qword_10099B3E8, sub_1003E02E8);
    }
    uint64_t v105 = *(void *)(v1 + 520);
    uint64_t v106 = *(void **)(v1 + 384);
    int v107 = *(unsigned __int8 *)(v1 + 568);
    id v108 = *(void **)(v1 + 360);
    uint64_t v170 = *(void *)(v1 + 488);
    uint64_t v175 = qword_100A2A8F0;
    uint64_t v109 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v110 = swift_allocObject(v109, 272LL, 7LL);
    *(_OWORD *)(v110 + swift_weakDestroy(v0 + 16) = xmmword_1007E82A0;
    *(void *)(v1 + 304) = *v106;
    uint64_t v111 = sub_100004AEC(&qword_1009A8030);
    uint64_t v112 = String.init<A>(describing:)(v1 + 304, v111);
    uint64_t v114 = v113;
    *(void *)(v110 + 56) = &type metadata for String;
    unint64_t v115 = sub_1000226F4();
    *(void *)(v110 + 32) = v112;
    *(void *)(v110 + sub_10016CF88(v0 + 40) = v114;
    *(void *)(v110 + 96) = &type metadata for String;
    *(void *)(v110 + 104) = v115;
    *(void *)(v110 + 64) = v115;
    *(void *)(v110 + 72) = 0xD00000000000004DLL;
    *(void *)(v110 + 80) = 0x800000010085CBD0LL;
    uint64_t v116 = *(void *)(v103 + 24);
    uint64_t v117 = *(void *)(v103 + 32);
    sub_100012ED8(v108, v116);
    uint64_t v118 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v117 + 8) + 8LL) + 32LL))(v116);
    uint64_t v119 = UUID.uuidString.getter(v118);
    uint64_t v121 = v120;
    v143(v105, v170);
    *(void *)(v110 + 136) = &type metadata for String;
    *(void *)(v110 + 144) = v115;
    *(void *)(v110 + 112) = v119;
    *(void *)(v110 + 120) = v121;
    if (v107)
    {
      if (v107 == 1)
      {
        unint64_t v122 = 0x61646E6F6365732ELL;
        unint64_t v123 = 0xEA00000000007972LL;
      }

      else
      {
        unint64_t v123 = 0x80000001008533C0LL;
        unint64_t v122 = 0xD000000000000010LL;
      }
    }

    else
    {
      unint64_t v123 = 0xE800000000000000LL;
      unint64_t v122 = 0x7972616D6972702ELL;
    }

    uint64_t v141 = *(void *)(v1 + 368);
    uint64_t v140 = *(void *)(v1 + 376);
    *(void *)(v110 + 176) = &type metadata for String;
    *(void *)(v110 + 184) = v115;
    *(void *)(v110 + 152) = v122;
    *(void *)(v110 + 160) = v123;
    *(void *)(v110 + 2swift_weakDestroy(v0 + 16) = &type metadata for UInt64;
    *(void *)(v110 + 224) = &protocol witness table for UInt64;
    *(void *)(v110 + 192) = v141;
    *(void *)(v110 + 256) = &type metadata for UInt64;
    *(void *)(v110 + 264) = &protocol witness table for UInt64;
    *(void *)(v110 + 232) = v140;
    os_log(_:dso:log:_:_:)( v178,  &_mh_execute_header,  v175,  "%{public}@: %{public}@. Keys for Beacon %{mask.hash}@, sequence %{public}@, index %llu - %llu",  93LL,  2LL,  v110);
    swift_bridgeObjectRelease();
    uint64_t v176 = 0LL;
    uint64_t v56 = *(void *)(v1 + 344);
LABEL_38:
    uint64_t v167 = v56;
    unsigned int v172 = 1;
    goto LABEL_73;
  }

  uint64_t v62 = v19;
  uint64_t v176 = v18;
  unsigned int v168 = static os_log_type_t.error.getter(isUniquelyReferenced_nonNull_native);
  if (qword_10099B3E8 != -1) {
    swift_once(&qword_10099B3E8, sub_1003E02E8);
  }
  uint64_t v63 = *(void *)(v1 + 512);
  uint64_t v173 = *(void *)(v1 + 488);
  uint64_t v64 = *(void **)(v1 + 384);
  int v65 = *(unsigned __int8 *)(v1 + 568);
  unint64_t v66 = *(void **)(v1 + 360);
  uint64_t v164 = qword_100A2A8F0;
  uint64_t v67 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v68 = swift_allocObject(v67, 312LL, 7LL);
  *(_OWORD *)(v68 + swift_weakDestroy(v0 + 16) = xmmword_1007E4060;
  *(void *)(v1 + 320) = *v64;
  uint64_t v69 = sub_100004AEC(&qword_1009A8030);
  uint64_t v70 = String.init<A>(describing:)(v1 + 320, v69);
  uint64_t v72 = v71;
  *(void *)(v68 + 56) = &type metadata for String;
  unint64_t v73 = sub_1000226F4();
  *(void *)(v68 + 32) = v70;
  *(void *)(v68 + sub_10016CF88(v0 + 40) = v72;
  *(void *)(v68 + 96) = &type metadata for String;
  *(void *)(v68 + 104) = v73;
  *(void *)(v68 + 64) = v73;
  *(void *)(v68 + 72) = 0xD00000000000004DLL;
  *(void *)(v68 + 80) = 0x800000010085CBD0LL;
  uint64_t v74 = *(void *)(v62 + 24);
  uint64_t v75 = *(void *)(v62 + 32);
  sub_100012ED8(v66, v74);
  uint64_t v76 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v75 + 8) + 8LL) + 32LL))(v74);
  uint64_t v77 = UUID.uuidString.getter(v76);
  uint64_t v79 = v78;
  v143(v63, v173);
  *(void *)(v68 + 136) = &type metadata for String;
  *(void *)(v68 + 144) = v73;
  *(void *)(v68 + 112) = v77;
  *(void *)(v68 + 120) = v79;
  if (v65)
  {
    if (v65 == 1)
    {
      unint64_t v80 = 0x61646E6F6365732ELL;
      unint64_t v81 = 0xEA00000000007972LL;
    }

    else
    {
      unint64_t v81 = 0x80000001008533C0LL;
      unint64_t v80 = 0xD000000000000010LL;
    }
  }

  else
  {
    unint64_t v81 = 0xE800000000000000LL;
    unint64_t v80 = 0x7972616D6972702ELL;
  }

  uint64_t v125 = *(void *)(v1 + 368);
  uint64_t v124 = *(void *)(v1 + 376);
  *(void *)(v68 + 176) = &type metadata for String;
  *(void *)(v68 + 184) = v73;
  *(void *)(v68 + 152) = v80;
  *(void *)(v68 + 160) = v81;
  *(void *)(v68 + 2swift_weakDestroy(v0 + 16) = &type metadata for UInt64;
  *(void *)(v68 + 224) = &protocol witness table for UInt64;
  *(void *)(v68 + 192) = v125;
  *(void *)(v68 + 256) = &type metadata for UInt64;
  *(void *)(v68 + 264) = &protocol witness table for UInt64;
  *(void *)(v68 + 232) = v124;
  *(void *)(v68 + 296) = sub_100004AEC(&qword_1009A8038);
  *(void *)(v68 + 304) = sub_1002E1D3C();
  *(void *)(v68 + 272) = v176;
  *(void *)&double v126 = swift_bridgeObjectRetain(v176).n128_u64[0];
  os_log(_:dso:log:_:_:)( v168,  &_mh_execute_header,  v164,  "%@: %@. Unable to obtain keys for beacon %{mask.hash}@, sequence %@, index %llu - %llu, gaps %@.",  96LL,  2LL,  v68,  v126);
  swift_bridgeObjectRelease();
  unsigned int v172 = 0;
  uint64_t v167 = *(void *)(v1 + 344);
LABEL_73:
  uint64_t v130 = *(void *)(v1 + 536);
  uint64_t v131 = *(void *)(v1 + 528);
  uint64_t v132 = *(void *)(v1 + 520);
  uint64_t v134 = *(void *)(v1 + 504);
  uint64_t v133 = *(void *)(v1 + 512);
  uint64_t v135 = *(void *)(v1 + 480);
  uint64_t v136 = *(void *)(v1 + 464);
  uint64_t v137 = *(void *)(v1 + 440);
  uint64_t v138 = *(void *)(v1 + 416);
  uint64_t v165 = *(void *)(v1 + 408);
  swift_task_dealloc(*(void *)(v1 + 560));
  swift_task_dealloc(v130);
  swift_task_dealloc(v131);
  swift_task_dealloc(v132);
  swift_task_dealloc(v133);
  swift_task_dealloc(v134);
  swift_task_dealloc(v135);
  swift_task_dealloc(v136);
  swift_task_dealloc(v137);
  swift_task_dealloc(v138);
  swift_task_dealloc(v165);
  return (*(uint64_t (**)(uint64_t, void *, void))(v1 + 8))(v167, v176, v172);
}

uint64_t sub_1002DF51C(char a1)
{
  if (a1)
  {
    if (a1 != 1) {
      return -1LL;
    }
    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
    uint64_t v1 = sub_1006A0BD8(v4);
  }

  else
  {
    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
    uint64_t v1 = sub_1006A0608(v4);
  }

  uint64_t v2 = v1;
  swift_bridgeObjectRelease();
  if (v2 < 0)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    __break(1u);
    return -1LL;
  }

  return v2;
}

uint64_t sub_1002DF670(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 120) = a3;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a1;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  *(void *)(v4 + sub_10016CF88(v0 + 40) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v4 + 48) = v7;
  *(void *)(v4 + 56) = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DateInterval(0LL);
  *(void *)(v4 + 64) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v4 + 72) = v9;
  *(void *)(v4 + 80) = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009AE460);
  *(void *)(v4 + 88) = v10;
  uint64_t v11 = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v4 + 96) = v11;
  uint64_t v12 = (void *)swift_task_alloc(dword_1009A8004);
  *(void *)(v4 + 104) = v12;
  *uint64_t v12 = v4;
  v12[1] = sub_1002DF74C;
  return sub_1002E0328(v11, a1);
}

uint64_t sub_1002DF74C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 104LL);
  *(void *)(*(void *)v1 + 112LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1002DF938;
  }
  else {
    uint64_t v3 = sub_1002DF7B0;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1002DF7B0()
{
  int v1 = *(unsigned __int8 *)(v0 + 120);
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  sub_100012ED8(v2, v3);
  char v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 112))(v3, v4);
  if (v1 == 1)
  {
    char v6 = v5;
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 56);
    uint64_t v24 = *(void *)(v0 + 48);
    uint64_t v25 = *(void *)(v0 + 40);
    uint64_t v9 = *(void *)(v0 + 96) + *(int *)(*(void *)(v0 + 88) + 36LL);
    uint64_t v11 = v2[3];
    uint64_t v10 = v2[4];
    sub_100012ED8(*(void **)(v0 + 16), v11);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8LL) + 32LL))(v11);
    sub_1002DFEA8(v6 & 1, v9, v8, v7);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v8, v25);
  }

  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 72) + 16LL))( *(void *)(v0 + 80),  *(void *)(v0 + 24),  *(void *)(v0 + 64));
  }

  uint64_t v12 = *(uint64_t **)(v0 + 96);
  uint64_t v14 = *(void *)(v0 + 72);
  uint64_t v13 = *(void *)(v0 + 80);
  uint64_t v16 = *(void *)(v0 + 56);
  uint64_t v15 = *(void *)(v0 + 64);
  unint64_t v18 = (char *)v2[3];
  uint64_t v17 = v2[4];
  uint64_t v19 = sub_100012ED8(*(void **)(v0 + 16), (uint64_t)v18);
  uint64_t v20 = sub_1002E0B08((uint64_t)v19, v13, v12, v18, v17);
  uint64_t v22 = v21;
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  sub_100015794((uint64_t)v12, (uint64_t *)&unk_1009AE460);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v20, v22);
}

uint64_t sub_1002DF938()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 96));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002DF984(uint64_t a1, uint64_t a2, char a3)
{
  *(void *)(v4 + 24) = a2;
  *(void *)(v4 + 32) = v3;
  *(_BYTE *)(v4 + 120) = a3;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a1;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  *(void *)(v4 + sub_10016CF88(v0 + 40) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v4 + 48) = v7;
  *(void *)(v4 + 56) = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DateInterval(0LL);
  *(void *)(v4 + 64) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v4 + 72) = v9;
  *(void *)(v4 + 80) = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009AE460);
  *(void *)(v4 + 88) = v10;
  uint64_t v11 = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v4 + 96) = v11;
  uint64_t v12 = (void *)swift_task_alloc(dword_1009A8004);
  *(void *)(v4 + 104) = v12;
  *uint64_t v12 = v4;
  v12[1] = sub_1002DFA60;
  return sub_1002E0328(v11, a1);
}

uint64_t sub_1002DFA60()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 104LL);
  *(void *)(*(void *)v1 + 112LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1002E25EC;
  }
  else {
    uint64_t v3 = sub_1002DFAC4;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1002DFAC4()
{
  int v1 = *(unsigned __int8 *)(v0 + 120);
  uint64_t v2 = *(void **)(v0 + 16);
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  sub_100012ED8(v2, v3);
  char v5 = (*(uint64_t (**)(uint64_t, uint64_t))(v4 + 112))(v3, v4);
  if (v1 == 1)
  {
    char v6 = v5;
    uint64_t v7 = *(void *)(v0 + 80);
    uint64_t v8 = *(void *)(v0 + 56);
    uint64_t v24 = *(void *)(v0 + 48);
    uint64_t v25 = *(void *)(v0 + 40);
    uint64_t v9 = *(void *)(v0 + 96) + *(int *)(*(void *)(v0 + 88) + 36LL);
    uint64_t v11 = v2[3];
    uint64_t v10 = v2[4];
    sub_100012ED8(*(void **)(v0 + 16), v11);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8LL) + 32LL))(v11);
    sub_1002DFEA8(v6 & 1, v9, v8, v7);
    (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v8, v25);
  }

  else
  {
    (*(void (**)(void, void, void))(*(void *)(v0 + 72) + 16LL))( *(void *)(v0 + 80),  *(void *)(v0 + 24),  *(void *)(v0 + 64));
  }

  unint64_t v12 = *(void *)(v0 + 96);
  uint64_t v14 = *(void *)(v0 + 72);
  uint64_t v13 = *(void *)(v0 + 80);
  uint64_t v16 = *(void *)(v0 + 56);
  uint64_t v15 = *(void *)(v0 + 64);
  unint64_t v18 = (uint64_t *)v2[3];
  unint64_t v17 = v2[4];
  uint64_t v19 = sub_100012ED8(*(void **)(v0 + 16), (uint64_t)v18);
  uint64_t v20 = sub_1002E1280((uint64_t)v19, v13, v12, v18, v17);
  uint64_t v22 = v21;
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  sub_100015794(v12, (uint64_t *)&unk_1009AE460);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v20, v22);
}

uint64_t sub_1002DFC4C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4, uint64_t a5, uint64_t *a6, char a7, unint64_t *a8)
{
  __int128 v46 = a8;
  uint64_t v43 = type metadata accessor for TimeBasedKey(0LL);
  uint64_t v45 = *(void *)(v43 - 8);
  uint64_t v12 = __chkstk_darwin(v43);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v43 - v15;
  uint64_t v17 = type metadata accessor for DateInterval(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v43 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = (char *)(a5 + *(int *)(type metadata accessor for OwnedBeaconRecord(0LL) + 32));
  uint64_t v22 = *a6;
  char v23 = a7;
  uint64_t v24 = (uint64_t)v14;
  uint64_t v25 = v46;
  unint64_t v26 = sub_1002DF51C(v23);
  int v27 = v21;
  uint64_t v28 = v18;
  sub_1003DB840(v27, v22, v26, (uint64_t)v20);
  uint64_t v29 = a6;
  uint64_t v30 = *a6;
  uint64_t v31 = (uint64_t *)v16;
  uint64_t v32 = v43;
  uint64_t v33 = (char *)v31 + *(int *)(v43 + 20);
  int v34 = *(void (**)(char *, char *, uint64_t))(v28 + 16);
  uint64_t v44 = v20;
  v34(v33, v20, v17);
  *uint64_t v31 = v30;
  uint64_t v35 = (_OWORD *)((char *)v31 + *(int *)(v32 + 24));
  __int128 v36 = *((_OWORD *)a4 + 2);
  __int128 v37 = *(_OWORD *)a4;
  v35[1] = *((_OWORD *)a4 + 1);
  void v35[2] = v36;
  *uint64_t v35 = v37;
  sub_1002E1D88((uint64_t)v31, v24);
  unint64_t v38 = *v25;
  sub_1002E1DDC(a4);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v38);
  *uint64_t v25 = v38;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v38 = sub_1004C51D4(0, *(void *)(v38 + 16) + 1LL, 1, v38);
    unint64_t *v46 = v38;
  }

  unint64_t v41 = *(void *)(v38 + 16);
  unint64_t v40 = *(void *)(v38 + 24);
  if (v41 >= v40 >> 1)
  {
    unint64_t v38 = sub_1004C51D4(v40 > 1, v41 + 1, 1, v38);
    unint64_t *v46 = v38;
  }

  *(void *)(v38 + swift_weakDestroy(v0 + 16) = v41 + 1;
  sub_10002218C( v24,  v38 + ((*(unsigned __int8 *)(v45 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80))
  + *(void *)(v45 + 72) * v41,
    type metadata accessor for TimeBasedKey);
  sub_100018C68((uint64_t)v31, type metadata accessor for TimeBasedKey);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v28 + 8))(v44, v17);
  if (*v29 == -1) {
    __break(1u);
  }
  else {
    ++*v29;
  }
  return result;
}

uint64_t sub_1002DFEA8@<X0>(char a1@<W1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v66 = a3;
  uint64_t v69 = a4;
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v67 = &v63[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = &v63[-v11];
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = &v63[-v14];
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = &v63[-v17];
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = &v63[-v20];
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = &v63[-v23];
  uint64_t v68 = v7;
  if ((a1 & 1) != 0)
  {
    DateInterval.start.getter(v22);
    double v25 = Date.timeIntervalSince(_:)(a2);
    if (v25 > 0.0) {
      double v26 = v25 * 0.0002;
    }
    else {
      double v26 = 0.0;
    }
    int v27 = *(uint64_t (**)(_BYTE *, uint64_t))(v7 + 8);
    uint64_t v28 = v27(v18, v6);
    DateInterval.end.getter(v28);
    double v29 = Date.timeIntervalSince(_:)(a2);
    if (v29 > 0.0) {
      double v30 = v29 * 0.0002;
    }
    else {
      double v30 = 0.0;
    }
    uint64_t v31 = v27(v15, v6);
    uint64_t v32 = DateInterval.start.getter(v31);
    Date.addingTimeInterval(_:)(v32, -v26);
    uint64_t v33 = v27(v12, v6);
    uint64_t v34 = DateInterval.end.getter(v33);
    Date.addingTimeInterval(_:)(v34, v30);
    uint64_t v35 = v27(v12, v6);
    unsigned int v64 = static os_log_type_t.default.getter(v35);
    if (qword_10099B3E8 != -1) {
      swift_once(&qword_10099B3E8, sub_1003E02E8);
    }
    uint64_t v36 = qword_100A2A8F0;
    uint64_t v37 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v38 = swift_allocObject(v37, 232LL, 7LL);
    *(_OWORD *)(v38 + swift_weakDestroy(v0 + 16) = xmmword_1007E8280;
    uint64_t v70 = *v65;
    uint64_t v39 = sub_100004AEC(&qword_1009A8030);
    uint64_t v40 = String.init<A>(describing:)(&v70, v39);
    uint64_t v42 = v41;
    *(void *)(v38 + 56) = &type metadata for String;
    unint64_t v43 = sub_1000226F4();
    *(void *)(v38 + 32) = v40;
    *(void *)(v38 + sub_10016CF88(v0 + 40) = v42;
    *(void *)(v38 + 96) = &type metadata for String;
    *(void *)(v38 + 104) = v43;
    *(void *)(v38 + 64) = v43;
    *(void *)(v38 + 72) = 0xD000000000000053LL;
    *(void *)(v38 + 80) = 0x800000010085CB10LL;
    uint64_t v44 = UUID.uuidString.getter(v43);
    *(void *)(v38 + 136) = &type metadata for String;
    *(void *)(v38 + 144) = v43;
    *(void *)(v38 + 112) = v44;
    *(void *)(v38 + 120) = v45;
    *(void *)(v38 + 176) = &type metadata for Double;
    *(void *)(v38 + 184) = &protocol witness table for Double;
    *(double *)(v38 + 152) = v26;
    *(void *)(v38 + 2swift_weakDestroy(v0 + 16) = &type metadata for Double;
    *(void *)(v38 + 224) = &protocol witness table for Double;
    *(double *)(v38 + 192) = v30;
    os_log(_:dso:log:_:_:)( v64,  &_mh_execute_header,  v36,  "%{public}@: %{public}@. Is drift compensated for beacon %{mask.hash}@, drift %f - %f",  84LL,  2LL,  v38);
  }

  else
  {
    uint64_t v46 = DateInterval.start.getter(v22);
    uint64_t v47 = DateInterval.end.getter(v46);
    unsigned int v64 = static os_log_type_t.default.getter(v47);
    if (qword_10099B3E8 != -1) {
      swift_once(&qword_10099B3E8, sub_1003E02E8);
    }
    uint64_t v48 = qword_100A2A8F0;
    uint64_t v49 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v50 = swift_allocObject(v49, 152LL, 7LL);
    *(_OWORD *)(v50 + swift_weakDestroy(v0 + 16) = xmmword_1007E4050;
    uint64_t v70 = *v65;
    uint64_t v51 = sub_100004AEC(&qword_1009A8030);
    uint64_t v52 = String.init<A>(describing:)(&v70, v51);
    uint64_t v54 = v53;
    *(void *)(v50 + 56) = &type metadata for String;
    unint64_t v55 = sub_1000226F4();
    *(void *)(v50 + 32) = v52;
    *(void *)(v50 + sub_10016CF88(v0 + 40) = v54;
    *(void *)(v50 + 96) = &type metadata for String;
    *(void *)(v50 + 104) = v55;
    *(void *)(v50 + 64) = v55;
    *(void *)(v50 + 72) = 0xD000000000000053LL;
    *(void *)(v50 + 80) = 0x800000010085CB10LL;
    uint64_t v56 = UUID.uuidString.getter(v55);
    *(void *)(v50 + 136) = &type metadata for String;
    *(void *)(v50 + 144) = v55;
    *(void *)(v50 + 112) = v56;
    *(void *)(v50 + 120) = v57;
    os_log(_:dso:log:_:_:)( v64,  &_mh_execute_header,  v48,  "%{public}@: %{public}@. No drift compensation for beacon %{mask.hash}@",  70LL,  2LL,  v50);
  }

  swift_bridgeObjectRelease();
  uint64_t v58 = v68;
  unint64_t v59 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v68 + 16);
  v59(v12, v24, v6);
  uint64_t v60 = v67;
  v59(v67, v21, v6);
  DateInterval.init(start:end:)(v12, v60);
  uint64_t v61 = *(void (**)(_BYTE *, uint64_t))(v58 + 8);
  v61(v21, v6);
  return ((uint64_t (*)(_BYTE *, uint64_t))v61)(v24, v6);
}

uint64_t sub_1002E0328(uint64_t a1, uint64_t a2)
{
  v2[15] = a1;
  v2[16] = a2;
  uint64_t v3 = type metadata accessor for Date(0LL);
  v2[17] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[18] = v4;
  v2[19] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  v2[20] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[21] = v6;
  v2[22] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1002E03B0, 0LL, 0LL);
}

uint64_t sub_1002E03B0()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001CEB4((uint64_t)&xmmword_1009BED80, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 184) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1002E0494;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1002E0494(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 184LL);
  *(void *)(*(void *)v1 + 192LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002E04F0, 0LL, 0LL);
}

uint64_t sub_1002E04F0()
{
  uint64_t v1 = (void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 152);
  if (*(void *)(v0 + 192))
  {
    uint64_t v4 = *(void **)(v0 + 128);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v5 = v4[3];
    uint64_t v6 = v4[4];
    sub_100012ED8(v4, v5);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v6 + 8) + 8LL) + 32LL))(v5);
    uint64_t v7 = v4[3];
    uint64_t v8 = v4[4];
    sub_100012ED8(v4, v7);
    (*(void (**)(uint64_t, uint64_t))(v8 + 184))(v7, v8);
    uint64_t v9 = (void *)swift_task_alloc(dword_1009BCD2C);
    *(void *)(v0 + 200) = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_1002E064C;
    return sub_1006D5220(*(void *)(v0 + 120), *(void *)(v0 + 176), *(void *)(v0 + 152));
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    unint64_t v11 = sub_1000157D0();
    uint64_t v12 = swift_allocError(&type metadata for DaemonError, v11, 0LL, 0LL);
    *uint64_t v13 = 0xD000000000000017LL;
    v13[1] = 0x800000010085BE10LL;
    swift_willThrow(v12);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1002E064C()
{
  uint64_t v2 = *(void *)(*(void *)v0 + 168LL);
  uint64_t v1 = *(void *)(*(void *)v0 + 176LL);
  uint64_t v4 = *(void *)(*(void *)v0 + 152LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 160LL);
  uint64_t v5 = *(void *)(*(void *)v0 + 136LL);
  uint64_t v6 = *(void *)(*(void *)v0 + 144LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 200LL));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_1002E06DC, 0LL, 0LL);
}

uint64_t sub_1002E06DC()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 152);
  swift_release(*(void *)(v0 + 192));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002E0728(uint64_t a1, uint64_t a2)
{
  v2[15] = a1;
  v2[16] = a2;
  uint64_t v3 = type metadata accessor for Date(0LL);
  v2[17] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[18] = v4;
  v2[19] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  v2[20] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[21] = v6;
  v2[22] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1002E07B0, 0LL, 0LL);
}

uint64_t sub_1002E07B0()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001CEB4((uint64_t)&xmmword_1009BED80, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 184) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1002E0894;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1002E0894(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 184LL);
  *(void *)(*(void *)v1 + 192LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002E08F0, 0LL, 0LL);
}

uint64_t sub_1002E08F0()
{
  uint64_t v1 = (void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 176);
  uint64_t v3 = *(void *)(v0 + 152);
  if (*(void *)(v0 + 192))
  {
    uint64_t v4 = *(void **)(v0 + 128);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v5 = v4[3];
    uint64_t v6 = v4[4];
    sub_100012ED8(v4, v5);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v6 + 8) + 8LL) + 32LL))(v5);
    uint64_t v7 = v4[3];
    uint64_t v8 = v4[4];
    sub_100012ED8(v4, v7);
    (*(void (**)(uint64_t, uint64_t))(v8 + 184))(v7, v8);
    uint64_t v9 = v4[3];
    uint64_t v10 = v4[4];
    sub_100012ED8(v4, v9);
    char v11 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 112))(v9, v10);
    uint64_t v12 = (void *)swift_task_alloc(dword_1009BCE34);
    *(void *)(v0 + 200) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_1002E0A78;
    return sub_1006D4FEC(*(void *)(v0 + 120), *(void *)(v0 + 176), *(void *)(v0 + 152), v11 & 1);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    unint64_t v14 = sub_1000157D0();
    uint64_t v15 = swift_allocError(&type metadata for DaemonError, v14, 0LL, 0LL);
    *uint64_t v16 = 0xD000000000000017LL;
    v16[1] = 0x800000010085BE10LL;
    swift_willThrow(v15);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1002E0A78()
{
  uint64_t v2 = *(void *)(*(void *)v0 + 168LL);
  uint64_t v1 = *(void *)(*(void *)v0 + 176LL);
  uint64_t v4 = *(void *)(*(void *)v0 + 152LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 160LL);
  uint64_t v5 = *(void *)(*(void *)v0 + 136LL);
  uint64_t v6 = *(void *)(*(void *)v0 + 144LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 200LL));
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  return swift_task_switch(sub_1002E25E8, 0LL, 0LL);
}

uint64_t sub_1002E0B08(uint64_t a1, uint64_t a2, uint64_t *a3, char *a4, uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Date(0LL);
  unint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  unint64_t v14 = (void (**)(char *, uint64_t))((char *)&v67 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v12);
  unint64_t v16 = (unint64_t)&v67 - v15;
  uint64_t v17 = type metadata accessor for UUID(0LL);
  uint64_t v78 = *(void (***)(char *, uint64_t))(v17 - 8);
  uint64_t v79 = v17;
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v71 = (char *)&v67 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v77 = (char *)&v67 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v75 = v25;
  uint64_t v26 = a1;
  uint64_t v28 = v27;
  (*(void (**)(char *, uint64_t, char *))(v25 + 16))(v24, v26, a4);
  (*(void (**)(char *))(*(void *)(*(void *)(a5 + 8) + 8LL) + 32LL))(a4);
  double v29 = *(void (**)(char *, uint64_t))(a5 + 184);
  uint64_t v74 = v24;
  uint64_t v76 = a4;
  v29(a4, a5);
  uint64_t v30 = *a3;
  uint64_t v31 = (uint64_t)a3 + *(int *)(sub_100004AEC((uint64_t *)&unk_1009AE460) + 36);
  unint64_t v32 = v16;
  unint64_t v80 = (char *)v28;
  uint64_t v33 = sub_1003DE0D8(v28, v16, v31, 0);
  if ((v33 | v30) < 0)
  {
    __break(1u);
    goto LABEL_36;
  }

  unint64_t v16 = v33;
  uint64_t v70 = v30;
  unint64_t v34 = v33 - v30;
  DateInterval.start.getter(v33);
  uint64_t v35 = (uint64_t)v80;
  unint64_t v36 = sub_1003DE0D8((uint64_t)v80, v32, (uint64_t)v14, 0);
  uint64_t v37 = *(void (**)(unint64_t, uint64_t))(v11 + 8);
  uint64_t v38 = ((uint64_t (*)(void, uint64_t))v37)(v14, v10);
  DateInterval.end.getter(v38);
  uint64_t v39 = v35;
  uint64_t v40 = v34;
  unint64_t v73 = v32;
  unint64_t v32 = sub_1003DE0D8(v39, v32, (uint64_t)v14, 0);
  v37((unint64_t)v14, v10);
  uint64_t v72 = v37;
  if ((v34 & 0x8000000000000000LL) == 0 && v34 >= v36)
  {
    unint64_t v14 = v78;
    a2 = v79;
    if (qword_10099B3E0 != -1) {
      goto LABEL_38;
    }
    while (1)
    {
      uint64_t v41 = type metadata accessor for Logger(0LL);
      sub_10000A720(v41, (uint64_t)qword_100A2A8D8);
      uint64_t v42 = v71;
      uint64_t v43 = ((uint64_t (*)(char *, char *, uint64_t))v14[2])(v71, v80, a2);
      uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
      os_log_type_t v45 = static os_log_type_t.default.getter(v44);
      int v68 = v45;
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = swift_slowAlloc(42LL, -1LL);
        uint64_t v47 = swift_slowAlloc(32LL, -1LL);
        uint64_t v67 = v47;
        *(_DWORD *)uint64_t v46 = 141558787;
        uint64_t v81 = 1752392040LL;
        uint64_t v82 = v47;
        uint64_t v69 = v10;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v46 + 4, v46 + 12);
        *(_WORD *)(v46 + 12) = 2081;
        unint64_t v48 = sub_1000F620C();
        uint64_t v49 = v44;
        uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter(v79, v48);
        uint64_t v81 = sub_1003F11D4(v50, v51, &v82);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v46 + 14, v46 + 22);
        swift_bridgeObjectRelease();
        v78[1](v42, v79);
        *(_WORD *)(v46 + 22) = 2048;
        uint64_t v81 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v46 + 24, v46 + 32);
        *(_WORD *)(v46 + 32) = 2048;
        a2 = v79;
        uint64_t v81 = v40;
        uint64_t v10 = v69;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v81, &v82, v46 + 34, v46 + 42);
        _os_log_impl( (void *)&_mh_execute_header,  v44,  (os_log_type_t)v68,  "        Buckets clamped for beacon %{private,mask.hash}s,starting secondary index %llu <= factor %lld -- clamping to 1.",  (uint8_t *)v46,  0x2Au);
        uint64_t v52 = v67;
        swift_arrayDestroy(v67, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v52, -1LL, -1LL);
        uint64_t v53 = v46;
        unint64_t v14 = v78;
        swift_slowDealloc(v53, -1LL, -1LL);
      }

      else
      {
        v14[1](v42, a2);
      }

      unint64_t v11 = 1LL;
      if (v16 == v70)
      {
        a4 = v77;
      }

      else
      {
        a4 = v77;
        if (v32 < v40)
        {
          if (v32 <= 1) {
            unint64_t v16 = 1LL;
          }
          else {
            unint64_t v16 = v32;
          }
          unint64_t v11 = 1LL;
          goto LABEL_29;
        }
      }

uint64_t sub_1002E1280(uint64_t a1, uint64_t a2, unint64_t a3, uint64_t *a4, unint64_t a5)
{
  unint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (uint64_t (**)(char *, uint64_t, uint64_t))((char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v64 - v14;
  uint64_t v16 = type metadata accessor for UUID(0LL);
  unint64_t v73 = *(uint64_t (***)(char *, uint64_t, uint64_t))(v16 - 8);
  uint64_t v74 = v16;
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v65 = (char *)&v64 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v72 = (char *)&v64 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v69 = v24;
  uint64_t v25 = a1;
  uint64_t v27 = v26;
  (*(void (**)(char *, uint64_t, uint64_t *))(v24 + 16))(v23, v25, a4);
  (*(void (**)(uint64_t *))(*(void *)(*(void *)(a5 + 8) + 8LL) + 32LL))(a4);
  uint64_t v28 = *(void (**)(uint64_t *, unint64_t))(a5 + 184);
  int v68 = v23;
  uint64_t v70 = a4;
  v28(a4, a5);
  unint64_t v29 = *(void *)a3;
  uint64_t v30 = a3 + *(int *)(sub_100004AEC((uint64_t *)&unk_1009AE460) + 36);
  if (v29) {
    unint64_t v31 = ~(v29 / 0x60);
  }
  else {
    unint64_t v31 = 0LL;
  }
  uint64_t v75 = v27;
  uint64_t v32 = sub_1003DE0D8(v27, (uint64_t)v15, v30, 1);
  if (v32 < 0)
  {
    __break(1u);
    goto LABEL_37;
  }

  unint64_t v33 = v32 + v31;
  DateInterval.start.getter(v32);
  uint64_t v34 = v75;
  a3 = sub_1003DE0D8(v75, (uint64_t)v15, (uint64_t)v13, 1);
  uint64_t v35 = *(uint64_t (**)(uint64_t (**)(char *, uint64_t, uint64_t), unint64_t))(v10 + 8);
  uint64_t v36 = v35(v13, v9);
  DateInterval.end.getter(v36);
  uint64_t v37 = v34;
  unint64_t v38 = v33;
  uint64_t v39 = sub_1003DE0D8(v37, (uint64_t)v15, (uint64_t)v13, 1);
  unint64_t v40 = v9;
  unint64_t v9 = v39;
  unint64_t v67 = v40;
  ((void (*)(uint64_t (**)(char *, uint64_t, uint64_t)))v35)(v13);
  a4 = (uint64_t *)&off_10099B000;
  uint64_t v71 = v15;
  uint64_t v66 = (void (*)(char *, unint64_t))v35;
  if ((v38 & 0x8000000000000000LL) != 0 || v38 < a3)
  {
    uint64_t v13 = v73;
    uint64_t v10 = v74;
    if ((a3 & 0x8000000000000000LL) != 0)
    {
      __break(1u);
LABEL_41:
      __break(1u);
    }

    else
    {
      a5 = a3 - v38;
      if (!__OFSUB__(a3, v38))
      {
        if ((a5 & 0x8000000000000000LL) == 0)
        {
          a3 = (unint64_t)v72;
          if ((uint64_t)v38 >= 1 && v9 < v38)
          {
            if (a5 > v9) {
              unint64_t v9 = a5;
            }
            goto LABEL_30;
          }

          goto LABEL_24;
        }

uint64_t sub_1002E19EC(uint64_t a1, uint64_t a2, char a3, char a4, char a5)
{
  *(void *)(v6 + 24) = a2;
  *(void *)(v6 + 32) = v5;
  *(_BYTE *)(v6 + 66) = a5;
  *(_BYTE *)(v6 + 65) = a4;
  *(_BYTE *)(v6 + 64) = a3;
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = a1;
  return swift_task_switch(sub_1002E1A14, 0LL, 0LL);
}

uint64_t sub_1002E1A14()
{
  int v1 = *(unsigned __int8 *)(v0 + 64);
  if (!*(_BYTE *)(v0 + 64))
  {
    swift_bridgeObjectRelease();
LABEL_11:
    uint64_t v8 = (char *)&dword_1009A8028 + dword_1009A8028;
    uint64_t v5 = (void *)swift_task_alloc(unk_1009A802C);
    *(void *)(v0 + sub_10016CF88(v0 + 40) = v5;
    uint64_t v6 = sub_1002E1B30;
    goto LABEL_12;
  }

  if (v1 == 1) {
    uint64_t v2 = 0x7261646E6F636553LL;
  }
  else {
    uint64_t v2 = 0x6F4C657275636553LL;
  }
  if (v1 == 1) {
    unint64_t v3 = 0xE900000000000079LL;
  }
  else {
    unint64_t v3 = 0xEF736E6F69746163LL;
  }
  char v4 = _stringCompareWithSmolCheck(_:_:expecting:)(v2, v3, 0x7972616D697250LL, 0xE700000000000000LL, 0LL);
  swift_bridgeObjectRelease();
  if ((v4 & 1) != 0) {
    goto LABEL_11;
  }
  uint64_t v8 = (char *)&dword_1009A8018 + dword_1009A8018;
  uint64_t v5 = (void *)swift_task_alloc(unk_1009A801C);
  *(void *)(v0 + 48) = v5;
  uint64_t v6 = sub_1002E1BDC;
LABEL_12:
  *uint64_t v5 = v0;
  v5[1] = v6;
  return ((uint64_t (*)(void, void, void))v8)( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(unsigned __int8 *)(v0 + 65));
}

uint64_t sub_1002E1B30(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*v3 + 40);
  uint64_t v8 = *v3;
  swift_task_dealloc(v7);
  if (v2) {
    return (*(uint64_t (**)(void))(v8 + 8))();
  }
  uint64_t v10 = (void *)swift_task_alloc(dword_1009A8024);
  *(void *)(v6 + 56) = v10;
  *uint64_t v10 = v8;
  v10[1] = sub_1002E1C88;
  return sub_1002DE3E0(*(void *)(v6 + 16), a1, a2, *(_BYTE *)(v6 + 64), *(_BYTE *)(v6 + 66), 0);
}

uint64_t sub_1002E1BDC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = *v3;
  uint64_t v7 = *(void *)(*v3 + 48);
  uint64_t v8 = *v3;
  swift_task_dealloc(v7);
  if (v2) {
    return (*(uint64_t (**)(void))(v8 + 8))();
  }
  uint64_t v10 = (void *)swift_task_alloc(dword_1009A8024);
  *(void *)(v6 + 56) = v10;
  *uint64_t v10 = v8;
  v10[1] = sub_1002E1C88;
  return sub_1002DE3E0(*(void *)(v6 + 16), a1, a2, *(_BYTE *)(v6 + 64), *(_BYTE *)(v6 + 66), 0);
}

uint64_t sub_1002E1C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v8 = *(void *)(*v4 + 56);
  uint64_t v9 = *v4;
  uint64_t v10 = swift_task_dealloc(v8);
  if (!v3)
  {
    uint64_t v10 = a1;
    uint64_t v11 = a2;
    uint64_t v12 = a3;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 8))(v10, v11, v12);
}

uint64_t sub_1002E1CF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A6630);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1002E1D3C()
{
  unint64_t result = qword_1009A8040;
  if (!qword_1009A8040)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A8038);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009A8040);
  }

  return result;
}

uint64_t sub_1002E1D88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimeBasedKey(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1002E1DCC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  return sub_1002DFC4C( a1,  a2,  a3,  a4,  *(void *)(v4 + 16),  *(uint64_t **)(v4 + 24),  *(_BYTE *)(v4 + 32),  *(unint64_t **)(v4 + 40));
}

uint64_t *sub_1002E1DDC(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  sub_100018BE4(*a1, a1[1]);
  sub_10001736C(v2, v3);
  sub_100018BE4(v4, v5);
  return a1;
}

unint64_t sub_1002E1E38(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v16 + ((v5 + 16LL) & ~(unint64_t)v5);
    swift_retain();
  }

  else
  {
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    sub_10001736C(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    uint64_t v9 = *(void *)(a2 + 16);
    unint64_t v10 = *(void *)(a2 + 24);
    sub_10001736C(v9, v10);
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = v9;
    *(void *)(a1 + 24) = v10;
    __int128 v11 = *(_OWORD *)(a2 + 56);
    *(_OWORD *)(a1 + 56) = v11;
    (**(void (***)(uint64_t, uint64_t))(v11 - 8))(a1 + 32, a2 + 32);
    uint64_t v12 = *(int *)(a3 + 28);
    uint64_t v13 = a1 + v12;
    uint64_t v14 = a2 + v12;
    uint64_t v15 = type metadata accessor for DateInterval(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
  }

  return a1;
}

uint64_t sub_1002E1F10(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for DateInterval(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t sub_1002E1F6C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_10001736C(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  sub_10001736C(v8, v9);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  __int128 v10 = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 56) = v10;
  (**(void (***)(uint64_t, uint64_t))(v10 - 8))(a1 + 32, a2 + 32);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
  return a1;
}

uint64_t *sub_1002E2018(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100016F9C(v8, v9);
  uint64_t v10 = a2[2];
  unint64_t v11 = a2[3];
  sub_10001736C(v10, v11);
  uint64_t v12 = a1[2];
  unint64_t v13 = a1[3];
  a1[2] = v10;
  a1[3] = v11;
  sub_100016F9C(v12, v13);
  sub_1000B5D38(a1 + 4, a2 + 4);
  uint64_t v14 = *(int *)(a3 + 28);
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 24LL))(v15, v16, v17);
  return a1;
}

uint64_t sub_1002E20C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  __int128 v5 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v5;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = a1 + v6;
  uint64_t v8 = a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  return a1;
}

uint64_t sub_1002E212C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016F9C(v6, v7);
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  sub_100016F9C(v8, v9);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(a1 + 32));
  __int128 v10 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v10;
  *(void *)(a1 + 64) = *(void *)(a2 + 64);
  uint64_t v11 = *(int *)(a3 + 28);
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40LL))(v12, v13, v14);
  return a1;
}

uint64_t sub_1002E21C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1002E21D0);
}

uint64_t sub_1002E21D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 56);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for DateInterval(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v8);
  }

uint64_t sub_1002E224C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1002E2258);
}

uint64_t sub_1002E2258(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 56) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for DateInterval(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 28),  a2,  a2,  v7);
  }

  return result;
}

uint64_t _s18ConnectionKeyGroupVMa(uint64_t a1)
{
  uint64_t result = qword_1009A80A0;
  if (!qword_1009A80A0) {
    return swift_getSingletonMetadata(a1, &_s18ConnectionKeyGroupVMn);
  }
  return result;
}

uint64_t sub_1002E2308(uint64_t a1)
{
  v4[0] = &unk_1007F9178;
  v4[1] = &unk_1007F9178;
  v4[2] = &unk_1007F9190;
  uint64_t result = type metadata accessor for DateInterval(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1002E238C(uint64_t result, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRetain(result);
  }
  if (!a3)
  {
    swift_bridgeObjectRetain(result);
    return swift_bridgeObjectRetain(a2);
  }

  return result;
}

uint64_t _s9KeyResultOwxx(uint64_t a1)
{
  return sub_100117B2C(*(void *)a1, *(void *)(a1 + 8), *(_BYTE *)(a1 + 16));
}

uint64_t _s9KeyResultOwCP_0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_1002E238C(*(void *)a2, v4, v5);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  return a1;
}

uint64_t _s9KeyResultOwca(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  char v5 = *(_BYTE *)(a2 + 16);
  sub_1002E238C(*(void *)a2, v4, v5);
  uint64_t v6 = *(void *)a1;
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v3;
  *(void *)(a1 + 8) = v4;
  char v8 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v5;
  sub_100117B2C(v6, v7, v8);
  return a1;
}

uint64_t _s9KeyResultOwta(uint64_t a1, uint64_t a2)
{
  char v3 = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(void *)a1;
  uint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  char v6 = *(_BYTE *)(a1 + 16);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  sub_100117B2C(v4, v5, v6);
  return a1;
}

ValueMetadata *_s9KeyResultOMa()
{
  return &_s9KeyResultON;
}

uint64_t storeEnumTagSinglePayload for BeaconKeyManagerError(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1002E2520 + 4 * byte_1007F9155[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1002E2554 + 4 * byte_1007F9150[v4]))();
}

uint64_t sub_1002E2554(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002E255C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1002E2564LL);
  }
  return result;
}

uint64_t sub_1002E2570(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1002E2578LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1002E257C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002E2584(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconKeyManagerError()
{
  return &type metadata for BeaconKeyManagerError;
}

unint64_t sub_1002E25A4()
{
  unint64_t result = qword_1009A80E0;
  if (!qword_1009A80E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9218, &type metadata for BeaconKeyManagerError);
    atomic_store(result, (unint64_t *)&qword_1009A80E0);
  }

  return result;
}

uint64_t type metadata accessor for SPObserverAnalyticsAttempts()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd27SPObserverAnalyticsAttempts);
}

uint64_t sub_1002E2610()
{
  uint64_t v2 = *(void *)(v0 + 16);
  __int16 v1 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain(v1);
  v3._countAndFlagsBits = v2;
  v3._object = v1;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v1);
  v4._countAndFlagsBits = 62LL;
  v4._object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  return 0x656863534350583CLL;
}

uint64_t sub_1002E26B4()
{
  return swift_deallocClassInstance(v0, 80LL, 7LL);
}

uint64_t type metadata accessor for XPCScheduler()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd12XPCScheduler);
}

uint64_t sub_1002E2708()
{
  return sub_1002E2610();
}

ValueMetadata *type metadata accessor for GetiCloudIdentifierPayload()
{
  return &type metadata for GetiCloudIdentifierPayload;
}

unint64_t sub_1002E2738(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1002E2764();
  unint64_t result = sub_100256984();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_1002E2764()
{
  unint64_t result = qword_1009A82B0;
  if (!qword_1009A82B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F933C, &type metadata for GetiCloudIdentifierPayload);
    atomic_store(result, (unint64_t *)&qword_1009A82B0);
  }

  return result;
}

uint64_t sub_1002E27A8(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  dispatch thunk of BinaryEncoding.container()(v18, v3, v4);
  __int128 v17 = *v1;
  uint64_t v5 = v19;
  uint64_t v6 = v20;
  sub_100037298((uint64_t)v18, v19);
  unint64_t v7 = sub_100042440();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v17, &type metadata for Data, v7, v5, v6);
  if (!v2)
  {
    __int128 v17 = v1[1];
    uint64_t v8 = v19;
    uint64_t v9 = v20;
    sub_100037298((uint64_t)v18, v19);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v17, &type metadata for Data, v7, v8, v9);
    __int128 v17 = v1[2];
    uint64_t v10 = v19;
    uint64_t v11 = v20;
    sub_100037298((uint64_t)v18, v19);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v17, &type metadata for Data, v7, v10, v11);
    __int128 v17 = v1[3];
    uint64_t v12 = v19;
    uint64_t v13 = v20;
    sub_100037298((uint64_t)v18, v19);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v17, &type metadata for Data, v7, v12, v13);
    __int128 v17 = v1[4];
    uint64_t v14 = v19;
    uint64_t v15 = v20;
    sub_100037298((uint64_t)v18, v19);
    dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v17, &type metadata for Data, v7, v14, v15);
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v18);
}

__n128 sub_1002E2964@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[3];
    *(_OWORD *)(a2 + 32) = v6[2];
    *(_OWORD *)(a2 + 48) = v5;
    *(_OWORD *)(a2 + 64) = v6[4];
    __n128 result = (__n128)v6[1];
    *(_OWORD *)a2 = v6[0];
    *(__n128 *)(a2 + swift_weakDestroy(v0 + 16) = result;
  }

  return result;
}

uint64_t sub_1002E29AC(void *a1)
{
  return sub_1002E27A8(a1);
}

uint64_t sub_1002E29C0(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_1002E29D0 + dword_1002E2B8C[a2 >> 62]))();
}

uint64_t sub_1002E29E0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (BYTE6(a2) != 89LL)
  {
    __break(1u);
    JUMPOUT(0x1002E2B80LL);
  }

  return ((uint64_t (*)(void))((char *)&loc_1002E2A1C + dword_1002E2B9C[a4 >> 62]))();
}

uint64_t destroy for AirPodsLEInitiatePairingCommandPayload(uint64_t a1)
{
  return sub_100016F9C(*(void *)(a1 + 64), *(void *)(a1 + 72));
}

uint64_t *initializeWithCopy for AirPodsLEInitiatePairingCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10001736C(*a2, v5);
  *a1 = v4;
  a1[1] = v5;
  uint64_t v6 = a2[2];
  unint64_t v7 = a2[3];
  sub_10001736C(v6, v7);
  a1[2] = v6;
  a1[3] = v7;
  uint64_t v8 = a2[4];
  unint64_t v9 = a2[5];
  sub_10001736C(v8, v9);
  a1[4] = v8;
  a1[5] = v9;
  uint64_t v10 = a2[6];
  unint64_t v11 = a2[7];
  sub_10001736C(v10, v11);
  a1[6] = v10;
  a1[7] = v11;
  uint64_t v13 = a2[8];
  unint64_t v12 = a2[9];
  sub_10001736C(v13, v12);
  a1[8] = v13;
  a1[9] = v12;
  return a1;
}

uint64_t *assignWithCopy for AirPodsLEInitiatePairingCommandPayload(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10001736C(*a2, v5);
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *a1 = v4;
  a1[1] = v5;
  sub_100016F9C(v6, v7);
  uint64_t v8 = a2[2];
  unint64_t v9 = a2[3];
  sub_10001736C(v8, v9);
  uint64_t v10 = a1[2];
  unint64_t v11 = a1[3];
  a1[2] = v8;
  a1[3] = v9;
  sub_100016F9C(v10, v11);
  uint64_t v12 = a2[4];
  unint64_t v13 = a2[5];
  sub_10001736C(v12, v13);
  uint64_t v14 = a1[4];
  unint64_t v15 = a1[5];
  a1[4] = v12;
  a1[5] = v13;
  sub_100016F9C(v14, v15);
  uint64_t v16 = a2[6];
  unint64_t v17 = a2[7];
  sub_10001736C(v16, v17);
  uint64_t v18 = a1[6];
  unint64_t v19 = a1[7];
  a1[6] = v16;
  a1[7] = v17;
  sub_100016F9C(v18, v19);
  uint64_t v21 = a2[8];
  unint64_t v20 = a2[9];
  sub_10001736C(v21, v20);
  uint64_t v22 = a1[8];
  unint64_t v23 = a1[9];
  a1[8] = v21;
  a1[9] = v20;
  sub_100016F9C(v22, v23);
  return a1;
}

uint64_t *assignWithTake for AirPodsLEInitiatePairingCommandPayload(uint64_t *a1, _OWORD *a2)
{
  uint64_t v4 = *a1;
  unint64_t v5 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100016F9C(v4, v5);
  uint64_t v6 = a1[2];
  unint64_t v7 = a1[3];
  *((_OWORD *)a1 + 1) = a2[1];
  sub_100016F9C(v6, v7);
  uint64_t v8 = a1[4];
  unint64_t v9 = a1[5];
  *((_OWORD *)a1 + 2) = a2[2];
  sub_100016F9C(v8, v9);
  uint64_t v10 = a1[6];
  unint64_t v11 = a1[7];
  *((_OWORD *)a1 + 3) = a2[3];
  sub_100016F9C(v10, v11);
  uint64_t v12 = a1[8];
  unint64_t v13 = a1[9];
  *((_OWORD *)a1 + 4) = a2[4];
  sub_100016F9C(v12, v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for InitialPairingInfo(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 80)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for InitialPairingInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + sub_10016CF88(v0 + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 - 13;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 80) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0LL;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for FinalizePairingCommandPayload()
{
  return &type metadata for FinalizePairingCommandPayload;
}

unint64_t sub_1002E2EA8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1002E2ED4();
  unint64_t result = sub_1002E2F18();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_1002E2ED4()
{
  unint64_t result = qword_1009A82B8;
  if (!qword_1009A82B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F93F8, &type metadata for FinalizePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009A82B8);
  }

  return result;
}

unint64_t sub_1002E2F18()
{
  unint64_t result = qword_1009A82C0;
  if (!qword_1009A82C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F93D0, &type metadata for FinalizePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009A82C0);
  }

  return result;
}

uint64_t sub_1002E2F5C@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100012ED8(a1, v5);
  dispatch thunk of BinaryDecoding.container()(v25, v5, v6);
  uint64_t v7 = v26;
  uint64_t v8 = v27;
  sub_100037298((uint64_t)v25, v26);
  uint64_t v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)(89LL, v7, v8);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    uint64_t v11 = v9;
    unint64_t v12 = v10;
    uint64_t v13 = v26;
    uint64_t v14 = v27;
    sub_100037298((uint64_t)v25, v26);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(1040LL, v13, v14);
    uint64_t v33 = v15;
    uint64_t v17 = v26;
    uint64_t v16 = v27;
    sub_100037298((uint64_t)v25, v26);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(32LL, v17, v16);
    uint64_t v18 = v26;
    uint64_t v19 = v27;
    sub_100037298((uint64_t)v25, v26);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(60LL, v18, v19);
    uint64_t v20 = v26;
    uint64_t v21 = v27;
    sub_100037298((uint64_t)v25, v26);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(100LL, v20, v21);
    sub_1002E29C0(v11, v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v25);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    __int128 v23 = v31;
    a2[2] = v30;
    a2[3] = v23;
    a2[4] = v32;
    __int128 v24 = v29;
    *a2 = v28;
    a2[1] = v24;
  }

  return result;
}

uint64_t sub_1002E3164()
{
  return 0x65746143656C6F72LL;
}

uint64_t sub_1002E3188@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x65746143656C6F72LL && a2 == 0xEE00736569726F67LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xEE00736569726F67LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65746143656C6F72LL, 0xEE00736569726F67LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1002E3240(uint64_t a1)
{
  unint64_t v2 = sub_1002E3E44();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002E3268(uint64_t a1)
{
  unint64_t v2 = sub_1002E3E44();
  return CodingKey.debugDescription.getter(a1, v2);
}

void *sub_1002E3290@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1002E3CF8(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1002E32B8(void *a1)
{
  unsigned int v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A82F8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1002E41F0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for Role.CodingKeys,  &type metadata for Role.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  char v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v21, v5);
  if (!v2)
  {
    uint64_t v13 = v3[1];
    uint64_t v14 = v3[2];
    char v20 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v14, &v20, v5);
    uint64_t v15 = v3[3];
    uint64_t v16 = v3[4];
    char v19 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v15, v16, &v19, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1002E33F4(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v20 = a3;
  uint64_t v21 = a4;
  uint64_t v9 = sub_100004AEC(&qword_1009A8328);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v14);
  unint64_t v15 = sub_1002E45B8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for RoleCategory.CodingKeys,  &type metadata for RoleCategory.CodingKeys,  v15,  v14,  v13);
  char v25 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v25, v9);
  if (!v5)
  {
    char v24 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v24, v9);
    uint64_t v22 = a5;
    char v23 = 2;
    uint64_t v16 = sub_100004AEC(&qword_1009A8310);
    uint64_t v17 = sub_1001C8A7C( &qword_1009A8330,  &qword_1009A8310,  (void (*)(void))sub_1002E4640,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v23, v9, v16, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_1002E3580()
{
  uint64_t v1 = 1701605234LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6A6F6D45656C6F72LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6449656C6F72LL;
  }
}

uint64_t sub_1002E35D4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1002E3ECC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002E35F8(uint64_t a1)
{
  unint64_t v2 = sub_1002E41F0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002E3620(uint64_t a1)
{
  unint64_t v2 = sub_1002E41F0();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1002E3648@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    double result = *(double *)v6;
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }

  return result;
}

uint64_t sub_1002E368C(void *a1)
{
  return sub_1002E32B8(a1);
}

uint64_t sub_1002E36A0(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_1002E3868(v5, v7) & 1;
}

uint64_t sub_1002E36E8()
{
  uint64_t v1 = 0x73656C6F72LL;
  if (*v0 == 1) {
    uint64_t v1 = 0x79726F6765746163LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x79726F6765746163LL;
  }
}

uint64_t sub_1002E373C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1002E4234(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1002E3760(uint64_t a1)
{
  unint64_t v2 = sub_1002E45B8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1002E3788(uint64_t a1)
{
  unint64_t v2 = sub_1002E45B8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1002E37B0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1002E439C(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }

  return result;
}

uint64_t sub_1002E37DC(void *a1)
{
  return sub_1002E33F4(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_1002E37F8(void *a1, void *a2)
{
  if (*a1 == *a2
    && ((uint64_t v4 = a1[1], v5 = a1[2], v6 = a1[3], v7 = a2[1], v8 = a2[2], v9 = a2[3], v4 == v7)
      ? (BOOL v10 = v5 == v8)
      : (BOOL v10 = 0),
        v10 || (_stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v7, v8, 0LL) & 1) != 0))
  {
    return sub_100126B80(v6, v9);
  }

  else
  {
    return 0LL;
  }

uint64_t sub_1002E3868(void *a1, void *a2)
{
  if (*a1 != *a2) {
    return 0LL;
  }
  uint64_t v4 = a1[1];
  uint64_t v5 = a1[2];
  uint64_t v6 = a2[1];
  uint64_t v7 = a2[2];
  BOOL v8 = v4 == v6 && v5 == v7;
  if (v8 || (char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0LL), result = 0LL, (v9 & 1) != 0))
  {
    uint64_t v11 = a1[3];
    uint64_t v12 = a1[4];
    uint64_t v13 = a2[3];
    uint64_t v14 = a2[4];
    if (v11 == v13 && v12 == v14) {
      return 1LL;
    }
    else {
      return _stringCompareWithSmolCheck(_:_:expecting:)(v11, v12, v13, v14, 0LL);
    }
  }

  return result;
}

uint64_t *assignWithCopy for RolesResponse(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  uint64_t v4 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t *assignWithTake for RolesResponse(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v3);
  return a1;
}

ValueMetadata *type metadata accessor for RolesResponse()
{
  return &type metadata for RolesResponse;
}

uint64_t destroy for Role(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 32));
}

uint64_t initializeWithCopy for Role(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *assignWithCopy for Role(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = a2[2];
  uint64_t v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[3] = a2[3];
  uint64_t v6 = a2[4];
  uint64_t v7 = a1[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for Role(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(__n128 *)a1 = result;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  return result;
}

uint64_t assignWithTake for Role(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a1 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for Role(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD((*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v3, v5, v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for Role(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + sub_10016CF88(v0 + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + swift_weakDestroy(v0 + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + sub_10016CF88(v0 + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for Role()
{
  return &type metadata for Role;
}

uint64_t destroy for RoleCategory(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 24));
}

uint64_t initializeWithCopy for RoleCategory(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for RoleCategory(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v4 = a2[2];
  uint64_t v5 = a1[2];
  a1[2] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

uint64_t assignWithTake for RoleCategory(uint64_t a1, _OWORD *a2)
{
  *(_OWORD *)a1 = *a2;
  swift_bridgeObjectRelease(*(void *)(a1 + 16));
  uint64_t v4 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = a2[1];
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for RoleCategory(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD((*(void (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v3, v5, v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for RoleCategory(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + swift_weakDestroy(v0 + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for RoleCategory()
{
  return &type metadata for RoleCategory;
}

void *sub_1002E3CF8(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009A82C8);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  char v9 = sub_100012ED8(a1, v7);
  unint64_t v10 = sub_1002E3E44();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for RolesResponse.CodingKeys,  &type metadata for RolesResponse.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    uint64_t v11 = sub_100004AEC(&qword_10099D640);
    uint64_t v12 = sub_1001C8A7C( &qword_1009A82D8,  &qword_10099D640,  (void (*)(void))sub_1002E3E88,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v11, v13, v3, v11, v12);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    char v9 = (void *)v15[1];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  return v9;
}

unint64_t sub_1002E3E44()
{
  unint64_t result = qword_1009A82D0;
  if (!qword_1009A82D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9870, &type metadata for RolesResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A82D0);
  }

  return result;
}

unint64_t sub_1002E3E88()
{
  unint64_t result = qword_1009A82E0;
  if (!qword_1009A82E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F94C4, &type metadata for RoleCategory);
    atomic_store(result, (unint64_t *)&qword_1009A82E0);
  }

  return result;
}

uint64_t sub_1002E3ECC(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6449656C6F72LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v5 = 0xE600000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449656C6F72LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 1701605234 && a2 == 0xE400000000000000LL)
  {
    unint64_t v7 = 0xE400000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701605234LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x6A6F6D45656C6F72LL && a2 == 0xE900000000000069LL)
  {
    swift_bridgeObjectRelease(0xE900000000000069LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6A6F6D45656C6F72LL, 0xE900000000000069LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_1002E4014@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009A82E8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1002E41F0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for Role.CodingKeys,  &type metadata for Role.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  char v27 = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v27, v5);
  char v26 = 1;
  uint64_t v13 = KeyedDecodingContainer.decode(_:forKey:)(&v26, v5);
  uint64_t v15 = v14;
  uint64_t v24 = v13;
  char v25 = 2;
  swift_bridgeObjectRetain(v14);
  uint64_t v16 = KeyedDecodingContainer.decode(_:forKey:)(&v25, v5);
  uint64_t v18 = v17;
  uint64_t v19 = *(void (**)(char *, uint64_t))(v6 + 8);
  uint64_t v20 = v16;
  v19(v8, v5);
  swift_bridgeObjectRetain(v18);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v22 = v24;
  *a2 = v12;
  a2[1] = v22;
  a2[2] = v15;
  a2[3] = v20;
  a2[4] = v18;
  return result;
}

unint64_t sub_1002E41F0()
{
  unint64_t result = qword_1009A82F0;
  if (!qword_1009A82F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9820, &type metadata for Role.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A82F0);
  }

  return result;
}

uint64_t sub_1002E4234(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x79726F6765746163LL && a2 == 0xEA00000000006449LL)
  {
    unint64_t v5 = 0xEA00000000006449LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79726F6765746163LL, 0xEA00000000006449LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x79726F6765746163LL && a2 == 0xEC000000656D614ELL)
  {
    unint64_t v7 = 0xEC000000656D614ELL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79726F6765746163LL, 0xEC000000656D614ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x73656C6F72LL && a2 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease(0xE500000000000000LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73656C6F72LL, 0xE500000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_1002E439C(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009A8300);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100012ED8(a1, v7);
  unint64_t v9 = sub_1002E45B8();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for RoleCategory.CodingKeys,  &type metadata for RoleCategory.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    char v19 = 0;
    uint64_t v7 = KeyedDecodingContainer.decode(_:forKey:)(&v19, v3);
    char v18 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v18, v3);
    uint64_t v12 = v11;
    uint64_t v13 = sub_100004AEC(&qword_1009A8310);
    char v17 = 2;
    uint64_t v14 = sub_1001C8A7C( &qword_1009A8318,  &qword_1009A8310,  (void (*)(void))sub_1002E45FC,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    swift_bridgeObjectRetain(v12);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, v13, &v17, v3, v13, v14);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    swift_bridgeObjectRetain(v16);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  return v7;
}

unint64_t sub_1002E45B8()
{
  unint64_t result = qword_1009A8308;
  if (!qword_1009A8308)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F97D0, &type metadata for RoleCategory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8308);
  }

  return result;
}

unint64_t sub_1002E45FC()
{
  unint64_t result = qword_1009A8320;
  if (!qword_1009A8320)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F953C, &type metadata for Role);
    atomic_store(result, (unint64_t *)&qword_1009A8320);
  }

  return result;
}

unint64_t sub_1002E4640()
{
  unint64_t result = qword_1009A8338;
  if (!qword_1009A8338)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9514, &type metadata for Role);
    atomic_store(result, (unint64_t *)&qword_1009A8338);
  }

  return result;
}

ValueMetadata *type metadata accessor for RoleCategory.CodingKeys()
{
  return &type metadata for RoleCategory.CodingKeys;
}

uint64_t _s12searchpartyd12RoleCategoryV10CodingKeysOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1002E46E8 + 4 * byte_1007F9441[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1002E471C + 4 * byte_1007F943C[v4]))();
}

uint64_t sub_1002E471C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002E4724(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1002E472CLL);
  }
  return result;
}

uint64_t sub_1002E4738(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1002E4740LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1002E4744(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1002E474C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for Role.CodingKeys()
{
  return &type metadata for Role.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for RolesResponse.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1002E47A8 + 4 * byte_1007F9446[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1002E47C8 + 4 * byte_1007F944B[v4]))();
  }
}

_BYTE *sub_1002E47A8(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1002E47C8(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1002E47D0(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1002E47D8(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1002E47E0(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1002E47E8(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for RolesResponse.CodingKeys()
{
  return &type metadata for RolesResponse.CodingKeys;
}

unint64_t sub_1002E4808()
{
  unint64_t result = qword_1009A8340;
  if (!qword_1009A8340)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9638, &type metadata for RolesResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8340);
  }

  return result;
}

unint64_t sub_1002E4850()
{
  unint64_t result = qword_1009A8348;
  if (!qword_1009A8348)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F96F0, &type metadata for Role.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8348);
  }

  return result;
}

unint64_t sub_1002E4898()
{
  unint64_t result = qword_1009A8350;
  if (!qword_1009A8350)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F97A8, &type metadata for RoleCategory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8350);
  }

  return result;
}

unint64_t sub_1002E48E0()
{
  unint64_t result = qword_1009A8358;
  if (!qword_1009A8358)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9718, &type metadata for RoleCategory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8358);
  }

  return result;
}

unint64_t sub_1002E4928()
{
  unint64_t result = qword_1009A8360;
  if (!qword_1009A8360)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9740, &type metadata for RoleCategory.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8360);
  }

  return result;
}

unint64_t sub_1002E4970()
{
  unint64_t result = qword_1009A8368;
  if (!qword_1009A8368)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9660, &type metadata for Role.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8368);
  }

  return result;
}

unint64_t sub_1002E49B8()
{
  unint64_t result = qword_1009A8370;
  if (!qword_1009A8370)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9688, &type metadata for Role.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8370);
  }

  return result;
}

unint64_t sub_1002E4A00()
{
  unint64_t result = qword_1009A8378;
  if (!qword_1009A8378)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F95A8, &type metadata for RolesResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8378);
  }

  return result;
}

unint64_t sub_1002E4A48()
{
  unint64_t result = qword_1009A8380;
  if (!qword_1009A8380)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F95D0, &type metadata for RolesResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A8380);
  }

  return result;
}

uint64_t sub_1002E4A8C@<X0>(uint64_t a1@<X8>)
{
  return sub_1002E4CA0(&qword_10099B100, (uint64_t)qword_100A2A1B0, (uint64_t)sub_1000E2B04, a1);
}

uint64_t sub_1002E4AA8@<X0>(uint64_t a1@<X8>)
{
  return sub_1002E4CA0(&qword_10099B1B8, (uint64_t)qword_100A2A358, (uint64_t)sub_1001CFC94, a1);
}

uint64_t sub_1002E4AC4@<X0>(uint64_t a1@<X8>)
{
  return sub_1002E4CA0(&qword_10099B208, (uint64_t)qword_100A2A428, (uint64_t)sub_100258170, a1);
}

uint64_t sub_1002E4AE0@<X0>(uint64_t a1@<X8>)
{
  if (qword_10099B248 != -1) {
    swift_once(&qword_10099B248, sub_1002E7BAC);
  }
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = sub_10000A720(v2, (uint64_t)qword_100A2A4B8);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(a1, v3, v2);
}

uint64_t sub_1002E4B50@<X0>(uint64_t a1@<X8>)
{
  return sub_1002E4CA0(&qword_10099B348, (uint64_t)qword_100A2A768, (uint64_t)sub_10039BCD8, a1);
}

uint64_t sub_1002E4B6C@<X0>(uint64_t a1@<X8>)
{
  return sub_1002E4CA0(&qword_10099B578, (uint64_t)qword_100A2AD10, (uint64_t)sub_1005811B4, a1);
}

uint64_t sub_1002E4B88@<X0>(uint64_t a1@<X8>)
{
  return sub_1002E4CA0(&qword_10099B580, (uint64_t)qword_100A2AD28, (uint64_t)sub_100581FC4, a1);
}

uint64_t sub_1002E4BA4@<X0>(uint64_t a1@<X8>)
{
  return sub_1002E4CA0(&qword_10099B600, (uint64_t)qword_100A2AE58, (uint64_t)sub_1005CAED0, a1);
}

uint64_t sub_1002E4BC0@<X0>(uint64_t a1@<X8>)
{
  return sub_1002E4CA0(&qword_10099B610, (uint64_t)qword_100A2AE80, (uint64_t)sub_1005D3C50, a1);
}

uint64_t sub_1002E4BDC@<X0>(uint64_t a1@<X8>)
{
  return sub_1002E4CA0(&qword_10099B690, (uint64_t)qword_100A2AF70, (uint64_t)sub_10061ABF8, a1);
}

uint64_t sub_1002E4BF8@<X0>(uint64_t a1@<X8>)
{
  if (qword_10099B800 != -1) {
    swift_once(&qword_10099B800, sub_10069017C);
  }
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = sub_10000A720(v2, (uint64_t)qword_100A2B170);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 16LL))(a1, v3, v2);
}

uint64_t sub_1002E4C68@<X0>(uint64_t a1@<X8>)
{
  return sub_1002E4CA0(&qword_10099B9E8, (uint64_t)qword_100A2B738, (uint64_t)sub_100763874, a1);
}

uint64_t sub_1002E4C84@<X0>(uint64_t a1@<X8>)
{
  return sub_1002E4CA0(&qword_10099BA08, (uint64_t)qword_100A2B770, (uint64_t)sub_10078065C, a1);
}

uint64_t sub_1002E4CA0@<X0>(void *a1@<X2>, uint64_t a2@<X3>, uint64_t a3@<X4>, uint64_t a4@<X8>)
{
  if (*a1 != -1LL) {
    swift_once(a1, a3);
  }
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = sub_10000A720(v6, a2);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a4, v7, v6);
}

uint64_t sub_1002E4D0C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A4A0);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2A4A0);
  if (qword_10099B400 != -1) {
    swift_once(&qword_10099B400, sub_1003F889C);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_100A2A928);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_1002E4D9C()
{
  v1[2] = v0;
  v1[3] = *v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A9BF0);
  void v1[4] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1002E4E00, v0, 0LL);
}

uint64_t sub_1002E4E00()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = type metadata accessor for TaskPriority(0LL);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL);
  __int128 v10 = *(_OWORD *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 16);
  v3(v1, 1LL, 1LL, v2);
  uint64_t v5 = swift_allocObject(&unk_10094F358, 48LL, 7LL);
  *(void *)(v5 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(v5 + 24) = 0LL;
  *(_OWORD *)(v5 + 32) = v10;
  swift_retain();
  sub_10000BB68(v1, (uint64_t)&unk_1009A84B0, v5);
  swift_release();
  sub_100015794(v1, &qword_1009A9BF0);
  v3(v1, 1LL, 1LL, v2);
  uint64_t v7 = sub_100015C48( &qword_1009A8480,  v6,  (uint64_t (*)(uint64_t))type metadata accessor for ObservationPruneSchedulerService,  (uint64_t)&unk_1007F9940);
  uint64_t v8 = (void *)swift_allocObject(&unk_10094F380, 40LL, 7LL);
  _OWORD v8[2] = v10;
  void v8[3] = v7;
  v8[4] = v10;
  swift_retain_n(v4, 2LL);
  sub_1003EDB00(v1, (uint64_t)&unk_1009A84C0, (uint64_t)v8);
  swift_release();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002E4F4C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[15] = a4;
  uint64_t v5 = sub_100004AEC(&qword_1009A1748);
  v4[16] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_10099C818);
  v4[17] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for FinderStateInfo(0LL);
  v4[18] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[19] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[20] = swift_task_alloc(v9);
  v4[21] = swift_task_alloc(v9);
  uint64_t v10 = sub_100004AEC(&qword_10099C820);
  v4[22] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_10099C828);
  v4[23] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v4[24] = v12;
  v4[25] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_10099C830);
  v4[26] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v4[27] = v14;
  v4[28] = swift_task_alloc((*(void *)(v14 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1002E5080, 0LL, 0LL);
}

uint64_t sub_1002E5080()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C838 + dword_10099C838);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C83C);
    *(void *)(v0 + 232) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1002E516C;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1002E516C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 232LL);
  *(void *)(*(void *)v1 + 24swift_beginAccess(v4, v6 - 104, 0LL, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002E51C8, 0LL, 0LL);
}

uint64_t sub_1002E51C8()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 240))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc(dword_1009AB384);
    *(void *)(v0 + 248) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1002E5348;
    return sub_1003A9CB0(*(void *)(v0 + 200));
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B240 != -1) {
      swift_once(&qword_10099B240, sub_1002E4D0C);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2A4A0);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Missing FinderStateObserver service.", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    uint64_t v9 = *(void *)(v0 + 200);
    uint64_t v11 = *(void *)(v0 + 168);
    uint64_t v10 = *(void *)(v0 + 176);
    uint64_t v12 = *(void *)(v0 + 160);
    uint64_t v14 = *(void *)(v0 + 128);
    uint64_t v13 = *(void *)(v0 + 136);
    swift_task_dealloc(*(void *)(v0 + 224));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1002E5348()
{
  return swift_task_switch(sub_1002E539C, 0LL, 0LL);
}

uint64_t sub_1002E539C()
{
  uint64_t v2 = v0[24];
  uint64_t v1 = v0[25];
  uint64_t v3 = v0[23];
  AsyncStream.makeAsyncIterator()(v3);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[32] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1002E5428;
  return AsyncStream.Iterator.next(isolation:)(v0[22], 0LL, 0LL, v0[26]);
}

uint64_t sub_1002E5428()
{
  return swift_task_switch(sub_1002E547C, 0LL, 0LL);
}

uint64_t sub_1002E547C()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = sub_100004AEC(&qword_10099C840);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(v1, 1LL, v2) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 216) + 8LL))(*(void *)(v0 + 224), *(void *)(v0 + 208));
    swift_release();
    uint64_t v3 = *(void *)(v0 + 200);
    uint64_t v5 = *(void *)(v0 + 168);
    uint64_t v4 = *(void *)(v0 + 176);
    uint64_t v6 = *(void *)(v0 + 160);
    uint64_t v8 = *(void *)(v0 + 128);
    uint64_t v7 = *(void *)(v0 + 136);
    swift_task_dealloc(*(void *)(v0 + 224));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  uint64_t v10 = *(void *)(v0 + 168);
  uint64_t v11 = *(void *)(v0 + 144);
  uint64_t v12 = *(void *)(v0 + 152);
  uint64_t v13 = *(void *)(v0 + 136);
  swift_release();
  uint64_t v14 = v1 + *(int *)(v2 + 48);
  uint64_t v15 = sub_100004AEC(&qword_10099C848);
  sub_100012EFC(v14 + *(int *)(v15 + 48), v10);
  sub_1002E75E0(v14, v13);
  int v16 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v13, 1LL, v11);
  char v17 = *(unsigned __int8 **)(v0 + 168);
  if (v16 == 1)
  {
    uint64_t v18 = *(void *)(v0 + 136);
    sub_100012F40(*(void *)(v0 + 168));
    sub_100015794(v18, &qword_10099C818);
  }

  else
  {
    char v19 = *(unsigned __int8 **)(v0 + 160);
    sub_100012EFC(*(void *)(v0 + 136), (uint64_t)v19);
    if (*v19 != *v17) {
      return swift_task_switch(sub_1002E567C, *(void *)(v0 + 120), 0LL);
    }
    uint64_t v20 = *(void *)(v0 + 168);
    sub_100012F40(*(void *)(v0 + 160));
    sub_100012F40(v20);
  }

  uint64_t v21 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  *(void *)(v0 + 256) = v21;
  *uint64_t v21 = v0;
  v21[1] = sub_1002E5428;
  return AsyncStream.Iterator.next(isolation:)(*(void *)(v0 + 176), 0LL, 0LL, *(void *)(v0 + 208));
}

uint64_t sub_1002E567C()
{
  *(void *)(v0 + 264) = *(void *)(*(void *)(v0 + 120) + 128LL);
  swift_retain();
  return swift_task_switch(sub_1002E56C0, 0LL, 0LL);
}

uint64_t sub_1002E56C0()
{
  if (v0[33])
  {
    v0[34] = (uint64_t)v1;
    *uint64_t v1 = v0;
    v1[1] = (uint64_t *)sub_1002E57C4;
    return v7(v0[16]);
  }

  else
  {
    uint64_t v3 = v0[21];
    uint64_t v4 = v0[16];
    sub_100012F40(v0[20]);
    sub_100012F40(v3);
    uint64_t v5 = type metadata accessor for XPCActivity.State(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v4, 1LL, 1LL, v5);
    sub_100015794(v0[16], &qword_1009A1748);
    uint64_t v6 = (uint64_t **)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    v0[32] = (uint64_t)v6;
    *uint64_t v6 = v0;
    v6[1] = (uint64_t *)sub_1002E5428;
    return AsyncStream.Iterator.next(isolation:)(v0[22], 0LL, 0LL, v0[26]);
  }

uint64_t sub_1002E57C4()
{
  return swift_task_switch(sub_1002E5820, 0LL, 0LL);
}

uint64_t sub_1002E5820()
{
  uint64_t v1 = v0[21];
  uint64_t v2 = v0[16];
  sub_100012F40(v0[20]);
  sub_100012F40(v1);
  uint64_t v3 = type metadata accessor for XPCActivity.State(0LL);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 0LL, 1LL, v3);
  sub_100015794(v0[16], &qword_1009A1748);
  uint64_t v4 = (uint64_t **)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
  v0[32] = (uint64_t)v4;
  *uint64_t v4 = v0;
  v4[1] = (uint64_t *)sub_1002E5428;
  return AsyncStream.Iterator.next(isolation:)(v0[22], 0LL, 0LL, v0[26]);
}

uint64_t sub_1002E58C8()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1009A83BC);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100015D58;
  return sub_1002E5910();
}

uint64_t sub_1002E5910()
{
  v1[15] = v0;
  v1[16] = *v0;
  uint64_t v2 = type metadata accessor for DispatchQoS(0LL);
  v1[17] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1002E5970, v0, 0LL);
}

uint64_t sub_1002E5970()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 144) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1002E5A5C;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1002E5A5C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 120LL);
  *(void *)(*(void *)v1 + 152LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002E5ABC, v3, 0LL);
}

uint64_t sub_1002E5ABC()
{
  uint64_t v1 = (void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 152);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 128);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v4 = type metadata accessor for XPCActivity(0LL);
    static DispatchQoS.background.getter(v4);
    uint64_t v5 = swift_allocObject(&unk_10094F308, 24LL, 7LL);
    *(void *)(v5 + swift_weakDestroy(v0 + 16) = v3;
    uint64_t v6 = swift_allocObject(&unk_10094F330, 32LL, 7LL);
    *(void *)(v6 + swift_weakDestroy(v0 + 16) = v2;
    *(void *)(v6 + 24) = v3;
    uint64_t v7 = async function pointer to XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)[1];
    swift_retain();
    uint64_t v8 = (void *)swift_task_alloc(v7);
    *(void *)(v0 + 160) = v8;
    *uint64_t v8 = v0;
    v8[1] = sub_1002E5C88;
    return XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)( 0xD00000000000003ALL,  0x800000010085CE70LL,  *(void *)(v0 + 136),  &unk_1009A8490,  v5,  &unk_1009A84A0,  v6);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B240 != -1) {
      swift_once(&qword_10099B240, sub_1002E4D0C);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = sub_10000A720(v10, (uint64_t)qword_100A2A4A0);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.error.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Missing ObservationStoreService.", v14, 2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    swift_task_dealloc(*(void *)(v0 + 136));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1002E5C88(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 160LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 120LL);
  *(void *)(*(void *)v1 + 168LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002E5CE8, v3, 0LL);
}

uint64_t sub_1002E5CE8()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 120);
  swift_release(*(void *)(v0 + 152));
  uint64_t v3 = *(void *)(v2 + 128);
  *(void *)(v2 + 128) = v1;
  swift_release(v3);
  swift_task_dealloc(*(void *)(v0 + 136));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002E5D34(uint64_t a1, uint64_t a2)
{
  v2[16] = a1;
  v2[17] = a2;
  uint64_t v3 = type metadata accessor for XPCActivity.Criteria.Options(0LL);
  v2[18] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[19] = v4;
  v2[20] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for XPCActivity.Priority(0LL);
  v2[21] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[22] = v6;
  v2[23] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009A17B8);
  v2[24] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for XPCActivity.Criteria(0LL);
  v2[25] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[26] = v9;
  v2[27] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_10099C818);
  v2[28] = v10;
  unint64_t v11 = (*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[29] = swift_task_alloc(v11);
  v2[30] = swift_task_alloc(v11);
  return swift_task_switch(sub_1002E5E40, 0LL, 0LL);
}

uint64_t sub_1002E5E40()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C838 + dword_10099C838);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C83C);
    *(void *)(v0 + 248) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1002E5F2C;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1002E5F2C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 248LL);
  *(void *)(*(void *)v1 + 256LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1002E5F88, 0LL, 0LL);
}

uint64_t sub_1002E5F88()
{
  uint64_t v1 = *(void *)(v0 + 256);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 256);
    swift_retain();
    return swift_task_switch(sub_1002E615C, v2, 0LL);
  }

  else
  {
    if (qword_10099B240 != -1) {
      swift_once(&qword_10099B240, sub_1002E4D0C);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2A4A0);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.default.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc(14LL, -1LL);
      *(_DWORD *)uint64_t v8 = 67109376;
      *(_DWORD *)(v0 + 288) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 292, v8 + 4, v8 + 8);
      *(_WORD *)(v8 + 8) = 1024;
      *(_DWORD *)(v0 + 292) = 0;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 292, v0 + 296, v8 + 10, v8 + 14);
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "finderState:%{BOOL}d isLeechScannerEnabled:%{BOOL}d, prune activity unregistered.",  (uint8_t *)v8,  0xEu);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    swift_release();
    uint64_t v9 = *(void *)(v0 + 232);
    uint64_t v10 = *(void *)(v0 + 240);
    uint64_t v11 = *(void *)(v0 + 216);
    uint64_t v12 = *(void *)(v0 + 192);
    uint64_t v13 = *(void *)(v0 + 184);
    uint64_t v14 = *(void *)(v0 + 160);
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 208) + 56LL))( *(void *)(v0 + 128),  1LL,  1LL,  *(void *)(v0 + 200));
    swift_task_dealloc(v10);
    swift_task_dealloc(v9);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1002E615C()
{
  uint64_t v1 = v0[32];
  uint64_t v2 = sub_100015C48( (unint64_t *)&qword_10099CAE8,  255LL,  type metadata accessor for FinderStateObserver,  (uint64_t)&unk_1007FE30C);
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[33] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1002E6208;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[30],  v0[32],  v2,  0x6E4965746174735FLL,  0xEC00000029286F66LL,  sub_100015C40,  v1,  v0[28]);
}

uint64_t sub_1002E6208()
{
  return swift_task_switch(sub_1002E6264, 0LL, 0LL);
}

uint64_t sub_1002E6264()
{
  uint64_t v1 = *(void *)(v0 + 240);
  uint64_t v2 = type metadata accessor for FinderStateInfo(0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(v1, 1LL, v2) == 1)
  {
    sub_100015794(v1, &qword_10099C818);
    *(_BYTE *)(v0 + 297) = 0;
    uint64_t v3 = *(void *)(v0 + 256);
    swift_retain();
    return swift_task_switch(sub_1002E63E4, v3, 0LL);
  }

  else
  {
    uint64_t v5 = (void *)swift_task_alloc(dword_1009AD0E4);
    *(void *)(v0 + 272) = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_1002E6318;
    return sub_1003F832C();
  }

uint64_t sub_1002E6318(char a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc(*(void *)(*v2 + 272));
  if (v1)
  {
    swift_errorRelease(v1);
    uint64_t v5 = sub_1002E6868;
  }

  else
  {
    *(_BYTE *)(v4 + 296) = a1 & 1;
    uint64_t v5 = sub_1002E6394;
  }

  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_1002E6394()
{
  *(_BYTE *)(v0 + 297) = *(_BYTE *)(v0 + 296);
  uint64_t v1 = *(void *)(v0 + 256);
  swift_retain();
  return swift_task_switch(sub_1002E63E4, v1, 0LL);
}

uint64_t sub_1002E63E4()
{
  uint64_t v1 = v0[32];
  uint64_t v2 = sub_100015C48( (unint64_t *)&qword_10099CAE8,  255LL,  type metadata accessor for FinderStateObserver,  (uint64_t)&unk_1007FE30C);
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[35] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1002E648C;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[29],  v0[32],  v2,  0x6E4965746174735FLL,  0xEC00000029286F66LL,  sub_100015C40,  v1,  v0[28]);
}

uint64_t sub_1002E648C()
{
  return swift_task_switch(sub_1002E64EC, 0LL, 0LL);
}

uint64_t sub_1002E64EC()
{
  uint64_t v1 = *(unsigned __int8 **)(v0 + 232);
  uint64_t v2 = type metadata accessor for FinderStateInfo(0LL);
  int v3 = (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(v1, 1LL, v2);
  int v4 = *(unsigned __int8 *)(v0 + 297);
  if (v3 != 1)
  {
    int v11 = *v1;
    sub_100012F40((uint64_t)v1);
    if (((v11 | v4) & 1) == 0) {
      goto LABEL_3;
    }
LABEL_9:
    uint64_t v12 = *(void *)(v0 + 200);
    uint64_t v13 = *(void *)(v0 + 208);
    uint64_t v14 = *(void *)(v0 + 192);
    sub_10001581C(*(void *)(v0 + 136), v14, &qword_1009A17B8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v14, 1LL, v12) == 1)
    {
      uint64_t v15 = *(void *)(v0 + 184);
      uint64_t v16 = *(void *)(v0 + 168);
      uint64_t v17 = *(void *)(v0 + 176);
      uint64_t v19 = *(void *)(v0 + 152);
      uint64_t v18 = *(void *)(v0 + 160);
      uint64_t v20 = *(void *)(v0 + 144);
      sub_100015794(*(void *)(v0 + 192), &qword_1009A17B8);
      (*(void (**)(uint64_t, void, uint64_t))(v17 + 104))( v15,  enum case for XPCActivity.Priority.maintenance(_:),  v16);
      uint64_t v21 = sub_100004AEC(&qword_1009A17D0);
      uint64_t v22 = swift_allocObject( v21,  ((*(unsigned __int8 *)(v19 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v19 + 80))
            + *(void *)(v19 + 72),
              *(unsigned __int8 *)(v19 + 80) | 7LL);
      *(_OWORD *)(v22 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      static XPCActivity.Criteria.Options.requiresClassC.getter(v22);
      *(void *)(v0 + 120) = v22;
      uint64_t v23 = sub_100015C48( &qword_10099CAF8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria.Options,  (uint64_t)&protocol conformance descriptor for XPCActivity.Criteria.Options);
      uint64_t v24 = sub_100004AEC(&qword_1009A17D8);
      unint64_t v25 = sub_10011858C();
      dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 120, v24, v25, v20, v23);
      XPCActivity.Criteria.init(priority:repeating:delay:gracePeriod:interval:options:)( v15,  1LL,  0LL,  9000LL,  18000LL,  v18);
      swift_release();
    }

    else
    {
      uint64_t v27 = *(void *)(v0 + 208);
      uint64_t v26 = *(void *)(v0 + 216);
      uint64_t v29 = *(void *)(v0 + 192);
      uint64_t v28 = *(void *)(v0 + 200);
      uint64_t v30 = *(void *)(v0 + 128);
      swift_release();
      __int128 v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v27 + 32);
      v31(v26, v29, v28);
      v31(v30, v26, v28);
    }

    uint64_t v10 = 0LL;
    goto LABEL_13;
  }

  sub_100015794((uint64_t)v1, &qword_10099C818);
  if (v4) {
    goto LABEL_9;
  }
LABEL_3:
  if (qword_10099B240 != -1) {
    swift_once(&qword_10099B240, sub_1002E4D0C);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = sub_10000A720(v5, (uint64_t)qword_100A2A4A0);
  os_log_type_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = swift_slowAlloc(14LL, -1LL);
    *(_DWORD *)uint64_t v9 = 67109376;
    *(_DWORD *)(v0 + 288) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 292, v9 + 4, v9 + 8);
    *(_WORD *)(v9 + 8) = 1024;
    *(_DWORD *)(v0 + 292) = 0;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 292, v0 + 296, v9 + 10, v9 + 14);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "finderState:%{BOOL}d isLeechScannerEnabled:%{BOOL}d, prune activity unregistered.",  (uint8_t *)v9,  0xEu);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  swift_release();
  uint64_t v10 = 1LL;
LABEL_13:
  uint64_t v32 = *(void *)(v0 + 232);
  uint64_t v33 = *(void *)(v0 + 240);
  uint64_t v34 = *(void *)(v0 + 216);
  uint64_t v35 = *(void *)(v0 + 192);
  uint64_t v36 = *(void *)(v0 + 184);
  uint64_t v37 = *(void *)(v0 + 160);
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 208) + 56LL))( *(void *)(v0 + 128),  v10,  1LL,  *(void *)(v0 + 200));
  swift_task_dealloc(v33);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1002E6868()
{
  *(_BYTE *)(v0 + 297) = 0;
  uint64_t v1 = *(void *)(v0 + 256);
  swift_retain();
  return swift_task_switch(sub_1002E63E4, v1, 0LL);
}

uint64_t sub_1002E68B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for XPCActivity.State(0LL);
  void v3[9] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[10] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[11] = swift_task_alloc(v6);
  v3[12] = swift_task_alloc(v6);
  return swift_task_switch(sub_1002E6928, 0LL, 0LL);
}

uint64_t sub_1002E6928()
{
  if (qword_10099B240 != -1) {
    swift_once(&qword_10099B240, sub_1002E4D0C);
  }
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 104) = v5;
  *(void *)(v0 + 112) = sub_10000A720(v5, (uint64_t)qword_100A2A4A0);
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  uint64_t v7 = v6(v1, v4, v2);
  os_log_type_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = *(void *)(v0 + 96);
  uint64_t v12 = *(void *)(v0 + 72);
  uint64_t v13 = *(void *)(v0 + 80);
  if (v10)
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v32 = v6;
    uint64_t v33 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v33;
    *(_DWORD *)uint64_t v14 = 136315138;
    uint64_t v16 = sub_100015C48( &qword_10099CAD8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity.State,  (uint64_t)&protocol conformance descriptor for XPCActivity.State);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v12, v16);
    *(void *)(v0 + sub_10016CF88(v0 + 40) = sub_1003F11D4(v17, v18, &v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Publisher prune activity state: %s.", v14, 0xCu);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v20 = v15;
    unint64_t v6 = v32;
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
    uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(*(void *)(v0 + 96), *(void *)(v0 + 72));
  }

  uint64_t v22 = *(void *)(v0 + 80);
  uint64_t v21 = *(void *)(v0 + 88);
  uint64_t v23 = *(void *)(v0 + 72);
  v6(v21, *(void *)(v0 + 56), v23);
  int v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 88))(v21, v23);
  if (v24 == enum case for XPCActivity.State.checkIn(_:) || v24 == enum case for XPCActivity.State.wait(_:))
  {
LABEL_18:
    uint64_t v31 = *(void *)(v0 + 88);
    swift_task_dealloc(*(void *)(v0 + 96));
    swift_task_dealloc(v31);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  if (v24 != enum case for XPCActivity.State.run(_:))
  {
    if (v24 == enum case for XPCActivity.State.defer(_:))
    {
      uint64_t v27 = type metadata accessor for XPCActivity(0LL);
      uint64_t v28 = sub_100015C48( &qword_10099CAD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity,  (uint64_t)&protocol conformance descriptor for XPCActivity);
      uint64_t v29 = dispatch thunk of Actor.unownedExecutor.getter(v27, v28);
      return swift_task_switch(sub_100104638, v29, v30);
    }

    if (v24 != enum case for XPCActivity.State.continue(_:)
      && v24 != enum case for XPCActivity.State.done(_:)
      && v24 != enum case for XPCActivity.State.invalidated(_:))
    {
      v19(*(void *)(v0 + 88), *(void *)(v0 + 72));
    }

    goto LABEL_18;
  }

  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  uint64_t v25 = *(void *)(v0 + 64);
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  *(void *)(v0 + 120) = 0LL;
  *(void *)(v0 + 128) = sub_1006A1550(*(void *)(v0 + 16));
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1002E6CF0, v25, 0LL);
}

uint64_t sub_1002E6CF0()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = sub_1006D7810(*(void *)(v0 + 128));
  *(void *)(v0 + 136) = v1;
  *(void *)(v0 + 144) = v2;
  *(_BYTE *)(v0 + 168) = v3;
  if (v1)
  {
    uint64_t v4 = sub_1002E6F48;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = sub_1002E6D58;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1002E6D58()
{
  if (qword_10099B400 != -1) {
    swift_once(&qword_10099B400, sub_1003F889C);
  }
  uint64_t v1 = sub_10000A720(*(void *)(v0 + 104), (uint64_t)qword_100A2A928);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    char v4 = *(_BYTE *)(v0 + 168);
    uint64_t v5 = *(void *)(v0 + 144);
    unint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = v6;
    *(_DWORD *)unint64_t v6 = 134217984;
    if ((v4 & 1) != 0) {
      uint64_t v8 = 0LL;
    }
    else {
      uint64_t v8 = v5;
    }
    *(void *)(v0 + 32) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 4, v6 + 12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Scheduled observation purge removed %ld observations.", v7, 0xCu);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  os_log_type_t v9 = (void *)swift_task_alloc(dword_1009BCDCC);
  *(void *)(v0 + 152) = v9;
  *os_log_type_t v9 = v0;
  v9[1] = sub_1002E6E98;
  return sub_1006D4E20();
}

uint64_t sub_1002E6E98()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 152LL);
  *(void *)(*(void *)v1 + 16swift_beginAccess(v4, v6 - 104, 0LL, 0LL) = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    os_log_type_t v3 = sub_1002E711C;
    uint64_t v4 = 0LL;
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v6 = type metadata accessor for XPCActivity(0LL);
    uint64_t v7 = sub_100015C48( &qword_10099CAD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity,  (uint64_t)&protocol conformance descriptor for XPCActivity);
    uint64_t v8 = dispatch thunk of Actor.unownedExecutor.getter(v6, v7);
    uint64_t v10 = v9;
    os_log_type_t v3 = sub_100104748;
    uint64_t v4 = v8;
    uint64_t v5 = v10;
  }

  return swift_task_switch(v3, v4, v5);
}

uint64_t sub_1002E6F48()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  os_log_type_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v5 = 138543362;
    swift_errorRetain(v1);
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 24) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v5 + 4, v5 + 12);
    *uint64_t v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to run scheduled obsevation purge: %{public}@.", v5, 0xCu);
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v6, 1LL, v8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v9 = type metadata accessor for XPCActivity(0LL);
  uint64_t v10 = sub_100015C48( &qword_10099CAD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity,  (uint64_t)&protocol conformance descriptor for XPCActivity);
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter(v9, v10);
  return swift_task_switch(sub_100104748, v11, v12);
}

uint64_t sub_1002E711C()
{
  uint64_t v1 = *(void *)(v0 + 160);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  os_log_type_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v5 = 138543362;
    swift_errorRetain(v1);
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 24) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v5 + 4, v5 + 12);
    *uint64_t v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to run scheduled obsevation purge: %{public}@.", v5, 0xCu);
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v6, 1LL, v8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v9 = type metadata accessor for XPCActivity(0LL);
  uint64_t v10 = sub_100015C48( &qword_10099CAD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity,  (uint64_t)&protocol conformance descriptor for XPCActivity);
  uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter(v9, v10);
  return swift_task_switch(sub_100104748, v11, v12);
}