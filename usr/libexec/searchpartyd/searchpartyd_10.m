uint64_t sub_100549EC8(uint64_t isStackAllocationSafe, uint64_t a2, uint64_t a3)
{
  uint64_t v3;
  uint64_t (*v5)(char *);
  char v6;
  unsigned int v7;
  unint64_t v8;
  uint64_t v9;
  size_t v10;
  uint64_t v11;
  uint64_t v12;
  void *v13;
  uint64_t v15;
  v5 = (uint64_t (*)(char *))isStackAllocationSafe;
  v6 = *(_BYTE *)(a3 + 32);
  v7 = v6 & 0x3F;
  v8 = (1LL << v6) + 63;
  v9 = v8 >> 6;
  v10 = 8 * (v8 >> 6);
  if (v7 <= 0xD
    || (isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v8 >> 6), 8LL), (isStackAllocationSafe & 1) != 0))
  {
    __chkstk_darwin(isStackAllocationSafe);
    bzero((char *)&v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0LL), v10);
    v11 = sub_10054A044((unint64_t *)((char *)&v15 - ((v10 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v9, a3, v5);
    v12 = swift_release(a3);
    if (v3) {
      swift_willThrow(v12);
    }
  }

  else
  {
    v13 = (void *)swift_slowAlloc(v10, -1LL);
    bzero(v13, v10);
    v11 = sub_10054A044((unint64_t *)v13, v9, a3, v5);
    swift_release(a3);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  return v11;
}

uint64_t sub_10054A044(unint64_t *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *))
{
  v31 = a4;
  uint64_t v26 = a2;
  v27 = a1;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t result = __chkstk_darwin(v6);
  v10 = (char *)&v26 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v11 = 0LL;
  uint64_t v32 = a3;
  uint64_t v12 = *(void *)(a3 + 56);
  uint64_t v28 = 0LL;
  uint64_t v29 = a3 + 56;
  uint64_t v13 = 1LL << *(_BYTE *)(a3 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v30 = (unint64_t)(v13 + 63) >> 6;
  while (v15)
  {
    unint64_t v16 = __clz(__rbit64(v15));
    v15 &= v15 - 1;
    unint64_t v17 = v16 | (v11 << 6);
LABEL_17:
    (*(void (**)(char *, unint64_t, uint64_t))(v7 + 16))( v10,  *(void *)(v32 + 48) + *(void *)(v7 + 72) * v17,  v6);
    char v21 = v31(v10);
    if (v4) {
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    }
    char v22 = v21;
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v10, v6);
    if ((v22 & 1) != 0)
    {
      *(unint64_t *)((char *)v27 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
      BOOL v18 = __OFADD__(v28++, 1LL);
      if (v18) {
        goto LABEL_30;
      }
    }
  }

  BOOL v18 = __OFADD__(v11++, 1LL);
  if (v18)
  {
    __break(1u);
    goto LABEL_29;
  }

  if (v11 >= v30) {
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v29 + 8 * v11);
  if (v19)
  {
LABEL_16:
    unint64_t v15 = (v19 - 1) & v19;
    unint64_t v17 = __clz(__rbit64(v19)) + (v11 << 6);
    goto LABEL_17;
  }

  int64_t v20 = v11 + 1;
  if (v11 + 1 >= v30) {
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v29 + 8 * v20);
  if (v19) {
    goto LABEL_15;
  }
  int64_t v20 = v11 + 2;
  if (v11 + 2 >= v30) {
    goto LABEL_27;
  }
  unint64_t v19 = *(void *)(v29 + 8 * v20);
  if (v19) {
    goto LABEL_15;
  }
  int64_t v20 = v11 + 3;
  if (v11 + 3 >= v30)
  {
LABEL_27:
    uint64_t v23 = v26;
    uint64_t v24 = v28;
    uint64_t v25 = v32;
    swift_retain();
    return sub_100546480( v27,  v23,  v24,  v25,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  &qword_1009A0A48,  &qword_1009A58F0,  (uint64_t)&protocol conformance descriptor for UUID);
  }

  unint64_t v19 = *(void *)(v29 + 8 * v20);
  if (v19)
  {
LABEL_15:
    int64_t v11 = v20;
    goto LABEL_16;
  }

  while (1)
  {
    int64_t v11 = v20 + 1;
    if (__OFADD__(v20, 1LL)) {
      break;
    }
    if (v11 >= v30) {
      goto LABEL_27;
    }
    unint64_t v19 = *(void *)(v29 + 8 * v11);
    ++v20;
    if (v19) {
      goto LABEL_16;
    }
  }

uint64_t sub_10054A2CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, v5) & 1;
}

uint64_t sub_10054A340(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for StableIdentifier(0LL);
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v37 = (uint64_t)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v36 = (uint64_t)&v32 - v7;
  sub_100004AEC(&qword_10099E308);
  uint64_t v8 = static _DictionaryStorage.copy(original:)(a1);
  uint64_t v9 = (void *)v8;
  int64_t v10 = 0LL;
  uint64_t v39 = a1;
  uint64_t v13 = *(void *)(a1 + 64);
  uint64_t v12 = a1 + 64;
  uint64_t v11 = v13;
  uint64_t v14 = 1LL << *(_BYTE *)(v12 - 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & v11;
  uint64_t v33 = v12;
  int64_t v34 = (unint64_t)(v14 + 63) >> 6;
  uint64_t v35 = v8 + 64;
  if ((v15 & v11) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v17 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v17 | (v10 << 6); ; unint64_t i = __clz(__rbit64(v20)) + (v10 << 6))
  {
    uint64_t v22 = v39;
    unint64_t v23 = *(void *)(v38 + 72) * i;
    uint64_t v24 = v36;
    sub_10001DC4C(*(void *)(v39 + 48) + v23, v36, type metadata accessor for StableIdentifier);
    uint64_t v25 = *(void *)(*(void *)(v22 + 56) + 8 * i);
    uint64_t v26 = v24;
    uint64_t v27 = v37;
    sub_10002218C(v26, v37, type metadata accessor for StableIdentifier);
    uint64_t v40 = v25;
    swift_bridgeObjectRetain_n(v25, 2LL);
    sub_1004ED708(&v40);
    if (v2) {
      break;
    }
    uint64_t v2 = 0LL;
    swift_bridgeObjectRelease();
    uint64_t v28 = v40;
    *(void *)(v35 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    sub_10002218C(v27, v9[6] + v23, type metadata accessor for StableIdentifier);
    *(void *)(v9[7] + 8 * i) = v28;
    uint64_t v29 = v9[2];
    BOOL v19 = __OFADD__(v29, 1LL);
    uint64_t v30 = v29 + 1;
    if (v19)
    {
      __break(1u);
LABEL_26:
      __break(1u);
LABEL_27:
      __break(1u);
      break;
    }

    v9[2] = v30;
    if (v16) {
      goto LABEL_4;
    }
LABEL_5:
    BOOL v19 = __OFADD__(v10++, 1LL);
    if (v19) {
      goto LABEL_26;
    }
    if (v10 >= v34) {
      return (uint64_t)v9;
    }
    unint64_t v20 = *(void *)(v33 + 8 * v10);
    if (!v20)
    {
      int64_t v21 = v10 + 1;
      if (v10 + 1 >= v34) {
        return (uint64_t)v9;
      }
      unint64_t v20 = *(void *)(v33 + 8 * v21);
      if (!v20)
      {
        int64_t v21 = v10 + 2;
        if (v10 + 2 >= v34) {
          return (uint64_t)v9;
        }
        unint64_t v20 = *(void *)(v33 + 8 * v21);
        if (!v20)
        {
          int64_t v21 = v10 + 3;
          if (v10 + 3 >= v34) {
            return (uint64_t)v9;
          }
          unint64_t v20 = *(void *)(v33 + 8 * v21);
          if (!v20)
          {
            while (1)
            {
              int64_t v10 = v21 + 1;
              if (__OFADD__(v21, 1LL)) {
                goto LABEL_27;
              }
              if (v10 >= v34) {
                return (uint64_t)v9;
              }
              unint64_t v20 = *(void *)(v33 + 8 * v10);
              ++v21;
              if (v20) {
                goto LABEL_15;
              }
            }
          }
        }
      }

      int64_t v10 = v21;
    }

uint64_t sub_10054A5FC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for StableIdentifier(0LL);
  uint64_t v30 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v29 = (char *)&v25 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AEC(&qword_1009B2AC8);
  uint64_t result = static _DictionaryStorage.copy(original:)(a1);
  uint64_t v5 = (void *)result;
  int64_t v6 = 0LL;
  uint64_t v31 = a1;
  uint64_t v9 = *(void *)(a1 + 64);
  uint64_t v8 = a1 + 64;
  uint64_t v7 = v9;
  uint64_t v10 = 1LL << *(_BYTE *)(v8 - 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & v7;
  uint64_t v26 = v8;
  int64_t v27 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v28 = result + 64;
  uint64_t v13 = (uint64_t)v29;
  if ((v11 & v7) == 0) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v14 = __clz(__rbit64(v12));
  v12 &= v12 - 1;
  for (unint64_t i = v14 | (v6 << 6); ; unint64_t i = __clz(__rbit64(v17)) + (v6 << 6))
  {
    uint64_t v19 = v31;
    unint64_t v20 = *(void *)(v30 + 72) * i;
    sub_10001DC4C(*(void *)(v31 + 48) + v20, v13, type metadata accessor for StableIdentifier);
    uint64_t v21 = *(void *)(*(void *)(*(void *)(v19 + 56) + 8 * i) + 16LL);
    *(void *)(v28 + ((i >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << i;
    uint64_t result = sub_10002218C(v13, v5[6] + v20, type metadata accessor for StableIdentifier);
    *(void *)(v5[7] + 8 * i) = v21;
    uint64_t v22 = v5[2];
    BOOL v23 = __OFADD__(v22, 1LL);
    uint64_t v24 = v22 + 1;
    if (v23)
    {
      __break(1u);
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    v5[2] = v24;
    if (v12) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v16 = v6 + 1;
    if (__OFADD__(v6, 1LL)) {
      goto LABEL_24;
    }
    if (v16 >= v27) {
      return (uint64_t)v5;
    }
    unint64_t v17 = *(void *)(v26 + 8 * v16);
    ++v6;
    if (!v17)
    {
      int64_t v6 = v16 + 1;
      if (v16 + 1 >= v27) {
        return (uint64_t)v5;
      }
      unint64_t v17 = *(void *)(v26 + 8 * v6);
      if (!v17)
      {
        int64_t v6 = v16 + 2;
        if (v16 + 2 >= v27) {
          return (uint64_t)v5;
        }
        unint64_t v17 = *(void *)(v26 + 8 * v6);
        if (!v17) {
          break;
        }
      }
    }

char *sub_10054A858(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v322 = a2;
  uint64_t v7 = sub_100004AEC(&qword_1009AE600);
  __chkstk_darwin(v7);
  v274 = (char *)&v274 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009AE470);
  __chkstk_darwin(v9);
  v281 = (char *)&v274 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v282 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v279 = *(void *)(v282 - 8);
  __chkstk_darwin(v282);
  uint64_t v283 = (uint64_t)&v274 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v275 = (uint64_t)&v274 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v280 = (uint64_t)&v274 - v15;
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v16);
  v302 = (char *)&v274 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v303 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v301 = *(void *)(v303 - 8);
  __chkstk_darwin(v303);
  v292 = (char *)&v274 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v298 = sub_100004AEC(&qword_1009AE490);
  __chkstk_darwin(v298);
  v299 = (char *)&v274 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v297 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v308 = (uint64_t)&v274 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_100004AEC(&qword_1009AA870);
  __chkstk_darwin(v22);
  uint64_t v287 = (uint64_t)&v274 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v286 = type metadata accessor for BeaconProductInfoRecord(0LL);
  uint64_t v285 = *(void *)(v286 - 8);
  __chkstk_darwin(v286);
  uint64_t v276 = (uint64_t)&v274 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = sub_100004AEC(&qword_1009A2430);
  __chkstk_darwin(v25);
  v291 = (char *)&v274 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v296 = type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v295 = *(void *)(v296 - 8);
  __chkstk_darwin(v296);
  uint64_t v278 = (uint64_t)&v274 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v293 = sub_100004AEC(&qword_1009A2438);
  uint64_t v28 = __chkstk_darwin(v293);
  v290 = (char *)&v274 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = __chkstk_darwin(v28);
  v294 = (uint64_t *)((char *)&v274 - v31);
  __chkstk_darwin(v30);
  uint64_t v33 = (char *)&v274 - v32;
  uint64_t v34 = type metadata accessor for LocationProvider(0LL);
  v334 = *(_BYTE **)(v34 - 8);
  v335 = (int *)v34;
  uint64_t v35 = __chkstk_darwin(v34);
  uint64_t v328 = (uint64_t)&v274 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v35);
  uint64_t v38 = (char *)&v274 - v37;
  uint64_t v39 = sub_100004AEC(&qword_1009A2440);
  uint64_t v40 = __chkstk_darwin(v39);
  v329 = (char *)&v274 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v40);
  uint64_t v331 = (uint64_t)&v274 - v42;
  uint64_t v307 = sub_100004AEC(&qword_1009A1800);
  uint64_t v43 = __chkstk_darwin(v307);
  v306 = (char *)&v274 - ((v44 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v43);
  v314 = (char *)&v274 - v45;
  uint64_t v46 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v47 = __chkstk_darwin(v46);
  v289 = (char *)&v274 - ((v48 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v47);
  v284 = (void (*)(char *, char *, uint64_t))((char *)&v274 - v49);
  uint64_t v50 = sub_100004AEC(&qword_1009AA840);
  __chkstk_darwin(v50);
  uint64_t v304 = (uint64_t)&v274 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v330 = type metadata accessor for Date(0LL);
  uint64_t v318 = *(void *)(v330 - 8);
  uint64_t v52 = __chkstk_darwin(v330);
  v288 = (char *)&v274 - ((v53 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = __chkstk_darwin(v52);
  v332 = (char *)&v274 - v55;
  uint64_t v56 = __chkstk_darwin(v54);
  v313 = (char *)&v274 - v57;
  __chkstk_darwin(v56);
  v310 = (char *)&v274 - v58;
  uint64_t v324 = type metadata accessor for UUID(0LL);
  uint64_t v311 = *(void *)(v324 - 8);
  uint64_t v59 = __chkstk_darwin(v324);
  v305 = (char *)&v274 - ((v60 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v61 = __chkstk_darwin(v59);
  v333 = (char *)&v274 - v62;
  uint64_t v63 = __chkstk_darwin(v61);
  v321 = (char *)&v274 - v64;
  __chkstk_darwin(v63);
  v66 = (char *)&v274 - v65;
  v342[3] = a3;
  v342[4] = a4;
  v67 = sub_10000A7C8(v342);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a3 - 8) + 16LL))(v67, a1, a3);
  v325 = (char *)[objc_allocWithZone(SPBeacon) init];
  v319 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 48);
  uint64_t v68 = v319(a3, a4);
  v69 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 56);
  uint64_t v320 = a3;
  uint64_t v317 = a4;
  uint64_t v70 = v69(a3, a4);
  uint64_t v71 = sub_1000F5F2C(v68, v70);
  v327 = v67;
  v316 = v33;
  uint64_t v300 = v20;
  v315 = v69;
  if (v72 >> 60 == 15)
  {
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v73 = type metadata accessor for Logger(0LL);
    sub_10000A720(v73, (uint64_t)qword_100A2AC98);
    sub_100013044((uint64_t)v342, (uint64_t)&v340);
    uint64_t v74 = sub_100013044((uint64_t)v342, (uint64_t)&v338);
    v75 = (os_log_s *)Logger.logObject.getter(v74);
    os_log_type_t v76 = static os_log_type_t.error.getter(v75);
    if (os_log_type_enabled(v75, v76))
    {
      uint64_t v77 = swift_slowAlloc(22LL, -1LL);
      *(_DWORD *)uint64_t v77 = 134218240;
      sub_100012ED8(&v340, v341);
      uint64_t v78 = v320;
      uint64_t v79 = v317;
      uint64_t v80 = v319(v320, v317);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v340);
      uint64_t v336 = v80;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v336, v337, v77 + 4, v77 + 12);
      *(_WORD *)(v77 + 12) = 2048;
      sub_100012ED8(&v338, v339);
      uint64_t v81 = v69(v78, v79);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v338);
      *(void *)&__int128 v340 = v81;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v340, (char *)&v340 + 8, v77 + 14, v77 + 22);
      _os_log_impl( (void *)&_mh_execute_header,  v75,  v76,  "Unable to create AccessoryProductData from %ld/%ld",  (uint8_t *)v77,  0x16u);
      swift_slowDealloc(v77, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v338);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v340);
    }

    uint64_t v86 = v324;
    UUID.init(uuid:)(0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL, 0LL);
  }

  else
  {
    uint64_t v82 = v71;
    unint64_t v83 = v72;
    if (qword_10099B108 != -1) {
      swift_once(&qword_10099B108, sub_1000F5DDC);
    }
    __int128 v340 = xmmword_1009A1330;
    sub_10001736C(xmmword_1009A1330, *((unint64_t *)&xmmword_1009A1330 + 1));
    Data.append(_:)(v82, v83);
    __int128 v84 = v340;
    __int128 v338 = v340;
    unint64_t v85 = sub_100042F34();
    DataProtocol.stableUUID.getter(&type metadata for Data, v85);
    sub_100016F9C(v84, *((unint64_t *)&v84 + 1));
    sub_1000182F0(v82, v83);
    uint64_t v86 = v324;
  }

  uint64_t v87 = v317;
  uint64_t v88 = *(void *)(*(void *)(v317 + 8) + 8LL);
  v323 = *(void (**)(uint64_t, uint64_t))(v88 + 32);
  v89 = v321;
  uint64_t v90 = v320;
  v323(v320, v88);
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  v326 = *(void (**)(char *, uint64_t))(v311 + 8);
  v326(v89, v86);
  id v92 = v325;
  [v325 setIdentifier:isa];

  (*(void (**)(uint64_t, uint64_t))(v87 + 16))(v90, v87);
  NSString v93 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v92 setModel:v93];

  sub_100022898(0LL, &qword_1009A0B70, &OBJC_CLASS___SPBeaconShare_ptr);
  sub_10020EB64( &qword_1009A2448,  &qword_1009A0B70,  &OBJC_CLASS___SPBeaconShare_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
  Class v94 = Set._bridgeToObjectiveC()().super.isa;
  [v92 setShares:v94];

  (*(void (**)(uint64_t, uint64_t))(v87 + 24))(v90, v87);
  NSString v95 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v92 setSystemVersion:v95];

  v309 = v66;
  Class v96 = UUID._bridgeToObjectiveC()().super.isa;
  [v92 setProductUUID:v96];

  objc_msgSend(v92, "setVendorId:", v319(v90, v87));
  objc_msgSend(v92, "setProductId:", v315(v90, v87));
  v97 = v310;
  v277 = *(void (**)(uint64_t, uint64_t))(v87 + 184);
  v277(v90, v87);
  Class v98 = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v99 = v330;
  v315 = *(uint64_t (**)(uint64_t, uint64_t))(v318 + 8);
  v315((uint64_t)v97, v330);
  [v92 setPairingDate:v98];

  v100 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v87 + 176))(v90, v87);
  [v92 setType:v100];

  uint64_t v101 = (uint64_t)v333;
  v319 = (uint64_t (*)(uint64_t, uint64_t))v88;
  v323(v90, v88);
  uint64_t v312 = *(void *)(v322 + 136);
  v102 = sub_100577004(v101);
  uint64_t v103 = v102[2];
  v104 = (int *)type metadata accessor for LostModeRecord(0LL);
  uint64_t v105 = *((void *)v104 - 1);
  if (v103)
  {
    uint64_t v106 = v304;
    sub_10001DC4C( (uint64_t)v102 + ((*(unsigned __int8 *)(v105 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v105 + 80)),  v304,  type metadata accessor for LostModeRecord);
    uint64_t v107 = 0LL;
  }

  else
  {
    uint64_t v107 = 1LL;
    uint64_t v106 = v304;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v105 + 56))(v106, v107, 1LL, v104);
  swift_bridgeObjectRelease();
  v326(v333, v324);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v105 + 48))(v106, 1LL, v104) == 1)
  {
    sub_100015794(v106, &qword_1009AA840);
    id v108 = 0LL;
  }

  else
  {
    v109 = (uint64_t *)(v106 + v104[9]);
    uint64_t v110 = v109[1];
    v333 = (char *)*v109;
    uint64_t v111 = v104[8];
    v112 = (uint64_t *)(v106 + v104[7]);
    uint64_t v113 = *v112;
    uint64_t v114 = v112[1];
    uint64_t v115 = *(void *)(v106 + v111 + 8);
    uint64_t v304 = *(void *)(v106 + v111);
    swift_bridgeObjectRetain(v115);
    swift_bridgeObjectRetain(v110);
    swift_bridgeObjectRetain(v114);
    v116 = objc_autoreleasePoolPush();
    uint64_t v117 = (uint64_t)v284;
    sub_100544838(v106);
    v118 = v116;
    uint64_t v90 = v320;
    objc_autoreleasePoolPop(v118);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v318 + 56))(v117, 0LL, 1LL, v99);
    id v119 = objc_allocWithZone(&OBJC_CLASS___SPLostModeInfo);
    id v108 = sub_100545B10((uint64_t)v333, v110, v113, v114, v304, v115, v117);
    sub_100018C68(v106, type metadata accessor for LostModeRecord);
  }

  uint64_t v120 = (uint64_t)v305;
  [v325 setLostModeInfo:v108];

  v323(v90, (uint64_t)v319);
  if (qword_10099B300 != -1) {
    swift_once(&qword_10099B300, sub_1003459EC);
  }
  uint64_t v121 = qword_100A2A6C8;
  v122 = objc_autoreleasePoolPush();
  sub_100346B24(v121, v120, 0LL, 0LL, &v340);
  uint64_t v123 = v307;
  v124 = v314;
  uint64_t v125 = (uint64_t)&v314[*(int *)(v307 + 48)];
  objc_autoreleasePoolPop(v122);
  LOBYTE(v121) = sub_100518274(v125, v120, (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v340, 1);
  swift_bridgeObjectRelease();
  uint64_t v126 = v120;
  uint64_t v127 = v324;
  v326((char *)v126, v324);
  LOBYTE(v122) = v121 & 1;
  _BYTE *v124 = v121 & 1;
  [v325 setConnected:v121 & 1];
  uint64_t v128 = *(int *)(v123 + 48);
  v129 = v306;
  v130 = &v306[v128];
  _BYTE *v306 = (_BYTE)v122;
  sub_10001581C(v125, (uint64_t)&v129[v128], (uint64_t *)&unk_10099D720);
  uint64_t v131 = v318;
  uint64_t v307 = *(void *)(v318 + 48);
  if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v307)(v130, 1LL, v99) == 1)
  {
    Class v132 = 0LL;
  }

  else
  {
    Class v132 = Date._bridgeToObjectiveC()().super.isa;
    v315((uint64_t)v130, v99);
  }

  uint64_t v133 = v320;
  id v134 = v325;
  [v325 setConnectedStateExpiryDate:v132];

  [v134 setIsAppleAudioAccessory:(*(uint64_t (**)(uint64_t))(v317 + 120))(v133) & 1];
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  v306 = 0LL;
  sub_1006A1410(v340);
  double v136 = v135;
  uint64_t v137 = swift_bridgeObjectRelease();
  v138 = v313;
  Date.init(timeIntervalSinceNow:)(v137, -v136);
  uint64_t v139 = (uint64_t)v321;
  v323(v133, (uint64_t)v319);
  v140 = sub_100578498(v139);
  v326((char *)v139, v127);
  v284 = *(void (**)(char *, char *, uint64_t))(v131 + 16);
  v284(v332, v138, v99);
  uint64_t v141 = sub_100022898(0LL, &qword_1009A0A28, &OBJC_CLASS___SPLocationProvider_ptr);
  uint64_t v142 = sub_10020EB64( &qword_1009A2450,  &qword_1009A0A28,  &OBJC_CLASS___SPLocationProvider_ptr,  (uint64_t)&protocol conformance descriptor for NSObject);
  swift_bridgeObjectRetain(v140);
  v305 = (char *)v141;
  uint64_t v304 = v142;
  unint64_t v143 = 0LL;
  *(void *)&__int128 v340 = Set.init(minimumCapacity:)(0LL);
  uint64_t v144 = (uint64_t)v140;
  unint64_t v145 = v140[2];
  v146 = &protocol conformance descriptor for Date;
  v147 = &qword_1009A1280;
  v333 = (char *)v144;
  v148 = v329;
  while (1)
  {
    v149 = v335;
    if (v143 != v145)
    {
      while (v143 < *(void *)(v144 + 16))
      {
        unint64_t v150 = v143 + 1;
        sub_10001DC4C( v144 + ((v334[80] + 32LL) & ~(unint64_t)v334[80])
        + *((void *)v334 + 9) * v143,
          (uint64_t)v38,
          type metadata accessor for LocationProvider);
        v151 = &v38[v149[7]];
        uint64_t v152 = sub_100007864( &qword_1009A1280,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
        if ((dispatch thunk of static Comparable.< infix(_:_:)(v151, v332, v99, v152) & 1) == 0)
        {
          uint64_t v153 = (uint64_t)v148;
          sub_10002218C((uint64_t)v38, v331, type metadata accessor for LocationProvider);
          uint64_t v154 = 0LL;
          ++v143;
          v149 = v335;
          goto LABEL_31;
        }

        sub_100018C68((uint64_t)v38, type metadata accessor for LocationProvider);
        ++v143;
        uint64_t v144 = (uint64_t)v333;
        v149 = v335;
        if (v145 == v150) {
          goto LABEL_29;
        }
      }

      __break(1u);
      goto LABEL_77;
    }

uint64_t sub_10054CDDC( void **a1, uint64_t a2, uint64_t a3, uint64_t a4, void (*a5)(void), uint64_t a6)
{
  return sub_10014061C(*a1, a2, a3, a4, a5, a6);
}

uint64_t sub_10054CDE4(void **a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  return sub_10050495C( *a1,  a2,  a3,  a4,  a5,  &qword_1009A49F0,  type metadata accessor for OwnedBeaconGroup,  (void (*)(void *))sub_1001CBBB8,  (uint64_t)sub_100571B2C);
}

uint64_t sub_10054CE28(void **a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  return sub_10050495C( *a1,  a2,  a3,  a4,  a5,  &qword_1009A7F18,  type metadata accessor for LostModeRecord,  (void (*)(void *))sub_1005F0CB4,  (uint64_t)sub_100571B90);
}

uint64_t sub_10054CE6C(uint64_t a1, uint64_t a2, char a3, int a4, int a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  int v29 = a4;
  int v30 = a5;
  uint64_t v14 = type metadata accessor for DateInterval(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v32[3] = a7;
  v32[4] = a8;
  uint64_t v18 = sub_10000A7C8(v32);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a7 - 8) + 16LL))(v18, a1, a7);
  uint64_t v19 = *(void *)(a6 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  uint64_t v20 = type metadata accessor for BeaconKeyManager(0LL);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1005717C8, a6, v19, (char *)&type metadata for () + 8, v20);
  uint64_t v21 = v31;
  sub_100013044((uint64_t)v32, (uint64_t)&v31);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, v14);
  uint64_t v22 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v23 = (v22 + 64) & ~v22;
  uint64_t v24 = v23 + v16;
  uint64_t v25 = swift_allocObject(&unk_100961480, v24 + 3, v22 | 7);
  *(void *)(v25 + 16) = v21;
  sub_100012EC0(&v31, v25 + 24);
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v25 + v23, v17, v14);
  uint64_t v26 = (_BYTE *)(v25 + v24);
  *uint64_t v26 = a3;
  v26[1] = v29;
  v26[2] = v30;
  swift_retain();
  unsafeFromAsyncTask<A>(_:)(&unk_1009A6090, v25, &_s9KeyResultON);
  swift_release(v25);
  swift_release(v21);
  uint64_t v27 = v31;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v32);
  return v27;
}

uint64_t sub_10054D038(void **a1, uint64_t a2, uint64_t a3, void (*a4)(char *), uint64_t a5)
{
  return sub_10050495C( *a1,  a2,  a3,  a4,  a5,  &qword_1009A6100,  type metadata accessor for ShareRecord,  (void (*)(void *))sub_10003CCA8,  (uint64_t)sub_100571B18);
}

BOOL sub_10054D07C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconStatus(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v20 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v20 - v12;
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v20 - v14;
  char v16 = static UUID.== infix(_:_:)(a1, a2);
  sub_10001DC4C(a1, (uint64_t)v15, type metadata accessor for BeaconStatus);
  sub_10001DC4C(a2, (uint64_t)v13, type metadata accessor for BeaconStatus);
  if ((v16 & 1) == 0)
  {
    sub_100018C68((uint64_t)v13, type metadata accessor for BeaconStatus);
    sub_100018C68((uint64_t)v15, type metadata accessor for BeaconStatus);
    sub_10001DC4C(a1, (uint64_t)v10, type metadata accessor for BeaconStatus);
    sub_10001DC4C(a2, (uint64_t)v7, type metadata accessor for BeaconStatus);
    goto LABEL_5;
  }

  char v17 = static Date.== infix(_:_:)(&v15[*(int *)(v4 + 24)], &v13[*(int *)(v4 + 24)]);
  sub_100018C68((uint64_t)v13, type metadata accessor for BeaconStatus);
  sub_100018C68((uint64_t)v15, type metadata accessor for BeaconStatus);
  sub_10001DC4C(a1, (uint64_t)v10, type metadata accessor for BeaconStatus);
  sub_10001DC4C(a2, (uint64_t)v7, type metadata accessor for BeaconStatus);
  if ((v17 & 1) == 0)
  {
LABEL_5:
    BOOL v18 = 0LL;
    goto LABEL_6;
  }

  BOOL v18 = v10[*(int *)(v4 + 20)] == v7[*(int *)(v4 + 20)];
LABEL_6:
  sub_100018C68((uint64_t)v7, type metadata accessor for BeaconStatus);
  sub_100018C68((uint64_t)v10, type metadata accessor for BeaconStatus);
  return v18;
}

void sub_10054D260(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v80 = a2;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v5);
  uint64_t v101 = (char *)&v73 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v93 = *(void *)(v7 - 8);
  uint64_t v94 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v73 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A7E78);
  __chkstk_darwin(v10);
  uint64_t v102 = (uint64_t)&v73 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v103 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v88 = *(void *)(v103 - 8);
  __chkstk_darwin(v103);
  uint64_t v86 = (char *)&v73 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_1009B2B10);
  uint64_t v14 = __chkstk_darwin(v13);
  v91 = (char *)&v73 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v87 = (uint64_t)&v73 - v16;
  uint64_t v17 = sub_100004AEC(&qword_1009B2B18);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v97 = v17;
  uint64_t v98 = v18;
  uint64_t v19 = __chkstk_darwin(v17);
  id v92 = (char *)&v73 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v90 = (uint64_t)&v73 - v21;
  uint64_t v22 = sub_100004AEC(&qword_1009B2B08);
  __chkstk_darwin(v22);
  uint64_t v24 = (char *)&v73 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = sub_100004AEC(&qword_1009B2AF0);
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v89 = (uint64_t)&v73 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v28);
  int v30 = (char *)&v73 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v81 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v82 = *(void *)(v81 - 8);
  uint64_t v31 = __chkstk_darwin(v81);
  uint64_t v78 = (uint64_t)&v73 - ((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v31);
  uint64_t v79 = (uint64_t)&v73 - v33;
  uint64_t v34 = sub_100004AEC(&qword_1009B2AF8);
  __chkstk_darwin(v34);
  uint64_t v36 = (char *)&v73 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v104 = _swiftEmptyArrayStorage;
  sub_100015750(a1, (uint64_t)v36, &qword_1009B2AF8);
  __int128 v84 = v36;
  sub_10001581C((uint64_t)v36, (uint64_t)v24, &qword_1009B2B08);
  uint64_t v74 = v26;
  uint64_t v37 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
  uint64_t v83 = v25;
  uint64_t v77 = v37;
  if (v37(v24, 1LL, v25) == 1)
  {
LABEL_2:
    sub_100015794((uint64_t)v24, &qword_1009B2B08);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56))(v30, 1LL, 1LL, v81);
LABEL_3:
    sub_100015794((uint64_t)v84, &qword_1009B2AF8);
    sub_100015794((uint64_t)v30, (uint64_t *)&unk_1009A9C30);
    return;
  }

  uint64_t v38 = v98;
  uint64_t v39 = v83;
  unint64_t v85 = (void (*)(void))v9;
  os_log_type_t v76 = v24;
  v75 = v30;
  while (1)
  {
    uint64_t v99 = v3;
    uint64_t v40 = v89;
    sub_100015750((uint64_t)v24, v89, &qword_1009B2AF0);
    uint64_t v100 = v40 + *(int *)(v39 + 40);
    uint64_t v41 = v102;
    sub_10001581C(v100, v102, &qword_1009A7E78);
    uint64_t v42 = v88;
    Class v96 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v88 + 48);
    if (v96(v41, 1LL, v103) != 1) {
      break;
    }
    uint64_t v43 = v87;
    uint64_t v44 = v97;
LABEL_17:
    sub_100015794(v102, &qword_1009A7E78);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v38 + 56))(v43, 1LL, 1LL, v44);
LABEL_18:
    uint64_t v62 = v43;
    uint64_t v3 = v99;
    uint64_t v24 = v76;
    sub_100015794(v89, &qword_1009B2AF0);
    sub_100015794(v62, &qword_1009B2B10);
    uint64_t v63 = (uint64_t)v84;
    sub_100015794((uint64_t)v84, &qword_1009B2B08);
    uint64_t v64 = 1LL;
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v74 + 56))(v63, 1LL, 1LL, v83);
    int v30 = v75;
LABEL_19:
    uint64_t v65 = v82;
    uint64_t v66 = v64;
    uint64_t v67 = v81;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v82 + 56))(v30, v66, 1LL, v81);
    uint64_t v68 = v79;
    sub_10002218C((uint64_t)v30, v79, type metadata accessor for OwnedBeaconRecord);
    char v69 = sub_1005071E8(v68, v80);
    if (v3)
    {
      sub_100018C68(v68, type metadata accessor for OwnedBeaconRecord);
      sub_100015794((uint64_t)v84, &qword_1009B2AF8);
      swift_release(v104);
      return;
    }

    if ((v69 & 1) != 0)
    {
      sub_10002218C(v68, v78, type metadata accessor for OwnedBeaconRecord);
      uint64_t v70 = v104;
      if ((swift_isUniquelyReferenced_nonNull_native(v104) & 1) == 0)
      {
        sub_1000328A4(0, v70[2] + 1LL, 1);
        uint64_t v70 = v104;
      }

      unint64_t v72 = v70[2];
      unint64_t v71 = v70[3];
      if (v72 >= v71 >> 1)
      {
        sub_1000328A4(v71 > 1, v72 + 1, 1);
        uint64_t v70 = v104;
      }

      v70[2] = v72 + 1;
      sub_10002218C( v78,  (uint64_t)v70 + ((*(unsigned __int8 *)(v82 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v82 + 80))
      + *(void *)(v82 + 72) * v72,
        type metadata accessor for OwnedBeaconRecord);
      uint64_t v38 = v98;
    }

    else
    {
      sub_100018C68(v68, type metadata accessor for OwnedBeaconRecord);
    }

    sub_10001581C((uint64_t)v84, (uint64_t)v24, &qword_1009B2B08);
    uint64_t v39 = v83;
    if (v77(v24, 1LL, v83) == 1) {
      goto LABEL_2;
    }
  }

  NSString v95 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v42 + 32);
  uint64_t v45 = v86;
  uint64_t v43 = v87;
  while (1)
  {
    uint64_t v46 = (uint64_t)v91;
    uint64_t v47 = v95(v45, v102, v103);
    DirectorySequence.next()(v47);
    uint64_t v48 = (uint64_t)v101;
    uint64_t v50 = v93;
    uint64_t v49 = v94;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v93 + 48))(v101, 1LL, v94) == 1)
    {
      uint64_t v51 = v103;
      (*(void (**)(char *, uint64_t))(v42 + 8))(v45, v103);
      sub_100015794(v48, (uint64_t *)&unk_1009A34D0);
      uint64_t v52 = v100;
      sub_100015794(v100, &qword_1009A7E78);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v52, 1LL, 1LL, v51);
      uint64_t v44 = v97;
      uint64_t v38 = v98;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v98 + 56))(v43, 1LL, 1LL, v97);
      goto LABEL_14;
    }

    uint64_t v53 = v103;
    uint64_t v54 = v85;
    (*(void (**)(void (*)(void), uint64_t, uint64_t))(v50 + 32))(v85, v48, v49);
    uint64_t v55 = objc_autoreleasePoolPush();
    uint64_t v56 = v99;
    sub_1005428E8( v54,  v89,  (uint64_t *)&unk_1009A9C30,  type metadata accessor for OwnedBeaconRecord,  &qword_1009B2AF0,  &qword_1009B2AC0,  (uint64_t)sub_10056B650,  &qword_1009B2B18,  v46);
    uint64_t v99 = v56;
    if (v56) {
      break;
    }
    objc_autoreleasePoolPop(v55);
    uint64_t v57 = v88;
    uint64_t v45 = v86;
    (*(void (**)(char *, uint64_t))(v88 + 8))(v86, v53);
    (*(void (**)(void (*)(void), uint64_t))(v50 + 8))(v54, v49);
    uint64_t v43 = v87;
    sub_100015750(v46, v87, &qword_1009B2B10);
    uint64_t v42 = v57;
    uint64_t v44 = v97;
    uint64_t v38 = v98;
LABEL_14:
    int v58 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v43, 1LL, v44);
    uint64_t v59 = (uint64_t)v92;
    if (v58 == 1) {
      goto LABEL_18;
    }
    uint64_t v60 = v90;
    sub_100015750(v43, v90, &qword_1009B2B18);
    sub_100015750(v60, v59, &qword_1009B2B18);
    if (swift_getEnumCaseMultiPayload(v59, v44) != 1)
    {
      sub_100015794(v89, &qword_1009B2AF0);
      int v30 = v75;
      sub_10002218C(v59, (uint64_t)v75, type metadata accessor for OwnedBeaconRecord);
      uint64_t v64 = 0LL;
      uint64_t v3 = v99;
      uint64_t v24 = v76;
      goto LABEL_19;
    }

    sub_100015794(v59, &qword_1009B2B18);
    uint64_t v61 = v102;
    sub_10001581C(v100, v102, &qword_1009A7E78);
    if (v96(v61, 1LL, v103) == 1) {
      goto LABEL_17;
    }
  }

  objc_autoreleasePoolPop(v55);
  __break(1u);
}

void *sub_10054DBB8(uint64_t a1, uint64_t a2)
{
  uint64_t v29 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v5 = __chkstk_darwin(v29);
  uint64_t v7 = (char *)v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v10 = (char *)v25 - v9;
  uint64_t result = _swiftEmptyArrayStorage;
  int v30 = _swiftEmptyArrayStorage;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return result;
  }
  v25[1] = v2;
  uint64_t v13 = 0LL;
  uint64_t v14 = *(void *)(v8 + 72);
  unint64_t v28 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  uint64_t v15 = a1 + v28;
  uint64_t v16 = _swiftEmptyArrayStorage;
  uint64_t v26 = v15;
  uint64_t v27 = v12;
  while (1)
  {
    uint64_t result = (void *)sub_10001DC4C(v15 + v14 * v13, (uint64_t)v10, type metadata accessor for BeaconObservation);
    uint64_t v17 = *(void *)(a2 + 16);
    if (v17)
    {
      uint64_t v18 = qword_100806A08[v10[*(int *)(v29 + 24)]];
      if (qword_100806A08[*(char *)(a2 + 32)] == v18)
      {
LABEL_7:
        uint64_t v19 = (uint64_t)v7;
        sub_10002218C((uint64_t)v10, (uint64_t)v7, type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0) {
          sub_100032AA8(0, v16[2] + 1LL, 1);
        }
        uint64_t v16 = v30;
        unint64_t v21 = v30[2];
        unint64_t v20 = v30[3];
        if (v21 >= v20 >> 1)
        {
          sub_100032AA8(v20 > 1, v21 + 1, 1);
          uint64_t v16 = v30;
        }

        v16[2] = v21 + 1;
        uint64_t v22 = (uint64_t)v16 + v28 + v21 * v14;
        uint64_t v7 = (char *)v19;
        sub_10002218C(v19, v22, type metadata accessor for BeaconObservation);
        uint64_t v15 = v26;
        uint64_t v12 = v27;
        goto LABEL_4;
      }

      if (v17 != 1) {
        break;
      }
    }

void sub_10054DDE8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v26 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *(void *)(a1 + 56);
  uint64_t v24 = a1 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  unint64_t v11 = v10 & v8;
  int64_t v25 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v30 = a1;
  __n128 v12 = swift_bridgeObjectRetain(a1);
  int64_t v13 = 0LL;
  uint64_t v14 = _swiftEmptyArrayStorage;
  if (v11) {
    goto LABEL_29;
  }
LABEL_6:
  int64_t v15 = v13 + 1;
  if (__OFADD__(v13, 1LL))
  {
    __break(1u);
  }

  else
  {
    if (v15 >= v25) {
      goto LABEL_30;
    }
    unint64_t v16 = *(void *)(v24 + 8 * v15);
    ++v13;
    if (v16) {
      goto LABEL_21;
    }
    int64_t v13 = v15 + 1;
    if (v15 + 1 >= v25) {
      goto LABEL_30;
    }
    unint64_t v16 = *(void *)(v24 + 8 * v13);
    if (v16) {
      goto LABEL_21;
    }
    int64_t v13 = v15 + 2;
    if (v15 + 2 >= v25) {
      goto LABEL_30;
    }
    unint64_t v16 = *(void *)(v24 + 8 * v13);
    if (v16) {
      goto LABEL_21;
    }
    int64_t v13 = v15 + 3;
    if (v15 + 3 >= v25) {
      goto LABEL_30;
    }
    unint64_t v16 = *(void *)(v24 + 8 * v13);
    if (v16) {
      goto LABEL_21;
    }
    int64_t v17 = v15 + 4;
    if (v17 >= v25)
    {
LABEL_30:
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v3 + 56))(v7, 1LL, 1LL, v2, v12);
LABEL_31:
      swift_release(v30);
      return;
    }

    unint64_t v16 = *(void *)(v24 + 8 * v17);
    if (v16)
    {
      int64_t v13 = v17;
LABEL_21:
      unint64_t v11 = (v16 - 1) & v16;
      for (unint64_t i = __clz(__rbit64(v16)) + (v13 << 6); ; unint64_t i = v22 | (v13 << 6))
      {
        (*(void (**)(char *, unint64_t, uint64_t, __n128))(v3 + 16))( v7,  *(void *)(v30 + 48) + *(void *)(v3 + 72) * i,  v2,  v12);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v7, 0LL, 1LL, v2);
        uint64_t v19 = (uint64_t)v26;
        (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v26, v7, v2);
        sub_100504C28(v19, (uint64_t)&v27);
        (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v19, v2);
        if (v28)
        {
          sub_100012EC0(&v27, (uint64_t)v29);
          sub_100012EC0(v29, (uint64_t)&v27);
          if ((swift_isUniquelyReferenced_nonNull_native(v14) & 1) == 0) {
            uint64_t v14 = sub_1004C4740(0LL, v14[2] + 1LL, 1, v14);
          }
          unint64_t v21 = v14[2];
          unint64_t v20 = v14[3];
          if (v21 >= v20 >> 1) {
            uint64_t v14 = sub_1004C4740((void *)(v20 > 1), v21 + 1, 1, v14);
          }
          v14[2] = v21 + 1;
          sub_100012EC0(&v27, (uint64_t)&v14[5 * v21 + 4]);
          if (!v11) {
            goto LABEL_6;
          }
        }

        else
        {
          sub_100015794((uint64_t)&v27, (uint64_t *)&unk_1009A9C40);
          if (!v11) {
            goto LABEL_6;
          }
        }

void *sub_10054E150(uint64_t a1, char a2, int a3, int a4)
{
  int v48 = a3;
  LODWORD(v49) = a4;
  uint64_t v6 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = &v47[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v9);
  unint64_t v11 = &v47[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  unint64_t v16 = &v47[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = &v47[-v18];
  v52[3] = v17;
  v52[4] = sub_100007864( (unint64_t *)&qword_10099D000,  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_10080B120);
  unint64_t v20 = sub_10000A7C8(v52);
  sub_10001DC4C(a1, (uint64_t)v20, type metadata accessor for OwnedBeaconRecord);
  sub_100013044((uint64_t)v52, (uint64_t)v51);
  uint64_t v21 = sub_100004AEC(&qword_1009B0530);
  int v22 = swift_dynamicCast(v11, v51, v21, v12, 6LL);
  uint64_t v23 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v13 + 56);
  if (!v22)
  {
    v23(v11, 1LL, 1LL, v12);
    sub_100015794((uint64_t)v11, (uint64_t *)&unk_1009A9C30);
    goto LABEL_16;
  }

  v23(v11, 0LL, 1LL, v12);
  sub_10002218C((uint64_t)v11, (uint64_t)v19, type metadata accessor for OwnedBeaconRecord);
  sub_10001DC4C((uint64_t)&v19[*(int *)(v12 + 24)], (uint64_t)v8, type metadata accessor for StableIdentifier);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v8, v6);
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v30 = sub_100004AEC((uint64_t *)&unk_1009B0520);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v31 = &v8[*(int *)(v30 + 96)];
    unsigned __int8 v32 = *v31;
    unsigned __int8 v33 = v31[1];
    swift_bridgeObjectRelease();
    if ((v33 & 1) == 0)
    {
      char v27 = a2 & 1;
      char v28 = v48 & 1;
      char v29 = v49 & 1;
      unsigned __int8 v26 = v32;
      goto LABEL_13;
    }

    sub_100018C68((uint64_t)v19, type metadata accessor for OwnedBeaconRecord);
    uint64_t v34 = type metadata accessor for UUID(0LL);
    (*(void (**)(_BYTE *, uint64_t))(*(void *)(v34 - 8) + 8LL))(v8, v34);
LABEL_16:
    uint64_t v44 = &_swiftEmptySetSingleton;
    goto LABEL_17;
  }

  if (EnumCaseMultiPayload != 3)
  {
    if (qword_10099B538 != -1) {
      swift_once(&qword_10099B538, sub_1004F3B48);
    }
    uint64_t v35 = type metadata accessor for Logger(0LL);
    sub_10000A720(v35, (uint64_t)qword_100A2ACC8);
    uint64_t v36 = sub_10001DC4C((uint64_t)v19, (uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
    uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.error.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = swift_slowAlloc(22LL, -1LL);
      uint64_t v40 = swift_slowAlloc(32LL, -1LL);
      uint64_t v49 = v40;
      *(_DWORD *)uint64_t v39 = 141558275;
      uint64_t v50 = 1752392040LL;
      v51[0] = v40;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v39 + 4, v39 + 12);
      *(_WORD *)(v39 + 12) = 2081;
      sub_1006DD1E4();
      uint64_t v50 = sub_1003F11D4(v41, v42, v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v39 + 14, v39 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "nearbyParts: Invalid stableIdentifier %{private,mask.hash}s",  (uint8_t *)v39,  0x16u);
      uint64_t v43 = v49;
      swift_arrayDestroy(v49, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v43, -1LL, -1LL);
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
    }

    sub_100018C68((uint64_t)v19, type metadata accessor for OwnedBeaconRecord);
    sub_100018C68((uint64_t)v8, type metadata accessor for StableIdentifier);
    goto LABEL_16;
  }

  uint64_t v25 = sub_100004AEC((uint64_t *)&unk_1009AF840);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unsigned __int8 v26 = v8[*(int *)(v25 + 96)];
  char v27 = a2 & 1;
  char v28 = v48 & 1;
  char v29 = v49 & 1;
LABEL_13:
  uint64_t v44 = sub_1000412D0(v26, v27, v28, v29);
  sub_100018C68((uint64_t)v19, type metadata accessor for OwnedBeaconRecord);
  uint64_t v45 = type metadata accessor for UUID(0LL);
  (*(void (**)(_BYTE *, uint64_t))(*(void *)(v45 - 8) + 8LL))(v8, v45);
LABEL_17:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v52);
  return v44;
}

uint64_t sub_10054E668(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v22 = (uint64_t)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v19 - v10;
  uint64_t v12 = _swiftEmptyArrayStorage;
  uint64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v21 = *(void *)(a1 + 16);
  if (v21)
  {
    unint64_t v13 = 0LL;
    uint64_t v19 = a2;
    uint64_t v20 = a1;
    while (v13 < *(void *)(a1 + 16))
    {
      unint64_t v14 = (*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
      uint64_t v15 = *(void *)(v6 + 72);
      sub_10001DC4C(a1 + v14 + v15 * v13, (uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
      BOOL v16 = sub_10051D000((uint64_t)v11, a2);
      if (v2)
      {
        sub_100018C68((uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
        swift_release(v12);
        swift_bridgeObjectRelease();
        return (uint64_t)v12;
      }

      if (v16)
      {
        sub_10002218C((uint64_t)v11, v22, type metadata accessor for OwnedBeaconRecord);
        if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0) {
          sub_1000328A4(0, v12[2] + 1LL, 1);
        }
        uint64_t v12 = v23;
        unint64_t v18 = v23[2];
        unint64_t v17 = v23[3];
        if (v18 >= v17 >> 1)
        {
          sub_1000328A4(v17 > 1, v18 + 1, 1);
          uint64_t v12 = v23;
        }

        v12[2] = v18 + 1;
        uint64_t result = sub_10002218C(v22, (uint64_t)v12 + v14 + v18 * v15, type metadata accessor for OwnedBeaconRecord);
        a2 = v19;
        a1 = v20;
      }

      else
      {
        uint64_t result = sub_100018C68((uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
      }

      if (v21 == ++v13)
      {
        uint64_t v12 = v23;
        goto LABEL_15;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return (uint64_t)v12;
  }

  return result;
}

void *sub_10054E868(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v57 = a7;
  uint64_t v58 = a1;
  uint64_t v54 = a5;
  int v51 = a3;
  int v52 = a4;
  int v50 = a2;
  uint64_t v8 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v8);
  uint64_t v53 = &v49[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = &v49[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v14);
  BOOL v16 = &v49[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v17 = type metadata accessor for UUID(0LL);
  uint64_t v55 = *(void *)(v17 - 8);
  uint64_t v56 = v17;
  __chkstk_darwin(v17);
  uint64_t v19 = &v49[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v20);
  uint64_t v22 = &v49[-((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v23 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  unsigned __int8 v26 = &v49[-((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  v60[3] = a6;
  v60[4] = v57;
  char v27 = sub_10000A7C8(v60);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a6 - 8) + 16LL))(v27, v58, a6);
  sub_100013044((uint64_t)v60, (uint64_t)v59);
  uint64_t v28 = sub_100004AEC(&qword_1009B0530);
  int v29 = swift_dynamicCast(v22, v59, v28, v23, 6LL);
  uint64_t v30 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v24 + 56);
  if (v29)
  {
    uint64_t v31 = v11;
    uint64_t v58 = v10;
    uint64_t v33 = (uint64_t)v53;
    uint64_t v32 = v54;
    v30(v22, 0LL, 1LL, v23);
    sub_10002218C((uint64_t)v22, (uint64_t)v26, type metadata accessor for OwnedBeaconRecord);
    sub_10001581C((uint64_t)&v26[*(int *)(v23 + 28)], (uint64_t)v16, &qword_10099D8A0);
    uint64_t v35 = v55;
    uint64_t v34 = v56;
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v55 + 48))(v16, 1LL, v56) == 1)
    {
      sub_100015794((uint64_t)v16, &qword_10099D8A0);
      uint64_t v36 = (uint64_t)v26;
    }

    else
    {
      uint64_t v37 = v19;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v35 + 32))(v19, v16, v34);
      sub_10050F124((uint64_t)v19, v33);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v31 + 48))(v33, 1LL, v58) != 1)
      {
        uint64_t v40 = (uint64_t)v13;
        sub_10002218C(v33, (uint64_t)v13, type metadata accessor for OwnedBeaconGroup);
        uint64_t v41 = v35;
        unint64_t v42 = sub_10054E150((uint64_t)v26, v50 & 1, v51 & 1, v52 & 1);
        sub_1001CC778();
        uint64_t v43 = v37;
        uint64_t v45 = v44;
        swift_retain();
        sub_10054F3A0( v45,  v32,  (uint64_t *)&unk_1009A9C30,  type metadata accessor for OwnedBeaconRecord,  (void (*)(char *))sub_100504F30,  (uint64_t (*)(void, uint64_t, uint64_t))sub_1004C46DC);
        uint64_t v47 = v46;
        swift_bridgeObjectRelease();
        swift_release(v32);
        uint64_t v48 = sub_10054E668(v47, (uint64_t)v42);
        swift_bridgeObjectRelease();
        os_log_type_t v38 = sub_1004E75B0( v48,  type metadata accessor for OwnedBeaconRecord,  (unint64_t *)&qword_10099D000,  (uint64_t)&unk_10080B120);
        swift_bridgeObjectRelease();
        sub_100018C68(v40, type metadata accessor for OwnedBeaconGroup);
        (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v43, v56);
        sub_100018C68((uint64_t)v26, type metadata accessor for OwnedBeaconRecord);
        goto LABEL_9;
      }

      sub_100015794(v33, &qword_1009AA830);
      (*(void (**)(_BYTE *, uint64_t))(v35 + 8))(v19, v34);
      uint64_t v36 = (uint64_t)v26;
    }

    sub_100018C68(v36, type metadata accessor for OwnedBeaconRecord);
  }

  else
  {
    v30(v22, 1LL, 1LL, v23);
    sub_100015794((uint64_t)v22, (uint64_t *)&unk_1009A9C30);
  }

  os_log_type_t v38 = _swiftEmptyArrayStorage;
LABEL_9:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v60);
  return v38;
}

uint64_t sub_10054ECBC()
{
  if (qword_10099B4F0 != -1) {
    swift_once(&qword_10099B4F0, sub_1004B82C0);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2AB30);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Posting SPManagedCBPeripheralChanged from BeaconStore.", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v5 = (void *)SPManagedCBPeripheralChangedNotification;
  uint64_t v6 = type metadata accessor for DarwinNotificationHelper(0LL);
  swift_allocObject(v6, *(unsigned int *)(v6 + 48), *(unsigned __int16 *)(v6 + 52));
  uint64_t v7 = DarwinNotificationHelper.init(notificationName:rateLimit:)(v5, 0.0);
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
  return swift_release(v7);
}

double sub_10054EDE0(uint64_t a1, double a2)
{
  double v2 = a2;
  if (a2 < 4.0)
  {
    uint64_t v3 = static os_log_type_t.error.getter(a1);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v4 = qword_100A2B018;
    uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v6 = swift_allocObject(v5, 112LL, 7LL);
    *(_OWORD *)(v6 + 16) = xmmword_1007E4750;
    *(void *)(v6 + 56) = &type metadata for Double;
    *(void *)(v6 + 64) = &protocol witness table for Double;
    *(double *)(v6 + 32) = v2;
    *(void *)(v6 + 96) = &type metadata for Double;
    *(void *)(v6 + 104) = &protocol witness table for Double;
    *(void *)(v6 + 72) = 0x4010000000000000LL;
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "txPower too low %f  -- clamping to %f", v12, v13);
    double v2 = 4.0;
LABEL_9:
    swift_bridgeObjectRelease();
    return v2;
  }

  if (a2 > 20.0)
  {
    uint64_t v7 = static os_log_type_t.error.getter(a1);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v8 = qword_100A2B018;
    uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v10 = swift_allocObject(v9, 112LL, 7LL);
    *(_OWORD *)(v10 + 16) = xmmword_1007E4750;
    *(void *)(v10 + 56) = &type metadata for Double;
    *(void *)(v10 + 64) = &protocol witness table for Double;
    *(double *)(v10 + 32) = v2;
    *(void *)(v10 + 96) = &type metadata for Double;
    *(void *)(v10 + 104) = &protocol witness table for Double;
    *(void *)(v10 + 72) = 0x4034000000000000LL;
    os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "txPower too high %f  -- clamping to %f", v12, v13);
    double v2 = 20.0;
    goto LABEL_9;
  }

  return v2;
}

void *sub_10054EF94(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v54 = a2;
  unint64_t v55 = a3;
  uint64_t v5 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v47 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v58 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v8 = __chkstk_darwin(v58);
  uint64_t v53 = (uint64_t)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  double v12 = (char *)&v47 - v11;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v61 = _swiftEmptyArrayStorage;
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14)
  {
    uint64_t v57 = v7 + 8;
    uint64_t v15 = *(unsigned __int8 *)(v10 + 80);
    uint64_t v16 = *(void *)(v10 + 72);
    uint64_t v47 = v3;
    uint64_t v48 = (v15 + 32) & ~v15;
    uint64_t v17 = a1 + v48;
    uint64_t v52 = v5;
    uint64_t v56 = v16;
    while (1)
    {
      sub_10001DC4C(v17, (uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
      sub_10001DC4C((uint64_t)&v12[*(int *)(v58 + 24)], (uint64_t)v7, type metadata accessor for StableIdentifier);
      int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7, v5);
      if (EnumCaseMultiPayload == 3)
      {
        uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009AF840);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v24 = &v7[*(int *)(v23 + 80)];
        uint64_t v26 = *(void *)v24;
        unint64_t v25 = *((void *)v24 + 1);
        uint64_t v59 = v26;
        unint64_t v60 = v25;
      }

      else
      {
        if (EnumCaseMultiPayload != 2)
        {
          sub_100018C68((uint64_t)v7, type metadata accessor for StableIdentifier);
          goto LABEL_18;
        }

        uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009B0520);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v20 = &v7[*(int *)(v19 + 80)];
        uint64_t v21 = *(void *)v20;
        unint64_t v22 = *((void *)v20 + 1);
        uint64_t v16 = v56;
        swift_bridgeObjectRelease();
        uint64_t v59 = v21;
        unint64_t v60 = v22;
      }

      unint64_t v27 = sub_1000155F8();
      uint64_t v28 = Data.init<A>(hexString:)(&v59, &type metadata for String, v27);
      if (v29 >> 60 == 15) {
        goto LABEL_10;
      }
      uint64_t v30 = v28;
      unint64_t v31 = v29;
      uint64_t v59 = v28;
      unint64_t v60 = v29;
      unint64_t v32 = sub_100042F34();
      if ((DataProtocol.isNull.getter(&type metadata for Data, v32) & 1) != 0) {
        break;
      }
      uint64_t v34 = Data.trimmed.getter(v30, v31);
      uint64_t v49 = v35;
      uint64_t v50 = v34;
      uint64_t v36 = v54;
      unint64_t v37 = v55;
      sub_10001736C(v54, v55);
      uint64_t v38 = v34;
      uint64_t v39 = v49;
      _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v38, v49);
      int v51 = v40;
      unint64_t v41 = v37;
      uint64_t v16 = v56;
      sub_100016F9C(v36, v41);
      sub_1000182F0(v30, v31);
      unint64_t v42 = v39;
      uint64_t v5 = v52;
      sub_100016F9C(v50, v42);
      uint64_t v43 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, uint64_t))(*(void *)(v43 - 8) + 8LL))(v7, v43);
      if ((v51 & 1) != 0)
      {
        sub_10002218C((uint64_t)v12, v53, type metadata accessor for OwnedBeaconRecord);
        uint64_t v44 = v61;
        if ((swift_isUniquelyReferenced_nonNull_native(v61) & 1) == 0)
        {
          sub_1000328A4(0, v44[2] + 1LL, 1);
          uint64_t v44 = v61;
        }

        unint64_t v46 = v44[2];
        unint64_t v45 = v44[3];
        if (v46 >= v45 >> 1)
        {
          sub_1000328A4(v45 > 1, v46 + 1, 1);
          uint64_t v44 = v61;
        }

        v44[2] = v46 + 1;
        sub_10002218C(v53, (uint64_t)v44 + v48 + v46 * v16, type metadata accessor for OwnedBeaconRecord);
        goto LABEL_19;
      }

uint64_t sub_10054F370@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1004F75F4();
  *a1 = result;
  return result;
}

void sub_10054F3A0( uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t (*a4)(void), void (*a5)(char *), uint64_t (*a6)(void, uint64_t, uint64_t))
{
  unint64_t v41 = a6;
  uint64_t v50 = a2;
  int v51 = a5;
  uint64_t v48 = a3;
  uint64_t v8 = sub_100004AEC(a3);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = a4;
  uint64_t v49 = a4(0LL);
  uint64_t v52 = *(void *)(v49 - 8);
  uint64_t v11 = __chkstk_darwin(v49);
  uint64_t v43 = (uint64_t)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v42 = (uint64_t)&v39 - v13;
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v39 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = *(void *)(a1 + 56);
  uint64_t v46 = a1 + 56;
  uint64_t v22 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v23 = -1LL;
  if (v22 < 64) {
    uint64_t v23 = ~(-1LL << v22);
  }
  unint64_t v24 = v23 & v21;
  int64_t v47 = (unint64_t)(v22 + 63) >> 6;
  __n128 v25 = swift_bridgeObjectRetain(a1);
  int64_t v26 = 0LL;
  unint64_t v45 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v24)
    {
      unint64_t v27 = __clz(__rbit64(v24));
      v24 &= v24 - 1;
      unint64_t v28 = v27 | (v26 << 6);
      goto LABEL_22;
    }

    int64_t v29 = v26 + 1;
    if (__OFADD__(v26, 1LL))
    {
      __break(1u);
      goto LABEL_33;
    }

    if (v29 >= v47) {
      goto LABEL_30;
    }
    unint64_t v30 = *(void *)(v46 + 8 * v29);
    ++v26;
    if (!v30)
    {
      int64_t v26 = v29 + 1;
      if (v29 + 1 >= v47) {
        goto LABEL_30;
      }
      unint64_t v30 = *(void *)(v46 + 8 * v26);
      if (!v30)
      {
        int64_t v26 = v29 + 2;
        if (v29 + 2 >= v47) {
          goto LABEL_30;
        }
        unint64_t v30 = *(void *)(v46 + 8 * v26);
        if (!v30)
        {
          int64_t v26 = v29 + 3;
          if (v29 + 3 >= v47) {
            goto LABEL_30;
          }
          unint64_t v30 = *(void *)(v46 + 8 * v26);
          if (!v30) {
            break;
          }
        }
      }
    }

uint64_t sub_10054F7E4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v30 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord(0LL);
  sub_10001DC4C(a1 + *(int *)(v8 + 24), (uint64_t)v7, type metadata accessor for StableIdentifier);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v7, v5);
  if (EnumCaseMultiPayload == 3)
  {
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009AF840);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v12 = &v7[*(int *)(v11 + 80)];
    uint64_t v10 = *(void *)v12;
    unint64_t v13 = *((void *)v12 + 1);
  }

  else
  {
    if (EnumCaseMultiPayload != 2)
    {
      if (EnumCaseMultiPayload == 1)
      {
        uint64_t v10 = *((void *)v7 + 4);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        sub_100018C68((uint64_t)v7, type metadata accessor for StableIdentifier);
        return 0LL;
      }

      return v10;
    }

    uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009B0520);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v15 = &v7[*(int *)(v14 + 80)];
    uint64_t v10 = *(void *)v15;
    unint64_t v13 = *((void *)v15 + 1);
    swift_bridgeObjectRelease();
  }

  uint64_t v16 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8LL))(v7, v16);
  uint64_t v30 = v10;
  unint64_t v31 = v13;
  unint64_t v17 = sub_1000155F8();
  swift_bridgeObjectRetain(v13);
  uint64_t v18 = Data.init<A>(hexString:)(&v30, &type metadata for String, v17);
  if (v19 >> 60 != 15)
  {
    uint64_t v20 = v18;
    unint64_t v21 = v19;
    uint64_t v30 = v18;
    unint64_t v31 = v19;
    unint64_t v22 = sub_100042F34();
    if ((DataProtocol.isNull.getter(&type metadata for Data, v22) & 1) == 0)
    {
      uint64_t v23 = Data.trimmed.getter(v20, v21);
      unint64_t v25 = v24;
      uint64_t v26 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v26);
      uint64_t v27 = String.init(data:encoding:)(v23, v25, v4);
      if (!v28) {
        uint64_t v27 = Data.hexString.getter(v23, v25);
      }
      uint64_t v10 = v27;
      sub_100016F9C(v23, v25);
    }

    sub_1000182F0(v20, v21);
  }

  return v10;
}

uint64_t sub_10054FA7C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v15 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord(0LL);
  sub_10001DC4C(a1 + *(int *)(v5 + 24), (uint64_t)v4, type metadata accessor for StableIdentifier);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v4, v2);
  switch(EnumCaseMultiPayload)
  {
    case 1:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return -1LL;
    case 3:
      uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v9 = v4[*(int *)(v12 + 96)];
      break;
    case 2:
      uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v8 = &v4[*(int *)(v7 + 96)];
      uint64_t v9 = *v8;
      unsigned __int8 v10 = v8[1];
      swift_bridgeObjectRelease();
      if ((v10 & 1) != 0)
      {
        uint64_t v11 = type metadata accessor for UUID(0LL);
        (*(void (**)(char *, uint64_t))(*(void *)(v11 - 8) + 8LL))(v4, v11);
        return -1LL;
      }

      break;
    default:
      sub_100018C68((uint64_t)v4, type metadata accessor for StableIdentifier);
      return -1LL;
  }

  uint64_t v13 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v13 - 8) + 8LL))(v4, v13);
  return v9;
}

void sub_10054FC4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v4);
  uint64_t v48 = (uint64_t)&v43 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v56 = (uint64_t)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v43 - v10;
  uint64_t v12 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v43 = a1 + 56;
  uint64_t v16 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v17 = -1LL;
  if (v16 < 64) {
    uint64_t v17 = ~(-1LL << v16);
  }
  unint64_t v18 = v17 & v15;
  int64_t v44 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v49 = a1;
  __n128 v19 = swift_bridgeObjectRetain(a1);
  int64_t v20 = 0LL;
  uint64_t v46 = a2;
  int64_t v47 = v11;
  unint64_t v45 = v14;
  while (1)
  {
    if (v18)
    {
      unint64_t v26 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v27 = v26 | (v20 << 6);
      goto LABEL_21;
    }

    if (__OFADD__(v20++, 1LL))
    {
      __break(1u);
      goto LABEL_37;
    }

    if (v20 >= v44) {
      goto LABEL_35;
    }
    unint64_t v29 = *(void *)(v43 + 8 * v20);
    if (!v29) {
      break;
    }
LABEL_20:
    unint64_t v18 = (v29 - 1) & v29;
    unint64_t v27 = __clz(__rbit64(v29)) + (v20 << 6);
LABEL_21:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v7 + 16))( v14,  *(void *)(v49 + 48) + *(void *)(v7 + 72) * v27,  v6,  v19);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v14, 0LL, 1LL, v6);
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v11, v14, v6);
    sub_100504C28((uint64_t)v11, (uint64_t)&v51);
    if (!v52)
    {
      sub_100015794((uint64_t)&v51, (uint64_t *)&unk_1009A9C40);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v11, v6);
LABEL_34:
      swift_release();
      return;
    }

    sub_100012EC0(&v51, (uint64_t)v53);
    uint64_t v31 = v54;
    uint64_t v32 = v55;
    sub_100012ED8(v53, v54);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v32 + 8) + 8LL) + 32LL))(v31);
    if (qword_10099B300 != -1) {
      swift_once(&qword_10099B300, sub_1003459EC);
    }
    uint64_t v33 = qword_100A2A6C8;
    unint64_t v34 = objc_autoreleasePoolPush();
    uint64_t v35 = sub_100004AEC((uint64_t *)&unk_1009AF790);
    uint64_t v36 = v50;
    OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, v33, v35);
    uint64_t v50 = v36;
    uint64_t v37 = v51;
    if (*(void *)(v51 + 16) && (unint64_t v38 = sub_10030D124(v56), (v39 & 1) != 0))
    {
      uint64_t v40 = *(void *)(*(void *)(v37 + 56) + 8 * v38);
      swift_bridgeObjectRetain(v40);
      swift_bridgeObjectRelease();
      unint64_t v41 = sub_1002FE5F8(v40);
      swift_bridgeObjectRelease();
      sub_1002FFE1C((uint64_t)v41);
      unint64_t v21 = v42;
      swift_release();
    }

    else
    {
      swift_bridgeObjectRelease();
      unint64_t v21 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))_swiftEmptyArrayStorage;
    }

    objc_autoreleasePoolPop(v34);
    uint64_t v22 = v48;
    uint64_t v23 = v56;
    char v24 = sub_100518274(v48, v56, v21, 1);
    swift_bridgeObjectRelease();
    unint64_t v25 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
    v25(v23, v6);
    sub_100015794(v22, (uint64_t *)&unk_10099D720);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v53);
    uint64_t v11 = v47;
    v25((uint64_t)v47, v6);
    uint64_t v14 = v45;
    if ((v24 & 1) == 0) {
      goto LABEL_34;
    }
  }

  int64_t v30 = v20 + 1;
  if (v20 + 1 >= v44) {
    goto LABEL_35;
  }
  unint64_t v29 = *(void *)(v43 + 8 * v30);
  if (v29) {
    goto LABEL_19;
  }
  int64_t v30 = v20 + 2;
  if (v20 + 2 >= v44) {
    goto LABEL_35;
  }
  unint64_t v29 = *(void *)(v43 + 8 * v30);
  if (v29) {
    goto LABEL_19;
  }
  int64_t v30 = v20 + 3;
  if (v20 + 3 >= v44) {
    goto LABEL_35;
  }
  unint64_t v29 = *(void *)(v43 + 8 * v30);
  if (v29) {
    goto LABEL_19;
  }
  int64_t v30 = v20 + 4;
  if (v20 + 4 >= v44)
  {
LABEL_35:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56))(v14, 1LL, 1LL, v6, v19);
    swift_release();
    return;
  }

  unint64_t v29 = *(void *)(v43 + 8 * v30);
  if (v29)
  {
LABEL_19:
    int64_t v20 = v30;
    goto LABEL_20;
  }

  while (1)
  {
    int64_t v20 = v30 + 1;
    if (__OFADD__(v30, 1LL)) {
      break;
    }
    if (v20 >= v44) {
      goto LABEL_35;
    }
    unint64_t v29 = *(void *)(v43 + 8 * v20);
    ++v30;
    if (v29) {
      goto LABEL_20;
    }
  }

void *sub_100550124(uint64_t a1, uint64_t a2)
{
  uint64_t v52 = a2;
  uint64_t v4 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v4);
  unint64_t v45 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v47 = *(void *)(v6 - 8);
  uint64_t v48 = v6;
  __chkstk_darwin(v6);
  uint64_t v46 = (uint64_t *)((char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v51 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v8 = __chkstk_darwin(v51);
  uint64_t v50 = (uint64_t)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v40 - v11;
  uint64_t result = _swiftEmptyArrayStorage;
  uint64_t v54 = _swiftEmptyArrayStorage;
  uint64_t v14 = *(void *)(a1 + 16);
  if (v14)
  {
    uint64_t v44 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedBeaconRecordsQueue;
    uint64_t v40 = v2;
    uint64_t v41 = OBJC_IVAR____TtC12searchpartyd11BeaconStore_sharedBeaconUUIDMapper;
    uint64_t v15 = *(void *)(v10 + 72);
    unint64_t v42 = (*(unsigned __int8 *)(v10 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v10 + 80);
    uint64_t v16 = a1 + v42;
    unsigned int v43 = enum case for DispatchPredicate.onQueue(_:);
    uint64_t v17 = type metadata accessor for SharedBeaconRecord;
    uint64_t v49 = (char *)&v40 - v11;
    while (1)
    {
      unint64_t v18 = v17;
      sub_10001DC4C(v16, (uint64_t)v12, v17);
      __n128 v19 = *(void **)(v52 + v44);
      unint64_t v21 = v46;
      uint64_t v20 = v47;
      *uint64_t v46 = v19;
      uint64_t v22 = v48;
      (*(void (**)(void *, void, uint64_t))(v20 + 104))(v21, v43, v48);
      id v23 = v19;
      LOBYTE(v19) = _dispatchPreconditionTest(_:)(v21);
      uint64_t result = (void *)(*(uint64_t (**)(void *, uint64_t))(v20 + 8))(v21, v22);
      uint64_t v17 = v18;
      uint64_t v24 = *(void *)(v52 + v41);
      uint64_t v25 = *(int *)(v51 + 20);
      swift_beginAccess(v24 + 24, v53, 32LL, 0LL);
      uint64_t v26 = *(void *)(v24 + 24);
      if (*(void *)(v26 + 16))
      {
        unint64_t v27 = sub_10030D124((uint64_t)&v12[v25]);
        if ((v28 & 1) != 0)
        {
          unint64_t v29 = v27;
          uint64_t v30 = *(void *)(v26 + 56);
          uint64_t v31 = type metadata accessor for UUID(0LL);
          uint64_t v32 = v45;
          uint64_t v33 = *(void *)(v31 - 8);
          (*(void (**)(char *, unint64_t, uint64_t))(v33 + 16))( v45,  v30 + *(void *)(v33 + 72) * v29,  v31);
          unint64_t v34 = *(void (**)(char *, void, uint64_t, uint64_t))(v33 + 56);
          uint64_t v17 = v18;
          v34(v32, 0LL, 1LL, v31);
        }

        else
        {
          uint64_t v31 = type metadata accessor for UUID(0LL);
          (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))(v45, 1LL, 1LL, v31);
        }

        uint64_t v12 = v49;
      }

      else
      {
        uint64_t v31 = type metadata accessor for UUID(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))(v45, 1LL, 1LL, v31);
      }

      swift_endAccess(v53);
      type metadata accessor for UUID(0LL);
      uint64_t v35 = (uint64_t)v45;
      int v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v31 - 8) + 48LL))(v45, 1LL, v31);
      sub_100015794(v35, &qword_10099D8A0);
      if (v36 != 1)
      {
        sub_100018C68((uint64_t)v12, v17);
      }

      else
      {
LABEL_14:
        sub_10002218C((uint64_t)v12, v50, v17);
        uint64_t v37 = v54;
        if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0)
        {
          sub_100032BC4(0, v37[2] + 1LL, 1);
          uint64_t v37 = v54;
        }

        unint64_t v39 = v37[2];
        unint64_t v38 = v37[3];
        if (v39 >= v38 >> 1)
        {
          sub_100032BC4(v38 > 1, v39 + 1, 1);
          uint64_t v37 = v54;
        }

        v37[2] = v39 + 1;
        sub_10002218C(v50, (uint64_t)v37 + v42 + v39 * v15, v17);
        uint64_t v12 = v49;
      }

      v16 += v15;
      if (!--v14) {
        return v54;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_100550500(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v49 = *(void *)(v8 - 8);
  uint64_t v50 = v8;
  __chkstk_darwin(v8);
  uint64_t v41 = (uint64_t)v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v53 - 8);
  uint64_t v11 = __chkstk_darwin(v53);
  uint64_t v52 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v48 = (char *)v40 - v13;
  uint64_t v14 = sub_100004AEC(&qword_10099D440);
  uint64_t v46 = *(void *)(v14 - 8);
  uint64_t v47 = v14;
  __chkstk_darwin(v14);
  uint64_t v54 = (void *)((char *)v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  int64_t v16 = *(void *)(a1 + 16);
  uint64_t v17 = _swiftEmptyArrayStorage;
  if (!v16) {
    return (uint64_t)v17;
  }
  unsigned int v43 = v7;
  v40[1] = v2;
  uint64_t v55 = _swiftEmptyArrayStorage;
  sub_100032D64(0, v16, 0);
  uint64_t result = sub_1006F6728(a1);
  uint64_t v19 = result;
  uint64_t v21 = v20;
  int v23 = v22 & 1;
  uint64_t v44 = a2;
  uint64_t v45 = a1 + 56;
  uint64_t v42 = a1;
  while ((v19 & 0x8000000000000000LL) == 0 && v19 < 1LL << *(_BYTE *)(a1 + 32))
  {
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v21) {
      goto LABEL_19;
    }
    int v51 = v23;
    uint64_t v24 = v48;
    uint64_t v25 = v53;
    (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))( v48,  *(void *)(a1 + 48) + *(void *)(v10 + 72) * v19,  v53);
    uint64_t v26 = v10;
    unint64_t v27 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
    uint64_t v28 = (uint64_t)v52;
    v27(v52, v24, v25);
    uint64_t v29 = (uint64_t)v54 + *(int *)(v47 + 48);
    uint64_t v30 = (uint64_t)v43;
    sub_100504F30(v28, (uint64_t)v43);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v49 + 48))(v30, 1LL, v50) == 1)
    {
      uint64_t v31 = sub_100015794(v30, (uint64_t *)&unk_1009A9C30);
      static Date.distantPast.getter(v31);
      uint64_t v32 = 0LL;
    }

    else
    {
      uint64_t v33 = v30;
      uint64_t v34 = v41;
      sub_10002218C(v33, v41, type metadata accessor for OwnedBeaconRecord);
      uint64_t v32 = sub_10051A850(v29, v34);
      sub_100018C68(v34, type metadata accessor for OwnedBeaconRecord);
    }

    uint64_t v35 = v53;
    *uint64_t v54 = v32;
    uint64_t v10 = v26;
    (*(void (**)(char *, uint64_t))(v26 + 8))(v52, v35);
    uint64_t v17 = v55;
    if ((swift_isUniquelyReferenced_nonNull_native(v55) & 1) == 0)
    {
      sub_100032D64(0, v17[2] + 1LL, 1);
      uint64_t v17 = v55;
    }

    unint64_t v37 = v17[2];
    unint64_t v36 = v17[3];
    if (v37 >= v36 >> 1)
    {
      sub_100032D64(v36 > 1, v37 + 1, 1);
      uint64_t v17 = v55;
    }

    v17[2] = v37 + 1;
    sub_100015750( (uint64_t)v54,  (uint64_t)v17 + ((*(unsigned __int8 *)(v46 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))
    + *(void *)(v46 + 72) * v37,
      &qword_10099D440);
    a1 = v42;
    uint64_t result = sub_1001FE5FC(v19, v21, v51 & 1, v42);
    uint64_t v19 = result;
    uint64_t v21 = v38;
    int v23 = v39 & 1;
    if (!--v16)
    {
      sub_100086B14(result, v38, v23);
      return (uint64_t)v17;
    }
  }

  __break(1u);
LABEL_18:
  __break(1u);
LABEL_19:
  __break(1u);
  return result;
}

void *sub_1005508C8(uint64_t a1, int a2, int a3, int a4, uint64_t a5)
{
  uint64_t v55 = a5;
  int v52 = a3;
  int v53 = a4;
  int v51 = a2;
  uint64_t v58 = (_BYTE *)a1;
  uint64_t v5 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v5);
  uint64_t v54 = &v50[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = &v50[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v11);
  uint64_t v13 = &v50[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v56 = *(void *)(v14 - 8);
  uint64_t v57 = v14;
  __chkstk_darwin(v14);
  int64_t v16 = &v50[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v17);
  uint64_t v19 = &v50[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v20 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = &v50[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  v60[3] = v22;
  v60[4] = sub_100007864( (unint64_t *)&qword_10099D000,  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_10080B120);
  uint64_t v25 = sub_10000A7C8(v60);
  sub_10001DC4C((uint64_t)v58, (uint64_t)v25, type metadata accessor for OwnedBeaconRecord);
  sub_100013044((uint64_t)v60, (uint64_t)v59);
  uint64_t v26 = sub_100004AEC(&qword_1009B0530);
  int v27 = swift_dynamicCast(v19, v59, v26, v20, 6LL);
  uint64_t v28 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v21 + 56);
  if (v27)
  {
    uint64_t v58 = v10;
    uint64_t v29 = v54;
    uint64_t v30 = v55;
    v28(v19, 0LL, 1LL, v20);
    sub_10002218C((uint64_t)v19, (uint64_t)v24, type metadata accessor for OwnedBeaconRecord);
    sub_10001581C((uint64_t)&v24[*(int *)(v20 + 28)], (uint64_t)v13, &qword_10099D8A0);
    uint64_t v32 = v56;
    uint64_t v31 = v57;
    uint64_t v33 = (uint64_t)v24;
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v56 + 48))(v13, 1LL, v57) == 1)
    {
      sub_100015794((uint64_t)v13, &qword_10099D8A0);
    }

    else
    {
      uint64_t v34 = (uint64_t)v16;
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v32 + 32))(v16, v13, v31);
      uint64_t v35 = (uint64_t)v29;
      uint64_t v36 = (uint64_t)v29;
      uint64_t v37 = v30;
      sub_10050F124(v34, v36);
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v35, 1LL, v7) != 1)
      {
        uint64_t v40 = (uint64_t)v58;
        sub_10002218C(v35, (uint64_t)v58, type metadata accessor for OwnedBeaconGroup);
        uint64_t v41 = v32;
        uint64_t v42 = sub_10054E150(v33, v51 & 1, v52 & 1, v53 & 1);
        sub_1001CC778();
        uint64_t v43 = v34;
        uint64_t v45 = v44;
        swift_retain();
        sub_10054F3A0( v45,  v37,  (uint64_t *)&unk_1009A9C30,  type metadata accessor for OwnedBeaconRecord,  (void (*)(char *))sub_100504F30,  (uint64_t (*)(void, uint64_t, uint64_t))sub_1004C46DC);
        uint64_t v46 = v33;
        uint64_t v48 = v47;
        swift_bridgeObjectRelease();
        swift_release();
        uint64_t v49 = sub_10054E668(v48, (uint64_t)v42);
        swift_bridgeObjectRelease();
        uint64_t v38 = sub_1004E75B0( v49,  type metadata accessor for OwnedBeaconRecord,  (unint64_t *)&qword_10099D000,  (uint64_t)&unk_10080B120);
        swift_bridgeObjectRelease();
        sub_100018C68(v40, type metadata accessor for OwnedBeaconGroup);
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v43, v57);
        sub_100018C68(v46, type metadata accessor for OwnedBeaconRecord);
        goto LABEL_9;
      }

      sub_100015794(v35, &qword_1009AA830);
      (*(void (**)(uint64_t, uint64_t))(v32 + 8))(v34, v31);
    }

    sub_100018C68(v33, type metadata accessor for OwnedBeaconRecord);
  }

  else
  {
    v28(v19, 1LL, 1LL, v20);
    sub_100015794((uint64_t)v19, (uint64_t *)&unk_1009A9C30);
  }

  uint64_t v38 = _swiftEmptyArrayStorage;
LABEL_9:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v60);
  return v38;
}

uint64_t sub_100550D34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v52 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v60 = (char *)&v52 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v52 - v11;
  v67[0] = &_swiftEmptySetSingleton;
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v55 = a1 + 56;
  uint64_t v14 = 1LL << *(_BYTE *)(a1 + 32);
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  else {
    uint64_t v15 = -1LL;
  }
  unint64_t v16 = v15 & v13;
  int64_t v56 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v17 = 0LL;
  uint64_t v18 = 0LL;
  int v53 = v6;
  uint64_t v54 = a2;
  uint64_t v62 = v12;
  uint64_t v63 = v7;
  uint64_t v52 = a1;
  if (v16) {
    goto LABEL_7;
  }
LABEL_8:
  if (!__OFADD__(v17++, 1LL))
  {
    if (v17 < v56)
    {
      unint64_t v21 = *(void *)(v55 + 8 * v17);
      if (v21)
      {
LABEL_18:
        uint64_t v59 = (v21 - 1) & v21;
        for (unint64_t i = __clz(__rbit64(v21)) + (v17 << 6); ; unint64_t i = __clz(__rbit64(v16)) | (v17 << 6))
        {
          uint64_t v23 = *(void *)(*(void *)(a1 + 48) + 8 * i);
          sub_10001581C(a2, (uint64_t)v6, &qword_10099D8A0);
          (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v12, v6, v7);
          uint64_t v24 = *(void *)(v23 + 16);
          int64_t v57 = v17;
          uint64_t v58 = v18;
          if (!v24)
          {
            __n128 v28 = swift_bridgeObjectRetain(v23);
LABEL_28:
            uint64_t v12 = v62;
            uint64_t v7 = v63;
            (*(void (**)(char *, uint64_t, __n128))(v8 + 8))(v62, v63, v28);
            a1 = v52;
            uint64_t v6 = v53;
            a2 = v54;
            int64_t v17 = v57;
            uint64_t v18 = v58;
LABEL_29:
            sub_1004E5C2C(v23, (uint64_t)v67);
            swift_bridgeObjectRelease();
            unint64_t v16 = v59;
            if (!v59) {
              goto LABEL_8;
            }
            goto LABEL_7;
          }

          uint64_t v25 = *(void *)(v23 + 40);
          uint64_t v26 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          swift_bridgeObjectRetain(v23);
          uint64_t v27 = dispatch thunk of Hashable._rawHashValue(seed:)(v25, v7, v26);
          uint64_t v29 = -1LL << *(_BYTE *)(v23 + 32);
          unint64_t v30 = v27 & ~v29;
          if (((*(void *)(v23 + 56 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v30) & 1) == 0) {
            goto LABEL_28;
          }
          uint64_t v61 = ~v29;
          uint64_t v31 = *(void *)(v8 + 72);
          uint64_t v32 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
          while (1)
          {
            uint64_t v33 = v60;
            uint64_t v34 = v63;
            v32(v60, *(void *)(v23 + 48) + v31 * v30, v63);
            uint64_t v35 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            char v36 = dispatch thunk of static Equatable.== infix(_:_:)(v33, v62, v34, v35);
            uint64_t v37 = v8;
            uint64_t v38 = *(void (**)(char *, uint64_t))(v8 + 8);
            v38(v33, v34);
            if ((v36 & 1) != 0) {
              break;
            }
            unint64_t v30 = (v30 + 1) & v61;
            uint64_t v8 = v37;
            if (((*(void *)(v23 + 56 + ((v30 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v30) & 1) == 0) {
              goto LABEL_28;
            }
          }

          sub_1000BF79C(v66, v23);
          swift_bridgeObjectRelease();
          uint64_t v12 = v62;
          uint64_t v7 = v63;
          v38(v62, v63);
          a1 = v52;
          uint64_t v6 = v53;
          a2 = v54;
          uint64_t v8 = v37;
          int64_t v17 = v57;
          uint64_t v18 = v58;
          unint64_t v16 = v59;
          if (!v59) {
            goto LABEL_8;
          }
LABEL_7:
          uint64_t v59 = (v16 - 1) & v16;
        }

        swift_bridgeObjectRetain(v23);
        sub_100015794((uint64_t)v6, &qword_10099D8A0);
        goto LABEL_29;
      }

      int64_t v22 = v17 + 1;
      if (v17 + 1 < v56)
      {
        unint64_t v21 = *(void *)(v55 + 8 * v22);
        if (v21) {
          goto LABEL_17;
        }
        int64_t v22 = v17 + 2;
        if (v17 + 2 >= v56) {
          goto LABEL_35;
        }
        unint64_t v21 = *(void *)(v55 + 8 * v22);
        if (v21)
        {
LABEL_17:
          int64_t v17 = v22;
          goto LABEL_18;
        }

        int64_t v22 = v17 + 3;
        if (v17 + 3 < v56)
        {
          unint64_t v21 = *(void *)(v55 + 8 * v22);
          if (v21) {
            goto LABEL_17;
          }
          while (1)
          {
            int64_t v17 = v22 + 1;
            if (__OFADD__(v22, 1LL)) {
              goto LABEL_40;
            }
            if (v17 >= v56) {
              break;
            }
            unint64_t v21 = *(void *)(v55 + 8 * v17);
            ++v22;
            if (v21) {
              goto LABEL_18;
            }
          }
        }
      }
    }

id sub_10055131C()
{
  id v0 = [objc_allocWithZone(SPBeaconGroup) init];
  [v0 setVersion:-1];
  Class isa = UUID._bridgeToObjectiveC()().super.isa;
  [v0 setIdentifier:isa];

  NSString v2 = String._bridgeToObjectiveC()();
  [v0 setName:v2];

  [v0 setClassification:0];
  [v0 setIsPairingComplete:1];
  [v0 setIsFindMyNetworkEnabled:0];
  [v0 setStatus:0];
  type metadata accessor for SharedBeaconGroup(0LL);
  type metadata accessor for UUID(0LL);
  sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  Class v3 = Set._bridgeToObjectiveC()().super.isa;
  [v0 setBeaconIdentifiers:v3];

  [v0 setIsConnected:0];
  return v0;
}

uint64_t sub_100551480(uint64_t a1, void *a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v42 = *(void *)(v6 - 8);
  uint64_t v43 = v6;
  __chkstk_darwin(v6);
  uint64_t v41 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v39 = *(void *)(v8 - 8);
  uint64_t v40 = v8;
  __chkstk_darwin(v8);
  uint64_t v38 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = swift_allocObject(&unk_1009613E0, 32LL, 7LL);
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  swift_retain();
  uint64_t v37 = a3;
  uint64_t v11 = swift_retain();
  uint64_t v12 = sub_1004F730C(v11);
  uint64_t v13 = (void *)swift_allocObject(&unk_100961408, 40LL, 7LL);
  v13[2] = sub_100566B64;
  v13[3] = v10;
  v13[4] = a1;
  swift_retain_n(v10, 2LL);
  uint64_t v44 = a1;
  swift_retain_n(a1, 2LL);
  uint64_t v14 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100153864);
  int v15 = LOBYTE(aBlock[0]);
  uint64_t v16 = static os_log_type_t.default.getter(v14);
  if (qword_10099B718 != -1) {
    swift_once(&qword_10099B718, sub_100651228);
  }
  uint64_t v17 = qword_100A2B028;
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v19 = swift_allocObject(v18, 72LL, 7LL);
  *(_OWORD *)(v19 + 16) = xmmword_1007E67D0;
  *(void *)(v19 + 56) = &type metadata for Bool;
  *(void *)(v19 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v19 + 32) = v15;
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "localAvailable: %d", v37);
  uint64_t v20 = swift_bridgeObjectRelease();
  uint64_t v21 = static os_log_type_t.default.getter(v20);
  uint64_t v22 = qword_100A2B028;
  if (v15)
  {
    os_log(_:dso:log:_:_:)( v21,  &_mh_execute_header,  qword_100A2B028,  "Container is already available -- calling completion immediately",  64LL,  2LL,  _swiftEmptyArrayStorage);
    sub_100021678(a2, v37);
    swift_release(v12);
    swift_release(v44);
    swift_release_n(v10, 2LL);
    uint64_t v23 = v13;
  }

  else
  {
    uint64_t v24 = os_log(_:dso:log:_:_:)( v21,  &_mh_execute_header,  qword_100A2B028,  "Container is not yet available",  30LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v25 = static os_log_type_t.default.getter(v24);
    os_log(_:dso:log:_:_:)( v25,  &_mh_execute_header,  v22,  "Waiting for availableWaitQueue",  30LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v37 = *(void *)(v12 + 64);
    uint64_t v26 = (void *)swift_allocObject(&unk_100961430, 40LL, 7LL);
    v26[2] = v12;
    v26[3] = sub_1001FA824;
    v26[4] = v13;
    aBlock[4] = sub_100571BA4;
    uint64_t v47 = v26;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    aBlock[3] = &unk_100961448;
    uint64_t v27 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v28 = swift_retain();
    uint64_t v29 = v38;
    static DispatchQoS.unspecified.getter(v28);
    uint64_t v45 = _swiftEmptyArrayStorage;
    uint64_t v30 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v31 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v32 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v33 = v41;
    uint64_t v34 = v43;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v31, v32, v43, v30);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v29, v33, v27);
    _Block_release(v27);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v33, v34);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v29, v40);
    uint64_t v35 = v47;
    swift_release(v12);
    swift_release(v44);
    swift_release_n(v10, 2LL);
    swift_release(v13);
    uint64_t v23 = v35;
  }

  return swift_release(v23);
}

uint64_t sub_1005518C0(uint64_t a1, int a2, void *a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v53 = a1;
  uint64_t v49 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  __chkstk_darwin(v49);
  uint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v13);
  uint64_t v54 = (void **)((char *)&v48 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  int v15 = (void *)swift_allocObject(&unk_100962EC0, 40LL, 7LL);
  v15[2] = a4;
  v15[3] = a5;
  uint64_t v50 = a5;
  v15[4] = a6;
  uint64_t v16 = qword_10099B528;
  swift_retain();
  swift_retain();
  if (v16 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v17 = type metadata accessor for Logger(0LL);
  uint64_t v18 = sub_10000A720(v17, (uint64_t)qword_100A2AC98);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = static os_log_type_t.default.getter(v19);
  BOOL v21 = os_log_type_enabled(v19, v20);
  uint64_t v51 = a4;
  uint64_t v52 = a6;
  if (v21)
  {
    uint64_t v22 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v22 = 67109120;
    int v55 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v22 + 4, v22 + 8);
    _os_log_impl((void *)&_mh_execute_header, v19, v20, "Saving record. Disk First? %{BOOL}d", v22, 8u);
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  uint64_t v23 = (void *)qword_100A2AF38;
  id v24 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v25 = [v24 isInternalBuild];

  if (v25)
  {
    NSString v26 = String._bridgeToObjectiveC()();
    unsigned int v27 = [v23 BOOLForKey:v26];
  }

  else
  {
    unsigned int v27 = 0;
  }

  id v28 = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (v28)
  {
    uint64_t v29 = v28;
    id v30 = objc_msgSend(v28, "aa_primaryAppleAccount");

    if (v30 && (v30, ((a2 | v27) & 1) == 0))
    {
      sub_100500D64(v53, (uint64_t)sub_10056D4F0, (uint64_t)v15);
    }

    else
    {
      uint64_t v48 = v15;
      uint64_t v31 = (uint64_t)v54;
      sub_10001DC4C(v53, (uint64_t)v54, type metadata accessor for OwnedBeaconRecord);
      uint64_t v32 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
      __chkstk_darwin(v32);
      *(&v48 - 2) = v33;
      *(&v48 - 1) = (void *)v31;
      uint64_t v34 = OS_dispatch_queue.sync<A>(execute:)(sub_100571B54, &v48 - 4, (char *)&type metadata for () + 8);
      uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
      os_log_type_t v36 = static os_log_type_t.default.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        uint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v37 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "Saved LocalStorageBacked record. Calling completion.",  v37,  2u);
        swift_slowDealloc(v37, -1LL, -1LL);
      }

      uint64_t v38 = v53;
      sub_10001DC4C(v53, (uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
      swift_storeEnumTagMultiPayload(v12, v49, 0LL);
      sub_10051DCEC((uint64_t)v12, v51, v50, v52);
      uint64_t v39 = sub_100015794((uint64_t)v12, (uint64_t *)&unk_1009B0830);
      if (((v30 != 0LL) & ~v27) != 0)
      {
        uint64_t v45 = type metadata accessor for Transaction(0LL);
        __chkstk_darwin(v45);
        *(&v48 - 4) = a3;
        *(&v48 - 3) = (void *)v38;
        uint64_t v46 = (uint64_t)v54;
        *(&v48 - 2) = v54;
        static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-saveToCloud",  40LL,  2LL,  sub_100571BFC,  &v48 - 6);
        uint64_t v44 = v46;
      }

      else
      {
        uint64_t v40 = (os_log_s *)Logger.logObject.getter(v39);
        os_log_type_t v41 = static os_log_type_t.info.getter(v40);
        if (os_log_type_enabled(v40, v41))
        {
          BOOL v42 = v30 != 0LL;
          uint64_t v43 = swift_slowAlloc(14LL, -1LL);
          *(_DWORD *)uint64_t v43 = 67109376;
          int v55 = v27;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v43 + 4, v43 + 8);
          *(_WORD *)(v43 + 8) = 1024;
          int v55 = v42;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v43 + 10, v43 + 14);
          _os_log_impl( (void *)&_mh_execute_header,  v40,  v41,  "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d",  (uint8_t *)v43,  0xEu);
          swift_slowDealloc(v43, -1LL, -1LL);
        }

        uint64_t v44 = (uint64_t)v54;
      }

      sub_100018C68(v44, type metadata accessor for OwnedBeaconRecord);
    }

    return swift_release();
  }

  else
  {
    swift_release();
    uint64_t result = swift_release();
    __break(1u);
  }

  return result;
}

uint64_t sub_100552024(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v44 = *(void *)(v8 - 8);
  uint64_t v45 = v8;
  __chkstk_darwin(v8);
  uint64_t v43 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v41 = *(void *)(v10 - 8);
  uint64_t v42 = v10;
  __chkstk_darwin(v10);
  uint64_t v40 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (void *)swift_allocObject(&unk_100962E20, 40LL, 7LL);
  v12[2] = a2;
  v12[3] = a3;
  v12[4] = a4;
  swift_retain();
  uint64_t v38 = a3;
  swift_retain();
  uint64_t v39 = a4;
  swift_retain();
  uint64_t v13 = sub_1004F730C();
  uint64_t v14 = (void *)swift_allocObject(&unk_100962E48, 40LL, 7LL);
  v14[2] = sub_10056D4B8;
  v14[3] = v12;
  v14[4] = a1;
  swift_retain_n(v12, 2LL);
  uint64_t v46 = a1;
  swift_retain_n(a1, 2LL);
  uint64_t v15 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100153864);
  int v16 = LOBYTE(aBlock[0]);
  uint64_t v17 = static os_log_type_t.default.getter(v15);
  if (qword_10099B718 != -1) {
    swift_once(&qword_10099B718, sub_100651228);
  }
  uint64_t v18 = qword_100A2B028;
  uint64_t v19 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v20 = swift_allocObject(v19, 72LL, 7LL);
  *(_OWORD *)(v20 + 16) = xmmword_1007E67D0;
  *(void *)(v20 + 56) = &type metadata for Bool;
  *(void *)(v20 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v20 + 32) = v16;
  os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "localAvailable: %d", v37);
  uint64_t v21 = swift_bridgeObjectRelease();
  uint64_t v22 = static os_log_type_t.default.getter(v21);
  uint64_t v23 = qword_100A2B028;
  if (v16)
  {
    os_log(_:dso:log:_:_:)( v22,  &_mh_execute_header,  qword_100A2B028,  "Container is already available -- calling completion immediately",  64LL,  2LL,  _swiftEmptyArrayStorage);
    sub_10014B7A4(a2, v38, v39);
    swift_release();
    swift_release();
    swift_release_n(v12, 2LL);
  }

  else
  {
    uint64_t v24 = os_log(_:dso:log:_:_:)( v22,  &_mh_execute_header,  qword_100A2B028,  "Container is not yet available",  30LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v25 = static os_log_type_t.default.getter(v24);
    os_log(_:dso:log:_:_:)( v25,  &_mh_execute_header,  v23,  "Waiting for availableWaitQueue",  30LL,  2LL,  _swiftEmptyArrayStorage);
    NSString v26 = (void *)swift_allocObject(&unk_100962E70, 40LL, 7LL);
    v26[2] = v13;
    v26[3] = sub_1001FA824;
    v26[4] = v14;
    aBlock[4] = sub_100571BA4;
    void aBlock[5] = v26;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    aBlock[3] = &unk_100962E88;
    unsigned int v27 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v28 = swift_retain();
    uint64_t v29 = v40;
    static DispatchQoS.unspecified.getter(v28);
    uint64_t v47 = _swiftEmptyArrayStorage;
    uint64_t v30 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v31 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v32 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v33 = v43;
    uint64_t v34 = v31;
    uint64_t v35 = v45;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v47, v34, v32, v45, v30);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v29, v33, v27);
    _Block_release(v27);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v33, v35);
    (*(void (**)(char *, uint64_t))(v41 + 8))(v29, v42);
    swift_release();
    swift_release();
    swift_release_n(v12, 2LL);
    swift_release();
  }

  return swift_release();
}

uint64_t sub_100552474()
{
  return 1LL;
}

void sub_1005526F8( uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, void (*a6)(uint64_t), uint64_t a7)
{
  uint64_t v62 = a1;
  uint64_t v63 = a5;
  unint64_t v60 = a3;
  uint64_t v61 = a4;
  uint64_t v55 = sub_100004AEC(&qword_1009A49F0);
  __chkstk_darwin(v55);
  uint64_t v56 = (uint64_t)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v58 = (char *)&v53 - v16;
  uint64_t v17 = swift_allocObject(&unk_100963668, 32LL, 7LL);
  int64_t v57 = a6;
  *(void *)(v17 + 16) = a6;
  *(void *)(v17 + 24) = a7;
  uint64_t v64 = v17;
  uint64_t v59 = a7;
  uint64_t v18 = swift_retain();
  uint64_t v19 = static os_log_type_t.default.getter(v18);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v20 = qword_100A2B018;
  uint64_t v54 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v21 = swift_allocObject(v54, 72LL, 7LL);
  uint64_t v22 = v21;
  __int128 v53 = xmmword_1007E67D0;
  *(_OWORD *)(v21 + 16) = xmmword_1007E67D0;
  if ((a2 & 1) != 0) {
    uint64_t v23 = 1702195828LL;
  }
  else {
    uint64_t v23 = 0x65736C6166LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v24 = 0xE400000000000000LL;
  }
  else {
    unint64_t v24 = 0xE500000000000000LL;
  }
  *(void *)(v21 + 56) = &type metadata for String;
  *(void *)(v21 + 64) = sub_1000226F4();
  *(void *)(v22 + 32) = v23;
  *(void *)(v22 + 40) = v24;
  os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Modify record. Disk First? (%@)", 31LL, 2LL, v22, v53);
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    uint64_t v25 = objc_autoreleasePoolPush();
    uint64_t v26 = v62;
    sub_100544E34(v62);
    uint64_t v28 = v27;
    objc_autoreleasePoolPop(v25);
    v65[0] = v28;
    uint64_t v29 = (uint64_t)v58;
    sub_10001DC4C(v26, (uint64_t)v58, type metadata accessor for OwnedBeaconGroup);
    v60(v29);
    uint64_t v30 = sub_1004E9B0C(v65, v29);
    uint64_t v31 = v63;
    __chkstk_darwin(v30);
    *((void *)&v53 - 2) = v32;
    *((void *)&v53 - 1) = v29;
    OS_dispatch_queue.sync<A>(execute:)(sub_100571B2C, &v53 - 2, (char *)&type metadata for () + 8);
    sub_1004E696C(8u);
    uint64_t v49 = v56;
    sub_10001DC4C(v29, v56, type metadata accessor for OwnedBeaconGroup);
    swift_storeEnumTagMultiPayload(v49, v55, 0LL);
    sub_10019AA08(v49, v57);
    sub_100015794(v49, &qword_1009A49F0);
    uint64_t v50 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v50);
    *((void *)&v53 - 4) = v31;
    *((void *)&v53 - 3) = v65;
    *((void *)&v53 - 2) = v51;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-updateToCloud",  42LL,  2LL,  sub_10056FFB0,  &v53 - 3);
    sub_100018C68(v29, type metadata accessor for OwnedBeaconGroup);
    id v52 = v65[0];
    swift_release();
  }

  else
  {
    uint64_t v33 = objc_autoreleasePoolPush();
    uint64_t v34 = v62;
    sub_100544E34(v62);
    uint64_t v58 = v35;
    objc_autoreleasePoolPop(v33);
    uint64_t v36 = v63;
    sub_1004F730C();
    sub_10001DC4C(v34, (uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
    uint64_t v37 = *(unsigned __int8 *)(v12 + 80);
    uint64_t v38 = (v37 + 32) & ~v37;
    uint64_t v59 = v37 | 7;
    uint64_t v39 = v34;
    uint64_t v40 = swift_allocObject(&unk_100963690, v38 + v13, v37 | 7);
    uint64_t v41 = v61;
    *(void *)(v40 + 16) = v60;
    *(void *)(v40 + 24) = v41;
    sub_10002218C((uint64_t)v15, v40 + v38, type metadata accessor for OwnedBeaconGroup);
    swift_retain();
    sub_10067F4C4(v58, (void (*)(id *))sub_10056FE48, v40);
    swift_release();
    swift_release();
    uint64_t v42 = swift_allocObject(&unk_1009636B8, 32LL, 7LL);
    uint64_t v43 = (uint64_t (*)(uint64_t))v64;
    *(void *)(v42 + 16) = sub_10056FD6C;
    *(void *)(v42 + 24) = v43;
    swift_retain();
    Future.addFailure(block:)(sub_10056FE64, v42);
    swift_release();
    swift_release();
    sub_10001DC4C(v39, (uint64_t)v15, type metadata accessor for OwnedBeaconGroup);
    uint64_t v44 = (v37 + 16) & ~v37;
    unint64_t v45 = (v13 + v44 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v46 = (v45 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v47 = swift_allocObject(&unk_1009636E0, v46 + 16, v59);
    sub_10002218C((uint64_t)v15, v47 + v44, type metadata accessor for OwnedBeaconGroup);
    *(void *)(v47 + v45) = v36;
    uint64_t v48 = (uint64_t (**)(uint64_t))(v47 + v46);
    *uint64_t v48 = sub_10056FD6C;
    v48[1] = v43;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_10056FF8C, v47);
    swift_release();

    swift_release();
    swift_release();
    swift_release();
  }

void sub_100552D38(uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, void *a6)
{
  uint64_t v55 = a1;
  uint64_t v56 = a5;
  __int128 v53 = a3;
  uint64_t v54 = a4;
  uint64_t v50 = sub_100004AEC(&qword_1009A7F18);
  __chkstk_darwin(v50);
  uint64_t v51 = (uint64_t)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for LostModeRecord(0LL);
  uint64_t v48 = *(void *)(v9 - 8);
  uint64_t v10 = *(void *)(v48 + 64);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v47 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  id v52 = (char *)&v47 - v13;
  uint64_t v57 = swift_allocObject(&unk_1009633E8, 24LL, 7LL);
  *(void *)(v57 + 16) = a6;
  uint64_t v49 = a6;
  uint64_t v14 = static os_log_type_t.default.getter(v49);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v15 = qword_100A2B018;
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
  uint64_t v18 = v17;
  __int128 v47 = xmmword_1007E67D0;
  *(_OWORD *)(v17 + 16) = xmmword_1007E67D0;
  if ((a2 & 1) != 0) {
    uint64_t v19 = 1702195828LL;
  }
  else {
    uint64_t v19 = 0x65736C6166LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v20 = 0xE400000000000000LL;
  }
  else {
    unint64_t v20 = 0xE500000000000000LL;
  }
  *(void *)(v17 + 56) = &type metadata for String;
  *(void *)(v17 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v19;
  *(void *)(v18 + 40) = v20;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "Modify record. Disk First? (%@)", 31LL, 2LL, v18, v47);
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    uint64_t v21 = objc_autoreleasePoolPush();
    uint64_t v22 = v55;
    sub_100545548(v55, type metadata accessor for LostModeRecord);
    unint64_t v24 = v23;
    objc_autoreleasePoolPop(v21);
    v58[0] = v24;
    uint64_t v25 = (uint64_t)v52;
    sub_10001DC4C(v22, (uint64_t)v52, type metadata accessor for LostModeRecord);
    v53(v25);
    uint64_t v26 = sub_100543938(v58, v25);
    uint64_t v27 = v56;
    __chkstk_darwin(v26);
    *((void *)&v47 - 2) = v28;
    *((void *)&v47 - 1) = v25;
    OS_dispatch_queue.sync<A>(execute:)(sub_100022850, &v47 - 2, (char *)&type metadata for () + 8);
    sub_1004E696C(8u);
    uint64_t v44 = v51;
    sub_10001DC4C(v25, v51, type metadata accessor for LostModeRecord);
    swift_storeEnumTagMultiPayload(v44, v50, 0LL);
    sub_1003E6264(v44, v49);
    sub_100015794(v44, &qword_1009A7F18);
    uint64_t v45 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v45);
    *((void *)&v47 - 4) = v27;
    *((void *)&v47 - 3) = v58;
    *((void *)&v47 - 2) = v22;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-updateToCloud",  42LL,  2LL,  sub_10056F644,  &v47 - 3);
    sub_100018C68(v25, type metadata accessor for LostModeRecord);
    id v46 = v58[0];
    swift_release();
  }

  else
  {
    uint64_t v29 = objc_autoreleasePoolPush();
    uint64_t v30 = v55;
    sub_100545548(v55, type metadata accessor for LostModeRecord);
    id v52 = v31;
    objc_autoreleasePoolPop(v29);
    uint64_t v32 = v56;
    sub_1004F730C();
    sub_10001DC4C(v30, (uint64_t)v12, type metadata accessor for LostModeRecord);
    uint64_t v33 = *(unsigned __int8 *)(v48 + 80);
    uint64_t v34 = (v33 + 32) & ~v33;
    uint64_t v51 = v33 | 7;
    uint64_t v35 = swift_allocObject(&unk_100963410, v34 + v10, v33 | 7);
    uint64_t v36 = v54;
    *(void *)(v35 + 16) = v53;
    *(void *)(v35 + 24) = v36;
    sub_10002218C((uint64_t)v12, v35 + v34, type metadata accessor for LostModeRecord);
    swift_retain();
    sub_10067F4C4(v52, (void (*)(id *))sub_10056F4D0, v35);
    swift_release();
    swift_release();
    uint64_t v37 = swift_allocObject(&unk_100963438, 32LL, 7LL);
    uint64_t v38 = v57;
    *(void *)(v37 + 16) = sub_10056F3E8;
    *(void *)(v37 + 24) = v38;
    swift_retain();
    Future.addFailure(block:)(sub_10056F4EC, v37);
    swift_release();
    swift_release();
    sub_10001DC4C(v30, (uint64_t)v12, type metadata accessor for LostModeRecord);
    uint64_t v39 = (v33 + 16) & ~v33;
    unint64_t v40 = (v10 + v39 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v41 = (v40 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v42 = swift_allocObject(&unk_100963460, v41 + 16, v51);
    sub_10002218C((uint64_t)v12, v42 + v39, type metadata accessor for LostModeRecord);
    *(void *)(v42 + v40) = v32;
    uint64_t v43 = (void (**)(uint64_t))(v42 + v41);
    *uint64_t v43 = sub_10056F3E8;
    v43[1] = (void (*)(uint64_t))v38;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_10056F620, v42);
    swift_release();

    swift_release();
    swift_release();
    swift_release();
  }

uint64_t sub_1005533C4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v47 = a3;
  uint64_t v48 = a1;
  uint64_t v45 = sub_100004AEC(&qword_1009A7F18);
  __chkstk_darwin(v45);
  uint64_t v9 = (char *)v43 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for LostModeRecord(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v43 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = swift_allocObject(&unk_100963550, 32LL, 7LL);
  *(void *)(v13 + 16) = a4;
  *(void *)(v13 + 24) = a5;
  uint64_t v14 = qword_10099B528;
  swift_retain();
  uint64_t v15 = a5;
  if (v14 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = sub_10000A720(v16, (uint64_t)qword_100A2AC98);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter(v18);
  BOOL v20 = os_log_type_enabled(v18, v19);
  id v46 = v15;
  if (v20)
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v21 = 67109120;
    int v51 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v21 + 4, v21 + 8);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Saving record. Disk First? %{BOOL}d", v21, 8u);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  uint64_t v22 = (void *)qword_100A2AF38;
  id v23 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v24 = [v23 isInternalBuild];

  if (v24)
  {
    NSString v25 = String._bridgeToObjectiveC()();
    unsigned int v24 = [v22 BOOLForKey:v25];
  }

  id v26 = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (v26)
  {
    uint64_t v27 = v26;
    id v28 = objc_msgSend(v26, "aa_primaryAppleAccount");

    if (v28 && (v28, ((a2 | v24) & 1) == 0))
    {
      sub_100500F10(v48, (uint64_t)sub_10056F7CC, v13);
    }

    else
    {
      uint64_t v44 = a4;
      uint64_t v29 = sub_10001DC4C(v48, (uint64_t)v12, type metadata accessor for LostModeRecord);
      __chkstk_darwin(v29);
      v43[-2] = v30;
      v43[-1] = v12;
      uint64_t v31 = OS_dispatch_queue.sync<A>(execute:)(sub_100571B90, &v43[-4], (char *)&type metadata for () + 8);
      v43[1] = v13;
      uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
      os_log_type_t v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "Saved LocalStorageBacked record. Calling completion.",  v34,  2u);
        swift_slowDealloc(v34, -1LL, -1LL);
      }

      uint64_t v35 = v48;
      sub_10001DC4C(v48, (uint64_t)v9, type metadata accessor for LostModeRecord);
      swift_storeEnumTagMultiPayload(v9, v45, 0LL);
      uint64_t v36 = swift_projectBox(v44);
      swift_beginAccess(v36, &v51, 1LL, 0LL);
      sub_1003ECB00((uint64_t)v9, v36);
      dispatch_group_leave(v46);
      uint64_t v37 = sub_100015794((uint64_t)v9, &qword_1009A7F18);
      if (((v28 != 0LL) & ~v24) != 0)
      {
        uint64_t v41 = type metadata accessor for Transaction(0LL);
        __chkstk_darwin(v41);
        v43[-4] = v47;
        v43[-3] = v35;
        v43[-2] = v12;
        static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-saveToCloud",  40LL,  2LL,  sub_10056F7D4,  &v43[-6]);
      }

      else
      {
        uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
        os_log_type_t v39 = static os_log_type_t.info.getter(v38);
        if (os_log_type_enabled(v38, v39))
        {
          uint64_t v40 = swift_slowAlloc(14LL, -1LL);
          *(_DWORD *)uint64_t v40 = 67109376;
          BOOL v49 = v24;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v40 + 4, v40 + 8);
          *(_WORD *)(v40 + 8) = 1024;
          BOOL v49 = v28 != 0LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, v50, v40 + 10, v40 + 14);
          _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d",  (uint8_t *)v40,  0xEu);
          swift_slowDealloc(v40, -1LL, -1LL);
        }
      }

      sub_100018C68((uint64_t)v12, type metadata accessor for LostModeRecord);
    }

    return swift_release();
  }

  else
  {

    uint64_t result = swift_release();
    __break(1u);
  }

  return result;
}

uint64_t sub_100553B20(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v128 = a2;
  uint64_t v124 = type metadata accessor for BeaconStoreFileRecord(0LL);
  uint64_t v110 = *(void *)(v124 - 8);
  __chkstk_darwin(v124);
  uint64_t v121 = (char *)&v107 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v122 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v120 = (char *)&v107 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v114 = (char *)&v107 - v9;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  v130 = *(void (***)(void, void, void))(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  id v108 = (char *)&v107 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v107 - v14;
  __chkstk_darwin(v13);
  v112 = (char *)&v107 - v16;
  uint64_t v109 = sub_100004AEC(&qword_1009A2460);
  __chkstk_darwin(v109);
  uint64_t v111 = (char *)&v107 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for LostModeRecord(0LL);
  uint64_t v118 = *(void *)(v18 - 8);
  uint64_t v19 = __chkstk_darwin(v18);
  id v119 = (char *)&v107 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v117 = v20;
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v107 - v21;
  uint64_t v23 = swift_allocObject(&unk_1009634B0, 24LL, 7LL);
  *(void *)(v23 + 16) = a3;
  uint64_t v24 = swift_allocObject(&unk_1009634D8, 32LL, 7LL);
  *(void *)(v24 + 16) = sub_10056F790;
  *(void *)(v24 + 24) = v23;
  uint64_t v123 = v24;
  id v125 = a3;
  uint64_t v126 = v23;
  uint64_t v25 = swift_retain();
  uint64_t v26 = static os_log_type_t.default.getter(v25);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v27 = qword_100A2B018;
  uint64_t v115 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v28 = swift_allocObject(v115, 72LL, 7LL);
  __int128 v113 = xmmword_1007E67D0;
  *(_OWORD *)(v28 + 16) = xmmword_1007E67D0;
  uint64_t v129 = a1;
  sub_10001DC4C(a1, (uint64_t)v22, type metadata accessor for LostModeRecord);
  uint64_t v127 = v18;
  uint64_t v29 = String.init<A>(describing:)(v22, v18);
  uint64_t v31 = v30;
  *(void *)(v28 + 56) = &type metadata for String;
  unint64_t v116 = sub_1000226F4();
  *(void *)(v28 + 64) = v116;
  *(void *)(v28 + 32) = v29;
  *(void *)(v28 + 40) = v31;
  os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "Attempting to remove: %@", 24LL, 2LL, v28);
  swift_bridgeObjectRelease();
  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  uint64_t v32 = (void *)qword_100A2AF38;
  id v33 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v34 = [v33 isInternalBuild];

  if (v34)
  {
    NSString v35 = String._bridgeToObjectiveC()();
    unsigned int v36 = [v32 BOOLForKey:v35];
  }

  else
  {
    unsigned int v36 = 0;
  }

  uint64_t v37 = v129;
  id v38 = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (v38)
  {
    os_log_type_t v39 = v38;
    id v40 = objc_msgSend(v38, "aa_primaryAppleAccount");

    if (v40 && (v40, (v36 & 1) == 0))
    {
      uint64_t v120 = v22;
      uint64_t v55 = v6;
      uint64_t v56 = sub_100022898(0LL, &qword_10099E510, &OBJC_CLASS___CKRecordID_ptr);
      uint64_t v57 = v37 + *(int *)(v127 + 20);
      uint64_t v58 = UUID.uuidString.getter(v56);
      unint64_t v60 = v59;
      uint64_t v61 = v128;
      id v62 = *(id *)(v128 + 128);
      v63._countAndFlagsBits = v58;
      v63._object = v60;
      Class isa = CKRecordID.init(recordName:zoneID:)(v63, (CKRecordZoneID)v62).super.isa;
      sub_1004F730C();
      uint64_t v121 = (char *)isa;
      id v119 = (char *)sub_10067DD74(isa);
      swift_release();
      uint64_t v109 = swift_allocBox(v109);
      uint64_t v65 = *(char **)(v110 + 56);
      uint64_t v110 = v66;
      uint64_t v67 = v124;
      id v108 = v65;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v65)(v66, 1LL, 1LL, v124);
      uint64_t v68 = *(void *)(v61 + 136);
      char v69 = v112;
      ((void (**)(char *, uint64_t, uint64_t))v130)[2](v112, v57, v10);
      if (qword_10099B648 != -1) {
        swift_once(&qword_10099B648, sub_1005F1554);
      }
      uint64_t v70 = sub_10000A720(v55, (uint64_t)qword_100A2AEF0);
      uint64_t v71 = UUID.uuidString.getter(v70);
      unint64_t v72 = v114;
      URL.appendingPathComponent(_:isDirectory:)(v71, v73, 1LL);
      uint64_t v74 = swift_bridgeObjectRelease();
      __chkstk_darwin(v74);
      *(&v107 - 4) = v68;
      *(&v107 - 3) = (uint64_t)v69;
      *(&v107 - 2) = (uint64_t)v72;
      uint64_t v75 = (uint64_t)v111;
      OS_dispatch_queue.sync<A>(execute:)(sub_100154730, &v107 - 6, v67);
      (*(void (**)(char *, uint64_t))(v122 + 8))(v72, v55);
      ((void (*)(char *, uint64_t))v130[1])(v69, v10);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v108)(v75, 0LL, 1LL, v67);
      uint64_t v81 = sub_1000D4D50(v75, v110, &qword_1009A2460);
      uint64_t v83 = v115;
      unint64_t v82 = v116;
      __int128 v84 = v121;
      uint64_t v85 = static os_log_type_t.default.getter(v81);
      uint64_t v86 = qword_100A2B018;
      uint64_t v87 = swift_allocObject(v83, 72LL, 7LL);
      *(_OWORD *)(v87 + 16) = v113;
      id v88 = v84;
      v130 = (void (**)(void, void, void))v88;
      id v89 = [v88 description];
      uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
      uint64_t v92 = v91;

      *(void *)(v87 + 56) = &type metadata for String;
      *(void *)(v87 + 64) = v82;
      *(void *)(v87 + 32) = v90;
      *(void *)(v87 + 40) = v92;
      os_log(_:dso:log:_:_:)(v85, &_mh_execute_header, v86, "cloudBacked item deleted from disk: %@", 38LL, 2LL, v87);
      swift_bridgeObjectRelease();
      uint64_t v93 = (uint64_t)v120;
      sub_10001DC4C(v129, (uint64_t)v120, type metadata accessor for LostModeRecord);
      uint64_t v94 = *(unsigned __int8 *)(v118 + 80);
      uint64_t v95 = (v94 + 32) & ~v94;
      uint64_t v96 = v94 | 7;
      unint64_t v97 = (v117 + v95 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v98 = swift_allocObject(&unk_100963500, v97 + 16, v94 | 7);
      uint64_t v99 = v109;
      uint64_t v100 = v128;
      *(void *)(v98 + 16) = v109;
      *(void *)(v98 + 24) = v100;
      sub_10002218C(v93, v98 + v95, type metadata accessor for LostModeRecord);
      uint64_t v101 = (uint64_t (**)(uint64_t))(v98 + v97);
      uint64_t v102 = (uint64_t (*)(uint64_t))v123;
      *uint64_t v101 = sub_1005717C4;
      v101[1] = v102;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)(sub_10056F79C, v98);
      swift_release();
      swift_release();
      sub_10001DC4C(v129, v93, type metadata accessor for LostModeRecord);
      uint64_t v103 = swift_allocObject(&unk_100963528, v97 + 16, v96);
      *(void *)(v103 + 16) = v99;
      *(void *)(v103 + 24) = v100;
      sub_10002218C(v93, v103 + v95, type metadata accessor for LostModeRecord);
      v104 = (uint64_t (**)(uint64_t))(v103 + v97);
      void *v104 = sub_1005717C4;
      v104[1] = v102;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)(sub_10056F7B4, v103);

      swift_release();
      swift_release();
      swift_release();
      swift_release();

      swift_release();
    }

    else
    {
      uint64_t v41 = v6;
      if (qword_10099B528 != -1) {
        swift_once(&qword_10099B528, sub_1004F3B00);
      }
      uint64_t v42 = type metadata accessor for Logger(0LL);
      uint64_t v118 = sub_10000A720(v42, (uint64_t)qword_100A2AC98);
      uint64_t v43 = (os_log_s *)Logger.logObject.getter(v118);
      os_log_type_t v44 = static os_log_type_t.info.getter(v43);
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = v10;
        uint64_t v46 = swift_slowAlloc(14LL, -1LL);
        *(_DWORD *)uint64_t v46 = 67109376;
        BOOL v131 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v132, v46 + 4, v46 + 8);
        *(_WORD *)(v46 + 8) = 1024;
        BOOL v131 = v40 != 0LL;
        uint64_t v37 = v129;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v131, v132, v46 + 10, v46 + 14);
        _os_log_impl( (void *)&_mh_execute_header,  v43,  v44,  "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d",  (uint8_t *)v46,  0xEu);
        uint64_t v47 = v46;
        uint64_t v10 = v45;
        swift_slowDealloc(v47, -1LL, -1LL);
      }

      uint64_t v48 = *(void *)(v128 + 136);
      ((void (**)(char *, uint64_t, uint64_t))v130)[2](v15, v37 + *(int *)(v127 + 20), v10);
      if (qword_10099B648 != -1) {
        swift_once(&qword_10099B648, sub_1005F1554);
      }
      uint64_t v49 = sub_10000A720(v41, (uint64_t)qword_100A2AEF0);
      uint64_t v50 = UUID.uuidString.getter(v49);
      uint64_t v51 = (uint64_t)v120;
      URL.appendingPathComponent(_:isDirectory:)(v50, v52, 1LL);
      uint64_t v53 = swift_bridgeObjectRelease();
      __chkstk_darwin(v53);
      *(&v107 - 4) = v48;
      *(&v107 - 3) = (uint64_t)v15;
      *(&v107 - 2) = v51;
      uint64_t v54 = (uint64_t)v121;
      OS_dispatch_queue.sync<A>(execute:)(sub_100154730, &v107 - 6, v124);
      (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v51, v41);
      ((void (*)(char *, uint64_t))v130[1])(v15, v10);
      sub_10057BA24(v54);
      uint64_t v76 = v128;
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
      sub_1004E696C(9u);
      uint64_t v77 = *(void (**)(uint64_t))(v76 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
      if (v77)
      {
        uint64_t v78 = *(void *)(v76 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged + 8);
        swift_retain();
        v77(v76);
        sub_10002214C((uint64_t)v77, v78);
      }

      uint64_t v79 = (dispatch_group_s *)v125;
      uint64_t v80 = static os_log_type_t.default.getter(v79);
      if (qword_10099B778 != -1) {
        swift_once(&qword_10099B778, sub_1006516DC);
      }
      os_log(_:dso:log:_:_:)( v80,  &_mh_execute_header,  qword_100A2B088,  "Successfully reverted CK changes.",  33LL,  2LL,  _swiftEmptyArrayStorage);
      dispatch_group_leave(v79);

      sub_100018C68(v54, type metadata accessor for BeaconStoreFileRecord);
      swift_release();
    }

    return swift_release();
  }

  else
  {
    id v106 = v125;

    uint64_t result = swift_release();
    __break(1u);
  }

  return result;
}

uint64_t sub_100554B14(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v122 = a2;
  uint64_t v120 = type metadata accessor for BeaconStoreFileRecord(0LL);
  uint64_t v105 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  unint64_t v116 = (char *)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v119 = type metadata accessor for URL(0LL);
  uint64_t v117 = *(void *)(v119 - 8);
  uint64_t v8 = __chkstk_darwin(v119);
  uint64_t v115 = (char *)&v103 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  id v108 = (char *)&v103 - v10;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void (***)(void, void, void))(v11 - 8);
  uint64_t v124 = v11;
  id v125 = v12;
  uint64_t v13 = __chkstk_darwin(v11);
  v104 = (char *)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v103 - v16;
  __chkstk_darwin(v15);
  uint64_t v107 = (char *)&v103 - v18;
  uint64_t v19 = sub_100004AEC(&qword_1009A2460);
  __chkstk_darwin(v19);
  id v106 = (char *)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for LostModeRecord(0LL);
  uint64_t v112 = *(void *)(v21 - 8);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v113 = v23;
  uint64_t v114 = (char *)&v103 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v103 - v24;
  uint64_t v26 = swift_allocObject(&unk_1009635F0, 32LL, 7LL);
  *(void *)(v26 + 16) = a3;
  *(void *)(v26 + 24) = a4;
  uint64_t v118 = v26;
  uint64_t v27 = swift_retain();
  uint64_t v28 = static os_log_type_t.default.getter(v27);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v29 = qword_100A2B018;
  uint64_t v110 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v30 = swift_allocObject(v110, 72LL, 7LL);
  __int128 v109 = xmmword_1007E67D0;
  *(_OWORD *)(v30 + 16) = xmmword_1007E67D0;
  uint64_t v123 = a1;
  sub_10001DC4C(a1, (uint64_t)v25, type metadata accessor for LostModeRecord);
  uint64_t v121 = v21;
  uint64_t v31 = String.init<A>(describing:)(v25, v21);
  uint64_t v33 = v32;
  *(void *)(v30 + 56) = &type metadata for String;
  unint64_t v111 = sub_1000226F4();
  *(void *)(v30 + 64) = v111;
  *(void *)(v30 + 32) = v31;
  *(void *)(v30 + 40) = v33;
  os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "Attempting to remove: %@", 24LL, 2LL, v30);
  swift_bridgeObjectRelease();
  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  unsigned int v34 = (void *)qword_100A2AF38;
  id v35 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v36 = [v35 isInternalBuild];

  if (v36)
  {
    NSString v37 = String._bridgeToObjectiveC()();
    unsigned int v36 = [v34 BOOLForKey:v37];
  }

  id v38 = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (v38)
  {
    os_log_type_t v39 = v38;
    id v40 = objc_msgSend(v38, "aa_primaryAppleAccount");

    if (v40 && (v40, (v36 & 1) == 0))
    {
      uint64_t v115 = v25;
      uint64_t v55 = sub_100022898(0LL, &qword_10099E510, &OBJC_CLASS___CKRecordID_ptr);
      uint64_t v56 = v123 + *(int *)(v121 + 20);
      uint64_t v57 = UUID.uuidString.getter(v55);
      uint64_t v59 = v58;
      uint64_t v60 = v122;
      id v61 = *(id *)(v122 + 128);
      v62._countAndFlagsBits = v57;
      v62._object = v59;
      Class isa = CKRecordID.init(recordName:zoneID:)(v62, (CKRecordZoneID)v61).super.isa;
      sub_1004F730C();
      unint64_t v116 = (char *)isa;
      uint64_t v114 = (char *)sub_10067DD74(isa);
      swift_release();
      v104 = (char *)swift_allocBox(v19);
      uint64_t v64 = *(void (**)(void))(v105 + 56);
      uint64_t v105 = v65;
      uint64_t v66 = v120;
      v64();
      uint64_t v67 = *(void *)(v60 + 136);
      uint64_t v68 = v124;
      char v69 = v107;
      ((void (**)(char *, uint64_t, uint64_t))v125)[2](v107, v56, v124);
      if (qword_10099B648 != -1) {
        swift_once(&qword_10099B648, sub_1005F1554);
      }
      uint64_t v70 = v119;
      uint64_t v71 = sub_10000A720(v119, (uint64_t)qword_100A2AEF0);
      uint64_t v72 = UUID.uuidString.getter(v71);
      uint64_t v73 = v108;
      URL.appendingPathComponent(_:isDirectory:)(v72, v74, 1LL);
      uint64_t v75 = swift_bridgeObjectRelease();
      __chkstk_darwin(v75);
      *(&v103 - 4) = v67;
      *(&v103 - 3) = (uint64_t)v69;
      *(&v103 - 2) = (uint64_t)v73;
      uint64_t v76 = (uint64_t)v106;
      OS_dispatch_queue.sync<A>(execute:)(sub_100154730, &v103 - 6, v66);
      (*(void (**)(char *, uint64_t))(v117 + 8))(v73, v70);
      ((void (*)(char *, uint64_t))v125[1])(v69, v68);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v64)(v76, 0LL, 1LL, v66);
      uint64_t v79 = sub_1000D4D50(v76, v105, &qword_1009A2460);
      uint64_t v81 = v110;
      unint64_t v80 = v111;
      unint64_t v82 = v116;
      uint64_t v83 = static os_log_type_t.default.getter(v79);
      uint64_t v84 = qword_100A2B018;
      uint64_t v85 = swift_allocObject(v81, 72LL, 7LL);
      *(_OWORD *)(v85 + 16) = v109;
      id v86 = v82;
      id v125 = (void (**)(void, void, void))v86;
      id v87 = [v86 description];
      uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
      uint64_t v90 = v89;

      *(void *)(v85 + 56) = &type metadata for String;
      *(void *)(v85 + 64) = v80;
      *(void *)(v85 + 32) = v88;
      *(void *)(v85 + 40) = v90;
      os_log(_:dso:log:_:_:)(v83, &_mh_execute_header, v84, "cloudBacked item deleted from disk: %@", 38LL, 2LL, v85);
      swift_bridgeObjectRelease();
      uint64_t v91 = (uint64_t)v115;
      sub_10001DC4C(v123, (uint64_t)v115, type metadata accessor for LostModeRecord);
      uint64_t v92 = *(unsigned __int8 *)(v112 + 80);
      uint64_t v93 = (v92 + 32) & ~v92;
      uint64_t v124 = v92 | 7;
      unint64_t v94 = (v113 + v93 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v95 = swift_allocObject(&unk_100963618, v94 + 16, v92 | 7);
      uint64_t v96 = v104;
      uint64_t v97 = v122;
      *(void *)(v95 + 16) = v104;
      *(void *)(v95 + 24) = v97;
      sub_10002218C(v91, v95 + v93, type metadata accessor for LostModeRecord);
      uint64_t v98 = (uint64_t (**)(uint64_t))(v95 + v94);
      uint64_t v99 = (uint64_t (*)(uint64_t))v118;
      *uint64_t v98 = sub_1005717C4;
      v98[1] = v99;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)(sub_10056F79C, v95);
      swift_release();
      swift_release();
      sub_10001DC4C(v123, v91, type metadata accessor for LostModeRecord);
      uint64_t v100 = swift_allocObject(&unk_100963640, v94 + 16, v124);
      *(void *)(v100 + 16) = v96;
      *(void *)(v100 + 24) = v97;
      sub_10002218C(v91, v100 + v93, type metadata accessor for LostModeRecord);
      uint64_t v101 = (uint64_t (**)(uint64_t))(v100 + v94);
      *uint64_t v101 = sub_1005717C4;
      v101[1] = v99;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)(sub_10056F7B4, v100);
      swift_release();
      swift_release();
      swift_release();

      swift_release();
    }

    else
    {
      if (qword_10099B528 != -1) {
        swift_once(&qword_10099B528, sub_1004F3B00);
      }
      uint64_t v112 = a3;
      uint64_t v113 = a4;
      uint64_t v41 = type metadata accessor for Logger(0LL);
      unint64_t v111 = sub_10000A720(v41, (uint64_t)qword_100A2AC98);
      uint64_t v42 = (os_log_s *)Logger.logObject.getter(v111);
      os_log_type_t v43 = static os_log_type_t.info.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = swift_slowAlloc(14LL, -1LL);
        *(_DWORD *)uint64_t v44 = 67109376;
        BOOL v126 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v44 + 4, v44 + 8);
        *(_WORD *)(v44 + 8) = 1024;
        BOOL v126 = v40 != 0LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v44 + 10, v44 + 14);
        _os_log_impl( (void *)&_mh_execute_header,  v42,  v43,  "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d",  (uint8_t *)v44,  0xEu);
        swift_slowDealloc(v44, -1LL, -1LL);
      }

      uint64_t v45 = v122;
      uint64_t v46 = *(void *)(v122 + 136);
      ((void (**)(char *, uint64_t, uint64_t))v125)[2](v17, v123 + *(int *)(v121 + 20), v124);
      uint64_t v47 = v17;
      if (qword_10099B648 != -1) {
        swift_once(&qword_10099B648, sub_1005F1554);
      }
      uint64_t v48 = v119;
      uint64_t v49 = sub_10000A720(v119, (uint64_t)qword_100A2AEF0);
      uint64_t v50 = UUID.uuidString.getter(v49);
      uint64_t v51 = (uint64_t)v115;
      URL.appendingPathComponent(_:isDirectory:)(v50, v52, 1LL);
      uint64_t v53 = swift_bridgeObjectRelease();
      __chkstk_darwin(v53);
      *(&v103 - 4) = v46;
      *(&v103 - 3) = (uint64_t)v47;
      *(&v103 - 2) = v51;
      uint64_t v54 = (uint64_t)v116;
      OS_dispatch_queue.sync<A>(execute:)(sub_100154730, &v103 - 6, v120);
      (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v51, v48);
      ((void (*)(char *, uint64_t))v125[1])(v47, v124);
      sub_10057BA24(v54);
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
      sub_1004E696C(9u);
      uint64_t v77 = *(void (**)(uint64_t))(v45 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
      if (v77)
      {
        uint64_t v78 = *(void *)(v45 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged + 8);
        swift_retain();
        v77(v45);
        sub_10002214C((uint64_t)v77, v78);
      }

      ((void (*)(uint64_t))v112)(1LL);
      sub_100018C68(v54, type metadata accessor for BeaconStoreFileRecord);
    }

    return swift_release();
  }

  else
  {
    uint64_t result = swift_release();
    __break(1u);
  }

  return result;
}

uint64_t sub_100555998()
{
  id v0 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  [v0 setInteger:28 forKey:v1];

  uint64_t v3 = static os_log_type_t.default.getter(v2);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v4 = qword_100A2B018;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v6 = swift_allocObject(v5, 72LL, 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_1007E67D0;
  *(void *)(v6 + 56) = &type metadata for Int;
  *(void *)(v6 + 64) = &protocol witness table for Int;
  *(void *)(v6 + 32) = 28LL;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "BeaconStore persistence set to %lu.", v8);
  return swift_bridgeObjectRelease();
}

void sub_100555AC4()
{
}

uint64_t sub_100555ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100555ADC(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100555AE4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v122 = a2;
  uint64_t v120 = type metadata accessor for BeaconStoreFileRecord(0LL);
  uint64_t v105 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  unint64_t v116 = (char *)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v119 = type metadata accessor for URL(0LL);
  uint64_t v117 = *(void *)(v119 - 8);
  uint64_t v8 = __chkstk_darwin(v119);
  uint64_t v115 = (char *)&v103 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  id v108 = (char *)&v103 - v10;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void (***)(void, void, void))(v11 - 8);
  uint64_t v124 = v11;
  id v125 = v12;
  uint64_t v13 = __chkstk_darwin(v11);
  v104 = (char *)&v103 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v103 - v16;
  __chkstk_darwin(v15);
  uint64_t v107 = (char *)&v103 - v18;
  uint64_t v19 = sub_100004AEC(&qword_1009A2460);
  __chkstk_darwin(v19);
  id v106 = (char *)&v103 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for ShareRecord(0LL);
  uint64_t v112 = *(void *)(v21 - 8);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v113 = v23;
  uint64_t v114 = (char *)&v103 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v103 - v24;
  uint64_t v26 = swift_allocObject(&unk_1009610E8, 32LL, 7LL);
  *(void *)(v26 + 16) = a3;
  *(void *)(v26 + 24) = a4;
  uint64_t v118 = v26;
  uint64_t v27 = swift_retain();
  uint64_t v28 = static os_log_type_t.default.getter(v27);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v29 = qword_100A2B018;
  uint64_t v110 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v30 = swift_allocObject(v110, 72LL, 7LL);
  __int128 v109 = xmmword_1007E67D0;
  *(_OWORD *)(v30 + 16) = xmmword_1007E67D0;
  uint64_t v123 = a1;
  sub_10001DC4C(a1, (uint64_t)v25, type metadata accessor for ShareRecord);
  uint64_t v121 = v21;
  uint64_t v31 = String.init<A>(describing:)(v25, v21);
  uint64_t v33 = v32;
  *(void *)(v30 + 56) = &type metadata for String;
  unint64_t v111 = sub_1000226F4();
  *(void *)(v30 + 64) = v111;
  *(void *)(v30 + 32) = v31;
  *(void *)(v30 + 40) = v33;
  os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "Attempting to remove: %@", 24LL, 2LL, v30);
  swift_bridgeObjectRelease();
  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  unsigned int v34 = (void *)qword_100A2AF38;
  id v35 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v36 = [v35 isInternalBuild];

  if (v36)
  {
    NSString v37 = String._bridgeToObjectiveC()();
    unsigned int v36 = [v34 BOOLForKey:v37];
  }

  id v38 = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (v38)
  {
    os_log_type_t v39 = v38;
    id v40 = objc_msgSend(v38, "aa_primaryAppleAccount");

    if (v40 && (v40, (v36 & 1) == 0))
    {
      uint64_t v115 = v25;
      uint64_t v55 = sub_100022898(0LL, &qword_10099E510, &OBJC_CLASS___CKRecordID_ptr);
      uint64_t v56 = v123 + *(int *)(v121 + 20);
      uint64_t v57 = UUID.uuidString.getter(v55);
      uint64_t v59 = v58;
      uint64_t v60 = v122;
      id v61 = *(id *)(v122 + 128);
      v62._countAndFlagsBits = v57;
      v62._object = v59;
      Class isa = CKRecordID.init(recordName:zoneID:)(v62, (CKRecordZoneID)v61).super.isa;
      sub_1004F730C();
      unint64_t v116 = (char *)isa;
      uint64_t v114 = (char *)sub_10067DD74(isa);
      swift_release();
      v104 = (char *)swift_allocBox(v19);
      uint64_t v64 = *(void (**)(void))(v105 + 56);
      uint64_t v105 = v65;
      uint64_t v66 = v120;
      v64();
      uint64_t v67 = *(void *)(v60 + 136);
      uint64_t v68 = v124;
      char v69 = v107;
      ((void (**)(char *, uint64_t, uint64_t))v125)[2](v107, v56, v124);
      if (qword_10099B078 != -1) {
        swift_once(&qword_10099B078, sub_10003D920);
      }
      uint64_t v70 = v119;
      uint64_t v71 = sub_10000A720(v119, (uint64_t)qword_100A29F08);
      uint64_t v72 = UUID.uuidString.getter(v71);
      uint64_t v73 = v108;
      URL.appendingPathComponent(_:isDirectory:)(v72, v74, 1LL);
      uint64_t v75 = swift_bridgeObjectRelease();
      __chkstk_darwin(v75);
      *(&v103 - 4) = v67;
      *(&v103 - 3) = (uint64_t)v69;
      *(&v103 - 2) = (uint64_t)v73;
      uint64_t v76 = (uint64_t)v106;
      OS_dispatch_queue.sync<A>(execute:)(sub_100154730, &v103 - 6, v66);
      (*(void (**)(char *, uint64_t))(v117 + 8))(v73, v70);
      ((void (*)(char *, uint64_t))v125[1])(v69, v68);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v64)(v76, 0LL, 1LL, v66);
      uint64_t v79 = sub_1000D4D50(v76, v105, &qword_1009A2460);
      uint64_t v81 = v110;
      unint64_t v80 = v111;
      unint64_t v82 = v116;
      uint64_t v83 = static os_log_type_t.default.getter(v79);
      uint64_t v84 = qword_100A2B018;
      uint64_t v85 = swift_allocObject(v81, 72LL, 7LL);
      *(_OWORD *)(v85 + 16) = v109;
      id v86 = v82;
      id v125 = (void (**)(void, void, void))v86;
      id v87 = [v86 description];
      uint64_t v88 = static String._unconditionallyBridgeFromObjectiveC(_:)(v87);
      uint64_t v90 = v89;

      *(void *)(v85 + 56) = &type metadata for String;
      *(void *)(v85 + 64) = v80;
      *(void *)(v85 + 32) = v88;
      *(void *)(v85 + 40) = v90;
      os_log(_:dso:log:_:_:)(v83, &_mh_execute_header, v84, "cloudBacked item deleted from disk: %@", 38LL, 2LL, v85);
      swift_bridgeObjectRelease();
      uint64_t v91 = (uint64_t)v115;
      sub_10001DC4C(v123, (uint64_t)v115, type metadata accessor for ShareRecord);
      uint64_t v92 = *(unsigned __int8 *)(v112 + 80);
      uint64_t v93 = (v92 + 32) & ~v92;
      uint64_t v124 = v92 | 7;
      unint64_t v94 = (v113 + v93 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v95 = swift_allocObject(&unk_100961110, v94 + 16, v92 | 7);
      uint64_t v96 = v104;
      uint64_t v97 = v122;
      *(void *)(v95 + 16) = v104;
      *(void *)(v95 + 24) = v97;
      sub_10002218C(v91, v95 + v93, type metadata accessor for ShareRecord);
      uint64_t v98 = (uint64_t (**)(uint64_t))(v95 + v94);
      uint64_t v99 = (uint64_t (*)(uint64_t))v118;
      *uint64_t v98 = sub_1005717C4;
      v98[1] = v99;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)(sub_100565BEC, v95);
      swift_release();
      swift_release();
      sub_10001DC4C(v123, v91, type metadata accessor for ShareRecord);
      uint64_t v100 = swift_allocObject(&unk_100961138, v94 + 16, v124);
      *(void *)(v100 + 16) = v96;
      *(void *)(v100 + 24) = v97;
      sub_10002218C(v91, v100 + v93, type metadata accessor for ShareRecord);
      uint64_t v101 = (uint64_t (**)(uint64_t))(v100 + v94);
      *uint64_t v101 = sub_1005717C4;
      v101[1] = v99;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)(sub_100565D50, v100);
      swift_release();
      swift_release();
      swift_release();

      swift_release();
    }

    else
    {
      if (qword_10099B528 != -1) {
        swift_once(&qword_10099B528, sub_1004F3B00);
      }
      uint64_t v112 = a3;
      uint64_t v113 = a4;
      uint64_t v41 = type metadata accessor for Logger(0LL);
      unint64_t v111 = sub_10000A720(v41, (uint64_t)qword_100A2AC98);
      uint64_t v42 = (os_log_s *)Logger.logObject.getter(v111);
      os_log_type_t v43 = static os_log_type_t.info.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = swift_slowAlloc(14LL, -1LL);
        *(_DWORD *)uint64_t v44 = 67109376;
        BOOL v126 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v44 + 4, v44 + 8);
        *(_WORD *)(v44 + 8) = 1024;
        BOOL v126 = v40 != 0LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v126, v127, v44 + 10, v44 + 14);
        _os_log_impl( (void *)&_mh_execute_header,  v42,  v43,  "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d",  (uint8_t *)v44,  0xEu);
        swift_slowDealloc(v44, -1LL, -1LL);
      }

      uint64_t v45 = v122;
      uint64_t v46 = *(void *)(v122 + 136);
      ((void (**)(char *, uint64_t, uint64_t))v125)[2](v17, v123 + *(int *)(v121 + 20), v124);
      uint64_t v47 = v17;
      if (qword_10099B078 != -1) {
        swift_once(&qword_10099B078, sub_10003D920);
      }
      uint64_t v48 = v119;
      uint64_t v49 = sub_10000A720(v119, (uint64_t)qword_100A29F08);
      uint64_t v50 = UUID.uuidString.getter(v49);
      uint64_t v51 = (uint64_t)v115;
      URL.appendingPathComponent(_:isDirectory:)(v50, v52, 1LL);
      uint64_t v53 = swift_bridgeObjectRelease();
      __chkstk_darwin(v53);
      *(&v103 - 4) = v46;
      *(&v103 - 3) = (uint64_t)v47;
      *(&v103 - 2) = v51;
      uint64_t v54 = (uint64_t)v116;
      OS_dispatch_queue.sync<A>(execute:)(sub_100154730, &v103 - 6, v120);
      (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v51, v48);
      ((void (*)(char *, uint64_t))v125[1])(v47, v124);
      sub_10057BA24(v54);
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
      sub_1004E696C(9u);
      uint64_t v77 = *(void (**)(uint64_t))(v45 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
      if (v77)
      {
        uint64_t v78 = *(void *)(v45 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged + 8);
        swift_retain();
        v77(v45);
        sub_10002214C((uint64_t)v77, v78);
      }

      ((void (*)(uint64_t))v112)(1LL);
      sub_100018C68(v54, type metadata accessor for BeaconStoreFileRecord);
    }

    return swift_release();
  }

  else
  {
    uint64_t result = swift_release();
    __break(1u);
  }

  return result;
}

uint64_t sub_100556968(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v129 = a2;
  uint64_t v128 = type metadata accessor for BeaconStoreFileRecord(0LL);
  uint64_t v112 = *(void *)(v128 - 8);
  __chkstk_darwin(v128);
  uint64_t v123 = (char *)v111 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v127 = type metadata accessor for URL(0LL);
  uint64_t v125 = *(void *)(v127 - 8);
  uint64_t v8 = __chkstk_darwin(v127);
  uint64_t v122 = (char *)v111 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v115 = (char *)v111 - v10;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void (***)(void, void, void))(v11 - 8);
  uint64_t v130 = v11;
  BOOL v131 = v12;
  uint64_t v13 = __chkstk_darwin(v11);
  v111[1] = (char *)v111 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)v111 - v16;
  __chkstk_darwin(v15);
  uint64_t v114 = (char *)v111 - v18;
  uint64_t v19 = sub_100004AEC(&qword_1009A2460);
  __chkstk_darwin(v19);
  uint64_t v113 = (char *)v111 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for OwnedDeviceKeyRecord(0LL);
  uint64_t v119 = *(void *)(v21 - 8);
  uint64_t v22 = __chkstk_darwin(v21);
  uint64_t v120 = v23;
  uint64_t v121 = (char *)v111 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)v111 - v24;
  uint64_t v26 = swift_allocObject(&unk_100960E18, 32LL, 7LL);
  uint64_t v124 = a3;
  *(void *)(v26 + 16) = a3;
  *(void *)(v26 + 24) = a4;
  uint64_t v126 = v26;
  uint64_t v27 = swift_retain();
  uint64_t v28 = static os_log_type_t.default.getter(v27);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v29 = qword_100A2B018;
  uint64_t v117 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v30 = swift_allocObject(v117, 72LL, 7LL);
  __int128 v116 = xmmword_1007E67D0;
  *(_OWORD *)(v30 + 16) = xmmword_1007E67D0;
  uint64_t v132 = a1;
  sub_10001DC4C(a1, (uint64_t)v25, type metadata accessor for OwnedDeviceKeyRecord);
  uint64_t v31 = String.init<A>(describing:)(v25, v21);
  uint64_t v33 = v32;
  *(void *)(v30 + 56) = &type metadata for String;
  unint64_t v118 = sub_1000226F4();
  *(void *)(v30 + 64) = v118;
  *(void *)(v30 + 32) = v31;
  *(void *)(v30 + 40) = v33;
  os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "Attempting to remove: %@", 24LL, 2LL, v30);
  swift_bridgeObjectRelease();
  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  unsigned int v34 = (void *)qword_100A2AF38;
  id v35 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v36 = [v35 isInternalBuild];

  if (v36)
  {
    NSString v37 = String._bridgeToObjectiveC()();
    unsigned int v36 = [v34 BOOLForKey:v37];
  }

  uint64_t v38 = v132;
  id v39 = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (v39)
  {
    id v40 = v39;
    id v41 = objc_msgSend(v39, "aa_primaryAppleAccount");

    if (v41 && (v41, (v36 & 1) == 0))
    {
      uint64_t v123 = v25;
      uint64_t v56 = sub_100022898(0LL, &qword_10099E510, &OBJC_CLASS___CKRecordID_ptr);
      uint64_t v57 = v38 + *(int *)(v21 + 20);
      uint64_t v58 = UUID.uuidString.getter(v56);
      uint64_t v60 = v59;
      uint64_t v61 = v129;
      id v62 = *(id *)(v129 + 128);
      v63._countAndFlagsBits = v58;
      v63._object = v60;
      Class isa = CKRecordID.init(recordName:zoneID:)(v63, (CKRecordZoneID)v62).super.isa;
      uint64_t v65 = sub_1004F730C(isa);
      uint64_t v124 = (void (*)(void))isa;
      uint64_t v122 = (char *)sub_10067DD74(isa);
      swift_release(v65);
      uint64_t v121 = (char *)swift_allocBox(v19);
      uint64_t v66 = *(void (**)(void))(v112 + 56);
      uint64_t v112 = v67;
      uint64_t v68 = v128;
      v66();
      uint64_t v69 = *(void *)(v61 + 136);
      uint64_t v70 = v130;
      uint64_t v71 = v114;
      ((void (**)(char *, uint64_t, uint64_t))v131)[2](v114, v57, v130);
      if (qword_10099B8A8 != -1) {
        swift_once(&qword_10099B8A8, sub_1006E33E8);
      }
      uint64_t v72 = v127;
      uint64_t v73 = sub_10000A720(v127, (uint64_t)qword_100A2B2E0);
      uint64_t v74 = UUID.uuidString.getter(v73);
      uint64_t v75 = v115;
      URL.appendingPathComponent(_:isDirectory:)(v74, v76, 1LL);
      uint64_t v77 = swift_bridgeObjectRelease();
      __chkstk_darwin(v77);
      v111[-4] = v69;
      v111[-3] = v71;
      uint64_t v78 = v75;
      v111[-2] = v75;
      uint64_t v79 = (uint64_t)v113;
      OS_dispatch_queue.sync<A>(execute:)(sub_100154730, &v111[-6], v68);
      unint64_t v80 = v118;
      (*(void (**)(char *, uint64_t))(v125 + 8))(v78, v72);
      ((void (*)(char *, uint64_t))v131[1])(v71, v70);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v66)(v79, 0LL, 1LL, v68);
      uint64_t v83 = sub_1000D4D50(v79, v112, &qword_1009A2460);
      uint64_t v84 = v117;
      uint64_t v85 = v124;
      unint64_t v86 = v80;
      uint64_t v87 = static os_log_type_t.default.getter(v83);
      uint64_t v88 = qword_100A2B018;
      uint64_t v89 = swift_allocObject(v84, 72LL, 7LL);
      *(_OWORD *)(v89 + 16) = v116;
      id v90 = v85;
      BOOL v131 = (void (**)(void, void, void))v90;
      id v91 = [v90 description];
      uint64_t v92 = static String._unconditionallyBridgeFromObjectiveC(_:)(v91);
      uint64_t v94 = v93;

      *(void *)(v89 + 56) = &type metadata for String;
      *(void *)(v89 + 64) = v86;
      *(void *)(v89 + 32) = v92;
      *(void *)(v89 + 40) = v94;
      os_log(_:dso:log:_:_:)(v87, &_mh_execute_header, v88, "cloudBacked item deleted from disk: %@", 38LL, 2LL, v89);
      swift_bridgeObjectRelease();
      uint64_t v95 = (uint64_t)v123;
      sub_10001DC4C(v132, (uint64_t)v123, type metadata accessor for OwnedDeviceKeyRecord);
      uint64_t v96 = *(unsigned __int8 *)(v119 + 80);
      uint64_t v97 = (v96 + 32) & ~v96;
      uint64_t v130 = v96 | 7;
      unint64_t v98 = (v120 + v97 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v99 = swift_allocObject(&unk_100960E40, v98 + 16, v96 | 7);
      uint64_t v100 = v121;
      uint64_t v101 = v129;
      *(void *)(v99 + 16) = v121;
      *(void *)(v99 + 24) = v101;
      sub_10002218C(v95, v99 + v97, type metadata accessor for OwnedDeviceKeyRecord);
      uint64_t v102 = (uint64_t (**)(uint64_t))(v99 + v98);
      uint64_t v103 = (uint64_t (*)(uint64_t))v126;
      void *v102 = sub_1005717C4;
      v102[1] = v103;
      swift_retain();
      swift_retain();
      swift_retain();
      v104 = v122;
      uint64_t v105 = Future.addSuccess(block:)(sub_10056503C, v99);
      swift_release(v105);
      swift_release(v99);
      sub_10001DC4C(v132, v95, type metadata accessor for OwnedDeviceKeyRecord);
      uint64_t v106 = swift_allocObject(&unk_100960E68, v98 + 16, v130);
      *(void *)(v106 + 16) = v100;
      *(void *)(v106 + 24) = v101;
      sub_10002218C(v95, v106 + v97, type metadata accessor for OwnedDeviceKeyRecord);
      uint64_t v107 = (uint64_t (**)(uint64_t))(v106 + v98);
      *uint64_t v107 = sub_1005717C4;
      v107[1] = v103;
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v108 = Future.addFailure(block:)(sub_10056514C, v106);
      swift_release(v103);
      swift_release(v100);
      swift_release(v106);

      swift_release(v104);
      uint64_t v109 = v108;
    }

    else
    {
      if (qword_10099B528 != -1) {
        swift_once(&qword_10099B528, sub_1004F3B00);
      }
      uint64_t v120 = a4;
      uint64_t v42 = type metadata accessor for Logger(0LL);
      uint64_t v119 = sub_10000A720(v42, (uint64_t)qword_100A2AC98);
      os_log_type_t v43 = (os_log_s *)Logger.logObject.getter(v119);
      os_log_type_t v44 = static os_log_type_t.info.getter(v43);
      if (os_log_type_enabled(v43, v44))
      {
        uint64_t v45 = swift_slowAlloc(14LL, -1LL);
        *(_DWORD *)uint64_t v45 = 67109376;
        BOOL v133 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v45 + 4, v45 + 8);
        *(_WORD *)(v45 + 8) = 1024;
        BOOL v133 = v41 != 0LL;
        uint64_t v38 = v132;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, v134, v45 + 10, v45 + 14);
        _os_log_impl( (void *)&_mh_execute_header,  v43,  v44,  "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d",  (uint8_t *)v45,  0xEu);
        swift_slowDealloc(v45, -1LL, -1LL);
      }

      uint64_t v46 = v129;
      uint64_t v47 = *(void *)(v129 + 136);
      ((void (**)(char *, uint64_t, uint64_t))v131)[2](v17, v38 + *(int *)(v21 + 20), v130);
      uint64_t v48 = v17;
      if (qword_10099B8A8 != -1) {
        swift_once(&qword_10099B8A8, sub_1006E33E8);
      }
      uint64_t v49 = v127;
      uint64_t v50 = sub_10000A720(v127, (uint64_t)qword_100A2B2E0);
      uint64_t v51 = UUID.uuidString.getter(v50);
      uint64_t v52 = v122;
      URL.appendingPathComponent(_:isDirectory:)(v51, v53, 1LL);
      uint64_t v54 = swift_bridgeObjectRelease();
      __chkstk_darwin(v54);
      v111[-4] = v47;
      v111[-3] = v48;
      v111[-2] = v52;
      uint64_t v55 = (uint64_t)v123;
      OS_dispatch_queue.sync<A>(execute:)(sub_100154730, &v111[-6], v128);
      (*(void (**)(char *, uint64_t))(v125 + 8))(v52, v49);
      ((void (*)(char *, uint64_t))v131[1])(v48, v130);
      sub_10057BA24(v55);
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
      sub_1004E696C(9u);
      uint64_t v81 = *(void (**)(uint64_t))(v46 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
      if (v81)
      {
        uint64_t v82 = *(void *)(v46 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged + 8);
        swift_retain();
        v81(v46);
        sub_10002214C((uint64_t)v81, v82);
      }

      v124(1LL);
      sub_100018C68(v55, type metadata accessor for BeaconStoreFileRecord);
      uint64_t v109 = v126;
    }

    return swift_release(v109);
  }

  else
  {
    uint64_t result = swift_release(a4);
    __break(1u);
  }

  return result;
}

void sub_1005577F4( uint64_t a1, char a2, void (*a3)(uint64_t), void (*a4)(uint64_t), uint64_t a5, void *a6)
{
  uint64_t v57 = a5;
  uint64_t v54 = a3;
  uint64_t v55 = a4;
  uint64_t v51 = sub_100004AEC(&qword_1009A7DE0);
  __chkstk_darwin(v51);
  uint64_t v52 = (char *)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v50 = *(void *)(v10 - 8);
  uint64_t v11 = *(void *)(v50 + 64);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v53 = (uint64_t)&v46 - v14;
  uint64_t v56 = swift_allocObject(&unk_100961958, 24LL, 7LL);
  *(void *)(v56 + 16) = a6;
  id v49 = a6;
  uint64_t v15 = static os_log_type_t.default.getter(v49);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v16 = qword_100A2B018;
  uint64_t v48 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v17 = swift_allocObject(v48, 72LL, 7LL);
  uint64_t v18 = (void *)v17;
  __int128 v46 = xmmword_1007E67D0;
  *(_OWORD *)(v17 + 16) = xmmword_1007E67D0;
  if ((a2 & 1) != 0) {
    uint64_t v19 = 1702195828LL;
  }
  else {
    uint64_t v19 = 0x65736C6166LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v20 = 0xE400000000000000LL;
  }
  else {
    unint64_t v20 = 0xE500000000000000LL;
  }
  *(void *)(v17 + 56) = &type metadata for String;
  unint64_t v47 = sub_1000226F4();
  v18[8] = v47;
  v18[4] = v19;
  v18[5] = v20;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Modify record. Disk First? (%@)", 31LL, 2LL, v18, v46, v47);
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    uint64_t v21 = objc_autoreleasePoolPush();
    sub_100545548(a1, type metadata accessor for BeaconNamingRecord);
    uint64_t v23 = v22;
    objc_autoreleasePoolPop(v21);
    v58[0] = v23;
    uint64_t v24 = v53;
    sub_10001DC4C(a1, v53, type metadata accessor for BeaconNamingRecord);
    *(void *)(v24 + *(int *)(v10 + 28)) = [v49 roleId];
    sub_1002B6684(v58, v24);
    uint64_t v25 = v57;
    uint64_t v26 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
    __chkstk_darwin(v26);
    *((void *)&v46 - 2) = v27;
    *((void *)&v46 - 1) = v24;
    OS_dispatch_queue.sync<A>(execute:)(sub_100571B40, &v46 - 2, (char *)&type metadata for () + 8);
    QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
    sub_1004E696C(8u);
    uint64_t v43 = (uint64_t)v52;
    sub_10001DC4C(v24, (uint64_t)v52, type metadata accessor for BeaconNamingRecord);
    swift_storeEnumTagMultiPayload(v43, v51, 0LL);
    v54(v43);
    sub_100015794(v43, &qword_1009A7DE0);
    uint64_t v44 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v44);
    *((void *)&v46 - 4) = v25;
    *((void *)&v46 - 3) = v58;
    *((void *)&v46 - 2) = a1;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-updateToCloud",  42LL,  2LL,  sub_1005689EC,  &v46 - 3);
    sub_100018C68(v24, type metadata accessor for BeaconNamingRecord);
    id v45 = v58[0];
    swift_release();
  }

  else
  {
    uint64_t v28 = objc_autoreleasePoolPush();
    sub_100545548(a1, type metadata accessor for BeaconNamingRecord);
    uint64_t v30 = v29;
    objc_autoreleasePoolPop(v28);
    sub_1004F730C();
    sub_10001DC4C(a1, (uint64_t)v13, type metadata accessor for BeaconNamingRecord);
    uint64_t v31 = *(unsigned __int8 *)(v50 + 80);
    uint64_t v32 = (v31 + 32) & ~v31;
    uint64_t v53 = v31 | 7;
    uint64_t v33 = swift_allocObject(&unk_100961980, v32 + v11, v31 | 7);
    uint64_t v34 = v56;
    *(void *)(v33 + 16) = sub_100568980;
    *(void *)(v33 + 24) = v34;
    sub_10002218C((uint64_t)v13, v33 + v32, type metadata accessor for BeaconNamingRecord);
    swift_retain();
    sub_10067F4C4(v30, (void (*)(id *))sub_10056898C, v33);
    swift_release();
    swift_release();
    uint64_t v35 = swift_allocObject(&unk_1009619A8, 32LL, 7LL);
    unsigned int v36 = v54;
    uint64_t v52 = v30;
    NSString v37 = v55;
    *(void *)(v35 + 16) = v54;
    *(void *)(v35 + 24) = v37;
    swift_retain();
    Future.addFailure(block:)(sub_1005689A8, v35);
    swift_release();
    swift_release();
    sub_10001DC4C(a1, (uint64_t)v13, type metadata accessor for BeaconNamingRecord);
    uint64_t v38 = (v31 + 16) & ~v31;
    unint64_t v39 = (v11 + v38 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v40 = (v39 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v41 = swift_allocObject(&unk_1009619D0, v40 + 16, v53);
    sub_10002218C((uint64_t)v13, v41 + v38, type metadata accessor for BeaconNamingRecord);
    *(void *)(v41 + v39) = v57;
    uint64_t v42 = (void (**)(uint64_t))(v41 + v40);
    *uint64_t v42 = v36;
    v42[1] = v37;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_1005689D8, v41);
    swift_release();

    swift_release();
    swift_release();
    swift_release();
  }

void sub_100557ED8(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v121 = a2;
  uint64_t v119 = type metadata accessor for BeaconStoreFileRecord(0LL);
  uint64_t v105 = *(void *)(v119 - 8);
  __chkstk_darwin(v119);
  uint64_t v114 = (char *)&v103 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v117 = *(void *)(v8 - 8);
  uint64_t v118 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v103 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v108 = (char *)&v103 - v12;
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void (***)(void, void, void))(v13 - 8);
  uint64_t v122 = v13;
  uint64_t v123 = v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v103 = (char *)&v103 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v103 - v18;
  __chkstk_darwin(v17);
  uint64_t v107 = (char *)&v103 - v20;
  v104 = (void (*)(uint64_t, void, uint64_t, uint64_t))sub_100004AEC(&qword_1009A2460);
  __chkstk_darwin(v104);
  uint64_t v106 = (char *)&v103 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = (int *)type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v111 = *((void *)v22 - 1);
  uint64_t v23 = *(void *)(v111 + 64);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v112 = (char *)&v103 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v103 - v25;
  uint64_t v27 = swift_allocObject(&unk_100960CB0, 32LL, 7LL);
  uint64_t v115 = a3;
  uint64_t v116 = a4;
  *(void *)(v27 + 16) = a3;
  *(void *)(v27 + 24) = a4;
  uint64_t v120 = v27;
  uint64_t v28 = swift_retain();
  uint64_t v29 = static os_log_type_t.default.getter(v28);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v30 = qword_100A2B018;
  uint64_t v113 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v31 = swift_allocObject(v113, 72LL, 7LL);
  __int128 v109 = xmmword_1007E67D0;
  *(_OWORD *)(v31 + 16) = xmmword_1007E67D0;
  uint64_t v124 = a1;
  sub_10001DC4C(a1, (uint64_t)v26, type metadata accessor for BeaconNamingRecord);
  uint64_t v32 = String.init<A>(describing:)(v26, v22);
  uint64_t v34 = v33;
  *(void *)(v31 + 56) = &type metadata for String;
  unint64_t v110 = sub_1000226F4();
  *(void *)(v31 + 64) = v110;
  *(void *)(v31 + 32) = v32;
  *(void *)(v31 + 40) = v34;
  os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "Attempting to remove: %@", 24LL, 2LL, v31);
  swift_bridgeObjectRelease();
  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  uint64_t v35 = (void *)qword_100A2AF38;
  id v36 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v37 = [v36 isInternalBuild];

  if (v37)
  {
    NSString v38 = String._bridgeToObjectiveC()();
    unsigned int v39 = [v35 BOOLForKey:v38];
  }

  else
  {
    unsigned int v39 = 0;
  }

  id v40 = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (v40)
  {
    uint64_t v41 = v40;
    id v42 = objc_msgSend(v40, "aa_primaryAppleAccount");

    if (v42 && (v42, (v39 & 1) == 0))
    {
      uint64_t v53 = sub_100022898(0LL, &qword_10099E510, &OBJC_CLASS___CKRecordID_ptr);
      uint64_t v54 = v124 + v22[5];
      uint64_t v55 = UUID.uuidString.getter(v53);
      uint64_t v57 = v56;
      uint64_t v58 = v121;
      id v59 = *(id *)(v121 + 128);
      v60._countAndFlagsBits = v55;
      v60._object = v57;
      Class isa = CKRecordID.init(recordName:zoneID:)(v60, (CKRecordZoneID)v59).super.isa;
      uint64_t v62 = sub_1004F730C(isa);
      uint64_t v112 = (char *)isa;
      uint64_t v115 = (void (*)(void))sub_10067DD74(isa);
      swift_release(v62);
      uint64_t v114 = (char *)swift_allocBox(v104);
      Swift::String v63 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v105 + 56);
      uint64_t v105 = v64;
      uint64_t v65 = v119;
      v104 = v63;
      v63(v64, 1LL, 1LL, v119);
      uint64_t v66 = *(char **)(v58 + 136);
      uint64_t v67 = v107;
      uint64_t v68 = v54;
      uint64_t v69 = v122;
      ((void (**)(char *, uint64_t, uint64_t))v123)[2](v107, v68, v122);
      uint64_t v70 = objc_autoreleasePoolPush();
      uint64_t v71 = v108;
      sub_1005DD780();
      objc_autoreleasePoolPop(v70);
      __chkstk_darwin(v72);
      *(&v103 - 4) = v66;
      *(&v103 - 3) = v67;
      *(&v103 - 2) = v71;
      uint64_t v73 = (uint64_t)v106;
      OS_dispatch_queue.sync<A>(execute:)(sub_100154730, &v103 - 6, v65);
      uint64_t v74 = v71;
      uint64_t v75 = v113;
      (*(void (**)(char *, uint64_t))(v117 + 8))(v74, v118);
      ((void (*)(char *, uint64_t))v123[1])(v67, v69);
      v104(v73, 0LL, 1LL, v65);
      uint64_t v78 = sub_1000D4D50(v73, v105, &qword_1009A2460);
      unint64_t v79 = v110;
      unint64_t v80 = v112;
      uint64_t v81 = static os_log_type_t.default.getter(v78);
      uint64_t v82 = qword_100A2B018;
      uint64_t v83 = swift_allocObject(v75, 72LL, 7LL);
      *(_OWORD *)(v83 + 16) = v109;
      id v84 = v80;
      uint64_t v123 = (void (**)(void, void, void))v84;
      id v85 = [v84 description];
      uint64_t v86 = static String._unconditionallyBridgeFromObjectiveC(_:)(v85);
      uint64_t v88 = v87;

      *(void *)(v83 + 56) = &type metadata for String;
      *(void *)(v83 + 64) = v79;
      *(void *)(v83 + 32) = v86;
      *(void *)(v83 + 40) = v88;
      os_log(_:dso:log:_:_:)(v81, &_mh_execute_header, v82, "cloudBacked item deleted from disk: %@", 38LL, 2LL, v83);
      swift_bridgeObjectRelease();
      sub_10001DC4C(v124, (uint64_t)v26, type metadata accessor for BeaconNamingRecord);
      uint64_t v89 = *(unsigned __int8 *)(v111 + 80);
      uint64_t v90 = (v89 + 32) & ~v89;
      uint64_t v122 = v89 | 7;
      unint64_t v91 = (v23 + v90 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v92 = swift_allocObject(&unk_100960CD8, v91 + 16, v89 | 7);
      uint64_t v93 = v114;
      uint64_t v94 = v121;
      *(void *)(v92 + 16) = v114;
      *(void *)(v92 + 24) = v94;
      sub_10002218C((uint64_t)v26, v92 + v90, type metadata accessor for BeaconNamingRecord);
      uint64_t v95 = (uint64_t (**)(uint64_t))(v92 + v91);
      uint64_t v96 = (uint64_t (*)(uint64_t))v120;
      *uint64_t v95 = sub_1005717C4;
      v95[1] = v96;
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v97 = v115;
      uint64_t v98 = Future.addSuccess(block:)(sub_100564DA0, v92);
      swift_release(v98);
      swift_release(v92);
      sub_10001DC4C(v124, (uint64_t)v26, type metadata accessor for BeaconNamingRecord);
      uint64_t v99 = swift_allocObject(&unk_100960D00, v91 + 16, v122);
      *(void *)(v99 + 16) = v93;
      *(void *)(v99 + 24) = v94;
      sub_10002218C((uint64_t)v26, v99 + v90, type metadata accessor for BeaconNamingRecord);
      uint64_t v100 = (uint64_t (**)(uint64_t))(v99 + v91);
      char *v100 = sub_1005717C4;
      v100[1] = v96;
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v101 = Future.addFailure(block:)(sub_100564EB0, v99);
      swift_release(v96);
      swift_release(v93);
      swift_release(v99);

      swift_release(v97);
      uint64_t v102 = v101;
    }

    else
    {
      if (qword_10099B528 != -1) {
        swift_once(&qword_10099B528, sub_1004F3B00);
      }
      uint64_t v43 = type metadata accessor for Logger(0LL);
      uint64_t v44 = sub_10000A720(v43, (uint64_t)qword_100A2AC98);
      id v45 = (os_log_s *)Logger.logObject.getter(v44);
      os_log_type_t v46 = static os_log_type_t.info.getter(v45);
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = swift_slowAlloc(14LL, -1LL);
        *(_DWORD *)uint64_t v47 = 67109376;
        BOOL v125 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v47 + 4, v47 + 8);
        *(_WORD *)(v47 + 8) = 1024;
        BOOL v125 = v42 != 0LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v125, v126, v47 + 10, v47 + 14);
        _os_log_impl( (void *)&_mh_execute_header,  v45,  v46,  "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d",  (uint8_t *)v47,  0xEu);
        swift_slowDealloc(v47, -1LL, -1LL);
      }

      uint64_t v48 = v121;
      id v49 = *(char **)(v121 + 136);
      ((void (**)(char *, uint64_t, uint64_t))v123)[2](v19, v124 + v22[5], v122);
      uint64_t v50 = objc_autoreleasePoolPush();
      sub_1005DD780();
      objc_autoreleasePoolPop(v50);
      __chkstk_darwin(v51);
      *(&v103 - 4) = v49;
      *(&v103 - 3) = v19;
      *(&v103 - 2) = v11;
      uint64_t v52 = (uint64_t)v114;
      OS_dispatch_queue.sync<A>(execute:)(sub_100154730, &v103 - 6, v119);
      (*(void (**)(char *, uint64_t))(v117 + 8))(v11, v118);
      ((void (*)(char *, uint64_t))v123[1])(v19, v122);
      sub_10057BA24(v52);
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
      sub_1004E696C(9u);
      uint64_t v76 = *(void (**)(uint64_t))(v48 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
      if (v76)
      {
        uint64_t v77 = *(void *)(v48 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged + 8);
        swift_retain();
        v76(v48);
        sub_10002214C((uint64_t)v76, v77);
      }

      v115(1LL);
      sub_100018C68(v52, type metadata accessor for BeaconStoreFileRecord);
      uint64_t v102 = v120;
    }

    swift_release(v102);
  }

  else
  {
    swift_release(v116);
    __break(1u);
    swift_release(v116);
    objc_autoreleasePoolPop(v35);
    __break(1u);
    swift_release(v116);
    objc_autoreleasePoolPop(v22);
    __break(1u);
  }

void sub_100558CE8(uint64_t a1, int a2, uint64_t a3, uint64_t a4, const void *a5)
{
  uint64_t v53 = a1;
  uint64_t v49 = sub_100004AEC(&qword_1009A7DE0);
  __chkstk_darwin(v49);
  uint64_t v10 = &v46[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = type metadata accessor for BeaconNamingRecord(0LL);
  __chkstk_darwin(v11);
  uint64_t v54 = &v46[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = swift_allocObject(&unk_100961908, 24LL, 7LL);
  *(void *)(v13 + 16) = a5;
  uint64_t v14 = (void *)swift_allocObject(&unk_100961930, 40LL, 7LL);
  v14[2] = sub_1000DEB08;
  v14[3] = v13;
  v14[4] = a4;
  _Block_copy(a5);
  _Block_copy(a5);
  uint64_t v15 = qword_10099B528;
  uint64_t v52 = v13;
  swift_retain();
  swift_retain();
  if (v15 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v51 = sub_10000A720(v16, (uint64_t)qword_100A2AC98);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v51);
  os_log_type_t v18 = static os_log_type_t.default.getter(v17);
  BOOL v19 = os_log_type_enabled(v17, v18);
  uint64_t v50 = a4;
  if (v19)
  {
    uint64_t v20 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v20 = 67109120;
    int v55 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v20 + 4, v20 + 8);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Saving record. Disk First? %{BOOL}d", v20, 8u);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  uint64_t v21 = (void *)qword_100A2AF38;
  id v22 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v23 = [v22 isInternalBuild];

  if (v23)
  {
    NSString v24 = String._bridgeToObjectiveC()();
    unsigned int v25 = [v21 BOOLForKey:v24];
  }

  else
  {
    unsigned int v25 = 0;
  }

  id v26 = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (v26)
  {
    uint64_t v27 = v26;
    id v28 = objc_msgSend(v26, "aa_primaryAppleAccount");

    if (v28 && (v28, ((a2 | v25) & 1) == 0))
    {
      sub_1005014A4(v53, (uint64_t)sub_100568974, (uint64_t)v14);
    }

    else
    {
      unsigned int v47 = v25;
      uint64_t v48 = v14;
      uint64_t v29 = v54;
      sub_10001DC4C(v53, (uint64_t)v54, type metadata accessor for BeaconNamingRecord);
      uint64_t v30 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
      __chkstk_darwin(v30);
      *(void *)&v46[-16] = v31;
      *(void *)&v46[-8] = v29;
      uint64_t v32 = OS_dispatch_queue.sync<A>(execute:)(sub_100571B40, &v46[-32], (char *)&type metadata for () + 8);
      uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
      os_log_type_t v34 = static os_log_type_t.default.getter(v33);
      BOOL v35 = os_log_type_enabled(v33, v34);
      uint64_t v36 = v50;
      if (v35)
      {
        unsigned int v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)unsigned int v37 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "Saved LocalStorageBacked record. Calling completion.",  v37,  2u);
        swift_slowDealloc(v37, -1LL, -1LL);
      }

      uint64_t v38 = v53;
      sub_10001DC4C(v53, (uint64_t)v10, type metadata accessor for BeaconNamingRecord);
      swift_storeEnumTagMultiPayload(v10, v49, 0LL);
      _Block_copy(a5);
      sub_1002D0CA0((uint64_t)v10, v36, (uint64_t)a5);
      _Block_release(a5);
      uint64_t v39 = sub_100015794((uint64_t)v10, &qword_1009A7DE0);
      int v40 = v47;
      if (((v28 != 0LL) & ~v47) != 0)
      {
        uint64_t v44 = type metadata accessor for Transaction(0LL);
        __chkstk_darwin(v44);
        *(void *)&v46[-32] = a3;
        *(void *)&v46[-24] = v38;
        id v45 = v54;
        *(void *)&v46[-16] = v54;
        static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-saveToCloud",  40LL,  2LL,  sub_100571BAC,  &v46[-48]);
        sub_100018C68((uint64_t)v45, type metadata accessor for BeaconNamingRecord);
      }

      else
      {
        uint64_t v41 = (os_log_s *)Logger.logObject.getter(v39);
        os_log_type_t v42 = static os_log_type_t.info.getter(v41);
        if (os_log_type_enabled(v41, v42))
        {
          uint64_t v43 = swift_slowAlloc(14LL, -1LL);
          *(_DWORD *)uint64_t v43 = 67109376;
          int v55 = v40;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v43 + 4, v43 + 8);
          *(_WORD *)(v43 + 8) = 1024;
          int v55 = v28 != 0LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, v56, v43 + 10, v43 + 14);
          _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d",  (uint8_t *)v43,  0xEu);
          swift_slowDealloc(v43, -1LL, -1LL);
        }

        sub_100018C68((uint64_t)v54, type metadata accessor for BeaconNamingRecord);
      }
    }

    swift_release();
    swift_release();
    _Block_release(a5);
  }

  else
  {
    swift_release();
    _Block_release(a5);
    _Block_release(a5);
    swift_release();
    __break(1u);
  }

void sub_1005594C8(uint64_t a1, int a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v52 = a1;
  uint64_t v9 = sub_100004AEC(&qword_1009A7DE0);
  __chkstk_darwin(v9);
  uint64_t v11 = &v47[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = type metadata accessor for BeaconNamingRecord(0LL);
  __chkstk_darwin(v12);
  uint64_t v53 = &v47[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v14 = swift_allocObject(&unk_1009617A0, 32LL, 7LL);
  *(void *)(v14 + 16) = a4;
  *(void *)(v14 + 24) = a5;
  uint64_t v51 = v14;
  uint64_t v15 = qword_10099B528;
  uint64_t v50 = a4;
  swift_retain();
  if (v15 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = sub_10000A720(v16, (uint64_t)qword_100A2AC98);
  os_log_type_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter(v18);
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v49 = v9;
  if (v20)
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v21 = 67109120;
    int v54 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v21 + 4, v21 + 8);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Saving record. Disk First? %{BOOL}d", v21, 8u);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  id v22 = (void *)qword_100A2AF38;
  id v23 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v24 = [v23 isInternalBuild];

  if (v24)
  {
    NSString v25 = String._bridgeToObjectiveC()();
    unsigned int v26 = [v22 BOOLForKey:v25];
  }

  else
  {
    unsigned int v26 = 0;
  }

  id v27 = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (v27)
  {
    id v28 = v27;
    id v29 = objc_msgSend(v27, "aa_primaryAppleAccount");

    if (v29 && (v29, ((a2 | v26) & 1) == 0))
    {
      sub_1005014A4(v52, (uint64_t)sub_100567B80, v51);
    }

    else
    {
      unsigned int v48 = v26;
      uint64_t v30 = a5;
      uint64_t v31 = v53;
      sub_10001DC4C(v52, (uint64_t)v53, type metadata accessor for BeaconNamingRecord);
      uint64_t v32 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
      __chkstk_darwin(v32);
      *(void *)&v47[-16] = v33;
      *(void *)&v47[-8] = v31;
      uint64_t v34 = OS_dispatch_queue.sync<A>(execute:)(sub_1000227F0, &v47[-32], (char *)&type metadata for () + 8);
      BOOL v35 = (os_log_s *)Logger.logObject.getter(v34);
      os_log_type_t v36 = static os_log_type_t.default.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        unsigned int v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)unsigned int v37 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "Saved LocalStorageBacked record. Calling completion.",  v37,  2u);
        swift_slowDealloc(v37, -1LL, -1LL);
      }

      uint64_t v38 = v52;
      sub_10001DC4C(v52, (uint64_t)v11, type metadata accessor for BeaconNamingRecord);
      swift_storeEnumTagMultiPayload(v11, v49, 0LL);
      sub_1002B1858((uint64_t)v11, v50, v30);
      uint64_t v39 = sub_100015794((uint64_t)v11, &qword_1009A7DE0);
      int v40 = v48;
      if (((v29 != 0LL) & ~v48) != 0)
      {
        uint64_t v45 = type metadata accessor for Transaction(0LL);
        __chkstk_darwin(v45);
        *(void *)&v47[-32] = a3;
        *(void *)&v47[-24] = v38;
        os_log_type_t v46 = v53;
        *(void *)&v47[-16] = v53;
        static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-saveToCloud",  40LL,  2LL,  sub_100567B88,  &v47[-48]);
        uint64_t v44 = v46;
      }

      else
      {
        uint64_t v41 = (os_log_s *)Logger.logObject.getter(v39);
        os_log_type_t v42 = static os_log_type_t.info.getter(v41);
        if (os_log_type_enabled(v41, v42))
        {
          uint64_t v43 = swift_slowAlloc(14LL, -1LL);
          *(_DWORD *)uint64_t v43 = 67109376;
          int v54 = v40;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v43 + 4, v43 + 8);
          *(_WORD *)(v43 + 8) = 1024;
          int v54 = v29 != 0LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, v55, v43 + 10, v43 + 14);
          _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d",  (uint8_t *)v43,  0xEu);
          swift_slowDealloc(v43, -1LL, -1LL);
        }

        uint64_t v44 = v53;
      }

      sub_100018C68((uint64_t)v44, type metadata accessor for BeaconNamingRecord);
    }

    swift_release();
  }

  else
  {
    swift_release();

    __break(1u);
  }

uint64_t sub_100559C14(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v40 = *(void *)(v6 - 8);
  uint64_t v41 = v6;
  __chkstk_darwin(v6);
  uint64_t v39 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v37 = *(void *)(v8 - 8);
  uint64_t v38 = v8;
  __chkstk_darwin(v8);
  os_log_type_t v36 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = swift_allocObject(&unk_100963730, 32LL, 7LL);
  BOOL v35 = a2;
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  swift_retain();
  uint64_t v11 = sub_1004F730C();
  uint64_t v12 = (void *)swift_allocObject(&unk_100963758, 40LL, 7LL);
  v12[2] = sub_10009BF1C;
  v12[3] = v10;
  v12[4] = a1;
  swift_retain_n(v10, 2LL);
  uint64_t v42 = a1;
  swift_retain_n(a1, 2LL);
  uint64_t v13 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100153864);
  int v14 = LOBYTE(aBlock[0]);
  uint64_t v15 = static os_log_type_t.default.getter(v13);
  if (qword_10099B718 != -1) {
    swift_once(&qword_10099B718, sub_100651228);
  }
  uint64_t v16 = qword_100A2B028;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + 16) = xmmword_1007E67D0;
  *(void *)(v18 + 56) = &type metadata for Bool;
  *(void *)(v18 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v18 + 32) = v14;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "localAvailable: %d", (_DWORD)v35);
  uint64_t v19 = swift_bridgeObjectRelease();
  uint64_t v20 = static os_log_type_t.default.getter(v19);
  uint64_t v21 = qword_100A2B028;
  if (v14)
  {
    uint64_t v22 = os_log(_:dso:log:_:_:)( v20,  &_mh_execute_header,  qword_100A2B028,  "Container is already available -- calling completion immediately",  64LL,  2LL,  _swiftEmptyArrayStorage);
    v35(v22);
    swift_release();
    swift_release();
    swift_release_n(v10, 2LL);
  }

  else
  {
    uint64_t v23 = os_log(_:dso:log:_:_:)( v20,  &_mh_execute_header,  qword_100A2B028,  "Container is not yet available",  30LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v24 = static os_log_type_t.default.getter(v23);
    os_log(_:dso:log:_:_:)( v24,  &_mh_execute_header,  v21,  "Waiting for availableWaitQueue",  30LL,  2LL,  _swiftEmptyArrayStorage);
    BOOL v35 = *(void (**)(uint64_t))(v11 + 64);
    NSString v25 = (void *)swift_allocObject(&unk_100963780, 40LL, 7LL);
    void v25[2] = v11;
    v25[3] = sub_1001FA824;
    v25[4] = v12;
    aBlock[4] = sub_100571BA4;
    void aBlock[5] = v25;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    aBlock[3] = &unk_100963798;
    unsigned int v26 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v27 = swift_retain();
    id v28 = v36;
    static DispatchQoS.unspecified.getter(v27);
    uint64_t v43 = _swiftEmptyArrayStorage;
    uint64_t v29 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v30 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v31 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v32 = v39;
    uint64_t v33 = v41;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v30, v31, v41, v29);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v28, v32, v26);
    _Block_release(v26);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v32, v33);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v28, v38);
    swift_release();
    swift_release();
    swift_release_n(v10, 2LL);
    swift_release();
  }

  return swift_release();
}

void *sub_10055A04C(uint64_t a1, int a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  int v51 = a3;
  LODWORD(v52) = a4;
  int v50 = a2;
  uint64_t v9 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v49 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v12);
  int v14 = (char *)&v49 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v49 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v49 - v20;
  v55[3] = a5;
  v55[4] = a6;
  uint64_t v22 = sub_10000A7C8(v55);
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(a5 - 8) + 16LL))(v22, a1, a5);
  sub_100013044((uint64_t)v55, (uint64_t)v54);
  uint64_t v23 = sub_100004AEC(&qword_1009B0530);
  int v24 = swift_dynamicCast(v14, v54, v23, v15, 6LL);
  NSString v25 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v16 + 56);
  if (!v24)
  {
    v25(v14, 1LL, 1LL, v15);
    sub_100015794((uint64_t)v14, (uint64_t *)&unk_1009A9C30);
    goto LABEL_16;
  }

  v25(v14, 0LL, 1LL, v15);
  sub_10002218C((uint64_t)v14, (uint64_t)v21, type metadata accessor for OwnedBeaconRecord);
  sub_10001DC4C((uint64_t)&v21[*(int *)(v15 + 24)], (uint64_t)v11, type metadata accessor for StableIdentifier);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v11, v9);
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v32 = sub_100004AEC((uint64_t *)&unk_1009B0520);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v33 = (unsigned __int8 *)&v11[*(int *)(v32 + 96)];
    unsigned __int8 v34 = *v33;
    unsigned __int8 v35 = v33[1];
    swift_bridgeObjectRelease();
    if ((v35 & 1) == 0)
    {
      char v29 = v50 & 1;
      char v30 = v51 & 1;
      char v31 = v52 & 1;
      unsigned __int8 v28 = v34;
      goto LABEL_13;
    }

    sub_100018C68((uint64_t)v21, type metadata accessor for OwnedBeaconRecord);
    uint64_t v36 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v36 - 8) + 8LL))(v11, v36);
LABEL_16:
    os_log_type_t v46 = &_swiftEmptySetSingleton;
    goto LABEL_17;
  }

  if (EnumCaseMultiPayload != 3)
  {
    if (qword_10099B538 != -1) {
      swift_once(&qword_10099B538, sub_1004F3B48);
    }
    uint64_t v37 = type metadata accessor for Logger(0LL);
    sub_10000A720(v37, (uint64_t)qword_100A2ACC8);
    uint64_t v38 = sub_10001DC4C((uint64_t)v21, (uint64_t)v19, type metadata accessor for OwnedBeaconRecord);
    uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
    os_log_type_t v40 = static os_log_type_t.error.getter(v39);
    if (os_log_type_enabled(v39, v40))
    {
      uint64_t v41 = swift_slowAlloc(22LL, -1LL);
      uint64_t v42 = swift_slowAlloc(32LL, -1LL);
      uint64_t v52 = v42;
      *(_DWORD *)uint64_t v41 = 141558275;
      uint64_t v53 = 1752392040LL;
      v54[0] = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v41 + 4, v41 + 12);
      *(_WORD *)(v41 + 12) = 2081;
      sub_1006DD1E4();
      uint64_t v53 = sub_1003F11D4(v43, v44, v54);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, v54, v41 + 14, v41 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v19, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "nearbyParts: Invalid stableIdentifier %{private,mask.hash}s",  (uint8_t *)v41,  0x16u);
      uint64_t v45 = v52;
      swift_arrayDestroy(v52, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1LL, -1LL);
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v19, type metadata accessor for OwnedBeaconRecord);
    }

    sub_100018C68((uint64_t)v21, type metadata accessor for OwnedBeaconRecord);
    sub_100018C68((uint64_t)v11, type metadata accessor for StableIdentifier);
    goto LABEL_16;
  }

  uint64_t v27 = sub_100004AEC((uint64_t *)&unk_1009AF840);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unsigned __int8 v28 = v11[*(int *)(v27 + 96)];
  char v29 = v50 & 1;
  char v30 = v51 & 1;
  char v31 = v52 & 1;
LABEL_13:
  os_log_type_t v46 = sub_1000412D0(v28, v29, v30, v31);
  sub_100018C68((uint64_t)v21, type metadata accessor for OwnedBeaconRecord);
  uint64_t v47 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v47 - 8) + 8LL))(v11, v47);
LABEL_17:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v55);
  return v46;
}

unint64_t sub_10055A554(unint64_t result)
{
  if (result >= 0x19) {
    return 25LL;
  }
  return result;
}

uint64_t sub_10055A564(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v60 = a1;
  uint64_t v61 = a3;
  uint64_t v8 = sub_100004AEC(&qword_1009AF758);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009AF730);
  uint64_t v56 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for SafeLocation(0LL);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = swift_allocObject(&unk_100961AC0, 32LL, 7LL);
  *(void *)(v17 + 16) = a4;
  *(void *)(v17 + 24) = a5;
  uint64_t v18 = qword_10099B528;
  uint64_t v59 = a4;
  swift_retain();
  uint64_t v58 = a5;
  if (v18 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v19 = type metadata accessor for Logger(0LL);
  uint64_t v20 = sub_10000A720(v19, (uint64_t)qword_100A2AC98);
  uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
  os_log_type_t v22 = static os_log_type_t.default.getter(v21);
  BOOL v23 = os_log_type_enabled(v21, v22);
  uint64_t v57 = v11;
  if (v23)
  {
    int v24 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)int v24 = 67109120;
    int v64 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v24 + 4, v24 + 8);
    _os_log_impl((void *)&_mh_execute_header, v21, v22, "Saving record. Disk First? %{BOOL}d", v24, 8u);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  NSString v25 = (void *)qword_100A2AF38;
  id v26 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v27 = [v26 isInternalBuild];

  if (v27)
  {
    NSString v28 = String._bridgeToObjectiveC()();
    unsigned int v29 = [v25 BOOLForKey:v28];
  }

  else
  {
    unsigned int v29 = 0;
  }

  id v30 = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (v30)
  {
    char v31 = v30;
    id v32 = objc_msgSend(v30, "aa_primaryAppleAccount");

    if (v32 && (v32, ((a2 | v29) & 1) == 0))
    {
      sub_100501828(v60, (uint64_t)sub_100568D40, v17);
    }

    else
    {
      uint64_t v55 = v17;
      uint64_t v33 = v60;
      uint64_t v34 = sub_10001DC4C(v60, (uint64_t)v16, type metadata accessor for SafeLocation);
      __chkstk_darwin(v34);
      *(&v53 - 2) = v35;
      *(&v53 - 1) = (uint64_t)v16;
      uint64_t v36 = OS_dispatch_queue.sync<A>(execute:)(sub_100571ADC, &v53 - 4, (char *)&type metadata for () + 8);
      int v54 = v16;
      uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
      os_log_type_t v38 = static os_log_type_t.default.getter(v37);
      if (os_log_type_enabled(v37, v38))
      {
        uint64_t v39 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v39 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "Saved LocalStorageBacked record. Calling completion.",  v39,  2u);
        swift_slowDealloc(v39, -1LL, -1LL);
      }

      sub_10001DC4C(v33, (uint64_t)v13, type metadata accessor for SafeLocation);
      uint64_t v40 = v57;
      swift_storeEnumTagMultiPayload(v13, v57, 0LL);
      uint64_t v41 = swift_projectBox(v59);
      sub_10001581C((uint64_t)v13, (uint64_t)v10, (uint64_t *)&unk_1009AF730);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v56 + 56))(v10, 0LL, 1LL, v40);
      swift_beginAccess(v41, &v64, 1LL, 0LL);
      sub_1000D4D50((uint64_t)v10, v41, &qword_1009AF758);
      dispatch_group_leave(v58);
      uint64_t v42 = sub_100015794((uint64_t)v13, (uint64_t *)&unk_1009AF730);
      if (((v32 != 0LL) & ~v29) != 0)
      {
        uint64_t v49 = type metadata accessor for Transaction(0LL);
        __chkstk_darwin(v49);
        uint64_t v50 = v60;
        *(&v53 - 4) = v61;
        *(&v53 - 3) = v50;
        uint64_t v51 = (uint64_t)v54;
        *(&v53 - 2) = (uint64_t)v54;
        static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-saveToCloud",  40LL,  2LL,  sub_100568D48,  &v53 - 6);
        uint64_t v48 = v51;
      }

      else
      {
        uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
        os_log_type_t v44 = static os_log_type_t.info.getter(v43);
        BOOL v45 = os_log_type_enabled(v43, v44);
        uint64_t v46 = (uint64_t)v54;
        if (v45)
        {
          uint64_t v47 = swift_slowAlloc(14LL, -1LL);
          *(_DWORD *)uint64_t v47 = 67109376;
          BOOL v62 = v29;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v47 + 4, v47 + 8);
          *(_WORD *)(v47 + 8) = 1024;
          BOOL v62 = v32 != 0LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v62, v63, v47 + 10, v47 + 14);
          _os_log_impl( (void *)&_mh_execute_header,  v43,  v44,  "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d",  (uint8_t *)v47,  0xEu);
          swift_slowDealloc(v47, -1LL, -1LL);
        }

        uint64_t v48 = v46;
      }

      sub_100018C68(v48, type metadata accessor for SafeLocation);
    }

    return swift_release();
  }

  else
  {

    uint64_t result = swift_release();
    __break(1u);
  }

  return result;
}

uint64_t sub_10055ADB0(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v121 = a2;
  uint64_t v120 = type metadata accessor for BeaconStoreFileRecord(0LL);
  uint64_t v107 = *(void **)(v120 - 8);
  __chkstk_darwin(v120);
  uint64_t v115 = (char *)v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v119 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  __int128 v109 = (char *)v105 - v12;
  uint64_t v123 = type metadata accessor for UUID(0LL);
  BOOL v125 = *(void (***)(void, void, void))(v123 - 8);
  uint64_t v13 = __chkstk_darwin(v123);
  v105[1] = (char *)v105 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)v105 - v16;
  __chkstk_darwin(v15);
  uint64_t v108 = (char *)v105 - v18;
  uint64_t v19 = sub_100004AEC(&qword_1009A2460);
  __chkstk_darwin(v19);
  uint64_t v106 = (char *)v105 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for SafeLocation(0LL);
  uint64_t v113 = *(void *)(v21 - 8);
  uint64_t v22 = *(void *)(v113 + 64);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v114 = (uint64_t)v105 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23);
  uint64_t v122 = (uint64_t)v105 - v24;
  uint64_t v25 = swift_allocObject(&unk_100961B60, 32LL, 7LL);
  uint64_t v116 = a3;
  uint64_t v117 = a4;
  *(void *)(v25 + 16) = a3;
  *(void *)(v25 + 24) = a4;
  uint64_t v118 = v25;
  uint64_t v26 = swift_retain();
  uint64_t v27 = static os_log_type_t.default.getter(v26);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v28 = qword_100A2B018;
  uint64_t v111 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v29 = swift_allocObject(v111, 72LL, 7LL);
  __int128 v110 = xmmword_1007E67D0;
  *(_OWORD *)(v29 + 16) = xmmword_1007E67D0;
  uint64_t v126 = a1;
  uint64_t v30 = a1;
  uint64_t v31 = v122;
  sub_10001DC4C(v30, v122, type metadata accessor for SafeLocation);
  uint64_t v124 = v21;
  uint64_t v32 = String.init<A>(describing:)(v31, v21);
  uint64_t v34 = v33;
  *(void *)(v29 + 56) = &type metadata for String;
  unint64_t v112 = sub_1000226F4();
  *(void *)(v29 + 64) = v112;
  *(void *)(v29 + 32) = v32;
  *(void *)(v29 + 40) = v34;
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "Attempting to remove: %@", 24LL, 2LL, v29);
  swift_bridgeObjectRelease();
  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  uint64_t v35 = (void *)qword_100A2AF38;
  id v36 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v37 = [v36 isInternalBuild];

  if (v37)
  {
    NSString v38 = String._bridgeToObjectiveC()();
    unsigned int v39 = [v35 BOOLForKey:v38];
  }

  else
  {
    unsigned int v39 = 0;
  }

  uint64_t v40 = v126;
  uint64_t v41 = v124;
  id v42 = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (v42)
  {
    uint64_t v43 = v42;
    id v44 = objc_msgSend(v42, "aa_primaryAppleAccount");

    if (v44 && (v44, (v39 & 1) == 0))
    {
      uint64_t v117 = v22;
      uint64_t v59 = sub_100022898(0LL, &qword_10099E510, &OBJC_CLASS___CKRecordID_ptr);
      uint64_t v60 = v40 + *(int *)(v41 + 20);
      uint64_t v61 = UUID.uuidString.getter(v59);
      Swift::String v63 = v62;
      uint64_t v64 = v121;
      id v65 = *(id *)(v121 + 128);
      v66._countAndFlagsBits = v61;
      v66._object = v63;
      Class isa = CKRecordID.init(recordName:zoneID:)(v66, (CKRecordZoneID)v65).super.isa;
      sub_1004F730C();
      uint64_t v124 = (uint64_t)isa;
      uint64_t v116 = (void (*)(uint64_t))sub_10067DD74(isa);
      swift_release();
      uint64_t v115 = (char *)swift_allocBox(v19);
      uint64_t v68 = (void *)v107[7];
      uint64_t v114 = v69;
      uint64_t v70 = v120;
      uint64_t v107 = v68;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v68)(v69, 1LL, 1LL, v120);
      uint64_t v71 = *(void *)(v64 + 136);
      uint64_t v72 = v108;
      uint64_t v73 = v123;
      ((void (**)(char *, uint64_t, uint64_t))v125)[2](v108, v60, v123);
      if (qword_10099B690 != -1) {
        swift_once(&qword_10099B690, sub_10061ABF8);
      }
      uint64_t v74 = sub_10000A720(v8, (uint64_t)qword_100A2AF70);
      uint64_t v75 = v119;
      uint64_t v76 = v109;
      uint64_t v77 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v119 + 16))(v109, v74, v8);
      __chkstk_darwin(v77);
      v105[-4] = v71;
      v105[-3] = v72;
      v105[-2] = v76;
      uint64_t v78 = (uint64_t)v106;
      OS_dispatch_queue.sync<A>(execute:)(sub_100154730, &v105[-6], v70);
      (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v8);
      ((void (*)(char *, uint64_t))v125[1])(v72, v73);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v107)(v78, 0LL, 1LL, v70);
      uint64_t v81 = sub_1000D4D50(v78, v114, &qword_1009A2460);
      uint64_t v82 = v111;
      unint64_t v83 = v112;
      id v84 = (void *)v124;
      uint64_t v85 = static os_log_type_t.default.getter(v81);
      uint64_t v86 = qword_100A2B018;
      uint64_t v87 = swift_allocObject(v82, 72LL, 7LL);
      *(_OWORD *)(v87 + 16) = v110;
      id v88 = v84;
      BOOL v125 = (void (**)(void, void, void))v88;
      id v89 = [v88 description];
      uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
      uint64_t v92 = v91;

      *(void *)(v87 + 56) = &type metadata for String;
      *(void *)(v87 + 64) = v83;
      *(void *)(v87 + 32) = v90;
      *(void *)(v87 + 40) = v92;
      os_log(_:dso:log:_:_:)(v85, &_mh_execute_header, v86, "cloudBacked item deleted from disk: %@", 38LL, 2LL, v87);
      swift_bridgeObjectRelease();
      uint64_t v93 = v122;
      sub_10001DC4C(v126, v122, type metadata accessor for SafeLocation);
      uint64_t v94 = *(unsigned __int8 *)(v113 + 80);
      uint64_t v95 = (v94 + 32) & ~v94;
      uint64_t v124 = v94 | 7;
      unint64_t v96 = (v117 + v95 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v97 = swift_allocObject(&unk_100961B88, v96 + 16, v94 | 7);
      uint64_t v98 = v115;
      uint64_t v99 = v121;
      *(void *)(v97 + 16) = v115;
      *(void *)(v97 + 24) = v99;
      sub_10002218C(v93, v97 + v95, type metadata accessor for SafeLocation);
      uint64_t v100 = (uint64_t (**)(uint64_t))(v97 + v96);
      uint64_t v101 = (uint64_t (*)(uint64_t))v118;
      char *v100 = sub_1005717C4;
      v100[1] = v101;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)(sub_100569048, v97);
      swift_release();
      swift_release();
      sub_10001DC4C(v126, v93, type metadata accessor for SafeLocation);
      uint64_t v102 = swift_allocObject(&unk_100961BB0, v96 + 16, v124);
      *(void *)(v102 + 16) = v98;
      *(void *)(v102 + 24) = v99;
      sub_10002218C(v93, v102 + v95, type metadata accessor for SafeLocation);
      uint64_t v103 = (uint64_t (**)(uint64_t))(v102 + v96);
      *uint64_t v103 = sub_1005717C4;
      v103[1] = v101;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)(sub_100569138, v102);
      swift_release();
      swift_release();
      swift_release();

      swift_release();
    }

    else
    {
      if (qword_10099B528 != -1) {
        swift_once(&qword_10099B528, sub_1004F3B00);
      }
      uint64_t v45 = type metadata accessor for Logger(0LL);
      uint64_t v122 = sub_10000A720(v45, (uint64_t)qword_100A2AC98);
      uint64_t v46 = (os_log_s *)Logger.logObject.getter(v122);
      os_log_type_t v47 = static os_log_type_t.info.getter(v46);
      uint64_t v48 = v8;
      if (os_log_type_enabled(v46, v47))
      {
        BOOL v49 = v44 != 0LL;
        uint64_t v50 = swift_slowAlloc(14LL, -1LL);
        *(_DWORD *)uint64_t v50 = 67109376;
        unsigned int v127 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, v128, v50 + 4, v50 + 8);
        *(_WORD *)(v50 + 8) = 1024;
        unsigned int v127 = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, v128, v50 + 10, v50 + 14);
        _os_log_impl( (void *)&_mh_execute_header,  v46,  v47,  "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d",  (uint8_t *)v50,  0xEu);
        swift_slowDealloc(v50, -1LL, -1LL);
      }

      uint64_t v51 = v121;
      uint64_t v52 = *(void *)(v121 + 136);
      ((void (**)(char *, uint64_t, uint64_t))v125)[2](v17, v126 + *(int *)(v124 + 20), v123);
      uint64_t v53 = v17;
      if (qword_10099B690 != -1) {
        swift_once(&qword_10099B690, sub_10061ABF8);
      }
      uint64_t v54 = sub_10000A720(v48, (uint64_t)qword_100A2AF70);
      uint64_t v55 = v48;
      uint64_t v56 = v119;
      uint64_t v57 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v119 + 16))(v11, v54, v55);
      __chkstk_darwin(v57);
      v105[-4] = v52;
      v105[-3] = v17;
      v105[-2] = v11;
      uint64_t v58 = (uint64_t)v115;
      OS_dispatch_queue.sync<A>(execute:)(sub_100154730, &v105[-6], v120);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v11, v55);
      ((void (*)(char *, uint64_t))v125[1])(v53, v123);
      sub_10057BA24(v58);
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
      sub_1004E696C(9u);
      unint64_t v79 = *(void (**)(uint64_t))(v51 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
      if (v79)
      {
        uint64_t v80 = *(void *)(v51 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged + 8);
        swift_retain();
        v79(v51);
        sub_10002214C((uint64_t)v79, v80);
      }

      v116(1LL);
      sub_100018C68(v58, type metadata accessor for BeaconStoreFileRecord);
    }

    return swift_release();
  }

  else
  {
    uint64_t result = swift_release();
    __break(1u);
  }

  return result;
}

uint64_t sub_10055BC18(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v121 = a2;
  uint64_t v120 = type metadata accessor for BeaconStoreFileRecord(0LL);
  uint64_t v107 = *(void **)(v120 - 8);
  __chkstk_darwin(v120);
  uint64_t v115 = (char *)v105 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v119 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v105 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  __int128 v109 = (char *)v105 - v12;
  uint64_t v123 = type metadata accessor for UUID(0LL);
  BOOL v125 = *(void (***)(void, void, void))(v123 - 8);
  uint64_t v13 = __chkstk_darwin(v123);
  v105[1] = (char *)v105 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)v105 - v16;
  __chkstk_darwin(v15);
  uint64_t v108 = (char *)v105 - v18;
  uint64_t v19 = sub_100004AEC(&qword_1009A2460);
  __chkstk_darwin(v19);
  uint64_t v106 = (char *)v105 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for LeashRecord(0LL);
  uint64_t v113 = *(void *)(v21 - 8);
  uint64_t v22 = *(void *)(v113 + 64);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v114 = (uint64_t)v105 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23);
  uint64_t v122 = (uint64_t)v105 - v24;
  uint64_t v25 = swift_allocObject(&unk_100963208, 32LL, 7LL);
  uint64_t v116 = a3;
  uint64_t v117 = a4;
  *(void *)(v25 + 16) = a3;
  *(void *)(v25 + 24) = a4;
  uint64_t v118 = v25;
  uint64_t v26 = swift_retain();
  uint64_t v27 = static os_log_type_t.default.getter(v26);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v28 = qword_100A2B018;
  uint64_t v111 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v29 = swift_allocObject(v111, 72LL, 7LL);
  __int128 v110 = xmmword_1007E67D0;
  *(_OWORD *)(v29 + 16) = xmmword_1007E67D0;
  uint64_t v126 = a1;
  uint64_t v30 = a1;
  uint64_t v31 = v122;
  sub_10001DC4C(v30, v122, type metadata accessor for LeashRecord);
  uint64_t v124 = v21;
  uint64_t v32 = String.init<A>(describing:)(v31, v21);
  uint64_t v34 = v33;
  *(void *)(v29 + 56) = &type metadata for String;
  unint64_t v112 = sub_1000226F4();
  *(void *)(v29 + 64) = v112;
  *(void *)(v29 + 32) = v32;
  *(void *)(v29 + 40) = v34;
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "Attempting to remove: %@", 24LL, 2LL, v29);
  swift_bridgeObjectRelease();
  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  uint64_t v35 = (void *)qword_100A2AF38;
  id v36 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v37 = [v36 isInternalBuild];

  if (v37)
  {
    NSString v38 = String._bridgeToObjectiveC()();
    unsigned int v39 = [v35 BOOLForKey:v38];
  }

  else
  {
    unsigned int v39 = 0;
  }

  uint64_t v40 = v126;
  uint64_t v41 = v124;
  id v42 = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (v42)
  {
    uint64_t v43 = v42;
    id v44 = objc_msgSend(v42, "aa_primaryAppleAccount");

    if (v44 && (v44, (v39 & 1) == 0))
    {
      uint64_t v117 = v22;
      uint64_t v59 = sub_100022898(0LL, &qword_10099E510, &OBJC_CLASS___CKRecordID_ptr);
      uint64_t v60 = v40 + *(int *)(v41 + 20);
      uint64_t v61 = UUID.uuidString.getter(v59);
      Swift::String v63 = v62;
      uint64_t v64 = v121;
      id v65 = *(id *)(v121 + 128);
      v66._countAndFlagsBits = v61;
      v66._object = v63;
      Class isa = CKRecordID.init(recordName:zoneID:)(v66, (CKRecordZoneID)v65).super.isa;
      sub_1004F730C();
      uint64_t v124 = (uint64_t)isa;
      uint64_t v116 = (void (*)(uint64_t))sub_10067DD74(isa);
      swift_release();
      uint64_t v115 = (char *)swift_allocBox(v19);
      uint64_t v68 = (void *)v107[7];
      uint64_t v114 = v69;
      uint64_t v70 = v120;
      uint64_t v107 = v68;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v68)(v69, 1LL, 1LL, v120);
      uint64_t v71 = *(void *)(v64 + 136);
      uint64_t v72 = v108;
      uint64_t v73 = v123;
      ((void (**)(char *, uint64_t, uint64_t))v125)[2](v108, v60, v123);
      if (qword_10099BA08 != -1) {
        swift_once(&qword_10099BA08, sub_10078065C);
      }
      uint64_t v74 = sub_10000A720(v8, (uint64_t)qword_100A2B770);
      uint64_t v75 = v119;
      uint64_t v76 = v109;
      uint64_t v77 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v119 + 16))(v109, v74, v8);
      __chkstk_darwin(v77);
      v105[-4] = v71;
      v105[-3] = v72;
      v105[-2] = v76;
      uint64_t v78 = (uint64_t)v106;
      OS_dispatch_queue.sync<A>(execute:)(sub_100154730, &v105[-6], v70);
      (*(void (**)(char *, uint64_t))(v75 + 8))(v76, v8);
      ((void (*)(char *, uint64_t))v125[1])(v72, v73);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v107)(v78, 0LL, 1LL, v70);
      uint64_t v81 = sub_1000D4D50(v78, v114, &qword_1009A2460);
      uint64_t v82 = v111;
      unint64_t v83 = v112;
      id v84 = (void *)v124;
      uint64_t v85 = static os_log_type_t.default.getter(v81);
      uint64_t v86 = qword_100A2B018;
      uint64_t v87 = swift_allocObject(v82, 72LL, 7LL);
      *(_OWORD *)(v87 + 16) = v110;
      id v88 = v84;
      BOOL v125 = (void (**)(void, void, void))v88;
      id v89 = [v88 description];
      uint64_t v90 = static String._unconditionallyBridgeFromObjectiveC(_:)(v89);
      uint64_t v92 = v91;

      *(void *)(v87 + 56) = &type metadata for String;
      *(void *)(v87 + 64) = v83;
      *(void *)(v87 + 32) = v90;
      *(void *)(v87 + 40) = v92;
      os_log(_:dso:log:_:_:)(v85, &_mh_execute_header, v86, "cloudBacked item deleted from disk: %@", 38LL, 2LL, v87);
      swift_bridgeObjectRelease();
      uint64_t v93 = v122;
      sub_10001DC4C(v126, v122, type metadata accessor for LeashRecord);
      uint64_t v94 = *(unsigned __int8 *)(v113 + 80);
      uint64_t v95 = (v94 + 32) & ~v94;
      uint64_t v124 = v94 | 7;
      unint64_t v96 = (v117 + v95 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v97 = swift_allocObject(&unk_100963230, v96 + 16, v94 | 7);
      uint64_t v98 = v115;
      uint64_t v99 = v121;
      *(void *)(v97 + 16) = v115;
      *(void *)(v97 + 24) = v99;
      sub_10002218C(v93, v97 + v95, type metadata accessor for LeashRecord);
      uint64_t v100 = (uint64_t (**)(uint64_t))(v97 + v96);
      uint64_t v101 = (uint64_t (*)(uint64_t))v118;
      char *v100 = sub_1005717C4;
      v100[1] = v101;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)(sub_10056E578, v97);
      swift_release();
      swift_release();
      sub_10001DC4C(v126, v93, type metadata accessor for LeashRecord);
      uint64_t v102 = swift_allocObject(&unk_100963258, v96 + 16, v124);
      *(void *)(v102 + 16) = v98;
      *(void *)(v102 + 24) = v99;
      sub_10002218C(v93, v102 + v95, type metadata accessor for LeashRecord);
      uint64_t v103 = (uint64_t (**)(uint64_t))(v102 + v96);
      *uint64_t v103 = sub_1005717C4;
      v103[1] = v101;
      swift_retain();
      swift_retain();
      swift_retain();
      Future.addFailure(block:)(sub_10056E658, v102);
      swift_release();
      swift_release();
      swift_release();

      swift_release();
    }

    else
    {
      if (qword_10099B528 != -1) {
        swift_once(&qword_10099B528, sub_1004F3B00);
      }
      uint64_t v45 = type metadata accessor for Logger(0LL);
      uint64_t v122 = sub_10000A720(v45, (uint64_t)qword_100A2AC98);
      uint64_t v46 = (os_log_s *)Logger.logObject.getter(v122);
      os_log_type_t v47 = static os_log_type_t.info.getter(v46);
      uint64_t v48 = v8;
      if (os_log_type_enabled(v46, v47))
      {
        BOOL v49 = v44 != 0LL;
        uint64_t v50 = swift_slowAlloc(14LL, -1LL);
        *(_DWORD *)uint64_t v50 = 67109376;
        unsigned int v127 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, v128, v50 + 4, v50 + 8);
        *(_WORD *)(v50 + 8) = 1024;
        unsigned int v127 = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v127, v128, v50 + 10, v50 + 14);
        _os_log_impl( (void *)&_mh_execute_header,  v46,  v47,  "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d",  (uint8_t *)v50,  0xEu);
        swift_slowDealloc(v50, -1LL, -1LL);
      }

      uint64_t v51 = v121;
      uint64_t v52 = *(void *)(v121 + 136);
      ((void (**)(char *, uint64_t, uint64_t))v125)[2](v17, v126 + *(int *)(v124 + 20), v123);
      uint64_t v53 = v17;
      if (qword_10099BA08 != -1) {
        swift_once(&qword_10099BA08, sub_10078065C);
      }
      uint64_t v54 = sub_10000A720(v48, (uint64_t)qword_100A2B770);
      uint64_t v55 = v48;
      uint64_t v56 = v119;
      uint64_t v57 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v119 + 16))(v11, v54, v55);
      __chkstk_darwin(v57);
      v105[-4] = v52;
      v105[-3] = v17;
      v105[-2] = v11;
      uint64_t v58 = (uint64_t)v115;
      OS_dispatch_queue.sync<A>(execute:)(sub_100154730, &v105[-6], v120);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v11, v55);
      ((void (*)(char *, uint64_t))v125[1])(v53, v123);
      sub_10057BA24(v58);
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
      sub_1004E696C(9u);
      unint64_t v79 = *(void (**)(uint64_t))(v51 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
      if (v79)
      {
        uint64_t v80 = *(void *)(v51 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged + 8);
        swift_retain();
        v79(v51);
        sub_10002214C((uint64_t)v79, v80);
      }

      v116(1LL);
      sub_100018C68(v58, type metadata accessor for BeaconStoreFileRecord);
    }

    return swift_release();
  }

  else
  {
    uint64_t result = swift_release();
    __break(1u);
  }

  return result;
}

uint64_t sub_10055CA80(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v47 = a3;
  uint64_t v48 = a1;
  uint64_t v45 = sub_100004AEC((uint64_t *)&unk_1009AF770);
  __chkstk_darwin(v45);
  uint64_t v9 = (char *)v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for LeashRecord(0LL);
  __chkstk_darwin(v10);
  uint64_t v49 = (uint64_t)v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = swift_allocObject(&unk_1009631E0, 32LL, 7LL);
  *(void *)(v12 + 16) = a4;
  *(void *)(v12 + 24) = a5;
  uint64_t v13 = qword_10099B528;
  swift_bridgeObjectRetain(a4);
  swift_retain();
  if (v13 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = sub_10000A720(v14, (uint64_t)qword_100A2AC98);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter(v16);
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v46 = a4;
  if (v18)
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v19 = 67109120;
    int v50 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v19 + 4, v19 + 8);
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "Saving record. Disk First? %{BOOL}d", v19, 8u);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  uint64_t v20 = (void *)qword_100A2AF38;
  id v21 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v22 = [v21 isInternalBuild];

  if (v22)
  {
    NSString v23 = String._bridgeToObjectiveC()();
    unsigned int v22 = [v20 BOOLForKey:v23];
  }

  uint64_t v24 = v48;
  id v25 = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (v25)
  {
    uint64_t v26 = v25;
    id v27 = objc_msgSend(v25, "aa_primaryAppleAccount");

    if (v27 && (v27, ((a2 | v22) & 1) == 0))
    {
      sub_100501A04(v24, (uint64_t)sub_10056E56C, v12);
    }

    else
    {
      v44[1] = v12;
      uint64_t v28 = v49;
      uint64_t v29 = sub_10001DC4C(v24, v49, type metadata accessor for LeashRecord);
      __chkstk_darwin(v29);
      v44[-2] = v30;
      v44[-1] = v28;
      uint64_t v31 = OS_dispatch_queue.sync<A>(execute:)(sub_100571AF0, &v44[-4], (char *)&type metadata for () + 8);
      uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
      os_log_type_t v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "Saved LocalStorageBacked record. Calling completion.",  v34,  2u);
        swift_slowDealloc(v34, -1LL, -1LL);
      }

      uint64_t v35 = v48;
      sub_10001DC4C(v48, (uint64_t)v9, type metadata accessor for LeashRecord);
      swift_storeEnumTagMultiPayload(v9, v45, 0LL);
      sub_100491424((uint64_t)v9, v46, a5);
      uint64_t v36 = sub_100015794((uint64_t)v9, (uint64_t *)&unk_1009AF770);
      if (((v27 != 0LL) & ~v22) != 0)
      {
        uint64_t v41 = type metadata accessor for Transaction(0LL);
        __chkstk_darwin(v41);
        v44[-4] = v47;
        v44[-3] = v35;
        uint64_t v42 = v49;
        v44[-2] = v49;
        static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-saveToCloud",  40LL,  2LL,  sub_100571BC0,  &v44[-6]);
        uint64_t v40 = v42;
      }

      else
      {
        unsigned int v37 = (os_log_s *)Logger.logObject.getter(v36);
        os_log_type_t v38 = static os_log_type_t.info.getter(v37);
        if (os_log_type_enabled(v37, v38))
        {
          uint64_t v39 = swift_slowAlloc(14LL, -1LL);
          *(_DWORD *)uint64_t v39 = 67109376;
          int v50 = v22;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v39 + 4, v39 + 8);
          *(_WORD *)(v39 + 8) = 1024;
          int v50 = v27 != 0LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, v51, v39 + 10, v39 + 14);
          _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d",  (uint8_t *)v39,  0xEu);
          swift_slowDealloc(v39, -1LL, -1LL);
        }

        uint64_t v40 = v49;
      }

      sub_100018C68(v40, type metadata accessor for LeashRecord);
    }

    return swift_release();
  }

  else
  {
    swift_release();
    uint64_t result = swift_bridgeObjectRelease();
    __break(1u);
  }

  return result;
}

uint64_t sub_10055D1A4(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  uint64_t v46 = a3;
  uint64_t v47 = a1;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009AF770);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for LeashRecord(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v42 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = swift_allocObject(&unk_100961A20, 32LL, 7LL);
  *(void *)(v14 + 16) = a4;
  *(void *)(v14 + 24) = a5;
  uint64_t v15 = qword_10099B528;
  swift_retain();
  uint64_t v45 = a5;
  if (v15 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = sub_10000A720(v16, (uint64_t)qword_100A2AC98);
  BOOL v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter(v18);
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v44 = v8;
  if (v20)
  {
    id v21 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)id v21 = 67109120;
    int v48 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v21 + 4, v21 + 8);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Saving record. Disk First? %{BOOL}d", v21, 8u);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  unsigned int v22 = (void *)qword_100A2AF38;
  id v23 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v24 = [v23 isInternalBuild];

  if (v24)
  {
    NSString v25 = String._bridgeToObjectiveC()();
    unsigned int v24 = [v22 BOOLForKey:v25];
  }

  id v26 = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (v26)
  {
    id v27 = v26;
    id v28 = objc_msgSend(v26, "aa_primaryAppleAccount");

    if (v28 && (v28, ((a2 | v24) & 1) == 0))
    {
      sub_100501A04(v47, (uint64_t)sub_100568A68, v14);
    }

    else
    {
      uint64_t v43 = a4;
      uint64_t v29 = sub_10001DC4C(v47, (uint64_t)v13, type metadata accessor for LeashRecord);
      __chkstk_darwin(v29);
      v42[-2] = v30;
      v42[-1] = v13;
      uint64_t v31 = OS_dispatch_queue.sync<A>(execute:)(sub_100571AF0, &v42[-4], (char *)&type metadata for () + 8);
      v42[1] = v14;
      uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
      os_log_type_t v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "Saved LocalStorageBacked record. Calling completion.",  v34,  2u);
        swift_slowDealloc(v34, -1LL, -1LL);
      }

      sub_10001DC4C(v47, (uint64_t)v10, type metadata accessor for LeashRecord);
      swift_storeEnumTagMultiPayload(v10, v44, 0LL);
      sub_100493214((uint64_t)v10, v43, v45);
      uint64_t v35 = sub_100015794((uint64_t)v10, (uint64_t *)&unk_1009AF770);
      if (((v28 != 0LL) & ~v24) != 0)
      {
        uint64_t v39 = type metadata accessor for Transaction(0LL);
        __chkstk_darwin(v39);
        v42[-4] = v46;
        v42[-3] = v40;
        v42[-2] = v13;
        static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-saveToCloud",  40LL,  2LL,  sub_100568A70,  &v42[-6]);
      }

      else
      {
        uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
        os_log_type_t v37 = static os_log_type_t.info.getter(v36);
        if (os_log_type_enabled(v36, v37))
        {
          uint64_t v38 = swift_slowAlloc(14LL, -1LL);
          *(_DWORD *)uint64_t v38 = 67109376;
          int v48 = v24;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v38 + 4, v38 + 8);
          *(_WORD *)(v38 + 8) = 1024;
          int v48 = v28 != 0LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v48, v49, v38 + 10, v38 + 14);
          _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d",  (uint8_t *)v38,  0xEu);
          swift_slowDealloc(v38, -1LL, -1LL);
        }
      }

      sub_100018C68((uint64_t)v13, type metadata accessor for LeashRecord);
    }

    return swift_release();
  }

  else
  {

    uint64_t result = swift_release();
    __break(1u);
  }

  return result;
}

void sub_10055D8C0( uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v72 = a1;
  uint64_t v73 = a5;
  uint64_t v70 = a3;
  uint64_t v71 = a4;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009AF780);
  __chkstk_darwin(v10);
  uint64_t v67 = (uint64_t)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009AF770);
  uint64_t v63 = *(void *)(v12 - 8);
  uint64_t v64 = v12;
  __chkstk_darwin(v12);
  uint64_t v68 = (uint64_t)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for LeashRecord(0LL);
  uint64_t v62 = *(void *)(v14 - 8);
  uint64_t v15 = *(void *)(v62 + 64);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v69 = (char *)&v61 - v18;
  uint64_t v19 = swift_allocObject(&unk_100961020, 32LL, 7LL);
  *(void *)(v19 + 16) = a6;
  *(void *)(v19 + 24) = a7;
  uint64_t v74 = v19;
  uint64_t v66 = a6;
  swift_retain();
  dispatch_group_t v65 = a7;
  uint64_t v20 = static os_log_type_t.default.getter(v65);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v21 = qword_100A2B018;
  uint64_t v22 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v23 = swift_allocObject(v22, 72LL, 7LL);
  uint64_t v24 = v23;
  __int128 v61 = xmmword_1007E67D0;
  *(_OWORD *)(v23 + 16) = xmmword_1007E67D0;
  if ((a2 & 1) != 0) {
    uint64_t v25 = 1702195828LL;
  }
  else {
    uint64_t v25 = 0x65736C6166LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v26 = 0xE400000000000000LL;
  }
  else {
    unint64_t v26 = 0xE500000000000000LL;
  }
  *(void *)(v23 + 56) = &type metadata for String;
  *(void *)(v23 + 64) = sub_1000226F4();
  *(void *)(v24 + 32) = v25;
  *(void *)(v24 + 40) = v26;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Modify record. Disk First? (%@)", 31LL, 2LL, v24, v61);
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    id v27 = objc_autoreleasePoolPush();
    uint64_t v28 = v72;
    sub_100545548(v72, type metadata accessor for LeashRecord);
    uint64_t v30 = v29;
    objc_autoreleasePoolPop(v27);
    v76[0] = v30;
    uint64_t v31 = (uint64_t)v69;
    sub_10001DC4C(v28, (uint64_t)v69, type metadata accessor for LeashRecord);
    v70(v31);
    uint64_t v32 = sub_100545850(v76, v31);
    uint64_t v33 = v73;
    __chkstk_darwin(v32);
    *((void *)&v61 - 2) = v34;
    *((void *)&v61 - 1) = v31;
    OS_dispatch_queue.sync<A>(execute:)(sub_100022820, &v61 - 2, (char *)&type metadata for () + 8);
    sub_1004E696C(8u);
    uint64_t v55 = v68;
    sub_10001DC4C(v31, v68, type metadata accessor for LeashRecord);
    uint64_t v56 = v64;
    swift_storeEnumTagMultiPayload(v55, v64, 0LL);
    uint64_t v57 = swift_projectBox(v66);
    uint64_t v58 = v67;
    sub_10001581C(v55, v67, (uint64_t *)&unk_1009AF770);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v63 + 56))(v58, 0LL, 1LL, v56);
    swift_beginAccess(v57, v75, 1LL, 0LL);
    sub_1000D4D50(v58, v57, (uint64_t *)&unk_1009AF780);
    dispatch_group_leave(v65);
    sub_100015794(v55, (uint64_t *)&unk_1009AF770);
    uint64_t v59 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v59);
    *((void *)&v61 - 4) = v33;
    *((void *)&v61 - 3) = v76;
    *((void *)&v61 - 2) = v28;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-updateToCloud",  42LL,  2LL,  sub_100565A54,  &v61 - 3,  (char *)&type metadata for () + 8);
    sub_100018C68(v31, type metadata accessor for LeashRecord);
    id v60 = v76[0];
    swift_release(v74);
  }

  else
  {
    uint64_t v35 = objc_autoreleasePoolPush();
    uint64_t v36 = v72;
    sub_100545548(v72, type metadata accessor for LeashRecord);
    uint64_t v69 = v37;
    objc_autoreleasePoolPop(v35);
    uint64_t v38 = v73;
    uint64_t v40 = sub_1004F730C(v39);
    sub_10001DC4C(v36, (uint64_t)v17, type metadata accessor for LeashRecord);
    uint64_t v41 = *(unsigned __int8 *)(v62 + 80);
    uint64_t v42 = (v41 + 32) & ~v41;
    uint64_t v68 = v41 | 7;
    uint64_t v43 = swift_allocObject(&unk_100961048, v42 + v15, v41 | 7);
    uint64_t v44 = v71;
    *(void *)(v43 + 16) = v70;
    *(void *)(v43 + 24) = v44;
    sub_10002218C((uint64_t)v17, v43 + v42, type metadata accessor for LeashRecord);
    swift_retain();
    uint64_t v45 = sub_10067F4C4(v69, (void (*)(id *))sub_100565818, v43);
    swift_release(v43);
    swift_release(v40);
    uint64_t v46 = swift_allocObject(&unk_100961070, 32LL, 7LL);
    uint64_t v47 = (void (*)(uint64_t))v74;
    *(void *)(v46 + 16) = sub_100565750;
    *(void *)(v46 + 24) = v47;
    swift_retain();
    uint64_t v48 = Future.addFailure(block:)(sub_1005658A0, v46);
    swift_release(v48);
    swift_release(v46);
    sub_10001DC4C(v36, (uint64_t)v17, type metadata accessor for LeashRecord);
    uint64_t v49 = (v41 + 16) & ~v41;
    unint64_t v50 = (v15 + v49 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v51 = (v50 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v52 = swift_allocObject(&unk_100961098, v51 + 16, v68);
    sub_10002218C((uint64_t)v17, v52 + v49, type metadata accessor for LeashRecord);
    *(void *)(v52 + v50) = v38;
    uint64_t v53 = (void (**)(uint64_t))(v52 + v51);
    *uint64_t v53 = sub_100565750;
    v53[1] = v47;
    swift_retain();
    swift_retain();
    uint64_t v54 = Future.addSuccess(block:)(sub_100565994, v52);
    swift_release(v47);

    swift_release(v45);
    swift_release(v54);
    swift_release(v52);
  }

void sub_10055E06C( uint64_t a1, char a2, void (*a3)(uint64_t), uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v72 = a1;
  uint64_t v73 = a5;
  uint64_t v70 = a3;
  uint64_t v71 = a4;
  uint64_t v10 = sub_100004AEC(&qword_1009AF758);
  __chkstk_darwin(v10);
  uint64_t v67 = (uint64_t)&v61 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009AF730);
  uint64_t v63 = *(void *)(v12 - 8);
  uint64_t v64 = v12;
  __chkstk_darwin(v12);
  uint64_t v68 = (uint64_t)&v61 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for SafeLocation(0LL);
  uint64_t v62 = *(void *)(v14 - 8);
  uint64_t v15 = *(void *)(v62 + 64);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v61 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v69 = (char *)&v61 - v18;
  uint64_t v19 = swift_allocObject(&unk_100960F08, 32LL, 7LL);
  *(void *)(v19 + 16) = a6;
  *(void *)(v19 + 24) = a7;
  uint64_t v74 = v19;
  uint64_t v66 = a6;
  swift_retain();
  dispatch_group_t v65 = a7;
  uint64_t v20 = static os_log_type_t.default.getter(v65);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v21 = qword_100A2B018;
  uint64_t v22 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v23 = swift_allocObject(v22, 72LL, 7LL);
  uint64_t v24 = v23;
  __int128 v61 = xmmword_1007E67D0;
  *(_OWORD *)(v23 + 16) = xmmword_1007E67D0;
  if ((a2 & 1) != 0) {
    uint64_t v25 = 1702195828LL;
  }
  else {
    uint64_t v25 = 0x65736C6166LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v26 = 0xE400000000000000LL;
  }
  else {
    unint64_t v26 = 0xE500000000000000LL;
  }
  *(void *)(v23 + 56) = &type metadata for String;
  *(void *)(v23 + 64) = sub_1000226F4();
  *(void *)(v24 + 32) = v25;
  *(void *)(v24 + 40) = v26;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Modify record. Disk First? (%@)", 31LL, 2LL, v24, v61);
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    id v27 = objc_autoreleasePoolPush();
    uint64_t v28 = v72;
    sub_100545548(v72, type metadata accessor for SafeLocation);
    uint64_t v30 = v29;
    objc_autoreleasePoolPop(v27);
    v76[0] = v30;
    uint64_t v31 = (uint64_t)v69;
    sub_10001DC4C(v28, (uint64_t)v69, type metadata accessor for SafeLocation);
    v70(v31);
    uint64_t v32 = sub_100543CE8(v76, v31);
    uint64_t v33 = v73;
    __chkstk_darwin(v32);
    *((void *)&v61 - 2) = v34;
    *((void *)&v61 - 1) = v31;
    OS_dispatch_queue.sync<A>(execute:)(sub_100022838, &v61 - 2, (char *)&type metadata for () + 8);
    sub_1004E696C(8u);
    uint64_t v55 = v68;
    sub_10001DC4C(v31, v68, type metadata accessor for SafeLocation);
    uint64_t v56 = v64;
    swift_storeEnumTagMultiPayload(v55, v64, 0LL);
    uint64_t v57 = swift_projectBox(v66);
    uint64_t v58 = v67;
    sub_10001581C(v55, v67, (uint64_t *)&unk_1009AF730);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v63 + 56))(v58, 0LL, 1LL, v56);
    swift_beginAccess(v57, v75, 1LL, 0LL);
    sub_1000D4D50(v58, v57, &qword_1009AF758);
    dispatch_group_leave(v65);
    sub_100015794(v55, (uint64_t *)&unk_1009AF730);
    uint64_t v59 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v59);
    *((void *)&v61 - 4) = v33;
    *((void *)&v61 - 3) = v76;
    *((void *)&v61 - 2) = v28;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-updateToCloud",  42LL,  2LL,  sub_1005654B4,  &v61 - 3,  (char *)&type metadata for () + 8);
    sub_100018C68(v31, type metadata accessor for SafeLocation);
    id v60 = v76[0];
    swift_release(v74);
  }

  else
  {
    uint64_t v35 = objc_autoreleasePoolPush();
    uint64_t v36 = v72;
    sub_100545548(v72, type metadata accessor for SafeLocation);
    uint64_t v69 = v37;
    objc_autoreleasePoolPop(v35);
    uint64_t v38 = v73;
    uint64_t v40 = sub_1004F730C(v39);
    sub_10001DC4C(v36, (uint64_t)v17, type metadata accessor for SafeLocation);
    uint64_t v41 = *(unsigned __int8 *)(v62 + 80);
    uint64_t v42 = (v41 + 32) & ~v41;
    uint64_t v68 = v41 | 7;
    uint64_t v43 = swift_allocObject(&unk_100960F30, v42 + v15, v41 | 7);
    uint64_t v44 = v71;
    *(void *)(v43 + 16) = v70;
    *(void *)(v43 + 24) = v44;
    sub_10002218C((uint64_t)v17, v43 + v42, type metadata accessor for SafeLocation);
    swift_retain();
    uint64_t v45 = sub_10067F4C4(v69, (void (*)(id *))sub_100565370, v43);
    swift_release(v43);
    swift_release(v40);
    uint64_t v46 = swift_allocObject(&unk_100960F58, 32LL, 7LL);
    uint64_t v47 = (void (*)(uint64_t))v74;
    *(void *)(v46 + 16) = sub_100565298;
    *(void *)(v46 + 24) = v47;
    swift_retain();
    uint64_t v48 = Future.addFailure(block:)(sub_10056538C, v46);
    swift_release(v48);
    swift_release(v46);
    sub_10001DC4C(v36, (uint64_t)v17, type metadata accessor for SafeLocation);
    uint64_t v49 = (v41 + 16) & ~v41;
    unint64_t v50 = (v15 + v49 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v51 = (v50 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v52 = swift_allocObject(&unk_100960F80, v51 + 16, v68);
    sub_10002218C((uint64_t)v17, v52 + v49, type metadata accessor for SafeLocation);
    *(void *)(v52 + v50) = v38;
    uint64_t v53 = (void (**)(uint64_t))(v52 + v51);
    *uint64_t v53 = sub_100565298;
    v53[1] = v47;
    swift_retain();
    swift_retain();
    uint64_t v54 = Future.addSuccess(block:)(sub_100565490, v52);
    swift_release(v47);

    swift_release(v45);
    swift_release(v54);
    swift_release(v52);
  }

uint64_t sub_10055E818(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v42 = *(void *)(v6 - 8);
  uint64_t v43 = v6;
  __chkstk_darwin(v6);
  uint64_t v41 = (char *)&v37 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v39 = *(void *)(v8 - 8);
  uint64_t v40 = v8;
  __chkstk_darwin(v8);
  uint64_t v38 = (char *)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = swift_allocObject(&unk_100962740, 32LL, 7LL);
  os_log_type_t v37 = a2;
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  swift_retain();
  uint64_t v11 = sub_1004F730C();
  uint64_t v12 = (void *)swift_allocObject(&unk_100962768, 40LL, 7LL);
  v12[2] = sub_10056BD9C;
  v12[3] = v10;
  v12[4] = a1;
  swift_retain_n(v10, 2LL);
  uint64_t v44 = a1;
  swift_retain_n(a1, 2LL);
  uint64_t v13 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100153864);
  int v14 = LOBYTE(aBlock[0]);
  uint64_t v15 = static os_log_type_t.default.getter(v13);
  if (qword_10099B718 != -1) {
    swift_once(&qword_10099B718, sub_100651228);
  }
  uint64_t v16 = qword_100A2B028;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + 16) = xmmword_1007E67D0;
  *(void *)(v18 + 56) = &type metadata for Bool;
  *(void *)(v18 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v18 + 32) = v14;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "localAvailable: %d", (_DWORD)v37);
  uint64_t v19 = swift_bridgeObjectRelease();
  uint64_t v20 = static os_log_type_t.default.getter(v19);
  uint64_t v21 = qword_100A2B028;
  if (v14)
  {
    uint64_t v22 = os_log(_:dso:log:_:_:)( v20,  &_mh_execute_header,  qword_100A2B028,  "Container is already available -- calling completion immediately",  64LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v23 = static os_log_type_t.default.getter(v22);
    if (qword_10099B3E8 != -1) {
      swift_once(&qword_10099B3E8, sub_1003E02E8);
    }
    uint64_t v24 = os_log(_:dso:log:_:_:)( v23,  &_mh_execute_header,  qword_100A2A8F0,  "beaconStore became available",  28LL,  2LL,  _swiftEmptyArrayStorage);
    v37(v24);
    swift_release();
    swift_release();
    swift_release_n(v10, 2LL);
  }

  else
  {
    uint64_t v25 = os_log(_:dso:log:_:_:)( v20,  &_mh_execute_header,  qword_100A2B028,  "Container is not yet available",  30LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v26 = static os_log_type_t.default.getter(v25);
    os_log(_:dso:log:_:_:)( v26,  &_mh_execute_header,  v21,  "Waiting for availableWaitQueue",  30LL,  2LL,  _swiftEmptyArrayStorage);
    os_log_type_t v37 = *(void (**)(uint64_t))(v11 + 64);
    id v27 = (void *)swift_allocObject(&unk_100962790, 40LL, 7LL);
    v27[2] = v11;
    v27[3] = sub_1001FA824;
    v27[4] = v12;
    aBlock[4] = sub_100571BA4;
    void aBlock[5] = v27;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    aBlock[3] = &unk_1009627A8;
    uint64_t v28 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v29 = swift_retain();
    uint64_t v30 = v38;
    static DispatchQoS.unspecified.getter(v29);
    uint64_t v45 = _swiftEmptyArrayStorage;
    uint64_t v31 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v32 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v33 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v34 = v41;
    uint64_t v35 = v43;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v45, v32, v33, v43, v31);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v30, v34, v28);
    _Block_release(v28);
    (*(void (**)(char *, uint64_t))(v42 + 8))(v34, v35);
    (*(void (**)(char *, uint64_t))(v39 + 8))(v30, v40);
    swift_release();
    swift_release();
    swift_release_n(v10, 2LL);
    swift_release();
  }

  return swift_release();
}

uint64_t sub_10055ECB0(uint64_t a1)
{
  return swift_release();
}

uint64_t sub_10055ED88(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  __chkstk_darwin(v4);
  os_log_type_t v37 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v35 = *(void *)(v6 - 8);
  uint64_t v36 = v6;
  __chkstk_darwin(v6);
  uint64_t v34 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_retain();
  uint64_t v8 = sub_1004F730C();
  uint64_t v9 = (void *)swift_allocObject(&unk_100962858, 40LL, 7LL);
  v9[2] = sub_10056C128;
  v9[3] = a2;
  v9[4] = a1;
  swift_retain_n(a2, 2LL);
  swift_retain_n(a1, 2LL);
  uint64_t v10 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100153864);
  int v11 = LOBYTE(aBlock[0]);
  uint64_t v12 = static os_log_type_t.default.getter(v10);
  if (qword_10099B718 != -1) {
    swift_once(&qword_10099B718, sub_100651228);
  }
  uint64_t v13 = qword_100A2B028;
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
  *(_OWORD *)(v15 + 16) = xmmword_1007E67D0;
  *(void *)(v15 + 56) = &type metadata for Bool;
  *(void *)(v15 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v15 + 32) = v11;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "localAvailable: %d", v32);
  uint64_t v16 = swift_bridgeObjectRelease();
  uint64_t v17 = static os_log_type_t.default.getter(v16);
  uint64_t v18 = qword_100A2B028;
  if (v11)
  {
    os_log(_:dso:log:_:_:)( v17,  &_mh_execute_header,  qword_100A2B028,  "Container is already available -- calling completion immediately",  64LL,  2LL,  _swiftEmptyArrayStorage);
    sub_10055ECB0(a2);
    swift_release();
    swift_release();
    swift_release_n(a2, 2LL);
  }

  else
  {
    uint64_t v19 = os_log(_:dso:log:_:_:)( v17,  &_mh_execute_header,  qword_100A2B028,  "Container is not yet available",  30LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v20 = static os_log_type_t.default.getter(v19);
    os_log(_:dso:log:_:_:)( v20,  &_mh_execute_header,  v18,  "Waiting for availableWaitQueue",  30LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v33 = *(void *)(v8 + 64);
    uint64_t v21 = (void *)swift_allocObject(&unk_100962880, 40LL, 7LL);
    v21[2] = v8;
    v21[3] = sub_1001FA824;
    v21[4] = v9;
    aBlock[4] = sub_100571BA4;
    void aBlock[5] = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    aBlock[3] = &unk_100962898;
    uint64_t v22 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v23 = swift_retain();
    uint64_t v24 = v34;
    static DispatchQoS.unspecified.getter(v23);
    uint64_t v40 = _swiftEmptyArrayStorage;
    uint64_t v25 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v27 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v28 = v37;
    uint64_t v29 = v26;
    uint64_t v30 = v39;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v29, v27, v39, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v24, v28, v22);
    _Block_release(v22);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v28, v30);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v24, v36);
    swift_release();
    swift_release();
    swift_release_n(a2, 2LL);
    swift_release();
  }

  return swift_release();
}

uint64_t sub_10055F194(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v36 = *(void *)(v4 - 8);
  uint64_t v37 = v4;
  __chkstk_darwin(v4);
  uint64_t v35 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v33 = *(void *)(v6 - 8);
  uint64_t v34 = v6;
  __chkstk_darwin(v6);
  int v32 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_retain();
  uint64_t v8 = sub_1004F730C();
  uint64_t v9 = (void *)swift_allocObject(&unk_1009630C8, 40LL, 7LL);
  v9[2] = sub_10056E264;
  v9[3] = a2;
  v9[4] = a1;
  swift_retain_n(a2, 2LL);
  uint64_t v38 = a1;
  swift_retain_n(a1, 2LL);
  uint64_t v10 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100153864);
  int v11 = LOBYTE(aBlock[0]);
  uint64_t v12 = static os_log_type_t.default.getter(v10);
  if (qword_10099B718 != -1) {
    swift_once(&qword_10099B718, sub_100651228);
  }
  uint64_t v13 = qword_100A2B028;
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
  *(_OWORD *)(v15 + 16) = xmmword_1007E67D0;
  *(void *)(v15 + 56) = &type metadata for Bool;
  *(void *)(v15 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v15 + 32) = v11;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "localAvailable: %d", v31);
  uint64_t v16 = swift_bridgeObjectRelease();
  uint64_t v17 = static os_log_type_t.default.getter(v16);
  uint64_t v18 = qword_100A2B028;
  if (v11)
  {
    os_log(_:dso:log:_:_:)( v17,  &_mh_execute_header,  qword_100A2B028,  "Container is already available -- calling completion immediately",  64LL,  2LL,  _swiftEmptyArrayStorage);
    type metadata accessor for Transaction(0LL);
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.cloudCoordinatorAvailableTransaction",  66LL,  2LL,  sub_1004BD89C);
    swift_release();
    swift_release();
    swift_release_n(a2, 2LL);
  }

  else
  {
    uint64_t v19 = os_log(_:dso:log:_:_:)( v17,  &_mh_execute_header,  qword_100A2B028,  "Container is not yet available",  30LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v20 = static os_log_type_t.default.getter(v19);
    os_log(_:dso:log:_:_:)( v20,  &_mh_execute_header,  v18,  "Waiting for availableWaitQueue",  30LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v31 = *(void *)(v8 + 64);
    uint64_t v21 = (void *)swift_allocObject(&unk_1009630F0, 40LL, 7LL);
    v21[2] = v8;
    v21[3] = sub_1001FA824;
    v21[4] = v9;
    aBlock[4] = sub_100571BA4;
    void aBlock[5] = v21;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    aBlock[3] = &unk_100963108;
    uint64_t v22 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v23 = swift_retain();
    uint64_t v24 = v32;
    static DispatchQoS.unspecified.getter(v23);
    uint64_t v39 = _swiftEmptyArrayStorage;
    uint64_t v25 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v27 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v28 = v35;
    uint64_t v29 = v37;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v39, v26, v27, v37, v25);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v24, v28, v22);
    _Block_release(v22);
    (*(void (**)(char *, uint64_t))(v36 + 8))(v28, v29);
    (*(void (**)(char *, uint64_t))(v33 + 8))(v24, v34);
    swift_release();
    swift_release();
    swift_release_n(a2, 2LL);
    swift_release();
  }

  return swift_release();
}

void sub_10055F5D4( uint64_t a1, char a2, void (*a3)(uint64_t), void (*a4)(uint64_t), uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v65 = a5;
  uint64_t v62 = a3;
  uint64_t v63 = a4;
  uint64_t v59 = sub_100004AEC(&qword_1009A7DE0);
  __chkstk_darwin(v59);
  id v60 = (char *)&v53 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v56 = *(void *)(v12 - 8);
  uint64_t v13 = *(void *)(v56 + 64);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v61 = (uint64_t)&v53 - v16;
  uint64_t v17 = swift_allocObject(&unk_100963140, 32LL, 7LL);
  uint64_t v57 = a6;
  uint64_t v58 = a7;
  *(void *)(v17 + 16) = a6;
  *(void *)(v17 + 24) = a7;
  uint64_t v64 = v17;
  swift_bridgeObjectRetain(a7);
  uint64_t v19 = static os_log_type_t.default.getter(v18);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v20 = qword_100A2B018;
  uint64_t v55 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v21 = swift_allocObject(v55, 72LL, 7LL);
  uint64_t v22 = (void *)v21;
  __int128 v53 = xmmword_1007E67D0;
  *(_OWORD *)(v21 + 16) = xmmword_1007E67D0;
  if ((a2 & 1) != 0) {
    uint64_t v23 = 1702195828LL;
  }
  else {
    uint64_t v23 = 0x65736C6166LL;
  }
  if ((a2 & 1) != 0) {
    unint64_t v24 = 0xE400000000000000LL;
  }
  else {
    unint64_t v24 = 0xE500000000000000LL;
  }
  *(void *)(v21 + 56) = &type metadata for String;
  unint64_t v54 = sub_1000226F4();
  v22[8] = v54;
  v22[4] = v23;
  v22[5] = v24;
  os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Modify record. Disk First? (%@)", 31LL, 2LL, v22, v53);
  swift_bridgeObjectRelease();
  if ((a2 & 1) != 0)
  {
    uint64_t v25 = objc_autoreleasePoolPush();
    sub_100545548(a1, type metadata accessor for BeaconNamingRecord);
    uint64_t v26 = v65;
    uint64_t v28 = v27;
    objc_autoreleasePoolPop(v25);
    v66[0] = v28;
    uint64_t v29 = v61;
    sub_10001DC4C(a1, v61, type metadata accessor for BeaconNamingRecord);
    uint64_t v30 = (void *)(v29 + *(int *)(v12 + 32));
    uint64_t v31 = v58;
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRelease();
    *uint64_t v30 = v57;
    v30[1] = v31;
    sub_1002B6684(v66, v29);
    uint64_t v32 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
    __chkstk_darwin(v32);
    *((void *)&v53 - 2) = v33;
    *((void *)&v53 - 1) = v29;
    OS_dispatch_queue.sync<A>(execute:)(sub_100571B40, &v53 - 2, (char *)&type metadata for () + 8);
    QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
    sub_1004E696C(8u);
    uint64_t v50 = (uint64_t)v60;
    sub_10001DC4C(v29, (uint64_t)v60, type metadata accessor for BeaconNamingRecord);
    swift_storeEnumTagMultiPayload(v50, v59, 0LL);
    v62(v50);
    sub_100015794(v50, &qword_1009A7DE0);
    uint64_t v51 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v51);
    *((void *)&v53 - 4) = v26;
    *((void *)&v53 - 3) = v66;
    *((void *)&v53 - 2) = a1;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-updateToCloud",  42LL,  2LL,  sub_100571C10,  &v53 - 3);
    sub_100018C68(v29, type metadata accessor for BeaconNamingRecord);
    id v52 = v66[0];
    swift_release();
  }

  else
  {
    uint64_t v34 = objc_autoreleasePoolPush();
    sub_100545548(a1, type metadata accessor for BeaconNamingRecord);
    uint64_t v36 = v35;
    objc_autoreleasePoolPop(v34);
    sub_1004F730C();
    sub_10001DC4C(a1, (uint64_t)v15, type metadata accessor for BeaconNamingRecord);
    uint64_t v37 = a1;
    uint64_t v38 = *(unsigned __int8 *)(v56 + 80);
    uint64_t v39 = (v38 + 32) & ~v38;
    uint64_t v61 = v38 | 7;
    uint64_t v40 = swift_allocObject(&unk_100963168, v39 + v13, v38 | 7);
    uint64_t v41 = v64;
    *(void *)(v40 + 16) = sub_10056E2AC;
    *(void *)(v40 + 24) = v41;
    sub_10002218C((uint64_t)v15, v40 + v39, type metadata accessor for BeaconNamingRecord);
    swift_retain();
    sub_10067F4C4(v36, (void (*)(id *))sub_10056898C, v40);
    swift_release();
    swift_release();
    uint64_t v42 = swift_allocObject(&unk_100963190, 32LL, 7LL);
    uint64_t v43 = v62;
    id v60 = v36;
    uint64_t v44 = v63;
    *(void *)(v42 + 16) = v62;
    *(void *)(v42 + 24) = v44;
    swift_retain();
    Future.addFailure(block:)(sub_100571C68, v42);
    swift_release();
    swift_release();
    sub_10001DC4C(v37, (uint64_t)v15, type metadata accessor for BeaconNamingRecord);
    uint64_t v45 = (v38 + 16) & ~v38;
    unint64_t v46 = (v13 + v45 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v47 = (v46 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v48 = swift_allocObject(&unk_1009631B8, v47 + 16, v61);
    sub_10002218C((uint64_t)v15, v48 + v45, type metadata accessor for BeaconNamingRecord);
    *(void *)(v48 + v46) = v65;
    uint64_t v49 = (void (**)(uint64_t))(v48 + v47);
    *uint64_t v49 = v43;
    v49[1] = v44;
    swift_retain();
    swift_retain();
    Future.addSuccess(block:)(sub_1005689D8, v48);
    swift_release();

    swift_release();
    swift_release();
    swift_release();
  }

uint64_t sub_10055FCD8()
{
  uint64_t v0 = sub_100004AEC(&qword_1009B2BE0);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = &v31[-((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v4);
  uint64_t v6 = &v31[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = &v31[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v9);
  uint64_t v13 = &v31[-v12 - 8];
  if (qword_10099B568 != -1) {
    swift_once(&qword_10099B568, sub_10052D9CC);
  }
  uint64_t v14 = sub_10000A720(v0, (uint64_t)qword_1009B1E98);
  __n128 v15 = swift_beginAccess(v14, v31, 0LL, 0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, __n128))(v1 + 16))(v3, v14, v0, v15);
  ManagedDefault.wrappedValue.getter(v0);
  (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v3, v0);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
  {
    sub_100015794((uint64_t)v6, (uint64_t *)&unk_10099D720);
    return 1LL;
  }

  uint64_t v16 = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v8 + 32))(v13, v6, v7);
  Date.init()(v16);
  if (qword_10099B558 != -1) {
    swift_once(&qword_10099B558, sub_10052D890);
  }
  uint64_t v17 = Duration.milliseconds.getter(qword_1009B1E70);
  double v18 = (double)(v17 / 1000);
  double v19 = Date.timeIntervalSinceReferenceDate.getter(v17);
  double v21 = v19 - Date.timeIntervalSinceReferenceDate.getter(v20);
  if (v21 > v18)
  {
    uint64_t v22 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
    v22(v11, v7);
    v22(v13, v7);
    return 1LL;
  }

  if (qword_10099B530 != -1) {
    swift_once(&qword_10099B530, sub_1004F3B28);
  }
  uint64_t v24 = type metadata accessor for Logger(0LL);
  uint64_t v25 = sub_10000A720(v24, (uint64_t)qword_100A2ACB0);
  uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
  os_log_type_t v27 = static os_log_type_t.default.getter(v26);
  if (os_log_type_enabled(v26, v27))
  {
    uint64_t v28 = swift_slowAlloc(22LL, -1LL);
    *(_DWORD *)uint64_t v28 = 134218240;
    double v30 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31, v28 + 4, v28 + 12);
    *(_WORD *)(v28 + 12) = 2048;
    double v30 = v18;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, v31, v28 + 14, v28 + 22);
    _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "Not publishing metrics: duration %f < threshold %f",  (uint8_t *)v28,  0x16u);
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  uint64_t v29 = *(void (**)(_BYTE *, uint64_t))(v8 + 8);
  v29(v11, v7);
  v29(v13, v7);
  return 0LL;
}

uint64_t sub_100560060(uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v41 = a4;
  uint64_t v42 = a3;
  uint64_t v39 = a2;
  uint64_t v40 = a1;
  uint64_t v6 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v34 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v37 = v12;
  __chkstk_darwin(v12);
  __n128 v15 = (char *)&v34 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(a5 + 24) = 0LL;
  uint64_t v38 = a5 + 16;
  swift_unknownObjectWeakInit(a5 + 16, 0LL);
  uint64_t v34 = sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  unsigned int v35 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v36 = *(uint64_t (**)(char *))(v13 + 104);
  uint64_t v16 = v36(v15);
  static DispatchQoS.unspecified.getter(v16);
  uint64_t v43 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_100007864( (unint64_t *)&qword_10099BAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
  uint64_t v19 = sub_1000372EC( (unint64_t *)&qword_10099BAB0,  (uint64_t *)&unk_1009A0CD0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v18, v19, v6, v17);
  *(void *)(a5 + 32) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000003DLL,  0x8000000100868000LL,  v11,  v8,  v15,  0LL);
  *(void *)(a5 + 56) = dispatch_semaphore_create(0LL);
  uint64_t v20 = ((uint64_t (*)(char *, void, uint64_t))v36)(v15, v35, v37);
  static DispatchQoS.unspecified.getter(v20);
  uint64_t v43 = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v18, v19, v6, v17);
  *(void *)(a5 + 64) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000044LL,  0x8000000100868040LL,  v11,  v8,  v15,  0LL);
  *(_BYTE *)(a5 + 72) = 0;
  *(void *)(a5 + 104) = 0LL;
  *(_BYTE *)(a5 + 112) = 0;
  *(void *)(a5 + 80) = 0LL;
  *(void *)(a5 + 88) = 0LL;
  *(_BYTE *)(a5 + 96) = 0;
  *(void *)(a5 + 136) = 0LL;
  *(void *)(a5 + 144) = 0LL;
  *(void *)(a5 + 128) = 0LL;
  uint64_t v21 = sub_100004AEC(&qword_1009A39D8);
  swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  *(void *)(a5 + 152) = PassthroughSubject.init()();
  *(void *)(a5 + 160) = 0LL;
  uint64_t v22 = sub_100004AEC(&qword_1009B2BA0);
  swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
  *(void *)(a5 + 168) = PassthroughSubject.init()();
  *(void *)(a5 + 176) = _swiftEmptyArrayStorage;
  *(_WORD *)(a5 + 184) = 0;
  *(void *)(a5 + 192) = 0LL;
  *(void *)(a5 + 200) = 0LL;
  *(void *)(a5 + 208) = 0x2D65746176697270LL;
  *(void *)(a5 + 216) = 0xEF7365676E616863LL;
  *(void *)(a5 + 224) = static String._unconditionallyBridgeFromObjectiveC(_:)(APSEnvironmentProduction);
  *(void *)(a5 + 232) = v23;
  *(_OWORD *)(a5 + 240) = 0u;
  *(_OWORD *)(a5 + 256) = 0u;
  dispatch_semaphore_t v24 = dispatch_semaphore_create(1LL);
  *(void *)(a5 + 280) = v24;
  uint64_t v25 = static os_log_type_t.default.getter(v24);
  if (qword_10099B710 != -1) {
    swift_once(&qword_10099B710, sub_1006511CC);
  }
  os_log(_:dso:log:_:_:)( v25,  &_mh_execute_header,  qword_100A2B020,  "CloudKitCoordinator init",  24LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v26 = v39;
  *(void *)(a5 + 272) = v40;
  *(void *)(a5 + 24) = &off_1009390B0;
  swift_unknownObjectWeakAssign(v38, v26);
  os_log_type_t v27 = v41;
  *(void *)(a5 + 48) = v41;
  uint64_t updated = type metadata accessor for CloudKitUpdateEligibility();
  swift_allocObject(updated, 65LL, 7LL);
  swift_retain();
  id v29 = v27;
  uint64_t v30 = swift_retain();
  *(void *)(a5 + 120) = sub_1001710A4(v30);
  uint64_t v31 = *(void **)(a5 + 32);
  uint64_t v32 = type metadata accessor for QueueSynchronizer(0LL);
  swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  *(void *)(a5 + 40) = QueueSynchronizer.init(queue:)(v31);
  sub_1006756EC();
  return a5;
}

void sub_1005604A0(uint64_t a1, int a2, uint64_t a3, void *a4, uint64_t a5)
{
  uint64_t v45 = a3;
  uint64_t v46 = a1;
  uint64_t v8 = sub_100004AEC(&qword_1009A7E08);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v41 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for KeyAlignmentRecord(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = swift_allocObject(&unk_100961D18, 32LL, 7LL);
  *(void *)(v14 + 16) = a4;
  *(void *)(v14 + 24) = a5;
  uint64_t v15 = qword_10099B528;
  uint64_t v44 = a4;
  swift_retain();
  if (v15 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  uint64_t v17 = sub_10000A720(v16, (uint64_t)qword_100A2AC98);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter(v18);
  BOOL v20 = os_log_type_enabled(v18, v19);
  uint64_t v43 = v8;
  if (v20)
  {
    uint64_t v21 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v21 = 67109120;
    int v47 = a2 & 1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v21 + 4, v21 + 8);
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "Saving record. Disk First? %{BOOL}d", v21, 8u);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  uint64_t v22 = (void *)qword_100A2AF38;
  id v23 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v24 = [v23 isInternalBuild];

  if (v24)
  {
    NSString v25 = String._bridgeToObjectiveC()();
    unsigned int v24 = [v22 BOOLForKey:v25];
  }

  id v26 = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (v26)
  {
    os_log_type_t v27 = v26;
    id v28 = objc_msgSend(v26, "aa_primaryAppleAccount");

    if (v28 && (v28, ((a2 | v24) & 1) == 0))
    {
      sub_100501BE0(v46, (uint64_t)sub_100569220, v14);
    }

    else
    {
      uint64_t v42 = a5;
      uint64_t v29 = sub_10001DC4C(v46, (uint64_t)v13, type metadata accessor for KeyAlignmentRecord);
      __chkstk_darwin(v29);
      v41[-2] = v30;
      v41[-1] = v13;
      uint64_t v31 = OS_dispatch_queue.sync<A>(execute:)(sub_100571B68, &v41[-4], (char *)&type metadata for () + 8);
      v41[1] = v14;
      uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
      os_log_type_t v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "Saved LocalStorageBacked record. Calling completion.",  v34,  2u);
        swift_slowDealloc(v34, -1LL, -1LL);
      }

      sub_10001DC4C(v46, (uint64_t)v10, type metadata accessor for KeyAlignmentRecord);
      swift_storeEnumTagMultiPayload(v10, v43, 0LL);
      sub_100584988((uint64_t)v10, v44, v42);
      uint64_t v35 = sub_100015794((uint64_t)v10, &qword_1009A7E08);
      if (((v28 != 0LL) & ~v24) != 0)
      {
        uint64_t v39 = type metadata accessor for Transaction(0LL);
        __chkstk_darwin(v39);
        v41[-4] = v45;
        v41[-3] = v40;
        v41[-2] = v13;
        static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-saveToCloud",  40LL,  2LL,  sub_100569228,  &v41[-6]);
      }

      else
      {
        uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
        os_log_type_t v37 = static os_log_type_t.info.getter(v36);
        if (os_log_type_enabled(v36, v37))
        {
          uint64_t v38 = swift_slowAlloc(14LL, -1LL);
          *(_DWORD *)uint64_t v38 = 67109376;
          int v47 = v24;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v38 + 4, v38 + 8);
          *(_WORD *)(v38 + 8) = 1024;
          int v47 = v28 != 0LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v47, v48, v38 + 10, v38 + 14);
          _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "Skipping save to cloud. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d",  (uint8_t *)v38,  0xEu);
          swift_slowDealloc(v38, -1LL, -1LL);
        }
      }

      sub_100018C68((uint64_t)v13, type metadata accessor for KeyAlignmentRecord);
    }

    swift_release();
  }

  else
  {
    swift_release();

    __break(1u);
  }

uint64_t sub_100560BBC(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v126 = a2;
  uint64_t v125 = type metadata accessor for BeaconStoreFileRecord(0LL);
  unint64_t v112 = *(void **)(v125 - 8);
  __chkstk_darwin(v125);
  uint64_t v120 = (char *)v110 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v124 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)v110 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v114 = (char *)v110 - v12;
  uint64_t v128 = type metadata accessor for UUID(0LL);
  uint64_t v130 = *(void (***)(void, void, void))(v128 - 8);
  uint64_t v13 = __chkstk_darwin(v128);
  v110[1] = (char *)v110 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)v110 - v16;
  __chkstk_darwin(v15);
  uint64_t v113 = (char *)v110 - v18;
  uint64_t v19 = sub_100004AEC(&qword_1009A2460);
  __chkstk_darwin(v19);
  uint64_t v111 = (char *)v110 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v118 = *(void *)(v21 - 8);
  uint64_t v22 = *(void *)(v118 + 64);
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v119 = (uint64_t)v110 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v23);
  uint64_t v127 = (uint64_t)v110 - v24;
  uint64_t v25 = swift_allocObject(&unk_100960DA0, 32LL, 7LL);
  uint64_t v121 = a3;
  uint64_t v122 = a4;
  *(void *)(v25 + 16) = a3;
  *(void *)(v25 + 24) = a4;
  uint64_t v123 = v25;
  uint64_t v26 = swift_retain();
  uint64_t v27 = static os_log_type_t.default.getter(v26);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v28 = qword_100A2B018;
  uint64_t v116 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v29 = swift_allocObject(v116, 72LL, 7LL);
  __int128 v115 = xmmword_1007E67D0;
  *(_OWORD *)(v29 + 16) = xmmword_1007E67D0;
  uint64_t v131 = a1;
  uint64_t v30 = a1;
  uint64_t v31 = v127;
  sub_10001DC4C(v30, v127, type metadata accessor for OwnedBeaconGroup);
  uint64_t v129 = v21;
  uint64_t v32 = String.init<A>(describing:)(v31, v21);
  uint64_t v34 = v33;
  *(void *)(v29 + 56) = &type metadata for String;
  unint64_t v117 = sub_1000226F4();
  *(void *)(v29 + 64) = v117;
  *(void *)(v29 + 32) = v32;
  *(void *)(v29 + 40) = v34;
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "Attempting to remove: %@", 24LL, 2LL, v29);
  swift_bridgeObjectRelease();
  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  uint64_t v35 = (void *)qword_100A2AF38;
  id v36 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v37 = [v36 isInternalBuild];

  if (v37)
  {
    NSString v38 = String._bridgeToObjectiveC()();
    unsigned int v39 = [v35 BOOLForKey:v38];
  }

  else
  {
    unsigned int v39 = 0;
  }

  uint64_t v40 = v131;
  uint64_t v41 = v129;
  id v42 = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (v42)
  {
    uint64_t v43 = v42;
    id v44 = objc_msgSend(v42, "aa_primaryAppleAccount");

    if (v44 && (v44, (v39 & 1) == 0))
    {
      uint64_t v122 = v22;
      uint64_t v59 = sub_100022898(0LL, &qword_10099E510, &OBJC_CLASS___CKRecordID_ptr);
      uint64_t v60 = v40 + *(int *)(v41 + 24);
      uint64_t v61 = UUID.uuidString.getter(v59);
      uint64_t v63 = v62;
      uint64_t v64 = v126;
      id v65 = *(id *)(v126 + 128);
      v66._countAndFlagsBits = v61;
      v66._object = v63;
      Class isa = CKRecordID.init(recordName:zoneID:)(v66, (CKRecordZoneID)v65).super.isa;
      uint64_t v68 = sub_1004F730C(isa);
      uint64_t v129 = (uint64_t)isa;
      uint64_t v121 = (void (*)(void))sub_10067DD74(isa);
      swift_release(v68);
      uint64_t v120 = (char *)swift_allocBox(v19);
      uint64_t v69 = (void *)v112[7];
      uint64_t v119 = v70;
      uint64_t v71 = v125;
      unint64_t v112 = v69;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v69)(v70, 1LL, 1LL, v125);
      uint64_t v72 = *(void *)(v64 + 136);
      uint64_t v73 = v113;
      uint64_t v74 = v128;
      ((void (**)(char *, uint64_t, uint64_t))v130)[2](v113, v60, v128);
      if (qword_10099B1B8 != -1) {
        swift_once(&qword_10099B1B8, sub_1001CFC94);
      }
      uint64_t v75 = sub_10000A720(v8, (uint64_t)qword_100A2A358);
      uint64_t v76 = v124;
      uint64_t v77 = v114;
      uint64_t v78 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v124 + 16))(v114, v75, v8);
      __chkstk_darwin(v78);
      v110[-4] = v72;
      v110[-3] = v73;
      v110[-2] = v77;
      uint64_t v79 = (uint64_t)v111;
      OS_dispatch_queue.sync<A>(execute:)(sub_100154730, &v110[-6], v71);
      (*(void (**)(char *, uint64_t))(v76 + 8))(v77, v8);
      ((void (*)(char *, uint64_t))v130[1])(v73, v74);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v112)(v79, 0LL, 1LL, v71);
      uint64_t v82 = sub_1000D4D50(v79, v119, &qword_1009A2460);
      uint64_t v83 = v116;
      unint64_t v84 = v117;
      uint64_t v85 = (void *)v129;
      uint64_t v86 = static os_log_type_t.default.getter(v82);
      uint64_t v87 = qword_100A2B018;
      uint64_t v88 = swift_allocObject(v83, 72LL, 7LL);
      *(_OWORD *)(v88 + 16) = v115;
      id v89 = v85;
      uint64_t v130 = (void (**)(void, void, void))v89;
      id v90 = [v89 description];
      uint64_t v91 = static String._unconditionallyBridgeFromObjectiveC(_:)(v90);
      uint64_t v93 = v92;

      *(void *)(v88 + 56) = &type metadata for String;
      *(void *)(v88 + 64) = v84;
      *(void *)(v88 + 32) = v91;
      *(void *)(v88 + 40) = v93;
      os_log(_:dso:log:_:_:)(v86, &_mh_execute_header, v87, "cloudBacked item deleted from disk: %@", 38LL, 2LL, v88);
      swift_bridgeObjectRelease();
      uint64_t v94 = v127;
      sub_10001DC4C(v131, v127, type metadata accessor for OwnedBeaconGroup);
      uint64_t v95 = *(unsigned __int8 *)(v118 + 80);
      uint64_t v96 = (v95 + 32) & ~v95;
      uint64_t v129 = v95 | 7;
      unint64_t v97 = (v122 + v96 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v98 = swift_allocObject(&unk_100960DC8, v97 + 16, v95 | 7);
      uint64_t v99 = v120;
      uint64_t v100 = v126;
      *(void *)(v98 + 16) = v120;
      *(void *)(v98 + 24) = v100;
      sub_10002218C(v94, v98 + v96, type metadata accessor for OwnedBeaconGroup);
      uint64_t v101 = (uint64_t (**)(uint64_t))(v98 + v97);
      uint64_t v102 = (uint64_t (*)(uint64_t))v123;
      *uint64_t v101 = sub_1005717C4;
      v101[1] = v102;
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v103 = v121;
      uint64_t v104 = Future.addSuccess(block:)(sub_10056500C, v98);
      swift_release(v104);
      swift_release(v98);
      sub_10001DC4C(v131, v94, type metadata accessor for OwnedBeaconGroup);
      uint64_t v105 = swift_allocObject(&unk_100960DF0, v97 + 16, v129);
      *(void *)(v105 + 16) = v99;
      *(void *)(v105 + 24) = v100;
      sub_10002218C(v94, v105 + v96, type metadata accessor for OwnedBeaconGroup);
      uint64_t v106 = (uint64_t (**)(uint64_t))(v105 + v97);
      *uint64_t v106 = sub_1005717C4;
      v106[1] = v102;
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v107 = Future.addFailure(block:)(sub_100565024, v105);
      swift_release(v102);
      swift_release(v99);
      swift_release(v105);

      swift_release(v103);
      uint64_t v108 = v107;
    }

    else
    {
      if (qword_10099B528 != -1) {
        swift_once(&qword_10099B528, sub_1004F3B00);
      }
      uint64_t v45 = type metadata accessor for Logger(0LL);
      uint64_t v127 = sub_10000A720(v45, (uint64_t)qword_100A2AC98);
      uint64_t v46 = (os_log_s *)Logger.logObject.getter(v127);
      os_log_type_t v47 = static os_log_type_t.info.getter(v46);
      uint64_t v48 = v8;
      if (os_log_type_enabled(v46, v47))
      {
        BOOL v49 = v44 != 0LL;
        uint64_t v50 = swift_slowAlloc(14LL, -1LL);
        *(_DWORD *)uint64_t v50 = 67109376;
        unsigned int v132 = v39;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, v133, v50 + 4, v50 + 8);
        *(_WORD *)(v50 + 8) = 1024;
        unsigned int v132 = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, v133, v50 + 10, v50 + 14);
        _os_log_impl( (void *)&_mh_execute_header,  v46,  v47,  "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d",  (uint8_t *)v50,  0xEu);
        swift_slowDealloc(v50, -1LL, -1LL);
      }

      uint64_t v51 = v126;
      uint64_t v52 = *(void *)(v126 + 136);
      ((void (**)(char *, uint64_t, uint64_t))v130)[2](v17, v131 + *(int *)(v129 + 24), v128);
      __int128 v53 = v17;
      if (qword_10099B1B8 != -1) {
        swift_once(&qword_10099B1B8, sub_1001CFC94);
      }
      uint64_t v54 = sub_10000A720(v48, (uint64_t)qword_100A2A358);
      uint64_t v55 = v48;
      uint64_t v56 = v124;
      uint64_t v57 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v124 + 16))(v11, v54, v55);
      __chkstk_darwin(v57);
      v110[-4] = v52;
      v110[-3] = v17;
      v110[-2] = v11;
      uint64_t v58 = (uint64_t)v120;
      OS_dispatch_queue.sync<A>(execute:)(sub_100154730, &v110[-6], v125);
      (*(void (**)(char *, uint64_t))(v56 + 8))(v11, v55);
      ((void (*)(char *, uint64_t))v130[1])(v53, v128);
      sub_10057BA24(v58);
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
      sub_1004E696C(9u);
      uint64_t v80 = *(void (**)(uint64_t))(v51 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
      if (v80)
      {
        uint64_t v81 = *(void *)(v51 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged + 8);
        swift_retain();
        v80(v51);
        sub_10002214C((uint64_t)v80, v81);
      }

      v121(1LL);
      sub_100018C68(v58, type metadata accessor for BeaconStoreFileRecord);
      uint64_t v108 = v123;
    }

    return swift_release(v108);
  }

  else
  {
    uint64_t result = swift_release(v122);
    __break(1u);
  }

  return result;
}

uint64_t sub_100561A24(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v133 = a2;
  uint64_t v132 = type metadata accessor for BeaconStoreFileRecord(0LL);
  uint64_t v114 = *(void **)(v132 - 8);
  __chkstk_darwin(v132);
  uint64_t v127 = (char *)v113 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v131 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v131 - 8);
  uint64_t v9 = __chkstk_darwin(v131);
  uint64_t v126 = (char *)v113 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  unint64_t v117 = (char *)v113 - v11;
  id v134 = (void *)type metadata accessor for UUID(0LL);
  uint64_t v12 = *(v134 - 1);
  uint64_t v13 = __chkstk_darwin(v134);
  v113[1] = (char *)v113 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v125 = (char *)v113 - v16;
  __chkstk_darwin(v15);
  uint64_t v116 = (char *)v113 - v17;
  uint64_t v18 = sub_100004AEC(&qword_1009A2460);
  __chkstk_darwin(v18);
  __int128 v115 = (char *)v113 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v121 = *(void *)(v20 - 8);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v124 = (uint64_t)v113 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v122 = v22;
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)v113 - v23;
  uint64_t v25 = swift_allocObject(&unk_100960D28, 32LL, 7LL);
  uint64_t v128 = a3;
  *(void *)(v25 + 16) = a3;
  *(void *)(v25 + 24) = a4;
  uint64_t v130 = v25;
  uint64_t v26 = swift_retain();
  uint64_t v27 = static os_log_type_t.default.getter(v26);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v28 = qword_100A2B018;
  uint64_t v119 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v29 = swift_allocObject(v119, 72LL, 7LL);
  __int128 v118 = xmmword_1007E67D0;
  *(_OWORD *)(v29 + 16) = xmmword_1007E67D0;
  uint64_t v135 = a1;
  sub_10001DC4C(a1, (uint64_t)v24, type metadata accessor for KeyAlignmentRecord);
  uint64_t v123 = v24;
  uint64_t v30 = String.init<A>(describing:)(v24, v20);
  uint64_t v32 = v31;
  *(void *)(v29 + 56) = &type metadata for String;
  unint64_t v120 = sub_1000226F4();
  *(void *)(v29 + 64) = v120;
  *(void *)(v29 + 32) = v30;
  *(void *)(v29 + 40) = v32;
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "Attempting to remove: %@", 24LL, 2LL, v29);
  swift_bridgeObjectRelease();
  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  uint64_t v33 = (void *)qword_100A2AF38;
  id v34 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v35 = [v34 isInternalBuild];

  if (v35)
  {
    NSString v36 = String._bridgeToObjectiveC()();
    unsigned int v35 = [v33 BOOLForKey:v36];
  }

  id v37 = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (v37)
  {
    NSString v38 = v37;
    id v39 = objc_msgSend(v37, "aa_primaryAppleAccount");

    uint64_t v129 = v8;
    if (v39 && (v39, (v35 & 1) == 0))
    {
      uint64_t v56 = sub_100022898(0LL, &qword_10099E510, &OBJC_CLASS___CKRecordID_ptr);
      uint64_t v57 = v135 + *(int *)(v20 + 20);
      uint64_t v58 = UUID.uuidString.getter(v56);
      uint64_t v60 = v59;
      uint64_t v61 = v133;
      id v62 = *(id *)(v133 + 128);
      v63._countAndFlagsBits = v58;
      v63._object = v60;
      Class isa = CKRecordID.init(recordName:zoneID:)(v63, (CKRecordZoneID)v62).super.isa;
      uint64_t v65 = sub_1004F730C(isa);
      uint64_t v127 = (char *)isa;
      uint64_t v126 = (char *)sub_10067DD74(isa);
      swift_release(v65);
      uint64_t v125 = (char *)swift_allocBox(v18);
      Swift::String v66 = (void *)v114[7];
      uint64_t v124 = v67;
      uint64_t v68 = v12;
      uint64_t v69 = v132;
      uint64_t v114 = v66;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v66)(v67, 1LL, 1LL, v132);
      uint64_t v70 = *(void *)(v61 + 136);
      uint64_t v128 = v68;
      uint64_t v71 = v116;
      uint64_t v72 = v57;
      uint64_t v73 = v134;
      (*(void (**)(char *, uint64_t, void *))(v68 + 16))(v116, v72, v134);
      uint64_t v74 = objc_autoreleasePoolPush();
      if (qword_10099B070 != -1) {
        swift_once(&qword_10099B070, sub_100039E68);
      }
      uint64_t v75 = v131;
      uint64_t v76 = sub_10000A720(v131, (uint64_t)qword_100A29EF0);
      uint64_t v77 = UUID.uuidString.getter(v76);
      uint64_t v78 = v117;
      URL.appendingPathComponent(_:)(v77, v79);
      swift_bridgeObjectRelease();
      objc_autoreleasePoolPop(v74);
      __chkstk_darwin(v80);
      v113[-4] = v70;
      v113[-3] = v71;
      v113[-2] = v78;
      uint64_t v81 = (uint64_t)v115;
      OS_dispatch_queue.sync<A>(execute:)(sub_100154730, &v113[-6], v69);
      (*(void (**)(char *, uint64_t))(v129 + 8))(v78, v75);
      (*(void (**)(char *, void *))(v128 + 8))(v71, v73);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v114)(v81, 0LL, 1LL, v69);
      uint64_t v85 = sub_1000D4D50(v81, v124, &qword_1009A2460);
      uint64_t v87 = v119;
      unint64_t v86 = v120;
      uint64_t v88 = v127;
      uint64_t v89 = static os_log_type_t.default.getter(v85);
      uint64_t v90 = qword_100A2B018;
      uint64_t v91 = swift_allocObject(v87, 72LL, 7LL);
      *(_OWORD *)(v91 + 16) = v118;
      uint64_t v92 = v88;
      id v134 = v92;
      id v93 = [v92 description];
      uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(v93);
      uint64_t v96 = v95;

      *(void *)(v91 + 56) = &type metadata for String;
      *(void *)(v91 + 64) = v86;
      *(void *)(v91 + 32) = v94;
      *(void *)(v91 + 40) = v96;
      os_log(_:dso:log:_:_:)(v89, &_mh_execute_header, v90, "cloudBacked item deleted from disk: %@", 38LL, 2LL, v91);
      swift_bridgeObjectRelease();
      uint64_t v97 = (uint64_t)v123;
      sub_10001DC4C(v135, (uint64_t)v123, type metadata accessor for KeyAlignmentRecord);
      uint64_t v98 = *(unsigned __int8 *)(v121 + 80);
      uint64_t v99 = (v98 + 32) & ~v98;
      uint64_t v132 = v98 | 7;
      unint64_t v100 = (v122 + v99 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v101 = swift_allocObject(&unk_100960D50, v100 + 16, v98 | 7);
      uint64_t v102 = v125;
      uint64_t v103 = v133;
      *(void *)(v101 + 16) = v125;
      *(void *)(v101 + 24) = v103;
      sub_10002218C(v97, v101 + v99, type metadata accessor for KeyAlignmentRecord);
      uint64_t v104 = (uint64_t (**)(uint64_t))(v101 + v100);
      uint64_t v105 = (uint64_t (*)(uint64_t))v130;
      char *v104 = sub_1005717C4;
      v104[1] = v105;
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v106 = v126;
      uint64_t v107 = Future.addSuccess(block:)(sub_100564EE0, v101);
      swift_release(v107);
      swift_release(v101);
      sub_10001DC4C(v135, v97, type metadata accessor for KeyAlignmentRecord);
      uint64_t v108 = swift_allocObject(&unk_100960D78, v100 + 16, v132);
      *(void *)(v108 + 16) = v102;
      *(void *)(v108 + 24) = v103;
      sub_10002218C(v97, v108 + v99, type metadata accessor for KeyAlignmentRecord);
      __int128 v109 = (uint64_t (**)(uint64_t))(v108 + v100);
      char *v109 = sub_1005717C4;
      v109[1] = v105;
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v110 = Future.addFailure(block:)(sub_100564FF4, v108);
      swift_release(v105);
      swift_release(v102);
      swift_release(v108);

      swift_release(v106);
      uint64_t v111 = v110;
    }

    else
    {
      if (qword_10099B528 != -1) {
        swift_once(&qword_10099B528, sub_1004F3B00);
      }
      uint64_t v123 = (char *)a4;
      uint64_t v40 = type metadata accessor for Logger(0LL);
      uint64_t v122 = sub_10000A720(v40, (uint64_t)qword_100A2AC98);
      uint64_t v41 = (os_log_s *)Logger.logObject.getter(v122);
      os_log_type_t v42 = static os_log_type_t.info.getter(v41);
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = swift_slowAlloc(14LL, -1LL);
        *(_DWORD *)uint64_t v43 = 67109376;
        BOOL v136 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, v137, v43 + 4, v43 + 8);
        *(_WORD *)(v43 + 8) = 1024;
        BOOL v136 = v39 != 0LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, v137, v43 + 10, v43 + 14);
        _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d",  (uint8_t *)v43,  0xEu);
        swift_slowDealloc(v43, -1LL, -1LL);
      }

      uint64_t v44 = *(void *)(v133 + 136);
      uint64_t v45 = v135 + *(int *)(v20 + 20);
      uint64_t v46 = v12;
      os_log_type_t v47 = v125;
      uint64_t v121 = *(void *)(v12 + 16);
      ((void (*)(char *, uint64_t, void *))v121)(v125, v45, v134);
      uint64_t v48 = objc_autoreleasePoolPush();
      if (qword_10099B070 != -1) {
        swift_once(&qword_10099B070, sub_100039E68);
      }
      uint64_t v49 = v131;
      uint64_t v50 = sub_10000A720(v131, (uint64_t)qword_100A29EF0);
      uint64_t v51 = UUID.uuidString.getter(v50);
      uint64_t v52 = v126;
      URL.appendingPathComponent(_:)(v51, v53);
      swift_bridgeObjectRelease();
      objc_autoreleasePoolPop(v48);
      __chkstk_darwin(v54);
      v113[-4] = v44;
      v113[-3] = v47;
      v113[-2] = v52;
      uint64_t v55 = (uint64_t)v127;
      OS_dispatch_queue.sync<A>(execute:)(sub_100154730, &v113[-6], v132);
      (*(void (**)(char *, uint64_t))(v129 + 8))(v52, v49);
      (*(void (**)(char *, void *))(v46 + 8))(v47, v134);
      sub_10057BA24(v55);
      uint64_t v82 = v133;
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
      sub_1004E696C(9u);
      uint64_t v83 = *(void (**)(uint64_t))(v82 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
      if (v83)
      {
        uint64_t v84 = *(void *)(v82 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged + 8);
        swift_retain();
        v83(v82);
        sub_10002214C((uint64_t)v83, v84);
      }

      ((void (*)(uint64_t))v128)(1LL);
      sub_100018C68(v55, type metadata accessor for BeaconStoreFileRecord);
      uint64_t v111 = v130;
    }

    return swift_release(v111);
  }

  else
  {
    uint64_t result = swift_release(a4);
    __break(1u);
  }

  return result;
}

uint64_t sub_1005628E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v133 = a2;
  uint64_t v132 = type metadata accessor for BeaconStoreFileRecord(0LL);
  uint64_t v114 = *(void **)(v132 - 8);
  __chkstk_darwin(v132);
  uint64_t v127 = (char *)v113 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v131 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v131 - 8);
  uint64_t v9 = __chkstk_darwin(v131);
  uint64_t v126 = (char *)v113 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  unint64_t v117 = (char *)v113 - v11;
  id v134 = (void *)type metadata accessor for UUID(0LL);
  uint64_t v12 = *(v134 - 1);
  uint64_t v13 = __chkstk_darwin(v134);
  v113[1] = (char *)v113 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v125 = (char *)v113 - v16;
  __chkstk_darwin(v15);
  uint64_t v116 = (char *)v113 - v17;
  uint64_t v18 = sub_100004AEC(&qword_1009A2460);
  __chkstk_darwin(v18);
  __int128 v115 = (char *)v113 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v121 = *(void *)(v20 - 8);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v124 = (uint64_t)v113 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v122 = v22;
  __chkstk_darwin(v21);
  uint64_t v24 = (char *)v113 - v23;
  uint64_t v25 = swift_allocObject(&unk_100960C38, 32LL, 7LL);
  uint64_t v128 = a3;
  *(void *)(v25 + 16) = a3;
  *(void *)(v25 + 24) = a4;
  uint64_t v130 = v25;
  uint64_t v26 = swift_retain();
  uint64_t v27 = static os_log_type_t.default.getter(v26);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v28 = qword_100A2B018;
  uint64_t v119 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v29 = swift_allocObject(v119, 72LL, 7LL);
  __int128 v118 = xmmword_1007E67D0;
  *(_OWORD *)(v29 + 16) = xmmword_1007E67D0;
  uint64_t v135 = a1;
  sub_10001DC4C(a1, (uint64_t)v24, type metadata accessor for BeaconEstimatedLocation);
  uint64_t v123 = v24;
  uint64_t v30 = String.init<A>(describing:)(v24, v20);
  uint64_t v32 = v31;
  *(void *)(v29 + 56) = &type metadata for String;
  unint64_t v120 = sub_1000226F4();
  *(void *)(v29 + 64) = v120;
  *(void *)(v29 + 32) = v30;
  *(void *)(v29 + 40) = v32;
  os_log(_:dso:log:_:_:)(v27, &_mh_execute_header, v28, "Attempting to remove: %@", 24LL, 2LL, v29);
  swift_bridgeObjectRelease();
  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  uint64_t v33 = (void *)qword_100A2AF38;
  id v34 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v35 = [v34 isInternalBuild];

  if (v35)
  {
    NSString v36 = String._bridgeToObjectiveC()();
    unsigned int v35 = [v33 BOOLForKey:v36];
  }

  id v37 = [(id)objc_opt_self(ACAccountStore) defaultStore];
  if (v37)
  {
    NSString v38 = v37;
    id v39 = objc_msgSend(v37, "aa_primaryAppleAccount");

    uint64_t v129 = v8;
    if (v39 && (v39, (v35 & 1) == 0))
    {
      uint64_t v56 = sub_100022898(0LL, &qword_10099E510, &OBJC_CLASS___CKRecordID_ptr);
      uint64_t v57 = v135 + *(int *)(v20 + 20);
      uint64_t v58 = UUID.uuidString.getter(v56);
      uint64_t v60 = v59;
      uint64_t v61 = v133;
      id v62 = *(id *)(v133 + 128);
      v63._countAndFlagsBits = v58;
      v63._object = v60;
      Class isa = CKRecordID.init(recordName:zoneID:)(v63, (CKRecordZoneID)v62).super.isa;
      uint64_t v65 = sub_1004F730C(isa);
      uint64_t v127 = (char *)isa;
      uint64_t v126 = (char *)sub_10067DD74(isa);
      swift_release(v65);
      uint64_t v125 = (char *)swift_allocBox(v18);
      Swift::String v66 = (void *)v114[7];
      uint64_t v124 = v67;
      uint64_t v68 = v12;
      uint64_t v69 = v132;
      uint64_t v114 = v66;
      ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v66)(v67, 1LL, 1LL, v132);
      uint64_t v70 = *(void *)(v61 + 136);
      uint64_t v128 = v68;
      uint64_t v71 = v116;
      uint64_t v72 = v57;
      uint64_t v73 = v134;
      (*(void (**)(char *, uint64_t, void *))(v68 + 16))(v116, v72, v134);
      uint64_t v74 = objc_autoreleasePoolPush();
      if (qword_10099B5C8 != -1) {
        swift_once(&qword_10099B5C8, sub_1005BD7E8);
      }
      uint64_t v75 = v131;
      uint64_t v76 = sub_10000A720(v131, (uint64_t)qword_100A2ADC0);
      uint64_t v77 = UUID.uuidString.getter(v76);
      uint64_t v78 = v117;
      URL.appendingPathComponent(_:)(v77, v79);
      swift_bridgeObjectRelease();
      objc_autoreleasePoolPop(v74);
      __chkstk_darwin(v80);
      v113[-4] = v70;
      v113[-3] = v71;
      v113[-2] = v78;
      uint64_t v81 = (uint64_t)v115;
      OS_dispatch_queue.sync<A>(execute:)(sub_100154730, &v113[-6], v69);
      (*(void (**)(char *, uint64_t))(v129 + 8))(v78, v75);
      (*(void (**)(char *, void *))(v128 + 8))(v71, v73);
      ((void (*)(uint64_t, void, uint64_t, uint64_t))v114)(v81, 0LL, 1LL, v69);
      uint64_t v85 = sub_1000D4D50(v81, v124, &qword_1009A2460);
      uint64_t v87 = v119;
      unint64_t v86 = v120;
      uint64_t v88 = v127;
      uint64_t v89 = static os_log_type_t.default.getter(v85);
      uint64_t v90 = qword_100A2B018;
      uint64_t v91 = swift_allocObject(v87, 72LL, 7LL);
      *(_OWORD *)(v91 + 16) = v118;
      uint64_t v92 = v88;
      id v134 = v92;
      id v93 = [v92 description];
      uint64_t v94 = static String._unconditionallyBridgeFromObjectiveC(_:)(v93);
      uint64_t v96 = v95;

      *(void *)(v91 + 56) = &type metadata for String;
      *(void *)(v91 + 64) = v86;
      *(void *)(v91 + 32) = v94;
      *(void *)(v91 + 40) = v96;
      os_log(_:dso:log:_:_:)(v89, &_mh_execute_header, v90, "cloudBacked item deleted from disk: %@", 38LL, 2LL, v91);
      swift_bridgeObjectRelease();
      uint64_t v97 = (uint64_t)v123;
      sub_10001DC4C(v135, (uint64_t)v123, type metadata accessor for BeaconEstimatedLocation);
      uint64_t v98 = *(unsigned __int8 *)(v121 + 80);
      uint64_t v99 = (v98 + 32) & ~v98;
      uint64_t v132 = v98 | 7;
      unint64_t v100 = (v122 + v99 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v101 = swift_allocObject(&unk_100960C60, v100 + 16, v98 | 7);
      uint64_t v102 = v125;
      uint64_t v103 = v133;
      *(void *)(v101 + 16) = v125;
      *(void *)(v101 + 24) = v103;
      sub_10002218C(v97, v101 + v99, type metadata accessor for BeaconEstimatedLocation);
      uint64_t v104 = (uint64_t (**)(uint64_t))(v101 + v100);
      uint64_t v105 = (uint64_t (*)(uint64_t))v130;
      char *v104 = sub_100564C0C;
      v104[1] = v105;
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v106 = v126;
      uint64_t v107 = Future.addSuccess(block:)(sub_100564C38, v101);
      swift_release(v107);
      swift_release(v101);
      sub_10001DC4C(v135, v97, type metadata accessor for BeaconEstimatedLocation);
      uint64_t v108 = swift_allocObject(&unk_100960C88, v100 + 16, v132);
      *(void *)(v108 + 16) = v102;
      *(void *)(v108 + 24) = v103;
      sub_10002218C(v97, v108 + v99, type metadata accessor for BeaconEstimatedLocation);
      __int128 v109 = (uint64_t (**)(uint64_t))(v108 + v100);
      char *v109 = sub_100564C0C;
      v109[1] = v105;
      swift_retain();
      swift_retain();
      swift_retain();
      uint64_t v110 = Future.addFailure(block:)(sub_100564D88, v108);
      swift_release(v105);
      swift_release(v102);
      swift_release(v108);

      swift_release(v106);
      uint64_t v111 = v110;
    }

    else
    {
      if (qword_10099B528 != -1) {
        swift_once(&qword_10099B528, sub_1004F3B00);
      }
      uint64_t v123 = (char *)a4;
      uint64_t v40 = type metadata accessor for Logger(0LL);
      uint64_t v122 = sub_10000A720(v40, (uint64_t)qword_100A2AC98);
      uint64_t v41 = (os_log_s *)Logger.logObject.getter(v122);
      os_log_type_t v42 = static os_log_type_t.info.getter(v41);
      if (os_log_type_enabled(v41, v42))
      {
        uint64_t v43 = swift_slowAlloc(14LL, -1LL);
        *(_DWORD *)uint64_t v43 = 67109376;
        BOOL v136 = v35;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, v137, v43 + 4, v43 + 8);
        *(_WORD *)(v43 + 8) = 1024;
        BOOL v136 = v39 != 0LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v136, v137, v43 + 10, v43 + 14);
        _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "Skipping cloud delete. skipCloudSave: %{BOOL}d, isiCloudSignedIn %{BOOL}d",  (uint8_t *)v43,  0xEu);
        swift_slowDealloc(v43, -1LL, -1LL);
      }

      uint64_t v44 = *(void *)(v133 + 136);
      uint64_t v45 = v135 + *(int *)(v20 + 20);
      uint64_t v46 = v12;
      os_log_type_t v47 = v125;
      uint64_t v121 = *(void *)(v12 + 16);
      ((void (*)(char *, uint64_t, void *))v121)(v125, v45, v134);
      uint64_t v48 = objc_autoreleasePoolPush();
      if (qword_10099B5C8 != -1) {
        swift_once(&qword_10099B5C8, sub_1005BD7E8);
      }
      uint64_t v49 = v131;
      uint64_t v50 = sub_10000A720(v131, (uint64_t)qword_100A2ADC0);
      uint64_t v51 = UUID.uuidString.getter(v50);
      uint64_t v52 = v126;
      URL.appendingPathComponent(_:)(v51, v53);
      swift_bridgeObjectRelease();
      objc_autoreleasePoolPop(v48);
      __chkstk_darwin(v54);
      v113[-4] = v44;
      v113[-3] = v47;
      v113[-2] = v52;
      uint64_t v55 = (uint64_t)v127;
      OS_dispatch_queue.sync<A>(execute:)(sub_10014F0CC, &v113[-6], v132);
      (*(void (**)(char *, uint64_t))(v129 + 8))(v52, v49);
      (*(void (**)(char *, void *))(v46 + 8))(v47, v134);
      sub_10057BA24(v55);
      uint64_t v82 = v133;
      QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
      sub_1004E696C(9u);
      uint64_t v83 = *(void (**)(uint64_t))(v82 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged);
      if (v83)
      {
        uint64_t v84 = *(void *)(v82 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconStoreChanged + 8);
        swift_retain();
        v83(v82);
        sub_10002214C((uint64_t)v83, v84);
      }

      ((void (*)(uint64_t))v128)(1LL);
      sub_100018C68(v55, type metadata accessor for BeaconStoreFileRecord);
      uint64_t v111 = v130;
    }

    return swift_release(v111);
  }

  else
  {
    uint64_t result = swift_release(a4);
    __break(1u);
  }

  return result;
}

uint64_t sub_1005637A4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v43 = *(void *)(v8 - 8);
  uint64_t v44 = v8;
  __chkstk_darwin(v8);
  os_log_type_t v42 = (char *)&v36 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v40 = *(void *)(v10 - 8);
  uint64_t v41 = v10;
  __chkstk_darwin(v10);
  id v39 = (char *)&v36 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (void *)swift_allocObject(&unk_100961C78, 40LL, 7LL);
  v12[2] = a2;
  v12[3] = a3;
  uint64_t v37 = a3;
  v12[4] = a4;
  swift_retain();
  uint64_t v38 = a4;
  swift_retain();
  uint64_t v13 = sub_1004F730C();
  uint64_t v14 = (void *)swift_allocObject(&unk_100961CA0, 40LL, 7LL);
  v14[2] = sub_1005691F4;
  v14[3] = v12;
  v14[4] = a1;
  swift_retain_n(v12, 2LL);
  uint64_t v45 = a1;
  swift_retain_n(a1, 2LL);
  uint64_t v15 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100153864);
  int v16 = LOBYTE(aBlock[0]);
  uint64_t v17 = static os_log_type_t.default.getter(v15);
  if (qword_10099B718 != -1) {
    swift_once(&qword_10099B718, sub_100651228);
  }
  uint64_t v18 = qword_100A2B028;
  uint64_t v19 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v20 = swift_allocObject(v19, 72LL, 7LL);
  *(_OWORD *)(v20 + 16) = xmmword_1007E67D0;
  *(void *)(v20 + 56) = &type metadata for Bool;
  *(void *)(v20 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v20 + 32) = v16;
  os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "localAvailable: %d", v36);
  uint64_t v21 = swift_bridgeObjectRelease();
  uint64_t v22 = static os_log_type_t.default.getter(v21);
  uint64_t v23 = qword_100A2B028;
  if (v16)
  {
    os_log(_:dso:log:_:_:)( v22,  &_mh_execute_header,  qword_100A2B028,  "Container is already available -- calling completion immediately",  64LL,  2LL,  _swiftEmptyArrayStorage);
    sub_100594530(a2, v37, v38);
    swift_release();
    swift_release();
    swift_release_n(v12, 2LL);
  }

  else
  {
    uint64_t v24 = os_log(_:dso:log:_:_:)( v22,  &_mh_execute_header,  qword_100A2B028,  "Container is not yet available",  30LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v25 = static os_log_type_t.default.getter(v24);
    os_log(_:dso:log:_:_:)( v25,  &_mh_execute_header,  v23,  "Waiting for availableWaitQueue",  30LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v38 = *(void *)(v13 + 64);
    uint64_t v26 = (void *)swift_allocObject(&unk_100961CC8, 40LL, 7LL);
    v26[2] = v13;
    v26[3] = sub_1001FA824;
    v26[4] = v14;
    aBlock[4] = sub_100571BA4;
    void aBlock[5] = v26;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    aBlock[3] = &unk_100961CE0;
    uint64_t v27 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v28 = swift_retain();
    uint64_t v29 = v39;
    static DispatchQoS.unspecified.getter(v28);
    uint64_t v46 = _swiftEmptyArrayStorage;
    uint64_t v30 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v31 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v32 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v33 = v42;
    uint64_t v34 = v44;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v31, v32, v44, v30);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v29, v33, v27);
    _Block_release(v27);
    (*(void (**)(char *, uint64_t))(v43 + 8))(v33, v34);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v29, v41);
    swift_release();
    swift_release();
    swift_release_n(v12, 2LL);
    swift_release();
  }

  return swift_release();
}

uint64_t sub_100563BF0(uint64_t a1, void (*a2)(uint64_t), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v40 = *(void *)(v6 - 8);
  uint64_t v41 = v6;
  __chkstk_darwin(v6);
  id v39 = (char *)&v35 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v37 = *(void *)(v8 - 8);
  uint64_t v38 = v8;
  __chkstk_darwin(v8);
  int v36 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = swift_allocObject(&unk_100961BD8, 32LL, 7LL);
  unsigned int v35 = a2;
  *(void *)(v10 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  swift_retain();
  uint64_t v11 = sub_1004F730C();
  uint64_t v12 = (void *)swift_allocObject(&unk_100961C00, 40LL, 7LL);
  v12[2] = sub_10009BF1C;
  v12[3] = v10;
  v12[4] = a1;
  swift_retain_n(v10, 2LL);
  uint64_t v42 = a1;
  swift_retain_n(a1, 2LL);
  uint64_t v13 = QueueSynchronizer.conditionalSync<A>(_:)(sub_100153864);
  int v14 = LOBYTE(aBlock[0]);
  uint64_t v15 = static os_log_type_t.default.getter(v13);
  if (qword_10099B718 != -1) {
    swift_once(&qword_10099B718, sub_100651228);
  }
  uint64_t v16 = qword_100A2B028;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + 16) = xmmword_1007E67D0;
  *(void *)(v18 + 56) = &type metadata for Bool;
  *(void *)(v18 + 64) = &protocol witness table for Bool;
  *(_BYTE *)(v18 + 32) = v14;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "localAvailable: %d", (_DWORD)v35);
  uint64_t v19 = swift_bridgeObjectRelease();
  uint64_t v20 = static os_log_type_t.default.getter(v19);
  uint64_t v21 = qword_100A2B028;
  if (v14)
  {
    uint64_t v22 = os_log(_:dso:log:_:_:)( v20,  &_mh_execute_header,  qword_100A2B028,  "Container is already available -- calling completion immediately",  64LL,  2LL,  _swiftEmptyArrayStorage);
    v35(v22);
    swift_release();
    swift_release();
    swift_release_n(v10, 2LL);
  }

  else
  {
    uint64_t v23 = os_log(_:dso:log:_:_:)( v20,  &_mh_execute_header,  qword_100A2B028,  "Container is not yet available",  30LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v24 = static os_log_type_t.default.getter(v23);
    os_log(_:dso:log:_:_:)( v24,  &_mh_execute_header,  v21,  "Waiting for availableWaitQueue",  30LL,  2LL,  _swiftEmptyArrayStorage);
    unsigned int v35 = *(void (**)(uint64_t))(v11 + 64);
    uint64_t v25 = (void *)swift_allocObject(&unk_100961C28, 40LL, 7LL);
    void v25[2] = v11;
    v25[3] = sub_1001FA824;
    v25[4] = v12;
    aBlock[4] = sub_100571BA4;
    void aBlock[5] = v25;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    aBlock[3] = &unk_100961C40;
    uint64_t v26 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v27 = swift_retain();
    uint64_t v28 = v36;
    static DispatchQoS.unspecified.getter(v27);
    uint64_t v43 = _swiftEmptyArrayStorage;
    uint64_t v29 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v30 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v31 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v32 = v39;
    uint64_t v33 = v41;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v30, v31, v41, v29);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v28, v32, v26);
    _Block_release(v26);
    (*(void (**)(char *, uint64_t))(v40 + 8))(v32, v33);
    (*(void (**)(char *, uint64_t))(v37 + 8))(v28, v38);
    swift_release();
    swift_release();
    swift_release_n(v10, 2LL);
    swift_release();
  }

  return swift_release();
}

uint64_t sub_100564028(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for StableIdentifier(0LL);
  uint64_t v39 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v43 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v5 = __chkstk_darwin(v43);
  uint64_t v7 = (char *)v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v10 = (char *)v38 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11)
  {
    v38[0] = v2;
    v38[1] = a1;
    unint64_t v41 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v12 = a1 + v41;
    uint64_t v40 = *(void *)(v8 + 72);
    swift_bridgeObjectRetain(a1);
    uint64_t v13 = _swiftEmptyDictionarySingleton;
    uint64_t v42 = v10;
    while (1)
    {
      sub_10001DC4C(v12, (uint64_t)v10, type metadata accessor for OwnedBeaconRecord);
      sub_10001DC4C((uint64_t)&v10[*(int *)(v43 + 24)], (uint64_t)v4, type metadata accessor for StableIdentifier);
      sub_10001DC4C((uint64_t)v10, (uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
      swift_bridgeObjectRetain(v13);
      uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v14);
      uint64_t v45 = v13;
      unint64_t v17 = sub_10030DA3C((uint64_t)v4);
      uint64_t v18 = v13[2];
      BOOL v19 = (v16 & 1) == 0;
      uint64_t v20 = v18 + v19;
      if (__OFADD__(v18, v19)) {
        break;
      }
      char v21 = v16;
      if (v13[3] >= v20)
      {
        if ((isUniquelyReferenced_nonNull_native & 1) != 0)
        {
          uint64_t v22 = v13;
        }

        else
        {
          sub_100067528();
          uint64_t v22 = v45;
        }
      }

      else
      {
        sub_100054B7C(v20, isUniquelyReferenced_nonNull_native);
        uint64_t v22 = v45;
        unint64_t v23 = sub_10030DA3C((uint64_t)v4);
        if ((v21 & 1) != (v24 & 1)) {
          goto LABEL_23;
        }
        unint64_t v17 = v23;
      }

      swift_bridgeObjectRelease();
      if ((v21 & 1) == 0)
      {
        v22[(v17 >> 6) + 8] |= 1LL << v17;
        sub_10001DC4C((uint64_t)v4, v22[6] + *(void *)(v39 + 72) * v17, type metadata accessor for StableIdentifier);
        *(void *)(v22[7] + 8 * v17) = _swiftEmptyArrayStorage;
        uint64_t v25 = v22[2];
        BOOL v26 = __OFADD__(v25, 1LL);
        uint64_t v27 = v25 + 1;
        if (v26) {
          goto LABEL_22;
        }
        v22[2] = v27;
      }

      uint64_t v44 = v11;
      uint64_t v28 = (uint64_t)v7;
      uint64_t v29 = (uint64_t)v4;
      uint64_t v30 = v22[7];
      unint64_t v31 = *(void *)(v30 + 8 * v17);
      char v32 = swift_isUniquelyReferenced_nonNull_native(v31);
      *(void *)(v30 + 8 * v17) = v31;
      if ((v32 & 1) == 0)
      {
        unint64_t v31 = sub_1004C46DC(0, *(void *)(v31 + 16) + 1LL, 1, v31);
        *(void *)(v30 + 8 * v17) = v31;
      }

      unint64_t v34 = *(void *)(v31 + 16);
      unint64_t v33 = *(void *)(v31 + 24);
      if (v34 >= v33 >> 1)
      {
        unint64_t v31 = sub_1004C46DC(v33 > 1, v34 + 1, 1, v31);
        *(void *)(v30 + 8 * v17) = v31;
      }

      *(void *)(v31 + 16) = v34 + 1;
      uint64_t v35 = v40;
      uint64_t v7 = (char *)v28;
      sub_10002218C(v28, v31 + v41 + v34 * v40, type metadata accessor for OwnedBeaconRecord);
      uint64_t v4 = (char *)v29;
      sub_100018C68(v29, type metadata accessor for StableIdentifier);
      uint64_t v10 = v42;
      sub_100018C68((uint64_t)v42, type metadata accessor for OwnedBeaconRecord);
      swift_bridgeObjectRelease();
      v12 += v35;
      uint64_t v13 = v22;
      uint64_t v11 = v44 - 1;
      if (v44 == 1)
      {
        swift_bridgeObjectRelease();
        goto LABEL_20;
      }
    }

    __break(1u);
LABEL_22:
    __break(1u);
LABEL_23:
    uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v38[0]);
    __break(1u);
  }

  else
  {
    uint64_t v22 = _swiftEmptyDictionarySingleton;
LABEL_20:
    uint64_t v36 = sub_10054A340((uint64_t)v22);
    swift_bridgeObjectRelease();
    return v36;
  }

  return result;
}

void sub_1005643B0(const __CFString *a1)
{
  uint64_t v2 = CFNotificationCenterGetDarwinNotifyCenter();
  if (v2)
  {
    center = v2;
    uint64_t v3 = static os_log_type_t.default.getter(v2);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v4 = qword_100A2B018;
    uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v6 = swift_allocObject(v5, 72LL, 7LL);
    *(_OWORD *)(v6 + 16) = xmmword_1007E67D0;
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    uint64_t v9 = v8;
    *(void *)(v6 + 56) = &type metadata for String;
    *(void *)(v6 + 64) = sub_1000226F4();
    *(void *)(v6 + 32) = v7;
    *(void *)(v6 + 40) = v9;
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "Posting %{public}@ Darwin notification", 38LL, 2LL, v6);
    swift_bridgeObjectRelease();
    CFNotificationCenterPostNotification(center, a1, 0LL, 0LL, 1u);
  }

  else
  {
    uint64_t v10 = static os_log_type_t.error.getter(0LL);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v10,  &_mh_execute_header,  qword_100A2B018,  "CFNotificationCenterGetDarwinNotifyCenter return nil!",  53LL,  2LL,  _swiftEmptyArrayStorage);
  }

uint64_t sub_100564540()
{
  return sub_10056E530((void (*)(void))&_swift_release, 32LL);
}

void sub_100564550()
{
}

uint64_t sub_100564558(char a1)
{
  return sub_1005237FC(a1, v1, "Could not remove beaconNamingRecord", "BeaconNamingRecord removed.");
}

void sub_100564580(void *a1, char a2)
{
}

BOOL sub_1005645A8(uint64_t a1)
{
  return sub_1005238E4(a1, *(void *)(v1 + 16));
}

void sub_1005645C4(void *a1, char a2)
{
}

uint64_t sub_1005645EC()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  swift_bridgeObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  swift_release(*(void *)(v0 + v7 + 8));
  return swift_deallocObject(v0, v7 + 16, v5);
}

uint64_t sub_100564690()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10048E7E8( *(void *)(v0 + 16),  v0 + v2,  *(void *)(v0 + v3),  *(void (**)(void, void))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_1005646E4(uint64_t a1)
{
  return sub_100799ADC(a1, *(void **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100564704(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1009B2794);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100015D58;
  return sub_100524324(a1, v4, v1 + 24);
}

uint64_t sub_10056476C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  uint64_t v8 = v7 + v5;
  swift_release(*(void *)(v0 + 16));
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  return swift_deallocObject(v0, v8, v6);
}

void sub_100564800(char a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  sub_100523D9C( a1,  *(void *)(v1 + 16),  v1 + ((v4 + 24) & ~v4),  v1 + ((*(void *)(v3 + 64) + v4 + ((v4 + 24) & ~v4)) & ~v4));
}

uint64_t sub_100564854()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = ((v9 + *(void *)(v7 + 64)) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  swift_release();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v0 + v4, v1);
  sub_100016F9C(*(void *)(v0 + v9), *(void *)(v0 + v9 + 8));
  v12(v0 + v9 + *(int *)(v6 + 24), v1);
  uint64_t v13 = v0 + v9 + *(int *)(v6 + 28);
  uint64_t v14 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8LL))(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v11, v10);
}

void sub_100564970(int a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for OwnedBeaconGroup(0LL) - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  sub_100523A90(a1, *(void *)(v1 + 16), v1 + v4, v1 + v7, *(unsigned __int8 *)(v1 + v7 + *(void *)(v6 + 64)));
}

uint64_t sub_1005649F4(char a1)
{
  return sub_1005237FC(a1, v1, "Could not remove keyAlignmentRecord", "KeyAlignmentRecord removed.");
}

uint64_t sub_100564A1C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100564AB0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v4 = *(uint64_t (**)(uint64_t))(v1
                                         + ((*(void *)(v3 + 64)
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100564EC4);
  return v4(a1);
}

uint64_t sub_100564B58()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

void sub_100564BCC(char a1)
{
}

uint64_t sub_100564C0C(uint64_t a1)
{
  return (*(uint64_t (**)(BOOL))(v1 + 16))(a1 == 0);
}

uint64_t sub_100564C38(void *a1)
{
  return sub_10056FB90( a1,  type metadata accessor for BeaconEstimatedLocation,  (uint64_t (*)(void, void, void, unint64_t, void, void))sub_100140AF4);
}

uint64_t sub_100564C50()
{
  uint64_t v1 = (int *)type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  uint64_t v9 = v0 + v4 + v1[10];
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  uint64_t v13 = v0 + v4 + v1[12];
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | 7);
}

uint64_t sub_100564D88(uint64_t a1)
{
  return sub_10056FD04( a1,  type metadata accessor for BeaconEstimatedLocation,  (uint64_t (*)(uint64_t, void, void, unint64_t, void, void))sub_100141314);
}

uint64_t sub_100564DA0(void *a1)
{
  return sub_10056FB90( a1,  type metadata accessor for BeaconNamingRecord,  (uint64_t (*)(void, void, void, unint64_t, void, void))sub_1001406FC);
}

uint64_t sub_100564DB8()
{
  uint64_t v1 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  swift_release();
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100564EB0(uint64_t a1)
{
  return sub_10056FD04( a1,  type metadata accessor for BeaconNamingRecord,  (uint64_t (*)(uint64_t, void, void, unint64_t, void, void))sub_1001412E4);
}

uint64_t sub_100564EC4()
{
  return sub_10050B76C(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_100564EE0(void *a1)
{
  return sub_10056FB90( a1,  type metadata accessor for KeyAlignmentRecord,  (uint64_t (*)(void, void, void, unint64_t, void, void))sub_100140ABC);
}

uint64_t sub_100564EF8()
{
  uint64_t v1 = (int *)type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  swift_release();
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + v1[5];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  v10(v7 + v1[6], v9);
  uint64_t v11 = v7 + v1[8];
  uint64_t v12 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(v11, v12);
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100564FF4(uint64_t a1)
{
  return sub_10056FD04( a1,  type metadata accessor for KeyAlignmentRecord,  (uint64_t (*)(uint64_t, void, void, unint64_t, void, void))sub_100141308);
}

uint64_t sub_10056500C(void *a1)
{
  return sub_10056FB90( a1,  type metadata accessor for OwnedBeaconGroup,  (uint64_t (*)(void, void, void, unint64_t, void, void))sub_10014061C);
}

uint64_t sub_100565024(uint64_t a1)
{
  return sub_10056FD04( a1,  type metadata accessor for OwnedBeaconGroup,  (uint64_t (*)(uint64_t, void, void, unint64_t, void, void))sub_100140E18);
}

uint64_t sub_10056503C(void *a1)
{
  return sub_10056FB90( a1,  type metadata accessor for OwnedDeviceKeyRecord,  (uint64_t (*)(void, void, void, unint64_t, void, void))sub_1001406C4);
}

uint64_t sub_100565054()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedDeviceKeyRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  swift_release();
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + v1[5];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  v10(v7 + v1[6], v9);
  sub_100016F9C(*(void *)(v7 + v1[7]), *(void *)(v7 + v1[7] + 8));
  sub_100016F9C(*(void *)(v7 + v1[8]), *(void *)(v7 + v1[8] + 8));
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10056514C(uint64_t a1)
{
  return sub_10056FD04( a1,  type metadata accessor for OwnedDeviceKeyRecord,  (uint64_t (*)(uint64_t, void, void, unint64_t, void, void))sub_1001412D8);
}

uint64_t sub_100565160@<X0>(void *a1@<X8>)
{
  return sub_10052FD68( *(void **)(v1 + 16),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void **)(v1 + 48),  type metadata accessor for OwnedDeviceKeyRecord,  (uint64_t)&unk_100960E90,  (uint64_t)sub_1005651DC,  a1,  (uint64_t)sub_100095030,  (uint64_t)&unk_100960EA8,  (uint64_t)sub_1005651F4,  &qword_1009A4780,  (uint64_t (*)(void))sub_100565210,  &qword_1009B27B0);
}

void sub_1005651DC()
{
}

uint64_t sub_1005651E4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1005651F4(uint64_t *a1@<X8>)
{
}

unint64_t sub_100565210()
{
  unint64_t result = qword_1009B27A8;
  if (!qword_1009B27A8)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A4780);
    sub_100007864( (unint64_t *)&unk_1009BD2C0,  type metadata accessor for OwnedDeviceKeyRecord,  (uint64_t)&unk_100818614);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1009B27A8);
  }

  return result;
}

void sub_10056528C()
{
}

void sub_100565298(uint64_t a1)
{
}

uint64_t sub_1005652C0()
{
  uint64_t v1 = type metadata accessor for SafeLocation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100565370(id *a1)
{
  return sub_100565834( a1,  type metadata accessor for SafeLocation,  (void (*)(id))sub_100619684,  (void (*)(id *, char *))sub_100543CE8);
}

uint64_t sub_10056538C(uint64_t a1)
{
  return sub_100501F64( a1,  *(void (**)(void *))(v1 + 16),  *(void *)(v1 + 24),  (uint64_t *)&unk_1009AF730,  "Update failed: %@",  17LL);
}

uint64_t sub_1005653B8()
{
  uint64_t v1 = type metadata accessor for SafeLocation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v7 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100565490(void **a1)
{
  return sub_1005659B8( a1,  type metadata accessor for SafeLocation,  (uint64_t *)&unk_1009AF730,  (void (*)(void *))sub_100619684,  (uint64_t)sub_100571ADC);
}

uint64_t sub_1005654B4(uint64_t a1)
{
  return sub_100503298(a1, v1[2], v1[3], v1[4], type metadata accessor for SafeLocation, &unk_100960FA8, sub_1005655B4);
}

uint64_t sub_1005654E8()
{
  uint64_t v1 = type metadata accessor for SafeLocation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

void sub_1005655B4(void **a1, uint64_t a2)
{
}

uint64_t sub_1005655D0(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of static Equatable.== infix(_:_:)(a1, v3, v4, v5) & 1;
}

uint64_t sub_100565644@<X0>(void *a1@<X8>)
{
  return sub_10052FD68( *(void **)(v1 + 16),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void **)(v1 + 48),  type metadata accessor for BeaconEstimatedLocation,  (uint64_t)&unk_100960FD0,  (uint64_t)sub_1005651DC,  a1,  (uint64_t)sub_100154688,  (uint64_t)&unk_100960FE8,  (uint64_t)sub_100571C38,  &qword_1009A48E0,  (uint64_t (*)(void))sub_1005656D0,  &qword_1009B27E0);
}

uint64_t sub_1005656C0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_1005656D0()
{
  unint64_t result = qword_1009B27D0;
  if (!qword_1009B27D0)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A48E0);
    sub_100007864(&qword_1009B27D8, type metadata accessor for BeaconEstimatedLocation, (uint64_t)&unk_1008099E8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1009B27D0);
  }

  return result;
}

void sub_100565750(uint64_t a1)
{
}

uint64_t sub_100565778()
{
  uint64_t v1 = type metadata accessor for LeashRecord(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100565818(id *a1)
{
  return sub_100565834( a1,  type metadata accessor for LeashRecord,  (void (*)(id))sub_10077FFD0,  (void (*)(id *, char *))sub_100545850);
}

uint64_t sub_100565834( id *a1, uint64_t (*a2)(void), void (*a3)(id), void (*a4)(id *, char *))
{
  uint64_t v9 = *(unsigned __int8 *)(*(void *)(a2(0LL) - 8) + 80LL);
  return sub_100503C58( a1,  *(void (**)(char *))(v4 + 16),  *(void *)(v4 + 24),  v4 + ((v9 + 32) & ~v9),  a2,  a3,  a4);
}

uint64_t sub_1005658A0(uint64_t a1)
{
  return sub_100501F64( a1,  *(void (**)(void *))(v1 + 16),  *(void *)(v1 + 24),  (uint64_t *)&unk_1009AF770,  "Update failed: %@",  17LL);
}

uint64_t sub_1005658CC()
{
  uint64_t v1 = type metadata accessor for LeashRecord(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v7 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_100565994(void **a1)
{
  return sub_1005659B8( a1,  type metadata accessor for LeashRecord,  (uint64_t *)&unk_1009AF770,  (void (*)(void *))sub_10077FFD0,  (uint64_t)sub_100571AF0);
}

uint64_t sub_1005659B8( void **a1, uint64_t (*a2)(void), uint64_t *a3, void (*a4)(void *), uint64_t a5)
{
  uint64_t v11 = *(void *)(a2(0LL) - 8);
  unint64_t v12 = (*(unsigned __int8 *)(v11 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  unint64_t v13 = (*(void *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10050495C( *a1,  v5 + v12,  *(void *)(v5 + v13),  *(void (**)(char *))(v5 + ((v13 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v5 + ((v13 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8),  a3,  a2,  a4,  a5);
}

uint64_t sub_100565A54(uint64_t a1)
{
  return sub_100503298(a1, v1[2], v1[3], v1[4], type metadata accessor for LeashRecord, &unk_1009610C0, sub_100565B44);
}

uint64_t sub_100565A88()
{
  uint64_t v1 = type metadata accessor for LeashRecord(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

void sub_100565B44(void **a1, uint64_t a2)
{
}

void sub_100565B60(void **a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(void), uint64_t a5)
{
  uint64_t v11 = *(void *)(a3(0LL) - 8);
  unint64_t v12 = (*(unsigned __int8 *)(v11 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  sub_100503718( *a1,  a2,  *(void *)(v5 + 16),  v5 + v12,  *(void *)(v5 + ((*(void *)(v11 + 64) + v12 + 7) & 0xFFFFFFFFFFFFF8LL)),  a3,  a4,  a5);
}

uint64_t sub_100565BEC(void *a1)
{
  return sub_10056FB90( a1,  type metadata accessor for ShareRecord,  (uint64_t (*)(void, void, void, unint64_t, void, void))sub_10014068C);
}

uint64_t sub_100565C04()
{
  uint64_t v1 = (int *)type metadata accessor for ShareRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  uint64_t v9 = v0 + v4 + v1[7];
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  unint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  uint64_t v13 = v0 + v4 + v1[8];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | 7);
}

uint64_t sub_100565D50(uint64_t a1)
{
  return sub_10056FD04( a1,  type metadata accessor for ShareRecord,  (uint64_t (*)(uint64_t, void, void, unint64_t, void, void))sub_1001412CC);
}

uint64_t sub_100565D64@<X0>(void *a1@<X8>)
{
  return sub_10052FD68( *(void **)(v1 + 16),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void **)(v1 + 48),  type metadata accessor for BeaconProductInfoRecord,  (uint64_t)&unk_100961160,  (uint64_t)sub_1005651DC,  a1,  (uint64_t)sub_100154688,  (uint64_t)&unk_100961178,  (uint64_t)sub_100571C38,  &qword_1009AA870,  (uint64_t (*)(void))sub_100565DF0,  &qword_1009B2800);
}

uint64_t sub_100565DE0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_100565DF0()
{
  unint64_t result = qword_1009B27F8;
  if (!qword_1009B27F8)
  {
    uint64_t v1 = sub_100004B78(&qword_1009AA870);
    sub_100007864(&qword_1009AB030, type metadata accessor for BeaconProductInfoRecord, (uint64_t)&unk_1007FDCD4);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1009B27F8);
  }

  return result;
}

uint64_t sub_100565E6C()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_1009B280C);
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100015D58;
  return sub_1004F679C(v0);
}

uint64_t sub_100565EB4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc(dword_1009B2824);
  *(void *)(v3 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100015D58;
  return sub_1004F6C28(a1, a2, v2);
}

uint64_t sub_100565F14(uint64_t a1)
{
  return sub_10052DAE4(a1, v1);
}

uint64_t sub_100565F1C()
{
  return sub_10057010C((void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_100565F2C()
{
  return sub_10067AC14(v0[2], v0[3], v0[4]);
}

uint64_t sub_100565F38()
{
  return sub_10057010C((void (*)(void))&_swift_unknownObjectRelease, 40LL);
}

uint64_t sub_100565F48(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1009B2834);
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100015D58;
  return sub_10052DCB8(a1, v4, v5, v6);
}

uint64_t sub_100565FB4(uint64_t a1)
{
  return sub_10052ED98(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_100565FBC()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v26 = *(void *)(v2 + 64);
  uint64_t v4 = sub_100004AEC(&qword_1009AF860);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v27 = v5;
  uint64_t v25 = *(void *)(v5 + 64);
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release();
  uint64_t v7 = v0 + ((v3 + 40) & ~v3);
  sub_100016F9C(*(void *)v7, *(void *)(v7 + 8));
  uint64_t v8 = v7 + v1[5];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v11(v8, v9);
  uint64_t v12 = v7 + v1[6];
  uint64_t v13 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v12, v13))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v11(v12, v9);
      uint64_t v24 = v4;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v11(v12, v9);
      uint64_t v24 = v4;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v4 = v24;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v14 = v7 + v1[7];
  uint64_t v15 = v7 + v1[8];
  uint64_t v16 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL))(v15, v16);
  sub_100016F9C(*(void *)(v7 + v1[9]), *(void *)(v7 + v1[9] + 8));
  unint64_t v17 = (uint64_t *)(v7 + v1[10]);
  unint64_t v18 = v17[1];
  if (v18 >> 60 != 15) {
    sub_100016F9C(*v17, v18);
  }
  BOOL v19 = (uint64_t *)(v7 + v1[11]);
  unint64_t v20 = v19[1];
  if (v20 >> 60 != 15) {
    sub_100016F9C(*v19, v20);
  }
  uint64_t v21 = v3 | v6 | 7;
  uint64_t v22 = (((v3 + 40) & ~v3) + v26 + v6) & ~v6;
  sub_100016F9C(*(void *)(v7 + v1[12]), *(void *)(v7 + v1[12] + 8));
  sub_100016F9C(*(void *)(v7 + v1[13]), *(void *)(v7 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v0 + v22, v4);
  return swift_deallocObject(v0, v22 + v25, v21);
}

uint64_t sub_1005662BC(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = v5 + *(void *)(v4 + 64);
  uint64_t v7 = *(unsigned __int8 *)(*(void *)(sub_100004AEC(&qword_1009AF860) - 8) + 80LL);
  unint64_t v8 = (v6 + v7) & ~v7;
  uint64_t v9 = v1[2];
  uint64_t v10 = v1[3];
  uint64_t v11 = v1[4];
  uint64_t v12 = (uint64_t)v1 + v5;
  uint64_t v13 = (uint64_t)v1 + v8;
  uint64_t v14 = (void *)swift_task_alloc(dword_1009B2844);
  *(void *)(v2 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_100015D58;
  return sub_10052EF60(a1, v9, v10, v11, v12, v13);
}

uint64_t sub_10056637C()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v26 = *(void *)(v2 + 64);
  uint64_t v4 = sub_100004AEC(&qword_1009AF860);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v27 = v5;
  uint64_t v25 = *(void *)(v5 + 64);
  swift_release();
  uint64_t v7 = v0 + ((v3 + 24) & ~v3);
  sub_100016F9C(*(void *)v7, *(void *)(v7 + 8));
  uint64_t v8 = v7 + v1[5];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v10 + 8);
  v11(v8, v9);
  uint64_t v12 = v7 + v1[6];
  uint64_t v13 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v12, v13))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v11(v12, v9);
      uint64_t v24 = v4;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v11(v12, v9);
      uint64_t v24 = v4;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v4 = v24;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v14 = v7 + v1[7];
  uint64_t v15 = v7 + v1[8];
  uint64_t v16 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL))(v15, v16);
  sub_100016F9C(*(void *)(v7 + v1[9]), *(void *)(v7 + v1[9] + 8));
  unint64_t v17 = (uint64_t *)(v7 + v1[10]);
  unint64_t v18 = v17[1];
  if (v18 >> 60 != 15) {
    sub_100016F9C(*v17, v18);
  }
  BOOL v19 = (uint64_t *)(v7 + v1[11]);
  unint64_t v20 = v19[1];
  if (v20 >> 60 != 15) {
    sub_100016F9C(*v19, v20);
  }
  uint64_t v21 = v3 | v6 | 7;
  uint64_t v22 = (((v3 + 24) & ~v3) + v26 + v6) & ~v6;
  sub_100016F9C(*(void *)(v7 + v1[12]), *(void *)(v7 + v1[12] + 8));
  sub_100016F9C(*(void *)(v7 + v1[13]), *(void *)(v7 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v0 + v22, v4);
  return swift_deallocObject(v0, v22 + v25, v21);
}

uint64_t sub_100566674()
{
  uint64_t v1 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = v2 + *(void *)(v1 + 64);
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(sub_100004AEC(&qword_1009AF860) - 8) + 80LL);
  return sub_10052F128(*(void *)(v0 + 16), v0 + v2, v0 + ((v3 + v4) & ~v4));
}

uint64_t sub_1005666E8(uint64_t a1)
{
  return sub_10056B360(a1, &qword_1009AF860, (uint64_t (*)(uint64_t, uint64_t))sub_10033E0E4);
}

uint64_t sub_100566700()
{
  return sub_10057010C((void (*)(void))&_swift_unknownObjectRelease, 40LL);
}

uint64_t *sub_100566710(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  sub_100016F9C(*a1, a1[1]);
  sub_100016F9C(v2, v3);
  sub_100016F9C(v4, v5);
  return a1;
}

uint64_t sub_10056676C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1005667FC(uint64_t a1)
{
  return sub_10056C7C4( a1,  (uint64_t (*)(void))&type metadata accessor for UUID,  (uint64_t (*)(uint64_t, void, unint64_t, void))sub_10052F65C);
}

uint64_t sub_100566810(uint64_t a1)
{
  return sub_1004FE0BC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10056682C(uint64_t a1)
{
  return sub_100501F64( a1,  *(void (**)(void *))(v1 + 16),  *(void *)(v1 + 24),  &qword_1009B2858,  "Save failed: %@",  15LL);
}

uint64_t sub_100566858()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedDeviceKeyRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + v1[5];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  v10(v7 + v1[6], v9);
  sub_100016F9C(*(void *)(v7 + v1[7]), *(void *)(v7 + v1[7] + 8));
  sub_100016F9C(*(void *)(v7 + v1[8]), *(void *)(v7 + v1[8] + 8));
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100566948(void **a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedDeviceKeyRecord(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_1005020F4( *a1,  *(void *)(v1 + 16),  v1 + v4,  *(void (**)(char *))v5,  *(void *)(v5 + 8),  &qword_1009B2858,  type metadata accessor for OwnedDeviceKeyRecord,  (void (*)(id))sub_1006E2AB4,  (uint64_t)sub_1005669D0);
}

uint64_t sub_1005669D0()
{
  return sub_10056F9C0((uint64_t)sub_100571B04);
}

uint64_t sub_1005669EC()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedDeviceKeyRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  unint64_t v7 = (v3 + ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8) & ~v3;
  uint64_t v8 = v7 + v5;
  swift_release();
  uint64_t v9 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v10 = v0 + v4 + v1[5];
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL);
  v12(v10, v11);
  v12(v9 + v1[6], v11);
  sub_100016F9C(*(void *)(v9 + v1[7]), *(void *)(v9 + v1[7] + 8));
  sub_100016F9C(*(void *)(v9 + v1[8]), *(void *)(v9 + v1[8] + 8));
  swift_release();
  uint64_t v13 = v0 + v7;
  sub_100016F9C(*(void *)(v0 + v7), *(void *)(v0 + v7 + 8));
  v12(v0 + v7 + v1[5], v11);
  v12(v0 + v7 + v1[6], v11);
  sub_100016F9C(*(void *)(v13 + v1[7]), *(void *)(v13 + v1[7] + 8));
  sub_100016F9C(*(void *)(v13 + v1[8]), *(void *)(v13 + v1[8] + 8));
  return swift_deallocObject(v0, v8, v6);
}

void sub_100566B30(uint64_t a1)
{
}

uint64_t sub_100566B54()
{
  return sub_10056E530((void (*)(void))&_swift_release, 32LL);
}

void sub_100566B64(uint64_t a1)
{
}

uint64_t sub_100566B6C()
{
  return sub_10020F99C((void (*)(void))&_swift_release);
}

uint64_t sub_100566B78()
{
  return sub_10057010C((void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_100566B88()
{
  uint64_t v1 = type metadata accessor for DateInterval(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + v4 + 3;
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100566C08()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100566C18(uint64_t a1)
{
  return sub_1002A8138(a1, *(void *)(v1 + 16));
}

uint64_t sub_100566C20()
{
  uint64_t v1 = (int *)type metadata accessor for ShareRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  uint64_t v9 = v0 + v4 + v1[7];
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  uint64_t v13 = v0 + v4 + v1[8];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_100566D4C(id *a1)
{
  return sub_100565834( a1,  type metadata accessor for ShareRecord,  (void (*)(id))sub_10003CCA8,  (void (*)(id *, char *))sub_1004E6DFC);
}

uint64_t sub_100566D68(uint64_t a1)
{
  return sub_100501F64( a1,  *(void (**)(void *))(v1 + 16),  *(void *)(v1 + 24),  &qword_1009A6100,  "Update failed: %@",  17LL);
}

uint64_t sub_100566D94()
{
  uint64_t v1 = (int *)type metadata accessor for ShareRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  uint64_t v9 = v0 + v4 + v1[7];
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  uint64_t v13 = v0 + v4 + v1[8];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | 7);
}

uint64_t sub_100566EE0(void **a1)
{
  return sub_1005659B8( a1,  type metadata accessor for ShareRecord,  &qword_1009A6100,  (void (*)(void *))sub_10003CCA8,  (uint64_t)sub_100571B18);
}

uint64_t sub_100566F04(uint64_t a1)
{
  return sub_100503298( a1,  *(void *)(v1 + 16),  *(id **)(v1 + 24),  *(void *)(v1 + 32),  type metadata accessor for ShareRecord,  (uint64_t)&unk_100961548,  (uint64_t)sub_100567078);
}

uint64_t sub_100566F38()
{
  uint64_t v1 = (int *)type metadata accessor for ShareRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  uint64_t v9 = v0 + v4 + v1[7];
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  uint64_t v13 = v0 + v4 + v1[8];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8, v3 | 7);
}

void sub_100567078(void **a1, uint64_t a2)
{
}

uint64_t sub_100567094(uint64_t a1, uint64_t a2)
{
  return sub_10051CD58(a1, a2, *(void *)(v2 + 16)) & 1;
}

uint64_t sub_1005670B0(uint64_t a1)
{
  return static UUID.== infix(_:_:)(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_1005670DC()
{
  return sub_10057010C((void (*)(void))&_swift_release, 40LL);
}

void sub_1005670EC()
{
}

uint64_t sub_1005670F8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100567108()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_10056713C()
{
  return sub_1005291AC( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(unsigned __int8 *)(v0 + 32),  *(void *)(v0 + 40),  *(void *)(v0 + 48));
}

uint64_t sub_10056714C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100567170()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);

  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  unint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8, v3 | 7);
}

void sub_100567424(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  sub_10052CF94( a1,  *(dispatch_group_s **)(v1 + 16),  v1 + v4,  *(void *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10056747C()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  unint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 10, v3 | 7);
}

uint64_t sub_10056773C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100567770()
{
  return sub_10052D764(*(void *)(v0 + 16), *(void *)(v0 + 24), *(void (**)(void *, void))(v0 + 32));
}

uint64_t sub_10056777C(uint64_t a1)
{
  return sub_1004FE52C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100567798(uint64_t a1)
{
  return sub_100501F64( a1,  *(void (**)(void *))(v1 + 16),  *(void *)(v1 + 24),  &qword_1009A49F0,  "Save failed: %@",  15LL);
}

uint64_t sub_1005677C4()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + *(int *)(v1 + 24);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  uint64_t v10 = v7 + *(int *)(v1 + 28);
  uint64_t v11 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1005678B8(void **a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconGroup(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_1005020F4( *a1,  *(void *)(v1 + 16),  v1 + v4,  *(void (**)(char *))v5,  *(void *)(v5 + 8),  &qword_1009A49F0,  type metadata accessor for OwnedBeaconGroup,  (void (*)(id))sub_1001CBBB8,  (uint64_t)sub_100567940);
}

uint64_t sub_100567940()
{
  return sub_10056F9C0((uint64_t)sub_100571B2C);
}

uint64_t sub_10056795C()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  unint64_t v6 = (v3 + ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8) & ~v3;
  uint64_t v15 = v6 + v5;
  uint64_t v16 = v3 | 7;
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + *(int *)(v1 + 24);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  uint64_t v11 = v7 + *(int *)(v1 + 28);
  uint64_t v12 = type metadata accessor for MACAddress(0LL);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL);
  v13(v11, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_100016F9C(*(void *)(v0 + v6), *(void *)(v0 + v6 + 8));
  v10(v0 + v6 + *(int *)(v1 + 24), v9);
  v13(v0 + v6 + *(int *)(v1 + 28), v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v15, v16);
}

void sub_100567AB8(uint64_t a1)
{
}

void sub_100567ADC(uint64_t a1, uint64_t (*a2)(void), uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v11 = *(void *)(a2(0LL) - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = (v12 + 24) & ~v12;
  unint64_t v14 = (*(void *)(v11 + 64) + v13 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1004FF628( a1,  *(void *)(v5 + 16),  v5 + v13,  *(void *)(v5 + v14),  v5 + ((v12 + v14 + 8) & ~v12),  a2,  a3,  a4,  a5);
}

void sub_100567B80(uint64_t a1)
{
}

uint64_t sub_100567B88(uint64_t a1)
{
  return sub_1004FE300( a1,  v1[2],  v1[3],  v1[4],  type metadata accessor for BeaconNamingRecord,  (uint64_t)&unk_100961818,  (uint64_t)sub_100567ED8,  (void (*)(uint64_t, void, uint64_t, uint64_t))sub_1004FC794);
}

uint64_t sub_100567BC4(uint64_t a1)
{
  return sub_100501F64( a1,  *(void (**)(void *))(v1 + 16),  *(void *)(v1 + 24),  &qword_1009A7DE0,  "Save failed: %@",  15LL);
}

uint64_t sub_100567BF0()
{
  uint64_t v1 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100567CE0(void **a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeaconNamingRecord(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_1005020F4( *a1,  *(void *)(v1 + 16),  v1 + v4,  *(void (**)(char *))v5,  *(void *)(v5 + 8),  &qword_1009A7DE0,  type metadata accessor for BeaconNamingRecord,  (void (*)(id))sub_1005DD0A4,  (uint64_t)sub_100567D68);
}

uint64_t sub_100567D68()
{
  return sub_100502474(v0[2], v0[3], v0[4], (uint64_t)sub_100021ABC, (uint64_t)sub_100571B40);
}

uint64_t sub_100567D94()
{
  uint64_t v1 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  unint64_t v7 = (v3 + ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8) & ~v3;
  uint64_t v8 = v7 + v5;
  swift_release();
  uint64_t v9 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v10 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL);
  v12(v10, v11);
  v12(v9 + *(int *)(v1 + 24), v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_100016F9C(*(void *)(v0 + v7), *(void *)(v0 + v7 + 8));
  v12(v0 + v7 + *(int *)(v1 + 20), v11);
  v12(v0 + v7 + *(int *)(v1 + 24), v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v8, v6);
}

void sub_100567ED8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for BeaconNamingRecord(0LL) - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  unint64_t v6 = (*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1004FEE3C( a1,  *(void *)(v1 + 16),  v1 + v5,  *(void *)(v1 + v6),  v1 + ((v4 + v6 + 8) & ~v4),  type metadata accessor for BeaconNamingRecord,  &qword_1009A7DE0,  (uint64_t)sub_100021ABC,  (uint64_t)sub_100571B40,  (uint64_t)sub_100021ABC,  (uint64_t)sub_100571B40);
}

uint64_t sub_100567F80(uint64_t a1)
{
  return sub_1004FE300( a1,  v1[2],  v1[3],  v1[4],  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_100961890,  (uint64_t)sub_10056857C,  (void (*)(uint64_t, void, uint64_t, uint64_t))sub_1004FC074);
}

uint64_t sub_100567FBC(uint64_t a1)
{
  return sub_100501F64( a1,  *(void (**)(void *))(v1 + 16),  *(void *)(v1 + 24),  (uint64_t *)&unk_1009B0830,  "Save failed: %@",  15LL);
}

uint64_t sub_100567FEC(void **a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_1005020F4( *a1,  *(void *)(v1 + 16),  v1 + v4,  *(void (**)(char *))v5,  *(void *)(v5 + 8),  (uint64_t *)&unk_1009B0830,  type metadata accessor for OwnedBeaconRecord,  (void (*)(id))sub_1005D1638,  (uint64_t)sub_100568074);
}

uint64_t sub_100568074()
{
  return sub_100502474(v0[2], v0[3], v0[4], (uint64_t)sub_100021ABC, (uint64_t)sub_100571B54);
}

uint64_t sub_1005680A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v3 = *((void *)v2 - 1);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v38 = *(void *)(v3 + 64);
  uint64_t v39 = *(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (v38 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  unint64_t v7 = v0 + v4 + v2[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(unint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  unint64_t v11 = v6 + v2[6];
  uint64_t v36 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v36))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      unint64_t v12 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      unint64_t v12 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      unint64_t v5 = v12;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v39 + v5;
  unint64_t v14 = v6 + v2[7];
  uint64_t v37 = *(unsigned int (**)(unint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v37(v14, 1LL, v8)) {
    v10(v14, v8);
  }
  uint64_t v15 = v10;
  uint64_t v16 = v13 + 8;
  uint64_t v17 = v6 + v2[8];
  uint64_t v18 = type metadata accessor for Date(0LL);
  unint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8LL);
  v19(v17, v18);
  sub_100016F9C(*(void *)(v6 + v2[9]), *(void *)(v6 + v2[9] + 8));
  unint64_t v20 = (uint64_t *)(v6 + v2[10]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 != 15) {
    sub_100016F9C(*v20, v21);
  }
  uint64_t v22 = v16 & ~v39;
  unint64_t v23 = (uint64_t *)(v6 + v2[11]);
  unint64_t v24 = v23[1];
  if (v24 >> 60 != 15) {
    sub_100016F9C(*v23, v24);
  }
  sub_100016F9C(*(void *)(v6 + v2[12]), *(void *)(v6 + v2[12] + 8));
  sub_100016F9C(*(void *)(v6 + v2[13]), *(void *)(v6 + v2[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v25 = v1;
  swift_release();
  uint64_t v26 = v16 & ~v39;
  uint64_t v27 = v25 + v22;
  sub_100016F9C(*(void *)(v25 + v22), *(void *)(v25 + v22 + 8));
  uint64_t v28 = v15;
  v15(v25 + v22 + v2[5], v8);
  uint64_t v29 = v25 + v22 + v2[6];
  switch(swift_getEnumCaseMultiPayload(v29, v36))
  {
    case 0u:
    case 4u:
      goto LABEL_17;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_17;
    case 2u:
      v15(v29, v8);
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_17;
    case 3u:
      v15(v29, v8);
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_17:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  unint64_t v30 = v27 + v2[7];
  if (!v37(v30, 1LL, v8)) {
    v28(v30, v8);
  }
  v19(v27 + v2[8], v18);
  sub_100016F9C(*(void *)(v27 + v2[9]), *(void *)(v27 + v2[9] + 8));
  unint64_t v31 = (uint64_t *)(v27 + v2[10]);
  unint64_t v32 = v31[1];
  if (v32 >> 60 != 15) {
    sub_100016F9C(*v31, v32);
  }
  unint64_t v33 = (uint64_t *)(v27 + v2[11]);
  unint64_t v34 = v33[1];
  if (v34 >> 60 != 15) {
    sub_100016F9C(*v33, v34);
  }
  sub_100016F9C(*(void *)(v27 + v2[12]), *(void *)(v27 + v2[12] + 8));
  sub_100016F9C(*(void *)(v27 + v2[13]), *(void *)(v27 + v2[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v25, v26 + v38, v39 | 7);
}

void sub_10056857C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 24) & ~v4;
  unint64_t v6 = (*(void *)(v3 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1004FEE3C( a1,  *(void *)(v1 + 16),  v1 + v5,  *(void *)(v1 + v6),  v1 + ((v4 + v6 + 8) & ~v4),  type metadata accessor for OwnedBeaconRecord,  (uint64_t *)&unk_1009B0830,  (uint64_t)sub_100021ABC,  (uint64_t)sub_100571B54,  (uint64_t)sub_100021ABC,  (uint64_t)sub_100571B54);
}

uint64_t sub_100568624()
{
  uint64_t v1 = (int *)type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + v1[5];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  v10(v7 + v1[6], v9);
  uint64_t v11 = v7 + v1[8];
  uint64_t v12 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(v11, v12);
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

void sub_100568714(void **a1, uint64_t a2)
{
}

void sub_100568730()
{
}

uint64_t sub_100568794()
{
  uint64_t v1 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

void sub_100568880(void **a1, uint64_t a2)
{
}

void sub_1005688A4( void **a1, uint64_t a2, uint64_t (*a3)(void), void (*a4)(void), uint64_t a5, uint64_t a6)
{
  uint64_t v13 = *(void *)(a3(0LL) - 8);
  unint64_t v14 = (*(unsigned __int8 *)(v13 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80);
  sub_1005033E8( *a1,  a2,  *(void *)(v6 + 16),  v6 + v14,  *(void *)(v6 + ((*(void *)(v13 + 64) + v14 + 7) & 0xFFFFFFFFFFFFF8LL)),  a3,  a4,  a5,  a6);
}

uint64_t sub_100568944()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100568968()
{
  return sub_10020F99C((void (*)(void))&_swift_release);
}

uint64_t sub_100568974(uint64_t a1)
{
  return sub_1002A58E4(a1, *(void (**)(uint64_t))(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_100568980(uint64_t a1)
{
  return sub_1002A4C44(a1, *(id *)(v1 + 16));
}

uint64_t sub_10056898C(id *a1)
{
  return sub_100565834( a1,  type metadata accessor for BeaconNamingRecord,  (void (*)(id))sub_1005DD0A4,  (void (*)(id *, char *))sub_1002B6684);
}

uint64_t sub_1005689A8(uint64_t a1)
{
  return sub_100501F64( a1,  *(void (**)(void *))(v1 + 16),  *(void *)(v1 + 24),  &qword_1009A7DE0,  "Update failed: %@",  17LL);
}

uint64_t sub_1005689D8(uint64_t a1)
{
  return sub_1002DDD88( a1,  type metadata accessor for BeaconNamingRecord,  (uint64_t (*)(uint64_t, unint64_t, void, void, void))sub_1002C3A7C);
}

uint64_t sub_1005689EC(uint64_t a1)
{
  return sub_100503298( a1,  *(void *)(v1 + 16),  *(id **)(v1 + 24),  *(void *)(v1 + 32),  type metadata accessor for BeaconNamingRecord,  (uint64_t)&unk_1009618E0,  (uint64_t)sub_100568880);
}

uint64_t sub_100568A20@<X0>(uint64_t *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100520F4C(a1, *(void **)(v2 + 24), a2);
}

uint64_t sub_100568A38(uint64_t a1)
{
  return sub_10067654C(a1, v1);
}

uint64_t sub_100568A40()
{
  return swift_deallocObject(v0, 33LL, 7LL);
}

void sub_100568A68(uint64_t a1)
{
}

uint64_t sub_100568A70(uint64_t a1)
{
  return sub_1004FE9B4(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100568A8C(uint64_t a1)
{
  return sub_100501F64( a1,  *(void (**)(void *))(v1 + 16),  *(void *)(v1 + 24),  (uint64_t *)&unk_1009AF770,  "Save failed: %@",  15LL);
}

uint64_t sub_100568AB8()
{
  uint64_t v1 = type metadata accessor for LeashRecord(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100568B78(void **a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for LeashRecord(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_1005020F4( *a1,  *(void *)(v1 + 16),  v1 + v4,  *(void (**)(char *))v5,  *(void *)(v5 + 8),  (uint64_t *)&unk_1009AF770,  type metadata accessor for LeashRecord,  (void (*)(id))sub_10077FFD0,  (uint64_t)sub_100568C00);
}

uint64_t sub_100568C00()
{
  return sub_10056F9C0((uint64_t)sub_100571AF0);
}

uint64_t sub_100568C1C()
{
  uint64_t v1 = type metadata accessor for LeashRecord(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  unint64_t v7 = (v3 + ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8) & ~v3;
  uint64_t v8 = v7 + v5;
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v9 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL);
  v11(v9, v10);
  swift_bridgeObjectRelease();
  swift_release();
  sub_100016F9C(*(void *)(v0 + v7), *(void *)(v0 + v7 + 8));
  v11(v0 + v7 + *(int *)(v1 + 20), v10);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v8, v6);
}

void sub_100568D18(uint64_t a1)
{
}

void sub_100568D40(uint64_t a1)
{
}

uint64_t sub_100568D48(uint64_t a1)
{
  return sub_1004FE770(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100568D64(uint64_t a1)
{
  return sub_100501F64( a1,  *(void (**)(void *))(v1 + 16),  *(void *)(v1 + 24),  (uint64_t *)&unk_1009AF730,  "Save failed: %@",  15LL);
}

uint64_t sub_100568D90()
{
  uint64_t v1 = type metadata accessor for SafeLocation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100568E60(void **a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SafeLocation(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_1005020F4( *a1,  *(void *)(v1 + 16),  v1 + v4,  *(void (**)(char *))v5,  *(void *)(v5 + 8),  (uint64_t *)&unk_1009AF730,  type metadata accessor for SafeLocation,  (void (*)(id))sub_100619684,  (uint64_t)sub_100568EE8);
}

uint64_t sub_100568EE8()
{
  return sub_10056F9C0((uint64_t)sub_100571ADC);
}

uint64_t sub_100568F04()
{
  uint64_t v1 = type metadata accessor for SafeLocation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  unint64_t v7 = (v3 + ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8) & ~v3;
  uint64_t v8 = v7 + v5;
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v9 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL);
  v11(v9, v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_100016F9C(*(void *)(v0 + v7), *(void *)(v0 + v7 + 8));
  v11(v0 + v7 + *(int *)(v1 + 20), v10);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v8, v6);
}

void sub_100569020(uint64_t a1)
{
}

uint64_t sub_100569048(void *a1)
{
  return sub_10056FB90( a1,  type metadata accessor for SafeLocation,  (uint64_t (*)(void, void, void, unint64_t, void, void))sub_100140A4C);
}

uint64_t sub_100569060()
{
  uint64_t v1 = type metadata accessor for SafeLocation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  swift_release();
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100569138(uint64_t a1)
{
  return sub_10056FD04( a1,  type metadata accessor for SafeLocation,  (uint64_t (*)(uint64_t, void, void, unint64_t, void, void))sub_1001412F0);
}

uint64_t sub_10056914C()
{
  return sub_10020F99C((void (*)(void))&_swift_release);
}

uint64_t sub_100569158()
{
  return sub_10057010C((void (*)(void))&_swift_release, 40LL);
}

unint64_t sub_100569168()
{
  unint64_t result = qword_1009B28E8;
  if (!qword_1009B28E8)
  {
    uint64_t v1 = sub_100004B78(&qword_1009B28E0);
    sub_100007864(&qword_1009B28F0, type metadata accessor for SecureLocationsCachedSharingKey, (uint64_t)&unk_100807770);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1009B28E8);
  }

  return result;
}

uint64_t sub_1005691E4()
{
  return sub_10057010C((void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_1005691F4(uint64_t a1)
{
  return sub_100582884(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100569200()
{
  return sub_10020F99C((void (*)(void))&_swift_release);
}

uint64_t sub_10056920C()
{
  return sub_10057010C((void (*)(void))&_swift_release, 40LL);
}

void sub_100569220(uint64_t a1)
{
}

uint64_t sub_100569228(uint64_t a1)
{
  return sub_1004FEBF8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100569244(uint64_t a1)
{
  return sub_100501F64( a1,  *(void (**)(void *))(v1 + 16),  *(void *)(v1 + 24),  &qword_1009A7E08,  "Save failed: %@",  15LL);
}

uint64_t sub_100569270()
{
  uint64_t v1 = (int *)type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + v1[5];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  v10(v7 + v1[6], v9);
  uint64_t v11 = v7 + v1[8];
  uint64_t v12 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(v11, v12);
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100569364(void **a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for KeyAlignmentRecord(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_1005020F4( *a1,  *(void *)(v1 + 16),  v1 + v4,  *(void (**)(char *))v5,  *(void *)(v5 + 8),  &qword_1009A7E08,  type metadata accessor for KeyAlignmentRecord,  (void (*)(id))sub_100039634,  (uint64_t)sub_1005693EC);
}

uint64_t sub_1005693EC()
{
  return sub_10056F9C0((uint64_t)sub_100571B68);
}

uint64_t sub_100569408()
{
  uint64_t v1 = (int *)type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v16 = v3 | 7;
  unint64_t v6 = (v3 + ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8) & ~v3;
  uint64_t v7 = v6 + v5;
  swift_release();
  uint64_t v8 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v9 = v0 + v4 + v1[5];
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL);
  v11(v9, v10);
  v11(v8 + v1[6], v10);
  uint64_t v12 = v8 + v1[8];
  uint64_t v13 = type metadata accessor for Date(0LL);
  unint64_t v14 = *(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL);
  v14(v12, v13);
  swift_release();
  sub_100016F9C(*(void *)(v0 + v6), *(void *)(v0 + v6 + 8));
  v11(v0 + v6 + v1[5], v10);
  v11(v0 + v6 + v1[6], v10);
  v14(v0 + v6 + v1[8], v13);
  return swift_deallocObject(v0, v7, v16);
}

uint64_t sub_100569550(uint64_t a1)
{
  return sub_100569564( a1,  type metadata accessor for KeyAlignmentRecord,  (uint64_t (*)(uint64_t, void, uint64_t, void, unint64_t))sub_1004FFDD4);
}

uint64_t sub_100569564( uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, void, uint64_t, void, unint64_t))
{
  uint64_t v5 = *(void *)(a2(0LL) - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v6 + 24) & ~v6;
  unint64_t v8 = (*(void *)(v5 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return a3(a1, *(void *)(v3 + 16), v3 + v7, *(void *)(v3 + v8), v3 + ((v6 + v8 + 8) & ~v6));
}

uint64_t sub_1005695DC()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | 7);
}

uint64_t sub_100569894(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (uint64_t *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  return sub_10051F72C(a1, *(void *)(v1 + 16), v1 + v4, *v5, v5[1]);
}

uint64_t sub_1005698EC()
{
  uint64_t v1 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v40 = *(void *)(v7 + 64);
  uint64_t v10 = (uint64_t *)(v0 + v4);
  if (swift_getEnumCaseMultiPayload(v10, v1) == 1)
  {
    swift_errorRelease(*v10);
  }

  else
  {
    uint64_t v39 = v9;
    sub_100016F9C(*v10, v10[1]);
    uint64_t v11 = (char *)v10 + v6[5];
    uint64_t v12 = type metadata accessor for UUID(0LL);
    uint64_t v13 = *(void *)(v12 - 8);
    uint64_t v14 = *(void (**)(char *, uint64_t))(v13 + 8);
    v14(v11, v12);
    uint64_t v15 = (char *)v10 + v6[6];
    uint64_t v16 = type metadata accessor for StableIdentifier(0LL);
    switch(swift_getEnumCaseMultiPayload(v15, v16))
    {
      case 0u:
      case 4u:
        goto LABEL_7;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 2u:
        v14(v15, v12);
        sub_100004AEC((uint64_t *)&unk_1009B0520);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 3u:
        v14(v15, v12);
        sub_100004AEC((uint64_t *)&unk_1009AF840);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_7:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }

    unint64_t v17 = (char *)v10 + v6[7];
    uint64_t v18 = (char *)v10 + v6[8];
    uint64_t v19 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v19 - 8) + 8LL))(v18, v19);
    sub_100016F9C(*(uint64_t *)((char *)v10 + v6[9]), *(uint64_t *)((char *)v10 + v6[9] + 8));
    unint64_t v20 = (uint64_t *)((char *)v10 + v6[10]);
    unint64_t v21 = v20[1];
    if (v21 >> 60 != 15) {
      sub_100016F9C(*v20, v21);
    }
    uint64_t v22 = (uint64_t *)((char *)v10 + v6[11]);
    unint64_t v23 = v22[1];
    uint64_t v9 = v39;
    if (v23 >> 60 != 15) {
      sub_100016F9C(*v22, v23);
    }
    sub_100016F9C(*(uint64_t *)((char *)v10 + v6[12]), *(uint64_t *)((char *)v10 + v6[12] + 8));
    sub_100016F9C(*(uint64_t *)((char *)v10 + v6[13]), *(uint64_t *)((char *)v10 + v6[13] + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  uint64_t v24 = v0 + v9;
  sub_100016F9C(*(void *)(v0 + v9), *(void *)(v0 + v9 + 8));
  uint64_t v25 = v0 + v9 + v6[5];
  uint64_t v26 = type metadata accessor for UUID(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v27 + 8);
  v28(v25, v26);
  uint64_t v29 = v0 + v9 + v6[6];
  uint64_t v30 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v29, v30))
  {
    case 0u:
    case 4u:
      goto LABEL_19;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    case 2u:
      v28(v29, v26);
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_19;
    case 3u:
      v28(v29, v26);
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_19:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v31 = v24 + v6[7];
  uint64_t v32 = v24 + v6[8];
  uint64_t v33 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v33 - 8) + 8LL))(v32, v33);
  sub_100016F9C(*(void *)(v24 + v6[9]), *(void *)(v24 + v6[9] + 8));
  unint64_t v34 = (uint64_t *)(v24 + v6[10]);
  unint64_t v35 = v34[1];
  if (v35 >> 60 != 15) {
    sub_100016F9C(*v34, v35);
  }
  uint64_t v36 = (uint64_t *)(v24 + v6[11]);
  unint64_t v37 = v36[1];
  if (v37 >> 60 != 15) {
    sub_100016F9C(*v36, v37);
  }
  sub_100016F9C(*(void *)(v24 + v6[12]), *(void *)(v24 + v6[12] + 8));
  sub_100016F9C(*(void *)(v24 + v6[13]), *(void *)(v24 + v6[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject( v0,  ((((v40 + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 16,  v3 | v8 | 7);
}

uint64_t sub_100569E34()
{
  uint64_t v1 = *(void *)(sub_100004AEC((uint64_t *)&unk_1009B0830) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10051FA34( v0 + v2,  v0 + v5,  *(void *)(v0 + v6),  *(void (**)(void *))(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_100569EC4()
{
  return sub_10051DC2C(*(void (**)(uint64_t *))(v0 + 16), *(void *)(v0 + 24), 14);
}

uint64_t sub_100569EE0@<X0>(void *a1@<X8>)
{
  return sub_10052FD68( *(void **)(v1 + 16),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void **)(v1 + 48),  type metadata accessor for LocationProvider,  (uint64_t)&unk_100961F70,  (uint64_t)sub_1005651DC,  a1,  (uint64_t)sub_100154688,  (uint64_t)&unk_100961F88,  (uint64_t)sub_100571C38,  &qword_1009A2440,  (uint64_t (*)(void))sub_100569F6C,  &qword_1009B2918);
}

uint64_t sub_100569F5C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_100569F6C()
{
  unint64_t result = qword_1009B2908;
  if (!qword_1009B2908)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A2440);
    sub_100007864( &qword_1009B2910,  type metadata accessor for LocationProvider,  (uint64_t)&protocol conformance descriptor for LocationProvider);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1009B2908);
  }

  return result;
}

uint64_t sub_100569FE8@<X0>(void *a1@<X8>)
{
  return sub_10052FD68( *(void **)(v1 + 16),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void **)(v1 + 48),  type metadata accessor for NotifyWhenFoundRecord,  (uint64_t)&unk_100961FC0,  (uint64_t)sub_1005651DC,  a1,  (uint64_t)sub_100154688,  (uint64_t)&unk_100961FD8,  (uint64_t)sub_100571C38,  &qword_1009AA900,  (uint64_t (*)(void))sub_10056A074,  &qword_1009B2930);
}

uint64_t sub_10056A064()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_10056A074()
{
  unint64_t result = qword_1009B2928;
  if (!qword_1009B2928)
  {
    uint64_t v1 = sub_100004B78(&qword_1009AA900);
    sub_100007864(&qword_1009A4D50, type metadata accessor for NotifyWhenFoundRecord, (uint64_t)&unk_1007F4AEC);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1009B2928);
  }

  return result;
}

uint64_t sub_10056A0F0@<X0>(char *a1@<X8>)
{
  return sub_100532690( *(void *)(v1 + 16),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  type metadata accessor for BeaconNamingRecord,  &qword_1009AE490,  (uint64_t (*)(void))sub_10056A13C,  a1,  &qword_1009B2950);
}

unint64_t sub_10056A13C()
{
  unint64_t result = qword_1009B2940;
  if (!qword_1009B2940)
  {
    uint64_t v1 = sub_100004B78(&qword_1009AE490);
    sub_100007864(&qword_1009B2948, type metadata accessor for BeaconNamingRecord, (uint64_t)&unk_10080B5C0);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1009B2940);
  }

  return result;
}

uint64_t sub_10056A1B8@<X0>(void *a1@<X8>)
{
  return sub_10052FD68( *(void **)(v1 + 16),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void **)(v1 + 48),  type metadata accessor for ShareRecord,  (uint64_t)&unk_100962010,  (uint64_t)sub_1005651DC,  a1,  (uint64_t)sub_100154688,  (uint64_t)&unk_100962028,  (uint64_t)sub_100571C38,  &qword_1009A6108,  (uint64_t (*)(void))sub_10056A244,  &qword_1009B2968);
}

uint64_t sub_10056A234()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_10056A244()
{
  unint64_t result = qword_1009B2960;
  if (!qword_1009B2960)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A6108);
    sub_100007864(&qword_10099DA08, type metadata accessor for ShareRecord, (uint64_t)&unk_1007E70A8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1009B2960);
  }

  return result;
}

uint64_t sub_10056A2C0@<X0>(void *a1@<X8>)
{
  return sub_10052FD68( *(void **)(v1 + 16),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void **)(v1 + 48),  type metadata accessor for OwnedBeaconGroup,  (uint64_t)&unk_100962060,  (uint64_t)sub_1005651DC,  a1,  (uint64_t)sub_100154688,  (uint64_t)&unk_100962078,  (uint64_t)sub_100571C38,  &qword_1009AA830,  (uint64_t (*)(void))sub_10056A34C,  &qword_1009B2980);
}

uint64_t sub_10056A33C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_10056A34C()
{
  unint64_t result = qword_1009B2978;
  if (!qword_1009B2978)
  {
    uint64_t v1 = sub_100004B78(&qword_1009AA830);
    sub_100007864(&qword_1009A5818, type metadata accessor for OwnedBeaconGroup, (uint64_t)&unk_1007F5E58);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1009B2978);
  }

  return result;
}

uint64_t sub_10056A3C8@<X0>(void *a1@<X8>)
{
  return sub_10052FD68( *(void **)(v1 + 16),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void **)(v1 + 48),  type metadata accessor for WildModeAssociationRecord,  (uint64_t)&unk_1009620B0,  (uint64_t)sub_1005651DC,  a1,  (uint64_t)sub_100154688,  (uint64_t)&unk_1009620C8,  (uint64_t)sub_100571C38,  &qword_1009A4890,  (uint64_t (*)(void))sub_10056A454,  &qword_1009B2998);
}

uint64_t sub_10056A444()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_10056A454()
{
  unint64_t result = qword_1009B2990;
  if (!qword_1009B2990)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A4890);
    sub_100007864(&qword_1009A0F30, type metadata accessor for WildModeAssociationRecord, (uint64_t)&unk_1007EBA54);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1009B2990);
  }

  return result;
}

uint64_t sub_10056A4D0@<X0>(void *a1@<X8>)
{
  return sub_10052FD68( *(void **)(v1 + 16),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void **)(v1 + 48),  type metadata accessor for SecureLocationsCachedPayload,  (uint64_t)&unk_100962100,  (uint64_t)sub_1005651DC,  a1,  (uint64_t)sub_100154688,  (uint64_t)&unk_100962118,  (uint64_t)sub_100571C38,  &qword_1009A7110,  (uint64_t (*)(void))sub_10056A55C,  &qword_1009B29B0);
}

uint64_t sub_10056A54C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_10056A55C()
{
  unint64_t result = qword_1009B29A8;
  if (!qword_1009B29A8)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A7110);
    sub_100007864(&qword_1009A71D8, type metadata accessor for SecureLocationsCachedPayload, (uint64_t)&unk_1007F8390);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1009B29A8);
  }

  return result;
}

uint64_t sub_10056A5D8@<X0>(void *a1@<X8>)
{
  return sub_100530C3C( *(void **)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void **)(v1 + 48),  a1);
}

uint64_t sub_10056A5F8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11)
{
  if (a2)
  {
    swift_bridgeObjectRelease(a2);
    swift_bridgeObjectRelease(a4);
    swift_bridgeObjectRelease(a6);
    return swift_bridgeObjectRelease(a11);
  }

  return result;
}

uint64_t sub_10056A648()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_10056A658()
{
  unint64_t result = qword_1009B29D0;
  if (!qword_1009B29D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10081351C, &type metadata for SecureLocationLabel);
    atomic_store(result, (unint64_t *)&qword_1009B29D0);
  }

  return result;
}

uint64_t sub_10056A69C@<X0>(void *a1@<X8>)
{
  return sub_10052FD68( *(void **)(v1 + 16),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void **)(v1 + 48),  type metadata accessor for SecureLocationsCachedSharedKey,  (uint64_t)&unk_1009621A0,  (uint64_t)sub_1005651DC,  a1,  (uint64_t)sub_100154688,  (uint64_t)&unk_1009621B8,  (uint64_t)sub_100571C38,  &qword_1009A7128,  (uint64_t (*)(void))sub_10056A728,  &qword_1009B29F8);
}

uint64_t sub_10056A718()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_10056A728()
{
  unint64_t result = qword_1009B29E8;
  if (!qword_1009B29E8)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A7128);
    sub_100007864(&qword_1009B29F0, type metadata accessor for SecureLocationsCachedSharedKey, (uint64_t)&unk_100807998);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1009B29E8);
  }

  return result;
}

uint64_t sub_10056A7A4@<X0>(void *a1@<X8>)
{
  return sub_10052FD68( *(void **)(v1 + 16),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void **)(v1 + 48),  type metadata accessor for LostModeInfoRecord,  (uint64_t)&unk_1009621F0,  (uint64_t)sub_1005651DC,  a1,  (uint64_t)sub_100154688,  (uint64_t)&unk_100962208,  (uint64_t)sub_100571C38,  &qword_1009A7DB8,  (uint64_t (*)(void))sub_10056A830,  &qword_1009B2A10);
}

uint64_t sub_10056A820()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_10056A830()
{
  unint64_t result = qword_1009B2A08;
  if (!qword_1009B2A08)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A7DB8);
    sub_100007864(&qword_10099CB28, type metadata accessor for LostModeInfoRecord, (uint64_t)&unk_1007E416C);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1009B2A08);
  }

  return result;
}

uint64_t sub_10056A8AC@<X0>(void *a1@<X8>)
{
  return sub_10052FD68( *(void **)(v1 + 16),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void **)(v1 + 48),  type metadata accessor for LostModeRecord,  (uint64_t)&unk_100962240,  (uint64_t)sub_1005651DC,  a1,  (uint64_t)sub_100154688,  (uint64_t)&unk_100962258,  (uint64_t)sub_100571C38,  &qword_1009AA840,  (uint64_t (*)(void))sub_10056A938,  &qword_1009B2A28);
}

uint64_t sub_10056A928()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_10056A938()
{
  unint64_t result = qword_1009B2A20;
  if (!qword_1009B2A20)
  {
    uint64_t v1 = sub_100004B78(&qword_1009AA840);
    sub_100007864( (unint64_t *)&unk_1009B6760,  type metadata accessor for LostModeRecord,  (uint64_t)&unk_10080CC64);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1009B2A20);
  }

  return result;
}

uint64_t sub_10056A9B4@<X0>(void *a1@<X8>)
{
  return sub_10052FD68( *(void **)(v1 + 16),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void **)(v1 + 48),  type metadata accessor for LeashRecord,  (uint64_t)&unk_100962290,  (uint64_t)sub_1005651DC,  a1,  (uint64_t)sub_100154688,  (uint64_t)&unk_1009622A8,  (uint64_t)sub_100571C38,  &qword_1009A7D90,  (uint64_t (*)(void))sub_10056AA40,  &qword_1009B2A40);
}

uint64_t sub_10056AA30()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_10056AA40()
{
  unint64_t result = qword_1009B2A38;
  if (!qword_1009B2A38)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A7D90);
    sub_100007864((unint64_t *)&unk_1009BF8C0, type metadata accessor for LeashRecord, (uint64_t)&unk_10081B454);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1009B2A38);
  }

  return result;
}

uint64_t sub_10056AABC@<X0>(void *a1@<X8>)
{
  return sub_10052FD68( *(void **)(v1 + 16),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void **)(v1 + 48),  type metadata accessor for PairingErrorRecord,  (uint64_t)&unk_1009622E0,  (uint64_t)sub_1005651DC,  a1,  (uint64_t)sub_100154688,  (uint64_t)&unk_1009622F8,  (uint64_t)sub_100571C38,  &qword_1009B2A48,  (uint64_t (*)(void))sub_10056AB48,  &qword_1009B2A68);
}

uint64_t sub_10056AB38()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_10056AB48()
{
  unint64_t result = qword_1009B2A58;
  if (!qword_1009B2A58)
  {
    uint64_t v1 = sub_100004B78(&qword_1009B2A48);
    sub_100007864(&qword_1009B2A60, type metadata accessor for PairingErrorRecord, (uint64_t)&unk_10080A93C);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1009B2A58);
  }

  return result;
}

uint64_t sub_10056ABC4@<X0>(void *a1@<X8>)
{
  return sub_10052FD68( *(void **)(v1 + 16),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void **)(v1 + 48),  type metadata accessor for KeyAlignmentRecord,  (uint64_t)&unk_100962330,  (uint64_t)sub_1005651DC,  a1,  (uint64_t)sub_100154688,  (uint64_t)&unk_100962348,  (uint64_t)sub_100571C38,  &qword_1009A2430,  (uint64_t (*)(void))sub_10056AC50,  &qword_1009B2A80);
}

uint64_t sub_10056AC40()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_10056AC50()
{
  unint64_t result = qword_1009B2A78;
  if (!qword_1009B2A78)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A2430);
    sub_100007864(&qword_10099D6C0, type metadata accessor for KeyAlignmentRecord, (uint64_t)&unk_1007E6824);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1009B2A78);
  }

  return result;
}

uint64_t sub_10056ACCC@<X0>(void *a1@<X8>)
{
  return sub_10052FD68( *(void **)(v1 + 16),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void **)(v1 + 48),  type metadata accessor for SafeLocation,  (uint64_t)&unk_100962380,  (uint64_t)sub_1005651DC,  a1,  (uint64_t)sub_100154688,  (uint64_t)&unk_100962398,  (uint64_t)sub_100571C38,  (uint64_t *)&unk_1009AF740,  (uint64_t (*)(void))sub_10056AD58,  &qword_1009B2A98);
}

uint64_t sub_10056AD48()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_10056AD58()
{
  unint64_t result = qword_1009B2A90;
  if (!qword_1009B2A90)
  {
    uint64_t v1 = sub_100004B78((uint64_t *)&unk_1009AF740);
    sub_100007864((unint64_t *)&unk_1009B8180, type metadata accessor for SafeLocation, (uint64_t)&unk_10080F914);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1009B2A90);
  }

  return result;
}

uint64_t sub_10056ADD4@<X0>(void *a1@<X8>)
{
  return sub_10052FD68( *(void **)(v1 + 16),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void **)(v1 + 48),  type metadata accessor for SharedBeaconRecord,  (uint64_t)&unk_1009623D0,  (uint64_t)sub_1005651DC,  a1,  (uint64_t)sub_100154688,  (uint64_t)&unk_1009623E8,  (uint64_t)sub_100571C38,  (uint64_t *)&unk_1009AE470,  (uint64_t (*)(void))sub_10056AE60,  &qword_1009B2AB8);
}

uint64_t sub_10056AE50()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_10056AE60()
{
  unint64_t result = qword_1009B2AA8;
  if (!qword_1009B2AA8)
  {
    uint64_t v1 = sub_100004B78((uint64_t *)&unk_1009AE470);
    sub_100007864(&qword_1009B2AB0, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_10081ACE4);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1009B2AA8);
  }

  return result;
}

uint64_t sub_10056AEDC()
{
  return sub_10057010C((void (*)(void))&_swift_release, 48LL);
}

uint64_t sub_10056AEEC()
{
  return sub_100513564(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_10056AEF8()
{
  return sub_10020F99C((void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10056AF04()
{
  uint64_t v1 = *(void (**)(void))(v0 + 16);
  sub_10054A5FC(*(void *)(v0 + 32));
  v1();
  return swift_release();
}

uint64_t sub_10056AF50(uint64_t a1)
{
  return sub_10050FC6C(a1, *(void *)(v1 + 16)) & 1;
}

uint64_t sub_10056AF6C(uint64_t a1)
{
  return sub_10056E4D0( a1,  type metadata accessor for WildModeAssociationRecord,  (uint64_t (*)(uint64_t, uint64_t))&static MACAddress.== infix(_:_:)) & 1;
}

uint64_t sub_10056AF94()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10056B234(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8) + 80LL);
  uint64_t v5 = *(void *)(v1 + 16);
  uint64_t v6 = v1 + ((v4 + 24) & ~v4);
  uint64_t v7 = (void *)swift_task_alloc(dword_1009B2ADC);
  *(void *)(v2 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100015D58;
  return sub_10050A95C(a1, v5, v6);
}

uint64_t sub_10056B2B4(uint64_t a1)
{
  return sub_10050A9E0(a1, v1[2], v1[3], v1[4], v1[5]);
}

uint64_t sub_10056B2D0()
{
  uint64_t v1 = sub_100004AEC((uint64_t *)&unk_1009AE460);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = v0 + *(int *)(v1 + 36) + v4;
  uint64_t v8 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10056B34C(uint64_t a1)
{
  return sub_10056B360(a1, (uint64_t *)&unk_1009AE460, (uint64_t (*)(uint64_t, uint64_t))sub_10050AC48);
}

uint64_t sub_10056B360(uint64_t a1, uint64_t *a2, uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = *(unsigned __int8 *)(*(void *)(sub_100004AEC(a2) - 8) + 80LL);
  return a3(a1, v3 + ((v5 + 16) & ~v5));
}

uint64_t sub_10056B3AC()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (int *)type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = *(void *)(v7 + 64);
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009AE460);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = (v9 + v10 + v13) & ~v13;
  uint64_t v21 = v14 + *(void *)(v12 + 64);
  uint64_t v15 = v3 | v8 | v13 | 7;
  swift_release();
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v16(v0 + v4, v1);
  sub_100016F9C(*(void *)(v0 + v9), *(void *)(v0 + v9 + 8));
  v16(v0 + v9 + v6[5], v1);
  v16(v0 + v9 + v6[6], v1);
  uint64_t v17 = v0 + v9 + v6[8];
  uint64_t v18 = type metadata accessor for Date(0LL);
  unint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8LL);
  v19(v17, v18);
  v19(v0 + *(int *)(v11 + 36) + v14, v18);
  return swift_deallocObject(v0, v21, v15);
}

void sub_10056B4F8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for KeyAlignmentRecord(0LL) - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(unsigned __int8 *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009AE460) - 8) + 80LL);
  sub_10050ACC0(a1, *(void *)(v1 + 16), v1 + v4, v1 + v7, v1 + ((v7 + v8 + v9) & ~v9));
}

uint64_t sub_10056B594()
{
  return sub_10020F99C((void (*)(void))&_swift_release);
}

uint64_t sub_10056B5A0()
{
  return sub_10057010C((void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_10056B5B0@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedSharedBeaconRecords);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10056B5D4@<X0>(void *a1@<X8>)
{
  return sub_1005079D0(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_10056B5EC@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedOwnedBeaconRecords);
  *a1 = v2;
  return swift_bridgeObjectRetain(v2);
}

uint64_t sub_10056B610()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v3 = *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedOwnedBeaconRecords);
  *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_cachedOwnedBeaconRecords) = v1;
  swift_bridgeObjectRetain(v1);
  return swift_bridgeObjectRelease(v3);
}

uint64_t sub_10056B650@<X0>(void *a1@<X8>)
{
  return sub_10052FD68( *(void **)(v1 + 16),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void **)(v1 + 48),  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_1009625B0,  (uint64_t)sub_1005651DC,  a1,  (uint64_t)sub_100154688,  (uint64_t)&unk_1009625C8,  (uint64_t)sub_100571C38,  (uint64_t *)&unk_1009A9C30,  (uint64_t (*)(void))sub_10056B6DC,  &qword_1009B2B28);
}

uint64_t sub_10056B6CC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_10056B6DC()
{
  unint64_t result = qword_1009B2B20;
  if (!qword_1009B2B20)
  {
    uint64_t v1 = sub_100004B78((uint64_t *)&unk_1009A9C30);
    sub_100007864( (unint64_t *)&unk_1009B5340,  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_10080B010);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1009B2B20);
  }

  return result;
}

uint64_t sub_10056B758(uint64_t a1)
{
  return sub_100153CC0(a1) & 1;
}

uint64_t sub_10056B770()
{
  uint64_t v1 = (int *)type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  uint64_t v9 = v0 + v4 + v1[10];
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  uint64_t v13 = v0 + v4 + v1[12];
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | 7);
}

void sub_10056B8A8()
{
  uint64_t v1 = *(void *)(type metadata accessor for BeaconEstimatedLocation(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1004F8EE0( v0 + v2,  *(void *)(v0 + v3),  *(void (**)(uint64_t))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void (**)(uint64_t))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_10056B8F8()
{
  uint64_t v1 = (int *)type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v15 = *(void *)(v2 + 64);
  uint64_t v16 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v14 = *(void *)(v5 + 64);
  swift_release();
  sub_100016F9C(*(void *)(v0 + v3), *(void *)(v0 + v3 + 8));
  unint64_t v7 = v0 + v3 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void (**)(unint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
  v9(v7, v8);
  v9(v0 + v3 + v1[6], v8);
  uint64_t v10 = *(void (**)(unint64_t, uint64_t))(v5 + 8);
  v10(v0 + v3 + v1[10], v4);
  unint64_t v11 = v0 + v3 + v1[12];
  unint64_t v12 = (v3 + v15 + v6) & ~v6;
  swift_bridgeObjectRelease();
  v10(v0 + v12, v4);
  swift_release();
  return swift_deallocObject(v0, ((v14 + v12 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16, v16 | v6 | 7);
}

uint64_t sub_10056BA64()
{
  uint64_t v1 = *(void *)(type metadata accessor for BeaconEstimatedLocation(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for Date(0LL) - 8);
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v0 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_1004FAF54(*(void *)(v0 + 16), v0 + v2, v0 + v5, *(void (**)(_BYTE *))v6, *(void *)(v6 + 8));
}

void sub_10056BAE0()
{
}

uint64_t sub_10056BB44()
{
  uint64_t v1 = (int *)type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  uint64_t v9 = v0 + v4 + v1[10];
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  unint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  uint64_t v13 = v0 + v4 + v1[12];
  unint64_t v14 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_bridgeObjectRelease();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + v14));
  return swift_deallocObject(v0, v14 + 40, v3 | 7);
}

uint64_t sub_10056BC70()
{
  uint64_t v1 = *(void *)(type metadata accessor for BeaconEstimatedLocation(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1004FBBE0(*(void *)(v0 + 16), v0 + v2, v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL));
}

uint64_t sub_10056BCB4(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v4 = type metadata accessor for BeaconEstimatedLocation(0LL);
  return static Date.< infix(_:_:)(a1 + *(int *)(v4 + 40), v3) & 1;
}

uint64_t sub_10056BD00()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10056BD24()
{
  return sub_1004F7B4C(v0);
}

uint64_t sub_10056BD2C(uint64_t a1)
{
  return sub_100676B04(a1, v1);
}

uint64_t sub_10056BD44()
{
  return sub_10079942C(v0);
}

uint64_t sub_10056BD4C(uint64_t a1)
{
  return sub_1004F80D4(a1, v1);
}

uint64_t sub_10056BD54()
{
  unint64_t v2 = (void *)swift_task_alloc(dword_1009B2B4C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *unint64_t v2 = v1;
  v2[1] = sub_100015D58;
  return sub_100511D20(v0);
}

uint64_t sub_10056BD9C(uint64_t a1)
{
  return sub_100799648(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_10056BDA4()
{
  return sub_10020F99C((void (*)(void))&_swift_release);
}

uint64_t sub_10056BDB0()
{
  return sub_10057010C((void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_10056BDC0@<X0>(void *a1@<X8>)
{
  return sub_1005130B4(a1);
}

uint64_t sub_10056BDC8()
{
  uint64_t v18 = type metadata accessor for UUID(0LL);
  uint64_t v1 = *(void *)(v18 - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v3 + v4 + v7) & ~v7;
  uint64_t v9 = *(void *)(v6 + 64);
  uint64_t v10 = type metadata accessor for BeaconStatus(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = (v8 + v9 + v12) & ~v12;
  unint64_t v19 = ((*(void *)(v11 + 64) + v13 + 9) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  uint64_t v20 = v2 | v7 | v12 | 7;
  swift_release();
  uint64_t v14 = v0 + v3;
  uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v1 + 8);
  v15(v14, v18);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v16(v0 + v8, v5);
  v15(v0 + v13, v18);
  v16(v0 + v13 + *(int *)(v10 + 24), v5);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v19, v20);
}

uint64_t sub_10056BEF8()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for Date(0LL) - 8);
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for BeaconStatus(0LL) - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  return sub_1005105F0( *(void *)(v0 + 16),  v0 + v2,  v0 + v5,  v0 + v8,  *(unsigned __int8 *)(v0 + v8 + *(void *)(v7 + 64)),  *(unsigned __int8 *)(v0 + v8 + *(void *)(v7 + 64) + 1),  *(void **)(v0 + ((v8 + *(void *)(v7 + 64) + 9) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10056BFA0()
{
  uint64_t v1 = type metadata accessor for BeaconStatus(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 24));
  uint64_t v7 = v0 + v4;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  uint64_t v9 = v7 + *(int *)(v1 + 24);
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v9, v10);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10056C054()
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for BeaconStatus(0LL) - 8) + 80LL);
  char v3 = *(_BYTE *)(v0 + 16);
  uint64_t v4 = v0 + 24;
  uint64_t v5 = v0 + ((v2 + 64) & ~v2);
  uint64_t v6 = swift_task_alloc(dword_1009B2B5C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)uint64_t v6 = v1;
  *(void *)(v6 + 8) = sub_100015D58;
  *(void *)(v6 + 224) = v4;
  *(void *)(v6 + 232) = v5;
  *(_BYTE *)(v6 + 296) = v3;
  return swift_task_switch(sub_1005115F0, 0LL, 0LL);
}

uint64_t sub_10056C0E0()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_1009B2B4C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000159BC;
  return sub_100511D20(v0);
}

uint64_t sub_10056C128()
{
  return sub_10055ECB0(v0);
}

uint64_t sub_10056C130()
{
  return sub_10020F99C((void (*)(void))&_swift_release);
}

uint64_t sub_10056C13C()
{
  return sub_10057010C((void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_10056C14C(uint64_t a1)
{
  return sub_1004F7C08(a1, v1);
}

uint64_t sub_10056C164()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_1009B2B74);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100015D58;
  v2[15] = v0;
  return swift_task_switch(sub_1004F7F44, 0LL, 0LL);
}

uint64_t sub_10056C1C0()
{
  return sub_10056E530((void (*)(void))&_swift_release, 32LL);
}

uint64_t sub_10056C1D0()
{
  return sub_1004F7E10(*(void *)(v0 + 16), *(uint64_t **)(v0 + 24));
}

uint64_t sub_10056C1D8(uint64_t a1)
{
  return sub_100527CF0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10056C1F0()
{
  return sub_10056E530((void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_10056C200(char a1)
{
  return sub_100527DB8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(uint8_t **)(v1 + 32));
}

uint64_t sub_10056C20C(uint64_t a1)
{
  return sub_100527AF0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

BOOL sub_10056C224(unsigned __int8 *a1)
{
  return sub_1004E4D74(*a1, *(void *)(v1 + 16));
}

uint64_t sub_10056C244()
{
  return sub_10057010C((void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_10056C254(unsigned __int8 *a1)
{
  uint64_t v2 = *(uint64_t (**)(BOOL))(v1 + 24);
  int v3 = *a1;
  Transaction.capture()();
  return v2(v3 == 1);
}

uint64_t sub_10056C298()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  swift_release(*(void *)(v0 + v7));
  return swift_deallocObject(v0, ((v7 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8, v5);
}

void sub_10056C32C(char a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_10052848C( a1,  v1 + v4,  *(void **)(v1 + v5),  *(void *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v1 + ((((v5 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10056C394()
{
  return sub_10057010C((void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_10056C3A4(uint64_t a1, char a2)
{
  return sub_1005289B4(a1, a2 & 1, v2[2], v2[3], v2[4]);
}

uint64_t sub_10056C3B4()
{
  return (*(uint64_t (**)(void))(v0 + 16))(0LL);
}

uint64_t sub_10056C3D8()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

void sub_10056C458(uint64_t a1, char a2)
{
  char v3 = a2 & 1;
  type metadata accessor for UUID(0LL);
  sub_100528754(a1, v3);
}

uint64_t sub_10056C4BC(uint64_t a1)
{
  return sub_100528F8C(a1, *(void *)(v1 + 16), *(_BYTE *)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_10056C4DC()
{
  if (v0[4]) {
    swift_release(v0[5]);
  }
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_10056C518()
{
  return sub_1005211CC(*(void *)(v0 + 16), *(void *)(v0 + 24), *(uint64_t (**)(uint64_t))(v0 + 32));
}

void sub_10056C524(uint64_t *a1@<X8>)
{
}

uint64_t sub_10056C53C()
{
  return sub_10057010C((void (*)(void))&_swift_unknownObjectRelease, 48LL);
}

uint64_t sub_10056C54C(uint64_t a1)
{
  uint64_t v4 = *((void *)v1 + 2);
  uint64_t v5 = *((void *)v1 + 3);
  uint64_t v6 = *((void *)v1 + 4);
  double v7 = v1[5];
  uint64_t v8 = (void *)swift_task_alloc(dword_1009B2BAC);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v8;
  *uint64_t v8 = v2;
  v8[1] = sub_100015D58;
  return sub_1004F40D0(v7, a1, v4, v5, v6);
}

uint64_t sub_10056C5C8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10056C5D8(uint64_t a1, uint64_t a2)
{
  double v6 = *(double *)(v2 + 16);
  double v7 = (void *)swift_task_alloc(dword_1009B2BBC);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v7;
  *double v7 = v3;
  v7[1] = sub_100015D58;
  return sub_1004F44E8(a1, a2, v6);
}

uint64_t sub_10056C640(uint64_t a1, uint64_t a2)
{
  double v6 = (void *)swift_task_alloc(dword_1009B2BCC);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v6;
  *double v6 = v3;
  v6[1] = sub_100015D58;
  return sub_1004F485C(a1, a2, v2);
}

uint64_t sub_10056C6A0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10056C6C4()
{
  uint64_t v1 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;

  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10056C7B0(uint64_t a1)
{
  return sub_10056C7C4( a1,  type metadata accessor for BeaconNamingRecord,  (uint64_t (*)(uint64_t, void, unint64_t, void))sub_100515BD8);
}

uint64_t sub_10056C7C4( uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, void, unint64_t, void))
{
  uint64_t v5 = *(void *)(a2(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  return a3(a1, *(void *)(v3 + 16), v3 + v6, *(void *)(v3 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10056C828()
{
  uint64_t v1 = (int *)type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for KeySyncMetadata(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = *(void *)(v7 + 64);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v14 = (v9 + v10 + v13) & ~v13;
  unint64_t v21 = ((*(void *)(v12 + 64) + v14 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  uint64_t v22 = v3 | v8 | v13 | 7;

  swift_release();
  uint64_t v15 = v0 + v4;
  sub_100016F9C(*(void *)v15, *(void *)(v15 + 8));
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v16(v15 + v1[5], v11);
  v16(v15 + v1[6], v11);
  uint64_t v17 = v15 + v1[8];
  uint64_t v18 = type metadata accessor for Date(0LL);
  unint64_t v19 = *(void (**)(uint64_t, uint64_t))(*(void *)(v18 - 8) + 8LL);
  v19(v17, v18);
  v16(v0 + v9, v11);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + v9 + *(int *)(v6 + 24)));
  v19(v0 + v9 + *(int *)(v6 + 28), v18);
  v16(v0 + v14, v11);
  swift_release();
  return swift_deallocObject(v0, v21, v22);
}

void sub_10056C9A0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for KeyAlignmentRecord(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(void *)(type metadata accessor for KeySyncMetadata(0LL) - 8);
  unint64_t v7 = (v4 + v5 + *(unsigned __int8 *)(v6 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = *(void *)(v6 + 64);
  uint64_t v9 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v10 = (v7 + v8 + *(unsigned __int8 *)(v9 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  sub_1005162FC( a1,  *(dispatch_group_s **)(v1 + 16),  *(void *)(v1 + 24),  v1 + v4,  v1 + v7,  v1 + v10,  *(void *)(v1 + ((*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10056CA4C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v23 = *(void *)(v7 + 64);
  swift_release();
  swift_release();
  unint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v0 + v4, v1);
  uint64_t v11 = v0 + v9;
  sub_100016F9C(*(void *)(v0 + v9), *(void *)(v0 + v9 + 8));
  v10(v0 + v9 + v6[5], v1);
  uint64_t v12 = v0 + v9 + v6[6];
  uint64_t v13 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v12, v13))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v12, v1);
      uint64_t v22 = v9;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v12, v1);
      uint64_t v22 = v9;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v9 = v22;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v14 = v11 + v6[7];
  uint64_t v15 = v11 + v6[8];
  uint64_t v16 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL))(v15, v16);
  sub_100016F9C(*(void *)(v11 + v6[9]), *(void *)(v11 + v6[9] + 8));
  uint64_t v17 = (uint64_t *)(v11 + v6[10]);
  unint64_t v18 = v17[1];
  if (v18 >> 60 != 15) {
    sub_100016F9C(*v17, v18);
  }
  unint64_t v19 = (uint64_t *)(v11 + v6[11]);
  unint64_t v20 = v19[1];
  if (v20 >> 60 != 15) {
    sub_100016F9C(*v19, v20);
  }
  sub_100016F9C(*(void *)(v11 + v6[12]), *(void *)(v11 + v6[12] + 8));
  sub_100016F9C(*(void *)(v11 + v6[13]), *(void *)(v11 + v6[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v9 + v23, v3 | v8 | 7);
}

uint64_t sub_10056CD1C()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8) + 80LL);
  return sub_100517AB4( *(void *)(v0 + 16),  *(void (**)(void *, char *))(v0 + 24),  *(void *)(v0 + 32),  v0 + v2,  v0 + ((v2 + v3 + v4) & ~v4));
}

void sub_10056CD88(uint64_t a1)
{
}

uint64_t sub_10056CD90()
{
  return sub_10020F99C((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10056CD9C()
{
  return sub_10020F99C((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_10056CDA8()
{
  return sub_1005161E0(*(void (**)(void *, char *))(v0 + 16), *(void *)(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10056CDC4()
{
  return sub_1005160A8(*(void (**)(uint64_t *, char *))(v0 + 16));
}

uint64_t sub_10056CDDC(uint64_t a1)
{
  return sub_1005167A4(a1, v1[2], v1[3], v1[4]);
}

void sub_10056CDF8(uint64_t a1)
{
}

uint64_t sub_10056CE10()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (int *)type metadata accessor for OwnedDeviceKeyRecord(0LL);
  uint64_t v7 = *((void *)v6 - 1);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  swift_release();
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v0 + v4, v1);
  uint64_t v13 = v0 + v9;
  sub_100016F9C(*(void *)(v0 + v9), *(void *)(v0 + v9 + 8));
  v12(v0 + v9 + v6[5], v1);
  v12(v0 + v9 + v6[6], v1);
  sub_100016F9C(*(void *)(v13 + v6[7]), *(void *)(v13 + v6[7] + 8));
  sub_100016F9C(*(void *)(v13 + v6[8]), *(void *)(v13 + v6[8] + 8));
  return swift_deallocObject(v0, v10, v11);
}

void sub_10056CF00(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = *(void *)(v3 + 64);
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnedDeviceKeyRecord(0LL) - 8) + 80LL);
  sub_1005173B4(a1, *(void *)(v1 + 16), v1 + v4, v1 + ((v4 + v5 + v6) & ~v6));
}

uint64_t sub_10056CF6C()
{
  uint64_t v1 = (int *)type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + v1[5];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  v10(v7 + v1[6], v9);
  uint64_t v11 = v7 + v1[8];
  uint64_t v12 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(v11, v12);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10056D040(uint64_t a1)
{
  return sub_1005169D8(a1);
}

uint64_t sub_10056D080()
{
  uint64_t v1 = type metadata accessor for KeySyncMetadata(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  uint64_t v7 = v0 + v4;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v7 + *(int *)(v1 + 24)));
  uint64_t v9 = v7 + *(int *)(v1 + 28);
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v9, v10);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10056D134()
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for KeySyncMetadata(0LL) - 8) + 80LL);
  uint64_t v3 = v0 + ((v2 + 32) & ~v2);
  uint64_t v4 = (void *)swift_task_alloc(dword_1009B2BF4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_1000159BC;
  v4[15] = v3;
  return swift_task_switch(sub_100516C4C, 0LL, 0LL);
}

uint64_t sub_10056D1AC()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  unint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8, v3 | 7);
}

void sub_10056D460(void **a1, uint64_t a2)
{
}

uint64_t sub_10056D484()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10056D4B8(uint64_t a1)
{
  return sub_10012EC9C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10056D4C4()
{
  return sub_10020F99C((void (*)(void))&_swift_release);
}

uint64_t sub_10056D4D0()
{
  return sub_10057010C((void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_10056D4E0()
{
  return sub_10057010C((void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_10056D4F0(uint64_t a1)
{
  return sub_10051DCEC(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10056D4FC()
{
  uint64_t v1 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = (uint64_t *)(v0 + v4);
  if (swift_getEnumCaseMultiPayload(v0 + v4, v1) == 1)
  {
    swift_errorRelease(*v6);
  }

  else
  {
    sub_100016F9C(*v6, v6[1]);
    uint64_t v7 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
    uint64_t v8 = (char *)v6 + v7[5];
    uint64_t v9 = type metadata accessor for UUID(0LL);
    uint64_t v10 = *(void *)(v9 - 8);
    uint64_t v11 = *(void (**)(char *, uint64_t))(v10 + 8);
    v11(v8, v9);
    uint64_t v12 = (char *)v6 + v7[6];
    uint64_t v13 = type metadata accessor for StableIdentifier(0LL);
    switch(swift_getEnumCaseMultiPayload(v12, v13))
    {
      case 0u:
      case 4u:
        goto LABEL_8;
      case 1u:
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_8;
      case 2u:
        v11(v12, v9);
        uint64_t v22 = v5;
        sub_100004AEC((uint64_t *)&unk_1009B0520);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        goto LABEL_7;
      case 3u:
        v11(v12, v9);
        uint64_t v22 = v5;
        sub_100004AEC((uint64_t *)&unk_1009AF840);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_7:
        uint64_t v5 = v22;
LABEL_8:
        swift_bridgeObjectRelease();
        break;
      default:
        break;
    }

    uint64_t v14 = (char *)v6 + v7[7];
    uint64_t v15 = (char *)v6 + v7[8];
    uint64_t v16 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v16 - 8) + 8LL))(v15, v16);
    sub_100016F9C(*(uint64_t *)((char *)v6 + v7[9]), *(uint64_t *)((char *)v6 + v7[9] + 8));
    unint64_t v17 = (uint64_t *)((char *)v6 + v7[10]);
    unint64_t v18 = v17[1];
    if (v18 >> 60 != 15) {
      sub_100016F9C(*v17, v18);
    }
    unint64_t v19 = (uint64_t *)((char *)v6 + v7[11]);
    unint64_t v20 = v19[1];
    if (v20 >> 60 != 15) {
      sub_100016F9C(*v19, v20);
    }
    sub_100016F9C(*(uint64_t *)((char *)v6 + v7[12]), *(uint64_t *)((char *)v6 + v7[12] + 8));
    sub_100016F9C(*(uint64_t *)((char *)v6 + v7[13]), *(uint64_t *)((char *)v6 + v7[13] + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | 7);
}

id sub_10056D7E8()
{
  uint64_t v1 = *(void *)(sub_100004AEC((uint64_t *)&unk_1009B0830) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10051DF78( v0 + v2,  *(void *)(v0 + v3),  *(void (**)(void *))(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_10056D83C()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  unint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10056DAE4(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8) + 80LL);
  return sub_10051E5E8(a1, v1[2], v1[3], v1[4], (uint64_t)v1 + ((v3 + 40) & ~v3));
}

uint64_t sub_10056DB2C()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  unint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10056DDCC()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8) + 80LL);
  return sub_1005200C8(*(void (**)(char *))(v0 + 16), *(void *)(v0 + 24), v0 + ((v1 + 32) & ~v1));
}

uint64_t sub_10056DE00()
{
  return sub_10051DC2C(*(void (**)(uint64_t *))(v0 + 16), *(void *)(v0 + 24), 7);
}

uint64_t sub_10056DE1C(uint64_t a1)
{
  return sub_1004FDE78(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10056DE38(uint64_t a1)
{
  return sub_100501F64( a1,  *(void (**)(void *))(v1 + 16),  *(void *)(v1 + 24),  &qword_1009A6100,  "Save failed: %@",  15LL);
}

uint64_t sub_10056DE64()
{
  uint64_t v1 = (int *)type metadata accessor for ShareRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
  v8(v6, v7);
  v8(v0 + v4 + v1[6], v7);
  uint64_t v9 = v0 + v4 + v1[7];
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  uint64_t v13 = v0 + v4 + v1[8];
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | 7);
}

uint64_t sub_10056DFA8(void **a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for ShareRecord(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_1005020F4( *a1,  *(void *)(v1 + 16),  v1 + v4,  *(void (**)(char *))v5,  *(void *)(v5 + 8),  &qword_1009A6100,  type metadata accessor for ShareRecord,  (void (*)(id))sub_10003CCA8,  (uint64_t)sub_10056E030);
}

uint64_t sub_10056E030()
{
  return sub_10056F9C0((uint64_t)sub_100571B18);
}

uint64_t sub_10056E04C()
{
  uint64_t v1 = (int *)type metadata accessor for ShareRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v18 = *(void *)(v2 + 64);
  unint64_t v17 = (v3 + ((v18 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8) & ~v3;
  swift_release();
  uint64_t v5 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL);
  v8(v6, v7);
  v8(v5 + v1[6], v7);
  uint64_t v9 = v5 + v1[7];
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
  v12(v9, v10);
  uint64_t v13 = v5 + v1[8];
  uint64_t v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  if (!v14(v13, 1LL, v10)) {
    v12(v13, v10);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_100016F9C(*(void *)(v0 + v17), *(void *)(v0 + v17 + 8));
  v8(v0 + v17 + v1[5], v7);
  v8(v0 + v17 + v1[6], v7);
  v12(v0 + v17 + v1[7], v10);
  unint64_t v15 = v0 + v17 + v1[8];
  if (!v14(v15, 1LL, v10)) {
    v12(v15, v10);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v17 + v18, v3 | 7);
}

void sub_10056E240(uint64_t a1)
{
}

uint64_t sub_10056E264()
{
  return sub_1004AED8C();
}

uint64_t sub_10056E26C()
{
  return sub_10020F99C((void (*)(void))&_swift_release);
}

uint64_t sub_10056E278()
{
  return sub_10057010C((void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_10056E288()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10056E2AC(uint64_t a1)
{
  return sub_1004B2CA0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10056E2B8()
{
  uint64_t v1 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10056E388()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10056E3B0()
{
  uint64_t v1 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v7 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10056E4A8(uint64_t a1)
{
  return sub_10056E4D0( a1,  type metadata accessor for LocationProvider,  (uint64_t (*)(uint64_t, uint64_t))&static Date.< infix(_:_:)) & 1;
}

uint64_t sub_10056E4D0( uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, uint64_t))
{
  uint64_t v6 = *(void *)(v3 + 16);
  uint64_t v7 = a2(0LL);
  return a3(a1 + *(int *)(v7 + 28), v6) & 1;
}

uint64_t sub_10056E520()
{
  return sub_10056E530((void (*)(void))&_swift_bridgeObjectRelease, 32LL);
}

uint64_t sub_10056E530(void (*a1)(void), uint64_t a2)
{
  return swift_deallocObject(v2, a2, 7LL);
}

void sub_10056E56C(uint64_t a1)
{
}

uint64_t sub_10056E578(void *a1)
{
  return sub_10056FB90( a1,  type metadata accessor for LeashRecord,  (uint64_t (*)(void, void, void, unint64_t, void, void))sub_100140A84);
}

uint64_t sub_10056E590()
{
  uint64_t v1 = type metadata accessor for LeashRecord(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  swift_release();
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10056E658(uint64_t a1)
{
  return sub_10056FD04( a1,  type metadata accessor for LeashRecord,  (uint64_t (*)(uint64_t, void, void, unint64_t, void, void))sub_1001412FC);
}

uint64_t sub_10056E66C(uint64_t a1)
{
  return sub_1004FE300( a1,  v1[2],  v1[3],  v1[4],  type metadata accessor for SharedBeaconRecord,  (uint64_t)&unk_1009632D0,  (uint64_t)sub_10056EC0C,  (void (*)(uint64_t, void, uint64_t, uint64_t))sub_1004FD55C);
}

uint64_t sub_10056E6A8(uint64_t a1)
{
  return sub_100501F64( a1,  *(void (**)(void *))(v1 + 16),  *(void *)(v1 + 24),  &qword_1009A0E30,  "Save failed: %@",  15LL);
}

uint64_t sub_10056E6D4()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v0 + v4 + v1[18];
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  uint64_t v12 = v0 + v4 + v1[19];
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1LL, v7)) {
    v9(v12, v7);
  }
  uint64_t v14 = v0 + v4 + v1[20];
  uint64_t v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v14, 1LL, v15))
  {
    uint64_t v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1LL, v7)) {
      v9(v16, v7);
    }
  }

  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | 7);
}

uint64_t sub_10056E88C(void **a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SharedBeaconRecord(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_1005020F4( *a1,  *(void *)(v1 + 16),  v1 + v4,  *(void (**)(char *))v5,  *(void *)(v5 + 8),  &qword_1009A0E30,  type metadata accessor for SharedBeaconRecord,  (void (*)(id))sub_100761E80,  (uint64_t)sub_10056E914);
}

uint64_t sub_10056E914()
{
  return sub_100502474(v0[2], v0[3], v0[4], (uint64_t)sub_100021ABC, (uint64_t)sub_100571B7C);
}

uint64_t sub_10056E940()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v24 = *(void *)(v2 + 64);
  unint64_t v5 = v3 + ((v24 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  v10(v6 + v1[6], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v11 = v6 + v1[18];
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL);
  v23(v11, v12);
  uint64_t v13 = v6 + v1[19];
  uint64_t v14 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  if (!v14(v13, 1LL, v8)) {
    v10(v13, v8);
  }
  unint64_t v25 = v5 & ~v3;
  uint64_t v15 = v6 + v1[20];
  uint64_t v16 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
  unint64_t v17 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 48LL);
  if (!v17(v15, 1LL, v16))
  {
    uint64_t v18 = v15 + *(int *)(v16 + 20);
    if (!v14(v18, 1LL, v8)) {
      v10(v18, v8);
    }
  }

  swift_release();
  sub_100016F9C(*(void *)(v0 + v25), *(void *)(v0 + v25 + 8));
  v10(v0 + v25 + v1[5], v8);
  v10(v0 + v25 + v1[6], v8);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v23(v0 + v25 + v1[18], v12);
  unint64_t v19 = v0 + v25 + v1[19];
  if (!v14(v19, 1LL, v8)) {
    v10(v19, v8);
  }
  unint64_t v20 = v0 + v25 + v1[20];
  if (!v17(v20, 1LL, v16))
  {
    unint64_t v21 = v20 + *(int *)(v16 + 20);
    if (!v14(v21, 1LL, v8)) {
      v10(v21, v8);
    }
  }

  return swift_deallocObject(v0, v25 + v24, v3 | 7);
}

uint64_t sub_10056EC0C(uint64_t a1)
{
  return sub_100569564( a1,  type metadata accessor for SharedBeaconRecord,  (uint64_t (*)(uint64_t, void, uint64_t, void, unint64_t))sub_100500578);
}

uint64_t sub_10056EC20()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v0 + v4 + v1[18];
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  uint64_t v12 = v0 + v4 + v1[19];
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1LL, v7)) {
    v9(v12, v7);
  }
  uint64_t v14 = v0 + v4 + v1[20];
  uint64_t v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v14, 1LL, v15))
  {
    uint64_t v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1LL, v7)) {
      v9(v16, v7);
    }
  }

  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8, v3 | 7);
}

void sub_10056EDD4(void **a1, uint64_t a2)
{
}

uint64_t sub_10056EDF8()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v0 + v4 + v1[18];
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  uint64_t v12 = v0 + v4 + v1[19];
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1LL, v7)) {
    v9(v12, v7);
  }
  uint64_t v14 = v0 + v4 + v1[20];
  uint64_t v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v14, 1LL, v15))
  {
    uint64_t v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1LL, v7)) {
      v9(v16, v7);
    }
  }

  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_10056EF90(id *a1)
{
  return sub_100565834( a1,  type metadata accessor for SharedBeaconRecord,  (void (*)(id))sub_100761E80,  (void (*)(id *, char *))sub_1002B6A70);
}

uint64_t sub_10056EFAC()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v0 + v4 + v1[18];
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  uint64_t v12 = v0 + v4 + v1[19];
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1LL, v7)) {
    v9(v12, v7);
  }
  uint64_t v14 = v0 + v4 + v1[20];
  uint64_t v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v14, 1LL, v15))
  {
    uint64_t v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1LL, v7)) {
      v9(v16, v7);
    }
  }

  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | 7);
}

uint64_t sub_10056F16C(uint64_t a1)
{
  return sub_1002DDD88( a1,  type metadata accessor for SharedBeaconRecord,  (uint64_t (*)(uint64_t, unint64_t, void, void, void))sub_1002B9384);
}

uint64_t sub_10056F180(uint64_t a1)
{
  return sub_100503298( a1,  *(void *)(v1 + 16),  *(id **)(v1 + 24),  *(void *)(v1 + 32),  type metadata accessor for SharedBeaconRecord,  (uint64_t)&unk_1009632F8,  (uint64_t)sub_10056EDD4);
}

unint64_t sub_10056F1B4()
{
  unint64_t result = qword_1009B2C18;
  if (!qword_1009B2C18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F9B88, &type metadata for SecureLocationsConfig);
    atomic_store(result, (unint64_t *)&qword_1009B2C18);
  }

  return result;
}

uint64_t sub_10056F1F8()
{
  return swift_deallocObject(v0, 224LL, 7LL);
}

unint64_t sub_10056F234()
{
  unint64_t result = qword_1009B2C20;
  if (!qword_1009B2C20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008134F4, &type metadata for SecureLocationLabel);
    atomic_store(result, (unint64_t *)&qword_1009B2C20);
  }

  return result;
}

void *sub_10056F278(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  swift_bridgeObjectRetain(a1[10]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  return a1;
}

unint64_t sub_10056F2CC()
{
  unint64_t result = qword_1009B2C28;
  if (!qword_1009B2C28)
  {
    unint64_t result = swift_getWitnessTable(&unk_100813544, &type metadata for SecureLocationLabel);
    atomic_store(result, (unint64_t *)&qword_1009B2C28);
  }

  return result;
}

uint64_t sub_10056F310()
{
  return swift_deallocObject(v0, 104LL, 7LL);
}

unint64_t sub_10056F34C()
{
  unint64_t result = qword_1009B2C30;
  if (!qword_1009B2C30)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080A118, &type metadata for OwnSubmitPayload);
    atomic_store(result, (unint64_t *)&qword_1009B2C30);
  }

  return result;
}

uint64_t sub_10056F390()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

uint64_t sub_10056F3C4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10056F3E8(uint64_t a1)
{
}

uint64_t sub_10056F3F0()
{
  uint64_t v1 = type metadata accessor for LostModeRecord(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10056F4D0(id *a1)
{
  return sub_100565834( a1,  type metadata accessor for LostModeRecord,  (void (*)(id))sub_1005F0CB4,  (void (*)(id *, char *))sub_100543938);
}

uint64_t sub_10056F4EC(uint64_t a1)
{
  return sub_100501F64( a1,  *(void (**)(void *))(v1 + 16),  *(void *)(v1 + 24),  &qword_1009A7F18,  "Update failed: %@",  17LL);
}

uint64_t sub_10056F518()
{
  uint64_t v1 = type metadata accessor for LostModeRecord(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v7 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10056F620(void **a1)
{
  return sub_1005659B8( a1,  type metadata accessor for LostModeRecord,  &qword_1009A7F18,  (void (*)(void *))sub_1005F0CB4,  (uint64_t)sub_100571B90);
}

uint64_t sub_10056F644(uint64_t a1)
{
  return sub_100503298( a1,  *(void *)(v1 + 16),  *(id **)(v1 + 24),  *(void *)(v1 + 32),  type metadata accessor for LostModeRecord,  (uint64_t)&unk_100963488,  (uint64_t)sub_10056F774);
}

uint64_t sub_10056F678()
{
  uint64_t v1 = type metadata accessor for LostModeRecord(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

void sub_10056F774(void **a1, uint64_t a2)
{
}

void sub_10056F790(uint64_t a1)
{
}

uint64_t sub_10056F79C(void *a1)
{
  return sub_10056FB90( a1,  type metadata accessor for LostModeRecord,  (uint64_t (*)(void, void, void, unint64_t, void, void))sub_100140654);
}

uint64_t sub_10056F7B4(uint64_t a1)
{
  return sub_10056FD04( a1,  type metadata accessor for LostModeRecord,  (uint64_t (*)(uint64_t, void, void, unint64_t, void, void))sub_1001412C0);
}

uint64_t sub_10056F7CC(uint64_t a1)
{
  return sub_1003E4B90(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10056F7D4(uint64_t a1)
{
  return sub_1004FDC34(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_10056F7F0(uint64_t a1)
{
  return sub_100501F64( a1,  *(void (**)(void *))(v1 + 16),  *(void *)(v1 + 24),  &qword_1009A7F18,  "Save failed: %@",  15LL);
}

uint64_t sub_10056F81C()
{
  uint64_t v1 = type metadata accessor for LostModeRecord(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10056F91C(void **a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for LostModeRecord(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_1005020F4( *a1,  *(void *)(v1 + 16),  v1 + v4,  *(void (**)(char *))v5,  *(void *)(v5 + 8),  &qword_1009A7F18,  type metadata accessor for LostModeRecord,  (void (*)(id))sub_1005F0CB4,  (uint64_t)sub_10056F9A4);
}

uint64_t sub_10056F9A4()
{
  return sub_10056F9C0((uint64_t)sub_100571B90);
}

uint64_t sub_10056F9C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 32);
  v4[2] = *(void *)(*(void *)(v1 + 24) + 136LL);
  v4[3] = v2;
  return OS_dispatch_queue.sync<A>(execute:)(a1, v4, (char *)&type metadata for () + 8);
}

uint64_t sub_10056FA04()
{
  uint64_t v1 = type metadata accessor for LostModeRecord(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  unint64_t v7 = (v3 + ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8) & ~v3;
  uint64_t v8 = v7 + v5;
  swift_release();
  uint64_t v9 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v10 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL);
  v12(v10, v11);
  v12(v9 + *(int *)(v1 + 24), v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_100016F9C(*(void *)(v0 + v7), *(void *)(v0 + v7 + 8));
  v12(v0 + v7 + *(int *)(v1 + 20), v11);
  v12(v0 + v7 + *(int *)(v1 + 24), v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v8, v6);
}

void sub_10056FB68(uint64_t a1)
{
}

uint64_t sub_10056FB90( void *a1, uint64_t (*a2)(void), uint64_t (*a3)(void, void, void, unint64_t, void, void))
{
  uint64_t v5 = *(void *)(a2(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (void *)(v3 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  return a3(*a1, *(void *)(v3 + 16), *(void *)(v3 + 24), v3 + v6, *v7, v7[1]);
}

uint64_t sub_10056FBFC()
{
  uint64_t v1 = type metadata accessor for LostModeRecord(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  swift_release();
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_10056FD04( uint64_t a1, uint64_t (*a2)(void), uint64_t (*a3)(uint64_t, void, void, unint64_t, void, void))
{
  uint64_t v5 = *(void *)(a2(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (void *)(v3 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  return a3(a1, *(void *)(v3 + 16), *(void *)(v3 + 24), v3 + v6, *v7, v7[1]);
}

uint64_t sub_10056FD6C(uint64_t a1)
{
  return sub_10019AA08(a1, *(void (**)(uint64_t))(v1 + 16));
}

uint64_t sub_10056FD74()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + *(int *)(v1 + 24);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  uint64_t v10 = v7 + *(int *)(v1 + 28);
  uint64_t v11 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10056FE48(id *a1)
{
  return sub_100565834( a1,  type metadata accessor for OwnedBeaconGroup,  (void (*)(id))sub_1001CBBB8,  (void (*)(id *, char *))sub_1004E9B0C);
}

uint64_t sub_10056FE64(uint64_t a1)
{
  return sub_100501F64( a1,  *(void (**)(void *))(v1 + 16),  *(void *)(v1 + 24),  &qword_1009A49F0,  "Update failed: %@",  17LL);
}

uint64_t sub_10056FE90()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v7 + *(int *)(v1 + 24);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  uint64_t v10 = v7 + *(int *)(v1 + 28);
  uint64_t v11 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_10056FF8C(void **a1)
{
  return sub_1005659B8( a1,  type metadata accessor for OwnedBeaconGroup,  &qword_1009A49F0,  (void (*)(void *))sub_1001CBBB8,  (uint64_t)sub_100571B2C);
}

uint64_t sub_10056FFB0(uint64_t a1)
{
  return sub_100503298( a1,  *(void *)(v1 + 16),  *(id **)(v1 + 24),  *(void *)(v1 + 32),  type metadata accessor for OwnedBeaconGroup,  (uint64_t)&unk_100963708,  (uint64_t)sub_1005700D4);
}

uint64_t sub_10056FFE4()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + *(int *)(v1 + 24);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  uint64_t v10 = v7 + *(int *)(v1 + 28);
  uint64_t v11 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

void sub_1005700D4(void **a1, uint64_t a2)
{
}

uint64_t sub_1005700F0()
{
  return sub_10020F99C((void (*)(void))&_swift_release);
}

uint64_t sub_1005700FC()
{
  return sub_10057010C((void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_10057010C(void (*a1)(void), uint64_t a2)
{
  return swift_deallocObject(v2, a2, 7LL);
}

double sub_100570148(_OWORD *a1)
{
  double result = 0.0;
  a1[11] = 0u;
  a1[12] = 0u;
  a1[9] = 0u;
  a1[10] = 0u;
  a1[7] = 0u;
  a1[8] = 0u;
  a1[5] = 0u;
  a1[6] = 0u;
  a1[3] = 0u;
  a1[4] = 0u;
  a1[1] = 0u;
  a1[2] = 0u;
  *a1 = 0u;
  return result;
}

uint64_t sub_10057016C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10057017C(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_100004B78(a2);
    a3();
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1005701E4()
{
  uint64_t v1 = sub_100004AEC(&qword_1009AF860);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100570248(uint64_t a1, char a2)
{
  char v3 = a2 & 1;
  sub_100004AEC(&qword_1009AF860);
  return sub_1004FBD80(a1, v3);
}

uint64_t sub_100570298()
{
  uint64_t v1 = *(void *)(type metadata accessor for CloudKitChangeSet(0LL) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((((((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL)
     + 8;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v5, v4);
}

uint64_t sub_100570364(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for CloudKitChangeSet(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_100524844( a1,  a2,  v2 + v6,  *(void *)(v2 + v7),  *(void *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v2 + ((v7 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(void *)(v2 + ((((v7 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1005703E0()
{
  uint64_t v1 = *(void *)(type metadata accessor for CloudKitChangeSet(0LL) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 32) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = ((((((((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)
       + 23) & 0xFFFFFFFFFFFFFFF8LL)
     + 8;
  swift_release();
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v0 + v3, v6);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v5, v4);
}

uint64_t sub_1005704C8(uint64_t a1, uint64_t a2, char a3)
{
  int v6 = a3 & 1;
  uint64_t v7 = *(void *)(type metadata accessor for CloudKitChangeSet(0LL) - 8);
  unint64_t v8 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v10 = (v9 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_100525C6C( a1,  a2,  v6,  *(void *)(v3 + 16),  *(void *)(v3 + 24),  v3 + v8,  *(void *)(v3 + v9),  *(void *)(v3 + v9 + 8),  *(void *)(v3 + v10),  *(void *)(v3 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v3 + ((v10 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(void *)(v3 + ((((v10 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100570574()
{
  uint64_t v1 = *(void *)(type metadata accessor for CloudKitChangeSet(0LL) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (((*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, v5 + 16, v4);
}

uint64_t sub_10057063C()
{
  uint64_t v1 = *(void *)(type metadata accessor for CloudKitChangeSet(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v4 = (v3 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v5 = v0 + v2;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = *(void (**)(void))v6;
  uint64_t v8 = *(void *)(v6 + 8);
  (*(void (**)(void, void))(v0 + v4))(0LL, 0LL);
  return sub_10052596C(v5, v7, v8);
}

uint64_t sub_1005706B8()
{
  uint64_t v1 = *(void *)(type metadata accessor for CloudKitChangeSet(0LL) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v2 | 7;
  unint64_t v5 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  sub_1005707C8( *(void *)(v0 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(_BYTE *)(v0 + ((v5 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 16));
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject( v0,  ((((((((v5 + 47) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL)
         + 8,
           v4);
}

uint64_t sub_1005707C8(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_errorRelease(a1);
  }
  swift_bridgeObjectRelease(a1);
  return swift_bridgeObjectRelease(a2);
}

uint64_t sub_1005707F4()
{
  uint64_t v1 = *(void *)(type metadata accessor for CloudKitChangeSet(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v4 = (v3 + 47) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_100525FE0( *(void *)(v0 + 16),  v0 + v2,  *(void *)(v0 + v3),  *(void *)(v0 + v3 + 8),  *(void *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(_BYTE *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8LL) + 16),  *(void *)(v0 + v4),  *(void *)(v0 + v5),  *(void (**)(uint64_t, uint64_t))(v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_100570898(uint64_t a1, uint64_t a2, char a3)
{
  if ((a3 & 1) != 0) {
    return swift_errorRetain(a1);
  }
  swift_bridgeObjectRetain(a1);
  return swift_bridgeObjectRetain(a2);
}

uint64_t sub_1005708C4(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v2);
  unint64_t v4 = (char *)&v64 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v70 = (char *)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for BeaconStoreFileRecord(0LL);
  uint64_t v73 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v78 = (uint64_t)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009B2C50);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v64 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v11);
  uint64_t v15 = (void **)((char *)&v64 - v14);
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v66 = a1 + 64;
  uint64_t v17 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v18 = -1LL;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  unint64_t v19 = v18 & v16;
  int64_t v69 = (unint64_t)(v17 + 63) >> 6;
  int64_t v65 = v69 - 1;
  uint64_t v74 = a1;
  swift_bridgeObjectRetain(a1);
  int64_t v20 = 0LL;
  uint64_t v67 = 0LL;
  unint64_t v21 = (uint64_t *)&unk_1009B2C58;
  __int128 v68 = xmmword_1007E67D0;
  uint64_t v76 = v6;
  uint64_t v77 = v5;
  uint64_t v71 = v8;
  uint64_t v72 = v4;
  uint64_t v75 = v13;
  while (1)
  {
    if (v19)
    {
      unint64_t v22 = __clz(__rbit64(v19));
      uint64_t v23 = (v19 - 1) & v19;
      int64_t v80 = v20;
      unint64_t v24 = v22 | (v20 << 6);
LABEL_8:
      unint64_t v79 = v23;
      uint64_t v25 = *(void *)(v74 + 56);
      uint64_t v26 = *(void **)(*(void *)(v74 + 48) + 8 * v24);
      *uint64_t v13 = v26;
      uint64_t v27 = v25 + *(void *)(v73 + 72) * v24;
      uint64_t v28 = sub_100004AEC(v21);
      sub_10001DC4C(v27, (uint64_t)v13 + *(int *)(v28 + 48), type metadata accessor for BeaconStoreFileRecord);
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v13, 0LL, 1LL, v28);
      id v29 = v26;
      uint64_t v6 = v76;
      uint64_t v5 = v77;
      goto LABEL_21;
    }

    int64_t v30 = v20 + 1;
    if (__OFADD__(v20, 1LL))
    {
      __break(1u);
LABEL_40:
      __break(1u);
    }

    if (v30 >= v69) {
      goto LABEL_19;
    }
    unint64_t v31 = *(void *)(v66 + 8 * v30);
    if (v31) {
      goto LABEL_12;
    }
    v20 += 2LL;
    if (v30 + 1 >= v69) {
      goto LABEL_37;
    }
    unint64_t v31 = *(void *)(v66 + 8 * v20);
    if (v31) {
      goto LABEL_15;
    }
    if (v30 + 2 >= v69)
    {
LABEL_19:
      int64_t v80 = v20;
    }

    else
    {
      unint64_t v31 = *(void *)(v66 + 8 * (v30 + 2));
      if (v31)
      {
        v30 += 2LL;
        goto LABEL_12;
      }

      int64_t v20 = v30 + 3;
      if (v30 + 3 < v69)
      {
        unint64_t v31 = *(void *)(v66 + 8 * v20);
        if (v31)
        {
LABEL_15:
          int64_t v30 = v20;
LABEL_12:
          uint64_t v23 = (v31 - 1) & v31;
          unint64_t v24 = __clz(__rbit64(v31)) + (v30 << 6);
          int64_t v80 = v30;
          goto LABEL_8;
        }

        while (1)
        {
          int64_t v30 = v20 + 1;
          if (__OFADD__(v20, 1LL)) {
            goto LABEL_40;
          }
          if (v30 >= v69) {
            break;
          }
          unint64_t v31 = *(void *)(v66 + 8 * v30);
          ++v20;
          if (v31) {
            goto LABEL_12;
          }
        }

        int64_t v30 = v65;
LABEL_37:
        int64_t v80 = v30;
        goto LABEL_20;
      }

      int64_t v80 = v30 + 2;
    }

uint64_t sub_100570F00(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v2);
  unint64_t v4 = (char *)&v58 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v66 = (char *)&v58 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for BeaconStoreFileRecord(0LL);
  uint64_t v67 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v72 = (uint64_t)&v58 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009B2C50);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (uint64_t *)((char *)&v58 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v11);
  uint64_t v15 = (id *)((char *)&v58 - v14);
  uint64_t v16 = *(void *)(a1 + 64);
  uint64_t v60 = a1 + 64;
  uint64_t v17 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v18 = -1LL;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  unint64_t v19 = v18 & v16;
  int64_t v64 = (unint64_t)(v17 + 63) >> 6;
  int64_t v59 = v64 - 1;
  uint64_t v68 = a1;
  swift_bridgeObjectRetain(a1);
  int64_t v20 = 0LL;
  uint64_t v61 = 0LL;
  unint64_t v21 = (uint64_t *)&unk_1009B2C58;
  __int128 v62 = xmmword_1007E67D0;
  uint64_t v69 = v5;
  uint64_t v70 = v4;
  uint64_t v63 = v6;
  uint64_t v65 = v8;
  while (1)
  {
    if (v19)
    {
      unint64_t v22 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      int64_t v71 = v20;
      unint64_t v23 = v22 | (v20 << 6);
LABEL_8:
      uint64_t v24 = *(void *)(v68 + 56);
      uint64_t v25 = *(void **)(*(void *)(v68 + 48) + 8 * v23);
      *uint64_t v13 = v25;
      uint64_t v26 = v24 + *(void *)(v67 + 72) * v23;
      uint64_t v27 = sub_100004AEC(v21);
      sub_10001DC4C(v26, (uint64_t)v13 + *(int *)(v27 + 48), type metadata accessor for BeaconStoreFileRecord);
      (*(void (**)(void *, void, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v13, 0LL, 1LL, v27);
      id v28 = v25;
      uint64_t v5 = v69;
      unint64_t v4 = v70;
      goto LABEL_21;
    }

    int64_t v29 = v20 + 1;
    if (__OFADD__(v20, 1LL))
    {
      __break(1u);
LABEL_40:
      __break(1u);
    }

    if (v29 >= v64) {
      goto LABEL_19;
    }
    unint64_t v30 = *(void *)(v60 + 8 * v29);
    if (v30) {
      goto LABEL_12;
    }
    v20 += 2LL;
    if (v29 + 1 >= v64) {
      goto LABEL_37;
    }
    unint64_t v30 = *(void *)(v60 + 8 * v20);
    if (v30) {
      goto LABEL_15;
    }
    if (v29 + 2 >= v64)
    {
LABEL_19:
      int64_t v71 = v20;
    }

    else
    {
      unint64_t v30 = *(void *)(v60 + 8 * (v29 + 2));
      if (v30)
      {
        v29 += 2LL;
        goto LABEL_12;
      }

      int64_t v20 = v29 + 3;
      if (v29 + 3 < v64)
      {
        unint64_t v30 = *(void *)(v60 + 8 * v20);
        if (v30)
        {
LABEL_15:
          int64_t v29 = v20;
LABEL_12:
          unint64_t v19 = (v30 - 1) & v30;
          unint64_t v23 = __clz(__rbit64(v30)) + (v29 << 6);
          int64_t v71 = v29;
          goto LABEL_8;
        }

        while (1)
        {
          int64_t v29 = v20 + 1;
          if (__OFADD__(v20, 1LL)) {
            goto LABEL_40;
          }
          if (v29 >= v64) {
            break;
          }
          unint64_t v30 = *(void *)(v60 + 8 * v29);
          ++v20;
          if (v30) {
            goto LABEL_12;
          }
        }

        int64_t v29 = v59;
LABEL_37:
        int64_t v71 = v29;
        goto LABEL_20;
      }

      int64_t v71 = v29 + 2;
    }

uint64_t getEnumTagSinglePayload for BeaconStore.BeaconsChangedNotificationReason( unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xE8) {
    goto LABEL_17;
  }
  if (a2 + 24 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 24) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 24;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 24;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 24;
    }
  }

uint64_t storeEnumTagSinglePayload for BeaconStore.BeaconsChangedNotificationReason( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 24 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 24) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xE8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xE7) {
    return ((uint64_t (*)(void))((char *)&loc_1005715E8 + 4 * byte_100806579[v4]))();
  }
  *a1 = a2 + 24;
  return ((uint64_t (*)(void))((char *)sub_10057161C + 4 * byte_100806574[v4]))();
}

uint64_t sub_10057161C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100571624(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10057162CLL);
  }
  return result;
}

uint64_t sub_100571638(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100571640LL);
  }
  *(_BYTE *)uint64_t result = a2 + 24;
  return result;
}

uint64_t sub_100571644(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10057164C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconStore.BeaconsChangedNotificationReason()
{
  return &type metadata for BeaconStore.BeaconsChangedNotificationReason;
}

uint64_t storeEnumTagSinglePayload for BeaconStore.BeaconStoreError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 18 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 18) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xEE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xED) {
    return ((uint64_t (*)(void))((char *)&loc_1005716B4 + 4 * byte_100806583[v4]))();
  }
  *a1 = a2 + 18;
  return ((uint64_t (*)(void))((char *)sub_1005716E8 + 4 * byte_10080657E[v4]))();
}

uint64_t sub_1005716E8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005716F0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005716F8LL);
  }
  return result;
}

uint64_t sub_100571704(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10057170CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 18;
  return result;
}

uint64_t sub_100571710(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100571718(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconStore.BeaconStoreError()
{
  return &type metadata for BeaconStore.BeaconStoreError;
}

unint64_t sub_100571738()
{
  unint64_t result = qword_1009B2C90;
  if (!qword_1009B2C90)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008068A4, &type metadata for BeaconStore.BeaconStoreError);
    atomic_store(result, (unint64_t *)&qword_1009B2C90);
  }

  return result;
}

unint64_t sub_100571780()
{
  unint64_t result = qword_1009B2C98;
  if (!qword_1009B2C98)
  {
    unint64_t result = swift_getWitnessTable(&unk_100806904, &type metadata for BeaconStore.BeaconsChangedNotificationReason);
    atomic_store(result, (unint64_t *)&qword_1009B2C98);
  }

  return result;
}

uint64_t sub_1005717C8@<X0>(uint64_t *a1@<X8>)
{
  return sub_10054F370(a1);
}

uint64_t sub_1005717E4@<X0>(void *a1@<X8>)
{
  return sub_10056A2C0(a1);
}

uint64_t sub_1005717F8@<X0>(void *a1@<X8>)
{
  return sub_10056A3C8(a1);
}

uint64_t sub_10057180C@<X0>(void *a1@<X8>)
{
  return sub_100565D64(a1);
}

uint64_t sub_100571820@<X0>(void *a1@<X8>)
{
  return sub_10056ADD4(a1);
}

void sub_100571ADC()
{
}

void sub_100571AF0()
{
}

void sub_100571B04()
{
}

void sub_100571B18()
{
}

void sub_100571B2C()
{
}

void sub_100571B40()
{
}

void sub_100571B54()
{
}

void sub_100571B68()
{
}

void sub_100571B7C()
{
}

void sub_100571B90()
{
}

uint64_t sub_100571BAC(uint64_t a1)
{
  return sub_100567B88(a1);
}

uint64_t sub_100571BC0()
{
  return sub_100568A70();
}

uint64_t sub_100571BD4()
{
  return sub_100568D48();
}

uint64_t sub_100571BE8(uint64_t a1)
{
  return sub_100569228(a1);
}

uint64_t sub_100571BFC(uint64_t a1)
{
  return sub_100567F80(a1);
}

uint64_t sub_100571C10(uint64_t a1)
{
  return sub_1005689EC(a1);
}

uint64_t sub_100571C24()
{
  return sub_10056F7D4();
}

void sub_100571C38(uint64_t *a1@<X8>)
{
}

uint64_t sub_100571C4C@<X0>(char *a1@<X8>)
{
  return sub_1000901D4(a1);
}

uint64_t sub_100571C70(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100571CAC + 4 * byte_100806B68[a1]))( 0xD000000000000044LL,  0x8000000100850C50LL);
}

uint64_t sub_100571CAC()
{
  return v0 + 17;
}

unint64_t sub_100571D14()
{
  return 0xD000000000000036LL;
}

uint64_t sub_100571D3C(uint64_t a1, uint64_t a2, unsigned __int8 a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v29 - v11;
  unsigned int v13 = (0x2Bu >> a3) & 1;
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v15 = (*(uint64_t (**)(void, void, uint64_t, uint64_t))(a2 + 56))((0x66u >> a3) & 1, v13, ObjectType, a2);
  uint64_t v16 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a2 + 80);
  uint64_t v33 = v15;
  uint64_t v17 = v16(v15, ObjectType, a2);
  uint64_t v18 = (uint64_t)v12;
  double v19 = Date.timeIntervalSinceNow.getter(v17);
  if ((~*(void *)&v19 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v19 <= -9.22337204e18)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if (v19 < 9.22337204e18)
  {
    uint64_t v18 = (uint64_t)v19;
    if (qword_10099B028 == -1) {
      goto LABEL_5;
    }
    goto LABEL_11;
  }

uint64_t sub_1005722D8()
{
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v0 = sub_1006A0B6C(v12);
  swift_bridgeObjectRelease();
  uint64_t v1 = *(void *)(v0 + 16);
  if (v1)
  {
    swift_bridgeObjectRetain(v0);
    int v2 = (void *)(v0 + 40);
    int v3 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v4 = *(v2 - 1);
      uint64_t v5 = (void *)*v2;
      swift_bridgeObjectRetain(*v2);
      v6._countAndFlagsBits = v4;
      v6._object = v5;
      unint64_t v7 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1009325D0, v6);
      swift_bridgeObjectRelease();
      if (v7 <= 8)
      {
        if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0) {
          int v3 = sub_1004C449C(0LL, v3[2] + 1LL, 1, v3);
        }
        unint64_t v9 = v3[2];
        unint64_t v8 = v3[3];
        if (v9 >= v8 >> 1) {
          int v3 = sub_1004C449C((void *)(v8 > 1), v9 + 1, 1, v3);
        }
        v3[2] = v9 + 1;
        *((_BYTE *)v3 + v9 + 32) = v7;
      }

      v2 += 2;
      --v1;
    }

    while (v1);
    swift_bridgeObjectRelease();
  }

  else
  {
    int v3 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease();
  uint64_t v10 = sub_1006F0F94((uint64_t)v3);
  swift_bridgeObjectRelease();
  return v10;
}

uint64_t storeEnumTagSinglePayload for TokenSequenceError(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1005724B8 + 4 * byte_100806B80[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1005724D8 + 4 * byte_100806B85[v4]))();
  }
}

_BYTE *sub_1005724B8(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1005724D8(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1005724E0(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1005724E8(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1005724F0(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1005724F8(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for TokenSequenceError()
{
  return &type metadata for TokenSequenceError;
}

unint64_t sub_100572518()
{
  unint64_t result = qword_1009B2CA0;
  if (!qword_1009B2CA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100806BE4, &type metadata for TokenSequenceError);
    atomic_store(result, (unint64_t *)&qword_1009B2CA0);
  }

  return result;
}

uint64_t sub_10057255C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v1 = sub_100004AEC(&qword_1009A1D88);
  __chkstk_darwin(v1);
  int v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = type metadata accessor for URLComponents(0LL);
  uint64_t v4 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v32 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for FMNAccountType(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for FMNAuthenticationProvider(0LL);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for FMNAccountType.secureLocations(_:), v6);
  static FMNAuthenticationProvider.configurationURL(accountType:)(v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) == 1)
  {
    uint64_t v17 = (uint64_t *)&unk_1009A34D0;
    uint64_t v18 = (uint64_t)v12;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    URLComponents.init(url:resolvingAgainstBaseURL:)(v16, 0LL);
    uint64_t v19 = v33;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v3, 1LL, v33) != 1)
    {
      uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      id v28 = v32;
      v27(v32, v3, v19);
      int64_t v29 = (void (*)(_BYTE *, void))URLComponents.path.modify(v35);
      v30._countAndFlagsBits = 0x7263736275736E75LL;
      v30._object = (void *)0xEB00000000656269LL;
      String.append(_:)(v30);
      v29(v35, 0LL);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v34, v28, v19);
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    uint64_t v17 = &qword_1009A1D88;
    uint64_t v18 = (uint64_t)v3;
  }

  sub_100015794(v18, v17);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  uint64_t v21 = sub_10000A720(v20, (uint64_t)qword_100A2AE08);
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    int v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)int v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "No url found in account bag.", v24, 2u);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  URLComponents.init()(v25);
  URLComponents.scheme.setter(0x7370747468LL, 0xE500000000000000LL);
  URLComponents.path.setter(0xD00000000000001ALL, 0x80000001008684A0LL);
  return URLComponents.host.setter(0xD000000000000012LL, 0x8000000100854BE0LL);
}

uint64_t sub_100572914(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v24 = a5;
  uint64_t v25 = a4;
  uint64_t v9 = sub_100004AEC(&qword_1009B2D68);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v23 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v14);
  unint64_t v15 = sub_100573588();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SecureLocationsUnsubscribeData.CodingKeys,  &type metadata for SecureLocationsUnsubscribeData.CodingKeys,  v15,  v14,  v13);
  LOBYTE(v27) = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a2, a3, &v27, v9);
  if (!v5)
  {
    uint64_t v16 = v24;
    uint64_t v27 = v25;
    char v26 = 1;
    uint64_t v17 = sub_100004AEC(&qword_10099E868);
    uint64_t v18 = sub_10020F8E4((unint64_t *)&qword_1009A2798, &qword_10099E868, (void (*)(void))sub_1000170A4);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v26, v9, v17, v18);
    uint64_t v27 = v16;
    char v26 = 2;
    type metadata accessor for SPSecureLocationSubscriptionMode(0LL);
    uint64_t v20 = v19;
    unint64_t v21 = sub_1001C8AE0();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v27, &v26, v9, v20, v21);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v12, v9);
}

uint64_t sub_100572ABC()
{
  uint64_t v1 = 7562345LL;
  if (*v0 != 1) {
    uint64_t v1 = 1701080941LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 1682533734LL;
  }
}

uint64_t sub_100572B00@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100573914(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100572B24(uint64_t a1)
{
  unint64_t v2 = sub_100573588();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100572B4C(uint64_t a1)
{
  unint64_t v2 = sub_100573588();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100572B74(void *a1)
{
  return sub_100572914(a1, *v1, v1[1], v1[2], v1[3]);
}

uint64_t sub_100572B90(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B2D40);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_100573500();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SecureLocationsUnsubscribeBody.CodingKeys,  &type metadata for SecureLocationsUnsubscribeBody.CodingKeys,  v11,  v9,  v10);
  *(void *)&v19[0] = *(void *)v3;
  char v21 = 0;
  uint64_t v12 = sub_100004AEC(&qword_1009B2D50);
  uint64_t v13 = sub_10020F8E4(&qword_1009B2D58, &qword_1009B2D50, (void (*)(void))sub_100573544);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v21, v5, v12, v13);
  if (!v2)
  {
    __int128 v14 = *(_OWORD *)(v3 + 88);
    v19[4] = *(_OWORD *)(v3 + 72);
    v19[5] = v14;
    v19[6] = *(_OWORD *)(v3 + 104);
    uint64_t v20 = *(void *)(v3 + 120);
    __int128 v15 = *(_OWORD *)(v3 + 24);
    v19[0] = *(_OWORD *)(v3 + 8);
    v19[1] = v15;
    __int128 v16 = *(_OWORD *)(v3 + 56);
    v19[2] = *(_OWORD *)(v3 + 40);
    v19[3] = v16;
    char v21 = 1;
    unint64_t v17 = sub_1001C82C8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v21, v5, &type metadata for SecureLocationsClientContext, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100572D24()
{
  if (*v0) {
    return 0x6F43746E65696C63LL;
  }
  else {
    return 0x7263736275736E75LL;
  }
}

uint64_t sub_100572D74@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100573A38(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100572D98(uint64_t a1)
{
  unint64_t v2 = sub_100573500();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100572DC0(uint64_t a1)
{
  unint64_t v2 = sub_100573500();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100572DE8(void *a1)
{
  return sub_100572B90(a1);
}

id sub_100572E30(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a1;
  if (!*(void *)(a1 + 16))
  {
    swift_bridgeObjectRelease();
    sub_1001C7970(a2);
    return 0LL;
  }

  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  __int128 v38 = *(_OWORD *)(a2 + 5);
  uint64_t v9 = a2[7];
  uint64_t v36 = a2[9];
  uint64_t v37 = a2[8];
  uint64_t v34 = a2[11];
  uint64_t v35 = a2[10];
  uint64_t v33 = a2[12];
  char v32 = *((_BYTE *)a2 + 104);
  uint64_t v31 = a2[14];
  unint64_t v10 = sub_100412D14((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v48 = v10;
  id result = [(id)objc_opt_self(AKDevice) currentDevice];
  if (result)
  {
    uint64_t v12 = result;
    id v13 = [result serverFriendlyDescription];

    if (v13)
    {
      uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
      uint64_t v30 = v3;
      uint64_t v15 = v8;
      uint64_t v16 = v7;
      uint64_t v17 = v6;
      uint64_t v18 = v5;
      uint64_t v19 = v4;
      uint64_t v20 = v9;
      uint64_t v22 = v21;

      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
      *(void *)&__int128 v40 = v10;
      unint64_t v48 = 0x8000000000000000LL;
      uint64_t v24 = v22;
      uint64_t v9 = v20;
      uint64_t v4 = v19;
      uint64_t v5 = v18;
      uint64_t v6 = v17;
      uint64_t v7 = v16;
      uint64_t v8 = v15;
      uint64_t v3 = v30;
      sub_10005C260(v14, v24, 0xD000000000000011LL, 0x8000000100854B60LL, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_100047E14(0xD000000000000011LL, 0x8000000100854B60LL);
      swift_bridgeObjectRelease();
      unint64_t v10 = v48;
    }

    char v25 = swift_isUniquelyReferenced_nonNull_native(v10);
    sub_10005C260(49LL, 0xE100000000000000LL, 0x562D747065636341LL, 0xEE006E6F69737265LL, v25);
    swift_bridgeObjectRelease();
    char v26 = swift_isUniquelyReferenced_nonNull_native(v10);
    *(void *)&v39[0] = v10;
    sub_10005C260(0xD000000000000010LL, 0x8000000100854B80LL, 0x2D746E65746E6F43LL, 0xEC00000065707954LL, v26);
    unint64_t v29 = v10;
    unint64_t v48 = v10;
    swift_bridgeObjectRelease();
    *(void *)&__int128 v40 = v3;
    *((void *)&v40 + 1) = v4;
    *(void *)&__int128 v41 = v5;
    *((void *)&v41 + 1) = v6;
    *(void *)&__int128 v42 = v7;
    *((void *)&v42 + 1) = v8;
    __int128 v43 = v38;
    *(void *)&__int128 v44 = v9;
    *((void *)&v44 + 1) = v37;
    *(void *)&__int128 v45 = v36;
    *((void *)&v45 + 1) = v35;
    *(void *)&__int128 v46 = v34;
    *((void *)&v46 + 1) = v33;
    LOBYTE(v47) = v32;
    *((void *)&v47 + 1) = v31;
    uint64_t v27 = type metadata accessor for JSONEncoder(0LL);
    swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
    JSONEncoder.init()();
    v39[4] = v44;
    v39[5] = v45;
    v39[6] = v46;
    v39[7] = v47;
    v39[0] = v40;
    v39[1] = v41;
    v39[2] = v42;
    v39[3] = v38;
    unint64_t v28 = sub_100573254();
    dispatch thunk of JSONEncoder.encode<A>(_:)(v39, &type metadata for SecureLocationsUnsubscribeBody, v28);
    swift_release();
    sub_1001C78EC((uint64_t *)&v40);
    return (id)v29;
  }

  __break(1u);
  return result;
}

unint64_t sub_100573254()
{
  unint64_t result = qword_1009B2CA8;
  if (!qword_1009B2CA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100806D5C, &type metadata for SecureLocationsUnsubscribeBody);
    atomic_store(result, (unint64_t *)&qword_1009B2CA8);
  }

  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsUnsubscribeBody()
{
  return &type metadata for SecureLocationsUnsubscribeBody;
}

ValueMetadata *type metadata accessor for SecureLocationsUnsubscribeRequest()
{
  return &type metadata for SecureLocationsUnsubscribeRequest;
}

void *initializeWithCopy for SecureLocationsUnsubscribeData(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v5 = a2[2];
  uint64_t v4 = a2[3];
  a1[2] = v5;
  a1[3] = v4;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *assignWithCopy for SecureLocationsUnsubscribeData(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  return a1;
}

void *assignWithTake for SecureLocationsUnsubscribeData(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  a1[3] = *(void *)(a2 + 24);
  return a1;
}

ValueMetadata *type metadata accessor for SecureLocationsUnsubscribeData()
{
  return &type metadata for SecureLocationsUnsubscribeData;
}

uint64_t sub_1005733BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005733C8);
}

uint64_t sub_1005733C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FMNAccountType(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v8 = type metadata accessor for URLComponents(0LL);
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_10057343C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100573448);
}

uint64_t sub_100573448(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for FMNAccountType(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v10 = type metadata accessor for URLComponents(0LL);
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SecureLocationsUnsubscribeEndpoint(uint64_t a1)
{
  uint64_t result = qword_1009B2D08;
  if (!qword_1009B2D08) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SecureLocationsUnsubscribeEndpoint);
  }
  return result;
}

unint64_t sub_100573500()
{
  unint64_t result = qword_1009B2D48;
  if (!qword_1009B2D48)
  {
    unint64_t result = swift_getWitnessTable(&unk_100806FA8, &type metadata for SecureLocationsUnsubscribeBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B2D48);
  }

  return result;
}

unint64_t sub_100573544()
{
  unint64_t result = qword_1009B2D60;
  if (!qword_1009B2D60)
  {
    unint64_t result = swift_getWitnessTable(&unk_100806D04, &type metadata for SecureLocationsUnsubscribeData);
    atomic_store(result, (unint64_t *)&qword_1009B2D60);
  }

  return result;
}

unint64_t sub_100573588()
{
  unint64_t result = qword_1009B2D70;
  if (!qword_1009B2D70)
  {
    unint64_t result = swift_getWitnessTable(&unk_100806F58, &type metadata for SecureLocationsUnsubscribeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B2D70);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsUnsubscribeData.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_100573618 + 4 * byte_100806C55[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10057364C + 4 * byte_100806C50[v4]))();
}

uint64_t sub_10057364C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100573654(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10057365CLL);
  }
  return result;
}

uint64_t sub_100573668(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100573670LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_100573674(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10057367C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsUnsubscribeData.CodingKeys()
{
  return &type metadata for SecureLocationsUnsubscribeData.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsUnsubscribeBody.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1005736E4 + 4 * byte_100806C5F[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100573718 + 4 * byte_100806C5A[v4]))();
}

uint64_t sub_100573718(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100573720(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100573728LL);
  }
  return result;
}

uint64_t sub_100573734(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10057373CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_100573740(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100573748(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsUnsubscribeBody.CodingKeys()
{
  return &type metadata for SecureLocationsUnsubscribeBody.CodingKeys;
}

unint64_t sub_100573768()
{
  unint64_t result = qword_1009B2D78;
  if (!qword_1009B2D78)
  {
    unint64_t result = swift_getWitnessTable(&unk_100806E78, &type metadata for SecureLocationsUnsubscribeBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B2D78);
  }

  return result;
}

unint64_t sub_1005737B0()
{
  unint64_t result = qword_1009B2D80;
  if (!qword_1009B2D80)
  {
    unint64_t result = swift_getWitnessTable(&unk_100806F30, &type metadata for SecureLocationsUnsubscribeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B2D80);
  }

  return result;
}

unint64_t sub_1005737F8()
{
  unint64_t result = qword_1009B2D88;
  if (!qword_1009B2D88)
  {
    unint64_t result = swift_getWitnessTable(&unk_100806EA0, &type metadata for SecureLocationsUnsubscribeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B2D88);
  }

  return result;
}

unint64_t sub_100573840()
{
  unint64_t result = qword_1009B2D90;
  if (!qword_1009B2D90)
  {
    unint64_t result = swift_getWitnessTable(&unk_100806EC8, &type metadata for SecureLocationsUnsubscribeData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B2D90);
  }

  return result;
}

unint64_t sub_100573888()
{
  unint64_t result = qword_1009B2D98;
  if (!qword_1009B2D98)
  {
    unint64_t result = swift_getWitnessTable(&unk_100806DE8, &type metadata for SecureLocationsUnsubscribeBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B2D98);
  }

  return result;
}

unint64_t sub_1005738D0()
{
  unint64_t result = qword_1009B2DA0;
  if (!qword_1009B2DA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100806E10, &type metadata for SecureLocationsUnsubscribeBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B2DA0);
  }

  return result;
}

uint64_t sub_100573914(uint64_t a1, unint64_t a2)
{
  if (a1 == 1682533734 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1682533734LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 7562345 && a2 == 0xE300000000000000LL)
  {
    unint64_t v7 = 0xE300000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(7562345LL, 0xE300000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 1701080941 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1701080941LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_100573A38(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x7263736275736E75LL && a2 == 0xEB00000000656269LL)
  {
    unint64_t v5 = 0xEB00000000656269LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7263736275736E75LL, 0xEB00000000656269LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6F43746E65696C63LL && a2 == 0xED0000747865746ELL)
  {
    swift_bridgeObjectRelease(0xED0000747865746ELL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F43746E65696C63LL, 0xED0000747865746ELL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

ValueMetadata *type metadata accessor for AccessorySetMaxConnectionsPayload()
{
  return &type metadata for AccessorySetMaxConnectionsPayload;
}

unint64_t sub_100573B74(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100573BA0();
  unint64_t result = sub_1000F51DC();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_100573BA0()
{
  unint64_t result = qword_1009B2DA8;
  if (!qword_1009B2DA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100807024, &type metadata for AccessorySetMaxConnectionsPayload);
    atomic_store(result, (unint64_t *)&qword_1009B2DA8);
  }

  return result;
}

Swift::Int sub_100573BE4(void *a1)
{
  unint64_t v2 = (void *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    unint64_t v2 = (void *)sub_1003D4B40(v2);
  }
  uint64_t v3 = v2[2];
  v5[0] = (uint64_t)(v2 + 4);
  v5[1] = v3;
  Swift::Int result = sub_10057AD44(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_100573C4C()
{
  Swift::Int v0 = sub_100767F10((uint64_t)&off_1009327C0);
  uint64_t result = swift_arrayDestroy(&unk_1009327E0, 1LL, &type metadata for String);
  qword_1009B2DB0 = v0;
  return result;
}

uint64_t sub_100573C94@<X0>(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  uint64_t v71 = a1;
  uint64_t v67 = a2;
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v66 = (char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  char v8 = (char *)&v65 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  unint64_t v11 = (char *)&v65 - v10;
  __chkstk_darwin(v9);
  id v13 = (char *)&v65 - v12;
  uint64_t v14 = objc_autoreleasePoolPush();
  uint64_t v15 = UUID.uuidString.getter(v14);
  URL.appendingPathComponent(_:)(v15, v16);
  swift_bridgeObjectRelease();
  URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
  uint64_t v70 = v3;
  uint64_t v17 = *(void (**)(char *, uint64_t))(v3 + 8);
  v17(v11, v2);
  objc_autoreleasePoolPop(v14);
  uint64_t v18 = objc_autoreleasePoolPush();
  uint64_t v19 = UUID.uuidString.getter(v18);
  URL.appendingPathComponent(_:)(v19, v20);
  swift_bridgeObjectRelease();
  URL.appendingPathExtension(_:)(0xD000000000000010LL, 0x8000000100855C50LL);
  uint64_t v71 = v2;
  uint64_t v68 = v17;
  v17(v11, v2);
  uint64_t v21 = v8;
  objc_autoreleasePoolPop(v18);
  uint64_t v22 = (void *)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v23 = [v22 defaultManager];
  URL._bridgeToObjectiveC()(v24);
  char v26 = v25;
  URL._bridgeToObjectiveC()(v27);
  unint64_t v29 = v28;
  id v73 = 0LL;
  LODWORD(v8) = [v23 moveItemAtURL:v26 toURL:v28 error:&v73];

  id v30 = v73;
  if ((_DWORD)v8)
  {
    id v31 = v73;
  }

  else
  {
    id v32 = v73;
    uint64_t v33 = _convertNSErrorToError(_:)(v30);

    swift_willThrow(v34);
    id v35 = [v22 defaultManager];
    URL._bridgeToObjectiveC()(v36);
    __int128 v38 = v37;
    URL._bridgeToObjectiveC()(v39);
    __int128 v41 = v40;
    id v73 = 0LL;
    unsigned __int8 v42 = [v35 replaceItemAtURL:v38 withItemAtURL:v40 backupItemName:0 options:1 resultingItemURL:0 error:&v73];

    id v43 = v73;
    if ((v42 & 1) == 0)
    {
      id v61 = v73;
      _convertNSErrorToError(_:)(v43);

      swift_willThrow(v62);
      swift_errorRelease(v33);
      uint64_t v63 = v71;
      int64_t v64 = (uint64_t (*)(char *, uint64_t))v68;
      v68(v21, v71);
      return v64(v13, v63);
    }

    id v44 = v73;
    swift_errorRelease(v33);
    uint64_t v69 = 0LL;
  }

  uint64_t v45 = v71;
  __int128 v46 = v66;
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v47 = type metadata accessor for Logger(0LL);
  sub_10000A720(v47, (uint64_t)qword_100A2AC98);
  uint64_t v48 = (*(uint64_t (**)(char *, char *, uint64_t))(v70 + 16))(v46, v13, v45);
  uint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
  os_log_type_t v50 = static os_log_type_t.default.getter(v49);
  if (os_log_type_enabled(v49, v50))
  {
    uint64_t v51 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v52 = (void *)swift_slowAlloc(32LL, -1LL);
    id v73 = v52;
    uint64_t v65 = v21;
    *(_DWORD *)uint64_t v51 = 136315138;
    uint64_t v53 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter(v71, v53);
    uint64_t v72 = sub_1003F11D4(v54, v55, (uint64_t *)&v73);
    uint64_t v45 = v71;
    uint64_t v21 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v51 + 4, v51 + 12);
    swift_bridgeObjectRelease();
    v68(v46, v45);
    _os_log_impl((void *)&_mh_execute_header, v49, v50, "Tombstoned record %s", v51, 0xCu);
    swift_arrayDestroy(v52, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v52, -1LL, -1LL);
    swift_slowDealloc(v51, -1LL, -1LL);
  }

  else
  {
    v68(v46, v45);
  }

  uint64_t v56 = v70;
  uint64_t v57 = *(void (**)(uint64_t, char *, uint64_t))(v70 + 32);
  uint64_t v58 = v67;
  v57(v67, v13, v45);
  uint64_t v59 = v58 + *(int *)(type metadata accessor for BeaconStoreFileRecord(0LL) + 20);
  v57(v59, v21, v45);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v56 + 56))(v59, 0LL, 1LL, v45);
}

uint64_t sub_1005741E0@<X0>(char *a1@<X8>)
{
  __int128 v40 = a1;
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v39 - v6;
  char v8 = objc_autoreleasePoolPush();
  uint64_t v9 = UUID.uuidString.getter(v8);
  URL.appendingPathComponent(_:)(v9, v10);
  swift_bridgeObjectRelease();
  URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
  unint64_t v11 = *(void (**)(char *, uint64_t))(v2 + 8);
  v11(v5, v1);
  objc_autoreleasePoolPop(v8);
  id v12 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL._bridgeToObjectiveC()(v13);
  uint64_t v15 = v14;
  id v41 = 0LL;
  LODWORD(v5) = [v12 removeItemAtURL:v14 error:&v41];

  id v16 = v41;
  if ((_DWORD)v5)
  {
    uint64_t v17 = static os_log_type_t.default.getter(v41);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v18 = qword_100A2B018;
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v20 = swift_allocObject(v19, 72LL, 7LL);
    *(_OWORD *)(v20 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v21 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter(v1, v21);
    uint64_t v24 = v23;
    *(void *)(v20 + 56) = &type metadata for String;
    *(void *)(v20 + 64) = sub_1000226F4();
    *(void *)(v20 + 32) = v22;
    *(void *)(v20 + 40) = v24;
    os_log(_:dso:log:_:_:)(v17, &_mh_execute_header, v18, "Deleted record %@", 17LL, 2LL, v20);
    swift_bridgeObjectRelease();
    char v25 = 1;
  }

  else
  {
    id v26 = v41;
    uint64_t v27 = (void *)_convertNSErrorToError(_:)(v16);

    uint64_t v29 = swift_willThrow(v28);
    uint64_t v30 = static os_log_type_t.default.getter(v29);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v31 = qword_100A2B018;
    uint64_t v32 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v33 = swift_allocObject(v32, 72LL, 7LL);
    *(_OWORD *)(v33 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    id v41 = v27;
    swift_errorRetain(v27);
    uint64_t v34 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v35 = String.init<A>(describing:)(&v41, v34);
    uint64_t v37 = v36;
    *(void *)(v33 + 56) = &type metadata for String;
    *(void *)(v33 + 64) = sub_1000226F4();
    *(void *)(v33 + 32) = v35;
    *(void *)(v33 + 40) = v37;
    os_log(_:dso:log:_:_:)(v30, &_mh_execute_header, v31, "Could not delete record %@", 26LL, 2LL, v33);
    swift_bridgeObjectRelease();
    swift_errorRelease(v27);
    char v25 = 0;
  }

  uint64_t result = ((uint64_t (*)(char *, uint64_t))v11)(v7, v1);
  *__int128 v40 = v25;
  return result;
}

uint64_t sub_10057456C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t v85 = a2;
  uint64_t v5 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v91 = type metadata accessor for UUID(0LL);
  uint64_t v87 = *(void *)(v91 - 8);
  __chkstk_darwin(v91);
  unint64_t v86 = (char *)&v74 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void **)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v90 = (char *)&v74 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v74 - v13;
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v74 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v80 = *(void *)(v18 - 8);
  uint64_t v81 = v18;
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v74 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v78 = (id)objc_opt_self(&OBJC_CLASS___NSFileManager);
  id v21 = [v78 defaultManager];
  NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)(a1, 0LL, 0LL);

  DirectorySequence.next()(v22);
  uint64_t v23 = (unsigned int (*)(char *, uint64_t, uint64_t))v10[6];
  if (v23(v17, 1LL, v9) == 1)
  {
    LOBYTE(v24) = 0;
    goto LABEL_25;
  }

  unsigned int v24 = 0;
  uint64_t v92 = (uint64_t (*)(char *, char *, uint64_t))v10[4];
  __int128 v84 = xmmword_1007E67D0;
  id v93 = v10;
  uint64_t v77 = a3;
  uint64_t v83 = v7;
  uint64_t v88 = v23;
  uint64_t v89 = v20;
  do
  {
    unsigned int v79 = v24;
    uint64_t v25 = v87;
    while (1)
    {
      uint64_t v29 = v92(v14, v17, v9);
      uint64_t v30 = URL.hasDirectoryPath.getter(v29);
      if ((v30 & 1) == 0) {
        break;
      }
      id v26 = (uint64_t (*)(char *, uint64_t))v10[1];
LABEL_6:
      uint64_t v27 = v26(v14, v9);
      DirectorySequence.next()(v27);
      unsigned int v28 = v23(v17, 1LL, v9);
      uint64_t v10 = v93;
      if (v28 == 1)
      {
        a3 = v77;
        LOBYTE(v24) = v79;
        goto LABEL_25;
      }
    }

    uint64_t v31 = v90;
    uint64_t v32 = URL.deletingPathExtension()(v30);
    uint64_t v33 = URL.lastPathComponent.getter(v32);
    uint64_t v35 = v34;
    id v26 = (uint64_t (*)(char *, uint64_t))v10[1];
    v26(v31, v9);
    UUID.init(uuidString:)(v33, v35);
    swift_bridgeObjectRelease();
    uint64_t v36 = v91;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v7, 1LL, v91) == 1)
    {
      uint64_t v37 = sub_100015794((uint64_t)v7, &qword_10099D8A0);
      uint64_t v38 = static os_log_type_t.error.getter(v37);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v39 = qword_100A2B018;
      uint64_t v40 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v41 = swift_allocObject(v40, 72LL, 7LL);
      *(_OWORD *)(v41 + swift_weakDestroy(v0 + 16) = v84;
      uint64_t v42 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter(v9, v42);
      uint64_t v45 = v44;
      *(void *)(v41 + 56) = &type metadata for String;
      *(void *)(v41 + 64) = sub_1000226F4();
      *(void *)(v41 + 32) = v43;
      *(void *)(v41 + 40) = v45;
      os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v39, "Skipping file with unexpected name: %@", 38LL, 2LL, v41);
      swift_bridgeObjectRelease();
      uint64_t v7 = v83;
      uint64_t v25 = v87;
      uint64_t v20 = v89;
      goto LABEL_14;
    }

    __int128 v46 = v86;
    (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v86, v7, v36);
    char v47 = static UUID.== infix(_:_:)(v46, v85);
    uint64_t v20 = v89;
    if ((v47 & 1) == 0)
    {
      (*(void (**)(char *, uint64_t))(v25 + 8))(v46, v36);
LABEL_14:
      uint64_t v23 = v88;
      goto LABEL_6;
    }

    id v48 = [v78 defaultManager];
    URL._bridgeToObjectiveC()(v49);
    uint64_t v51 = v50;
    id v94 = 0LL;
    LODWORD(v76) = [v48 removeItemAtURL:v50 error:&v94];

    id v52 = v94;
    if ((_DWORD)v76)
    {
      unsigned int v79 = static os_log_type_t.default.getter(v94);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v76 = qword_100A2B018;
      uint64_t v53 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v54 = swift_allocObject(v53, 72LL, 7LL);
      *(_OWORD *)(v54 + swift_weakDestroy(v0 + 16) = v84;
      uint64_t v55 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter(v9, v55);
      uint64_t v75 = v57;
      *(void *)(v54 + 56) = &type metadata for String;
      *(void *)(v54 + 64) = sub_1000226F4();
      uint64_t v58 = v75;
      *(void *)(v54 + 32) = v56;
      *(void *)(v54 + 40) = v58;
      os_log(_:dso:log:_:_:)(v79, &_mh_execute_header, v76, "Deleted record %@", 17LL, 2LL, v54);
      swift_bridgeObjectRelease();
      unsigned int v79 = 1;
      uint64_t v59 = v91;
    }

    else
    {
      id v60 = v94;
      id v61 = (void *)_convertNSErrorToError(_:)(v52);

      uint64_t v63 = swift_willThrow(v62);
      LODWORD(v82) = static os_log_type_t.default.getter(v63);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v64 = qword_100A2B018;
      uint64_t v65 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v66 = swift_allocObject(v65, 72LL, 7LL);
      *(_OWORD *)(v66 + swift_weakDestroy(v0 + 16) = v84;
      id v94 = v61;
      swift_errorRetain(v61);
      uint64_t v67 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v68 = String.init<A>(describing:)(&v94, v67);
      uint64_t v70 = v69;
      *(void *)(v66 + 56) = &type metadata for String;
      *(void *)(v66 + 64) = sub_1000226F4();
      *(void *)(v66 + 32) = v68;
      *(void *)(v66 + 40) = v70;
      os_log(_:dso:log:_:_:)(v82, &_mh_execute_header, v64, "Could not delete record %@", 26LL, 2LL, v66);
      swift_bridgeObjectRelease();
      swift_errorRelease(v61);
      uint64_t v82 = 0LL;
      uint64_t v7 = v83;
      uint64_t v59 = v91;
      uint64_t v25 = v87;
      uint64_t v20 = v89;
    }

    (*(void (**)(char *, uint64_t))(v25 + 8))(v86, v59);
    uint64_t v71 = v26(v14, v9);
    DirectorySequence.next()(v71);
    uint64_t v23 = v88;
    unsigned int v72 = v88(v17, 1LL, v9);
    a3 = v77;
    uint64_t v10 = v93;
    unsigned int v24 = v79;
  }

  while (v72 != 1);
LABEL_25:
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v80 + 8))(v20, v81);
  *a3 = v24 & 1;
  return result;
}

void sub_100574CA4(uint64_t a1@<X1>, uint64_t a2@<X8>)
{
  v18[1] = a2;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)v18 - v9;
  uint64_t v11 = objc_autoreleasePoolPush();
  uint64_t v12 = objc_autoreleasePoolPush();
  uint64_t v13 = UUID.uuidString.getter(v12);
  URL.appendingPathComponent(_:)(v13, v14);
  swift_bridgeObjectRelease();
  URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
  uint64_t v15 = *(void (**)(char *, uint64_t))(v5 + 8);
  v15(v8, v4);
  objc_autoreleasePoolPop(v12);
  uint64_t v16 = objc_autoreleasePoolPush();
  uint64_t v20 = v10;
  uint64_t v21 = v2;
  uint64_t v22 = a1;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009A9C40);
  OS_dispatch_queue.sync<A>(execute:)(sub_1004BCA1C, v19, v17);
  objc_autoreleasePoolPop(v16);
  v15(v10, v4);
  objc_autoreleasePoolPop(v11);
}

uint64_t sub_100574E00@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v81 = a3;
  uint64_t v88 = a2;
  uint64_t v89 = a4;
  uint64_t v85 = type metadata accessor for CryptoError(0LL);
  uint64_t v87 = *(void *)(v85 - 8);
  uint64_t v6 = __chkstk_darwin(v85);
  uint64_t v82 = (char *)&v68 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  __int128 v84 = (char *)&v68 - v9;
  __chkstk_darwin(v8);
  uint64_t v83 = (char *)&v68 - v10;
  uint64_t v76 = type metadata accessor for SharedBeaconRecord(0LL);
  __chkstk_darwin(v76);
  id v78 = (uint64_t *)((char *)&v68 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v77 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v77);
  unsigned int v79 = (uint64_t *)((char *)&v68 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v80 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v86 = (char *)&v68 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v68 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (char *)&v68 - v21;
  static SystemInfo.lockState.getter(v20);
  (*(void (**)(char *, void, uint64_t))(v16 + 104))( v19,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v15);
  uint64_t v23 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v91, v15, v23);
  dispatch thunk of RawRepresentable.rawValue.getter(&v90, v15, v23);
  uint64_t v24 = v91;
  uint64_t v25 = v90;
  id v26 = *(void (**)(char *, uint64_t))(v16 + 8);
  v26(v19, v15);
  uint64_t v27 = ((uint64_t (*)(char *, uint64_t))v26)(v22, v15);
  if (v24 != v25)
  {
    uint64_t v31 = Data.init(contentsOf:options:)(a1, 0LL);
    if (v4)
    {
      uint64_t result = swift_errorRelease(v4);
LABEL_17:
      id v60 = (_OWORD *)v89;
      *(void *)(v89 + 32) = 0LL;
      *id v60 = 0u;
      v60[1] = 0u;
      return result;
    }

    uint64_t v33 = v32;
    uint64_t v75 = v31;
    uint64_t v34 = static os_log_type_t.info.getter(v31);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v35 = qword_100A2B018;
    uint64_t v71 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v36 = swift_allocObject(v71, 72LL, 7LL);
    __int128 v72 = xmmword_1007E67D0;
    *(_OWORD *)(v36 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v37 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter(v13, v37);
    uint64_t v40 = v39;
    *(void *)(v36 + 56) = &type metadata for String;
    unint64_t v73 = sub_1000226F4();
    *(void *)(v36 + 64) = v73;
    *(void *)(v36 + 32) = v38;
    *(void *)(v36 + 40) = v40;
    os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v35, "Reading from record file: %@", 28LL, 2LL, v36);
    swift_bridgeObjectRelease();
    uint64_t v41 = v75;
    unint64_t v74 = v33;
    uint64_t v42 = sub_1006C5868(v75, v33);
    uint64_t v43 = v86;
    uint64_t v68 = v37;
    uint64_t v69 = v42;
    unint64_t v70 = v44;
    uint64_t v45 = v80;
    (*(void (**)(char *, uint64_t, uint64_t))(v80 + 16))(v86, v81, v13);
    if (qword_10099B610 != -1) {
      swift_once(&qword_10099B610, sub_1005D3C50);
    }
    uint64_t v46 = sub_10000A720(v13, (uint64_t)qword_100A2AE80);
    uint64_t v47 = sub_100007864( &qword_1009A89D0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(v46, v43, v13, v47) & 1) != 0)
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v43, v13);
      id v48 = objc_autoreleasePoolPush();
      uint64_t v49 = v79;
      uint64_t v50 = v69;
      unint64_t v51 = v70;
      sub_1005426C0(v69, v70, v79);
      objc_autoreleasePoolPop(v48);
      id v52 = (void *)v89;
      *(void *)(v89 + 24) = v77;
      uint64_t v53 = (unint64_t *)&qword_10099D000;
      uint64_t v54 = type metadata accessor for OwnedBeaconRecord;
      uint64_t v55 = &unk_10080B120;
    }

    else
    {
      if (qword_10099B9E8 != -1) {
        swift_once(&qword_10099B9E8, sub_100763874);
      }
      uint64_t v56 = sub_10000A720(v13, (uint64_t)qword_100A2B738);
      char v57 = dispatch thunk of static Equatable.== infix(_:_:)(v56, v43, v13, v47);
      uint64_t v58 = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v43, v13);
      if ((v57 & 1) == 0)
      {
        uint64_t v61 = static os_log_type_t.error.getter(v58);
        uint64_t v62 = qword_100A2B018;
        uint64_t v63 = swift_allocObject(v71, 72LL, 7LL);
        *(_OWORD *)(v63 + swift_weakDestroy(v0 + 16) = v72;
        uint64_t v64 = dispatch thunk of CustomStringConvertible.description.getter(v13, v68);
        unint64_t v65 = v73;
        *(void *)(v63 + 56) = &type metadata for String;
        *(void *)(v63 + 64) = v65;
        *(void *)(v63 + 32) = v64;
        *(void *)(v63 + 40) = v66;
        os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, v62, "Unsupported baseURL: %@", 23LL, 2LL, v63);
        sub_100016F9C(v69, v70);
        sub_100016F9C(v41, v74);
        uint64_t result = swift_bridgeObjectRelease();
        goto LABEL_17;
      }

      uint64_t v59 = objc_autoreleasePoolPush();
      uint64_t v49 = v78;
      uint64_t v50 = v69;
      unint64_t v51 = v70;
      sub_10054268C(v69, v70, v78);
      objc_autoreleasePoolPop(v59);
      id v52 = (void *)v89;
      *(void *)(v89 + 24) = v76;
      uint64_t v53 = &qword_10099CFF8;
      uint64_t v54 = type metadata accessor for SharedBeaconRecord;
      uint64_t v55 = &unk_10081ADAC;
    }

    v52[4] = sub_100007864(v53, v54, (uint64_t)v55);
    uint64_t v67 = sub_10000A7C8(v52);
    sub_10002218C((uint64_t)v49, (uint64_t)v67, v54);
    sub_100016F9C(v50, v51);
    return sub_100016F9C(v41, v74);
  }

  uint64_t v28 = static os_log_type_t.default.getter(v27);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t result = os_log(_:dso:log:_:_:)( v28,  &_mh_execute_header,  qword_100A2B018,  "record call failed because in device is in beforeFirstUnlock state",  66LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v30 = (_OWORD *)v89;
  *(void *)(v89 + 32) = 0LL;
  *uint64_t v30 = 0u;
  v30[1] = 0u;
  return result;
}

uint64_t sub_1005757BC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v9._object = (void *)0x800000010085B040LL;
  v9._countAndFlagsBits = 0xD000000000000014LL;
  prohibitAsyncContext(functionName:)(v9);
  v17[0] = a3;
  uint64_t MetatypeMetadata = swift_getMetatypeMetadata(a3);
  uint64_t v11 = String.init<A>(describing:)(v17, MetatypeMetadata);
  uint64_t v13 = v12;
  uint64_t v14 = objc_autoreleasePoolPush();
  v17[2] = a3;
  v17[3] = a4;
  uint64_t v18 = v4;
  uint64_t v19 = a1;
  uint64_t v20 = a2;
  uint64_t v21 = v11;
  uint64_t v22 = v13;
  uint64_t v15 = type metadata accessor for Optional(0LL, a3);
  OS_dispatch_queue.sync<A>(execute:)(sub_10057C808, v17, v15);
  objc_autoreleasePoolPop(v14);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1005758A4@<X0>( uint64_t a1@<X0>, unint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t a5@<X5>, uint64_t a6@<X6>, void *a7@<X8>)
{
  uint64_t v106 = a7;
  uint64_t v96 = a6;
  uint64_t v105 = a5;
  uint64_t v99 = a4;
  uint64_t v100 = a1;
  uint64_t v101 = a3;
  unint64_t v103 = a2;
  uint64_t v98 = type metadata accessor for CryptoError(0LL);
  uint64_t v95 = *(void *)(v98 - 8);
  uint64_t v7 = __chkstk_darwin(v98);
  uint64_t v97 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  id v93 = (char *)&v88 - v10;
  __chkstk_darwin(v9);
  id v94 = (char *)&v88 - v11;
  uint64_t v104 = type metadata accessor for URL(0LL);
  uint64_t v102 = *(void *)(v104 - 8);
  uint64_t v12 = __chkstk_darwin(v104);
  uint64_t v14 = (char *)&v88 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v88 - v15;
  uint64_t v17 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v88 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v88 - v23;
  static SystemInfo.lockState.getter(v22);
  (*(void (**)(char *, void, uint64_t))(v18 + 104))( v21,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v17);
  uint64_t v25 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v110, v17, v25);
  dispatch thunk of RawRepresentable.rawValue.getter(&v111, v17, v25);
  uint64_t v26 = v110[0];
  uint64_t v27 = v111;
  uint64_t v28 = *(void (**)(char *, uint64_t))(v18 + 8);
  v28(v21, v17);
  uint64_t v29 = ((uint64_t (*)(char *, uint64_t))v28)(v24, v17);
  if (v26 == v27)
  {
    uint64_t v30 = static os_log_type_t.default.getter(v29);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v30,  &_mh_execute_header,  qword_100A2B018,  "record(for uuid:) call failed because in device is in beforeFirstUnlock state",  77LL,  2LL,  _swiftEmptyArrayStorage);
    return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v105 - 8) + 56LL))(v106, 1LL, 1LL);
  }

  uint64_t v32 = objc_autoreleasePoolPush();
  uint64_t v33 = UUID.uuidString.getter(v32);
  URL.appendingPathComponent(_:)(v33, v34);
  swift_bridgeObjectRelease();
  URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v102 + 8);
  uint64_t v36 = v104;
  v35(v14, v104);
  objc_autoreleasePoolPop(v32);
  uint64_t v37 = v107;
  uint64_t v38 = Data.init(contentsOf:options:)(v16, 0LL);
  if (v37)
  {
    swift_errorRelease(v37);
    v35(v16, v36);
    return (*(uint64_t (**)(void *, uint64_t, uint64_t))(*(void *)(v105 - 8) + 56LL))(v106, 1LL, 1LL);
  }

  uint64_t v102 = v38;
  unint64_t v103 = v39;
  uint64_t v91 = v35;
  uint64_t v40 = static os_log_type_t.debug.getter(v38);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v41 = qword_100A2B018;
  uint64_t v89 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v42 = swift_allocObject(v89, 72LL, 7LL);
  __int128 v88 = xmmword_1007E67D0;
  *(_OWORD *)(v42 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v43 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v92 = v16;
  uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter(v36, v43);
  uint64_t v46 = v45;
  *(void *)(v42 + 56) = &type metadata for String;
  unint64_t v90 = sub_1000226F4();
  *(void *)(v42 + 64) = v90;
  *(void *)(v42 + 32) = v44;
  *(void *)(v42 + 40) = v46;
  os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Reading from LocalStorageBacked file: %@", 40LL, 2LL, v42);
  swift_bridgeObjectRelease();
  uint64_t v47 = v100;
  id v48 = (uint64_t *)(v100 + 72);
  swift_beginAccess(v100 + 72, v110, 33LL, 0LL);
  uint64_t v49 = v99;
  swift_bridgeObjectRetain(v99);
  uint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v47 + 72));
  uint64_t v111 = *(void *)(v47 + 72);
  uint64_t v51 = v111;
  *(void *)(v47 + 72) = 0x8000000000000000LL;
  unint64_t v53 = sub_10030CF14(v101, v49);
  uint64_t v54 = *(void *)(v51 + 16);
  BOOL v55 = (v52 & 1) == 0;
  uint64_t v56 = v54 + v55;
  if (__OFADD__(v54, v55))
  {
    __break(1u);
    goto LABEL_32;
  }

  LOBYTE(v14) = v52;
  if (*(void *)(v51 + 24) >= v56)
  {
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      goto LABEL_34;
    }
    while (1)
    {
LABEL_14:
      *id v48 = v51;
      swift_bridgeObjectRelease();
      id v48 = (uint64_t *)*v48;
      uint64_t v59 = v48;
      if ((v14 & 1) == 0)
      {
        swift_bridgeObjectRetain(v48);
        sub_100006740(&v111);
        sub_10006047C(v53, v101, v49, v111, v48);
        uint64_t v59 = (uint64_t *)v49;
      }

      swift_bridgeObjectRetain(v59);
      uint64_t v60 = v48[7];
      uint64_t v61 = *(void *)(v60 + 8 * v53);
      BOOL v62 = __OFADD__(v61, 1LL);
      uint64_t v63 = v61 + 1;
      if (v62)
      {
LABEL_32:
        __break(1u);
      }

      else
      {
        *(void *)(v60 + 8 * v53) = v63;
        swift_endAccess(v110);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v64 = *(void *)(v47 + 64);
        BOOL v62 = __OFADD__(v64, 1LL);
        uint64_t v65 = v64 + 1;
        if (!v62)
        {
          *(void *)(v47 + 64) = v65;
          if (__ROR8__(0x1CAC083126E978D5LL * v65 + 0x10624DD2F1A9FB8LL, 3) < 0x4189374BC6A7EFuLL)
          {
            uint64_t v66 = sub_100576484(v47);
            unint64_t v68 = v67;
            swift_bridgeObjectRetain(*(void *)(v47 + 72));
            uint64_t v70 = sub_1000F084C(v69);
            char v72 = v71;
            swift_bridgeObjectRelease();
            if ((v72 & 1) != 0 || v70 < 10001)
            {
              if (qword_10099B528 != -1) {
                swift_once(&qword_10099B528, sub_1004F3B00);
              }
              uint64_t v77 = type metadata accessor for Logger(0LL);
              sub_10000A720(v77, (uint64_t)qword_100A2AC98);
              swift_bridgeObjectRetain(v68);
              uint64_t v75 = (os_log_s *)Logger.logObject.getter(v78);
              os_log_type_t v76 = static os_log_type_t.info.getter(v75);
            }

            else
            {
              if (qword_10099B528 != -1) {
                swift_once(&qword_10099B528, sub_1004F3B00);
              }
              uint64_t v73 = type metadata accessor for Logger(0LL);
              sub_10000A720(v73, (uint64_t)qword_100A2AC98);
              swift_bridgeObjectRetain(v68);
              uint64_t v75 = (os_log_s *)Logger.logObject.getter(v74);
              os_log_type_t v76 = static os_log_type_t.error.getter(v75);
            }

            os_log_type_t v79 = v76;
            if (os_log_type_enabled(v75, v76))
            {
              uint64_t v80 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
              uint64_t v81 = swift_slowAlloc(32LL, -1LL);
              v110[0] = v81;
              *(_DWORD *)uint64_t v80 = 136446210;
              swift_bridgeObjectRetain(v68);
              uint64_t v111 = sub_1003F11D4(v66, v68, v110);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v111, &v112, v80 + 4, v80 + 12);
              swift_bridgeObjectRelease_n(v68, 3LL);
              _os_log_impl((void *)&_mh_execute_header, v75, v79, "readStatistics:\n%{public}s", v80, 0xCu);
              swift_arrayDestroy(v81, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v81, -1LL, -1LL);
              swift_slowDealloc(v80, -1LL, -1LL);
            }

            else
            {

              swift_bridgeObjectRelease_n(v68, 2LL);
            }
          }

          uint64_t v82 = sub_1006C5868(v102, v103);
          unint64_t v84 = v83;
          uint64_t v85 = type metadata accessor for Optional(0LL, v105);
          uint64_t v86 = v96;
          uint64_t v109 = *(void *)(v96 + 8);
          uint64_t WitnessTable = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v85);
          uint64_t v108 = *(void *)(v86 + 16);
          swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v85);
          sub_10057928C(v82, v84, v85, WitnessTable, v106);
          v91(v92, v104);
          sub_100016F9C(v82, v84);
          return sub_100016F9C(v102, v103);
        }
      }

      __break(1u);
LABEL_34:
      sub_100061B10();
      uint64_t v51 = v111;
    }
  }

  sub_100049DAC(v56, isUniquelyReferenced_nonNull_native);
  uint64_t v51 = v111;
  uint64_t v57 = sub_10030CF14(v101, v49);
  if ((v14 & 1) == (v58 & 1))
  {
    unint64_t v53 = v57;
    goto LABEL_14;
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

uint64_t sub_100576484(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 72);
  swift_bridgeObjectRetain_n(v2, 2LL);
  uint64_t v3 = sub_100300EE0(v2);
  swift_bridgeObjectRelease();
  uint64_t v20 = (void *)v3;
  sub_100573BE4(&v20);
  swift_bridgeObjectRelease();
  uint64_t v4 = v20;
  uint64_t v5 = v20[2];
  if (v5)
  {
    uint64_t v6 = v20 + 7;
    uint64_t v7 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v8 = *(v6 - 1);
      uint64_t v20 = (void *)*(v6 - 2);
      uint64_t v21 = v8;
      swift_bridgeObjectRetain_n(v8, 2LL);
      v9._countAndFlagsBits = 8250LL;
      v9._object = (void *)0xE200000000000000LL;
      String.append(_:)(v9);
      v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      String.append(_:)(v10);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v11 = v20;
      uint64_t v12 = v21;
      if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0) {
        uint64_t v7 = sub_1004C4120(0LL, v7[2] + 1LL, 1, v7);
      }
      unint64_t v14 = v7[2];
      unint64_t v13 = v7[3];
      if (v14 >= v13 >> 1) {
        uint64_t v7 = sub_1004C4120((void *)(v13 > 1), v14 + 1, 1, v7);
      }
      v6 += 4;
      v7[2] = v14 + 1;
      uint64_t v15 = &v7[2 * v14];
      v15[4] = v11;
      v15[5] = v12;
      --v5;
    }

    while (v5);
  }

  else
  {
    uint64_t v7 = _swiftEmptyArrayStorage;
  }

  swift_release(v4);
  uint64_t v20 = v7;
  uint64_t v16 = sub_100004AEC(&qword_1009AED50);
  unint64_t v17 = sub_10057C608();
  uint64_t v18 = BidirectionalCollection<>.joined(separator:)(10LL, 0xE100000000000000LL, v16, v17);
  swift_bridgeObjectRelease();
  return v18;
}

void *sub_10057667C()
{
  return sub_100576868( &qword_10099B9E8,  (uint64_t)qword_100A2B738,  (void (*)(char *, uint64_t, void **, void **))sub_100534A44,  (uint64_t)sub_100763874);
}

uint64_t sub_1005766A0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v17[1] = a2;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B690 != -1) {
    swift_once(&qword_10099B690, sub_10061ABF8);
  }
  uint64_t v8 = sub_10000A720(v4, (uint64_t)qword_100A2AF70);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9._object = (void *)0x800000010085B040LL;
  v9._countAndFlagsBits = 0xD000000000000014LL;
  prohibitAsyncContext(functionName:)(v9);
  uint64_t v18 = type metadata accessor for SafeLocation(0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009B2A88);
  uint64_t v11 = String.init<A>(describing:)(&v18, v10);
  uint64_t v13 = v12;
  unint64_t v14 = objc_autoreleasePoolPush();
  v17[0] = v5;
  __chkstk_darwin(v14);
  v17[-6] = v2;
  v17[-5] = a1;
  v17[-4] = v7;
  v17[-3] = v11;
  v17[-2] = v13;
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009AF740);
  OS_dispatch_queue.sync<A>(execute:)(sub_10057C7C8, &v17[-8], v15);
  objc_autoreleasePoolPop(v14);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v17[0] + 8LL))(v7, v4);
}

void *sub_100576844()
{
  return sub_100576868( &qword_10099B690,  (uint64_t)qword_100A2AF70,  (void (*)(char *, uint64_t, void **, void **))sub_100535648,  (uint64_t)sub_10061ABF8);
}

void *sub_100576868( void *a1, uint64_t a2, void (*a3)(char *, uint64_t, void **, void **), uint64_t a4)
{
  id v48 = a3;
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v7);
  Swift::String v9 = (char *)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v45 = *(void *)(v10 - 8);
  uint64_t v46 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v44 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v44 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v44 - v18;
  if (*a1 != -1LL) {
    swift_once(a1, a4);
  }
  uint64_t v20 = sub_10000A720(v13, a2);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v19, v20, v13);
  uint64_t v51 = _swiftEmptyArrayStorage;
  char v52 = _swiftEmptyArrayStorage;
  id v21 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v49 = v19;
  NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)(v19, 0LL, 0LL);

  DirectorySequence.next()(v22);
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v24 = v23(v9, 1LL, v13);
  uint64_t v50 = v14;
  uint64_t v26 = v47;
  uint64_t v25 = v48;
  if (v24 != 1)
  {
    uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v50 + 32);
    do
    {
      v27(v17, v9, v13);
      uint64_t v28 = objc_autoreleasePoolPush();
      v25(v17, v26, &v52, &v51);
      objc_autoreleasePoolPop(v28);
      uint64_t v29 = (*(uint64_t (**)(char *, uint64_t))(v50 + 8))(v17, v13);
      DirectorySequence.next()(v29);
    }

    while (v23(v9, 1LL, v13) != 1);
  }

  uint64_t v30 = (*(uint64_t (**)(char *, uint64_t))(v45 + 8))(v12, v46);
  uint64_t v31 = static os_log_type_t.debug.getter(v30);
  uint64_t v32 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v33 = (void *)static OS_os_log.default.getter(v32);
  uint64_t v34 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v35 = swift_allocObject(v34, 112LL, 7LL);
  *(_OWORD *)(v35 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v36 = v52;
  uint64_t v37 = v52[2];
  *(void *)(v35 + 56) = &type metadata for Int;
  *(void *)(v35 + 64) = &protocol witness table for Int;
  *(void *)(v35 + 32) = v37;
  uint64_t v38 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  unint64_t v39 = v49;
  uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter(v13, v38);
  uint64_t v42 = v41;
  *(void *)(v35 + 96) = &type metadata for String;
  *(void *)(v35 + 104) = sub_1000226F4();
  *(void *)(v35 + 72) = v40;
  *(void *)(v35 + 80) = v42;
  os_log(_:dso:log:_:_:)(v31, &_mh_execute_header, v33, "Found %i records at %@", 22LL, 2LL, v35);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v50 + 8))(v39, v13);
  return v36;
}

uint64_t sub_100576BD4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v46 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v46 = *(void *)(v5 - 8);
  uint64_t v47 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v46 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v46 - v13;
  uint64_t v15 = objc_autoreleasePoolPush();
  if (qword_10099B070 != -1) {
    swift_once(&qword_10099B070, sub_100039E68);
  }
  uint64_t v49 = a1;
  uint64_t v16 = sub_10000A720(v8, (uint64_t)qword_100A29EF0);
  uint64_t v17 = UUID.uuidString.getter(v16);
  URL.appendingPathComponent(_:)(v17, v18);
  swift_bridgeObjectRelease();
  objc_autoreleasePoolPop(v15);
  uint64_t v51 = _swiftEmptyArrayStorage;
  char v52 = _swiftEmptyArrayStorage;
  id v19 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v50 = v14;
  NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)(v14, 0LL, 0LL);

  DirectorySequence.next()(v20);
  id v21 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 48);
  int v22 = v21(v4, 1LL, v8);
  uint64_t v23 = v48;
  if (v22 != 1)
  {
    int v24 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    do
    {
      v24(v12, v4, v8);
      uint64_t v25 = objc_autoreleasePoolPush();
      sub_1005355B8((uint64_t)v12, v23, (uint64_t *)&v52, (unint64_t *)&v51);
      objc_autoreleasePoolPop(v25);
      uint64_t v26 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      DirectorySequence.next()(v26);
    }

    while (v21(v4, 1LL, v8) != 1);
  }

  uint64_t v27 = v9;
  uint64_t v28 = (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v7, v47);
  uint64_t v29 = static os_log_type_t.debug.getter(v28);
  uint64_t v30 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v31 = (void *)static OS_os_log.default.getter(v30);
  uint64_t v32 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v33 = swift_allocObject(v32, 112LL, 7LL);
  *(_OWORD *)(v33 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v34 = v52;
  uint64_t v35 = v52[2];
  *(void *)(v33 + 56) = &type metadata for Int;
  *(void *)(v33 + 64) = &protocol witness table for Int;
  *(void *)(v33 + 32) = v35;
  uint64_t v36 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter(v8, v36);
  uint64_t v39 = v38;
  *(void *)(v33 + 96) = &type metadata for String;
  *(void *)(v33 + 104) = sub_1000226F4();
  *(void *)(v33 + 72) = v37;
  *(void *)(v33 + 80) = v39;
  os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v31, "Found %i records at %@", 22LL, 2LL, v33);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v40 = v34[2];
  uint64_t v41 = type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v42 = *(void *)(v41 - 8);
  if (v40)
  {
    uint64_t v43 = v49;
    sub_10001DC4C( (uint64_t)v34 + ((*(unsigned __int8 *)(v42 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v42 + 80)),  v49,  type metadata accessor for KeyAlignmentRecord);
    uint64_t v44 = 0LL;
  }

  else
  {
    uint64_t v44 = 1LL;
    uint64_t v43 = v49;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v42 + 56))(v43, v44, 1LL, v41);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v27 + 8))(v50, v8);
}

void *sub_100576FBC()
{
  return sub_100576868( &qword_10099B600,  (uint64_t)qword_100A2AE58,  (void (*)(char *, uint64_t, void **, void **))sub_100534A8C,  (uint64_t)sub_1005CAED0);
}

void *sub_100576FE0()
{
  return sub_100576868( &qword_10099BA08,  (uint64_t)qword_100A2B770,  (void (*)(char *, uint64_t, void **, void **))sub_100535690,  (uint64_t)sub_10078065C);
}

void *sub_100577004(uint64_t a1)
{
  return sub_10057704C( a1,  &qword_10099B648,  (uint64_t)qword_100A2AEF0,  (void (*)(char *, uint64_t, void **, void **))sub_100535528,  (uint64_t)sub_1005F1554);
}

void *sub_100577028(uint64_t a1)
{
  return sub_10057704C( a1,  &qword_10099B038,  (uint64_t)qword_100A29E70,  (void (*)(char *, uint64_t, void **, void **))sub_100536238,  (uint64_t)sub_1000160F4);
}

void *sub_10057704C( uint64_t a1, void *a2, uint64_t a3, void (*a4)(char *, uint64_t, void **, void **), uint64_t a5)
{
  uint64_t v51 = a5;
  uint64_t v49 = a4;
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v46 = *(void *)(v10 - 8);
  uint64_t v47 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  id v19 = (char *)&v45 - v18;
  uint64_t v20 = objc_autoreleasePoolPush();
  if (*a2 != -1LL) {
    swift_once(a2, v51);
  }
  uint64_t v21 = sub_10000A720(v13, a3);
  uint64_t v22 = UUID.uuidString.getter(v21);
  URL.appendingPathComponent(_:isDirectory:)(v22, v23, 1LL);
  swift_bridgeObjectRelease();
  objc_autoreleasePoolPop(v20);
  char v52 = _swiftEmptyArrayStorage;
  unint64_t v53 = _swiftEmptyArrayStorage;
  id v24 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v50 = v19;
  NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)(v19, 0LL, 0LL);

  ((void (*)(void))DirectorySequence.next())();
  uint64_t v25 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v26 = v25(v9, 1LL, v13);
  uint64_t v51 = v14;
  uint64_t v28 = v48;
  uint64_t v27 = v49;
  if (v26 != 1)
  {
    uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v51 + 32);
    do
    {
      v29(v17, v9, v13);
      uint64_t v30 = objc_autoreleasePoolPush();
      v27(v17, v28, &v53, &v52);
      objc_autoreleasePoolPop(v30);
      uint64_t v31 = (*(uint64_t (**)(char *, uint64_t))(v51 + 8))(v17, v13);
      DirectorySequence.next()(v31);
    }

    while (v25(v9, 1LL, v13) != 1);
  }

  uint64_t v32 = (*(uint64_t (**)(char *, uint64_t))(v46 + 8))(v12, v47);
  uint64_t v33 = static os_log_type_t.debug.getter(v32);
  sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v34 = (void *)static OS_os_log.default.getter();
  uint64_t v35 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v36 = swift_allocObject(v35, 112LL, 7LL);
  *(_OWORD *)(v36 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v37 = v53;
  uint64_t v38 = v53[2];
  *(void *)(v36 + 56) = &type metadata for Int;
  *(void *)(v36 + 64) = &protocol witness table for Int;
  *(void *)(v36 + 32) = v38;
  uint64_t v39 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v40 = v50;
  uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(v13, v39);
  uint64_t v43 = v42;
  *(void *)(v36 + 96) = &type metadata for String;
  *(void *)(v36 + 104) = sub_1000226F4();
  *(void *)(v36 + 72) = v41;
  *(void *)(v36 + 80) = v43;
  os_log(_:dso:log:_:_:)(v33, &_mh_execute_header, v34, "Found %i records at %@", 22LL, 2LL, v36);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v51 + 8))(v40, v13);
  return v37;
}

uint64_t sub_1005773DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v17[1] = a2;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B208 != -1) {
    swift_once(&qword_10099B208, sub_100258170);
  }
  uint64_t v8 = sub_10000A720(v4, (uint64_t)qword_100A2A428);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9._object = (void *)0x800000010085B040LL;
  v9._countAndFlagsBits = 0xD000000000000014LL;
  prohibitAsyncContext(functionName:)(v9);
  uint64_t v18 = type metadata accessor for SecureLocationsCachedPayload(0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009B29A0);
  uint64_t v11 = String.init<A>(describing:)(&v18, v10);
  uint64_t v13 = v12;
  uint64_t v14 = objc_autoreleasePoolPush();
  v17[0] = v5;
  __chkstk_darwin(v14);
  v17[-6] = v2;
  v17[-5] = a1;
  v17[-4] = v7;
  v17[-3] = v11;
  v17[-2] = v13;
  uint64_t v15 = sub_100004AEC(&qword_1009A7110);
  OS_dispatch_queue.sync<A>(execute:)(sub_10057C7AC, &v17[-8], v15);
  objc_autoreleasePoolPop(v14);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v17[0] + 8LL))(v7, v4);
}

uint64_t sub_100577580@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  v17[1] = a2;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)v17 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B578 != -1) {
    swift_once(&qword_10099B578, sub_1005811B4);
  }
  uint64_t v8 = sub_10000A720(v4, (uint64_t)qword_100A2AD10);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, v8, v4);
  v9._object = (void *)0x800000010085B040LL;
  v9._countAndFlagsBits = 0xD000000000000014LL;
  prohibitAsyncContext(functionName:)(v9);
  uint64_t v18 = type metadata accessor for SecureLocationsCachedSharedKey(0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009B29E0);
  uint64_t v11 = String.init<A>(describing:)(&v18, v10);
  uint64_t v13 = v12;
  uint64_t v14 = objc_autoreleasePoolPush();
  v17[0] = v5;
  __chkstk_darwin(v14);
  v17[-6] = v2;
  v17[-5] = a1;
  v17[-4] = v7;
  v17[-3] = v11;
  v17[-2] = v13;
  uint64_t v15 = sub_100004AEC(&qword_1009A7128);
  OS_dispatch_queue.sync<A>(execute:)(sub_10057C790, &v17[-8], v15);
  objc_autoreleasePoolPop(v14);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(char *, uint64_t))(v17[0] + 8LL))(v7, v4);
}

void *sub_100577724()
{
  return sub_100576868( &qword_10099B578,  (uint64_t)qword_100A2AD10,  (void (*)(char *, uint64_t, void **, void **))sub_1005362C8,  (uint64_t)sub_1005811B4);
}

void *sub_100577748()
{
  return sub_100576868( &qword_10099B800,  (uint64_t)qword_100A2B170,  (void (*)(char *, uint64_t, void **, void **))sub_1005357F8,  (uint64_t)sub_10069017C);
}

void *sub_10057776C()
{
  return sub_100576868( &qword_10099B208,  (uint64_t)qword_100A2A428,  (void (*)(char *, uint64_t, void **, void **))sub_1005357B0,  (uint64_t)sub_100258170);
}

void *sub_100577790()
{
  return sub_100576868( &qword_10099B100,  (uint64_t)qword_100A2A1B0,  (void (*)(char *, uint64_t, void **, void **))sub_100535768,  (uint64_t)sub_1000E2B04);
}

void *sub_1005777B4()
{
  return sub_100576868( &qword_10099B1B8,  (uint64_t)qword_100A2A358,  (void (*)(char *, uint64_t, void **, void **))sub_1005356D8,  (uint64_t)sub_1001CFC94);
}

void *sub_1005777D8()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v38 = *(void *)(v5 - 8);
  uint64_t v39 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v38 - v13;
  uint64_t v40 = objc_autoreleasePoolPush();
  if (qword_10099B078 != -1) {
    swift_once(&qword_10099B078, sub_10003D920);
  }
  uint64_t v15 = sub_10000A720(v8, (uint64_t)qword_100A29F08);
  uint64_t v16 = UUID.uuidString.getter(v15);
  URL.appendingPathComponent(_:isDirectory:)(v16, v17, 1LL);
  swift_bridgeObjectRelease();
  objc_autoreleasePoolPop(v40);
  uint64_t v41 = _swiftEmptyArrayStorage;
  uint64_t v42 = _swiftEmptyArrayStorage;
  id v18 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v40 = v14;
  NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)(v14, 0LL, 0LL);

  DirectorySequence.next()(v19);
  uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v20(v4, 1LL, v8) != 1)
  {
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    do
    {
      v21(v12, v4, v8);
      uint64_t v22 = objc_autoreleasePoolPush();
      sub_100535600((uint64_t)v12, v1, (uint64_t *)&v42, (unint64_t *)&v41);
      objc_autoreleasePoolPop(v22);
      uint64_t v23 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      DirectorySequence.next()(v23);
    }

    while (v20(v4, 1LL, v8) != 1);
  }

  uint64_t v24 = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v39);
  uint64_t v25 = static os_log_type_t.debug.getter(v24);
  uint64_t v26 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v27 = (void *)static OS_os_log.default.getter(v26);
  uint64_t v28 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v29 = swift_allocObject(v28, 112LL, 7LL);
  *(_OWORD *)(v29 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v30 = v42;
  uint64_t v31 = v42[2];
  *(void *)(v29 + 56) = &type metadata for Int;
  *(void *)(v29 + 64) = &protocol witness table for Int;
  *(void *)(v29 + 32) = v31;
  uint64_t v32 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v33 = v40;
  uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter(v8, v32);
  uint64_t v36 = v35;
  *(void *)(v29 + 96) = &type metadata for String;
  *(void *)(v29 + 104) = sub_1000226F4();
  *(void *)(v29 + 72) = v34;
  *(void *)(v29 + 80) = v36;
  os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v27, "Found %i records at %@", 22LL, 2LL, v29);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v33, v8);
  return v30;
}

void *sub_100577B58(uint64_t a1)
{
  return sub_1005784BC( a1,  &qword_10099B5C8,  (uint64_t)qword_100A2ADC0,  (void (*)(char *, uint64_t, void **, void **))sub_100535720,  (uint64_t)sub_1005BD7E8);
}

void *sub_100577B7C()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v38 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v38 = *(void *)(v5 - 8);
  uint64_t v39 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v38 - v13;
  uint64_t v40 = objc_autoreleasePoolPush();
  if (qword_10099B5C8 != -1) {
    swift_once(&qword_10099B5C8, sub_1005BD7E8);
  }
  uint64_t v15 = sub_10000A720(v8, (uint64_t)qword_100A2ADC0);
  uint64_t v16 = UUID.uuidString.getter(v15);
  URL.appendingPathComponent(_:)(v16, v17);
  swift_bridgeObjectRelease();
  objc_autoreleasePoolPop(v40);
  uint64_t v41 = _swiftEmptyArrayStorage;
  uint64_t v42 = _swiftEmptyArrayStorage;
  id v18 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v40 = v14;
  NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)(v14, 0LL, 0LL);

  DirectorySequence.next()(v19);
  uint64_t v20 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v20(v4, 1LL, v8) != 1)
  {
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
    do
    {
      v21(v12, v4, v8);
      uint64_t v22 = objc_autoreleasePoolPush();
      sub_100535720((uint64_t)v12, v1, (uint64_t *)&v42, (unint64_t *)&v41);
      objc_autoreleasePoolPop(v22);
      uint64_t v23 = (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v12, v8);
      DirectorySequence.next()(v23);
    }

    while (v20(v4, 1LL, v8) != 1);
  }

  uint64_t v24 = (*(uint64_t (**)(char *, uint64_t))(v38 + 8))(v7, v39);
  uint64_t v25 = static os_log_type_t.debug.getter(v24);
  uint64_t v26 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v27 = (void *)static OS_os_log.default.getter(v26);
  uint64_t v28 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v29 = swift_allocObject(v28, 112LL, 7LL);
  *(_OWORD *)(v29 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v30 = v42;
  uint64_t v31 = v42[2];
  *(void *)(v29 + 56) = &type metadata for Int;
  *(void *)(v29 + 64) = &protocol witness table for Int;
  *(void *)(v29 + 32) = v31;
  uint64_t v32 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v33 = v40;
  uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter(v8, v32);
  uint64_t v36 = v35;
  *(void *)(v29 + 96) = &type metadata for String;
  *(void *)(v29 + 104) = sub_1000226F4();
  *(void *)(v29 + 72) = v34;
  *(void *)(v29 + 80) = v36;
  os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v27, "Found %i records at %@", 22LL, 2LL, v29);

  swift_bridgeObjectRelease();
  (*(void (**)(void *, uint64_t))(v9 + 8))(v33, v8);
  return v30;
}

void *sub_100577EF8(uint64_t a1)
{
  return sub_10057704C( a1,  &qword_10099B620,  (uint64_t)qword_100A2AEA0,  (void (*)(char *, uint64_t, void **, void **))sub_100536280,  (uint64_t)sub_1005DD914);
}

void *sub_100577F1C(uint64_t a1)
{
  return sub_10057704C( a1,  &qword_10099B1A8,  (uint64_t)qword_100A2A338,  (void (*)(char *, uint64_t, void **, void **))sub_1005361F0,  (uint64_t)sub_1001BB8C8);
}

void *sub_100577F40()
{
  return sub_100576868( &qword_10099B1A8,  (uint64_t)qword_100A2A338,  (void (*)(char *, uint64_t, void **, void **))sub_1005361F0,  (uint64_t)sub_1001BB8C8);
}

void *sub_100577F64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v47 = a2;
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord(0LL);
  uint64_t v4 = *(void *)(found - 8);
  __chkstk_darwin(found);
  uint64_t v6 = (char *)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009AA900);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009B30F8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v54 = (char *)&v45 - v14;
  if (qword_10099B1A8 == -1) {
    goto LABEL_2;
  }
LABEL_39:
  swift_once(&qword_10099B1A8, sub_1001BB8C8);
LABEL_2:
  uint64_t v15 = type metadata accessor for URL(0LL);
  uint64_t v16 = sub_10000A720(v15, (uint64_t)qword_100A2A338);
  uint64_t result = sub_100533250(v16);
  int64_t v52 = 0LL;
  uint64_t v18 = result[8];
  uint64_t v48 = result + 8;
  uint64_t v19 = 1LL << *((_BYTE *)result + 32);
  uint64_t v20 = -1LL;
  if (v19 < 64) {
    uint64_t v20 = ~(-1LL << v19);
  }
  unint64_t v21 = v20 & v18;
  int64_t v49 = (unint64_t)(v19 + 63) >> 6;
  uint64_t v50 = result;
  int64_t v46 = v49 - 1;
  uint64_t v53 = v4;
  uint64_t v51 = v9;
  uint64_t v9 = v54;
  if ((v20 & v18) != 0)
  {
LABEL_5:
    unint64_t v22 = __clz(__rbit64(v21));
    v21 &= v21 - 1;
    unint64_t v23 = v22 | (v52 << 6);
LABEL_6:
    uint64_t v24 = v50;
    uint64_t v25 = v50[6];
    uint64_t v26 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, unint64_t, uint64_t))(*(void *)(v26 - 8) + 16LL))( v13,  v25 + *(void *)(*(void *)(v26 - 8) + 72LL) * v23,  v26);
    uint64_t v27 = v24[7];
    uint64_t v28 = sub_100004AEC(&qword_1009B3100);
    uint64_t v29 = *(void *)(v27 + 8 * v23);
    *(void *)&v13[*(int *)(v28 + 48)] = v29;
    (*(void (**)(char *, void, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v13, 0LL, 1LL, v28);
    swift_bridgeObjectRetain(v29);
    uint64_t v4 = v53;
    uint64_t v9 = v54;
    goto LABEL_25;
  }

  while (1)
  {
    int64_t v30 = v52 + 1;
    if (__OFADD__(v52, 1LL))
    {
      __break(1u);
      goto LABEL_39;
    }

    if (v30 < v49)
    {
      unint64_t v31 = v48[v30];
      if (v31) {
        goto LABEL_10;
      }
      int64_t v32 = v52 + 2;
      ++v52;
      if (v30 + 1 < v49)
      {
        unint64_t v31 = v48[v32];
        if (v31) {
          goto LABEL_13;
        }
        int64_t v52 = v30 + 1;
        if (v30 + 2 < v49)
        {
          unint64_t v31 = v48[v30 + 2];
          if (v31)
          {
            v30 += 2LL;
            goto LABEL_10;
          }

          int64_t v32 = v30 + 3;
          int64_t v52 = v30 + 2;
          if (v30 + 3 < v49) {
            break;
          }
        }
      }
    }

void *sub_100578498(uint64_t a1)
{
  return sub_1005784BC( a1,  &qword_10099BA10,  (uint64_t)qword_100A2B788,  (void (*)(char *, uint64_t, void **, void **))sub_100535570,  (uint64_t)sub_100783BF4);
}

void *sub_1005784BC( uint64_t a1, void *a2, uint64_t a3, void (*a4)(char *, uint64_t, void **, void **), uint64_t a5)
{
  uint64_t v53 = a5;
  uint64_t v51 = a4;
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v47 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v48 = *(void *)(v10 - 8);
  uint64_t v49 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v47 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v47 - v18;
  uint64_t v20 = objc_autoreleasePoolPush();
  if (*a2 != -1LL) {
    swift_once(a2, v53);
  }
  uint64_t v21 = sub_10000A720(v13, a3);
  uint64_t v22 = UUID.uuidString.getter(v21);
  URL.appendingPathComponent(_:)(v22, v23);
  swift_bridgeObjectRelease();
  objc_autoreleasePoolPop(v20);
  uint64_t v54 = _swiftEmptyArrayStorage;
  BOOL v55 = _swiftEmptyArrayStorage;
  id v24 = [(id)objc_opt_self(NSFileManager) defaultManager];
  int64_t v52 = v19;
  NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)(v19, 0LL, 0LL);

  DirectorySequence.next()(v25);
  uint64_t v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v27 = v26(v9, 1LL, v13);
  uint64_t v53 = v14;
  uint64_t v29 = v50;
  uint64_t v28 = v51;
  if (v27 != 1)
  {
    int64_t v30 = *(void (**)(char *, char *, uint64_t))(v53 + 32);
    do
    {
      v30(v17, v9, v13);
      unint64_t v31 = objc_autoreleasePoolPush();
      v28(v17, v29, &v55, &v54);
      objc_autoreleasePoolPop(v31);
      uint64_t v32 = (*(uint64_t (**)(char *, uint64_t))(v53 + 8))(v17, v13);
      DirectorySequence.next()(v32);
    }

    while (v26(v9, 1LL, v13) != 1);
  }

  uint64_t v33 = (*(uint64_t (**)(char *, uint64_t))(v48 + 8))(v12, v49);
  uint64_t v34 = static os_log_type_t.debug.getter(v33);
  uint64_t v35 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v36 = (void *)static OS_os_log.default.getter(v35);
  uint64_t v37 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v38 = swift_allocObject(v37, 112LL, 7LL);
  *(_OWORD *)(v38 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v39 = v55;
  uint64_t v40 = v55[2];
  *(void *)(v38 + 56) = &type metadata for Int;
  *(void *)(v38 + 64) = &protocol witness table for Int;
  *(void *)(v38 + 32) = v40;
  uint64_t v41 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v42 = v52;
  uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter(v13, v41);
  uint64_t v45 = v44;
  *(void *)(v38 + 96) = &type metadata for String;
  *(void *)(v38 + 104) = sub_1000226F4();
  *(void *)(v38 + 72) = v43;
  *(void *)(v38 + 80) = v45;
  os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v36, "Found %i records at %@", 22LL, 2LL, v38);

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v53 + 8))(v42, v13);
  return v39;
}

uint64_t sub_100578848(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[5] = a1;
  v4[2] = a2;
  v4[3] = a3;
  return OS_dispatch_queue.sync<A>(execute:)(sub_10057C6EC, v4, (char *)&type metadata for () + 8);
}

void sub_100578894(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v109 = a1;
  uint64_t v98 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  uint64_t v97 = (char *)&v92 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v106 = *(void *)(v8 - 8);
  uint64_t v107 = v8;
  __chkstk_darwin(v8);
  uint64_t v108 = (char *)&v92 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&__int128 v104 = type metadata accessor for UUID(0LL);
  uint64_t v103 = *(void *)(v104 - 8);
  __chkstk_darwin(v104);
  uint64_t v102 = (char *)&v92 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v110 = type metadata accessor for URL(0LL);
  uint64_t v99 = *(void **)(v110 - 8);
  uint64_t v11 = __chkstk_darwin(v110);
  uint64_t v101 = (char *)&v92 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v105 = (char *)&v92 - v14;
  __chkstk_darwin(v13);
  uint64_t v100 = (char *)&v92 - v15;
  uint64_t v16 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v92 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v23 = (char *)&v92 - v22;
  static SystemInfo.lockState.getter(v21);
  (*(void (**)(char *, void, uint64_t))(v17 + 104))( v20,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v16);
  uint64_t v24 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(v113, v16, v24);
  dispatch thunk of RawRepresentable.rawValue.getter(&v112, v16, v24);
  id v26 = v112;
  id v25 = v113[0];
  int v27 = *(void (**)(char *, uint64_t))(v17 + 8);
  v27(v20, v16);
  uint64_t v28 = ((uint64_t (*)(char *, uint64_t))v27)(v23, v16);
  if (v25 == v26)
  {
    uint64_t v29 = static os_log_type_t.default.getter(v28);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v29,  &_mh_execute_header,  qword_100A2B018,  "store call failed because in device is in beforeFirstUnlock state",  65LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v30 = sub_1000220F0();
    uint64_t v31 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v30, 0LL, 0LL);
    *uint64_t v32 = 0;
    swift_willThrow(v31);
  }

  else
  {
    Class v33 = isa;
    sub_10057C708(a2, a3, *(void *)(a4 + 8), *(void *)(a4 + 16));
    if (!v33)
    {
      uint64_t v36 = v34;
      unint64_t v37 = v35;
      uint64_t v38 = sub_1006C54D4(v34, v35, 0);
      unint64_t v40 = v39;
      uint64_t v95 = v36;
      unint64_t v96 = v37;
      Class isa = Data._bridgeToObjectiveC()().super.isa;
      sub_100016F9C((uint64_t)v38, v40);
      sub_100022898(0LL, (unint64_t *)&qword_1009AC0D0, &OBJC_CLASS___NSFileManager_ptr);
      uint64_t v41 = *(void (**)(uint64_t, uint64_t))(a4 + 40);
      uint64_t v42 = v100;
      v41(a3, a4);
      static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v42, 0LL);
      uint64_t v43 = (void (*)(char *, uint64_t))v99[1];
      v43(v42, v110);
      uint64_t v44 = v102;
      (*(void (**)(uint64_t, uint64_t))(a4 + 32))(a3, a4);
      uint64_t v94 = a2;
      uint64_t v99 = (void *)a3;
      id v93 = (void *)a4;
      v41(a3, a4);
      uint64_t v45 = objc_autoreleasePoolPush();
      uint64_t v46 = UUID.uuidString.getter(v45);
      uint64_t v47 = v101;
      URL.appendingPathComponent(_:)(v46, v48);
      swift_bridgeObjectRelease();
      uint64_t v49 = v105;
      URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
      uint64_t v50 = v47;
      uint64_t v51 = v110;
      v43(v50, v110);
      objc_autoreleasePoolPop(v45);
      uint64_t v101 = (char *)v43;
      v43(v42, v51);
      uint64_t v52 = (*(uint64_t (**)(char *, void))(v103 + 8))(v44, v104);
      URLResourceValues.init()(v52);
      URLResourceValues.isExcludedFromBackup.setter(1LL);
      uint64_t v53 = objc_autoreleasePoolPush();
      URL._bridgeToObjectiveC()(v54);
      uint64_t v56 = v55;
      -[objc_class writeToURL:atomically:](isa, "writeToURL:atomically:", v55, 1LL);

      objc_autoreleasePoolPop(v53);
      uint64_t v58 = static os_log_type_t.default.getter(v57);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v59 = qword_100A2B018;
      uint64_t v60 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v61 = swift_allocObject(v60, 72LL, 7LL);
      __int128 v104 = xmmword_1007E67D0;
      *(_OWORD *)(v61 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v62 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter(v51, v62);
      uint64_t v65 = v64;
      *(void *)(v61 + 56) = &type metadata for String;
      unint64_t v66 = sub_1000226F4();
      *(void *)(v61 + 64) = v66;
      *(void *)(v61 + 32) = v63;
      *(void *)(v61 + 40) = v65;
      os_log(_:dso:log:_:_:)(v58, &_mh_execute_header, v59, "Writing to file: %@", 19LL, 2LL, v61);
      swift_bridgeObjectRelease();
      uint64_t v67 = sub_100004AEC((uint64_t *)&unk_1009AC188);
      uint64_t inited = swift_initStackObject(v67, v114);
      *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = v104;
      *(void *)(inited + 32) = NSFileProtectionKey;
      *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
      uint64_t v69 = NSFileProtectionKey;
      uint64_t v70 = NSFileProtectionCompleteUntilFirstUserAuthentication;
      unint64_t v71 = sub_10041299C(inited);
      id v72 = [(id)objc_opt_self(NSFileManager) defaultManager];
      sub_10028B9E0(v71);
      swift_bridgeObjectRelease();
      type metadata accessor for FileAttributeKey(0LL);
      sub_100007864( &qword_10099C3A0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1007E3C0C);
      Class v73 = Dictionary._bridgeToObjectiveC()().super.isa;
      uint64_t v74 = swift_bridgeObjectRelease();
      URL.path.getter(v74);
      NSString v75 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      v113[0] = 0LL;
      LODWORD(v65) = [v72 setAttributes:v73 ofItemAtPath:v75 error:v113];

      id v76 = v113[0];
      if ((_DWORD)v65)
      {
        id v77 = v113[0];
        uint64_t v78 = v108;
        uint64_t v80 = v49;
        uint64_t v79 = URL.setResourceValues(_:)(v108);
        LODWORD(v102) = static os_log_type_t.default.getter(v79);
        uint64_t v103 = qword_100A2B018;
        uint64_t v83 = swift_allocObject(v60, 72LL, 7LL);
        *(_OWORD *)(v83 + swift_weakDestroy(v0 + 16) = v104;
        unint64_t v84 = *(void (**)(char *, uint64_t, void *))(v98 + 16);
        uint64_t v85 = v97;
        uint64_t v86 = v94;
        uint64_t v87 = v99;
        v84(v97, v94, v99);
        uint64_t v88 = String.init<A>(describing:)(v85, v87);
        *(void *)(v83 + 56) = &type metadata for String;
        *(void *)(v83 + 64) = v66;
        *(void *)(v83 + 32) = v88;
        *(void *)(v83 + 40) = v89;
        os_log(_:dso:log:_:_:)( v102,  &_mh_execute_header,  v103,  "Publishing record changed: %@",  29LL,  2LL,  v83);
        swift_bridgeObjectRelease();
        v113[3] = v87;
        v113[4] = v93;
        unint64_t v90 = (char *)sub_10000A7C8(v113);
        v84(v90, v86, v87);
        PassthroughSubject.send(_:)(v113);

        sub_100016F9C(v95, v96);
        (*(void (**)(char *, uint64_t))(v106 + 8))(v78, v107);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v113);
        uint64_t v91 = v80;
      }

      else
      {
        id v81 = v113[0];
        _convertNSErrorToError(_:)(v76);

        swift_willThrow(v82);
        sub_100016F9C(v95, v96);
        (*(void (**)(char *, uint64_t))(v106 + 8))(v108, v107);
        uint64_t v91 = v49;
      }

      ((void (*)(char *, uint64_t))v101)(v91, v110);
    }
  }

uint64_t sub_1005791F0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t *a4@<X8>)
{
  uint64_t v9 = type metadata accessor for PropertyListEncoder(0LL);
  swift_allocObject(v9, *(unsigned int *)(v9 + 48), *(unsigned __int16 *)(v9 + 52));
  uint64_t v10 = PropertyListEncoder.init()();
  uint64_t v11 = dispatch thunk of PropertyListEncoder.encode<A>(_:)(a1, a2, a3);
  uint64_t v13 = v12;
  uint64_t result = swift_release(v10);
  if (!v4)
  {
    *a4 = v11;
    a4[1] = v13;
  }

  return result;
}

void sub_10057928C(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, void *a5@<X8>)
{
  uint64_t v10 = objc_autoreleasePoolPush();
  sub_10057931C(a1, a2, a3, a4, a5);
  objc_autoreleasePoolPop(v10);
}

void *sub_10057931C@<X0>( uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X4>, void *a5@<X8>)
{
  uint64_t result = dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(a5, a3, a1, a2, a3, a4);
  if (v5)
  {
    uint64_t v8 = static os_log_type_t.error.getter(result);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v9 = qword_100A2B018;
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v11 = swift_allocObject(v10, 112LL, 7LL);
    *(_OWORD *)(v11 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    uint64_t v21 = a3;
    uint64_t MetatypeMetadata = swift_getMetatypeMetadata(a3);
    uint64_t v13 = String.init<A>(describing:)(&v21, MetatypeMetadata);
    uint64_t v15 = v14;
    *(void *)(v11 + 56) = &type metadata for String;
    unint64_t v16 = sub_1000226F4();
    *(void *)(v11 + 64) = v16;
    *(void *)(v11 + 32) = v13;
    *(void *)(v11 + 40) = v15;
    uint64_t v21 = v5;
    swift_errorRetain(v5);
    uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v18 = String.init<A>(describing:)(&v21, v17);
    *(void *)(v11 + 96) = &type metadata for String;
    *(void *)(v11 + 104) = v16;
    *(void *)(v11 + 72) = v18;
    *(void *)(v11 + 80) = v19;
    os_log(_:dso:log:_:_:)(v8, &_mh_execute_header, v9, "Error decoding %@: %@", 21LL, 2LL, v11);
    uint64_t v20 = swift_bridgeObjectRelease();
    return (void *)swift_willThrow(v20);
  }

  return result;
}

uint64_t sub_100579474(uint64_t a1)
{
  return 0LL;
}

void sub_100579600(uint64_t a1)
{
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2AC98);
  uint64_t v3 = swift_errorRetain(a1);
  oslog = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v4 = static os_log_type_t.error.getter(oslog);
  if (os_log_type_enabled(oslog, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v5 = 138412290;
    uint64_t v7 = _convertErrorToNSError(_:)(a1);
    uint64_t v10 = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, &v11, v5 + 4, v5 + 12);
    *uint64_t v6 = v7;
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, oslog, v4, "Error purging storage %@", v5, 0xCu);
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v6, 1LL, v8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(a1);
  }

void sub_1005797A0(uint64_t a1)
{
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_10000A720(v2, (uint64_t)qword_100A2AC98);
  os_log_type_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v6 = 0;
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Purging all cache storage", v6, 2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  uint64_t v7 = *(void *)(a1 + 24);
  type metadata accessor for Transaction(0LL);
  uint64_t v8 = swift_allocObject(&unk_1009640B8, 24LL, 7LL);
  uint64_t v9 = swift_weakInit(v8 + 16, v7);
  __chkstk_darwin(v9);
  static Transaction.named<A>(_:with:)("Cryptor.destroyKey", 18LL, 2LL, sub_10057C6D4);
  swift_release();
  sub_100579944();
}

void sub_100579944()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v47 - v7;
  uint64_t v9 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (uint64_t *)((char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = *(void **)(v1 + 16);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  LOBYTE(v13) = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v13 & 1) != 0)
  {
    if (qword_10099B528 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B528, sub_1004F3B00);
LABEL_3:
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v16 = sub_10000A720(v15, (uint64_t)qword_100A2AC98);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Purging local cache storage", v19, 2u);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  if (qword_10099BA10 != -1) {
    swift_once(&qword_10099BA10, sub_100783BF4);
  }
  uint64_t v20 = sub_10000A720(v2, (uint64_t)qword_100A2B788);
  uint64_t v21 = sub_100579474(v20);
  type metadata accessor for BeaconStore(0LL);
  sub_1004E6208((uint64_t)v6);
  URL.appendingPathComponent(_:isDirectory:)(0x52636E795379654BLL, 0xED000064726F6365LL, 1LL);
  uint64_t v22 = *(void (**)(char *, uint64_t))(v3 + 8);
  v22(v6, v2);
  uint64_t v23 = sub_100579474((uint64_t)v8);
  swift_errorRelease(v21);
  v22(v8, v2);
  if (qword_10099B100 != -1) {
    swift_once(&qword_10099B100, sub_1000E2B04);
  }
  uint64_t v24 = sub_10000A720(v2, (uint64_t)qword_100A2A1B0);
  uint64_t v25 = sub_100579474(v24);
  swift_errorRelease(v23);
  if (qword_10099B348 != -1) {
    swift_once(&qword_10099B348, sub_10039BCD8);
  }
  uint64_t v26 = sub_10000A720(v2, (uint64_t)qword_100A2A768);
  uint64_t v27 = sub_100579474(v26);
  swift_errorRelease(v25);
  if (qword_10099B308 != -1) {
    swift_once(&qword_10099B308, sub_100345AC4);
  }
  uint64_t v28 = sub_10000A720(v2, (uint64_t)qword_100A2A6D0);
  uint64_t v29 = sub_100579474(v28);
  swift_errorRelease(v27);
  sub_100650C80((uint64_t)v6);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000012LL, 0x8000000100852B20LL, 1LL);
  v22(v6, v2);
  uint64_t v30 = sub_100579474((uint64_t)v8);
  swift_errorRelease(v29);
  v22(v8, v2);
  if (qword_10099B800 != -1) {
    swift_once(&qword_10099B800, sub_10069017C);
  }
  uint64_t v31 = sub_10000A720(v2, (uint64_t)qword_100A2B170);
  uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v3 + 16);
  v32(v8, v31, v2);
  uint64_t v33 = sub_100579474((uint64_t)v8);
  swift_errorRelease(v30);
  v22(v8, v2);
  if (qword_10099B578 != -1) {
    swift_once(&qword_10099B578, sub_1005811B4);
  }
  uint64_t v34 = sub_10000A720(v2, (uint64_t)qword_100A2AD10);
  uint64_t v35 = sub_100579474(v34);
  swift_errorRelease(v33);
  if (qword_10099B208 != -1) {
    swift_once(&qword_10099B208, sub_100258170);
  }
  uint64_t v36 = sub_10000A720(v2, (uint64_t)qword_100A2A428);
  uint64_t v37 = sub_100579474(v36);
  swift_errorRelease(v35);
  if (qword_10099B248 != -1) {
    swift_once(&qword_10099B248, sub_1002E7BAC);
  }
  uint64_t v38 = sub_10000A720(v2, (uint64_t)qword_100A2A4B8);
  v32(v8, v38, v2);
  uint64_t v39 = sub_100579474((uint64_t)v8);
  swift_errorRelease(v37);
  v22(v8, v2);
  uint64_t v40 = swift_errorRetain(v39);
  if (qword_10099B318 != -1) {
    uint64_t v40 = swift_once(&qword_10099B318, sub_100352F58);
  }
  uint64_t v41 = static os_log_type_t.default.getter(v40);
  if (qword_10099B760 != -1) {
    swift_once(&qword_10099B760, sub_1006515A8);
  }
  os_log(_:dso:log:_:_:)( v41,  &_mh_execute_header,  qword_100A2B070,  "ConfigurationCoordinator resetting by overriding saved config on disk.",  70LL,  2LL,  _swiftEmptyArrayStorage);
  QueueSynchronizer.conditionalSync<A>(_:)(sub_1004BAAB0);
  id v42 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  id v43 = [v42 dictionaryRepresentation];
  uint64_t v44 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v43,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

  id v45 = v42;
  sub_10057B6B0(v44, v45);
  swift_bridgeObjectRelease();

  if (v39)
  {
    swift_willThrow(v46);
    swift_errorRelease(v39);
  }

uint64_t sub_100579FEC(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for DispatchTime(0LL);
  uint64_t v22 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v21 - v8;
  uint64_t v10 = *(dispatch_queue_s **)(a1 + 16);
  uint64_t v11 = swift_allocObject(&unk_100964040, 32LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v11 + 24) = a1;
  uint64_t v12 = swift_allocObject(&unk_100964068, 32LL, 7LL);
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = sub_10057C680;
  *(void *)(v12 + 24) = v11;
  aBlock[4] = sub_100095030;
  uint64_t v24 = v12;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100025BD4;
  aBlock[3] = &unk_100964080;
  uint64_t v13 = _Block_copy(aBlock);
  uint64_t v14 = v24;
  a2;
  swift_retain();
  swift_retain();
  swift_release(v14);
  dispatch_sync(v10, v13);
  _Block_release(v13);
  LOBYTE(a1) = swift_isEscapingClosureAtFileLocation(v12, "", 113LL, 728LL, 35LL, 1LL);
  uint64_t v15 = swift_release(v12);
  if ((a1 & 1) != 0)
  {
    __break(1u);
LABEL_9:
    swift_once(&qword_10099B710, sub_1006511CC);
    goto LABEL_7;
  }

  static DispatchTime.now()(v15);
  + infix(_:_:)(v7, 5.0);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v22 + 8);
  v16(v7, v4);
  char v17 = OS_dispatch_group.wait(timeout:)(v9);
  uint64_t v18 = ((uint64_t (*)(char *, uint64_t))v16)(v9, v4);
  if ((v17 & 1) != 0)
  {
    uint64_t v19 = static os_log_type_t.error.getter(v18);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v18 = os_log(_:dso:log:_:_:)( v19,  &_mh_execute_header,  qword_100A2B018,  "Timed out purging CloudKitData",  30LL,  2LL,  _swiftEmptyArrayStorage);
  }

  uint64_t v7 = (char *)static os_log_type_t.default.getter(v18);
  if (qword_10099B710 != -1) {
    goto LABEL_9;
  }
LABEL_7:
  os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  qword_100A2B020,  "Done purging local CloudKit state",  33LL,  2LL,  _swiftEmptyArrayStorage);
  return swift_release(v11);
}

uint64_t sub_10057A294(dispatch_group_s *a1)
{
  dispatch_group_t v81 = a1;
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v80 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v3);
  uint64_t v8 = (char *)&v80 - v7;
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)&v80 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v80 - v13;
  uint64_t v15 = static os_log_type_t.default.getter(v12);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  qword_100A2B018,  "Purging cloud backed storage",  28LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v82 = type metadata accessor for BeaconStore(0LL);
  sub_1004E6208((uint64_t)v11);
  URL.appendingPathComponent(_:isDirectory:)(0x736E656B6F544B43LL, 0xE800000000000000LL, 1LL);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t))(v2 + 8);
  uint64_t v17 = v16(v11, v1);
  uint64_t v18 = static os_log_type_t.default.getter(v17);
  if (qword_10099B710 != -1) {
    swift_once(&qword_10099B710, sub_1006511CC);
  }
  os_log(_:dso:log:_:_:)( v18,  &_mh_execute_header,  qword_100A2B020,  "Purging local CloudKit state",  28LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v19 = sub_100579474((uint64_t)v14);
  if (qword_10099B610 != -1) {
    swift_once(&qword_10099B610, sub_1005D3C50);
  }
  uint64_t v20 = sub_10000A720(v1, (uint64_t)qword_100A2AE80);
  uint64_t v21 = sub_100579474(v20);
  if (v21)
  {
    uint64_t v22 = v21;
    swift_errorRelease(v19);
    uint64_t v19 = v22;
  }

  if (qword_10099B9E8 != -1) {
    swift_once(&qword_10099B9E8, sub_100763874);
  }
  uint64_t v23 = sub_10000A720(v1, (uint64_t)qword_100A2B738);
  uint64_t v24 = sub_100579474(v23);
  if (v24)
  {
    uint64_t v25 = v24;
    swift_errorRelease(v19);
    uint64_t v19 = v25;
  }

  if (qword_10099B620 != -1) {
    swift_once(&qword_10099B620, sub_1005DD914);
  }
  uint64_t v26 = sub_10000A720(v1, (uint64_t)qword_100A2AEA0);
  uint64_t v27 = sub_100579474(v26);
  if (v27)
  {
    uint64_t v28 = v27;
    swift_errorRelease(v19);
    uint64_t v19 = v28;
  }

  if (qword_10099B078 != -1) {
    swift_once(&qword_10099B078, sub_10003D920);
  }
  uint64_t v29 = sub_10000A720(v1, (uint64_t)qword_100A29F08);
  uint64_t v30 = sub_100579474(v29);
  if (v30)
  {
    uint64_t v31 = v30;
    swift_errorRelease(v19);
    uint64_t v19 = v31;
  }

  if (qword_10099B5C8 != -1) {
    swift_once(&qword_10099B5C8, sub_1005BD7E8);
  }
  uint64_t v32 = sub_10000A720(v1, (uint64_t)qword_100A2ADC0);
  uint64_t v33 = sub_100579474(v32);
  if (v33)
  {
    uint64_t v34 = v33;
    swift_errorRelease(v19);
    uint64_t v19 = v34;
  }

  if (qword_10099B308 != -1) {
    swift_once(&qword_10099B308, sub_100345AC4);
  }
  uint64_t v35 = sub_10000A720(v1, (uint64_t)qword_100A2A6D0);
  uint64_t v36 = sub_100579474(v35);
  if (v36)
  {
    uint64_t v37 = v36;
    swift_errorRelease(v19);
    uint64_t v19 = v37;
  }

  if (qword_10099B1A8 != -1) {
    swift_once(&qword_10099B1A8, sub_1001BB8C8);
  }
  uint64_t v38 = sub_10000A720(v1, (uint64_t)qword_100A2A338);
  uint64_t v39 = sub_100579474(v38);
  if (v39)
  {
    uint64_t v40 = v39;
    swift_errorRelease(v19);
    uint64_t v19 = v40;
  }

  if (qword_10099B1B8 != -1) {
    swift_once(&qword_10099B1B8, sub_1001CFC94);
  }
  uint64_t v41 = sub_10000A720(v1, (uint64_t)qword_100A2A358);
  uint64_t v42 = sub_100579474(v41);
  if (v42)
  {
    uint64_t v43 = v42;
    swift_errorRelease(v19);
    uint64_t v19 = v43;
  }

  sub_1004E6208((uint64_t)v11);
  URL.appendingPathComponent(_:isDirectory:)(0x654272657473614DLL, 0xED0000736E6F6361LL, 1LL);
  v16(v11, v1);
  uint64_t v44 = sub_100579474((uint64_t)v8);
  if (v44)
  {
    uint64_t v45 = v44;
    swift_errorRelease(v19);
    uint64_t v19 = v45;
  }

  sub_1004E6208((uint64_t)v5);
  URL.appendingPathComponent(_:isDirectory:)(0x654B646572616853LL, 0xEA00000000007379LL, 1LL);
  v16(v5, v1);
  uint64_t v46 = sub_100579474((uint64_t)v11);
  v16(v11, v1);
  if (v46)
  {
    swift_errorRelease(v19);
    uint64_t v19 = v46;
  }

  sub_1004E6208((uint64_t)v5);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000018LL, 0x8000000100868650LL, 1LL);
  v16(v5, v1);
  uint64_t v47 = sub_100579474((uint64_t)v11);
  v16(v11, v1);
  if (v47)
  {
    swift_errorRelease(v19);
    uint64_t v19 = v47;
  }

  sub_1004E6208((uint64_t)v5);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011LL, 0x8000000100868670LL, 1LL);
  v16(v5, v1);
  uint64_t v48 = sub_100579474((uint64_t)v11);
  v16(v11, v1);
  if (v48)
  {
    swift_errorRelease(v19);
    uint64_t v19 = v48;
  }

  uint64_t v49 = v14;
  sub_1004E6208((uint64_t)v5);
  URL.appendingPathComponent(_:isDirectory:)(0x7369747265766441LL, 0xED0000746E656D65LL, 1LL);
  v16(v5, v1);
  uint64_t v50 = sub_100579474((uint64_t)v11);
  v16(v11, v1);
  if (v50)
  {
    swift_errorRelease(v19);
    uint64_t v19 = v50;
  }

  sub_1004E6208((uint64_t)v5);
  URL.appendingPathComponent(_:isDirectory:)(0x52636E795379654BLL, 0xED000064726F6365LL, 1LL);
  v16(v5, v1);
  uint64_t v51 = sub_100579474((uint64_t)v11);
  v16(v11, v1);
  if (v51)
  {
    swift_errorRelease(v19);
    uint64_t v19 = v51;
  }

  if (qword_10099BA08 != -1) {
    swift_once(&qword_10099BA08, sub_10078065C);
  }
  uint64_t v52 = sub_10000A720(v1, (uint64_t)qword_100A2B770);
  uint64_t v53 = sub_100579474(v52);
  if (v53)
  {
    uint64_t v54 = v53;
    swift_errorRelease(v19);
    uint64_t v19 = v54;
  }

  if (qword_10099B690 != -1) {
    swift_once(&qword_10099B690, sub_10061ABF8);
  }
  uint64_t v55 = sub_10000A720(v1, (uint64_t)qword_100A2AF70);
  uint64_t v56 = sub_100579474(v55);
  if (v56)
  {
    uint64_t v57 = v56;
    swift_errorRelease(v19);
    uint64_t v19 = v57;
  }

  if (qword_10099B070 != -1) {
    swift_once(&qword_10099B070, sub_100039E68);
  }
  uint64_t v58 = sub_10000A720(v1, (uint64_t)qword_100A29EF0);
  uint64_t v59 = sub_100579474(v58);
  if (v59)
  {
    uint64_t v60 = v59;
    swift_errorRelease(v19);
    uint64_t v19 = v60;
  }

  if (qword_10099B038 != -1) {
    swift_once(&qword_10099B038, sub_1000160F4);
  }
  uint64_t v61 = sub_10000A720(v1, (uint64_t)qword_100A29E70);
  uint64_t v62 = sub_100579474(v61);
  if (v62)
  {
    uint64_t v63 = v62;
    swift_errorRelease(v19);
    uint64_t v19 = v63;
  }

  if (qword_10099B648 != -1) {
    swift_once(&qword_10099B648, sub_1005F1554);
  }
  uint64_t v64 = sub_10000A720(v1, (uint64_t)qword_100A2AEF0);
  uint64_t v65 = sub_100579474(v64);
  if (v65)
  {
    uint64_t v66 = v65;
    swift_errorRelease(v19);
    uint64_t v19 = v66;
  }

  if (qword_10099B8A8 != -1) {
    swift_once(&qword_10099B8A8, sub_1006E33E8);
  }
  uint64_t v67 = sub_10000A720(v1, (uint64_t)qword_100A2B2E0);
  uint64_t v68 = sub_100579474(v67);
  if (v68)
  {
    uint64_t v69 = v68;
    swift_errorRelease(v19);
    uint64_t v19 = v69;
LABEL_75:
    uint64_t v70 = swift_errorRetain(v69);
    uint64_t v71 = static os_log_type_t.default.getter(v70);
    uint64_t v72 = qword_100A2B020;
    uint64_t v73 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v74 = swift_allocObject(v73, 72LL, 7LL);
    *(_OWORD *)(v74 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v83 = v19;
    swift_errorRetain(v19);
    uint64_t v75 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v76 = String.init<A>(describing:)(&v83, v75);
    uint64_t v78 = v77;
    *(void *)(v74 + 56) = &type metadata for String;
    *(void *)(v74 + 64) = sub_1000226F4();
    *(void *)(v74 + 32) = v76;
    *(void *)(v74 + 40) = v78;
    os_log(_:dso:log:_:_:)(v71, &_mh_execute_header, v72, "Error deleting local state: %{public}@", 38LL, 2LL, v74);
    swift_bridgeObjectRelease();
    swift_errorRelease(v19);
    goto LABEL_76;
  }

  if (v19)
  {
    swift_errorRetain(v19);
    uint64_t v69 = 0LL;
    goto LABEL_75;
  }

uint64_t sub_10057ACB8()
{
  swift_release(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 32));
  swift_release(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 48));
  swift_release(*(void *)(v0 + 56));
  swift_bridgeObjectRelease(*(void *)(v0 + 72));
  return v0;
}

uint64_t sub_10057AD04()
{
  return swift_deallocClassInstance(v0, 80LL, 7LL);
}

uint64_t type metadata accessor for BeaconStoreFileManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd22BeaconStoreFileManager);
}

Swift::Int sub_10057AD44(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_136;
    }
    if ((unint64_t)v3 >= 2)
    {
      uint64_t v91 = 0LL;
      uint64_t v92 = *a1;
      for (uint64_t i = 1LL; i != v3; ++i)
      {
        uint64_t v94 = *(void *)(v92 + 32 * i + 24);
        uint64_t v95 = v91;
        do
        {
          uint64_t v96 = v92 + v95;
          if (*(void *)(v92 + v95 + 24) >= v94) {
            break;
          }
          if (!v92) {
            goto LABEL_140;
          }
          uint64_t v97 = v92 + v95;
          uint64_t v98 = *(void *)(v92 + v95 + 48);
          __int128 v99 = *(_OWORD *)(v96 + 32);
          __int128 v100 = *(_OWORD *)(v96 + 16);
          *(_OWORD *)(v96 + 32) = *(_OWORD *)v96;
          *(_OWORD *)(v96 + 48) = v100;
          *(_OWORD *)uint64_t v97 = v99;
          *(void *)(v97 + swift_weakDestroy(v0 + 16) = v98;
          *(void *)(v96 + 24) = v94;
          v95 -= 32LL;
        }

        while (v95 != -32);
        v91 += 32LL;
      }
    }

    return result;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_145;
  }
  Swift::Int v6 = result;
  uint64_t v109 = a1;
  if (v3 < 2)
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      uint64_t v13 = (char *)_swiftEmptyArrayStorage;
LABEL_102:
      uint64_t v101 = v13;
      uint64_t v111 = v10;
      if (v14 >= 2)
      {
        uint64_t v102 = *v109;
        do
        {
          unint64_t v103 = v14 - 2;
          if (v14 < 2) {
            goto LABEL_131;
          }
          if (!v102) {
            goto LABEL_144;
          }
          __int128 v104 = v101;
          uint64_t v105 = *(void *)&v101[16 * v103 + 32];
          uint64_t v106 = *(void *)&v101[16 * v14 + 24];
          sub_10057B428( (char *)(v102 + 32 * v105),  (char *)(v102 + 32LL * *(void *)&v101[16 * v14 + 16]),  v102 + 32 * v106,  __dst);
          if (v1) {
            break;
          }
          if (v106 < v105) {
            goto LABEL_132;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v104) & 1) == 0) {
            __int128 v104 = sub_1003CBA90((uint64_t)v104);
          }
          if (v103 >= *((void *)v104 + 2)) {
            goto LABEL_133;
          }
          uint64_t v107 = &v104[16 * v103 + 32];
          *(void *)uint64_t v107 = v105;
          *((void *)v107 + 1) = v106;
          unint64_t v108 = *((void *)v104 + 2);
          if (v14 > v108) {
            goto LABEL_134;
          }
          memmove(&v104[16 * v14 + 16], &v104[16 * v14 + 32], 16 * (v108 - v14));
          uint64_t v101 = v104;
          *((void *)v104 + 2) = v108 - 1;
          unint64_t v14 = v108 - 1;
        }

        while (v108 > 2);
      }

LABEL_139:
  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  __break(1u);
LABEL_145:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_140:
  __break(1u);
LABEL_141:
  __break(1u);
LABEL_142:
  __break(1u);
LABEL_143:
  __break(1u);
LABEL_144:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_10057B428(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 31;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 5;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 31;
  uint64_t v13 = v12 >> 5;
  uint64_t v28 = __src;
  uint64_t v27 = __dst;
  if (v10 >= v12 >> 5)
  {
    if (v11 >= -31)
    {
      if (__dst != a2 || &a2[32 * v13] <= __dst) {
        memmove(__dst, a2, 32 * v13);
      }
      uint64_t v19 = &v4[32 * v13];
      uint64_t v26 = v19;
      uint64_t v28 = v6;
      if (v7 < v6 && v11 >= 32)
      {
        uint64_t v20 = (char *)(a3 - 32);
        do
        {
          uint64_t v21 = v20 + 32;
          if (*((void *)v6 - 1) >= *((void *)v19 - 1))
          {
            uint64_t v26 = v19 - 32;
            if (v21 < v19 || v20 >= v19 || v21 != v19)
            {
              __int128 v24 = *((_OWORD *)v19 - 1);
              *(_OWORD *)uint64_t v20 = *((_OWORD *)v19 - 2);
              *((_OWORD *)v20 + 1) = v24;
            }

            uint64_t v22 = v6;
            v19 -= 32;
            if (v6 <= v7) {
              break;
            }
          }

          else
          {
            uint64_t v22 = v6 - 32;
            if (v21 != v6 || v20 >= v6)
            {
              __int128 v23 = *((_OWORD *)v6 - 1);
              *(_OWORD *)uint64_t v20 = *(_OWORD *)v22;
              *((_OWORD *)v20 + 1) = v23;
            }

            uint64_t v28 = v6 - 32;
            if (v22 <= v7) {
              break;
            }
          }

          v20 -= 32;
          Swift::Int v6 = v22;
        }

        while (v19 > v4);
      }

void sub_10057B6B0(uint64_t a1, void *a2)
{
  uint64_t v3 = a1;
  uint64_t v4 = a1 + 64;
  uint64_t v5 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v6 = -1LL;
  if (v5 < 64) {
    uint64_t v6 = ~(-1LL << v5);
  }
  unint64_t v7 = v6 & *(void *)(a1 + 64);
  int64_t v33 = (unint64_t)(v5 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v8 = 0LL;
  int64_t v9 = &off_10099B000;
  uint64_t v10 = &unk_1009B2000;
  uint64_t v31 = v4;
  uint64_t v32 = v11;
  if (v7) {
    goto LABEL_6;
  }
LABEL_7:
  int64_t v15 = v8 + 1;
  if (!__OFADD__(v8, 1LL))
  {
    if (v15 < v33)
    {
      unint64_t v16 = *(void *)(v4 + 8 * v15);
      ++v8;
      if (v16) {
        goto LABEL_22;
      }
      int64_t v8 = v15 + 1;
      if (v15 + 1 >= v33) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v4 + 8 * v8);
      if (v16) {
        goto LABEL_22;
      }
      int64_t v8 = v15 + 2;
      if (v15 + 2 >= v33) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v4 + 8 * v8);
      if (v16) {
        goto LABEL_22;
      }
      int64_t v8 = v15 + 3;
      if (v15 + 3 >= v33) {
        goto LABEL_33;
      }
      unint64_t v16 = *(void *)(v4 + 8 * v8);
      if (v16)
      {
LABEL_22:
        unint64_t v7 = (v16 - 1) & v16;
        for (unint64_t i = __clz(__rbit64(v16)) + (v8 << 6); ; unint64_t i = v13 | (v8 << 6))
        {
          __int128 v18 = (uint64_t *)(*(void *)(v3 + 48) + 16 * i);
          uint64_t v19 = *v18;
          unint64_t v20 = v18[1];
          uint64_t v21 = v9[174];
          swift_bridgeObjectRetain(v20);
          if ((sub_1004E4ABC(v19, v20, v10[438]) & 1) != 0)
          {
            if (qword_10099B528 != -1) {
              swift_once(&qword_10099B528, sub_1004F3B00);
            }
            uint64_t v22 = type metadata accessor for Logger(0LL);
            sub_10000A720(v22, (uint64_t)qword_100A2AC98);
            uint64_t v23 = swift_bridgeObjectRetain_n(v20, 2LL);
            __int128 v24 = (os_log_s *)Logger.logObject.getter(v23);
            os_log_type_t v25 = static os_log_type_t.debug.getter(v24);
            if (os_log_type_enabled(v24, v25))
            {
              uint64_t v26 = swift_slowAlloc(12LL, -1LL);
              uint64_t v27 = a2;
              uint64_t v28 = swift_slowAlloc(32LL, -1LL);
              uint64_t v34 = v28;
              *(_DWORD *)uint64_t v26 = 136315138;
              swift_bridgeObjectRetain(v20);
              *(void *)(v26 + 4) = sub_1003F11D4(v19, v20, &v34);
              swift_bridgeObjectRelease_n(v20, 3LL);
              _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "Ignore persisted user defaults: %s",  (uint8_t *)v26,  0xCu);
              swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
              uint64_t v29 = v28;
              a2 = v27;
              uint64_t v3 = v32;
              swift_slowDealloc(v29, -1LL, -1LL);
              uint64_t v30 = v26;
              uint64_t v4 = v31;
              swift_slowDealloc(v30, -1LL, -1LL);
              swift_bridgeObjectRelease();
            }

            else
            {

              swift_bridgeObjectRelease_n(v20, 3LL);
            }

            int64_t v9 = &off_10099B000;
            uint64_t v10 = (void *)&unk_1009B2000;
            if (!v7) {
              goto LABEL_7;
            }
          }

          else
          {
            NSString v12 = String._bridgeToObjectiveC()();
            [a2 removeObjectForKey:v12];
            swift_bridgeObjectRelease();

            if (!v7) {
              goto LABEL_7;
            }
          }

uint64_t sub_10057BA24(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v31[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  int64_t v8 = &v31[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = type metadata accessor for BeaconStoreFileRecord(0LL);
  sub_10057C5C0(a1 + *(int *)(v9 + 20), (uint64_t)v4);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(v8, v4, v5);
  id v11 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL._bridgeToObjectiveC()(v12);
  unint64_t v14 = v13;
  id v32 = 0LL;
  unsigned int v15 = [v11 removeItemAtURL:v13 error:&v32];

  id v16 = v32;
  if (v15)
  {
    int64_t v17 = *(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8);
    id v18 = v32;
    return v17(v8, v5);
  }

  else
  {
    id v19 = v32;
    unint64_t v20 = (void *)_convertNSErrorToError(_:)(v16);

    uint64_t v22 = swift_willThrow(v21);
    uint64_t v23 = static os_log_type_t.default.getter(v22);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v24 = qword_100A2B018;
    uint64_t v25 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v26 = swift_allocObject(v25, 72LL, 7LL);
    *(_OWORD *)(v26 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    id v32 = v20;
    swift_errorRetain(v20);
    uint64_t v27 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v28 = String.init<A>(describing:)(&v32, v27);
    uint64_t v30 = v29;
    *(void *)(v26 + 56) = &type metadata for String;
    *(void *)(v26 + 64) = sub_1000226F4();
    *(void *)(v26 + 32) = v28;
    *(void *)(v26 + 40) = v30;
    os_log(_:dso:log:_:_:)(v23, &_mh_execute_header, v24, "Could not delete tombstoned record %@", 37LL, 2LL, v26);
    swift_bridgeObjectRelease();
    swift_errorRelease(v20);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  }

void *sub_10057BCE0(uint64_t a1)
{
  uint64_t v52 = type metadata accessor for BeaconStoreFileRecord(0LL);
  uint64_t v51 = *(void *)(v52 - 8);
  uint64_t v2 = __chkstk_darwin(v52);
  uint64_t v56 = (uint64_t)&v49 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v2);
  uint64_t v55 = (uint64_t)&v49 - v4;
  uint64_t v5 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v60 = *(void *)(v8 - 8);
  uint64_t v61 = v8;
  __chkstk_darwin(v8);
  uint64_t v54 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v10);
  NSString v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v57 = (char *)&v49 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  id v19 = (char *)&v49 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v49 - v20;
  id v22 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v53 = a1;
  uint64_t v23 = (void *)NSFileManager.enumerator(at:includingPropertiesForKeys:options:errorHandler:)(a1, 0LL, 0LL, 0LL, 0LL);

  id v64 = v23;
  if (v23)
  {
    uint64_t v58 = _swiftEmptyArrayStorage;
    unint64_t v62 = (unint64_t)"shold: %{public}@";
    uint64_t v63 = (char *)&type metadata for Any + 8;
    unint64_t v59 = 0x8000000100855C50LL;
    while (1)
    {
      id v24 = [v64 nextObject];
      if (v24)
      {
        id v25 = v24;
        _bridgeAnyObjectToAny(_:)(v65, v24);
        swift_unknownObjectRelease(v25);
      }

      else
      {
        memset(v65, 0, sizeof(v65));
      }

      sub_100015750((uint64_t)v65, (uint64_t)&v66, &qword_10099E200);
      if (!*((void *)&v67 + 1))
      {
        uint64_t v47 = v58;
        goto LABEL_22;
      }

      int v26 = swift_dynamicCast(v12, &v66, v63, v13, 6LL);
      uint64_t v27 = *(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56);
      v27(v12, v26 ^ 1u, 1LL, v13);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) == 1)
      {
        uint64_t v47 = v58;
        goto LABEL_24;
      }

      uint64_t v28 = (*(uint64_t (**)(char *, char *, uint64_t))(v14 + 32))(v21, v12, v13);
      uint64_t v29 = URL.pathExtension.getter(v28);
      if (v29 == 0xD000000000000010LL && v30 == v59)
      {
        uint64_t v31 = swift_bridgeObjectRelease();
LABEL_13:
        uint64_t v33 = URL.deletingPathExtension()(v31);
        uint64_t v34 = URL.lastPathComponent.getter(v33);
        uint64_t v36 = v35;
        uint64_t v37 = *(void (**)(char *, uint64_t))(v14 + 8);
        v37(v19, v13);
        UUID.init(uuidString:)(v34, v36);
        swift_bridgeObjectRelease();
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v7, 1LL, v61) == 1)
        {
          v37(v21, v13);
          sub_100015794((uint64_t)v7, &qword_10099D8A0);
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v60 + 32))(v54, v7, v61);
          uint64_t v50 = objc_autoreleasePoolPush();
          uint64_t v38 = UUID.uuidString.getter(v50);
          URL.appendingPathComponent(_:)(v38, v39);
          swift_bridgeObjectRelease();
          URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
          v37(v19, v13);
          objc_autoreleasePoolPop(v50);
          unint64_t v40 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 16);
          uint64_t v41 = v55;
          v40(v55, v57, v13);
          uint64_t v42 = v40;
          uint64_t v43 = v41 + *(int *)(v52 + 20);
          v42(v43, v21, v13);
          v27((char *)v43, 0LL, 1LL, v13);
          sub_10001DC4C(v41, v56, type metadata accessor for BeaconStoreFileRecord);
          if ((swift_isUniquelyReferenced_nonNull_native(v58) & 1) == 0) {
            uint64_t v58 = (void *)sub_1004C4704(0, v58[2] + 1LL, 1, (unint64_t)v58);
          }
          unint64_t v45 = v58[2];
          unint64_t v44 = v58[3];
          if (v45 >= v44 >> 1) {
            uint64_t v58 = (void *)sub_1004C4704(v44 > 1, v45 + 1, 1, (unint64_t)v58);
          }
          uint64_t v46 = v58;
          id v58[2] = v45 + 1;
          sub_10002218C( v56,  (uint64_t)v46 + ((*(unsigned __int8 *)(v51 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v51 + 80))
          + *(void *)(v51 + 72) * v45,
            type metadata accessor for BeaconStoreFileRecord);
          sub_100018C68(v55, type metadata accessor for BeaconStoreFileRecord);
          v37(v57, v13);
          (*(void (**)(char *, uint64_t))(v60 + 8))(v54, v61);
          v37(v21, v13);
        }
      }

      else
      {
        char v32 = _stringCompareWithSmolCheck(_:_:expecting:)( v29,  v30,  0xD000000000000010LL,  v62 | 0x8000000000000000LL,  0LL);
        uint64_t v31 = swift_bridgeObjectRelease();
        if ((v32 & 1) != 0) {
          goto LABEL_13;
        }
        (*(void (**)(char *, uint64_t))(v14 + 8))(v21, v13);
      }
    }
  }

  __int128 v66 = 0u;
  __int128 v67 = 0u;
  uint64_t v47 = _swiftEmptyArrayStorage;
LABEL_22:
  sub_100015794((uint64_t)&v66, &qword_10099E200);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v14 + 56))(v12, 1LL, 1LL, v13);
LABEL_24:

  sub_100015794((uint64_t)v12, (uint64_t *)&unk_1009A34D0);
  return v47;
}

uint64_t sub_10057C2EC(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v2);
  uint64_t v4 = &v34[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v34[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = type metadata accessor for BeaconStoreFileRecord(0LL);
  sub_10057C5C0(a1 + *(int *)(v9 + 20), (uint64_t)v4);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v6 + 32))(v8, v4, v5);
  id v11 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL._bridgeToObjectiveC()(v12);
  uint64_t v14 = v13;
  URL._bridgeToObjectiveC()(v15);
  uint64_t v17 = v16;
  id v35 = 0LL;
  unsigned int v18 = [v11 moveItemAtURL:v14 toURL:v16 error:&v35];

  id v19 = v35;
  if (v18)
  {
    uint64_t v20 = *(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8);
    id v21 = v35;
    return v20(v8, v5);
  }

  else
  {
    id v22 = v35;
    uint64_t v23 = (void *)_convertNSErrorToError(_:)(v19);

    uint64_t v25 = swift_willThrow(v24);
    uint64_t v26 = static os_log_type_t.default.getter(v25);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v27 = qword_100A2B018;
    uint64_t v28 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v29 = swift_allocObject(v28, 72LL, 7LL);
    *(_OWORD *)(v29 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    id v35 = v23;
    swift_errorRetain(v23);
    uint64_t v30 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v31 = String.init<A>(describing:)(&v35, v30);
    uint64_t v33 = v32;
    *(void *)(v29 + 56) = &type metadata for String;
    *(void *)(v29 + 64) = sub_1000226F4();
    *(void *)(v29 + 32) = v31;
    *(void *)(v29 + 40) = v33;
    os_log(_:dso:log:_:_:)(v26, &_mh_execute_header, v27, "Could not restore record %@", 27LL, 2LL, v29);
    swift_bridgeObjectRelease();
    swift_errorRelease(v23);
    return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
  }

uint64_t sub_10057C5C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10057C608()
{
  unint64_t result = qword_1009A0500;
  if (!qword_1009A0500)
  {
    uint64_t v1 = sub_100004B78(&qword_1009AED50);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009A0500);
  }

  return result;
}

uint64_t sub_10057C654()
{
  swift_release(*(void *)(v0 + 24));
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10057C680()
{
  return sub_10057A294(*(dispatch_group_s **)(v0 + 16));
}

uint64_t sub_10057C688()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10057C698(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10057C6A8(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_10057C6B0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10057C6D4(uint64_t a1)
{
  return sub_1006C4C8C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void sub_10057C6EC()
{
}

void sub_10057C708(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = objc_autoreleasePoolPush();
  sub_1005791F0(a1, a2, a4, &v8);
  objc_autoreleasePoolPop(v7);
}

uint64_t sub_10057C790()
{
  return sub_10057C7E4((uint64_t (*)(void, void, void, void, void))sub_100530B5C);
}

uint64_t sub_10057C7AC()
{
  return sub_10057C7E4((uint64_t (*)(void, void, void, void, void))sub_100530BCC);
}

uint64_t sub_10057C7C8()
{
  return sub_10057C7E4((uint64_t (*)(void, void, void, void, void))sub_100530AEC);
}

uint64_t sub_10057C7E4(uint64_t (*a1)(void, void, void, void, void))
{
  return a1(v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_10057C808@<X0>(void *a1@<X8>)
{
  return sub_1005758A4( *(void *)(v1 + 32),  *(void *)(v1 + 48),  *(void *)(v1 + 56),  *(void *)(v1 + 64),  *(void *)(v1 + 16),  *(void *)(v1 + 24),  a1);
}

void sub_10057C82C(int a1, void *a2, char *a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = sub_100506C30();
  swift_retain();
  uint64_t v9 = sub_10057EC0C((uint64_t)v8, v4);
  swift_bridgeObjectRelease();
  uint64_t v10 = swift_release();
  CurrentValueSubject.value.getter(v33, v10);
  if (LOBYTE(v33[0]) == 7)
  {
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    uint64_t v12 = sub_10000A720(v11, (uint64_t)qword_100A2AAA0);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "SeparationStateSyncService: Responding to remote sync request",  v15,  2u);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    sub_10057EAEC(v4 + 40, (uint64_t)v33);
    if (v33[3])
    {
      sub_100013044((uint64_t)v33, (uint64_t)v32);
      sub_100015794((uint64_t)v33, &qword_1009B3250);
      uint64_t v16 = *sub_100012ED8(v32, v32[3]);
      swift_bridgeObjectRetain(v9);
      sub_1001F2FF4(12, 1LL, (uint64_t)v9, (uint64_t)v28);
      uint64_t v22 = v30;
      uint64_t v27 = v29;
      unint64_t v23 = v31;
      int v24 = v28[0];
      swift_bridgeObjectRetain(v9);
      swift_bridgeObjectRetain(a3);
      uint64_t v25 = (os_log_s *)sub_1004131A4((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v26 = (void (*)(uint64_t, uint64_t))sub_1006F13B0((uint64_t)_swiftEmptyArrayStorage);
      sub_1002021E4( v24,  v27,  v22,  v23,  v25,  a1,  (uint64_t)a2,  (uint64_t)a3,  0,  0LL,  1,  1,  &_swiftEmptySetSingleton,  v26,  0,  v16,  (uint64_t)v9,  a1,  a2,  a3);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100016F9C(v22, v23);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v32);
    }

    else
    {
      swift_bridgeObjectRelease();
      sub_100015794((uint64_t)v33, &qword_1009B3250);
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    uint64_t v18 = sub_10000A720(v17, (uint64_t)qword_100A2AAA0);
    id v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.default.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      id v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)id v21 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "SeparationStateSyncService: This is not the monitoring device, won't accept remote sync request.",  v21,  2u);
      swift_slowDealloc(v21, -1LL, -1LL);
    }
  }

uint64_t sub_10057CCE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v7 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v35 = *(void *)(v7 - 8);
  uint64_t v36 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v37 = (uint64_t)&v30 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v30 - v10;
  uint64_t v12 = *(void *)(a2 + 24);
  uint64_t v13 = *(int *)(type metadata accessor for OwnedBeaconRecord(0LL) + 20);
  swift_retain_n(a2, 2LL);
  uint64_t v33 = objc_autoreleasePoolPush();
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009AF790);
  OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, v12, v14);
  uint64_t v32 = v3;
  uint64_t v15 = v38;
  if (!v38[2] || (unint64_t v16 = sub_10030D124(a1 + v13), (v17 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    unint64_t v23 = _swiftEmptyArrayStorage;
LABEL_18:
    objc_autoreleasePoolPop(v33);
    swift_release_n(a2, 2LL);
    sub_1000F0A44((uint64_t)v23, a3);
    return swift_bridgeObjectRelease();
  }

  uint64_t v18 = *(void *)(v15[7] + 8 * v16);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease();
  id v19 = sub_1002FE5F8(v18);
  swift_bridgeObjectRelease();
  sub_1002FFE1C((uint64_t)v19);
  uint64_t v21 = v20;
  uint64_t result = swift_release();
  unint64_t v23 = _swiftEmptyArrayStorage;
  uint64_t v38 = _swiftEmptyArrayStorage;
  uint64_t v34 = *(void *)(v21 + 16);
  if (!v34)
  {
LABEL_17:
    swift_release();
    goto LABEL_18;
  }

  uint64_t v30 = a2;
  uint64_t v31 = a3;
  unint64_t v24 = 0LL;
  while (v24 < *(void *)(v21 + 16))
  {
    unint64_t v25 = (*(unsigned __int8 *)(v35 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v35 + 80);
    uint64_t v26 = *(void *)(v35 + 72);
    sub_1003493A4(v21 + v25 + v26 * v24, (uint64_t)v11);
    uint64_t v27 = qword_100807190[v11[*(int *)(v36 + 24)]];
    if (v27 == 700 || v27 == 701)
    {
      sub_1003493E8((uint64_t)v11, v37);
      if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0) {
        sub_100032AA8(0, v23[2] + 1LL, 1);
      }
      unint64_t v23 = v38;
      unint64_t v29 = v38[2];
      unint64_t v28 = v38[3];
      if (v29 >= v28 >> 1)
      {
        sub_100032AA8(v28 > 1, v29 + 1, 1);
        unint64_t v23 = v38;
      }

      v23[2] = v29 + 1;
      uint64_t result = sub_1003493E8(v37, (uint64_t)v23 + v25 + v29 * v26);
    }

    else
    {
      uint64_t result = sub_100303000((uint64_t)v11);
    }

    if (v34 == ++v24)
    {
      unint64_t v23 = v38;
      a2 = v30;
      a3 = v31;
      goto LABEL_17;
    }
  }

  __break(1u);
  return result;
}

void sub_10057CFBC(uint64_t a1)
{
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_1009A5990);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v98 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v109 = (char *)v98 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v110 = (uint64_t)v98 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  unint64_t v108 = (char *)v98 - v13;
  uint64_t v14 = __chkstk_darwin(v12);
  __int128 v99 = (char *)v98 - v15;
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v126 = (uint64_t)v98 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v124 = (char *)v98 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v22 = (char *)v98 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  unint64_t v117 = (char *)v98 - v24;
  uint64_t v25 = __chkstk_darwin(v23);
  uint64_t v27 = (char *)v98 - v26;
  uint64_t v28 = __chkstk_darwin(v25);
  uint64_t v122 = (uint64_t)v98 - v29;
  uint64_t v123 = v1;
  CurrentValueSubject.value.getter(v127, v28);
  if (LOBYTE(v127[0]) == 7)
  {
    if (qword_10099B4C8 != -1) {
      goto LABEL_60;
    }
    goto LABEL_3;
  }

  uint64_t v113 = *(void *)(a1 + 16);
  if (v113)
  {
    uint64_t v105 = v27;
    uint64_t v118 = *(void *)(v123 + 24);
    uint64_t v35 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v36 = (v35 + 32) & ~v35;
    uint64_t v112 = a1 + v36;
    uint64_t v111 = OBJC_IVAR____TtC12searchpartyd22BeaconObservationStore_observationsConcurrentQueue;
    uint64_t v37 = *(void *)(v7 + 72);
    uint64_t v107 = (v35 + 24) & ~v35;
    uint64_t v106 = v107 + v8;
    uint64_t v114 = v35 | 7;
    uint64_t v125 = v36;
    uint64_t v104 = v37 + v36;
    v98[1] = a1;
    __n128 v38 = swift_bridgeObjectRetain(a1);
    uint64_t v39 = 0LL;
    uint64_t v40 = 0LL;
    v38.n128_u64[0] = 136315138LL;
    __n128 v103 = v38;
    uint64_t v102 = (char *)&type metadata for Any + 8;
    __int128 v101 = xmmword_1007E67D0;
    __int128 v100 = (char *)&type metadata for () + 8;
    uint64_t v115 = v7;
    uint64_t v116 = v5;
    uint64_t v41 = v122;
    while (1)
    {
      uint64_t v120 = v39;
      sub_1003493A4(v112 + v37 * v39, v41);
      swift_retain();
      uint64_t v121 = objc_autoreleasePoolPush();
      uint64_t v44 = v118;
      uint64_t v45 = sub_100004AEC((uint64_t *)&unk_1009AF790);
      OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, v44, v45);
      uint64_t v119 = v40;
      uint64_t v46 = v127[0];
      if (*(void *)(v127[0] + 16))
      {
        unint64_t v47 = sub_10030D124(v41);
        uint64_t v48 = (uint64_t)v117;
        if ((v49 & 1) != 0)
        {
          uint64_t v50 = *(void *)(*(void *)(v46 + 56) + 8 * v47);
          swift_bridgeObjectRetain(v50);
          swift_bridgeObjectRelease();
          uint64_t v51 = sub_1002FE5F8(v50);
          swift_bridgeObjectRelease();
          sub_1002FFE1C((uint64_t)v51);
          uint64_t v53 = v52;
          swift_release();
          uint64_t v54 = _swiftEmptyArrayStorage;
          v127[0] = (uint64_t)_swiftEmptyArrayStorage;
          uint64_t v55 = *(void *)(v53 + 16);
          if (v55)
          {
            unint64_t v56 = 0LL;
            uint64_t v57 = (uint64_t)v124;
            uint64_t v58 = v53 + v125;
            while (v56 < *(void *)(v53 + 16))
            {
              sub_1003493A4(v58, v57);
              uint64_t v59 = qword_100807190[*(char *)(v57 + *(int *)(v6 + 24))];
              if (v59 == 700 || v59 == 701)
              {
                uint64_t v60 = v6;
                sub_1003493E8(v57, v126);
                if ((swift_isUniquelyReferenced_nonNull_native(v54) & 1) == 0) {
                  sub_100032AA8(0, v54[2] + 1LL, 1);
                }
                uint64_t v54 = (void *)v127[0];
                unint64_t v62 = *(void *)(v127[0] + 16);
                unint64_t v61 = *(void *)(v127[0] + 24);
                if (v62 >= v61 >> 1)
                {
                  sub_100032AA8(v61 > 1, v62 + 1, 1);
                  uint64_t v54 = (void *)v127[0];
                }

                v54[2] = v62 + 1;
                sub_1003493E8(v126, (uint64_t)v54 + v125 + v62 * v37);
                uint64_t v6 = v60;
                uint64_t v57 = (uint64_t)v124;
              }

              else
              {
                sub_100303000(v57);
              }

              ++v56;
              v58 += v37;
              if (v55 == v56)
              {
                uint64_t v54 = (void *)v127[0];
                uint64_t v7 = v115;
                uint64_t v5 = v116;
                uint64_t v48 = (uint64_t)v117;
                goto LABEL_28;
              }
            }

            __break(1u);
LABEL_60:
            swift_once(&qword_10099B4C8, sub_10047B404);
LABEL_3:
            uint64_t v30 = type metadata accessor for Logger(0LL);
            uint64_t v31 = sub_10000A720(v30, (uint64_t)qword_100A2AAA0);
            uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
            os_log_type_t v33 = static os_log_type_t.default.getter(v32);
            if (os_log_type_enabled(v32, v33))
            {
              uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
              *(_WORD *)uint64_t v34 = 0;
              _os_log_impl( (void *)&_mh_execute_header,  v32,  v33,  "SeparationStateSyncService: This is the monitoring device, won't accept forwarded state.",  v34,  2u);
              swift_slowDealloc(v34, -1LL, -1LL);
            }

            return;
          }

uint64_t sub_10057DBE0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = sub_100004AEC(&qword_10099D318);
  uint64_t v4 = *(void *)(type metadata accessor for BeaconObservation(0LL) - 8);
  uint64_t v5 = *(void *)(v4 + 72);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 32) & ~v6;
  uint64_t v8 = swift_allocObject(v3, v7 + v5, v6 | 7);
  *(_OWORD *)(v8 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  sub_1003493A4(a2, v8 + v7);
  type metadata accessor for Transaction(0LL);
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.BeaconObservationStore.save",  57LL,  2LL,  sub_1002DDE58);
  return swift_bridgeObjectRelease();
}

uint64_t sub_10057DCBC()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10057DD1C()
{
  return type metadata accessor for SeparationStateSyncManager(0LL);
}

uint64_t type metadata accessor for SeparationStateSyncManager(uint64_t a1)
{
  uint64_t result = qword_1009B3138;
  if (!qword_1009B3138) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SeparationStateSyncManager);
  }
  return result;
}

void sub_10057DD60(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = "(";
  sub_10012DB5C(319LL);
  if (v3 <= 0x3F)
  {
    void v4[4] = *(void *)(v2 - 8) + 64LL;
    swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
  }

void sub_10057DDE8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(int *)(v3 + 24);
  if (qword_100807190[*(char *)(a1 + v6)] == 501LL)
  {
    sub_1003493A4(a1, (uint64_t)v5);
    uint64_t v7 = sub_100303000((uint64_t)v5);
  }

  else
  {
    sub_1003493A4(a1, (uint64_t)v5);
    BOOL v8 = sub_1000BC69C(v5[*(int *)(v2 + 24)], (uint64_t)&off_100934648);
    uint64_t v7 = sub_100303000((uint64_t)v5);
    if (!v8) {
      return;
    }
  }

  CurrentValueSubject.value.getter(&v16, v7);
  if (v16 == 7)
  {
    uint64_t v9 = *(unsigned __int8 *)(a1 + v6);
    if (sub_1000BC69C(v9, (uint64_t)&off_1009346C0))
    {
      sub_10057E028(a1);
    }

    else if (sub_1000BC69C(v9, (uint64_t)&off_1009346E8))
    {
      sub_10057E398(a1);
    }
  }

  else
  {
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = sub_10000A720(v10, (uint64_t)qword_100A2AAA0);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v14 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v12,  v13,  "SeparationStateSyncService: Not a monitoring device, won't update separation state.",  v14,  2u);
      swift_slowDealloc(v14, -1LL, -1LL);
    }
  }

uint64_t sub_10057E028(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v36 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  os_log_type_t v13 = (char *)&v36 - v12;
  BOOL v14 = sub_1000BC69C(*(unsigned __int8 *)(a1 + *(int *)(v11 + 24)), (uint64_t)&off_100934698);
  sub_1003493A4(a1, (uint64_t)v13);
  if (v14)
  {
    uint64_t v15 = *(void *)(v1 + 24);
    char v16 = sub_10057E76C((uint64_t)v13);
    uint64_t result = sub_100303000((uint64_t)v13);
    if ((v16 & 1) == 0) {
      return result;
    }
    uint64_t v18 = type metadata accessor for UUID(0LL);
    uint64_t v19 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 16LL))(v10, a1, v18);
    Date.addingTimeInterval(_:)(v19, COERCE_DOUBLE(1LL));
    v10[*(int *)(v3 + 24)] = 42;
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v20 = type metadata accessor for Logger(0LL);
    sub_10000A720(v20, (uint64_t)qword_100A2AAA0);
    uint64_t v21 = sub_1003493A4(a1, (uint64_t)v7);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.default.getter(v22);
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v25 = swift_slowAlloc(32LL, -1LL);
      uint64_t v38 = v15;
      uint64_t v26 = v25;
      v40[0] = v25;
      *(_DWORD *)uint64_t v24 = 136315138;
      uint64_t v37 = v24 + 4;
      unint64_t v27 = sub_1000F620C();
      uint64_t v28 = dispatch thunk of CustomStringConvertible.description.getter(v18, v27);
      uint64_t v39 = sub_1003F11D4(v28, v29, v40);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v39, v40, v37, v24 + 12);
      swift_bridgeObjectRelease();
      sub_100303000((uint64_t)v7);
      _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "SeparationStateSyncService: Detected reunite event for %s.",  v24,  0xCu);
      swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v30 = v26;
      uint64_t v15 = v38;
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    else
    {
      sub_100303000((uint64_t)v7);
    }

    uint64_t v31 = sub_100004AEC(&qword_10099D318);
    uint64_t v32 = *(unsigned __int8 *)(v4 + 80);
    uint64_t v33 = (v32 + 32) & ~v32;
    uint64_t v34 = swift_allocObject(v31, v33 + *(void *)(v4 + 72), v32 | 7);
    *(_OWORD *)(v34 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    sub_1003493A4((uint64_t)v10, v34 + v33);
    uint64_t v35 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v35);
    *(&v36 - 4) = v15;
    *(&v36 - 3) = v34;
    *(&v36 - 2) = 0LL;
    *(&v36 - 1) = 0LL;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.BeaconObservationStore.save",  57LL,  2LL,  sub_1000DF788);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v10 = v13;
  }

  return sub_100303000((uint64_t)v10);
}

uint64_t sub_10057E398(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for BeaconObservation(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_10000A720(v7, (uint64_t)qword_100A2AAA0);
  uint64_t v8 = sub_1003493A4(a1, (uint64_t)v6);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v20 = swift_slowAlloc(32LL, -1LL);
    v23[0] = v20;
    *(_DWORD *)uint64_t v11 = 136315138;
    uint64_t v19 = v11 + 4;
    uint64_t v12 = type metadata accessor for UUID(0LL);
    unint64_t v13 = sub_1000F620C();
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter(v12, v13);
    uint64_t v21 = sub_1003F11D4(v14, v15, v23);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, v22, v19, v11 + 12);
    swift_bridgeObjectRelease();
    sub_100303000((uint64_t)v6);
    _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "SeparationStateSyncService: Forwarding Separation State Update for %s.",  v11,  0xCu);
    uint64_t v16 = v20;
    swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  else
  {
    sub_100303000((uint64_t)v6);
  }

  sub_10057EAEC(v2 + 40, (uint64_t)v23);
  if (!v23[3]) {
    return sub_100015794((uint64_t)v23, &qword_1009B3250);
  }
  sub_100013044((uint64_t)v23, (uint64_t)&v21);
  sub_100015794((uint64_t)v23, &qword_1009B3250);
  sub_100012ED8(&v21, v22[2]);
  sub_1001F176C(a1);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v21);
}

uint64_t sub_10057E76C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v39 = (uint64_t)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v34 - v7;
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009A5990);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v34 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = objc_autoreleasePoolPush();
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_1009AF790);
  OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, v1, v13);
  uint64_t v14 = v40;
  if (!v40[2] || (unint64_t v15 = sub_10030D124(a1), (v16 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    uint64_t v22 = _swiftEmptyArrayStorage;
    goto LABEL_21;
  }

  uint64_t v17 = *(void *)(v14[7] + 8 * v15);
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease();
  uint64_t v18 = sub_1002FE5F8(v17);
  swift_bridgeObjectRelease();
  sub_1002FFE1C((uint64_t)v18);
  uint64_t v20 = v19;
  uint64_t result = swift_release();
  uint64_t v22 = _swiftEmptyArrayStorage;
  uint64_t v40 = _swiftEmptyArrayStorage;
  uint64_t v23 = *(void *)(v20 + 16);
  if (!v23)
  {
LABEL_20:
    swift_release();
LABEL_21:
    objc_autoreleasePoolPop(v12);
    sub_1000F0A44((uint64_t)v22, (uint64_t)v11);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v11, 1LL, v3) == 1)
    {
      sub_100015794((uint64_t)v11, (uint64_t *)&unk_1009A5990);
      return 0LL;
    }

    else
    {
      int v33 = v11[*(int *)(v3 + 24)];
      sub_100303000((uint64_t)v11);
      return v33 == 41;
    }
  }

  uint64_t v35 = v12;
  uint64_t v36 = v11;
  unint64_t v24 = 0LL;
  uint64_t v37 = v23;
  uint64_t v38 = v4;
  while (v24 < *(void *)(v20 + 16))
  {
    unint64_t v25 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
    uint64_t v26 = *(void *)(v4 + 72);
    uint64_t result = sub_1003493A4(v20 + v25 + v26 * v24, (uint64_t)v8);
    uint64_t v27 = qword_100807190[v8[*(int *)(v3 + 24)]];
    if (v27 != 700)
    {
      uint64_t v31 = &stru_100000020.cmd + 1;
      while (1)
      {
        uint64_t v32 = v31 - 31;
        if (__OFADD__(v31 - 32, 1LL)) {
          break;
        }
        ++v31;
        if (v32 == 2)
        {
          uint64_t result = sub_100303000((uint64_t)v8);
          goto LABEL_5;
        }
      }

      __break(1u);
      break;
    }

void sub_10057EACC(uint64_t a1)
{
}

uint64_t sub_10057EAEC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009B3250);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10057EB34()
{
  uint64_t v1 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  uint64_t v7 = v0 + v4;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  uint64_t v9 = v7 + *(int *)(v1 + 20);
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v9, v10);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10057EBDC()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for BeaconObservation(0LL) - 8) + 80LL);
  return sub_10057DBE0(*(void *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

void *sub_10057EC0C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A5990);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v8 = *(void *)(v25 - 8);
  uint64_t v9 = __chkstk_darwin(v25);
  uint64_t v24 = (uint64_t)&v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v23 = (uint64_t)&v21 - v11;
  uint64_t v12 = *(void *)(a1 + 16);
  if (!v12) {
    return _swiftEmptyArrayStorage;
  }
  uint64_t v13 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  uint64_t v14 = a1 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
  uint64_t v15 = *(void *)(v13 + 72);
  uint64_t v21 = a1;
  swift_bridgeObjectRetain(a1);
  char v16 = _swiftEmptyArrayStorage;
  uint64_t v22 = a2;
  do
  {
    sub_10057CCE4(v14, a2, (uint64_t)v7);
    if (v2)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return v16;
    }

    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v7, 1LL, v25) == 1)
    {
      sub_100015794((uint64_t)v7, (uint64_t *)&unk_1009A5990);
    }

    else
    {
      uint64_t v17 = v23;
      sub_1003493E8((uint64_t)v7, v23);
      sub_1003493E8(v17, v24);
      if ((swift_isUniquelyReferenced_nonNull_native(v16) & 1) == 0) {
        char v16 = (void *)sub_1004C5AE8(0, v16[2] + 1LL, 1, (unint64_t)v16);
      }
      unint64_t v19 = v16[2];
      unint64_t v18 = v16[3];
      if (v19 >= v18 >> 1) {
        char v16 = (void *)sub_1004C5AE8(v18 > 1, v19 + 1, 1, (unint64_t)v16);
      }
      v16[2] = v19 + 1;
      sub_1003493E8( v24,  (uint64_t)v16 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80))
      + *(void *)(v8 + 72) * v19);
      a2 = v22;
    }

    v14 += v15;
    --v12;
  }

  while (v12);
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t static MessagingDestination.== infix(_:_:)( char a1, uint64_t a2, uint64_t a3, char a4, uint64_t a5, uint64_t a6)
{
  if (a1 != a4) {
    return 0LL;
  }
  if (a2 == a5 && a3 == a6) {
    return 1LL;
  }
  return _stringCompareWithSmolCheck(_:_:expecting:)(a2, a3, a5, a6, 0LL);
}

uint64_t sub_10057EEA4(uint64_t a1, uint64_t a2, void *a3)
{
  if (a1 != 2)
  {
    uint64_t v12 = a1;
    swift_bridgeObjectRetain(a3);
    return v12;
  }

  NSString v5 = String._bridgeToObjectiveC()();
  id v6 = [v5 _stripPotentialTokenURIWithToken:0];

  if (v6)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
    uint64_t v9 = v8;

    _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v7, v9);
    if (v11) {
      return v10;
    }
  }

  else
  {
    __break(1u);
  }

  _StringGuts.grow(_:)(39LL);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRetain(a3);
  v14._countAndFlagsBits = a2;
  v14._object = a3;
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  v15._countAndFlagsBits = 0xD000000000000013LL;
  v15._object = (void *)0x8000000100868900LL;
  String.append(_:)(v15);
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000012LL,  0x80000001008688E0LL,  "searchpartyd/MessagingDestination.swift",  39LL,  2LL,  72LL,  0);
  __break(1u);
  return result;
}

uint64_t MessagingDestination.destination.getter(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a2;
}

uint64_t MessagingDestination.DestinationType.rawValue.getter(uint64_t result)
{
  return result;
}

unint64_t sub_10057F054@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = _s12searchpartyd20MessagingDestinationV0C4TypeO8rawValueAESgSi_tcfC_0(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_10057F07C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10057FF94();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10057F0D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10057FF94();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

searchpartyd::MessagingDestination __swiftcall MessagingDestination.init(email:)(Swift::String email)
{
  object = email._object;
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  uint64_t v3 = (void *)IDSCopyIDForEmailAddress(v2);

  if (v3)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    uint64_t v9 = v8;

    searchpartyd::MessagingDestination::DestinationType v4 = searchpartyd_MessagingDestination_DestinationType_email;
    uint64_t v5 = v7;
    unint64_t v6 = v9;
  }

  else
  {
    __break(1u);
  }

  result.destination._object = v6;
  result.destination._countAndFlagsBits = v5;
  result.type = v4;
  return result;
}

searchpartyd::MessagingDestination __swiftcall MessagingDestination.init(phoneNumber:)(Swift::String phoneNumber)
{
  object = phoneNumber._object;
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(object);
  uint64_t v3 = (void *)IDSCopyIDForPhoneNumber(v2);

  if (v3)
  {
    uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v3);
    uint64_t v9 = v8;

    searchpartyd::MessagingDestination::DestinationType v4 = searchpartyd_MessagingDestination_DestinationType_phoneNumber;
    uint64_t v5 = v7;
    unint64_t v6 = v9;
  }

  else
  {
    __break(1u);
  }

  result.destination._object = v6;
  result.destination._countAndFlagsBits = v5;
  result.type = v4;
  return result;
}

uint64_t sub_10057F1FC()
{
  if (*v0) {
    return 0x74616E6974736564LL;
  }
  else {
    return 1701869940LL;
  }
}

uint64_t sub_10057F238@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10057F960(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10057F25C(uint64_t a1)
{
  unint64_t v2 = sub_10057F8D8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10057F284(uint64_t a1)
{
  unint64_t v2 = sub_10057F8D8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t MessagingDestination.encode(to:)(void *a1, char a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v8 = sub_100004AEC(&qword_1009B3258);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v17 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v12);
  unint64_t v14 = sub_10057F8D8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for MessagingDestination.CodingKeys,  &type metadata for MessagingDestination.CodingKeys,  v14,  v12,  v13);
  char v21 = a2;
  char v20 = 0;
  unint64_t v15 = sub_10057F91C();
  KeyedEncodingContainer.encode<A>(_:forKey:)( &v21,  &v20,  v8,  &type metadata for MessagingDestination.DestinationType,  v15);
  if (!v4)
  {
    char v19 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(a3, v18, &v19, v8);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t MessagingDestination.init(from:)(void *a1)
{
  return sub_10057FA58(a1);
}

uint64_t sub_10057F408@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10057FA58(a1);
  if (!v2)
  {
    *(_BYTE *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(void *)(a2 + swift_weakDestroy(v0 + 16) = v6;
  }

  return result;
}

uint64_t sub_10057F434(void *a1)
{
  return MessagingDestination.encode(to:)(a1, *(_BYTE *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16));
}

uint64_t sub_10057F450()
{
  uint64_t v1 = *(void *)(v0 + 8);
  swift_bridgeObjectRetain(*(void *)(v0 + 16));
  return v1;
}

uint64_t MessagingDestination.hash(into:)(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  return swift_bridgeObjectRelease(a4);
}

Swift::Int MessagingDestination.hashValue.getter(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  return Hasher._finalize()();
}

Swift::Int sub_10057F540()
{
  Swift::UInt v1 = *v0;
  uint64_t v2 = *((void *)v0 + 1);
  uint64_t v3 = *((void *)v0 + 2);
  Hasher.init(_seed:)(v5, 0LL);
  Hasher._combine(_:)(v1);
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10057F5B0(uint64_t a1)
{
  uint64_t v3 = *((void *)v1 + 1);
  uint64_t v4 = *((void *)v1 + 2);
  Hasher._combine(_:)(*v1);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease(v4);
}

Swift::Int sub_10057F600(uint64_t a1)
{
  Swift::UInt v2 = *v1;
  uint64_t v3 = *((void *)v1 + 1);
  uint64_t v4 = *((void *)v1 + 2);
  Hasher.init(_seed:)(v6, a1);
  Hasher._combine(_:)(v2);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10057F66C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0LL;
  }
  uint64_t v4 = *((void *)a1 + 1);
  uint64_t v5 = *((void *)a1 + 2);
  uint64_t v6 = *((void *)a2 + 1);
  uint64_t v7 = *((void *)a2 + 2);
  if (v4 == v6 && v5 == v7) {
    return 1LL;
  }
  else {
    return _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, v6, v7, 0LL);
  }
}

void _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(uint64_t a1, uint64_t a2)
{
  v6[2] = a1;
  v6[3] = a2;
  v6[0] = 64LL;
  v6[1] = 0xE100000000000000LL;
  unint64_t v2 = sub_1000155F8();
  char v3 = StringProtocol.contains<A>(_:)(v6, &type metadata for String, &type metadata for String, v2, v2);
  NSString v4 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  if ((v3 & 1) != 0)
  {
    uint64_t v5 = (void *)IDSCopyIDForEmailAddress(v4);

    if (v5) {
      goto LABEL_5;
    }
    __break(1u);
  }

  else
  {
    uint64_t v5 = (void *)IDSCopyIDForPhoneNumber(v4);

    if (v5)
    {
LABEL_5:
      static String._unconditionallyBridgeFromObjectiveC(_:)(v5);

      return;
    }
  }

  __break(1u);
}

uint64_t _s12searchpartyd20MessagingDestinationV20stringRepresentationACSgSS_tcfC_0(uint64_t a1, uint64_t a2)
{
  v3._countAndFlagsBits = 0x3A6F746C69616DLL;
  v3._object = (void *)0xE700000000000000LL;
  if (String.hasPrefix(_:)(v3)) {
    return 0LL;
  }
  v5._countAndFlagsBits = 980182388LL;
  v5._object = (void *)0xE400000000000000LL;
  if (String.hasPrefix(_:)(v5)) {
    return 1LL;
  }
  v6._countAndFlagsBits = 0x3A6E656B6F74LL;
  v6._object = (void *)0xE600000000000000LL;
  if (String.hasPrefix(_:)(v6)) {
    return 2LL;
  }
  v7._countAndFlagsBits = 0x6B6F742D666C6573LL;
  v7._object = (void *)0xEB000000003A6E65LL;
  if (String.hasPrefix(_:)(v7)) {
    return 2LL;
  }
  v8._countAndFlagsBits = 0x3A656369766564LL;
  v8._object = (void *)0xE700000000000000LL;
  if (String.hasPrefix(_:)(v8)) {
    return 3LL;
  }
  v9._countAndFlagsBits = 0x3A6E6F6973736573LL;
  v9._object = (void *)0xE800000000000000LL;
  if (String.hasPrefix(_:)(v9)) {
    return 4LL;
  }
  swift_bridgeObjectRelease(a2);
  return 0LL;
}

unint64_t _s12searchpartyd20MessagingDestinationV0C4TypeO8rawValueAESgSi_tcfC_0( unint64_t result)
{
  if (result >= 6) {
    return 6LL;
  }
  return result;
}

unint64_t sub_10057F8D8()
{
  unint64_t result = qword_1009B3260;
  if (!qword_1009B3260)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008075C8, &type metadata for MessagingDestination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3260);
  }

  return result;
}

unint64_t sub_10057F91C()
{
  unint64_t result = qword_1009B3268;
  if (!qword_1009B3268)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MessagingDestination.DestinationType,  &type metadata for MessagingDestination.DestinationType);
    atomic_store(result, (unint64_t *)&qword_1009B3268);
  }

  return result;
}

uint64_t sub_10057F960(uint64_t a1, unint64_t a2)
{
  if (a1 == 1701869940 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x74616E6974736564LL && a2 == 0xEB000000006E6F69LL)
  {
    swift_bridgeObjectRelease(0xEB000000006E6F69LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74616E6974736564LL, 0xEB000000006E6F69LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_10057FA58(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009B32A0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  Swift::String v6 = (char *)&v12 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100012ED8(a1, v7);
  unint64_t v9 = sub_10057F8D8();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for MessagingDestination.CodingKeys,  &type metadata for MessagingDestination.CodingKeys,  v9,  v7,  v8);
  if (!v1)
  {
    char v14 = 0;
    unint64_t v10 = sub_10057FFD8();
    KeyedDecodingContainer.decode<A>(_:forKey:)( &v15,  &type metadata for MessagingDestination.DestinationType,  &v14,  v3,  &type metadata for MessagingDestination.DestinationType,  v10);
    uint64_t v7 = v15;
    char v13 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v13, v3);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v7;
}

unint64_t sub_10057FBC8()
{
  unint64_t result = qword_1009B3270;
  if (!qword_1009B3270)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MessagingDestination.DestinationType,  &type metadata for MessagingDestination.DestinationType);
    atomic_store(result, (unint64_t *)&qword_1009B3270);
  }

  return result;
}

unint64_t sub_10057FC10()
{
  unint64_t result = qword_1009B3278;
  if (!qword_1009B3278)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MessagingDestination,  &type metadata for MessagingDestination);
    atomic_store(result, (unint64_t *)&qword_1009B3278);
  }

  return result;
}

uint64_t destroy for MessagingDestination(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 16));
}

uint64_t _s12searchpartyd20MessagingDestinationVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for MessagingDestination(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for MessagingDestination(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v3 = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  swift_bridgeObjectRelease(v4);
  return a1;
}

ValueMetadata *type metadata accessor for MessagingDestination()
{
  return &type metadata for MessagingDestination;
}

uint64_t storeEnumTagSinglePayload for MessagingDestination.DestinationType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_10057FD70 + 4 * byte_1008072F5[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_10057FDA4 + 4 * byte_1008072F0[v4]))();
}

uint64_t sub_10057FDA4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10057FDAC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10057FDB4LL);
  }
  return result;
}

uint64_t sub_10057FDC0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10057FDC8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_10057FDCC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10057FDD4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MessagingDestination.DestinationType()
{
  return &type metadata for MessagingDestination.DestinationType;
}

uint64_t storeEnumTagSinglePayload for MessagingDestination.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10057FE3C + 4 * byte_1008072FF[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10057FE70 + 4 * byte_1008072FA[v4]))();
}

uint64_t sub_10057FE70(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10057FE78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10057FE80LL);
  }
  return result;
}

uint64_t sub_10057FE8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10057FE94LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10057FE98(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10057FEA0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MessagingDestination.CodingKeys()
{
  return &type metadata for MessagingDestination.CodingKeys;
}

unint64_t sub_10057FEC0()
{
  unint64_t result = qword_1009B3280;
  if (!qword_1009B3280)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008075A0, &type metadata for MessagingDestination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3280);
  }

  return result;
}

unint64_t sub_10057FF08()
{
  unint64_t result = qword_1009B3288;
  if (!qword_1009B3288)
  {
    unint64_t result = swift_getWitnessTable(&unk_100807510, &type metadata for MessagingDestination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3288);
  }

  return result;
}

unint64_t sub_10057FF50()
{
  unint64_t result = qword_1009B3290;
  if (!qword_1009B3290)
  {
    unint64_t result = swift_getWitnessTable(&unk_100807538, &type metadata for MessagingDestination.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3290);
  }

  return result;
}

unint64_t sub_10057FF94()
{
  unint64_t result = qword_1009B3298;
  if (!qword_1009B3298)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MessagingDestination.DestinationType,  &type metadata for MessagingDestination.DestinationType);
    atomic_store(result, (unint64_t *)&qword_1009B3298);
  }

  return result;
}

unint64_t sub_10057FFD8()
{
  unint64_t result = qword_1009B32A8;
  if (!qword_1009B32A8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MessagingDestination.DestinationType,  &type metadata for MessagingDestination.DestinationType);
    atomic_store(result, (unint64_t *)&qword_1009B32A8);
  }

  return result;
}

uint64_t sub_10058001C()
{
  uint64_t v2 = v0;
  uint64_t v3 = type metadata accessor for PropertyListDecoder(0LL);
  uint64_t v4 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  uint64_t v5 = PropertyListDecoder.init()(v4);
  uint64_t v6 = sub_100004AEC(&qword_1009AED50);
  uint64_t v7 = (uint64_t *)(v2 + *(int *)(sub_100004AEC(&qword_1009A4978) + 44));
  uint64_t v8 = *v7;
  uint64_t v9 = v7[1];
  unint64_t v10 = sub_10033FF34();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&v15, v6, v8, v9, v6, v10);
  swift_release();
  if (!v1)
  {
    if (v15[2])
    {
      uint64_t v5 = v15[4];
      swift_bridgeObjectRetain(v15[5]);
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v5 = sub_100004AEC(&qword_1009B3720);
      uint64_t v12 = sub_1000372EC( &qword_1009B3728,  &qword_1009B3720,  (uint64_t)&protocol conformance descriptor for SessionMessage<A>.MessageError);
      uint64_t v13 = swift_allocError(v5, v12, 0LL, 0LL);
      *char v14 = 0;
      swift_willThrow(v13);
    }
  }

  return v5;
}

uint64_t sub_100580154@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = v1;
  uint64_t v5 = type metadata accessor for PropertyListDecoder(0LL);
  uint64_t v6 = swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  PropertyListDecoder.init()(v6);
  uint64_t v7 = sub_100004AEC(&qword_1009A1EC8);
  uint64_t v8 = (uint64_t *)(v3 + *(int *)(sub_100004AEC(&qword_1009A4978) + 44));
  uint64_t v9 = *v8;
  uint64_t v10 = v8[1];
  unint64_t v11 = sub_100596510();
  dispatch thunk of PropertyListDecoder.decode<A>(_:from:)(&v24, v7, v9, v10, v7, v11);
  uint64_t result = swift_release();
  if (!v2)
  {
    if (*(void *)(v24 + 16))
    {
      uint64_t v13 = *(void *)(v24 + 32);
      unint64_t v14 = *(void *)(v24 + 40);
      uint64_t v15 = *(void *)(v24 + 48);
      char v16 = *(_BYTE *)(v24 + 56);
      uint64_t v17 = *(void *)(v24 + 72);
      uint64_t v23 = *(void *)(v24 + 64);
      uint64_t v18 = *(void *)(v24 + 80);
      sub_10001736C(v13, v14);
      swift_bridgeObjectRetain(v17);
      swift_bridgeObjectRetain(v18);
      uint64_t result = swift_bridgeObjectRelease();
      *(void *)a1 = v13;
      *(void *)(a1 + 8) = v14;
      *(void *)(a1 + swift_weakDestroy(v0 + 16) = v15;
      *(_BYTE *)(a1 + 24) = v16;
      *(void *)(a1 + 32) = v23;
      *(void *)(a1 + 40) = v17;
      *(void *)(a1 + 48) = v18;
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v19 = sub_100004AEC(&qword_1009B3720);
      uint64_t v20 = sub_1000372EC( &qword_1009B3728,  &qword_1009B3720,  (uint64_t)&protocol conformance descriptor for SessionMessage<A>.MessageError);
      uint64_t v21 = swift_allocError(v19, v20, 0LL, 0LL);
      *uint64_t v22 = 0;
      return swift_willThrow(v21);
    }
  }

  return result;
}

uint64_t sub_1005802E0(uint64_t a1, void *a2, void *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  uint64_t v133 = type metadata accessor for BeaconSharingSessionContext(0LL);
  __chkstk_darwin(v133);
  id v134 = (char *)&v122 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v127 = sub_100004AEC(&qword_1009A48E8);
  uint64_t v126 = *(void *)(v127 - 8);
  __chkstk_darwin(v127);
  uint64_t v125 = (char *)&v122 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100004AEC(&qword_1009A48F0);
  uint64_t v129 = *(void *)(v14 - 8);
  uint64_t v130 = v14;
  __chkstk_darwin(v14);
  uint64_t v128 = (char *)&v122 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v122 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v143 = 0LL;
  uint64_t v144 = 0LL;
  BOOL v136 = a2;
  id v19 = objc_msgSend(a3, "pushIdentifiers", swift_bridgeObjectRetain(a2).n128_f64[0]);
  uint64_t v20 = sub_100004AEC(&qword_1009AED50);
  uint64_t v21 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v19,  &type metadata for String,  v20,  &protocol witness table for String);

  uint64_t v22 = *(void *)(v21 + 16);
  uint64_t v135 = v6;
  uint64_t v131 = a4;
  uint64_t v132 = a5;
  if (!v22 || (uint64_t v23 = sub_10030CF14(a1, (uint64_t)v136), (v24 & 1) == 0))
  {
    swift_bridgeObjectRelease();
LABEL_11:
    uint64_t v31 = swift_bridgeObjectRelease();
    goto LABEL_12;
  }

  uint64_t v25 = *(void **)(*(void *)(v21 + 56) + 8 * v23);
  swift_bridgeObjectRetain(v25);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if (!v25[2]) {
    goto LABEL_11;
  }
  uint64_t v26 = v25[4];
  uint64_t v27 = v25[5];
  swift_bridgeObjectRetain(v27);
  swift_bridgeObjectRelease();
  uint64_t v28 = Data.init(base64Encoded:options:)(v26, v27, 0LL);
  unint64_t v30 = v29;
  uint64_t v31 = swift_bridgeObjectRelease();
  if (v30 >> 60 != 15)
  {
    static String.Encoding.utf8.getter(v31);
    uint64_t v124 = v28;
    uint64_t v143 = String.init(data:encoding:)(v28, v30, v18);
    uint64_t v144 = v32;
    if (qword_10099B178 != -1) {
      swift_once(&qword_10099B178, sub_100189C64);
    }
    uint64_t v33 = type metadata accessor for Logger(0LL);
    uint64_t v34 = sub_10000A720(v33, (uint64_t)qword_100A2A290);
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v38 = (void *)swift_slowAlloc(32LL, -1LL);
      uint64_t v139 = v38;
      *(_DWORD *)uint64_t v37 = 136315138;
      uint64_t v123 = v37 + 4;
      swift_beginAccess(&v143, v137, 0LL, 0LL);
      uint64_t v141 = v143;
      v142[0] = v144;
      swift_bridgeObjectRetain(v144);
      uint64_t v39 = sub_100004AEC(&qword_1009A34B0);
      uint64_t v40 = String.init<A>(describing:)(&v141, v39);
      uint64_t v141 = sub_1003F11D4(v40, v41, (uint64_t *)&v139);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v141, v142, v123, v37 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "liveLocations: handle provided from server %s", v37, 0xCu);
      swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    sub_1000182F0(v124, v30);
    goto LABEL_18;
  }

uint64_t sub_1005811B4(uint64_t a1)
{
  return sub_100581FE8(a1, qword_100A2AD10, 0xD000000000000018LL, 0x8000000100868EF0LL);
}

void sub_1005811D8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v11, v12);
  uint64_t v13 = (int *)type metadata accessor for SecureLocationsCachedSharedKey(0LL);
  uint64_t v14 = (uint64_t *)(v1 + v13[5]);
  uint64_t v15 = *v14;
  uint64_t v16 = v14[1];
  swift_bridgeObjectRetain(v16);
  String.hash(into:)(a1, v15, v16);
  swift_bridgeObjectRelease();
  uint64_t v17 = (uint64_t *)(v2 + v13[6]);
  unint64_t v18 = v17[1];
  if (v18 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v19 = *v17;
    Hasher._combine(_:)(1u);
    sub_10001736C(v19, v18);
    Data.hash(into:)(a1, v19, v18);
    sub_1000182F0(v19, v18);
  }

  uint64_t v20 = (uint64_t *)(v2 + v13[7]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v22 = *v20;
    Hasher._combine(_:)(1u);
    sub_10001736C(v22, v21);
    Data.hash(into:)(a1, v22, v21);
    sub_1000182F0(v22, v21);
  }

  uint64_t v23 = (unsigned __int8 *)(v2 + v13[8]);
  uint64_t v24 = *((void *)v23 + 2);
  if (v24)
  {
    uint64_t v36 = *((void *)v23 + 1);
    uint64_t v25 = v10;
    uint64_t v26 = v4;
    uint64_t v27 = v5;
    uint64_t v28 = v7;
    Swift::UInt v29 = *v23;
    Hasher._combine(_:)(1u);
    Swift::UInt v30 = v29;
    uint64_t v7 = v28;
    uint64_t v5 = v27;
    uint64_t v4 = v26;
    uint64_t v10 = v25;
    Hasher._combine(_:)(v30);
    swift_bridgeObjectRetain(v24);
    String.hash(into:)(a1, v36, v24);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v31 = (uint64_t *)(v2 + v13[9]);
  uint64_t v32 = v31[1];
  if (v32)
  {
    uint64_t v33 = *v31;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v32);
    String.hash(into:)(a1, v33, v32);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  Hasher._combine(_:)(*(void *)(v2 + v13[10]));
  sub_10001581C(v2 + v13[11], (uint64_t)v10, (uint64_t *)&unk_10099D720);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1LL, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    uint64_t v34 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v34);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

uint64_t sub_100581544(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10058157C + 4 * byte_100807620[a1]))( 0x696669746E656469LL,  0xEA00000000007265LL);
}

uint64_t sub_10058157C()
{
  return 0x6449794D646E6966LL;
}

unint64_t sub_100581594()
{
  return 0xD000000000000015LL;
}

unint64_t sub_1005815F4()
{
  return 0xD000000000000013LL;
}

void sub_10058160C()
{
}

uint64_t sub_10058162C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B3808);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1005974D0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SecureLocationsCachedSharedKey.CodingKeys,  &type metadata for SecureLocationsCachedSharedKey.CodingKeys,  v11,  v9,  v10);
  LOBYTE(v31) = 0;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v31, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = (int *)type metadata accessor for SecureLocationsCachedSharedKey(0LL);
    uint64_t v15 = (uint64_t *)(v3 + v14[5]);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    LOBYTE(v31) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v31, v5);
    __int128 v31 = *(_OWORD *)(v3 + v14[6]);
    char v33 = 2;
    unint64_t v18 = sub_10017EB68();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v31, &v33, v5, &type metadata for PrivateKey, v18);
    __int128 v31 = *(_OWORD *)(v3 + v14[7]);
    char v33 = 3;
    unint64_t v19 = sub_10017F344();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v31, &v33, v5, &type metadata for HashedAdvertisement, v19);
    uint64_t v20 = (__int128 *)(v3 + v14[8]);
    uint64_t v21 = *((void *)v20 + 2);
    __int128 v31 = *v20;
    uint64_t v32 = v21;
    char v33 = 4;
    unint64_t v22 = sub_100040098();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v31, &v33, v5, &type metadata for MessagingDestination, v22);
    uint64_t v23 = (uint64_t *)(v3 + v14[9]);
    uint64_t v24 = *v23;
    uint64_t v25 = v23[1];
    LOBYTE(v31) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v24, v25, &v31, v5);
    *(void *)&__int128 v31 = *(void *)(v3 + v14[10]);
    char v33 = 6;
    unint64_t v26 = sub_100590F10();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v31, &v33, v5, &type metadata for SecureLocationsIndex, v26);
    uint64_t v27 = v3 + v14[11];
    LOBYTE(v31) = 7;
    uint64_t v28 = type metadata accessor for Date(0LL);
    uint64_t v29 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v27, &v31, v5, v28, v29);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100581930@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v44 = a2;
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v43 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v47 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v45 = (uint64_t *)((char *)&v43 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v49 = sub_100004AEC(&qword_1009B37F8);
  uint64_t v8 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for SecureLocationsCachedSharedKey(0LL);
  uint64_t v12 = (int *)__chkstk_darwin(v11);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  os_log_type_t v56 = &v14[v12[6]];
  *(_OWORD *)os_log_type_t v56 = xmmword_1007E7660;
  uint64_t v50 = &v14[v12[7]];
  *(_OWORD *)uint64_t v50 = xmmword_1007E7660;
  uint64_t v15 = &v14[v12[8]];
  *(void *)uint64_t v15 = 0LL;
  *((void *)v15 + 1) = 0LL;
  uint64_t v51 = v15;
  *((void *)v15 + 2) = 0LL;
  uint64_t v16 = &v14[v12[9]];
  *(void *)uint64_t v16 = 0LL;
  *((void *)v16 + 1) = 0LL;
  uint64_t v54 = v16;
  uint64_t v46 = v12;
  uint64_t v17 = (uint64_t)&v14[v12[11]];
  uint64_t v18 = type metadata accessor for Date(0LL);
  unint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL);
  uint64_t v52 = v17;
  v19(v17, 1LL, 1LL, v18);
  uint64_t v21 = a1[3];
  uint64_t v20 = a1[4];
  uint64_t v53 = a1;
  sub_100012ED8(a1, v21);
  unint64_t v22 = sub_1005974D0();
  os_log_type_t v48 = v10;
  uint64_t v23 = (uint64_t)v55;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SecureLocationsCachedSharedKey.CodingKeys,  &type metadata for SecureLocationsCachedSharedKey.CodingKeys,  v22,  v21,  v20);
  if (v23)
  {
    uint64_t v27 = v50;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v53);
    uint64_t v28 = v52;
    sub_1000182F0(*(void *)v56, *((void *)v56 + 1));
    sub_1000182F0(*(void *)v27, *((void *)v27 + 1));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    return sub_100015794(v28, (uint64_t *)&unk_10099D720);
  }

  else
  {
    uint64_t v24 = v8;
    uint64_t v55 = v5;
    LOBYTE(v57) = 0;
    uint64_t v25 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    unint64_t v26 = v45;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v45, v6, &v57, v49, v6, v25);
    (*(void (**)(char *, void *, uint64_t))(v47 + 32))(v14, v26, v6);
    LOBYTE(v57) = 1;
    uint64_t v30 = KeyedDecodingContainer.decode(_:forKey:)(&v57, v49);
    __int128 v31 = v54;
    uint64_t v32 = (uint64_t *)&v14[v46[5]];
    *uint64_t v32 = v30;
    v32[1] = v33;
    char v59 = 2;
    unint64_t v34 = sub_10017EB24();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for PrivateKey,  &v59,  v49,  &type metadata for PrivateKey,  v34);
    uint64_t v36 = v50;
    uint64_t v35 = v51;
    *(_OWORD *)os_log_type_t v56 = v57;
    char v59 = 3;
    unint64_t v37 = sub_10017F300();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for HashedAdvertisement,  &v59,  v49,  &type metadata for HashedAdvertisement,  v37);
    *(_OWORD *)uint64_t v36 = v57;
    char v59 = 4;
    unint64_t v38 = sub_100040120();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for MessagingDestination,  &v59,  v49,  &type metadata for MessagingDestination,  v38);
    uint64_t v39 = v58;
    *(_OWORD *)uint64_t v35 = v57;
    *((void *)v35 + 2) = v39;
    LOBYTE(v57) = 5;
    *(void *)__int128 v31 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v57, v49);
    *((void *)v31 + 1) = v40;
    char v59 = 6;
    unint64_t v41 = sub_100590ECC();
    KeyedDecodingContainer.decode<A>(_:forKey:)( &v57,  &type metadata for SecureLocationsIndex,  &v59,  v49,  &type metadata for SecureLocationsIndex,  v41);
    *(void *)&v14[v46[10]] = v57;
    LOBYTE(v57) = 7;
    uint64_t v42 = sub_100007864( &qword_10099DA70,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v18, &v57, v49, v18, v42);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v48, v49);
    sub_1000D4D50((uint64_t)v55, v52, (uint64_t *)&unk_10099D720);
    sub_10001DC4C((uint64_t)v14, v44, type metadata accessor for SecureLocationsCachedSharedKey);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v53);
    return sub_100018C68((uint64_t)v14, type metadata accessor for SecureLocationsCachedSharedKey);
  }

uint64_t sub_100581EA4()
{
  return sub_100581544(*v0);
}

uint64_t sub_100581EAC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10059494C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100581ED0(uint64_t a1)
{
  unint64_t v2 = sub_1005974D0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100581EF8(uint64_t a1)
{
  unint64_t v2 = sub_1005974D0();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_100581F20()
{
  return Hasher._finalize()();
}

Swift::Int sub_100581F60(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_100581F98@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_100581930(a1, a2);
}

uint64_t sub_100581FAC(void *a1)
{
  return sub_10058162C(a1);
}

uint64_t sub_100581FC4(uint64_t a1)
{
  return sub_100581FE8(a1, qword_100A2AD28, 0xD000000000000012LL, 0x800000010085CF10LL);
}

uint64_t sub_100581FE8(uint64_t a1, uint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v13 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000A8AC(v9, a2);
  sub_10000A720(v7, (uint64_t)a2);
  type metadata accessor for BeaconStore(0LL);
  sub_1004E6208((uint64_t)v11);
  URL.appendingPathComponent(_:isDirectory:)(a3, a4, 1LL);
  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1005820B4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B36D0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_100590E88();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SecureLocationsCachedSharingKey.CodingKeys,  &type metadata for SecureLocationsCachedSharingKey.CodingKeys,  v11,  v9,  v10);
  LOBYTE(v25[0]) = 0;
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v13 = sub_100007864( &qword_1009A8AC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, v25, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = (int *)type metadata accessor for SecureLocationsCachedSharingKey(0LL);
    uint64_t v15 = v3 + v14[5];
    LOBYTE(v25[0]) = 1;
    uint64_t v16 = type metadata accessor for UUID(0LL);
    uint64_t v17 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, v25, v5, v16, v17);
    uint64_t v18 = (_OWORD *)(v3 + v14[6]);
    __int128 v19 = v18[1];
    v25[0] = *v18;
    v25[1] = v19;
    void v25[2] = v18[2];
    char v24 = 2;
    unint64_t v20 = sub_1004E446C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v24, v5, &type metadata for DiversifiedRootKeys, v20);
    *(void *)&v25[0] = *(void *)(v3 + v14[7]);
    char v24 = 3;
    unint64_t v21 = sub_100590F10();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v24, v5, &type metadata for SecureLocationsIndex, v21);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1005822D0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v33 = a2;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v37 = *(void *)(v4 - 8);
  uint64_t v38 = v4;
  __chkstk_darwin(v4);
  unint64_t v34 = (uint64_t *)((char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (uint64_t *)((char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = sub_100004AEC(&qword_1009B36B8);
  uint64_t v35 = *(void *)(v10 - 8);
  uint64_t v36 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = type metadata accessor for SecureLocationsCachedSharingKey(0LL);
  __chkstk_darwin(v39);
  uint64_t v14 = (char *)&v33 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B580 != -1) {
    swift_once(&qword_10099B580, sub_100581FC4);
  }
  uint64_t v15 = sub_10000A720(v6, (uint64_t)qword_100A2AD28);
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v14, v15, v6);
  uint64_t v16 = a1;
  uint64_t v17 = a1[3];
  uint64_t v18 = v16[4];
  uint64_t v40 = v16;
  sub_100012ED8(v16, v17);
  unint64_t v19 = sub_100590E88();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SecureLocationsCachedSharingKey.CodingKeys,  &type metadata for SecureLocationsCachedSharingKey.CodingKeys,  v19,  v17,  v18);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v40);
    return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v14, v6);
  }

  else
  {
    LOBYTE(v41[0]) = 0;
    uint64_t v20 = sub_100007864( &qword_1009A8AB8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v21 = v36;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v9, v6, v41, v36, v6, v20);
    (*(void (**)(char *, void *, uint64_t))(v7 + 40))(v14, v9, v6);
    LOBYTE(v41[0]) = 1;
    uint64_t v22 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v23 = v34;
    uint64_t v24 = v21;
    uint64_t v25 = v38;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v34, v38, v41, v24, v38, v22);
    unint64_t v26 = v23;
    uint64_t v27 = v39;
    (*(void (**)(char *, void *, uint64_t))(v37 + 32))(&v14[*(int *)(v39 + 20)], v26, v25);
    char v42 = 2;
    unint64_t v28 = sub_1004E43E4();
    KeyedDecodingContainer.decode<A>(_:forKey:)( v41,  &type metadata for DiversifiedRootKeys,  &v42,  v24,  &type metadata for DiversifiedRootKeys,  v28);
    uint64_t v29 = &v14[*(int *)(v27 + 24)];
    __int128 v30 = v41[1];
    *(_OWORD *)uint64_t v29 = v41[0];
    *((_OWORD *)v29 + 1) = v30;
    *((_OWORD *)v29 + 2) = v41[2];
    char v42 = 3;
    unint64_t v31 = sub_100590ECC();
    KeyedDecodingContainer.decode<A>(_:forKey:)( v41,  &type metadata for SecureLocationsIndex,  &v42,  v24,  &type metadata for SecureLocationsIndex,  v31);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v12, v24);
    *(void *)&v14[*(int *)(v27 + 28)] = *(void *)&v41[0];
    sub_10001DC4C((uint64_t)v14, v33, type metadata accessor for SecureLocationsCachedSharingKey);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v40);
    return sub_100018C68((uint64_t)v14, type metadata accessor for SecureLocationsCachedSharingKey);
  }

uint64_t sub_100582750()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10058278C + 4 * byte_100807628[*v0]))( 0x614264726F636572LL,  0xED00004C52556573LL);
}

uint64_t sub_10058278C()
{
  return 0x696669746E656469LL;
}

uint64_t sub_1005827A8()
{
  return 0x4B676E6972616873LL;
}

uint64_t sub_1005827C8()
{
  return 0x6E49646572616873LL;
}

uint64_t sub_1005827E8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_100594C84(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10058280C(uint64_t a1)
{
  unint64_t v2 = sub_100590E88();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100582834(uint64_t a1)
{
  unint64_t v2 = sub_100590E88();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10058285C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005822D0(a1, a2);
}

uint64_t sub_100582870(void *a1)
{
  return sub_1005820B4(a1);
}

uint64_t sub_100582884(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100594530(a2, a3, a4);
}

uint64_t sub_100582894(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a2;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v27 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v25 = *(void *)(v7 - 8);
  uint64_t v26 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1005830F4();
  char v14 = sub_100582B1C();
  sub_100004AB0();
  (*(void (**)(char *, void, uint64_t))(v11 + 104))( v13,  enum case for DispatchQoS.QoSClass.default(_:),  v10);
  uint64_t v15 = (void *)static OS_dispatch_queue.global(qos:)(v13);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v16 = swift_allocObject(&unk_100964A78, 33LL, 7LL);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = v24;
  *(void *)(v16 + 24) = a3;
  *(_BYTE *)(v16 + 32) = v14 & 1;
  aBlock[4] = sub_1000DEC6C;
  void aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100964A90;
  uint64_t v17 = _Block_copy(aBlock);
  uint64_t v18 = swift_retain();
  static DispatchQoS.unspecified.getter(v18);
  unint64_t v28 = _swiftEmptyArrayStorage;
  uint64_t v19 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v21 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v20, v21, v4, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v6, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v9, v26);
  return swift_release();
}

uint64_t sub_100582B1C()
{
  uint64_t v0 = sub_100004AEC(&qword_1009A2430);
  __chkstk_darwin(v0);
  unint64_t v2 = (char *)&aBlock[-1] - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&aBlock[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&aBlock[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_retain();
  sub_1004F730C();
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100153864);
  swift_release();
  swift_release();
  if (LOBYTE(aBlock[0]) == 1)
  {
    sub_100582F48((uint64_t)v5);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) != 1)
    {
      (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
      swift_retain();
      sub_100576BD4((uint64_t)v2);
      swift_release();
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      uint64_t v22 = type metadata accessor for KeyAlignmentRecord(0LL);
      BOOL v21 = (*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 48LL))(v2, 1LL, v22) != 1;
      sub_100015794((uint64_t)v2, &qword_1009A2430);
      return v21;
    }

    sub_100015794((uint64_t)v5, &qword_10099D8A0);
    return 0LL;
  }

  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v10 = type metadata accessor for Logger(0LL);
  uint64_t v11 = sub_10000A720(v10, (uint64_t)qword_100A2AE08);
  uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
  os_log_type_t v13 = static os_log_type_t.default.getter(v12);
  if (os_log_type_enabled(v12, v13))
  {
    char v14 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)char v14 = 0;
    _os_log_impl((void *)&_mh_execute_header, v12, v13, "SecureLocationSetup: BeaconStore is not available", v14, 2u);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  if (qword_10099B850 != -1) {
    swift_once(&qword_10099B850, sub_1006BAC84);
  }
  uint64_t v15 = qword_100A2B210;
  uint64_t v16 = *(dispatch_queue_s **)(qword_100A2B210 + 16);
  uint64_t v17 = (void *)swift_allocObject(&unk_100964C58, 40LL, 7LL);
  v17[2] = v15;
  void v17[3] = 0xD000000000000017LL;
  void v17[4] = 0x8000000100868ED0LL;
  uint64_t v18 = swift_allocObject(&unk_100964C80, 32LL, 7LL);
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = sub_10033A57C;
  *(void *)(v18 + 24) = v17;
  aBlock[4] = sub_100154688;
  void aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_100025BD4;
  aBlock[3] = &unk_100964C98;
  uint64_t v19 = _Block_copy(aBlock);
  swift_retain_n(v15, 2LL);
  swift_retain();
  swift_release();
  dispatch_sync(v16, v19);
  _Block_release(v19);
  LOBYTE(vswift_weakDestroy(v0 + 16) = swift_isEscapingClosureAtFileLocation(v18, "", 110LL, 308LL, 38LL, 1LL);
  swift_release();
  swift_release();
  uint64_t result = swift_release();
  if ((v16 & 1) == 0)
  {
    swift_retain();
    sub_1006BDED0(0xBu, 0xD000000000000017LL, 0x8000000100868ED0LL);
    swift_release();
    return 0LL;
  }

  __break(1u);
  return result;
}

uint64_t sub_100582F48@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v13 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_retain();
  uint64_t v6 = sub_1005069CC();
  swift_release();
  uint64_t v7 = v6[2];
  if (v7)
  {
    if (v7 == 1
      || (type metadata accessor for Transaction(0LL),
          uint64_t result = static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.removeDuplicateVirtualMeOBRs",  58LL,  2LL,  sub_1005959F8),  v6[2]))
    {
      sub_10001DC4C( (uint64_t)v6 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80)),  (uint64_t)v5,  type metadata accessor for OwnedBeaconRecord);
      swift_bridgeObjectRelease();
      uint64_t v9 = &v5[*(int *)(v2 + 20)];
      uint64_t v10 = type metadata accessor for UUID(0LL);
      uint64_t v11 = *(void *)(v10 - 8);
      (*(void (**)(uint64_t, char *, uint64_t))(v11 + 16))(a1, v9, v10);
      sub_100018C68((uint64_t)v5, type metadata accessor for OwnedBeaconRecord);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a1, 0LL, 1LL, v10);
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    uint64_t v12 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(a1, 1LL, 1LL, v12);
    return swift_bridgeObjectRelease();
  }

  return result;
}

void sub_1005830F4()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (char *)v45 - v7;
  uint64_t v9 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (void *)((char *)v45 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = *(void **)(v1 + 48);
  *uint64_t v12 = v13;
  (*(void (**)(void *, void, uint64_t))(v10 + 104))(v12, enum case for DispatchPredicate.onQueue(_:), v9);
  id v14 = v13;
  char v15 = _dispatchPreconditionTest(_:)(v12);
  (*(void (**)(void *, uint64_t))(v10 + 8))(v12, v9);
  if ((v15 & 1) != 0)
  {
    if (qword_10099B5E8 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B5E8, sub_1005C66A4);
LABEL_3:
  swift_retain();
  char v16 = sub_1005C7C90();
  swift_release();
  if ((v16 & 1) != 0)
  {
    swift_retain();
    uint64_t v17 = (char *)sub_1005069CC();
    swift_release();
    if (!*((void *)v17 + 2))
    {
      swift_bridgeObjectRelease();
      sub_100583754();
      return;
    }

    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    uint64_t v19 = sub_10000A720(v18, (uint64_t)qword_100A2AE08);
    swift_bridgeObjectRetain(v17);
    BOOL v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.default.getter(v21);
    BOOL v23 = os_log_type_enabled(v21, v22);
    uint64_t v48 = v1;
    if (v23)
    {
      uint64_t v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v24 = 134217984;
      unint64_t v50 = *((void *)v17 + 2);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v24 + 4, v24 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "SetupVirtualMeDevice: Found OBRs %ld", v24, 0xCu);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease();
    }

    if (*((void *)v17 + 2))
    {
      uint64_t v30 = type metadata accessor for OwnedBeaconRecord(0LL);
      uint64_t v31 = *(unsigned __int8 *)(*(void *)(v30 - 8) + 80LL);
      uint64_t v32 = *(void (**)(char *, char *, uint64_t))(v3 + 16);
      v32(v8, &v17[*(int *)(v30 + 20) + ((v31 + 32) & ~v31)], v2);
      uint64_t v47 = v8;
      uint64_t v33 = ((uint64_t (*)(char *, char *, uint64_t))v32)(v6, v8, v2);
      unint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
      os_log_type_t v35 = static os_log_type_t.default.getter(v34);
      if (os_log_type_enabled(v34, v35))
      {
        uint64_t v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v37 = swift_slowAlloc(32LL, -1LL);
        unint64_t v50 = v37;
        v45[1] = v19;
        uint64_t v46 = v2;
        *(_DWORD *)uint64_t v36 = 136315138;
        uint64_t v38 = UUID.uuidString.getter(v37);
        uint64_t v49 = sub_1003F11D4(v38, v39, (uint64_t *)&v50);
        uint64_t v2 = v46;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v49, &v50, v36 + 4, v36 + 12);
        swift_bridgeObjectRelease();
        uint64_t v3 = *(void *)(v3 + 8);
        ((void (*)(char *, uint64_t))v3)(v6, v2);
        _os_log_impl((void *)&_mh_execute_header, v34, v35, "SetupVirtualMeDevice: Found existing OBR %s", v36, 0xCu);
        swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v37, -1LL, -1LL);
        swift_slowDealloc(v36, -1LL, -1LL);
      }

      else
      {
        uint64_t v3 = *(void *)(v3 + 8);
        ((void (*)(char *, uint64_t))v3)(v6, v2);
      }

      uint64_t v8 = v47;
      sub_100584314((uint64_t)v47);
      unint64_t v40 = *((void *)v17 + 2);
      if (v40 < 2)
      {
        ((void (*)(char *, uint64_t))v3)(v8, v2);
        swift_bridgeObjectRelease();
        return;
      }

      swift_bridgeObjectRetain(v17);
      char v42 = (os_log_s *)Logger.logObject.getter(v41);
      os_log_type_t v43 = static os_log_type_t.error.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)uint64_t v44 = 134217984;
        swift_bridgeObjectRelease();
        unint64_t v50 = v40;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v50, &v51, v44 + 4, v44 + 12);
        swift_bridgeObjectRelease();
        _os_log_impl( (void *)&_mh_execute_header,  v42,  v43,  "SetupVirtualMeDevice: Anomalous condition - Duplicate VirtualMeDevice records found. Count %ld ",  v44,  0xCu);
        swift_slowDealloc(v44, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v17, 2LL);
      }

      type metadata accessor for Transaction(0LL);
      static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.removeDuplicateVirtualMeOBRs",  58LL,  2LL,  sub_1005959F8);
      if (qword_10099B850 == -1) {
        goto LABEL_26;
      }
    }

    else
    {
      __break(1u);
    }

    swift_once(&qword_10099B850, sub_1006BAC84);
LABEL_26:
    swift_retain();
    sub_1006BDED0(2u, 0LL, 0LL);
    swift_release();
    ((void (*)(char *, uint64_t))v3)(v8, v2);
    return;
  }

  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v25 = type metadata accessor for Logger(0LL);
  uint64_t v26 = sub_10000A720(v25, (uint64_t)qword_100A2AE08);
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.default.getter(v27);
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "SetupVirtualMeDevice: Not a LocationPublishing device. Not setting up OBR",  v29,  2u);
    swift_slowDealloc(v29, -1LL, -1LL);
  }
}

void sub_100583754()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v14 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = *(void **)(v1 + 48);
  *uint64_t v5 = v6;
  (*(void (**)(void *, void, uint64_t))(v3 + 104))(v5, enum case for DispatchPredicate.onQueue(_:), v2);
  id v7 = v6;
  LOBYTE(v6) = _dispatchPreconditionTest(_:)(v5);
  (*(void (**)(void *, uint64_t))(v3 + 8))(v5, v2);
  if ((v6 & 1) != 0)
  {
    if (qword_10099B5E8 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B5E8, sub_1005C66A4);
LABEL_3:
  swift_retain();
  char v8 = sub_1005C7C90();
  swift_release();
  if ((v8 & 1) != 0)
  {
    type metadata accessor for Transaction(0LL);
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.secureLocations.createVirtualMeOBR",  64LL,  2LL,  sub_1005959A0);
  }

  else
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    uint64_t v10 = sub_10000A720(v9, (uint64_t)qword_100A2AE08);
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "SetupVirtualMeDevice: Not a LocationPublishing device. Not Creating VirtualMeDevice OBR",  v13,  2u);
      swift_slowDealloc(v13, -1LL, -1LL);
    }
  }

void sub_100583944(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v4);
  uint64_t v45 = (uint64_t)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v40 = (char *)&v39 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchTime(0LL);
  uint64_t v42 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  os_log_type_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v39 - v13;
  uint64_t v15 = swift_allocBox(v4);
  uint64_t v43 = v16;
  uint64_t v44 = v7;
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56);
  uint64_t v46 = v6;
  v17(v16, 1LL, 1LL, v6);
  uint64_t v18 = dispatch_group_create();
  dispatch_group_enter(v18);
  uint64_t v41 = a2;
  uint64_t v19 = (void *)swift_allocObject(&unk_100964B40, 40LL, 7LL);
  v19[2] = v18;
  v19[3] = v15;
  v19[4] = a1;
  swift_retain();
  uint64_t v20 = v18;
  uint64_t v47 = v15;
  swift_retain();
  swift_retain();
  sub_10051E918((uint64_t)sub_1005959EC, (unint64_t)v19);
  swift_release();
  uint64_t v21 = swift_release();
  static DispatchTime.now()(v21);
  + infix(_:_:)(v12, 120.0);
  os_log_type_t v22 = *(void (**)(char *, uint64_t))(v42 + 8);
  v22(v12, v9);
  uint64_t v23 = OS_dispatch_group.wait(timeout:)(v14) & 1;
  v22(v14, v9);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v23, 1LL) & 1) != 0)
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    uint64_t v25 = sub_10000A720(v24, (uint64_t)qword_100A2AE08);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      os_log_type_t v28 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v28 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "SetupVirtualMeDevice: Timed out waiting to create OBR",  v28,  2u);
      swift_slowDealloc(v28, -1LL, -1LL);
    }
  }

  uint64_t v29 = v43;
  swift_beginAccess(v43, v48, 0LL, 0LL);
  uint64_t v30 = v45;
  sub_10001581C(v29, v45, &qword_10099D8A0);
  uint64_t v31 = v44;
  uint64_t v32 = v46;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v44 + 48))(v30, 1LL, v46) == 1)
  {
    sub_100015794(v30, &qword_10099D8A0);
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v33 = type metadata accessor for Logger(0LL);
    uint64_t v34 = sub_10000A720(v33, (uint64_t)qword_100A2AE08);
    os_log_type_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.default.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "SetupVirtualMeDevice: No OBR UUID. Not creating/checking for KeyAlignmentRecord",  v37,  2u);
      swift_slowDealloc(v37, -1LL, -1LL);
      swift_release();
    }

    else
    {
      swift_release();
    }
  }

  else
  {
    uint64_t v38 = (uint64_t)v40;
    (*(void (**)(char *, uint64_t, uint64_t))(v31 + 32))(v40, v30, v32);
    sub_100584314(v38);

    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v38, v32);
    swift_release();
  }

void sub_100583D84(uint64_t a1, dispatch_group_s *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v52 = a4;
  uint64_t v7 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v49 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v49 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v49 - v14;
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  __chkstk_darwin(v16);
  uint64_t v18 = (uint64_t *)((char *)&v49 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v19 = swift_projectBox(a3);
  sub_10001581C(a1, (uint64_t)v18, (uint64_t *)&unk_1009B0830);
  if (swift_getEnumCaseMultiPayload(v18, v16) == 1)
  {
    uint64_t v20 = *v18;
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v21 = type metadata accessor for Logger(0LL);
    sub_10000A720(v21, (uint64_t)qword_100A2AE08);
    swift_errorRetain(v20);
    uint64_t v22 = swift_errorRetain(v20);
    uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
    os_log_type_t v24 = static os_log_type_t.error.getter(v23);
    if (os_log_type_enabled(v23, v24))
    {
      uint64_t v25 = a2;
      uint64_t v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v27 = swift_slowAlloc(32LL, -1LL);
      v53[0] = v27;
      *(_DWORD *)uint64_t v26 = 136315138;
      uint64_t v54 = v20;
      swift_errorRetain(v20);
      uint64_t v28 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v29 = String.init<A>(describing:)(&v54, v28);
      uint64_t v54 = sub_1003F11D4(v29, v30, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v20);
      swift_errorRelease(v20);
      _os_log_impl( (void *)&_mh_execute_header,  v23,  v24,  "SetupVirtualMeDevice: Failed to create VirtualMeDevice record %s",  v26,  0xCu);
      swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1LL, -1LL);
      uint64_t v31 = v26;
      a2 = v25;
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v20);
      swift_errorRelease(v20);
    }

    if (qword_10099B850 != -1) {
      swift_once(&qword_10099B850, sub_1006BAC84);
    }
    v53[0] = v20;
    swift_errorRetain(v20);
    swift_retain();
    uint64_t v42 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v43 = String.init<A>(describing:)(v53, v42);
    sub_1006BDED0(1u, v43, v44);
    swift_release();
    swift_bridgeObjectRelease();
    swift_errorRelease(v20);
  }

  else
  {
    uint64_t v51 = v19;
    sub_10002218C((uint64_t)v18, (uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v32 = type metadata accessor for Logger(0LL);
    sub_10000A720(v32, (uint64_t)qword_100A2AE08);
    uint64_t v33 = sub_10001DC4C((uint64_t)v15, (uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v35 = static os_log_type_t.default.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      uint64_t v36 = swift_slowAlloc(12LL, -1LL);
      unint64_t v50 = a2;
      uint64_t v37 = (uint8_t *)v36;
      uint64_t v38 = swift_slowAlloc(32LL, -1LL);
      v53[0] = v38;
      *(_DWORD *)uint64_t v37 = 136315138;
      uint64_t v49 = v37 + 4;
      uint64_t v39 = UUID.uuidString.getter(v38);
      uint64_t v54 = sub_1003F11D4(v39, v40, v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v49, v37 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v34,  v35,  "SetupVirtualMeDevice: VirtualMeDevice OBR created %s",  v37,  0xCu);
      swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1LL, -1LL);
      uint64_t v41 = v37;
      a2 = v50;
      swift_slowDealloc(v41, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
    }

    uint64_t v45 = &v15[*(int *)(v10 + 20)];
    uint64_t v46 = type metadata accessor for UUID(0LL);
    uint64_t v47 = *(void *)(v46 - 8);
    (*(void (**)(char *, char *, uint64_t))(v47 + 16))(v9, v45, v46);
    sub_100018C68((uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v47 + 56))(v9, 0LL, 1LL, v46);
    uint64_t v48 = v51;
    swift_beginAccess(v51, v53, 1LL, 0LL);
    sub_1000D4D50((uint64_t)v9, v48, &qword_10099D8A0);
  }

  Transaction.capture()();
  dispatch_group_leave(a2);
}

void sub_100584314(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009A2430);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = *(void **)(v2 + 48);
  *uint64_t v14 = v15;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  id v16 = v15;
  LOBYTE(v15) = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if ((v15 & 1) == 0)
  {
    __break(1u);
LABEL_10:
    swift_once(&qword_10099B5E0, sub_1005C6624);
    goto LABEL_5;
  }

  swift_retain();
  sub_100576BD4((uint64_t)v10);
  swift_release();
  uint64_t v17 = type metadata accessor for KeyAlignmentRecord(0LL);
  int v18 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48LL))(v10, 1LL, v17);
  sub_100015794((uint64_t)v10, &qword_1009A2430);
  if (v18 == 1)
  {
    uint64_t v19 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v19);
    *(&v28 - 2) = a1;
    *(&v28 - 1) = v2;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.secureLocations.createVirtualMeKeyAlignment",  73LL,  2LL,  sub_100595988);
    return;
  }

  if (qword_10099B5E0 != -1) {
    goto LABEL_10;
  }
LABEL_5:
  uint64_t v20 = type metadata accessor for Logger(0LL);
  sub_10000A720(v20, (uint64_t)qword_100A2AE08);
  uint64_t v21 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    os_log_type_t v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v25 = swift_slowAlloc(32LL, -1LL);
    v30[0] = v25;
    *(_DWORD *)os_log_type_t v24 = 136315138;
    uint64_t v26 = UUID.uuidString.getter(v25);
    uint64_t v29 = sub_1003F11D4(v26, v27, v30);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, v30, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "SetupVirtualMeDevice: KeyAlignmentRecord already exists for VirtualMeDevice %s",  v24,  0xCu);
    swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }
}

uint64_t sub_100584680(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v34 = a3;
  uint64_t v37 = a2;
  uint64_t v4 = type metadata accessor for DispatchTime(0LL);
  uint64_t v35 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v34 - v8;
  uint64_t v10 = (int *)type metadata accessor for KeyAlignmentRecord(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (_OWORD *)((char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v34 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  UUID.init()(v15);
  int v18 = (char *)v12 + v10[5];
  uint64_t v36 = v14;
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v14 + 16);
  v19(v18, v17, v13);
  uint64_t v20 = (char *)v12 + v10[6];
  uint64_t v21 = v37;
  uint64_t v37 = v13;
  v19(v20, (char *)v21, v13);
  static Date.trustedNow.getter((uint64_t)v12 + v10[8]);
  *uint64_t v12 = xmmword_1007E4480;
  *(void *)((char *)v12 + v10[7]) = 1LL;
  uint64_t v22 = dispatch_group_create();
  dispatch_group_enter(v22);
  uint64_t v23 = *(void *)(v34 + 32);
  os_log_type_t v24 = v22;
  swift_retain();
  swift_retain();
  sub_1005604A0((uint64_t)v12, 0, v23, v24, a1);
  swift_release();

  uint64_t v25 = swift_release();
  static DispatchTime.now()(v25);
  + infix(_:_:)(v7, 120.0);
  uint64_t v26 = *(void (**)(char *, uint64_t))(v35 + 8);
  v26(v7, v4);
  uint64_t v27 = OS_dispatch_group.wait(timeout:)(v9) & 1;
  v26(v9, v4);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v27, 1LL) & 1) != 0)
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    uint64_t v29 = sub_10000A720(v28, (uint64_t)qword_100A2AE08);
    unint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.default.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "SetupVirtualMeDevice: Timed out waiting to create KeyAlignmentRecord",  v32,  2u);
      swift_slowDealloc(v32, -1LL, -1LL);
    }
  }

  else
  {
    unint64_t v30 = (os_log_s *)v24;
  }

  sub_100018C68((uint64_t)v12, type metadata accessor for KeyAlignmentRecord);
  return (*(uint64_t (**)(char *, uint64_t))(v36 + 8))(v17, v37);
}

void sub_100584988(uint64_t a1, dispatch_group_s *a2, uint64_t a3)
{
  dispatch_group_t v33 = a2;
  uint64_t v5 = type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v32 - v9;
  uint64_t v11 = sub_100004AEC(&qword_1009A7E08);
  __chkstk_darwin(v11);
  uint64_t v13 = (uint64_t *)((char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v13, &qword_1009A7E08);
  if (swift_getEnumCaseMultiPayload(v13, v11) == 1)
  {
    uint64_t v14 = *v13;
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    sub_10000A720(v15, (uint64_t)qword_100A2AE08);
    swift_errorRetain(v14);
    uint64_t v16 = swift_errorRetain(v14);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v20 = swift_slowAlloc(32LL, -1LL);
      uint64_t v34 = v14;
      uint64_t v35 = v20;
      *(_DWORD *)uint64_t v19 = 136315138;
      swift_errorRetain(v14);
      uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v22 = String.init<A>(describing:)(&v34, v21);
      uint64_t v34 = sub_1003F11D4(v22, v23, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v19 + 4, v19 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v14);
      swift_errorRelease(v14);
      _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "SetupVirtualMeDevice: Failed to create KeyAlignmentRecord for VirtualMeDevice OBR %s",  v19,  0xCu);
      swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v14);
      swift_errorRelease(v14);
    }

    if (qword_10099B850 != -1) {
      swift_once(&qword_10099B850, sub_1006BAC84);
    }
    swift_retain();
    sub_1006BDED0(9u, 0xD000000000000014LL, 0x8000000100868E20LL);
    swift_release();
    swift_errorRelease(v14);
  }

  else
  {
    sub_10002218C((uint64_t)v13, (uint64_t)v10, type metadata accessor for KeyAlignmentRecord);
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_10000A720(v24, (uint64_t)qword_100A2AE08);
    uint64_t v25 = sub_10001DC4C((uint64_t)v10, (uint64_t)v8, type metadata accessor for KeyAlignmentRecord);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v29 = swift_slowAlloc(32LL, -1LL);
      uint64_t v35 = v29;
      *(_DWORD *)uint64_t v28 = 136315138;
      uint64_t v32 = a3;
      uint64_t v30 = UUID.uuidString.getter(v29);
      uint64_t v34 = sub_1003F11D4(v30, v31, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v34, &v35, v28 + 4, v28 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v8, type metadata accessor for KeyAlignmentRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "SetupVirtualMeDevice: Created KeyAlignmentRecord for VirtualMeDevice OBR %s",  v28,  0xCu);
      swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    else
    {

      sub_100018C68((uint64_t)v8, type metadata accessor for KeyAlignmentRecord);
    }

    sub_100018C68((uint64_t)v10, type metadata accessor for KeyAlignmentRecord);
  }

  Transaction.capture()();
  dispatch_group_leave(v33);
}

uint64_t sub_100584E40(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v19 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v18[1] = *(void *)(a2 + 48);
  uint64_t v11 = swift_allocObject(&unk_100964B68, 32LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v11 + 24) = a1;
  aBlock[4] = sub_100595A3C;
  void aBlock[5] = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100964B80;
  uint64_t v12 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v13 = swift_retain();
  static DispatchQoS.unspecified.getter(v13);
  uint64_t v21 = _swiftEmptyArrayStorage;
  uint64_t v14 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v16 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v21, v15, v16, v4, v14);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v6, v12);
  _Block_release(v12);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  return swift_release();
}

void sub_100585048(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v30 = (uint64_t)&v29 - v9;
  swift_retain();
  uint64_t v10 = sub_1005069CC();
  swift_release();
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_10000A720(v11, (uint64_t)qword_100A2AE08);
  swift_bridgeObjectRetain(v10);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v15 = 134217984;
    unint64_t v31 = v10[2];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v15 + 4, v15 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v13, v14, "SetupVirtualMeDevice: Found OBRs %ld", v15, 0xCu);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease();
  }

  unint64_t v16 = v10[2];
  if (v16 < 2) {
    goto LABEL_14;
  }
  swift_bridgeObjectRetain(v10);
  os_log_type_t v18 = (void *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.error.getter(v18);
  if (!os_log_type_enabled((os_log_t)v18, v19))
  {

    swift_bridgeObjectRelease();
    if (v10[2]) {
      goto LABEL_9;
    }
LABEL_14:
    swift_bridgeObjectRelease();
    goto LABEL_16;
  }

  uint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  *(_DWORD *)uint64_t v20 = 134217984;
  unint64_t v31 = v16;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, &v32, v20 + 4, v20 + 12);
  swift_bridgeObjectRelease();
  _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v18,  v19,  "SetupVirtualMeDevice: Anomalous condition - Duplicate VirtualMeDevice records found. Count %ld ",  v20,  0xCu);
  swift_slowDealloc(v20, -1LL, -1LL);

  if (!v10[2]) {
    goto LABEL_14;
  }
LABEL_9:
  unint64_t v21 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v22 = v30;
  uint64_t v23 = sub_10001DC4C((uint64_t)v10 + v21, v30, type metadata accessor for OwnedBeaconRecord);
  __chkstk_darwin(v23);
  *(&v29 - 2) = v22;
  uint64_t v24 = sub_100023858((uint64_t (*)(char *))sub_100153D0C, &v29 - 4, (uint64_t)v10);
  uint64_t v25 = *(void *)(v24 + 16);
  if (v25)
  {
    uint64_t v29 = a2;
    uint64_t v26 = v24 + v21;
    uint64_t v27 = *(void *)(v5 + 72);
    do
    {
      sub_10001DC4C(v26, (uint64_t)v8, type metadata accessor for OwnedBeaconRecord);
      uint64_t v28 = objc_autoreleasePoolPush();
      sub_1005853D0(a1, (uint64_t)v8);
      objc_autoreleasePoolPop(v28);
      sub_100018C68((uint64_t)v8, type metadata accessor for OwnedBeaconRecord);
      v26 += v27;
      --v25;
    }

    while (v25);
  }

  swift_bridgeObjectRelease();
  sub_100018C68(v30, type metadata accessor for OwnedBeaconRecord);
LABEL_16:
  Transaction.capture()();
}

void sub_1005853D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchTime(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v27 - v12;
  os_log_type_t v14 = dispatch_group_create();
  dispatch_group_enter(v14);
  uint64_t v15 = v14;
  sub_100595288(a2, a1, v15);

  static DispatchTime.now()(v16);
  + infix(_:_:)(v11, 60.0);
  uint64_t v17 = *(void (**)(char *, uint64_t))(v8 + 8);
  v17(v11, v7);
  uint64_t v18 = OS_dispatch_group.wait(timeout:)(v13) & 1;
  v17(v13, v7);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v18, 1LL) & 1) != 0)
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    sub_10000A720(v19, (uint64_t)qword_100A2AE08);
    uint64_t v20 = sub_10001DC4C(a2, (uint64_t)v6, type metadata accessor for OwnedBeaconRecord);
    unint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      uint64_t v31 = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      uint64_t v28 = v23 + 4;
      uint64_t v25 = UUID.uuidString.getter(v24);
      uint64_t v29 = sub_1003F11D4(v25, v26, &v31);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, v28, v23 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v6, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "SetupVirtualMeDevice: Timed out waiting to remove duplicate OBR %s",  v23,  0xCu);
      swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {

      sub_100018C68((uint64_t)v6, type metadata accessor for OwnedBeaconRecord);
    }
  }

  else
  {
  }

uint64_t sub_1005856B0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v36 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v36 - v12;
  if (a1)
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_10000A720(v14, (uint64_t)qword_100A2AE08);
    uint64_t v15 = sub_10001DC4C(a2, (uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v19 = swift_slowAlloc(32LL, -1LL);
      uint64_t v37 = a4;
      uint64_t v20 = v19;
      uint64_t v39 = v19;
      *(_DWORD *)uint64_t v18 = 136315138;
      uint64_t v36 = a3;
      uint64_t v21 = type metadata accessor for UUID(0LL);
      uint64_t v22 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
      uint64_t v38 = sub_1003F11D4(v23, v24, &v39);
      a3 = v36;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "SetupVirtualMeDevice: Failed to remove duplicate OBR %s",  v18,  0xCu);
      swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v20, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
    }
  }

  else
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v25 = type metadata accessor for Logger(0LL);
    sub_10000A720(v25, (uint64_t)qword_100A2AE08);
    uint64_t v26 = sub_10001DC4C(a2, (uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
    uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.default.getter(v27);
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v30 = swift_slowAlloc(32LL, -1LL);
      uint64_t v39 = v30;
      uint64_t v37 = a4;
      *(_DWORD *)uint64_t v29 = 136315138;
      uint64_t v31 = type metadata accessor for UUID(0LL);
      uint64_t v32 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter(v31, v32);
      uint64_t v38 = sub_1003F11D4(v33, v34, &v39);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v29 + 4, v29 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "SetupVirtualMeDevice: Successfully removed duplicate OBR %s",  v29,  0xCu);
      swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v30, -1LL, -1LL);
      swift_slowDealloc(v29, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v13, type metadata accessor for OwnedBeaconRecord);
    }

    a1 = 0LL;
  }

  return a3(a1);
}

uint64_t sub_100585AC0()
{
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2AE08);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "shareKey: keyForSharingLocationToFriends", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v5 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v5);
  return static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.secureLocations.keyForSharingLocation",  67LL,  2LL,  sub_100593F38);
}

uint64_t sub_100585C04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v23 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v22[1] = *(void *)(a2 + 48);
  uint64_t v15 = (void *)swift_allocObject(&unk_100964780, 48LL, 7LL);
  v15[2] = a2;
  v15[3] = a1;
  v15[4] = a3;
  v15[5] = a4;
  aBlock[4] = sub_100593F58;
  void aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100964798;
  uint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  uint64_t v17 = swift_retain();
  static DispatchQoS.unspecified.getter(v17);
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v18 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v20 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v19, v20, v8, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

uint64_t sub_100585E1C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v95 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v94 = *(void *)(v95 - 8);
  __chkstk_darwin(v95);
  uint64_t v93 = (char *)&v79 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v92 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v91 = *(void *)(v92 - 8);
  __chkstk_darwin(v92);
  uint64_t v90 = (char *)&v79 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v89 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v88 = *(void *)(v89 - 8);
  __chkstk_darwin(v89);
  uint64_t v87 = (char *)&v79 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v86 = type metadata accessor for HashAlgorithm(0LL);
  uint64_t v85 = *(void *)(v86 - 8);
  __chkstk_darwin(v86);
  uint64_t v12 = (char *)&v79 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v97 = *(void *)(v13 - 8);
  uint64_t v98 = v13;
  __chkstk_darwin(v13);
  uint64_t v96 = (char *)&v79 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009B28E0);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v79 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for SecureLocationsCachedSharingKey(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v79 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1005885E8((uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18) == 1)
  {
    sub_100015794((uint64_t)v17, &qword_1009B28E0);
    uint64_t v22 = (void *)swift_allocObject(&unk_1009647D0, 48LL, 7LL);
    void v22[2] = a3;
    v22[3] = a4;
    uint64_t v22[4] = a2;
    v22[5] = a1;
    swift_retain_n(a4, 2LL);
    swift_retain_n(a2, 2LL);
    swift_retain_n(a1, 2LL);
    if ((sub_100582B1C() & 1) != 0)
    {
      uint64_t v23 = type metadata accessor for Transaction(0LL);
      __chkstk_darwin(v23);
      *(&v79 - 4) = a1;
      *(&v79 - 3) = a3;
      uint64_t v78 = a4;
      static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.secureLocations.getKeysFromBeaconStore",  68LL,  2LL,  sub_100594814);
      Transaction.capture()();
    }

    else
    {
      if (qword_10099B5E0 != -1) {
        swift_once(&qword_10099B5E0, sub_1005C6624);
      }
      uint64_t v56 = sub_10000A720(v98, (uint64_t)qword_100A2AE08);
      __int128 v57 = (os_log_s *)Logger.logObject.getter(v56);
      os_log_type_t v58 = static os_log_type_t.default.getter(v57);
      if (os_log_type_enabled(v57, v58))
      {
        char v59 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)char v59 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v57,  v58,  "SetupVirtualMeDevice: Waiting on beaconStore to become available",  v59,  2u);
        swift_slowDealloc(v59, -1LL, -1LL);
      }

      swift_retain();
      swift_retain();
      uint64_t v60 = swift_retain();
      sub_1005637A4(v60, a1, (uint64_t)sub_100593F68, (uint64_t)v22);
      swift_release();
      swift_release();
      swift_release();
    }

    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }

  else
  {
    uint64_t v82 = a3;
    uint64_t v84 = a4;
    uint64_t v83 = a2;
    sub_10002218C((uint64_t)v17, (uint64_t)v21, type metadata accessor for SecureLocationsCachedSharingKey);
    unint64_t v24 = &v21[*(int *)(v18 + 24)];
    __int128 v25 = *((_OWORD *)v24 + 2);
    __int128 v26 = *(_OWORD *)v24;
    __int128 v106 = *((_OWORD *)v24 + 1);
    __int128 v107 = v25;
    __int128 v105 = v26;
    sub_1002DAC30( &v105,  (void (*)(void, void))sub_1002DDE24,  (void (*)(uint64_t, uint64_t))sub_10001736C,  (void (*)(uint64_t, uint64_t))sub_100018BE4);
    uint64_t v27 = (uint64_t)v21;
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v28 = v98;
    uint64_t v29 = sub_10000A720(v98, (uint64_t)qword_100A2AE08);
    uint64_t v30 = v97;
    uint64_t v31 = v96;
    (*(void (**)(char *, uint64_t, uint64_t))(v97 + 16))(v96, v29, v28);
    sub_1002DAC30( &v105,  (void (*)(void, void))sub_1002DDE24,  (void (*)(uint64_t, uint64_t))sub_10001736C,  (void (*)(uint64_t, uint64_t))sub_100018BE4);
    sub_1002DAC30( &v105,  (void (*)(void, void))sub_1002DDE24,  (void (*)(uint64_t, uint64_t))sub_10001736C,  (void (*)(uint64_t, uint64_t))sub_100018BE4);
    sub_1002DAC30( &v105,  (void (*)(void, void))sub_1002DDE24,  (void (*)(uint64_t, uint64_t))sub_10001736C,  (void (*)(uint64_t, uint64_t))sub_100018BE4);
    uint64_t v32 = sub_1002DAC30( &v105,  (void (*)(void, void))sub_1002DDE24,  (void (*)(uint64_t, uint64_t))sub_10001736C,  (void (*)(uint64_t, uint64_t))sub_100018BE4);
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    int v34 = static os_log_type_t.default.getter(v33);
    if (os_log_type_enabled(v33, (os_log_type_t)v34))
    {
      int v80 = v34;
      os_log_t v81 = v33;
      uint64_t v35 = swift_slowAlloc(22LL, -1LL);
      uint64_t v36 = (void *)swift_slowAlloc(64LL, -1LL);
      __int128 v99 = v36;
      *(_DWORD *)uint64_t v35 = 136315394;
      __int128 v108 = v106;
      __int128 aBlock = v106;
      unint64_t v37 = sub_10017EFB8();
      uint64_t v38 = RawRepresentable<>.base64EncodedString(options:)(0LL, &type metadata for PublicKey, v37);
      *(void *)&__int128 aBlock = sub_1003F11D4(v38, v39, (uint64_t *)&v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v35 + 4, v35 + 12);
      swift_bridgeObjectRelease();
      sub_1002DAC30( &v105,  (void (*)(void, void))sub_1002DDE20,  (void (*)(uint64_t, uint64_t))sub_100016F9C,  (void (*)(uint64_t, uint64_t))sub_1000182F0);
      sub_1002DAC30( &v105,  (void (*)(void, void))sub_1002DDE20,  (void (*)(uint64_t, uint64_t))sub_100016F9C,  (void (*)(uint64_t, uint64_t))sub_1000182F0);
      *(_WORD *)(v35 + 12) = 2080;
      __int128 v40 = v108;
      sub_100018BF8((uint64_t)&v108);
      uint64_t v41 = sub_1004DFCF0(v40, *((uint64_t *)&v40 + 1));
      uint64_t v43 = v42;
      uint64_t v44 = v27;
      sub_100164F64((uint64_t)&v108);
      sub_1001782E4(v41, v43);
      uint64_t v79 = v35 + 14;
      __int128 v45 = aBlock;
      uint64_t v46 = v85;
      uint64_t v47 = v86;
      (*(void (**)(char *, void, uint64_t))(v85 + 104))(v12, enum case for HashAlgorithm.sha256(_:), v86);
      uint64_t v48 = Data.hash(algorithm:)(v12, v45, *((void *)&v45 + 1));
      unint64_t v50 = v49;
      (*(void (**)(char *, uint64_t))(v46 + 8))(v12, v47);
      sub_100016F9C(v45, *((unint64_t *)&v45 + 1));
      *(void *)&__int128 aBlock = v48;
      *((void *)&aBlock + 1) = v50;
      unint64_t v51 = sub_10009BDE4();
      uint64_t v52 = RawRepresentable<>.base64EncodedString(options:)(0LL, &type metadata for HashedAdvertisement, v51);
      unint64_t v54 = v53;
      sub_100016F9C(v48, v50);
      *(void *)&__int128 aBlock = sub_1003F11D4(v52, v54, (uint64_t *)&v99);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&aBlock, (char *)&aBlock + 8, v79, v35 + 22);
      swift_bridgeObjectRelease();
      sub_1002DAC30( &v105,  (void (*)(void, void))sub_1002DDE20,  (void (*)(uint64_t, uint64_t))sub_100016F9C,  (void (*)(uint64_t, uint64_t))sub_1000182F0);
      sub_1002DAC30( &v105,  (void (*)(void, void))sub_1002DDE20,  (void (*)(uint64_t, uint64_t))sub_100016F9C,  (void (*)(uint64_t, uint64_t))sub_1000182F0);
      os_log_t v55 = v81;
      _os_log_impl( (void *)&_mh_execute_header,  v81,  (os_log_type_t)v80,  "keysForFriends: Memory cached %s locationId: %s",  (uint8_t *)v35,  0x16u);
      swift_arrayDestroy(v36, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1LL, -1LL);
      swift_slowDealloc(v35, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v97 + 8))(v96, v98);
      uint64_t v27 = v44;
    }

    else
    {
      sub_1002DAC30( &v105,  (void (*)(void, void))sub_1002DDE20,  (void (*)(uint64_t, uint64_t))sub_100016F9C,  (void (*)(uint64_t, uint64_t))sub_1000182F0);
      sub_1002DAC30( &v105,  (void (*)(void, void))sub_1002DDE20,  (void (*)(uint64_t, uint64_t))sub_100016F9C,  (void (*)(uint64_t, uint64_t))sub_1000182F0);
      sub_1002DAC30( &v105,  (void (*)(void, void))sub_1002DDE20,  (void (*)(uint64_t, uint64_t))sub_100016F9C,  (void (*)(uint64_t, uint64_t))sub_1000182F0);
      sub_1002DAC30( &v105,  (void (*)(void, void))sub_1002DDE20,  (void (*)(uint64_t, uint64_t))sub_100016F9C,  (void (*)(uint64_t, uint64_t))sub_1000182F0);

      (*(void (**)(char *, uint64_t))(v30 + 8))(v31, v28);
    }

    sub_100004AB0();
    uint64_t v62 = v88;
    uint64_t v63 = v87;
    uint64_t v64 = v89;
    (*(void (**)(char *, void, uint64_t))(v88 + 104))( v87,  enum case for DispatchQoS.QoSClass.default(_:),  v89);
    uint64_t v65 = (void *)static OS_dispatch_queue.global(qos:)(v63);
    (*(void (**)(char *, uint64_t))(v62 + 8))(v63, v64);
    uint64_t v66 = swift_allocObject(&unk_1009647F8, 88LL, 7LL);
    uint64_t v67 = v84;
    *(void *)(v66 + swift_weakDestroy(v0 + 16) = v82;
    *(void *)(v66 + 24) = v67;
    __int128 v68 = v106;
    *(_OWORD *)(v66 + 32) = v105;
    *(_OWORD *)(v66 + 48) = v68;
    *(_OWORD *)(v66 + 64) = v107;
    *(void *)(v66 + 80) = v83;
    uint64_t v103 = sub_100594894;
    uint64_t v104 = v66;
    *(void *)&__int128 aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256LL;
    __int128 v101 = sub_1001C31E8;
    uint64_t v102 = &unk_100964810;
    uint64_t v69 = _Block_copy(&aBlock);
    swift_retain();
    swift_retain();
    os_log_type_t v70 = sub_1002DAC30( &v105,  (void (*)(void, void))sub_1002DDE24,  (void (*)(uint64_t, uint64_t))sub_10001736C,  (void (*)(uint64_t, uint64_t))sub_100018BE4);
    uint64_t v71 = v90;
    static DispatchQoS.unspecified.getter(v70);
    __int128 v99 = _swiftEmptyArrayStorage;
    uint64_t v72 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v73 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v74 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    unint64_t v75 = v93;
    uint64_t v76 = v73;
    uint64_t v77 = v95;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v99, v76, v74, v95, v72);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v71, v75, v69);
    _Block_release(v69);

    sub_1002DAC30( &v105,  (void (*)(void, void))sub_1002DDE20,  (void (*)(uint64_t, uint64_t))sub_100016F9C,  (void (*)(uint64_t, uint64_t))sub_1000182F0);
    (*(void (**)(char *, uint64_t))(v94 + 8))(v75, v77);
    (*(void (**)(char *, uint64_t))(v91 + 8))(v71, v92);
    swift_release();
    Transaction.capture()();
    return sub_100018C68(v27, type metadata accessor for SecureLocationsCachedSharingKey);
  }

void sub_100586A30(char a1, void (*a2)(void ***, void *))
{
  if ((a1 & 1) != 0)
  {
    uint64_t v3 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v3);
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.secureLocations.getKeysFromBeaconStore",  68LL,  2LL,  sub_100597780);
LABEL_11:
    Transaction.capture()();
    return;
  }

  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2AE08);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "keysForFriends: SecureLocations not setup. Cannot share keys",  v8,  2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  if (qword_10099B850 != -1) {
    swift_once(&qword_10099B850, sub_1006BAC84);
  }
  uint64_t v9 = qword_100A2B210;
  uint64_t v10 = *(dispatch_queue_s **)(qword_100A2B210 + 16);
  uint64_t v11 = (void *)swift_allocObject(&unk_100964AC8, 40LL, 7LL);
  v11[2] = v9;
  v11[3] = 0xD000000000000019LL;
  v11[4] = 0x8000000100868DB0LL;
  uint64_t v12 = swift_allocObject(&unk_100964AF0, 32LL, 7LL);
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = sub_10033A57C;
  *(void *)(v12 + 24) = v11;
  __int128 v25 = sub_100154688;
  uint64_t v26 = v12;
  __int128 aBlock = _NSConcreteStackBlock;
  uint64_t v22 = 1107296256LL;
  uint64_t v23 = sub_100025BD4;
  unint64_t v24 = &unk_100964B08;
  uint64_t v13 = _Block_copy(&aBlock);
  swift_retain_n(v9, 2LL);
  swift_retain();
  swift_release();
  dispatch_sync(v10, v13);
  _Block_release(v13);
  LOBYTE(v10) = swift_isEscapingClosureAtFileLocation(v12, "", 110LL, 308LL, 38LL, 1LL);
  swift_release();
  swift_release();
  swift_release();
  if ((v10 & 1) == 0)
  {
    __int128 aBlock = 0LL;
    uint64_t v22 = 0LL;
    uint64_t v23 = 0LL;
    unint64_t v24 = (void *)0xF000000000000000LL;
    __int128 v25 = 0LL;
    uint64_t v26 = 0LL;
    type metadata accessor for SecureLocationsError(0LL);
    uint64_t v15 = v14;
    uint64_t v19 = 3LL;
    unint64_t v16 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v17 = sub_100007864( &qword_10099C110,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E3038);
    _BridgedStoredNSError.init(_:userInfo:)(&v20, &v19, v16, v15, v17);
    uint64_t v18 = v20;
    a2(&aBlock, v20);

    goto LABEL_11;
  }

  __break(1u);
}

uint64_t sub_100586D74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v23 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)v22 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)v22 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v22[1] = *(void *)(a2 + 48);
  uint64_t v15 = (void *)swift_allocObject(&unk_100964848, 48LL, 7LL);
  v15[2] = a1;
  v15[3] = a2;
  v15[4] = a3;
  v15[5] = a4;
  aBlock[4] = sub_10059491C;
  void aBlock[5] = v15;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100964860;
  unint64_t v16 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  uint64_t v17 = swift_retain();
  static DispatchQoS.unspecified.getter(v17);
  __int128 v25 = _swiftEmptyArrayStorage;
  uint64_t v18 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v20 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v19, v20, v8, v18);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v14, v10, v16);
  _Block_release(v16);
  (*(void (**)(char *, uint64_t))(v23 + 8))(v10, v8);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  return swift_release();
}

void sub_100586F8C(uint64_t a1, uint64_t a2, void (*a3)(unsigned __int128 *, uint64_t), uint64_t a4)
{
  uint64_t v181 = a4;
  v180 = a3;
  uint64_t v182 = a1;
  uint64_t v175 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v173 = *(void *)(v175 - 8);
  __chkstk_darwin(v175);
  uint64_t v172 = (char *)&v149 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v174 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v171 = *(void *)(v174 - 8);
  __chkstk_darwin(v174);
  uint64_t v170 = (char *)&v149 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v169 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v168 = *(void *)(v169 - 8);
  __chkstk_darwin(v169);
  v167 = (char *)&v149 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v164 = type metadata accessor for HashAlgorithm(0LL);
  uint64_t v163 = *(void *)(v164 - 8);
  __chkstk_darwin(v164);
  v162 = (char *)&v149 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v183 = (void *)type metadata accessor for Logger(0LL);
  uint64_t v166 = *(v183 - 1);
  __chkstk_darwin(v183);
  id v165 = (char *)&v149 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A2430);
  __chkstk_darwin(v10);
  unint64_t v178 = (unint64_t)&v149 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v177 = type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v12 = *(void *)(v177 - 8);
  __chkstk_darwin(v177);
  uint64_t v176 = (uint64_t)&v149 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v14);
  unint64_t v16 = (char *)&v149 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v179 = (uint64_t)&v149 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v20);
  uint64_t v22 = (char *)&v149 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = type metadata accessor for UUID(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (char *)&v149 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100582F48((uint64_t)v22);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23) == 1)
  {
    uint64_t v27 = &qword_10099D8A0;
    uint64_t v28 = (uint64_t)v22;
LABEL_7:
    sub_100015794(v28, v27);
    uint64_t v34 = (uint64_t)v183;
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v35 = sub_10000A720(v34, (uint64_t)qword_100A2AE08);
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v37 = static os_log_type_t.default.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v38 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "keysForFriends: Can't get keys. Either VirtualMeDevice or KeyAlignmentRecord doesn't exist. ",  v38,  2u);
      swift_slowDealloc(v38, -1LL, -1LL);
    }

    if (qword_10099B850 != -1) {
      swift_once(&qword_10099B850, sub_1006BAC84);
    }
    swift_retain();
    sub_1006BDED0(8u, 0xD000000000000017LL, 0x8000000100868D50LL);
    swift_release();
    uint64_t v39 = qword_100A2B210;
    __int128 v40 = *(dispatch_queue_s **)(qword_100A2B210 + 16);
    uint64_t v41 = (void *)swift_allocObject(&unk_100964898, 40LL, 7LL);
    void v41[2] = v39;
    _OWORD v41[3] = 0xD000000000000019LL;
    v41[4] = 0x8000000100868D70LL;
    uint64_t v42 = swift_allocObject(&unk_1009648C0, 32LL, 7LL);
    *(void *)(v42 + swift_weakDestroy(v0 + 16) = sub_10033A57C;
    *(void *)(v42 + 24) = v41;
    *(void *)&unsigned __int128 v189 = sub_100154688;
    *((void *)&v189 + 1) = v42;
    *(void *)&unsigned __int128 aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256LL;
    *(void *)&unsigned __int128 v188 = sub_100025BD4;
    *((void *)&v188 + 1) = &unk_1009648D8;
    uint64_t v43 = _Block_copy(&aBlock);
    swift_retain_n(v39, 2LL);
    swift_retain();
    swift_release();
    dispatch_sync(v40, v43);
    _Block_release(v43);
    LOBYTE(v40) = swift_isEscapingClosureAtFileLocation(v42, "", 110LL, 308LL, 38LL, 1LL);
    swift_release();
    swift_release();
    swift_release();
    if ((v40 & 1) == 0)
    {
      unsigned __int128 aBlock = 0uLL;
      *(void *)&unsigned __int128 v188 = 0LL;
      *((void *)&v188 + 1) = 0xF000000000000000LL;
      unsigned __int128 v189 = 0uLL;
      type metadata accessor for SecureLocationsError(0LL);
      uint64_t v45 = v44;
      uint64_t v192 = 3LL;
      unint64_t v46 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
      uint64_t v47 = sub_100007864( &qword_10099C110,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E3038);
      _BridgedStoredNSError.init(_:userInfo:)(&v185, &v192, v46, v45, v47);
      uint64_t v48 = (void *)v185;
      v180(&aBlock, v185);

LABEL_15:
      Transaction.capture()();
      return;
    }

    __break(1u);
    swift_once(&qword_10099B5E0, sub_1005C6624);
    uint64_t v54 = sub_10000A720((uint64_t)v183, (uint64_t)qword_100A2AE08);
    os_log_t v55 = (os_log_s *)Logger.logObject.getter(v54);
    os_log_type_t v56 = static os_log_type_t.error.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      __int128 v57 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)__int128 v57 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v55,  v56,  "keysForFriends: Error getting keys for meDeviceRecord",  v57,  2u);
      swift_slowDealloc(v57, -1LL, -1LL);
    }

    uint64_t v88 = (uint64_t)v43;

    if (qword_10099B850 != -1) {
      swift_once(&qword_10099B850, sub_1006BAC84);
    }
    *(void *)&unsigned __int128 aBlock = v42;
    swift_retain();
    swift_errorRetain(v42);
    uint64_t v58 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v59 = String.init<A>(describing:)(&aBlock, v58);
    sub_1006BDED0(3u, v59, v60);
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v87 = qword_100A2B210;
    uint64_t v61 = *(dispatch_queue_s **)(qword_100A2B210 + 16);
    uint64_t v62 = (void *)swift_allocObject(&unk_100964910, 40LL, 7LL);
    v62[2] = v87;
    v62[3] = 0xD000000000000012LL;
    v62[4] = 0x8000000100868D90LL;
    uint64_t v30 = swift_allocObject(&unk_100964938, 32LL, 7LL);
    *(void *)(v30 + swift_weakDestroy(v0 + 16) = sub_10033A57C;
    *(void *)(v30 + 24) = v62;
    *(void *)&unsigned __int128 v189 = sub_100154688;
    *((void *)&v189 + 1) = v30;
    *(void *)&unsigned __int128 aBlock = _NSConcreteStackBlock;
    *((void *)&aBlock + 1) = 1107296256LL;
    *(void *)&unsigned __int128 v188 = sub_100025BD4;
    *((void *)&v188 + 1) = &unk_100964950;
    uint64_t v63 = _Block_copy(&aBlock);
    unint64_t v83 = *((void *)&v189 + 1);
    swift_retain_n(v87, 2LL);
    swift_retain();
    swift_release();
    dispatch_sync(v61, v63);
    _Block_release(v63);
    uint64_t isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v30, "", 110LL, 308LL, 38LL, 1LL);
    swift_release();
    swift_release();
    swift_release();
    if ((isEscapingClosureAtFileLocation & 1) == 0)
    {
      sub_100004AB0();
      uint64_t v64 = v168;
      uint64_t v65 = v167;
      uint64_t v66 = v169;
      (*(void (**)(char *, void, uint64_t))(v168 + 104))( v167,  enum case for DispatchQoS.QoSClass.default(_:),  v169);
      uint64_t v67 = (void *)static OS_dispatch_queue.global(qos:)(v65);
      (*(void (**)(char *, uint64_t))(v64 + 8))(v65, v66);
      __int128 v68 = (void *)swift_allocObject(&unk_100964988, 40LL, 7LL);
      uint64_t v69 = v181;
      v68[2] = v180;
      v68[3] = v69;
      v68[4] = v42;
      *(void *)&unsigned __int128 v189 = sub_100595840;
      *((void *)&v189 + 1) = v68;
      *(void *)&unsigned __int128 aBlock = _NSConcreteStackBlock;
      *((void *)&aBlock + 1) = 1107296256LL;
      *(void *)&unsigned __int128 v188 = sub_1001C31E8;
      *((void *)&v188 + 1) = &unk_1009649A0;
      os_log_type_t v70 = _Block_copy(&aBlock);
      swift_retain();
      uint64_t v71 = swift_errorRetain(v42);
      uint64_t v72 = v170;
      static DispatchQoS.unspecified.getter(v71);
      uint64_t v185 = (uint64_t)_swiftEmptyArrayStorage;
      uint64_t v73 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v74 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v75 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v76 = v172;
      uint64_t v77 = v74;
      uint64_t v78 = v175;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v185, v77, v75, v175, v73);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v72, v76, v70);
      _Block_release(v70);

      swift_errorRelease(v42);
      (*(void (**)(char *, uint64_t))(v173 + 8))(v76, v78);
      (*(void (**)(char *, uint64_t))(v171 + 8))(v72, v174);
      sub_100018C68(v176, type metadata accessor for KeyAlignmentRecord);
      sub_100018C68(v18, type metadata accessor for OwnedBeaconRecord);
      (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v88, v161);
LABEL_29:
      swift_release();
      goto LABEL_15;
    }

    __break(1u);
    goto LABEL_32;
  }

  (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v26, v22, v23);
  uint64_t v29 = v24;
  swift_retain();
  sub_100504F30((uint64_t)v26, (uint64_t)v16);
  swift_release();
  uint64_t v30 = (uint64_t)v26;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))(v16, 1LL, v17) == 1)
  {
    (*(void (**)(char *, uint64_t))(v29 + 8))(v26, v23);
    uint64_t v27 = (uint64_t *)&unk_1009A9C30;
    uint64_t v28 = (uint64_t)v16;
    goto LABEL_7;
  }

  uint64_t v160 = v29;
  uint64_t v161 = v23;
  uint64_t v18 = v179;
  sub_10002218C((uint64_t)v16, v179, type metadata accessor for OwnedBeaconRecord);
  uint64_t v31 = a2;
  swift_retain();
  uint64_t v32 = v178;
  sub_100576BD4(v178);
  swift_release();
  unint64_t v33 = v177;
  if ((*(unsigned int (**)(uint64_t, uint64_t, unint64_t))(v12 + 48))(v32, 1LL, v177) == 1)
  {
    sub_100018C68(v18, type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(char *, uint64_t))(v160 + 8))(v26, v161);
    uint64_t v27 = &qword_1009A2430;
    uint64_t v28 = v32;
    goto LABEL_7;
  }

  uint64_t v49 = v176;
  sub_10002218C(v32, v176, type metadata accessor for KeyAlignmentRecord);
  unint64_t v50 = *(void *)(v49 + *(int *)(v33 + 28));
  uint64_t v51 = *(void *)(a2 + 32);
  uint64_t v52 = *(void *)(v51 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  uint64_t v53 = type metadata accessor for BeaconKeyManager(0LL);
  swift_retain();
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10014F014, v51, v52, (char *)&type metadata for () + 8, v53);
  sub_1007C2348(v18, v50, 0LL, 0LL, 0xF000000000000000LL, &aBlock);
  unint64_t v156 = v50;
  uint64_t v154 = 0LL;
  uint64_t v158 = v31;
  unint64_t v80 = *((void *)&aBlock + 1);
  uint64_t v79 = aBlock;
  unint64_t v81 = *((void *)&v188 + 1);
  uint64_t v82 = v188;
  unint64_t v83 = *((void *)&v189 + 1);
  uint64_t v84 = v189;
  unint64_t v85 = v191;
  uint64_t v155 = v190;
  swift_release();
  swift_release();
  uint64_t isEscapingClosureAtFileLocation = v79;
  unsigned __int128 aBlock = __PAIR128__(v80, v79);
  unint64_t v87 = v80;
  uint64_t v88 = v82;
  unsigned __int128 v188 = __PAIR128__(v81, v82);
  unint64_t v178 = v81;
  uint64_t v42 = v84;
  unsigned __int128 v189 = __PAIR128__(v83, v84);
  sub_100016F9C(v155, v85);
  if (qword_10099B5E0 != -1) {
LABEL_32:
  }
    swift_once(&qword_10099B5E0, sub_1005C6624);
  uint64_t v89 = (uint64_t)v183;
  uint64_t v90 = sub_10000A720((uint64_t)v183, (uint64_t)qword_100A2AE08);
  (*(void (**)(char *, uint64_t, uint64_t))(v166 + 16))(v165, v90, v89);
  uint64_t v91 = isEscapingClosureAtFileLocation;
  sub_100018BE4(isEscapingClosureAtFileLocation, v87);
  unint64_t v92 = v178;
  sub_10001736C(v88, v178);
  sub_100018BE4(v42, v83);
  sub_100018BE4(isEscapingClosureAtFileLocation, v87);
  sub_10001736C(v88, v92);
  sub_100018BE4(v42, v83);
  sub_100018BE4(isEscapingClosureAtFileLocation, v87);
  sub_10001736C(v88, v92);
  sub_100018BE4(v42, v83);
  sub_100018BE4(isEscapingClosureAtFileLocation, v87);
  sub_10001736C(v88, v92);
  uint64_t v93 = sub_100018BE4(v42, v83);
  uint64_t v94 = (os_log_s *)Logger.logObject.getter(v93);
  LODWORD(v155) = static os_log_type_t.default.getter(v94);
  BOOL v95 = os_log_type_enabled(v94, (os_log_type_t)v155);
  unint64_t v96 = v87;
  uint64_t v157 = v30;
  unint64_t v177 = v87;
  uint64_t v159 = isEscapingClosureAtFileLocation;
  if (!v95)
  {
    sub_1000182F0(isEscapingClosureAtFileLocation, v87);
    uint64_t v126 = v89;
    uint64_t v123 = v42;
    unint64_t v127 = v178;
    sub_100016F9C(v88, v178);
    sub_1000182F0(v123, v83);
    sub_1000182F0(v91, v87);
    sub_100016F9C(v88, v127);
    sub_1000182F0(v123, v83);
    sub_1000182F0(v91, v87);
    sub_100016F9C(v88, v127);
    sub_1000182F0(v123, v83);
    sub_1000182F0(v91, v87);
    sub_100016F9C(v88, v127);
    sub_1000182F0(v123, v83);

    (*(void (**)(char *, uint64_t))(v166 + 8))(v165, v126);
    goto LABEL_28;
  }

  os_log_t v151 = v94;
  uint64_t v97 = swift_slowAlloc(42LL, -1LL);
  uint64_t v150 = swift_slowAlloc(64LL, -1LL);
  uint64_t v192 = v150;
  *(_DWORD *)uint64_t v97 = 141558787;
  uint64_t v185 = 1752392040LL;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v185, v186, v97 + 4, v97 + 12);
  unint64_t v98 = v178;
  *(_WORD *)(v97 + 12) = 2081;
  uint64_t v153 = v97 + 14;
  uint64_t v185 = v88;
  v186[0] = v98;
  unint64_t v99 = sub_10017EFB8();
  uint64_t v100 = RawRepresentable<>.base64EncodedString(options:)(0LL, &type metadata for PublicKey, v99);
  uint64_t v185 = sub_1003F11D4(v100, v101, &v192);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v185, v186, v153, v97 + 22);
  swift_bridgeObjectRelease();
  sub_1000182F0(v91, v87);
  sub_100016F9C(v88, v98);
  sub_1000182F0(v42, v83);
  sub_1000182F0(v91, v87);
  sub_100016F9C(v88, v98);
  uint64_t v152 = v42;
  uint64_t v153 = v83;
  sub_1000182F0(v42, v83);
  *(_WORD *)(v97 + 22) = 2160;
  uint64_t v185 = 1752392040LL;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v185, v186, v97 + 24, v97 + 32);
  uint64_t v102 = (uint8_t *)v97;
  *(_WORD *)(v97 + 32) = 2081;
  sub_10001736C(v88, v98);
  uint64_t v103 = v154;
  uint64_t v104 = sub_1004DFCF0(v88, v98);
  if (!v103)
  {
    uint64_t v106 = v104;
    uint64_t v107 = v105;
    sub_100016F9C(v88, v178);
    sub_1001782E4(v106, v107);
    __int128 v108 = v102;
    uint64_t v109 = v102 + 34;
    uint64_t v110 = v185;
    unint64_t v111 = v186[0];
    uint64_t v112 = v163;
    uint64_t v113 = v162;
    uint64_t v114 = v164;
    (*(void (**)(char *, void, uint64_t))(v163 + 104))(v162, enum case for HashAlgorithm.sha256(_:), v164);
    uint64_t v115 = Data.hash(algorithm:)(v113, v110, v111);
    unint64_t v117 = v116;
    (*(void (**)(char *, uint64_t))(v112 + 8))(v113, v114);
    sub_100016F9C(v110, v111);
    uint64_t v185 = v115;
    v186[0] = v117;
    unint64_t v118 = sub_10009BDE4();
    uint64_t v119 = RawRepresentable<>.base64EncodedString(options:)(0LL, &type metadata for HashedAdvertisement, v118);
    unint64_t v121 = v120;
    sub_100016F9C(v115, v117);
    uint64_t v185 = sub_1003F11D4(v119, v121, &v192);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v185, v186, v109, v108 + 42);
    swift_bridgeObjectRelease();
    uint64_t v91 = v159;
    unint64_t v96 = v177;
    sub_1000182F0(v159, v177);
    unint64_t v122 = v178;
    sub_100016F9C(v88, v178);
    uint64_t v123 = v152;
    unint64_t v83 = v153;
    sub_1000182F0(v152, v153);
    sub_1000182F0(v91, v96);
    sub_100016F9C(v88, v122);
    sub_1000182F0(v123, v83);
    os_log_t v124 = v151;
    _os_log_impl( (void *)&_mh_execute_header,  v151,  (os_log_type_t)v155,  "keysForFriends: from BeaconStore %{private,mask.hash}s locationId: %{private,mask.hash}s",  v108,  0x2Au);
    uint64_t v125 = v150;
    swift_arrayDestroy(v150, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v125, -1LL, -1LL);
    swift_slowDealloc(v108, -1LL, -1LL);

    (*(void (**)(char *, void *))(v166 + 8))(v165, v183);
LABEL_28:
    sub_100588D6C((uint64_t)&aBlock, v156);
    sub_100004AB0();
    uint64_t v128 = v168;
    uint64_t v129 = v167;
    uint64_t v130 = v169;
    (*(void (**)(char *, void, uint64_t))(v168 + 104))( v167,  enum case for DispatchQoS.QoSClass.default(_:),  v169);
    uint64_t v183 = (void *)static OS_dispatch_queue.global(qos:)(v129);
    (*(void (**)(char *, uint64_t))(v128 + 8))(v129, v130);
    uint64_t v131 = swift_allocObject(&unk_1009649D8, 80LL, 7LL);
    uint64_t v132 = v181;
    *(void *)(v131 + swift_weakDestroy(v0 + 16) = v180;
    *(void *)(v131 + 24) = v132;
    unsigned __int128 v133 = v188;
    *(_OWORD *)(v131 + 32) = aBlock;
    *(_OWORD *)(v131 + 48) = v133;
    *(_OWORD *)(v131 + 64) = v189;
    v186[3] = sub_1005958E0;
    v186[4] = v131;
    uint64_t v185 = (uint64_t)_NSConcreteStackBlock;
    v186[0] = 1107296256LL;
    v186[1] = sub_1001C31E8;
    v186[2] = &unk_1009649F0;
    id v134 = _Block_copy(&v185);
    sub_100018BE4(v91, v96);
    unint64_t v135 = v178;
    sub_10001736C(v88, v178);
    sub_100018BE4(v123, v83);
    uint64_t v136 = swift_retain();
    unint64_t v137 = v83;
    uint64_t v138 = v170;
    static DispatchQoS.unspecified.getter(v136);
    uint64_t v192 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v139 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v140 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v141 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v142 = v172;
    uint64_t v143 = v140;
    uint64_t v144 = v175;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v192, v143, v141, v175, v139);
    unint64_t v145 = v183;
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v138, v142, v134);
    _Block_release(v134);

    sub_1000182F0(v159, v177);
    sub_100016F9C(v88, v135);
    sub_1000182F0(v123, v137);
    (*(void (**)(char *, uint64_t))(v173 + 8))(v142, v144);
    (*(void (**)(char *, uint64_t))(v171 + 8))(v138, v174);
    sub_100018C68(v176, type metadata accessor for KeyAlignmentRecord);
    sub_100018C68(v179, type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(uint64_t, uint64_t))(v160 + 8))(v157, v161);
    goto LABEL_29;
  }

  sub_1000182F0(v159, v177);
  unint64_t v146 = v178;
  sub_100016F9C(v88, v178);
  sub_1000182F0(v152, v153);
  sub_100016F9C(v88, v146);
  uint64_t v185 = 0LL;
  v186[0] = 0xE000000000000000LL;
  _StringGuts.grow(_:)(35LL);
  v147._countAndFlagsBits = 0xD000000000000021LL;
  v147._object = (void *)0x8000000100854640LL;
  String.append(_:)(v147);
  uint64_t v184 = v103;
  uint64_t v148 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  _print_unlocked<A, B>(_:_:)( &v184,  &v185,  v148,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v185,  v186[0],  "searchpartyd/KeyRepresentable.swift",  35LL,  2LL,  256LL,  0);
  __break(1u);
}

uint64_t sub_1005885E8@<X0>(uint64_t a1@<X8>)
{
  uint64_t v73 = a1;
  uint64_t v68 = type metadata accessor for URL(0LL);
  uint64_t v71 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v66 = (char *)&v60 - ((v1 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v67 = type metadata accessor for UUID(0LL);
  uint64_t v65 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v64 = (char *)&v60 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v70 = sub_100004AEC(&qword_1009B28E0);
  uint64_t v3 = __chkstk_darwin(v70);
  uint64_t v69 = (char *)&v60 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v60 - v5;
  uint64_t v7 = type metadata accessor for SecureLocationsCachedSharingKey(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v60 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (uint64_t *)((char *)&v60 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  uint64_t v72 = sub_10000A720(v15, (uint64_t)qword_100A2AE08);
  unint64_t v16 = (os_log_s *)Logger.logObject.getter(v72);
  os_log_type_t v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "shareKey: getCachedSharingKeys", v18, 2u);
    swift_slowDealloc(v18, -1LL, -1LL);
  }

  uint64_t v19 = v74;
  uint64_t v20 = *(void **)(v74 + 48);
  *uint64_t v14 = v20;
  (*(void (**)(void *, void, uint64_t))(v12 + 104))(v14, enum case for DispatchPredicate.onQueue(_:), v11);
  id v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v14);
  (*(void (**)(void *, uint64_t))(v12 + 8))(v14, v11);
  if ((v20 & 1) == 0)
  {
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v22 = v19 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedSharingKey;
  swift_beginAccess(v19 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedSharingKey, v78, 0LL, 0LL);
  sub_10001581C(v22, (uint64_t)v6, &qword_1009B28E0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
  {
    sub_100015794((uint64_t)v6, &qword_1009B28E0);
    uint64_t v23 = sub_100004AEC(&qword_1009A34B0);
    uint64_t v24 = OS_dispatch_queue.sync<A>(execute:)(sub_100263FD0, v19, v23);
    unint64_t v25 = v77;
    if (v77)
    {
      uint64_t v61 = v22;
      uint64_t v62 = 0LL;
      uint64_t v26 = v76;
      uint64_t v27 = *(void *)(v19 + 32);
      swift_retain();
      uint64_t v28 = String.utf8Data.getter(v26, v25);
      unint64_t v30 = v29;
      swift_bridgeObjectRelease();
      uint64_t v76 = v28;
      unint64_t v77 = v30;
      unint64_t v31 = sub_100042F34();
      uint64_t v11 = (uint64_t)v64;
      DataProtocol.stableUUID.getter(&type metadata for Data, v31);
      sub_100016F9C(v28, v30);
      uint64_t v63 = v27;
      uint64_t v10 = *(char **)(v27 + 136);
      if (qword_10099B580 == -1)
      {
LABEL_9:
        uint64_t v32 = v68;
        uint64_t v33 = sub_10000A720(v68, (uint64_t)qword_100A2AD28);
        uint64_t v34 = v66;
        (*(void (**)(char *, uint64_t, uint64_t))(v71 + 16))(v66, v33, v32);
        v35._object = (void *)0x800000010085B040LL;
        v35._countAndFlagsBits = 0xD000000000000014LL;
        prohibitAsyncContext(functionName:)(v35);
        uint64_t v76 = v7;
        uint64_t v36 = sub_100004AEC(&qword_1009B3710);
        uint64_t v37 = String.init<A>(describing:)(&v76, v36);
        uint64_t v39 = v38;
        __int128 v40 = objc_autoreleasePoolPush();
        __chkstk_darwin(v40);
        *(&v60 - 6) = (uint64_t)v10;
        *(&v60 - 5) = v11;
        *(&v60 - 4) = (uint64_t)v34;
        *(&v60 - 3) = v37;
        *(&v60 - 2) = v39;
        uint64_t v41 = (uint64_t)v69;
        OS_dispatch_queue.sync<A>(execute:)(sub_100593F18, &v60 - 8, v70);
        objc_autoreleasePoolPop(v40);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v71 + 8))(v34, v32);
        uint64_t v42 = v41;
        swift_release();
        (*(void (**)(uint64_t, uint64_t))(v65 + 8))(v11, v67);
        uint64_t v43 = v61;
        swift_beginAccess(v61, &v76, 33LL, 0LL);
        sub_1000D4D50(v41, v43, &qword_1009B28E0);
        swift_endAccess(&v76);
        uint64_t v44 = swift_retain_n(v19, 2LL);
        uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
        os_log_type_t v46 = static os_log_type_t.default.getter(v45);
        if (os_log_type_enabled(v45, v46))
        {
          uint64_t v47 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v48 = swift_slowAlloc(32LL, -1LL);
          uint64_t v76 = v48;
          *(_DWORD *)uint64_t v47 = 136315138;
          sub_10001581C(v43, v42, &qword_1009B28E0);
          uint64_t v49 = String.init<A>(describing:)(v42, v70);
          uint64_t v75 = sub_1003F11D4(v49, v50, &v76);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v47 + 4, v47 + 12);
          swift_release_n(v19, 2LL);
          swift_bridgeObjectRelease();
          _os_log_impl( (void *)&_mh_execute_header,  v45,  v46,  "shareKey: Returning localstorage cached sharing keys %s",  v47,  0xCu);
          swift_arrayDestroy(v48, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v48, -1LL, -1LL);
          swift_slowDealloc(v47, -1LL, -1LL);
        }

        else
        {

          swift_release_n(v19, 2LL);
        }

        return sub_10001581C(v43, v73, &qword_1009B28E0);
      }

void sub_100588D6C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v44 = a2;
  uint64_t v5 = sub_100004AEC(&qword_1009B28E0);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v45 = (uint64_t)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v40 - v8;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v41 = *(void *)(v10 - 8);
  uint64_t v42 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = (int *)type metadata accessor for SecureLocationsCachedSharingKey(0LL);
  uint64_t v43 = *((void *)v13 - 1);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (uint64_t *)((char *)&v40 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v20 = *(void **)(v3 + 48);
  *uint64_t v19 = v20;
  (*(void (**)(void *, void, uint64_t))(v17 + 104))(v19, enum case for DispatchPredicate.onQueue(_:), v16);
  id v21 = v20;
  LOBYTE(v20) = _dispatchPreconditionTest(_:)(v19);
  (*(void (**)(void *, uint64_t))(v17 + 8))(v19, v16);
  if ((v20 & 1) == 0)
  {
    __break(1u);
    goto LABEL_11;
  }

  uint64_t v22 = sub_100004AEC(&qword_1009A34B0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100263FD0, v3, v22);
  if (v47)
  {
    uint64_t v23 = String.utf8Data.getter(v46, v47);
    unint64_t v25 = v24;
    swift_bridgeObjectRelease();
    uint64_t v46 = v23;
    unint64_t v47 = v25;
    unint64_t v26 = sub_100042F34();
    DataProtocol.stableUUID.getter(&type metadata for Data, v26);
    sub_100016F9C(v23, v25);
    sub_1002DAC30( (void *)a1,  (void (*)(void, void))sub_1002DDE24,  (void (*)(uint64_t, uint64_t))sub_10001736C,  (void (*)(uint64_t, uint64_t))sub_100018BE4);
    if (qword_10099B580 == -1)
    {
LABEL_4:
      uint64_t v27 = type metadata accessor for URL(0LL);
      uint64_t v28 = sub_10000A720(v27, (uint64_t)qword_100A2AD28);
      (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 16LL))(v15, v28, v27);
      (*(void (**)(char *, char *, uint64_t))(v41 + 32))(&v15[v13[5]], v12, v42);
      unint64_t v29 = &v15[v13[6]];
      __int128 v30 = *(_OWORD *)(a1 + 16);
      *(_OWORD *)unint64_t v29 = *(_OWORD *)a1;
      *((_OWORD *)v29 + 1) = v30;
      *((_OWORD *)v29 + 2) = *(_OWORD *)(a1 + 32);
      *(void *)&v15[v13[7]] = v44;
      sub_10001DC4C((uint64_t)v15, (uint64_t)v9, type metadata accessor for SecureLocationsCachedSharingKey);
      (*(void (**)(char *, void, uint64_t, int *))(v43 + 56))(v9, 0LL, 1LL, v13);
      uint64_t v31 = (uint64_t)v9;
      uint64_t v32 = v45;
      sub_100015750(v31, v45, &qword_1009B28E0);
      uint64_t v33 = v3 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedSharingKey;
      swift_beginAccess( v3 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedSharingKey,  &v46,  33LL,  0LL);
      sub_1000D4D50(v32, v33, &qword_1009B28E0);
      swift_endAccess(&v46);
      uint64_t v34 = type metadata accessor for Transaction(0LL);
      __chkstk_darwin(v34);
      *(&v40 - 2) = v3;
      *(&v40 - 1) = (uint64_t)v15;
      static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.secureLocations.updateCachedKey",  61LL,  2LL,  sub_100593EF8);
      sub_100018C68((uint64_t)v15, type metadata accessor for SecureLocationsCachedSharingKey);
      return;
    }

uint64_t sub_1005891D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_release();
}

void sub_100589240(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009B3708);
  __chkstk_darwin(v2);
  uint64_t v4 = (uint64_t *)((char *)&v20 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v4, &qword_1009B3708);
  if (swift_getEnumCaseMultiPayload(v4, v2) == 1)
  {
    uint64_t v5 = *v4;
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    sub_10000A720(v6, (uint64_t)qword_100A2AE08);
    swift_errorRetain(v5);
    uint64_t v7 = swift_errorRetain(v5);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v11 = swift_slowAlloc(32LL, -1LL);
      uint64_t v20 = v5;
      uint64_t v21 = v11;
      *(_DWORD *)uint64_t v10 = 136315138;
      swift_errorRetain(v5);
      uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v13 = String.init<A>(describing:)(&v20, v12);
      uint64_t v20 = sub_1003F11D4(v13, v14, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "shareKey: Error saving sharing keys locally %s", v10, 0xCu);
      swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1LL, -1LL);
      swift_slowDealloc(v10, -1LL, -1LL);

      swift_errorRelease(v5);
    }

    else
    {
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      swift_errorRelease(v5);
    }
  }

  else
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    uint64_t v16 = sub_10000A720(v15, (uint64_t)qword_100A2AE08);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v19 = 0;
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "shareKey: Successfully saved sharing keys locally", v19, 2u);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    sub_100015794((uint64_t)v4, &qword_1009B3708);
  }

  Transaction.capture()();
}

void sub_10058954C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v56 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v53 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v54 = *(void *)(v5 - 8);
  uint64_t v55 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v53 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_1009B28E0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (uint64_t *)((char *)&v53 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  os_log_type_t v18 = *(void **)(v1 + 48);
  *uint64_t v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  id v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  (*(void (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) != 0)
  {
    uint64_t v20 = type metadata accessor for SecureLocationsCachedSharingKey(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v13, 1LL, 1LL, v20);
    uint64_t v21 = v1 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedSharingKey;
    swift_beginAccess(v1 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedSharingKey, &v57, 33LL, 0LL);
    sub_1000D4D50((uint64_t)v13, v21, &qword_1009B28E0);
    swift_endAccess(&v57);
    if (qword_10099B5E0 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B5E0, sub_1005C6624);
LABEL_3:
  uint64_t v22 = type metadata accessor for Logger(0LL);
  uint64_t v23 = sub_10000A720(v22, (uint64_t)qword_100A2AE08);
  unint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.default.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    unint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "shareKey: Invalidated memory cached key", v26, 2u);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  uint64_t v27 = sub_100004AEC(&qword_1009A34B0);
  uint64_t v28 = OS_dispatch_queue.sync<A>(execute:)(sub_100263FD0, v1, v27);
  unint64_t v29 = v58;
  if (v58)
  {
    uint64_t v30 = v57;
    uint64_t v31 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))(v10, 1LL, 1LL, v31);
    uint64_t v32 = (void *)swift_allocObject(&unk_100964758, 40LL, 7LL);
    v32[2] = 0LL;
    v32[3] = 0LL;
    v32[4] = v1;
    swift_retain();
    sub_1003EDB00((uint64_t)v10, (uint64_t)&unk_1009B36F8, (uint64_t)v32);
    swift_release();
    uint64_t v33 = *(void *)(v1 + 32);
    swift_retain();
    uint64_t v34 = String.utf8Data.getter(v30, v29);
    unint64_t v36 = v35;
    swift_bridgeObjectRelease();
    uint64_t v57 = v34;
    unint64_t v58 = v36;
    unint64_t v37 = sub_100042F34();
    DataProtocol.stableUUID.getter(&type metadata for Data, v37);
    sub_100016F9C(v34, v36);
    uint64_t v38 = *(void *)(v33 + 136);
    if (qword_10099B580 != -1) {
      swift_once(&qword_10099B580, sub_100581FC4);
    }
    uint64_t v39 = sub_10000A720(v2, (uint64_t)qword_100A2AD28);
    uint64_t v40 = v56;
    uint64_t v41 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v56 + 16))(v4, v39, v2);
    __chkstk_darwin(v41);
    *(&v53 - 4) = v38;
    *(&v53 - 3) = (uint64_t)v7;
    *(&v53 - 2) = (uint64_t)v4;
    OS_dispatch_queue.sync<A>(execute:)(sub_1000901D4, &v53 - 6, &type metadata for Bool);
    int v42 = v57;
    (*(void (**)(char *, uint64_t))(v40 + 8))(v4, v2);
    swift_release();
    uint64_t v43 = (*(uint64_t (**)(char *, uint64_t))(v54 + 8))(v7, v55);
    uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
    os_log_type_t v45 = static os_log_type_t.default.getter(v44);
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v46 = 67109120;
      LODWORD(v57) = v42;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, (char *)&v57 + 4, v46 + 4, v46 + 8);
      unint64_t v47 = "shareKey: Removed localstorage cached sharing key %{BOOL}d";
      uint64_t v48 = v44;
      os_log_type_t v49 = v45;
      unint64_t v50 = v46;
      uint32_t v51 = 8;
LABEL_12:
      _os_log_impl((void *)&_mh_execute_header, v48, v49, v47, v50, v51);
      swift_slowDealloc(v46, -1LL, -1LL);
    }
  }

  else
  {
    uint64_t v44 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v52 = static os_log_type_t.error.getter(v44);
    if (os_log_type_enabled(v44, v52))
    {
      uint64_t v46 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v46 = 0;
      unint64_t v47 = "shareKey: unable to get myPersonID to invalidate localstorage cached keys";
      uint64_t v48 = v44;
      os_log_type_t v49 = v52;
      unint64_t v50 = v46;
      uint32_t v51 = 2;
      goto LABEL_12;
    }
  }
}

uint64_t sub_100589AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[8] = a4;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  v4[9] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[10] = v6;
  v4[11] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
  v4[12] = v7;
  uint64_t v8 = sub_100004AEC(&qword_1009B3700);
  *uint64_t v7 = v4;
  v7[1] = sub_100589B50;
  return unsafeBlocking<A>(_:)(v4 + 4, sub_100589FD4, 0LL, v8);
}

uint64_t sub_100589B50()
{
  return swift_task_switch(sub_100589BA4, 0LL, 0LL);
}

uint64_t sub_100589BA4()
{
  uint64_t v1 = v0[4];
  if ((v0[5] & 1) == 0)
  {
    int64_t v11 = *(void *)(v1 + 16);
    uint64_t v12 = _swiftEmptyArrayStorage;
    if (!v11)
    {
LABEL_15:
      swift_retain();
      KeyedThrottle.clearThrottleForKeysExcept(keys:)((Swift::OpaquePointer)v12);
      sub_100044A2C(v1, 0);
      swift_release();
      swift_bridgeObjectRelease();
      goto LABEL_18;
    }

    uint64_t v34 = v0[10];
    uint64_t v38 = _swiftEmptyArrayStorage;
    sub_1000328D0(0, v11, 0);
    uint64_t v12 = _swiftEmptyArrayStorage;
    uint64_t v14 = sub_1006F6728(v1);
    char v16 = v15 & 1;
    uint64_t v35 = v1 + 56;
    uint64_t v33 = v1;
    while ((v14 & 0x8000000000000000LL) == 0 && v14 < 1LL << *(_BYTE *)(v1 + 32))
    {
      if (*(_DWORD *)(v1 + 36) != (_DWORD)v13) {
        goto LABEL_21;
      }
      char v36 = v16;
      uint64_t v37 = v13;
      uint64_t v17 = (void *)(*(void *)(v1 + 48) + 40 * v14);
      uint64_t v18 = v17[2];
      id v19 = v0;
      uint64_t v20 = v17[3];
      uint64_t v21 = v17[4];
      swift_bridgeObjectRetain(v17[1]);
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v21);
      uint64_t v22 = String.utf8Data.getter(v20, v21);
      unint64_t v24 = v23;
      v19[2] = v22;
      v19[3] = v23;
      unint64_t v25 = sub_100042F34();
      DataProtocol.stableUUID.getter(&type metadata for Data, v25);
      sub_100016F9C(v22, v24);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v38 = v12;
      unint64_t v27 = v12[2];
      unint64_t v26 = v12[3];
      if (v27 >= v26 >> 1)
      {
        sub_1000328D0(v26 > 1, v27 + 1, 1);
        uint64_t v12 = v38;
      }

      uint64_t v28 = v19[11];
      uint64_t v29 = v19[9];
      v12[2] = v27 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v34 + 32))( (unint64_t)v12 + ((*(unsigned __int8 *)(v34 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v34 + 80))
      + *(void *)(v34 + 72) * v27,
        v28,
        v29);
      uint64_t v1 = v33;
      uint64_t v30 = sub_1001FE5FC(v14, v37, v36 & 1, v33);
      uint64_t v14 = v30;
      char v16 = v31 & 1;
      --v11;
      uint64_t v0 = v19;
      if (!v11)
      {
        sub_100086B14(v30, v13, v16);
        goto LABEL_15;
      }
    }

    __break(1u);
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  swift_errorRetain(v0[4]);
  if (qword_10099B5E0 != -1) {
LABEL_22:
  }
    swift_once(&qword_10099B5E0, sub_1005C6624);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2AE08);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (void *)swift_slowAlloc(32LL, -1LL);
    uint64_t v38 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    v0[6] = v1;
    swift_errorRetain(v1);
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v9 = String.init<A>(describing:)(v0 + 6, v8);
    v0[7] = sub_1003F11D4(v9, v10, (uint64_t *)&v38);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    sub_100044A2C(v1, 1);
    sub_100044A2C(v1, 1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unable to get follower handles %s", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    sub_100044A2C(v1, 1);
  }

  else
  {
    sub_100044A2C(v1, 1);
    sub_100044A2C(v1, 1);
    swift_errorRelease(v1);
  }

  sub_100044A2C(v1, 1);
LABEL_18:
  swift_task_dealloc(v0[11]);
  return ((uint64_t (*)(void))v0[1])();
}

void sub_100589FD4(uint64_t a1@<X8>)
{
  id v2 = objc_allocWithZone(&OBJC_CLASS___NSError);
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 initWithDomain:v3 code:0 userInfo:0];

  *(void *)a1 = v4;
  *(_BYTE *)(a1 + 8) = 1;
}

uint64_t sub_10058A05C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = type metadata accessor for DispatchTime(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = &v30[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v4);
  uint64_t v8 = &v30[-v7 - 8];
  uint64_t v9 = dispatch_group_create();
  dispatch_group_enter(v9);
  unint64_t v10 = (void *)swift_allocObject(&unk_100964708, 64LL, 7LL);
  v10[2] = 0LL;
  v10[3] = 0LL;
  v10[4] = 0LL;
  v10[6] = 0LL;
  v10[7] = 0LL;
  v10[5] = 0xF000000000000000LL;
  uint64_t v11 = swift_allocObject(&unk_100964730, 32LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v10;
  *(void *)(v11 + 24) = v9;
  swift_retain();
  uint64_t v12 = v9;
  sub_100585AC0();
  uint64_t v13 = swift_release();
  static DispatchTime.now()(v13);
  + infix(_:_:)(v6, 60.0);
  uint64_t v14 = *(void (**)(char *, uint64_t))(v3 + 8);
  v14(v6, v2);
  uint64_t v15 = OS_dispatch_group.wait(timeout:)(v8) & 1;
  v14(v8, v2);
  if ((static DispatchTimeoutResult.== infix(_:_:)(v15, 1LL) & 1) != 0)
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    uint64_t v17 = sub_10000A720(v16, (uint64_t)qword_100A2AE08);
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.default.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, v19, "keysForFriends: sync - timed out waiting for keys", v20, 2u);
      swift_slowDealloc(v20, -1LL, -1LL);
      uint64_t v21 = (os_log_s *)v12;
      uint64_t v12 = (dispatch_group_s *)v18;
    }

    else
    {
      uint64_t v21 = v18;
    }
  }

  swift_beginAccess(v10 + 2, v30, 0LL, 0LL);
  uint64_t v22 = v10[2];
  uint64_t v23 = v10[3];
  uint64_t v24 = v10[4];
  unint64_t v25 = v10[5];
  uint64_t v26 = v10[6];
  uint64_t v27 = v10[7];
  sub_100593C68( v22,  v23,  v24,  v25,  v26,  v27,  (void (*)(void))sub_1002DDE24,  (void (*)(uint64_t, unint64_t))sub_10001736C,  (uint64_t (*)(uint64_t, uint64_t))sub_100018BE4);
  uint64_t result = swift_release();
  *a1 = v22;
  a1[1] = v23;
  a1[2] = v24;
  a1[3] = v25;
  a1[4] = v26;
  a1[5] = v27;
  return result;
}

void sub_10058A2FC(uint64_t a1, uint64_t a2, void *a3, dispatch_group_s *a4)
{
  uint64_t v7 = (uint64_t)(a3 + 2);
  swift_beginAccess(a3 + 2, v14, 1LL, 0LL);
  uint64_t v8 = a3[2];
  uint64_t v9 = a3[3];
  uint64_t v10 = a3[4];
  unint64_t v11 = a3[5];
  uint64_t v13 = a3[6];
  uint64_t v12 = a3[7];
  sub_100015750(a1, v7, &qword_1009A6630);
  sub_100593C1C( a1,  (void (*)(void))sub_1002DDE24,  (void (*)(uint64_t, unint64_t))sub_10001736C,  (uint64_t (*)(uint64_t, uint64_t))sub_100018BE4);
  sub_100593C68( v8,  v9,  v10,  v11,  v13,  v12,  (void (*)(void))sub_1002DDE20,  (void (*)(uint64_t, unint64_t))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
  dispatch_group_leave(a4);
}

uint64_t sub_10058A3E0( uint64_t a1, uint64_t a2, uint64_t a3, void *a4, uint64_t a5, unint64_t a6, uint64_t a7, uint64_t (*a8)(uint64_t), uint64_t a9)
{
  uint64_t v63 = a5;
  unint64_t v64 = a6;
  uint64_t v15 = type metadata accessor for HashAlgorithm(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v60 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100015750(a1, (uint64_t)&v68, &qword_1009A6630);
  if (*((void *)&v69 + 1) >> 60 == 15LL)
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    sub_10000A720(v19, (uint64_t)qword_100A2AE08);
    swift_errorRetain(a2);
    uint64_t v20 = swift_errorRetain(a2);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = swift_slowAlloc(22LL, -1LL);
      uint64_t v24 = swift_slowAlloc(64LL, -1LL);
      *(void *)&v71[0] = v24;
      *(_DWORD *)uint64_t v23 = 136315394;
      *(void *)&v72[0] = sub_1003F11D4(0xD000000000000042LL, 0x8000000100868F40LL, (uint64_t *)v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v72, (char *)v72 + 8, v23 + 4, v23 + 12);
      *(_WORD *)(v23 + 12) = 2080;
      *(void *)&v72[0] = a2;
      swift_errorRetain(a2);
      uint64_t v25 = sub_100004AEC(&qword_10099C678);
      uint64_t v26 = String.init<A>(describing:)(v72, v25);
      *(void *)&v72[0] = sub_1003F11D4(v26, v27, (uint64_t *)v71);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v72, (char *)v72 + 8, v23 + 14, v23 + 22);
      swift_bridgeObjectRelease();
      swift_errorRelease(a2);
      swift_errorRelease(a2);
      _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "shareKey: Error getting key for %s, %s",  (uint8_t *)v23,  0x16u);
      swift_arrayDestroy(v24, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(a2);
      swift_errorRelease(a2);
    }

    return a8(a2);
  }

  else
  {
    v60[1] = a7;
    uint64_t v62 = a9;
    v71[0] = v68;
    v71[1] = v69;
    v71[2] = v70;
    v72[0] = v69;
    __int128 v28 = v69;
    uint64_t v61 = a1;
    sub_100593C1C( a1,  (void (*)(void))sub_1002DDE24,  (void (*)(uint64_t, unint64_t))sub_10001736C,  (uint64_t (*)(uint64_t, uint64_t))sub_100018BE4);
    sub_100018BF8((uint64_t)v72);
    uint64_t v29 = sub_1004DFCF0(v28, *((uint64_t *)&v28 + 1));
    uint64_t v31 = v30;
    uint64_t v32 = a8;
    sub_100164F64((uint64_t)v72);
    sub_1001782E4(v29, v31);
    uint64_t v33 = v67[0];
    unint64_t v34 = v67[1];
    (*(void (**)(char *, void, uint64_t))(v16 + 104))(v18, enum case for HashAlgorithm.sha256(_:), v15);
    uint64_t v35 = Data.hash(algorithm:)(v18, v33, v34);
    unint64_t v37 = v36;
    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    sub_100016F9C(v33, v34);
    Swift::String v38 = Data.base64EncodedString(options:)(0LL);
    sub_100016F9C(v35, v37);
    BOOL v39 = v38._countAndFlagsBits == a3 && v38._object == a4;
    if (v39 || (_stringCompareWithSmolCheck(_:_:expecting:)(v38._countAndFlagsBits, v38._object, a3, a4, 0LL) & 1) != 0)
    {
      uint64_t v40 = v32;
      swift_bridgeObjectRelease();
      uint64_t v41 = v61;
      if (qword_10099B5E0 != -1) {
        swift_once(&qword_10099B5E0, sub_1005C6624);
      }
      uint64_t v42 = type metadata accessor for Logger(0LL);
      uint64_t v43 = sub_10000A720(v42, (uint64_t)qword_100A2AE08);
      uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
      os_log_type_t v45 = static os_log_type_t.debug.getter(v44);
      if (os_log_type_enabled(v44, v45))
      {
        uint64_t v46 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v46 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v44,  v45,  "shareKey: all good - subscribedId is same as currentLocationId.",  v46,  2u);
        swift_slowDealloc(v46, -1LL, -1LL);
      }

      v40(0LL);
      return sub_100593C1C( v41,  (void (*)(void))sub_1002DDE20,  (void (*)(uint64_t, unint64_t))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
    }

    else
    {
      uint64_t v48 = (uint64_t)v32;
      if (qword_10099B5E0 != -1) {
        swift_once(&qword_10099B5E0, sub_1005C6624);
      }
      uint64_t v49 = type metadata accessor for Logger(0LL);
      sub_10000A720(v49, (uint64_t)qword_100A2AE08);
      swift_bridgeObjectRetain_n(a4, 2LL);
      unint64_t v50 = v64;
      swift_bridgeObjectRetain_n(v64, 2LL);
      swift_bridgeObjectRetain(v38._object);
      os_log_type_t v52 = (os_log_s *)Logger.logObject.getter(v51);
      os_log_type_t v53 = static os_log_type_t.default.getter(v52);
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = swift_slowAlloc(32LL, -1LL);
        v60[0] = swift_slowAlloc(96LL, -1LL);
        v67[0] = v60[0];
        *(_DWORD *)uint64_t v54 = 136315650;
        swift_bridgeObjectRetain(a4);
        uint64_t v65 = sub_1003F11D4(a3, (unint64_t)a4, v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v54 + 4, v54 + 12);
        swift_bridgeObjectRelease_n(a4, 3LL);
        *(_WORD *)(v54 + 12) = 2080;
        swift_bridgeObjectRetain(v38._object);
        uint64_t v65 = sub_1003F11D4(v38._countAndFlagsBits, (unint64_t)v38._object, v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v54 + 14, v54 + 22);
        swift_bridgeObjectRelease_n(v38._object, 3LL);
        *(_WORD *)(v54 + 22) = 2080;
        swift_bridgeObjectRetain(v50);
        uint64_t v55 = v63;
        uint64_t v65 = sub_1003F11D4(v63, v50, v67);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v65, &v66, v54 + 24, v54 + 32);
        swift_bridgeObjectRelease_n(v50, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v52,  v53,  "shareKey: locationId mismatch. subscribedId %s current %s Sending current keys to %s",  (uint8_t *)v54,  0x20u);
        uint64_t v56 = v60[0];
        swift_arrayDestroy(v60[0], 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v56, -1LL, -1LL);
        swift_slowDealloc(v54, -1LL, -1LL);

        uint64_t v57 = v62;
      }

      else
      {

        swift_bridgeObjectRelease_n(v50, 2LL);
        swift_bridgeObjectRelease_n(v38._object, 2LL);
        swift_bridgeObjectRelease_n(a4, 2LL);
        uint64_t v57 = v62;
        uint64_t v55 = v63;
      }

      uint64_t v58 = sub_100004AEC(&qword_1009AF520);
      uint64_t v59 = swift_allocObject(v58, 48LL, 7LL);
      *(_OWORD *)(v59 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      *(void *)(v59 + 32) = v55;
      *(void *)(v59 + 40) = v50;
      swift_bridgeObjectRetain(v50);
      sub_10058AC6C(v59, (uint64_t)_swiftEmptyDictionarySingleton, 0, v48, v57);
      swift_bridgeObjectRelease();
      if (qword_10099B850 != -1) {
        swift_once(&qword_10099B850, sub_1006BAC84);
      }
      swift_retain();
      sub_1006BE600();
      sub_100593C1C( v61,  (void (*)(void))sub_1002DDE20,  (void (*)(uint64_t, unint64_t))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
      return swift_release();
    }
  }

void sub_10058AC6C(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = sub_10000A720(v12, (uint64_t)qword_100A2AE08);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.debug.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    char v29 = a3;
    uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v28 = a5;
    uint64_t v17 = a1;
    uint64_t v18 = a2;
    uint64_t v19 = swift_slowAlloc(32LL, -1LL);
    uint64_t v31 = v19;
    *(_DWORD *)uint64_t v16 = 136315138;
    uint64_t v30 = sub_1003F11D4(0xD000000000000051LL, 0x8000000100868BD0LL, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v16 + 4, v16 + 12);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "%s", v16, 0xCu);
    swift_arrayDestroy(v19, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v20 = v19;
    a2 = v18;
    a1 = v17;
    a5 = v28;
    swift_slowDealloc(v20, -1LL, -1LL);
    uint64_t v21 = v16;
    a3 = v29;
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  if (qword_10099BA48 != -1) {
    swift_once(&qword_10099BA48, sub_1007C7B1C);
  }
  uint64_t v22 = swift_retain();
  AnyCurrentValuePublisher.value.getter(&v31, v22);
  uint64_t v23 = swift_release();
  if (v31 == 1)
  {
    uint64_t v24 = swift_allocObject(&unk_1009643C0, 57LL, 7LL);
    *(void *)(v24 + swift_weakDestroy(v0 + 16) = v6;
    *(void *)(v24 + 24) = a4;
    *(void *)(v24 + 32) = a5;
    *(void *)(v24 + 40) = a1;
    *(void *)(v24 + 48) = a2;
    *(_BYTE *)(v24 + 56) = a3 & 1;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a2);
    sub_100585AC0();
    swift_release();
  }

  else
  {
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      unint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v27 = 0;
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "shareKey: Not sending keys since its not meDevice.", v27, 2u);
      swift_slowDealloc(v27, -1LL, -1LL);
    }
  }

uint64_t sub_10058AF64( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, int a8)
{
  int v29 = a8;
  uint64_t v28 = a2;
  uint64_t v30 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v34 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  os_log_type_t v15 = (char *)&v28 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v32 = *(void *)(v16 - 8);
  uint64_t v33 = v16;
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v28 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_keySharingQueue);
  uint64_t v19 = swift_allocObject(&unk_1009643E8, 120LL, 7LL);
  *(void *)(v19 + swift_weakDestroy(v0 + 16) = a3;
  *(void *)(v19 + 24) = a4;
  *(void *)(v19 + 32) = a5;
  sub_100015750(a1, v19 + 40, &qword_1009A6630);
  *(void *)(v19 + 88) = a6;
  *(void *)(v19 + 96) = a7;
  *(_BYTE *)(v19 + 104) = v29;
  uint64_t v20 = v28;
  *(void *)(v19 + 112) = v28;
  aBlock[4] = sub_100593B18;
  void aBlock[5] = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100964400;
  uint64_t v21 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  sub_100593C1C( a1,  (void (*)(void))sub_1002DDE24,  (void (*)(uint64_t, unint64_t))sub_10001736C,  (uint64_t (*)(uint64_t, uint64_t))sub_100018BE4);
  swift_bridgeObjectRetain(a6);
  swift_bridgeObjectRetain(a7);
  uint64_t v22 = swift_errorRetain(v20);
  static DispatchQoS.unspecified.getter(v22);
  uint64_t v35 = _swiftEmptyArrayStorage;
  uint64_t v23 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v24 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v25 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v26 = v30;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v35, v24, v25, v30, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v18, v15, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v15, v26);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v18, v33);
  return swift_release();
}

void sub_10058B1EC( uint64_t a1, void (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, int a7, uint64_t a8)
{
  uint64_t v119 = a8;
  int v102 = a7;
  uint64_t v118 = a6;
  uint64_t v99 = a5;
  uint64_t v115 = a2;
  uint64_t v117 = type metadata accessor for UUID(0LL);
  uint64_t v116 = *(void *)(v117 - 8);
  __chkstk_darwin(v117);
  uint64_t v12 = (char *)&v95 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v114 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v13 = *(void *)(v114 - 8);
  __chkstk_darwin(v114);
  os_log_type_t v15 = (char *)&v95 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v113 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v112 = (char *)&v95 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v111 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v110 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  uint64_t v109 = (char *)&v95 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100004AEC(&qword_1009B28E0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v95 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_100004AEC(&qword_1009A34B0);
  OS_dispatch_queue.sync<A>(execute:)(sub_100263FD0, a1, v22);
  uint64_t v23 = *((void *)&v131 + 1);
  if (*((void *)&v131 + 1))
  {
    uint64_t v24 = v131;
    sub_100015750(a4, (uint64_t)&v128, &qword_1009A6630);
    uint64_t v105 = a3;
    uint64_t v106 = v16;
    if (*((void *)&v129 + 1) >> 60 == 15LL) {
      goto LABEL_4;
    }
    uint64_t v108 = v24;
    uint64_t v98 = a4;
    __int128 v131 = v128;
    __int128 v132 = v129;
    __int128 v133 = v130;
    sub_100015750((uint64_t)&v133, (uint64_t)v134, &qword_1009A70F8);
    sub_100015750((uint64_t)v134, (uint64_t)&v135, &qword_1009A70F8);
    uint64_t v25 = v136;
    if (v136 >> 60 == 15)
    {
LABEL_4:
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v107 = v135;
      uint64_t v65 = a1 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedSharingKey;
      swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedSharingKey, v120, 0LL, 0LL);
      sub_10001581C(v65, (uint64_t)v21, &qword_1009B28E0);
      uint64_t v66 = type metadata accessor for SecureLocationsCachedSharingKey(0LL);
      if (!(*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v66 - 8) + 48LL))(v21, 1LL, v66))
      {
        unint64_t v96 = v15;
        uint64_t v97 = v13;
        uint64_t v67 = *(void *)&v21[*(int *)(v66 + 28)];
        sub_100593C1C( v98,  (void (*)(void))sub_1002DDE24,  (void (*)(uint64_t, unint64_t))sub_10001736C,  (uint64_t (*)(uint64_t, uint64_t))sub_100018BE4);
        sub_100018BB8((uint64_t)v134);
        sub_100015794((uint64_t)v21, &qword_1009B28E0);
        uint64_t v68 = swift_allocObject(&unk_100964578, 24LL, 7LL);
        *(void *)(v68 + swift_weakDestroy(v0 + 16) = 0LL;
        uint64_t v69 = *(void *)(v99 + 16);
        if (v69)
        {
          uint64_t v95 = v68;
          uint64_t v104 = v68 + 16;
          uint64_t v103 = OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_keySharingThrottle;
          v102 &= 1u;
          swift_bridgeObjectRetain(v99);
          uint64_t v71 = (uint64_t *)(v70 + 40);
          uint64_t v101 = v25;
          uint64_t v100 = v67;
          do
          {
            uint64_t v73 = *(v71 - 1);
            uint64_t v72 = *v71;
            swift_bridgeObjectRetain(*v71);
            uint64_t v74 = String.utf8Data.getter(v73, v72);
            unint64_t v76 = v75;
            unsigned __int128 aBlock = (void **)v74;
            uint64_t v123 = v75;
            unint64_t v77 = sub_100042F34();
            DataProtocol.stableUUID.getter(&type metadata for Data, v77);
            uint64_t v78 = sub_100016F9C(v74, v76);
            __chkstk_darwin(v78);
            *(&v95 - 14) = v118;
            *(&v95 - 13) = v73;
            *(&v95 - 12) = v72;
            *(&v95 - 11) = a1;
            *(&v95 - 10) = v104;
            *(&v95 - 9) = (uint64_t)v12;
            *(&v95 - 8) = v108;
            *(&v95 - 7) = v23;
            uint64_t v79 = v107;
            *(&v95 - 6) = v100;
            *(&v95 - 5) = v79;
            *(&v95 - 4) = v101;
            *(&v95 - 3) = (uint64_t)&v131;
            *((_BYTE *)&v95 - swift_weakDestroy(v0 + 16) = v102;
            *(&v95 - 1) = v119;
            swift_retain();
            KeyedThrottle.throttle(key:block:)(v12, sub_100593BC0, &v95 - 16);
            swift_release();
            swift_bridgeObjectRelease();
            (*(void (**)(char *, uint64_t))(v116 + 8))(v12, v117);
            v71 += 2;
            --v69;
          }

          while (v69);
          swift_bridgeObjectRelease();
          uint64_t v80 = v105;
          unint64_t v81 = v115;
          uint64_t v82 = v114;
          uint64_t v68 = v95;
        }

        else
        {
          uint64_t v80 = a3;
          unint64_t v81 = v115;
          uint64_t v82 = v114;
        }

        swift_bridgeObjectRelease();
        sub_100004AB0();
        uint64_t v83 = v110;
        uint64_t v84 = v109;
        uint64_t v85 = v111;
        (*(void (**)(char *, void, uint64_t))(v110 + 104))( v109,  enum case for DispatchQoS.QoSClass.default(_:),  v111);
        uint64_t v86 = (void *)static OS_dispatch_queue.global(qos:)(v84);
        (*(void (**)(char *, uint64_t))(v83 + 8))(v84, v85);
        unint64_t v87 = (void *)swift_allocObject(&unk_1009645A0, 40LL, 7LL);
        v87[2] = v81;
        v87[3] = v80;
        v87[4] = v68;
        uint64_t v126 = sub_10020F9D4;
        unint64_t v127 = v87;
        unsigned __int128 aBlock = _NSConcreteStackBlock;
        uint64_t v123 = 1107296256LL;
        os_log_t v124 = sub_1001C31E8;
        uint64_t v125 = &unk_1009645B8;
        uint64_t v88 = _Block_copy(&aBlock);
        swift_retain();
        uint64_t v89 = swift_retain();
        uint64_t v90 = v112;
        static DispatchQoS.unspecified.getter(v89);
        unint64_t v121 = _swiftEmptyArrayStorage;
        uint64_t v91 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v92 = sub_100004AEC((uint64_t *)&unk_1009AB860);
        uint64_t v93 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v94 = v96;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v121, v92, v93, v82, v91);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v90, v94, v88);
        sub_100164F90((uint64_t)v134);
        _Block_release(v88);

        sub_100593C1C( v98,  (void (*)(void))sub_1002DDE20,  (void (*)(uint64_t, unint64_t))sub_100016F9C,  (uint64_t (*)(uint64_t, uint64_t))sub_1000182F0);
        (*(void (**)(char *, uint64_t))(v97 + 8))(v94, v82);
        (*(void (**)(char *, uint64_t))(v113 + 8))(v90, v106);
        swift_release();
        goto LABEL_13;
      }

      swift_bridgeObjectRelease();
      sub_100015794((uint64_t)v21, &qword_1009B28E0);
    }

    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v26 = type metadata accessor for Logger(0LL);
    uint64_t v27 = sub_10000A720(v26, (uint64_t)qword_100A2AE08);
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "shareKey: Unable to get keys to send to followers", v30, 2u);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    uint64_t v31 = v15;
    uint64_t v32 = v114;

    if (qword_10099B850 != -1) {
      swift_once(&qword_10099B850, sub_1006BAC84);
    }
    uint64_t v33 = qword_100A2B210;
    uint64_t v34 = *(dispatch_queue_s **)(qword_100A2B210 + 16);
    uint64_t v35 = (void *)swift_allocObject(&unk_1009644B0, 40LL, 7LL);
    v35[2] = v33;
    v35[3] = 0xD000000000000010LL;
    v35[4] = 0x8000000100868C30LL;
    uint64_t v36 = swift_allocObject(&unk_1009644D8, 32LL, 7LL);
    *(void *)(v36 + swift_weakDestroy(v0 + 16) = sub_10033A57C;
    *(void *)(v36 + 24) = v35;
    uint64_t v126 = sub_100154688;
    unint64_t v127 = (void *)v36;
    unsigned __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v123 = 1107296256LL;
    os_log_t v124 = sub_100025BD4;
    uint64_t v125 = &unk_1009644F0;
    unint64_t v37 = _Block_copy(&aBlock);
    swift_retain_n(v33, 2LL);
    swift_retain();
    swift_release();
    dispatch_sync(v34, v37);
    _Block_release(v37);
    LOBYTE(v34) = swift_isEscapingClosureAtFileLocation(v36, "", 110LL, 308LL, 38LL, 1LL);
    swift_release();
    swift_release();
    swift_release();
    if ((v34 & 1) == 0)
    {
      sub_100004AB0();
      uint64_t v38 = v110;
      BOOL v39 = v109;
      uint64_t v40 = v111;
      (*(void (**)(char *, void, uint64_t))(v110 + 104))( v109,  enum case for DispatchQoS.QoSClass.default(_:),  v111);
      uint64_t v41 = (void *)static OS_dispatch_queue.global(qos:)(v39);
      (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
      uint64_t v42 = swift_allocObject(&unk_100964528, 32LL, 7LL);
      uint64_t v43 = v105;
      *(void *)(v42 + swift_weakDestroy(v0 + 16) = v115;
      *(void *)(v42 + 24) = v43;
      uint64_t v126 = sub_100593B94;
      unint64_t v127 = (void *)v42;
      unsigned __int128 aBlock = _NSConcreteStackBlock;
      uint64_t v123 = 1107296256LL;
      os_log_t v124 = sub_1001C31E8;
      uint64_t v125 = &unk_100964540;
      uint64_t v44 = _Block_copy(&aBlock);
      uint64_t v45 = swift_retain();
      uint64_t v46 = v112;
      static DispatchQoS.unspecified.getter(v45);
      unint64_t v121 = _swiftEmptyArrayStorage;
      uint64_t v47 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v48 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v49 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v121, v48, v49, v32, v47);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v46, v31, v44);
      _Block_release(v44);

      (*(void (**)(char *, uint64_t))(v13 + 8))(v31, v32);
      (*(void (**)(char *, uint64_t))(v113 + 8))(v46, v106);
LABEL_13:
      swift_release();
      return;
    }

    __break(1u);
    goto LABEL_30;
  }

  if (qword_10099B5E0 != -1) {
LABEL_30:
  }
    swift_once(&qword_10099B5E0, sub_1005C6624);
  uint64_t v50 = type metadata accessor for Logger(0LL);
  uint64_t v51 = sub_10000A720(v50, (uint64_t)qword_100A2AE08);
  os_log_type_t v52 = (os_log_s *)Logger.logObject.getter(v51);
  os_log_type_t v53 = static os_log_type_t.default.getter(v52);
  if (os_log_type_enabled(v52, v53))
  {
    uint64_t v54 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v54 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v52,  v53,  "shareKey: Unable to get my own person ID. Not sending keys",  v54,  2u);
    swift_slowDealloc(v54, -1LL, -1LL);
  }

  if (qword_10099B850 != -1) {
    swift_once(&qword_10099B850, sub_1006BAC84);
  }
  uint64_t v55 = qword_100A2B210;
  uint64_t v56 = *(dispatch_queue_s **)(qword_100A2B210 + 16);
  uint64_t v57 = swift_allocObject(&unk_100964438, 40LL, 7LL);
  *(void *)(v57 + swift_weakDestroy(v0 + 16) = v55;
  strcpy((char *)(v57 + 24), "No MyPersonID");
  *(_WORD *)(v57 + 38) = -4864;
  uint64_t v58 = swift_allocObject(&unk_100964460, 32LL, 7LL);
  *(void *)(v58 + swift_weakDestroy(v0 + 16) = sub_1003391E4;
  *(void *)(v58 + 24) = v57;
  *(void *)&__int128 v133 = sub_100095030;
  *((void *)&v133 + 1) = v58;
  *(void *)&__int128 v131 = _NSConcreteStackBlock;
  *((void *)&v131 + 1) = 1107296256LL;
  *(void *)&__int128 v132 = sub_100025BD4;
  *((void *)&v132 + 1) = &unk_100964478;
  uint64_t v59 = _Block_copy(&v131);
  swift_retain_n(v55, 2LL);
  swift_retain();
  swift_release();
  dispatch_sync(v56, v59);
  _Block_release(v59);
  LOBYTE(v56) = swift_isEscapingClosureAtFileLocation(v58, "", 110LL, 308LL, 38LL, 1LL);
  swift_release();
  swift_release();
  swift_release();
  if ((v56 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    type metadata accessor for SecureLocationsError(0LL);
    uint64_t v61 = v60;
    *(void *)&__int128 v128 = 3LL;
    unint64_t v62 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v63 = sub_100007864( &qword_10099C110,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E3038);
    _BridgedStoredNSError.init(_:userInfo:)(&v131, &v128, v62, v61, v63);
    unint64_t v64 = (void *)v131;
    v115(v131);
  }

void sub_10058BFE0(void (*a1)(void *))
{
  uint64_t v3 = v2;
  uint64_t v7 = 3LL;
  unint64_t v4 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v5 = sub_100007864( &qword_10099C110,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E3038);
  _BridgedStoredNSError.init(_:userInfo:)(&v8, &v7, v4, v3, v5);
  uint64_t v6 = v8;
  a1(v8);
}

uint64_t sub_10058C088( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t *a5, uint64_t a6, uint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11, uint64_t a12, char a13, uint64_t a14)
{
  uint64_t v221 = a7;
  uint64_t v220 = a6;
  uint64_t v226 = a5;
  uint64_t v219 = type metadata accessor for HashAlgorithm(0LL);
  uint64_t v218 = *(void *)(v219 - 8);
  __chkstk_darwin(v219);
  uint64_t v217 = (char *)v216 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100004AEC(&qword_1009A9BF0);
  uint64_t v21 = __chkstk_darwin(v20);
  v230 = (char *)v216 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v21);
  v229 = (char *)v216 - v23;
  uint64_t v24 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v24);
  uint64_t v225 = (char *)v216 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = *(void *)(a1 + 16);
  uint64_t v27 = (uint64_t)&type metadata for ();
  uint64_t v228 = a3;
  uint64_t v233 = a4;
  uint64_t v224 = a2;
  uint64_t v222 = a8;
  if (!v26) {
    goto LABEL_10;
  }
  swift_bridgeObjectRetain(a3);
  uint64_t v28 = sub_10030CF14(a2, a3);
  if ((v29 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_10:
    id v43 = objc_allocWithZone(&OBJC_CLASS___NSError);
    NSString v44 = String._bridgeToObjectiveC()();

    if (qword_10099B588 != -1) {
      uint64_t v45 = swift_once(&qword_10099B588, sub_100599764);
    }
    uint64_t v46 = qword_1009B3860;
    __chkstk_darwin(v45);
    v215[2] = a2;
    v215[3] = v228;
    uint64_t v47 = sub_100004AEC(&qword_1009AED50);
    v229 = (char *)&type metadata for () + 8;
    OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100593CE0, v215, v46, (char *)&type metadata for () + 8, v47);
    unint64_t v227 = 0LL;
    uint64_t v48 = (unint64_t *)*((void *)v246 + 2);
    if (!v48)
    {
      swift_bridgeObjectRelease();
      if (qword_10099B5E0 != -1) {
        swift_once(&qword_10099B5E0, sub_1005C6624);
      }
      uint64_t v89 = type metadata accessor for Logger(0LL);
      uint64_t v90 = sub_10000A720(v89, (uint64_t)qword_100A2AE08);
      uint64_t v91 = (os_log_s *)Logger.logObject.getter(v90);
      os_log_type_t v92 = static os_log_type_t.default.getter(v91);
      BOOL v93 = os_log_type_enabled(v91, v92);
      unint64_t v87 = v228;
      if (v93)
      {
        uint64_t v94 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v94 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v91,  v92,  "shareKey: No handle found in fmf. Cannot send keys",  v94,  2u);
        swift_slowDealloc(v94, -1LL, -1LL);
      }

      int v240 = 0;
      NSString v242 = 0LL;
      uint64_t v243 = 0LL;
      uint64_t v27 = 0LL;
      unint64_t v81 = 0LL;
      goto LABEL_80;
    }

    uint64_t v225 = v246;
    uint64_t v49 = (unint64_t *)(v246 + 40);
    while (1)
    {
      uint64_t v51 = *(v49 - 1);
      unint64_t v50 = *v49;
      swift_bridgeObjectRetain(*v49);
      swift_bridgeObjectRelease();
      *(void *)&__int128 v250 = v51;
      *((void *)&v250 + 1) = v50;
      uint64_t v248 = 64LL;
      unint64_t v249 = 0xE100000000000000LL;
      unint64_t v52 = sub_1000155F8();
      swift_bridgeObjectRetain(v50);
      LOBYTE(v52) = StringProtocol.contains<A>(_:)( &v248,  &type metadata for String,  &type metadata for String,  v52,  v52);
      uint64_t v231 = v51;
      NSString v53 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      unint64_t v241 = v50;
      NSString v235 = v48;
      id v234 = v49;
      if ((v52 & 1) != 0)
      {
        uint64_t v54 = (void *)IDSCopyIDForEmailAddress(v53);

        if (!v54)
        {
          __break(1u);
LABEL_106:
          __break(1u);
LABEL_107:
          __break(1u);
LABEL_108:
          __break(1u);
          goto LABEL_109;
        }

        int v240 = 0;
      }

      else
      {
        uint64_t v54 = (void *)IDSCopyIDForPhoneNumber(v53);

        if (!v54) {
          goto LABEL_106;
        }
        int v240 = 1;
      }

      NSString v242 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v54);
      uint64_t v243 = v55;

      uint64_t v56 = *(void *)(a4 + 40);
      swift_retain();
      uint64_t v57 = dispatch_group_create();
      uint64_t v58 = swift_allocObject(&unk_1009645F0, 17LL, 7LL);
      *(_BYTE *)(v58 + swift_weakDestroy(v0 + 16) = 0;
      uint64_t v238 = v58 + 16;
      dispatch_group_enter(v57);
      uint64_t v239 = v56;
      uint64_t v59 = *(void *)(v56 + 24);
      uint64_t v60 = swift_allocObject(&unk_100964618, 32LL, 7LL);
      *(void *)(v60 + swift_weakDestroy(v0 + 16) = v58;
      *(void *)(v60 + 24) = v57;
      uint64_t v61 = type metadata accessor for TaskPriority(0LL);
      uint64_t v62 = *(void *)(v61 - 8);
      uint64_t v63 = (uint64_t)v230;
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v62 + 56))(v230, 1LL, 1LL, v61);
      uint64_t v64 = swift_allocObject(&unk_100964640, 80LL, 7LL);
      *(void *)(v64 + swift_weakDestroy(v0 + 16) = 0LL;
      uint64_t v65 = (uint64_t *)(v64 + 16);
      *(void *)(v64 + 24) = 0LL;
      *(void *)(v64 + 32) = sub_100593D0C;
      *(void *)(v64 + 40) = v60;
      *(void *)(v64 + 48) = v59;
      *(_BYTE *)(v64 + 56) = v240;
      uint64_t v66 = v243;
      *(void *)(v64 + 64) = v242;
      *(void *)(v64 + 72) = v66;
      uint64_t v232 = v62;
      LODWORD(v62) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v62 + 48))(v63, 1LL, v61);
      uint64_t v236 = v58;
      swift_retain();
      uint64_t v67 = v57;
      uint64_t v237 = v60;
      swift_retain();
      swift_retain();
      swift_bridgeObjectRetain(v66);
      if ((_DWORD)v62 == 1)
      {
        sub_100015794(v63, &qword_1009A9BF0);
        uint64_t v69 = 0LL;
        uint64_t v70 = *v65;
        if (!*v65) {
          goto LABEL_23;
        }
      }

      else
      {
        unsigned __int8 v76 = TaskPriority.rawValue.getter(v68);
        (*(void (**)(uint64_t, uint64_t))(v232 + 8))(v63, v61);
        uint64_t v69 = v76;
        uint64_t v70 = *v65;
        if (!*v65)
        {
LABEL_23:
          uint64_t v73 = 0LL;
          uint64_t v75 = 0LL;
          goto LABEL_24;
        }
      }

      uint64_t v71 = *(void *)(v64 + 24);
      uint64_t ObjectType = swift_getObjectType(v70);
      swift_unknownObjectRetain(v70);
      uint64_t v73 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v71);
      uint64_t v75 = v74;
      swift_unknownObjectRelease(v70);
LABEL_24:
      uint64_t v77 = v238;
      uint64_t v78 = swift_allocObject(&unk_100964668, 32LL, 7LL);
      *(void *)(v78 + swift_weakDestroy(v0 + 16) = &unk_1009A5FE8;
      *(void *)(v78 + 24) = v64;
      if (v75 | v73)
      {
        v247[0] = 0LL;
        v247[1] = 0LL;
        uint64_t v79 = v247;
        v247[2] = v73;
        v247[3] = v75;
      }

      else
      {
        uint64_t v79 = 0LL;
      }

      a4 = v233;
      swift_task_create(v69 | 0x1C00, v79, v229, &unk_1009AB890, v78);
      swift_release();
      swift_release();
      OS_dispatch_group.wait()();

      swift_beginAccess(v77, &v246, 0LL, 0LL);
      int v80 = *(unsigned __int8 *)(v236 + 16);
      swift_release();
      swift_release();
      if (v80 == 1)
      {
        swift_bridgeObjectRelease();
        unint64_t v81 = v241;
        if (qword_10099B5E0 != -1) {
          swift_once(&qword_10099B5E0, sub_1005C6624);
        }
        uint64_t v95 = type metadata accessor for Logger(0LL);
        sub_10000A720(v95, (uint64_t)qword_100A2AE08);
        unint64_t v96 = v228;
        swift_bridgeObjectRetain_n(v228, 2LL);
        swift_bridgeObjectRetain_n(v81, 2LL);
        uint64_t v98 = (os_log_s *)Logger.logObject.getter(v97);
        os_log_type_t v99 = static os_log_type_t.default.getter(v98);
        if (os_log_type_enabled(v98, v99))
        {
          uint64_t v100 = swift_slowAlloc(42LL, -1LL);
          uint64_t v101 = swift_slowAlloc(64LL, -1LL);
          *(void *)&__int128 v250 = v101;
          *(_DWORD *)uint64_t v100 = 141558787;
          uint64_t v248 = 1752392040LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v100 + 4, v100 + 12);
          *(_WORD *)(v100 + 12) = 2081;
          swift_bridgeObjectRetain(v96);
          uint64_t v248 = sub_1003F11D4(v224, v96, (uint64_t *)&v250);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v100 + 14, v100 + 22);
          swift_bridgeObjectRelease_n(v96, 3LL);
          *(_WORD *)(v100 + 22) = 2160;
          uint64_t v248 = 1752392040LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v100 + 24, v100 + 32);
          *(_WORD *)(v100 + 32) = 2081;
          swift_bridgeObjectRetain(v81);
          uint64_t v248 = sub_1003F11D4(v231, v81, (uint64_t *)&v250);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v100 + 34, v100 + 42);
          swift_bridgeObjectRelease_n(v81, 3LL);
          _os_log_impl( (void *)&_mh_execute_header,  v98,  v99,  "shareKey: Got valid messaging destination from fmf with %{private,mask.hash}s %{private,mask.hash}s",  (uint8_t *)v100,  0x2Au);
          swift_arrayDestroy(v101, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v101, -1LL, -1LL);
          swift_slowDealloc(v100, -1LL, -1LL);
        }

        else
        {

          swift_bridgeObjectRelease_n(v81, 2LL);
          swift_bridgeObjectRelease_n(v96, 2LL);
        }

        goto LABEL_78;
      }

      uint64_t v49 = v234 + 2;
      swift_bridgeObjectRelease();
      uint64_t v48 = (unint64_t *)((char *)v235 - 1);
      unint64_t v81 = v241;
      if (v235 == (unint64_t *)1)
      {
        swift_bridgeObjectRelease();
        if (qword_10099B5E0 != -1) {
          swift_once(&qword_10099B5E0, sub_1005C6624);
        }
        uint64_t v82 = type metadata accessor for Logger(0LL);
        uint64_t v83 = sub_10000A720(v82, (uint64_t)qword_100A2AE08);
        uint64_t v84 = (os_log_s *)Logger.logObject.getter(v83);
        os_log_type_t v85 = static os_log_type_t.default.getter(v84);
        BOOL v86 = os_log_type_enabled(v84, v85);
        unint64_t v87 = v228;
        if (v86)
        {
          uint64_t v88 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v88 = 0;
          _os_log_impl( (void *)&_mh_execute_header,  v84,  v85,  "shareKey: No valid handles found in fmf. Cannot send keys",  v88,  2u);
          swift_slowDealloc(v88, -1LL, -1LL);
        }

        int v240 = 0;
        NSString v242 = 0LL;
        uint64_t v243 = 0LL;
        goto LABEL_79;
      }
    }
  }

  uint64_t v30 = a4;
  uint64_t v31 = *(void *)(*(void *)(a1 + 56) + 8 * v28);
  swift_bridgeObjectRetain(v31);
  swift_bridgeObjectRelease();
  unint64_t v227 = *(void *)(v31 + 16);
  if (!v227)
  {
    swift_bridgeObjectRelease();
    a4 = v30;
    goto LABEL_10;
  }

  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v32 = type metadata accessor for Logger(0LL);
  uint64_t v33 = sub_10000A720(v32, (uint64_t)qword_100A2AE08);
  swift_bridgeObjectRetain_n(v31, 2LL);
  uint64_t v223 = v33;
  uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
  os_log_type_t v36 = static os_log_type_t.default.getter(v35);
  if (os_log_type_enabled(v35, v36))
  {
    unint64_t v37 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v38 = swift_slowAlloc(32LL, -1LL);
    v246 = (char *)v38;
    *(_DWORD *)unint64_t v37 = 136380675;
    swift_bridgeObjectRetain(v31);
    uint64_t v40 = Array.description.getter(v39, &type metadata for String);
    unint64_t v42 = v41;
    swift_bridgeObjectRelease();
    *(void *)&__int128 v250 = sub_1003F11D4(v40, v42, (uint64_t *)&v246);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, (char *)&v250 + 8, v37 + 4, v37 + 12);
    swift_bridgeObjectRelease_n(v31, 2LL);
    uint64_t v27 = (uint64_t)&type metadata for ();
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "shareKey: Valid handles: %{private}s", v37, 0xCu);
    swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v37, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v31, 2LL);
  }

  uint64_t v102 = 0LL;
  unint64_t v81 = 0LL;
  v216[1] = v31;
  uint64_t v103 = (unint64_t *)(v31 + 40);
  v230 = (char *)&type metadata for () + 8;
  uint64_t v104 = v30;
  while (1)
  {
    uint64_t v105 = *(v103 - 1);
    unint64_t v87 = *v103;
    swift_bridgeObjectRetain(*v103);
    swift_bridgeObjectRelease();
    if (__OFADD__(v102, 1LL))
    {
      __break(1u);
      goto LABEL_104;
    }

    id v234 = (unint64_t *)(v102 + 1);
    if (qword_10099B5E8 != -1) {
      swift_once(&qword_10099B5E8, sub_1005C66A4);
    }
    swift_retain();
    uint64_t v106 = v105;
    uint64_t v107 = Data.init(base64Encoded:options:)(v105, v87, 0LL);
    uint64_t v236 = v102;
    NSString v235 = v103;
    if (v108 >> 60 == 15)
    {
      uint64_t v109 = (os_log_s *)Logger.logObject.getter(v107);
      os_log_type_t v110 = static os_log_type_t.default.getter(v109);
      unint64_t v50 = v110;
      if (os_log_type_enabled(v109, v110))
      {
        uint64_t v111 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v111 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v109,  (os_log_type_t)v50,  "failed to decode server provided push identifier",  v111,  2u);
        swift_slowDealloc(v111, -1LL, -1LL);
      }

      swift_release();
    }

    else
    {
      uint64_t v112 = v107;
      unint64_t v50 = v108;
      uint64_t v113 = v225;
      static String.Encoding.utf8.getter(v107);
      uint64_t v114 = String.init(data:encoding:)(v112, v50, v113);
      unint64_t v116 = v115;
      sub_1000182F0(v112, v50);
      swift_release();
      if (v116)
      {
        swift_bridgeObjectRelease();
        goto LABEL_56;
      }
    }

    unint64_t v116 = v87;
    uint64_t v114 = v106;
LABEL_56:
    *(void *)&__int128 v250 = v114;
    *((void *)&v250 + 1) = v116;
    uint64_t v248 = 64LL;
    unint64_t v249 = 0xE100000000000000LL;
    unint64_t v117 = sub_1000155F8();
    swift_bridgeObjectRetain_n(v116, 2LL);
    LOBYTE(v117) = StringProtocol.contains<A>(_:)( &v248,  &type metadata for String,  &type metadata for String,  v117,  v117);
    NSString v118 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    unint64_t v241 = v116;
    uint64_t v231 = v114;
    if ((v117 & 1) != 0)
    {
      uint64_t v119 = (void *)IDSCopyIDForEmailAddress(v118);

      if (!v119) {
        goto LABEL_107;
      }
      int v120 = 0;
    }

    else
    {
      uint64_t v119 = (void *)IDSCopyIDForPhoneNumber(v118);

      if (!v119) {
        goto LABEL_108;
      }
      int v120 = 1;
    }

    NSString v242 = (char *)static String._unconditionallyBridgeFromObjectiveC(_:)(v119);
    uint64_t v243 = v121;

    uint64_t v122 = *(void *)(v104 + 40);
    swift_retain();
    uint64_t v123 = dispatch_group_create();
    uint64_t v124 = swift_allocObject(&unk_1009645F0, 17LL, 7LL);
    *(_BYTE *)(v124 + swift_weakDestroy(v0 + 16) = 0;
    uint64_t v237 = v124 + 16;
    dispatch_group_enter(v123);
    uint64_t v239 = v122;
    uint64_t v125 = *(void *)(v122 + 24);
    uint64_t v126 = swift_allocObject(&unk_100964690, 32LL, 7LL);
    *(void *)(v126 + swift_weakDestroy(v0 + 16) = v124;
    *(void *)(v126 + 24) = v123;
    uint64_t v127 = type metadata accessor for TaskPriority(0LL);
    uint64_t v128 = *(void *)(v127 - 8);
    uint64_t v129 = (uint64_t)v229;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v128 + 56))(v229, 1LL, 1LL, v127);
    uint64_t v130 = swift_allocObject(&unk_1009646B8, 80LL, 7LL);
    *(void *)(v130 + swift_weakDestroy(v0 + 16) = 0LL;
    __int128 v131 = (uint64_t *)(v130 + 16);
    *(void *)(v130 + 24) = 0LL;
    *(void *)(v130 + 32) = sub_100597794;
    *(void *)(v130 + 40) = v126;
    *(void *)(v130 + 48) = v125;
    int v240 = v120;
    *(_BYTE *)(v130 + 56) = v120;
    __int128 v132 = v243;
    *(void *)(v130 + 64) = v242;
    *(void *)(v130 + 72) = v132;
    uint64_t v232 = v128;
    LODWORD(v128) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v128 + 48))(v129, 1LL, v127);
    uint64_t v238 = v124;
    swift_retain();
    __int128 v133 = v123;
    swift_retain();
    swift_retain();
    swift_bridgeObjectRetain(v132);
    if ((_DWORD)v128 == 1)
    {
      sub_100015794(v129, &qword_1009A9BF0);
      uint64_t v135 = 0LL;
      uint64_t v136 = *v131;
      if (*v131) {
        goto LABEL_63;
      }
    }

    else
    {
      unsigned __int8 v141 = TaskPriority.rawValue.getter(v134);
      (*(void (**)(uint64_t, uint64_t))(v232 + 8))(v129, v127);
      uint64_t v135 = v141;
      uint64_t v136 = *v131;
      if (*v131)
      {
LABEL_63:
        uint64_t v137 = *(void *)(v130 + 24);
        uint64_t v138 = swift_getObjectType(v136);
        swift_unknownObjectRetain(v136);
        uint64_t v139 = dispatch thunk of Actor.unownedExecutor.getter(v138, v137);
        uint64_t v27 = v140;
        swift_unknownObjectRelease(v136);
        goto LABEL_66;
      }
    }

    uint64_t v139 = 0LL;
    uint64_t v27 = 0LL;
LABEL_66:
    uint64_t v104 = v233;
    uint64_t v142 = swift_allocObject(&unk_1009646E0, 32LL, 7LL);
    *(void *)(v142 + swift_weakDestroy(v0 + 16) = &unk_1009B36E0;
    *(void *)(v142 + 24) = v130;
    if (v27 | v139)
    {
      v244[0] = 0LL;
      v244[1] = 0LL;
      uint64_t v143 = v244;
      v244[2] = v139;
      v244[3] = v27;
    }

    else
    {
      uint64_t v143 = 0LL;
    }

    swift_task_create(v135 | 0x1C00, v143, v230, &unk_1009B36E8, v142);
    swift_release();
    swift_release();
    OS_dispatch_group.wait()();

    swift_beginAccess(v237, &v246, 0LL, 0LL);
    int v144 = *(unsigned __int8 *)(v238 + 16);
    swift_release();
    swift_release();
    if (v144 == 1) {
      break;
    }
    uint64_t v103 = v235 + 2;
    swift_bridgeObjectRelease();
    unint64_t v81 = v241;
    swift_bridgeObjectRelease();
    uint64_t v102 = v236 + 1;
    if (v234 == (unint64_t *)v227)
    {
      uint64_t v150 = swift_bridgeObjectRelease();
      os_log_t v151 = (os_log_s *)Logger.logObject.getter(v150);
      os_log_type_t v152 = static os_log_type_t.default.getter(v151);
      BOOL v153 = os_log_type_enabled(v151, v152);
      unint64_t v87 = v228;
      if (v153)
      {
        uint64_t v154 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v154 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v151,  v152,  "shareKey: No valid handles found from server. Cannot send keys",  v154,  2u);
        swift_slowDealloc(v154, -1LL, -1LL);
      }

      int v240 = 0;
      NSString v242 = 0LL;
      uint64_t v243 = 0LL;
      unint64_t v227 = 0LL;
      goto LABEL_79;
    }
  }

  swift_bridgeObjectRelease();
  unint64_t v96 = v228;
  swift_bridgeObjectRetain_n(v228, 2LL);
  unint64_t v81 = v241;
  swift_bridgeObjectRetain(v241);
  unint64_t v146 = (os_log_s *)Logger.logObject.getter(v145);
  os_log_type_t v147 = static os_log_type_t.default.getter(v146);
  if (os_log_type_enabled(v146, v147))
  {
    uint64_t v148 = swift_slowAlloc(42LL, -1LL);
    uint64_t v149 = swift_slowAlloc(64LL, -1LL);
    *(void *)&__int128 v250 = v149;
    *(_DWORD *)uint64_t v148 = 141558787;
    uint64_t v248 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v148 + 4, v148 + 12);
    *(_WORD *)(v148 + 12) = 2081;
    swift_bridgeObjectRetain(v96);
    uint64_t v248 = sub_1003F11D4(v224, v96, (uint64_t *)&v250);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v148 + 14, v148 + 22);
    swift_bridgeObjectRelease_n(v96, 3LL);
    *(_WORD *)(v148 + 22) = 2160;
    uint64_t v248 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v148 + 24, v148 + 32);
    *(_WORD *)(v148 + 32) = 2081;
    swift_bridgeObjectRetain(v81);
    uint64_t v27 = v231;
    uint64_t v248 = sub_1003F11D4(v231, v81, (uint64_t *)&v250);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v148 + 34, v148 + 42);
    swift_bridgeObjectRelease_n(v81, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v146,  v147,  "shareKey: Received handle from server with valid messaging destination %{private,mask.hash}s %{private,mask.hash}s",  (uint8_t *)v148,  0x2Au);
    swift_arrayDestroy(v149, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v149, -1LL, -1LL);
    swift_slowDealloc(v148, -1LL, -1LL);

    unint64_t v227 = 0LL;
    unint64_t v87 = v96;
    goto LABEL_80;
  }

  swift_bridgeObjectRelease_n(v81, 2LL);
  swift_bridgeObjectRelease_n(v96, 2LL);
  unint64_t v227 = 0LL;
LABEL_78:
  unint64_t v87 = v96;
LABEL_79:
  uint64_t v27 = v231;
LABEL_80:
  if (qword_10099B5E0 != -1) {
LABEL_104:
  }
    swift_once(&qword_10099B5E0, sub_1005C6624);
  uint64_t v155 = type metadata accessor for Logger(0LL);
  uint64_t v156 = sub_10000A720(v155, (uint64_t)qword_100A2AE08);
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRetain_n(v87, 2LL);
  unint64_t v241 = v156;
  uint64_t v158 = (os_log_s *)Logger.logObject.getter(v157);
  os_log_type_t v159 = static os_log_type_t.default.getter(v158);
  if (os_log_type_enabled(v158, v159))
  {
    unint64_t v160 = v87;
    uint64_t v161 = swift_slowAlloc(42LL, -1LL);
    uint64_t v162 = swift_slowAlloc(64LL, -1LL);
    uint64_t v248 = v162;
    *(_DWORD *)uint64_t v161 = 141558787;
    *(void *)&__int128 v250 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, (char *)&v250 + 8, v161 + 4, v161 + 12);
    *(_WORD *)(v161 + 12) = 2081;
    swift_bridgeObjectRetain(v160);
    *(void *)&__int128 v250 = sub_1003F11D4(v224, v160, &v248);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, (char *)&v250 + 8, v161 + 14, v161 + 22);
    swift_bridgeObjectRelease_n(v160, 3LL);
    *(_WORD *)(v161 + 22) = 2160;
    *(void *)&__int128 v250 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, (char *)&v250 + 8, v161 + 24, v161 + 32);
    *(_WORD *)(v161 + 32) = 2081;
    *(void *)&__int128 v250 = v27;
    *((void *)&v250 + 1) = v81;
    swift_bridgeObjectRetain(v81);
    uint64_t v163 = sub_100004AEC(&qword_1009A34B0);
    uint64_t v164 = String.init<A>(describing:)(&v250, v163);
    *(void *)&__int128 v250 = sub_1003F11D4(v164, v165, &v248);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v250, (char *)&v250 + 8, v161 + 34, v161 + 42);
    swift_bridgeObjectRelease_n(v81, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v158,  v159,  "shareKey: Sending to %{private,mask.hash}s handle %{private,mask.hash}s",  (uint8_t *)v161,  0x2Au);
    swift_arrayDestroy(v162, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v162, -1LL, -1LL);
    swift_slowDealloc(v161, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v81, 2LL);
    swift_bridgeObjectRelease_n(v87, 2LL);
  }

  uint64_t v166 = v226;
  if (v243)
  {
    __int128 v250 = *(_OWORD *)(a12 + 16);
    uint64_t v168 = *((void *)&v250 + 1);
    uint64_t v167 = v250;
    sub_100018BF8((uint64_t)&v250);
    uint64_t v169 = v168;
    unint64_t v50 = v227;
    uint64_t v170 = sub_1004DFCF0(v167, v169);
    if (!v50)
    {
      uint64_t v172 = v170;
      uint64_t v173 = v171;
      sub_100164F64((uint64_t)&v250);
      sub_1001782E4(v172, v173);
      uint64_t v174 = v248;
      unint64_t v175 = v249;
      uint64_t v176 = v218;
      unint64_t v177 = v217;
      uint64_t v178 = v219;
      (*(void (**)(char *, void, uint64_t))(v218 + 104))(v217, enum case for HashAlgorithm.sha256(_:), v219);
      uint64_t v179 = Data.hash(algorithm:)(v177, v174, v175);
      unint64_t v181 = v180;
      (*(void (**)(char *, uint64_t))(v176 + 8))(v177, v178);
      sub_100016F9C(v174, v175);
      uint64_t v182 = v233;
      uint64_t v183 = sub_10058DD0C(v220, v221, v222, v240, v242, v243, a9, a10, a11, v179, v181);
      swift_bridgeObjectRelease();
      sub_100016F9C(v179, v181);
      uint64_t v184 = v226;
      uint64_t v185 = *v226;
      *uint64_t v226 = v183;
      uint64_t v186 = swift_errorRelease(v185);
      if (*v184)
      {
        swift_errorRetain(a14);
        uint64_t v187 = swift_errorRetain(a14);
        unsigned __int128 v188 = (os_log_s *)Logger.logObject.getter(v187);
        os_log_type_t v189 = static os_log_type_t.default.getter(v188);
        if (os_log_type_enabled(v188, v189))
        {
          uint64_t v190 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v191 = swift_slowAlloc(32LL, -1LL);
          uint64_t v248 = v191;
          *(_DWORD *)uint64_t v190 = 136446210;
          uint64_t v245 = a14;
          swift_errorRetain(a14);
          uint64_t v192 = sub_100004AEC(&qword_10099C678);
          uint64_t v193 = String.init<A>(describing:)(&v245, v192);
          uint64_t v245 = sub_1003F11D4(v193, v194, &v248);
          uint64_t v184 = v226;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v245, &v246, v190 + 4, v190 + 12);
          swift_bridgeObjectRelease();
          swift_errorRelease(a14);
          swift_errorRelease(a14);
          _os_log_impl((void *)&_mh_execute_header, v188, v189, "shareKey: sent failed, error: %{public}s", v190, 0xCu);
          swift_arrayDestroy(v191, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v191, -1LL, -1LL);
          swift_slowDealloc(v190, -1LL, -1LL);
        }

        else
        {
          swift_errorRelease(a14);
          swift_errorRelease(a14);
        }
      }

      else
      {
        uint64_t v202 = (os_log_s *)Logger.logObject.getter(v186);
        os_log_type_t v203 = static os_log_type_t.default.getter(v202);
        if (os_log_type_enabled(v202, v203))
        {
          uint64_t v204 = (uint8_t *)swift_slowAlloc(8LL, -1LL);
          *(_DWORD *)uint64_t v204 = 67109120;
          LODWORD(v248) = a13 & 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, (char *)&v248 + 4, v204 + 4, v204 + 8);
          _os_log_impl( (void *)&_mh_execute_header,  v202,  v203,  "shareKey: sent successfully, should force publish proactive location with new key: %{BOOL}d",  v204,  8u);
          swift_slowDealloc(v204, -1LL, -1LL);
        }

        if ((a13 & 1) != 0)
        {
          uint64_t v205 = *(void (**)(uint64_t, uint64_t))(v182 + 16);
          if (v205)
          {
            uint64_t v206 = *(void *)(v182 + 24);
            swift_retain();
            v205(v224, v228);
            sub_10002214C((uint64_t)v205, v206);
          }
        }
      }

      return *v184 == 0;
    }

LABEL_109:
    sub_100164F64((uint64_t)&v250);
    uint64_t v248 = 0LL;
    unint64_t v249 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(35LL);
    v213._countAndFlagsBits = 0xD000000000000021LL;
    v213._object = (void *)0x8000000100854640LL;
    String.append(_:)(v213);
    uint64_t v245 = v50;
    uint64_t v214 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    _print_unlocked<A, B>(_:_:)( &v245,  &v248,  v214,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  v248,  v249,  "searchpartyd/KeyRepresentable.swift",  35LL,  2LL,  256LL,  0);
    __break(1u);
    return result;
  }

  uint64_t v195 = v228;
  swift_bridgeObjectRetain_n(v228, 2LL);
  v197 = (os_log_s *)Logger.logObject.getter(v196);
  os_log_type_t v198 = static os_log_type_t.error.getter(v197);
  if (os_log_type_enabled(v197, v198))
  {
    uint64_t v199 = swift_slowAlloc(22LL, -1LL);
    uint64_t v200 = swift_slowAlloc(32LL, -1LL);
    *(void *)&__int128 v250 = v200;
    *(_DWORD *)uint64_t v199 = 141558275;
    uint64_t v248 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v199 + 4, v199 + 12);
    *(_WORD *)(v199 + 12) = 2081;
    swift_bridgeObjectRetain(v228);
    uint64_t v248 = sub_1003F11D4(v224, v228, (uint64_t *)&v250);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v248, &v249, v199 + 14, v199 + 22);
    swift_bridgeObjectRelease_n(v228, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v197,  v198,  "shareKey: Cannot send keys to %{private,mask.hash}s. No handleIdentifier or destination to send key",  (uint8_t *)v199,  0x16u);
    swift_arrayDestroy(v200, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v201 = v200;
    uint64_t v195 = v228;
    swift_slowDealloc(v201, -1LL, -1LL);
    swift_slowDealloc(v199, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v195, 2LL);
  }

  type metadata accessor for SecureLocationsError(0LL);
  uint64_t v209 = v208;
  uint64_t v248 = 9LL;
  unint64_t v210 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v211 = sub_100007864( &qword_10099C110,  (uint64_t (*)(uint64_t))type metadata accessor for SecureLocationsError,  (uint64_t)&unk_1007E3038);
  _BridgedStoredNSError.init(_:userInfo:)(&v250, &v248, v210, v209, v211);
  uint64_t v212 = *v166;
  *uint64_t v166 = v250;
  swift_errorRelease(v212);
  if (qword_10099B850 != -1) {
    swift_once(&qword_10099B850, sub_1006BAC84);
  }
  swift_retain();
  sub_1006BCFDC(v224, v195, 0xD000000000000019LL, 0x8000000100868C50LL);
  swift_release();
  return 0LL;
}

uint64_t sub_10058DD0C( uint64_t a1, uint64_t a2, uint64_t a3, int a4, char *a5, void *a6, unint64_t a7, uint64_t a8, unint64_t a9, uint64_t a10, unint64_t a11)
{
  uint64_t v49 = a7;
  uint64_t v50 = a8;
  int v48 = a4;
  uint64_t v17 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char **)((char *)&v47 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v21 = *(void **)(v11 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_keySharingQueue);
  *uint64_t v20 = v21;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  id v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)(v20);
  (*(void (**)(void *, uint64_t))(v18 + 8))(v20, v17);
  if ((v21 & 1) != 0)
  {
    swift_retain();
    sub_1001F979C(a1, a2, a3, v48, a5, a6, v49, v50, a9, a10, a11);
    uint64_t v32 = v50;
    swift_release();
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v33 = type metadata accessor for Logger(0LL);
    sub_10000A720(v33, (uint64_t)qword_100A2AE08);
    sub_10001736C(v32, a9);
    sub_10001736C(a10, a11);
    swift_bridgeObjectRetain(a6);
    sub_10001736C(v32, a9);
    sub_10001736C(a10, a11);
    swift_bridgeObjectRetain(a6);
    uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.default.getter(v35);
    int v37 = v36;
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v38 = swift_slowAlloc(62LL, -1LL);
      uint64_t v49 = swift_slowAlloc(96LL, -1LL);
      uint64_t v53 = v49;
      *(_DWORD *)uint64_t v38 = 141559299;
      uint64_t v51 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v38 + 4, v38 + 12);
      *(_WORD *)(v38 + 12) = 2081;
      uint64_t v47 = a5;
      uint64_t v51 = v32;
      unint64_t v52 = a9;
      unint64_t v39 = sub_10017EBF0();
      int v48 = v37;
      uint64_t v40 = RawRepresentable<>.base64EncodedString(options:)(0LL, &type metadata for PrivateKey, v39);
      uint64_t v51 = sub_1003F11D4(v40, v41, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v38 + 14, v38 + 22);
      swift_bridgeObjectRelease();
      sub_100016F9C(v32, a9);
      sub_100016F9C(v32, a9);
      *(_WORD *)(v38 + 22) = 2160;
      uint64_t v51 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v38 + 24, v38 + 32);
      *(_WORD *)(v38 + 32) = 2081;
      uint64_t v51 = a10;
      unint64_t v52 = a11;
      unint64_t v42 = sub_10009BDE4();
      uint64_t v43 = RawRepresentable<>.base64EncodedString(options:)(0LL, &type metadata for HashedAdvertisement, v42);
      uint64_t v51 = sub_1003F11D4(v43, v44, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v38 + 34, v38 + 42);
      swift_bridgeObjectRelease();
      sub_100016F9C(a10, a11);
      sub_100016F9C(a10, a11);
      *(_WORD *)(v38 + 42) = 2160;
      uint64_t v51 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v38 + 44, v38 + 52);
      *(_WORD *)(v38 + 52) = 2081;
      swift_bridgeObjectRetain(a6);
      uint64_t v51 = sub_1003F11D4((uint64_t)v47, (unint64_t)a6, &v53);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v51, &v52, v38 + 54, v38 + 62);
      swift_bridgeObjectRelease_n(a6, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v35,  (os_log_type_t)v48,  "shareKey: Sent key %{private,mask.hash}s with locationId %{private,mask.hash}s to follower %{private,mask.hash}s",  (uint8_t *)v38,  0x3Eu);
      unint64_t v45 = v49;
      swift_arrayDestroy(v49, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v45, -1LL, -1LL);
      swift_slowDealloc(v38, -1LL, -1LL);
    }

    else
    {
      sub_100016F9C(v32, a9);
      sub_100016F9C(v32, a9);
      sub_100016F9C(a10, a11);
      sub_100016F9C(a10, a11);

      swift_bridgeObjectRelease_n(a6, 2LL);
    }

    return 0LL;
  }

  else
  {
    __break(1u);
    swift_once(&qword_10099B5E0, sub_1005C6624);
    uint64_t v23 = type metadata accessor for Logger(0LL);
    sub_10000A720(v23, (uint64_t)qword_100A2AE08);
    swift_errorRetain(a1);
    uint64_t v24 = swift_errorRetain(a1);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      uint64_t v51 = v28;
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v53 = a1;
      swift_errorRetain(a1);
      uint64_t v29 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v30 = String.init<A>(describing:)(&v53, v29);
      uint64_t v53 = sub_1003F11D4(v30, v31, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v53, &v54, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "shareKey: Error sending IDS message: %s", v27, 0xCu);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(a1);
      swift_errorRelease(a1);
    }

    if (qword_10099B850 != -1) {
      swift_once(&qword_10099B850, sub_1006BAC84);
    }
    swift_retain();
    sub_1006BCFDC(a2, v18, 0xD000000000000015LL, 0x8000000100868BB0LL);
    swift_release();
  }

  return a1;
}

uint64_t sub_10058E378(uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t a4)
{
  uint64_t v8 = (void *)swift_allocObject(&unk_100964CD0, 48LL, 7LL);
  v8[2] = a3;
  v8[3] = a4;
  v8[4] = a2;
  v8[5] = a1;
  swift_retain_n(a4, 2LL);
  swift_retain_n(a2, 2LL);
  swift_retain_n(a1, 2LL);
  if ((sub_100582B1C() & 1) != 0)
  {
    sub_10058E544(1, a3, a4, a2, a1);
  }

  else
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v9 = type metadata accessor for Logger(0LL);
    uint64_t v10 = sub_10000A720(v9, (uint64_t)qword_100A2AE08);
    uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
    os_log_type_t v12 = static os_log_type_t.default.getter(v11);
    if (os_log_type_enabled(v11, v12))
    {
      uint64_t v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v13 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "SetupVirtualMeDevice: Waiting on beaconStore to become available",  v13,  2u);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    swift_retain();
    swift_retain();
    uint64_t v14 = swift_retain();
    sub_1005637A4(v14, a2, (uint64_t)sub_100596090, (uint64_t)v8);
    swift_release();
    swift_release();
    swift_release();
  }

  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10058E544(char a1, uint64_t (*a2)(void), uint64_t a3, uint64_t a4, uint64_t a5)
{
  unint64_t v39 = a2;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  os_log_type_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((a1 & 1) != 0)
  {
    uint64_t v38 = a3;
    if (qword_10099B5E8 != -1) {
      swift_once(&qword_10099B5E8, sub_1005C66A4);
    }
    swift_retain();
    char v17 = sub_1005C7C90();
    swift_release();
    if ((v17 & 1) != 0)
    {
      uint64_t v37 = *(void *)(a4 + 48);
      uint64_t v18 = (void *)swift_allocObject(&unk_100964CF8, 48LL, 7LL);
      uint64_t v20 = v38;
      uint64_t v19 = v39;
      void v18[2] = a4;
      v18[3] = v19;
      v18[4] = v20;
      v18[5] = a5;
      aBlock[4] = sub_1005960D0;
      void aBlock[5] = v18;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1001C31E8;
      aBlock[3] = &unk_100964D10;
      uint64_t v21 = _Block_copy(aBlock);
      swift_retain();
      swift_retain();
      uint64_t v22 = swift_retain();
      static DispatchQoS.unspecified.getter(v22);
      uint64_t v40 = _swiftEmptyArrayStorage;
      uint64_t v23 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v24 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v25 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      dispatch thunk of SetAlgebra.init<A>(_:)(&v40, v24, v25, v9, v23);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v16, v12, v21);
      _Block_release(v21);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      return swift_release();
    }

    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v32 = type metadata accessor for Logger(0LL);
    uint64_t v33 = sub_10000A720(v32, (uint64_t)qword_100A2AE08);
    uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
    os_log_type_t v35 = static os_log_type_t.default.getter(v34);
    if (os_log_type_enabled(v34, v35))
    {
      os_log_type_t v36 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v36 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v34,  v35,  "performKeyRoll: Not a me device. Not initiating keyRoll",  v36,  2u);
      swift_slowDealloc(v36, -1LL, -1LL);
    }
  }

  else
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v27 = type metadata accessor for Logger(0LL);
    uint64_t v28 = sub_10000A720(v27, (uint64_t)qword_100A2AE08);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.default.getter(v29);
    if (os_log_type_enabled(v29, v30))
    {
      unint64_t v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v31 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "performKeyRoll: secureLocations not setup. Not proceeding with KeyRoll",  v31,  2u);
      swift_slowDealloc(v31, -1LL, -1LL);
    }
  }

  return v39(0LL);
}

uint64_t sub_10058E920(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v94 = a4;
  uint64_t v110 = a2;
  uint64_t v111 = a3;
  uint64_t v109 = a1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v107 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v106 = (char *)&v93 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v105 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v104 = (char *)&v93 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v102 = *(void *)(v8 - 8);
  uint64_t v103 = v8;
  __chkstk_darwin(v8);
  uint64_t v101 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v98 = type metadata accessor for DispatchTime(0LL);
  uint64_t v97 = *(void *)(v98 - 8);
  uint64_t v10 = __chkstk_darwin(v98);
  uint64_t v95 = (char *)&v93 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  unint64_t v96 = (char *)&v93 - v12;
  uint64_t v13 = sub_100004AEC(&qword_1009A2430);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v93 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v100 = type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v16 = *(void *)(v100 - 8);
  __chkstk_darwin(v100);
  uint64_t v99 = (uint64_t)&v93 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v18);
  uint64_t v20 = (char *)&v93 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for UUID(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v112 = (char *)&v93 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v24 = type metadata accessor for Logger(0LL);
  uint64_t v108 = sub_10000A720(v24, (uint64_t)qword_100A2AE08);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v108);
  os_log_type_t v26 = static os_log_type_t.default.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = v22;
    uint64_t v28 = v21;
    uint64_t v29 = v6;
    uint64_t v30 = v4;
    unint64_t v31 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v31 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "performKeyRoll: Starting ", v31, 2u);
    uint64_t v32 = v31;
    uint64_t v4 = v30;
    uint64_t v6 = v29;
    uint64_t v21 = v28;
    uint64_t v22 = v27;
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  uint64_t v33 = v109;
  sub_100582F48((uint64_t)v20);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21) == 1)
  {
    uint64_t v34 = sub_100015794((uint64_t)v20, &qword_10099D8A0);
    os_log_type_t v35 = (os_log_s *)Logger.logObject.getter(v34);
    os_log_type_t v36 = static os_log_type_t.error.getter(v35);
    if (os_log_type_enabled(v35, v36))
    {
      uint64_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v37 = 0;
      _os_log_impl((void *)&_mh_execute_header, v35, v36, "performKeyRoll: No VirtualMeDevice OBR Identifier", v37, 2u);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    sub_100004AB0();
    unint64_t v39 = v101;
    uint64_t v38 = v102;
    uint64_t v40 = v103;
    (*(void (**)(char *, void, uint64_t))(v102 + 104))( v101,  enum case for DispatchQoS.QoSClass.default(_:),  v103);
    unint64_t v41 = (void *)static OS_dispatch_queue.global(qos:)(v39);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v39, v40);
    uint64_t v42 = swift_allocObject(&unk_100964D48, 32LL, 7LL);
    uint64_t v43 = v111;
    *(void *)(v42 + swift_weakDestroy(v0 + 16) = v110;
    *(void *)(v42 + 24) = v43;
    NSString v118 = sub_10020FF70;
    uint64_t v119 = v42;
    unsigned __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v115 = 1107296256LL;
    unint64_t v116 = sub_1001C31E8;
    unint64_t v117 = &unk_100964D60;
    unint64_t v44 = _Block_copy(&aBlock);
    uint64_t v45 = swift_retain();
    uint64_t v46 = v104;
    static DispatchQoS.unspecified.getter(v45);
    uint64_t v113 = _swiftEmptyArrayStorage;
    uint64_t v47 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v48 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v49 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v50 = v106;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v113, v48, v49, v4, v47);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v46, v50, v44);
    _Block_release(v44);

    (*(void (**)(char *, uint64_t))(v107 + 8))(v50, v4);
    (*(void (**)(char *, uint64_t))(v105 + 8))(v46, v6);
    return swift_release();
  }

  (*(void (**)(char *, char *, uint64_t))(v22 + 32))(v112, v20, v21);
  swift_retain();
  sub_100576BD4((uint64_t)v15);
  swift_release();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v15, 1LL, v100) == 1)
  {
    uint64_t v51 = v22;
    uint64_t v109 = v21;
    uint64_t v52 = sub_100015794((uint64_t)v15, &qword_1009A2430);
    uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
    os_log_type_t v54 = static os_log_type_t.error.getter(v53);
    if (os_log_type_enabled(v53, v54))
    {
      uint64_t v55 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v55 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v53,  v54,  "performKeyRoll: No KeyAlignmentRecord setup for VirtualMeDevice",  v55,  2u);
      swift_slowDealloc(v55, -1LL, -1LL);
    }

    sub_100004AB0();
    uint64_t v57 = v101;
    uint64_t v56 = v102;
    uint64_t v58 = v103;
    (*(void (**)(char *, void, uint64_t))(v102 + 104))( v101,  enum case for DispatchQoS.QoSClass.default(_:),  v103);
    uint64_t v59 = (void *)static OS_dispatch_queue.global(qos:)(v57);
    (*(void (**)(char *, uint64_t))(v56 + 8))(v57, v58);
    uint64_t v60 = swift_allocObject(&unk_100964D98, 32LL, 7LL);
    uint64_t v61 = v111;
    *(void *)(v60 + swift_weakDestroy(v0 + 16) = v110;
    *(void *)(v60 + 24) = v61;
    NSString v118 = sub_10020FF70;
    uint64_t v119 = v60;
    unsigned __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v115 = 1107296256LL;
    unint64_t v116 = sub_1001C31E8;
    unint64_t v117 = &unk_100964DB0;
    uint64_t v62 = _Block_copy(&aBlock);
    uint64_t v63 = swift_retain();
    uint64_t v64 = v104;
    static DispatchQoS.unspecified.getter(v63);
    uint64_t v113 = _swiftEmptyArrayStorage;
    uint64_t v65 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v66 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v67 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v68 = v106;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v113, v66, v67, v4, v65);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v64, v68, v62);
    _Block_release(v62);

    (*(void (**)(char *, uint64_t))(v107 + 8))(v68, v4);
    (*(void (**)(char *, uint64_t))(v105 + 8))(v64, v6);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v112, v109);
    return swift_release();
  }

  uint64_t v70 = v33;
  uint64_t v71 = v22;
  uint64_t v72 = v99;
  sub_10002218C((uint64_t)v15, v99, type metadata accessor for KeyAlignmentRecord);
  uint64_t v73 = dispatch_group_create();
  dispatch_group_enter(v73);
  uint64_t v74 = swift_allocObject(&unk_100964DE8, 56LL, 7LL);
  *(void *)(v74 + swift_weakDestroy(v0 + 16) = v73;
  *(void *)(v74 + 24) = v70;
  uint64_t v75 = v111;
  *(void *)(v74 + 32) = v110;
  *(void *)(v74 + 40) = v75;
  *(void *)(v74 + 48) = v94;
  swift_retain();
  unsigned __int8 v76 = v73;
  swift_retain();
  swift_retain();
  swift_retain();
  sub_1002B52B4( v72,  0,  (void (*)(uint64_t))sub_10058F358,  0LL,  sub_10059613C,  (void (*)(uint64_t))v74);
  swift_release();
  uint64_t v77 = swift_release();
  uint64_t v78 = (os_log_s *)Logger.logObject.getter(v77);
  os_log_type_t v79 = static os_log_type_t.default.getter(v78);
  if (os_log_type_enabled(v78, v79))
  {
    int v80 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)int v80 = 0;
    _os_log_impl((void *)&_mh_execute_header, v78, v79, "performKeyRoll: Waiting to complete KeyRoll", v80, 2u);
    swift_slowDealloc(v80, -1LL, -1LL);
  }

  uint64_t v81 = v21;

  uint64_t v82 = v95;
  static DispatchTime.now()(v83);
  uint64_t v84 = v96;
  + infix(_:_:)(v82, 60.0);
  os_log_type_t v85 = *(void (**)(char *, uint64_t))(v97 + 8);
  BOOL v86 = v82;
  uint64_t v87 = v98;
  v85(v86, v98);
  uint64_t v88 = OS_dispatch_group.wait(timeout:)(v84) & 1;
  v85(v84, v87);
  uint64_t v89 = static DispatchTimeoutResult.== infix(_:_:)(v88, 1LL);
  if ((v89 & 1) != 0)
  {
    uint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
    os_log_type_t v91 = static os_log_type_t.default.getter(v90);
    if (os_log_type_enabled(v90, v91))
    {
      os_log_type_t v92 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v92 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v90,  v91,  "performKeyRoll: Timed out waiting to modify KeyAlignmentRecord",  v92,  2u);
      swift_slowDealloc(v92, -1LL, -1LL);
    }
  }

  else
  {
    uint64_t v90 = (os_log_s *)v76;
  }

  sub_100018C68(v72, type metadata accessor for KeyAlignmentRecord);
  return (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(v112, v81);
}

uint64_t sub_10058F358(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = type metadata accessor for KeyAlignmentRecord(0LL);
  uint64_t v7 = *(int *)(result + 28);
  uint64_t v8 = *(void *)(a1 + v7);
  BOOL v9 = __CFADD__(v8, 1LL);
  uint64_t v10 = v8 + 1;
  if (v9)
  {
    __break(1u);
  }

  else
  {
    uint64_t v11 = result;
    *(void *)(a1 + v7) = v10;
    static Date.trustedNow.getter((uint64_t)v5);
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v3 + 40))(a1 + *(int *)(v11 + 32), v5, v2);
  }

  return result;
}

void sub_10058F404(uint64_t a1, dispatch_group_s *a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v66 = a6;
  uint64_t v67 = a2;
  uint64_t v63 = a4;
  uint64_t v64 = a5;
  uint64_t v8 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v60 = *(void *)(v8 - 8);
  uint64_t v61 = v8;
  __chkstk_darwin(v8);
  uint64_t v59 = (char *)&v56 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v65 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v56 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v62 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v13 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v15 = (char *)&v56 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for KeyAlignmentRecord(0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v56 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100004AEC(&qword_1009A7E08);
  __chkstk_darwin(v19);
  uint64_t v21 = (uint8_t **)((char *)&v56 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v21, &qword_1009A7E08);
  if (swift_getEnumCaseMultiPayload(v21, v19) == 1)
  {
    uint64_t v57 = v15;
    uint64_t v58 = v13;
    uint64_t v22 = (void *)*v21;
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    sub_10000A720(v23, (uint64_t)qword_100A2AE08);
    swift_errorRetain(v22);
    uint64_t v24 = swift_errorRetain(v22);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.error.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = (void **)swift_slowAlloc(32LL, -1LL);
      uint64_t v68 = v22;
      unsigned __int128 aBlock = v28;
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v56 = v27 + 4;
      swift_errorRetain(v22);
      uint64_t v29 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v30 = String.init<A>(describing:)(&v68, v29);
      uint64_t v68 = (void *)sub_1003F11D4(v30, v31, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &aBlock, v56, v27 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v22);
      swift_errorRelease(v22);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "performKeyRoll: Error rolling keyIndex %s", v27, 0xCu);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v22);
      swift_errorRelease(v22);
    }

    uint64_t v40 = v10;
    unint64_t v41 = v12;
    uint64_t v42 = v57;
    uint64_t v43 = v64;
    sub_100004AB0();
    uint64_t v45 = v59;
    uint64_t v44 = v60;
    uint64_t v46 = v61;
    (*(void (**)(char *, void, uint64_t))(v60 + 104))( v59,  enum case for DispatchQoS.QoSClass.default(_:),  v61);
    uint64_t v47 = (void *)static OS_dispatch_queue.global(qos:)(v45);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v45, v46);
    uint64_t v48 = (void *)swift_allocObject(&unk_100964E10, 40LL, 7LL);
    v48[2] = v63;
    v48[3] = v43;
    v48[4] = v22;
    uint64_t v73 = sub_1000D4F98;
    uint64_t v74 = v48;
    unsigned __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v70 = 1107296256LL;
    uint64_t v71 = sub_1001C31E8;
    uint64_t v72 = &unk_100964E28;
    uint64_t v49 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v50 = swift_errorRetain(v22);
    static DispatchQoS.unspecified.getter(v50);
    uint64_t v68 = _swiftEmptyArrayStorage;
    uint64_t v51 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v52 = v42;
    uint64_t v53 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v54 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v68, v53, v54, v40, v51);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v52, v41, v49);
    _Block_release(v49);

    swift_errorRelease(v22);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v41, v40);
    (*(void (**)(char *, uint64_t))(v58 + 8))(v52, v62);
  }

  else
  {
    sub_10002218C((uint64_t)v21, (uint64_t)v18, type metadata accessor for KeyAlignmentRecord);
    uint64_t v32 = (void *)swift_allocObject(&unk_100964E60, 40LL, 7LL);
    uint64_t v33 = v63;
    uint64_t v34 = v64;
    v32[2] = a3;
    v32[3] = v33;
    v32[4] = v34;
    uint64_t v73 = sub_100596168;
    uint64_t v74 = v32;
    unsigned __int128 aBlock = _NSConcreteStackBlock;
    uint64_t v70 = 1107296256LL;
    uint64_t v71 = sub_1001C31E8;
    uint64_t v72 = &unk_100964E78;
    os_log_type_t v35 = _Block_copy(&aBlock);
    swift_retain();
    uint64_t v36 = swift_retain();
    static DispatchQoS.unspecified.getter(v36);
    uint64_t v68 = _swiftEmptyArrayStorage;
    uint64_t v37 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v38 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v39 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v68, v38, v39, v10, v37);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v12, v35);
    _Block_release(v35);
    (*(void (**)(char *, uint64_t))(v65 + 8))(v12, v10);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v62);
    sub_100018C68((uint64_t)v18, type metadata accessor for KeyAlignmentRecord);
  }

  swift_release();
  uint64_t v55 = v67;
  Transaction.capture()();
  dispatch_group_leave(v55);
}

void sub_10058FA50(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v33 = a3;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v36 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v34 = *(void *)(v7 - 8);
  uint64_t v35 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v14 = type metadata accessor for Logger(0LL);
  uint64_t v15 = sub_10000A720(v14, (uint64_t)qword_100A2AE08);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter(v16);
  if (os_log_type_enabled(v16, v17))
  {
    uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    uint64_t v32 = v9;
    uint64_t v19 = v6;
    uint64_t v20 = v4;
    uint64_t v21 = a2;
    uint64_t v22 = v18;
    *(_WORD *)uint64_t v18 = 0;
    _os_log_impl((void *)&_mh_execute_header, v16, v17, "performKeyRoll: Modified keyIndex.", v18, 2u);
    uint64_t v23 = v22;
    a2 = v21;
    uint64_t v4 = v20;
    uint64_t v6 = v19;
    uint64_t v9 = v32;
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  sub_10058954C();
  sub_100596174();
  LOBYTE(aBlock[0]) = 1;
  CurrentValueSubject.send(_:)(aBlock);
  sub_100004AB0();
  (*(void (**)(char *, void, uint64_t))(v11 + 104))( v13,  enum case for DispatchQoS.QoSClass.default(_:),  v10);
  uint64_t v24 = (void *)static OS_dispatch_queue.global(qos:)(v13);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  uint64_t v25 = swift_allocObject(&unk_100964EB0, 32LL, 7LL);
  uint64_t v26 = v33;
  *(void *)(v25 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v25 + 24) = v26;
  aBlock[4] = sub_10020CE78;
  void aBlock[5] = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100964EC8;
  uint64_t v27 = _Block_copy(aBlock);
  uint64_t v28 = swift_retain();
  static DispatchQoS.unspecified.getter(v28);
  uint64_t v37 = _swiftEmptyArrayStorage;
  uint64_t v29 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v30 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v31 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v30, v31, v4, v29);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v6, v27);
  _Block_release(v27);

  (*(void (**)(char *, uint64_t))(v36 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v9, v35);
  swift_release();
  if (qword_10099B850 != -1) {
    swift_once(&qword_10099B850, sub_1006BAC84);
  }
  sub_1006BE600();
}

void sub_10058FDE8(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = type metadata accessor for String.Encoding(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)(a1 + 72);
  if (v9)
  {
    *a2 = *(void *)(a1 + 64);
    a2[1] = v9;
    goto LABEL_31;
  }

  id v10 = [objc_allocWithZone(ACAccountStore) init];
  id v11 = objc_msgSend(v10, "aa_primaryAppleAccount");

  if (!v11)
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    uint64_t v24 = sub_10000A720(v23, (uint64_t)qword_100A2AE08);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v27 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "Could not obtain aa_primaryAppleAccount while getting myPersonID !",  v27,  2u);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    goto LABEL_17;
  }

  id v12 = objc_msgSend(v11, "aa_personID");
  if (!v12)
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    uint64_t v29 = sub_10000A720(v28, (uint64_t)qword_100A2AE08);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Primary AppleAccount has nil aa_personID!", v32, 2u);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

LABEL_17:
    *a2 = 0LL;
    a2[1] = 0LL;
    goto LABEL_31;
  }

  uint64_t v13 = v12;
  id v50 = v11;
  uint64_t v55 = v2;
  uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  uint64_t v16 = v15;

  static String.Encoding.utf8.getter(v17);
  uint64_t v18 = String.data(using:allowLossyConversion:)(v8, 0LL, v14, v16);
  unint64_t v20 = v19;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v49 = v18;
  if (v20 >> 60 == 15)
  {
    uint64_t v21 = 0LL;
    unint64_t v22 = 0LL;
  }

  else
  {
    sub_10001736C(v18, v20);
    Swift::String v33 = Data.base64EncodedString(options:)(0LL);
    sub_1000182F0(v18, v20);
    Swift::String v54 = v33;
    uint64_t v52 = 61LL;
    unint64_t v53 = 0xE100000000000000LL;
    v51[0] = 126LL;
    v51[1] = 0xE100000000000000LL;
    unint64_t v34 = sub_1000155F8();
    uint64_t v21 = StringProtocol.replacingOccurrences<A, B>(of:with:options:range:)( &v52,  v51,  0LL,  0LL,  0LL,  1LL,  &type metadata for String,  &type metadata for String,  &type metadata for String,  v34,  v34,  v34);
    unint64_t v22 = v35;
    swift_bridgeObjectRelease();
  }

  *(void *)(a1 + 64) = v21;
  *(void *)(a1 + 72) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease();
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v36 = type metadata accessor for Logger(0LL);
  sub_10000A720(v36, (uint64_t)qword_100A2AE08);
  swift_bridgeObjectRetain(v22);
  uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v39 = static os_log_type_t.default.getter(v38);
  if (os_log_type_enabled(v38, v39))
  {
    uint64_t v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v47 = swift_slowAlloc(32LL, -1LL);
    v54._countAndFlagsBits = v47;
    unint64_t v48 = v20;
    *(_DWORD *)uint64_t v40 = 136315138;
    if (v22) {
      uint64_t v41 = v21;
    }
    else {
      uint64_t v41 = 7104878LL;
    }
    if (v22) {
      unint64_t v42 = v22;
    }
    else {
      unint64_t v42 = 0xE300000000000000LL;
    }
    uint64_t v46 = v40 + 4;
    swift_bridgeObjectRetain(v22);
    uint64_t v52 = sub_1003F11D4(v41, v42, &v54._countAndFlagsBits);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v46, v40 + 12);
    swift_bridgeObjectRelease_n(v22, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v38, v39, "MyPersonID %s", v40, 0xCu);
    uint64_t v43 = v47;
    swift_arrayDestroy(v47, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v43, -1LL, -1LL);
    swift_slowDealloc(v40, -1LL, -1LL);

    sub_1000182F0(v49, v48);
  }

  else
  {
    sub_1000182F0(v49, v20);

    swift_bridgeObjectRelease_n(v22, 2LL);
  }

  uint64_t v44 = *(void *)(a1 + 72);
  *a2 = *(void *)(a1 + 64);
  a2[1] = v44;
  swift_bridgeObjectRetain(v44);
LABEL_31:
  swift_bridgeObjectRetain(v9);
}

uint64_t sub_100590328()
{
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  swift_release();
  sub_100015794(v0 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedSharingKey, &qword_1009B28E0);
  swift_release();
  swift_release();

  swift_bridgeObjectRelease();
  swift_release();
  return v0;
}

uint64_t sub_10059041C()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_100590440()
{
  return type metadata accessor for SecureLocationsKeyManager(0LL);
}

uint64_t type metadata accessor for SecureLocationsKeyManager(uint64_t a1)
{
  return sub_10008BED8(a1, (uint64_t *)&unk_1009B3310, (uint64_t)&nominal type descriptor for SecureLocationsKeyManager);
}

void sub_10059045C(uint64_t a1)
{
  v4[0] = &unk_1008076E0;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v4[5] = &unk_1008076E0;
  void v4[6] = &unk_1008076F8;
  v4[7] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[9] = &unk_1008076F8;
  v4[10] = &unk_1008076F8;
  v4[11] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[12] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_10009361C(319LL, (unint64_t *)&unk_1009B3320, type metadata accessor for SecureLocationsCachedSharingKey);
  if (v3 <= 0x3F)
  {
    v4[13] = *(void *)(v2 - 8) + 64LL;
    v4[14] = &unk_1008076F8;
    v4[15] = &unk_1008076F8;
    v4[16] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[17] = (char *)&value witness table for Builtin.BridgeObject + 64;
    v4[18] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[19] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_updateClassMetadata2(a1, 256LL, 20LL, v4, a1 + 80);
  }

uint64_t type metadata accessor for SecureLocationsCachedSharingKey(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009B3678, (uint64_t)&nominal type descriptor for SecureLocationsCachedSharingKey);
}

uint64_t *sub_10059054C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    id v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    uint64_t v12 = a3[6];
    uint64_t v13 = (char *)a1 + v12;
    uint64_t v14 = (uint64_t *)((char *)a2 + v12);
    unint64_t v15 = *(uint64_t *)((char *)a2 + v12 + 8);
    if (v15 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    }

    else
    {
      uint64_t v17 = *v14;
      sub_10001736C(*v14, v15);
      *(void *)uint64_t v13 = v17;
      *((void *)v13 + 1) = v15;
    }

    uint64_t v18 = v14[2];
    unint64_t v19 = v14[3];
    sub_10001736C(v18, v19);
    *((void *)v13 + 2) = v18;
    *((void *)v13 + 3) = v19;
    unint64_t v20 = v14 + 4;
    unint64_t v21 = v14[5];
    if (v21 >> 60 == 15)
    {
      *((_OWORD *)v13 + 2) = *(_OWORD *)v20;
    }

    else
    {
      uint64_t v22 = *v20;
      sub_10001736C(*v20, v14[5]);
      *((void *)v13 + 4) = v22;
      *((void *)v13 + 5) = v21;
    }

    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  }

  return a1;
}

uint64_t sub_100590698(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  uint64_t v7 = (uint64_t *)(a1 + *(int *)(a2 + 24));
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_100016F9C(*v7, v8);
  }
  uint64_t result = sub_100016F9C(v7[2], v7[3]);
  unint64_t v10 = v7[5];
  if (v10 >> 60 != 15) {
    return sub_100016F9C(v7[4], v10);
  }
  return result;
}

uint64_t sub_10059074C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = (uint64_t *)(a2 + v11);
  unint64_t v14 = *(void *)(a2 + v11 + 8);
  if (v14 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
  }

  else
  {
    uint64_t v15 = *v13;
    sub_10001736C(*v13, v14);
    *(void *)uint64_t v12 = v15;
    *(void *)(v12 + 8) = v14;
  }

  uint64_t v16 = v13[2];
  unint64_t v17 = v13[3];
  sub_10001736C(v16, v17);
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = v16;
  *(void *)(v12 + 24) = v17;
  uint64_t v18 = v13 + 4;
  unint64_t v19 = v13[5];
  if (v19 >> 60 == 15)
  {
    *(_OWORD *)(v12 + 32) = *(_OWORD *)v18;
  }

  else
  {
    uint64_t v20 = *v18;
    sub_10001736C(*v18, v13[5]);
    *(void *)(v12 + 32) = v20;
    *(void *)(v12 + 40) = v19;
  }

  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_10059086C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24LL))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = (uint64_t *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  unint64_t v14 = *(void *)(a2 + v11 + 8);
  if (*(void *)(a1 + v11 + 8) >> 60 == 15LL)
  {
    if (v14 >> 60 != 15)
    {
      uint64_t v15 = *v13;
      sub_10001736C(*v13, v14);
      *uint64_t v12 = v15;
      v12[1] = v14;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v14 >> 60 == 15)
  {
    sub_1004E3298((uint64_t)v12);
LABEL_6:
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    goto LABEL_8;
  }

  uint64_t v16 = *v13;
  sub_10001736C(*v13, v14);
  uint64_t v17 = *v12;
  unint64_t v18 = v12[1];
  *uint64_t v12 = v16;
  v12[1] = v14;
  sub_100016F9C(v17, v18);
LABEL_8:
  uint64_t v19 = v13[2];
  unint64_t v20 = v13[3];
  sub_10001736C(v19, v20);
  uint64_t v21 = v12[2];
  unint64_t v22 = v12[3];
  v12[2] = v19;
  v12[3] = v20;
  sub_100016F9C(v21, v22);
  uint64_t v23 = v13 + 4;
  unint64_t v24 = v13[5];
  if ((unint64_t)v12[5] >> 60 != 15)
  {
    if (v24 >> 60 != 15)
    {
      uint64_t v26 = *v23;
      sub_10001736C(*v23, v13[5]);
      uint64_t v27 = v12[4];
      unint64_t v28 = v12[5];
      v12[4] = v26;
      v12[5] = v24;
      sub_100016F9C(v27, v28);
      goto LABEL_15;
    }

    sub_100170B90((uint64_t)(v12 + 4));
    goto LABEL_13;
  }

  if (v24 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)v12 + 2) = *(_OWORD *)v23;
    goto LABEL_15;
  }

  uint64_t v25 = *v23;
  sub_10001736C(*v23, v13[5]);
  v12[4] = v25;
  v12[5] = v24;
LABEL_15:
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100590A1C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a3[7];
  uint64_t v13 = (_OWORD *)(a1 + v11);
  unint64_t v14 = (_OWORD *)(a2 + v11);
  __int128 v15 = v14[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  v13[2] = v14[2];
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  return a1;
}

uint64_t sub_100590AC4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = a3[6];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  unint64_t v14 = *(void *)(a1 + v11 + 8);
  if (v14 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v15 = *(void *)(v13 + 8);
  if (v15 >> 60 == 15)
  {
    sub_1004E3298(v12);
LABEL_4:
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    goto LABEL_6;
  }

  uint64_t v16 = *(void *)v12;
  *(void *)uint64_t v12 = *(void *)v13;
  *(void *)(v12 + 8) = v15;
  sub_100016F9C(v16, v14);
LABEL_6:
  uint64_t v17 = *(void *)(v12 + 16);
  unint64_t v18 = *(void *)(v12 + 24);
  *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(v13 + 16);
  sub_100016F9C(v17, v18);
  uint64_t v19 = (void *)(v13 + 32);
  unint64_t v20 = *(void *)(v12 + 40);
  if (v20 >> 60 != 15)
  {
    unint64_t v21 = *(void *)(v13 + 40);
    if (v21 >> 60 != 15)
    {
      uint64_t v22 = *(void *)(v12 + 32);
      *(void *)(v12 + 32) = *v19;
      *(void *)(v12 + 40) = v21;
      sub_100016F9C(v22, v20);
      goto LABEL_11;
    }

    sub_100170B90(v12 + 32);
  }

  *(_OWORD *)(v12 + 32) = *(_OWORD *)v19;
LABEL_11:
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  return a1;
}

uint64_t sub_100590C08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100590C14);
}

uint64_t sub_100590C14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }

  uint64_t v14 = *(void *)(a1 + *(int *)(a3 + 24) + 24) >> 60;
  if (((4 * (_DWORD)v14) & 0xC) != 0) {
    return 16 - ((4 * (_DWORD)v14) & 0xC | (v14 >> 2));
  }
  else {
    return 0LL;
  }
}

uint64_t sub_100590CD0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100590CDC);
}

uint64_t sub_100590CDC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
    return v11(v12, a2, a2, v10);
  }

  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }

  uint64_t v15 = a1 + *(int *)(a4 + 24);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(v15 + 24) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  return result;
}

uint64_t sub_100590D90(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for UUID(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      uint64_t v5[2] = "0";
      v5[3] = (char *)&value witness table for Builtin.Int64 + 64;
      swift_initStructMetadata(a1, 256LL, 4LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_100590E2C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100007864( &qword_1009B28F0,  type metadata accessor for SecureLocationsCachedSharingKey,  (uint64_t)&unk_100807770);
  uint64_t result = sub_100007864( &qword_1009B28D0,  type metadata accessor for SecureLocationsCachedSharingKey,  (uint64_t)&unk_100807748);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_100590E88()
{
  unint64_t result = qword_1009B36C0;
  if (!qword_1009B36C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008079C0, &type metadata for SecureLocationsCachedSharingKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B36C0);
  }

  return result;
}

unint64_t sub_100590ECC()
{
  unint64_t result = qword_1009B36C8;
  if (!qword_1009B36C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080FFD8, &type metadata for SecureLocationsIndex);
    atomic_store(result, (unint64_t *)&qword_1009B36C8);
  }

  return result;
}

unint64_t sub_100590F10()
{
  unint64_t result = qword_1009B36D8;
  if (!qword_1009B36D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080FFB0, &type metadata for SecureLocationsIndex);
    atomic_store(result, (unint64_t *)&qword_1009B36D8);
  }

  return result;
}

uint64_t sub_100590F54@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t *a4@<X8>)
{
  uint64_t v42 = type metadata accessor for SecureLocationsCachedSharedKey(0LL);
  uint64_t v9 = *(void *)(v42 - 8);
  __chkstk_darwin(v42);
  uint64_t v11 = (char *)v28 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = (uint64_t *)(a1 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedDecryptionKeys);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd25SecureLocationsKeyManager_cachedDecryptionKeys, v43, 0LL, 0LL);
  uint64_t v13 = *v12;
  if (*(void *)(*v12 + 16))
  {
    sub_10001736C(a2, a3);
    swift_bridgeObjectRetain(v13);
    uint64_t v14 = sub_10030D84C(a2, a3);
    if ((v15 & 1) != 0)
    {
      uint64_t v16 = (uint64_t *)(*(void *)(v13 + 56) + 16 * v14);
      uint64_t v17 = *v16;
      unint64_t v18 = v16[1];
      sub_10001736C(*v16, v18);
      swift_bridgeObjectRelease();
      uint64_t result = sub_100016F9C(a2, a3);
      goto LABEL_15;
    }

    swift_bridgeObjectRelease();
    sub_100016F9C(a2, a3);
  }

  unint64_t v38 = a3;
  swift_retain();
  unint64_t v20 = sub_100577724();
  swift_release();
  uint64_t v21 = v20[2];
  if (v21)
  {
    v28[3] = v12;
    uint64_t v29 = a4;
    uint64_t v30 = v4;
    unint64_t v22 = (*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
    v28[5] = v20;
    uint64_t v23 = (uint64_t)v20 + v22;
    unint64_t v24 = v38;
    unint64_t v33 = HIDWORD(a2);
    BOOL v25 = __OFSUB__(HIDWORD(a2), (_DWORD)a2);
    BOOL v36 = v25;
    uint64_t v40 = BYTE6(v38);
    unint64_t v41 = v38 >> 62;
    uint64_t v37 = v38 & 0x3FFFFFFFFFFFFFFFLL;
    uint64_t v34 = (int)a2;
    uint64_t v35 = HIDWORD(a2) - (int)a2;
    uint64_t v31 = (a2 >> 32) - (int)a2;
    uint64_t v32 = a2 >> 32;
    uint64_t v26 = *(void *)(v9 + 72);
    uint64_t v39 = v26;
    do
    {
      sub_10001DC4C(v23, (uint64_t)v11, type metadata accessor for SecureLocationsCachedSharedKey);
      unint64_t v27 = *(void *)&v11[*(int *)(v42 + 28) + 8];
      if (v27 >> 60 != 15) {
        __asm { BR              X8 }
      }

      sub_10001736C(a2, v24);
      sub_1000182F0(0LL, 0xF000000000000000LL);
      sub_1000182F0(a2, v24);
      sub_100018C68((uint64_t)v11, type metadata accessor for SecureLocationsCachedSharedKey);
      v23 += v26;
      --v21;
    }

    while (v21);
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v17 = 0LL;
    unint64_t v18 = 0xF000000000000000LL;
    a4 = v29;
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease();
    uint64_t v17 = 0LL;
    unint64_t v18 = 0xF000000000000000LL;
  }

uint64_t sub_100591BF4@<X0>(uint64_t a1@<X1>, unint64_t a2@<X2>, void *a3@<X8>)
{
  uint64_t v34 = type metadata accessor for SecureLocationsCachedSharedKey(0LL);
  uint64_t v7 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  BOOL v25 = (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_retain();
  uint64_t v9 = sub_100577724();
  swift_release();
  uint64_t v10 = v9[2];
  if (v10)
  {
    uint64_t v19 = a3;
    uint64_t v20 = v3;
    uint64_t v21 = v9;
    uint64_t v11 = (uint64_t)v9 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80));
    unint64_t v23 = HIDWORD(a1);
    BOOL v12 = __OFSUB__(HIDWORD(a1), (_DWORD)a1);
    BOOL v28 = v12;
    uint64_t v32 = BYTE6(a2);
    unint64_t v33 = a2 >> 62;
    unint64_t v29 = a2;
    uint64_t v30 = a2 & 0x3FFFFFFFFFFFFFFFLL;
    uint64_t v26 = (int)a1;
    uint64_t v27 = HIDWORD(a1) - (int)a1;
    uint64_t v24 = a1 >> 32;
    uint64_t v22 = (a1 >> 32) - (int)a1;
    uint64_t v13 = *(void *)(v7 + 72);
    unint64_t v14 = a2;
    uint64_t v15 = (uint64_t)v25;
    uint64_t v31 = v13;
    do
    {
      sub_10001DC4C(v11, v15, type metadata accessor for SecureLocationsCachedSharedKey);
      unint64_t v16 = *(void *)(v15 + *(int *)(v34 + 28) + 8);
      if (v16 >> 60 != 15) {
        __asm { BR              X8 }
      }

      sub_10001736C(a1, v14);
      sub_1000182F0(0LL, 0xF000000000000000LL);
      sub_1000182F0(a1, v14);
      sub_100018C68(v15, type metadata accessor for SecureLocationsCachedSharedKey);
      v11 += v13;
      --v10;
    }

    while (v10);
    uint64_t result = swift_bridgeObjectRelease();
    a3 = v19;
  }

  else
  {
    uint64_t result = swift_bridgeObjectRelease();
  }

  *a3 = 0LL;
  a3[1] = 0LL;
  return result;
}

unint64_t sub_10059294C( uint64_t a1, uint64_t a2, unint64_t a3, uint64_t a4, unint64_t a5, uint64_t a6, void (*a7)(uint64_t), uint64_t a8)
{
  uint64_t v70 = a2;
  uint64_t v71 = a4;
  uint64_t v14 = sub_100004AEC(&qword_1009A4930);
  uint64_t v72 = *(void *)(v14 - 8);
  uint64_t v73 = v14;
  __chkstk_darwin(v14);
  unint64_t v16 = &v62[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v17 = sub_100004AEC(&qword_1009A4938);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v21 = &v62[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  unint64_t v22 = *(void *)a1;
  LODWORD(v23) = *(unsigned __int8 *)(a1 + 8);
  if ((v23 & 1) != 0)
  {
    sub_1000A4D58(*(void *)a1);
    if (qword_10099B178 != -1) {
      swift_once(&qword_10099B178, sub_100189C64);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_10000A720(v24, (uint64_t)qword_100A2A290);
    sub_1000A4D58(v22);
    unint64_t v25 = sub_1000A4D58(v22);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = swift_slowAlloc(12LL, -1LL);
      int v74 = v23;
      uint64_t v23 = v28;
      uint64_t v29 = swift_slowAlloc(32LL, -1LL);
      uint64_t v75 = v22;
      uint64_t v76 = v29;
      *(_DWORD *)uint64_t v23 = 136446210;
      unint64_t v30 = sub_100044AD4();
      uint64_t v31 = Error.localizedDescription.getter(&type metadata for MessagingError, v30);
      uint64_t v75 = sub_1003F11D4(v31, v32, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease();
      sub_1001B1B88(v22, 1);
      sub_1001B1B88(v22, 1);
      _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "liveLocations: ERROR retrieving messagingSession during startLive: %{public}s",  (uint8_t *)v23,  0xCu);
      swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1LL, -1LL);
      uint64_t v33 = v23;
      LOBYTE(v23) = v74;
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    else
    {
      sub_1001B1B88(v22, 1);
      sub_1001B1B88(v22, 1);
    }

    if (qword_10099B850 != -1) {
      swift_once(&qword_10099B850, sub_1006BAC84);
    }
    swift_retain();
    unint64_t v45 = sub_1000A4BC4(v22);
    sub_1006BB05C(0, v45, v46);
    swift_release();
    swift_bridgeObjectRelease();
    unint64_t v47 = sub_100044AD4();
    uint64_t v48 = swift_allocError(&type metadata for MessagingError, v47, 0LL, 0LL);
    *uint64_t v49 = v22;
    sub_1000A4D58(v22);
    a7(v48);
    swift_errorRelease(v48);
  }

  else
  {
    uint64_t v67 = v19;
    uint64_t v68 = v18;
    uint64_t v69 = a6;
    uint64_t v34 = qword_10099B178;
    swift_retain();
    if (v34 != -1) {
      swift_once(&qword_10099B178, sub_100189C64);
    }
    int v74 = v23;
    uint64_t v35 = type metadata accessor for Logger(0LL);
    sub_10000A720(v35, (uint64_t)qword_100A2A290);
    sub_1001B1B94(v22, 0);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a5);
    sub_1001B1B94(v22, 0);
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(a5);
    uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.default.getter(v37);
    int v39 = v38;
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v40 = swift_slowAlloc(52LL, -1LL);
      uint64_t v64 = swift_slowAlloc(96LL, -1LL);
      uint64_t v76 = v64;
      *(_DWORD *)uint64_t v40 = 136316163;
      uint64_t v66 = a7;
      swift_retain();
      int v63 = v39;
      uint64_t v41 = sub_1001DFE98();
      uint64_t v65 = a8;
      unint64_t v43 = v42;
      sub_1001B1B88(v22, 0);
      uint64_t v75 = sub_1003F11D4(v41, v43, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease();
      sub_1001B1B88(v22, 0);
      sub_1001B1B88(v22, 0);
      *(_WORD *)(v40 + 12) = 2160;
      uint64_t v75 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v40 + 14, v40 + 22);
      *(_WORD *)(v40 + 22) = 2081;
      swift_bridgeObjectRetain(a3);
      uint64_t v75 = sub_1003F11D4(v70, a3, &v76);
      a7 = v66;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v40 + 24, v40 + 32);
      swift_bridgeObjectRelease_n(a3, 3LL);
      *(_WORD *)(v40 + 32) = 2160;
      uint64_t v75 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v40 + 34, v40 + 42);
      *(_WORD *)(v40 + 42) = 2081;
      swift_bridgeObjectRetain(a5);
      uint64_t v75 = sub_1003F11D4(v71, a5, &v76);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v40 + 44, v40 + 52);
      swift_bridgeObjectRelease_n(a5, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v37,  (os_log_type_t)v63,  "liveLocations: Received session %s for identifier %{private,mask.hash}s for findMyId %{private,mask.hash}s ",  (uint8_t *)v40,  0x34u);
      uint64_t v44 = v64;
      swift_arrayDestroy(v64, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1LL, -1LL);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    else
    {
      sub_1001B1B88(v22, 0);
      sub_1001B1B88(v22, 0);

      swift_bridgeObjectRelease_n(a5, 2LL);
      swift_bridgeObjectRelease_n(a3, 2LL);
    }

    uint64_t v76 = *(void *)(v22 + qword_100A2A288);
    swift_retain();
    uint64_t v50 = sub_100004AEC(&qword_1009A4940);
    uint64_t v51 = sub_100004AEC(&qword_1009A4948);
    uint64_t v52 = sub_1000372EC( &qword_1009A4950,  &qword_1009A4940,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    Publisher.map<A>(_:)(sub_1001A5CBC, 0LL, v50, v51, v52);
    swift_release();
    uint64_t v53 = sub_100004AEC(&qword_1009A4958);
    uint64_t v54 = sub_1000372EC( &qword_1009A4960,  &qword_1009A4930,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    uint64_t v55 = sub_1000372EC(&qword_1009A4968, &qword_1009A4958, (uint64_t)&protocol conformance descriptor for Just<A>);
    uint64_t v56 = v73;
    Publisher.catch<A>(_:)(sub_1001A5D00, 0LL, v73, v53, v54, v55);
    (*(void (**)(_BYTE *, uint64_t))(v72 + 8))(v16, v56);
    uint64_t v57 = swift_allocObject(&unk_100964F28, 24LL, 7LL);
    uint64_t v23 = v69;
    swift_weakInit(v57 + 16, v69);
    uint64_t v58 = sub_1000372EC( &qword_1009A4970,  &qword_1009A4938,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
    uint64_t v59 = v68;
    uint64_t v60 = Publisher<>.sink(receiveValue:)(sub_100596508, v57, v68, v58);
    swift_release();
    (*(void (**)(_BYTE *, uint64_t))(v67 + 8))(v21, v59);
    *(void *)(v23 + 112) = v60;
    swift_release();
    a7(0LL);
    LOBYTE(v23) = v74;
  }

  return sub_1001B1B88(v22, v23);
}

unint64_t sub_100593110(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A4978);
  __chkstk_darwin(v4);
  uint64_t v6 = &v26[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = sub_100004AEC(&qword_1009A4948);
  __chkstk_darwin(v7);
  uint64_t v9 = (unint64_t *)&v26[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  a2 += 16LL;
  swift_beginAccess(a2, v30, 0LL, 0LL);
  unint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    sub_10001581C(a1, (uint64_t)v9, &qword_1009A4948);
    if (swift_getEnumCaseMultiPayload(v9, v7) == 1)
    {
      unint64_t v11 = *v9;
      if (qword_10099B178 != -1) {
        swift_once(&qword_10099B178, sub_100189C64);
      }
      uint64_t v12 = type metadata accessor for Logger(0LL);
      sub_10000A720(v12, (uint64_t)qword_100A2A290);
      sub_1000A4D58(v11);
      unint64_t v13 = sub_1000A4D58(v11);
      uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
      os_log_type_t v15 = static os_log_type_t.error.getter(v14);
      if (os_log_type_enabled(v14, v15))
      {
        unint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v17 = swift_slowAlloc(32LL, -1LL);
        uint64_t v27 = v11;
        uint64_t v28 = v17;
        *(_DWORD *)unint64_t v16 = 136446210;
        unint64_t v18 = sub_100044AD4();
        uint64_t v19 = Error.localizedDescription.getter(&type metadata for MessagingError, v18);
        uint64_t v27 = sub_1003F11D4(v19, v20, &v28);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v16 + 4, v16 + 12);
        swift_bridgeObjectRelease();
        sub_1000A4D68(v11);
        sub_1000A4D68(v11);
        _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "liveLocations: readMessagePublisher error: %{public}s",  v16,  0xCu);
        swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v17, -1LL, -1LL);
        swift_slowDealloc(v16, -1LL, -1LL);
      }

      else
      {
        sub_1000A4D68(v11);
        sub_1000A4D68(v11);
      }

      if (qword_10099B850 != -1) {
        swift_once(&qword_10099B850, sub_1006BAC84);
      }
      uint64_t v28 = 0LL;
      uint64_t v29 = 0xE000000000000000LL;
      swift_retain();
      _StringGuts.grow(_:)(29LL);
      swift_bridgeObjectRelease();
      uint64_t v28 = 0xD00000000000001BLL;
      uint64_t v29 = 0x8000000100868FC0LL;
      sub_1000A4D58(v11);
      unint64_t v22 = sub_1000A4BC4(v11);
      uint64_t v24 = v23;
      sub_1000A4D68(v11);
      v25._countAndFlagsBits = v22;
      v25._object = v24;
      String.append(_:)(v25);
      swift_bridgeObjectRelease();
      sub_1006BB05C(0, v28, v29);
      swift_release();
      swift_bridgeObjectRelease();
      swift_release();
      return sub_1000A4D68(v11);
    }

    else
    {
      sub_100015750((uint64_t)v9, (uint64_t)v6, &qword_1009A4978);
      uint64_t v21 = objc_autoreleasePoolPush();
      sub_1005934C0();
      objc_autoreleasePoolPop(v21);
      sub_100015794((uint64_t)v6, &qword_1009A4978);
      return swift_release();
    }
  }

  return result;
}

uint64_t sub_1005934C0()
{
  if (v0)
  {
    if (qword_10099B178 != -1) {
      swift_once(&qword_10099B178, sub_100189C64);
    }
    uint64_t v1 = type metadata accessor for Logger(0LL);
    sub_10000A720(v1, (uint64_t)qword_100A2A290);
    swift_errorRetain(v0);
    uint64_t v2 = swift_errorRetain(v0);
    uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
    os_log_type_t v4 = static os_log_type_t.error.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v6 = swift_slowAlloc(32LL, -1LL);
      uint64_t v30 = v6;
      *(_DWORD *)uint64_t v5 = 136446210;
      uint64_t v37 = v0;
      swift_errorRetain(v0);
      uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v8 = String.init<A>(describing:)(&v37, v7);
      uint64_t v37 = sub_1003F11D4(v8, v9, &v30);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v37, &v38, v5 + 4, v5 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v0);
      swift_errorRelease(v0);
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "liveLocations: Message extract error: %{public}s", v5, 0xCu);
      swift_arrayDestroy(v6, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v6, -1LL, -1LL);
      swift_slowDealloc(v5, -1LL, -1LL);
    }

    else
    {
      swift_errorRelease(v0);
      swift_errorRelease(v0);
    }

    if (qword_10099B850 != -1) {
      swift_once(&qword_10099B850, sub_1006BAC84);
    }
    uint64_t v30 = 0LL;
    uint64_t v31 = 0xE000000000000000LL;
    swift_retain();
    _StringGuts.grow(_:)(24LL);
    swift_bridgeObjectRelease();
    uint64_t v30 = 0xD000000000000016LL;
    uint64_t v31 = 0x8000000100868FE0LL;
    uint64_t v37 = v0;
    swift_errorRetain(v0);
    uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    v24._countAndFlagsBits = String.init<A>(describing:)(&v37, v23);
    String.append(_:)(v24);
    swift_bridgeObjectRelease();
    sub_1006BB05C(0, v30, v31);
    swift_release();
    swift_bridgeObjectRelease();
    return swift_errorRelease(v0);
  }

  else
  {
    uint64_t v10 = v30;
    unint64_t v11 = v31;
    char v29 = v33;
    uint64_t v12 = v35;
    uint64_t v27 = v32;
    uint64_t v28 = v34;
    uint64_t v13 = v36;
    if (qword_10099B178 != -1) {
      swift_once(&qword_10099B178, sub_100189C64);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    sub_10000A720(v14, (uint64_t)qword_100A2A290);
    sub_10001736C(v10, v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    sub_10001736C(v10, v11);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v13);
    unint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.debug.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      unint64_t v18 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v26 = swift_slowAlloc(32LL, -1LL);
      uint64_t v37 = v26;
      *(_DWORD *)unint64_t v18 = 136315138;
      uint64_t v30 = v10;
      uint64_t v31 = v11;
      uint64_t v32 = v27;
      char v33 = v29;
      uint64_t v34 = v28;
      uint64_t v35 = v12;
      uint64_t v36 = v13;
      sub_10001736C(v10, v11);
      swift_bridgeObjectRetain(v12);
      swift_bridgeObjectRetain(v13);
      uint64_t v19 = String.init<A>(describing:)(&v30, &type metadata for SecureLocationsEncodedPayload);
      uint64_t v30 = sub_1003F11D4(v19, v20, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v18 + 4, v18 + 12);
      swift_bridgeObjectRelease();
      sub_100016F9C(v10, v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100016F9C(v10, v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "liveLocations: Received Payload %s", v18, 0xCu);
      swift_arrayDestroy(v26, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v26, -1LL, -1LL);
      swift_slowDealloc(v18, -1LL, -1LL);

      uint64_t v21 = v28;
      char v22 = v29;
    }

    else
    {
      sub_100016F9C(v10, v11);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_100016F9C(v10, v11);

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      char v22 = v29;
      uint64_t v21 = v28;
    }

    uint64_t v30 = v10;
    uint64_t v31 = v11;
    uint64_t v32 = v27;
    char v33 = v22;
    uint64_t v34 = v21;
    uint64_t v35 = v12;
    uint64_t v36 = v13;
    swift_retain();
    PassthroughSubject.send(_:)(&v30);
    swift_release();
    sub_100016F9C(v10, v11);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

uint64_t sub_100593A34()
{
  return swift_deallocObject(v0, 57LL, 7LL);
}

uint64_t sub_100593A70(uint64_t a1, uint64_t a2)
{
  return sub_10058AF64( a1,  a2,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 32),  *(void *)(v2 + 40),  *(void *)(v2 + 48),  *(unsigned __int8 *)(v2 + 56));
}

uint64_t sub_100593A84()
{
  unint64_t v1 = v0[8];
  if (v1 >> 60 != 15)
  {
    if (v0[6] >> 60 != 15LL)
    {
      sub_100016F9C(v0[5], v0[6]);
      unint64_t v1 = v0[8];
    }

    sub_100016F9C(v0[7], v1);
    unint64_t v2 = v0[10];
    if (v2 >> 60 != 15) {
      sub_100016F9C(v0[9], v2);
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_errorRelease(v0[14]);
  return swift_deallocObject(v0, 120LL, 7LL);
}

void sub_100593B18()
{
}

uint64_t sub_100593B34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100593B44(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100593B4C()
{
  return sub_1001B23E8( (void (*)(void))&_swift_release,  (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100593B60()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100593B70()
{
  return sub_1001B23E8( (void (*)(void))&_swift_release,  (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100593B84()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100593B94()
{
}

uint64_t sub_100593B9C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100593BC0()
{
  return sub_10058C088( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(void *)(v0 + 40),  *(uint64_t **)(v0 + 48),  *(void *)(v0 + 56),  *(void *)(v0 + 64),  *(void *)(v0 + 72),  *(void *)(v0 + 80),  *(void *)(v0 + 88),  *(void *)(v0 + 96),  *(void *)(v0 + 104),  *(_BYTE *)(v0 + 112),  *(void *)(v0 + 120)) & 1;
}

uint64_t sub_100593C10()
{
  return sub_10020F99C((void (*)(void))&_swift_release);
}

uint64_t sub_100593C1C( uint64_t a1, void (*a2)(void), void (*a3)(uint64_t, unint64_t), uint64_t (*a4)(uint64_t, uint64_t))
{
  return a1;
}

uint64_t sub_100593C68( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, uint64_t a6, void (*a7)(void), void (*a8)(uint64_t, unint64_t), uint64_t (*a9)(uint64_t, uint64_t))
{
  if (a4 >> 60 != 15)
  {
    a7();
    a8(a3, a4);
    return a9(a5, a6);
  }

  return result;
}

uint64_t sub_100593CE0@<X0>(void *a1@<X8>)
{
  return sub_1005998AC(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_100593CF8()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

void sub_100593D0C(char a1)
{
}

uint64_t sub_100593D20()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_100593D5C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  uint64_t v5 = *(void *)(v1 + 24);
  uint64_t v6 = *(void *)(v1 + 32);
  uint64_t v7 = *(void *)(v1 + 40);
  uint64_t v8 = *(void *)(v1 + 48);
  uint64_t v9 = *(void *)(v1 + 64);
  char v10 = *(_BYTE *)(v1 + 56);
  unint64_t v11 = (void *)swift_task_alloc(dword_1009A5FE4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *unint64_t v11 = v2;
  v11[1] = sub_1000159BC;
  return sub_1001FBB74(a1, v4, v5, v6, v7, v8, v10, v9);
}

uint64_t sub_100593E00()
{
  unint64_t v1 = v0[5];
  if (v1 >> 60 != 15)
  {
    if (v0[3] >> 60 != 15LL)
    {
      sub_100016F9C(v0[2], v0[3]);
      unint64_t v1 = v0[5];
    }

    sub_100016F9C(v0[4], v1);
    unint64_t v2 = v0[7];
    if (v2 >> 60 != 15) {
      sub_100016F9C(v0[6], v2);
    }
  }

  return swift_deallocObject(v0, 64LL, 7LL);
}

void sub_100593E70(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_100593E78()
{
  return sub_1001B23E8( (void (*)(void))&_swift_unknownObjectRelease,  (void (*)(void))&_swift_release);
}

uint64_t sub_100593E8C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1009B36F4);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100015D58;
  return sub_100589AB4(a1, v4, v5, v6);
}

uint64_t sub_100593EF8(uint64_t a1)
{
  return sub_1005891D8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void sub_100593F10(uint64_t a1)
{
}

uint64_t sub_100593F18@<X0>(char *a1@<X8>)
{
  return sub_100532650(*(void *)(v1 + 16), *(void *)(v1 + 32), *(void *)(v1 + 40), *(void *)(v1 + 48), a1);
}

uint64_t sub_100593F38(uint64_t a1)
{
  return sub_100585C04(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100593F58()
{
  return sub_100585E1C(v0[2], v0[3], v0[4], v0[5]);
}

void sub_100593F68(char a1)
{
}

uint64_t sub_100593F74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v74 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D760);
  __chkstk_darwin(v8);
  char v10 = (char *)&v74 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v74 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  os_log_type_t v17 = (char *)&v74 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v74 - v18;
  if ((static UUID.== infix(_:_:)(a1, a2) & 1) == 0) {
    return 0LL;
  }
  uint64_t v78 = v14;
  os_log_type_t v79 = v19;
  uint64_t v77 = v7;
  unint64_t v20 = (int *)type metadata accessor for SecureLocationsCachedSharedKey(0LL);
  uint64_t v21 = v20[5];
  uint64_t result = *(void *)(a1 + v21);
  uint64_t v23 = *(void *)(a1 + v21 + 8);
  Swift::String v24 = (void *)(a2 + v21);
  uint64_t v25 = v24[1];
  BOOL v26 = result == *v24 && v23 == v25;
  if (v26
    || (v27 = _stringCompareWithSmolCheck(_:_:expecting:)(result, v23, *v24, v25, 0LL), uint64_t result = 0LL, (v27 & 1) != 0))
  {
    uint64_t v74 = v5;
    uint64_t v75 = v10;
    uint64_t v76 = v4;
    uint64_t v28 = v20[6];
    uint64_t v30 = *(void *)(a1 + v28);
    unint64_t v29 = *(void *)(a1 + v28 + 8);
    uint64_t v31 = (uint64_t *)(a2 + v28);
    uint64_t v32 = *v31;
    unint64_t v33 = v31[1];
    if (v29 >> 60 == 15)
    {
      if (v33 >> 60 == 15)
      {
LABEL_13:
        uint64_t v38 = v20[7];
        uint64_t v39 = *(void *)(a1 + v38);
        unint64_t v40 = *(void *)(a1 + v38 + 8);
        uint64_t v41 = (uint64_t *)(a2 + v38);
        uint64_t v32 = *v41;
        unint64_t v33 = v41[1];
        if (v40 >> 60 == 15)
        {
          if (v33 >> 60 == 15) {
            goto LABEL_22;
          }
        }

        else if (v33 >> 60 != 15)
        {
          sub_100018BE4(v39, v40);
          sub_100018BE4(v32, v33);
          _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v39, v40);
          char v43 = v42;
          sub_1000182F0(v32, v33);
          uint64_t result = sub_1000182F0(v39, v40);
          if ((v43 & 1) == 0) {
            return 0LL;
          }
LABEL_22:
          uint64_t v44 = v20[8];
          unint64_t v45 = (void *)(a1 + v44);
          uint64_t v46 = *(void *)(a1 + v44 + 16);
          unint64_t v47 = (void *)(a2 + v44);
          uint64_t v48 = v47[2];
          if (v46)
          {
            uint64_t v50 = (uint64_t)v75;
            uint64_t v49 = v76;
            uint64_t v51 = v74;
            uint64_t result = v45[1];
            uint64_t v52 = v47[1];
            if (result != v52 || v46 != v48)
            {
              char v53 = _stringCompareWithSmolCheck(_:_:expecting:)(result, v46, v52, v48, 0LL);
              uint64_t result = 0LL;
              if ((v53 & 1) == 0) {
                return result;
              }
            }
          }

          else
          {
            uint64_t v50 = (uint64_t)v75;
            uint64_t v49 = v76;
            uint64_t v51 = v74;
            if (v48) {
              return 0LL;
            }
          }

          uint64_t v54 = v20[9];
          uint64_t v55 = (uint64_t *)(a1 + v54);
          uint64_t v56 = *(void *)(a1 + v54 + 8);
          uint64_t v57 = (void *)(a2 + v54);
          uint64_t v58 = v57[1];
          if (v56)
          {
            if (!v58) {
              return 0LL;
            }
            uint64_t result = *v55;
            if (*v55 != *v57 || v56 != v58)
            {
              char v59 = _stringCompareWithSmolCheck(_:_:expecting:)(result, v56, *v57, v58, 0LL);
              uint64_t result = 0LL;
              if ((v59 & 1) == 0) {
                return result;
              }
            }
          }

          else if (v58)
          {
            return 0LL;
          }

          uint64_t v60 = v20[10];
          unint64_t v61 = *(void *)(a1 + v60);
          unint64_t v62 = *(void *)(a2 + v60);
          unint64_t v63 = v62 - v61;
          if (v62 >= v61)
          {
            if ((uint64_t)(v62 - v61) >= 0)
            {
LABEL_41:
              if (!v63)
              {
                uint64_t v64 = (uint64_t)v79;
                sub_10001581C(a1 + v20[11], (uint64_t)v79, (uint64_t *)&unk_10099D720);
                uint64_t v65 = v20[11];
                uint64_t v66 = v64;
                sub_10001581C(a2 + v65, (uint64_t)v17, (uint64_t *)&unk_10099D720);
                uint64_t v67 = v50 + *(int *)(v8 + 48);
                sub_10001581C(v64, v50, (uint64_t *)&unk_10099D720);
                sub_10001581C((uint64_t)v17, v67, (uint64_t *)&unk_10099D720);
                uint64_t v68 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v51 + 48);
                if (v68(v50, 1LL, v49) == 1)
                {
                  sub_100015794((uint64_t)v17, (uint64_t *)&unk_10099D720);
                  sub_100015794(v66, (uint64_t *)&unk_10099D720);
                  if (v68(v67, 1LL, v49) == 1)
                  {
                    sub_100015794(v50, (uint64_t *)&unk_10099D720);
                    return 1LL;
                  }

                  goto LABEL_47;
                }

                uint64_t v69 = (uint64_t)v78;
                sub_10001581C(v50, (uint64_t)v78, (uint64_t *)&unk_10099D720);
                if (v68(v67, 1LL, v49) == 1)
                {
                  sub_100015794((uint64_t)v17, (uint64_t *)&unk_10099D720);
                  sub_100015794(v66, (uint64_t *)&unk_10099D720);
                  (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v69, v49);
LABEL_47:
                  sub_100015794(v50, (uint64_t *)&unk_10099D760);
                  return 0LL;
                }

                uint64_t v70 = v77;
                (*(void (**)(char *, uint64_t, uint64_t))(v51 + 32))(v77, v67, v49);
                uint64_t v71 = sub_100007864( &qword_10099DA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
                char v72 = dispatch thunk of static Equatable.== infix(_:_:)(v69, v70, v49, v71);
                uint64_t v73 = *(void (**)(char *, uint64_t))(v51 + 8);
                v73(v70, v49);
                sub_100015794((uint64_t)v17, (uint64_t *)&unk_10099D720);
                sub_100015794(v66, (uint64_t *)&unk_10099D720);
                v73((char *)v69, v49);
                sub_100015794(v50, (uint64_t *)&unk_10099D720);
                if ((v72 & 1) != 0) {
                  return 1LL;
                }
              }

              return 0LL;
            }
          }

          else
          {
            if ((uint64_t)(v61 - v62) >= 0)
            {
              unint64_t v63 = v62 - v61;
              goto LABEL_41;
            }

            __break(1u);
          }

          __break(1u);
          return result;
        }

        sub_100018BE4(v39, v40);
        sub_100018BE4(v32, v33);
        uint64_t v34 = v39;
        unint64_t v35 = v40;
LABEL_18:
        sub_1000182F0(v34, v35);
        sub_1000182F0(v32, v33);
        return 0LL;
      }
    }

    else if (v33 >> 60 != 15)
    {
      sub_100018BE4(v30, v29);
      sub_100018BE4(v32, v33);
      _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v30, v29);
      char v37 = v36;
      sub_1000182F0(v32, v33);
      uint64_t result = sub_1000182F0(v30, v29);
      if ((v37 & 1) == 0) {
        return 0LL;
      }
      goto LABEL_13;
    }

    sub_100018BE4(v30, v29);
    sub_100018BE4(v32, v33);
    uint64_t v34 = v30;
    unint64_t v35 = v29;
    goto LABEL_18;
  }

  return result;
}

uint64_t sub_100594530(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v34 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v36 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v36 - 8);
  __chkstk_darwin(v36);
  uint64_t v12 = (char *)&v34 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  uint64_t v14 = sub_10000A720(v13, (uint64_t)qword_100A2AE08);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    os_log_type_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    unint64_t v35 = v12;
    uint64_t v18 = a1;
    uint64_t v19 = v9;
    uint64_t v20 = v6;
    uint64_t v21 = a3;
    uint64_t v22 = v10;
    uint64_t v23 = a2;
    uint64_t v24 = v7;
    uint64_t v25 = v17;
    *(_WORD *)os_log_type_t v17 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "SetupVirtualMeDevice: beaconStore is available. Now setting up VirtualMeDevice OBR",  v17,  2u);
    BOOL v26 = v25;
    uint64_t v7 = v24;
    a2 = v23;
    uint64_t v10 = v22;
    a3 = v21;
    uint64_t v6 = v20;
    uint64_t v9 = v19;
    a1 = v18;
    uint64_t v12 = v35;
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  char v27 = (void *)swift_allocObject(&unk_100964A28, 40LL, 7LL);
  v27[2] = a1;
  v27[3] = a2;
  v27[4] = a3;
  aBlock[4] = sub_100595934;
  void aBlock[5] = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100964A40;
  uint64_t v28 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v29 = swift_retain();
  static DispatchQoS.unspecified.getter(v29);
  char v37 = _swiftEmptyArrayStorage;
  uint64_t v30 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v31 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v32 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v31, v32, v6, v30);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v9, v28);
  _Block_release(v28);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v36);
  return swift_release();
}

uint64_t sub_100594814(uint64_t a1)
{
  return sub_100586D74(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100594830()
{
  unint64_t v1 = v0[5];
  if (v1 >> 60 != 15) {
    sub_100016F9C(v0[4], v1);
  }
  sub_100016F9C(v0[6], v0[7]);
  unint64_t v2 = v0[9];
  if (v2 >> 60 != 15) {
    sub_100016F9C(v0[8], v2);
  }
  swift_release();
  return swift_deallocObject(v0, 88LL, 7LL);
}

void sub_100594894()
{
  unint64_t v1 = *(void (**)(_OWORD *, void))(v0 + 16);
  __int128 v2 = *(_OWORD *)(v0 + 48);
  v3[0] = *(_OWORD *)(v0 + 32);
  v3[1] = v2;
  v3[2] = *(_OWORD *)(v0 + 64);
  v1(v3, 0LL);
  Transaction.capture()();
}

uint64_t sub_1005948E8()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

void sub_10059491C()
{
}

uint64_t sub_100594928()
{
  return sub_1001B23E8( (void (*)(void))&_swift_release,  (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_10059493C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10059494C(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v5 = 0xEA00000000007265LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6449794D646E6966LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v7 = 0xE800000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449794D646E6966LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v8 = 0x8000000100869000LL;
    if (a2 == 0x8000000100869000LL) {
      goto LABEL_19;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x8000000100869000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_19:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if (a1 == 0xD000000000000014LL && a2 == 0x8000000100869020LL)
  {
    unint64_t v9 = 0x8000000100869020LL;
LABEL_25:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000014LL, 0x8000000100869020LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_25;
  }

  if (a1 == 0x6E614872656E776FLL && a2 == 0xEB00000000656C64LL)
  {
    unint64_t v10 = 0xEB00000000656C64LL;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E614872656E776FLL, 0xEB00000000656C64LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_31;
  }

  if (a1 == 0xD000000000000015LL)
  {
    unint64_t v11 = 0x800000010084DA30LL;
    if (a2 == 0x800000010084DA30LL) {
      goto LABEL_36;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000015LL, 0x800000010084DA30LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if (a1 == 0xD000000000000013LL && a2 == 0x8000000100869040LL)
  {
    unint64_t v12 = 0x8000000100869040LL;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x8000000100869040LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_42;
  }

  if (a1 == 0xD00000000000001ALL && a2 == 0x8000000100869060LL)
  {
    swift_bridgeObjectRelease(0x8000000100869060LL);
    return 7LL;
  }

  else
  {
    char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD00000000000001ALL, 0x8000000100869060LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v13 & 1) != 0) {
      return 7LL;
    }
    else {
      return 8LL;
    }
  }

uint64_t sub_100594C84(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x614264726F636572LL && a2 == 0xED00004C52556573LL)
  {
    unint64_t v5 = 0xED00004C52556573LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x614264726F636572LL, 0xED00004C52556573LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v7 = 0xEA00000000007265LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x4B676E6972616873LL && a2 == 0xEB00000000737965LL)
  {
    unint64_t v8 = 0xEB00000000737965LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4B676E6972616873LL, 0xEB00000000737965LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x6E49646572616873LL && a2 == 0xEB00000000786564LL)
  {
    swift_bridgeObjectRelease(0xEB00000000786564LL);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E49646572616873LL, 0xEB00000000786564LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

void sub_100594E9C(uint64_t a1, uint64_t a2, dispatch_group_s *a3)
{
  uint64_t v6 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v7 = __chkstk_darwin(v6);
  char v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v32 - v10;
  if (a1)
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    sub_10000A720(v12, (uint64_t)qword_100A2AE08);
    uint64_t v13 = sub_10001DC4C(a2, (uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      os_log_type_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v17 = swift_slowAlloc(32LL, -1LL);
      uint64_t v33 = v17;
      *(_DWORD *)os_log_type_t v16 = 136315138;
      uint64_t v18 = type metadata accessor for UUID(0LL);
      uint64_t v19 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v18, v19);
      uint64_t v32 = sub_1003F11D4(v20, v21, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v14,  v15,  "SetupVirtualMeDevice: Failed to remove duplicate OBR %s",  v16,  0xCu);
      swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v11, type metadata accessor for OwnedBeaconRecord);
    }
  }

  else
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v22 = type metadata accessor for Logger(0LL);
    sub_10000A720(v22, (uint64_t)qword_100A2AE08);
    uint64_t v23 = sub_10001DC4C(a2, (uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.default.getter(v24);
    if (os_log_type_enabled(v24, v25))
    {
      BOOL v26 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v27 = swift_slowAlloc(32LL, -1LL);
      uint64_t v33 = v27;
      *(_DWORD *)BOOL v26 = 136315138;
      uint64_t v28 = type metadata accessor for UUID(0LL);
      uint64_t v29 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter(v28, v29);
      uint64_t v32 = sub_1003F11D4(v30, v31, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v26 + 4, v26 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v24,  v25,  "SetupVirtualMeDevice: Successfully removed duplicate OBR %s",  v26,  0xCu);
      swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v26, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
    }
  }

  dispatch_group_leave(a3);
}

uint64_t sub_100595288(uint64_t a1, uint64_t a2, void *a3)
{
  uint64_t v6 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v76 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v75 = (char *)&v71 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v74 = (char *)&v71 - v9;
  uint64_t v84 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v10 = *(void *)(v84 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  uint64_t v12 = __chkstk_darwin(v84);
  uint64_t v81 = (uint64_t)&v71 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v12);
  os_log_type_t v15 = (char *)&v71 - v14;
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v71 - v16;
  uint64_t v18 = swift_allocObject(&unk_100964BB8, 24LL, 7LL);
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = a3;
  uint64_t v19 = *(void *)(a2 + 32);
  sub_10001DC4C(a1, (uint64_t)v17, type metadata accessor for OwnedBeaconRecord);
  uint64_t v83 = v15;
  sub_10001DC4C((uint64_t)v17, (uint64_t)v15, type metadata accessor for OwnedBeaconRecord);
  uint64_t v20 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v21 = (v20 + 16) & ~v20;
  unint64_t v22 = (v11 + v21 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v77 = v20 | 7;
  uint64_t v23 = swift_allocObject(&unk_100964BE0, v22 + 16, v20 | 7);
  uint64_t v78 = v21;
  sub_10002218C((uint64_t)v17, v23 + v21, type metadata accessor for OwnedBeaconRecord);
  unint64_t v79 = v22;
  uint64_t v80 = v23;
  uint64_t v24 = (void (**)())(v23 + v22);
  *uint64_t v24 = sub_100595A68;
  v24[1] = (void (*)())v18;
  uint64_t v82 = v18;
  uint64_t v25 = v18;
  uint64_t v26 = v19;
  swift_retain_n(v25, 2LL);
  id v72 = a3;
  uint64_t v27 = swift_retain();
  uint64_t v28 = static os_log_type_t.default.getter(v27);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v29 = qword_100A2B018;
  uint64_t v30 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v31 = swift_allocObject(v30, 72LL, 7LL);
  __int128 v73 = xmmword_1007E67D0;
  *(_OWORD *)(v31 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v32 = *(int *)(v84 + 20);
  uint64_t v84 = a1;
  uint64_t v33 = a1 + v32;
  uint64_t v34 = type metadata accessor for UUID(0LL);
  uint64_t v35 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter(v34, v35);
  uint64_t v38 = v37;
  *(void *)(v31 + 56) = &type metadata for String;
  *(void *)(v31 + 64) = sub_1000226F4();
  *(void *)(v31 + 32) = v36;
  *(void *)(v31 + 40) = v38;
  os_log(_:dso:log:_:_:)(v28, &_mh_execute_header, v29, "Unpair owned beacon: %@", 23LL, 2LL, v31);
  uint64_t v39 = swift_bridgeObjectRelease();
  unint64_t v40 = v74;
  static SystemInfo.lockState.getter(v39);
  char v42 = v75;
  uint64_t v41 = v76;
  (*(void (**)(char *, void, uint64_t))(v76 + 104))( v75,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v6);
  uint64_t v43 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v86, v6, v43);
  dispatch thunk of RawRepresentable.rawValue.getter(&v85, v6, v43);
  uint64_t v45 = v85;
  uint64_t v44 = v86;
  uint64_t v46 = *(void (**)(char *, uint64_t))(v41 + 8);
  v46(v42, v6);
  uint64_t v47 = ((uint64_t (*)(char *, uint64_t))v46)(v40, v6);
  uint64_t v48 = (uint64_t)v83;
  if (v44 == v45)
  {
    uint64_t v49 = static os_log_type_t.default.getter(v47);
    os_log(_:dso:log:_:_:)( v49,  &_mh_execute_header,  qword_100A2B018,  "unpair call failed because in device is in beforeFirstUnlock state",  66LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v50 = sub_1000220F0();
    uint64_t v51 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v50, 0LL, 0LL);
    *uint64_t v52 = 0;
    char v53 = (dispatch_group_s *)v72;
    sub_100594E9C(v51, v48, v53);

    swift_errorRelease(v51);
  }

  uint64_t v54 = dispatch_group_create();
  dispatch_group_enter(v54);
  uint64_t v55 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
  uint64_t v56 = *(void *)(v34 - 8);
  uint64_t v57 = *(unsigned __int8 *)(v56 + 80);
  uint64_t v58 = (v57 + 32) & ~v57;
  uint64_t v59 = swift_allocObject(v55, v58 + *(void *)(v56 + 72), v57 | 7);
  *(_OWORD *)(v59 + swift_weakDestroy(v0 + 16) = v73;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v56 + 16))(v59 + v58, v33, v34);
  uint64_t v60 = swift_allocObject(&unk_100964C08, 24LL, 7LL);
  *(void *)(v60 + swift_weakDestroy(v0 + 16) = v54;
  unint64_t v61 = v54;
  sub_10047B904(v59, (uint64_t)sub_10014F0B8, v60);
  swift_bridgeObjectRelease();
  swift_release();
  OS_dispatch_group.wait()();
  uint64_t v62 = v84;
  uint64_t v63 = v81;
  sub_10001DC4C(v84, v81, type metadata accessor for OwnedBeaconRecord);
  unint64_t v64 = v79;
  unint64_t v65 = (v79 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v66 = swift_allocObject(&unk_100964C30, v65 + 10, v77);
  sub_10002218C(v63, v66 + v78, type metadata accessor for OwnedBeaconRecord);
  uint64_t v67 = (uint64_t (**)(uint64_t))(v66 + v64);
  uint64_t v68 = (uint64_t (*)(uint64_t))v80;
  dispatch_group_s *v67 = sub_100595D20;
  v67[1] = v68;
  unint64_t v69 = v66 + v65;
  *(void *)unint64_t v69 = v26;
  *(_WORD *)(v69 + 8) = 257;
  swift_retain();
  swift_retain();
  sub_10013E898(v62, (void (*)(void))sub_10015461C, v66);
  swift_release();
  swift_release();
  swift_release();

  sub_100018C68(v48, type metadata accessor for OwnedBeaconRecord);
  return swift_release_n(v82, 2LL);
}

uint64_t sub_100595810()
{
  return sub_1001B23E8( (void (*)(void))&_swift_release,  (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100595824()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100595834()
{
  return sub_10020F99C((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100595840()
{
  unint64_t v1 = *(uint64_t (**)(void *, uint64_t))(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 32);
  memset(v4, 0, 24);
  v4[3] = 0xF000000000000000LL;
  void v4[4] = 0LL;
  void v4[5] = 0LL;
  return v1(v4, v2);
}

uint64_t sub_100595884()
{
  unint64_t v1 = v0[5];
  if (v1 >> 60 != 15) {
    sub_100016F9C(v0[4], v1);
  }
  sub_100016F9C(v0[6], v0[7]);
  unint64_t v2 = v0[9];
  if (v2 >> 60 != 15) {
    sub_100016F9C(v0[8], v2);
  }
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_1005958E0()
{
  unint64_t v1 = *(uint64_t (**)(_OWORD *, void))(v0 + 16);
  __int128 v2 = *(_OWORD *)(v0 + 48);
  v4[0] = *(_OWORD *)(v0 + 32);
  v4[1] = v2;
  v4[2] = *(_OWORD *)(v0 + 64);
  return v1(v4, 0LL);
}

uint64_t sub_100595924()
{
  return sub_1001B23E8((void (*)(void))&_swift_release, (void (*)(void))&_swift_release);
}

uint64_t sub_100595934()
{
  return sub_100582894(v0[2], v0[3], v0[4]);
}

uint64_t sub_100595940()
{
  return swift_deallocObject(v0, 33LL, 7LL);
}

uint64_t sub_100595964()
{
  return sub_1001B23E8( (void (*)(void))&_swift_release,  (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100595978()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100595988(uint64_t a1)
{
  return sub_100584680(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

void sub_1005959A0(uint64_t a1)
{
}

uint64_t sub_1005959B8()
{
  swift_release(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

void sub_1005959EC(uint64_t a1)
{
}

uint64_t sub_1005959F8(uint64_t a1)
{
  return sub_100584E40(a1, v1);
}

uint64_t sub_100595A10()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_100595A3C()
{
}

uint64_t sub_100595A44()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_100595A68()
{
}

uint64_t sub_100595A70()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | 7);
}

uint64_t sub_100595D20(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL);
  return sub_1005856B0(a1, v1 + v4, *(uint64_t (**)(void))v5, *(void *)(v5 + 8));
}

uint64_t sub_100595D74()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 10, v3 | 7);
}

uint64_t sub_100596034()
{
  return sub_1001B23E8( (void (*)(void))&_swift_release,  (void (*)(void))&_swift_bridgeObjectRelease);
}

uint64_t sub_100596048()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10059605C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_100596090(char a1)
{
  return sub_10058E544( a1,  *(uint64_t (**)(void))(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40));
}

uint64_t sub_10059609C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1005960D0()
{
  return sub_10058E920(v0[2], v0[3], v0[4], v0[5]);
}

uint64_t sub_1005960DC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100596100()
{
  swift_release(*(void *)(v0 + 24));
  swift_release(*(void *)(v0 + 40));
  swift_release(*(void *)(v0 + 48));
  return swift_deallocObject(v0, 56LL, 7LL);
}

void sub_10059613C(uint64_t a1)
{
}

uint64_t sub_10059614C()
{
  return sub_10020F99C((void (*)(void))&_swift_errorRelease);
}

uint64_t sub_100596158()
{
  return sub_1001B23E8((void (*)(void))&_swift_release, (void (*)(void))&_swift_release);
}

void sub_100596168()
{
}

void sub_100596174()
{
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2AE08);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.debug.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v5 = swift_slowAlloc(32LL, -1LL);
    uint64_t v19 = v5;
    *(_DWORD *)uint64_t v4 = 136315138;
    uint64_t v18 = sub_1003F11D4(0xD000000000000025LL, 0x8000000100868F10LL, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v4 + 4, v4 + 12);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "%s", v4, 0xCu);
    swift_arrayDestroy(v5, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v5, -1LL, -1LL);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  id v6 = objc_allocWithZone(&OBJC_CLASS___NSError);
  NSString v7 = String._bridgeToObjectiveC()();
  id v8 = [v6 initWithDomain:v7 code:0 userInfo:0];

  id v9 = v8;
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.error.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    uint64_t v18 = (uint64_t)v9;
    uint64_t v19 = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    id v14 = v9;
    uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v16 = String.init<A>(describing:)(&v18, v15);
    uint64_t v18 = sub_1003F11D4(v16, v17, &v19);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, &v19, v12 + 4, v12 + 12);

    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Unable to get follower handles %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {
  }

uint64_t sub_10059647C()
{
  return swift_deallocObject(v0, 72LL, 7LL);
}

unint64_t sub_1005964B8(uint64_t a1)
{
  return sub_10059294C( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(void *)(v1 + 48),  *(void (**)(uint64_t))(v1 + 56),  *(void *)(v1 + 64));
}

void sub_1005964CC(void *a1@<X8>)
{
}

uint64_t sub_1005964E4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

unint64_t sub_100596508(uint64_t a1)
{
  return sub_100593110(a1, v1);
}

unint64_t sub_100596510()
{
  unint64_t result = qword_1009A56B0;
  if (!qword_1009A56B0)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A1EC8);
    sub_1001C8994();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009A56B0);
  }

  return result;
}

uint64_t type metadata accessor for SecureLocationsCachedSharedKey(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009B3788, (uint64_t)&nominal type descriptor for SecureLocationsCachedSharedKey);
}

uint64_t *sub_100596588(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v16 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    os_log_type_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    void *v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (char *)a1 + v9;
    id v14 = (_OWORD *)((char *)a2 + v9);
    unint64_t v15 = *(uint64_t *)((char *)a2 + v9 + 8);
    swift_bridgeObjectRetain(v12);
    if (v15 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v13 = *v14;
    }

    else
    {
      uint64_t v17 = *(void *)v14;
      sub_10001736C(v17, v15);
      *(void *)uint64_t v13 = v17;
      *((void *)v13 + 1) = v15;
    }

    uint64_t v18 = a3[7];
    uint64_t v19 = (char *)a1 + v18;
    uint64_t v20 = (char *)a2 + v18;
    unint64_t v21 = *((void *)v20 + 1);
    if (v21 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    }

    else
    {
      uint64_t v22 = *(void *)v20;
      sub_10001736C(*(void *)v20, *((void *)v20 + 1));
      *(void *)uint64_t v19 = v22;
      *((void *)v19 + 1) = v21;
    }

    uint64_t v23 = a3[8];
    uint64_t v24 = a3[9];
    uint64_t v25 = (char *)a1 + v23;
    uint64_t v26 = (char *)a2 + v23;
    *uint64_t v25 = *v26;
    uint64_t v27 = *((void *)v26 + 2);
    *((void *)v25 + 1) = *((void *)v26 + 1);
    *((void *)v25 + 2) = v27;
    uint64_t v28 = (uint64_t *)((char *)a1 + v24);
    uint64_t v29 = (uint64_t *)((char *)a2 + v24);
    uint64_t v30 = v29[1];
    *uint64_t v28 = *v29;
    v28[1] = v30;
    uint64_t v31 = a3[11];
    *(uint64_t *)((char *)a1 + a3[10]) = *(uint64_t *)((char *)a2 + a3[10]);
    uint64_t v32 = (char *)a1 + v31;
    uint64_t v33 = (char *)a2 + v31;
    uint64_t v34 = type metadata accessor for Date(0LL);
    uint64_t v35 = *(void *)(v34 - 8);
    uint64_t v36 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v35 + 48);
    swift_bridgeObjectRetain(v27);
    __n128 v37 = swift_bridgeObjectRetain(v30);
    if (v36(v33, 1LL, v34, v37))
    {
      uint64_t v38 = sub_100004AEC((uint64_t *)&unk_10099D720);
      memcpy(v32, v33, *(void *)(*(void *)(v38 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v35 + 16))(v32, v33, v34);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v32, 0LL, 1LL, v34);
    }
  }

  return a1;
}

uint64_t sub_100596768(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  swift_bridgeObjectRelease();
  int v5 = (uint64_t *)(a1 + a2[6]);
  unint64_t v6 = v5[1];
  if (v6 >> 60 != 15) {
    sub_100016F9C(*v5, v6);
  }
  uint64_t v7 = (uint64_t *)(a1 + a2[7]);
  unint64_t v8 = v7[1];
  if (v8 >> 60 != 15) {
    sub_100016F9C(*v7, v8);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v9 = a1 + a2[11];
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
  }
  return result;
}

uint64_t sub_100596868(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = a1 + v8;
  uint64_t v13 = (_OWORD *)(a2 + v8);
  unint64_t v14 = *(void *)(a2 + v8 + 8);
  swift_bridgeObjectRetain(v11);
  if (v14 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v12 = *v13;
  }

  else
  {
    uint64_t v15 = *(void *)v13;
    sub_10001736C(v15, v14);
    *(void *)uint64_t v12 = v15;
    *(void *)(v12 + 8) = v14;
  }

  uint64_t v16 = a3[7];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = (uint64_t *)(a2 + v16);
  unint64_t v19 = v18[1];
  if (v19 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v17 = *(_OWORD *)v18;
  }

  else
  {
    uint64_t v20 = *v18;
    sub_10001736C(*v18, v18[1]);
    *(void *)uint64_t v17 = v20;
    *(void *)(v17 + 8) = v19;
  }

  uint64_t v21 = a3[8];
  uint64_t v22 = a3[9];
  uint64_t v23 = a1 + v21;
  uint64_t v24 = a2 + v21;
  *(_BYTE *)uint64_t v23 = *(_BYTE *)v24;
  uint64_t v25 = *(void *)(v24 + 16);
  *(void *)(v23 + 8) = *(void *)(v24 + 8);
  *(void *)(v23 + swift_weakDestroy(v0 + 16) = v25;
  uint64_t v26 = (void *)(a1 + v22);
  uint64_t v27 = (void *)(a2 + v22);
  uint64_t v28 = v27[1];
  *uint64_t v26 = *v27;
  v26[1] = v28;
  uint64_t v29 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (const void *)(a2 + v29);
  uint64_t v32 = type metadata accessor for Date(0LL);
  uint64_t v33 = *(void *)(v32 - 8);
  uint64_t v34 = *(unsigned int (**)(const void *, uint64_t, uint64_t, __n128))(v33 + 48);
  swift_bridgeObjectRetain(v25);
  __n128 v35 = swift_bridgeObjectRetain(v28);
  if (v34(v31, 1LL, v32, v35))
  {
    uint64_t v36 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v30, v31, *(void *)(*(void *)(v36 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v33 + 16))(v30, v31, v32);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v33 + 56))(v30, 0LL, 1LL, v32);
  }

  return a1;
}

uint64_t sub_100596A1C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  uint64_t v10 = v9[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[6];
  uint64_t v12 = (uint64_t *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  unint64_t v14 = *(void *)(a2 + v11 + 8);
  if (*(void *)(a1 + v11 + 8) >> 60 == 15LL)
  {
    if (v14 >> 60 != 15)
    {
      uint64_t v15 = *v13;
      sub_10001736C(v15, v14);
      *uint64_t v12 = v15;
      v12[1] = v14;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v14 >> 60 == 15)
  {
    sub_100170B90((uint64_t)v12);
LABEL_6:
    *(_OWORD *)uint64_t v12 = *(_OWORD *)v13;
    goto LABEL_8;
  }

  uint64_t v16 = *v13;
  sub_10001736C(v16, v14);
  uint64_t v17 = *v12;
  unint64_t v18 = v12[1];
  *uint64_t v12 = v16;
  v12[1] = v14;
  sub_100016F9C(v17, v18);
LABEL_8:
  uint64_t v19 = a3[7];
  uint64_t v20 = (uint64_t *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  unint64_t v22 = *(void *)(a2 + v19 + 8);
  if (*(void *)(a1 + v19 + 8) >> 60 == 15LL)
  {
    if (v22 >> 60 != 15)
    {
      uint64_t v23 = *v21;
      sub_10001736C(v23, v22);
      *uint64_t v20 = v23;
      v20[1] = v22;
      goto LABEL_15;
    }

    goto LABEL_13;
  }

  if (v22 >> 60 == 15)
  {
    sub_100596CDC((uint64_t)v20);
LABEL_13:
    *(_OWORD *)uint64_t v20 = *(_OWORD *)v21;
    goto LABEL_15;
  }

  uint64_t v24 = *v21;
  sub_10001736C(v24, v22);
  uint64_t v25 = *v20;
  unint64_t v26 = v20[1];
  *uint64_t v20 = v24;
  v20[1] = v22;
  sub_100016F9C(v25, v26);
LABEL_15:
  uint64_t v27 = a3[8];
  uint64_t v28 = a1 + v27;
  uint64_t v29 = a2 + v27;
  *(_BYTE *)uint64_t v28 = *(_BYTE *)v29;
  *(void *)(v28 + 8) = *(void *)(v29 + 8);
  uint64_t v30 = *(void *)(v29 + 16);
  *(void *)(v28 + swift_weakDestroy(v0 + 16) = v30;
  swift_bridgeObjectRetain(v30);
  swift_bridgeObjectRelease();
  uint64_t v31 = a3[9];
  uint64_t v32 = (void *)(a1 + v31);
  uint64_t v33 = (void *)(a2 + v31);
  *uint64_t v32 = *v33;
  uint64_t v34 = v33[1];
  v32[1] = v34;
  swift_bridgeObjectRetain(v34);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  uint64_t v35 = a3[11];
  uint64_t v36 = (void *)(a1 + v35);
  __n128 v37 = (void *)(a2 + v35);
  uint64_t v38 = type metadata accessor for Date(0LL);
  uint64_t v39 = *(void *)(v38 - 8);
  unint64_t v40 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v39 + 48);
  int v41 = v40(v36, 1LL, v38);
  int v42 = v40(v37, 1LL, v38);
  if (!v41)
  {
    if (!v42)
    {
      (*(void (**)(void *, void *, uint64_t))(v39 + 24))(v36, v37, v38);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v39 + 8))(v36, v38);
    goto LABEL_20;
  }

  if (v42)
  {
LABEL_20:
    uint64_t v43 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v36, v37, *(void *)(*(void *)(v43 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v39 + 16))(v36, v37, v38);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v39 + 56))(v36, 0LL, 1LL, v38);
  return a1;
}

uint64_t sub_100596CDC(uint64_t a1)
{
  return a1;
}

uint64_t sub_100596D10(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = *(void *)(v10 + 16);
  uint64_t v11 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  uint64_t v12 = *(void *)(a2 + v11);
  uint64_t v13 = a3[11];
  unint64_t v14 = (const void *)(a2 + v13);
  uint64_t v15 = (void *)(a1 + v13);
  *(void *)(a1 + v11) = v12;
  uint64_t v16 = type metadata accessor for Date(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v17 + 48))(v14, 1LL, v16))
  {
    uint64_t v18 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v15, v14, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v15, v14, v16);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v15, 0LL, 1LL, v16);
  }

  return a1;
}

uint64_t sub_100596E38(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease();
  uint64_t v12 = a3[6];
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  unint64_t v15 = *(void *)(a1 + v12 + 8);
  if (v15 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v16 = *(void *)(v14 + 8);
  if (v16 >> 60 == 15)
  {
    sub_100170B90(v13);
LABEL_4:
    *(_OWORD *)uint64_t v13 = *(_OWORD *)v14;
    goto LABEL_6;
  }

  uint64_t v17 = *(void *)v13;
  *(void *)uint64_t v13 = *(void *)v14;
  *(void *)(v13 + 8) = v16;
  sub_100016F9C(v17, v15);
LABEL_6:
  uint64_t v18 = a3[7];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  unint64_t v21 = *(void *)(a1 + v18 + 8);
  if (v21 >> 60 == 15)
  {
LABEL_9:
    *(_OWORD *)uint64_t v19 = *(_OWORD *)v20;
    goto LABEL_11;
  }

  unint64_t v22 = *(void *)(v20 + 8);
  if (v22 >> 60 == 15)
  {
    sub_100596CDC(v19);
    goto LABEL_9;
  }

  uint64_t v23 = *(void *)v19;
  *(void *)uint64_t v19 = *(void *)v20;
  *(void *)(v19 + 8) = v22;
  sub_100016F9C(v23, v21);
LABEL_11:
  uint64_t v24 = a3[8];
  uint64_t v25 = a1 + v24;
  uint64_t v26 = a2 + v24;
  *(_BYTE *)uint64_t v25 = *(_BYTE *)v26;
  uint64_t v28 = *(void *)(v26 + 8);
  uint64_t v27 = *(void *)(v26 + 16);
  *(void *)(v25 + 8) = v28;
  *(void *)(v25 + swift_weakDestroy(v0 + 16) = v27;
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[9];
  uint64_t v30 = (void *)(a1 + v29);
  uint64_t v31 = (uint64_t *)(a2 + v29);
  uint64_t v33 = *v31;
  uint64_t v32 = v31[1];
  *uint64_t v30 = v33;
  v30[1] = v32;
  swift_bridgeObjectRelease();
  uint64_t v34 = a3[11];
  *(void *)(a1 + a3[10]) = *(void *)(a2 + a3[10]);
  uint64_t v35 = (void *)(a1 + v34);
  uint64_t v36 = (void *)(a2 + v34);
  uint64_t v37 = type metadata accessor for Date(0LL);
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v38 + 48);
  int v40 = v39(v35, 1LL, v37);
  int v41 = v39(v36, 1LL, v37);
  if (!v40)
  {
    if (!v41)
    {
      (*(void (**)(void *, void *, uint64_t))(v38 + 40))(v35, v36, v37);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v38 + 8))(v35, v37);
    goto LABEL_16;
  }

  if (v41)
  {
LABEL_16:
    uint64_t v42 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v35, v36, *(void *)(*(void *)(v42 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v38 + 32))(v35, v36, v37);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v38 + 56))(v35, 0LL, 1LL, v37);
  return a1;
}

uint64_t sub_100597064(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100597070);
}

uint64_t sub_100597070(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D720);
    uint64_t v10 = a1 + *(int *)(a3 + 44);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
    return v9(v10, a2, v8);
  }

  unint64_t v11 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
  if (v11 >= 0xFFFFFFFF) {
    LODWORD(v11) = -1;
  }
  return (v11 + 1);
}

uint64_t sub_100597120(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10059712C);
}

uint64_t sub_10059712C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
      return result;
    }

    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D720);
    uint64_t v12 = a1 + *(int *)(a4 + 44);
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

void sub_1005971D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    v6[1] = &unk_1008077E0;
    v6[2] = &unk_1008077F8;
    v6[3] = &unk_1008077F8;
    void v6[4] = &unk_100807810;
    v6[5] = &unk_1008076E0;
    v6[6] = (char *)&value witness table for Builtin.Int64 + 64;
    sub_10009361C( 319LL,  (unint64_t *)&qword_1009A09E0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    if (v5 <= 0x3F)
    {
      v6[7] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 8LL, v6, a1 + 16);
    }
  }

uint64_t storeEnumTagSinglePayload for SecureLocationsCachedSharingKey.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1005972F0 + 4 * byte_10080763B[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100597324 + 4 * byte_100807636[v4]))();
}

uint64_t sub_100597324(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10059732C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100597334LL);
  }
  return result;
}

uint64_t sub_100597340(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100597348LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10059734C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100597354(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsCachedSharingKey.CodingKeys()
{
  return &type metadata for SecureLocationsCachedSharingKey.CodingKeys;
}

unint64_t sub_100597374()
{
  unint64_t result = qword_1009B37D8;
  if (!qword_1009B37D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008078C4, &type metadata for SecureLocationsCachedSharingKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B37D8);
  }

  return result;
}

uint64_t sub_1005973B8()
{
  return sub_100007864( &qword_1009B37E0,  type metadata accessor for SecureLocationsCachedSharedKey,  (uint64_t)&unk_1008078EC);
}

uint64_t sub_1005973E4(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100007864( &qword_1009B29F0,  type metadata accessor for SecureLocationsCachedSharedKey,  (uint64_t)&unk_100807998);
  uint64_t result = sub_100007864( &qword_1009B2C00,  type metadata accessor for SecureLocationsCachedSharedKey,  (uint64_t)&unk_100807970);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_100597444()
{
  unint64_t result = qword_1009B37E8;
  if (!qword_1009B37E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100807834, &type metadata for SecureLocationsCachedSharingKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B37E8);
  }

  return result;
}

unint64_t sub_10059748C()
{
  unint64_t result = qword_1009B37F0;
  if (!qword_1009B37F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080785C, &type metadata for SecureLocationsCachedSharingKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B37F0);
  }

  return result;
}

unint64_t sub_1005974D0()
{
  unint64_t result = qword_1009B3800;
  if (!qword_1009B3800)
  {
    unint64_t result = swift_getWitnessTable(&unk_100807AC8, &type metadata for SecureLocationsCachedSharedKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3800);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsCachedSharedKey.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_100597560 + 4 * byte_100807645[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_100597594 + 4 * byte_100807640[v4]))();
}

uint64_t sub_100597594(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10059759C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005975A4LL);
  }
  return result;
}

uint64_t sub_1005975B0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005975B8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 7;
  return result;
}

uint64_t sub_1005975BC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005975C4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsCachedSharedKey.CodingKeys()
{
  return &type metadata for SecureLocationsCachedSharedKey.CodingKeys;
}

unint64_t sub_1005975E4()
{
  unint64_t result = qword_1009B3810;
  if (!qword_1009B3810)
  {
    unint64_t result = swift_getWitnessTable(&unk_100807AA0, &type metadata for SecureLocationsCachedSharedKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3810);
  }

  return result;
}

unint64_t sub_10059762C()
{
  unint64_t result = qword_1009B3818;
  if (!qword_1009B3818)
  {
    unint64_t result = swift_getWitnessTable(&unk_100807A10, &type metadata for SecureLocationsCachedSharedKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3818);
  }

  return result;
}

unint64_t sub_100597674()
{
  unint64_t result = qword_1009B3820;
  if (!qword_1009B3820)
  {
    unint64_t result = swift_getWitnessTable(&unk_100807A38, &type metadata for SecureLocationsCachedSharedKey.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3820);
  }

  return result;
}

uint64_t sub_100597780(uint64_t a1)
{
  return sub_100594814(a1);
}

uint64_t sub_100597798(unint64_t a1, unint64_t a2)
{
  int v2 = a2;
  int v3 = a1;
  unint64_t v4 = HIDWORD(a1);
  unint64_t v5 = HIDWORD(a2);
  uint64_t v6 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v70 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  LODWORD(v76) = v3;
  unint64_t v9 = sub_10008CFE8();
  uint64_t v10 = FixedWidthInteger.data.getter(&type metadata for UInt32, v9);
  unint64_t v12 = v11;
  uint64_t v76 = v10;
  unint64_t v77 = v11;
  static String.Encoding.ascii.getter();
  unint64_t v13 = sub_100042440();
  uint64_t v73 = String.init<A>(bytes:encoding:)(&v76, v8, &type metadata for Data, v13);
  unint64_t v15 = v14;
  sub_100016F9C(v10, v12);
  if (!v15) {
    goto LABEL_11;
  }
  unint64_t v74 = v5;
  LODWORD(v76) = v4;
  uint64_t v16 = FixedWidthInteger.data.getter(&type metadata for UInt32, v9);
  unint64_t v18 = v17;
  uint64_t v76 = v16;
  unint64_t v77 = v17;
  static String.Encoding.ascii.getter();
  uint64_t v72 = String.init<A>(bytes:encoding:)(&v76, v8, &type metadata for Data, v13);
  uint64_t v20 = v19;
  sub_100016F9C(v16, v18);
  if (!v20)
  {
    LODWORD(v5) = v74;
LABEL_10:
    swift_bridgeObjectRelease();
LABEL_11:
    LODWORD(v76) = v3;
    uint64_t v38 = FixedWidthInteger.data.getter(&type metadata for UInt32, v9);
    unint64_t v40 = v39;
    uint64_t v41 = Data.hexString.getter(v38, v39);
    int v42 = v4;
    unint64_t v44 = v43;
    sub_100016F9C(v38, v40);
    uint64_t v76 = v41;
    unint64_t v77 = v44;
    v45._countAndFlagsBits = 46LL;
    v45._object = (void *)0xE100000000000000LL;
    String.append(_:)(v45);
    int v75 = v42;
    uint64_t v46 = FixedWidthInteger.data.getter(&type metadata for UInt32, v9);
    unint64_t v48 = v47;
    uint64_t v49 = Data.hexString.getter(v46, v47);
    uint64_t v51 = v50;
    sub_100016F9C(v46, v48);
    v52._countAndFlagsBits = v49;
    v52._object = v51;
    String.append(_:)(v52);
    swift_bridgeObjectRelease();
    v53._countAndFlagsBits = 46LL;
    v53._object = (void *)0xE100000000000000LL;
    String.append(_:)(v53);
    int v75 = v2;
    uint64_t v54 = FixedWidthInteger.data.getter(&type metadata for UInt32, v9);
    unint64_t v56 = v55;
    uint64_t v57 = Data.hexString.getter(v54, v55);
    uint64_t v59 = v58;
    sub_100016F9C(v54, v56);
    v60._countAndFlagsBits = v57;
    v60._object = v59;
    String.append(_:)(v60);
    swift_bridgeObjectRelease();
    v61._countAndFlagsBits = 46LL;
    v61._object = (void *)0xE100000000000000LL;
    String.append(_:)(v61);
    int v75 = v5;
    uint64_t v62 = FixedWidthInteger.data.getter(&type metadata for UInt32, v9);
    unint64_t v64 = v63;
    uint64_t v65 = Data.hexString.getter(v62, v63);
    uint64_t v67 = v66;
    sub_100016F9C(v62, v64);
    v68._countAndFlagsBits = v65;
    v68._object = v67;
    String.append(_:)(v68);
    goto LABEL_12;
  }

  unint64_t v71 = v4;
  LODWORD(v76) = v2;
  uint64_t v21 = FixedWidthInteger.data.getter(&type metadata for UInt32, v9);
  unint64_t v23 = v22;
  uint64_t v76 = v21;
  unint64_t v77 = v22;
  static String.Encoding.ascii.getter();
  uint64_t v70 = String.init<A>(bytes:encoding:)(&v76, v8, &type metadata for Data, v13);
  uint64_t v25 = v24;
  sub_100016F9C(v21, v23);
  if (!v25)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    LODWORD(v5) = v74;
    LODWORD(v4) = v71;
    goto LABEL_10;
  }

  LODWORD(v76) = v74;
  uint64_t v26 = FixedWidthInteger.data.getter(&type metadata for UInt32, v9);
  unint64_t v28 = v27;
  uint64_t v76 = v26;
  unint64_t v77 = v27;
  static String.Encoding.ascii.getter();
  uint64_t v29 = String.init<A>(bytes:encoding:)(&v76, v8, &type metadata for Data, v13);
  uint64_t v31 = v30;
  sub_100016F9C(v26, v28);
  if (!v31)
  {
    swift_bridgeObjectRelease();
    goto LABEL_9;
  }

  uint64_t v76 = v73;
  unint64_t v77 = v15;
  v32._countAndFlagsBits = 46LL;
  v32._object = (void *)0xE100000000000000LL;
  String.append(_:)(v32);
  v33._countAndFlagsBits = v72;
  v33._object = v20;
  String.append(_:)(v33);
  swift_bridgeObjectRelease();
  v34._countAndFlagsBits = 46LL;
  v34._object = (void *)0xE100000000000000LL;
  String.append(_:)(v34);
  v35._countAndFlagsBits = v70;
  v35._object = v25;
  String.append(_:)(v35);
  swift_bridgeObjectRelease();
  v36._countAndFlagsBits = 46LL;
  v36._object = (void *)0xE100000000000000LL;
  String.append(_:)(v36);
  v37._countAndFlagsBits = v29;
  v37._object = v31;
  String.append(_:)(v37);
LABEL_12:
  swift_bridgeObjectRelease();
  return v76;
}

uint64_t sub_100597BA0(void *a1, unint64_t a2, unint64_t a3)
{
  uint64_t v7 = sub_100004AEC(&qword_1009B3840);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v15 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100012ED8(a1, v11);
  unint64_t v13 = sub_1005987B0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for LocalFindableAccessoryFirmwareVersionNumber.CodingKeys,  &type metadata for LocalFindableAccessoryFirmwareVersionNumber.CodingKeys,  v13,  v11,  v12);
  char v19 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, &v19, v7);
  if (!v3)
  {
    char v18 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(HIDWORD(a2), &v18, v7);
    char v17 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(a3, &v17, v7);
    char v16 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(HIDWORD(a3), &v16, v7);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v10, v7);
}

uint64_t sub_100597D0C()
{
  return qword_100807D58[*v0];
}

uint64_t sub_100597D24@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1005984B0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100597D48(uint64_t a1)
{
  unint64_t v2 = sub_1005987B0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100597D70(uint64_t a1)
{
  unint64_t v2 = sub_1005987B0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100597D98@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_100598608(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

uint64_t sub_100597DCC(void *a1)
{
  return sub_100597BA0(a1, *v1, v1[1]);
}

uint64_t sub_100597DE4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = v2[1];
  uint64_t v5 = v2[2];
  uint64_t v6 = v2[3];
  uint64_t v10 = CustomStringConvertible.typeDescription.getter(a1, a2);
  v7._countAndFlagsBits = 32LL;
  v7._object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  v8._countAndFlagsBits = sub_100597798(v3 | (v4 << 32), v5 | (v6 << 32));
  String.append(_:)(v8);
  swift_bridgeObjectRelease();
  return v10;
}

Swift::Int sub_100597E64()
{
  Swift::UInt32 v1 = *v0;
  Swift::UInt32 v2 = v0[1];
  Swift::UInt32 v3 = v0[2];
  Swift::UInt32 v4 = v0[3];
  Hasher.init(_seed:)(v6, 0LL);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void sub_100597EE0()
{
  Swift::UInt32 v1 = v0[1];
  Swift::UInt32 v2 = v0[2];
  Swift::UInt32 v3 = v0[3];
  Hasher._combine(_:)(*v0);
  Hasher._combine(_:)(v1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
}

Swift::Int sub_100597F34(uint64_t a1)
{
  Swift::UInt32 v2 = *v1;
  Swift::UInt32 v3 = v1[1];
  Swift::UInt32 v4 = v1[2];
  Swift::UInt32 v5 = v1[3];
  Hasher.init(_seed:)(v7, a1);
  Hasher._combine(_:)(v2);
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v4);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

BOOL sub_100597FAC(_DWORD *a1, _DWORD *a2)
{
  return *a1 == *a2 && a1[1] == a2[1] && a1[2] == a2[2] && a1[3] == a2[3];
}

void *sub_100597FE8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Endianness(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v49 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for String.Encoding(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v49 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v58[0] = a1;
  v58[1] = a2;
  v57[0] = 46LL;
  v57[1] = 0xE100000000000000LL;
  unint64_t v11 = sub_1000155F8();
  uint64_t v12 = (void *)StringProtocol.components<A>(separatedBy:)( v57,  &type metadata for String,  &type metadata for String,  v11,  v11);
  swift_bridgeObjectRelease();
  if (v12[2] != 4LL) {
    goto LABEL_8;
  }
  uint64_t v13 = v12[4];
  uint64_t v14 = v12[5];
  __n128 v15 = swift_bridgeObjectRetain(v14);
  static String.Encoding.ascii.getter(v15);
  uint64_t v16 = String.data(using:allowLossyConversion:)(v10, 0LL, v13, v14);
  unint64_t v18 = v17;
  swift_bridgeObjectRelease();
  char v19 = *(void (**)(char *, uint64_t))(v8 + 8);
  v19(v10, v7);
  if (v18 >> 60 == 15) {
    goto LABEL_8;
  }
  uint64_t v20 = sub_10001736C(v16, v18);
  static Endianness.current.getter(v20);
  unint64_t v21 = sub_10008CFE8();
  uint64_t result = FixedWidthInteger.init(data:ofEndianness:)(v58, v16, v18, v6);
  if (BYTE4(v58[0]) == 1) {
    goto LABEL_6;
  }
  unint64_t v56 = v21;
  if (v12[2] < 2uLL)
  {
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    return result;
  }

  uint64_t v55 = LODWORD(v58[0]);
  uint64_t v23 = v12[6];
  uint64_t v24 = v12[7];
  __n128 v25 = swift_bridgeObjectRetain(v24);
  static String.Encoding.ascii.getter(v25);
  uint64_t v26 = String.data(using:allowLossyConversion:)(v10, 0LL, v23, v24);
  unint64_t v28 = v27;
  swift_bridgeObjectRelease();
  v19(v10, v7);
  if (v28 >> 60 == 15)
  {
LABEL_6:
    uint64_t v29 = v16;
    unint64_t v30 = v18;
LABEL_7:
    sub_1000182F0(v29, v30);
LABEL_8:
    swift_bridgeObjectRelease();
    return 0LL;
  }

  uint64_t v31 = sub_10001736C(v26, v28);
  static Endianness.current.getter(v31);
  unint64_t v32 = v28;
  uint64_t result = FixedWidthInteger.init(data:ofEndianness:)(v58, v26, v28, v6);
  if (BYTE4(v58[0]) == 1)
  {
    uint64_t v33 = v16;
    unint64_t v34 = v18;
LABEL_12:
    sub_1000182F0(v33, v34);
    uint64_t v29 = v26;
    unint64_t v30 = v32;
    goto LABEL_7;
  }

  unint64_t v53 = v28;
  uint64_t v54 = v26;
  if (v12[2] < 3uLL) {
    goto LABEL_24;
  }
  uint64_t v52 = LODWORD(v58[0]);
  uint64_t v35 = v12[8];
  uint64_t v36 = v12[9];
  __n128 v37 = swift_bridgeObjectRetain(v36);
  static String.Encoding.ascii.getter(v37);
  uint64_t v26 = String.data(using:allowLossyConversion:)(v10, 0LL, v35, v36);
  unint64_t v39 = v38;
  swift_bridgeObjectRelease();
  v19(v10, v7);
  if (v39 >> 60 == 15)
  {
    sub_1000182F0(v16, v18);
    unint64_t v30 = v53;
    uint64_t v29 = v54;
    goto LABEL_7;
  }

  uint64_t v40 = sub_10001736C(v26, v39);
  static Endianness.current.getter(v40);
  unint64_t v32 = v39;
  uint64_t result = FixedWidthInteger.init(data:ofEndianness:)(v58, v26, v39, v6);
  uint64_t v41 = v54;
  if (BYTE4(v58[0]) == 1)
  {
    sub_1000182F0(v16, v18);
    uint64_t v33 = v41;
    unint64_t v34 = v53;
    goto LABEL_12;
  }

  uint64_t v50 = v26;
  unint64_t v51 = v32;
  if (v12[2] < 4uLL) {
    goto LABEL_25;
  }
  uint64_t v42 = v12[10];
  uint64_t v43 = v12[11];
  swift_bridgeObjectRetain(v43);
  swift_bridgeObjectRelease();
  static String.Encoding.ascii.getter(v44);
  uint64_t v45 = String.data(using:allowLossyConversion:)(v10, 0LL, v42, v43);
  unint64_t v47 = v46;
  swift_bridgeObjectRelease();
  uint64_t v48 = ((uint64_t (*)(char *, uint64_t))v19)(v10, v7);
  if (v47 >> 60 == 15)
  {
    sub_1000182F0(v16, v18);
    sub_1000182F0(v54, v53);
    sub_1000182F0(v50, v51);
    return 0LL;
  }

  static Endianness.current.getter(v48);
  FixedWidthInteger.init(data:ofEndianness:)(v58, v45, v47, v6);
  sub_1000182F0(v16, v18);
  sub_1000182F0(v54, v53);
  sub_1000182F0(v50, v51);
  if (BYTE4(v58[0]) == 1) {
    return 0LL;
  }
  return (void *)(v55 | (v52 << 32));
}

ValueMetadata *type metadata accessor for LocalFindableAccessoryFirmwareVersionNumber()
{
  return &type metadata for LocalFindableAccessoryFirmwareVersionNumber;
}

unint64_t sub_10059846C()
{
  unint64_t result = qword_1009B3828;
  if (!qword_1009B3828)
  {
    unint64_t result = swift_getWitnessTable(&unk_100807B5C, &type metadata for LocalFindableAccessoryFirmwareVersionNumber);
    atomic_store(result, (unint64_t *)&qword_1009B3828);
  }

  return result;
}

uint64_t sub_1005984B0(uint64_t a1, unint64_t a2)
{
  if (a1 == 13388 && a2 == 0xE200000000000000LL)
  {
    unint64_t v5 = 0xE200000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(13388LL, 0xE200000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 21570 && a2 == 0xE200000000000000LL)
  {
    unint64_t v7 = 0xE200000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(21570LL, 0xE200000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 21581 && a2 == 0xE200000000000000LL)
  {
    unint64_t v8 = 0xE200000000000000LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(21581LL, 0xE200000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 12364 && a2 == 0xE200000000000000LL)
  {
    swift_bridgeObjectRelease(0xE200000000000000LL);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(12364LL, 0xE200000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_100598608(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009B3830);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100012ED8(a1, v7);
  unint64_t v9 = sub_1005987B0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for LocalFindableAccessoryFirmwareVersionNumber.CodingKeys,  &type metadata for LocalFindableAccessoryFirmwareVersionNumber.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  char v17 = 0;
  unsigned int v10 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v3);
  char v16 = 1;
  uint64_t v11 = KeyedDecodingContainer.decode(_:forKey:)(&v16, v3);
  char v15 = 2;
  KeyedDecodingContainer.decode(_:forKey:)(&v15, v3);
  char v14 = 3;
  KeyedDecodingContainer.decode(_:forKey:)(&v14, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v10 | (unint64_t)(v11 << 32);
}

unint64_t sub_1005987B0()
{
  unint64_t result = qword_1009B3838;
  if (!qword_1009B3838)
  {
    unint64_t result = swift_getWitnessTable( &unk_100807D00,  &type metadata for LocalFindableAccessoryFirmwareVersionNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3838);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for LocalFindableAccessoryFirmwareVersionNumber.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_100598840 + 4 * byte_100807B25[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_100598874 + 4 * byte_100807B20[v4]))();
}

uint64_t sub_100598874(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10059887C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100598884LL);
  }
  return result;
}

uint64_t sub_100598890(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100598898LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10059889C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005988A4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for LocalFindableAccessoryFirmwareVersionNumber.CodingKeys()
{
  return &type metadata for LocalFindableAccessoryFirmwareVersionNumber.CodingKeys;
}

unint64_t sub_1005988C4()
{
  unint64_t result = qword_1009B3848;
  if (!qword_1009B3848)
  {
    unint64_t result = swift_getWitnessTable( &unk_100807CD8,  &type metadata for LocalFindableAccessoryFirmwareVersionNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3848);
  }

  return result;
}

unint64_t sub_10059890C()
{
  unint64_t result = qword_1009B3850;
  if (!qword_1009B3850)
  {
    unint64_t result = swift_getWitnessTable( &unk_100807C48,  &type metadata for LocalFindableAccessoryFirmwareVersionNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3850);
  }

  return result;
}

unint64_t sub_100598954()
{
  unint64_t result = qword_1009B3858;
  if (!qword_1009B3858)
  {
    unint64_t result = swift_getWitnessTable( &unk_100807C70,  &type metadata for LocalFindableAccessoryFirmwareVersionNumber.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3858);
  }

  return result;
}

void sub_100598998()
{
  uint64_t v1 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v2 = __chkstk_darwin(v1);
  uint64_t v3 = __chkstk_darwin(v2);
  v12[2] = (char *)v12 - v4;
  uint64_t v5 = __chkstk_darwin(v3);
  __chkstk_darwin(v5);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = __chkstk_darwin(v6);
  __chkstk_darwin(v7);
  v12[3] = (char *)v12 - v8;
  uint64_t v13 = v0;
  id v9 = [v0 data];
  static Data._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v11 = v10;

  __asm { BR              X10 }

void sub_100598B00()
{
  if (BYTE6(v7) == 16LL)
  {
    id v14 = [*(id *)(v8 - 128) data];
    static Data._unconditionallyBridgeFromObjectiveC(_:)(v14);
    uint64_t v16 = v15;

    __asm { BR              X10 }
  }

  if (BYTE6(v7) == 4LL)
  {
    *(void *)(v8 - 152) = v4;
    *(void *)(v8 - 136) = v3;
    uint64_t v9 = *(void *)(v8 - 144);
    UUID.init(uuidString:)(0xD000000000000024LL, 0x80000001008690E0LL);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v9, 1LL, v2) != 1)
    {
      uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v1 + 32))(v5, v9, v2);
      *(void *)(v8 - 120) = ((uint64_t (*)(uint64_t))UUID.bytes.getter)(v10);
      id v11 = [*(id *)(v8 - 128) data];
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
      uint64_t v13 = v12;

      __asm { BR              X10 }
    }

    __break(1u);
  }

  else
  {
    if (BYTE6(v7) != 2LL)
    {
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD00000000000002DLL,  0x80000001008690B0LL,  "searchpartyd/CBUUIDExtensions.swift",  35LL,  2LL,  51LL,  0);
      __break(1u);
      JUMPOUT(0x100599344LL);
    }

    UUID.init(uuidString:)(0xD000000000000024LL, 0x80000001008690E0LL);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v6, 1LL, v2) != 1)
    {
      *(void *)(v8 - 144) = v1;
      uint64_t v17 = (*(uint64_t (**)(void, uint64_t, uint64_t))(v1 + 32))(*(void *)(v8 - 136), v6, v2);
      *(void *)(v8 - 112) = ((uint64_t (*)(uint64_t))UUID.bytes.getter)(v17);
      id v18 = [*(id *)(v8 - 128) data];
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
      uint64_t v20 = v19;

      __asm { BR              X10 }
    }
  }

  __break(1u);
  JUMPOUT(0x1005992D4LL);
}

uint64_t sub_100599384(_BYTE *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a1;
  char v5 = *a1;
  uint64_t v6 = (void *)*a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a3);
  *a3 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v6 = sub_100599728(v6);
  }
  if (v6[2] < 3uLL)
  {
    __break(1u);
  }

  else
  {
    *((_BYTE *)v6 + 34) = v5;
    *a3 = v6;
    LOBYTE(v4) = v4[1];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v6);
    *a3 = v6;
    if ((result & 1) != 0) {
      goto LABEL_5;
    }
  }

  uint64_t result = (uint64_t)sub_100599728(v6);
  uint64_t v6 = (void *)result;
LABEL_5:
  if (v6[2] < 4uLL)
  {
    __break(1u);
  }

  else
  {
    *((_BYTE *)v6 + 35) = (_BYTE)v4;
    *a3 = v6;
  }

  return result;
}

uint64_t sub_100599438(_BYTE *a1, uint64_t a2, void *a3)
{
  uint64_t v4 = a1;
  char v5 = *a1;
  uint64_t v6 = (void *)*a3;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a3);
  *a3 = v6;
  if ((isUniquelyReferenced_nonNull_native & 1) != 0)
  {
    if (v6[2]) {
      goto LABEL_3;
    }
  }

  else
  {
    uint64_t v6 = sub_100599728(v6);
    if (v6[2])
    {
LABEL_3:
      *((_BYTE *)v6 + 32) = v5;
      *a3 = v6;
      char v5 = v4[1];
      char v8 = swift_isUniquelyReferenced_nonNull_native(v6);
      *a3 = v6;
      if ((v8 & 1) != 0) {
        goto LABEL_4;
      }
      goto LABEL_12;
    }
  }

  __break(1u);
LABEL_12:
  uint64_t v6 = sub_100599728(v6);
LABEL_4:
  if (v6[2] < 2uLL)
  {
    __break(1u);
  }

  else
  {
    *((_BYTE *)v6 + 33) = v5;
    *a3 = v6;
    char v5 = v4[2];
    char v9 = swift_isUniquelyReferenced_nonNull_native(v6);
    *a3 = v6;
    if ((v9 & 1) != 0) {
      goto LABEL_6;
    }
  }

  uint64_t v6 = sub_100599728(v6);
LABEL_6:
  if (v6[2] < 3uLL)
  {
    __break(1u);
  }

  else
  {
    *((_BYTE *)v6 + 34) = v5;
    *a3 = v6;
    LOBYTE(v4) = v4[3];
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v6);
    *a3 = v6;
    if ((result & 1) != 0) {
      goto LABEL_8;
    }
  }

  uint64_t result = (uint64_t)sub_100599728(v6);
  uint64_t v6 = (void *)result;
LABEL_8:
  if (v6[2] < 4uLL)
  {
    __break(1u);
  }

  else
  {
    *((_BYTE *)v6 + 35) = (_BYTE)v4;
    *a3 = v6;
  }

  return result;
}

uint64_t sub_100599564(unsigned __int8 *a1)
{
  return UUID.init(uuid:)(*a1, a1[1], a1[2], a1[3], a1[4], a1[5], a1[6], a1[7], *((void *)a1 + 1));
}

uint64_t sub_1005995B8( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t (*a5)(uint64_t, uint64_t, uint64_t))
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v10 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v10 += a1 - result;
  }

  BOOL v11 = __OFSUB__(a2, a1);
  uint64_t v12 = a2 - a1;
  if (v11)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v13 = __DataStorage._length.getter();
  if (v13 >= v12) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v13;
  }
  uint64_t v15 = v10 + v14;
  if (v10) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0LL;
  }
  return a5(v10, v16, a4);
}

uint64_t sub_10059965C(uint64_t a1)
{
  if ((unint64_t)a1 >> 62)
  {
    if (a1 < 0) {
      uint64_t v4 = a1;
    }
    else {
      uint64_t v4 = a1 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a1);
    uint64_t v2 = _CocoaArrayWrapper.endIndex.getter(v4);
    swift_bridgeObjectRelease(a1);
  }

  else
  {
    uint64_t v2 = *(void *)((a1 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  return specialized _ArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)(0LL, v2, 0LL, a1);
}

void *sub_1005996C4(void *a1)
{
  return sub_1004C5C98(0LL, a1[2], 0, a1);
}

void *sub_1005996D8(void *a1)
{
  return sub_1004C61B8(0LL, a1[2], 0, a1);
}

void *sub_1005996EC(void *a1)
{
  return sub_1004C65EC(0LL, a1[2], 0, a1);
}

uint64_t sub_100599700(unint64_t a1)
{
  return sub_1004C6628(0, *(void *)(a1 + 16), 0, a1);
}

uint64_t sub_100599714(unint64_t a1)
{
  return sub_1004C44BC(0, *(void *)(a1 + 16), 0, a1);
}

void *sub_100599728(void *a1)
{
  return sub_1004C5B44(0LL, a1[2], 0, a1);
}

uint64_t sub_10059973C(unint64_t a1)
{
  return sub_1004C6D6C(0, *(void *)(a1 + 16), 0, a1);
}

void *sub_100599750(void *a1)
{
  return sub_1004C6DA8(0LL, a1[2], 0, a1);
}

uint64_t sub_100599764()
{
  uint64_t v0 = sub_100004AEC(&qword_1009BB4F0);
  uint64_t result = swift_allocObject(v0, 20LL, 7LL);
  *(_DWORD *)(result + swift_weakDestroy(v0 + 16) = 0;
  qword_1009B3860 = result;
  return result;
}

void sub_100599798()
{
  off_1009B3868 = &_swiftEmptyDictionarySingleton;
}

void sub_1005997AC()
{
  off_1009B3870 = &_swiftEmptyDictionarySingleton;
}

uint64_t sub_1005997C0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (qword_10099B590 != -1) {
    swift_once(&qword_10099B590, sub_100599798);
  }
  swift_beginAccess(&off_1009B3868, v13, 32LL, 0LL);
  uint64_t v6 = off_1009B3868;
  if (*((void *)off_1009B3868 + 2))
  {
    swift_bridgeObjectRetain(a2);
    uint64_t v7 = sub_10030CF14(a1, a2);
    if ((v8 & 1) != 0)
    {
      char v9 = (uint64_t *)(v6[7] + 16 * v7);
      uint64_t v11 = *v9;
      uint64_t v10 = v9[1];
      swift_bridgeObjectRetain(v10);
    }

    else
    {
      uint64_t v11 = 0LL;
      uint64_t v10 = 0LL;
    }

    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v11 = 0LL;
    uint64_t v10 = 0LL;
  }

  *a3 = v11;
  a3[1] = v10;
  return swift_endAccess(v13);
}

uint64_t sub_1005998AC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, void *a3@<X8>)
{
  if (qword_10099B598 != -1) {
    swift_once(&qword_10099B598, sub_1005997AC);
  }
  swift_beginAccess(&off_1009B3870, v11, 32LL, 0LL);
  uint64_t v6 = off_1009B3870;
  if (!*((void *)off_1009B3870 + 2)) {
    goto LABEL_7;
  }
  swift_bridgeObjectRetain(a2);
  uint64_t v7 = sub_10030CF14(a1, a2);
  if ((v8 & 1) == 0)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    uint64_t result = swift_endAccess(v11);
    char v9 = _swiftEmptyArrayStorage;
    goto LABEL_8;
  }

  char v9 = *(void **)(v6[7] + 8 * v7);
  swift_endAccess(v11);
  swift_bridgeObjectRetain(v9);
  uint64_t result = swift_bridgeObjectRelease();
LABEL_8:
  *a3 = v9;
  return result;
}

Swift::Int sub_100599998()
{
  uint64_t v1 = v0;
  uint64_t v2 = *v0;
  uint64_t v3 = v1[1];
  uint64_t v4 = v1[2];
  Hasher.init(_seed:)(v10, 0LL);
  String.hash(into:)(v10, v2, v3);
  Swift::UInt v5 = *(void *)(v4 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    uint64_t v6 = (void *)(v4 + 40);
    do
    {
      uint64_t v7 = *(v6 - 1);
      uint64_t v8 = *v6;
      swift_bridgeObjectRetain(*v6);
      String.hash(into:)(v10, v7, v8);
      swift_bridgeObjectRelease(v8);
      v6 += 2;
      --v5;
    }

    while (v5);
  }

  String.hash(into:)(v10, v1[3], v1[4]);
  return Hasher._finalize()();
}

uint64_t sub_100599A50(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v3 = v1[3];
  uint64_t v5 = v1[4];
  String.hash(into:)(a1, *v1, v1[1]);
  Swift::UInt v6 = *(void *)(v4 + 16);
  Hasher._combine(_:)(v6);
  if (v6)
  {
    uint64_t v7 = (void *)(v4 + 40);
    do
    {
      uint64_t v8 = *(v7 - 1);
      uint64_t v9 = *v7;
      swift_bridgeObjectRetain(*v7);
      String.hash(into:)(a1, v8, v9);
      swift_bridgeObjectRelease(v9);
      v7 += 2;
      --v6;
    }

    while (v6);
  }

  return String.hash(into:)(a1, v3, v5);
}

Swift::Int sub_100599AE8(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v5 = v1[2];
  uint64_t v4 = v1[3];
  uint64_t v6 = v1[4];
  Hasher.init(_seed:)(v12, a1);
  String.hash(into:)(v12, v2, v3);
  Swift::UInt v7 = *(void *)(v5 + 16);
  Hasher._combine(_:)(v7);
  if (v7)
  {
    uint64_t v8 = (void *)(v5 + 40);
    do
    {
      uint64_t v9 = *(v8 - 1);
      uint64_t v10 = *v8;
      swift_bridgeObjectRetain(*v8);
      String.hash(into:)(v12, v9, v10);
      swift_bridgeObjectRelease(v10);
      v8 += 2;
      --v7;
    }

    while (v7);
  }

  String.hash(into:)(v12, v4, v6);
  return Hasher._finalize()();
}

uint64_t sub_100599B9C(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  v5[0] = *(_OWORD *)a1;
  v5[1] = v2;
  uint64_t v6 = *(void *)(a1 + 32);
  __int128 v3 = *(_OWORD *)(a2 + 16);
  v7[0] = *(_OWORD *)a2;
  v7[1] = v3;
  uint64_t v8 = *(void *)(a2 + 32);
  return sub_100599E28((uint64_t *)v5, (uint64_t)v7) & 1;
}

uint64_t destroy for FMFHandle(void *a1)
{
  return swift_bridgeObjectRelease(a1[4]);
}

void *initializeWithCopy for FMFHandle(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v5 = a2[2];
  uint64_t v4 = a2[3];
  a1[2] = v5;
  a1[3] = v4;
  uint64_t v6 = a2[4];
  a1[4] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

void *assignWithCopy for FMFHandle(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[2];
  uint64_t v7 = a1[2];
  a1[2] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[3] = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a1[4];
  a1[4] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  return a1;
}

void *assignWithTake for FMFHandle(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease(a1[1]);
  uint64_t v4 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v6 = a1[4];
  a1[3] = *(void *)(a2 + 24);
  a1[4] = v5;
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for FMFHandle(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 40)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FMFHandle(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 40) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 40) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for FMFHandle()
{
  return &type metadata for FMFHandle;
}

unint64_t sub_100599DE4()
{
  unint64_t result = qword_1009B3878;
  if (!qword_1009B3878)
  {
    unint64_t result = swift_getWitnessTable(&unk_100807D84, &type metadata for FMFHandle);
    atomic_store(result, (unint64_t *)&qword_1009B3878);
  }

  return result;
}

uint64_t sub_100599E28(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *(void *)(a2 + 8);
  BOOL v7 = v4 == *(void *)a2 && v5 == v6;
  if (v7
    || (v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(void *)a2, v6, 0LL), uint64_t result = 0LL, (v8 & 1) != 0))
  {
    if ((sub_100125B04((void *)a1[2], *(void **)(a2 + 16)) & 1) != 0)
    {
      uint64_t v10 = a1[3];
      uint64_t v11 = a1[4];
      uint64_t v12 = *(void *)(a2 + 24);
      uint64_t v13 = *(void *)(a2 + 32);
      if (v10 == v12 && v11 == v13) {
        return 1LL;
      }
      else {
        return _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0LL);
      }
    }

    else
    {
      return 0LL;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for OwnedDeviceFetchResponse()
{
  return &type metadata for OwnedDeviceFetchResponse;
}

uint64_t initializeBufferWithCopyOfBuffer for FetchResponse(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  *(void *)a1 = *a2;
  *(_BYTE *)(a1 + 8) = *((_BYTE *)a2 + 8);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *assignWithCopy for FetchResponse(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t *assignWithTake for FetchResponse(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  *((_BYTE *)a1 + 8) = *((_BYTE *)a2 + 8);
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchResponse(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 9)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FetchResponse(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 9) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)uint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 9) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for FetchResponse()
{
  return &type metadata for FetchResponse;
}

uint64_t *sub_10059A018(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_10001736C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a2[2];
    a1[2] = v9;
    uint64_t v10 = *(int *)(a3 + 24);
    uint64_t v11 = (char *)a1 + v10;
    uint64_t v12 = (char *)a2 + v10;
    uint64_t v13 = type metadata accessor for Date(0LL);
    uint64_t v14 = *(void *)(v13 - 8);
    uint64_t v15 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v14 + 48);
    __n128 v16 = swift_bridgeObjectRetain(v9);
    if (v15(v12, 1LL, v13, v16))
    {
      uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D720);
      memcpy(v11, v12, *(void *)(*(void *)(v17 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v11, v12, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v11, 0LL, 1LL, v13);
    }

    *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  }

  return a1;
}

uint64_t sub_10059A140(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  return result;
}

uint64_t *sub_10059A1C8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a2[2];
  a1[2] = v8;
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = (char *)a1 + v9;
  uint64_t v11 = (char *)a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned int (**)(char *, uint64_t, uint64_t, __n128))(v13 + 48);
  __n128 v15 = swift_bridgeObjectRetain(v8);
  if (v14(v11, 1LL, v12, v15))
  {
    uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v10, v11, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v10, v11, v12);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v10, 0LL, 1LL, v12);
  }

  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t *sub_10059A2C4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100016F9C(v8, v9);
  uint64_t v10 = a2[2];
  a1[2] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = *(int *)(a3 + 24);
  uint64_t v12 = (char *)a1 + v11;
  uint64_t v13 = (char *)a2 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v15 + 48);
  int v17 = v16(v12, 1LL, v14);
  int v18 = v16(v13, 1LL, v14);
  if (!v17)
  {
    if (!v18)
    {
      (*(void (**)(char *, char *, uint64_t))(v15 + 24))(v12, v13, v14);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v15 + 8))(v12, v14);
    goto LABEL_6;
  }

  if (v18)
  {
LABEL_6:
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v12, v13, *(void *)(*(void *)(v19 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v15 + 16))(v12, v13, v14);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v15 + 56))(v12, 0LL, 1LL, v14);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *((_BYTE *)a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_10059A414(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(int *)(a3 + 24);
  unint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9))
  {
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v7, v8, *(void *)(*(void *)(v11 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  *(_BYTE *)(a1 + *(int *)(a3 + 28)) = *(_BYTE *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t *sub_10059A4F4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016F9C(v6, v7);
  a1[2] = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)(a2 + v8);
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v14 = v13(v9, 1LL, v11);
  int v15 = v13(v10, 1LL, v11);
  if (!v14)
  {
    if (!v15)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 40))(v9, v10, v11);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v12 + 8))(v9, v11);
    goto LABEL_6;
  }

  if (v15)
  {
LABEL_6:
    uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v9, v10, *(void *)(*(void *)(v16 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v9, v10, v11);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
LABEL_7:
  *((_BYTE *)a1 + *(int *)(a3 + 28)) = *(_BYTE *)(a2 + *(int *)(a3 + 28));
  return a1;
}

uint64_t sub_10059A634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10059A640);
}

uint64_t sub_10059A640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D720);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 24),  a2,  v8);
  }

uint64_t sub_10059A6C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10059A6CC);
}

uint64_t sub_10059A6CC(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = sub_100004AEC((uint64_t *)&unk_10099D720);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 24),  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for FetchResponse.SearchResult(uint64_t a1)
{
  uint64_t result = qword_1009B38D8;
  if (!qword_1009B38D8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FetchResponse.SearchResult);
  }
  return result;
}

void sub_10059A780(uint64_t a1)
{
  v4[0] = &unk_100807E58;
  v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
  sub_10003FEF4(319LL);
  if (v3 <= 0x3F)
  {
    v4[2] = *(void *)(v2 - 8) + 64LL;
    _OWORD v4[3] = &unk_100807E70;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
  }

uint64_t sub_10059A808@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_100934A38;
  return sub_1003545BC(v2, a1, a2);
}

uint64_t sub_10059A814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10059CC0C();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_10059A870(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_10059CC0C();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_10059A8BC()
{
  if (*v0) {
    return 0x6F43737574617473LL;
  }
  else {
    return 0x73746C75736572LL;
  }
}

uint64_t sub_10059A8FC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10059B1C0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10059A920(uint64_t a1)
{
  unint64_t v2 = sub_10059B48C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10059A948(uint64_t a1)
{
  unint64_t v2 = sub_10059B48C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10059A970@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_10059B2BC(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(_BYTE *)(a2 + 8) = v5 & 1;
  }

  return result;
}

uint64_t sub_10059A9A0()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10059A9C4 + 4 * byte_100807DF0[*v0]))( 25705LL,  0xE200000000000000LL);
}

uint64_t sub_10059A9C4()
{
  return 0x7364616F6C796170LL;
}

uint64_t sub_10059A9DC()
{
  return 0x656372756F73LL;
}

uint64_t sub_10059A9F0()
{
  return 0x656B636150766C74LL;
}

uint64_t sub_10059AA0C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10059B55C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10059AA30(uint64_t a1)
{
  unint64_t v2 = sub_10059C380();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10059AA58(uint64_t a1)
{
  unint64_t v2 = sub_10059C380();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_10059AA80@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    double result = *(double *)v6;
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v5;
    *(void *)(a2 + 32) = v7;
  }

  return result;
}

uint64_t sub_10059AAC4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for FetchResponse.SearchResult(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)v15 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100013044((uint64_t)a1, (uint64_t)v15);
  sub_10059B700(v15, (uint64_t)&v16);
  if (!v2)
  {
    __int128 v20 = v16;
    *(_OWORD *)uint64_t v7 = v16;
    uint64_t v8 = &v7[*(int *)(v5 + 24)];
    uint64_t v9 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 56LL))(v8, 1LL, 1LL, v9);
    char v10 = v18;
    if (v18 == 19) {
      char v10 = 7;
    }
    v7[*(int *)(v5 + 28)] = v10;
    uint64_t v11 = v17;
    uint64_t v12 = v19;
    sub_100018BF8((uint64_t)&v20);
    uint64_t v13 = sub_1005ACC38(v11, v12);
    sub_10059C338((uint64_t)&v16);
    *((void *)v7 + 2) = v13;
    sub_10059C2B8((uint64_t)v7, a2);
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_10059ABF0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10059AAC4(a1, a2);
}

uint64_t sub_10059AC04(char *a1, char *a2)
{
  return sub_1003074C4(*a1, *a2);
}

Swift::Int sub_10059AC10()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  if (v1) {
    unint64_t v2 = 0x61636F4C6E736361LL;
  }
  else {
    unint64_t v2 = 0xD000000000000014LL;
  }
  if (v1) {
    unint64_t v3 = 0xED0000736E6F6974LL;
  }
  else {
    unint64_t v3 = 0x800000010084FFC0LL;
  }
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease(v3);
  return Hasher._finalize()();
}

uint64_t sub_10059ACA0(uint64_t a1)
{
  if (*v1) {
    unint64_t v2 = 0x61636F4C6E736361LL;
  }
  else {
    unint64_t v2 = 0xD000000000000014LL;
  }
  if (*v1) {
    unint64_t v3 = 0xED0000736E6F6974LL;
  }
  else {
    unint64_t v3 = 0x800000010084FFC0LL;
  }
  String.hash(into:)(a1, v2, v3);
  return swift_bridgeObjectRelease(v3);
}

Swift::Int sub_10059AD0C(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  if (v2) {
    unint64_t v3 = 0x61636F4C6E736361LL;
  }
  else {
    unint64_t v3 = 0xD000000000000014LL;
  }
  if (v2) {
    unint64_t v4 = 0xED0000736E6F6974LL;
  }
  else {
    unint64_t v4 = 0x800000010084FFC0LL;
  }
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease(v4);
  return Hasher._finalize()();
}

uint64_t sub_10059AD98@<X0>(uint64_t *a1@<X0>, char *a2@<X8>)
{
  v2._rawValue = &off_100936820;
  return sub_1003545BC(v2, a1, a2);
}

void sub_10059ADA4(unint64_t *a1@<X8>)
{
  unint64_t v2 = 0xD000000000000014LL;
  if (*v1) {
    unint64_t v2 = 0x61636F4C6E736361LL;
  }
  unint64_t v3 = 0x800000010084FFC0LL;
  if (*v1) {
    unint64_t v3 = 0xED0000736E6F6974LL;
  }
  *a1 = v2;
  a1[1] = v3;
}

uint64_t sub_10059ADF4()
{
  if (*v0) {
    return 0x61636F4C6E736361LL;
  }
  else {
    return 0xD000000000000014LL;
  }
}

uint64_t sub_10059AE40@<X0>(Swift::String string@<0:X0, 8:X1>, char *a2@<X8>)
{
  object = string._object;
  v3._countAndFlagsBits = string._countAndFlagsBits;
  v3._object = object;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100936820, v3);
  uint64_t result = swift_bridgeObjectRelease(object);
  if (v5 == 1) {
    char v7 = 1;
  }
  else {
    char v7 = 2;
  }
  if (!v5) {
    char v7 = 0;
  }
  *a2 = v7;
  return result;
}

uint64_t sub_10059AEA0(uint64_t a1)
{
  unint64_t v2 = sub_10059C1A8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10059AEC8(uint64_t a1)
{
  unint64_t v2 = sub_10059C1A8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10059AEF0()
{
  uint64_t v1 = 0x65566769666E6F63LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6F43737574617473LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6E6F697461636F6CLL;
  }
}

uint64_t sub_10059AF68@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10059D2D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10059AF8C(uint64_t a1)
{
  unint64_t v2 = sub_10059CE74();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10059AFB4(uint64_t a1)
{
  unint64_t v2 = sub_10059CE74();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10059AFDC@<X0>(uint64_t a1@<X8>)
{
  return sub_10059B160((uint64_t (*)(void))sub_10059CC50, a1);
}

uint64_t sub_10059AFF8()
{
  uint64_t v1 = 25705LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x656B636150766C74LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6E6F697461636F6CLL;
  }
}

uint64_t sub_10059B054@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10059CEB8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_10059B078(uint64_t a1)
{
  unint64_t v2 = sub_10059DAEC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10059B0A0(uint64_t a1)
{
  unint64_t v2 = sub_10059DAEC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10059B0C8@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10059D018(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }

  return result;
}

uint64_t sub_10059B0F4(uint64_t a1)
{
  unint64_t v2 = sub_10059D6A4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10059B11C(uint64_t a1)
{
  unint64_t v2 = sub_10059D6A4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10059B144@<X0>(uint64_t a1@<X8>)
{
  return sub_10059B160((uint64_t (*)(void))sub_10059D480, a1);
}

uint64_t sub_10059B160@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + swift_weakDestroy(v0 + 16) = v6 & 1;
    *(_BYTE *)(a2 + 17) = HIBYTE(v6) & 1;
  }

  return result;
}

uint64_t sub_10059B198@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10059BA38(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_10059B1C0(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x73746C75736572LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v5 = 0xE700000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x73746C75736572LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6F43737574617473LL && a2 == 0xEA00000000006564LL)
  {
    swift_bridgeObjectRelease(0xEA00000000006564LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F43737574617473LL, 0xEA00000000006564LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_10059B2BC(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009B3918);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  __int16 v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100012ED8(a1, v7);
  unint64_t v9 = sub_10059B48C();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for FetchResponse.CodingKeys,  &type metadata for FetchResponse.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    uint64_t v10 = sub_100004AEC(&qword_1009B3928);
    HIBYTE(v14) = 0;
    uint64_t v11 = sub_10059C3E0(&qword_1009B3930, &qword_1009B3928, (void (*)(void))sub_10059B4D0);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v15, v10, (char *)&v14 + 7, v3, v10, v11);
    uint64_t v7 = v15;
    BYTE5(v14) = 1;
    unint64_t v13 = sub_10059B518();
    swift_bridgeObjectRetain(v7);
    KeyedDecodingContainer.decode<A>(_:forKey:)( (uint64_t *)((char *)&v14 + 6),  &type metadata for FetchResponse.Status,  (char *)&v14 + 5,  v3,  &type metadata for FetchResponse.Status,  v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
  }

  return v7;
}

unint64_t sub_10059B48C()
{
  unint64_t result = qword_1009B3920;
  if (!qword_1009B3920)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008083C8, &type metadata for FetchResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3920);
  }

  return result;
}

unint64_t sub_10059B4D0()
{
  unint64_t result = qword_1009B3938;
  if (!qword_1009B3938)
  {
    uint64_t v1 = type metadata accessor for FetchResponse.SearchResult(255LL);
    unint64_t result = swift_getWitnessTable(&unk_100807E88, v1);
    atomic_store(result, (unint64_t *)&qword_1009B3938);
  }

  return result;
}

unint64_t sub_10059B518()
{
  unint64_t result = qword_1009B3940;
  if (!qword_1009B3940)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008083A0, &type metadata for FetchResponse.Status);
    atomic_store(result, (unint64_t *)&qword_1009B3940);
  }

  return result;
}

uint64_t sub_10059B55C(uint64_t a1, unint64_t a2)
{
  if (a1 == 25705 && a2 == 0xE200000000000000LL)
  {
    unint64_t v5 = 0xE200000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705LL, 0xE200000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x7364616F6C796170LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v7 = 0xE800000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7364616F6C796170LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x656372756F73LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v8 = 0xE600000000000000LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x656B636150766C74LL && a2 == 0xEA00000000007374LL)
  {
    swift_bridgeObjectRelease(0xEA00000000007374LL);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656B636150766C74LL, 0xEA00000000007374LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

uint64_t sub_10059B700@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009B3968);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_10059C380();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for FetchResponse.RawSearchResult.CodingKeys,  &type metadata for FetchResponse.RawSearchResult.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  char v33 = 0;
  unint64_t v12 = sub_100016FE0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v31, &type metadata for Data, &v33, v5, &type metadata for Data, v12);
  uint64_t v14 = v31[0];
  unint64_t v13 = v31[1];
  uint64_t v15 = sub_100004AEC(&qword_10099E868);
  char v33 = 1;
  sub_10001736C(v14, v13);
  uint64_t v16 = sub_10059C3C4();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v31, v15, &v33, v5, v15, v16);
  unint64_t v30 = v13;
  uint64_t v17 = v31[0];
  char v33 = 2;
  unint64_t v18 = sub_10016EE8C();
  swift_bridgeObjectRetain(v17);
  uint64_t v29 = 0LL;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for LocationSource,  &v33,  v5,  &type metadata for LocationSource,  v18);
  uint64_t v28 = v17;
  int v32 = LOBYTE(v31[0]);
  uint64_t v19 = sub_100004AEC(&qword_1009B3978);
  char v33 = 3;
  uint64_t v20 = sub_10059C3E0(&qword_1009B3980, &qword_1009B3978, (void (*)(void))sub_10059C3C4);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v19, &v33, v5, v19, v20);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v21 = v14;
  uint64_t v22 = v14;
  unint64_t v24 = v30;
  uint64_t v23 = v31[0];
  sub_10001736C(v22, v30);
  swift_bridgeObjectRetain(v23);
  sub_100016F9C(v21, v24);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  sub_100016F9C(v21, v24);
  swift_bridgeObjectRelease();
  uint64_t v25 = v28;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v21;
  *(void *)(a2 + 8) = v24;
  *(void *)(a2 + swift_weakDestroy(v0 + 16) = v25;
  *(_BYTE *)(a2 + 24) = v32;
  *(void *)(a2 + 32) = v23;
  return result;
}

uint64_t sub_10059BA38(void *a1)
{
  uint64_t v2 = type metadata accessor for FetchResponse.SearchResult(0LL);
  uint64_t v88 = *(void *)(v2 - 8);
  uint64_t v89 = v2;
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v90 = (uint64_t)&v70 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v87 = (uint64_t *)((char *)&v70 - v6);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v70 - v8;
  __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v70 - v10;
  uint64_t v12 = sub_100004AEC(&qword_1009B3948);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v70 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = a1[3];
  uint64_t v17 = a1[4];
  sub_100012ED8(a1, v16);
  unint64_t v18 = sub_10059C1A8();
  uint64_t v19 = v91;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for OwnedDeviceFetchResponse.CodingKeys,  &type metadata for OwnedDeviceFetchResponse.CodingKeys,  v18,  v16,  v17);
  if (v19) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v80 = (uint64_t *)v11;
  uint64_t v81 = v9;
  uint64_t v82 = v13;
  char v95 = 0;
  unint64_t v20 = sub_10059C1EC();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for OwnedDeviceFetchResponse.OwnDeviceLocationPayload,  &v95,  v12,  &type metadata for OwnedDeviceFetchResponse.OwnDeviceLocationPayload,  v20);
  uint64_t v21 = v12;
  uint64_t v22 = v92;
  unsigned __int16 v23 = v93;
  char v95 = 1;
  unint64_t v24 = sub_10059C230();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload,  &v95,  v21,  &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload,  v24);
  unint64_t v71 = v15;
  uint64_t v26 = v92;
  unsigned __int16 v27 = v93;
  uint64_t v74 = 0LL;
  int v75 = a1;
  uint64_t v73 = v21;
  uint64_t v72 = v92;
  if (!v22)
  {
    uint64_t v29 = _swiftEmptyArrayStorage;
    goto LABEL_30;
  }

  int v94 = v93;
  if ((v23 & 0x100) != 0)
  {
    uint64_t result = swift_bridgeObjectRelease();
  }

  else
  {
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x726F7272456F6ELL,  0xE700000000000000LL,  3158066LL,  0xE300000000000000LL,  0LL);
    uint64_t result = swift_bridgeObjectRelease();
    if ((v28 & 1) == 0)
    {
LABEL_28:
      uint64_t v31 = _swiftEmptyArrayStorage;
LABEL_29:
      uint64_t v29 = v31;
      swift_bridgeObjectRelease();
      a1 = v75;
      uint64_t v21 = v73;
      uint64_t v26 = v72;
      unsigned __int16 v27 = v94;
LABEL_30:
      uint64_t v53 = v82;
      if (v26)
      {
        if ((v27 & 0x100) != 0)
        {
          swift_bridgeObjectRelease();
        }

        else
        {
          char v54 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x726F7272456F6ELL,  0xE700000000000000LL,  3158066LL,  0xE300000000000000LL,  0LL);
          swift_bridgeObjectRelease();
          if ((v54 & 1) == 0) {
            goto LABEL_33;
          }
        }

        uint64_t v55 = *(void *)(v26 + 16);
        if (v55)
        {
          unint64_t v56 = (uint64_t *)(v26 + 56);
          uint64_t v57 = v87;
          do
          {
            uint64_t v59 = *(v56 - 3);
            uint64_t v58 = *(v56 - 2);
            unint64_t v61 = *(v56 - 1);
            uint64_t v60 = *v56;
            swift_bridgeObjectRetain(v59);
            sub_10001736C(v58, v61);
            swift_bridgeObjectRetain(v60);
            sub_10001736C(v58, v61);
            uint64_t v86 = v59;
            uint64_t v91 = v60;
            uint64_t v62 = sub_1005ACC38(v59, v60);
            uint64_t v63 = v89;
            unint64_t v64 = (char *)v57 + *(int *)(v89 + 24);
            uint64_t v65 = type metadata accessor for Date(0LL);
            (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v65 - 8) + 56LL))( v64,  1LL,  1LL,  v65);
            *uint64_t v57 = v58;
            v57[1] = v61;
            void v57[2] = (uint64_t)v62;
            *((_BYTE *)v57 + *(int *)(v63 + 28)) = 7;
            sub_10059C274((uint64_t)v57, v90);
            if ((swift_isUniquelyReferenced_nonNull_native(v29) & 1) == 0) {
              uint64_t v29 = (void *)sub_1004C6920(0, v29[2] + 1LL, 1, (unint64_t)v29);
            }
            unint64_t v67 = v29[2];
            unint64_t v66 = v29[3];
            uint64_t v68 = (uint64_t)v29;
            uint64_t v69 = v88;
            if (v67 >= v66 >> 1) {
              uint64_t v68 = sub_1004C6920(v66 > 1, v67 + 1, 1, (unint64_t)v29);
            }
            v56 += 4;
            uint64_t v29 = (void *)v68;
            *(void *)(v68 + swift_weakDestroy(v0 + 16) = v67 + 1;
            sub_10059C2B8( v90,  v68 + ((*(unsigned __int8 *)(v69 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v69 + 80))
            + *(void *)(v69 + 72) * v67);
            swift_bridgeObjectRelease();
            sub_100016F9C(v58, v61);
            swift_bridgeObjectRelease();
            uint64_t v57 = v87;
            sub_10059C2FC((uint64_t)v87);
            --v55;
          }

          while (v55);
        }

        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v82 + 8))(v71, v73);
        a1 = v75;
        goto LABEL_43;
      }

unint64_t sub_10059C1A8()
{
  unint64_t result = qword_1009B3950;
  if (!qword_1009B3950)
  {
    unint64_t result = swift_getWitnessTable(&unk_100808350, &type metadata for OwnedDeviceFetchResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3950);
  }

  return result;
}

unint64_t sub_10059C1EC()
{
  unint64_t result = qword_1009B3958;
  if (!qword_1009B3958)
  {
    unint64_t result = swift_getWitnessTable(&unk_100808328, &type metadata for OwnedDeviceFetchResponse.OwnDeviceLocationPayload);
    atomic_store(result, (unint64_t *)&qword_1009B3958);
  }

  return result;
}

unint64_t sub_10059C230()
{
  unint64_t result = qword_1009B3960;
  if (!qword_1009B3960)
  {
    unint64_t result = swift_getWitnessTable( &unk_100808300,  &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload);
    atomic_store(result, (unint64_t *)&qword_1009B3960);
  }

  return result;
}

uint64_t sub_10059C274(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FetchResponse.SearchResult(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10059C2B8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FetchResponse.SearchResult(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10059C2FC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FetchResponse.SearchResult(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_10059C338(uint64_t a1)
{
  return a1;
}

unint64_t sub_10059C380()
{
  unint64_t result = qword_1009B3970;
  if (!qword_1009B3970)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008082B0, &type metadata for FetchResponse.RawSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3970);
  }

  return result;
}

uint64_t sub_10059C3C4()
{
  return sub_10059C3E0(&qword_1009A2788, &qword_10099E868, (void (*)(void))sub_100016FE0);
}

uint64_t sub_10059C3E0(unint64_t *a1, uint64_t *a2, void (*a3)(void))
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_100004B78(a2);
    a3();
    uint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t destroy for FetchResponse.RawSearchResult(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for FetchResponse.RawSearchResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_10001736C(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v7 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v7;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for FetchResponse.RawSearchResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_10001736C(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_100016F9C(v6, v7);
  uint64_t v8 = *(void *)(a2 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v9 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for FetchResponse.RawSearchResult(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016F9C(v4, v5);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for FetchResponse.RawSearchResult()
{
  return &type metadata for FetchResponse.RawSearchResult;
}

uint64_t storeEnumTagSinglePayload for FetchResponse.RawSearchResult.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_10059C618 + 4 * byte_100807DF9[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_10059C64C + 4 * byte_100807DF4[v4]))();
}

uint64_t sub_10059C64C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10059C654(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10059C65CLL);
  }
  return result;
}

uint64_t sub_10059C668(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10059C670LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_10059C674(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10059C67C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FetchResponse.RawSearchResult.CodingKeys()
{
  return &type metadata for FetchResponse.RawSearchResult.CodingKeys;
}

__n128 initializeWithTake for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u16[0] = a2[1].n128_u16[0];
  *a1 = result;
  return result;
}

ValueMetadata *type metadata accessor for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload()
{
  return &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload;
}

uint64_t _s12searchpartyd24OwnedDeviceFetchResponseV25AcsnDeviceLocationPayloadVwCP_0( uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *(void *)a1 = *a2;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *((_BYTE *)a2 + 16);
  *(_BYTE *)(a1 + 17) = *((_BYTE *)a2 + 17);
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t *_s12searchpartyd24OwnedDeviceFetchResponseV25AcsnDeviceLocationPayloadVwca_0( uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = a2[1];
  *((_BYTE *)a1 + swift_weakDestroy(v0 + 16) = *((_BYTE *)a2 + 16);
  a1[1] = v6;
  *((_BYTE *)a1 + 17) = *((_BYTE *)a2 + 17);
  return a1;
}

uint64_t *_s12searchpartyd24OwnedDeviceFetchResponseV25AcsnDeviceLocationPayloadVwta_0( uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a1;
  *a1 = *a2;
  swift_bridgeObjectRelease(v4);
  a1[1] = a2[1];
  *((_BYTE *)a1 + swift_weakDestroy(v0 + 16) = *((_BYTE *)a2 + 16);
  *((_BYTE *)a1 + 17) = *((_BYTE *)a2 + 17);
  return a1;
}

uint64_t _s12searchpartyd24OwnedDeviceFetchResponseV25AcsnDeviceLocationPayloadVwet_0(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 18)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t sub_10059C7FC(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_WORD *)(result + swift_weakDestroy(v0 + 16) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 18) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 18) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for OwnedDeviceFetchResponse.OwnDeviceLocationPayload()
{
  return &type metadata for OwnedDeviceFetchResponse.OwnDeviceLocationPayload;
}

ValueMetadata *type metadata accessor for OwnedDeviceFetchResponse.CodingKeys()
{
  return &type metadata for OwnedDeviceFetchResponse.CodingKeys;
}

ValueMetadata *type metadata accessor for FetchResponse.CodingKeys()
{
  return &type metadata for FetchResponse.CodingKeys;
}

uint64_t _s12searchpartyd13FetchResponseV6StatusOwst_0(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10059C8BC + 4 * byte_100807E03[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10059C8F0 + 4 * byte_100807DFE[v4]))();
}

uint64_t sub_10059C8F0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10059C8F8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10059C900LL);
  }
  return result;
}

uint64_t sub_10059C90C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10059C914LL);
  }
  *(_BYTE *)__n128 result = a2 + 1;
  return result;
}

uint64_t sub_10059C918(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10059C920(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FetchResponse.Status()
{
  return &type metadata for FetchResponse.Status;
}

unint64_t sub_10059C940()
{
  unint64_t result = qword_1009B3988;
  if (!qword_1009B3988)
  {
    unint64_t result = swift_getWitnessTable(&unk_100808000, &type metadata for FetchResponse.Status);
    atomic_store(result, (unint64_t *)&qword_1009B3988);
  }

  return result;
}

unint64_t sub_10059C988()
{
  unint64_t result = qword_1009B3990;
  if (!qword_1009B3990)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008080B8, &type metadata for FetchResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3990);
  }

  return result;
}

unint64_t sub_10059C9D0()
{
  unint64_t result = qword_1009B3998;
  if (!qword_1009B3998)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008081A8, &type metadata for OwnedDeviceFetchResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3998);
  }

  return result;
}

unint64_t sub_10059CA18()
{
  unint64_t result = qword_1009B39A0;
  if (!qword_1009B39A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100808260, &type metadata for FetchResponse.RawSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B39A0);
  }

  return result;
}

unint64_t sub_10059CA60()
{
  unint64_t result = qword_1009B39A8;
  if (!qword_1009B39A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008081D0, &type metadata for FetchResponse.RawSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B39A8);
  }

  return result;
}

unint64_t sub_10059CAA8()
{
  unint64_t result = qword_1009B39B0;
  if (!qword_1009B39B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008081F8, &type metadata for FetchResponse.RawSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B39B0);
  }

  return result;
}

unint64_t sub_10059CAF0()
{
  unint64_t result = qword_1009B39B8;
  if (!qword_1009B39B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008080E0, &type metadata for OwnedDeviceFetchResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B39B8);
  }

  return result;
}

unint64_t sub_10059CB38()
{
  unint64_t result = qword_1009B39C0;
  if (!qword_1009B39C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100808108, &type metadata for OwnedDeviceFetchResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B39C0);
  }

  return result;
}

unint64_t sub_10059CB80()
{
  unint64_t result = qword_1009B39C8;
  if (!qword_1009B39C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100808028, &type metadata for FetchResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B39C8);
  }

  return result;
}

unint64_t sub_10059CBC8()
{
  unint64_t result = qword_1009B39D0;
  if (!qword_1009B39D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100808050, &type metadata for FetchResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B39D0);
  }

  return result;
}

unint64_t sub_10059CC0C()
{
  unint64_t result = qword_1009B39D8;
  if (!qword_1009B39D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100807F88, &type metadata for FetchResponse.Status);
    atomic_store(result, (unint64_t *)&qword_1009B39D8);
  }

  return result;
}

uint64_t sub_10059CC50(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009B39E0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100012ED8(a1, v7);
  unint64_t v9 = sub_10059CE74();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for OwnedDeviceFetchResponse.OwnDeviceLocationPayload.CodingKeys,  &type metadata for OwnedDeviceFetchResponse.OwnDeviceLocationPayload.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    uint64_t v10 = sub_100004AEC(&qword_1009A1EC8);
    BYTE2(vswift_weakDestroy(v0 + 16) = 0;
    uint64_t v11 = sub_10059C3E0((unint64_t *)&qword_1009A56B0, &qword_1009A1EC8, (void (*)(void))sub_1001C8994);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v10, (char *)&v16 + 2, v3, v10, v11);
    uint64_t v7 = v17;
    BYTE1(vswift_weakDestroy(v0 + 16) = 1;
    swift_bridgeObjectRetain(v17);
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)((char *)&v16 + 1, v3);
    char v15 = 2;
    unint64_t v13 = sub_10059B518();
    KeyedDecodingContainer.decode<A>(_:forKey:)( &v16,  &type metadata for FetchResponse.Status,  &v15,  v3,  &type metadata for FetchResponse.Status,  v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
  }

  return v7;
}

unint64_t sub_10059CE74()
{
  unint64_t result = qword_1009B39E8;
  if (!qword_1009B39E8)
  {
    unint64_t result = swift_getWitnessTable( &unk_100808624,  &type metadata for OwnedDeviceFetchResponse.OwnDeviceLocationPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B39E8);
  }

  return result;
}

uint64_t sub_10059CEB8(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEC0000006F666E49LL)
  {
    unint64_t v5 = 0xEC0000006F666E49LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEC0000006F666E49LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 25705 && a2 == 0xE200000000000000LL)
  {
    unint64_t v7 = 0xE200000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705LL, 0xE200000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x656B636150766C74LL && a2 == 0xEA00000000007374LL)
  {
    swift_bridgeObjectRelease(0xEA00000000007374LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656B636150766C74LL, 0xEA00000000007374LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_10059D018(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009B3A48);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v21 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100012ED8(a1, v7);
  unint64_t v9 = sub_10059DAEC();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload.CodingKeys,  &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    uint64_t v10 = sub_100004AEC(&qword_10099E868);
    char v24 = 0;
    uint64_t v11 = sub_10059C3C4();
    KeyedDecodingContainer.decode<A>(_:forKey:)(v23, v10, &v24, v3, v10, v11);
    uint64_t v7 = v23[0];
    char v24 = 1;
    unint64_t v13 = sub_100016FE0();
    swift_bridgeObjectRetain(v7);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v23, &type metadata for Data, &v24, v3, &type metadata for Data, v13);
    uint64_t v14 = v23[0];
    unint64_t v15 = v23[1];
    uint64_t v22 = 0LL;
    uint64_t v16 = sub_100004AEC(&qword_1009B3978);
    char v24 = 2;
    sub_10001736C(v14, v15);
    uint64_t v17 = sub_10059C3E0(&qword_1009B3980, &qword_1009B3978, (void (*)(void))sub_10059C3C4);
    uint64_t v18 = v22;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v16, &v24, v3, v16, v17);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (v18)
    {
      sub_100016F9C(v14, v15);
      swift_bridgeObjectRelease();
      uint64_t v19 = v22;
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
      swift_bridgeObjectRelease();
      if (!v19) {
        sub_100016F9C(v14, v15);
      }
    }

    else
    {
      uint64_t v20 = v23[0];
      swift_bridgeObjectRetain(v7);
      sub_10001736C(v14, v15);
      swift_bridgeObjectRetain(v20);
      sub_100016F9C(v14, v15);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
      swift_bridgeObjectRelease();
      sub_100016F9C(v14, v15);
      swift_bridgeObjectRelease();
    }
  }

  return v7;
}

uint64_t sub_10059D2D8(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEF64616F6C796150LL)
  {
    unint64_t v5 = 0xEF64616F6C796150LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEF64616F6C796150LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x65566769666E6F63LL && a2 == 0xED00006E6F697372LL)
  {
    unint64_t v7 = 0xED00006E6F697372LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65566769666E6F63LL, 0xED00006E6F697372LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x6F43737574617473LL && a2 == 0xEA00000000006564LL)
  {
    swift_bridgeObjectRelease(0xEA00000000006564LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F43737574617473LL, 0xEA00000000006564LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_10059D480(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009B39F0);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100012ED8(a1, v7);
  unint64_t v9 = sub_10059D6A4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.CodingKeys,  &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    uint64_t v10 = sub_100004AEC(&qword_1009B3A00);
    BYTE2(vswift_weakDestroy(v0 + 16) = 0;
    uint64_t v11 = sub_10059C3E0(&qword_1009B3A08, &qword_1009B3A00, (void (*)(void))sub_10059D6E8);
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v17, v10, (char *)&v16 + 2, v3, v10, v11);
    uint64_t v7 = v17;
    BYTE1(vswift_weakDestroy(v0 + 16) = 1;
    swift_bridgeObjectRetain(v17);
    KeyedDecodingContainer.decodeIfPresent(_:forKey:)((char *)&v16 + 1, v3);
    char v15 = 2;
    unint64_t v13 = sub_10059B518();
    KeyedDecodingContainer.decode<A>(_:forKey:)( &v16,  &type metadata for FetchResponse.Status,  &v15,  v3,  &type metadata for FetchResponse.Status,  v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
  }

  return v7;
}

unint64_t sub_10059D6A4()
{
  unint64_t result = qword_1009B39F8;
  if (!qword_1009B39F8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1008085D4,  &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B39F8);
  }

  return result;
}

unint64_t sub_10059D6E8()
{
  unint64_t result = qword_1009B3A10;
  if (!qword_1009B3A10)
  {
    unint64_t result = swift_getWitnessTable( &unk_1008085AC,  &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload);
    atomic_store(result, (unint64_t *)&qword_1009B3A10);
  }

  return result;
}

ValueMetadata *type metadata accessor for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.CodingKeys()
{
  return &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.CodingKeys;
}

ValueMetadata *type metadata accessor for OwnedDeviceFetchResponse.OwnDeviceLocationPayload.CodingKeys()
{
  return &type metadata for OwnedDeviceFetchResponse.OwnDeviceLocationPayload.CodingKeys;
}

uint64_t destroy for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload( uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t *initializeWithCopy for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload( uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  *a1 = *a2;
  unint64_t v6 = a2[2];
  swift_bridgeObjectRetain(v4);
  sub_10001736C(v5, v6);
  a1[1] = v5;
  a1[2] = v6;
  uint64_t v7 = a2[3];
  a1[3] = v7;
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t *assignWithCopy for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload( uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  uint64_t v5 = a2[1];
  unint64_t v6 = a2[2];
  sub_10001736C(v5, v6);
  uint64_t v7 = a1[1];
  unint64_t v8 = a1[2];
  a1[1] = v5;
  a1[2] = v6;
  sub_100016F9C(v7, v8);
  uint64_t v9 = a2[3];
  a1[3] = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  return a1;
}

void *assignWithTake for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload( void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_100016F9C(v4, v5);
  a1[3] = *(void *)(a2 + 24);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t getEnumTagSinglePayload for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload( uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload( uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)unint64_t result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload()
{
  return &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload;
}

unint64_t sub_10059D940()
{
  unint64_t result = qword_1009B3A18;
  if (!qword_1009B3A18)
  {
    unint64_t result = swift_getWitnessTable( &unk_1008084CC,  &type metadata for OwnedDeviceFetchResponse.OwnDeviceLocationPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3A18);
  }

  return result;
}

unint64_t sub_10059D988()
{
  unint64_t result = qword_1009B3A20;
  if (!qword_1009B3A20)
  {
    unint64_t result = swift_getWitnessTable( &unk_100808584,  &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3A20);
  }

  return result;
}

unint64_t sub_10059D9D0()
{
  unint64_t result = qword_1009B3A28;
  if (!qword_1009B3A28)
  {
    unint64_t result = swift_getWitnessTable( &unk_1008084F4,  &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3A28);
  }

  return result;
}

unint64_t sub_10059DA18()
{
  unint64_t result = qword_1009B3A30;
  if (!qword_1009B3A30)
  {
    unint64_t result = swift_getWitnessTable( &unk_10080851C,  &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3A30);
  }

  return result;
}

unint64_t sub_10059DA60()
{
  unint64_t result = qword_1009B3A38;
  if (!qword_1009B3A38)
  {
    unint64_t result = swift_getWitnessTable( &unk_10080843C,  &type metadata for OwnedDeviceFetchResponse.OwnDeviceLocationPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3A38);
  }

  return result;
}

unint64_t sub_10059DAA8()
{
  unint64_t result = qword_1009B3A40;
  if (!qword_1009B3A40)
  {
    unint64_t result = swift_getWitnessTable( &unk_100808464,  &type metadata for OwnedDeviceFetchResponse.OwnDeviceLocationPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3A40);
  }

  return result;
}

unint64_t sub_10059DAEC()
{
  unint64_t result = qword_1009B3A50;
  if (!qword_1009B3A50)
  {
    unint64_t result = swift_getWitnessTable( &unk_10080872C,  &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3A50);
  }

  return result;
}

uint64_t _s12searchpartyd24OwnedDeviceFetchResponseV25AcsnDeviceLocationPayloadV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_10059DB7C + 4 * byte_100807E0D[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_10059DBB0 + 4 * byte_100807E08[v4]))();
}

uint64_t sub_10059DBB0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10059DBB8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10059DBC0LL);
  }
  return result;
}

uint64_t sub_10059DBCC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10059DBD4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_10059DBD8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10059DBE0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload.CodingKeys()
{
  return &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload.CodingKeys;
}

unint64_t sub_10059DC00()
{
  unint64_t result = qword_1009B3A58;
  if (!qword_1009B3A58)
  {
    unint64_t result = swift_getWitnessTable( &unk_100808704,  &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3A58);
  }

  return result;
}

unint64_t sub_10059DC48()
{
  unint64_t result = qword_1009B3A60;
  if (!qword_1009B3A60)
  {
    unint64_t result = swift_getWitnessTable( &unk_100808674,  &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3A60);
  }

  return result;
}

unint64_t sub_10059DC90()
{
  unint64_t result = qword_1009B3A68[0];
  if (!qword_1009B3A68[0])
  {
    unint64_t result = swift_getWitnessTable( &unk_10080869C,  &type metadata for OwnedDeviceFetchResponse.AcsnDeviceLocationPayload.AcsnLocationsEncodedPayload.CodingKeys);
    atomic_store(result, qword_1009B3A68);
  }

  return result;
}

uint64_t sub_10059DCE4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X2>, uint64_t a3@<X3>, uint64_t a4@<X8>)
{
  uint64_t v37 = a4;
  uint64_t v33 = *(void *)(a1 + 16);
  uint64_t v6 = type metadata accessor for FailableRecord(255LL, v33, a2, a3);
  uint64_t v7 = type metadata accessor for Optional(0LL, v6);
  uint64_t v35 = *(void *)(v7 - 8);
  uint64_t v36 = v7;
  __chkstk_darwin(v7);
  int v32 = (char *)&v29 - v8;
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  unint64_t v30 = (char *)&v29 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009A7E78);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v29 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v29 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = a1;
  uint64_t v22 = *(int *)(a1 + 40);
  uint64_t v34 = v4;
  uint64_t v23 = v4 + v22;
  sub_10059DFC8(v4 + v22, (uint64_t)v17);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))(v17, 1LL, v18) == 1)
  {
    sub_100015794((uint64_t)v17, &qword_1009A7E78);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))( v37,  1LL,  1LL,  v6);
  }

  uint64_t v24 = (*(uint64_t (**)(char *, char *, uint64_t))(v19 + 32))(v21, v17, v18);
  DirectorySequence.next()(v24);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
    sub_100015794((uint64_t)v11, (uint64_t *)&unk_1009A34D0);
    sub_100015794(v23, &qword_1009A7E78);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v19 + 56))(v23, 1LL, 1LL, v18);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))( v37,  1LL,  1LL,  v6);
  }

  uint64_t v26 = (uint64_t)v30;
  (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v30, v11, v12);
  unsigned __int16 v27 = objc_autoreleasePoolPush();
  char v28 = v32;
  sub_10059E010(v26, v34, v33, *(void (**)(char *, uint64_t))(v31 + 24), v32);
  objc_autoreleasePoolPop(v27);
  (*(void (**)(char *, uint64_t))(v19 + 8))(v21, v18);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v26, v12);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v35 + 32))(v37, v28, v36);
}

uint64_t sub_10059DFC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A7E78);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_10059E010@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void (*a4)(char *, uint64_t)@<X3>, char *a5@<X8>)
{
  uint64_t v167 = a5;
  uint64_t v162 = a4;
  uint64_t v163 = a2;
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v153 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Optional(0LL, a3);
  uint64_t v156 = *(void *)(v10 - 8);
  uint64_t v157 = (void (*)(char *, uint64_t, uint64_t))v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v153 - v12;
  uint64_t v168 = a3;
  uint64_t v161 = *(char **)(a3 - 8);
  __chkstk_darwin(v11);
  uint64_t v155 = (char *)&v153 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for URL(0LL);
  uint64_t v169 = *(void *)(v15 - 8);
  uint64_t v170 = v15;
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v153 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v153 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  os_log_type_t v159 = (char *)&v153 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  unint64_t v160 = (char *)&v153 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  char v28 = (char *)&v153 - v27;
  __chkstk_darwin(v26);
  unint64_t v165 = (char *)&v153 - v29;
  uint64_t v30 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v30);
  int v32 = (char *)&v153 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v166 = type metadata accessor for UUID(0LL);
  uint64_t v164 = *(void *)(v166 - 8);
  uint64_t v33 = __chkstk_darwin(v166);
  uint64_t v158 = (char *)&v153 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = __chkstk_darwin(v33);
  uint64_t v37 = (char *)&v153 - v36;
  uint64_t v171 = a1;
  uint64_t v38 = URL.pathExtension.getter(v35);
  if (v38 == 0xD000000000000010LL && v39 == 0x8000000100855C50LL)
  {
    swift_bridgeObjectRelease();
LABEL_5:
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v42 = type metadata accessor for Logger(0LL);
    sub_10000A720(v42, (uint64_t)qword_100A2AC98);
    uint64_t v44 = v169;
    uint64_t v43 = v170;
    unint64_t v45 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v169 + 16);
    uint64_t v46 = v45(v18, v171, v170);
    uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
    os_log_type_t v48 = static os_log_type_t.default.getter(v47);
    if (os_log_type_enabled(v47, v48))
    {
      uint64_t v49 = swift_slowAlloc(22LL, -1LL);
      uint64_t v50 = swift_slowAlloc(32LL, -1LL);
      uint64_t v174 = v50;
      *(_DWORD *)uint64_t v49 = 141558275;
      uint64_t v172 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v49 + 4, v49 + 12);
      *(_WORD *)(v49 + 12) = 2081;
      unint64_t v51 = sub_10059EEE0();
      uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter(v170, v51);
      uint64_t v172 = sub_1003F11D4(v52, v53, &v174);
      uint64_t v44 = v169;
      uint64_t v43 = v170;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v49 + 14, v49 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v43);
      _os_log_impl( (void *)&_mh_execute_header,  v47,  v48,  "Tombstoned file extension. Skipping file %{private,mask.hash}s",  (uint8_t *)v49,  0x16u);
      swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v50, -1LL, -1LL);
      swift_slowDealloc(v49, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v44 + 8))(v18, v43);
    }

    uint64_t v54 = v168;
    uint64_t v55 = v167;
    uint64_t v56 = v171;
    v45(v167, v171, v43);
    uint64_t v57 = &v55[*(int *)(type metadata accessor for BeaconStoreFileRecord(0LL) + 20)];
    v45(v57, v56, v43);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v44 + 56))(v57, 0LL, 1LL, v43);
    uint64_t v60 = v54;
    goto LABEL_11;
  }

  uint64_t v154 = v9;
  char v40 = _stringCompareWithSmolCheck(_:_:expecting:)(v38, v39, 0xD000000000000010LL, 0x8000000100855C50LL, 0LL);
  uint64_t v41 = swift_bridgeObjectRelease();
  if ((v40 & 1) != 0) {
    goto LABEL_5;
  }
  uint64_t v65 = URL.pathExtension.getter(v41);
  if (v65 == 0x64726F636572LL && v66 == 0xE600000000000000LL)
  {
    uint64_t v67 = swift_bridgeObjectRelease();
    uint64_t v68 = v170;
  }

  else
  {
    char v69 = _stringCompareWithSmolCheck(_:_:expecting:)(v65, v66, 0x64726F636572LL, 0xE600000000000000LL, 0LL);
    uint64_t v67 = swift_bridgeObjectRelease();
    uint64_t v68 = v170;
    if ((v69 & 1) == 0)
    {
      if (qword_10099B528 != -1) {
        swift_once(&qword_10099B528, sub_1004F3B00);
      }
      uint64_t v116 = type metadata accessor for Logger(0LL);
      sub_10000A720(v116, (uint64_t)qword_100A2AC98);
      uint64_t v117 = v169;
      uint64_t v118 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v169 + 16))(v21, v171, v68);
      uint64_t v119 = (os_log_s *)Logger.logObject.getter(v118);
      os_log_type_t v120 = static os_log_type_t.error.getter(v119);
      BOOL v121 = os_log_type_enabled(v119, v120);
      uint64_t v122 = v168;
      if (v121)
      {
        uint64_t v123 = swift_slowAlloc(22LL, -1LL);
        uint64_t v171 = swift_slowAlloc(32LL, -1LL);
        uint64_t v174 = v171;
        *(_DWORD *)uint64_t v123 = 141558275;
        uint64_t v172 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v123 + 4, v123 + 12);
        *(_WORD *)(v123 + 12) = 2081;
        unint64_t v124 = sub_10059EEE0();
        uint64_t v125 = dispatch thunk of CustomStringConvertible.description.getter(v68, v124);
        uint64_t v172 = sub_1003F11D4(v125, v126, &v174);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v123 + 14, v123 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v169 + 8))(v21, v68);
        _os_log_impl( (void *)&_mh_execute_header,  v119,  v120,  "Invalid extension. Skipping file %{private,mask.hash}s",  (uint8_t *)v123,  0x16u);
        uint64_t v127 = v171;
        swift_arrayDestroy(v171, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v127, -1LL, -1LL);
        swift_slowDealloc(v123, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v117 + 8))(v21, v68);
      }

      uint64_t v130 = v122;
      goto LABEL_36;
    }
  }

  uint64_t v70 = v165;
  uint64_t v71 = URL.deletingPathExtension()(v67);
  uint64_t v72 = URL.lastPathComponent.getter(v71);
  uint64_t v74 = v73;
  uint64_t v75 = v169;
  uint64_t v76 = v68;
  uint64_t v77 = *(void (**)(char *, uint64_t))(v169 + 8);
  v77(v70, v76);
  UUID.init(uuidString:)(v72, v74);
  swift_bridgeObjectRelease();
  uint64_t v78 = v164;
  uint64_t v79 = v166;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v164 + 48))(v32, 1LL, v166) != 1)
  {
    (*(void (**)(char *, char *, uint64_t))(v78 + 32))(v37, v32, v79);
    uint64_t v90 = v168;
    uint64_t v91 = v162;
    uint64_t v93 = (uint64_t)v70;
    uint64_t v171 = *(int *)(type metadata accessor for FailableRecordSequence(0LL, v168, (uint64_t)v162, v92) + 36);
    int v94 = *(void (**)(char *))(v75 + 16);
    char v95 = v70;
    uint64_t v96 = v170;
    v94(v95);
    swift_retain();
    sub_1005757BC((uint64_t)v37, v93, v90, (uint64_t)v91);
    swift_release();
    v77((char *)v93, v96);
    uint64_t v97 = v161;
    if ((*((unsigned int (**)(char *, uint64_t, uint64_t))v161 + 6))(v13, 1LL, v90) != 1)
    {
      (*(void (**)(char *, uint64_t))(v164 + 8))(v37, v166);
      __int128 v131 = (void (*)(char *, char *, uint64_t))*((void *)v97 + 4);
      __int128 v132 = v155;
      v131(v155, v13, v90);
      __int128 v133 = v167;
      v131(v167, v132, v90);
      uint64_t v61 = type metadata accessor for FailableRecord(0LL, v90, v134, v135);
      swift_storeEnumTagMultiPayload(v133, v61, 0LL);
      uint64_t v62 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56LL);
      uint64_t v63 = v133;
      return v62((uint64_t)v63, 0LL, 1LL, v61);
    }

    uint64_t v161 = v37;
    (*(void (**)(char *, void (*)(char *, uint64_t, uint64_t)))(v156 + 8))(v13, v157);
    uint64_t v98 = v170;
    uint64_t v99 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v94)(v93, v163, v170);
    uint64_t v100 = URL.description.getter(v99);
    unint64_t v102 = v101;
    uint64_t v162 = v77;
    v77((char *)v93, v98);
    if (qword_10099B528 != -1) {
      swift_once(&qword_10099B528, sub_1004F3B00);
    }
    uint64_t v157 = (void (*)(char *, uint64_t, uint64_t))v94;
    uint64_t v103 = type metadata accessor for Logger(0LL);
    sub_10000A720(v103, (uint64_t)qword_100A2AC98);
    uint64_t v104 = v164;
    uint64_t v105 = v158;
    uint64_t v106 = v161;
    (*(void (**)(char *, char *, uint64_t))(v164 + 16))(v158, v161, v166);
    swift_bridgeObjectRetain(v102);
    uint64_t v108 = (os_log_s *)Logger.logObject.getter(v107);
    os_log_type_t v109 = static os_log_type_t.error.getter(v108);
    int v110 = v109;
    if (os_log_type_enabled(v108, v109))
    {
      uint64_t v111 = swift_slowAlloc(42LL, -1LL);
      uint64_t v156 = swift_slowAlloc(64LL, -1LL);
      uint64_t v174 = v156;
      *(_DWORD *)uint64_t v111 = 141558787;
      uint64_t v172 = 1752392040LL;
      uint64_t v112 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v111 + 4, v111 + 12);
      *(_WORD *)(v111 + 12) = 2081;
      LODWORD(v155) = v110;
      uint64_t v113 = UUID.uuidString.getter(v112);
      uint64_t v172 = sub_1003F11D4(v113, v114, &v174);
      uint64_t v106 = v161;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v111 + 14, v111 + 22);
      swift_bridgeObjectRelease();
      uint64_t v164 = *(void *)(v104 + 8);
      ((void (*)(char *, uint64_t))v164)(v105, v166);
      *(_WORD *)(v111 + 22) = 2160;
      uint64_t v172 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v111 + 24, v111 + 32);
      *(_WORD *)(v111 + 32) = 2081;
      swift_bridgeObjectRetain(v102);
      uint64_t v172 = sub_1003F11D4(v100, v102, &v174);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v111 + 34, v111 + 42);
      swift_bridgeObjectRelease_n(v102, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v108,  (os_log_type_t)v155,  "Could not read item %{private,mask.hash}s for records at: %{private,mask.hash}s",  (uint8_t *)v111,  0x2Au);
      uint64_t v115 = v156;
      swift_arrayDestroy(v156, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v115, -1LL, -1LL);
      swift_slowDealloc(v111, -1LL, -1LL);
    }

    else
    {
      uint64_t v164 = *(void *)(v104 + 8);
      ((void (*)(char *, uint64_t))v164)(v105, v166);

      swift_bridgeObjectRelease_n(v102, 2LL);
    }

    uint64_t v137 = v163;
    uint64_t v138 = v170;
    uint64_t v139 = v160;
    uint64_t v140 = v157;
    v157(v160, v163, v170);
    swift_retain();
    uint64_t v161 = (char *)objc_autoreleasePoolPush();
    uint64_t v141 = UUID.uuidString.getter(v161);
    uint64_t v142 = v106;
    uint64_t v143 = v159;
    URL.appendingPathComponent(_:)(v141, v144);
    swift_bridgeObjectRelease();
    URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
    uint64_t v145 = v142;
    unint64_t v146 = v162;
    v162(v143, v138);
    objc_autoreleasePoolPop(v161);
    swift_release();
    v146(v139, v138);
    v140(v139, v137, v138);
    swift_retain();
    os_log_type_t v147 = objc_autoreleasePoolPush();
    uint64_t v148 = UUID.uuidString.getter(v147);
    URL.appendingPathComponent(_:)(v148, v149);
    swift_bridgeObjectRelease();
    uint64_t v150 = (uint64_t)v154;
    URL.appendingPathExtension(_:)(0x64726F636572LL, 0xE600000000000000LL);
    v146(v143, v138);
    objc_autoreleasePoolPop(v147);
    swift_release();
    v146(v139, v138);
    ((void (*)(char *, uint64_t))v164)(v145, v166);
    uint64_t v151 = v169;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v169 + 56))(v150, 0LL, 1LL, v138);
    uint64_t v55 = v167;
    (*(void (**)(char *, char *, uint64_t))(v151 + 32))(v167, v165, v138);
    uint64_t v152 = type metadata accessor for BeaconStoreFileRecord(0LL);
    sub_10059EF34(v150, (uint64_t)&v55[*(int *)(v152 + 20)]);
    uint64_t v60 = v168;
LABEL_11:
    uint64_t v61 = type metadata accessor for FailableRecord(0LL, v60, v58, v59);
    swift_storeEnumTagMultiPayload(v55, v61, 1LL);
    uint64_t v62 = *(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v61 - 8) + 56LL);
    uint64_t v63 = v55;
    return v62((uint64_t)v63, 0LL, 1LL, v61);
  }

  uint64_t v80 = v170;
  uint64_t v162 = v77;
  sub_100015794((uint64_t)v32, &qword_10099D8A0);
  if (qword_10099B528 != -1) {
    swift_once(&qword_10099B528, sub_1004F3B00);
  }
  uint64_t v81 = type metadata accessor for Logger(0LL);
  sub_10000A720(v81, (uint64_t)qword_100A2AC98);
  uint64_t v82 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v169 + 16))(v28, v171, v80);
  uint64_t v83 = (os_log_s *)Logger.logObject.getter(v82);
  os_log_type_t v84 = static os_log_type_t.error.getter(v83);
  if (os_log_type_enabled(v83, v84))
  {
    uint64_t v85 = swift_slowAlloc(22LL, -1LL);
    uint64_t v86 = swift_slowAlloc(32LL, -1LL);
    uint64_t v174 = v86;
    *(_DWORD *)uint64_t v85 = 141558275;
    uint64_t v172 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v85 + 4, v85 + 12);
    *(_WORD *)(v85 + 12) = 2081;
    unint64_t v87 = sub_10059EEE0();
    uint64_t v88 = dispatch thunk of CustomStringConvertible.description.getter(v80, v87);
    uint64_t v172 = sub_1003F11D4(v88, v89, &v174);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v172, &v173, v85 + 14, v85 + 22);
    swift_bridgeObjectRelease();
    v162(v28, v80);
    _os_log_impl( (void *)&_mh_execute_header,  v83,  v84,  "Invalid file identifier at URL: %{private,mask.hash}s",  (uint8_t *)v85,  0x16u);
    swift_arrayDestroy(v86, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v86, -1LL, -1LL);
    swift_slowDealloc(v85, -1LL, -1LL);
  }

  else
  {
    v162(v28, v80);
  }

  uint64_t v130 = v168;
LABEL_36:
  uint64_t v136 = type metadata accessor for FailableRecord(0LL, v130, v128, v129);
  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v136 - 8) + 56LL))( v167,  1LL,  1LL,  v136);
}

unint64_t sub_10059EEE0()
{
  unint64_t result = qword_10099D308;
  if (!qword_10099D308)
  {
    uint64_t v1 = type metadata accessor for URL(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for URL, v1);
    atomic_store(result, (unint64_t *)&qword_10099D308);
  }

  return result;
}

uint64_t type metadata accessor for FailableRecordSequence(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006A624(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for FailableRecordSequence);
}

uint64_t sub_10059EF34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

void sub_10059EF7C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v6[0] = *(void *)(v2 - 8) + 64LL;
    v6[1] = (char *)&value witness table for Builtin.NativeObject + 64;
    sub_10059F78C(319LL);
    if (v5 <= 0x3F)
    {
      _OWORD v6[2] = *(void *)(v4 - 8) + 64LL;
      swift_initStructMetadata(a1, 0LL, 3LL, v6, a1 + 32);
    }
  }

uint64_t *sub_10059F00C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 40);
    *(uint64_t *)((char *)a1 + *(int *)(a3 + 36)) = *(uint64_t *)((char *)a2 + *(int *)(a3 + 36));
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for DirectorySequence(0LL);
    uint64_t v12 = *(void *)(v11 - 8);
    uint64_t v13 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48);
    swift_retain();
    if (v13(v10, 1LL, v11))
    {
      uint64_t v14 = sub_100004AEC(&qword_1009A7E78);
      memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 16))(v9, v10, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v9, 0LL, 1LL, v11);
    }
  }

  return a1;
}

uint64_t sub_10059F12C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  swift_release(*(void *)(a1 + *(int *)(a2 + 36)));
  uint64_t v5 = a1 + *(int *)(a2 + 40);
  uint64_t v6 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  return result;
}

uint64_t sub_10059F1C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 40);
  *(void *)(a1 + *(int *)(a3 + 36)) = *(void *)(a2 + *(int *)(a3 + 36));
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48);
  swift_retain();
  if (v12(v9, 1LL, v10))
  {
    uint64_t v13 = sub_100004AEC(&qword_1009A7E78);
    memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 16))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  }

  return a1;
}

uint64_t sub_10059F2BC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 36)) = *(void *)(a2 + *(int *)(a3 + 36));
  swift_retain();
  swift_release();
  uint64_t v7 = *(int *)(a3 + 40);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 24))(v8, v9, v10);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }

  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_100004AEC(&qword_1009A7E78);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v11 + 16))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  return a1;
}

uint64_t sub_10059F400(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 40);
  *(void *)(a1 + *(int *)(a3 + 36)) = *(void *)(a2 + *(int *)(a3 + 36));
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (const void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v11 + 48))(v9, 1LL, v10))
  {
    uint64_t v12 = sub_100004AEC(&qword_1009A7E78);
    memcpy(v8, v9, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v11 + 32))(v8, v9, v10);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  }

  return a1;
}

uint64_t sub_10059F4E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  *(void *)(a1 + *(int *)(a3 + 36)) = *(void *)(a2 + *(int *)(a3 + 36));
  swift_release();
  uint64_t v7 = *(int *)(a3 + 40);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v11 + 48);
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (!v13)
  {
    if (!v14)
    {
      (*(void (**)(void *, void *, uint64_t))(v11 + 40))(v8, v9, v10);
      return a1;
    }

    (*(void (**)(void *, uint64_t))(v11 + 8))(v8, v10);
    goto LABEL_6;
  }

  if (v14)
  {
LABEL_6:
    uint64_t v15 = sub_100004AEC(&qword_1009A7E78);
    memcpy(v8, v9, *(void *)(*(void *)(v15 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(void *, void *, uint64_t))(v11 + 32))(v8, v9, v10);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
  return a1;
}

uint64_t sub_10059F620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10059F62C);
}

uint64_t sub_10059F62C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    uint64_t v8 = sub_100004AEC(&qword_1009A7E78);
    uint64_t v10 = a1 + *(int *)(a3 + 40);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
    return v9(v10, a2, v8);
  }

  unint64_t v11 = *(void *)(a1 + *(int *)(a3 + 36));
  if (v11 >= 0xFFFFFFFF) {
    LODWORD(v11) = -1;
  }
  return (v11 + 1);
}

uint64_t sub_10059F6D8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10059F6E4);
}

uint64_t sub_10059F6E4(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for URL(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
      return result;
    }

    uint64_t v10 = sub_100004AEC(&qword_1009A7E78);
    uint64_t v12 = a1 + *(int *)(a4 + 40);
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

void sub_10059F78C(uint64_t a1)
{
  if (!qword_1009B3AF0)
  {
    uint64_t v2 = type metadata accessor for DirectorySequence(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1009B3AF0);
    }
  }

uint64_t sub_10059F7E0(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1008087A8, a1);
}

uint64_t sub_10059F7F0@<X0>(void *a1@<X0>, unint64_t a2@<X8>)
{
  unint64_t v3 = v2;
  uint64_t v6 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v6);
  uint64_t v8 = (uint64_t)&v62 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009A5990);
  __chkstk_darwin(v9);
  uint64_t v68 = (uint64_t)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v78 = *(void *)(v11 - 8);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v77 = (uint64_t)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v62 - v15;
  __chkstk_darwin(v14);
  uint64_t v66 = (uint64_t)&v62 - v17;
  uint64_t v18 = type metadata accessor for Date(0LL);
  uint64_t v71 = *(void *)(v18 - 8);
  uint64_t v72 = v18;
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v70 = (char *)&v62 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Date.init()(v19);
  if (qword_10099B300 != -1) {
LABEL_43:
  }
    swift_once(&qword_10099B300, sub_1003459EC);
  uint64_t v21 = OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier;
  uint64_t v22 = qword_100A2A6C8;
  uint64_t v67 = objc_autoreleasePoolPush();
  uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009AF790);
  OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, v22, v23);
  uint64_t v24 = v82[0];
  uint64_t v25 = *(void *)(v82[0] + 16LL);
  char v69 = v3;
  if (v25 && (unint64_t v26 = sub_10030D124((uint64_t)a1 + v21), (v27 & 1) != 0))
  {
    uint64_t v28 = *(void *)(*(void *)(v24 + 56) + 8 * v26);
    swift_bridgeObjectRetain(v28);
    swift_bridgeObjectRelease();
    uint64_t v29 = sub_1002FE5F8(v28);
    swift_bridgeObjectRelease();
    sub_1002FFE1C((uint64_t)v29);
    uint64_t v31 = v30;
    swift_release();
    unint64_t v3 = _swiftEmptyArrayStorage;
    uint64_t v83 = _swiftEmptyArrayStorage;
    uint64_t v76 = *(void *)(v31 + 16);
    if (v76)
    {
      uint64_t v63 = a1;
      uint64_t v64 = v8;
      unint64_t v65 = a2;
      unint64_t v32 = 0LL;
      a1 = qword_100808988;
      uint64_t v74 = v16;
      uint64_t v75 = v11;
      uint64_t v73 = v31;
      while (1)
      {
        if (v32 >= *(void *)(v31 + 16))
        {
          __break(1u);
          goto LABEL_43;
        }

        unint64_t v33 = (*(unsigned __int8 *)(v78 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v78 + 80);
        uint64_t v80 = *(void *)(v78 + 72);
        unint64_t v81 = v32 + 1;
        unint64_t v79 = v33;
        sub_1003493A4(v31 + v33 + v80 * v32, (uint64_t)v16);
        sub_1001D6134();
        unint64_t v3 = (void *)Set.init(minimumCapacity:)(7LL);
        uint64_t v34 = 0LL;
        for (unint64_t i = v3 + 7; ; unint64_t i = v3 + 7)
        {
          while (1)
          {
            uint64_t v8 = *((char *)&off_100936F30 + v34++ + 32);
            Hasher.init(_seed:)(v82, v3[5]);
            Swift::UInt v36 = qword_100808988[v8];
            Hasher._combine(_:)(v36);
            Swift::Int v37 = Hasher._finalize()();
            uint64_t v38 = -1LL << *((_BYTE *)v3 + 32);
            a2 = v37 & ~v38;
            uint64_t v39 = v3[6];
LABEL_10:
            if (v34 == 7) {
              goto LABEL_19;
            }
          }

          uint64_t v40 = ~v38;
          while (1)
          {
            a2 = (a2 + 1) & v40;
          }

uint64_t sub_10059FF08@<X0>(uint64_t a1@<X0>, unint64_t a2@<X8>)
{
  unint64_t v3 = v2;
  uint64_t v70 = a1;
  uint64_t v5 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v61 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009A5990);
  __chkstk_darwin(v8);
  uint64_t v66 = (uint64_t)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v77 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v76 = (uint64_t)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v61 - v14;
  __chkstk_darwin(v13);
  uint64_t v64 = (uint64_t)&v61 - v16;
  uint64_t v69 = type metadata accessor for Date(0LL);
  uint64_t v68 = *(void *)(v69 - 8);
  uint64_t v17 = __chkstk_darwin(v69);
  uint64_t v19 = (char *)&v61 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Date.init()(v17);
  if (qword_10099B300 != -1) {
LABEL_40:
  }
    swift_once(&qword_10099B300, sub_1003459EC);
  uint64_t v20 = OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier;
  uint64_t v21 = qword_100A2A6C8;
  unint64_t v65 = objc_autoreleasePoolPush();
  uint64_t v22 = sub_100004AEC((uint64_t *)&unk_1009AF790);
  OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, v21, v22);
  uint64_t v67 = v3;
  uint64_t v23 = v81[0];
  if (*(void *)(v81[0] + 16LL) && (unint64_t v24 = sub_10030D124(v70 + v20), (v25 & 1) != 0))
  {
    uint64_t v26 = *(void *)(*(void *)(v23 + 56) + 8 * v24);
    swift_bridgeObjectRetain(v26);
    swift_bridgeObjectRelease();
    char v27 = sub_1002FE5F8(v26);
    swift_bridgeObjectRelease();
    sub_1002FFE1C((uint64_t)v27);
    uint64_t v29 = v28;
    swift_release();
    unint64_t v3 = _swiftEmptyArrayStorage;
    uint64_t v82 = _swiftEmptyArrayStorage;
    uint64_t v75 = *(void *)(v29 + 16);
    if (v75)
    {
      uint64_t v62 = v7;
      unint64_t v63 = a2;
      unint64_t v30 = 0LL;
      uint64_t v7 = (char *)qword_100808988;
      uint64_t v73 = v10;
      uint64_t v74 = v19;
      uint64_t v71 = v29;
      uint64_t v72 = v15;
      while (1)
      {
        if (v30 >= *(void *)(v29 + 16))
        {
          __break(1u);
          goto LABEL_40;
        }

        uint64_t v31 = *(void *)(v77 + 72);
        unint64_t v79 = (*(unsigned __int8 *)(v77 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80);
        unint64_t v80 = v30 + 1;
        uint64_t v78 = v31;
        sub_1003493A4(v29 + v79 + v31 * v30, (uint64_t)v15);
        sub_1001D6134();
        unint64_t v3 = (void *)Set.init(minimumCapacity:)(7LL);
        uint64_t v32 = 0LL;
        for (unint64_t i = v3 + 7; ; unint64_t i = v3 + 7)
        {
          while (1)
          {
            uint64_t v34 = *((char *)&off_100936F58 + v32++ + 32);
            Hasher.init(_seed:)(v81, v3[5]);
            Swift::UInt v35 = qword_100808988[v34];
            Hasher._combine(_:)(v35);
            Swift::Int v36 = Hasher._finalize()();
            uint64_t v37 = -1LL << *((_BYTE *)v3 + 32);
            a2 = v36 & ~v37;
            uint64_t v38 = v3[6];
LABEL_10:
            if (v32 == 7) {
              goto LABEL_19;
            }
          }

          uint64_t v39 = ~v37;
          while (1)
          {
            a2 = (a2 + 1) & v39;
          }

uint64_t sub_1005A061C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v49 = a3;
  uint64_t v50 = a4;
  uint64_t v40 = a2;
  uint64_t v53 = a1;
  uint64_t v45 = type metadata accessor for DispatchWorkItemFlags(0LL);
  unint64_t v48 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v7 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v46 = *(void *)(v8 - 8);
  uint64_t v47 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v40 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(void *)(v4 + 56);
  uint64_t v41 = v16;
  uint64_t v42 = v15;
  id v52 = *(void (**)(char *, uint64_t))(v12 + 16);
  uint64_t v17 = a1;
  uint64_t v18 = v16;
  v52(v14, v17);
  uint64_t v19 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v20 = (v19 + 24) & ~v19;
  uint64_t v43 = v19 | 7;
  uint64_t v44 = v13 + 7;
  unint64_t v21 = (v13 + 7 + v20) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v22 = swift_allocObject(&unk_100966108, v21 + 8, v19 | 7);
  *(void *)(v22 + swift_weakDestroy(v0 + 16) = v4;
  uint64_t v51 = *(void (**)(uint64_t, char *, uint64_t))(v12 + 32);
  v51(v22 + v20, v14, v18);
  *(void *)(v22 + v21) = v40;
  aBlock[4] = sub_1005A7408;
  void aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100966120;
  uint64_t v23 = _Block_copy(aBlock);
  uint64_t v24 = swift_retain();
  static DispatchQoS.unspecified.getter(v24);
  NSDate v54 = _swiftEmptyArrayStorage;
  uint64_t v25 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v27 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v28 = v45;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v26, v27, v45, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v7, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v7, v28);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v10, v47);
  swift_release();
  uint64_t v29 = v41;
  ((void (*)(char *, uint64_t, uint64_t))v52)(v14, v53, v41);
  uint64_t v30 = (v19 + 16) & ~v19;
  uint64_t v31 = v43;
  unint64_t v32 = (v44 + v30) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v48 = v32 + 16;
  uint64_t v33 = swift_allocObject(&unk_100966158, v32 + 16, v43);
  v51(v33 + v30, v14, v29);
  uint64_t v34 = (void *)(v33 + v32);
  uint64_t v36 = v49;
  uint64_t v35 = v50;
  *uint64_t v34 = v49;
  v34[1] = v35;
  swift_retain();
  Future.addFailure(block:)(sub_1005A71A4, v33);
  swift_release();
  swift_release();
  ((void (*)(char *, uint64_t, uint64_t))v52)(v14, v53, v29);
  uint64_t v37 = swift_allocObject(&unk_100966180, v48, v31);
  v51(v37 + v30, v14, v29);
  uint64_t v38 = (void *)(v37 + v32);
  *uint64_t v38 = v36;
  v38[1] = v35;
  swift_retain();
  Future.addSuccess(block:)(sub_1005A71AC, v37);
  swift_release();
  return swift_release();
}

uint64_t sub_1005A09B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = &v17[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v7);
  uint64_t v11 = &v17[-v10 - 8];
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v11, a2, v12);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v13 + 56))(v11, 0LL, 1LL, v12);
  sub_100015750((uint64_t)v11, (uint64_t)v9, &qword_10099D8A0);
  uint64_t v14 = a1 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playCommandIdentifier;
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playCommandIdentifier, v17, 33LL, 0LL);
  sub_1000D4D50((uint64_t)v9, v14, &qword_10099D8A0);
  swift_endAccess(v17);
  return sub_1005A2110(a3);
}

uint64_t sub_1005A0AE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v47 = a2;
  uint64_t v48 = a3;
  uint64_t v52 = a1;
  uint64_t v43 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v46 = *(void *)(v43 - 8);
  __chkstk_darwin(v43);
  uint64_t v6 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v44 = *(void *)(v7 - 8);
  uint64_t v45 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = v3;
  v40[1] = *(void *)(v3 + 56);
  uint64_t v41 = v14;
  uint64_t v15 = *(void (**)(char *, uint64_t, uint64_t))(v11 + 16);
  uint64_t v49 = (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = v15;
  uint64_t v16 = a1;
  uint64_t v17 = v14;
  ((void (*)(char *, uint64_t))v15)(v49, v16);
  uint64_t v18 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v19 = (v18 + 24) & ~v18;
  uint64_t v42 = v18 | 7;
  uint64_t v20 = swift_allocObject(&unk_100965FC8, v19 + v12, v18 | 7);
  *(void *)(v20 + swift_weakDestroy(v0 + 16) = v13;
  uint64_t v51 = *(void (**)(uint64_t, char *, uint64_t))(v11 + 32);
  v51(v20 + v19, (char *)v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL), v17);
  aBlock[4] = sub_1005A7170;
  void aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100965FE0;
  unint64_t v21 = _Block_copy(aBlock);
  uint64_t v22 = swift_retain();
  static DispatchQoS.unspecified.getter(v22);
  uint64_t v53 = _swiftEmptyArrayStorage;
  uint64_t v23 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v24 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v25 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v26 = v43;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v53, v24, v25, v43, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v6, v21);
  _Block_release(v21);
  (*(void (**)(char *, uint64_t))(v46 + 8))(v6, v26);
  (*(void (**)(char *, uint64_t))(v44 + 8))(v9, v45);
  swift_release();
  uint64_t v27 = v49;
  uint64_t v28 = v41;
  v50(v49, v52, v41);
  uint64_t v29 = (v18 + 16) & ~v18;
  unint64_t v30 = (v12 + v29 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v31 = v42;
  uint64_t v32 = swift_allocObject(&unk_100966018, v30 + 16, v42);
  v51(v32 + v29, v27, v28);
  uint64_t v33 = (void *)(v32 + v30);
  uint64_t v35 = v47;
  uint64_t v34 = v48;
  *uint64_t v33 = v47;
  v33[1] = v34;
  swift_retain();
  Future.addFailure(block:)(sub_1005A71A4, v32);
  swift_release();
  swift_release();
  uint64_t v36 = v49;
  v50(v49, v52, v28);
  uint64_t v37 = swift_allocObject(&unk_100966040, v30 + 16, v31);
  v51(v37 + v29, v36, v28);
  uint64_t v38 = (void *)(v37 + v30);
  *uint64_t v38 = v35;
  v38[1] = v34;
  swift_retain();
  Future.addSuccess(block:)(sub_1005A71AC, v37);
  swift_release();
  return swift_release();
}

uint64_t sub_1005A0E74(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = &v15[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  __chkstk_darwin(v5);
  uint64_t v9 = &v15[-v8 - 8];
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v11 + 16))(v9, a2, v10);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v11 + 56))(v9, 0LL, 1LL, v10);
  sub_100015750((uint64_t)v9, (uint64_t)v7, &qword_10099D8A0);
  uint64_t v12 = a1 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopCommandIdentifier;
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopCommandIdentifier, v15, 33LL, 0LL);
  sub_1000D4D50((uint64_t)v7, v12, &qword_10099D8A0);
  swift_endAccess(v15);
  return sub_1005A4AA4();
}

uint64_t sub_1005A0F94(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v33 = a2;
  uint64_t v35 = a1;
  uint64_t v38 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v41 = *(void *)(v38 - 8);
  __chkstk_darwin(v38);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v39 = *(void *)(v6 - 8);
  uint64_t v40 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v33 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v33 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v14 + 104))( v16,  enum case for DispatchQoS.QoSClass.default(_:),  v13);
  uint64_t v34 = static OS_dispatch_queue.global(qos:)(v16);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))(v12, v33, v9);
  uint64_t v17 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v18 = (v17 + 16) & ~v17;
  unint64_t v19 = (v11 + v18 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v20 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = swift_allocObject(&unk_1009660B8, v20 + 8, v17 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))(v21 + v18, v12, v9);
  uint64_t v22 = (void *)(v21 + v19);
  uint64_t v23 = v37;
  *uint64_t v22 = v36;
  v22[1] = v23;
  uint64_t v24 = v35;
  *(void *)(v21 + v20) = v35;
  aBlock[4] = sub_1005A7338;
  void aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_1009660D0;
  uint64_t v25 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v26 = swift_errorRetain(v24);
  static DispatchQoS.unspecified.getter(v26);
  uint64_t v42 = _swiftEmptyArrayStorage;
  uint64_t v27 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v28 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v29 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v30 = v38;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v42, v28, v29, v38, v27);
  uint64_t v31 = (void *)v34;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v5, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v41 + 8))(v5, v30);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v8, v40);
  return swift_release();
}

uint64_t sub_1005A12B4(uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t a4)
{
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v8 = UUID.uuidString.getter(v7);
  uint64_t v10 = v9;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_1000226F4();
  *(void *)(v7 + 32) = v8;
  *(void *)(v7 + 40) = v10;
  uint64_t v11 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v12 = (void *)static OS_os_log.default.getter(v11);
  uint64_t v13 = static os_log_type_t.default.getter(v12);
  os_log(_:dso:log:type:_:)( "SoundPlaybackCoordinator: calling failure for commandIdentifier %@",  66LL,  2LL,  &_mh_execute_header,  v12,  v13,  v7);
  swift_bridgeObjectRelease();

  return a2(a4);
}

uint64_t sub_1005A13A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v41 = a3;
  uint64_t v42 = a4;
  uint64_t v38 = a2;
  uint64_t v39 = a1;
  uint64_t v44 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v47 = *(void *)(v44 - 8);
  __chkstk_darwin(v44);
  uint64_t v43 = (char *)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v45 = *(void *)(v5 - 8);
  uint64_t v46 = v5;
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v37 - v13;
  uint64_t v15 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v16 + 104))( v18,  enum case for DispatchQoS.QoSClass.default(_:),  v15);
  uint64_t v40 = static OS_dispatch_queue.global(qos:)(v18);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
  unint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  v19(v14, v38, v8);
  v19(v12, v39, v8);
  uint64_t v20 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v21 = (v20 + 16) & ~v20;
  uint64_t v22 = (v10 + v20 + v21) & ~v20;
  unint64_t v23 = (v10 + v22 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v24 = swift_allocObject(&unk_100966068, v23 + 16, v20 | 7);
  uint64_t v25 = *(void (**)(uint64_t, char *, uint64_t))(v9 + 32);
  v25(v24 + v21, v14, v8);
  v25(v24 + v22, v12, v8);
  uint64_t v26 = (void *)(v24 + v23);
  uint64_t v27 = v42;
  *uint64_t v26 = v41;
  v26[1] = v27;
  aBlock[4] = sub_1005A7254;
  void aBlock[5] = v24;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100966080;
  uint64_t v28 = _Block_copy(aBlock);
  uint64_t v29 = swift_retain();
  static DispatchQoS.unspecified.getter(v29);
  uint64_t v48 = _swiftEmptyArrayStorage;
  uint64_t v30 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v31 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v32 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v34 = v43;
  uint64_t v33 = v44;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v48, v31, v32, v44, v30);
  uint64_t v35 = (void *)v40;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v7, v34, v28);
  _Block_release(v28);

  (*(void (**)(char *, uint64_t))(v47 + 8))(v34, v33);
  (*(void (**)(char *, uint64_t))(v45 + 8))(v7, v46);
  return swift_release();
}

uint64_t sub_1005A16F0(uint64_t a1, uint64_t a2, uint64_t (*a3)(void))
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v5 = swift_allocObject(v4, 112LL, 7LL);
  *(_OWORD *)(v5 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v6 = UUID.uuidString.getter(v5);
  uint64_t v8 = v7;
  *(void *)(v5 + 56) = &type metadata for String;
  unint64_t v9 = sub_1000226F4();
  *(void *)(v5 + 64) = v9;
  *(void *)(v5 + 32) = v6;
  *(void *)(v5 + 40) = v8;
  uint64_t v10 = UUID.uuidString.getter(v9);
  *(void *)(v5 + 96) = &type metadata for String;
  *(void *)(v5 + 104) = v9;
  *(void *)(v5 + 72) = v10;
  *(void *)(v5 + 80) = v11;
  uint64_t v12 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v13 = (void *)static OS_os_log.default.getter(v12);
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  os_log(_:dso:log:type:_:)( "SoundPlaybackCoordinator: calling success for commandIdentifier %@ beacon %@",  76LL,  2LL,  &_mh_execute_header,  v13,  v14,  v5);
  swift_bridgeObjectRelease();

  return a3(0LL);
}

uint64_t sub_1005A17F8()
{
  return sub_1005A1840((uint64_t)sub_1005A6F30, (uint64_t)&unk_100965F78, (uint64_t)sub_1005A7070, (uint64_t)&unk_100965F90);
}

uint64_t sub_1005A181C()
{
  return sub_1005A1840((uint64_t)sub_1005A6F30, (uint64_t)&unk_100965F28, (uint64_t)sub_1005A6F48, (uint64_t)&unk_100965F40);
}

uint64_t sub_1005A1840(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v61 = a4;
  uint64_t v60 = a3;
  uint64_t v59 = a2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v72 = (char *)&v48 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v70 = *(void *)(v9 - 8);
  uint64_t v71 = v9;
  __chkstk_darwin(v9);
  uint64_t v69 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v68 = type metadata accessor for UUID(0LL);
  uint64_t v67 = *(void *)(v68 - 8);
  __chkstk_darwin(v68);
  uint64_t v66 = v11;
  unint64_t v65 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v64 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v63 = *(void *)(v64 - 8);
  __chkstk_darwin(v64);
  uint64_t v62 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v78 = sub_100004AEC(&qword_10099D4A0);
  uint64_t v73 = *(void *)(v78 - 8);
  uint64_t v13 = *(void *)(v73 + 64);
  uint64_t v14 = __chkstk_darwin(v78);
  uint64_t v15 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v77 = (char *)&v48 - v16;
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v4 + 56));
  uint64_t v17 = sub_100004AEC(&qword_1009B3DB0);
  uint64_t v74 = v4;
  OS_dispatch_queue.sync<A>(execute:)(a1, v4, v17);
  uint64_t v18 = aBlock[0];
  uint64_t v19 = *(void *)(aBlock[0] + 16LL);
  if (v19)
  {
    uint64_t v57 = sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v56 = v74 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier;
    uint64_t v20 = *(unsigned __int8 *)(v73 + 80);
    uint64_t v48 = v18;
    uint64_t v21 = (char *)(v18 + ((v20 + 32) & ~v20));
    uint64_t v54 = *(void *)(v73 + 72);
    uint64_t v53 = *(void (**)(char *, char *, uint64_t))(v73 + 16);
    unsigned int v52 = enum case for DispatchQoS.QoSClass.default(_:);
    uint64_t v55 = v20;
    uint64_t v51 = (v20 + 16) & ~v20;
    unint64_t v50 = (v13 + v51 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v49 = v50 + 8;
    unint64_t v23 = v77;
    uint64_t v22 = v78;
    uint64_t v58 = v7;
    uint64_t v76 = (char *)&v48 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    do
    {
      uint64_t v75 = v19;
      uint64_t v24 = v53;
      v53(v23, v21, v22);
      uint64_t v25 = v63;
      uint64_t v26 = v62;
      uint64_t v27 = v64;
      (*(void (**)(char *, void, uint64_t))(v63 + 104))(v62, v52, v64);
      uint64_t v28 = (void *)static OS_dispatch_queue.global(qos:)(v26);
      (*(void (**)(char *, uint64_t))(v25 + 8))(v26, v27);
      v24(v15, v77, v22);
      uint64_t v29 = v67;
      uint64_t v30 = v65;
      uint64_t v31 = v68;
      (*(void (**)(char *, uint64_t, uint64_t))(v67 + 16))(v65, v56, v68);
      uint64_t v32 = *(unsigned __int8 *)(v29 + 80);
      unint64_t v33 = (v49 + v32) & ~v32;
      uint64_t v34 = swift_allocObject(v59, v33 + v66, v55 | v32 | 7);
      uint64_t v35 = v73;
      (*(void (**)(uint64_t, char *, uint64_t))(v73 + 32))(v34 + v51, v76, v78);
      *(void *)(v34 + v50) = v74;
      (*(void (**)(unint64_t, char *, uint64_t))(v29 + 32))(v34 + v33, v30, v31);
      aBlock[4] = v60;
      void aBlock[5] = v34;
      aBlock[0] = _NSConcreteStackBlock;
      aBlock[1] = 1107296256LL;
      aBlock[2] = sub_1001C31E8;
      aBlock[3] = v61;
      uint64_t v36 = _Block_copy(aBlock);
      uint64_t v37 = swift_retain();
      uint64_t v38 = v69;
      static DispatchQoS.unspecified.getter(v37);
      unint64_t v79 = _swiftEmptyArrayStorage;
      uint64_t v39 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v40 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v41 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v42 = v72;
      uint64_t v43 = v58;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v79, v40, v41, v6, v39);
      OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v38, v42, v36);
      uint64_t v44 = v36;
      unint64_t v23 = v77;
      uint64_t v22 = v78;
      _Block_release(v44);

      (*(void (**)(char *, uint64_t))(v43 + 8))(v42, v6);
      (*(void (**)(char *, uint64_t))(v70 + 8))(v38, v71);
      uint64_t v45 = *(void (**)(char *, uint64_t))(v35 + 8);
      uint64_t v46 = v75;
      uint64_t v15 = v76;
      v45(v23, v22);
      swift_release();
      v21 += v54;
      uint64_t v19 = v46 - 1;
    }

    while (v19);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_1005A1DC4(uint64_t a1, uint64_t a2, uint64_t a3, void (*a4)(uint64_t))
{
  uint64_t v6 = sub_100004AEC(&qword_10099D4A0);
  Subscription.subscriber.getter(v8, v6);
  sub_100012ED8(v8, v8[3]);
  a4(a3);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
}

uint64_t sub_1005A1E2C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v22[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v0 + 56));
  uint64_t v7 = static os_log_type_t.default.getter(v6);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  qword_100A2B030,  "SoundPlaybackCoordinator: allPlaybackEnded",  42LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v8 = v1 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playSoundTimer;
  swift_beginAccess(v1 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playSoundTimer, v25, 0LL, 0LL);
  sub_10001581C(v8, (uint64_t)&v26, &qword_1009B3D78);
  if (*((void *)&v27 + 1))
  {
    sub_100013044((uint64_t)&v26, (uint64_t)v22);
    sub_100015794((uint64_t)&v26, &qword_1009B3D78);
    uint64_t v9 = v23;
    uint64_t v10 = v24;
    sub_100012ED8(v22, v23);
    dispatch thunk of Cancellable.cancel()(v9, v10);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v22);
  }

  else
  {
    sub_100015794((uint64_t)&v26, &qword_1009B3D78);
  }

  uint64_t v28 = 0LL;
  __int128 v26 = 0u;
  __int128 v27 = 0u;
  swift_beginAccess(v8, v22, 33LL, 0LL);
  sub_1000D4D50((uint64_t)&v26, v8, &qword_1009B3D78);
  swift_endAccess(v22);
  if (qword_10099B300 != -1) {
    swift_once(&qword_10099B300, sub_1003459EC);
  }
  uint64_t v11 = qword_100A2A6C8;
  uint64_t v12 = v1 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier;
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL))(v5, v12, v13);
  Date.init()(v14);
  v5[*(int *)(v2 + 24)] = 27;
  uint64_t v15 = sub_100004AEC(&qword_10099D318);
  uint64_t v16 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v18 = swift_allocObject(v15, v17 + *(void *)(v3 + 72), v16 | 7);
  *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  sub_1003493A4((uint64_t)v5, v18 + v17);
  uint64_t v19 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v19);
  *(&v21 - 4) = v11;
  *(&v21 - 3) = v18;
  *(&v21 - 2) = 0LL;
  *(&v21 - 1) = 0LL;
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.BeaconObservationStore.save",  57LL,  2LL,  sub_1002DDE58);
  swift_bridgeObjectRelease();
  sub_100303000((uint64_t)v5);
  sub_1005A17F8();
  return sub_1005A181C();
}

uint64_t sub_1005A2110(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(v1 + 56));
  uint64_t v9 = static os_log_type_t.default.getter(v8);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  os_log(_:dso:log:_:_:)( v9,  &_mh_execute_header,  qword_100A2B030,  "SoundPlaybackCoordinator: requesting playSound()",  48LL,  2LL,  _swiftEmptyArrayStorage);
  type metadata accessor for Transaction(0LL);
  sub_100004AEC(&qword_1009A49B0);
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.SoundPlaybackCoordinator.playSound",  64LL,  2LL,  sub_1005A6CCC);
  swift_release();
  if (qword_10099B300 != -1) {
    swift_once(&qword_10099B300, sub_1003459EC);
  }
  uint64_t v10 = qword_100A2A6C8;
  uint64_t v11 = v2 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))(v7, v11, v12);
  Date.init()(v13);
  v7[*(int *)(v4 + 24)] = 24;
  uint64_t v14 = sub_100004AEC(&qword_10099D318);
  uint64_t v15 = *(void *)(v5 + 72);
  uint64_t v16 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v17 = (v16 + 32) & ~v16;
  uint64_t v18 = swift_allocObject(v14, v17 + v15, v16 | 7);
  *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v19 = sub_1003493A4((uint64_t)v7, v18 + v17);
  __chkstk_darwin(v19);
  *(&v38 - 4) = v10;
  *(&v38 - 3) = v18;
  uint64_t v36 = 0LL;
  uint64_t v37 = 0LL;
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.BeaconObservationStore.save",  57LL,  2LL,  sub_1002DDE58);
  swift_bridgeObjectRelease();
  sub_100303000((uint64_t)v7);
  uint64_t v20 = sub_1005A17F8();
  uint64_t v21 = dispatch thunk of Future.isFinished.getter(v20);
  if ((v21 & 1) != 0)
  {
    uint64_t v35 = static os_log_type_t.error.getter(v21);
    os_log(_:dso:log:_:_:)( v35,  &_mh_execute_header,  qword_100A2B030,  "SoundPlaybackCoordinator: Play called on an already started playback coordinator.",  81LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000047LL,  0x8000000100869570LL,  "searchpartyd/SoundPlaybackCoordinator.swift",  43LL,  2LL,  218LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t v22 = type metadata accessor for AnalyticsEvent(0LL);
    uint64_t v23 = (char *)swift_allocObject(v22, *(unsigned int *)(v22 + 48), *(unsigned __int16 *)(v22 + 52));
    swift_defaultActor_initialize(v23);
    unint64_t v24 = sub_10041271C((uint64_t)_swiftEmptyArrayStorage);
    *((void *)v23 + 14) = v24;
    UUID.init()(v24);
    uint64_t v25 = &v23[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
    uint64_t v26 = type metadata accessor for DispatchTime(0LL);
    __int128 v27 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL);
    v27(v25, 1LL, 1LL, v26);
    v27(&v23[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1LL, 1LL, v26);
    *((void *)v23 + 15) = 0xD00000000000002CLL;
    *((void *)v23 + swift_weakDestroy(v0 + 16) = 0x80000001008694A0LL;
    uint64_t v28 = (void *)swift_allocObject(&unk_100965DE8, 40LL, 7LL);
    v28[2] = v23;
    v28[3] = a1;
    v28[4] = v2;
    swift_retain();
    swift_retain();
    static Transaction.asyncTask(name:block:)("PlayAnalytics", 13LL, 2LL, &unk_1009B3D88, v28);
    swift_release();
    sub_1003E3114(v11);
    uint64_t v29 = swift_allocObject(&unk_100965C30, 24LL, 7LL);
    swift_weakInit(v29 + 16, v2);
    uint64_t v30 = swift_allocObject(&unk_100965E10, 32LL, 7LL);
    *(void *)(v30 + swift_weakDestroy(v0 + 16) = v23;
    *(void *)(v30 + 24) = v29;
    swift_retain();
    Future.addSuccess(block:)(sub_1005A6D70, v30);
    swift_release();
    swift_release();
    uint64_t v31 = swift_allocObject(&unk_100965C30, 24LL, 7LL);
    swift_weakInit(v31 + 16, v2);
    swift_retain();
    Future.addFailure(block:)(sub_1005A6D78, v31);
    swift_release();
    swift_release_n(v31, 2LL);
    uint64_t v32 = swift_allocObject(&unk_100965C30, 24LL, 7LL);
    swift_weakInit(v32 + 16, v2);
    uint64_t v33 = swift_allocObject(&unk_100965E38, 32LL, 7LL);
    *(void *)(v33 + swift_weakDestroy(v0 + 16) = v23;
    *(void *)(v33 + 24) = v32;
    swift_retain();
    Future.addCompletion(block:)(sub_1005A6D84, v33);
    swift_release();
    swift_release();
    swift_release();
    swift_release();
    return swift_release();
  }

  return result;
}

uint64_t sub_1005A2660(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v23 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess(a3 + 16, v26, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a3 + 16);
  if (result)
  {
    id v15 = *(id *)(result + 56);
    swift_release();
    uint64_t v16 = (void *)swift_allocObject(&unk_100965ED8, 40LL, 7LL);
    v16[2] = a4;
    v16[3] = a3;
    v16[4] = a2;
    aBlock[4] = sub_1005A6F24;
    void aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    aBlock[3] = &unk_100965EF0;
    uint64_t v17 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    uint64_t v18 = swift_errorRetain(a2);
    static DispatchQoS.unspecified.getter(v18);
    unint64_t v24 = _swiftEmptyArrayStorage;
    uint64_t v19 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v21 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v20, v21, v7, v19);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9, v17);
    _Block_release(v17);

    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v7);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return swift_release();
  }

  return result;
}

uint64_t sub_1005A28A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a2 + 16;
  Transaction.capture()();
  swift_beginAccess(v4, v8, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v4);
  if (result)
  {
    uint64_t v6 = *(void *)(result + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playCommandError);
    *(void *)(result + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playCommandError) = a3;
    swift_errorRetain(a3);
    swift_errorRelease(v6);
    uint64_t result = swift_release();
  }

  if (a3)
  {
    swift_beginAccess(v4, &v7, 0LL, 0LL);
    uint64_t result = swift_weakLoadStrong(v4);
    if (result)
    {
      sub_1005A1E2C();
      return swift_release();
    }
  }

  return result;
}

uint64_t sub_1005A295C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[6] = a2;
  v3[7] = a3;
  v3[5] = a1;
  unint64_t v5 = (*(void *)(*(void *)(sub_100004AEC(&qword_10099CA60) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[8] = swift_task_alloc(v5);
  v3[9] = swift_task_alloc(v5);
  return swift_task_switch(sub_1005A29D0, a1, 0LL);
}

uint64_t sub_1005A29D0(uint64_t a1)
{
  uint64_t v3 = v1[8];
  uint64_t v2 = v1[9];
  uint64_t v4 = v1[5];
  static DispatchTime.now()(a1);
  uint64_t v5 = type metadata accessor for DispatchTime(0LL);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v2, 0LL, 1LL, v5);
  sub_100015750(v2, v3, &qword_10099CA60);
  uint64_t v6 = v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess(v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime, v1 + 2, 33LL, 0LL);
  sub_1000D4D50(v3, v6, &qword_10099CA60);
  swift_endAccess(v1 + 2);
  return swift_task_switch(sub_1005A2AA0, 0LL, 0LL);
}

uint64_t sub_1005A2AA0()
{
  uint64_t v1 = *(void *)(v0 + 40);
  swift_retain();
  return swift_task_switch(sub_1005A2AE0, v1, 0LL);
}

uint64_t sub_1005A2AE0()
{
  uint64_t v1 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1005A2B44(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v56 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009A0E28);
  uint64_t inited = swift_initStackObject(v8, v58);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(inited + 32) = 0x6C4154556D6F7266LL;
  *(void *)(inited + 40) = 0xEB00000000747265LL;
  *(void *)(inited + 48) = a1 == 2;
  *(_BYTE *)(inited + 56) = 1;
  unint64_t v10 = sub_100412AA4(inited);
  uint64_t v11 = *(void **)(a2 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_targetBeacon);
  if (!v11) {
    return (id)v10;
  }
  id v12 = v11;
  id result = [v12 systemVersion];
  if (!result)
  {
    __break(1u);
    goto LABEL_17;
  }

  uint64_t v14 = (uint64_t)result;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v10);
  unint64_t v57 = v10;
  sub_10005C698(v14, 0, 0xD000000000000013LL, 0x8000000100857290LL, isUniquelyReferenced_nonNull_native);
  unint64_t v16 = v57;
  swift_bridgeObjectRelease();
  id result = [v12 systemVersion];
  if (!result)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t v17 = (uint64_t)result;
  char v18 = swift_isUniquelyReferenced_nonNull_native(v16);
  unint64_t v57 = v16;
  sub_10005C698(v17, 0, 0xD00000000000001BLL, 0x80000001008572B0LL, v18);
  unint64_t v19 = v57;
  swift_bridgeObjectRelease();
  id v20 = objc_msgSend(objc_allocWithZone(NSNumber), "initWithInteger:", objc_msgSend(v12, "batteryLevel"));
  char v21 = swift_isUniquelyReferenced_nonNull_native(v19);
  unint64_t v57 = v19;
  sub_10005C698((uint64_t)v20, 0, 0x4C79726574746162LL, 0xEC0000006C657665LL, v21);
  unint64_t v22 = v57;
  swift_bridgeObjectRelease();
  id v23 = SPBeaconTaskNameBeginLeashing;
  id v24 = [v12 taskInformation];
  type metadata accessor for SPBeaconTaskName(0LL);
  uint64_t v26 = v25;
  uint64_t v27 = sub_100022898(0LL, (unint64_t *)&unk_1009AE4B0, &OBJC_CLASS___SPBeaconTaskInformation_ptr);
  uint64_t v28 = sub_100007864( (unint64_t *)&qword_10099C3B0,  (uint64_t (*)(uint64_t))type metadata accessor for SPBeaconTaskName,  (uint64_t)&unk_1007E3C50);
  uint64_t v29 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)(v24, v26, v27, v28);

  if (*(void *)(v29 + 16) && (uint64_t v30 = sub_10030D388(v23), (v31 & 1) != 0))
  {
    id v32 = *(id *)(*(void *)(v29 + 56) + 8 * v30);

    swift_bridgeObjectRelease();
    id v33 = [v32 state];

    BOOL v34 = v33 == 0LL;
  }

  else
  {

    swift_bridgeObjectRelease();
    BOOL v34 = 0LL;
  }

  char v35 = swift_isUniquelyReferenced_nonNull_native(v22);
  unint64_t v57 = v22;
  sub_10005C698(v34, 1, 0x6563697665447369LL, 0xEF6465687361654CLL, v35);
  unint64_t v36 = v57;
  swift_bridgeObjectRelease();
  uint64_t v37 = [v12 connected];
  char v38 = swift_isUniquelyReferenced_nonNull_native(v36);
  unint64_t v57 = v36;
  sub_10005C698(v37, 1, 0xD000000000000011LL, 0x8000000100853CF0LL, v38);
  unint64_t v10 = v57;
  swift_bridgeObjectRelease();
  id v39 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v40 = [v39 isInternalBuild];

  if (!v40) {
    goto LABEL_14;
  }
  id result = [v12 name];
  if (result)
  {
    uint64_t v41 = (uint64_t)result;
    char v42 = swift_isUniquelyReferenced_nonNull_native(v10);
    unint64_t v57 = v10;
    sub_10005C698(v41, 0, 0xD000000000000010LL, 0x80000001008696B0LL, v42);
    unint64_t v43 = v57;
    swift_bridgeObjectRelease();
    id v44 = [v12 identifier];
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v44);

    UUID.uuidString.getter(v45);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    NSString v46 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    char v47 = swift_isUniquelyReferenced_nonNull_native(v43);
    unint64_t v57 = v43;
    sub_10005C698((uint64_t)v46, 0, 0x6544646572696170LL, 0xEE00444965636976LL, v47);
    unint64_t v10 = v57;
    swift_bridgeObjectRelease();
    id v48 = [v12 serialNumber];
    if (v48)
    {
      uint64_t v49 = (uint64_t)v48;
      char v50 = swift_isUniquelyReferenced_nonNull_native(v10);
      unint64_t v57 = v10;
      sub_10005C698(v49, 0, 0xD000000000000018LL, 0x8000000100853D10LL, v50);
      unint64_t v10 = v57;
      swift_bridgeObjectRelease();
    }

    id v51 = [v12 role];
    if (v51)
    {
      unsigned int v52 = v51;
      id v53 = [v51 role];

      static String._unconditionallyBridgeFromObjectiveC(_:)(v53);
      NSString v54 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      char v55 = swift_isUniquelyReferenced_nonNull_native(v10);
      unint64_t v57 = v10;
      sub_10005C698((uint64_t)v54, 0, 0xD000000000000010LL, 0x80000001008696D0LL, v55);
      unint64_t v10 = v57;

      swift_bridgeObjectRelease();
      return (id)v10;
    }

uint64_t sub_1005A3184(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v6);
  uint64_t v8 = &v19[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = &v19[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  int v14 = *a1;
  uint64_t v15 = a3 + 16;
  uint64_t v16 = static os_log_type_t.default.getter(v11);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  os_log(_:dso:log:_:_:)( v16,  &_mh_execute_header,  qword_100A2B030,  "#Durian: commandManager completed sound playback.",  49LL,  2LL,  _swiftEmptyArrayStorage);
  type metadata accessor for Transaction(0LL);
  swift_retain();
  static Transaction.asyncTask(name:block:)("PlayAnalytics", 13LL, 2LL, &unk_1009B3DA8, a2);
  swift_release();
  swift_beginAccess(v15, v20, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v15);
  if (!Strong)
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v8, 1LL, 1LL, v9);
    return sub_100015794((uint64_t)v8, &qword_10099D8A0);
  }

  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16))( v8,  Strong + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier,  v9);
  swift_release();
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v10 + 56))(v8, 0LL, 1LL, v9);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v13, v8, v9);
  swift_beginAccess(v15, v19, 0LL, 0LL);
  if (swift_weakLoadStrong(v15))
  {
    sub_1005A5A10(v14, (uint64_t)v13, 0LL);
    swift_release();
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
}

uint64_t sub_1005A33E4(uint64_t a1)
{
  v1[5] = a1;
  uint64_t v3 = sub_100004AEC(&qword_10099CA60);
  v1[6] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchTime(0LL);
  v1[7] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[8] = v5;
  void v1[9] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1005A346C, a1, 0LL);
}

uint64_t sub_1005A346C()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 40) + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess(v2, v0 + 16, 0LL, 0LL);
  sub_10001581C(v2, v1, &qword_10099CA60);
  return swift_task_switch(sub_1005A34DC, 0LL, 0LL);
}

uint64_t sub_1005A34DC()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 48);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) == 1)
  {
    sub_100015794(v3, &qword_10099CA60);
    uint64_t v4 = *(void *)(v0 + 48);
    swift_task_dealloc(*(void *)(v0 + 72));
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v6 = *(void *)(v0 + 72);
    uint64_t v7 = *(void *)(v0 + 40);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 32))(v6, v3, v1);
    uint64_t v8 = swift_task_alloc(32LL);
    *(void *)(v0 + 80) = v8;
    *(void *)(v8 + swift_weakDestroy(v0 + 16) = v6;
    return swift_task_switch(sub_1005A35B0, v7, 0LL);
  }

uint64_t sub_1005A35B0()
{
  return swift_task_switch(sub_1005A3630, 0LL, 0LL);
}

uint64_t sub_1005A3630()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 72));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1005A367C()
{
  uint64_t v0 = type metadata accessor for DispatchTime(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = &v11[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = static DispatchTime.now()(v2);
  unint64_t v6 = DispatchTime.uptimeNanoseconds.getter(v5);
  unint64_t result = DispatchTime.uptimeNanoseconds.getter(v6);
  if (v6 < result)
  {
    __break(1u);
  }

  else
  {
    uint64_t v8 = sub_100004AEC(&qword_1009A0E28);
    uint64_t inited = swift_initStackObject(v8, v11);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(inited + 32) = 0x4474736575716572LL;
    *(void *)(inited + 40) = 0xEF6E6F6974617275LL;
    *(NSNumber *)(inited + 48) = Double._bridgeToObjectiveC()();
    *(_BYTE *)(inited + 56) = 0;
    unint64_t v10 = sub_100412AA4(inited);
    (*(void (**)(_BYTE *, uint64_t))(v1 + 8))(v4, v0);
    return v10;
  }

  return result;
}

uint64_t sub_1005A37A4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v22 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v22 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a2 + 16;
  uint64_t v13 = static os_log_type_t.error.getter(v9);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v14 = qword_100A2B030;
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
  *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v23 = a1;
  swift_getErrorValue(a1, v27, v26);
  uint64_t v17 = Error.localizedDescription.getter(v26[1], v26[2]);
  uint64_t v19 = v18;
  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 64) = sub_1000226F4();
  *(void *)(v16 + 32) = v17;
  *(void *)(v16 + 40) = v19;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "#Durian: Error during play sound. Error - %@", 44LL, 2LL, v16);
  swift_bridgeObjectRelease();
  swift_beginAccess(v12, v25, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v12);
  if (!Strong)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1LL, 1LL, v7);
    return sub_100015794((uint64_t)v6, &qword_10099D8A0);
  }

  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))( v6,  Strong + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier,  v7);
  swift_release();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0LL, 1LL, v7);
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v11, v6, v7);
  swift_beginAccess(v12, v24, 0LL, 0LL);
  if (swift_weakLoadStrong(v12))
  {
    sub_1005A5A10(0, (uint64_t)v11, v23);
    swift_release();
  }

  return (*(uint64_t (**)(char *, uint64_t))(v8 + 8))(v11, v7);
}

uint64_t sub_1005A3A38(char *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v63 = a3;
  uint64_t v61 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v60 = *(void *)(v61 - 8);
  __chkstk_darwin(v61);
  uint64_t v59 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v58 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v57 = *(void *)(v58 - 8);
  __chkstk_darwin(v58);
  uint64_t v56 = (char *)&v53 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v53 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v65 = type metadata accessor for UUID(0LL);
  uint64_t v64 = *(void *)(v65 - 8);
  uint64_t v12 = __chkstk_darwin(v65);
  NSString v54 = (char *)&v53 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v14 = *a1;
  uint64_t v55 = a4;
  uint64_t v62 = a4 + 16;
  uint64_t v15 = static os_log_type_t.default.getter(v12);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v16 = qword_100A2B030;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v17, 112LL, 7LL);
  *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  char v19 = v14;
  LOBYTE(aBlock[0]) = v14;
  uint64_t v20 = sub_100004AEC(&qword_1009A6E20);
  uint64_t v21 = String.init<A>(describing:)(aBlock, v20);
  uint64_t v23 = v22;
  *(void *)(v18 + 56) = &type metadata for String;
  unint64_t v24 = sub_1000226F4();
  *(void *)(v18 + 64) = v24;
  *(void *)(v18 + 32) = v21;
  *(void *)(v18 + 40) = v23;
  aBlock[0] = a2;
  swift_errorRetain(a2);
  uint64_t v25 = sub_100004AEC(&qword_10099C678);
  uint64_t v26 = String.init<A>(describing:)(aBlock, v25);
  *(void *)(v18 + 96) = &type metadata for String;
  *(void *)(v18 + 104) = v24;
  *(void *)(v18 + 72) = v26;
  *(void *)(v18 + 80) = v27;
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v16,  "#Durian: Play sound completed with success [%@], error [%@]",  59LL,  2LL,  v18);
  swift_bridgeObjectRelease();
  if (!a2)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(SPCommandErrorDomain);
    goto LABEL_9;
  }

  swift_getErrorValue(a2, v69, v66);
  uint64_t v28 = Error.domain.getter(v67, v68);
  uint64_t v30 = v29;
  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPCommandErrorDomain);
  if (!v30)
  {
LABEL_9:
    uint64_t v33 = v65;
    uint64_t v34 = v64;
    uint64_t v35 = v63;
    uint64_t v36 = v62;
    swift_bridgeObjectRelease();
    goto LABEL_10;
  }

  uint64_t v33 = v65;
  uint64_t v34 = v64;
  uint64_t v35 = v63;
  uint64_t v36 = v62;
  if (v28 == v31 && v30 == v32)
  {
    swift_bridgeObjectRelease_n(v30, 2LL);
    goto LABEL_22;
  }

  char v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v30, v31, v32, 0LL);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v52 & 1) == 0)
  {
LABEL_10:
    char v37 = 0;
    goto LABEL_11;
  }

uint64_t sub_1005A40F0(uint64_t a1, char a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v4 + 161) = a4;
  *(_BYTE *)(v4 + 160) = a2;
  *(void *)(v4 + 40) = a1;
  *(void *)(v4 + 48) = a3;
  uint64_t v6 = type metadata accessor for DispatchTimeInterval(0LL);
  *(void *)(v4 + 56) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v4 + 64) = v7;
  *(void *)(v4 + 72) = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchTime(0LL);
  *(void *)(v4 + 80) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v4 + 88) = v9;
  *(void *)(v4 + 96) = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = (*(void *)(*(void *)(sub_100004AEC(&qword_10099CA60) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v4 + 104) = swift_task_alloc(v10);
  *(void *)(v4 + 112) = swift_task_alloc(v10);
  *(void *)(v4 + 120) = swift_task_alloc(v10);
  return swift_task_switch(sub_1005A41C4, a1, 0LL);
}

uint64_t sub_1005A41C4()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 40) + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess(v2, v0 + 16, 0LL, 0LL);
  sub_10001581C(v2, v1, &qword_10099CA60);
  return swift_task_switch(sub_1005A4238, 0LL, 0LL);
}

uint64_t sub_1005A4238()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 88);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1LL, v2) == 1)
  {
    sub_100015794(v1, &qword_10099CA60);
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 88) + 56LL))( *(void *)(v0 + 120),  1LL,  1LL,  *(void *)(v0 + 80));
    uint64_t v4 = *(void *)(v0 + 120);
    char v5 = *(_BYTE *)(v0 + 161);
    char v6 = *(_BYTE *)(v0 + 160);
    uint64_t v7 = *(void *)(v0 + 40);
    uint64_t v8 = *(void *)(v0 + 48);
    uint64_t v9 = swift_task_alloc(48LL);
    *(void *)(v0 + 136) = v9;
    *(_BYTE *)(v9 + swift_weakDestroy(v0 + 16) = v6;
    *(void *)(v9 + 24) = v8;
    *(_BYTE *)(v9 + 32) = v5;
    *(void *)(v9 + 40) = v4;
    unint64_t v10 = sub_1005A44EC;
    uint64_t v11 = v7;
  }

  else
  {
    uint64_t v12 = *(void *)(v0 + 40);
    (*(void (**)(void, uint64_t, uint64_t))(v3 + 32))(*(void *)(v0 + 96), v1, v2);
    unint64_t v10 = sub_1005A431C;
    uint64_t v11 = v12;
  }

  return swift_task_switch(v10, v11, 0LL);
}

uint64_t sub_1005A431C()
{
  *(void *)(v0 + 128) = sub_100706E4C(0x4474736575716572LL, 0xEF6E6F6974617275LL);
  return swift_task_switch(sub_1005A437C, 0LL, 0LL);
}

uint64_t sub_1005A437C()
{
  uint64_t v1 = *(void **)(v0 + 128);
  if (!v1) {
    goto LABEL_5;
  }
  uint64_t v2 = objc_opt_self(&OBJC_CLASS___NSNumber);
  uint64_t v3 = (void *)swift_dynamicCastObjCClass(v1, v2);
  if (!v3)
  {

LABEL_5:
    (*(void (**)(void, void))(*(void *)(v0 + 88) + 8LL))(*(void *)(v0 + 96), *(void *)(v0 + 80));
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 88) + 56LL))( *(void *)(v0 + 120),  1LL,  1LL,  *(void *)(v0 + 80));
    goto LABEL_6;
  }

  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 104);
  uint64_t v7 = *(void *)(v0 + 80);
  uint64_t v8 = *(void *)(v0 + 88);
  uint64_t v10 = *(void *)(v0 + 64);
  uint64_t v9 = *(void **)(v0 + 72);
  uint64_t v11 = *(void *)(v0 + 56);
  *uint64_t v9 = [v3 integerValue];
  (*(void (**)(void *, void, uint64_t))(v10 + 104))( v9,  enum case for DispatchTimeInterval.seconds(_:),  v11);
  DispatchTime.advanced(by:)(v9);

  (*(void (**)(void *, uint64_t))(v10 + 8))(v9, v11);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v5, v7);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v6, 0LL, 1LL, v7);
  sub_100015750(v6, v4, &qword_10099CA60);
LABEL_6:
  uint64_t v12 = *(void *)(v0 + 120);
  char v13 = *(_BYTE *)(v0 + 161);
  char v14 = *(_BYTE *)(v0 + 160);
  uint64_t v15 = *(void *)(v0 + 40);
  uint64_t v16 = *(void *)(v0 + 48);
  uint64_t v17 = swift_task_alloc(48LL);
  *(void *)(v0 + 136) = v17;
  *(_BYTE *)(v17 + swift_weakDestroy(v0 + 16) = v14;
  *(void *)(v17 + 24) = v16;
  *(_BYTE *)(v17 + 32) = v13;
  *(void *)(v17 + 40) = v12;
  return swift_task_switch(sub_1005A44EC, v15, 0LL);
}

uint64_t sub_1005A44EC()
{
  return swift_task_switch(sub_1005A456C, 0LL, 0LL);
}

uint64_t sub_1005A456C()
{
  uint64_t v1 = type metadata accessor for AnalyticsPublisher();
  uint64_t v2 = swift_allocObject(v1, 112LL, 15LL);
  v0[18] = v2;
  swift_defaultActor_initialize(v2);
  uint64_t v3 = (uint64_t **)swift_task_alloc(dword_1009BDE0C);
  v0[19] = (uint64_t)v3;
  *uint64_t v3 = v0;
  v3[1] = (uint64_t *)sub_1005A45D8;
  return sub_100713F88(v0[5]);
}

uint64_t sub_1005A45D8()
{
  return swift_task_switch(sub_1005A4634, 0LL, 0LL);
}

uint64_t sub_1005A4634()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 72);
  sub_100015794(v2, &qword_10099CA60);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1005A46B0(unsigned __int8 a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = sub_100004AEC(&qword_10099CA60);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v44 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchTime(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v44 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v44 - v16;
  uint64_t v18 = sub_100004AEC(&qword_1009A0E28);
  uint64_t inited = swift_initStackObject(v18, v51);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  *(void *)(inited + 32) = 0x6563637553736177LL;
  *(void *)(inited + 40) = 0xEA00000000007373LL;
  *(void *)(inited + 48) = a1 & (a2 == 0);
  *(_BYTE *)(inited + 56) = 1;
  *(void *)(inited + 64) = 0xD000000000000016LL;
  *(void *)(inited + 72) = 0x8000000100869600LL;
  *(void *)(inited + 80) = a3 & 1;
  *(_BYTE *)(inited + 88) = 1;
  unint64_t v20 = sub_100412AA4(inited);
  if (a2)
  {
    swift_getErrorValue(a2, v49, v48);
    uint64_t v21 = v48[1];
    uint64_t v22 = a2;
    uint64_t v45 = a2;
    uint64_t v23 = v10;
    uint64_t v24 = v11;
    uint64_t v25 = v12;
    uint64_t v26 = v17;
    uint64_t v27 = v15;
    uint64_t v28 = a4;
    uint64_t v29 = v48[2];
    swift_errorRetain(v22);
    uint64_t v30 = v29;
    a4 = v28;
    uint64_t v15 = v27;
    uint64_t v17 = v26;
    uint64_t v12 = v25;
    uint64_t v11 = v24;
    uint64_t v10 = v23;
    Error.domain.getter(v21, v30);
    NSString v31 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v20);
    unint64_t v50 = v20;
    sub_10005C698((uint64_t)v31, 0, 0x6D6F44726F727265LL, 0xEB000000006E6961LL, isUniquelyReferenced_nonNull_native);
    unint64_t v33 = v50;
    swift_bridgeObjectRelease();
    uint64_t v34 = v45;
    swift_getErrorValue(v45, v47, v46);
    Error.code.getter(v46[1], v46[2]);
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    char v36 = swift_isUniquelyReferenced_nonNull_native(v33);
    unint64_t v50 = v33;
    sub_10005C698((uint64_t)isa, 0, 0x646F43726F727265LL, 0xE900000000000065LL, v36);
    unint64_t v20 = v50;
    swift_bridgeObjectRelease();
    swift_errorRelease(v34);
  }

  sub_10001581C(a4, (uint64_t)v10, &qword_10099CA60);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v12 + 48))(v10, 1LL, v11) == 1)
  {
    sub_100015794((uint64_t)v10, &qword_10099CA60);
    return v20;
  }

  uint64_t v37 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 32))(v17, v10, v11);
  uint64_t v38 = static DispatchTime.now()(v37);
  unint64_t v39 = DispatchTime.uptimeNanoseconds.getter(v38);
  unint64_t result = DispatchTime.uptimeNanoseconds.getter(v39);
  if (v39 >= result)
  {
    Class v41 = Double._bridgeToObjectiveC()().super.super.isa;
    char v42 = swift_isUniquelyReferenced_nonNull_native(v20);
    unint64_t v50 = v20;
    sub_10005C698((uint64_t)v41, 0, 0xD000000000000010LL, 0x8000000100869620LL, v42);
    unint64_t v20 = v50;
    swift_bridgeObjectRelease();
    unint64_t v43 = *(void (**)(char *, uint64_t))(v12 + 8);
    v43(v15, v11);
    v43(v17, v11);
    return v20;
  }

  __break(1u);
  return result;
}

uint64_t sub_1005A4A50(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v3, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v1);
  if (result)
  {
    sub_1005A1E2C();
    return swift_release();
  }

  return result;
}

uint64_t sub_1005A4AA4()
{
  uint64_t v1 = v0;
  uint64_t v56 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v58 = *(void *)(v56 - 8);
  __chkstk_darwin(v56);
  uint64_t v48 = (char *)&v47 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v60 = *(void *)(v3 - 8);
  uint64_t v61 = v3;
  __chkstk_darwin(v3);
  uint64_t v59 = (char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = type metadata accessor for DispatchTimeInterval(0LL);
  uint64_t v53 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  char v52 = (uint64_t *)((char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v57 = type metadata accessor for DispatchTime(0LL);
  uint64_t v51 = *(void *)(v57 - 8);
  uint64_t v6 = __chkstk_darwin(v57);
  uint64_t v49 = (char *)&v47 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  unint64_t v50 = (char *)&v47 - v8;
  uint64_t v9 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v47 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  dispatch_queue_t v55 = *(dispatch_queue_t *)(v0 + 56);
  dispatch_assert_queue_V2(v55);
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  qword_100A2B030,  "SoundPlaybackCoordinator: requesting stopSound()",  48LL,  2LL,  _swiftEmptyArrayStorage);
  type metadata accessor for Transaction(0LL);
  sub_100004AEC(&qword_1009A49B0);
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.SoundPlaybackCoordinator.stopSound",  64LL,  2LL,  sub_1005A6C60);
  swift_release();
  uint64_t v15 = v1 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playSoundTimer;
  swift_beginAccess(v1 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playSoundTimer, v69, 0LL, 0LL);
  sub_10001581C(v15, (uint64_t)&aBlock, &qword_1009B3D78);
  if (*((void *)&v66 + 1))
  {
    sub_100013044((uint64_t)&aBlock, (uint64_t)v62);
    sub_100015794((uint64_t)&aBlock, &qword_1009B3D78);
    uint64_t v16 = v9;
    uint64_t v18 = v63;
    uint64_t v17 = v64;
    sub_100012ED8(v62, v63);
    uint64_t v19 = v17;
    uint64_t v9 = v16;
    dispatch thunk of Cancellable.cancel()(v18, v19);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v62);
  }

  else
  {
    sub_100015794((uint64_t)&aBlock, &qword_1009B3D78);
  }

  uint64_t v67 = 0LL;
  __int128 aBlock = 0u;
  __int128 v66 = 0u;
  swift_beginAccess(v15, v62, 33LL, 0LL);
  sub_1000D4D50((uint64_t)&aBlock, v15, &qword_1009B3D78);
  swift_endAccess(v62);
  if (qword_10099B300 != -1) {
    swift_once(&qword_10099B300, sub_1003459EC);
  }
  uint64_t v20 = qword_100A2A6C8;
  uint64_t v21 = v1 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier;
  uint64_t v22 = type metadata accessor for UUID(0LL);
  uint64_t v23 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v22 - 8) + 16LL))(v12, v21, v22);
  Date.init()(v23);
  v12[*(int *)(v9 + 24)] = 26;
  uint64_t v24 = sub_100004AEC(&qword_10099D318);
  uint64_t v25 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v26 = (v25 + 32) & ~v25;
  uint64_t v27 = swift_allocObject(v24, v26 + *(void *)(v10 + 72), v25 | 7);
  *(_OWORD *)(v27 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v28 = sub_1003493A4((uint64_t)v12, v27 + v26);
  __chkstk_darwin(v28);
  *(&v47 - 4) = v20;
  *(&v47 - 3) = v27;
  *(&v47 - 2) = 0LL;
  *(&v47 - 1) = 0LL;
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.BeaconObservationStore.save",  57LL,  2LL,  sub_1000DF788);
  swift_bridgeObjectRelease();
  sub_100303000((uint64_t)v12);
  sub_1005A17F8();
  sub_1003E3388(v21);
  swift_retain();
  Future.addCompletion(block:)(sub_1005A6C90, v1);
  swift_release();
  uint64_t v29 = swift_release();
  uint64_t v30 = v49;
  static DispatchTime.now()(v29);
  NSString v31 = v52;
  *char v52 = 8LL;
  uint64_t v32 = v53;
  uint64_t v33 = v54;
  (*(void (**)(void *, void, uint64_t))(v53 + 104))( v31,  enum case for DispatchTimeInterval.seconds(_:),  v54);
  uint64_t v34 = v50;
  + infix(_:_:)(v30, v31);
  (*(void (**)(void *, uint64_t))(v32 + 8))(v31, v33);
  uint64_t v35 = *(void (**)(char *, uint64_t))(v51 + 8);
  uint64_t v36 = v57;
  v35(v30, v57);
  uint64_t v67 = sub_1005A6C98;
  uint64_t v68 = v1;
  *(void *)&__int128 aBlock = _NSConcreteStackBlock;
  *((void *)&aBlock + 1) = 1107296256LL;
  *(void *)&__int128 v66 = sub_1001C31E8;
  *((void *)&v66 + 1) = &unk_100965D38;
  uint64_t v37 = _Block_copy(&aBlock);
  uint64_t v38 = swift_retain();
  unint64_t v39 = v59;
  static DispatchQoS.unspecified.getter(v38);
  v62[0] = _swiftEmptyArrayStorage;
  uint64_t v40 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v42 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  unint64_t v43 = v48;
  uint64_t v44 = v41;
  uint64_t v45 = v56;
  dispatch thunk of SetAlgebra.init<A>(_:)(v62, v44, v42, v56, v40);
  OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v34, v39, v43, v37);
  _Block_release(v37);
  swift_release();
  (*(void (**)(char *, uint64_t))(v58 + 8))(v43, v45);
  (*(void (**)(char *, uint64_t))(v60 + 8))(v39, v61);
  v35(v34, v36);
  return swift_release();
}

uint64_t sub_1005A512C@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X3>, uint64_t a4@<X4>, uint64_t *a5@<X8>)
{
  uint64_t v10 = swift_allocObject(&unk_100965C30, 24LL, 7LL);
  swift_weakInit(v10 + 16, a2);
  uint64_t v11 = swift_allocObject(a3, 32LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v10;
  *(void *)(v11 + 24) = a1;
  swift_retain(a1);
  uint64_t v12 = Future.addCompletion(block:)(a4, v11);
  uint64_t result = swift_release(v11);
  *a5 = v12;
  return result;
}

uint64_t sub_1005A51E0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v23 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v22 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_beginAccess(a3 + 16, v26, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a3 + 16);
  if (result)
  {
    id v15 = *(id *)(result + 56);
    swift_release();
    uint64_t v16 = (void *)swift_allocObject(&unk_100965D98, 40LL, 7LL);
    v16[2] = a4;
    v16[3] = a2;
    v16[4] = a3;
    aBlock[4] = sub_1005A6CC0;
    void aBlock[5] = v16;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    aBlock[3] = &unk_100965DB0;
    uint64_t v17 = _Block_copy(aBlock);
    swift_retain();
    swift_errorRetain(a2);
    uint64_t v18 = swift_retain();
    static DispatchQoS.unspecified.getter(v18);
    uint64_t v24 = _swiftEmptyArrayStorage;
    uint64_t v19 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v21 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    dispatch thunk of SetAlgebra.init<A>(_:)(&v24, v20, v21, v7, v19);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9, v17);
    _Block_release(v17);

    (*(void (**)(char *, uint64_t))(v23 + 8))(v9, v7);
    (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
    return swift_release();
  }

  return result;
}

uint64_t sub_1005A5424(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a3 + 16;
  Transaction.capture()();
  if (!a2)
  {
    swift_beginAccess(v4, v9, 0LL, 0LL);
    uint64_t result = swift_weakLoadStrong(v4);
    if (!result) {
      return result;
    }
    sub_1005A1E2C();
    return swift_release();
  }

  swift_beginAccess(v4, v9, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v4);
  if (Strong)
  {
    uint64_t v6 = *(void *)(Strong + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopCommandError);
    *(void *)(Strong + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopCommandError) = a2;
    swift_errorRetain(a2);
    swift_errorRetain(a2);
    swift_errorRelease(v6);
    swift_release();
  }

  else
  {
    swift_errorRetain(a2);
  }

  swift_beginAccess(v4, &v8, 0LL, 0LL);
  if (swift_weakLoadStrong(v4))
  {
    sub_1005A17F8();
    swift_errorRelease(a2);
    return swift_release();
  }

  return swift_errorRelease(a2);
}

uint64_t sub_1005A5520(char *a1, uint64_t a2, uint64_t a3)
{
  if (a2)
  {
    uint64_t v5 = swift_errorRetain(a2);
    uint64_t v6 = static os_log_type_t.error.getter(v5);
    if (qword_10099B720 != -1) {
      swift_once(&qword_10099B720, sub_10065128C);
    }
    uint64_t v7 = qword_100A2B030;
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
    *(_OWORD *)(v9 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    swift_getErrorValue(a2, v18, v17);
    uint64_t v10 = Error.localizedDescription.getter(v17[1], v17[2]);
    uint64_t v12 = v11;
    *(void *)(v9 + 56) = &type metadata for String;
    *(void *)(v9 + 64) = sub_1000226F4();
    *(void *)(v9 + 32) = v10;
    *(void *)(v9 + 40) = v12;
    os_log(_:dso:log:_:_:)(v6, &_mh_execute_header, v7, "#Durian: Error during stop sound. Error - %@", 44LL, 2LL, v9);
    swift_bridgeObjectRelease();
    uint64_t v13 = a3 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier;
    swift_errorRetain(a2);
    sub_1005A5BA0(0, v13, a2);
    swift_errorRelease(a2);
    return swift_errorRelease(a2);
  }

  else
  {
    char v15 = *a1;
    uint64_t v16 = static os_log_type_t.default.getter(a1);
    if (qword_10099B720 != -1) {
      swift_once(&qword_10099B720, sub_10065128C);
    }
    os_log(_:dso:log:_:_:)( v16,  &_mh_execute_header,  qword_100A2B030,  "SoundPlaybackCoordinator: sound stopped successfully.",  53LL,  2LL,  _swiftEmptyArrayStorage);
    return sub_1005A5BA0(v15 & 1, a3 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier, 0LL);
  }

void sub_1005A56F4(uint64_t a1)
{
  uint64_t v1 = static os_log_type_t.default.getter(a1);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  os_log(_:dso:log:_:_:)( v1,  &_mh_execute_header,  qword_100A2B030,  "SoundPlaybackCoordinator: timeout block.",  40LL,  2LL,  _swiftEmptyArrayStorage);
  type metadata accessor for SPOwnerSessionError(0LL);
  uint64_t v3 = v2;
  uint64_t v7 = 4LL;
  unint64_t v4 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v5 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
  _BridgedStoredNSError.init(_:userInfo:)(&v8, &v7, v4, v3, v5);
  uint64_t v6 = v8;
  Future.finish(error:)(v8);
}

void sub_1005A57FC(uint64_t a1, char a2, uint64_t a3, void *a4)
{
  if (a4)
  {
    uint64_t v8 = swift_errorRetain(a4);
    uint64_t v9 = static os_log_type_t.error.getter(v8);
    if (qword_10099B720 != -1) {
      swift_once(&qword_10099B720, sub_10065128C);
    }
    uint64_t v10 = qword_100A2B030;
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v12 = swift_allocObject(v11, 112LL, 7LL);
    *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    uint64_t v13 = type metadata accessor for UUID(0LL);
    uint64_t v14 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v13, v14);
    uint64_t v17 = v16;
    *(void *)(v12 + 56) = &type metadata for String;
    unint64_t v18 = sub_1000226F4();
    *(void *)(v12 + 64) = v18;
    *(void *)(v12 + 32) = v15;
    *(void *)(v12 + 40) = v17;
    uint64_t v28 = a4;
    swift_errorRetain(a4);
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v20 = String.init<A>(describing:)(&v28, v19);
    *(void *)(v12 + 96) = &type metadata for String;
    *(void *)(v12 + 104) = v18;
    *(void *)(v12 + 72) = v20;
    *(void *)(v12 + 80) = v21;
    os_log(_:dso:log:_:_:)( v9,  &_mh_execute_header,  v10,  "SoundPlaybackCoordinator: Command failed on device UUID %@ error: %@",  68LL,  2LL,  v12);
    swift_bridgeObjectRelease();
    Future.finish(error:)(a4);
    swift_errorRelease(a4);
  }

  else if ((a2 & 1) != 0)
  {
    Future.finish(result:)(a3);
  }

  else
  {
    type metadata accessor for SPOwnerSessionError(0LL);
    uint64_t v23 = v22;
    uint64_t v27 = 0LL;
    unint64_t v24 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v25 = sub_100007864( &qword_10099C0D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPOwnerSessionError,  (uint64_t)&unk_1007E3A90);
    _BridgedStoredNSError.init(_:userInfo:)(&v28, &v27, v24, v23, v25);
    uint64_t v26 = v28;
    Future.finish(error:)(v28);
  }

uint64_t sub_1005A5A10(int a1, uint64_t a2, uint64_t a3)
{
  return sub_1005A5BBC(a1, a2, a3, (uint64_t)&unk_100965CF8, (uint64_t)sub_1005A6BF4, (uint64_t)&unk_100965D10);
}

uint64_t sub_1005A5A2C(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  char v7 = a1;
  unsigned int v20 = static os_log_type_t.default.getter(a1);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v8 = qword_100A2B030;
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v10 = swift_allocObject(v9, 152LL, 7LL);
  *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = xmmword_1007E4050;
  *(void *)(v10 + 56) = &type metadata for Bool;
  *(void *)(v10 + 64) = &protocol witness table for Bool;
  char v11 = v7 & 1;
  *(_BYTE *)(v10 + 32) = v11;
  uint64_t v12 = UUID.uuidString.getter(v10);
  uint64_t v14 = v13;
  *(void *)(v10 + 96) = &type metadata for String;
  unint64_t v15 = sub_1000226F4();
  *(void *)(v10 + 104) = v15;
  *(void *)(v10 + 72) = v12;
  *(void *)(v10 + 80) = v14;
  uint64_t v21 = a3;
  swift_errorRetain(a3);
  uint64_t v16 = sub_100004AEC(&qword_10099C678);
  uint64_t v17 = String.init<A>(describing:)(&v21, v16);
  *(void *)(v10 + 136) = &type metadata for String;
  *(void *)(v10 + 144) = v15;
  *(void *)(v10 + 112) = v17;
  *(void *)(v10 + 120) = v18;
  os_log(_:dso:log:_:_:)( v20,  &_mh_execute_header,  v8,  "SoundPlaybackCoordinator: startPlayingSound completed %i %@ %@",  62LL,  2LL,  v10);
  swift_bridgeObjectRelease();
  sub_1005A57FC(*(void *)(a4 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playFuture), v11, a2, a3);
  return sub_1005A17F8();
}

uint64_t sub_1005A5BA0(int a1, uint64_t a2, uint64_t a3)
{
  return sub_1005A5BBC(a1, a2, a3, (uint64_t)&unk_100965CA8, (uint64_t)sub_1005A6B58, (uint64_t)&unk_100965CC0);
}

uint64_t sub_1005A5BBC(int a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v36 = a5;
  uint64_t v37 = a6;
  uint64_t v33 = a4;
  uint64_t v7 = v6;
  uint64_t v35 = a3;
  int v34 = a1;
  uint64_t v39 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v42 = *(void *)(v39 - 8);
  __chkstk_darwin(v39);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v40 = *(void *)(v11 - 8);
  uint64_t v41 = v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v38 = *(void *)(v7 + 56);
  (*(void (**)(char *, uint64_t, uint64_t))(v15 + 16))(v17, a2, v14);
  uint64_t v18 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v19 = (v18 + 17) & ~v18;
  unint64_t v20 = (v16 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v22 = swift_allocObject(v33, v21 + 8, v18 | 7);
  *(_BYTE *)(v22 + swift_weakDestroy(v0 + 16) = v34;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v22 + v19, v17, v14);
  uint64_t v24 = v35;
  uint64_t v23 = v36;
  *(void *)(v22 + v20) = v35;
  *(void *)(v22 + v21) = v7;
  aBlock[4] = v23;
  void aBlock[5] = v22;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = v37;
  uint64_t v25 = _Block_copy(aBlock);
  swift_errorRetain(v24);
  uint64_t v26 = swift_retain();
  static DispatchQoS.unspecified.getter(v26);
  unint64_t v43 = _swiftEmptyArrayStorage;
  uint64_t v27 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v28 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v29 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v30 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v43, v28, v29, v39, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v10, v25);
  _Block_release(v25);
  (*(void (**)(char *, uint64_t))(v42 + 8))(v10, v30);
  (*(void (**)(char *, uint64_t))(v40 + 8))(v13, v41);
  return swift_release();
}

void sub_1005A5E50(uint64_t a1, uint64_t a2, void *a3, uint64_t a4)
{
  char v7 = a1;
  unsigned int v19 = static os_log_type_t.default.getter(a1);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v8 = qword_100A2B030;
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v10 = swift_allocObject(v9, 152LL, 7LL);
  *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = xmmword_1007E4050;
  *(void *)(v10 + 56) = &type metadata for Bool;
  *(void *)(v10 + 64) = &protocol witness table for Bool;
  char v11 = v7 & 1;
  *(_BYTE *)(v10 + 32) = v11;
  uint64_t v12 = UUID.uuidString.getter(v10);
  uint64_t v14 = v13;
  *(void *)(v10 + 96) = &type metadata for String;
  unint64_t v15 = sub_1000226F4();
  *(void *)(v10 + 104) = v15;
  *(void *)(v10 + 72) = v12;
  *(void *)(v10 + 80) = v14;
  unint64_t v20 = a3;
  swift_errorRetain(a3);
  uint64_t v16 = sub_100004AEC(&qword_10099C678);
  uint64_t v17 = String.init<A>(describing:)(&v20, v16);
  *(void *)(v10 + 136) = &type metadata for String;
  *(void *)(v10 + 144) = v15;
  *(void *)(v10 + 112) = v17;
  *(void *)(v10 + 120) = v18;
  os_log(_:dso:log:_:_:)( v19,  &_mh_execute_header,  v8,  "SoundPlaybackCoordinator: stopPlayingSound completed %i %@ %@",  61LL,  2LL,  v10);
  swift_bridgeObjectRelease();
  sub_1005A57FC(*(void *)(a4 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopFuture), v11, a2, a3);
}

uint64_t sub_1005A5FC0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v6 = sub_100004AEC(&qword_10099D4A0);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v19[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  sub_100013044(a1, (uint64_t)v19);
  uint64_t v10 = swift_allocObject(&unk_100965C30, 24LL, 7LL);
  swift_weakInit(v10 + 16, a2);
  uint64_t v11 = sub_100004AEC(&qword_1009B3D68);
  Subscription.init(subscriber:unsubscribeBlock:)(v19, sub_1005A6A5C, v10, v11);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, a3, v6);
  uint64_t v12 = (unint64_t *)(a2 + 72);
  swift_beginAccess(a2 + 72, v19, 33LL, 0LL);
  unint64_t v13 = *(void *)(a2 + 72);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
  *(void *)(a2 + 72) = v13;
  if ((isUniquelyReferenced_nonNull_native & 1) == 0)
  {
    unint64_t v13 = sub_1004C6934(0, *(void *)(v13 + 16) + 1LL, 1, v13);
    *uint64_t v12 = v13;
  }

  unint64_t v16 = *(void *)(v13 + 16);
  unint64_t v15 = *(void *)(v13 + 24);
  if (v16 >= v15 >> 1)
  {
    unint64_t v13 = sub_1004C6934(v15 > 1, v16 + 1, 1, v13);
    *uint64_t v12 = v13;
  }

  *(void *)(v13 + swift_weakDestroy(v0 + 16) = v16 + 1;
  (*(void (**)(unint64_t, _BYTE *, uint64_t))(v7 + 32))( v13 + ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
  + *(void *)(v7 + 72) * v16,
    v9,
    v6);
  return swift_endAccess(v19);
}

uint64_t sub_1005A616C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v3);
  if (result)
  {
    sub_1005A61DC(a1);
    return swift_release();
  }

  return result;
}

uint64_t sub_1005A61DC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v24 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v22 = *(void *)(v6 - 8);
  uint64_t v23 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_10099D4A0);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void *)(v10 + 64);
  __chkstk_darwin(v9);
  v21[1] = *(void *)(v1 + 64);
  (*(void (**)(char *, uint64_t, uint64_t))(v10 + 16))( (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v9);
  uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v13 = (v12 + 24) & ~v12;
  uint64_t v14 = swift_allocObject(&unk_100965C58, v13 + v11, v12 | 7);
  *(void *)(v14 + swift_weakDestroy(v0 + 16) = v1;
  (*(void (**)(uint64_t, char *, uint64_t))(v10 + 32))( v14 + v13,  (char *)v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v9);
  aBlock[4] = sub_1005A6AEC;
  void aBlock[5] = v14;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100965C70;
  unint64_t v15 = _Block_copy(aBlock);
  uint64_t v16 = swift_retain();
  static DispatchQoS.unspecified.getter(v16);
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v17 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v19 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v18, v19, v3, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v5, v15);
  _Block_release(v15);
  (*(void (**)(char *, uint64_t))(v24 + 8))(v5, v3);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v8, v23);
  return swift_release();
}

uint64_t sub_1005A6444(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a1 + 72);
  _OWORD v6[2] = a2;
  swift_bridgeObjectRetain(v4);
  *(void *)(a1 + 72) = sub_100024534((uint64_t (*)(char *))sub_1005A6B38, (uint64_t)v6, v4);
  return swift_bridgeObjectRelease();
}

BOOL sub_1005A64C0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099D4A0);
  uint64_t v5 = sub_1000372EC(&qword_1009B3D70, &qword_10099D4A0, (uint64_t)&protocol conformance descriptor for Subscription<A>);
  return (dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, v5) & 1) == 0;
}

uint64_t sub_1005A6544()
{
  swift_bridgeObjectRelease();
  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_beaconIdentifier;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);

  swift_release();
  swift_release();
  sub_100015794(v0 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playCommandIdentifier, &qword_10099D8A0);
  sub_100015794(v0 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopCommandIdentifier, &qword_10099D8A0);
  swift_errorRelease(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playCommandError));
  swift_errorRelease(*(void *)(v0 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_stopCommandError));
  sub_100015794(v0 + OBJC_IVAR____TtC12searchpartyd24SoundPlaybackCoordinator_playSoundTimer, &qword_1009B3D78);
  return v0;
}

uint64_t sub_1005A6640()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1005A6664()
{
  return type metadata accessor for SoundPlaybackCoordinator(0LL);
}

uint64_t type metadata accessor for SoundPlaybackCoordinator(uint64_t a1)
{
  uint64_t result = qword_1009B3B60;
  if (!qword_1009B3B60) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SoundPlaybackCoordinator);
  }
  return result;
}

void sub_1005A66A8(uint64_t a1)
{
  v6[0] = "(";
  v6[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  _OWORD v6[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v6[3] = (char *)&value witness table for Builtin.BridgeObject + 64;
  uint64_t v2 = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    void v6[4] = *(void *)(v2 - 8) + 64LL;
    void v6[5] = &unk_1008088C8;
    v6[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    v6[7] = (char *)&value witness table for Builtin.NativeObject + 64;
    sub_1004A3F40(319LL);
    if (v5 <= 0x3F)
    {
      uint64_t v7 = *(void *)(v4 - 8) + 64LL;
      uint64_t v8 = v7;
      uint64_t v9 = &unk_1008088C8;
      uint64_t v10 = &unk_1008088C8;
      uint64_t v11 = &unk_1008088E0;
      swift_updateClassMetadata2(a1, 256LL, 13LL, v6, a1 + 80);
    }
  }

uint64_t sub_1005A677C()
{
  uint64_t v1 = *v0;
  swift_beginAccess(*v0 + 72, v3, 0LL, 0LL);
  return swift_bridgeObjectRetain(*(void *)(v1 + 72));
}

uint64_t sub_1005A67BC(uint64_t a1)
{
  uint64_t v3 = *v1;
  swift_beginAccess(v3 + 72, v6, 1LL, 0LL);
  uint64_t v4 = *(void *)(v3 + 72);
  *(void *)(v3 + 72) = a1;
  return swift_bridgeObjectRelease(v4);
}

uint64_t (*sub_1005A6804(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

uint64_t sub_1005A6844(uint64_t a1)
{
  uint64_t v2 = *v1;
  _OWORD v5[2] = a1;
  v5[3] = v2;
  uint64_t v3 = sub_100004AEC(&qword_10099D4A0);
  return OS_dispatch_queue.sync<A>(execute:)(sub_1001B2454, v5, v3);
}

uint64_t sub_1005A68A4()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x80000001008691F0LL;
  v4._countAndFlagsBits = 0xD000000000000013LL;
  String.append(_:)(v4);
  uint64_t v5 = sub_100022898(0LL, (unint64_t *)&unk_1009AE4B0, &OBJC_CLASS___SPBeaconTaskInformation_ptr);
  OS_dispatch_queue.sync<A>(execute:)(sub_1002D7314, v0, v5);
  id v6 = [v13 debugDescription];

  uint64_t v7 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v9 = v8;

  v10._countAndFlagsBits = v7;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 62LL;
  v11._object = (void *)0xE100000000000000LL;
  String.append(_:)(v11);
  return 0x496E6F636165623CLL;
}

uint64_t sub_1005A6A18()
{
  return sub_1005A68A4();
}

uint64_t sub_1005A6A38()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1005A6A5C(uint64_t a1)
{
  return sub_1005A616C(a1, v1);
}

uint64_t sub_1005A6A74()
{
  uint64_t v1 = sub_100004AEC(&qword_10099D4A0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1005A6AEC()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(sub_100004AEC(&qword_10099D4A0) - 8) + 80LL);
  return sub_1005A6444(*(void *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1005A6B20(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1005A6B30(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

BOOL sub_1005A6B38(uint64_t a1)
{
  return sub_1005A64C0(a1, *(void *)(v1 + 16));
}

uint64_t sub_1005A6B58()
{
  return sub_1005A6C00((uint64_t (*)(void, unint64_t, void, void))sub_1005A5E50);
}

uint64_t sub_1005A6B68()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 17) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_errorRelease(*(void *)(v0 + v6));
  swift_release(*(void *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_1005A6BF4()
{
  return sub_1005A6C00((uint64_t (*)(void, unint64_t, void, void))sub_1005A5A2C);
}

uint64_t sub_1005A6C00(uint64_t (*a1)(void, unint64_t, void, void))
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 17LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return a1( *(unsigned __int8 *)(v1 + 16),  v1 + v3,  *(void *)(v1 + v4),  *(void *)(v1 + ((v4 + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1005A6C60@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1005A512C(a1, v2, (uint64_t)&unk_100965D70, (uint64_t)sub_1005A6CA4, a2);
}

uint64_t sub_1005A6C90(char *a1, uint64_t a2)
{
  return sub_1005A5520(a1, a2, v2);
}

void sub_1005A6C98()
{
}

uint64_t sub_1005A6CA4(uint64_t a1, uint64_t a2)
{
  return sub_1005A51E0(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1005A6CAC()
{
  return sub_1005A6ED8((void (*)(void))&_swift_errorRelease, (void (*)(void))&_swift_release);
}

uint64_t sub_1005A6CC0()
{
  return sub_1005A5424(v0[2], v0[3], v0[4]);
}

uint64_t sub_1005A6CCC@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  return sub_1005A512C(a1, v2, (uint64_t)&unk_100965EB0, (uint64_t)sub_1005A6EBC, a2);
}

uint64_t sub_1005A6CFC()
{
  return sub_1005A6D9C((void (*)(void))&_swift_release, 40LL);
}

uint64_t sub_1005A6D0C()
{
  uint64_t v2 = v0[2];
  uint64_t v3 = v0[3];
  uint64_t v4 = v0[4];
  uint64_t v5 = (void *)swift_task_alloc(dword_1009B3D84);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100015D58;
  return sub_1005A295C(v2, v3, v4);
}

uint64_t sub_1005A6D70(unsigned __int8 *a1)
{
  return sub_1005A3184(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1005A6D78(uint64_t a1)
{
  return sub_1005A37A4(a1, v1);
}

uint64_t sub_1005A6D84(char *a1, uint64_t a2)
{
  return sub_1005A3A38(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1005A6D8C()
{
  return sub_1005A6D9C((void (*)(void))&_swift_errorRelease, 41LL);
}

uint64_t sub_1005A6D9C(void (*a1)(void), uint64_t a2)
{
  return swift_deallocObject(v2, a2, 7LL);
}

uint64_t sub_1005A6DE0()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 32);
  char v4 = *(_BYTE *)(v0 + 40);
  char v5 = *(_BYTE *)(v0 + 24);
  unint64_t v6 = (void *)swift_task_alloc(dword_1009B3D94);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v6;
  *unint64_t v6 = v1;
  v6[1] = sub_1000159BC;
  return sub_1005A40F0(v2, v5, v3, v4);
}

uint64_t sub_1005A6E4C()
{
  return sub_1005A4A50(v0);
}

unint64_t sub_1005A6E54()
{
  return sub_1005A46B0(*(_BYTE *)(v0 + 16), *(void *)(v0 + 24), *(_BYTE *)(v0 + 32), *(void *)(v0 + 40));
}

uint64_t sub_1005A6E68()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_1009B3DA4);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100015D58;
  return sub_1005A33E4(v0);
}

unint64_t sub_1005A6EB0()
{
  return sub_1005A367C();
}

uint64_t sub_1005A6EBC(uint64_t a1, uint64_t a2)
{
  return sub_1005A2660(a1, a2, *(void *)(v2 + 16), *(void *)(v2 + 24));
}

uint64_t sub_1005A6EC4()
{
  return sub_1005A6ED8((void (*)(void))&_swift_release, (void (*)(void))&_swift_errorRelease);
}

uint64_t sub_1005A6ED8(void (*a1)(void), void (*a2)(void))
{
  return swift_deallocObject(v2, 40LL, 7LL);
}

uint64_t sub_1005A6F24()
{
  return sub_1005A28A4(v0[2], v0[3], v0[4]);
}

uint64_t sub_1005A6F30@<X0>(void *a1@<X8>)
{
  return sub_1005A6F54(a1);
}

uint64_t sub_1005A6F48()
{
  return sub_1005A707C((void (*)(uint64_t))sub_1001B0BAC);
}

uint64_t sub_1005A6F54@<X0>(void *a1@<X8>)
{
  uint64_t v3 = *(void *)(v1 + 72);
  *a1 = v3;
  return swift_bridgeObjectRetain(v3);
}

uint64_t sub_1005A6FA4()
{
  uint64_t v1 = sub_100004AEC(&qword_10099D4A0);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 8) & ~v8;
  uint64_t v10 = v9 + *(void *)(v7 + 64);
  uint64_t v11 = v3 | v8 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v0 + v9, v6);
  return swift_deallocObject(v0, v10, v11);
}

uint64_t sub_1005A7070()
{
  return sub_1005A707C((void (*)(uint64_t))sub_1001B12A4);
}

uint64_t sub_1005A707C(void (*a1)(uint64_t))
{
  uint64_t v3 = *(void *)(sub_100004AEC(&qword_10099D4A0) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  return sub_1005A1DC4(v1 + v4, *(void *)(v1 + v5), v1 + ((v5 + v6 + 8) & ~v6), a1);
}

uint64_t sub_1005A70FC()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1005A7170()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  return sub_1005A0E74(*(void *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1005A71B0()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  unint64_t v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  swift_release(*(void *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v6);
}

uint64_t sub_1005A7254()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  return sub_1005A16F0( v0 + ((v2 + 16) & ~v2),  v0 + ((*(void *)(v1 + 64) + v2 + ((v2 + 16) & ~v2)) & ~v2),  *(uint64_t (**)(void))(v0 + ((*(void *)(v1 + 64)
                                              + ((*(void *)(v1 + 64) + v2 + ((v2 + 16) & ~v2)) & ~v2)
                                              + 7) & 0xFFFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1005A72A8()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6 + 8));
  swift_errorRelease(*(void *)(v0 + v7));
  return swift_deallocObject(v0, v7 + 8, v5);
}

uint64_t sub_1005A7338()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_1005A12B4( v0 + v2,  *(uint64_t (**)(uint64_t))(v0 + v3),  *(void *)(v0 + v3 + 8),  *(void *)(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1005A7388()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1005A7408()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1005A09B8( *(void *)(v0 + 16),  v0 + v2,  *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1005A7450(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (uint64_t *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  return sub_1005A0F94(a1, v1 + v4, *v5, v5[1]);
}

uint64_t sub_1005A74A8()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1005A7520(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (uint64_t *)(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  return sub_1005A13A0(a1, v1 + v4, *v5, v5[1]);
}

uint64_t SPDeviceEventSource.debugDescription.getter(uint64_t a1)
{
  uint64_t result = 0x7463656E6E6F632ELL;
  switch(a1)
  {
    case 1LL:
      return result;
    case 2LL:
      uint64_t result = 0x6E6E6F637369642ELL;
      break;
    case 5LL:
      uint64_t result = 0x726961702ELL;
      break;
    case 6LL:
      uint64_t result = 0x657463657465642ELL;
      break;
    default:
      uint64_t result = 0x6E776F6E6B6E752ELL;
      break;
  }

  return result;
}

uint64_t sub_1005A7684()
{
  uint64_t result = 0x7463656E6E6F632ELL;
  switch(*v0)
  {
    case 1LL:
      return result;
    case 2LL:
      uint64_t result = 0x6E6E6F637369642ELL;
      break;
    case 5LL:
      uint64_t result = 0x726961702ELL;
      break;
    case 6LL:
      uint64_t result = 0x657463657465642ELL;
      break;
    default:
      uint64_t result = 0x6E776F6E6B6E752ELL;
      break;
  }

  return result;
}

ValueMetadata *type metadata accessor for AccessoryModelNameResponsePayload()
{
  return &type metadata for AccessoryModelNameResponsePayload;
}

uint64_t sub_1005A773C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1005A78DC(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

uint64_t sub_1005A7764(void *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100012ED8(a1, v4);
  dispatch thunk of BinaryEncoding.container()(v14, v4, v5);
  uint64_t v6 = String.utf8Data.getter(v2, v3);
  unint64_t v8 = v7;
  v13[0] = v6;
  v13[1] = v7;
  uint64_t v9 = v15;
  uint64_t v10 = v16;
  sub_100037298((uint64_t)v14, v15);
  unint64_t v11 = sub_100042440();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(v13, &type metadata for Data, v11, v9, v10);
  sub_100016F9C(v6, v8);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v14);
}

unint64_t sub_1005A7828(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1005A7854();
  unint64_t result = sub_1005A7898();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_1005A7854()
{
  unint64_t result = qword_1009B3DB8;
  if (!qword_1009B3DB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100808B44, &type metadata for AccessoryModelNameResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009B3DB8);
  }

  return result;
}

unint64_t sub_1005A7898()
{
  unint64_t result = qword_1009B3DC0;
  if (!qword_1009B3DC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100808B6C, &type metadata for AccessoryModelNameResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009B3DC0);
  }

  return result;
}

uint64_t sub_1005A78DC(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  dispatch thunk of BinaryDecoding.container()(v18, v3, v4);
  uint64_t v5 = v19;
  uint64_t v6 = v20;
  uint64_t v7 = sub_100037298((uint64_t)v18, v19);
  uint64_t v8 = dispatch thunk of BinaryDecodingContaining.decode()(v5, v6);
  if (!v1)
  {
    uint64_t v10 = v8;
    unint64_t v11 = v9;
    sub_100042F34();
    uint64_t v12 = DataProtocol.nullTerminatedUTF8String.getter(&type metadata for Data);
    if (v13)
    {
      uint64_t v7 = v12;
      sub_100016F9C(v10, v11);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v18);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
      return v7;
    }

    uint64_t v7 = type metadata accessor for BinaryEncodingError(0LL);
    unint64_t v15 = sub_10040A9FC();
    swift_allocError(v7, v15, 0LL, 0LL);
    uint64_t v17 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v7 - 8) + 104LL))( v16,  enum case for BinaryEncodingError.encodingError(_:),  v7);
    swift_willThrow(v17);
    sub_100016F9C(v10, v11);
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v18);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v7;
}

void *sub_1005A7A2C(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (!v1) {
    return _swiftEmptyArrayStorage;
  }
  sub_10003281C(0, v1, 0);
  unint64_t result = (void *)sub_10036D714(a1);
  uint64_t v5 = (uint64_t)result;
  uint64_t v6 = 0LL;
  uint64_t v7 = a1 + 64;
  int64_t v20 = v1;
  int v21 = v4;
  uint64_t v22 = a1 + 64;
  while ((v5 & 0x8000000000000000LL) == 0 && v5 < 1LL << *(_BYTE *)(a1 + 32))
  {
    unint64_t v10 = (unint64_t)v5 >> 6;
    if (*(_DWORD *)(a1 + 36) != v4) {
      goto LABEL_24;
    }
    uint64_t v23 = v6;
    uint64_t v24 = *(void *)(*(void *)(a1 + 48) + 8 * v5);
    unint64_t v11 = _swiftEmptyArrayStorage[2];
    unint64_t v12 = _swiftEmptyArrayStorage[3];
    unint64_t result = *(id *)(*(void *)(a1 + 56) + 8 * v5);
    uint64_t v13 = result;
    if (v11 >= v12 >> 1) {
      unint64_t result = (void *)sub_10003281C(v12 > 1, v11 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v11 + 1;
    uint64_t v14 = &_swiftEmptyArrayStorage[2 * v11];
    v14[4] = v24;
    v14[5] = v13;
    int64_t v8 = 1LL << *(_BYTE *)(a1 + 32);
    if (v5 >= v8) {
      goto LABEL_25;
    }
    uint64_t v7 = a1 + 64;
    uint64_t v15 = *(void *)(v22 + 8 * v10);
    if ((v15 & (1LL << v5)) == 0) {
      goto LABEL_26;
    }
    int v4 = v21;
    if (*(_DWORD *)(a1 + 36) != v21) {
      goto LABEL_27;
    }
    unint64_t v16 = v15 & (-2LL << (v5 & 0x3F));
    if (v16)
    {
      int64_t v8 = __clz(__rbit64(v16)) | v5 & 0xFFFFFFFFFFFFFFC0LL;
      int64_t v9 = v20;
    }

    else
    {
      unint64_t v17 = v10 + 1;
      unint64_t v18 = (unint64_t)(v8 + 63) >> 6;
      int64_t v9 = v20;
      if (v10 + 1 < v18)
      {
        unint64_t v19 = *(void *)(v22 + 8 * v17);
        if (v19)
        {
LABEL_20:
          int64_t v8 = __clz(__rbit64(v19)) + (v17 << 6);
        }

        else
        {
          while (v18 - 2 != v10)
          {
            unint64_t v19 = *(void *)(a1 + 80 + 8 * v10++);
            if (v19)
            {
              unint64_t v17 = v10 + 1;
              goto LABEL_20;
            }
          }
        }
      }
    }

    uint64_t v6 = v23 + 1;
    uint64_t v5 = v8;
    if (v23 + 1 == v9) {
      return _swiftEmptyArrayStorage;
    }
  }

  __break(1u);
LABEL_23:
  __break(1u);
LABEL_24:
  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
  return result;
}

void sub_1005A7C40(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    uint64_t v2 = a1;
    sub_100032C54(0, v1, 0);
    uint64_t v3 = _swiftEmptyArrayStorage;
    uint64_t v5 = sub_10036D714(v2);
    uint64_t v6 = 0LL;
    uint64_t v7 = v2 + 64;
    uint64_t v26 = v2 + 80;
    uint64_t v29 = v2 + 64;
    int64_t v27 = v1;
    int v28 = v4;
    while ((v5 & 0x8000000000000000LL) == 0 && v5 < 1LL << *(_BYTE *)(v2 + 32))
    {
      unint64_t v10 = (unint64_t)v5 >> 6;
      if (*(_DWORD *)(v2 + 36) != v4) {
        goto LABEL_24;
      }
      id v11 = *(id *)(*(void *)(v2 + 56) + 8 * v5);
      unint64_t v12 = v3;
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      uint64_t v30 = v14;
      uint64_t v31 = v13;
      id v15 = [v11 dictionaryRepresentation];
      uint64_t v16 = static Dictionary._unconditionallyBridgeFromObjectiveC(_:)( v15,  &type metadata for String,  (char *)&type metadata for Any + 8,  &protocol witness table for String);

      uint64_t v3 = v12;
      uint64_t v32 = v12;
      uint64_t v17 = v2;
      unint64_t v19 = v3[2];
      unint64_t v18 = v3[3];
      if (v19 >= v18 >> 1)
      {
        sub_100032C54(v18 > 1, v19 + 1, 1);
        uint64_t v3 = v32;
      }

      v3[2] = v19 + 1;
      int64_t v20 = &v3[3 * v19];
      v20[4] = v31;
      v20[5] = v30;
      v20[6] = v16;
      int64_t v8 = 1LL << *(_BYTE *)(v17 + 32);
      if (v5 >= v8) {
        goto LABEL_25;
      }
      uint64_t v7 = v29;
      uint64_t v21 = *(void *)(v29 + 8 * v10);
      if ((v21 & (1LL << v5)) == 0) {
        goto LABEL_26;
      }
      uint64_t v2 = v17;
      int v4 = v28;
      if (*(_DWORD *)(v17 + 36) != v28) {
        goto LABEL_27;
      }
      unint64_t v22 = v21 & (-2LL << (v5 & 0x3F));
      if (v22)
      {
        int64_t v8 = __clz(__rbit64(v22)) | v5 & 0xFFFFFFFFFFFFFFC0LL;
        int64_t v9 = v27;
      }

      else
      {
        unint64_t v23 = v10 + 1;
        unint64_t v24 = (unint64_t)(v8 + 63) >> 6;
        int64_t v9 = v27;
        if (v10 + 1 < v24)
        {
          unint64_t v25 = *(void *)(v29 + 8 * v23);
          if (v25)
          {
LABEL_20:
            int64_t v8 = __clz(__rbit64(v25)) + (v23 << 6);
          }

          else
          {
            while (v24 - 2 != v10)
            {
              unint64_t v25 = *(void *)(v26 + 8 * v10++);
              if (v25)
              {
                unint64_t v23 = v10 + 1;
                goto LABEL_20;
              }
            }
          }
        }
      }

      ++v6;
      uint64_t v5 = v8;
      if (v6 == v9) {
        return;
      }
    }

    __break(1u);
LABEL_23:
    __break(1u);
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
LABEL_26:
    __break(1u);
LABEL_27:
    __break(1u);
  }

unint64_t sub_1005A7ED4()
{
  uint64_t v1 = sub_100004AEC((uint64_t *)&unk_1009C0FA0);
  uint64_t inited = swift_initStackObject(v1, v24);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E82A0;
  *(void *)(inited + 32) = 108LL;
  *(void *)(inited + 40) = 0xE100000000000000LL;
  *(void *)(inited + 48) = UUID.data.getter(inited);
  *(void *)(inited + 56) = v3;
  *(void *)(inited + 72) = &type metadata for Data;
  *(void *)(inited + 80) = 98LL;
  *(void *)(inited + 88) = 0xE100000000000000LL;
  int v4 = (int *)type metadata accessor for OfflineFindingInfo(0LL);
  uint64_t v5 = v0 + v4[5];
  uint64_t v6 = type metadata accessor for Date(0LL);
  *(void *)(inited + 120) = v6;
  uint64_t v7 = sub_10000A7C8((void *)(inited + 96));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(v7, v5, v6);
  *(void *)(inited + 128) = 105LL;
  *(void *)(inited + 136) = 0xE100000000000000LL;
  *(void *)(inited + 144) = *(void *)(v0 + v4[6]);
  *(void *)(inited + 168) = &type metadata for UInt64;
  *(void *)(inited + 176) = 112LL;
  *(void *)(inited + 184) = 0xE100000000000000LL;
  int64_t v8 = (uint64_t *)(v0 + v4[7]);
  uint64_t v9 = *v8;
  unint64_t v10 = v8[1];
  *(void *)(inited + 192) = *v8;
  *(void *)(inited + 200) = v10;
  *(void *)(inited + 2swift_weakDestroy(v0 + 16) = &type metadata for Data;
  *(void *)(inited + 224) = 115LL;
  *(void *)(inited + 232) = 0xE100000000000000LL;
  id v11 = (uint64_t *)(v0 + v4[8]);
  uint64_t v12 = *v11;
  unint64_t v13 = v11[1];
  *(void *)(inited + 240) = *v11;
  *(void *)(inited + 248) = v13;
  *(void *)(inited + 264) = &type metadata for Data;
  *(void *)(inited + 272) = 118LL;
  *(void *)(inited + 280) = 0xE100000000000000LL;
  uint64_t v14 = *(void *)(v0 + v4[9]);
  sub_10001736C(v9, v10);
  sub_10001736C(v12, v13);
  swift_bridgeObjectRetain(v14);
  sub_1005A7C40(v15);
  uint64_t v17 = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(v17 + 16);
  if (v18)
  {
    sub_100004AEC(&qword_10099E2F8);
    unint64_t v19 = (void *)static _DictionaryStorage.allocate(capacity:)(v18);
  }

  else
  {
    unint64_t v19 = _swiftEmptyDictionarySingleton;
  }

  unint64_t v23 = v19;
  swift_bridgeObjectRetain(v17);
  sub_1005A9448(v20, 1, &v23);
  swift_bridgeObjectRelease();
  uint64_t v21 = v23;
  *(void *)(inited + 312) = sub_100004AEC(&qword_1009B3DD8);
  *(void *)(inited + 288) = v21;
  return sub_100412CF8(inited);
}

uint64_t sub_1005A80D0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v88 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v102 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v102 - 8);
  __chkstk_darwin(v102);
  unint64_t v101 = (char *)&v88 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v9);
  id v11 = (char *)&v88 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v103 = (char *)&v88 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = (int *)type metadata accessor for OfflineFindingInfo(0LL);
  uint64_t v16 = *((void *)v15 - 1);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v88 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!*(void *)(a1 + 16)
    || (v104 = a2, uint64_t v19 = sub_10030CF14(108LL, 0xE100000000000000LL), a2 = v104, (v20 & 1) == 0)
    || (sub_10006A650(*(void *)(a1 + 56) + 32 * v19, (uint64_t)&v106),
        (swift_dynamicCast(&v105, &v106, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }

  uint64_t v99 = v7;
  uint64_t v100 = v16;
  __int128 v21 = v105;
  __int128 v106 = v105;
  unint64_t v22 = sub_100042F34();
  uint64_t v23 = DataProtocol.bytes.getter(&type metadata for Data, v22);
  UUID.init(bytes:)(v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) != 1)
  {
    __int128 v97 = v21;
    uint64_t v98 = v13;
    uint64_t v26 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
    v26(v103, v11, v12);
    if (*(void *)(a1 + 16) && (uint64_t v27 = sub_10030CF14(98LL, 0xE100000000000000LL), (v28 & 1) != 0))
    {
      sub_10006A650(*(void *)(a1 + 56) + 32 * v27, (uint64_t)&v106);
      uint64_t v29 = v102;
      int v30 = swift_dynamicCast(v6, &v106, (char *)&type metadata for Any + 8, v102, 6LL);
      uint64_t v31 = v99;
      (*(void (**)(char *, void, uint64_t, uint64_t))(v99 + 56))(v6, v30 ^ 1u, 1LL, v29);
      int v32 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v31 + 48))(v6, 1LL, v29);
      a2 = v104;
      uint64_t v16 = v100;
      if (v32 != 1)
      {
        char v95 = *(void (**)(char *, char *, uint64_t))(v31 + 32);
        uint64_t v96 = v26;
        v95(v101, v6, v29);
        uint64_t v33 = v29;
        uint64_t v34 = v98;
        if (!*(void *)(a1 + 16))
        {
          swift_bridgeObjectRelease();
          unint64_t v44 = *((void *)&v97 + 1);
          uint64_t v43 = v97;
LABEL_25:
          sub_100016F9C(v43, v44);
          goto LABEL_26;
        }

        uint64_t v35 = sub_10030CF14(105LL, 0xE100000000000000LL);
        unint64_t v36 = *((void *)&v97 + 1);
        if ((v37 & 1) != 0)
        {
          sub_10006A650(*(void *)(a1 + 56) + 32 * v35, (uint64_t)&v106);
          char v38 = swift_dynamicCast(&v105, &v106, (char *)&type metadata for Any + 8, &type metadata for UInt64, 6LL);
          a2 = v104;
          if ((v38 & 1) == 0 || !*(void *)(a1 + 16))
          {
LABEL_24:
            swift_bridgeObjectRelease();
            uint64_t v43 = v97;
            unint64_t v44 = v36;
            goto LABEL_25;
          }

          uint64_t v94 = v105;
          uint64_t v39 = sub_10030CF14(112LL, 0xE100000000000000LL);
          if ((v40 & 1) != 0)
          {
            sub_10006A650(*(void *)(a1 + 56) + 32 * v39, (uint64_t)&v106);
            char v41 = swift_dynamicCast(&v105, &v106, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL);
            a2 = v104;
            if ((v41 & 1) != 0)
            {
              unint64_t v42 = *((void *)&v105 + 1);
              uint64_t v93 = v105;
              sub_10001736C(v105, *((unint64_t *)&v105 + 1));
              unint64_t v92 = v42;
              uint64_t v45 = sub_10017D59C(v93, v42);
              unint64_t v47 = v46;
              uint64_t v48 = v93;
              if (!*(void *)(a1 + 16) || (uint64_t v49 = sub_10030CF14(115LL, 0xE100000000000000LL), (v50 & 1) == 0))
              {
                swift_bridgeObjectRelease();
                sub_100016F9C(v45, v47);
                sub_100016F9C(v48, v92);
                uint64_t v52 = v97;
                unint64_t v53 = v36;
LABEL_34:
                sub_100016F9C(v52, v53);
LABEL_35:
                (*(void (**)(char *, uint64_t))(v99 + 8))(v101, v102);
                (*(void (**)(char *, uint64_t))(v98 + 8))(v103, v12);
                goto LABEL_6;
              }

              sub_10006A650(*(void *)(a1 + 56) + 32 * v49, (uint64_t)&v106);
              if ((swift_dynamicCast(&v105, &v106, (char *)&type metadata for Any + 8, &type metadata for Data, 6LL) & 1) == 0)
              {
                swift_bridgeObjectRelease();
                uint64_t v54 = v45;
                unint64_t v55 = v47;
LABEL_33:
                sub_100016F9C(v54, v55);
                sub_100016F9C(v48, v92);
                unint64_t v53 = *((void *)&v97 + 1);
                uint64_t v52 = v97;
                goto LABEL_34;
              }

              __int128 v51 = v105;
              sub_10001736C(v105, *((unint64_t *)&v105 + 1));
              uint64_t v91 = v51;
              sub_1001782BC(v51, *((uint64_t *)&v51 + 1));
              __int128 v90 = v106;
              if (*(void *)(a1 + 16) && (uint64_t v56 = sub_10030CF14(118LL, 0xE100000000000000LL), (v57 & 1) != 0))
              {
                sub_10006A650(*(void *)(a1 + 56) + 32 * v56, (uint64_t)&v106);
              }

              else
              {
                __int128 v106 = 0u;
                __int128 v107 = 0u;
              }

              swift_bridgeObjectRelease();
              if (!*((void *)&v107 + 1))
              {
                sub_100016F9C(v45, v47);
                sub_100016F9C(v90, *((unint64_t *)&v90 + 1));
                sub_100016F9C(v91, *((unint64_t *)&v51 + 1));
                sub_100016F9C(v48, v92);
                sub_100016F9C(v97, *((unint64_t *)&v97 + 1));
                sub_100015794((uint64_t)&v106, &qword_10099E200);
                goto LABEL_35;
              }

              uint64_t v58 = sub_100004AEC(&qword_1009B0D30);
              if ((swift_dynamicCast(&v105, &v106, (char *)&type metadata for Any + 8, v58, 6LL) & 1) == 0)
              {
                sub_100016F9C(v45, v47);
                sub_100016F9C(v90, *((unint64_t *)&v90 + 1));
LABEL_57:
                uint64_t v54 = v91;
                unint64_t v55 = *((void *)&v51 + 1);
                goto LABEL_33;
              }

              uint64_t v59 = v105;
              if (*(void *)(v105 + 16) == 2LL)
              {
                *(void *)&__int128 v106 = 1LL;
                uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
                if (*(void *)(v59 + 16))
                {
                  uint64_t v62 = sub_10030CF14(v60, v61);
                  if ((v63 & 1) != 0)
                  {
                    uint64_t v89 = *(void *)(*(void *)(v59 + 56) + 8 * v62);
                    swift_bridgeObjectRetain(v89);
                    swift_bridgeObjectRelease();
                    *(void *)&__int128 v106 = 2LL;
                    uint64_t v64 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
                    if (*(void *)(v59 + 16))
                    {
                      uint64_t v66 = sub_10030CF14(v64, v65);
                      if ((v67 & 1) != 0)
                      {
                        uint64_t v88 = *(void *)(*(void *)(v59 + 56) + 8 * v66);
                        swift_bridgeObjectRetain(v88);
                        swift_bridgeObjectRelease();
                        swift_bridgeObjectRelease();
                        *(void *)&__int128 v106 = _swiftEmptyDictionarySingleton;
                        if (*(void *)(v89 + 16)
                          && (uint64_t v68 = sub_10030CF14(115LL, 0xE100000000000000LL), (v69 & 1) != 0)
                          && *(void *)(v89 + 16)
                          && (uint64_t v70 = *(void *)(*(void *)(v89 + 56) + 8 * v68),
                              uint64_t v71 = sub_10030CF14(108LL, 0xE100000000000000LL),
                              (v72 & 1) != 0))
                        {
                          uint64_t v73 = *(void *)(*(void *)(v89 + 56) + 8 * v71);
                          swift_bridgeObjectRelease();
                          id v74 = [objc_allocWithZone(SPOfflineAdvertisingConfiguration) initWithShortIntervalCount:v70 longIntervalCount:v73];
                          sub_100045990((uint64_t)v74, 1LL, v75);
                        }

                        else
                        {
                          swift_bridgeObjectRelease();
                        }

                        if (*(void *)(v88 + 16) && (uint64_t v76 = sub_10030CF14(115LL, 0xE100000000000000LL), (v77 & 1) != 0))
                        {
                          if (*(void *)(v88 + 16)
                            && (uint64_t v78 = *(void *)(*(void *)(v88 + 56) + 8 * v76),
                                uint64_t v79 = sub_10030CF14(108LL, 0xE100000000000000LL),
                                (v80 & 1) != 0))
                          {
                            uint64_t v81 = *(void *)(*(void *)(v88 + 56) + 8 * v79);
                            swift_bridgeObjectRelease();
                            id v82 = [objc_allocWithZone(SPOfflineAdvertisingConfiguration) initWithShortIntervalCount:v78 longIntervalCount:v81];
                            sub_100045990((uint64_t)v82, 2LL, v83);
                          }

                          else
                          {
                            swift_bridgeObjectRelease();
                          }

                          sub_100016F9C(v97, *((unint64_t *)&v97 + 1));
                          sub_100016F9C(v48, v92);
                          sub_100016F9C(v91, *((unint64_t *)&v51 + 1));
                        }

                        else
                        {
                          sub_100016F9C(v97, *((unint64_t *)&v97 + 1));
                          sub_100016F9C(v48, v92);
                          sub_100016F9C(v91, *((unint64_t *)&v51 + 1));
                          swift_bridgeObjectRelease();
                        }

                        uint64_t v84 = v106;
                        if (*(void *)(v106 + 16) == 2LL)
                        {
                          v96(v18, v103, v12);
                          v95(&v18[v15[5]], v101, v102);
                          *(void *)&v18[v15[6]] = v94;
                          uint64_t v85 = (uint64_t *)&v18[v15[7]];
                          *uint64_t v85 = v45;
                          v85[1] = v47;
                          uint64_t v86 = &v18[v15[8]];
                          uint64_t v87 = *((void *)&v90 + 1);
                          *(void *)uint64_t v86 = v90;
                          *((void *)v86 + 1) = v87;
                          *(void *)&v18[v15[9]] = v84;
                          a2 = v104;
                          sub_1005A97D8((uint64_t)v18, v104);
                          uint64_t v24 = 0LL;
                          uint64_t v16 = v100;
                          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v16 + 56))( a2,  v24,  1LL,  v15);
                        }

                        sub_100016F9C(v45, v47);
                        sub_100016F9C(v90, *((unint64_t *)&v90 + 1));
                        swift_bridgeObjectRelease();
                        goto LABEL_35;
                      }
                    }

                    swift_bridgeObjectRelease();
                    swift_bridgeObjectRelease();
                    sub_100016F9C(v45, v47);
                    sub_100016F9C(v90, *((unint64_t *)&v90 + 1));
                    goto LABEL_56;
                  }
                }

                swift_bridgeObjectRelease();
              }

              sub_100016F9C(v45, v47);
              sub_100016F9C(v90, *((unint64_t *)&v90 + 1));
LABEL_56:
              swift_bridgeObjectRelease();
              goto LABEL_57;
            }

            goto LABEL_24;
          }
        }

        swift_bridgeObjectRelease();
        sub_100016F9C(v97, v36);
        a2 = v104;
LABEL_26:
        (*(void (**)(char *, uint64_t))(v31 + 8))(v101, v33);
        (*(void (**)(char *, uint64_t))(v34 + 8))(v103, v12);
        goto LABEL_8;
      }
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v99 + 56))(v6, 1LL, 1LL, v102);
      a2 = v104;
      uint64_t v16 = v100;
    }

    swift_bridgeObjectRelease();
    sub_100016F9C(v97, *((unint64_t *)&v97 + 1));
    (*(void (**)(char *, uint64_t))(v98 + 8))(v103, v12);
    sub_100015794((uint64_t)v6, (uint64_t *)&unk_10099D720);
LABEL_8:
    uint64_t v24 = 1LL;
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v16 + 56))(a2, v24, 1LL, v15);
  }

  sub_100016F9C(v21, *((unint64_t *)&v21 + 1));
  swift_bridgeObjectRelease();
  sub_100015794((uint64_t)v11, &qword_10099D8A0);
LABEL_6:
  uint64_t v24 = 1LL;
  a2 = v104;
  uint64_t v16 = v100;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, int *))(v16 + 56))(a2, v24, 1LL, v15);
}

void sub_1005A8C0C()
{
  uint64_t v1 = type metadata accessor for OfflineFindingInfo(0LL);
  uint64_t v2 = sub_100007864(&qword_1009B3DC8, type metadata accessor for OfflineFindingInfo, (uint64_t)&unk_100808BB0);
  v3._countAndFlagsBits = CustomStringConvertible.typeDescription.getter(v1, v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 0x6669746E65646928LL;
  v4._object = (void *)0xED0000203A726569LL;
  String.append(_:)(v4);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v7._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v5, v6);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x676E697269617020LL;
  v8._object = (void *)0xEE00203A65746144LL;
  String.append(_:)(v8);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v9, v10);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x203A7865646E6920LL;
  v12._object = (void *)0xE800000000000000LL;
  String.append(_:)(v12);
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x3C203A4B5020LL;
  v14._object = (void *)0xE600000000000000LL;
  String.append(_:)(v14);
  __asm { BR              X13 }

uint64_t sub_1005A8E10()
{
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 0x203E736574796220LL;
  v4._object = (void *)0xED00003C203A5353LL;
  String.append(_:)(v4);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, uint64_t))((char *)&loc_1005A8EAC
                                                                     + dword_1005A905C[*(void *)(v0
                                                                                                 + *(int *)(v1 + 32)
                                                                                                 + 8) >> 62]))( v5,  v6,  v7,  v8);
}

uint64_t sub_1005A8EBC()
{
  v15[0] = BYTE6(v0);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._object = (void *)0x80000001008697C0LL;
  v4._countAndFlagsBits = 0xD000000000000013LL;
  String.append(_:)(v4);
  swift_bridgeObjectRetain(*(void *)(v1 + *(int *)(v2 + 36)));
  uint64_t v6 = sub_1005A7A2C(v5);
  swift_bridgeObjectRelease();
  uint64_t v7 = v6[2];
  if (v7)
  {
    sub_100004AEC(&qword_10099E218);
    uint64_t v8 = (void *)static _DictionaryStorage.allocate(capacity:)(v7);
  }

  else
  {
    uint64_t v8 = _swiftEmptyDictionarySingleton;
  }

  v15[0] = v8;
  swift_bridgeObjectRetain(v6);
  sub_1005A90AC(v9, 1, v15);
  swift_bridgeObjectRelease();
  uint64_t v10 = v15[0];
  unint64_t v11 = sub_1005A940C();
  v12._countAndFlagsBits = Dictionary.description.getter( v10,  &type metadata for Int,  v11,  &protocol witness table for Int);
  String.append(_:)(v12);
  swift_release();
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 41LL;
  v13._object = (void *)0xE100000000000000LL;
  String.append(_:)(v13);
  return v15[1];
}

uint64_t type metadata accessor for OfflineFindingInfo(uint64_t a1)
{
  uint64_t result = qword_1009B3E38;
  if (!qword_1009B3E38) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OfflineFindingInfo);
  }
  return result;
}

uint64_t sub_1005A90AC(void *a1, char a2, void *a3)
{
  uint64_t v3 = a1[2];
  if (!v3) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v7 = a1[4];
  uint64_t v6 = (void *)a1[5];
  swift_bridgeObjectRetain(a1);
  uint64_t v53 = v7;
  uint64_t v8 = (void *)*a3;
  unint64_t v9 = sub_10030CE48(v7);
  uint64_t v11 = v8[2];
  BOOL v12 = (v10 & 1) == 0;
  uint64_t v13 = v11 + v12;
  if (__OFADD__(v11, v12)) {
    goto LABEL_24;
  }
  unint64_t v14 = v9;
  char v15 = v10;
  uint64_t v16 = v8[3];
  id v17 = v6;
  if (v16 >= v13)
  {
    if ((a2 & 1) != 0)
    {
      if ((v15 & 1) != 0) {
        goto LABEL_10;
      }
    }

    else
    {
      sub_1000615DC();
      if ((v15 & 1) != 0) {
        goto LABEL_10;
      }
    }

unint64_t sub_1005A940C()
{
  unint64_t result = qword_1009B3DD0;
  if (!qword_1009B3DD0)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___SPOfflineAdvertisingConfiguration);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1009B3DD0);
  }

  return result;
}

uint64_t sub_1005A9448(void *a1, char a2, void *a3)
{
  if (!a1[2]) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v45 = a1[2];
  uint64_t v7 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v8 = a1[6];
  swift_bridgeObjectRetain(a1);
  uint64_t v48 = v7;
  uint64_t v49 = v6;
  unint64_t v9 = (void *)*a3;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v8);
  unint64_t v11 = sub_10030CF14(v7, v6);
  uint64_t v12 = v9[2];
  BOOL v13 = (v10 & 1) == 0;
  uint64_t v14 = v12 + v13;
  if (__OFADD__(v12, v13)) {
    goto LABEL_23;
  }
  char v15 = v10;
  if (v9[3] >= v14)
  {
    if ((a2 & 1) != 0)
    {
      if ((v10 & 1) != 0) {
        goto LABEL_10;
      }
    }

    else
    {
      sub_1000634D8();
      if ((v15 & 1) != 0) {
        goto LABEL_10;
      }
    }

uint64_t sub_1005A97D8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OfflineFindingInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t *sub_1005A981C(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v23 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v23 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    unint64_t v9 = (char *)a1 + v8;
    char v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
    uint64_t v12 = a3[7];
    *(uint64_t *)((char *)a1 + a3[6]) = *(uint64_t *)((char *)a2 + a3[6]);
    BOOL v13 = (uint64_t *)((char *)a1 + v12);
    uint64_t v14 = *(uint64_t *)((char *)a2 + v12);
    unint64_t v15 = *(uint64_t *)((char *)a2 + v12 + 8);
    sub_10001736C(v14, v15);
    *BOOL v13 = v14;
    v13[1] = v15;
    uint64_t v16 = a3[8];
    char v17 = (uint64_t *)((char *)a1 + v16);
    unint64_t v18 = (uint64_t *)((char *)a2 + v16);
    uint64_t v19 = *v18;
    unint64_t v20 = v18[1];
    sub_10001736C(*v18, v20);
    *char v17 = v19;
    v17[1] = v20;
    uint64_t v21 = a3[9];
    uint64_t v22 = *(uint64_t *)((char *)a2 + v21);
    *(uint64_t *)((char *)a1 + v21) = v22;
    swift_bridgeObjectRetain(v22);
  }

  return a1;
}

uint64_t sub_1005A9924(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
  sub_100016F9C(*(void *)(a1 + a2[7]), *(void *)(a1 + a2[7] + 8));
  sub_100016F9C(*(void *)(a1 + a2[8]), *(void *)(a1 + a2[8] + 8));
  return swift_bridgeObjectRelease();
}

uint64_t sub_1005A99B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v12 = (uint64_t *)(a1 + v11);
  uint64_t v13 = *(void *)(a2 + v11);
  unint64_t v14 = *(void *)(a2 + v11 + 8);
  sub_10001736C(v13, v14);
  *uint64_t v12 = v13;
  v12[1] = v14;
  uint64_t v15 = a3[8];
  uint64_t v16 = (uint64_t *)(a1 + v15);
  char v17 = (uint64_t *)(a2 + v15);
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  sub_10001736C(*v17, v19);
  *uint64_t v16 = v18;
  v16[1] = v19;
  uint64_t v20 = a3[9];
  uint64_t v21 = *(void *)(a2 + v20);
  *(void *)(a1 + v20) = v21;
  swift_bridgeObjectRetain(v21);
  return a1;
}

uint64_t sub_1005A9A90(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24LL))(v8, v9, v10);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v11 = a3[7];
  uint64_t v12 = (uint64_t *)(a1 + v11);
  uint64_t v13 = (uint64_t *)(a2 + v11);
  uint64_t v14 = *v13;
  unint64_t v15 = v13[1];
  sub_10001736C(*v13, v15);
  uint64_t v16 = *v12;
  unint64_t v17 = v12[1];
  *uint64_t v12 = v14;
  v12[1] = v15;
  sub_100016F9C(v16, v17);
  uint64_t v18 = a3[8];
  unint64_t v19 = (uint64_t *)(a1 + v18);
  uint64_t v20 = (uint64_t *)(a2 + v18);
  uint64_t v21 = *v20;
  unint64_t v22 = v20[1];
  sub_10001736C(*v20, v22);
  uint64_t v23 = *v19;
  unint64_t v24 = v19[1];
  *unint64_t v19 = v21;
  v19[1] = v22;
  sub_100016F9C(v23, v24);
  uint64_t v25 = a3[9];
  uint64_t v26 = *(void *)(a2 + v25);
  *(void *)(a1 + v25) = v26;
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1005A9B8C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  uint64_t v12 = a3[9];
  *(_OWORD *)(a1 + a3[8]) = *(_OWORD *)(a2 + a3[8]);
  *(void *)(a1 + v12) = *(void *)(a2 + v12);
  return a1;
}

uint64_t sub_1005A9C38(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  uint64_t v11 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v12 = *(void *)(a1 + v11);
  unint64_t v13 = *(void *)(a1 + v11 + 8);
  *(_OWORD *)(a1 + v11) = *(_OWORD *)(a2 + v11);
  sub_100016F9C(v12, v13);
  uint64_t v14 = a3[8];
  uint64_t v15 = *(void *)(a1 + v14);
  unint64_t v16 = *(void *)(a1 + v14 + 8);
  *(_OWORD *)(a1 + v14) = *(_OWORD *)(a2 + v14);
  sub_100016F9C(v15, v16);
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1005A9D08(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005A9D14);
}

uint64_t sub_1005A9D14(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }

  unint64_t v14 = *(void *)(a1 + *(int *)(a3 + 36));
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_1005A9DBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005A9DC8);
}

uint64_t sub_1005A9DC8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
    return v11(v12, a2, a2, v10);
  }

  uint64_t result = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void *)(result - 8);
  if (*(_DWORD *)(v14 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
    return v11(v12, a2, a2, v10);
  }

  *(void *)(a1 + *(int *)(a4 + 36)) = (a2 - 1);
  return result;
}

uint64_t sub_1005A9E6C(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      _OWORD v5[2] = (char *)&value witness table for Builtin.Int64 + 64;
      v5[3] = &unk_100808BF8;
      void v5[4] = &unk_100808BF8;
      v5[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
      swift_initStructMetadata(a1, 256LL, 6LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t getEnumTagSinglePayload for SecureLocationsPushAckStatus(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsPushAckStatus(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsPushAckStatus()
{
  return &type metadata for SecureLocationsPushAckStatus;
}

uint64_t sub_1005A9FB0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v1 = sub_100004AEC(&qword_1009A1D88);
  __chkstk_darwin(v1);
  unint64_t v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = type metadata accessor for URLComponents(0LL);
  uint64_t v4 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  unint64_t v32 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for FMNAccountType(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  unint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for FMNAuthenticationProvider(0LL);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for FMNAccountType.secureLocations(_:), v6);
  static FMNAuthenticationProvider.configurationURL(accountType:)(v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) == 1)
  {
    unint64_t v17 = (uint64_t *)&unk_1009A34D0;
    uint64_t v18 = (uint64_t)v12;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    URLComponents.init(url:resolvingAgainstBaseURL:)(v16, 0LL);
    uint64_t v19 = v33;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v3, 1LL, v33) != 1)
    {
      uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      uint64_t v28 = v32;
      v27(v32, v3, v19);
      uint64_t v29 = (void (*)(_BYTE *, void))URLComponents.path.modify(v35);
      v30._countAndFlagsBits = 7037793LL;
      v30._object = (void *)0xE300000000000000LL;
      String.append(_:)(v30);
      v29(v35, 0LL);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v34, v28, v19);
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    unint64_t v17 = &qword_1009A1D88;
    uint64_t v18 = (uint64_t)v3;
  }

  sub_100015794(v18, v17);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  uint64_t v21 = sub_10000A720(v20, (uint64_t)qword_100A2AE08);
  unint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    unint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "No url found in account bag.", v24, 2u);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  URLComponents.init()(v25);
  URLComponents.scheme.setter(0x7370747468LL, 0xE500000000000000LL);
  URLComponents.path.setter(0xD000000000000012LL, 0x80000001008697E0LL);
  return URLComponents.host.setter(0xD000000000000012LL, 0x8000000100854BE0LL);
}

uint64_t sub_1005AA354(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B3F40);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1005AB914();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SecureLocationsPushAckRequestBody.CodingKeys,  &type metadata for SecureLocationsPushAckRequestBody.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  LOBYTE(v23[0]) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v23, v5);
  if (!v2)
  {
    uint64_t v13 = v3[1];
    LOBYTE(v23[0]) = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v13, v23, v5);
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    LOBYTE(v23[0]) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, v23, v5);
    *(void *)&v23[0] = v3[4];
    char v25 = 3;
    uint64_t v16 = sub_100004AEC(&qword_1009A95C0);
    unint64_t v17 = sub_1005AB958();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v25, v5, v16, v17);
    __int128 v18 = *(_OWORD *)(v3 + 15);
    v23[4] = *(_OWORD *)(v3 + 13);
    uint64_t v23[5] = v18;
    v23[6] = *(_OWORD *)(v3 + 17);
    uint64_t v24 = v3[19];
    __int128 v19 = *(_OWORD *)(v3 + 7);
    v23[0] = *(_OWORD *)(v3 + 5);
    v23[1] = v19;
    __int128 v20 = *(_OWORD *)(v3 + 11);
    void v23[2] = *(_OWORD *)(v3 + 9);
    v23[3] = v20;
    char v25 = 4;
    unint64_t v21 = sub_1001C82C8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v25, v5, &type metadata for SecureLocationsClientContext, v21);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1005AA548(char *a1)
{
}

void sub_1005AA554()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v2, 0LL);
  __asm { BR              X9 }

Swift::Int sub_1005AA5A4()
{
  return Hasher._finalize()();
}

void sub_1005AA624()
{
  __asm { BR              X10 }

uint64_t sub_1005AA664(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE200000000000000LL);
}

void sub_1005AA6D0(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v3, a1);
  __asm { BR              X9 }

Swift::Int sub_1005AA71C()
{
  return Hasher._finalize()();
}

unint64_t sub_1005AA79C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1005AB7F4(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1005AA7C8()
{
  return ((uint64_t (*)(void))((char *)sub_1005AA7FC + 4 * byte_100808C1F[*v0]))();
}

void sub_1005AA7FC(void *a1@<X8>)
{
  *a1 = 29556LL;
  a1[1] = 0xE200000000000000LL;
}

void sub_1005AA80C(void *a1@<X8>)
{
  *a1 = 0x6449646D63LL;
  a1[1] = 0xE500000000000000LL;
}

void sub_1005AA824(void *a1@<X8>)
{
  *a1 = 0x737574617473LL;
  a1[1] = 0xE600000000000000LL;
}

void sub_1005AA83C(uint64_t a1@<X8>)
{
  *(_WORD *)(a1 + 14) = -4864;
}

uint64_t sub_1005AA864()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1005AA898 + 4 * byte_100808C24[*v0]))( 0x54646E6553706174LL,  0xE900000000000053LL);
}

uint64_t sub_1005AA898()
{
  return 29556LL;
}

uint64_t sub_1005AA8A4()
{
  return 0x6449646D63LL;
}

uint64_t sub_1005AA8B8()
{
  return 0x737574617473LL;
}

uint64_t sub_1005AA8CC()
{
  return 0x6F43746E65696C63LL;
}

unint64_t sub_1005AA8F0@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1005AB7F4(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1005AA914(uint64_t a1)
{
  unint64_t v2 = sub_1005AB914();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005AA93C(uint64_t a1)
{
  unint64_t v2 = sub_1005AB914();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005AA964(void *a1)
{
  return sub_1005AA354(a1);
}

uint64_t sub_1005AA978(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v18 = a4;
  uint64_t v8 = sub_100004AEC(&qword_1009B3E80);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  unint64_t v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v12);
  unint64_t v14 = sub_1005AAB84();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SecureLocationsPushAckStatus.CodingKeys,  &type metadata for SecureLocationsPushAckStatus.CodingKeys,  v14,  v12,  v13);
  char v21 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(a2, a3, &v21, v8);
  if (!v4)
  {
    uint64_t v19 = v18;
    char v20 = 1;
    uint64_t v15 = sub_100004AEC(&qword_1009A5FA8);
    unint64_t v16 = sub_1005AABC8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v20, v8, v15, v16);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1005AAAC4()
{
  if (*v0) {
    return 0x73726F727265LL;
  }
  else {
    return 1682533734LL;
  }
}

uint64_t sub_1005AAAF4@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1005AB83C(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005AAB18(uint64_t a1)
{
  unint64_t v2 = sub_1005AAB84();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005AAB40(uint64_t a1)
{
  unint64_t v2 = sub_1005AAB84();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005AAB68(void *a1)
{
  return sub_1005AA978(a1, *v1, v1[1], v1[2]);
}

unint64_t sub_1005AAB84()
{
  unint64_t result = qword_1009B3E88;
  if (!qword_1009B3E88)
  {
    unint64_t result = swift_getWitnessTable(&unk_100808E74, &type metadata for SecureLocationsPushAckStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3E88);
  }

  return result;
}

unint64_t sub_1005AABC8()
{
  unint64_t result = qword_1009A8668;
  if (!qword_1009A8668)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A5FA8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> Set<A>, v1);
    atomic_store(result, (unint64_t *)&qword_1009A8668);
  }

  return result;
}

id sub_1005AAC24(uint64_t a1)
{
  unint64_t v2 = sub_100412D14((uint64_t)_swiftEmptyArrayStorage);
  unint64_t v20 = v2;
  id result = [(id)objc_opt_self(AKDevice) currentDevice];
  if (result)
  {
    uint64_t v4 = result;
    id v5 = [result serverFriendlyDescription];

    if (v5)
    {
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      uint64_t v8 = v7;

      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
      *(void *)&v19[0] = v2;
      unint64_t v20 = 0x8000000000000000LL;
      sub_10005C260(v6, v8, 0xD000000000000011LL, 0x8000000100854B60LL, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_100047E14(0xD000000000000011LL, 0x8000000100854B60LL);
      swift_bridgeObjectRelease();
      unint64_t v2 = v20;
    }

    char v10 = swift_isUniquelyReferenced_nonNull_native(v2);
    sub_10005C260(49LL, 0xE100000000000000LL, 0x562D747065636341LL, 0xEE006E6F69737265LL, v10);
    swift_bridgeObjectRelease();
    char v11 = swift_isUniquelyReferenced_nonNull_native(v2);
    *(void *)&v19[0] = v2;
    sub_10005C260(0xD000000000000010LL, 0x8000000100854B80LL, 0x2D746E65746E6F43LL, 0xEC00000065707954LL, v11);
    unint64_t v20 = v2;
    swift_bridgeObjectRelease();
    uint64_t v12 = type metadata accessor for JSONEncoder(0LL);
    swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
    JSONEncoder.init()();
    __int128 v13 = *(_OWORD *)(a1 + 144);
    v19[8] = *(_OWORD *)(a1 + 128);
    v19[9] = v13;
    v19[10] = *(_OWORD *)(a1 + 160);
    __int128 v14 = *(_OWORD *)(a1 + 80);
    v19[4] = *(_OWORD *)(a1 + 64);
    v19[5] = v14;
    __int128 v15 = *(_OWORD *)(a1 + 112);
    v19[6] = *(_OWORD *)(a1 + 96);
    _OWORD v19[7] = v15;
    __int128 v16 = *(_OWORD *)(a1 + 16);
    v19[0] = *(_OWORD *)a1;
    v19[1] = v16;
    __int128 v17 = *(_OWORD *)(a1 + 48);
    v19[2] = *(_OWORD *)(a1 + 32);
    v19[3] = v17;
    unint64_t v18 = sub_1005AAF74();
    dispatch thunk of JSONEncoder.encode<A>(_:)(v19, &type metadata for SecureLocationsPushAckRequestBody, v18);
    swift_release();
    sub_1005AAFB8((void *)a1);
    return (id)v2;
  }

  else
  {
    __break(1u);
  }

  return result;
}

unint64_t sub_1005AAF74()
{
  unint64_t result = qword_1009B3E90;
  if (!qword_1009B3E90)
  {
    unint64_t result = swift_getWitnessTable(&unk_100808DF4, &type metadata for SecureLocationsPushAckRequestBody);
    atomic_store(result, (unint64_t *)&qword_1009B3E90);
  }

  return result;
}

void *sub_1005AAFB8(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[4];
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[8];
  uint64_t v6 = a1[10];
  uint64_t v7 = a1[11];
  uint64_t v8 = a1[16];
  uint64_t v9 = a1[19];
  swift_bridgeObjectRelease(a1[21]);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t destroy for SecureLocationsPushAckRequestBody(void *a1)
{
  return swift_bridgeObjectRelease(a1[21]);
}

uint64_t initializeWithCopy for SecureLocationsPushAckRequestBody(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v3 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v3;
  uint64_t v5 = *(void *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = v5;
  *(void *)(a1 + 40) = v4;
  uint64_t v7 = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 48) = v7;
  *(void *)(a1 + 56) = v6;
  uint64_t v9 = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)(a2 + 72);
  *(void *)(a1 + 64) = v9;
  *(void *)(a1 + 72) = v8;
  uint64_t v10 = *(void *)(a2 + 80);
  uint64_t v11 = *(void *)(a2 + 88);
  *(void *)(a1 + 80) = v10;
  *(void *)(a1 + 88) = v11;
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  uint64_t v13 = *(void *)(a2 + 128);
  uint64_t v12 = *(void *)(a2 + 136);
  *(void *)(a1 + 128) = v13;
  *(void *)(a1 + 136) = v12;
  uint64_t v15 = *(void *)(a2 + 152);
  uint64_t v14 = *(void *)(a2 + 160);
  *(void *)(a1 + 152) = v15;
  *(void *)(a1 + 160) = v14;
  uint64_t v16 = *(void *)(a2 + 168);
  *(void *)(a1 + 168) = v16;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRetain(v16);
  return a1;
}

uint64_t assignWithCopy for SecureLocationsPushAckRequestBody(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v4 = *(void *)(a2 + 24);
  uint64_t v5 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 32);
  uint64_t v7 = *(void *)(a1 + 32);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a2 + 88);
  uint64_t v15 = *(void *)(a1 + 88);
  *(void *)(a1 + 88) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  uint64_t v16 = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 96) = v16;
  LOBYTE(vswift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 120);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = v16;
  uint64_t v17 = *(void *)(a2 + 128);
  uint64_t v18 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = v17;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = *(void *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  *(void *)(a1 + 136) = v19;
  uint64_t v20 = *(void *)(a2 + 152);
  uint64_t v21 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease(v21);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  uint64_t v22 = *(void *)(a2 + 168);
  uint64_t v23 = *(void *)(a1 + 168);
  *(void *)(a1 + 168) = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease(v23);
  return a1;
}

__n128 initializeWithTake for SecureLocationsPushAckRequestBody(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __int128 v4 = a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  __n128 result = (__n128)a2[7];
  __int128 v8 = a2[8];
  __int128 v9 = a2[10];
  *(_OWORD *)(a1 + 144) = a2[9];
  *(_OWORD *)(a1 + 160) = v9;
  *(__n128 *)(a1 + 112) = result;
  *(_OWORD *)(a1 + 128) = v8;
  return result;
}

uint64_t assignWithTake for SecureLocationsPushAckRequestBody(uint64_t a1, uint64_t a2)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(*(void *)(a1 + 24));
  uint64_t v4 = *(void *)(a1 + 32);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  swift_bridgeObjectRelease(v4);
  uint64_t v5 = *(void *)(a2 + 48);
  uint64_t v6 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  swift_bridgeObjectRelease(v6);
  uint64_t v7 = *(void *)(a2 + 64);
  uint64_t v8 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v7;
  swift_bridgeObjectRelease(v8);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  swift_bridgeObjectRelease(*(void *)(a1 + 80));
  uint64_t v9 = *(void *)(a1 + 88);
  *(_OWORD *)(a1 + 80) = *(_OWORD *)(a2 + 80);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 96) = *(void *)(a2 + 96);
  *(_BYTE *)(a1 + 104) = *(_BYTE *)(a2 + 104);
  *(void *)(a1 + 112) = *(void *)(a2 + 112);
  *(_BYTE *)(a1 + 120) = *(_BYTE *)(a2 + 120);
  uint64_t v10 = *(void *)(a1 + 128);
  *(void *)(a1 + 128) = *(void *)(a2 + 128);
  swift_bridgeObjectRelease(v10);
  *(void *)(a1 + 136) = *(void *)(a2 + 136);
  *(_BYTE *)(a1 + 144) = *(_BYTE *)(a2 + 144);
  uint64_t v11 = *(void *)(a1 + 152);
  *(void *)(a1 + 152) = *(void *)(a2 + 152);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 168);
  uint64_t v13 = *(void *)(a1 + 168);
  *(void *)(a1 + 160) = *(void *)(a2 + 160);
  *(void *)(a1 + 168) = v12;
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsPushAckRequestBody(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 176)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsPushAckRequestBody(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 168) = 0LL;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 176) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 176) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsPushAckRequestBody()
{
  return &type metadata for SecureLocationsPushAckRequestBody;
}

ValueMetadata *type metadata accessor for SecureLocationsPushAckRequest()
{
  return &type metadata for SecureLocationsPushAckRequest;
}

uint64_t sub_1005AB50C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005AB518);
}

uint64_t sub_1005AB518(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FMNAccountType(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v8 = type metadata accessor for URLComponents(0LL);
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_1005AB58C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005AB598);
}

uint64_t sub_1005AB598(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for FMNAccountType(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v10 = type metadata accessor for URLComponents(0LL);
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SecureLocationsPushAckEndpoint(uint64_t a1)
{
  uint64_t result = qword_1009B3EF0;
  if (!qword_1009B3EF0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SecureLocationsPushAckEndpoint);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsPushAckStatus.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1005AB69C + 4 * byte_100808C2E[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1005AB6D0 + 4 * byte_100808C29[v4]))();
}

uint64_t sub_1005AB6D0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005AB6D8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005AB6E0LL);
  }
  return result;
}

uint64_t sub_1005AB6EC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005AB6F4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1005AB6F8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005AB700(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsPushAckStatus.CodingKeys()
{
  return &type metadata for SecureLocationsPushAckStatus.CodingKeys;
}

unint64_t sub_1005AB720()
{
  unint64_t result = qword_1009B3F28;
  if (!qword_1009B3F28)
  {
    unint64_t result = swift_getWitnessTable(&unk_100808D9C, &type metadata for SecureLocationsPushAckStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3F28);
  }

  return result;
}

unint64_t sub_1005AB768()
{
  unint64_t result = qword_1009B3F30;
  if (!qword_1009B3F30)
  {
    unint64_t result = swift_getWitnessTable(&unk_100808D0C, &type metadata for SecureLocationsPushAckStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3F30);
  }

  return result;
}

unint64_t sub_1005AB7B0()
{
  unint64_t result = qword_1009B3F38;
  if (!qword_1009B3F38)
  {
    unint64_t result = swift_getWitnessTable(&unk_100808D34, &type metadata for SecureLocationsPushAckStatus.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3F38);
  }

  return result;
}

unint64_t sub_1005AB7F4(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100936B28, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 5) {
    return 5LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1005AB83C(uint64_t a1, unint64_t a2)
{
  if (a1 == 1682533734 && a2 == 0xE400000000000000LL)
  {
    unint64_t v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1682533734LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x73726F727265LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73726F727265LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

unint64_t sub_1005AB914()
{
  unint64_t result = qword_1009B3F48;
  if (!qword_1009B3F48)
  {
    unint64_t result = swift_getWitnessTable(&unk_100808FB4, &type metadata for SecureLocationsPushAckRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3F48);
  }

  return result;
}

unint64_t sub_1005AB958()
{
  unint64_t result = qword_1009B3F50;
  if (!qword_1009B3F50)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A95C0);
    sub_1005AB9BC();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009B3F50);
  }

  return result;
}

unint64_t sub_1005AB9BC()
{
  unint64_t result = qword_1009B3F58;
  if (!qword_1009B3F58)
  {
    unint64_t result = swift_getWitnessTable(&unk_100808C60, &type metadata for SecureLocationsPushAckStatus);
    atomic_store(result, (unint64_t *)&qword_1009B3F58);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsPushAckRequestBody.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1005ABA4C + 4 * byte_100808C38[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1005ABA80 + 4 * byte_100808C33[v4]))();
}

uint64_t sub_1005ABA80(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005ABA88(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005ABA90LL);
  }
  return result;
}

uint64_t sub_1005ABA9C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005ABAA4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1005ABAA8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005ABAB0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsPushAckRequestBody.CodingKeys()
{
  return &type metadata for SecureLocationsPushAckRequestBody.CodingKeys;
}

unint64_t sub_1005ABAD0()
{
  unint64_t result = qword_1009B3F60;
  if (!qword_1009B3F60)
  {
    unint64_t result = swift_getWitnessTable(&unk_100808F8C, &type metadata for SecureLocationsPushAckRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3F60);
  }

  return result;
}

unint64_t sub_1005ABB18()
{
  unint64_t result = qword_1009B3F68;
  if (!qword_1009B3F68)
  {
    unint64_t result = swift_getWitnessTable(&unk_100808EC4, &type metadata for SecureLocationsPushAckRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3F68);
  }

  return result;
}

unint64_t sub_1005ABB60()
{
  unint64_t result = qword_1009B3F70;
  if (!qword_1009B3F70)
  {
    unint64_t result = swift_getWitnessTable(&unk_100808EEC, &type metadata for SecureLocationsPushAckRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B3F70);
  }

  return result;
}

char *sub_1005ABBA4(char *a1, char *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v42 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v42 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = &a1[v8];
    uint64_t v10 = &a2[v8];
    uint64_t v11 = type metadata accessor for MACAddress(0LL);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
    v12(v9, v10, v11);
    v12(&a1[a3[6]], &a2[a3[6]], v11);
    uint64_t v13 = a3[7];
    uint64_t v14 = a3[8];
    uint64_t v15 = &a1[v13];
    uint64_t v16 = &a2[v13];
    uint64_t v17 = *((void *)v16 + 1);
    *(void *)uint64_t v15 = *(void *)v16;
    *((void *)v15 + 1) = v17;
    uint64_t v18 = &a1[v14];
    uint64_t v19 = &a2[v14];
    uint64_t v20 = type metadata accessor for Date(0LL);
    uint64_t v21 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v20 - 8) + 16LL);
    __n128 v22 = swift_bridgeObjectRetain(v17);
    v21(v18, v19, v20, v22);
    uint64_t v23 = a3[9];
    uint64_t v24 = (uint64_t *)&a1[v23];
    char v25 = (uint64_t *)&a2[v23];
    uint64_t v26 = *v25;
    unint64_t v27 = v25[1];
    sub_10001736C(*v25, v27);
    *uint64_t v24 = v26;
    v24[1] = v27;
    uint64_t v28 = a3[10];
    uint64_t v29 = (uint64_t *)&a1[v28];
    Swift::String v30 = &a2[v28];
    uint64_t v31 = *(void *)&a2[v28];
    unint64_t v32 = *(void *)&a2[v28 + 8];
    sub_10001736C(v31, v32);
    *uint64_t v29 = v31;
    v29[1] = v32;
    uint64_t v33 = *((void *)v30 + 2);
    unint64_t v34 = *((void *)v30 + 3);
    sub_10001736C(v33, v34);
    __int128 v29[2] = v33;
    v29[3] = v34;
    uint64_t v35 = *((void *)v30 + 4);
    unint64_t v36 = *((void *)v30 + 5);
    sub_10001736C(v35, v36);
    _DWORD v29[4] = v35;
    v29[5] = v36;
    uint64_t v37 = a3[11];
    char v38 = (uint64_t *)&a1[v37];
    char v39 = (uint64_t *)&a2[v37];
    uint64_t v40 = *v39;
    unint64_t v41 = v39[1];
    sub_10001736C(*v39, v41);
    *char v38 = v40;
    v38[1] = v41;
  }

  return a1;
}

uint64_t sub_1005ABD44(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v5 = a1 + a2[5];
  uint64_t v6 = type metadata accessor for MACAddress(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL);
  v7(v5, v6);
  v7(a1 + a2[6], v6);
  swift_bridgeObjectRelease();
  uint64_t v8 = a1 + a2[8];
  uint64_t v9 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  sub_100016F9C(*(void *)(a1 + a2[9]), *(void *)(a1 + a2[9] + 8));
  uint64_t v10 = a1 + a2[10];
  sub_100016F9C(*(void *)v10, *(void *)(v10 + 8));
  sub_100016F9C(*(void *)(v10 + 16), *(void *)(v10 + 24));
  sub_100016F9C(*(void *)(v10 + 32), *(void *)(v10 + 40));
  return sub_100016F9C(*(void *)(a1 + a2[11]), *(void *)(a1 + a2[11] + 8));
}

uint64_t sub_1005ABE38(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for MACAddress(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL);
  v11(v8, v9, v10);
  v11(a1 + a3[6], a2 + a3[6], v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)(a1 + v12);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = a1 + v13;
  uint64_t v18 = a2 + v13;
  uint64_t v19 = type metadata accessor for Date(0LL);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v19 - 8) + 16LL);
  __n128 v21 = swift_bridgeObjectRetain(v16);
  v20(v17, v18, v19, v21);
  uint64_t v22 = a3[9];
  uint64_t v23 = (uint64_t *)(a1 + v22);
  uint64_t v24 = (uint64_t *)(a2 + v22);
  uint64_t v25 = *v24;
  unint64_t v26 = v24[1];
  sub_10001736C(*v24, v26);
  *uint64_t v23 = v25;
  v23[1] = v26;
  uint64_t v27 = a3[10];
  uint64_t v28 = (uint64_t *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  uint64_t v30 = *(void *)(a2 + v27);
  unint64_t v31 = *(void *)(a2 + v27 + 8);
  sub_10001736C(v30, v31);
  *uint64_t v28 = v30;
  v28[1] = v31;
  uint64_t v32 = v29[2];
  unint64_t v33 = v29[3];
  sub_10001736C(v32, v33);
  v28[2] = v32;
  v28[3] = v33;
  uint64_t v34 = v29[4];
  unint64_t v35 = v29[5];
  sub_10001736C(v34, v35);
  v28[4] = v34;
  v28[5] = v35;
  uint64_t v36 = a3[11];
  uint64_t v37 = (uint64_t *)(a1 + v36);
  char v38 = (uint64_t *)(a2 + v36);
  uint64_t v39 = *v38;
  unint64_t v40 = v38[1];
  sub_10001736C(*v38, v40);
  *uint64_t v37 = v39;
  v37[1] = v40;
  return a1;
}

uint64_t sub_1005ABFAC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for MACAddress(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24LL);
  v11(v8, v9, v10);
  v11(a1 + a3[6], a2 + a3[6], v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  *uint64_t v13 = *v14;
  uint64_t v15 = v14[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease();
  uint64_t v16 = a3[8];
  uint64_t v17 = a1 + v16;
  uint64_t v18 = a2 + v16;
  uint64_t v19 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 24LL))(v17, v18, v19);
  uint64_t v20 = a3[9];
  __n128 v21 = (uint64_t *)(a1 + v20);
  uint64_t v22 = (uint64_t *)(a2 + v20);
  uint64_t v23 = *v22;
  unint64_t v24 = v22[1];
  sub_10001736C(*v22, v24);
  uint64_t v25 = *v21;
  unint64_t v26 = v21[1];
  *__n128 v21 = v23;
  v21[1] = v24;
  sub_100016F9C(v25, v26);
  uint64_t v27 = a3[10];
  uint64_t v28 = (uint64_t *)(a1 + v27);
  uint64_t v29 = (void *)(a2 + v27);
  uint64_t v30 = *(void *)(a2 + v27);
  unint64_t v31 = *(void *)(a2 + v27 + 8);
  sub_10001736C(v30, v31);
  uint64_t v32 = *v28;
  unint64_t v33 = v28[1];
  *uint64_t v28 = v30;
  v28[1] = v31;
  sub_100016F9C(v32, v33);
  uint64_t v34 = v29[2];
  unint64_t v35 = v29[3];
  sub_10001736C(v34, v35);
  uint64_t v36 = v28[2];
  unint64_t v37 = v28[3];
  v28[2] = v34;
  v28[3] = v35;
  sub_100016F9C(v36, v37);
  uint64_t v38 = v29[4];
  unint64_t v39 = v29[5];
  sub_10001736C(v38, v39);
  uint64_t v40 = v28[4];
  unint64_t v41 = v28[5];
  v28[4] = v38;
  v28[5] = v39;
  sub_100016F9C(v40, v41);
  uint64_t v42 = a3[11];
  Swift::String v43 = (uint64_t *)(a1 + v42);
  Swift::String v44 = (uint64_t *)(a2 + v42);
  uint64_t v45 = *v44;
  unint64_t v46 = v44[1];
  sub_10001736C(*v44, v46);
  uint64_t v47 = *v43;
  unint64_t v48 = v43[1];
  *Swift::String v43 = v45;
  v43[1] = v46;
  sub_100016F9C(v47, v48);
  return a1;
}

uint64_t sub_1005AC158(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for MACAddress(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL);
  v11(v8, v9, v10);
  v11(a1 + a3[6], a2 + a3[6], v10);
  uint64_t v12 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 32LL))(v13, v14, v15);
  uint64_t v16 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  uint64_t v17 = (_OWORD *)(a1 + v16);
  uint64_t v18 = (__int128 *)(a2 + v16);
  __int128 v19 = v18[2];
  __int128 v20 = *v18;
  v17[1] = v18[1];
  v17[2] = v19;
  *uint64_t v17 = v20;
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  return a1;
}

uint64_t sub_1005AC260(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for MACAddress(0LL);
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL);
  v11(v8, v9, v10);
  v11(a1 + a3[6], a2 + a3[6], v10);
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (uint64_t *)(a2 + v12);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  *uint64_t v13 = v16;
  v13[1] = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 40LL))(v18, v19, v20);
  uint64_t v21 = a3[9];
  uint64_t v22 = *(void *)(a1 + v21);
  unint64_t v23 = *(void *)(a1 + v21 + 8);
  *(_OWORD *)(a1 + v21) = *(_OWORD *)(a2 + v21);
  sub_100016F9C(v22, v23);
  uint64_t v24 = a3[10];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = a2 + v24;
  uint64_t v27 = *(void *)(a1 + v24);
  unint64_t v28 = *(void *)(a1 + v24 + 8);
  *(_OWORD *)(a1 + v24) = *(_OWORD *)(a2 + v24);
  sub_100016F9C(v27, v28);
  uint64_t v29 = v25[2];
  unint64_t v30 = v25[3];
  *((_OWORD *)v25 + 1) = *(_OWORD *)(v26 + 16);
  sub_100016F9C(v29, v30);
  uint64_t v31 = v25[4];
  unint64_t v32 = v25[5];
  *((_OWORD *)v25 + 2) = *(_OWORD *)(v26 + 32);
  sub_100016F9C(v31, v32);
  uint64_t v33 = a3[11];
  uint64_t v34 = *(void *)(a1 + v33);
  unint64_t v35 = *(void *)(a1 + v33 + 8);
  *(_OWORD *)(a1 + v33) = *(_OWORD *)(a2 + v33);
  sub_100016F9C(v34, v35);
  return a1;
}

uint64_t sub_1005AC3B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005AC3C4);
}

uint64_t sub_1005AC3C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  uint64_t v11 = type metadata accessor for MACAddress(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v13 = a3[5];
LABEL_10:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }

  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    uint64_t v12 = *(void *)(v8 - 8);
    uint64_t v13 = a3[8];
    goto LABEL_10;
  }

  unint64_t v14 = *(void *)(a1 + a3[7] + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_1005AC494(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005AC4A0);
}

uint64_t sub_1005AC4A0(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t result = type metadata accessor for MACAddress(0LL);
    uint64_t v14 = *(void *)(result - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      uint64_t v10 = result;
      uint64_t v15 = a4[5];
    }

    else
    {
      if (a3 == 0x7FFFFFFF)
      {
        *(void *)(a1 + a4[7] + 8) = (a2 - 1);
        return result;
      }

      uint64_t v10 = type metadata accessor for Date(0LL);
      uint64_t v14 = *(void *)(v10 - 8);
      uint64_t v15 = a4[8];
    }

    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for StandaloneBeacon(uint64_t a1)
{
  uint64_t result = qword_1009B3FD0;
  if (!qword_1009B3FD0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StandaloneBeacon);
  }
  return result;
}

uint64_t sub_1005AC5A8(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v6 = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for MACAddress(319LL);
    if (v4 <= 0x3F)
    {
      uint64_t v7 = *(void *)(result - 8) + 64LL;
      uint64_t v8 = v7;
      uint64_t v9 = &unk_100809028;
      uint64_t result = type metadata accessor for Date(319LL);
      if (v5 <= 0x3F)
      {
        uint64_t v10 = *(void *)(result - 8) + 64LL;
        uint64_t v11 = &unk_100809040;
        uint64_t v12 = &unk_100809058;
        uint64_t v13 = &unk_100809040;
        swift_initStructMetadata(a1, 256LL, 8LL, &v6, a1 + 16);
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_1005AC668()
{
  v1._countAndFlagsBits = 0x203A64693CLL;
  v1._object = (void *)0xE500000000000000LL;
  String.append(_:)(v1);
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x7373657264646120LL;
  v5._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v5);
  uint64_t v6 = type metadata accessor for StandaloneBeacon(0LL);
  uint64_t v7 = type metadata accessor for MACAddress(0LL);
  uint64_t v8 = sub_100007864( &qword_1009A6E60,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
  v9._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x8000000100869800LL;
  v10._countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v10);
  v11._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v7, v8);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  v12._countAndFlagsBits = 0x203A4E5320LL;
  v12._object = (void *)0xE500000000000000LL;
  String.append(_:)(v12);
  uint64_t v13 = (uint64_t *)(v0 + *(int *)(v6 + 28));
  uint64_t v14 = *v13;
  uint64_t v15 = (void *)v13[1];
  swift_bridgeObjectRetain(v15);
  v16._countAndFlagsBits = v14;
  v16._object = v15;
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 0x746375646F727020LL;
  v17._object = (void *)0xEE00203A61746144LL;
  String.append(_:)(v17);
  uint64_t v18 = (uint64_t *)(v0 + *(int *)(v6 + 36));
  uint64_t v19 = *v18;
  unint64_t v20 = v18[1];
  sub_10001736C(*v18, v20);
  v21._countAndFlagsBits = sub_1000F5698(v19, v20);
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  sub_100016F9C(v19, v20);
  v22._countAndFlagsBits = 0x7461447269617020LL;
  v22._object = (void *)0xEB00000000203A65LL;
  String.append(_:)(v22);
  uint64_t v23 = type metadata accessor for Date(0LL);
  uint64_t v24 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  v25._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._countAndFlagsBits = 62LL;
  v26._object = (void *)0xE100000000000000LL;
  String.append(_:)(v26);
  return 0LL;
}

uint64_t sub_1005AC924()
{
  return sub_100007864(&qword_1009B4020, type metadata accessor for StandaloneBeacon, (uint64_t)&unk_100809070);
}

uint64_t sub_1005AC950()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2AD48);
  sub_10000A720(v0, (uint64_t)qword_100A2AD48);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x4C64656863746566LL,  0xEF6E6F697461636FLL);
}

uint64_t sub_1005AC9D0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v19 = a4;
  uint64_t v8 = sub_100004AEC(&qword_1009B4040);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  Swift::String v11 = (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v12);
  unint64_t v14 = sub_1005AD598();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for FetchedLocation.CodingKeys,  &type metadata for FetchedLocation.CodingKeys,  v14,  v12,  v13);
  v20[0] = a2;
  v20[1] = a3;
  char v21 = 0;
  unint64_t v15 = sub_1000170A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v21, v8, &type metadata for Data, v15);
  if (!v4)
  {
    BYTE4(v20[0]) = BYTE4(v19);
    LODWORD(v20[0]) = v19;
    char v21 = 1;
    unint64_t v16 = sub_1005AD620();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v20, &v21, v8, &type metadata for AdvInfo, v16);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1005ACB28()
{
  if (*v0) {
    return 0x6F666E49766461LL;
  }
  else {
    return 0x6E6F697461636F6CLL;
  }
}

uint64_t sub_1005ACB6C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1005AD2CC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005ACB90(uint64_t a1)
{
  unint64_t v2 = sub_1005AD598();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005ACBB8(uint64_t a1)
{
  unint64_t v2 = sub_1005AD598();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005ACBE0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1005AD3D4(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(_DWORD *)(a2 + swift_weakDestroy(v0 + 16) = v6;
    *(_BYTE *)(a2 + 20) = BYTE4(v6);
  }

  return result;
}

uint64_t sub_1005ACC14(void *a1)
{
  return sub_1005AC9D0( a1,  *(void *)v1,  *(void *)(v1 + 8),  *(unsigned int *)(v1 + 16) | ((unint64_t)*(unsigned __int8 *)(v1 + 20) << 32));
}

void *sub_1005ACC38(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    uint64_t v4 = *(void *)(a2 + 16);
    int64_t v5 = *(void *)(a1 + 16);
    if (v4 == v5)
    {
      if (!v4) {
        return _swiftEmptyArrayStorage;
      }
      uint64_t v6 = (uint64_t *)(a2 + 32);
      uint64_t v7 = (unint64_t *)(a1 + 40);
      uint64_t v8 = _swiftEmptyArrayStorage;
      do
      {
        uint64_t v10 = *(v7 - 1);
        unint64_t v9 = *v7;
        uint64_t v11 = *v6;
        uint64_t v12 = *(void *)(*v6 + 16);
        sub_10001736C(v10, *v7);
        sub_10001736C(v10, v9);
        if (v12)
        {
          sub_10001736C(v10, v9);
          swift_bridgeObjectRetain(v11);
          uint64_t v14 = sub_100605F44(v13);
          sub_100016F9C(v10, v9);
        }

        else
        {
          uint64_t v14 = 3LL;
        }

        if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0) {
          uint64_t v8 = sub_1004C6800(0LL, v8[2] + 1LL, 1, v8);
        }
        unint64_t v16 = v8[2];
        unint64_t v15 = v8[3];
        if (v16 >= v15 >> 1) {
          uint64_t v8 = sub_1004C6800((void *)(v15 > 1), v16 + 1, 1, v8);
        }
        v7 += 2;
        v8[2] = v16 + 1;
        Swift::String v17 = &v8[3 * v16];
        void v17[4] = v10;
        v17[5] = v9;
        *((_BYTE *)v17 + 52) = BYTE4(v14);
        *((_DWORD *)v17 + 12) = v14;
        sub_100016F9C(v10, v9);
        ++v6;
        --v4;
      }

      while (v4);
      return v8;
    }

    if (qword_10099B5A0 != -1) {
      swift_once(&qword_10099B5A0, sub_1005AC950);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    sub_10000A720(v18, (uint64_t)qword_100A2AD48);
    swift_bridgeObjectRetain(a1);
    swift_bridgeObjectRetain(a2);
    unint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = swift_slowAlloc(22LL, -1LL);
      *(_DWORD *)uint64_t v22 = 134349312;
      unint64_t v30 = (void *)v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v22 + 12) = 2050;
      unint64_t v30 = *(void **)(a2 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v22 + 14, v22 + 22);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "Ambiguous hint response from server!\npayload %{public}ld != tlvPackets %{public}ld",  (uint8_t *)v22,  0x16u);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }
  }

  else
  {
    int64_t v5 = *(void *)(a1 + 16);
  }

  uint64_t v8 = _swiftEmptyArrayStorage;
  if (v5)
  {
    unint64_t v30 = _swiftEmptyArrayStorage;
    sub_100033444(0, v5, 0);
    uint64_t v8 = v30;
    uint64_t v23 = (unint64_t *)(a1 + 40);
    do
    {
      uint64_t v24 = *(v23 - 1);
      unint64_t v25 = *v23;
      sub_10001736C(v24, *v23);
      unint64_t v30 = v8;
      unint64_t v27 = v8[2];
      unint64_t v26 = v8[3];
      if (v27 >= v26 >> 1)
      {
        sub_100033444(v26 > 1, v27 + 1, 1);
        uint64_t v8 = v30;
      }

      v23 += 2;
      v8[2] = v27 + 1;
      unint64_t v28 = &v8[3 * v27];
      v28[4] = v24;
      v28[5] = v25;
      *((_BYTE *)v28 + 52) = 0;
      *((_DWORD *)v28 + 12) = 3;
      --v5;
    }

    while (v5);
  }

  return v8;
}

uint64_t sub_1005AD108(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_10001736C(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(_DWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  return a1;
}

uint64_t assignWithCopy for FetchedLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_10001736C(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_100016F9C(v6, v7);
  int v8 = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  *(_DWORD *)(a1 + swift_weakDestroy(v0 + 16) = v8;
  return a1;
}

__n128 initializeWithTake for FetchedLocation(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(void *)(a1 + 13) = *(void *)(a2 + 13);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for FetchedLocation(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016F9C(v4, v5);
  *(_DWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_DWORD *)(a2 + 16);
  *(_BYTE *)(a1 + 20) = *(_BYTE *)(a2 + 20);
  return a1;
}

uint64_t getEnumTagSinglePayload for FetchedLocation(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFD && *(_BYTE *)(a1 + 21)) {
    return (*(_DWORD *)a1 + 253);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  if (v3 >= 2) {
    int v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v4 = -2;
  }
  if (v4 < 0) {
    int v4 = -1;
  }
  BOOL v5 = __OFSUB__(v4, 1);
  int v6 = v4 - 1;
  if (v6 < 0 != v5) {
    int v6 = -1;
  }
  return (v6 + 1);
}

uint64_t storeEnumTagSinglePayload for FetchedLocation(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFC)
  {
    *(_BYTE *)(result + 20) = 0;
    *(_DWORD *)(result + swift_weakDestroy(v0 + 16) = 0;
    *(void *)__n128 result = a2 - 253;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 21) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFD) {
      *(_BYTE *)(result + 21) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + swift_weakDestroy(v0 + 16) = a2 + 3;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for FetchedLocation()
{
  return &type metadata for FetchedLocation;
}

uint64_t sub_1005AD2CC(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEC00000061746144LL)
  {
    unint64_t v5 = 0xEC00000061746144LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEC00000061746144LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6F666E49766461LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6F666E49766461LL, 0xE700000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1005AD3D4(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009B4028);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  int v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100012ED8(a1, v7);
  unint64_t v9 = sub_1005AD598();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for FetchedLocation.CodingKeys,  &type metadata for FetchedLocation.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    char v15 = 0;
    unint64_t v10 = sub_100016FE0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v16, &type metadata for Data, &v15, v3, &type metadata for Data, v10);
    uint64_t v7 = v16;
    unint64_t v12 = v17;
    char v15 = 1;
    sub_10001736C(v16, v17);
    unint64_t v13 = sub_1005AD5DC();
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for AdvInfo,  &v15,  v3,  &type metadata for AdvInfo,  v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    sub_100016F9C(v7, v12);
  }

  return v7;
}

unint64_t sub_1005AD598()
{
  unint64_t result = qword_1009B4030;
  if (!qword_1009B4030)
  {
    unint64_t result = swift_getWitnessTable(&unk_100809238, &type metadata for FetchedLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4030);
  }

  return result;
}

unint64_t sub_1005AD5DC()
{
  unint64_t result = qword_1009B4038;
  if (!qword_1009B4038)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EC384, &type metadata for AdvInfo);
    atomic_store(result, (unint64_t *)&qword_1009B4038);
  }

  return result;
}

unint64_t sub_1005AD620()
{
  unint64_t result = qword_1009B4048;
  if (!qword_1009B4048)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EC35C, &type metadata for AdvInfo);
    atomic_store(result, (unint64_t *)&qword_1009B4048);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for FetchedLocation.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1005AD6B0 + 4 * byte_10080910D[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1005AD6E4 + 4 * byte_100809108[v4]))();
}

uint64_t sub_1005AD6E4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005AD6EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005AD6F4LL);
  }
  return result;
}

uint64_t sub_1005AD700(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005AD708LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1005AD70C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005AD714(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FetchedLocation.CodingKeys()
{
  return &type metadata for FetchedLocation.CodingKeys;
}

unint64_t sub_1005AD734()
{
  unint64_t result = qword_1009B4050;
  if (!qword_1009B4050)
  {
    unint64_t result = swift_getWitnessTable(&unk_100809210, &type metadata for FetchedLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4050);
  }

  return result;
}

unint64_t sub_1005AD77C()
{
  unint64_t result = qword_1009B4058;
  if (!qword_1009B4058)
  {
    unint64_t result = swift_getWitnessTable(&unk_100809180, &type metadata for FetchedLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4058);
  }

  return result;
}

unint64_t sub_1005AD7C4()
{
  unint64_t result = qword_1009B4060;
  if (!qword_1009B4060)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008091A8, &type metadata for FetchedLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4060);
  }

  return result;
}

uint64_t sub_1005AD808(uint64_t a1, void (*a2)(char *), uint64_t a3, void (*a4)(char *))
{
  uint64_t v8 = sub_100004AEC(&qword_1009A99D8);
  __chkstk_darwin(v8);
  unint64_t v10 = &v17[-((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = type metadata accessor for WildModeAssociationRecord(0LL);
  __chkstk_darwin(v11);
  unint64_t v13 = &v17[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_10001DC4C(a1, (uint64_t)v13, v14);
  a2(v13);
  uint64_t v18 = *(void *)(v4 + 136);
  uint64_t v19 = v13;
  OS_dispatch_queue.sync<A>(execute:)(sub_100345668, v17, (char *)&type metadata for () + 8);
  sub_1004E97E0();
  sub_10001DC4C((uint64_t)v13, (uint64_t)v10, type metadata accessor for WildModeAssociationRecord);
  swift_storeEnumTagMultiPayload(v10, v8, 0LL);
  a4(v10);
  sub_100015794((uint64_t)v10, &qword_1009A99D8);
  return sub_100018C68((uint64_t)v13, type metadata accessor for WildModeAssociationRecord);
}

uint64_t sub_1005ADA84()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2AD60);
  sub_10000A720(v0, (uint64_t)qword_100A2AD60);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000015LL,  0x80000001008698E0LL);
}

uint64_t sub_1005ADB04()
{
  *(void *)(v1 + 48) = v0;
  *(void *)(v1 + 56) = *v0;
  return swift_task_switch(sub_1005ADB24, v0, 0LL);
}

uint64_t sub_1005ADB24()
{
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  *(void *)(v0 + 64) = qword_100A2A710;
  return swift_task_switch(sub_1005ADB8C, 0LL, 0LL);
}

uint64_t sub_1005ADB8C()
{
  uint64_t v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc(v1);
  *(void *)(v0 + 72) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1005ADC00;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_100015814, *(void *)(v0 + 64), &type metadata for Configuration);
}

uint64_t sub_1005ADC00()
{
  return swift_task_switch(sub_1005ADC5C, 0LL, 0LL);
}

uint64_t sub_1005ADC5C()
{
  uint64_t v1 = v0[6];
  v0[10] = v0[2];
  return swift_task_switch(sub_1005ADC78, v1, 0LL);
}

uint64_t sub_1005ADC78()
{
  if (qword_10099B5A8 != -1) {
    swift_once(&qword_10099B5A8, sub_1005ADA84);
  }
  uint64_t v1 = v0[10];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2AD60);
  swift_bridgeObjectRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[10];
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    *(_DWORD *)uint64_t v8 = 134218240;
    sub_1006A1940(v7);
    v0[4] = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 4, v0 + 5, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2048;
    sub_1006A194C(v7);
    v0[5] = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 5, v0 + 6, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease_n(v7, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Startup with interval = %f, minimum delay = %f",  (uint8_t *)v8,  0x16u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v0[10], 2LL);
  }

  uint64_t v11 = v0[6];
  uint64_t v12 = *(void *)(v11 + 144);
  v0[11] = v12;
  if (v12)
  {
    uint64_t v13 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain_n(v12, 2LL);
    uint64_t v14 = (void *)swift_task_alloc(v13);
    v0[12] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_1005ADEC8;
    char v15 = (char *)&type metadata for () + 8;
    uint64_t v16 = sub_1005B0BC0;
    uint64_t v17 = v12;
  }

  else
  {
    uint64_t v18 = v0[7];
    uint64_t v19 = swift_allocObject(&unk_100966928, 32LL, 7LL);
    v0[13] = v19;
    *(void *)(v19 + swift_weakDestroy(v0 + 16) = v11;
    *(void *)(v19 + 24) = v18;
    uint64_t v20 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    os_log_type_t v21 = (void *)swift_task_alloc(v20);
    v0[14] = v21;
    char v15 = (char *)type metadata accessor for XPCActivity();
    *os_log_type_t v21 = v0;
    v21[1] = sub_1005ADF58;
    uint64_t v16 = sub_1005B0BB8;
    uint64_t v14 = v0 + 3;
    uint64_t v17 = v19;
  }

  return unsafeBlocking<A>(_:)(v14, v16, v17, v15);
}

uint64_t sub_1005ADEC8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 96LL));
  swift_release();
  return swift_task_switch(sub_1005ADF28, v1, 0LL);
}

uint64_t sub_1005ADF28()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005ADF58()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 112LL));
  swift_release();
  return swift_task_switch(sub_1005ADFB8, v1, 0LL);
}

uint64_t sub_1005ADFB8()
{
  uint64_t v1 = v0[3];
  v0[15] = v1;
  uint64_t v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc(v2);
  v0[16] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1005AE02C;
  return unsafeBlocking<A>(_:)(v3, sub_1005B0BC0, v1, (char *)&type metadata for () + 8);
}

uint64_t sub_1005AE02C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 48LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 128LL));
  swift_release();
  return swift_task_switch(sub_1005AE08C, v1, 0LL);
}

uint64_t sub_1005AE08C()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v1 + 144);
  *(void *)(v1 + 144) = *(void *)(v0 + 120);
  swift_release(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005AE0C8@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v12 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static DispatchQoS.default.getter(v5);
  uint64_t v8 = swift_allocObject(&unk_100966950, 24LL, 7LL);
  swift_weakInit(v8 + 16, a1);
  uint64_t v9 = type metadata accessor for XPCActivity();
  swift_allocObject(v9, 112LL, 7LL);
  uint64_t v10 = sub_10045AD78( 0xD000000000000041LL,  (void *)0x8000000100869890LL,  (uint64_t)v7,  (uint64_t)sub_1005B30A4,  0LL,  (uint64_t)sub_1005B32B8,  v8);
  uint64_t result = swift_release();
  *a2 = v10;
  return result;
}

uint64_t sub_1005AE1B4(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v6 = a4 + 16;
  swift_beginAccess(a4 + 16, v10, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v6);
  if (result)
  {
    uint64_t v8 = result;
    Transaction.capture()();
    if (a3 == 3)
    {
      sub_100458824();
    }

    else if (a3 == 2)
    {
      uint64_t v9 = swift_allocObject(&unk_100966978, 32LL, 7LL);
      *(void *)(v9 + swift_weakDestroy(v0 + 16) = v8;
      *(void *)(v9 + 24) = a2;
      swift_retain();
      swift_retain();
      unsafeFromAsyncTask<A>(_:)(&unk_1009B4170, v9, (char *)&type metadata for () + 8);
      swift_release();
      sub_100458840();
    }

    return swift_release();
  }

  return result;
}

uint64_t sub_1005AE294()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1009B418C);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000159BC;
  return sub_1005AE2DC();
}

uint64_t sub_1005AE2DC()
{
  v1[32] = v0;
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009A6DB0);
  v1[33] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for SubmitUTInfoEndpoint(0LL);
  v1[34] = v3;
  unint64_t v4 = (*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[35] = swift_task_alloc(v4);
  v1[36] = swift_task_alloc(v4);
  uint64_t v5 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  v1[37] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v1[38] = v6;
  v1[39] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for HashAlgorithm(0LL);
  v1[40] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v1[41] = v8;
  v1[42] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009B4190);
  v1[43] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for UTInfoPublishRequestBody.State(0LL);
  v1[44] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v1[45] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[46] = swift_task_alloc(v12);
  v1[47] = swift_task_alloc(v12);
  uint64_t v13 = sub_100004AEC(&qword_1009A11F8);
  v1[48] = v13;
  unint64_t v14 = (*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[49] = swift_task_alloc(v14);
  v1[50] = swift_task_alloc(v14);
  unint64_t v15 = (*(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_10099D720) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[51] = swift_task_alloc(v15);
  v1[52] = swift_task_alloc(v15);
  v1[53] = swift_task_alloc(v15);
  uint64_t v16 = type metadata accessor for WildModeAssociationRecord(0LL);
  v1[54] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v1[55] = v17;
  unint64_t v18 = (*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[56] = swift_task_alloc(v18);
  v1[57] = swift_task_alloc(v18);
  v1[58] = swift_task_alloc(v18);
  uint64_t v19 = type metadata accessor for Date(0LL);
  v1[59] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v1[60] = v20;
  unint64_t v21 = (*(void *)(v20 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[61] = swift_task_alloc(v21);
  v1[62] = swift_task_alloc(v21);
  v1[63] = swift_task_alloc(v21);
  v1[64] = swift_task_alloc(v21);
  return swift_task_switch(sub_1005AE524, v0, 0LL);
}

uint64_t sub_1005AE524()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 160, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 96, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 120))
  {
    sub_100012EC0((__int128 *)(v0 + 96), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 520) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1005AE610;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1005AE610(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 520LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 256LL);
  *(void *)(*(void *)v1 + 528LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005AE670, v3, 0LL);
}

uint64_t sub_1005AE670()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 528))
  {
    uint64_t v2 = *(void *)(v0 + 512);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    static Date.trustedNow.getter(v2);
    return swift_task_switch(sub_1005AE83C, *(void *)(v0 + 528), 0LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    unint64_t v4 = sub_1000157D0();
    uint64_t v25 = swift_allocError(&type metadata for DaemonError, v4, 0LL, 0LL);
    *uint64_t v5 = 0xD000000000000010LL;
    v5[1] = 0x8000000100850F20LL;
    swift_willThrow(v25);
    uint64_t v6 = *(void *)(v0 + 504);
    uint64_t v8 = *(void *)(v0 + 488);
    uint64_t v7 = *(void *)(v0 + 496);
    uint64_t v10 = *(void *)(v0 + 456);
    uint64_t v9 = *(void *)(v0 + 464);
    uint64_t v11 = *(void *)(v0 + 448);
    uint64_t v13 = *(void *)(v0 + 416);
    uint64_t v12 = *(void *)(v0 + 424);
    uint64_t v14 = *(void *)(v0 + 408);
    uint64_t v15 = *(void *)(v0 + 400);
    uint64_t v16 = *(void *)(v0 + 392);
    uint64_t v17 = *(void *)(v0 + 376);
    uint64_t v18 = *(void *)(v0 + 368);
    uint64_t v19 = *(void *)(v0 + 344);
    uint64_t v20 = *(void *)(v0 + 336);
    uint64_t v21 = *(void *)(v0 + 312);
    uint64_t v22 = *(void *)(v0 + 288);
    uint64_t v23 = *(void *)(v0 + 280);
    uint64_t v24 = *(void *)(v0 + 264);
    swift_task_dealloc(*(void *)(v0 + 512));
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1005AE83C()
{
  *(void *)(v0 + 536) = *(void *)(*(void *)(v0 + 528) + 136LL);
  swift_retain();
  return swift_task_switch(sub_1005AE880, 0LL, 0LL);
}

uint64_t sub_1005AE880()
{
  uint64_t v1 = v0[67];
  uint64_t v2 = v0[66];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[68] = v3;
  v3[2] = v1;
  _OWORD v3[3] = sub_1005B37F4;
  v3[4] = v2;
  unint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[69] = v4;
  uint64_t v5 = sub_100004AEC(&qword_1009B4198);
  *unint64_t v4 = v0;
  v4[1] = sub_1005AE940;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 25,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_1005B37FC,  v3,  v5);
}

uint64_t sub_1005AE940()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 544);
  uint64_t v3 = *(void *)(*v0 + 256);
  swift_task_dealloc(*(void *)(*v0 + 552));
  swift_release();
  swift_task_dealloc(v2);
  *(void *)(v1 + 560) = *(void *)(v1 + 200);
  return swift_task_switch(sub_1005AE9BC, v3, 0LL);
}

uint64_t sub_1005AE9BC()
{
  uint64_t v1 = *(void *)(v0 + 560);
  uint64_t v2 = *(void *)(v1 + 16);
  swift_bridgeObjectRetain(v1);
  uint64_t v122 = v3;
  if (!v2)
  {
    os_log_type_t v120 = _swiftEmptyArrayStorage;
LABEL_19:
    uint64_t v7 = v120;
    *(void *)(v0 + 568) = v120;
    swift_bridgeObjectRelease();
    int64_t v28 = v120[2];
    int64_t v119 = v28;
    if (!v28)
    {
      uint64_t v7 = _swiftEmptyArrayStorage;
      goto LABEL_68;
    }

    uint64_t v29 = *(void *)(v0 + 480);
    uint64_t v30 = *(void *)(v0 + 440);
    unint64_t v146 = *(int **)(v0 + 432);
    uint64_t v139 = *(void *)(v0 + 384);
    uint64_t v136 = *(void *)(v0 + 360);
    uint64_t v116 = *(void *)(v0 + 328);
    sub_10003348C(0, v28, 0);
    uint64_t v31 = 0LL;
    uint64_t v118 = (char *)v120 + ((*(unsigned __int8 *)(v30 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v30 + 80));
    uint64_t v117 = *(void *)(v30 + 72);
    unsigned int v121 = enum case for HashAlgorithm.sha256(_:);
    uint64_t v126 = v29;
LABEL_21:
    uint64_t v32 = *(void *)(v0 + 448);
    uint64_t v124 = v31;
    sub_10001DC4C((uint64_t)&v118[v31 * v117], v32, type metadata accessor for WildModeAssociationRecord);
    uint64_t v33 = *(void *)(v32 + v146[17]);
    uint64_t v128 = v33 + 64;
    uint64_t v34 = -1LL << *(_BYTE *)(v33 + 32);
    if (-v34 < 64) {
      uint64_t v35 = ~(-1LL << -(char)v34);
    }
    else {
      uint64_t v35 = -1LL;
    }
    unint64_t v36 = v35 & *(void *)(v33 + 64);
    int64_t v131 = (unint64_t)(63 - v34) >> 6;
    uint64_t v142 = v33;
    swift_bridgeObjectRetain_n(v33, 2LL);
    int64_t v37 = 0LL;
    uint64_t v125 = _swiftEmptyArrayStorage;
    while (1)
    {
      if (v36)
      {
        uint64_t v149 = (v36 - 1) & v36;
        int64_t v153 = v37;
        unint64_t v39 = __clz(__rbit64(v36)) | (v37 << 6);
      }

      else
      {
        int64_t v40 = v37 + 1;
        if (__OFADD__(v37, 1LL))
        {
          __break(1u);
LABEL_79:
          __break(1u);
          goto LABEL_80;
        }

        if (v40 >= v131) {
          goto LABEL_56;
        }
        unint64_t v41 = *(void *)(v128 + 8 * v40);
        int64_t v42 = v37 + 1;
        if (!v41)
        {
          int64_t v42 = v37 + 2;
          if (v37 + 2 >= v131) {
            goto LABEL_56;
          }
          unint64_t v41 = *(void *)(v128 + 8 * v42);
          if (!v41)
          {
            int64_t v42 = v37 + 3;
            if (v37 + 3 >= v131) {
              goto LABEL_56;
            }
            unint64_t v41 = *(void *)(v128 + 8 * v42);
            if (!v41)
            {
              int64_t v42 = v37 + 4;
              if (v37 + 4 >= v131) {
                goto LABEL_56;
              }
              unint64_t v41 = *(void *)(v128 + 8 * v42);
              if (!v41)
              {
                uint64_t v43 = v37 + 5;
                if (v37 + 5 >= v131)
                {
LABEL_56:
                  uint64_t v57 = *(void *)(v0 + 448);
                  uint64_t v58 = *(void *)(v0 + 336);
                  uint64_t v59 = *(void *)(v0 + 320);
                  swift_release();
                  uint64_t v60 = swift_bridgeObjectRelease();
                  uint64_t v154 = *(unsigned __int8 *)(v57 + v146[13]);
                  uint64_t v61 = (unsigned __int8 *)(v57 + v146[22]);
                  uint64_t v62 = *v61;
                  int v150 = v61[1];
                  uint64_t v63 = MACAddress.data.getter(v60);
                  unint64_t v65 = v64;
                  uint64_t v66 = *(void (**)(uint64_t, void, uint64_t))(v116 + 104);
                  v66(v58, v121, v59);
                  uint64_t v143 = Data.hash(algorithm:)(v58, v63, v65);
                  uint64_t v132 = v67;
                  sub_100016F9C(v63, v65);
                  uint64_t v68 = *(uint64_t (**)(uint64_t, uint64_t))(v116 + 8);
                  uint64_t v69 = v68(v58, v59);
                  char v70 = *(_BYTE *)(v57 + v146[21]);
                  uint64_t v71 = (uint64_t *)(v57 + v146[20]);
                  unint64_t v72 = v71[1];
                  if (((v72 >> 60) | 4) == 0xF)
                  {
                    uint64_t v129 = 0LL;
                    uint64_t v123 = 0LL;
                  }

                  else
                  {
                    uint64_t v73 = *(void *)(v0 + 336);
                    uint64_t v74 = *(void *)(v0 + 320);
                    uint64_t v75 = *v71;
                    v66(v73, v121, v74);
                    sub_10001736C(v75, v72);
                    uint64_t v76 = Data.hash(algorithm:)(v73, v75, v72);
                    unint64_t v78 = v77;
                    v68(v73, v74);
                    sub_1000E53FC(v75, v72);
                    *(void *)(v0 + 184) = v76;
                    *(void *)(v0 + 192) = v78;
                    unint64_t v79 = sub_10009BDE4();
                    uint64_t v129 = RawRepresentable<>.base64EncodedString(options:)( 0LL,  &type metadata for HashedAdvertisement,  v79);
                    uint64_t v123 = v80;
                    uint64_t v69 = sub_100016F9C(v76, v78);
                  }

                  uint64_t v81 = *(void *)(v0 + 448);
                  uint64_t v82 = UUID.uuidString.getter(v69);
                  uint64_t v84 = v83;
                  sub_100018C68(v81, type metadata accessor for WildModeAssociationRecord);
                  uint64_t v7 = _swiftEmptyArrayStorage;
                  if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0)
                  {
                    sub_10003348C(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
                    uint64_t v7 = _swiftEmptyArrayStorage;
                  }

                  uint64_t v85 = v124;
                  unint64_t v87 = _swiftEmptyArrayStorage[2];
                  unint64_t v86 = _swiftEmptyArrayStorage[3];
                  if (v87 >= v86 >> 1)
                  {
                    sub_10003348C(v86 > 1, v87 + 1, 1);
                    uint64_t v85 = v124;
                    uint64_t v7 = _swiftEmptyArrayStorage;
                  }

                  uint64_t v31 = v85 + 1;
                  _swiftEmptyArrayStorage[2] = v87 + 1;
                  uint64_t v88 = &_swiftEmptyArrayStorage[9 * v87];
                  v88[4] = v129;
                  v88[5] = v123;
                  uint64_t v89 = 0x10000000000LL;
                  if (!v150) {
                    uint64_t v89 = 0LL;
                  }
                  uint64_t v29 = v126;
                  v88[6] = v125;
                  v88[7] = v82;
                  v88[8] = v84;
                  v88[9] = (v62 << 32) | (v154 << 24) | v89 | 0x40202;
                  v88[10] = v143;
                  v88[11] = v132;
                  *((_BYTE *)v88 + 96) = v70;
                  if (v31 == v119)
                  {
LABEL_68:
                    if (qword_10099B5A8 == -1) {
                      goto LABEL_69;
                    }
                    goto LABEL_81;
                  }

                  goto LABEL_21;
                }

                unint64_t v41 = *(void *)(v128 + 8 * v43);
                if (!v41)
                {
                  while (1)
                  {
                    int64_t v42 = v43 + 1;
                    if (__OFADD__(v43, 1LL)) {
                      goto LABEL_79;
                    }
                    if (v42 >= v131) {
                      goto LABEL_56;
                    }
                    unint64_t v41 = *(void *)(v128 + 8 * v42);
                    ++v43;
                    if (v41) {
                      goto LABEL_45;
                    }
                  }
                }

                int64_t v42 = v37 + 5;
              }
            }
          }
        }

uint64_t sub_1005AF900(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void **)v4;
  uint64_t v6 = *(void *)(*(void *)v4 + 584LL);
  v5[74] = a1;
  v5[75] = a2;
  v5[76] = a3;
  v5[77] = v3;
  swift_task_dealloc(v6);
  if (v3)
  {
    uint64_t v7 = v5[32];
    swift_release();
    uint64_t v8 = sub_1005AFBC4;
    uint64_t v9 = v7;
  }

  else
  {
    uint64_t v9 = v5[32];
    uint64_t v8 = sub_1005AF988;
  }

  return swift_task_switch(v8, v9, 0LL);
}

uint64_t sub_1005AF988()
{
  unint64_t v1 = v0[76];
  uint64_t v2 = v0[75];
  uint64_t v3 = v0[74];
  uint64_t v5 = v0[35];
  uint64_t v4 = (uint64_t *)v0[36];
  uint64_t v6 = v0[33];
  uint64_t v7 = v0[34];
  uint64_t v8 = type metadata accessor for AnonymousCrowdSourceNetworkURLComponents();
  swift_allocObject(v8, 56LL, 7LL);
  *uint64_t v4 = sub_10009CA4C();
  uint64_t v9 = (char *)v4 + *(int *)(v7 + 20);
  uint64_t v10 = enum case for FMNAccountType.none(_:);
  uint64_t v11 = type metadata accessor for FMNAccountType(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104LL))(v9, v10, v11);
  uint64_t v12 = type metadata accessor for SearchPartyURLSessionFactory(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  uint64_t v13 = type metadata accessor for FMNMockingPreferences(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v6, 1LL, 1LL, v13);
  uint64_t v14 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0LL, 0LL, v6);
  uint64_t v15 = type metadata accessor for ServerInteractionController(0LL);
  uint64_t v16 = swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  sub_10001DC4C((uint64_t)v4, v5, type metadata accessor for SubmitUTInfoEndpoint);
  v0[78] = sub_100431A60(v5, v14, v16);
  sub_100018C68((uint64_t)v4, type metadata accessor for SubmitUTInfoEndpoint);
  v0[10] = &type metadata for SubmitUTInfo;
  v0[11] = sub_1005B3808();
  v0[7] = v3;
  v0[8] = v2;
  v0[9] = v1;
  swift_bridgeObjectRetain(v3);
  sub_10001736C(v2, v1);
  int v17 = (void *)swift_task_alloc(dword_1009A4BF4);
  v0[79] = v17;
  *int v17 = v0;
  v17[1] = sub_1005AFB30;
  return sub_1001B5210(v0[39], (uint64_t)(v0 + 7));
}

uint64_t sub_1005AFB30()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 632);
  *(void *)(*v1 + 640) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 256);
    swift_release();
    swift_release();
    uint64_t v5 = sub_1005B05D0;
  }

  else
  {
    uint64_t v6 = (void *)(v2 + 56);
    uint64_t v4 = *(void *)(v2 + 256);
    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v6);
    uint64_t v5 = sub_1005AFD24;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_1005AFBC4()
{
  uint64_t v1 = *(void *)(v0 + 512);
  uint64_t v2 = *(void *)(v0 + 472);
  uint64_t v3 = *(void *)(v0 + 480);
  swift_release(*(void *)(v0 + 528));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v4 = *(void *)(v0 + 504);
  uint64_t v6 = *(void *)(v0 + 488);
  uint64_t v5 = *(void *)(v0 + 496);
  uint64_t v8 = *(void *)(v0 + 456);
  uint64_t v7 = *(void *)(v0 + 464);
  uint64_t v9 = *(void *)(v0 + 448);
  uint64_t v11 = *(void *)(v0 + 416);
  uint64_t v10 = *(void *)(v0 + 424);
  uint64_t v12 = *(void *)(v0 + 408);
  uint64_t v14 = *(void *)(v0 + 400);
  uint64_t v15 = *(void *)(v0 + 392);
  uint64_t v16 = *(void *)(v0 + 376);
  uint64_t v17 = *(void *)(v0 + 368);
  uint64_t v18 = *(void *)(v0 + 344);
  uint64_t v19 = *(void *)(v0 + 336);
  uint64_t v20 = *(void *)(v0 + 312);
  uint64_t v21 = *(void *)(v0 + 288);
  uint64_t v22 = *(void *)(v0 + 280);
  uint64_t v23 = *(void *)(v0 + 264);
  swift_task_dealloc(*(void *)(v0 + 512));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005AFD24(uint64_t a1)
{
  if ((unint64_t)(FMNServerInteractionController.FMNResponseFields.statusCode.getter(a1) - 300) >= 0xFFFFFFFFFFFFFF9CLL)
  {
    uint64_t v23 = type metadata accessor for JSONDecoder(0LL);
    uint64_t v24 = swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
    *(void *)(v1 + 648) = JSONDecoder.init()(v24);
    unint64_t v25 = (void *)swift_task_alloc(dword_1009B41AC);
    *(void *)(v1 + 656) = v25;
    *unint64_t v25 = v1;
    v25[1] = sub_1005AFFEC;
    return sub_1005B2364(*(void *)(v1 + 568), *(void *)(v1 + 512));
  }

  else
  {
    uint64_t v2 = swift_release();
    uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
    os_log_type_t v4 = static os_log_type_t.error.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to publish wild associated records.", v5, 2u);
      swift_slowDealloc(v5, -1LL, -1LL);
    }

    unint64_t v6 = *(void *)(v1 + 608);
    uint64_t v7 = *(void *)(v1 + 600);
    uint64_t v33 = *(void *)(v1 + 480);
    uint64_t v35 = *(void *)(v1 + 472);
    uint64_t v37 = *(void *)(v1 + 512);
    uint64_t v8 = *(void *)(v1 + 304);
    uint64_t v9 = *(void *)(v1 + 312);
    uint64_t v10 = *(void *)(v1 + 296);

    unint64_t v11 = sub_1005B384C();
    uint64_t v39 = swift_allocError(&type metadata for WildModeAssociationRecordsPublisherError, v11, 0LL, 0LL);
    *uint64_t v12 = 0;
    swift_willThrow(v39);
    swift_release();
    swift_bridgeObjectRelease();
    sub_100016F9C(v7, v6);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v10);
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v37, v35);
    uint64_t v13 = *(void *)(v1 + 504);
    uint64_t v14 = *(void *)(v1 + 488);
    uint64_t v15 = *(void *)(v1 + 496);
    uint64_t v17 = *(void *)(v1 + 456);
    uint64_t v16 = *(void *)(v1 + 464);
    uint64_t v18 = *(void *)(v1 + 448);
    uint64_t v20 = *(void *)(v1 + 416);
    uint64_t v19 = *(void *)(v1 + 424);
    uint64_t v21 = *(void *)(v1 + 408);
    uint64_t v26 = *(void *)(v1 + 400);
    uint64_t v27 = *(void *)(v1 + 392);
    uint64_t v28 = *(void *)(v1 + 376);
    uint64_t v29 = *(void *)(v1 + 368);
    uint64_t v30 = *(void *)(v1 + 344);
    uint64_t v31 = *(void *)(v1 + 336);
    uint64_t v32 = *(void *)(v1 + 312);
    uint64_t v34 = *(void *)(v1 + 288);
    uint64_t v36 = *(void *)(v1 + 280);
    uint64_t v38 = *(void *)(v1 + 264);
    swift_task_dealloc(*(void *)(v1 + 512));
    swift_task_dealloc(v13);
    swift_task_dealloc(v15);
    swift_task_dealloc(v14);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v34);
    swift_task_dealloc(v36);
    swift_task_dealloc(v38);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

uint64_t sub_1005AFFEC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 656LL);
  uint64_t v3 = *(void **)v1;
  v3[83] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    uint64_t v4 = v3[32];
    swift_release();
    return swift_task_switch(sub_1005B075C, v4, 0LL);
  }

  else
  {
    unint64_t v6 = (void *)swift_task_alloc(dword_1009B41BC);
    v3[84] = v6;
    *unint64_t v6 = v3;
    v6[1] = sub_1005B008C;
    return sub_1005B0CD0(v3[71]);
  }

uint64_t sub_1005B008C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 256LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 672LL));
  swift_release();
  return swift_task_switch(sub_1005B00F0, v1, 0LL);
}

uint64_t sub_1005B00F0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = v1[83];
  uint64_t v4 = FMNServerInteractionController.FMNResponseFields.data.getter(a1);
  unint64_t v6 = v5;
  unint64_t v7 = sub_1005B3890();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)( &type metadata for UTInfoPublishResponse,  v4,  v6,  &type metadata for UTInfoPublishResponse,  v7);
  if (v3)
  {
    unint64_t v8 = v1[76];
    uint64_t v9 = v1[75];
    swift_release();
    swift_bridgeObjectRelease();
    swift_release();
    sub_100016F9C(v9, v8);
    swift_errorRelease(v3);
    sub_100016F9C(v4, v6);
  }

  else
  {
    sub_100016F9C(v4, v6);
    uint64_t v10 = v1[31];
    swift_bridgeObjectRetain(v10);
    uint64_t v12 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v13 = static os_log_type_t.default.getter(v12);
    if (os_log_type_enabled(v12, v13))
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v14 = 134217984;
      v1[28] = *(void *)(v10 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 28, v1 + 29, v14 + 4, v14 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v12, v13, "Got %ld records in response.", v14, 0xCu);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease();
    }

    uint64_t v15 = *(void *)(v10 + 16);
    if (v15)
    {
      uint64_t v16 = (unsigned __int8 *)(v10 + 64);
      uint64_t v53 = v1;
      do
      {
        uint64_t v17 = *((void *)v16 - 4);
        unint64_t v18 = *((void *)v16 - 3);
        uint64_t v19 = *((void *)v16 - 1);
        int v20 = *v16;
        swift_bridgeObjectRetain_n(v18, 4LL);
        uint64_t v21 = swift_bridgeObjectRetain_n(v19, 4LL);
        uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
        os_log_type_t v23 = static os_log_type_t.default.getter(v22);
        if (os_log_type_enabled(v22, v23))
        {
          uint64_t v24 = swift_slowAlloc(32LL, -1LL);
          uint64_t v25 = swift_slowAlloc(64LL, -1LL);
          v56[0] = v25;
          *(_DWORD *)uint64_t v24 = 141558531;
          *(void *)(v24 + 4) = 1752392040LL;
          *(_WORD *)(v24 + 12) = 2081;
          swift_bridgeObjectRetain(v18);
          *(void *)(v24 + 14) = sub_1003F11D4(v17, v18, v56);
          swift_bridgeObjectRelease_n(v18, 3LL);
          swift_bridgeObjectRelease_n(v19, 2LL);
          *(_WORD *)(v24 + 22) = 2080;
          if (v20) {
            uint64_t v26 = 0x657669746361LL;
          }
          else {
            uint64_t v26 = 0x7472656E69LL;
          }
          if (v20) {
            unint64_t v27 = 0xE600000000000000LL;
          }
          else {
            unint64_t v27 = 0xE500000000000000LL;
          }
          *(void *)(v24 + 24) = sub_1003F11D4(v26, v27, v56);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease_n(v18, 2LL);
          swift_bridgeObjectRelease_n(v19, 2LL);
          _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "Subscription %{private,mask.hash}s, uint64_t result = %s.",  (uint8_t *)v24,  0x20u);
          swift_arrayDestroy(v25, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v25, -1LL, -1LL);
          uint64_t v28 = v24;
          uint64_t v2 = v53;
          swift_slowDealloc(v28, -1LL, -1LL);
        }

        else
        {
          swift_bridgeObjectRelease_n(v18, 4LL);
          swift_bridgeObjectRelease_n(v19, 4LL);
        }

        v16 += 40;
        --v15;
      }

      while (v15);
    }

    unint64_t v29 = v2[76];
    uint64_t v30 = v2[75];
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    sub_100016F9C(v30, v29);
    swift_bridgeObjectRelease();
  }

  (*(void (**)(void, void))(v2[38] + 8LL))(v2[39], v2[37]);
  uint64_t v31 = v2[63];
  uint64_t v32 = v2[64];
  uint64_t v34 = v2[61];
  uint64_t v33 = v2[62];
  uint64_t v35 = v2[59];
  uint64_t v36 = v2[60];
  uint64_t v38 = v2[57];
  uint64_t v37 = v2[58];
  uint64_t v39 = v2[56];
  int64_t v40 = v2;
  uint64_t v41 = v2[53];
  uint64_t v42 = v40[52];
  uint64_t v44 = v40[51];
  uint64_t v45 = v40[50];
  uint64_t v46 = v40[49];
  uint64_t v47 = v40[47];
  uint64_t v48 = v40[46];
  uint64_t v49 = v40[43];
  uint64_t v50 = v40[42];
  uint64_t v51 = v40[39];
  uint64_t v52 = v40[36];
  uint64_t v54 = v40[35];
  uint64_t v55 = v40[33];
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v32, v35);
  swift_task_dealloc(v32);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  swift_task_dealloc(v48);
  swift_task_dealloc(v49);
  swift_task_dealloc(v50);
  swift_task_dealloc(v51);
  swift_task_dealloc(v52);
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  return ((uint64_t (*)(void))v40[1])();
}

uint64_t sub_1005B05D0()
{
  unint64_t v1 = *(void *)(v0 + 608);
  uint64_t v2 = *(void *)(v0 + 600);
  uint64_t v3 = *(void *)(v0 + 512);
  uint64_t v4 = *(void *)(v0 + 472);
  uint64_t v5 = *(void *)(v0 + 480);
  swift_bridgeObjectRelease();
  swift_release();
  sub_100016F9C(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
  uint64_t v6 = *(void *)(v0 + 504);
  uint64_t v8 = *(void *)(v0 + 488);
  uint64_t v7 = *(void *)(v0 + 496);
  uint64_t v10 = *(void *)(v0 + 456);
  uint64_t v9 = *(void *)(v0 + 464);
  uint64_t v11 = *(void *)(v0 + 448);
  uint64_t v13 = *(void *)(v0 + 416);
  uint64_t v12 = *(void *)(v0 + 424);
  uint64_t v14 = *(void *)(v0 + 408);
  uint64_t v16 = *(void *)(v0 + 400);
  uint64_t v17 = *(void *)(v0 + 392);
  uint64_t v18 = *(void *)(v0 + 376);
  uint64_t v19 = *(void *)(v0 + 368);
  uint64_t v20 = *(void *)(v0 + 344);
  uint64_t v21 = *(void *)(v0 + 336);
  uint64_t v22 = *(void *)(v0 + 312);
  uint64_t v23 = *(void *)(v0 + 288);
  uint64_t v24 = *(void *)(v0 + 280);
  uint64_t v25 = *(void *)(v0 + 264);
  swift_task_dealloc(*(void *)(v0 + 512));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005B075C()
{
  uint64_t v1 = *(void *)(v0 + 664);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 664);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v43 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    swift_getErrorValue(v5, v0 + 216, v0 + 136);
    uint64_t v8 = Error.localizedDescription.getter(*(void *)(v0 + 144), *(void *)(v0 + 152));
    *(void *)(v0 + 208) = sub_1003F11D4(v8, v9, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to decode wild associated records %s.", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 664);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  uint64_t v11 = *(void *)(v0 + 664);
  uint64_t v12 = *(void *)(v0 + 600);
  unint64_t v34 = *(void *)(v0 + 608);
  uint64_t v36 = *(void *)(v0 + 480);
  uint64_t v38 = *(void *)(v0 + 472);
  uint64_t v40 = *(void *)(v0 + 512);
  uint64_t v13 = *(void *)(v0 + 304);
  uint64_t v14 = *(void *)(v0 + 312);
  uint64_t v15 = *(void *)(v0 + 296);
  unint64_t v16 = sub_1005B384C();
  uint64_t v42 = swift_allocError(&type metadata for WildModeAssociationRecordsPublisherError, v16, 0LL, 0LL);
  *uint64_t v17 = 1;
  swift_willThrow(v42);
  swift_release();
  swift_release();
  swift_errorRelease(v11);
  swift_bridgeObjectRelease();
  sub_100016F9C(v12, v34);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v14, v15);
  (*(void (**)(uint64_t, uint64_t))(v36 + 8))(v40, v38);
  uint64_t v18 = *(void *)(v0 + 504);
  uint64_t v19 = *(void *)(v0 + 488);
  uint64_t v20 = *(void *)(v0 + 496);
  uint64_t v22 = *(void *)(v0 + 456);
  uint64_t v21 = *(void *)(v0 + 464);
  uint64_t v23 = *(void *)(v0 + 448);
  uint64_t v25 = *(void *)(v0 + 416);
  uint64_t v24 = *(void *)(v0 + 424);
  uint64_t v26 = *(void *)(v0 + 408);
  uint64_t v28 = *(void *)(v0 + 400);
  uint64_t v29 = *(void *)(v0 + 392);
  uint64_t v30 = *(void *)(v0 + 376);
  uint64_t v31 = *(void *)(v0 + 368);
  uint64_t v32 = *(void *)(v0 + 344);
  uint64_t v33 = *(void *)(v0 + 336);
  uint64_t v35 = *(void *)(v0 + 312);
  uint64_t v37 = *(void *)(v0 + 288);
  uint64_t v39 = *(void *)(v0 + 280);
  uint64_t v41 = *(void *)(v0 + 264);
  swift_task_dealloc(*(void *)(v0 + 512));
  swift_task_dealloc(v18);
  swift_task_dealloc(v20);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v35);
  swift_task_dealloc(v37);
  swift_task_dealloc(v39);
  swift_task_dealloc(v41);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005B0A98()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for WildModeAssociationRecordsPublisher()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd35WildModeAssociationRecordsPublisher);
}

uint64_t sub_1005B0AF4()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_1009B4094);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100015D58;
  v2[6] = v0;
  v2[7] = *v0;
  return swift_task_switch(sub_1005ADB24, v0, 0LL);
}

uint64_t sub_1005B0B58(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100015C48( &qword_1009B4160,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for WildModeAssociationRecordsPublisher,  (uint64_t)&unk_100809330);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1005B0B94()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1005B0BB8@<X0>(uint64_t *a1@<X8>)
{
  return sub_1005AE0C8(*(void *)(v1 + 16), a1);
}

uint64_t sub_1005B0BC0()
{
  return OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_10020E2A0,  v0,  *(void *)(v0 + 40),  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
}

uint64_t sub_1005B0C08(uint64_t a1, uint64_t a2)
{
  os_log_type_t v4 = (void *)swift_task_alloc(dword_1009B417C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v4;
  *os_log_type_t v4 = v2;
  v4[1] = sub_100015D58;
  v4[7] = a2;
  return swift_task_switch(sub_1005B3384, a2, 0LL);
}

uint64_t sub_1005B0C68@<X0>(uint64_t result@<X0>, BOOL *a2@<X8>)
{
  uint64_t v2 = result;
  if (result) {
    uint64_t result = OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_10020E2A0,  result,  *(void *)(result + 40),  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
  }
  *a2 = v2 == 0;
  return result;
}

uint64_t sub_1005B0CD0(uint64_t a1)
{
  v2[20] = a1;
  v2[21] = v1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[22] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[23] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v2[24] = v5;
  v2[25] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for WildModeAssociationRecord(0LL);
  v2[26] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[27] = v7;
  uint64_t v8 = *(void *)(v7 + 64);
  v2[28] = v8;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v2[29] = swift_task_alloc(v9);
  v2[30] = swift_task_alloc(v9);
  v2[31] = swift_task_alloc(v9);
  v2[32] = swift_task_alloc(v9);
  return swift_task_switch(sub_1005B0D88, v1, 0LL);
}

uint64_t sub_1005B0D88()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 264) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1005B0E74;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1005B0E74(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 264LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 168LL);
  *(void *)(*(void *)v1 + 272LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005B0ED4, v3, 0LL);
}

void sub_1005B0ED4()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 272))
  {
    uint64_t v2 = *(void *)(v0 + 160);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = *(void *)(v2 + 16);
    *(void *)(v0 + 280) = v3;
    if (v3)
    {
      uint64_t v4 = *(void *)(v0 + 216);
      uint64_t v5 = *(void *)(v0 + 160);
      *(_DWORD *)(v0 + 384) = *(_DWORD *)(v4 + 80);
      *(void *)(v0 + 288) = *(void *)(v4 + 72);
      swift_bridgeObjectRetain(v5);
      *(void *)(v0 + 296) = 0LL;
      *(void *)(v0 + 304) = 0LL;
      uint64_t v6 = *(void *)(v0 + 256);
      uint64_t v7 = *(void *)(v0 + 208);
      sub_10001DC4C( *(void *)(v0 + 160)
      + ((*(unsigned __int8 *)(v0 + 384) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 384)),
        v6,
        type metadata accessor for WildModeAssociationRecord);
      __asm { BR              X9 }
    }

    if (qword_10099B5A8 != -1) {
      swift_once(&qword_10099B5A8, sub_1005ADA84);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    uint64_t v14 = sub_10000A720(v13, (uint64_t)qword_100A2AD60);
    uint64_t v10 = (void *)Logger.logObject.getter(v14);
    os_log_type_t v15 = static os_log_type_t.default.getter(v10);
    if (!os_log_type_enabled((os_log_t)v10, v15))
    {

      swift_release();
LABEL_14:
      uint64_t v17 = *(void *)(v0 + 248);
      uint64_t v19 = *(void *)(v0 + 232);
      uint64_t v18 = *(void *)(v0 + 240);
      uint64_t v20 = *(void *)(v0 + 200);
      swift_task_dealloc(*(void *)(v0 + 256));
      swift_task_dealloc(v17);
      swift_task_dealloc(v18);
      swift_task_dealloc(v19);
      swift_task_dealloc(v20);
      __asm { BR              X0 }
    }

    unint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)unint64_t v16 = 134349056;
    *(void *)(v0 + 144) = 0LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v16 + 4, v16 + 12);
    _os_log_impl((void *)&_mh_execute_header, (os_log_t)v10, v15, "Removed %{public}ld unstaged records.", v16, 0xCu);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_release();
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B5A8 != -1) {
      swift_once(&qword_10099B5A8, sub_1005ADA84);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    uint64_t v9 = sub_10000A720(v8, (uint64_t)qword_100A2AD60);
    uint64_t v10 = (void *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled((os_log_t)v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v10,  v11,  "Cleanup unstaged records failure: Missing BeaconStoreActor!",  v12,  2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }
  }

  goto LABEL_14;
}

uint64_t sub_1005B1290()
{
  uint64_t v1 = v0[34];
  uint64_t v2 = v0[32];
  uint64_t v4 = v0[24];
  uint64_t v3 = v0[25];
  uint64_t v5 = v0[22];
  uint64_t v6 = v0[23];
  v0[39] = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v5);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 + 24) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_1009669C8, v8 + v4, v7 | 7);
  v0[40] = v9;
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v9 + v8, v3, v5);
  swift_retain();
  return swift_task_switch(sub_1005B1340, 0LL, 0LL);
}

uint64_t sub_1005B1340()
{
  uint64_t v2 = v0[39];
  uint64_t v1 = v0[40];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[41] = v3;
  v3[2] = v2;
  _OWORD v3[3] = sub_1005B3948;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[42] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1005B13EC;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0[31],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_1005B3994,  v3,  v0[26]);
}

uint64_t sub_1005B13EC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 336);
  *(void *)(*v1 + 344) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_1005B1DB0;
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 328);
    uint64_t v7 = *(void *)(v2 + 168);
    swift_release();
    swift_task_dealloc(v6);
    uint64_t v4 = sub_1005B1468;
    uint64_t v5 = v7;
  }

  return swift_task_switch(v4, v5, 0LL);
}

void sub_1005B1468()
{
  __asm { BR              X11 }

uint64_t sub_1005B14C8()
{
  char v2 = _stringCompareWithSmolCheck(_:_:expecting:)( 0x646567617473LL,  0xE600000000000000LL,  0x6465676174736E75LL,  0xE800000000000000LL,  0LL);
  swift_bridgeObjectRelease();
  if ((v2 & 1) != 0) {
    return swift_task_switch(sub_1005B188C, *(void *)(v1 + 272), 0LL);
  }
  uint64_t v3 = *(void *)(v1 + 256);
  sub_100018C68(*(void *)(v1 + 248), type metadata accessor for WildModeAssociationRecord);
  sub_100018C68(v3, type metadata accessor for WildModeAssociationRecord);
  uint64_t v4 = *(void *)(v1 + 296);
  uint64_t v5 = *(void *)(v1 + 304) + 1LL;
  if (v5 != *(void *)(v1 + 280))
  {
    *(void *)(v1 + 296) = v4;
    *(void *)(v1 + 304) = v5;
    uint64_t v11 = *(void *)(v1 + 256);
    uint64_t v12 = *(void *)(v1 + 208);
    sub_10001DC4C( *(void *)(v1 + 160)
    + ((*(unsigned __int8 *)(v1 + 384) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 384))
    + *(void *)(v1 + 288) * v5,
      v11,
      type metadata accessor for WildModeAssociationRecord);
    __asm { BR              X9 }
  }

  swift_bridgeObjectRelease();
  if (qword_10099B5A8 != -1) {
    swift_once(&qword_10099B5A8, sub_1005ADA84);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_10000A720(v6, (uint64_t)qword_100A2AD60);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v10 = 134349056;
    *(void *)(v1 + 144) = v4;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0, v1 + 152, v10 + 4, v10 + 12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Removed %{public}ld unstaged records.", v10, 0xCu);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_release();
  }

  else
  {

    swift_release();
  }

  uint64_t v13 = *(void *)(v1 + 248);
  uint64_t v15 = *(void *)(v1 + 232);
  uint64_t v14 = *(void *)(v1 + 240);
  uint64_t v16 = *(void *)(v1 + 200);
  swift_task_dealloc(*(void *)(v1 + 256));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1005B188C()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 384);
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 240);
  uint64_t v5 = (v1 + 24) & ~v1;
  uint64_t v6 = v5 + *(void *)(v0 + 224);
  uint64_t v7 = v1 | 7;
  *(void *)(v0 + 352) = *(void *)(v2 + 136);
  sub_10001DC4C(v3, v4, type metadata accessor for WildModeAssociationRecord);
  uint64_t v8 = swift_allocObject(&unk_1009669F0, v6, v7);
  *(void *)(v0 + 360) = v8;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = v2;
  sub_10002218C(v4, v8 + v5, type metadata accessor for WildModeAssociationRecord);
  swift_retain();
  return swift_task_switch(sub_1005B1944, 0LL, 0LL);
}

uint64_t sub_1005B1944()
{
  uint64_t v2 = v0[44];
  uint64_t v1 = v0[45];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[46] = v3;
  v3[2] = v2;
  _OWORD v3[3] = sub_1005B3F8C;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[47] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1005B19F0;
  return withCheckedContinuation<A>(isolation:function:_:)( v4,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_10011865C,  v3,  (char *)&type metadata for () + 8);
}

uint64_t sub_1005B19F0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 368);
  swift_task_dealloc(*(void *)(*v0 + 376));
  swift_release();
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005B1A5C, *(void *)(v1 + 272), 0LL);
}

uint64_t sub_1005B1A5C()
{
  return swift_task_switch(sub_1005B1A70, *(void *)(v0 + 168), 0LL);
}

void sub_1005B1A70()
{
  uint64_t v1 = *(void *)(v0 + 296);
  uint64_t v2 = *(void *)(v0 + 256);
  sub_100018C68(*(void *)(v0 + 248), type metadata accessor for WildModeAssociationRecord);
  sub_100018C68(v2, type metadata accessor for WildModeAssociationRecord);
  uint64_t v3 = v1 + 1;
  if (__OFADD__(v1, 1LL))
  {
    __break(1u);
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 304) + 1LL;
    if (v4 != *(void *)(v0 + 280))
    {
      *(void *)(v0 + 296) = v3;
      *(void *)(v0 + 304) = v4;
      uint64_t v10 = *(void *)(v0 + 256);
      uint64_t v11 = *(void *)(v0 + 208);
      sub_10001DC4C( *(void *)(v0 + 160)
      + ((*(unsigned __int8 *)(v0 + 384) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 384))
      + *(void *)(v0 + 288) * v4,
        v10,
        type metadata accessor for WildModeAssociationRecord);
      __asm { BR              X9 }
    }

    swift_bridgeObjectRelease();
    if (qword_10099B5A8 == -1)
    {
LABEL_4:
      uint64_t v5 = type metadata accessor for Logger(0LL);
      uint64_t v6 = sub_10000A720(v5, (uint64_t)qword_100A2AD60);
      uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
      os_log_type_t v8 = static os_log_type_t.default.getter(v7);
      if (os_log_type_enabled(v7, v8))
      {
        os_log_type_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)os_log_type_t v9 = 134349056;
        *(void *)(v0 + 144) = v3;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v9 + 4, v9 + 12);
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "Removed %{public}ld unstaged records.", v9, 0xCu);
        swift_slowDealloc(v9, -1LL, -1LL);
        swift_release();
      }

      else
      {

        swift_release();
      }

      uint64_t v12 = *(void *)(v0 + 248);
      uint64_t v14 = *(void *)(v0 + 232);
      uint64_t v13 = *(void *)(v0 + 240);
      uint64_t v15 = *(void *)(v0 + 200);
      swift_task_dealloc(*(void *)(v0 + 256));
      swift_task_dealloc(v12);
      swift_task_dealloc(v13);
      swift_task_dealloc(v14);
      swift_task_dealloc(v15);
      __asm { BR              X0 }
    }
  }

  swift_once(&qword_10099B5A8, sub_1005ADA84);
  goto LABEL_4;
}

uint64_t sub_1005B1DB0()
{
  return swift_task_switch(sub_1005B1DEC, *(void *)(v0 + 272), 0LL);
}

uint64_t sub_1005B1DEC()
{
  uint64_t v1 = *(void *)(v0 + 168);
  swift_release();
  return swift_task_switch(sub_1005B1E2C, v1, 0LL);
}

void sub_1005B1E2C()
{
  uint64_t v36 = v0 + 152;
  uint64_t v1 = &off_10099B000;
  if (qword_10099B5A8 != -1) {
    swift_once(&qword_10099B5A8, sub_1005ADA84);
  }
  uint64_t v2 = *(void *)(v0 + 344);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 232);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_10000A720(v5, (uint64_t)qword_100A2AD60);
  sub_10001DC4C(v3, v4, type metadata accessor for WildModeAssociationRecord);
  swift_errorRetain(v2);
  uint64_t v6 = swift_errorRetain(v2);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter(v7);
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 344);
  uint64_t v11 = *(void *)(v0 + 256);
  uint64_t v12 = *(void *)(v0 + 232);
  if (v9)
  {
    uint64_t v13 = *(void *)(v0 + 176);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    uint64_t v35 = v5;
    uint64_t v15 = swift_slowAlloc(64LL, -1LL);
    v37[0] = v15;
    *(_DWORD *)uint64_t v14 = 141558531;
    *(void *)(v14 + 4) = 1752392040LL;
    *(_WORD *)(v14 + 12) = 2081;
    uint64_t v16 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
    *(void *)(v14 + 14) = sub_1003F11D4(v17, v18, v37);
    swift_bridgeObjectRelease();
    sub_100018C68(v12, type metadata accessor for WildModeAssociationRecord);
    *(_WORD *)(v14 + 22) = 2082;
    swift_getErrorValue(v10, v36, v0 + 120);
    uint64_t v19 = Error.localizedDescription.getter(*(void *)(v0 + 128), *(void *)(v0 + 136));
    *(void *)(v14 + 24) = sub_1003F11D4(v19, v20, v37);
    swift_bridgeObjectRelease();
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "    Failed to get wild mode beacon for identifier %{private,mask.hash}s\n    Error: %{public}s",  (uint8_t *)v14,  0x20u);
    swift_arrayDestroy(v15, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v21 = v15;
    uint64_t v5 = v35;
    swift_slowDealloc(v21, -1LL, -1LL);
    uint64_t v22 = v14;
    uint64_t v1 = &off_10099B000;
    swift_slowDealloc(v22, -1LL, -1LL);
  }

  else
  {

    swift_errorRelease(v10);
    swift_errorRelease(v10);
    sub_100018C68(v12, type metadata accessor for WildModeAssociationRecord);
  }

  swift_errorRelease(v10);
  sub_100018C68(v11, type metadata accessor for WildModeAssociationRecord);
  uint64_t v23 = *(void *)(v0 + 296);
  uint64_t v24 = *(void *)(v0 + 304) + 1LL;
  if (v24 == *(void *)(v0 + 280))
  {
    swift_bridgeObjectRelease();
    if (v1[181] != (_UNKNOWN *)-1LL) {
      swift_once(&qword_10099B5A8, sub_1005ADA84);
    }
    uint64_t v25 = sub_10000A720(v5, (uint64_t)qword_100A2AD60);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.default.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v28 = 134349056;
      *(void *)(v0 + 144) = v23;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v36, v28 + 4, v28 + 12);
      _os_log_impl((void *)&_mh_execute_header, v26, v27, "Removed %{public}ld unstaged records.", v28, 0xCu);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_release();
    }

    else
    {

      swift_release();
    }

    uint64_t v31 = *(void *)(v0 + 248);
    uint64_t v33 = *(void *)(v0 + 232);
    uint64_t v32 = *(void *)(v0 + 240);
    uint64_t v34 = *(void *)(v0 + 200);
    swift_task_dealloc(*(void *)(v0 + 256));
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    __asm { BR              X0 }
  }

  *(void *)(v0 + 296) = v23;
  *(void *)(v0 + 304) = v24;
  uint64_t v29 = *(void *)(v0 + 256);
  uint64_t v30 = *(void *)(v0 + 208);
  sub_10001DC4C( *(void *)(v0 + 160)
  + ((*(unsigned __int8 *)(v0 + 384) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 384))
  + *(void *)(v0 + 288) * v24,
    v29,
    type metadata accessor for WildModeAssociationRecord);
  __asm { BR              X9 }

uint64_t sub_1005B2364(uint64_t a1, uint64_t a2)
{
  v3[16] = a2;
  v3[17] = v2;
  v3[15] = a1;
  uint64_t v4 = type metadata accessor for Date(0LL);
  v3[18] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[19] = v5;
  uint64_t v6 = *(void *)(v5 + 64);
  v3[20] = v6;
  v3[21] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)(type metadata accessor for WildModeAssociationRecord(0LL) - 8);
  v3[22] = v7;
  uint64_t v8 = *(void *)(v7 + 64);
  v3[23] = v8;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  _BYTE v3[24] = swift_task_alloc(v9);
  v3[25] = swift_task_alloc(v9);
  return swift_task_switch(sub_1005B2404, v2, 0LL);
}

uint64_t sub_1005B2404()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 208) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1005B24F0;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1005B24F0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 208LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 136LL);
  *(void *)(*(void *)v1 + 216LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005B2550, v3, 0LL);
}

uint64_t sub_1005B2550()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 216))
  {
    uint64_t v2 = *(void *)(v0 + 120);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = *(void *)(v2 + 16);
    *(void *)(v0 + 224) = v3;
    if (v3)
    {
      uint64_t v5 = *(void *)(v0 + 168);
      uint64_t v4 = *(void *)(v0 + 176);
      int v6 = *(_DWORD *)(v4 + 80);
      *(_DWORD *)(v0 + 288) = v6;
      *(void *)(v0 + 232) = *(void *)(v4 + 72);
      *(void *)(v0 + 240) = 0LL;
      uint64_t v7 = *(void *)(v0 + 200);
      uint64_t v9 = *(void *)(v0 + 152);
      uint64_t v8 = *(void *)(v0 + 160);
      uint64_t v10 = *(void *)(v0 + 144);
      uint64_t v11 = *(void *)(v0 + 120);
      uint64_t v12 = *(void *)(v0 + 128);
      uint64_t v13 = v11 + ((v6 + 32LL) & ~(unint64_t)v6);
      swift_bridgeObjectRetain(v11);
      sub_10001DC4C(v13, v7, type metadata accessor for WildModeAssociationRecord);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v5, v12, v10);
      uint64_t v14 = *(unsigned __int8 *)(v9 + 80);
      uint64_t v15 = (v14 + 16) & ~v14;
      uint64_t v16 = swift_allocObject(&unk_100966A68, v15 + v8, v14 | 7);
      *(void *)(v0 + 248) = v16;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 32))(v16 + v15, v5, v10);
      return swift_task_switch(sub_1005B2710, *(void *)(v0 + 216), 0LL);
    }

    swift_release();
    uint64_t v25 = *(void *)(v0 + 192);
    uint64_t v26 = *(void *)(v0 + 168);
    swift_task_dealloc(*(void *)(v0 + 200));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  }

  else
  {
    uint64_t v18 = *(void *)(v0 + 192);
    uint64_t v19 = *(void *)(v0 + 200);
    uint64_t v20 = *(void *)(v0 + 168);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    unint64_t v21 = sub_1000157D0();
    uint64_t v22 = swift_allocError(&type metadata for DaemonError, v21, 0LL, 0LL);
    *uint64_t v23 = 0xD000000000000010LL;
    v23[1] = 0x8000000100850F20LL;
    swift_willThrow(v22);
    swift_task_dealloc(v19);
    swift_task_dealloc(v18);
    swift_task_dealloc(v20);
    uint64_t v24 = *(uint64_t (**)(void))(v0 + 8);
  }

  return v24();
}

uint64_t sub_1005B2710()
{
  uint64_t v1 = *(uint64_t (**)(uint64_t))(v0 + 248);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v6 = (v2 + 24) & ~v2;
  unint64_t v7 = (*(void *)(v0 + 184) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v7 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v9 = v2 | 7;
  *(void *)(v0 + 256) = *(void *)(v3 + 136);
  sub_10001DC4C(v4, v5, type metadata accessor for WildModeAssociationRecord);
  uint64_t v10 = swift_allocObject(&unk_100966A90, v8 + 16, v9);
  *(void *)(v0 + 264) = v10;
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = v3;
  sub_10002218C(v5, v10 + v6, type metadata accessor for WildModeAssociationRecord);
  uint64_t v11 = (uint64_t (**)(uint64_t))(v10 + v7);
  *uint64_t v11 = sub_1005B4108;
  v11[1] = v1;
  uint64_t v12 = (void (__swiftcall **)())(v10 + v8);
  *uint64_t v12 = DeviceInformationProviderFactory.init();
  v12[1] = 0LL;
  swift_retain();
  swift_retain();
  return swift_task_switch(sub_1005B2818, 0LL, 0LL);
}

uint64_t sub_1005B2818()
{
  uint64_t v2 = v0[32];
  uint64_t v1 = v0[33];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[34] = v3;
  v3[2] = v2;
  _OWORD v3[3] = sub_1005B4764;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[35] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1005B28C4;
  return withCheckedContinuation<A>(isolation:function:_:)( v4,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_10011895C,  v3,  (char *)&type metadata for () + 8);
}

uint64_t sub_1005B28C4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 272);
  swift_task_dealloc(*(void *)(*v0 + 280));
  swift_release();
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005B2930, *(void *)(v1 + 216), 0LL);
}

uint64_t sub_1005B2930()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_release();
  return swift_task_switch(sub_1005B2970, v1, 0LL);
}

uint64_t sub_1005B2970()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v2 = *(void *)(v0 + 240) + 1LL;
  sub_100018C68(*(void *)(v0 + 200), type metadata accessor for WildModeAssociationRecord);
  if (v2 == v1)
  {
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v3 = *(void *)(v0 + 192);
    uint64_t v4 = *(void *)(v0 + 168);
    swift_task_dealloc(*(void *)(v0 + 200));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v6 = *(void *)(v0 + 232);
    uint64_t v7 = *(void *)(v0 + 240) + 1LL;
    *(void *)(v0 + 240) = v7;
    uint64_t v9 = *(void *)(v0 + 160);
    uint64_t v8 = *(void *)(v0 + 168);
    uint64_t v10 = *(void *)(v0 + 144);
    uint64_t v11 = *(void *)(v0 + 152);
    uint64_t v12 = *(void *)(v0 + 128);
    sub_10001DC4C( *(void *)(v0 + 120)
    + ((*(unsigned __int8 *)(v0 + 288) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 288))
    + v6 * v7,
      *(void *)(v0 + 200),
      type metadata accessor for WildModeAssociationRecord);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v8, v12, v10);
    uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v14 = (v13 + 16) & ~v13;
    uint64_t v15 = swift_allocObject(&unk_100966A68, v14 + v9, v13 | 7);
    *(void *)(v0 + 248) = v15;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 32))(v15 + v14, v8, v10);
    return swift_task_switch(sub_1005B2710, *(void *)(v0 + 216), 0LL);
  }

uint64_t sub_1005B2AB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v18 - v9;
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v18 - v11;
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v12, a2, v13);
  uint64_t v15 = *(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56);
  v15(v12, 0LL, 1LL, v13);
  sub_10001581C((uint64_t)v12, (uint64_t)v7, (uint64_t *)&unk_10099D720);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v7, 1LL, v13) == 1)
  {
    static Date.trustedNow.getter((uint64_t)v10);
    sub_100015794((uint64_t)v7, (uint64_t *)&unk_10099D720);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v10, v7, v13);
  }

  v15(v10, 0LL, 1LL, v13);
  uint64_t v16 = type metadata accessor for WildModeAssociationRecord(0LL);
  sub_100345620((uint64_t)v10, a1 + *(int *)(v16 + 76));
  return sub_100015794((uint64_t)v12, (uint64_t *)&unk_10099D720);
}

uint64_t sub_1005B2C34(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v28[0] = a3;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v31 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v29 = *(void *)(v10 - 8);
  uint64_t v30 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v28 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_1009B41C8);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v28 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v28[1] = *(void *)(a2 + 16);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  uint64_t v17 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v18 = (v17 + 16) & ~v17;
  unint64_t v19 = (v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v20 = swift_allocObject(&unk_100966A18, v19 + 16, v17 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v20 + v18, v16, v13);
  unint64_t v21 = (void *)(v20 + v19);
  *unint64_t v21 = v28[0];
  v21[1] = a4;
  aBlock[4] = sub_1005B4048;
  void aBlock[5] = v20;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100966A30;
  uint64_t v22 = _Block_copy(aBlock);
  uint64_t v23 = swift_retain();
  static DispatchQoS.unspecified.getter(v23);
  uint64_t v32 = _swiftEmptyArrayStorage;
  uint64_t v24 = sub_100015C48( (unint64_t *)&qword_10099FAB0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v25 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  unint64_t v26 = sub_100012FF8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v32, v25, v26, v7, v24);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v9, v22);
  _Block_release(v22);
  (*(void (**)(char *, uint64_t))(v31 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v12, v30);
  return swift_release();
}

uint64_t sub_1005B2EA4(uint64_t a1, void (*a2)(uint64_t))
{
  uint64_t v3 = type metadata accessor for WildModeAssociationRecord(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)v22 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_1009A99D8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (void *)((char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = (char *)v22 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)v22 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)v22 - v17;
  a2(v16);
  swift_storeEnumTagMultiPayload(v12, v6, 0LL);
  sub_100015750((uint64_t)v12, (uint64_t)v15, &qword_1009A99D8);
  sub_100015750((uint64_t)v15, (uint64_t)v18, &qword_1009A99D8);
  sub_10001581C((uint64_t)v18, (uint64_t)v9, &qword_1009A99D8);
  if (swift_getEnumCaseMultiPayload(v9, v6) == 1)
  {
    v22[0] = *v9;
    uint64_t v19 = sub_100004AEC(&qword_1009B41C8);
    CheckedContinuation.resume(throwing:)(v22, v19);
  }

  else
  {
    sub_10002218C((uint64_t)v9, (uint64_t)v5, type metadata accessor for WildModeAssociationRecord);
    uint64_t v20 = sub_100004AEC(&qword_1009B41C8);
    CheckedContinuation.resume(returning:)(v5, v20);
  }

  return sub_100015794((uint64_t)v18, &qword_1009A99D8);
}

uint64_t sub_1005B30A4@<X0>(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = v17[0];
  uint64_t v4 = v17[1];
  uint64_t v6 = v17[2];
  uint64_t v7 = v17[3];
  uint64_t v8 = v17[4];
  uint64_t result = sub_100015750(a1, (uint64_t)v18, &qword_1009AECF0);
  if (v18[0] != 2LL) {
    goto LABEL_14;
  }
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t result = sub_1006A194C(v16);
  double v11 = v10;
  if ((~*(void *)&v10 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_16;
  }

  if (v10 <= -9.22337204e18)
  {
LABEL_16:
    __break(1u);
    goto LABEL_17;
  }

  if (v10 >= 9.22337204e18)
  {
LABEL_17:
    __break(1u);
    goto LABEL_18;
  }

  uint64_t result = sub_1006A1940(v16);
  double v13 = v12 * 0.5;
  if ((~COERCE__INT64(v12 * 0.5) & 0x7FF0000000000000LL) == 0)
  {
LABEL_18:
    __break(1u);
    goto LABEL_19;
  }

  if (v13 <= -9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (v13 >= 9.22337204e18)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  sub_1006A1940(v16);
  double v15 = v14;
  uint64_t result = swift_bridgeObjectRelease();
  if ((~*(void *)&v15 & 0x7FF0000000000000LL) == 0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  if (v15 <= -9.22337204e18)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  if (v15 < 9.22337204e18)
  {
    uint64_t v4 = (uint64_t)v11;
    uint64_t v6 = (uint64_t)v13;
    uint64_t v8 = 707LL;
    uint64_t v5 = 256LL;
    uint64_t v7 = (uint64_t)v15;
LABEL_14:
    *a2 = v5;
    a2[1] = v4;
    a2[2] = v6;
    a2[3] = v7;
    a2[4] = v8;
    return result;
  }

uint64_t sub_1005B3294()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1005B32B8(uint64_t a1, uint64_t a2, char a3)
{
  return sub_1005AE1B4(a1, a2, a3, v3);
}

uint64_t sub_1005B32C0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1005B32EC()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc(dword_1009B416C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000159BC;
  uint64_t v4 = (void *)swift_task_alloc(dword_1009B417C);
  v3[2] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_100015D58;
  v4[7] = v2;
  return swift_task_switch(sub_1005B3384, v2, 0LL);
}

uint64_t sub_1005B336C()
{
  *(void *)(v1 + 56) = v0;
  return swift_task_switch(sub_1005B3384, v0, 0LL);
}

uint64_t sub_1005B3384()
{
  uint64_t v1 = *(void *)(v0[7] + 144LL);
  v0[8] = v1;
  uint64_t v2 = swift_allocObject(&unk_1009669A0, 24LL, 7LL);
  v0[9] = v2;
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v3 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain_n(v1, 2LL);
  uint64_t v4 = (void *)swift_task_alloc(v3);
  v0[10] = v4;
  uint64_t v5 = sub_100004AEC(&qword_1009AE4D0);
  *uint64_t v4 = v0;
  v4[1] = sub_1005B3438;
  return unsafeBlocking<A>(_:)(v0 + 13, sub_1005B37EC, v2, v5);
}

uint64_t sub_1005B3438()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 56LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 80LL));
  swift_release();
  return swift_task_switch(sub_1005B3498, v1, 0LL);
}

uint64_t sub_1005B3498()
{
  uint64_t v1 = *((unsigned int *)&async function pointer to dispatch thunk of WorkItemQueue.enqueueAndAwaitResult(_:) + 1);
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc(v1);
  *(void *)(v0 + 88) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1005B3514;
  return ((uint64_t (*)(void *, void))v4)(&unk_1009A7ED0, *(void *)(v0 + 56));
}

uint64_t sub_1005B3514()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 88);
  *(void *)(*v1 + 96) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 56);
  if (v0)
  {
    uint64_t v5 = sub_1005B35B4;
  }

  else
  {
    swift_release();
    uint64_t v5 = sub_1005B3584;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_1005B3584()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005B35B4()
{
  if (qword_10099B5A8 != -1) {
    swift_once(&qword_10099B5A8, sub_1005ADA84);
  }
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2AD60);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 96);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v13 = v9;
    *(_DWORD *)uint64_t v8 = 136446210;
    swift_getErrorValue(v7, v0 + 40, v0 + 16);
    uint64_t v10 = Error.localizedDescription.getter(*(void *)(v0 + 24), *(void *)(v0 + 32));
    *(void *)(v0 + 48) = sub_1003F11D4(v10, v11, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Records Publish error: %{public}s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);

    swift_errorRelease(v7);
    swift_release();
  }

  else
  {
    swift_release();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005B37C8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1005B37EC@<X0>(BOOL *a1@<X8>)
{
  return sub_1005B0C68(*(void *)(v1 + 16), a1);
}

void *sub_1005B37F4@<X0>(void *a1@<X8>)
{
  return sub_1005EAB44(a1);
}

uint64_t sub_1005B37FC(uint64_t a1)
{
  return sub_10036CA28(a1, v1[2], v1[3], v1[4]);
}

unint64_t sub_1005B3808()
{
  unint64_t result = qword_1009B41A0;
  if (!qword_1009B41A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FC610, &type metadata for SubmitUTInfo);
    atomic_store(result, &qword_1009B41A0);
  }

  return result;
}

unint64_t sub_1005B384C()
{
  unint64_t result = qword_1009B41B0;
  if (!qword_1009B41B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008093F4, &type metadata for WildModeAssociationRecordsPublisherError);
    atomic_store(result, &qword_1009B41B0);
  }

  return result;
}

unint64_t sub_1005B3890()
{
  unint64_t result = qword_1009B41C0;
  if (!qword_1009B41C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FC5E8, &type metadata for UTInfoPublishResponse);
    atomic_store(result, (unint64_t *)&qword_1009B41C0);
  }

  return result;
}

uint64_t sub_1005B38D4()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1005B3948@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  return sub_1005EAB6C(v1 + ((v3 + 24) & ~v3), a1);
}

uint64_t sub_1005B3994(uint64_t a1)
{
  return sub_1005B2C34(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1005B39A0()
{
  uint64_t v1 = v0;
  uint64_t v2 = (int *)type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v3 = *((void *)v2 - 1);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v46 = *(void *)(v3 + 64);
  swift_release();
  uint64_t v47 = (v4 + 24) & ~v4;
  uint64_t v5 = v0 + v47;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v1 + v47, v6);
  uint64_t v9 = v5 + v2[5];
  uint64_t v10 = v5 + v2[7];
  uint64_t v11 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  swift_bridgeObjectRelease();
  uint64_t v12 = v5 + v2[10];
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  double v15 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v15(v12, v13);
  uint64_t v16 = v5 + v2[11];
  uint64_t v44 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (!v44(v16, 1LL, v13)) {
    v15(v16, v13);
  }
  uint64_t v45 = v15;
  swift_bridgeObjectRelease();
  uint64_t v17 = v5 + v2[14];
  uint64_t v18 = type metadata accessor for AccessoryMetadata(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48LL))(v17, 1LL, v18))
  {
    v8(v17, v6);
    sub_100016F9C(*(void *)(v17 + *(int *)(v18 + 20)), *(void *)(v17 + *(int *)(v18 + 20) + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  uint64_t v19 = v5 + v2[15];
  uint64_t v20 = (int *)type metadata accessor for AccessoryProductInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v20 - 1) + 48LL))(v19, 1LL, v20))
  {
    uint64_t v21 = v19 + v20[5];
    uint64_t v22 = type metadata accessor for ServerStatusCode(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v22 - 8) + 8LL))(v21, v22);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v23 = v19 + v20[16];
    uint64_t v24 = type metadata accessor for URL(0LL);
    uint64_t v43 = *(void *)(v24 - 8);
    uint64_t v25 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v43 + 48);
    if (!v25(v23, 1LL, v24)) {
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v23, v24);
    }
    uint64_t v42 = v4;
    uint64_t v26 = v19 + v20[17];
    if (!v25(v26, 1LL, v24)) {
      (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v26, v24);
    }
    swift_bridgeObjectRelease();
    uint64_t v27 = v19 + v20[20];
    uint64_t v28 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 48LL))(v27, 1LL, v28))
    {
      uint64_t v41 = v1;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v29 = v27 + *(int *)(v28 + 40);
      if (!v25(v29, 1LL, v24)) {
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v29, v24);
      }
      uint64_t v30 = v27 + *(int *)(v28 + 44);
      if (!v25(v30, 1LL, v24)) {
        (*(void (**)(uint64_t, uint64_t))(v43 + 8))(v30, v24);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v1 = v41;
    }

    swift_bridgeObjectRelease();
    uint64_t v31 = (uint64_t *)(v19 + v20[23]);
    unint64_t v32 = v31[1];
    uint64_t v4 = v42;
    if (v32 >> 60 != 15) {
      sub_100016F9C(*v31, v32);
    }
    uint64_t v33 = (uint64_t *)(v19 + v20[24]);
    unint64_t v34 = v33[1];
    if (v34 >> 60 != 15) {
      sub_100016F9C(*v33, v34);
    }
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v43 + 8);
    v35(v19 + v20[25], v24);
    v35(v19 + v20[26], v24);
    v35(v19 + v20[27], v24);
    v35(v19 + v20[28], v24);
    v35(v19 + v20[29], v24);
    v35(v19 + v20[30], v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v35(v19 + v20[37], v24);
    v35(v19 + v20[38], v24);
    v35(v19 + v20[39], v24);
    v35(v19 + v20[40], v24);
    v35(v19 + v20[41], v24);
    v35(v19 + v20[42], v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  uint64_t v36 = v5 + v2[18];
  if (!v44(v36, 1LL, v13)) {
    v45(v36, v13);
  }
  uint64_t v37 = v5 + v2[19];
  if (!v44(v37, 1LL, v13)) {
    v45(v37, v13);
  }
  uint64_t v38 = (uint64_t *)(v5 + v2[20]);
  unint64_t v39 = v38[1];
  if (((v39 >> 60) | 4) != 0xF) {
    sub_100016F9C(*v38, v39);
  }
  return swift_deallocObject(v1, v47 + v46, v4 | 7);
}

uint64_t sub_1005B3F8C()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for WildModeAssociationRecord(0LL) - 8) + 80LL);
  return sub_1005EAD5C(*(void *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1005B3FCC()
{
  uint64_t v1 = sub_100004AEC(&qword_1009B41C8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1005B4048()
{
  uint64_t v1 = *(void *)(sub_100004AEC(&qword_1009B41C8) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1005B2EA4( v0 + v2,  *(void (**)(uint64_t))(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1005B4090(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1005B40A0(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1005B40A8()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1005B4108(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for Date(0LL) - 8) + 80LL);
  return sub_1005B2AB0(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_1005B4144()
{
  uint64_t v1 = (int *)type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v44 = *(void *)(v2 + 64);
  swift_release();
  uint64_t v5 = v0 + v4;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v8(v0 + v4, v6);
  uint64_t v9 = v0 + v4 + v1[5];
  uint64_t v10 = v5 + v1[7];
  uint64_t v11 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  swift_bridgeObjectRelease();
  uint64_t v12 = v5 + v1[10];
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v45 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
  v45(v12, v13);
  uint64_t v15 = v5 + v1[11];
  uint64_t v43 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
  if (!v43(v15, 1LL, v13)) {
    v45(v15, v13);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = v5 + v1[14];
  uint64_t v17 = type metadata accessor for AccessoryMetadata(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48LL))(v16, 1LL, v17))
  {
    v8(v16, v6);
    sub_100016F9C(*(void *)(v16 + *(int *)(v17 + 20)), *(void *)(v16 + *(int *)(v17 + 20) + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  uint64_t v18 = v5 + v1[15];
  uint64_t v19 = (int *)type metadata accessor for AccessoryProductInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v19 - 1) + 48LL))(v18, 1LL, v19))
  {
    uint64_t v40 = (v3 + 24) & ~v3;
    uint64_t v20 = v18 + v19[5];
    uint64_t v21 = type metadata accessor for ServerStatusCode(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8LL))(v20, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = v18 + v19[16];
    uint64_t v23 = type metadata accessor for URL(0LL);
    uint64_t v42 = *(void *)(v23 - 8);
    uint64_t v24 = *(unsigned int (**)(void))(v42 + 48);
    uint64_t v41 = v3;
    uint64_t v25 = v18 + v19[17];
    swift_bridgeObjectRelease();
    uint64_t v26 = v18 + v19[20];
    uint64_t v27 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48LL))(v26, 1LL, v27))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v38 = v26 + *(int *)(v27 + 40);
      if (!v24()) {
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v38, v23);
      }
      uint64_t v39 = v26 + *(int *)(v27 + 44);
      if (!v24()) {
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v39, v23);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
    uint64_t v28 = (uint64_t *)(v18 + v19[23]);
    unint64_t v29 = v28[1];
    uint64_t v3 = v41;
    if (v29 >> 60 != 15) {
      sub_100016F9C(*v28, v29);
    }
    uint64_t v30 = (uint64_t *)(v18 + v19[24]);
    unint64_t v31 = v30[1];
    uint64_t v4 = v40;
    if (v31 >> 60 != 15) {
      sub_100016F9C(*v30, v31);
    }
    unint64_t v32 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    v32(v18 + v19[25], v23);
    v32(v18 + v19[26], v23);
    v32(v18 + v19[27], v23);
    v32(v18 + v19[28], v23);
    v32(v18 + v19[29], v23);
    v32(v18 + v19[30], v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v32(v18 + v19[37], v23);
    v32(v18 + v19[38], v23);
    v32(v18 + v19[39], v23);
    v32(v18 + v19[40], v23);
    v32(v18 + v19[41], v23);
    v32(v18 + v19[42], v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  uint64_t v33 = v5 + v1[18];
  if (!v43(v33, 1LL, v13)) {
    v45(v33, v13);
  }
  uint64_t v34 = v5 + v1[19];
  if (!v43(v34, 1LL, v13)) {
    v45(v34, v13);
  }
  uint64_t v35 = (uint64_t *)(v5 + v1[20]);
  unint64_t v36 = v35[1];
  if (((v36 >> 60) | 4) != 0xF) {
    sub_100016F9C(*v35, v36);
  }
  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v44 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | 7);
}

uint64_t sub_1005B4764()
{
  uint64_t v1 = *(void *)(type metadata accessor for WildModeAssociationRecord(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_1005AD808( v0 + v2,  *(void (**)(char *))(v0 + v3),  *(void *)(v0 + v3 + 8),  *(void (**)(char *))(v0 + ((v3 + 23) & 0xFFFFFFFFFFFFFFF8LL)));
}

uint64_t storeEnumTagSinglePayload for WildModeAssociationRecordsPublisherError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1005B4818 + 4 * byte_1008092B9[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1005B484C + 4 * byte_1008092B4[v4]))();
}

uint64_t sub_1005B484C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005B4854(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005B485CLL);
  }
  return result;
}

uint64_t sub_1005B4868(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005B4870LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1005B4874(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005B487C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WildModeAssociationRecordsPublisherError()
{
  return &type metadata for WildModeAssociationRecordsPublisherError;
}

unint64_t sub_1005B489C()
{
  unint64_t result = qword_1009B41D0;
  if (!qword_1009B41D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008093CC, &type metadata for WildModeAssociationRecordsPublisherError);
    atomic_store(result, (unint64_t *)&qword_1009B41D0);
  }

  return result;
}

uint64_t sub_1005B48E0()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2AD78);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2AD78);
  if (qword_10099B5B8 != -1) {
    swift_once(&qword_10099B5B8, sub_1005B8ACC);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_100A2AD90);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_1005B4970()
{
  *(void *)(v1 + 136) = v0;
  *(void *)(v1 + 144) = *v0;
  return swift_task_switch(sub_1005B4990, v0, 0LL);
}

uint64_t sub_1005B4990()
{
  uint64_t v1 = swift_allocObject(&unk_100966C90, 32LL, 7LL);
  *(void *)(v0 + 152) = v1;
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(v0 + 136);
  uint64_t v2 = qword_10099B9E0;
  swift_retain();
  if (v2 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001CEB4((uint64_t)&xmmword_1009BED80, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v5 = (uint64_t (__cdecl *)())((char *)&dword_10099C8C0 + dword_10099C8C0);
    uint64_t v4 = (void *)swift_task_alloc(unk_10099C8C4);
    *(void *)(v0 + 160) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1005B4A9C;
    return v5();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1005B4A9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 160LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 136LL);
  *(void *)(*(void *)v1 + 168LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005B4AFC, v3, 0LL);
}

uint64_t sub_1005B4AFC()
{
  uint64_t v1 = (void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 168);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 152);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v4 = (void *)swift_allocObject(&unk_100966CB8, 40LL, 7LL);
    *(void *)(v0 + 176) = v4;
    v4[2] = v2;
    _OWORD v4[3] = sub_1005B8DFC;
    void v4[4] = v3;
    uint64_t v5 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    swift_retain();
    uint64_t v6 = (void *)swift_task_alloc(v5);
    *(void *)(v0 + 184) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1005B4C9C;
    return unsafeBlocking<A>(_:)(v6, sub_1005B8E10, v4, (char *)&type metadata for () + 8);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B5B0 != -1) {
      swift_once(&qword_10099B5B0, sub_1005B48E0);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    uint64_t v9 = sub_10000A720(v8, (uint64_t)qword_100A2AD78);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "Missing BeaconStore!", v12, 2u);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_release();
    }

    else
    {

      swift_release();
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1005B4C9C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 136LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 184LL));
  swift_release();
  return swift_task_switch(sub_1005B4CFC, v1, 0LL);
}

uint64_t sub_1005B4CFC()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v13 = *(void *)(v0 + 144);
  uint64_t v3 = *(void *)(v0 + 136);
  *(void *)(v0 + 120) = sub_1004F76AC();
  uint64_t v4 = swift_allocObject(&unk_100966CE0, 32LL, 7LL);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = sub_1005B8DFC;
  *(void *)(v4 + 24) = v2;
  swift_retain();
  uint64_t v5 = sub_100004AEC(&qword_1009A32D0);
  uint64_t v6 = sub_1000372EC( (unint64_t *)&unk_1009AE5B0,  &qword_1009A32D0,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v7 = Publisher<>.sink(receiveValue:)(sub_1005B8E78, v4, v5, v6);
  swift_release();
  swift_release();
  *(void *)(v3 + 136) = v7;
  swift_release();
  *(void *)(v0 + 128) = *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_recordDeletedPublisher);
  uint64_t v8 = swift_allocObject(&unk_100966D08, 32LL, 7LL);
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = sub_1005B8DFC;
  *(void *)(v8 + 24) = v2;
  swift_retain();
  swift_retain();
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009B0690);
  uint64_t v10 = sub_1000372EC( (unint64_t *)&unk_1009AE5C0,  (uint64_t *)&unk_1009B0690,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v11 = Publisher<>.sink(receiveValue:)(sub_1005B8EA0, v8, v9, v10);
  swift_release();
  swift_release();
  *(void *)(v3 + 144) = v11;
  swift_release();
  sub_1005B4EB8(v3, v13);
  swift_release();
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005B4EB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = swift_allocObject(&unk_100966D30, 32LL, 7LL);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v4 + 24) = a2;
  swift_retain(a1);
  static Transaction.asyncTask(name:block:)("PublishBeaconsToDaemon", 22LL, 2LL, &unk_1009B4460, v4);
  return swift_release(v4);
}

uint64_t sub_1005B4F38(uint64_t a1)
{
  *(void *)(v1 + 56) = a1;
  uint64_t v2 = (void *)swift_task_alloc(dword_1009B420C);
  *(void *)(v1 + 64) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1005B4F84;
  return sub_1005B5438();
}

uint64_t sub_1005B4F84()
{
  uint64_t v2 = *(void *)(*v1 + 64);
  uint64_t v3 = *v1;
  *(void *)(v3 + 72) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_1005B5058, 0LL, 0LL);
  }
  uint64_t v5 = (void *)swift_task_alloc(dword_1009B4214);
  *(void *)(v3 + 80) = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_1005B5010;
  return sub_1005B6C20();
}

uint64_t sub_1005B5010()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 80));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1005B5058()
{
  if (qword_10099B5B0 != -1) {
    swift_once(&qword_10099B5B0, sub_1005B48E0);
  }
  uint64_t v1 = v0[9];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2AD78);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[9];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = v9;
    *(_DWORD *)uint64_t v8 = 136446210;
    swift_getErrorValue(v7, v0 + 5, v0 + 2);
    uint64_t v10 = Error.localizedDescription.getter(v0[3], v0[4]);
    v0[6] = sub_1003F11D4(v10, v11, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 6, v0 + 7, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to publish beacons to key store: %{public}s.", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);

    swift_errorRelease(v7);
  }

  else
  {
    swift_errorRelease(v0[9]);
    swift_errorRelease(v7);
    swift_errorRelease(v7);
  }

  uint64_t v12 = (void *)swift_task_alloc(dword_1009B4214);
  v0[10] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_1005B5010;
  return sub_1005B6C20();
}

uint64_t sub_1005B5268( uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t a3, uint64_t *a4, void (*a5)(void *, _BYTE *))
{
  uint64_t v9 = type metadata accessor for SharedBeaconRecord(0LL);
  __chkstk_darwin(v9);
  unint64_t v11 = &v18[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v12);
  uint64_t v14 = &v18[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  sub_100013044(a1, (uint64_t)v19);
  uint64_t v15 = sub_100004AEC(a4);
  if (swift_dynamicCast(v14, v19, v15, v12, 6LL))
  {
    sub_100018C68((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
    sub_100013044(a1, (uint64_t)v19);
    uint64_t v16 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v19);
  }

  else
  {
    sub_100013044(a1, (uint64_t)v19);
    a5(v19, v18);
    uint64_t result = swift_dynamicCast(v11, v18, v15, v9, 6LL);
    if (!(_DWORD)result) {
      return result;
    }
    uint64_t v16 = sub_100018C68((uint64_t)v11, type metadata accessor for SharedBeaconRecord);
  }

  return a2(v16);
}

uint64_t sub_1005B53D0(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  BOOL v6 = (void *)swift_task_alloc(dword_1009B4204);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = v6;
  *BOOL v6 = v4;
  v6[1] = sub_100015D58;
  v6[17] = a4;
  v6[18] = *a4;
  return swift_task_switch(sub_1005B4990, a4, 0LL);
}

uint64_t sub_1005B5438()
{
  v1[35] = v0;
  v1[36] = *v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  v1[37] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[38] = v3;
  unint64_t v4 = (*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[39] = swift_task_alloc(v4);
  v1[40] = swift_task_alloc(v4);
  return swift_task_switch(sub_1005B54B0, v0, 0LL);
}

uint64_t sub_1005B54B0()
{
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  *(void *)(v0 + 200) = 0x7365547265646E75LL;
  *(void *)(v0 + 208) = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)( (void *)(v0 + 512),  v0 + 200,  sub_10000A71C,  0LL,  &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v0 + 512) & 1) != 0)
  {
    uint64_t v1 = *(void *)(v0 + 312);
    swift_task_dealloc(*(void *)(v0 + 320));
    swift_task_dealloc(v1);
    uint64_t v2 = *(uint64_t (**)(void))(v0 + 8);
    return v2();
  }

  *(void *)(v0 + 240) = _swiftEmptyArrayStorage;
  uint64_t v3 = qword_10099B9E0;
  swift_retain();
  if (v3 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 176, 0LL, 0LL);
  uint64_t result = sub_10001CEB4((uint64_t)&xmmword_1009BED80, v0 + 136);
  if (*(void *)(v0 + 160))
  {
    sub_100012EC0((__int128 *)(v0 + 136), v0 + 96);
    swift_release();
    sub_100012ED8((void *)(v0 + 96), *(void *)(v0 + 120));
    BOOL v6 = (uint64_t (*)(void))((char *)&dword_10099C890 + dword_10099C890);
    os_log_type_t v5 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 328) = v5;
    *os_log_type_t v5 = v0;
    v5[1] = sub_1005B5654;
    uint64_t v2 = v6;
    return v2();
  }

  __break(1u);
  return result;
}

uint64_t sub_1005B5654(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 328LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 280LL);
  *(void *)(*(void *)v1 + 336LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005B56B4, v3, 0LL);
}

uint64_t sub_1005B56B4()
{
  if (*(void *)(v0 + 336))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 96));
    if (qword_10099B490 != -1) {
      swift_once(&qword_10099B490, sub_10043B5F4);
    }
    uint64_t v1 = type metadata accessor for Logger(0LL);
    *(void *)(v0 + 344) = v1;
    uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2AA68);
    uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
    os_log_type_t v4 = static os_log_type_t.default.getter(v3);
    if (os_log_type_enabled(v3, v4))
    {
      os_log_type_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v5 = 0;
      _os_log_impl((void *)&_mh_execute_header, v3, v4, "Flushing beacon cache on beacon added/removed.", v5, 2u);
      swift_slowDealloc(v5, -1LL, -1LL);
    }

    return swift_task_switch(sub_1005B58A0, *(void *)(v0 + 336), 0LL);
  }

  else
  {
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 96));
    if (qword_10099B5B0 != -1) {
      swift_once(&qword_10099B5B0, sub_1005B48E0);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    uint64_t v8 = sub_10000A720(v7, (uint64_t)qword_100A2AD78);
    uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      unint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v11 = 0;
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Missing BeaconStoreActor!", v11, 2u);
      swift_slowDealloc(v11, -1LL, -1LL);
    }

    uint64_t v12 = *(void *)(v0 + 312);
    swift_task_dealloc(*(void *)(v0 + 320));
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1005B58A0()
{
  *(void *)(v0 + 352) = *(void *)(*(void *)(v0 + 336) + 136LL);
  swift_retain();
  return swift_task_switch(sub_1005B58E4, 0LL, 0LL);
}

uint64_t sub_1005B58E4()
{
  uint64_t v1 = v0[44];
  uint64_t v2 = v0[42];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[45] = v3;
  v3[2] = v1;
  _OWORD v3[3] = sub_1005B8CC4;
  v3[4] = v2;
  os_log_type_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[46] = v4;
  *os_log_type_t v4 = v0;
  v4[1] = sub_1005B5994;
  return withCheckedContinuation<A>(isolation:function:_:)( v4,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_10011865C,  v3,  (char *)&type metadata for () + 8);
}

uint64_t sub_1005B5994()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 360);
  swift_task_dealloc(*(void *)(*v0 + 368));
  swift_release();
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005B5A00, *(void *)(v1 + 336), 0LL);
}

uint64_t sub_1005B5A00()
{
  *(void *)(v0 + 376) = *(void *)(*(void *)(v0 + 336) + 136LL);
  swift_retain();
  return swift_task_switch(sub_1005B5A44, 0LL, 0LL);
}

uint64_t sub_1005B5A44()
{
  uint64_t v1 = v0[47];
  uint64_t v2 = v0[42];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[48] = v3;
  v3[2] = v1;
  _OWORD v3[3] = sub_10001DD18;
  v3[4] = v2;
  os_log_type_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[49] = v4;
  uint64_t v5 = sub_100004AEC(&qword_10099CFB8);
  v0[50] = v5;
  *os_log_type_t v4 = v0;
  v4[1] = sub_1005B5B08;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 27,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_10001DD20,  v3,  v5);
}

uint64_t sub_1005B5B08()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 384);
  uint64_t v3 = *(void *)(*v0 + 280);
  swift_task_dealloc(*(void *)(*v0 + 392));
  swift_release();
  swift_task_dealloc(v2);
  *(void *)(v1 + 408) = *(void *)(v1 + 216);
  return swift_task_switch(sub_1005B5B80, v3, 0LL);
}

uint64_t sub_1005B5B80()
{
  uint64_t v1 = v0[36];
  v0[31] = v0[51];
  uint64_t v2 = swift_task_alloc(32LL);
  v0[52] = v2;
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to Sequence.asyncMap<A>(_:)[1]);
  v0[53] = v3;
  uint64_t v4 = type metadata accessor for KeyGenerationBeaconInfo(0LL);
  v0[54] = v4;
  uint64_t v5 = sub_1000372EC(&qword_1009A2540, &qword_10099CFB8, (uint64_t)&protocol conformance descriptor for [A]);
  *uint64_t v3 = v0;
  v3[1] = sub_1005B5C3C;
  return Sequence.asyncMap<A>(_:)(&unk_1009B4448, v2, v0[50], v4, v5);
}

uint64_t sub_1005B5C3C(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v5 = *(void *)(*v2 + 416);
  uint64_t v4 = *(void *)(*v2 + 424);
  uint64_t v6 = *(void *)(*v2 + 280);
  *(void *)(v3 + 440) = a1;
  *(void *)(v3 + 448) = v1;
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1005B5CB4, v6, 0LL);
}

uint64_t sub_1005B5CB4()
{
  uint64_t v1 = *(void *)(v0 + 448);
  uint64_t v2 = *(void *)(v0 + 280);
  swift_bridgeObjectRetain(*(void *)(v0 + 440));
  sub_100186958(v3);
  sub_1006571FC(*(void *)(v2 + 128));
  if (v1)
  {
    swift_release();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v4 = *(void *)(v0 + 312);
    swift_task_dealloc(*(void *)(v0 + 320));
    swift_task_dealloc(v4);
    uint64_t v5 = *(uint64_t (**)(void))(v0 + 8);
    return v5();
  }

  uint64_t v7 = *(void *)(v0 + 432);
  uint64_t v8 = *(void *)(v0 + 288);
  uint64_t v9 = swift_task_alloc(32LL);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v8;
  uint64_t v10 = swift_task_alloc(32LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = sub_1005B8D34;
  *(void *)(v10 + 24) = v9;
  uint64_t v11 = dispatch thunk of _AnySequenceBox._map<A>(_:)(sub_1005B8D50, v10, v7);
  *(void *)(v0 + 456) = v11;
  uint64_t v12 = v11;
  swift_release();
  swift_task_dealloc(v10);
  swift_task_dealloc(v9);
  swift_bridgeObjectRetain(v12);
  sub_100186958(v13);
  uint64_t result = sub_10001CEB4((uint64_t)&xmmword_1009BED80, v0 + 16);
  if (*(void *)(v0 + 40))
  {
    sub_100012EC0((__int128 *)(v0 + 16), v0 + 56);
    sub_100012ED8((void *)(v0 + 56), *(void *)(v0 + 80));
    uint64_t v15 = (uint64_t (*)(void))((char *)&dword_10099C8A8 + dword_10099C8A8);
    uint64_t v14 = (void *)swift_task_alloc(unk_10099C8AC);
    *(void *)(v0 + 464) = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_1005B5E9C;
    uint64_t v5 = v15;
    return v5();
  }

  __break(1u);
  return result;
}

uint64_t sub_1005B5E9C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 464LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 280LL);
  *(void *)(*(void *)v1 + 472LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005B5EFC, v3, 0LL);
}

uint64_t sub_1005B5EFC()
{
  if (*(void *)(v0 + 472))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
    uid_t v1 = getuid();
    sub_1005E2270(v1);
    uint64_t v2 = *(void *)(v0 + 240);
    *(void *)(v0 + 480) = v2;
    uint64_t v3 = (void *)swift_task_alloc(dword_1009AE894);
    *(void *)(v0 + 488) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1005B6010;
    return sub_100453718(*(void *)(v0 + 320), v2);
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
    unint64_t v5 = sub_1005B8D94();
    uint64_t v6 = swift_allocError(&type metadata for StandaloneBeaconService.StandaloneBeaconServiceError, v5, 0LL, 0LL);
    swift_willThrow(v6);
    swift_release();
    uint64_t v7 = *(void *)(v0 + 312);
    swift_task_dealloc(*(void *)(v0 + 320));
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1005B6010()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 488LL);
  *(void *)(*(void *)v1 + 496LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2[40];
    uint64_t v5 = v2[37];
    uint64_t v6 = v2[38];
    uint64_t v7 = v2[35];
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v8 = sub_1005B6424;
    uint64_t v9 = v7;
  }

  else
  {
    uint64_t v10 = v2[40];
    uint64_t v11 = v2[37];
    uint64_t v12 = v2[35];
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v2[38] + 8LL);
    v2[63] = v13;
    v13(v10, v11);
    swift_bridgeObjectRelease();
    uint64_t v8 = sub_1005B60D8;
    uint64_t v9 = v12;
  }

  return swift_task_switch(v8, v9, 0LL);
}

uint64_t sub_1005B60D8()
{
  if (qword_10099B5B0 != -1) {
    swift_once(&qword_10099B5B0, sub_1005B48E0);
  }
  uint64_t v1 = *(void *)(v0 + 456);
  uint64_t v2 = *(void *)(v0 + 440);
  sub_10000A720(*(void *)(v0 + 344), (uint64_t)qword_100A2AD78);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v0 + 504);
    uint64_t v6 = *(void *)(v0 + 456);
    uint64_t v7 = *(void *)(v0 + 440);
    os_log_type_t type = v5;
    uint64_t v8 = *(void *)(v0 + 312);
    uint64_t v23 = *(void *)(v0 + 296);
    uint64_t v9 = swift_slowAlloc(42LL, -1LL);
    uint64_t v25 = swift_slowAlloc(32LL, -1LL);
    uint64_t v27 = v25;
    *(_DWORD *)uint64_t v9 = 134218755;
    uint64_t v10 = *(void *)(v7 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 256) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v9 + 4, v9 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 12) = 2048;
    uint64_t v11 = *(void *)(v6 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 264) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    *(_WORD *)(v9 + 22) = 2160;
    *(void *)(v0 + 272) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v9 + 24, v9 + 32);
    *(_WORD *)(v9 + 32) = 2081;
    uid_t v12 = getuid();
    sub_1005E2270(v12);
    uint64_t v13 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v14 = dispatch thunk of CustomStringConvertible.description.getter(v23, v13);
    unint64_t v16 = v15;
    v24(v8, v23);
    *(void *)(v0 + 224) = sub_1003F11D4(v14, v16, &v27);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v9 + 34, v9 + 42);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v4,  type,  "Added %ld owned and %ld standalone beacon to key store for user: %{private,mask.hash}s.",  (uint8_t *)v9,  0x2Au);
    swift_arrayDestroy(v25, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v25, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    uint64_t v17 = *(void *)(v0 + 440);
    swift_bridgeObjectRelease_n(*(void *)(v0 + 456), 2LL);
    swift_bridgeObjectRelease_n(v17, 2LL);
  }

  uint64_t v18 = *(void *)(v0 + 496);
  uint64_t v19 = (void *)SPManagedCBPeripheralChangedNotification;
  uint64_t v20 = type metadata accessor for DarwinNotificationHelper(0LL);
  swift_allocObject(v20, *(unsigned int *)(v20 + 48), *(unsigned __int16 *)(v20 + 52));
  DarwinNotificationHelper.init(notificationName:rateLimit:)(v19, 0.0);
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
  if (v18) {
    swift_errorRelease(v18);
  }
  swift_release();
  swift_release();
  swift_release();
  uint64_t v21 = *(void *)(v0 + 312);
  swift_task_dealloc(*(void *)(v0 + 320));
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005B6424()
{
  uint64_t v1 = *(void *)(v0 + 336);
  swift_release(*(void *)(v0 + 472));
  swift_release(v1);
  uint64_t v2 = *(void *)(v0 + 312);
  swift_task_dealloc(*(void *)(v0 + 320));
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005B6474(uint64_t a1, uint64_t a2)
{
  v2[4] = a1;
  v2[5] = a2;
  uint64_t v3 = type metadata accessor for Date(0LL);
  v2[6] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[7] = v4;
  v2[8] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for BeaconIdentifier(0LL);
  void v2[9] = v5;
  v2[10] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OwnedBeaconRecord(0LL);
  v2[11] = v6;
  v2[12] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1005B651C, 0LL, 0LL);
}

uint64_t sub_1005B651C()
{
  if (qword_10099B5B0 != -1) {
    swift_once(&qword_10099B5B0, sub_1005B48E0);
  }
  uint64_t v1 = v0[12];
  uint64_t v2 = v0[5];
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_10000A720(v3, (uint64_t)qword_100A2AD78);
  uint64_t v4 = sub_10001DC4C(v2, v1, type metadata accessor for OwnedBeaconRecord);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter(v5);
  BOOL v7 = os_log_type_enabled(v5, v6);
  uint64_t v8 = v0[12];
  if (v7)
  {
    uint64_t v9 = swift_slowAlloc(22LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v17 = v10;
    *(_DWORD *)uint64_t v9 = 141558275;
    v0[2] = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 2, v0 + 3, v9 + 4, v9 + 12);
    *(_WORD *)(v9 + 12) = 2081;
    uint64_t v11 = type metadata accessor for UUID(0LL);
    uint64_t v12 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
    v0[3] = sub_1003F11D4(v13, v14, &v17);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 3, v0 + 4, v9 + 14, v9 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68(v8, type metadata accessor for OwnedBeaconRecord);
    _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Adding owned beacon to key store: %{private,mask.hash}s.",  (uint8_t *)v9,  0x16u);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(v0[12], type metadata accessor for OwnedBeaconRecord);
  }

  unint64_t v15 = (void *)swift_task_alloc(dword_1009B536C);
  v0[13] = v15;
  *unint64_t v15 = v0;
  v15[1] = sub_1005B6760;
  return sub_1005D2AFC();
}

uint64_t sub_1005B6760(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 104LL);
  *(_BYTE *)(*(void *)v1 + 112LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005B67BC, 0LL, 0LL);
}

uint64_t sub_1005B67BC()
{
  int v17 = *(unsigned __int8 *)(v0 + 112);
  uint64_t v1 = *(void *)(v0 + 88);
  uint64_t v18 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 40);
  uint64_t v6 = *(void *)(v0 + 48);
  uint64_t v8 = *(void *)(v0 + 32);
  uid_t v9 = getuid();
  sub_1005E2270(v9);
  uint64_t v10 = v7 + *(int *)(v1 + 20);
  uint64_t v11 = v2 + *(int *)(v3 + 20);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))(v11, v10, v12);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v7 + *(int *)(v1 + 32), v6);
  if (v17) {
    char v13 = 2;
  }
  else {
    char v13 = 0;
  }
  sub_10002218C(v2, v8, type metadata accessor for BeaconIdentifier);
  unint64_t v14 = (int *)type metadata accessor for KeyGenerationBeaconInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v8 + v14[5], v4, v6);
  unint64_t v15 = (_OWORD *)(v8 + v14[6]);
  *unint64_t v15 = xmmword_1007E7660;
  v15[1] = 0u;
  v15[2] = 0u;
  *(_BYTE *)(v8 + v14[7]) = v13;
  swift_task_dealloc(v18);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005B6900@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v37 = type metadata accessor for StandaloneBeacon(0LL);
  __chkstk_darwin(v37);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B5B0 != -1) {
    swift_once(&qword_10099B5B0, sub_1005B48E0);
  }
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_10000A720(v7, (uint64_t)qword_100A2AD78);
  uint64_t v8 = sub_10001DC4C(a1, (uint64_t)v6, type metadata accessor for StandaloneBeacon);
  uid_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    uint64_t v11 = swift_slowAlloc(22LL, -1LL);
    uint64_t v36 = v2;
    uint64_t v12 = v11;
    uint64_t v35 = swift_slowAlloc(32LL, -1LL);
    uint64_t v40 = v35;
    *(_DWORD *)uint64_t v12 = 141558275;
    uint64_t v38 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v12 + 4, v12 + 12);
    *(_WORD *)(v12 + 12) = 2081;
    uint64_t v34 = v12 + 14;
    uint64_t v13 = type metadata accessor for UUID(0LL);
    uint64_t v14 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v13, v14);
    uint64_t v38 = sub_1003F11D4(v15, v16, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v38, &v39, v34, v12 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v6, type metadata accessor for StandaloneBeacon);
    _os_log_impl( (void *)&_mh_execute_header,  v9,  v10,  "Adding standalone beacon to key store: %{private,mask.hash}s.",  (uint8_t *)v12,  0x16u);
    uint64_t v17 = v35;
    swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v17, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v6, type metadata accessor for StandaloneBeacon);
  }

  uid_t v18 = getuid();
  sub_1005E2270(v18);
  uint64_t v19 = a2 + *(int *)(type metadata accessor for BeaconIdentifier(0LL) + 20);
  uint64_t v20 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 16LL))(v19, a1, v20);
  uint64_t v21 = v37;
  uint64_t v22 = a1 + *(int *)(v37 + 32);
  uint64_t v23 = (int *)type metadata accessor for KeyGenerationBeaconInfo(0LL);
  uint64_t v24 = a2 + v23[5];
  uint64_t v25 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16LL))(v24, v22, v25);
  uint64_t v26 = (void *)(a1 + *(int *)(v21 + 40));
  uint64_t v27 = v26[2];
  unint64_t v28 = v26[3];
  uint64_t v29 = v26[4];
  unint64_t v30 = v26[5];
  uint64_t v31 = a2 + v23[6];
  *(void *)uint64_t v31 = v27;
  *(void *)(v31 + 8) = v28;
  *(void *)(v31 + swift_weakDestroy(v0 + 16) = v29;
  *(void *)(v31 + 24) = v30;
  *(_OWORD *)(v31 + 32) = xmmword_1007E7660;
  *(_BYTE *)(a2 + v23[7]) = 1;
  sub_10001736C(v27, v28);
  return sub_10001736C(v29, v30);
}

uint64_t sub_1005B6C20()
{
  v1[31] = v0;
  uint64_t v2 = type metadata accessor for KeySyncMetadata(0LL);
  v1[32] = v2;
  v1[33] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100004AEC(&qword_1009A2430);
  v1[34] = v3;
  v1[35] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for KeyAlignmentRecord(0LL);
  v1[36] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[37] = v5;
  v1[38] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  v1[39] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v1[40] = v7;
  uint64_t v8 = *(void *)(v7 + 64);
  v1[41] = v8;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v1[42] = swift_task_alloc(v9);
  v1[43] = swift_task_alloc(v9);
  v1[44] = swift_task_alloc(v9);
  uint64_t v10 = sub_100004AEC(&qword_10099D8A0);
  v1[45] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1005B6D38, v0, 0LL);
}

uint64_t sub_1005B6D38()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 216, 0LL, 0LL);
  uint64_t result = sub_10001CEB4((uint64_t)&xmmword_1009BED80, v0 + 96);
  if (*(void *)(v0 + 120))
  {
    sub_100012EC0((__int128 *)(v0 + 96), v0 + 16);
    swift_release();
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v4 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 368) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1005B6E30;
    return v4();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1005B6E30(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 368LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 248LL);
  *(void *)(*(void *)v1 + 376LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005B6E90, v3, 0LL);
}

uint64_t sub_1005B6E90()
{
  uint64_t v1 = *(void *)(v0 + 376);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v1)
  {
    uint64_t result = sub_10001CEB4((uint64_t)&xmmword_1009BED80, v0 + 176);
    if (*(void *)(v0 + 200))
    {
      sub_100012EC0((__int128 *)(v0 + 176), v0 + 136);
      sub_100012ED8((void *)(v0 + 136), *(void *)(v0 + 160));
      uint64_t v10 = (uint64_t (*)(void))((char *)&dword_10099C890 + dword_10099C890);
      uint64_t v3 = (void *)swift_task_alloc(unk_10099C894);
      *(void *)(v0 + 384) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_1005B6FB4;
      return v10();
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 352);
    uint64_t v6 = *(void *)(v0 + 336);
    uint64_t v5 = *(void *)(v0 + 344);
    uint64_t v7 = *(void *)(v0 + 304);
    uint64_t v8 = *(void *)(v0 + 280);
    uint64_t v9 = *(void *)(v0 + 264);
    swift_task_dealloc(*(void *)(v0 + 360));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  return result;
}

uint64_t sub_1005B6FB4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 384LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 248LL);
  *(void *)(*(void *)v1 + 392LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005B7014, v3, 0LL);
}

uint64_t sub_1005B7014()
{
  uint64_t v1 = *(void *)(v0 + 392);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 136));
  if (v1) {
    return swift_task_switch(sub_1005B7194, *(void *)(v0 + 392), 0LL);
  }
  if (qword_10099B5B0 != -1) {
    swift_once(&qword_10099B5B0, sub_1005B48E0);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2AD78);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Missing BeaconStoreActor!", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_release();
  }

  else
  {

    swift_release();
  }

  uint64_t v8 = *(void *)(v0 + 352);
  uint64_t v10 = *(void *)(v0 + 336);
  uint64_t v9 = *(void *)(v0 + 344);
  uint64_t v11 = *(void *)(v0 + 304);
  uint64_t v12 = *(void *)(v0 + 280);
  uint64_t v13 = *(void *)(v0 + 264);
  swift_task_dealloc(*(void *)(v0 + 360));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005B7194()
{
  *(void *)(v0 + 400) = *(void *)(*(void *)(v0 + 392) + 136LL);
  swift_retain();
  return swift_task_switch(sub_1005B71D8, 0LL, 0LL);
}

uint64_t sub_1005B71D8()
{
  uint64_t v2 = v0[49];
  uint64_t v1 = v0[50];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[51] = v3;
  v3[2] = v1;
  _OWORD v3[3] = sub_100117B74;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[52] = v4;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009AE510);
  *uint64_t v4 = v0;
  v4[1] = sub_1005B7294;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 30,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100117B7C,  v3,  v5);
}

uint64_t sub_1005B7294()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 408);
  uint64_t v3 = *(void *)(*v0 + 248);
  swift_task_dealloc(*(void *)(*v0 + 416));
  swift_release();
  swift_task_dealloc(v2);
  *(void *)(v1 + 424) = *(void *)(v1 + 240);
  return swift_task_switch(sub_1005B730C, v3, 0LL);
}

uint64_t sub_1005B730C()
{
  uint64_t v1 = *(void *)(v0 + 424);
  int64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 320);
    unint64_t v30 = _swiftEmptyArrayStorage;
    sub_1000328D0(0, v2, 0);
    uint64_t v4 = v1 + 32;
    uint64_t v5 = _swiftEmptyArrayStorage;
    do
    {
      sub_100013044(v4, v0 + 56);
      uint64_t v6 = *(void *)(v0 + 80);
      uint64_t v7 = *(void *)(v0 + 88);
      sub_100012ED8((void *)(v0 + 56), v6);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v7 + 8) + 8LL) + 32LL))(v6);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
      if ((swift_isUniquelyReferenced_nonNull_native(v5) & 1) == 0)
      {
        sub_1000328D0(0, v5[2] + 1LL, 1);
        uint64_t v5 = v30;
      }

      unint64_t v9 = v5[2];
      unint64_t v8 = v5[3];
      if (v9 >= v8 >> 1)
      {
        sub_1000328D0(v8 > 1, v9 + 1, 1);
        uint64_t v5 = v30;
      }

      uint64_t v10 = *(void *)(v0 + 352);
      uint64_t v11 = *(void *)(v0 + 312);
      _OWORD v5[2] = v9 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32))( (unint64_t)v5 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80))
      + *(void *)(v3 + 72) * v9,
        v10,
        v11);
      unint64_t v30 = v5;
      v4 += 40LL;
      --v2;
    }

    while (v2);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = _swiftEmptyArrayStorage;
  }

  *(void *)(v0 + 432) = v5;
  uint64_t v12 = v5[2];
  *(void *)(v0 + 440) = v12;
  uint64_t v13 = *(void *)(v0 + 320);
  if (v12)
  {
    int v14 = *(_DWORD *)(v13 + 80);
    *(_DWORD *)(v0 + 544) = v14;
    *(void *)(v0 + 448) = *(void *)(v13 + 72);
    uint64_t v15 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 16);
    *(void *)(v0 + 464) = 0LL;
    *(void *)(v0 + 472) = 0LL;
    *(void *)(v0 + 456) = v15;
    uint64_t v16 = *(void *)(v0 + 360);
    uint64_t v17 = *(void *)(v0 + 312);
    v15(v16, (char *)v5 + ((v14 + 32LL) & ~(unint64_t)v14), v17);
    uid_t v18 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v13 + 56);
    *(void *)(v0 + 480) = v18;
    v18(v16, 0LL, 1LL, v17);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v13 + 48))(v16, 1LL, v17) != 1)
    {
      uint64_t v19 = *(void *)(v0 + 360);
      uint64_t v20 = *(void *)(v0 + 344);
      uint64_t v21 = *(void *)(v0 + 312);
      uint64_t v22 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 320) + 32LL);
      *(void *)(v0 + 488) = v22;
      v22(v20, v19, v21);
      return swift_task_switch(sub_1005B75DC, *(void *)(v0 + 392), 0LL);
    }
  }

  else
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v13 + 56))( *(void *)(v0 + 360),  1LL,  1LL,  *(void *)(v0 + 312));
  }

  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  uint64_t v24 = *(void *)(v0 + 352);
  uint64_t v26 = *(void *)(v0 + 336);
  uint64_t v25 = *(void *)(v0 + 344);
  uint64_t v27 = *(void *)(v0 + 304);
  uint64_t v28 = *(void *)(v0 + 280);
  uint64_t v29 = *(void *)(v0 + 264);
  swift_task_dealloc(*(void *)(v0 + 360));
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005B75DC()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 488);
  int64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 456);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 544);
  uint64_t v4 = *(void *)(v0 + 392);
  uint64_t v6 = *(void *)(v0 + 336);
  uint64_t v5 = *(void *)(v0 + 344);
  uint64_t v7 = *(void *)(v0 + 312);
  uint64_t v8 = (v3 + 24) & ~v3;
  uint64_t v9 = v8 + *(void *)(v0 + 328);
  uint64_t v10 = v3 | 7;
  *(void *)(v0 + 496) = *(void *)(v4 + 136);
  v2(v6, v5, v7);
  uint64_t v11 = swift_allocObject(&unk_100966C68, v9, v10);
  *(void *)(v0 + 504) = v11;
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v4;
  v1(v11 + v8, v6, v7);
  swift_retain();
  return swift_task_switch(sub_1005B769C, 0LL, 0LL);
}

uint64_t sub_1005B769C()
{
  uint64_t v2 = v0[62];
  uint64_t v1 = v0[63];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[64] = v3;
  v3[2] = v2;
  _OWORD v3[3] = sub_1005B8C38;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[65] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1005B7744;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[35],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_1005B8C78,  v3,  v0[34]);
}

uint64_t sub_1005B7744()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 512LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 248LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 520LL));
  swift_release();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1005B77B8, v2, 0LL);
}

uint64_t sub_1005B77B8()
{
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 280);
  int v3 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 296) + 48LL))(v2, 1LL, v1);
  uint64_t v4 = *(void *)(v0 + 312);
  if (v3 == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 320) + 8LL))(*(void *)(v0 + 344), *(void *)(v0 + 312));
    sub_1005B8C84(v2);
    uint64_t v5 = *(void *)(v0 + 472) + 1LL;
    if (v5 == *(void *)(v0 + 440))
    {
      (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 480))( *(void *)(v0 + 360),  1LL,  1LL,  *(void *)(v0 + 312));
LABEL_6:
      swift_bridgeObjectRelease();
      swift_release();
      swift_release();
      uint64_t v22 = *(void *)(v0 + 352);
      uint64_t v24 = *(void *)(v0 + 336);
      uint64_t v23 = *(void *)(v0 + 344);
      uint64_t v25 = *(void *)(v0 + 304);
      uint64_t v26 = *(void *)(v0 + 280);
      uint64_t v27 = *(void *)(v0 + 264);
      swift_task_dealloc(*(void *)(v0 + 360));
      swift_task_dealloc(v22);
      swift_task_dealloc(v23);
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      swift_task_dealloc(v27);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }

    *(void *)(v0 + 472) = v5;
    uint64_t v18 = *(void *)(v0 + 360);
    uint64_t v19 = *(void *)(v0 + 312);
    uint64_t v20 = *(void *)(v0 + 320);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 456))( v18,  *(void *)(v0 + 432)
    + ((*(unsigned __int8 *)(v0 + 544) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 544))
    + *(void *)(v0 + 448) * v5,
      v19);
    uint64_t v21 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v20 + 56);
    *(void *)(v0 + 480) = v21;
    v21(v18, 0LL, 1LL, v19);
    uint64_t v29 = *(void *)(v0 + 360);
    uint64_t v30 = *(void *)(v0 + 344);
    uint64_t v31 = *(void *)(v0 + 312);
    unint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 320) + 32LL);
    *(void *)(v0 + 488) = v32;
    v32(v30, v29, v31);
    uint64_t v16 = *(void *)(v0 + 392);
    uint64_t v17 = sub_1005B75DC;
  }

  else
  {
    uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 456);
    uint64_t v7 = *(void *)(v0 + 344);
    uint64_t v8 = *(void *)(v0 + 304);
    uint64_t v10 = *(int **)(v0 + 256);
    uint64_t v9 = *(void *)(v0 + 264);
    sub_10002218C(v2, v8, type metadata accessor for KeyAlignmentRecord);
    v6(v9, v7, v4);
    uint64_t v11 = *(void *)(v8 + *(int *)(v1 + 28));
    uint64_t v12 = (void *)(v9 + v10[6]);
    v12[3] = &type metadata for PrimaryIndex;
    void v12[4] = sub_1000868E4();
    *uint64_t v12 = v11;
    uint64_t v13 = v8 + *(int *)(v1 + 32);
    uint64_t v14 = v9 + v10[7];
    uint64_t v15 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL))(v14, v13, v15);
    *(_BYTE *)(v9 + v10[5]) = 8;
    uint64_t v16 = *(void *)(v0 + 376);
    uint64_t v17 = sub_1005B7A2C;
  }

  return swift_task_switch(v17, v16, 0LL);
}

uint64_t sub_1005B7A2C()
{
  uint64_t v1 = *(void *)(v0[47] + 128LL);
  if (v1)
  {
    uint64_t v2 = v0[58];
    uint64_t v3 = v0[33];
    swift_retain();
    sub_10007DBE4(v3, v1);
    v0[66] = v2;
    if (!v2)
    {
      uint64_t v13 = v0[33];
      uint64_t v14 = v0[31];
      swift_release();
      sub_100018C68(v13, type metadata accessor for KeySyncMetadata);
      uint64_t v11 = sub_1005B7BA8;
      uint64_t v12 = v14;
      return swift_task_switch(v11, v12, 0LL);
    }

    swift_release();
    swift_errorRelease(v2);
    uint64_t v4 = 0LL;
  }

  else
  {
    if (qword_10099B888 != -1) {
      swift_once(&qword_10099B888, sub_1006D6C7C);
    }
    uint64_t v5 = type metadata accessor for Logger(0LL);
    uint64_t v6 = sub_10000A720(v5, (uint64_t)qword_1009BCAF8);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.fault.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "No observation store on this platform!", v9, 2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    uint64_t v4 = v0[58];
  }

  v0[67] = v4;
  uint64_t v10 = v0[31];
  sub_100018C68(v0[33], type metadata accessor for KeySyncMetadata);
  uint64_t v11 = sub_1005B7D50;
  uint64_t v12 = v10;
  return swift_task_switch(v11, v12, 0LL);
}

uint64_t sub_1005B7BA8()
{
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 320);
  sub_100018C68(*(void *)(v0 + 304), type metadata accessor for KeyAlignmentRecord);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v4 = *(void *)(v0 + 472) + 1LL;
  if (v4 == *(void *)(v0 + 440))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 480))( *(void *)(v0 + 360),  1LL,  1LL,  *(void *)(v0 + 312));
LABEL_4:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v9 = *(void *)(v0 + 352);
    uint64_t v11 = *(void *)(v0 + 336);
    uint64_t v10 = *(void *)(v0 + 344);
    uint64_t v12 = *(void *)(v0 + 304);
    uint64_t v13 = *(void *)(v0 + 280);
    uint64_t v14 = *(void *)(v0 + 264);
    swift_task_dealloc(*(void *)(v0 + 360));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  *(void *)(v0 + 464) = *(void *)(v0 + 528);
  *(void *)(v0 + 472) = v4;
  uint64_t v5 = *(void *)(v0 + 360);
  uint64_t v6 = *(void *)(v0 + 312);
  uint64_t v7 = *(void *)(v0 + 320);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 456))( v5,  *(void *)(v0 + 432)
  + ((*(unsigned __int8 *)(v0 + 544) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 544))
  + *(void *)(v0 + 448) * v4,
    v6);
  os_log_type_t v8 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56);
  *(void *)(v0 + 480) = v8;
  v8(v5, 0LL, 1LL, v6);
  uint64_t v16 = *(void *)(v0 + 360);
  uint64_t v17 = *(void *)(v0 + 344);
  uint64_t v18 = *(void *)(v0 + 312);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 320) + 32LL);
  *(void *)(v0 + 488) = v19;
  v19(v17, v16, v18);
  return swift_task_switch(sub_1005B75DC, *(void *)(v0 + 392), 0LL);
}

uint64_t sub_1005B7D50()
{
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 312);
  uint64_t v3 = *(void *)(v0 + 320);
  sub_100018C68(*(void *)(v0 + 304), type metadata accessor for KeyAlignmentRecord);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v2);
  uint64_t v4 = *(void *)(v0 + 472) + 1LL;
  if (v4 == *(void *)(v0 + 440))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 480))( *(void *)(v0 + 360),  1LL,  1LL,  *(void *)(v0 + 312));
LABEL_4:
    swift_bridgeObjectRelease();
    swift_release();
    swift_release();
    uint64_t v9 = *(void *)(v0 + 352);
    uint64_t v11 = *(void *)(v0 + 336);
    uint64_t v10 = *(void *)(v0 + 344);
    uint64_t v12 = *(void *)(v0 + 304);
    uint64_t v13 = *(void *)(v0 + 280);
    uint64_t v14 = *(void *)(v0 + 264);
    swift_task_dealloc(*(void *)(v0 + 360));
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  *(void *)(v0 + 464) = *(void *)(v0 + 536);
  *(void *)(v0 + 472) = v4;
  uint64_t v5 = *(void *)(v0 + 360);
  uint64_t v6 = *(void *)(v0 + 312);
  uint64_t v7 = *(void *)(v0 + 320);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 456))( v5,  *(void *)(v0 + 432)
  + ((*(unsigned __int8 *)(v0 + 544) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 544))
  + *(void *)(v0 + 448) * v4,
    v6);
  os_log_type_t v8 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56);
  *(void *)(v0 + 480) = v8;
  v8(v5, 0LL, 1LL, v6);
  uint64_t v16 = *(void *)(v0 + 360);
  uint64_t v17 = *(void *)(v0 + 344);
  uint64_t v18 = *(void *)(v0 + 312);
  uint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 320) + 32LL);
  *(void *)(v0 + 488) = v19;
  v19(v17, v16, v18);
  return swift_task_switch(sub_1005B75DC, *(void *)(v0 + 392), 0LL);
}

uint64_t sub_1005B7EF8()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for StandaloneBeaconService()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd23StandaloneBeaconService);
}

void *sub_1005B7F5C(void *a1, char *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *(void *)a2;
    *a1 = *(void *)a2;
    a1 = (void *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    uint64_t v8 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v9 = a1;
      uint64_t v10 = a3;
      uint64_t v11 = 1LL;
    }

    else
    {
      uint64_t v13 = (int *)type metadata accessor for StandaloneBeacon(0LL);
      uint64_t v14 = v13[5];
      uint64_t v15 = (char *)a1 + v14;
      uint64_t v16 = &a2[v14];
      uint64_t v17 = type metadata accessor for MACAddress(0LL);
      uint64_t v18 = *(void (**)(char *, char *, uint64_t))(*(void *)(v17 - 8) + 16LL);
      v18(v15, v16, v17);
      v18((char *)a1 + v13[6], &a2[v13[6]], v17);
      uint64_t v19 = v13[7];
      uint64_t v20 = (void *)((char *)a1 + v19);
      uint64_t v21 = &a2[v19];
      uint64_t v22 = *((void *)v21 + 1);
      *uint64_t v20 = *(void *)v21;
      v20[1] = v22;
      uint64_t v23 = v13[8];
      uint64_t v24 = (char *)a1 + v23;
      uint64_t v25 = &a2[v23];
      uint64_t v26 = type metadata accessor for Date(0LL);
      uint64_t v27 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v26 - 8) + 16LL);
      __n128 v28 = swift_bridgeObjectRetain(v22);
      v27(v24, v25, v26, v28);
      uint64_t v29 = v13[9];
      uint64_t v30 = (void *)((char *)a1 + v29);
      uint64_t v31 = (uint64_t *)&a2[v29];
      uint64_t v32 = *v31;
      unint64_t v33 = v31[1];
      sub_10001736C(*v31, v33);
      *uint64_t v30 = v32;
      v30[1] = v33;
      uint64_t v34 = v13[10];
      uint64_t v35 = (void *)((char *)a1 + v34);
      uint64_t v36 = &a2[v34];
      uint64_t v37 = *(void *)&a2[v34];
      unint64_t v38 = *(void *)&a2[v34 + 8];
      sub_10001736C(v37, v38);
      *uint64_t v35 = v37;
      v35[1] = v38;
      uint64_t v39 = *((void *)v36 + 2);
      unint64_t v40 = *((void *)v36 + 3);
      sub_10001736C(v39, v40);
      v35[2] = v39;
      v35[3] = v40;
      uint64_t v41 = *((void *)v36 + 4);
      unint64_t v42 = *((void *)v36 + 5);
      sub_10001736C(v41, v42);
      v35[4] = v41;
      v35[5] = v42;
      uint64_t v43 = v13[11];
      uint64_t v44 = (void *)((char *)a1 + v43);
      uint64_t v45 = (uint64_t *)&a2[v43];
      uint64_t v46 = *v45;
      unint64_t v47 = v45[1];
      sub_10001736C(*v45, v47);
      *uint64_t v44 = v46;
      v44[1] = v47;
      uint64_t v9 = a1;
      uint64_t v10 = a3;
      uint64_t v11 = 0LL;
    }

    swift_storeEnumTagMultiPayload(v9, v10, v11);
  }

  return a1;
}

uint64_t sub_1005B814C(uint64_t a1, uint64_t a2)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a1, a2);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  if (EnumCaseMultiPayload != 1)
  {
    uint64_t v6 = (int *)type metadata accessor for StandaloneBeacon(0LL);
    uint64_t v7 = a1 + v6[5];
    uint64_t v8 = type metadata accessor for MACAddress(0LL);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL);
    v9(v7, v8);
    v9(a1 + v6[6], v8);
    swift_bridgeObjectRelease();
    uint64_t v10 = a1 + v6[8];
    uint64_t v11 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
    sub_100016F9C(*(void *)(a1 + v6[9]), *(void *)(a1 + v6[9] + 8));
    uint64_t v12 = a1 + v6[10];
    sub_100016F9C(*(void *)v12, *(void *)(v12 + 8));
    sub_100016F9C(*(void *)(v12 + 16), *(void *)(v12 + 24));
    sub_100016F9C(*(void *)(v12 + 32), *(void *)(v12 + 40));
    return sub_100016F9C(*(void *)(a1 + v6[11]), *(void *)(a1 + v6[11] + 8));
  }

  return result;
}

uint64_t sub_1005B826C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = 1LL;
  }

  else
  {
    uint64_t v9 = (int *)type metadata accessor for StandaloneBeacon(0LL);
    uint64_t v10 = v9[5];
    uint64_t v11 = a1 + v10;
    uint64_t v12 = a2 + v10;
    uint64_t v13 = type metadata accessor for MACAddress(0LL);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL);
    v14(v11, v12, v13);
    v14(a1 + v9[6], a2 + v9[6], v13);
    uint64_t v15 = v9[7];
    uint64_t v16 = (void *)(a1 + v15);
    uint64_t v17 = (void *)(a2 + v15);
    uint64_t v18 = v17[1];
    *uint64_t v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = v9[8];
    uint64_t v20 = a1 + v19;
    uint64_t v21 = a2 + v19;
    uint64_t v22 = type metadata accessor for Date(0LL);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v22 - 8) + 16LL);
    __n128 v24 = swift_bridgeObjectRetain(v18);
    v23(v20, v21, v22, v24);
    uint64_t v25 = v9[9];
    uint64_t v26 = (uint64_t *)(a1 + v25);
    uint64_t v27 = (uint64_t *)(a2 + v25);
    uint64_t v28 = *v27;
    unint64_t v29 = v27[1];
    sub_10001736C(*v27, v29);
    *uint64_t v26 = v28;
    v26[1] = v29;
    uint64_t v30 = v9[10];
    uint64_t v31 = (uint64_t *)(a1 + v30);
    uint64_t v32 = (void *)(a2 + v30);
    uint64_t v33 = *(void *)(a2 + v30);
    unint64_t v34 = *(void *)(a2 + v30 + 8);
    sub_10001736C(v33, v34);
    *uint64_t v31 = v33;
    v31[1] = v34;
    uint64_t v35 = v32[2];
    unint64_t v36 = v32[3];
    sub_10001736C(v35, v36);
    void v31[2] = v35;
    v31[3] = v36;
    uint64_t v37 = v32[4];
    unint64_t v38 = v32[5];
    sub_10001736C(v37, v38);
    v31[4] = v37;
    v31[5] = v38;
    uint64_t v39 = v9[11];
    unint64_t v40 = (uint64_t *)(a1 + v39);
    uint64_t v41 = (uint64_t *)(a2 + v39);
    uint64_t v42 = *v41;
    unint64_t v43 = v41[1];
    sub_10001736C(*v41, v43);
    uint64_t v8 = 0LL;
    *unint64_t v40 = v42;
    v40[1] = v43;
  }

  swift_storeEnumTagMultiPayload(a1, a3, v8);
  return a1;
}

uint64_t sub_1005B8428(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100018C68(a1, type metadata accessor for StandaloneBeaconService.BeaconStreamChange);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = 1LL;
    }

    else
    {
      uint64_t v9 = (int *)type metadata accessor for StandaloneBeacon(0LL);
      uint64_t v10 = v9[5];
      uint64_t v11 = a1 + v10;
      uint64_t v12 = a2 + v10;
      uint64_t v13 = type metadata accessor for MACAddress(0LL);
      uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL);
      v14(v11, v12, v13);
      v14(a1 + v9[6], a2 + v9[6], v13);
      uint64_t v15 = v9[7];
      uint64_t v16 = (void *)(a1 + v15);
      uint64_t v17 = (void *)(a2 + v15);
      *uint64_t v16 = *v17;
      uint64_t v18 = v17[1];
      v16[1] = v18;
      uint64_t v19 = v9[8];
      uint64_t v20 = a1 + v19;
      uint64_t v21 = a2 + v19;
      uint64_t v22 = type metadata accessor for Date(0LL);
      uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v22 - 8) + 16LL);
      __n128 v24 = swift_bridgeObjectRetain(v18);
      v23(v20, v21, v22, v24);
      uint64_t v25 = v9[9];
      uint64_t v26 = (uint64_t *)(a1 + v25);
      uint64_t v27 = (uint64_t *)(a2 + v25);
      uint64_t v28 = *v27;
      unint64_t v29 = v27[1];
      sub_10001736C(*v27, v29);
      *uint64_t v26 = v28;
      v26[1] = v29;
      uint64_t v30 = v9[10];
      uint64_t v31 = (uint64_t *)(a1 + v30);
      uint64_t v32 = (void *)(a2 + v30);
      uint64_t v33 = *(void *)(a2 + v30);
      unint64_t v34 = *(void *)(a2 + v30 + 8);
      sub_10001736C(v33, v34);
      *uint64_t v31 = v33;
      v31[1] = v34;
      uint64_t v35 = v32[2];
      unint64_t v36 = v32[3];
      sub_10001736C(v35, v36);
      void v31[2] = v35;
      v31[3] = v36;
      uint64_t v37 = v32[4];
      unint64_t v38 = v32[5];
      sub_10001736C(v37, v38);
      v31[4] = v37;
      v31[5] = v38;
      uint64_t v39 = v9[11];
      unint64_t v40 = (uint64_t *)(a1 + v39);
      uint64_t v41 = (uint64_t *)(a2 + v39);
      uint64_t v42 = *v41;
      unint64_t v43 = v41[1];
      sub_10001736C(*v41, v43);
      uint64_t v8 = 0LL;
      *unint64_t v40 = v42;
      v40[1] = v43;
    }

    swift_storeEnumTagMultiPayload(a1, a3, v8);
  }

  return a1;
}

uint64_t type metadata accessor for StandaloneBeaconService.BeaconStreamChange(uint64_t a1)
{
  uint64_t result = qword_1009B43E8;
  if (!qword_1009B43E8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StandaloneBeaconService.BeaconStreamChange);
  }
  return result;
}

uint64_t sub_1005B8640(uint64_t a1, uint64_t a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = 1LL;
  }

  else
  {
    uint64_t v9 = (int *)type metadata accessor for StandaloneBeacon(0LL);
    uint64_t v10 = v9[5];
    uint64_t v11 = a1 + v10;
    uint64_t v12 = a2 + v10;
    uint64_t v13 = type metadata accessor for MACAddress(0LL);
    uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL);
    v14(v11, v12, v13);
    v14(a1 + v9[6], a2 + v9[6], v13);
    *(_OWORD *)(a1 + v9[7]) = *(_OWORD *)(a2 + v9[7]);
    uint64_t v15 = v9[8];
    uint64_t v16 = a1 + v15;
    uint64_t v17 = a2 + v15;
    uint64_t v18 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32LL))(v16, v17, v18);
    uint64_t v8 = 0LL;
    *(_OWORD *)(a1 + v9[9]) = *(_OWORD *)(a2 + v9[9]);
    uint64_t v19 = v9[10];
    uint64_t v20 = (_OWORD *)(a1 + v19);
    uint64_t v21 = (_OWORD *)(a2 + v19);
    __int128 v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    void v20[2] = v21[2];
    *(_OWORD *)(a1 + v9[11]) = *(_OWORD *)(a2 + v9[11]);
  }

  swift_storeEnumTagMultiPayload(a1, a3, v8);
  return a1;
}

uint64_t sub_1005B878C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100018C68(a1, type metadata accessor for StandaloneBeaconService.BeaconStreamChange);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = 1LL;
    }

    else
    {
      uint64_t v9 = (int *)type metadata accessor for StandaloneBeacon(0LL);
      uint64_t v10 = v9[5];
      uint64_t v11 = a1 + v10;
      uint64_t v12 = a2 + v10;
      uint64_t v13 = type metadata accessor for MACAddress(0LL);
      uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL);
      v14(v11, v12, v13);
      v14(a1 + v9[6], a2 + v9[6], v13);
      *(_OWORD *)(a1 + v9[7]) = *(_OWORD *)(a2 + v9[7]);
      uint64_t v15 = v9[8];
      uint64_t v16 = a1 + v15;
      uint64_t v17 = a2 + v15;
      uint64_t v18 = type metadata accessor for Date(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 32LL))(v16, v17, v18);
      uint64_t v8 = 0LL;
      *(_OWORD *)(a1 + v9[9]) = *(_OWORD *)(a2 + v9[9]);
      uint64_t v19 = v9[10];
      uint64_t v20 = (_OWORD *)(a1 + v19);
      uint64_t v21 = (_OWORD *)(a2 + v19);
      __int128 v22 = v21[1];
      *uint64_t v20 = *v21;
      v20[1] = v22;
      void v20[2] = v21[2];
      *(_OWORD *)(a1 + v9[11]) = *(_OWORD *)(a2 + v9[11]);
    }

    swift_storeEnumTagMultiPayload(a1, a3, v8);
  }

  return a1;
}

uint64_t sub_1005B88F0(uint64_t a1)
{
  uint64_t result = type metadata accessor for StandaloneBeacon(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for UUID(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v5);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1005B8970()
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A9BF0);
  *(void *)(v1 + 24) = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1005B89CC, v0, 0LL);
}

uint64_t sub_1005B89CC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  uint64_t v5 = sub_100015C48( &qword_1009B4428,  v4,  (uint64_t (*)(uint64_t))type metadata accessor for StandaloneBeaconService,  (uint64_t)&unk_1008094E0);
  uint64_t v6 = (void *)swift_allocObject(&unk_100966C40, 40LL, 7LL);
  _OWORD v6[2] = v1;
  void v6[3] = v5;
  void v6[4] = v1;
  swift_retain_n(v1, 2LL);
  sub_1003EDB00(v2, (uint64_t)&unk_1009B4438, (uint64_t)v6);
  swift_release();
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005B8A90(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100015C48( &qword_1009B4428,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for StandaloneBeaconService,  (uint64_t)&unk_1008094E0);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1005B8ACC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2AD90);
  sub_10000A720(v0, (uint64_t)qword_100A2AD90);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000017LL,  0x8000000100809460LL);
}

uint64_t sub_1005B8B4C()
{
  return sub_1004BD380((void (*)(void))&_swift_unknownObjectRelease);
}

uint64_t sub_1005B8B58(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = (void *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1009B4434);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100015D58;
  return sub_1005B53D0(a1, v4, v5, v6);
}

uint64_t sub_1005B8BC4()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1005B8C38@<X0>(uint64_t a1@<X8>)
{
  return sub_1005EB9A4(a1);
}

uint64_t sub_1005B8C78(uint64_t a1)
{
  return sub_10036CD88(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1005B8C84(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A2430);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1005B8CC4()
{
  return sub_1005EA610();
}

uint64_t sub_1005B8CCC(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = (void *)swift_task_alloc(dword_1009B4444);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000159BC;
  return sub_1005B6474(a1, a2);
}

uint64_t sub_1005B8D34@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005B6900(a1, a2);
}

uint64_t sub_1005B8D50()
{
  uint64_t result = (*(uint64_t (**)(void))(v0 + 16))();
  if (v1) {
    return swift_allocError(&type metadata for Never, &protocol witness table for Never, 0LL, 0LL);
  }
  return result;
}

unint64_t sub_1005B8D94()
{
  unint64_t result = qword_1009B4450;
  if (!qword_1009B4450)
  {
    unint64_t result = swift_getWitnessTable( &unk_100809598,  &type metadata for StandaloneBeaconService.StandaloneBeaconServiceError);
    atomic_store(result, &qword_1009B4450);
  }

  return result;
}

uint64_t sub_1005B8DD8()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1005B8DFC()
{
  return sub_1005B4EB8(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1005B8E04()
{
  return sub_1004BD380((void (*)(void))&_swift_release);
}

uint64_t sub_1005B8E10()
{
  uint64_t v1 = v0[2];
  uint64_t v2 = (void (*)(uint64_t))v0[3];
  uint64_t v3 = v0[4];
  swift_retain();
  sub_100563BF0(v1, v2, v3);
  return swift_release();
}

uint64_t sub_1005B8E54()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1005B8E78(uint64_t a1)
{
  return sub_1005B5268( a1,  *(uint64_t (**)(uint64_t))(v1 + 16),  *(void *)(v1 + 24),  &qword_1009AE670,  (void (*)(void *, _BYTE *))sub_100012EC0);
}

uint64_t sub_1005B8EA0(uint64_t a1)
{
  return sub_1005B5268( a1,  *(uint64_t (**)(uint64_t))(v1 + 16),  *(void *)(v1 + 24),  &qword_1009A3308,  (void (*)(void *, _BYTE *))sub_100012EC0);
}

uint64_t sub_1005B8EC8()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc(dword_1009B445C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_1000159BC;
  v3[7] = v2;
  uint64_t v4 = (void *)swift_task_alloc(dword_1009B420C);
  v3[8] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_1005B4F84;
  return sub_1005B5438();
}

uint64_t storeEnumTagSinglePayload for StandaloneBeaconService.StandaloneBeaconServiceError( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1005B8F74 + 4 * byte_100809440[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1005B8F94 + 4 * byte_100809445[v4]))();
  }
}

_BYTE *sub_1005B8F74(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1005B8F94(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1005B8F9C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1005B8FA4(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1005B8FAC(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1005B8FB4(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for StandaloneBeaconService.StandaloneBeaconServiceError()
{
  return &type metadata for StandaloneBeaconService.StandaloneBeaconServiceError;
}

unint64_t sub_1005B8FD4()
{
  unint64_t result = qword_1009B4468;
  if (!qword_1009B4468)
  {
    unint64_t result = swift_getWitnessTable( &unk_100809570,  &type metadata for StandaloneBeaconService.StandaloneBeaconServiceError);
    atomic_store(result, (unint64_t *)&qword_1009B4468);
  }

  return result;
}

uint64_t sub_1005B9020@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

double sub_1005B9060(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 24));
}

double sub_1005B906C(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 28));
}

double sub_1005B9078(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 32));
}

uint64_t sub_1005B9084@<X0>( int a1@<W0>, uint64_t a2@<X1>, int a3@<W2>, uint64_t a4@<X3>, uint64_t a5@<X4>, int a6@<W5>, _BYTE *a7@<X8>, double a8@<D0>, double a9@<D1>, double a10@<D2>)
{
  int v51 = a6;
  uint64_t v44 = a5;
  int v43 = a3;
  int v47 = a1;
  int v48 = a3;
  uint64_t v16 = type metadata accessor for UUID(0LL);
  uint64_t v49 = *(void *)(v16 - 8);
  uint64_t v50 = v16;
  __chkstk_darwin(v16);
  uint64_t v18 = &v42[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v19 = sub_100004AEC(&qword_1009AC230);
  __chkstk_darwin(v19);
  uint64_t v21 = &v42[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v22 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v22);
  __n128 v24 = &v42[-((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v25 = type metadata accessor for Date(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v28 = &v42[-((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  unint64_t v29 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v26 + 16);
  uint64_t v46 = a2;
  v29(v28, a2, v25);
  uint64_t v30 = a4;
  uint64_t v31 = a4;
  uint64_t v32 = v44;
  sub_10001581C(v31, (uint64_t)v24, (uint64_t *)&unk_10099D720);
  uint64_t v45 = v21;
  uint64_t v33 = sub_10001581C(v32, (uint64_t)v21, &qword_1009AC230);
  if ((v43 & 0xFE) == 0xC)
  {
    unint64_t v34 = v18;
    if (qword_10099B5C0 != -1) {
      swift_once(&qword_10099B5C0, sub_1005B9388);
    }
    uint64_t v35 = v50;
    uint64_t v36 = sub_10000A720(v50, (uint64_t)qword_100A2ADA8);
    uint64_t v37 = v49;
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v49 + 16))(v34, v36, v35);
  }

  else
  {
    UUID.init()(v33);
    unint64_t v34 = v18;
    uint64_t v37 = v49;
    uint64_t v35 = v50;
  }

  sub_100015794(v32, &qword_1009AC230);
  sub_100015794(v30, (uint64_t *)&unk_10099D720);
  (*(void (**)(uint64_t, uint64_t))(v26 + 8))(v46, v25);
  *a7 = v47;
  unint64_t v38 = (int *)type metadata accessor for RawSearchResult(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v26 + 32))(&a7[v38[5]], v28, v25);
  *(double *)&a7[v38[6]] = a8;
  *(double *)&a7[v38[7]] = a9;
  *(double *)&a7[v38[8]] = a10;
  a7[v38[9]] = v48;
  sub_100015750((uint64_t)v24, (uint64_t)&a7[v38[10]], (uint64_t *)&unk_10099D720);
  sub_100015750((uint64_t)v45, (uint64_t)&a7[v38[11]], &qword_1009AC230);
  uint64_t result = (*(uint64_t (**)(_BYTE *, _BYTE *, uint64_t))(v37 + 32))(&a7[v38[12]], v34, v35);
  unint64_t v40 = &a7[v38[13]];
  char v41 = BYTE1(v51);
  *unint64_t v40 = v51;
  v40[1] = v41 & 1;
  return result;
}

uint64_t sub_1005B9388()
{
  uint64_t v0 = type metadata accessor for UUID(0LL);
  sub_10000A8AC(v0, qword_100A2ADA8);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2ADA8);
  return UUID.init()(v1);
}

void sub_1005B93D0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  uint64_t v39 = *(void *)(v4 - 8);
  uint64_t v40 = v4;
  __chkstk_darwin(v4);
  uint64_t v38 = (uint64_t)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_1009AC230);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v38 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Hasher._combine(_:)(*v1);
  uint64_t v16 = (int *)type metadata accessor for RawSearchResult(0LL);
  uint64_t v17 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v9, v17);
  if ((*(void *)&v1[v16[6]] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v18 = *(void *)&v1[v16[6]];
  }
  else {
    Swift::UInt64 v18 = 0LL;
  }
  Hasher._combine(_:)(v18);
  if ((*(void *)&v1[v16[7]] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v19 = *(void *)&v1[v16[7]];
  }
  else {
    Swift::UInt64 v19 = 0LL;
  }
  Hasher._combine(_:)(v19);
  if ((*(void *)&v1[v16[8]] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v20 = *(void *)&v1[v16[8]];
  }
  else {
    Swift::UInt64 v20 = 0LL;
  }
  Hasher._combine(_:)(v20);
  Hasher._combine(_:)(v1[v16[9]]);
  sub_10001581C((uint64_t)&v1[v16[10]], (uint64_t)v15, (uint64_t *)&unk_10099D720);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v15, 1LL, v9) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v15, v9);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)(a1, v9, v17);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  }

  sub_10001581C((uint64_t)&v1[v16[11]], (uint64_t)v8, &qword_1009AC230);
  uint64_t v21 = v40;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48))(v8, 1LL, v40) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v22 = (uint64_t)v8;
    uint64_t v23 = v38;
    sub_1005BA6BC(v22, v38);
    Hasher._combine(_:)(1u);
    uint64_t v24 = type metadata accessor for UUID(0LL);
    uint64_t v25 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(a1, v24, v25);
    uint64_t v26 = (void *)(v23 + *(int *)(v21 + 20));
    uint64_t v28 = v26[3];
    uint64_t v27 = v26[4];
    sub_100012ED8(v26, v28);
    dispatch thunk of RawRepresentable.rawValue.getter(&v41, v28, *(void *)(v27 + 56));
    Hasher._combine(_:)(v41);
    uint64_t v29 = v26[3];
    uint64_t v30 = v26[4];
    sub_100012ED8(v26, v29);
    int v31 = sub_1005F5498(v29, v30);
    if (v31)
    {
      if (v31 == 1)
      {
        unint64_t v32 = 0xE900000000000079LL;
        uint64_t v33 = 0x7261646E6F636553LL;
      }

      else
      {
        unint64_t v32 = 0xEF736E6F69746163LL;
        uint64_t v33 = 0x6F4C657275636553LL;
      }
    }

    else
    {
      unint64_t v32 = 0xE700000000000000LL;
      uint64_t v33 = 0x7972616D697250LL;
    }

    String.hash(into:)(a1, v33, v32);
    swift_bridgeObjectRelease();
    sub_100018C68(v23, type metadata accessor for BeaconKeyManager.IndexInformation);
  }

  uint64_t v34 = type metadata accessor for UUID(0LL);
  uint64_t v35 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v34, v35);
  uint64_t v36 = &v2[v16[13]];
  if ((v36[1] & 1) != 0)
  {
    Swift::UInt8 v37 = 0;
  }

  else
  {
    Swift::UInt8 v37 = *v36;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v37);
}

uint64_t sub_1005B9814(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1005B9844 + 4 * byte_1008095D8[a1]))( 0x737574617473LL,  0xE600000000000000LL);
}

uint64_t sub_1005B9844()
{
  return 0x6D617473656D6974LL;
}

uint64_t sub_1005B9864()
{
  return 0x656475746974616CLL;
}

uint64_t sub_1005B987C()
{
  return 0x64757469676E6F6CLL;
}

unint64_t sub_1005B9898()
{
  return 0xD000000000000012LL;
}

uint64_t sub_1005B98B8()
{
  return 0x656372756F73LL;
}

uint64_t sub_1005B98C8()
{
  return 0x657461446E616373LL;
}

unint64_t sub_1005B98E0()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1005B98FC()
{
  return 0x696669746E656469LL;
}

uint64_t sub_1005B9918()
{
  return 1953393000LL;
}

uint64_t sub_1005B9928(void *a1)
{
  int v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B4548);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1005BBB1C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for RawSearchResult.CodingKeys,  &type metadata for RawSearchResult.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  v41[1] = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12);
  if (!v2)
  {
    uint64_t v13 = (int *)type metadata accessor for RawSearchResult(0LL);
    uint64_t v14 = &v3[v13[5]];
    v41[0] = 1;
    uint64_t v15 = type metadata accessor for Date(0LL);
    uint64_t v16 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, v41, v5, v15, v16);
    double v17 = *(double *)&v3[v13[6]];
    char v40 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v40, v5, v17);
    double v18 = *(double *)&v3[v13[7]];
    char v39 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(&v39, v5, v18);
    double v19 = *(double *)&v3[v13[8]];
    char v38 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(&v38, v5, v19);
    unsigned __int8 v37 = v3[v13[9]];
    char v36 = 5;
    unint64_t v20 = sub_10016EF94();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v37, &v36, v5, &type metadata for LocationSource, v20);
    uint64_t v21 = &v3[v13[10]];
    char v35 = 6;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v21, &v35, v5, v15, v16);
    uint64_t v22 = &v3[v13[11]];
    char v34 = 7;
    uint64_t v23 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
    uint64_t v24 = sub_100007864( &qword_1009B4550,  type metadata accessor for BeaconKeyManager.IndexInformation,  (uint64_t)&unk_10081CAF8);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v22, &v34, v5, v23, v24);
    uint64_t v25 = &v3[v13[12]];
    char v33 = 8;
    uint64_t v26 = type metadata accessor for UUID(0LL);
    uint64_t v27 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v33, v5, v26, v27);
    uint64_t v28 = &v3[v13[13]];
    unsigned int v29 = *v28;
    LODWORD(v28) = v28[1];
    char v32 = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v29 | ((_DWORD)v28 << 8), &v32, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1005B9C80@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v45 = a2;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v46 = *(void *)(v3 - 8);
  uint64_t v47 = v3;
  __chkstk_darwin(v3);
  uint64_t v5 = (uint64_t *)((char *)&v41 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = sub_100004AEC(&qword_1009AC230);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v41 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v41 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v50 = *(void *)(v12 - 8);
  uint64_t v51 = v12;
  __chkstk_darwin(v12);
  uint64_t v14 = (uint64_t *)((char *)&v41 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v49 = sub_100004AEC(&qword_1009B4530);
  uint64_t v15 = *(void *)(v49 - 8);
  __chkstk_darwin(v49);
  double v17 = (char *)&v41 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = type metadata accessor for RawSearchResult(0LL);
  __chkstk_darwin(v54);
  uint64_t v55 = (char *)&v41 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = a1[3];
  uint64_t v19 = a1[4];
  uint64_t v52 = a1;
  sub_100012ED8(a1, v20);
  unint64_t v21 = sub_1005BBB1C();
  int v48 = v17;
  uint64_t v22 = v53;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for RawSearchResult.CodingKeys,  &type metadata for RawSearchResult.CodingKeys,  v21,  v20,  v19);
  if (v22) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v52);
  }
  int v43 = v8;
  uint64_t v44 = v11;
  uint64_t v53 = v15;
  uint64_t v42 = v5;
  BYTE5(v61) = 0;
  uint64_t v23 = v49;
  char v24 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v61 + 5, v49);
  uint64_t v25 = v55;
  *uint64_t v55 = v24;
  BYTE4(v61) = 1;
  uint64_t v26 = sub_100007864( &qword_10099DA70,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v27 = v51;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v14, v51, (char *)&v61 + 4, v23, v51, v26);
  uint64_t v28 = (int *)v54;
  (*(void (**)(_BYTE *, void *, uint64_t))(v50 + 32))(&v25[*(int *)(v54 + 20)], v14, v27);
  BYTE3(v61) = 2;
  *(double *)&v25[v28[6]] = KeyedDecodingContainer.decode(_:forKey:)((char *)&v61 + 3, v23);
  BYTE2(v61) = 3;
  *(double *)&v25[v28[7]] = KeyedDecodingContainer.decode(_:forKey:)((char *)&v61 + 2, v23);
  BYTE1(v61) = 4;
  *(double *)&v25[v28[8]] = KeyedDecodingContainer.decode(_:forKey:)((char *)&v61 + 1, v23);
  char v60 = 5;
  unint64_t v29 = sub_10016EE8C();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v61,  &type metadata for LocationSource,  &v60,  v23,  &type metadata for LocationSource,  v29);
  v25[v28[9]] = v61;
  char v59 = 6;
  uint64_t v30 = (uint64_t)v44;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v27, &v59, v23, v27, v26);
  sub_100015750(v30, (uint64_t)&v25[v28[10]], (uint64_t *)&unk_10099D720);
  uint64_t v31 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  char v58 = 7;
  uint64_t v32 = sub_100007864( &qword_1009B4540,  type metadata accessor for BeaconKeyManager.IndexInformation,  (uint64_t)&unk_10081CB20);
  uint64_t v33 = (uint64_t)v43;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v31, &v58, v23, v31, v32);
  sub_100015750(v33, (uint64_t)&v25[v28[11]], &qword_1009AC230);
  char v57 = 8;
  uint64_t v34 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  char v35 = v42;
  uint64_t v36 = v47;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v42, v47, &v57, v23, v47, v34);
  (*(void (**)(_BYTE *, void *, uint64_t))(v46 + 32))(&v25[v28[12]], v35, v36);
  char v56 = 9;
  __int16 v37 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v56, v23);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v48, v49);
  uint64_t v38 = (uint64_t)v55;
  char v39 = &v55[*(int *)(v54 + 52)];
  *char v39 = v37;
  v39[1] = HIBYTE(v37) & 1;
  sub_1005BAB30(v38, v45);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v52);
  return sub_100018C68(v38, type metadata accessor for RawSearchResult);
}

uint64_t sub_1005BA2E4()
{
  return sub_1005B9814(*v0);
}

uint64_t sub_1005BA2EC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1005BBD94(a1, a2);
  *a3 = result;
  return result;
}

void sub_1005BA310(_BYTE *a1@<X8>)
{
  *a1 = 10;
}

uint64_t sub_1005BA31C(uint64_t a1)
{
  unint64_t v2 = sub_1005BBB1C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005BA344(uint64_t a1)
{
  unint64_t v2 = sub_1005BBB1C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005BA36C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005B9C80(a1, a2);
}

uint64_t sub_1005BA380(void *a1)
{
  return sub_1005B9928(a1);
}

Swift::Int sub_1005BA394()
{
  return Hasher._finalize()();
}

Swift::Int sub_1005BA3D4(uint64_t a1)
{
  return Hasher._finalize()();
}

void sub_1005BA410(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v4 = swift_allocObject(v3, 72LL, 7LL);
  *(_OWORD *)(v4 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v5 = (int *)type metadata accessor for RawSearchResult(0LL);
  uint64_t v6 = *(void *)(a1 + v5[6]);
  *(void *)(v4 + 56) = &type metadata for Double;
  *(void *)(v4 + 64) = &protocol witness table for Double;
  *(void *)(v4 + 32) = v6;
  uint64_t v7 = String.init(format:_:)(0x6636302E25LL, 0xE500000000000000LL, v4);
  uint64_t v9 = v8;
  uint64_t v10 = swift_allocObject(v3, 72LL, 7LL);
  *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v11 = *(void *)(a1 + v5[7]);
  *(void *)(v10 + 56) = &type metadata for Double;
  *(void *)(v10 + 64) = &protocol witness table for Double;
  *(void *)(v10 + 32) = v11;
  uint64_t v12 = String.init(format:_:)(0x6636302E25LL, 0xE500000000000000LL, v10);
  uint64_t v14 = v13;
  uint64_t v15 = swift_allocObject(v3, 72LL, 7LL);
  *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v16 = *(void *)(a1 + v5[8]);
  *(void *)(v15 + 56) = &type metadata for Double;
  *(void *)(v15 + 64) = &protocol witness table for Double;
  *(void *)(v15 + 32) = v16;
  uint64_t v17 = String.init(format:_:)(1714433573LL, 0xE400000000000000LL, v15);
  uint64_t v19 = v18;
  uint64_t v20 = type metadata accessor for Date(0LL);
  uint64_t v21 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(v20, v21);
  uint64_t v32 = v22;
  v23._countAndFlagsBits = 8250LL;
  v23._object = (void *)0xE200000000000000LL;
  String.append(_:)(v23);
  v24._countAndFlagsBits = v7;
  v24._object = v9;
  String.append(_:)(v24);
  swift_bridgeObjectRelease();
  v25._countAndFlagsBits = 47LL;
  v25._object = (void *)0xE100000000000000LL;
  String.append(_:)(v25);
  v26._countAndFlagsBits = v12;
  v26._object = v14;
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  v27._countAndFlagsBits = 10272LL;
  v27._object = (void *)0xE200000000000000LL;
  String.append(_:)(v27);
  v28._countAndFlagsBits = v17;
  v28._object = v19;
  String.append(_:)(v28);
  swift_bridgeObjectRelease();
  v29._countAndFlagsBits = 41LL;
  v29._object = (void *)0xE100000000000000LL;
  String.append(_:)(v29);
  *a2 = v31;
  a2[1] = v32;
}

uint64_t sub_1005BA634()
{
  uint64_t v1 = objc_autoreleasePoolPush();
  sub_1005BA410(v0, &v3);
  objc_autoreleasePoolPop(v1);
  return v3;
}

uint64_t type metadata accessor for RawSearchResult(uint64_t a1)
{
  uint64_t result = qword_1009B44C8;
  if (!qword_1009B44C8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for RawSearchResult);
  }
  return result;
}

uint64_t sub_1005BA6BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005BA700(unsigned __int8 *a1, unsigned __int8 *a2)
{
  uint64_t v52 = (int *)type metadata accessor for RawSearchResult(0LL);
  uint64_t v4 = __chkstk_darwin(v52);
  uint64_t v51 = (char *)&v47 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v50 = (char *)&v47 - v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v49 = (char *)&v47 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  int v48 = (char *)&v47 - v11;
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v47 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v47 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v20 = (char *)&v47 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  Swift::String v23 = (char *)&v47 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  Swift::String v26 = (char *)&v47 - v25;
  __chkstk_darwin(v24);
  Swift::String v28 = (char *)&v47 - v27;
  int v29 = *a1;
  int v30 = *a2;
  sub_1005BAB30((uint64_t)a1, (uint64_t)&v47 - v27);
  sub_1005BAB30((uint64_t)a2, (uint64_t)v26);
  if (v29 != v30)
  {
    sub_100018C68((uint64_t)v26, type metadata accessor for RawSearchResult);
    sub_100018C68((uint64_t)v28, type metadata accessor for RawSearchResult);
    sub_1005BAB30((uint64_t)a1, (uint64_t)v23);
    sub_1005BAB30((uint64_t)a2, (uint64_t)v20);
    goto LABEL_8;
  }

  char v31 = static Date.== infix(_:_:)(&v28[v52[5]], &v26[v52[5]]);
  sub_100018C68((uint64_t)v26, type metadata accessor for RawSearchResult);
  sub_100018C68((uint64_t)v28, type metadata accessor for RawSearchResult);
  sub_1005BAB30((uint64_t)a1, (uint64_t)v23);
  sub_1005BAB30((uint64_t)a2, (uint64_t)v20);
  if ((v31 & 1) == 0)
  {
LABEL_8:
    sub_100018C68((uint64_t)v20, type metadata accessor for RawSearchResult);
    sub_100018C68((uint64_t)v23, type metadata accessor for RawSearchResult);
    sub_1005BAB30((uint64_t)a1, (uint64_t)v17);
    sub_1005BAB30((uint64_t)a2, (uint64_t)v14);
    uint64_t v36 = (uint64_t)v50;
    uint64_t v35 = (uint64_t)v51;
    uint64_t v38 = (uint64_t)v48;
    uint64_t v37 = (uint64_t)v49;
    goto LABEL_9;
  }

  uint64_t v32 = v52;
  double v33 = *(double *)&v23[v52[6]];
  sub_100018C68((uint64_t)v23, type metadata accessor for RawSearchResult);
  double v34 = *(double *)&v20[v32[6]];
  sub_100018C68((uint64_t)v20, type metadata accessor for RawSearchResult);
  sub_1005BAB30((uint64_t)a1, (uint64_t)v17);
  sub_1005BAB30((uint64_t)a2, (uint64_t)v14);
  uint64_t v36 = (uint64_t)v50;
  uint64_t v35 = (uint64_t)v51;
  uint64_t v38 = (uint64_t)v48;
  uint64_t v37 = (uint64_t)v49;
  if (v33 != v34)
  {
LABEL_9:
    sub_100018C68((uint64_t)v14, type metadata accessor for RawSearchResult);
    sub_100018C68((uint64_t)v17, type metadata accessor for RawSearchResult);
    sub_1005BAB30((uint64_t)a1, v38);
    sub_1005BAB30((uint64_t)a2, v37);
    goto LABEL_10;
  }

  char v39 = v52;
  double v40 = *(double *)&v17[v52[7]];
  sub_100018C68((uint64_t)v17, type metadata accessor for RawSearchResult);
  double v41 = *(double *)&v14[v39[7]];
  sub_100018C68((uint64_t)v14, type metadata accessor for RawSearchResult);
  sub_1005BAB30((uint64_t)a1, v38);
  sub_1005BAB30((uint64_t)a2, v37);
  if (v40 != v41)
  {
LABEL_10:
    sub_100018C68(v37, type metadata accessor for RawSearchResult);
    sub_100018C68(v38, type metadata accessor for RawSearchResult);
    sub_1005BAB30((uint64_t)a1, v36);
    sub_1005BAB30((uint64_t)a2, v35);
    goto LABEL_11;
  }

  uint64_t v42 = v52;
  double v43 = *(double *)(v38 + v52[8]);
  sub_100018C68(v38, type metadata accessor for RawSearchResult);
  double v44 = *(double *)(v37 + v42[8]);
  sub_100018C68(v37, type metadata accessor for RawSearchResult);
  sub_1005BAB30((uint64_t)a1, v36);
  sub_1005BAB30((uint64_t)a2, v35);
  if (v43 != v44)
  {
LABEL_11:
    char v45 = 0;
    goto LABEL_12;
  }

  char v45 = static UUID.== infix(_:_:)(v36 + v52[12], v35 + v52[12]);
LABEL_12:
  sub_100018C68(v35, type metadata accessor for RawSearchResult);
  sub_100018C68(v36, type metadata accessor for RawSearchResult);
  return v45 & 1;
}

uint64_t sub_1005BAB30(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for RawSearchResult(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

void *sub_1005BAB74(_BYTE *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v19 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *a1 = *(_BYTE *)a2;
    uint64_t v7 = a3[5];
    uint64_t v8 = &a1[v7];
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date(0LL);
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(void (**)(char *, char *, uint64_t))(v11 + 16);
    v12(v8, v9, v10);
    uint64_t v13 = a3[7];
    *(void *)((char *)v4 + a3[6]) = *(void *)((char *)a2 + a3[6]);
    *(void *)((char *)v4 + v13) = *(void *)((char *)a2 + v13);
    uint64_t v14 = a3[9];
    *(void *)((char *)v4 + a3[8]) = *(void *)((char *)a2 + a3[8]);
    *((_BYTE *)v4 + v14) = *((_BYTE *)a2 + v14);
    uint64_t v15 = a3[10];
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (char *)a2 + v15;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48))((char *)a2 + v15, 1LL, v10))
    {
      uint64_t v18 = sub_100004AEC((uint64_t *)&unk_10099D720);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      v12(v16, v17, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0LL, 1LL, v10);
    }

    uint64_t v20 = a3[11];
    uint64_t v21 = (char *)v4 + v20;
    uint64_t v22 = (char *)a2 + v20;
    uint64_t v23 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
    uint64_t v24 = *(void *)(v23 - 8);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v22, 1LL, v23))
    {
      uint64_t v25 = sub_100004AEC(&qword_1009AC230);
      memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
    }

    else
    {
      uint64_t v26 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 16LL))(v21, v22, v26);
      uint64_t v27 = *(int *)(v23 + 20);
      __int128 v28 = *(_OWORD *)&v22[v27 + 24];
      *(_OWORD *)&v21[v27 + 24] = v28;
      (**(void (***)(void))(v28 - 8))();
      (*(void (**)(char *, void, uint64_t, uint64_t))(v24 + 56))(v21, 0LL, 1LL, v23);
    }

    uint64_t v29 = a3[12];
    int v30 = (char *)v4 + v29;
    char v31 = (char *)a2 + v29;
    uint64_t v32 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v32 - 8) + 16LL))(v30, v31, v32);
    *(_WORD *)((char *)v4 + a3[13]) = *(_WORD *)((char *)a2 + a3[13]);
  }

  return v4;
}

uint64_t sub_1005BAD9C(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  uint64_t v8 = a1 + a2[10];
  uint64_t v9 = a1 + a2[11];
  uint64_t v10 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))(v9, 1LL, v10))
  {
    uint64_t v11 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v9, v11);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v9 + *(int *)(v10 + 20)));
  }

  uint64_t v12 = a1 + a2[12];
  uint64_t v13 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(v12, v13);
}

_BYTE *sub_1005BAE98(_BYTE *a1, _BYTE *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16);
  v11(v7, v8, v9);
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  uint64_t v13 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  a1[v13] = a2[v13];
  uint64_t v14 = a3[10];
  uint64_t v15 = &a1[v14];
  uint64_t v16 = &a2[v14];
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(&a2[v14], 1LL, v9))
  {
    uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    v11(v15, v16, v9);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v10 + 56))(v15, 0LL, 1LL, v9);
  }

  uint64_t v18 = a3[11];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21))
  {
    uint64_t v23 = sub_100004AEC(&qword_1009AC230);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    uint64_t v24 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 16LL))(v19, v20, v24);
    uint64_t v25 = *(int *)(v21 + 20);
    __int128 v26 = *(_OWORD *)&v20[v25 + 24];
    *(_OWORD *)&v19[v25 + 24] = v26;
    (**(void (***)(void))(v26 - 8))();
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
  }

  uint64_t v27 = a3[12];
  __int128 v28 = &a1[v27];
  uint64_t v29 = &a2[v27];
  uint64_t v30 = type metadata accessor for UUID(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v30 - 8) + 16LL))(v28, v29, v30);
  *(_WORD *)&a1[a3[13]] = *(_WORD *)&a2[a3[13]];
  return a1;
}

_BYTE *sub_1005BB094(_BYTE *a1, _BYTE *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24);
  v11(v7, v8, v9);
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  a1[a3[9]] = a2[a3[9]];
  uint64_t v12 = a3[10];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  int v16 = v15(&a1[v12], 1LL, v9);
  int v17 = v15(v14, 1LL, v9);
  if (v16)
  {
    if (!v17)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v13, v14, v9);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v10 + 56))(v13, 0LL, 1LL, v9);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v17)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v13, v9);
LABEL_6:
    uint64_t v18 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64LL));
    goto LABEL_7;
  }

  v11(v13, v14, v9);
LABEL_7:
  uint64_t v19 = a3[11];
  uint64_t v20 = &a1[v19];
  uint64_t v21 = &a2[v19];
  uint64_t v22 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v23 + 48);
  int v25 = v24(v20, 1LL, v22);
  int v26 = v24(v21, 1LL, v22);
  if (!v25)
  {
    if (!v26)
    {
      uint64_t v37 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v37 - 8) + 24LL))(v20, v21, v37);
      sub_1000B5D38(&v20[*(int *)(v22 + 20)], &v21[*(int *)(v22 + 20)]);
      goto LABEL_13;
    }

    sub_100018C68((uint64_t)v20, type metadata accessor for BeaconKeyManager.IndexInformation);
    goto LABEL_12;
  }

  if (v26)
  {
LABEL_12:
    uint64_t v31 = sub_100004AEC(&qword_1009AC230);
    memcpy(v20, v21, *(void *)(*(void *)(v31 - 8) + 64LL));
    goto LABEL_13;
  }

  uint64_t v27 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v27 - 8) + 16LL))(v20, v21, v27);
  uint64_t v28 = *(int *)(v22 + 20);
  uint64_t v29 = &v20[v28];
  uint64_t v30 = *(void *)&v21[v28 + 24];
  *((void *)v29 + 3) = v30;
  *((void *)v29 + 4) = *(void *)&v21[v28 + 32];
  (**(void (***)(void))(v30 - 8))();
  (*(void (**)(char *, void, uint64_t, uint64_t))(v23 + 56))(v20, 0LL, 1LL, v22);
LABEL_13:
  uint64_t v32 = a3[12];
  double v33 = &a1[v32];
  double v34 = &a2[v32];
  uint64_t v35 = type metadata accessor for UUID(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v35 - 8) + 24LL))(v33, v34, v35);
  *(_WORD *)&a1[a3[13]] = *(_WORD *)&a2[a3[13]];
  return a1;
}

_BYTE *sub_1005BB348(_BYTE *a1, _BYTE *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  uint64_t v13 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  a1[v13] = a2[v13];
  uint64_t v14 = a3[10];
  uint64_t v15 = &a1[v14];
  int v16 = &a2[v14];
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48))(&a2[v14], 1LL, v9))
  {
    uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  else
  {
    v11(v15, v16, v9);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v10 + 56))(v15, 0LL, 1LL, v9);
  }

  uint64_t v18 = a3[11];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  uint64_t v21 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v22 + 48))(v20, 1LL, v21))
  {
    uint64_t v23 = sub_100004AEC(&qword_1009AC230);
    memcpy(v19, v20, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    uint64_t v24 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 32LL))(v19, v20, v24);
    uint64_t v25 = *(int *)(v21 + 20);
    int v26 = &v19[v25];
    uint64_t v27 = &v20[v25];
    __int128 v28 = *((_OWORD *)v27 + 1);
    *(_OWORD *)int v26 = *(_OWORD *)v27;
    *((_OWORD *)v26 + 1) = v28;
    *((void *)v26 + 4) = *((void *)v27 + 4);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v22 + 56))(v19, 0LL, 1LL, v21);
  }

  uint64_t v29 = a3[12];
  uint64_t v30 = &a1[v29];
  uint64_t v31 = &a2[v29];
  uint64_t v32 = type metadata accessor for UUID(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v32 - 8) + 32LL))(v30, v31, v32);
  *(_WORD *)&a1[a3[13]] = *(_WORD *)&a2[a3[13]];
  return a1;
}

_BYTE *sub_1005BB53C(_BYTE *a1, _BYTE *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[5];
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40);
  v11(v7, v8, v9);
  uint64_t v12 = a3[7];
  *(void *)&a1[a3[6]] = *(void *)&a2[a3[6]];
  *(void *)&a1[v12] = *(void *)&a2[v12];
  uint64_t v13 = a3[9];
  *(void *)&a1[a3[8]] = *(void *)&a2[a3[8]];
  a1[v13] = a2[v13];
  uint64_t v14 = a3[10];
  uint64_t v15 = &a1[v14];
  int v16 = &a2[v14];
  uint64_t v17 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  int v18 = v17(&a1[v14], 1LL, v9);
  int v19 = v17(v16, 1LL, v9);
  if (v18)
  {
    if (!v19)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v15, v16, v9);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v10 + 56))(v15, 0LL, 1LL, v9);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v19)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v15, v9);
LABEL_6:
    uint64_t v20 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v15, v16, *(void *)(*(void *)(v20 - 8) + 64LL));
    goto LABEL_7;
  }

  v11(v15, v16, v9);
LABEL_7:
  uint64_t v21 = a3[11];
  uint64_t v22 = &a1[v21];
  uint64_t v23 = &a2[v21];
  uint64_t v24 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  int v26 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v25 + 48);
  int v27 = v26(v22, 1LL, v24);
  int v28 = v26(v23, 1LL, v24);
  if (!v27)
  {
    if (!v28)
    {
      uint64_t v40 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v40 - 8) + 40LL))(v22, v23, v40);
      uint64_t v41 = *(int *)(v24 + 20);
      uint64_t v42 = &v22[v41];
      double v43 = &v23[v41];
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
      __int128 v44 = *((_OWORD *)v43 + 1);
      *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
      *((_OWORD *)v42 + 1) = v44;
      *((void *)v42 + 4) = *((void *)v43 + 4);
      goto LABEL_13;
    }

    sub_100018C68((uint64_t)v22, type metadata accessor for BeaconKeyManager.IndexInformation);
    goto LABEL_12;
  }

  if (v28)
  {
LABEL_12:
    uint64_t v34 = sub_100004AEC(&qword_1009AC230);
    memcpy(v22, v23, *(void *)(*(void *)(v34 - 8) + 64LL));
    goto LABEL_13;
  }

  uint64_t v29 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 32LL))(v22, v23, v29);
  uint64_t v30 = *(int *)(v24 + 20);
  uint64_t v31 = &v22[v30];
  uint64_t v32 = &v23[v30];
  __int128 v33 = *((_OWORD *)v32 + 1);
  *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  *((_OWORD *)v31 + 1) = v33;
  *((void *)v31 + 4) = *((void *)v32 + 4);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v25 + 56))(v22, 0LL, 1LL, v24);
LABEL_13:
  uint64_t v35 = a3[12];
  uint64_t v36 = &a1[v35];
  uint64_t v37 = &a2[v35];
  uint64_t v38 = type metadata accessor for UUID(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v38 - 8) + 40LL))(v36, v37, v38);
  *(_WORD *)&a1[a3[13]] = *(_WORD *)&a2[a3[13]];
  return a1;
}

uint64_t sub_1005BB7F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005BB7FC);
}

uint64_t sub_1005BB7FC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  if ((_DWORD)a2 != 237)
  {
    uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099D720);
    uint64_t v7 = *(void *)(v12 - 8);
    if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
    {
      uint64_t v8 = v12;
      uint64_t v9 = a3[10];
    }

    else
    {
      uint64_t v13 = sub_100004AEC(&qword_1009AC230);
      uint64_t v7 = *(void *)(v13 - 8);
      if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
      {
        uint64_t v8 = v13;
        uint64_t v9 = a3[11];
      }

      else
      {
        uint64_t v8 = type metadata accessor for UUID(0LL);
        uint64_t v7 = *(void *)(v8 - 8);
        uint64_t v9 = a3[12];
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  unsigned int v10 = *(unsigned __int8 *)(a1 + a3[9]);
  if (v10 >= 0x13) {
    return v10 - 18;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1005BB8E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005BB8F4);
}

uint64_t sub_1005BB8F4(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a4[5];
  }

  else
  {
    if (a3 == 237)
    {
      *(_BYTE *)(a1 + a4[9]) = a2 + 18;
      return result;
    }

    uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099D720);
    uint64_t v9 = *(void *)(v12 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v12;
      uint64_t v11 = a4[10];
    }

    else
    {
      uint64_t v13 = sub_100004AEC(&qword_1009AC230);
      uint64_t v9 = *(void *)(v13 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        uint64_t v10 = v13;
        uint64_t v11 = a4[11];
      }

      else
      {
        uint64_t v10 = type metadata accessor for UUID(0LL);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a4[12];
      }
    }
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
}

void sub_1005BB9E0(uint64_t a1)
{
  v10[0] = (char *)&value witness table for Builtin.Int8 + 64;
  uint64_t v2 = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v10[1] = *(void *)(v2 - 8) + 64LL;
    v10[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v10[3] = (char *)&value witness table for Builtin.Int64 + 64;
    v10[4] = (char *)&value witness table for Builtin.Int64 + 64;
    v10[5] = &unk_100809630;
    sub_10009361C( 319LL,  (unint64_t *)&qword_1009A09E0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date);
    if (v5 <= 0x3F)
    {
      v10[6] = *(void *)(v4 - 8) + 64LL;
      sub_10009361C( 319LL,  (unint64_t *)&unk_1009B44D8,  type metadata accessor for BeaconKeyManager.IndexInformation);
      if (v7 <= 0x3F)
      {
        v10[7] = *(void *)(v6 - 8) + 64LL;
        uint64_t v8 = type metadata accessor for UUID(319LL);
        if (v9 <= 0x3F)
        {
          v10[8] = *(void *)(v8 - 8) + 64LL;
          void v10[9] = &unk_100809648;
          swift_initStructMetadata(a1, 256LL, 10LL, v10, a1 + 16);
        }
      }
    }
  }

uint64_t sub_1005BBAF0()
{
  return sub_100007864(&qword_1009B4528, type metadata accessor for RawSearchResult, (uint64_t)&unk_100809660);
}

unint64_t sub_1005BBB1C()
{
  unint64_t result = qword_1009B4538;
  if (!qword_1009B4538)
  {
    unint64_t result = swift_getWitnessTable(&unk_100809824, &type metadata for RawSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4538);
  }

  return result;
}

uint64_t getEnumTagSinglePayload for RawSearchResult.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF7) {
    goto LABEL_17;
  }
  if (a2 + 9 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 9) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 9;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 9;
    }
  }

uint64_t storeEnumTagSinglePayload for RawSearchResult.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 9 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 9) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF7) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF6) {
    return ((uint64_t (*)(void))((char *)&loc_1005BBC3C + 4 * byte_1008095E7[v4]))();
  }
  *a1 = a2 + 9;
  return ((uint64_t (*)(void))((char *)sub_1005BBC70 + 4 * byte_1008095E2[v4]))();
}

uint64_t sub_1005BBC70(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005BBC78(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005BBC80LL);
  }
  return result;
}

uint64_t sub_1005BBC8C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005BBC94LL);
  }
  *(_BYTE *)unint64_t result = a2 + 9;
  return result;
}

uint64_t sub_1005BBC98(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005BBCA0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for RawSearchResult.CodingKeys()
{
  return &type metadata for RawSearchResult.CodingKeys;
}

unint64_t sub_1005BBCC0()
{
  unint64_t result = qword_1009B4558;
  if (!qword_1009B4558)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008097FC, &type metadata for RawSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4558);
  }

  return result;
}

unint64_t sub_1005BBD08()
{
  unint64_t result = qword_1009B4560;
  if (!qword_1009B4560)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080976C, &type metadata for RawSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4560);
  }

  return result;
}

unint64_t sub_1005BBD50()
{
  unint64_t result = qword_1009B4568;
  if (!qword_1009B4568)
  {
    unint64_t result = swift_getWitnessTable(&unk_100809794, &type metadata for RawSearchResult.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4568);
  }

  return result;
}

uint64_t sub_1005BBD94(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x737574617473LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v5 = 0xE600000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x737574617473LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6D617473656D6974LL && a2 == 0xE900000000000070LL)
  {
    unint64_t v7 = 0xE900000000000070LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974LL, 0xE900000000000070LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x656475746974616CLL && a2 == 0xE800000000000000LL)
  {
    unint64_t v8 = 0xE800000000000000LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656475746974616CLL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x64757469676E6F6CLL && a2 == 0xE900000000000065LL)
  {
    unint64_t v9 = 0xE900000000000065LL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64757469676E6F6CLL, 0xE900000000000065LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v10 = 0x800000010084E370LL;
    if (a2 == 0x800000010084E370LL) {
      goto LABEL_31;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x800000010084E370LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
LABEL_31:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if (a1 == 0x656372756F73LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v11 = 0xE600000000000000LL;
LABEL_37:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656372756F73LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_37;
  }

  if (a1 == 0x657461446E616373LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v12 = 0xE800000000000000LL;
LABEL_43:
    swift_bridgeObjectRelease(v12);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x657461446E616373LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_43;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v13 = 0x80000001008699B0LL;
    if (a2 == 0x80000001008699B0LL) {
      goto LABEL_48;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x80000001008699B0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
LABEL_48:
    swift_bridgeObjectRelease(v13);
    return 7LL;
  }

  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v14 = 0xEA00000000007265LL;
LABEL_54:
    swift_bridgeObjectRelease(v14);
    return 8LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
    goto LABEL_54;
  }

  if (a1 == 1953393000 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 9LL;
  }

  else
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(1953393000LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v15 & 1) != 0) {
      return 9LL;
    }
    else {
      return 10LL;
    }
  }

uint64_t *sub_1005BC188(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v25 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v25 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_10001736C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    unint64_t v10 = (char *)a1 + v9;
    unint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID(0LL);
    unint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
    v13(v10, v11, v12);
    v13((char *)a1 + a3[6], (char *)a2 + a3[6], v12);
    uint64_t v14 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    *(uint64_t *)((char *)a1 + v14) = *(uint64_t *)((char *)a2 + v14);
    uint64_t v15 = a3[10];
    *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
    int v16 = (char *)a1 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for Date(0LL);
    uint64_t v19 = *(void *)(v18 - 8);
    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v19 + 16);
    v20(v16, v17, v18);
    uint64_t v21 = a3[12];
    *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
    uint64_t v22 = (char *)a1 + v21;
    uint64_t v23 = (char *)a2 + v21;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v19 + 48))((char *)a2 + v21, 1LL, v18))
    {
      uint64_t v24 = sub_100004AEC((uint64_t *)&unk_10099D720);
      memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
    }

    else
    {
      v20(v22, v23, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v22, 0LL, 1LL, v18);
    }

    uint64_t v26 = a3[13];
    uint64_t v27 = *(uint64_t *)((char *)a2 + v26);
    *(uint64_t *)((char *)a1 + v26) = v27;
    swift_bridgeObjectRetain(v27);
  }

  return a1;
}

uint64_t sub_1005BC320(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UUID(0LL);
  unsigned int v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v6(v4, v5);
  v6(a1 + a2[6], v5);
  uint64_t v7 = a1 + a2[10];
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  unint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = a1 + a2[12];
  return swift_bridgeObjectRelease();
}

uint64_t *sub_1005BC3F0(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  unint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], (char *)a2 + a3[6], v11);
  uint64_t v13 = a3[8];
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  *(uint64_t *)((char *)a1 + v13) = *(uint64_t *)((char *)a2 + v13);
  uint64_t v14 = a3[10];
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  uint64_t v15 = (char *)a1 + v14;
  int v16 = (char *)a2 + v14;
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v18 + 16);
  v19(v15, v16, v17);
  uint64_t v20 = a3[12];
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = (char *)a2 + v20;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v18 + 48))((char *)a2 + v20, 1LL, v17))
  {
    uint64_t v23 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v21, v22, *(void *)(*(void *)(v23 - 8) + 64LL));
  }

  else
  {
    v19(v21, v22, v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v21, 0LL, 1LL, v17);
  }

  uint64_t v24 = a3[13];
  uint64_t v25 = *(uint64_t *)((char *)a2 + v24);
  *(uint64_t *)((char *)a1 + v24) = v25;
  swift_bridgeObjectRetain(v25);
  return a1;
}

uint64_t *sub_1005BC55C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100016F9C(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL);
  v14(v11, v12, v13);
  v14((char *)a1 + a3[6], (char *)a2 + a3[6], v13);
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  *(uint64_t *)((char *)a1 + a3[8]) = *(uint64_t *)((char *)a2 + a3[8]);
  *(uint64_t *)((char *)a1 + a3[9]) = *(uint64_t *)((char *)a2 + a3[9]);
  uint64_t v15 = a3[10];
  int v16 = (char *)a1 + v15;
  uint64_t v17 = (char *)a2 + v15;
  uint64_t v18 = type metadata accessor for Date(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v19 + 24);
  v20(v16, v17, v18);
  *((_BYTE *)a1 + a3[11]) = *((_BYTE *)a2 + a3[11]);
  uint64_t v21 = a3[12];
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  LODWORD(v14) = v24((char *)a1 + v21, 1LL, v18);
  int v25 = v24(v23, 1LL, v18);
  if (!(_DWORD)v14)
  {
    if (!v25)
    {
      v20(v22, v23, v18);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v18);
    goto LABEL_6;
  }

  if (v25)
  {
LABEL_6:
    uint64_t v26 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v22, v23, *(void *)(*(void *)(v26 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v22, v23, v18);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v22, 0LL, 1LL, v18);
LABEL_7:
  uint64_t v27 = a3[13];
  uint64_t v28 = *(uint64_t *)((char *)a2 + v27);
  *(uint64_t *)((char *)a1 + v27) = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_1005BC734(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  uint64_t v11 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(void *)&a1[v11] = *(void *)&a2[v11];
  uint64_t v12 = a3[10];
  *(void *)&a1[a3[9]] = *(void *)&a2[a3[9]];
  uint64_t v13 = &a1[v12];
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(void (**)(char *, char *, uint64_t))(v16 + 32);
  v17(v13, v14, v15);
  uint64_t v18 = a3[12];
  a1[a3[11]] = a2[a3[11]];
  uint64_t v19 = &a1[v18];
  uint64_t v20 = &a2[v18];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(&a2[v18], 1LL, v15))
  {
    uint64_t v21 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64LL));
  }

  else
  {
    v17(v19, v20, v15);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(v19, 0LL, 1LL, v15);
  }

  *(void *)&a1[a3[13]] = *(void *)&a2[a3[13]];
  return a1;
}

uint64_t *sub_1005BC890(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016F9C(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], &a2[a3[6]], v11);
  uint64_t v13 = a3[8];
  *(uint64_t *)((char *)a1 + a3[7]) = *(void *)&a2[a3[7]];
  *(uint64_t *)((char *)a1 + v13) = *(void *)&a2[v13];
  uint64_t v14 = a3[10];
  *(uint64_t *)((char *)a1 + a3[9]) = *(void *)&a2[a3[9]];
  uint64_t v15 = (char *)a1 + v14;
  uint64_t v16 = &a2[v14];
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v18 + 40);
  v19(v15, v16, v17);
  uint64_t v20 = a3[12];
  *((_BYTE *)a1 + a3[11]) = a2[a3[11]];
  uint64_t v21 = (char *)a1 + v20;
  uint64_t v22 = &a2[v20];
  uint64_t v23 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v18 + 48);
  LODWORD(v12) = v23((char *)a1 + v20, 1LL, v17);
  int v24 = v23(v22, 1LL, v17);
  if (!(_DWORD)v12)
  {
    if (!v24)
    {
      v19(v21, v22, v17);
      goto LABEL_7;
    }

    (*(void (**)(char *, uint64_t))(v18 + 8))(v21, v17);
    goto LABEL_6;
  }

  if (v24)
  {
LABEL_6:
    uint64_t v25 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v21, v22, *(void *)(*(void *)(v25 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(char *, char *, uint64_t))(v18 + 32))(v21, v22, v17);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v18 + 56))(v21, 0LL, 1LL, v17);
LABEL_7:
  *(uint64_t *)((char *)a1 + a3[13]) = *(void *)&a2[a3[13]];
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1005BCA4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005BCA58);
}

uint64_t sub_1005BCA58(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v10;
    uint64_t v9 = a3[10];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v7 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v9 = a3[12];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  unint64_t v13 = *(void *)(a1 + a3[13]);
  if (v13 >= 0xFFFFFFFF) {
    LODWORD(v13) = -1;
  }
  int v14 = v13 - 1;
  if (v14 < 0) {
    int v14 = -1;
  }
  return (v14 + 1);
}

uint64_t sub_1005BCB30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005BCB3C);
}

uint64_t sub_1005BCB3C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }

  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v12 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v12;
    uint64_t v11 = a4[10];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }

  uint64_t result = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a4[12];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }

  *(void *)(a1 + a4[13]) = a2;
  return result;
}

uint64_t type metadata accessor for BeaconEstimatedLocation(uint64_t a1)
{
  uint64_t result = qword_1009B45D0;
  if (!qword_1009B45D0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconEstimatedLocation);
  }
  return result;
}

void sub_1005BCC40(uint64_t a1)
{
  uint64_t v8 = &unk_1008098C8;
  uint64_t v2 = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v9 = *(void *)(v2 - 8) + 64LL;
    uint64_t v10 = v9;
    uint64_t v11 = (char *)&value witness table for Builtin.Int64 + 64;
    uint64_t v12 = (char *)&value witness table for Builtin.Int64 + 64;
    unint64_t v13 = (char *)&value witness table for Builtin.Int64 + 64;
    uint64_t v4 = type metadata accessor for Date(319LL);
    if (v5 <= 0x3F)
    {
      uint64_t v14 = *(void *)(v4 - 8) + 64LL;
      uint64_t v15 = &unk_1008098E0;
      sub_10003FEF4(319LL);
      if (v7 <= 0x3F)
      {
        uint64_t v16 = *(void *)(v6 - 8) + 64LL;
        uint64_t v17 = &unk_1008098F8;
        swift_initStructMetadata(a1, 256LL, 10LL, &v8, a1 + 16);
      }
    }
  }

uint64_t sub_1005BCD10@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 40);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

double sub_1005BCD50(uint64_t a1)
{
  return *(double *)(v1 + *(int *)(a1 + 36));
}

uint64_t sub_1005BCD5C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v102 = (char *)&v99 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v99 - v7;
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v106 = *(void *)(v9 - 8);
  uint64_t v107 = v9;
  __chkstk_darwin(v9);
  os_log_type_t v105 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v99 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v99 - v15;
  uint64_t v111 = type metadata accessor for UUID(0LL);
  uint64_t v17 = *(void *)(v111 - 8);
  uint64_t v18 = __chkstk_darwin(v111);
  uint64_t v104 = (char *)&v99 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v109 = (char *)&v99 - v20;
  uint64_t v21 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v103 = (int *)v21;
  uint64_t v110 = *(int *)(v21 + 52);
  *(uint64_t *)((char *)a2 + v110) = 0LL;
  uint64_t v22 = CKRecord.recordType.getter(v21);
  if (v22 == 0xD000000000000017LL && v23 == 0x8000000100809890LL)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v22, v23, 0xD000000000000017LL, 0x8000000100809890LL, 0LL);
    swift_bridgeObjectRelease();
    if ((v24 & 1) == 0)
    {
      unint64_t v65 = sub_1005BF97C();
      uint64_t v66 = swift_allocError( &type metadata for BeaconEstimatedLocation.BeaconEstimatedLocationConversionError,  v65,  0LL,  0LL);
      _BYTE *v67 = 0;
      swift_willThrow(v66);

      return swift_bridgeObjectRelease();
    }
  }

  uint64_t v108 = a2;
  id v25 = [a1 recordID];
  id v26 = [v25 recordName];

  uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v26);
  uint64_t v29 = v28;

  UUID.init(uuidString:)(v27, v29);
  swift_bridgeObjectRelease();
  uint64_t v30 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v17 + 48);
  uint64_t v31 = v111;
  if (v30(v16, 1LL, v111) == 1)
  {
    sub_100015794((uint64_t)v16, &qword_10099D8A0);
    unint64_t v32 = sub_1005BF97C();
    uint64_t v33 = swift_allocError( &type metadata for BeaconEstimatedLocation.BeaconEstimatedLocationConversionError,  v32,  0LL,  0LL);
    *uint64_t v34 = 1;
    swift_willThrow(v33);

    return swift_bridgeObjectRelease();
  }

  unint64_t v101 = *(void (**)(char *, char *, uint64_t))(v17 + 32);
  v101(v109, v16, v31);
  id v35 = [a1 encryptedValues];
  NSString v36 = String._bridgeToObjectiveC()();
  uint64_t v37 = v35;
  id v38 = [v35 objectForKeyedSubscript:v36];

  if (!v38) {
    goto LABEL_23;
  }
  v112[0] = v38;
  uint64_t v40 = sub_100004AEC((uint64_t *)&unk_10099D910);
  uint64_t v39 = swift_dynamicCast(&v113, v112, v40, &type metadata for Double, 6LL);
  if ((v39 & 1) == 0) {
    goto LABEL_23;
  }
  uint64_t v100 = v40;
  uint64_t v41 = v113;
  NSString v42 = String._bridgeToObjectiveC()();
  id v43 = [v37 objectForKeyedSubscript:v42];

  if (!v43) {
    goto LABEL_23;
  }
  v112[0] = v43;
  uint64_t v39 = swift_dynamicCast(&v113, v112, v100, &type metadata for Double, 6LL);
  if ((v39 & 1) == 0) {
    goto LABEL_23;
  }
  uint64_t v44 = v113;
  NSString v45 = String._bridgeToObjectiveC()();
  id v46 = [v37 objectForKeyedSubscript:v45];

  if (!v46) {
    goto LABEL_23;
  }
  v112[0] = v46;
  uint64_t v39 = swift_dynamicCast(&v113, v112, v100, &type metadata for Double, 6LL);
  if ((v39 & 1) == 0) {
    goto LABEL_23;
  }
  uint64_t v47 = v113;
  NSString v48 = String._bridgeToObjectiveC()();
  id v49 = [v37 objectForKeyedSubscript:v48];

  if (!v49)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v106 + 56))(v8, 1LL, 1LL, v107);
    goto LABEL_22;
  }

  v112[0] = v49;
  uint64_t v50 = v107;
  int v51 = swift_dynamicCast(v8, v112, v100, v107, 6LL);
  uint64_t v52 = v106;
  uint64_t v99 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v106 + 56);
  v99(v8, v51 ^ 1u, 1LL, v50);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v8, 1LL, v50) == 1)
  {
LABEL_22:
    uint64_t v39 = sub_100015794((uint64_t)v8, (uint64_t *)&unk_10099D720);
LABEL_23:
    uint64_t v68 = static os_log_type_t.error.getter(v39);
    uint64_t v69 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v70 = swift_allocObject(v69, 72LL, 7LL);
    *(_OWORD *)(v70 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v70 + 56) = sub_100022898(0LL, (unint64_t *)&qword_10099D920, &OBJC_CLASS___CKRecord_ptr);
    *(void *)(v70 + 64) = sub_100022738();
    *(void *)(v70 + 32) = a1;
    sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    id v71 = a1;
    unint64_t v72 = (void *)static OS_os_log.default.getter(v71);
    os_log(_:dso:log:_:_:)(v68, &_mh_execute_header, v72, "Invalid BeaconEstimatedLocation - %@", 36LL, 2LL, v70);
    swift_bridgeObjectRelease();

    unint64_t v73 = sub_1005BF97C();
    uint64_t v74 = swift_allocError( &type metadata for BeaconEstimatedLocation.BeaconEstimatedLocationConversionError,  v73,  0LL,  0LL);
    _BYTE *v75 = 2;
    swift_willThrow(v74);
    swift_unknownObjectRelease(v37);

    goto LABEL_24;
  }

  (*(void (**)(char *, char *, uint64_t))(v52 + 32))(v105, v8, v50);
  NSString v53 = String._bridgeToObjectiveC()();
  id v54 = [v37 objectForKeyedSubscript:v53];

  if (!v54) {
    goto LABEL_19;
  }
  uint64_t v113 = (uint64_t)v54;
  uint64_t v55 = swift_dynamicCast(v112, &v113, v100, &type metadata for String, 6LL);
  if ((v55 & 1) == 0) {
    goto LABEL_19;
  }
  UUID.init(uuidString:)(v112[0], v112[1]);
  swift_bridgeObjectRelease();
  uint64_t v56 = v111;
  if (v30(v14, 1LL, v111) == 1)
  {
    uint64_t v55 = sub_100015794((uint64_t)v14, &qword_10099D8A0);
LABEL_19:
    uint64_t v57 = static os_log_type_t.error.getter(v55);
    uint64_t v58 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v59 = swift_allocObject(v58, 72LL, 7LL);
    *(_OWORD *)(v59 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v59 + 56) = sub_100022898(0LL, (unint64_t *)&qword_10099D920, &OBJC_CLASS___CKRecord_ptr);
    *(void *)(v59 + 64) = sub_100022738();
    *(void *)(v59 + 32) = a1;
    sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    id v60 = a1;
    uint64_t v61 = (void *)static OS_os_log.default.getter(v60);
    os_log(_:dso:log:_:_:)(v57, &_mh_execute_header, v61, "Invalid associatedBeacon - %@", 29LL, 2LL, v59);
    swift_bridgeObjectRelease();

    unint64_t v62 = sub_1005BF97C();
    uint64_t v63 = swift_allocError( &type metadata for BeaconEstimatedLocation.BeaconEstimatedLocationConversionError,  v62,  0LL,  0LL);
    *unint64_t v64 = 2;
    swift_willThrow(v63);
    swift_unknownObjectRelease(v37);

    (*(void (**)(char *, uint64_t))(v106 + 8))(v105, v107);
LABEL_24:
    (*(void (**)(char *, uint64_t))(v17 + 8))(v109, v111);
    return swift_bridgeObjectRelease();
  }

  v101(v104, v14, v56);
  unint64_t v77 = objc_autoreleasePoolPush();
  id v78 = [objc_allocWithZone(NSKeyedArchiver) initRequiringSecureCoding:1];
  [a1 encodeSystemFieldsWithCoder:v78];
  [v78 finishEncoding];
  id v79 = [v78 encodedData];
  uint64_t v80 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v79);
  uint64_t v82 = v81;

  objc_autoreleasePoolPop(v77);
  uint64_t v84 = v108;
  uint64_t v83 = v109;
  *uint64_t v108 = v80;
  v84[1] = v82;
  uint64_t v85 = v103;
  unint64_t v86 = *(void (**)(char *, char *, uint64_t))(v17 + 16);
  uint64_t v87 = v111;
  v86((char *)v84 + v103[5], v83, v111);
  v86((char *)v84 + v85[6], v104, v87);
  *(uint64_t *)((char *)v84 + v85[7]) = v41;
  *(uint64_t *)((char *)v84 + v85[8]) = v44;
  *(uint64_t *)((char *)v84 + v85[9]) = v47;
  uint64_t v88 = v106;
  uint64_t v89 = v107;
  (*(void (**)(char *, char *, uint64_t))(v106 + 16))((char *)v84 + v85[10], v105, v107);
  *((_BYTE *)v84 + v85[11]) = 7;
  NSString v90 = String._bridgeToObjectiveC()();
  id v91 = [v37 objectForKeyedSubscript:v90];

  if (v91)
  {
    v112[0] = v91;
    uint64_t v92 = (uint64_t)v102;
    uint64_t v93 = swift_dynamicCast(v102, v112, v100, v89, 6LL) ^ 1;
    os_log_type_t v94 = (char *)v92;
  }

  else
  {
    uint64_t v92 = (uint64_t)v102;
    os_log_type_t v94 = v102;
    uint64_t v93 = 1LL;
  }

  v99(v94, v93, 1LL, v89);
  BOOL v95 = v108;
  sub_10003F130(v92, (uint64_t)v108 + v103[12]);
  swift_unknownObjectRelease(v37);

  uint64_t v96 = *(void (**)(char *, uint64_t))(v17 + 8);
  uint64_t v97 = v111;
  v96(v104, v111);
  (*(void (**)(char *, uint64_t))(v88 + 8))(v105, v89);
  v96(v109, v97);
  uint64_t v98 = v110;
  uint64_t result = swift_bridgeObjectRelease();
  *(uint64_t *)((char *)v95 + v98) = (uint64_t)_swiftEmptyArrayStorage;
  return result;
}

void sub_1005BD7E8()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000A8AC(v2, qword_100A2ADC0);
  sub_10000A720(v0, (uint64_t)qword_100A2ADC0);
  uint64_t v5 = objc_autoreleasePoolPush();
  type metadata accessor for BeaconStore(0LL);
  sub_1004E6208((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000017LL, 0x8000000100809890LL, 1LL);
  (*(void (**)(char *, uint64_t))(v1 + 8))(v4, v0);
  objc_autoreleasePoolPop(v5);
}

void sub_1005BD8C8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *v1;
  unint64_t v12 = v2[1];
  sub_10001736C(v11, v12);
  Data.hash(into:)(a1, v11, v12);
  sub_100016F9C(v11, v12);
  uint64_t v13 = (int *)type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v15 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v14, v15);
  dispatch thunk of Hashable.hash(into:)(a1, v14, v15);
  else {
    Swift::UInt64 v16 = 0LL;
  }
  Hasher._combine(_:)(v16);
  else {
    Swift::UInt64 v17 = 0LL;
  }
  Hasher._combine(_:)(v17);
  else {
    Swift::UInt64 v18 = 0LL;
  }
  Hasher._combine(_:)(v18);
  uint64_t v19 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v4, v19);
  Hasher._combine(_:)(*((unsigned __int8 *)v2 + v13[11]));
  sub_10001581C((uint64_t)v2 + v13[12], (uint64_t)v10, (uint64_t *)&unk_10099D720);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1LL, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v19);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  uint64_t v20 = *(uint64_t *)((char *)v2 + v13[13]);
  if (v20)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v20);
    sub_1005BF070(a1, v20);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

uint64_t sub_1005BDB68(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1005BDBA0 + 4 * byte_100809880[a1]))( 0xD000000000000010LL,  0x800000010084DE70LL);
}

uint64_t sub_1005BDBA0()
{
  return 0x696669746E656469LL;
}

  ;
}

uint64_t sub_1005BDC14()
{
  return 0x6D617473656D6974LL;
}

uint64_t sub_1005BDC34()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_1005BDC58()
{
  return 0x657461446E616373LL;
}

uint64_t sub_1005BDC70(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1005BDCA8 + 4 * byte_100809889[a1]))( 0xD000000000000010LL,  0x800000010084DE70LL);
}

uint64_t sub_1005BDCA8()
{
  return 0x696669746E656469LL;
}

  ;
}

uint64_t sub_1005BDD1C()
{
  return 0x6D617473656D6974LL;
}

uint64_t sub_1005BDD3C()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_1005BDD60()
{
  return 0x657461446E616373LL;
}

Swift::Int sub_1005BDD78()
{
  return Hasher._finalize()();
}

Swift::Int sub_1005BDDB8(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1005BDDF0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Date.< infix(_:_:)(a1 + *(int *)(a3 + 40), a2 + *(int *)(a3 + 40));
}

BOOL sub_1005BDE00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static Date.< infix(_:_:)(a2 + *(int *)(a3 + 40), a1 + *(int *)(a3 + 40)) & 1) == 0;
}

BOOL sub_1005BDE2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static Date.< infix(_:_:)(a1 + *(int *)(a3 + 40), a2 + *(int *)(a3 + 40)) & 1) == 0;
}

uint64_t sub_1005BDE54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Date.< infix(_:_:)(a2 + *(int *)(a3 + 40), a1 + *(int *)(a3 + 40));
}

uint64_t sub_1005BDE6C()
{
  return sub_100007864( (unint64_t *)&unk_1009B4630,  type metadata accessor for BeaconEstimatedLocation,  (uint64_t)&unk_100809910);
}

void sub_1005BDE98(char *a1)
{
}

Swift::Int sub_1005BDEA4()
{
  char v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  sub_100309C68((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_1005BDEE8(uint64_t a1)
{
}

Swift::Int sub_1005BDEF0(uint64_t a1)
{
  char v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_100309C68((uint64_t)v4, v2);
  return Hasher._finalize()();
}

unint64_t sub_1005BDF30@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1005BFC78(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1005BDF5C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1005BDB68(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1005BDF84()
{
  return sub_1005BDC70(*v0);
}

unint64_t sub_1005BDF8C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1005BFC78(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1005BDFB0(uint64_t a1)
{
  unint64_t v2 = sub_1005BEAE8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005BDFD8(uint64_t a1)
{
  unint64_t v2 = sub_1005BEAE8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005BE000@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v46 = a2;
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v3);
  uint64_t v47 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v48 = v5;
  uint64_t v49 = v6;
  __chkstk_darwin(v5);
  uint64_t v8 = (void (**)(char *, void *, uint64_t))((char *)&v44 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v55 = type metadata accessor for UUID(0LL);
  uint64_t v52 = *(void *)(v55 - 8);
  uint64_t v9 = __chkstk_darwin(v55);
  uint64_t v11 = (char *)&v44 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v44 - v12;
  uint64_t v50 = sub_100004AEC(&qword_1009B4650);
  uint64_t v14 = *(void *)(v50 - 8);
  __chkstk_darwin(v50);
  Swift::UInt64 v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v57 = (int *)__chkstk_darwin(v17);
  uint64_t v53 = v57[13];
  id v54 = a1;
  uint64_t v19 = (char *)&v44 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)&v19[v53] = 0LL;
  uint64_t v21 = a1[3];
  uint64_t v20 = a1[4];
  sub_100012ED8(a1, v21);
  unint64_t v22 = sub_1005BEAE8();
  int v51 = v16;
  uint64_t v23 = v56;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for BeaconEstimatedLocation.CodingKeys,  &type metadata for BeaconEstimatedLocation.CodingKeys,  v22,  v21,  v20);
  if (v23)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v54);
    return swift_bridgeObjectRelease();
  }

  else
  {
    char v24 = v13;
    id v25 = v11;
    uint64_t v56 = v8;
    char v59 = 0;
    unint64_t v26 = sub_100016FE0();
    uint64_t v27 = v50;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v58, &type metadata for Data, &v59, v50, &type metadata for Data, v26);
    *(_OWORD *)uint64_t v19 = v58;
    LOBYTE(v58) = 1;
    uint64_t v28 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v29 = v24;
    uint64_t v30 = v24;
    uint64_t v31 = v55;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v30, v55, &v58, v27, v55, v28);
    uint64_t v45 = v14;
    unint64_t v32 = &v19[v57[5]];
    uint64_t v44 = *(void (**)(char *, void *, uint64_t))(v52 + 32);
    v44(v32, v29, v31);
    LOBYTE(v58) = 2;
    uint64_t v33 = v25;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v25, v31, &v58, v27, v31, v28);
    uint64_t v34 = v57;
    v44(&v19[v57[6]], v33, v31);
    LOBYTE(v58) = 3;
    double v35 = KeyedDecodingContainer.decode(_:forKey:)(&v58, v27);
    NSString v36 = v54;
    *(double *)&v19[v34[7]] = v35;
    LOBYTE(v58) = 4;
    *(double *)&v19[v34[8]] = KeyedDecodingContainer.decode(_:forKey:)(&v58, v50);
    LOBYTE(v58) = 5;
    *(double *)&v19[v34[9]] = KeyedDecodingContainer.decode(_:forKey:)(&v58, v50);
    LOBYTE(v58) = 6;
    uint64_t v37 = sub_100007864( &qword_10099DA70,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v38 = v48;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v56, v48, &v58, v50, v48, v37);
    uint64_t v45 = v37;
    (*(void (**)(char *, void *, uint64_t))(v49 + 32))(&v19[v34[10]], v56, v38);
    char v59 = 7;
    unint64_t v39 = sub_10016EE8C();
    KeyedDecodingContainer.decode<A>(_:forKey:)( &v58,  &type metadata for LocationSource,  &v59,  v50,  &type metadata for LocationSource,  v39);
    uint64_t v40 = v38;
    v19[v34[11]] = v58;
    LOBYTE(v58) = 8;
    uint64_t v41 = (uint64_t)v47;
    NSString v42 = v51;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v40, &v58, v50, v40, v45);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v42, v50);
    sub_10003F130(v41, (uint64_t)&v19[v34[12]]);
    sub_10001DC4C((uint64_t)v19, v46, type metadata accessor for BeaconEstimatedLocation);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v36);
    return sub_100018C68((uint64_t)v19, type metadata accessor for BeaconEstimatedLocation);
  }

uint64_t sub_1005BE668(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009B4660);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1005BEAE8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for BeaconEstimatedLocation.CodingKeys,  &type metadata for BeaconEstimatedLocation.CodingKeys,  v11,  v9,  v10);
  __int128 v29 = *v3;
  char v30 = 0;
  unint64_t v12 = sub_1000170A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v29, &v30, v5, &type metadata for Data, v12);
  if (!v2)
  {
    uint64_t v13 = (int *)type metadata accessor for BeaconEstimatedLocation(0LL);
    uint64_t v14 = (char *)v3 + v13[5];
    LOBYTE(v29) = 1;
    uint64_t v15 = type metadata accessor for UUID(0LL);
    uint64_t v16 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v29, v5, v15, v16);
    uint64_t v17 = (char *)v3 + v13[6];
    LOBYTE(v29) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v29, v5, v15, v16);
    double v18 = *(double *)((char *)v3 + v13[7]);
    LOBYTE(v29) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(&v29, v5, v18);
    double v19 = *(double *)((char *)v3 + v13[8]);
    LOBYTE(v29) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(&v29, v5, v19);
    double v20 = *(double *)((char *)v3 + v13[9]);
    LOBYTE(v29) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(&v29, v5, v20);
    uint64_t v21 = (char *)v3 + v13[10];
    LOBYTE(v29) = 6;
    uint64_t v22 = type metadata accessor for Date(0LL);
    uint64_t v23 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v29, v5, v22, v23);
    LOBYTE(v29) = *((_BYTE *)v3 + v13[11]);
    char v30 = 7;
    unint64_t v24 = sub_10016EF94();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v29, &v30, v5, &type metadata for LocationSource, v24);
    id v25 = (char *)v3 + v13[12];
    LOBYTE(v29) = 8;
    uint64_t v26 = sub_100004AEC((uint64_t *)&unk_10099D720);
    unint64_t v27 = sub_1005BEB2C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v25, &v29, v5, v26, v27);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_1005BE98C()
{
  uint64_t v0 = objc_autoreleasePoolPush();
  if (qword_10099B5C8 != -1) {
    swift_once(&qword_10099B5C8, sub_1005BD7E8);
  }
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2ADC0);
  uint64_t v3 = UUID.uuidString.getter(v2);
  URL.appendingPathComponent(_:)(v3, v4);
  swift_bridgeObjectRelease();
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_1005BEA28@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005BE000(a1, a2);
}

uint64_t sub_1005BEA3C(void *a1)
{
  return sub_1005BE668(a1);
}

uint64_t sub_1005BEA50(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100007864( &qword_1009B27D8,  type metadata accessor for BeaconEstimatedLocation,  (uint64_t)&unk_1008099E8);
  uint64_t result = sub_100007864( (unint64_t *)&unk_1009B4640,  type metadata accessor for BeaconEstimatedLocation,  (uint64_t)&unk_1008099C0);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

uint64_t sub_1005BEAAC(uint64_t a1)
{
  uint64_t result = sub_100007864(&qword_1009B2B30, type metadata accessor for BeaconEstimatedLocation, (uint64_t)&unk_100809A10);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1005BEAE8()
{
  unint64_t result = qword_1009B4658;
  if (!qword_1009B4658)
  {
    unint64_t result = swift_getWitnessTable(&unk_100809C1C, &type metadata for BeaconEstimatedLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4658);
  }

  return result;
}

unint64_t sub_1005BEB2C()
{
  unint64_t result = qword_1009B4678;
  if (!qword_1009B4678)
  {
    uint64_t v1 = sub_100004B78((uint64_t *)&unk_10099D720);
    sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1009B4678);
  }

  return result;
}

void sub_1005BEBA8(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = (Swift::UInt8 *)(a2 + 56);
    do
    {
      uint64_t v6 = *((void *)v5 - 2);
      unint64_t v7 = *((void *)v5 - 1);
      Swift::UInt8 v8 = *(v5 - 24);
      Swift::UInt8 v9 = *v5;
      v5 += 32;
      Hasher._combine(_:)(v8);
      sub_10001736C(v6, v7);
      Data.hash(into:)(a1, v6, v7);
      Hasher._combine(_:)(v9);
      sub_100016F9C(v6, v7);
      --v4;
    }

    while (v4);
  }

uint64_t sub_1005BEC34(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::UInt v11 = *(void *)(a2 + 16);
  uint64_t v19 = a1;
  Hasher._combine(_:)(v11);
  if (v11)
  {
    uint64_t v12 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v13 = *(void *)(v5 + 72);
    uint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
    while (1)
    {
      v14(v10, v12, v4);
      uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
      v15(v10, 0LL, 1LL, v4);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1LL, v4);
      if ((_DWORD)result == 1) {
        break;
      }
      (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
      uint64_t v17 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      dispatch thunk of Hashable.hash(into:)(v19, v4, v17);
      (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
      v12 += v13;
      if (!--v11) {
        return v15(v10, 1LL, 1LL, v4);
      }
    }
  }

  else
  {
    uint64_t v15 = *(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v5 + 56);
    return v15(v10, 1LL, 1LL, v4);
  }

  return result;
}

void sub_1005BEDD8(uint64_t a1, uint64_t a2)
{
  Swift::UInt v4 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v4);
  if (v4)
  {
    uint64_t v5 = (uint64_t *)(a2 + 48);
    do
    {
      uint64_t v8 = *(v5 - 1);
      uint64_t v7 = *v5;
      uint64_t v10 = v5[1];
      uint64_t v9 = v5[2];
      uint64_t v12 = v5[3];
      uint64_t v11 = v5[4];
      int v13 = *((unsigned __int8 *)v5 + 40);
      Hasher._combine(_:)(*((_BYTE *)v5 - 16));
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRetain_n(v7, 2LL);
      swift_bridgeObjectRetain(v9);
      String.hash(into:)(a1, v8, v7);
      swift_bridgeObjectRelease(v7);
      swift_bridgeObjectRetain(v9);
      String.hash(into:)(a1, v10, v9);
      swift_bridgeObjectRelease(v9);
      if (v11)
      {
        Hasher._combine(_:)(1u);
        swift_bridgeObjectRetain(v11);
        String.hash(into:)(a1, v12, v11);
        swift_bridgeObjectRelease(v11);
        if (v13 != 2) {
          goto LABEL_9;
        }
      }

      else
      {
        Hasher._combine(_:)(0);
        if (v13 != 2)
        {
LABEL_9:
          Swift::UInt8 v6 = v13 & 1;
          Hasher._combine(_:)(1u);
          goto LABEL_4;
        }
      }

      Swift::UInt8 v6 = 0;
LABEL_4:
      v5 += 8;
      Hasher._combine(_:)(v6);
      swift_bridgeObjectRelease(v11);
      swift_bridgeObjectRelease(v9);
      swift_bridgeObjectRelease(v7);
      --v4;
    }

    while (v4);
  }

void sub_1005BEF24(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WildModeTrackingLocation(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (Swift::UInt64 *)((char *)&v16 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Swift::UInt v8 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v8);
  if (v8)
  {
    uint64_t v9 = a2 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v10 = *(void *)(v5 + 72);
    do
    {
      sub_10001DC4C(v9, (uint64_t)v7, type metadata accessor for WildModeTrackingLocation);
      if ((*v7 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v11 = *v7;
      }
      else {
        Swift::UInt64 v11 = 0LL;
      }
      Hasher._combine(_:)(v11);
      if ((v7[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v12 = v7[1];
      }
      else {
        Swift::UInt64 v12 = 0LL;
      }
      Hasher._combine(_:)(v12);
      if ((v7[2] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v13 = v7[2];
      }
      else {
        Swift::UInt64 v13 = 0LL;
      }
      Hasher._combine(_:)(v13);
      uint64_t v14 = type metadata accessor for Date(0LL);
      uint64_t v15 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      dispatch thunk of Hashable.hash(into:)(a1, v14, v15);
      sub_100018C68((uint64_t)v7, type metadata accessor for WildModeTrackingLocation);
      v9 += v10;
      --v8;
    }

    while (v8);
  }

void sub_1005BF070(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  uint64_t v49 = *(void *)(v4 - 8);
  uint64_t v50 = v4;
  __chkstk_darwin(v4);
  uint64_t v51 = (uint64_t)&v45 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_1009AC230);
  __chkstk_darwin(v6);
  Swift::UInt v8 = (char *)&v45 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v53 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v47 = (char *)&v45 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v11);
  Swift::UInt64 v13 = (char *)&v45 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = (int *)type metadata accessor for RawSearchResult(0LL);
  uint64_t v15 = *((void *)v14 - 1);
  __chkstk_darwin(v14);
  uint64_t v17 = (Swift::UInt8 *)&v45 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Swift::UInt v18 = *(void *)(a2 + 16);
  Hasher._combine(_:)(v18);
  if (v18)
  {
    uint64_t v19 = a2 + ((*(unsigned __int8 *)(v15 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v15 + 80));
    uint64_t v48 = *(void *)(v15 + 72);
    uint64_t v52 = v13;
    uint64_t v45 = v9;
    uint64_t v46 = v8;
    do
    {
      sub_10001DC4C(v19, (uint64_t)v17, type metadata accessor for RawSearchResult);
      Hasher._combine(_:)(*v17);
      uint64_t v21 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      dispatch thunk of Hashable.hash(into:)(a1, v9, v21);
      if ((*(void *)&v17[v14[6]] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v22 = *(void *)&v17[v14[6]];
      }
      else {
        Swift::UInt64 v22 = 0LL;
      }
      Hasher._combine(_:)(v22);
      if ((*(void *)&v17[v14[7]] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v23 = *(void *)&v17[v14[7]];
      }
      else {
        Swift::UInt64 v23 = 0LL;
      }
      Hasher._combine(_:)(v23);
      if ((*(void *)&v17[v14[8]] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
        Swift::UInt64 v24 = *(void *)&v17[v14[8]];
      }
      else {
        Swift::UInt64 v24 = 0LL;
      }
      Hasher._combine(_:)(v24);
      Hasher._combine(_:)(v17[v14[9]]);
      sub_10001581C((uint64_t)&v17[v14[10]], (uint64_t)v13, (uint64_t *)&unk_10099D720);
      uint64_t v25 = v53;
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v53 + 48))(v13, 1LL, v9) == 1)
      {
        Hasher._combine(_:)(0);
      }

      else
      {
        uint64_t v26 = v47;
        (*(void (**)(char *, char *, uint64_t))(v25 + 32))(v47, v52, v9);
        Hasher._combine(_:)(1u);
        dispatch thunk of Hashable.hash(into:)(a1, v9, v21);
        unint64_t v27 = v26;
        Swift::UInt64 v13 = v52;
        (*(void (**)(char *, uint64_t))(v53 + 8))(v27, v9);
      }

      uint64_t v29 = v49;
      uint64_t v28 = v50;
      sub_10001581C((uint64_t)&v17[v14[11]], (uint64_t)v8, &qword_1009AC230);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v29 + 48))(v8, 1LL, v28) == 1)
      {
        Hasher._combine(_:)(0);
      }

      else
      {
        uint64_t v30 = (uint64_t)v8;
        uint64_t v31 = v51;
        sub_1005BA6BC(v30, v51);
        Hasher._combine(_:)(1u);
        uint64_t v32 = type metadata accessor for UUID(0LL);
        uint64_t v33 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(a1, v32, v33);
        uint64_t v34 = (void *)(v31 + *(int *)(v28 + 20));
        uint64_t v36 = v34[3];
        uint64_t v35 = v34[4];
        sub_100012ED8(v34, v36);
        dispatch thunk of RawRepresentable.rawValue.getter(&v54, v36, *(void *)(v35 + 56));
        Hasher._combine(_:)(v54);
        uint64_t v37 = v34[3];
        uint64_t v38 = v34[4];
        sub_100012ED8(v34, v37);
        int v39 = sub_1005F5498(v37, v38);
        if (v39)
        {
          if (v39 == 1)
          {
            unint64_t v40 = 0xE900000000000079LL;
            uint64_t v41 = 0x7261646E6F636553LL;
          }

          else
          {
            unint64_t v40 = 0xEF736E6F69746163LL;
            uint64_t v41 = 0x6F4C657275636553LL;
          }
        }

        else
        {
          unint64_t v40 = 0xE700000000000000LL;
          uint64_t v41 = 0x7972616D697250LL;
        }

        uint64_t v9 = v45;
        Swift::UInt v8 = v46;
        Swift::UInt64 v13 = v52;
        String.hash(into:)(a1, v41, v40);
        swift_bridgeObjectRelease();
        sub_100018C68(v51, type metadata accessor for BeaconKeyManager.IndexInformation);
      }

      uint64_t v42 = type metadata accessor for UUID(0LL);
      uint64_t v43 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      dispatch thunk of Hashable.hash(into:)(a1, v42, v43);
      uint64_t v44 = &v17[v14[13]];
      if ((v44[1] & 1) != 0)
      {
        Swift::UInt8 v20 = 0;
      }

      else
      {
        Swift::UInt8 v20 = *v44;
        Hasher._combine(_:)(1u);
      }

      Hasher._combine(_:)(v20);
      sub_100018C68((uint64_t)v17, type metadata accessor for RawSearchResult);
      v19 += v48;
      --v18;
    }

    while (v18);
  }

uint64_t sub_1005BF574(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v34 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D760);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v34 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v34 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v34 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v34 - v18;
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, a1[1]);
  if ((v20 & 1) == 0) {
    return 0LL;
  }
  uint64_t v37 = v4;
  uint64_t v21 = (int *)type metadata accessor for BeaconEstimatedLocation(0LL);
  if ((static UUID.== infix(_:_:)((char *)a1 + v21[5], a2 + v21[5]) & 1) == 0
    || (static UUID.== infix(_:_:)((char *)a1 + v21[6], a2 + v21[6]) & 1) == 0
    || *(double *)((char *)a1 + v21[7]) != *(double *)(a2 + v21[7])
    || *(double *)((char *)a1 + v21[8]) != *(double *)(a2 + v21[8])
    || *(double *)((char *)a1 + v21[9]) != *(double *)(a2 + v21[9])
    || (static Date.== infix(_:_:)((char *)a1 + v21[10], a2 + v21[10]) & 1) == 0
    || *((unsigned __int8 *)a1 + v21[11]) != *(unsigned __int8 *)(a2 + v21[11]))
  {
    return 0LL;
  }

  sub_10001581C((uint64_t)a1 + v21[12], (uint64_t)v19, (uint64_t *)&unk_10099D720);
  uint64_t v35 = v21;
  sub_10001581C(a2 + v21[12], (uint64_t)v17, (uint64_t *)&unk_10099D720);
  uint64_t v22 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_10001581C((uint64_t)v19, (uint64_t)v10, (uint64_t *)&unk_10099D720);
  uint64_t v36 = v22;
  sub_10001581C((uint64_t)v17, v22, (uint64_t *)&unk_10099D720);
  Swift::UInt64 v23 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  uint64_t v24 = v37;
  if (v23((uint64_t)v10, 1LL, v37) != 1)
  {
    sub_10001581C((uint64_t)v10, (uint64_t)v14, (uint64_t *)&unk_10099D720);
    if (v23(v36, 1LL, v24) != 1)
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v36, v24);
      uint64_t v26 = sub_100007864( &qword_10099DA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      char v27 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v7, v24, v26);
      uint64_t v28 = *(void (**)(char *, uint64_t))(v5 + 8);
      v28(v7, v24);
      sub_100015794((uint64_t)v17, (uint64_t *)&unk_10099D720);
      sub_100015794((uint64_t)v19, (uint64_t *)&unk_10099D720);
      v28(v14, v24);
      sub_100015794((uint64_t)v10, (uint64_t *)&unk_10099D720);
      if ((v27 & 1) == 0) {
        return 0LL;
      }
      goto LABEL_18;
    }

    sub_100015794((uint64_t)v17, (uint64_t *)&unk_10099D720);
    sub_100015794((uint64_t)v19, (uint64_t *)&unk_10099D720);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v24);
LABEL_14:
    sub_100015794((uint64_t)v10, (uint64_t *)&unk_10099D760);
    return 0LL;
  }

  sub_100015794((uint64_t)v17, (uint64_t *)&unk_10099D720);
  sub_100015794((uint64_t)v19, (uint64_t *)&unk_10099D720);
  if (v23(v36, 1LL, v24) != 1) {
    goto LABEL_14;
  }
  sub_100015794((uint64_t)v10, (uint64_t *)&unk_10099D720);
LABEL_18:
  uint64_t v29 = v35[13];
  uint64_t v30 = *(uint64_t *)((char *)a1 + v29);
  uint64_t v31 = *(void *)(a2 + v29);
  if (v30)
  {
    if (v31)
    {
      swift_bridgeObjectRetain(v31);
      swift_bridgeObjectRetain(v30);
      char v33 = sub_100126C54(v32, v31);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v33 & 1) != 0) {
        return 1LL;
      }
    }
  }

  else if (!v31)
  {
    return 1LL;
  }

  return 0LL;
}

unint64_t sub_1005BF97C()
{
  unint64_t result = qword_1009B4680;
  if (!qword_1009B4680)
  {
    unint64_t result = swift_getWitnessTable( &unk_100809BDC,  &type metadata for BeaconEstimatedLocation.BeaconEstimatedLocationConversionError);
    atomic_store(result, (unint64_t *)&qword_1009B4680);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for BeaconEstimatedLocation.BeaconEstimatedLocationConversionError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1005BFA0C + 4 * byte_100809897[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1005BFA40 + 4 * byte_100809892[v4]))();
}

uint64_t sub_1005BFA40(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005BFA48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005BFA50LL);
  }
  return result;
}

uint64_t sub_1005BFA5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005BFA64LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1005BFA68(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005BFA70(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconEstimatedLocation.BeaconEstimatedLocationConversionError()
{
  return &type metadata for BeaconEstimatedLocation.BeaconEstimatedLocationConversionError;
}

uint64_t storeEnumTagSinglePayload for BeaconEstimatedLocation.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_1005BFAD8 + 4 * byte_1008098A1[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1005BFB0C + 4 * byte_10080989C[v4]))();
}

uint64_t sub_1005BFB0C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005BFB14(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005BFB1CLL);
  }
  return result;
}

uint64_t sub_1005BFB28(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005BFB30LL);
  }
  *(_BYTE *)unint64_t result = a2 + 8;
  return result;
}

uint64_t sub_1005BFB34(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005BFB3C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconEstimatedLocation.CodingKeys()
{
  return &type metadata for BeaconEstimatedLocation.CodingKeys;
}

unint64_t sub_1005BFB5C()
{
  unint64_t result = qword_1009B4690;
  if (!qword_1009B4690)
  {
    unint64_t result = swift_getWitnessTable(&unk_100809B4C, &type metadata for BeaconEstimatedLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4690);
  }

  return result;
}

unint64_t sub_1005BFBA4()
{
  unint64_t result = qword_1009B4698;
  if (!qword_1009B4698)
  {
    unint64_t result = swift_getWitnessTable( &unk_100809BB4,  &type metadata for BeaconEstimatedLocation.BeaconEstimatedLocationConversionError);
    atomic_store(result, (unint64_t *)&qword_1009B4698);
  }

  return result;
}

unint64_t sub_1005BFBEC()
{
  unint64_t result = qword_1009B46A0;
  if (!qword_1009B46A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100809A84, &type metadata for BeaconEstimatedLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B46A0);
  }

  return result;
}

unint64_t sub_1005BFC34()
{
  unint64_t result = qword_1009B46A8;
  if (!qword_1009B46A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100809AAC, &type metadata for BeaconEstimatedLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B46A8);
  }

  return result;
}

unint64_t sub_1005BFC78(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100936660, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 9) {
    return 9LL;
  }
  else {
    return v3;
  }
}

uint64_t *sub_1005BFCC0(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v22);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = a3[6];
    uint64_t v10 = (uint64_t *)((char *)a1 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    void *v10 = *v11;
    v10[1] = v12;
    *(uint64_t *)((char *)a1 + v9) = *(uint64_t *)((char *)a2 + v9);
    uint64_t v13 = a3[7];
    uint64_t v14 = a3[8];
    uint64_t v15 = (uint64_t *)((char *)a1 + v13);
    uint64_t v16 = (uint64_t *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = (char *)a1 + v14;
    uint64_t v19 = (char *)a2 + v14;
    uint64_t v20 = type metadata accessor for Date(0LL);
    uint64_t v21 = *(void (**)(char *, char *, uint64_t))(*(void *)(v20 - 8) + 16LL);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v17);
    v21(v18, v19, v20);
  }

  return a1;
}

uint64_t sub_1005BFDB8(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[5] + 8));
  swift_bridgeObjectRelease(*(void *)(a1 + a2[7] + 8));
  uint64_t v5 = a1 + a2[8];
  uint64_t v6 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
}

uint64_t sub_1005BFE34(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = (void *)(a1 + v7);
  uint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v12 = a3[7];
  uint64_t v13 = a3[8];
  uint64_t v14 = (void *)(a1 + v12);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = a1 + v13;
  uint64_t v18 = a2 + v13;
  uint64_t v19 = type metadata accessor for Date(0LL);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v19 - 8) + 16LL);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v16);
  v20(v17, v18, v19);
  return a1;
}

uint64_t sub_1005BFF00(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v11 = v8[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v12 = a3[7];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  *uint64_t v13 = *v14;
  uint64_t v15 = v14[1];
  uint64_t v16 = v13[1];
  v13[1] = v15;
  swift_bridgeObjectRetain(v15);
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = a3[8];
  uint64_t v18 = a1 + v17;
  uint64_t v19 = a2 + v17;
  uint64_t v20 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 24LL))(v18, v19, v20);
  return a1;
}

uint64_t sub_1005BFFE0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(void *)(a1 + sub_100016F9C(v0, v7) = *(void *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_OWORD *)(a1 + a3[7]) = *(_OWORD *)(a2 + a3[7]);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 32LL))(v9, v10, v11);
  return a1;
}

uint64_t sub_1005C0078(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  uint64_t v11 = *v9;
  uint64_t v10 = v9[1];
  uint64_t v12 = v8[1];
  *uint64_t v8 = v11;
  v8[1] = v10;
  swift_bridgeObjectRelease(v12);
  uint64_t v13 = a3[7];
  *(void *)(a1 + a3[6]) = *(void *)(a2 + a3[6]);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  uint64_t v18 = v14[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease(v18);
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 40LL))(v20, v21, v22);
  return a1;
}

uint64_t sub_1005C0134(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005C0140);
}

uint64_t sub_1005C0140(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    uint64_t v10 = a1 + *(int *)(a3 + 32);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
    return v9(v10, a2, v8);
  }

  unint64_t v11 = *(void *)(a1 + *(int *)(a3 + 20) + 8);
  if (v11 >= 0xFFFFFFFF) {
    LODWORD(v11) = -1;
  }
  return (v11 + 1);
}

uint64_t sub_1005C01EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005C01F8);
}

uint64_t sub_1005C01F8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + *(int *)(a4 + 20) + 8) = (a2 - 1);
      return result;
    }

    uint64_t v10 = type metadata accessor for Date(0LL);
    uint64_t v12 = a1 + *(int *)(a4 + 32);
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for KeySyncMetadataDisplay(uint64_t a1)
{
  uint64_t result = qword_1009B4708;
  if (!qword_1009B4708) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for KeySyncMetadataDisplay);
  }
  return result;
}

uint64_t sub_1005C02DC(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = &unk_100809C98;
    void v5[2] = (char *)&value witness table for Builtin.Int64 + 64;
    v5[3] = &unk_100809C98;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      void v5[4] = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 5LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1005C0378(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B4750);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1005C0A58();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for KeySyncMetadataDisplay.CodingKeys,  &type metadata for KeySyncMetadataDisplay.CodingKeys,  v11,  v9,  v10);
  char v31 = 0;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v31, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = (int *)type metadata accessor for KeySyncMetadataDisplay(0LL);
    uint64_t v15 = (uint64_t *)(v3 + v14[5]);
    uint64_t v16 = *v15;
    uint64_t v17 = v15[1];
    char v30 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v30, v5);
    uint64_t v18 = *(void *)(v3 + v14[6]);
    char v29 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v29, v5);
    uint64_t v19 = (uint64_t *)(v3 + v14[7]);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    char v28 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v28, v5);
    uint64_t v22 = v3 + v14[8];
    char v27 = 4;
    uint64_t v23 = type metadata accessor for Date(0LL);
    uint64_t v24 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v22, &v27, v5, v23, v24);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1005C058C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v29 = a2;
  uint64_t v30 = type metadata accessor for Date(0LL);
  uint64_t v28 = *(void *)(v30 - 8);
  __chkstk_darwin(v30);
  char v31 = (uint64_t *)((char *)&v27 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v32 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  char v33 = (uint64_t *)((char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v35 = sub_100004AEC(&qword_1009B4760);
  uint64_t v6 = *(void *)(v35 - 8);
  __chkstk_darwin(v35);
  uint64_t v8 = (char *)&v27 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = (int *)type metadata accessor for KeySyncMetadataDisplay(0LL);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = a1[3];
  uint64_t v12 = a1[4];
  sub_100012ED8(a1, v13);
  unint64_t v14 = sub_1005C0A58();
  uint64_t v34 = v8;
  uint64_t v15 = v36;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for KeySyncMetadataDisplay.CodingKeys,  &type metadata for KeySyncMetadataDisplay.CodingKeys,  v14,  v13,  v12);
  if (v15) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v16 = (uint64_t)v11;
  char v41 = 0;
  uint64_t v17 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v18 = v32;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v33, v32, &v41, v35, v32, v17);
  (*(void (**)(uint64_t, void *, uint64_t))(v4 + 32))(v16, v33, v18);
  char v40 = 1;
  uint64_t v19 = KeyedDecodingContainer.decode(_:forKey:)(&v40, v35);
  uint64_t v20 = (uint64_t *)(v16 + v9[5]);
  *uint64_t v20 = v19;
  v20[1] = v21;
  char v39 = 2;
  *(void *)(v16 + v9[6]) = KeyedDecodingContainer.decode(_:forKey:)(&v39, v35);
  char v38 = 3;
  uint64_t v22 = KeyedDecodingContainer.decode(_:forKey:)(&v38, v35);
  uint64_t v23 = (uint64_t *)(v16 + v9[7]);
  *uint64_t v23 = v22;
  v23[1] = v24;
  char v37 = 4;
  uint64_t v25 = sub_100007864( &qword_10099DA70,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v31, v30, &v37, v35, v30, v25);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v34, v35);
  (*(void (**)(uint64_t, void *, uint64_t))(v28 + 32))(v16 + v9[8], v31, v30);
  sub_1005C0A9C(v16, v29);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return sub_1005C0AE0(v16);
}

uint64_t sub_1005C0930()
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1005C0964 + 4 * byte_100809C70[*v0]))( 0xD000000000000010LL,  0x800000010084D8A0LL);
}

uint64_t sub_1005C0964()
{
  return 1701869940LL;
}

uint64_t sub_1005C0974()
{
  return 0x7865646E69LL;
}

uint64_t sub_1005C0988()
{
  return 0x65636E6575716573LL;
}

uint64_t sub_1005C09A0()
{
  return 0x6D617473656D6974LL;
}

uint64_t sub_1005C09BC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1005C0CC0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005C09E0(uint64_t a1)
{
  unint64_t v2 = sub_1005C0A58();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005C0A08(uint64_t a1)
{
  unint64_t v2 = sub_1005C0A58();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005C0A30@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005C058C(a1, a2);
}

uint64_t sub_1005C0A44(void *a1)
{
  return sub_1005C0378(a1);
}

unint64_t sub_1005C0A58()
{
  unint64_t result = qword_1009B4758;
  if (!qword_1009B4758)
  {
    unint64_t result = swift_getWitnessTable(&unk_100809DC4, &type metadata for KeySyncMetadataDisplay.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4758);
  }

  return result;
}

uint64_t sub_1005C0A9C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for KeySyncMetadataDisplay(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005C0AE0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for KeySyncMetadataDisplay(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for KeySyncMetadataDisplay.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1005C0B68 + 4 * byte_100809C7A[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1005C0B9C + 4 * byte_100809C75[v4]))();
}

uint64_t sub_1005C0B9C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005C0BA4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005C0BACLL);
  }
  return result;
}

uint64_t sub_1005C0BB8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005C0BC0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1005C0BC4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005C0BCC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for KeySyncMetadataDisplay.CodingKeys()
{
  return &type metadata for KeySyncMetadataDisplay.CodingKeys;
}

unint64_t sub_1005C0BEC()
{
  unint64_t result = qword_1009B4768;
  if (!qword_1009B4768)
  {
    unint64_t result = swift_getWitnessTable(&unk_100809D9C, &type metadata for KeySyncMetadataDisplay.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4768);
  }

  return result;
}

unint64_t sub_1005C0C34()
{
  unint64_t result = qword_1009B4770;
  if (!qword_1009B4770)
  {
    unint64_t result = swift_getWitnessTable(&unk_100809D0C, &type metadata for KeySyncMetadataDisplay.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4770);
  }

  return result;
}

unint64_t sub_1005C0C7C()
{
  unint64_t result = qword_1009B4778;
  if (!qword_1009B4778)
  {
    unint64_t result = swift_getWitnessTable(&unk_100809D34, &type metadata for KeySyncMetadataDisplay.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4778);
  }

  return result;
}

uint64_t sub_1005C0CC0(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x800000010084D8A0LL;
    if (a2 == 0x800000010084D8A0LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010084D8A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 1701869940 && a2 == 0xE400000000000000LL)
  {
    unint64_t v6 = 0xE400000000000000LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 0x7865646E69LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v7 = 0xE500000000000000LL;
LABEL_17:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7865646E69LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_17;
  }

  if (a1 == 0x65636E6575716573LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v8 = 0xE800000000000000LL;
LABEL_23:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65636E6575716573LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_23;
  }

  if (a1 == 0x6D617473656D6974LL && a2 == 0xE900000000000070LL)
  {
    swift_bridgeObjectRelease(0xE900000000000070LL);
    return 4LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6D617473656D6974LL, 0xE900000000000070LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 4LL;
    }
    else {
      return 5LL;
    }
  }

uint64_t sub_1005C0ECC()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2ADD8);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2ADD8);
  if (qword_10099B5D8 != -1) {
    swift_once(&qword_10099B5D8, sub_1005C1EA8);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_100A2ADF0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

unint64_t sub_1005C0F5C()
{
  uint64_t v1 = *(void *)(v0 + 144);
  if (v1)
  {
    unint64_t v2 = *(void *)(v0 + 144);
  }

  else
  {
    uint64_t v3 = sub_100004AEC(&qword_10099FAA8);
    uint64_t inited = swift_initStackObject(v3, &v11);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(FAFamilyUpdateNotification);
    uint64_t v7 = v6;
    uint64_t v8 = swift_allocObject(&unk_100967478, 24LL, 7LL);
    swift_weakInit(v8 + 16, v0);
    uint64_t v9 = swift_allocObject(&unk_1009674A0, 32LL, 7LL);
    *(void *)(v9 + swift_weakDestroy(v0 + 16) = sub_1005C1F4C;
    *(void *)(v9 + 24) = v8;
    *(void *)(inited + 32) = v5;
    *(void *)(inited + 40) = v7;
    *(void *)(inited + 48) = sub_10009BF1C;
    *(void *)(inited + 56) = v9;
    unint64_t v2 = sub_100412BD0(inited);
    *(void *)(v0 + 144) = v2;
    swift_bridgeObjectRetain(v2);
    swift_bridgeObjectRelease();
    uint64_t v1 = 0LL;
  }

  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t sub_1005C1058(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v5, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v2);
  if (result)
  {
    uint64_t v4 = result;
    type metadata accessor for Transaction(0LL);
    swift_retain(v4);
    static Transaction.asyncTask(name:block:)("FAFamilyUpdate", 14LL, 2LL, &unk_1009B4908, v4);
    return swift_release_n(v4, 2LL);
  }

  return result;
}

uint64_t sub_1005C10E0(void *a1)
{
  v1[2] = a1;
  v1[3] = *a1;
  uint64_t v3 = sub_100004AEC(&qword_1009A9BF0);
  v1[4] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1005C1148, a1, 0LL);
}

uint64_t sub_1005C1148()
{
  if (qword_10099B5D0 != -1) {
    swift_once(&qword_10099B5D0, sub_1005C0ECC);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2ADD8);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Flushing cached familyMembers", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v0 + 32);
  __int128 v11 = *(_OWORD *)(v0 + 16);

  *(void *)(v11 + 152) = 0LL;
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))(v6, 1LL, 1LL, v7);
  unint64_t v8 = sub_1005C1E28();
  uint64_t v9 = swift_allocObject(&unk_1009674C8, 48LL, 7LL);
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v11;
  *(void *)(v9 + 24) = v8;
  *(_OWORD *)(v9 + 32) = v11;
  swift_retain_n(v11, 2LL);
  sub_1003EDB00(v6, (uint64_t)&unk_1009B4918, v9);
  swift_release();
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005C12CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[5] = a4;
  uint64_t v6 = sub_100004AEC(&qword_1009B4920);
  void v4[6] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[7] = v7;
  v4[8] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009B4928);
  void v4[9] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[10] = v9;
  v4[11] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = (void *)swift_task_alloc(dword_1009B47AC);
  v4[12] = v10;
  void *v10 = v4;
  v10[1] = sub_1005C1388;
  v10[16] = a4;
  return swift_task_switch(sub_1005C1734, a4, 0LL);
}

uint64_t sub_1005C1388(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 96);
  uint64_t v5 = *(void *)(*v2 + 40);
  *(void *)(v3 + 104) = a1;
  *(void *)(v3 + 112) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v6 = sub_1005C155C;
  }
  else {
    uint64_t v6 = sub_1005C13F8;
  }
  return swift_task_switch(v6, v5, 0LL);
}

uint64_t sub_1005C13F8()
{
  uint64_t result = static Transaction.current.getter();
  if (result)
  {
    uint64_t v2 = result;
    uint64_t v3 = *(void *)(*(void *)(v0 + 40) + 136LL);
    uint64_t v4 = *(void *)(v3 + 16);
    if (v4)
    {
      uint64_t v5 = *(void *)(v0 + 80);
      uint64_t v18 = *(void *)(v0 + 56);
      uint64_t v6 = v3 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
      uint64_t v7 = v5;
      uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
      uint64_t v17 = *(void *)(v5 + 72);
      uint64_t v15 = *(void *)(*(void *)(v0 + 40) + 136LL);
      swift_bridgeObjectRetain(v3);
      do
      {
        uint64_t v8 = *(void *)(v0 + 104);
        uint64_t v9 = *(void *)(v0 + 88);
        uint64_t v11 = *(void *)(v0 + 64);
        uint64_t v10 = *(void *)(v0 + 72);
        uint64_t v12 = *(void *)(v0 + 48);
        v16(v9, v6, v10);
        *(void *)(v0 + swift_weakDestroy(v0 + 16) = v2;
        *(void *)(v0 + 24) = v8;
        swift_retain(v2);
        swift_bridgeObjectRetain(v8);
        AsyncStream.Continuation.yield(_:)(v0 + 16, v10);
        (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v11, v12);
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v10);
        v6 += v17;
        --v4;
      }

      while (v4);
      uint64_t v13 = *(void *)(v0 + 104);
      swift_bridgeObjectRelease(v15);
    }

    else
    {
      uint64_t v13 = *(void *)(v0 + 104);
    }

    swift_release(v2);
    swift_bridgeObjectRelease(v13);
    uint64_t v14 = *(void *)(v0 + 64);
    swift_task_dealloc(*(void *)(v0 + 88));
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1005C155C()
{
  if (qword_10099B5D0 != -1) {
    swift_once(&qword_10099B5D0, sub_1005C0ECC);
  }
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2ADD8);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 112);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138543362;
    uint64_t v10 = _convertErrorToNSError(_:)(v7);
    *(void *)(v0 + 32) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v8 + 4, v8 + 12);
    *uint64_t v9 = v10;
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error fetching members: %{public}@", v8, 0xCu);
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);

    swift_errorRelease(v7);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 112));
    swift_errorRelease(v7);
  }

  uint64_t v12 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005C171C()
{
  *(void *)(v1 + 128) = v0;
  return swift_task_switch(sub_1005C1734, v0, 0LL);
}

uint64_t sub_1005C1734()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v1 + 152);
  if (v2)
  {
    swift_bridgeObjectRetain(*(void *)(v1 + 152));
    uint64_t v4 = static os_log_type_t.debug.getter(v3);
    if (qword_10099B728 != -1) {
      swift_once(&qword_10099B728, sub_1006512E8);
    }
    os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  qword_100A2B038,  "Using cached FamilyCircle",  25LL,  2LL,  _swiftEmptyArrayStorage);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
  }

  else
  {
    uint64_t v6 = v0 + 16;
    id v7 = [objc_allocWithZone(FAFetchFamilyCircleRequest) init];
    *(void *)(v0 + 136) = v7;
    [v7 setCachePolicy:1];
    *(void *)(v0 + 56) = v0 + 120;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v0;
    *(void *)(v0 + 24) = sub_1005C1890;
    uint64_t v8 = swift_continuation_init(v0 + 16, 1LL);
    *(void *)(v0 + 80) = _NSConcreteStackBlock;
    uint64_t v9 = (void *)(v0 + 80);
    v9[1] = 0x40000000LL;
    v9[2] = sub_1005C1C90;
    v9[3] = &unk_100967450;
    v9[4] = v8;
    [v7 startRequestWithCompletionHandler:v9];
    return swift_continuation_await(v6);
  }

uint64_t sub_1005C1890()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 144) = v2;
  if (v2) {
    uint64_t v3 = sub_1005C1C50;
  }
  else {
    uint64_t v3 = sub_1005C18F0;
  }
  return swift_task_switch(v3, *(void *)(v1 + 128), 0LL);
}

void sub_1005C18F0()
{
  uint64_t v1 = *(void **)(v0 + 120);
  id v2 = [v1 members];
  unint64_t v3 = sub_1005C1E6C();
  uint64_t v4 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v2, v3);

  if (!((unint64_t)v4 >> 62))
  {
    uint64_t v5 = *(void *)((v4 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    swift_bridgeObjectRetain(v4);
    uint64_t v43 = v1;
    uint64_t v44 = v0;
    if (v5) {
      goto LABEL_3;
    }
LABEL_31:
    uint64_t v8 = _swiftEmptyArrayStorage;
LABEL_32:
    uint64_t v40 = *(void *)(v44 + 128);
    char v41 = *(void **)(v44 + 136);
    swift_bridgeObjectRelease_n(v4, 2LL);
    uint64_t v42 = sub_1006F2014((uint64_t)v8);
    swift_bridgeObjectRelease();

    *(void *)(v40 + 152) = v42;
    swift_bridgeObjectRetain(v42);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t))(v44 + 8))(v42);
    return;
  }

  if (v4 < 0) {
    uint64_t v39 = v4;
  }
  else {
    uint64_t v39 = v4 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v4);
  uint64_t v5 = _CocoaArrayWrapper.endIndex.getter(v39);
  uint64_t v43 = v1;
  uint64_t v44 = v0;
  if (!v5) {
    goto LABEL_31;
  }
LABEL_3:
  if (v5 >= 1)
  {
    uint64_t v6 = 0LL;
    unint64_t v7 = v4 & 0xC000000000000001LL;
    uint64_t v8 = _swiftEmptyArrayStorage;
    uint64_t v9 = &selRef_initWithCoder_;
    unint64_t v45 = v4 & 0xC000000000000001LL;
    uint64_t v46 = v5;
    do
    {
      if (v7) {
        id v10 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v6, v4);
      }
      else {
        id v10 = *(id *)(v4 + 8 * v6 + 32);
      }
      uint64_t v11 = v10;
      id v12 = [v10 v9[62]];
      if (v12)
      {
        uint64_t v13 = v12;
        uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
        uint64_t v16 = v15;

        id v17 = [v11 appleID];
        if (v17)
        {
          uint64_t v18 = v17;
          uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
          uint64_t v50 = v20;
          uint64_t v51 = v19;

          unsigned __int8 v49 = [v11 isMe];
          id v21 = [v11 firstName];
          if (v21)
          {
            uint64_t v22 = v21;
            uint64_t v23 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
            uint64_t v47 = v24;
            uint64_t v48 = v23;
          }

          else
          {
            uint64_t v47 = 0LL;
            uint64_t v48 = 0LL;
          }

          uint64_t v52 = v14;
          id v25 = [v11 lastName];
          if (v25)
          {
            uint64_t v26 = v25;
            uint64_t v27 = static String._unconditionallyBridgeFromObjectiveC(_:)(v25);
            uint64_t v29 = v28;
          }

          else
          {
            uint64_t v27 = 0LL;
            uint64_t v29 = 0LL;
          }

          uint64_t v30 = v4;
          id v31 = [v11 fullName];
          if (v31)
          {
            uint64_t v32 = v31;
            uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v31);
            uint64_t v35 = v34;
          }

          else
          {

            uint64_t v33 = 0LL;
            uint64_t v35 = 0LL;
          }

          if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0) {
            uint64_t v8 = sub_1004C6970(0LL, v8[2] + 1LL, 1, v8);
          }
          unint64_t v37 = v8[2];
          unint64_t v36 = v8[3];
          if (v37 >= v36 >> 1) {
            uint64_t v8 = sub_1004C6970((void *)(v36 > 1), v37 + 1, 1, v8);
          }
          v8[2] = v37 + 1;
          char v38 = &v8[11 * v37];
          v38[4] = v52;
          v38[5] = v16;
          v38[6] = v51;
          v38[7] = v50;
          *((_BYTE *)v38 + 64) = v49;
          v38[9] = v48;
          v38[10] = v47;
          v38[11] = v27;
          v38[12] = v29;
          v38[13] = v33;
          v38[14] = v35;
          uint64_t v4 = v30;
          unint64_t v7 = v45;
          uint64_t v5 = v46;
          uint64_t v9 = &selRef_initWithCoder_;
        }

        else
        {

          swift_bridgeObjectRelease();
        }
      }

      else
      {
      }

      ++v6;
    }

    while (v5 != v6);
    goto LABEL_32;
  }

  __break(1u);
}

uint64_t sub_1005C1C50()
{
  uint64_t v1 = *(void **)(v0 + 136);
  swift_willThrow();

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005C1C90(uint64_t result, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(result + 32);
  if (a3)
  {
    uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *unint64_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else if (a2)
  {
    **(void **)(*(void *)(v3 + 64) + 4Hasher.init(_seed:)(v1, 0LL) = a2;
    id v9 = a2;
    return swift_continuation_throwingResume(v3);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1005C1D1C()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for FamilyCircleService()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd19FamilyCircleService);
}

uint64_t sub_1005C1D80()
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v0;
  return swift_task_switch(sub_1005C1D98, v0, 0LL);
}

uint64_t sub_1005C1D98()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t v2 = sub_1005C0F5C();
  uint64_t v3 = type metadata accessor for DarwinNotificationHelper(0LL);
  swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  *(void *)(v1 + 128) = DarwinNotificationHelper.init(notificationHandlers:)(v2);
  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1005C1E04(uint64_t a1)
{
  unint64_t result = sub_1005C1E28();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1005C1E28()
{
  unint64_t result = qword_1009B48F8;
  if (!qword_1009B48F8)
  {
    uint64_t v1 = type metadata accessor for FamilyCircleService();
    unint64_t result = swift_getWitnessTable(&unk_100809EC0, v1);
    atomic_store(result, &qword_1009B48F8);
  }

  return result;
}

unint64_t sub_1005C1E6C()
{
  unint64_t result = qword_10099DF88;
  if (!qword_10099DF88)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___FAFamilyMember);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, &qword_10099DF88);
  }

  return result;
}

uint64_t sub_1005C1EA8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2ADF0);
  sub_10000A720(v0, (uint64_t)qword_100A2ADF0);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000013LL,  0x8000000100809E50LL);
}

uint64_t sub_1005C1F28()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1005C1F4C(uint64_t a1)
{
  return sub_1005C1058(a1, v1);
}

uint64_t sub_1005C1F54()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1005C1F78()
{
  unint64_t v2 = (void *)swift_task_alloc(dword_1009B4904);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *unint64_t v2 = v1;
  v2[1] = sub_100015D58;
  return sub_1005C10E0(v0);
}

uint64_t sub_1005C1FC0()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1005C1FEC(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  unint64_t v7 = (void *)swift_task_alloc(dword_1009B4914);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *unint64_t v7 = v2;
  v7[1] = sub_1000159BC;
  return sub_1005C12CC(a1, v4, v5, v6);
}

uint64_t sub_1005C2064(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B4AE8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1005C51BC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for OwnSubmitPayload.CodingKeys,  &type metadata for OwnSubmitPayload.CodingKeys,  v11,  v9,  v10);
  __int128 v23 = *v3;
  char v22 = 0;
  unint64_t v12 = sub_1000170A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, &type metadata for Data, v12);
  if (!v2)
  {
    LOBYTE(v23) = *((_BYTE *)v3 + 16);
    char v22 = 1;
    unint64_t v13 = sub_1005C5350();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, &type metadata for OwnSubmitPayloadTypes.KeyType, v13);
    uint64_t v14 = *((void *)v3 + 3);
    uint64_t v15 = *((void *)v3 + 4);
    LOBYTE(v23) = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v23, v5);
    sub_100015750((uint64_t)v3 + 40, (uint64_t)&v25, &qword_1009B4AF8);
    sub_100015750((uint64_t)&v25, (uint64_t)&v23, &qword_1009B4AF8);
    char v22 = 3;
    unint64_t v16 = sub_1005C5394();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)( &v23,  &v22,  v5,  &type metadata for OwnSubmitPayloadTypes.ShareType,  v16);
    sub_100015750((uint64_t)v3 + 41, (uint64_t)&v24, &qword_1009B4B08);
    sub_100015750((uint64_t)&v24, (uint64_t)&v23, &qword_1009B4B08);
    char v22 = 4;
    unint64_t v17 = sub_1005C53D8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)( &v23,  &v22,  v5,  &type metadata for OwnSubmitPayloadTypes.Mode,  v17);
    *(void *)&__int128 v23 = *((void *)v3 + 6);
    char v22 = 5;
    uint64_t v18 = sub_100004AEC(&qword_1009B4AD8);
    uint64_t v19 = sub_1005C52CC( &qword_1009B4B18,  &qword_1009B49E0,  (uint64_t)&unk_100809FF4,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, v18, v19);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1005C22FC(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B4AA8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  id v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1005C50F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for OwnSubmitLocationInfo.CodingKeys,  &type metadata for OwnSubmitLocationInfo.CodingKeys,  v11,  v9,  v10);
  __int128 v19 = *v3;
  char v18 = 0;
  unint64_t v12 = sub_1000170A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v19, &v18, v5, &type metadata for Data, v12);
  if (!v2)
  {
    unint64_t v13 = (char *)v3 + *(int *)(type metadata accessor for OwnSubmitLocationInfo(0LL) + 20);
    LOBYTE(v19) = 1;
    uint64_t v14 = type metadata accessor for Date(0LL);
    uint64_t v15 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v13, &v19, v5, v14, v15);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1005C2468@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v26 = type metadata accessor for Date(0LL);
  uint64_t v23 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  char v25 = (char *)&v20 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = sub_100004AEC(&qword_1009B4A98);
  uint64_t v5 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OwnSubmitLocationInfo(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v11 = a1[4];
  sub_100012ED8(a1, v12);
  unint64_t v13 = sub_1005C50F8();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for OwnSubmitLocationInfo.CodingKeys,  &type metadata for OwnSubmitLocationInfo.CodingKeys,  v13,  v12,  v11);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v21 = a1;
  uint64_t v22 = v5;
  uint64_t v14 = v25;
  uint64_t v15 = v26;
  char v29 = 0;
  unint64_t v16 = sub_100016FE0();
  uint64_t v17 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v28, &type metadata for Data, &v29, v27, &type metadata for Data, v16);
  *(_OWORD *)uint64_t v10 = v28;
  LOBYTE(v28) = 1;
  uint64_t v18 = sub_100007864( &qword_10099DA70,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v14, v15, &v28, v17, v15, v18);
  (*(void (**)(char *, uint64_t))(v22 + 8))(v7, v17);
  (*(void (**)(char *, void *, uint64_t))(v23 + 32))(&v10[*(int *)(v8 + 20)], v14, v15);
  sub_1005C513C((uint64_t)v10, v24);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v21);
  return sub_1005C5180((uint64_t)v10);
}

uint64_t sub_1005C26D0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B4A58);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1005C4664();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for OwnSubmitRequestBody.CodingKeys,  &type metadata for OwnSubmitRequestBody.CodingKeys,  v11,  v9,  v10);
  __int128 v12 = *(_OWORD *)(v3 + 16);
  v19[0] = *(_OWORD *)v3;
  v19[1] = v12;
  v19[2] = *(_OWORD *)(v3 + 32);
  char v18 = 0;
  unint64_t v13 = sub_1005C46A8();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v18, v5, &type metadata for OwnSubmitClientContext, v13);
  if (!v2)
  {
    *(void *)&v19[0] = *(void *)(v3 + 48);
    char v18 = 1;
    uint64_t v14 = sub_100004AEC(&qword_1009B4A70);
    uint64_t v15 = sub_1005C5090( &qword_1009B4A78,  (void (*)(void))sub_1005C4620,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v19, &v18, v5, v14, v15);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1005C2840(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B4B68);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1005C5860();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for OwnSubmitClientContext.CodingKeys,  &type metadata for OwnSubmitClientContext.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v22 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v22, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    char v21 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(v14, v15, &v21, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    char v20 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, v17, &v20, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1005C297C()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1005C29A0 + 4 * byte_100809EF0[*v0]))( 25705LL,  0xE200000000000000LL);
}

uint64_t sub_1005C29A0()
{
  return 0x6570795479656BLL;
}

uint64_t sub_1005C29B8()
{
  return 0x64496572616873LL;
}

uint64_t sub_1005C29D0()
{
  return 1701869940LL;
}

uint64_t sub_1005C29E0()
{
  return 1701080941LL;
}

uint64_t sub_1005C29F0()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_1005C2A10@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1005C46EC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005C2A34(uint64_t a1)
{
  unint64_t v2 = sub_1005C51BC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005C2A5C(uint64_t a1)
{
  unint64_t v2 = sub_1005C51BC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005C2A84()
{
  return *(unsigned __int8 *)(v0 + 16);
}

uint64_t sub_1005C2A8C()
{
  return *(unsigned __int8 *)(v0 + 41);
}

uint64_t sub_1005C2A94()
{
  uint64_t v1 = *(void *)(v0 + 24);
  swift_bridgeObjectRetain(*(void *)(v0 + 32));
  return v1;
}

uint64_t sub_1005C2AC0()
{
  return *(unsigned __int8 *)(v0 + 40);
}

double sub_1005C2AC8@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }

  return result;
}

uint64_t sub_1005C2B14(void *a1)
{
  return sub_1005C2064(a1);
}

uint64_t sub_1005C2B54()
{
  return 0x6E6F697461636F6CLL;
}

uint64_t sub_1005C2B80@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1005C4CF0(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005C2BA4(uint64_t a1)
{
  unint64_t v2 = sub_1005C50F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005C2BCC(uint64_t a1)
{
  unint64_t v2 = sub_1005C50F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005C2BF4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005C2468(a1, a2);
}

uint64_t sub_1005C2C08(void *a1)
{
  return sub_1005C22FC(a1);
}

uint64_t sub_1005C2C1C(uint64_t a1)
{
  unint64_t v2 = sub_1005C4664();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005C2C44(uint64_t a1)
{
  unint64_t v2 = sub_1005C4664();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1005C2C6C@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }

  return result;
}

uint64_t sub_1005C2CB8(void *a1)
{
  return sub_1005C26D0(a1);
}

uint64_t sub_1005C2CCC()
{
  uint64_t v1 = 0x526873696C627570LL;
  if (*v0 != 1) {
    uint64_t v1 = 0x6449746E65696C63LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x41747865746E6F63LL;
  }
}

uint64_t sub_1005C2D38@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1005C58A4(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005C2D5C(uint64_t a1)
{
  unint64_t v2 = sub_1005C5860();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005C2D84(uint64_t a1)
{
  unint64_t v2 = sub_1005C5860();
  return CodingKey.debugDescription.getter(a1, v2);
}

double sub_1005C2DAC@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }

  return result;
}

uint64_t sub_1005C2DEC(void *a1)
{
  return sub_1005C2840(a1);
}

uint64_t sub_1005C2E00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v3 + 208) = a2;
  *(void *)(v3 + 2swift_weakDestroy(v0 + 16) = a3;
  *(_OWORD *)(v3 + 224) = *(_OWORD *)a1;
  *(void *)(v3 + 240) = *(void *)(a1 + 16);
  *(_OWORD *)(v3 + 248) = *(_OWORD *)(a1 + 24);
  *(void *)(v3 + 264) = *(void *)(a1 + 40);
  uint64_t v4 = type metadata accessor for HashAlgorithm(0LL);
  *(void *)(v3 + 272) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v3 + 280) = v5;
  *(void *)(v3 + 288) = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OwnSubmitLocationInfo(0LL);
  *(void *)(v3 + 296) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v3 + 304) = v7;
  *(void *)(v3 + 312) = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for JSONEncoder.DateEncodingStrategy(0LL);
  *(void *)(v3 + 320) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v3 + 328) = v9;
  *(void *)(v3 + 336) = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Date(0LL);
  *(void *)(v3 + 344) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v3 + 352) = v11;
  *(void *)(v3 + 360) = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1005C2EF8, 0LL, 0LL);
}

id sub_1005C2EF8()
{
  unint64_t v1 = sub_100412D14((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v92 = v0;
  v0[19] = v1;
  uint64_t v2 = v0 + 19;
  id result = [(id)objc_opt_self(AKDevice) currentDevice];
  if (result)
  {
    uint64_t v4 = result;
    id v5 = [result serverFriendlyDescription];

    id v79 = v0 + 2;
    if (v5)
    {
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      uint64_t v8 = v7;

      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
      *uint64_t v2 = 0x8000000000000000LL;
      sub_10005C260(v6, v8, 0xD000000000000011LL, 0x8000000100854B60LL, isUniquelyReferenced_nonNull_native);
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_100047E14(0xD000000000000011LL, 0x8000000100854B60LL);
      swift_bridgeObjectRelease();
      unint64_t v1 = *v2;
    }

    uint64_t v11 = v0[44];
    uint64_t v10 = v0[45];
    uint64_t v12 = v0[43];
    uint64_t v13 = v0[26];
    char v14 = swift_isUniquelyReferenced_nonNull_native(v1);
    sub_10005C260(49LL, 0xE100000000000000LL, 0x562D747065636341LL, 0xEE006E6F69737265LL, v14);
    swift_bridgeObjectRelease();
    char v15 = swift_isUniquelyReferenced_nonNull_native(v1);
    sub_10005C260(0xD000000000000010LL, 0x8000000100854B80LL, 0x2D746E65746E6F43LL, 0xEC00000065707954LL, v15);
    unint64_t v16 = v1;
    uint64_t v17 = swift_bridgeObjectRelease();
    uint64_t v18 = Date.init()(v17);
    uint64_t v19 = Date.epoch.getter(v18);
    uint64_t v20 = v12;
    char v21 = v0;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v20);
    v0[24] = v19;
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
    uint64_t v24 = v23;
    char v25 = swift_isUniquelyReferenced_nonNull_native(v16);
    v0[19] = 0x8000000000000000LL;
    sub_10005C260(v22, v24, 0xD000000000000015LL, 0x8000000100854BA0LL, v25);
    v0[19] = v16;
    swift_bridgeObjectRelease();
    int64_t v26 = *(void *)(v13 + 16);
    if (v26)
    {
      uint64_t v27 = v0 + 9;
      uint64_t v90 = v92[39];
      uint64_t v88 = v92[38];
      uint64_t v87 = v2 - 5;
      uint64_t v28 = v92[26];
      sub_100033234(0, v26, 0);
      uint64_t v29 = 0LL;
      uint64_t v80 = v28 + 32;
      int64_t v81 = v26;
      do
      {
        uint64_t v86 = v29;
        sub_100013044(v80 + 40 * v29, (uint64_t)v87);
        uint64_t v30 = v21[17];
        uint64_t v31 = v21[18];
        sub_100012ED8(v87, v30);
        uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 64))(v30, v31);
        uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness(0LL, v31, v30, &unk_10088ADB4, &unk_10088ADD4);
        uint64_t v34 = sub_100004AEC(&qword_1009B4938);
        uint64_t v35 = _arrayForceCast<A, B>(_:)(v32, AssociatedTypeWitness, v34);
        swift_bridgeObjectRelease();
        int64_t v36 = *(void *)(v35 + 16);
        if (v36)
        {
          sub_100033250(0, v36, 0);
          uint64_t v37 = v35 + 32;
          do
          {
            char v38 = v21;
            uint64_t v39 = (uint64_t *)v21[39];
            sub_100013044(v37, (uint64_t)v27);
            uint64_t v40 = v38[12];
            uint64_t v41 = v38[13];
            sub_100012ED8(v27, v40);
            uint64_t v42 = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 24))(v40, v41);
            uint64_t v44 = v43;
            uint64_t v46 = v38[12];
            uint64_t v45 = v38[13];
            sub_100012ED8(v27, v46);
            (*(void (**)(uint64_t, uint64_t))(v45 + 32))(v46, v45);
            *uint64_t v39 = v42;
            *(void *)(v90 + 8) = v44;
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
            if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
              sub_100033250(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
            }
            unint64_t v48 = _swiftEmptyArrayStorage[2];
            unint64_t v47 = _swiftEmptyArrayStorage[3];
            char v21 = v92;
            if (v48 >= v47 >> 1) {
              sub_100033250(v47 > 1, v48 + 1, 1);
            }
            uint64_t v49 = v92[39];
            _swiftEmptyArrayStorage[2] = v48 + 1;
            sub_1005C3CFC( v49,  (uint64_t)_swiftEmptyArrayStorage + ((*(unsigned __int8 *)(v88 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80))
            + *(void *)(v88 + 72) * v48);
            v37 += 40LL;
            --v36;
          }

          while (v36);
        }

        swift_bridgeObjectRelease();
        uint64_t v50 = v21[17];
        uint64_t v51 = v21[18];
        sub_100012ED8(v87, v50);
        uint64_t v52 = (*(uint64_t (**)(uint64_t, uint64_t))(v51 + 40))(v50, v51);
        uint64_t v84 = v53;
        uint64_t v85 = v52;
        uint64_t v54 = v21[17];
        uint64_t v55 = v21[18];
        sub_100012ED8(v87, v54);
        char v83 = (*(uint64_t (**)(uint64_t, uint64_t))(v55 + 48))(v54, v55);
        uint64_t v56 = v21[17];
        uint64_t v57 = v21[18];
        sub_100012ED8(v87, v56);
        uint64_t v82 = (*(uint64_t (**)(uint64_t, uint64_t))(v57 + 72))(v56, v57);
        uint64_t v59 = v58;
        uint64_t v60 = v21[17];
        uint64_t v61 = v21[18];
        sub_100012ED8(v87, v60);
        char v62 = (*(uint64_t (**)(uint64_t, uint64_t))(v61 + 80))(v60, v61);
        uint64_t v63 = v21[17];
        uint64_t v64 = v21[18];
        sub_100012ED8(v87, v63);
        char v65 = (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 56))(v63, v64);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v87);
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
          sub_100033234(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
        }
        uint64_t v66 = v86;
        unint64_t v68 = _swiftEmptyArrayStorage[2];
        unint64_t v67 = _swiftEmptyArrayStorage[3];
        if (v68 >= v67 >> 1)
        {
          sub_100033234(v67 > 1, v68 + 1, 1);
          uint64_t v66 = v86;
        }

        uint64_t v29 = v66 + 1;
        _swiftEmptyArrayStorage[2] = v68 + 1;
        uint64_t v69 = &_swiftEmptyArrayStorage[7 * v68];
        v69[4] = v85;
        v69[5] = v84;
        *((_BYTE *)v69 + 48) = v83;
        v69[7] = v82;
        char v69[8] = v59;
        *((_BYTE *)v69 + 72) = v62;
        *((_BYTE *)v69 + 73) = v65;
        v69[10] = _swiftEmptyArrayStorage;
      }

      while (v29 != v81);
    }

    swift_bridgeObjectRelease();
    uint64_t v70 = (void *)v21[42];
    uint64_t v71 = v92[41];
    uint64_t v72 = v92[40];
    uint64_t v73 = v92[33];
    uint64_t v74 = v92[32];
    __int128 v91 = *((_OWORD *)v92 + 15);
    __int128 v89 = *((_OWORD *)v92 + 14);
    uint64_t v75 = type metadata accessor for JSONEncoder(0LL);
    swift_allocObject(v75, *(unsigned int *)(v75 + 48), *(unsigned __int16 *)(v75 + 52));
    v92[46] = JSONEncoder.init()();
    *uint64_t v70 = sub_1001559A4;
    v70[1] = 0LL;
    (*(void (**)(void *, void, uint64_t))(v71 + 104))( v70,  enum case for JSONEncoder.DateEncodingStrategy.custom(_:),  v72);
    dispatch thunk of JSONEncoder.dateEncodingStrategy.setter(v70);
    *((_OWORD *)v92 + 1) = v89;
    *((_OWORD *)v92 + 2) = v91;
    v92[6] = v74;
    v92[7] = v73;
    v92[8] = _swiftEmptyArrayStorage;
    unint64_t v76 = sub_1005C3D40();
    v92[47] = dispatch thunk of JSONEncoder.encode<A>(_:)(v79, &type metadata for OwnSubmitRequestBody, v76);
    v92[48] = v77;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    *(void *)&__int128 v91 = (char *)&dword_1009AD0C8 + dword_1009AD0C8;
    id v78 = (void *)swift_task_alloc(unk_1009AD0CC);
    v92[49] = v78;
    *id v78 = v92;
    v78[1] = sub_1005C3754;
    return (id)((uint64_t (__cdecl *)())v91)();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1005C3754(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 392);
  *(void *)(v3 + 400) = a1;
  *(void *)(v3 + 408) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_1005C37B0, 0LL, 0LL);
}

uint64_t sub_1005C37B0()
{
  uint64_t v2 = v0[50];
  unint64_t v1 = v0[51];
  uint64_t v4 = v0[47];
  unint64_t v3 = v0[48];
  uint64_t v6 = v0[35];
  uint64_t v5 = v0[36];
  uint64_t v7 = v0[34];
  v0[22] = v2;
  v0[23] = v1;
  sub_10001736C(v2, v1);
  sub_10001736C(v4, v3);
  sub_1004A8638(v4, v3);
  sub_100016F9C(v4, v3);
  sub_100016F9C(v2, v1);
  uint64_t v8 = v0[22];
  uint64_t v9 = v0[23];
  v0[52] = v8;
  v0[53] = v9;
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  uint64_t v10 = Data.hash(algorithm:)(v5, v8, v9);
  uint64_t v12 = v11;
  v0[54] = v10;
  v0[55] = v11;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  char v15 = (char *)&dword_1009AD0C0 + dword_1009AD0C0;
  uint64_t v13 = (void *)swift_task_alloc(unk_1009AD0C4);
  v0[56] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_1005C38DC;
  return ((uint64_t (*)(uint64_t, uint64_t, void))v15)(v10, v12, v0[27]);
}

uint64_t sub_1005C38DC(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 448LL);
  *(void *)(*(void *)v2 + 456LL) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_1005C3A70;
  }

  else
  {
    uint64_t v7 = v4[54];
    unint64_t v8 = v4[55];
    v4[58] = a1;
    sub_100016F9C(v7, v8);
    uint64_t v6 = sub_1005C3958;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1005C3958()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 456);
  uint64_t v2 = *(void *)(v0 + 464);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  uint64_t v14 = v1;
  *(void *)(v0 + 152) = 0x8000000000000000LL;
  sub_100129198(v2, (uint64_t)sub_1003F68BC, 0LL, isUniquelyReferenced_nonNull_native, &v14);
  if (v3) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v6 = *(void *)(v0 + 416);
  unint64_t v7 = *(void *)(v0 + 424);
  *(void *)(v0 + 152) = v14;
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();
  sub_100016F9C(v6, v7);
  uint64_t v8 = *(void *)(v0 + 152);
  uint64_t v10 = *(void *)(v0 + 376);
  uint64_t v9 = *(void *)(v0 + 384);
  uint64_t v11 = *(void *)(v0 + 336);
  uint64_t v12 = *(void *)(v0 + 312);
  uint64_t v13 = *(void *)(v0 + 288);
  swift_task_dealloc(*(void *)(v0 + 360));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v8, v10, v9);
}

uint64_t sub_1005C3A70()
{
  uint64_t v1 = *(void *)(v0 + 416);
  unint64_t v2 = *(void *)(v0 + 424);
  sub_100016F9C(*(void *)(v0 + 432), *(void *)(v0 + 440));
  sub_100016F9C(v1, v2);
  if (qword_10099B5A8 != -1) {
    swift_once(&qword_10099B5A8, sub_1005ADA84);
  }
  uint64_t v3 = *(void *)(v0 + 456);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000A720(v4, (uint64_t)qword_100A2AD60);
  swift_errorRetain(v3);
  uint64_t v5 = swift_errorRetain(v3);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter(v6);
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 456);
  if (v8)
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v10 = 138543362;
    swift_errorRetain(v9);
    uint64_t v12 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(void *)(v0 + 200) = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v10 + 4, v10 + 12);
    *uint64_t v11 = v12;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to generate attestation header: %{public}@.", v10, 0xCu);
    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v11, 1LL, v13);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_release();
    swift_release();

    swift_errorRelease(v9);
  }

  else
  {
    swift_release();
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    swift_release();
  }

  uint64_t v14 = *(void *)(v0 + 152);
  uint64_t v16 = *(void *)(v0 + 376);
  uint64_t v15 = *(void *)(v0 + 384);
  uint64_t v17 = *(void *)(v0 + 336);
  uint64_t v18 = *(void *)(v0 + 312);
  uint64_t v19 = *(void *)(v0 + 288);
  swift_task_dealloc(*(void *)(v0 + 360));
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v14, v16, v15);
}

uint64_t type metadata accessor for OwnSubmitLocationInfo(uint64_t a1)
{
  uint64_t result = qword_1009B49A0;
  if (!qword_1009B49A0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OwnSubmitLocationInfo);
  }
  return result;
}

uint64_t sub_1005C3CFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnSubmitLocationInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1005C3D40()
{
  unint64_t result = qword_1009B4940;
  if (!qword_1009B4940)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080A098, &type metadata for OwnSubmitRequestBody);
    atomic_store(result, (unint64_t *)&qword_1009B4940);
  }

  return result;
}

uint64_t destroy for OwnSubmitRequestBody(void *a1)
{
  return swift_bridgeObjectRelease(a1[6]);
}

void *initializeWithCopy for OwnSubmitRequestBody(void *a1, void *a2)
{
  uint64_t v3 = a2[1];
  *a1 = *a2;
  a1[1] = v3;
  uint64_t v4 = a2[3];
  a1[2] = a2[2];
  a1[3] = v4;
  uint64_t v5 = a2[5];
  a1[4] = a2[4];
  a1[5] = v5;
  uint64_t v6 = a2[6];
  a1[6] = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  return a1;
}

void *assignWithCopy for OwnSubmitRequestBody(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  uint64_t v6 = a2[3];
  uint64_t v7 = a1[3];
  a1[3] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  a1[4] = a2[4];
  uint64_t v8 = a2[5];
  uint64_t v9 = a1[5];
  a1[5] = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = a2[6];
  uint64_t v11 = a1[6];
  a1[6] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  return a1;
}

void *assignWithTake for OwnSubmitRequestBody(void *a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = a1[1];
  *a1 = *(void *)a2;
  a1[1] = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = a1[3];
  a1[2] = *(void *)(a2 + 16);
  a1[3] = v6;
  swift_bridgeObjectRelease(v7);
  a1[4] = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(a1[5]);
  uint64_t v8 = a1[6];
  *(_OWORD *)(a1 + 5) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v8);
  return a1;
}

uint64_t getEnumTagSinglePayload for OwnSubmitRequestBody(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for OwnSubmitRequestBody(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for OwnSubmitRequestBody()
{
  return &type metadata for OwnSubmitRequestBody;
}

ValueMetadata *type metadata accessor for OwnSubmitRequest()
{
  return &type metadata for OwnSubmitRequest;
}

uint64_t *sub_1005C3FDC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v13 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v13 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_10001736C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for Date(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
  }

  return a1;
}

uint64_t *sub_1005C4080(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
  return a1;
}

uint64_t *sub_1005C40F8(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100016F9C(v8, v9);
  uint64_t v10 = *(int *)(a3 + 20);
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL))(v11, v12, v13);
  return a1;
}

uint64_t *sub_1005C4178(uint64_t *a1, _OWORD *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100016F9C(v6, v7);
  uint64_t v8 = *(int *)(a3 + 20);
  unint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  return a1;
}

uint64_t sub_1005C41E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005C41F4);
}

uint64_t sub_1005C41F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0) {
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 20),  a2,  v8);
  }

uint64_t sub_1005C427C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005C4288);
}

char *sub_1005C4288(char *result, uint64_t a2, int a3, uint64_t a4)
{
  int v5 = result;
  if (a3 == 12)
  {
    *(void *)unint64_t result = 0LL;
    *((void *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1005C4304(uint64_t a1)
{
  v4[0] = &unk_100809F78;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t destroy for OwnSubmitPayload(uint64_t a1)
{
  return swift_bridgeObjectRelease();
}

uint64_t initializeWithCopy for OwnSubmitPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_10001736C(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  uint64_t v7 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v7;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for OwnSubmitPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_10001736C(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_100016F9C(v6, v7);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  uint64_t v8 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + 40) = *(_BYTE *)(a2 + 40);
  *(_BYTE *)(a1 + 41) = *(_BYTE *)(a2 + 41);
  uint64_t v9 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v9;
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t assignWithTake for OwnSubmitPayload(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016F9C(v4, v5);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 32);
  *(void *)(a1 + 24) = *(void *)(a2 + 24);
  *(void *)(a1 + 32) = v6;
  swift_bridgeObjectRelease();
  *(_WORD *)(a1 + 40) = *(_WORD *)(a2 + 40);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  return a1;
}

ValueMetadata *type metadata accessor for OwnSubmitPayload()
{
  return &type metadata for OwnSubmitPayload;
}

uint64_t sub_1005C4528(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100007864( &qword_1009B49D8,  type metadata accessor for OwnSubmitLocationInfo,  (uint64_t)&unk_10080A01C);
  uint64_t result = sub_100007864(&qword_1009B49E0, type metadata accessor for OwnSubmitLocationInfo, (uint64_t)&unk_100809FF4);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

uint64_t sub_1005C4584()
{
  return sub_100007864(&qword_1009B49E8, type metadata accessor for OwnSubmitLocationInfo, (uint64_t)&unk_10080A044);
}

unint64_t sub_1005C45B0(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1005C45DC();
  unint64_t result = sub_1005C4620();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_1005C45DC()
{
  unint64_t result = qword_1009B4A48;
  if (!qword_1009B4A48)
  {
    unint64_t result = swift_getWitnessTable(&unk_100809FCC, &type metadata for OwnSubmitPayload);
    atomic_store(result, (unint64_t *)&qword_1009B4A48);
  }

  return result;
}

unint64_t sub_1005C4620()
{
  unint64_t result = qword_1009B4A50;
  if (!qword_1009B4A50)
  {
    unint64_t result = swift_getWitnessTable(&unk_100809FA4, &type metadata for OwnSubmitPayload);
    atomic_store(result, (unint64_t *)&qword_1009B4A50);
  }

  return result;
}

unint64_t sub_1005C4664()
{
  unint64_t result = qword_1009B4A60;
  if (!qword_1009B4A60)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080A470, &type metadata for OwnSubmitRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4A60);
  }

  return result;
}

unint64_t sub_1005C46A8()
{
  unint64_t result = qword_1009B4A68;
  if (!qword_1009B4A68)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080A448, &type metadata for OwnSubmitClientContext);
    atomic_store(result, (unint64_t *)&qword_1009B4A68);
  }

  return result;
}

uint64_t sub_1005C46EC(uint64_t a1, unint64_t a2)
{
  if (a1 == 25705 && a2 == 0xE200000000000000LL)
  {
    unint64_t v5 = 0xE200000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(25705LL, 0xE200000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6570795479656BLL && a2 == 0xE700000000000000LL)
  {
    unint64_t v7 = 0xE700000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6570795479656BLL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x64496572616873LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v8 = 0xE700000000000000LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x64496572616873LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 1701869940 && a2 == 0xE400000000000000LL)
  {
    unint64_t v9 = 0xE400000000000000LL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701869940LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 1701080941 && a2 == 0xE400000000000000LL)
  {
    unint64_t v10 = 0xE400000000000000LL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701080941LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_32;
  }

  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEC0000006F666E49LL)
  {
    swift_bridgeObjectRelease(0xEC0000006F666E49LL);
    return 5LL;
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEC0000006F666E49LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

uint64_t sub_1005C494C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009B4AB0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1005C51BC();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for OwnSubmitPayload.CodingKeys,  &type metadata for OwnSubmitPayload.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  char v34 = 0;
  unint64_t v12 = sub_100016FE0();
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, &type metadata for Data, &v34, v5, &type metadata for Data, v12);
  uint64_t v14 = v31;
  unint64_t v13 = v32;
  char v34 = 1;
  sub_10001736C(v31, v32);
  unint64_t v15 = sub_1005C5200();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v31,  &type metadata for OwnSubmitPayloadTypes.KeyType,  &v34,  v5,  &type metadata for OwnSubmitPayloadTypes.KeyType,  v15);
  int v33 = v31;
  LOBYTE(v31) = 2;
  uint64_t v16 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v31, v5);
  uint64_t v18 = v17;
  uint64_t v29 = v16;
  char v34 = 3;
  unint64_t v19 = sub_1005C5244();
  swift_bridgeObjectRetain(v18);
  uint64_t v30 = v18;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for OwnSubmitPayloadTypes.ShareType,  &v34,  v5,  &type metadata for OwnSubmitPayloadTypes.ShareType,  v19);
  int v28 = v31;
  char v34 = 4;
  unint64_t v20 = sub_1005C5288();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for OwnSubmitPayloadTypes.Mode,  &v34,  v5,  &type metadata for OwnSubmitPayloadTypes.Mode,  v20);
  int v27 = v31;
  uint64_t v21 = sub_100004AEC(&qword_1009B4AD8);
  char v34 = 5;
  uint64_t v22 = sub_1005C52CC( &qword_1009B4AE0,  &qword_1009B49D8,  (uint64_t)&unk_10080A01C,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v31, v21, &v34, v5, v21, v22);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v23 = v31;
  sub_10001736C(v14, v13);
  swift_bridgeObjectRetain(v23);
  sub_100016F9C(v14, v13);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  sub_100016F9C(v14, v13);
  swift_bridgeObjectRelease();
  uint64_t v24 = v30;
  uint64_t result = swift_bridgeObjectRelease();
  *(void *)a2 = v14;
  *(void *)(a2 + 8) = v13;
  *(_BYTE *)(a2 + swift_weakDestroy(v0 + 16) = v33;
  *(void *)(a2 + 24) = v29;
  *(void *)(a2 + 32) = v24;
  *(_BYTE *)(a2 + 40) = v28;
  *(_BYTE *)(a2 + 41) = v27;
  *(void *)(a2 + 48) = v23;
  return result;
}

uint64_t sub_1005C4CF0(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6E6F697461636F6CLL && a2 == 0xEA00000000007354LL)
  {
    swift_bridgeObjectRelease(0xEA00000000007354LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F697461636F6CLL, 0xEA00000000007354LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1005C4DE4@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009B4A80);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1005C4664();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for OwnSubmitRequestBody.CodingKeys,  &type metadata for OwnSubmitRequestBody.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  char v29 = 0;
  unint64_t v12 = sub_1005C504C();
  KeyedDecodingContainer.decode<A>(_:forKey:)( v28,  &type metadata for OwnSubmitClientContext,  &v29,  v5,  &type metadata for OwnSubmitClientContext,  v12);
  uint64_t v13 = v28[1];
  uint64_t v24 = v28[2];
  uint64_t v25 = v28[0];
  uint64_t v26 = v28[3];
  uint64_t v14 = v28[5];
  uint64_t v23 = v28[4];
  uint64_t v15 = sub_100004AEC(&qword_1009B4A70);
  char v29 = 1;
  uint64_t v16 = sub_1005C5090( &qword_1009B4A90,  (void (*)(void))sub_1005C45DC,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  uint64_t v27 = v13;
  uint64_t v17 = v13;
  uint64_t v18 = v26;
  swift_bridgeObjectRetain(v17);
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRetain(v14);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v28, v15, &v29, v5, v15, v16);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v19 = v28[0];
  swift_bridgeObjectRetain(v28[0]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v20 = v27;
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v25;
  a2[1] = v20;
  a2[2] = v24;
  a2[3] = v18;
  a2[4] = v23;
  a2[5] = v14;
  a2[6] = v19;
  return result;
}

unint64_t sub_1005C504C()
{
  unint64_t result = qword_1009B4A88;
  if (!qword_1009B4A88)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080A420, &type metadata for OwnSubmitClientContext);
    atomic_store(result, (unint64_t *)&qword_1009B4A88);
  }

  return result;
}

uint64_t sub_1005C5090(unint64_t *a1, void (*a2)(void), uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v7 = sub_100004B78(&qword_1009B4A70);
    a2();
    uint64_t result = swift_getWitnessTable(a3, v7);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1005C50F8()
{
  unint64_t result = qword_1009B4AA0;
  if (!qword_1009B4AA0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080A3D0, &type metadata for OwnSubmitLocationInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4AA0);
  }

  return result;
}

uint64_t sub_1005C513C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnSubmitLocationInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005C5180(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OwnSubmitLocationInfo(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_1005C51BC()
{
  unint64_t result = qword_1009B4AB8;
  if (!qword_1009B4AB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080A380, &type metadata for OwnSubmitPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4AB8);
  }

  return result;
}

unint64_t sub_1005C5200()
{
  unint64_t result = qword_1009B4AC0;
  if (!qword_1009B4AC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E6EE0, &type metadata for OwnSubmitPayloadTypes.KeyType);
    atomic_store(result, (unint64_t *)&qword_1009B4AC0);
  }

  return result;
}

unint64_t sub_1005C5244()
{
  unint64_t result = qword_1009B4AC8;
  if (!qword_1009B4AC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E6EB8, &type metadata for OwnSubmitPayloadTypes.ShareType);
    atomic_store(result, (unint64_t *)&qword_1009B4AC8);
  }

  return result;
}

unint64_t sub_1005C5288()
{
  unint64_t result = qword_1009B4AD0;
  if (!qword_1009B4AD0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E6E90, &type metadata for OwnSubmitPayloadTypes.Mode);
    atomic_store(result, (unint64_t *)&qword_1009B4AD0);
  }

  return result;
}

uint64_t sub_1005C52CC(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v9 = sub_100004B78(&qword_1009B4AD8);
    sub_100007864(a2, type metadata accessor for OwnSubmitLocationInfo, a3);
    uint64_t result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1005C5350()
{
  unint64_t result = qword_1009B4AF0;
  if (!qword_1009B4AF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E6E68, &type metadata for OwnSubmitPayloadTypes.KeyType);
    atomic_store(result, (unint64_t *)&qword_1009B4AF0);
  }

  return result;
}

unint64_t sub_1005C5394()
{
  unint64_t result = qword_1009B4B00;
  if (!qword_1009B4B00)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E6E40, &type metadata for OwnSubmitPayloadTypes.ShareType);
    atomic_store(result, (unint64_t *)&qword_1009B4B00);
  }

  return result;
}

unint64_t sub_1005C53D8()
{
  unint64_t result = qword_1009B4B10;
  if (!qword_1009B4B10)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E6E18, &type metadata for OwnSubmitPayloadTypes.Mode);
    atomic_store(result, (unint64_t *)&qword_1009B4B10);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for OwnSubmitPayload.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1005C5468 + 4 * byte_100809EFB[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1005C549C + 4 * byte_100809EF6[v4]))();
}

uint64_t sub_1005C549C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005C54A4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005C54ACLL);
  }
  return result;
}

uint64_t sub_1005C54B8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005C54C0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1005C54C4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005C54CC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnSubmitPayload.CodingKeys()
{
  return &type metadata for OwnSubmitPayload.CodingKeys;
}

ValueMetadata *type metadata accessor for OwnSubmitLocationInfo.CodingKeys()
{
  return &type metadata for OwnSubmitLocationInfo.CodingKeys;
}

uint64_t _s12searchpartyd21OwnSubmitLocationInfoV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1005C5548 + 4 * byte_100809F05[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1005C557C + 4 * byte_100809F00[v4]))();
}

uint64_t sub_1005C557C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005C5584(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005C558CLL);
  }
  return result;
}

uint64_t sub_1005C5598(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005C55A0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1005C55A4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005C55AC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnSubmitRequestBody.CodingKeys()
{
  return &type metadata for OwnSubmitRequestBody.CodingKeys;
}

ValueMetadata *type metadata accessor for OwnSubmitClientContext()
{
  return &type metadata for OwnSubmitClientContext;
}

unint64_t sub_1005C55DC()
{
  unint64_t result = qword_1009B4B20;
  if (!qword_1009B4B20)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080A1E8, &type metadata for OwnSubmitRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4B20);
  }

  return result;
}

unint64_t sub_1005C5624()
{
  unint64_t result = qword_1009B4B28;
  if (!qword_1009B4B28)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080A2A0, &type metadata for OwnSubmitLocationInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4B28);
  }

  return result;
}

unint64_t sub_1005C566C()
{
  unint64_t result = qword_1009B4B30;
  if (!qword_1009B4B30)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080A358, &type metadata for OwnSubmitPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4B30);
  }

  return result;
}

unint64_t sub_1005C56B4()
{
  unint64_t result = qword_1009B4B38;
  if (!qword_1009B4B38)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080A2C8, &type metadata for OwnSubmitPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4B38);
  }

  return result;
}

unint64_t sub_1005C56FC()
{
  unint64_t result = qword_1009B4B40;
  if (!qword_1009B4B40)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080A2F0, &type metadata for OwnSubmitPayload.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4B40);
  }

  return result;
}

unint64_t sub_1005C5744()
{
  unint64_t result = qword_1009B4B48;
  if (!qword_1009B4B48)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080A210, &type metadata for OwnSubmitLocationInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4B48);
  }

  return result;
}

unint64_t sub_1005C578C()
{
  unint64_t result = qword_1009B4B50;
  if (!qword_1009B4B50)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080A238, &type metadata for OwnSubmitLocationInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4B50);
  }

  return result;
}

unint64_t sub_1005C57D4()
{
  unint64_t result = qword_1009B4B58;
  if (!qword_1009B4B58)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080A158, &type metadata for OwnSubmitRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4B58);
  }

  return result;
}

unint64_t sub_1005C581C()
{
  unint64_t result = qword_1009B4B60;
  if (!qword_1009B4B60)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080A180, &type metadata for OwnSubmitRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4B60);
  }

  return result;
}

unint64_t sub_1005C5860()
{
  unint64_t result = qword_1009B4B70;
  if (!qword_1009B4B70)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080A578, &type metadata for OwnSubmitClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4B70);
  }

  return result;
}

uint64_t sub_1005C58A4(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x41747865746E6F63LL && a2 == 0xEA00000000007070LL)
  {
    unint64_t v5 = 0xEA00000000007070LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x41747865746E6F63LL, 0xEA00000000007070LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x526873696C627570LL && a2 == 0xED00006E6F736165LL)
  {
    unint64_t v7 = 0xED00006E6F736165LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x526873696C627570LL, 0xED00006E6F736165LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x6449746E65696C63LL && a2 == 0xE800000000000000LL)
  {
    swift_bridgeObjectRelease(0xE800000000000000LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6449746E65696C63LL, 0xE800000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_1005C5A28@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009B4B78);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1005C5860();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for OwnSubmitClientContext.CodingKeys,  &type metadata for OwnSubmitClientContext.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  char v30 = 0;
  uint64_t v12 = KeyedDecodingContainer.decode(_:forKey:)(&v30, v5);
  uint64_t v14 = v13;
  uint64_t v27 = v12;
  char v29 = 1;
  swift_bridgeObjectRetain(v13);
  uint64_t v15 = KeyedDecodingContainer.decode(_:forKey:)(&v29, v5);
  uint64_t v17 = v16;
  uint64_t v25 = v15;
  char v28 = 2;
  swift_bridgeObjectRetain(v16);
  uint64_t v26 = v17;
  uint64_t v18 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v5);
  uint64_t v20 = v19;
  uint64_t v21 = v18;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  swift_bridgeObjectRetain(v20);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  swift_bridgeObjectRelease();
  uint64_t v22 = v26;
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *a2 = v27;
  a2[1] = v14;
  a2[2] = v25;
  a2[3] = v22;
  a2[4] = v21;
  a2[5] = v20;
  return result;
}

uint64_t storeEnumTagSinglePayload for OwnSubmitClientContext.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1005C5CA8 + 4 * byte_100809F0F[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1005C5CDC + 4 * byte_100809F0A[v4]))();
}

uint64_t sub_1005C5CDC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005C5CE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005C5CECLL);
  }
  return result;
}

uint64_t sub_1005C5CF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005C5D00LL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1005C5D04(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005C5D0C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnSubmitClientContext.CodingKeys()
{
  return &type metadata for OwnSubmitClientContext.CodingKeys;
}

unint64_t sub_1005C5D2C()
{
  unint64_t result = qword_1009B4B80;
  if (!qword_1009B4B80)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080A550, &type metadata for OwnSubmitClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4B80);
  }

  return result;
}

unint64_t sub_1005C5D74()
{
  unint64_t result = qword_1009B4B88;
  if (!qword_1009B4B88)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080A4C0, &type metadata for OwnSubmitClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4B88);
  }

  return result;
}

unint64_t sub_1005C5DBC()
{
  unint64_t result = qword_1009B4B90;
  if (!qword_1009B4B90)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080A4E8, &type metadata for OwnSubmitClientContext.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B4B90);
  }

  return result;
}

id sub_1005C605C()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for ContainerAPSBridge();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for ContainerAPSBridge()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd18ContainerAPSBridge);
}

uint64_t sub_1005C60BC(uint64_t a1, unint64_t a2)
{
  if (a2 >> 60 == 15)
  {
    uint64_t v3 = static os_log_type_t.error.getter(a1);
    if (qword_10099B710 != -1) {
      swift_once(&qword_10099B710, sub_1006511CC);
    }
    return os_log(_:dso:log:_:_:)( v3,  &_mh_execute_header,  qword_100A2B020,  "Invalid Public Token",  20LL,  2LL,  _swiftEmptyArrayStorage);
  }

  else
  {
    uint64_t result = swift_unknownObjectWeakLoadStrong(v2 + OBJC_IVAR____TtC12searchpartyd18ContainerAPSBridge_delegate);
    if (result)
    {
      uint64_t v7 = result;
      uint64_t v8 = sub_10001736C(a1, a2);
      uint64_t v9 = static os_log_type_t.default.getter(v8);
      if (qword_10099B710 != -1) {
        swift_once(&qword_10099B710, sub_1006511CC);
      }
      uint64_t v10 = qword_100A2B020;
      uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
      *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v13 = Data.hexString.getter(a1, a2);
      uint64_t v15 = v14;
      *(void *)(v12 + 56) = &type metadata for String;
      *(void *)(v12 + 64) = sub_1000226F4();
      *(void *)(v12 + 32) = v13;
      *(void *)(v12 + 40) = v15;
      os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "APS public token: <%@>", 22LL, 2LL, v12);
      swift_unknownObjectRelease(v7);
      swift_bridgeObjectRelease();
      return sub_1000182F0(a1, a2);
    }
  }

  return result;
}

uint64_t sub_1005C627C(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  if (a2 >> 60 == 15 || a4 == 0 || a6 == 0)
  {
    uint64_t v9 = static os_log_type_t.error.getter(a1);
    if (qword_10099B710 != -1) {
      swift_once(&qword_10099B710, sub_1006511CC);
    }
    return os_log(_:dso:log:_:_:)( v9,  &_mh_execute_header,  qword_100A2B020,  "Invalid APS data arguments",  26LL,  2LL,  _swiftEmptyArrayStorage);
  }

  else
  {
    uint64_t result = swift_unknownObjectWeakLoadStrong(v6 + OBJC_IVAR____TtC12searchpartyd18ContainerAPSBridge_delegate);
    if (result)
    {
      uint64_t v27 = result;
      uint64_t v17 = sub_10001736C(a1, a2);
      unsigned int v26 = static os_log_type_t.default.getter(v17);
      if (qword_10099B710 != -1) {
        swift_once(&qword_10099B710, sub_1006511CC);
      }
      uint64_t v25 = qword_100A2B020;
      uint64_t v18 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v19 = swift_allocObject(v18, 152LL, 7LL);
      *(_OWORD *)(v19 + swift_weakDestroy(v0 + 16) = xmmword_1007E4050;
      uint64_t v20 = Data.hexString.getter(a1, a2);
      uint64_t v22 = v21;
      *(void *)(v19 + 56) = &type metadata for String;
      unint64_t v23 = sub_1000226F4();
      *(void *)(v19 + 32) = v20;
      *(void *)(v19 + 40) = v22;
      *(void *)(v19 + 96) = &type metadata for String;
      *(void *)(v19 + 104) = v23;
      *(void *)(v19 + 64) = v23;
      *(void *)(v19 + 72) = a3;
      *(void *)(v19 + 80) = a4;
      *(void *)(v19 + 136) = &type metadata for String;
      *(void *)(v19 + 144) = v23;
      *(void *)(v19 + 112) = a5;
      *(void *)(v19 + 120) = a6;
      swift_bridgeObjectRetain(a4);
      *(void *)&double v24 = swift_bridgeObjectRetain(a6).n128_u64[0];
      os_log(_:dso:log:_:_:)( v26,  &_mh_execute_header,  v25,  "APS token: <%@> forTopic: [%{public}@] identifier: [%{public}@]",  63LL,  2LL,  v19,  v24);
      swift_bridgeObjectRelease();
      sub_1000182F0(a1, a2);
      return swift_unknownObjectRelease(v27);
    }
  }

  return result;
}

uint64_t sub_1005C6498(void *a1)
{
  if (a1)
  {
    uint64_t result = swift_unknownObjectWeakLoadStrong(v1 + OBJC_IVAR____TtC12searchpartyd18ContainerAPSBridge_delegate);
    if (result)
    {
      uint64_t v4 = result;
      id v5 = a1;
      sub_1000ACD04(v5);

      return swift_unknownObjectRelease(v4);
    }
  }

  else
  {
    uint64_t v6 = static os_log_type_t.error.getter(0LL);
    if (qword_10099B710 != -1) {
      swift_once(&qword_10099B710, sub_1006511CC);
    }
    return os_log(_:dso:log:_:_:)( v6,  &_mh_execute_header,  qword_100A2B020,  "Invalid message Token",  21LL,  2LL,  _swiftEmptyArrayStorage);
  }

  return result;
}

void sub_1005C6558()
{
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2AE08);
  oslog = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v2 = static os_log_type_t.info.getter(oslog);
  if (os_log_type_enabled(oslog, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v2, "Received notification of FMF data update complete", v3, 2u);
    swift_slowDealloc(v3, -1LL, -1LL);
  }
}

uint64_t sub_1005C6624()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2AE08);
  sub_10000A720(v0, (uint64_t)qword_100A2AE08);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x6F4C657275636573LL,  0xEF736E6F69746163LL);
}

void *sub_1005C66A4()
{
  uint64_t v0 = type metadata accessor for SecureLocationsInfo();
  swift_allocObject(v0, 360LL, 7LL);
  uint64_t result = sub_1005C66DC();
  qword_100A2AE20 = (uint64_t)result;
  return result;
}

void *sub_1005C66DC()
{
  uint64_t v1 = (void *)v0;
  uint64_t v39 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v39);
  uint64_t v3 = (char *)&v33 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v38 = v7;
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(v0 + 24) = 0LL;
  LOBYTE(v42[0]) = 0;
  uint64_t v11 = sub_100004AEC(&qword_1009B4EB8);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  uint64_t v40 = CurrentValueSubject.init(_:)(v42);
  *(void *)(v0 + 32) = v40;
  uint64_t v12 = sub_100004AEC(&qword_1009A39D8);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  *(void *)(v0 + 48) = PassthroughSubject.init()();
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  *(void *)(v0 + 64) = PassthroughSubject.init()();
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  *(void *)(v0 + 80) = PassthroughSubject.init()();
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  *(void *)(v0 + 96) = PassthroughSubject.init()();
  uint64_t v13 = sub_100004AEC(&qword_1009BB4F0);
  uint64_t v14 = swift_allocObject(v13, 20LL, 7LL);
  *(_DWORD *)(v14 + swift_weakDestroy(v0 + 16) = 0;
  *(void *)(v0 + 112) = v14;
  *(_BYTE *)(v0 + 120) = 0;
  unint64_t v35 = sub_100004AB0();
  unsigned int v36 = enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:);
  uint64_t v37 = *(uint64_t (**)(char *))(v8 + 104);
  uint64_t v15 = v37(v10);
  static DispatchQoS.unspecified.getter(v15);
  *(void *)&v42[0] = _swiftEmptyArrayStorage;
  uint64_t v16 = sub_100007864( (unint64_t *)&qword_10099BAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v34 = v16;
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
  uint64_t v18 = sub_1000372EC( (unint64_t *)&qword_10099BAB0,  (uint64_t *)&unk_1009A0CD0,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v19 = v39;
  dispatch thunk of SetAlgebra.init<A>(_:)(v42, v17, v18, v39, v16);
  *(void *)(v0 + 128) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002ALL,  0x8000000100869E50LL,  v6,  v3,  v10,  0LL);
  *(void *)(v0 + 136) = &_swiftEmptyDictionarySingleton;
  uint64_t v20 = ((uint64_t (*)(char *, void, uint64_t))v37)(v10, v36, v38);
  static DispatchQoS.unspecified.getter(v20);
  *(void *)&v42[0] = _swiftEmptyArrayStorage;
  dispatch thunk of SetAlgebra.init<A>(_:)(v42, v17, v18, v19, v34);
  *(void *)(v0 + 144) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000034LL,  0x8000000100869E80LL,  v6,  v3,  v10,  0LL);
  sub_100570148(v42);
  sub_1005C8948((uint64_t)v42, v0 + 152);
  uint64_t v21 = v40;
  uint64_t v22 = swift_retain();
  uint64_t v23 = CurrentValueSubject.eraseToAnyCurrentValuePublisher()(v22);
  swift_release(v21);
  v1[5] = v23;
  uint64_t v41 = v1[6];
  uint64_t v24 = sub_1000372EC( &qword_1009B4EC0,  &qword_1009A39D8,  (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  v1[7] = Publisher.eraseToAnyPublisher()(v12, v24);
  uint64_t v41 = v1[8];
  void v1[9] = Publisher.eraseToAnyPublisher()(v12, v24);
  uint64_t v41 = v1[10];
  v1[11] = Publisher.eraseToAnyPublisher()(v12, v24);
  uint64_t v41 = v1[12];
  v1[13] = Publisher.eraseToAnyPublisher()(v12, v24);
  if (qword_10099BA48 != -1) {
    swift_once(&qword_10099BA48, sub_1007C7B1C);
  }
  uint64_t v25 = *(void *)(qword_100A2B838 + 24);
  uint64_t v26 = swift_retain();
  uint64_t v27 = AnyCurrentValuePublisher.publisher.getter(v26);
  swift_release(v25);
  uint64_t v41 = v27;
  swift_retain();
  uint64_t v28 = sub_100004AEC(&qword_1009B2B88);
  uint64_t v29 = sub_1000372EC( &qword_1009B2B90,  &qword_1009B2B88,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v30 = Publisher<>.sink(receiveValue:)(sub_1005C8B58, v1, v28, v29);
  swift_release(v1);
  swift_release(v41);
  uint64_t v31 = v1[3];
  v1[3] = v30;
  swift_release(v31);
  sub_1005C6CF4();
  type metadata accessor for Transaction(0LL);
  swift_retain();
  static Transaction.asyncTask(name:block:)("computeLocationSharingStatus", 28LL, 2LL, &unk_1009B4ED0, v1);
  swift_release(v1);
  return v1;
}

uint64_t sub_1005C6C3C()
{
  return swift_task_switch(sub_1005C6C50, 0LL, 0LL);
}

uint64_t sub_1005C6C50()
{
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = 0x7365547265646E75LL;
  *(void *)(v0 + 24) = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)( (void *)(v0 + 32),  v0 + 16,  sub_10000A71C,  0LL,  &type metadata for Bool);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005C6CF4()
{
  uint64_t v1 = v0;
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  v18[0] = 0x7365547265646E75LL;
  v18[1] = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v19, v18, sub_10000A71C, 0LL, &type metadata for Bool);
  uint64_t result = swift_bridgeObjectRelease();
  if ((v19 & 1) == 0)
  {
    uint64_t v3 = swift_allocObject(&unk_100967AC0, 24LL, 7LL);
    swift_weakInit(v3 + 16, v0);
    uint64_t v4 = swift_allocObject(&unk_100967AC0, 24LL, 7LL);
    swift_weakInit(v4 + 16, v0);
    uint64_t v5 = swift_allocObject(&unk_100967AC0, 24LL, 7LL);
    swift_weakInit(v5 + 16, v0);
    uint64_t v6 = swift_allocObject(&unk_100967AC0, 24LL, 7LL);
    swift_weakInit(v6 + 16, v0);
    uint64_t v7 = sub_100004AEC(&qword_10099FAA8);
    uint64_t inited = swift_initStackObject(v7, v17);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E8280;
    uint64_t v9 = swift_allocObject(&unk_100967AE8, 32LL, 7LL);
    *(void *)(v9 + swift_weakDestroy(v0 + 16) = sub_1005C8BE8;
    *(void *)(v9 + 24) = v3;
    *(void *)(inited + 32) = 0xD000000000000027LL;
    *(void *)(inited + 40) = 0x8000000100869EE0LL;
    *(void *)(inited + 48) = sub_10009BF1C;
    *(void *)(inited + 56) = v9;
    uint64_t v10 = swift_allocObject(&unk_100967B10, 32LL, 7LL);
    *(void *)(v10 + swift_weakDestroy(v0 + 16) = sub_1005C8BF0;
    *(void *)(v10 + 24) = v4;
    *(void *)(inited + 64) = 0xD000000000000028LL;
    *(void *)(inited + 72) = 0x8000000100869F10LL;
    *(void *)(inited + 80) = sub_10009CA0C;
    *(void *)(inited + 88) = v10;
    *(void *)(inited + 96) = 0xD000000000000021LL;
    *(void *)(inited + 104) = 0x8000000100869F40LL;
    *(void *)(inited + 112) = sub_1005C6558;
    *(void *)(inited + 120) = 0LL;
    uint64_t v11 = swift_allocObject(&unk_100967B38, 32LL, 7LL);
    *(void *)(v11 + swift_weakDestroy(v0 + 16) = sub_1005C8BF8;
    *(void *)(v11 + 24) = v5;
    *(void *)(inited + 128) = 0xD00000000000002FLL;
    *(void *)(inited + 136) = 0x8000000100869F70LL;
    *(void *)(inited + 144) = sub_10009CA0C;
    *(void *)(inited + 152) = v11;
    uint64_t v12 = swift_allocObject(&unk_100967B60, 32LL, 7LL);
    *(void *)(v12 + swift_weakDestroy(v0 + 16) = sub_1005C8C00;
    *(void *)(v12 + 24) = v6;
    *(void *)(inited + 160) = 0xD000000000000030LL;
    *(void *)(inited + 168) = 0x8000000100869FA0LL;
    *(void *)(inited + 176) = sub_10009CA0C;
    *(void *)(inited + 184) = v12;
    swift_retain();
    swift_retain();
    swift_retain();
    swift_retain();
    unint64_t v13 = sub_100412BD0(inited);
    uint64_t v14 = type metadata accessor for DarwinNotificationHelper(0LL);
    swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    uint64_t v15 = DarwinNotificationHelper.init(notificationHandlers:)(v13);
    swift_release(v6);
    swift_release(v5);
    swift_release(v4);
    swift_release(v3);
    uint64_t v16 = *(void *)(v1 + 16);
    *(void *)(v1 + swift_weakDestroy(v0 + 16) = v15;
    return swift_release(v16);
  }

  return result;
}

uint64_t sub_1005C7010(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2AE08);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Received notification that autoMe is enabled", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  swift_beginAccess(v2, v19, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    uint64_t v9 = Strong;
    id v10 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    NSString v12 = String._bridgeToObjectiveC()();
    [v10 setValue:isa forKey:v12];
    swift_release(v9);
  }

  swift_beginAccess(v2, v18, 0LL, 0LL);
  uint64_t v13 = swift_weakLoadStrong(v2);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)(v13 + 80);
    swift_retain();
    swift_release(v14);
    v17[0] = 1;
    PassthroughSubject.send(_:)(v17);
    swift_release(v15);
  }

  swift_beginAccess(v2, v17, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v2);
  if (result) {
    return swift_release(result);
  }
  return result;
}

uint64_t sub_1005C7210(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2AE08);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Received notification that autoMe is disabled", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  swift_beginAccess(v2, v19, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    uint64_t v9 = Strong;
    id v10 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
    Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
    NSString v12 = String._bridgeToObjectiveC()();
    [v10 setValue:isa forKey:v12];
    swift_release(v9);
  }

  swift_beginAccess(v2, v18, 0LL, 0LL);
  uint64_t v13 = swift_weakLoadStrong(v2);
  if (v13)
  {
    uint64_t v14 = v13;
    uint64_t v15 = *(void *)(v13 + 80);
    swift_retain();
    swift_release(v14);
    v17[0] = 0;
    PassthroughSubject.send(_:)(v17);
    swift_release(v15);
  }

  swift_beginAccess(v2, v17, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v2);
  if (result) {
    return swift_release(result);
  }
  return result;
}

void sub_1005C740C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2AE08);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Received owner proactive eligible notification", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  swift_beginAccess(v2, v25, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    uint64_t v9 = Strong;
    id v10 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
    id v11 = [v10 standardUserDefaults];
    NSString v12 = String._bridgeToObjectiveC()();
    unsigned __int8 v13 = [v11 BOOLForKey:v12];
    swift_release(v9);

    if ((v13 & 1) == 0)
    {
      swift_beginAccess(v2, v24, 0LL, 0LL);
      uint64_t v14 = swift_weakLoadStrong(v2);
      if (v14)
      {
        uint64_t v15 = v14;
        id v16 = [v10 standardUserDefaults];
        Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
        NSString v18 = String._bridgeToObjectiveC()();
        [v16 setValue:isa forKey:v18];
        swift_release(v15);
      }

      swift_beginAccess(v2, v23, 0LL, 0LL);
      uint64_t v19 = swift_weakLoadStrong(v2);
      if (v19)
      {
        uint64_t v20 = v19;
        uint64_t v21 = *(void *)(v19 + 96);
        swift_retain();
        swift_release(v20);
        char v22 = 1;
        PassthroughSubject.send(_:)(&v22);
        swift_release(v21);
      }
    }
  }

void sub_1005C7664(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2AE08);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.default.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Received owner proactive not eligible notification", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  swift_beginAccess(v2, v25, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v2);
  if (Strong)
  {
    uint64_t v9 = Strong;
    id v10 = (void *)objc_opt_self(&OBJC_CLASS___NSUserDefaults);
    id v11 = [v10 standardUserDefaults];
    NSString v12 = String._bridgeToObjectiveC()();
    unsigned int v13 = [v11 BOOLForKey:v12];
    swift_release(v9);

    if (v13)
    {
      swift_beginAccess(v2, v24, 0LL, 0LL);
      uint64_t v14 = swift_weakLoadStrong(v2);
      if (v14)
      {
        uint64_t v15 = v14;
        id v16 = [v10 standardUserDefaults];
        Class isa = Bool._bridgeToObjectiveC()().super.super.isa;
        NSString v18 = String._bridgeToObjectiveC()();
        [v16 setValue:isa forKey:v18];
        swift_release(v15);
      }

      swift_beginAccess(v2, v23, 0LL, 0LL);
      uint64_t v19 = swift_weakLoadStrong(v2);
      if (v19)
      {
        uint64_t v20 = v19;
        uint64_t v21 = *(void *)(v19 + 96);
        swift_retain();
        swift_release(v20);
        char v22 = 0;
        PassthroughSubject.send(_:)(&v22);
        swift_release(v21);
      }
    }
  }

void sub_1005C78B8(unsigned __int8 *a1)
{
  int v1 = *a1;
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  uint64_t v3 = sub_10000A720(v2, (uint64_t)qword_100A2AE08);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v6 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "LocationSharing: recompute sharing status after me device change",  v6,  2u);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  if (!v1)
  {
    oslog = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v8 = static os_log_type_t.default.getter(oslog);
    if (os_log_type_enabled(oslog, v8))
    {
      uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v9 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  oslog,  v8,  "LocationSharing: Me device state is unknown. Lets not recompute",  v9,  2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }
  }

void sub_1005C7A20(void *a1@<X8>)
{
  *a1 = &_swiftEmptyArrayStorage;
}

uint64_t sub_1005C7A30@<X0>(uint64_t result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v5 = *(void *)(result + 136);
  if (*(void *)(v5 + 16))
  {
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(v5);
    uint64_t v8 = sub_10030CF14(a2, a3);
    if ((v9 & 1) != 0)
    {
      id v10 = (uint64_t *)(*(void *)(v5 + 56) + 16 * v8);
      uint64_t v12 = *v10;
      uint64_t v11 = v10[1];
      swift_bridgeObjectRetain(v11);
    }

    else
    {
      uint64_t v12 = 0LL;
      uint64_t v11 = 0LL;
    }

    swift_bridgeObjectRelease();
    uint64_t result = swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v12 = 0LL;
    uint64_t v11 = 0LL;
  }

  *a4 = v12;
  a4[1] = v11;
  return result;
}

uint64_t sub_1005C7AD8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, void *a4@<X8>)
{
  uint64_t v7 = *(void *)(a1 + 136);
  if (*(void *)(v7 + 16))
  {
    swift_bridgeObjectRetain(a3);
    swift_bridgeObjectRetain(v7);
    uint64_t v8 = sub_10030CF14(a2, a3);
    if ((v9 & 1) != 0)
    {
      id v10 = (uint64_t *)(*(void *)(v7 + 56) + 16 * v8);
      uint64_t v12 = *v10;
      uint64_t v11 = v10[1];
      swift_bridgeObjectRetain(v11);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      *a4 = v12;
      a4[1] = v11;
      return result;
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  id v14 = objc_allocWithZone(&OBJC_CLASS___NSError);
  NSString v15 = String._bridgeToObjectiveC()();

  if (qword_10099B588 != -1) {
    uint64_t v16 = swift_once(&qword_10099B588, sub_100599764);
  }
  uint64_t v17 = qword_1009B3860;
  __chkstk_darwin(v16);
  void v20[2] = a2;
  v20[3] = a3;
  uint64_t v18 = sub_100004AEC(&qword_1009A34B0);
  uint64_t result = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1005C8C2C, v20, v17, (char *)&type metadata for () + 8, v18);
  uint64_t v19 = v20[5];
  *a4 = v20[4];
  if (v19) {
    a4[1] = v19;
  }
  else {
    a4[1] = 0LL;
  }
  return result;
}

uint64_t sub_1005C7C90()
{
  unsigned int v1 = v11[0];
  if (qword_10099BA48 != -1) {
    swift_once(&qword_10099BA48, sub_1007C7B1C);
  }
  uint64_t v2 = swift_retain();
  AnyCurrentValuePublisher.value.getter(v11, v2);
  swift_release();
  int v3 = v11[0];
  v12[0] = v11[0] == 1;
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2AE08);
  os_log_type_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = swift_slowAlloc(14LL, -1LL);
    *(_DWORD *)uint64_t v8 = 67109376;
    *(_DWORD *)uint64_t v11 = v1;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v11, &v11[4], v8 + 4, v8 + 8);
    *(_WORD *)(v8 + 8) = 1024;
    swift_beginAccess(v12, v11, 0LL, 0LL);
    BOOL v10 = v12[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v10, v11, v8 + 10, v8 + 14);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "LocationSharing: isMyLocationEnabled %{BOOL}d isThisMeDevice %{BOOL}d",  (uint8_t *)v8,  0xEu);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  if (v3 == 1) {
    return v1;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1005C7E64(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SecureLocation(0LL);
  __chkstk_darwin(v3);
  uint64_t v42 = (uint64_t)&v37 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v43 = (char *)&v37 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v37 - v10;
  __chkstk_darwin(v9);
  unsigned int v13 = (char *)&v37 - v12;
  if (*(void *)(a1 + *(int *)(v3 + 60)) == 100LL)
  {
    double v14 = -7200.0;
  }

  else
  {
    OS_dispatch_queue.sync<A>(execute:)(sub_10024636C, v1, &type metadata for SecureLocationsConfig);
    __int128 v55 = v44[10];
    __int128 v56 = v44[11];
    __int128 v57 = v44[12];
    __int128 v51 = v44[6];
    __int128 v52 = v44[7];
    __int128 v53 = v44[8];
    __int128 v54 = v44[9];
    __int128 v47 = v44[2];
    __int128 v48 = v44[3];
    __int128 v49 = v44[4];
    __int128 v50 = v44[5];
    __int128 v45 = v44[0];
    __int128 v46 = v44[1];
    sub_100246384(&v45);
    double v14 = -*((double *)&v46 + 1);
  }

  uint64_t v15 = static Date.trustedNow.getter((uint64_t)v11);
  Date.addingTimeInterval(_:)(v15, v14);
  uint64_t v16 = *(void (**)(char *, uint64_t))(v6 + 8);
  v16(v11, v5);
  int v17 = static Date.> infix(_:_:)(a1 + *(int *)(v3 + 52), v13);
  if ((v17 & 1) == 0)
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    sub_10000A720(v18, (uint64_t)qword_100A2AE08);
    uint64_t v19 = a1;
    uint64_t v20 = v42;
    sub_1000A6E74(v19, v42);
    uint64_t v21 = *(uint64_t (**)(char *, char *, uint64_t))(v6 + 16);
    char v22 = v43;
    uint64_t v23 = v21(v43, v13, v5);
    uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
    os_log_type_t v25 = static os_log_type_t.default.getter(v24);
    int v26 = v25;
    if (os_log_type_enabled(v24, v25))
    {
      uint64_t v27 = swift_slowAlloc(22LL, -1LL);
      int v39 = v26;
      uint64_t v28 = v27;
      uint64_t v40 = swift_slowAlloc(64LL, -1LL);
      *(void *)&__int128 v45 = v40;
      *(_DWORD *)uint64_t v28 = 136315394;
      uint64_t v37 = v28 + 4;
      os_log_t v38 = v24;
      uint64_t v29 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      uint64_t v30 = dispatch thunk of CustomStringConvertible.description.getter(v5, v29);
      *(void *)&v44[0] = sub_1003F11D4(v30, v31, (uint64_t *)&v45);
      int v41 = v17;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v44, (char *)v44 + 8, v37, v28 + 12);
      swift_bridgeObjectRelease();
      sub_1000A6EF4(v20);
      *(_WORD *)(v28 + 12) = 2080;
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter(v5, v29);
      *(void *)&v44[0] = sub_1003F11D4(v32, v33, (uint64_t *)&v45);
      LOBYTE(v17) = v41;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v44, (char *)v44 + 8, v28 + 14, v28 + 22);
      swift_bridgeObjectRelease();
      v16(v22, v5);
      os_log_t v34 = v38;
      _os_log_impl( (void *)&_mh_execute_header,  v38,  (os_log_type_t)v39,  "Location timestamp %s not within threshold %s",  (uint8_t *)v28,  0x16u);
      uint64_t v35 = v40;
      swift_arrayDestroy(v40, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v35, -1LL, -1LL);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    else
    {

      v16(v22, v5);
      sub_1000A6EF4(v20);
    }
  }

  v16(v13, v5);
  return v17 & 1;
}

uint64_t sub_1005C825C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for SecureLocation(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v35 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v40 = (char *)&v35 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v17 = (uint64_t)&v35 - v11;
  __chkstk_darwin(v10);
  unsigned int v13 = (char *)&v35 - v12;
  OS_dispatch_queue.sync<A>(execute:)(sub_10024636C, v1, &type metadata for SecureLocationsConfig);
  __int128 v53 = v43[10];
  __int128 v54 = v43[11];
  __int128 v55 = v43[12];
  __int128 v49 = v43[6];
  __int128 v50 = v43[7];
  __int128 v51 = v43[8];
  __int128 v52 = v43[9];
  __int128 v45 = v43[2];
  __int128 v46 = v43[3];
  __int128 v47 = v43[4];
  __int128 v48 = v43[5];
  v44[0] = v43[0];
  v44[1] = v43[1];
  sub_100246384(v44);
  double v14 = *((double *)&v45 + 1);
  uint64_t v15 = static Date.trustedNow.getter(v17);
  Date.addingTimeInterval(_:)(v15, -v14);
  uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v16(v17, v6);
  LODWORD(v17) = static Date.< infix(_:_:)(a1 + *(int *)(v3 + 52), v13);
  if ((v17 & 1) != 0)
  {
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    sub_10000A720(v18, (uint64_t)qword_100A2AE08);
    sub_1000A6E74(a1, (uint64_t)v5);
    uint64_t v19 = *(uint64_t (**)(char *, char *, uint64_t))(v7 + 16);
    uint64_t v20 = v40;
    uint64_t v21 = v19(v40, v13, v6);
    char v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.default.getter(v22);
    int v24 = v23;
    if (os_log_type_enabled(v22, v23))
    {
      uint64_t v25 = swift_slowAlloc(22LL, -1LL);
      int v39 = v17;
      uint64_t v17 = v25;
      uint64_t v38 = swift_slowAlloc(64LL, -1LL);
      *(void *)&v43[0] = v38;
      *(_DWORD *)uint64_t v17 = 136315394;
      uint64_t v35 = v17 + 4;
      os_log_t v37 = v22;
      uint64_t v26 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter(v6, v26);
      uint64_t v41 = sub_1003F11D4(v27, v28, (uint64_t *)v43);
      int v36 = v24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v35, v17 + 12);
      swift_bridgeObjectRelease();
      sub_1000A6EF4((uint64_t)v5);
      *(_WORD *)(v17 + 12) = 2080;
      uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter(v6, v26);
      uint64_t v41 = sub_1003F11D4(v29, v30, (uint64_t *)v43);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v17 + 14, v17 + 22);
      swift_bridgeObjectRelease();
      v16((uint64_t)v20, v6);
      os_log_t v31 = v37;
      _os_log_impl( (void *)&_mh_execute_header,  v37,  (os_log_type_t)v36,  "Location timestamp %s close to expiring %s",  (uint8_t *)v17,  0x16u);
      uint64_t v32 = v38;
      swift_arrayDestroy(v38, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v32, -1LL, -1LL);
      uint64_t v33 = v17;
      LOBYTE(v17) = v39;
      swift_slowDealloc(v33, -1LL, -1LL);
    }

    else
    {

      v16((uint64_t)v20, v6);
      sub_1000A6EF4((uint64_t)v5);
    }
  }

  v16((uint64_t)v13, v6);
  return v17 & 1;
}

uint64_t sub_1005C8628()
{
  swift_bridgeObjectRelease();
  sub_1005C8948(v0 + 152, (uint64_t)v2);
  sub_1005C89EC( v2,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1005C8990);
  return v0;
}

uint64_t sub_1005C86E0()
{
  return swift_deallocClassInstance(v0, 360LL, 7LL);
}

uint64_t type metadata accessor for SecureLocationsInfo()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd19SecureLocationsInfo);
}

void *sub_1005C8720@<X0>(uint64_t a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v3 = a1 + 152;
  sub_1005C8948(a1 + 152, (uint64_t)v30);
  sub_1005C8948((uint64_t)v30, (uint64_t)v31);
  if (sub_100263E80((uint64_t)v31) == 1)
  {
    if (qword_10099B258 != -1) {
      swift_once(&qword_10099B258, sub_1002E8774);
    }
    uint64_t v4 = qword_100A2A4E8;
    *(void *)&__int128 v18 = 0LL;
    BYTE8(v18) = 1;
    __int128 v19 = xmmword_1007F88C0;
    *(void *)uint64_t v20 = 5LL;
    *(_OWORD *)&v20[8] = xmmword_1007F88B0;
    _BYTE v20[24] = 0;
    *(void *)&__int128 v21 = qword_100A2A4E8;
    *((void *)&v21 + 1) = 0x405E000000000000LL;
    LOBYTE(v22) = 1;
    *((void *)&v22 + 1) = 0x409C200000000000LL;
    *(void *)os_log_type_t v23 = 5LL;
    *(_OWORD *)&v23[8] = xmmword_1007F88A0;
    *(_DWORD *)&_BYTE v23[24] = 16843009;
    *(void *)int v24 = 5LL;
    *(_OWORD *)&v24[8] = xmmword_1007F8890;
    _BYTE v24[24] = 1;
    *(void *)&__int128 v25 = 808334897LL;
    *((void *)&v25 + 1) = 0xE400000000000000LL;
    *(void *)&__int128 v26 = 808334129LL;
    *((void *)&v26 + 1) = 0xE400000000000000LL;
    *(void *)&__int128 v27 = 3157561LL;
    *((void *)&v27 + 1) = 0xE300000000000000LL;
    void v28[2] = *(_OWORD *)v20;
    v28[3] = *(_OWORD *)&v20[16];
    v28[0] = v18;
    v28[1] = xmmword_1007F88C0;
    _BYTE v28[8] = *(_OWORD *)v24;
    v28[9] = *(_OWORD *)&v24[16];
    void v28[6] = *(_OWORD *)v23;
    v28[7] = *(_OWORD *)&v23[16];
    v28[4] = v21;
    v28[5] = v22;
    v28[10] = v25;
    v28[11] = v26;
    v28[12] = v27;
    DeviceInformationProviderFactory.init()();
    sub_1005C8948(v3, (uint64_t)v29);
    sub_1005C8948((uint64_t)v28, v3);
    swift_bridgeObjectRetain(v4);
    sub_1002E9D14(&v18);
    sub_1005C89EC( v29,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1005C8990);
    __int128 v5 = v26;
    a2[10] = v25;
    a2[11] = v5;
    a2[12] = v27;
    __int128 v6 = *(_OWORD *)&v23[16];
    a2[6] = *(_OWORD *)v23;
    a2[7] = v6;
    __int128 v7 = *(_OWORD *)&v24[16];
    a2[8] = *(_OWORD *)v24;
    a2[9] = v7;
    __int128 v8 = *(_OWORD *)&v20[16];
    a2[2] = *(_OWORD *)v20;
    a2[3] = v8;
    __int128 v9 = v22;
    a2[4] = v21;
    a2[5] = v9;
    __int128 v11 = v18;
    __int128 v10 = v19;
  }

  else
  {
    __int128 v12 = v31[11];
    a2[10] = v31[10];
    a2[11] = v12;
    a2[12] = v31[12];
    __int128 v13 = v31[7];
    a2[6] = v31[6];
    a2[7] = v13;
    __int128 v14 = v31[9];
    a2[8] = v31[8];
    a2[9] = v14;
    __int128 v15 = v31[3];
    a2[2] = v31[2];
    a2[3] = v15;
    __int128 v16 = v31[5];
    a2[4] = v31[4];
    a2[5] = v16;
    __int128 v11 = v31[0];
    __int128 v10 = v31[1];
  }

  *a2 = v11;
  a2[1] = v10;
  return sub_1005C89EC( v30,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1005C8A58);
}

uint64_t sub_1005C8948(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A70F0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005C8990( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  uint64_t result = a9;
  if (a9)
  {
    swift_bridgeObjectRelease(a9);
    swift_bridgeObjectRelease(a22);
    swift_bridgeObjectRelease(a24);
    return swift_bridgeObjectRelease(a26);
  }

  return result;
}

void *sub_1005C89EC( void *a1, void (*a2)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))
{
  return a1;
}

uint64_t sub_1005C8A58( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26)
{
  uint64_t result = a9;
  if (a9)
  {
    swift_bridgeObjectRetain(a9);
    swift_bridgeObjectRetain(a22);
    swift_bridgeObjectRetain(a24);
    return swift_bridgeObjectRetain(a26);
  }

  return result;
}

void *sub_1005C8AB4(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 176);
  v11[10] = *(_OWORD *)(a2 + 160);
  v11[11] = v4;
  v11[12] = *(_OWORD *)(a2 + 192);
  __int128 v5 = *(_OWORD *)(a2 + 112);
  v11[6] = *(_OWORD *)(a2 + 96);
  v11[7] = v5;
  __int128 v6 = *(_OWORD *)(a2 + 144);
  v11[8] = *(_OWORD *)(a2 + 128);
  v11[9] = v6;
  __int128 v7 = *(_OWORD *)(a2 + 48);
  v11[2] = *(_OWORD *)(a2 + 32);
  v11[3] = v7;
  __int128 v8 = *(_OWORD *)(a2 + 80);
  v11[4] = *(_OWORD *)(a2 + 64);
  v11[5] = v8;
  __int128 v9 = *(_OWORD *)(a2 + 16);
  v11[0] = *(_OWORD *)a2;
  v11[1] = v9;
  DeviceInformationProviderFactory.init()();
  a1 += 152LL;
  sub_1005C8948(a1, (uint64_t)v12);
  sub_1005C8948((uint64_t)v11, a1);
  sub_1002E9D14((void *)a2);
  return sub_1005C89EC( v12,  (void (*)(void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void, void))sub_1005C8990);
}

void sub_1005C8B58(unsigned __int8 *a1)
{
}

uint64_t sub_1005C8B60()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1009B4ECC);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000159BC;
  return swift_task_switch(sub_1005C6C50, 0LL, 0LL);
}

void sub_1005C8BB8(_BYTE *a1@<X8>)
{
  *a1 = *(_BYTE *)(v1 + 120);
}

uint64_t sub_1005C8BC4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1005C8BE8(uint64_t a1)
{
  return sub_1005C7010(a1, v1);
}

uint64_t sub_1005C8BF0(uint64_t a1)
{
  return sub_1005C7210(a1, v1);
}

void sub_1005C8BF8(uint64_t a1)
{
}

void sub_1005C8C00(uint64_t a1)
{
}

uint64_t sub_1005C8C08()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1005C8C2C@<X0>(void *a1@<X8>)
{
  return sub_1005997C0(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1005C8C50(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(void (**)(uint64_t))(a1 + 32);
  uint64_t v3 = *(void *)(a1 + 40);
  swift_retain(v3);
  uint64_t v5 = swift_unknownObjectRetain(a2);
  v4(v5);
  swift_release(v3);
  return swift_unknownObjectRelease(a2);
}

uint64_t sub_1005C8C98()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2AE28);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2AE28);
  if (qword_10099B5F8 != -1) {
    swift_once(&qword_10099B5F8, sub_1005C9A4C);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_100A2AE40);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_1005C8D28()
{
  v1[8] = v0;
  void v1[9] = *v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A9BF0);
  v1[10] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1005C8D8C, v0, 0LL);
}

uint64_t sub_1005C8D8C()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = swift_allocObject(&unk_100967C80, 24LL, 7LL);
  __int128 v9 = *(_OWORD *)(v0 + 64);
  uint64_t v3 = *(dispatch_queue_s **)(v9 + 128);
  swift_weakInit(v2 + 16, *(void *)(v0 + 64));
  *(void *)(v0 + 48) = sub_1005C9AEC;
  *(void *)(v0 + 56) = v2;
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = _NSConcreteStackBlock;
  *(void *)(v0 + 24) = 1107296256LL;
  *(void *)(v0 + 32) = sub_1005C8C50;
  *(void *)(v0 + 40) = &unk_100967C98;
  __int128 v4 = _Block_copy((const void *)(v0 + 16));
  swift_release();
  xpc_set_event_stream_handler("com.apple.distnoted.matching", v3, v4);
  _Block_release(v4);
  uint64_t v5 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))(v1, 1LL, 1LL, v5);
  unint64_t v6 = sub_1005C99EC();
  uint64_t v7 = swift_allocObject(&unk_100967CD0, 48LL, 7LL);
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v9;
  *(void *)(v7 + 24) = v6;
  *(_OWORD *)(v7 + 32) = v9;
  swift_retain_n(v9, 2LL);
  sub_1003EDB00(v1, (uint64_t)&unk_1009B5030, v7);
  swift_release();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005C8EE4(void *a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v4);
  unint64_t v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  a2 += 16LL;
  swift_beginAccess(a2, v16, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(a2);
  if (result)
  {
    uint64_t v8 = result;
    string = xpc_dictionary_get_string(a1, _xpc_event_key_name);
    if (string)
    {
      uint64_t v10 = String.init(cString:)(string);
      uint64_t v12 = v11;
      uint64_t v13 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v6, 1LL, 1LL, v13);
      __int128 v14 = (void *)swift_allocObject(&unk_100967CF8, 56LL, 7LL);
      v14[2] = 0LL;
      void v14[3] = 0LL;
      v14[4] = v8;
      v14[5] = v10;
      v14[6] = v12;
      sub_1003EDB00((uint64_t)v6, (uint64_t)&unk_1009B5040, (uint64_t)v14);
    }

    return swift_release();
  }

  return result;
}

uint64_t sub_1005C8FFC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  void v6[3] = a5;
  void v6[4] = a6;
  _OWORD v6[2] = a4;
  return swift_task_switch(sub_1005C9018, a4, 0LL);
}

uint64_t sub_1005C9018()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005C904C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = a4;
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
  *(void *)(v4 + 32) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_1005C90A4;
  return static Task<>.sleep(nanoseconds:)(30000000000LL);
}

uint64_t sub_1005C90A4()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 32));
  uint64_t v3 = *(void *)(v2 + 24);
  if (v0)
  {
    swift_errorRelease(v0);
    uint64_t v4 = sub_1005C9C58;
  }

  else
  {
    uint64_t v4 = sub_1005C9110;
  }

  return swift_task_switch(v4, v3, 0LL);
}

uint64_t sub_1005C9110()
{
  uint64_t v1 = *(void *)(v0 + 24);
  if (*(_BYTE *)(v1 + 144) == 1)
  {
    if (qword_10099B5F0 != -1) {
      swift_once(&qword_10099B5F0, sub_1005C8C98);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    uint64_t v3 = sub_10000A720(v2, (uint64_t)qword_100A2AE28);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      unint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)unint64_t v6 = 134217984;
      *(void *)(v0 + swift_weakDestroy(v0 + 16) = 30LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v6 + 4, v6 + 12);
      _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Stop special launch event processing -- %llu seconds have passed since launch",  v6,  0xCu);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    *(_BYTE *)(v1 + 144) = 0;
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1005C9240(uint64_t a1, void *a2)
{
  uint64_t v5 = *(void *)(*(void *)(v2 + 136) + 16LL);
  if (*(_BYTE *)(v2 + 144) == 1 && !*(void *)(v2 + 160))
  {
    if (qword_10099B5F0 != -1) {
      swift_once(&qword_10099B5F0, sub_1005C8C98);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    sub_10000A720(v6, (uint64_t)qword_100A2AE28);
    swift_bridgeObjectRetain_n(a2, 2LL);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v25 = v5;
      uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v11 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v10 = 136315138;
      v29[0] = v11;
      swift_bridgeObjectRetain(a2);
      _StringGuts.grow(_:)(29LL);
      swift_bridgeObjectRelease();
      unint64_t v28 = 0x800000010086A070LL;
      swift_bridgeObjectRetain(a2);
      v12._countAndFlagsBits = a1;
      v12._object = a2;
      String.append(_:)(v12);
      swift_bridgeObjectRelease();
      v13._countAndFlagsBits = 93LL;
      v13._object = (void *)0xE100000000000000LL;
      String.append(_:)(v13);
      swift_bridgeObjectRelease();
      uint64_t v27 = sub_1003F11D4(0xD00000000000001ALL, 0x800000010086A070LL, v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease_n(a2, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Storing launchEvent: %s", v10, 0xCu);
      swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1LL, -1LL);
      __int128 v14 = v10;
      uint64_t v5 = v25;
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(a2, 2LL);
    }

    *(_BYTE *)(v2 + 144) = 0;
    *(void *)(v2 + 152) = a1;
    *(void *)(v2 + 160) = a2;
    swift_bridgeObjectRetain(a2);
    swift_bridgeObjectRelease();
  }

  if (qword_10099B5F0 != -1) {
    swift_once(&qword_10099B5F0, sub_1005C8C98);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  sub_10000A720(v15, (uint64_t)qword_100A2AE28);
  swift_bridgeObjectRetain_n(a2, 2LL);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v26 = v5;
    uint64_t v19 = swift_slowAlloc(22LL, -1LL);
    uint64_t v20 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v19 = 136315394;
    uint64_t v27 = 0LL;
    unint64_t v28 = 0xE000000000000000LL;
    v29[0] = v20;
    swift_bridgeObjectRetain(a2);
    _StringGuts.grow(_:)(29LL);
    swift_bridgeObjectRelease();
    uint64_t v27 = 0xD00000000000001ALL;
    unint64_t v28 = 0x800000010086A070LL;
    swift_bridgeObjectRetain(a2);
    v21._countAndFlagsBits = a1;
    v21._object = a2;
    String.append(_:)(v21);
    swift_bridgeObjectRelease();
    v22._countAndFlagsBits = 93LL;
    v22._object = (void *)0xE100000000000000LL;
    String.append(_:)(v22);
    swift_bridgeObjectRelease();
    uint64_t v27 = sub_1003F11D4(v27, v28, v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v19 + 4, v19 + 12);
    swift_bridgeObjectRelease_n(a2, 2LL);
    swift_bridgeObjectRelease();
    *(_WORD *)(v19 + 12) = 2048;
    uint64_t v27 = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v27, &v28, v19 + 14, v19 + 22);
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "Publishing %s to %ld clients.", (uint8_t *)v19, 0x16u);
    swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(a2, 2LL);
  }

  uint64_t v23 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v23);
  return static Transaction.named<A>(_:with:)("DistributedNotificationService", 30LL, 2LL, sub_1005C9A30);
}

uint64_t sub_1005C96E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = sub_100004AEC(&qword_1009B5018);
  uint64_t v22 = *(void *)(v9 - 8);
  uint64_t v23 = v9;
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)v21 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009B5020);
  uint64_t v28 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  __int128 v14 = (char *)v21 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = *(void *)(a2 + 136);
  uint64_t v16 = *(void *)(result + 16);
  if (v16)
  {
    v21[0] = *(void *)(a2 + 136);
    v21[1] = v4;
    unint64_t v17 = result + ((*(unsigned __int8 *)(v28 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v28 + 80));
    uint64_t v25 = *(void *)(v28 + 72);
    uint64_t v26 = a3;
    int v24 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v28 + 16);
    __n128 v18 = swift_bridgeObjectRetain(result);
    uint64_t v20 = v22;
    uint64_t v19 = v23;
    do
    {
      v24(v14, v17, v12, v18);
      v27[0] = a1;
      v27[1] = v26;
      v27[2] = a4;
      swift_retain();
      swift_bridgeObjectRetain(a4);
      AsyncStream.Continuation.yield(_:)(v27, v12);
      (*(void (**)(char *, uint64_t))(v20 + 8))(v11, v19);
      (*(void (**)(char *, uint64_t))(v28 + 8))(v14, v12);
      v17 += v25;
      --v16;
    }

    while (v16);
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_1005C9874()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 136));
  swift_bridgeObjectRelease(*(void *)(v0 + 160));
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for DistributedNotificationService()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd30DistributedNotificationService);
}

ValueMetadata *type metadata accessor for DistributedNotification()
{
  return &type metadata for DistributedNotification;
}

uint64_t sub_1005C98E0()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1009B4F04);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100015D58;
  return sub_1005C8D28();
}

unint64_t sub_1005C9924(uint64_t a1, void *a2)
{
  v4._countAndFlagsBits = a1;
  v4._object = a2;
  String.append(_:)(v4);
  swift_bridgeObjectRelease(a2);
  v5._countAndFlagsBits = 93LL;
  v5._object = (void *)0xE100000000000000LL;
  String.append(_:)(v5);
  return 0xD00000000000001ALL;
}

unint64_t sub_1005C99C0()
{
  return sub_1005C9924(*(void *)v0, *(void **)(v0 + 8));
}

unint64_t sub_1005C99C8(uint64_t a1)
{
  unint64_t result = sub_1005C99EC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1005C99EC()
{
  unint64_t result = qword_1009B5010;
  if (!qword_1009B5010)
  {
    uint64_t v1 = type metadata accessor for DistributedNotificationService();
    unint64_t result = swift_getWitnessTable(&unk_10080A77C, v1);
    atomic_store(result, (unint64_t *)&qword_1009B5010);
  }

  return result;
}

uint64_t sub_1005C9A30(uint64_t a1)
{
  return sub_1005C96E4(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1005C9A4C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2AE40);
  sub_10000A720(v0, (uint64_t)qword_100A2AE40);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD00000000000001ELL,  0x800000010080A6D0LL);
}

uint64_t sub_1005C9AC8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1005C9AEC(void *a1)
{
  return sub_1005C8EE4(a1, v1);
}

uint64_t sub_1005C9AF4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1005C9B04(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1005C9B0C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1005C9B38()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc(dword_1009B502C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100015D58;
  _OWORD v3[3] = v2;
  Swift::String v4 = (void *)swift_task_alloc(async function pointer to static Task<>.sleep(nanoseconds:)[1]);
  v3[4] = v4;
  *Swift::String v4 = v3;
  v4[1] = sub_1005C90A4;
  return static Task<>.sleep(nanoseconds:)(30000000000LL);
}

uint64_t sub_1005C9BB4()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1005C9BE8()
{
  uint64_t v2 = v0[4];
  uint64_t v3 = v0[5];
  uint64_t v4 = v0[6];
  Swift::String v5 = (void *)swift_task_alloc(dword_1009B503C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  *Swift::String v5 = v1;
  v5[1] = sub_1000159BC;
  v5[3] = v3;
  void v5[4] = v4;
  void v5[2] = v2;
  return swift_task_switch(sub_1005C9018, v2, 0LL);
}

void sub_1005C9C5C(void *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v17[0] = a1;
  type metadata accessor for SPPairingSessionError(0LL);
  uint64_t v9 = v8;
  uint64_t v10 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
  _BridgedStoredNSError.code.getter(&v18, v9, v10);
  if ((unint64_t)(v18 - 2) > 0x12)
  {
    *(_BYTE *)(a4 + swift_weakDestroy(v0 + 16) = 0;
    if (!a3)
    {
LABEL_5:
      v17[0] = a1;
      uint64_t v11 = _BridgedStoredNSError.userInfo.getter(v9, v10);
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
      if (*(void *)(v11 + 16) && (uint64_t v14 = sub_10030CF14(v12, v13), (v15 & 1) != 0))
      {
        sub_10006A650(*(void *)(v11 + 56) + 32 * v14, (uint64_t)&v18);
      }

      else
      {
        __int128 v18 = 0u;
        __int128 v19 = 0u;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if (*((void *)&v19 + 1))
      {
        if ((swift_dynamicCast(v17, &v18, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) != 0)
        {
          a2 = v17[0];
          a3 = v17[1];
          goto LABEL_14;
        }
      }

      else
      {
        sub_1001C0D4C((uint64_t)&v18);
      }

      a2 = 0LL;
      a3 = 0xE000000000000000LL;
    }
  }

  else
  {
    *(_BYTE *)(a4 + swift_weakDestroy(v0 + 16) = byte_10080AC7E[(void)v18 - 2];
    if (!a3) {
      goto LABEL_5;
    }
  }

void sub_1005C9DEC()
{
  uint64_t v1 = sub_100004AEC(&qword_1009B9A10);
  uint64_t inited = swift_initStackObject(v1, v16);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(void *)(inited + 40) = v3;
  uint64_t v4 = *(unsigned __int8 *)(v0 + 16);
  uint64_t v14 = sub_1005CA178(*(_BYTE *)(v0 + 16));
  uint64_t v15 = v5;
  v6._countAndFlagsBits = 2108704LL;
  v6._object = (void *)0xE300000000000000LL;
  String.append(_:)(v6);
  uint64_t v7 = *(void *)v0;
  uint64_t v8 = *(void **)(v0 + 8);
  swift_bridgeObjectRetain(v8);
  v9._countAndFlagsBits = v7;
  v9._object = v8;
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._countAndFlagsBits = 2108704LL;
  v10._object = (void *)0xE300000000000000LL;
  String.append(_:)(v10);
  type metadata accessor for PairingError(0LL);
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v11, v12);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  *(void *)(inited + 48) = v14;
  *(void *)(inited + 56) = v15;
  sub_100412D14(inited);
  __asm { BR              X9 }

uint64_t sub_1005C9F20()
{
  uint64_t v2 = v1;
  uint64_t v7 = 1LL;
  sub_10028BD3C(v0);
  uint64_t v4 = v3;
  swift_bridgeObjectRelease();
  uint64_t v5 = sub_100007864( &qword_10099C200,  (uint64_t (*)(uint64_t))type metadata accessor for SPPairingSessionError,  (uint64_t)&unk_1007E3540);
  _BridgedStoredNSError.init(_:userInfo:)(&v8, &v7, v4, v2, v5);
  return v8;
}

uint64_t sub_1005CA178(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1005CA1AC + 4 * byte_10080A7C2[a1]))( 0x6E776F6E6B6E752ELL,  0xE800000000000000LL);
}

uint64_t sub_1005CA1AC()
{
  return 0x64616552746F6E2ELL;
}

uint64_t sub_1005CA1CC()
{
  return 0x656E654779656B2ELL;
}

unint64_t sub_1005CA1F4()
{
  return 0xD000000000000010LL;
}

uint64_t sub_1005CA210()
{
  return 0x6B726F7774656E2ELL;
}

unint64_t sub_1005CA224()
{
  return 0xD000000000000011LL;
}

uint64_t sub_1005CA280()
{
  return 0x746E65687475612ELL;
}

uint64_t sub_1005CA2A4()
{
  return 0x746E756F6363612ELL;
}

uint64_t sub_1005CA2B8()
{
  return 0x636552657661732ELL;
}

uint64_t sub_1005CA2D8()
{
  return 0x696E756D6D6F632ELL;
}

uint64_t sub_1005CA2FC()
{
  return 0x754F64656D69742ELL;
}

uint64_t sub_1005CA318()
{
  return 0x70707553746F6E2ELL;
}

uint64_t sub_1005CA33C()
{
  return 0x797265747461622ELL;
}

uint64_t sub_1005CA360()
{
  return 0x67696C45746F6E2ELL;
}

uint64_t sub_1005CA380()
{
  return 0x655274696D696C2ELL;
}

uint64_t sub_1005CA3A4()
{
  return 0x64656B636F6C2ELL;
}

unint64_t sub_1005CA3BC@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1005CC2B8(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1005CA3E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1005CC4F0();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1005CA440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1005CC4F0();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1005CA48C(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B51B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1005CBD00();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for PairingError.CodingKeys,  &type metadata for PairingError.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, v13, &v23, v5);
  if (!v2)
  {
    char v22 = *((_BYTE *)v3 + 16);
    char v21 = 1;
    unint64_t v14 = sub_1005CBD88();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v22, &v21, v5, &type metadata for PairingError.ErrorKind, v14);
    uint64_t v15 = (uint64_t)v3 + *(int *)(type metadata accessor for PairingError(0LL) + 24);
    char v20 = 2;
    uint64_t v16 = type metadata accessor for Date(0LL);
    uint64_t v17 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v20, v5, v16, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1005CA620@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v25 = type metadata accessor for Date(0LL);
  uint64_t v23 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v4 = (uint64_t *)((char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v26 = sub_100004AEC(&qword_1009B5198);
  uint64_t v5 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for PairingError(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100012ED8(a1, v11);
  unint64_t v13 = sub_1005CBD00();
  uint64_t v27 = v7;
  uint64_t v14 = v28;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for PairingError.CodingKeys,  &type metadata for PairingError.CodingKeys,  v13,  v11,  v12);
  if (v14) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v28 = v8;
  uint64_t v15 = v5;
  uint64_t v17 = v25;
  uint64_t v16 = v26;
  BYTE1(v31) = 0;
  *(void *)uint64_t v10 = KeyedDecodingContainer.decode(_:forKey:)((char *)&v31 + 1, v26);
  *((void *)v10 + 1) = v18;
  char v30 = 1;
  unint64_t v19 = sub_1005CBD44();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v31,  &type metadata for PairingError.ErrorKind,  &v30,  v16,  &type metadata for PairingError.ErrorKind,  v19);
  v10[16] = v31;
  char v29 = 2;
  uint64_t v20 = sub_100007864( &qword_10099DA70,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  char v21 = v27;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v4, v17, &v29, v16, v17, v20);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v21, v16);
  (*(void (**)(char *, void *, uint64_t))(v23 + 32))(&v10[*(int *)(v28 + 24)], v4, v17);
  sub_10001DC4C((uint64_t)v10, v24, type metadata accessor for PairingError);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return sub_100018C68((uint64_t)v10, type metadata accessor for PairingError);
}

uint64_t sub_1005CA8E0(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B5188);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1005CBC78();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for PairingErrorRecord.CodingKeys,  &type metadata for PairingErrorRecord.CodingKeys,  v11,  v9,  v10);
  char v20 = 0;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v20, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = v3 + *(int *)(type metadata accessor for PairingErrorRecord(0LL) + 20);
    char v19 = 1;
    uint64_t v15 = type metadata accessor for PairingError(0LL);
    uint64_t v16 = sub_100007864(&qword_1009B5190, type metadata accessor for PairingError, (uint64_t)&unk_10080A8A8);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v19, v5, v15, v16);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1005CAA64@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v26 = a2;
  uint64_t v27 = type metadata accessor for PairingError(0LL);
  __chkstk_darwin(v27);
  char v29 = (char *)&v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = type metadata accessor for UUID(0LL);
  uint64_t v28 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  char v30 = (uint64_t *)((char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v32 = sub_100004AEC(&qword_1009B5170);
  uint64_t v6 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  uint64_t v8 = (char *)&v23 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for PairingErrorRecord(0LL);
  __chkstk_darwin(v9);
  unint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v12);
  unint64_t v14 = sub_1005CBC78();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for PairingErrorRecord.CodingKeys,  &type metadata for PairingErrorRecord.CodingKeys,  v14,  v12,  v13);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v24 = a1;
  uint64_t v25 = v6;
  uint64_t v15 = (uint64_t)v11;
  uint64_t v16 = v28;
  uint64_t v17 = v29;
  char v34 = 0;
  uint64_t v18 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  char v19 = v30;
  uint64_t v20 = v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v30, v31, &v34, v32, v31, v18);
  (*(void (**)(uint64_t, void *, uint64_t))(v16 + 32))(v15, v19, v20);
  char v33 = 1;
  uint64_t v21 = sub_100007864(&qword_1009B5180, type metadata accessor for PairingError, (uint64_t)&unk_10080A8D0);
  KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v27, &v33, v32, v27, v21);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v8, v32);
  sub_1005CBCBC((uint64_t)v17, v15 + *(int *)(v9 + 20));
  sub_10001DC4C(v15, v26, type metadata accessor for PairingErrorRecord);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
  return sub_100018C68(v15, type metadata accessor for PairingErrorRecord);
}

uint64_t sub_1005CAD4C()
{
  uint64_t v1 = 1684957547LL;
  if (*v0 != 1) {
    uint64_t v1 = 1702125924LL;
  }
  if (*v0) {
    return v1;
  }
  else {
    return 0x6F666E4972657375LL;
  }
}

uint64_t sub_1005CAD98@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1005CC2C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005CADBC(uint64_t a1)
{
  unint64_t v2 = sub_1005CBD00();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005CADE4(uint64_t a1)
{
  unint64_t v2 = sub_1005CBD00();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005CAE0C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005CA620(a1, a2);
}

uint64_t sub_1005CAE20(void *a1)
{
  return sub_1005CA48C(a1);
}

uint64_t sub_1005CAE34()
{
  v1._countAndFlagsBits = sub_1005CA178(*(_BYTE *)(v0 + 16));
  String.append(_:)(v1);
  swift_bridgeObjectRelease();
  v2._countAndFlagsBits = 32LL;
  v2._object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  uint64_t v4 = *(void *)v0;
  uint64_t v3 = *(void **)(v0 + 8);
  swift_bridgeObjectRetain(v3);
  v5._countAndFlagsBits = v4;
  v5._object = v3;
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 62LL;
  v6._object = (void *)0xE100000000000000LL;
  String.append(_:)(v6);
  return 60LL;
}

uint64_t sub_1005CAED0()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000A8AC(v2, qword_100A2AE58);
  sub_10000A720(v0, (uint64_t)qword_100A2AE58);
  type metadata accessor for BeaconStore(0LL);
  sub_1004E6208((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000012LL, 0x800000010080A800LL, 1LL);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_1005CAFA0()
{
  if (*v0) {
    return 0x726F727265LL;
  }
  else {
    return 0x696669746E656469LL;
  }
}

uint64_t sub_1005CAFDC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1005CC3FC(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005CB000(uint64_t a1)
{
  unint64_t v2 = sub_1005CBC78();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005CB028(uint64_t a1)
{
  unint64_t v2 = sub_1005CBC78();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005CB050@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005CAA64(a1, a2);
}

uint64_t sub_1005CB064(void *a1)
{
  return sub_1005CA8E0(a1);
}

uint64_t sub_1005CB078()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v1, v2);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  v4._countAndFlagsBits = 32LL;
  v4._object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  uint64_t v5 = v0 + *(int *)(type metadata accessor for PairingErrorRecord(0LL) + 20);
  v6._countAndFlagsBits = sub_1005CA178(*(_BYTE *)(v5 + 16));
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 32LL;
  v7._object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  uint64_t v8 = *(void *)v5;
  uint64_t v9 = *(void **)(v5 + 8);
  swift_bridgeObjectRetain(v9);
  v10._countAndFlagsBits = v8;
  v10._object = v9;
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 62LL;
  v11._object = (void *)0xE100000000000000LL;
  String.append(_:)(v11);
  v12._countAndFlagsBits = 60LL;
  v12._object = (void *)0xE100000000000000LL;
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._countAndFlagsBits = 32LL;
  v13._object = (void *)0xE100000000000000LL;
  String.append(_:)(v13);
  type metadata accessor for PairingError(0LL);
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  v16._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v14, v15);
  String.append(_:)(v16);
  swift_bridgeObjectRelease();
  v17._countAndFlagsBits = 62LL;
  v17._object = (void *)0xE100000000000000LL;
  String.append(_:)(v17);
  return 60LL;
}

uint64_t type metadata accessor for PairingErrorRecord(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009B5138, (uint64_t)&nominal type descriptor for PairingErrorRecord);
}

uint64_t type metadata accessor for PairingError(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009B50A0, (uint64_t)&nominal type descriptor for PairingError);
}

void *sub_1005CB244(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  Swift::String v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *Swift::String v3 = *a2;
    Swift::String v3 = (void *)(v11 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v11);
  }

  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *((_BYTE *)a2 + 16);
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = a1 + v6;
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = type metadata accessor for Date(0LL);
    Swift::String v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }

  return v3;
}

uint64_t sub_1005CB2E8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 24);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t sub_1005CB330(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t sub_1005CB3A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  return a1;
}

uint64_t sub_1005CB42C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v4 = *(int *)(a3 + 24);
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t sub_1005CB490(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  uint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + 16);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = a1 + v8;
  uint64_t v10 = a2 + v8;
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  return a1;
}

uint64_t sub_1005CB504(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005CB510);
}

uint64_t sub_1005CB510(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 24),  a2,  v8);
  }

uint64_t sub_1005CB58C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005CB598);
}

uint64_t sub_1005CB598(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 24),  a2,  a2,  v7);
  }

  return result;
}

uint64_t sub_1005CB60C(uint64_t a1)
{
  v4[0] = &unk_10080A850;
  v4[1] = &unk_10080A868;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_1005CB688(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v19 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v19 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = *(uint64_t *)((char *)a2 + v8);
    uint64_t v12 = *((void *)v10 + 1);
    *(void *)uint64_t v9 = v11;
    *((void *)v9 + 1) = v12;
    v9[16] = v10[16];
    uint64_t v13 = *(int *)(type metadata accessor for PairingError(0LL) + 24);
    uint64_t v14 = &v9[v13];
    uint64_t v15 = &v10[v13];
    uint64_t v16 = type metadata accessor for Date(0LL);
    Swift::String v17 = *(void (**)(char *, char *, uint64_t, __n128))(*(void *)(v16 - 8) + 16LL);
    __n128 v18 = swift_bridgeObjectRetain(v12);
    v17(v14, v15, v16, v18);
  }

  return a1;
}

uint64_t sub_1005CB768(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  swift_bridgeObjectRelease();
  uint64_t v6 = v5 + *(int *)(type metadata accessor for PairingError(0LL) + 24);
  uint64_t v7 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
}

uint64_t sub_1005CB7DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7 + 8);
  *(void *)uint64_t v8 = *(void *)(a2 + v7);
  *(void *)(v8 + 8) = v10;
  *(_BYTE *)(v8 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(a2 + v7 + 16);
  uint64_t v11 = *(int *)(type metadata accessor for PairingError(0LL) + 24);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(*(void *)(v14 - 8) + 16LL);
  __n128 v16 = swift_bridgeObjectRetain(v10);
  v15(v12, v13, v14, v16);
  return a1;
}

uint64_t sub_1005CB890(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(void *)uint64_t v8 = *(void *)v9;
  uint64_t v10 = *(void *)(v9 + 8);
  *(void *)(v8 + 8) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  *(_BYTE *)(v8 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v9 + 16);
  uint64_t v11 = *(int *)(type metadata accessor for PairingError(0LL) + 24);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24LL))(v12, v13, v14);
  return a1;
}

uint64_t sub_1005CB948(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_BYTE *)(v8 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v9 + 16);
  uint64_t v10 = *(int *)(type metadata accessor for PairingError(0LL) + 24);
  uint64_t v11 = v8 + v10;
  uint64_t v12 = v9 + v10;
  uint64_t v13 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 32LL))(v11, v12, v13);
  return a1;
}

uint64_t sub_1005CB9E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(v9 + 8);
  *(void *)uint64_t v8 = *(void *)v9;
  *(void *)(v8 + 8) = v10;
  swift_bridgeObjectRelease();
  *(_BYTE *)(v8 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v9 + 16);
  uint64_t v11 = *(int *)(type metadata accessor for PairingError(0LL) + 24);
  uint64_t v12 = v8 + v11;
  uint64_t v13 = v9 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 40LL))(v12, v13, v14);
  return a1;
}

uint64_t sub_1005CBA90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005CBA9C);
}

uint64_t sub_1005CBA9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v8 = type metadata accessor for PairingError(0LL);
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_1005CBB10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005CBB1C);
}

uint64_t sub_1005CBB1C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v10 = type metadata accessor for PairingError(0LL);
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t sub_1005CBB98(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for PairingError(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 2LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1005CBC1C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100007864( &qword_1009B2A60,  type metadata accessor for PairingErrorRecord,  (uint64_t)&unk_10080A93C);
  uint64_t result = sub_100007864(&qword_1009B2C78, type metadata accessor for PairingErrorRecord, (uint64_t)&unk_10080A914);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_1005CBC78()
{
  unint64_t result = qword_1009B5178;
  if (!qword_1009B5178)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080AC2C, &type metadata for PairingErrorRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B5178);
  }

  return result;
}

uint64_t sub_1005CBCBC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for PairingError(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1005CBD00()
{
  unint64_t result = qword_1009B51A0;
  if (!qword_1009B51A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080ABDC, &type metadata for PairingError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B51A0);
  }

  return result;
}

unint64_t sub_1005CBD44()
{
  unint64_t result = qword_1009B51A8;
  if (!qword_1009B51A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080ABB4, &type metadata for PairingError.ErrorKind);
    atomic_store(result, (unint64_t *)&qword_1009B51A8);
  }

  return result;
}

unint64_t sub_1005CBD88()
{
  unint64_t result = qword_1009B51B8;
  if (!qword_1009B51B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080AB8C, &type metadata for PairingError.ErrorKind);
    atomic_store(result, (unint64_t *)&qword_1009B51B8);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for PairingError.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1005CBE18 + 4 * byte_10080A7D9[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1005CBE4C + 4 * byte_10080A7D4[v4]))();
}

uint64_t sub_1005CBE4C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005CBE54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005CBE5CLL);
  }
  return result;
}

uint64_t sub_1005CBE68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005CBE70LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1005CBE74(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005CBE7C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PairingError.CodingKeys()
{
  return &type metadata for PairingError.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for PairingErrorRecord.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1005CBEE4 + 4 * byte_10080A7E3[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1005CBF18 + 4 * byte_10080A7DE[v4]))();
}

uint64_t sub_1005CBF18(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005CBF20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005CBF28LL);
  }
  return result;
}

uint64_t sub_1005CBF34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005CBF3CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1005CBF40(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005CBF48(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PairingErrorRecord.CodingKeys()
{
  return &type metadata for PairingErrorRecord.CodingKeys;
}

uint64_t getEnumTagSinglePayload for PairingError.ErrorKind(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xEF) {
    goto LABEL_17;
  }
  if (a2 + 17 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 17) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 17;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 17;
    }
  }

uint64_t storeEnumTagSinglePayload for PairingError.ErrorKind(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 17 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 17) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xEF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xEE) {
    return ((uint64_t (*)(void))((char *)&loc_1005CC040 + 4 * byte_10080A7ED[v4]))();
  }
  *a1 = a2 + 17;
  return ((uint64_t (*)(void))((char *)sub_1005CC074 + 4 * byte_10080A7E8[v4]))();
}

uint64_t sub_1005CC074(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005CC07C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005CC084LL);
  }
  return result;
}

uint64_t sub_1005CC090(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005CC098LL);
  }
  *(_BYTE *)unint64_t result = a2 + 17;
  return result;
}

uint64_t sub_1005CC09C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005CC0A4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for PairingError.ErrorKind()
{
  return &type metadata for PairingError.ErrorKind;
}

unint64_t sub_1005CC0C4()
{
  unint64_t result = qword_1009B51C0;
  if (!qword_1009B51C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080A9F4, &type metadata for PairingError.ErrorKind);
    atomic_store(result, (unint64_t *)&qword_1009B51C0);
  }

  return result;
}

unint64_t sub_1005CC10C()
{
  unint64_t result = qword_1009B51C8;
  if (!qword_1009B51C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080AAAC, &type metadata for PairingErrorRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B51C8);
  }

  return result;
}

unint64_t sub_1005CC154()
{
  unint64_t result = qword_1009B51D0;
  if (!qword_1009B51D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080AB64, &type metadata for PairingError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B51D0);
  }

  return result;
}

unint64_t sub_1005CC19C()
{
  unint64_t result = qword_1009B51D8;
  if (!qword_1009B51D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080AAD4, &type metadata for PairingError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B51D8);
  }

  return result;
}

unint64_t sub_1005CC1E4()
{
  unint64_t result = qword_1009B51E0;
  if (!qword_1009B51E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080AAFC, &type metadata for PairingError.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B51E0);
  }

  return result;
}

unint64_t sub_1005CC22C()
{
  unint64_t result = qword_1009B51E8;
  if (!qword_1009B51E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080AA1C, &type metadata for PairingErrorRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B51E8);
  }

  return result;
}

unint64_t sub_1005CC274()
{
  unint64_t result = qword_1009B51F0;
  if (!qword_1009B51F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080AA44, &type metadata for PairingErrorRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B51F0);
  }

  return result;
}

unint64_t sub_1005CC2B8(unint64_t result)
{
  if (result >= 0x12) {
    return 18LL;
  }
  return result;
}

uint64_t sub_1005CC2C8(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6F666E4972657375LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v5 = 0xE800000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F666E4972657375LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 1684957547 && a2 == 0xE400000000000000LL)
  {
    unint64_t v7 = 0xE400000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684957547LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 1702125924 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 2LL;
  }

  else
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(1702125924LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v8 & 1) != 0) {
      return 2LL;
    }
    else {
      return 3LL;
    }
  }

uint64_t sub_1005CC3FC(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v5 = 0xEA00000000007265LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x726F727265LL && a2 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease(0xE500000000000000LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x726F727265LL, 0xE500000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

unint64_t sub_1005CC4F0()
{
  unint64_t result = qword_1009B51F8;
  if (!qword_1009B51F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080A97C, &type metadata for PairingError.ErrorKind);
    atomic_store(result, (unint64_t *)&qword_1009B51F8);
  }

  return result;
}

uint64_t sub_1005CC534@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1005CC6F8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }

  return result;
}

uint64_t sub_1005CC560(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_1005CC56C + dword_1005CC614[a2 >> 62]))();
}

uint64_t sub_1005CC57C(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (BYTE6(a2) != 32LL)
  {
    __break(1u);
    JUMPOUT(0x1005CC610LL);
  }

  return ((uint64_t (*)(void))((char *)&loc_1005CC5B8 + dword_1005CC624[a4 >> 62]))();
}

ValueMetadata *type metadata accessor for InitiatePairingCommandPayload()
{
  return &type metadata for InitiatePairingCommandPayload;
}

unint64_t sub_1005CC644(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1005CC670();
  unint64_t result = sub_1005CC6B4();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_1005CC670()
{
  unint64_t result = qword_1009B5200;
  if (!qword_1009B5200)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080ACE8, &type metadata for InitiatePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009B5200);
  }

  return result;
}

unint64_t sub_1005CC6B4()
{
  unint64_t result = qword_1009B5208;
  if (!qword_1009B5208)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080ACC0, &type metadata for InitiatePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009B5208);
  }

  return result;
}

uint64_t sub_1005CC6F8(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  dispatch thunk of BinaryDecoding.container()(v15, v3, v4);
  uint64_t v5 = v16;
  uint64_t v6 = v17;
  uint64_t v7 = sub_100037298((uint64_t)v15, v16);
  uint64_t v8 = dispatch thunk of BinaryDecodingContaining.decode(length:)(32LL, v5, v6);
  if (!v1)
  {
    uint64_t v10 = v8;
    unint64_t v11 = v9;
    uint64_t v12 = v16;
    uint64_t v13 = v17;
    sub_100037298((uint64_t)v15, v16);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(113LL, v12, v13);
    uint64_t v7 = sub_1005CC560(v10, v11);
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v15);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v7;
}

void destroy for AirPodsLEPairingCommand(uint64_t a1)
{
}

void sub_1005CC89C( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9, uint64_t a10, uint64_t a11, uint64_t a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, uint64_t a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, unint64_t a25, uint64_t a26, unint64_t a27, void (*a28)(void), void (*a29)(uint64_t, uint64_t))
{
  switch((a27 >> 59) & 6 | (a25 >> 63))
  {
    case 0uLL:
      a28();
      ((void (*)(uint64_t, uint64_t))a28)(a3, a4);
      break;
    case 1uLL:
      a28();
      ((void (*)(uint64_t, uint64_t))a28)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a28)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a28)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a28)(a9, a10);
      break;
    case 2uLL:
      a28();
      ((void (*)(uint64_t, uint64_t))a28)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a28)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a28)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a28)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a28)(a11, a12);
      ((void (*)(uint64_t, uint64_t))a28)(a13, a14);
      ((void (*)(uint64_t, uint64_t))a28)(a15, a16);
      ((void (*)(uint64_t, uint64_t))a28)(a17, a18);
      ((void (*)(uint64_t, uint64_t))a28)(a19, a20);
      ((void (*)(uint64_t, uint64_t))a28)(a21, a22);
      ((void (*)(uint64_t, uint64_t))a28)(a23, a24);
      ((void (*)(uint64_t, unint64_t))a28)(a26, a27 & 0xCFFFFFFFFFFFFFFFLL);
      break;
    case 3uLL:
      a28();
      ((void (*)(uint64_t, uint64_t))a28)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a28)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a28)(a7, a8);
      ((void (*)(uint64_t, uint64_t))a28)(a9, a10);
      ((void (*)(uint64_t, uint64_t))a28)(a11, a12);
      ((void (*)(uint64_t, uint64_t))a28)(a13, a14);
      ((void (*)(uint64_t, uint64_t))a28)(a15, a16);
      ((void (*)(uint64_t, uint64_t))a28)(a17, a18);
      ((void (*)(uint64_t, uint64_t))a28)(a19, a20);
      ((void (*)(uint64_t, uint64_t))a28)(a21, a22);
      a29(a23, a24);
      break;
    case 4uLL:
      a28();
      ((void (*)(uint64_t, uint64_t))a28)(a3, a4);
      ((void (*)(uint64_t, uint64_t))a28)(a5, a6);
      ((void (*)(uint64_t, uint64_t))a28)(a7, a8);
      break;
    default:
      return;
  }

uint64_t *initializeWithCopy for AirPodsLEPairingCommand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v13 = a2[9];
  uint64_t v14 = a2[10];
  uint64_t v15 = a2[11];
  uint64_t v16 = a2[12];
  uint64_t v17 = a2[13];
  uint64_t v18 = a2[14];
  uint64_t v19 = a2[15];
  uint64_t v20 = a2[16];
  uint64_t v21 = a2[17];
  uint64_t v22 = a2[18];
  uint64_t v23 = a2[19];
  uint64_t v24 = a2[20];
  uint64_t v25 = a2[21];
  uint64_t v26 = a2[22];
  uint64_t v27 = a2[23];
  unint64_t v28 = a2[24];
  uint64_t v29 = a2[25];
  unint64_t v30 = a2[26];
  uint64_t v3 = a2[8];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a2[7];
  sub_1005CC89C( *a2,  v5,  v6,  v7,  v8,  v9,  v10,  v11,  v3,  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  v21,  v22,  v23,  v24,  v25,  v26,  v27,  v28,  v29,  v30,  (void (*)(void))sub_10001736C,  (void (*)(uint64_t, uint64_t))sub_100018BE4);
  *a1 = v4;
  a1[1] = v5;
  a1[2] = v6;
  a1[3] = v7;
  a1[4] = v8;
  a1[5] = v9;
  a1[6] = v10;
  a1[7] = v11;
  a1[8] = v3;
  a1[9] = v13;
  a1[10] = v14;
  a1[11] = v15;
  a1[12] = v16;
  a1[13] = v17;
  a1[14] = v18;
  a1[15] = v19;
  a1[16] = v20;
  a1[17] = v21;
  a1[18] = v22;
  a1[19] = v23;
  a1[20] = v24;
  a1[21] = v25;
  a1[22] = v26;
  a1[23] = v27;
  a1[24] = v28;
  a1[25] = v29;
  a1[26] = v30;
  return a1;
}

uint64_t assignWithCopy for AirPodsLEPairingCommand(uint64_t a1, uint64_t *a2)
{
  uint64_t v31 = a2[9];
  uint64_t v32 = a2[10];
  uint64_t v33 = a2[11];
  uint64_t v34 = a2[12];
  uint64_t v35 = a2[13];
  uint64_t v36 = a2[14];
  uint64_t v37 = a2[15];
  uint64_t v38 = a2[16];
  uint64_t v39 = a2[17];
  uint64_t v40 = a2[18];
  uint64_t v41 = a2[19];
  uint64_t v42 = a2[20];
  uint64_t v43 = a2[21];
  uint64_t v44 = a2[22];
  uint64_t v45 = a2[23];
  unint64_t v46 = a2[24];
  uint64_t v47 = a2[25];
  unint64_t v48 = a2[26];
  uint64_t v3 = a2[8];
  uint64_t v4 = *a2;
  uint64_t v5 = a2[1];
  uint64_t v6 = a2[2];
  uint64_t v7 = a2[3];
  uint64_t v8 = a2[4];
  uint64_t v9 = a2[5];
  uint64_t v10 = a2[6];
  uint64_t v11 = a2[7];
  sub_1005CC89C( *a2,  v5,  v6,  v7,  v8,  v9,  v10,  v11,  v3,  v31,  v32,  v33,  v34,  v35,  v36,  v37,  v38,  v39,  v40,  v41,  v42,  v43,  v44,  v45,  v46,  v47,  v48,  (void (*)(void))sub_10001736C,  (void (*)(uint64_t, uint64_t))sub_100018BE4);
  uint64_t v12 = *(void *)a1;
  uint64_t v13 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  uint64_t v14 = *(void *)(a1 + 16);
  uint64_t v15 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)(a1 + 24) = v7;
  uint64_t v16 = *(void *)(a1 + 32);
  uint64_t v17 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = v8;
  *(void *)(a1 + 40) = v9;
  uint64_t v18 = *(void *)(a1 + 48);
  uint64_t v19 = *(void *)(a1 + 56);
  *(void *)(a1 + 48) = v10;
  *(void *)(a1 + 56) = v11;
  __int128 v20 = *(_OWORD *)(a1 + 64);
  __int128 v21 = *(_OWORD *)(a1 + 80);
  *(void *)(a1 + 64) = v3;
  *(void *)(a1 + 72) = v31;
  *(void *)(a1 + 80) = v32;
  *(void *)(a1 + 88) = v33;
  __int128 v22 = *(_OWORD *)(a1 + 96);
  __int128 v23 = *(_OWORD *)(a1 + 112);
  *(void *)(a1 + 96) = v34;
  *(void *)(a1 + 104) = v35;
  *(void *)(a1 + 112) = v36;
  *(void *)(a1 + 120) = v37;
  __int128 v24 = *(_OWORD *)(a1 + 128);
  __int128 v25 = *(_OWORD *)(a1 + 144);
  *(void *)(a1 + 128) = v38;
  *(void *)(a1 + 136) = v39;
  *(void *)(a1 + 144) = v40;
  *(void *)(a1 + 152) = v41;
  __int128 v26 = *(_OWORD *)(a1 + 160);
  __int128 v27 = *(_OWORD *)(a1 + 176);
  *(void *)(a1 + 160) = v42;
  *(void *)(a1 + 168) = v43;
  *(void *)(a1 + 176) = v44;
  *(void *)(a1 + 184) = v45;
  __int128 v28 = *(_OWORD *)(a1 + 192);
  *(void *)(a1 + 192) = v46;
  *(void *)(a1 + 200) = v47;
  unint64_t v29 = *(void *)(a1 + 208);
  *(void *)(a1 + 208) = v48;
  sub_1005CC89C( v12,  v13,  v14,  v15,  v16,  v17,  v18,  v19,  v20,  *((uint64_t *)&v20 + 1),  v21,  *((uint64_t *)&v21 + 1),  v22,  *((uint64_t *)&v22 + 1),  v23,  *((uint64_t *)&v23 + 1),  v24,  *((uint64_t *)&v24 + 1),  v25,  *((uint64_t *)&v25 + 1),  v26,  *((uint64_t *)&v26 + 1),  v27,  *((uint64_t *)&v27 + 1),  v28,  *((uint64_t *)&v28 + 1),  v29,  (void (*)(void))sub_100016F9C,  (void (*)(uint64_t, uint64_t))sub_1000182F0);
  return a1;
}

uint64_t assignWithTake for AirPodsLEPairingCommand(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 208);
  uint64_t v5 = *(void *)a1;
  uint64_t v6 = *(void *)(a1 + 8);
  uint64_t v7 = *(void *)(a1 + 16);
  uint64_t v8 = *(void *)(a1 + 24);
  uint64_t v9 = *(void *)(a1 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  uint64_t v11 = *(void *)(a1 + 48);
  uint64_t v12 = *(void *)(a1 + 56);
  __int128 v13 = *(_OWORD *)(a1 + 64);
  __int128 v14 = *(_OWORD *)(a1 + 80);
  __int128 v15 = *(_OWORD *)(a1 + 96);
  __int128 v16 = *(_OWORD *)(a1 + 112);
  __int128 v17 = *(_OWORD *)(a1 + 128);
  __int128 v18 = *(_OWORD *)(a1 + 144);
  __int128 v19 = *(_OWORD *)(a1 + 160);
  __int128 v20 = *(_OWORD *)(a1 + 176);
  __int128 v21 = *(_OWORD *)(a1 + 192);
  unint64_t v22 = *(void *)(a1 + 208);
  __int128 v23 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v23;
  __int128 v24 = *(_OWORD *)(a2 + 48);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(_OWORD *)(a1 + 48) = v24;
  __int128 v25 = *(_OWORD *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_OWORD *)(a1 + 80) = v25;
  __int128 v26 = *(_OWORD *)(a2 + 112);
  *(_OWORD *)(a1 + 96) = *(_OWORD *)(a2 + 96);
  *(_OWORD *)(a1 + 112) = v26;
  __int128 v27 = *(_OWORD *)(a2 + 144);
  *(_OWORD *)(a1 + 128) = *(_OWORD *)(a2 + 128);
  *(_OWORD *)(a1 + 144) = v27;
  __int128 v28 = *(_OWORD *)(a2 + 176);
  *(_OWORD *)(a1 + 160) = *(_OWORD *)(a2 + 160);
  *(_OWORD *)(a1 + 176) = v28;
  *(_OWORD *)(a1 + 192) = *(_OWORD *)(a2 + 192);
  *(void *)(a1 + 208) = v4;
  sub_1005CC89C( v5,  v6,  v7,  v8,  v9,  v10,  v11,  v12,  v13,  *((uint64_t *)&v13 + 1),  v14,  *((uint64_t *)&v14 + 1),  v15,  *((uint64_t *)&v15 + 1),  v16,  *((uint64_t *)&v16 + 1),  v17,  *((uint64_t *)&v17 + 1),  v18,  *((uint64_t *)&v18 + 1),  v19,  *((uint64_t *)&v19 + 1),  v20,  *((uint64_t *)&v20 + 1),  v21,  *((uint64_t *)&v21 + 1),  v22,  (void (*)(void))sub_100016F9C,  (void (*)(uint64_t, uint64_t))sub_1000182F0);
  return a1;
}

uint64_t getEnumTagSinglePayload for AirPodsLEPairingCommand(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 216)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unsigned int v2 = (*(void *)(a1 + 24) >> 58) & 0xC | (*(void *)(a1 + 8) >> 60) & 3 | *(_BYTE *)(a1 + 47) & 0x30 | (*(void *)(a1 + 56) >> 54) & 0xC0 | (*(void *)(a1 + 72) >> 52) & 0x300 | (*(void *)(a1 + 88) >> 50) & 0xC00 | *(_WORD *)(a1 + 110) & 0x3000 | (*(void *)(a1 + 120) >> 46) & 0xC000 | (*(void *)(a1 + 136) >> 44) & 0x30000 | (*(void *)(a1 + 152) >> 42) & 0xC0000 | (*(void *)(a1 + 168) >> 40) & 0x300000 | (*(_DWORD *)(a1 + 192) >> 8 << 22);
  if (v2 > 0x80000000) {
    int v3 = ~v2;
  }
  else {
    int v3 = -1;
  }
  return (v3 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsLEPairingCommand(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 200) = 0u;
    *(_OWORD *)(result + 184) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 2swift_weakDestroy(v0 + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      unint64_t v3 = -a2;
      *(void *)unint64_t result = 0LL;
      *(void *)(result + 8) = (unint64_t)(-(char)a2 & 3) << 60;
      *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
      *(void *)(result + 24) = (v3 << 58) & 0x3000000000000000LL;
      *(void *)(result + 32) = 0LL;
      *(void *)(result + 40) = (v3 << 56) & 0x3000000000000000LL;
      *(void *)(result + 48) = 0LL;
      *(void *)(result + 56) = (v3 << 54) & 0x3000000000000000LL;
      *(void *)(result + 64) = 0LL;
      *(void *)(result + 72) = (v3 << 52) & 0x3000000000000000LL;
      *(void *)(result + 80) = 0LL;
      *(void *)(result + 88) = (v3 << 50) & 0x3000000000000000LL;
      *(void *)(result + 96) = 0LL;
      *(void *)(result + 104) = (v3 << 48) & 0x3000000000000000LL;
      *(void *)(result + 112) = 0LL;
      *(void *)(result + 120) = (v3 << 46) & 0x3000000000000000LL;
      *(void *)(result + 128) = 0LL;
      *(void *)(result + 136) = (v3 << 44) & 0x3000000000000000LL;
      *(void *)(result + 144) = 0LL;
      *(void *)(result + 152) = (v3 << 42) & 0x3000000000000000LL;
      *(void *)(result + 160) = 0LL;
      *(void *)(result + 168) = (v3 << 40) & 0x3000000000000000LL;
      *(void *)(result + 176) = 0LL;
      *(void *)(result + 184) = 0LL;
      *(void *)(result + 200) = 0LL;
      *(void *)(result + 208) = 0LL;
      *(void *)(result + 192) = (v3 >> 14) & 0x3FF00;
      return result;
    }

    *(_BYTE *)(result + 2swift_weakDestroy(v0 + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

uint64_t sub_1005CD1D0(uint64_t a1)
{
  unsigned int v1 = (*(void *)(a1 + 208) >> 59) & 6 | (*(void *)(a1 + 192) >> 63);
  if (v1 <= 4) {
    return v1;
  }
  else {
    return (*(_DWORD *)a1 + 5);
  }
}

uint64_t sub_1005CD1FC(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 208) & 0xCFFFFFFFFFFFFFFFLL;
  *(void *)(result + 192) &= ~0x8000000000000000LL;
  *(void *)(result + 208) = v1;
  return result;
}

uint64_t sub_1005CD218(uint64_t result, unsigned int a2)
{
  if (a2 < 5)
  {
    unint64_t v2 = *(void *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v3 = *(void *)(result + 40) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v4 = *(void *)(result + 56) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v5 = *(void *)(result + 72) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v6 = *(void *)(result + 88) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v7 = *(void *)(result + 104) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v8 = *(void *)(result + 120) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v9 = *(void *)(result + 136) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v10 = *(void *)(result + 152) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v11 = *(void *)(result + 168) & 0xCFFFFFFFFFFFFFFFLL;
    unint64_t v12 = (unint64_t)a2 >> 1;
    unint64_t v13 = *(unsigned __int8 *)(result + 192) | ((unint64_t)a2 << 63);
    unint64_t v14 = *(void *)(result + 208) & 0xCFFFFFFFFFFFFFFFLL | ((v12 & 3) << 60);
    *(void *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
    *(void *)(result + 24) = v2;
    *(void *)(result + 40) = v3;
    *(void *)(result + 56) = v4;
    *(void *)(result + 72) = v5;
    *(void *)(result + 88) = v6;
    *(void *)(result + 104) = v7;
    *(void *)(result + 120) = v8;
    *(void *)(result + 136) = v9;
    *(void *)(result + 152) = v10;
    *(void *)(result + 168) = v11;
    *(void *)(result + 192) = v13;
    *(void *)(result + 208) = v14;
  }

  else
  {
    *(void *)unint64_t result = a2 - 5;
    *(_OWORD *)(result + 8) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 104) = 0u;
    *(_OWORD *)(result + 120) = 0u;
    *(_OWORD *)(result + 136) = 0u;
    *(_OWORD *)(result + 152) = 0u;
    *(_OWORD *)(result + 168) = 0u;
    *(void *)(result + 184) = 0LL;
    *(_OWORD *)(result + 192) = xmmword_10080AEC0;
    *(void *)(result + 208) = 0x2000000000000000LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingCommand()
{
  return &type metadata for AirPodsLEPairingCommand;
}

void sub_1005CD328()
{
  unint64_t v1 = (char *)sub_1005CD394 + 4 * byte_10080AD35[sub_1005CD1D0((uint64_t)v3)];
  __asm { BR              X10 }

uint64_t sub_1005CD394()
{
  uint64_t v1 = sub_1005CD1FC((uint64_t)&v11);
  __int128 v9 = *(_OWORD *)v1;
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *(void *)(v1 + 24);
  v0[3] = (uint64_t)&type metadata for AirPodsSendBeaconGroupDataCommandPayload;
  v0[4] = sub_1005CEEC0();
  uint64_t v4 = swift_allocObject(&unk_100968218, 48LL, 7LL);
  *uint64_t v0 = v4;
  *(_OWORD *)(v4 + swift_weakDestroy(v0 + 16) = v9;
  *(void *)(v4 + 32) = v2;
  *(void *)(v4 + 40) = v3;
  sub_1005CE8A0((uint64_t)&v12, (uint64_t)v10);
  unint64_t v5 = (uint64_t *)sub_1005CD1FC((uint64_t)v10);
  uint64_t v6 = v5[2];
  unint64_t v7 = v5[3];
  sub_10001736C(*v5, v5[1]);
  return sub_10001736C(v6, v7);
}

void sub_1005CD6E0(char a1)
{
  __asm { BR              X10 }

ValueMetadata *sub_1005CD708()
{
  return &type metadata for AccessoryGenericPayload;
}

void sub_1005CD798(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Endianness(0LL);
  __chkstk_darwin(v4);
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100012ED8(a1, v5);
  dispatch thunk of BinaryEncoding.container()(v8, v5, v6);
  sub_1005CE8A0(v2, (uint64_t)v9);
  unint64_t v7 = (char *)sub_1005CD858 + 4 * byte_10080AD45[sub_1005CD1D0((uint64_t)v9)];
  __asm { BR              X11 }

uint64_t sub_1005CD858()
{
  uint64_t v6 = sub_1005CD1FC(v0 + 1000);
  *(_WORD *)(v0 + 272) = 268;
  static Endianness.current.getter(v6);
  unint64_t v7 = sub_1000F4D24();
  FixedWidthInteger.convert(to:)((void *)(v0 + 488), v4, &type metadata for UInt16, v7);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v3);
  *(_WORD *)(v0 + 272) = *(_WORD *)(v0 + 488);
  uint64_t v8 = *(void *)(v0 + 768);
  uint64_t v9 = *(void *)(v0 + 776);
  sub_100037298(v0 + 744, v8);
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(v0 + 272, &type metadata for UInt16, v7, v8, v9);
  if (!v1)
  {
    sub_1005CE8A0(v2, v0 + 784);
    unint64_t v10 = (char *)&loc_1005CD96C + 4 * word_10080AD4E[sub_1005CD1D0(v0 + 784)];
    __asm { BR              X10 }
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 744));
}

uint64_t sub_1005CDF90@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1005CE578(a1, (uint64_t)v5);
  if (!v2) {
    return sub_1005CE8A0((uint64_t)v5, a2);
  }
  return result;
}

void sub_1005CDFD4(void *a1)
{
}

uint64_t sub_1005CE020(unsigned __int16 a1)
{
  int v1 = a1;
  uint64_t result = 1LL;
  switch(v1)
  {
    case 256:
      uint64_t result = 2LL;
      break;
    case 257:
      uint64_t result = 3LL;
      break;
    case 258:
      uint64_t result = 4LL;
      break;
    case 259:
      uint64_t result = 5LL;
      break;
    case 260:
      uint64_t result = 6LL;
      break;
    case 261:
    case 262:
    case 263:
    case 264:
    case 265:
    case 266:
      goto LABEL_5;
    case 267:
      uint64_t result = 0LL;
      break;
    case 268:
      return result;
    default:
      if (v1 == 516) {
        uint64_t result = 7LL;
      }
      else {
LABEL_5:
      }
        uint64_t result = 8LL;
      break;
  }

  return result;
}

void sub_1005CE094(char a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v9;
  uint64_t v6 = sub_100012ED8(v8, v9);
  uint64_t DynamicType = swift_getDynamicType(v6, v5, 1LL);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
  if (v4 == DynamicType) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1005CE558LL);
}

uint64_t sub_1005CE578@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v39 = a2;
  uint64_t v4 = type metadata accessor for Endianness(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v38 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  uint64_t v40 = a1;
  sub_100012ED8(a1, v8);
  dispatch thunk of BinaryDecoding.container()(v43, v8, v9);
  uint64_t v11 = v44;
  uint64_t v10 = v45;
  sub_100037298((uint64_t)v43, v44);
  unint64_t v12 = sub_1000F4D24();
  unint64_t v13 = dispatch thunk of BinaryDecodingContaining.decode<A>(_:)( v41,  &type metadata for UInt16,  &type metadata for UInt16,  v12,  v11,  v10);
  if (v2)
  {
    unint64_t v14 = v40;
  }

  else
  {
    uint64_t v15 = v39;
    v46[119] = v41[0];
    static Endianness.current.getter(v13);
    FixedWidthInteger.convert(to:)(v42, v7, &type metadata for UInt16, v12);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    __int16 v16 = v42[0];
    uint64_t v17 = sub_1005CE020(v42[0]);
    if (v17 != 8)
    {
      char v31 = v17;
      sub_1005CD6E0(v17);
      uint64_t v33 = v32;
      uint64_t v35 = v34;
      uint64_t v36 = v40;
      sub_100013044((uint64_t)v40, (uint64_t)v41);
      v42[3] = v33;
      _BYTE v42[4] = v35;
      sub_10000A7C8(v42);
      dispatch thunk of BinaryDecodable.init(from:)(v41, v33, *(void *)(v35 + 8));
      sub_100013044((uint64_t)v42, (uint64_t)v41);
      sub_1005CE094(v31, (uint64_t)v41);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v43);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v36);
      return sub_1005CE8A0((uint64_t)v46, v15);
    }

    uint64_t v18 = static os_log_type_t.error.getter(v17);
    unint64_t v14 = v40;
    if (qword_10099B798 != -1) {
      swift_once(&qword_10099B798, sub_100651870);
    }
    uint64_t v19 = qword_100A2B0A8;
    uint64_t v20 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v21 = swift_allocObject(v20, 72LL, 7LL);
    *(_OWORD *)(v21 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    LOWORD(v42[0]) = v16;
    uint64_t v22 = FixedWidthInteger.data.getter(&type metadata for UInt16, v12);
    unint64_t v24 = v23;
    uint64_t v25 = Data.hexString.getter(v22, v23);
    uint64_t v27 = v26;
    sub_100016F9C(v22, v24);
    *(void *)(v21 + 56) = &type metadata for String;
    *(void *)(v21 + 64) = sub_1000226F4();
    *(void *)(v21 + 32) = v25;
    *(void *)(v21 + 40) = v27;
    os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "Invalid opcode: %@", 18LL, 2LL, v21);
    swift_bridgeObjectRelease();
    unint64_t v28 = sub_1005CE8E8();
    uint64_t v29 = swift_allocError(&type metadata for AirPodsLEPairingCommand.AccessoryPairingCommandError, v28, 0LL, 0LL);
    *unint64_t v30 = 1;
    swift_willThrow(v29);
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v43);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v14);
}

uint64_t sub_1005CE8A0(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v2;
  __int128 v3 = *(_OWORD *)(a1 + 32);
  __int128 v4 = *(_OWORD *)(a1 + 48);
  __int128 v5 = *(_OWORD *)(a1 + 80);
  *(_OWORD *)(a2 + 64) = *(_OWORD *)(a1 + 64);
  *(_OWORD *)(a2 + 80) = v5;
  *(_OWORD *)(a2 + 32) = v3;
  *(_OWORD *)(a2 + 48) = v4;
  __int128 v6 = *(_OWORD *)(a1 + 96);
  __int128 v7 = *(_OWORD *)(a1 + 112);
  __int128 v8 = *(_OWORD *)(a1 + 144);
  *(_OWORD *)(a2 + 128) = *(_OWORD *)(a1 + 128);
  *(_OWORD *)(a2 + 144) = v8;
  *(_OWORD *)(a2 + 96) = v6;
  *(_OWORD *)(a2 + 112) = v7;
  __int128 v9 = *(_OWORD *)(a1 + 160);
  __int128 v10 = *(_OWORD *)(a1 + 176);
  __int128 v11 = *(_OWORD *)(a1 + 192);
  *(void *)(a2 + 208) = *(void *)(a1 + 208);
  *(_OWORD *)(a2 + 176) = v10;
  *(_OWORD *)(a2 + 192) = v11;
  *(_OWORD *)(a2 + 160) = v9;
  return a2;
}

unint64_t sub_1005CE8E8()
{
  unint64_t result = qword_1009B5210;
  if (!qword_1009B5210)
  {
    unint64_t result = swift_getWitnessTable( &unk_10080AE78,  &type metadata for AirPodsLEPairingCommand.AccessoryPairingCommandError);
    atomic_store(result, (unint64_t *)&qword_1009B5210);
  }

  return result;
}

double sub_1005CE92C(uint64_t a1)
{
  *(void *)a1 = 2LL;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0LL;
  double result = -0.0;
  *(_OWORD *)(a1 + 192) = xmmword_10080AEC0;
  *(void *)(a1 + 208) = 0x2000000000000000LL;
  return result;
}

double sub_1005CE980(uint64_t a1)
{
  *(void *)a1 = 1LL;
  *(_OWORD *)(a1 + 8) = 0u;
  *(_OWORD *)(a1 + 24) = 0u;
  *(_OWORD *)(a1 + 40) = 0u;
  *(_OWORD *)(a1 + 56) = 0u;
  *(_OWORD *)(a1 + 72) = 0u;
  *(_OWORD *)(a1 + 88) = 0u;
  *(_OWORD *)(a1 + 104) = 0u;
  *(_OWORD *)(a1 + 120) = 0u;
  *(_OWORD *)(a1 + 136) = 0u;
  *(_OWORD *)(a1 + 152) = 0u;
  *(_OWORD *)(a1 + 168) = 0u;
  *(void *)(a1 + 184) = 0LL;
  double result = -0.0;
  *(_OWORD *)(a1 + 192) = xmmword_10080AEC0;
  *(void *)(a1 + 208) = 0x2000000000000000LL;
  return result;
}

uint64_t sub_1005CE9D4(uint64_t result)
{
  uint64_t v1 = *(unsigned __int8 *)(result + 192);
  unint64_t v2 = *(void *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = *(void *)(result + 40) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = *(void *)(result + 56) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = *(void *)(result + 72) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = *(void *)(result + 88) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = *(void *)(result + 104) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v8 = *(void *)(result + 120) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v9 = *(void *)(result + 136) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v10 = *(void *)(result + 152) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v11 = *(void *)(result + 168) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v12 = *(void *)(result + 208) & 0xCFFFFFFFFFFFFFFFLL | 0x2000000000000000LL;
  *(void *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  *(void *)(result + 24) = v2;
  *(void *)(result + 40) = v3;
  *(void *)(result + 56) = v4;
  *(void *)(result + 72) = v5;
  *(void *)(result + 88) = v6;
  *(void *)(result + 104) = v7;
  *(void *)(result + 120) = v8;
  *(void *)(result + 136) = v9;
  *(void *)(result + 152) = v10;
  *(void *)(result + 168) = v11;
  *(void *)(result + 192) = v1;
  *(void *)(result + 208) = v12;
  return result;
}

uint64_t sub_1005CEA74(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = *(void *)(result + 40) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = *(void *)(result + 56) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = *(void *)(result + 72) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = *(void *)(result + 88) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = *(void *)(result + 104) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = *(void *)(result + 120) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v8 = *(void *)(result + 136) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v9 = *(void *)(result + 152) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v10 = *(void *)(result + 168) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v11 = *(unsigned __int8 *)(result + 192) | 0x8000000000000000LL;
  unint64_t v12 = *(void *)(result + 208) & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000LL;
  *(void *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  *(void *)(result + 24) = v1;
  *(void *)(result + 40) = v2;
  *(void *)(result + 56) = v3;
  *(void *)(result + 72) = v4;
  *(void *)(result + 88) = v5;
  *(void *)(result + 104) = v6;
  *(void *)(result + 120) = v7;
  *(void *)(result + 136) = v8;
  *(void *)(result + 152) = v9;
  *(void *)(result + 168) = v10;
  *(void *)(result + 192) = v11;
  *(void *)(result + 208) = v12;
  return result;
}

uint64_t sub_1005CEB18(uint64_t result)
{
  uint64_t v1 = *(unsigned __int8 *)(result + 192);
  unint64_t v2 = *(void *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = *(void *)(result + 40) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = *(void *)(result + 56) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = *(void *)(result + 72) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = *(void *)(result + 88) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = *(void *)(result + 104) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v8 = *(void *)(result + 120) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v9 = *(void *)(result + 136) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v10 = *(void *)(result + 152) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v11 = *(void *)(result + 168) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v12 = *(void *)(result + 208) & 0xCFFFFFFFFFFFFFFFLL | 0x1000000000000000LL;
  *(void *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  *(void *)(result + 24) = v2;
  *(void *)(result + 40) = v3;
  *(void *)(result + 56) = v4;
  *(void *)(result + 72) = v5;
  *(void *)(result + 88) = v6;
  *(void *)(result + 104) = v7;
  *(void *)(result + 120) = v8;
  *(void *)(result + 136) = v9;
  *(void *)(result + 152) = v10;
  *(void *)(result + 168) = v11;
  *(void *)(result + 192) = v1;
  *(void *)(result + 208) = v12;
  return result;
}

uint64_t sub_1005CEBB8(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v2 = *(void *)(result + 40) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = *(void *)(result + 56) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = *(void *)(result + 72) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = *(void *)(result + 88) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = *(void *)(result + 104) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = *(void *)(result + 120) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v8 = *(void *)(result + 136) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v9 = *(void *)(result + 152) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v10 = *(void *)(result + 168) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v11 = *(void *)(result + 208) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v12 = *(unsigned __int8 *)(result + 192) | 0x8000000000000000LL;
  *(void *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  *(void *)(result + 24) = v1;
  *(void *)(result + 40) = v2;
  *(void *)(result + 56) = v3;
  *(void *)(result + 72) = v4;
  *(void *)(result + 88) = v5;
  *(void *)(result + 104) = v6;
  *(void *)(result + 120) = v7;
  *(void *)(result + 136) = v8;
  *(void *)(result + 152) = v9;
  *(void *)(result + 168) = v10;
  *(void *)(result + 192) = v12;
  *(void *)(result + 208) = v11;
  return result;
}

uint64_t sub_1005CEC58(uint64_t result)
{
  uint64_t v1 = *(unsigned __int8 *)(result + 192);
  unint64_t v2 = *(void *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v3 = *(void *)(result + 40) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v4 = *(void *)(result + 56) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v5 = *(void *)(result + 72) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v6 = *(void *)(result + 88) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v7 = *(void *)(result + 104) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v8 = *(void *)(result + 120) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v9 = *(void *)(result + 136) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v10 = *(void *)(result + 152) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v11 = *(void *)(result + 168) & 0xCFFFFFFFFFFFFFFFLL;
  unint64_t v12 = *(void *)(result + 208) & 0xCFFFFFFFFFFFFFFFLL;
  *(void *)(result + 8) &= 0xCFFFFFFFFFFFFFFFLL;
  *(void *)(result + 24) = v2;
  *(void *)(result + 40) = v3;
  *(void *)(result + 56) = v4;
  *(void *)(result + 72) = v5;
  *(void *)(result + 88) = v6;
  *(void *)(result + 104) = v7;
  *(void *)(result + 120) = v8;
  *(void *)(result + 136) = v9;
  *(void *)(result + 152) = v10;
  *(void *)(result + 168) = v11;
  *(void *)(result + 192) = v1;
  *(void *)(result + 208) = v12;
  return result;
}

double sub_1005CECF4(uint64_t a1)
{
  *(_OWORD *)(a1 + 160) = 0u;
  *(_OWORD *)(a1 + 176) = 0u;
  *(_OWORD *)(a1 + 128) = 0u;
  *(_OWORD *)(a1 + 144) = 0u;
  *(_OWORD *)(a1 + 96) = 0u;
  *(_OWORD *)(a1 + 112) = 0u;
  *(_OWORD *)(a1 + 64) = 0u;
  *(_OWORD *)(a1 + 80) = 0u;
  *(_OWORD *)(a1 + 32) = 0u;
  *(_OWORD *)(a1 + 48) = 0u;
  *(_OWORD *)a1 = 0u;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = 0u;
  double result = -0.0;
  *(_OWORD *)(a1 + 192) = xmmword_10080AEC0;
  *(void *)(a1 + 208) = 0x2000000000000000LL;
  return result;
}

unint64_t sub_1005CED28()
{
  unint64_t result = qword_1009B5218;
  if (!qword_1009B5218)
  {
    unint64_t result = swift_getWitnessTable(&unk_100803468, &type metadata for UnpairCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009B5218);
  }

  return result;
}

unint64_t sub_1005CED6C()
{
  unint64_t result = qword_1009B5220;
  if (!qword_1009B5220)
  {
    unint64_t result = swift_getWitnessTable(&unk_100815E98, &type metadata for AirPodsPairingCompleteCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009B5220);
  }

  return result;
}

unint64_t sub_1005CEDB0()
{
  unint64_t result = qword_1009B5228;
  if (!qword_1009B5228)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FECE0, &type metadata for AirPodsLESendPairingStatusCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009B5228);
  }

  return result;
}

unint64_t sub_1005CEDF4()
{
  unint64_t result = qword_1009B5230;
  if (!qword_1009B5230)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E76E8, &type metadata for AirPodsLEFinalizePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009B5230);
  }

  return result;
}

unint64_t sub_1005CEE38()
{
  unint64_t result = qword_1009B5238;
  if (!qword_1009B5238)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE3B8, &type metadata for AirPodsLESendPairingDataCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009B5238);
  }

  return result;
}

unint64_t sub_1005CEE7C()
{
  unint64_t result = qword_1009B5240;
  if (!qword_1009B5240)
  {
    unint64_t result = swift_getWitnessTable(&unk_100802A38, &type metadata for AirPodsLEInitiatePairingCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009B5240);
  }

  return result;
}

unint64_t sub_1005CEEC0()
{
  unint64_t result = qword_1009B5248;
  if (!qword_1009B5248)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F512C, &type metadata for AirPodsSendBeaconGroupDataCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009B5248);
  }

  return result;
}

unint64_t sub_1005CEF04()
{
  unint64_t result = qword_1009B5250;
  if (!qword_1009B5250)
  {
    unint64_t result = swift_getWitnessTable(&unk_100815E70, &type metadata for AirPodsPairingCompleteCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009B5250);
  }

  return result;
}

uint64_t sub_1005CEF48()
{
  return swift_deallocObject(v0, 80LL, 7LL);
}

uint64_t sub_1005CEF84()
{
  unint64_t v1 = v0[25];
  if (v1 >> 60 != 15) {
    sub_100016F9C(v0[24], v1);
  }
  return swift_deallocObject(v0, 208LL, 7LL);
}

uint64_t *sub_1005CF010( uint64_t *a1, void (*a2)(uint64_t, uint64_t), void (*a3)(uint64_t, uint64_t))
{
  uint64_t v5 = a1[2];
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v9 = a1[6];
  uint64_t v10 = a1[7];
  uint64_t v11 = a1[8];
  uint64_t v12 = a1[9];
  uint64_t v14 = a1[11];
  uint64_t v15 = a1[10];
  uint64_t v16 = a1[13];
  uint64_t v17 = a1[12];
  uint64_t v18 = a1[15];
  uint64_t v19 = a1[14];
  uint64_t v20 = a1[17];
  uint64_t v21 = a1[16];
  uint64_t v22 = a1[19];
  uint64_t v23 = a1[18];
  uint64_t v24 = a1[21];
  uint64_t v25 = a1[20];
  uint64_t v27 = a1[22];
  uint64_t v26 = a1[23];
  a2(*a1, a1[1]);
  a2(v5, v6);
  a2(v7, v8);
  a2(v9, v10);
  a2(v11, v12);
  a2(v15, v14);
  a2(v17, v16);
  a2(v19, v18);
  a2(v21, v20);
  a2(v23, v22);
  a2(v25, v24);
  a3(v27, v26);
  return a1;
}

uint64_t sub_1005CF13C()
{
  return swift_deallocObject(v0, 232LL, 7LL);
}

uint64_t *sub_1005CF1C0(uint64_t *a1, void (*a2)(uint64_t, uint64_t))
{
  uint64_t v4 = a1[2];
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  uint64_t v8 = a1[5];
  uint64_t v7 = a1[6];
  uint64_t v9 = a1[7];
  uint64_t v10 = a1[8];
  uint64_t v11 = a1[9];
  uint64_t v13 = a1[11];
  uint64_t v14 = a1[10];
  uint64_t v15 = a1[13];
  uint64_t v16 = a1[12];
  uint64_t v17 = a1[15];
  uint64_t v18 = a1[14];
  uint64_t v19 = a1[17];
  uint64_t v20 = a1[16];
  uint64_t v21 = a1[19];
  uint64_t v22 = a1[18];
  uint64_t v23 = a1[21];
  uint64_t v24 = a1[20];
  uint64_t v25 = a1[23];
  uint64_t v26 = a1[22];
  uint64_t v27 = a1[26];
  uint64_t v28 = a1[25];
  a2(*a1, a1[1]);
  a2(v4, v5);
  a2(v6, v8);
  a2(v7, v9);
  a2(v10, v11);
  a2(v14, v13);
  a2(v16, v15);
  a2(v18, v17);
  a2(v20, v19);
  a2(v22, v21);
  a2(v24, v23);
  a2(v26, v25);
  a2(v28, v27);
  return a1;
}

uint64_t sub_1005CF2F4()
{
  return swift_deallocObject(v0, 96LL, 7LL);
}

uint64_t sub_1005CF338()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t storeEnumTagSinglePayload for AirPodsLEPairingCommand.AccessoryPairingCommandError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1005CF3B0 + 4 * byte_10080AD70[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1005CF3E4 + 4 * byte_10080AD6B[v4]))();
}

uint64_t sub_1005CF3E4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005CF3EC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005CF3F4LL);
  }
  return result;
}

uint64_t sub_1005CF400(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005CF408LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1005CF40C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005CF414(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLEPairingCommand.AccessoryPairingCommandError()
{
  return &type metadata for AirPodsLEPairingCommand.AccessoryPairingCommandError;
}

unint64_t sub_1005CF434()
{
  unint64_t result = qword_1009B5258;
  if (!qword_1009B5258)
  {
    unint64_t result = swift_getWitnessTable( &unk_10080AE50,  &type metadata for AirPodsLEPairingCommand.AccessoryPairingCommandError);
    atomic_store(result, (unint64_t *)&qword_1009B5258);
  }

  return result;
}

uint64_t sub_1005CF478@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v94 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v86 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (int *)type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v8 = (uint64_t *)*((void *)v7 - 1);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v86 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100012ED8(a1, v11);
  uint64_t v13 = (*(uint64_t (**)(uint64_t, uint64_t))(v12 + 168))(v11, v12);
  if (v14 >> 60 == 15)
  {
    if (qword_10099B840 != -1) {
      swift_once(&qword_10099B840, sub_1006B4000);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    sub_10000A720(v15, (uint64_t)qword_100A2B1F8);
    uint64_t v16 = sub_100013044((uint64_t)a1, (uint64_t)v100);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.default.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v19 = swift_slowAlloc(22LL, -1LL);
      uint64_t v93 = a2;
      uint64_t v20 = v19;
      uint64_t v91 = swift_slowAlloc(32LL, -1LL);
      v96[0] = v91;
      *(_DWORD *)uint64_t v20 = 141558275;
      uint64_t v99 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v20 + 4, v20 + 12);
      *(_WORD *)(v20 + 12) = 2081;
      uint64_t v90 = v20 + 14;
      uint64_t v92 = v8;
      uint64_t v22 = v101;
      uint64_t v21 = v102;
      sub_100012ED8(v100, v101);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v21 + 8) + 8LL) + 32LL))(v22);
      unint64_t v23 = sub_1000F620C();
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v4, v23);
      unint64_t v26 = v25;
      (*(void (**)(char *, uint64_t))(v94 + 8))(v6, v4);
      uint64_t v99 = sub_1003F11D4(v24, v26, v96);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, v100, v90, v20 + 22);
      uint64_t v8 = v92;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v100);
      _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "No productData for %{private,mask.hash}s",  (uint8_t *)v20,  0x16u);
      uint64_t v27 = v91;
      swift_arrayDestroy(v91, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1LL, -1LL);
      uint64_t v28 = v20;
      a2 = v93;
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v100);
    }

LABEL_10:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    return ((uint64_t (*)(uint64_t, uint64_t, uint64_t, int *))v8[7])(a2, 1LL, 1LL, v7);
  }

  unint64_t v29 = v14;
  uint64_t v93 = v4;
  uint64_t v91 = v13;
  uint64_t v30 = a1[3];
  uint64_t v31 = a1[4];
  sub_100012ED8(a1, v30);
  uint64_t v32 = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 24))(v30, v31);
  unint64_t v34 = sub_100452480(v32, v33);
  if ((v34 & 0x100000000LL) != 0)
  {
    uint64_t v44 = a1[3];
    uint64_t v45 = a1[4];
    sub_100012ED8(a1, v44);
    uint64_t v46 = (*(uint64_t (**)(uint64_t, uint64_t))(v45 + 24))(v44, v45);
    unint64_t v48 = sub_100597FE8(v46, v47);
    if ((v50 & 1) != 0)
    {
      if (qword_10099B840 != -1) {
        swift_once(&qword_10099B840, sub_1006B4000);
      }
      uint64_t v65 = type metadata accessor for Logger(0LL);
      sub_10000A720(v65, (uint64_t)qword_100A2B1F8);
      sub_100013044((uint64_t)a1, (uint64_t)v100);
      uint64_t v66 = sub_100013044((uint64_t)a1, (uint64_t)v96);
      unint64_t v67 = (os_log_s *)Logger.logObject.getter(v66);
      os_log_type_t v68 = static os_log_type_t.default.getter(v67);
      int v69 = v68;
      if (os_log_type_enabled(v67, v68))
      {
        uint64_t v70 = swift_slowAlloc(32LL, -1LL);
        uint64_t v90 = swift_slowAlloc(64LL, -1LL);
        uint64_t v99 = v90;
        *(_DWORD *)uint64_t v70 = 141558531;
        uint64_t v95 = 1752392040LL;
        uint64_t v92 = v96;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v96, v70 + 4, v70 + 12);
        *(_WORD *)(v70 + 12) = 2081;
        uint64_t v87 = v70 + 14;
        os_log_t v88 = v67;
        int v89 = v69;
        uint64_t v72 = v101;
        uint64_t v71 = v102;
        sub_100012ED8(v100, v101);
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v71 + 8) + 8LL) + 32LL))(v72);
        unint64_t v73 = sub_1000F620C();
        uint64_t v74 = v93;
        uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter(v93, v73);
        unint64_t v77 = v76;
        (*(void (**)(char *, uint64_t))(v94 + 8))(v6, v74);
        uint64_t v95 = sub_1003F11D4(v75, v77, &v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v92, v87, v70 + 22);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v100);
        *(_WORD *)(v70 + 22) = 2082;
        id v78 = v8;
        uint64_t v79 = v97;
        uint64_t v80 = v98;
        sub_100012ED8(v96, v97);
        uint64_t v81 = v79;
        uint64_t v8 = v78;
        uint64_t v82 = (*(uint64_t (**)(uint64_t, uint64_t))(v80 + 24))(v81, v80);
        uint64_t v95 = sub_1003F11D4(v82, v83, &v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v95, v92, v70 + 24, v70 + 32);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v96);
        os_log_t v84 = v88;
        _os_log_impl( (void *)&_mh_execute_header,  v88,  (os_log_type_t)v89,  "Invalid FW version for %{private,mask.hash}s %{public}s",  (uint8_t *)v70,  0x20u);
        uint64_t v85 = v90;
        swift_arrayDestroy(v90, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v85, -1LL, -1LL);
        swift_slowDealloc(v70, -1LL, -1LL);
        sub_1000182F0(v91, v29);
      }

      else
      {
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v100);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v96);
        sub_1000182F0(v91, v29);
      }

      goto LABEL_10;
    }

    __int128 v51 = v48;
    uint64_t v52 = v49;
    uint64_t v92 = v8;
    uint64_t v93 = a2;
    uint64_t v54 = a1[3];
    uint64_t v53 = a1[4];
    sub_100012ED8(a1, v54);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v53 + 8) + 8LL) + 32LL))(v54);
    LOBYTE(v36) = 0;
    LOBYTE(a2) = 0;
    uint64_t v55 = v7[10];
    __int128 v56 = &v10[v7[15]];
    *(void *)__int128 v56 = 0LL;
    *((void *)v56 + 1) = 0xE000000000000000LL;
    __int128 v57 = &v10[v55];
    uint64_t v58 = &v10[v7[5]];
    *(void *)uint64_t v58 = v91;
    *((void *)v58 + 1) = v29;
    *(void *)__int128 v57 = v51;
    *((void *)v57 + 1) = v52;
    v57[16] = 0;
    uint64_t v42 = &v10[v7[8]];
    *(_WORD *)uint64_t v42 = 0;
  }

  else
  {
    __int16 v35 = v34;
    uint64_t v92 = v8;
    uint64_t v93 = a2;
    unint64_t v36 = v34 >> 16;
    a2 = v34 >> 24;
    uint64_t v38 = a1[3];
    uint64_t v37 = a1[4];
    sub_100012ED8(a1, v38);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v37 + 8) + 8LL) + 32LL))(v38);
    uint64_t v39 = &v10[v7[10]];
    *(void *)uint64_t v39 = 0LL;
    *((void *)v39 + 1) = 0LL;
    v39[16] = 1;
    uint64_t v40 = &v10[v7[15]];
    *(void *)uint64_t v40 = 0LL;
    *((void *)v40 + 1) = 0xE000000000000000LL;
    uint64_t v41 = &v10[v7[5]];
    *(void *)uint64_t v41 = v91;
    *((void *)v41 + 1) = v29;
    uint64_t v42 = &v10[v7[8]];
    *(_WORD *)uint64_t v42 = v35;
  }

  void v42[2] = v36;
  v42[3] = a2;
  uint64_t v59 = &v10[v7[7]];
  *(void *)uint64_t v59 = 0LL;
  *((void *)v59 + 1) = 0LL;
  uint64_t v60 = &v10[v7[6]];
  *(void *)uint64_t v60 = 0LL;
  *((void *)v60 + 1) = 0LL;
  uint64_t v61 = &v10[v7[9]];
  *(_DWORD *)uint64_t v61 = 0;
  v61[4] = 1;
  char v62 = &v10[v7[11]];
  *(void *)char v62 = 0LL;
  v62[8] = 1;
  uint64_t v63 = &v10[v7[12]];
  *(_DWORD *)uint64_t v63 = 0;
  _BYTE v63[4] = 1;
  v10[v7[13]] = 4;
  v10[v7[14]] = 5;
  uint64_t v64 = v93;
  sub_1005CFBF4((uint64_t)v10, v93);
  ((void (*)(uint64_t, void, uint64_t, int *))v92[7])(v64, 0LL, 1LL, v7);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_1005CFBF4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccessoryMetadata(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1005CFC38(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) == 0)
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_10001736C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = *(int *)(a3 + 20);
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL))(v10, v11, v12);
    uint64_t v13 = (char *)a2 + *(int *)(a3 + 24);
    uint64_t v14 = type metadata accessor for StableIdentifier(0LL);
    uint64_t v15 = (char *)&loc_1005CFCFC + 4 * byte_10080AED0[swift_getEnumCaseMultiPayload(v13, v14)];
    __asm { BR              X10 }
  }

  uint64_t v16 = *a2;
  *a1 = *a2;
  unint64_t v17 = v16 + ((v5 + 16LL) & ~(unint64_t)v5);
  swift_retain();
  return v17;
}

uint64_t sub_1005D0068(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[5];
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  v7(v4, v5);
  uint64_t v8 = a1 + a2[6];
  uint64_t v9 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v8, v9))
  {
    case 0u:
    case 4u:
      goto LABEL_5;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2u:
      v7(v8, v5);
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v7(v8, v5);
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v10 = a1 + a2[7];
  uint64_t v11 = a1 + a2[8];
  uint64_t v12 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(v11, v12);
  sub_100016F9C(*(void *)(a1 + a2[9]), *(void *)(a1 + a2[9] + 8));
  uint64_t v13 = (uint64_t *)(a1 + a2[10]);
  unint64_t v14 = v13[1];
  if (v14 >> 60 != 15) {
    sub_100016F9C(*v13, v14);
  }
  uint64_t v15 = (uint64_t *)(a1 + a2[11]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_100016F9C(*v15, v16);
  }
  sub_100016F9C(*(void *)(a1 + a2[12]), *(void *)(a1 + a2[12] + 8));
  sub_100016F9C(*(void *)(a1 + a2[13]), *(void *)(a1 + a2[13] + 8));
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

void sub_1005D02B4(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
  uint64_t v12 = (char *)a2 + *(int *)(a3 + 24);
  uint64_t v13 = type metadata accessor for StableIdentifier(0LL);
  unint64_t v14 = (char *)sub_1005D036C + 4 * byte_10080AEDA[swift_getEnumCaseMultiPayload(v12, v13)];
  __asm { BR              X10 }

uint64_t sub_1005D036C()
{
  uint64_t v9 = v7[1];
  *uint64_t v4 = *v7;
  v4[1] = v9;
  swift_bridgeObjectRetain(v9);
  swift_storeEnumTagMultiPayload(v4, v5, v6);
  uint64_t v10 = v2[7];
  uint64_t v11 = (void *)(v0 + v10);
  uint64_t v12 = (const void *)(v1 + v10);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48))(v1 + v10, 1LL, v3))
  {
    uint64_t v13 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v54(v11, v12, v3);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v8 + 56))(v11, 0LL, 1LL, v3);
  }

  uint64_t v14 = v2[8];
  uint64_t v15 = v0 + v14;
  uint64_t v16 = v1 + v14;
  uint64_t v17 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16LL))(v15, v16, v17);
  uint64_t v18 = v2[9];
  uint64_t v19 = (uint64_t *)(v0 + v18);
  uint64_t v20 = (uint64_t *)(v1 + v18);
  uint64_t v21 = *v20;
  unint64_t v22 = v20[1];
  sub_10001736C(*v20, v22);
  *uint64_t v19 = v21;
  v19[1] = v22;
  uint64_t v23 = v2[10];
  uint64_t v24 = v0 + v23;
  unint64_t v25 = (uint64_t *)(v1 + v23);
  unint64_t v26 = v25[1];
  if (v26 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
  }

  else
  {
    uint64_t v27 = *v25;
    sub_10001736C(*v25, v25[1]);
    *(void *)uint64_t v24 = v27;
    *(void *)(v24 + 8) = v26;
  }

  uint64_t v28 = v2[11];
  uint64_t v29 = v0 + v28;
  uint64_t v30 = (uint64_t *)(v1 + v28);
  unint64_t v31 = v30[1];
  if (v31 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v29 = *(_OWORD *)v30;
  }

  else
  {
    uint64_t v32 = *v30;
    sub_10001736C(*v30, v30[1]);
    *(void *)uint64_t v29 = v32;
    *(void *)(v29 + 8) = v31;
  }

  uint64_t v33 = v2[12];
  unint64_t v34 = (uint64_t *)(v0 + v33);
  __int16 v35 = (uint64_t *)(v1 + v33);
  uint64_t v36 = *v35;
  unint64_t v37 = v35[1];
  sub_10001736C(*v35, v37);
  *unint64_t v34 = v36;
  v34[1] = v37;
  uint64_t v38 = v2[13];
  uint64_t v39 = (uint64_t *)(v0 + v38);
  uint64_t v40 = (uint64_t *)(v1 + v38);
  uint64_t v41 = *v40;
  unint64_t v42 = v40[1];
  sub_10001736C(*v40, v42);
  *uint64_t v39 = v41;
  v39[1] = v42;
  uint64_t v43 = v2[14];
  uint64_t v44 = v2[15];
  uint64_t v45 = (void *)(v0 + v43);
  uint64_t v46 = (void *)(v1 + v43);
  uint64_t v47 = v46[1];
  *uint64_t v45 = *v46;
  v45[1] = v47;
  unint64_t v48 = (void *)(v0 + v44);
  uint64_t v49 = (void *)(v1 + v44);
  uint64_t v50 = v49[1];
  *unint64_t v48 = *v49;
  v48[1] = v50;
  uint64_t v51 = v2[17];
  *(void *)(v0 + v2[16]) = *(void *)(v1 + v2[16]);
  *(void *)(v0 + v51) = *(void *)(v1 + v51);
  uint64_t v52 = v2[19];
  *(_BYTE *)(v0 + v2[18]) = *(_BYTE *)(v1 + v2[18]);
  *(_BYTE *)(v0 + v52) = *(_BYTE *)(v1 + v52);
  *(_BYTE *)(v0 + v2[20]) = *(_BYTE *)(v1 + v2[20]);
  swift_bridgeObjectRetain(v47);
  swift_bridgeObjectRetain(v50);
  return v0;
}

uint64_t *sub_1005D06B8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100016F9C(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  unint64_t v76 = *(void (**)(char *, char *, uint64_t))(v14 + 24);
  v76(v11, v12, v13);
  if (a1 != a2)
  {
    uint64_t v15 = a3[6];
    uint64_t v16 = (char *)a2 + v15;
    sub_100018C68((uint64_t)a1 + v15, type metadata accessor for StableIdentifier);
    uint64_t v17 = type metadata accessor for StableIdentifier(0LL);
    uint64_t v18 = (char *)&loc_1005D0790 + 4 * byte_10080AEDF[swift_getEnumCaseMultiPayload(v16, v17)];
    __asm { BR              X10 }
  }

  uint64_t v19 = a3[7];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = (char *)a2 + v19;
  unint64_t v22 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v14 + 48);
  int v23 = v22((char *)a1 + v19, 1LL, v13);
  int v24 = v22(v21, 1LL, v13);
  if (v23)
  {
    if (!v24)
    {
      (*(void (**)(char *, char *, uint64_t))(v14 + 16))(v20, v21, v13);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v14 + 56))(v20, 0LL, 1LL, v13);
      goto LABEL_9;
    }

    goto LABEL_8;
  }

  if (v24)
  {
    (*(void (**)(char *, uint64_t))(v14 + 8))(v20, v13);
LABEL_8:
    uint64_t v25 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v20, v21, *(void *)(*(void *)(v25 - 8) + 64LL));
    goto LABEL_9;
  }

  v76(v20, v21, v13);
LABEL_9:
  uint64_t v26 = a3[8];
  uint64_t v27 = (char *)a1 + v26;
  uint64_t v28 = (char *)a2 + v26;
  uint64_t v29 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v29 - 8) + 24LL))(v27, v28, v29);
  uint64_t v30 = a3[9];
  unint64_t v31 = (uint64_t *)((char *)a1 + v30);
  uint64_t v32 = (uint64_t *)((char *)a2 + v30);
  uint64_t v33 = *v32;
  unint64_t v34 = v32[1];
  sub_10001736C(*v32, v34);
  uint64_t v35 = *v31;
  unint64_t v36 = v31[1];
  *unint64_t v31 = v33;
  v31[1] = v34;
  sub_100016F9C(v35, v36);
  uint64_t v37 = a3[10];
  uint64_t v38 = (uint64_t *)((char *)a1 + v37);
  uint64_t v39 = (uint64_t *)((char *)a2 + v37);
  unint64_t v40 = *(uint64_t *)((char *)a2 + v37 + 8);
  if (*(unint64_t *)((char *)a1 + v37 + 8) >> 60 == 15)
  {
    if (v40 >> 60 != 15)
    {
      uint64_t v41 = *v39;
      sub_10001736C(v41, v40);
      *uint64_t v38 = v41;
      v38[1] = v40;
      goto LABEL_16;
    }

    goto LABEL_14;
  }

  if (v40 >> 60 == 15)
  {
    sub_1000F79D0((uint64_t)v38);
LABEL_14:
    *(_OWORD *)uint64_t v38 = *(_OWORD *)v39;
    goto LABEL_16;
  }

  uint64_t v42 = *v39;
  sub_10001736C(v42, v40);
  uint64_t v43 = *v38;
  unint64_t v44 = v38[1];
  *uint64_t v38 = v42;
  v38[1] = v40;
  sub_100016F9C(v43, v44);
LABEL_16:
  uint64_t v45 = a3[11];
  uint64_t v46 = (uint64_t *)((char *)a1 + v45);
  uint64_t v47 = (uint64_t *)((char *)a2 + v45);
  unint64_t v48 = *(uint64_t *)((char *)a2 + v45 + 8);
  if (*(unint64_t *)((char *)a1 + v45 + 8) >> 60 != 15)
  {
    if (v48 >> 60 != 15)
    {
      uint64_t v50 = *v47;
      sub_10001736C(v50, v48);
      uint64_t v51 = *v46;
      unint64_t v52 = v46[1];
      *uint64_t v46 = v50;
      v46[1] = v48;
      sub_100016F9C(v51, v52);
      goto LABEL_23;
    }

    sub_1000F79D0((uint64_t)v46);
    goto LABEL_21;
  }

  if (v48 >> 60 == 15)
  {
LABEL_21:
    *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
    goto LABEL_23;
  }

  uint64_t v49 = *v47;
  sub_10001736C(v49, v48);
  *uint64_t v46 = v49;
  v46[1] = v48;
LABEL_23:
  uint64_t v53 = a3[12];
  uint64_t v54 = (uint64_t *)((char *)a1 + v53);
  uint64_t v55 = (uint64_t *)((char *)a2 + v53);
  uint64_t v56 = *v55;
  unint64_t v57 = v55[1];
  sub_10001736C(*v55, v57);
  uint64_t v58 = *v54;
  unint64_t v59 = v54[1];
  *uint64_t v54 = v56;
  v54[1] = v57;
  sub_100016F9C(v58, v59);
  uint64_t v60 = a3[13];
  uint64_t v61 = (uint64_t *)((char *)a1 + v60);
  char v62 = (uint64_t *)((char *)a2 + v60);
  uint64_t v63 = *v62;
  unint64_t v64 = v62[1];
  sub_10001736C(*v62, v64);
  uint64_t v65 = *v61;
  unint64_t v66 = v61[1];
  *uint64_t v61 = v63;
  v61[1] = v64;
  sub_100016F9C(v65, v66);
  uint64_t v67 = a3[14];
  os_log_type_t v68 = (uint64_t *)((char *)a1 + v67);
  int v69 = (uint64_t *)((char *)a2 + v67);
  *os_log_type_t v68 = *v69;
  uint64_t v70 = v69[1];
  v68[1] = v70;
  swift_bridgeObjectRetain(v70);
  swift_bridgeObjectRelease();
  uint64_t v71 = a3[15];
  uint64_t v72 = (uint64_t *)((char *)a1 + v71);
  unint64_t v73 = (uint64_t *)((char *)a2 + v71);
  *uint64_t v72 = *v73;
  uint64_t v74 = v73[1];
  v72[1] = v74;
  swift_bridgeObjectRetain(v74);
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)a1 + a3[16]) = *(uint64_t *)((char *)a2 + a3[16]);
  *(uint64_t *)((char *)a1 + a3[17]) = *(uint64_t *)((char *)a2 + a3[17]);
  *((_BYTE *)a1 + a3[18]) = *((_BYTE *)a2 + a3[18]);
  *((_BYTE *)a1 + a3[19]) = *((_BYTE *)a2 + a3[19]);
  *((_BYTE *)a1 + a3[20]) = *((_BYTE *)a2 + a3[20]);
  return a1;
}

_OWORD *sub_1005D0C50(_OWORD *a1, char *a2, int *a3)
{
  *a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v11(v7, v8, v9);
  uint64_t v12 = a3[6];
  uint64_t v13 = (char *)a1 + v12;
  uint64_t v14 = &a2[v12];
  uint64_t v15 = type metadata accessor for StableIdentifier(0LL);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v14, v15);
  if (EnumCaseMultiPayload == 3)
  {
    v11(v13, v14, v9);
    uint64_t v18 = (int *)sub_100004AEC((uint64_t *)&unk_1009AF840);
    *(_OWORD *)&v13[v18[12]] = *(_OWORD *)&v14[v18[12]];
    *(_OWORD *)&v13[v18[16]] = *(_OWORD *)&v14[v18[16]];
    *(_OWORD *)&v13[v18[20]] = *(_OWORD *)&v14[v18[20]];
    v13[v18[24]] = v14[v18[24]];
    swift_storeEnumTagMultiPayload(v13, v15, 3LL);
  }

  else if (EnumCaseMultiPayload == 2)
  {
    v11(v13, v14, v9);
    uint64_t v17 = (int *)sub_100004AEC((uint64_t *)&unk_1009B0520);
    *(_OWORD *)&v13[v17[12]] = *(_OWORD *)&v14[v17[12]];
    *(_OWORD *)&v13[v17[16]] = *(_OWORD *)&v14[v17[16]];
    *(_OWORD *)&v13[v17[20]] = *(_OWORD *)&v14[v17[20]];
    *(_WORD *)&v13[v17[24]] = *(_WORD *)&v14[v17[24]];
    *(_OWORD *)&v13[v17[28]] = *(_OWORD *)&v14[v17[28]];
    swift_storeEnumTagMultiPayload(v13, v15, 2LL);
  }

  else
  {
    memcpy(v13, v14, *(void *)(*(void *)(v15 - 8) + 64LL));
  }

  uint64_t v19 = a3[7];
  uint64_t v20 = (char *)a1 + v19;
  uint64_t v21 = &a2[v19];
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(&a2[v19], 1LL, v9))
  {
    uint64_t v22 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    v11(v20, v21, v9);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v20, 0LL, 1LL, v9);
  }

  uint64_t v23 = a3[8];
  int v24 = (char *)a1 + v23;
  uint64_t v25 = &a2[v23];
  uint64_t v26 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v26 - 8) + 32LL))(v24, v25, v26);
  uint64_t v27 = a3[10];
  *(_OWORD *)((char *)a1 + a3[9]) = *(_OWORD *)&a2[a3[9]];
  *(_OWORD *)((char *)a1 + v27) = *(_OWORD *)&a2[v27];
  uint64_t v28 = a3[12];
  *(_OWORD *)((char *)a1 + a3[11]) = *(_OWORD *)&a2[a3[11]];
  *(_OWORD *)((char *)a1 + v28) = *(_OWORD *)&a2[v28];
  uint64_t v29 = a3[14];
  *(_OWORD *)((char *)a1 + a3[13]) = *(_OWORD *)&a2[a3[13]];
  *(_OWORD *)((char *)a1 + v29) = *(_OWORD *)&a2[v29];
  uint64_t v30 = a3[16];
  *(_OWORD *)((char *)a1 + a3[15]) = *(_OWORD *)&a2[a3[15]];
  *(void *)((char *)a1 + v30) = *(void *)&a2[v30];
  uint64_t v31 = a3[18];
  *(void *)((char *)a1 + a3[17]) = *(void *)&a2[a3[17]];
  *((_BYTE *)a1 + v31) = a2[v31];
  uint64_t v32 = a3[20];
  *((_BYTE *)a1 + a3[19]) = a2[a3[19]];
  *((_BYTE *)a1 + v32) = a2[v32];
  return a1;
}

uint64_t *sub_1005D0EF8(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016F9C(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(char *, char *, uint64_t))(v12 + 40);
  v13(v9, v10, v11);
  if (a1 != a2)
  {
    uint64_t v14 = a3[6];
    uint64_t v15 = (char *)a1 + v14;
    uint64_t v16 = (char *)a2 + v14;
    sub_100018C68((uint64_t)a1 + v14, type metadata accessor for StableIdentifier);
    uint64_t v17 = type metadata accessor for StableIdentifier(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v17);
    if (EnumCaseMultiPayload == 3)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 32))(v15, v16, v11);
      uint64_t v20 = (int *)sub_100004AEC((uint64_t *)&unk_1009AF840);
      *(_OWORD *)&v15[v20[12]] = *(_OWORD *)&v16[v20[12]];
      *(_OWORD *)&v15[v20[16]] = *(_OWORD *)&v16[v20[16]];
      *(_OWORD *)&v15[v20[20]] = *(_OWORD *)&v16[v20[20]];
      v15[v20[24]] = v16[v20[24]];
      swift_storeEnumTagMultiPayload(v15, v17, 3LL);
    }

    else if (EnumCaseMultiPayload == 2)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v12 + 32))(v15, v16, v11);
      uint64_t v19 = (int *)sub_100004AEC((uint64_t *)&unk_1009B0520);
      *(_OWORD *)&v15[v19[12]] = *(_OWORD *)&v16[v19[12]];
      *(_OWORD *)&v15[v19[16]] = *(_OWORD *)&v16[v19[16]];
      *(_OWORD *)&v15[v19[20]] = *(_OWORD *)&v16[v19[20]];
      *(_WORD *)&v15[v19[24]] = *(_WORD *)&v16[v19[24]];
      *(_OWORD *)&v15[v19[28]] = *(_OWORD *)&v16[v19[28]];
      swift_storeEnumTagMultiPayload(v15, v17, 2LL);
    }

    else
    {
      memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64LL));
    }
  }

  uint64_t v21 = a3[7];
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  int v24 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 48);
  int v25 = v24((char *)a1 + v21, 1LL, v11);
  int v26 = v24(v23, 1LL, v11);
  if (v25)
  {
    if (!v26)
    {
      (*(void (**)(char *, char *, uint64_t))(v12 + 32))(v22, v23, v11);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v12 + 56))(v22, 0LL, 1LL, v11);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v26)
  {
    (*(void (**)(char *, uint64_t))(v12 + 8))(v22, v11);
LABEL_12:
    uint64_t v27 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v22, v23, *(void *)(*(void *)(v27 - 8) + 64LL));
    goto LABEL_13;
  }

  v13(v22, v23, v11);
LABEL_13:
  uint64_t v28 = a3[8];
  uint64_t v29 = (char *)a1 + v28;
  uint64_t v30 = (char *)a2 + v28;
  uint64_t v31 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v31 - 8) + 40LL))(v29, v30, v31);
  uint64_t v32 = a3[9];
  uint64_t v33 = *(uint64_t *)((char *)a1 + v32);
  unint64_t v34 = *(uint64_t *)((char *)a1 + v32 + 8);
  *(_OWORD *)((char *)a1 + v32) = *(_OWORD *)((char *)a2 + v32);
  sub_100016F9C(v33, v34);
  uint64_t v35 = a3[10];
  uint64_t v36 = (uint64_t)a1 + v35;
  uint64_t v37 = (char *)a2 + v35;
  unint64_t v38 = *(uint64_t *)((char *)a1 + v35 + 8);
  if (v38 >> 60 == 15)
  {
LABEL_16:
    *(_OWORD *)uint64_t v36 = *(_OWORD *)v37;
    goto LABEL_18;
  }

  unint64_t v39 = *((void *)v37 + 1);
  if (v39 >> 60 == 15)
  {
    sub_1000F79D0(v36);
    goto LABEL_16;
  }

  uint64_t v40 = *(void *)v36;
  *(void *)uint64_t v36 = *(void *)v37;
  *(void *)(v36 + 8) = v39;
  sub_100016F9C(v40, v38);
LABEL_18:
  uint64_t v41 = a3[11];
  uint64_t v42 = (uint64_t *)((char *)a1 + v41);
  uint64_t v43 = (uint64_t *)((char *)a2 + v41);
  unint64_t v44 = *(uint64_t *)((char *)a1 + v41 + 8);
  if (v44 >> 60 != 15)
  {
    unint64_t v45 = v43[1];
    if (v45 >> 60 != 15)
    {
      uint64_t v46 = *v42;
      *uint64_t v42 = *v43;
      v42[1] = v45;
      sub_100016F9C(v46, v44);
      goto LABEL_23;
    }

    sub_1000F79D0((uint64_t)v42);
  }

  *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
LABEL_23:
  uint64_t v47 = a3[12];
  uint64_t v48 = *(uint64_t *)((char *)a1 + v47);
  unint64_t v49 = *(uint64_t *)((char *)a1 + v47 + 8);
  *(_OWORD *)((char *)a1 + v47) = *(_OWORD *)((char *)a2 + v47);
  sub_100016F9C(v48, v49);
  uint64_t v50 = a3[13];
  uint64_t v51 = *(uint64_t *)((char *)a1 + v50);
  unint64_t v52 = *(uint64_t *)((char *)a1 + v50 + 8);
  *(_OWORD *)((char *)a1 + v50) = *(_OWORD *)((char *)a2 + v50);
  sub_100016F9C(v51, v52);
  uint64_t v53 = a3[14];
  uint64_t v54 = (uint64_t *)((char *)a1 + v53);
  uint64_t v55 = (uint64_t *)((char *)a2 + v53);
  uint64_t v57 = *v55;
  uint64_t v56 = v55[1];
  *uint64_t v54 = v57;
  v54[1] = v56;
  swift_bridgeObjectRelease();
  uint64_t v58 = a3[15];
  unint64_t v59 = (uint64_t *)((char *)a1 + v58);
  uint64_t v60 = (uint64_t *)((char *)a2 + v58);
  uint64_t v62 = *v60;
  uint64_t v61 = v60[1];
  *unint64_t v59 = v62;
  v59[1] = v61;
  swift_bridgeObjectRelease();
  uint64_t v63 = a3[17];
  *(uint64_t *)((char *)a1 + a3[16]) = *(uint64_t *)((char *)a2 + a3[16]);
  *(uint64_t *)((char *)a1 + v63) = *(uint64_t *)((char *)a2 + v63);
  uint64_t v64 = a3[19];
  *((_BYTE *)a1 + a3[18]) = *((_BYTE *)a2 + a3[18]);
  *((_BYTE *)a1 + v64) = *((_BYTE *)a2 + v64);
  *((_BYTE *)a1 + a3[20]) = *((_BYTE *)a2 + a3[20]);
  return a1;
}

uint64_t sub_1005D12EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005D12F8);
}

uint64_t sub_1005D12F8(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = a3[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  uint64_t v10 = type metadata accessor for StableIdentifier(0LL);
  uint64_t v7 = *(void *)(v10 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v10;
    uint64_t v9 = a3[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  uint64_t v11 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v7 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v9 = a3[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v12 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v12;
    uint64_t v9 = a3[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + v9, a2, v8);
  }

  unint64_t v14 = *(void *)(a1 + a3[14] + 8);
  if (v14 >= 0xFFFFFFFF) {
    LODWORD(v14) = -1;
  }
  return (v14 + 1);
}

uint64_t sub_1005D13EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005D13F8);
}

uint64_t sub_1005D13F8(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = a4[5];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }

  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  uint64_t v9 = *(void *)(v12 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v12;
    uint64_t v11 = a4[6];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }

  uint64_t v13 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v9 = *(void *)(v13 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v13;
    uint64_t v11 = a4[7];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }

  uint64_t result = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    uint64_t v11 = a4[8];
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1 + v11, a2, a2, v10);
  }

  *(void *)(a1 + a4[14] + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for OwnedBeaconRecord(uint64_t a1)
{
  uint64_t result = qword_1009B52C0;
  if (!qword_1009B52C0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for OwnedBeaconRecord);
  }
  return result;
}

void sub_1005D1524(uint64_t a1)
{
  v10[0] = &unk_10080AF58;
  uint64_t v2 = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v10[1] = *(void *)(v2 - 8) + 64LL;
    uint64_t v4 = type metadata accessor for StableIdentifier(319LL);
    if (v5 <= 0x3F)
    {
      v10[2] = *(void *)(v4 - 8) + 64LL;
      sub_1004A3F40(319LL);
      if (v7 <= 0x3F)
      {
        v10[3] = *(void *)(v6 - 8) + 64LL;
        uint64_t v8 = type metadata accessor for Date(319LL);
        if (v9 <= 0x3F)
        {
          v10[4] = *(void *)(v8 - 8) + 64LL;
          v10[5] = &unk_10080AF58;
          v10[6] = &unk_10080AF70;
          v10[7] = &unk_10080AF70;
          v10[8] = &unk_10080AF58;
          void v10[9] = &unk_10080AF58;
          void v10[10] = &unk_10080AF88;
          v10[11] = &unk_10080AF88;
          v10[12] = (char *)&value witness table for Builtin.Int64 + 64;
          v10[13] = (char *)&value witness table for Builtin.Int64 + 64;
          v10[14] = &unk_10080AFA0;
          v10[15] = &unk_10080AFB8;
          v10[16] = &unk_10080AFD0;
          swift_initStructMetadata(a1, 256LL, 17LL, v10, a1 + 16);
        }
      }
    }
  }

void sub_1005D1638(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v134 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v157 = v7;
  uint64_t v158 = v8;
  __chkstk_darwin(v7);
  uint64_t v156 = (char *)&v134 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009B53F0);
  __chkstk_darwin(v10);
  uint64_t v12 = (Swift::String *)((char *)&v134 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v13 = type metadata accessor for StableIdentifier(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v134 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v18 = __chkstk_darwin(v17);
  unint64_t v152 = (char *)&v134 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v21 = (char *)&v134 - v20;
  uint64_t v22 = type metadata accessor for UUID(0LL);
  uint64_t v161 = *(void *)(v22 - 8);
  uint64_t v162 = v22;
  __chkstk_darwin(v22);
  unint64_t v160 = (char *)&v134 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v154 = (int *)v24;
  uint64_t v155 = a2;
  uint64_t v153 = *(int *)(v24 + 72);
  *((_BYTE *)a2 + v153) = 3;
  uint64_t v25 = CKRecord.recordType.getter(v24);
  uint64_t v27 = v26;
  if (qword_10099B608 != -1) {
    swift_once(&qword_10099B608, sub_1005D3BF0);
  }
  if (v25 == qword_100A2AE70 && v27 == *(void *)algn_100A2AE78)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    char v28 = _stringCompareWithSmolCheck(_:_:expecting:)(v25, v27, qword_100A2AE70, *(void *)algn_100A2AE78, 0LL);
    swift_bridgeObjectRelease();
    if ((v28 & 1) == 0)
    {
      unint64_t v49 = sub_1005D7C70();
      uint64_t v37 = swift_allocError(&type metadata for OwnedBeaconRecord.OwnedBeaconRecordConversionError, v49, 0LL, 0LL);
      *uint64_t v50 = 0;
      goto LABEL_15;
    }
  }

  uint64_t v151 = v16;
  id v29 = [a1 recordID];
  id v30 = [v29 recordName];

  uint64_t v31 = static String._unconditionallyBridgeFromObjectiveC(_:)(v30);
  uint64_t v33 = v32;

  UUID.init(uuidString:)(v31, v33);
  swift_bridgeObjectRelease();
  uint64_t v35 = v161;
  uint64_t v34 = v162;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v161 + 48))(v21, 1LL, v162) == 1)
  {
    sub_100015794((uint64_t)v21, &qword_10099D8A0);
    unint64_t v36 = sub_1005D7C70();
    uint64_t v37 = swift_allocError(&type metadata for OwnedBeaconRecord.OwnedBeaconRecordConversionError, v36, 0LL, 0LL);
    *unint64_t v38 = 2;
LABEL_15:
    swift_willThrow(v37);

    return;
  }

  (*(void (**)(char *, char *, uint64_t))(v35 + 32))(v160, v21, v34);
  id v39 = [a1 encryptedValues];
  NSString v40 = String._bridgeToObjectiveC()();
  id v150 = v39;
  id v41 = [v39 objectForKeyedSubscript:v40];

  if (!v41) {
    goto LABEL_26;
  }
  unint64_t v164 = (unint64_t)v41;
  uint64_t v43 = sub_100004AEC((uint64_t *)&unk_10099D910);
  uint64_t v42 = swift_dynamicCast(&v163, &v164, v43, &type metadata for String, 6LL);
  if ((v42 & 1) == 0) {
    goto LABEL_26;
  }
  uint64_t v149 = v43;
  __int128 v44 = v163;
  unint64_t v45 = objc_autoreleasePoolPush();
  unint64_t v46 = v159;
  sub_1006DDDCC(v44, *((void **)&v44 + 1), v12);
  if (v46)
  {
    objc_autoreleasePoolPop(v45);
    __break(1u);
    return;
  }

  objc_autoreleasePoolPop(v45);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(Swift::String *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) == 1)
  {
    uint64_t v47 = &qword_1009B53F0;
    uint64_t v48 = (uint64_t)v12;
LABEL_24:
    uint64_t v42 = sub_100015794(v48, v47);
    goto LABEL_25;
  }

  sub_10002218C((uint64_t)v12, (uint64_t)v151, type metadata accessor for StableIdentifier);
  NSString v51 = String._bridgeToObjectiveC()();
  id v52 = [v150 objectForKeyedSubscript:v51];

  if (!v52)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v158 + 56))(v6, 1LL, 1LL, v157);
    goto LABEL_23;
  }

  *(void *)&__int128 v163 = v52;
  uint64_t v53 = v157;
  int v54 = swift_dynamicCast(v6, &v163, v149, v157, 6LL);
  uint64_t v55 = v158;
  (*(void (**)(char *, void, uint64_t, uint64_t))(v158 + 56))(v6, v54 ^ 1u, 1LL, v53);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v55 + 48))(v6, 1LL, v53) == 1)
  {
LABEL_23:
    sub_100018C68((uint64_t)v151, type metadata accessor for StableIdentifier);
    uint64_t v47 = (uint64_t *)&unk_10099D720;
    uint64_t v48 = (uint64_t)v6;
    goto LABEL_24;
  }

  uint64_t v56 = v156;
  (*(void (**)(char *, char *, uint64_t))(v55 + 32))(v156, v6, v53);
  NSString v57 = String._bridgeToObjectiveC()();
  id v58 = [v150 objectForKeyedSubscript:v57];

  uint64_t v59 = (uint64_t)v151;
  if (!v58
    || (unint64_t v164 = (unint64_t)v58, (swift_dynamicCast(&v163, &v164, v149, &type metadata for Data, 6LL) & 1) == 0))
  {
    (*(void (**)(char *, uint64_t))(v55 + 8))(v56, v53);
    uint64_t v42 = sub_100018C68(v59, type metadata accessor for StableIdentifier);
LABEL_25:
    uint64_t v35 = v161;
    uint64_t v34 = v162;
LABEL_26:
    uint64_t v61 = static os_log_type_t.error.getter(v42);
    uint64_t v62 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v63 = swift_allocObject(v62, 72LL, 7LL);
    *(_OWORD *)(v63 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v63 + 56) = sub_100022898(0LL, (unint64_t *)&qword_10099D920, &OBJC_CLASS___CKRecord_ptr);
    *(void *)(v63 + 64) = sub_100022738();
    *(void *)(v63 + 32) = a1;
    sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    id v64 = a1;
    uint64_t v65 = (void *)static OS_os_log.default.getter(v64);
    os_log(_:dso:log:_:_:)(v61, &_mh_execute_header, v65, "Invalid Beacon Record - %@", 26LL, 2LL, v63);
    swift_bridgeObjectRelease();

    unint64_t v66 = sub_1005D7C70();
    uint64_t v67 = swift_allocError(&type metadata for OwnedBeaconRecord.OwnedBeaconRecordConversionError, v66, 0LL, 0LL);
    *os_log_type_t v68 = 3;
    swift_willThrow(v67);
    swift_unknownObjectRelease(v150);

    (*(void (**)(char *, uint64_t))(v35 + 8))(v160, v34);
    return;
  }

  __int128 v60 = v163;
  sub_10001736C(v163, *((unint64_t *)&v163 + 1));
  sub_1001782BC(v60, *((uint64_t *)&v60 + 1));
  unint64_t v159 = *((void *)&v163 + 1);
  uint64_t v69 = v163;
  NSString v70 = String._bridgeToObjectiveC()();
  id v71 = [v150 objectForKeyedSubscript:v70];

  if (!v71)
  {
    uint64_t v76 = v69;
    unint64_t v77 = v159;
LABEL_32:
    sub_100016F9C(v76, v77);
    sub_100016F9C(v60, *((unint64_t *)&v60 + 1));
    uint64_t v35 = v161;
    uint64_t v34 = v162;
    uint64_t v78 = (uint64_t)v151;
    (*(void (**)(char *, uint64_t))(v158 + 8))(v56, v53);
    uint64_t v79 = v78;
LABEL_39:
    uint64_t v42 = sub_100018C68(v79, type metadata accessor for StableIdentifier);
    goto LABEL_26;
  }

  unint64_t v72 = v159;
  uint64_t v148 = v69;
  unint64_t v164 = (unint64_t)v71;
  if ((swift_dynamicCast(&v163, &v164, v149, &type metadata for Data, 6LL) & 1) == 0)
  {
    uint64_t v76 = v148;
    unint64_t v77 = v72;
    goto LABEL_32;
  }

  uint64_t v147 = v60;
  __int128 v73 = v163;
  sub_10001736C(v163, *((unint64_t *)&v163 + 1));
  uint64_t v74 = sub_10017D280(v73, *((unint64_t *)&v73 + 1));
  uint64_t v35 = v161;
  uint64_t v34 = v162;
  unint64_t v143 = 0LL;
  uint64_t v145 = v74;
  unint64_t v146 = v75;
  __int128 v144 = v73;
  NSString v80 = String._bridgeToObjectiveC()();
  id v81 = [v150 objectForKeyedSubscript:v80];

  if (!v81
    || (unint64_t v164 = (unint64_t)v81, (swift_dynamicCast(&v163, &v164, v149, &type metadata for Data, 6LL) & 1) == 0))
  {
    sub_100016F9C(v145, v146);
    sub_100016F9C(v148, v159);
    sub_100016F9C(v144, *((unint64_t *)&v144 + 1));
    sub_100016F9C(v147, *((unint64_t *)&v60 + 1));
    goto LABEL_38;
  }

  unint64_t v142 = *((void *)&v60 + 1);
  __int128 v82 = v163;
  sub_10001736C(v163, *((unint64_t *)&v163 + 1));
  unint64_t v141 = *((void *)&v82 + 1);
  unint64_t v83 = v143;
  uint64_t v140 = sub_10017D59C(v82, *((unint64_t *)&v82 + 1));
  unint64_t v143 = v84;
  if (v83)
  {
    sub_100016F9C(v145, v146);
    sub_100016F9C(v148, v159);
    sub_100016F9C(v82, v141);
    sub_100016F9C(v144, *((unint64_t *)&v144 + 1));
    sub_100016F9C(v147, v142);
    swift_errorRelease(v83);
LABEL_38:
    (*(void (**)(char *, uint64_t))(v158 + 8))(v56, v53);
    uint64_t v79 = (uint64_t)v151;
    goto LABEL_39;
  }

  NSString v85 = String._bridgeToObjectiveC()();
  id v86 = [v150 objectForKeyedSubscript:v85];

  if (!v86
    || (unint64_t v164 = (unint64_t)v86, (swift_dynamicCast(&v163, &v164, v149, &type metadata for String, 6LL) & 1) == 0))
  {
LABEL_53:
    sub_100016F9C(v140, v143);
    sub_100016F9C(v145, v146);
    sub_100016F9C(v148, v159);
    sub_100016F9C(v82, v141);
    sub_100016F9C(v144, *((unint64_t *)&v144 + 1));
    sub_100016F9C(v147, v142);
    (*(void (**)(char *, uint64_t))(v158 + 8))(v156, v157);
    uint64_t v42 = sub_100018C68((uint64_t)v151, type metadata accessor for StableIdentifier);
    goto LABEL_25;
  }

  uint64_t v139 = *((void *)&v163 + 1);
  uint64_t v87 = v163;
  NSString v88 = String._bridgeToObjectiveC()();
  id v89 = [v150 objectForKeyedSubscript:v88];

  if (!v89
    || (unint64_t v164 = (unint64_t)v89, (swift_dynamicCast(&v163, &v164, v149, &type metadata for String, 6LL) & 1) == 0))
  {
LABEL_52:
    swift_bridgeObjectRelease();
    goto LABEL_53;
  }

  __int128 v138 = v163;
  NSString v90 = String._bridgeToObjectiveC()();
  id v91 = [v150 objectForKeyedSubscript:v90];

  if (!v91
    || (*(void *)&__int128 v163 = v91, (swift_dynamicCast(&v164, &v163, v149, &type metadata for Int, 6LL) & 1) == 0)
    || (unint64_t v137 = v164,
        NSString v92 = String._bridgeToObjectiveC()(),
        id v93 = [v150 objectForKeyedSubscript:v92],
        v92,
        !v93)
    || (*(void *)&__int128 v163 = v93, (swift_dynamicCast(&v164, &v163, v149, &type metadata for Int, 6LL) & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_52;
  }

  unint64_t v135 = v164;
  NSString v94 = String._bridgeToObjectiveC()();
  id v95 = [v150 objectForKeyedSubscript:v94];

  else {
    unint64_t v96 = 0LL;
  }
  char v97 = sub_10079580C(v96);
  *((_BYTE *)v155 + v154[19]) = v97;
  NSString v98 = String._bridgeToObjectiveC()();
  id v99 = [v150 objectForKeyedSubscript:v98];

  if (v99
    && (*(void *)&__int128 v163 = v99, swift_dynamicCast(&v164, &v163, v149, &type metadata for Bool, 6LL)))
  {
    char v100 = v164;
  }

  else
  {
    char v100 = 0;
  }

  uint64_t v101 = v155;
  *((_BYTE *)v155 + v154[20]) = v100;
  *(void *)&__int128 v136 = objc_autoreleasePoolPush();
  id v102 = [objc_allocWithZone(NSKeyedArchiver) initRequiringSecureCoding:1];
  [a1 encodeSystemFieldsWithCoder:v102];
  [v102 finishEncoding];
  id v103 = [v102 encodedData];
  uint64_t v104 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v103);
  uint64_t v106 = v105;

  objc_autoreleasePoolPop((void *)v136);
  *uint64_t v101 = v104;
  v101[1] = v106;
  uint64_t v107 = v154;
  (*(void (**)(char *, char *, uint64_t))(v161 + 16))((char *)v101 + v154[5], v160, v162);
  sub_10001DC4C((uint64_t)v151, (uint64_t)v101 + v107[6], type metadata accessor for StableIdentifier);
  (*(void (**)(char *, char *, uint64_t))(v158 + 16))((char *)v101 + v107[8], v156, v157);
  uint64_t v108 = (uint64_t *)((char *)v101 + v107[9]);
  uint64_t v109 = v148;
  unint64_t v110 = v159;
  *uint64_t v108 = v148;
  v108[1] = v110;
  sub_10001736C(v109, v110);
  NSString v111 = String._bridgeToObjectiveC()();
  id v112 = [v150 objectForKeyedSubscript:v111];

  __int128 v136 = xmmword_1007E7660;
  if (v112)
  {
    unint64_t v164 = (unint64_t)v112;
    if ((swift_dynamicCast(&v163, &v164, v149, &type metadata for Data, 6LL) & 1) != 0)
    {
      sub_1001782BC(v163, *((uint64_t *)&v163 + 1));
      __int128 v113 = v163;
    }

    else
    {
      __int128 v113 = v136;
    }
  }

  else
  {
    __int128 v113 = v136;
  }

  *(_OWORD *)((char *)v155 + v154[10]) = v113;
  NSString v114 = String._bridgeToObjectiveC()();
  id v115 = [v150 objectForKeyedSubscript:v114];

  if (v115)
  {
    unint64_t v164 = (unint64_t)v115;
    if ((swift_dynamicCast(&v163, &v164, v149, &type metadata for Data, 6LL) & 1) != 0)
    {
      sub_1001782BC(v163, *((uint64_t *)&v163 + 1));
      __int128 v136 = v163;
    }
  }

  uint64_t v117 = v154;
  uint64_t v116 = v155;
  *(_OWORD *)((char *)v155 + v154[11]) = v136;
  uint64_t v118 = (void *)((char *)v116 + v117[12]);
  uint64_t v119 = v145;
  unint64_t v120 = v146;
  void *v118 = v145;
  v118[1] = v120;
  unsigned int v121 = (void *)((char *)v116 + v117[13]);
  uint64_t v122 = v140;
  unint64_t v123 = v143;
  *unsigned int v121 = v140;
  v121[1] = v123;
  uint64_t v124 = (void *)((char *)v116 + v117[14]);
  uint64_t v125 = v139;
  void *v124 = v87;
  v124[1] = v125;
  *(_OWORD *)((char *)v116 + v117[15]) = v138;
  *(void *)((char *)v116 + v117[16]) = v137;
  *(void *)((char *)v116 + v117[17]) = v135;
  sub_10001736C(v119, v120);
  sub_10001736C(v122, v123);
  NSString v126 = String._bridgeToObjectiveC()();
  id v127 = [v150 objectForKeyedSubscript:v126];

  if (v127 && (*(void *)&__int128 v163 = v127, (swift_dynamicCast(&v164, &v163, v149, &type metadata for Int, 6LL) & 1) != 0))
  {
    char v128 = v164;
    if (v164 >= 3) {
      char v128 = 3;
    }
  }

  else
  {
    char v128 = 3;
  }

  *((_BYTE *)v155 + v153) = v128;
  NSString v129 = String._bridgeToObjectiveC()();
  id v130 = [v150 objectForKeyedSubscript:v129];

  if (v130
    && (unint64_t v164 = (unint64_t)v130, (swift_dynamicCast(&v163, &v164, v149, &type metadata for String, 6LL) & 1) != 0))
  {
    uint64_t v131 = (uint64_t)v152;
    UUID.init(uuidString:)(v163, *((void *)&v163 + 1));
    swift_unknownObjectRelease(v150);

    swift_bridgeObjectRelease();
    sub_100016F9C(v140, v143);
    sub_100016F9C(v145, v146);
    sub_100016F9C(v148, v159);
    sub_100016F9C(v82, v141);
    sub_100016F9C(v144, *((unint64_t *)&v144 + 1));
    sub_100016F9C(v147, v142);
    (*(void (**)(char *, uint64_t))(v158 + 8))(v156, v157);
    sub_100018C68((uint64_t)v151, type metadata accessor for StableIdentifier);
    (*(void (**)(char *, uint64_t))(v161 + 8))(v160, v162);
    sub_1005D7BA0(v131, (uint64_t)v155 + v154[7]);
  }

  else
  {
    swift_unknownObjectRelease(v150);

    sub_100016F9C(v140, v143);
    sub_100016F9C(v145, v146);
    sub_100016F9C(v148, v159);
    sub_100016F9C(v82, v141);
    sub_100016F9C(v144, *((unint64_t *)&v144 + 1));
    sub_100016F9C(v147, v142);
    (*(void (**)(char *, uint64_t))(v158 + 8))(v156, v157);
    sub_100018C68((uint64_t)v151, type metadata accessor for StableIdentifier);
    uint64_t v132 = v161;
    uint64_t v133 = v162;
    (*(void (**)(char *, uint64_t))(v161 + 8))(v160, v162);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v132 + 56))((char *)v155 + v154[7], 1LL, 1LL, v133);
  }

uint64_t sub_1005D2984()
{
  uint64_t v1 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v1);
  unint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  sub_10001DC4C(v0 + v4[6], (uint64_t)v3, type metadata accessor for StableIdentifier);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v3, v1);
  if (EnumCaseMultiPayload == 3)
  {
    sub_100004AEC((uint64_t *)&unk_1009AF840);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }

  if (EnumCaseMultiPayload == 2)
  {
    sub_100004AEC((uint64_t *)&unk_1009B0520);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    uint64_t v6 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8LL))(v3, v6);
    return sub_1000F5F2C(*(void *)(v0 + v4[16]), *(void *)(v0 + v4[17]));
  }

  sub_100018C68((uint64_t)v3, type metadata accessor for StableIdentifier);
  return 0LL;
}

uint64_t sub_1005D2AFC()
{
  v1[27] = v0;
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord(0LL);
  v1[28] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[29] = v3;
  uint64_t v4 = *(void *)(v3 + 64);
  v1[30] = v4;
  v1[31] = swift_task_alloc((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1005D2B60, 0LL, 0LL);
}

uint64_t sub_1005D2B60()
{
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  *(void *)(v0 + 200) = 0x7365547265646E75LL;
  *(void *)(v0 + 208) = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)( (void *)(v0 + 304),  v0 + 200,  sub_10000A71C,  0LL,  &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v0 + 304) & 1) != 0)
  {
    char v1 = 1;
LABEL_16:
    swift_task_dealloc(*(void *)(v0 + 248));
    return (*(uint64_t (**)(void))(v0 + 8))(v1 & 1);
  }

  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  *(void *)(v0 + 80) = My;
  uint64_t v3 = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  *(void *)(v0 + 88) = v3;
  uint64_t v4 = sub_10000A7C8((void *)(v0 + 56));
  uint64_t v5 = *(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL);
  v5(v4, enum case for Feature.FindMy.managedCBPeripheral(_:), My);
  char v6 = isFeatureEnabled(_:)(v0 + 56);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
  if ((v6 & 1) == 0) {
    goto LABEL_15;
  }
  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  uint64_t v7 = (void *)qword_100A2AF38;
  id v8 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v9 = [v8 isInternalBuild];

  if (v9)
  {
    NSString v10 = String._bridgeToObjectiveC()();
    unsigned int v11 = [v7 BOOLForKey:v10];

    if (v11)
    {
      char v12 = sub_1006DDC00();
LABEL_13:
      char v1 = v12;
      goto LABEL_16;
    }
  }

  *(void *)(v0 + 120) = My;
  *(void *)(v0 + 128) = v3;
  uint64_t v13 = sub_10000A7C8((void *)(v0 + 96));
  v5(v13, enum case for Feature.FindMy.spPlaySoundAll(_:), My);
  char v14 = isFeatureEnabled(_:)(v0 + 96);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 96));
  if ((v14 & 1) != 0)
  {
    char v12 = sub_1005D38B0();
    goto LABEL_13;
  }

  *(void *)(v0 + 256) = sub_1005D2984();
  *(void *)(v0 + 264) = v15;
  if (v15 >> 60 == 15)
  {
LABEL_15:
    char v1 = 0;
    goto LABEL_16;
  }

  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 176, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 136, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 160))
  {
    sub_100012EC0((__int128 *)(v0 + 136), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v18 = (uint64_t (*)(void))((char *)&dword_10099C8C0 + dword_10099C8C0);
    uint64_t v17 = (void *)swift_task_alloc(unk_10099C8C4);
    *(void *)(v0 + 272) = v17;
    *uint64_t v17 = v0;
    v17[1] = sub_1005D2EA8;
    return v18();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1005D2EA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 272LL);
  *(void *)(*(void *)v1 + 28Hasher.init(_seed:)(v1, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1005D2F04, 0LL, 0LL);
}

uint64_t sub_1005D2F04()
{
  uint64_t v1 = (void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 280);
  if (v2)
  {
    uint64_t v4 = *(void *)(v0 + 240);
    uint64_t v3 = *(void *)(v0 + 248);
    uint64_t v5 = *(void *)(v0 + 232);
    uint64_t v6 = *(void *)(v0 + 216);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    sub_10001DC4C(v6, v3, type metadata accessor for OwnedBeaconRecord);
    uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
    uint64_t v8 = (v7 + 24) & ~v7;
    uint64_t v9 = swift_allocObject(&unk_100968490, v8 + v4, v7 | 7);
    *(void *)(v0 + 288) = v9;
    *(void *)(v9 + swift_weakDestroy(v0 + 16) = v2;
    sub_10002218C(v3, v9 + v8, type metadata accessor for OwnedBeaconRecord);
    uint64_t v10 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    unsigned int v11 = (void *)swift_task_alloc(v10);
    *(void *)(v0 + 296) = v11;
    uint64_t v12 = sub_100004AEC(&qword_1009A6E20);
    *unsigned int v11 = v0;
    v11[1] = sub_1005D3058;
    return unsafeBlocking<A>(_:)(v0 + 305, sub_1005D7424, v9, v12);
  }

  else
  {
    uint64_t v14 = *(void *)(v0 + 256);
    unint64_t v15 = *(void *)(v0 + 264);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    BOOL v16 = sub_1005E2400(v14, v15);
    sub_1000182F0(v14, v15);
    swift_task_dealloc(*(void *)(v0 + 248));
    return (*(uint64_t (**)(BOOL))(v0 + 8))(v16);
  }

uint64_t sub_1005D3058()
{
  return swift_task_switch(sub_1005D30B4, 0LL, 0LL);
}

uint64_t sub_1005D30B4()
{
  int v1 = *(unsigned __int8 *)(v0 + 305);
  if (v1 != 2 && (v1 & 1) != 0)
  {
    uint64_t v5 = *(void *)(v0 + 256);
    unint64_t v6 = *(void *)(v0 + 264);
    swift_release();
    sub_1000182F0(v5, v6);
    BOOL v4 = 1;
  }

  else
  {
    uint64_t v3 = *(void *)(v0 + 256);
    unint64_t v2 = *(void *)(v0 + 264);
    BOOL v4 = sub_1005E2400(v3, v2);
    swift_release();
    sub_1000182F0(v3, v2);
  }

  swift_task_dealloc(*(void *)(v0 + 248));
  return (*(uint64_t (**)(BOOL))(v0 + 8))(v4);
}

void sub_1005D314C()
{
  uint64_t v1 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord(0LL);
  sub_10001DC4C(v0 + *(int *)(v4 + 24), (uint64_t)v3, type metadata accessor for StableIdentifier);
  uint64_t v5 = (char *)sub_1005D31E8 + 4 * byte_10080AEE4[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }

uint64_t sub_1005D31E8()
{
  return 0LL;
}

void sub_1005D3400()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconRecord(0LL);
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v7 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(v0 + *(int *)(v1 + 24), (uint64_t)v4, v5);
  uint64_t v6 = (char *)sub_1005D34C8 + 4 * byte_10080AEE9[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }

uint64_t sub_1005D34C8()
{
  return 0LL;
}

void sub_1005D36FC()
{
  uint64_t v1 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord(0LL);
  sub_10001DC4C(v0 + *(int *)(v4 + 24), (uint64_t)v3, type metadata accessor for StableIdentifier);
  uint64_t v5 = (char *)sub_1005D3794 + 4 * byte_10080AEEE[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }

uint64_t sub_1005D3794()
{
  return 256LL;
}

uint64_t sub_1005D38B0()
{
  uint64_t v1 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v8 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord(0LL);
  sub_10001DC4C(v0 + *(int *)(v4 + 24), (uint64_t)v3, type metadata accessor for StableIdentifier);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v3, v1);
  if (EnumCaseMultiPayload == 3)
  {
    sub_100004AEC((uint64_t *)&unk_1009AF840);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_5;
  }

  if (EnumCaseMultiPayload == 2)
  {
    sub_100004AEC((uint64_t *)&unk_1009B0520);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_5:
    swift_bridgeObjectRelease();
    uint64_t v6 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v6 - 8) + 8LL))(v3, v6);
    return 1LL;
  }

  sub_100018C68((uint64_t)v3, type metadata accessor for StableIdentifier);
  return 0LL;
}

void sub_1005D3A0C()
{
  uint64_t v1 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord(0LL);
  sub_10001DC4C(v0 + *(int *)(v4 + 24), (uint64_t)v3, type metadata accessor for StableIdentifier);
  uint64_t v5 = (char *)sub_1005D3AA0 + 4 * byte_10080AEF3[swift_getEnumCaseMultiPayload(v3, v1)];
  __asm { BR              X10 }

id sub_1005D3AA0()
{
  return SPBeaconTypeSelfBeaconing;
}

uint64_t sub_1005D3BF0()
{
  v2[0] = 0xD000000000000012LL;
  v2[1] = 0x800000010086A160LL;
  uint64_t result = String.init<A>(_:)( v2,  &type metadata for String,  &protocol witness table for String,  &protocol witness table for String);
  qword_100A2AE70 = result;
  *(void *)algn_100A2AE78 = v1;
  return result;
}

uint64_t sub_1005D3C50()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000A8AC(v2, qword_100A2AE80);
  sub_10000A720(v0, (uint64_t)qword_100A2AE80);
  type metadata accessor for BeaconStore(0LL);
  sub_1004E6208((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0x61654264656E774FLL, 0xEC000000736E6F63LL, 1LL);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

void sub_1005D3D24()
{
  NSString v0 = String._bridgeToObjectiveC()();
  id v1 = [(id)objc_opt_self(SPHandle) handleWithEmailAddress:v0];

  qword_100A2AE98 = (uint64_t)v1;
}

void sub_1005D3D98(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v39 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *v1;
  unint64_t v12 = v1[1];
  sub_10001736C(*v1, v12);
  Data.hash(into:)(a1, v11, v12);
  sub_100016F9C(v11, v12);
  uint64_t v13 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v14 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v4, v14);
  sub_1006DEAF0();
  sub_10001581C((uint64_t)v1 + v13[7], (uint64_t)v10, &qword_10099D8A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1LL, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v14);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  uint64_t v15 = type metadata accessor for Date(0LL);
  uint64_t v16 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(a1, v15, v16);
  uint64_t v17 = (uint64_t *)((char *)v1 + v13[9]);
  uint64_t v18 = *v17;
  unint64_t v19 = v17[1];
  sub_10001736C(*v17, v19);
  Data.hash(into:)(a1, v18, v19);
  sub_100016F9C(v18, v19);
  uint64_t v20 = (uint64_t *)((char *)v2 + v13[10]);
  unint64_t v21 = v20[1];
  if (v21 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v22 = *v20;
    Hasher._combine(_:)(1u);
    sub_10001736C(v22, v21);
    Data.hash(into:)(a1, v22, v21);
    sub_1000182F0(v22, v21);
  }

  uint64_t v23 = (uint64_t *)((char *)v2 + v13[11]);
  unint64_t v24 = v23[1];
  if (v24 >> 60 == 15)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v25 = *v23;
    Hasher._combine(_:)(1u);
    sub_10001736C(v25, v24);
    Data.hash(into:)(a1, v25, v24);
    sub_1000182F0(v25, v24);
  }

  uint64_t v26 = (uint64_t *)((char *)v2 + v13[12]);
  uint64_t v27 = *v26;
  unint64_t v28 = v26[1];
  sub_10001736C(*v26, v28);
  Data.hash(into:)(a1, v27, v28);
  sub_100016F9C(v27, v28);
  id v29 = (uint64_t *)((char *)v2 + v13[13]);
  uint64_t v30 = *v29;
  unint64_t v31 = v29[1];
  sub_10001736C(*v29, v31);
  Data.hash(into:)(a1, v30, v31);
  sub_100016F9C(v30, v31);
  uint64_t v32 = (uint64_t *)((char *)v2 + v13[14]);
  uint64_t v33 = *v32;
  uint64_t v34 = v32[1];
  swift_bridgeObjectRetain(v34);
  String.hash(into:)(a1, v33, v34);
  swift_bridgeObjectRelease();
  uint64_t v35 = (uint64_t *)((char *)v2 + v13[15]);
  uint64_t v36 = *v35;
  uint64_t v37 = v35[1];
  swift_bridgeObjectRetain(v37);
  String.hash(into:)(a1, v36, v37);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(uint64_t *)((char *)v2 + v13[16]));
  Hasher._combine(_:)(*(uint64_t *)((char *)v2 + v13[17]));
  Swift::UInt v38 = *((unsigned __int8 *)v2 + v13[18]);
  if (v38 == 3)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v38);
  }

  Hasher._combine(_:)(*((unsigned __int8 *)v2 + v13[19]));
  Hasher._combine(_:)(*((_BYTE *)v2 + v13[20]));
}

uint64_t sub_1005D41B8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B53C0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v40 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1005D7B5C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for OwnedBeaconRecord.CodingKeys,  &type metadata for OwnedBeaconRecord.CodingKeys,  v11,  v9,  v10);
  __int128 v42 = *v3;
  char v43 = 0;
  unint64_t v12 = sub_1000170A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v43, v5, &type metadata for Data, v12);
  if (!v2)
  {
    uint64_t v13 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
    uint64_t v14 = (char *)v3 + v13[5];
    LOBYTE(v42) = 1;
    uint64_t v15 = type metadata accessor for UUID(0LL);
    uint64_t v16 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v42, v5, v15, v16);
    uint64_t v17 = v13[6];
    id v41 = v3;
    uint64_t v18 = (char *)v3 + v17;
    LOBYTE(v42) = 2;
    uint64_t v19 = type metadata accessor for StableIdentifier(0LL);
    uint64_t v20 = sub_100007864(&qword_1009B53C8, type metadata accessor for StableIdentifier, (uint64_t)&unk_100817930);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v18, &v42, v5, v19, v20);
    unint64_t v21 = v41;
    uint64_t v22 = (char *)v41 + v13[7];
    LOBYTE(v42) = 3;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v22, &v42, v5, v15, v16);
    uint64_t v23 = (uint64_t)v21 + v13[8];
    LOBYTE(v42) = 4;
    uint64_t v24 = type metadata accessor for Date(0LL);
    uint64_t v25 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v23, &v42, v5, v24, v25);
    __int128 v42 = *(_OWORD *)((char *)v21 + v13[9]);
    char v43 = 5;
    unint64_t v26 = sub_10017F6C8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v43, v5, &type metadata for SharedSecretKey, v26);
    __int128 v42 = *(_OWORD *)((char *)v21 + v13[10]);
    char v43 = 6;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v42, &v43, v5, &type metadata for SharedSecretKey, v26);
    __int128 v42 = *(_OWORD *)((char *)v21 + v13[11]);
    char v43 = 7;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v42, &v43, v5, &type metadata for SharedSecretKey, v26);
    __int128 v42 = *(_OWORD *)((char *)v21 + v13[12]);
    char v43 = 8;
    unint64_t v27 = sub_10017EB68();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v43, v5, &type metadata for PrivateKey, v27);
    __int128 v42 = *(_OWORD *)((char *)v21 + v13[13]);
    char v43 = 9;
    unint64_t v28 = sub_10017EF30();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v43, v5, &type metadata for PublicKey, v28);
    id v29 = (uint64_t *)((char *)v21 + v13[14]);
    uint64_t v30 = *v29;
    uint64_t v31 = v29[1];
    LOBYTE(v42) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v30, v31, &v42, v5);
    uint64_t v32 = (uint64_t *)((char *)v41 + v13[15]);
    uint64_t v33 = *v32;
    uint64_t v34 = v32[1];
    LOBYTE(v42) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v33, v34, &v42, v5);
    uint64_t v35 = *(void *)((char *)v41 + v13[16]);
    LOBYTE(v42) = 12;
    KeyedEncodingContainer.encode(_:forKey:)(v35, &v42, v5);
    uint64_t v36 = *(void *)((char *)v41 + v13[17]);
    LOBYTE(v42) = 13;
    KeyedEncodingContainer.encode(_:forKey:)(v36, &v42, v5);
    LOBYTE(v42) = *((_BYTE *)v41 + v13[19]);
    char v43 = 14;
    unint64_t v37 = sub_1005D7C2C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v42, &v43, v5, &type metadata for BatteryLevel, v37);
    uint64_t v38 = *((unsigned __int8 *)v41 + v13[20]);
    LOBYTE(v42) = 15;
    KeyedEncodingContainer.encode(_:forKey:)(v38, &v42, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1005D46BC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v67 = a2;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v69 = *(void *)(v4 - 8);
  uint64_t v70 = v4;
  __chkstk_darwin(v4);
  os_log_type_t v68 = (void **)((char *)&v65 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v6);
  uint64_t v76 = (char *)&v65 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (void **)((char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v73 = type metadata accessor for UUID(0LL);
  uint64_t v71 = *(void *)(v73 - 8);
  __chkstk_darwin(v73);
  unint64_t v12 = (void **)((char *)&v65 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v72 = sub_100004AEC(&qword_1009B5380);
  uint64_t v13 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v15 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v17 = __chkstk_darwin(v16);
  unint64_t v77 = (char *)&v65 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v78 = (int *)v17;
  v77[*(int *)(v17 + 72)] = 3;
  uint64_t v20 = a1[3];
  uint64_t v19 = a1[4];
  unint64_t v75 = a1;
  sub_100012ED8(a1, v20);
  unint64_t v21 = sub_1005D7B5C();
  uint64_t v74 = v15;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for OwnedBeaconRecord.CodingKeys,  &type metadata for OwnedBeaconRecord.CodingKeys,  v21,  v20,  v19);
  if (v2)
  {
    uint64_t v76 = v2;
    int v24 = 0;
    unsigned int v25 = 0;
  }

  else
  {
    uint64_t v65 = v10;
    uint64_t v66 = v13;
    char v80 = 0;
    unint64_t v22 = sub_100016FE0();
    uint64_t v23 = v72;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v79, &type metadata for Data, &v80, v72, &type metadata for Data, v22);
    uint64_t v34 = v77;
    *(_OWORD *)unint64_t v77 = v79;
    LOBYTE(v79) = 1;
    uint64_t v35 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v36 = v73;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v12, v73, &v79, v23, v73, v35);
    unint64_t v37 = v78;
    (*(void (**)(char *, void *, uint64_t))(v71 + 32))(&v34[v78[5]], v12, v36);
    LOBYTE(v79) = 2;
    uint64_t v38 = sub_100007864( (unint64_t *)&unk_1009B5390,  type metadata accessor for StableIdentifier,  (uint64_t)&unk_100817958);
    uint64_t v39 = v65;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v65, v8, &v79, v72, v8, v38);
    sub_10002218C((uint64_t)v39, (uint64_t)&v34[v37[6]], type metadata accessor for StableIdentifier);
    LOBYTE(v79) = 3;
    uint64_t v40 = (uint64_t)v76;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v36, &v79, v72, v36, v35);
    sub_1005D7BA0(v40, (uint64_t)&v34[v37[7]]);
    LOBYTE(v79) = 4;
    uint64_t v41 = sub_100007864( &qword_10099DA70,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    __int128 v42 = v68;
    uint64_t v43 = v70;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v68, v70, &v79, v72, v70, v41);
    (*(void (**)(char *, void *, uint64_t))(v69 + 32))(&v34[v37[8]], v42, v43);
    char v80 = 5;
    unint64_t v44 = sub_10017F684();
    KeyedDecodingContainer.decode<A>(_:forKey:)( &v79,  &type metadata for SharedSecretKey,  &v80,  v72,  &type metadata for SharedSecretKey,  v44);
    *(_OWORD *)&v34[v37[9]] = v79;
    char v80 = 6;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for SharedSecretKey,  &v80,  v72,  &type metadata for SharedSecretKey,  v44);
    *(_OWORD *)&v34[v37[10]] = v79;
    char v80 = 7;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for SharedSecretKey,  &v80,  v72,  &type metadata for SharedSecretKey,  v44);
    *(_OWORD *)&v34[v37[11]] = v79;
    char v80 = 8;
    unint64_t v45 = sub_10017EB24();
    KeyedDecodingContainer.decode<A>(_:forKey:)( &v79,  &type metadata for PrivateKey,  &v80,  v72,  &type metadata for PrivateKey,  v45);
    *(_OWORD *)&v34[v37[12]] = v79;
    char v80 = 9;
    unint64_t v46 = sub_10017EEEC();
    KeyedDecodingContainer.decode<A>(_:forKey:)( &v79,  &type metadata for PublicKey,  &v80,  v72,  &type metadata for PublicKey,  v46);
    uint64_t v76 = 0LL;
    *(_OWORD *)&v77[v78[13]] = v79;
    LOBYTE(v79) = 10;
    uint64_t v47 = v76;
    uint64_t v48 = KeyedDecodingContainer.decode(_:forKey:)(&v79, v72);
    uint64_t v76 = v47;
    if (v47)
    {
      (*(void (**)(char *, uint64_t))(v66 + 8))(v74, v72);
      int v24 = 0;
      unsigned int v25 = 1023;
    }

    else
    {
      uint64_t v50 = (uint64_t *)&v77[v78[14]];
      *uint64_t v50 = v48;
      v50[1] = v49;
      LOBYTE(v79) = 11;
      NSString v51 = v76;
      uint64_t v52 = KeyedDecodingContainer.decode(_:forKey:)(&v79, v72);
      uint64_t v76 = v51;
      if (!v51)
      {
        int v54 = (uint64_t *)&v77[v78[15]];
        *int v54 = v52;
        v54[1] = v53;
        LOBYTE(v79) = 12;
        uint64_t v55 = v76;
        uint64_t v56 = KeyedDecodingContainer.decode(_:forKey:)(&v79, v72);
        uint64_t v76 = v55;
        if (!v55)
        {
          *(void *)&v77[v78[16]] = v56;
          LOBYTE(v79) = 13;
          NSString v57 = v76;
          uint64_t v58 = KeyedDecodingContainer.decode(_:forKey:)(&v79, v72);
          uint64_t v76 = v57;
          if (!v57)
          {
            *(void *)&v77[v78[17]] = v58;
            char v80 = 14;
            unint64_t v59 = sub_1005D7BE8();
            __int128 v60 = v76;
            KeyedDecodingContainer.decode<A>(_:forKey:)( &v79,  &type metadata for BatteryLevel,  &v80,  v72,  &type metadata for BatteryLevel,  v59);
            uint64_t v76 = v60;
            if (!v60)
            {
              v77[v78[19]] = v79;
              LOBYTE(v79) = 15;
              uint64_t v61 = v76;
              char v62 = KeyedDecodingContainer.decode(_:forKey:)(&v79, v72);
              uint64_t v76 = v61;
              if (!v61)
              {
                char v63 = v62;
                (*(void (**)(char *, uint64_t))(v66 + 8))(v74, v72);
                uint64_t v64 = (uint64_t)v77;
                v77[v78[20]] = v63 & 1;
                sub_10001DC4C(v64, v67, type metadata accessor for OwnedBeaconRecord);
                _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v75);
                return sub_100018C68(v64, type metadata accessor for OwnedBeaconRecord);
              }
            }
          }
        }

        (*(void (**)(char *, uint64_t))(v66 + 8))(v74, v72);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v75);
        unint64_t v26 = v77;
        sub_100016F9C(*(void *)v77, *((void *)v77 + 1));
        unint64_t v27 = v78;
        (*(void (**)(char *, uint64_t))(v71 + 8))(&v26[v78[5]], v73);
        sub_100018C68((uint64_t)&v26[v27[6]], type metadata accessor for StableIdentifier);
        sub_100015794((uint64_t)&v26[v27[7]], &qword_10099D8A0);
        (*(void (**)(char *, uint64_t))(v69 + 8))(&v26[v27[8]], v70);
        int v33 = 1;
        int v24 = 1;
        int v32 = 1;
        int v31 = 1;
        int v30 = 1;
        LOBYTE(v29) = 1;
LABEL_11:
        uint64_t result = sub_100016F9C(*(void *)&v26[v27[9]], *(void *)&v26[v27[9] + 8]);
        if ((v29 & 1) != 0) {
          goto LABEL_12;
        }
        goto LABEL_24;
      }

      (*(void (**)(char *, uint64_t))(v66 + 8))(v74, v72);
      unsigned int v25 = 2047;
      int v24 = 1;
    }
  }

  unint64_t v26 = v77;
  unint64_t v27 = v78;
  uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v75);
  int v29 = (v25 >> 6) & 1;
  int v30 = (v25 >> 7) & 1;
  int v31 = (v25 >> 8) & 1;
  int v32 = (v25 >> 9) & 1;
  if ((v25 & 1) != 0)
  {
    uint64_t result = sub_100016F9C(*(void *)v26, *((void *)v26 + 1));
    if ((v25 & 2) == 0)
    {
LABEL_6:
      if ((v25 & 4) == 0) {
        goto LABEL_7;
      }
      goto LABEL_20;
    }
  }

  else if ((v25 & 2) == 0)
  {
    goto LABEL_6;
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v71 + 8))(&v26[v27[5]], v73);
  if ((v25 & 4) == 0)
  {
LABEL_7:
    if ((v25 & 8) == 0) {
      goto LABEL_8;
    }
    goto LABEL_21;
  }

uint64_t sub_1005D512C(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 56));
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_1005D5160(uint64_t a1)
{
  uint64_t v2 = (uint64_t *)(v1 + *(int *)(a1 + 60));
  uint64_t v3 = *v2;
  swift_bridgeObjectRetain(v2[1]);
  return v3;
}

uint64_t sub_1005D5194(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 64));
}

uint64_t sub_1005D51A0(uint64_t a1)
{
  return *(void *)(v1 + *(int *)(a1 + 68));
}

BOOL sub_1005D51AC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(v1 + *(int *)(a1 + 24), (uint64_t)v5, type metadata accessor for StableIdentifier);
  BOOL v6 = swift_getEnumCaseMultiPayload(v5, v3) == 0;
  sub_100018C68((uint64_t)v5, type metadata accessor for StableIdentifier);
  return v6;
}

BOOL sub_1005D5254(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(v1 + *(int *)(a1 + 24), (uint64_t)v5, type metadata accessor for StableIdentifier);
  BOOL v6 = swift_getEnumCaseMultiPayload(v5, v3) == 1;
  sub_100018C68((uint64_t)v5, type metadata accessor for StableIdentifier);
  return v6;
}

uint64_t sub_1005D5300()
{
  return sub_1006DDC00() & 1;
}

BOOL sub_1005D532C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(v1 + *(int *)(a1 + 24), (uint64_t)v5, type metadata accessor for StableIdentifier);
  BOOL v6 = swift_getEnumCaseMultiPayload(v5, v3) == 4;
  sub_100018C68((uint64_t)v5, type metadata accessor for StableIdentifier);
  return v6;
}

uint64_t sub_1005D53DC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10001581C(v2 + *(int *)(a1 + 28), a2, &qword_10099D8A0);
}

Swift::Int sub_1005D5404()
{
  return Hasher._finalize()();
}

Swift::Int sub_1005D5444(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1005D547C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Date.< infix(_:_:)(a1 + *(int *)(a3 + 32), a2 + *(int *)(a3 + 32));
}

BOOL sub_1005D548C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static Date.< infix(_:_:)(a2 + *(int *)(a3 + 32), a1 + *(int *)(a3 + 32)) & 1) == 0;
}

BOOL sub_1005D54B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (static Date.< infix(_:_:)(a1 + *(int *)(a3 + 32), a2 + *(int *)(a3 + 32)) & 1) == 0;
}

uint64_t sub_1005D54E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return static Date.< infix(_:_:)(a2 + *(int *)(a3 + 32), a1 + *(int *)(a3 + 32));
}

uint64_t sub_1005D54F4(id *a1)
{
  uint64_t v134 = type metadata accessor for Date(0LL);
  uint64_t v132 = *(void *)(v134 - 8);
  __chkstk_darwin(v134);
  char v128 = (char *)&v127 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v131 = sub_100004AEC((uint64_t *)&unk_10099D760);
  __chkstk_darwin(v131);
  uint64_t v133 = (uint64_t)&v127 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v129 = (uint64_t)&v127 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v135 = (uint64_t)&v127 - v8;
  __chkstk_darwin(v7);
  __int128 v136 = (uint64_t *)((char *)&v127 - v9);
  uint64_t v10 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v11 = __chkstk_darwin(v10);
  id v130 = (char *)&v127 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v127 - v14;
  uint64_t v16 = static os_log_type_t.debug.getter(v13);
  uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  id v19 = *a1;
  id v20 = [v19 description];
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  uint64_t v23 = v22;

  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v21;
  *(void *)(v18 + 40) = v23;
  uint64_t v24 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  unsigned int v25 = (void *)static OS_os_log.default.getter(v24);
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v25, "Updating owned beacon record: %@", 32LL, 2LL, v18);
  swift_bridgeObjectRelease();

  id v26 = [v19 encryptedValues];
  uint64_t ObjectType = swift_getObjectType(v26);
  CKRecordKeyValueSetting.subscript.getter( &v139,  0xD000000000000010LL,  0x800000010084E540LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  uint64_t v29 = *((void *)&v139 + 1);
  uint64_t v28 = v139;
  unint64_t v137 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  sub_1006DD1E4();
  if (!v29)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    sub_1006DD1E4();
    *((void *)&v140 + 1) = &type metadata for String;
    unint64_t v141 = &protocol witness table for String;
    *(void *)&__int128 v139 = v33;
    *((void *)&v139 + 1) = v34;
    CKRecordKeyValueSetting.subscript.setter(&v139, 0xD000000000000010LL, 0x800000010084E540LL, ObjectType);
    goto LABEL_8;
  }

  if (v28 == v30 && v29 == v31)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_8;
  }

  char v32 = _stringCompareWithSmolCheck(_:_:expecting:)(v28, v29, v30, v31, 0LL);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v32 & 1) == 0) {
    goto LABEL_7;
  }
LABEL_8:
  CKRecordKeyValueSetting.subscript.getter( &v139,  0x65644970756F7267LL,  0xEF7265696669746ELL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  __int128 v35 = v139;
  uint64_t v36 = v138 + v137[7];
  sub_10001581C(v36, (uint64_t)v15, &qword_10099D8A0);
  uint64_t v37 = type metadata accessor for UUID(0LL);
  uint64_t v38 = *(void *)(v37 - 8);
  uint64_t v39 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v38 + 48);
  uint64_t v40 = v39(v15, 1LL, v37);
  if ((_DWORD)v40 == 1)
  {
    sub_100015794((uint64_t)v15, &qword_10099D8A0);
    uint64_t v41 = v138;
    if (!*((void *)&v35 + 1)) {
      goto LABEL_23;
    }
    goto LABEL_18;
  }

  uint64_t v127 = v35;
  uint64_t v42 = UUID.uuidString.getter(v40);
  uint64_t v44 = v43;
  (*(void (**)(char *, uint64_t))(v38 + 8))(v15, v37);
  if (!*((void *)&v35 + 1))
  {
    uint64_t v41 = v138;
    if (!v44) {
      goto LABEL_23;
    }
    goto LABEL_18;
  }

  uint64_t v41 = v138;
  if (!v44)
  {
LABEL_18:
    swift_bridgeObjectRelease();
LABEL_19:
    unint64_t v45 = v130;
    sub_10001581C(v36, (uint64_t)v130, &qword_10099D8A0);
    uint64_t v46 = v39(v45, 1LL, v37);
    if ((_DWORD)v46 == 1)
    {
      sub_100015794((uint64_t)v45, &qword_10099D8A0);
      __int128 v139 = 0u;
      __int128 v140 = 0u;
      unint64_t v141 = 0LL;
    }

    else
    {
      uint64_t v47 = UUID.uuidString.getter(v46);
      *((void *)&v140 + 1) = &type metadata for String;
      unint64_t v141 = &protocol witness table for String;
      *(void *)&__int128 v139 = v47;
      *((void *)&v139 + 1) = v48;
      (*(void (**)(char *, uint64_t))(v38 + 8))(v45, v37);
    }

    CKRecordKeyValueSetting.subscript.setter(&v139, 0x65644970756F7267LL, 0xEF7265696669746ELL, ObjectType);
    goto LABEL_23;
  }

  if (v127 == v42 && *((void *)&v35 + 1) == (void)v35)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_23;
  }

  char v126 = _stringCompareWithSmolCheck(_:_:expecting:)(v127, *((void *)&v35 + 1), v42, v35, 0LL);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  if ((v126 & 1) == 0) {
    goto LABEL_19;
  }
LABEL_23:
  uint64_t v49 = v136;
  uint64_t v50 = v134;
  CKRecordKeyValueSetting.subscript.getter( v136,  0x44676E6972696170LL,  0xEB00000000657461LL,  ObjectType,  v134,  &protocol witness table for Date);
  uint64_t v51 = v41 + v137[8];
  uint64_t v52 = v132;
  uint64_t v53 = v135;
  id v130 = *(char **)(v132 + 16);
  ((void (*)(uint64_t, uint64_t, uint64_t))v130)(v135, v51, v50);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v52 + 56))(v53, 0LL, 1LL, v50);
  uint64_t v54 = v133;
  uint64_t v55 = v133 + *(int *)(v131 + 48);
  sub_10001581C((uint64_t)v49, v133, (uint64_t *)&unk_10099D720);
  uint64_t v56 = v52;
  sub_10001581C(v53, v55, (uint64_t *)&unk_10099D720);
  NSString v57 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v52 + 48);
  if (v57(v54, 1LL, v50) == 1)
  {
    sub_100015794(v53, (uint64_t *)&unk_10099D720);
    sub_100015794((uint64_t)v49, (uint64_t *)&unk_10099D720);
    if (v57(v55, 1LL, v50) == 1)
    {
      sub_100015794(v54, (uint64_t *)&unk_10099D720);
      goto LABEL_30;
    }

    goto LABEL_28;
  }

  uint64_t v58 = v129;
  sub_10001581C(v54, v129, (uint64_t *)&unk_10099D720);
  if (v57(v55, 1LL, v50) == 1)
  {
    sub_100015794(v135, (uint64_t *)&unk_10099D720);
    sub_100015794((uint64_t)v136, (uint64_t *)&unk_10099D720);
    (*(void (**)(uint64_t, uint64_t))(v56 + 8))(v58, v50);
LABEL_28:
    sub_100015794(v54, (uint64_t *)&unk_10099D760);
LABEL_29:
    *((void *)&v140 + 1) = v50;
    unint64_t v141 = &protocol witness table for Date;
    unint64_t v59 = sub_10000A7C8(&v139);
    ((void (*)(void *, uint64_t, uint64_t))v130)(v59, v51, v50);
    CKRecordKeyValueSetting.subscript.setter(&v139, 0x44676E6972696170LL, 0xEB00000000657461LL, ObjectType);
    goto LABEL_30;
  }

  uint64_t v74 = v128;
  (*(void (**)(char *, uint64_t, uint64_t))(v56 + 32))(v128, v55, v50);
  uint64_t v75 = sub_100007864( &qword_10099DA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  char v76 = dispatch thunk of static Equatable.== infix(_:_:)(v58, v74, v50, v75);
  unint64_t v77 = *(void (**)(char *, uint64_t))(v56 + 8);
  v77(v74, v50);
  sub_100015794(v135, (uint64_t *)&unk_10099D720);
  sub_100015794((uint64_t)v136, (uint64_t *)&unk_10099D720);
  v77((char *)v58, v50);
  sub_100015794(v54, (uint64_t *)&unk_10099D720);
  if ((v76 & 1) == 0) {
    goto LABEL_29;
  }
LABEL_30:
  CKRecordKeyValueSetting.subscript.getter( &v139,  0x6553646572616873LL,  0xEC00000074657263LL,  ObjectType,  &type metadata for Data,  &protocol witness table for Data);
  __int128 v60 = v139;
  uint64_t v61 = v138;
  char v62 = (uint64_t *)(v138 + v137[9]);
  uint64_t v63 = *v62;
  unint64_t v64 = v62[1];
  sub_10001736C(*v62, v64);
  if (*((void *)&v60 + 1) >> 60 == 15LL)
  {
    sub_1000182F0(v60, *((unint64_t *)&v60 + 1));
    sub_1000182F0(v63, v64);
  }

  else
  {
    sub_100018BE4(v60, *((unint64_t *)&v60 + 1));
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v60, *((uint64_t *)&v60 + 1));
    char v66 = v65;
    sub_100016F9C(v63, v64);
    sub_1000182F0(v60, *((unint64_t *)&v60 + 1));
    sub_1000182F0(v60, *((unint64_t *)&v60 + 1));
    if ((v66 & 1) != 0) {
      goto LABEL_34;
    }
  }

  *((void *)&v140 + 1) = &type metadata for Data;
  unint64_t v141 = &protocol witness table for Data;
  *(void *)&__int128 v139 = v63;
  *((void *)&v139 + 1) = v64;
  sub_10001736C(v63, v64);
  CKRecordKeyValueSetting.subscript.setter(&v139, 0x6553646572616873LL, 0xEC00000074657263LL, ObjectType);
LABEL_34:
  uint64_t v67 = v137;
  os_log_type_t v68 = (uint64_t *)(v61 + v137[10]);
  uint64_t v70 = *v68;
  unint64_t v69 = v68[1];
  uint64_t v134 = v69 >> 60;
  uint64_t v71 = v61;
  if (v69 >> 60 == 15) {
    goto LABEL_42;
  }
  sub_10001736C(v70, v69);
  CKRecordKeyValueSetting.subscript.getter( &v139,  0x6553646572616873LL,  0xED00003274657263LL,  ObjectType,  &type metadata for Data,  &protocol witness table for Data);
  __int128 v72 = v139;
  if (*((void *)&v139 + 1) >> 60 == 15LL)
  {
    sub_10001736C(v70, v69);
    sub_1000182F0(v72, *((unint64_t *)&v72 + 1));
    sub_1000182F0(v70, v69);
    uint64_t v73 = v70;
LABEL_40:
    *((void *)&v140 + 1) = &type metadata for Data;
    unint64_t v141 = &protocol witness table for Data;
    *(void *)&__int128 v139 = v73;
    *((void *)&v139 + 1) = v69;
    sub_100018BE4(v73, v69);
    CKRecordKeyValueSetting.subscript.setter(&v139, 0x6553646572616873LL, 0xED00003274657263LL, ObjectType);
    goto LABEL_41;
  }

  sub_100018BE4(v70, v69);
  sub_100018BE4(v72, *((unint64_t *)&v72 + 1));
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v72, *((uint64_t *)&v72 + 1));
  uint64_t v73 = v70;
  char v79 = v78;
  sub_1000182F0(v73, v69);
  sub_1000182F0(v72, *((unint64_t *)&v72 + 1));
  sub_1000182F0(v72, *((unint64_t *)&v72 + 1));
  if ((v79 & 1) == 0) {
    goto LABEL_40;
  }
LABEL_41:
  sub_1000182F0(v73, v69);
  uint64_t v71 = v138;
  uint64_t v70 = v73;
LABEL_42:
  uint64_t v135 = v70;
  CKRecordKeyValueSetting.subscript.getter( &v139,  0x4B65746176697270LL,  0xEA00000000007965LL,  ObjectType,  &type metadata for Data,  &protocol witness table for Data);
  __int128 v80 = v139;
  id v81 = (uint64_t *)(v71 + v67[12]);
  uint64_t v82 = *v81;
  unint64_t v83 = v81[1];
  sub_10001736C(*v81, v83);
  __int128 v136 = (void *)v69;
  if (*((void *)&v80 + 1) >> 60 == 15LL)
  {
    sub_1000182F0(v80, *((unint64_t *)&v80 + 1));
    sub_1000182F0(v82, v83);
  }

  else
  {
    sub_100018BE4(v80, *((unint64_t *)&v80 + 1));
    _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v80, *((uint64_t *)&v80 + 1));
    char v85 = v84;
    sub_100016F9C(v82, v83);
    sub_1000182F0(v80, *((unint64_t *)&v80 + 1));
    sub_1000182F0(v80, *((unint64_t *)&v80 + 1));
    if ((v85 & 1) != 0) {
      goto LABEL_46;
    }
  }

  *((void *)&v140 + 1) = &type metadata for Data;
  unint64_t v141 = &protocol witness table for Data;
  *(void *)&__int128 v139 = v82;
  *((void *)&v139 + 1) = v83;
  sub_10001736C(v82, v83);
  CKRecordKeyValueSetting.subscript.setter(&v139, 0x4B65746176697270LL, 0xEA00000000007965LL, ObjectType);
LABEL_46:
  CKRecordKeyValueSetting.subscript.getter( &v139,  0x654B63696C627570LL,  0xE900000000000079LL,  ObjectType,  &type metadata for Data,  &protocol witness table for Data);
  __int128 v86 = v139;
  uint64_t v87 = (uint64_t *)(v138 + v137[13]);
  uint64_t v88 = *v87;
  unint64_t v89 = v87[1];
  sub_10001736C(*v87, v89);
  if (*((void *)&v86 + 1) >> 60 == 15LL)
  {
    sub_1000182F0(v86, *((unint64_t *)&v86 + 1));
    sub_1000182F0(v88, v89);
    uint64_t v90 = v138;
LABEL_49:
    *((void *)&v140 + 1) = &type metadata for Data;
    unint64_t v141 = &protocol witness table for Data;
    *(void *)&__int128 v139 = v88;
    *((void *)&v139 + 1) = v89;
    sub_10001736C(v88, v89);
    CKRecordKeyValueSetting.subscript.setter(&v139, 0x654B63696C627570LL, 0xE900000000000079LL, ObjectType);
    goto LABEL_50;
  }

  sub_100018BE4(v86, *((unint64_t *)&v86 + 1));
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v86, *((uint64_t *)&v86 + 1));
  char v92 = v91;
  sub_100016F9C(v88, v89);
  sub_1000182F0(v86, *((unint64_t *)&v86 + 1));
  sub_1000182F0(v86, *((unint64_t *)&v86 + 1));
  uint64_t v90 = v138;
  if ((v92 & 1) == 0) {
    goto LABEL_49;
  }
LABEL_50:
  CKRecordKeyValueSetting.subscript.getter( &v139,  0x6C65646F6DLL,  0xE500000000000000LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  id v93 = v137;
  NSString v94 = (unint64_t *)(v90 + v137[14]);
  unint64_t v96 = *v94;
  unint64_t v95 = v94[1];
  if (!*((void *)&v139 + 1)) {
    goto LABEL_54;
  }
  if (v139 == __PAIR128__(v95, v96))
  {
    swift_bridgeObjectRelease();
    goto LABEL_55;
  }

  char v97 = _stringCompareWithSmolCheck(_:_:expecting:)(v139, *((void *)&v139 + 1), *v94, v94[1], 0LL);
  swift_bridgeObjectRelease();
  if ((v97 & 1) == 0)
  {
LABEL_54:
    *((void *)&v140 + 1) = &type metadata for String;
    unint64_t v141 = &protocol witness table for String;
    *(void *)&__int128 v139 = v96;
    *((void *)&v139 + 1) = v95;
    swift_bridgeObjectRetain(v95);
    CKRecordKeyValueSetting.subscript.setter(&v139, 0x6C65646F6DLL, 0xE500000000000000LL, ObjectType);
  }

uint64_t sub_1005D6988(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1005D69C0 + 4 * byte_10080AEF8[a1]))( 0xD000000000000010LL,  0x800000010084DE70LL);
}

uint64_t sub_1005D69C0()
{
  return 0x696669746E656469LL;
}

  ;
}

uint64_t sub_1005D6A74()
{
  return 0x4B65746176697270LL;
}

uint64_t sub_1005D6A94()
{
  return 0x654B63696C627570LL;
}

uint64_t sub_1005D6AB4()
{
  return 0x6C65646F6DLL;
}

uint64_t sub_1005D6AC8()
{
  return 0x65566D6574737973LL;
}

uint64_t sub_1005D6AEC()
{
  return 0x6449726F646E6576LL;
}

uint64_t sub_1005D6B04()
{
  return 0x49746375646F7270LL;
}

uint64_t sub_1005D6B20()
{
  return 0x4C79726574746162LL;
}

uint64_t sub_1005D6B40()
{
  return 0x7375655A7369LL;
}

uint64_t sub_1005D6B54(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1005D6B8C + 4 * byte_10080AF08[a1]))( 0xD000000000000010LL,  0x800000010084DE70LL);
}

uint64_t sub_1005D6B8C()
{
  return 0x696669746E656469LL;
}

  ;
}

uint64_t sub_1005D6C40()
{
  return 0x4B65746176697270LL;
}

uint64_t sub_1005D6C60()
{
  return 0x654B63696C627570LL;
}

uint64_t sub_1005D6C80()
{
  return 0x6C65646F6DLL;
}

uint64_t sub_1005D6C94()
{
  return 0x65566D6574737973LL;
}

uint64_t sub_1005D6CB8()
{
  return 0x6449726F646E6576LL;
}

uint64_t sub_1005D6CD0()
{
  return 0x49746375646F7270LL;
}

uint64_t sub_1005D6CEC()
{
  return 0x4C79726574746162LL;
}

uint64_t sub_1005D6D0C()
{
  return 0x7375655A7369LL;
}

uint64_t sub_1005D6D24@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005D46BC(a1, a2);
}

uint64_t sub_1005D6D38(void *a1)
{
  return sub_1005D41B8(a1);
}

uint64_t sub_1005D6D4C(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100007864( (unint64_t *)&unk_1009B5340,  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_10080B010);
  uint64_t result = sub_100007864(&qword_1009B2870, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_10080AFE8);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

uint64_t sub_1005D6DA8(uint64_t a1)
{
  uint64_t result = sub_100007864(&qword_1009B5350, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_10080B038);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1005D6DE4()
{
  return sub_100007864(&qword_1009B5358, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_10080B054);
}

uint64_t sub_1005D6E10(uint64_t a1)
{
  uint64_t result = sub_100007864(&qword_1009B5360, type metadata accessor for OwnedBeaconRecord, (uint64_t)&unk_10080B07C);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1005D6E4C(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = sub_1005D6988(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = sub_1005D6988(v2);
  if (v3 == v6 && v5 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_1005D6ED4()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  uint64_t v2 = sub_1005D6988(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1005D6F34(uint64_t a1)
{
  uint64_t v3 = sub_1005D6988(*v1);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1005D6F74(uint64_t a1)
{
  unsigned __int8 v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  uint64_t v3 = sub_1005D6988(v2);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

unint64_t sub_1005D6FD0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1005D7F6C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1005D6FFC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1005D6988(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1005D7024()
{
  return sub_1005D6B54(*v0);
}

unint64_t sub_1005D702C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1005D7F6C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1005D7050(uint64_t a1)
{
  unint64_t v2 = sub_1005D7B5C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005D7078(uint64_t a1)
{
  unint64_t v2 = sub_1005D7B5C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005D70A0@<X0>(uint64_t a1@<X1>, char *a2@<X8>)
{
  uint64_t v4 = sub_100004AEC(&qword_1009AA870);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OwnedBeaconRecord(0LL);
  sub_10050B884(a1 + *(int *)(v7 + 20), (uint64_t)v6);
  uint64_t v8 = type metadata accessor for BeaconProductInfoRecord(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))(v6, 1LL, v8) == 1)
  {
    uint64_t result = sub_100015794((uint64_t)v6, &qword_1009AA870);
    char v10 = 2;
  }

  else
  {
    char v10 = v6[*(int *)(v8 + 20)];
    uint64_t result = sub_100018C68((uint64_t)v6, type metadata accessor for BeaconProductInfoRecord);
  }

  *a2 = v10;
  return result;
}

uint64_t sub_1005D7184()
{
  unsigned __int8 v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  char v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1005D7424@<X0>(char *a1@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8) + 80LL);
  return sub_1005D70A0(v1 + ((v3 + 24) & ~v3), a1);
}

uint64_t sub_1005D7464(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v93 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009B5370);
  __chkstk_darwin(v8);
  char v10 = (char *)&v93 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v93 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  unint64_t v17 = (char *)&v93 - v16;
  __chkstk_darwin(v15);
  unint64_t v19 = (char *)&v93 - v18;
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*a1, a1[1]);
  if ((v20 & 1) == 0) {
    goto LABEL_23;
  }
  uint64_t v96 = v4;
  uint64_t v21 = a2;
  uint64_t v22 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  sub_1006DF8C4((uint64_t)a1 + v22[6], v21 + v22[6]);
  if ((v23 & 1) == 0) {
    goto LABEL_23;
  }
  uint64_t v24 = v22[7];
  unint64_t v95 = a1;
  sub_10001581C((uint64_t)a1 + v24, (uint64_t)v19, &qword_10099D8A0);
  NSString v94 = v22;
  sub_10001581C(v21 + v22[7], (uint64_t)v17, &qword_10099D8A0);
  uint64_t v25 = (uint64_t)&v10[*(int *)(v8 + 48)];
  sub_10001581C((uint64_t)v19, (uint64_t)v10, &qword_10099D8A0);
  uint64_t v26 = v25;
  sub_10001581C((uint64_t)v17, v25, &qword_10099D8A0);
  unint64_t v27 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
  uint64_t v28 = v96;
  if (v27((uint64_t)v10, 1LL, v96) == 1)
  {
    sub_100015794((uint64_t)v17, &qword_10099D8A0);
    sub_100015794((uint64_t)v19, &qword_10099D8A0);
    if (v27(v26, 1LL, v28) == 1)
    {
      sub_100015794((uint64_t)v10, &qword_10099D8A0);
      goto LABEL_11;
    }

unint64_t sub_1005D7B5C()
{
  unint64_t result = qword_1009B5388;
  if (!qword_1009B5388)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080B314, &type metadata for OwnedBeaconRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B5388);
  }

  return result;
}

uint64_t sub_1005D7BA0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099D8A0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1005D7BE8()
{
  unint64_t result = qword_1009B53B8;
  if (!qword_1009B53B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10081C3BC, &type metadata for BatteryLevel);
    atomic_store(result, (unint64_t *)&qword_1009B53B8);
  }

  return result;
}

unint64_t sub_1005D7C2C()
{
  unint64_t result = qword_1009B53E0;
  if (!qword_1009B53E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10081C394, &type metadata for BatteryLevel);
    atomic_store(result, (unint64_t *)&qword_1009B53E0);
  }

  return result;
}

unint64_t sub_1005D7C70()
{
  unint64_t result = qword_1009B53F8;
  if (!qword_1009B53F8)
  {
    unint64_t result = swift_getWitnessTable( &unk_10080B2D4,  &type metadata for OwnedBeaconRecord.OwnedBeaconRecordConversionError);
    atomic_store(result, (unint64_t *)&qword_1009B53F8);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for OwnedBeaconRecord.OwnedBeaconRecordConversionError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1005D7D00 + 4 * byte_10080AF31[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1005D7D34 + 4 * byte_10080AF2C[v4]))();
}

uint64_t sub_1005D7D34(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005D7D3C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005D7D44LL);
  }
  return result;
}

uint64_t sub_1005D7D50(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005D7D58LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1005D7D5C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005D7D64(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconRecord.OwnedBeaconRecordConversionError()
{
  return &type metadata for OwnedBeaconRecord.OwnedBeaconRecordConversionError;
}

uint64_t storeEnumTagSinglePayload for OwnedBeaconRecord.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 15 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 15) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF1) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF0) {
    return ((uint64_t (*)(void))((char *)&loc_1005D7DCC + 4 * byte_10080AF3B[v4]))();
  }
  *a1 = a2 + 15;
  return ((uint64_t (*)(void))((char *)sub_1005D7E00 + 4 * byte_10080AF36[v4]))();
}

uint64_t sub_1005D7E00(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005D7E08(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005D7E10LL);
  }
  return result;
}

uint64_t sub_1005D7E1C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005D7E24LL);
  }
  *(_BYTE *)unint64_t result = a2 + 15;
  return result;
}

uint64_t sub_1005D7E28(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005D7E30(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for OwnedBeaconRecord.CodingKeys()
{
  return &type metadata for OwnedBeaconRecord.CodingKeys;
}

unint64_t sub_1005D7E50()
{
  unint64_t result = qword_1009B5400;
  if (!qword_1009B5400)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080B244, &type metadata for OwnedBeaconRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B5400);
  }

  return result;
}

unint64_t sub_1005D7E98()
{
  unint64_t result = qword_1009B5408;
  if (!qword_1009B5408)
  {
    unint64_t result = swift_getWitnessTable( &unk_10080B2AC,  &type metadata for OwnedBeaconRecord.OwnedBeaconRecordConversionError);
    atomic_store(result, (unint64_t *)&qword_1009B5408);
  }

  return result;
}

unint64_t sub_1005D7EE0()
{
  unint64_t result = qword_1009B5410;
  if (!qword_1009B5410)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080B17C, &type metadata for OwnedBeaconRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B5410);
  }

  return result;
}

unint64_t sub_1005D7F28()
{
  unint64_t result = qword_1009B5418;
  if (!qword_1009B5418)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080B1A4, &type metadata for OwnedBeaconRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B5418);
  }

  return result;
}

unint64_t sub_1005D7F6C(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100934FC0, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 0x10) {
    return 16LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1005D7FB4(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009AF7F8);
  uint64_t v68 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v67 = (char *)&v63 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC(&qword_1009B55D0);
  uint64_t v74 = *(void *)(v4 - 8);
  uint64_t v75 = v4;
  __chkstk_darwin(v4);
  unint64_t v72 = (char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_1009B55D8);
  uint64_t v76 = *(void *)(v6 - 8);
  uint64_t v77 = v6;
  __chkstk_darwin(v6);
  char v73 = (char *)&v63 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v66 = *(void *)(v8 - 8);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v70 = v10;
  uint64_t v71 = (uint64_t)&v63 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v63 - v11;
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v13 = type metadata accessor for Logger(0LL);
  sub_10000A720(v13, (uint64_t)qword_100A2AAA0);
  uint64_t v78 = a1;
  uint64_t v14 = sub_10001DC4C(a1, (uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    unint64_t v17 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    uint64_t v80 = v18;
    *(_DWORD *)unint64_t v17 = 136315138;
    unint64_t v64 = v17 + 4;
    uint64_t v19 = v2;
    uint64_t v20 = v8;
    uint64_t v21 = type metadata accessor for UUID(0LL);
    uint64_t v22 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v23 = v21;
    uint64_t v8 = v20;
    uint64_t v2 = v19;
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v23, v22);
    uint64_t v79 = sub_1003F11D4(v24, v25, &v80);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v79, &v80, v64, v17 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
    _os_log_impl((void *)&_mh_execute_header, v15, v16, "Handling freshly paired beacon: %s", v17, 0xCu);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {
    sub_100018C68((uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
  }

  uint64_t v65 = v8;
  uint64_t v26 = v69;
  uint64_t v27 = *(void *)(v69 + 32);
  uint64_t v28 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
  uint64_t v29 = type metadata accessor for UUID(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(unsigned __int8 *)(v30 + 80);
  uint64_t v32 = (v31 + 32) & ~v31;
  uint64_t v33 = swift_allocObject(v28, v32 + *(void *)(v30 + 72), v31 | 7);
  *(_OWORD *)(v33 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v34 = v33 + v32;
  uint64_t v35 = v78;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v34, v78 + *(int *)(v8 + 20), v29);
  uint64_t v36 = swift_allocObject(&unk_100968780, 32LL, 7LL);
  *(void *)(v36 + swift_weakDestroy(v0 + 16) = v27;
  *(void *)(v36 + 24) = v33;
  swift_retain();
  swift_bridgeObjectRetain(v33);
  uint64_t v37 = sub_100004AEC((uint64_t *)&unk_1009AF7A0);
  uint64_t v38 = sub_1000372EC( &qword_1009AF800,  (uint64_t *)&unk_1009AF7A0,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
  uint64_t v39 = v67;
  Deferred.init(createPublisher:)(sub_1005DA01C, v36, v37, v38);
  uint64_t v40 = sub_1000372EC(&qword_1009AF808, &qword_1009AF7F8, (uint64_t)&protocol conformance descriptor for Deferred<A>);
  uint64_t v41 = Publisher.eraseToAnyPublisher()(v2, v40);
  (*(void (**)(char *, uint64_t))(v68 + 8))(v39, v2);
  swift_bridgeObjectRelease();
  uint64_t v80 = v41;
  uint64_t v42 = v71;
  sub_10001DC4C(v35, v71, type metadata accessor for OwnedBeaconRecord);
  uint64_t v43 = *(unsigned __int8 *)(v66 + 80);
  uint64_t v44 = (v43 + 24) & ~v43;
  uint64_t v45 = v70;
  uint64_t v68 = v43 | 7;
  uint64_t v46 = swift_allocObject(&unk_1009687A8, v44 + v70, v43 | 7);
  *(void *)(v46 + swift_weakDestroy(v0 + 16) = v26;
  sub_10001DBBC(v42, v46 + v44);
  uint64_t v47 = swift_retain();
  uint64_t v48 = static Subscribers.Demand.unlimited.getter(v47);
  uint64_t v49 = sub_100004AEC(&qword_1009B55E0);
  uint64_t v50 = sub_100004AEC(&qword_1009AF7C8);
  uint64_t v51 = sub_1000372EC(&qword_1009B55E8, &qword_1009B55E0, (uint64_t)&unk_100800438);
  uint64_t v52 = sub_1000372EC( &qword_1009AF7D8,  &qword_1009AF7C8,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v53 = v72;
  Publisher<>.flatMap<A>(maxPublishers:_:)(v48, sub_1005DA2C8, v46, v49, v50, v51, v52);
  swift_release();
  swift_release();
  sub_10001DC4C(v78, v42, type metadata accessor for OwnedBeaconRecord);
  uint64_t v54 = (v43 + 16) & ~v43;
  uint64_t v55 = swift_allocObject(&unk_1009687D0, v54 + v45, v68);
  sub_10001DBBC(v42, v55 + v54);
  uint64_t v56 = sub_1000372EC( &qword_1009B55F0,  &qword_1009B55D0,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  char v57 = v73;
  uint64_t v58 = v75;
  Publisher.map<A>(_:)(sub_1005DA5B0, v55, v75, v65, v56);
  swift_release();
  (*(void (**)(char *, uint64_t))(v74 + 8))(v53, v58);
  uint64_t v59 = sub_1000372EC( qword_1009B55F8,  &qword_1009B55D8,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  uint64_t v60 = v77;
  uint64_t v61 = Publisher.eraseToAnyPublisher()(v77, v59);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v57, v60);
  return v61;
}

uint64_t sub_1005D8608@<X0>(uint64_t a1@<X1>, uint64_t a2@<X2>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_100004AEC(&qword_1009AF7F8);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(a1 + 32);
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v15 = (v14 + 32) & ~v14;
  uint64_t v16 = swift_allocObject(v11, v15 + *(void *)(v13 + 72), v14 | 7);
  *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v17 = type metadata accessor for OwnedBeaconRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v16 + v15, a2 + *(int *)(v17 + 20), v12);
  uint64_t v18 = swift_allocObject(&unk_1009687F8, 32LL, 7LL);
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = v10;
  *(void *)(v18 + 24) = v16;
  swift_retain();
  swift_bridgeObjectRetain(v16);
  uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009AF7A0);
  uint64_t v20 = sub_1000372EC( &qword_1009AF800,  (uint64_t *)&unk_1009AF7A0,  (uint64_t)&protocol conformance descriptor for Future<A, B>);
  Deferred.init(createPublisher:)(sub_1005DA5FC, v18, v19, v20);
  uint64_t v21 = sub_1000372EC(&qword_1009AF808, &qword_1009AF7F8, (uint64_t)&protocol conformance descriptor for Deferred<A>);
  uint64_t v22 = Publisher.eraseToAnyPublisher()(v6, v21);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  uint64_t result = swift_bridgeObjectRelease();
  *a3 = v22;
  return result;
}

uint64_t sub_1005D87C0()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004AEC(&qword_1009B0670);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v35 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC(&qword_1009B5570);
  uint64_t v35 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v35 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009B5578);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v36 = v8;
  uint64_t v37 = v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009B5580);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v38 = v12;
  uint64_t v39 = v13;
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v35 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v40 = *(id *)(*(void *)(v0 + 40) + 24LL);
  swift_retain();
  uint64_t v16 = sub_100004AEC(&qword_1009B5588);
  uint64_t v17 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v18 = sub_1000372EC( &qword_1009B5590,  &qword_1009B5588,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.compactMap<A>(_:)(sub_1005D8B44, 0LL, v16, v17, v18);
  swift_release();
  uint64_t v19 = swift_retain();
  uint64_t v20 = static Subscribers.Demand.unlimited.getter(v19);
  uint64_t v21 = sub_100004AEC(&qword_1009B5598);
  uint64_t v22 = sub_1000372EC( &qword_1009B55A0,  &qword_1009B5570,  (uint64_t)&protocol conformance descriptor for Publishers.CompactMap<A, B>);
  uint64_t v23 = sub_1000372EC(&qword_1009B55A8, &qword_1009B5598, (uint64_t)&unk_100800438);
  Publisher<>.flatMap<A>(maxPublishers:_:)(v20, sub_1005D9FF8, v1, v5, v21, v22, v23);
  swift_release();
  (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v5);
  id v40 = *(id *)(v1 + 48);
  id v24 = v40;
  uint64_t v25 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 56LL))(v4, 1LL, 1LL, v25);
  unint64_t v26 = sub_100004AB0();
  uint64_t v27 = sub_1000372EC( &qword_1009B55B0,  &qword_1009B5578,  (uint64_t)&protocol conformance descriptor for Publishers.FlatMap<A, B>);
  uint64_t v28 = sub_100007864( (unint64_t *)&qword_1009B06C0,  (uint64_t (*)(uint64_t))sub_100004AB0,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  id v29 = v24;
  uint64_t v30 = v36;
  Publisher.subscribe<A>(on:options:)(&v40, v4, v36, v26, v27, v28);
  sub_100015794((uint64_t)v4, &qword_1009B0670);

  (*(void (**)(char *, uint64_t))(v37 + 8))(v11, v30);
  uint64_t v31 = sub_1000372EC( &qword_1009B55B8,  &qword_1009B5580,  (uint64_t)&protocol conformance descriptor for Publishers.SubscribeOn<A, B>);
  uint64_t v32 = v38;
  uint64_t v33 = Publisher<>.sink(receiveValue:)(sub_1005D8D84, 0LL, v38, v31);
  (*(void (**)(char *, uint64_t))(v39 + 8))(v15, v32);
  *(void *)(v1 + 56) = v33;
  return swift_release();
}

uint64_t sub_1005D8B44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for PairingEvent(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v11 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(a1, (uint64_t)v6, v7);
  if (swift_getEnumCaseMultiPayload(v6, v4) == 1)
  {
    uint64_t v8 = type metadata accessor for OwnedBeaconRecord(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(a2, 1LL, 1LL, v8);
    return sub_100018C68((uint64_t)v6, type metadata accessor for PairingEvent);
  }

  else
  {
    sub_10001DBBC((uint64_t)v6, a2);
    uint64_t v10 = type metadata accessor for OwnedBeaconRecord(0LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))( a2,  0LL,  1LL,  v10);
  }

uint64_t sub_1005D8C38()
{
  return static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.SeparationMonitoringEnrollmentService.handleFreshlyPairedOrUpgradedBeacon",  103LL,  2LL,  sub_1005DA000);
}

uint64_t sub_1005D8CB8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = sub_100004AEC(&qword_1009B55C0);
  uint64_t v5 = sub_1000372EC( &qword_1009B55C8,  &qword_1009B55C0,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  Publisher.handleEvents(receiveSubscription:receiveOutput:receiveCompletion:receiveCancel:receiveRequest:)( 0LL,  0LL,  0LL,  0LL,  j___s10FindMyBase11TransactionC7captureyyF,  a1,  0LL,  0LL,  0LL,  0LL,  v4,  v5);
  swift_release();
  return swift_release();
}

void sub_1005D8D84(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v33 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v33 - v6;
  uint64_t v8 = sub_100004AEC(&qword_1009B5568);
  __chkstk_darwin(v8);
  uint64_t v10 = (void **)((char *)&v33 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_1005D9FB0(a1, (uint64_t)v10);
  if (swift_getEnumCaseMultiPayload(v10, v8) == 1)
  {
    uint64_t v11 = *v10;
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    sub_10000A720(v12, (uint64_t)qword_100A2AAA0);
    id v13 = v11;
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.error.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v17 = swift_slowAlloc(32LL, -1LL);
      uint64_t v33 = (uint64_t)v13;
      uint64_t v34 = v17;
      *(_DWORD *)uint64_t v16 = 136315138;
      type metadata accessor for SPSeparationMonitoringError(0LL);
      uint64_t v19 = v18;
      id v20 = v13;
      uint64_t v21 = String.init<A>(describing:)(&v33, v19);
      uint64_t v33 = sub_1003F11D4(v21, v22, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v16 + 4, v16 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to automatically enroll beacon due to: %s", v16, 0xCu);
      swift_arrayDestroy(v17, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v17, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    else
    {
    }
  }

  else
  {
    sub_10001DBBC((uint64_t)v10, (uint64_t)v7);
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v23 = type metadata accessor for Logger(0LL);
    sub_10000A720(v23, (uint64_t)qword_100A2AAA0);
    uint64_t v24 = sub_10001DC4C((uint64_t)v7, (uint64_t)v5, type metadata accessor for OwnedBeaconRecord);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      uint64_t v34 = v28;
      *(_DWORD *)uint64_t v27 = 136315138;
      uint64_t v29 = type metadata accessor for UUID(0LL);
      uint64_t v30 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(v29, v30);
      uint64_t v33 = sub_1003F11D4(v31, v32, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v5, type metadata accessor for OwnedBeaconRecord);
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Successfully enrolled beacon %s", v27, 0xCu);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    else
    {

      sub_100018C68((uint64_t)v5, type metadata accessor for OwnedBeaconRecord);
    }

    sub_100018C68((uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
  }

void sub_1005D91BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v4);
  uint64_t v66 = &v55[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v67 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v6 = *(void *)(v67 - 8);
  uint64_t v7 = __chkstk_darwin(v67);
  char v62 = &v55[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v60 = &v55[-v10];
  uint64_t v61 = v11;
  __chkstk_darwin(v9);
  id v13 = &v55[-v12];
  uint64_t v14 = type metadata accessor for SystemVersionNumber(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  unint64_t v64 = &v55[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v18 = __chkstk_darwin(v16);
  id v20 = &v55[-v19];
  __chkstk_darwin(v18);
  unint64_t v22 = &v55[-v21];
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v23 = type metadata accessor for Logger(0LL);
  uint64_t v24 = sub_10000A720(v23, (uint64_t)qword_100A2AAA0);
  uint64_t v25 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v68 = a1;
  v25(v22, a1, v14);
  uint64_t v26 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v25)(v20, a2, v14);
  uint64_t v65 = v24;
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.default.getter(v27);
  int v29 = v28;
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v30 = swift_slowAlloc(22LL, -1LL);
    uint64_t v57 = swift_slowAlloc(64LL, -1LL);
    uint64_t v72 = v57;
    *(_DWORD *)uint64_t v30 = 136315394;
    uint64_t v31 = sub_100007864( &qword_1009B5560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemVersionNumber,  (uint64_t)&protocol conformance descriptor for SystemVersionNumber);
    uint64_t v58 = v6;
    uint64_t v32 = v31;
    int v56 = v29;
    uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter(v14, v31);
    uint64_t v70 = sub_1003F11D4(v33, v34, &v72);
    uint64_t v59 = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v30 + 4, v30 + 12);
    swift_bridgeObjectRelease();
    uint64_t v35 = *(void (**)(_BYTE *, uint64_t))(v15 + 8);
    v35(v22, v14);
    *(_WORD *)(v30 + 12) = 2080;
    uint64_t v36 = v32;
    uint64_t v6 = v58;
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter(v14, v36);
    uint64_t v70 = sub_1003F11D4(v37, v38, &v72);
    id v13 = v59;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, &v71, v30 + 14, v30 + 22);
    swift_bridgeObjectRelease();
    uint64_t v63 = (void (*)(void, void))v35;
    v35(v20, v14);
    _os_log_impl( (void *)&_mh_execute_header,  v27,  (os_log_type_t)v56,  "Handling local beacon migration from: %s to: %s",  (uint8_t *)v30,  0x16u);
    uint64_t v39 = v57;
    swift_arrayDestroy(v57, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v39, -1LL, -1LL);
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  else
  {
    id v40 = *(void (**)(_BYTE *, uint64_t))(v15 + 8);
    v40(v22, v14);
    uint64_t v63 = (void (*)(void, void))v40;
    v40(v20, v14);
  }

  uint64_t v41 = *(void *)(v69 + 32);
  uint64_t v42 = sub_1005067E8();
  uint64_t v43 = v66;
  if (v42[2])
  {
    sub_10001DC4C( (uint64_t)v42 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80)),  (uint64_t)v66,  type metadata accessor for OwnedBeaconRecord);
    uint64_t v44 = 0LL;
  }

  else
  {
    uint64_t v44 = 1LL;
  }

  uint64_t v45 = v67;
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v43, v44, 1LL, v67);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v43, 1LL, v45) != 1)
  {
    sub_10001DBBC((uint64_t)v43, (uint64_t)v13);
    uint64_t v50 = sub_1002BBAD8((uint64_t)v13, v41);
    sub_1004E4F28(8u, (uint64_t)v50);
    swift_bridgeObjectRelease();
    uint64_t v51 = (uint64_t *)&v13[*(int *)(v45 + 56)];
    uint64_t v53 = *v51;
    uint64_t v52 = v51[1];
    swift_bridgeObjectRetain(v52);
    sub_100023138(v53, v52);
    __asm { BR              X10 }
  }

  uint64_t v46 = sub_100015794((uint64_t)v43, (uint64_t *)&unk_1009A9C30);
  uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
  os_log_type_t v48 = static os_log_type_t.error.getter(v47);
  if (os_log_type_enabled(v47, v48))
  {
    uint64_t v49 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v49 = 0;
    _os_log_impl((void *)&_mh_execute_header, v47, v48, "Local beacon not found, can't migrate", v49, 2u);
    swift_slowDealloc(v49, -1LL, -1LL);
  }
}

uint64_t sub_1005D9A9C(uint64_t a1, uint64_t a2)
{
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2AAA0);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.default.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v8 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "Will attempt to automatically enroll local beacon after migration",  v8,  2u);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  sub_1005D7FB4(a2);
  uint64_t v9 = sub_100004AEC(&qword_1009B5548);
  uint64_t v10 = sub_1000372EC(&qword_1009B5550, &qword_1009B5548, (uint64_t)&unk_100800438);
  uint64_t v11 = Publisher<>.sink(receiveValue:)(sub_1005D9BF4, 0LL, v9, v10);
  swift_release();
  *(void *)(a1 + 64) = v11;
  return swift_release();
}

void sub_1005D9BF4(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009B5568);
  __chkstk_darwin(v2);
  uint64_t v4 = (void **)((char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_1005D9FB0(a1, (uint64_t)v4);
  if (swift_getEnumCaseMultiPayload(v4, v2) == 1)
  {
    uint64_t v5 = *v4;
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    sub_10000A720(v6, (uint64_t)qword_100A2AAA0);
    id v7 = v5;
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.error.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v11 = swift_slowAlloc(32LL, -1LL);
      uint64_t v22 = (uint64_t)v7;
      uint64_t v23 = v11;
      *(_DWORD *)uint64_t v10 = 136315138;
      type metadata accessor for SPSeparationMonitoringError(0LL);
      uint64_t v13 = v12;
      id v14 = v7;
      uint64_t v15 = String.init<A>(describing:)(&v22, v13);
      uint64_t v22 = sub_1003F11D4(v15, v16, &v23);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v22, &v23, v10 + 4, v10 + 12);

      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to automatically enroll beacon due to: %s", v10, 0xCu);
      swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v11, -1LL, -1LL);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    else
    {
    }
  }

  else
  {
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    uint64_t v18 = sub_10000A720(v17, (uint64_t)qword_100A2AAA0);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.default.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v21 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "Separation Monitoring auto-enrollment completed succesfully for local beacon.",  v21,  2u);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    sub_100015794((uint64_t)v4, &qword_1009B5568);
  }

uint64_t sub_1005D9ED0()
{
  swift_release(*(void *)(v0 + 56));
  swift_release(*(void *)(v0 + 64));
  return swift_deallocClassInstance(v0, 72LL, 7LL);
}

uint64_t type metadata accessor for SeparationMonitoringEnrollmentService()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd37SeparationMonitoringEnrollmentService);
}

uint64_t sub_1005D9F3C()
{
  return sub_1005D87C0();
}

void sub_1005D9F5C(uint64_t a1, uint64_t a2)
{
}

uint64_t sub_1005D9F80()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8) + 80LL);
  return sub_1005D9A9C(*(void *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_1005D9FB0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009B5568);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005D9FF8()
{
  return sub_1005D8C38();
}

uint64_t sub_1005DA000(uint64_t a1)
{
  return sub_1005D8CB8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1005DA01C@<X0>(uint64_t *a1@<X8>)
{
  return sub_100493630(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1005DA028()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  unint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1005DA2C8@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8) + 80LL);
  return sub_1005D8608(*(void *)(v1 + 16), v1 + ((v3 + 24) & ~v3), a1);
}

uint64_t sub_1005DA318()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  unint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1005DA5B0@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8) + 80LL);
  return sub_10001DC4C(v1 + ((v3 + 16) & ~v3), a1, type metadata accessor for OwnedBeaconRecord);
}

uint64_t sub_1005DA5FC@<X0>(uint64_t *a1@<X8>)
{
  return sub_100493D60(*(void *)(v1 + 16), *(void *)(v1 + 24), a1);
}

uint64_t sub_1005DA604(uint64_t a1)
{
  v2[0] = &unk_10080B440;
  v2[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  void v2[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v2[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  return swift_initClassMetadata2(a1, 0LL, 5LL, v2, a1 + 224);
}

void sub_1005DA664()
{
  uint64_t v1 = *(void (**)(uint64_t))(v0 + 40);
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 48);
    uint64_t v3 = swift_retain();
    v1(v3);
    sub_10002214C((uint64_t)v1, v2);
  }

  if (qword_10099B328 != -1) {
    swift_once(&qword_10099B328, sub_10035A0D4);
  }
  uint64_t v4 = type metadata accessor for Logger(0LL);
  uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2A730);
  oslog = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v6 = static os_log_type_t.default.getter(oslog);
  if (os_log_type_enabled(oslog, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, oslog, v6, "All location fetch subscriptions terminated.", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }
}

uint64_t sub_1005DA754(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 56);
  void v4[3] = a1;
  return OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_1005DAB50,  v4,  v2,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
}

void sub_1005DA7A0(uint64_t a1, uint64_t *a2)
{
  uint64_t v5 = *a2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  XPCSession.identifier.getter(v8);
  char v34 = 0;
  memset(v33, 0, sizeof(v33));
  __n128 v11 = swift_beginAccess(a1 + 80, &v31, 33LL, 0LL);
  TupleTypeMetadata2 = swift_getTupleTypeMetadata2( 255LL,  v5,  &type metadata for LocationFetchContext,  "session context ",  0LL,  v11);
  uint64_t v13 = sub_1005DAB68(&qword_1009A58F0, (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v15 = type metadata accessor for Dictionary(0LL, v6, TupleTypeMetadata2, v13, v14);
  Dictionary.subscript.setter(v33, v10, v15);
  swift_endAccess(&v31);
  if (qword_10099B328 != -1) {
    swift_once(&qword_10099B328, sub_10035A0D4);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  sub_10000A720(v16, (uint64_t)qword_100A2A730);
  uint64_t v17 = swift_retain_n(a2, 2LL);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = swift_slowAlloc(22LL, -1LL);
    uint64_t v30 = swift_slowAlloc(32LL, -1LL);
    *(void *)&v33[0] = v30;
    *(_DWORD *)uint64_t v20 = 141558275;
    uint64_t v31 = 1752392040LL;
    uint64_t v35 = v2;
    uint64_t v21 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v20 + 4, v20 + 12);
    *(_WORD *)(v20 + 12) = 2081;
    uint64_t v29 = v20 + 14;
    XPCSession.identifier.getter(v21);
    uint64_t v22 = sub_1005DAB68(qword_10099DFD0, (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v6, v22);
    uint64_t v24 = v7;
    unint64_t v26 = v25;
    (*(void (**)(char *, uint64_t))(v24 + 8))(v10, v6);
    uint64_t v31 = sub_1003F11D4(v23, v26, (uint64_t *)v33);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, v32, v29, v20 + 22);
    swift_release_n(a2, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "Removed location fetch subscription %{private,mask.hash}s.",  (uint8_t *)v20,  0x16u);
    uint64_t v27 = v30;
    swift_arrayDestroy(v30, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v27, -1LL, -1LL);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  else
  {

    swift_release_n(a2, 2LL);
  }

uint64_t sub_1005DAAA4()
{
  return swift_bridgeObjectRelease();
}

uint64_t sub_1005DAAD8()
{
  uint64_t v0 = sub_1006DA50C();
  sub_10002214C(*(void *)(v0 + 40), *(void *)(v0 + 48));
  swift_release();
  swift_release();
  swift_release();
  swift_bridgeObjectRelease();
  return v0;
}

uint64_t sub_1005DAB28()
{
  uint64_t v0 = sub_1005DAAD8();
  return swift_deallocClassInstance(v0, 88LL, 7LL);
}

uint64_t type metadata accessor for LocationFetchServiceConnections( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006A624(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for LocationFetchServiceConnections);
}

void sub_1005DAB50()
{
}

uint64_t sub_1005DAB68(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for UUID(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

void sub_1005DABA8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v26 = a2;
  uint64_t v27 = a3;
  uint64_t v6 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v25 = *(void *)(v6 - 8);
  uint64_t v7 = *(void *)(v25 + 64);
  __chkstk_darwin(v6);
  uint64_t v8 = dispatch_group_create();
  dispatch_group_enter(v8);
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v13 = (v12 + 32) & ~v12;
  uint64_t v14 = swift_allocObject(v9, v13 + *(void *)(v11 + 72), v12 | 7);
  *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v14 + v13, a1 + *(int *)(v6 + 20), v10);
  uint64_t v15 = swift_allocObject(&unk_1009689A0, 24LL, 7LL);
  *(void *)(v15 + swift_weakDestroy(v0 + 16) = v8;
  uint64_t v16 = v8;
  sub_10047B904(v14, (uint64_t)sub_100595A68, v15);
  swift_bridgeObjectRelease();
  swift_release();
  OS_dispatch_group.wait()();
  sub_10001DC4C(a1, (uint64_t)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL), type metadata accessor for SharedBeaconRecord);
  uint64_t v17 = *(unsigned __int8 *)(v25 + 80);
  uint64_t v18 = (v17 + 16) & ~v17;
  unint64_t v19 = (v7 + v18 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v20 = (v19 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = swift_allocObject(&unk_1009689C8, v20 + 8, v17 | 7);
  sub_10002218C( (uint64_t)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v21 + v18,  type metadata accessor for SharedBeaconRecord);
  uint64_t v22 = (void *)(v21 + v19);
  uint64_t v23 = v27;
  *uint64_t v22 = v26;
  v22[1] = v23;
  *(void *)(v21 + v20) = v4;
  swift_retain();
  swift_retain();
  sub_10013F740(a1, (void (*)(void))sub_1005DC74C, v21);
  swift_release();
}

uint64_t sub_1005DAD9C()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v30 = (char *)&v29 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009B5370);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v29 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v29 - v13;
  __chkstk_darwin(v12);
  uint64_t v16 = (uint64_t *)((char *)&v29 - v15);
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v17 = v31;
  uint64_t KeyPath = swift_getKeyPath(&unk_10080B488);
  sub_1006A1FC0(KeyPath, v17, v16);
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v19 = type metadata accessor for OwnedBeaconRecord(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v3 + 16))(v14, v1 + *(int *)(v19 + 20), v2);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v3 + 56))(v14, 0LL, 1LL, v2);
  uint64_t v20 = (uint64_t)&v7[*(int *)(v5 + 48)];
  sub_1003131AC((uint64_t)v16, (uint64_t)v7);
  sub_1003131AC((uint64_t)v14, v20);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  if (v21((uint64_t)v7, 1LL, v2) == 1)
  {
    sub_100015794((uint64_t)v14, &qword_10099D8A0);
    sub_100015794((uint64_t)v16, &qword_10099D8A0);
    int v22 = v21(v20, 1LL, v2);
    if (v22 == 1) {
      uint64_t v23 = &qword_10099D8A0;
    }
    else {
      uint64_t v23 = (uint64_t *)&unk_1009B5370;
    }
    if (v22 == 1) {
      char v24 = -1;
    }
    else {
      char v24 = 0;
    }
  }

  else
  {
    sub_1003131AC((uint64_t)v7, (uint64_t)v11);
    if (v21(v20, 1LL, v2) == 1)
    {
      sub_100015794((uint64_t)v14, &qword_10099D8A0);
      sub_100015794((uint64_t)v16, &qword_10099D8A0);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v11, v2);
      char v24 = 0;
      uint64_t v23 = (uint64_t *)&unk_1009B5370;
    }

    else
    {
      uint64_t v25 = v30;
      (*(void (**)(char *, uint64_t, uint64_t))(v3 + 32))(v30, v20, v2);
      uint64_t v26 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v25, v2, v26);
      uint64_t v27 = *(void (**)(char *, uint64_t))(v3 + 8);
      v27(v25, v2);
      uint64_t v23 = &qword_10099D8A0;
      sub_100015794((uint64_t)v14, &qword_10099D8A0);
      sub_100015794((uint64_t)v16, &qword_10099D8A0);
      v27(v11, v2);
    }
  }

  sub_100015794((uint64_t)v7, v23);
  return v24 & 1;
}

void sub_1005DB104(int a1, int a2, dispatch_group_t group)
{
}

uint64_t sub_1005DB10C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, int a6, int a7)
{
  int v47 = a6;
  int v48 = a7;
  uint64_t v49 = a5;
  uint64_t v53 = a4;
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v52 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v46 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v50 = *(void *)(v13 - 8);
  uint64_t v51 = v13;
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v46 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  uint64_t v18 = *(void *)(v17 + 64);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    uint64_t v52 = a3;
    uint64_t v20 = swift_errorRetain(a1);
    uint64_t v21 = static os_log_type_t.error.getter(v20);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v22 = qword_100A2B018;
    uint64_t v23 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v24 = swift_allocObject(v23, 112LL, 7LL);
    *(_OWORD *)(v24 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    uint64_t v25 = UUID.uuidString.getter(v24);
    uint64_t v27 = v26;
    *(void *)(v24 + 56) = &type metadata for String;
    unint64_t v28 = sub_1000226F4();
    *(void *)(v24 + 64) = v28;
    *(void *)(v24 + 32) = v25;
    *(void *)(v24 + 40) = v27;
    aBlock[0] = a1;
    swift_errorRetain(a1);
    uint64_t v29 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v30 = String.init<A>(describing:)(aBlock, v29);
    *(void *)(v24 + 96) = &type metadata for String;
    *(void *)(v24 + 104) = v28;
    *(void *)(v24 + 72) = v30;
    *(void *)(v24 + 80) = v31;
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "Error unpairing OwnedBeaconRecord %@: %@", 40LL, 2LL, v24);
    swift_bridgeObjectRelease();
    swift_errorRetain(a1);
    ((void (*)(uint64_t))v52)(a1);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }

  else
  {
    uint64_t v33 = v49;
    uint64_t v46 = *(void *)(v49 + 48);
    sub_10001DC4C(a2, (uint64_t)&v46 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL), type metadata accessor for OwnedBeaconRecord);
    uint64_t v34 = *(unsigned __int8 *)(v17 + 80);
    uint64_t v35 = (v34 + 24) & ~v34;
    uint64_t v36 = v35 + v18;
    unint64_t v37 = (v35 + v18 + 9) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v38 = swift_allocObject(&unk_100968900, v37 + 16, v34 | 7);
    *(void *)(v38 + swift_weakDestroy(v0 + 16) = v33;
    sub_10002218C((uint64_t)v19, v38 + v35, type metadata accessor for OwnedBeaconRecord);
    uint64_t v39 = (_BYTE *)(v38 + v36);
    *uint64_t v39 = v47 & 1;
    v39[1] = v48 & 1;
    id v40 = (void *)(v38 + v37);
    *id v40 = a3;
    v40[1] = v53;
    aBlock[4] = sub_1005DBDE0;
    void aBlock[5] = v38;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    aBlock[3] = &unk_100968918;
    uint64_t v41 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v42 = swift_retain();
    static DispatchQoS.unspecified.getter(v42);
    uint64_t v54 = _swiftEmptyArrayStorage;
    uint64_t v43 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v44 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    unint64_t v45 = sub_100012FF8();
    dispatch thunk of SetAlgebra.init<A>(_:)(&v54, v44, v45, v10, v43);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v15, v12, v41);
    _Block_release(v41);
    (*(void (**)(char *, uint64_t))(v52 + 8))(v12, v10);
    (*(void (**)(char *, uint64_t))(v50 + 8))(v15, v51);
    return swift_release();
  }

uint64_t sub_1005DB4D8(uint64_t a1, uint64_t a2, int a3, int a4, uint64_t a5, uint64_t a6)
{
  uint64_t v58 = a5;
  uint64_t v59 = a6;
  LODWORD(v57) = a4;
  LODWORD(v54) = a3;
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v61 = *(void *)(v8 - 8);
  uint64_t v62 = v8;
  __chkstk_darwin(v8);
  uint64_t v60 = (char *)&v51 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v52 = (uint64_t)&v51 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v53 = (char *)&v51 - v13;
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v55 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for UUID(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v51 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v71 = v21;
  uint64_t v72 = sub_100007864( (unint64_t *)&qword_10099D000,  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_10080B120);
  uint64_t v22 = sub_10000A7C8(aBlock);
  uint64_t v56 = a2;
  sub_10001DC4C(a2, (uint64_t)v22, type metadata accessor for OwnedBeaconRecord);
  uint64_t v23 = v71;
  uint64_t v24 = v72;
  sub_100012ED8(aBlock, (uint64_t)v71);
  (*(void (**)(void *))(*(void *)(*(void *)(v24 + 8) + 8LL) + 32LL))(v23);
  uint64_t v25 = type metadata accessor for Transaction(0LL);
  unint64_t v64 = v20;
  uint64_t v65 = a1;
  uint64_t v66 = aBlock;
  char v67 = v54;
  char v68 = v57;
  uint64_t v57 = v25;
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-deleteRelatedRecords",  49LL,  2LL,  sub_10002215C,  v63);
  uint64_t v51 = v18;
  uint64_t v26 = *(void (**)(char *, uint64_t))(v18 + 8);
  uint64_t v54 = v17;
  v26(v20, v17);
  uint64_t v27 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
  if (qword_10099B300 != -1) {
    uint64_t v27 = swift_once(&qword_10099B300, sub_1003459EC);
  }
  uint64_t v28 = qword_100A2A6C8;
  uint64_t v29 = v56 + v21[5];
  uint64_t v30 = static DispatchWorkItemFlags.barrier.getter(v27);
  __chkstk_darwin(v30);
  *(&v51 - 4) = v28;
  *(&v51 - 3) = v29;
  *(&v51 - 2) = (uint64_t)sub_10001CC40;
  *(&v51 - 1) = 0LL;
  OS_dispatch_queue.sync<A>(flags:execute:)(v16, sub_1000DEE24);
  uint64_t v31 = *(void (**)(char *, uint64_t))(v55 + 8);
  v31(v16, v14);
  uint64_t v32 = sub_1005DAD9C();
  if ((v32 & 1) != 0)
  {
    uint64_t v33 = static os_log_type_t.default.getter(v32);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v34 = qword_100A2B018;
    uint64_t v35 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v36 = swift_allocObject(v35, 72LL, 7LL);
    *(_OWORD *)(v36 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v37 = UUID.uuidString.getter(v36);
    uint64_t v39 = v38;
    *(void *)(v36 + 56) = &type metadata for String;
    *(void *)(v36 + 64) = sub_1000226F4();
    *(void *)(v36 + 32) = v37;
    *(void *)(v36 + 40) = v39;
    os_log(_:dso:log:_:_:)( v33,  &_mh_execute_header,  v34,  "Deleted current self-beacon OwnedBeaconRecord %@",  48LL,  2LL,  v36);
    swift_bridgeObjectRelease();
    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    uint64_t v40 = (uint64_t)v53;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v51 + 56))(v53, 1LL, 1LL, v54);
    sub_100024954();
    uint64_t v41 = v52;
    sub_1003131AC(v40, v52);
    sub_10061FEF4(v41);
    swift_release();
    sub_100015794(v40, &qword_10099D8A0);
  }

  QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
  sub_1004E696C(4u);
  static Transaction.named<A>(_:with:)("com.apple.searchpartyd.triggerSiriDeviceNameSync", 48LL, 2LL, sub_1000220C8, a1);
  sub_1004F1250();
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
  static Transaction.asyncTask(name:block:)( "BeaconStore.canBeLeashedByHostStateChanged",  42LL,  2LL,  &unk_1009B2780,  0LL);
  uint64_t v42 = swift_allocObject(&unk_100968950, 32LL, 7LL);
  uint64_t v43 = v59;
  *(void *)(v42 + swift_weakDestroy(v0 + 16) = v58;
  *(void *)(v42 + 24) = v43;
  uint64_t v72 = (uint64_t)sub_10020CE78;
  uint64_t v73 = v42;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  uint64_t v71 = &unk_100968968;
  uint64_t v44 = _Block_copy(aBlock);
  uint64_t v45 = swift_retain();
  uint64_t v46 = v60;
  static DispatchQoS.unspecified.getter(v45);
  uint64_t v69 = _swiftEmptyArrayStorage;
  uint64_t v47 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v48 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  unint64_t v49 = sub_100012FF8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v69, v48, v49, v14, v47);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v46, v16, v44);
  _Block_release(v44);
  v31(v16, v14);
  (*(void (**)(char *, uint64_t))(v61 + 8))(v46, v62);
  return swift_release();
}

uint64_t sub_1005DBB28()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 9) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | 7);
}

uint64_t sub_1005DBDE0()
{
  uint64_t v1 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = v2 + *(void *)(v1 + 64);
  return sub_1005DB4D8( *(void *)(v0 + 16),  v0 + v2,  *(unsigned __int8 *)(v0 + v3),  *(unsigned __int8 *)(v0 + v3 + 1),  *(void *)(v0 + ((v3 + 9) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((v3 + 9) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_1005DBE34(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1005DBE44(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1005DBE4C( uint64_t a1, uint64_t a2, void (*a3)(uint64_t), void (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v44 = a5;
  uint64_t v45 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v48 = *(void (**)(uint64_t))(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v10 = (char *)v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v46 = *(void *)(v11 - 8);
  uint64_t v47 = (void (*)(uint64_t))v11;
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)v43 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = *(void *)(v15 + 64);
  __chkstk_darwin(v14);
  unint64_t v17 = (char *)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    uint64_t v47 = a3;
    uint64_t v48 = a4;
    uint64_t v18 = swift_errorRetain(a1);
    uint64_t v19 = static os_log_type_t.error.getter(v18);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v20 = qword_100A2B018;
    uint64_t v21 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v22 = swift_allocObject(v21, 112LL, 7LL);
    *(_OWORD *)(v22 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    uint64_t v23 = UUID.uuidString.getter(v22);
    uint64_t v25 = v24;
    *(void *)(v22 + 56) = &type metadata for String;
    unint64_t v26 = sub_1000226F4();
    *(void *)(v22 + 64) = v26;
    *(void *)(v22 + 32) = v23;
    *(void *)(v22 + 40) = v25;
    aBlock[0] = a1;
    swift_errorRetain(a1);
    uint64_t v27 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v28 = String.init<A>(describing:)(aBlock, v27);
    *(void *)(v22 + 96) = &type metadata for String;
    *(void *)(v22 + 104) = v26;
    *(void *)(v22 + 72) = v28;
    *(void *)(v22 + 80) = v29;
    os_log(_:dso:log:_:_:)(v19, &_mh_execute_header, v20, "Error unpairing SharedBeaconRecord %@: %@", 41LL, 2LL, v22);
    swift_bridgeObjectRelease();
    swift_errorRetain(a1);
    v47(a1);
    swift_errorRelease(a1);
    return swift_errorRelease(a1);
  }

  else
  {
    uint64_t v31 = v44;
    v43[1] = *(void *)(v44 + 48);
    sub_10001DC4C(a2, (uint64_t)v43 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL), type metadata accessor for SharedBeaconRecord);
    uint64_t v32 = *(unsigned __int8 *)(v15 + 80);
    uint64_t v33 = (v32 + 24) & ~v32;
    unint64_t v34 = (v16 + v33 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v35 = swift_allocObject(&unk_1009689F0, v34 + 16, v32 | 7);
    *(void *)(v35 + swift_weakDestroy(v0 + 16) = v31;
    sub_10002218C((uint64_t)v17, v35 + v33, type metadata accessor for SharedBeaconRecord);
    uint64_t v36 = (void (**)(uint64_t))(v35 + v34);
    *uint64_t v36 = a3;
    v36[1] = a4;
    aBlock[4] = sub_1005DC964;
    void aBlock[5] = v35;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    void aBlock[3] = &unk_100968A08;
    uint64_t v37 = _Block_copy(aBlock);
    swift_retain();
    uint64_t v38 = swift_retain();
    static DispatchQoS.unspecified.getter(v38);
    unint64_t v49 = _swiftEmptyArrayStorage;
    uint64_t v39 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v40 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    unint64_t v41 = sub_100012FF8();
    uint64_t v42 = v45;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v49, v40, v41, v45, v39);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v10, v37);
    _Block_release(v37);
    (*((void (**)(char *, uint64_t))v48 + 1))(v10, v42);
    (*(void (**)(char *, void (*)(uint64_t)))(v46 + 8))(v13, v47);
    return swift_release();
  }

uint64_t sub_1005DC1EC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v27 = a3;
  uint64_t v28 = a4;
  uint64_t v29 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v32 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v30 = *(void *)(v8 - 8);
  uint64_t v31 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v27 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = (void *)type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v41 = sub_100007864(&qword_10099CFF8, type metadata accessor for SharedBeaconRecord, (uint64_t)&unk_10081ADAC);
  uint64_t v15 = sub_10000A7C8(aBlock);
  sub_10001DC4C(a2, (uint64_t)v15, type metadata accessor for SharedBeaconRecord);
  unint64_t v17 = v40;
  uint64_t v16 = v41;
  sub_100012ED8(aBlock, (uint64_t)v40);
  (*(void (**)(void *))(*(void *)(*(void *)(v16 + 8) + 8LL) + 32LL))(v17);
  type metadata accessor for Transaction(0LL);
  unint64_t v34 = v14;
  uint64_t v35 = a1;
  uint64_t v36 = aBlock;
  __int16 v37 = 257;
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchparty-deleteRelatedRecords",  49LL,  2LL,  sub_10002215C,  v33);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100021ABC);
  sub_1004E696C(4u);
  static Transaction.named<A>(_:with:)("com.apple.searchpartyd.triggerSiriDeviceNameSync", 48LL, 2LL, sub_1000220C8, a1);
  uint64_t v18 = swift_allocObject(&unk_100968A40, 32LL, 7LL);
  uint64_t v19 = v28;
  *(void *)(v18 + swift_weakDestroy(v0 + 16) = v27;
  *(void *)(v18 + 24) = v19;
  uint64_t v41 = (uint64_t)sub_10020FF70;
  uint64_t v42 = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  uint64_t v40 = &unk_100968A58;
  uint64_t v20 = _Block_copy(aBlock);
  uint64_t v21 = swift_retain();
  static DispatchQoS.unspecified.getter(v21);
  uint64_t v38 = _swiftEmptyArrayStorage;
  uint64_t v22 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  unint64_t v24 = sub_100012FF8();
  uint64_t v25 = v29;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v23, v24, v29, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v7, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v7, v25);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v10, v31);
  return swift_release();
}

uint64_t sub_1005DC540()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1005DC568()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1005DC58C()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v0 + v4 + v1[18];
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  uint64_t v12 = v0 + v4 + v1[19];
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1LL, v7)) {
    v9(v12, v7);
  }
  uint64_t v14 = v0 + v4 + v1[20];
  uint64_t v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v14, 1LL, v15))
  {
    uint64_t v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1LL, v7)) {
      v9(v16, v7);
    }
  }

  swift_release();
  swift_release();
  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 23) & 0xFFFFFFFFFFFFFFF8LL) + 8, v3 | 7);
}

uint64_t sub_1005DC74C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for SharedBeaconRecord(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_1005DBE4C( a1,  v1 + v4,  *(void (**)(uint64_t))(v1 + v5),  *(void (**)(uint64_t))(v1 + v5 + 8),  *(void *)(v1 + ((v5 + 23) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_1005DC7AC()
{
  uint64_t v1 = (int *)type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v6 = v0 + v4 + v1[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  v9(v0 + v4 + v1[6], v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v10 = v0 + v4 + v1[18];
  uint64_t v11 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  uint64_t v12 = v0 + v4 + v1[19];
  uint64_t v13 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v8 + 48);
  if (!v13(v12, 1LL, v7)) {
    v9(v12, v7);
  }
  uint64_t v14 = v0 + v4 + v1[20];
  uint64_t v15 = type metadata accessor for SharedBeaconRecord.PropertyListContent(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v14, 1LL, v15))
  {
    uint64_t v16 = v14 + *(int *)(v15 + 20);
    if (!v13(v16, 1LL, v7)) {
      v9(v16, v7);
    }
  }

  swift_release();
  return swift_deallocObject(v0, ((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | 7);
}

uint64_t sub_1005DC964()
{
  uint64_t v1 = *(void *)(type metadata accessor for SharedBeaconRecord(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (uint64_t *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  return sub_1005DC1EC(*(void *)(v0 + 16), v0 + v2, *v3, v3[1]);
}

uint64_t *sub_1005DC9C8(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v22 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v22 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = *a2;
    unint64_t v8 = a2[1];
    sub_10001736C(*a2, v8);
    *a1 = v7;
    a1[1] = v8;
    uint64_t v9 = a3[5];
    uint64_t v10 = (char *)a1 + v9;
    uint64_t v11 = (char *)a2 + v9;
    uint64_t v12 = type metadata accessor for UUID(0LL);
    uint64_t v13 = *(void (**)(char *, char *, uint64_t))(*(void *)(v12 - 8) + 16LL);
    v13(v10, v11, v12);
    v13((char *)a1 + a3[6], (char *)a2 + a3[6], v12);
    uint64_t v14 = a3[8];
    *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
    uint64_t v15 = (uint64_t *)((char *)a1 + v14);
    uint64_t v16 = (uint64_t *)((char *)a2 + v14);
    uint64_t v17 = v16[1];
    *uint64_t v15 = *v16;
    v15[1] = v17;
    uint64_t v18 = a3[9];
    uint64_t v19 = (uint64_t *)((char *)a1 + v18);
    uint64_t v20 = (uint64_t *)((char *)a2 + v18);
    uint64_t v21 = v20[1];
    *uint64_t v19 = *v20;
    v19[1] = v21;
    swift_bridgeObjectRetain(v17);
    swift_bridgeObjectRetain(v21);
  }

  return a1;
}

uint64_t sub_1005DCAC8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v6(v4, v5);
  v6(a1 + *(int *)(a2 + 24), v5);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t *sub_1005DCB58(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  *a1 = v6;
  a1[1] = v7;
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], (char *)a2 + a3[6], v11);
  uint64_t v13 = a3[8];
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  uint64_t v15 = (uint64_t *)((char *)a2 + v13);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = a3[9];
  uint64_t v18 = (uint64_t *)((char *)a1 + v17);
  uint64_t v19 = (uint64_t *)((char *)a2 + v17);
  uint64_t v20 = v19[1];
  *uint64_t v18 = *v19;
  v18[1] = v20;
  swift_bridgeObjectRetain(v16);
  swift_bridgeObjectRetain(v20);
  return a1;
}

uint64_t *sub_1005DCC2C(uint64_t *a1, uint64_t *a2, int *a3)
{
  uint64_t v6 = *a2;
  unint64_t v7 = a2[1];
  sub_10001736C(*a2, v7);
  uint64_t v8 = *a1;
  unint64_t v9 = a1[1];
  *a1 = v6;
  a1[1] = v7;
  sub_100016F9C(v8, v9);
  uint64_t v10 = a3[5];
  uint64_t v11 = (char *)a1 + v10;
  uint64_t v12 = (char *)a2 + v10;
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void (**)(char *, char *, uint64_t))(*(void *)(v13 - 8) + 24LL);
  v14(v11, v12, v13);
  v14((char *)a1 + a3[6], (char *)a2 + a3[6], v13);
  *(uint64_t *)((char *)a1 + a3[7]) = *(uint64_t *)((char *)a2 + a3[7]);
  uint64_t v15 = a3[8];
  uint64_t v16 = (uint64_t *)((char *)a1 + v15);
  uint64_t v17 = (uint64_t *)((char *)a2 + v15);
  *uint64_t v16 = *v17;
  uint64_t v18 = v17[1];
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[9];
  uint64_t v20 = (uint64_t *)((char *)a1 + v19);
  uint64_t v21 = (uint64_t *)((char *)a2 + v19);
  *uint64_t v20 = *v21;
  uint64_t v22 = v21[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease();
  return a1;
}

char *sub_1005DCD30(char *a1, char *a2, int *a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  uint64_t v6 = a3[5];
  unint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  v10(&a1[a3[6]], &a2[a3[6]], v9);
  uint64_t v11 = a3[8];
  *(void *)&a1[a3[7]] = *(void *)&a2[a3[7]];
  *(_OWORD *)&a1[v11] = *(_OWORD *)&a2[v11];
  *(_OWORD *)&a1[a3[9]] = *(_OWORD *)&a2[a3[9]];
  return a1;
}

uint64_t *sub_1005DCDDC(uint64_t *a1, char *a2, int *a3)
{
  uint64_t v6 = *a1;
  unint64_t v7 = a1[1];
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016F9C(v6, v7);
  uint64_t v8 = a3[5];
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = &a2[v8];
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL);
  v12(v9, v10, v11);
  v12((char *)a1 + a3[6], &a2[a3[6]], v11);
  uint64_t v13 = a3[8];
  *(uint64_t *)((char *)a1 + a3[7]) = *(void *)&a2[a3[7]];
  uint64_t v14 = (uint64_t *)((char *)a1 + v13);
  uint64_t v15 = (uint64_t *)&a2[v13];
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[9];
  uint64_t v19 = (uint64_t *)((char *)a1 + v18);
  uint64_t v20 = (uint64_t *)&a2[v18];
  uint64_t v22 = *v20;
  uint64_t v21 = v20[1];
  *uint64_t v19 = v22;
  v19[1] = v21;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1005DCEB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005DCEC0);
}

uint64_t sub_1005DCEC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 32) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_1005DCF44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005DCF50);
}

uint64_t sub_1005DCF50(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))( a1 + *(int *)(a4 + 20),  a2,  a2,  result);
  }
  *(void *)(a1 + *(int *)(a4 + 32) + 8) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for BeaconNamingRecord(uint64_t a1)
{
  uint64_t result = qword_1009B56E8;
  if (!qword_1009B56E8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconNamingRecord);
  }
  return result;
}

uint64_t sub_1005DD00C(uint64_t a1)
{
  uint64_t v4 = &unk_10080B4E8;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(result - 8) + 64LL;
    uint64_t v6 = v5;
    uint64_t v7 = (char *)&value witness table for Builtin.Int64 + 64;
    uint64_t v8 = &unk_10080B500;
    uint64_t v9 = &unk_10080B518;
    swift_initStructMetadata(a1, 256LL, 6LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1005DD0A4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v4 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v67 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v67 - v8;
  uint64_t v80 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v80 - 8);
  uint64_t v11 = __chkstk_darwin(v80);
  uint64_t v77 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v79 = (char *)&v67 - v13;
  uint64_t v14 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v75 = (int *)v14;
  uint64_t v76 = a2;
  uint64_t v15 = (uint64_t *)((char *)a2 + *(int *)(v14 + 36));
  *uint64_t v15 = 0LL;
  v15[1] = 0LL;
  uint64_t v16 = CKRecord.recordType.getter(v14);
  if (v16 == 0xD000000000000012LL && v17 == 0x800000010080B4B0LL)
  {
    swift_bridgeObjectRelease();
  }

  else
  {
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, 0xD000000000000012LL, 0x800000010080B4B0LL, 0LL);
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
      unint64_t v41 = sub_1005DEA04();
      uint64_t v42 = swift_allocError(&type metadata for BeaconNamingRecord.BeaconNamingRecordConversionError, v41, 0LL, 0LL);
      *uint64_t v43 = 0;
      swift_willThrow(v42);

      return swift_bridgeObjectRelease();
    }
  }

  uint64_t v78 = v15;
  id v19 = [a1 recordID];
  id v20 = [v19 recordName];

  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v20);
  uint64_t v23 = v22;

  UUID.init(uuidString:)(v21, v23);
  swift_bridgeObjectRelease();
  unint64_t v24 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  uint64_t v25 = v80;
  if (v24(v9, 1LL, v80) == 1)
  {
    sub_1001BC5AC((uint64_t)v9);
    unint64_t v26 = sub_1005DEA04();
    uint64_t v27 = swift_allocError(&type metadata for BeaconNamingRecord.BeaconNamingRecordConversionError, v26, 0LL, 0LL);
    *uint64_t v28 = 1;
    swift_willThrow(v27);

    return swift_bridgeObjectRelease();
  }

  uint64_t v73 = *(void (**)(char *, char *, uint64_t))(v10 + 32);
  v73(v79, v9, v25);
  id v29 = [a1 encryptedValues];
  uint64_t ObjectType = swift_getObjectType(v29);
  NSString v30 = String._bridgeToObjectiveC()();
  id v74 = v29;
  id v31 = [v29 objectForKeyedSubscript:v30];

  if (!v31
    || (uint64_t v83 = (uint64_t)v31,
        uint64_t v33 = sub_100004AEC((uint64_t *)&unk_10099D910),
        uint64_t v32 = swift_dynamicCast(&v81, &v83, v33, &type metadata for String, 6LL),
        (v32 & 1) == 0))
  {
LABEL_17:
    uint64_t v44 = static os_log_type_t.error.getter(v32);
    uint64_t v45 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v46 = swift_allocObject(v45, 72LL, 7LL);
    *(_OWORD *)(v46 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(v46 + 56) = sub_100022898(0LL, (unint64_t *)&qword_10099D920, &OBJC_CLASS___CKRecord_ptr);
    *(void *)(v46 + 64) = sub_100022738();
    *(void *)(v46 + 32) = a1;
    sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    id v47 = a1;
    uint64_t v48 = (void *)static OS_os_log.default.getter(v47);
    os_log(_:dso:log:_:_:)(v44, &_mh_execute_header, v48, "Invalid BeaconNamingRecord - %@", 31LL, 2LL, v46);
    swift_bridgeObjectRelease();

    unint64_t v49 = sub_1005DEA04();
    uint64_t v50 = swift_allocError(&type metadata for BeaconNamingRecord.BeaconNamingRecordConversionError, v49, 0LL, 0LL);
    *uint64_t v51 = 2;
    swift_willThrow(v50);
    swift_unknownObjectRelease(v74);

    (*(void (**)(char *, uint64_t))(v10 + 8))(v79, v25);
    return swift_bridgeObjectRelease();
  }

  uint64_t v70 = v81;
  uint64_t v34 = v82;
  NSString v35 = String._bridgeToObjectiveC()();
  id v36 = [v74 objectForKeyedSubscript:v35];

  if (!v36
    || (uint64_t v71 = v34, v81 = (uint64_t)v36, (swift_dynamicCast(&v83, &v81, v33, &type metadata for Int, 6LL) & 1) == 0)
    || (uint64_t v69 = v83,
        NSString v37 = String._bridgeToObjectiveC()(),
        id v38 = [v74 objectForKeyedSubscript:v37],
        v37,
        !v38)
    || (uint64_t v83 = (uint64_t)v38, (swift_dynamicCast(&v81, &v83, v33, &type metadata for String, 6LL) & 1) == 0))
  {
    uint64_t v32 = swift_bridgeObjectRelease();
    uint64_t v25 = v80;
    goto LABEL_17;
  }

  uint64_t v40 = v81;
  uint64_t v39 = v82;
  UUID.init(uuidString:)(v70, v71);
  swift_bridgeObjectRelease();
  uint64_t v25 = v80;
  if (v24(v7, 1LL, v80) == 1)
  {
    swift_bridgeObjectRelease();
    uint64_t v32 = sub_1001BC5AC((uint64_t)v7);
    goto LABEL_17;
  }

  uint64_t v53 = v73;
  v73(v77, v7, v25);
  uint64_t v70 = v39;
  id v54 = v74;
  CKRecordKeyValueSetting.subscript.getter( &v81,  0x696A6F6D65LL,  0xE500000000000000LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  uint64_t v71 = v82;
  uint64_t ObjectType = v81;
  char v67 = objc_autoreleasePoolPush();
  id v55 = [objc_allocWithZone(NSKeyedArchiver) initRequiringSecureCoding:1];
  uint64_t v68 = v40;
  uint64_t v56 = v55;
  [a1 encodeSystemFieldsWithCoder:v55];
  [v56 finishEncoding];
  id v57 = [v56 encodedData];
  uint64_t v58 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v57);
  uint64_t v60 = v59;

  objc_autoreleasePoolPop(v67);
  swift_unknownObjectRelease(v54);

  uint64_t v61 = v76;
  *uint64_t v76 = v58;
  v61[1] = v60;
  uint64_t v62 = v75;
  v53((char *)v61 + v75[5], v79, v25);
  v53((char *)v61 + v62[6], v77, v25);
  *(uint64_t *)((char *)v61 + v62[7]) = v69;
  uint64_t v63 = (uint64_t *)((char *)v61 + v62[8]);
  uint64_t v64 = v70;
  *uint64_t v63 = v68;
  v63[1] = v64;
  uint64_t v65 = v78;
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v66 = v71;
  *uint64_t v65 = ObjectType;
  v65[1] = v66;
  return result;
}

void sub_1005DD780()
{
  if (qword_10099B620 != -1) {
    swift_once(&qword_10099B620, sub_1005DD914);
  }
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2AEA0);
  uint64_t v2 = UUID.uuidString.getter(v1);
  URL.appendingPathComponent(_:isDirectory:)(v2, v3, 1LL);
  uint64_t v4 = swift_bridgeObjectRelease();
  uint64_t v5 = static os_log_type_t.default.getter(v4);
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v8 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter(v0, v8);
  uint64_t v11 = v10;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v12 = sub_1000226F4();
  *(void *)(v7 + 64) = v12;
  *(void *)(v7 + 32) = v9;
  *(void *)(v7 + 40) = v11;
  uint64_t v13 = UUID.uuidString.getter(v12);
  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = v12;
  *(void *)(v7 + 72) = v13;
  *(void *)(v7 + 80) = v14;
  uint64_t v15 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v16 = (void *)static OS_os_log.default.getter(v15);
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v16, "returning baseUrl %@ for %@", 27LL, 2LL, v7);
  swift_bridgeObjectRelease();
}

uint64_t sub_1005DD914()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000A8AC(v2, qword_100A2AEA0);
  sub_10000A720(v0, (uint64_t)qword_100A2AEA0);
  type metadata accessor for BeaconStore(0LL);
  sub_1004E6208((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000012LL, 0x800000010080B4B0LL, 1LL);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

void sub_1005DD9E4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  unint64_t v5 = v2[1];
  sub_10001736C(v4, v5);
  Data.hash(into:)(a1, v4, v5);
  sub_100016F9C(v4, v5);
  uint64_t v6 = (int *)type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
  dispatch thunk of Hashable.hash(into:)(a1, v7, v8);
  Hasher._combine(_:)(*(uint64_t *)((char *)v2 + v6[7]));
  uint64_t v9 = (uint64_t *)((char *)v2 + v6[8]);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  swift_bridgeObjectRetain(v11);
  String.hash(into:)(a1, v10, v11);
  swift_bridgeObjectRelease();
  unint64_t v12 = (uint64_t *)((char *)v2 + v6[9]);
  uint64_t v13 = v12[1];
  if (v13)
  {
    uint64_t v14 = *v12;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v13);
    String.hash(into:)(a1, v14, v13);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

uint64_t sub_1005DDB44(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1005DDB7C + 4 * byte_10080B4B0[a1]))( 0xD000000000000010LL,  0x800000010084DE70LL);
}

uint64_t sub_1005DDB7C()
{
  return 0x696669746E656469LL;
}

  ;
}

uint64_t sub_1005DDBAC()
{
  return 0x6449656C6F72LL;
}

uint64_t sub_1005DDBC0()
{
  return 1701667182LL;
}

uint64_t sub_1005DDBD0()
{
  return 0x696A6F6D65LL;
}

uint64_t sub_1005DDBE4()
{
  return sub_1005DDB44(*v0);
}

uint64_t sub_1005DDBEC@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1005DED00(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005DDC10(uint64_t a1)
{
  unint64_t v2 = sub_1005DE83C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005DDC38(uint64_t a1)
{
  unint64_t v2 = sub_1005DE83C();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_1005DDC60()
{
  return Hasher._finalize()();
}

Swift::Int sub_1005DDCA0(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1005DDCDC()
{
  return sub_100007864( (unint64_t *)&unk_1009B5730,  type metadata accessor for BeaconNamingRecord,  (uint64_t)&unk_10080B530);
}

uint64_t sub_1005DDD08(id *a1)
{
  uint64_t v2 = v1;
  id v3 = [*a1 encryptedValues];
  uint64_t ObjectType = swift_getObjectType(v3);
  CKRecordKeyValueSetting.subscript.getter( &v25,  0xD000000000000010LL,  0x800000010084E610LL,  ObjectType,  &type metadata for String,  &protocol witness table for String);
  uint64_t v5 = *((void *)&v25 + 1);
  uint64_t v6 = v25;
  uint64_t v7 = (int *)type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v8 = UUID.uuidString.getter(v7);
  if (!v5)
  {
    uint64_t v12 = swift_bridgeObjectRelease();
    goto LABEL_9;
  }

  if (v6 == v8 && v5 == v9)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_11;
  }

  char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v5, v8, v9, 0LL);
  swift_bridgeObjectRelease();
  uint64_t v12 = swift_bridgeObjectRelease();
  if ((v11 & 1) == 0)
  {
LABEL_9:
    uint64_t v13 = UUID.uuidString.getter(v12);
    *((void *)&v26 + 1) = &type metadata for String;
    uint64_t v27 = &protocol witness table for String;
    *(void *)&__int128 v25 = v13;
    *((void *)&v25 + 1) = v14;
    CKRecordKeyValueSetting.subscript.setter(&v25, 0xD000000000000010LL, 0x800000010084E610LL, ObjectType);
  }

uint64_t sub_1005DE074(void *a1)
{
  id v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B5760);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1005DE83C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for BeaconNamingRecord.CodingKeys,  &type metadata for BeaconNamingRecord.CodingKeys,  v11,  v9,  v10);
  __int128 v26 = *v3;
  char v27 = 0;
  unint64_t v12 = sub_1000170A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v27, v5, &type metadata for Data, v12);
  if (!v2)
  {
    uint64_t v13 = (int *)type metadata accessor for BeaconNamingRecord(0LL);
    uint64_t v14 = (char *)v3 + v13[5];
    LOBYTE(v26) = 1;
    uint64_t v15 = type metadata accessor for UUID(0LL);
    uint64_t v16 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v26, v5, v15, v16);
    unint64_t v17 = (char *)v3 + v13[6];
    LOBYTE(v26) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v26, v5, v15, v16);
    uint64_t v18 = *(void *)((char *)v3 + v13[7]);
    LOBYTE(v26) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v18, &v26, v5);
    char v19 = (uint64_t *)((char *)v3 + v13[8]);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    LOBYTE(v26) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v20, v21, &v26, v5);
    unint64_t v22 = (uint64_t *)((char *)v3 + v13[9]);
    uint64_t v23 = *v22;
    uint64_t v24 = v22[1];
    LOBYTE(v26) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v23, v24, &v26, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1005DE2B0@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v43 = a2;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v44 = *(void *)(v3 - 8);
  uint64_t v45 = v3;
  uint64_t v4 = __chkstk_darwin(v3);
  uint64_t v6 = (char *)v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v8 = (void *)((char *)v40 - v7);
  uint64_t v47 = sub_100004AEC(&qword_1009B5750);
  uint64_t v9 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  unint64_t v11 = (char *)v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for BeaconNamingRecord(0LL);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (_OWORD *)((char *)v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v16 = (uint64_t *)((char *)v15 + *(int *)(v13 + 36));
  *uint64_t v16 = 0LL;
  v16[1] = 0LL;
  uint64_t v48 = a1;
  unint64_t v49 = v16;
  uint64_t v18 = a1[3];
  uint64_t v17 = a1[4];
  sub_100012ED8(a1, v18);
  unint64_t v19 = sub_1005DE83C();
  uint64_t v46 = v11;
  uint64_t v20 = v50;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for BeaconNamingRecord.CodingKeys,  &type metadata for BeaconNamingRecord.CodingKeys,  v19,  v18,  v17);
  if (v20)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v48);
    return swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v21 = v6;
    uint64_t v50 = v9;
    uint64_t v22 = v44;
    uint64_t v23 = v45;
    char v52 = 0;
    unint64_t v24 = sub_100016FE0();
    __int128 v25 = v46;
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v51, &type metadata for Data, &v52, v47, &type metadata for Data, v24);
    __int128 v26 = v15;
    *uint64_t v15 = v51;
    LOBYTE(v51) = 1;
    uint64_t v27 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v8, v23, &v51, v47, v23, v27);
    uint64_t v41 = (uint64_t)v26;
    uint64_t v42 = v12;
    uint64_t v28 = (char *)v26 + *(int *)(v12 + 20);
    id v29 = *(void (**)(char *, void *, uint64_t))(v22 + 32);
    v29(v28, v8, v23);
    LOBYTE(v51) = 2;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v21, v23, &v51, v47, v23, v27);
    uint64_t v31 = v41;
    uint64_t v30 = v42;
    v29((char *)(v41 + *(int *)(v42 + 24)), v21, v23);
    LOBYTE(v51) = 3;
    *(void *)(v31 + *(int *)(v30 + 28)) = KeyedDecodingContainer.decode(_:forKey:)(&v51, v47);
    LOBYTE(v51) = 4;
    uint64_t v32 = KeyedDecodingContainer.decode(_:forKey:)(&v51, v47);
    v40[1] = 0LL;
    uint64_t v33 = (uint64_t *)(v31 + *(int *)(v30 + 32));
    *uint64_t v33 = v32;
    v33[1] = v34;
    LOBYTE(v51) = 5;
    uint64_t v35 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v51, v47);
    uint64_t v37 = v36;
    (*(void (**)(char *, uint64_t))(v50 + 8))(v25, v47);
    id v38 = v49;
    swift_bridgeObjectRelease();
    *id v38 = v35;
    v38[1] = v37;
    sub_1005DE880(v31, v43);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v48);
    return sub_1005DE8C4(v31);
  }

void sub_1005DE72C()
{
  uint64_t v0 = objc_autoreleasePoolPush();
  sub_1005DD780();
  objc_autoreleasePoolPop(v0);
}

uint64_t sub_1005DE77C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005DE2B0(a1, a2);
}

uint64_t sub_1005DE790(void *a1)
{
  return sub_1005DE074(a1);
}

uint64_t sub_1005DE7A4(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100007864( &qword_1009B2948,  type metadata accessor for BeaconNamingRecord,  (uint64_t)&unk_10080B5C0);
  uint64_t result = sub_100007864( (unint64_t *)&unk_1009B5740,  type metadata accessor for BeaconNamingRecord,  (uint64_t)&unk_10080B598);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

uint64_t sub_1005DE800(uint64_t a1)
{
  uint64_t result = sub_100007864(&qword_1009B2880, type metadata accessor for BeaconNamingRecord, (uint64_t)&unk_10080B5E8);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1005DE83C()
{
  unint64_t result = qword_1009B5758;
  if (!qword_1009B5758)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080B7B0, &type metadata for BeaconNamingRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B5758);
  }

  return result;
}

uint64_t sub_1005DE880(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconNamingRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005DE8C4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconNamingRecord(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1005DE900(uint64_t *a1, uint64_t a2)
{
  if ((v4 & 1) == 0) {
    return 0LL;
  }
  uint64_t v5 = (int *)type metadata accessor for BeaconNamingRecord(0LL);
  if ((static UUID.== infix(_:_:)((char *)a1 + v5[5], a2 + v5[5]) & 1) == 0
    || (static UUID.== infix(_:_:)((char *)a1 + v5[6], a2 + v5[6]) & 1) == 0
    || *(uint64_t *)((char *)a1 + v5[7]) != *(void *)(a2 + v5[7]))
  {
    return 0LL;
  }

  uint64_t v6 = v5[8];
  uint64_t v7 = *(uint64_t *)((char *)a1 + v6);
  uint64_t v8 = *(uint64_t *)((char *)a1 + v6 + 8);
  uint64_t v9 = (void *)(a2 + v6);
  uint64_t v10 = v9[1];
  BOOL v11 = v7 == *v9 && v8 == v10;
  if (v11 || (v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, *v9, v10, 0LL), uint64_t result = 0LL, (v12 & 1) != 0))
  {
    uint64_t v14 = v5[9];
    uint64_t v15 = (uint64_t *)((char *)a1 + v14);
    uint64_t v16 = *(uint64_t *)((char *)a1 + v14 + 8);
    uint64_t v17 = (void *)(a2 + v14);
    uint64_t v18 = v17[1];
    if (v16)
    {
      if (v18)
      {
        BOOL v19 = *v15 == *v17 && v16 == v18;
        if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v15, v16, *v17, v18, 0LL) & 1) != 0) {
          return 1LL;
        }
      }
    }

    else if (!v18)
    {
      return 1LL;
    }

    return 0LL;
  }

  return result;
}

unint64_t sub_1005DEA04()
{
  unint64_t result = qword_1009B5768;
  if (!qword_1009B5768)
  {
    unint64_t result = swift_getWitnessTable( &unk_10080B770,  &type metadata for BeaconNamingRecord.BeaconNamingRecordConversionError);
    atomic_store(result, (unint64_t *)&qword_1009B5768);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for BeaconNamingRecord.BeaconNamingRecordConversionError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1005DEA94 + 4 * byte_10080B4BB[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1005DEAC8 + 4 * byte_10080B4B6[v4]))();
}

uint64_t sub_1005DEAC8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005DEAD0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005DEAD8LL);
  }
  return result;
}

uint64_t sub_1005DEAE4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005DEAECLL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1005DEAF0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005DEAF8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconNamingRecord.BeaconNamingRecordConversionError()
{
  return &type metadata for BeaconNamingRecord.BeaconNamingRecordConversionError;
}

uint64_t storeEnumTagSinglePayload for BeaconNamingRecord.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1005DEB60 + 4 * byte_10080B4C5[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1005DEB94 + 4 * byte_10080B4C0[v4]))();
}

uint64_t sub_1005DEB94(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005DEB9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005DEBA4LL);
  }
  return result;
}

uint64_t sub_1005DEBB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005DEBB8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1005DEBBC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005DEBC4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconNamingRecord.CodingKeys()
{
  return &type metadata for BeaconNamingRecord.CodingKeys;
}

unint64_t sub_1005DEBE4()
{
  unint64_t result = qword_1009B5778;
  if (!qword_1009B5778)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080B6E0, &type metadata for BeaconNamingRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B5778);
  }

  return result;
}

unint64_t sub_1005DEC2C()
{
  unint64_t result = qword_1009B5780;
  if (!qword_1009B5780)
  {
    unint64_t result = swift_getWitnessTable( &unk_10080B748,  &type metadata for BeaconNamingRecord.BeaconNamingRecordConversionError);
    atomic_store(result, (unint64_t *)&qword_1009B5780);
  }

  return result;
}

unint64_t sub_1005DEC74()
{
  unint64_t result = qword_1009B5788;
  if (!qword_1009B5788)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080B650, &type metadata for BeaconNamingRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B5788);
  }

  return result;
}

unint64_t sub_1005DECBC()
{
  unint64_t result = qword_1009B5790;
  if (!qword_1009B5790)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080B678, &type metadata for BeaconNamingRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B5790);
  }

  return result;
}

uint64_t sub_1005DED00(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x800000010084DE70LL;
    if (a2 == 0x800000010084DE70LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010084DE70LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v6 = 0xEA00000000007265LL;
LABEL_11:
    swift_bridgeObjectRelease(v6);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v6 = a2;
    goto LABEL_11;
  }

  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v7 = 0x800000010084E610LL;
    if (a2 == 0x800000010084E610LL) {
      goto LABEL_16;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010084E610LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_16:
    swift_bridgeObjectRelease(v7);
    return 2LL;
  }

  if (a1 == 0x6449656C6F72LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v8 = 0xE600000000000000LL;
LABEL_22:
    swift_bridgeObjectRelease(v8);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6449656C6F72LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_22;
  }

  if (a1 == 1701667182 && a2 == 0xE400000000000000LL)
  {
    unint64_t v9 = 0xE400000000000000LL;
LABEL_28:
    swift_bridgeObjectRelease(v9);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1701667182LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_28;
  }

  if (a1 == 0x696A6F6D65LL && a2 == 0xE500000000000000LL)
  {
    swift_bridgeObjectRelease(0xE500000000000000LL);
    return 5LL;
  }

  else
  {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(0x696A6F6D65LL, 0xE500000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v10 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

ValueMetadata *type metadata accessor for AccessoryLatchSeparatedKeyResponsePayload()
{
  return &type metadata for AccessoryLatchSeparatedKeyResponsePayload;
}

uint64_t sub_1005DEF70@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100012ED8(a1, v5);
  dispatch thunk of BinaryDecoding.container()(v14, v5, v6);
  uint64_t v7 = v15;
  uint64_t v8 = v16;
  sub_100037298((uint64_t)v14, v15);
  uint64_t v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)(6LL, v7, v8);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v14);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    uint64_t v12 = v9;
    uint64_t v13 = v10;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v14);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    *a2 = v12;
    a2[1] = v13;
  }

  return result;
}

unint64_t sub_1005DF030(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1005DF05C();
  unint64_t result = sub_1000F50CC();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_1005DF05C()
{
  unint64_t result = qword_1009B57A0;
  if (!qword_1009B57A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080B82C, &type metadata for AccessoryLatchSeparatedKeyResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009B57A0);
  }

  return result;
}

ValueMetadata *type metadata accessor for iCloudIdentifierResponsePayload()
{
  return &type metadata for iCloudIdentifierResponsePayload;
}

uint64_t sub_1005DF0B0@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1005DF148(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

unint64_t sub_1005DF0D8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1005DF104();
  unint64_t result = sub_1002568FC();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_1005DF104()
{
  unint64_t result = qword_1009B57A8;
  if (!qword_1009B57A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080B8C0, &type metadata for iCloudIdentifierResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009B57A8);
  }

  return result;
}

uint64_t sub_1005DF148(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  dispatch thunk of BinaryDecoding.container()(v10, v3, v4);
  uint64_t v5 = v11;
  uint64_t v6 = v12;
  sub_100037298((uint64_t)v10, v11);
  uint64_t v8 = dispatch thunk of BinaryDecodingContaining.decode(length:)(60LL, v5, v6);
  if (!v1) {
    __asm { BR              X10 }
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v10);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v8;
}

uint64_t sub_1005DF25C(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v20 = a4;
  uint64_t v8 = sub_100004AEC(&qword_1009B58A8);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v12);
  unint64_t v14 = sub_1005E0CF0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AirPodsLostModeRequest.CodingKeys,  &type metadata for AirPodsLostModeRequest.CodingKeys,  v14,  v12,  v13);
  v21[0] = a2;
  char v22 = 0;
  uint64_t v15 = sub_100004AEC(&qword_1009B1148);
  uint64_t v16 = sub_1005E0D34( &qword_1009B58B0,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v22, v8, v15, v16);
  if (!v4)
  {
    v21[0] = a3;
    v21[1] = v20;
    char v22 = 1;
    unint64_t v17 = sub_1000170A4();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v21, &v22, v8, &type metadata for Data, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v11, v8);
}

uint64_t sub_1005DF3D0()
{
  if (*v0) {
    return 2036625250LL;
  }
  else {
    return 0xD000000000000010LL;
  }
}

uint64_t sub_1005DF408@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1005E0A18(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005DF42C(uint64_t a1)
{
  unint64_t v2 = sub_1005E0CF0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005DF454(uint64_t a1)
{
  unint64_t v2 = sub_1005E0CF0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005DF47C@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1005E0AF4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
  }

  return result;
}

uint64_t sub_1005DF4A8(void *a1)
{
  return sub_1005DF25C(a1, *v1, v1[1], v1[2]);
}

uint64_t sub_1005DF4C4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B5880);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1005E09D4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AirPodsLostModeContent.Device.CodingKeys,  &type metadata for AirPodsLostModeContent.Device.CodingKeys,  v11,  v9,  v10);
  __int128 v26 = *v3;
  char v25 = 0;
  unint64_t v12 = sub_1000170A4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v26, &v25, v5, &type metadata for Data, v12);
  if (!v2)
  {
    __int128 v26 = v3[1];
    char v25 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v26, &v25, v5, &type metadata for Data, v12);
    __int128 v26 = v3[2];
    char v25 = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v5, &type metadata for Data, v12);
    uint64_t v13 = (int *)type metadata accessor for AirPodsLostModeContent.Device(0LL);
    unint64_t v14 = (char *)v3 + v13[7];
    LOBYTE(v26) = 3;
    uint64_t v15 = type metadata accessor for UUID(0LL);
    uint64_t v16 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v26, v5, v15, v16);
    unint64_t v17 = (uint64_t *)((char *)v3 + v13[8]);
    uint64_t v18 = *v17;
    uint64_t v19 = v17[1];
    LOBYTE(v26) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v26, v5);
    uint64_t v20 = (uint64_t *)((char *)v3 + v13[9]);
    uint64_t v21 = *v20;
    uint64_t v22 = v20[1];
    LOBYTE(v26) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v21, v22, &v26, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1005DF710(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B5858);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1005E0914();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AirPodsLostModeContent.CodingKeys,  &type metadata for AirPodsLostModeContent.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  uint64_t v13 = v3[1];
  char v31 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v12, v13, &v31, v5);
  if (!v2)
  {
    uint64_t v14 = v3[2];
    uint64_t v15 = v3[3];
    char v30 = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v14, v15, &v30, v5);
    uint64_t v16 = v3[4];
    uint64_t v17 = v3[5];
    char v29 = 2;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v16, v17, &v29, v5);
    uint64_t v18 = v3[6];
    uint64_t v19 = v3[7];
    char v28 = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v28, v5);
    uint64_t v20 = *((unsigned __int8 *)v3 + 64);
    char v27 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v20, &v27, v5);
    uint64_t v26 = v3[9];
    char v25 = 5;
    uint64_t v21 = sub_100004AEC(&qword_1009B5868);
    unint64_t v22 = sub_1005E0958();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v26, &v25, v5, v21, v22);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1005DF8E8()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1005DF910 + 4 * byte_10080B930[*v0]))( 1684628325LL,  0xE400000000000000LL);
}

uint64_t sub_1005DF910()
{
  return 0x644970696863LL;
}

uint64_t sub_1005DF924()
{
  return 0x754E6C6169726573LL;
}

uint64_t sub_1005DF944()
{
  return 0x6449616E6D66LL;
}

uint64_t sub_1005DF958()
{
  return 0x49746375646F7270LL;
}

uint64_t sub_1005DF974()
{
  return 0x6449726F646E6576LL;
}

uint64_t sub_1005DF98C(uint64_t a1)
{
  unint64_t v2 = sub_1005E09D4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005DF9B4(uint64_t a1)
{
  unint64_t v2 = sub_1005E09D4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005DF9DC(void *a1)
{
  return sub_1005DF4C4(a1);
}

uint64_t sub_1005DF9F0()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1005DFA1C + 4 * byte_10080B936[*v0]))( 0x656C746974LL,  0xE500000000000000LL);
}

uint64_t sub_1005DFA1C()
{
  return 0x6567617373656DLL;
}

uint64_t sub_1005DFA34()
{
  return 0x6C69616D65LL;
}

uint64_t sub_1005DFA44()
{
  return 0x6D754E72656E776FLL;
}

uint64_t sub_1005DFA64()
{
  return 0x65646F4D74736F6CLL;
}

uint64_t sub_1005DFA88()
{
  return 0x73656369766564LL;
}

uint64_t sub_1005DFAA0@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1005E11C8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1005DFAC4(uint64_t a1)
{
  unint64_t v2 = sub_1005E0914();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005DFAEC(uint64_t a1)
{
  unint64_t v2 = sub_1005E0914();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005DFB14(void *a1)
{
  return sub_1005DF710(a1);
}

void sub_1005DFB28(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v39 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v6 = sub_100412D14((uint64_t)_swiftEmptyArrayStorage);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
  *(void *)&v39[0] = v6;
  sub_10005C260( 1702195828LL,  0xE400000000000000LL,  0xD00000000000001BLL,  0x8000000100855CD0LL,  isUniquelyReferenced_nonNull_native);
  uint64_t v8 = *(void *)&v39[0];
  swift_bridgeObjectRelease();
  id v9 = [(id)objc_opt_self(AKDevice) currentDevice];
  if (v9)
  {
    uint64_t v10 = v9;
    id v11 = [v9 serverFriendlyDescription];

    if (v11)
    {
      uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
      uint64_t v14 = v13;

      char v15 = swift_isUniquelyReferenced_nonNull_native(v8);
      *(void *)&v39[0] = v8;
      sub_10005C260(v12, v14, 0xD000000000000011LL, 0x8000000100854B60LL, v15);
      uint64_t v16 = *(void *)&v39[0];
      uint64_t v17 = swift_bridgeObjectRelease();
      uint64_t v18 = Date.init()(v17);
      uint64_t v19 = Date.epoch.getter(v18);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      *(void *)&v39[0] = v19;
      uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
      uint64_t v22 = v21;
      char v23 = swift_isUniquelyReferenced_nonNull_native(v16);
      *(void *)&v39[0] = v16;
      sub_10005C260(v20, v22, 0xD000000000000015LL, 0x8000000100855CF0LL, v23);
      uint64_t v24 = *(void *)&v39[0];
      swift_bridgeObjectRelease();
      *(void *)&v39[0] = 1LL;
      uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      uint64_t v27 = v26;
      char v28 = swift_isUniquelyReferenced_nonNull_native(v24);
      *(void *)&v39[0] = v24;
      sub_10005C260(v25, v27, 0xD000000000000013LL, 0x8000000100855D10LL, v28);
      uint64_t v29 = *(void *)&v39[0];
      swift_bridgeObjectRelease();
      id v30 = sub_1003F349C();
      uint64_t v32 = v31;
      char v33 = swift_isUniquelyReferenced_nonNull_native(v29);
      *(void *)&v39[0] = v29;
      sub_10005C260((uint64_t)v30, v32, 0x6567412D72657355LL, 0xEA0000000000746ELL, v33);
      swift_bridgeObjectRelease();
      uint64_t v34 = type metadata accessor for JSONEncoder(0LL);
      swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
      JSONEncoder.init()();
      __int128 v35 = *(_OWORD *)(a1 + 48);
      v39[2] = *(_OWORD *)(a1 + 32);
      v39[3] = v35;
      v39[4] = *(_OWORD *)(a1 + 64);
      __int128 v36 = *(_OWORD *)(a1 + 16);
      v39[0] = *(_OWORD *)a1;
      v39[1] = v36;
      unint64_t v37 = sub_1005DFF44();
      dispatch thunk of JSONEncoder.encode<A>(_:)(v39, &type metadata for AirPodsLostModeContent, v37);
      swift_release();
      sub_1005DFF88((void *)a1);
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

unint64_t sub_1005DFF44()
{
  unint64_t result = qword_1009B57B0;
  if (!qword_1009B57B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080BA50, &type metadata for AirPodsLostModeContent);
    atomic_store(result, (unint64_t *)&qword_1009B57B0);
  }

  return result;
}

void *sub_1005DFF88(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[7];
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

_OWORD *sub_1005DFFF0(_OWORD *a1, uint64_t *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *(void *)uint64_t v4 = *a2;
    uint64_t v4 = (_OWORD *)(v8 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    unint64_t v7 = a2[1];
    if (v7 >> 60 == 15)
    {
      *a1 = *(_OWORD *)a2;
    }

    else
    {
      uint64_t v9 = *a2;
      sub_10001736C(*a2, a2[1]);
      *(void *)uint64_t v4 = v9;
      *((void *)v4 + 1) = v7;
    }

    uint64_t v10 = a2 + 2;
    unint64_t v11 = a2[3];
    if (v11 >> 60 == 15)
    {
      v4[1] = *(_OWORD *)v10;
    }

    else
    {
      uint64_t v12 = *v10;
      sub_10001736C(*v10, a2[3]);
      *((void *)v4 + 2) = v12;
      *((void *)v4 + 3) = v11;
    }

    uint64_t v13 = a2[4];
    unint64_t v14 = a2[5];
    sub_10001736C(v13, v14);
    *((void *)v4 + 4) = v13;
    *((void *)v4 + 5) = v14;
    uint64_t v15 = a3[7];
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (char *)a2 + v15;
    uint64_t v18 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16LL))(v16, v17, v18);
    uint64_t v19 = a3[8];
    uint64_t v20 = a3[9];
    uint64_t v21 = (void *)((char *)v4 + v19);
    uint64_t v22 = (uint64_t *)((char *)a2 + v19);
    uint64_t v23 = v22[1];
    *uint64_t v21 = *v22;
    v21[1] = v23;
    uint64_t v24 = (void *)((char *)v4 + v20);
    uint64_t v25 = (uint64_t *)((char *)a2 + v20);
    uint64_t v26 = v25[1];
    *uint64_t v24 = *v25;
    v24[1] = v26;
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRetain(v26);
  }

  return v4;
}

uint64_t sub_1005E012C(uint64_t *a1, uint64_t a2)
{
  unint64_t v4 = a1[1];
  if (v4 >> 60 != 15) {
    sub_100016F9C(*a1, v4);
  }
  unint64_t v5 = a1[3];
  if (v5 >> 60 != 15) {
    sub_100016F9C(a1[2], v5);
  }
  sub_100016F9C(a1[4], a1[5]);
  unint64_t v6 = (char *)a1 + *(int *)(a2 + 28);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1005E01CC(uint64_t a1, uint64_t *a2, int *a3)
{
  unint64_t v6 = a2[1];
  if (v6 >> 60 == 15)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    uint64_t v7 = *a2;
    sub_10001736C(*a2, a2[1]);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v6;
  }

  uint64_t v8 = a2 + 2;
  unint64_t v9 = a2[3];
  if (v9 >> 60 == 15)
  {
    *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)v8;
  }

  else
  {
    uint64_t v10 = *v8;
    sub_10001736C(*v8, a2[3]);
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = v10;
    *(void *)(a1 + 24) = v9;
  }

  uint64_t v11 = a2[4];
  unint64_t v12 = a2[5];
  sub_10001736C(v11, v12);
  *(void *)(a1 + 32) = v11;
  *(void *)(a1 + 40) = v12;
  uint64_t v13 = a3[7];
  uint64_t v14 = a1 + v13;
  uint64_t v15 = (char *)a2 + v13;
  uint64_t v16 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, char *, uint64_t))(*(void *)(v16 - 8) + 16LL))(v14, v15, v16);
  uint64_t v17 = a3[8];
  uint64_t v18 = a3[9];
  uint64_t v19 = (void *)(a1 + v17);
  uint64_t v20 = (uint64_t *)((char *)a2 + v17);
  uint64_t v21 = v20[1];
  *uint64_t v19 = *v20;
  v19[1] = v21;
  uint64_t v22 = (void *)(a1 + v18);
  uint64_t v23 = (uint64_t *)((char *)a2 + v18);
  uint64_t v24 = v23[1];
  *uint64_t v22 = *v23;
  v22[1] = v24;
  swift_bridgeObjectRetain(v21);
  swift_bridgeObjectRetain(v24);
  return a1;
}

uint64_t *sub_1005E02DC(uint64_t *a1, uint64_t *a2, int *a3)
{
  unint64_t v6 = a2[1];
  if ((unint64_t)a1[1] >> 60 == 15)
  {
    if (v6 >> 60 != 15)
    {
      uint64_t v7 = *a2;
      sub_10001736C(*a2, a2[1]);
      *a1 = v7;
      a1[1] = v6;
      goto LABEL_8;
    }

    goto LABEL_6;
  }

  if (v6 >> 60 == 15)
  {
    sub_100041D4C((uint64_t)a1);
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_8;
  }

  uint64_t v8 = *a2;
  sub_10001736C(*a2, a2[1]);
  uint64_t v9 = *a1;
  unint64_t v10 = a1[1];
  *a1 = v8;
  a1[1] = v6;
  sub_100016F9C(v9, v10);
LABEL_8:
  uint64_t v11 = a2 + 2;
  unint64_t v12 = a2[3];
  if ((unint64_t)a1[3] >> 60 != 15)
  {
    if (v12 >> 60 != 15)
    {
      uint64_t v14 = *v11;
      sub_10001736C(*v11, a2[3]);
      uint64_t v15 = a1[2];
      unint64_t v16 = a1[3];
      a1[2] = v14;
      a1[3] = v12;
      sub_100016F9C(v15, v16);
      goto LABEL_15;
    }

    sub_100041D4C((uint64_t)(a1 + 2));
    goto LABEL_13;
  }

  if (v12 >> 60 == 15)
  {
LABEL_13:
    *((_OWORD *)a1 + 1) = *(_OWORD *)v11;
    goto LABEL_15;
  }

  uint64_t v13 = *v11;
  sub_10001736C(*v11, a2[3]);
  a1[2] = v13;
  a1[3] = v12;
LABEL_15:
  uint64_t v17 = a2[4];
  unint64_t v18 = a2[5];
  sub_10001736C(v17, v18);
  uint64_t v19 = a1[4];
  unint64_t v20 = a1[5];
  a1[4] = v17;
  a1[5] = v18;
  sub_100016F9C(v19, v20);
  uint64_t v21 = a3[7];
  uint64_t v22 = (char *)a1 + v21;
  uint64_t v23 = (char *)a2 + v21;
  uint64_t v24 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v24 - 8) + 24LL))(v22, v23, v24);
  uint64_t v25 = a3[8];
  uint64_t v26 = (uint64_t *)((char *)a1 + v25);
  uint64_t v27 = (uint64_t *)((char *)a2 + v25);
  *uint64_t v26 = *v27;
  uint64_t v28 = v27[1];
  v26[1] = v28;
  swift_bridgeObjectRetain(v28);
  swift_bridgeObjectRelease();
  uint64_t v29 = a3[9];
  id v30 = (uint64_t *)((char *)a1 + v29);
  uint64_t v31 = (uint64_t *)((char *)a2 + v29);
  *id v30 = *v31;
  uint64_t v32 = v31[1];
  v30[1] = v32;
  swift_bridgeObjectRetain(v32);
  swift_bridgeObjectRelease();
  return a1;
}

_OWORD *sub_1005E04A4(_OWORD *a1, _OWORD *a2, int *a3)
{
  __int128 v6 = a2[1];
  *a1 = *a2;
  a1[1] = v6;
  a1[2] = a2[2];
  uint64_t v7 = a3[7];
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  uint64_t v11 = a3[9];
  *(_OWORD *)((char *)a1 + a3[8]) = *(_OWORD *)((char *)a2 + a3[8]);
  *(_OWORD *)((char *)a1 + v11) = *(_OWORD *)((char *)a2 + v11);
  return a1;
}

uint64_t sub_1005E052C(uint64_t a1, uint64_t a2, int *a3)
{
  unint64_t v6 = *(void *)(a1 + 8);
  if (v6 >> 60 == 15) {
    goto LABEL_4;
  }
  unint64_t v7 = *(void *)(a2 + 8);
  if (v7 >> 60 == 15)
  {
    sub_100041D4C(a1);
LABEL_4:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    goto LABEL_6;
  }

  uint64_t v8 = *(void *)a1;
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v7;
  sub_100016F9C(v8, v6);
LABEL_6:
  uint64_t v9 = (void *)(a2 + 16);
  unint64_t v10 = *(void *)(a1 + 24);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = *(void *)(a2 + 24);
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *(void *)(a1 + 16);
      *(void *)(a1 + swift_weakDestroy(v0 + 16) = *v9;
      *(void *)(a1 + 24) = v11;
      sub_100016F9C(v12, v10);
      goto LABEL_11;
    }

    sub_100041D4C(a1 + 16);
  }

  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)v9;
LABEL_11:
  uint64_t v13 = *(void *)(a1 + 32);
  unint64_t v14 = *(void *)(a1 + 40);
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  sub_100016F9C(v13, v14);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40LL))(v16, v17, v18);
  uint64_t v19 = a3[8];
  unint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (uint64_t *)(a2 + v19);
  uint64_t v23 = *v21;
  uint64_t v22 = v21[1];
  *unint64_t v20 = v23;
  v20[1] = v22;
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[9];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (uint64_t *)(a2 + v24);
  uint64_t v28 = *v26;
  uint64_t v27 = v26[1];
  *uint64_t v25 = v28;
  v25[1] = v27;
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1005E0668(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005E0674);
}

uint64_t sub_1005E0674(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 28), a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 32) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  int v10 = v9 - 1;
  if (v10 < 0) {
    int v10 = -1;
  }
  return (v10 + 1);
}

uint64_t sub_1005E0704(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005E0710);
}

uint64_t sub_1005E0710(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))( a1 + *(int *)(a4 + 28),  a2,  a2,  result);
  }
  *(void *)(a1 + *(int *)(a4 + 32) + 8) = a2;
  return result;
}

uint64_t type metadata accessor for AirPodsLostModeContent.Device(uint64_t a1)
{
  uint64_t result = qword_1009B5810;
  if (!qword_1009B5810) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AirPodsLostModeContent.Device);
  }
  return result;
}

uint64_t sub_1005E07CC(uint64_t a1)
{
  v4[0] = &unk_10080B958;
  v4[1] = &unk_10080B958;
  void v4[2] = &unk_10080B970;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    void v4[3] = *(void *)(result - 8) + 64LL;
    void v4[4] = &unk_10080B988;
    void v4[5] = &unk_10080B988;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for AirPodsLostModeRequest()
{
  return &type metadata for AirPodsLostModeRequest;
}

uint64_t getEnumTagSinglePayload for AirPodsLostModeContent(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 80)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 72);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AirPodsLostModeContent(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)uint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 80) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 72) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 80) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AirPodsLostModeContent()
{
  return &type metadata for AirPodsLostModeContent;
}

unint64_t sub_1005E0914()
{
  unint64_t result = qword_1009B5860;
  if (!qword_1009B5860)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080BDA4, &type metadata for AirPodsLostModeContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B5860);
  }

  return result;
}

unint64_t sub_1005E0958()
{
  unint64_t result = qword_1009B5870;
  if (!qword_1009B5870)
  {
    uint64_t v1 = sub_100004B78(&qword_1009B5868);
    sub_100007864(&qword_1009B5878, type metadata accessor for AirPodsLostModeContent.Device, (uint64_t)&unk_10080BA28);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009B5870);
  }

  return result;
}

unint64_t sub_1005E09D4()
{
  unint64_t result = qword_1009B5888;
  if (!qword_1009B5888)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080BD54, &type metadata for AirPodsLostModeContent.Device.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B5888);
  }

  return result;
}

uint64_t sub_1005E0A18(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x800000010086A450LL;
    if (a2 == 0x800000010086A450LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010086A450LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 2036625250 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(2036625250LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1005E0AF4(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009B5890);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  char v6 = (char *)&v17[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100012ED8(a1, v7);
  unint64_t v9 = sub_1005E0CF0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AirPodsLostModeRequest.CodingKeys,  &type metadata for AirPodsLostModeRequest.CodingKeys,  v9,  v7,  v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    uint64_t v10 = sub_100004AEC(&qword_1009B1148);
    char v18 = 0;
    uint64_t v11 = sub_1005E0D34( &qword_1009B58A0,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, v10, &v18, v3, v10, v11);
    uint64_t v7 = v17[0];
    char v18 = 1;
    unint64_t v13 = sub_100016FE0();
    swift_bridgeObjectRetain(v7);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v17, &type metadata for Data, &v18, v3, &type metadata for Data, v13);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v14 = v17[0];
    unint64_t v15 = v17[1];
    swift_bridgeObjectRetain(v7);
    sub_10001736C(v14, v15);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    swift_bridgeObjectRelease();
    sub_100016F9C(v14, v15);
  }

  return v7;
}

unint64_t sub_1005E0CF0()
{
  unint64_t result = qword_1009B5898;
  if (!qword_1009B5898)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080BD04, &type metadata for AirPodsLostModeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B5898);
  }

  return result;
}

uint64_t sub_1005E0D34(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_100004B78(&qword_1009B1148);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for AirPodsLostModeRequest.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1005E0DE0 + 4 * byte_10080B941[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1005E0E14 + 4 * byte_10080B93C[v4]))();
}

uint64_t sub_1005E0E14(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005E0E1C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005E0E24LL);
  }
  return result;
}

uint64_t sub_1005E0E30(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005E0E38LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1005E0E3C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005E0E44(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLostModeRequest.CodingKeys()
{
  return &type metadata for AirPodsLostModeRequest.CodingKeys;
}

ValueMetadata *type metadata accessor for AirPodsLostModeContent.Device.CodingKeys()
{
  return &type metadata for AirPodsLostModeContent.Device.CodingKeys;
}

uint64_t _s12searchpartyd22AirPodsLostModeContentV6DeviceV10CodingKeysOwst_0( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 5 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 5) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFB) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFA) {
    return ((uint64_t (*)(void))((char *)&loc_1005E0EC0 + 4 * byte_10080B94B[v4]))();
  }
  *a1 = a2 + 5;
  return ((uint64_t (*)(void))((char *)sub_1005E0EF4 + 4 * byte_10080B946[v4]))();
}

uint64_t sub_1005E0EF4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005E0EFC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005E0F04LL);
  }
  return result;
}

uint64_t sub_1005E0F10(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005E0F18LL);
  }
  *(_BYTE *)uint64_t result = a2 + 5;
  return result;
}

uint64_t sub_1005E0F1C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005E0F24(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AirPodsLostModeContent.CodingKeys()
{
  return &type metadata for AirPodsLostModeContent.CodingKeys;
}

unint64_t sub_1005E0F44()
{
  unint64_t result = qword_1009B58B8;
  if (!qword_1009B58B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080BB6C, &type metadata for AirPodsLostModeContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B58B8);
  }

  return result;
}

unint64_t sub_1005E0F8C()
{
  unint64_t result = qword_1009B58C0;
  if (!qword_1009B58C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080BC24, &type metadata for AirPodsLostModeContent.Device.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B58C0);
  }

  return result;
}

unint64_t sub_1005E0FD4()
{
  unint64_t result = qword_1009B58C8;
  if (!qword_1009B58C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080BCDC, &type metadata for AirPodsLostModeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B58C8);
  }

  return result;
}

unint64_t sub_1005E101C()
{
  unint64_t result = qword_1009B58D0;
  if (!qword_1009B58D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080BC4C, &type metadata for AirPodsLostModeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B58D0);
  }

  return result;
}

unint64_t sub_1005E1064()
{
  unint64_t result = qword_1009B58D8;
  if (!qword_1009B58D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080BC74, &type metadata for AirPodsLostModeRequest.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B58D8);
  }

  return result;
}

unint64_t sub_1005E10AC()
{
  unint64_t result = qword_1009B58E0;
  if (!qword_1009B58E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080BB94, &type metadata for AirPodsLostModeContent.Device.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B58E0);
  }

  return result;
}

unint64_t sub_1005E10F4()
{
  unint64_t result = qword_1009B58E8;
  if (!qword_1009B58E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080BBBC, &type metadata for AirPodsLostModeContent.Device.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B58E8);
  }

  return result;
}

unint64_t sub_1005E113C()
{
  unint64_t result = qword_1009B58F0;
  if (!qword_1009B58F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080BADC, &type metadata for AirPodsLostModeContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B58F0);
  }

  return result;
}

unint64_t sub_1005E1184()
{
  unint64_t result = qword_1009B58F8;
  if (!qword_1009B58F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080BB04, &type metadata for AirPodsLostModeContent.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B58F8);
  }

  return result;
}

uint64_t sub_1005E11C8(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x656C746974LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v5 = 0xE500000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656C746974LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6567617373656DLL && a2 == 0xE700000000000000LL)
  {
    unint64_t v7 = 0xE700000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6567617373656DLL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x6C69616D65LL && a2 == 0xE500000000000000LL)
  {
    unint64_t v8 = 0xE500000000000000LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6C69616D65LL, 0xE500000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 0x6D754E72656E776FLL && a2 == 0xEB00000000726562LL)
  {
    unint64_t v9 = 0xEB00000000726562LL;
LABEL_26:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D754E72656E776FLL, 0xEB00000000726562LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_26;
  }

  if (a1 == 0x65646F4D74736F6CLL && a2 == 0xEF64656C62616E45LL)
  {
    unint64_t v10 = 0xEF64656C62616E45LL;
LABEL_32:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x65646F4D74736F6CLL, 0xEF64656C62616E45LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_32;
  }

  if (a1 == 0x73656369766564LL && a2 == 0xE700000000000000LL)
  {
    swift_bridgeObjectRelease(0xE700000000000000LL);
    return 5LL;
  }

  else
  {
    char v11 = _stringCompareWithSmolCheck(_:_:expecting:)(0x73656369766564LL, 0xE700000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v11 & 1) != 0) {
      return 5LL;
    }
    else {
      return 6LL;
    }
  }

uint64_t *sub_1005E1474(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(a3 + 20);
    unint64_t v8 = (char *)a1 + v7;
    unint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for DateInterval(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = (uint64_t *)((char *)v4 + v11);
    unint64_t v13 = (uint64_t *)((char *)a2 + v11);
    uint64_t v14 = *v13;
    uint64_t v15 = v13[1];
    sub_10008699C(*v13, v15);
    *uint64_t v12 = v14;
    v12[1] = v15;
  }

  return v4;
}

uint64_t sub_1005E152C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  return sub_1000869A4(*(void *)(a1 + *(int *)(a2 + 24)), *(void *)(a1 + *(int *)(a2 + 24) + 8));
}

void *sub_1005E1584(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  sub_10008699C(*v12, v14);
  *uint64_t v11 = v13;
  v11[1] = v14;
  return a1;
}

void *sub_1005E1610(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24LL))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = *v12;
  uint64_t v14 = v12[1];
  sub_10008699C(*v12, v14);
  uint64_t v15 = *v11;
  uint64_t v16 = v11[1];
  *uint64_t v11 = v13;
  v11[1] = v14;
  sub_1000869A4(v15, v16);
  return a1;
}

void *sub_1005E16A4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40LL))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = *(void *)((char *)a1 + v10);
  uint64_t v12 = *(void *)((char *)a1 + v10 + 8);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  sub_1000869A4(v11, v12);
  return a1;
}

uint64_t sub_1005E1728(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1005E1734);
}

uint64_t sub_1005E1734(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DateInterval(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
  return ((int)(v9 >> 29) >> 31) & (((int)(v9 >> 60 << 30) >> 31)
}

uint64_t sub_1005E17C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1005E17D0);
}

uint64_t sub_1005E17D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DateInterval(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))( a1 + *(int *)(a4 + 20),  a2,  a2,  result);
  }
  uint64_t v10 = (void *)(a1 + *(int *)(a4 + 24));
  void *v10 = 0LL;
  v10[1] = (unint64_t)((((-(int)a2 & 2) != 0) - 2 * (_BYTE)a2) & 3) << 60;
  return result;
}

uint64_t type metadata accessor for FamilyCryptoKeysV1(uint64_t a1)
{
  uint64_t result = qword_1009B5958;
  if (!qword_1009B5958) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FamilyCryptoKeysV1);
  }
  return result;
}

uint64_t sub_1005E1898(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for DateInterval(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = &unk_10080BE28;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1005E1918(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009B59B0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1005E1F38();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for FamilyCryptoKeysV1.CodingKeys,  &type metadata for FamilyCryptoKeysV1.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  LOBYTE(v21) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v21, v5);
  if (!v2)
  {
    uint64_t v13 = type metadata accessor for FamilyCryptoKeysV1(0LL);
    uint64_t v14 = (char *)v3 + *(int *)(v13 + 20);
    LOBYTE(v21) = 1;
    uint64_t v15 = type metadata accessor for DateInterval(0LL);
    uint64_t v16 = sub_1003F2C98(&qword_1009AD020, (uint64_t)&protocol conformance descriptor for DateInterval);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v21, v5, v15, v16);
    __int128 v21 = *(_OWORD *)((char *)v3 + *(int *)(v13 + 24));
    char v20 = 2;
    unint64_t v17 = sub_1005E2040();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v5, &type metadata for KeyUnion, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1005E1AAC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v28 = type metadata accessor for DateInterval(0LL);
  uint64_t v26 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v27 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = sub_100004AEC(&qword_1009B5998);
  uint64_t v4 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for FamilyCryptoKeysV1(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100012ED8(a1, v10);
  unint64_t v12 = sub_1005E1F38();
  uint64_t v13 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for FamilyCryptoKeysV1.CodingKeys,  &type metadata for FamilyCryptoKeysV1.CodingKeys,  v12,  v10,  v11);
  if (v13) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v24 = v7;
  id v30 = a1;
  uint64_t v14 = v4;
  uint64_t v15 = v27;
  uint64_t v16 = v28;
  LOBYTE(v31) = 0;
  uint64_t v17 = v29;
  *(void *)uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)(&v31, v29);
  LOBYTE(v31) = 1;
  uint64_t v18 = sub_1003F2C98(&qword_1009AD010, (uint64_t)&protocol conformance descriptor for DateInterval);
  uint64_t v19 = v15;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v15, v16, &v31, v17, v16, v18);
  uint64_t v20 = v24;
  (*(void (**)(char *, void *, uint64_t))(v26 + 32))(&v9[*(int *)(v24 + 20)], v19, v16);
  char v32 = 2;
  unint64_t v21 = sub_1005E1F7C();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v31,  &type metadata for KeyUnion,  &v32,  v17,  &type metadata for KeyUnion,  v21);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v17);
  *(_OWORD *)&v9[*(int *)(v20 + 24)] = v31;
  sub_1005E1FC0((uint64_t)v9, v25);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v30);
  return sub_1005E2004((uint64_t)v9);
}

uint64_t sub_1005E1D58(char *a1, char *a2)
{
  return sub_100308764(*a1, *a2);
}

Swift::Int sub_1005E1D64()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  String.hash(into:)(v3, qword_10080BFE0[v1], 0xE100000000000000LL);
  swift_bridgeObjectRelease(0xE100000000000000LL);
  return Hasher._finalize()();
}

uint64_t sub_1005E1DBC(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE100000000000000LL);
}

Swift::Int sub_1005E1DE8(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  String.hash(into:)(v4, qword_10080BFE0[v2], 0xE100000000000000LL);
  swift_bridgeObjectRelease(0xE100000000000000LL);
  return Hasher._finalize()();
}

unint64_t sub_1005E1E3C@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1005E2228(*a1);
  *a2 = result;
  return result;
}

void sub_1005E1E68(void *a1@<X8>)
{
  *a1 = qword_10080BFE0[*v1];
  a1[1] = 0xE100000000000000LL;
}

uint64_t sub_1005E1E84()
{
  return qword_10080BFE0[*v0];
}

unint64_t sub_1005E1E9C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1005E2228(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1005E1EC0(uint64_t a1)
{
  unint64_t v2 = sub_1005E1F38();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1005E1EE8(uint64_t a1)
{
  unint64_t v2 = sub_1005E1F38();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1005E1F10@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1005E1AAC(a1, a2);
}

uint64_t sub_1005E1F24(void *a1)
{
  return sub_1005E1918(a1);
}

unint64_t sub_1005E1F38()
{
  unint64_t result = qword_1009B59A0;
  if (!qword_1009B59A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080BF8C, &type metadata for FamilyCryptoKeysV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B59A0);
  }

  return result;
}

unint64_t sub_1005E1F7C()
{
  unint64_t result = qword_1009B59A8;
  if (!qword_1009B59A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EEEE0, &type metadata for KeyUnion);
    atomic_store(result, (unint64_t *)&qword_1009B59A8);
  }

  return result;
}

uint64_t sub_1005E1FC0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FamilyCryptoKeysV1(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1005E2004(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FamilyCryptoKeysV1(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

unint64_t sub_1005E2040()
{
  unint64_t result = qword_1009B59B8;
  if (!qword_1009B59B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EEEB8, &type metadata for KeyUnion);
    atomic_store(result, (unint64_t *)&qword_1009B59B8);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for FamilyCryptoKeysV1.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1005E20D0 + 4 * byte_10080BE05[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1005E2104 + 4 * byte_10080BE00[v4]))();
}

uint64_t sub_1005E2104(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005E210C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005E2114LL);
  }
  return result;
}

uint64_t sub_1005E2120(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005E2128LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1005E212C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005E2134(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FamilyCryptoKeysV1.CodingKeys()
{
  return &type metadata for FamilyCryptoKeysV1.CodingKeys;
}

unint64_t sub_1005E2154()
{
  unint64_t result = qword_1009B59C0;
  if (!qword_1009B59C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080BF64, &type metadata for FamilyCryptoKeysV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B59C0);
  }

  return result;
}

unint64_t sub_1005E219C()
{
  unint64_t result = qword_1009B59C8;
  if (!qword_1009B59C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080BE9C, &type metadata for FamilyCryptoKeysV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B59C8);
  }

  return result;
}

unint64_t sub_1005E21E4()
{
  unint64_t result = qword_1009B59D0;
  if (!qword_1009B59D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080BEC4, &type metadata for FamilyCryptoKeysV1.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009B59D0);
  }

  return result;
}

unint64_t sub_1005E2228(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100935160, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1005E2270(uid_t a1)
{
  return UUID.init(uuid:)(uu[0], uu[1], uu[2], uu[3], uu[4], uu[5], uu[6], uu[7], *(void *)&uu[8]);
}

BOOL sub_1005E22FC(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Endianness(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_1007680B0((uint64_t)&off_1009333B0);
  sub_1000F54C8(a1, a2);
  if (v8 == 76)
  {
    uint64_t v9 = sub_1000F55FC(a1, a2);
    uint64_t v11 = v10;
    static Endianness.current.getter(v9);
    sub_100018B30();
    FixedWidthInteger.init(data:ofEndianness:)(&v16, v9, v11, v6);
    if (BYTE4(v16)) {
      uint64_t v12 = 0LL;
    }
    else {
      uint64_t v12 = (int)v16;
    }
    BOOL v13 = sub_1004E4E60(v12, v7);
    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }

  return v13;
}

BOOL sub_1005E2400(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for Endianness(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_1006F1330((uint64_t)&off_100932818);
  sub_1000BDCF0(&v15, 8216LL);
  sub_1000BDCF0(&v15, 8220LL);
  sub_1000F54C8(a1, a2);
  uint64_t v7 = v16;
  if (v8 == 76)
  {
    swift_bridgeObjectRetain(v16);
    uint64_t v9 = sub_1000F55FC(a1, a2);
    uint64_t v11 = v10;
    static Endianness.current.getter(v9);
    sub_100018B30();
    FixedWidthInteger.init(data:ofEndianness:)(&v15, v9, v11, v6);
    if (BYTE4(v15)) {
      uint64_t v12 = 0LL;
    }
    else {
      uint64_t v12 = (int)v15;
    }
    BOOL v13 = sub_1004E4E60(v12, v7);
    swift_bridgeObjectRelease_n(v7, 2LL);
  }

  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }

  return v13;
}

BOOL sub_1005E2538(uint64_t a1, unint64_t a2)
{
  return sub_1005E2568(a1, a2, (uint64_t)&off_1009339B0, sub_1006F1330, 8216LL);
}

BOOL sub_1005E2550(uint64_t a1, unint64_t a2)
{
  return sub_1005E2568(a1, a2, (uint64_t)&off_100934160, sub_1007680B0, 8223LL);
}

BOOL sub_1005E2568( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t v10 = type metadata accessor for Endianness(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v21 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = a4(a3);
  sub_1000BDCF0(&v21, a5);
  sub_1000F54C8(a1, a2);
  uint64_t v13 = v22;
  if (v14 == 76)
  {
    swift_bridgeObjectRetain(v22);
    uint64_t v15 = sub_1000F55FC(a1, a2);
    uint64_t v17 = v16;
    static Endianness.current.getter(v15);
    sub_100018B30();
    FixedWidthInteger.init(data:ofEndianness:)(&v21, v15, v17, v12);
    if (BYTE4(v21)) {
      uint64_t v18 = 0LL;
    }
    else {
      uint64_t v18 = (int)v21;
    }
    BOOL v19 = sub_1004E4E60(v18, v13);
    swift_bridgeObjectRelease_n(v13, 2LL);
  }

  else
  {
    swift_bridgeObjectRelease();
    return 0;
  }

  return v19;
}

BOOL sub_1005E269C(uint64_t a1, uint64_t a2)
{
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v4 = sub_1006A1524(v9);
  swift_bridgeObjectRelease();
  uint64_t v5 = sub_1006F1330(v4);
  swift_bridgeObjectRelease();
  uint64_t v9 = v5;
  sub_1000BDCF0(v8, 8212LL);
  sub_1000BDCF0(v8, 8213LL);
  sub_1000BDCF0(v8, 8216LL);
  sub_1000BDCF0(v8, 8219LL);
  sub_1000BDCF0(v8, 8220LL);
  sub_1000BDCF0(v8, 8223LL);
  BOOL v6 = a1 == 76 && sub_1004E4E60(a2, v9);
  swift_bridgeObjectRelease();
  return v6;
}

uint64_t storeEnumTagSinglePayload for VerifyFindMyNetworkIdResponsePayload( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1005E2828 + 4 * byte_10080C005[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1005E285C + 4 * byte_10080C000[v4]))();
}

uint64_t sub_1005E285C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005E2864(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1005E286CLL);
  }
  return result;
}

uint64_t sub_1005E2878(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1005E2880LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1005E2884(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1005E288C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VerifyFindMyNetworkIdResponsePayload()
{
  return &type metadata for VerifyFindMyNetworkIdResponsePayload;
}

uint64_t sub_1005E28A8(void *a1, uint64_t a2)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  dispatch thunk of BinaryEncoding.container()(v14, v3, v4);
  Bool.intValue.getter(a2);
  unint64_t v5 = sub_100008FA8();
  uint64_t v6 = FixedWidthInteger.data.getter(&type metadata for Int, v5);
  unint64_t v8 = v7;
  v13[0] = v6;
  v13[1] = v7;
  uint64_t v9 = v15;
  uint64_t v10 = v16;
  sub_100037298((uint64_t)v14, v15);
  unint64_t v11 = sub_100042440();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(v13, &type metadata for Data, v11, v9, v10);
  sub_100016F9C(v6, v8);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v14);
}

uint64_t sub_1005E2984@<X0>(void *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1005E2A38(a1);
  if (!v2) {
    *a2 = result & 1;
  }
  return result;
}

uint64_t sub_1005E29B0(void *a1)
{
  return sub_1005E28A8(a1, *v1);
}

unint64_t sub_1005E29C8(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1005E29F4();
  unint64_t result = sub_100256830();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_1005E29F4()
{
  unint64_t result = qword_1009B59D8;
  if (!qword_1009B59D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080C038, &type metadata for VerifyFindMyNetworkIdResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009B59D8);
  }

  return result;
}

uint64_t sub_1005E2A38(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  dispatch thunk of BinaryDecoding.container()(v14, v3, v4);
  uint64_t v5 = v15;
  uint64_t v6 = v16;
  char v7 = sub_100037298((uint64_t)v14, v15);
  uint64_t v8 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1LL, v5, v6);
  if (!v1)
  {
    uint64_t v10 = v8;
    unint64_t v11 = v9;
    sub_100042F34();
    DataProtocol.intValue.getter(&type metadata for Data);
    unint64_t v12 = sub_100008FA8();
    char v7 = FixedWidthInteger.BOOLValue.getter(&type metadata for Int, v12);
    sub_100016F9C(v10, v11);
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v14);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v7 & 1;
}

void sub_1005E2B34()
{
  uint64_t v1 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (uint64_t *)((char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = *(void **)(v0 + 16);
  *uint64_t v4 = v5;
  (*(void (**)(void *, void, uint64_t))(v2 + 104))(v4, enum case for DispatchPredicate.onQueue(_:), v1);
  id v6 = v5;
  LOBYTE(v5) = _dispatchPreconditionTest(_:)(v4);
  (*(void (**)(void *, uint64_t))(v2 + 8))(v4, v1);
  if ((v5 & 1) != 0)
  {
    if (qword_10099B898 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B898, sub_1006DA610);
LABEL_3:
  uint64_t v7 = type metadata accessor for Logger(0LL);
  uint64_t v8 = sub_10000A720(v7, (uint64_t)qword_100A2B2C0);
  unint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.info.getter(v9);
  if (os_log_type_enabled(v9, v10))
  {
    unint64_t v11 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v11 = 0;
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "invalidate", v11, 2u);
    swift_slowDealloc(v11, -1LL, -1LL);
  }
}

uint64_t sub_1005E2C88(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = static os_log_type_t.debug.getter(a1);
  if (qword_10099B798 != -1) {
    swift_once(&qword_10099B798, sub_100651870);
  }
  os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  qword_100A2B0A8,  "AccessoryDiscoveryService.initiatePairing",  41LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v8 = *(dispatch_queue_s **)(v3 + 48);
  unint64_t v9 = (void *)swift_allocObject(&unk_100969720, 48LL, 7LL);
  v9[2] = a2;
  v9[3] = a3;
  v9[4] = a1;
  v9[5] = v3;
  uint64_t v10 = swift_allocObject(&unk_100969748, 32LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = sub_1005E6584;
  *(void *)(v10 + 24) = v9;
  v15[4] = sub_100154688;
  void v15[5] = v10;
  v15[0] = _NSConcreteStackBlock;
  v15[1] = 1107296256LL;
  v15[2] = sub_100025BD4;
  void v15[3] = &unk_100969760;
  unint64_t v11 = _Block_copy(v15);
  swift_retain();
  id v12 = a1;
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v8, v11);
  _Block_release(v11);
  char isEscapingClosureAtFileLocation = swift_isEscapingClosureAtFileLocation(v10, "", 130LL, 265LL, 27LL, 1LL);
  swift_release();
  uint64_t result = swift_release();
  if ((isEscapingClosureAtFileLocation & 1) != 0) {
    __break(1u);
  }
  return result;
}

uint64_t sub_1005E2E30()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2AEB8);
  sub_10000A720(v0, (uint64_t)qword_100A2AEB8);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000012LL,  0x800000010086A520LL);
}

Swift::Int sub_1005E2EB0()
{
  return Hasher._finalize()();
}

uint64_t sub_1005E2F04(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD000000000000030LL, 0x8000000100850050LL);
}

Swift::Int sub_1005E2F20(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1005E2F70@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  uint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1009368F8, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_1005E2FC0(void *a1@<X8>)
{
  *a1 = 0xD000000000000030LL;
  a1[1] = 0x8000000100850050LL;
}

id sub_1005E2FE0()
{
  uint64_t v1 = *(void **)(v0 + 64);
  if (v1)
  {
    id v2 = *(id *)(v0 + 64);
  }

  else
  {
    Swift::String v3 = (objc_class *)type metadata accessor for AccessoryDiscoveryTrampoline();
    uint64_t v4 = (char *)objc_allocWithZone(v3);
    *(void *)&v4[OBJC_IVAR____TtC12searchpartyd28AccessoryDiscoveryTrampoline_implementation] = v0;
    v9.receiver = v4;
    v9.super_class = v3;
    swift_retain();
    id v5 = objc_msgSendSuper2(&v9, "init");
    id v6 = *(void **)(v0 + 64);
    *(void *)(v0 + 64) = v5;
    id v2 = v5;

    uint64_t v1 = 0LL;
  }

  id v7 = v1;
  return v2;
}