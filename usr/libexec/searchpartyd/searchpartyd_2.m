uint64_t sub_1000B7954(uint64_t a1, unint64_t a2)
{
  unint64_t v5;
  char v7;
  if (a1 == 1684826487 && a2 == 0xE400000000000000LL)
  {
    v5 = 0xE400000000000000LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(1684826487LL, 0xE400000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x656E774F7261656ELL && a2 == 0xE900000000000072LL)
  {
    swift_bridgeObjectRelease(0xE900000000000072LL);
    return 1LL;
  }

  else
  {
    v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x656E774F7261656ELL, 0xE900000000000072LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

void *sub_1000B7A40(void *a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A06B0);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v28 = v2;
  uint64_t v29 = v3;
  __chkstk_darwin(v2);
  v30 = (char *)v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC(&qword_1009A06B8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = sub_100004AEC(&qword_1009A06C0);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  v10 = (char *)v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  v31 = a1;
  v13 = sub_100012ED8(a1, v11);
  unint64_t v14 = sub_1000B7294();
  uint64_t v15 = v33;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AdvertisementUnion.CodingKeys,  &type metadata for AdvertisementUnion.CodingKeys,  v14,  v11,  v12);
  if (!v15)
  {
    v27[1] = v6;
    v16 = v30;
    uint64_t v33 = v8;
    if (*(void *)(KeyedDecodingContainer.allKeys.getter(v7) + 16) == 1LL)
    {
      LOBYTE(v32) = 1;
      unint64_t v17 = sub_1000B72D8();
      KeyedDecodingContainer.nestedContainer<A>(keyedBy:forKey:)( &type metadata for AdvertisementUnion.NearOwnerCodingKeys,  &v32,  v7,  &type metadata for AdvertisementUnion.NearOwnerCodingKeys,  v17);
      unint64_t v18 = sub_1000B7E0C();
      uint64_t v19 = v28;
      KeyedDecodingContainer.decode<A>(_:forKey:)( &v32,  &type metadata for NearOwnerAdvertisement,  v20,  v28,  &type metadata for NearOwnerAdvertisement,  v18);
      (*(void (**)(char *, uint64_t))(v29 + 8))(v16, v19);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v7);
      v13 = v32;
    }

    else
    {
      uint64_t v21 = type metadata accessor for DecodingError(0LL);
      swift_allocError(v21, &protocol witness table for DecodingError, 0LL, 0LL);
      v23 = v22;
      sub_100004AEC(&qword_1009A5B60);
      v13 = v10;
      void *v23 = &type metadata for AdvertisementUnion;
      uint64_t v24 = KeyedDecodingContainer.codingPath.getter(v7);
      DecodingError.Context.init(codingPath:debugDescription:underlyingError:)( v24,  0xD00000000000002BLL,  0x80000001008535B0LL,  0LL);
      uint64_t v25 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v21 - 8) + 104LL))( v23,  enum case for DecodingError.typeMismatch(_:),  v21);
      swift_willThrow(v25);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v7);
    }
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v31);
  return v13;
}

unint64_t sub_1000B7E0C()
{
  unint64_t result = qword_1009A06C8;
  if (!qword_1009A06C8)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for NearOwnerAdvertisement,  &type metadata for NearOwnerAdvertisement);
    atomic_store(result, (unint64_t *)&qword_1009A06C8);
  }

  return result;
}

unint64_t sub_1000B7E50()
{
  unint64_t result = qword_1009A06D0;
  if (!qword_1009A06D0)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for Advertisement, &type metadata for Advertisement);
    atomic_store(result, (unint64_t *)&qword_1009A06D0);
  }

  return result;
}

uint64_t sub_1000B7E94(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009B9390);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000B7EDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconDetails(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000B7F20()
{
  unint64_t result = qword_1009A0700;
  if (!qword_1009A0700)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EAE0C, &type metadata for AdvertismentType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A0700);
  }

  return result;
}

unint64_t sub_1000B7F64()
{
  unint64_t result = qword_1009A0708;
  if (!qword_1009A0708)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EADBC, &type metadata for AdvertismentType.PoshCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A0708);
  }

  return result;
}

unint64_t sub_1000B7FA8()
{
  unint64_t result = qword_1009A0710;
  if (!qword_1009A0710)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EAD6C, &type metadata for AdvertismentType.LegacyPoshCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A0710);
  }

  return result;
}

unint64_t sub_1000B7FEC()
{
  unint64_t result = qword_1009A0718;
  if (!qword_1009A0718)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EAD1C, &type metadata for AdvertismentType.Type18CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A0718);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for AdvertismentType.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000B807C + 4 * byte_1007EA534[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000B80B0 + 4 * byte_1007EA52F[v4]))();
}

uint64_t sub_1000B80B0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B80B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000B80C0LL);
  }
  return result;
}

uint64_t sub_1000B80CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000B80D4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000B80D8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B80E0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AdvertismentType.CodingKeys()
{
  return &type metadata for AdvertismentType.CodingKeys;
}

ValueMetadata *type metadata accessor for AdvertismentType.Type18CodingKeys()
{
  return &type metadata for AdvertismentType.Type18CodingKeys;
}

ValueMetadata *type metadata accessor for AdvertismentType.LegacyPoshCodingKeys()
{
  return &type metadata for AdvertismentType.LegacyPoshCodingKeys;
}

ValueMetadata *type metadata accessor for AdvertismentType.PoshCodingKeys()
{
  return &type metadata for AdvertismentType.PoshCodingKeys;
}

uint64_t storeEnumTagSinglePayload for AdvertisementUnion.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000B817C + 4 * byte_1007EA53E[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000B81B0 + 4 * byte_1007EA539[v4]))();
}

uint64_t sub_1000B81B0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B81B8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000B81C0LL);
  }
  return result;
}

uint64_t sub_1000B81CC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000B81D4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000B81D8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000B81E0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AdvertisementUnion.CodingKeys()
{
  return &type metadata for AdvertisementUnion.CodingKeys;
}

ValueMetadata *type metadata accessor for AdvertisementUnion.WildCodingKeys()
{
  return &type metadata for AdvertisementUnion.WildCodingKeys;
}

uint64_t _s12searchpartyd16AdvertismentTypeO14PoshCodingKeysOwst_0(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000B824C + 4 * byte_1007EA543[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000B826C + 4 * byte_1007EA548[v4]))();
  }
}

_BYTE *sub_1000B824C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000B826C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000B8274(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000B827C(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000B8284(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000B828C(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AdvertisementUnion.NearOwnerCodingKeys()
{
  return &type metadata for AdvertisementUnion.NearOwnerCodingKeys;
}

unint64_t sub_1000B82AC()
{
  unint64_t result = qword_1009A0740;
  if (!qword_1009A0740)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EA974, &type metadata for AdvertisementUnion.NearOwnerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A0740);
  }

  return result;
}

unint64_t sub_1000B82F4()
{
  unint64_t result = qword_1009A0748;
  if (!qword_1009A0748)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EAA2C, &type metadata for AdvertisementUnion.WildCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A0748);
  }

  return result;
}

unint64_t sub_1000B833C()
{
  unint64_t result = qword_1009A0750;
  if (!qword_1009A0750)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EAAE4, &type metadata for AdvertisementUnion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A0750);
  }

  return result;
}

unint64_t sub_1000B8384()
{
  unint64_t result = qword_1009A0758;
  if (!qword_1009A0758)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EAB9C, &type metadata for AdvertismentType.PoshCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A0758);
  }

  return result;
}

unint64_t sub_1000B83CC()
{
  unint64_t result = qword_1009A0760;
  if (!qword_1009A0760)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EACF4, &type metadata for AdvertismentType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A0760);
  }

  return result;
}

unint64_t sub_1000B8414()
{
  unint64_t result = qword_1009A0768;
  if (!qword_1009A0768)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EAC14, &type metadata for AdvertismentType.Type18CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A0768);
  }

  return result;
}

unint64_t sub_1000B845C()
{
  unint64_t result = qword_1009A0770;
  if (!qword_1009A0770)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EAC3C, &type metadata for AdvertismentType.Type18CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A0770);
  }

  return result;
}

unint64_t sub_1000B84A4()
{
  unint64_t result = qword_1009A0778;
  if (!qword_1009A0778)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EABC4, &type metadata for AdvertismentType.LegacyPoshCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A0778);
  }

  return result;
}

unint64_t sub_1000B84EC()
{
  unint64_t result = qword_1009A0780;
  if (!qword_1009A0780)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EABEC, &type metadata for AdvertismentType.LegacyPoshCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A0780);
  }

  return result;
}

unint64_t sub_1000B8534()
{
  unint64_t result = qword_1009A0788;
  if (!qword_1009A0788)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EAB0C, &type metadata for AdvertismentType.PoshCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A0788);
  }

  return result;
}

unint64_t sub_1000B857C()
{
  unint64_t result = qword_1009A0790;
  if (!qword_1009A0790)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EAB34, &type metadata for AdvertismentType.PoshCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A0790);
  }

  return result;
}

unint64_t sub_1000B85C4()
{
  unint64_t result = qword_1009A0798;
  if (!qword_1009A0798)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EAC64, &type metadata for AdvertismentType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A0798);
  }

  return result;
}

unint64_t sub_1000B860C()
{
  unint64_t result = qword_1009A07A0;
  if (!qword_1009A07A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EAC8C, &type metadata for AdvertismentType.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A07A0);
  }

  return result;
}

unint64_t sub_1000B8654()
{
  unint64_t result = qword_1009A07A8;
  if (!qword_1009A07A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EA99C, &type metadata for AdvertisementUnion.WildCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A07A8);
  }

  return result;
}

unint64_t sub_1000B869C()
{
  unint64_t result = qword_1009A07B0;
  if (!qword_1009A07B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EA9C4, &type metadata for AdvertisementUnion.WildCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A07B0);
  }

  return result;
}

unint64_t sub_1000B86E4()
{
  unint64_t result = qword_1009A07B8;
  if (!qword_1009A07B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EA8E4, &type metadata for AdvertisementUnion.NearOwnerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A07B8);
  }

  return result;
}

unint64_t sub_1000B872C()
{
  unint64_t result = qword_1009A07C0;
  if (!qword_1009A07C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EA90C, &type metadata for AdvertisementUnion.NearOwnerCodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A07C0);
  }

  return result;
}

unint64_t sub_1000B8774()
{
  unint64_t result = qword_1009A07C8;
  if (!qword_1009A07C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EAA54, &type metadata for AdvertisementUnion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A07C8);
  }

  return result;
}

unint64_t sub_1000B87BC()
{
  unint64_t result = qword_1009A07D0;
  if (!qword_1009A07D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EAA7C, &type metadata for AdvertisementUnion.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A07D0);
  }

  return result;
}

uint64_t sub_1000B880C@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A0B80(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000B8838@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0B98(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000B8860@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0E1C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000B8888@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0F10(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000B88B0(uint64_t a1)
{
  uint64_t v35 = a1 + 64;
  uint64_t v2 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v3 = -1LL;
  if (v2 < 64) {
    uint64_t v3 = ~(-1LL << v2);
  }
  unint64_t v4 = v3 & *(void *)(a1 + 64);
  int64_t v5 = (unint64_t)(v2 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v6 = 0LL;
  uint64_t v7 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v4)
    {
      unint64_t v8 = __clz(__rbit64(v4));
      v4 &= v4 - 1;
      unint64_t v9 = v8 | (v6 << 6);
    }

    else
    {
      int64_t v10 = v6 + 1;
      if (__OFADD__(v6, 1LL)) {
        goto LABEL_47;
      }
      if (v10 >= v5)
      {
LABEL_42:
        swift_release(a1);
        return (uint64_t)v7;
      }

      unint64_t v11 = *(void *)(v35 + 8 * v10);
      ++v6;
      if (!v11)
      {
        int64_t v6 = v10 + 1;
        if (v10 + 1 >= v5) {
          goto LABEL_42;
        }
        unint64_t v11 = *(void *)(v35 + 8 * v6);
        if (!v11)
        {
          int64_t v6 = v10 + 2;
          if (v10 + 2 >= v5) {
            goto LABEL_42;
          }
          unint64_t v11 = *(void *)(v35 + 8 * v6);
          if (!v11)
          {
            int64_t v6 = v10 + 3;
            if (v10 + 3 >= v5) {
              goto LABEL_42;
            }
            unint64_t v11 = *(void *)(v35 + 8 * v6);
            if (!v11)
            {
              int64_t v12 = v10 + 4;
              if (v12 >= v5) {
                goto LABEL_42;
              }
              unint64_t v11 = *(void *)(v35 + 8 * v12);
              if (!v11)
              {
                while (1)
                {
                  int64_t v6 = v12 + 1;
                  if (__OFADD__(v12, 1LL)) {
                    goto LABEL_48;
                  }
                  if (v6 >= v5) {
                    goto LABEL_42;
                  }
                  unint64_t v11 = *(void *)(v35 + 8 * v6);
                  ++v12;
                  if (v11) {
                    goto LABEL_23;
                  }
                }
              }

              int64_t v6 = v12;
            }
          }
        }
      }

uint64_t sub_1000B8B68()
{
  v0 = (void *)SPFinderStateChangedNotification;
  uint64_t v1 = type metadata accessor for DarwinNotificationHelper(0LL);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  uint64_t result = DarwinNotificationHelper.init(notificationName:rateLimit:)(v0, 0.0);
  qword_100A2A170 = result;
  return result;
}

uint64_t sub_1000B8BB8@<X0>(_BYTE *a1@<X8>)
{
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  char v2 = sub_1006A0B80(v8);
  uint64_t v3 = sub_1006A0B98(v8);
  swift_bridgeObjectRelease();
  unint64_t v4 = sub_1000F3170();
  uint64_t v5 = sub_1000B88B0(v4);
  swift_bridgeObjectRelease();
  uint64_t v6 = type metadata accessor for FinderStateInfo(0LL);
  sub_1000F0564(v5, &a1[*(int *)(v6 + 28)]);
  swift_bridgeObjectRelease();
  uint64_t result = sub_1000F2554((uint64_t)&a1[*(int *)(v6 + 32)]);
  *a1 = v2 & 1;
  a1[1] = 0;
  a1[2] = v3 != -1;
  return result;
}

uint64_t sub_1000B8CC8@<X0>(uint64_t a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t v4 = type metadata accessor for FinderStateInfo(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v15 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  dispatch_assert_queue_V2(*(dispatch_queue_t *)(a1 + 16));
  uint64_t v7 = swift_retain();
  uint64_t v8 = sub_100614190(v7);
  char v10 = sub_1006139D8(v8, v9 & 0x10101);
  swift_release();
  sub_1000B8BB8(v6);
  char v11 = v6[2];
  sub_100018C68((uint64_t)v6, type metadata accessor for FinderStateInfo);
  unint64_t v12 = sub_1000F3170();
  uint64_t v13 = sub_1000B88B0(v12);
  swift_bridgeObjectRelease();
  sub_1000F0564(v13, &a2[*(int *)(v4 + 28)]);
  swift_bridgeObjectRelease();
  uint64_t result = sub_1000F2554((uint64_t)&a2[*(int *)(v4 + 32)]);
  *a2 = v10 & 1;
  a2[1] = 0;
  a2[2] = v11;
  return result;
}

uint64_t sub_1000B8DF4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100004AEC(&qword_1009A0CB0);
  __chkstk_darwin(v4);
  uint64_t v40 = (uint64_t)&v39 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_1009A0CB8);
  __chkstk_darwin(v6);
  uint64_t v39 = (uint64_t)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v8);
  char v10 = (char *)&v39 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v39 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  unint64_t v17 = (char *)&v39 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v18 = (*(uint64_t (**)(char *, void, uint64_t))(v15 + 104))( v17,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v14);
  static DispatchQoS.unspecified.getter(v18);
  aBlock[0] = _swiftEmptyArrayStorage;
  uint64_t v19 = sub_100007864( (unint64_t *)&qword_10099BAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
  uint64_t v21 = sub_1000372EC( (unint64_t *)&qword_10099BAB0,  (uint64_t *)&unk_1009A0CD0,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v20, v21, v8, v19);
  *(void *)(v2 + 16) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000003CLL,  0x8000000100853780LL,  v13,  v10,  v17,  0LL);
  uint64_t v22 = v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_configurationSubscription;
  uint64_t v23 = sub_100004AEC(&qword_1009A0840);
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v23 - 8) + 56LL);
  v24(v22, 1LL, 1LL, v23);
  uint64_t v25 = v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_fmipStateSubscription;
  uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009A0850);
  uint64_t v27 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL);
  v27(v25, 1LL, 1LL, v26);
  *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_fmipStateManager) = a1;
  id v28 = objc_msgSend(objc_allocWithZone(FMStateCapture), "init", swift_retain_n(a1, 2).n128_f64[0]);
  uint64_t v29 = swift_allocObject(&unk_10093CE78, 32LL, 7LL);
  *(void *)(v29 + 16) = sub_1000D4D04;
  *(void *)(v29 + 24) = a1;
  v43 = sub_1000D4D30;
  uint64_t v44 = v29;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1000325B4;
  v42 = &unk_10093CE90;
  v30 = _Block_copy(aBlock);
  swift_retain();
  swift_release();
  [v28 setStateCaptureBlock:v30];
  _Block_release(v30);
  swift_release();
  *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_stateCapture) = v28;
  unint64_t v31 = sub_100412BD0((uint64_t)&off_100933008);
  uint64_t v32 = type metadata accessor for DarwinNotificationHelper(0LL);
  swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_notificationListener) = DarwinNotificationHelper.init(notificationHandlers:)(v31);
  uint64_t v33 = type metadata accessor for FinderStateManager(0LL);
  v42 = (void *)v33;
  v43 = (uint64_t (*)())&off_10093CE50;
  aBlock[0] = v2;
  swift_retain();
  uint64_t v34 = v39;
  sub_1001BFAC0((uint64_t)aBlock, v39);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
  v27(v34, 0LL, 1LL, v26);
  uint64_t v35 = v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_fmipStateSubscription;
  swift_beginAccess(v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_fmipStateSubscription, aBlock, 33LL, 0LL);
  sub_1000D4D50(v34, v35, &qword_1009A0CB8);
  swift_endAccess(aBlock);
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  v42 = (void *)v33;
  v43 = (uint64_t (*)())&off_10093CE18;
  aBlock[0] = v2;
  swift_retain();
  uint64_t v36 = v40;
  sub_100031AEC((uint64_t)aBlock, v40);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(aBlock);
  v24(v36, 0LL, 1LL, v23);
  uint64_t v37 = v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_configurationSubscription;
  swift_beginAccess( v2 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_configurationSubscription,  aBlock,  33LL,  0LL);
  sub_1000D4D50(v36, v37, &qword_1009A0CB0);
  swift_endAccess(aBlock);
  return v2;
}

uint64_t sub_1000B9324@<X0>(uint64_t a1@<X8>)
{
  uint64_t v2 = swift_retain();
  uint64_t result = sub_100614190(v2);
  *(void *)a1 = result;
  *(_BYTE *)(a1 + 8) = v4 & 1;
  *(_BYTE *)(a1 + 9) = v5 & 1;
  *(_BYTE *)(a1 + 10) = v6 & 1;
  return result;
}

uint64_t sub_1000B9364()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009A0850);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  char v5 = &v13[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = sub_100004AEC(&qword_1009A0840);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v13[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = v1 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_configurationSubscription;
  swift_beginAccess(v1 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_configurationSubscription, v14, 0LL, 0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v10, 1LL, v6))
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v7 + 16))(v9, v10, v6);
    Subscription.unsubscribe(completion:)(sub_1000B9558, 0LL, v6);
    (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  }

  uint64_t v11 = v1 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_fmipStateSubscription;
  swift_beginAccess(v1 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_fmipStateSubscription, v13, 0LL, 0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v11, 1LL, v2))
  {
    (*(void (**)(_BYTE *, uint64_t, uint64_t))(v3 + 16))(v5, v11, v2);
    Subscription.unsubscribe(completion:)(sub_1000B9558, 0LL, v2);
    (*(void (**)(_BYTE *, uint64_t))(v3 + 8))(v5, v2);
  }

  sub_100015794(v10, &qword_1009A0CB0);
  sub_100015794(v11, &qword_1009A0CB8);
  swift_release(*(void *)(v1 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_fmipStateManager));

  swift_release(*(void *)(v1 + OBJC_IVAR____TtC12searchpartyd18FinderStateManager_notificationListener));
  return v1;
}

uint64_t sub_1000B955C(uint64_t result)
{
  if (result)
  {
    uint64_t v1 = result;
    uint64_t v2 = swift_errorRetain(result);
    uint64_t v3 = static os_log_type_t.error.getter(v2);
    uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v5 = swift_allocObject(v4, 72LL, 7LL);
    *(_OWORD *)(v5 + 16) = xmmword_1007E67D0;
    uint64_t v12 = v1;
    swift_errorRetain(v1);
    uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v7 = String.init<A>(describing:)(&v12, v6);
    uint64_t v9 = v8;
    *(void *)(v5 + 56) = &type metadata for String;
    *(void *)(v5 + 64) = sub_1000226F4();
    *(void *)(v5 + 32) = v7;
    *(void *)(v5 + 40) = v9;
    uint64_t v10 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
    uint64_t v11 = (void *)static OS_os_log.default.getter(v10);
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v11, "FinderStateManager could not unsubscribe %@", 43LL, 2LL, v5);
    swift_bridgeObjectRelease();

    return swift_errorRelease(v1);
  }

  return result;
}

uint64_t sub_1000B966C()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1000B9690()
{
  return type metadata accessor for FinderStateManager(0LL);
}

uint64_t type metadata accessor for FinderStateManager(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009A0828, (uint64_t)&nominal type descriptor for FinderStateManager);
}

void sub_1000B96AC(uint64_t a1)
{
  v6[0] = (char *)&value witness table for Builtin.UnknownObject + 64;
  sub_1000B991C(319LL, (unint64_t *)&qword_10099EBB0, &qword_1009A0840);
  if (v3 <= 0x3F)
  {
    v6[1] = *(void *)(v2 - 8) + 64LL;
    sub_1000B991C(319LL, &qword_1009A0848, (uint64_t *)&unk_1009A0850);
    if (v5 <= 0x3F)
    {
      v6[2] = *(void *)(v4 - 8) + 64LL;
      v6[3] = (char *)&value witness table for Builtin.NativeObject + 64;
      v6[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
      v6[5] = (char *)&value witness table for Builtin.NativeObject + 64;
      swift_updateClassMetadata2(a1, 256LL, 6LL, v6, a1 + 80);
    }
  }

uint64_t sub_1000B9774(char a1, int a2, int a3, uint64_t a4, uint64_t a5)
{
  uint64_t v6 = v5;
  int v23 = a3;
  int v24 = a2;
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v23 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = *(void *)(v6 + 16);
  static DispatchWorkItemFlags.barrier.getter(v16);
  uint64_t v19 = swift_allocObject(&unk_10093CEC8, 43LL, 7LL);
  *(void *)(v19 + 16) = v6;
  *(void *)(v19 + 24) = a4;
  *(void *)(v19 + 32) = a5;
  *(_BYTE *)(v19 + 40) = a1;
  *(_BYTE *)(v19 + 41) = v23;
  *(_BYTE *)(v19 + 42) = v24;
  aBlock[4] = sub_1000D4F54;
  uint64_t v27 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  void aBlock[3] = &unk_10093CEE0;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v21 = swift_retain();
  static DispatchQoS.unspecified.getter(v21);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v18, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v18, v14);
  return swift_release(v27);
}

void sub_1000B991C(uint64_t a1, unint64_t *a2, uint64_t *a3)
{
  if (!*a2)
  {
    uint64_t v5 = sub_100004B78(a3);
    unint64_t v6 = type metadata accessor for Optional(a1, v5);
    if (!v7) {
      atomic_store(v6, a2);
    }
  }

void *sub_1000B9968(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = (void *)a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v14 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *(_WORD *)a1 = *(_WORD *)a2;
    *(_BYTE *)(a1 + 2) = *((_BYTE *)a2 + 2);
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v8 = (void *)(a1 + v7);
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for Date(0LL);
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
    if (v12(v9, 1LL, v10))
    {
      uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099D720);
      memcpy(v8, v9, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, char *, uint64_t))(v11 + 16))(v8, v9, v10);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v11 + 56))(v8, 0LL, 1LL, v10);
    }

    uint64_t v15 = *(int *)(a3 + 32);
    uint64_t v16 = (char *)v4 + v15;
    uint64_t v17 = (char *)a2 + v15;
    if (v12(v17, 1LL, v10))
    {
      uint64_t v18 = sub_100004AEC((uint64_t *)&unk_10099D720);
      memcpy(v16, v17, *(void *)(*(void *)(v18 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v11 + 16))(v16, v17, v10);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v11 + 56))(v16, 0LL, 1LL, v10);
    }
  }

  return v4;
}

uint64_t sub_1000B9AD8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = type metadata accessor for Date(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v6 + 48);
  if (!v7(v4, 1LL, v5)) {
    (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  }
  uint64_t v8 = a1 + *(int *)(a2 + 32);
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v7)(v8, 1LL, v5);
  if (!(_DWORD)result) {
    return (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 8))(v8, v5);
  }
  return result;
}

uint64_t sub_1000B9B84(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1LL, v9))
  {
    uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  uint64_t v13 = *(int *)(a3 + 32);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (v11(v15, 1LL, v9))
  {
    uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 16))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0LL, 1LL, v9);
  }

  return a1;
}

_BYTE *sub_1000B9CC8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1LL, v9);
  int v13 = v11(v8, 1LL, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v7, v8, v9);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v13)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 32);
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  int v18 = v11(&a1[v15], 1LL, v9);
  int v19 = v11(v17, 1LL, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 24))(v16, v17, v9);
      return a1;
    }

    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }

  if (v19)
  {
LABEL_12:
    uint64_t v20 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 16))(v16, v17, v9);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0LL, 1LL, v9);
  return a1;
}

uint64_t sub_1000B9EA4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  *(_BYTE *)(a1 + 2) = *(_BYTE *)(a2 + 2);
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (void *)(a1 + v6);
  uint64_t v8 = (const void *)(a2 + v6);
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v10 + 48);
  if (v11(v8, 1LL, v9))
  {
    uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v7, v8, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v7, v8, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
  }

  uint64_t v13 = *(int *)(a3 + 32);
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (const void *)(a2 + v13);
  if (v11(v15, 1LL, v9))
  {
    uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v14, v15, *(void *)(*(void *)(v16 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v10 + 32))(v14, v15, v9);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v10 + 56))(v14, 0LL, 1LL, v9);
  }

  return a1;
}

_BYTE *sub_1000B9FE8(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = &a1[v6];
  uint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for Date(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v10 + 48);
  int v12 = v11(v7, 1LL, v9);
  int v13 = v11(v8, 1LL, v9);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v7, v8, v9);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v10 + 56))(v7, 0LL, 1LL, v9);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v13)
  {
    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v7, v9);
LABEL_6:
    uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v7, v8, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40))(v7, v8, v9);
LABEL_7:
  uint64_t v15 = *(int *)(a3 + 32);
  uint64_t v16 = &a1[v15];
  uint64_t v17 = &a2[v15];
  int v18 = v11(&a1[v15], 1LL, v9);
  int v19 = v11(v17, 1LL, v9);
  if (!v18)
  {
    if (!v19)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 40))(v16, v17, v9);
      return a1;
    }

    (*(void (**)(_BYTE *, uint64_t))(v10 + 8))(v16, v9);
    goto LABEL_12;
  }

  if (v19)
  {
LABEL_12:
    uint64_t v20 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v16, v17, *(void *)(*(void *)(v20 - 8) + 64LL));
    return a1;
  }

  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v10 + 32))(v16, v17, v9);
  (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v10 + 56))(v16, 0LL, 1LL, v9);
  return a1;
}

uint64_t sub_1000BA1C4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000BA1D0);
}

uint64_t sub_1000BA1D0(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 254)
  {
    unsigned int v4 = *a1;
    BOOL v5 = v4 >= 2;
    int v6 = (v4 + 2147483646) & 0x7FFFFFFF;
    if (v5) {
      return (v6 + 1);
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D720);
    return (*(uint64_t (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v10 - 8) + 48LL))( &a1[*(int *)(a3 + 28)],  a2,  v10);
  }

uint64_t sub_1000BA250(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000BA25C);
}

_BYTE *sub_1000BA25C(_BYTE *result, uint64_t a2, int a3, uint64_t a4)
{
  BOOL v5 = result;
  if (a3 == 254)
  {
    *uint64_t result = a2 + 1;
  }

  else
  {
    uint64_t v7 = sub_100004AEC((uint64_t *)&unk_10099D720);
    return (_BYTE *)(*(uint64_t (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 28)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for FinderStateInfo(uint64_t a1)
{
  return sub_10008BED8(a1, (uint64_t *)&unk_1009A09D0, (uint64_t)&nominal type descriptor for FinderStateInfo);
}

void sub_1000BA2E4(uint64_t a1)
{
  v4[0] = &unk_1007EAFC8;
  v4[1] = &unk_1007EAFC8;
  v4[2] = &unk_1007EAFC8;
  sub_10003FEF4(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(v2 - 8) + 64LL;
    uint64_t v6 = v5;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
  }

uint64_t sub_1000BA35C(uint64_t a1, uint64_t a2, uint64_t a3, unsigned __int8 a4, unsigned __int8 a5, char a6)
{
  uint64_t v39 = a2;
  uint64_t v40 = a3;
  int v37 = a5;
  int v7 = a4;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v38 = (uint64_t)&v35 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  int v12 = (char *)&v35 - v11;
  uint64_t v13 = type metadata accessor for FinderStateInfo(0LL);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v35 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14);
  int v19 = (char *)&v35 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  uint64_t v22 = (unsigned __int8 *)&v35 - v21;
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v25 = (char *)&v35 - v24;
  __chkstk_darwin(v23);
  uint64_t v27 = (unsigned __int8 *)&v35 - v26;
  sub_1000B8BB8(v25);
  sub_10001DC4C((uint64_t)v25, (uint64_t)v22, type metadata accessor for FinderStateInfo);
  if (v7 == 2) {
    int v28 = *v22;
  }
  else {
    int v28 = v7 & 1;
  }
  int v36 = v28;
  sub_100018C68((uint64_t)v22, type metadata accessor for FinderStateInfo);
  sub_10001DC4C((uint64_t)v25, (uint64_t)v19, type metadata accessor for FinderStateInfo);
  if (v37 == 2) {
    unsigned __int8 v29 = v19[2];
  }
  else {
    unsigned __int8 v29 = v37 & 1;
  }
  sub_100018C68((uint64_t)v19, type metadata accessor for FinderStateInfo);
  sub_10001DC4C((uint64_t)v25, (uint64_t)v16, type metadata accessor for FinderStateInfo);
  if (a6 == 2) {
    unsigned __int8 v30 = v16[1];
  }
  else {
    unsigned __int8 v30 = a6 & 1;
  }
  sub_100018C68((uint64_t)v16, type metadata accessor for FinderStateInfo);
  unint64_t v31 = sub_1000F3170();
  uint64_t v32 = sub_1000B88B0(v31);
  swift_bridgeObjectRelease();
  sub_1000F0564(v32, v12);
  swift_bridgeObjectRelease();
  uint64_t v33 = v38;
  sub_1000F2554(v38);
  sub_100018C68((uint64_t)v25, type metadata accessor for FinderStateInfo);
  *uint64_t v27 = v36;
  v27[1] = v30;
  void v27[2] = v29;
  sub_10003F130((uint64_t)v12, (uint64_t)&v27[*(int *)(v13 + 28)]);
  sub_10003F130(v33, (uint64_t)&v27[*(int *)(v13 + 32)]);
  sub_1000D4814(v27, v39, v40);
  return sub_100018C68((uint64_t)v27, type metadata accessor for FinderStateInfo);
}

uint64_t sub_1000BA604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BA624(a1, a2, a3, "FinderStateManager: FMIP State changed", 38LL);
}

uint64_t sub_1000BA614(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000BA624(a1, a2, a3, "FinderStateManager: FMIP location services state changed", 56LL);
}

uint64_t sub_1000BA624(uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, uint64_t a5)
{
  uint64_t v7 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v8 = (void *)static OS_os_log.default.getter(v7);
  uint64_t v9 = static os_log_type_t.default.getter(v8);
  os_log(_:dso:log:type:_:)(a4, a5, 2LL, &_mh_execute_header, v8, v9, _swiftEmptyArrayStorage);

  if (qword_10099B0E0 != -1) {
    swift_once(&qword_10099B0E0, sub_1000B8B68);
  }
  return dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
}

uint64_t sub_1000BA700(void (*a1)(id, void), uint64_t a2)
{
  uint64_t v41 = a2;
  v42 = a1;
  uint64_t v3 = type metadata accessor for FinderStateInfo(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v38 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v39 = (uint64_t)&v38 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v38 - v9;
  uint64_t v11 = type metadata accessor for Date(0LL);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v40 = v2;
  uint64_t v14 = swift_retain();
  uint64_t v15 = sub_100614190(v14);
  int v17 = v16;
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v18 = sub_1006A0F10((uint64_t)v44);
  swift_bridgeObjectRelease();
  uint64_t v44 = &_swiftEmptySetSingleton;
  id v19 = SPDisabledReasoniCloudSignedOut;
  char v20 = sub_1000BC710((uint64_t)v19, v18);

  if ((v20 & 1) != 0)
  {
    sub_1000BFD90( v43,  SPFinderDisabledReasoniCloudSignedOut,  &qword_1009A0A20,  (uint64_t (*)(void))type metadata accessor for SPFinderDisabledReason);
  }

  id v21 = SPDisabledReasonLowAccountSecurity;
  char v22 = sub_1000BC710((uint64_t)v21, v18);

  if ((v22 & 1) != 0)
  {
    sub_1000BFD90( v43,  SPFinderDisabledReasonLowAccountSecurity,  &qword_1009A0A20,  (uint64_t (*)(void))type metadata accessor for SPFinderDisabledReason);
  }

  id v23 = SPDisabledReasonUserOptOut;
  char v24 = sub_1000BC710((uint64_t)v23, v18);
  swift_bridgeObjectRelease();

  if ((v24 & 1) != 0)
  {
    sub_1000BFD90( v43,  SPFinderDisabledReasonUserOptOut,  &qword_1009A0A20,  (uint64_t (*)(void))type metadata accessor for SPFinderDisabledReason);
  }

  if ((sub_1001BF158() & 1) != 0)
  {
    if ((v17 & 1) != 0) {
      goto LABEL_11;
    }
  }

  else
  {
    sub_1000BFD90( v43,  SPFinderDisabledReasonFindMyiPhoneOff,  &qword_1009A0A20,  (uint64_t (*)(void))type metadata accessor for SPFinderDisabledReason);

    if ((v17 & 1) != 0)
    {
LABEL_11:
      goto LABEL_12;
    }
  }

  sub_1000BFD90( v43,  SPFinderDisabledReasonServiceDisabled,  &qword_1009A0A20,  (uint64_t (*)(void))type metadata accessor for SPFinderDisabledReason);

  if ((sub_100627288() & 1) == 0)
  {
LABEL_12:
    sub_1000BFD90( v43,  SPFinderDisabledReasonLocationServices,  &qword_1009A0A20,  (uint64_t (*)(void))type metadata accessor for SPFinderDisabledReason);
  }

LABEL_13:
  uint64_t v25 = sub_1001BEF0C();
  *(&v38 - 2) = __chkstk_darwin(v25);
  type metadata accessor for CLAuthorizationStatus(0LL);
  OS_dispatch_queue.sync<A>(execute:)(sub_1000D44D4, &v38 - 4, v26);

  if ((LODWORD(v43[0]) - 3) >= 2)
  {
    sub_1000BFD90( v43,  SPFinderDisabledReasonLocationServicesFindMyFramework,  &qword_1009A0A20,  (uint64_t (*)(void))type metadata accessor for SPFinderDisabledReason);
  }

  if ((v17 & 0x10000) == 0)
  {
    sub_1000BFD90( v43,  SPFinderDisabledReasonCannotPublishAnonymously,  &qword_1009A0A20,  (uint64_t (*)(void))type metadata accessor for SPFinderDisabledReason);
  }

  if (!v44[2])
  {
    sub_1000BFD90( v43,  SPFinderDisabledReasonNone,  &qword_1009A0A20,  (uint64_t (*)(void))type metadata accessor for SPFinderDisabledReason);
  }

  uint64_t v27 = sub_1006139D8(v15, v17 & 0x10101);
  char v28 = v27;
  Date.init()(v27);
  unint64_t v29 = sub_1000F3170();
  uint64_t v30 = sub_1000B88B0(v29);
  swift_bridgeObjectRelease();
  sub_1000F0564(v30, v10);
  swift_bridgeObjectRelease();
  uint64_t v31 = v39;
  sub_1000F2554(v39);
  sub_1000B8BB8(v5);
  int v32 = v5[2];
  sub_100018C68((uint64_t)v5, type metadata accessor for FinderStateInfo);
  if (v32) {
    uint64_t v33 = 1LL;
  }
  else {
    uint64_t v33 = -1LL;
  }
  id v34 = objc_allocWithZone(&OBJC_CLASS___SPFinderStateInfo);
  id v35 = sub_1000BCD7C(v28 & 1, 0, (uint64_t)v13, (uint64_t)v10, v31, v33);
  id v36 = v35;
  v42(v35, 0LL);

  return swift_release(v15);
}

  uint64_t v15 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v15 + 48) + 8 * a2) = v6;
  int v16 = *(void *)(v15 + 16);
  int v17 = __OFADD__(v16, 1LL);
  uint64_t v18 = v16 + 1;
  if (v17) {
    __break(1u);
  }
  else {
    *(void *)(v15 + 16) = v18;
  }
  return result;
}

  uint64_t v15 = *v4;
  *(void *)(*v4 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v15 + 48) + 8 * a2) = v6;
  int v16 = *(void *)(v15 + 16);
  int v17 = __OFADD__(v16, 1LL);
  uint64_t v18 = v16 + 1;
  if (v17) {
    __break(1u);
  }
  else {
    *(void *)(v15 + 16) = v18;
  }
  return result;
}

    swift_once(&qword_10099B708, sub_100651168);
    goto LABEL_4;
  }

  int v32 = v64;
  sub_1004F730C();
  QueueSynchronizer.conditionalSync<A>(_:)(sub_100153864);
  uint64_t v33 = swift_release();
  if (aBlock != 1)
  {
    v49 = static os_log_type_t.error.getter(v33);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    os_log(_:dso:log:_:_:)( v49,  &_mh_execute_header,  qword_100A2B018,  "searchForDetachedLocalBeacon call failed because cloud backed beacon store is not avaiable",  90LL,  2LL,  _swiftEmptyArrayStorage);
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    v51 = v65;
    v50 = v66;
    (*(void (**)(char *, void, uint64_t))(v65 + 104))( v7,  enum case for DispatchQoS.QoSClass.default(_:),  v66);
    char v28 = (void *)static OS_dispatch_queue.global(qos:)(v7);
    (*(void (**)(char *, uint64_t))(v51 + 8))(v7, v50);
    v52 = swift_allocObject(&unk_100940280, 32LL, 7LL);
    v53 = v68;
    *(void *)(v52 + 16) = v67;
    *(void *)(v52 + 24) = v53;
    v80 = sub_10015387C;
    v81 = (void *)v52;
    aBlock = _NSConcreteStackBlock;
    v77 = 1107296256LL;
    uint64_t v31 = &unk_100940298;
    goto LABEL_10;
  }

  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  id v35 = v65;
  id v34 = v66;
  (*(void (**)(char *, void, uint64_t))(v65 + 104))(v7, enum case for DispatchQoS.QoSClass.default(_:), v66);
  id v36 = (void *)static OS_dispatch_queue.global(qos:)(v7);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v7, v34);
  int v37 = (void *)swift_allocObject(&unk_1009402D0, 40LL, 7LL);
  uint64_t v38 = v67;
  uint64_t v39 = v68;
  v37[2] = v32;
  v37[3] = v38;
  v37[4] = v39;
  v80 = sub_100153898;
  v81 = v37;
  aBlock = _NSConcreteStackBlock;
  v77 = 1107296256LL;
  v78 = sub_1001C31E8;
  v79 = &unk_1009402E8;
  uint64_t v40 = _Block_copy(&aBlock);
  swift_retain();
  uint64_t v41 = swift_retain();
  v42 = v70;
  static DispatchQoS.unspecified.getter(v41);
  v75 = _swiftEmptyArrayStorage;
  v43 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v44 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  v45 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  v46 = v69;
  v47 = v44;
  v48 = v73;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v75, v47, v45, v73, v43);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v42, v46, v40);
  _Block_release(v40);

  (*(void (**)(char *, uint64_t))(v71 + 8))(v46, v48);
  (*(void (**)(char *, uint64_t))(v72 + 8))(v42, v74);
  return swift_release();
}

    id v21 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1LL << v11;
    char v22 = (uint64_t *)(v21[6] + 16 * v11);
    unsigned __int8 *v22 = v7;
    v22[1] = v8;
    sub_10006A358(v46, (_OWORD *)(v21[7] + 32 * v11));
    id v23 = v21[2];
    char v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    v21[2] = v25;
    uint64_t v26 = v4 - 1;
    if (!v26) {
      return swift_bridgeObjectRelease_n(a1, 2LL);
    }
    for (i = a1 + 80; ; i += 48LL)
    {
      sub_10001581C(i, (uint64_t)&v49, (uint64_t *)&unk_1009A34E0);
      char v28 = v49;
      unint64_t v29 = v50;
      v47 = v49;
      v48 = v50;
      sub_10006A358(v51, v46);
      uint64_t v30 = (void *)*a3;
      uint64_t v31 = sub_10030CF14(v28, v29);
      uint64_t v33 = v30[2];
      id v34 = (v32 & 1) == 0;
      char v24 = __OFADD__(v33, v34);
      id v35 = v33 + v34;
      if (v24) {
        break;
      }
      id v36 = v32;
      if (v30[3] < v35)
      {
        sub_10004C92C(v35, 1LL);
        uint64_t v31 = sub_10030CF14(v28, v29);
        if ((v36 & 1) != (v37 & 1)) {
          goto LABEL_25;
        }
      }

      if ((v36 & 1) != 0) {
        goto LABEL_10;
      }
      uint64_t v38 = (void *)*a3;
      *(void *)(*a3 + 8 * (v31 >> 6) + 64) |= 1LL << v31;
      uint64_t v39 = (uint64_t *)(v38[6] + 16 * v31);
      *uint64_t v39 = v28;
      v39[1] = v29;
      sub_10006A358(v46, (_OWORD *)(v38[7] + 32 * v31));
      uint64_t v40 = v38[2];
      char v24 = __OFADD__(v40, 1LL);
      uint64_t v41 = v40 + 1;
      if (v24) {
        goto LABEL_24;
      }
      v38[2] = v41;
      if (!--v26) {
        return swift_bridgeObjectRelease_n(a1, 2LL);
      }
    }

  uint64_t v44 = v62;
  sub_10002214C(v23, isEscapingClosureAtFileLocation);
  return v44;
}

  sub_100015794((uint64_t)v31, &qword_1009A5900);
  return 0LL;
}

    v132 = v451;
    v133 = v452;
    sub_100012ED8(&v450, v451);
    v103 = (*(uint64_t (**)(uint64_t, uint64_t))(v133 + 88))(v132, v133);
    goto LABEL_14;
  }

  v101 = v451;
  v102 = v452;
  sub_100012ED8(&v450, v451);
  v103 = (*(uint64_t (**)(uint64_t, uint64_t))(v102 + 104))(v101, v102);
LABEL_14:
  v379 = v103;
  v439 = *(char **)(v383 + 72);
  v410 = v97;
  swift_bridgeObjectRetain(v97);
  v134 = (char *)_swiftEmptyArrayStorage;
  v135 = v382;
  v136 = v389;
  v137 = v434;
  do
  {
    sub_10001DC4C(v135, v90, type metadata accessor for RawSearchResult);
    sub_10001581C(v90 + *(int *)(v100 + 40), (uint64_t)v81, (uint64_t *)&unk_10099D720);
    sub_100018C68(v90, type metadata accessor for RawSearchResult);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v74 + 48))(v81, 1LL, v137) == 1)
    {
      sub_100015794((uint64_t)v81, (uint64_t *)&unk_10099D720);
    }

    else
    {
      v138 = *(void (**)(char *, char *, uint64_t))(v74 + 32);
      v139 = v432;
      v138(v432, v81, v137);
      v138(v438, v139, v137);
      if ((swift_isUniquelyReferenced_nonNull_native(v134) & 1) == 0) {
        v134 = (char *)sub_1004C44A8(0, *((void *)v134 + 2) + 1LL, 1, (unint64_t)v134);
      }
      v141 = *((void *)v134 + 2);
      v140 = *((void *)v134 + 3);
      if (v141 >= v140 >> 1) {
        v134 = (char *)sub_1004C44A8(v140 > 1, v141 + 1, 1, (unint64_t)v134);
      }
      *((void *)v134 + 2) = v141 + 1;
      v137 = v434;
      v138( &v134[((*(unsigned __int8 *)(v74 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v74 + 80))
            + *(void *)(v74 + 72) * v141],
        v438,
        v434);
      v100 = v433;
    }

    v135 += (uint64_t)v439;
    --v136;
  }

  while (v136);
  v142 = v410;
  swift_bridgeObjectRelease();
  sub_1000F0564((uint64_t)v134, v413);
  swift_bridgeObjectRelease();
  v143 = *((void *)v430 + 6);
  v144 = *((void *)v430 + 7);
  sub_100012ED8((void *)v430 + 3, v143);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v144 + 24))(v143, v144) & 1) != 0)
  {
    v145 = sub_100577B58(v423);
    v146 = _swiftEmptyArrayStorage;
    *(void *)&v447 = _swiftEmptyArrayStorage;
    v147 = v145[2];
    v148 = v437;
    v149 = v436;
    if (v147)
    {
      v150 = 0LL;
      v151 = type metadata accessor for BeaconEstimatedLocation;
      v152 = v411;
      while (v150 < v145[2])
      {
        v153 = (*(unsigned __int8 *)(v429 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v429 + 80);
        v90 = *(void *)(v429 + 72);
        v154 = v424;
        sub_10001DC4C( (uint64_t)v145 + v153 + v90 * v150,  (uint64_t)v424,  type metadata accessor for BeaconEstimatedLocation);
        if (v154[*(int *)(v152 + 44)] == 8)
        {
          sub_10002218C((uint64_t)v154, v428, type metadata accessor for BeaconEstimatedLocation);
          if ((swift_isUniquelyReferenced_nonNull_native(v146) & 1) == 0) {
            sub_100032D0C(0, v146[2] + 1LL, 1);
          }
          v146 = (void *)v447;
          v156 = *(void *)(v447 + 16);
          v155 = *(void *)(v447 + 24);
          if (v156 >= v155 >> 1)
          {
            sub_100032D0C(v155 > 1, v156 + 1, 1);
            v146 = (void *)v447;
          }

          v146[2] = v156 + 1;
          sub_10002218C(v428, (uint64_t)v146 + v153 + v156 * v90, type metadata accessor for BeaconEstimatedLocation);
          v148 = v437;
        }

        else
        {
          sub_100018C68((uint64_t)v154, type metadata accessor for BeaconEstimatedLocation);
        }

        ++v150;
        v149 = v436;
        if (v147 == v150)
        {
          v146 = (void *)v447;
          goto LABEL_43;
        }
      }

      __break(1u);
    }

    else
    {
      v152 = v411;
LABEL_43:
      swift_bridgeObjectRelease();
      v158 = v397;
      sub_1000F0BF0((uint64_t)v146, (uint64_t)v397);
      swift_release();
      v159 = (*(uint64_t (**)(void (*)(void, void), uint64_t, uint64_t))(v429 + 48))( v158,  1LL,  v152);
      v90 = v422;
      v151 = v418;
      if (v159 == 1)
      {
        sub_100015794((uint64_t)v158, &qword_1009A48E0);
        v392 = sub_1004E7F80(v410);
        v147 = 0LL;
LABEL_50:
        LODWORD(v428) = 8;
        goto LABEL_51;
      }

      v160 = (uint64_t)v398;
      v161 = sub_10002218C((uint64_t)v158, (uint64_t)v398, type metadata accessor for BeaconEstimatedLocation);
      __chkstk_darwin(v161);
      v374[-2] = v160;
      v162 = v410;
      swift_bridgeObjectRetain(v410);
      v163 = v162;
      v147 = 0LL;
      v164 = sub_100023D90((uint64_t (*)(char *))sub_100245DE4, &v374[-4], v163);
      if (!*(void *)(v164 + 16))
      {
        swift_bridgeObjectRelease();
        v359 = v148;
        v360 = v401;
        v361 = v392;
        (*(void (**)(void *, char *, uint64_t))(v401 + 16))(v392, &v430[*((int *)v400 + 8)], v90);
        v362 = v391;
        v363 = (*((uint64_t (**)(os_log_t, uint64_t, uint64_t))v149 + 2))(v391, v423, v359);
        v364 = (os_log_s *)Logger.logObject.getter(v363);
        v365 = static os_log_type_t.default.getter(v364);
        if (os_log_type_enabled(v364, v365))
        {
          v366 = v362;
          v367 = swift_slowAlloc(22LL, -1LL);
          v368 = swift_slowAlloc(32LL, -1LL);
          *(void *)&v447 = v368;
          *(_DWORD *)v367 = 141558275;
          v442 = 1752392040LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v443, v367 + 4, v367 + 12);
          *(_WORD *)(v367 + 12) = 2081;
          v369 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          v370 = dispatch thunk of CustomStringConvertible.description.getter(v359, v369);
          v442 = sub_1003F11D4(v370, v371, (uint64_t *)&v447);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v443, v367 + 14, v367 + 22);
          swift_bridgeObjectRelease();
          (*((void (**)(os_log_t, uint64_t))v149 + 1))(v366, v359);
          _os_log_impl( (void *)&_mh_execute_header,  v364,  v365,  "No new location for beacon %{private,mask.hash}s.",  (uint8_t *)v367,  0x16u);
          swift_arrayDestroy(v368, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v368, -1LL, -1LL);
          swift_slowDealloc(v367, -1LL, -1LL);

          (*(void (**)(void *, uint64_t))(v401 + 8))(v392, v422);
        }

        else
        {
          (*((void (**)(os_log_t, uint64_t))v149 + 1))(v362, v359);

          (*(void (**)(void *, uint64_t))(v360 + 8))(v361, v90);
        }

        v372 = v390;
        sub_100015794((uint64_t)v413, (uint64_t *)&unk_10099D720);
        sub_100018C68((uint64_t)v372, type metadata accessor for RawSearchResult);
        v352 = type metadata accessor for BeaconEstimatedLocation;
        v353 = (uint64_t)v398;
        goto LABEL_134;
      }

      v146 = sub_1004E7F80(v164);
      swift_bridgeObjectRelease();
      v150 = v396;
      sub_10001DC4C(v160, v396, type metadata accessor for BeaconEstimatedLocation);
      if ((swift_isUniquelyReferenced_nonNull_native(v146) & 1) != 0)
      {
LABEL_47:
        v166 = v146[2];
        v165 = v146[3];
        if (v166 >= v165 >> 1) {
          v392 = sub_1004C5C70((void *)(v165 > 1), v166 + 1, 1, v146);
        }
        else {
          v392 = v146;
        }
        v448 = v152;
        v449 = &off_10093F780;
        v167 = sub_10000A7C8(&v447);
        sub_10001DC4C(v150, (uint64_t)v167, type metadata accessor for BeaconEstimatedLocation);
        v168 = v392;
        v392[2] = v166 + 1;
        sub_100012EC0(&v447, (uint64_t)&v168[5 * v166 + 4]);
        sub_100018C68(v150, type metadata accessor for BeaconEstimatedLocation);
        sub_100018C68((uint64_t)v398, type metadata accessor for BeaconEstimatedLocation);
        goto LABEL_50;
      }
    }

    v146 = sub_1004C5C70(0LL, v146[2] + 1LL, 1, v146);
    goto LABEL_47;
  }

  v392 = sub_1004E7F80(v142);
  v147 = 0LL;
  else {
    v157 = 7;
  }
  LODWORD(v428) = v157;
  v90 = v422;
  v148 = v437;
  v149 = v436;
  v151 = v418;
LABEL_51:
  v169 = *(void *)v430;
  sub_10050BA28(&v450);
  v171 = v170;
  v172 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
  v173 = v149[80];
  v174 = (v173 + 32) & ~v173;
  v438 = (char *)*((void *)v149 + 9);
  v396 = v173;
  v175 = swift_allocObject(v172, &v438[v174], v173 | 7);
  *(_OWORD *)(v175 + 16) = xmmword_1007E67D0;
  v176 = (void (*)(uint64_t, uint64_t, uint64_t))*((void *)v149 + 2);
  v176(v175 + v174, v423, v148);
  v446 = v175;
  v432 = (char *)v176;
  if ((v379 & 1) != 0)
  {
    v177 = sub_100041014(*v390 & 0xB);
    v178 = (v177 >> 8) & 1;
    v179 = HIWORD(v177) & 1;
    v180 = HIBYTE(v177) & 1;
    v181 = v451;
    v182 = v452;
    v183 = sub_100012ED8(&v450, v451);
    v184 = sub_10054E868((uint64_t)v183, v178, v179, v180, v169, v181, v182);
    v185 = v184[2];
    if (v185)
    {
      v442 = (uint64_t)_swiftEmptyArrayStorage;
      sub_1000328D0(0, v185, 0);
      v186 = (uint64_t)(v184 + 4);
      v187 = (char *)v442;
      do
      {
        sub_100013044(v186, (uint64_t)&v447);
        v189 = v448;
        v188 = v449;
        sub_100012ED8(&v447, v448);
        (*(void (**)(uint64_t))(*((void *)v188[1] + 1) + 32LL))(v189);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v447);
        if ((swift_isUniquelyReferenced_nonNull_native(v187) & 1) == 0)
        {
          sub_1000328D0(0, *((void *)v187 + 2) + 1LL, 1);
          v187 = (char *)v442;
        }

        v191 = *((void *)v187 + 2);
        v190 = *((void *)v187 + 3);
        v192 = v421;
        if (v191 >= v190 >> 1)
        {
          sub_1000328D0(v190 > 1, v191 + 1, 1);
          v192 = v421;
          v187 = (char *)v442;
        }

        *((void *)v187 + 2) = v191 + 1;
        (*((void (**)(char *, dispatch_group_s *, uint64_t))v436 + 4))( &v187[v174 + v191 * (void)v438],  v192,  v148);
        v442 = (uint64_t)v187;
        v186 += 40LL;
        --v185;
      }

      while (v185);
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRelease();
      v187 = (char *)_swiftEmptyArrayStorage;
    }

    swift_bridgeObjectRetain(v187);
    sub_100184B50(v194);
    v195 = *((void *)v187 + 2);
    v149 = v436;
    v176 = (void (*)(uint64_t, uint64_t, uint64_t))v432;
    if (v195)
    {
      v196 = &v187[v174];
      v197 = swift_bridgeObjectRetain(v187);
      while (1)
      {
        v198 = v420;
        ((void (*)(char *, char *, uint64_t, __n128))v176)(v420, v196, v148, v197);
        v199 = (void (*)(char *, void, uint64_t, uint64_t))*((void *)v149 + 7);
        v199(v198, 0LL, 1LL, v148);
        v200 = v419;
        (*((void (**)(void))v149 + 4))();
        sub_100233EB4(v200, (uint64_t)v430, v423);
        if (v147)
        {
          (*((void (**)(char *, uint64_t))v149 + 1))(v200, v148);
          swift_bridgeObjectRelease();
          __break(1u);
          goto LABEL_141;
        }

        (*((void (**)(char *, uint64_t))v149 + 1))(v200, v148);
        v196 = &v438[(void)v196];
        if (!--v195) {
          goto LABEL_69;
        }
      }
    }

    else
    {
      v199 = (void (*)(char *, void, uint64_t, uint64_t))*((void *)v436 + 7);
      v197 = swift_bridgeObjectRetain(v187);
LABEL_69:
      ((void (*)(char *, uint64_t, uint64_t, uint64_t, __n128))v199)(v420, 1LL, 1LL, v148, v197);
    }

    v193 = v423;
    swift_bridgeObjectRelease_n(v187, 2LL);
    v90 = v422;
    v151 = v418;
  }

  else
  {
    v193 = v423;
  }

  v420 = (char *)v174;
  v201 = v401;
  v202 = *(void (**)(uint64_t, char *, uint64_t))(v401 + 16);
  v399 = &v430[*((int *)v400 + 8)];
  v400 = v202;
  ((void (*)(uint64_t (*)(uint64_t)))v202)(v151);
  v203 = v417;
  v176((uint64_t)v417, v193, v148);
  v204 = sub_100013044((uint64_t)&v450, (uint64_t)&v447);
  v205 = (os_log_s *)Logger.logObject.getter(v204);
  v206 = static os_log_type_t.default.getter(v205);
  v207 = v206;
  if (os_log_type_enabled(v205, v206))
  {
    v208 = swift_slowAlloc(42LL, -1LL);
    v421 = (dispatch_group_s *)swift_slowAlloc(32LL, -1LL);
    v442 = (uint64_t)v421;
    *(_DWORD *)v208 = 141558787;
    *(void *)&v441 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v441, &v442, v208 + 4, v208 + 12);
    *(_WORD *)(v208 + 12) = 2081;
    v209 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    LODWORD(v419) = v207;
    v210 = dispatch thunk of CustomStringConvertible.description.getter(v148, v209);
    v441 = COERCE_DOUBLE(sub_1003F11D4(v210, v211, &v442));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v441, &v442, v208 + 14, v208 + 22);
    swift_bridgeObjectRelease();
    v424 = (_BYTE *)*((void *)v149 + 1);
    ((void (*)(char *, uint64_t))v424)(v203, v148);
    *(_WORD *)(v208 + 22) = 2050;
    v212 = v448;
    v213 = (uint64_t)v449;
    sub_100012ED8(&v447, v448);
    v214 = sub_1006D3204(v212, v213);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v447);
    v441 = *(double *)&v214;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v441, &v442, v208 + 24, v208 + 32);
    *(_WORD *)(v208 + 32) = 2050;
    v149 = v436;
    v441 = v171;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v441, &v442, v208 + 34, v208 + 42);
    _os_log_impl( (void *)&_mh_execute_header,  v205,  (os_log_type_t)v419,  "reductiveFiltering: applyFilterOnSingleTruthLocation, beacon: %{private,mask.hash}s, type: %{public}lu, transmitPo wer: %{public}f.",  (uint8_t *)v208,  0x2Au);
    v215 = v421;
    swift_arrayDestroy(v421, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v215, -1LL, -1LL);
    v216 = v201;
    v217 = v422;
    swift_slowDealloc(v208, -1LL, -1LL);

    v397 = *(void (**)(void, void))(v216 + 8);
    v397(v418, v217);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v447);
    v424 = (_BYTE *)*((void *)v149 + 1);
    ((void (*)(char *, uint64_t))v424)(v203, v148);

    v397 = *(void (**)(void, void))(v201 + 8);
    v397(v151, v90);
    v217 = v90;
  }

  v218 = v451;
  v219 = v452;
  sub_100012ED8(&v450, v451);
  v220 = sub_1006D3204(v218, v219);
  v221 = v392;
  v222 = (char *)sub_1006D4888((uint64_t)v392, v220, v171);
  v223 = (uint64_t (*)(void, uint64_t, uint64_t))v432;
  v398 = v222;
  if (!v222)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v229 = v395;
    v400(v395, v399, v217);
    v230 = v393;
    v231 = v437;
    v232 = v223(v393, v423, v437);
    v233 = (os_log_s *)Logger.logObject.getter(v232);
    v234 = static os_log_type_t.default.getter(v233);
    if (os_log_type_enabled(v233, v234))
    {
      v235 = swift_slowAlloc(22LL, -1LL);
      v236 = swift_slowAlloc(32LL, -1LL);
      *(void *)&v447 = v236;
      *(_DWORD *)v235 = 141558275;
      v442 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v443, v235 + 4, v235 + 12);
      *(_WORD *)(v235 + 12) = 2081;
      v237 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      v238 = dispatch thunk of CustomStringConvertible.description.getter(v231, v237);
      v442 = sub_1003F11D4(v238, v239, (uint64_t *)&v447);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v443, v235 + 14, v235 + 22);
      swift_bridgeObjectRelease();
      ((void (*)(uint64_t, uint64_t))v424)(v230, v231);
      _os_log_impl( (void *)&_mh_execute_header,  v233,  v234,  "CLReductiveFilterSuite.triangulate returned no location for beacon %{private,mask.hash}s.",  (uint8_t *)v235,  0x16u);
      swift_arrayDestroy(v236, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v236, -1LL, -1LL);
      swift_slowDealloc(v235, -1LL, -1LL);

      v240 = v395;
    }

    else
    {
      ((void (*)(uint64_t, uint64_t))v424)(v230, v231);

      v240 = v229;
    }

    v397(v240, v217);
    v351 = v390;
    sub_100015794((uint64_t)v413, (uint64_t *)&unk_10099D720);
    v352 = type metadata accessor for RawSearchResult;
    v353 = (uint64_t)v351;
LABEL_134:
    sub_100018C68(v353, v352);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v450);
    return (char *)_swiftEmptyArrayStorage;
  }

  *(void *)&v447 = v221;
  swift_bridgeObjectRetain(v221);
  sub_10023B200(&v447);
  if (!v147)
  {
    swift_bridgeObjectRelease();
    v224 = v447;
    v225 = *(void *)(v447 + 16);
    if (v225)
    {
      v226 = v447 + 32;
      swift_retain();
      v227 = v423;
      v228 = v430;
      do
      {
        sub_100234214(v226, (uint64_t)v228, v227);
        v226 += 40LL;
        --v225;
      }

      while (v225);
      v374[0] = 0LL;
      swift_release_n(v224, 2LL);
      v223 = (uint64_t (*)(void, uint64_t, uint64_t))v432;
    }

    else
    {
      v374[0] = 0LL;
      swift_release();
    }

    v421 = dispatch_group_create();
    v241 = *(char **)(v446 + 16);
    v242 = v412;
    v374[1] = v446;
    if (v241)
    {
      v395 = ~v396;
      v243 = &v420[v446];
      v387 = v443;
      v394 += v396;
      swift_bridgeObjectRetain(v446);
      v420 = (char *)_swiftEmptyArrayStorage;
      *((void *)&v244 + 1) = 0xC000000000000000LL;
      v393 = xmmword_1007E4480;
      *(void *)&v244 = 141560323LL;
      v386 = v244;
      v385 = (char *)&type metadata for Any + 8;
      v245 = v424;
      while (1)
      {
        v246 = v437;
        v223(v242, (uint64_t)v243, v437);
        (*((void (**)(char *, void, uint64_t, uint64_t))v149 + 7))(v242, 0LL, 1LL, v246);
        v247 = (*((uint64_t (**)(char *, uint64_t, uint64_t))v149 + 6))(v242, 1LL, v246);
        v424 = v245;
        if (v247 == 1) {
          break;
        }
        v418 = (uint64_t (*)(uint64_t))v243;
        v419 = v241;
        v248 = v431;
        v249 = v437;
        v417 = (char *)*((void *)v149 + 4);
        v250 = ((uint64_t (*)(char *, char *, uint64_t))v417)(v431, v242, v437);
        v251 = (int *)v411;
        v252 = v435;
        UUID.init()(v250);
        v223((char *)v252 + v251[6], (uint64_t)v248, v249);
        v253 = v398;
        [v398 coordinate];
        v255 = v254;
        [v253 coordinate];
        v257 = v256;
        [v253 horizontalAccuracy];
        v259 = v258;
        v260 = [v253 timestamp];
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v260);

        sub_10001581C((uint64_t)v413, (uint64_t)v252 + v251[12], (uint64_t *)&unk_10099D720);
        *v252 = v393;
        *(void *)((char *)v252 + v251[7]) = v255;
        *(void *)((char *)v252 + v251[8]) = v257;
        *(void *)((char *)v252 + v251[9]) = v259;
        *((_BYTE *)v252 + v251[11]) = v428;
        v261 = v410;
        *(void *)((char *)v252 + v251[13]) = v410;
        v400((uint64_t)v427, v399, v217);
        v262 = v402;
        sub_10001DC4C((uint64_t)v252, v402, type metadata accessor for BeaconEstimatedLocation);
        v263 = v416;
        ((void (*)(char *, char *, uint64_t))v432)(v416, v248, v249);
        v264 = v446;
        v265 = (uint64_t)v414;
        sub_10001DC4C((uint64_t)v252, v425, type metadata accessor for BeaconEstimatedLocation);
        sub_10001DC4C((uint64_t)v252, v426, type metadata accessor for BeaconEstimatedLocation);
        sub_10001DC4C((uint64_t)v252, v265, type metadata accessor for BeaconEstimatedLocation);
        v266 = (uint64_t)v252;
        v267 = v415;
        sub_10001DC4C(v266, v415, type metadata accessor for BeaconEstimatedLocation);
        swift_bridgeObjectRetain_n(v264, 2LL);
        swift_bridgeObjectRetain(v261);
        v269 = (os_log_s *)Logger.logObject.getter(v268);
        v270 = static os_log_type_t.default.getter(v269);
        v271 = v270;
        if (os_log_type_enabled(v269, v270))
        {
          v272 = swift_slowAlloc(102LL, -1LL);
          LODWORD(v397) = v271;
          v273 = v272;
          v392 = (void *)swift_slowAlloc(128LL, -1LL);
          *(void *)&v447 = v392;
          *(_DWORD *)v273 = v386;
          v442 = 1752392040LL;
          v274 = v387;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v387, v273 + 4, v273 + 12);
          *(_WORD *)(v273 + 12) = 2081;
          v391 = v269;
          v275 = v264;
          v276 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          v277 = v437;
          v278 = dispatch thunk of CustomStringConvertible.description.getter(v437, v276);
          v442 = sub_1003F11D4(v278, v279, (uint64_t *)&v447);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v274, v273 + 14, v273 + 22);
          swift_bridgeObjectRelease();
          sub_100018C68(v262, type metadata accessor for BeaconEstimatedLocation);
          *(_WORD *)(v273 + 22) = 2160;
          v442 = 1752392040LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v274, v273 + 24, v273 + 32);
          *(_WORD *)(v273 + 32) = 2081;
          v280 = v416;
          v281 = v276;
          v282 = (uint64_t)v414;
          v283 = dispatch thunk of CustomStringConvertible.description.getter(v277, v281);
          v442 = sub_1003F11D4(v283, v284, (uint64_t *)&v447);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v274, v273 + 34, v273 + 42);
          swift_bridgeObjectRelease();
          ((void (*)(char *, uint64_t))v424)(v280, v277);
          *(_WORD *)(v273 + 42) = 2048;
          v285 = *(void *)(v275 + 16);
          swift_bridgeObjectRelease();
          v442 = v285 - 1;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v274, v273 + 44, v273 + 52);
          swift_bridgeObjectRelease();
          *(_WORD *)(v273 + 52) = 2049;
          v286 = v425;
          v442 = *(void *)(v425 + v251[7]);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v274, v273 + 54, v273 + 62);
          sub_100018C68(v286, type metadata accessor for BeaconEstimatedLocation);
          *(_WORD *)(v273 + 62) = 2049;
          v287 = v426;
          v442 = *(void *)(v426 + v251[8]);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v274, v273 + 64, v273 + 72);
          sub_100018C68(v287, type metadata accessor for BeaconEstimatedLocation);
          *(_WORD *)(v273 + 72) = 2048;
          v442 = *(void *)(v282 + v251[9]);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v274, v273 + 74, v273 + 82);
          sub_100018C68(v282, type metadata accessor for BeaconEstimatedLocation);
          *(_WORD *)(v273 + 82) = 2082;
          v288 = v415;
          v289 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
          v290 = dispatch thunk of CustomStringConvertible.description.getter(v434, v289);
          v442 = sub_1003F11D4(v290, v291, (uint64_t *)&v447);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v274, v273 + 84, v273 + 92);
          swift_bridgeObjectRelease();
          sub_100018C68(v288, type metadata accessor for BeaconEstimatedLocation);
          *(_WORD *)(v273 + 92) = 2080;
          v292 = sub_100167394(v428);
          v442 = sub_1003F11D4(v292, v293, (uint64_t *)&v447);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v442, v274, v273 + 94, v273 + 102);
          swift_bridgeObjectRelease();
          v294 = v391;
          _os_log_impl( (void *)&_mh_execute_header,  v391,  (os_log_type_t)v397,  "△ Result LocationID: %{private,mask.hash}s, for Beacon: %{private,mask.hash}s, Peers: %ld, Location: lat: %{ private}f, lon: %{private}f, accuracy: %f, timestamp: %{public}s, source: %s.",  (uint8_t *)v273,  0x66u);
          v295 = v392;
          swift_arrayDestroy(v392, 4LL, v385);
          swift_slowDealloc(v295, -1LL, -1LL);
          swift_slowDealloc(v273, -1LL, -1LL);

          v397 = *(void (**)(void, void))(v401 + 8);
          v397(v427, v422);
        }

        else
        {
          swift_bridgeObjectRelease();
          sub_100018C68(v262, type metadata accessor for BeaconEstimatedLocation);
          ((void (*)(char *, uint64_t))v424)(v263, v437);
          swift_bridgeObjectRelease();
          sub_100018C68(v425, type metadata accessor for BeaconEstimatedLocation);
          sub_100018C68(v426, type metadata accessor for BeaconEstimatedLocation);
          sub_100018C68(v265, type metadata accessor for BeaconEstimatedLocation);
          sub_100018C68(v267, type metadata accessor for BeaconEstimatedLocation);

          v397(v427, v217);
        }

        v296 = v430;
        v297 = v408;
        sub_10001DC4C((uint64_t)v435, v408, type metadata accessor for BeaconEstimatedLocation);
        v298 = (unint64_t)v420;
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v420);
        v300 = (void (*)(char *, char *, uint64_t))v432;
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          v298 = sub_1004C5700(0, *(void *)(v298 + 16) + 1LL, 1, v298);
        }
        v302 = *(void *)(v298 + 16);
        v301 = *(void *)(v298 + 24);
        if (v302 >= v301 >> 1) {
          v298 = sub_1004C5700(v301 > 1, v302 + 1, 1, v298);
        }
        *(void *)(v298 + 16) = v302 + 1;
        v303 = *(unsigned __int8 *)(v429 + 80);
        v420 = (char *)v298;
        sub_10002218C( v297,  v298 + ((v303 + 32) & ~v303) + *(void *)(v429 + 72) * v302,  type metadata accessor for BeaconEstimatedLocation);
        dispatch_group_enter(v421);
        v424 = *(_BYTE **)v296;
        v304 = v405;
        sub_10001DC4C((uint64_t)v296, v405, type metadata accessor for LocationFetcher);
        v305 = v403;
        sub_10001DC4C((uint64_t)v435, v403, type metadata accessor for BeaconEstimatedLocation);
        v306 = v409;
        v307 = v437;
        v300(v409, v431, v437);
        v308 = *(unsigned __int8 *)(v407 + 80);
        v309 = (v308 + 24) & ~v308;
        v310 = (v406 + v303 + v309) & ~v303;
        v311 = (v394 + v310) & v395;
        v312 = v311 + v404;
        v313 = swift_allocObject(&unk_10094AA10, v311 + v404 + 1, v396 | v303 | v308 | 7);
        v314 = v421;
        *(void *)(v313 + 16) = v421;
        sub_10002218C(v304, v313 + v309, type metadata accessor for LocationFetcher);
        sub_10002218C(v305, v313 + v310, type metadata accessor for BeaconEstimatedLocation);
        v315 = v313 + v311;
        v223 = (uint64_t (*)(void, uint64_t, uint64_t))v432;
        ((void (*)(uint64_t, char *, uint64_t))v417)(v315, v306, v307);
        *(_BYTE *)(v313 + v312) = v428;
        v316 = v314;
        v317 = (uint64_t)v435;
        sub_1004F89A0((uint64_t)v435, (uint64_t)sub_100245D40, v313);
        swift_release();
        sub_100018C68(v317, type metadata accessor for BeaconEstimatedLocation);
        v149 = v436;
        v245 = (_BYTE *)*((void *)v436 + 1);
        ((void (*)(char *, uint64_t))v245)(v431, v307);
        v243 = &v438[(void)v418];
        v241 = v419 - 1;
        v217 = v422;
        v242 = v412;
      }
    }

    else
    {
      swift_bridgeObjectRetain(v446);
      v420 = (char *)_swiftEmptyArrayStorage;
      v245 = v424;
LABEL_96:
      v424 = v245;
      (*((void (**)(char *, uint64_t, uint64_t, uint64_t))v149 + 7))(v242, 1LL, 1LL, v437);
    }

    swift_bridgeObjectRelease();
    OS_dispatch_group.wait()();
    v318 = v388;
    v319 = v410;
    v320 = v433;
    v321 = (uint64_t)v384;
    if ((v379 & 1) != 0)
    {
      v322 = v380;
      sub_10001DC4C(v382, v380, type metadata accessor for RawSearchResult);
      swift_bridgeObjectRetain(v319);
      v323 = v389 - 1;
      if (v389 != 1)
      {
        v354 = (uint64_t)&v439[v375 + v319];
        do
        {
          sub_10001DC4C(v354, v321, type metadata accessor for RawSearchResult);
          if ((static Date.< infix(_:_:)(v322 + *(int *)(v320 + 20), v321 + *(int *)(v320 + 20)) & 1) != 0)
          {
            sub_100018C68(v322, type metadata accessor for RawSearchResult);
            sub_10002218C(v321, v322, type metadata accessor for RawSearchResult);
          }

          else
          {
            sub_100018C68(v321, type metadata accessor for RawSearchResult);
          }

          v354 += (uint64_t)v439;
          --v323;
        }

        while (v323);
      }

      swift_bridgeObjectRelease();
      v324 = v381;
      sub_10002218C(v322, v381, type metadata accessor for RawSearchResult);
      v325 = v383;
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v383 + 56))(v324, 0LL, 1LL, v320);
      swift_bridgeObjectRelease();
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v325 + 48))(v324, 1LL, v320) == 1)
      {
        sub_100015794(v324, &qword_1009A6620);
      }

      else
      {
        v355 = v324;
        v356 = v378;
        sub_10002218C(v355, v378, type metadata accessor for RawSearchResult);
        sub_100235690(v423, v356);
        sub_100018C68(v356, type metadata accessor for RawSearchResult);
      }

      v357 = v390;
      v358 = v420;

      sub_100015794((uint64_t)v413, (uint64_t *)&unk_10099D720);
      sub_100018C68((uint64_t)v357, type metadata accessor for RawSearchResult);
    }

    else
    {
      swift_bridgeObjectRelease();
      v400((uint64_t)v318, v399, v217);
      sub_100013044((uint64_t)&v450, (uint64_t)&v447);
      v326 = sub_100013044((uint64_t)&v450, (uint64_t)&v442);
      v327 = (os_log_s *)Logger.logObject.getter(v326);
      v328 = static os_log_type_t.error.getter(v327);
      if (os_log_type_enabled(v327, v328))
      {
        v329 = swift_slowAlloc(45LL, -1LL);
        v330 = swift_slowAlloc(96LL, -1LL);
        v441 = *(double *)&v330;
        *(_DWORD *)v329 = 16778499;
        LOBYTE(v440) = v376;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v440, (char *)&v440 + 1, v329 + 4, v329 + 5);
        *(_WORD *)(v329 + 5) = 2082;
        v331 = 0xE500000000000000LL;
        v332 = 1701602664LL;
        v333 = 0x6579656B776168LL;
        v334 = 0x6E6169727564LL;
        if (v377 == 1) {
          v331 = 0xE600000000000000LL;
        }
        else {
          v334 = 0x656C707061LL;
        }
        if (v377 == 2) {
          v331 = 0xE700000000000000LL;
        }
        else {
          v333 = v334;
        }
        if (v377 == 3) {
          v331 = 0xE400000000000000LL;
        }
        else {
          v332 = v333;
        }
        if (v377) {
          v335 = v332;
        }
        else {
          v335 = 0x656C707061LL;
        }
        if (v377) {
          v336 = v331;
        }
        else {
          v336 = 0xE500000000000000LL;
        }
        v440 = sub_1003F11D4(v335, v336, (uint64_t *)&v441);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v440, &v441, v329 + 7, v329 + 15);
        swift_bridgeObjectRelease();
        *(_WORD *)(v329 + 15) = 2082;
        v337 = v448;
        v338 = v449;
        sub_100012ED8(&v447, v448);
        v339 = (void *)((uint64_t (*)(uint64_t, _UNKNOWN **))v338[22])(v337, v338);
        v340 = SPBeaconType.description.getter((uint64_t)v339);
        v342 = v341;

        v440 = sub_1003F11D4(v340, v342, (uint64_t *)&v441);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v440, &v441, v329 + 17, v329 + 25);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v447);
        *(_WORD *)(v329 + 25) = 2160;
        v440 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v440, &v441, v329 + 27, v329 + 35);
        *(_WORD *)(v329 + 35) = 2081;
        v344 = v444;
        v343 = v445;
        sub_100012ED8(&v442, v444);
        v345 = v409;
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v343 + 8) + 8LL) + 32LL))(v344);
        v346 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        v347 = v437;
        v348 = dispatch thunk of CustomStringConvertible.description.getter(v437, v346);
        v350 = v349;
        ((void (*)(char *, uint64_t))v424)(v345, v347);
        v440 = sub_1003F11D4(v348, v350, (uint64_t *)&v441);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v440, &v441, v329 + 37, v329 + 45);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v442);
        _os_log_impl( (void *)&_mh_execute_header,  v327,  v328,  "Status byte was %hhu, type: %{public}s, but beacon is %{public}s %{private,mask.hash}s.",  (uint8_t *)v329,  0x2Du);
        swift_arrayDestroy(v330, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v330, -1LL, -1LL);
        swift_slowDealloc(v329, -1LL, -1LL);

        (*(void (**)(char *, uint64_t))(v401 + 8))(v388, v422);
      }

      else
      {

        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v442);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v447);
        v397(v318, v217);
      }

      sub_100015794((uint64_t)v413, (uint64_t *)&unk_10099D720);
      sub_100018C68((uint64_t)v390, type metadata accessor for RawSearchResult);
      v358 = v420;
    }

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v450);
    return v358;
  }

    uint64_t v33 = (void *)*a3;
    *(void *)(*a3 + 8 * (v23 >> 6) + 64) |= 1LL << v23;
    id v34 = v33[6];
    v58 = *(void *)(v56 + 72);
    uint64_t v8 = v61;
    v62(v34 + v58 * v23, v10, v61);
    *(void *)(v33[7] + 8 * v23) = v20;
    id v35 = v33[2];
    id v36 = __OFADD__(v35, 1LL);
    int v37 = v35 + 1;
    if (v36)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }

    v33[2] = v37;
    uint64_t v38 = v16 - 1;
    if (v16 == 1) {
      return swift_bridgeObjectRelease_n(v57, 2LL);
    }
    uint64_t v39 = v57 + v60 + v54;
    while (1)
    {
      sub_10001581C(v39, (uint64_t)v15, (uint64_t *)&unk_1009AA7E0);
      v62((unint64_t)v10, v15, v8);
      char v20 = *(void **)&v15[v59];
      uint64_t v40 = (void *)*a3;
      v42 = sub_10030D124((uint64_t)v10);
      v43 = v40[2];
      uint64_t v44 = (v41 & 1) == 0;
      v45 = v43 + v44;
      if (__OFADD__(v43, v44)) {
        break;
      }
      uint64_t v8 = v41;
      if (v40[3] < v45)
      {
        sub_10004D014(v45, 1LL);
        v46 = sub_10030D124((uint64_t)v10);
        if ((v8 & 1) != (v47 & 1)) {
          goto LABEL_26;
        }
        v42 = v46;
      }

      if ((v8 & 1) != 0) {
        goto LABEL_10;
      }
      v48 = (void *)*a3;
      *(void *)(*a3 + 8 * (v42 >> 6) + 64) |= 1LL << v42;
      uint64_t v8 = v61;
      v62(v48[6] + v58 * v42, v10, v61);
      *(void *)(v48[7] + 8 * v42) = v20;
      v49 = v48[2];
      id v36 = __OFADD__(v49, 1LL);
      v50 = v49 + 1;
      if (v36) {
        goto LABEL_25;
      }
      v48[2] = v50;
      v39 += v60;
      if (!--v38) {
        return swift_bridgeObjectRelease_n(v57, 2LL);
      }
    }

    uint64_t result = sub_1003F145C(a5, a6);
    *a1 = v13;
    return result;
  }

  if ((a6 & 0x1000000000000000LL) != 0) {
    goto LABEL_13;
  }
  if ((a5 & 0x1000000000000000LL) != 0)
  {
    uint64_t v8 = (a6 & 0xFFFFFFFFFFFFFFFLL) + 32;
    goto LABEL_5;
  }

  uint64_t v8 = _StringObject.sharedUTF8.getter(a5, a6);
  if (!v8)
  {
    _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Unexpectedly found nil while unwrapping an Optional value",  57LL,  2LL,  "Swift/StringTesting.swift",  25LL,  2,  151LL,  0);
    __break(1u);
LABEL_17:
    LOBYTE(v14) = 2;
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableRawPointer.initializeMemory overlapping range",  58LL,  2LL,  "Swift/UnsafeRawPointer.swift",  28LL,  v14,  1173LL,  0);
    __break(1u);
    return result;
  }

        __break(1u);
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_13;
  }

  uint64_t v10 = sub_100016F9C(v8, v7);
  uint64_t v15 = static os_log_type_t.error.getter(v10);
  if (qword_10099B520 != -1) {
    swift_once(&qword_10099B520, sub_1004DC610);
  }
  int v16 = qword_100A2AC90;
  int v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
  *(_OWORD *)(v18 + 16) = xmmword_1007E67D0;
  v60 = (unsigned int *)v1;
  swift_errorRetain(v1);
  id v19 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  char v20 = String.init<A>(describing:)(&v60, v19);
  char v22 = v21;
  *(void *)(v18 + 56) = &type metadata for String;
  *(void *)(v18 + 64) = sub_1000226F4();
  *(void *)(v18 + 32) = v20;
  *(void *)(v18 + 40) = v22;
  os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Error deriving advertisementKey: %@", 35LL, 2LL, v18);
  swift_bridgeObjectRelease();
  id v23 = sub_100117A8C();
  char v24 = swift_allocError(&type metadata for CryptoTokenError, v23, 0LL, 0LL);
  *uint64_t v25 = 1;
  swift_willThrow(v24);
  swift_errorRelease(v1);
  uint64_t v27 = (uint64_t)v57;
  uint64_t v26 = v58;
  objc_autoreleasePoolPop(v56);
  sub_100016F9C(v27, v26);
  return v15;
}

  sub_1004AAE84(v61);
  sub_1004AAE84(v48);
  return 0LL;
}

    id v23 = (void *)*a3;
    *(void *)(*a3 + 8 * (v14 >> 6) + 64) |= 1LL << v14;
    char v24 = 8 * v14;
    *(void *)(v23[6] + v24) = v7;
    *(void *)(v23[7] + v24) = v17;
    uint64_t v25 = v23[2];
    uint64_t v26 = __OFADD__(v25, 1LL);
    uint64_t v27 = v25 + 1;
    if (v26)
    {
LABEL_25:
      __break(1u);
      goto LABEL_26;
    }

    v23[2] = v27;
    char v28 = v3 - 1;
    if (v3 == 1) {
      return swift_bridgeObjectRelease_n(a1, 2LL);
    }
    for (i = (void **)(a1 + 7); ; i += 2)
    {
      uint64_t v31 = (uint64_t)*(i - 1);
      uint64_t v30 = *i;
      v53 = v31;
      int v32 = (void *)*a3;
      uint64_t v33 = sub_10030CE48(v31);
      id v35 = v32[2];
      id v36 = (v34 & 1) == 0;
      int v37 = v35 + v36;
      if (__OFADD__(v35, v36)) {
        break;
      }
      uint64_t v38 = v33;
      uint64_t v39 = v34;
      uint64_t v40 = v32[3];
      int v17 = v30;
      if (v40 < v37)
      {
        sub_1000493A0(v37, 1LL);
        uint64_t v41 = sub_10030CE48(v31);
        if ((v39 & 1) != (v42 & 1)) {
          goto LABEL_26;
        }
        uint64_t v38 = v41;
      }

      if ((v39 & 1) != 0) {
        goto LABEL_10;
      }
      v43 = (void *)*a3;
      *(void *)(*a3 + 8 * (v38 >> 6) + 64) |= 1LL << v38;
      uint64_t v44 = 8 * v38;
      *(void *)(v43[6] + v44) = v31;
      *(void *)(v43[7] + v44) = v17;
      v45 = v43[2];
      uint64_t v26 = __OFADD__(v45, 1LL);
      v46 = v45 + 1;
      if (v26) {
        goto LABEL_25;
      }
      id v43[2] = v46;
      if (!--v28) {
        return swift_bridgeObjectRelease_n(a1, 2LL);
      }
    }

    id v21 = (void *)*a3;
    *(void *)(*a3 + 8 * (v11 >> 6) + 64) |= 1LL << v11;
    char v22 = (uint64_t *)(v21[6] + 16 * v11);
    unsigned __int8 *v22 = v7;
    v22[1] = v6;
    *(void *)(v21[7] + 8 * v11) = v8;
    id v23 = v21[2];
    char v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (v24)
    {
LABEL_24:
      __break(1u);
      goto LABEL_25;
    }

    v21[2] = v25;
    uint64_t v26 = v45 - 1;
    if (v45 == 1) {
      return swift_bridgeObjectRelease_n(a1, 2LL);
    }
    for (i = a1 + 9; ; i += 3)
    {
      char v28 = *(i - 1);
      uint64_t v30 = *i;
      v48 = *(i - 2);
      unint64_t v29 = v48;
      v49 = v28;
      uint64_t v31 = (void *)*a3;
      swift_bridgeObjectRetain(v28);
      swift_bridgeObjectRetain(v30);
      int v32 = sub_10030CF14(v48, v28);
      id v34 = v31[2];
      id v35 = (v33 & 1) == 0;
      char v24 = __OFADD__(v34, v35);
      id v36 = v34 + v35;
      if (v24) {
        break;
      }
      int v37 = v33;
      if (v31[3] < v36)
      {
        sub_10004C920(v36, 1LL);
        int v32 = sub_10030CF14(v48, v28);
        if ((v37 & 1) != (v38 & 1)) {
          goto LABEL_25;
        }
      }

      if ((v37 & 1) != 0) {
        goto LABEL_10;
      }
      uint64_t v39 = (void *)*a3;
      *(void *)(*a3 + 8 * (v32 >> 6) + 64) |= 1LL << v32;
      uint64_t v40 = (uint64_t *)(v39[6] + 16 * v32);
      *uint64_t v40 = v29;
      v40[1] = v28;
      *(void *)(v39[7] + 8 * v32) = v30;
      uint64_t v41 = v39[2];
      char v24 = __OFADD__(v41, 1LL);
      v42 = v41 + 1;
      if (v24) {
        goto LABEL_24;
      }
      v39[2] = v42;
      if (!--v26) {
        return swift_bridgeObjectRelease_n(a1, 2LL);
      }
    }

      swift_bridgeObjectRelease();
      return 0LL;
    }
  }

  if ((v16 & 1) != 0) {
    goto LABEL_25;
  }
  uint64_t v18 = 1;
LABEL_20:
  sub_10001DC4C(v13 + v14, (uint64_t)v11, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
  sub_10001DC4C(v12, (uint64_t)v4, type metadata accessor for BeaconKeyManager.KeyCriteria);
  sub_100018C68((uint64_t)v11, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
  char v28 = v4[*(int *)(v2 + 20)];
  sub_100018C68((uint64_t)v4, type metadata accessor for BeaconKeyManager.KeyCriteria);
  if (!v28)
  {
LABEL_25:
    swift_bridgeObjectRelease();
    return (v16 & 1) != 0;
  }

  if (v28 == 2)
  {
LABEL_22:
    swift_bridgeObjectRelease();
    return v18 && (v16 & 1) != 0;
  }

  swift_bridgeObjectRelease();
  return (v18 & 1) != 0;
}

    sub_100016F9C(v15, v14);
    uint64_t v26 = v25[7] + 16 * v18;
    *(void *)uint64_t v26 = v51;
    *(_BYTE *)(v26 + 8) = v12;
    goto LABEL_18;
  }

  int v17 = *(void *)(v0 + 152);
  uint64_t v18 = type metadata accessor for AccessoryMetadata(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL))(v17, 1LL, 1LL, v18);
  id v19 = *(void *)(v0 + 200);
  char v20 = *(void *)(v0 + 168);
  id v21 = *(void *)(v0 + 152);
  char v22 = *(void *)(v0 + 96);
  id v23 = *(char **)(v0 + 104);
  char v24 = *(void **)(v0 + 64);
  sub_10001DC4C(v19, (uint64_t)v23, type metadata accessor for DiscoveredObject);
  sub_10001581C(v21, (uint64_t)&v23[*(int *)(v22 + 24)], &qword_1009B9250);
  sub_10001581C(v20, (uint64_t)&v23[*(int *)(v22 + 20)], (uint64_t *)&unk_1009B9390);
  uint64_t v25 = sub_10064CEB8(v23);
  [v24 discoveredObject:v25];
  swift_release();

  sub_100018C68((uint64_t)v23, type metadata accessor for DetailedDiscoveredObject);
  sub_100015794(v21, &qword_1009B9250);
  sub_100015794(v20, (uint64_t *)&unk_1009B9390);
  sub_100018C68(v19, type metadata accessor for DiscoveredObject);
  uint64_t v26 = *(void *)(v0 + 264);
  uint64_t v27 = *(void *)(v0 + 56);
  unint64_t v29 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1009BA070 + dword_1009BA070);
  char v28 = (void *)swift_task_alloc(unk_1009BA074);
  *(void *)(v0 + 376) = v28;
  *char v28 = v0;
  v28[1] = sub_100644A98;
  return v29(v27, v26);
}

        swift_once(&qword_10099B710, sub_1006511CC);
        goto LABEL_8;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
  }

  else
  {
    char v24 = static os_log_type_t.error.getter(0LL);
    if (qword_10099B710 != -1) {
      swift_once(&qword_10099B710, sub_1006511CC);
    }
    os_log(_:dso:log:_:_:)( v24,  &_mh_execute_header,  qword_100A2B020,  "Delegate does not define a zone!",  32LL,  2LL,  _swiftEmptyArrayStorage);
  }

  swift_bridgeObjectRelease();
  a2 = v33[2];
  int v16 = v83;
  uint64_t v40 = v88;
  uint64_t v41 = v89;
  if (a2)
  {
    a3 = (void *)((char *)v33
                  + ((*(unsigned __int8 *)(v88 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v88 + 80)));
    sub_10001DC4C((uint64_t)a3, v87, type metadata accessor for KeySyncMetadata);
    swift_retain();
    v42 = (uint64_t)v79;
    if (a2 != 1)
    {
      v55 = 1LL;
      v56 = v87;
      while (v55 < v33[2])
      {
        sub_10001DC4C((uint64_t)a3 + *(void *)(v40 + 72) * v55, v42, type metadata accessor for KeySyncMetadata);
        if ((static Date.< infix(_:_:)(v56 + *(int *)(v41 + 28), v42 + *(int *)(v41 + 28)) & 1) != 0)
        {
          sub_100018C68(v56, type metadata accessor for KeySyncMetadata);
          sub_1006F6BA4(v42, v56);
        }

        else
        {
          sub_100018C68(v42, type metadata accessor for KeySyncMetadata);
        }

        if (a2 == ++v55) {
          goto LABEL_15;
        }
      }

  id v23 = *v16;
LABEL_14:
  v72 = v23;
  v74 = 0;
  uint64_t v27 = sub_1000170A4();
  char v28 = v71;
  KeyedEncodingContainer.encode<A>(_:forKey:)(&v72, &v74, v71, &type metadata for Data, v27);
  if (!v1)
  {
    unint64_t v29 = (int *)type metadata accessor for SharedBeaconRecord(0LL);
    uint64_t v30 = (char *)v16 + v29[5];
    LOBYTE(v72) = 1;
    uint64_t v31 = type metadata accessor for UUID(0LL);
    int v32 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v30, &v72, v28, v31, v32);
    uint64_t v33 = (char *)v16 + v29[6];
    LOBYTE(v72) = 2;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v33, &v72, v28, v31, v32);
    id v34 = (char *)v16 + v29[7];
    id v35 = *v34;
    int v37 = *((void *)v34 + 1);
    id v36 = *((void *)v34 + 2);
    LOBYTE(v72) = v35;
    *((void *)&v72 + 1) = v37;
    *(void *)&v73 = v36;
    v74 = 3;
    uint64_t v38 = sub_100040098();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v72, &v74, v28, &type metadata for MessagingDestination, v38);
    uint64_t v39 = (uint64_t *)((char *)v16 + v29[8]);
    uint64_t v40 = *v39;
    uint64_t v41 = v39[1];
    LOBYTE(v72) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v40, v41, &v72, v28);
    v42 = (uint64_t *)((char *)v16 + v29[9]);
    v43 = *v42;
    uint64_t v44 = v42[1];
    LOBYTE(v72) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v43, v44, &v72, v28);
    v45 = (uint64_t *)((char *)v16 + v29[10]);
    v46 = *v45;
    v47 = v45[1];
    LOBYTE(v72) = 7;
    KeyedEncodingContainer.encode(_:forKey:)(v46, v47, &v72, v28);
    v48 = *(void *)((char *)v16 + v29[11]);
    LOBYTE(v72) = 8;
    KeyedEncodingContainer.encode(_:forKey:)(v48, &v72, v28);
    v49 = *(void *)((char *)v16 + v29[12]);
    LOBYTE(v72) = 9;
    KeyedEncodingContainer.encode(_:forKey:)(v49, &v72, v28);
    v50 = *(void *)((char *)v16 + v29[15]);
    LOBYTE(v72) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v50, &v72, v28);
    v52 = *((unsigned __int8 *)v16 + v29[13]);
    LOBYTE(v72) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v52, &v72, v28);
    LOBYTE(v72) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(v50, &v72, v71);
    LOBYTE(v72) = *((_BYTE *)v70 + v29[16]);
    v74 = 12;
    v53 = sub_1000400DC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v72, &v74, v71, &type metadata for ShareType, v53);
    v54 = *(void *)((char *)v70 + v29[17]);
    LOBYTE(v72) = 13;
    KeyedEncodingContainer.encode(_:forKey:)(v54, &v72, v71);
    v55 = (char *)v70 + v29[18];
    LOBYTE(v72) = 14;
    v56 = type metadata accessor for Date(0LL);
    v57 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v55, &v72, v71, v56, v57);
    v58 = (char *)v70 + v29[19];
    LOBYTE(v72) = 15;
    v59 = sub_100004AEC(&qword_10099D8A0);
    v60 = sub_10076853C();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v58, &v72, v71, v59, v60);
    v61 = v68;
    sub_10001581C((uint64_t)v70 + v29[20], v68, &qword_1009AE600);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v65 + 48))(v61, 1LL, v67) == 1)
    {
      sub_100015794(v68, &qword_1009AE600);
      LOBYTE(v72) = 6;
      char v28 = v71;
      KeyedEncodingContainer.encode(_:forKey:)(0LL, 0xE000000000000000LL, &v72, v71);
    }

    else
    {
      v62 = v66;
      sub_10076846C(v68, v66);
      LOBYTE(v72) = 6;
      v63 = sub_100007864( &qword_1009A7EC0,  type metadata accessor for SharedBeaconRecord.PropertyListContent,  (uint64_t)&unk_10081AC6C);
      char v28 = v71;
      KeyedEncodingContainer.encode<A>(_:forKey:)(v62, &v72, v71, v67, v63);
      sub_100018C68(v62, type metadata accessor for SharedBeaconRecord.PropertyListContent);
    }
  }

  return (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(v7, v28);
}

BOOL sub_1000BACA0(BOOL result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  int v3 = result;
  if (*(_BYTE *)(a2 + 32) == result) {
    return 1LL;
  }
  if (v2 == 1) {
    return 0LL;
  }
  for (uint64_t i = 33LL; ; ++i)
  {
    uint64_t v5 = i - 31;
    if (__OFADD__(i - 32, 1LL)) {
      break;
    }
    int v6 = *(unsigned __int8 *)(a2 + i);
    uint64_t result = v6 == v3;
    if (v6 == v3 || v5 == v2) {
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1000BAD08(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnedDeviceKeyRecord(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (*(void *)(a2 + 16))
  {
    uint64_t v9 = a2 + ((*(unsigned __int8 *)(v6 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80));
    uint64_t v10 = *(void *)(v6 + 72);
    v12[8] = v5;
    v12[9] = v10;
    v12[7] = a2;
    swift_bridgeObjectRetain(a2);
    v12[6] = 0LL;
    v12[10] = a1;
    v12[11] = v8;
    sub_10001DC4C(v9, (uint64_t)v8, type metadata accessor for OwnedDeviceKeyRecord);
    __asm { BR              X10 }
  }

  return 0LL;
}

BOOL sub_1000BC69C(BOOL result, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  uint64_t v3 = qword_1007EB0E0[result];
  if (v2 == 1) {
    return 0LL;
  }
  for (uint64_t i = 33LL; ; ++i)
  {
    uint64_t v5 = i - 31;
    if (__OFADD__(i - 32, 1LL)) {
      break;
    }
    uint64_t v6 = qword_1007EB0E0[*(char *)(a2 + i)];
    uint64_t result = v6 == v3;
    if (v6 == v3 || v5 == v2) {
      return result;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1000BC710(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 16);
  if (!v2) {
    return 0LL;
  }
  uint64_t v5 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(a2 + 32));
  uint64_t v7 = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v5 == v8 && v7 == v9)
  {
LABEL_20:
    swift_bridgeObjectRelease_n(v7, 2LL);
    return 1LL;
  }

  uint64_t v11 = v9;
  char v12 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v8, v9, 0LL);
  swift_bridgeObjectRetain(a2);
  swift_bridgeObjectRelease(v7);
  uint64_t result = swift_bridgeObjectRelease(v11);
  if ((v12 & 1) != 0)
  {
LABEL_7:
    swift_bridgeObjectRelease(a2);
    return 1LL;
  }

  if (v2 == 1)
  {
LABEL_17:
    swift_bridgeObjectRelease(a2);
    return 0LL;
  }

  uint64_t v14 = 5LL;
  while (1)
  {
    uint64_t v15 = v14 - 3;
    if (__OFADD__(v14 - 4, 1LL)) {
      break;
    }
    uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(a2 + 8 * v14));
    uint64_t v7 = v17;
    uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
    if (v16 == v18 && v7 == v19)
    {
      swift_bridgeObjectRelease(a2);
      goto LABEL_20;
    }

    uint64_t v21 = v19;
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v7, v18, v19, 0LL);
    swift_bridgeObjectRelease(v7);
    uint64_t result = swift_bridgeObjectRelease(v21);
    if ((v22 & 1) != 0) {
      goto LABEL_7;
    }
    ++v14;
    if (v15 == v2) {
      goto LABEL_17;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1000BC864(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)((a2 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  swift_bridgeObjectRetain(a2);
  for (; v4; uint64_t v4 = _CocoaArrayWrapper.endIndex.getter(v18))
  {
    unint64_t v5 = a2 & 0xC000000000000001LL;
    if ((a2 & 0xC000000000000001LL) == 0)
    {
      id v6 = *(id *)(a2 + 32);
      goto LABEL_5;
    }

    while (1)
    {
      id v6 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, a2);
LABEL_5:
      uint64_t v7 = v6;
      sub_100022898(0LL, &qword_10099E2C0, &OBJC_CLASS___CKRecordZoneID_ptr);
      char v8 = static NSObject.== infix(_:_:)(v7, a1);

      if ((v8 & 1) != 0)
      {
LABEL_6:
        swift_bridgeObjectRelease();
        return 1LL;
      }

      if (v4 == 1) {
        goto LABEL_18;
      }
      if (v5) {
        break;
      }
      unint64_t v5 = 5LL;
      while (1)
      {
        unint64_t v15 = v5 - 3;
        if (__OFADD__(v5 - 4, 1LL)) {
          break;
        }
        id v16 = *(id *)(a2 + 8 * v5);
        char v17 = static NSObject.== infix(_:_:)(v16, a1);

        if ((v17 & 1) != 0) {
          goto LABEL_6;
        }
        ++v5;
        if (v15 == v4) {
          goto LABEL_18;
        }
      }

      __break(1u);
    }

    uint64_t v10 = 1LL;
    while (1)
    {
      uint64_t v11 = specialized _ArrayBuffer._getElementSlowPath(_:)(v10, a2);
      uint64_t v12 = v10 + 1;
      if (__OFADD__(v10, 1LL)) {
        break;
      }
      uint64_t v13 = v11;
      char v14 = static NSObject.== infix(_:_:)(v11, a1);
      swift_unknownObjectRelease(v13);
      if ((v14 & 1) != 0) {
        goto LABEL_6;
      }
      ++v10;
      if (v12 == v4) {
        goto LABEL_18;
      }
    }

    __break(1u);
LABEL_20:
    if (a2 < 0) {
      uint64_t v18 = a2;
    }
    else {
      uint64_t v18 = a2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(a2);
  }

LABEL_18:
  swift_bridgeObjectRelease();
  return 0LL;
}

  char v24 = *v6;
  *(void *)(*v6 + 8 * (a4 >> 6) + 56) |= 1LL << a4;
  uint64_t v25 = *(void *)(v24 + 48) + 24 * a4;
  *(_BYTE *)uint64_t v25 = v10;
  *(void *)(v25 + 8) = a2;
  *(void *)(v25 + 16) = a3;
  uint64_t v26 = *(void *)(v24 + 16);
  uint64_t v27 = __OFADD__(v26, 1LL);
  char v28 = v26 + 1;
  if (v27) {
    __break(1u);
  }
  else {
    *(void *)(v24 + 16) = v28;
  }
}

  uint64_t v38 = *v43;
  *(void *)(*v43 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = sub_10002218C( a1,  *(void *)(v38 + 48) + *(void *)(v44 + 72) * a2,  type metadata accessor for BeaconStatus);
  uint64_t v40 = *(void *)(v38 + 16);
  uint64_t v41 = __OFADD__(v40, 1LL);
  v42 = v40 + 1;
  if (v41) {
    __break(1u);
  }
  else {
    *(void *)(v38 + 16) = v42;
  }
  return result;
}

        uint64_t v30 = sub_10015C178();
        uint64_t v31 = swift_allocError(&type metadata for AirTagCommand.AirTagCommandError, v30, 0LL, 0LL);
        void *v32 = 0;
        swift_willThrow(v31);
        return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
      }

      char v28 = sub_1000F4DE0();
      id v35 = &type metadata for AccessoryGenericPayload;
      id v36 = v28;
      unint64_t v29 = sub_100004AEC(&qword_1009A12A0);
      id v23 = v38;
      char v24 = v39;
      sub_100037298((uint64_t)v37, v38);
      uint64_t v27 = (void *)sub_1000F5000();
      uint64_t v26 = &type metadata for AccessoryGenericPayload;
      uint64_t v25 = (unint64_t)v27;
    }

    else
    {
      id v35 = &type metadata for AirTagCommandAckPayload;
      id v36 = sub_10015C200();
      LOBYTE(v34[0]) = a2;
      char v22 = sub_100004AEC(&qword_1009A12A0);
      if ((swift_dynamicCast(&v40, v34, v22, &type metadata for AirTagCommandAckPayload, 6LL) & 1) == 0) {
        goto LABEL_18;
      }
      LOBYTE(v34[0]) = v40;
      id v23 = v38;
      char v24 = v39;
      sub_100037298((uint64_t)v37, v38);
      uint64_t v25 = sub_10015C288();
      uint64_t v26 = &type metadata for AirTagCommandAckPayload;
      uint64_t v27 = v34;
    }

    dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(v27, v26, v25, v23, v24);
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v37);
}

  swift_release();
LABEL_19:
  v74 = v225;
  v75 = v229;
LABEL_20:
  objc_autoreleasePoolPop(v214);
  v76 = *(uint64_t (***)(uint64_t))(v216 + 8);
  ((void (*)(uint64_t (*)(uint64_t), uint64_t))v76)(v19, v231);
  v77 = v215;
  sub_1000F0A44((uint64_t)v70, v215);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(v236 + 48))(v77, 1LL, v36) == 1)
  {
    sub_100015794(v77, (uint64_t *)&unk_1009A5990);
    v78 = *(uint64_t (**)(char *, uint64_t, uint64_t, unint64_t))(v75 + 56);
    v79 = (uint64_t)v217;
    v80 = v78(v217, 1LL, 1LL, v30);
LABEL_23:
    static Date.distantPast.getter(v80);
    v81 = sub_100015794(v79, (uint64_t *)&unk_10099D720);
    goto LABEL_25;
  }

  v79 = (uint64_t)v217;
  (*(void (**)(char *, uint64_t, unint64_t))(v75 + 16))(v217, v77 + *((int *)v36 + 5), v30);
  sub_100018C68(v77, type metadata accessor for BeaconObservation);
  v78 = *(uint64_t (**)(char *, uint64_t, uint64_t, unint64_t))(v75 + 56);
  v78((char *)v79, 0LL, 1LL, v30);
  v80 = (*(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v75 + 48))(v79, 1LL, v30);
  if ((_DWORD)v80 == 1) {
    goto LABEL_23;
  }
  v81 = (*(uint64_t (**)(char *, uint64_t, unint64_t))(v75 + 32))(v74, v79, v30);
LABEL_25:
  Date.addingTimeInterval(_:)(v81, a4);
  v82 = v227[3];
  v83 = v227[4];
  sub_100012ED8(v227, v82);
  v84 = (uint64_t)v219;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v83 + 8) + 8LL) + 32LL))(v82);
  v85 = OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocating;
  v86 = *(void *)(v221 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocating);
  if (*(void *)(v86 + 16))
  {
    swift_bridgeObjectRetain(*(void *)(v221 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_beaconUUIDsLocating));
    v87 = sub_10030D124(v84);
    v88 = v84;
    v90 = (uint64_t)v218;
    if ((v89 & 1) != 0)
    {
      (*(void (**)(char *, unint64_t, unint64_t))(v75 + 16))( v218,  *(void *)(v86 + 56) + *(void *)(v75 + 72) * v87,  v30);
      v91 = (char *)v90;
      v92 = 0LL;
    }

    else
    {
      v91 = v218;
      v92 = 1LL;
    }

    v78(v91, v92, 1LL, v30);
    swift_bridgeObjectRelease();
  }

  else
  {
    v93 = v218;
    v78(v218, 1LL, 1LL, v30);
    v88 = v84;
    v90 = (uint64_t)v93;
  }

  ((void (*)(uint64_t, uint64_t))v76)(v88, v231);
  v94 = v75;
  v95 = *(uint64_t (**)(uint64_t, uint64_t, unint64_t))(v75 + 48);
  v96 = v95(v90, 1LL, v30);
  v235 = v76;
  if ((_DWORD)v96 == 1)
  {
    static Date.distantPast.getter(v96);
    v97 = sub_100015794(v90, (uint64_t *)&unk_10099D720);
  }

  else
  {
    v97 = (*(uint64_t (**)(char *, uint64_t, unint64_t))(v94 + 32))(v226, v90, v30);
  }

  v98 = v228;
  Date.addingTimeInterval(_:)(v97, a4);
  v99 = v223;
  v100 = static Date.> infix(_:_:)(v98, v223);
  v101 = v224;
  if ((v100 & 1) != 0)
  {
    v102 = v222;
    if (qword_10099B188 != -1) {
      swift_once(&qword_10099B188, sub_100189D08);
    }
    v103 = sub_10000A720(v102, (uint64_t)qword_100A2A2B0);
    v104 = v213;
    ((void (*)(char *, uint64_t, uint64_t))v101[2])(v213, v103, v102);
    sub_100013044((uint64_t)v227, (uint64_t)&v239);
    v106 = v228;
    v105 = v229;
    v107 = *(void (**)(char *, char *, unint64_t))(v229 + 16);
    v108 = v209;
    v107(v209, v228, v30);
    v109 = v211;
    v107(v211, v106, v30);
    v110 = v212;
    v111 = ((uint64_t (*)(char *, uint64_t, unint64_t))v107)(v212, v223, v30);
    v112 = (os_log_s *)Logger.logObject.getter(v111);
    v113 = static os_log_type_t.default.getter(v112);
    LODWORD(v236) = v113;
    if (os_log_type_enabled(v112, v113))
    {
      v114 = swift_slowAlloc(42LL, -1LL);
      v115 = swift_slowAlloc(64LL, -1LL);
      v234 = v115;
      *(_DWORD *)v114 = 141558787;
      v237 = 1752392040LL;
      v238 = (void *)v115;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, &v238, v114 + 4, v114 + 12);
      *(_WORD *)(v114 + 12) = 2081;
      v232 = (char *)(v114 + 14);
      v233 = v112;
      v117 = v240;
      v116 = v241;
      sub_100012ED8(&v239, v240);
      v118 = v210;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v116 + 8) + 8LL) + 32LL))(v117);
      v119 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      v120 = v231;
      v121 = dispatch thunk of CustomStringConvertible.description.getter(v231, v119);
      v123 = v122;
      ((void (*)(char *, uint64_t))v235)(v118, v120);
      v237 = sub_1003F11D4(v121, v123, (uint64_t *)&v238);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, &v238, v232, v114 + 22);
      swift_bridgeObjectRelease();
      v124 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v239);
      *(_WORD *)(v114 + 22) = 2082;
      v125 = Date.debugDescription.getter(v124);
      v237 = sub_1003F11D4(v125, v126, (uint64_t *)&v238);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, &v238, v114 + 24, v114 + 32);
      swift_bridgeObjectRelease();
      v127 = *(void (**)(char *, unint64_t))(v105 + 8);
      v127(v108, v30);
      *(_WORD *)(v114 + 32) = 2050;
      v128 = v212;
      v129 = v211;
      v237 = Date.timeIntervalSince(_:)(v212);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, &v238, v114 + 34, v114 + 42);
      v127(v129, v30);
      v127(v128, v30);
      v130 = v233;
      _os_log_impl( (void *)&_mh_execute_header,  v233,  (os_log_type_t)v236,  "Not fetching locations for beacon %{private,mask.hash}s.\n Waiting until %{public}s, %{public}f seconds due to locating in progress.",  (uint8_t *)v114,  0x2Au);
      v131 = v234;
      swift_arrayDestroy(v234, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v131, -1LL, -1LL);
      swift_slowDealloc(v114, -1LL, -1LL);

      v224[1](v213, v222);
LABEL_44:
      v127(v228, v30);
      v127(v226, v30);
      v127(v230, v30);
      v127(v225, v30);
      return 0LL;
    }

    v162 = *(void (**)(char *, unint64_t))(v105 + 8);
    v162(v109, v30);
    v162(v110, v30);
    v162(v108, v30);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v239);
    v224[1](v104, v102);
    v162(v106, v30);
    v162(v226, v30);
    v163 = v230;
    goto LABEL_49;
  }

  v132 = sub_100007864( &qword_1009A1280,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  if ((dispatch thunk of static Comparable.< infix(_:_:)(v99, v230, v30, v132) & 1) != 0)
  {
    v133 = v222;
    if (qword_10099B188 != -1) {
      swift_once(&qword_10099B188, sub_100189D08);
    }
    v134 = sub_10000A720(v133, (uint64_t)qword_100A2A2B0);
    v135 = v208;
    ((void (*)(char *, uint64_t, uint64_t))v101[2])(v208, v134, v133);
    sub_100013044((uint64_t)v227, (uint64_t)&v239);
    v136 = v230;
    v137 = *(void (**)(char *, char *, unint64_t))(v229 + 16);
    v138 = v205;
    v137(v205, v230, v30);
    v139 = v206;
    v137(v206, v136, v30);
    v140 = v207;
    v141 = ((uint64_t (*)(char *, uint64_t, unint64_t))v137)(v207, v223, v30);
    v142 = (os_log_s *)Logger.logObject.getter(v141);
    v143 = static os_log_type_t.default.getter(v142);
    v144 = v143;
    if (os_log_type_enabled(v142, v143))
    {
      v145 = swift_slowAlloc(42LL, -1LL);
      v146 = swift_slowAlloc(64LL, -1LL);
      v236 = v146;
      *(_DWORD *)v145 = 141558787;
      v237 = 1752392040LL;
      v238 = (void *)v146;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, &v238, v145 + 4, v145 + 12);
      *(_WORD *)(v145 + 12) = 2081;
      v232 = (char *)(v145 + 14);
      LODWORD(v234) = v144;
      v148 = v240;
      v147 = v241;
      sub_100012ED8(&v239, v240);
      v149 = *(void (**)(uint64_t))(*(void *)(*(void *)(v147 + 8) + 8LL) + 32LL);
      v233 = v142;
      v150 = v210;
      v149(v148);
      v151 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      v152 = v231;
      v153 = dispatch thunk of CustomStringConvertible.description.getter(v231, v151);
      v155 = v154;
      ((void (*)(char *, uint64_t))v235)(v150, v152);
      v237 = sub_1003F11D4(v153, v155, (uint64_t *)&v238);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, &v238, v232, v145 + 22);
      swift_bridgeObjectRelease();
      v156 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v239);
      *(_WORD *)(v145 + 22) = 2082;
      v157 = Date.debugDescription.getter(v156);
      v237 = sub_1003F11D4(v157, v158, (uint64_t *)&v238);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, &v238, v145 + 24, v145 + 32);
      swift_bridgeObjectRelease();
      v127 = *(void (**)(char *, unint64_t))(v229 + 8);
      v127(v138, v30);
      *(_WORD *)(v145 + 32) = 2050;
      v159 = v207;
      v237 = Date.timeIntervalSince(_:)(v207);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, &v238, v145 + 34, v145 + 42);
      v127(v139, v30);
      v127(v159, v30);
      v160 = v233;
      _os_log_impl( (void *)&_mh_execute_header,  v233,  (os_log_type_t)v234,  "Not fetching locations for beacon %{private,mask.hash}s.\nWaiting until %{public}s, %{public}f seconds.",  (uint8_t *)v145,  0x2Au);
      v161 = v236;
      swift_arrayDestroy(v236, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v161, -1LL, -1LL);
      swift_slowDealloc(v145, -1LL, -1LL);

      v224[1](v208, v222);
      goto LABEL_44;
    }

    v162 = *(void (**)(char *, unint64_t))(v229 + 8);
    v162(v139, v30);
    v162(v140, v30);
    v162(v138, v30);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v239);
    v101[1](v135, v222);
    v162(v228, v30);
    v162(v226, v30);
    v163 = v136;
LABEL_49:
    v162(v163, v30);
    v162(v225, v30);
    return 0LL;
  }

  v164 = v227[3];
  v165 = v227[4];
  sub_100012ED8(v227, v164);
  v166 = (uint64_t)v204;
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v165 + 8) + 8LL) + 32LL))(v164);
  v167 = v229;
  v168 = v203;
  (*(void (**)(char *, uint64_t, unint64_t))(v229 + 16))(v203, v99, v30);
  v78(v168, 0LL, 1LL, v30);
  v169 = (uint64_t)v168;
  v170 = v221;
  v171 = *(void **)(v221 + v85);
  v239 = v171;
  if (v95(v169, 1LL, v30) == 1)
  {
    swift_bridgeObjectRetain(v171);
    sub_100015794(v169, (uint64_t *)&unk_10099D720);
    v172 = v202;
    sub_100048278(v166, v202);
    ((void (*)(uint64_t, uint64_t))v235)(v166, v231);
    sub_100015794(v172, (uint64_t *)&unk_10099D720);
  }

  else
  {
    v175 = (uint64_t)v201;
    (*(void (**)(char *, uint64_t, unint64_t))(v167 + 32))(v201, v169, v30);
    swift_bridgeObjectRetain(v171);
    v176 = (uint64_t)v239;
    int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v239);
    v238 = (void *)v176;
    sub_10005D0C8(v175, v166, isUniquelyReferenced_nonNull_native);
    v239 = v238;
    swift_bridgeObjectRelease();
    ((void (*)(uint64_t, uint64_t))v235)(v166, v231);
  }

  v178 = (uint64_t)v239;
  v179 = *(void *)(v170 + v85);
  *(void *)(v170 + v85) = v239;
  swift_bridgeObjectRetain(v178);
  v180 = sub_1001D4D1C(v179, v178);
  swift_bridgeObjectRelease();
  v181 = v227;
  if ((v180 & 1) == 0) {
    sub_1004E696C(0xDu);
  }
  swift_bridgeObjectRelease();
  if (qword_10099B188 != -1) {
    swift_once(&qword_10099B188, sub_100189D08);
  }
  sub_10000A720(v222, (uint64_t)qword_100A2A2B0);
  v182 = sub_100013044((uint64_t)v181, (uint64_t)&v239);
  v183 = (os_log_s *)Logger.logObject.getter(v182);
  v184 = static os_log_type_t.default.getter(v183);
  if (os_log_type_enabled(v183, v184))
  {
    v185 = swift_slowAlloc(22LL, -1LL);
    v186 = swift_slowAlloc(32LL, -1LL);
    v187 = v30;
    v236 = v186;
    *(_DWORD *)v185 = 141558275;
    v237 = 1752392040LL;
    v238 = (void *)v186;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, &v238, v185 + 4, v185 + 12);
    *(_WORD *)(v185 + 12) = 2081;
    v234 = v185 + 14;
    v189 = v240;
    v188 = v241;
    sub_100012ED8(&v239, v240);
    v190 = v210;
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v188 + 8) + 8LL) + 32LL))(v189);
    v191 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v192 = v231;
    v193 = dispatch thunk of CustomStringConvertible.description.getter(v231, v191);
    v195 = v194;
    ((void (*)(char *, uint64_t))v235)(v190, v192);
    v237 = sub_1003F11D4(v193, v195, (uint64_t *)&v238);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v237, &v238, v234, v185 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v239);
    _os_log_impl( (void *)&_mh_execute_header,  v183,  v184,  "Added ACSN locating state for beacon: %{private,mask.hash}s.",  (uint8_t *)v185,  0x16u);
    v173 = 1LL;
    v196 = v236;
    swift_arrayDestroy(v236, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v196, -1LL, -1LL);
    swift_slowDealloc(v185, -1LL, -1LL);

    v197 = *(void (**)(char *, unint64_t))(v229 + 8);
    v197(v228, v187);
    v197(v226, v187);
    v197(v230, v187);
    v197(v225, v187);
  }

  else
  {

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v239);
    v198 = *(void (**)(char *, unint64_t))(v229 + 8);
    v198(v228, v30);
    v198(v226, v30);
    v198(v230, v30);
    v198(v225, v30);
    return 1LL;
  }

  return v173;
}

                __break(1u);
                goto LABEL_19;
              }

    v115 = v102;
    v116 = v114;
    v307 = (char *)((v126 - 1) & v126);
    v308 = v125;
    v117 = __clz(__rbit64(v126)) + (v125 << 6);
LABEL_14:
    v118 = *((void *)v300 + 7);
    v119 = (uint64_t *)(*((void *)v300 + 6) + 16 * v117);
    v120 = *v119;
    v121 = v119[1];
    *v101 = *v119;
    v101[1] = v121;
    v122 = v118 + *(void *)(v299 + 72) * v117;
    v123 = sub_100004AEC(&qword_1009A2570);
    sub_10001DC4C(v122, (uint64_t)v101 + *(int *)(v123 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
    (*(void (**)(uint64_t *, void, uint64_t, uint64_t))(*(void *)(v123 - 8) + 56LL))(v101, 0LL, 1LL, v123);
    sub_10001736C(v120, v121);
    v124 = v304;
    v114 = v116;
    v102 = v115;
LABEL_21:
    sub_100015750((uint64_t)v101, (uint64_t)v124, (uint64_t *)&unk_1009A58D0);
    v129 = sub_100004AEC(&qword_1009A2570);
    if ((*(unsigned int (**)(uint64_t *, uint64_t, uint64_t))(*(void *)(v129 - 8) + 48LL))(v124, 1LL, v129) == 1)
    {
      swift_release(v300);
      return;
    }

    v130 = v124;
    v131 = *v124;
    v132 = v130[1];
    sub_10002218C((uint64_t)v130 + *(int *)(v129 + 48), v100, type metadata accessor for OwnedBeaconGroup.PairingState);
    EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v100, v303);
    if (EnumCaseMultiPayload)
    {
      if (EnumCaseMultiPayload == 1)
      {
        v134 = sub_100004AEC((uint64_t *)&unk_1009A58E0);
        v135 = v100 + *(int *)(v134 + 48);
        sub_1000182F0(*(void *)(v100 + *(int *)(v134 + 64)), *(void *)(v100 + *(int *)(v134 + 64) + 8));
        v136 = v298;
        (*(void (**)(char *, uint64_t, uint64_t))(v102 + 32))(v114, v100, v298);
        v137 = v135;
        v138 = v294;
        sub_100015750(v137, v294, (uint64_t *)&unk_1009AE480);
        v139 = v295;
        sub_1001D51E8(v138, v295);
        v140 = v301;
        v141 = v302;
        v142 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v301 + 48))(v139, 1LL, v302);
        v143 = v136;
        v144 = v102;
        if (v142 != 1)
        {
          v198 = v281;
          (*(void (**)(char *, uint64_t, uint64_t))(v140 + 32))(v281, v295, v141);
          v199 = v114;
          v200 = v144;
          sub_10001DC4C(v297, v284, type metadata accessor for OwnedBeaconGroup);
          (*(void (**)(char *, char *, uint64_t))(v144 + 16))(v285, v199, v143);
          v201 = v282;
          (*(void (**)(char *, char *, uint64_t))(v140 + 16))(v282, v198, v141);
          sub_10001736C(v131, v132);
          v202 = sub_10001736C(v131, v132);
          v203 = v140;
          v204 = (void *)Logger.logObject.getter(v202);
          v205 = static os_log_type_t.default.getter(v204);
          if (!os_log_type_enabled((os_log_t)v204, (os_log_type_t)v205))
          {

            v259 = *(void (**)(char *, uint64_t))(v203 + 8);
            v259(v201, v141);
            v260 = *(void (**)(char *, uint64_t))(v200 + 8);
            v260(v285, v143);
            sub_100016F9C(v131, v132);
            sub_100016F9C(v131, v132);
            sub_100018C68(v284, type metadata accessor for OwnedBeaconGroup);
            sub_100016F9C(v131, v132);
            v259(v198, v141);
            sub_100015794(v294, (uint64_t *)&unk_1009AE480);
            v261 = v291;
            v260(v291, v143);
            v100 = (uint64_t)v296;
            v101 = v305;
            v102 = v200;
            v114 = v261;
            goto LABEL_53;
          }

          v271 = v205;
          v272 = (os_log_t)v204;
          v206 = swift_slowAlloc(82LL, -1LL);
          v207 = swift_slowAlloc(128LL, -1LL);
          v270 = v207;
          *(_DWORD *)v206 = v267;
          v309 = 1752392040LL;
          v310 = v207;
          v208 = v289;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, v289, v206 + 4, v206 + 12);
          *(_WORD *)(v206 + 12) = 2081;
          v209 = v143;
          v210 = v284;
          v211 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          v212 = dispatch thunk of CustomStringConvertible.description.getter(v209, v211);
          v309 = sub_1003F11D4(v212, v213, &v310);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, v208, v206 + 14, v206 + 22);
          swift_bridgeObjectRelease();
          sub_100018C68(v210, type metadata accessor for OwnedBeaconGroup);
          *(_WORD *)(v206 + 22) = 2160;
          v309 = 1752392040LL;
          v214 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, v208, v206 + 24, v206 + 32);
          *(_WORD *)(v206 + 32) = 2081;
          v215 = v290;
          static String.Encoding.utf8.getter(v214);
          v216 = String.init(data:encoding:)(v131, v132, v215);
          if (!v217) {
            v216 = Data.hexString.getter(v131, v132);
          }
          v218 = v292;
          v309 = sub_1003F11D4(v216, v217, &v310);
          v219 = v289;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, v289, v206 + 34, v206 + 42);
          swift_bridgeObjectRelease();
          sub_100016F9C(v131, v132);
          sub_100016F9C(v131, v132);
          *(_WORD *)(v206 + 42) = 2160;
          v309 = 1752392040LL;
          v220 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, v219, v206 + 44, v206 + 52);
          *(_WORD *)(v206 + 52) = 2081;
          v221 = v285;
          v222 = UUID.uuidString.getter(v220);
          v309 = sub_1003F11D4(v222, v223, &v310);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, v219, v206 + 54, v206 + 62);
          swift_bridgeObjectRelease();
          v224 = *(void (**)(char *, uint64_t))(v218 + 8);
          v225 = v298;
          v224(v221, v298);
          *(_WORD *)(v206 + 62) = 2160;
          v309 = 1752392040LL;
          v226 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, v219, v206 + 64, v206 + 72);
          *(_WORD *)(v206 + 72) = 2081;
          v227 = v282;
          v228 = MACAddress.description.getter(v226);
          v309 = sub_1003F11D4(v228, v229, &v310);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, v219, v206 + 74, v206 + 82);
          swift_bridgeObjectRelease();
          v230 = v302;
          v231 = *(void (**)(char *, uint64_t))(v301 + 8);
          v231(v227, v302);
          v232 = v272;
          _os_log_impl( (void *)&_mh_execute_header,  v272,  (os_log_type_t)v271,  "  group: %{private,mask.hash}s serial: %{private,mask.hash}s: \n paired(%{private,mask.hash}s, %{private,mask.hash}s",  (uint8_t *)v206,  0x52u);
          v233 = v270;
          swift_arrayDestroy(v270, 4LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v233, -1LL, -1LL);
          swift_slowDealloc(v206, -1LL, -1LL);

          sub_100016F9C(v131, v132);
          v231(v281, v230);
          sub_100015794(v294, (uint64_t *)&unk_1009AE480);
          v114 = v291;
          v224(v291, v225);
          v100 = (uint64_t)v296;
          v101 = v305;
          goto LABEL_47;
        }

        sub_100015794(v295, (uint64_t *)&unk_1009AE480);
        v145 = v114;
        v146 = v277;
        sub_10001DC4C(v297, v277, type metadata accessor for OwnedBeaconGroup);
        v147 = v283;
        (*(void (**)(char *, char *, uint64_t))(v144 + 16))(v283, v145, v143);
        sub_10001736C(v131, v132);
        v148 = sub_10001736C(v131, v132);
        v149 = (void *)Logger.logObject.getter(v148);
        v150 = static os_log_type_t.default.getter(v149);
        if (!os_log_type_enabled((os_log_t)v149, (os_log_type_t)v150))
        {

          v258 = *(void (**)(char *, uint64_t))(v144 + 8);
          v258(v147, v143);
          sub_100016F9C(v131, v132);
          sub_100016F9C(v131, v132);
          sub_100018C68(v146, type metadata accessor for OwnedBeaconGroup);
          sub_100016F9C(v131, v132);
          sub_100015794(v294, (uint64_t *)&unk_1009AE480);
          v258(v145, v143);
          v101 = v305;
          v114 = v145;
          goto LABEL_50;
        }

        v271 = v150;
        v272 = (os_log_t)v149;
        v151 = swift_slowAlloc(62LL, -1LL);
        v152 = swift_slowAlloc(96LL, -1LL);
        v270 = v152;
        *(_DWORD *)v151 = v273;
        v309 = 1752392040LL;
        v310 = v152;
        v153 = v289;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, v289, v151 + 4, v151 + 12);
        *(_WORD *)(v151 + 12) = 2081;
        v154 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        v155 = dispatch thunk of CustomStringConvertible.description.getter(v143, v154);
        v309 = sub_1003F11D4(v155, v156, &v310);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, v153, v151 + 14, v151 + 22);
        swift_bridgeObjectRelease();
        sub_100018C68(v146, type metadata accessor for OwnedBeaconGroup);
        *(_WORD *)(v151 + 22) = 2160;
        v309 = 1752392040LL;
        v157 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, v153, v151 + 24, v151 + 32);
        *(_WORD *)(v151 + 32) = 2081;
        v158 = v290;
        static String.Encoding.utf8.getter(v157);
        v159 = String.init(data:encoding:)(v131, v132, v158);
        if (!v160) {
          v159 = Data.hexString.getter(v131, v132);
        }
        v162 = v291;
        v161 = v292;
        v163 = v283;
        v164 = v271;
        v309 = sub_1003F11D4(v159, v160, &v310);
        v165 = v289;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, v289, v151 + 34, v151 + 42);
        swift_bridgeObjectRelease();
        sub_100016F9C(v131, v132);
        sub_100016F9C(v131, v132);
        *(_WORD *)(v151 + 42) = 2160;
        v309 = 1752392040LL;
        v166 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, v165, v151 + 44, v151 + 52);
        *(_WORD *)(v151 + 52) = 2081;
        v167 = UUID.uuidString.getter(v166);
        v309 = sub_1003F11D4(v167, v168, &v310);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, v165, v151 + 54, v151 + 62);
        swift_bridgeObjectRelease();
        v169 = *(void (**)(char *, uint64_t))(v161 + 8);
        v170 = v298;
        v169(v163, v298);
        v171 = v272;
        _os_log_impl( (void *)&_mh_execute_header,  v272,  v164,  "  group: %{private,mask.hash}s serial: %{private,mask.hash}s: paired(%{private,mask.hash}s, N/A)",  (uint8_t *)v151,  0x3Eu);
        v172 = v270;
        swift_arrayDestroy(v270, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v172, -1LL, -1LL);
        swift_slowDealloc(v151, -1LL, -1LL);

        sub_100016F9C(v131, v132);
        sub_100015794(v294, (uint64_t *)&unk_1009AE480);
        v169(v162, v170);
        v114 = v162;
        v100 = (uint64_t)v296;
        v101 = v305;
        v102 = v161;
LABEL_53:
        v111 = (unint64_t)v307;
        v112 = v308;
      }

      else
      {
        sub_10001736C(v131, v132);
        v190 = sub_10001736C(v131, v132);
        v191 = (void *)Logger.logObject.getter(v190);
        v192 = static os_log_type_t.default.getter(v191);
        if (!os_log_type_enabled((os_log_t)v191, v192))
        {
          sub_100016F9C(v131, v132);

          sub_100016F9C(v131, v132);
          sub_100016F9C(v131, v132);
          v101 = v305;
          goto LABEL_11;
        }

        v193 = swift_slowAlloc(22LL, -1LL);
        v194 = swift_slowAlloc(32LL, -1LL);
        v310 = v194;
        *(_DWORD *)v193 = v274;
        *(void *)(v193 + 4) = 1752392040LL;
        *(_WORD *)(v193 + 12) = 2081;
        v195 = v290;
        static String.Encoding.utf8.getter(v194);
        v196 = String.init(data:encoding:)(v131, v132, v195);
        if (!v197) {
          v196 = Data.hexString.getter(v131, v132);
        }
        *(void *)(v193 + 14) = sub_1003F11D4(v196, v197, &v310);
        swift_bridgeObjectRelease();
        sub_100016F9C(v131, v132);
        sub_100016F9C(v131, v132);
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v191,  v192,  "  %{private,mask.hash}s: locked",  (uint8_t *)v193,  0x16u);
        swift_arrayDestroy(v194, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v194, -1LL, -1LL);
        swift_slowDealloc(v193, -1LL, -1LL);
        sub_100016F9C(v131, v132);

LABEL_38:
        v100 = (uint64_t)v296;
        v101 = v305;
LABEL_11:
        v111 = (unint64_t)v307;
        v112 = v308;
      }
    }

    else
    {
      v173 = v293;
      sub_100015750(v100, v293, (uint64_t *)&unk_1009AE480);
      v174 = v286;
      sub_1001D51E8(v173, v286);
      v175 = v301;
      v176 = v302;
      if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v301 + 48))(v174, 1LL, v302) == 1)
      {
        v144 = v102;
        sub_100015794(v174, (uint64_t *)&unk_1009AE480);
        v177 = v276;
        sub_10001DC4C(v297, v276, type metadata accessor for OwnedBeaconGroup);
        sub_10001736C(v131, v132);
        v178 = sub_10001736C(v131, v132);
        v179 = (os_log_s *)Logger.logObject.getter(v178);
        v180 = static os_log_type_t.default.getter(v179);
        if (os_log_type_enabled(v179, v180))
        {
          v181 = swift_slowAlloc(42LL, -1LL);
          v182 = swift_slowAlloc(64LL, -1LL);
          v310 = v182;
          *(_DWORD *)v181 = v269;
          *(void *)(v181 + 4) = 1752392040LL;
          *(_WORD *)(v181 + 12) = 2081;
          v183 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          v184 = dispatch thunk of CustomStringConvertible.description.getter(v298, v183);
          *(void *)(v181 + 14) = sub_1003F11D4(v184, v185, &v310);
          swift_bridgeObjectRelease();
          v186 = sub_100018C68(v177, type metadata accessor for OwnedBeaconGroup);
          *(_WORD *)(v181 + 22) = 2160;
          *(void *)(v181 + 24) = 1752392040LL;
          *(_WORD *)(v181 + 32) = 2081;
          v187 = v290;
          static String.Encoding.utf8.getter(v186);
          v188 = String.init(data:encoding:)(v131, v132, v187);
          if (!v189) {
            v188 = Data.hexString.getter(v131, v132);
          }
          v114 = v291;
          v102 = v292;
          *(void *)(v181 + 34) = sub_1003F11D4(v188, v189, &v310);
          swift_bridgeObjectRelease();
          sub_100016F9C(v131, v132);
          sub_100016F9C(v131, v132);
          _os_log_impl( (void *)&_mh_execute_header,  v179,  v180,  "  group: %{private,mask.hash}s serial: %{private,mask.hash}s: unpaired(N/A)",  (uint8_t *)v181,  0x2Au);
          swift_arrayDestroy(v182, 2LL, v268);
          swift_slowDealloc(v182, -1LL, -1LL);
          swift_slowDealloc(v181, -1LL, -1LL);

          sub_100016F9C(v131, v132);
          sub_100015794(v293, (uint64_t *)&unk_1009AE480);
          goto LABEL_38;
        }

        sub_100016F9C(v131, v132);
        sub_100018C68(v177, type metadata accessor for OwnedBeaconGroup);
        sub_100016F9C(v131, v132);
        sub_100016F9C(v131, v132);

        sub_100015794(v293, (uint64_t *)&unk_1009AE480);
        v101 = v305;
LABEL_50:
        v111 = (unint64_t)v307;
        v112 = v308;
        v102 = v144;
      }

      else
      {
        v234 = v279;
        (*(void (**)(char *, uint64_t, uint64_t))(v175 + 32))(v279, v174, v176);
        v235 = v275;
        sub_10001DC4C(v297, v275, type metadata accessor for OwnedBeaconGroup);
        v236 = v280;
        (*(void (**)(char *, char *, uint64_t))(v175 + 16))(v280, v234, v176);
        sub_10001736C(v131, v132);
        v237 = sub_10001736C(v131, v132);
        v238 = (void *)Logger.logObject.getter(v237);
        v239 = static os_log_type_t.default.getter(v238);
        if (!os_log_type_enabled((os_log_t)v238, v239))
        {

          v262 = *(void (**)(char *, uint64_t))(v175 + 8);
          v262(v236, v176);
          sub_100016F9C(v131, v132);
          sub_100016F9C(v131, v132);
          sub_100018C68(v235, type metadata accessor for OwnedBeaconGroup);
          sub_100016F9C(v131, v132);
          v262(v234, v176);
          sub_100015794(v293, (uint64_t *)&unk_1009AE480);
          v100 = (uint64_t)v296;
          v101 = v305;
          v114 = v291;
          v102 = v292;
          goto LABEL_53;
        }

        v240 = swift_slowAlloc(62LL, -1LL);
        v241 = (os_log_s *)swift_slowAlloc(96LL, -1LL);
        v272 = v241;
        *(_DWORD *)v240 = v273;
        v309 = 1752392040LL;
        v310 = (uint64_t)v241;
        v242 = v289;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, v289, v240 + 4, v240 + 12);
        *(_WORD *)(v240 + 12) = 2081;
        v243 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        v244 = dispatch thunk of CustomStringConvertible.description.getter(v298, v243);
        v309 = sub_1003F11D4(v244, v245, &v310);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, v242, v240 + 14, v240 + 22);
        swift_bridgeObjectRelease();
        sub_100018C68(v235, type metadata accessor for OwnedBeaconGroup);
        *(_WORD *)(v240 + 22) = 2160;
        v309 = 1752392040LL;
        v246 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, v242, v240 + 24, v240 + 32);
        *(_WORD *)(v240 + 32) = 2081;
        v247 = v290;
        static String.Encoding.utf8.getter(v246);
        v248 = String.init(data:encoding:)(v131, v132, v247);
        if (!v249) {
          v248 = Data.hexString.getter(v131, v132);
        }
        v100 = (uint64_t)v296;
        v309 = sub_1003F11D4(v248, v249, &v310);
        v250 = v289;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, v289, v240 + 34, v240 + 42);
        swift_bridgeObjectRelease();
        sub_100016F9C(v131, v132);
        sub_100016F9C(v131, v132);
        *(_WORD *)(v240 + 42) = 2160;
        v309 = 1752392040LL;
        v251 = UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, v250, v240 + 44, v240 + 52);
        *(_WORD *)(v240 + 52) = 2081;
        v252 = v280;
        v253 = MACAddress.description.getter(v251);
        v309 = sub_1003F11D4(v253, v254, &v310);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v309, v250, v240 + 54, v240 + 62);
        swift_bridgeObjectRelease();
        v255 = v302;
        v256 = *(void (**)(char *, uint64_t))(v301 + 8);
        v256(v252, v302);
        _os_log_impl( (void *)&_mh_execute_header,  (os_log_t)v238,  v239,  "  group: %{private,mask.hash}s serial: %{private,mask.hash}s: unpaired(%{private,mask.hash}s",  (uint8_t *)v240,  0x3Eu);
        v257 = v272;
        swift_arrayDestroy(v272, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v257, -1LL, -1LL);
        swift_slowDealloc(v240, -1LL, -1LL);

        sub_100016F9C(v131, v132);
        v256(v279, v255);
        sub_100015794(v293, (uint64_t *)&unk_1009AE480);
        v101 = v305;
        v114 = v291;
LABEL_47:
        v111 = (unint64_t)v307;
        v112 = v308;
        v102 = v292;
      }
    }
  }

  __break(1u);
}

  __break(1u);
  return result;
}

            int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v78);
            v340 = v78;
            sub_1000CA340(v89, v93, isUniquelyReferenced_nonNull_native);
            v78 = v340;
            swift_bridgeObjectRelease();
            if (v87 == 7) {
              break;
            }
          }

          int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v22);
          v123[0] = v22;
          sub_1000CA340(v49, v53, isUniquelyReferenced_nonNull_native);
          char v22 = v123[0];
          swift_bridgeObjectRelease();
          if (v47 == 7) {
            break;
          }
        }

  swift_release();
  char v22 = v78;
LABEL_19:
  v45 = (uint64_t)v89;
  uint64_t v44 = (uint64_t)v90;
  objc_autoreleasePoolPop(v88);
  sub_1000F0A44((uint64_t)v39, v45);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v93 + 48))(v45, 1LL, v33) == 1)
  {
    sub_100015794(v45, (uint64_t *)&unk_1009A5990);
    if (qword_10099B330 != -1) {
      swift_once(&qword_10099B330, sub_100374304);
    }
    v46 = type metadata accessor for Logger(0LL);
    v47 = sub_10000A720(v46, (uint64_t)qword_100A2A748);
    v48 = (os_log_s *)Logger.logObject.getter(v47);
    v49 = static os_log_type_t.error.getter(v48);
    if (os_log_type_enabled(v48, v49))
    {
      v50 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v50 = 0;
      _os_log_impl((void *)&_mh_execute_header, v48, v49, "No playback observation found. Cannot retry", v50, 2u);
      swift_slowDealloc(v50, -1LL, -1LL);
    }
  }

  else
  {
    v86 = v5;
    sub_10002218C(v45, (uint64_t)v22, type metadata accessor for BeaconObservation);
    v51 = v82;
    static Date.trustedNow.getter(v82);
    v52 = Date.timeIntervalSince(_:)(&v22[*(int *)(v33 + 20)]);
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v51, v84);
    if (qword_10099B330 != -1) {
      swift_once(&qword_10099B330, sub_100374304);
    }
    v53 = type metadata accessor for Logger(0LL);
    v54 = sub_10000A720(v53, (uint64_t)qword_100A2A748);
    v55 = sub_10001DC4C((uint64_t)v22, v44, type metadata accessor for BeaconObservation);
    v56 = (os_log_s *)Logger.logObject.getter(v55);
    v57 = static os_log_type_t.default.getter(v56);
    if (os_log_type_enabled(v56, v57))
    {
      v58 = swift_slowAlloc(22LL, -1LL);
      v92 = swift_slowAlloc(32LL, -1LL);
      v96[0] = v92;
      *(_DWORD *)v58 = 136446466;
      v59 = Date.localISO8601.getter();
      v61 = sub_1003F11D4(v59, v60, v96);
      v93 = v54;
      v94 = v61;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v58 + 4, v58 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68(v44, type metadata accessor for BeaconObservation);
      *(_WORD *)(v58 + 12) = 2050;
      v94 = *(void *)&v52;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v58 + 14, v58 + 22);
      _os_log_impl( (void *)&_mh_execute_header,  v56,  v57,  "Queued at %{public}s. Time since: %{public}f",  (uint8_t *)v58,  0x16u);
      v62 = v92;
      swift_arrayDestroy(v92, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v62, -1LL, -1LL);
      swift_slowDealloc(v58, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(v44, type metadata accessor for BeaconObservation);
    }

    v64 = (uint64_t (*)(uint64_t))v86;
    v63 = v87;
    v65 = v85;
    if (v52 >= 180.0)
    {
      v68 = (*(uint64_t (**)(char *, unint64_t, uint64_t (*)(uint64_t)))(v87 + 16))( v85,  a2,  v8);
      v69 = (os_log_s *)Logger.logObject.getter(v68);
      v70 = static os_log_type_t.error.getter(v69);
      if (os_log_type_enabled(v69, v70))
      {
        v71 = swift_slowAlloc(22LL, -1LL);
        v93 = swift_slowAlloc(32LL, -1LL);
        v96[0] = v93;
        *(_DWORD *)v71 = 134218242;
        v94 = 0x4066800000000000LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v71 + 4, v71 + 12);
        *(_WORD *)(v71 + 12) = 2080;
        v72 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        v73 = dispatch thunk of CustomStringConvertible.description.getter(v8, v72);
        v94 = sub_1003F11D4(v73, v74, v96);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v94, &v95, v71 + 14, v71 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t (*)(uint64_t)))(v87 + 8))(v65, v8);
        _os_log_impl( (void *)&_mh_execute_header,  v69,  v70,  "%f elapsed. Posting error alert for %s",  (uint8_t *)v71,  0x16u);
        v75 = v93;
        swift_arrayDestroy(v93, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v75, -1LL, -1LL);
        swift_slowDealloc(v71, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(char *, uint64_t (*)(uint64_t)))(v63 + 8))(v65, v8);
      }

      sub_1003857F0(a2, 0);
      sub_100381A9C(a2, 0, 0LL);
    }

    else
    {
      v66 = type metadata accessor for Transaction(0LL);
      __chkstk_darwin(v66);
      *(&v76 - 6) = v64;
      *(&v76 - 5) = (uint64_t (*)(uint64_t))a2;
      *((double *)&v76 - 4) = a4;
      v67 = v81;
      *(&v76 - 3) = v80;
      *(&v76 - 2) = v67;
      static Transaction.named<A>(_:with:)( "SoundPlaybackManager.queuePlaySoundSingle",  41LL,  2LL,  sub_10039AEE4,  &v76 - 8);
    }

    sub_100018C68((uint64_t)v22, type metadata accessor for BeaconObservation);
  }

    sub_100015794(v23, &qword_1009AC230);
    v78 = *(void *)(v0 + 312);
    v80 = *(void *)(v0 + 296);
    v79 = *(void *)(v0 + 304);
    v82 = *(void *)(v0 + 280);
    v81 = *(void *)(v0 + 288);
    v83 = *(void *)(v0 + 264);
    v84 = *(void *)(v0 + 272);
    v85 = *(void *)(v0 + 256);
    v86 = *(void *)(v0 + 232);
    v118 = *(void *)(v0 + 224);
    v120 = *(void *)(v0 + 216);
    v122 = *(void *)(v0 + 200);
    v125 = *(void *)(v0 + 192);
    v128 = *(void *)(v0 + 184);
    logd = *(os_log_t *)(v0 + 176);
    v135 = *(void *)(v0 + 168);
    swift_task_dealloc(*(void *)(v0 + 320));
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    swift_task_dealloc(v83);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v118);
    swift_task_dealloc(v120);
    swift_task_dealloc(v122);
    swift_task_dealloc(v125);
    swift_task_dealloc(v128);
    swift_task_dealloc(logd);
    swift_task_dealloc(v135);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  v49 = *(void *)(v0 + 272);
  v50 = *(void *)(v0 + 280);
  v51 = *(void *)(v0 + 216);
  v52 = *(void *)(v0 + 200);
  v53 = *(void *)(v0 + 160);
  sub_10002218C(v5, v50, type metadata accessor for BeaconKeyManager.IndexInformation);
  sub_10001DC4C(v53, v51, type metadata accessor for DiscoveredObject);
  sub_10001DC4C(v50, v49, type metadata accessor for BeaconKeyManager.IndexInformation);
  sub_1003FDF68(v51, v49, 2, v52);
  if (qword_10099B400 != -1) {
    swift_once(&qword_10099B400, sub_1003F889C);
  }
  v54 = *(void *)(v0 + 280);
  v55 = *(void *)(v0 + 264);
  logc = *(os_log_t *)(v0 + 256);
  v57 = *(void *)(v0 + 192);
  v56 = *(void *)(v0 + 200);
  v59 = *(void *)(v0 + 176);
  v58 = *(void *)(v0 + 184);
  v60 = *(void *)(v0 + 168);
  v61 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 352) = sub_10000A720(v61, (uint64_t)qword_100A2A928);
  sub_10001DC4C(v56, v57, type metadata accessor for ObservedAdvertisement);
  sub_10001DC4C(v56, v58, type metadata accessor for ObservedAdvertisement);
  sub_10001DC4C(v56, v59, type metadata accessor for ObservedAdvertisement);
  sub_10001DC4C(v56, v60, type metadata accessor for ObservedAdvertisement);
  sub_10001DC4C(v54, v55, type metadata accessor for BeaconKeyManager.IndexInformation);
  v62 = sub_10001DC4C(v54, (uint64_t)logc, type metadata accessor for BeaconKeyManager.IndexInformation);
  v63 = (os_log_s *)Logger.logObject.getter(v62);
  v64 = static os_log_type_t.info.getter(v63);
  if (os_log_type_enabled(v63, v64))
  {
    v127 = v64;
    log = v63;
    v65 = *(void *)(v0 + 184);
    v66 = *(void *)(v0 + 192);
    v116 = v0 + 96;
    v117 = v0 + 104;
    v119 = v0 + 112;
    v121 = v0 + 120;
    v114 = *(void *)(v0 + 176);
    v67 = swift_slowAlloc(82LL, -1LL);
    v124 = swift_slowAlloc(192LL, -1LL);
    v136 = v124;
    *(_DWORD *)v67 = 141559811;
    *(void *)(v0 + 64) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v67 + 4, v67 + 12);
    *(_WORD *)(v67 + 12) = 2081;
    v68 = *(void *)(v66 + 16);
    v69 = *(void *)(v66 + 24);
    sub_10008699C(v68, v69);
    v70 = sub_1000AFD00(v68, v69);
    v72 = v71;
    sub_1000869A4(v68, v69);
    *(void *)(v0 + 72) = sub_1003F11D4(v70, v72, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v67 + 14, v67 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68(v66, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v67 + 22) = 2082;
    v73 = sub_100041014(*(_BYTE *)(v65 + 32) & 0xB);
    v74 = sub_1000409B4(v73 & 0x10101FF);
    *(void *)(v0 + 80) = sub_1003F11D4(v74, v75, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v67 + 24, v67 + 32);
    swift_bridgeObjectRelease();
    sub_100018C68(v65, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v67 + 32) = 2082;
    if ((*(_BYTE *)(v114 + 35) & 1) != 0)
    {
      v76 = 0xE400000000000000LL;
      v77 = 1701736302LL;
    }

    else
    {
      *(_BYTE *)(v0 + 376) = *(_BYTE *)(*(void *)(v0 + 176) + 34LL);
      v93 = sub_100041584();
      v94 = FixedWidthInteger.data.getter(&type metadata for UInt8, v93);
      v96 = v95;
      v77 = Data.hexString.getter(v94, v95);
      v76 = v97;
      sub_100016F9C(v94, v96);
    }

    v98 = *(void *)(v0 + 264);
    v115 = *(void *)(v0 + 256);
    v99 = *(void *)(v0 + 240);
    v101 = *(void *)(v0 + 168);
    v100 = *(void *)(v0 + 176);
    *(void *)(v0 + 88) = sub_1003F11D4(v77, v76, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v116, v67 + 34, v67 + 42);
    swift_bridgeObjectRelease();
    sub_100018C68(v100, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v67 + 42) = 2082;
    v102 = sub_100040BA4(*(unsigned __int8 *)(v101 + 32));
    *(void *)(v0 + 96) = sub_1003F11D4(v102, v103, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v116, v117, v67 + 44, v67 + 52);
    swift_bridgeObjectRelease();
    sub_100018C68(v101, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v67 + 52) = 2080;
    v104 = (void *)(v98 + *(int *)(v99 + 20));
    v106 = v104[3];
    v105 = v104[4];
    sub_100012ED8(v104, v106);
    v107 = dispatch thunk of CustomStringConvertible.description.getter(v106, *(void *)(v105 + 16));
    *(void *)(v0 + 104) = sub_1003F11D4(v107, v108, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v117, v119, v67 + 54, v67 + 62);
    swift_bridgeObjectRelease();
    sub_100018C68(v98, type metadata accessor for BeaconKeyManager.IndexInformation);
    *(_WORD *)(v67 + 62) = 2160;
    *(void *)(v0 + 112) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v119, v121, v67 + 64, v67 + 72);
    *(_WORD *)(v67 + 72) = 2081;
    v109 = type metadata accessor for UUID(0LL);
    v110 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v111 = dispatch thunk of CustomStringConvertible.description.getter(v109, v110);
    *(void *)(v0 + 120) = sub_1003F11D4(v111, v112, &v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v121, v0 + 128, v67 + 74, v67 + 82);
    swift_bridgeObjectRelease();
    sub_100018C68(v115, type metadata accessor for BeaconKeyManager.IndexInformation);
    _os_log_impl( (void *)&_mh_execute_header,  log,  v127,  "Leech Reconciled advertisement %{private,mask.hash}s, multiPart: %{public}s, hint: %{public}s, Type18: %{public} s,\n index: %s, beacon: %{private,mask.hash}s.",  (uint8_t *)v67,  0x52u);
    swift_arrayDestroy(v124, 6LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v124, -1LL, -1LL);
    swift_slowDealloc(v67, -1LL, -1LL);
  }

  else
  {
    v88 = *(void *)(v0 + 256);
    v89 = *(void *)(v0 + 264);
    v90 = *(void *)(v0 + 184);
    v92 = *(void *)(v0 + 168);
    v91 = *(void *)(v0 + 176);
    sub_100018C68(*(void *)(v0 + 192), type metadata accessor for ObservedAdvertisement);
    sub_100018C68(v90, type metadata accessor for ObservedAdvertisement);
    sub_100018C68(v91, type metadata accessor for ObservedAdvertisement);
    sub_100018C68(v92, type metadata accessor for ObservedAdvertisement);
    sub_100018C68(v89, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_100018C68(v88, type metadata accessor for BeaconKeyManager.IndexInformation);
  }

  v113 = (void *)swift_task_alloc(dword_1009AD15C);
  *(void *)(v0 + 360) = v113;
  *v113 = v0;
  v113[1] = sub_1003FC6AC;
  return sub_1003FE25C(*(void *)(v0 + 200));
}

      sub_10002218C((uint64_t)v8, v58, type metadata accessor for BeaconObservation);
      if ((swift_isUniquelyReferenced_nonNull_native(v38) & 1) == 0) {
        sub_100032AA8(0, v38[2] + 1LL, 1);
      }
      uint64_t v38 = (void *)v63[0];
      uint64_t v44 = *(void *)(v63[0] + 16LL);
      v43 = *(void *)(v63[0] + 24LL);
      if (v44 >= v43 >> 1)
      {
        sub_100032AA8(v43 > 1, v44 + 1, 1);
        uint64_t v38 = (void *)v63[0];
      }

      v38[2] = v44 + 1;
      sub_10002218C(v58, (uint64_t)v38 + v40 + v44 * v41, type metadata accessor for BeaconObservation);
      uint64_t v11 = v55;
      uint64_t v39 = v57;
LABEL_15:
      if (++v16 == v56)
      {
        int v37 = (void *)v63[0];
        char v28 = v52;
        goto LABEL_30;
      }
    }

    __break(1u);
LABEL_40:
    swift_once(&qword_10099B300, sub_1003459EC);
  }

  swift_bridgeObjectRelease();
  uint64_t v33 = *(void *)(v2 + 16);
  if (!v33) {
    return swift_release();
  }
  id v34 = *(unsigned __int8 *)(v83 + 80);
  id v35 = v2 + ((v34 + 32) & ~v34);
  v69 = *(void *)(v26 + 64);
  v68 = *(char **)(v83 + 72);
  v67 = *(void (**)(char *, char *, uint64_t))(v10 + 16);
  v66 = (v34 + 16) & ~v34;
  v65 += v66;
  v64 = v34 | 7;
  v63 += 7LL;
  v62 = v2;
  swift_retain();
  id v36 = v80;
  int v37 = v79;
  do
  {
    v83 = v33;
    uint64_t v38 = v73;
    uint64_t v39 = v67;
    v67(v36, (char *)(v35 + *(int *)(v71 + 20)), v73);
    uint64_t v40 = v70;
    sub_10001DC4C(v35, v70, type metadata accessor for SafeLocation);
    uint64_t v41 = swift_allocObject(&unk_10095DD30, v65, v64);
    sub_10002218C(v40, v41 + v66, type metadata accessor for SafeLocation);
    v42 = v72;
    v39(v72, v36, v38);
    v43 = *(unsigned __int8 *)(v37 + 80);
    uint64_t v44 = (v43 + 16) & ~v43;
    v45 = (v63 + v44) & 0xFFFFFFFFFFFFFFF8LL;
    v46 = (v45 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    v47 = swift_allocObject(&unk_10095DD58, v46 + 16, v43 | 7);
    (*(void (**)(uint64_t, char *, uint64_t))(v37 + 32))(v47 + v44, v42, v38);
    *(void *)(v47 + v45) = v82;
    id v36 = v80;
    v48 = (void (**)(void *, char))(v47 + v46);
    *v48 = sub_10049DE68;
    v48[1] = (void (*)(void *, char))v41;
    aBlock[4] = (uint64_t)sub_10049D24C;
    void aBlock[5] = v47;
    aBlock[0] = (uint64_t)_NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = (uint64_t)sub_1001C31E8;
    void aBlock[3] = (uint64_t)&unk_10095DD70;
    v49 = _Block_copy(aBlock);
    swift_retain();
    v50 = swift_retain();
    static DispatchQoS.unspecified.getter(v50);
    v84 = _swiftEmptyArrayStorage;
    v51 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v52 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    v53 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    v54 = v76;
    v55 = v78;
    v56 = v51;
    v57 = v81;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v84, v52, v53, v78, v56);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v57, v54, v49);
    _Block_release(v49);
    (*(void (**)(char *, uint64_t))(v77 + 8))(v54, v55);
    (*((void (**)(char *, uint64_t))v74 + 1))(v57, v75);
    swift_release();
    swift_release();
    v58 = v38;
    v59 = v83;
    (*(void (**)(char *, uint64_t))(v37 + 8))(v36, v58);
    v35 += (uint64_t)v68;
    uint64_t v33 = v59 - 1;
  }

  while (v33);
  return swift_release_n(v62, 2LL);
}

    sub_10001DC4C((uint64_t)&v19[*(int *)(v16 + 24)], v40, type metadata accessor for StableIdentifier);
    v47 = (char *)&loc_1004E9194 + dword_1004E97CC[swift_getEnumCaseMultiPayload(v40, v75)];
    __asm { BR              X9 }
  }

  swift_bridgeObjectRelease();
  v0[24] = &_swiftEmptySetSingleton;
  v123 = _swiftEmptyArrayStorage[2];
  if (v123)
  {
    char v22 = (int *)v0[53];
    uint64_t v21 = v0[54];
    v117 = v0[32];
    v121 = (char *)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v21 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v21 + 80));
    v120 = *(void *)(v21 + 72);
    swift_retain();
    id v23 = 0LL;
    v111 = 0LL;
    v112 = 0LL;
    char v24 = 0LL;
    v113 = 0LL;
    v114 = 0LL;
    v115 = 0LL;
    v118 = v22;
    while (1)
    {
      uint64_t v26 = v0[52];
      uint64_t v27 = v0[36];
      char v28 = (uint64_t)&v121[v23 * v120];
      v129 = v28 + v22[6];
      sub_10001DC4C(v129, v26, type metadata accessor for StableIdentifier);
      unint64_t v29 = swift_getEnumCaseMultiPayload(v26, v27);
      if (v29 == 3)
      {
        v125 = v23;
        sub_100004AEC((uint64_t *)&unk_1009AF840);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        if (v29 != 2)
        {
          id v34 = v0[51];
          id v35 = v0[50];
          id v36 = v0[36];
          int v37 = type metadata accessor for StableIdentifier;
          sub_100018C68(v0[52], type metadata accessor for StableIdentifier);
          uint64_t v38 = v129;
          sub_10001DC4C(v129, v34, type metadata accessor for StableIdentifier);
          LODWORD(v36) = swift_getEnumCaseMultiPayload(v34, v36);
          sub_100018C68(v34, type metadata accessor for StableIdentifier);
          sub_10001DC4C(v129, v35, type metadata accessor for StableIdentifier);
          if ((_DWORD)v36 != 1)
          {
            uint64_t v39 = v0[49];
            uint64_t v40 = v0[36];
            sub_10001DC4C(v0[50], v39, type metadata accessor for StableIdentifier);
            uint64_t v41 = swift_getEnumCaseMultiPayload(v39, v40);
            if (v41 == 2)
            {
              sub_100004AEC((uint64_t *)&unk_1009B0520);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            else
            {
              if (v41 != 3)
              {
                v80 = v0[50];
                sub_100018C68(v0[49], type metadata accessor for StableIdentifier);
LABEL_60:
                sub_100018C68(v80, v37);
                char v22 = v118;
LABEL_61:
                uint64_t v25 = __OFADD__(v114++, 1LL);
                if (v25) {
                  goto LABEL_96;
                }
                goto LABEL_22;
              }

              sub_100004AEC((uint64_t *)&unk_1009AF840);
              swift_bridgeObjectRelease();
              swift_bridgeObjectRelease();
            }

            v75 = v0[49];
            v76 = v0[31];
            swift_bridgeObjectRelease();
            (*(void (**)(uint64_t, uint64_t))(v117 + 8))(v75, v76);
            uint64_t v38 = v129;
          }

          v77 = v0[58];
          v78 = v0[48];
          v79 = v0[36];
          sub_100018C68(v0[50], type metadata accessor for StableIdentifier);
          sub_10001DC4C(v38, v78, type metadata accessor for StableIdentifier);
          LODWORD(v79) = swift_getEnumCaseMultiPayload(v78, v79);
          sub_100018C68(v78, type metadata accessor for StableIdentifier);
          int v37 = type metadata accessor for OwnedBeaconRecord;
          sub_10001DC4C(v28, v77, type metadata accessor for OwnedBeaconRecord);
          v80 = v0[58];
          if ((_DWORD)v79 != 1) {
            goto LABEL_60;
          }
          char v22 = v118;
          v81 = (void *)(v80 + v118[15]);
          v82 = v81[1];
          if (*v81 == 0x3830332E302E32LL && v82 == 0xE700000000000000LL)
          {
            sub_100018C68(v0[58], type metadata accessor for OwnedBeaconRecord);
          }

          else
          {
            v83 = _stringCompareWithSmolCheck(_:_:expecting:)(*v81, v82, 0x3830332E302E32LL, 0xE700000000000000LL, 0LL);
            sub_100018C68(v80, type metadata accessor for OwnedBeaconRecord);
            if ((v83 & 1) == 0) {
              goto LABEL_61;
            }
          }

          uint64_t v25 = __OFADD__(v112++, 1LL);
          if (v25) {
            goto LABEL_100;
          }
          goto LABEL_22;
        }

        v125 = v23;
        sub_100004AEC((uint64_t *)&unk_1009B0520);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      uint64_t v30 = v0[52];
      uint64_t v31 = v0[31];
      swift_bridgeObjectRelease();
      v127 = *(void (**)(uint64_t, uint64_t))(v117 + 8);
      v127(v30, v31);
      if (*(void *)(v28 + v22[16]) == 76LL)
      {
        uint64_t v33 = v0[30];
        int v32 = v0[31];
        v116 = (uint64_t)&v121[v23 * v120];
        sub_10001581C(v28 + v22[7], v33, &qword_10099D8A0);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v117 + 48))(v33, 1LL, v32) == 1)
        {
          sub_100015794(v0[30], &qword_10099D8A0);
        }

        else
        {
          (*(void (**)(void, void, void))(v117 + 32))(v0[35], v0[30], v0[31]);
          v50 = v0[24];
          if (*(void *)(v50 + 16))
          {
            v110 = v24;
            v51 = v0[31];
            v52 = *(void *)(v50 + 40);
            v53 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            swift_bridgeObjectRetain(v50);
            v54 = dispatch thunk of Hashable._rawHashValue(seed:)(v52, v51, v53);
            v55 = -1LL << *(_BYTE *)(v50 + 32);
            v56 = v54 & ~v55;
            if (((*(void *)(v50 + 56 + ((v56 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v56) & 1) != 0)
            {
              v57 = ~v55;
              v58 = *(void *)(v117 + 72);
              v59 = *(void (**)(uint64_t, unint64_t, uint64_t))(v117 + 16);
              while (1)
              {
                v61 = v0[34];
                v60 = v0[35];
                v62 = v0[31];
                v59(v61, *(void *)(v50 + 48) + v56 * v58, v62);
                v63 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
                LOBYTE(v60) = dispatch thunk of static Equatable.== infix(_:_:)(v61, v60, v62, v63);
                v127(v61, v62);
                if ((v60 & 1) != 0) {
                  break;
                }
                v56 = (v56 + 1) & v57;
                if (((*(void *)(v50 + 56 + ((v56 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v56) & 1) == 0) {
                  goto LABEL_43;
                }
              }

              v102 = v0[35];
              v103 = v0[31];
              swift_bridgeObjectRelease();
              v127(v102, v103);
              char v24 = v110;
              char v22 = v118;
              id v23 = v125;
              goto LABEL_22;
            }

    uint64_t v12 = (v17 - 1) & v17;
  }

  uint64_t v18 = v16 + 3;
  if (v18 >= v27) {
    return (uint64_t)v5;
  }
  char v17 = *(void *)(v26 + 8 * v18);
  if (v17)
  {
    id v6 = v18;
    goto LABEL_18;
  }

  while (1)
  {
    id v6 = v18 + 1;
    if (__OFADD__(v18, 1LL)) {
      break;
    }
    if (v6 >= v27) {
      return (uint64_t)v5;
    }
    char v17 = *(void *)(v26 + 8 * v6);
    ++v18;
    if (v17) {
      goto LABEL_18;
    }
  }

      sub_100018C68((uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
LABEL_19:
      v17 += v16;
      if (!--v14) {
        return v61;
      }
    }

    sub_1000182F0(v30, v31);
LABEL_10:
    uint64_t v33 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t))(*(void *)(v33 - 8) + 8LL))(v7, v33);
    goto LABEL_18;
  }

  return result;
}

  swift_beginAccess(&v143, &v141, 1LL, 0LL);
  if (!v144)
  {
    if (qword_10099B178 != -1) {
      swift_once(&qword_10099B178, sub_100189C64);
    }
    v53 = type metadata accessor for Logger(0LL);
    v54 = sub_10000A720(v53, (uint64_t)qword_100A2A290);
    v55 = (os_log_s *)Logger.logObject.getter(v54);
    v56 = static os_log_type_t.default.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      v57 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)v57 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v55,  v56,  "liveLocations: no handle found in cache. Checking fmf directly",  v57,  2u);
      swift_slowDealloc(v57, -1LL, -1LL);
    }

    if (qword_10099B5E8 != -1) {
      swift_once(&qword_10099B5E8, sub_1005C66A4);
    }
    v58 = qword_100A2AE20;
    swift_retain();
    v59 = sub_100004AEC(&qword_1009B3718);
    OS_dispatch_queue.sync<A>(execute:)(sub_1005964CC, v58, v59);
    swift_release();
    v60 = v139;
    v61 = v139[2];
    if (v61)
    {
      v63 = v139[4];
      v62 = v139[5];
      v64 = v139[7];
      v65 = (void *)v139[8];
      if (v64 == a1 && v65 == v136 || (_stringCompareWithSmolCheck(_:_:expecting:)(v64, v65, a1, v136, 0LL) & 1) != 0)
      {
LABEL_37:
        swift_bridgeObjectRetain(v62);
        swift_bridgeObjectRelease();
        v143 = v63;
        v144 = v62;
      }

      else
      {
        v66 = 0LL;
        v67 = (void **)(v60 + 13);
        v68 = v61 - 1;
        while (v68 != v66)
        {
          if ((unint64_t)++v66 >= v60[2])
          {
            __break(1u);
            goto LABEL_62;
          }

          v63 = (uint64_t)*(v67 - 4);
          v62 = (uint64_t)*(v67 - 3);
          v69 = (uint64_t)*(v67 - 1);
          v70 = *v67;
          if (v69 != a1 || v70 != v136)
          {
            v67 += 5;
            if ((_stringCompareWithSmolCheck(_:_:expecting:)(v69, v70, a1, v136, 0LL) & 1) == 0) {
              continue;
            }
          }

          goto LABEL_37;
        }
      }
    }

    swift_bridgeObjectRelease();
  }

  if (qword_10099B178 != -1) {
    swift_once(&qword_10099B178, sub_100189C64);
  }
  v72 = type metadata accessor for Logger(0LL);
  v73 = sub_10000A720(v72, (uint64_t)qword_100A2A290);
  v74 = v143;
  v75 = v144;
  swift_bridgeObjectRetain_n(v144, 2LL);
  swift_bridgeObjectRetain_n(v136, 2LL);
  v77 = (os_log_s *)Logger.logObject.getter(v76);
  v78 = static os_log_type_t.default.getter(v77);
  if (os_log_type_enabled(v77, v78))
  {
    v79 = swift_slowAlloc(42LL, -1LL);
    v124 = v73;
    v80 = v79;
    v81 = (void *)swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)v80 = 141558787;
    v138 = 1752392040LL;
    v139 = v81;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v80 + 4, v80 + 12);
    *(_WORD *)(v80 + 12) = 2081;
    if (v75) {
      v82 = v74;
    }
    else {
      v82 = 7104878LL;
    }
    v83 = a1;
    if (v75) {
      v84 = v75;
    }
    else {
      v84 = 0xE300000000000000LL;
    }
    swift_bridgeObjectRetain(v75);
    v138 = sub_1003F11D4(v82, v84, (uint64_t *)&v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v80 + 14, v80 + 22);
    swift_bridgeObjectRelease_n(v75, 2LL);
    a1 = v83;
    swift_bridgeObjectRelease();
    *(_WORD *)(v80 + 22) = 2160;
    v138 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v80 + 24, v80 + 32);
    *(_WORD *)(v80 + 32) = 2081;
    v85 = (unint64_t)v136;
    swift_bridgeObjectRetain(v136);
    v138 = sub_1003F11D4(v83, v85, (uint64_t *)&v139);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v80 + 34, v80 + 42);
    swift_bridgeObjectRelease_n(v85, 3LL);
    _os_log_impl( (void *)&_mh_execute_header,  v77,  v78,  "liveLocations: Handle identifier %{private,mask.hash}s for findMyId %{private,mask.hash}s",  (uint8_t *)v80,  0x2Au);
    swift_arrayDestroy(v81, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v81, -1LL, -1LL);
    swift_slowDealloc(v80, -1LL, -1LL);

    v86 = v144;
    if (!v144) {
      goto LABEL_55;
    }
  }

  else
  {

    swift_bridgeObjectRelease_n(v136, 2LL);
    swift_bridgeObjectRelease_n(v75, 2LL);
    v86 = v144;
    if (!v144)
    {
LABEL_55:
      if (qword_10099B850 != -1) {
LABEL_62:
      }
        swift_once(&qword_10099B850, sub_1006BAC84);
      v139 = 0LL;
      v140 = 0xE000000000000000LL;
      swift_retain();
      _StringGuts.grow(_:)(46LL);
      swift_bridgeObjectRelease();
      v139 = (void *)0xD00000000000002CLL;
      v140 = 0x8000000100868F90LL;
      v114._countAndFlagsBits = a1;
      v115 = v136;
      v114._object = v136;
      String.append(_:)(v114);
      sub_1006BB764((uint64_t)v139, v140);
      swift_release();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRetain_n(v115, 2LL);
      v117 = (os_log_s *)Logger.logObject.getter(v116);
      v118 = static os_log_type_t.error.getter(v117);
      if (os_log_type_enabled(v117, v118))
      {
        v119 = swift_slowAlloc(22LL, -1LL);
        v120 = (void *)swift_slowAlloc(32LL, -1LL);
        *(_DWORD *)v119 = 141558275;
        v138 = 1752392040LL;
        v139 = v120;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v119 + 4, v119 + 12);
        *(_WORD *)(v119 + 12) = 2081;
        v121 = (unint64_t)v136;
        swift_bridgeObjectRetain(v136);
        v138 = sub_1003F11D4(a1, v121, (uint64_t *)&v139);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v138, &v139, v119 + 14, v119 + 22);
        swift_bridgeObjectRelease_n(v121, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v117,  v118,  "liveLocations: Unable to create a MessagingDestination for findMyId %{private,mask.hash}s",  (uint8_t *)v119,  0x16u);
        swift_arrayDestroy(v120, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v120, -1LL, -1LL);
        swift_slowDealloc(v119, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v136, 2LL);
      }

      return swift_bridgeObjectRelease();
    }
  }

  v87 = v143;
  swift_bridgeObjectRetain_n(v86, 2LL);
  _s12searchpartyd20MessagingDestinationV6stringACSgSS_tcfC_0(v87, v86);
  if (!v90)
  {
    swift_bridgeObjectRelease();
    goto LABEL_55;
  }

  v91 = v90;
  v123 = (uint8_t *)v87;
  v124 = a1;
  v92 = (uint64_t)v134;
  v93 = v135;
  v94 = *(void *)(v135 + 40);
  *v134 = v88;
  *(void *)(v92 + 8) = v89;
  *(void *)(v92 + 16) = v90;
  uint64_t result = swift_storeEnumTagMultiPayload(v92, v133, 1LL);
  if (*(void *)(v94 + 352))
  {
    swift_retain();
    swift_bridgeObjectRetain(v91);
    swift_retain();
    v96 = (void *)dispatch thunk of AsynchronousCache.value(for:)(v92);
    swift_release();
    v139 = v96;
    v97 = sub_100004AEC(&qword_1009A48F8);
    v98 = sub_1000372EC( &qword_1009A4900,  &qword_1009A48F8,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    v99 = (void *)Publisher.eraseToAnyPublisher()(v97, v98);
    swift_release();
    sub_100018C68(v92, type metadata accessor for BeaconSharingSessionContext);
    swift_release();
    swift_bridgeObjectRelease();
    v139 = v99;
    v100 = sub_100004AEC(&qword_1009A4908);
    v101 = v125;
    Publisher.map<A>(_:)(sub_1001A49BC, 0LL, v97, v100, v98);
    swift_release();
    v102 = sub_100004AEC(&qword_1009A4910);
    v103 = sub_1000372EC( &qword_1009A4918,  &qword_1009A48E8,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    v104 = sub_1000372EC(&qword_1009A4920, &qword_1009A4910, (uint64_t)&protocol conformance descriptor for Just<A>);
    v105 = v128;
    v106 = v127;
    Publisher.catch<A>(_:)(sub_1001A57F4, 0LL, v127, v102, v103, v104);
    (*(void (**)(char *, uint64_t))(v126 + 8))(v101, v106);
    v107 = (void *)swift_allocObject(&unk_100964F00, 72LL, 7LL);
    v107[2] = v123;
    v107[3] = v86;
    v108 = v136;
    v107[4] = v124;
    v107[5] = v108;
    v109 = v131;
    v110 = v132;
    v107[6] = v93;
    v107[7] = v109;
    v107[8] = v110;
    v111 = sub_1000372EC( &qword_1009A4928,  &qword_1009A48F0,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
    swift_bridgeObjectRetain(v108);
    swift_retain();
    swift_retain();
    v112 = v130;
    v113 = Publisher<>.sink(receiveValue:)(sub_1005964B8, v107, v130, v111);
    swift_release();
    (*(void (**)(char *, uint64_t))(v129 + 8))(v105, v112);
    *(void *)(v93 + 104) = v113;
    swift_release();
    return swift_bridgeObjectRelease();
  }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  __break(1u);
}

    id v6 = v47;
    char v24 = (uint64_t)v51;
    int v37 = sub_1004E55A0(v51[*(int *)(v47 + 24)], v26);
    swift_bridgeObjectRelease();
    if (v37)
    {
      sub_1003493E8(v24, v50);
      uint64_t v38 = v57;
      if ((swift_isUniquelyReferenced_nonNull_native(v57) & 1) == 0)
      {
        sub_100032AA8(0, v38[2] + 1LL, 1);
        uint64_t v38 = v57;
      }

      uint64_t v40 = v38[2];
      uint64_t v39 = v38[3];
      if (v40 >= v39 >> 1)
      {
        sub_100032AA8(v39 > 1, v40 + 1, 1);
        uint64_t v38 = v57;
      }

      v38[2] = v40 + 1;
      sub_1003493E8(v50, (uint64_t)v38 + v54 + v40 * v53);
    }

    else
    {
      sub_100303000(v24);
    }

    char v22 = v48;
    id v23 = v55;
    if (v55 != v49) {
      continue;
    }
    break;
  }

  uint64_t v18 = v57;
  uint64_t v12 = v46;
  unint64_t v5 = v45;
  uint64_t v13 = v44;
LABEL_26:
  swift_release(v22);
LABEL_27:
  objc_autoreleasePoolPop(v13);
  sub_1000F0A44((uint64_t)v18, (uint64_t)v5);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v52 + 48))(v5, 1LL, v6) == 1)
  {
    sub_10074C700((uint64_t)v5);
    return SPTagSeparationStateNone;
  }

  else
  {
    sub_1003493E8((uint64_t)v5, (uint64_t)v12);
    switch(v12[*(int *)(v6 + 24)])
    {
      case 15:
        v42 = (id *)&SPTagSeparationStateConnected;
        break;
      case 16:
        v42 = (id *)&SPTagSeparationStateLeashConnected;
        break;
      case 17:
        v42 = (id *)&SPTagSeparationStateLeashInterrupted;
        break;
      case 18:
        v42 = (id *)&SPTagSeparationStateLeashDropped;
        break;
      case 19:
        v42 = (id *)&SPTagSeparationStateLeashFailed;
        break;
      default:
        v42 = (id *)&SPTagSeparationStateNone;
        break;
    }

    v43 = *v42;
    sub_100303000((uint64_t)v12);
    return v43;
  }

    v56 = (v21 - 1) & v21;
    v57 = v22;
  }

  id v23 = v12 + 4;
  if (v12 + 4 >= v51) {
    return (uint64_t)v11;
  }
  uint64_t v21 = *(void *)(v50 + 8 * v23);
  if (v21)
  {
    char v22 = v12 + 4;
    goto LABEL_18;
  }

  while (1)
  {
    char v22 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v22 >= v51) {
      return (uint64_t)v11;
    }
    uint64_t v21 = *(void *)(v50 + 8 * v22);
    ++v23;
    if (v21) {
      goto LABEL_18;
    }
  }

uint64_t sub_1000BC9E8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BCA10(a1, a2, a3, a4, "trying to enableFinderMode", 26LL, 1);
}

uint64_t sub_1000BC9FC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_1000BCA10(a1, a2, a3, a4, "trying to disableFinderMode", 27LL, 0);
}

uint64_t sub_1000BCA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, const char *a5, uint64_t a6, char a7)
{
  uint64_t v12 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v13 = (void *)static OS_os_log.default.getter(v12);
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  os_log(_:dso:log:type:_:)(a5, a6, 2LL, &_mh_execute_header, v13, v14, _swiftEmptyArrayStorage);

  return sub_1000B9774(a7, 2, 2, a1, a2);
}

uint64_t sub_1000BCAC8(void (*a1)(id, void), uint64_t a2)
{
  return sub_1000BA700(a1, a2);
}

uint64_t sub_1000BCAE8(char a1, uint64_t a2, uint64_t a3)
{
  int v5 = a1 & 1;
  uint64_t v6 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v7 = (void *)static OS_os_log.default.getter(v6);
  uint64_t v8 = static os_log_type_t.default.getter(v7);
  os_log(_:dso:log:type:_:)( "trying to set(activeCache:completion:)",  38LL,  2LL,  &_mh_execute_header,  v7,  v8,  _swiftEmptyArrayStorage);

  return sub_1000B9774(2, 2, v5, a2, a3);
}

uint64_t sub_1000BCB94(uint64_t a1, uint64_t a2)
{
  return sub_1000D4394(a2);
}

uint64_t sub_1000BCB9C(void (*a1)(void *__return_ptr))
{
  uint64_t v1 = type metadata accessor for JSONEncoder(0LL);
  swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  JSONEncoder.init()();
  unint64_t v2 = sub_1000D4D94();
  uint64_t v3 = dispatch thunk of JSONEncoder.encode<A>(_:)(v17, &type metadata for FinderStatePermissions, v2);
  unint64_t v5 = v4;
  uint64_t v6 = (void *)objc_opt_self(&OBJC_CLASS___NSJSONSerialization);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  v16[0] = 0LL;
  id v8 = [v6 JSONObjectWithData:isa options:4 error:v16];

  id v9 = v16[0];
  if (!v8)
  {
    uint64_t v12 = v9;
    uint64_t v13 = _convertNSErrorToError(_:)(v9);

    swift_willThrow(v14);
    swift_errorRelease(v13);
    goto LABEL_5;
  }

  _bridgeAnyObjectToAny(_:)(v18, v8);
  swift_unknownObjectRelease(v8);
  uint64_t v10 = sub_100004AEC(&qword_1009A0CE8);
  if ((swift_dynamicCast(v16, v18, (char *)&type metadata for Any + 8, v10, 6LL) & 1) == 0)
  {
LABEL_5:
    swift_release();
    sub_100016F9C(v3, v5);
    swift_release();
    return 0LL;
  }

  uint64_t v11 = sub_10028B660((uint64_t)v16[0]);
  swift_release();
  sub_100016F9C(v3, v5);
  swift_bridgeObjectRelease();
  swift_release();
  return v11;
}

id sub_1000BCD7C(char a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v9.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
  Class isa = 0LL;
  if (v12(a4, 1LL, v10) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a4, v10);
  }

  if (v12(a5, 1LL, v10) == 1)
  {
    Class v14 = 0LL;
  }

  else
  {
    Class v14 = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a5, v10);
  }

  type metadata accessor for SPFinderDisabledReason(0LL);
  sub_100007864( &qword_10099C3C0,  (uint64_t (*)(uint64_t))type metadata accessor for SPFinderDisabledReason,  (uint64_t)&unk_1007E3C94);
  Class v15 = Set._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v16 = [v20 initWithState:a1 & 1 optInScreenOffScan:a2 & 1 lastUpdated:v9.super.isa lastPublishDate:isa lastScheduledPublishActivityDate:v14 activeCache:a6 disabledReasons:v15];

  (*(void (**)(uint64_t, uint64_t))(v11 + 8))(a3, v10);
  return v16;
}

void sub_1000BCF04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

uint64_t sub_1000BCF64( int a1, int a2, int a3, int a4, int a5, int a6, int a7, int a8, uint64_t a9, __int16 a10, char __s2, char a12, char a13, char a14, char a15, char a16, char a17, char a18, char a19, char a20, char a21, char a22, char a23, char a24, uint64_t a25, uint64_t a26, uint64_t a27, uint64_t a28, uint64_t a29, uint64_t a30, uint64_t a31, uint64_t a32, uint64_t a33, uint64_t a34, uint64_t a35, uint64_t a36, uint64_t a37)
{
  uint64_t v42 = v39;
  __int16 v43 = v40;
  char v44 = BYTE2(v40);
  char v45 = BYTE3(v40);
  char v46 = BYTE4(v40);
  char v47 = BYTE5(v40);
  if (!v38)
  {
    __break(1u);
    JUMPOUT(0x1000BD148LL);
  }

  uint64_t result = memcmp(v38, &v42, BYTE6(v40));
  *int v37 = (_DWORD)result == 0;
  return result;
}

uint64_t sub_1000BD16C(_BYTE *a1, uint64_t a2)
{
  return sub_1000C09C4(a1, a2, &qword_1009A0C48, (uint64_t)&type metadata for BatteryChargeState);
}

uint64_t sub_1000BD180(_BYTE *a1, Swift::Int a2)
{
  uint64_t v4 = *v2;
  Hasher.init(_seed:)(v11, *(void *)(*v2 + 40));
  swift_bridgeObjectRetain(v4);
  sub_100309F1C((uint64_t)v11, a2);
  unint64_t v5 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(v4 + 32));
  if (((*(void *)(v4 + 56 + ((v5 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v5) & 1) != 0) {
    __asm { BR              X9 }
  }

  swift_bridgeObjectRelease(v4);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
  v11[0] = *v9;
  *NSDate v9 = 0x8000000000000000LL;
  sub_1000C8B40(a2, v5, isUniquelyReferenced_nonNull_native);
  uint64_t v7 = *v9;
  *NSDate v9 = v11[0];
  swift_bridgeObjectRelease(v7);
  uint64_t result = 1LL;
  *a1 = a2;
  return result;
}

uint64_t sub_1000BD5BC(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v23, *(void *)(*v3 + 40LL));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v23, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    uint64_t v13 = v12[1];
    BOOL v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0LL) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      Class v15 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0LL;
    }

    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        break;
      }
      uint64_t v19 = (void *)(v11 + 16 * v10);
      uint64_t v20 = v19[1];
      BOOL v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0LL) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v23[0] = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(a3);
  sub_1000C8FCC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v23[0];
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t sub_1000BD768(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40LL);
  uint64_t v13 = sub_100007864(&qword_1009A58F0, v12, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v10);
  id v34 = a2;
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  uint64_t v15 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v16 = v14 & ~v15;
  uint64_t v17 = v10;
  uint64_t v18 = v10 + 56;
  if (((*(void *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
  {
    uint64_t v30 = v3;
    uint64_t v31 = a1;
    uint64_t v32 = ~v15;
    uint64_t v33 = v7;
    uint64_t v19 = *(void *)(v7 + 72);
    uint64_t v20 = *(void (**)(void, void, void))(v7 + 16);
    while (1)
    {
      uint64_t v21 = v17;
      char v22 = v20;
      v20(v9, *(void *)(v17 + 48) + v19 * v16, v6);
      uint64_t v23 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v34, v6, v23);
      uint64_t v25 = *(void (**)(char *, uint64_t))(v33 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0) {
        break;
      }
      unint64_t v16 = (v16 + 1) & v32;
      uint64_t v17 = v21;
      uint64_t v20 = v22;
      if (((*(void *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v30;
        a1 = v31;
        uint64_t v26 = v33;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease();
    v25(v34, v6);
    v22(v31, *(void *)(*v30 + 48LL) + v19 * v16, v6);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v26 = v7;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    char v28 = v34;
    v20(v9, v34, v6);
    uint64_t v35 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_1000C9164((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1LL;
  }

uint64_t sub_1000BD9C4(_BYTE *a1, uint64_t a2)
{
  return sub_1000C09C4( a1,  a2,  (uint64_t *)&unk_1009A0A90,  (uint64_t)&type metadata for BeaconStore.BeaconsChangedNotificationReason);
}

uint64_t sub_1000BD9D8(void *a1, void *a2)
{
  return sub_1000BFD90( a1,  a2,  &qword_1009A0BA8,  (uint64_t (*)(void))type metadata accessor for SPDisabledReason);
}

uint64_t sub_1000BD9EC(_BYTE *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:bytes:count:)(*(void *)(v6 + 40), a2, 1LL);
  uint64_t v8 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_1000C93B8(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v10 = *(void *)(v6 + 48);
  if (*(unsigned __int8 *)(v10 + v9) != a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (*(unsigned __int8 *)(v10 + v9) != a2);
  }

  uint64_t result = 0LL;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1000BDAEC(Swift::Int *a1, void *a2)
{
  return sub_1000C1AB8(a1, a2, &qword_10099DF88, &OBJC_CLASS___FAFamilyMember_ptr, &qword_1009A0BF0);
}

uint64_t sub_1000BDB08(uint64_t a1, unsigned __int8 a2, uint64_t a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  Hasher.init(_seed:)(v24, *(void *)(*v4 + 40LL));
  Hasher._combine(_:)(a2);
  swift_bridgeObjectRetain(v9);
  swift_bridgeObjectRetain(a4);
  String.hash(into:)(v24, a3, a4);
  swift_bridgeObjectRelease();
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1LL << *(_BYTE *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0)
  {
    uint64_t v13 = ~v11;
    uint64_t v14 = *(void *)(v9 + 48);
    while (1)
    {
      uint64_t v15 = (unsigned __int8 *)(v14 + 24 * v12);
      if (*v15 == a2)
      {
        uint64_t v16 = *((void *)v15 + 1);
        uint64_t v17 = *((void *)v15 + 2);
        BOOL v18 = v16 == a3 && v17 == a4;
        if (v18 || (_stringCompareWithSmolCheck(_:_:expecting:)(v16, v17, a3, a4, 0LL) & 1) != 0) {
          break;
        }
      }

      unint64_t v12 = (v12 + 1) & v13;
      if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
        goto LABEL_11;
      }
    }

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void *)(*v4 + 48LL) + 24 * v12;
    uint64_t v21 = *(void *)(v19 + 8);
    uint64_t v20 = *(void *)(v19 + 16);
    *(_BYTE *)a1 = *(_BYTE *)v19;
    *(void *)(a1 + 8) = v21;
    *(void *)(a1 + 16) = v20;
    swift_bridgeObjectRetain(v20);
    return 0LL;
  }

  else
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v24[0] = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    swift_bridgeObjectRetain(a4);
    sub_1000C94E4(a2, a3, a4, v12, isUniquelyReferenced_nonNull_native);
    *uint64_t v4 = v24[0];
    swift_bridgeObjectRelease();
    *(_BYTE *)a1 = a2;
    uint64_t result = 1LL;
    *(void *)(a1 + 8) = a3;
    *(void *)(a1 + 16) = a4;
  }

  return result;
}

uint64_t sub_1000BDCDC(uint64_t *a1, uint64_t a2)
{
  return sub_1000C0884(a1, a2, &qword_1009A0AC0, (uint64_t)&type metadata for Int64);
}

uint64_t sub_1000BDCF0(uint64_t *a1, uint64_t a2)
{
  return sub_1000C0884(a1, a2, &qword_1009A0A80, (uint64_t)&type metadata for Int);
}

uint64_t sub_1000BDD04(Swift::Int *a1, void *a2)
{
  return sub_1000C1AB8(a1, a2, &qword_1009A0A28, &OBJC_CLASS___SPLocationProvider_ptr, (uint64_t *)&unk_1009A0A30);
}

uint64_t sub_1000BDD20(_BYTE *a1, Swift::Int a2)
{
  uint64_t v4 = *v2;
  Hasher.init(_seed:)(v13, *(void *)(*v2 + 40));
  uint64_t v5 = sub_100794CB8(a2);
  uint64_t v7 = v6;
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v13, v5, v7);
  swift_bridgeObjectRelease();
  unint64_t v8 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(v4 + 32));
  if (((*(void *)(v4 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0) {
    __asm { BR              X9 }
  }

  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v11);
  v13[0] = *v11;
  *uint64_t v11 = 0x8000000000000000LL;
  sub_1000C9BAC(a2, v8, isUniquelyReferenced_nonNull_native);
  *uint64_t v11 = v13[0];
  swift_bridgeObjectRelease();
  uint64_t result = 1LL;
  *a1 = a2;
  return result;
}

uint64_t sub_1000BE414(Swift::Int *a1, void *a2)
{
  return sub_1000C1AB8(a1, a2, &qword_1009A0B60, &OBJC_CLASS___SPSafeLocation_ptr, &qword_1009A0B68);
}

uint64_t sub_1000BE430(Swift::Int *a1, void *a2)
{
  return sub_1000C1AB8(a1, a2, &qword_1009A0B70, &OBJC_CLASS___SPBeaconShare_ptr, &qword_1009A0B78);
}

uint64_t sub_1000BE44C(_BYTE *a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v14, *(void *)(*v2 + 40LL));
  Swift::UInt v6 = qword_1007EB0E0[(char)a2];
  Hasher._combine(_:)(v6);
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v5 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v14[0] = *v2;
    *unint64_t v2 = 0x8000000000000000LL;
    sub_1000CA340(a2, v9, isUniquelyReferenced_nonNull_native);
    *unint64_t v2 = v14[0];
    swift_bridgeObjectRelease();
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v10 = *(void *)(v5 + 48);
  if (qword_1007EB0E0[*(char *)(v10 + v9)] != v6)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v5 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (qword_1007EB0E0[*(char *)(v10 + v9)] != v6);
  }

  uint64_t result = 0LL;
  LOBYTE(a2) = *(_BYTE *)(*(void *)(*v2 + 48LL) + v9);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1000BE588(void *a1, void *a2)
{
  return sub_1000BFD90( a1,  a2,  &qword_1009A0AC8,  (uint64_t (*)(void))type metadata accessor for URLResourceKey);
}

uint64_t sub_1000BE59C(_BYTE *a1, uint64_t a2)
{
  return sub_1000C09C4(a1, a2, (uint64_t *)&unk_1009BEF50, (uint64_t)&type metadata for MessagingCapability);
}

uint64_t sub_1000BE5B0(_OWORD *a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v76, *(void *)(*v2 + 40LL));
  swift_bridgeObjectRetain(v5);
  sub_1005EDAB4((uint64_t)v76);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  uint64_t v66 = v5 + 56;
  v56 = v2;
  v57 = a1;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
  {
    uint64_t v63 = ~v7;
    uint64_t v64 = *(void *)(v5 + 48);
    uint64_t v74 = *(void *)(a2 + 8);
    uint64_t v75 = *(void *)a2;
    while (1)
    {
      uint64_t v9 = v64 + 160 * v8;
      uint64_t v10 = *(void *)(v9 + 8);
      uint64_t v12 = *(void *)(v9 + 16);
      uint64_t v11 = *(void *)(v9 + 24);
      uint64_t v13 = *(void *)(v9 + 32);
      uint64_t v14 = *(void *)(v9 + 40);
      uint64_t v15 = *(void *)(v9 + 48);
      uint64_t v16 = *(void *)(v9 + 56);
      uint64_t v17 = *(void *)(v9 + 64);
      uint64_t v18 = *(void *)(v9 + 72);
      uint64_t v72 = *(void *)(v9 + 88);
      uint64_t v73 = *(void *)(v9 + 80);
      uint64_t v70 = *(void *)(v9 + 104);
      uint64_t v71 = *(void *)(v9 + 96);
      uint64_t v68 = *(void *)(v9 + 120);
      uint64_t v69 = *(void *)(v9 + 112);
      int v67 = *(unsigned __int8 *)(v9 + 128);
      int v65 = *(unsigned __int8 *)(v9 + 129);
      int v61 = *(unsigned __int8 *)(v9 + 131);
      int v62 = *(unsigned __int8 *)(v9 + 130);
      int v60 = *(unsigned __int8 *)(v9 + 136);
      BOOL v19 = *(void *)v9 == v75 && v10 == v74;
      uint64_t v58 = *(void *)(v9 + 152);
      uint64_t v59 = *(void *)(v9 + 144);
      if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v9, v10, v75, v74, 0LL) & 1) != 0)
      {
        if ((uint64_t v20 = *(void *)(a2 + 16), v21 = *(void *)(a2 + 24), v12 == v20) && v11 == v21
          || (_stringCompareWithSmolCheck(_:_:expecting:)(v12, v11, v20, v21, 0LL) & 1) != 0)
        {
          if ((uint64_t v22 = *(void *)(a2 + 32), v23 = *(void *)(a2 + 40), v13 == v22) && v14 == v23
            || (_stringCompareWithSmolCheck(_:_:expecting:)(v13, v14, v22, v23, 0LL) & 1) != 0)
          {
            if ((uint64_t v24 = *(void *)(a2 + 48), v25 = *(void *)(a2 + 56), v15 == v24) && v16 == v25
              || (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v24, v25, 0LL) & 1) != 0)
            {
              if ((uint64_t v26 = *(void *)(a2 + 64), v27 = *(void *)(a2 + 72), v17 == v26) && v18 == v27
                || (_stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v26, v27, 0LL) & 1) != 0)
              {
                if ((uint64_t v28 = *(void *)(a2 + 80), v29 = *(void *)(a2 + 88), v73 == v28) && v72 == v29
                  || (_stringCompareWithSmolCheck(_:_:expecting:)(v73, v72, v28, v29, 0LL) & 1) != 0)
                {
                  if ((v30 = *(void *)(a2 + 96), uint64_t v31 = *(void *)(a2 + 104), v71 == v30) && v70 == v31
                    || (_stringCompareWithSmolCheck(_:_:expecting:)(v71, v70, v30, v31, 0LL) & 1) != 0)
                  {
                    if ((v32 = *(void *)(a2 + 112), uint64_t v33 = *(void *)(a2 + 120), v69 == v32) && v68 == v33
                      || (_stringCompareWithSmolCheck(_:_:expecting:)(v69, v68, v32, v33, 0LL) & 1) != 0)
                    {
                      if (((v67 ^ *(unsigned __int8 *)(a2 + 128)) & 1) == 0
                        && ((v65 ^ *(unsigned __int8 *)(a2 + 129)) & 1) == 0
                        && ((v62 ^ *(unsigned __int8 *)(a2 + 130)) & 1) == 0
                        && ((v61 ^ *(unsigned __int8 *)(a2 + 131)) & 1) == 0
                        && v60 == *(unsigned __int8 *)(a2 + 136))
                      {
                        uint64_t v34 = *(void *)(a2 + 144);
                        uint64_t v35 = *(void *)(a2 + 152);
                        if (v59 == v34 && v58 == v35) {
                          break;
                        }
                        if ((_stringCompareWithSmolCheck(_:_:expecting:)(v59, v58, v34, v35, 0LL) & 1) != 0) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      unint64_t v8 = (v8 + 1) & v63;
      if (((*(void *)(v66 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_39;
      }
    }

    swift_bridgeObjectRelease();
    sub_1000D4E80((void *)a2);
    id v36 = (_OWORD *)(*(void *)(*v56 + 48LL) + 160 * v8);
    __int128 v37 = v36[2];
    __int128 v38 = v36[3];
    __int128 v39 = v36[5];
    v76[4] = v36[4];
    v76[5] = v39;
    v76[3] = v38;
    __int128 v40 = v36[9];
    __int128 v42 = v36[6];
    __int128 v41 = v36[7];
    v76[8] = v36[8];
    v76[9] = v40;
    v76[6] = v42;
    v76[7] = v41;
    __int128 v43 = v36[1];
    v76[0] = *v36;
    v76[1] = v43;
    v76[2] = v37;
    __int128 v44 = v36[7];
    v57[6] = v36[6];
    v57[7] = v44;
    __int128 v45 = v36[9];
    v57[8] = v36[8];
    v57[9] = v45;
    __int128 v46 = v36[3];
    v57[2] = v36[2];
    v57[3] = v46;
    __int128 v47 = v36[5];
    v57[4] = v36[4];
    v57[5] = v47;
    __int128 v48 = v36[1];
    _OWORD *v57 = *v36;
    v57[1] = v48;
    sub_1000D4DD8(v76);
    return 0LL;
  }

  else
  {
LABEL_39:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v56);
    *(void *)&v76[0] = *v56;
    void *v56 = 0x8000000000000000LL;
    sub_1000D4DD8((void *)a2);
    sub_1000CA614(a2, v8, isUniquelyReferenced_nonNull_native);
    void *v56 = *(void *)&v76[0];
    swift_bridgeObjectRelease();
    __int128 v51 = *(_OWORD *)(a2 + 112);
    v57[6] = *(_OWORD *)(a2 + 96);
    v57[7] = v51;
    __int128 v52 = *(_OWORD *)(a2 + 144);
    v57[8] = *(_OWORD *)(a2 + 128);
    v57[9] = v52;
    __int128 v53 = *(_OWORD *)(a2 + 48);
    v57[2] = *(_OWORD *)(a2 + 32);
    v57[3] = v53;
    __int128 v54 = *(_OWORD *)(a2 + 80);
    v57[4] = *(_OWORD *)(a2 + 64);
    v57[5] = v54;
    __int128 v55 = *(_OWORD *)(a2 + 16);
    uint64_t result = 1LL;
    _OWORD *v57 = *(_OWORD *)a2;
    v57[1] = v55;
  }

  return result;
}

uint64_t sub_1000BE9E4(uint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v23, *(void *)(*v3 + 40LL));
  swift_bridgeObjectRetain(v7);
  String.hash(into:)(v23, a2, a3);
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v7 + 48);
    uint64_t v12 = (void *)(v11 + 16 * v10);
    uint64_t v13 = v12[1];
    BOOL v14 = *v12 == a2 && v13 == a3;
    if (v14 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v12, v13, a2, a3, 0LL) & 1) != 0)
    {
LABEL_7:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v15 = (uint64_t *)(*(void *)(*v3 + 48LL) + 16 * v10);
      uint64_t v16 = v15[1];
      *a1 = *v15;
      a1[1] = v16;
      swift_bridgeObjectRetain(v16);
      return 0LL;
    }

    uint64_t v18 = ~v9;
    while (1)
    {
      unint64_t v10 = (v10 + 1) & v18;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        break;
      }
      BOOL v19 = (void *)(v11 + 16 * v10);
      uint64_t v20 = v19[1];
      BOOL v21 = *v19 == a2 && v20 == a3;
      if (v21 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v19, v20, a2, a3, 0LL) & 1) != 0) {
        goto LABEL_7;
      }
    }
  }

  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  v23[0] = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(a3);
  sub_1000CA9FC(a2, a3, v10, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v23[0];
  swift_bridgeObjectRelease();
  *a1 = a2;
  a1[1] = a3;
  return 1LL;
}

uint64_t sub_1000BEB90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v10 = (char *)v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)v23 - v11;
  uint64_t v13 = *v3;
  Hasher.init(_seed:)(&__s1, *(void *)(*v3 + 40LL));
  uint64_t v24 = a2;
  uint64_t v25 = v6;
  uint64_t v14 = a2 + *(int *)(v6 + 24);
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v13);
  v23[5] = v14;
  dispatch thunk of Hashable.hash(into:)(&__s1, v15, v16);
  Swift::Int v17 = Hasher._finalize()();
  uint64_t v18 = -1LL << *(_BYTE *)(v13 + 32);
  unint64_t v19 = v17 & ~v18;
  uint64_t v28 = v13 + 56;
  if (((*(void *)(v13 + 56 + ((v19 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v19) & 1) != 0)
  {
    v23[1] = v12;
    v23[2] = v3;
    v23[3] = a1;
    uint64_t v26 = ~v18;
    uint64_t v27 = *(void *)(v7 + 72);
    v23[6] = v13;
    sub_10001DC4C(*(void *)(v13 + 48) + v27 * v19, (uint64_t)v10, type metadata accessor for OwnedBeaconGroup);
    __asm { BR              X10 }
  }

  swift_bridgeObjectRelease();
  uint64_t v20 = v24;
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  sub_10001DC4C(v20, (uint64_t)v12, type metadata accessor for OwnedBeaconGroup);
  uint64_t __s1 = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  sub_1000CAB94((uint64_t)v12, v19, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = __s1;
  swift_bridgeObjectRelease();
  sub_10002218C(v20, a1, type metadata accessor for OwnedBeaconGroup);
  return 1LL;
}

uint64_t sub_1000BF764(uint64_t *a1, uint64_t a2)
{
  return sub_1000C0E14(a1, a2, &qword_1009A0C08, &qword_1009A0C10, &qword_1009A0C18, &qword_1009A0C20);
}

uint64_t sub_1000BF788(void *a1, void *a2)
{
  return sub_1000BFD90( a1,  a2,  &qword_1009A0B18,  (uint64_t (*)(void))type metadata accessor for SPBeaconType);
}

uint64_t sub_1000BF79C(uint64_t *a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v18, *(void *)(*v2 + 40LL));
  swift_bridgeObjectRetain(v5);
  sub_100069EC4(v18, a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0)
  {
    swift_bridgeObjectRetain(*(void *)(*(void *)(v5 + 48) + 8 * v8));
    char v10 = sub_100311D54(v9, a2);
    swift_bridgeObjectRelease();
    if ((v10 & 1) != 0)
    {
LABEL_6:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v14 = *(void *)(*(void *)(*v2 + 48LL) + 8 * v8);
      *a1 = v14;
      swift_bridgeObjectRetain(v14);
      return 0LL;
    }

    uint64_t v11 = ~v7;
    while (1)
    {
      unint64_t v8 = (v8 + 1) & v11;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        break;
      }
      swift_bridgeObjectRetain(*(void *)(*(void *)(v5 + 48) + 8 * v8));
      char v13 = sub_100311D54(v12, a2);
      swift_bridgeObjectRelease();
      if ((v13 & 1) != 0) {
        goto LABEL_6;
      }
    }
  }

  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  *(void *)&v18[0] = *v2;
  *unint64_t v2 = 0x8000000000000000LL;
  swift_bridgeObjectRetain(a2);
  sub_1000CB6E4(v17, v8, isUniquelyReferenced_nonNull_native);
  *unint64_t v2 = *(void *)&v18[0];
  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1LL;
}

uint64_t sub_1000BF92C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for BeaconStatus(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v54 = (uint64_t)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v44 - v10;
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v44 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v53 = (uint64_t)&v44 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  unint64_t v19 = (char *)&v44 - v18;
  __chkstk_darwin(v17);
  __int128 v46 = (char *)&v44 - v20;
  __int128 v47 = v2;
  uint64_t v21 = *v2;
  Hasher.init(_seed:)(v56, *(void *)(*v2 + 40LL));
  uint64_t v55 = type metadata accessor for UUID(0LL);
  uint64_t v22 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v21);
  dispatch thunk of Hashable.hash(into:)(v56, v55, v22);
  uint64_t v49 = v5;
  uint64_t v55 = a2;
  uint64_t v23 = type metadata accessor for Date(0LL);
  uint64_t v24 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v56, v23, v24);
  Swift::Int v25 = Hasher._finalize()();
  uint64_t v26 = -1LL << *(_BYTE *)(v21 + 32);
  unint64_t v27 = v25 & ~v26;
  uint64_t v28 = v21;
  uint64_t v52 = v21 + 56;
  if (((*(void *)(v21 + 56 + ((v27 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v27) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    __int128 v40 = v47;
    uint64_t v39 = a1;
    goto LABEL_12;
  }

  uint64_t v45 = a1;
  uint64_t v50 = ~v26;
  uint64_t v51 = *(void *)(v6 + 72);
  __int128 v48 = v14;
  uint64_t v29 = v55;
  do
  {
    uint64_t v30 = v28;
    unint64_t v31 = v51 * v27;
    sub_10001DC4C(*(void *)(v28 + 48) + v51 * v27, (uint64_t)v19, type metadata accessor for BeaconStatus);
    char v32 = static UUID.== infix(_:_:)(v19, v29);
    uint64_t v33 = v53;
    sub_10001DC4C((uint64_t)v19, v53, type metadata accessor for BeaconStatus);
    sub_10001DC4C(v29, (uint64_t)v14, type metadata accessor for BeaconStatus);
    if ((v32 & 1) == 0)
    {
      sub_100018C68((uint64_t)v14, type metadata accessor for BeaconStatus);
      sub_100018C68(v33, type metadata accessor for BeaconStatus);
      sub_10001DC4C((uint64_t)v19, (uint64_t)v11, type metadata accessor for BeaconStatus);
      sub_10001DC4C(v55, v54, type metadata accessor for BeaconStatus);
LABEL_4:
      sub_100018C68(v54, type metadata accessor for BeaconStatus);
      sub_100018C68((uint64_t)v11, type metadata accessor for BeaconStatus);
      sub_100018C68((uint64_t)v19, type metadata accessor for BeaconStatus);
      uint64_t v28 = v30;
      goto LABEL_5;
    }

    char v34 = static Date.== infix(_:_:)(v33 + *(int *)(v49 + 24), &v14[*(int *)(v49 + 24)]);
    sub_100018C68((uint64_t)v14, type metadata accessor for BeaconStatus);
    sub_100018C68(v33, type metadata accessor for BeaconStatus);
    sub_10001DC4C((uint64_t)v19, (uint64_t)v11, type metadata accessor for BeaconStatus);
    sub_10001DC4C(v55, v54, type metadata accessor for BeaconStatus);
    if ((v34 & 1) == 0) {
      goto LABEL_4;
    }
    uint64_t v35 = *(int *)(v49 + 20);
    int v36 = v11[v35];
    int v37 = *(unsigned __int8 *)(v54 + v35);
    sub_100018C68(v54, type metadata accessor for BeaconStatus);
    sub_100018C68((uint64_t)v11, type metadata accessor for BeaconStatus);
    sub_100018C68((uint64_t)v19, type metadata accessor for BeaconStatus);
    uint64_t v14 = v48;
    uint64_t v28 = v30;
    if (v36 == v37)
    {
      swift_bridgeObjectRelease();
      sub_100018C68(v55, type metadata accessor for BeaconStatus);
      sub_10001DC4C(*(void *)(*v47 + 48LL) + v31, v45, type metadata accessor for BeaconStatus);
      return 0LL;
    }

uint64_t sub_1000BFD7C(void *a1, void *a2)
{
  return sub_1000BFD90( a1,  a2,  &qword_1009A0B50,  (uint64_t (*)(void))type metadata accessor for SPBeaconTaskName);
}

uint64_t sub_1000BFD90(void *a1, void *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  uint64_t v5 = v4;
  uint64_t v8 = *v4;
  uint64_t v9 = *(void *)(*v4 + 40LL);
  uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  uint64_t v12 = v11;
  Hasher.init(_seed:)(v37, v9);
  swift_bridgeObjectRetain(v8);
  String.hash(into:)(v37, v10, v12);
  Swift::Int v13 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  uint64_t v14 = -1LL << *(_BYTE *)(v8 + 32);
  unint64_t v15 = v13 & ~v14;
  if (((*(void *)(v8 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v5);
    v37[0] = *v5;
    *uint64_t v5 = 0x8000000000000000LL;
    id v31 = a2;
    sub_1000C97E0((uint64_t)v31, v15, isUniquelyReferenced_nonNull_native, a3, a4);
    *uint64_t v5 = v37[0];
    swift_bridgeObjectRelease();
    *a1 = v31;
    return 1LL;
  }

  uint64_t v16 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v8 + 48) + 8 * v15));
  uint64_t v18 = v17;
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
  if (v16 == v19 && v18 == v20)
  {
LABEL_16:
    swift_bridgeObjectRelease_n(v18, 2LL);
  }

  else
  {
    char v22 = _stringCompareWithSmolCheck(_:_:expecting:)(v16, v18, v19, v20, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v22 & 1) == 0)
    {
      uint64_t v23 = ~v14;
      do
      {
        unint64_t v15 = (v15 + 1) & v23;
        if (((*(void *)(v8 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) == 0) {
          goto LABEL_15;
        }
        uint64_t v24 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v8 + 48) + 8 * v15));
        uint64_t v18 = v25;
        uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(a2);
        if (v24 == v26 && v18 == v27) {
          goto LABEL_16;
        }
        char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v24, v18, v26, v27, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      while ((v29 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease();
  uint64_t v33 = *(void **)(*(void *)(*v5 + 48LL) + 8 * v15);
  *a1 = v33;
  id v34 = v33;
  return 0LL;
}

uint64_t sub_1000BFFC0(Swift::Int *a1, void *a2)
{
  return sub_1000C1AB8( a1,  a2,  (unint64_t *)&unk_1009A0B20,  &OBJC_CLASS___SPBeacon_ptr,  (uint64_t *)&unk_1009BEFE0);
}

uint64_t sub_1000BFFDC(uint64_t a1, char *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for Destination(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v30 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40LL);
  uint64_t v13 = sub_100007864(&qword_1009A0BD0, v12, (uint64_t)&protocol conformance descriptor for Destination);
  swift_bridgeObjectRetain(v10);
  id v34 = a2;
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  uint64_t v15 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v16 = v14 & ~v15;
  uint64_t v17 = v10;
  uint64_t v18 = v10 + 56;
  if (((*(void *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
  {
    uint64_t v30 = v3;
    uint64_t v31 = a1;
    uint64_t v32 = ~v15;
    uint64_t v33 = v7;
    uint64_t v19 = *(void *)(v7 + 72);
    uint64_t v20 = *(void (**)(void, void, void))(v7 + 16);
    while (1)
    {
      uint64_t v21 = v17;
      char v22 = v20;
      v20(v9, *(void *)(v17 + 48) + v19 * v16, v6);
      uint64_t v23 = sub_100007864( &qword_1009A0BD8,  (uint64_t (*)(uint64_t))&type metadata accessor for Destination,  (uint64_t)&protocol conformance descriptor for Destination);
      char v24 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v34, v6, v23);
      uint64_t v25 = *(void (**)(char *, uint64_t))(v33 + 8);
      v25(v9, v6);
      if ((v24 & 1) != 0) {
        break;
      }
      unint64_t v16 = (v16 + 1) & v32;
      uint64_t v17 = v21;
      uint64_t v20 = v22;
      if (((*(void *)(v18 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v30;
        a1 = v31;
        uint64_t v26 = v33;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease();
    v25(v34, v6);
    v22(v31, *(void *)(*v30 + 48LL) + v19 * v16, v6);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void (**)(void, void, void))(v7 + 16);
    uint64_t v26 = v7;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v28 = v34;
    v20(v9, v34, v6);
    uint64_t v35 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_1000CBC60((uint64_t)v9, v16, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v35;
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, char *, uint64_t))(v26 + 32))(a1, v28, v6);
    return 1LL;
  }

uint64_t sub_1000C0238(_BYTE *a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v14, *(void *)(*v2 + 40LL));
  Swift::UInt32 v6 = dword_1007EB238[(char)a2];
  Hasher._combine(_:)(v6);
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v5 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v14[0] = *v2;
    *unint64_t v2 = 0x8000000000000000LL;
    sub_1000CBEB4(a2, v9, isUniquelyReferenced_nonNull_native);
    *unint64_t v2 = v14[0];
    swift_bridgeObjectRelease();
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v10 = *(void *)(v5 + 48);
  if (dword_1007EB238[*(char *)(v10 + v9)] != v6)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v5 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (dword_1007EB238[*(char *)(v10 + v9)] != v6);
  }

  uint64_t result = 0LL;
  LOBYTE(a2) = *(_BYTE *)(*(void *)(*v2 + 48LL) + v9);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1000C0374(uint64_t a1, unsigned __int8 *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for RawSearchResult(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (unsigned __int8 *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v2;
  Hasher.init(_seed:)(v22, *(void *)(*v2 + 40LL));
  swift_bridgeObjectRetain(v10);
  sub_1005B93D0((uint64_t)v22);
  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0)
  {
    uint64_t v20 = v2;
    uint64_t v21 = a1;
    uint64_t v14 = ~v12;
    uint64_t v15 = *(void *)(v7 + 72);
    while (1)
    {
      sub_10001DC4C(*(void *)(v10 + 48) + v15 * v13, (uint64_t)v9, type metadata accessor for RawSearchResult);
      char v16 = sub_1005BA700(v9, a2);
      sub_100018C68((uint64_t)v9, type metadata accessor for RawSearchResult);
      if ((v16 & 1) != 0) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
      if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v3 = v20;
        a1 = v21;
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)a2, type metadata accessor for RawSearchResult);
    sub_10001DC4C(*(void *)(*v20 + 48LL) + v15 * v13, v21, type metadata accessor for RawSearchResult);
    return 0LL;
  }

  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    sub_10001DC4C((uint64_t)a2, (uint64_t)v9, type metadata accessor for RawSearchResult);
    v22[0] = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_1000CC030(v9, v13, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v22[0];
    swift_bridgeObjectRelease();
    sub_10002218C((uint64_t)a2, a1, type metadata accessor for RawSearchResult);
    return 1LL;
  }

uint64_t sub_1000C0570(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v29 = a2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v2);
    uint64_t v8 = swift_retain();
    uint64_t v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release();
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v27 = v9;
      uint64_t v10 = type metadata accessor for AnyCancellable(0LL);
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
      *a1 = v28;
      swift_unknownObjectRelease(v9);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    uint64_t v23 = sub_1000C2BFC(v7, result + 1);
    uint64_t v28 = v23;
    unint64_t v24 = *(void *)(v23 + 16);
    if (*(void *)(v23 + 24) <= v24)
    {
      uint64_t v26 = v24 + 1;
      swift_retain();
      sub_1000C64D8(v26);
      uint64_t v25 = v28;
    }

    else
    {
      uint64_t v25 = v23;
      swift_retain();
    }

    sub_1000C87D0(a2, v25);
    *uint64_t v3 = v25;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1LL;
  }

  uint64_t v12 = *(void *)(v6 + 40);
  uint64_t v13 = type metadata accessor for AnyCancellable(0LL);
  uint64_t v14 = sub_100007864( (unint64_t *)&unk_1009AC370,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
  swift_bridgeObjectRetain(v6);
  uint64_t v15 = dispatch thunk of Hashable._rawHashValue(seed:)(v12, v13, v14);
  uint64_t v16 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v17 = v15 & ~v16;
  if (((*(void *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    uint64_t v21 = v29;
    uint64_t v28 = *v2;
    *unint64_t v2 = 0x8000000000000000LL;
    uint64_t v22 = swift_retain();
    sub_1000CC220(v22, v17, isUniquelyReferenced_nonNull_native);
    *unint64_t v2 = v28;
    swift_bridgeObjectRelease();
    *a1 = v21;
    return 1LL;
  }

  uint64_t v18 = ~v16;
  uint64_t v19 = sub_100007864( &qword_1009A0CA0,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
  while (1)
  {
    uint64_t v28 = *(void *)(*(void *)(v6 + 48) + 8 * v17);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v28, &v29, v13, v19) & 1) != 0) {
      break;
    }
    unint64_t v17 = (v17 + 1) & v18;
    if (((*(void *)(v6 + 56 + ((v17 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v17) & 1) == 0) {
      goto LABEL_11;
    }
  }

  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v17);
  swift_retain();
  return 0LL;
}

uint64_t sub_1000C0838(Swift::Int *a1, void *a2)
{
  return sub_1000C1AB8(a1, a2, &qword_1009A0C70, &OBJC_CLASS___SPStandaloneBeacon_ptr, &qword_1009A0C78);
}

uint64_t sub_1000C0854(Swift::Int *a1, void *a2)
{
  return sub_1000C1AB8(a1, a2, &qword_1009A0C60, &OBJC_CLASS___SPBeaconGroup_ptr, &qword_1009A0C68);
}

uint64_t sub_1000C0870(uint64_t *a1, uint64_t a2)
{
  return sub_1000C0884(a1, a2, (uint64_t *)&unk_1009A0B80, (uint64_t)&type metadata for UInt64);
}

uint64_t sub_1000C0884(uint64_t *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v7 = v4;
  uint64_t v10 = *v4;
  uint64_t v11 = static Hasher._hash(seed:_:)(*(void *)(v10 + 40), a2);
  uint64_t v12 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v13 = v11 & ~v12;
  if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v7);
    uint64_t v18 = *v7;
    *uint64_t v7 = 0x8000000000000000LL;
    sub_1000C96AC(a2, v13, isUniquelyReferenced_nonNull_native, a3, a4);
    *uint64_t v7 = v18;
    swift_bridgeObjectRelease();
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v14 = *(void *)(v10 + 48);
  if (*(void *)(v14 + 8 * v13) != a2)
  {
    uint64_t v15 = ~v12;
    do
    {
      unint64_t v13 = (v13 + 1) & v15;
      if (((*(void *)(v10 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (*(void *)(v14 + 8 * v13) != a2);
  }

  uint64_t result = 0LL;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1000C0994(Swift::Int *a1, void *a2)
{
  return sub_1000C1AB8( a1,  a2,  (unint64_t *)&unk_1009A0C80,  &OBJC_CLASS___SPTrackingAvoidanceResult_ptr,  (uint64_t *)&unk_1009BEFF0);
}

uint64_t sub_1000C09B0(_BYTE *a1, uint64_t a2)
{
  return sub_1000C09C4(a1, a2, &qword_1009A0C50, (uint64_t)&type metadata for LocationSource);
}

uint64_t sub_1000C09C4(_BYTE *a1, uint64_t a2, uint64_t *a3, uint64_t a4)
{
  uint64_t v9 = *v4;
  Hasher.init(_seed:)(v18, *(void *)(*v4 + 40LL));
  Hasher._combine(_:)(a2);
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1LL << *(_BYTE *)(v9 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v4);
    v18[0] = *v4;
    *uint64_t v4 = 0x8000000000000000LL;
    sub_1000CA4BC(a2, v12, isUniquelyReferenced_nonNull_native, a3, a4);
    uint64_t v17 = *v4;
    *uint64_t v4 = v18[0];
    swift_bridgeObjectRelease(v17);
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v13 = *(void *)(v9 + 48);
  if (*(unsigned __int8 *)(v13 + v12) != a2)
  {
    uint64_t v14 = ~v11;
    do
    {
      unint64_t v12 = (v12 + 1) & v14;
      if (((*(void *)(v9 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (*(unsigned __int8 *)(v13 + v12) != a2);
  }

  uint64_t result = 0LL;
  LOBYTE(a2) = *(_BYTE *)(*(void *)(*v4 + 48LL) + v12);
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1000C0AF8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v27 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v25 - v10;
  uint64_t v12 = *v2;
  Hasher.init(_seed:)(v30, *(void *)(*v2 + 40LL));
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v12);
  dispatch thunk of Hashable.hash(into:)(v30, v13, v14);
  uint64_t v29 = v6;
  uint64_t v15 = a2 + *(int *)(v6 + 20);
  dispatch thunk of Hashable.hash(into:)(v30, v13, v14);
  Swift::Int v16 = Hasher._finalize()();
  uint64_t v17 = -1LL << *(_BYTE *)(v12 + 32);
  unint64_t v18 = v16 & ~v17;
  uint64_t v19 = *(void *)(v12 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v18;
  uint64_t v28 = v11;
  if ((v19 & 1) != 0)
  {
    uint64_t v25 = v2;
    uint64_t v26 = a1;
    uint64_t v20 = ~v17;
    uint64_t v21 = *(void *)(v27 + 72);
    do
    {
      sub_10001DC4C(*(void *)(v12 + 48) + v21 * v18, (uint64_t)v9, type metadata accessor for BeaconIdentifier);
      if ((static UUID.== infix(_:_:)(v9, a2) & 1) != 0
        && (static UUID.== infix(_:_:)(&v9[*(int *)(v29 + 20)], v15) & 1) != 0)
      {
        sub_100018C68((uint64_t)v9, type metadata accessor for BeaconIdentifier);
        swift_bridgeObjectRelease();
        sub_100018C68(a2, type metadata accessor for BeaconIdentifier);
        sub_10001DC4C(*(void *)(*v25 + 48LL) + v21 * v18, v26, type metadata accessor for BeaconIdentifier);
        return 0LL;
      }

      sub_100018C68((uint64_t)v9, type metadata accessor for BeaconIdentifier);
      unint64_t v18 = (v18 + 1) & v20;
    }

    while (((*(void *)(v12 + 56 + ((v18 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v18) & 1) != 0);
    swift_bridgeObjectRelease();
    uint64_t v3 = v25;
    a1 = v26;
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
  uint64_t v24 = (uint64_t)v28;
  sub_10001DC4C(a2, (uint64_t)v28, type metadata accessor for BeaconIdentifier);
  v30[0] = *v3;
  *uint64_t v3 = 0x8000000000000000LL;
  sub_1000CC3EC(v24, v18, isUniquelyReferenced_nonNull_native);
  *uint64_t v3 = v30[0];
  swift_bridgeObjectRelease();
  sub_10002218C(a2, a1, type metadata accessor for BeaconIdentifier);
  return 1LL;
}

uint64_t sub_1000C0D9C(uint64_t a1, uint64_t a2, unint64_t a3, Swift::UInt32 a4)
{
  return sub_1000C1F08(a1, a2, a3, a4, &qword_1009A0A60);
}

uint64_t sub_1000C0DF0(uint64_t *a1, uint64_t a2)
{
  return sub_1000C0E14(a1, a2, (uint64_t *)&unk_1009BA0E0, &qword_1009A0B90, &qword_1009A0B98, &qword_1009A0BA0);
}

uint64_t sub_1000C0E14( uint64_t *a1, uint64_t a2, uint64_t *a3, unint64_t *a4, unint64_t *a5, uint64_t *a6)
{
  uint64_t v10 = v6;
  uint64_t v40 = a2;
  uint64_t v13 = *v6;
  if ((*v6 & 0xC000000000000001LL) != 0)
  {
    if (v13 < 0) {
      uint64_t v14 = *v6;
    }
    else {
      uint64_t v14 = v13 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v13);
    uint64_t v15 = swift_retain();
    uint64_t v16 = __CocoaSet.member(for:)(v15, v14);
    swift_release();
    if (v16)
    {
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v38 = v16;
      swift_unknownObjectRetain(v16);
      uint64_t v17 = sub_100004AEC(a3);
      swift_dynamicCast(&v39, &v38, (char *)&type metadata for Swift.AnyObject + 8, v17, 7LL);
      *a1 = v39;
      swift_unknownObjectRelease(v16);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v14);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    uint64_t v30 = sub_1000C32AC(v14, result + 1, a6, a3, a4);
    uint64_t v39 = v30;
    unint64_t v31 = *(void *)(v30 + 16);
    if (*(void *)(v30 + 24) <= v31)
    {
      uint64_t v33 = v31 + 1;
      swift_retain();
      sub_1000C70C4(v33, a6, a3, a4);
      uint64_t v32 = v39;
    }

    else
    {
      uint64_t v32 = v30;
      swift_retain();
    }

    sub_1000C889C(a2, v32, a3, a4);
    uint64_t *v10 = v32;
    swift_bridgeObjectRelease();
    *a1 = a2;
    return 1LL;
  }

  uint64_t v19 = *(void *)(v13 + 40);
  swift_bridgeObjectRetain(v13);
  uint64_t v20 = sub_100004AEC(a3);
  uint64_t v35 = a4;
  uint64_t v21 = sub_1000372EC(a4, a3, (uint64_t)&protocol conformance descriptor for XPCSession<A>);
  uint64_t v22 = dispatch thunk of Hashable._rawHashValue(seed:)(v19, v20, v21);
  uint64_t v23 = -1LL << *(_BYTE *)(v13 + 32);
  unint64_t v24 = v22 & ~v23;
  if (((*(void *)(v13 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v24) & 1) == 0)
  {
LABEL_11:
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v6);
    uint64_t v28 = v40;
    uint64_t v39 = *v6;
    *uint64_t v6 = 0x8000000000000000LL;
    uint64_t v29 = swift_retain();
    sub_1000CCD0C(v29, v24, isUniquelyReferenced_nonNull_native, a6, a3, v35, a5);
    *uint64_t v6 = v39;
    swift_bridgeObjectRelease();
    *a1 = v28;
    return 1LL;
  }

  uint64_t v25 = ~v23;
  uint64_t v26 = sub_1000372EC(a5, a3, (uint64_t)&protocol conformance descriptor for XPCSession<A>);
  while (1)
  {
    uint64_t v39 = *(void *)(*(void *)(v13 + 48) + 8 * v24);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v39, &v40, v20, v26) & 1) != 0) {
      break;
    }
    unint64_t v24 = (v24 + 1) & v25;
    if (((*(void *)(v13 + 56 + ((v24 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v24) & 1) == 0) {
      goto LABEL_11;
    }
  }

  swift_release();
  swift_bridgeObjectRelease();
  *a1 = *(void *)(*(void *)(*v6 + 48) + 8 * v24);
  swift_retain();
  return 0LL;
}

uint64_t sub_1000C1110(Swift::Int *a1, void *a2)
{
  return sub_1000C1AB8(a1, a2, &qword_1009A0A70, &OBJC_CLASS___SPCBPeripheralManagerSessionKey_ptr, &qword_1009A0A78);
}

uint64_t sub_1000C112C(_DWORD *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  uint64_t v7 = static Hasher._hash(seed:bytes:count:)(*(void *)(v6 + 40), a2, 4LL);
  uint64_t v8 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0)
  {
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v14 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_1000CC648(a2, v9, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v14;
    swift_bridgeObjectRelease();
    uint64_t result = 1LL;
    goto LABEL_8;
  }

  uint64_t v10 = *(void *)(v6 + 48);
  if (*(_DWORD *)(v10 + 4 * v9) != (_DWORD)a2)
  {
    uint64_t v11 = ~v8;
    do
    {
      unint64_t v9 = (v9 + 1) & v11;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
        goto LABEL_7;
      }
    }

    while (*(_DWORD *)(v10 + 4 * v9) != (_DWORD)a2);
  }

  uint64_t result = 0LL;
LABEL_8:
  *a1 = a2;
  return result;
}

uint64_t sub_1000C122C(uint64_t *a1, uint64_t a2)
{
  return sub_1000C0E14( a1,  a2,  (uint64_t *)&unk_1009A0080,  (unint64_t *)&unk_1009AC330,  &qword_1009A0C40,  &qword_1009A0C38);
}

uint64_t sub_1000C1250(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v2);
    uint64_t v8 = swift_retain();
    uint64_t v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release();
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v25 = v9;
      uint64_t v10 = type metadata accessor for Service();
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(v24, &v25, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
      *a1 = v24[0];
      swift_unknownObjectRelease(v9);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v20 = sub_1000C2E54(v7, result + 1);
    v24[0] = v20;
    unint64_t v21 = *(void *)(v20 + 16);
    if (*(void *)(v20 + 24) <= v21)
    {
      uint64_t v23 = v21 + 1;
      swift_retain();
      sub_1000C765C(v23);
      uint64_t v22 = v24[0];
    }

    else
    {
      uint64_t v22 = v20;
      swift_retain();
    }

    sub_1000C8968(a2, v22);
    *uint64_t v3 = v22;
  }

  else
  {
    Hasher.init(_seed:)(v24, *(void *)(v6 + 40));
    uint64_t v12 = *(void *)(a2 + 32);
    swift_bridgeObjectRetain(v6);
    NSObject.hash(into:)(v24);
    Swift::Int v13 = Hasher._finalize()();
    uint64_t v14 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v15 = v13 & ~v14;
    if (((*(void *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) != 0)
    {
      uint64_t v16 = *(void *)(v6 + 48);
      if (*(void *)(*(void *)(v16 + 8 * v15) + 32LL) == v12)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v15);
        swift_retain();
        return 0LL;
      }

      uint64_t v17 = ~v14;
      while (1)
      {
        unint64_t v15 = (v15 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) == 0) {
          break;
        }
        if (*(void *)(*(void *)(v16 + 8 * v15) + 32LL) == v12) {
          goto LABEL_12;
        }
      }
    }

    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v24[0] = *v2;
    *unint64_t v2 = 0x8000000000000000LL;
    uint64_t v19 = swift_retain();
    sub_1000CC76C(v19, v15, isUniquelyReferenced_nonNull_native);
    *unint64_t v2 = v24[0];
  }

  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1LL;
}

uint64_t sub_1000C14BC(uint64_t *a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) != 0)
  {
    if (v6 < 0) {
      uint64_t v7 = *v2;
    }
    else {
      uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v2);
    uint64_t v8 = swift_retain();
    uint64_t v9 = __CocoaSet.member(for:)(v8, v7);
    swift_release();
    if (v9)
    {
      swift_bridgeObjectRelease();
      swift_release();
      uint64_t v25 = v9;
      uint64_t v10 = type metadata accessor for Characteristic();
      swift_unknownObjectRetain(v9);
      swift_dynamicCast(v24, &v25, (char *)&type metadata for Swift.AnyObject + 8, v10, 7LL);
      *a1 = v24[0];
      swift_unknownObjectRelease(v9);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v7);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v20 = sub_1000C3064(v7, result + 1);
    v24[0] = v20;
    unint64_t v21 = *(void *)(v20 + 16);
    if (*(void *)(v20 + 24) <= v21)
    {
      uint64_t v23 = v21 + 1;
      swift_retain();
      sub_1000C7920(v23);
      uint64_t v22 = v24[0];
    }

    else
    {
      uint64_t v22 = v20;
      swift_retain();
    }

    sub_1000C8A14(a2, v22);
    *uint64_t v3 = v22;
  }

  else
  {
    Hasher.init(_seed:)(v24, *(void *)(v6 + 40));
    uint64_t v12 = *(void *)(a2 + 40);
    swift_bridgeObjectRetain(v6);
    NSObject.hash(into:)(v24);
    Swift::Int v13 = Hasher._finalize()();
    uint64_t v14 = -1LL << *(_BYTE *)(v6 + 32);
    unint64_t v15 = v13 & ~v14;
    if (((*(void *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) != 0)
    {
      uint64_t v16 = *(void *)(v6 + 48);
      if (*(void *)(*(void *)(v16 + 8 * v15) + 40LL) == v12)
      {
LABEL_12:
        swift_release();
        swift_bridgeObjectRelease();
        *a1 = *(void *)(*(void *)(*v2 + 48) + 8 * v15);
        swift_retain();
        return 0LL;
      }

      uint64_t v17 = ~v14;
      while (1)
      {
        unint64_t v15 = (v15 + 1) & v17;
        if (((*(void *)(v6 + 56 + ((v15 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v15) & 1) == 0) {
          break;
        }
        if (*(void *)(*(void *)(v16 + 8 * v15) + 40LL) == v12) {
          goto LABEL_12;
        }
      }
    }

    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v24[0] = *v2;
    *unint64_t v2 = 0x8000000000000000LL;
    uint64_t v19 = swift_retain();
    sub_1000CC8E0(v19, v15, isUniquelyReferenced_nonNull_native);
    *unint64_t v2 = v24[0];
  }

  swift_bridgeObjectRelease();
  *a1 = a2;
  return 1LL;
}

uint64_t sub_1000C1728(_BYTE *a1, uint64_t a2)
{
  return sub_1000C09C4(a1, a2, &qword_1009A0BB8, (uint64_t)&type metadata for SystemInfoDynamic.MeDeviceState);
}

uint64_t sub_1000C173C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = *v2;
  Hasher.init(_seed:)(v58, *(void *)(*v2 + 40LL));
  uint64_t v7 = *a2;
  uint64_t v8 = a2[1];
  swift_bridgeObjectRetain(v6);
  uint64_t v56 = v8;
  uint64_t v57 = v7;
  String.hash(into:)(v58, v7, v8);
  Swift::Int v9 = Hasher._finalize()();
  uint64_t v10 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v11 = v9 & ~v10;
  uint64_t v55 = v6 + 56;
  uint64_t v50 = v3;
  uint64_t v51 = a1;
  if (((*(void *)(v6 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0)
  {
    uint64_t v52 = ~v10;
    uint64_t v53 = *(void *)(v6 + 48);
    do
    {
      uint64_t v12 = v53 + 88 * v11;
      uint64_t v13 = *(void *)(v12 + 8);
      uint64_t v15 = *(void *)(v12 + 16);
      uint64_t v14 = *(void *)(v12 + 24);
      int v16 = *(unsigned __int8 *)(v12 + 32);
      uint64_t v18 = *(void *)(v12 + 40);
      uint64_t v17 = *(void *)(v12 + 48);
      uint64_t v19 = *(void *)(v12 + 56);
      uint64_t v20 = *(void *)(v12 + 64);
      uint64_t v21 = *(void *)(v12 + 80);
      uint64_t v54 = *(void *)(v12 + 72);
      BOOL v22 = *(void *)v12 == v57 && v13 == v56;
      if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v12, v13, v57, v56, 0LL) & 1) == 0) {
        goto LABEL_4;
      }
      uint64_t v23 = a2[2];
      uint64_t v24 = a2[3];
      BOOL v25 = v15 == v23 && v14 == v24;
      if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v14, v23, v24, 0LL) & 1) == 0
        || ((v16 ^ *((unsigned __int8 *)a2 + 32)) & 1) != 0)
      {
        goto LABEL_4;
      }

      uint64_t v26 = a2[6];
      if (v17)
      {
        if (!v26) {
          goto LABEL_4;
        }
        uint64_t v27 = a2[5];
        BOOL v28 = v18 == v27 && v17 == v26;
        if (!v28 && (_stringCompareWithSmolCheck(_:_:expecting:)(v18, v17, v27, v26, 0LL) & 1) == 0) {
          goto LABEL_4;
        }
      }

      else if (v26)
      {
        goto LABEL_4;
      }

      uint64_t v29 = a2[8];
      if (v20)
      {
        if (!v29) {
          goto LABEL_4;
        }
        uint64_t v30 = a2[7];
        BOOL v31 = v19 == v30 && v20 == v29;
        if (!v31 && (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, v30, v29, 0LL) & 1) == 0) {
          goto LABEL_4;
        }
      }

      else if (v29)
      {
        goto LABEL_4;
      }

      uint64_t v32 = a2[10];
      if (v21)
      {
        if (v32)
        {
          uint64_t v33 = a2[9];
          BOOL v34 = v54 == v33 && v21 == v32;
          if (v34 || (_stringCompareWithSmolCheck(_:_:expecting:)(v54, v21, v33, v32, 0LL) & 1) != 0)
          {
LABEL_41:
            swift_bridgeObjectRelease();
            sub_1000D4C9C(a2);
            uint64_t v35 = *(void *)(*v50 + 48LL) + 88 * v11;
            uint64_t v36 = *(void *)(v35 + 8);
            uint64_t v37 = *(void *)(v35 + 16);
            uint64_t v38 = *(void *)(v35 + 24);
            char v39 = *(_BYTE *)(v35 + 32);
            uint64_t v40 = *(void *)(v35 + 40);
            uint64_t v41 = *(void *)(v35 + 80);
            *(void *)uint64_t v51 = *(void *)v35;
            *(void *)(v51 + 8) = v36;
            *(void *)(v51 + 16) = v37;
            *(void *)(v51 + 24) = v38;
            *(_BYTE *)(v51 + 32) = v39;
            *(void *)(v51 + 40) = v40;
            __int128 v42 = *(_OWORD *)(v35 + 48);
            __int128 v43 = *(_OWORD *)(v35 + 64);
            *(_OWORD *)(v51 + 48) = v42;
            *(_OWORD *)(v51 + 64) = v43;
            *(void *)(v51 + 80) = v41;
            uint64_t v44 = v42;
            uint64_t v45 = v43;
            swift_bridgeObjectRetain(v41);
            swift_bridgeObjectRetain(v36);
            swift_bridgeObjectRetain(v38);
            swift_bridgeObjectRetain(v44);
            swift_bridgeObjectRetain(v45);
            return 0LL;
          }
        }
      }

      else if (!v32)
      {
        goto LABEL_41;
      }

LABEL_4:
      unint64_t v11 = (v11 + 1) & v52;
    }

    while (((*(void *)(v55 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0);
  }

  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v50);
  v58[0] = *v50;
  *uint64_t v50 = 0x8000000000000000LL;
  sub_1000D4C34(a2);
  sub_1000CCA54(a2, v11, isUniquelyReferenced_nonNull_native);
  *uint64_t v50 = v58[0];
  swift_bridgeObjectRelease();
  __int128 v48 = *((_OWORD *)a2 + 3);
  *(_OWORD *)(v51 + 32) = *((_OWORD *)a2 + 2);
  *(_OWORD *)(v51 + 48) = v48;
  *(_OWORD *)(v51 + 64) = *((_OWORD *)a2 + 4);
  *(void *)(v51 + 80) = a2[10];
  __int128 v49 = *((_OWORD *)a2 + 1);
  uint64_t result = 1LL;
  *(_OWORD *)uint64_t v51 = *(_OWORD *)a2;
  *(_OWORD *)(v51 + 16) = v49;
  return result;
}

    uint64_t v7 = v40 + 1;
    uint64_t v6 = v10;
    if (v40 + 1 == v11)
    {
      swift_bridgeObjectRelease();
      goto LABEL_24;
    }
  }

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
LABEL_37:
  __break(1u);
LABEL_38:
  __break(1u);
LABEL_39:
  __break(1u);
}

      swift_bridgeObjectRelease();
      Class isa = Set._bridgeToObjectiveC()().super.isa;
      swift_bridgeObjectRelease();
      uint64_t v1 = v48;
      [v48 setSafeLocations:isa];

      uint64_t v14 = v49;
      if (v49 == v45) {
        goto LABEL_47;
      }
    }

    __break(1u);
LABEL_42:
    __break(1u);
LABEL_43:
    if (v12 < 0) {
      uint64_t v40 = v12;
    }
    else {
      uint64_t v40 = v12 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v12);
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v40);
  }

  if ((v2 & 0xC000000000000001LL) != 0)
  {
    uint64_t v5 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, v2);
LABEL_7:
    uint64_t v6 = v5;
    swift_bridgeObjectRelease(v2);
    uint64_t v7 = [v6 senderCorrelationIdentifier];

    if (v7)
    {
      unint64_t v2 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
      uint64_t v4 = v8;
    }

    else
    {
      unint64_t v2 = 0LL;
      uint64_t v4 = 0LL;
    }

    return (*(uint64_t (**)(uint64_t, uint64_t))(v0 + 8))(v2, v4);
  }

  if (*(void *)((v2 & 0xFFFFFFFFFFFFFF8LL) + 0x10))
  {
    uint64_t v5 = *(id *)(v2 + 32);
    goto LABEL_7;
  }

  __break(1u);
  return result;
}

uint64_t sub_1000C1A54(uint64_t *a1, uint64_t a2)
{
  return sub_1000C0E14( a1,  a2,  (uint64_t *)&unk_1009A0AB0,  (unint64_t *)&unk_1009A6B00,  (unint64_t *)&unk_1009A0C90,  &qword_1009A0AA8);
}

uint64_t sub_1000C1A78(uint64_t *a1, uint64_t a2)
{
  return sub_1000C0E14( a1,  a2,  (uint64_t *)&unk_1009AC2E0,  (unint64_t *)&unk_1009A0B00,  (unint64_t *)&unk_1009AC2F0,  &qword_1009A0B10);
}

uint64_t sub_1000C1A9C(Swift::Int *a1, void *a2)
{
  return sub_1000C1AB8(a1, a2, &qword_10099E2C0, &OBJC_CLASS___CKRecordZoneID_ptr, &qword_1009A0AF8);
}

uint64_t sub_1000C1AB8(Swift::Int *a1, void *a2, unint64_t *a3, void *a4, uint64_t *a5)
{
  Swift::Int v9 = v5;
  uint64_t v12 = *v5;
  if ((*v5 & 0xC000000000000001LL) != 0)
  {
    if (v12 < 0) {
      uint64_t v13 = *v5;
    }
    else {
      uint64_t v13 = v12 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(*v5);
    id v14 = a2;
    uint64_t v15 = __CocoaSet.member(for:)();

    if (v15)
    {
      swift_bridgeObjectRelease();

      uint64_t v40 = v15;
      uint64_t v16 = sub_100022898(0LL, a3, a4);
      swift_unknownObjectRetain(v15);
      swift_dynamicCast(&v41, &v40, (char *)&type metadata for Swift.AnyObject + 8, v16, 7LL);
      *a1 = v41;
      swift_unknownObjectRelease(v15);
      return 0LL;
    }

    uint64_t result = __CocoaSet.count.getter(v13);
    if (__OFADD__(result, 1LL))
    {
      __break(1u);
      return result;
    }

    Swift::Int v29 = sub_1000C29E0(v13, result + 1, a5, a3, a4);
    Swift::Int v41 = v29;
    unint64_t v30 = *(void *)(v29 + 16);
    if (*(void *)(v29 + 24) <= v30)
    {
      uint64_t v35 = v30 + 1;
      id v36 = v14;
      sub_1000C7F4C(v35, a5);
      uint64_t v31 = v41;
    }

    else
    {
      uint64_t v31 = v29;
      id v32 = v14;
    }

    sub_1000C8AC0((uint64_t)v14, v31);
    *Swift::Int v9 = v31;
    swift_bridgeObjectRelease();
    *a1 = (Swift::Int)v14;
  }

  else
  {
    Swift::Int v18 = *(void *)(v12 + 40);
    swift_bridgeObjectRetain(v12);
    Swift::Int v19 = NSObject._rawHashValue(seed:)(v18);
    uint64_t v20 = -1LL << *(_BYTE *)(v12 + 32);
    unint64_t v21 = v19 & ~v20;
    uint64_t v37 = a4;
    if (((*(void *)(v12 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) != 0)
    {
      sub_100022898(0LL, a3, a4);
      id v22 = *(id *)(*(void *)(v12 + 48) + 8 * v21);
      char v23 = static NSObject.== infix(_:_:)(v22, a2);

      if ((v23 & 1) != 0)
      {
LABEL_12:

        swift_bridgeObjectRelease();
        uint64_t v27 = *(void **)(*(void *)(*v9 + 48) + 8 * v21);
        *a1 = (Swift::Int)v27;
        id v28 = v27;
        return 0LL;
      }

      uint64_t v24 = ~v20;
      while (1)
      {
        unint64_t v21 = (v21 + 1) & v24;
        if (((*(void *)(v12 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) == 0) {
          break;
        }
        id v25 = *(id *)(*(void *)(v12 + 48) + 8 * v21);
        char v26 = static NSObject.== infix(_:_:)(v25, a2);

        if ((v26 & 1) != 0) {
          goto LABEL_12;
        }
      }
    }

    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v9);
    Swift::Int v41 = *v9;
    *Swift::Int v9 = 0x8000000000000000LL;
    id v34 = a2;
    sub_1000C9A1C((uint64_t)v34, v21, isUniquelyReferenced_nonNull_native, a5, a3, v37);
    *Swift::Int v9 = v41;
    swift_bridgeObjectRelease();
    *a1 = (Swift::Int)v34;
  }

  return 1LL;
}

uint64_t sub_1000C1D80(_DWORD *a1, unint64_t a2)
{
  unint64_t v3 = a2;
  unint64_t v5 = HIDWORD(a2);
  uint64_t v6 = *v2;
  Hasher.init(_seed:)(v18, *(void *)(*v2 + 40LL));
  Hasher._combine(_:)(v3);
  Hasher._combine(_:)(v5);
  Swift::Int v7 = Hasher._finalize()();
  uint64_t v8 = -1LL << *(_BYTE *)(v6 + 32);
  unint64_t v9 = v7 & ~v8;
  if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) != 0)
  {
    uint64_t v10 = ~v8;
    while (1)
    {
      unint64_t v11 = (int *)(*(void *)(v6 + 48) + 8 * v9);
      int v13 = *v11;
      int v12 = v11[1];
      if (v13 == (_DWORD)v3 && v12 == (_DWORD)v5) {
        break;
      }
      unint64_t v9 = (v9 + 1) & v10;
      if (((*(void *)(v6 + 56 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) == 0) {
        goto LABEL_8;
      }
    }

    uint64_t result = 0LL;
    uint64_t v17 = (_DWORD *)(*(void *)(*v2 + 48LL) + 8 * v9);
    LODWORD(v3) = *v17;
    LODWORD(v5) = v17[1];
  }

  else
  {
LABEL_8:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
    v18[0] = *v2;
    *unint64_t v2 = 0x8000000000000000LL;
    sub_1000CCECC(v3, v9, isUniquelyReferenced_nonNull_native);
    *unint64_t v2 = v18[0];
    swift_bridgeObjectRelease();
    uint64_t result = 1LL;
  }

  *a1 = v3;
  a1[1] = v5;
  return result;
}

uint64_t sub_1000C1EB4(uint64_t a1, uint64_t a2, unint64_t a3, Swift::UInt32 a4)
{
  return sub_1000C1F08(a1, a2, a3, a4, &qword_1009A0AD8);
}

uint64_t sub_1000C1F08(uint64_t a1, uint64_t a2, unint64_t a3, Swift::UInt32 a4, uint64_t *a5)
{
  uint64_t v10 = *v5;
  Hasher.init(_seed:)(&__s1, *(void *)(*v5 + 40));
  swift_bridgeObjectRetain(v10);
  sub_10001736C(a2, a3);
  Data.hash(into:)(&__s1, a2, a3);
  sub_100016F9C(a2, a3);
  Hasher._combine(_:)(a4);
  unint64_t v11 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(v10 + 32));
  if (((*(void *)(v10 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) != 0) {
    __asm { BR              X8 }
  }

  swift_bridgeObjectRelease();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v14);
  uint64_t __s1 = *v14;
  *id v14 = 0x8000000000000000LL;
  sub_10001736C(a2, a3);
  sub_1000CD02C(a2, a3, a4, v11, isUniquelyReferenced_nonNull_native, a5);
  *id v14 = __s1;
  swift_bridgeObjectRelease();
  *(void *)a1 = a2;
  *(void *)(a1 + 8) = a3;
  uint64_t result = 1LL;
  *(_DWORD *)(a1 + 16) = a4;
  return result;
}

Swift::Int sub_1000C29E0(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4, void *a5)
{
  if (a2)
  {
    sub_100004AEC(a3);
    uint64_t v10 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v29 = v10;
    uint64_t v11 = __CocoaSet.makeIterator()(a1);
    uint64_t v12 = __CocoaSet.Iterator.next()(v11);
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = sub_100022898(0LL, a4, a5);
      do
      {
        uint64_t v27 = v13;
        swift_dynamicCast(&v28, &v27, (char *)&type metadata for Swift.AnyObject + 8, v14, 7LL);
        uint64_t v10 = v29;
        unint64_t v22 = *(void *)(v29 + 16);
        if (*(void *)(v29 + 24) <= v22)
        {
          sub_1000C7F4C(v22 + 1, a3);
          uint64_t v10 = v29;
        }

        uint64_t v15 = v28;
        Swift::Int result = NSObject._rawHashValue(seed:)(*(void *)(v10 + 40));
        uint64_t v17 = v10 + 56;
        uint64_t v18 = -1LL << *(_BYTE *)(v10 + 32);
        unint64_t v19 = result & ~v18;
        unint64_t v20 = v19 >> 6;
        if (((-1LL << v19) & ~*(void *)(v10 + 56 + 8 * (v19 >> 6))) != 0)
        {
          unint64_t v21 = __clz(__rbit64((-1LL << v19) & ~*(void *)(v10 + 56 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v23 = 0;
          unint64_t v24 = (unint64_t)(63 - v18) >> 6;
          do
          {
            if (++v20 == v24 && (v23 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v25 = v20 == v24;
            if (v20 == v24) {
              unint64_t v20 = 0LL;
            }
            v23 |= v25;
            uint64_t v26 = *(void *)(v17 + 8 * v20);
          }

          while (v26 == -1);
          unint64_t v21 = __clz(__rbit64(~v26)) + (v20 << 6);
        }

        *(void *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
        *(void *)(*(void *)(v10 + 48) + 8 * v21) = v15;
        ++*(void *)(v10 + 16);
        uint64_t v13 = __CocoaSet.Iterator.next()(result);
      }

      while (v13);
    }

    swift_release(v11);
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  return v10;
}

uint64_t sub_1000C2BE0(uint64_t a1, uint64_t a2)
{
  return sub_1000C32AC(a1, a2, &qword_1009A0C20, &qword_1009A0C08, &qword_1009A0C10);
}

uint64_t sub_1000C2BFC(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100004AEC(&qword_1009A0CA8);
    uint64_t v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v25 = v4;
    uint64_t v5 = __CocoaSet.makeIterator()(a1);
    uint64_t v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = type metadata accessor for AnyCancellable(0LL);
      do
      {
        uint64_t v23 = v7;
        swift_dynamicCast(&v24, &v23, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
        uint64_t v4 = v25;
        unint64_t v18 = *(void *)(v25 + 16);
        if (*(void *)(v25 + 24) <= v18)
        {
          sub_1000C64D8(v18 + 1);
          uint64_t v4 = v25;
        }

        uint64_t v9 = v24;
        uint64_t v23 = v24;
        uint64_t v10 = *(void *)(v4 + 40);
        uint64_t v11 = sub_100007864( (unint64_t *)&unk_1009AC370,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
        uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v10, v8, v11);
        uint64_t v13 = v4 + 56;
        uint64_t v14 = -1LL << *(_BYTE *)(v4 + 32);
        unint64_t v15 = result & ~v14;
        unint64_t v16 = v15 >> 6;
        if (((-1LL << v15) & ~*(void *)(v4 + 56 + 8 * (v15 >> 6))) != 0)
        {
          unint64_t v17 = __clz(__rbit64((-1LL << v15) & ~*(void *)(v4 + 56 + 8 * (v15 >> 6)))) | v15 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v19 = 0;
          unint64_t v20 = (unint64_t)(63 - v14) >> 6;
          do
          {
            if (++v16 == v20 && (v19 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v21 = v16 == v20;
            if (v16 == v20) {
              unint64_t v16 = 0LL;
            }
            v19 |= v21;
            uint64_t v22 = *(void *)(v13 + 8 * v16);
          }

          while (v22 == -1);
          unint64_t v17 = __clz(__rbit64(~v22)) + (v16 << 6);
        }

        *(void *)(v13 + ((v17 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v17;
        *(void *)(*(void *)(v4 + 48) + 8 * v17) = v9;
        ++*(void *)(v4 + 16);
        uint64_t v7 = __CocoaSet.Iterator.next()(result);
      }

      while (v7);
    }

    swift_release();
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (uint64_t)&_swiftEmptySetSingleton;
  }

  return v4;
}

uint64_t sub_1000C2E1C(uint64_t a1, uint64_t a2)
{
  return sub_1000C32AC(a1, a2, &qword_1009A0BA0, (uint64_t *)&unk_1009BA0E0, &qword_1009A0B90);
}

uint64_t sub_1000C2E38(uint64_t a1, uint64_t a2)
{
  return sub_1000C32AC(a1, a2, &qword_1009A0C38, (uint64_t *)&unk_1009A0080, (unint64_t *)&unk_1009AC330);
}

Swift::Int sub_1000C2E54(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100004AEC(&qword_1009A0C30);
    uint64_t v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v24 = v4;
    uint64_t v5 = __CocoaSet.makeIterator()(a1);
    uint64_t v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = type metadata accessor for Service();
      do
      {
        v22[0] = v7;
        swift_dynamicCast(&v23, v22, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
        uint64_t v4 = v24;
        unint64_t v17 = *(void *)(v24 + 16);
        if (*(void *)(v24 + 24) <= v17)
        {
          sub_1000C765C(v17 + 1);
          uint64_t v4 = v24;
        }

        uint64_t v9 = v23;
        Hasher.init(_seed:)(v22, *(void *)(v4 + 40));
        id v10 = *(id *)(v9 + 32);
        NSObject.hash(into:)(v22);

        Swift::Int result = Hasher._finalize()();
        uint64_t v12 = v4 + 56;
        uint64_t v13 = -1LL << *(_BYTE *)(v4 + 32);
        unint64_t v14 = result & ~v13;
        unint64_t v15 = v14 >> 6;
        if (((-1LL << v14) & ~*(void *)(v4 + 56 + 8 * (v14 >> 6))) != 0)
        {
          unint64_t v16 = __clz(__rbit64((-1LL << v14) & ~*(void *)(v4 + 56 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v18 = 0;
          unint64_t v19 = (unint64_t)(63 - v13) >> 6;
          do
          {
            if (++v15 == v19 && (v18 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v20 = v15 == v19;
            if (v15 == v19) {
              unint64_t v15 = 0LL;
            }
            v18 |= v20;
            uint64_t v21 = *(void *)(v12 + 8 * v15);
          }

          while (v21 == -1);
          unint64_t v16 = __clz(__rbit64(~v21)) + (v15 << 6);
        }

        *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
        *(void *)(*(void *)(v4 + 48) + 8 * v16) = v9;
        ++*(void *)(v4 + 16);
        uint64_t v7 = __CocoaSet.Iterator.next()(result);
      }

      while (v7);
    }

    swift_release();
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  return v4;
}

Swift::Int sub_1000C3064(uint64_t a1, uint64_t a2)
{
  if (a2)
  {
    sub_100004AEC(&qword_1009A0C28);
    uint64_t v4 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v24 = v4;
    uint64_t v5 = __CocoaSet.makeIterator()(a1);
    uint64_t v6 = __CocoaSet.Iterator.next()(v5);
    if (v6)
    {
      uint64_t v7 = v6;
      uint64_t v8 = type metadata accessor for Characteristic();
      do
      {
        v22[0] = v7;
        swift_dynamicCast(&v23, v22, (char *)&type metadata for Swift.AnyObject + 8, v8, 7LL);
        uint64_t v4 = v24;
        unint64_t v17 = *(void *)(v24 + 16);
        if (*(void *)(v24 + 24) <= v17)
        {
          sub_1000C7920(v17 + 1);
          uint64_t v4 = v24;
        }

        uint64_t v9 = v23;
        Hasher.init(_seed:)(v22, *(void *)(v4 + 40));
        id v10 = *(id *)(v9 + 40);
        NSObject.hash(into:)(v22);

        Swift::Int result = Hasher._finalize()();
        uint64_t v12 = v4 + 56;
        uint64_t v13 = -1LL << *(_BYTE *)(v4 + 32);
        unint64_t v14 = result & ~v13;
        unint64_t v15 = v14 >> 6;
        if (((-1LL << v14) & ~*(void *)(v4 + 56 + 8 * (v14 >> 6))) != 0)
        {
          unint64_t v16 = __clz(__rbit64((-1LL << v14) & ~*(void *)(v4 + 56 + 8 * (v14 >> 6)))) | v14 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v18 = 0;
          unint64_t v19 = (unint64_t)(63 - v13) >> 6;
          do
          {
            if (++v15 == v19 && (v18 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v20 = v15 == v19;
            if (v15 == v19) {
              unint64_t v15 = 0LL;
            }
            v18 |= v20;
            uint64_t v21 = *(void *)(v12 + 8 * v15);
          }

          while (v21 == -1);
          unint64_t v16 = __clz(__rbit64(~v21)) + (v15 << 6);
        }

        *(void *)(v12 + ((v16 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v16;
        *(void *)(*(void *)(v4 + 48) + 8 * v16) = v9;
        ++*(void *)(v4 + 16);
        uint64_t v7 = __CocoaSet.Iterator.next()(result);
      }

      while (v7);
    }

    swift_release();
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (Swift::Int)&_swiftEmptySetSingleton;
  }

  return v4;
}

uint64_t sub_1000C3274(uint64_t a1, uint64_t a2)
{
  return sub_1000C32AC(a1, a2, &qword_1009A0AA8, (uint64_t *)&unk_1009A0AB0, (unint64_t *)&unk_1009A6B00);
}

uint64_t sub_1000C3290(uint64_t a1, uint64_t a2)
{
  return sub_1000C32AC(a1, a2, &qword_1009A0B10, (uint64_t *)&unk_1009AC2E0, (unint64_t *)&unk_1009A0B00);
}

uint64_t sub_1000C32AC(uint64_t a1, uint64_t a2, uint64_t *a3, uint64_t *a4, unint64_t *a5)
{
  if (a2)
  {
    sub_100004AEC(a3);
    uint64_t v10 = static _SetStorage.convert(_:capacity:)(a1, a2);
    uint64_t v31 = v10;
    uint64_t v11 = __CocoaSet.makeIterator()(a1);
    uint64_t v12 = __CocoaSet.Iterator.next()(v11);
    if (v12)
    {
      uint64_t v28 = a3;
      do
      {
        uint64_t v29 = v12;
        uint64_t v22 = sub_100004AEC(a4);
        swift_dynamicCast(&v30, &v29, (char *)&type metadata for Swift.AnyObject + 8, v22, 7LL);
        unint64_t v23 = *(void *)(v10 + 16);
        if (*(void *)(v10 + 24) <= v23)
        {
          sub_1000C70C4(v23 + 1, v28, a4, a5);
          uint64_t v10 = v31;
        }

        uint64_t v13 = v30;
        uint64_t v29 = v30;
        uint64_t v14 = *(void *)(v10 + 40);
        uint64_t v15 = sub_1000372EC(a5, a4, (uint64_t)&protocol conformance descriptor for XPCSession<A>);
        uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v22, v15);
        uint64_t v17 = v10 + 56;
        uint64_t v18 = -1LL << *(_BYTE *)(v10 + 32);
        unint64_t v19 = result & ~v18;
        unint64_t v20 = v19 >> 6;
        if (((-1LL << v19) & ~*(void *)(v10 + 56 + 8 * (v19 >> 6))) != 0)
        {
          unint64_t v21 = __clz(__rbit64((-1LL << v19) & ~*(void *)(v10 + 56 + 8 * (v19 >> 6)))) | v19 & 0x7FFFFFFFFFFFFFC0LL;
        }

        else
        {
          char v24 = 0;
          unint64_t v25 = (unint64_t)(63 - v18) >> 6;
          do
          {
            if (++v20 == v25 && (v24 & 1) != 0)
            {
              __break(1u);
              return result;
            }

            BOOL v26 = v20 == v25;
            if (v20 == v25) {
              unint64_t v20 = 0LL;
            }
            v24 |= v26;
            uint64_t v27 = *(void *)(v17 + 8 * v20);
          }

          while (v27 == -1);
          unint64_t v21 = __clz(__rbit64(~v27)) + (v20 << 6);
        }

        *(void *)(v17 + ((v21 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v21;
        *(void *)(*(void *)(v10 + 48) + 8 * v21) = v13;
        ++*(void *)(v10 + 16);
        uint64_t v12 = __CocoaSet.Iterator.next()(result);
      }

      while (v12);
    }

    swift_release();
  }

  else
  {
    swift_unknownObjectRelease(a1);
    return (uint64_t)&_swiftEmptySetSingleton;
  }

  return v10;
}

Swift::Int sub_1000C34CC(uint64_t a1, uint64_t a2)
{
  return sub_1000C29E0(a1, a2, &qword_1009A0AF8, &qword_10099E2C0, &OBJC_CLASS___CKRecordZoneID_ptr);
}

uint64_t sub_1000C34E8(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC((uint64_t *)&unk_1009A0D00);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  if (!*(void *)(v3 + 16)) {
    goto LABEL_28;
  }
  uint64_t v18 = v2;
  uint64_t v6 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v7 = (void *)(v3 + 56);
  if (v6 < 64) {
    uint64_t v8 = ~(-1LL << v6);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v3 + 56);
  int64_t v10 = (unint64_t)(v6 + 63) >> 6;
  swift_retain(v3);
  if (v9)
  {
    unint64_t v11 = __clz(__rbit64(v9));
    goto LABEL_23;
  }

  if (v10 > 1)
  {
    unint64_t v12 = *(void *)(v3 + 64);
    uint64_t v13 = 1LL;
    if (v12) {
      goto LABEL_22;
    }
    uint64_t v13 = 2LL;
    if (v10 > 2)
    {
      unint64_t v12 = *(void *)(v3 + 72);
      if (v12) {
        goto LABEL_22;
      }
      uint64_t v13 = 3LL;
      if (v10 > 3)
      {
        unint64_t v12 = *(void *)(v3 + 80);
        if (!v12)
        {
          uint64_t v14 = 4LL;
          if (v10 > 4)
          {
            unint64_t v12 = *(void *)(v3 + 88);
            if (v12)
            {
              uint64_t v13 = 4LL;
              goto LABEL_22;
            }

            while (1)
            {
              uint64_t v13 = v14 + 1;
              if (__OFADD__(v14, 1LL))
              {
                __break(1u);
                JUMPOUT(0x1000C38C0LL);
              }

              if (v13 >= v10) {
                break;
              }
              unint64_t v12 = v7[v13];
              ++v14;
              if (v12) {
                goto LABEL_22;
              }
            }
          }

          goto LABEL_24;
        }

uint64_t sub_1000C38E4(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0AF0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    id v32 = v2;
    uint64_t v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v10) {
          goto LABEL_36;
        }
        unint64_t v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v10) {
            goto LABEL_36;
          }
          unint64_t v19 = v33[v13];
          if (!v19)
          {
            int64_t v13 = v18 + 2;
            if (v18 + 2 >= v10) {
              goto LABEL_36;
            }
            unint64_t v19 = v33[v13];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release(v3);
                unint64_t v2 = v32;
                uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v33 = -1LL << v31;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v13 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v10) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v33[v13];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v20;
            }
          }
        }

uint64_t sub_1000C3BC0(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC((uint64_t *)&unk_1009A0A50);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = result;
  if (*(void *)(v3 + 16))
  {
    BOOL v29 = v2;
    int64_t v7 = 0LL;
    uint64_t v8 = (void *)(v3 + 56);
    uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v3 + 56);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v7 << 6);
      }

      else
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          int64_t v7 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_36;
          }
          unint64_t v18 = v8[v7];
          if (!v18)
          {
            int64_t v7 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_36;
            }
            unint64_t v18 = v8[v7];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                uint64_t v28 = 1LL << *(_BYTE *)(v3 + 32);
                if (v28 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v8 = -1LL << v28;
                }
                unint64_t v2 = v29;
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v7 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v7 >= v12) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v8[v7];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v7 = v19;
            }
          }
        }

uint64_t sub_1000C3E54(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0BC0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v35 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    uint64_t v33 = v2;
    int64_t v34 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v10 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v16 = v15 | (v12 << 6);
      }

      else
      {
        int64_t v17 = v12 + 1;
        if (__OFADD__(v12, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v34) {
          goto LABEL_36;
        }
        unint64_t v18 = v35[v17];
        ++v12;
        if (!v18)
        {
          int64_t v12 = v17 + 1;
          if (v17 + 1 >= v34) {
            goto LABEL_36;
          }
          unint64_t v18 = v35[v12];
          if (!v18)
          {
            int64_t v12 = v17 + 2;
            if (v17 + 2 >= v34) {
              goto LABEL_36;
            }
            unint64_t v18 = v35[v12];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v34)
              {
LABEL_36:
                swift_release();
                unint64_t v2 = v33;
                uint64_t v32 = 1LL << *(_BYTE *)(v3 + 32);
                if (v32 > 63) {
                  bzero(v35, ((unint64_t)(v32 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v35 = -1LL << v32;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v35[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v12 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v12 >= v34) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v35[v12];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v12 = v19;
            }
          }
        }

uint64_t sub_1000C417C(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0B58);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  if (!*(void *)(v3 + 16)) {
    goto LABEL_28;
  }
  uint64_t v6 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v7 = (void *)(v3 + 56);
  if (v6 < 64) {
    uint64_t v8 = ~(-1LL << v6);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v3 + 56);
  int64_t v10 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  if (v9)
  {
    unint64_t v11 = __clz(__rbit64(v9));
    goto LABEL_23;
  }

  if (v10 > 1)
  {
    unint64_t v12 = *(void *)(v3 + 64);
    uint64_t v13 = 1LL;
    if (v12) {
      goto LABEL_22;
    }
    uint64_t v13 = 2LL;
    if (v10 > 2)
    {
      unint64_t v12 = *(void *)(v3 + 72);
      if (v12) {
        goto LABEL_22;
      }
      uint64_t v13 = 3LL;
      if (v10 > 3)
      {
        unint64_t v12 = *(void *)(v3 + 80);
        if (!v12)
        {
          uint64_t v14 = 4LL;
          if (v10 > 4)
          {
            unint64_t v12 = *(void *)(v3 + 88);
            if (v12)
            {
              uint64_t v13 = 4LL;
              goto LABEL_22;
            }

            while (1)
            {
              uint64_t v13 = v14 + 1;
              if (__OFADD__(v14, 1LL))
              {
                __break(1u);
                JUMPOUT(0x1000C46B4LL);
              }

              if (v13 >= v10) {
                break;
              }
              unint64_t v12 = v7[v13];
              ++v14;
              if (v12) {
                goto LABEL_22;
              }
            }
          }

          goto LABEL_24;
        }

Swift::Int sub_1000C4708(uint64_t a1)
{
  unint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0AA0);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  Swift::Int v6 = result;
  if (*(void *)(v3 + 16))
  {
    unint64_t v29 = v2;
    int64_t v7 = 0LL;
    uint64_t v8 = (void *)(v3 + 56);
    uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v3 + 56);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    Swift::Int v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v7 << 6);
      }

      else
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          int64_t v7 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_36;
          }
          unint64_t v18 = v8[v7];
          if (!v18)
          {
            int64_t v7 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_36;
            }
            unint64_t v18 = v8[v7];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                uint64_t v28 = 1LL << *(_BYTE *)(v3 + 32);
                if (v28 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v8 = -1LL << v28;
                }
                unint64_t v2 = v29;
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v7 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v7 >= v12) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v8[v7];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v7 = v19;
            }
          }
        }

unint64_t sub_1000C49BC(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0CF8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  if (*(void *)(v3 + 16))
  {
    uint64_t v6 = 1LL << *(_BYTE *)(v3 + 32);
    int64_t v7 = (void *)(v3 + 56);
    if (v6 < 64) {
      uint64_t v8 = ~(-1LL << v6);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v6 + 63) >> 6;
    unint64_t result = swift_retain();
    int64_t v12 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v13 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v14 = v13 | (v12 << 6);
      }

      else
      {
        int64_t v28 = v12 + 1;
        if (__OFADD__(v12, 1LL))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return result;
        }

        if (v28 >= v10) {
          goto LABEL_26;
        }
        unint64_t v29 = v7[v28];
        ++v12;
        if (!v29)
        {
          int64_t v12 = v28 + 1;
          if (v28 + 1 >= v10) {
            goto LABEL_26;
          }
          unint64_t v29 = v7[v12];
          if (!v29)
          {
            int64_t v12 = v28 + 2;
            if (v28 + 2 >= v10) {
              goto LABEL_26;
            }
            unint64_t v29 = v7[v12];
            if (!v29)
            {
              int64_t v30 = v28 + 3;
              if (v30 >= v10)
              {
LABEL_26:
                swift_release();
                uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
                if (v31 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *int64_t v7 = -1LL << v31;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v29 = v7[v30];
              if (!v29)
              {
                while (1)
                {
                  int64_t v12 = v30 + 1;
                  if (__OFADD__(v30, 1LL)) {
                    goto LABEL_32;
                  }
                  if (v12 >= v10) {
                    goto LABEL_26;
                  }
                  unint64_t v29 = v7[v12];
                  ++v30;
                  if (v29) {
                    goto LABEL_25;
                  }
                }
              }

              int64_t v12 = v30;
            }
          }
        }

uint64_t sub_1000C4C5C(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0CF0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v32 = v2;
    __int128 v33 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v10 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v11 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v16 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v10) {
          goto LABEL_36;
        }
        unint64_t v19 = v33[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v10) {
            goto LABEL_36;
          }
          unint64_t v19 = v33[v13];
          if (!v19)
          {
            int64_t v13 = v18 + 2;
            if (v18 + 2 >= v10) {
              goto LABEL_36;
            }
            unint64_t v19 = v33[v13];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v10)
              {
LABEL_36:
                swift_release();
                unint64_t v2 = v32;
                uint64_t v31 = 1LL << *(_BYTE *)(v3 + 32);
                if (v31 > 63) {
                  bzero(v33, ((unint64_t)(v31 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *__int128 v33 = -1LL << v31;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v33[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v13 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v10) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v33[v13];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v20;
            }
          }
        }

uint64_t sub_1000C4F38(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  if (*(void *)(*v1 + 24) > a1) {
    a1 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0C58);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1LL);
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_39;
  }
  uint64_t v10 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  __int128 v37 = (void *)(v7 + 56);
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  else {
    uint64_t v12 = -1LL;
  }
  unint64_t v13 = v12 & v11;
  __int128 v35 = v1;
  int64_t v36 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v14 = v8 + 56;
  uint64_t result = swift_retain();
  int64_t v16 = 0LL;
  while (1)
  {
    if (v13)
    {
      unint64_t v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }

    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }

    if (v20 >= v36) {
      goto LABEL_35;
    }
    unint64_t v21 = v37[v20];
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_35;
      }
      unint64_t v21 = v37[v16];
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_35;
        }
        unint64_t v21 = v37[v16];
        if (!v21) {
          break;
        }
      }
    }

LABEL_35:
  swift_release();
  unint64_t v2 = v35;
  uint64_t v34 = 1LL << *(_BYTE *)(v7 + 32);
  if (v34 > 63) {
    bzero(v37, ((unint64_t)(v34 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *__int128 v37 = -1LL << v34;
  }
  *(void *)(v7 + 16) = 0LL;
LABEL_39:
  uint64_t result = swift_release();
  *unint64_t v2 = v9;
  return result;
}

  swift_release();
  unint64_t v2 = v37;
  int64_t v36 = 1LL << *(_BYTE *)(v7 + 32);
  if (v36 > 63) {
    bzero(v39, ((unint64_t)(v36 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v39 = -1LL << v36;
  }
  *(void *)(v7 + 16) = 0LL;
LABEL_39:
  uint64_t result = swift_release();
  *unint64_t v2 = v9;
  return result;
}

  swift_release(v12);
  uint64_t v7 = v43;
  __int128 v41 = 1LL << *(_BYTE *)(v12 + 32);
  if (v41 > 63) {
    bzero(v45, ((unint64_t)(v41 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v45 = -1LL << v41;
  }
  *(void *)(v12 + 16) = 0LL;
LABEL_39:
  uint64_t result = swift_release(v12);
  *uint64_t v7 = v14;
  return result;
}

  swift_release();
  unint64_t v2 = v37;
  __int128 v35 = 1LL << *(_BYTE *)(v6 + 32);
  if (v35 > 63) {
    bzero(v39, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
  }
  else {
    *uint64_t v39 = -1LL << v35;
  }
  *(void *)(v6 + 16) = 0LL;
LABEL_39:
  uint64_t result = swift_release();
  *unint64_t v2 = v8;
  return result;
}

      swift_once(&qword_10099B4F0, sub_1004B82C0);
      goto LABEL_25;
    }

    if (is_mul_ok(v15, 0x60uLL))
    {
      if (96 * v15 - 96 <= 1) {
        int64_t v16 = 1LL;
      }
      else {
        int64_t v16 = 96 * v15 - 96;
      }
      if (96 * v15 - 1 >= v16)
      {
        unint64_t v17 = v15 + 1;
        if (is_mul_ok(v17, 0x60uLL))
        {
          unint64_t v18 = 96 * v17;
          unint64_t v19 = 96 * v17 - 1;
          if (v19 >= v18 - 96)
          {
LABEL_19:
            int v60 = v13;
            int v61 = v12;
            uint64_t v59 = v11;
            *(void *)(v0 + 824) = v19;
            int64_t v20 = *(void *)(v0 + 712);
            unint64_t v21 = *(void *)(v0 + 696);
            int64_t v22 = *(void *)(v0 + 688);
            *(void *)(v0 + 664) = _swiftEmptyArrayStorage;
            sub_100164C78(v21, (void (*)(void))sub_10001736C);
            uint64_t v23 = sub_100479DC4(v22, v16, v20);
            *(void *)(v0 + 832) = v23;
            *(void *)(v0 + 840) = v24;
            *(void *)(v0 + 848) = v25;
            __int128 v41 = v23;
            __int128 v42 = v24;
            __int128 v43 = v25;
            sub_10001736C(v59, v61);
            sub_10001736C(v10, v1);
            sub_10001736C(v14, v60);
            sub_100164D20(v41, v42, v43);
            sub_10045C258(v59, v61, v10, v1, v14, v60, v41, v42, (uint64_t *)(v0 + 16), v43, v16);
            *(void *)(v0 + 856) = 0LL;
            uint64_t v56 = *(_OWORD *)(v0 + 16);
            *(_OWORD *)(v0 + 104) = *(_OWORD *)(v0 + 32);
            uint64_t v57 = *(_OWORD *)(v0 + 64);
            *(_OWORD *)(v0 + 120) = *(_OWORD *)(v0 + 48);
            *(_OWORD *)(v0 + 136) = v57;
            *(void *)(v0 + 152) = *(void *)(v0 + 80);
            *(_OWORD *)(v0 + 88) = v56;
            sub_100164EE8( (void *)(v0 + 16),  (void (*)(void, void))sub_100018BE4,  (void (*)(uint64_t, uint64_t))sub_10001736C);
            return swift_task_switch(sub_100162BEC, 0LL, 0LL);
          }

          __break(1u);
          goto LABEL_18;
        }

        goto LABEL_34;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
LABEL_34:
    __break(1u);
    goto LABEL_35;
  }

  uint64_t v26 = *(void *)(v0 + 768);
  uint64_t v27 = *(void *)(v0 + 760);
  unint64_t v28 = *(void *)(v0 + 752);
  unint64_t v29 = *(void *)(v0 + 744);
  sub_10001736C(*(void *)(v0 + 728), *(void *)(v0 + 736));
  sub_10001736C(v29, v28);
  sub_10001736C(v27, v26);
  if (qword_10099B4F0 != -1) {
LABEL_31:
  }
    swift_once(&qword_10099B4F0, sub_1004B82C0);
  char v30 = type metadata accessor for Logger(0LL);
  unint64_t v31 = sub_10000A720(v30, (uint64_t)qword_100A2AB30);
  BOOL v32 = (os_log_s *)Logger.logObject.getter(v31);
  uint64_t v33 = static os_log_type_t.error.getter(v32);
  if (os_log_type_enabled(v32, v33))
  {
    uint64_t v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    __int128 v35 = swift_slowAlloc(32LL, -1LL);
    int v62 = v35;
    *(_DWORD *)uint64_t v34 = 136315138;
    *(void *)(v0 + 624) = sub_1003F11D4(0xD000000000000010LL, 0x80000001008533C0LL, &v62);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 624, v0 + 632, v34 + 4, v34 + 12);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "Invalid key sequence %s!", v34, 0xCu);
    swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1LL, -1LL);
    swift_slowDealloc(v34, -1LL, -1LL);
  }

  int64_t v36 = *(void *)(v0 + 696);
  __int128 v37 = sub_100164C34();
  uint64_t v38 = swift_allocError(&type metadata for LTKGenerator.Error, v37, 0LL, 0LL);
  __int128 v40 = 1;
LABEL_28:
  *uint64_t v39 = v40;
  swift_willThrow(v38);
  sub_100164C78(v36, (void (*)(void))sub_100016F9C);
LABEL_29:
  uint64_t v54 = *(void *)(v0 + 792);
  uint64_t v55 = *(void *)(v0 + 784);
  swift_task_dealloc(*(void *)(v0 + 816));
  swift_task_dealloc(v54);
  swift_task_dealloc(v55);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

        sub_10001DC4C(v60, v59, type metadata accessor for LostModeRecord);
LABEL_36:
        int v65 = (void *)(v59 + v58[8]);
        uint64_t v66 = v65[1];
        if (!v66)
        {
          int v67 = v82;
          swift_bridgeObjectRetain(v82);
          sub_100018C68(v59, type metadata accessor for LostModeRecord);
          if (!v67) {
            goto LABEL_43;
          }
          swift_bridgeObjectRelease();
LABEL_27:
          uint64_t v64 = v76;
          sub_10001DC4C(v60, v76, type metadata accessor for LostModeRecord);
          goto LABEL_28;
        }

        if (v82)
        {
          if (*v65 != v79 || v66 != v82)
          {
            uint64_t v68 = _stringCompareWithSmolCheck(_:_:expecting:)(*v65, v66, v79, v82, 0LL);
            sub_100018C68(v59, type metadata accessor for LostModeRecord);
            uint64_t v64 = v76;
            int v60 = v78;
            sub_10001DC4C(v78, v76, type metadata accessor for LostModeRecord);
            if ((v68 & 1) == 0) {
              goto LABEL_28;
            }
            goto LABEL_45;
          }

          sub_100018C68(v59, type metadata accessor for LostModeRecord);
LABEL_43:
          uint64_t v64 = v76;
          sub_10001DC4C(v60, v76, type metadata accessor for LostModeRecord);
LABEL_45:
          uint64_t v69 = (void *)(v64 + v58[7]);
          uint64_t v70 = v69[1];
          if (!v70)
          {
            uint64_t v72 = v80;
            swift_bridgeObjectRetain(v80);
            uint64_t v71 = sub_100018C68(v64, type metadata accessor for LostModeRecord);
            if (!v72) {
              goto LABEL_53;
            }
            swift_bridgeObjectRelease();
            goto LABEL_29;
          }

          if (v80)
          {
            if (*v69 == v77 && v70 == v80)
            {
              uint64_t v71 = sub_100018C68(v64, type metadata accessor for LostModeRecord);
LABEL_53:
              uint64_t v74 = static os_log_type_t.default.getter(v71);
              os_log(_:dso:log:_:_:)( v74,  &_mh_execute_header,  qword_100A2B088,  "Lost mode info has not changed. Nothing to do.",  46LL,  2LL,  _swiftEmptyArrayStorage);
              v53[2](v53, 0LL);
              sub_100018C68(v60, type metadata accessor for LostModeRecord);
              goto LABEL_34;
            }

            uint64_t v73 = _stringCompareWithSmolCheck(_:_:expecting:)(*v69, v70, v77, v80, 0LL);
            uint64_t v71 = sub_100018C68(v64, type metadata accessor for LostModeRecord);
            if ((v73 & 1) != 0) {
              goto LABEL_53;
            }
LABEL_29:
            sub_100018C68(v60, type metadata accessor for LostModeRecord);
            goto LABEL_30;
          }

      unint64_t v13 = 0LL;
      goto LABEL_36;
    }

    if (v7)
    {
      if (v7 != 1 && (BYTE1(v5) - 48) <= 9u)
      {
        unint64_t v13 = 0LL;
        if (BYTE1(v5) != 48)
        {
LABEL_36:
          uint64_t v14 = 1;
          goto LABEL_39;
        }

        if (v7 == 2)
        {
          uint64_t v14 = 0;
          unint64_t v13 = -(uint64_t)(BYTE1(v5) - 48);
          goto LABEL_39;
        }

        int64_t v22 = BYTE2(v5) - 48;
        if ((BYTE2(v5) - 48) <= 9u && is_mul_ok(-(uint64_t)(BYTE1(v5) - 48), 0xAuLL))
        {
          uint64_t v23 = -10LL * (BYTE1(v5) - 48);
          unint64_t v13 = v23 - v22;
          if (v23 >= v22)
          {
            uint64_t v24 = v7 - 3;
            if (v24)
            {
              uint64_t v25 = (unsigned __int8 *)v32 + 3;
              while (1)
              {
                uint64_t v26 = *v25 - 48;
                if (v26 > 9) {
                  goto LABEL_35;
                }
                if (!is_mul_ok(v13, 0xAuLL)) {
                  goto LABEL_35;
                }
                unint64_t v18 = 10 * v13 >= (unint64_t)v26;
                unint64_t v13 = 10 * v13 - v26;
                if (!v18) {
                  goto LABEL_35;
                }
                uint64_t v14 = 0;
                ++v25;
                if (!--v24) {
                  goto LABEL_39;
                }
              }
            }

  swift_release();
  return swift_bridgeObjectRelease();
}

              sub_1000A6F30(v1);
              return;
            }
          }
        }
      }
    }

  __break(1u);
  return result;
}

            unint64_t v29 = 0LL;
            unint64_t v31 = 1LL;
            uint64_t v26 = v43;
            goto LABEL_8;
          }

  __break(1u);
  return result;
}

      __break(1u);
LABEL_36:
      sub_100061B10();
      uint64_t v50 = v112;
    }

    swift_release();
    if (qword_10099B538 == -1) {
      goto LABEL_36;
    }
    goto LABEL_41;
  }

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  swift_once(&qword_10099B538, sub_1004F3B48);
LABEL_36:
  uint64_t v39 = type metadata accessor for Logger(0LL);
  __int128 v40 = sub_10000A720(v39, (uint64_t)qword_100A2ACC8);
  __int128 v41 = (os_log_s *)Logger.logObject.getter(v40);
  __int128 v42 = static os_log_type_t.default.getter(v41);
  if (os_log_type_enabled(v41, v42))
  {
    __int128 v43 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v44 = swift_slowAlloc(32LL, -1LL);
    v66[0] = v44;
    *(_DWORD *)__int128 v43 = 136315138;
    swift_beginAccess(v67, v65, 0LL, 0LL);
    uint64_t v45 = v67[0];
    swift_bridgeObjectRetain(v67[0]);
    __int128 v46 = sub_100004AEC(&qword_1009A0B30);
    __int128 v47 = sub_1000372EC(&qword_1009B2898, &qword_1009A0B30, (uint64_t)&protocol conformance descriptor for Set<A>);
    __int128 v48 = Set.description.getter(v45, v46, v47);
    uint64_t v50 = v49;
    swift_bridgeObjectRelease();
    uint64_t v64 = sub_1003F11D4(v48, v50, v66);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, v65, v43 + 4, v43 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "Multipart Status after separating non-primary parts: %s",  v43,  0xCu);
    swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1LL, -1LL);
    swift_slowDealloc(v43, -1LL, -1LL);
  }

  swift_beginAccess(v67, v66, 0LL, 0LL);
  return v67[0];
}

    swift_once(&qword_10099B710, sub_1006511CC);
    goto LABEL_10;
  }

        LOBYTE(v7) = 0;
        uint64_t v8 = 1;
LABEL_38:
        swift_bridgeObjectRelease();
        goto LABEL_39;
      }

      __break(1u);
    }

    __break(1u);
    goto LABEL_54;
  }

  uint64_t v7 = sub_1001B91F0(a1, a2, 10LL);
  swift_bridgeObjectRelease();
  uint64_t v8 = (v7 >> 8) & 1;
LABEL_39:
  if (v8) {
    unint64_t v17 = 0;
  }
  else {
    unint64_t v17 = v7;
  }
  return v17 | (v8 << 8);
}

    swift_once(&qword_10099B8B0, sub_1006F4108);
    goto LABEL_28;
  }

  __int128 v48 = v68;
  *(void *)uint64_t v68 = v90;
  __int128 v49 = v72;
  uint64_t v50 = v69;
  uint64_t v51 = v73;
  (*(void (**)(char *, uint64_t, uint64_t))(v72 + 16))(v69, v46 + *(int *)(v41 + 28), v73);
  sub_100018C68(v46, type metadata accessor for KeySyncMetadata);
  (*(void (**)(char *, char *, uint64_t))(v49 + 32))(&v48[*(int *)(v84 + 36)], v50, v51);
  sub_100018C68(a2, type metadata accessor for KeySyncMetadata);
  sub_100015794((uint64_t)v16, &qword_10099E830);
  uint64_t v52 = (uint64_t)v48;
  uint64_t v53 = v82;
  sub_100015750(v52, v82, v74);
  uint64_t v54 = 0LL;
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v81 + 56))(v53, v54, 1LL, v84);
}

              sub_1000A6F30(v1);
              return;
            }
          }
        }
      }
    }

unint64_t sub_1000C52C8(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC((uint64_t *)&unk_1009A0B38);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v23 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v8 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1LL << v7);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v3 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    unint64_t result = swift_retain();
    int64_t v14 = 0LL;
    while (1)
    {
      if (v10)
      {
        unint64_t v15 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v16 = v15 | (v14 << 6);
      }

      else
      {
        int64_t v19 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
          __break(1u);
LABEL_32:
          __break(1u);
          return result;
        }

        if (v19 >= v11) {
          goto LABEL_26;
        }
        unint64_t v20 = v8[v19];
        ++v14;
        if (!v20)
        {
          int64_t v14 = v19 + 1;
          if (v19 + 1 >= v11) {
            goto LABEL_26;
          }
          unint64_t v20 = v8[v14];
          if (!v20)
          {
            int64_t v14 = v19 + 2;
            if (v19 + 2 >= v11) {
              goto LABEL_26;
            }
            unint64_t v20 = v8[v14];
            if (!v20)
            {
              int64_t v21 = v19 + 3;
              if (v21 >= v11)
              {
LABEL_26:
                swift_release();
                uint64_t v22 = 1LL << *(_BYTE *)(v3 + 32);
                if (v22 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v22 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v8 = -1LL << v22;
                }
                unint64_t v2 = v23;
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v20 = v8[v21];
              if (!v20)
              {
                while (1)
                {
                  int64_t v14 = v21 + 1;
                  if (__OFADD__(v21, 1LL)) {
                    goto LABEL_32;
                  }
                  if (v14 >= v11) {
                    goto LABEL_26;
                  }
                  unint64_t v20 = v8[v14];
                  ++v21;
                  if (v20) {
                    goto LABEL_25;
                  }
                }
              }

              int64_t v14 = v21;
            }
          }
        }

uint64_t sub_1000C550C(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for BeaconStatus(0LL);
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  if (*(void *)(*v1 + 24) > a1) {
    a1 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0B48);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 1LL);
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16)) {
    goto LABEL_39;
  }
  uint64_t v10 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  uint64_t v39 = (void *)(v7 + 56);
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  else {
    uint64_t v12 = -1LL;
  }
  unint64_t v13 = v12 & v11;
  __int128 v37 = v1;
  int64_t v38 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v14 = v8 + 56;
  uint64_t result = swift_retain();
  int64_t v16 = 0LL;
  while (1)
  {
    if (v13)
    {
      unint64_t v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }

    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }

    if (v20 >= v38) {
      goto LABEL_35;
    }
    unint64_t v21 = v39[v20];
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v38) {
        goto LABEL_35;
      }
      unint64_t v21 = v39[v16];
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v38) {
          goto LABEL_35;
        }
        unint64_t v21 = v39[v16];
        if (!v21) {
          break;
        }
      }
    }

uint64_t sub_1000C58D8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(a2);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1LL);
  uint64_t v7 = v6;
  if (*(void *)(v4 + 16))
  {
    BOOL v34 = v3;
    uint64_t v8 = 1LL << *(_BYTE *)(v4 + 32);
    uint64_t v36 = (void *)(v4 + 56);
    if (v8 < 64) {
      uint64_t v9 = ~(-1LL << v8);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v4 + 56);
    int64_t v35 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 56;
    uint64_t result = swift_retain(v4);
    int64_t v13 = 0LL;
    while (1)
    {
      if (v10)
      {
        unint64_t v15 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v16 = v15 | (v13 << 6);
      }

      else
      {
        int64_t v17 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v35) {
          goto LABEL_36;
        }
        unint64_t v18 = v36[v17];
        ++v13;
        if (!v18)
        {
          int64_t v13 = v17 + 1;
          if (v17 + 1 >= v35) {
            goto LABEL_36;
          }
          unint64_t v18 = v36[v13];
          if (!v18)
          {
            int64_t v13 = v17 + 2;
            if (v17 + 2 >= v35) {
              goto LABEL_36;
            }
            unint64_t v18 = v36[v13];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v35)
              {
LABEL_36:
                swift_release(v4);
                uint64_t v3 = v34;
                uint64_t v33 = 1LL << *(_BYTE *)(v4 + 32);
                if (v33 > 63) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v36 = -1LL << v33;
                }
                *(void *)(v4 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v36[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v13 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v35) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v36[v13];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v19;
            }
          }
        }

uint64_t sub_1000C5BE4(uint64_t a1)
{
  return sub_1000C7F4C(a1, (uint64_t *)&unk_1009BEFE0);
}

uint64_t sub_1000C5BF0( uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  __int128 v48 = a4;
  uint64_t v49 = a5;
  uint64_t v7 = v5;
  __int128 v47 = a2;
  uint64_t v9 = a2(0LL);
  uint64_t v46 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v42 - v10;
  uint64_t v12 = *v7;
  if (*(void *)(*v7 + 24) > a1) {
    a1 = *(void *)(*v7 + 24);
  }
  sub_100004AEC(a3);
  uint64_t v13 = static _SetStorage.resize(original:capacity:move:)(v12, a1, 1LL);
  uint64_t v14 = v13;
  if (!*(void *)(v12 + 16)) {
    goto LABEL_39;
  }
  uint64_t v15 = 1LL << *(_BYTE *)(v12 + 32);
  uint64_t v16 = *(void *)(v12 + 56);
  uint64_t v45 = (void *)(v12 + 56);
  if (v15 < 64) {
    uint64_t v17 = ~(-1LL << v15);
  }
  else {
    uint64_t v17 = -1LL;
  }
  unint64_t v18 = v17 & v16;
  __int128 v43 = v7;
  int64_t v44 = (unint64_t)(v15 + 63) >> 6;
  uint64_t v19 = v13 + 56;
  uint64_t result = swift_retain();
  int64_t v21 = 0LL;
  while (1)
  {
    if (v18)
    {
      unint64_t v23 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v24 = v23 | (v21 << 6);
      goto LABEL_26;
    }

    int64_t v25 = v21 + 1;
    if (__OFADD__(v21, 1LL))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }

    if (v25 >= v44) {
      goto LABEL_35;
    }
    unint64_t v26 = v45[v25];
    ++v21;
    if (!v26)
    {
      int64_t v21 = v25 + 1;
      if (v25 + 1 >= v44) {
        goto LABEL_35;
      }
      unint64_t v26 = v45[v21];
      if (!v26)
      {
        int64_t v21 = v25 + 2;
        if (v25 + 2 >= v44) {
          goto LABEL_35;
        }
        unint64_t v26 = v45[v21];
        if (!v26) {
          break;
        }
      }
    }

Swift::Int sub_1000C5F50(uint64_t a1)
{
  unint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0BF8);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  Swift::Int v6 = result;
  if (*(void *)(v3 + 16))
  {
    uint64_t v29 = v2;
    int64_t v7 = 0LL;
    uint64_t v8 = (void *)(v3 + 56);
    uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v3 + 56);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    Swift::Int v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v7 << 6);
      }

      else
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          int64_t v7 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_36;
          }
          unint64_t v18 = v8[v7];
          if (!v18)
          {
            int64_t v7 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_36;
            }
            unint64_t v18 = v8[v7];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                uint64_t v28 = 1LL << *(_BYTE *)(v3 + 32);
                if (v28 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v8 = -1LL << v28;
                }
                unint64_t v2 = v29;
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v7 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v7 >= v12) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v8[v7];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v7 = v19;
            }
          }
        }

uint64_t sub_1000C6204(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RawSearchResult(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int64_t v7 = (char *)&v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_1009A0C00);
  uint64_t v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 1LL);
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16)) {
    goto LABEL_29;
  }
  uint64_t v11 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 56);
  uint64_t v27 = v2;
  uint64_t v28 = (void *)(v8 + 56);
  if (v11 < 64) {
    uint64_t v13 = ~(-1LL << v11);
  }
  else {
    uint64_t v13 = -1LL;
  }
  unint64_t v14 = v13 & v12;
  int64_t v29 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 56;
  uint64_t result = swift_retain();
  int64_t v17 = 0LL;
  while (1)
  {
    if (v14)
    {
      unint64_t v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v19 = v18 | (v17 << 6);
      goto LABEL_9;
    }

    int64_t v23 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
      __break(1u);
LABEL_31:
      __break(1u);
      return result;
    }

    if (v23 >= v29) {
      goto LABEL_25;
    }
    unint64_t v24 = v28[v23];
    ++v17;
    if (!v24)
    {
      int64_t v17 = v23 + 1;
      if (v23 + 1 >= v29) {
        goto LABEL_25;
      }
      unint64_t v24 = v28[v17];
      if (!v24)
      {
        int64_t v17 = v23 + 2;
        if (v23 + 2 >= v29) {
          goto LABEL_25;
        }
        unint64_t v24 = v28[v17];
        if (!v24) {
          break;
        }
      }
    }

uint64_t sub_1000C64D8(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0CA8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v32 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    int64_t v31 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v10 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0LL;
    while (1)
    {
      if (v9)
      {
        unint64_t v14 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        unint64_t v15 = v14 | (v12 << 6);
      }

      else
      {
        int64_t v16 = v12 + 1;
        if (__OFADD__(v12, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v16 >= v31) {
          goto LABEL_36;
        }
        unint64_t v17 = v32[v16];
        ++v12;
        if (!v17)
        {
          int64_t v12 = v16 + 1;
          if (v16 + 1 >= v31) {
            goto LABEL_36;
          }
          unint64_t v17 = v32[v12];
          if (!v17)
          {
            int64_t v12 = v16 + 2;
            if (v16 + 2 >= v31) {
              goto LABEL_36;
            }
            unint64_t v17 = v32[v12];
            if (!v17)
            {
              int64_t v18 = v16 + 3;
              if (v18 >= v31)
              {
LABEL_36:
                swift_release();
                uint64_t v30 = 1LL << *(_BYTE *)(v3 + 32);
                if (v30 > 63) {
                  bzero(v32, ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  void *v32 = -1LL << v30;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v17 = v32[v18];
              if (!v17)
              {
                while (1)
                {
                  int64_t v12 = v18 + 1;
                  if (__OFADD__(v18, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v12 >= v31) {
                    goto LABEL_36;
                  }
                  unint64_t v17 = v32[v12];
                  ++v18;
                  if (v17) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v12 = v18;
            }
          }
        }

uint64_t sub_1000C67E8(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(a2);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1LL);
  uint64_t v7 = result;
  if (*(void *)(v4 + 16))
  {
    int64_t v8 = 0LL;
    unint64_t v9 = (uint64_t *)(v4 + 56);
    uint64_t v10 = 1LL << *(_BYTE *)(v4 + 32);
    uint64_t v29 = -1LL << v10;
    uint64_t v30 = v3;
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v4 + 56);
    uint64_t v31 = 1LL << *(_BYTE *)(v4 + 32);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    uint64_t v14 = result + 56;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }

      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v13) {
          goto LABEL_36;
        }
        unint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_36;
          }
          unint64_t v19 = v9[v8];
          if (!v19)
          {
            int64_t v8 = v18 + 2;
            if (v18 + 2 >= v13) {
              goto LABEL_36;
            }
            unint64_t v19 = v9[v8];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v13)
              {
LABEL_36:
                if (v31 >= 64) {
                  bzero((void *)(v4 + 56), 8 * v13);
                }
                else {
                  *unint64_t v9 = v29;
                }
                uint64_t v3 = v30;
                *(void *)(v4 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v9[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v8 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v8 >= v13) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v9[v8];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v8 = v20;
            }
          }
        }

Swift::Int sub_1000C6A64(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  Swift::Int v4 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(a2);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1LL);
  Swift::Int v7 = result;
  if (*(void *)(v4 + 16))
  {
    uint64_t v30 = v3;
    int64_t v8 = 0LL;
    unint64_t v9 = (void *)(v4 + 56);
    uint64_t v10 = 1LL << *(_BYTE *)(v4 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v4 + 56);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    Swift::Int v14 = result + 56;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }

      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v13) {
          goto LABEL_36;
        }
        unint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_36;
          }
          unint64_t v19 = v9[v8];
          if (!v19)
          {
            int64_t v8 = v18 + 2;
            if (v18 + 2 >= v13) {
              goto LABEL_36;
            }
            unint64_t v19 = v9[v8];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v13)
              {
LABEL_36:
                uint64_t v29 = 1LL << *(_BYTE *)(v4 + 32);
                if (v29 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v29 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *unint64_t v9 = -1LL << v29;
                }
                uint64_t v3 = v30;
                *(void *)(v4 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v9[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v8 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v8 >= v13) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v9[v8];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v8 = v20;
            }
          }
        }

uint64_t sub_1000C6D08(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  __chkstk_darwin(v4);
  uint64_t v42 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *v1;
  if (*(void *)(*v1 + 24) > a1) {
    a1 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0A68);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)(v6, a1, 1LL);
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16)) {
    goto LABEL_39;
  }
  char v37 = v1;
  uint64_t v9 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  BOOL v39 = (void *)(v6 + 56);
  if (v9 < 64) {
    uint64_t v11 = ~(-1LL << v9);
  }
  else {
    uint64_t v11 = -1LL;
  }
  unint64_t v12 = v11 & v10;
  int64_t v38 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 56;
  uint64_t result = swift_retain();
  int64_t v15 = 0LL;
  unint64_t v16 = type metadata accessor for BeaconIdentifier;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v15 << 6);
      goto LABEL_26;
    }

    int64_t v20 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_40:
      __break(1u);
LABEL_41:
      __break(1u);
      return result;
    }

    if (v20 >= v38) {
      goto LABEL_35;
    }
    unint64_t v21 = v39[v20];
    ++v15;
    if (!v21)
    {
      int64_t v15 = v20 + 1;
      if (v20 + 1 >= v38) {
        goto LABEL_35;
      }
      unint64_t v21 = v39[v15];
      if (!v21)
      {
        int64_t v15 = v20 + 2;
        if (v20 + 2 >= v38) {
          goto LABEL_35;
        }
        unint64_t v21 = v39[v15];
        if (!v21) {
          break;
        }
      }
    }

uint64_t sub_1000C70C4(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v7 = *v4;
  if (*(void *)(*v4 + 24) <= a1) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = *(void *)(*v4 + 24);
  }
  sub_100004AEC(a2);
  uint64_t v9 = static _SetStorage.resize(original:capacity:move:)(v7, v8, 1LL);
  uint64_t v10 = v9;
  if (*(void *)(v7 + 16))
  {
    uint64_t v11 = 1LL << *(_BYTE *)(v7 + 32);
    int64_t v38 = (void *)(v7 + 56);
    if (v11 < 64) {
      uint64_t v12 = ~(-1LL << v11);
    }
    else {
      uint64_t v12 = -1LL;
    }
    unint64_t v13 = v12 & *(void *)(v7 + 56);
    uint64_t v36 = v6;
    int64_t v37 = (unint64_t)(v11 + 63) >> 6;
    uint64_t v14 = v9 + 56;
    uint64_t result = swift_retain();
    int64_t v16 = 0LL;
    while (1)
    {
      if (v13)
      {
        unint64_t v18 = __clz(__rbit64(v13));
        v13 &= v13 - 1;
        unint64_t v19 = v18 | (v16 << 6);
      }

      else
      {
        int64_t v20 = v16 + 1;
        if (__OFADD__(v16, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v20 >= v37) {
          goto LABEL_36;
        }
        unint64_t v21 = v38[v20];
        ++v16;
        if (!v21)
        {
          int64_t v16 = v20 + 1;
          if (v20 + 1 >= v37) {
            goto LABEL_36;
          }
          unint64_t v21 = v38[v16];
          if (!v21)
          {
            int64_t v16 = v20 + 2;
            if (v20 + 2 >= v37) {
              goto LABEL_36;
            }
            unint64_t v21 = v38[v16];
            if (!v21)
            {
              int64_t v22 = v20 + 3;
              if (v22 >= v37)
              {
LABEL_36:
                swift_release();
                uint64_t v6 = v36;
                uint64_t v35 = 1LL << *(_BYTE *)(v7 + 32);
                if (v35 > 63) {
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *int64_t v38 = -1LL << v35;
                }
                *(void *)(v7 + 16) = 0LL;
                break;
              }

              unint64_t v21 = v38[v22];
              if (!v21)
              {
                while (1)
                {
                  int64_t v16 = v22 + 1;
                  if (__OFADD__(v22, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v16 >= v37) {
                    goto LABEL_36;
                  }
                  unint64_t v21 = v38[v16];
                  ++v22;
                  if (v21) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v16 = v22;
            }
          }
        }

uint64_t sub_1000C73D8(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0A88);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = result;
  if (*(void *)(v3 + 16))
  {
    int64_t v7 = 0LL;
    uint64_t v8 = (uint64_t *)(v3 + 56);
    uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v28 = -1LL << v9;
    unint64_t v29 = v2;
    if (v9 < 64) {
      uint64_t v10 = ~(-1LL << v9);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v3 + 56);
    uint64_t v30 = 1LL << *(_BYTE *)(v3 + 32);
    int64_t v12 = (unint64_t)(v9 + 63) >> 6;
    uint64_t v13 = result + 56;
    while (1)
    {
      if (v11)
      {
        unint64_t v15 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v16 = v15 | (v7 << 6);
      }

      else
      {
        int64_t v17 = v7 + 1;
        if (__OFADD__(v7, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = v8[v17];
        ++v7;
        if (!v18)
        {
          int64_t v7 = v17 + 1;
          if (v17 + 1 >= v12) {
            goto LABEL_36;
          }
          unint64_t v18 = v8[v7];
          if (!v18)
          {
            int64_t v7 = v17 + 2;
            if (v17 + 2 >= v12) {
              goto LABEL_36;
            }
            unint64_t v18 = v8[v7];
            if (!v18)
            {
              int64_t v19 = v17 + 3;
              if (v19 >= v12)
              {
LABEL_36:
                if (v30 >= 64) {
                  bzero((void *)(v3 + 56), 8 * v12);
                }
                else {
                  *uint64_t v8 = v28;
                }
                unint64_t v2 = v29;
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v8[v19];
              if (!v18)
              {
                while (1)
                {
                  int64_t v7 = v19 + 1;
                  if (__OFADD__(v19, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v7 >= v12) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v8[v7];
                  ++v19;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v7 = v19;
            }
          }
        }

uint64_t sub_1000C765C(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0C30);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    char v31 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v8 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1LL << v7);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v3 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0LL;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }

      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v11) {
          goto LABEL_36;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_36;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_36;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release();
                unint64_t v2 = v31;
                uint64_t v30 = 1LL << *(_BYTE *)(v3 + 32);
                if (v30 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v8 = -1LL << v30;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v14 >= v11) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v14 = v20;
            }
          }
        }

uint64_t sub_1000C7920(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0C28);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    char v31 = v2;
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    uint64_t v8 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v9 = ~(-1LL << v7);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v3 + 56);
    int64_t v11 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v12 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v14 = 0LL;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v14 << 6);
      }

      else
      {
        int64_t v18 = v14 + 1;
        if (__OFADD__(v14, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v11) {
          goto LABEL_36;
        }
        unint64_t v19 = v8[v18];
        ++v14;
        if (!v19)
        {
          int64_t v14 = v18 + 1;
          if (v18 + 1 >= v11) {
            goto LABEL_36;
          }
          unint64_t v19 = v8[v14];
          if (!v19)
          {
            int64_t v14 = v18 + 2;
            if (v18 + 2 >= v11) {
              goto LABEL_36;
            }
            unint64_t v19 = v8[v14];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v11)
              {
LABEL_36:
                swift_release();
                unint64_t v2 = v31;
                uint64_t v30 = 1LL << *(_BYTE *)(v3 + 32);
                if (v30 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v8 = -1LL << v30;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v8[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v14 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v14 >= v11) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v8[v14];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v14 = v20;
            }
          }
        }

uint64_t sub_1000C7BE4(uint64_t a1)
{
  unint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0BB0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  uint64_t v6 = v5;
  if (*(void *)(v3 + 16))
  {
    uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
    int64_t v38 = (void *)(v3 + 56);
    if (v7 < 64) {
      uint64_t v8 = ~(-1LL << v7);
    }
    else {
      uint64_t v8 = -1LL;
    }
    unint64_t v9 = v8 & *(void *)(v3 + 56);
    uint64_t v36 = v2;
    int64_t v37 = (unint64_t)(v7 + 63) >> 6;
    uint64_t v10 = v5 + 56;
    uint64_t result = swift_retain();
    int64_t v12 = 0LL;
    uint64_t v39 = v3;
    while (1)
    {
      if (v9)
      {
        unint64_t v15 = __clz(__rbit64(v9));
        v9 &= v9 - 1;
        int64_t v45 = v12;
        unint64_t v16 = v15 | (v12 << 6);
      }

      else
      {
        int64_t v17 = v12 + 1;
        if (__OFADD__(v12, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v17 >= v37) {
          goto LABEL_36;
        }
        unint64_t v18 = v38[v17];
        int64_t v19 = v12 + 1;
        if (!v18)
        {
          int64_t v19 = v12 + 2;
          if (v12 + 2 >= v37) {
            goto LABEL_36;
          }
          unint64_t v18 = v38[v19];
          if (!v18)
          {
            int64_t v19 = v12 + 3;
            if (v12 + 3 >= v37) {
              goto LABEL_36;
            }
            unint64_t v18 = v38[v19];
            if (!v18)
            {
              uint64_t v20 = v12 + 4;
              if (v12 + 4 >= v37)
              {
LABEL_36:
                swift_release();
                unint64_t v2 = v36;
                uint64_t v35 = 1LL << *(_BYTE *)(v3 + 32);
                if (v35 > 63) {
                  bzero(v38, ((unint64_t)(v35 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *int64_t v38 = -1LL << v35;
                }
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v18 = v38[v20];
              if (!v18)
              {
                while (1)
                {
                  int64_t v19 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v19 >= v37) {
                    goto LABEL_36;
                  }
                  unint64_t v18 = v38[v19];
                  ++v20;
                  if (v18) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v19 = v12 + 4;
            }
          }
        }

uint64_t sub_1000C7F4C(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(a2);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1LL);
  uint64_t v7 = v6;
  if (*(void *)(v4 + 16))
  {
    char v31 = v3;
    uint64_t v8 = 1LL << *(_BYTE *)(v4 + 32);
    unint64_t v9 = (void *)(v4 + 56);
    if (v8 < 64) {
      uint64_t v10 = ~(-1LL << v8);
    }
    else {
      uint64_t v10 = -1LL;
    }
    unint64_t v11 = v10 & *(void *)(v4 + 56);
    int64_t v12 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v13 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v15 = 0LL;
    while (1)
    {
      if (v11)
      {
        unint64_t v17 = __clz(__rbit64(v11));
        v11 &= v11 - 1;
        unint64_t v18 = v17 | (v15 << 6);
      }

      else
      {
        int64_t v19 = v15 + 1;
        if (__OFADD__(v15, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v19 >= v12) {
          goto LABEL_36;
        }
        unint64_t v20 = v9[v19];
        ++v15;
        if (!v20)
        {
          int64_t v15 = v19 + 1;
          if (v19 + 1 >= v12) {
            goto LABEL_36;
          }
          unint64_t v20 = v9[v15];
          if (!v20)
          {
            int64_t v15 = v19 + 2;
            if (v19 + 2 >= v12) {
              goto LABEL_36;
            }
            unint64_t v20 = v9[v15];
            if (!v20)
            {
              int64_t v21 = v19 + 3;
              if (v21 >= v12)
              {
LABEL_36:
                swift_release(v4);
                uint64_t v3 = v31;
                uint64_t v30 = 1LL << *(_BYTE *)(v4 + 32);
                if (v30 > 63) {
                  bzero((void *)(v4 + 56), ((unint64_t)(v30 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *unint64_t v9 = -1LL << v30;
                }
                *(void *)(v4 + 16) = 0LL;
                break;
              }

              unint64_t v20 = v9[v21];
              if (!v20)
              {
                while (1)
                {
                  int64_t v15 = v21 + 1;
                  if (__OFADD__(v21, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v15 >= v12) {
                    goto LABEL_36;
                  }
                  unint64_t v20 = v9[v15];
                  ++v21;
                  if (v20) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v15 = v21;
            }
          }
        }

Swift::Int sub_1000C81E4(uint64_t a1)
{
  unint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0AE8);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 1LL);
  Swift::Int v7 = result;
  if (*(void *)(v3 + 16))
  {
    uint64_t v29 = v2;
    int64_t v8 = 0LL;
    unint64_t v9 = (void *)(v3 + 56);
    uint64_t v10 = 1LL << *(_BYTE *)(v3 + 32);
    if (v10 < 64) {
      uint64_t v11 = ~(-1LL << v10);
    }
    else {
      uint64_t v11 = -1LL;
    }
    unint64_t v12 = v11 & *(void *)(v3 + 56);
    int64_t v13 = (unint64_t)(v10 + 63) >> 6;
    Swift::Int v14 = result + 56;
    while (1)
    {
      if (v12)
      {
        unint64_t v16 = __clz(__rbit64(v12));
        v12 &= v12 - 1;
        unint64_t v17 = v16 | (v8 << 6);
      }

      else
      {
        int64_t v18 = v8 + 1;
        if (__OFADD__(v8, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v13) {
          goto LABEL_36;
        }
        unint64_t v19 = v9[v18];
        ++v8;
        if (!v19)
        {
          int64_t v8 = v18 + 1;
          if (v18 + 1 >= v13) {
            goto LABEL_36;
          }
          unint64_t v19 = v9[v8];
          if (!v19)
          {
            int64_t v8 = v18 + 2;
            if (v18 + 2 >= v13) {
              goto LABEL_36;
            }
            unint64_t v19 = v9[v8];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v13)
              {
LABEL_36:
                uint64_t v28 = 1LL << *(_BYTE *)(v3 + 32);
                if (v28 > 63) {
                  bzero((void *)(v3 + 56), ((unint64_t)(v28 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *unint64_t v9 = -1LL << v28;
                }
                unint64_t v2 = v29;
                *(void *)(v3 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v9[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v8 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v8 >= v13) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v9[v8];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v8 = v20;
            }
          }
        }

uint64_t sub_1000C84A4(uint64_t a1, uint64_t *a2)
{
  Swift::Int v3 = v2;
  uint64_t v4 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(a2);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 1LL);
  uint64_t v7 = v6;
  if (*(void *)(v4 + 16))
  {
    uint64_t v8 = 1LL << *(_BYTE *)(v4 + 32);
    uint64_t v36 = (void *)(v4 + 56);
    if (v8 < 64) {
      uint64_t v9 = ~(-1LL << v8);
    }
    else {
      uint64_t v9 = -1LL;
    }
    unint64_t v10 = v9 & *(void *)(v4 + 56);
    uint64_t v34 = v3;
    int64_t v35 = (unint64_t)(v8 + 63) >> 6;
    uint64_t v11 = v6 + 56;
    uint64_t result = swift_retain();
    int64_t v13 = 0LL;
    while (1)
    {
      if (v10)
      {
        unint64_t v16 = __clz(__rbit64(v10));
        v10 &= v10 - 1;
        unint64_t v17 = v16 | (v13 << 6);
      }

      else
      {
        int64_t v18 = v13 + 1;
        if (__OFADD__(v13, 1LL))
        {
LABEL_41:
          __break(1u);
LABEL_42:
          __break(1u);
          return result;
        }

        if (v18 >= v35) {
          goto LABEL_36;
        }
        unint64_t v19 = v36[v18];
        ++v13;
        if (!v19)
        {
          int64_t v13 = v18 + 1;
          if (v18 + 1 >= v35) {
            goto LABEL_36;
          }
          unint64_t v19 = v36[v13];
          if (!v19)
          {
            int64_t v13 = v18 + 2;
            if (v18 + 2 >= v35) {
              goto LABEL_36;
            }
            unint64_t v19 = v36[v13];
            if (!v19)
            {
              int64_t v20 = v18 + 3;
              if (v20 >= v35)
              {
LABEL_36:
                swift_release(v4);
                Swift::Int v3 = v34;
                uint64_t v33 = 1LL << *(_BYTE *)(v4 + 32);
                if (v33 > 63) {
                  bzero(v36, ((unint64_t)(v33 + 63) >> 3) & 0x1FFFFFFFFFFFFFF8LL);
                }
                else {
                  *uint64_t v36 = -1LL << v33;
                }
                *(void *)(v4 + 16) = 0LL;
                break;
              }

              unint64_t v19 = v36[v20];
              if (!v19)
              {
                while (1)
                {
                  int64_t v13 = v20 + 1;
                  if (__OFADD__(v20, 1LL)) {
                    goto LABEL_42;
                  }
                  if (v13 >= v35) {
                    goto LABEL_36;
                  }
                  unint64_t v19 = v36[v13];
                  ++v20;
                  if (v19) {
                    goto LABEL_26;
                  }
                }
              }

              int64_t v13 = v20;
            }
          }
        }

unint64_t sub_1000C87D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 40);
  uint64_t v5 = type metadata accessor for AnyCancellable(0LL);
  uint64_t v6 = sub_100007864( (unint64_t *)&unk_1009AC370,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
  uint64_t v7 = dispatch thunk of Hashable._rawHashValue(seed:)(v4, v5, v6);
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v7 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_1000C889C(uint64_t a1, uint64_t a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = sub_100004AEC(a3);
  uint64_t v10 = sub_1000372EC(a4, a3, (uint64_t)&protocol conformance descriptor for XPCSession<A>);
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)(v8, v9, v10);
  unint64_t result = _HashTable.nextHole(atOrAfter:)( v11 & ~(-1LL << *(_BYTE *)(a2 + 32)),  a2 + 56,  ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_1000C8968(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a1 + 32);
  NSObject.hash(into:)(v7);

  Swift::Int v5 = Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v5 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_1000C8A14(uint64_t a1, uint64_t a2)
{
  id v4 = *(id *)(a1 + 40);
  NSObject.hash(into:)(v7);

  Swift::Int v5 = Hasher._finalize()();
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v5 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

unint64_t sub_1000C8AC0(uint64_t a1, uint64_t a2)
{
  Swift::Int v4 = NSObject._rawHashValue(seed:)(*(void *)(a2 + 40));
  unint64_t result = _HashTable.nextHole(atOrAfter:)(v4 & ~(-1LL << *(_BYTE *)(a2 + 32)), a2 + 56, ~(-1LL << *(_BYTE *)(a2 + 32)));
  *(void *)(a2 + 56 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
  *(void *)(*(void *)(a2 + 48) + 8 * result) = a1;
  ++*(void *)(a2 + 16);
  return result;
}

Swift::Int sub_1000C8B40(Swift::Int result, unint64_t a2, char a3)
{
  char v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    uint64_t v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      sub_1000C34E8(v8);
    }

    else
    {
      if (v7 > v6)
      {
        unint64_t result = (Swift::Int)sub_1000CED40((uint64_t *)&unk_1009A0D00);
        goto LABEL_10;
      }

      sub_1000CF5F0(v8);
    }

    uint64_t v9 = *v3;
    Hasher.init(_seed:)(v16, *(void *)(*v3 + 40));
    sub_100309F1C((uint64_t)v16, v5);
    unint64_t result = Hasher._finalize()();
    a2 = result & ~(-1LL << *(_BYTE *)(v9 + 32));
    if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0) {
      __asm { BR              X9 }
    }
  }

uint64_t sub_1000C8FCC(uint64_t result, uint64_t a2, unint64_t a3, char a4)
{
  char v5 = v4;
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_1000C38E4(v11);
  }

  else
  {
    if (v10 > v9)
    {
      unint64_t result = (uint64_t)sub_1000CDB10();
      goto LABEL_22;
    }

    sub_1000CF9B8(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v28, *(void *)(*v4 + 40));
  String.hash(into:)(v28, v8, a2);
  unint64_t result = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = result & ~v13;
  uint64_t v14 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v15 = *(void *)(v12 + 48);
    unint64_t v16 = (void *)(v15 + 16 * a3);
    uint64_t v17 = v16[1];
    BOOL v18 = *v16 == v8 && v17 == a2;
    if (v18 || (unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v16, v17, v8, a2, 0LL), (result & 1) != 0))
    {
LABEL_21:
      unint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
      __break(1u);
    }

    else
    {
      uint64_t v19 = ~v13;
      while (1)
      {
        a3 = (a3 + 1) & v19;
        if (((*(void *)(v14 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        int64_t v20 = (void *)(v15 + 16 * a3);
        uint64_t v21 = v20[1];
        if (*v20 != v8 || v21 != a2)
        {
          unint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(*v20, v21, v8, a2, 0LL);
          if ((result & 1) == 0) {
            continue;
          }
        }

        goto LABEL_21;
      }
    }
  }

uint64_t sub_1000C9164(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v30 = a1;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  char v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000C5BF0( v12,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  &qword_1009A0A48,  &qword_1009A58F0,  (uint64_t)&protocol conformance descriptor for UUID);
  }

  else
  {
    if (v11 > v10)
    {
      sub_1000CE5AC((uint64_t (*)(void))&type metadata accessor for UUID, &qword_1009A0A48);
      goto LABEL_12;
    }

    sub_1000D1A70( v12,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  &qword_1009A0A48,  &qword_1009A58F0,  (uint64_t)&protocol conformance descriptor for UUID);
  }

  uint64_t v13 = *v3;
  uint64_t v14 = *(void *)(*v3 + 40);
  uint64_t v15 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  uint64_t v17 = -1LL << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v18 = ~v17;
    uint64_t v19 = *(void *)(v7 + 72);
    int64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(void *)(v13 + 48) + v19 * a2, v6);
      uint64_t v21 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v18;
    }

    while (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

uint64_t sub_1000C93B8(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000C3BC0(v8);
  }

  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_1000CED40((uint64_t *)&unk_1009A0A50);
      goto LABEL_14;
    }

    sub_1000CFC64(v8);
  }

  uint64_t v9 = *v3;
  uint64_t result = static Hasher._hash(seed:bytes:count:)(*(void *)(*v3 + 40), v5, 1LL);
  uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v9 + 48);
    if (*(unsigned __int8 *)(v11 + a2) == (_DWORD)v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt8);
      __break(1u);
    }

    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
      }
    }
  }

LABEL_14:
  uint64_t v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(_BYTE *)(*(void *)(v13 + 48) + a2) = v5;
  uint64_t v14 = *(void *)(v13 + 16);
  BOOL v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v16;
  }
  return result;
}

  uint64_t v16 = *v5;
  *(void *)(*v5 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v16 + 48) + 8 * a2) = v8;
  uint64_t v17 = *(void *)(v16 + 16);
  uint64_t v18 = __OFADD__(v17, 1LL);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
  return result;
}

  uint64_t v24 = *v9;
  *(void *)(*v9 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v24 + 48) + 8 * a2) = a1;
  uint64_t v25 = *(void *)(v24 + 16);
  uint64_t v26 = __OFADD__(v25, 1LL);
  BOOL v27 = v25 + 1;
  if (v26) {
    __break(1u);
  }
  else {
    *(void *)(v24 + 16) = v27;
  }
}

  uint64_t v14 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(_BYTE *)(*(void *)(v14 + 48) + a2) = v5;
  BOOL v15 = *(void *)(v14 + 16);
  uint64_t v16 = __OFADD__(v15, 1LL);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    *(void *)(v14 + 16) = v17;
  }
  return result;
}

  uint64_t v16 = *v5;
  *(void *)(*v5 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(_BYTE *)(*(void *)(v16 + 48) + a2) = v8;
  uint64_t v17 = *(void *)(v16 + 16);
  uint64_t v18 = __OFADD__(v17, 1LL);
  uint64_t v19 = v17 + 1;
  if (v18) {
    __break(1u);
  }
  else {
    *(void *)(v16 + 16) = v19;
  }
  return result;
}

  uint64_t v18 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(void *)(*(void *)(v18 + 48) + 8 * a2) = a1;
  uint64_t v19 = *(void *)(v18 + 16);
  int64_t v20 = __OFADD__(v19, 1LL);
  uint64_t v21 = v19 + 1;
  if (v20) {
    __break(1u);
  }
  else {
    *(void *)(v18 + 16) = v21;
  }
}

  uint64_t v14 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(_BYTE *)(*(void *)(v14 + 48) + a2) = v5;
  BOOL v15 = *(void *)(v14 + 16);
  uint64_t v16 = __OFADD__(v15, 1LL);
  uint64_t v17 = v15 + 1;
  if (v16) {
    __break(1u);
  }
  else {
    *(void *)(v14 + 16) = v17;
  }
  return result;
}

  uint64_t v21 = *v27;
  *(void *)(*v27 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t result = sub_10002218C( a1,  *(void *)(v21 + 48) + *(void *)(v28 + 72) * a2,  type metadata accessor for BeaconIdentifier);
  uint64_t v23 = *(void *)(v21 + 16);
  uint64_t v24 = __OFADD__(v23, 1LL);
  uint64_t v25 = v23 + 1;
  if (v24) {
    __break(1u);
  }
  else {
    *(void *)(v21 + 16) = v25;
  }
  return result;
}

  uint64_t v13 = *v3;
  *(void *)(*v3 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  *(_DWORD *)(*(void *)(v13 + 48) + 4 * a2) = v5;
  uint64_t v14 = *(void *)(v13 + 16);
  BOOL v15 = __OFADD__(v14, 1LL);
  uint64_t v16 = v14 + 1;
  if (v15) {
    __break(1u);
  }
  else {
    *(void *)(v13 + 16) = v16;
  }
  return result;
}

      DirectorySequence.next()(v51);
    }
  }

  BOOL v31 = sub_100015794((uint64_t)v22, (uint64_t *)&unk_10099D720);
  uint64_t v32 = static os_log_type_t.error.getter(v31);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  os_log(_:dso:log:_:_:)( v32,  &_mh_execute_header,  qword_100A2B018,  "Unable to create theshold date!",  31LL,  2LL,  _swiftEmptyArrayStorage);
}

    sub_10050BA28(&v206);
    uint64_t v64 = v63;
    int v65 = *(void *)&v195[v199];
    uint64_t v66 = *(int *)(v194 + 48);
    int v67 = *(void (**)(char *))(v51 + 16);
    v67(v25);
    *(void *)&v25[v66] = v65;
    uint64_t v68 = *(void *)(v65 + 16);
    if (v68)
    {
      uint64_t v69 = v65 + ((*(unsigned __int8 *)(v169 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v169 + 80));
      uint64_t v70 = *(void *)(v169 + 72);
      swift_bridgeObjectRetain_n(v65, 2LL);
      do
      {
        sub_1001954D4(v69, (uint64_t)v25);
        v69 += v70;
        --v68;
      }

      while (v68);
      swift_bridgeObjectRelease();
    }

    else
    {
      swift_bridgeObjectRetain(v65);
    }

    sub_100015794((uint64_t)v25, &qword_1009A48D8);
    uint64_t v71 = *(int *)(v194 + 48);
    uint64_t v72 = v196;
    uint64_t v73 = v195;
    uint64_t v74 = v200;
    ((void (*)(char *, char *, uint64_t))v67)(v196, v195, v200);
    uint64_t v75 = *(void *)&v73[v199];
    *(void *)&v72[v71] = v75;
    swift_bridgeObjectRetain(v75);
    v77 = sub_1004E7AD8(v76);
    swift_bridgeObjectRelease();
    v78 = v207;
    v79 = v208;
    sub_100012ED8(&v206, v207);
    v80 = sub_1006D3204(v78, v79);
    v81 = sub_1006D4564((uint64_t)v77, v80, v64);
    swift_bridgeObjectRelease();
    v82 = *(void (**)(char *, uint64_t))(v51 + 8);
    v82(v72, v74);
    v177 = (uint64_t *)v82;
    if (v81)
    {
      if (qword_10099B188 != -1) {
        swift_once(&qword_10099B188, sub_100189D08);
      }
      v83 = type metadata accessor for Logger(0LL);
      sub_10000A720(v83, (uint64_t)qword_100A2A2B0);
      v84 = *(int *)(v194 + 48);
      v85 = (uint64_t)v178;
      v86 = v195;
      v192 = (__int128 *)v67;
      ((void (*)(char *, char *, uint64_t))v67)(v178, v195, v74);
      v87 = *(void *)&v86[v199];
      *(void *)(v85 + v84) = v87;
      v88 = v188;
      sub_10001581C(v85, v188, &qword_1009A48D8);
      v89 = v85;
      v90 = v187;
      sub_100015750(v89, v187, &qword_1009A48D8);
      sub_10001DC4C((uint64_t)v172, v193, type metadata accessor for BeaconEstimatedLocation);
      v91 = v81;
      swift_bridgeObjectRetain(v87);
      v93 = (os_log_s *)Logger.logObject.getter(v92);
      v94 = static os_log_type_t.default.getter(v93);
      LODWORD(v178) = v94;
      if (os_log_type_enabled(v93, v94))
      {
        v95 = swift_slowAlloc(82LL, -1LL);
        v176 = (char *)swift_slowAlloc(96LL, -1LL);
        *(void *)&v203 = v176;
        *(_DWORD *)v95 = 141559811;
        *(void *)&v201 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, (char *)&v201 + 8, v95 + 4, v95 + 12);
        *(_WORD *)(v95 + 12) = 2081;
        v96 = v196;
        ((void (*)(char *, uint64_t, uint64_t))v192)(v196, v88, v200);
        v97 = v186;
        (*(void (**)(char *, char *, uint64_t))(v197 + 32))(v186, v96, v200);
        v98 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        v99 = dispatch thunk of CustomStringConvertible.description.getter(v200, v98);
        v175 = v93;
        v101 = v100;
        ((void (*)(char *, uint64_t))v177)(v97, v200);
        *(void *)&v201 = sub_1003F11D4(v99, v101, (uint64_t *)&v203);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, (char *)&v201 + 8, v95 + 14, v95 + 22);
        swift_bridgeObjectRelease();
        sub_100015794(v187, &qword_1009A48D8);
        sub_100015794(v188, &qword_1009A48D8);
        *(_WORD *)(v95 + 22) = 2160;
        *(void *)&v201 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, (char *)&v201 + 8, v95 + 24, v95 + 32);
        *(_WORD *)(v95 + 32) = 2081;
        v102 = v193;
        v103 = dispatch thunk of CustomStringConvertible.description.getter(v200, v98);
        *(void *)&v201 = sub_1003F11D4(v103, v104, (uint64_t *)&v203);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, (char *)&v201 + 8, v95 + 34, v95 + 42);
        swift_bridgeObjectRelease();
        sub_100018C68(v102, type metadata accessor for BeaconEstimatedLocation);
        *(_WORD *)(v95 + 42) = 2049;
        [v91 coordinate];
        *(void *)&v201 = v105;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, (char *)&v201 + 8, v95 + 44, v95 + 52);

        *(_WORD *)(v95 + 52) = 2049;
        [v91 coordinate];
        *(void *)&v201 = v106;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, (char *)&v201 + 8, v95 + 54, v95 + 62);

        *(_WORD *)(v95 + 62) = 2050;
        [v91 horizontalAccuracy];
        *(void *)&v201 = v107;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, (char *)&v201 + 8, v95 + 64, v95 + 72);

        *(_WORD *)(v95 + 72) = 2082;
        v108 = [v91 timestamp];
        v109 = v189;
        static Date._unconditionallyBridgeFromObjectiveC(_:)(v108);

        v110 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
        v111 = v191;
        v112 = dispatch thunk of CustomStringConvertible.description.getter(v191, v110);
        v114 = v113;
        (*(void (**)(char *, uint64_t))(v190 + 8))(v109, v111);
        *(void *)&v201 = sub_1003F11D4(v112, v114, (uint64_t *)&v203);
        uint64_t v74 = v200;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, (char *)&v201 + 8, v95 + 74, v95 + 82);

        swift_bridgeObjectRelease();
        v115 = v175;
        _os_log_impl( (void *)&_mh_execute_header,  v175,  (os_log_type_t)v178,  "Filtered cached latest location returned to client for beacon %{private,mask.hash}s, locationUUID: %{private,m ask.hash}s, lat: %{private}f, long: %{private}f, accuracy: %{public}f, timestamp: %{public}s.",  (uint8_t *)v95,  0x52u);
        v116 = v176;
        swift_arrayDestroy(v176, 3LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v116, -1LL, -1LL);
        swift_slowDealloc(v95, -1LL, -1LL);
      }

      else
      {
        sub_100015794(v90, &qword_1009A48D8);
        sub_100015794(v88, &qword_1009A48D8);
        sub_100018C68(v193, type metadata accessor for BeaconEstimatedLocation);
      }

      v138 = v185;
      __chkstk_darwin(v117);
      v139 = v195;
      *(&v168 - 2) = v140;
      *(&v168 - 1) = (uint64_t)v139;
      v141 = (uint64_t)v179;
      QueueSynchronizer.conditionalSync<A>(_:)(sub_1001B1AE8);
      v142 = v181;
      sub_100015750(v141, v181, &qword_10099D8A0);
      v143 = *(int *)(v194 + 48);
      v144 = (uint64_t)v182;
      ((void (*)(char *, char *, uint64_t))v192)(v182, v139, v74);
      v145 = *(void *)&v139[v199];
      *(void *)(v144 + v143) = v145;
      if (v170(v142, 1LL, v74) == 1)
      {
        v146 = v196;
        v147 = (char *)v192;
        ((void (*)(char *, uint64_t, uint64_t))v192)(v196, v144, v74);
        swift_bridgeObjectRetain(v145);
        sub_100015794(v144, &qword_1009A48D8);
        (*(void (**)(char *, char *, uint64_t))(v197 + 32))(v138, v146, v74);
        sub_100015794(v142, &qword_10099D8A0);
        v148 = (__int128 *)v147;
        v149 = v138;
      }

      else
      {
        swift_bridgeObjectRetain(v145);
        sub_100015794(v144, &qword_1009A48D8);
        v149 = v138;
        (*(void (**)(char *, uint64_t, uint64_t))(v197 + 32))(v138, v142, v74);
        v148 = v192;
      }

      v150 = (uint64_t)v183;
      ((void (*)(char *, char *, uint64_t))v148)(v183, v149, v74);
      v151 = [v91 timestamp];
      v152 = v189;
      static Date._unconditionallyBridgeFromObjectiveC(_:)(v151);

      [v91 coordinate];
      v154 = v153;
      [v91 coordinate];
      v156 = v155;
      [v91 horizontalAccuracy];
      v158 = v157;
      v159 = (void *)sub_1006D4870(v172[*(int *)(v171 + 44)]);
      v160 = objc_allocWithZone(&OBJC_CLASS___SPBeaconLocation);
      v161 = v159;
      Class isa = Date._bridgeToObjectiveC()().super.isa;
      v163 = [v160 initWithTimestamp:isa latitude:v161 longitude:v154 horizontalAccuracy:v156 source:v158];

      (*(void (**)(char *, uint64_t))(v190 + 8))(v152, v191);
      if (v163)
      {
        v164 = v184;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v184);
        *(void *)&v203 = *v164;
        *v164 = 0x8000000000000000LL;
        sub_10005CC34((uint64_t)v163, v150, isUniquelyReferenced_nonNull_native);
        *v164 = v203;
        swift_bridgeObjectRelease();
        v166 = (void (*)(char *, uint64_t))v177;
        ((void (*)(uint64_t, uint64_t))v177)(v150, v74);
      }

      else
      {
        v167 = sub_100048150(v150);
        v166 = (void (*)(char *, uint64_t))v177;
        ((void (*)(uint64_t, uint64_t))v177)(v150, v74);

        v91 = (id)v167;
      }

      v166(v149, v74);
    }

    else
    {
      if (qword_10099B188 != -1) {
        swift_once(&qword_10099B188, sub_100189D08);
      }
      v118 = type metadata accessor for Logger(0LL);
      sub_10000A720(v118, (uint64_t)qword_100A2A2B0);
      v119 = *(int *)(v194 + 48);
      v120 = (uint64_t)v173;
      v121 = v195;
      ((void (*)(char *, char *, uint64_t))v67)(v173, v195, v74);
      v122 = *(void *)&v121[v199];
      *(void *)(v120 + v119) = v122;
      v123 = v175;
      sub_10001581C(v120, (uint64_t)v175, &qword_1009A48D8);
      v124 = v120;
      v125 = v174;
      sub_100015750(v124, v174, &qword_1009A48D8);
      swift_bridgeObjectRetain(v122);
      v127 = (os_log_s *)Logger.logObject.getter(v126);
      v128 = static os_log_type_t.error.getter(v127);
      v129 = v128;
      if (os_log_type_enabled(v127, v128))
      {
        v130 = swift_slowAlloc(22LL, -1LL);
        v199 = swift_slowAlloc(32LL, -1LL);
        *(void *)&v203 = v199;
        *(_DWORD *)v130 = 141558275;
        *(void *)&v201 = 1752392040LL;
        v195 = (char *)&v201 + 8;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, (char *)&v201 + 8, v130 + 4, v130 + 12);
        *(_WORD *)(v130 + 12) = 2081;
        v194 = v130 + 14;
        LODWORD(v198) = v129;
        v131 = v196;
        ((void (*)(char *, os_log_t, uint64_t))v67)(v196, v123, v74);
        v132 = v186;
        (*(void (**)(char *, char *, uint64_t))(v51 + 32))(v186, v131, v74);
        v133 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        v134 = dispatch thunk of CustomStringConvertible.description.getter(v74, v133);
        v136 = v135;
        ((void (*)(char *, uint64_t))v177)(v132, v74);
        *(void *)&v201 = sub_1003F11D4(v134, v136, (uint64_t *)&v203);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v201, v195, v194, v130 + 22);
        swift_bridgeObjectRelease();
        sub_100015794(v125, &qword_1009A48D8);
        sub_100015794((uint64_t)v123, &qword_1009A48D8);
        _os_log_impl( (void *)&_mh_execute_header,  v127,  (os_log_type_t)v198,  "Could not produce filtered location for beacon %{private,mask.hash}s.",  (uint8_t *)v130,  0x16u);
        v137 = v199;
        swift_arrayDestroy(v199, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v137, -1LL, -1LL);
        swift_slowDealloc(v130, -1LL, -1LL);
      }

      else
      {

        sub_100015794(v125, &qword_1009A48D8);
        sub_100015794((uint64_t)v123, &qword_1009A48D8);
      }
    }

    sub_100018C68((uint64_t)v172, type metadata accessor for BeaconEstimatedLocation);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v206);
  }

  sub_100015794((uint64_t)v40, &qword_1009A48E0);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v206);
}

        __break(1u);
        goto LABEL_15;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_14;
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v17);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v1;
}

              BOOL v27 = v29;
LABEL_11:
              char v22 = (v28 - 1) & v28;
              uint64_t v23 = __clz(__rbit64(v28)) + (v27 << 6);
              int v60 = v27;
              goto LABEL_7;
            }
          }
        }
      }
    }

  sub_100018C68((uint64_t)v7, type metadata accessor for ShareRecord);
  return v17;
}

            uint64_t v26 = v28;
            goto LABEL_21;
          }

            uint64_t v26 = v28;
            goto LABEL_21;
          }

    if (__OFADD__(v20++, 1LL))
    {
      __break(1u);
LABEL_46:
      __break(1u);
LABEL_47:
      __break(1u);
      goto LABEL_48;
    }

    if (v20 >= v25) {
      goto LABEL_41;
    }
    BOOL v31 = *(void *)(v21 + 8 * v20);
    if (!v31) {
      break;
    }
LABEL_24:
    uint64_t v24 = (v31 - 1) & v31;
  }

  uint64_t v32 = v20 + 1;
  if (v20 + 1 >= v25) {
    goto LABEL_41;
  }
  BOOL v31 = *(void *)(v21 + 8 * v32);
  if (v31) {
    goto LABEL_23;
  }
  uint64_t v32 = v20 + 2;
  if (v20 + 2 >= v25) {
    goto LABEL_41;
  }
  BOOL v31 = *(void *)(v21 + 8 * v32);
  if (v31)
  {
LABEL_23:
    int64_t v20 = v32;
    goto LABEL_24;
  }

  uint64_t v32 = v20 + 3;
  if (v20 + 3 < v25)
  {
    BOOL v31 = *(void *)(v21 + 8 * v32);
    if (!v31)
    {
      while (1)
      {
        int64_t v20 = v32 + 1;
        if (__OFADD__(v32, 1LL)) {
          goto LABEL_46;
        }
        if (v20 >= v25) {
          goto LABEL_41;
        }
        BOOL v31 = *(void *)(v21 + 8 * v20);
        ++v32;
        if (v31) {
          goto LABEL_24;
        }
      }
    }

    goto LABEL_23;
  }

  uint64_t v71 = (uint64_t)v130;
  uint64_t v72 = (uint64_t *)((char *)v129 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators);
  swift_beginAccess((char *)v129 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators, v135, 0LL, 0LL);
  uint64_t v73 = *v72;
  if (!*(void *)(v73 + 16))
  {
    v83 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v83 - 8) + 56LL))(v71, 1LL, 1LL, v83);
LABEL_20:
    sub_100015794(v71, &qword_10099E488);
    if (v3[102] != (_UNKNOWN *)-1LL) {
      swift_once(&qword_10099B330, sub_100374304);
    }
    v85 = type metadata accessor for Logger(0LL);
    sub_10000A720(v85, (uint64_t)qword_100A2A748);
    v86 = v40(v132, v32, v27);
    v87 = (os_log_s *)Logger.logObject.getter(v86);
    v88 = static os_log_type_t.error.getter(v87);
    if (os_log_type_enabled(v87, v88))
    {
      v89 = swift_slowAlloc(22LL, -1LL);
      v90 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)v89 = 141558275;
      v133 = 1752392040LL;
      v134 = v90;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v89 + 4, v89 + 12);
      *(_WORD *)(v89 + 12) = 2081;
      v91 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      v92 = v132;
      v93 = dispatch thunk of CustomStringConvertible.description.getter(v27, v91);
      v133 = sub_1003F11D4(v93, v94, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v89 + 14, v89 + 22);
      swift_bridgeObjectRelease();
      v128(v92, v27);
      v95 = "didCompletePlayingSoundOnDevice called with unknown device %{private,mask.hash}s";
LABEL_24:
      _os_log_impl((void *)&_mh_execute_header, v87, v88, v95, (uint8_t *)v89, 0x16u);
      swift_arrayDestroy(v90, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v90, -1LL, -1LL);
      swift_slowDealloc(v89, -1LL, -1LL);
LABEL_27:

      return;
    }

    v96 = v132;
    goto LABEL_26;
  }

  swift_bridgeObjectRetain(v73);
  uint64_t v74 = sub_10030D124(v32);
  if ((v75 & 1) != 0)
  {
    v76 = v74;
    v77 = *(void *)(v73 + 56);
    v78 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
    v79 = v40;
    v80 = *(void *)(v78 - 8);
    v81 = v77 + *(void *)(v80 + 72) * v76;
    BOOL v27 = v131;
    sub_10001DC4C(v81, v71, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    v82 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v80 + 56);
    uint64_t v40 = v79;
    v82(v71, 0LL, 1LL, v78);
  }

  else
  {
    v78 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v78 - 8) + 56LL))(v71, 1LL, 1LL, v78);
  }

  v84 = v127;
  swift_bridgeObjectRelease();
  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
  v97 = v3;
  sub_100015794(v71, &qword_10099E488);
  sub_100381A9C(v32, 0, 0LL);
  v98 = v126;
  if (!v126)
  {
    if (v97[102] != (_UNKNOWN *)-1LL) {
      swift_once(&qword_10099B330, sub_100374304);
    }
    v111 = type metadata accessor for Logger(0LL);
    sub_10000A720(v111, (uint64_t)qword_100A2A748);
    v112 = v124;
    v113 = v40(v124, v32, v27);
    v87 = (os_log_s *)Logger.logObject.getter(v113);
    v88 = static os_log_type_t.default.getter(v87);
    if (os_log_type_enabled(v87, v88))
    {
      v89 = swift_slowAlloc(22LL, -1LL);
      v90 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)v89 = 141558275;
      v133 = 1752392040LL;
      v134 = v90;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v89 + 4, v89 + 12);
      *(_WORD *)(v89 + 12) = 2081;
      v114 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      v115 = dispatch thunk of CustomStringConvertible.description.getter(v27, v114);
      v133 = sub_1003F11D4(v115, v116, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v89 + 14, v89 + 22);
      swift_bridgeObjectRelease();
      v128(v112, v27);
      v95 = "didCompletePlayingSoundOnDevice %{private,mask.hash}s succeeded";
      goto LABEL_24;
    }

    v96 = v112;
LABEL_26:
    v128(v96, v27);
    goto LABEL_27;
  }

  swift_errorRetain(v126);
  if (v97[102] != (_UNKNOWN *)-1LL) {
    swift_once(&qword_10099B330, sub_100374304);
  }
  v99 = type metadata accessor for Logger(0LL);
  sub_10000A720(v99, (uint64_t)qword_100A2A748);
  v40(v84, v32, v27);
  swift_errorRetain(v98);
  v100 = swift_errorRetain(v98);
  v87 = (os_log_s *)Logger.logObject.getter(v100);
  v101 = static os_log_type_t.error.getter(v87);
  if (!os_log_type_enabled(v87, v101))
  {
    swift_errorRelease(v98);
    v128(v84, v27);
    swift_errorRelease(v98);
    swift_errorRelease(v98);
    goto LABEL_27;
  }

  v102 = swift_slowAlloc(32LL, -1LL);
  v103 = swift_slowAlloc(64LL, -1LL);
  *(_DWORD *)v102 = 141558531;
  v133 = 1752392040LL;
  v134 = v103;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v102 + 4, v102 + 12);
  *(_WORD *)(v102 + 12) = 2081;
  v104 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  v105 = dispatch thunk of CustomStringConvertible.description.getter(v27, v104);
  v133 = sub_1003F11D4(v105, v106, &v134);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v102 + 14, v102 + 22);
  swift_bridgeObjectRelease();
  v128(v84, v27);
  *(_WORD *)(v102 + 22) = 2082;
  v133 = v98;
  swift_errorRetain(v98);
  v107 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  v108 = String.init<A>(describing:)(&v133, v107);
  v133 = sub_1003F11D4(v108, v109, &v134);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v133, &v134, v102 + 24, v102 + 32);
  swift_bridgeObjectRelease();
  swift_errorRelease(v98);
  swift_errorRelease(v98);
  _os_log_impl( (void *)&_mh_execute_header,  v87,  v101,  "didCompletePlayingSoundOnDevice %{private,mask.hash}s failed due to %{public}s",  (uint8_t *)v102,  0x20u);
  swift_arrayDestroy(v103, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v103, -1LL, -1LL);
  swift_slowDealloc(v102, -1LL, -1LL);

  swift_errorRelease(v98);
}

      sub_100018C68(*(void *)(v0 + 520), type metadata accessor for OwnedBeaconRecord);
      char v29 = *(void *)(v0 + 600);
      uint64_t v30 = *(void *)(v0 + 656) + 1LL;
      sub_100018C68(*(void *)(v0 + 528), type metadata accessor for OwnedBeaconRecord);
      if (v30 == v29)
      {
        swift_bridgeObjectRelease();
        goto LABEL_24;
      }

      uint64_t v23 = *(void *)(v0 + 656) + 1LL;
      uint64_t v21 = *(void *)(v0 + 648);
      LOBYTE(v20) = *(_BYTE *)(v0 + 768);
      char v22 = *(void *)(v0 + 312);
    }

    uint64_t v39 = ~v37;
    uint64_t v40 = *(void *)(v0 + 552);
    uint64_t v41 = *(void *)(v40 + 72);
    uint64_t v42 = *(void (**)(uint64_t, unint64_t, uint64_t))(v40 + 16);
    uint64_t v43 = *(void *)(v0 + 640);
    while (1)
    {
      uint64_t v44 = *(void *)(v0 + 560);
      int64_t v45 = *(void *)(v0 + 552);
      uint64_t v46 = *(void *)(v0 + 544);
      v42(v44, *(void *)(v43 + 48) + v38 * v41, v46);
      __int128 v47 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      __int128 v48 = dispatch thunk of static Equatable.== infix(_:_:)(v44, v33, v46, v47);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
      if ((v48 & 1) != 0) {
        break;
      }
      uint64_t v43 = *(void *)(v0 + 640);
      int64_t v38 = (v38 + 1) & v39;
      if (((*(void *)(v43 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v38) & 1) == 0) {
        goto LABEL_14;
      }
    }

    sub_100018C68(*(void *)(v0 + 520), type metadata accessor for OwnedBeaconRecord);
    uint64_t v49 = sub_100004AEC(&qword_1009AF850);
    *(void *)(v0 + 680) = AnalyticsEvent.__allocating_init(name:)();
    uint64_t v50 = sub_1000372EC( &qword_1009AF858,  &qword_1009AF850,  (uint64_t)&protocol conformance descriptor for AnalyticsEvent<A, B>);
    uint64_t v51 = dispatch thunk of Actor.unownedExecutor.getter(v49, v50);
    return swift_task_switch(sub_1004804D4, v51, v52);
  }

  else
  {
LABEL_24:
    uint64_t v54 = *(void *)(v0 + 632);
    swift_bridgeObjectRelease();
    uint64_t v55 = *(void *)(v54 + 16);
    *(void *)(v0 + 664) = v55;
    if (v55)
    {
      uint64_t v56 = *(void *)(v0 + 632);
      uint64_t v58 = *(void *)(v0 + 472);
      uint64_t v57 = *(void *)(v0 + 480);
      uint64_t v59 = *(void **)(v0 + 320);
      LODWORD(v60) = *(_DWORD *)(v58 + 80);
      *(_DWORD *)(v0 + 772) = v60;
      int v60 = v60;
      int v61 = (v60 + 32) & ~v60;
      *(void *)(v0 + 672) = *(void *)(v58 + 72);
      *(void *)(v0 + 720) = _swiftEmptyArrayStorage;
      *(void *)(v0 + 712) = 0LL;
      int v62 = *(void *)(v0 + 536);
      uint64_t v63 = *(void *)(v0 + 504);
      uint64_t v64 = *(void *)(v0 + 288);
      int v65 = v61 + v57;
      uint64_t v66 = v60 | 7LL;
      sub_10001DC4C(v56 + v61, v63, type metadata accessor for OwnedBeaconRecord);
      sub_10001DC4C(v63, v62, type metadata accessor for OwnedBeaconRecord);
      int v67 = swift_allocObject(&unk_10095DF38, v65, v66);
      *(void *)(v0 + 728) = v67;
      *(void *)(v67 + 16) = v64;
      *(void *)(v67 + 24) = v59;
      sub_10002218C(v62, v67 + v61, type metadata accessor for OwnedBeaconRecord);
      uint64_t v68 = async function pointer to unsafeBlocking<A>(_:)[1];
      swift_retain();
      uint64_t v69 = v59;
      uint64_t v70 = (void *)swift_task_alloc(v68);
      *(void *)(v0 + 736) = v70;
      *uint64_t v70 = v0;
      v70[1] = sub_100481084;
      return unsafeBlocking<A>(_:)(v0 + 776, sub_10049E540, v67, &type metadata for Bool);
    }

    swift_bridgeObjectRelease();
    *(void *)(v0 + 744) = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2])
    {
      uint64_t v71 = *(void *)(v0 + 328);
      if (v71 == 1)
      {
        v79 = *(void *)(v0 + 336);
        v80 = *(void *)(v0 + 344);
        v81 = *(_BYTE *)(v0 + 777);
        v82 = *(void **)(v0 + 320);
        v84 = *(void *)(v0 + 296);
        v83 = *(void *)(v0 + 304);
        *(void *)(v0 + 16) = 1LL;
        *(void *)(v0 + 24) = _swiftEmptyArrayStorage;
        *(_BYTE *)(v0 + 32) = v81;
        *(void *)(v0 + 40) = 0LL;
        *(void *)(v0 + 48) = v79;
        *(void *)(v0 + 56) = v80;
        *(void *)(v0 + 64) = v82;
        swift_bridgeObjectRetain(v80);
        v85 = v82;
        sub_100482CF4(v0 + 16, v84, v83);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        if (!v71)
        {
          uint64_t v72 = *(void **)(v0 + 320);
          uint64_t v73 = *(void *)(v0 + 288);
          uint64_t v74 = swift_allocObject(&unk_10095DF60, 32LL, 7LL);
          *(void *)(v0 + 752) = v74;
          *(void *)(v74 + 16) = v73;
          *(void *)(v74 + 24) = v72;
          uint64_t v75 = async function pointer to unsafeBlocking<A>(_:)[1];
          swift_retain();
          v76 = v72;
          v77 = (void *)swift_task_alloc(v75);
          *(void *)(v0 + 760) = v77;
          *v77 = v0;
          v77[1] = sub_100481948;
          return unsafeBlocking<A>(_:)(*(void *)(v0 + 376), sub_10049E584, v74, *(void *)(v0 + 352));
        }

        v86 = (void *)(v0 + 248);
        v87 = v0 + 256;
        swift_bridgeObjectRelease();
        if (qword_10099B4C8 != -1) {
          swift_once(&qword_10099B4C8, sub_10047B404);
        }
        v88 = type metadata accessor for Logger(0LL);
        v89 = sub_10000A720(v88, (uint64_t)qword_100A2AAA0);
        v90 = (os_log_s *)Logger.logObject.getter(v89);
        v91 = static os_log_type_t.error.getter(v90);
        if (os_log_type_enabled(v90, v91))
        {
          v92 = *(void *)(v0 + 328);
          v93 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          v94 = (void *)swift_slowAlloc(32LL, -1LL);
          v122 = v94;
          *(_DWORD *)v93 = 136315138;
          *(void *)(v0 + 264) = v92;
          v86 = (void *)(v0 + 248);
          v87 = v0 + 256;
          type metadata accessor for SPSeparationEventType(0LL);
          v96 = String.init<A>(describing:)(v0 + 264, v95);
          *(void *)(v0 + 272) = sub_1003F11D4(v96, v97, (uint64_t *)&v122);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v93 + 4, v93 + 12);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v90, v91, "Received unknown eventType: %s", v93, 0xCu);
          swift_arrayDestroy(v94, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v94, -1LL, -1LL);
          swift_slowDealloc(v93, -1LL, -1LL);
        }

        v98 = *(void (**)(void *, uint64_t))(v0 + 296);
        type metadata accessor for SPSeparationMonitoringError(0LL);
        v100 = v99;
        *(void *)(v0 + 256) = 12LL;
        v101 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
        v102 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
        _BridgedStoredNSError.init(_:userInfo:)(v86, v87, v101, v100, v102);
        v103 = *(void **)(v0 + 248);
        v98(v103, 1LL);
        swift_release();
      }
    }

    else
    {
      v78 = *(void (**)(void, void))(v0 + 296);
      swift_bridgeObjectRelease();
      v78(0LL, 0LL);
      swift_release();
    }

    v104 = *(void *)(v0 + 568);
    v105 = *(void *)(v0 + 560);
    v106 = *(void *)(v0 + 536);
    v107 = *(void *)(v0 + 528);
    v108 = *(void *)(v0 + 520);
    v109 = *(void *)(v0 + 504);
    v110 = *(void *)(v0 + 512);
    v112 = *(void *)(v0 + 488);
    v111 = *(void *)(v0 + 496);
    v113 = *(void *)(v0 + 456);
    v114 = *(void *)(v0 + 440);
    v115 = *(void *)(v0 + 416);
    v116 = *(void *)(v0 + 408);
    v117 = *(void *)(v0 + 400);
    v118 = *(void *)(v0 + 376);
    v119 = *(void *)(v0 + 368);
    v121 = *(void *)(v0 + 360);
    swift_task_dealloc(*(void *)(v0 + 576));
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v110);
    swift_task_dealloc(v109);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    swift_task_dealloc(v117);
    swift_task_dealloc(v118);
    swift_task_dealloc(v119);
    swift_task_dealloc(v121);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

      sub_100018C68(*(void *)(v0 + 520), type metadata accessor for OwnedBeaconRecord);
      char v29 = *(void *)(v0 + 600);
      uint64_t v30 = *(void *)(v0 + 656) + 1LL;
      sub_100018C68(*(void *)(v0 + 528), type metadata accessor for OwnedBeaconRecord);
      if (v30 == v29)
      {
        swift_bridgeObjectRelease();
        goto LABEL_24;
      }

      uint64_t v23 = *(void *)(v0 + 656) + 1LL;
      uint64_t v21 = *(void *)(v0 + 648);
      LOBYTE(v20) = *(_BYTE *)(v0 + 768);
      char v22 = *(void *)(v0 + 312);
    }

    uint64_t v39 = ~v37;
    uint64_t v40 = *(void *)(v0 + 552);
    uint64_t v41 = *(void *)(v40 + 72);
    uint64_t v42 = *(void (**)(uint64_t, unint64_t, uint64_t))(v40 + 16);
    uint64_t v43 = *(void *)(v0 + 640);
    while (1)
    {
      uint64_t v44 = *(void *)(v0 + 560);
      int64_t v45 = *(void *)(v0 + 552);
      uint64_t v46 = *(void *)(v0 + 544);
      v42(v44, *(void *)(v43 + 48) + v38 * v41, v46);
      __int128 v47 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      __int128 v48 = dispatch thunk of static Equatable.== infix(_:_:)(v44, v33, v46, v47);
      (*(void (**)(uint64_t, uint64_t))(v45 + 8))(v44, v46);
      if ((v48 & 1) != 0) {
        break;
      }
      uint64_t v43 = *(void *)(v0 + 640);
      int64_t v38 = (v38 + 1) & v39;
      if (((*(void *)(v43 + ((v38 >> 3) & 0xFFFFFFFFFFFFF8LL) + 56) >> v38) & 1) == 0) {
        goto LABEL_14;
      }
    }

    sub_100018C68(*(void *)(v0 + 520), type metadata accessor for OwnedBeaconRecord);
    uint64_t v49 = sub_100004AEC(&qword_1009AF850);
    *(void *)(v0 + 680) = AnalyticsEvent.__allocating_init(name:)();
    uint64_t v50 = sub_1000372EC( &qword_1009AF858,  &qword_1009AF850,  (uint64_t)&protocol conformance descriptor for AnalyticsEvent<A, B>);
    uint64_t v51 = dispatch thunk of Actor.unownedExecutor.getter(v49, v50);
    return swift_task_switch(sub_1004804D4, v51, v52);
  }

  else
  {
LABEL_24:
    uint64_t v54 = *(void *)(v0 + 632);
    swift_bridgeObjectRelease();
    uint64_t v55 = *(void *)(v54 + 16);
    *(void *)(v0 + 664) = v55;
    if (v55)
    {
      uint64_t v56 = *(void *)(v0 + 632);
      uint64_t v58 = *(void *)(v0 + 472);
      uint64_t v57 = *(void *)(v0 + 480);
      uint64_t v59 = *(void **)(v0 + 320);
      LODWORD(v60) = *(_DWORD *)(v58 + 80);
      *(_DWORD *)(v0 + 772) = v60;
      int v60 = v60;
      int v61 = (v60 + 32) & ~v60;
      *(void *)(v0 + 672) = *(void *)(v58 + 72);
      *(void *)(v0 + 720) = _swiftEmptyArrayStorage;
      *(void *)(v0 + 712) = 0LL;
      int v62 = *(void *)(v0 + 536);
      uint64_t v63 = *(void *)(v0 + 504);
      uint64_t v64 = *(void *)(v0 + 288);
      int v65 = v61 + v57;
      uint64_t v66 = v60 | 7LL;
      sub_10001DC4C(v56 + v61, v63, type metadata accessor for OwnedBeaconRecord);
      sub_10001DC4C(v63, v62, type metadata accessor for OwnedBeaconRecord);
      int v67 = swift_allocObject(&unk_10095DF38, v65, v66);
      *(void *)(v0 + 728) = v67;
      *(void *)(v67 + 16) = v64;
      *(void *)(v67 + 24) = v59;
      sub_10002218C(v62, v67 + v61, type metadata accessor for OwnedBeaconRecord);
      uint64_t v68 = async function pointer to unsafeBlocking<A>(_:)[1];
      swift_retain();
      uint64_t v69 = v59;
      uint64_t v70 = (void *)swift_task_alloc(v68);
      *(void *)(v0 + 736) = v70;
      *uint64_t v70 = v0;
      v70[1] = sub_100481084;
      return unsafeBlocking<A>(_:)(v0 + 776, sub_10049E540, v67, &type metadata for Bool);
    }

    swift_bridgeObjectRelease();
    *(void *)(v0 + 744) = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2])
    {
      uint64_t v71 = *(void *)(v0 + 328);
      if (v71 == 1)
      {
        v79 = *(void *)(v0 + 336);
        v80 = *(void *)(v0 + 344);
        v81 = *(_BYTE *)(v0 + 777);
        v82 = *(void **)(v0 + 320);
        v84 = *(void *)(v0 + 296);
        v83 = *(void *)(v0 + 304);
        *(void *)(v0 + 16) = 1LL;
        *(void *)(v0 + 24) = _swiftEmptyArrayStorage;
        *(_BYTE *)(v0 + 32) = v81;
        *(void *)(v0 + 40) = 0LL;
        *(void *)(v0 + 48) = v79;
        *(void *)(v0 + 56) = v80;
        *(void *)(v0 + 64) = v82;
        swift_bridgeObjectRetain(v80);
        v85 = v82;
        sub_100482CF4(v0 + 16, v84, v83);
        swift_release();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      else
      {
        if (!v71)
        {
          uint64_t v72 = *(void **)(v0 + 320);
          uint64_t v73 = *(void *)(v0 + 288);
          uint64_t v74 = swift_allocObject(&unk_10095DF60, 32LL, 7LL);
          *(void *)(v0 + 752) = v74;
          *(void *)(v74 + 16) = v73;
          *(void *)(v74 + 24) = v72;
          uint64_t v75 = async function pointer to unsafeBlocking<A>(_:)[1];
          swift_retain();
          v76 = v72;
          v77 = (void *)swift_task_alloc(v75);
          *(void *)(v0 + 760) = v77;
          *v77 = v0;
          v77[1] = sub_100481948;
          return unsafeBlocking<A>(_:)(*(void *)(v0 + 376), sub_10049E584, v74, *(void *)(v0 + 352));
        }

        v86 = (void *)(v0 + 248);
        v87 = v0 + 256;
        swift_bridgeObjectRelease();
        if (qword_10099B4C8 != -1) {
          swift_once(&qword_10099B4C8, sub_10047B404);
        }
        v88 = type metadata accessor for Logger(0LL);
        v89 = sub_10000A720(v88, (uint64_t)qword_100A2AAA0);
        v90 = (os_log_s *)Logger.logObject.getter(v89);
        v91 = static os_log_type_t.error.getter(v90);
        if (os_log_type_enabled(v90, v91))
        {
          v92 = *(void *)(v0 + 328);
          v93 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          v94 = (void *)swift_slowAlloc(32LL, -1LL);
          v122 = v94;
          *(_DWORD *)v93 = 136315138;
          *(void *)(v0 + 264) = v92;
          v86 = (void *)(v0 + 248);
          v87 = v0 + 256;
          type metadata accessor for SPSeparationEventType(0LL);
          v96 = String.init<A>(describing:)(v0 + 264, v95);
          *(void *)(v0 + 272) = sub_1003F11D4(v96, v97, (uint64_t *)&v122);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v93 + 4, v93 + 12);
          swift_bridgeObjectRelease();
          _os_log_impl((void *)&_mh_execute_header, v90, v91, "Received unknown eventType: %s", v93, 0xCu);
          swift_arrayDestroy(v94, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v94, -1LL, -1LL);
          swift_slowDealloc(v93, -1LL, -1LL);
        }

        v98 = *(void (**)(void *, uint64_t))(v0 + 296);
        type metadata accessor for SPSeparationMonitoringError(0LL);
        v100 = v99;
        *(void *)(v0 + 256) = 12LL;
        v101 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
        v102 = sub_100007864( &qword_1009AF750,  (uint64_t (*)(uint64_t))type metadata accessor for SPSeparationMonitoringError,  (uint64_t)&unk_1007E3870);
        _BridgedStoredNSError.init(_:userInfo:)(v86, v87, v101, v100, v102);
        v103 = *(void **)(v0 + 248);
        v98(v103, 1LL);
        swift_release();
      }
    }

    else
    {
      v78 = *(void (**)(void, void))(v0 + 296);
      swift_bridgeObjectRelease();
      v78(0LL, 0LL);
      swift_release();
    }

    v104 = *(void *)(v0 + 568);
    v105 = *(void *)(v0 + 560);
    v106 = *(void *)(v0 + 536);
    v107 = *(void *)(v0 + 528);
    v108 = *(void *)(v0 + 520);
    v109 = *(void *)(v0 + 504);
    v110 = *(void *)(v0 + 512);
    v112 = *(void *)(v0 + 488);
    v111 = *(void *)(v0 + 496);
    v113 = *(void *)(v0 + 456);
    v114 = *(void *)(v0 + 440);
    v115 = *(void *)(v0 + 416);
    v116 = *(void *)(v0 + 408);
    v117 = *(void *)(v0 + 400);
    v118 = *(void *)(v0 + 376);
    v119 = *(void *)(v0 + 368);
    v121 = *(void *)(v0 + 360);
    swift_task_dealloc(*(void *)(v0 + 576));
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v110);
    swift_task_dealloc(v109);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    swift_task_dealloc(v117);
    swift_task_dealloc(v118);
    swift_task_dealloc(v119);
    swift_task_dealloc(v121);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

    return (id)v10;
  }

  *(void *)a4 = a2;
  *(void *)(a4 + 8) = a3;
  uint64_t v16 = type metadata accessor for PairingError(0LL);
  static Date.trustedNow.getter(a4 + *(int *)(v16 + 24));
}

    uint64_t v12 = v22;
    uint64_t v14 = v20;
  }

  if (v14)
  {
    int64_t v20 = (v14 - 1) & v14;
    uint64_t v21 = __clz(__rbit64(v14)) | (v12 << 6);
    char v22 = v12;
LABEL_35:
    BOOL v31 = *(void *)(*(void *)(v6 + 48) + 8 * v21);
    BOOL v27 = swift_retain();
    if (!v31) {
      goto LABEL_43;
    }
    goto LABEL_36;
  }

  uint64_t v28 = v12 + 1;
  if (!__OFADD__(v12, 1LL))
  {
    if (v28 >= v42) {
      goto LABEL_43;
    }
    char v29 = *(void *)(v43 + 8 * v28);
    char v22 = v12 + 1;
    if (!v29)
    {
      char v22 = v12 + 2;
      if (v12 + 2 >= v42) {
        goto LABEL_43;
      }
      char v29 = *(void *)(v43 + 8 * v22);
      if (!v29)
      {
        char v22 = v12 + 3;
        if (v12 + 3 >= v42) {
          goto LABEL_43;
        }
        char v29 = *(void *)(v43 + 8 * v22);
        if (!v29)
        {
          char v22 = v12 + 4;
          if (v12 + 4 >= v42) {
            goto LABEL_43;
          }
          char v29 = *(void *)(v43 + 8 * v22);
          if (!v29)
          {
            uint64_t v30 = v12 + 5;
            while (v42 != v30)
            {
              char v29 = *(void *)(v43 + 8 * v30++);
              if (v29)
              {
                char v22 = v30 - 1;
                goto LABEL_34;
              }
            }

    *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
    return a1;
  }

  if (!v16)
  {
    swift_release(a1[11]);
    goto LABEL_14;
  }

  uint64_t v17 = a2[11];
  uint64_t v18 = a1[11];
  a1[10] = v16;
  a1[11] = v17;
  swift_retain(v17);
  swift_release(v18);
  return a1;
}

    *((_OWORD *)a1 + 5) = *((_OWORD *)a2 + 5);
    return a1;
  }

  if (!v16)
  {
    swift_release(a1[11]);
    goto LABEL_14;
  }

  uint64_t v17 = a2[11];
  uint64_t v18 = a1[11];
  a1[10] = v16;
  a1[11] = v17;
  swift_release(v18);
  return a1;
}

      int64_t v45 = *(unsigned __int8 *)(v42 + *(int *)(v9 + 24));
      uint64_t v46 = v69;
      __int128 v47 = sub_10001DC4C(v42, v69, type metadata accessor for BeaconObservation);
      if (v45 == 12)
      {
        __int128 v48 = Date.timeIntervalSinceNow.getter(v47);
        sub_100018C68(v46, type metadata accessor for BeaconObservation);
        sub_100018C68(v42, type metadata accessor for BeaconObservation);
        if (v48 >= v34) {
          goto LABEL_16;
        }
      }

      else
      {
        sub_100018C68(v46, type metadata accessor for BeaconObservation);
        sub_100018C68(v42, type metadata accessor for BeaconObservation);
      }

      sub_100018C68((uint64_t)v28, type metadata accessor for BeaconObservation);
      int64_t v35 = v72;
      unint64_t v6 = v40;
LABEL_5:
      uint64_t v26 = v77;
      v32 += v35;
      --v30;
      uint64_t v21 = v71;
      if (!v30)
      {
        uint64_t v52 = v78;
        uint64_t v8 = v76;
        goto LABEL_23;
      }
    }

    sub_100018C68((uint64_t)v26, type metadata accessor for BeaconObservation);
    int64_t v37 = v73;
    sub_10001DC4C((uint64_t)v28, v73, type metadata accessor for BeaconObservation);
LABEL_9:
    sub_100018C68(v37, type metadata accessor for BeaconObservation);
    uint64_t v39 = sub_10001DC4C((uint64_t)v28, (uint64_t)v21, type metadata accessor for BeaconObservation);
    goto LABEL_10;
  }

  uint64_t v52 = _swiftEmptyArrayStorage;
LABEL_23:
  swift_bridgeObjectRelease();
  uint64_t v53 = v52[2];
  uint64_t v54 = v66;
  if (v53)
  {
    v78 = _swiftEmptyArrayStorage;
    sub_1000328D0(0, v53, 0);
    uint64_t v55 = (uint64_t)v52 + ((*(unsigned __int8 *)(v65 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v65 + 80));
    uint64_t v56 = *(void *)(v65 + 72);
    do
    {
      uint64_t v57 = v75;
      sub_10001DC4C(v55, v75, type metadata accessor for BeaconObservation);
      (*(void (**)(char *, uint64_t, uint64_t))(v6 + 16))(v8, v57, v54);
      sub_100018C68(v57, type metadata accessor for BeaconObservation);
      uint64_t v58 = v78;
      if ((swift_isUniquelyReferenced_nonNull_native(v78) & 1) == 0)
      {
        sub_1000328D0(0, v58[2] + 1LL, 1);
        uint64_t v58 = v78;
      }

      int v60 = v58[2];
      uint64_t v59 = v58[3];
      if (v60 >= v59 >> 1)
      {
        sub_1000328D0(v59 > 1, v60 + 1, 1);
        uint64_t v58 = v78;
      }

      v58[2] = v60 + 1;
      int v61 = (unint64_t)v58
      uint64_t v8 = v76;
      (*(void (**)(unint64_t, char *, uint64_t))(v6 + 32))(v61, v76, v54);
      v78 = v58;
      v55 += v56;
      --v53;
    }

    while (v53);
    swift_release(v52);
  }

  else
  {
    swift_release(v52);
    uint64_t v58 = _swiftEmptyArrayStorage;
  }

  int v62 = sub_1006F1060((uint64_t)v58);
  swift_bridgeObjectRelease();
  return v62;
}

    swift_bridgeObjectRelease();
    swift_unknownObjectRelease(v15);
    swift_bridgeObjectRetain(v47);
    return v46;
  }

  else
  {
    uint64_t v30 = v4;
    BOOL v31 = v49;
    uint64_t v32 = (void *)_convertNSErrorToError(_:)(v20);

    uint64_t v34 = swift_willThrow(v33);
    int64_t v35 = static os_log_type_t.error.getter(v34);
    if (qword_10099B700 != -1) {
      swift_once(&qword_10099B700, sub_100651100);
    }
    uint64_t v36 = qword_100A2B010;
    int64_t v37 = sub_100004AEC((uint64_t *)&unk_10099D740);
    int64_t v38 = swift_allocObject(v37, 72LL, 7LL);
    *(_OWORD *)(v38 + 16) = xmmword_1007E67D0;
    uint64_t v49 = v32;
    swift_errorRetain(v32);
    uint64_t v39 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v40 = String.init<A>(describing:)(&v49, v39);
    uint64_t v42 = v41;
    *(void *)(v38 + 56) = &type metadata for String;
    *(void *)(v38 + 64) = sub_1000226F4();
    *(void *)(v38 + 32) = v40;
    *(void *)(v38 + 40) = v42;
    os_log(_:dso:log:_:_:)(v35, &_mh_execute_header, v36, "Error matching contacts: %@", 27LL, 2LL, v38);

    swift_unknownObjectRelease(v15);
    swift_errorRelease(v32);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRetain(a2);
  }

  return a1;
}

    swift_bridgeObjectRelease();
    if ((v71 & 0x200) == 0) {
      goto LABEL_16;
    }
    goto LABEL_15;
  }

  v131((char *)v231 + v230[42], (void *)v209, v229);
  LOBYTE(v232) = 39;
  v171 = v226;
  v172 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v232, v216);
  v226 = v171;
  if (v171) {
    goto LABEL_110;
  }
  *((_BYTE *)v231 + v190) = v172;
  LOBYTE(v232) = 40;
  v173 = v226;
  v174 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v232, v216);
  v226 = v173;
  if (v173) {
    goto LABEL_110;
  }
  *((_BYTE *)v231 + v191) = v174;
  LOBYTE(v232) = 41;
  v175 = v226;
  v176 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v232, v216);
  v226 = v175;
  if (v175
    || (*((_BYTE *)v231 + v192) = v176,
        LOBYTE(v232) = 42,
        v177 = v226,
        v178 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v232, v216),
        (v226 = v177) != 0))
  {
LABEL_110:
    uint64_t v71 = 0xC7E7FFD7B12LL;
    goto LABEL_65;
  }

  v180 = v178;
  v181 = v179;
  v182 = v221;
  swift_bridgeObjectRelease();
  *v182 = v180;
  v182[1] = v181;
  LOBYTE(v232) = 43;
  v183 = v226;
  v184 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v232, v216);
  v226 = v183;
  if (v183)
  {
    (*(void (**)(uint64_t, uint64_t))(v214 + 8))(v215, v216);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)v227);
    (*(void (**)(uint64_t, uint64_t))(v207 + 8))((uint64_t)v231 + v230[5], v208);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    LODWORD(v79) = 1;
    LODWORD(v78) = 1;
    v227 = 1LL;
    v215 = 1LL;
    v216 = 1LL;
    v214 = 1LL;
    v213 = 1LL;
    v212 = 1LL;
    v211 = 1LL;
    v210 = 1LL;
    v209 = 1LL;
    LODWORD(v77) = 1;
    LODWORD(v76) = 1;
    LODWORD(v75) = 1;
    LODWORD(v74) = 1;
    LODWORD(v73) = 1;
    LODWORD(v72) = 1;
    goto LABEL_15;
  }

  v186 = v184;
  v187 = v185;
  (*(void (**)(uint64_t, uint64_t))(v214 + 8))(v215, v216);
  v188 = v222;
  swift_bridgeObjectRelease();
  *v188 = v186;
  v188[1] = v187;
  v189 = v231;
  sub_10001DC4C((uint64_t)v231, v203, type metadata accessor for AccessoryProductInfo);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)v227);
  return sub_100018C68((uint64_t)v189, type metadata accessor for AccessoryProductInfo);
}

void sub_1000C94E4(unsigned __int8 a1, uint64_t a2, uint64_t a3, unint64_t a4, char a5)
{
  unint64_t v6 = v5;
  Swift::UInt v10 = a1;
  unint64_t v11 = *(void *)(*v5 + 16);
  unint64_t v12 = *(void *)(*v5 + 24);
  if (v12 > v11 && (a5 & 1) != 0) {
    goto LABEL_18;
  }
  uint64_t v13 = v11 + 1;
  if ((a5 & 1) != 0)
  {
    sub_1000C3E54(v13);
  }

  else
  {
    if (v12 > v11)
    {
      sub_1000CDCE0();
      goto LABEL_18;
    }

    sub_1000CFEC8(v13);
  }

  uint64_t v14 = *v5;
  Hasher.init(_seed:)(v29, *(void *)(*v5 + 40));
  Hasher._combine(_:)(v10);
  swift_bridgeObjectRetain(a3);
  String.hash(into:)(v29, a2, a3);
  swift_bridgeObjectRelease();
  Swift::Int v15 = Hasher._finalize()();
  uint64_t v16 = -1LL << *(_BYTE *)(v14 + 32);
  a4 = v15 & ~v16;
  uint64_t v17 = v14 + 56;
  if (((*(void *)(v14 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a4) & 1) != 0)
  {
    uint64_t v18 = ~v16;
    uint64_t v19 = *(void *)(v14 + 48);
    while (1)
    {
      int64_t v20 = (unsigned __int8 *)(v19 + 24 * a4);
      if (*v20 == (_DWORD)v10)
      {
        uint64_t v21 = *((void *)v20 + 1);
        uint64_t v22 = *((void *)v20 + 2);
        BOOL v23 = v21 == a2 && v22 == a3;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, a2, a3, 0LL) & 1) != 0) {
          break;
        }
      }

      a4 = (a4 + 1) & v18;
      if (((*(void *)(v17 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a4) & 1) == 0) {
        goto LABEL_18;
      }
    }

    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MessagingDestination);
    __break(1u);
  }

uint64_t sub_1000C9698(uint64_t a1, unint64_t a2, char a3)
{
  return sub_1000C96AC(a1, a2, a3, &qword_1009A0A80, (uint64_t)&type metadata for Int);
}

uint64_t sub_1000C96AC(uint64_t result, unint64_t a2, char a3, uint64_t *a4, uint64_t a5)
{
  uint64_t v8 = result;
  unint64_t v9 = *(void *)(*v5 + 16);
  unint64_t v10 = *(void *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v11 = v9 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000C67E8(v11, a4);
  }

  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_1000CE7DC(a4);
      goto LABEL_14;
    }

    sub_1000D2590(v11, a4);
  }

  uint64_t v12 = *v5;
  uint64_t result = static Hasher._hash(seed:_:)(*(void *)(*v5 + 40), v8);
  uint64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
  a2 = result & ~v13;
  if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v14 = *(void *)(v12 + 48);
    if (*(void *)(v14 + 8 * a2) == v8)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(a5);
      __break(1u);
    }

    else
    {
      uint64_t v15 = ~v13;
      while (1)
      {
        a2 = (a2 + 1) & v15;
        if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(v14 + 8 * a2) == v8) {
          goto LABEL_13;
        }
      }
    }
  }

uint64_t sub_1000C97E0( uint64_t result, unint64_t a2, char a3, uint64_t *a4, uint64_t (*a5)(void))
{
  unint64_t v7 = (uint64_t *)v5;
  uint64_t v9 = result;
  unint64_t v10 = *(void *)(*(void *)v5 + 16LL);
  unint64_t v11 = *(void *)(*(void *)v5 + 24LL);
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000C58D8(v12, a4);
  }

  else
  {
    if (v11 > v10)
    {
      uint64_t result = (uint64_t)sub_1000CE3F8(a4);
LABEL_22:
      uint64_t v32 = *v7;
      *(void *)(*v7 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
      *(void *)(*(void *)(v32 + 48) + 8 * a2) = v9;
      uint64_t v33 = *(void *)(v32 + 16);
      BOOL v34 = __OFADD__(v33, 1LL);
      uint64_t v35 = v33 + 1;
      if (!v34)
      {
        *(void *)(v32 + 16) = v35;
        return result;
      }

      __break(1u);
      goto LABEL_25;
    }

    sub_1000D1798(v12, a4);
  }

  uint64_t v13 = *(void *)v5;
  uint64_t v14 = *(void *)(*(void *)v5 + 40LL);
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  uint64_t v17 = v16;
  Hasher.init(_seed:)(v37, v14);
  String.hash(into:)(v37, v15, v17);
  Swift::Int v5 = Hasher._finalize()();
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v18 = -1LL << *(_BYTE *)(v13 + 32);
  a2 = v5 & ~v18;
  if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
    goto LABEL_22;
  }
  uint64_t v19 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v13 + 48) + 8 * a2));
  Swift::Int v5 = v20;
  uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
  if (v19 == v21 && v5 == v22)
  {
LABEL_25:
    swift_bridgeObjectRelease_n(v5, 2LL);
    goto LABEL_26;
  }

  char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v5, v21, v22, 0LL);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  if ((v24 & 1) == 0)
  {
    uint64_t v25 = ~v18;
    do
    {
      a2 = (a2 + 1) & v25;
      if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
        goto LABEL_22;
      }
      uint64_t v26 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v13 + 48) + 8 * a2));
      Swift::Int v5 = v27;
      uint64_t v28 = static String._unconditionallyBridgeFromObjectiveC(_:)(v9);
      if (v26 == v28 && v5 == v29) {
        goto LABEL_25;
      }
      char v31 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v5, v28, v29, 0LL);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
    }

    while ((v31 & 1) == 0);
  }

void sub_1000C9A1C(uint64_t a1, unint64_t a2, char a3, uint64_t *a4, unint64_t *a5, void *a6)
{
  uint64_t v9 = v6;
  unint64_t v12 = *(void *)(*v6 + 16);
  unint64_t v13 = *(void *)(*v6 + 24);
  if (v13 > v12 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000C7F4C(v14, a4);
  }

  else
  {
    if (v13 > v12)
    {
      sub_1000CE3F8(a4);
      goto LABEL_14;
    }

    sub_1000D3B98(v14, a4);
  }

  uint64_t v15 = *v6;
  Swift::Int v16 = NSObject._rawHashValue(seed:)(*(void *)(*v6 + 40));
  uint64_t v17 = -1LL << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v18 = sub_100022898(0LL, a5, a6);
    id v19 = *(id *)(*(void *)(v15 + 48) + 8 * a2);
    char v20 = static NSObject.== infix(_:_:)(v19, a1);

    if ((v20 & 1) != 0)
    {
LABEL_13:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v18);
      __break(1u);
    }

    else
    {
      uint64_t v21 = ~v17;
      while (1)
      {
        a2 = (a2 + 1) & v21;
        if (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        id v22 = *(id *)(*(void *)(v15 + 48) + 8 * a2);
        char v23 = static NSObject.== infix(_:_:)(v22, a1);

        if ((v23 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

Swift::Int sub_1000C9BAC(Swift::Int result, unint64_t a2, char a3)
{
  unsigned __int8 v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 <= v6 || (a3 & 1) == 0)
  {
    uint64_t v8 = v6 + 1;
    if ((a3 & 1) != 0)
    {
      sub_1000C417C(v8);
    }

    else
    {
      if (v7 > v6)
      {
        uint64_t result = (Swift::Int)sub_1000CED40(&qword_1009A0B58);
        goto LABEL_10;
      }

      sub_1000D01B4(v8);
    }

    uint64_t v9 = *v3;
    Hasher.init(_seed:)(v18, *(void *)(*v3 + 40));
    uint64_t v10 = sub_100794CB8(v5);
    String.hash(into:)(v18, v10, v11);
    swift_bridgeObjectRelease();
    uint64_t result = Hasher._finalize()();
    a2 = result & ~(-1LL << *(_BYTE *)(v9 + 32));
    if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0) {
      __asm { BR              X9 }
    }
  }

uint64_t sub_1000CA340(uint64_t result, unint64_t a2, char a3)
{
  char v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000C4708(v8);
  }

  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_1000CED40(&qword_1009A0AA0);
      goto LABEL_14;
    }

    sub_1000D070C(v8);
  }

  uint64_t v9 = *v3;
  Hasher.init(_seed:)(v18, *(void *)(*v3 + 40));
  Swift::UInt v10 = qword_1007EB0E0[v5];
  Hasher._combine(_:)(v10);
  uint64_t result = Hasher._finalize()();
  uint64_t v11 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v11;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v12 = *(void *)(v9 + 48);
    if (qword_1007EB0E0[*(char *)(v12 + a2)] == v10)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for BeaconObservation.ObservationType);
      __break(1u);
    }

    else
    {
      uint64_t v13 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
      }
    }
  }

uint64_t sub_1000CA4BC(uint64_t result, unint64_t a2, char a3, uint64_t *a4, uint64_t a5)
{
  Swift::UInt v8 = result;
  unint64_t v9 = *(void *)(*v5 + 16);
  unint64_t v10 = *(void *)(*v5 + 24);
  if (v10 > v9 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v11 = v9 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000C6A64(v11, a4);
  }

  else
  {
    if (v10 > v9)
    {
      uint64_t result = (uint64_t)sub_1000CED40(a4);
      goto LABEL_14;
    }

    sub_1000D27EC(v11, a4);
  }

  uint64_t v12 = *v5;
  Hasher.init(_seed:)(v20, *(void *)(*v5 + 40));
  Hasher._combine(_:)(v8);
  uint64_t result = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v12 + 32);
  a2 = result & ~v13;
  if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v14 = *(void *)(v12 + 48);
    if (*(unsigned __int8 *)(v14 + a2) == (_DWORD)v8)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(a5);
      __break(1u);
    }

    else
    {
      uint64_t v15 = ~v13;
      while (1)
      {
        a2 = (a2 + 1) & v15;
        if (((*(void *)(v12 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
      }
    }
  }

uint64_t sub_1000CA614(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_46;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000C49BC(v8);
  }

  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_1000CDEA8();
      goto LABEL_46;
    }

    sub_1000D0990(v8);
  }

  uint64_t v9 = *v3;
  Hasher.init(_seed:)(v69, *(void *)(*v3 + 40));
  sub_1005EDAB4((uint64_t)v69);
  uint64_t result = Hasher._finalize()();
  uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  uint64_t v57 = v9 + 56;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v55 = ~v10;
    uint64_t v54 = *(void *)(v9 + 48);
    uint64_t v67 = *(void *)(v5 + 8);
    uint64_t v68 = *(void *)v5;
    int v48 = *(unsigned __int8 *)(v5 + 131);
    int v49 = *(unsigned __int8 *)(v5 + 129);
    uint64_t v46 = *(void *)(v5 + 152);
    uint64_t v47 = *(void *)(v5 + 144);
    while (1)
    {
      uint64_t v11 = v54 + 160 * a2;
      uint64_t result = *(void *)v11;
      uint64_t v12 = *(void *)(v11 + 8);
      uint64_t v14 = *(void *)(v11 + 16);
      uint64_t v13 = *(void *)(v11 + 24);
      uint64_t v15 = *(void *)(v11 + 32);
      uint64_t v16 = *(void *)(v11 + 40);
      uint64_t v17 = *(void *)(v11 + 48);
      uint64_t v18 = *(void *)(v11 + 56);
      uint64_t v19 = *(void *)(v11 + 64);
      uint64_t v20 = *(void *)(v11 + 72);
      uint64_t v65 = *(void *)(v11 + 88);
      uint64_t v66 = *(void *)(v11 + 80);
      uint64_t v63 = *(void *)(v11 + 104);
      uint64_t v64 = *(void *)(v11 + 96);
      uint64_t v61 = *(void *)(v11 + 120);
      uint64_t v62 = *(void *)(v11 + 112);
      int v59 = *(unsigned __int8 *)(v11 + 129);
      int v60 = *(unsigned __int8 *)(v11 + 128);
      int v58 = *(unsigned __int8 *)(v11 + 130);
      int v56 = *(unsigned __int8 *)(v11 + 131);
      int v53 = *(unsigned __int8 *)(v11 + 136);
      BOOL v21 = *(void *)v11 == v68 && v12 == v67;
      uint64_t v51 = *(void *)(v11 + 152);
      uint64_t v52 = *(void *)(v11 + 144);
      if (v21 || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(result, v12, v68, v67, 0LL), (result & 1) != 0))
      {
        if ((uint64_t v22 = *(void *)(v5 + 16), v23 = *(void *)(v5 + 24), v14 == v22) && v13 == v23
          || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v14, v13, v22, v23, 0LL), (result & 1) != 0))
        {
          if ((uint64_t v24 = *(void *)(v5 + 32), v25 = *(void *)(v5 + 40), v15 == v24) && v16 == v25
            || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v24, v25, 0LL), (result & 1) != 0))
          {
            if ((uint64_t v26 = *(void *)(v5 + 48), v27 = *(void *)(v5 + 56), v17 == v26) && v18 == v27
              || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v17, v18, v26, v27, 0LL), (result & 1) != 0))
            {
              if ((uint64_t v28 = *(void *)(v5 + 64), v29 = *(void *)(v5 + 72), v19 == v28) && v20 == v29
                || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, v28, v29, 0LL), (result & 1) != 0))
              {
                if ((v30 = *(void *)(v5 + 80), uint64_t v31 = *(void *)(v5 + 88), v66 == v30) && v65 == v31
                  || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v66, v65, v30, v31, 0LL), (result & 1) != 0))
                {
                  if ((v32 = *(void *)(v5 + 96), uint64_t v33 = *(void *)(v5 + 104), v64 == v32) && v63 == v33
                    || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v64, v63, v32, v33, 0LL), (result & 1) != 0))
                  {
                    if ((v34 = *(void *)(v5 + 112), uint64_t v35 = *(void *)(v5 + 120), v62 == v34) && v61 == v35
                      || (uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v62, v61, v34, v35, 0LL),
                          (result & 1) != 0))
                    {
                      if (((v60 ^ *(unsigned __int8 *)(v5 + 128)) & 1) == 0
                        && ((v59 ^ v49) & 1) == 0
                        && ((v58 ^ *(unsigned __int8 *)(v5 + 130)) & 1) == 0
                        && ((v56 ^ v48) & 1) == 0
                        && v53 == *(unsigned __int8 *)(v5 + 136))
                      {
                        if (v52 == v47 && v51 == v46) {
                          break;
                        }
                        uint64_t result = _stringCompareWithSmolCheck(_:_:expecting:)(v52, v51, v47, v46, 0LL);
                        if ((result & 1) != 0) {
                          break;
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }

      a2 = (a2 + 1) & v55;
      if (((*(void *)(v57 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
        goto LABEL_46;
      }
    }

    uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MessagingDevice);
    __break(1u);
  }

void sub_1000CA9FC(uint64_t a1, uint64_t a2, unint64_t a3, char a4)
{
  uint64_t v5 = v4;
  unint64_t v9 = *(void *)(*v4 + 16);
  unint64_t v10 = *(void *)(*v4 + 24);
  if (v10 > v9 && (a4 & 1) != 0) {
    goto LABEL_22;
  }
  uint64_t v11 = v9 + 1;
  if ((a4 & 1) != 0)
  {
    sub_1000C4C5C(v11);
  }

  else
  {
    if (v10 > v9)
    {
      sub_1000CE094();
      goto LABEL_22;
    }

    sub_1000D0C04(v11);
  }

  uint64_t v12 = *v4;
  Hasher.init(_seed:)(v29, *(void *)(*v4 + 40));
  String.hash(into:)(v29, a1, a2);
  Swift::Int v13 = Hasher._finalize()();
  uint64_t v14 = -1LL << *(_BYTE *)(v12 + 32);
  a3 = v13 & ~v14;
  uint64_t v15 = v12 + 56;
  if (((*(void *)(v12 + 56 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) != 0)
  {
    uint64_t v16 = *(void *)(v12 + 48);
    uint64_t v17 = (void *)(v16 + 16 * a3);
    uint64_t v18 = v17[1];
    BOOL v19 = *v17 == a1 && v18 == a2;
    if (v19 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) != 0)
    {
LABEL_21:
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MessagingAccount);
      __break(1u);
    }

    else
    {
      uint64_t v20 = ~v14;
      while (1)
      {
        a3 = (a3 + 1) & v20;
        if (((*(void *)(v15 + ((a3 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a3) & 1) == 0) {
          break;
        }
        BOOL v21 = (void *)(v16 + 16 * a3);
        uint64_t v22 = v21[1];
        BOOL v23 = *v21 == a1 && v22 == a2;
        if (v23 || (_stringCompareWithSmolCheck(_:_:expecting:)(*v21, v22, a1, a2, 0LL) & 1) != 0) {
          goto LABEL_21;
        }
      }
    }
  }

uint64_t sub_1000CAB94(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v28 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v7 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  unint64_t v9 = (char *)v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v25 = v7;
  uint64_t v26 = v3;
  if (v11 <= v10 || (a3 & 1) == 0)
  {
    uint64_t v12 = v10 + 1;
    if ((a3 & 1) != 0)
    {
      sub_1000C4F38(v12);
    }

    else
    {
      if (v11 > v10)
      {
        sub_1000CE97C(type metadata accessor for OwnedBeaconGroup, &qword_1009A0C58);
        goto LABEL_10;
      }

      sub_1000D0EB0(v12);
    }

    uint64_t v13 = *v3;
    Hasher.init(_seed:)(&__s1, *(void *)(*v3 + 40));
    uint64_t v14 = a1 + *(int *)(v28 + 24);
    uint64_t v15 = type metadata accessor for UUID(0LL);
    uint64_t v16 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v24[2] = v14;
    dispatch thunk of Hashable.hash(into:)(&__s1, v15, v16);
    Swift::Int v17 = Hasher._finalize()();
    uint64_t v18 = -1LL << *(_BYTE *)(v13 + 32);
    a2 = v17 & ~v18;
    uint64_t v31 = v13 + 56;
    uint64_t v32 = v13;
    if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
    {
      uint64_t v29 = ~v18;
      uint64_t v30 = *(void *)(v7 + 72);
      uint64_t v27 = a1;
      sub_10001DC4C(*(void *)(v32 + 48) + v30 * a2, (uint64_t)v9, type metadata accessor for OwnedBeaconGroup);
      __asm { BR              X10 }
    }
  }

void sub_1000CB6E4(uint64_t a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000C52C8(v8);
  }

  else
  {
    if (v7 > v6)
    {
      sub_1000CE250();
      goto LABEL_14;
    }

    sub_1000D1200(v8);
  }

  uint64_t v9 = *v3;
  Hasher.init(_seed:)(v22, *(void *)(*v3 + 40));
  sub_100069EC4(v22, a1);
  Swift::Int v10 = Hasher._finalize()();
  uint64_t v11 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = v10 & ~v11;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    swift_bridgeObjectRetain(*(void *)(*(void *)(v9 + 48) + 8 * a2));
    char v13 = sub_100311D54(v12, a1);
    swift_bridgeObjectRelease();
    if ((v13 & 1) != 0)
    {
LABEL_13:
      uint64_t v17 = sub_100004AEC(&qword_1009A0B30);
      ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v17);
      __break(1u);
    }

    else
    {
      uint64_t v14 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v14;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        swift_bridgeObjectRetain(*(void *)(*(void *)(v9 + 48) + 8 * a2));
        char v16 = sub_100311D54(v15, a1);
        swift_bridgeObjectRelease();
        if ((v16 & 1) != 0) {
          goto LABEL_13;
        }
      }
    }
  }

uint64_t sub_1000CB870(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for BeaconStatus(0LL);
  uint64_t v44 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  Swift::Int v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  char v13 = (char *)&v43 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  char v16 = (char *)&v43 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v43 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v43 - v20;
  unint64_t v22 = *(void *)(*v3 + 16);
  unint64_t v23 = *(void *)(*v3 + 24);
  uint64_t v43 = v3;
  if (v23 > v22 && (a3 & 1) != 0) {
    goto LABEL_18;
  }
  uint64_t v24 = v22 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000C550C(v24);
  }

  else
  {
    if (v23 > v22)
    {
      sub_1000CE97C(type metadata accessor for BeaconStatus, &qword_1009A0B48);
      goto LABEL_18;
    }

    sub_1000D1410(v24);
  }

  uint64_t v25 = *v3;
  Hasher.init(_seed:)(v50, *(void *)(*v3 + 40));
  uint64_t v26 = type metadata accessor for UUID(0LL);
  uint64_t v27 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v50, v26, v27);
  uint64_t v28 = type metadata accessor for Date(0LL);
  uint64_t v29 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v50, v28, v29);
  Swift::Int v30 = Hasher._finalize()();
  uint64_t v31 = -1LL << *(_BYTE *)(v25 + 32);
  a2 = v30 & ~v31;
  uint64_t v48 = v25 + 56;
  uint64_t v49 = v25;
  if (((*(void *)(v25 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v47 = ~v31;
    uint64_t v46 = *(void *)(v44 + 72);
    while (1)
    {
      sub_10001DC4C(*(void *)(v49 + 48) + v46 * a2, (uint64_t)v21, type metadata accessor for BeaconStatus);
      char v32 = static UUID.== infix(_:_:)(v21, a1);
      sub_10001DC4C((uint64_t)v21, (uint64_t)v19, type metadata accessor for BeaconStatus);
      sub_10001DC4C(a1, (uint64_t)v16, type metadata accessor for BeaconStatus);
      if ((v32 & 1) == 0) {
        break;
      }
      char v33 = static Date.== infix(_:_:)(&v19[*(int *)(v7 + 24)], &v16[*(int *)(v7 + 24)]);
      sub_100018C68((uint64_t)v16, type metadata accessor for BeaconStatus);
      sub_100018C68((uint64_t)v19, type metadata accessor for BeaconStatus);
      sub_10001DC4C((uint64_t)v21, (uint64_t)v13, type metadata accessor for BeaconStatus);
      sub_10001DC4C(a1, (uint64_t)v10, type metadata accessor for BeaconStatus);
      if ((v33 & 1) == 0) {
        goto LABEL_11;
      }
      uint64_t v34 = *(int *)(v7 + 20);
      int v45 = v13[v34];
      uint64_t v35 = v7;
      int v36 = v10[v34];
      sub_100018C68((uint64_t)v10, type metadata accessor for BeaconStatus);
      sub_100018C68((uint64_t)v13, type metadata accessor for BeaconStatus);
      sub_100018C68((uint64_t)v21, type metadata accessor for BeaconStatus);
      BOOL v37 = v45 == v36;
      uint64_t v7 = v35;
      if (v37)
      {
        ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v35);
        __break(1u);
        goto LABEL_18;
      }

uint64_t sub_1000CBC60(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v30 = a1;
  uint64_t v6 = type metadata accessor for Destination(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v29 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000C5BF0( v12,  (uint64_t (*)(uint64_t))&type metadata accessor for Destination,  (uint64_t *)&unk_1009A0BE0,  &qword_1009A0BD0,  (uint64_t)&protocol conformance descriptor for Destination);
  }

  else
  {
    if (v11 > v10)
    {
      sub_1000CE5AC((uint64_t (*)(void))&type metadata accessor for Destination, (uint64_t *)&unk_1009A0BE0);
      goto LABEL_12;
    }

    sub_1000D1A70( v12,  (uint64_t (*)(uint64_t))&type metadata accessor for Destination,  (uint64_t *)&unk_1009A0BE0,  &qword_1009A0BD0,  (uint64_t)&protocol conformance descriptor for Destination);
  }

  uint64_t v13 = *v3;
  uint64_t v14 = *(void *)(*v3 + 40);
  uint64_t v15 = sub_100007864( &qword_1009A0BD0,  (uint64_t (*)(uint64_t))&type metadata accessor for Destination,  (uint64_t)&protocol conformance descriptor for Destination);
  uint64_t v16 = dispatch thunk of Hashable._rawHashValue(seed:)(v14, v6, v15);
  uint64_t v17 = -1LL << *(_BYTE *)(v13 + 32);
  a2 = v16 & ~v17;
  if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v18 = ~v17;
    uint64_t v19 = *(void *)(v7 + 72);
    uint64_t v20 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    do
    {
      v20(v9, *(void *)(v13 + 48) + v19 * a2, v6);
      uint64_t v21 = sub_100007864( &qword_1009A0BD8,  (uint64_t (*)(uint64_t))&type metadata accessor for Destination,  (uint64_t)&protocol conformance descriptor for Destination);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v30, v6, v21);
      (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      if ((v22 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v18;
    }

    while (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

uint64_t sub_1000CBEB4(uint64_t result, unint64_t a2, char a3)
{
  char v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000C5F50(v8);
  }

  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_1000CED40(&qword_1009A0BF8);
      goto LABEL_14;
    }

    sub_1000D1D8C(v8);
  }

  uint64_t v9 = *v3;
  Hasher.init(_seed:)(v18, *(void *)(*v3 + 40));
  Swift::UInt32 v10 = dword_1007EB238[v5];
  Hasher._combine(_:)(v10);
  uint64_t result = Hasher._finalize()();
  uint64_t v11 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v11;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v12 = *(void *)(v9 + 48);
    if (dword_1007EB238[*(char *)(v12 + a2)] == v10)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for BeaconSharingMessageType);
      __break(1u);
    }

    else
    {
      uint64_t v13 = ~v11;
      while (1)
      {
        a2 = (a2 + 1) & v13;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
      }
    }
  }

uint64_t sub_1000CC030(unsigned __int8 *a1, unint64_t a2, char a3)
{
  Swift::Int v4 = v3;
  uint64_t v8 = type metadata accessor for RawSearchResult(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (unsigned __int8 *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v12 = *(void *)(*v4 + 16);
  unint64_t v13 = *(void *)(*v4 + 24);
  uint64_t v28 = v9;
  if (v13 > v12 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v14 = v12 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000C6204(v14);
  }

  else
  {
    if (v13 > v12)
    {
      sub_1000CE97C(type metadata accessor for RawSearchResult, &qword_1009A0C00);
      goto LABEL_12;
    }

    sub_1000D2010(v14);
  }

  uint64_t v15 = *v4;
  Hasher.init(_seed:)(v29, *(void *)(*v4 + 40));
  sub_1005B93D0((uint64_t)v29);
  Swift::Int v16 = Hasher._finalize()();
  uint64_t v17 = -1LL << *(_BYTE *)(v15 + 32);
  a2 = v16 & ~v17;
  if (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v27 = v8;
    uint64_t v18 = ~v17;
    uint64_t v19 = *(void *)(v9 + 72);
    do
    {
      sub_10001DC4C(*(void *)(v15 + 48) + v19 * a2, (uint64_t)v11, type metadata accessor for RawSearchResult);
      char v20 = sub_1005BA700(v11, a1);
      sub_100018C68((uint64_t)v11, type metadata accessor for RawSearchResult);
      if ((v20 & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v18;
    }

    while (((*(void *)(v15 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

uint64_t sub_1000CC220(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v6 = result;
  uint64_t v21 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000C64D8(v9);
  }

  else
  {
    if (v8 > v7)
    {
      uint64_t result = (uint64_t)sub_1000CF0FC(&qword_1009A0CA8);
      goto LABEL_12;
    }

    sub_1000D22AC(v9);
  }

  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40);
  uint64_t v4 = type metadata accessor for AnyCancellable(0LL);
  uint64_t v12 = sub_100007864( (unint64_t *)&unk_1009AC370,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
  uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v4, v12);
  uint64_t v13 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = result & ~v13;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v14 = ~v13;
    uint64_t v15 = sub_100007864( &qword_1009A0CA0,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
    do
    {
      uint64_t v20 = *(void *)(*(void *)(v10 + 48) + 8 * a2);
      uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)(&v20, &v21, v4, v15);
      if ((result & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v14;
    }

    while (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

uint64_t sub_1000CC3D8(uint64_t a1, unint64_t a2, char a3)
{
  return sub_1000CA4BC(a1, a2, a3, &qword_1009A0C50, (uint64_t)&type metadata for LocationSource);
}

uint64_t sub_1000CC3EC(uint64_t a1, unint64_t a2, char a3)
{
  uint64_t v7 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v28 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v10 = *(void *)(*v3 + 16);
  unint64_t v11 = *(void *)(*v3 + 24);
  uint64_t v27 = v3;
  if (v11 > v10 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v12 = v10 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000C6D08(v12);
  }

  else
  {
    if (v11 > v10)
    {
      sub_1000CE97C(type metadata accessor for BeaconIdentifier, &qword_1009A0A68);
      goto LABEL_14;
    }

    sub_1000D2A60(v12);
  }

  uint64_t v13 = *v3;
  Hasher.init(_seed:)(v29, *(void *)(*v3 + 40));
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v15 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v29, v14, v15);
  uint64_t v16 = a1 + *(int *)(v7 + 20);
  dispatch thunk of Hashable.hash(into:)(v29, v14, v15);
  Swift::Int v17 = Hasher._finalize()();
  uint64_t v18 = -1LL << *(_BYTE *)(v13 + 32);
  a2 = v17 & ~v18;
  if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v19 = ~v18;
    uint64_t v20 = *(void *)(v28 + 72);
    while (1)
    {
      sub_10001DC4C(*(void *)(v13 + 48) + v20 * a2, (uint64_t)v9, type metadata accessor for BeaconIdentifier);
      if ((static UUID.== infix(_:_:)(v9, a1) & 1) != 0
        && (static UUID.== infix(_:_:)(&v9[*(int *)(v7 + 20)], v16) & 1) != 0)
      {
        break;
      }

      sub_100018C68((uint64_t)v9, type metadata accessor for BeaconIdentifier);
      a2 = (a2 + 1) & v19;
      if (((*(void *)(v13 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
        goto LABEL_14;
      }
    }

    sub_100018C68((uint64_t)v9, type metadata accessor for BeaconIdentifier);
    ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v7);
    __break(1u);
  }

uint64_t sub_1000CC648(uint64_t result, unint64_t a2, char a3)
{
  unsigned int v5 = result;
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_14;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000C73D8(v8);
  }

  else
  {
    if (v7 > v6)
    {
      uint64_t result = (uint64_t)sub_1000CEBA0();
      goto LABEL_14;
    }

    sub_1000D30BC(v8);
  }

  uint64_t v9 = *v3;
  uint64_t result = static Hasher._hash(seed:bytes:count:)(*(void *)(*v3 + 40), v5, 4LL);
  uint64_t v10 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = result & ~v10;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v11 = *(void *)(v9 + 48);
    if (*(_DWORD *)(v11 + 4 * a2) == v5)
    {
LABEL_13:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for UInt32);
      __break(1u);
    }

    else
    {
      uint64_t v12 = ~v10;
      while (1)
      {
        a2 = (a2 + 1) & v12;
        if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        if (*(_DWORD *)(v11 + 4 * a2) == v5) {
          goto LABEL_13;
        }
      }
    }
  }

uint64_t sub_1000CC76C(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_13;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000C765C(v9);
  }

  else
  {
    if (v8 > v7)
    {
      uint64_t result = (uint64_t)sub_1000CF0FC(&qword_1009A0C30);
      goto LABEL_13;
    }

    sub_1000D3320(v9);
  }

  uint64_t v10 = *v3;
  Hasher.init(_seed:)(v19, *(void *)(*v3 + 40));
  id v11 = *(id *)(v6 + 32);
  NSObject.hash(into:)(v19);

  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = result & ~v12;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t result = type metadata accessor for Service();
    uint64_t v13 = *(void *)(v10 + 48);
    uint64_t v14 = *(void *)(v6 + 32);
    if (*(void *)(*(void *)(v13 + 8 * a2) + 32LL) == v14)
    {
LABEL_12:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(result);
      __break(1u);
    }

    else
    {
      while (1)
      {
        a2 = (a2 + 1) & ~v12;
        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(*(void *)(v13 + 8 * a2) + 32LL) == v14) {
          goto LABEL_12;
        }
      }
    }
  }

uint64_t sub_1000CC8E0(uint64_t result, unint64_t a2, char a3)
{
  uint64_t v4 = v3;
  uint64_t v6 = result;
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_13;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000C7920(v9);
  }

  else
  {
    if (v8 > v7)
    {
      uint64_t result = (uint64_t)sub_1000CF0FC(&qword_1009A0C28);
      goto LABEL_13;
    }

    sub_1000D35B8(v9);
  }

  uint64_t v10 = *v3;
  Hasher.init(_seed:)(v19, *(void *)(*v3 + 40));
  id v11 = *(id *)(v6 + 40);
  NSObject.hash(into:)(v19);

  uint64_t result = Hasher._finalize()();
  uint64_t v12 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = result & ~v12;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t result = type metadata accessor for Characteristic();
    uint64_t v13 = *(void *)(v10 + 48);
    uint64_t v14 = *(void *)(v6 + 40);
    if (*(void *)(*(void *)(v13 + 8 * a2) + 40LL) == v14)
    {
LABEL_12:
      uint64_t result = ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(result);
      __break(1u);
    }

    else
    {
      while (1)
      {
        a2 = (a2 + 1) & ~v12;
        if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) == 0) {
          break;
        }
        if (*(void *)(*(void *)(v13 + 8 * a2) + 40LL) == v14) {
          goto LABEL_12;
        }
      }
    }
  }

void sub_1000CCA54(uint64_t *a1, unint64_t a2, char a3)
{
  unint64_t v6 = *(void *)(*v3 + 16);
  unint64_t v7 = *(void *)(*v3 + 24);
  if (v7 > v6 && (a3 & 1) != 0) {
    goto LABEL_49;
  }
  uint64_t v8 = v6 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000C7BE4(v8);
  }

  else
  {
    if (v7 > v6)
    {
      sub_1000CEEC8();
      goto LABEL_49;
    }

    sub_1000D3850(v8);
  }

  uint64_t v9 = *v3;
  Hasher.init(_seed:)(v50, *(void *)(*v3 + 40));
  uint64_t v10 = a1[1];
  uint64_t v49 = *a1;
  String.hash(into:)(v50, *a1, v10);
  Swift::Int v11 = Hasher._finalize()();
  uint64_t v12 = -1LL << *(_BYTE *)(v9 + 32);
  a2 = v11 & ~v12;
  uint64_t v47 = v9 + 56;
  if (((*(void *)(v9 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v45 = ~v12;
    uint64_t v44 = *(void *)(v9 + 48);
    do
    {
      uint64_t v13 = v44 + 88 * a2;
      uint64_t v14 = *(void *)(v13 + 8);
      uint64_t v16 = *(void *)(v13 + 16);
      uint64_t v15 = *(void *)(v13 + 24);
      int v17 = *(unsigned __int8 *)(v13 + 32);
      uint64_t v18 = *(void *)(v13 + 40);
      uint64_t v19 = *(void *)(v13 + 48);
      uint64_t v21 = *(void *)(v13 + 56);
      uint64_t v20 = *(void *)(v13 + 64);
      uint64_t v46 = *(void *)(v13 + 72);
      uint64_t v48 = *(void *)(v13 + 80);
      BOOL v22 = *(void *)v13 == v49 && v14 == v10;
      if (!v22 && (_stringCompareWithSmolCheck(_:_:expecting:)(*(void *)v13, v14, v49, v10, 0LL) & 1) == 0) {
        goto LABEL_11;
      }
      uint64_t v23 = a1[2];
      uint64_t v24 = a1[3];
      BOOL v25 = v16 == v23 && v15 == v24;
      if (!v25 && (_stringCompareWithSmolCheck(_:_:expecting:)(v16, v15, v23, v24, 0LL) & 1) == 0
        || ((v17 ^ *((unsigned __int8 *)a1 + 32)) & 1) != 0)
      {
        goto LABEL_11;
      }

      uint64_t v26 = a1[6];
      if (v19)
      {
        if (!v26) {
          goto LABEL_11;
        }
        uint64_t v27 = a1[5];
        BOOL v28 = v18 == v27 && v19 == v26;
        if (!v28 && (_stringCompareWithSmolCheck(_:_:expecting:)(v18, v19, v27, v26, 0LL) & 1) == 0) {
          goto LABEL_11;
        }
      }

      else if (v26)
      {
        goto LABEL_11;
      }

      uint64_t v29 = a1[8];
      if (v20)
      {
        if (!v29) {
          goto LABEL_11;
        }
        uint64_t v30 = a1[7];
        BOOL v31 = v21 == v30 && v20 == v29;
        if (!v31 && (_stringCompareWithSmolCheck(_:_:expecting:)(v21, v20, v30, v29, 0LL) & 1) == 0) {
          goto LABEL_11;
        }
      }

      else if (v29)
      {
        goto LABEL_11;
      }

      uint64_t v32 = a1[10];
      if (v48)
      {
        if (v32)
        {
          uint64_t v33 = a1[9];
          BOOL v34 = v46 == v33 && v48 == v32;
          if (v34 || (_stringCompareWithSmolCheck(_:_:expecting:)(v46, v48, v33, v32, 0LL) & 1) != 0)
          {
LABEL_48:
            ELEMENT_TYPE_OF_SET_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for FamilyMember);
            __break(1u);
            break;
          }
        }
      }

      else if (!v32)
      {
        goto LABEL_48;
      }

LABEL_49:
  uint64_t v35 = *v43;
  *(void *)(*v43 + 8 * (a2 >> 6) + 56) |= 1LL << a2;
  uint64_t v36 = *(void *)(v35 + 48) + 88 * a2;
  __int128 v37 = *((_OWORD *)a1 + 1);
  *(_OWORD *)uint64_t v36 = *(_OWORD *)a1;
  *(_OWORD *)(v36 + 16) = v37;
  *(void *)(v36 + 80) = a1[10];
  __int128 v38 = *((_OWORD *)a1 + 4);
  __int128 v39 = *((_OWORD *)a1 + 2);
  *(_OWORD *)(v36 + 48) = *((_OWORD *)a1 + 3);
  *(_OWORD *)(v36 + 64) = v38;
  *(_OWORD *)(v36 + 32) = v39;
  uint64_t v40 = *(void *)(v35 + 16);
  BOOL v41 = __OFADD__(v40, 1LL);
  uint64_t v42 = v40 + 1;
  if (v41) {
    __break(1u);
  }
  else {
    *(void *)(v35 + 16) = v42;
  }
}

      swift_once(&qword_10099B238, sub_10028EB6C);
      goto LABEL_6;
    }

    v96 = v10;
    v89 = v7;
    uint64_t v20 = (char *)sub_1006A14A4(v100);
    uint64_t v21 = sub_1006A14B8(v13);
  }

  BOOL v22 = v21;
  swift_bridgeObjectRelease();
  uint64_t v23 = *(void *)(v4 + 256);
  uint64_t v24 = *(void *)(v23 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  BOOL v25 = type metadata accessor for BeaconKeyManager(0LL);
  v94 = v23;
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10014F014, v23, v24, (char *)&type metadata for () + 8, v25);
  v95 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v26 = (char *)sub_1007A50A4(a1 + *(int *)(v95 + 20));
  swift_release();
  uint64_t v27 = &v20[(void)v26];
  if (__CFADD__(v26, v20))
  {
    __break(1u);
    goto LABEL_49;
  }

  BOOL v28 = __CFADD__(v27, v22);
  uint64_t v29 = &v27[v22];
  if (v28)
  {
    __break(1u);
    goto LABEL_51;
  }

  uint64_t v23 = (int64_t)v20;
  uint64_t v20 = v29 - 1;
  if (!v29)
  {
LABEL_51:
    __break(1u);
    goto LABEL_52;
  }

  if (v20 >= v26)
  {
    v92 = v3;
    v93 = a1;
    if (qword_10099B238 == -1) {
      goto LABEL_16;
    }
    goto LABEL_53;
  }

  My = type metadata accessor for Feature.FindMy(0LL);
  v386 = (void *)My;
  v387 = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v243 = sub_10000A7C8(&aBlock);
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v243,  enum case for Feature.FindMy.networkScalingImprovements(_:),  My);
  LOBYTE(My) = isFeatureEnabled(_:)(&aBlock);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
  if ((My & 1) != 0)
  {
    sub_100013044(v207, (uint64_t)&aBlock);
    v244 = sub_100004AEC(&qword_1009B0530);
    v245 = (uint64_t)v335;
    v246 = swift_dynamicCast(v335, &aBlock, v244, v209, 6LL);
    v247 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v344 + 56);
    if ((v246 & 1) != 0)
    {
      v247(v245, 0LL, 1LL, v209);
      v248 = v245;
      v249 = v337;
      sub_10002218C(v248, v337, type metadata accessor for OwnedBeaconRecord);
      ((void (*)(char *, uint64_t, uint64_t))v210)(v208, v249 + *(int *)(v209 + 20), v121);
      if (qword_10099B8A8 != -1) {
        swift_once(&qword_10099B8A8, sub_1006E33E8);
      }
      v250 = v348;
      v251 = sub_10000A720(v348, (uint64_t)qword_100A2B2E0);
      v252 = UUID.uuidString.getter(v251);
      v253 = v346;
      URL.appendingPathComponent(_:isDirectory:)(v252, v254, 1LL);
      swift_bridgeObjectRelease();
      v255 = *(void (**)(char *, char *, uint64_t))(v345 + 16);
      v256 = v320;
      v257 = v250;
      v255(v320, v253, v250);
      v258 = v336;
      v259 = (uint64_t)v322;
      v381 = &v322[*(int *)(v336 + 40)];
      v260 = v381;
      v376 = type metadata accessor for DirectorySequence(0LL);
      v261 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v376 - 8) + 56LL);
      v261(v260, 1LL, 1LL, v376);
      v255((char *)v259, v256, v257);
      *(void *)(v259 + *(int *)(v258 + 36)) = v349;
      v262 = v321;
      v255(v321, v256, v257);
      swift_retain();
      v263 = (uint64_t)v324;
      DirectorySequence.init(at:includingPropertiesForKeys:options:)(v262, 0LL, 0LL);
      v264 = *(void (**)(char *, uint64_t))(v345 + 8);
      v265 = v257;
      v264(v256, v257);
      v261((char *)v263, 0LL, 1LL, v376);
      sub_1000D4D50(v263, (uint64_t)v381, &qword_1009A7E78);
      v266 = v325;
      sub_100015750(v259, v325, &qword_1009A7E80);
      v267 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v326 + 56);
      v268 = (uint64_t)v323;
      v269 = v336;
      v267(v323, 1LL, 1LL, v336);
      sub_100015794(v268, &qword_1009A7E90);
      sub_100015750(v266, v268, &qword_1009A7E80);
      v267((char *)v268, 0LL, 1LL, v269);
      v270 = v327;
      sub_100015750(v268, v327, &qword_1009A7E88);
      v264(v346, v265);
      v271 = sub_100004AEC(&qword_1009A7E98);
      v272 = (void *)swift_allocObject(v271, *(unsigned int *)(v271 + 48), *(unsigned __int16 *)(v271 + 52));
      sub_100015750( v270,  (uint64_t)v272 + *(void *)(class metadata base offset for _SequenceBox + *v272 + 16LL),  &qword_1009A7E88);
      v273 = *(void *)(class metadata base offset for _SequenceBox + *v272 + 16LL);
      v367 = v272;
      v274 = (uint64_t)v272 + v273;
      v275 = sub_100004AEC(&qword_1009A7EB0);
      v276 = (void *)swift_allocObject(v275, *(unsigned int *)(v275 + 48), *(unsigned __int16 *)(v275 + 52));
      sub_10001581C( v274,  (uint64_t)v276 + *(void *)(class metadata base offset for _IteratorBox + *v276 + 16LL),  &qword_1009A7E88);
      v277 = (char *)v276 + *(void *)(class metadata base offset for _IteratorBox + *v276 + 16LL);
      v366 = v276;
      swift_retain();
      v278 = v329;
      v376 = (uint64_t)v277;
      sub_1005441EC(v329);
      v279 = v354;
      v381 = *(char **)(v328 + 48);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v381)(v278, 1LL, v354) != 1)
      {
        v370 = (v333 + 24) & v341;
        v369 = (v353 + v333 + v370) & v341;
        v368 = (char *)(v369 + v353);
        v286 = (uint64_t)v315;
        v287 = v380;
        do
        {
          sub_10002218C(v278, v286, type metadata accessor for OwnedDeviceKeyRecord);
          v288 = v286 + *(int *)(v279 + 20);
          v289 = v378;
          v290 = v208;
          v291 = v382;
          v292 = v375;
          ((void (*)(char *, char *, uint64_t))v375)(v378, v290, v382);
          v293 = v372;
          ((void (*)(char *, uint64_t, uint64_t))v292)(v372, v288, v291);
          v294 = swift_allocObject(&unk_100960B98, v368, v374);
          *(void *)(v294 + 16) = v287;
          v295 = *(void (**)(uint64_t, char *, uint64_t))(v379 + 32);
          v295(v294 + v370, v289, v291);
          v295(v294 + v369, v293, v291);
          v296 = swift_retain();
          v297 = static os_log_type_t.default.getter(v296);
          if (qword_10099B708 != -1) {
            swift_once(&qword_10099B708, sub_100651168);
          }
          v298 = qword_100A2B018;
          v299 = sub_100004AEC((uint64_t *)&unk_10099D740);
          v300 = swift_allocObject(v299, 72LL, 7LL);
          *(_OWORD *)(v300 + 16) = v373;
          v301 = v351;
          sub_10001DC4C(v286, v351, type metadata accessor for OwnedDeviceKeyRecord);
          v302 = String.init<A>(describing:)(v301, v354);
          v304 = v303;
          *(void *)(v300 + 56) = &type metadata for String;
          *(void *)(v300 + 64) = sub_1000226F4();
          *(void *)(v300 + 32) = v302;
          *(void *)(v300 + 40) = v304;
          v279 = v354;
          os_log(_:dso:log:_:_:)(v297, &_mh_execute_header, v298, "Attempting to remove: %@", 24LL, 2LL, v300);
          swift_bridgeObjectRelease();
          swift_retain();
          a3 = v377;
          sub_100556968(v286, v377, (void (*)(void))sub_100564800, v294);
          swift_release_n(v294, 2LL);
          sub_100018C68(v286, type metadata accessor for OwnedDeviceKeyRecord);
          sub_1005441EC(v278);
          v305 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v381)(v278, 1LL, v279);
          v287 = v380;
          v208 = v352;
        }

        while (v305 != 1);
      }

      swift_release_n(v366, 2LL);
      swift_release(v367);
      v371(v208, v382);
      sub_100018C68(v337, type metadata accessor for OwnedBeaconRecord);
      v207 = (uint64_t)v350;
    }

    else
    {
      v247(v245, 1LL, 1LL, v209);
      sub_100015794(v245, (uint64_t *)&unk_1009A9C30);
    }
  }

  v280 = *(void *)(a3 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
  v281 = type metadata accessor for BeaconKeyManager(0LL);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1005717C8, a3, v280, (char *)&type metadata for () + 8, v281);
  v282 = aBlock;
  v283 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v283);
  *((void *)&v306 - 4) = v207;
  *((void *)&v306 - 3) = v282;
  *((void *)&v306 - 2) = 0LL;
  *((void *)&v306 - 1) = 0LL;
  static Transaction.named<A>(_:with:)("com.apple.icloud.searchpartyd.KeyGenerationOperation", 52LL, 2LL, sub_1005646E4);
  swift_release(v282);
  sub_100013044(v207, (uint64_t)&aBlock);
  v284 = swift_allocObject(&unk_100960B70, 64LL, 7LL);
  *(void *)(v284 + 16) = a3;
  sub_100012EC0(&aBlock, v284 + 24);
  swift_retain();
  unsafeFromAsyncTask<A>(_:)(&unk_1009B2798, v284, (char *)&type metadata for () + 8);
  return swift_release(v284);
}

  swift_release();
  sub_1001B19C0(&v119);
  uint64_t v44 = v90[4];
  v118 = v44;
  v93 = v44 + 64;
  uint64_t v45 = 1LL << *(_BYTE *)(v44 + 32);
  uint64_t v46 = -1LL;
  if (v45 < 64) {
    uint64_t v46 = ~(-1LL << v45);
  }
  uint64_t v47 = v46 & *(void *)(v44 + 64);
  v95 = (unint64_t)(v45 + 63) >> 6;
  v98 = v44;
  uint64_t result = swift_bridgeObjectRetain_n(v44, 2LL);
  uint64_t v48 = 0LL;
  while (2)
  {
    if (v47)
    {
      uint64_t v49 = __clz(__rbit64(v47));
      v47 &= v47 - 1;
      uint64_t v50 = v49 | (v48 << 6);
LABEL_53:
      uint64_t v51 = *(void *)(*(void *)(v98 + 56) + 16 * v50 + 8);
      v105 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
      v113 = v52;
      v53._countAndFlagsBits = 118LL;
      v53._object = (void *)0xE100000000000000LL;
      String.append(_:)(v53);
      v54._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      String.append(_:)(v54);
      swift_bridgeObjectRelease();
      int v56 = v105;
      uint64_t v55 = v113;
      v106 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      v114 = v57;
      v58._countAndFlagsBits = 23328LL;
      v58._object = (void *)0xE200000000000000LL;
      String.append(_:)(v58);
      v117 = v51;
      v59._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
      String.append(_:)(v59);
      swift_bridgeObjectRelease();
      v60._countAndFlagsBits = 0x5D736574796220LL;
      v60._object = (void *)0xE700000000000000LL;
      String.append(_:)(v60);
      uint64_t v61 = swift_isUniquelyReferenced_nonNull_native(&_swiftEmptyDictionarySingleton);
      sub_10005C260(v106, v114, v56, v55, v61);
      swift_bridgeObjectRelease();
      uint64_t result = swift_bridgeObjectRelease();
      continue;
    }

    break;
  }

  uint64_t v62 = v48 + 1;
  if (__OFADD__(v48, 1LL)) {
    goto LABEL_100;
  }
  if (v62 >= v95)
  {
LABEL_73:
    swift_release();
    sub_1001B19C0(&v118);
    uint64_t v65 = v90[5];
    v117 = v65;
    v91 = v65 + 64;
    uint64_t v66 = 1LL << *(_BYTE *)(v65 + 32);
    uint64_t v67 = -1LL;
    if (v66 < 64) {
      uint64_t v67 = ~(-1LL << v66);
    }
    uint64_t v68 = v67 & *(void *)(v65 + 64);
    v92 = (unint64_t)(v66 + 63) >> 6;
    uint64_t result = swift_bridgeObjectRetain_n(v65, 2LL);
    for (uint64_t i = 0LL; ; uint64_t i = v99)
    {
      if (v68)
      {
        v68 &= v68 - 1;
        v99 = i;
      }

      else
      {
        v80 = i + 1;
        if (__OFADD__(i, 1LL)) {
          goto LABEL_101;
        }
        if (v80 >= v92)
        {
LABEL_97:
          swift_release();
          sub_1001B19C0(&v117);
          v84 = sub_100004AEC(&qword_1009BB3B8);
          v85 = swift_allocObject(v84, 352LL, 7LL);
          *(_OWORD *)(v85 + 16) = xmmword_1007E8280;
          *(void *)(v85 + 32) = 0x4E65636976726573LL;
          *(void *)(v85 + 40) = 0xEB00000000656D61LL;
          v86 = *v90;
          v87 = v90[1];
          *(void *)(v85 + 56) = &type metadata for String;
          *(void *)(v85 + 64) = v86;
          *(void *)(v85 + 72) = v87;
          *(void *)(v85 + 120) = &type metadata for String;
          *(void *)(v85 + 88) = &type metadata for String;
          *(void *)(v85 + 96) = 1953391987LL;
          *(void *)(v85 + 104) = 0xE400000000000000LL;
          v88 = sub_100004AEC(&qword_1009B1148);
          *(void *)(v85 + 128) = &_swiftEmptyDictionarySingleton;
          *(void *)(v85 + 152) = v88;
          strcpy((char *)(v85 + 160), "sentResource");
          *(_BYTE *)(v85 + 173) = 0;
          *(_WORD *)(v85 + 174) = -5120;
          *(void *)(v85 + 184) = &type metadata for String;
          *(void *)(v85 + 192) = &_swiftEmptyDictionarySingleton;
          *(void *)(v85 + 216) = v88;
          *(void *)(v85 + 224) = 0x6465766965636572LL;
          *(void *)(v85 + 232) = 0xE800000000000000LL;
          *(void *)(v85 + 248) = &type metadata for String;
          *(void *)(v85 + 256) = &_swiftEmptyDictionarySingleton;
          *(void *)(v85 + 280) = v88;
          *(void *)(v85 + 288) = 0xD000000000000010LL;
          *(void *)(v85 + 296) = 0x800000010086F160LL;
          *(void *)(v85 + 344) = v88;
          *(void *)(v85 + 312) = &type metadata for String;
          *(void *)(v85 + 320) = &_swiftEmptyDictionarySingleton;
          sub_100690F5C();
          v89 = swift_bridgeObjectRetain(v87);
          return NSDictionary.init(dictionaryLiteral:)(v85, v89);
        }

        v81 = *(void *)(v91 + 8 * v80);
        v82 = i + 1;
        if (!v81)
        {
          v82 = i + 2;
          if (i + 2 >= v92) {
            goto LABEL_97;
          }
          v81 = *(void *)(v91 + 8 * v82);
          if (!v81)
          {
            v82 = i + 3;
            if (i + 3 >= v92) {
              goto LABEL_97;
            }
            v81 = *(void *)(v91 + 8 * v82);
            if (!v81)
            {
              v82 = i + 4;
              if (i + 4 >= v92) {
                goto LABEL_97;
              }
              v81 = *(void *)(v91 + 8 * v82);
              if (!v81)
              {
                v82 = i + 5;
                if (i + 5 >= v92) {
                  goto LABEL_97;
                }
                v81 = *(void *)(v91 + 8 * v82);
                if (!v81)
                {
                  v83 = i + 6;
                  if (i + 6 >= v92) {
                    goto LABEL_97;
                  }
                  v81 = *(void *)(v91 + 8 * v83);
                  if (!v81)
                  {
                    while (1)
                    {
                      v82 = v83 + 1;
                      if (__OFADD__(v83, 1LL)) {
                        goto LABEL_105;
                      }
                      if (v82 >= v92) {
                        goto LABEL_97;
                      }
                      v81 = *(void *)(v91 + 8 * v82);
                      ++v83;
                      if (v81) {
                        goto LABEL_96;
                      }
                    }
                  }

                  v82 = i + 6;
                }
              }
            }
          }
        }

        __break(1u);
LABEL_50:
        __break(1u);
        goto LABEL_51;
      }

  __break(1u);
  return result;
}

  BOOL v41 = SPBeaconTaskNameBeginLeashing;
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    unint64_t v2 = sub_1004C5728(0LL, v2[2] + 1LL, 1, v2);
  }
  uint64_t v43 = v2[2];
  uint64_t v42 = v2[3];
  uint64_t v44 = v43 + 1;
  if (v43 >= v42 >> 1) {
    unint64_t v2 = sub_1004C5728((void *)(v42 > 1), v43 + 1, 1, v2);
  }
  v2[2] = v44;
  v2[v43 + 4] = v41;
  uint64_t v45 = v2[3];
  uint64_t v46 = v43 + 2;
  uint64_t v47 = SPBeaconTaskNameEndLeashing;
  v2[2] = v46;
  v2[v44 + 4] = v47;
  if ((a1 & 0x200) != 0)
  {
LABEL_56:
    uint64_t v48 = SPBeaconTaskNameAccessoryFirmwareUpdate;
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      unint64_t v2 = sub_1004C5728(0LL, v2[2] + 1LL, 1, v2);
    }
    uint64_t v50 = v2[2];
    uint64_t v49 = v2[3];
    if (v50 >= v49 >> 1) {
      unint64_t v2 = sub_1004C5728((void *)(v49 > 1), v50 + 1, 1, v2);
    }
    v2[2] = v50 + 1;
    v2[v50 + 4] = v48;
  }

  return v2;
}

        __break(1u);
        goto LABEL_50;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_49;
  }

  uint64_t v55 = sub_100015794((uint64_t)v34, &qword_1009A6108);
  int v56 = static os_log_type_t.error.getter(v55);
  if (qword_10099B700 != -1) {
    swift_once(&qword_10099B700, sub_100651100);
  }
  uint64_t v57 = qword_100A2B010;
  int v58 = sub_100004AEC((uint64_t *)&unk_10099D740);
  int v59 = swift_allocObject(v58, 112LL, 7LL);
  *(_OWORD *)(v59 + 16) = xmmword_1007E4750;
  int v60 = type metadata accessor for MessagingMessageContext(0LL);
  uint64_t v61 = (uint64_t *)(a4 + *(int *)(v60 + 48));
  uint64_t v63 = *v61;
  uint64_t v62 = v61[1];
  *(void *)(v59 + 56) = &type metadata for String;
  uint64_t v64 = a4;
  uint64_t v65 = sub_1000226F4();
  *(void *)(v59 + 64) = v65;
  *(void *)(v59 + 32) = v63;
  *(void *)(v59 + 40) = v62;
  swift_bridgeObjectRetain(v62);
  uint64_t v66 = v186;
  uint64_t v68 = UUID.uuidString.getter(v67);
  *(void *)(v59 + 96) = &type metadata for String;
  *(void *)(v59 + 104) = v65;
  *(void *)(v59 + 72) = v68;
  *(void *)(v59 + 80) = v69;
  os_log(_:dso:log:_:_:)(v56, &_mh_execute_header, v57, "Unknown requester: %@, beacon: %@", 33LL, 2LL, v59);
  swift_bridgeObjectRelease();
  uint64_t v70 = (char *)(v64 + *(int *)(v60 + 24));
  uint64_t v71 = *v70;
  uint64_t v72 = *((void *)v70 + 1);
  uint64_t v73 = *((void *)v70 + 2);
  uint64_t v74 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v74);
  *(&v158 - 6) = v189;
  *(&v158 - 5) = v66;
  *((_BYTE *)&v158 - 32) = v71;
  *(&v158 - 3) = v72;
  *(&v158 - 2) = v73;
  return static Transaction.named<A>(_:with:)("forceUnshare", 12LL, 2LL, sub_100706B98);
}

          (*(void (**)(uint64_t, uint64_t))(v228 + 8))((uint64_t)v231 + v230[39], v229);
          if ((_DWORD)v227)
          {
LABEL_37:
            (*(void (**)(uint64_t, uint64_t))(v228 + 8))((uint64_t)v231 + v230[40], v229);
            if (!(_DWORD)v78) {
              goto LABEL_38;
            }
            goto LABEL_51;
          }

        v86 = v30 + v18;
        a4 = v85;
        if (v85 < v81)
        {
          a2 = v31;
          if (v31 < a3) {
            continue;
          }
        }

        goto LABEL_70;
      }
    }

    goto LABEL_70;
  }

uint64_t sub_1000CCD0C( uint64_t result, unint64_t a2, char a3, uint64_t *a4, uint64_t *a5, unint64_t *a6, unint64_t *a7)
{
  uint64_t v13 = result;
  uint64_t v28 = result;
  unint64_t v14 = *(void *)(*v7 + 16);
  unint64_t v15 = *(void *)(*v7 + 24);
  if (v15 > v14 && (a3 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v16 = v14 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000C70C4(v16, a4, a5, a6);
  }

  else
  {
    if (v15 > v14)
    {
      uint64_t result = (uint64_t)sub_1000CF0FC(a4);
      goto LABEL_12;
    }

    sub_1000D2DE0(v16, a4, a5, a6);
  }

  uint64_t v17 = *v7;
  uint64_t v18 = *(void *)(*v7 + 40);
  uint64_t v8 = sub_100004AEC(a5);
  uint64_t v19 = sub_1000372EC(a6, a5, (uint64_t)&protocol conformance descriptor for XPCSession<A>);
  uint64_t result = dispatch thunk of Hashable._rawHashValue(seed:)(v18, v8, v19);
  uint64_t v20 = -1LL << *(_BYTE *)(v17 + 32);
  a2 = result & ~v20;
  if (((*(void *)(v17 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v21 = ~v20;
    uint64_t v22 = sub_1000372EC(a7, a5, (uint64_t)&protocol conformance descriptor for XPCSession<A>);
    do
    {
      uint64_t v27 = *(void *)(*(void *)(v17 + 48) + 8 * a2);
      uint64_t result = dispatch thunk of static Equatable.== infix(_:_:)(&v27, &v28, v8, v22);
      if ((result & 1) != 0) {
        goto LABEL_15;
      }
      a2 = (a2 + 1) & v21;
    }

    while (((*(void *)(v17 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

unint64_t sub_1000CCECC(unint64_t result, unint64_t a2, char a3)
{
  Swift::UInt32 v5 = result;
  unint64_t v6 = HIDWORD(result);
  unint64_t v7 = *(void *)(*v3 + 16);
  unint64_t v8 = *(void *)(*v3 + 24);
  if (v8 > v7 && (a3 & 1) != 0) {
    goto LABEL_15;
  }
  uint64_t v9 = v7 + 1;
  if ((a3 & 1) != 0)
  {
    sub_1000C81E4(v9);
  }

  else
  {
    if (v8 > v7)
    {
      uint64_t result = (unint64_t)sub_1000CF2A8();
      goto LABEL_15;
    }

    sub_1000D3E0C(v9);
  }

  uint64_t v10 = *v3;
  Hasher.init(_seed:)(v23, *(void *)(*v3 + 40));
  Hasher._combine(_:)(v5);
  Hasher._combine(_:)(v6);
  uint64_t result = Hasher._finalize()();
  uint64_t v11 = -1LL << *(_BYTE *)(v10 + 32);
  a2 = result & ~v11;
  if (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0)
  {
    uint64_t v12 = ~v11;
    do
    {
      uint64_t v13 = (int *)(*(void *)(v10 + 48) + 8 * a2);
      int v15 = *v13;
      int v14 = v13[1];
      if (v15 == v5 && v14 == (_DWORD)v6) {
        goto LABEL_18;
      }
      a2 = (a2 + 1) & v12;
    }

    while (((*(void *)(v10 + 56 + ((a2 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a2) & 1) != 0);
  }

Swift::Int sub_1000CD02C( Swift::Int result, unint64_t a2, Swift::UInt32 a3, unint64_t a4, char a5, uint64_t *a6)
{
  uint64_t v10 = result;
  unint64_t v11 = *(void *)(*v6 + 16);
  unint64_t v12 = *(void *)(*v6 + 24);
  if (v12 <= v11 || (a5 & 1) == 0)
  {
    uint64_t v13 = v11 + 1;
    if ((a5 & 1) != 0)
    {
      sub_1000C84A4(v13, a6);
    }

    else
    {
      if (v12 > v11)
      {
        uint64_t result = (Swift::Int)sub_1000CF43C(a6);
        goto LABEL_10;
      }

      sub_1000D409C(v13, a6);
    }

    uint64_t v14 = *v6;
    Hasher.init(_seed:)(&__s1, *(void *)(*v6 + 40));
    sub_10001736C(v10, a2);
    Data.hash(into:)(&__s1, v10, a2);
    sub_100016F9C(v10, a2);
    Hasher._combine(_:)(a3);
    uint64_t result = Hasher._finalize()();
    a4 = result & ~(-1LL << *(_BYTE *)(v14 + 32));
    if (((*(void *)(v14 + 56 + ((a4 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> a4) & 1) != 0) {
      __asm { BR              X8 }
    }
  }

void *sub_1000CDB10()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_1009A0AF0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

void *sub_1000CDCC0()
{
  return sub_1000CE5AC((uint64_t (*)(void))&type metadata accessor for UUID, &qword_1009A0A48);
}

id sub_1000CDCD4()
{
  return sub_1000CE3F8(&qword_1009A0BA8);
}

void sub_1000CDCE0()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_1009A0BC0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    swift_release();
    *uint64_t v1 = v4;
    return;
  }

  Swift::UInt32 v5 = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v21 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v21 >= v13) {
      goto LABEL_28;
    }
    unint64_t v22 = *(void *)(v6 + 8 * v21);
    ++v9;
    if (!v22)
    {
      int64_t v9 = v21 + 1;
      if (v21 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v22 = *(void *)(v6 + 8 * v9);
      if (!v22)
      {
        int64_t v9 = v21 + 2;
        if (v21 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v22 = *(void *)(v6 + 8 * v9);
        if (!v22) {
          break;
        }
      }
    }

void *sub_1000CDE9C()
{
  return sub_1000CED40(&qword_1009A0B58);
}

void *sub_1000CDEA8()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_1009A0CF8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    uint64_t result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }

  uint64_t result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v25 >= v13) {
      goto LABEL_28;
    }
    unint64_t v26 = *(void *)(v6 + 8 * v25);
    ++v9;
    if (!v26)
    {
      int64_t v9 = v25 + 1;
      if (v25 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v26 = *(void *)(v6 + 8 * v9);
      if (!v26)
      {
        int64_t v9 = v25 + 2;
        if (v25 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v26 = *(void *)(v6 + 8 * v9);
        if (!v26) {
          break;
        }
      }
    }

void sub_1000CE094()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_1009A0CF0);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    swift_release();
    *uint64_t v1 = v4;
    return;
  }

  Swift::UInt32 v5 = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v20 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v20 >= v13) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v6 + 8 * v20);
    ++v9;
    if (!v21)
    {
      int64_t v9 = v20 + 1;
      if (v20 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v6 + 8 * v9);
      if (!v21)
      {
        int64_t v9 = v20 + 2;
        if (v20 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v6 + 8 * v9);
        if (!v21) {
          break;
        }
      }
    }

void *sub_1000CE244()
{
  return sub_1000CF0FC(&qword_1009A0C20);
}

void sub_1000CE250()
{
  uint64_t v1 = v0;
  sub_100004AEC((uint64_t *)&unk_1009A0B38);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    swift_release();
    *uint64_t v1 = v4;
    return;
  }

  Swift::UInt32 v5 = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v18 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v18 >= v13) {
      goto LABEL_28;
    }
    unint64_t v19 = *(void *)(v6 + 8 * v18);
    ++v9;
    if (!v19)
    {
      int64_t v9 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v19 = *(void *)(v6 + 8 * v9);
      if (!v19)
      {
        int64_t v9 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v19 = *(void *)(v6 + 8 * v9);
        if (!v19) {
          break;
        }
      }
    }

id sub_1000CE3F8(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100004AEC(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (id)swift_release(v3);
    *uint64_t v2 = v5;
    return result;
  }

  id result = (id)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v19 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v19 >= v14) {
      goto LABEL_28;
    }
    unint64_t v20 = *(void *)(v7 + 8 * v19);
    ++v10;
    if (!v20)
    {
      int64_t v10 = v19 + 1;
      if (v19 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v20 = *(void *)(v7 + 8 * v10);
      if (!v20)
      {
        int64_t v10 = v19 + 2;
        if (v19 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v20 = *(void *)(v7 + 8 * v10);
        if (!v20) {
          break;
        }
      }
    }

void *sub_1000CE598()
{
  return sub_1000CE5AC( (uint64_t (*)(void))&type metadata accessor for CorrelationIdentifier,  &qword_1009A0BC8);
}

void *sub_1000CE5AC(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v4 = v2;
  uint64_t v5 = a1(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v27 - v7;
  sub_100004AEC(a2);
  uint64_t v9 = *v2;
  uint64_t v10 = static _SetStorage.copy(original:)(*v2);
  uint64_t v11 = v10;
  if (!*(void *)(v9 + 16))
  {
    id result = (void *)swift_release(v9);
LABEL_30:
    *uint64_t v4 = v11;
    return result;
  }

  uint64_t v28 = v4;
  id result = (void *)(v10 + 56);
  uint64_t v13 = v9 + 56;
  unint64_t v14 = (unint64_t)((1LL << *(_BYTE *)(v11 + 32)) + 63) >> 6;
  int64_t v16 = 0LL;
  *(void *)(v11 + 16) = *(void *)(v9 + 16);
  uint64_t v17 = 1LL << *(_BYTE *)(v9 + 32);
  uint64_t v18 = -1LL;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  unint64_t v19 = v18 & *(void *)(v9 + 56);
  int64_t v20 = (unint64_t)(v17 + 63) >> 6;
  while (1)
  {
    if (v19)
    {
      unint64_t v21 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v22 = v21 | (v16 << 6);
      goto LABEL_12;
    }

    int64_t v24 = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v24 >= v20) {
      goto LABEL_28;
    }
    unint64_t v25 = *(void *)(v13 + 8 * v24);
    ++v16;
    if (!v25)
    {
      int64_t v16 = v24 + 1;
      if (v24 + 1 >= v20) {
        goto LABEL_28;
      }
      unint64_t v25 = *(void *)(v13 + 8 * v16);
      if (!v25)
      {
        int64_t v16 = v24 + 2;
        if (v24 + 2 >= v20) {
          goto LABEL_28;
        }
        unint64_t v25 = *(void *)(v13 + 8 * v16);
        if (!v25) {
          break;
        }
      }
    }

void *sub_1000CE7D0()
{
  return sub_1000CF0FC(&qword_1009A0CA8);
}

void *sub_1000CE7DC(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100004AEC(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (void *)swift_release(v3);
    *uint64_t v2 = v5;
    return result;
  }

  id result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v7 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v7 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }

void *sub_1000CE968()
{
  return sub_1000CE97C(type metadata accessor for BeaconIdentifier, &qword_1009A0A68);
}

void *sub_1000CE97C(uint64_t (*a1)(void), uint64_t *a2)
{
  uint64_t v5 = v2;
  uint64_t v6 = a1(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v28 - v8;
  sub_100004AEC(a2);
  uint64_t v10 = *v2;
  uint64_t v11 = static _SetStorage.copy(original:)(*v2);
  uint64_t v12 = v11;
  if (!*(void *)(v10 + 16))
  {
    id result = (void *)swift_release();
LABEL_30:
    *uint64_t v5 = v12;
    return result;
  }

  uint64_t v29 = v5;
  id result = (void *)(v11 + 56);
  uint64_t v14 = v10 + 56;
  unint64_t v15 = (unint64_t)((1LL << *(_BYTE *)(v12 + 32)) + 63) >> 6;
  int64_t v17 = 0LL;
  *(void *)(v12 + 16) = *(void *)(v10 + 16);
  uint64_t v18 = 1LL << *(_BYTE *)(v10 + 32);
  uint64_t v19 = -1LL;
  if (v18 < 64) {
    uint64_t v19 = ~(-1LL << v18);
  }
  unint64_t v20 = v19 & *(void *)(v10 + 56);
  int64_t v21 = (unint64_t)(v18 + 63) >> 6;
  while (1)
  {
    if (v20)
    {
      unint64_t v22 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v23 = v22 | (v17 << 6);
      goto LABEL_12;
    }

    int64_t v25 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
      __break(1u);
      goto LABEL_32;
    }

    if (v25 >= v21) {
      goto LABEL_28;
    }
    unint64_t v26 = *(void *)(v14 + 8 * v25);
    ++v17;
    if (!v26)
    {
      int64_t v17 = v25 + 1;
      if (v25 + 1 >= v21) {
        goto LABEL_28;
      }
      unint64_t v26 = *(void *)(v14 + 8 * v17);
      if (!v26)
      {
        int64_t v17 = v25 + 2;
        if (v25 + 2 >= v21) {
          goto LABEL_28;
        }
        unint64_t v26 = *(void *)(v14 + 8 * v17);
        if (!v26) {
          break;
        }
      }
    }

void *sub_1000CEB94()
{
  return sub_1000CF0FC(&qword_1009A0BA0);
}

void *sub_1000CEBA0()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_1009A0A88);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

void *sub_1000CED34()
{
  return sub_1000CF0FC(&qword_1009A0C38);
}

void *sub_1000CED40(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100004AEC(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (void *)swift_release(v3);
    *uint64_t v2 = v5;
    return result;
  }

  id result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v7 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v7 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }

void sub_1000CEEC8()
{
  BOOL v31 = v0;
  uint64_t v1 = *v0;
  uint64_t v2 = static _SetStorage.copy(original:)(*v0);
  uint64_t v3 = v2;
  if (!*(void *)(v1 + 16))
  {
LABEL_28:
    swift_release();
    uint64_t *v31 = v3;
    return;
  }

  uint64_t v4 = (void *)(v2 + 56);
  uint64_t v5 = v1 + 56;
  unint64_t v6 = (unint64_t)((1LL << *(_BYTE *)(v3 + 32)) + 63) >> 6;
  int64_t v8 = 0LL;
  *(void *)(v3 + 16) = *(void *)(v1 + 16);
  uint64_t v9 = 1LL << *(_BYTE *)(v1 + 32);
  uint64_t v10 = -1LL;
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  unint64_t v11 = v10 & *(void *)(v1 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  while (1)
  {
    if (v11)
    {
      unint64_t v13 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v14 = v13 | (v8 << 6);
      goto LABEL_12;
    }

    int64_t v28 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v28 >= v12) {
      goto LABEL_28;
    }
    unint64_t v29 = *(void *)(v5 + 8 * v28);
    ++v8;
    if (!v29)
    {
      int64_t v8 = v28 + 1;
      if (v28 + 1 >= v12) {
        goto LABEL_28;
      }
      unint64_t v29 = *(void *)(v5 + 8 * v8);
      if (!v29)
      {
        int64_t v8 = v28 + 2;
        if (v28 + 2 >= v12) {
          goto LABEL_28;
        }
        unint64_t v29 = *(void *)(v5 + 8 * v8);
        if (!v29) {
          break;
        }
      }
    }

void *sub_1000CF0E4()
{
  return sub_1000CF0FC(&qword_1009A0AA8);
}

void *sub_1000CF0F0()
{
  return sub_1000CF0FC(&qword_1009A0B10);
}

void *sub_1000CF0FC(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100004AEC(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (void *)swift_release();
    *uint64_t v2 = v5;
    return result;
  }

  id result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v17 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v17 >= v14) {
      goto LABEL_28;
    }
    unint64_t v18 = *(void *)(v7 + 8 * v17);
    ++v10;
    if (!v18)
    {
      int64_t v10 = v17 + 1;
      if (v17 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v18 = *(void *)(v7 + 8 * v10);
      if (!v18)
      {
        int64_t v10 = v17 + 2;
        if (v17 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v18 = *(void *)(v7 + 8 * v10);
        if (!v18) {
          break;
        }
      }
    }

id sub_1000CF29C()
{
  return sub_1000CE3F8(&qword_1009A0AF8);
}

void *sub_1000CF2A8()
{
  uint64_t v1 = v0;
  sub_100004AEC(&qword_1009A0AE8);
  uint64_t v2 = *v0;
  uint64_t v3 = static _SetStorage.copy(original:)(*v0);
  uint64_t v4 = v3;
  if (!*(void *)(v2 + 16))
  {
LABEL_28:
    id result = (void *)swift_release(v2);
    *uint64_t v1 = v4;
    return result;
  }

  id result = (void *)(v3 + 56);
  uint64_t v6 = v2 + 56;
  unint64_t v7 = (unint64_t)((1LL << *(_BYTE *)(v4 + 32)) + 63) >> 6;
  int64_t v9 = 0LL;
  *(void *)(v4 + 16) = *(void *)(v2 + 16);
  uint64_t v10 = 1LL << *(_BYTE *)(v2 + 32);
  uint64_t v11 = -1LL;
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  unint64_t v12 = v11 & *(void *)(v2 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  while (1)
  {
    if (v12)
    {
      unint64_t v14 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v15 = v14 | (v9 << 6);
      goto LABEL_12;
    }

    int64_t v16 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v16 >= v13) {
      goto LABEL_28;
    }
    unint64_t v17 = *(void *)(v6 + 8 * v16);
    ++v9;
    if (!v17)
    {
      int64_t v9 = v16 + 1;
      if (v16 + 1 >= v13) {
        goto LABEL_28;
      }
      unint64_t v17 = *(void *)(v6 + 8 * v9);
      if (!v17)
      {
        int64_t v9 = v16 + 2;
        if (v16 + 2 >= v13) {
          goto LABEL_28;
        }
        unint64_t v17 = *(void *)(v6 + 8 * v9);
        if (!v17) {
          break;
        }
      }
    }

void *sub_1000CF43C(uint64_t *a1)
{
  uint64_t v2 = v1;
  sub_100004AEC(a1);
  uint64_t v3 = *v1;
  uint64_t v4 = static _SetStorage.copy(original:)(*v1);
  uint64_t v5 = v4;
  if (!*(void *)(v3 + 16))
  {
LABEL_28:
    id result = (void *)swift_release(v3);
    *uint64_t v2 = v5;
    return result;
  }

  id result = (void *)(v4 + 56);
  uint64_t v7 = v3 + 56;
  unint64_t v8 = (unint64_t)((1LL << *(_BYTE *)(v5 + 32)) + 63) >> 6;
  int64_t v10 = 0LL;
  *(void *)(v5 + 16) = *(void *)(v3 + 16);
  uint64_t v11 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(v3 + 56);
  int64_t v14 = (unint64_t)(v11 + 63) >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v10 << 6);
      goto LABEL_12;
    }

    int64_t v22 = v10 + 1;
    if (__OFADD__(v10, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v22 >= v14) {
      goto LABEL_28;
    }
    unint64_t v23 = *(void *)(v7 + 8 * v22);
    ++v10;
    if (!v23)
    {
      int64_t v10 = v22 + 1;
      if (v22 + 1 >= v14) {
        goto LABEL_28;
      }
      unint64_t v23 = *(void *)(v7 + 8 * v10);
      if (!v23)
      {
        int64_t v10 = v22 + 2;
        if (v22 + 2 >= v14) {
          goto LABEL_28;
        }
        unint64_t v23 = *(void *)(v7 + 8 * v10);
        if (!v23) {
          break;
        }
      }
    }

uint64_t sub_1000CF5F0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC((uint64_t *)&unk_1009A0D00);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
    goto LABEL_26;
  }

  unint64_t v16 = v2;
  uint64_t v6 = 1LL << *(_BYTE *)(v3 + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  else {
    uint64_t v7 = -1LL;
  }
  unint64_t v8 = v7 & *(void *)(v3 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  swift_retain(v3);
  if (v8)
  {
    unint64_t v10 = __clz(__rbit64(v8));
    goto LABEL_23;
  }

  if (v9 > 1)
  {
    unint64_t v11 = *(void *)(v3 + 64);
    uint64_t v12 = 1LL;
    if (v11) {
      goto LABEL_22;
    }
    uint64_t v12 = 2LL;
    if (v9 > 2)
    {
      unint64_t v11 = *(void *)(v3 + 72);
      if (v11) {
        goto LABEL_22;
      }
      uint64_t v12 = 3LL;
      if (v9 > 3)
      {
        unint64_t v11 = *(void *)(v3 + 80);
        if (!v11)
        {
          uint64_t v13 = 4LL;
          if (v9 > 4)
          {
            unint64_t v11 = *(void *)(v3 + 88);
            if (v11)
            {
              uint64_t v12 = 4LL;
              goto LABEL_22;
            }

            while (1)
            {
              uint64_t v12 = v13 + 1;
              if (__OFADD__(v13, 1LL))
              {
                __break(1u);
                JUMPOUT(0x1000CF994LL);
              }

              if (v12 >= v9) {
                break;
              }
              unint64_t v11 = *(void *)(v3 + 56 + 8 * v12);
              ++v13;
              if (v11) {
                goto LABEL_22;
              }
            }
          }

          goto LABEL_24;
        }

uint64_t sub_1000CF9B8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0AF0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  BOOL v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v13);
      if (!v19)
      {
        int64_t v13 = v18 + 2;
        if (v18 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v13);
        if (!v19) {
          break;
        }
      }
    }

LABEL_40:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

    *((void *)&v144 + 1) = &type metadata for Int;
    v145 = &protocol witness table for Int;
    *(void *)&v143 = v98;
    goto LABEL_41;
  }

      sub_1003CB7D4((void **)&v23, (const void **)&v22, &v21);
      return 1LL;
    }
  }

  else if (v8 >= -87)
  {
    if (a4 != __dst || &__dst[11 * v9] <= a4) {
      memmove(a4, __dst, 88 * v9);
    }
    uint64_t v12 = &v4[11 * v9];
    uint64_t v21 = (char *)v12;
    if ((unint64_t)v6 < a3 && v8 >= 88)
    {
      int64_t v13 = v4;
      while (1)
      {
        if (v13[8] >= v6[8])
        {
          uint64_t v4 = v13 + 11;
          unint64_t v15 = v13;
          unint64_t v14 = v6;
          if (v7 == v13)
          {
            v13 += 11;
            if (v7 < v4) {
              goto LABEL_18;
            }
          }

          else
          {
            v13 += 11;
          }
        }

        else
        {
          unint64_t v14 = v6 + 11;
          unint64_t v15 = v6;
          if (v7 == v6 && v7 < v14) {
            goto LABEL_18;
          }
        }

        memmove(v7, v15, 0x58uLL);
LABEL_18:
        v7 += 11;
        if (v13 < v12)
        {
          uint64_t v6 = v14;
        }

        uint64_t v22 = v4;
        uint64_t v23 = v7;
        goto LABEL_40;
      }
    }

    goto LABEL_40;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v89);
        aBlock = (void **)v89;
        sub_1000CA340(v92, v96, isUniquelyReferenced_nonNull_native);
        v89 = (uint64_t)aBlock;
        swift_bridgeObjectRelease();
        if (v90 == 7) {
          break;
        }
      }

      __break(1u);
LABEL_41:
      __break(1u);
LABEL_42:
      __break(1u);
LABEL_43:
      if (v22 < 0) {
        uint64_t v43 = v22;
      }
      else {
        uint64_t v43 = v22 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v22);
    }

  __break(1u);
}

        __break(1u);
        return _swiftEmptyArrayStorage;
      }

  if ((v5 & 0x800) == 0) {
    goto LABEL_43;
  }
  if (!XPC_ACTIVITY_CPU_INTENSIVE)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }

  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_CPU_INTENSIVE, 1);
LABEL_43:
  if ((v5 & 0x1000) == 0) {
    return;
  }
  if (!XPC_ACTIVITY_DISK_INTENSIVE)
  {
LABEL_59:
    __break(1u);
    return;
  }

  xpc_dictionary_set_BOOL(v2, XPC_ACTIVITY_DISK_INTENSIVE, 1);
}

    v197 = (v99 - 1) & v99;
    v97 = __clz(__rbit64(v99)) + (v88 << 6);
LABEL_41:
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v61 + 16))( v93,  v185[6] + *(void *)(v61 + 72) * v97,  v56);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v61 + 56))(v93, 0LL, 1LL, v56);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v61 + 48))(v93, 1LL, v56) == 1)
    {
      v221 = 0LL;
      swift_release();
      uint64_t v74 = v216;
      v87 = v193;
      int v58 = v191;
      uint64_t v70 = v218;
      v116 = (unint64_t)v194;
      goto LABEL_52;
    }

    v196 = v88;
    (*(void (**)(char *, uint64_t, uint64_t))(v61 + 32))(v94, v93, v56);
    == infix<A>(_:_:)(v218, v94, v56, &protocol witness table for UUID, &protocol witness table for String);
    v101 = v217;
    QueryType.filter(_:)(v96, v217, &protocol witness table for Table);
    v199(v96, v208);
    QueryType.limit(_:)(1LL, 0LL, v101, &protocol witness table for Table);
    v209((char *)v82, v101);
    v224 = v101;
    v225 = &protocol witness table for Table;
    v102 = (char *)sub_10000A7C8(&v222);
    v192(v102, v95, v101);
    Connection.prepare(_:)(&v222);
    v103 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v222);
    v104 = dispatch thunk of _AnySequenceBox.__copyToContiguousArray()(v103);
    swift_release();
    if (*(void *)(v104 + 16))
    {
      swift_release();
      v94 = v200;
      v209(v95, v217);
    }

    else
    {
      == infix<A>(_:_:)(v218, v200, v56, &protocol witness table for UUID, &protocol witness table for String);
      v221 = 0LL;
      v105 = v82;
      v106 = v217;
      QueryType.filter(_:)(v96, v217, &protocol witness table for Table);
      v107 = v208;
      v199(v96, v208);
      v108 = v180;
      QueryType.delete()(v106, &protocol witness table for Table);
      v109 = (void (*)(char *, uint64_t))v209;
      v209((char *)v105, v106);
      v110 = v221;
      Connection.run(_:)(v108);
      v221 = v110;
      if (v110)
      {
        swift_release();
        v167 = *(void (**)(uint64_t, void *))(v186 + 8);
        v168 = (unint64_t)v194;
        v167(v108, v194);
        v109(v184, v106);
        (*(void (**)(char *, uint64_t))(v61 + 8))(v200, v226);
        swift_release();
        v167((uint64_t)v181, (void *)v168);
        return ((uint64_t (*)(char *, uint64_t))v109)(v201, v106);
      }

      v111 = v108;
      v112 = (unint64_t)v194;
      v175 = *(void (**)(char *, unint64_t))(v186 + 8);
      v175((char *)v111, (unint64_t)v194);
      swift_release();
      v94 = v200;
      == infix<A>(_:_:)(v218, v200, v226, &protocol witness table for UUID, &protocol witness table for String);
      QueryType.filter(_:)(v96, v106, &protocol witness table for Table);
      v199(v96, v107);
      v113 = (void (*)(uint64_t, uint64_t))v109;
      v114 = v179;
      QueryType.delete()(v106, &protocol witness table for Table);
      v113(v105, v106);
      v115 = v221;
      Connection.run(_:)(v114);
      if (v115)
      {
        v169 = v175;
        v175(v114, v112);
        v170 = v217;
        v171 = v209;
        v209(v184, v217);
        (*(void (**)(char *, uint64_t))(v61 + 8))(v94, v226);
        swift_release();
        v169(v181, v112);
        return v171(v201, v170);
      }

      v175(v114, v112);
      int v56 = v226;
      v95 = v184;
      v96 = v207;
      v82 = v195;
      v209(v184, v217);
    }

    (*(void (**)(char *, uint64_t))(v61 + 8))(v94, v56);
    v93 = v198;
    v88 = v196;
    v92 = v197;
  }

  __break(1u);
LABEL_83:
  __break(1u);
  v222 = 0LL;
  v172 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  v173 = swift_dynamicCast(v172, &v222, v172, &type metadata for Never, 7LL);
  uint64_t result = swift_willThrowTypedImpl(v173, &type metadata for Never, &protocol witness table for Never);
  __break(1u);
  return result;
}

  swift_release();
  swift_bridgeObjectRelease();
  swift_retain();
  uint64_t v61 = sub_1004981A4((uint64_t)v45, a1);
  swift_release();
  swift_release();
  v103 = sub_1001899C8((uint64_t)v61);
  uint64_t v62 = v101;
  if (qword_10099B4C8 != -1) {
    swift_once(&qword_10099B4C8, sub_10047B404);
  }
  uint64_t v63 = type metadata accessor for Logger(0LL);
  sub_10000A720(v63, (uint64_t)qword_100A2AAA0);
  swift_bridgeObjectRetain(v62);
  uint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
  uint64_t v66 = static os_log_type_t.default.getter(v65);
  uint64_t v67 = os_log_type_enabled(v65, v66);
  v99 = v61;
  if (v67)
  {
    uint64_t v68 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v69 = swift_slowAlloc(32LL, -1LL);
    *(void *)&v108 = v69;
    *(_DWORD *)uint64_t v68 = 136315138;
    uint64_t v70 = type metadata accessor for UUID(0LL);
    swift_bridgeObjectRetain(v62);
    uint64_t v72 = Array.description.getter(v71, v70);
    uint64_t v74 = v73;
    swift_bridgeObjectRelease();
    v104 = sub_1003F11D4(v72, v74, (uint64_t *)&v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v68 + 4, v68 + 12);
    swift_bridgeObjectRelease_n(v62, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v65,  v66,  "All beacons that were configured for separation monitoring: %s",  v68,  0xCu);
    swift_arrayDestroy(v69, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1LL, -1LL);
    swift_slowDealloc(v68, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v62, 2LL);
  }

  swift_bridgeObjectRetain(v103);
  v76 = (os_log_s *)Logger.logObject.getter(v75);
  v77 = static os_log_type_t.default.getter(v76);
  if (os_log_type_enabled(v76, v77))
  {
    v78 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    v79 = swift_slowAlloc(32LL, -1LL);
    *(void *)&v108 = v79;
    *(_DWORD *)v78 = 136315138;
    v80 = type metadata accessor for UUID(0LL);
    v81 = v103;
    swift_bridgeObjectRetain(v103);
    v83 = Array.description.getter(v82, v80);
    v85 = v84;
    swift_bridgeObjectRelease();
    v104 = sub_1003F11D4(v83, v85, (uint64_t *)&v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, v105, v78 + 4, v78 + 12);
    swift_bridgeObjectRelease_n(v81, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v76,  v77,  "Beacons that can be monitored for separation from this device: %s",  v78,  0xCu);
    swift_arrayDestroy(v79, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v79, -1LL, -1LL);
    swift_slowDealloc(v78, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v103, 2LL);
  }

  v86 = (uint64_t)v99;
  a3 = v100;
  v87 = v102;
  _Block_copy(v100);
  v88 = sub_10047C81C(v86);
  sub_1006F16D4(v88);
  swift_bridgeObjectRelease();
  v89 = v87;
  sub_100022898(0LL, (unint64_t *)&unk_1009A0B20, &OBJC_CLASS___SPBeacon_ptr);
  sub_10014EFD4((unint64_t *)&qword_1009A4A10, (unint64_t *)&unk_1009A0B20, &OBJC_CLASS___SPBeacon_ptr);
  v90 = Set._bridgeToObjectiveC()().super.isa;
  (*((void (**)(char *, Class))a3 + 2))(a3, v90);
  swift_bridgeObjectRelease();

  _Block_release(a3);
  swift_bridgeObjectRelease();
LABEL_54:
  _Block_release(a3);
  _Block_release(a3);
  _Block_release(a3);
}

    swift_once(&qword_10099B798, sub_100651870);
    goto LABEL_22;
  }

  uint64_t v30 = static os_log_type_t.default.getter(v17);
  if (qword_10099B798 != -1) {
    swift_once(&qword_10099B798, sub_100651870);
  }
  uint64_t result = (uint64_t *)os_log(_:dso:log:_:_:)( v30,  &_mh_execute_header,  qword_100A2B0A8,  "Sent finalize pairing.",  22LL,  2LL,  _swiftEmptyArrayStorage);
  *(_BYTE *)(v27 + v28) = 4;
  return result;
}

    swift_bridgeObjectRelease();
    v118 = v203;
    sub_100015750((uint64_t)v29, (uint64_t)v203, &qword_10099D440);
    v119 = (uint64_t)v118;
    v120 = 0LL;
  }

  else
  {
    v118 = v203;
    v119 = (uint64_t)v203;
    v120 = 1LL;
  }

  v205(v119, v120, 1LL, v77);
  swift_bridgeObjectRelease();
  v121 = v116(v118, 1LL, v77);
  v122 = v204;
  if (v121 == 1)
  {
    sub_100015794((uint64_t)v118, &qword_1009B28A8);
    if (qword_10099B528 == -1)
    {
LABEL_44:
      v123 = type metadata accessor for Logger(0LL);
      sub_10000A720(v123, (uint64_t)qword_100A2AC98);
      v124 = v198;
      v125 = sub_10001DC4C(v213, v198, type metadata accessor for OwnedBeaconGroup);
      v126 = (os_log_s *)Logger.logObject.getter(v125);
      v127 = static os_log_type_t.default.getter(v126);
      v128 = os_log_type_enabled(v126, v127);
      v129 = v211;
      if (v128)
      {
        v130 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        v131 = swift_slowAlloc(32LL, -1LL);
        v215 = v131;
        *(_DWORD *)v130 = 136315138;
        v132 = type metadata accessor for UUID(0LL);
        v133 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        v134 = dispatch thunk of CustomStringConvertible.description.getter(v132, v133);
        v214 = sub_1003F11D4(v134, v135, &v215);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v214, &v215, v130 + 4, v130 + 12);
        swift_bridgeObjectRelease();
        sub_100018C68(v124, type metadata accessor for OwnedBeaconGroup);
        _os_log_impl( (void *)&_mh_execute_header,  v126,  v127,  "No multipart observation for group %s has been found, returning .unknown",  v130,  0xCu);
        swift_arrayDestroy(v131, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v131, -1LL, -1LL);
        swift_slowDealloc(v130, -1LL, -1LL);
      }

      else
      {

        sub_100018C68(v124, type metadata accessor for OwnedBeaconGroup);
      }

      v159 = v129;
LABEL_66:
      sub_100015794(v159, &qword_1009B28A8);
      sub_100015794((uint64_t)v200, &qword_1009B28A8);
      return 0LL;
    }

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
}

      sub_1003CB598((void **)&v26, &v25, &v24);
      return 1LL;
    }
  }

  else if (v8 >= -23)
  {
    if (__dst != __src || &__src[24 * v9] <= __dst) {
      memmove(__dst, __src, 24 * v9);
    }
    uint64_t v12 = &v4[24 * v9];
    uint64_t v24 = v12;
    if ((unint64_t)v6 < a3 && v8 >= 24)
    {
      int64_t v13 = v4;
      while (1)
      {
        if (*((void *)v6 + 2) >= *((void *)v13 + 2))
        {
          uint64_t v4 = v13 + 24;
          unint64_t v15 = v13;
          unint64_t v14 = v6;
          if (v7 == v13)
          {
            v13 += 24;
            if (v7 < v4) {
              goto LABEL_18;
            }
          }

          else
          {
            v13 += 24;
          }
        }

        else
        {
          unint64_t v14 = v6 + 24;
          unint64_t v15 = v6;
          if (v7 == v6 && v7 < v14) {
            goto LABEL_18;
          }
        }

        unint64_t v16 = *(_OWORD *)v15;
        *((void *)v7 + 2) = *((void *)v15 + 2);
        *(_OWORD *)uint64_t v7 = v16;
LABEL_18:
        v7 += 24;
        if (v13 < v12)
        {
          uint64_t v6 = v14;
        }

        unint64_t v25 = v4;
        unint64_t v26 = v7;
        goto LABEL_40;
      }
    }

    goto LABEL_40;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
}

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v5);
  __break(1u);
  return result;
}

uint64_t sub_1000CFC64(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC((uint64_t *)&unk_1009A0A50);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = result;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  unint64_t v28 = v2;
  int64_t v7 = 0LL;
  uint64_t v8 = v3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }

uint64_t sub_1000CFEC8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0BC0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v31 = v3 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v3 + 56);
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0LL;
  while (1)
  {
    if (v9)
    {
      unint64_t v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v32) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v31 + 8 * v17);
    ++v12;
    if (!v18)
    {
      int64_t v12 = v17 + 1;
      if (v17 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v31 + 8 * v12);
      if (!v18)
      {
        int64_t v12 = v17 + 2;
        if (v17 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v31 + 8 * v12);
        if (!v18) {
          break;
        }
      }
    }

uint64_t sub_1000D01B4(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0B58);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release(v3);
    goto LABEL_26;
  }

  uint64_t v6 = 1LL << *(_BYTE *)(v3 + 32);
  if (v6 < 64) {
    uint64_t v7 = ~(-1LL << v6);
  }
  else {
    uint64_t v7 = -1LL;
  }
  unint64_t v8 = v7 & *(void *)(v3 + 56);
  int64_t v9 = (unint64_t)(v6 + 63) >> 6;
  swift_retain();
  if (v8)
  {
    unint64_t v10 = __clz(__rbit64(v8));
    goto LABEL_23;
  }

  if (v9 > 1)
  {
    unint64_t v11 = *(void *)(v3 + 64);
    uint64_t v12 = 1LL;
    if (v11) {
      goto LABEL_22;
    }
    uint64_t v12 = 2LL;
    if (v9 > 2)
    {
      unint64_t v11 = *(void *)(v3 + 72);
      if (v11) {
        goto LABEL_22;
      }
      uint64_t v12 = 3LL;
      if (v9 > 3)
      {
        unint64_t v11 = *(void *)(v3 + 80);
        if (!v11)
        {
          uint64_t v13 = 4LL;
          if (v9 > 4)
          {
            unint64_t v11 = *(void *)(v3 + 88);
            if (v11)
            {
              uint64_t v12 = 4LL;
              goto LABEL_22;
            }

            while (1)
            {
              uint64_t v12 = v13 + 1;
              if (__OFADD__(v13, 1LL))
              {
                __break(1u);
                JUMPOUT(0x1000D06B8LL);
              }

              if (v12 >= v9) {
                break;
              }
              unint64_t v11 = *(void *)(v3 + 56 + 8 * v12);
              ++v13;
              if (v11) {
                goto LABEL_22;
              }
            }
          }

          goto LABEL_24;
        }

Swift::Int sub_1000D070C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0AA0);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  Swift::Int v6 = result;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  unint64_t v28 = v2;
  int64_t v7 = 0LL;
  Swift::Int v8 = v3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  Swift::Int v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }

unint64_t sub_1000D0990(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0CF8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  if (!*(void *)(v3 + 16))
  {
    unint64_t result = swift_release();
LABEL_28:
    *uint64_t v2 = v5;
    return result;
  }

  uint64_t v6 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v7 = v3 + 56;
  if (v6 < 64) {
    uint64_t v8 = ~(-1LL << v6);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v3 + 56);
  int64_t v10 = (unint64_t)(v6 + 63) >> 6;
  unint64_t result = swift_retain();
  int64_t v12 = 0LL;
  while (1)
  {
    if (v9)
    {
      unint64_t v13 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v14 = v13 | (v12 << 6);
      goto LABEL_10;
    }

    int64_t v32 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
      __break(1u);
      goto LABEL_30;
    }

    if (v32 >= v10) {
      goto LABEL_26;
    }
    unint64_t v33 = *(void *)(v7 + 8 * v32);
    ++v12;
    if (!v33)
    {
      int64_t v12 = v32 + 1;
      if (v32 + 1 >= v10) {
        goto LABEL_26;
      }
      unint64_t v33 = *(void *)(v7 + 8 * v12);
      if (!v33)
      {
        int64_t v12 = v32 + 2;
        if (v32 + 2 >= v10) {
          goto LABEL_26;
        }
        unint64_t v33 = *(void *)(v7 + 8 * v12);
        if (!v33) {
          break;
        }
      }
    }

uint64_t sub_1000D0C04(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0CF0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  __int128 v31 = v2;
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v11 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v32) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v13);
      if (!v19)
      {
        int64_t v13 = v18 + 2;
        if (v18 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v13);
        if (!v19) {
          break;
        }
      }
    }

uint64_t sub_1000D0EB0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v36 = *(void *)(v4 - 8);
  uint64_t v37 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v33 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_1009A0C58);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 0LL);
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = swift_release();
LABEL_37:
    *uint64_t v2 = v9;
    return result;
  }

  uint64_t v10 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  unint64_t v33 = v2;
  uint64_t v34 = v7 + 56;
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  else {
    uint64_t v12 = -1LL;
  }
  unint64_t v13 = v12 & v11;
  int64_t v35 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v14 = v8 + 56;
  uint64_t result = swift_retain();
  int64_t v16 = 0LL;
  while (1)
  {
    if (v13)
    {
      unint64_t v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }

    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v20 >= v35) {
      goto LABEL_35;
    }
    unint64_t v21 = *(void *)(v34 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v35) {
        goto LABEL_35;
      }
      unint64_t v21 = *(void *)(v34 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v35) {
          goto LABEL_35;
        }
        unint64_t v21 = *(void *)(v34 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }

LABEL_39:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  swift_release();
  a1 = v127;
LABEL_40:
  uint64_t v75 = v137;
  v76 = (unsigned int (*)(uint64_t, uint64_t, unint64_t))v136;
  objc_autoreleasePoolPop(v144);
  if (a1[v135] == 35) {
    sub_1000F1230((uint64_t)v70, v75);
  }
  else {
    sub_1000F0A44((uint64_t)v70, v75);
  }
  swift_bridgeObjectRelease();
  v77 = v132;
  sub_10001581C(v75, v132, (uint64_t *)&unk_1009A5990);
  if (v76(v77, 1LL, v2) == 1)
  {
    sub_100015794(v77, (uint64_t *)&unk_1009A5990);
    v78 = 0.0;
    goto LABEL_48;
  }

  v79 = sub_10002218C(v77, v131, type metadata accessor for BeaconObservation);
  v78 = fabs(Date.timeIntervalSinceNow.getter(v79));
  v80 = v125;
  sub_10001581C(v141, v125, (uint64_t *)&unk_1009A5990);
  v81 = v76(v80, 1LL, v2);
  sub_100015794(v80, (uint64_t *)&unk_1009A5990);
  if (v81 == 1 || v78 < v59)
  {
    v83 = v141;
    sub_100015794(v141, (uint64_t *)&unk_1009A5990);
    sub_10002218C(v131, v83, type metadata accessor for BeaconObservation);
    ((void (*)(uint64_t, void, uint64_t, unint64_t))v138)(v83, 0LL, 1LL, v2);
    v82 = v78;
  }

  else
  {
    sub_100303000(v131);
LABEL_48:
    v82 = v59;
  }

  v84 = qword_100A2A6C8;
  v143 = (char *)objc_autoreleasePoolPush();
  OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, v84, v139);
  v85 = v149;
  if (!v149[2])
  {
    swift_bridgeObjectRelease();
    v92 = _swiftEmptyArrayStorage;
    uint64_t v23 = v140;
    goto LABEL_67;
  }

  v86 = sub_10030D124((uint64_t)a1);
  uint64_t v23 = v140;
  if ((v87 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    v92 = _swiftEmptyArrayStorage;
    goto LABEL_67;
  }

  v88 = *(void *)(v85[7] + 8 * v86);
  swift_bridgeObjectRetain(v88);
  swift_bridgeObjectRelease();
  v89 = sub_1002FF0C8( v88,  &qword_1009A60C8,  (uint64_t (*)(uint64_t *, void *, uint64_t, uint64_t))sub_100301504);
  swift_bridgeObjectRelease();
  sub_1002FFE1C((uint64_t)v89);
  v91 = v90;
  swift_release();
  v92 = _swiftEmptyArrayStorage;
  v149 = _swiftEmptyArrayStorage;
  a1 = *(_BYTE **)(v91 + 16);
  if (a1)
  {
    uint64_t v2 = 0LL;
    __int128 v43 = type metadata accessor for BeaconObservation;
    v144 = *(char **)(v91 + 16);
    while (v2 < *(void *)(v91 + 16))
    {
      v93 = (*(unsigned __int8 *)(v146 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v146 + 80);
      v94 = *(void *)(v146 + 72);
      sub_10001DC4C(v91 + v93 + v94 * v2, v11, type metadata accessor for BeaconObservation);
      if (*(_BYTE *)(v11 + *(int *)(v145 + 24)) == 34)
      {
        uint64_t v23 = (char *)v11;
        sub_10002218C(v11, v8, type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native(v92) & 1) == 0) {
          sub_100032AA8(0, v92[2] + 1LL, 1);
        }
        v92 = v149;
        v96 = v149[2];
        v95 = v149[3];
        if (v96 >= v95 >> 1)
        {
          sub_100032AA8(v95 > 1, v96 + 1, 1);
          v92 = v149;
        }

        v92[2] = v96 + 1;
        sub_10002218C(v8, (uint64_t)v92 + v93 + v96 * v94, type metadata accessor for BeaconObservation);
        uint64_t v11 = (unint64_t)v23;
        a1 = v144;
      }

      else
      {
        sub_100303000(v11);
      }

      if (a1 == (_BYTE *)++v2)
      {
        v92 = v149;
        uint64_t v2 = v145;
        uint64_t v23 = v140;
        goto LABEL_66;
      }
    }

    goto LABEL_82;
  }

    unint64_t v27 = v126;
    if (v9 < v12) {
      goto LABEL_133;
    }
LABEL_40:
    if ((swift_isUniquelyReferenced_nonNull_native(v27) & 1) == 0) {
      unint64_t v27 = sub_1003CB1DC(0LL, *((void *)v27 + 2) + 1LL, 1, v27);
    }
    char v29 = *((void *)v27 + 2);
    unint64_t v28 = *((void *)v27 + 3);
    uint64_t v11 = v29 + 1;
    if (v29 >= v28 >> 1) {
      unint64_t v27 = sub_1003CB1DC((char *)(v28 > 1), v29 + 1, 1, v27);
    }
    *((void *)v27 + 2) = v11;
    unint64_t v30 = v27 + 32;
    BOOL v31 = &v27[16 * v29 + 32];
    *(void *)BOOL v31 = v12;
    *((void *)v31 + 1) = v9;
    v126 = v27;
    if (v29)
    {
      while (1)
      {
        uint64_t v32 = v11 - 1;
        if (v11 >= 4)
        {
          uint64_t v37 = &v30[16 * v11];
          __int128 v38 = *((void *)v37 - 8);
          __int128 v39 = *((void *)v37 - 7);
          __int128 v43 = __OFSUB__(v39, v38);
          __int128 v40 = v39 - v38;
          if (v43) {
            goto LABEL_122;
          }
          __int128 v42 = *((void *)v37 - 6);
          __int128 v41 = *((void *)v37 - 5);
          __int128 v43 = __OFSUB__(v41, v42);
          int64_t v35 = v41 - v42;
          uint64_t v36 = v43;
          if (v43) {
            goto LABEL_123;
          }
          __int128 v44 = v11 - 2;
          __int128 v45 = &v30[16 * v11 - 32];
          uint64_t v47 = *(void *)v45;
          uint64_t v46 = *((void *)v45 + 1);
          __int128 v43 = __OFSUB__(v46, v47);
          uint64_t v48 = v46 - v47;
          if (v43) {
            goto LABEL_125;
          }
          __int128 v43 = __OFADD__(v35, v48);
          uint64_t v49 = v35 + v48;
          if (v43) {
            goto LABEL_128;
          }
          if (v49 >= v40)
          {
            uint64_t v67 = &v30[16 * v32];
            uint64_t v69 = *(void *)v67;
            uint64_t v68 = *((void *)v67 + 1);
            __int128 v43 = __OFSUB__(v68, v69);
            uint64_t v70 = v68 - v69;
            if (v43) {
              goto LABEL_132;
            }
            int v60 = v35 < v70;
            goto LABEL_76;
          }
        }

        else
        {
          if (v11 != 3)
          {
            uint64_t v61 = *((void *)v27 + 4);
            uint64_t v62 = *((void *)v27 + 5);
            __int128 v43 = __OFSUB__(v62, v61);
            uint64_t v54 = v62 - v61;
            uint64_t v55 = v43;
            goto LABEL_70;
          }

          uint64_t v34 = *((void *)v27 + 4);
          unint64_t v33 = *((void *)v27 + 5);
          __int128 v43 = __OFSUB__(v33, v34);
          int64_t v35 = v33 - v34;
          uint64_t v36 = v43;
        }

        if ((v36 & 1) != 0) {
          goto LABEL_124;
        }
        __int128 v44 = v11 - 2;
        uint64_t v50 = &v30[16 * v11 - 32];
        uint64_t v52 = *(void *)v50;
        uint64_t v51 = *((void *)v50 + 1);
        int v53 = __OFSUB__(v51, v52);
        uint64_t v54 = v51 - v52;
        uint64_t v55 = v53;
        if (v53) {
          goto LABEL_127;
        }
        int v56 = &v30[16 * v32];
        int v58 = *(void *)v56;
        uint64_t v57 = *((void *)v56 + 1);
        __int128 v43 = __OFSUB__(v57, v58);
        int v59 = v57 - v58;
        if (v43) {
          goto LABEL_130;
        }
        if (__OFADD__(v54, v59)) {
          goto LABEL_131;
        }
        if (v54 + v59 >= v35)
        {
          int v60 = v35 < v59;
LABEL_76:
          if (v60) {
            uint64_t v32 = v44;
          }
          goto LABEL_78;
        }

  sub_1000A6F30(v8);
}

  v119 = v112;

  swift_bridgeObjectRelease_n(v115, 2LL);
  a3 = 30.0;
LABEL_52:
  if (qword_10099B340 != -1) {
    swift_once(&qword_10099B340, sub_10037453C);
  }
  v131 = sub_10000A720(v164, (uint64_t)qword_1009AACC8);
  v132 = (os_log_s *)Logger.logObject.getter(v131);
  v133 = static os_log_type_t.default.getter(v132);
  if (os_log_type_enabled(v132, v133))
  {
    v134 = swift_slowAlloc(22LL, -1LL);
    v135 = swift_slowAlloc(32LL, -1LL);
    v197 = v135;
    *(_DWORD *)v134 = 136315394;
    v193 = sub_1003F11D4(0xD000000000000029LL, 0x800000010085F940LL, &v197);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194, v134 + 4, v134 + 12);
    *(_WORD *)(v134 + 12) = 2048;
    v193 = *(void *)&a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194, v134 + 14, v134 + 22);
    _os_log_impl( (void *)&_mh_execute_header,  v132,  v133,  "%s scheduling timeout block after %f seconds",  (uint8_t *)v134,  0x16u);
    swift_arrayDestroy(v135, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v135, -1LL, -1LL);
    swift_slowDealloc(v134, -1LL, -1LL);
  }

  v136 = v184;
  static DispatchTime.now()(v137);
  v138 = v186;
  + infix(_:_:)(v136, a3);
  v139 = *(void (**)(char *, uint64_t))(v185 + 8);
  v140 = v187;
  v139(v136, v187);
  v141 = v189;
  v142 = *(void *)(v189 + v72[7]);
  swift_retain();
  OS_dispatch_queue.asyncAfter(deadline:execute:)(v138, v142);
  swift_release();
  v139(v138, v140);
  sub_100015794((uint64_t)v200, (uint64_t *)&unk_1009A9C40);
  return sub_100018C68(v141, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
}

    v50(v69, v29);
    goto LABEL_40;
  }

  swift_bridgeObjectRetain(v90);
  v91 = sub_10030D124(v40);
  if ((v92 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    goto LABEL_34;
  }

  v93 = *(void *)(*(void *)(v90 + 56) + 8 * v91);
  swift_retain();
  swift_bridgeObjectRelease();
  v94 = v128;
  if (v128)
  {
    swift_errorRetain(v128);
    if (qword_10099B330 != -1) {
      swift_once(&qword_10099B330, sub_100374304);
    }
    v95 = type metadata accessor for Logger(0LL);
    sub_10000A720(v95, (uint64_t)qword_100A2A748);
    v134(v78, v40, v29);
    swift_errorRetain(v94);
    v96 = swift_errorRetain(v94);
    v97 = (os_log_s *)Logger.logObject.getter(v96);
    v98 = static os_log_type_t.error.getter(v97);
    v99 = v98;
    if (os_log_type_enabled(v97, v98))
    {
      v100 = v78;
      v101 = swift_slowAlloc(32LL, -1LL);
      v138 = swift_slowAlloc(64LL, -1LL);
      v142 = v138;
      *(_DWORD *)v101 = 141558531;
      v139 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v101 + 4, v101 + 12);
      *(_WORD *)(v101 + 12) = 2081;
      v102 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      LODWORD(v137) = v99;
      v103 = dispatch thunk of CustomStringConvertible.description.getter(v29, v102);
      v139 = sub_1003F11D4(v103, v104, &v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v101 + 14, v101 + 22);
      swift_bridgeObjectRelease();
      v50(v100, v29);
      *(_WORD *)(v101 + 22) = 2082;
      v139 = v94;
      swift_errorRetain(v94);
      v105 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      v106 = String.init<A>(describing:)(&v139, v105);
      v139 = sub_1003F11D4(v106, v107, &v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v101 + 24, v101 + 32);
      swift_bridgeObjectRelease();
      swift_errorRelease(v94);
      swift_errorRelease(v94);
      _os_log_impl( (void *)&_mh_execute_header,  v97,  (os_log_type_t)v137,  "didStopPlayingSoundOnDevice %{private,mask.hash}s failed due to %{public}s",  (uint8_t *)v101,  0x20u);
      v108 = v138;
      swift_arrayDestroy(v138, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v108, -1LL, -1LL);
      swift_slowDealloc(v101, -1LL, -1LL);
    }

    else
    {
      v50(v78, v29);
      swift_errorRelease(v94);
      swift_errorRelease(v94);
    }

    v142 = v94;
    swift_errorRetain(v94);
    PassthroughSubject.send(completion:)(&v142);
    swift_release(v93);
    swift_errorRelease(v94);
    swift_errorRelease(v94);
  }

  else
  {
    if (qword_10099B330 != -1) {
      swift_once(&qword_10099B330, sub_100374304);
    }
    v114 = type metadata accessor for Logger(0LL);
    sub_10000A720(v114, (uint64_t)qword_100A2A748);
    v115 = v127;
    v116 = v134(v127, v40, v29);
    v117 = (os_log_s *)Logger.logObject.getter(v116);
    v118 = static os_log_type_t.default.getter(v117);
    if (os_log_type_enabled(v117, v118))
    {
      v119 = swift_slowAlloc(22LL, -1LL);
      v120 = swift_slowAlloc(32LL, -1LL);
      v142 = v120;
      *(_DWORD *)v119 = 141558275;
      v139 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v119 + 4, v119 + 12);
      *(_WORD *)(v119 + 12) = 2081;
      v137 = v93;
      v121 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      v122 = dispatch thunk of CustomStringConvertible.description.getter(v29, v121);
      v139 = sub_1003F11D4(v122, v123, &v142);
      v93 = v137;
      __int128 v40 = v138;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v119 + 14, v119 + 22);
      swift_bridgeObjectRelease();
      v50(v115, v29);
      _os_log_impl( (void *)&_mh_execute_header,  v117,  v118,  "didStopPlayingSoundOnDevice %{private,mask.hash}s succeeded",  (uint8_t *)v119,  0x16u);
      swift_arrayDestroy(v120, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v120, -1LL, -1LL);
      swift_slowDealloc(v119, -1LL, -1LL);
    }

    else
    {
      v50(v115, v29);
    }

    PassthroughSubject.send(_:)(v40);
    v142 = 4LL;
    PassthroughSubject.send(completion:)(&v142);
    swift_release(v93);
  }

  __break(1u);
}

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
LABEL_40:
  __break(1u);
LABEL_41:
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  v1 |= 0x400uLL;
  if ((a1 & 0x800) != 0)
  {
LABEL_40:
    v1 |= 0x800uLL;
    if ((a1 & 0x200) == 0) {
      goto LABEL_43;
    }
LABEL_41:
    if ((v1 & 0x200) != 0) {
      goto LABEL_43;
    }
    goto LABEL_42;
  }

            (*(void (**)(uint64_t, uint64_t))(v228 + 8))((uint64_t)v231 + v230[42], v229);
            goto LABEL_40;
          }

unint64_t sub_1000D1200(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC((uint64_t *)&unk_1009A0B38);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
LABEL_27:
    unint64_t result = swift_release();
    *uint64_t v2 = v6;
    return result;
  }

  int64_t v22 = v2;
  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  unint64_t result = swift_retain();
  int64_t v14 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v16 = v15 | (v14 << 6);
      goto LABEL_10;
    }

    int64_t v19 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
      __break(1u);
      goto LABEL_29;
    }

    if (v19 >= v11) {
      goto LABEL_26;
    }
    unint64_t v20 = *(void *)(v8 + 8 * v19);
    ++v14;
    if (!v20)
    {
      int64_t v14 = v19 + 1;
      if (v19 + 1 >= v11) {
        goto LABEL_26;
      }
      unint64_t v20 = *(void *)(v8 + 8 * v14);
      if (!v20)
      {
        int64_t v14 = v19 + 2;
        if (v19 + 2 >= v11) {
          goto LABEL_26;
        }
        unint64_t v20 = *(void *)(v8 + 8 * v14);
        if (!v20) {
          break;
        }
      }
    }

uint64_t sub_1000D1410(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for BeaconStatus(0LL);
  uint64_t v38 = *(void *)(v4 - 8);
  uint64_t v39 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v35 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *v1;
  if (*(void *)(*v1 + 24) > a1) {
    a1 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0B48);
  uint64_t v8 = static _SetStorage.resize(original:capacity:move:)(v7, a1, 0LL);
  uint64_t v9 = v8;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = swift_release();
LABEL_37:
    *uint64_t v2 = v9;
    return result;
  }

  uint64_t v10 = 1LL << *(_BYTE *)(v7 + 32);
  uint64_t v11 = *(void *)(v7 + 56);
  int64_t v35 = v1;
  uint64_t v36 = v7 + 56;
  if (v10 < 64) {
    uint64_t v12 = ~(-1LL << v10);
  }
  else {
    uint64_t v12 = -1LL;
  }
  unint64_t v13 = v12 & v11;
  int64_t v37 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v14 = v8 + 56;
  uint64_t result = swift_retain();
  int64_t v16 = 0LL;
  while (1)
  {
    if (v13)
    {
      unint64_t v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_26;
    }

    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v20 >= v37) {
      goto LABEL_35;
    }
    unint64_t v21 = *(void *)(v36 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v37) {
        goto LABEL_35;
      }
      unint64_t v21 = *(void *)(v36 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v37) {
          goto LABEL_35;
        }
        unint64_t v21 = *(void *)(v36 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }

uint64_t sub_1000D1798(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(a2);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0LL);
  uint64_t v7 = v6;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release(v4);
LABEL_38:
    *uint64_t v3 = v7;
    return result;
  }

  uint64_t v8 = 1LL << *(_BYTE *)(v4 + 32);
  uint64_t v34 = v3;
  uint64_t v35 = v4 + 56;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v4 + 56);
  int64_t v36 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 56;
  uint64_t result = swift_retain(v4);
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v15 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v16 = v15 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v36) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v35 + 8 * v17);
    ++v13;
    if (!v18)
    {
      int64_t v13 = v17 + 1;
      if (v17 + 1 >= v36) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v35 + 8 * v13);
      if (!v18)
      {
        int64_t v13 = v17 + 2;
        if (v17 + 2 >= v36) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v35 + 8 * v13);
        if (!v18) {
          break;
        }
      }
    }

uint64_t sub_1000D1A70( uint64_t a1, uint64_t (*a2)(uint64_t), uint64_t *a3, unint64_t *a4, uint64_t a5)
{
  __int128 v43 = a4;
  uint64_t v44 = a5;
  uint64_t v7 = v5;
  __int128 v42 = a2;
  uint64_t v9 = a2(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v39 - v11;
  uint64_t v13 = *v7;
  if (*(void *)(*v7 + 24) > a1) {
    a1 = *(void *)(*v7 + 24);
  }
  sub_100004AEC(a3);
  uint64_t v14 = static _SetStorage.resize(original:capacity:move:)(v13, a1, 0LL);
  uint64_t v15 = v14;
  if (!*(void *)(v13 + 16))
  {
    uint64_t result = swift_release(v13);
LABEL_37:
    *uint64_t v7 = v15;
    return result;
  }

  uint64_t v16 = 1LL << *(_BYTE *)(v13 + 32);
  uint64_t v17 = *(void *)(v13 + 56);
  uint64_t v39 = v7;
  uint64_t v40 = v13 + 56;
  if (v16 < 64) {
    uint64_t v18 = ~(-1LL << v16);
  }
  else {
    uint64_t v18 = -1LL;
  }
  unint64_t v19 = v18 & v17;
  int64_t v41 = (unint64_t)(v16 + 63) >> 6;
  uint64_t v20 = v14 + 56;
  uint64_t result = swift_retain();
  int64_t v22 = 0LL;
  while (1)
  {
    if (v19)
    {
      unint64_t v24 = __clz(__rbit64(v19));
      v19 &= v19 - 1;
      unint64_t v25 = v24 | (v22 << 6);
      goto LABEL_26;
    }

    int64_t v26 = v22 + 1;
    if (__OFADD__(v22, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v26 >= v41) {
      goto LABEL_35;
    }
    unint64_t v27 = *(void *)(v40 + 8 * v26);
    ++v22;
    if (!v27)
    {
      int64_t v22 = v26 + 1;
      if (v26 + 1 >= v41) {
        goto LABEL_35;
      }
      unint64_t v27 = *(void *)(v40 + 8 * v22);
      if (!v27)
      {
        int64_t v22 = v26 + 2;
        if (v26 + 2 >= v41) {
          goto LABEL_35;
        }
        unint64_t v27 = *(void *)(v40 + 8 * v22);
        if (!v27) {
          break;
        }
      }
    }

uint64_t sub_1000D1D8C(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0BF8);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = result;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  int64_t v28 = v2;
  int64_t v7 = 0LL;
  uint64_t v8 = v3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }

uint64_t sub_1000D2010(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for RawSearchResult(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  int64_t v7 = (char *)&v26 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_1009A0C00);
  uint64_t v9 = static _SetStorage.resize(original:capacity:move:)(v8, a1, 0LL);
  uint64_t v10 = v9;
  if (!*(void *)(v8 + 16))
  {
    uint64_t result = swift_release();
LABEL_27:
    *uint64_t v2 = v10;
    return result;
  }

  uint64_t v11 = 1LL << *(_BYTE *)(v8 + 32);
  uint64_t v12 = *(void *)(v8 + 56);
  BOOL v26 = v2;
  uint64_t v27 = v8 + 56;
  if (v11 < 64) {
    uint64_t v13 = ~(-1LL << v11);
  }
  else {
    uint64_t v13 = -1LL;
  }
  unint64_t v14 = v13 & v12;
  int64_t v28 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v15 = v9 + 56;
  uint64_t result = swift_retain();
  int64_t v17 = 0LL;
  while (1)
  {
    if (v14)
    {
      unint64_t v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      unint64_t v19 = v18 | (v17 << 6);
      goto LABEL_9;
    }

    int64_t v23 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
      __break(1u);
      goto LABEL_29;
    }

    if (v23 >= v28) {
      goto LABEL_25;
    }
    unint64_t v24 = *(void *)(v27 + 8 * v23);
    ++v17;
    if (!v24)
    {
      int64_t v17 = v23 + 1;
      if (v23 + 1 >= v28) {
        goto LABEL_25;
      }
      unint64_t v24 = *(void *)(v27 + 8 * v17);
      if (!v24)
      {
        int64_t v17 = v23 + 2;
        if (v23 + 2 >= v28) {
          goto LABEL_25;
        }
        unint64_t v24 = *(void *)(v27 + 8 * v17);
        if (!v24) {
          break;
        }
      }
    }

uint64_t sub_1000D22AC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0CA8);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v30 = v2;
  uint64_t v31 = v3 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v3 + 56);
  int64_t v32 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0LL;
  while (1)
  {
    if (v9)
    {
      unint64_t v14 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      unint64_t v15 = v14 | (v12 << 6);
      goto LABEL_27;
    }

    int64_t v16 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v16 >= v32) {
      goto LABEL_36;
    }
    unint64_t v17 = *(void *)(v31 + 8 * v16);
    ++v12;
    if (!v17)
    {
      int64_t v12 = v16 + 1;
      if (v16 + 1 >= v32) {
        goto LABEL_36;
      }
      unint64_t v17 = *(void *)(v31 + 8 * v12);
      if (!v17)
      {
        int64_t v12 = v16 + 2;
        if (v16 + 2 >= v32) {
          goto LABEL_36;
        }
        unint64_t v17 = *(void *)(v31 + 8 * v12);
        if (!v17) {
          break;
        }
      }
    }

uint64_t sub_1000D2590(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(a2);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0LL);
  uint64_t v7 = result;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release(v4);
LABEL_38:
    *uint64_t v3 = v7;
    return result;
  }

  uint64_t v29 = v3;
  int64_t v8 = 0LL;
  uint64_t v9 = v4 + 56;
  uint64_t v10 = 1LL << *(_BYTE *)(v4 + 32);
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  else {
    uint64_t v11 = -1LL;
  }
  unint64_t v12 = v11 & *(void *)(v4 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  uint64_t v14 = result + 56;
  while (1)
  {
    if (v12)
    {
      unint64_t v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v17 = v16 | (v8 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v13) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v9 + 8 * v18);
    ++v8;
    if (!v19)
    {
      int64_t v8 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v9 + 8 * v8);
      if (!v19)
      {
        int64_t v8 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v9 + 8 * v8);
        if (!v19) {
          break;
        }
      }
    }

Swift::Int sub_1000D27EC(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  Swift::Int v4 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(a2);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0LL);
  Swift::Int v7 = result;
  if (!*(void *)(v4 + 16))
  {
    Swift::Int result = swift_release(v4);
LABEL_38:
    *uint64_t v3 = v7;
    return result;
  }

  uint64_t v29 = v3;
  int64_t v8 = 0LL;
  Swift::Int v9 = v4 + 56;
  uint64_t v10 = 1LL << *(_BYTE *)(v4 + 32);
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  else {
    uint64_t v11 = -1LL;
  }
  unint64_t v12 = v11 & *(void *)(v4 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  Swift::Int v14 = result + 56;
  while (1)
  {
    if (v12)
    {
      unint64_t v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v17 = v16 | (v8 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v13) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v9 + 8 * v18);
    ++v8;
    if (!v19)
    {
      int64_t v8 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v9 + 8 * v8);
      if (!v19)
      {
        int64_t v8 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v9 + 8 * v8);
        if (!v19) {
          break;
        }
      }
    }

uint64_t sub_1000D2A60(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v40 = *(void *)(v4 - 8);
  uint64_t v41 = v4;
  __chkstk_darwin(v4);
  uint64_t v42 = (uint64_t)&v36 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *v2;
  if (*(void *)(*v2 + 24) > a1) {
    a1 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(&qword_1009A0A68);
  uint64_t v7 = static _SetStorage.resize(original:capacity:move:)(v6, a1, 0LL);
  uint64_t v8 = v7;
  if (!*(void *)(v6 + 16))
  {
    uint64_t result = swift_release();
LABEL_37:
    *uint64_t v2 = v8;
    return result;
  }

  uint64_t v9 = 1LL << *(_BYTE *)(v6 + 32);
  uint64_t v10 = *(void *)(v6 + 56);
  BOOL v37 = v2;
  uint64_t v38 = v6 + 56;
  if (v9 < 64) {
    uint64_t v11 = ~(-1LL << v9);
  }
  else {
    uint64_t v11 = -1LL;
  }
  unint64_t v12 = v11 & v10;
  int64_t v39 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = v7 + 56;
  uint64_t result = swift_retain();
  int64_t v15 = 0LL;
  unint64_t v16 = type metadata accessor for BeaconIdentifier;
  while (1)
  {
    if (v12)
    {
      unint64_t v18 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v19 = v18 | (v15 << 6);
      goto LABEL_26;
    }

    int64_t v20 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_38:
      __break(1u);
      goto LABEL_39;
    }

    if (v20 >= v39) {
      goto LABEL_35;
    }
    unint64_t v21 = *(void *)(v38 + 8 * v20);
    ++v15;
    if (!v21)
    {
      int64_t v15 = v20 + 1;
      if (v20 + 1 >= v39) {
        goto LABEL_35;
      }
      unint64_t v21 = *(void *)(v38 + 8 * v15);
      if (!v21)
      {
        int64_t v15 = v20 + 2;
        if (v20 + 2 >= v39) {
          goto LABEL_35;
        }
        unint64_t v21 = *(void *)(v38 + 8 * v15);
        if (!v21) {
          break;
        }
      }
    }

uint64_t sub_1000D2DE0(uint64_t a1, uint64_t *a2, uint64_t *a3, unint64_t *a4)
{
  uint64_t v6 = v4;
  uint64_t v7 = *v4;
  if (*(void *)(*v4 + 24) <= a1) {
    uint64_t v8 = a1;
  }
  else {
    uint64_t v8 = *(void *)(*v4 + 24);
  }
  sub_100004AEC(a2);
  uint64_t v9 = static _SetStorage.resize(original:capacity:move:)(v7, v8, 0LL);
  uint64_t v10 = v9;
  if (!*(void *)(v7 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    *uint64_t v6 = v10;
    return result;
  }

  uint64_t v11 = 1LL << *(_BYTE *)(v7 + 32);
  BOOL v34 = v6;
  uint64_t v35 = v7 + 56;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  else {
    uint64_t v12 = -1LL;
  }
  unint64_t v13 = v12 & *(void *)(v7 + 56);
  int64_t v36 = (unint64_t)(v11 + 63) >> 6;
  uint64_t v14 = v9 + 56;
  uint64_t result = swift_retain();
  int64_t v16 = 0LL;
  while (1)
  {
    if (v13)
    {
      unint64_t v18 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v19 = v18 | (v16 << 6);
      goto LABEL_27;
    }

    int64_t v20 = v16 + 1;
    if (__OFADD__(v16, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v20 >= v36) {
      goto LABEL_36;
    }
    unint64_t v21 = *(void *)(v35 + 8 * v20);
    ++v16;
    if (!v21)
    {
      int64_t v16 = v20 + 1;
      if (v20 + 1 >= v36) {
        goto LABEL_36;
      }
      unint64_t v21 = *(void *)(v35 + 8 * v16);
      if (!v21)
      {
        int64_t v16 = v20 + 2;
        if (v20 + 2 >= v36) {
          goto LABEL_36;
        }
        unint64_t v21 = *(void *)(v35 + 8 * v16);
        if (!v21) {
          break;
        }
      }
    }

uint64_t sub_1000D30BC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0A88);
  uint64_t result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = result;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  unint64_t v28 = v2;
  int64_t v7 = 0LL;
  uint64_t v8 = v3 + 56;
  uint64_t v9 = 1LL << *(_BYTE *)(v3 + 32);
  if (v9 < 64) {
    uint64_t v10 = ~(-1LL << v9);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v3 + 56);
  int64_t v12 = (unint64_t)(v9 + 63) >> 6;
  uint64_t v13 = result + 56;
  while (1)
  {
    if (v11)
    {
      unint64_t v15 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v16 = v15 | (v7 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v7 + 1;
    if (__OFADD__(v7, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v12) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v8 + 8 * v17);
    ++v7;
    if (!v18)
    {
      int64_t v7 = v17 + 1;
      if (v17 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v8 + 8 * v7);
      if (!v18)
      {
        int64_t v7 = v17 + 2;
        if (v17 + 2 >= v12) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v8 + 8 * v7);
        if (!v18) {
          break;
        }
      }
    }

uint64_t sub_1000D3320(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0C30);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  unint64_t v31 = v2;
  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v11) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }

uint64_t sub_1000D35B8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0C28);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  unint64_t v31 = v2;
  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v8 = v3 + 56;
  if (v7 < 64) {
    uint64_t v9 = ~(-1LL << v7);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v3 + 56);
  int64_t v11 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v12 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v14 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v14 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v11) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v8 + 8 * v18);
    ++v14;
    if (!v19)
    {
      int64_t v14 = v18 + 1;
      if (v18 + 1 >= v11) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v8 + 8 * v14);
      if (!v19)
      {
        int64_t v14 = v18 + 2;
        if (v18 + 2 >= v11) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v8 + 8 * v14);
        if (!v19) {
          break;
        }
      }
    }

uint64_t sub_1000D3850(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0BB0);
  uint64_t v5 = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  uint64_t v6 = v5;
  if (!*(void *)(v3 + 16))
  {
    uint64_t result = swift_release();
LABEL_38:
    *uint64_t v2 = v6;
    return result;
  }

  uint64_t v7 = 1LL << *(_BYTE *)(v3 + 32);
  uint64_t v35 = v2;
  uint64_t v36 = v3 + 56;
  if (v7 < 64) {
    uint64_t v8 = ~(-1LL << v7);
  }
  else {
    uint64_t v8 = -1LL;
  }
  unint64_t v9 = v8 & *(void *)(v3 + 56);
  int64_t v37 = (unint64_t)(v7 + 63) >> 6;
  uint64_t v10 = v5 + 56;
  uint64_t result = swift_retain();
  int64_t v12 = 0LL;
  uint64_t v38 = v3;
  while (1)
  {
    if (v9)
    {
      unint64_t v15 = __clz(__rbit64(v9));
      v9 &= v9 - 1;
      int64_t v44 = v12;
      unint64_t v16 = v15 | (v12 << 6);
      goto LABEL_27;
    }

    int64_t v17 = v12 + 1;
    if (__OFADD__(v12, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v17 >= v37) {
      goto LABEL_36;
    }
    unint64_t v18 = *(void *)(v36 + 8 * v17);
    int64_t v19 = v12 + 1;
    if (!v18)
    {
      int64_t v19 = v12 + 2;
      if (v12 + 2 >= v37) {
        goto LABEL_36;
      }
      unint64_t v18 = *(void *)(v36 + 8 * v19);
      if (!v18)
      {
        int64_t v19 = v12 + 3;
        if (v12 + 3 >= v37) {
          goto LABEL_36;
        }
        unint64_t v18 = *(void *)(v36 + 8 * v19);
        if (!v18) {
          break;
        }
      }
    }

uint64_t sub_1000D3B98(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = v2;
  uint64_t v4 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(a2);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0LL);
  uint64_t v7 = v6;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release(v4);
LABEL_38:
    *uint64_t v3 = v7;
    return result;
  }

  char v31 = v3;
  uint64_t v8 = 1LL << *(_BYTE *)(v4 + 32);
  uint64_t v9 = v4 + 56;
  if (v8 < 64) {
    uint64_t v10 = ~(-1LL << v8);
  }
  else {
    uint64_t v10 = -1LL;
  }
  unint64_t v11 = v10 & *(void *)(v4 + 56);
  int64_t v12 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v13 = v6 + 56;
  uint64_t result = swift_retain();
  int64_t v15 = 0LL;
  while (1)
  {
    if (v11)
    {
      unint64_t v17 = __clz(__rbit64(v11));
      v11 &= v11 - 1;
      unint64_t v18 = v17 | (v15 << 6);
      goto LABEL_27;
    }

    int64_t v19 = v15 + 1;
    if (__OFADD__(v15, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v19 >= v12) {
      goto LABEL_36;
    }
    unint64_t v20 = *(void *)(v9 + 8 * v19);
    ++v15;
    if (!v20)
    {
      int64_t v15 = v19 + 1;
      if (v19 + 1 >= v12) {
        goto LABEL_36;
      }
      unint64_t v20 = *(void *)(v9 + 8 * v15);
      if (!v20)
      {
        int64_t v15 = v19 + 2;
        if (v19 + 2 >= v12) {
          goto LABEL_36;
        }
        unint64_t v20 = *(void *)(v9 + 8 * v15);
        if (!v20) {
          break;
        }
      }
    }

Swift::Int sub_1000D3E0C(uint64_t a1)
{
  uint64_t v2 = v1;
  Swift::Int v3 = *v1;
  if (*(void *)(*v1 + 24) <= a1) {
    uint64_t v4 = a1;
  }
  else {
    uint64_t v4 = *(void *)(*v1 + 24);
  }
  sub_100004AEC(&qword_1009A0AE8);
  Swift::Int result = static _SetStorage.resize(original:capacity:move:)(v3, v4, 0LL);
  Swift::Int v7 = result;
  if (!*(void *)(v3 + 16))
  {
    Swift::Int result = swift_release(v3);
LABEL_38:
    *uint64_t v2 = v7;
    return result;
  }

  unint64_t v28 = v2;
  int64_t v8 = 0LL;
  Swift::Int v9 = v3 + 56;
  uint64_t v10 = 1LL << *(_BYTE *)(v3 + 32);
  if (v10 < 64) {
    uint64_t v11 = ~(-1LL << v10);
  }
  else {
    uint64_t v11 = -1LL;
  }
  unint64_t v12 = v11 & *(void *)(v3 + 56);
  int64_t v13 = (unint64_t)(v10 + 63) >> 6;
  Swift::Int v14 = result + 56;
  while (1)
  {
    if (v12)
    {
      unint64_t v16 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v17 = v16 | (v8 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v13) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v9 + 8 * v18);
    ++v8;
    if (!v19)
    {
      int64_t v8 = v18 + 1;
      if (v18 + 1 >= v13) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v9 + 8 * v8);
      if (!v19)
      {
        int64_t v8 = v18 + 2;
        if (v18 + 2 >= v13) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v9 + 8 * v8);
        if (!v19) {
          break;
        }
      }
    }

uint64_t sub_1000D409C(uint64_t a1, uint64_t *a2)
{
  Swift::Int v3 = v2;
  uint64_t v4 = *v2;
  if (*(void *)(*v2 + 24) <= a1) {
    uint64_t v5 = a1;
  }
  else {
    uint64_t v5 = *(void *)(*v2 + 24);
  }
  sub_100004AEC(a2);
  uint64_t v6 = static _SetStorage.resize(original:capacity:move:)(v4, v5, 0LL);
  uint64_t v7 = v6;
  if (!*(void *)(v4 + 16))
  {
    uint64_t result = swift_release(v4);
LABEL_38:
    *Swift::Int v3 = v7;
    return result;
  }

  uint64_t v8 = 1LL << *(_BYTE *)(v4 + 32);
  uint64_t v32 = v4 + 56;
  if (v8 < 64) {
    uint64_t v9 = ~(-1LL << v8);
  }
  else {
    uint64_t v9 = -1LL;
  }
  unint64_t v10 = v9 & *(void *)(v4 + 56);
  int64_t v33 = (unint64_t)(v8 + 63) >> 6;
  uint64_t v11 = v6 + 56;
  uint64_t result = swift_retain();
  int64_t v13 = 0LL;
  while (1)
  {
    if (v10)
    {
      unint64_t v16 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v17 = v16 | (v13 << 6);
      goto LABEL_27;
    }

    int64_t v18 = v13 + 1;
    if (__OFADD__(v13, 1LL))
    {
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }

    if (v18 >= v33) {
      goto LABEL_36;
    }
    unint64_t v19 = *(void *)(v32 + 8 * v18);
    ++v13;
    if (!v19)
    {
      int64_t v13 = v18 + 1;
      if (v18 + 1 >= v33) {
        goto LABEL_36;
      }
      unint64_t v19 = *(void *)(v32 + 8 * v13);
      if (!v19)
      {
        int64_t v13 = v18 + 2;
        if (v18 + 2 >= v33) {
          goto LABEL_36;
        }
        unint64_t v19 = *(void *)(v32 + 8 * v13);
        if (!v19) {
          break;
        }
      }
    }

uint64_t sub_1000D4394(uint64_t a1)
{
  uint64_t KeyPath = swift_getKeyPath(&unk_1007EB010);
  char v3 = static AnyKeyPath.== infix(_:_:)(a1, KeyPath);
  swift_release(KeyPath);
  if ((v3 & 1) != 0) {
    goto LABEL_5;
  }
  uint64_t v4 = swift_getKeyPath(&unk_1007EB038);
  char v5 = static AnyKeyPath.== infix(_:_:)(a1, v4);
  swift_release(v4);
  if ((v5 & 1) != 0
    || (uint64_t v6 = swift_getKeyPath(&unk_1007EB060),
        char v7 = static AnyKeyPath.== infix(_:_:)(a1, v6),
        swift_release(v6),
        (v7 & 1) != 0)
    || (uint64_t v8 = swift_getKeyPath(&unk_1007EB088),
        char v9 = static AnyKeyPath.== infix(_:_:)(a1, v8),
        uint64_t result = swift_release(v8),
        (v9 & 1) != 0))
  {
LABEL_5:
    if (qword_10099B0E0 != -1) {
      swift_once(&qword_10099B0E0, sub_1000B8B68);
    }
    return dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
  }

  return result;
}

uint64_t sub_1000D44D4@<X0>(_DWORD *a1@<X8>)
{
  return sub_1001C34BC(*(void *)(v1 + 16), a1);
}

uint64_t sub_1000D44EC@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1006A0B80(*a1);
  *a2 = result & 1;
  return result;
}

uint64_t sub_1000D4518@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0B98(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000D4540@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0E1C(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000D4568@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1006A0F10(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000D4590(unsigned __int8 *a1)
{
  uint64_t v2 = type metadata accessor for FinderStateInfo(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v5 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  uint64_t v6 = *a1;
  NSString v7 = String._bridgeToObjectiveC()();
  [v5 setBool:v6 forKey:v7];

  if (a1[2]) {
    uint64_t v8 = 1LL;
  }
  else {
    uint64_t v8 = -1LL;
  }
  NSString v9 = String._bridgeToObjectiveC()();
  [v5 setInteger:v8 forKey:v9];

  uint64_t v10 = a1[1];
  NSString v11 = String._bridgeToObjectiveC()();
  [v5 setBool:v10 forKey:v11];

  uint64_t v13 = static os_log_type_t.debug.getter(v12);
  if (qword_10099B6E0 != -1) {
    swift_once(&qword_10099B6E0, sub_100650FD0);
  }
  uint64_t v14 = qword_100A2AFE0;
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
  *(_OWORD *)(v16 + 16) = xmmword_1007E67D0;
  sub_10001DC4C((uint64_t)a1, (uint64_t)v4, type metadata accessor for FinderStateInfo);
  uint64_t v17 = String.init<A>(describing:)(v4, v2);
  uint64_t v19 = v18;
  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 64) = sub_1000226F4();
  *(void *)(v16 + 32) = v17;
  *(void *)(v16 + 40) = v19;
  os_log(_:dso:log:_:_:)( v13,  &_mh_execute_header,  v14,  "FinderStateManager: save stateInfo, %@ (notification)",  53LL,  2LL,  v16);
  swift_bridgeObjectRelease();
  if (qword_10099B0E0 != -1) {
    swift_once(&qword_10099B0E0, sub_1000B8B68);
  }
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);

  return 0LL;
}

uint64_t sub_1000D4814(unsigned __int8 *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v25 = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v28 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  NSString v7 = (char *)&v24 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v26 = *(void *)(v8 - 8);
  uint64_t v27 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v24 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_1000D4590(a1);
  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v12 + 104))( v14,  enum case for DispatchQoS.QoSClass.default(_:),  v11);
  uint64_t v16 = (void *)static OS_dispatch_queue.global(qos:)(v14);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v17 = (void *)swift_allocObject(&unk_10093CF18, 40LL, 7LL);
  void v17[2] = v25;
  v17[3] = a3;
  v17[4] = v15;
  aBlock[4] = sub_1000D4F98;
  uint64_t v31 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  void aBlock[3] = &unk_10093CF30;
  uint64_t v18 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v19 = swift_errorRetain(v15);
  static DispatchQoS.unspecified.getter(v19);
  unint64_t v29 = _swiftEmptyArrayStorage;
  uint64_t v20 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v22 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v21, v22, v5, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v7, v18);
  _Block_release(v18);

  swift_errorRelease(v15);
  (*(void (**)(char *, uint64_t))(v28 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v10, v27);
  return swift_release(v31);
}

BOOL sub_1000D4AB8(uint64_t a1, uint64_t a2, void *__s1)
{
  uint64_t __s2 = a1;
  __int16 v5 = a2;
  char v6 = BYTE2(a2);
  char v7 = BYTE3(a2);
  char v8 = BYTE4(a2);
  char v9 = BYTE5(a2);
  if (!__s1) {
    __break(1u);
  }
  return memcmp(__s1, &__s2, BYTE6(a2)) == 0;
}

uint64_t sub_1000D4B98(uint64_t a1, uint64_t a2, uint64_t a3, const void *a4)
{
  uint64_t result = __DataStorage._bytes.getter();
  char v8 = (char *)result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_12:
      __break(1u);
      goto LABEL_13;
    }

    v8 += a1 - result;
  }

  BOOL v9 = __OFSUB__(a2, a1);
  int64_t v10 = a2 - a1;
  if (v9)
  {
    __break(1u);
    goto LABEL_12;
  }

  uint64_t result = __DataStorage._length.getter();
  if (!a4)
  {
LABEL_13:
    __break(1u);
    goto LABEL_14;
  }

  if (!v8)
  {
LABEL_14:
    __break(1u);
    return result;
  }

  if (result >= v10) {
    size_t v11 = v10;
  }
  else {
    size_t v11 = result;
  }
  return memcmp(a4, v8, v11) == 0;
}

void *sub_1000D4C34(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[6];
  uint64_t v5 = a1[8];
  swift_bridgeObjectRetain(a1[10]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *sub_1000D4C9C(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[6];
  uint64_t v4 = a1[8];
  uint64_t v5 = a1[10];
  swift_bridgeObjectRelease(a1[3]);
  swift_bridgeObjectRelease(v2);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v5);
  return a1;
}

uint64_t sub_1000D4D04@<X0>(uint64_t a1@<X8>)
{
  return sub_1000B9324(a1);
}

uint64_t sub_1000D4D0C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000D4D30()
{
  return sub_1000BCB9C(*(void (**)(void *__return_ptr))(v0 + 16));
}

uint64_t sub_1000D4D38(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000D4D48(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000D4D50(uint64_t a1, uint64_t a2, uint64_t *a3)
{
  uint64_t v5 = sub_100004AEC(a3);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 40LL))(a2, a1, v5);
  return a2;
}

unint64_t sub_1000D4D94()
{
  unint64_t result = qword_1009A0CE0;
  if (!qword_1009A0CE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080EDE8, &type metadata for FinderStatePermissions);
    atomic_store(result, (unint64_t *)&qword_1009A0CE0);
  }

  return result;
}

void *sub_1000D4DD8(void *a1)
{
  uint64_t v2 = a1[3];
  uint64_t v3 = a1[5];
  uint64_t v4 = a1[7];
  uint64_t v5 = a1[9];
  uint64_t v6 = a1[11];
  uint64_t v7 = a1[13];
  uint64_t v8 = a1[15];
  uint64_t v9 = a1[19];
  swift_bridgeObjectRetain(a1[1]);
  swift_bridgeObjectRetain(v2);
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRetain(v9);
  return a1;
}

void *sub_1000D4E80(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[7];
  uint64_t v6 = a1[9];
  uint64_t v7 = a1[11];
  uint64_t v8 = a1[13];
  uint64_t v9 = a1[15];
  swift_bridgeObjectRelease(a1[19]);
  swift_bridgeObjectRelease(v9);
  swift_bridgeObjectRelease(v8);
  swift_bridgeObjectRelease(v7);
  swift_bridgeObjectRelease(v6);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t sub_1000D4F28()
{
  return swift_deallocObject(v0, 43LL, 7LL);
}

uint64_t sub_1000D4F54()
{
  return sub_1000BA35C( *(void *)(v0 + 16),  *(void *)(v0 + 24),  *(void *)(v0 + 32),  *(_BYTE *)(v0 + 40),  *(_BYTE *)(v0 + 41),  *(_BYTE *)(v0 + 42));
}

uint64_t sub_1000D4F6C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000D4F98()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(void *)(v0 + 32));
}

uint64_t destroy for MessagingAccount(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 8));
}

uint64_t _s12searchpartyd38VerifyFindMyNetworkIdResponseV2PayloadVwCP_0(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  return a1;
}

uint64_t assignWithCopy for VerifyFindMyNetworkIdResponseV2Payload(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_BYTE *)(a1 + 1) = *(_BYTE *)(a2 + 1);
  uint64_t v3 = *(void *)(a2 + 8);
  uint64_t v4 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t assignWithTake for VerifyFindMyNetworkIdResponseV2Payload(uint64_t a1, uint64_t a2)
{
  *(_WORD *)a1 = *(_WORD *)a2;
  uint64_t v3 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  swift_bridgeObjectRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for MessagingAccount(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 16)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MessagingAccount(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 16) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for VerifyFindMyNetworkIdResponseV2Payload()
{
  return &type metadata for VerifyFindMyNetworkIdResponseV2Payload;
}

ValueMetadata *type metadata accessor for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdPairingStatus()
{
  return &type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdPairingStatus;
}

void *sub_1000D5134(uint64_t a1)
{
  int64_t v1 = *(void *)(a1 + 16);
  if (v1)
  {
    sub_100032800(0, v1, 0);
    uint64_t v3 = (char *)(a1 + 56);
    do
    {
      uint64_t v4 = *((void *)v3 - 2);
      unint64_t v5 = *((void *)v3 - 1);
      char v6 = *v3;
      uint64_t v7 = *(v3 - 24);
      sub_10001736C(v4, v5);
      uint64_t v8 = sub_1000D5808(v7, v4, v5, v6);
      uint64_t v10 = v9;
      sub_100016F9C(v4, v5);
      unint64_t v12 = _swiftEmptyArrayStorage[2];
      unint64_t v11 = _swiftEmptyArrayStorage[3];
      if (v12 >= v11 >> 1) {
        sub_100032800(v11 > 1, v12 + 1, 1);
      }
      v3 += 32;
      _swiftEmptyArrayStorage[2] = v12 + 1;
      uint64_t v13 = &_swiftEmptyArrayStorage[2 * v12];
      v13[4] = v8;
      v13[5] = v10;
      --v1;
    }

    while (v1);
  }

  return _swiftEmptyArrayStorage;
}

void sub_1000D523C()
{
  qword_1009A0D10 = qword_1009A0D18;
}

uint64_t sub_1000D5250(void *a1, __int16 a2, uint64_t a3)
{
  uint64_t v6 = a1[3];
  uint64_t v7 = a1[4];
  sub_100012ED8(a1, v6);
  dispatch thunk of BinaryEncoding.container()(v19, v6, v7);
  LOBYTE(v18) = a2;
  uint64_t v8 = v20;
  uint64_t v9 = v21;
  sub_100037298((uint64_t)v19, v20);
  unint64_t v10 = sub_1000D70D8();
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)( &v18,  &type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdStatus,  v10,  v8,  v9);
  if (!v3)
  {
    LOBYTE(v18) = HIBYTE(a2);
    uint64_t v11 = v20;
    uint64_t v12 = v21;
    sub_100037298((uint64_t)v19, v20);
    unint64_t v13 = sub_100041584();
    dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v18, &type metadata for UInt8, v13, v11, v12);
    uint64_t v18 = a3;
    uint64_t v14 = v20;
    uint64_t v15 = v21;
    sub_100037298((uint64_t)v19, v20);
    unint64_t v16 = sub_1000D711C();
    dispatch thunk of BinaryEncodingContaining.encode<A>(_:)( &v18,  &type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdPairingStatus,  v16,  v14,  v15);
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v19);
}

void *sub_1000D5384@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  unint64_t result = sub_1000D6D88(a1);
  if (!v2)
  {
    *(_WORD *)a2 = (_WORD)result;
    *(void *)(a2 + 8) = v5;
  }

  return result;
}

uint64_t sub_1000D53B8(void *a1)
{
  return sub_1000D5250(a1, *(_WORD *)v1, *(void *)(v1 + 8));
}

void sub_1000D53D4(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1000D5404()
{
  unint64_t v0 = sub_1000D7FBC();
  uint64_t v3 = CustomStringConvertible.typeDescription.getter( &type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdStatus,  v0);
  v1._countAndFlagsBits = 0x72696150746F6E2ELL;
  v1._object = (void *)0xEA00000000006465LL;
  String.append(_:)(v1);
  return v3;
}

uint64_t sub_1000D5554(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D5D7C(a1, a2, a3, (uint64_t (*)(void))sub_1000D7BE4);
}

uint64_t sub_1000D5570(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D5E00(a1, a2, a3, (uint64_t (*)(void))sub_1000D7BE4);
}

void sub_1000D558C()
{
}

uint64_t sub_1000D5594(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100012ED8(a1, v4);
  dispatch thunk of BinaryEncoding.container()(v16, v4, v5);
  uint64_t v14 = a2;
  swift_bridgeObjectRetain_n(a2, 2LL);
  sub_1000D6398(&v14);
  if (v2)
  {
    swift_release(v14);
    __break(1u);
    JUMPOUT(0x1000D57F8LL);
  }

  swift_bridgeObjectRelease();
  if (*(void *)(v14 + 16))
  {
    uint64_t v19 = swift_retain();
    __asm { BR              X9 }
  }

  swift_release(v14);
  uint64_t v6 = 4LL - *(void *)(a2 + 16);
  if ((unsigned __int128)(v6 * (__int128)21LL) >> 64 != (21 * v6) >> 63)
  {
    __break(1u);
    JUMPOUT(0x1000D57E8LL);
  }

  uint64_t v14 = sub_1004D5620(21 * v6);
  unint64_t v15 = v7;
  sub_1003122B8((uint64_t)&v14);
  uint64_t v8 = v14;
  unint64_t v9 = v15;
  uint64_t v10 = v17;
  uint64_t v11 = v18;
  sub_100037298((uint64_t)v16, v17);
  unint64_t v12 = sub_100042440();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(&v14, &type metadata for Data, v12, v10, v11);
  sub_100016F9C(v8, v9);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
}

uint64_t sub_1000D5808(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  unint64_t v7 = sub_1000D7578();
  uint64_t v8 = CustomStringConvertible.typeDescription.getter( &type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartStatus,  v7);
  swift_bridgeObjectRelease();
  v9._countAndFlagsBits = 0x3A44497472617020LL;
  v9._object = (void *)0xE900000000000020LL;
  String.append(_:)(v9);
  v10._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt8,  &protocol witness table for UInt8);
  String.append(_:)(v10);
  swift_bridgeObjectRelease();
  v11._countAndFlagsBits = 0x4E6C616972657320LL;
  v11._object = (void *)0xEF203A7265626D75LL;
  String.append(_:)(v11);
  v12._countAndFlagsBits = Data.hexString.getter(a2, a3);
  String.append(_:)(v12);
  swift_bridgeObjectRelease();
  v13._object = (void *)0x80000001008538A0LL;
  v13._countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v13);
  v14._countAndFlagsBits = sub_1000D5C70(a4);
  String.append(_:)(v14);
  swift_bridgeObjectRelease();
  return v8;
}

uint64_t sub_1000D5978@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1000D7160(a1);
  if (!v2) {
    *a2 = result;
  }
  return result;
}

uint64_t sub_1000D59A0(void *a1)
{
  return sub_1000D5594(a1, *v1);
}

Swift::Int sub_1000D59B8()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  sub_1005BEBA8((uint64_t)v3, v1);
  return Hasher._finalize()();
}

void sub_1000D59FC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v2;
  Swift::UInt v5 = *(void *)(*v2 + 16);
  Hasher._combine(_:)(v5);
  if (v5)
  {
    uint64_t v6 = (Swift::UInt8 *)(v4 + 56);
    do
    {
      uint64_t v7 = *((void *)v6 - 2);
      unint64_t v8 = *((void *)v6 - 1);
      Swift::UInt8 v9 = *(v6 - 24);
      Swift::UInt8 v10 = *v6;
      v6 += 32;
      Hasher._combine(_:)(v9);
      sub_10001736C(v7, v8);
      Data.hash(into:)(a1, v7, v8);
      Hasher._combine(_:)(v10);
      sub_100016F9C(v7, v8);
      --v5;
    }

    while (v5);
  }

Swift::Int sub_1000D5A8C(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  sub_1005BEBA8((uint64_t)v4, v2);
  return Hasher._finalize()();
}

uint64_t sub_1000D5ACC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v9 = CustomStringConvertible.typeDescription.getter(a1, a2);
  v4._countAndFlagsBits = 8250LL;
  v4._object = (void *)0xE200000000000000LL;
  String.append(_:)(v4);
  swift_bridgeObjectRetain(v3);
  uint64_t v6 = sub_1000D5134(v5);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = Array.description.getter(v6, &type metadata for String);
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9;
}

uint64_t sub_1000D5B68(uint64_t *a1, uint64_t *a2)
{
  return sub_100125BC8(*a1, *a2);
}

unint64_t sub_1000D5B78()
{
  unint64_t result = qword_1009A0D20;
  if (!qword_1009A0D20)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007EB2E0,  &type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdPairingStatus);
    atomic_store(result, (unint64_t *)&qword_1009A0D20);
  }

  return result;
}

unint64_t sub_1000D5BBC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1000D5BE8();
  unint64_t result = sub_1000D5C2C();
  *(void *)(a1 + 16) = result;
  return result;
}

unint64_t sub_1000D5BE8()
{
  unint64_t result = qword_1009A0D28;
  if (!qword_1009A0D28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EB3E8, &type metadata for VerifyFindMyNetworkIdResponseV2Payload);
    atomic_store(result, (unint64_t *)&qword_1009A0D28);
  }

  return result;
}

unint64_t sub_1000D5C2C()
{
  unint64_t result = qword_1009A0D30;
  if (!qword_1009A0D30)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EB3C0, &type metadata for VerifyFindMyNetworkIdResponseV2Payload);
    atomic_store(result, (unint64_t *)&qword_1009A0D30);
  }

  return result;
}

uint64_t sub_1000D5C70(char a1)
{
  if (a1)
  {
    if (a1 == 1)
    {
      unint64_t v1 = sub_1000D75BC();
      uint64_t v7 = CustomStringConvertible.typeDescription.getter( &type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartPairingStatus,  v1);
      uint64_t v2 = 0x6465726961702ELL;
      unint64_t v3 = 0xE700000000000000LL;
    }

    else
    {
      unint64_t v5 = sub_1000D75BC();
      uint64_t v7 = CustomStringConvertible.typeDescription.getter( &type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartPairingStatus,  v5);
      uint64_t v2 = 0x65726961706E752ELL;
      unint64_t v3 = 0xE900000000000064LL;
    }
  }

  else
  {
    unint64_t v4 = sub_1000D75BC();
    uint64_t v7 = CustomStringConvertible.typeDescription.getter( &type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartPairingStatus,  v4);
    uint64_t v2 = 0x6E776F6E6B6E752ELL;
    unint64_t v3 = 0xE800000000000000LL;
  }

  String.append(_:)(*(Swift::String *)&v2);
  return v7;
}

uint64_t sub_1000D5D60(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D5D7C(a1, a2, a3, (uint64_t (*)(void))sub_1000D7F34);
}

uint64_t sub_1000D5D7C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = a4();
  unint64_t v8 = sub_100041584();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v7, v8);
}

uint64_t sub_1000D5DE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000D5E00(a1, a2, a3, (uint64_t (*)(void))sub_1000D7F34);
}

uint64_t sub_1000D5E00(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void))
{
  uint64_t v7 = a4();
  unint64_t v8 = sub_100041584();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v7, v8);
}

uint64_t sub_1000D5E60()
{
  return sub_1000D5C70(*v0);
}

uint64_t sub_1000D5E68(void *a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v8 = a1[3];
  uint64_t v9 = a1[4];
  sub_100012ED8(a1, v8);
  dispatch thunk of BinaryEncoding.container()(v18, v8, v9);
  v17[0] = a2;
  v17[1] = a3;
  uint64_t v10 = v19;
  uint64_t v11 = v20;
  sub_100037298((uint64_t)v18, v19);
  unint64_t v12 = sub_100042440();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(v17, &type metadata for Data, v12, v10, v11);
  if (!v4)
  {
    LOBYTE(v17[0]) = a4;
    uint64_t v13 = v19;
    uint64_t v14 = v20;
    sub_100037298((uint64_t)v18, v19);
    unint64_t v15 = sub_1000D7EF0();
    dispatch thunk of BinaryEncodingContaining.encode<A>(_:)( v17,  &type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartPairingStatus,  v15,  v13,  v14);
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v18);
}

uint64_t sub_1000D5F60(uint64_t a1, uint64_t a2, char a3)
{
  unint64_t v6 = sub_1000D7F78();
  uint64_t v7 = CustomStringConvertible.typeDescription.getter( &type metadata for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus,  v6);
  swift_bridgeObjectRelease();
  v8._countAndFlagsBits = 0x4E6C616972657320LL;
  v8._object = (void *)0xEF203A7265626D75LL;
  String.append(_:)(v8);
  v9._countAndFlagsBits = Data.hexString.getter(a1, a2);
  String.append(_:)(v9);
  swift_bridgeObjectRelease();
  v10._object = (void *)0x80000001008538A0LL;
  v10._countAndFlagsBits = 0xD000000000000010LL;
  String.append(_:)(v10);
  v11._countAndFlagsBits = sub_1000D5C70(a3);
  String.append(_:)(v11);
  swift_bridgeObjectRelease();
  return v7;
}

uint64_t sub_1000D6070@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t result = sub_1000D7C28(a1);
  if (!v2)
  {
    *(void *)a2 = result;
    *(void *)(a2 + 8) = v5;
    *(_BYTE *)(a2 + 16) = v6;
  }

  return result;
}

uint64_t sub_1000D609C(void *a1)
{
  return sub_1000D5E68(a1, *(void *)v1, *(void *)(v1 + 8), *(_BYTE *)(v1 + 16));
}

Swift::Int sub_1000D60B8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Swift::UInt8 v3 = *((_BYTE *)v0 + 16);
  Hasher.init(_seed:)(v5, 0LL);
  Data.hash(into:)(v5, v1, v2);
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void sub_1000D6118(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  Swift::UInt8 v4 = *((_BYTE *)v1 + 16);
  Data.hash(into:)(a1, v2, v3);
  Hasher._combine(_:)(v4);
}

Swift::Int sub_1000D614C(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  Swift::UInt8 v4 = *((_BYTE *)v1 + 16);
  Hasher.init(_seed:)(v6, a1);
  Data.hash(into:)(v6, v2, v3);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

uint64_t sub_1000D61A8()
{
  return sub_1000D5F60(*(void *)v0, *(void *)(v0 + 8), *(_BYTE *)(v0 + 16));
}

uint64_t sub_1000D61B4(uint64_t a1, uint64_t a2)
{
  int v2 = *(unsigned __int8 *)(a1 + 16);
  int v3 = *(unsigned __int8 *)(a2 + 16);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(*(void *)a1, *(void *)(a1 + 8));
  return v4 & (v2 == v3);
}

Swift::Int sub_1000D61F4()
{
  uint64_t v1 = *(void *)(v0 + 8);
  uint64_t v2 = *(void *)(v0 + 16);
  Swift::UInt8 v3 = *(_BYTE *)v0;
  Swift::UInt8 v4 = *(_BYTE *)(v0 + 24);
  Hasher.init(_seed:)(v6, 0LL);
  Hasher._combine(_:)(v3);
  Data.hash(into:)(v6, v1, v2);
  Hasher._combine(_:)(v4);
  return Hasher._finalize()();
}

void sub_1000D626C(uint64_t a1)
{
  uint64_t v3 = *(void *)(v1 + 8);
  uint64_t v4 = *(void *)(v1 + 16);
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 24);
  Hasher._combine(_:)(*(_BYTE *)v1);
  Data.hash(into:)(a1, v3, v4);
  Hasher._combine(_:)(v5);
}

Swift::Int sub_1000D62C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 8);
  uint64_t v3 = *(void *)(v1 + 16);
  Swift::UInt8 v4 = *(_BYTE *)v1;
  Swift::UInt8 v5 = *(_BYTE *)(v1 + 24);
  Hasher.init(_seed:)(v7, a1);
  Hasher._combine(_:)(v4);
  Data.hash(into:)(v7, v2, v3);
  Hasher._combine(_:)(v5);
  return Hasher._finalize()();
}

uint64_t sub_1000D6338()
{
  return sub_1000D5808(*v0, *((void *)v0 + 1), *((void *)v0 + 2), v0[24]);
}

uint64_t sub_1000D6348(unsigned __int8 *a1, unsigned __int8 *a2)
{
  if (*a1 != *a2) {
    return 0LL;
  }
  int v2 = a2[24];
  int v3 = a1[24];
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0( *((void *)a1 + 1),  *((void *)a1 + 2));
  return v4 & (v3 == v2);
}

Swift::Int sub_1000D6398(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v2 = sub_1003D49C4(v2);
  }
  int v3 = *(unsigned __int8 **)(v2 + 16);
  v5[0] = (unsigned __int8 *)(v2 + 32);
  v5[1] = v3;
  Swift::Int result = sub_1000D6400(v5);
  *a1 = v2;
  return result;
}

Swift::Int sub_1000D6400(unsigned __int8 **a1)
{
  Swift::Int v3 = (Swift::Int)a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_141;
    }
    if ((unint64_t)v3 >= 2)
    {
      v89 = *a1;
      uint64_t v90 = -1LL;
      uint64_t v91 = 1LL;
      v92 = *a1;
      do
      {
        uint64_t v93 = v90;
        v94 = v92;
        do
        {
          unsigned int v95 = v94[32];
          if (v95 >= *v94) {
            break;
          }
          if (!v89) {
            goto LABEL_145;
          }
          unsigned __int8 v96 = v94[56];
          __int128 v97 = *(_OWORD *)(v94 + 40);
          __int128 v98 = *((_OWORD *)v94 + 1);
          *((_OWORD *)v94 + 2) = *(_OWORD *)v94;
          *((_OWORD *)v94 + 3) = v98;
          unsigned __int8 *v94 = v95;
          *(_OWORD *)(v94 + 8) = v97;
          v94[24] = v96;
          v94 -= 32;
        }

        while (!__CFADD__(v93++, 1LL));
        ++v91;
        v92 += 32;
        --v90;
      }

      while (v91 != v3);
    }

    return result;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_150;
  }
  Swift::Int v6 = result;
  v109 = (uint64_t *)a1;
  if (v3 < 2)
  {
    Swift::String v9 = _swiftEmptyArrayStorage;
    __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v13 = _swiftEmptyArrayStorage[2];
      unint64_t v12 = (char *)_swiftEmptyArrayStorage;
LABEL_107:
      v100 = v12;
      v111 = v9;
      if (v13 >= 2)
      {
        uint64_t v101 = *v109;
        do
        {
          unint64_t v102 = v13 - 2;
          if (v13 < 2) {
            goto LABEL_136;
          }
          if (!v101) {
            goto LABEL_149;
          }
          v103 = v100;
          uint64_t v104 = *(void *)&v100[16 * v102 + 32];
          uint64_t v105 = *(void *)&v100[16 * v13 + 24];
          sub_1000D6B0C( (unsigned __int8 *)(v101 + 32 * v104),  (unsigned __int8 *)(v101 + 32LL * *(void *)&v100[16 * v13 + 16]),  v101 + 32 * v105,  __dst);
          if (v1) {
            break;
          }
          if (v105 < v104) {
            goto LABEL_137;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v103) & 1) == 0) {
            v103 = sub_1003CBA90((uint64_t)v103);
          }
          if (v102 >= *((void *)v103 + 2)) {
            goto LABEL_138;
          }
          v106 = &v103[16 * v102 + 32];
          *(void *)v106 = v104;
          *((void *)v106 + 1) = v105;
          unint64_t v107 = *((void *)v103 + 2);
          if (v13 > v107) {
            goto LABEL_139;
          }
          memmove(&v103[16 * v13 + 16], &v103[16 * v13 + 32], 16 * (v107 - v13));
          v100 = v103;
          *((void *)v103 + 2) = v107 - 1;
          unint64_t v13 = v107 - 1;
        }

        while (v107 > 2);
      }

LABEL_97:
      swift_bridgeObjectRelease();
      v111[2] = 0LL;
      return swift_bridgeObjectRelease();
    }

    v111 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)( v5 >> 1,  &type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartStatus);
    *(void *)(v8 + 16) = v7;
    v111 = (void *)v8;
    __dst = (char *)(v8 + 32);
  }

  Swift::Int v10 = 0LL;
  Swift::String v11 = *a1;
  uint64_t v110 = (uint64_t)(*a1 + 64);
  uint64_t v108 = (uint64_t)(*a1 + 24);
  unint64_t v12 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v112 = v6;
  Swift::Int v113 = v3;
  v114 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      unsigned int v15 = v11[32 * v10];
      uint64_t v16 = 32 * v14;
      unsigned int v17 = v11[32 * v14];
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v18 = (unsigned __int8 *)(v110 + 32 * v14);
        while (v15 < v17 != *v18 >= *(v18 - 32))
        {
          v18 += 32;
          if (v3 == ++v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }

      if (v15 < v17)
      {
        if (v10 < v14) {
          goto LABEL_142;
        }
        if (v14 < v10)
        {
          uint64_t v19 = 32 * v10 - 32;
          Swift::Int v20 = v10;
          Swift::Int v21 = v14;
          do
          {
            if (v21 != --v20)
            {
              if (!v11) {
                goto LABEL_148;
              }
              uint64_t v24 = &v11[v16];
              uint64_t v25 = &v11[v19];
              unsigned __int8 v26 = v11[v16];
              __int128 v27 = *(_OWORD *)&v11[v16 + 8];
              unsigned __int8 v28 = v11[v16 + 24];
              if (v16 != v19 || v24 >= v25 + 32)
              {
                __int128 v22 = *((_OWORD *)v25 + 1);
                *(_OWORD *)uint64_t v24 = *(_OWORD *)v25;
                *((_OWORD *)v24 + 1) = v22;
              }

              unint64_t v23 = &v11[v19];
              unsigned __int8 *v23 = v26;
              *(_OWORD *)(v23 + 8) = v27;
              v23[24] = v28;
            }

            ++v21;
            v19 -= 32LL;
            v16 += 32LL;
          }

          while (v21 < v20);
        }
      }
    }

    if (v10 >= v3) {
      goto LABEL_50;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_140;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_50;
    }
    Swift::Int v29 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_143;
    }
    if (v29 >= v3) {
      Swift::Int v29 = v3;
    }
    if (v29 < v14) {
      break;
    }
    if (v10 != v29)
    {
      uint64_t v30 = v108 + 32 * v10;
      do
      {
        Swift::Int v31 = v14;
        uint64_t v32 = v30;
        do
        {
          int64_t v33 = (_OWORD *)(v32 - 24);
          unsigned int v34 = *(unsigned __int8 *)(v32 - 24);
          if (!v11) {
            goto LABEL_146;
          }
          __int128 v36 = *(_OWORD *)(v32 - 56);
          __int128 v35 = *(_OWORD *)(v32 - 40);
          *(_BYTE *)(v32 - 32) = *(_BYTE *)v32;
          v32 -= 32LL;
          __int128 v37 = *(_OWORD *)(v32 + 16);
          *int64_t v33 = v36;
          v33[1] = v35;
          *(_BYTE *)(v32 - 24) = v34;
          *(_OWORD *)(v32 - 16) = v37;
          ++v31;
        }

        while (v10 != v31);
        ++v10;
        v30 += 32LL;
      }

      while (v10 != v29);
      Swift::Int v10 = v29;
    }

      swift_bridgeObjectRelease();
      v110[2] = 0LL;
      return swift_bridgeObjectRelease();
    }

    uint64_t v110 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = static Array._allocateBufferUninitialized(minimumCapacity:)( v5 >> 1,  &type metadata for SecureLocationsEncodedInfo);
    *(void *)(v8 + 16) = v7;
    uint64_t v110 = (void *)v8;
    __dst = (char *)(v8 + 32);
  }

  Swift::Int v10 = 0LL;
  Swift::String v11 = *a1;
  uint64_t v108 = *a1 + 80;
  v109 = *a1 + 16;
  unint64_t v12 = (char *)_swiftEmptyArrayStorage;
  v111 = v6;
  Swift::Int v112 = v3;
  Swift::Int v113 = v11;
  while (1)
  {
    Swift::Int v14 = v10++;
    if (v10 < v3)
    {
      unsigned int v15 = *(double *)(v109 + 32 * v10);
      uint64_t v16 = 32 * v14;
      unsigned int v17 = *(double *)(v109 + 32 * v14);
      Swift::Int v10 = v14 + 2;
      if (v14 + 2 < v3)
      {
        uint64_t v18 = (double *)(v108 + 32 * v14);
        while (v17 < v15 != *(v18 - 4) >= *v18)
        {
          ++v10;
          v18 += 4;
          if (v3 == v10)
          {
            Swift::Int v10 = v3;
            break;
          }
        }
      }

      if (v17 < v15)
      {
        if (v10 < v14) {
          goto LABEL_142;
        }
        if (v14 < v10)
        {
          uint64_t v19 = 32 * v10 - 32;
          Swift::Int v20 = v10;
          Swift::Int v21 = v14;
          do
          {
            if (v21 != --v20)
            {
              if (!v11) {
                goto LABEL_148;
              }
              uint64_t v24 = (_OWORD *)(v11 + v16);
              uint64_t v25 = (_OWORD *)(v11 + v19);
              unsigned __int8 v26 = *(_OWORD *)(v11 + v16);
              __int128 v27 = *(void *)(v11 + v16 + 16);
              unsigned __int8 v28 = *(_BYTE *)(v11 + v16 + 24);
              if (v16 != v19 || v24 >= v25 + 2)
              {
                __int128 v22 = v25[1];
                *uint64_t v24 = *v25;
                v24[1] = v22;
              }

              unint64_t v23 = v11 + v19;
              *(_OWORD *)unint64_t v23 = v26;
              *(void *)(v23 + 16) = v27;
              *(_BYTE *)(v23 + 24) = v28;
            }

            ++v21;
            v19 -= 32LL;
            v16 += 32LL;
          }

          while (v21 < v20);
        }
      }
    }

    if (v10 >= v3) {
      goto LABEL_50;
    }
    if (__OFSUB__(v10, v14)) {
      goto LABEL_140;
    }
    if (v10 - v14 >= v6) {
      goto LABEL_50;
    }
    Swift::Int v29 = v14 + v6;
    if (__OFADD__(v14, v6)) {
      goto LABEL_143;
    }
    if (v29 >= v3) {
      Swift::Int v29 = v3;
    }
    if (v29 < v14) {
      break;
    }
    if (v10 != v29)
    {
      uint64_t v30 = (double *)(v11 + 32 * v10);
      do
      {
        Swift::Int v31 = v30;
        uint64_t v32 = v14;
        do
        {
          int64_t v33 = v31[2];
          if (*(v31 - 2) >= v33) {
            break;
          }
          if (!v11) {
            goto LABEL_146;
          }
          unsigned int v34 = *((_BYTE *)v31 + 24);
          __int128 v35 = *(_OWORD *)v31;
          __int128 v36 = *((_OWORD *)v31 - 1);
          *(_OWORD *)Swift::Int v31 = *((_OWORD *)v31 - 2);
          *((_OWORD *)v31 + 1) = v36;
          *(v31 - 2) = v33;
          *((_BYTE *)v31 - 8) = v34;
          *((_OWORD *)v31 - 2) = v35;
          v31 -= 4;
          ++v32;
        }

        while (v10 != v32);
        ++v10;
        v30 += 4;
      }

      while (v10 != v29);
      Swift::Int v10 = v29;
    }

  sub_1000485FC(v137);
  v215(v137, v53);
  swift_bridgeObjectRelease();
LABEL_98:
  uint64_t v55 = v251;
  swift_endAccess(&aBlock);
  v220 = v239;
  if ((v268 & 0xC000000000000001LL) != 0)
  {
    if (v268 < 0) {
      v221 = v268;
    }
    else {
      v221 = v268 & 0xFFFFFFFFFFFFFF8LL;
    }
    v222 = __CocoaSet.count.getter(v221);
  }

  else
  {
    v222 = *(void *)(v268 + 16);
  }

  swift_release();
  swift_bridgeObjectRelease();
  if (v222)
  {
    v223 = [v220 identifier];
    v224 = (uint64_t)v231;
    static UUID._unconditionallyBridgeFromObjectiveC(_:)(v223);

    v225 = *v230;
    if (*(void *)(*v230 + 16))
    {
      swift_bridgeObjectRetain(*v230);
      v226 = sub_10030D124(v224);
      if ((v227 & 1) != 0)
      {
        swift_bridgeObjectRetain(*(void *)(*(void *)(v225 + 56) + 8 * v226));
        swift_bridgeObjectRelease();
        v215(v224, v53);
        return swift_bridgeObjectRelease();
      }

      swift_bridgeObjectRelease();
    }

    v215(v224, v53);
    swift_bridgeObjectRelease();
  }

LABEL_50:
    if (v10 < v14) {
      goto LABEL_135;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0) {
      unint64_t v12 = sub_1003CB1DC(0LL, *((void *)v12 + 2) + 1LL, 1, v12);
    }
    unint64_t v39 = *((void *)v12 + 2);
    unint64_t v38 = *((void *)v12 + 3);
    unint64_t v13 = v39 + 1;
    Swift::String v11 = v114;
    if (v39 >= v38 >> 1)
    {
      v88 = sub_1003CB1DC((char *)(v38 > 1), v39 + 1, 1, v12);
      Swift::String v11 = v114;
      unint64_t v12 = v88;
    }

    *((void *)v12 + 2) = v13;
    uint64_t v40 = v12 + 32;
    uint64_t v41 = &v12[16 * v39 + 32];
    *(void *)uint64_t v41 = v14;
    *((void *)v41 + 1) = v10;
    if (v39)
    {
      while (1)
      {
        unint64_t v42 = v13 - 1;
        if (v13 >= 4)
        {
          uint64_t v47 = &v40[16 * v13];
          uint64_t v48 = *((void *)v47 - 8);
          uint64_t v49 = *((void *)v47 - 7);
          BOOL v53 = __OFSUB__(v49, v48);
          uint64_t v50 = v49 - v48;
          if (v53) {
            goto LABEL_124;
          }
          uint64_t v52 = *((void *)v47 - 6);
          uint64_t v51 = *((void *)v47 - 5);
          BOOL v53 = __OFSUB__(v51, v52);
          uint64_t v45 = v51 - v52;
          char v46 = v53;
          if (v53) {
            goto LABEL_125;
          }
          unint64_t v54 = v13 - 2;
          uint64_t v55 = &v40[16 * v13 - 32];
          uint64_t v57 = *(void *)v55;
          uint64_t v56 = *((void *)v55 + 1);
          BOOL v53 = __OFSUB__(v56, v57);
          uint64_t v58 = v56 - v57;
          if (v53) {
            goto LABEL_127;
          }
          BOOL v53 = __OFADD__(v45, v58);
          uint64_t v59 = v45 + v58;
          if (v53) {
            goto LABEL_130;
          }
          if (v59 >= v50)
          {
            v77 = &v40[16 * v42];
            uint64_t v79 = *(void *)v77;
            uint64_t v78 = *((void *)v77 + 1);
            BOOL v53 = __OFSUB__(v78, v79);
            uint64_t v80 = v78 - v79;
            if (v53) {
              goto LABEL_134;
            }
            BOOL v70 = v45 < v80;
            goto LABEL_87;
          }
        }

        else
        {
          if (v13 != 3)
          {
            uint64_t v71 = *((void *)v12 + 4);
            uint64_t v72 = *((void *)v12 + 5);
            BOOL v53 = __OFSUB__(v72, v71);
            uint64_t v64 = v72 - v71;
            char v65 = v53;
            goto LABEL_81;
          }

          uint64_t v44 = *((void *)v12 + 4);
          uint64_t v43 = *((void *)v12 + 5);
          BOOL v53 = __OFSUB__(v43, v44);
          uint64_t v45 = v43 - v44;
          char v46 = v53;
        }

        if ((v46 & 1) != 0) {
          goto LABEL_126;
        }
        unint64_t v54 = v13 - 2;
        int v60 = &v40[16 * v13 - 32];
        uint64_t v62 = *(void *)v60;
        uint64_t v61 = *((void *)v60 + 1);
        BOOL v63 = __OFSUB__(v61, v62);
        uint64_t v64 = v61 - v62;
        char v65 = v63;
        if (v63) {
          goto LABEL_129;
        }
        uint64_t v66 = &v40[16 * v42];
        uint64_t v68 = *(void *)v66;
        uint64_t v67 = *((void *)v66 + 1);
        BOOL v53 = __OFSUB__(v67, v68);
        uint64_t v69 = v67 - v68;
        if (v53) {
          goto LABEL_132;
        }
        if (__OFADD__(v64, v69)) {
          goto LABEL_133;
        }
        if (v64 + v69 >= v45)
        {
          BOOL v70 = v45 < v69;
LABEL_87:
          if (v70) {
            unint64_t v42 = v54;
          }
          goto LABEL_89;
        }

  Swift::Int v31 = v6 + 1;
  if (__OFADD__(v6, 1LL)) {
    goto LABEL_68;
  }
  Swift::Int v21 = (unint64_t)(v14 + 64) >> 6;
  if (v31 >= v21)
  {
    uint64_t v18 = v3;
    goto LABEL_14;
  }

  uint64_t v32 = *(void *)(v35 + 8 * v31);
  int64_t v33 = v6 + 1;
  if (v32) {
    goto LABEL_53;
  }
  int64_t v33 = v6 + 2;
  if (v6 + 2 >= v21) {
    goto LABEL_47;
  }
  uint64_t v32 = *(void *)(v35 + 8 * v33);
  if (!v32)
  {
    int64_t v33 = v6 + 3;
    if (v6 + 3 >= v21) {
      goto LABEL_47;
    }
    uint64_t v32 = *(void *)(v35 + 8 * v33);
    if (!v32)
    {
      int64_t v33 = v6 + 4;
      if (v6 + 4 >= v21) {
        goto LABEL_47;
      }
      uint64_t v32 = *(void *)(v35 + 8 * v33);
      if (!v32)
      {
        int64_t v33 = v6 + 5;
        if (v6 + 5 < v21)
        {
          uint64_t v32 = *(void *)(v35 + 8 * v33);
          if (!v32)
          {
            unsigned int v34 = v6 + 6;
            do
            {
              if (v21 == v34) {
                goto LABEL_47;
              }
              uint64_t v32 = *(void *)(v35 + 8 * v34++);
            }

            while (!v32);
            int64_t v33 = v34 - 1;
          }

          goto LABEL_53;
        }

  v154 = 0LL;
  v211 = v150;
  v213 = v142;
  while (1)
  {
    v155 = v215
         ? (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v154, v142)
         : *(id *)(v142 + 8 * v154 + 32);
    v156 = v155;
    if (__OFADD__(v154, 1LL)) {
      break;
    }
    v225 = v154 + 1;
    v157 = v135[90];
    v158 = v135[88];
    v159 = v135[86];
    v135[10] = sub_100022898(0LL, (unint64_t *)&qword_1009A9C60, &OBJC_CLASS___SPBeaconLocation_ptr);
    v135[11] = (uint64_t)&off_100974788;
    v135[7] = (uint64_t)v237;
    v160 = v135;
    v161 = v237;
    v162 = [v156 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v162);

    v230 = v161;
    v163 = [v161 timestamp];
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v163);

    LOBYTE(v163) = static Date.== infix(_:_:)(v157, v158);
    v164 = *(void (**)(uint64_t, uint64_t))(v209 + 8);
    v164(v158, v159);
    v164(v157, v159);
    sub_100013044((uint64_t)v208, (uint64_t)v232);
    if ((v163 & 1) == 0)
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v232);
      sub_100013044((uint64_t)v208, (uint64_t)v136);
      v135 = v160;
      v170 = v207;
LABEL_62:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v136);
      sub_100013044((uint64_t)v208, (uint64_t)v170);
LABEL_63:
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v170);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v208);
      v181 = v230;

LABEL_64:
      swift_bridgeObjectRelease();

      v188 = v135[84];
      swift_bridgeObjectRelease();
      sub_100018C68(v188, type metadata accessor for OwnedBeaconGroup);

      goto LABEL_65;
    }

    v165 = v156;
    [v165 longitude];
    v167 = v166;
    objc_msgSend((id)*sub_100012ED8(v232, v160[30]), "longitude");
    v169 = v168;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v232);
    sub_100013044((uint64_t)v208, (uint64_t)v136);
    v135 = v160;
    v170 = v207;
    v142 = v213;
    if (v167 != v169) {
      goto LABEL_62;
    }
    v171 = v165;
    [v171 latitude];
    v173 = v172;
    objc_msgSend((id)*sub_100012ED8(v136, v160[20]), "latitude");
    v175 = v174;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v136);
    sub_100013044((uint64_t)v208, (uint64_t)v207);
    if (v173 != v175) {
      goto LABEL_63;
    }
    v176 = v171;
    [v176 horizontalAccuracy];
    v178 = v177;
    objc_msgSend((id)*sub_100012ED8(v207, v160[15]), "horizontalAccuracy");
    v180 = v179;

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v207);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v208);
    v181 = v230;

    if (v178 != v180) {
      goto LABEL_64;
    }
    ++v154;
    if (v225 == v211) {
      goto LABEL_60;
    }
  }

  __break(1u);
LABEL_82:
  __break(1u);
  return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
}

  __break(1u);
  return result;
}

  __break(1u);
  objc_autoreleasePoolPop((void *)v34);
  __break(1u);
}

            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v118);
            _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v121);
LABEL_51:
            unint64_t v38 = v126;
            uint64_t v56 = v125 + 40;
            if (v126 != v125 || v126 >= v56)
            {
              uint64_t v57 = *(_OWORD *)v125;
              uint64_t v58 = *((_OWORD *)v125 + 1);
              *((void *)v126 + 4) = *((void *)v125 + 4);
              *unint64_t v38 = v57;
              v38[1] = v58;
            }

            v125 = v56;
            unint64_t v39 = (unint64_t)v6;
            goto LABEL_55;
          }
        }

        __int128 v37 = 0LL;
LABEL_28:
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v118);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v121);
        if (v27 >= v37) {
          goto LABEL_51;
        }
        unint64_t v38 = v126;
        unint64_t v39 = (unint64_t)(v6 + 40);
        if (v126 >= v6 && (unint64_t)v126 < v39 && v126 == v6)
        {
          unint64_t v38 = v6;
        }

        else
        {
          uint64_t v40 = *(_OWORD *)v6;
          uint64_t v41 = *((_OWORD *)v6 + 1);
          *((void *)v126 + 4) = *((void *)v6 + 4);
          *unint64_t v38 = v40;
          v38[1] = v41;
        }

    if (v10 < v14) {
      goto LABEL_135;
    }
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) == 0) {
      unint64_t v12 = sub_1003CB1DC(0LL, *((void *)v12 + 2) + 1LL, 1, v12);
    }
    unint64_t v38 = *((void *)v12 + 2);
    __int128 v37 = *((void *)v12 + 3);
    unint64_t v13 = v38 + 1;
    Swift::String v11 = v113;
    if (v38 >= v37 >> 1)
    {
      unint64_t v87 = sub_1003CB1DC((char *)(v37 > 1), v38 + 1, 1, v12);
      Swift::String v11 = v113;
      unint64_t v12 = v87;
    }

    *((void *)v12 + 2) = v13;
    unint64_t v39 = v12 + 32;
    uint64_t v40 = &v12[16 * v38 + 32];
    *(void *)uint64_t v40 = v14;
    *((void *)v40 + 1) = v10;
    if (v38)
    {
      while (1)
      {
        uint64_t v41 = v13 - 1;
        if (v13 >= 4)
        {
          char v46 = &v39[16 * v13];
          uint64_t v47 = *((void *)v46 - 8);
          uint64_t v48 = *((void *)v46 - 7);
          uint64_t v52 = __OFSUB__(v48, v47);
          uint64_t v49 = v48 - v47;
          if (v52) {
            goto LABEL_124;
          }
          uint64_t v51 = *((void *)v46 - 6);
          uint64_t v50 = *((void *)v46 - 5);
          uint64_t v52 = __OFSUB__(v50, v51);
          uint64_t v44 = v50 - v51;
          uint64_t v45 = v52;
          if (v52) {
            goto LABEL_125;
          }
          BOOL v53 = v13 - 2;
          unint64_t v54 = &v39[16 * v13 - 32];
          uint64_t v56 = *(void *)v54;
          uint64_t v55 = *((void *)v54 + 1);
          uint64_t v52 = __OFSUB__(v55, v56);
          uint64_t v57 = v55 - v56;
          if (v52) {
            goto LABEL_127;
          }
          uint64_t v52 = __OFADD__(v44, v57);
          uint64_t v58 = v44 + v57;
          if (v52) {
            goto LABEL_130;
          }
          if (v58 >= v49)
          {
            uint64_t v76 = &v39[16 * v41];
            uint64_t v78 = *(void *)v76;
            v77 = *((void *)v76 + 1);
            uint64_t v52 = __OFSUB__(v77, v78);
            uint64_t v79 = v77 - v78;
            if (v52) {
              goto LABEL_134;
            }
            uint64_t v69 = v44 < v79;
            goto LABEL_87;
          }
        }

        else
        {
          if (v13 != 3)
          {
            BOOL v70 = *((void *)v12 + 4);
            uint64_t v71 = *((void *)v12 + 5);
            uint64_t v52 = __OFSUB__(v71, v70);
            BOOL v63 = v71 - v70;
            uint64_t v64 = v52;
            goto LABEL_81;
          }

          uint64_t v43 = *((void *)v12 + 4);
          unint64_t v42 = *((void *)v12 + 5);
          uint64_t v52 = __OFSUB__(v42, v43);
          uint64_t v44 = v42 - v43;
          uint64_t v45 = v52;
        }

        if ((v45 & 1) != 0) {
          goto LABEL_126;
        }
        BOOL v53 = v13 - 2;
        uint64_t v59 = &v39[16 * v13 - 32];
        uint64_t v61 = *(void *)v59;
        int v60 = *((void *)v59 + 1);
        uint64_t v62 = __OFSUB__(v60, v61);
        BOOL v63 = v60 - v61;
        uint64_t v64 = v62;
        if (v62) {
          goto LABEL_129;
        }
        char v65 = &v39[16 * v41];
        uint64_t v67 = *(void *)v65;
        uint64_t v66 = *((void *)v65 + 1);
        uint64_t v52 = __OFSUB__(v66, v67);
        uint64_t v68 = v66 - v67;
        if (v52) {
          goto LABEL_132;
        }
        if (__OFADD__(v63, v68)) {
          goto LABEL_133;
        }
        if (v63 + v68 >= v44)
        {
          uint64_t v69 = v44 < v68;
LABEL_87:
          if (v69) {
            uint64_t v41 = v53;
          }
          goto LABEL_89;
        }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v340);
LABEL_51:
  Swift::Int v112 = (void *)((char *)v50 + v83[417]);
  Swift::Int v113 = swift_beginAccess(v112, &v340, 0LL, 0LL);
  v114 = *v112;
  if (*(void *)(*v112 + 16LL))
  {
    swift_bridgeObjectRetain(*v112);
    v115 = sub_10030D124(v329);
    v116 = v327;
    v117 = v328;
    v118 = v316;
    if ((v119 & 1) != 0)
    {
      sub_10001DC4C( *(void *)(v114 + 56) + *(void *)(v328 + 72) * v115,  v316,  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      v120 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v117 + 56);
      v120(v118, 0LL, 1LL, v116);
    }

    else
    {
      v120 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v328 + 56);
      v120(v316, 1LL, 1LL, v327);
    }

    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v117 + 48))(v118, 1LL, v116) != 1)
    {
      v122 = v118;
      v123 = v312;
      sub_10002218C(v122, v312, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      v121 = *(void *)(v123 + *(int *)(v116 + 36));
      swift_errorRetain(v121);
      sub_100018C68(v123, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      if (v121) {
        v351 = 3LL;
      }
      goto LABEL_60;
    }
  }

  else
  {
    v120 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v328 + 56);
    v118 = v316;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))v120)(v316, 1LL, 1LL, v327, v113);
  }

  sub_100015794(v118, &qword_10099E488);
  v121 = 0LL;
LABEL_60:
  v124 = v351;
  v125 = SPBeaconTaskNamePlaySound;
  swift_errorRetain(v121);
  v126.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
  if (v121)
  {
    v127 = (void *)_convertErrorToNSError(_:)(v121);
    swift_errorRelease(v121);
  }

  else
  {
    v127 = 0LL;
  }

  v339 = (os_log_t)[objc_allocWithZone(SPBeaconTaskInformation) initWithName:v125 lastUpdated:v126.super.isa error:v127 state:v124];

  v128 = *v112;
  if (*(void *)(*v112 + 16LL))
  {
    swift_bridgeObjectRetain(*v112);
    v129 = sub_10030D124(v329);
    v130 = v324;
    v131 = v327;
    v132 = v319;
    v133 = v318;
    if ((v134 & 1) != 0)
    {
      sub_10001DC4C( *(void *)(v128 + 56) + *(void *)(v328 + 72) * v129,  v318,  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      v135 = v133;
      v136 = 0LL;
    }

    else
    {
      v135 = v318;
      v136 = 1LL;
    }

    v120(v135, v136, 1LL, v131);
    swift_bridgeObjectRelease();
  }

  else
  {
    v133 = v318;
    v131 = v327;
    v120(v318, 1LL, 1LL, v327);
    v130 = v324;
    v132 = v319;
  }

  v137 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v328 + 48))(v133, 1LL, v131);
  v138 = v325;
  if (v137)
  {
    sub_100015794(v133, &qword_10099E488);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v138 + 56))(v317, 1LL, 1LL, v130);
    Class isa = 0LL;
  }

  else
  {
    v140 = v314;
    sub_10001DC4C(v133, v314, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    sub_100015794(v133, &qword_10099E488);
    v141 = v317;
    (*(void (**)(char *, uint64_t, uint64_t))(v138 + 16))(v317, v140, v130);
    sub_100018C68(v140, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v138 + 56))(v141, 0LL, 1LL, v130);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v138 + 48))(v141, 1LL, v130) == 1)
    {
      Class isa = 0LL;
    }

    else
    {
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v138 + 8))(v141, v130);
    }
  }

  -[os_log_s setCommandIdentifier:](v339, "setCommandIdentifier:", isa);

  if (v81[102] != (_UNKNOWN *)-1LL) {
    swift_once(&qword_10099B330, sub_100374304);
  }
  v142 = type metadata accessor for Logger(0LL);
  sub_10000A720(v142, (uint64_t)qword_100A2A748);
  v143 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v138 + 16))(v132, v329, v130);
  v144 = (os_log_s *)Logger.logObject.getter(v143);
  v145 = static os_log_type_t.info.getter(v144);
  if (os_log_type_enabled(v144, v145))
  {
    v146 = swift_slowAlloc(32LL, -1LL);
    v338 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))swift_slowAlloc(64LL, -1LL);
    v344 = (uint64_t)v338;
    *(_DWORD *)v146 = 141558531;
    *(void *)&v348 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v348, (char *)&v348 + 8, v146 + 4, v146 + 12);
    *(_WORD *)(v146 + 12) = 2081;
    v147 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v148 = dispatch thunk of CustomStringConvertible.description.getter(v130, v147);
    *(void *)&v348 = sub_1003F11D4(v148, v149, &v344);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v348, (char *)&v348 + 8, v146 + 14, v146 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v138 + 8))(v132, v130);
    *(_WORD *)(v146 + 22) = 2082;
    swift_beginAccess(&v351, &v348, 0LL, 0LL);
    v150 = 0x676E696E6E75722ELL;
    v151 = 0xE800000000000000LL;
    switch(v351)
    {
      case -1LL:
        v150 = 0x6E776F6E6B6E752ELL;
        break;
      case 0LL:
        break;
      case 1LL:
        v150 = 0x676E69646E65702ELL;
        break;
      case 2LL:
        v151 = 0xE500000000000000LL;
        v150 = 0x656C64692ELL;
        break;
      case 3LL:
        v151 = 0xE600000000000000LL;
        v150 = 0x726F7272652ELL;
        break;
      case 4LL:
        v151 = 0xE700000000000000LL;
        v150 = 0x6465756575712ELL;
        break;
      default:
        v151 = 0x800000010085F780LL;
        v150 = 0xD000000000000010LL;
        break;
    }

    v347 = (unsigned int (*)(void, void, void))sub_1003F11D4(v150, v151, &v344);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v347, &v348, v146 + 24, v146 + 32);
    swift_bridgeObjectRelease();
    _os_log_impl( (void *)&_mh_execute_header,  v144,  v145,  "TaskInfo for Beacon: %{private,mask.hash}s has state: %{public}s.",  (uint8_t *)v146,  0x20u);
    v161 = v338;
    swift_arrayDestroy(v338, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v161, -1LL, -1LL);
    swift_slowDealloc(v146, -1LL, -1LL);

    swift_errorRelease(v121);
  }

  else
  {

    swift_errorRelease(v121);
    (*(void (**)(char *, uint64_t))(v138 + 8))(v132, v130);
  }

  (*(void (**)(char *, uint64_t))(v321 + 8))(v326, v322);
  return v339;
}

    sub_100015794((uint64_t)&v197, (uint64_t *)&unk_1009A9C40);
LABEL_51:
    a3 = 20.0;
    goto LABEL_52;
  }

  if (((1LL << v173) & 0x1D) == 0)
  {
    a3 = 2.0;
    goto LABEL_52;
  }

  sub_10001581C((uint64_t)v200, (uint64_t)&v197, (uint64_t *)&unk_1009A9C40);
  v109 = v198;
  if (!v198) {
    goto LABEL_50;
  }
  uint64_t v110 = v199;
  sub_100012ED8(&v197, v198);
  v111 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v110 + 176))(v109, v110);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v197);
  Swift::Int v112 = (void *)SPBeaconTypeHele;
  Swift::Int v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v111);
  v115 = v114;
  v117 = static String._unconditionallyBridgeFromObjectiveC(_:)(v112);
  v118 = v116;
  if (v113 != v117 || v115 != v116)
  {
LABEL_48:
    v129 = _stringCompareWithSmolCheck(_:_:expecting:)(v113, v115, v117, v118, 0LL);
    v130 = v112;

    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a3 = 30.0;
    if ((v129 & 1) != 0) {
      goto LABEL_52;
    }
    goto LABEL_51;
  }

    swift_once(&qword_10099B330, sub_100374304);
    goto LABEL_11;
  }

  __int128 v35 = v145;
  sub_100012ED8(v143, v144);
  (*(void (**)(uint64_t, uint64_t))(v35 + 192))(v34, v35);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v143);
  Swift::Int v29 = v137;
  __int128 v36 = v27;
  (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v27, v9, v29);
  if (qword_10099B330 != -1) {
    swift_once(&qword_10099B330, sub_100374304);
  }
  __int128 v37 = type metadata accessor for Logger(0LL);
  sub_10000A720(v37, (uint64_t)qword_100A2A748);
  unint64_t v38 = *(void (**)(char *, uint64_t, uint64_t))(v10 + 16);
  unint64_t v39 = v130;
  uint64_t v40 = v138;
  v38(v130, v138, v29);
  uint64_t v41 = v131;
  v134 = (uint64_t (*)(char *, uint64_t, uint64_t))v38;
  unint64_t v42 = ((uint64_t (*)(char *, char *, uint64_t))v38)(v131, v36, v29);
  uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
  uint64_t v44 = static os_log_type_t.default.getter(v43);
  uint64_t v45 = v44;
  if (os_log_type_enabled(v43, v44))
  {
    char v46 = swift_slowAlloc(32LL, -1LL);
    v126 = swift_slowAlloc(64LL, -1LL);
    v143[0] = v126;
    *(_DWORD *)char v46 = 141558531;
    v140 = 1752392040LL;
    v125 = v45;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, v141, v46 + 4, v46 + 12);
    *(_WORD *)(v46 + 12) = 2081;
    uint64_t v47 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    v124 = v43;
    uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter(v29, v47);
    v140 = sub_1003F11D4(v48, v49, v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, v141, v46 + 14, v46 + 22);
    swift_bridgeObjectRelease();
    uint64_t v50 = *(void (**)(char *, uint64_t))(v10 + 8);
    v50(v39, v29);
    *(_WORD *)(v46 + 22) = 2082;
    uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter(v29, v47);
    v140 = sub_1003F11D4(v51, v52, v143);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, v141, v46 + 24, v46 + 32);
    swift_bridgeObjectRelease();
    v50(v41, v29);
    BOOL v53 = v124;
    _os_log_impl( (void *)&_mh_execute_header,  v124,  (os_log_type_t)v125,  "didStopPlayingSoundOnDevice %{private,mask.hash}s. groupId %{public}s",  (uint8_t *)v46,  0x20u);
    unint64_t v54 = v126;
    swift_arrayDestroy(v126, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v54, -1LL, -1LL);
    uint64_t v55 = v46;
    uint64_t v40 = v138;
    swift_slowDealloc(v55, -1LL, -1LL);
  }

  else
  {

    uint64_t v50 = *(void (**)(char *, uint64_t))(v10 + 8);
    v50(v41, v29);
    v50(v39, v29);
  }

  v50(v36, v29);
LABEL_16:
  char v65 = v133;
  uint64_t v66 = (uint64_t)v135;
  uint64_t v67 = (uint64_t *)(v133 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators);
  swift_beginAccess(v133 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators, v143, 0LL, 0LL);
  uint64_t v68 = *v67;
  uint64_t v69 = v136;
  if (!*(void *)(v68 + 16))
  {
    v77 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v77 - 8) + 56LL))(v66, 1LL, 1LL, v77);
    goto LABEL_22;
  }

  swift_bridgeObjectRetain(v68);
  BOOL v70 = sub_10030D124(v40);
  if ((v71 & 1) != 0)
  {
    uint64_t v72 = v70;
    uint64_t v73 = *(void *)(v68 + 56);
    uint64_t v74 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
    uint64_t v75 = *(void *)(v74 - 8);
    uint64_t v76 = v73 + *(void *)(v75 + 72) * v72;
    Swift::Int v29 = v137;
    sub_10001DC4C(v76, v66, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v75 + 56))(v66, 0LL, 1LL, v74);
  }

  else
  {
    uint64_t v74 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 56LL))(v66, 1LL, 1LL, v74);
  }

  uint64_t v78 = v132;
  swift_bridgeObjectRelease();
  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v74 - 8) + 48LL))(v66, 1LL, v74) == 1)
  {
LABEL_22:
    sub_100015794(v66, &qword_10099E488);
    if (qword_10099B330 != -1) {
      swift_once(&qword_10099B330, sub_100374304);
    }
    uint64_t v79 = type metadata accessor for Logger(0LL);
    sub_10000A720(v79, (uint64_t)qword_100A2A748);
    uint64_t v80 = v134(v69, v40, v29);
    unint64_t v81 = (os_log_s *)Logger.logObject.getter(v80);
    v82 = static os_log_type_t.error.getter(v81);
    if (os_log_type_enabled(v81, v82))
    {
      v83 = swift_slowAlloc(22LL, -1LL);
      uint64_t v84 = swift_slowAlloc(32LL, -1LL);
      v140 = v84;
      *(_DWORD *)v83 = 141558275;
      v142 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, v143, v83 + 4, v83 + 12);
      *(_WORD *)(v83 + 12) = 2081;
      v85 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v86 = dispatch thunk of CustomStringConvertible.description.getter(v29, v85);
      v142 = sub_1003F11D4(v86, v87, &v140);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v142, v143, v83 + 14, v83 + 22);
      swift_bridgeObjectRelease();
      v50(v69, v29);
      v88 = "didStopPlayingSoundOnDevice called with unknown device %{private,mask.hash}s";
LABEL_38:
      _os_log_impl((void *)&_mh_execute_header, v81, v82, v88, (uint8_t *)v83, 0x16u);
      swift_arrayDestroy(v84, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v84, -1LL, -1LL);
      swift_slowDealloc(v83, -1LL, -1LL);
LABEL_40:

      return;
    }

    goto LABEL_39;
  }

  sub_100015794(v66, &qword_10099E488);
  v89 = (uint64_t *)(v65 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_stopSoundSubjects);
  swift_beginAccess(v65 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_stopSoundSubjects, &v140, 0LL, 0LL);
  uint64_t v90 = *v89;
  if (!*(void *)(v90 + 16))
  {
LABEL_34:
    if (qword_10099B330 != -1) {
      swift_once(&qword_10099B330, sub_100374304);
    }
    v109 = type metadata accessor for Logger(0LL);
    sub_10000A720(v109, (uint64_t)qword_100A2A748);
    uint64_t v69 = v129;
    uint64_t v110 = v134(v129, v40, v29);
    unint64_t v81 = (os_log_s *)Logger.logObject.getter(v110);
    v82 = static os_log_type_t.error.getter(v81);
    if (os_log_type_enabled(v81, v82))
    {
      v83 = swift_slowAlloc(22LL, -1LL);
      uint64_t v84 = swift_slowAlloc(32LL, -1LL);
      v142 = v84;
      *(_DWORD *)v83 = 141558275;
      v139 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v83 + 4, v83 + 12);
      *(_WORD *)(v83 + 12) = 2081;
      v111 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      Swift::Int v112 = dispatch thunk of CustomStringConvertible.description.getter(v29, v111);
      v139 = sub_1003F11D4(v112, v113, &v142);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v139, &v140, v83 + 14, v83 + 22);
      swift_bridgeObjectRelease();
      v50(v69, v29);
      v88 = "Missing stopSoundSubject for device %{private,mask.hash}s!";
      goto LABEL_38;
    }

    if (v17 < v13) {
      goto LABEL_128;
    }
    uint64_t v57 = v12;
    if ((swift_isUniquelyReferenced_nonNull_native(v12) & 1) != 0) {
      unint64_t v12 = v57;
    }
    else {
      unint64_t v12 = sub_1003CB1DC(0LL, *((void *)v57 + 2) + 1LL, 1, v57);
    }
    uint64_t v59 = *((void *)v12 + 2);
    uint64_t v58 = *((void *)v12 + 3);
    uint64_t v16 = v59 + 1;
    Swift::Int v14 = v134;
    if (v59 >= v58 >> 1)
    {
      v109 = sub_1003CB1DC((char *)(v58 > 1), v59 + 1, 1, v12);
      Swift::Int v14 = v134;
      unint64_t v12 = v109;
    }

    *((void *)v12 + 2) = v16;
    int v60 = v12 + 32;
    uint64_t v61 = &v12[16 * v59 + 32];
    *(void *)uint64_t v61 = v13;
    *((void *)v61 + 1) = v17;
    v128 = v17;
    if (v59)
    {
      while (1)
      {
        uint64_t v62 = v16 - 1;
        if (v16 >= 4)
        {
          uint64_t v67 = &v60[16 * v16];
          uint64_t v68 = *((void *)v67 - 8);
          uint64_t v69 = *((void *)v67 - 7);
          uint64_t v73 = __OFSUB__(v69, v68);
          BOOL v70 = v69 - v68;
          if (v73) {
            goto LABEL_117;
          }
          uint64_t v72 = *((void *)v67 - 6);
          uint64_t v71 = *((void *)v67 - 5);
          uint64_t v73 = __OFSUB__(v71, v72);
          char v65 = v71 - v72;
          uint64_t v66 = v73;
          if (v73) {
            goto LABEL_118;
          }
          uint64_t v74 = v16 - 2;
          uint64_t v75 = &v60[16 * v16 - 32];
          v77 = *(void *)v75;
          uint64_t v76 = *((void *)v75 + 1);
          uint64_t v73 = __OFSUB__(v76, v77);
          uint64_t v78 = v76 - v77;
          if (v73) {
            goto LABEL_120;
          }
          uint64_t v73 = __OFADD__(v65, v78);
          uint64_t v79 = v65 + v78;
          if (v73) {
            goto LABEL_123;
          }
          if (v79 >= v70)
          {
            __int128 v97 = &v60[16 * v62];
            v99 = *(void *)v97;
            __int128 v98 = *((void *)v97 + 1);
            uint64_t v73 = __OFSUB__(v98, v99);
            v100 = v98 - v99;
            if (v73) {
              goto LABEL_127;
            }
            uint64_t v90 = v65 < v100;
            goto LABEL_87;
          }
        }

        else
        {
          if (v16 != 3)
          {
            uint64_t v91 = *((void *)v12 + 4);
            v92 = *((void *)v12 + 5);
            uint64_t v73 = __OFSUB__(v92, v91);
            uint64_t v84 = v92 - v91;
            v85 = v73;
            goto LABEL_81;
          }

          uint64_t v64 = *((void *)v12 + 4);
          BOOL v63 = *((void *)v12 + 5);
          uint64_t v73 = __OFSUB__(v63, v64);
          char v65 = v63 - v64;
          uint64_t v66 = v73;
        }

        if ((v66 & 1) != 0) {
          goto LABEL_119;
        }
        uint64_t v74 = v16 - 2;
        uint64_t v80 = &v60[16 * v16 - 32];
        v82 = *(void *)v80;
        unint64_t v81 = *((void *)v80 + 1);
        v83 = __OFSUB__(v81, v82);
        uint64_t v84 = v81 - v82;
        v85 = v83;
        if (v83) {
          goto LABEL_122;
        }
        uint64_t v86 = &v60[16 * v62];
        v88 = *(void *)v86;
        unint64_t v87 = *((void *)v86 + 1);
        uint64_t v73 = __OFSUB__(v87, v88);
        v89 = v87 - v88;
        if (v73) {
          goto LABEL_125;
        }
        if (__OFADD__(v84, v89)) {
          goto LABEL_126;
        }
        if (v84 + v89 >= v65)
        {
          uint64_t v90 = v65 < v89;
LABEL_87:
          if (v90) {
            uint64_t v62 = v74;
          }
          goto LABEL_89;
        }

    sub_1003CB2D4((void **)&v31, (const void **)&v30, &v29);
    return 1LL;
  }

  Swift::Int result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

          swift_once(&qword_10099B700, sub_100651100);
          goto LABEL_45;
        }

          if (!(_DWORD)v78)
          {
LABEL_38:
            if (!(_DWORD)v79)
            {
LABEL_40:
              swift_bridgeObjectRelease();
              return swift_bridgeObjectRelease();
            }

  __break(1u);
LABEL_51:
  __break(1u);
LABEL_52:
  Swift::Int result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for MessagingDestination);
  __break(1u);
  return result;
}

LABEL_81:
        if ((v65 & 1) != 0) {
          goto LABEL_128;
        }
        uint64_t v73 = &v40[16 * v42];
        uint64_t v75 = *(void *)v73;
        uint64_t v74 = *((void *)v73 + 1);
        BOOL v53 = __OFSUB__(v74, v75);
        uint64_t v76 = v74 - v75;
        if (v53) {
          goto LABEL_131;
        }
        if (v76 < v64) {
          goto LABEL_15;
        }
LABEL_89:
        unint64_t v81 = v42 - 1;
        if (v42 - 1 >= v13)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }

        if (!v11) {
          goto LABEL_147;
        }
        v82 = v12;
        v83 = &v40[16 * v81];
        uint64_t v84 = *(void *)v83;
        v85 = &v40[16 * v42];
        uint64_t v86 = *((void *)v85 + 1);
        sub_1000D6B0C(&v11[32 * *(void *)v83], &v11[32 * *(void *)v85], (unint64_t)&v11[32 * v86], __dst);
        if (v1) {
          goto LABEL_97;
        }
        if (v86 < v84) {
          goto LABEL_121;
        }
        if (v42 > *((void *)v82 + 2)) {
          goto LABEL_122;
        }
        *(void *)v83 = v84;
        *(void *)&v40[16 * v81 + 8] = v86;
        unint64_t v87 = *((void *)v82 + 2);
        if (v42 >= v87) {
          goto LABEL_123;
        }
        unint64_t v12 = v82;
        unint64_t v13 = v87 - 1;
        memmove(&v40[16 * v42], v85 + 16, 16 * (v87 - 1 - v42));
        *((void *)v82 + 2) = v87 - 1;
        Swift::String v11 = v114;
        if (v87 <= 2) {
          goto LABEL_15;
        }
      }
    }

    unint64_t v13 = 1LL;
LABEL_15:
    Swift::Int v6 = v112;
    Swift::Int v3 = v113;
    if (v10 >= v113)
    {
      Swift::String v9 = v111;
      goto LABEL_107;
    }
  }

        if ((v64 & 1) != 0) {
          goto LABEL_128;
        }
        uint64_t v72 = &v39[16 * v41];
        uint64_t v74 = *(void *)v72;
        uint64_t v73 = *((void *)v72 + 1);
        uint64_t v52 = __OFSUB__(v73, v74);
        uint64_t v75 = v73 - v74;
        if (v52) {
          goto LABEL_131;
        }
        if (v75 < v63) {
          goto LABEL_15;
        }
LABEL_89:
        uint64_t v80 = v41 - 1;
        if (v41 - 1 >= v13)
        {
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
          goto LABEL_144;
        }

        if (!v11) {
          goto LABEL_147;
        }
        unint64_t v81 = v12;
        v82 = &v39[16 * v80];
        v83 = *(void *)v82;
        uint64_t v84 = &v39[16 * v41];
        v85 = *((void *)v84 + 1);
        sub_100262618( (char *)(v11 + 32LL * *(void *)v82),  (char *)(v11 + 32LL * *(void *)v84),  v11 + 32 * v85,  __dst);
        if (v1) {
          goto LABEL_97;
        }
        if (v85 < v83) {
          goto LABEL_121;
        }
        if (v41 > *((void *)v81 + 2)) {
          goto LABEL_122;
        }
        *(void *)v82 = v83;
        *(void *)&v39[16 * v80 + 8] = v85;
        uint64_t v86 = *((void *)v81 + 2);
        if (v41 >= v86) {
          goto LABEL_123;
        }
        unint64_t v12 = v81;
        unint64_t v13 = v86 - 1;
        memmove(&v39[16 * v41], v84 + 16, 16 * (v86 - 1 - v41));
        *((void *)v81 + 2) = v86 - 1;
        Swift::String v11 = v113;
        if (v86 <= 2) {
          goto LABEL_15;
        }
      }
    }

    unint64_t v13 = 1LL;
LABEL_15:
    Swift::Int v6 = v111;
    Swift::Int v3 = v112;
    if (v10 >= v112)
    {
      Swift::String v9 = v110;
      goto LABEL_107;
    }
  }

    __break(1u);
LABEL_82:
    __break(1u);
LABEL_83:
    swift_once(&qword_10099B300, sub_1003459EC);
  }

  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
  }
  uint64_t v43 = v2[2];
  unint64_t v42 = v2[3];
  if (v43 >= v42 >> 1) {
    uint64_t v2 = sub_1004C4120((void *)(v42 > 1), v43 + 1, 1, v2);
  }
  v2[2] = v43 + 1;
  uint64_t v44 = &v2[2 * v43];
  v44[4] = 0xD000000000000019LL;
  v44[5] = 0x80000001008632A0LL;
  if ((a1 & 0x4000) != 0)
  {
LABEL_86:
    if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
      uint64_t v2 = sub_1004C4120(0LL, v2[2] + 1LL, 1, v2);
    }
    char v46 = v2[2];
    uint64_t v45 = v2[3];
    if (v46 >= v45 >> 1) {
      uint64_t v2 = sub_1004C4120((void *)(v45 > 1), v46 + 1, 1, v2);
    }
    v2[2] = v46 + 1;
    uint64_t v47 = &v2[2 * v46];
    v47[4] = 0xD000000000000012LL;
    v47[5] = 0x8000000100863280LL;
  }

        if ((v85 & 1) != 0) {
          goto LABEL_121;
        }
        uint64_t v93 = &v60[16 * v62];
        unsigned int v95 = *(void *)v93;
        v94 = *((void *)v93 + 1);
        uint64_t v73 = __OFSUB__(v94, v95);
        unsigned __int8 v96 = v94 - v95;
        if (v73) {
          goto LABEL_124;
        }
        if (v96 < v84) {
          goto LABEL_14;
        }
LABEL_89:
        uint64_t v101 = v62 - 1;
        if (v62 - 1 >= v16)
        {
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
          goto LABEL_137;
        }

        if (!v14) {
          goto LABEL_139;
        }
        unint64_t v102 = v12;
        v103 = &v60[16 * v101];
        uint64_t v104 = *(void *)v103;
        uint64_t v105 = &v60[16 * v62];
        v106 = *((void *)v105 + 1);
        unint64_t v107 = v130;
        sub_1006D40FC( (void **)(v14 + 8LL * *(void *)v103),  (id *)(v14 + 8LL * *(void *)v105),  (id *)(v14 + 8 * v106),  v129);
        v130 = v107;
        if (v107) {
          goto LABEL_112;
        }
        if (v106 < v104) {
          goto LABEL_114;
        }
        if (v62 > *((void *)v102 + 2)) {
          goto LABEL_115;
        }
        *(void *)v103 = v104;
        *(void *)&v60[16 * v101 + 8] = v106;
        uint64_t v108 = *((void *)v102 + 2);
        if (v62 >= v108) {
          goto LABEL_116;
        }
        uint64_t v16 = v108 - 1;
        memmove(&v60[16 * v62], v105 + 16, 16 * (v108 - 1 - v62));
        unint64_t v12 = v102;
        *((void *)v102 + 2) = v108 - 1;
        Swift::Int v14 = v134;
        if (v108 <= 2) {
          goto LABEL_14;
        }
      }
    }

    uint64_t v16 = 1LL;
LABEL_14:
    Swift::Int v6 = v127;
    unint64_t v13 = v128;
    if (v128 >= v127) {
      goto LABEL_101;
    }
  }

  if (__OFADD__(v13, v124)) {
    goto LABEL_136;
  }
  if (v13 + v124 >= v6) {
    uint64_t v43 = v6;
  }
  else {
    uint64_t v43 = v13 + v124;
  }
  if (v43 >= v13)
  {
    if (v17 != v43)
    {
      v120 = v12;
      uint64_t v44 = v122 + 8 * v17;
      v125 = v43;
      do
      {
        uint64_t v45 = v17;
        char v46 = *(void **)(v14 + 8 * v17);
        v128 = v44;
        while (1)
        {
          uint64_t v47 = *(void **)v44;
          uint64_t v48 = v46;
          uint64_t v49 = v47;
          uint64_t v50 = [v48 timestamp];
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v50);

          uint64_t v51 = [v49 timestamp];
          uint64_t v52 = v132;
          static Date._unconditionallyBridgeFromObjectiveC(_:)(v51);

          LOBYTE(v51) = static Date.< infix(_:_:)(v5, v52);
          BOOL v53 = *(void (**)(char *, uint64_t))(v131 + 8);
          unint64_t v54 = v52;
          uint64_t v55 = v133;
          v53(v54, v133);
          v53(v5, v55);

          Swift::Int v14 = v134;
          if (!v134) {
            goto LABEL_138;
          }
          uint64_t v56 = *(void **)v44;
          char v46 = *(void **)(v44 + 8);
          *(void *)uint64_t v44 = v46;
          *(void *)(v44 + 8) = v56;
          v44 -= 8LL;
          if (v45 == ++v13) {
            goto LABEL_43;
          }
        }

        Swift::Int v14 = v134;
LABEL_43:
        unsigned int v17 = v45 + 1;
        uint64_t v44 = v128 + 8;
        unint64_t v13 = v126;
      }

      while (v45 + 1 != v125);
      unsigned int v17 = v125;
      unint64_t v12 = v120;
    }

    goto LABEL_50;
  }

      uint64_t v69 = static os_log_type_t.error.getter(v59);
      if (qword_10099B3E8 != -1) {
        swift_once(&qword_10099B3E8, sub_1003E02E8);
      }
      BOOL v70 = v60[286];
      uint64_t v71 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v72 = swift_allocObject(v71, 72LL, 7LL);
      *(_OWORD *)(v72 + 16) = v99;
      uint64_t v73 = URL.path.getter(v72);
      uint64_t v75 = v74;
      *(void *)(v72 + 56) = &type metadata for String;
      uint64_t v76 = sub_1000226F4();
      *(void *)(v72 + 64) = v76;
      *(void *)(v72 + 32) = v73;
      *(void *)(v72 + 40) = v75;
      os_log(_:dso:log:_:_:)(v69, &_mh_execute_header, v70, "Cleaning up abandoned build file: %@", 36LL, 2LL, v72);
      swift_bridgeObjectRelease();
      URL._bridgeToObjectiveC()(v77);
      uint64_t v79 = v78;
      v110[0] = 0LL;
      LODWORD(v70) = [v98 removeItemAtURL:v78 error:v110];

      uint64_t v80 = v110[0];
      if ((_DWORD)v70)
      {
        unint64_t v81 = v110[0];
      }

      else
      {
        v82 = v110[0];
        v83 = (void *)_convertNSErrorToError(_:)(v80);

        v85 = swift_willThrow(v84);
        uint64_t v86 = static os_log_type_t.error.getter(v85);
        unint64_t v87 = qword_100A2A8F0;
        v88 = swift_allocObject(v71, 72LL, 7LL);
        *(_OWORD *)(v88 + 16) = v99;
        v110[0] = v83;
        swift_errorRetain(v83);
        v89 = sub_100004AEC((uint64_t *)&unk_1009A5470);
        uint64_t v90 = String.init<A>(describing:)(v110, v89);
        *(void *)(v88 + 56) = &type metadata for String;
        *(void *)(v88 + 64) = v76;
        *(void *)(v88 + 32) = v90;
        *(void *)(v88 + 40) = v91;
        os_log(_:dso:log:_:_:)(v86, &_mh_execute_header, v87, "Error deleting file: %@", 23LL, 2LL, v88);
        swift_bridgeObjectRelease();
        swift_errorRelease(v83);
      }

      uint64_t v2 = v101;
      unsigned int v17 = v108(v7, v101);
      uint64_t v18 = v102;
LABEL_6:
      DirectorySequence.next()(v17);
      if (v104(v18, 1LL, v2) == 1) {
        goto LABEL_2;
      }
    }

    if ((v27 & 0x2000000000000000LL) == 0)
    {
      if ((v25 & 0x1000000000000000LL) != 0) {
        uint64_t v50 = (unsigned __int8 *)((v27 & 0xFFFFFFFFFFFFFFFLL) + 32);
      }
      else {
        uint64_t v50 = (unsigned __int8 *)_StringObject.sharedUTF8.getter(v25, v27);
      }
      uint64_t v51 = sub_1001B91DC(v50, v48, 10LL);
      LODWORD(v52) = (_DWORD)v51;
      v109 = BYTE4(v51) & 1;
      BOOL v53 = BYTE4(v51) & 1;
LABEL_61:
      uint64_t v59 = swift_bridgeObjectRelease();
      int v60 = &OBJC_IVAR____TtC12searchpartyd20AccessoryPairingInfo_baaAccIntCA1;
      if ((v53 & 1) != 0) {
        goto LABEL_81;
      }
      goto LABEL_62;
    }

    v110[0] = (id)v25;
    v110[1] = (id)(v27 & 0xFFFFFFFFFFFFFFLL);
    if (v25 == 43)
    {
      if (!v47) {
        goto LABEL_91;
      }
      if (v47 == 1) {
        goto LABEL_58;
      }
      LODWORD(v52) = (BYTE1(v25) - 48);
      if (v47 == 2) {
        goto LABEL_60;
      }
      if ((BYTE2(v25) - 48) <= 9u)
      {
        LODWORD(v52) = 10 * v52 + (BYTE2(v25) - 48);
        uint64_t v55 = v47 - 3;
        if (v55)
        {
          uint64_t v56 = (unsigned __int8 *)v95;
          while (1)
          {
            uint64_t v57 = *v56 - 48;
            if (v57 > 9) {
              goto LABEL_58;
            }
            uint64_t v58 = 10LL * (int)v52;
            LODWORD(v52) = v58 + v57;
            BOOL v53 = 0;
            ++v56;
            if (!--v55) {
              goto LABEL_61;
            }
          }
        }

        goto LABEL_60;
      }
    }

    else
    {
      if (v25 == 45)
      {
        if (!v47)
        {
          __break(1u);
LABEL_91:
          __break(1u);
        }

        if (v47 == 1) {
          goto LABEL_58;
        }
        unint64_t v54 = (BYTE1(v25) - 48);
        if (v54 > 9) {
          goto LABEL_58;
        }
        if (v47 == 2)
        {
          BOOL v53 = 0;
          LODWORD(v52) = -v54;
          goto LABEL_61;
        }

        LODWORD(v52) = -10 * v54 - (BYTE2(v25) - 48);
        char v65 = v47 - 3;
        if (v65)
        {
          uint64_t v66 = (unsigned __int8 *)v95;
          while (1)
          {
            uint64_t v67 = *v66 - 48;
            if (v67 > 9) {
              goto LABEL_58;
            }
            uint64_t v68 = 10LL * (int)v52;
            LODWORD(v52) = v68 - v67;
            BOOL v53 = 0;
            ++v66;
            if (!--v65) {
              goto LABEL_61;
            }
          }
        }

uint64_t sub_1000D6B0C(unsigned __int8 *__src, unsigned __int8 *a2, unint64_t a3, char *__dst)
{
  unsigned __int8 v4 = (unsigned __int8 *)__dst;
  Swift::Int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 31;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 5;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 31;
  uint64_t v13 = v12 >> 5;
  uint64_t v30 = __dst;
  Swift::Int v31 = __src;
  if (v10 >= v13)
  {
    if (v11 >= -31)
    {
      uint64_t v19 = 32 * v13;
      Swift::Int v20 = &v4[v19];
      Swift::Int v29 = &v4[v19];
      Swift::Int v31 = v6;
      if (v7 < v6 && (unint64_t)(v11 - 32) <= 0xFFFFFFFFFFFFFFC0LL)
      {
        Swift::Int v21 = (unsigned __int8 *)(a3 - 32);
        __int128 v22 = v6;
        while (1)
        {
          unint64_t v23 = v21 + 32;
          unsigned int v24 = *(v22 - 32);
          v22 -= 32;
          if (*(v20 - 32) >= v24)
          {
            Swift::Int v29 = v20 - 32;
            if (v23 < v20 || v21 >= v20 || v23 != v20)
            {
              __int128 v26 = *((_OWORD *)v20 - 1);
              *(_OWORD *)Swift::Int v21 = *((_OWORD *)v20 - 2);
              *((_OWORD *)v21 + 1) = v26;
            }

            __int128 v22 = v6;
            v20 -= 32;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }

          else
          {
            if (v23 != v6 || v21 >= v6)
            {
              __int128 v25 = *((_OWORD *)v22 + 1);
              *(_OWORD *)Swift::Int v21 = *(_OWORD *)v22;
              *((_OWORD *)v21 + 1) = v25;
            }

            Swift::Int v31 = v22;
            if (v22 <= v7) {
              goto LABEL_42;
            }
          }

          v21 -= 32;
          Swift::Int v6 = v22;
          if (v20 <= v4) {
            goto LABEL_42;
          }
        }
      }

      goto LABEL_42;
    }
  }

  else if (v8 >= -31)
  {
    size_t v14 = 32 * v10;
    unsigned int v15 = &v4[v14];
    Swift::Int v29 = &v4[v14];
    if ((unint64_t)v6 < a3 && (unint64_t)(v8 - 32) <= 0xFFFFFFFFFFFFFFC0LL)
    {
      do
      {
        if (*v6 >= *v4)
        {
          if (v7 != v4)
          {
            __int128 v18 = *((_OWORD *)v4 + 1);
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v4;
            *((_OWORD *)v7 + 1) = v18;
          }

          v4 += 32;
          uint64_t v30 = (char *)v4;
          uint64_t v16 = v6;
        }

        else
        {
          uint64_t v16 = v6 + 32;
          if (v7 < v6 || v7 >= v16 || v7 != v6)
          {
            __int128 v17 = *((_OWORD *)v6 + 1);
            *(_OWORD *)uint64_t v7 = *(_OWORD *)v6;
            *((_OWORD *)v7 + 1) = v17;
          }
        }

        v7 += 32;
        if (v4 >= v15) {
          break;
        }
        Swift::Int v6 = v16;
      }

      while ((unint64_t)v16 < a3);
      Swift::Int v31 = v7;
    }

LABEL_42:
    sub_1003CB4B8(&v31, &v30, &v29);
    return 1LL;
  }

  char v28 = 2;
  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v28,  1046LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
  return result;
}

  v99 = v21[19];
  v100 = *(unsigned __int8 *)(v44 + v99);
  uint64_t v101 = v23[v99];
  if (v100 != (_DWORD)v101)
  {
    *((void *)&v144 + 1) = &type metadata for Int;
    v145 = &protocol witness table for Int;
    *(void *)&v143 = v101;
    CKRecordKeyValueSetting.subscript.setter(&v143, 0x4C79726574746162LL, 0xEC0000006C657665LL, v83);
  }

  unint64_t v102 = v21[10];
  uint64_t v104 = *(void *)(v44 + v102);
  v103 = *(void *)(v44 + v102 + 8);
  uint64_t v105 = (uint64_t *)&v23[v102];
  unint64_t v107 = *v105;
  v106 = v105[1];
  if (v103 >> 60 == 15)
  {
    if (v106 >> 60 == 15) {
      goto LABEL_53;
    }
    sub_100018BE4(v104, v103);
    sub_100018BE4(v107, v106);
    sub_1000182F0(v104, v103);
    sub_1000182F0(v107, v106);
LABEL_52:
    *((void *)&v144 + 1) = &type metadata for Data;
    v145 = &protocol witness table for Data;
    *(void *)&v143 = v107;
    *((void *)&v143 + 1) = v106;
    sub_10001736C(v107, v106);
    sub_10001736C(v107, v106);
    CKRecordKeyValueSetting.subscript.setter(&v143, 0x6553646572616873LL, 0xED00003274657263LL, v83);
    sub_1000182F0(v107, v106);
    goto LABEL_53;
  }

  sub_100018BE4(v104, v103);
  sub_100018BE4(v107, v106);
  if (v106 >> 60 == 15)
  {
    sub_1000182F0(v104, v103);
    sub_1000182F0(v107, v106);
    uint64_t v108 = String._bridgeToObjectiveC()();
    [v50 setObject:0 forKeyedSubscript:v108];

    goto LABEL_53;
  }

  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v104, v103);
  v114 = v113;
  sub_1000182F0(v107, v106);
  sub_1000182F0(v104, v103);
  if ((v114 & 1) == 0) {
    goto LABEL_52;
  }
LABEL_53:
  v115 = v21[11];
  v117 = *(void *)(v44 + v115);
  v116 = *(void *)(v44 + v115 + 8);
  v118 = (uint64_t *)&v23[v115];
  v120 = *v118;
  v119 = v118[1];
  if (v116 >> 60 == 15)
  {
    if (v119 >> 60 == 15) {
      goto LABEL_60;
    }
    sub_100018BE4(v117, v116);
    sub_100018BE4(v120, v119);
    sub_1000182F0(v117, v116);
    sub_1000182F0(v120, v119);
LABEL_59:
    *((void *)&v144 + 1) = &type metadata for Data;
    v145 = &protocol witness table for Data;
    *(void *)&v143 = v120;
    *((void *)&v143 + 1) = v119;
    sub_10001736C(v120, v119);
    sub_10001736C(v120, v119);
    CKRecordKeyValueSetting.subscript.setter(&v143, 0xD00000000000001BLL, 0x800000010084E5A0LL, v83);
    sub_1000182F0(v120, v119);
    goto LABEL_60;
  }

  sub_100018BE4(v117, v116);
  sub_100018BE4(v120, v119);
  if (v119 >> 60 == 15)
  {
    sub_1000182F0(v117, v116);
    sub_1000182F0(v120, v119);
    v121 = String._bridgeToObjectiveC()();
    [v50 setObject:0 forKeyedSubscript:v121];

    goto LABEL_60;
  }

  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v117, v116);
  v123 = v122;
  sub_1000182F0(v120, v119);
  sub_1000182F0(v117, v116);
  if ((v123 & 1) == 0) {
    goto LABEL_59;
  }
LABEL_60:
  v124 = v21[20];
  v125 = *(unsigned __int8 *)(v44 + v124);
  v126 = v23[v124];
  if (v125 == v126)
  {
    sub_100018C68((uint64_t)v23, type metadata accessor for OwnedBeaconRecord);
    return swift_unknownObjectRelease(v50);
  }

  else
  {
    *((void *)&v144 + 1) = &type metadata for Bool;
    v145 = &protocol witness table for Bool;
    LOBYTE(v143) = v126;
    CKRecordKeyValueSetting.subscript.setter(&v143, 0x7375655A7369LL, 0xE600000000000000LL, v83);
    swift_unknownObjectRelease(v50);
    return sub_100018C68((uint64_t)v23, type metadata accessor for OwnedBeaconRecord);
  }

    sub_1003CB4C8((void **)&v24, (const void **)&v23, &v22);
    return 1LL;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

      uint64_t v11 = v209;
      v100 = v215;
      uint64_t v101 = sub_1004E55A0(*(_BYTE *)(v215 + *(int *)(v209 + 24)), v89);
      swift_bridgeObjectRelease();
      if (v101)
      {
        sub_10002218C(v100, v207, type metadata accessor for BeaconObservation);
        unint64_t v102 = v223;
        v103 = swift_isUniquelyReferenced_nonNull_native(v223);
        a2 = v208;
        uint64_t v50 = v185;
        if ((v103 & 1) == 0)
        {
          sub_100032AA8(0, *(void *)(v102 + 16) + 1LL, 1);
          unint64_t v102 = v223;
        }

        uint64_t v105 = *(void *)(v102 + 16);
        uint64_t v104 = *(void *)(v102 + 24);
        if (v105 >= v104 >> 1)
        {
          sub_100032AA8(v104 > 1, v105 + 1, 1);
          unint64_t v102 = v223;
        }

        *(void *)(v102 + 16) = v105 + 1;
        sub_10002218C(v207, v102 + v187 + v105 * v186, type metadata accessor for BeaconObservation);
      }

      else
      {
        sub_100018C68(v100, type metadata accessor for BeaconObservation);
        a2 = v208;
        uint64_t v50 = v185;
      }

      uint64_t v78 = (uint64_t)v212;
      uint64_t v86 = v192;
      uint64_t v84 = v183;
      if (v192 == v184)
      {
        v85 = (void *)v223;
        uint64_t v71 = v193;
        uint64_t v73 = v182;
        break;
      }
    }
  }

  swift_release();
LABEL_58:
  objc_autoreleasePoolPop(v73);
  v119 = v203;
  sub_1000F0A44((uint64_t)v85, v203);
  swift_bridgeObjectRelease();
  v120 = v119;
  v121 = v190;
  sub_10001581C(v120, v190, (uint64_t *)&unk_1009A5990);
  v122 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v210 + 48);
  if (v122(v121, 1LL, v11) == 1)
  {
    sub_100015794(v121, (uint64_t *)&unk_1009A5990);
  }

  else
  {
    sub_10002218C(v121, (uint64_t)v71, type metadata accessor for BeaconObservation);
    v123 = sub_10001DC4C((uint64_t)v71, v78, type metadata accessor for BeaconObservation);
    v124 = (os_log_s *)Logger.logObject.getter(v123);
    v125 = static os_log_type_t.debug.getter(v124);
    if (os_log_type_enabled(v124, v125))
    {
      v126 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v127 = (void **)swift_slowAlloc(32LL, -1LL);
      v209 = v11;
      v128 = v127;
      aBlock = v127;
      *(_DWORD *)v126 = 136315138;
      v129 = sub_10042E164();
      v223 = sub_1003F11D4(v129, v130, (uint64_t *)&aBlock);
      uint64_t v50 = v185;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, v224, v126 + 4, v126 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v212, type metadata accessor for BeaconObservation);
      _os_log_impl((void *)&_mh_execute_header, v124, v125, "Found observation %s", v126, 0xCu);
      swift_arrayDestroy(v128, 1LL, (char *)&type metadata for Any + 8);
      v131 = v128;
      uint64_t v11 = v209;
      swift_slowDealloc(v131, -1LL, -1LL);
      swift_slowDealloc(v126, -1LL, -1LL);

      v132 = (uint64_t)v193;
    }

    else
    {

      sub_100018C68(v78, type metadata accessor for BeaconObservation);
      v132 = (uint64_t)v71;
    }

    sub_100018C68(v132, type metadata accessor for BeaconObservation);
  }

  v133 = v191;
  sub_10001581C(v203, v191, (uint64_t *)&unk_1009A5990);
  if (v122(v133, 1LL, v11) == 1)
  {
    sub_100015794(v133, (uint64_t *)&unk_1009A5990);
    v134 = v205;
    goto LABEL_69;
  }

  v135 = *(unsigned __int8 *)(v133 + *(int *)(v11 + 24));
  sub_100018C68(v133, type metadata accessor for BeaconObservation);
  v134 = v205;
  if (v135 == 23)
  {
    v136 = v188;
    v137 = v204(v188, a2, v205);
    v138 = (os_log_s *)Logger.logObject.getter(v137);
    v139 = static os_log_type_t.error.getter(v138);
    if (os_log_type_enabled(v138, v139))
    {
      v140 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      v141 = (void **)swift_slowAlloc(32LL, -1LL);
      aBlock = v141;
      *(_DWORD *)v140 = 136315138;
      v142 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      v143 = dispatch thunk of CustomStringConvertible.description.getter(v134, v142);
      v223 = sub_1003F11D4(v143, v144, (uint64_t *)&aBlock);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v223, v224, v140 + 4, v140 + 12);
      swift_bridgeObjectRelease();
      v50(v136, v134);
      _os_log_impl((void *)&_mh_execute_header, v138, v139, "Play Sound has already been queued for: %s", v140, 0xCu);
      swift_arrayDestroy(v141, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v141, -1LL, -1LL);
      swift_slowDealloc(v140, -1LL, -1LL);
    }

    else
    {
      v50(v136, v134);
    }

    sub_100004AB0();
    v154 = v195;
    v155 = v194;
    v156 = v196;
    (*(void (**)(char *, void, uint64_t))(v195 + 104))( v194,  enum case for DispatchQoS.QoSClass.default(_:),  v196);
    v150 = (void *)static OS_dispatch_queue.global(qos:)(v155);
    (*(void (**)(char *, uint64_t))(v154 + 8))(v155, v156);
    v157 = swift_allocObject(&unk_100954EA8, 32LL, 7LL);
    v158 = v214;
    *(void *)(v157 + 16) = v213;
    *(void *)(v157 + 24) = v158;
    v221 = sub_10039AB78;
    v222 = v157;
    aBlock = _NSConcreteStackBlock;
    v218 = 1107296256LL;
    v153 = &unk_100954EC0;
LABEL_76:
    v219 = sub_1001C31E8;
    v220 = v153;
    v159 = _Block_copy(&aBlock);
    v160 = swift_retain();
    v161 = v199;
    static DispatchQoS.unspecified.getter(v160);
    v223 = (uint64_t)_swiftEmptyArrayStorage;
    v162 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v163 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    v164 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    v165 = v197;
    v166 = v163;
    v167 = v201;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v223, v166, v164, v201, v162);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v161, v165, v159);
    _Block_release(v159);

    (*(void (**)(char *, uint64_t))(v198 + 8))(v165, v167);
    (*(void (**)(char *, uint64_t))(v200 + 8))(v161, v202);
    sub_100015794(v203, (uint64_t *)&unk_1009A5990);
    return swift_release();
  }

  else
  {
LABEL_69:
    v145 = (uint64_t)v189;
    v204(v189, a2, v134);
    if (v216 == 4)
    {
      v50((char *)v145, v134);
      sub_100399CEC(a2);
    }

    else
    {
      v146 = sub_1003998B0(v145);
      v50((char *)v145, v134);
      if (v146)
      {
        sub_100004AB0();
        v147 = v195;
        v148 = v194;
        v149 = v196;
        (*(void (**)(char *, void, uint64_t))(v195 + 104))( v194,  enum case for DispatchQoS.QoSClass.default(_:),  v196);
        v150 = (void *)static OS_dispatch_queue.global(qos:)(v148);
        (*(void (**)(char *, uint64_t))(v147 + 8))(v148, v149);
        v151 = swift_allocObject(&unk_100954E58, 32LL, 7LL);
        v152 = v214;
        *(void *)(v151 + 16) = v213;
        *(void *)(v151 + 24) = v152;
        v221 = sub_10039AB5C;
        v222 = v151;
        aBlock = _NSConcreteStackBlock;
        v218 = 1107296256LL;
        v153 = &unk_100954E70;
        goto LABEL_76;
      }
    }

    sub_100389C70(v211, a2, 2LL, v213, v214, a6);
    return sub_100015794(v203, (uint64_t *)&unk_1009A5990);
  }

    swift_once(&qword_10099B330, sub_100374304);
    goto LABEL_25;
  }

  v117 = 0LL;
  uint64_t v101 = v28;
  v100 = v29;
  char v65 = v110;
  sub_10002218C(v47, v110, type metadata accessor for BeaconObservation);
  uint64_t v66 = v106;
  static Date.trustedNow.getter(v106);
  uint64_t v67 = Date.timeIntervalSince(_:)(v65 + *(int *)(v46 + 20));
  (*(void (**)(uint64_t, uint64_t))(v107 + 8))(v66, v108);
  if (qword_10099B330 != -1) {
    swift_once(&qword_10099B330, sub_100374304);
  }
  uint64_t v68 = type metadata accessor for Logger(0LL);
  sub_10000A720(v68, (uint64_t)qword_100A2A748);
  uint64_t v69 = v109;
  BOOL v70 = sub_10001DC4C(v65, v109, type metadata accessor for BeaconObservation);
  uint64_t v71 = (os_log_s *)Logger.logObject.getter(v70);
  uint64_t v72 = static os_log_type_t.default.getter(v71);
  if (os_log_type_enabled(v71, v72))
  {
    uint64_t v73 = swift_slowAlloc(22LL, -1LL);
    uint64_t v74 = swift_slowAlloc(32LL, -1LL);
    v120[0] = v74;
    *(_DWORD *)uint64_t v73 = 136446466;
    uint64_t v75 = Date.localISO8601.getter();
    v118 = sub_1003F11D4(v75, v76, v120);
    char v65 = v110;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v73 + 4, v73 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68(v69, type metadata accessor for BeaconObservation);
    *(_WORD *)(v73 + 12) = 2050;
    v118 = *(void *)&v67;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v73 + 14, v73 + 22);
    _os_log_impl( (void *)&_mh_execute_header,  v71,  v72,  "Queued at %{public}s. Time since: %{public}f",  (uint8_t *)v73,  0x16u);
    swift_arrayDestroy(v74, 1LL, (char *)&type metadata for Any + 8);
    v77 = v74;
    uint64_t v41 = (uint64_t)v112;
    swift_slowDealloc(v77, -1LL, -1LL);
    swift_slowDealloc(v73, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(v69, type metadata accessor for BeaconObservation);
  }

  uint64_t v78 = v104;
  uint64_t v79 = v113;
  if (v67 >= 180.0)
  {
    __int128 v98 = v32;
    v83 = v101;
    uint64_t v84 = v99(v104, v32, v101);
    v85 = (os_log_s *)Logger.logObject.getter(v84);
    uint64_t v86 = static os_log_type_t.error.getter(v85);
    if (os_log_type_enabled(v85, v86))
    {
      unint64_t v87 = swift_slowAlloc(22LL, -1LL);
      v88 = swift_slowAlloc(32LL, -1LL);
      v120[0] = v88;
      *(_DWORD *)unint64_t v87 = 134218242;
      v118 = 0x4066800000000000LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v87 + 4, v87 + 12);
      *(_WORD *)(v87 + 12) = 2080;
      v89 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v90 = dispatch thunk of CustomStringConvertible.description.getter(v101, v89);
      v118 = sub_1003F11D4(v90, v91, v120);
      v83 = v101;
      uint64_t v41 = (uint64_t)v112;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v118, &v119, v87 + 14, v87 + 22);
      swift_bridgeObjectRelease();
      v82 = *(void (**)(char *, unint64_t))(v100 + 8);
      v82(v78, v83);
      _os_log_impl( (void *)&_mh_execute_header,  v85,  v86,  "%f elapsed. Posting error alert for %s",  (uint8_t *)v87,  0x16u);
      swift_arrayDestroy(v88, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v88, -1LL, -1LL);
      swift_slowDealloc(v87, -1LL, -1LL);
    }

    else
    {
      v82 = *(void (**)(char *, unint64_t))(v100 + 8);
      v82(v78, v83);
    }

    uint64_t v32 = v98;
    v92 = v105;
    sub_1003857F0(v98, 0);
    sub_1001CC778();
    v94 = v93;
    unsigned int v95 = v92;
    sub_100397BBC(v94, (uint64_t)v95, 0);
    swift_bridgeObjectRelease();

    sub_100018C68(v65, type metadata accessor for BeaconObservation);
    v82((char *)v41, v83);
  }

  else
  {
    uint64_t v80 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v80);
    *(&v96 - 6) = (uint64_t)v105;
    *(&v96 - 5) = v79;
    *((double *)&v96 - 4) = a4;
    unint64_t v81 = v103;
    *(&v96 - 3) = v102;
    *(&v96 - 2) = v81;
    static Transaction.named<A>(_:with:)("SoundPlaybackManager.queuePlaySound", 35LL, 2LL, sub_100399FF0, &v96 - 8);
    sub_100018C68(v65, type metadata accessor for BeaconObservation);
    v82 = *(void (**)(char *, unint64_t))(v100 + 8);
    v83 = v101;
    v82((char *)v41, v101);
  }

  return ((uint64_t (*)(unint64_t, unint64_t))v82)(v32, v83);
}

  v125 = *(void (**)(uint64_t, void, uint64_t, int *))(v122 + 56);
  v125(v121, 1LL, 1LL, v120);
LABEL_43:
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v122 + 48))(v121, 1LL, v120) == 1)
  {
    v264 = (void (*)(void, void, void, void))v125;
    v157 = (void (*)(char *, char *, void))v105;
    v158 = v119;
    v159 = (void (*)(void, void, void))v38;
    v160 = v248;
    sub_100015794(v121, &qword_10099E488);
LABEL_58:
    v178 = v157;
    v157(v265, (char *)v104, v159);
    v179 = v240;
    v178(v240, v266, v159);
    v180 = v241;
    v178(v241, (char *)v104, v159);
    v278 = (uint64_t (**)(void *, void *))DeviceInformationProviderFactory.init();
    v279 = 0LL;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v275 = 1107296256LL;
    v276 = sub_1001C31E8;
    v277 = &unk_1009549C0;
    v181 = _Block_copy(&aBlock);
    *(void *)&v272 = _swiftEmptyArrayStorage;
    v182 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    v183 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    v184 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    v262 = v183;
    v261 = v184;
    v263 = v182;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v272, v183, v184, v160, v182);
    v185 = type metadata accessor for DispatchWorkItem(0LL);
    swift_allocObject(v185, *(unsigned int *)(v185 + 48), *(unsigned __int16 *)(v185 + 52));
    v186 = DispatchWorkItem.init(flags:block:)(v158, v181);
    v187 = (uint64_t)v242;
    static Date.trustedNow.getter((uint64_t)&v242[v120[8]]);
    v188 = (void (*)(uint64_t, char *, void))v268[4];
    v188(v187, v179, v159);
    v188(v187 + v120[5], v180, v159);
    *(_BYTE *)(v187 + v120[6]) = 4;
    *(void *)(v187 + v120[7]) = v186;
    *(void *)(v187 + v120[9]) = 0LL;
    *(_BYTE *)(v187 + v120[10]) = 0;
    v264(v187, 0LL, 1LL, v120);
    swift_beginAccess(v239, &aBlock, 33LL, 0LL);
    sub_1000451A8(v187, (uint64_t)v265);
    swift_endAccess(&aBlock);
    v189 = v160;
    if (qword_10099B300 != -1) {
      swift_once(&qword_10099B300, sub_1003459EC);
    }
    v190 = qword_100A2A6C8;
    v191 = (uint64_t)v246;
    v192 = v270;
    v269(v246, v270, v159);
    v193 = v243;
    static Date.trustedNow.getter(v191 + *(int *)(v243 + 20));
    *(_BYTE *)(v191 + *(int *)(v193 + swift_release(*(void *)(v0 + 24)) = 26;
    v194 = sub_100004AEC(&qword_10099D318);
    v195 = *(unsigned __int8 *)(v244 + 80);
    v196 = (v195 + 32) & ~v195;
    v197 = swift_allocObject(v194, v196 + *(void *)(v244 + 72), v195 | 7);
    v269 = v159;
    v198 = (char *)v197;
    *(_OWORD *)(v197 + 16) = xmmword_1007E67D0;
    sub_10001DC4C(v191, v197 + v196, type metadata accessor for BeaconObservation);
    v199 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v199);
    *(&v225 - 4) = (char *)v190;
    *(&v225 - 3) = v198;
    *(&v225 - 2) = 0LL;
    *(&v225 - 1) = 0LL;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.BeaconObservationStore.save",  57LL,  2LL,  sub_1002DDE58);
    swift_bridgeObjectRelease();
    sub_100018C68(v191, type metadata accessor for BeaconObservation);
    sub_1004E696C(0xAu);
    sub_100004AB0();
    v200 = v252;
    v201 = v251;
    v202 = v253;
    (*(void (**)(char *, void, uint64_t))(v252 + 104))( v251,  enum case for DispatchQoS.QoSClass.default(_:),  v253);
    v203 = (void *)static OS_dispatch_queue.global(qos:)(v201);
    (*(void (**)(char *, uint64_t))(v200 + 8))(v201, v202);
    v204 = swift_allocObject(&unk_1009549F8, 32LL, 7LL);
    v205 = v255;
    *(void *)(v204 + 16) = v254;
    *(void *)(v204 + 24) = v205;
    v278 = (uint64_t (**)(void *, void *))sub_10020FF70;
    v279 = v204;
    aBlock = (uint64_t)_NSConcreteStackBlock;
    v275 = 1107296256LL;
    v276 = sub_1001C31E8;
    v277 = &unk_100954A10;
    v206 = _Block_copy(&aBlock);
    v207 = swift_retain();
    v208 = v256;
    static DispatchQoS.unspecified.getter(v207);
    *(void *)&v272 = _swiftEmptyArrayStorage;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v272, v262, v261, v189, v263);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v208, v158, v206);
    _Block_release(v206);

    (*(void (**)(char *, uint64_t))(v258 + 8))(v158, v189);
    (*(void (**)(char *, uint64_t))(v257 + 8))(v208, v259);
    swift_release();
    v209 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v209);
    *(&v225 - 4) = v267;
    *(&v225 - 3) = v192;
    *(&v225 - 2) = v266;
    *((double *)&v225 - 1) = a6;
    static Transaction.named<A>(_:with:)("SoundPlaybackManager.playSoundSingle", 36LL, 2LL, sub_1003995A4, &v225 - 6);
    return ((uint64_t (*)(char *, void (*)(void, void, void)))v268[1])(v192, v269);
  }

  v161 = v245;
  sub_10002218C(v121, v245, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  v162 = *(unsigned __int8 *)(v161 + v120[6]);
  if (v162 != 4)
  {
    v264 = (void (*)(void, void, void, void))v125;
    v172 = (uint64_t)v235;
    sub_10001DC4C(v161, (uint64_t)v235, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    if (v162 == 1)
    {
      sub_100018C68(v172, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    }

    else
    {
      v174 = *(unsigned __int8 *)(v172 + v120[6]);
      sub_100018C68(v172, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      if (v174 != 2) {
        goto LABEL_55;
      }
    }

    v175 = swift_retain();
    dispatch thunk of DispatchWorkItem.cancel()(v175);
    swift_release();
    v176 = &v267[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_playSoundSubjects];
    swift_beginAccess(&v267[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_playSoundSubjects], &v280, 0LL, 0LL);
    if (*(void *)(*(void *)v176 + 16LL))
    {
      v157 = (void (*)(char *, char *, void))v105;
      v159 = (void (*)(void, void, void))v38;
      swift_bridgeObjectRetain(*(void *)v176);
      sub_10030D124(v104);
      v158 = v119;
      v160 = v248;
      if ((v177 & 1) != 0)
      {
        swift_retain();
        swift_bridgeObjectRelease();
        aBlock = 4LL;
        PassthroughSubject.send(completion:)(&aBlock);
        swift_release();
      }

      else
      {
        swift_bridgeObjectRelease();
      }

      goto LABEL_57;
    }

    sub_1003CB4C8((void **)&v24, (const void **)&v23, &v22);
    return 1LL;
  }

  uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
  __break(1u);
  return result;
}

                  __break(1u);
                }

                size_t v14 = v9 + 5;
              }
            }
          }
        }

      swift_once(&qword_10099B3F8, sub_1003F1160);
      goto LABEL_14;
    }

    uint64_t v62 = v21;
    if (v70 >= (int)v21(v6, v5))
    {
      if (qword_10099B3F8 == -1) {
        goto LABEL_35;
      }
    }

    else
    {
      Swift::Int v31 = v21(v6, v5);
      if (v31 >= v70)
      {
        uint64_t v32 = v31;
        if (v70 != v31)
        {
          if (qword_10099B3F8 != -1) {
            swift_once(&qword_10099B3F8, sub_1003F1160);
          }
          type = *(void (**)(void, uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 88);
          uint64_t v64 = v32;
          while (v70 < v32)
          {
            int64_t v33 = (v70 + 1);
            unsigned int v34 = type metadata accessor for Logger(0LL);
            sub_10000A720(v34, (uint64_t)qword_100A2A910);
            __int128 v35 = swift_unknownObjectRetain(v4);
            __int128 v36 = (os_log_s *)Logger.logObject.getter(v35);
            __int128 v37 = static os_log_type_t.default.getter(v36);
            if (os_log_type_enabled(v36, v37))
            {
              unint64_t v38 = swift_slowAlloc(24LL, -1LL);
              BOOL v63 = swift_slowAlloc(32LL, -1LL);
              uint64_t v73 = v63;
              *(_DWORD *)unint64_t v38 = 136446722;
              uint64_t v75 = v4;
              unint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter(v6, *(void *)(v5 + 8));
              *(void *)(v38 + 4) = sub_1003F11D4(v39, v40, &v73);
              swift_unknownObjectRelease(v4);
              swift_bridgeObjectRelease();
              *(_WORD *)(v38 + 12) = 1024;
              *(_DWORD *)(v38 + 14) = v70;
              *(_WORD *)(v38 + 18) = 1024;
              *(_DWORD *)(v38 + 20) = v70 + 1;
              _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "%{public}s migrating schema %d -> %d",  (uint8_t *)v38,  0x18u);
              swift_arrayDestroy(v63, 1LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v63, -1LL, -1LL);
              uint64_t v41 = v38;
              int64_t v33 = (v70 + 1);
              swift_slowDealloc(v41, -1LL, -1LL);
            }

            else
            {

              swift_unknownObjectRelease(v4);
            }

            type(v70, v33, v15, v6, v5);
            uint64_t v73 = 0LL;
            uint64_t v74 = 0xE000000000000000LL;
            _StringGuts.grow(_:)(24LL);
            swift_bridgeObjectRelease();
            uint64_t v73 = 0xD000000000000016LL;
            uint64_t v74 = 0x8000000100851C50LL;
            LODWORD(v75) = v33;
            v42._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
            String.append(_:)(v42);
            swift_bridgeObjectRelease();
            Swift::Int v21 = (uint64_t (*)(uint64_t, uint64_t))v74;
            Connection.run(_:_:)(v73, v74, _swiftEmptyArrayStorage);
            swift_bridgeObjectRelease();
            swift_release();
            BOOL v70 = v33;
            uint64_t v32 = v64;
            if (v64 == (_DWORD)v33) {
              goto LABEL_28;
            }
          }

          __break(1u);
          goto LABEL_42;
        }

  swift_bridgeObjectRelease();
  if (v51[2])
  {
    uint64_t v64 = (void *)swift_allocObject(&unk_100973468, 56LL, 7LL);
    char v65 = v70;
    v64[2] = a1;
    v64[3] = v65;
    uint64_t v66 = v72;
    uint64_t v67 = v73;
    v64[4] = v71;
    v64[5] = v66;
    v64[6] = v67;
    swift_retain();
    swift_retain();
    sub_1006B4F24((uint64_t)v51, 1, (uint64_t)sub_1006B8FB4, (uint64_t)v64);
    swift_release();
    return swift_release();
  }

  swift_release();
  uint64_t v41 = swift_bridgeObjectRelease();
  return v72(v41);
}

      v204 = (v90 - 1) & v90;
      v202 = (char *)v89;
      unint64_t v87 = __clz(__rbit64(v90)) + (v89 << 6);
    }

    v92 = *(void *)(v194 + 48) + *(void *)(v24 + 72) * v87;
    uint64_t v93 = *(void (**)(char *, unint64_t, uint64_t))(v24 + 16);
    v94 = v24;
    unsigned int v95 = v203;
    v93(v192, v92, v203);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v94 + 56))(v85, 0LL, 1LL, v95);
    unsigned __int8 v96 = *(void (**)(uint64_t, char *, uint64_t))(v94 + 32);
    __int128 v97 = v205;
    v96(v205, v85, v95);
    v201 = (unsigned int (*)(char *, uint64_t, uint64_t))objc_autoreleasePoolPush();
    __int128 v98 = *(void *)(v3 + v191);
    v99 = sub_100004AEC((uint64_t *)&unk_1009AF790);
    OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, v3, v99);
    v100 = v213;
    uint64_t v101 = v213[2];
    v197 = v99;
    v198 = (void (*)(char *, char *, uint64_t))v98;
    if (v101 && (unint64_t v102 = sub_10030D124(v97), (v103 & 1) != 0))
    {
      uint64_t v104 = *(void *)(v100[7] + 8 * v102);
      swift_bridgeObjectRetain(v104);
      swift_bridgeObjectRelease();
      uint64_t v105 = sub_1002FE5F8(v104);
      swift_bridgeObjectRelease();
      sub_1002FFE1C((uint64_t)v105);
      unint64_t v107 = v106;
      swift_release(v105);
      uint64_t v108 = _swiftEmptyArrayStorage;
      v213 = _swiftEmptyArrayStorage;
      v109 = *(void *)(v107 + 16);
      uint64_t v110 = (uint64_t)v209;
      if (v109)
      {
        v111 = 0LL;
        Swift::Int v112 = v212;
        Swift::Int v113 = (uint64_t)v206;
        while (v111 < *(void *)(v107 + 16))
        {
          v114 = (*(unsigned __int8 *)(v67 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80);
          v115 = *(void *)(v67 + 72);
          sub_10001DC4C(v107 + v114 + v115 * v111, v113, type metadata accessor for BeaconObservation);
          if (*(_BYTE *)(v113 + *(int *)(v112 + 24)) == 6)
          {
            sub_10002218C(v113, v208, type metadata accessor for BeaconObservation);
            if ((swift_isUniquelyReferenced_nonNull_native(v108) & 1) == 0) {
              sub_100032AA8(0, v108[2] + 1LL, 1);
            }
            uint64_t v108 = v213;
            v117 = v213[2];
            v116 = v213[3];
            if (v117 >= v116 >> 1)
            {
              sub_100032AA8(v116 > 1, v117 + 1, 1);
              uint64_t v108 = v213;
            }

            v108[2] = v117 + 1;
            sub_10002218C(v208, (uint64_t)v108 + v114 + v117 * v115, type metadata accessor for BeaconObservation);
            Swift::Int v112 = v212;
            Swift::Int v113 = (uint64_t)v206;
          }

          else
          {
            sub_100018C68(v113, type metadata accessor for BeaconObservation);
          }

          ++v111;
          uint64_t v110 = (uint64_t)v209;
          uint64_t v67 = v210;
          if (v109 == v111)
          {
            uint64_t v108 = v213;
            Swift::Int v3 = v181;
            goto LABEL_59;
          }
        }

        goto LABEL_111;
      }

    sub_1003CB4C8((void **)&v59, (const void **)&v58, &v57);
    return 1LL;
  }

      v1 |= 0x200uLL;
      goto LABEL_43;
    }

    goto LABEL_40;
  }

        dispatch thunk of BinaryInteger._lowWord.getter(v11, v12);
        v36(v17, v11);
        v29.super.super.Class isa = Int64._bridgeToObjectiveC()().super.super.isa;
        goto LABEL_63;
      case 3:
        sub_100012EC0(&v120, (uint64_t)v117);
        __int128 v22 = v118;
        unint64_t v23 = v119;
        unsigned int v24 = sub_100012ED8(v117, v118);
        __chkstk_darwin(v24);
        __int128 v26 = (char *)v107 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
        (*(void (**)(char *))(v27 + 16))(v26);
        char v28 = sub_1000156C8();
        BinaryFloatingPoint.init<A>(_:)(v26, &type metadata for Double, v22, v28, v23);
        v29.super.super.Class isa = Double._bridgeToObjectiveC()().super.super.isa;
        goto LABEL_63;
      default:
        goto LABEL_8;
    }
  }

  v122 = 0LL;
  v120 = 0u;
  v121 = 0u;
  v123 = -1;
LABEL_8:
  sub_100015794((uint64_t)&v120, &qword_1009BE048);
  return 0LL;
}

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  __break(1u);
  return result;
}

      __break(1u);
      goto LABEL_43;
    }

    if (a4 == v13) {
      break;
    }
LABEL_2:
    if (__CFADD__(v13++, 1LL))
    {
      __break(1u);
      goto LABEL_42;
    }
  }

  if ((v12 & 1) != 0)
  {
    unsigned int v15 = 0;
    goto LABEL_13;
  }

  return _swiftEmptyArrayStorage;
}

void *sub_1000D6D88(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  dispatch thunk of BinaryDecoding.container()(v28, v3, v4);
  uint64_t v5 = v29;
  uint64_t v6 = v30;
  sub_100037298((uint64_t)v28, v29);
  unint64_t v7 = sub_100041584();
  dispatch thunk of BinaryDecodingContaining.decode<A>(_:)( &v31,  &type metadata for UInt8,  &type metadata for UInt8,  v7,  v5,  v6);
  if (v1)
  {
LABEL_12:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
    return (void *)_s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  int v8 = v31;
  if (v31 >= 4u)
  {
    if (qword_10099B7B0 != -1) {
      swift_once(&qword_10099B7B0, sub_100651924);
    }
    uint64_t v19 = type metadata accessor for Logger(0LL);
    uint64_t v20 = sub_10000A720(v19, (uint64_t)qword_100A2B0E0);
    Swift::Int v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      unint64_t v23 = (uint8_t *)swift_slowAlloc(5LL, -1LL);
      *(_DWORD *)unint64_t v23 = 16777472;
      LOBYTE(v31) = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v31, (char *)&v31 + 1, v23 + 4, v23 + 5);
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Invalid findMyNetworkIdStatus: %hhu", v23, 5u);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    uint64_t v24 = type metadata accessor for BinaryEncodingError(0LL);
    uint64_t v25 = sub_100007864( (unint64_t *)&qword_1009A0D38,  (uint64_t (*)(uint64_t))&type metadata accessor for BinaryEncodingError,  (uint64_t)&protocol conformance descriptor for BinaryEncodingError);
    swift_allocError(v24, v25, 0LL, 0LL);
    uint64_t v27 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v24 - 8) + 104LL))( v26,  enum case for BinaryEncodingError.encodingError(_:),  v24);
    swift_willThrow(v27);
    goto LABEL_12;
  }

  uint64_t v9 = v29;
  uint64_t v10 = v30;
  sub_100037298((uint64_t)v28, v29);
  dispatch thunk of BinaryDecodingContaining.decode<A>(_:)( &v31,  &type metadata for UInt8,  &type metadata for UInt8,  v7,  v9,  v10);
  unsigned int v11 = v31;
  if (qword_10099B0E8 != -1) {
    swift_once(&qword_10099B0E8, sub_1000D523C);
  }
  uint64_t v12 = qword_1009A0D10;
  uint64_t v13 = v29;
  uint64_t v14 = v30;
  sub_100037298((uint64_t)v28, v29);
  uint64_t v15 = dispatch thunk of BinaryDecodingContaining.decode(length:)(v12, v13, v14);
  uint64_t v17 = v16;
  sub_1000D7094();
  uint64_t result = BinaryDecodable.init(data:)(&v31, v15, v17);
  if (v11 > 4)
  {
    __break(1u);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    return (void *)(v8 | (v11 << 8));
  }

  return result;
}

unint64_t sub_1000D7094()
{
  unint64_t result = qword_1009A0D40;
  if (!qword_1009A0D40)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007EB398,  &type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdPairingStatus);
    atomic_store(result, (unint64_t *)&qword_1009A0D40);
  }

  return result;
}

unint64_t sub_1000D70D8()
{
  unint64_t result = qword_1009A0D48;
  if (!qword_1009A0D48)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007EB80C,  &type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdStatus);
    atomic_store(result, (unint64_t *)&qword_1009A0D48);
  }

  return result;
}

unint64_t sub_1000D711C()
{
  unint64_t result = qword_1009A0D50;
  if (!qword_1009A0D50)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007EB370,  &type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdPairingStatus);
    atomic_store(result, (unint64_t *)&qword_1009A0D50);
  }

  return result;
}

uint64_t sub_1000D7160(void *a1)
{
  uint64_t v3 = type metadata accessor for Data.Iterator(0LL);
  uint64_t v21 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v4 = type metadata accessor for BinaryDecoder(0LL);
  uint64_t v18 = *(void *)(v4 - 8);
  uint64_t v19 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v20 = a1;
  sub_100012ED8(a1, v7);
  uint64_t v9 = dispatch thunk of BinaryDecoding.container()(v28, v7, v8);
  os_log_type_t v22 = v6;
  BinaryDecoder.init()(v9);
  uint64_t v25 = _swiftEmptyArrayStorage;
  uint64_t v10 = v29;
  uint64_t v11 = v30;
  sub_100037298((uint64_t)v28, v29);
  uint64_t v12 = dispatch thunk of BinaryDecodingContaining.decode(length:)(21LL, v10, v11);
  if (!v1)
  {
    uint64_t v14 = v12;
    uint64_t v15 = v13;
    unint64_t v16 = sub_1000D74F0();
    BinaryDecoder.decode<A>(_:from:)( v26,  &type metadata for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus,  v14,  v15,  &type metadata for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus,  v16);
    int v24 = 0;
    uint64_t v31 = 1LL;
    uint64_t v23 = v27;
    __asm { BR              X9 }
  }

  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v22, v19);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v20);
}

unint64_t sub_1000D74F0()
{
  unint64_t result = qword_1009A0D58;
  if (!qword_1009A0D58)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007EB7E4,  &type metadata for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus);
    atomic_store(result, (unint64_t *)&qword_1009A0D58);
  }

  return result;
}

unint64_t sub_1000D7534()
{
  unint64_t result = qword_1009A0D68;
  if (!qword_1009A0D68)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007EB7BC,  &type metadata for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus);
    atomic_store(result, (unint64_t *)&qword_1009A0D68);
  }

  return result;
}

unint64_t sub_1000D7578()
{
  unint64_t result = qword_1009A0D70;
  if (!qword_1009A0D70)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EB794, &type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartStatus);
    atomic_store(result, (unint64_t *)&qword_1009A0D70);
  }

  return result;
}

unint64_t sub_1000D75BC()
{
  unint64_t result = qword_1009A0D78;
  if (!qword_1009A0D78)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007EB76C,  &type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartPairingStatus);
    atomic_store(result, (unint64_t *)&qword_1009A0D78);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for VerifyFindMyNetworkIdResponseV2Payload.PartPairingStatus( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1000D764C + 4 * byte_1007EB27D[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1000D7680 + 4 * byte_1007EB278[v4]))();
}

uint64_t sub_1000D7680(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D7688(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000D7690LL);
  }
  return result;
}

uint64_t sub_1000D769C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000D76A4LL);
  }
  *(_BYTE *)unint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1000D76A8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D76B0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VerifyFindMyNetworkIdResponseV2Payload.PartPairingStatus()
{
  return &type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartPairingStatus;
}

uint64_t destroy for AccessoryProductData(uint64_t a1)
{
  return sub_100016F9C(*(void *)a1, *(void *)(a1 + 8));
}

uint64_t _s12searchpartyd38VerifyFindMyNetworkIdResponseV2PayloadV17DecodedPartStatusVwCP_0( uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_10001736C(*(void *)a2, v5);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithCopy for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a2;
  unint64_t v5 = *(void *)(a2 + 8);
  sub_10001736C(*(void *)a2, v5);
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(void *)a1 = v4;
  *(void *)(a1 + 8) = v5;
  sub_100016F9C(v6, v7);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t assignWithTake for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)a1;
  unint64_t v5 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016F9C(v4, v5);
  *(_BYTE *)(a1 + 16) = *(_BYTE *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus( uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 17)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 16);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 16) = 0;
    *(void *)unint64_t result = a2 - 254;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 17) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 16) = a2 + 2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus()
{
  return &type metadata for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus;
}

uint64_t storeEnumTagSinglePayload for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdStatus( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000D7898 + 4 * byte_1007EB287[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000D78CC + 4 * byte_1007EB282[v4]))();
}

uint64_t sub_1000D78CC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D78D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000D78DCLL);
  }
  return result;
}

uint64_t sub_1000D78E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000D78F0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000D78F4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000D78FC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdStatus()
{
  return &type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdStatus;
}

uint64_t destroy for VerifyFindMyNetworkIdResponseV2Payload.PartStatus(uint64_t a1)
{
  return sub_100016F9C(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t initializeWithCopy for VerifyFindMyNetworkIdResponseV2Payload.PartStatus(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_10001736C(v4, v5);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t assignWithCopy for VerifyFindMyNetworkIdResponseV2Payload.PartStatus(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  unint64_t v5 = *(void *)(a2 + 16);
  sub_10001736C(v4, v5);
  uint64_t v6 = *(void *)(a1 + 8);
  unint64_t v7 = *(void *)(a1 + 16);
  *(void *)(a1 + 8) = v4;
  *(void *)(a1 + 16) = v5;
  sub_100016F9C(v6, v7);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

__n128 initializeWithTake for VerifyFindMyNetworkIdResponseV2Payload.PartStatus(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  *(_OWORD *)(a1 + 9) = *(_OWORD *)(a2 + 9);
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for VerifyFindMyNetworkIdResponseV2Payload.PartStatus(uint64_t a1, uint64_t a2)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a1 + 8);
  unint64_t v5 = *(void *)(a1 + 16);
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  sub_100016F9C(v4, v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  return a1;
}

uint64_t getEnumTagSinglePayload for VerifyFindMyNetworkIdResponseV2Payload.PartStatus( uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 25)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 24);
  BOOL v4 = v3 >= 3;
  int v5 = v3 - 3;
  if (!v4) {
    int v5 = -1;
  }
  return (v5 + 1);
}

uint64_t storeEnumTagSinglePayload for VerifyFindMyNetworkIdResponseV2Payload.PartStatus( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + 16) = 0LL;
    *(_BYTE *)(result + 24) = 0;
    *(void *)__n128 result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 25) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 25) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 24) = a2 + 2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for VerifyFindMyNetworkIdResponseV2Payload.PartStatus()
{
  return &type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartStatus;
}

unint64_t sub_1000D7AC8()
{
  unint64_t result = qword_1009A0D80;
  if (!qword_1009A0D80)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EB494, &type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartStatus);
    atomic_store(result, (unint64_t *)&qword_1009A0D80);
  }

  return result;
}

unint64_t sub_1000D7B10()
{
  unint64_t result = qword_1009A0D88;
  if (!qword_1009A0D88)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007EB5C4,  &type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdStatus);
    atomic_store(result, (unint64_t *)&qword_1009A0D88);
  }

  return result;
}

unint64_t sub_1000D7B58()
{
  unint64_t result = qword_1009A0D90;
  if (!qword_1009A0D90)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007EB5EC,  &type metadata for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus);
    atomic_store(result, (unint64_t *)&qword_1009A0D90);
  }

  return result;
}

unint64_t sub_1000D7BA0()
{
  unint64_t result = qword_1009A0D98;
  if (!qword_1009A0D98)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007EB744,  &type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartPairingStatus);
    atomic_store(result, (unint64_t *)&qword_1009A0D98);
  }

  return result;
}

unint64_t sub_1000D7BE4()
{
  unint64_t result = qword_1009A0DA0;
  if (!qword_1009A0DA0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007EB58C,  &type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdStatus);
    atomic_store(result, (unint64_t *)&qword_1009A0DA0);
  }

  return result;
}

uint64_t sub_1000D7C28(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  dispatch thunk of BinaryDecoding.container()((void *)((char *)v24 + 1), v3, v4);
  uint64_t v5 = v25;
  uint64_t v6 = v26;
  sub_100037298((uint64_t)v24 + 1, v25);
  uint64_t v7 = dispatch thunk of BinaryDecodingContaining.decode(length:)(20LL, v5, v6);
  if (!v1)
  {
    uint64_t v5 = v7;
    unint64_t v9 = v8;
    uint64_t v10 = v25;
    uint64_t v11 = v26;
    sub_100037298((uint64_t)v24 + 1, v25);
    unint64_t v12 = sub_100041584();
    dispatch thunk of BinaryDecodingContaining.decode<A>(_:)( v24,  &type metadata for UInt8,  &type metadata for UInt8,  v12,  v10,  v11);
    char v13 = v24[0];
    if (LOBYTE(v24[0]) < 3u) {
      __asm { BR              X10 }
    }

    if (qword_10099B7B0 != -1) {
      swift_once(&qword_10099B7B0, sub_100651924);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = sub_10000A720(v14, (uint64_t)qword_100A2B0E0);
    unint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.error.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(5LL, -1LL);
      *(_DWORD *)uint64_t v18 = 16777472;
      LOBYTE(v24[0]) = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v24, (char *)v24 + 1, v18 + 4, v18 + 5);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Invalid PartPairingStatus: %hhu", v18, 5u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    uint64_t v19 = type metadata accessor for BinaryEncodingError(0LL);
    uint64_t v20 = sub_100007864( (unint64_t *)&qword_1009A0D38,  (uint64_t (*)(uint64_t))&type metadata accessor for BinaryEncodingError,  (uint64_t)&protocol conformance descriptor for BinaryEncodingError);
    swift_allocError(v19, v20, 0LL, 0LL);
    uint64_t v22 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v19 - 8) + 104LL))( v21,  enum case for BinaryEncodingError.encodingError(_:),  v19);
    swift_willThrow(v22);
    sub_100016F9C(v5, v9);
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)((char *)v24 + 1));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v5;
}

unint64_t sub_1000D7EF0()
{
  unint64_t result = qword_1009A0DA8;
  if (!qword_1009A0DA8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007EB6BC,  &type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartPairingStatus);
    atomic_store(result, (unint64_t *)&qword_1009A0DA8);
  }

  return result;
}

unint64_t sub_1000D7F34()
{
  unint64_t result = qword_1009A0DB0;
  if (!qword_1009A0DB0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007EB70C,  &type metadata for VerifyFindMyNetworkIdResponseV2Payload.PartPairingStatus);
    atomic_store(result, (unint64_t *)&qword_1009A0DB0);
  }

  return result;
}

unint64_t sub_1000D7F78()
{
  unint64_t result = qword_1009A0DB8;
  if (!qword_1009A0DB8)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007EB614,  &type metadata for VerifyFindMyNetworkIdResponseV2Payload.DecodedPartStatus);
    atomic_store(result, (unint64_t *)&qword_1009A0DB8);
  }

  return result;
}

unint64_t sub_1000D7FBC()
{
  unint64_t result = qword_1009A0DC0;
  if (!qword_1009A0DC0)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007EB4FC,  &type metadata for VerifyFindMyNetworkIdResponseV2Payload.FindMyNetworkIdStatus);
    atomic_store(result, &qword_1009A0DC0);
  }

  return result;
}

uint64_t sub_1000D8000(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6E0 != -1) {
    swift_once(&qword_10099B6E0, sub_100650FD0);
  }
  uint64_t v6 = qword_100A2AFE0;
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v8 = swift_allocObject(v7, 112LL, 7LL);
  *(_OWORD *)(v8 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(v2);
  uint64_t v9 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v10 = String.init<A>(describing:)(&ObjectType, v9);
  uint64_t v12 = v11;
  *(void *)(v8 + 56) = &type metadata for String;
  unint64_t v13 = sub_1000226F4();
  *(void *)(v8 + 32) = v10;
  *(void *)(v8 + 40) = v12;
  *(void *)(v8 + 96) = &type metadata for String;
  *(void *)(v8 + 104) = v13;
  *(void *)(v8 + 64) = v13;
  *(void *)(v8 + 72) = 0xD00000000000002BLL;
  *(void *)(v8 + 80) = 0x8000000100853E70LL;
  os_log(_:dso:log:_:_:)(v5, &_mh_execute_header, v6, "%@: %@", 6LL, 2LL, v8);
  swift_bridgeObjectRelease();
  sub_100012ED8( &v2[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation],  *(void *)&v2[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
  uint64_t v14 = (void *)swift_allocObject(&unk_10093D6F0, 40LL, 7LL);
  v14[2] = v2;
  v14[3] = a1;
  v14[4] = a2;
  uint64_t v15 = v2;
  swift_retain();
  sub_1000D88E4((uint64_t)sub_1000DF7D8, (uint64_t)v14);
  return swift_release(v14);
}

uint64_t sub_1000D81A4(char a1, char *a2, uint64_t (*a3)(void *))
{
  if ((a1 & 1) == 0) {
    return a3(_swiftEmptyArrayStorage);
  }
  sub_100012ED8( &a2[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation],  *(void *)&a2[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
  uint64_t v5 = sub_1000D8EF4();
  uint64_t v6 = a2;
  uint64_t v7 = (uint64_t)sub_1000DE310((uint64_t)v5, (uint64_t)v6);
  swift_bridgeObjectRelease();

  uint64_t v9 = static os_log_type_t.default.getter(v8);
  if (qword_10099B790 != -1) {
    swift_once(&qword_10099B790, sub_100651808);
  }
  uint64_t v10 = qword_100A2B0A0;
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
  *(_OWORD *)(v12 + 16) = xmmword_1007E67D0;
  if ((unint64_t)v7 >> 62)
  {
    if (v7 < 0) {
      uint64_t v15 = v7;
    }
    else {
      uint64_t v15 = v7 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v7);
    uint64_t v13 = _CocoaArrayWrapper.endIndex.getter(v15);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v13 = *(void *)((v7 & 0xFFFFFFFFFFFFF8LL) + 0x10);
  }

  *(void *)(v12 + 56) = &type metadata for Int;
  *(void *)(v12 + 64) = &protocol witness table for Int;
  *(void *)(v12 + 32) = v13;
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Returning %i records", v16);
  swift_bridgeObjectRelease();
  a3((void *)v7);
  return swift_bridgeObjectRelease();
}

void sub_1000D83B4(uint64_t a1, uint64_t a2)
{
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  (*(void (**)(uint64_t, Class))(a2 + 16))(a2, isa);
}

uint64_t sub_1000D8674(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = static os_log_type_t.default.getter(a1);
  if (qword_10099B790 != -1) {
    swift_once(&qword_10099B790, sub_100651808);
  }
  uint64_t v8 = qword_100A2B0A0;
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v10 = swift_allocObject(v9, 112LL, 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(v3);
  uint64_t v11 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v12 = String.init<A>(describing:)(&ObjectType, v11);
  uint64_t v14 = v13;
  *(void *)(v10 + 56) = &type metadata for String;
  unint64_t v15 = sub_1000226F4();
  *(void *)(v10 + 32) = v12;
  *(void *)(v10 + 40) = v14;
  *(void *)(v10 + 96) = &type metadata for String;
  *(void *)(v10 + 104) = v15;
  *(void *)(v10 + 64) = v15;
  *(void *)(v10 + 72) = 0xD00000000000002BLL;
  *(void *)(v10 + 80) = 0x8000000100853930LL;
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "%@: %@", 6LL, 2LL, v10);
  swift_bridgeObjectRelease();
  sub_100012ED8( (void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  return sub_1000DD54C(a1, a2, a3);
}

uint64_t sub_1000D88C0()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1000D88E4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B300 != -1) {
    swift_once(&qword_10099B300, sub_1003459EC);
  }
  uint64_t v9 = qword_100A2A6C8;
  uint64_t v10 = sub_100004AEC(&qword_1009A0E38);
  OS_dispatch_queue.sync<A>(execute:)(sub_1000DF7E4, v9, v10);
  sub_1002FFE1C(v17[1]);
  uint64_t v12 = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v8, 1LL, 1LL, v13);
  uint64_t v14 = (void *)swift_allocObject(&unk_10093D718, 64LL, 7LL);
  v14[2] = 0LL;
  v14[3] = 0LL;
  v14[4] = v12;
  v14[5] = v3;
  v14[6] = a1;
  v14[7] = a2;
  swift_retain();
  swift_retain();
  uint64_t v15 = sub_1003EDB00((uint64_t)v8, (uint64_t)&unk_1009A0E48, (uint64_t)v14);
  return swift_release(v15);
}

uint64_t sub_1000D8A44(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[4] = a6;
  v7[5] = a7;
  v7[2] = a4;
  v7[3] = a5;
  uint64_t v8 = *(void *)(type metadata accessor for BeaconObservation(0LL) - 8);
  v7[6] = v8;
  v7[7] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  v7[8] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  void v7[9] = v10;
  v7[10] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000D8ACC, 0LL, 0LL);
}

uint64_t sub_1000D8ACC()
{
  uint64_t v1 = v0[2];
  int64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = _swiftEmptyArrayStorage;
  if (v2)
  {
    uint64_t v4 = v0[9];
    uint64_t v5 = v0[6];
    os_log_type_t v17 = _swiftEmptyArrayStorage;
    sub_1000328D0(0, v2, 0);
    uint64_t v6 = v1 + ((*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
    uint64_t v7 = *(void *)(v5 + 72);
    uint64_t v3 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v8 = v0[10];
      uint64_t v10 = v0[7];
      uint64_t v9 = v0[8];
      sub_10001DC4C(v6, v10, type metadata accessor for BeaconObservation);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v8, v10, v9);
      sub_100018C68(v10, type metadata accessor for BeaconObservation);
      if ((swift_isUniquelyReferenced_nonNull_native(v3) & 1) == 0)
      {
        sub_1000328D0(0, v3[2] + 1LL, 1);
        uint64_t v3 = v17;
      }

      unint64_t v12 = v3[2];
      unint64_t v11 = v3[3];
      if (v12 >= v11 >> 1)
      {
        sub_1000328D0(v11 > 1, v12 + 1, 1);
        uint64_t v3 = v17;
      }

      uint64_t v13 = v0[10];
      uint64_t v14 = v0[8];
      v3[2] = v12 + 1;
      (*(void (**)(unint64_t, uint64_t, uint64_t))(v4 + 32))( (unint64_t)v3 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
      + *(void *)(v4 + 72) * v12,
        v13,
        v14);
      os_log_type_t v17 = v3;
      v6 += v7;
      --v2;
    }

    while (v2);
  }

  uint64_t v15 = v0[3];
  v0[11] = sub_1006F1060((uint64_t)v3);
  swift_bridgeObjectRelease();
  return swift_task_switch( sub_1000D8C68,  *(void *)(v15 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_firmwareUpdateService),  0LL);
}

uint64_t sub_1000D8C68()
{
  uint64_t v1 = sub_1006F1060((uint64_t)_swiftEmptyArrayStorage);
  *(void *)(v0 + 96) = v1;
  uint64_t v2 = static os_log_type_t.default.getter(v1);
  uint64_t v3 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v4 = (void *)static OS_os_log.default.getter(v3);
  os_log(_:dso:log:_:_:)( v2,  &_mh_execute_header,  v4,  "enabledFirmwareUpdateIdentifiers: neither Me nor only iOS device. Firmware update is not allowed.",  97LL,  2LL,  _swiftEmptyArrayStorage);

  swift_bridgeObjectRelease();
  return swift_task_switch(sub_1000D8D1C, 0LL, 0LL);
}

uint64_t sub_1000D8D1C()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 96) + 16LL);
  uint64_t v2 = swift_bridgeObjectRelease();
  if (v1)
  {
    uint64_t v4 = *(void *)(v0 + 32);
    uint64_t v3 = *(void *)(v0 + 40);
    uint64_t v5 = swift_allocObject(&unk_10093D740, 32LL, 7LL);
    *(void *)(v0 + 104) = v5;
    *(void *)(v5 + 16) = v4;
    *(void *)(v5 + 24) = v3;
    uint64_t v6 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    uint64_t v7 = (void *)swift_task_alloc(v6);
    *(void *)(v0 + 112) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1000D8E5C;
    return unsafeBlocking<A>(_:)(v7, sub_1000DF8E8, v5, (char *)&type metadata for () + 8);
  }

  else
  {
    uint64_t v9 = static os_log_type_t.error.getter(v2);
    if (qword_10099B790 != -1) {
      swift_once(&qword_10099B790, sub_100651808);
    }
    uint64_t v10 = *(void (**)(void))(v0 + 32);
    os_log(_:dso:log:_:_:)( v9,  &_mh_execute_header,  qword_100A2B0A0,  "Not providing pending updates (candidate beacons). Enabled identifiers not found.",  81LL,  2LL,  _swiftEmptyArrayStorage);
    v10(0LL);
    uint64_t v11 = *(void *)(v0 + 56);
    swift_task_dealloc(*(void *)(v0 + 80));
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000D8E5C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 104LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 112LL));
  swift_release(v1);
  return swift_task_switch(sub_1000D8EB8, 0LL, 0LL);
}

uint64_t sub_1000D8EB8()
{
  uint64_t v1 = *(void *)(v0 + 56);
  swift_task_dealloc(*(void *)(v0 + 80));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void *sub_1000D8EF4()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100094564();
  uint64_t v3 = *(void *)(v1 + 256);
  swift_retain();
  uint64_t v4 = sub_1002C428C(v2);
  swift_bridgeObjectRelease();
  uint64_t v5 = swift_release(v3);
  uint64_t v6 = static os_log_type_t.default.getter(v5);
  if (qword_10099B790 != -1) {
    swift_once(&qword_10099B790, sub_100651808);
  }
  uint64_t v7 = qword_100A2B0A0;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v9 = swift_allocObject(v8, 72LL, 7LL);
  *(_OWORD *)(v9 + 16) = xmmword_1007E67D0;
  uint64_t v14 = v4[2];
  uint64_t v10 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t v12 = v11;
  *(void *)(v9 + 56) = &type metadata for String;
  *(void *)(v9 + 64) = sub_1000226F4();
  *(void *)(v9 + 32) = v10;
  *(void *)(v9 + 40) = v12;
  os_log(_:dso:log:_:_:)( v6,  &_mh_execute_header,  v7,  "Beacon store has %@ records for identifiers that are pending.",  61LL,  2LL,  v9,  v14);
  swift_bridgeObjectRelease();
  return v4;
}

uint64_t sub_1000D9044(uint64_t a1, int a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v8 = v7;
  uint64_t v44 = a6;
  uint64_t v45 = a7;
  uint64_t v41 = a4;
  uint64_t v42 = a5;
  uint64_t v40 = a3;
  int v39 = a2;
  uint64_t v48 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v51 = *(void *)(v48 - 8);
  __chkstk_darwin(v48);
  uint64_t v47 = &v38[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v49 = *(void *)(v11 - 8);
  uint64_t v50 = v11;
  __chkstk_darwin(v11);
  uint64_t v43 = &v38[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  int v16 = &v38[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v46 = *(void *)(v8 + 48);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(v14 + 16))(v16, a1, v13);
  uint64_t v17 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v18 = (v17 + 24) & ~v17;
  uint64_t v19 = v18 + v15;
  unint64_t v20 = (v18 + v15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v21 = (v20 + 31) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v23 = swift_allocObject(&unk_10093D3D0, v22 + 16, v17 | 7);
  unint64_t v24 = v20 + v23;
  *(void *)(v23 + 16) = v8;
  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v14 + 32))(v23 + v18, v16, v13);
  *(_BYTE *)(v23 + v19) = v39;
  uint64_t v25 = v41;
  *(void *)(v24 + 8) = v40;
  *(void *)(v24 + 16) = v25;
  uint64_t v26 = v42;
  *(void *)(v23 + v21) = v42;
  unsigned __int8 v27 = (void *)(v23 + v22);
  uint64_t v28 = v45;
  *unsigned __int8 v27 = v44;
  v27[1] = v28;
  aBlock[4] = sub_1000DEBCC;
  uint64_t v54 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  void aBlock[3] = &unk_10093D3E8;
  uint64_t v29 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain(v25);
  swift_errorRetain(v26);
  uint64_t v30 = swift_retain();
  uint64_t v31 = v43;
  static DispatchQoS.unspecified.getter(v30);
  uint64_t v52 = _swiftEmptyArrayStorage;
  uint64_t v32 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v33 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  unint64_t v34 = sub_100012FF8();
  __int128 v36 = v47;
  uint64_t v35 = v48;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v33, v34, v48, v32);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v31, v36, v29);
  _Block_release(v29);
  (*(void (**)(_BYTE *, uint64_t))(v51 + 8))(v36, v35);
  (*(void (**)(_BYTE *, uint64_t))(v49 + 8))(v31, v50);
  return swift_release(v54);
}

uint64_t sub_1000D9308( uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  uint64_t v33 = a7;
  uint64_t v34 = a8;
  uint64_t v31 = a5;
  uint64_t v32 = a6;
  uint64_t v11 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v37 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v31 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v35 = *(void *)(v14 - 8);
  uint64_t v36 = v14;
  __chkstk_darwin(v14);
  int v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  unint64_t v20 = (char *)&v31 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  char v21 = sub_1000D95A0(a2, a3, a4, v31, v32);
  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v18 + 104))( v20,  enum case for DispatchQoS.QoSClass.default(_:),  v17);
  unint64_t v22 = (void *)static OS_dispatch_queue.global(qos:)(v20);
  (*(void (**)(char *, uint64_t))(v18 + 8))(v20, v17);
  uint64_t v23 = swift_allocObject(&unk_10093D420, 33LL, 7LL);
  uint64_t v24 = v34;
  *(void *)(v23 + 16) = v33;
  *(void *)(v23 + 24) = v24;
  *(_BYTE *)(v23 + 32) = v21 & 1;
  aBlock[4] = sub_1000DEC6C;
  uint64_t v40 = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  void aBlock[3] = &unk_10093D438;
  uint64_t v25 = _Block_copy(aBlock);
  uint64_t v26 = swift_retain();
  static DispatchQoS.unspecified.getter(v26);
  unint64_t v38 = _swiftEmptyArrayStorage;
  uint64_t v27 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v28 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  unint64_t v29 = sub_100012FF8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v38, v28, v29, v11, v27);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v16, v13, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v37 + 8))(v13, v11);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v16, v36);
  return swift_release(v40);
}

uint64_t sub_1000D95A0(uint64_t a1, char a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v133 = a5;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v132 = v12;
  uint64_t v13 = (char *)&v123 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v130 = *(void *)(v14 - 8);
  uint64_t v131 = v14;
  __chkstk_darwin(v14);
  int v16 = (char *)&v123 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100504C28(a1, (uint64_t)&v134);
  if (v135)
  {
    v123 = v16;
    uint64_t v127 = v11;
    v128 = v13;
    uint64_t v129 = v10;
    uint64_t v124 = a4;
    uint64_t v125 = a3;
    uint64_t v126 = v5;
    uint64_t v17 = sub_100012EC0(&v134, (uint64_t)v140);
    uint64_t v18 = static os_log_type_t.default.getter(v17);
    if (qword_10099B790 != -1) {
      swift_once(&qword_10099B790, sub_100651808);
    }
    uint64_t v19 = qword_100A2B0A0;
    uint64_t v20 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v21 = swift_allocObject(v20, 112LL, 7LL);
    *(_OWORD *)(v21 + 16) = xmmword_1007E4750;
    uint64_t v22 = UUID.uuidString.getter(v21);
    uint64_t v24 = v23;
    *(void *)(v21 + 56) = &type metadata for String;
    unint64_t v25 = sub_1000226F4();
    *(void *)(v21 + 64) = v25;
    *(void *)(v21 + 32) = v22;
    *(void *)(v21 + 40) = v24;
    sub_10042C96C(a2);
    *(void *)(v21 + 96) = &type metadata for String;
    *(void *)(v21 + 104) = v25;
    *(void *)(v21 + 72) = v26;
    *(void *)(v21 + 80) = v27;
    os_log(_:dso:log:_:_:)( v18,  &_mh_execute_header,  v19,  "Updating beacon (UUID: %@) with observation: %@",  47LL,  2LL,  v21);
    swift_bridgeObjectRelease();
    if (qword_10099B300 != -1) {
      swift_once(&qword_10099B300, sub_1003459EC);
    }
    uint64_t v28 = qword_100A2A6C8;
    uint64_t v29 = sub_1000DEC94(qword_100A2A6C8, a1, a2, v133);
    switch(a2)
    {
      case 6:
        type metadata accessor for Transaction(0LL);
        uint64_t v31 = v127;
        uint64_t v30 = v128;
        uint64_t v32 = v129;
        (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v128, a1, v129);
        uint64_t v33 = *(unsigned __int8 *)(v31 + 80);
        uint64_t v34 = (v33 + 24) & ~v33;
        uint64_t v35 = swift_allocObject(&unk_10093D4C0, v34 + v132, v33 | 7);
        *(void *)(v35 + 16) = v126;
        (*(void (**)(uint64_t, char *, uint64_t))(v31 + 32))(v35 + v34, v30, v32);
        swift_retain();
        static Transaction.asyncTask(name:block:)("analyticsFirmwareUpdateInProgress", 33LL, 2LL, &unk_1009A0E10, v35);
        uint64_t v36 = v35;
        goto LABEL_29;
      case 7:
        sub_100013044((uint64_t)v140, (uint64_t)&v134);
        if (qword_10099B500 != -1) {
          swift_once(&qword_10099B500, sub_1004C0FDC);
        }
        uint64_t v139 = qword_100A2AC70;
        uint64_t v137 = 0LL;
        uint64_t v138 = 0LL;
        uint64_t v46 = (void *)objc_opt_self(&OBJC_CLASS___FMSystemInfo);
        swift_retain();
        id v47 = [v46 sharedInstance];
        unsigned int v48 = [v47 isInternalBuild];

        uint64_t v49 = v124;
        uint64_t v50 = v123;
        if (v48) {
          sub_1004C1C3C(a1);
        }
        uint64_t v51 = sub_1000DF0A0(&v134);
        uint64_t v52 = static DispatchWorkItemFlags.barrier.getter(v51);
        __chkstk_darwin(v52);
        *(&v123 - 4) = (char *)v28;
        *(&v123 - 3) = (char *)a1;
        *(&v123 - 2) = (char *)sub_1000DA0F0;
        *(&v123 - 1) = 0LL;
        OS_dispatch_queue.sync<A>(flags:execute:)(v50, sub_1000DF920);
        (*(void (**)(char *, uint64_t))(v130 + 8))(v50, v131);
        sub_100013044((uint64_t)v140, (uint64_t)&v134);
        uint64_t v53 = v126;
        if (v49)
        {
          uint64_t v133 = v125;
          uint64_t v54 = v49;
        }

        else
        {
          uint64_t v95 = v135;
          uint64_t v96 = v136;
          sub_100012ED8(&v134, v135);
          uint64_t v133 = (*(uint64_t (**)(uint64_t, uint64_t))(v96 + 24))(v95, v96);
          uint64_t v54 = v97;
        }

        swift_bridgeObjectRetain(v49);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v134);
        type metadata accessor for Transaction(0LL);
        uint64_t v98 = v127;
        v99 = v128;
        uint64_t v100 = a1;
        uint64_t v101 = v129;
        (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v128, v100, v129);
        uint64_t v102 = *(unsigned __int8 *)(v98 + 80);
        uint64_t v103 = (v102 + 24) & ~v102;
        unint64_t v104 = (v132 + v103 + 7) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v105 = swift_allocObject(&unk_10093D4E8, v104 + 16, v102 | 7);
        *(void *)(v105 + 16) = v53;
        (*(void (**)(uint64_t, char *, uint64_t))(v98 + 32))(v105 + v103, v99, v101);
        v106 = (void *)(v105 + v104);
        void *v106 = v133;
        v106[1] = v54;
        swift_retain();
        swift_bridgeObjectRetain(v54);
        static Transaction.asyncTask(name:block:)("analyticsFirmwareUpdateComplete", 31LL, 2LL, &unk_1009A0E20, v105);
        swift_bridgeObjectRelease();
        swift_release(v105);
        if (v49)
        {
          char v45 = sub_1000DA0F4(v125, v49, (uint64_t)v140);
          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v140);
          return v45 & 1;
        }

        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v140);
        break;
      case 8:
        uint64_t v55 = static os_log_type_t.default.getter(v29);
        uint64_t v56 = qword_100A2B0A0;
        uint64_t v57 = swift_allocObject(v20, 152LL, 7LL);
        *(_OWORD *)(v57 + 16) = xmmword_1007E4050;
        uint64_t v59 = v141;
        uint64_t v58 = v142;
        sub_100012ED8(v140, v141);
        int v60 = v128;
        uint64_t v61 = (*(uint64_t (**)(uint64_t))(*(void *)(*(void *)(v58 + 8) + 8LL) + 32LL))(v59);
        uint64_t v62 = UUID.uuidString.getter(v61);
        uint64_t v64 = v63;
        (*(void (**)(char *, uint64_t))(v127 + 8))(v60, v129);
        *(void *)(v57 + 56) = &type metadata for String;
        *(void *)(v57 + 64) = v25;
        *(void *)(v57 + 32) = v62;
        *(void *)(v57 + 40) = v64;
        uint64_t v65 = v141;
        uint64_t v66 = v142;
        sub_100012ED8(v140, v141);
        uint64_t v67 = (*(uint64_t (**)(uint64_t, uint64_t))(v66 + 24))(v65, v66);
        *(void *)(v57 + 96) = &type metadata for String;
        *(void *)(v57 + 104) = v25;
        *(void *)(v57 + 72) = v67;
        *(void *)(v57 + 80) = v68;
        *(void *)&__int128 v134 = v133;
        swift_errorRetain(v133);
        uint64_t v69 = sub_100004AEC(&qword_10099C678);
        uint64_t v70 = String.init<A>(describing:)(&v134, v69);
        *(void *)(v57 + 136) = &type metadata for String;
        *(void *)(v57 + 144) = v25;
        *(void *)(v57 + 112) = v70;
        *(void *)(v57 + 120) = v71;
        os_log(_:dso:log:_:_:)( v55,  &_mh_execute_header,  v56,  "Firmware Update failed beacon (UUID: %@), systemVersion: %@, error: %@",  70LL,  2LL,  v57);
        uint64_t v72 = swift_bridgeObjectRelease();
        uint64_t v73 = qword_100A2A6C8;
        uint64_t v74 = v123;
        uint64_t v75 = static DispatchWorkItemFlags.barrier.getter(v72);
        __chkstk_darwin(v75);
        *(&v123 - 4) = (char *)v73;
        *(&v123 - 3) = (char *)a1;
        *(&v123 - 2) = (char *)sub_1000DA0F0;
        *(&v123 - 1) = 0LL;
        OS_dispatch_queue.sync<A>(flags:execute:)(v74, sub_1000DEE24);
        (*(void (**)(char *, uint64_t))(v130 + 8))(v74, v131);
        sub_100013044((uint64_t)v140, (uint64_t)&v134);
        uint64_t v76 = v124;
        if (v124)
        {
          uint64_t v77 = v124;
          uint64_t v78 = v126;
          uint64_t v79 = v125;
        }

        else
        {
          uint64_t v107 = v135;
          uint64_t v108 = v136;
          sub_100012ED8(&v134, v135);
          uint64_t v79 = (*(uint64_t (**)(uint64_t, uint64_t))(v108 + 24))(v107, v108);
          uint64_t v77 = v109;
          uint64_t v78 = v126;
        }

        swift_bridgeObjectRetain(v76);
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v134);
        uint64_t v131 = type metadata accessor for Transaction(0LL);
        uint64_t v110 = v127;
        v111 = v128;
        uint64_t v112 = a1;
        uint64_t v113 = v129;
        (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v128, v112, v129);
        uint64_t v114 = *(unsigned __int8 *)(v110 + 80);
        uint64_t v115 = (v114 + 24) & ~v114;
        unint64_t v116 = (v115 + v132 + 7) & 0xFFFFFFFFFFFFFFF8LL;
        unint64_t v117 = (v115 + v132 + 31) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v118 = swift_allocObject(&unk_10093D470, v117 + 8, v114 | 7);
        *(void *)(v118 + 16) = v78;
        (*(void (**)(uint64_t, char *, uint64_t))(v110 + 32))(v118 + v115, v111, v113);
        unint64_t v119 = v118 + v116;
        *(void *)unint64_t v119 = v79;
        *(void *)(v119 + 8) = v77;
        *(_BYTE *)(v119 + 16) = 0;
        uint64_t v120 = v133;
        *(void *)(v118 + v117) = v133;
        swift_retain();
        swift_errorRetain(v120);
        swift_bridgeObjectRetain(v77);
        static Transaction.asyncTask(name:block:)("analyticsFirmwareUpdateFailed", 29LL, 2LL, &unk_1009A0DF0, v118);
        swift_bridgeObjectRelease();
        uint64_t v36 = v118;
LABEL_29:
        swift_release(v36);
        goto LABEL_30;
      case 11:
        uint64_t v80 = v123;
        uint64_t v81 = static DispatchWorkItemFlags.barrier.getter(v29);
        __chkstk_darwin(v81);
        *(&v123 - 4) = (char *)v28;
        *(&v123 - 3) = (char *)a1;
        *(&v123 - 2) = (char *)sub_1000DA0F0;
        *(&v123 - 1) = 0LL;
        OS_dispatch_queue.sync<A>(flags:execute:)(v80, sub_1000DF920);
        (*(void (**)(char *, uint64_t))(v130 + 8))(v80, v131);
        type metadata accessor for Transaction(0LL);
        uint64_t v83 = v127;
        v82 = v128;
        uint64_t v84 = v129;
        (*(void (**)(char *, uint64_t, uint64_t))(v127 + 16))(v128, a1, v129);
        uint64_t v85 = *(unsigned __int8 *)(v83 + 80);
        uint64_t v86 = (v85 + 24) & ~v85;
        unint64_t v87 = (v132 + v86 + 7) & 0xFFFFFFFFFFFFFFF8LL;
        uint64_t v88 = swift_allocObject(&unk_10093D498, v87 + 16, v85 | 7);
        *(void *)(v88 + 16) = v126;
        (*(void (**)(uint64_t, char *, uint64_t))(v83 + 32))(v88 + v86, v82, v84);
        v89 = (void *)(v88 + v87);
        uint64_t v90 = v124;
        void *v89 = v125;
        v89[1] = v90;
        swift_bridgeObjectRetain(v90);
        swift_retain();
        static Transaction.asyncTask(name:block:)("analyticsFirmwareUpdateNotRequired", 34LL, 2LL, &unk_1009A0E00, v88);
        swift_release(v88);
        if (v90)
        {
          uint64_t v91 = v141;
          uint64_t v92 = v142;
          sub_100012ED8(v140, v141);
          uint64_t v94 = (*(uint64_t (**)(uint64_t, uint64_t))(v92 + 24))(v91, v92);
          if (v94 == v125 && v93 == v124)
          {
            swift_bridgeObjectRelease();
          }

          else
          {
            char v122 = _stringCompareWithSmolCheck(_:_:expecting:)(v125, v124, v94, v93, 0LL);
            swift_bridgeObjectRelease();
            if ((v122 & 1) == 0) {
              sub_1000DA0F4(v125, v124, (uint64_t)v140);
            }
          }
        }

        goto LABEL_30;
      default:
LABEL_30:
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v140);
        char v45 = 1;
        return v45 & 1;
    }
  }

  else
  {
    uint64_t v37 = sub_100015794((uint64_t)&v134, (uint64_t *)&unk_1009A9C40);
    uint64_t v38 = static os_log_type_t.error.getter(v37);
    if (qword_10099B790 != -1) {
      swift_once(&qword_10099B790, sub_100651808);
    }
    uint64_t v39 = qword_100A2B0A0;
    uint64_t v40 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v41 = swift_allocObject(v40, 72LL, 7LL);
    *(_OWORD *)(v41 + 16) = xmmword_1007E67D0;
    uint64_t v42 = UUID.uuidString.getter(v41);
    uint64_t v44 = v43;
    *(void *)(v41 + 56) = &type metadata for String;
    *(void *)(v41 + 64) = sub_1000226F4();
    *(void *)(v41 + 32) = v42;
    *(void *)(v41 + 40) = v44;
    os_log(_:dso:log:_:_:)(v38, &_mh_execute_header, v39, "No record found to update observation %@", 40LL, 2LL, v41);
    swift_bridgeObjectRelease();
  }

  char v45 = 0;
  return v45 & 1;
}

uint64_t sub_1000DA0F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v50 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v8 = __chkstk_darwin(v50);
  uint64_t v48 = (uint64_t)&v46 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v49 = (char *)&v46 - v10;
  uint64_t v53 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v11 = __chkstk_darwin(v53);
  uint64_t v51 = (uint64_t)&v46 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v46 - v14;
  uint64_t v16 = static os_log_type_t.default.getter(v13);
  if (qword_10099B790 != -1) {
    swift_once(&qword_10099B790, sub_100651808);
  }
  uint64_t v17 = qword_100A2B0A0;
  uint64_t v47 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v18 = swift_allocObject(v47, 112LL, 7LL);
  *(_OWORD *)(v18 + 16) = xmmword_1007E4750;
  *(void *)(v18 + 56) = &type metadata for String;
  unint64_t v19 = sub_1000226F4();
  *(void *)(v18 + 64) = v19;
  *(void *)(v18 + 32) = a1;
  *(void *)(v18 + 40) = a2;
  sub_100013044(a3, (uint64_t)v55);
  swift_bridgeObjectRetain(a2);
  uint64_t v20 = sub_100004AEC(&qword_1009B0530);
  uint64_t v52 = a1;
  uint64_t v21 = v20;
  uint64_t v22 = String.init<A>(describing:)(v55, v20);
  *(void *)(v18 + 96) = &type metadata for String;
  *(void *)(v18 + 104) = v19;
  *(void *)(v18 + 72) = v22;
  *(void *)(v18 + 80) = v23;
  os_log(_:dso:log:_:_:)(v16, &_mh_execute_header, v17, "Updating system version to %@ for record %@", 43LL, 2LL, v18);
  swift_bridgeObjectRelease();
  uint64_t v24 = PressuredExitTransactionManager.begin(_:)( "com.apple.icloud.searchpartyd.FirmwareUpdateProtocol.updateComplete",  67LL,  2LL);
  uint64_t v25 = swift_allocObject(&unk_10093D588, 32LL, 7LL);
  *(void *)(v25 + 16) = v4;
  *(void *)(v25 + 24) = v24;
  uint64_t v26 = a3;
  sub_100013044(a3, (uint64_t)v55);
  swift_retain_n(v24, 2LL);
  swift_retain();
  if (swift_dynamicCast(v15, v55, v21, v53, 0LL))
  {
    uint64_t v27 = type metadata accessor for OwnedBeaconRecord;
    uint64_t v28 = (uint64_t)v15;
    uint64_t v29 = v51;
    sub_10002218C(v28, v51, type metadata accessor for OwnedBeaconRecord);
    uint64_t v30 = swift_allocObject(&unk_10093D600, 32LL, 7LL);
    *(void *)(v30 + 16) = v52;
    *(void *)(v30 + 24) = a2;
    uint64_t v31 = swift_allocObject(&unk_10093D628, 48LL, 7LL);
    *(void *)(v31 + 16) = sub_1000DF5A4;
    *(void *)(v31 + 24) = v25;
    *(void *)(v31 + 32) = sub_1000DF598;
    *(void *)(v31 + 40) = v24;
    swift_bridgeObjectRetain(a2);
    swift_retain();
    swift_retain();
    sub_1002B2F50( v29,  0,  (void (*)(uint64_t))sub_1000DF600,  v30,  (void (*)(uint64_t))sub_1000DF638,  (void (*)(uint64_t))v31);
    swift_release(v25);
    swift_release_n(v24, 2LL);
    swift_release(v30);
    swift_release(v31);
    uint64_t v32 = v29;
  }

  else
  {
    uint64_t v33 = v52;
    uint64_t v34 = (uint64_t)v49;
    uint64_t v35 = swift_dynamicCast(v49, v55, v21, v50, 0LL);
    if (!(_DWORD)v35)
    {
      uint64_t v40 = static os_log_type_t.error.getter(v35);
      uint64_t v41 = qword_100A2B0A0;
      uint64_t v42 = swift_allocObject(v47, 72LL, 7LL);
      *(_OWORD *)(v42 + 16) = xmmword_1007E67D0;
      sub_100013044(v26, (uint64_t)v54);
      uint64_t v43 = String.init<A>(describing:)(v54, v21);
      *(void *)(v42 + 56) = &type metadata for String;
      *(void *)(v42 + 64) = v19;
      *(void *)(v42 + 32) = v43;
      *(void *)(v42 + 40) = v44;
      os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Unexpected record type %@", 25LL, 2LL, v42);
      swift_bridgeObjectRelease();
      Transaction.end()();
      swift_release(v25);
      swift_release_n(v24, 2LL);
      uint64_t v39 = 0LL;
      goto LABEL_9;
    }

    uint64_t v27 = type metadata accessor for SharedBeaconRecord;
    uint64_t v36 = v48;
    sub_10002218C(v34, v48, type metadata accessor for SharedBeaconRecord);
    uint64_t v37 = swift_allocObject(&unk_10093D5B0, 32LL, 7LL);
    *(void *)(v37 + 16) = v33;
    *(void *)(v37 + 24) = a2;
    uint64_t v38 = swift_allocObject(&unk_10093D5D8, 48LL, 7LL);
    *(void *)(v38 + 16) = sub_1000DF5A4;
    *(void *)(v38 + 24) = v25;
    *(void *)(v38 + 32) = sub_1000DF598;
    *(void *)(v38 + 40) = v24;
    swift_bridgeObjectRetain(a2);
    swift_retain();
    swift_retain();
    sub_1002B3554( v36,  0,  (void (*)(uint64_t))sub_1000DF5D0,  v37,  (void (*)(uint64_t))sub_1000DF5DC,  (void (*)(uint64_t))v38);
    swift_release(v25);
    swift_release_n(v24, 2LL);
    swift_release(v37);
    swift_release(v38);
    uint64_t v32 = v36;
  }

  sub_100018C68(v32, v27);
  uint64_t v39 = 1LL;
LABEL_9:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v55);
  return v39;
}

BOOL sub_1000DA5F8(uint64_t a1)
{
  return *(_BYTE *)(a1 + *(int *)(type metadata accessor for BeaconObservation(0LL) + 24)) == 10;
}

uint64_t sub_1000DA62C(uint64_t a1, uint64_t a2)
{
  v2[11] = a1;
  v2[12] = a2;
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  v2[13] = v3;
  v2[14] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord(0LL);
  v2[15] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[16] = v5;
  uint64_t v6 = *(void *)(v5 + 64);
  v2[17] = v6;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v2[18] = swift_task_alloc(v7);
  v2[19] = swift_task_alloc(v7);
  unint64_t v8 = (*(void *)(*(void *)(sub_100004AEC(&qword_10099CA60) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[20] = swift_task_alloc(v8);
  v2[21] = swift_task_alloc(v8);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  v2[22] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v2[23] = v10;
  uint64_t v11 = *(void *)(v10 + 64);
  v2[24] = v11;
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v2[25] = swift_task_alloc(v12);
  v2[26] = swift_task_alloc(v12);
  return swift_task_switch(sub_1000DA738, 0LL, 0LL);
}

uint64_t sub_1000DA738()
{
  uint64_t v1 = v0[26];
  uint64_t v2 = v0[22];
  uint64_t v3 = v0[23];
  uint64_t v4 = v0[12];
  uint64_t v5 = *(void *)(v0[11] + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_firmwareUpdateService);
  v0[27] = v5;
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[28] = v6;
  v6(v1, v4, v2);
  return swift_task_switch(sub_1000DA798, v5, 0LL);
}

uint64_t sub_1000DA798()
{
  uint64_t v1 = *(void *)(v0 + 216);
  swift_beginAccess(v1 + 144, v0 + 16, 0LL, 0LL);
  uint64_t v2 = *(void *)(v1 + 144);
  *(void *)(v0 + 232) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_task_switch(sub_1000DA7F0, 0LL, 0LL);
}

uint64_t sub_1000DA7F0()
{
  if (*(void *)(*(void *)(v0 + 232) + 16LL) && (unint64_t v1 = sub_10030D124(*(void *)(v0 + 208)), (v2 & 1) != 0))
  {
    uint64_t v3 = *(void *)(v0 + 208);
    uint64_t v4 = *(void *)(v0 + 176);
    uint64_t v5 = *(void *)(v0 + 184);
    uint64_t v6 = *(void *)(*(void *)(*(void *)(v0 + 232) + 56LL) + 8 * v1);
    *(void *)(v0 + 240) = v6;
    swift_retain();
    swift_bridgeObjectRelease();
    unint64_t v7 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    *(void *)(v0 + 248) = v7;
    v7(v3, v4);
    return swift_task_switch(sub_1000DA908, v6, 0LL);
  }

  else
  {
    uint64_t v9 = *(void *)(v0 + 208);
    uint64_t v10 = *(void *)(v0 + 176);
    uint64_t v11 = *(void *)(v0 + 184);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    uint64_t v12 = *(void *)(v0 + 200);
    uint64_t v14 = *(void *)(v0 + 160);
    uint64_t v13 = *(void *)(v0 + 168);
    uint64_t v16 = *(void *)(v0 + 144);
    uint64_t v15 = *(void *)(v0 + 152);
    uint64_t v17 = *(void *)(v0 + 112);
    swift_task_dealloc(*(void *)(v0 + 208));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000DA908()
{
  *(void *)(v0 + 256) = sub_100706E4C(0xD000000000000013LL, 0x8000000100853C90LL);
  return swift_task_switch(sub_1000DA960, 0LL, 0LL);
}

uint64_t sub_1000DA960()
{
  unint64_t v1 = *(void **)(v0 + 256);
  if (v1)
  {
    uint64_t v2 = objc_opt_self(&OBJC_CLASS___NSString);
    uint64_t v3 = swift_dynamicCastObjCClass(v1, v2);
    *(void *)(v0 + 264) = v3;
    if (v3) {
      return swift_task_switch(sub_1000DAA44, *(void *)(v0 + 240), 0LL);
    }
    swift_release(*(void *)(v0 + 240));
  }

  else
  {
    swift_release(*(void *)(v0 + 240));
  }

  uint64_t v5 = *(void *)(v0 + 200);
  uint64_t v7 = *(void *)(v0 + 160);
  uint64_t v6 = *(void *)(v0 + 168);
  uint64_t v9 = *(void *)(v0 + 144);
  uint64_t v8 = *(void *)(v0 + 152);
  uint64_t v10 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 208));
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DAA44()
{
  *(void *)(v0 + 272) = sub_100706E4C(0x496E6F6973736573LL, 0xE900000000000044LL);
  return swift_task_switch(sub_1000DAA9C, 0LL, 0LL);
}

uint64_t sub_1000DAA9C()
{
  unint64_t v1 = *(void **)(v0 + 272);
  if (v1)
  {
    uint64_t v2 = objc_opt_self(&OBJC_CLASS___NSString);
    uint64_t v3 = swift_dynamicCastObjCClass(v1, v2);
    *(void *)(v0 + 280) = v3;
    if (v3) {
      return swift_task_switch(sub_1000DAB8C, *(void *)(v0 + 240), 0LL);
    }
    uint64_t v5 = *(void **)(v0 + 256);
    swift_release(*(void *)(v0 + 240));
  }

  else
  {
    uint64_t v5 = *(void **)(v0 + 256);
    swift_release(*(void *)(v0 + 240));
  }

  uint64_t v6 = *(void *)(v0 + 200);
  uint64_t v8 = *(void *)(v0 + 160);
  uint64_t v7 = *(void *)(v0 + 168);
  uint64_t v10 = *(void *)(v0 + 144);
  uint64_t v9 = *(void *)(v0 + 152);
  uint64_t v11 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 208));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DAB8C()
{
  *(void *)(v0 + 288) = 0LL;
  return swift_task_switch(sub_1000DABF0, 0LL, 0LL);
}

uint64_t sub_1000DABF0()
{
  v0[37] = v0[36];
  uint64_t v1 = type metadata accessor for AnalyticsEvent(0LL);
  uint64_t v2 = (char *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v0[38] = v2;
  swift_defaultActor_initialize();
  unint64_t v3 = sub_10041271C((uint64_t)_swiftEmptyArrayStorage);
  *((void *)v2 + 14) = v3;
  UUID.init()(v3);
  uint64_t v4 = &v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v5 = type metadata accessor for DispatchTime(0LL);
  v0[39] = v5;
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL);
  v0[40] = v6;
  v6(v4, 1LL, 1LL, v5);
  v6(&v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1LL, 1LL, v5);
  *((void *)v2 + 15) = 0xD000000000000032LL;
  *((void *)v2 + 16) = 0x8000000100853CB0LL;
  return swift_task_switch(sub_1000DACF4, v2, 0LL);
}

uint64_t sub_1000DACF4(uint64_t a1)
{
  uint64_t v2 = v1[39];
  unint64_t v3 = (void (*)(uint64_t, void, uint64_t, uint64_t))v1[40];
  uint64_t v4 = v1[38];
  uint64_t v6 = v1[20];
  uint64_t v5 = v1[21];
  static DispatchTime.now()(a1);
  v3(v5, 0LL, 1LL, v2);
  sub_1000DF200(v5, v6);
  uint64_t v7 = v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime;
  swift_beginAccess(v4 + OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime, v1 + 5, 33LL, 0LL);
  sub_100015680(v6, v7);
  swift_endAccess(v1 + 5);
  return swift_task_switch(sub_1000DADA8, 0LL, 0LL);
}

uint64_t sub_1000DADA8()
{
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v3 = *(void *)(v0 + 176);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v5 = *(void *)(v0 + 88);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 224))(v1, *(void *)(v0 + 96), v3);
  uint64_t v6 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v7 = (v6 + 24) & ~v6;
  uint64_t v8 = swift_allocObject(&unk_10093D510, v7 + v2, v6 | 7);
  *(void *)(v0 + 328) = v8;
  *(void *)(v8 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v8 + v7, v1, v3);
  uint64_t v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc(v9);
  *(void *)(v0 + 336) = v10;
  void *v10 = v0;
  v10[1] = sub_1000DAE7C;
  return unsafeBlocking<A>(_:)(*(void *)(v0 + 112), sub_1000DF24C, v8, *(void *)(v0 + 104));
}

uint64_t sub_1000DAE7C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 328LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 336LL));
  swift_release(v1);
  return swift_task_switch(sub_1000DAED8, 0LL, 0LL);
}

uint64_t sub_1000DAED8()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 112);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v1 + 48))(v2, 1LL, *(void *)(v0 + 120)) == 1)
  {
    sub_100015794(v2, (uint64_t *)&unk_1009A9C30);
    uint64_t v14 = (uint64_t (*)(void))((char *)&dword_1009BE128 + dword_1009BE128);
    uint64_t v3 = (void *)swift_task_alloc(unk_1009BE12C);
    *(void *)(v0 + 344) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1000DB06C;
    return v14(*(void *)(v0 + 304));
  }

  else
  {
    uint64_t v6 = *(void *)(v0 + 144);
    uint64_t v5 = *(void *)(v0 + 152);
    uint64_t v7 = *(void *)(v0 + 136);
    uint64_t v8 = *(void *)(v0 + 88);
    sub_10002218C(v2, v5, type metadata accessor for OwnedBeaconRecord);
    sub_10001DC4C(v5, v6, type metadata accessor for OwnedBeaconRecord);
    LODWORD(v9) = *(_DWORD *)(v1 + 80);
    *(_DWORD *)(v0 + 392) = v9;
    uint64_t v9 = v9;
    uint64_t v10 = (v9 + 24) & ~v9;
    uint64_t v11 = swift_allocObject(&unk_10093D538, v10 + v7, v9 | 7LL);
    *(void *)(v0 + 352) = v11;
    *(void *)(v11 + 16) = v8;
    sub_10002218C(v6, v11 + v10, type metadata accessor for OwnedBeaconRecord);
    uint64_t v12 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    uint64_t v13 = (void *)swift_task_alloc(v12);
    *(void *)(v0 + 360) = v13;
    void *v13 = v0;
    v13[1] = sub_1000DB0C8;
    return unsafeBlocking<A>(_:)(v0 + 396, sub_1000DF254, v11, &type metadata for Bool);
  }

uint64_t sub_1000DB06C()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 344));
  if (v0) {
    swift_errorRelease(v0);
  }
  return swift_task_switch(sub_1000DB3B4, *(void *)(v2 + 216), 0LL);
}

uint64_t sub_1000DB0C8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 352LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 360LL));
  swift_release(v1);
  return swift_task_switch(sub_1000DB124, 0LL, 0LL);
}

uint64_t sub_1000DB124()
{
  uint64_t v1 = *(unsigned __int8 *)(v0 + 392);
  uint64_t v3 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v5 = (v1 + 24) & ~v1;
  uint64_t v6 = v5 + *(void *)(v0 + 136);
  uint64_t v7 = v1 | 7;
  *(_BYTE *)(v0 + 398) = *(_BYTE *)(v0 + 396);
  sub_10001DC4C(v2, v3, type metadata accessor for OwnedBeaconRecord);
  uint64_t v8 = swift_allocObject(&unk_10093D560, v6, v7);
  *(void *)(v0 + 368) = v8;
  *(void *)(v8 + 16) = v4;
  sub_10002218C(v3, v8 + v5, type metadata accessor for OwnedBeaconRecord);
  uint64_t v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc(v9);
  *(void *)(v0 + 376) = v10;
  void *v10 = v0;
  v10[1] = sub_1000DB21C;
  return unsafeBlocking<A>(_:)(v0 + 397, sub_1000DF544, v8, &type metadata for Bool);
}

uint64_t sub_1000DB21C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 368LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 376LL));
  swift_release(v1);
  return swift_task_switch(sub_1000DB278, 0LL, 0LL);
}

uint64_t sub_1000DB278()
{
  char v1 = *(_BYTE *)(v0 + 398);
  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v5 = *(void *)(v0 + 152);
  char v6 = *(_BYTE *)(v0 + 397);
  uint64_t v7 = swift_task_alloc(48LL);
  *(void *)(v0 + 384) = v7;
  *(void *)(v7 + 16) = v3;
  *(void *)(v7 + 24) = v5;
  *(void *)(v7 + 32) = v4;
  *(_BYTE *)(v7 + 40) = v1;
  *(_BYTE *)(v7 + 41) = v6;
  return swift_task_switch(sub_1000DB2F4, v2, 0LL);
}

uint64_t sub_1000DB2F4()
{
  uint64_t v1 = *(void *)(v0 + 296);
  sub_10070F3A0((uint64_t (*)(uint64_t))sub_1000DF584);
  uint64_t v2 = *(void *)(v0 + 384);
  if (v1)
  {
    swift_errorRelease(v1);
    swift_task_dealloc(v2);
    uint64_t v3 = sub_1000DF93C;
  }

  else
  {
    swift_task_dealloc(*(void *)(v0 + 384));
    uint64_t v3 = sub_1000DB370;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1000DB370()
{
  return swift_task_switch(sub_1000DB3B4, *(void *)(v0 + 216), 0LL);
}

uint64_t sub_1000DB3B4()
{
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v0 + 248);
  uint64_t v3 = *(void *)(v0 + 216);
  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 176);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 224))(v4, *(void *)(v0 + 96), v5);
  swift_beginAccess(v3 + 152, v0 + 64, 33LL, 0LL);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*(void *)(v3 + 152));
  uint64_t v8 = *(void *)(v3 + 152);
  *(void *)(v3 + 152) = 0x8000000000000000LL;
  sub_10005BFB4(v1, v4, isUniquelyReferenced_nonNull_native);
  *(void *)(v3 + 152) = v8;
  swift_bridgeObjectRelease();
  v2(v4, v5);
  swift_endAccess(v0 + 64);
  return swift_task_switch(sub_1000DB494, 0LL, 0LL);
}

uint64_t sub_1000DB494()
{
  uint64_t v1 = *(void **)(v0 + 272);
  uint64_t v2 = *(void **)(v0 + 256);
  uint64_t v3 = *(void *)(v0 + 240);
  swift_release(*(void *)(v0 + 304));
  swift_release(v3);

  uint64_t v4 = *(void *)(v0 + 200);
  uint64_t v6 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 168);
  uint64_t v8 = *(void *)(v0 + 144);
  uint64_t v7 = *(void *)(v0 + 152);
  uint64_t v9 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 208));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DB534()
{
  v0[37] = 0LL;
  uint64_t v1 = type metadata accessor for AnalyticsEvent(0LL);
  uint64_t v2 = (char *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  v0[38] = v2;
  swift_defaultActor_initialize();
  unint64_t v3 = sub_10041271C((uint64_t)_swiftEmptyArrayStorage);
  *((void *)v2 + 14) = v3;
  UUID.init()(v3);
  uint64_t v4 = &v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v5 = type metadata accessor for DispatchTime(0LL);
  v0[39] = v5;
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL);
  v0[40] = v6;
  v6(v4, 1LL, 1LL, v5);
  v6(&v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1LL, 1LL, v5);
  *((void *)v2 + 15) = 0xD000000000000032LL;
  *((void *)v2 + 16) = 0x8000000100853CB0LL;
  return swift_task_switch(sub_1000DACF4, v2, 0LL);
}

uint64_t sub_1000DB634@<X0>(uint64_t a1@<X1>, _BYTE *a2@<X8>)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v13 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(int *)(type metadata accessor for OwnedBeaconRecord(0LL) + 20);
  if (qword_10099B300 != -1) {
    swift_once(&qword_10099B300, sub_1003459EC);
  }
  uint64_t v8 = a1 + v7;
  uint64_t v9 = qword_100A2A6C8;
  uint64_t v10 = objc_autoreleasePoolPush();
  sub_100346B24(v9, v8, 0LL, 0LL, &v14);
  objc_autoreleasePoolPop(v10);
  char v11 = sub_100518274((uint64_t)v6, v8, v14, 0);
  swift_bridgeObjectRelease();
  uint64_t result = sub_100015794((uint64_t)v6, (uint64_t *)&unk_10099D720);
  *a2 = v11 & 1;
  return result;
}

unint64_t sub_1000DB754(void *a1, uint64_t a2, void *a3, uint64_t a4, int a5)
{
  int v26 = a5;
  uint64_t v25 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v25);
  uint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A0E28);
  uint64_t inited = swift_initStackObject(v10, &v28);
  *(_OWORD *)(inited + 16) = xmmword_1007E4060;
  *(void *)(inited + 32) = 0x496E6F6973736573LL;
  *(void *)(inited + 40) = 0xE900000000000044LL;
  *(void *)(inited + 48) = a1;
  *(_BYTE *)(inited + 56) = 0;
  strcpy((char *)(inited + 64), "batteryLevel");
  *(_BYTE *)(inited + 77) = 0;
  *(_WORD *)(inited + 78) = -5120;
  uint64_t v12 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v13 = *(unsigned __int8 *)(a2 + *(int *)(v12 + 76));
  id v14 = objc_allocWithZone(&OBJC_CLASS___NSNumber);
  id v15 = a1;
  *(void *)(inited + 80) = [v14 initWithInteger:v13];
  *(_BYTE *)(inited + 88) = 0;
  strcpy((char *)(inited + 96), "updateRequired");
  *(_BYTE *)(inited + 111) = -18;
  *(void *)(inited + 112) = 1LL;
  *(_BYTE *)(inited + 120) = 1;
  *(void *)(inited + 128) = 0x737265566D6F7266LL;
  *(void *)(inited + 136) = 0xEB000000006E6F69LL;
  *(void *)(inited + 144) = String._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 152) = 0;
  *(void *)(inited + 160) = 0xD000000000000013LL;
  *(void *)(inited + 168) = 0x8000000100853C90LL;
  *(void *)(inited + 176) = a3;
  *(_BYTE *)(inited + 184) = 0;
  *(void *)(inited + 192) = 0x6563697665447369LL;
  *(void *)(inited + 200) = 0xEF6465687361654CLL;
  id v16 = a3;
  *(NSNumber *)(inited + 208) = Bool._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 216) = 0;
  *(void *)(inited + 224) = 0xD000000000000011LL;
  *(void *)(inited + 232) = 0x8000000100853CF0LL;
  *(NSNumber *)(inited + 240) = Bool._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 248) = 0;
  unint64_t v17 = sub_100412AA4(inited);
  id v18 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  LODWORD(v13) = [v18 isInternalBuild];

  if ((_DWORD)v13)
  {
    UUID.uuidString.getter(v19);
    NSString v20 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v17);
    unint64_t v27 = v17;
    sub_10005C698((uint64_t)v20, 0, 0x6544646572696170LL, 0xEE00444965636976LL, isUniquelyReferenced_nonNull_native);
    unint64_t v17 = v27;
    swift_bridgeObjectRelease();
    sub_10001DC4C(a2 + *(int *)(v12 + 24), (uint64_t)v9, type metadata accessor for StableIdentifier);
    if (swift_getEnumCaseMultiPayload(v9, v25) == 1)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      NSString v22 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
      char v23 = swift_isUniquelyReferenced_nonNull_native(v17);
      unint64_t v27 = v17;
      sub_10005C698((uint64_t)v22, 0, 0xD000000000000018LL, 0x8000000100853D10LL, v23);
      unint64_t v17 = v27;
      swift_bridgeObjectRelease();
    }

    else
    {
      sub_100018C68((uint64_t)v9, type metadata accessor for StableIdentifier);
    }
  }

  return v17;
}

uint64_t sub_1000DBAEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  void v4[9] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[10] = v6;
  v4[11] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000DBB50, 0LL, 0LL);
}

uint64_t sub_1000DBB50()
{
  uint64_t v2 = v0[10];
  uint64_t v1 = v0[11];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v5 = *(void *)(v0[5] + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_firmwareUpdateService);
  v0[12] = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v2 + 16))(v1, v4, v3);
  return swift_task_switch(sub_1000DBBAC, v5, 0LL);
}

uint64_t sub_1000DBBAC()
{
  uint64_t v1 = *(void *)(v0 + 96);
  swift_beginAccess(v1 + 152, v0 + 16, 0LL, 0LL);
  uint64_t v2 = *(void *)(v1 + 152);
  *(void *)(v0 + 104) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_task_switch(sub_1000DBC04, 0LL, 0LL);
}

uint64_t sub_1000DBC04()
{
  uint64_t v1 = v0[11];
  if (*(void *)(v0[13] + 16))
  {
    unint64_t v2 = sub_10030D124(v0[11]);
    uint64_t v4 = v0[10];
    uint64_t v3 = v0[11];
    uint64_t v5 = v0[9];
    if ((v6 & 1) != 0)
    {
      uint64_t v7 = v0[8];
      uint64_t v8 = *(void *)(*(void *)(v0[13] + 56) + 8 * v2);
      v0[14] = v8;
      swift_retain();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
      swift_retain();
      swift_bridgeObjectRetain(v7);
      return swift_task_switch(sub_1000DBD2C, v8, 0LL);
    }

    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  }

  else
  {
    uint64_t v10 = v0[9];
    uint64_t v11 = v0[10];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v1, v10);
  }

  v0[15] = 0LL;
  uint64_t v12 = (uint64_t **)swift_task_alloc(dword_10099F614);
  v0[16] = (uint64_t)v12;
  *uint64_t v12 = v0;
  v12[1] = (uint64_t *)sub_1000DBDBC;
  return sub_100093F10(v0[6]);
}

uint64_t sub_1000DBD2C()
{
  uint64_t v1 = v0[14];
  swift_bridgeObjectRelease();
  swift_release(v1);
  v0[15] = v0[14];
  unint64_t v2 = (uint64_t **)swift_task_alloc(dword_10099F614);
  v0[16] = (uint64_t)v2;
  *unint64_t v2 = v0;
  v2[1] = (uint64_t *)sub_1000DBDBC;
  return sub_100093F10(v0[6]);
}

uint64_t sub_1000DBDBC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 96LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 128LL));
  return swift_task_switch(sub_1000DBE14, v1, 0LL);
}

uint64_t sub_1000DBE14()
{
  return swift_task_switch(sub_1000DBE54, 0LL, 0LL);
}

uint64_t sub_1000DBE54()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_release(*(void *)(v0 + 120));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1000DBE90()
{
  uint64_t v0 = sub_100004AEC(&qword_1009A0E28);
  uint64_t inited = swift_initStackObject(v0, &v3);
  *(_OWORD *)(inited + 16) = xmmword_1007E4050;
  *(void *)(inited + 32) = 0x6563637553736177LL;
  *(void *)(inited + 40) = 0xEA00000000007373LL;
  *(void *)(inited + 48) = 1LL;
  *(_BYTE *)(inited + 56) = 1;
  *(void *)(inited + 64) = 0x6F69737265566F74LL;
  *(void *)(inited + 72) = 0xE90000000000006ELL;
  *(void *)(inited + 80) = String._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 88) = 0;
  strcpy((char *)(inited + 96), "didShowAlert");
  *(_BYTE *)(inited + 109) = 0;
  *(_WORD *)(inited + 110) = -5120;
  *(void *)(inited + 112) = 0LL;
  *(_BYTE *)(inited + 120) = 1;
  return sub_100412AA4(inited);
}

uint64_t sub_1000DBF6C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, char a5, uint64_t a6)
{
  *(void *)(v6 + 88) = a4;
  *(void *)(v6 + 96) = a6;
  *(_BYTE *)(v6 + 232) = a5;
  *(void *)(v6 + 72) = a2;
  *(void *)(v6 + 80) = a3;
  *(void *)(v6 + 64) = a1;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  *(void *)(v6 + 104) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v6 + 112) = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v6 + 120) = swift_task_alloc(v9);
  *(void *)(v6 + 128) = swift_task_alloc(v9);
  return swift_task_switch(sub_1000DBFE8, 0LL, 0LL);
}

uint64_t sub_1000DBFE8()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[14];
  uint64_t v4 = v0[9];
  uint64_t v5 = *(void *)(v0[8] + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_firmwareUpdateService);
  v0[17] = v5;
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[18] = v6;
  v6(v1, v4, v2);
  return swift_task_switch(sub_1000DC048, v5, 0LL);
}

uint64_t sub_1000DC048()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_beginAccess(v1 + 144, v0 + 16, 0LL, 0LL);
  uint64_t v2 = *(void *)(v1 + 144);
  *(void *)(v0 + 152) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_task_switch(sub_1000DC0A0, 0LL, 0LL);
}

uint64_t sub_1000DC0A0()
{
  uint64_t v1 = *(void *)(v0 + 128);
  if (!*(void *)(*(void *)(v0 + 152) + 16LL))
  {
    uint64_t v11 = *(void *)(v0 + 104);
    uint64_t v12 = *(void *)(v0 + 112);
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
    v13(v1, v11);
LABEL_6:
    *(void *)(v0 + 184) = 0LL;
    *(void *)(v0 + 192) = v13;
    uint64_t v14 = *(void *)(v0 + 136);
    (*(void (**)(void, void, void))(v0 + 144))( *(void *)(v0 + 120),  *(void *)(v0 + 72),  *(void *)(v0 + 104));
    unint64_t v9 = sub_1000DC264;
    uint64_t v10 = v14;
    return swift_task_switch(v9, v10, 0LL);
  }

  unint64_t v2 = sub_10030D124(*(void *)(v0 + 128));
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 112);
  if ((v6 & 1) == 0)
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
    v13(v3, v4);
    goto LABEL_6;
  }

  uint64_t v7 = *(void *)(*(void *)(*(void *)(v0 + 152) + 56LL) + 8 * v2);
  *(void *)(v0 + 160) = v7;
  swift_retain();
  swift_bridgeObjectRelease();
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  *(void *)(v0 + 168) = v8;
  v8(v3, v4);
  unint64_t v9 = sub_1000DC198;
  uint64_t v10 = v7;
  return swift_task_switch(v9, v10, 0LL);
}

uint64_t sub_1000DC198()
{
  *(void *)(v0 + 176) = 0LL;
  swift_release(*(void *)(v0 + 160));
  return swift_task_switch(sub_1000DC210, 0LL, 0LL);
}

uint64_t sub_1000DC210()
{
  *(int8x16_t *)(v0 + 184) = vextq_s8(*(int8x16_t *)(v0 + 168), *(int8x16_t *)(v0 + 168), 8uLL);
  uint64_t v1 = *(void *)(v0 + 136);
  (*(void (**)(void, void, void))(v0 + 144))( *(void *)(v0 + 120),  *(void *)(v0 + 72),  *(void *)(v0 + 104));
  return swift_task_switch(sub_1000DC264, v1, 0LL);
}

uint64_t sub_1000DC264()
{
  uint64_t v1 = *(void *)(v0 + 136);
  swift_beginAccess(v1 + 152, v0 + 40, 0LL, 0LL);
  uint64_t v2 = *(void *)(v1 + 152);
  *(void *)(v0 + 200) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_task_switch(sub_1000DC2BC, 0LL, 0LL);
}

uint64_t sub_1000DC2BC()
{
  if (*(void *)(v0[25] + 16))
  {
    unint64_t v1 = sub_10030D124(v0[15]);
    uint64_t v2 = (void (*)(uint64_t, uint64_t))v0[24];
    uint64_t v3 = v0[15];
    uint64_t v4 = v0[13];
    if ((v5 & 1) != 0)
    {
      uint64_t v7 = v0[11];
      uint64_t v6 = v0[12];
      uint64_t v8 = *(void *)(*(void *)(v0[25] + 56) + 8 * v1);
      v0[26] = v8;
      swift_retain();
      swift_bridgeObjectRelease();
      v2(v3, v4);
      swift_retain();
      swift_bridgeObjectRetain(v7);
      swift_errorRetain(v6);
      return swift_task_switch(sub_1000DC3F4, v8, 0LL);
    }

    swift_bridgeObjectRelease();
    v2(v3, v4);
  }

  else
  {
    uint64_t v10 = (void (*)(uint64_t, uint64_t))v0[24];
    uint64_t v11 = v0[15];
    uint64_t v12 = v0[13];
    swift_bridgeObjectRelease();
    v10(v11, v12);
  }

  v0[27] = 0LL;
  uint64_t v13 = (uint64_t **)swift_task_alloc(dword_10099F614);
  v0[28] = (uint64_t)v13;
  void *v13 = v0;
  v13[1] = (uint64_t *)sub_1000DC494;
  return sub_100093F10(v0[9]);
}

uint64_t sub_1000DC3F4()
{
  uint64_t v1 = *(void *)(v0 + 184);
  sub_10071AC54( *(void *)(v0 + 208),  *(void *)(v0 + 80),  *(void *)(v0 + 88),  *(_BYTE *)(v0 + 232),  *(void *)(v0 + 96));
  uint64_t v2 = *(void *)(v0 + 208);
  swift_errorRelease(*(void *)(v0 + 96));
  swift_bridgeObjectRelease();
  if (v1) {
    swift_errorRelease(v1);
  }
  swift_release(v2);
  *(void *)(v0 + 216) = *(void *)(v0 + 208);
  uint64_t v3 = (void *)swift_task_alloc(dword_10099F614);
  *(void *)(v0 + 224) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000DC494;
  return sub_100093F10(*(void *)(v0 + 72));
}

uint64_t sub_1000DC494()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 136LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 224LL));
  return swift_task_switch(sub_1000DC4EC, v1, 0LL);
}

uint64_t sub_1000DC4EC()
{
  return swift_task_switch(sub_1000DC52C, 0LL, 0LL);
}

uint64_t sub_1000DC52C()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 128);
  swift_release(*(void *)(v0 + 216));
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DC570()
{
  uint64_t v1 = *(void *)(v0 + 168);
  *(void *)(v0 + 184) = 0LL;
  *(void *)(v0 + 192) = v1;
  uint64_t v2 = *(void *)(v0 + 136);
  (*(void (**)(void, void, void))(v0 + 144))( *(void *)(v0 + 120),  *(void *)(v0 + 72),  *(void *)(v0 + 104));
  return swift_task_switch(sub_1000DC264, v2, 0LL);
}

unint64_t sub_1000DC5C0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = sub_100004AEC(&qword_1009A0E28);
  uint64_t inited = swift_initStackObject(v5, v20);
  *(_OWORD *)(inited + 16) = xmmword_1007E4050;
  *(void *)(inited + 32) = 0x6563637553736177LL;
  *(void *)(inited + 40) = 0xEA00000000007373LL;
  sub_100022898(0LL, (unint64_t *)&qword_1009A9C80, &OBJC_CLASS___NSNumber_ptr);
  *(NSNumber *)(inited + 48) = NSNumber.init(BOOLeanLiteral:)(0);
  *(_BYTE *)(inited + 56) = 0;
  *(void *)(inited + 64) = 0x6F69737265566F74LL;
  *(void *)(inited + 72) = 0xE90000000000006ELL;
  *(void *)(inited + 80) = String._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 88) = 0;
  strcpy((char *)(inited + 96), "didShowAlert");
  *(_BYTE *)(inited + 109) = 0;
  *(_WORD *)(inited + 110) = -5120;
  *(NSNumber *)(inited + 112) = Bool._bridgeToObjectiveC()();
  *(_BYTE *)(inited + 120) = 0;
  unint64_t v7 = sub_100412AA4(inited);
  if (a4)
  {
    swift_getErrorValue(a4, v19, v18);
    uint64_t v8 = v18[1];
    uint64_t v9 = v18[2];
    swift_errorRetain(a4);
    Error.domain.getter(v8, v9);
    NSString v10 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v7);
    unint64_t v17 = v7;
    sub_10005C698((uint64_t)v10, 0, 0x6D6F44726F727265LL, 0xEB000000006E6961LL, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_getErrorValue(a4, v16, v15);
    Error.code.getter(v15[1], v15[2]);
    Class isa = Int._bridgeToObjectiveC()().super.super.isa;
    char v13 = swift_isUniquelyReferenced_nonNull_native(v7);
    unint64_t v17 = v7;
    sub_10005C698((uint64_t)isa, 0, 0x646F43726F727265LL, 0xE900000000000065LL, v13);
    unint64_t v7 = v17;
    swift_bridgeObjectRelease();
    swift_errorRelease(a4);
  }

  return v7;
}

uint64_t sub_1000DC7E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[7] = a3;
  v4[8] = a4;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  void v4[9] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[10] = v6;
  uint64_t v7 = *(void *)(v6 + 64);
  v4[11] = v7;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v4[12] = swift_task_alloc(v8);
  v4[13] = swift_task_alloc(v8);
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  v4[14] = v9;
  v4[15] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000DC884, 0LL, 0LL);
}

uint64_t sub_1000DC884()
{
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[10];
  uint64_t v2 = v0[11];
  uint64_t v4 = v0[9];
  uint64_t v6 = v0[5];
  uint64_t v5 = v0[6];
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  v0[16] = v7;
  v7(v1, v5, v4);
  uint64_t v8 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_10093D6A0, v9 + v2, v8 | 7);
  v0[17] = v10;
  *(void *)(v10 + 16) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v10 + v9, v1, v4);
  uint64_t v11 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v12 = (void *)swift_task_alloc(v11);
  v0[18] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_1000DC960;
  return unsafeBlocking<A>(_:)(v0[15], sub_1000DF24C, v10, v0[14]);
}

uint64_t sub_1000DC960()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 136LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 144LL));
  swift_release(v1);
  return swift_task_switch(sub_1000DC9BC, 0LL, 0LL);
}

uint64_t sub_1000DC9BC()
{
  uint64_t v1 = (void (*)(uint64_t, uint64_t, uint64_t))v0[16];
  uint64_t v2 = v0[12];
  uint64_t v3 = v0[9];
  uint64_t v4 = v0[6];
  uint64_t v5 = *(void *)(v0[5] + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_firmwareUpdateService);
  v0[19] = v5;
  v1(v2, v4, v3);
  return swift_task_switch(sub_1000DCA18, v5, 0LL);
}

uint64_t sub_1000DCA18()
{
  uint64_t v1 = *(void *)(v0 + 152);
  swift_beginAccess(v1 + 152, v0 + 16, 0LL, 0LL);
  uint64_t v2 = *(void *)(v1 + 152);
  *(void *)(v0 + 160) = v2;
  swift_bridgeObjectRetain(v2);
  return swift_task_switch(sub_1000DCA70, 0LL, 0LL);
}

uint64_t sub_1000DCA70()
{
  uint64_t v1 = v0[12];
  if (*(void *)(v0[20] + 16))
  {
    unint64_t v2 = sub_10030D124(v0[12]);
    if ((v3 & 1) != 0)
    {
      uint64_t v4 = v0[15];
      uint64_t v5 = v0[12];
      uint64_t v6 = v0[9];
      uint64_t v7 = v0[10];
      uint64_t v9 = v0[7];
      uint64_t v8 = v0[8];
      uint64_t v10 = *(void *)(*(void *)(v0[20] + 56) + 8 * v2);
      v0[21] = v10;
      swift_retain();
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
      uint64_t v11 = (void *)swift_task_alloc(48LL);
      v0[22] = (uint64_t)v11;
      v11[2] = v4;
      v11[3] = v9;
      v11[4] = v8;
      swift_retain();
      return swift_task_switch(sub_1000DCBA0, v10, 0LL);
    }

    uint64_t v1 = v0[12];
  }

  uint64_t v13 = v0[9];
  uint64_t v14 = v0[10];
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v1, v13);
  v0[23] = 0LL;
  id v15 = (uint64_t **)swift_task_alloc(dword_10099F614);
  v0[24] = (uint64_t)v15;
  *id v15 = v0;
  v15[1] = (uint64_t *)sub_1000DCC34;
  return sub_100093F10(v0[6]);
}

uint64_t sub_1000DCBA0()
{
  uint64_t v1 = v0[22];
  swift_release(v0[21]);
  swift_task_dealloc(v1);
  v0[23] = v0[21];
  unint64_t v2 = (uint64_t **)swift_task_alloc(dword_10099F614);
  v0[24] = (uint64_t)v2;
  *unint64_t v2 = v0;
  v2[1] = (uint64_t *)sub_1000DCC34;
  return sub_100093F10(v0[6]);
}

uint64_t sub_1000DCC34()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 152LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 192LL));
  return swift_task_switch(sub_1000DCC8C, v1, 0LL);
}

uint64_t sub_1000DCC8C()
{
  return swift_task_switch(sub_1000DCCCC, 0LL, 0LL);
}

uint64_t sub_1000DCCCC()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 104);
  swift_release(*(void *)(v0 + 184));
  sub_100015794(v1, (uint64_t *)&unk_1009A9C30);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

unint64_t sub_1000DCD34(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v5);
  uint64_t v7 = &v20[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = &v20[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v10);
  uint64_t v14 = &v20[-v13];
  sub_10001581C(a1, (uint64_t)v7, (uint64_t *)&unk_1009A9C30);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v9 + 48))(v7, 1LL, v8) == 1)
  {
    sub_100015794((uint64_t)v7, (uint64_t *)&unk_1009A9C30);
    return sub_100412AA4((uint64_t)_swiftEmptyArrayStorage);
  }

  else
  {
    sub_10002218C((uint64_t)v7, (uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
    uint64_t v16 = sub_100004AEC(&qword_1009A0E28);
    uint64_t inited = swift_initStackObject(v16, v20);
    *(_OWORD *)(inited + 16) = xmmword_1007E8290;
    strcpy((char *)(inited + 32), "updateRequired");
    *(_BYTE *)(inited + 47) = -18;
    *(void *)(inited + 48) = 0LL;
    *(_BYTE *)(inited + 56) = 1;
    *(void *)(inited + 64) = 0x6563637553736177LL;
    *(void *)(inited + 72) = 0xEA00000000007373LL;
    *(void *)(inited + 80) = 0LL;
    *(_BYTE *)(inited + 88) = 1;
    *(void *)(inited + 96) = 0x6F69737265566F74LL;
    *(void *)(inited + 104) = 0xE90000000000006ELL;
    sub_10001DC4C((uint64_t)v14, (uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
    if (!a3) {
      swift_bridgeObjectRetain(*(void *)&v12[*(int *)(v8 + 60) + 8]);
    }
    swift_bridgeObjectRetain(a3);
    sub_100018C68((uint64_t)v12, type metadata accessor for OwnedBeaconRecord);
    NSString v18 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    *(void *)(inited + 112) = v18;
    *(_BYTE *)(inited + 120) = 0;
    strcpy((char *)(inited + 128), "didShowAlert");
    *(_BYTE *)(inited + 141) = 0;
    *(_WORD *)(inited + 142) = -5120;
    *(void *)(inited + 144) = 0LL;
    *(_BYTE *)(inited + 152) = 1;
    unint64_t v15 = sub_100412AA4(inited);
    sub_100018C68((uint64_t)v14, type metadata accessor for OwnedBeaconRecord);
  }

  return v15;
}

void sub_1000DCFC0(uint64_t a1)
{
  uint64_t v2 = static os_log_type_t.error.getter(a1);
  uint64_t v3 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  uint64_t v4 = (void *)static OS_os_log.default.getter(v3);
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v6 = swift_allocObject(v5, 72LL, 7LL);
  *(_OWORD *)(v6 + 16) = xmmword_1007E67D0;
  uint64_t v11 = a1;
  swift_errorRetain(a1);
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  uint64_t v8 = String.init<A>(describing:)(&v11, v7);
  uint64_t v10 = v9;
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = sub_1000226F4();
  *(void *)(v6 + 32) = v8;
  *(void *)(v6 + 40) = v10;
  os_log(_:dso:log:_:_:)(v2, &_mh_execute_header, v4, "FirmwareUpdateProtocol update failed %@.", 40LL, 2LL, v6);

  swift_bridgeObjectRelease();
  Transaction.end()();
}

uint64_t sub_1000DD0CC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v28 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v26 = *(void *)(v7 - 8);
  uint64_t v27 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v26 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = static os_log_type_t.default.getter(v12);
  uint64_t v16 = sub_100022898(0LL, (unint64_t *)&qword_10099D930, &OBJC_CLASS___OS_os_log_ptr);
  unint64_t v17 = (void *)static OS_os_log.default.getter(v16);
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v17,  "FirmwareUpdateProtocol update success.",  38LL,  2LL,  _swiftEmptyArrayStorage);

  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v11 + 104))( v14,  enum case for DispatchQoS.QoSClass.default(_:),  v10);
  NSString v18 = (void *)static OS_dispatch_queue.global(qos:)(v14);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
  uint64_t v19 = swift_allocObject(&unk_10093D650, 32LL, 7LL);
  *(void *)(v19 + 16) = a1;
  *(void *)(v19 + 24) = a2;
  aBlock[4] = sub_1000DF68C;
  uint64_t v31 = v19;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  void aBlock[3] = &unk_10093D668;
  NSString v20 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v21 = swift_retain();
  static DispatchQoS.unspecified.getter(v21);
  uint64_t v29 = _swiftEmptyArrayStorage;
  uint64_t v22 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  unint64_t v24 = sub_100012FF8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v29, v23, v24, v4, v22);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v6, v20);
  _Block_release(v20);

  (*(void (**)(char *, uint64_t))(v28 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v26 + 8))(v9, v27);
  return swift_release(v31);
}

uint64_t sub_1000DD394(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + *(int *)(type metadata accessor for OwnedBeaconRecord(0LL) + 60));
  swift_bridgeObjectRetain(a3);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a2;
  v5[1] = a3;
  return result;
}

uint64_t sub_1000DD3E8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = (void *)(a1 + *(int *)(type metadata accessor for SharedBeaconRecord(0LL) + 40));
  swift_bridgeObjectRetain(a3);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v5 = a2;
  v5[1] = a3;
  return result;
}

uint64_t sub_1000DD43C( uint64_t a1, void (*a2)(void), uint64_t a3, void (*a4)(void), uint64_t a5, uint64_t *a6)
{
  uint64_t v10 = sub_100004AEC(a6);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v15 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v12, a6);
  if (swift_getEnumCaseMultiPayload(v12, v10) == 1)
  {
    uint64_t v13 = *v12;
    a4(*v12);
    return swift_errorRelease(v13);
  }

  else
  {
    a2();
    return sub_100015794((uint64_t)v12, a6);
  }

uint64_t sub_1000DD510(uint64_t a1)
{
  *(void *)(v1 + 16) = a1;
  return swift_task_switch(sub_1000DD528, 0LL, 0LL);
}

uint64_t sub_1000DD528()
{
  return swift_task_switch( sub_100094DE0,  *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_firmwareUpdateService),  0LL);
}

uint64_t sub_1000DD54C(unint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v100 = a2;
  uint64_t v101 = a3;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v98 = *(void *)(v6 - 8);
  uint64_t v99 = v6;
  __chkstk_darwin(v6);
  uint64_t v96 = v7;
  uint64_t v97 = (char *)&v87 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009A5990);
  __chkstk_darwin(v8);
  uint64_t v92 = (char *)&v87 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v108 = *(void *)(v10 - 8);
  uint64_t v109 = v10;
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v111 = (uint64_t)&v87 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v110 = (uint64_t)&v87 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v17 = (char *)&v87 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  NSString v20 = (char *)&v87 - v19;
  uint64_t v21 = __chkstk_darwin(v18);
  uint64_t v107 = (uint64_t)&v87 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v25 = (char *)&v87 - v24;
  __chkstk_darwin(v23);
  uint64_t v90 = (uint64_t)&v87 - v26;
  uint64_t v27 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v28 = __chkstk_darwin(v27);
  uint64_t v95 = (char *)&v87 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v28);
  uint64_t v31 = (char *)&v87 - v30;
  uint64_t v32 = type metadata accessor for Date(0LL);
  uint64_t v93 = *(void *)(v32 - 8);
  uint64_t v94 = v32;
  uint64_t v33 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v93 + 56);
  uint64_t v102 = v31;
  v89 = v33;
  uint64_t v34 = ((uint64_t (*)(char *, uint64_t, uint64_t))v33)(v31, 1LL, 1LL);
  uint64_t v35 = static os_log_type_t.default.getter(v34);
  if (qword_10099B790 != -1) {
LABEL_38:
  }
    swift_once(&qword_10099B790, sub_100651808);
  uint64_t v36 = qword_100A2B0A0;
  uint64_t v37 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v38 = swift_allocObject(v37, 72LL, 7LL);
  *(_OWORD *)(v38 + 16) = xmmword_1007E67D0;
  uint64_t v39 = UUID.uuidString.getter(v38);
  uint64_t v41 = v40;
  *(void *)(v38 + 56) = &type metadata for String;
  *(void *)(v38 + 64) = sub_1000226F4();
  *(void *)(v38 + 32) = v39;
  *(void *)(v38 + 40) = v41;
  os_log(_:dso:log:_:_:)( v35,  &_mh_execute_header,  v36,  "Retrieving firmware update state for beacon: %@",  47LL,  2LL,  v38);
  swift_bridgeObjectRelease();
  if (qword_10099B300 != -1) {
    swift_once(&qword_10099B300, sub_1003459EC);
  }
  uint64_t v42 = qword_100A2A6C8;
  uint64_t v91 = objc_autoreleasePoolPush();
  uint64_t v43 = sub_100004AEC((uint64_t *)&unk_1009AF790);
  OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, v42, v43);
  uint64_t v44 = v112;
  uint64_t v45 = (uint64_t)v102;
  uint64_t v46 = v109;
  if (v112[2] && (unint64_t v47 = sub_10030D124(a1), (v48 & 1) != 0))
  {
    uint64_t v49 = *(void *)(v44[7] + 8 * v47);
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRelease();
    uint64_t v50 = sub_1002FE5F8(v49);
    swift_bridgeObjectRelease();
    sub_1002FFE1C((uint64_t)v50);
    uint64_t v35 = v51;
    swift_release(v50);
    uint64_t v52 = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v112 = _swiftEmptyArrayStorage;
    uint64_t v106 = *(void *)(v35 + 16);
    if (v106)
    {
      unint64_t v87 = a1;
      uint64_t v88 = v4;
      a1 = 0LL;
      uint64_t v103 = v17;
      unint64_t v104 = v20;
      uint64_t v105 = v35;
      while (1)
      {
        if (a1 >= *(void *)(v35 + 16))
        {
          __break(1u);
          goto LABEL_38;
        }

        uint64_t v53 = (uint64_t)v20;
        unint64_t v17 = (char *)((*(unsigned __int8 *)(v108 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v108 + 80));
        uint64_t v4 = *(void *)(v108 + 72);
        sub_10001DC4C((uint64_t)&v17[v35 + v4 * a1], (uint64_t)v25, type metadata accessor for BeaconObservation);
        int v54 = v25[*(int *)(v46 + 24)];
        uint64_t v55 = v107;
        sub_10001DC4C((uint64_t)v25, v107, type metadata accessor for BeaconObservation);
        if (v54 == 7) {
          break;
        }
        int v56 = *(unsigned __int8 *)(v55 + *(int *)(v46 + 24));
        sub_100018C68(v55, type metadata accessor for BeaconObservation);
        sub_10001DC4C((uint64_t)v25, v53, type metadata accessor for BeaconObservation);
        if (v56 == 8) {
          goto LABEL_12;
        }
        int v61 = *(unsigned __int8 *)(v53 + *(int *)(v46 + 24));
        sub_100018C68(v53, type metadata accessor for BeaconObservation);
        uint64_t v57 = (uint64_t)v103;
        sub_10001DC4C((uint64_t)v25, (uint64_t)v103, type metadata accessor for BeaconObservation);
        BOOL v62 = v61 == 11;
        uint64_t v58 = v110;
        if (v62) {
          goto LABEL_13;
        }
        int v63 = *(unsigned __int8 *)(v57 + *(int *)(v46 + 24));
        sub_100018C68(v57, type metadata accessor for BeaconObservation);
        sub_10001DC4C((uint64_t)v25, v110, type metadata accessor for BeaconObservation);
        BOOL v62 = v63 == 6;
        uint64_t v58 = v110;
        if (v62) {
          goto LABEL_14;
        }
        int v64 = *(unsigned __int8 *)(v110 + *(int *)(v46 + 24));
        sub_100018C68(v110, type metadata accessor for BeaconObservation);
        NSString v20 = v104;
        if (v64 == 9) {
          goto LABEL_15;
        }
        sub_100018C68((uint64_t)v25, type metadata accessor for BeaconObservation);
LABEL_20:
        uint64_t v35 = v105;
        if (v106 == ++a1)
        {
          uint64_t v52 = (uint64_t)v112;
          a1 = v87;
          uint64_t v45 = (uint64_t)v102;
          goto LABEL_27;
        }
      }

      sub_100018C68(v55, type metadata accessor for BeaconObservation);
      sub_10001DC4C((uint64_t)v25, v53, type metadata accessor for BeaconObservation);
LABEL_12:
      sub_100018C68(v53, type metadata accessor for BeaconObservation);
      uint64_t v57 = (uint64_t)v103;
      sub_10001DC4C((uint64_t)v25, (uint64_t)v103, type metadata accessor for BeaconObservation);
      uint64_t v58 = v110;
LABEL_13:
      sub_100018C68(v57, type metadata accessor for BeaconObservation);
      sub_10001DC4C((uint64_t)v25, v58, type metadata accessor for BeaconObservation);
LABEL_14:
      sub_100018C68(v58, type metadata accessor for BeaconObservation);
      NSString v20 = v104;
LABEL_15:
      sub_10002218C((uint64_t)v25, v111, type metadata accessor for BeaconObservation);
      if ((swift_isUniquelyReferenced_nonNull_native(v52) & 1) == 0) {
        sub_100032AA8(0, *(void *)(v52 + 16) + 1LL, 1);
      }
      uint64_t v52 = (uint64_t)v112;
      unint64_t v60 = v112[2];
      unint64_t v59 = v112[3];
      if (v60 >= v59 >> 1)
      {
        sub_100032AA8(v59 > 1, v60 + 1, 1);
        uint64_t v52 = (uint64_t)v112;
      }

      *(void *)(v52 + 16) = v60 + 1;
      sub_10002218C(v111, (uint64_t)&v17[v52 + v60 * v4], type metadata accessor for BeaconObservation);
      uint64_t v46 = v109;
      goto LABEL_20;
    }

uint64_t sub_1000DDE08(void *a1, void *a2, uint64_t a3, uint64_t (*a4)(void *))
{
  if (a1)
  {
    id v5 = a1;
    NSString v6 = [v5 systemVersion];
    if (!v6)
    {
      static String._unconditionallyBridgeFromObjectiveC(_:)(0LL);
      NSString v6 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease();
    }

    [a2 setCurrentSystemVersion:v6];
  }

  else
  {
    type metadata accessor for FirmwareUpdateError(0LL);
    uint64_t v8 = v7;
    uint64_t v27 = 1LL;
    unint64_t v9 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
    uint64_t v10 = sub_100007864( &qword_10099C050,  (uint64_t (*)(uint64_t))type metadata accessor for FirmwareUpdateError,  (uint64_t)&unk_1007E2C64);
    _BridgedStoredNSError.init(_:userInfo:)(&v28, &v27, v9, v8, v10);
    uint64_t v11 = v28;
    NSString v6 = (NSString)_convertErrorToNSError(_:)(v28);

    [a2 setError:v6];
  }

  uint64_t v13 = static os_log_type_t.default.getter(v12);
  if (qword_10099B790 != -1) {
    swift_once(&qword_10099B790, sub_100651808);
  }
  uint64_t v14 = qword_100A2B0A0;
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v16 = swift_allocObject(v15, 112LL, 7LL);
  *(_OWORD *)(v16 + 16) = xmmword_1007E4750;
  uint64_t v17 = UUID.uuidString.getter(v16);
  uint64_t v19 = v18;
  *(void *)(v16 + 56) = &type metadata for String;
  unint64_t v20 = sub_1000226F4();
  *(void *)(v16 + 64) = v20;
  *(void *)(v16 + 32) = v17;
  *(void *)(v16 + 40) = v19;
  id v21 = [a2 description];
  uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(v21);
  uint64_t v24 = v23;

  *(void *)(v16 + 96) = &type metadata for String;
  *(void *)(v16 + 104) = v20;
  *(void *)(v16 + 72) = v22;
  *(void *)(v16 + 80) = v24;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "Firmware Update State for beacon %@ is %@", 41LL, 2LL, v16);
  swift_bridgeObjectRelease();
  return a4(a2);
}

void *sub_1000DE038(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = static os_log_type_t.default.getter(a1);
  if (qword_10099B790 != -1) {
    swift_once(&qword_10099B790, sub_100651808);
  }
  uint64_t v5 = qword_100A2B0A0;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_1007E4750;
  char v22 = a1;
  uint64_t v8 = sub_100004AEC(&qword_1009A0DD8);
  uint64_t v9 = String.init<A>(describing:)(&v22, v8);
  uint64_t v11 = v10;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v12 = sub_1000226F4();
  *(void *)(v7 + 64) = v12;
  *(void *)(v7 + 32) = v9;
  *(void *)(v7 + 40) = v11;
  uint64_t v13 = type metadata accessor for DateInterval(0LL);
  uint64_t v14 = sub_100007864( &qword_1009A0DE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval,  (uint64_t)&protocol conformance descriptor for DateInterval);
  uint64_t v15 = dispatch thunk of CustomStringConvertible.description.getter(v13, v14);
  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = v12;
  *(void *)(v7 + 72) = v15;
  *(void *)(v7 + 80) = v16;
  os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  v5,  "Retrieving beacons with observation type: %@, date interval: %@",  63LL,  2LL,  v7);
  swift_bridgeObjectRelease();
  if (qword_10099B300 != -1) {
    swift_once(&qword_10099B300, sub_1003459EC);
  }
  uint64_t v17 = sub_1006CD9E8(a1, a2);
  uint64_t v18 = *(void *)(v21 + 256);
  swift_retain();
  uint64_t v19 = sub_1002C428C((uint64_t)v17);
  swift_bridgeObjectRelease();
  swift_release(v18);
  return v19;
}

void sub_1000DE20C(void *a1@<X8>)
{
}

uint64_t sub_1000DE224()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1000DE2B8(void *a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_1000DDE08( a1,  *(void **)(v1 + 16),  v1 + v4,  *(uint64_t (**)(void *))(v1 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL)));
}

void *sub_1000DE310(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  uint64_t result = _swiftEmptyArrayStorage;
  if (v3)
  {
    specialized ContiguousArray.reserveCapacity(_:)(v3);
    unint64_t v6 = (void *)(a1 + 32);
    uint64_t v7 = *(void *)(a2 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_beaconStore);
    do
    {
      uint64_t v8 = v6[3];
      uint64_t v9 = v6[4];
      uint64_t v10 = sub_100012ED8(v6, v8);
      uint64_t v11 = sub_10054A858((uint64_t)v10, v7, v8, v9);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v11);
      uint64_t v12 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v12);
      uint64_t v13 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v12, v11);
      specialized ContiguousArray._endMutation()(v13);
      v6 += 5;
      --v3;
    }

    while (v3);
    return _swiftEmptyArrayStorage;
  }

  return result;
}

uint64_t sub_1000DE3EC( uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void (**a7)(void, void))
{
  uint64_t v10 = swift_allocObject(&unk_10093D3A8, 24LL, 7LL);
  *(void *)(v10 + 16) = a7;
  uint64_t v11 = _Block_copy(a7);
  uint64_t v12 = static os_log_type_t.default.getter(v11);
  if (qword_10099B790 != -1) {
    swift_once(&qword_10099B790, sub_100651808);
  }
  uint64_t v13 = qword_100A2B0A0;
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v15 = swift_allocObject(v14, 112LL, 7LL);
  *(_OWORD *)(v15 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(a6);
  uint64_t v16 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v17 = String.init<A>(describing:)(&ObjectType, v16);
  uint64_t v19 = v18;
  *(void *)(v15 + 56) = &type metadata for String;
  unint64_t v20 = sub_1000226F4();
  *(void *)(v15 + 32) = v17;
  *(void *)(v15 + 40) = v19;
  *(void *)(v15 + 96) = &type metadata for String;
  *(void *)(v15 + 104) = v20;
  *(void *)(v15 + 64) = v20;
  *(void *)(v15 + 72) = 0xD000000000000047LL;
  *(void *)(v15 + 80) = 0x8000000100853AF0LL;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "%@: %@", 6LL, 2LL, v15);
  swift_bridgeObjectRelease();
  if (a2 <= 6 && ((0x5Fu >> a2) & 1) != 0)
  {
    sub_100012ED8( (void *)(a6 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a6 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
    sub_1000D9044(a1, 0xD070B0A070806uLL >> (8 * a2), a3, a4, a5, (uint64_t)sub_1000DEB08, v10);
  }

  else
  {
    a7[2](a7, 0LL);
  }

  return swift_release(v10);
}

void sub_1000DE5D8(unint64_t a1, uint64_t a2, char *a3, uint64_t a4)
{
  uint64_t v7 = static os_log_type_t.default.getter(a1);
  if (qword_10099B790 != -1) {
    swift_once(&qword_10099B790, sub_100651808);
  }
  uint64_t v8 = qword_100A2B0A0;
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v10 = swift_allocObject(v9, 112LL, 7LL);
  *(_OWORD *)(v10 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(a3);
  uint64_t v11 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v12 = String.init<A>(describing:)(&ObjectType, v11);
  uint64_t v14 = v13;
  *(void *)(v10 + 56) = &type metadata for String;
  unint64_t v15 = sub_1000226F4();
  *(void *)(v10 + 32) = v12;
  *(void *)(v10 + 40) = v14;
  *(void *)(v10 + 96) = &type metadata for String;
  *(void *)(v10 + 104) = v15;
  *(void *)(v10 + 64) = v15;
  *(void *)(v10 + 72) = 0xD000000000000029LL;
  *(void *)(v10 + 80) = 0x8000000100853A60LL;
  os_log(_:dso:log:_:_:)(v7, &_mh_execute_header, v8, "%@: %@", 6LL, 2LL, v10);
  swift_bridgeObjectRelease();
  if (a1 <= 6 && ((0x5Fu >> a1) & 1) != 0)
  {
    sub_100012ED8( &a3[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation],  *(void *)&a3[OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24]);
    uint64_t v17 = sub_1000DE038(0xD070B0A070806uLL >> (8 * a1), a2);
    uint64_t v18 = a3;
    uint64_t v19 = (uint64_t)sub_1000DE310((uint64_t)v17, (uint64_t)v18);
    swift_bridgeObjectRelease();

    uint64_t v21 = static os_log_type_t.default.getter(v20);
    uint64_t v22 = qword_100A2B0A0;
    uint64_t v23 = swift_allocObject(v9, 72LL, 7LL);
    *(_OWORD *)(v23 + 16) = xmmword_1007E67D0;
    if ((unint64_t)v19 >> 62)
    {
      if (v19 < 0) {
        uint64_t v25 = v19;
      }
      else {
        uint64_t v25 = v19 & 0xFFFFFFFFFFFFFF8LL;
      }
      swift_bridgeObjectRetain(v19);
      uint64_t v24 = _CocoaArrayWrapper.endIndex.getter(v25);
      swift_bridgeObjectRelease();
    }

    else
    {
      uint64_t v24 = *(void *)((v19 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    }

    *(void *)(v23 + 56) = &type metadata for Int;
    *(void *)(v23 + 64) = &protocol witness table for Int;
    *(void *)(v23 + 32) = v24;
    os_log(_:dso:log:_:_:)(v21, &_mh_execute_header, v22, "Returning %i records", a2);
    swift_bridgeObjectRelease();
    sub_100022898(0LL, (unint64_t *)&unk_1009A0B20, &OBJC_CLASS___SPBeacon_ptr);
    v16.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, Class))(a4 + 16))(a4, v16.super.isa);
    swift_bridgeObjectRelease();
  }

  else
  {
    sub_100022898(0LL, (unint64_t *)&unk_1009A0B20, &OBJC_CLASS___SPBeacon_ptr);
    v16.super.Class isa = Array._bridgeToObjectiveC()().super.isa;
    (*(void (**)(uint64_t, Class))(a4 + 16))(a4, v16.super.isa);
  }
}

uint64_t sub_1000DE8DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = static os_log_type_t.default.getter(a1);
  if (qword_10099B790 != -1) {
    swift_once(&qword_10099B790, sub_100651808);
  }
  uint64_t v5 = qword_100A2B0A0;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v7 = swift_allocObject(v6, 112LL, 7LL);
  *(_OWORD *)(v7 + 16) = xmmword_1007E4750;
  uint64_t ObjectType = swift_getObjectType(a1);
  uint64_t v8 = sub_100004AEC(&qword_1009A9C10);
  uint64_t v9 = String.init<A>(describing:)(&ObjectType, v8);
  uint64_t v11 = v10;
  *(void *)(v7 + 56) = &type metadata for String;
  unint64_t v12 = sub_1000226F4();
  *(void *)(v7 + 32) = v9;
  *(void *)(v7 + 40) = v11;
  *(void *)(v7 + 96) = &type metadata for String;
  *(void *)(v7 + 104) = v12;
  *(void *)(v7 + 64) = v12;
  *(void *)(v7 + 72) = 0xD000000000000038LL;
  *(void *)(v7 + 80) = 0x80000001008539C0LL;
  os_log(_:dso:log:_:_:)(v4, &_mh_execute_header, v5, "%@: %@", 6LL, 2LL, v7);
  swift_bridgeObjectRelease();
  uint64_t v13 = sub_100012ED8( (void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation),  *(void *)(a1 + OBJC_IVAR____TtC12searchpartyd23BeaconManagerTrampoline_implementation + 24));
  uint64_t v14 = *v13;
  uint64_t v15 = static os_log_type_t.default.getter(v13);
  os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  qword_100A2B0A0,  "Initiating firmware update check",  32LL,  2LL,  _swiftEmptyArrayStorage);
  type metadata accessor for Transaction(0LL);
  swift_retain();
  static Transaction.asyncTask(name:block:)( "initiateFirmwareUpdateForAllEligibleBeacons",  43LL,  2LL,  &unk_1009A0DD0,  v14);
  swift_release(v14);
  return (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a2, 1LL);
}

uint64_t sub_1000DEAAC()
{
  uint64_t v2 = (void *)swift_task_alloc(dword_1009A0DCC);
  *(void *)(v1 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_100015D58;
  v2[2] = v0;
  return swift_task_switch(sub_1000DD528, 0LL, 0LL);
}

uint64_t sub_1000DEB08(char a1)
{
  return sub_10065A1E0(a1, *(void *)(v1 + 16));
}

uint64_t sub_1000DEB10()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 & 0xFFFFFFFFFFFFFFF8LL) + v0;
  unint64_t v8 = ((v5 & 0xFFFFFFFFFFFFFFF8LL) + 31) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v7 + 16));
  swift_errorRelease(*(void *)(v0 + v8));
  swift_release(*(void *)(v0 + v9 + 8));
  return swift_deallocObject(v0, v9 + 16, v6);
}

uint64_t sub_1000DEBCC()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = v2 + *(void *)(v1 + 64);
  return sub_1000D9308( *(void *)(v0 + 16),  v0 + v2,  *(_BYTE *)(v0 + v3),  *(void *)((v3 & 0xFFFFFFFFFFFFFFF8LL) + v0 + 8),  *(void *)((v3 & 0xFFFFFFFFFFFFFFF8LL) + v0 + 16),  *(void *)(v0 + (((v3 & 0xFFFFFFFFFFFFFFF8LL) + 31) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + (((((v3 & 0xFFFFFFFFFFFFFFF8LL) + 31) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + (((((v3 & 0xFFFFFFFFFFFFFFF8LL) + 31) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)
                     + 8));
}

uint64_t sub_1000DEC30(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1000DEC40(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1000DEC48()
{
  return swift_deallocObject(v0, 33LL, 7LL);
}

uint64_t sub_1000DEC6C()
{
  return (*(uint64_t (**)(void))(v0 + 16))(*(unsigned __int8 *)(v0 + 32));
}

uint64_t sub_1000DEC94(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = &v19[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (a4) {

  }
  uint64_t v12 = type metadata accessor for UUID(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 16LL))(v11, a2, v12);
  static Date.trustedNow.getter((uint64_t)&v11[*(int *)(v8 + 20)]);
  v11[*(int *)(v8 + 24)] = a3;
  uint64_t v13 = sub_100004AEC(&qword_10099D318);
  uint64_t v14 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v15 = (v14 + 32) & ~v14;
  uint64_t v16 = swift_allocObject(v13, v15 + *(void *)(v9 + 72), v14 | 7);
  *(_OWORD *)(v16 + 16) = xmmword_1007E67D0;
  sub_10001DC4C((uint64_t)v11, v16 + v15, type metadata accessor for BeaconObservation);
  uint64_t v17 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v17);
  *(void *)&v19[-32] = a1;
  *(void *)&v19[-24] = v16;
  *(void *)&v19[-16] = 0LL;
  *(void *)&v19[-8] = 0LL;
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.BeaconObservationStore.save",  57LL,  2LL,  sub_1000DF788);
  swift_bridgeObjectRelease();
  return sub_100018C68((uint64_t)v11, type metadata accessor for BeaconObservation);
}

void sub_1000DEE24()
{
}

uint64_t sub_1000DEE40()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + 7) & 0xFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v5 + 31) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v7 + 8));
  swift_errorRelease(*(void *)(v0 + v8));
  return swift_deallocObject(v0, v8 + 8, v6);
}

uint64_t sub_1000DEEE4()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = v3 + *(void *)(v2 + 64);
  unint64_t v5 = (v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = *(void *)(v0 + 16);
  uint64_t v7 = v0 + v3;
  uint64_t v8 = *(void *)(v0 + v5);
  uint64_t v9 = *(void *)(v0 + v5 + 8);
  char v10 = *(_BYTE *)(v0 + v5 + 16);
  uint64_t v11 = *(void *)(v0 + ((v4 + 31) & 0xFFFFFFFFFFFFF8LL));
  uint64_t v12 = (void *)swift_task_alloc(dword_1009A0DEC);
  *(void *)(v1 + 16) = v12;
  *uint64_t v12 = v1;
  v12[1] = sub_100015D58;
  return sub_1000DBF6C(v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1000DEF9C()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v3;
  uint64_t v6 = (uint64_t *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v9 = (void *)swift_task_alloc(dword_1009A0DFC);
  *(void *)(v1 + 16) = v9;
  *uint64_t v9 = v1;
  v9[1] = sub_100015D58;
  return sub_1000DC7E4(v4, v5, v7, v8);
}

uint64_t sub_1000DF034()
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((v2 + 24) & ~v2);
  uint64_t v5 = (void *)swift_task_alloc(dword_1009A0E0C);
  *(void *)(v1 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100015D58;
  return sub_1000DA62C(v3, v4);
}

void *sub_1000DF0A0(void *a1)
{
  return a1;
}

uint64_t sub_1000DF0D8()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_bridgeObjectRelease(*(void *)(v0 + v6 + 8));
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1000DF16C()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = v0 + v3;
  unint64_t v6 = (uint64_t *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  uint64_t v9 = (void *)swift_task_alloc(dword_1009A0E1C);
  *(void *)(v1 + 16) = v9;
  *uint64_t v9 = v1;
  v9[1] = sub_100015D58;
  return sub_1000DBAEC(v4, v5, v7, v8);
}

uint64_t sub_1000DF200(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099CA60);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000DF254@<X0>(BOOL *a1@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8) + 80LL);
  uint64_t result = sub_1002B938C(v1 + ((v3 + 24) & ~v3), *(void *)(v1 + 16));
  *a1 = result == 0;
  return result;
}

uint64_t sub_1000DF2A4()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release(*(void *)(v0 + 16));
  uint64_t v6 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v7 = v0 + v4 + v1[5];
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  char v10 = *(void (**)(uint64_t, uint64_t))(v9 + 8);
  v10(v7, v8);
  uint64_t v11 = v0 + v4 + v1[6];
  uint64_t v12 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v11, v12))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v10(v11, v8);
      uint64_t v21 = v5;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v5 = v21;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v13 = v6 + v1[7];
  uint64_t v14 = v6 + v1[8];
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  sub_100016F9C(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  uint64_t v16 = (uint64_t *)(v6 + v1[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v6 + v1[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v6 + v1[12]), *(void *)(v6 + v1[12] + 8));
  sub_100016F9C(*(void *)(v6 + v1[13]), *(void *)(v6 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v4 + v5, v3 | 7);
}

uint64_t sub_1000DF544@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8) + 80LL);
  return sub_1000DB634(v1 + ((v3 + 24) & ~v3), a1);
}

unint64_t sub_1000DF584()
{
  return sub_1000DB754( *(void **)(v0 + 16),  *(void *)(v0 + 24),  *(void **)(v0 + 32),  *(unsigned __int8 *)(v0 + 40),  *(unsigned __int8 *)(v0 + 41));
}

void sub_1000DF598(uint64_t a1)
{
}

uint64_t sub_1000DF5A4()
{
  return sub_1000DD0CC(*(void *)(v0 + 16), *(void *)(v0 + 24));
}

uint64_t sub_1000DF5AC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000DF5D0(uint64_t a1)
{
  return sub_1000DD3E8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000DF5DC(uint64_t a1)
{
  return sub_1000DD43C( a1,  *(void (**)(void))(v1 + 16),  *(void *)(v1 + 24),  *(void (**)(void))(v1 + 32),  *(void *)(v1 + 40),  &qword_1009A0E30);
}

uint64_t sub_1000DF600(uint64_t a1)
{
  return sub_1000DD394(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000DF60C()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1000DF638(uint64_t a1)
{
  return sub_1000DD43C( a1,  *(void (**)(void))(v1 + 16),  *(void *)(v1 + 24),  *(void (**)(void))(v1 + 32),  *(void *)(v1 + 40),  (uint64_t *)&unk_1009B0830);
}

uint64_t sub_1000DF660()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

void sub_1000DF68C()
{
}

uint64_t sub_1000DF6C0()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1000DF734@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  return sub_100504F30(v1 + ((v3 + 24) & ~v3), a1);
}

unint64_t sub_1000DF77C()
{
  return sub_1000DCD34(v0[2], v0[3], v0[4]);
}

uint64_t sub_1000DF788(uint64_t a1)
{
  return sub_100346D78(a1, v1[2], v1[3], v1[4], v1[5]);
}

void sub_1000DF7A4(uint64_t a1)
{
}

uint64_t sub_1000DF7AC()
{
  swift_release(*(void *)(v0 + 32));
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1000DF7D8(char a1)
{
  return sub_1000D81A4(a1, *(char **)(v1 + 16), *(uint64_t (**)(void *))(v1 + 24));
}

void sub_1000DF7E4(void *a1@<X8>)
{
}

uint64_t sub_1000DF7FC()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1000DF838(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v9 = v1[6];
  uint64_t v8 = v1[7];
  char v10 = (void *)swift_task_alloc(dword_1009A0E44);
  *(void *)(v2 + 16) = v10;
  void *v10 = v2;
  v10[1] = sub_1000159BC;
  return sub_1000D8A44(a1, v4, v5, v6, v7, v9, v8);
}

uint64_t sub_1000DF8C4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1000DF8E8()
{
  return (*(uint64_t (**)(uint64_t))(v0 + 16))(1LL);
}

void sub_1000DF920()
{
}

uint64_t sub_1000DF940()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A180);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2A180);
  if (qword_10099B0F8 != -1) {
    swift_once(&qword_10099B0F8, sub_1000E15A8);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_100A2A198);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_1000DF9D0(uint64_t a1)
{
  v2[29] = a1;
  v2[30] = v1;
  uint64_t v3 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0LL);
  v2[31] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[32] = v4;
  v2[33] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v2[34] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[35] = v6;
  v2[36] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ContinuousClock.Instant(0LL);
  v2[37] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[38] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[39] = swift_task_alloc(v9);
  v2[40] = swift_task_alloc(v9);
  v2[41] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for ContinuousClock(0LL);
  v2[42] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[43] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[44] = swift_task_alloc(v12);
  v2[45] = swift_task_alloc(v12);
  return swift_task_switch(sub_1000DFAD4, v1, 0LL);
}

uint64_t sub_1000DFAD4()
{
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  *(void *)(v0 + 200) = 0x7365547265646E75LL;
  *(void *)(v0 + 208) = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)( (void *)(v0 + 392),  v0 + 200,  sub_10000A71C,  0LL,  &type metadata for Bool);
  uint64_t v1 = swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v0 + 392) & 1) != 0)
  {
    uint64_t v2 = type metadata accessor for GenericError(0LL);
    uint64_t v3 = sub_100015C48( (unint64_t *)&qword_10099CF78,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for GenericError,  (uint64_t)&protocol conformance descriptor for GenericError);
    swift_allocError(v2, v3, 0LL, 0LL);
    *uint64_t v4 = 0xD00000000000001ELL;
    v4[1] = 0x8000000100854000LL;
    uint64_t v5 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v2 - 8) + 104LL))( v4,  enum case for GenericError.error(_:),  v2);
    swift_willThrow(v5);
  }

  else
  {
    ContinuousClock.init()(v1);
    if (qword_10099B0F0 != -1) {
      swift_once(&qword_10099B0F0, sub_1000DF940);
    }
    uint64_t v6 = sub_10000A720(*(void *)(v0 + 272), (uint64_t)qword_100A2A180);
    *(void *)(v0 + 368) = v6;
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      unint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Retrieving fmipAccount info...", v9, 2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    ContinuousClock.now.getter(v10);
    id v11 = [(id)objc_opt_self(ACAccountStore) defaultStore];
    *(void *)(v0 + 376) = v11;
    if (v11)
    {
      unint64_t v12 = v11;
      uint64_t v13 = v0 + 16;
      *(void *)(v0 + 56) = v0 + 216;
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 24) = sub_1000DFE4C;
      uint64_t v14 = swift_continuation_init(v0 + 16, 1LL);
      *(void *)(v0 + 160) = _NSConcreteStackBlock;
      uint64_t v15 = (void *)(v0 + 160);
      v15[1] = 0x40000000LL;
      v15[2] = sub_1000E03E8;
      void v15[3] = &unk_10093D7E8;
      v15[4] = v14;
      objc_msgSend(v12, "aa_primaryAppleAccountWithCompletion:", v15);
      return swift_continuation_await(v13);
    }

    uint64_t v17 = *(void *)(v0 + 360);
    uint64_t v18 = *(void *)(v0 + 336);
    uint64_t v19 = *(void *)(v0 + 344);
    uint64_t v20 = *(void *)(v0 + 328);
    uint64_t v21 = *(void *)(v0 + 296);
    uint64_t v22 = *(void *)(v0 + 304);
    unint64_t v23 = sub_1000E1628();
    uint64_t v24 = swift_allocError(&type metadata for AccountService.Error, v23, 0LL, 0LL);
    *uint64_t v25 = 0LL;
    v25[1] = 0LL;
    swift_willThrow(v24);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  }

  uint64_t v26 = *(void *)(v0 + 352);
  uint64_t v28 = *(void *)(v0 + 320);
  uint64_t v27 = *(void *)(v0 + 328);
  uint64_t v29 = *(void *)(v0 + 312);
  uint64_t v30 = *(void *)(v0 + 288);
  uint64_t v31 = *(void *)(v0 + 264);
  swift_task_dealloc(*(void *)(v0 + 360));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000DFE4C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 384) = v2;
  if (v2) {
    uint64_t v3 = sub_1000E0318;
  }
  else {
    uint64_t v3 = sub_1000DFEAC;
  }
  return swift_task_switch(v3, *(void *)(v1 + 240), 0LL);
}

uint64_t sub_1000DFEAC(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 216);
  if (!v2)
  {

    goto LABEL_5;
  }

  if ((static SystemInfo.underTest.getter(a1) & 1) != 0)
  {

LABEL_5:
    uint64_t v3 = *(void *)(v1 + 360);
    uint64_t v4 = *(void *)(v1 + 336);
    uint64_t v5 = *(void *)(v1 + 344);
    uint64_t v6 = *(void *)(v1 + 328);
    uint64_t v7 = *(void *)(v1 + 296);
    uint64_t v8 = *(void *)(v1 + 304);
    unint64_t v9 = sub_1000E1628();
    uint64_t v10 = swift_allocError(&type metadata for AccountService.Error, v9, 0LL, 0LL);
    *id v11 = 0LL;
    v11[1] = 0LL;
    swift_willThrow(v10);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    uint64_t v43 = *(void *)(v1 + 352);
    uint64_t v45 = *(void *)(v1 + 320);
    uint64_t v44 = *(void *)(v1 + 328);
    uint64_t v46 = *(void *)(v1 + 312);
    uint64_t v47 = *(void *)(v1 + 288);
    uint64_t v48 = *(void *)(v1 + 264);
    swift_task_dealloc(*(void *)(v1 + 360));
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    uint64_t v49 = *(uint64_t (**)(void))(v1 + 8);
    return v49();
  }

  uint64_t v69 = v2;
  uint64_t v72 = *(void *)(v1 + 360);
  uint64_t v13 = *(void *)(v1 + 344);
  uint64_t v12 = *(void *)(v1 + 352);
  uint64_t v15 = *(void *)(v1 + 328);
  uint64_t v14 = *(void *)(v1 + 336);
  uint64_t v16 = *(void *)(v1 + 320);
  uint64_t v18 = *(void *)(v1 + 296);
  uint64_t v17 = *(void *)(v1 + 304);
  (*(void (**)(void, void, void))(*(void *)(v1 + 280) + 16LL))( *(void *)(v1 + 288),  *(void *)(v1 + 368),  *(void *)(v1 + 272));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v15, v18);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v72, v14);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.default.getter(v20);
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v24 = *(void *)(v1 + 344);
  uint64_t v23 = *(void *)(v1 + 352);
  uint64_t v25 = *(void *)(v1 + 320);
  if (v22)
  {
    uint64_t v65 = *(void *)(v1 + 344);
    uint64_t v26 = *(void *)(v1 + 312);
    uint64_t v61 = *(void *)(v1 + 304);
    uint64_t v27 = *(void *)(v1 + 296);
    uint64_t v73 = *(void *)(v1 + 288);
    uint64_t v28 = *(void *)(v1 + 264);
    uint64_t v67 = *(void *)(v1 + 280);
    uint64_t v68 = *(void *)(v1 + 272);
    uint64_t v29 = *(void *)(v1 + 256);
    uint64_t v60 = *(void *)(v1 + 248);
    os_log_type_t type = v21;
    uint64_t v62 = *(void *)(v1 + 336);
    log = v20;
    uint64_t v30 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v64 = swift_slowAlloc(32LL, -1LL);
    uint64_t v75 = v64;
    *(_DWORD *)uint64_t v30 = 136315138;
    uint64_t v31 = ContinuousClock.now.getter(v64);
    static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v31);
    uint64_t v32 = sub_100015C48( &qword_1009AE520,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant,  (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
    uint64_t v33 = static Duration.description<A>(_:_:units:)(v25, v26, v28, v27, v32);
    uint64_t v59 = v23;
    unint64_t v35 = v34;
    (*(void (**)(uint64_t, uint64_t))(v29 + 8))(v28, v60);
    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v61 + 8);
    v36(v26, v27);
    *(void *)(v1 + 224) = sub_1003F11D4(v33, v35, &v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 224, v1 + 232, v30 + 4, v30 + 12);
    swift_bridgeObjectRelease();
    v36(v25, v27);
    uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v65 + 8);
    v37(v59, v62);
    _os_log_impl((void *)&_mh_execute_header, log, type, "aa_primaryAppleAccount fetch duration: %s", v30, 0xCu);
    swift_arrayDestroy(v64, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v64, -1LL, -1LL);
    swift_slowDealloc(v30, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v73, v68);
  }

  else
  {
    uint64_t v38 = *(void *)(v1 + 336);
    uint64_t v40 = *(void *)(v1 + 280);
    uint64_t v39 = *(void *)(v1 + 288);
    uint64_t v41 = *(void *)(v1 + 272);
    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 + 304) + 8LL);
    v36(*(void *)(v1 + 320), *(void *)(v1 + 296));
    uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v37(v23, v38);

    (*(void (**)(uint64_t, uint64_t))(v40 + 8))(v39, v41);
  }

  sub_1000E166C(v69, *(void **)(v1 + 376), (uint64_t *)(v1 + 80));
  uint64_t v42 = *(void *)(v1 + 360);
  uint64_t v51 = *(void *)(v1 + 352);
  uint64_t v53 = *(void *)(v1 + 328);
  uint64_t v52 = *(void *)(v1 + 336);
  uint64_t v54 = *(void *)(v1 + 320);
  uint64_t v70 = *(void *)(v1 + 312);
  uint64_t v71 = *(void *)(v1 + 288);
  uint64_t v74 = *(void *)(v1 + 264);
  uint64_t v55 = *(_OWORD **)(v1 + 232);
  v36(v53, *(void *)(v1 + 296));
  v37(v42, v52);
  *uint64_t v55 = *(_OWORD *)(v1 + 80);
  __int128 v56 = *(_OWORD *)(v1 + 96);
  __int128 v57 = *(_OWORD *)(v1 + 112);
  __int128 v58 = *(_OWORD *)(v1 + 144);
  v55[3] = *(_OWORD *)(v1 + 128);
  v55[4] = v58;
  v55[1] = v56;
  v55[2] = v57;
  swift_task_dealloc(v42);
  swift_task_dealloc(v51);
  swift_task_dealloc(v53);
  swift_task_dealloc(v54);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v74);
  uint64_t v49 = *(uint64_t (**)(void))(v1 + 8);
  return v49();
}

uint64_t sub_1000E0318()
{
  uint64_t v1 = *(void **)(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 360);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v5 = *(void *)(v0 + 328);
  uint64_t v6 = *(void *)(v0 + 296);
  uint64_t v7 = *(void *)(v0 + 304);
  swift_willThrow();

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  uint64_t v8 = *(void *)(v0 + 352);
  uint64_t v10 = *(void *)(v0 + 320);
  uint64_t v9 = *(void *)(v0 + 328);
  uint64_t v11 = *(void *)(v0 + 312);
  uint64_t v12 = *(void *)(v0 + 288);
  uint64_t v13 = *(void *)(v0 + 264);
  swift_task_dealloc(*(void *)(v0 + 360));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E03E8(uint64_t a1, void *a2, void *a3)
{
  uint64_t v3 = *(void *)(a1 + 32);
  if (a3)
  {
    uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v6 = swift_allocError(v5, &protocol self-conformance witness table for Error, 0LL, 0LL);
    *uint64_t v7 = a3;
    id v8 = a3;
    return swift_continuation_throwingResumeWithError(v3, v6);
  }

  else
  {
    uint64_t v12 = a2;
    uint64_t v10 = *(void *)(*(void *)(v3 + 64) + 40LL);
    id v11 = a2;
    sub_100015750((uint64_t)&v12, v10, &qword_1009A0F28);
    return swift_continuation_throwingResume(v3);
  }

uint64_t sub_1000E0490(uint64_t a1)
{
  v2[19] = a1;
  v2[20] = v1;
  uint64_t v3 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0LL);
  v2[21] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[22] = v4;
  v2[23] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v2[24] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[25] = v6;
  v2[26] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ContinuousClock.Instant(0LL);
  v2[27] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[28] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[29] = swift_task_alloc(v9);
  v2[30] = swift_task_alloc(v9);
  v2[31] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for ContinuousClock(0LL);
  v2[32] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[33] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[34] = swift_task_alloc(v12);
  v2[35] = swift_task_alloc(v12);
  return swift_task_switch(sub_1000E0594, v1, 0LL);
}

uint64_t sub_1000E0594()
{
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  *(void *)(v0 + 120) = 0x7365547265646E75LL;
  *(void *)(v0 + 128) = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)( (void *)(v0 + 312),  v0 + 120,  sub_10000A71C,  0LL,  &type metadata for Bool);
  uint64_t v1 = swift_bridgeObjectRelease();
  if ((*(_BYTE *)(v0 + 312) & 1) != 0)
  {
    uint64_t v2 = type metadata accessor for GenericError(0LL);
    uint64_t v3 = sub_100015C48( (unint64_t *)&qword_10099CF78,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for GenericError,  (uint64_t)&protocol conformance descriptor for GenericError);
    swift_allocError(v2, v3, 0LL, 0LL);
    *uint64_t v4 = 0xD00000000000001ELL;
    v4[1] = 0x8000000100854000LL;
    uint64_t v5 = (*(uint64_t (**)(void *, void, uint64_t))(*(void *)(v2 - 8) + 104LL))( v4,  enum case for GenericError.error(_:),  v2);
    swift_willThrow(v5);
  }

  else
  {
    ContinuousClock.init()(v1);
    if (qword_10099B0F0 != -1) {
      swift_once(&qword_10099B0F0, sub_1000DF940);
    }
    uint64_t v6 = sub_10000A720(*(void *)(v0 + 192), (uint64_t)qword_100A2A180);
    *(void *)(v0 + 288) = v6;
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      unint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Retrieving searchpartyAccount info...", v9, 2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    ContinuousClock.now.getter(v10);
    id v11 = [(id)objc_opt_self(ACAccountStore) defaultStore];
    *(void *)(v0 + 296) = v11;
    if (v11)
    {
      unint64_t v12 = v11;
      uint64_t v13 = v0 + 16;
      *(void *)(v0 + 56) = v0 + 136;
      *(void *)(v0 + 16) = v0;
      *(void *)(v0 + 24) = sub_1000E090C;
      uint64_t v14 = swift_continuation_init(v0 + 16, 1LL);
      *(void *)(v0 + 80) = _NSConcreteStackBlock;
      uint64_t v15 = (void *)(v0 + 80);
      v15[1] = 0x40000000LL;
      v15[2] = sub_1000E03E8;
      void v15[3] = &unk_10093D7D0;
      v15[4] = v14;
      objc_msgSend(v12, "aa_primaryAppleAccountWithCompletion:", v15);
      return swift_continuation_await(v13);
    }

    uint64_t v17 = *(void *)(v0 + 280);
    uint64_t v18 = *(void *)(v0 + 256);
    uint64_t v19 = *(void *)(v0 + 264);
    uint64_t v20 = *(void *)(v0 + 248);
    uint64_t v21 = *(void *)(v0 + 216);
    uint64_t v22 = *(void *)(v0 + 224);
    unint64_t v23 = sub_1000E1628();
    uint64_t v24 = swift_allocError(&type metadata for AccountService.Error, v23, 0LL, 0LL);
    *uint64_t v25 = 0LL;
    v25[1] = 0LL;
    swift_willThrow(v24);
    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v20, v21);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v17, v18);
  }

  uint64_t v26 = *(void *)(v0 + 272);
  uint64_t v28 = *(void *)(v0 + 240);
  uint64_t v27 = *(void *)(v0 + 248);
  uint64_t v29 = *(void *)(v0 + 232);
  uint64_t v30 = *(void *)(v0 + 208);
  uint64_t v31 = *(void *)(v0 + 184);
  swift_task_dealloc(*(void *)(v0 + 280));
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000E090C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 48);
  *(void *)(*v0 + 304) = v2;
  if (v2) {
    uint64_t v3 = sub_1000E0DBC;
  }
  else {
    uint64_t v3 = sub_1000E096C;
  }
  return swift_task_switch(v3, *(void *)(v1 + 160), 0LL);
}

uint64_t sub_1000E096C(uint64_t a1)
{
  uint64_t v2 = *(void **)(v1 + 136);
  if (!v2)
  {

    goto LABEL_5;
  }

  if ((static SystemInfo.underTest.getter(a1) & 1) != 0)
  {

LABEL_5:
    uint64_t v3 = *(void *)(v1 + 280);
    uint64_t v4 = *(void *)(v1 + 256);
    uint64_t v5 = *(void *)(v1 + 264);
    uint64_t v6 = *(void *)(v1 + 248);
    uint64_t v7 = *(void *)(v1 + 216);
    uint64_t v8 = *(void *)(v1 + 224);
    unint64_t v9 = sub_1000E1628();
    uint64_t v10 = swift_allocError(&type metadata for AccountService.Error, v9, 0LL, 0LL);
    *id v11 = 0LL;
    v11[1] = 0LL;
    swift_willThrow(v10);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v6, v7);
    (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
    uint64_t v43 = *(void *)(v1 + 272);
    uint64_t v45 = *(void *)(v1 + 240);
    uint64_t v44 = *(void *)(v1 + 248);
    uint64_t v46 = *(void *)(v1 + 232);
    uint64_t v47 = *(void *)(v1 + 208);
    uint64_t v48 = *(void *)(v1 + 184);
    swift_task_dealloc(*(void *)(v1 + 280));
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    uint64_t v49 = *(uint64_t (**)(void))(v1 + 8);
    return v49();
  }

  uint64_t v66 = v2;
  uint64_t v67 = *(void *)(v1 + 280);
  uint64_t v12 = *(void *)(v1 + 264);
  uint64_t v13 = *(void *)(v1 + 272);
  uint64_t v15 = *(void *)(v1 + 248);
  uint64_t v14 = *(void *)(v1 + 256);
  uint64_t v16 = *(void *)(v1 + 240);
  uint64_t v18 = *(void *)(v1 + 216);
  uint64_t v17 = *(void *)(v1 + 224);
  (*(void (**)(void, void, void))(*(void *)(v1 + 200) + 16LL))( *(void *)(v1 + 208),  *(void *)(v1 + 288),  *(void *)(v1 + 192));
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 16))(v16, v15, v18);
  uint64_t v19 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 16))(v13, v67, v14);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.default.getter(v20);
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v24 = *(void *)(v1 + 264);
  uint64_t v23 = *(void *)(v1 + 272);
  uint64_t v25 = *(void *)(v1 + 240);
  if (v22)
  {
    uint64_t v60 = *(void *)(v1 + 272);
    uint64_t v26 = *(void *)(v1 + 232);
    uint64_t v59 = *(void *)(v1 + 224);
    uint64_t v27 = *(void *)(v1 + 216);
    uint64_t v68 = *(void *)(v1 + 208);
    uint64_t v28 = *(void *)(v1 + 184);
    uint64_t v64 = *(void *)(v1 + 200);
    uint64_t v65 = *(void *)(v1 + 192);
    uint64_t v57 = *(void *)(v1 + 176);
    uint64_t v58 = *(void *)(v1 + 168);
    os_log_type_t type = v21;
    uint64_t v61 = *(void *)(v1 + 256);
    uint64_t v29 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v62 = swift_slowAlloc(32LL, -1LL);
    uint64_t v70 = v62;
    *(_DWORD *)uint64_t v29 = 136315138;
    uint64_t v30 = ContinuousClock.now.getter(v62);
    static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v30);
    uint64_t v31 = sub_100015C48( &qword_1009AE520,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant,  (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
    uint64_t v32 = static Duration.description<A>(_:_:units:)(v25, v26, v28, v27, v31);
    uint64_t v33 = v20;
    unint64_t v35 = v34;
    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v28, v58);
    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(v59 + 8);
    v36(v26, v27);
    *(void *)(v1 + 144) = sub_1003F11D4(v32, v35, &v70);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 144, v1 + 152, v29 + 4, v29 + 12);
    swift_bridgeObjectRelease();
    v36(v25, v27);
    uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v37(v60, v61);
    _os_log_impl((void *)&_mh_execute_header, v33, type, "aa_primaryAppleAccount fetch duration: %s", v29, 0xCu);
    swift_arrayDestroy(v62, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v62, -1LL, -1LL);
    swift_slowDealloc(v29, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v64 + 8))(v68, v65);
  }

  else
  {
    uint64_t v38 = *(void *)(v1 + 256);
    uint64_t v39 = *(void *)(v1 + 200);
    uint64_t v40 = *(void *)(v1 + 208);
    uint64_t v41 = *(void *)(v1 + 192);
    uint64_t v36 = *(void (**)(uint64_t, uint64_t))(*(void *)(v1 + 224) + 8LL);
    v36(*(void *)(v1 + 240), *(void *)(v1 + 216));
    uint64_t v37 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v37(v23, v38);

    (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v40, v41);
  }

  sub_1000E0E8C(*(id *)(v1 + 296), v66, *(uint64_t **)(v1 + 152));
  uint64_t v42 = *(void *)(v1 + 280);
  uint64_t v51 = *(void *)(v1 + 272);
  uint64_t v53 = *(void *)(v1 + 248);
  uint64_t v52 = *(void *)(v1 + 256);
  uint64_t v54 = *(void *)(v1 + 232);
  uint64_t v55 = *(void *)(v1 + 240);
  uint64_t v56 = *(void *)(v1 + 208);
  uint64_t v69 = *(void *)(v1 + 184);
  v36(v53, *(void *)(v1 + 216));
  v37(v42, v52);
  swift_task_dealloc(v42);
  swift_task_dealloc(v51);
  swift_task_dealloc(v53);
  swift_task_dealloc(v55);
  swift_task_dealloc(v54);
  swift_task_dealloc(v56);
  swift_task_dealloc(v69);
  uint64_t v49 = *(uint64_t (**)(void))(v1 + 8);
  return v49();
}

uint64_t sub_1000E0DBC()
{
  uint64_t v1 = *(void **)(v0 + 296);
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v5 = *(void *)(v0 + 248);
  uint64_t v6 = *(void *)(v0 + 216);
  uint64_t v7 = *(void *)(v0 + 224);
  swift_willThrow();

  (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  uint64_t v8 = *(void *)(v0 + 272);
  uint64_t v10 = *(void *)(v0 + 240);
  uint64_t v9 = *(void *)(v0 + 248);
  uint64_t v11 = *(void *)(v0 + 232);
  uint64_t v12 = *(void *)(v0 + 208);
  uint64_t v13 = *(void *)(v0 + 184);
  swift_task_dealloc(*(void *)(v0 + 280));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1000E0E8C(id a1@<X0>, void *a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v55 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v55 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v13 = objc_msgSend(a2, "aa_personID");
  if (!v13) {
    goto LABEL_7;
  }
  uint64_t v14 = v13;
  uint64_t v60 = v10;
  uint64_t v15 = v9;
  uint64_t v59 = static String._unconditionallyBridgeFromObjectiveC(_:)(v13);
  uint64_t v17 = v16;

  id v18 = [a2 username];
  if (!v18)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    unint64_t v27 = sub_1000E1628();
    uint64_t v28 = swift_allocError(&type metadata for AccountService.Error, v27, 0LL, 0LL);
    __int128 v30 = xmmword_1007EB8C0;
LABEL_19:
    *uint64_t v29 = v30;
LABEL_20:
    swift_willThrow(v28);

    return;
  }

  uint64_t v19 = v18;
  uint64_t v64 = v17;
  uint64_t v57 = static String._unconditionallyBridgeFromObjectiveC(_:)(v18);
  uint64_t v21 = v20;

  id v22 = [a2 dataclassProperties];
  if (!v22)
  {
    __int128 v62 = 0u;
    __int128 v63 = 0u;
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
LABEL_16:
    sub_100015794((uint64_t)&v62, &qword_10099E200);
LABEL_18:
    unint64_t v35 = sub_1000E1628();
    uint64_t v28 = swift_allocError(&type metadata for AccountService.Error, v35, 0LL, 0LL);
    __int128 v30 = xmmword_1007EB8B0;
    goto LABEL_19;
  }

  uint64_t v24 = v22;
  uint64_t v56 = a3;
  id v58 = a1;
  *(void *)&v61[0] = 0xD00000000000001FLL;
  *((void *)&v61[0] + 1) = 0x8000000100854020LL;
  uint64_t v25 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v61, &type metadata for String, v23);
  id v26 = objc_msgSend(v24, "__swift_objectForKeyedSubscript:", v25);

  swift_unknownObjectRelease(v25);
  if (v26)
  {
    _bridgeAnyObjectToAny(_:)(v61, v26);
    swift_unknownObjectRelease(v26);
  }

  else
  {
    memset(v61, 0, sizeof(v61));
  }

  sub_100015750((uint64_t)v61, (uint64_t)&v62, &qword_10099E200);
  if (!*((void *)&v63 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v58;
    goto LABEL_16;
  }

  uint64_t v31 = sub_100004AEC(&qword_1009A0CE8);
  if ((swift_dynamicCast(v61, &v62, (char *)&type metadata for Any + 8, v31, 6LL) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    a1 = v58;
    goto LABEL_18;
  }

  uint64_t v32 = *(void *)&v61[0];
  if (*(void *)(*(void *)&v61[0] + 16LL)
    && (uint64_t v33 = sub_10030CF14(0xD000000000000017LL, 0x8000000100854040LL), (v34 & 1) != 0))
  {
    sub_10006A650(*(void *)(v32 + 56) + 32 * v33, (uint64_t)&v62);
  }

  else
  {
    __int128 v62 = 0u;
    __int128 v63 = 0u;
  }

  swift_bridgeObjectRelease();
  if (!*((void *)&v63 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100015794((uint64_t)&v62, &qword_10099E200);
LABEL_28:
    a1 = v58;
    unint64_t v40 = sub_1000E1628();
    uint64_t v28 = swift_allocError(&type metadata for AccountService.Error, v40, 0LL, 0LL);
    *uint64_t v41 = 0xD000000000000017LL;
    v41[1] = 0x8000000100854040LL;
    goto LABEL_20;
  }

  if ((swift_dynamicCast(v61, &v62, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_28;
  }

  URL.init(string:)(*(void *)&v61[0], *((void *)&v61[0] + 1));
  swift_bridgeObjectRelease();
  uint64_t v36 = v60;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v60 + 48))(v8, 1LL, v15) == 1)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100015794((uint64_t)v8, (uint64_t *)&unk_1009A34D0);
    unint64_t v37 = sub_1000E1628();
    uint64_t v38 = swift_allocError(&type metadata for AccountService.Error, v37, 0LL, 0LL);
    *uint64_t v39 = 0xD000000000000017LL;
    v39[1] = 0x8000000100854040LL;
    swift_willThrow(v38);

    return;
  }

  uint64_t v42 = *(void (**)(char *, char *, uint64_t))(v36 + 32);
  v42(v12, v8, v15);
  id v43 = [v58 credentialForAccount:a2];
  if (v43)
  {
    uint64_t v44 = v43;
    id v45 = [v43 credentialItemForKey:ACSearchPartyTokenKey];
    if (v45)
    {
      uint64_t v46 = v45;
      uint64_t v60 = static String._unconditionallyBridgeFromObjectiveC(_:)(v45);
      uint64_t v48 = v47;

      uint64_t v49 = v56;
      uint64_t *v56 = v57;
      v49[1] = v21;
      uint64_t v50 = v64;
      v49[2] = v59;
      v49[3] = v50;
      v49[4] = v60;
      v49[5] = v48;
      uint64_t v51 = type metadata accessor for SearchpartyAccount(0LL);
      v42((char *)v49 + *(int *)(v51 + 28), v12, v15);
      return;
    }
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  unint64_t v52 = sub_1000E1628();
  uint64_t v53 = swift_allocError(&type metadata for AccountService.Error, v52, 0LL, 0LL);
  *uint64_t v54 = xmmword_1007EB8A0;
  swift_willThrow(v53);

  (*(void (**)(char *, uint64_t))(v60 + 8))(v12, v15);
}

uint64_t type metadata accessor for AccountService()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd14AccountService);
}

uint64_t sub_1000E1454(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100015C48( &qword_1009A0F18,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for AccountService,  (uint64_t)&unk_1007EB920);
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1000E1490(uint64_t a1, void *a2)
{
  unint64_t result = 0xD000000000000016LL;
  switch((unint64_t)a2)
  {
    case 0uLL:
      return result;
    case 1uLL:
    case 3uLL:
    case 4uLL:
      unint64_t result = 0xD000000000000013LL;
      break;
    case 2uLL:
      unint64_t result = 0xD00000000000001BLL;
      break;
    default:
      _StringGuts.grow(_:)(29LL);
      swift_bridgeObjectRelease(0xE000000000000000LL);
      v4._countAndFlagsBits = 0xD000000000000016LL;
      v4._object = a2;
      String.append(_:)(v4);
      v5._countAndFlagsBits = 41LL;
      v5._object = (void *)0xE100000000000000LL;
      String.append(_:)(v5);
      unint64_t result = 0xD00000000000001ALL;
      break;
  }

  return result;
}

unint64_t sub_1000E15A0()
{
  return sub_1000E1490(*(void *)v0, *(void **)(v0 + 8));
}

uint64_t sub_1000E15A8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A198);
  sub_10000A720(v0, (uint64_t)qword_100A2A198);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x53746E756F636341LL,  0xEE00656369767265LL);
}

unint64_t sub_1000E1628()
{
  unint64_t result = qword_1009A0F20;
  if (!qword_1009A0F20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EB978, &type metadata for AccountService.Error);
    atomic_store(result, (unint64_t *)&qword_1009A0F20);
  }

  return result;
}

void sub_1000E166C(id a1@<X1>, void *a2@<X0>, uint64_t *a3@<X8>)
{
  id v6 = objc_msgSend(a1, "aa_personID");
  if (!v6) {
    goto LABEL_7;
  }
  uint64_t v7 = v6;
  uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v6);
  uint64_t v10 = v9;

  id v11 = [a1 username];
  if (!v11)
  {
    swift_bridgeObjectRelease();
LABEL_7:
    unint64_t v21 = sub_1000E1628();
    uint64_t v22 = swift_allocError(&type metadata for AccountService.Error, v21, 0LL, 0LL);
    uint64_t v24 = 1LL;
LABEL_18:
    void *v23 = 0LL;
    v23[1] = v24;
    swift_willThrow(v22);

    return;
  }

  uint64_t v12 = v11;
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v15 = v14;

  id v16 = [a1 dataclassProperties];
  if (!v16)
  {
    __int128 v54 = 0u;
    __int128 v55 = 0u;
LABEL_15:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100015794((uint64_t)&v54, &qword_10099E200);
LABEL_17:
    unint64_t v29 = sub_1000E1628();
    uint64_t v22 = swift_allocError(&type metadata for AccountService.Error, v29, 0LL, 0LL);
    uint64_t v24 = 2LL;
    goto LABEL_18;
  }

  id v18 = v16;
  uint64_t v52 = v13;
  uint64_t v56 = v8;
  *(void *)&v53[0] = 0xD000000000000021LL;
  *((void *)&v53[0] + 1) = 0x8000000100854060LL;
  uint64_t v19 = _bridgeAnythingNonVerbatimToObjectiveC<A>(_:)(v53, &type metadata for String, v17);
  id v20 = objc_msgSend(v18, "__swift_objectForKeyedSubscript:", v19);

  swift_unknownObjectRelease(v19);
  if (v20)
  {
    _bridgeAnyObjectToAny(_:)(v53, v20);
    swift_unknownObjectRelease(v20);
  }

  else
  {
    memset(v53, 0, sizeof(v53));
  }

  sub_100015750((uint64_t)v53, (uint64_t)&v54, &qword_10099E200);
  if (!*((void *)&v55 + 1)) {
    goto LABEL_15;
  }
  uint64_t v25 = sub_100004AEC(&qword_1009A0CE8);
  if ((swift_dynamicCast(v53, &v54, (char *)&type metadata for Any + 8, v25, 6LL) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_17;
  }

  uint64_t v26 = *(void *)&v53[0];
  if (*(void *)(*(void *)&v53[0] + 16LL)
    && (uint64_t v27 = sub_10030CF14(0x6E74736F48707061LL, 0xEB00000000656D61LL), (v28 & 1) != 0))
  {
    sub_10006A650(*(void *)(v26 + 56) + 32 * v27, (uint64_t)&v54);
  }

  else
  {
    __int128 v54 = 0u;
    __int128 v55 = 0u;
  }

  swift_bridgeObjectRelease();
  if (!*((void *)&v55 + 1))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100015794((uint64_t)&v54, &qword_10099E200);
LABEL_29:
    unint64_t v44 = sub_1000E1628();
    uint64_t v22 = swift_allocError(&type metadata for AccountService.Error, v44, 0LL, 0LL);
    uint64_t v24 = 3LL;
    goto LABEL_18;
  }

  if ((swift_dynamicCast(v53, &v54, (char *)&type metadata for Any + 8, &type metadata for String, 6LL) & 1) == 0)
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    goto LABEL_29;
  }

  uint64_t v31 = *((void *)&v53[0] + 1);
  uint64_t v30 = *(void *)&v53[0];
  id v32 = objc_msgSend(a1, "aa_fmipAccount");
  if (!v32)
  {
LABEL_32:
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v45 = sub_1000E1628();
    uint64_t v22 = swift_allocError(&type metadata for AccountService.Error, v45, 0LL, 0LL);
    uint64_t v24 = 4LL;
    goto LABEL_18;
  }

  uint64_t v33 = v32;
  id v34 = [a2 credentialForAccount:v32];
  if (!v34)
  {
LABEL_31:

    goto LABEL_32;
  }

  uint64_t v51 = v31;
  uint64_t v50 = v34;
  id v35 = [v34 credentialItemForKey:ACFindMyiPhoneAppTokenKey];
  if (!v35)
  {

    uint64_t v33 = v50;
    goto LABEL_31;
  }

  uint64_t v36 = v35;
  uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v35);
  uint64_t v48 = v38;
  uint64_t v49 = v37;

  id v39 = objc_msgSend(a1, "aa_authToken");
  if (v39)
  {
    uint64_t v47 = v30;
    unint64_t v40 = v39;
    uint64_t v41 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    uint64_t v46 = v42;

    uint64_t v43 = v46;
    uint64_t v30 = v47;
  }

  else
  {

    uint64_t v41 = 0LL;
    uint64_t v43 = 0LL;
  }

  *a3 = v52;
  a3[1] = v15;
  a3[2] = v56;
  a3[3] = v10;
  a3[4] = v41;
  a3[5] = v43;
  a3[6] = v49;
  a3[7] = v48;
  a3[8] = v30;
  a3[9] = v51;
}

unint64_t destroy for AccountService.Error(uint64_t a1)
{
  unint64_t result = *(void *)(a1 + 8);
  if (result >= 0xFFFFFFFF) {
    return swift_bridgeObjectRelease(result);
  }
  return result;
}

uint64_t _s12searchpartyd14AccountServiceC5ErrorOwCP_0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = *(void *)(a2 + 8);
  if (v3 < 0xFFFFFFFF)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    *(void *)a1 = *(void *)a2;
    *(void *)(a1 + 8) = v3;
    swift_bridgeObjectRetain(v3);
  }

  return a1;
}

void *assignWithCopy for AccountService.Error(void *a1, void *a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a2[1];
  if (v4 < 0xFFFFFFFF)
  {
    if (v5 >= 0xFFFFFFFF)
    {
      *a1 = *a2;
      uint64_t v7 = a2[1];
      a1[1] = v7;
      swift_bridgeObjectRetain(v7);
      return a1;
    }

uint64_t assignWithTake for AccountService.Error(uint64_t a1, uint64_t a2)
{
  unint64_t v4 = *(void *)(a1 + 8);
  if (v4 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  unint64_t v5 = *(void *)(a2 + 8);
  if (v5 < 0xFFFFFFFF)
  {
    swift_bridgeObjectRelease(v4);
LABEL_5:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v5;
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccountService.Error(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 > 0x7FFFFFFA && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 2147483643);
  }
  unint64_t v3 = *(void *)(a1 + 8);
  if (v3 >= 0xFFFFFFFF) {
    LODWORD(v3) = -1;
  }
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 4;
  if (v4 >= 6) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for AccountService.Error(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 >= 0x7FFFFFFB)
  {
    *(void *)unint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)unint64_t result = a2 - 2147483643;
    if (a3 >= 0x7FFFFFFB) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFB) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2) {
      *(void *)(result + 8) = a2 + 4;
    }
  }

  return result;
}

uint64_t sub_1000E1D00(uint64_t a1)
{
  unint64_t v1 = *(void *)(a1 + 8);
  if (v1 >= 0xFFFFFFFF) {
    LODWORD(v1) = -1;
  }
  return (v1 + 1);
}

void *sub_1000E1D18(void *result, int a2)
{
  if (a2 < 0)
  {
    *unint64_t result = a2 ^ 0x80000000;
    result[1] = 0LL;
  }

  else if (a2)
  {
    result[1] = (a2 - 1);
  }

  return result;
}

ValueMetadata *type metadata accessor for AccountService.Error()
{
  return &type metadata for AccountService.Error;
}

BOOL sub_1000E1D48()
{
  uint64_t v1 = type metadata accessor for Endianness(0LL);
  __chkstk_darwin(v1);
  unint64_t v3 = (char *)&v20 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC(&qword_1009B9250);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for WildModeAssociationRecord(0LL);
  sub_10001581C(v0 + *(int *)(v7 + 56), (uint64_t)v6, &qword_1009B9250);
  uint64_t v8 = type metadata accessor for AccessoryMetadata(0LL);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))(v6, 1LL, v8) == 1)
  {
    sub_100015794((uint64_t)v6, &qword_1009B9250);
    return 0;
  }

  else
  {
    uint64_t v10 = (uint64_t *)&v6[*(int *)(v8 + 20)];
    uint64_t v11 = *v10;
    unint64_t v12 = v10[1];
    sub_10001736C(*v10, v12);
    sub_100018C68((uint64_t)v6, type metadata accessor for AccessoryMetadata);
    sub_1000F54C8(v11, v12);
    uint64_t v14 = v13;
    uint64_t v15 = sub_1000F55FC(v11, v12);
    uint64_t v17 = v16;
    static Endianness.current.getter();
    sub_100018B30();
    FixedWidthInteger.init(data:ofEndianness:)(&v21, v15, v17, v3);
    if (BYTE4(v21)) {
      uint64_t v18 = 0LL;
    }
    else {
      uint64_t v18 = (int)v21;
    }
    BOOL v9 = sub_1005E269C(v14, v18);
    sub_100016F9C(v11, v12);
  }

  return v9;
}

unint64_t sub_1000E1EF0@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000EE858(*a1);
  *a2 = result;
  return result;
}

void sub_1000E1F18(void *a1@<X8>)
{
  *a1 = *v1;
}

uint64_t sub_1000E1F24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000EE988();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000E1F80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000EE988();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_1000E1FCC(char *a1)
{
}

void sub_1000E1FD8()
{
}

void sub_1000E1FE4(uint64_t a1)
{
}

void sub_1000E1FEC(uint64_t a1)
{
}

unint64_t sub_1000E1FF4@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1000EE868(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000E2020()
{
  return ((uint64_t (*)(void))((char *)sub_1000E2050 + 4 * byte_1007EB9C0[*v0]))();
}

void sub_1000E2050(void *a1@<X8>)
{
  *a1 = 0x646567617473LL;
  a1[1] = 0xE600000000000000LL;
}

void sub_1000E2068(void *a1@<X8>)
{
  *a1 = 0x796669746F6ELL;
  a1[1] = 0xE600000000000000LL;
}

void sub_1000E2080(void *a1@<X8>)
{
  *a1 = 0x657461647075LL;
  a1[1] = 0xE600000000000000LL;
}

void sub_1000E2098(void *a1@<X8>)
{
  *a1 = 0x6465676174736E75LL;
  a1[1] = 0xE800000000000000LL;
}

void sub_1000E20B4(void *a1@<X8>)
{
  *a1 = 0x7761726468746977LL;
  a1[1] = 0xE800000000000000LL;
}

void sub_1000E20D0(void *a1@<X8>)
{
  *a1 = 0x6465726F6E6769LL;
  a1[1] = v1;
}

void sub_1000E20E8(void *a1@<X8>)
{
  *a1 = 0x7265766F63736964LL;
  a1[1] = 0xEA00000000006465LL;
}

uint64_t sub_1000E2108(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000EE9CC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000E2164(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000EE9CC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000E21B0(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A11F0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1000EE944();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for WildModeTrackingLocation.CodingKeys,  &type metadata for WildModeTrackingLocation.CodingKeys,  v11,  v9,  v10);
  double v12 = *v3;
  char v23 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v23, v5, v12);
  if (!v2)
  {
    double v13 = v3[1];
    char v22 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v22, v5, v13);
    double v14 = v3[2];
    char v21 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v21, v5, v14);
    uint64_t v15 = (char *)v3 + *(int *)(type metadata accessor for WildModeTrackingLocation(0LL) + 28);
    char v20 = 3;
    uint64_t v16 = type metadata accessor for Date(0LL);
    uint64_t v17 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v15, &v20, v5, v16, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

Swift::Int sub_1000E2354()
{
  if ((*v0 & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v1 = *v0;
  }
  else {
    Swift::UInt64 v1 = 0LL;
  }
  Hasher._combine(_:)(v1);
  if ((v0[1] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v2 = v0[1];
  }
  else {
    Swift::UInt64 v2 = 0LL;
  }
  Hasher._combine(_:)(v2);
  if ((v0[2] & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v3 = v0[2];
  }
  else {
    Swift::UInt64 v3 = 0LL;
  }
  Hasher._combine(_:)(v3);
  type metadata accessor for WildModeTrackingLocation(0LL);
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  dispatch thunk of Hashable.hash(into:)(v7, v4, v5);
  return Hasher._finalize()();
}

uint64_t sub_1000E2410@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v24 = a2;
  uint64_t v27 = type metadata accessor for Date(0LL);
  uint64_t v25 = *(void *)(v27 - 8);
  __chkstk_darwin(v27);
  uint64_t v26 = (char *)&v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = sub_100004AEC(&qword_1009A11D0);
  uint64_t v4 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for WildModeTrackingLocation(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100012ED8(a1, v10);
  unint64_t v12 = sub_1000EE944();
  uint64_t v13 = v29;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for WildModeTrackingLocation.CodingKeys,  &type metadata for WildModeTrackingLocation.CodingKeys,  v12,  v10,  v11);
  if (!v13)
  {
    uint64_t v29 = v7;
    uint64_t v14 = v4;
    uint64_t v16 = v26;
    uint64_t v15 = v27;
    char v33 = 0;
    uint64_t v17 = v28;
    KeyedDecodingContainer.decode(_:forKey:)(&v33, v28);
    *(void *)uint64_t v9 = v18;
    char v32 = 1;
    KeyedDecodingContainer.decode(_:forKey:)(&v32, v17);
    *((void *)v9 + 1) = v19;
    char v31 = 2;
    KeyedDecodingContainer.decode(_:forKey:)(&v31, v17);
    *((void *)v9 + 2) = v21;
    char v30 = 3;
    uint64_t v22 = sub_100007864( &qword_10099DA70,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v15, &v30, v17, v15, v22);
    (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v17);
    uint64_t v23 = v24;
    (*(void (**)(char *, void *, uint64_t))(v25 + 32))(&v9[*(int *)(v29 + 28)], v16, v15);
    sub_10002218C((uint64_t)v9, v23, type metadata accessor for WildModeTrackingLocation);
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_1000E2690()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000E26C0 + 4 * byte_1007EB9C8[*v0]))( 0x656475746974616CLL,  0xE800000000000000LL);
}

uint64_t sub_1000E26C0()
{
  return 0x64757469676E6F6CLL;
}

unint64_t sub_1000E26DC()
{
  return 0xD000000000000012LL;
}

uint64_t sub_1000E26F8()
{
  return 0x6D617473656D6974LL;
}

uint64_t sub_1000E2718(uint64_t a1)
{
  unint64_t v2 = sub_1000EE944();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E2740(uint64_t a1)
{
  unint64_t v2 = sub_1000EE944();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E2768@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E2410(a1, a2);
}

uint64_t sub_1000E277C(void *a1)
{
  return sub_1000E21B0(a1);
}

void *sub_1000E2798@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 1LL) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result) {
    char v3 = v2;
  }
  else {
    char v3 = 0;
  }
  *a2 = v3;
  return result;
}

uint64_t sub_1000E27B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000EE900();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000E2814(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000EE900();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

Swift::Int sub_1000E2860()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)(v4, 0LL);
  if (v2 >> 60 == 11)
  {
    Hasher._combine(_:)(1uLL);
  }

  else if (v2 >> 60 == 15)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    Hasher._combine(_:)(2uLL);
    sub_10001736C(v1, v2);
    Data.hash(into:)(v4, v1, v2);
    sub_1000E53FC(v1, v2);
  }

  return Hasher._finalize()();
}

void sub_1000E2900(uint64_t a1)
{
  unint64_t v3 = v1[1];
  if (v3 >> 60 == 11)
  {
    Swift::UInt v4 = 1LL;
    goto LABEL_5;
  }

  if (v3 >> 60 == 15)
  {
    Swift::UInt v4 = 0LL;
LABEL_5:
    Hasher._combine(_:)(v4);
    return;
  }

  uint64_t v5 = *v1;
  Hasher._combine(_:)(2uLL);
  sub_10001736C(v5, v3);
  Data.hash(into:)(a1, v5, v3);
  sub_1000E53FC(v5, v3);
}

Swift::Int sub_1000E2994(uint64_t a1)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  if (v3 >> 60 == 11)
  {
    Hasher._combine(_:)(1uLL);
  }

  else if (v3 >> 60 == 15)
  {
    Hasher._combine(_:)(0LL);
  }

  else
  {
    Hasher._combine(_:)(2uLL);
    sub_10001736C(v2, v3);
    Data.hash(into:)(v5, v2, v3);
    sub_1000E53FC(v2, v3);
  }

  return Hasher._finalize()();
}

BOOL sub_1000E2A30(uint64_t *a1, uint64_t *a2)
{
  unint64_t v2 = a1[1];
  unint64_t v3 = a2[1];
  if (v2 >> 60 == 11) {
    return v3 >> 60 == 11;
  }
  if (v2 >> 60 == 15) {
    return v3 >> 60 == 15;
  }
  if (((v3 >> 60) | 4) == 0xF) {
    return 0LL;
  }
  uint64_t v5 = *a1;
  uint64_t v6 = *a2;
  sub_1000E7D3C(*a1, v2);
  sub_1000E7D3C(v6, v3);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v5, v2);
  char v8 = v7;
  sub_1000E53FC(v6, v3);
  sub_1000E53FC(v5, v2);
  return v8 & 1;
}

uint64_t sub_1000E2B04()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  Swift::UInt v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000A8AC(v2, qword_100A2A1B0);
  sub_10000A720(v0, (uint64_t)qword_100A2A1B0);
  type metadata accessor for BeaconStore(0LL);
  sub_1004E6208((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000019LL, 0x80000001007EBA80LL, 1LL);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

void sub_1000E2BD4(__int128 *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AccessoryProductInfo(0LL);
  uint64_t v73 = *(void *)(v4 - 8);
  uint64_t v74 = v4;
  __chkstk_darwin(v4);
  uint64_t v66 = (uint64_t)&v64 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_10099CE68);
  __chkstk_darwin(v6);
  uint64_t v72 = (uint64_t)&v64 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v69 = *(void *)(v8 - 8);
  uint64_t v70 = v8;
  __chkstk_darwin(v8);
  uint64_t v65 = (uint64_t)&v64 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009B9250);
  __chkstk_darwin(v10);
  uint64_t v68 = (uint64_t)&v64 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v77 = *(void *)(v12 - 8);
  uint64_t v78 = v12;
  __chkstk_darwin(v12);
  uint64_t v79 = (char *)&v64 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v76 = (uint64_t)&v64 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v75 = (uint64_t)&v64 - v18;
  __chkstk_darwin(v17);
  uint64_t v67 = (uint64_t)&v64 - v19;
  uint64_t v20 = type metadata accessor for UUID(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v64 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v24);
  uint64_t v26 = (char *)&v64 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v20, v27);
  uint64_t v28 = (int *)type metadata accessor for WildModeAssociationRecord(0LL);
  sub_10001581C(v1 + v28[5], (uint64_t)v26, &qword_10099D8A0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v21 + 48))(v26, 1LL, v20) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v21 + 32))(v23, v26, v20);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)(a1, v20, v27);
    (*(void (**)(char *, uint64_t))(v21 + 8))(v23, v20);
  }

  Hasher._combine(_:)(*(unsigned __int8 *)(v1 + v28[6]));
  uint64_t v29 = type metadata accessor for MACAddress(0LL);
  uint64_t v30 = sub_100007864( &qword_10099F5A8,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
  dispatch thunk of Hashable.hash(into:)(a1, v29, v30);
  uint64_t v31 = *(void *)(v1 + v28[8]);
  swift_bridgeObjectRetain(*(void *)(v2 + v28[8]));
  sub_1005BEF24((uint64_t)a1, v31);
  swift_bridgeObjectRelease();
  Hasher._combine(_:)(*(unsigned __int8 *)(v2 + v28[9]));
  uint64_t v32 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v33 = v78;
  dispatch thunk of Hashable.hash(into:)(a1, v78, v32);
  uint64_t v34 = v67;
  sub_10001581C(v2 + v28[11], v67, (uint64_t *)&unk_10099D720);
  uint64_t v35 = v77;
  uint64_t v36 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v77 + 48);
  int v37 = v36(v34, 1LL, v33);
  uint64_t v71 = v32;
  if (v37 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v38 = v79;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v79, v34, v33);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)(a1, v33, v32);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v38, v33);
  }

  id v39 = (unsigned __int8 *)(v2 + v28[12]);
  uint64_t v40 = *((void *)v39 + 2);
  if (v40)
  {
    uint64_t v41 = *((void *)v39 + 1);
    Swift::UInt v42 = *v39;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v42);
    swift_bridgeObjectRetain(v40);
    String.hash(into:)(a1, v41, v40);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  int v43 = *(unsigned __int8 *)(v2 + v28[13]);
  if (v43 == 4) {
    LOBYTE(v43) = 0;
  }
  else {
    Hasher._combine(_:)(1u);
  }
  Hasher._combine(_:)(v43);
  uint64_t v44 = v68;
  sub_10001581C(v2 + v28[14], v68, &qword_1009B9250);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v69 + 48))(v44, 1LL, v70) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v45 = v65;
    sub_10002218C(v44, v65, type metadata accessor for AccessoryMetadata);
    Hasher._combine(_:)(1u);
    sub_100088AD8((uint64_t)a1);
    sub_100018C68(v45, type metadata accessor for AccessoryMetadata);
  }

  uint64_t v46 = v72;
  sub_10001581C(v2 + v28[15], v72, &qword_10099CE68);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v73 + 48))(v46, 1LL, v74) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v47 = v66;
    sub_10002218C(v46, v66, type metadata accessor for AccessoryProductInfo);
    Hasher._combine(_:)(1u);
    sub_100745B10((uint64_t)a1);
    sub_100018C68(v47, type metadata accessor for AccessoryProductInfo);
  }

  uint64_t v48 = v71;
  uint64_t v49 = *(unsigned __int8 *)(v2 + v28[16]);
  if ((_DWORD)v49 != 8)
  {
    Hasher._combine(_:)(1u);
    __asm { BR              X9 }
  }

  Hasher._combine(_:)(0);
  uint64_t v50 = *(void *)(v2 + v28[17]);
  swift_bridgeObjectRetain(v50);
  sub_1000E63E4(a1, v50);
  swift_bridgeObjectRelease();
  uint64_t v51 = v75;
  sub_10001581C(v2 + v28[18], v75, (uint64_t *)&unk_10099D720);
  int v52 = v36(v51, 1LL, v33);
  if (v52 == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v53 = v79;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v79, v51, v33);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)(a1, v33, v48);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v53, v33);
  }

  uint64_t v54 = v76;
  sub_10001581C(v2 + v28[19], v76, (uint64_t *)&unk_10099D720);
  if (v36(v54, 1LL, v33) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    __int128 v55 = v79;
    (*(void (**)(char *, uint64_t, uint64_t))(v35 + 32))(v79, v54, v33);
    Hasher._combine(_:)(1u);
    dispatch thunk of Hashable.hash(into:)(a1, v33, v48);
    (*(void (**)(char *, uint64_t))(v35 + 8))(v55, v33);
  }

  uint64_t v56 = (uint64_t *)(v2 + v28[20]);
  unint64_t v57 = v56[1];
  if (v57 >> 60 == 11)
  {
    Swift::UInt v58 = 1LL;
    goto LABEL_32;
  }

  if (v57 >> 60 == 15)
  {
    Swift::UInt v58 = 0LL;
LABEL_32:
    Hasher._combine(_:)(v58);
    goto LABEL_34;
  }

  uint64_t v59 = *v56;
  Hasher._combine(_:)(2uLL);
  sub_10001736C(v59, v57);
  Data.hash(into:)(a1, v59, v57);
  sub_1000E53FC(v59, v57);
LABEL_34:
  int v60 = *(unsigned __int8 *)(v2 + v28[21]);
  if (v60 == 2)
  {
    Swift::UInt8 v61 = 0;
  }

  else
  {
    Swift::UInt8 v61 = v60 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v61);
  __int128 v62 = (Swift::UInt8 *)(v2 + v28[22]);
  if ((v62[1] & 1) != 0)
  {
    Swift::UInt8 v63 = 0;
  }

  else
  {
    Swift::UInt8 v63 = *v62;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v63);
}

uint64_t sub_1000E3510(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000E354C + 4 * byte_1007EB9D4[a1]))( 0x696669746E656469LL,  0xEA00000000007265LL);
}

unint64_t sub_1000E354C()
{
  return 0xD000000000000010LL;
}

void sub_1000E36DC()
{
}

uint64_t sub_1000E36FC()
{
  return 0x68736F507369LL;
}

uint64_t sub_1000E3710()
{
  return 0x496B726F7774656ELL;
}

uint64_t sub_1000E372C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000E3768 + 4 * byte_1007EB9E7[a1]))( 0x696669746E656469LL,  0xEA00000000007265LL);
}

unint64_t sub_1000E3768()
{
  return 0xD000000000000010LL;
}

void sub_1000E38F8()
{
}

uint64_t sub_1000E3918()
{
  return 0x68736F507369LL;
}

uint64_t sub_1000E392C()
{
  return 0x496B726F7774656ELL;
}

Swift::Int sub_1000E3948()
{
  return Hasher._finalize()();
}

Swift::Int sub_1000E3988(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1000E39C4(unsigned __int8 *a1, unsigned __int8 *a2)
{
  unsigned __int8 v2 = *a2;
  uint64_t v3 = sub_1000E3510(*a1);
  uint64_t v5 = v4;
  uint64_t v6 = sub_1000E3510(v2);
  if (v3 == v6 && v5 == v7) {
    char v9 = 1;
  }
  else {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(v3, v5, v6, v7, 0LL);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v9 & 1;
}

Swift::Int sub_1000E3A4C()
{
  unsigned __int8 v1 = *v0;
  Hasher.init(_seed:)(v5, 0LL);
  uint64_t v2 = sub_1000E3510(v1);
  String.hash(into:)(v5, v2, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1000E3AAC(uint64_t a1)
{
  uint64_t v3 = sub_1000E3510(*v1);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1000E3AEC(uint64_t a1)
{
  unsigned __int8 v2 = *v1;
  Hasher.init(_seed:)(v6, a1);
  uint64_t v3 = sub_1000E3510(v2);
  String.hash(into:)(v6, v3, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1000E3B48@<X0>(uint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000EE8B0(*a1, a1[1]);
  *a2 = result;
  return result;
}

uint64_t sub_1000E3B74@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_1000E3510(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_1000E3B9C()
{
  return sub_1000E372C(*v0);
}

uint64_t sub_1000E3BA4@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000EE8B0(a1, a2);
  *a3 = result;
  return result;
}

void sub_1000E3BC8(_BYTE *a1@<X8>)
{
  *a1 = 19;
}

uint64_t sub_1000E3BD4(uint64_t a1)
{
  unint64_t v2 = sub_1000E53B8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000E3BFC(uint64_t a1)
{
  unint64_t v2 = sub_1000E53B8();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000E3C24@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  v165 = a1;
  uint64_t v134 = a2;
  uint64_t v2 = sub_100004AEC(&qword_10099CE68);
  __chkstk_darwin(v2);
  uint64_t v137 = (uint64_t)&v130 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC(&qword_1009B9250);
  __chkstk_darwin(v4);
  uint64_t v138 = (uint64_t)&v130 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v135 = (uint64_t)&v130 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v136 = (uint64_t)&v130 - v10;
  __chkstk_darwin(v9);
  uint64_t v139 = (char *)&v130 - v11;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  v140 = (uint64_t *)((char *)&v130 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  __chkstk_darwin(v15);
  uint64_t v142 = (char *)&v130 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v146 = type metadata accessor for MACAddress(0LL);
  uint64_t v147 = *(void *)(v146 - 8);
  __chkstk_darwin(v146);
  uint64_t v141 = (uint64_t *)((char *)&v130 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v18 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v18);
  v149 = (char *)&v130 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for UUID(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  v151 = (uint64_t *)((char *)&v130 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  *(void *)&__int128 v150 = sub_100004AEC(&qword_1009A0F40);
  uint64_t v152 = *(void *)(v150 - 8);
  __chkstk_darwin(v150);
  uint64_t v24 = (char *)&v130 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = (int *)type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v26 = __chkstk_darwin(v25);
  uint64_t v28 = (char *)&v130 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = (uint64_t)&v28[*(int *)(v26 + 20)];
  uint64_t v148 = v21;
  uint64_t v30 = *(void (**)(void))(v21 + 56);
  uint64_t v161 = v29;
  uint64_t v153 = v20;
  v30();
  uint64_t v143 = v25[6];
  v28[v143] = 0;
  uint64_t v31 = (uint64_t)&v28[v25[11]];
  uint64_t v144 = v13;
  uint64_t v32 = *(void (**)(void))(v13 + 56);
  uint64_t v163 = v31;
  v32();
  uint64_t v33 = &v28[v25[12]];
  *(void *)uint64_t v33 = 0LL;
  *((void *)v33 + 1) = 0LL;
  v162 = v33;
  *((void *)v33 + 2) = 0LL;
  uint64_t v34 = (uint64_t)&v28[v25[14]];
  uint64_t v35 = type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v36 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v35 - 8) + 56LL);
  uint64_t v160 = v34;
  v36(v34, 1LL, 1LL, v35);
  uint64_t v37 = (uint64_t)&v28[v25[15]];
  uint64_t v38 = type metadata accessor for AccessoryProductInfo(0LL);
  id v39 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v38 - 8) + 56LL);
  uint64_t v159 = v37;
  v39(v37, 1LL, 1LL, v38);
  uint64_t v40 = v25[16];
  v28[v40] = 8;
  uint64_t v41 = v25[17];
  unint64_t v42 = sub_100412E6C((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v157 = v41;
  *(void *)&v28[v41] = v42;
  uint64_t v43 = (uint64_t)&v28[v25[18]];
  static Date.trustedNow.getter(v43);
  uint64_t v156 = v43;
  ((void (*)(uint64_t, void, uint64_t, uint64_t))v32)(v43, 0LL, 1LL, v12);
  v158 = &v28[v25[19]];
  uint64_t v145 = v12;
  v32();
  uint64_t v44 = v25[21];
  v28[v44] = 2;
  v154 = v25;
  uint64_t v45 = v25[22];
  v164 = v28;
  uint64_t v46 = &v28[v45];
  uint64_t v47 = v24;
  uint64_t v48 = v46;
  *(_WORD *)uint64_t v46 = 256;
  uint64_t v50 = v165[3];
  uint64_t v49 = v165[4];
  sub_100012ED8(v165, v50);
  unint64_t v51 = sub_1000E53B8();
  uint64_t v52 = v155;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for WildModeAssociationRecord.CodingKeys,  &type metadata for WildModeAssociationRecord.CodingKeys,  v51,  v50,  v49);
  if (v52)
  {
    uint64_t v53 = v161;
    uint64_t v61 = (uint64_t)v164;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v165);
    sub_100015794(v53, &qword_10099D8A0);
    int v62 = 0;
    goto LABEL_4;
  }

  uint64_t v54 = (uint64_t)v149;
  uint64_t v155 = v35;
  uint64_t v133 = v38;
  uint64_t v132 = v40;
  uint64_t v130 = v44;
  uint64_t v131 = v48;
  LOBYTE(v166) = 0;
  uint64_t v55 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v56 = v151;
  uint64_t v57 = v153;
  uint64_t v58 = v150;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v151, v153, &v166, v150, v153, v55);
  uint64_t v59 = v57;
  uint64_t v60 = v58;
  uint64_t v61 = (uint64_t)v164;
  (*(void (**)(char *, void *, uint64_t))(v148 + 32))(v164, v56, v59);
  LOBYTE(v166) = 1;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v59, &v166, v60, v59, v55);
  uint64_t v64 = v161;
  sub_1000D4D50(v54, v161, &qword_10099D8A0);
  char v168 = 2;
  unint64_t v65 = sub_1000E5414();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for UnauthorizedTrackingType,  &v168,  v60,  &type metadata for UnauthorizedTrackingType,  v65);
  uint64_t v66 = v147;
  *(_BYTE *)(v61 + v143) = v166 & 1;
  char v168 = 3;
  unint64_t v67 = sub_1000B7E50();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for Advertisement,  &v168,  v60,  &type metadata for Advertisement,  v67);
  v151 = 0LL;
  v149 = v47;
  unint64_t v69 = *((void *)&v166 + 1);
  uint64_t v70 = v61 + v154[20];
  if (*((void *)&v166 + 1) >> 60 == 15LL)
  {
    *(_OWORD *)uint64_t v70 = xmmword_1007E7660;
    LOBYTE(v166) = 4;
    uint64_t v71 = sub_100007864( &qword_10099F598,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
    uint64_t v72 = v141;
    uint64_t v73 = v146;
    uint64_t v74 = v149;
    uint64_t v75 = v151;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v141, v146, &v166, v60, v146, v71);
    v151 = v75;
    if (v75)
    {
      (*(void (**)(char *, uint64_t))(v152 + 8))(v74, v60);
      int v76 = 0;
      int v77 = 0;
      int v78 = 0;
      int v62 = 1;
      goto LABEL_7;
    }

    (*(void (**)(uint64_t, void *, uint64_t))(v66 + 32))(v61 + v154[7], v72, v73);
    uint64_t v87 = v145;
    uint64_t v88 = v144;
  }

  else
  {
    uint64_t v79 = v60;
    uint64_t v80 = v166;
    *(void *)uint64_t v70 = v166;
    *(void *)(v70 + 8) = v69;
    sub_10001736C(v80, v69);
    uint64_t v81 = sub_10001736C(v80, v69);
    uint64_t v82 = static MACAddress.length.getter(v81);
    sub_100178C64(v82, v80, v69);
    uint64_t v83 = v142;
    MACAddress.init(data:type:)(v166, *((void *)&v166 + 1), 1LL);
    uint64_t v84 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v66 + 48);
    uint64_t v85 = v66;
    uint64_t v86 = v146;
    uint64_t result = v84(v83, 1LL, v146);
    uint64_t v87 = v145;
    uint64_t v88 = v144;
    if ((_DWORD)result == 1)
    {
      __break(1u);
      return result;
    }

    (*(void (**)(char *, char *, uint64_t))(v85 + 32))(&v164[v154[7]], v83, v86);
    sub_1000182F0(v80, v69);
    uint64_t v66 = v85;
    uint64_t v60 = v79;
  }

  uint64_t v89 = sub_100004AEC(&qword_1009A0F58);
  char v168 = 5;
  uint64_t v90 = sub_1000E6210( &qword_1009A0F60,  &qword_1009A0F68,  (uint64_t)&unk_1007EC07C,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  uint64_t v91 = v149;
  uint64_t v92 = v151;
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v166, v89, &v168, v60, v89, v90);
  if (v92)
  {
    v151 = v92;
    (*(void (**)(char *, uint64_t))(v152 + 8))(v91, v60);
    int v77 = 0;
    int v78 = 0;
    int v76 = 1;
LABEL_23:
    int v62 = 1;
    uint64_t v61 = (uint64_t)v164;
    goto LABEL_7;
  }

  uint64_t v93 = v87;
  uint64_t v94 = v154;
  uint64_t v95 = (uint64_t)v164;
  *(void *)&v164[v154[8]] = v166;
  char v168 = 6;
  unint64_t v96 = sub_1000E546C();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v166,  &type metadata for WildModeAlertState,  &v168,  v60,  &type metadata for WildModeAlertState,  v96);
  *(_BYTE *)(v95 + v94[9]) = v166;
  LOBYTE(v166) = 7;
  uint64_t v97 = sub_100007864( &qword_10099DA70,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v98 = v140;
  uint64_t v99 = v93;
  uint64_t v100 = v97;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v140, v99, &v166, 0LL, v99, v97);
  v151 = 0LL;
  (*(void (**)(char *, void *, uint64_t))(v88 + 32))(&v164[v154[10]], v98, v99);
  LOBYTE(v166) = 8;
  uint64_t v101 = (uint64_t)v139;
  uint64_t v102 = v100;
  uint64_t v103 = v151;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v99, &v166, 0LL, v99, v100);
  if (v103)
  {
    v151 = v103;
    (*(void (**)(char *, uint64_t))(v152 + 8))(v91, v60);
    int v76 = 1;
    int v77 = 1;
    int v78 = 1;
    goto LABEL_23;
  }

  sub_1000D4D50(v101, v163, (uint64_t *)&unk_10099D720);
  char v168 = 9;
  unint64_t v104 = sub_100040120();
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for MessagingDestination,  &v168,  v60,  &type metadata for MessagingDestination,  v104);
  v151 = 0LL;
  __int128 v150 = v166;
  uint64_t v105 = v167;
  uint64_t v106 = v162;
  swift_bridgeObjectRelease();
  *(_OWORD *)uint64_t v106 = v150;
  *((void *)v106 + 2) = v105;
  char v168 = 10;
  unint64_t v107 = sub_1000E54B0();
  uint64_t v108 = v151;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for Type18Status.DeviceType,  &v168,  v60,  &type metadata for Type18Status.DeviceType,  v107);
  v151 = v108;
  if (!v108)
  {
    v164[v154[13]] = v166;
    LOBYTE(v166) = 11;
    uint64_t v109 = sub_100007864(&qword_1009A0F80, type metadata accessor for AccessoryMetadata, (uint64_t)&unk_1007E8668);
    uint64_t v110 = v151;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v155, &v166, v60, v155, v109);
    v151 = v110;
    if (!v110)
    {
      sub_1000D4D50(v138, v160, &qword_1009B9250);
      LOBYTE(v166) = 12;
      uint64_t v111 = sub_100007864(&qword_1009A0F88, type metadata accessor for AccessoryProductInfo, (uint64_t)&unk_10081A408);
      uint64_t v112 = v151;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v133, &v166, v60, v133, v111);
      v151 = v112;
      if (!v112)
      {
        sub_1000D4D50(v137, v159, &qword_10099CE68);
        LOBYTE(v166) = 14;
        uint64_t v113 = v151;
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v145, &v166, v60, v145, v102);
        v151 = v113;
        if (!v113)
        {
          sub_1000D4D50(v136, (uint64_t)v158, (uint64_t *)&unk_10099D720);
          char v168 = 15;
          unint64_t v114 = sub_1000E54F4();
          uint64_t v115 = v151;
          KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for WildModeObservationState,  &v168,  v60,  &type metadata for WildModeObservationState,  v114);
          v151 = v115;
          if (!v115)
          {
            v164[v132] = v166;
            uint64_t v116 = sub_100004AEC(&qword_1009A0F98);
            char v168 = 16;
            unint64_t v117 = sub_1000E5538();
            uint64_t v118 = v151;
            KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v116, &v168, v60, v116, v117);
            v151 = v118;
            if (!v118)
            {
              unint64_t v119 = v166;
              if (!(void)v166) {
                unint64_t v119 = sub_100412E6C((uint64_t)_swiftEmptyArrayStorage);
              }
              uint64_t v120 = v157;
              uint64_t v121 = (uint64_t)v164;
              swift_bridgeObjectRelease();
              *(void *)(v121 + v120) = v119;
              LOBYTE(v166) = 13;
              char v122 = v151;
              KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v145, &v166, v60, v145, v102);
              v151 = v122;
              if (!v122)
              {
                sub_1000D4D50(v135, v156, (uint64_t *)&unk_10099D720);
                LOBYTE(v166) = 17;
                v123 = v151;
                char v124 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v166, v60);
                v151 = v123;
                if (!v123)
                {
                  v164[v130] = v124;
                  LOBYTE(v166) = 18;
                  uint64_t v125 = v151;
                  __int16 v126 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(&v166, v60);
                  v151 = v125;
                  if (!v125)
                  {
                    __int16 v127 = v126;
                    (*(void (**)(char *, uint64_t))(v152 + 8))(v149, v60);
                    v128 = v131;
                    *uint64_t v131 = v127;
                    v128[1] = HIBYTE(v127) & 1;
                    uint64_t v129 = (uint64_t)v164;
                    sub_1000E55BC((uint64_t)v164, v134);
                    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v165);
                    return sub_100018C68(v129, type metadata accessor for WildModeAssociationRecord);
                  }
                }
              }
            }
          }
        }
      }
    }
  }

  (*(void (**)(char *, uint64_t))(v152 + 8))(v149, v60);
  int v76 = 1;
  int v77 = 1;
  int v78 = 1;
  int v62 = 1;
  uint64_t v66 = v147;
  uint64_t v64 = v161;
  uint64_t v61 = (uint64_t)v164;
LABEL_7:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v165);
  (*(void (**)(uint64_t, uint64_t))(v148 + 8))(v61, v153);
  sub_100015794(v64, &qword_10099D8A0);
  if (v76)
  {
    uint64_t v68 = v154;
    (*(void (**)(uint64_t, uint64_t))(v66 + 8))(v61 + v154[7], v146);
    if ((v77 & 1) == 0) {
      goto LABEL_9;
    }
  }

  else
  {
    uint64_t v68 = v154;
    if (!v77)
    {
LABEL_9:
      if (!v78) {
        goto LABEL_4;
      }
      goto LABEL_10;
    }
  }

  swift_bridgeObjectRelease();
  if ((v78 & 1) != 0) {
LABEL_10:
  }
    (*(void (**)(uint64_t, uint64_t))(v144 + 8))(v61 + v68[10], v145);
LABEL_4:
  sub_100015794(v163, (uint64_t *)&unk_10099D720);
  swift_bridgeObjectRelease();
  sub_100015794(v160, &qword_1009B9250);
  sub_100015794(v159, &qword_10099CE68);
  swift_bridgeObjectRelease();
  sub_100015794(v156, (uint64_t *)&unk_10099D720);
  uint64_t result = sub_100015794((uint64_t)v158, (uint64_t *)&unk_10099D720);
  if (v62) {
    return sub_1000E53FC(*(void *)(v61 + v154[20]), *(void *)(v61 + v154[20] + 8));
  }
  return result;
}

uint64_t sub_1000E4C40(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A0FA8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v49 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1000E53B8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for WildModeAssociationRecord.CodingKeys,  &type metadata for WildModeAssociationRecord.CodingKeys,  v11,  v9,  v10);
  LOBYTE(v51) = 0;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v51, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = (int *)type metadata accessor for WildModeAssociationRecord(0LL);
    uint64_t v15 = v3 + v14[5];
    LOBYTE(v51) = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v15, &v51, v5, v12, v13);
    LOBYTE(v51) = *(_BYTE *)(v3 + v14[6]);
    char v53 = 2;
    unint64_t v16 = sub_1000E6168();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)( &v51,  &v53,  v5,  &type metadata for UnauthorizedTrackingType,  v16);
    uint64_t v17 = v3 + v14[7];
    LOBYTE(v51) = 4;
    uint64_t v18 = type metadata accessor for MACAddress(0LL);
    uint64_t v19 = sub_100007864( &qword_1009A5890,  (uint64_t (*)(uint64_t))&type metadata accessor for MACAddress,  (uint64_t)&protocol conformance descriptor for MACAddress);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v51, v5, v18, v19);
    uint64_t v20 = v3 + v14[20];
    unint64_t v21 = *(void *)(v20 + 8);
    if (((v21 >> 60) | 4) == 0xF)
    {
      uint64_t v22 = 0LL;
      unint64_t v21 = 0xF000000000000000LL;
    }

    else
    {
      uint64_t v22 = *(void *)v20;
      sub_10001736C(*(void *)v20, *(void *)(v20 + 8));
    }

    *(void *)&__int128 v51 = v22;
    *((void *)&v51 + 1) = v21;
    char v53 = 3;
    uint64_t v23 = sub_100004AEC(&qword_1009A0FB8);
    unint64_t v24 = sub_1000E61AC();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v51, &v53, v5, v23, v24);
    sub_1000182F0(v22, v21);
    *(void *)&__int128 v51 = *(void *)(v3 + v14[8]);
    char v53 = 5;
    uint64_t v25 = sub_100004AEC(&qword_1009A0F58);
    uint64_t v26 = sub_1000E6210( &qword_1009A0FC8,  &qword_1009A0FD0,  (uint64_t)&unk_1007EBFDC,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v51, &v53, v5, v25, v26);
    LOBYTE(v51) = *(_BYTE *)(v3 + v14[9]);
    char v53 = 6;
    unint64_t v27 = sub_1000E6294();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v51, &v53, v5, &type metadata for WildModeAlertState, v27);
    uint64_t v28 = v3 + v14[10];
    LOBYTE(v51) = 7;
    uint64_t v29 = type metadata accessor for Date(0LL);
    uint64_t v30 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v28, &v51, v5, v29, v30);
    uint64_t v31 = v3 + v14[11];
    LOBYTE(v51) = 8;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v31, &v51, v5, v29, v30);
    uint64_t v32 = (__int128 *)(v3 + v14[12]);
    uint64_t v33 = *((void *)v32 + 2);
    __int128 v51 = *v32;
    uint64_t v52 = v33;
    char v53 = 9;
    unint64_t v34 = sub_100040098();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v51, &v53, v5, &type metadata for MessagingDestination, v34);
    LOBYTE(v51) = *(_BYTE *)(v3 + v14[13]);
    char v53 = 10;
    unint64_t v35 = sub_1000E62D8();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)( &v51,  &v53,  v5,  &type metadata for Type18Status.DeviceType,  v35);
    uint64_t v50 = v3 + v14[14];
    LOBYTE(v51) = 11;
    uint64_t v36 = type metadata accessor for AccessoryMetadata(0LL);
    uint64_t v37 = sub_100007864(&qword_1009A0FE8, type metadata accessor for AccessoryMetadata, (uint64_t)&unk_1007E8640);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v50, &v51, v5, v36, v37);
    uint64_t v50 = v3 + v14[15];
    LOBYTE(v51) = 12;
    uint64_t v38 = type metadata accessor for AccessoryProductInfo(0LL);
    uint64_t v39 = sub_100007864(&qword_1009A0FF0, type metadata accessor for AccessoryProductInfo, (uint64_t)&unk_10081A3E0);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v50, &v51, v5, v38, v39);
    uint64_t v40 = v3 + v14[19];
    LOBYTE(v51) = 14;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v40, &v51, v5, v29, v30);
    LOBYTE(v51) = *(_BYTE *)(v3 + v14[16]);
    char v53 = 15;
    unint64_t v41 = sub_1000E631C();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)( &v51,  &v53,  v5,  &type metadata for WildModeObservationState,  v41);
    *(void *)&__int128 v51 = *(void *)(v3 + v14[17]);
    char v53 = 16;
    uint64_t v42 = sub_100004AEC(&qword_1009A0F98);
    unint64_t v43 = sub_1000E6360();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v51, &v53, v5, v42, v43);
    uint64_t v44 = v3 + v14[18];
    LOBYTE(v51) = 13;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v44, &v51, v5, v29, v30);
    uint64_t v45 = *(unsigned __int8 *)(v3 + v14[21]);
    LOBYTE(v51) = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v45, &v51, v5);
    uint64_t v46 = (unsigned __int8 *)(v3 + v14[22]);
    unsigned int v47 = *v46;
    LODWORD(v46) = v46[1];
    LOBYTE(v51) = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v47 | ((_DWORD)v46 << 8), &v51, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t LocationProvider.identifier.getter@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(a1, v1, v3);
}

uint64_t sub_1000E5320@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1000E3C24(a1, a2);
}

uint64_t sub_1000E5334(void *a1)
{
  return sub_1000E4C40(a1);
}

uint64_t sub_1000E5348(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100007864( &qword_1009A0F30,  type metadata accessor for WildModeAssociationRecord,  (uint64_t)&unk_1007EBA54);
  uint64_t result = sub_100007864( &qword_1009A0F38,  type metadata accessor for WildModeAssociationRecord,  (uint64_t)&unk_1007EBA2C);
  *(void *)(a1 + 16) = result;
  return result;
}

uint64_t type metadata accessor for WildModeAssociationRecord(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009A1070, (uint64_t)&nominal type descriptor for WildModeAssociationRecord);
}

unint64_t sub_1000E53B8()
{
  unint64_t result = qword_1009A0F48;
  if (!qword_1009A0F48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EC0CC, &type metadata for WildModeAssociationRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A0F48);
  }

  return result;
}

uint64_t sub_1000E53FC(uint64_t result, unint64_t a2)
{
  if (((a2 >> 60) | 4) != 0xF) {
    return sub_100016F9C(result, a2);
  }
  return result;
}

unint64_t sub_1000E5414()
{
  unint64_t result = qword_1009A0F50;
  if (!qword_1009A0F50)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EC0A4, &type metadata for UnauthorizedTrackingType);
    atomic_store(result, (unint64_t *)&qword_1009A0F50);
  }

  return result;
}

uint64_t type metadata accessor for WildModeTrackingLocation(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009A1148, (uint64_t)&nominal type descriptor for WildModeTrackingLocation);
}

unint64_t sub_1000E546C()
{
  unint64_t result = qword_1009A0F70;
  if (!qword_1009A0F70)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EC054, &type metadata for WildModeAlertState);
    atomic_store(result, (unint64_t *)&qword_1009A0F70);
  }

  return result;
}

unint64_t sub_1000E54B0()
{
  unint64_t result = qword_1009A0F78;
  if (!qword_1009A0F78)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E7520, &type metadata for Type18Status.DeviceType);
    atomic_store(result, (unint64_t *)&qword_1009A0F78);
  }

  return result;
}

unint64_t sub_1000E54F4()
{
  unint64_t result = qword_1009A0F90;
  if (!qword_1009A0F90)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EC02C, &type metadata for WildModeObservationState);
    atomic_store(result, (unint64_t *)&qword_1009A0F90);
  }

  return result;
}

unint64_t sub_1000E5538()
{
  unint64_t result = qword_1009A0FA0;
  if (!qword_1009A0FA0)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A0F98);
    sub_1000E54F4();
    sub_100007864( &qword_10099DA70,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1009A0FA0);
  }

  return result;
}

uint64_t sub_1000E55BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WildModeAssociationRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1000E5600()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004AEC(&qword_1009B9250);
  __chkstk_darwin(v2);
  uint64_t v4 = &v88[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v5 = type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v88[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = sub_100004AEC(&qword_10099CE68);
  __chkstk_darwin(v9);
  unint64_t v11 = &v88[-((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v12 = type metadata accessor for LocalizationUtility.Table(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = &v88[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  unint64_t v16 = (int *)type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v17 = v16;
  if (*(unsigned __int8 *)(v1 + v16[13]) - 2 < 3)
  {
    uint64_t v92 = v13;
    sub_10001581C(v1 + v16[15], (uint64_t)v11, &qword_10099CE68);
    uint64_t v18 = type metadata accessor for AccessoryProductInfo(0LL);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v18 - 8) + 48LL))(v11, 1LL, v18) != 1)
    {
      uint64_t v39 = (uint64_t *)&v11[*(int *)(v18 + 48)];
      uint64_t v40 = *v39;
      uint64_t v41 = v39[1];
      swift_bridgeObjectRetain(v41);
      uint64_t v42 = type metadata accessor for AccessoryProductInfo;
      uint64_t v43 = (uint64_t)v11;
      goto LABEL_22;
    }

    sub_100015794((uint64_t)v11, &qword_10099CE68);
    sub_10001581C(v1 + v17[14], (uint64_t)v4, &qword_1009B9250);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
    {
      sub_100015794((uint64_t)v4, &qword_1009B9250);
      uint64_t v19 = v1 + v17[12];
      uint64_t v20 = *(void **)(v19 + 16);
      if (v20)
      {
        uint64_t v21 = *(void *)(v19 + 8);
        char v22 = *(_BYTE *)v19;
LABEL_25:
        uint64_t v73 = v92;
        uint64_t v74 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v28 = (void *)swift_allocObject(v74, 72LL, 7LL);
        *((_OWORD *)v28 + 1) = xmmword_1007E67D0;
        uint64_t v75 = (void *)sub_1006054A8(v22, v21, v20);
        id v76 = [v75 description];

        uint64_t v77 = static String._unconditionallyBridgeFromObjectiveC(_:)(v76);
        uint64_t v79 = v78;

        uint64_t v80 = sub_1006E0A6C(v77, v79);
        uint64_t v82 = v81;
        swift_bridgeObjectRelease();
        v28[7] = &type metadata for String;
        v28[8] = sub_1000226F4();
        v28[4] = v80;
        v28[5] = v82;
        unint64_t v71 = 0xD000000000000035LL;
        unint64_t v83 = 0x80000001008541B0LL;
LABEL_31:
        (*(void (**)(_BYTE *, void, uint64_t))(v73 + 104))( v15,  enum case for LocalizationUtility.Table.default(_:),  v12);
        uint64_t v44 = static LocalizationUtility.localizedString(key:table:)(v71, v83, v15);
        uint64_t v46 = v85;
        swift_bridgeObjectRelease();
        (*(void (**)(_BYTE *, uint64_t))(v73 + 8))(v15, v12);
        goto LABEL_32;
      }

      goto LABEL_29;
    }

    sub_10002218C((uint64_t)v4, (uint64_t)v8, type metadata accessor for AccessoryMetadata);
    BOOL v47 = sub_1000E1D48();
    uint64_t v48 = (uint64_t *)&v8[*(int *)(v5 + 28)];
    if (v47)
    {
      uint64_t v49 = (void *)v48[1];
      unint64_t v91 = (unint64_t)"WING_SUBTITLE_HAWKEYE";
      if (v49)
      {
        uint64_t v50 = *v48;
        unint64_t v93 = 0LL;
        unint64_t v94 = 0xE000000000000000LL;
        swift_bridgeObjectRetain(v49);
        _StringGuts.grow(_:)(31LL);
        swift_bridgeObjectRelease();
        unint64_t v93 = 0xD00000000000001DLL;
        unint64_t v94 = 0x8000000100853140LL;
        v51._countAndFlagsBits = v50;
        v51._object = v49;
        String.append(_:)(v51);
        swift_bridgeObjectRelease();
        unint64_t v53 = v93;
        unint64_t v52 = v94;
      }

      else
      {
        unint64_t v52 = 0x80000001008530F0LL;
        unint64_t v53 = 0xD00000000000001CLL;
      }

      uint64_t v54 = v92;
      uint64_t v55 = *(void (**)(_BYTE *))(v92 + 104);
      unsigned int v89 = enum case for LocalizationUtility.Table.default(_:);
      v55(v15);
      uint64_t v40 = static LocalizationUtility.localizedString(key:table:)(v53, v52, v15);
      uint64_t v56 = v54;
      uint64_t v41 = v57;
      uint64_t v90 = *(void (**)(_BYTE *, uint64_t))(v56 + 8);
      v90(v15, v12);
      if (v40 == v53 && v41 == v52)
      {
        swift_bridgeObjectRelease();
LABEL_20:
        swift_bridgeObjectRelease();
        ((void (*)(_BYTE *, void, uint64_t))v55)(v15, v89, v12);
        uint64_t v40 = static LocalizationUtility.localizedString(key:table:)( 0xD00000000000001CLL,  v91 | 0x8000000000000000LL,  v15);
        uint64_t v41 = v59;
        v90(v15, v12);
        goto LABEL_21;
      }

      char v58 = _stringCompareWithSmolCheck(_:_:expecting:)(v40, v41, v53, v52, 0LL);
      swift_bridgeObjectRelease();
      if ((v58 & 1) != 0) {
        goto LABEL_20;
      }
    }

    else
    {
      uint64_t v40 = *v48;
      uint64_t v41 = v48[1];
      swift_bridgeObjectRetain(v41);
    }

uint64_t sub_1000E5DB4()
{
  uint64_t v1 = sub_100004AEC(&qword_1009B9250);
  __chkstk_darwin(v1);
  uint64_t v3 = (char *)&v18 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC(&qword_10099CE68);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v18 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for AccessoryProductInfo(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for WildModeAssociationRecord(0LL);
  sub_10001581C(v0 + *(int *)(v11 + 60), (uint64_t)v6, &qword_10099CE68);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
  {
    sub_100015794((uint64_t)v6, &qword_10099CE68);
    sub_10001581C(v0 + *(int *)(v11 + 56), (uint64_t)v3, &qword_1009B9250);
    uint64_t v12 = type metadata accessor for AccessoryMetadata(0LL);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v12 - 8) + 48LL))(v3, 1LL, v12) == 1)
    {
      sub_100015794((uint64_t)v3, &qword_1009B9250);
      return 0LL;
    }

    else
    {
      uint64_t v14 = &v3[*(int *)(v12 + 48)];
      unsigned int v15 = *(_DWORD *)v14;
      char v16 = v14[4];
      sub_100018C68((uint64_t)v3, type metadata accessor for AccessoryMetadata);
      if ((v16 & 1) != 0) {
        return 0LL;
      }
      else {
        return (v15 >> 8) & 1;
      }
    }
  }

  else
  {
    sub_10002218C((uint64_t)v6, (uint64_t)v10, type metadata accessor for AccessoryProductInfo);
    uint64_t v13 = (*(_DWORD *)&v10[*(int *)(v7 + 84)] >> 8) & 1;
    sub_100018C68((uint64_t)v10, type metadata accessor for AccessoryProductInfo);
  }

  return v13;
}

BOOL sub_1000E5FA0()
{
  uint64_t v1 = (int *)type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v2 = (_BYTE *)(v0 + v1[22]);
  if ((v2[1] & 1) != 0)
  {
    if ((*(_BYTE *)(v0 + v1[21]) & 1) != 0) {
      return 0LL;
    }
    return (*(_BYTE *)(v0 + v1[13]) & 0xFD) != 4;
  }

  if ((*(_BYTE *)(v0 + v1[21]) & 1) == 0) {
    return (*(_BYTE *)(v0 + v1[13]) & 0xFD) != 4;
  }
  return *v2 == 1;
}

uint64_t sub_1000E6010()
{
  uint64_t v1 = (int *)type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v2 = (_BYTE *)(v0 + v1[22]);
  if (v2[1] == 1)
  {
    if ((*(_BYTE *)(v0 + v1[21]) & 1) != 0) {
      return 6LL;
    }
    return *(unsigned __int8 *)(v0 + v1[13]);
  }

  if ((*(_BYTE *)(v0 + v1[21]) & 1) == 0) {
    return *(unsigned __int8 *)(v0 + v1[13]);
  }
  if (*v2 == 1) {
    return 5LL;
  }
  return 6LL;
}

uint64_t sub_1000E6078@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = (int *)type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v4 = (_BYTE *)(v1 + v3[22]);
  if ((v4[1] & 1) != 0)
  {
    if ((*(_BYTE *)(v1 + v3[21]) & 1) != 0) {
      goto LABEL_9;
    }
  }

  else if ((*(_BYTE *)(v1 + v3[21]) & 1) != 0)
  {
    if (*v4 != 1)
    {
LABEL_9:
      uint64_t v12 = v1 + v3[7];
      uint64_t v13 = type metadata accessor for MACAddress(0LL);
      uint64_t v14 = *(void *)(v13 - 8);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(a1, v12, v13);
      uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
      uint64_t v7 = a1;
      uint64_t v8 = 0LL;
      uint64_t v5 = v13;
      return v6(v7, v8, 1LL, v5);
    }

unint64_t sub_1000E6168()
{
  unint64_t result = qword_1009A0FB0;
  if (!qword_1009A0FB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EC004, &type metadata for UnauthorizedTrackingType);
    atomic_store(result, (unint64_t *)&qword_1009A0FB0);
  }

  return result;
}

unint64_t sub_1000E61AC()
{
  unint64_t result = qword_1009A0FC0;
  if (!qword_1009A0FC0)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A0FB8);
    sub_1000B73A4();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> A?, v1);
    atomic_store(result, (unint64_t *)&qword_1009A0FC0);
  }

  return result;
}

uint64_t sub_1000E6210(unint64_t *a1, unint64_t *a2, uint64_t a3, uint64_t a4)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v9 = sub_100004B78(&qword_1009A0F58);
    sub_100007864(a2, type metadata accessor for WildModeTrackingLocation, a3);
    uint64_t result = swift_getWitnessTable(a4, v9);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1000E6294()
{
  unint64_t result = qword_1009A0FD8;
  if (!qword_1009A0FD8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EBFB4, &type metadata for WildModeAlertState);
    atomic_store(result, (unint64_t *)&qword_1009A0FD8);
  }

  return result;
}

unint64_t sub_1000E62D8()
{
  unint64_t result = qword_1009A0FE0;
  if (!qword_1009A0FE0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007E74F8, &type metadata for Type18Status.DeviceType);
    atomic_store(result, (unint64_t *)&qword_1009A0FE0);
  }

  return result;
}

unint64_t sub_1000E631C()
{
  unint64_t result = qword_1009A0FF8;
  if (!qword_1009A0FF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EBF8C, &type metadata for WildModeObservationState);
    atomic_store(result, (unint64_t *)&qword_1009A0FF8);
  }

  return result;
}

unint64_t sub_1000E6360()
{
  unint64_t result = qword_1009A1000;
  if (!qword_1009A1000)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A0F98);
    sub_1000E631C();
    sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <> [A : B], v1);
    atomic_store(result, (unint64_t *)&qword_1009A1000);
  }

  return result;
}

void sub_1000E63E4(__int128 *a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v32 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009A59B0);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (unsigned __int8 *)&v32 - v12;
  uint64_t v14 = *(void *)(a2 + 64);
  uint64_t v33 = a2 + 64;
  uint64_t v15 = 1LL << *(_BYTE *)(a2 + 32);
  uint64_t v16 = -1LL;
  if (v15 < 64) {
    uint64_t v16 = ~(-1LL << v15);
  }
  unint64_t v17 = v16 & v14;
  int64_t v34 = (unint64_t)(v15 + 63) >> 6;
  int64_t v32 = v34 - 1;
  uint64_t v36 = a2;
  swift_bridgeObjectRetain(a2);
  int64_t v37 = 0LL;
  uint64_t v35 = v7;
  if (v17)
  {
    unint64_t v18 = __clz(__rbit64(v17)) | (v37 << 6);
LABEL_5:
    char v19 = *(_BYTE *)(*(void *)(v36 + 48) + v18);
    unint64_t v20 = *(void *)(v36 + 56) + *(void *)(v5 + 72) * v18;
    uint64_t v21 = sub_100004AEC(&qword_1009A11F8);
    (*(void (**)(_BYTE *, unint64_t, uint64_t))(v5 + 16))(&v11[*(int *)(v21 + 48)], v20, v4);
    *uint64_t v11 = v19;
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v11, 0LL, 1LL, v21);
    uint64_t v7 = v35;
    goto LABEL_22;
  }

  int64_t v22 = v37 + 1;
  if (__OFADD__(v37, 1LL))
  {
    __break(1u);
LABEL_26:
    __break(1u);
    JUMPOUT(0x1000E6848LL);
  }

  if (v22 < v34)
  {
    unint64_t v23 = *(void *)(v33 + 8 * v22);
    if (v23)
    {
LABEL_9:
      unint64_t v18 = __clz(__rbit64(v23)) + (v22 << 6);
      int64_t v37 = v22;
      goto LABEL_5;
    }

    int64_t v24 = v37 + 2;
    ++v37;
    if (v22 + 1 < v34)
    {
      unint64_t v23 = *(void *)(v33 + 8 * v24);
      if (v23)
      {
        ++v22;
        goto LABEL_9;
      }

      int64_t v25 = v22 + 2;
      int64_t v37 = v22 + 1;
      if (v22 + 2 < v34)
      {
        unint64_t v23 = *(void *)(v33 + 8 * v25);
        if (v23)
        {
          v22 += 2LL;
          goto LABEL_9;
        }

        while (1)
        {
          int64_t v22 = v25 + 1;
          if (__OFADD__(v25, 1LL)) {
            goto LABEL_26;
          }
          if (v22 >= v34) {
            break;
          }
          unint64_t v23 = *(void *)(v33 + 8 * v22);
          ++v25;
          if (v23) {
            goto LABEL_9;
          }
        }

        int64_t v37 = v32;
      }
    }
  }

  uint64_t v26 = sub_100004AEC(&qword_1009A11F8);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v11, 1LL, 1LL, v26);
LABEL_22:
  sub_1000EEA10((uint64_t)v11, (uint64_t)v13);
  uint64_t v27 = sub_100004AEC(&qword_1009A11F8);
  if ((*(unsigned int (**)(unsigned __int8 *, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48LL))( v13,  1LL,  v27) != 1)
  {
    uint64_t v28 = *v13;
    (*(void (**)(char *, unsigned __int8 *, uint64_t))(v5 + 32))(v7, &v13[*(int *)(v27 + 48)], v4);
    uint64_t v29 = *((void *)a1 + 8);
    __int128 v30 = a1[1];
    __int128 v38 = *a1;
    __int128 v39 = v30;
    __int128 v31 = a1[3];
    __int128 v40 = a1[2];
    __int128 v41 = v31;
    uint64_t v42 = v29;
    __asm { BR              X8 }
  }

  swift_release(v36);
  Hasher._combine(_:)(0LL);
}

uint64_t sub_1000E6868(double *a1, double *a2)
{
  if (*a1 != *a2 || a1[1] != a2[1] || a1[2] != a2[2]) {
    return 0LL;
  }
  uint64_t v4 = *(int *)(type metadata accessor for WildModeTrackingLocation(0LL) + 28);
  return static Date.== infix(_:_:)((char *)a1 + v4, (char *)a2 + v4);
}

BOOL sub_1000E68DC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccessoryProductInfo(0LL);
  uint64_t v188 = *(void *)(v4 - 8);
  uint64_t v189 = v4;
  __chkstk_darwin(v4);
  uint64_t v184 = (uint64_t)&v171 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v187 = sub_100004AEC(&qword_1009A1008);
  __chkstk_darwin(v187);
  uint64_t v191 = (uint64_t)&v171 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_10099CE68);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v186 = (uint64_t)&v171 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v192 = (uint64_t)&v171 - v11;
  __chkstk_darwin(v10);
  uint64_t v193 = (uint64_t)&v171 - v12;
  uint64_t v200 = type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v195 = *(void *)(v200 - 8);
  __chkstk_darwin(v200);
  uint64_t v185 = (uint64_t)&v171 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v194 = sub_100004AEC(&qword_1009A1010);
  __chkstk_darwin(v194);
  uint64_t v196 = (uint64_t)&v171 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009B9250);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v190 = (uint64_t)&v171 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  v198 = (char *)&v171 - v19;
  __chkstk_darwin(v18);
  v199 = (char *)&v171 - v20;
  uint64_t v21 = type metadata accessor for Date(0LL);
  uint64_t v204 = *(void *)(v21 - 8);
  uint64_t v205 = v21;
  __chkstk_darwin(v21);
  v197 = (char *)&v171 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = sub_100004AEC((uint64_t *)&unk_10099D760);
  uint64_t v24 = __chkstk_darwin(v23);
  uint64_t v179 = (uint64_t)&v171 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v183 = (uint64_t)&v171 - v27;
  __chkstk_darwin(v26);
  uint64_t v203 = (uint64_t)&v171 - v28;
  uint64_t v29 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v176 = (uint64_t)&v171 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = __chkstk_darwin(v30);
  uint64_t v177 = (uint64_t)&v171 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v178 = (uint64_t)&v171 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v180 = (uint64_t)&v171 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v181 = (uint64_t)&v171 - v39;
  uint64_t v40 = __chkstk_darwin(v38);
  uint64_t v182 = (uint64_t)&v171 - v41;
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v201 = (uint64_t)&v171 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  uint64_t v206 = (uint64_t)&v171 - v45;
  __chkstk_darwin(v44);
  uint64_t v202 = (uint64_t)&v171 - v46;
  uint64_t v47 = type metadata accessor for UUID(0LL);
  uint64_t v48 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  v207 = (char *)&v171 - ((v49 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v50 = sub_100004AEC((uint64_t *)&unk_1009B5370);
  __chkstk_darwin(v50);
  unint64_t v52 = (char *)&v171 - ((v51 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v54 = __chkstk_darwin(v53);
  uint64_t v56 = (char *)&v171 - ((v55 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v57 = __chkstk_darwin(v54);
  uint64_t v59 = (char *)&v171 - v58;
  __chkstk_darwin(v57);
  uint64_t v61 = (char *)&v171 - v60;
  if ((static UUID.== infix(_:_:)(a1, a2) & 1) == 0) {
    return 0LL;
  }
  uint64_t v172 = v23;
  uint64_t v62 = type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v63 = *(int *)(v62 + 20);
  uint64_t v175 = a1;
  sub_10001581C(a1 + v63, (uint64_t)v61, &qword_10099D8A0);
  v173 = (int *)v62;
  uint64_t v64 = *(int *)(v62 + 20);
  uint64_t v174 = a2;
  sub_10001581C(a2 + v64, (uint64_t)v59, &qword_10099D8A0);
  uint64_t v65 = (uint64_t)&v52[*(int *)(v50 + 48)];
  sub_10001581C((uint64_t)v61, (uint64_t)v52, &qword_10099D8A0);
  sub_10001581C((uint64_t)v59, v65, &qword_10099D8A0);
  uint64_t v66 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v48 + 48);
  if (v66((uint64_t)v52, 1LL, v47) == 1)
  {
    sub_100015794((uint64_t)v59, &qword_10099D8A0);
    sub_100015794((uint64_t)v61, &qword_10099D8A0);
    if (v66(v65, 1LL, v47) == 1)
    {
      sub_100015794((uint64_t)v52, &qword_10099D8A0);
      goto LABEL_10;
    }

LABEL_20:
    uint64_t v67 = (uint64_t *)&unk_10099D760;
    uint64_t v68 = v78;
    goto LABEL_8;
  }

  uint64_t v83 = v80;
  uint64_t v84 = v201;
  sub_10001581C(v78, v201, (uint64_t *)&unk_10099D720);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v82)(v79, 1LL, v81) == 1)
  {
    sub_100015794(v206, (uint64_t *)&unk_10099D720);
    sub_100015794(v76, (uint64_t *)&unk_10099D720);
    (*(void (**)(uint64_t, uint64_t))(v83 + 8))(v84, v81);
    goto LABEL_20;
  }

  v207 = v82;
  uint64_t v85 = v76;
  uint64_t v86 = v197;
  (*(void (**)(char *, uint64_t, uint64_t))(v83 + 32))(v197, v79, v81);
  uint64_t v87 = sub_100007864( &qword_10099DA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  char v88 = dispatch thunk of static Equatable.== infix(_:_:)(v84, v86, v81, v87);
  unsigned int v89 = *(void (**)(char *, uint64_t))(v83 + 8);
  v89(v86, v81);
  sub_100015794(v206, (uint64_t *)&unk_10099D720);
  sub_100015794(v85, (uint64_t *)&unk_10099D720);
  v89((char *)v84, v81);
  uint64_t v74 = v175;
  sub_100015794(v78, (uint64_t *)&unk_10099D720);
  if ((v88 & 1) == 0) {
    return 0LL;
  }
LABEL_22:
  uint64_t v90 = v73[12];
  unint64_t v91 = (void *)(v74 + v90);
  uint64_t v92 = *(void *)(v74 + v90 + 16);
  unint64_t v93 = (void *)(v75 + v90);
  uint64_t v94 = v93[2];
  if (!v92)
  {
    uint64_t v96 = (uint64_t)v199;
    uint64_t v95 = v200;
    uint64_t v97 = (uint64_t)v198;
    if (v94) {
      return 0LL;
    }
LABEL_30:
    uint64_t v102 = v73[13];
    int v103 = *(unsigned __int8 *)(v74 + v102);
    int v104 = *(unsigned __int8 *)(v75 + v102);
    if (v103 == 4)
    {
      if (v104 != 4) {
        return 0LL;
      }
    }

    else
    {
      BOOL result = 0LL;
      if (v104 == 4 || v103 != v104) {
        return result;
      }
    }

    sub_10001581C(v74 + v73[14], v96, &qword_1009B9250);
    sub_10001581C(v75 + v73[14], v97, &qword_1009B9250);
    uint64_t v105 = v196;
    uint64_t v106 = v196 + *(int *)(v194 + 48);
    sub_10001581C(v96, v196, &qword_1009B9250);
    uint64_t v107 = v105;
    sub_10001581C(v97, v106, &qword_1009B9250);
    uint64_t v108 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v195 + 48);
    if (v108(v107, 1LL, v95) == 1)
    {
      sub_100015794(v97, &qword_1009B9250);
      sub_100015794(v96, &qword_1009B9250);
      if (v108(v106, 1LL, v95) == 1)
      {
        sub_100015794(v196, &qword_1009B9250);
        goto LABEL_42;
      }
    }

    else
    {
      uint64_t v109 = v107;
      uint64_t v110 = v190;
      sub_10001581C(v109, v190, &qword_1009B9250);
      if (v108(v106, 1LL, v95) != 1)
      {
        uint64_t v111 = v185;
        sub_10002218C(v106, v185, type metadata accessor for AccessoryMetadata);
        char v112 = sub_10008BB94(v110, v111);
        sub_100018C68(v111, type metadata accessor for AccessoryMetadata);
        sub_100015794(v97, &qword_1009B9250);
        sub_100015794(v96, &qword_1009B9250);
        sub_100018C68(v110, type metadata accessor for AccessoryMetadata);
        sub_100015794(v196, &qword_1009B9250);
        if ((v112 & 1) == 0) {
          return 0LL;
        }
LABEL_42:
        uint64_t v113 = v193;
        sub_10001581C(v175 + v73[15], v193, &qword_10099CE68);
        uint64_t v114 = v192;
        sub_10001581C(v75 + v73[15], v192, &qword_10099CE68);
        uint64_t v115 = v191;
        uint64_t v116 = v191 + *(int *)(v187 + 48);
        sub_10001581C(v113, v191, &qword_10099CE68);
        sub_10001581C(v114, v116, &qword_10099CE68);
        uint64_t v117 = v189;
        uint64_t v118 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v188 + 48);
        if (v118(v115, 1LL, v189) == 1)
        {
          sub_100015794(v192, &qword_10099CE68);
          sub_100015794(v193, &qword_10099CE68);
          if (v118(v116, 1LL, v117) == 1)
          {
            sub_100015794(v115, &qword_10099CE68);
            goto LABEL_49;
          }
        }

        else
        {
          sub_10001581C(v115, v186, &qword_10099CE68);
          if (v118(v116, 1LL, v117) != 1)
          {
            uint64_t v119 = v184;
            sub_10002218C(v116, v184, type metadata accessor for AccessoryProductInfo);
            uint64_t v120 = v186;
            char v121 = sub_100746654(v186, v119);
            sub_100018C68(v119, type metadata accessor for AccessoryProductInfo);
            sub_100015794(v192, &qword_10099CE68);
            sub_100015794(v193, &qword_10099CE68);
            sub_100018C68(v120, type metadata accessor for AccessoryProductInfo);
            sub_100015794(v191, &qword_10099CE68);
            if ((v121 & 1) == 0) {
              return 0LL;
            }
LABEL_49:
            uint64_t v122 = v173[16];
            int v123 = *(unsigned __int8 *)(v175 + v122);
            int v124 = *(unsigned __int8 *)(v174 + v122);
            if (v123 == 8)
            {
              if (v124 != 8) {
                return 0LL;
              }
            }

            else
            {
              if (v124 == 8) {
                return 0LL;
              }
              sub_100306D74(v123);
              if ((v125 & 1) == 0) {
                return 0LL;
              }
            }

            if ((sub_1001D337C(*(void *)(v175 + v173[17]), *(void *)(v174 + v173[17])) & 1) == 0) {
              return 0LL;
            }
            __int16 v126 = v173;
            uint64_t v127 = v182;
            sub_10001581C(v175 + v173[18], v182, (uint64_t *)&unk_10099D720);
            uint64_t v128 = v181;
            sub_10001581C(v174 + v126[18], v181, (uint64_t *)&unk_10099D720);
            uint64_t v129 = v183;
            uint64_t v130 = v183 + *(int *)(v172 + 48);
            sub_10001581C(v127, v183, (uint64_t *)&unk_10099D720);
            sub_10001581C(v128, v130, (uint64_t *)&unk_10099D720);
            if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v207)(v129, 1LL, v205) == 1)
            {
              sub_100015794(v181, (uint64_t *)&unk_10099D720);
              sub_100015794(v182, (uint64_t *)&unk_10099D720);
              if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v207)(v130, 1LL, v205) == 1)
              {
                sub_100015794(v183, (uint64_t *)&unk_10099D720);
LABEL_62:
                uint64_t v138 = v173;
                uint64_t v139 = v178;
                sub_10001581C(v175 + v173[19], v178, (uint64_t *)&unk_10099D720);
                uint64_t v140 = v177;
                sub_10001581C(v174 + v138[19], v177, (uint64_t *)&unk_10099D720);
                uint64_t v141 = v179;
                uint64_t v142 = v179 + *(int *)(v172 + 48);
                sub_10001581C(v139, v179, (uint64_t *)&unk_10099D720);
                sub_10001581C(v140, v142, (uint64_t *)&unk_10099D720);
                if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v207)(v141, 1LL, v205) == 1)
                {
                  sub_100015794(v177, (uint64_t *)&unk_10099D720);
                  sub_100015794(v178, (uint64_t *)&unk_10099D720);
                  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v207)(v142, 1LL, v205) == 1)
                  {
                    sub_100015794(v179, (uint64_t *)&unk_10099D720);
LABEL_69:
                    uint64_t v150 = v173[20];
                    uint64_t v151 = v175 + v150;
                    unint64_t v152 = *(void *)(v175 + v150 + 8);
                    uint64_t v153 = (uint64_t *)(v174 + v150);
                    unint64_t v154 = v153[1];
                    if (v152 >> 60 == 11)
                    {
                      if (v154 >> 60 != 11) {
                        return 0LL;
                      }
                    }

                    else if (v152 >> 60 == 15)
                    {
                      if (v154 >> 60 != 15) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      if (((v154 >> 60) | 4) == 0xF) {
                        return 0LL;
                      }
                      uint64_t v155 = *(void *)v151;
                      uint64_t v156 = *v153;
                      sub_1000E7D3C(*(void *)v151, *(void *)(v151 + 8));
                      sub_1000E7D3C(v156, v154);
                      _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v155, v152);
                      char v158 = v157;
                      sub_1000E53FC(v156, v154);
                      sub_1000E53FC(v155, v152);
                      if ((v158 & 1) == 0) {
                        return 0LL;
                      }
                    }

                    uint64_t v159 = v173[21];
                    int v160 = *(unsigned __int8 *)(v175 + v159);
                    int v161 = *(unsigned __int8 *)(v174 + v159);
                    if (v160 == 2)
                    {
                      uint64_t v162 = v174;
                      uint64_t v163 = v175;
                      v164 = v173;
                      if (v161 != 2) {
                        return 0LL;
                      }
                    }

                    else
                    {
                      BOOL result = 0LL;
                      BOOL v165 = (v160 & 1) == 0;
                      if (v161 == 2) {
                        return result;
                      }
                      char v166 = v165 ^ v161;
                      uint64_t v162 = v174;
                      uint64_t v163 = v175;
                      v164 = v173;
                      if ((v166 & 1) == 0) {
                        return result;
                      }
                    }

                    uint64_t v167 = v164[22];
                    char v168 = (unsigned __int8 *)(v163 + v167);
                    v169 = (unsigned __int8 *)(v162 + v167);
                    char v170 = v169[1];
                    if ((v168[1] & 1) == 0)
                    {
                      if (*v168 != *v169) {
                        char v170 = 1;
                      }
                      return (v170 & 1) == 0;
                    }

                    return (v169[1] & 1) != 0;
                  }
                }

                else
                {
                  sub_10001581C(v179, v176, (uint64_t *)&unk_10099D720);
                  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v207)(v142, 1LL, v205) != 1)
                  {
                    uint64_t v143 = v204;
                    uint64_t v144 = v205;
                    uint64_t v145 = v197;
                    (*(void (**)(char *, uint64_t, uint64_t))(v204 + 32))(v197, v142, v205);
                    uint64_t v146 = sub_100007864( &qword_10099DA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
                    uint64_t v147 = v176;
                    char v148 = dispatch thunk of static Equatable.== infix(_:_:)(v176, v145, v144, v146);
                    v149 = *(void (**)(char *, uint64_t))(v143 + 8);
                    v149(v145, v144);
                    sub_100015794(v177, (uint64_t *)&unk_10099D720);
                    sub_100015794(v178, (uint64_t *)&unk_10099D720);
                    v149((char *)v147, v144);
                    sub_100015794(v179, (uint64_t *)&unk_10099D720);
                    if ((v148 & 1) == 0) {
                      return 0LL;
                    }
                    goto LABEL_69;
                  }

                  sub_100015794(v177, (uint64_t *)&unk_10099D720);
                  sub_100015794(v178, (uint64_t *)&unk_10099D720);
                  (*(void (**)(uint64_t, uint64_t))(v204 + 8))(v176, v205);
                }

                uint64_t v67 = (uint64_t *)&unk_10099D760;
                uint64_t v68 = v179;
LABEL_8:
                sub_100015794(v68, v67);
                return 0LL;
              }
            }

            else
            {
              sub_10001581C(v183, v180, (uint64_t *)&unk_10099D720);
              if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v207)(v130, 1LL, v205) != 1)
              {
                uint64_t v131 = v204;
                uint64_t v132 = v205;
                uint64_t v133 = v197;
                (*(void (**)(char *, uint64_t, uint64_t))(v204 + 32))(v197, v130, v205);
                uint64_t v134 = sub_100007864( &qword_10099DA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
                uint64_t v135 = v180;
                char v136 = dispatch thunk of static Equatable.== infix(_:_:)(v180, v133, v132, v134);
                uint64_t v137 = *(void (**)(char *, uint64_t))(v131 + 8);
                v137(v133, v132);
                sub_100015794(v181, (uint64_t *)&unk_10099D720);
                sub_100015794(v182, (uint64_t *)&unk_10099D720);
                v137((char *)v135, v132);
                sub_100015794(v183, (uint64_t *)&unk_10099D720);
                if ((v136 & 1) == 0) {
                  return 0LL;
                }
                goto LABEL_62;
              }

              sub_100015794(v181, (uint64_t *)&unk_10099D720);
              sub_100015794(v182, (uint64_t *)&unk_10099D720);
              (*(void (**)(uint64_t, uint64_t))(v204 + 8))(v180, v205);
            }

            uint64_t v67 = (uint64_t *)&unk_10099D760;
            uint64_t v68 = v183;
            goto LABEL_8;
          }

          sub_100015794(v192, &qword_10099CE68);
          sub_100015794(v193, &qword_10099CE68);
          sub_100018C68(v186, type metadata accessor for AccessoryProductInfo);
          uint64_t v115 = v191;
        }

        uint64_t v67 = &qword_1009A1008;
        uint64_t v68 = v115;
        goto LABEL_8;
      }

      sub_100015794(v97, &qword_1009B9250);
      sub_100015794(v96, &qword_1009B9250);
      sub_100018C68(v110, type metadata accessor for AccessoryMetadata);
    }

    uint64_t v67 = &qword_1009A1010;
    uint64_t v68 = v196;
    goto LABEL_8;
  }

  uint64_t v96 = (uint64_t)v199;
  uint64_t v95 = v200;
  uint64_t v97 = (uint64_t)v198;
  uint64_t v98 = v91[1];
  uint64_t v99 = v93[1];
  if (v98 == v99 && v92 == v94) {
    goto LABEL_30;
  }
  char v100 = _stringCompareWithSmolCheck(_:_:expecting:)(v98, v92, v99, v94, 0LL);
  BOOL result = 0LL;
  if ((v100 & 1) != 0) {
    goto LABEL_30;
  }
  return result;
}

    v36(v50, v7);
    goto LABEL_21;
  }

  uint64_t v60 = v79;
  v81(v79, v25, v7);
  swift_errorRetain(a2);
  swift_errorRetain(a2);
  uint64_t v61 = swift_errorRetain(a2);
  uint64_t v62 = (os_log_s *)Logger.logObject.getter(v61);
  uint64_t v63 = static os_log_type_t.error.getter(v62);
  if (os_log_type_enabled(v62, v63))
  {
    uint64_t v64 = swift_slowAlloc(22LL, -1LL);
    uint64_t v65 = v36;
    uint64_t v66 = swift_slowAlloc(64LL, -1LL);
    uint64_t v87 = v66;
    *(_DWORD *)uint64_t v64 = 136315394;
    uint64_t v67 = sub_1000F620C();
    uint64_t v68 = dispatch thunk of CustomStringConvertible.description.getter(v7, v67);
    uint64_t v86 = sub_1003F11D4(v68, v69, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v64 + 4, v64 + 12);
    swift_bridgeObjectRelease();
    v65(v60, v7);
    *(_WORD *)(v64 + 12) = 2080;
    uint64_t v86 = a2;
    swift_errorRetain(a2);
    uint64_t v70 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    char v71 = String.init<A>(describing:)(&v86, v70);
    uint64_t v86 = sub_1003F11D4(v71, v72, &v87);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v64 + 14, v64 + 22);
    swift_bridgeObjectRelease();
    swift_errorRelease(a2);
    swift_errorRelease(a2);
    _os_log_impl( (void *)&_mh_execute_header,  v62,  v63,  "didCompletePlayingUnauthorizedSoundOnDevice %s failed due to %s",  (uint8_t *)v64,  0x16u);
    swift_arrayDestroy(v66, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1LL, -1LL);
    swift_slowDealloc(v64, -1LL, -1LL);

    swift_errorRelease(a2);
  }

  else
  {
    swift_errorRelease(a2);
    v36(v60, v7);
    swift_errorRelease(a2);
    swift_errorRelease(a2);
  }

  __break(1u);
LABEL_21:
  uint64_t v18 = 2;
  BOOL result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v18,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_21:
  uint64_t v26 = 2;
  BOOL result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v26,  1092LL,  0);
  __break(1u);
  return result;
}

  __break(1u);
LABEL_21:
  uint64_t v27 = 2;
  BOOL result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.initialize overlapping range",  49LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v27,  1092LL,  0);
  __break(1u);
  return result;
}

    uint64_t v3 = (v9 - 1) & v9;
  }

  uint64_t v10 = v8 + 4;
  if (v10 >= v25)
  {
LABEL_32:
    swift_release();
    return;
  }

  uint64_t v9 = *(void *)(v24 + 8 * v10);
  if (v9)
  {
    uint64_t v4 = v10;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v4 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      break;
    }
    if (v4 >= v25) {
      goto LABEL_32;
    }
    uint64_t v9 = *(void *)(v24 + 8 * v4);
    ++v10;
    if (v9) {
      goto LABEL_20;
    }
  }

    uint64_t v22 = v21;
    goto LABEL_21;
  }

  uint64_t v19 = *(void *)(*(void *)(v16 + 56) + 8 * v17);
  sub_100008FA8();
  uint64_t v20 = swift_bridgeObjectRetain(v19);
  uint64_t v21 = Array<A>.mean.getter(v20);
  swift_bridgeObjectRelease();
  if (v9 > v15) {
    uint64_t v22 = v9;
  }
  else {
    uint64_t v22 = v15;
  }
  if (v22 <= v21) {
    goto LABEL_20;
  }
LABEL_21:
  uint64_t v23 = (double *)(v0 + 40);
  if (qword_10099B1C8 != -1) {
    swift_once(&qword_10099B1C8, sub_10020FF78);
  }
  uint64_t v24 = *v1;
  uint64_t v25 = type metadata accessor for Logger(0LL);
  sub_10000A720(v25, (uint64_t)qword_100A2A370);
  uint64_t v26 = swift_retain_n(v24, 2LL);
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  uint64_t v28 = static os_log_type_t.default.getter(v27);
  uint64_t v29 = os_log_type_enabled(v27, v28);
  uint64_t v30 = *v1;
  if (v29)
  {
    uint64_t v65 = v2;
    uint64_t v31 = swift_slowAlloc(62LL, -1LL);
    log = (os_log_t)swift_slowAlloc(32LL, -1LL);
    uint64_t v68 = (uint64_t)log;
    *(_DWORD *)uint64_t v31 = 134219267;
    char *v23 = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v31 + 4, v31 + 12);
    *(_WORD *)(v31 + 12) = 2048;
    char *v23 = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v31 + 14, v31 + 22);
    *(_WORD *)(v31 + 22) = 2048;
    char *v23 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v31 + 24, v31 + 32);
    *(_WORD *)(v31 + 32) = 2048;
    char *v23 = v22;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v31 + 34, v31 + 42);
    *(_WORD *)(v31 + 42) = 2160;
    *(void *)uint64_t v23 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v31 + 44, v31 + 52);
    *(_WORD *)(v31 + 52) = 2081;
    uint64_t v32 = type metadata accessor for UUID(0LL);
    uint64_t v33 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter(v32, v33);
    *(void *)uint64_t v23 = sub_1003F11D4(v34, v35, &v68);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v31 + 54, v31 + 62);
    swift_bridgeObjectRelease();
    swift_release_n(v30, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "channel37Average: %f. channel38Average: %f. channel39Average: %f. filteredRSSI: %f. Beacon %{private,mask.hash}s",  (uint8_t *)v31,  0x3Eu);
    swift_arrayDestroy(log, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(log, -1LL, -1LL);
    uint64_t v36 = v31;
    uint64_t v2 = v65;
    swift_slowDealloc(v36, -1LL, -1LL);
  }

  else
  {
    swift_release_n(*v1, 2LL);
  }

  uint64_t v37 = *v1;
  uint64_t v38 = *(void *)(*v1 + 112LL);
  uint64_t v39 = *(void *)(v38 + 16);
  if (!v39)
  {
    __break(1u);
    goto LABEL_53;
  }

  if (*(double *)(v38 + 32) >= v22)
  {
    if (v39 < 2)
    {
LABEL_56:
      __break(1u);
      goto LABEL_57;
    }

    else {
      uint64_t v40 = 2LL;
    }
  }

  else
  {
    uint64_t v40 = 0LL;
  }

  uint64_t v41 = OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_lastProximityLevel;
  uint64_t v42 = *(void *)(v37 + OBJC_IVAR____TtC12searchpartyd12BTRSSIFilter_lastProximityLevel);
  if (v42 == 2) {
    goto LABEL_46;
  }
  if (__OFSUB__(v40, v42))
  {
LABEL_57:
    __break(1u);
    goto LABEL_58;
  }

  if (v40 - v42 != 1) {
    goto LABEL_46;
  }
  if ((v42 & 0x8000000000000000LL) != 0)
  {
LABEL_58:
    __break(1u);
    goto LABEL_59;
  }

  uint64_t v43 = *(void *)(v37 + 120);
  if (v42 < *(void *)(v43 + 16))
  {
    uint64_t v44 = *(double *)(v43 + 8 * v42 + 32);
    uint64_t v45 = swift_retain_n(*v1, 2LL);
    uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    uint64_t v47 = static os_log_type_t.debug.getter(v46);
    uint64_t v48 = os_log_type_enabled(v46, v47);
    uint64_t v49 = *v1;
    if (v22 >= v44)
    {
      if (v48)
      {
        uint64_t v56 = swift_slowAlloc(22LL, -1LL);
        uint64_t v67 = swift_slowAlloc(32LL, -1LL);
        uint64_t v68 = v67;
        *(_DWORD *)uint64_t v56 = 141558275;
        *(void *)uint64_t v23 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v56 + 4, v56 + 12);
        *(_WORD *)(v56 + 12) = 2081;
        typea = v47;
        uint64_t v57 = type metadata accessor for UUID(0LL);
        uint64_t v58 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter(v57, v58);
        *(void *)uint64_t v23 = sub_1003F11D4(v59, v60, &v68);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v56 + 14, v56 + 22);
        swift_bridgeObjectRelease();
        swift_release_n(v49, 2LL);
        _os_log_impl( (void *)&_mh_execute_header,  v46,  typea,  "RSSI decrease is NOT small enough to switch to the lower level. Beacon: %{private,mask.hash}s.",  (uint8_t *)v56,  0x16u);
        swift_arrayDestroy(v67, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v67, -1LL, -1LL);
        swift_slowDealloc(v56, -1LL, -1LL);
      }

      else
      {
        swift_release_n(*v1, 2LL);
      }

LABEL_47:
      *(void *)uint64_t v2 = &_swiftEmptyDictionarySingleton;
      swift_bridgeObjectRelease();
      if ((~*(void *)&v22 & 0x7FF0000000000000LL) != 0)
      {
        if (v22 > -9.22337204e18)
        {
          if (v22 < 9.22337204e18)
          {
            (*(void (**)(void, void, uint64_t))(v0 + 8))(*(void *)(v37 + v41), 0LL, (uint64_t)v22);
            return;
          }

          goto LABEL_55;
        }

    uint64_t v13 = (v18 - 1) & v18;
    uint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_5:
    sub_10001DC4C( *(void *)(a3 + 48) + *(void *)(v5 + 72) * v15,  (uint64_t)v8,  type metadata accessor for RawSearchResult);
    uint64_t v16 = v8[*(int *)(v4 + 36)];
    BOOL result = (char *)sub_100018C68((uint64_t)v8, type metadata accessor for RawSearchResult);
    if (v16 != 15)
    {
      *(unint64_t *)((char *)v23 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      if (__OFADD__(v24++, 1LL))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        return sub_100546770(v23, v22, v24, a3);
      }
    }
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v26) {
    goto LABEL_24;
  }
  uint64_t v18 = *(void *)(v25 + 8 * v19);
  if (v18)
  {
    uint64_t v9 = v19;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v26) {
      goto LABEL_24;
    }
    uint64_t v18 = *(void *)(v25 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_20;
    }
  }

    uint64_t v43 = (v27 - 1) & v27;
    uint64_t v44 = v28;
    uint64_t v19 = __clz(__rbit64(v27)) + (v28 << 6);
LABEL_5:
    uint64_t v20 = v42;
    uint64_t v21 = (void (*)(char *, unint64_t, uint64_t))v15[2];
    v21(v17, v42[6] + v15[9] * v19, v16);
    uint64_t v22 = *(void *)(v20[7] + 8 * v19);
    v21((char *)v14, (unint64_t)v17, v16);
    uint64_t v23 = *(int *)(v41 + 48);
    *(void *)(v14 + v23) = v22;
    v21(v18, v14, v16);
    *(void *)&v18[v23] = v22;
    uint64_t v24 = *(void *)(v22 + 16);
    swift_bridgeObjectRetain_n(v22, 2LL);
    sub_100015794(v14, &qword_1009A6610);
    uint64_t v25 = (void (*)(char *, uint64_t))v15[1];
    v25(v18, v16);
    swift_bridgeObjectRelease();
    BOOL result = ((uint64_t (*)(char *, uint64_t))v25)(v17, v16);
    uint64_t v9 = v44;
    uint64_t v13 = v43;
    if (v24)
    {
      *(unint64_t *)((char *)v32 + ((v19 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v19;
      if (__OFADD__(v33++, 1LL))
      {
        __break(1u);
        return sub_10023F6C0(v32, v31, v33, v42);
      }
    }
  }

  uint64_t v29 = v9 + 4;
  if (v9 + 4 >= v35) {
    return sub_10023F6C0(v32, v31, v33, v42);
  }
  uint64_t v27 = *(void *)(v34 + 8 * v29);
  if (v27)
  {
    uint64_t v28 = v9 + 4;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v28 = v29 + 1;
    if (__OFADD__(v29, 1LL)) {
      break;
    }
    if (v28 >= v35) {
      return sub_10023F6C0(v32, v31, v33, v42);
    }
    uint64_t v27 = *(void *)(v34 + 8 * v28);
    ++v29;
    if (v27) {
      goto LABEL_20;
    }
  }

    uint64_t v8 = (v15 - 1) & v15;
    uint64_t v11 = __clz(__rbit64(v15)) + (v4 << 6);
LABEL_5:
    uint64_t v12 = *(id *)(*(void *)(a3 + 48) + 8 * v11);
    uint64_t v13 = [v12 role];

    if (v13)
    {

      *(unint64_t *)((char *)a1 + ((v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v11;
      if (__OFADD__(v20++, 1LL))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        sub_1005469F0(a1, a2, v20, a3);
        return;
      }
    }
  }

  uint64_t v16 = v14 + 3;
  if (v16 >= v9) {
    goto LABEL_24;
  }
  uint64_t v15 = *(void *)(v5 + 8 * v16);
  if (v15)
  {
    uint64_t v4 = v16;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v4 = v16 + 1;
    if (__OFADD__(v16, 1LL)) {
      break;
    }
    if (v4 >= v9) {
      goto LABEL_24;
    }
    uint64_t v15 = *(void *)(v5 + 8 * v4);
    ++v16;
    if (v15) {
      goto LABEL_20;
    }
  }

          uint64_t v50 = v331;
          uint64_t v84 = (uint64_t)v335;
          uint64_t v75 = sub_1004E55A0(v335[v331[6]], (uint64_t)v78);
          swift_bridgeObjectRelease();
          if ((v75 & 1) != 0)
          {
            uint64_t v80 = type metadata accessor for BeaconObservation;
            sub_10002218C(v84, v334, type metadata accessor for BeaconObservation);
            uint64_t v78 = (void *)v348;
            if ((swift_isUniquelyReferenced_nonNull_native(v348) & 1) == 0)
            {
              uint64_t v75 = (uint64_t)&v348;
              sub_100032AA8(0, v78[2] + 1LL, 1);
              uint64_t v78 = (void *)v348;
            }

            uint64_t v98 = v78[2];
            uint64_t v97 = v78[3];
            if (v98 >= v97 >> 1)
            {
              uint64_t v75 = (uint64_t)&v348;
              sub_100032AA8(v97 > 1, v98 + 1, 1);
              uint64_t v78 = (void *)v348;
            }

            v78[2] = v98 + 1;
            sub_10002218C(v334, (uint64_t)v338 + (void)v78 + v98 * v337, type metadata accessor for BeaconObservation);
          }

          else
          {
            uint64_t v80 = type metadata accessor for BeaconObservation;
            sub_100018C68(v84, type metadata accessor for BeaconObservation);
          }

          uint64_t v46 = v332;
          uint64_t v77 = v330;
          uint64_t v79 = v339;
          if (v339 == v333)
          {
            uint64_t v78 = (void *)v348;
            uint64_t v56 = v322;
            uint64_t v59 = v326;
            uint64_t v57 = v321;
            uint64_t v2 = v290;
            uint64_t v72 = (uint64_t)v323;
            break;
          }
        }
      }

      swift_release();
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v78 = _swiftEmptyArrayStorage;
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v78 = _swiftEmptyArrayStorage;
    uint64_t v72 = (uint64_t)v323;
  }

  objc_autoreleasePoolPop(v320);
  sub_1000F0A44((uint64_t)v78, v72);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v336 + 48))(v72, 1LL, v50) == 1)
  {
    sub_100015794(v72, (uint64_t *)&unk_1009A5990);
    goto LABEL_41;
  }

  (*(void (**)(char *, uint64_t))(v57 + 8))(v59, v56);
  uint64_t v99 = v315;
  sub_10002218C(v72, v315, type metadata accessor for BeaconObservation);
  char v100 = *(unsigned __int8 *)(v99 + v50[6]);
  if (v100 == 23)
  {
    uint64_t v101 = 4LL;
LABEL_39:
    v351 = v101;
    goto LABEL_40;
  }

  if (v100 == 24)
  {
    uint64_t v101 = 1LL;
    goto LABEL_39;
  }

  if (v100 != 25)
  {
    uint64_t v101 = 2LL;
    goto LABEL_39;
  }

  v351 = 0LL;
LABEL_40:
  (*(void (**)(char *, uint64_t, uint64_t))(v57 + 16))(v59, v99 + v50[5], v56);
  sub_100018C68(v99, type metadata accessor for BeaconObservation);
LABEL_41:
  uint64_t v50 = v2;
  sub_100504C28(v329, (uint64_t)&v348);
  uint64_t v83 = &qword_1009AA000;
  uint64_t v81 = &off_10099B000;
  uint64_t v84 = v324;
  uint64_t v102 = v325;
  if (!v349)
  {
    sub_100015794((uint64_t)&v348, (uint64_t *)&unk_1009A9C40);
    goto LABEL_51;
  }

  sub_100012EC0(&v348, (uint64_t)&v340);
  int v103 = v341;
  int v104 = v342;
  sub_100012ED8(&v340, v341);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v104 + 120))(v103, v104) & 1) != 0)
  {
    uint64_t v105 = v341;
    uint64_t v106 = v342;
    sub_100012ED8(&v340, v341);
    uint64_t v107 = v105;
    uint64_t v108 = (uint64_t)v313;
    (*(void (**)(uint64_t, uint64_t))(v106 + 192))(v107, v106);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v102 + 48))(v108, 1LL, v84) == 1)
    {
      uint64_t v109 = &qword_10099D8A0;
LABEL_48:
      uint64_t v111 = v108;
LABEL_49:
      sub_100015794(v111, v109);
      goto LABEL_50;
    }

    uint64_t v110 = (uint64_t)v311;
    (*(void (**)(char *, uint64_t, uint64_t))(v102 + 32))(v311, v108, v84);
    uint64_t v108 = v309;
    sub_10050F124(v110, v309);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v307 + 48))(v108, 1LL, v308) == 1)
    {
      (*(void (**)(uint64_t, uint64_t))(v102 + 8))(v110, v84);
      uint64_t v109 = &qword_1009AA830;
      goto LABEL_48;
    }

    sub_10002218C(v108, v310, type metadata accessor for OwnedBeaconGroup);
    uint64_t v78 = (void *)((char *)v50 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators);
    unint64_t v152 = swift_beginAccess( (char *)v50 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators,  v346,  0LL,  0LL);
    uint64_t v153 = *v78;
    if (!*(void *)(*v78 + 16LL))
    {
      char v157 = v306;
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v328 + 56))(v306, 1LL, 1LL, v327, v152);
LABEL_94:
      sub_100018C68(v310, type metadata accessor for OwnedBeaconGroup);
      (*(void (**)(uint64_t, uint64_t))(v325 + 8))(v110, v84);
LABEL_95:
      uint64_t v109 = &qword_10099E488;
      uint64_t v111 = v157;
      goto LABEL_49;
    }

    v332 = v46;
    swift_bridgeObjectRetain(v153);
    unint64_t v154 = sub_10030D124(v329);
    uint64_t v156 = v328;
    if ((v155 & 1) != 0)
    {
      char v157 = v306;
      sub_10001DC4C( *(void *)(v153 + 56) + *(void *)(v328 + 72) * v154,  v306,  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      char v158 = *(os_log_s **)(v156 + 56);
      uint64_t v159 = v157;
      int v160 = 0LL;
    }

    else
    {
      char v158 = *(os_log_s **)(v328 + 56);
      char v157 = v306;
      uint64_t v159 = v306;
      int v160 = 1LL;
    }

    uint64_t v163 = v327;
    v339 = v158;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v158)(v159, v160, 1LL, v327);
    swift_bridgeObjectRelease();
    v164 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v156 + 48);
    BOOL v165 = v164(v157, 1LL, v163);
    uint64_t v110 = (uint64_t)v311;
    if (v165 == 1) {
      goto LABEL_94;
    }
    v338 = v164;
    sub_10002218C(v157, v305, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    char v166 = v303;
    sub_1004E8CAC(v310, v303);
    uint64_t v167 = v304;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v302 + 48))(v166, 1LL, v304) == 1)
    {
      sub_100015794(v166, (uint64_t *)&unk_1009A9C30);
    }

    else
    {
      char v168 = v299;
      sub_10002218C(v166, v299, type metadata accessor for OwnedBeaconRecord);
      v169 = v168 + *(int *)(v167 + 20);
      char v170 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(v169, v329, v84, v170) & 1) == 0)
      {
        v337 = v169;
        uint64_t v191 = sub_1004ED8A0(v310);
        __chkstk_darwin(v191);
        *(&v289 - 2) = v168;
        uint64_t v192 = sub_100374078(sub_100398BE8, (uint64_t)(&v289 - 4), (uint64_t)v191);
        swift_bridgeObjectRelease();
        uint64_t v193 = (os_log_s *)&_swiftEmptySetSingleton;
        if (v192) {
          uint64_t v193 = (os_log_s *)v192;
        }
        v339 = v193;
        if (qword_10099B330 != -1) {
          swift_once(&qword_10099B330, sub_100374304);
        }
        uint64_t v194 = type metadata accessor for Logger(0LL);
        uint64_t v195 = sub_10000A720(v194, (uint64_t)qword_100A2A748);
        uint64_t v77 = v325;
        uint64_t v82 = (uint64_t)v332;
        (*(void (**)(char *, uint64_t, uint64_t))(v325 + 16))(v332, v329, v84);
        uint64_t v80 = v296;
        sub_10001DC4C(v168, (uint64_t)v296, type metadata accessor for OwnedBeaconRecord);
        uint64_t v196 = swift_bridgeObjectRetain_n(v339, 2LL);
        v336 = v195;
        uint64_t v75 = Logger.logObject.getter(v196);
        v197 = static os_log_type_t.info.getter(v75);
        v198 = v197;
        if (os_log_type_enabled((os_log_t)v75, v197))
        {
          v199 = swift_slowAlloc(62LL, -1LL);
          v335 = (char *)swift_slowAlloc(96LL, -1LL);
          *(void *)&v348 = v335;
          *(_DWORD *)v199 = 141559299;
          v344 = 1752392040LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345, v199 + 4, v199 + 12);
          *(_WORD *)(v199 + 12) = 2081;
          uint64_t v200 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          LODWORD(v334) = v198;
          uint64_t v201 = v82;
          uint64_t v202 = v200;
          v333 = (os_log_t)v75;
          uint64_t v203 = dispatch thunk of CustomStringConvertible.description.getter(v324, v200);
          v344 = sub_1003F11D4(v203, v204, (uint64_t *)&v348);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345, v199 + 14, v199 + 22);
          swift_bridgeObjectRelease();
          v331 = *(int **)(v325 + 8);
          ((void (*)(uint64_t, uint64_t))v331)(v201, v324);
          *(_WORD *)(v199 + 22) = 2160;
          v344 = 1752392040LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345, v199 + 24, v199 + 32);
          *(_WORD *)(v199 + 32) = 2081;
          uint64_t v205 = (uint64_t)v296;
          uint64_t v206 = dispatch thunk of CustomStringConvertible.description.getter(v324, v202);
          v344 = sub_1003F11D4(v206, v207, (uint64_t *)&v348);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345, v199 + 34, v199 + 42);
          swift_bridgeObjectRelease();
          sub_100018C68(v205, type metadata accessor for OwnedBeaconRecord);
          *(_WORD *)(v199 + 42) = 2160;
          v344 = 1752392040LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345, v199 + 44, v199 + 52);
          *(_WORD *)(v199 + 52) = 2081;
          v208 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          v209 = v339;
          swift_bridgeObjectRetain(v339);
          v211 = Set.description.getter(v210, v324, v208);
          v213 = v212;
          swift_bridgeObjectRelease();
          v344 = sub_1003F11D4(v211, v213, (uint64_t *)&v348);
          uint64_t v84 = v324;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345, v199 + 54, v199 + 62);
          swift_bridgeObjectRelease_n(v209, 2LL);
          v214 = v331;
          swift_bridgeObjectRelease();
          v215 = v333;
          _os_log_impl( (void *)&_mh_execute_header,  v333,  (os_log_type_t)v334,  "device: %{private,mask.hash}s, primaryBeacon: %{private,mask.hash}s, nearbyPeers: %{private,mask.hash}s",  (uint8_t *)v199,  0x3Eu);
          v216 = v335;
          swift_arrayDestroy(v335, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v216, -1LL, -1LL);
          swift_slowDealloc(v199, -1LL, -1LL);
        }

        else
        {
LABEL_123:
          v214 = *(int **)(v77 + 8);
          ((void (*)(uint64_t, uint64_t))v214)(v82, v84);
          sub_100018C68((uint64_t)v80, type metadata accessor for OwnedBeaconRecord);

          v209 = v339;
          swift_bridgeObjectRelease_n(v339, 2LL);
        }

        v241 = v305;
        char v157 = (uint64_t)v294;
        v242 = sub_1004E4BF0(v329, (uint64_t)v209);
        swift_bridgeObjectRelease();
        if ((v242 & 1) == 0)
        {
          sub_100018C68(v241, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
          sub_100018C68(v310, type metadata accessor for OwnedBeaconGroup);
          ((void (*)(char *, uint64_t))v214)(v311, v84);
          sub_100018C68(v299, type metadata accessor for OwnedBeaconRecord);
          goto LABEL_50;
        }

        v243 = *v78;
        v244 = v311;
        if (*(void *)(*v78 + 16LL))
        {
          swift_bridgeObjectRetain(*v78);
          v245 = sub_10030D124(v337);
          if ((v246 & 1) != 0)
          {
            v247 = v328;
            sub_10001DC4C( *(void *)(v243 + 56) + *(void *)(v328 + 72) * v245,  v157,  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
            v248 = 0LL;
          }

          else
          {
            v248 = 1LL;
            v247 = v328;
          }

          v250 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v247 + 56);
          v251 = v327;
          v250(v157, v248, 1LL, v327);
          swift_bridgeObjectRelease();
          if (v338(v157, 1LL, v251) != 1)
          {
            v252 = v292;
            sub_10002218C(v157, v292, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
            v253 = (void *)sub_10037A600(v252 + *(int *)(v327 + 20));
            sub_100013044((uint64_t)&v340, (uint64_t)&v348);
            v254 = v291;
            sub_10001DC4C(v252, v291, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
            v339 = v253;
            v255 = (os_log_s *)Logger.logObject.getter(v339);
            v256 = static os_log_type_t.info.getter(v255);
            if (os_log_type_enabled(v255, (os_log_type_t)v256))
            {
              LODWORD(v338) = v256;
              v257 = swift_slowAlloc(62LL, -1LL);
              v337 = swift_slowAlloc(128LL, -1LL);
              v347 = (unsigned int (*)(void, void, void))v337;
              *(_DWORD *)v257 = 141559299;
              v344 = 1752392040LL;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345, v257 + 4, v257 + 12);
              *(_WORD *)(v257 + 12) = 2081;
              v259 = v349;
              v258 = v350;
              sub_100012ED8(&v348, v349);
              v260 = v293;
              (*(void (**)(uint64_t))(*(void *)(*(void *)(v258 + 8) + 8LL) + 32LL))(v259);
              v261 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
              v262 = v324;
              v263 = dispatch thunk of CustomStringConvertible.description.getter(v324, v261);
              v265 = v264;
              ((void (*)(char *, uint64_t))v214)(v260, v262);
              v344 = sub_1003F11D4(v263, v265, (uint64_t *)&v347);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345, v257 + 14, v257 + 22);
              swift_bridgeObjectRelease();
              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v348);
              *(_WORD *)(v257 + 22) = 2082;
              swift_beginAccess(&v351, &v344, 0LL, 0LL);
              v266 = 0xE800000000000000LL;
              v267 = 0x676E696E6E75722ELL;
              switch(v351)
              {
                case -1LL:
                  v267 = 0x6E776F6E6B6E752ELL;
                  break;
                case 0LL:
                  break;
                case 1LL:
                  v267 = 0x676E69646E65702ELL;
                  break;
                case 2LL:
                  v266 = 0xE500000000000000LL;
                  v267 = 0x656C64692ELL;
                  break;
                case 3LL:
                  v266 = 0xE600000000000000LL;
                  v267 = 0x726F7272652ELL;
                  break;
                case 4LL:
                  v266 = 0xE700000000000000LL;
                  v267 = 0x6465756575712ELL;
                  break;
                default:
                  v266 = 0x800000010085F780LL;
                  v267 = 0xD000000000000010LL;
                  break;
              }

              v343 = sub_1003F11D4(v267, v266, (uint64_t *)&v347);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v343, &v344, v257 + 24, v257 + 32);
              swift_bridgeObjectRelease();
              *(_WORD *)(v257 + 32) = 2082;
              v279 = (char *)-[os_log_s state](v339, "state") + 1;
              v280 = v326;
              v281 = 0xE800000000000000LL;
              v282 = 0x676E696E6E75722ELL;
              switch((unint64_t)v279)
              {
                case 0uLL:
                  v282 = 0x6E776F6E6B6E752ELL;
                  break;
                case 1uLL:
                  break;
                case 2uLL:
                  v282 = 0x676E69646E65702ELL;
                  break;
                case 3uLL:
                  v281 = 0xE500000000000000LL;
                  v282 = 0x656C64692ELL;
                  break;
                case 4uLL:
                  v281 = 0xE600000000000000LL;
                  v282 = 0x726F7272652ELL;
                  break;
                case 5uLL:
                  v281 = 0xE700000000000000LL;
                  v282 = 0x6465756575712ELL;
                  break;
                default:
                  v281 = 0x800000010085F780LL;
                  v282 = 0xD000000000000010LL;
                  break;
              }

              v343 = sub_1003F11D4(v282, v281, (uint64_t *)&v347);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v343, &v344, v257 + 34, v257 + 42);
              v283 = v339;

              swift_bridgeObjectRelease();
              *(_WORD *)(v257 + 42) = 2160;
              v343 = 1752392040LL;
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v343, &v344, v257 + 44, v257 + 52);
              *(_WORD *)(v257 + 52) = 2081;
              v284 = v291;
              v285 = v324;
              v286 = dispatch thunk of CustomStringConvertible.description.getter(v324, v261);
              v343 = sub_1003F11D4(v286, v287, (uint64_t *)&v347);
              UnsafeMutableRawBufferPointer.copyMemory(from:)(&v343, &v344, v257 + 54, v257 + 62);
              swift_bridgeObjectRelease();
              sub_100018C68(v284, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
              _os_log_impl( (void *)&_mh_execute_header,  v255,  (os_log_type_t)v338,  "Beacon: %{private,mask.hash}s has state: %{public}s, -- taking playSound taskInfo state %{public}s from primary %{private,mask.hash}s.",  (uint8_t *)v257,  0x3Eu);
              v288 = v337;
              swift_arrayDestroy(v337, 4LL, (char *)&type metadata for Any + 8);
              swift_slowDealloc(v288, -1LL, -1LL);
              swift_slowDealloc(v257, -1LL, -1LL);

              sub_100018C68(v292, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
              sub_100018C68(v305, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
              sub_100018C68(v310, type metadata accessor for OwnedBeaconGroup);
              ((void (*)(char *, uint64_t))v214)(v311, v285);
              (*(void (**)(char *, uint64_t))(v321 + 8))(v280, v322);
            }

            else
            {

              sub_100018C68(v254, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
              v268 = v339;

              _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v348);
              sub_100018C68(v252, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
              sub_100018C68(v241, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
              sub_100018C68(v310, type metadata accessor for OwnedBeaconGroup);
              ((void (*)(char *, uint64_t))v214)(v311, v324);
              (*(void (**)(char *, uint64_t))(v321 + 8))(v326, v322);
            }

            sub_100018C68(v299, type metadata accessor for OwnedBeaconRecord);
            goto LABEL_153;
          }
        }

        else
        {
          (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v328 + 56))(v157, 1LL, 1LL, v327);
        }

        sub_100018C68(v241, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
        sub_100018C68(v310, type metadata accessor for OwnedBeaconGroup);
        ((void (*)(char *, uint64_t))v214)(v244, v84);
        sub_100018C68(v299, type metadata accessor for OwnedBeaconRecord);
        goto LABEL_95;
      }

      sub_100018C68(v168, type metadata accessor for OwnedBeaconRecord);
    }

    sub_1001CC778();
    uint64_t v172 = v171;
    v173 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
    uint64_t v174 = *(unsigned __int8 *)(v325 + 80);
    uint64_t v175 = (v174 + 32) & ~v174;
    uint64_t v176 = swift_allocObject(v173, v175 + *(void *)(v325 + 72), v174 | 7);
    *(_OWORD *)(v176 + 16) = xmmword_1007E67D0;
    uint64_t v177 = v176 + v175;
    uint64_t v179 = v341;
    uint64_t v178 = v342;
    sub_100012ED8(&v340, v341);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v178 + 8) + 8LL) + 32LL))(v179);
    uint64_t v180 = sub_1003CE474(v176, v172);
    swift_setDeallocating(v176);
    swift_arrayDestroy(v177, *(void *)(v176 + 16), v324);
    swift_deallocClassInstance(v176, 32LL, 7LL);
    uint64_t v181 = v50;
    sub_10039819C((uint64_t)v180, (uint64_t)v181);
    uint64_t v183 = v182;
    swift_release();

    uint64_t v184 = *(void *)(v183 + 16);
    if (v184)
    {
      uint64_t v185 = v183 + ((*(unsigned __int8 *)(v328 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v328 + 80));
      uint64_t v186 = *(void *)(v328 + 72);
      swift_bridgeObjectRetain(v183);
      uint64_t v187 = (uint64_t)v297;
      while (1)
      {
        sub_10001DC4C(v185, v187, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
        sub_100018C68(v187, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
        v185 += v186;
        if (!--v184)
        {
          swift_bridgeObjectRelease();
          goto LABEL_105;
        }
      }

      swift_bridgeObjectRelease();
      uint64_t v188 = v298;
      sub_10002218C(v187, v298, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      uint64_t v189 = v188;
      uint64_t v190 = 0LL;
    }

    else
    {
LABEL_105:
      uint64_t v188 = v298;
      uint64_t v189 = v298;
      uint64_t v190 = 1LL;
    }

    v217 = v327;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v339)(v189, v190, 1LL, v327);
    swift_bridgeObjectRelease();
    v218 = v338(v188, 1LL, v217);
    v219 = v324;
    v220 = v305;
    v221 = v325;
    v222 = v300;
    if (v218 == 1)
    {
      sub_100018C68(v305, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      sub_100018C68(v310, type metadata accessor for OwnedBeaconGroup);
      (*(void (**)(char *, uint64_t))(v221 + 8))(v311, v219);
      uint64_t v109 = &qword_10099E488;
      uint64_t v111 = v188;
      goto LABEL_49;
    }

    sub_10002218C(v188, v300, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    if ((static UUID.== infix(_:_:)(v220, v222) & 1) == 0)
    {
      sub_100018C68(v222, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      sub_100018C68(v220, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      sub_100018C68(v310, type metadata accessor for OwnedBeaconGroup);
      (*(void (**)(char *, uint64_t))(v221 + 8))(v311, v219);
      goto LABEL_50;
    }

    v223 = (void *)sub_10037A600(v222 + *(int *)(v327 + 20));
    if (qword_10099B330 != -1) {
      swift_once(&qword_10099B330, sub_100374304);
    }
    v224 = type metadata accessor for Logger(0LL);
    sub_10000A720(v224, (uint64_t)qword_100A2A748);
    sub_100013044((uint64_t)&v340, (uint64_t)&v348);
    v225 = v295;
    sub_10001DC4C(v222, v295, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    v339 = v223;
    v226 = (os_log_s *)Logger.logObject.getter(v339);
    v227 = v222;
    v228 = static os_log_type_t.info.getter(v226);
    if (os_log_type_enabled(v226, v228))
    {
      v229 = swift_slowAlloc(62LL, -1LL);
      v338 = (unsigned int (*)(uint64_t, uint64_t, uint64_t))swift_slowAlloc(128LL, -1LL);
      v347 = v338;
      *(_DWORD *)v229 = 141559299;
      v344 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345, v229 + 4, v229 + 12);
      *(_WORD *)(v229 + 12) = 2081;
      v231 = v349;
      v230 = v350;
      sub_100012ED8(&v348, v349);
      v232 = v293;
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v230 + 8) + 8LL) + 32LL))(v231);
      v233 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      v234 = v324;
      v235 = dispatch thunk of CustomStringConvertible.description.getter(v324, v233);
      v236 = v221;
      v238 = v237;
      v337 = *(void *)(v236 + 8);
      ((void (*)(char *, uint64_t))v337)(v232, v234);
      v344 = sub_1003F11D4(v235, v238, (uint64_t *)&v347);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v344, v345, v229 + 14, v229 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v348);
      *(_WORD *)(v229 + 22) = 2082;
      swift_beginAccess(&v351, &v344, 0LL, 0LL);
      v239 = 0xE800000000000000LL;
      v240 = 0x676E696E6E75722ELL;
      switch(v351)
      {
        case -1LL:
          v240 = 0x6E776F6E6B6E752ELL;
          break;
        case 0LL:
          break;
        case 1LL:
          v240 = 0x676E69646E65702ELL;
          break;
        case 2LL:
          v239 = 0xE500000000000000LL;
          v240 = 0x656C64692ELL;
          break;
        case 3LL:
          v239 = 0xE600000000000000LL;
          v240 = 0x726F7272652ELL;
          break;
        case 4LL:
          v239 = 0xE700000000000000LL;
          v240 = 0x6465756575712ELL;
          break;
        default:
          v239 = 0x800000010085F780LL;
          v240 = 0xD000000000000010LL;
          break;
      }

      v343 = sub_1003F11D4(v240, v239, (uint64_t *)&v347);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v343, &v344, v229 + 24, v229 + 32);
      swift_bridgeObjectRelease();
      *(_WORD *)(v229 + 32) = 2082;
      v269 = (char *)-[os_log_s state](v339, "state") + 1;
      v270 = v326;
      v271 = 0xE800000000000000LL;
      v272 = 0x676E696E6E75722ELL;
      switch((unint64_t)v269)
      {
        case 0uLL:
          v272 = 0x6E776F6E6B6E752ELL;
          break;
        case 1uLL:
          break;
        case 2uLL:
          v272 = 0x676E69646E65702ELL;
          break;
        case 3uLL:
          v271 = 0xE500000000000000LL;
          v272 = 0x656C64692ELL;
          break;
        case 4uLL:
          v271 = 0xE600000000000000LL;
          v272 = 0x726F7272652ELL;
          break;
        case 5uLL:
          v271 = 0xE700000000000000LL;
          v272 = 0x6465756575712ELL;
          break;
        default:
          v271 = 0x800000010085F780LL;
          v272 = 0xD000000000000010LL;
          break;
      }

      v343 = sub_1003F11D4(v272, v271, (uint64_t *)&v347);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v343, &v344, v229 + 34, v229 + 42);
      v273 = v339;

      swift_bridgeObjectRelease();
      *(_WORD *)(v229 + 42) = 2160;
      v343 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v343, &v344, v229 + 44, v229 + 52);
      *(_WORD *)(v229 + 52) = 2081;
      v274 = v295;
      v275 = v324;
      v276 = dispatch thunk of CustomStringConvertible.description.getter(v324, v233);
      v343 = sub_1003F11D4(v276, v277, (uint64_t *)&v347);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v343, &v344, v229 + 54, v229 + 62);
      swift_bridgeObjectRelease();
      sub_100018C68(v274, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      _os_log_impl( (void *)&_mh_execute_header,  v226,  v228,  "Beacon: %{private,mask.hash}s has state: %{public}s, -- taking playSound taskInfo state %{public}s from %{private,mask.hash}s.",  (uint8_t *)v229,  0x3Eu);
      v278 = v338;
      swift_arrayDestroy(v338, 4LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v278, -1LL, -1LL);
      swift_slowDealloc(v229, -1LL, -1LL);

      sub_100018C68(v300, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      sub_100018C68(v305, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      sub_100018C68(v310, type metadata accessor for OwnedBeaconGroup);
      ((void (*)(char *, uint64_t))v337)(v311, v275);
      (*(void (**)(char *, uint64_t))(v321 + 8))(v270, v322);
    }

    else
    {

      sub_100018C68(v225, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      v249 = v339;

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v348);
      sub_100018C68(v227, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      sub_100018C68(v220, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      sub_100018C68(v310, type metadata accessor for OwnedBeaconGroup);
      (*(void (**)(char *, uint64_t))(v221 + 8))(v311, v324);
      (*(void (**)(char *, uint64_t))(v321 + 8))(v326, v322);
    }

        uint64_t v36 = v119;
        uint64_t v21 = (uint64_t)v117;
        uint64_t v57 = sub_1004E55A0(v117[*(int *)(v119 + 24)], v22);
        swift_bridgeObjectRelease();
        if (v57)
        {
          uint64_t v24 = type metadata accessor for BeaconObservation;
          sub_10002218C(v21, v116, type metadata accessor for BeaconObservation);
          uint64_t v58 = v124;
          if ((swift_isUniquelyReferenced_nonNull_native(v124) & 1) == 0)
          {
            sub_100032AA8(0, v58[2] + 1LL, 1);
            uint64_t v58 = v124;
          }

          uint64_t v22 = v120;
          uint64_t v60 = v58[2];
          uint64_t v59 = v58[3];
          if (v60 >= v59 >> 1)
          {
            sub_100032AA8(v59 > 1, v60 + 1, 1);
            uint64_t v58 = v124;
          }

          v58[2] = v60 + 1;
          sub_10002218C(v116, (uint64_t)v58 + v22 + v60 * v121, type metadata accessor for BeaconObservation);
        }

        else
        {
          uint64_t v24 = type metadata accessor for BeaconObservation;
          sub_100018C68(v21, type metadata accessor for BeaconObservation);
        }

        uint64_t v43 = v114;
        uint64_t v45 = v122;
        if (v122 == v115)
        {
          uint64_t v44 = v124;
          uint64_t v5 = v101;
          uint64_t v21 = v110;
          uint64_t v22 = v109;
          uint64_t v24 = v100;
          a1 = v99;
          uint64_t v37 = (uint64_t)v111;
          break;
        }
      }
    }

    swift_release();
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v44 = _swiftEmptyArrayStorage;
  }

  objc_autoreleasePoolPop(v105);
  sub_1000F0A44((uint64_t)v44, v37);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v118 + 48))(v37, 1LL, v36) == 1)
  {
    sub_100015794(v37, (uint64_t *)&unk_1009A5990);
    uint64_t v61 = 2LL;
  }

  else
  {
    (*(void (**)(uint64_t (*)(uint64_t), uint64_t))(v22 + 8))(v24, v21);
    uint64_t v62 = v37;
    uint64_t v63 = v104;
    sub_10002218C(v62, v104, type metadata accessor for BeaconObservation);
    uint64_t v61 = 2LL * (*(_BYTE *)(v63 + *(int *)(v36 + 24)) != 26);
    (*(void (**)(uint64_t (*)(uint64_t), uint64_t, uint64_t))(v22 + 16))( v24,  v63 + *(int *)(v36 + 20),  v21);
    sub_100018C68(v63, type metadata accessor for BeaconObservation);
  }

  uint64_t v64 = (void *)(v107 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators);
  uint64_t v65 = swift_beginAccess(v107 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators, v123, 0LL, 0LL);
  uint64_t v66 = *v64;
  if (!*(void *)(*v64 + 16LL))
  {
    uint64_t v68 = a1;
    uint64_t v67 = v5;
    uint64_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v112 + 56);
    uint64_t v72 = v106;
    v73(v106, 1LL, 1LL, v113, v65);
LABEL_38:
    sub_100015794(v72, &qword_10099E488);
    uint64_t v77 = 0LL;
    goto LABEL_41;
  }

  uint64_t v67 = v5;
  swift_bridgeObjectRetain(*v64);
  uint64_t v68 = a1;
  uint64_t v69 = sub_10030D124(a1);
  char v71 = v112;
  if ((v70 & 1) != 0)
  {
    uint64_t v72 = v106;
    sub_10001DC4C( *(void *)(v66 + 56) + *(void *)(v112 + 72) * v69,  v106,  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    uint64_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v71 + 56);
    uint64_t v74 = v72;
    uint64_t v75 = 0LL;
  }

  else
  {
    uint64_t v73 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v112 + 56);
    uint64_t v72 = v106;
    uint64_t v74 = v106;
    uint64_t v75 = 1LL;
  }

  uint64_t v76 = v113;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v73)(v74, v75, 1LL, v113);
  swift_bridgeObjectRelease();
  uint64_t v78 = v102;
  sub_10002218C(v72, v102, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  uint64_t v77 = *(void *)(v78 + *(int *)(v76 + 36));
  swift_errorRetain(v77);
  sub_100018C68(v78, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  if (v77) {
    uint64_t v61 = 3LL;
  }
LABEL_41:
  uint64_t v79 = SPBeaconTaskNameStopSound;
  swift_errorRetain(v77);
  v80.super.Class isa = Date._bridgeToObjectiveC()().super.isa;
  if (v77)
  {
    uint64_t v81 = (void *)_convertErrorToNSError(_:)(v77);
    swift_errorRelease(v77);
  }

  else
  {
    uint64_t v81 = 0LL;
  }

  uint64_t v82 = [objc_allocWithZone(SPBeaconTaskInformation) initWithName:v79 lastUpdated:v80.super.isa error:v81 state:v61];

  uint64_t v83 = *v64;
  if (*(void *)(*v64 + 16LL))
  {
    swift_bridgeObjectRetain(*v64);
    uint64_t v84 = sub_10030D124(v68);
    uint64_t v85 = v108;
    uint64_t v86 = v113;
    uint64_t v87 = v112;
    if ((v88 & 1) != 0)
    {
      sub_10001DC4C( *(void *)(v83 + 56) + *(void *)(v112 + 72) * v84,  v108,  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      unsigned int v89 = v85;
      uint64_t v90 = 0LL;
    }

    else
    {
      unsigned int v89 = v108;
      uint64_t v90 = 1LL;
    }

    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v73)(v89, v90, 1LL, v86);
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v85 = v108;
    uint64_t v86 = v113;
    ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v73)(v108, 1LL, 1LL, v113);
    uint64_t v87 = v112;
  }

  unint64_t v91 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v87 + 48))(v85, 1LL, v86);
  uint64_t v92 = v110;
  if (v91)
  {
    sub_100015794(v85, &qword_10099E488);
    unint64_t v93 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v93 - 8) + 56LL))(v67, 1LL, 1LL, v93);
    Class isa = 0LL;
  }

  else
  {
    uint64_t v95 = v103;
    sub_10001DC4C(v85, v103, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    sub_100015794(v85, &qword_10099E488);
    uint64_t v96 = type metadata accessor for UUID(0LL);
    uint64_t v97 = *(void *)(v96 - 8);
    (*(void (**)(char *, uint64_t, uint64_t))(v97 + 16))(v67, v95, v96);
    sub_100018C68(v95, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v97 + 56))(v67, 0LL, 1LL, v96);
    Class isa = 0LL;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v97 + 48))(v67, 1LL, v96) != 1)
    {
      Class isa = UUID._bridgeToObjectiveC()().super.isa;
      (*(void (**)(char *, uint64_t))(v97 + 8))(v67, v96);
    }
  }

  objc_msgSend(v82, "setCommandIdentifier:", isa, v99, v100, v101);

  swift_errorRelease(v77);
  (*(void (**)(uint64_t (*)(uint64_t), uint64_t))(v109 + 8))(v24, v92);
  return v82;
}

    uint64_t v15 = (v21 - 1) & v21;
  }

  uint64_t v22 = v20 + 4;
  if (v22 >= v28)
  {
LABEL_24:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56))(v11, 1LL, 1LL, v5, v16);
LABEL_25:
    swift_release();
    return;
  }

  uint64_t v21 = *(void *)(v27 + 8 * v22);
  if (v21)
  {
    uint64_t v17 = v22;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v17 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v17 >= v28) {
      goto LABEL_24;
    }
    uint64_t v21 = *(void *)(v27 + 8 * v17);
    ++v22;
    if (v21) {
      goto LABEL_20;
    }
  }

    uint64_t v15 = (v22 - 1) & v22;
  }

  uint64_t v23 = v21 + 4;
  if (v23 >= v26)
  {
LABEL_24:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v6 + 56))(v11, 1LL, 1LL, v5, v16);
LABEL_25:
    swift_release();
    return;
  }

  uint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    uint64_t v17 = v23;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v17 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v17 >= v26) {
      goto LABEL_24;
    }
    uint64_t v22 = *(void *)(v25 + 8 * v17);
    ++v23;
    if (v22) {
      goto LABEL_20;
    }
  }

  if (v60) {
    goto LABEL_21;
  }
LABEL_16:
  if (!v61) {
    return result;
  }
  return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(&v62[v63[23]], v65);
}

    swift_bridgeObjectRelease();
    if ((v23 & 0x40000000000LL) == 0)
    {
LABEL_10:
      if ((v23 & 0x200000000000LL) == 0) {
        goto LABEL_11;
      }
      goto LABEL_22;
    }

    uint64_t v32 = sub_100004AEC(v21);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v32 - 8) + 56LL))(v13, 1LL, 1LL, v32);
    uint64_t v79 = 0LL;
LABEL_21:
    sub_100015750((uint64_t)v13, (uint64_t)v15, &qword_1009B2C50);
    uint64_t v33 = v21;
    uint64_t v34 = sub_100004AEC(v21);
    uint64_t v35 = *v15;
    uint64_t v36 = (uint64_t)v15 + *(int *)(v34 + 48);
    uint64_t v37 = v78;
    sub_10002218C(v36, v78, type metadata accessor for BeaconStoreFileRecord);
    sub_10001581C(v37 + *(int *)(v8 + 20), (uint64_t)v4, (uint64_t *)&unk_1009A34D0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
    {
      sub_100015794((uint64_t)v4, (uint64_t *)&unk_1009A34D0);
    }

    else
    {
      uint64_t v38 = v70;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v70, v4, v5);
      uint64_t v39 = v6;
      uint64_t v40 = [(id)objc_opt_self(NSFileManager) defaultManager];
      URL._bridgeToObjectiveC()(v41);
      uint64_t v43 = v42;
      URL._bridgeToObjectiveC()(v44);
      uint64_t v46 = v45;
      uint64_t v81 = 0LL;
      uint64_t v47 = [v40 moveItemAtURL:v43 toURL:v45 error:&v81];

      uint64_t v48 = v81;
      if ((v47 & 1) != 0)
      {
        uint64_t v49 = v81;
        (*(void (**)(char *, uint64_t))(v39 + 8))(v38, v5);
        uint64_t v4 = v72;
        uint64_t v6 = v39;
      }

      else
      {
        uint64_t v50 = v38;
        uint64_t v51 = v81;
        unint64_t v52 = (void *)_convertNSErrorToError(_:)(v48);

        uint64_t v54 = swift_willThrow(v53);
        uint64_t v55 = static os_log_type_t.default.getter(v54);
        if (qword_10099B708 != -1) {
          swift_once(&qword_10099B708, sub_100651168);
        }
        uint64_t v56 = qword_100A2B018;
        uint64_t v57 = sub_100004AEC((uint64_t *)&unk_10099D740);
        uint64_t v58 = swift_allocObject(v57, 72LL, 7LL);
        *(_OWORD *)(v58 + 16) = v68;
        uint64_t v81 = v52;
        swift_errorRetain(v52);
        uint64_t v59 = sub_100004AEC((uint64_t *)&unk_1009A5470);
        uint64_t v60 = String.init<A>(describing:)(&v81, v59);
        uint64_t v62 = v61;
        *(void *)(v58 + 56) = &type metadata for String;
        *(void *)(v58 + 64) = sub_1000226F4();
        *(void *)(v58 + 32) = v60;
        *(void *)(v58 + 40) = v62;
        os_log(_:dso:log:_:_:)(v55, &_mh_execute_header, v56, "Could not restore record %@", 27LL, 2LL, v58);
        swift_bridgeObjectRelease();
        swift_errorRelease(v52);
        uint64_t v6 = v76;
        uint64_t v5 = v77;
        (*(void (**)(char *, uint64_t))(v76 + 8))(v50, v77);
        uint64_t v67 = 0LL;
        uint64_t v4 = v72;
      }

      uint64_t v8 = v71;
      uint64_t v37 = v78;
    }

    sub_100018C68(v37, type metadata accessor for BeaconStoreFileRecord);
    uint64_t v13 = v75;
    uint64_t v21 = v33;
    uint64_t v19 = v79;
    uint64_t v20 = v80;
  }

    uint64_t v31 = sub_100004AEC(v21);
    (*(void (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))(v13, 1LL, 1LL, v31);
    uint64_t v19 = 0LL;
LABEL_21:
    sub_100015750((uint64_t)v13, (uint64_t)v15, &qword_1009B2C50);
    uint64_t v32 = v21;
    uint64_t v33 = sub_100004AEC(v21);

    uint64_t v34 = (uint64_t)v15 + *(int *)(v33 + 48);
    uint64_t v35 = v72;
    sub_10002218C(v34, v72, type metadata accessor for BeaconStoreFileRecord);
    sub_10001581C(v35 + *(int *)(v8 + 20), (uint64_t)v4, (uint64_t *)&unk_1009A34D0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5) == 1)
    {
      sub_100015794((uint64_t)v4, (uint64_t *)&unk_1009A34D0);
    }

    else
    {
      uint64_t v36 = v66;
      (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v66, v4, v5);
      uint64_t v37 = [(id)objc_opt_self(NSFileManager) defaultManager];
      URL._bridgeToObjectiveC()(v38);
      uint64_t v39 = v5;
      uint64_t v41 = v40;
      uint64_t v73 = 0LL;
      uint64_t v42 = [v37 removeItemAtURL:v40 error:&v73];

      uint64_t v43 = v73;
      if ((v42 & 1) != 0)
      {
        uint64_t v44 = v73;
        (*(void (**)(char *, uint64_t))(v6 + 8))(v36, v39);
        uint64_t v4 = v70;
        uint64_t v5 = v39;
      }

      else
      {
        uint64_t v45 = v73;
        uint64_t v46 = (void *)_convertNSErrorToError(_:)(v43);

        uint64_t v48 = swift_willThrow(v47);
        uint64_t v49 = static os_log_type_t.default.getter(v48);
        if (qword_10099B708 != -1) {
          swift_once(&qword_10099B708, sub_100651168);
        }
        uint64_t v50 = qword_100A2B018;
        uint64_t v51 = sub_100004AEC((uint64_t *)&unk_10099D740);
        unint64_t v52 = swift_allocObject(v51, 72LL, 7LL);
        *(_OWORD *)(v52 + 16) = v62;
        uint64_t v73 = v46;
        swift_errorRetain(v46);
        uint64_t v53 = sub_100004AEC((uint64_t *)&unk_1009A5470);
        uint64_t v54 = String.init<A>(describing:)(&v73, v53);
        uint64_t v56 = v55;
        *(void *)(v52 + 56) = &type metadata for String;
        *(void *)(v52 + 64) = sub_1000226F4();
        *(void *)(v52 + 32) = v54;
        *(void *)(v52 + 40) = v56;
        os_log(_:dso:log:_:_:)(v49, &_mh_execute_header, v50, "Could not delete tombstoned record %@", 37LL, 2LL, v52);
        swift_bridgeObjectRelease();
        swift_errorRelease(v46);
        uint64_t v6 = v63;
        uint64_t v5 = v69;
        (*(void (**)(char *, uint64_t))(v63 + 8))(v66, v69);
        uint64_t v61 = 0LL;
        uint64_t v4 = v70;
      }

      uint64_t v8 = v65;
    }

    sub_100018C68(v72, type metadata accessor for BeaconStoreFileRecord);
    uint64_t v21 = v32;
    uint64_t v20 = v71;
  }

      swift_once(&qword_10099B580, sub_100581FC4);
      goto LABEL_9;
    }

    uint64_t v57 = (os_log_s *)Logger.logObject.getter(v24);
    uint64_t v58 = static os_log_type_t.error.getter(v57);
    if (os_log_type_enabled(v57, (os_log_type_t)v58))
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v59 = 0;
      _os_log_impl((void *)&_mh_execute_header, v57, (os_log_type_t)v58, "shareKey: no myPersonID", v59, 2u);
      swift_slowDealloc(v59, -1LL, -1LL);
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v8 + 56))(v73, 1LL, 1LL, v7);
  }

  else
  {
    uint64_t v51 = sub_10002218C((uint64_t)v6, (uint64_t)v10, type metadata accessor for SecureLocationsCachedSharingKey);
    unint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
    uint64_t v53 = static os_log_type_t.debug.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v54 = 0;
      _os_log_impl((void *)&_mh_execute_header, v52, v53, "shareKey: returning memory cached sharing keys", v54, 2u);
      swift_slowDealloc(v54, -1LL, -1LL);
    }

    uint64_t v55 = v73;
    sub_10002218C((uint64_t)v10, v73, type metadata accessor for SecureLocationsCachedSharingKey);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v8 + 56))(v55, 0LL, 1LL, v7);
  }

  BOOL result = sub_100018C68((uint64_t)&v26[v27[6]], type metadata accessor for StableIdentifier);
  if ((v25 & 8) == 0)
  {
LABEL_8:
    if ((v25 & 0x10) == 0) {
      goto LABEL_9;
    }
LABEL_22:
    BOOL result = (*(uint64_t (**)(char *, uint64_t))(v69 + 8))(&v26[v27[8]], v70);
    if ((v25 & 0x20) != 0) {
      goto LABEL_10;
    }
    goto LABEL_23;
  }

    uint64_t v3 = (v9 - 1) & v9;
  }

  uint64_t v10 = v8 + 4;
  if (v10 >= v23)
  {
LABEL_27:
    swift_release();
    return;
  }

  uint64_t v9 = *(void *)(v22 + 8 * v10);
  if (v9)
  {
    uint64_t v4 = v10;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v4 = v10 + 1;
    if (__OFADD__(v10, 1LL)) {
      break;
    }
    if (v4 >= v23) {
      goto LABEL_27;
    }
    uint64_t v9 = *(void *)(v22 + 8 * v4);
    ++v10;
    if (v9) {
      goto LABEL_20;
    }
  }

    char v71 = (v34 - 1) & v34;
    uint64_t v72 = v35;
  }

  uint64_t v36 = v30 + 5;
  if (v30 + 5 >= v65)
  {
LABEL_41:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v20 + 56))(v69, 1LL, 1LL, v31, v29);
LABEL_42:
    swift_release();
    return;
  }

  uint64_t v34 = *(void *)(v64 + 8 * v36);
  if (v34)
  {
    uint64_t v35 = v30 + 5;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v35 = v36 + 1;
    if (__OFADD__(v36, 1LL)) {
      break;
    }
    if (v35 >= v65) {
      goto LABEL_41;
    }
    uint64_t v34 = *(void *)(v64 + 8 * v35);
    ++v36;
    if (v34) {
      goto LABEL_20;
    }
  }

        if (v70)
        {
          uint64_t v45 = sub_10001736C(v37, v39);
          uint64_t v46 = static os_log_type_t.default.getter(v45);
          uint64_t v47 = v39;
          uint64_t v48 = v37;
          if (qword_10099B3E8 != -1) {
            swift_once(&qword_10099B3E8, sub_1003E02E8);
          }
          uint64_t v49 = qword_100A2A8F0;
          uint64_t v50 = sub_100004AEC((uint64_t *)&unk_10099D740);
          uint64_t v51 = swift_allocObject(v50, 112LL, 7LL);
          *(_OWORD *)(v51 + 16) = xmmword_1007E4750;
          *(void *)(v51 + 56) = &type metadata for UInt32;
          *(void *)(v51 + 64) = &protocol witness table for UInt32;
          *(_DWORD *)(v51 + 32) = a1;
          char v71 = v70;
          swift_retain();
          unint64_t v52 = sub_100004AEC(&qword_1009B8B78);
          uint64_t v53 = String.init<A>(describing:)(&v71, v52);
          uint64_t v55 = v54;
          *(void *)(v51 + 96) = &type metadata for String;
          *(void *)(v51 + 104) = sub_1000226F4();
          *(void *)(v51 + 72) = v53;
          *(void *)(v51 + 80) = v55;
          os_log(_:dso:log:_:_:)( v46,  &_mh_execute_header,  v49,  "Skipped private encrypted key for index %u. Cryptor: %{public}@",  63LL,  2LL,  v51);
          swift_bridgeObjectRelease();
          sub_100016F9C(v48, v47);
          uint64_t v57 = v67;
          uint64_t v56 = v68;
          BOOL result = sub_1002DDE20(v67, v68);
          goto LABEL_25;
        }

    uint64_t v17 = (v21 - 1) & v21;
  }

  uint64_t v22 = v20 + 4;
  if (v22 >= v24)
  {
LABEL_24:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v12, 1LL, 1LL, v2);
    return swift_release();
  }

  uint64_t v21 = *(void *)(v14 + 8 * v22);
  if (v21)
  {
    uint64_t v13 = v22;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v13 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      break;
    }
    if (v13 >= v24) {
      goto LABEL_24;
    }
    uint64_t v21 = *(void *)(v14 + 8 * v13);
    ++v22;
    if (v21) {
      goto LABEL_20;
    }
  }

    uint64_t v73 = (v27 - 1) & v27;
    uint64_t v74 = v28;
  }

  uint64_t v29 = v24 + 5;
  if (v24 + 5 >= v64)
  {
LABEL_37:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v75 + 56))(v19, 1LL, 1LL, v15);
LABEL_38:
    swift_release(a1);
    return;
  }

  uint64_t v27 = *(void *)(v63 + 8 * v29);
  if (v27)
  {
    uint64_t v28 = v24 + 5;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v28 = v29 + 1;
    if (__OFADD__(v29, 1LL)) {
      break;
    }
    if (v28 >= v64) {
      goto LABEL_37;
    }
    uint64_t v27 = *(void *)(v63 + 8 * v28);
    ++v29;
    if (v27) {
      goto LABEL_20;
    }
  }

    uint64_t v13 = (v18 - 1) & v18;
    uint64_t v15 = __clz(__rbit64(v18)) + (v9 << 6);
LABEL_5:
    (*(void (**)(char *, unint64_t, uint64_t))(v5 + 16))( v8,  *(void *)(a3 + 48) + *(void *)(v5 + 72) * v15,  v4);
    uint64_t v16 = sub_1006CF238((uint64_t)v8);
    BOOL result = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v8, v4);
    if ((v16 & 1) == 0)
    {
      *(unint64_t *)((char *)v23 + ((v15 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << v15;
      if (__OFADD__(v24++, 1LL))
      {
        __break(1u);
LABEL_24:
        swift_retain();
        return sub_100545C40(v23, v22, v24, a3);
      }
    }
  }

  uint64_t v19 = v17 + 3;
  if (v19 >= v26) {
    goto LABEL_24;
  }
  uint64_t v18 = *(void *)(v25 + 8 * v19);
  if (v18)
  {
    uint64_t v9 = v19;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v9 = v19 + 1;
    if (__OFADD__(v19, 1LL)) {
      break;
    }
    if (v9 >= v26) {
      goto LABEL_24;
    }
    uint64_t v18 = *(void *)(v25 + 8 * v9);
    ++v19;
    if (v18) {
      goto LABEL_20;
    }
  }

    uint64_t v41 = (v21 - 1) & v21;
    uint64_t v42 = v22;
  }

  uint64_t v23 = v18 + 4;
  if (v18 + 4 >= v40) {
    goto LABEL_31;
  }
  uint64_t v21 = *(void *)(v46 + 8 * v23);
  if (v21)
  {
    uint64_t v22 = v18 + 4;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v22 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v22 >= v40) {
      goto LABEL_31;
    }
    uint64_t v21 = *(void *)(v46 + 8 * v22);
    ++v23;
    if (v21) {
      goto LABEL_20;
    }
  }

    uint64_t v18 = (v22 - 1) & v22;
  }

  uint64_t v23 = v21 + 4;
  if (v23 >= v26)
  {
LABEL_24:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v3 + 56))(v11, 1LL, 1LL, v2);
LABEL_25:
    swift_release();
    return v27;
  }

  uint64_t v22 = *(void *)(v25 + 8 * v23);
  if (v22)
  {
    uint64_t v14 = v23;
    goto LABEL_20;
  }

  while (1)
  {
    uint64_t v14 = v23 + 1;
    if (__OFADD__(v23, 1LL)) {
      break;
    }
    if (v14 >= v26) {
      goto LABEL_24;
    }
    uint64_t v22 = *(void *)(v25 + 8 * v14);
    ++v23;
    if (v22) {
      goto LABEL_20;
    }
  }

    swift_bridgeObjectRelease_n(v2, 2LL);
    goto LABEL_21;
  }

  uint64_t v10 = *(unsigned __int8 *)(v2 + v6);
  if (v9 - 1 >= v7)
  {
    uint64_t v37 = *v1;
    uint64_t v30 = sub_100004AEC((uint64_t *)&unk_1009AC380);
    uint64_t v31 = sub_1006F2AC0();
    uint64_t v3 = DataProtocol.hexString.getter(v30, v31);
    uint64_t v2 = v32;
    if (qword_10099B8C8 == -1) {
      goto LABEL_17;
    }
    goto LABEL_29;
  }

  if (v7 < (unint64_t)v3 || v7 < v9)
  {
    __break(1u);
    goto LABEL_28;
  }

  uint64_t v12 = __OFADD__(v6, v8 + 2);
  uint64_t v13 = v6 + v8 + 2;
  if (v12)
  {
LABEL_28:
    __break(1u);
LABEL_29:
    swift_once(&qword_10099B8C8, sub_10073B768);
LABEL_17:
    uint64_t v33 = type metadata accessor for Logger(0LL);
    sub_10000A720(v33, (uint64_t)qword_100A2B390);
    swift_bridgeObjectRetain(v2);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v34);
    uint64_t v35 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v35))
    {
      uint64_t v23 = swift_slowAlloc(18LL, -1LL);
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      uint64_t v37 = v24;
      *(_DWORD *)uint64_t v23 = 16777986;
      LOBYTE(v36) = v10;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, (char *)&v36 + 1, v23 + 4, v23 + 5);
      *(_WORD *)(v23 + 5) = 256;
      LOBYTE(v36) = v8;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, (char *)&v36 + 1, v23 + 7, v23 + 8);
      *(_WORD *)(v23 + 8) = 2082;
      swift_bridgeObjectRetain(v2);
      uint64_t v36 = sub_1003F11D4(v3, v2, &v37);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, &v37, v23 + 10, v23 + 18);
      swift_bridgeObjectRelease_n(v2, 3LL);
      uint64_t v25 = "Truncated data for T:%hhu L:%hhu: %{public}s";
      uint64_t v26 = v21;
      uint64_t v27 = v35;
      uint64_t v28 = (uint8_t *)v23;
      uint64_t v29 = 18;
      goto LABEL_19;
    }

    goto LABEL_20;
  }

  uint64_t v14 = (2 * v9) | 1;
  v1[1] = v13;
  swift_bridgeObjectRetain(v5);
LABEL_22:
  *a1 = v10;
  a1[1] = v15;
  a1[2] = v2;
  a1[3] = v3;
  a1[4] = v14;
}

            uint64_t v30 = v22;
            _convertNSErrorToError(_:)(v22);

            swift_willThrow(v31);
LABEL_21:

            return;
          }
        }

        __break(1u);
      }
    }

    *(_DWORD *)(v4 + OBJC_IVAR____TtC12searchpartyd15KeyMapGenerator_firstIndex) = a2;
    uint64_t v17 = a2;
    uint64_t v18 = a2;
    goto LABEL_8;
  }

        swift_once(&qword_10099B3E8, sub_1003E02E8);
        goto LABEL_16;
      }
    }

    else
    {
      __break(1u);
    }

    __break(1u);
    goto LABEL_20;
  }

  uint64_t v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v7, v9, v10, v11, 0LL);

  swift_bridgeObjectRelease();
  uint64_t v14 = swift_bridgeObjectRelease();
  if ((v13 & 1) != 0) {
    goto LABEL_12;
  }
  uint64_t v15 = static os_log_type_t.default.getter(v14);
  if (qword_10099B3E8 != -1) {
    swift_once(&qword_10099B3E8, sub_1003E02E8);
  }
  BOOL result = os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  qword_100A2A8F0,  "BeaconKeyManager unregistering XPC Activity: service is disabled.",  65LL,  2LL,  _swiftEmptyArrayStorage,  (void)v26);
  uint64_t v4 = 0LL;
  uint64_t v17 = xmmword_1007F7CB0;
  uint64_t v18 = 0uLL;
LABEL_17:
  *(_OWORD *)a2 = v17;
  *(void *)(a2 + 16) = v4;
  *(int64x2_t *)(a2 + 24) = v18;
  return result;
}

uint64_t sub_1000E7D3C(uint64_t result, unint64_t a2)
{
  if (((a2 >> 60) | 4) != 0xF) {
    return sub_10001736C(result, a2);
  }
  return result;
}

uint64_t storeEnumTagSinglePayload for WildModeObservationState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 7 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 7) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF9) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF8) {
    return ((uint64_t (*)(void))((char *)&loc_1000E7DA0 + 4 * byte_1007EB9FF[v4]))();
  }
  *a1 = a2 + 7;
  return ((uint64_t (*)(void))((char *)sub_1000E7DD4 + 4 * byte_1007EB9FA[v4]))();
}

uint64_t sub_1000E7DD4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E7DDC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000E7DE4LL);
  }
  return result;
}

uint64_t sub_1000E7DF0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000E7DF8LL);
  }
  *(_BYTE *)BOOL result = a2 + 7;
  return result;
}

uint64_t sub_1000E7DFC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E7E04(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WildModeObservationState()
{
  return &type metadata for WildModeObservationState;
}

uint64_t storeEnumTagSinglePayload for WildModeAlertState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1000E7E6C + 4 * byte_1007EBA09[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000E7EA0 + 4 * byte_1007EBA04[v4]))();
}

uint64_t sub_1000E7EA0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E7EA8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000E7EB0LL);
  }
  return result;
}

uint64_t sub_1000E7EBC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000E7EC4LL);
  }
  *(_BYTE *)BOOL result = a2 + 4;
  return result;
}

uint64_t sub_1000E7EC8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E7ED0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WildModeAlertState()
{
  return &type metadata for WildModeAlertState;
}

uint64_t storeEnumTagSinglePayload for UnauthorizedTrackingType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000E7F38 + 4 * byte_1007EBA13[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000E7F6C + 4 * byte_1007EBA0E[v4]))();
}

uint64_t sub_1000E7F6C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E7F74(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000E7F7CLL);
  }
  return result;
}

uint64_t sub_1000E7F88(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000E7F90LL);
  }
  *(_BYTE *)BOOL result = a2 + 1;
  return result;
}

uint64_t sub_1000E7F94(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E7F9C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for UnauthorizedTrackingType()
{
  return &type metadata for UnauthorizedTrackingType;
}

uint64_t getEnumTagSinglePayload for LocationSource(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xEE) {
    goto LABEL_17;
  }
  if (a2 + 18 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 18) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 18;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 18;
    }
  }

uint64_t storeEnumTagSinglePayload for WildModeAssociationRecord.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 18 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 18) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xEE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xED) {
    return ((uint64_t (*)(void))((char *)&loc_1000E8094 + 4 * byte_1007EBA1D[v4]))();
  }
  *a1 = a2 + 18;
  return ((uint64_t (*)(void))((char *)sub_1000E80C8 + 4 * byte_1007EBA18[v4]))();
}

uint64_t sub_1000E80C8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E80D0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000E80D8LL);
  }
  return result;
}

uint64_t sub_1000E80E4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000E80ECLL);
  }
  *(_BYTE *)BOOL result = a2 + 18;
  return result;
}

uint64_t sub_1000E80F0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000E80F8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WildModeAssociationRecord.CodingKeys()
{
  return &type metadata for WildModeAssociationRecord.CodingKeys;
}

char *sub_1000E8114(char *a1, char *a2, int *a3)
{
  int v3 = a2;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v14 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = (char *)(v14 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    unsigned int v6 = a3;
    uint64_t v7 = type metadata accessor for UUID(0LL);
    uint64_t v8 = *(void *)(v7 - 8);
    uint64_t v9 = *(void (**)(char *, char *, uint64_t))(v8 + 16);
    v9(a1, v3, v7);
    uint64_t v10 = v6[5];
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &v3[v10];
    v245 = v9;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(&v3[v10], 1LL, v7))
    {
      uint64_t v13 = sub_100004AEC(&qword_10099D8A0);
      memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
    }

    else
    {
      v9(v11, v12, v7);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v11, 0LL, 1LL, v7);
    }

    uint64_t v15 = v6[7];
    a1[v6[6]] = v3[v6[6]];
    uint64_t v16 = &a1[v15];
    uint64_t v17 = &v3[v15];
    uint64_t v18 = type metadata accessor for MACAddress(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v18 - 8) + 16LL))(v16, v17, v18);
    uint64_t v19 = v6[8];
    uint64_t v20 = v6[9];
    uint64_t v21 = *(void *)&v3[v19];
    *(void *)&a1[v19] = v21;
    a1[v20] = v3[v20];
    uint64_t v22 = v6[10];
    uint64_t v23 = &a1[v22];
    uint64_t v24 = &v3[v22];
    uint64_t v25 = type metadata accessor for Date(0LL);
    uint64_t v26 = *(void *)(v25 - 8);
    uint64_t v27 = *(void (**)(char *, char *, uint64_t, __n128))(v26 + 16);
    __n128 v28 = swift_bridgeObjectRetain(v21);
    v27(v23, v24, v25, v28);
    uint64_t v29 = v6[11];
    uint64_t v30 = &a1[v29];
    uint64_t v31 = &v3[v29];
    uint64_t v251 = v25;
    v249 = (void (*)(char *, char *, uint64_t))v27;
    uint64_t v250 = v26;
    v248 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v26 + 48);
    if (v248(&v3[v29], 1LL, v25))
    {
      uint64_t v32 = sub_100004AEC((uint64_t *)&unk_10099D720);
      memcpy(v30, v31, *(void *)(*(void *)(v32 - 8) + 64LL));
    }

    else
    {
      ((void (*)(char *, char *, uint64_t))v27)(v30, v31, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v26 + 56))(v30, 0LL, 1LL, v25);
    }

    uint64_t v33 = v6[12];
    uint64_t v34 = v6[13];
    uint64_t v35 = &a1[v33];
    uint64_t v36 = &v3[v33];
    *uint64_t v35 = *v36;
    uint64_t v37 = *((void *)v36 + 1);
    uint64_t v38 = *((void *)v36 + 2);
    LOBYTE(v36) = v3[v34];
    *((void *)v35 + 1) = v37;
    *((void *)v35 + 2) = v38;
    a1[v34] = (char)v36;
    uint64_t v39 = v6[14];
    uint64_t v40 = &a1[v39];
    uint64_t v41 = &v3[v39];
    uint64_t v42 = (int *)type metadata accessor for AccessoryMetadata(0LL);
    uint64_t v43 = *((void *)v42 - 1);
    uint64_t v44 = *(unsigned int (**)(char *, uint64_t, int *, __n128))(v43 + 48);
    __n128 v45 = swift_bridgeObjectRetain(v38);
    if (v44(v41, 1LL, v42, v45))
    {
      uint64_t v46 = sub_100004AEC(&qword_1009B9250);
      memcpy(v40, v41, *(void *)(*(void *)(v46 - 8) + 64LL));
    }

    else
    {
      v245(v40, v41, v7);
      uint64_t v47 = v42[5];
      uint64_t v48 = (uint64_t *)&v40[v47];
      uint64_t v49 = (uint64_t *)&v41[v47];
      uint64_t v50 = *v49;
      unint64_t v51 = v49[1];
      sub_10001736C(*v49, v51);
      *uint64_t v48 = v50;
      v48[1] = v51;
      uint64_t v52 = v42[6];
      uint64_t v53 = &v40[v52];
      uint64_t v54 = &v41[v52];
      uint64_t v55 = *((void *)v54 + 1);
      *(void *)uint64_t v53 = *(void *)v54;
      *((void *)v53 + 1) = v55;
      uint64_t v56 = v42[7];
      uint64_t v57 = &v40[v56];
      uint64_t v58 = &v41[v56];
      uint64_t v59 = *((void *)v58 + 1);
      *(void *)uint64_t v57 = *(void *)v58;
      *((void *)v57 + 1) = v59;
      *(_DWORD *)&v40[v42[8]] = *(_DWORD *)&v41[v42[8]];
      uint64_t v60 = v42[9];
      uint64_t v61 = &v40[v60];
      uint64_t v62 = &v41[v60];
      *(_DWORD *)uint64_t v61 = *(_DWORD *)v62;
      v61[4] = v62[4];
      uint64_t v63 = v42[10];
      uint64_t v64 = &v40[v63];
      uint64_t v65 = &v41[v63];
      *(_OWORD *)uint64_t v64 = *(_OWORD *)v65;
      v64[16] = v65[16];
      uint64_t v66 = v42[11];
      uint64_t v67 = &v40[v66];
      uint64_t v68 = &v41[v66];
      v67[8] = v68[8];
      *(void *)uint64_t v67 = *(void *)v68;
      uint64_t v69 = v42[12];
      uint64_t v70 = &v40[v69];
      char v71 = &v41[v69];
      *(_DWORD *)uint64_t v70 = *(_DWORD *)v71;
      v70[4] = v71[4];
      v40[v42[13]] = v41[v42[13]];
      v40[v42[14]] = v41[v42[14]];
      uint64_t v72 = v42[15];
      uint64_t v73 = &v40[v72];
      uint64_t v74 = &v41[v72];
      uint64_t v75 = *((void *)v74 + 1);
      *(void *)uint64_t v73 = *(void *)v74;
      *((void *)v73 + 1) = v75;
      uint64_t v76 = *(void (**)(char *, void, uint64_t, int *, __n128))(v43 + 56);
      swift_bridgeObjectRetain(v55);
      swift_bridgeObjectRetain(v59);
      __n128 v77 = swift_bridgeObjectRetain(v75);
      v76(v40, 0LL, 1LL, v42, v77);
    }

    uint64_t v78 = v251;
    uint64_t v80 = v249;
    uint64_t v79 = v250;
    uint64_t v81 = v6[15];
    uint64_t v82 = &a1[v81];
    uint64_t v83 = &v3[v81];
    uint64_t v84 = (int *)type metadata accessor for AccessoryProductInfo(0LL);
    uint64_t v85 = *((void *)v84 - 1);
    if ((*(unsigned int (**)(char *, uint64_t, int *))(v85 + 48))(v83, 1LL, v84))
    {
      uint64_t v86 = sub_100004AEC(&qword_10099CE68);
      memcpy(v82, v83, *(void *)(*(void *)(v86 - 8) + 64LL));
      uint64_t v87 = (unsigned int (*)(char *, uint64_t, uint64_t, __n128))v248;
    }

    else
    {
      v238 = v3;
      uint64_t v239 = v85;
      *(void *)uint64_t v82 = *(void *)v83;
      v82[8] = v83[8];
      uint64_t v88 = v84[5];
      unsigned int v89 = &v82[v88];
      uint64_t v90 = &v83[v88];
      uint64_t v91 = type metadata accessor for ServerStatusCode(0LL);
      (*(void (**)(_BYTE *, char *, uint64_t))(*(void *)(v91 - 8) + 16LL))(v89, v90, v91);
      v82[v84[6]] = v83[v84[6]];
      v82[v84[7]] = v83[v84[7]];
      uint64_t v92 = v84[8];
      unint64_t v93 = &v82[v92];
      uint64_t v94 = &v83[v92];
      uint64_t v241 = *((void *)v94 + 1);
      *unint64_t v93 = *(void *)v94;
      v93[1] = v241;
      v82[v84[9]] = v83[v84[9]];
      v82[v84[10]] = v83[v84[10]];
      v82[v84[11]] = v83[v84[11]];
      uint64_t v95 = v84[12];
      uint64_t v96 = &v82[v95];
      uint64_t v97 = &v83[v95];
      uint64_t v98 = *((void *)v97 + 1);
      *uint64_t v96 = *(void *)v97;
      v96[1] = v98;
      uint64_t v99 = v84[13];
      char v100 = &v82[v99];
      uint64_t v101 = &v83[v99];
      uint64_t v102 = *((void *)v101 + 1);
      void *v100 = *(void *)v101;
      v100[1] = v102;
      uint64_t v103 = v84[14];
      int v104 = &v82[v103];
      uint64_t v105 = &v83[v103];
      *(void *)int v104 = *(void *)v105;
      v104[8] = v105[8];
      uint64_t v106 = v84[15];
      uint64_t v107 = &v82[v106];
      uint64_t v108 = &v83[v106];
      uint64_t v109 = *((void *)v108 + 1);
      *uint64_t v107 = *(void *)v108;
      v107[1] = v109;
      uint64_t v110 = v84[16];
      __dst = &v82[v110];
      v237 = &v83[v110];
      uint64_t v111 = type metadata accessor for URL(0LL);
      uint64_t v246 = *(void *)(v111 - 8);
      char v112 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v246 + 48);
      swift_bridgeObjectRetain(v241);
      swift_bridgeObjectRetain(v98);
      swift_bridgeObjectRetain(v102);
      __n128 v113 = swift_bridgeObjectRetain(v109);
      v242 = v112;
      if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v112)(v237, 1LL, v111, v113))
      {
        uint64_t v114 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(__dst, v237, *(void *)(*(void *)(v114 - 8) + 64LL));
        uint64_t v115 = v246;
      }

      else
      {
        uint64_t v115 = v246;
        (*(void (**)(_BYTE *, char *, uint64_t))(v246 + 16))(__dst, v237, v111);
        (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v246 + 56))(__dst, 0LL, 1LL, v111);
      }

      uint64_t v116 = v84[17];
      uint64_t v117 = &v82[v116];
      uint64_t v118 = &v83[v116];
      uint64_t v240 = v111;
      v233 = v6;
      if (v242(&v83[v116], 1LL, v111))
      {
        uint64_t v119 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v117, v118, *(void *)(*(void *)(v119 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(_BYTE *, char *, uint64_t))(v115 + 16))(v117, v118, v111);
        (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v115 + 56))(v117, 0LL, 1LL, v111);
      }

      uint64_t v120 = v84[18];
      char v121 = &v82[v120];
      uint64_t v122 = &v83[v120];
      uint64_t v123 = *((void *)v122 + 1);
      *char v121 = *(void *)v122;
      v121[1] = v123;
      *(void *)&v82[v84[19]] = *(void *)&v83[v84[19]];
      uint64_t v124 = v84[20];
      char v125 = &v82[v124];
      __int16 v126 = &v83[v124];
      uint64_t v127 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
      uint64_t v128 = *((void *)v127 - 1);
      uint64_t v129 = *(unsigned int (**)(char *, uint64_t, int *, __n128))(v128 + 48);
      __n128 v130 = swift_bridgeObjectRetain(v123);
      if (v129(v126, 1LL, v127, v130))
      {
        uint64_t v131 = sub_100004AEC(&qword_1009A6DD0);
        memcpy(v125, v126, *(void *)(*(void *)(v131 - 8) + 64LL));
        uint64_t v132 = v246;
        unsigned int v6 = v233;
      }

      else
      {
        uint64_t v232 = v128;
        uint64_t v133 = *((void *)v126 + 1);
        *char v125 = *(void *)v126;
        v125[1] = v133;
        uint64_t v134 = *((void *)v126 + 3);
        v125[2] = *((void *)v126 + 2);
        v125[3] = v134;
        uint64_t v135 = *((void *)v126 + 5);
        v125[4] = *((void *)v126 + 4);
        v125[5] = v135;
        *((_WORD *)v125 + 24) = *((_WORD *)v126 + 24);
        *((_BYTE *)v125 + 72) = v126[72];
        uint64_t v136 = *((void *)v126 + 8);
        v125[7] = *((void *)v126 + 7);
        v125[8] = v136;
        __dsta = v126;
        uint64_t v137 = v127[10];
        uint64_t v138 = (char *)v125 + v137;
        uint64_t v139 = &__dsta[v137];
        swift_bridgeObjectRetain(v133);
        swift_bridgeObjectRetain(v134);
        __n128 v140 = swift_bridgeObjectRetain(v135);
        uint64_t v141 = v125;
        if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v242)(v139, 1LL, v240, v140))
        {
          uint64_t v142 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
          memcpy(v138, v139, *(void *)(*(void *)(v142 - 8) + 64LL));
          uint64_t v143 = v246;
        }

        else
        {
          uint64_t v144 = v139;
          uint64_t v143 = v246;
          (*(void (**)(char *, char *, uint64_t))(v246 + 16))(v138, v144, v240);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v246 + 56))(v138, 0LL, 1LL, v240);
        }

        unsigned int v6 = v233;
        uint64_t v145 = __dsta;
        uint64_t v146 = v127[11];
        __dstb = (char *)v141 + v146;
        uint64_t v147 = &v145[v146];
        if (((unsigned int (*)(void))v242)())
        {
          uint64_t v148 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
          memcpy(__dstb, v147, *(void *)(*(void *)(v148 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v143 + 16))(__dstb, v147, v240);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v143 + 56))(__dstb, 0LL, 1LL, v240);
        }

        uint64_t v149 = v127[12];
        uint64_t v150 = (char *)v141 + v149;
        uint64_t v151 = &v145[v149];
        *(void *)uint64_t v150 = *(void *)v151;
        v150[8] = v151[8];
        uint64_t v152 = v127[13];
        uint64_t v153 = (void *)((char *)v141 + v152);
        unint64_t v154 = &v145[v152];
        uint64_t v155 = *((void *)v154 + 1);
        *uint64_t v153 = *(void *)v154;
        v153[1] = v155;
        uint64_t v156 = v127[14];
        uint64_t v243 = *(void *)&v145[v156];
        *(void *)((char *)v141 + v156) = v243;
        uint64_t v157 = v127[15];
        char v158 = (void *)((char *)v141 + v157);
        uint64_t v159 = &v145[v157];
        uint64_t v160 = *((void *)v159 + 1);
        void *v158 = *(void *)v159;
        v158[1] = v160;
        uint64_t v161 = v127[16];
        uint64_t v162 = *(void *)&v145[v161];
        *(void *)((char *)v141 + v161) = v162;
        uint64_t v163 = v127[17];
        v164 = (char *)v141 + v163;
        BOOL v165 = &v145[v163];
        *(_OWORD *)v164 = *(_OWORD *)v165;
        v164[16] = v165[16];
        uint64_t v166 = v127[18];
        uint64_t v167 = (char *)v141 + v166;
        char v168 = &v145[v166];
        *(_OWORD *)uint64_t v167 = *(_OWORD *)v168;
        v167[16] = v168[16];
        v169 = *(void (**)(void *, void, uint64_t, int *, __n128))(v232 + 56);
        swift_bridgeObjectRetain(v155);
        swift_bridgeObjectRetain(v243);
        swift_bridgeObjectRetain(v160);
        __n128 v170 = swift_bridgeObjectRetain(v162);
        v169(v141, 0LL, 1LL, v127, v170);
        uint64_t v132 = v246;
      }

      *(_DWORD *)&v82[v84[21]] = *(_DWORD *)&v83[v84[21]];
      uint64_t v171 = v84[22];
      uint64_t v172 = *(void *)&v83[v171];
      *(void *)&v82[v171] = v172;
      uint64_t v173 = v84[23];
      uint64_t v174 = &v82[v173];
      uint64_t v175 = &v83[v173];
      unint64_t v176 = *(void *)&v83[v173 + 8];
      swift_bridgeObjectRetain(v172);
      if (v176 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v174 = *(_OWORD *)v175;
      }

      else
      {
        uint64_t v177 = *(void *)v175;
        sub_10001736C(v177, v176);
        *(void *)uint64_t v174 = v177;
        *((void *)v174 + 1) = v176;
      }

      uint64_t v178 = v84[24];
      uint64_t v179 = &v82[v178];
      uint64_t v180 = &v83[v178];
      unint64_t v181 = *((void *)v180 + 1);
      if (v181 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v179 = *(_OWORD *)v180;
      }

      else
      {
        uint64_t v182 = *(void *)v180;
        sub_10001736C(*(void *)v180, *((void *)v180 + 1));
        *(void *)uint64_t v179 = v182;
        *((void *)v179 + 1) = v181;
      }

      uint64_t v183 = *(void (**)(_BYTE *, char *, uint64_t))(v132 + 16);
      v183(&v82[v84[25]], &v83[v84[25]], v240);
      v183(&v82[v84[26]], &v83[v84[26]], v240);
      v183(&v82[v84[27]], &v83[v84[27]], v240);
      v183(&v82[v84[28]], &v83[v84[28]], v240);
      v183(&v82[v84[29]], &v83[v84[29]], v240);
      v183(&v82[v84[30]], &v83[v84[30]], v240);
      uint64_t v184 = v84[31];
      uint64_t v185 = &v82[v184];
      uint64_t v186 = &v83[v184];
      uint64_t v187 = *((void *)v186 + 1);
      *uint64_t v185 = *(void *)v186;
      v185[1] = v187;
      uint64_t v188 = v84[32];
      uint64_t v189 = *(void *)&v83[v188];
      *(void *)&v82[v188] = v189;
      uint64_t v190 = v84[33];
      uint64_t v191 = &v82[v190];
      uint64_t v192 = &v83[v190];
      uint64_t v193 = *((void *)v192 + 1);
      *uint64_t v191 = *(void *)v192;
      v191[1] = v193;
      uint64_t v194 = v84[34];
      uint64_t v195 = *(void *)&v83[v194];
      *(void *)&v82[v194] = v195;
      uint64_t v196 = v84[35];
      v197 = &v82[v196];
      v198 = &v83[v196];
      *(_OWORD *)v197 = *(_OWORD *)v198;
      v197[16] = v198[16];
      uint64_t v199 = v84[36];
      uint64_t v200 = &v82[v199];
      uint64_t v201 = &v83[v199];
      *(_OWORD *)uint64_t v200 = *(_OWORD *)v201;
      v200[16] = v201[16];
      uint64_t v202 = v84[37];
      v244 = &v83[v202];
      v247 = &v82[v202];
      swift_bridgeObjectRetain(v187);
      swift_bridgeObjectRetain(v189);
      swift_bridgeObjectRetain(v193);
      __n128 v203 = swift_bridgeObjectRetain(v195);
      ((void (*)(_BYTE *, char *, uint64_t, __n128))v183)(v247, v244, v240, v203);
      v183(&v82[v84[38]], &v83[v84[38]], v240);
      v183(&v82[v84[39]], &v83[v84[39]], v240);
      v183(&v82[v84[40]], &v83[v84[40]], v240);
      v183(&v82[v84[41]], &v83[v84[41]], v240);
      v183(&v82[v84[42]], &v83[v84[42]], v240);
      v82[v84[43]] = v83[v84[43]];
      v82[v84[44]] = v83[v84[44]];
      v82[v84[45]] = v83[v84[45]];
      uint64_t v204 = v84[46];
      uint64_t v205 = &v82[v204];
      uint64_t v206 = &v83[v204];
      uint64_t v207 = *((void *)v206 + 1);
      *uint64_t v205 = *(void *)v206;
      v205[1] = v207;
      uint64_t v208 = v84[47];
      v209 = &v82[v208];
      v210 = &v83[v208];
      uint64_t v211 = *((void *)v210 + 1);
      void *v209 = *(void *)v210;
      v209[1] = v211;
      v212 = *(void (**)(_BYTE *, void, uint64_t, int *, __n128))(v239 + 56);
      swift_bridgeObjectRetain(v207);
      __n128 v213 = swift_bridgeObjectRetain(v211);
      v212(v82, 0LL, 1LL, v84, v213);
      uint64_t v78 = v251;
      uint64_t v80 = v249;
      uint64_t v79 = v250;
      uint64_t v87 = (unsigned int (*)(char *, uint64_t, uint64_t, __n128))v248;
      int v3 = v238;
    }

    uint64_t v214 = v6[17];
    a1[v6[16]] = v3[v6[16]];
    uint64_t v215 = *(void *)&v3[v214];
    *(void *)&a1[v214] = v215;
    uint64_t v216 = v6[18];
    v217 = &a1[v216];
    v218 = &v3[v216];
    __n128 v219 = swift_bridgeObjectRetain(v215);
    if (v87(v218, 1LL, v78, v219))
    {
      uint64_t v220 = sub_100004AEC((uint64_t *)&unk_10099D720);
      memcpy(v217, v218, *(void *)(*(void *)(v220 - 8) + 64LL));
    }

    else
    {
      v80(v217, v218, v78);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56))(v217, 0LL, 1LL, v78);
    }

    uint64_t v221 = v6[19];
    v222 = &a1[v221];
    v223 = &v3[v221];
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v87)(&v3[v221], 1LL, v78))
    {
      uint64_t v224 = sub_100004AEC((uint64_t *)&unk_10099D720);
      memcpy(v222, v223, *(void *)(*(void *)(v224 - 8) + 64LL));
    }

    else
    {
      v80(v222, v223, v78);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v79 + 56))(v222, 0LL, 1LL, v78);
    }

    uint64_t v225 = v6[20];
    v226 = &a1[v225];
    v227 = &v3[v225];
    unint64_t v228 = *((void *)v227 + 1);
    if (((v228 >> 60) | 4) == 0xF)
    {
      *(_OWORD *)v226 = *(_OWORD *)v227;
    }

    else
    {
      uint64_t v229 = *(void *)v227;
      sub_10001736C(*(void *)v227, *((void *)v227 + 1));
      *(void *)v226 = v229;
      *((void *)v226 + 1) = v228;
    }

    uint64_t v230 = v6[22];
    a1[v6[21]] = v3[v6[21]];
    *(_WORD *)&a1[v230] = *(_WORD *)&v3[v230];
  }

  return a1;
}

uint64_t sub_1000E8E04(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  unsigned int v6 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v6(a1, v4);
  uint64_t v7 = a1 + a2[5];
  uint64_t v8 = a1 + a2[7];
  uint64_t v9 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = a1 + a2[10];
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v13(v10, v11);
  uint64_t v14 = a1 + a2[11];
  uint64_t v15 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
  if (!v15(v14, 1LL, v11)) {
    v13(v14, v11);
  }
  swift_bridgeObjectRelease();
  uint64_t v16 = a1 + a2[14];
  uint64_t v17 = type metadata accessor for AccessoryMetadata(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 48LL))(v16, 1LL, v17))
  {
    v6(v16, v4);
    sub_100016F9C(*(void *)(v16 + *(int *)(v17 + 20)), *(void *)(v16 + *(int *)(v17 + 20) + 8));
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  uint64_t v18 = a1 + a2[15];
  uint64_t v19 = (int *)type metadata accessor for AccessoryProductInfo(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v19 - 1) + 48LL))(v18, 1LL, v19))
  {
    uint64_t v20 = v18 + v19[5];
    uint64_t v21 = type metadata accessor for ServerStatusCode(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v21 - 8) + 8LL))(v20, v21);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v22 = v18 + v19[16];
    uint64_t v23 = type metadata accessor for URL(0LL);
    uint64_t v42 = *(void *)(v23 - 8);
    uint64_t v24 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v42 + 48);
    if (!v24(v22, 1LL, v23)) {
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v22, v23);
    }
    uint64_t v41 = v15;
    uint64_t v25 = v18 + v19[17];
    if (!v24(v25, 1LL, v23)) {
      (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v25, v23);
    }
    swift_bridgeObjectRelease();
    uint64_t v26 = v18 + v19[20];
    uint64_t v27 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 48LL))(v26, 1LL, v27))
    {
      uint64_t v40 = v13;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v28 = v26 + *(int *)(v27 + 40);
      if (!v24(v28, 1LL, v23)) {
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v28, v23);
      }
      uint64_t v29 = v26 + *(int *)(v27 + 44);
      if (!v24(v29, 1LL, v23)) {
        (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v29, v23);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v13 = v40;
    }

    swift_bridgeObjectRelease();
    uint64_t v30 = (uint64_t *)(v18 + v19[23]);
    unint64_t v31 = v30[1];
    uint64_t v15 = v41;
    if (v31 >> 60 != 15) {
      sub_100016F9C(*v30, v31);
    }
    uint64_t v32 = (uint64_t *)(v18 + v19[24]);
    unint64_t v33 = v32[1];
    if (v33 >> 60 != 15) {
      sub_100016F9C(*v32, v33);
    }
    uint64_t v34 = *(void (**)(uint64_t, uint64_t))(v42 + 8);
    v34(v18 + v19[25], v23);
    v34(v18 + v19[26], v23);
    v34(v18 + v19[27], v23);
    v34(v18 + v19[28], v23);
    v34(v18 + v19[29], v23);
    v34(v18 + v19[30], v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v34(v18 + v19[37], v23);
    v34(v18 + v19[38], v23);
    v34(v18 + v19[39], v23);
    v34(v18 + v19[40], v23);
    v34(v18 + v19[41], v23);
    v34(v18 + v19[42], v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  uint64_t v35 = a1 + a2[18];
  if (!v15(v35, 1LL, v11)) {
    v13(v35, v11);
  }
  uint64_t v36 = a1 + a2[19];
  uint64_t result = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v15)(v36, 1LL, v11);
  if (!(_DWORD)result) {
    uint64_t result = ((uint64_t (*)(uint64_t, uint64_t))v13)(v36, v11);
  }
  uint64_t v38 = (uint64_t *)(a1 + a2[20]);
  unint64_t v39 = v38[1];
  if (((v39 >> 60) | 4) != 0xF) {
    return sub_100016F9C(*v38, v39);
  }
  return result;
}

uint64_t sub_1000E93BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  v238 = (void (*)(char *, char *, uint64_t))v8;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a2 + v9, 1LL, v6))
  {
    uint64_t v12 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    v8((uint64_t)v10, (uint64_t)v11, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0LL, 1LL, v6);
  }

  uint64_t v13 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL))(v14, v15, v16);
  uint64_t v17 = a3[8];
  uint64_t v18 = a3[9];
  uint64_t v19 = *(void *)(a2 + v17);
  *(void *)(a1 + v17) = v19;
  *(_BYTE *)(a1 + v18) = *(_BYTE *)(a2 + v18);
  uint64_t v20 = a3[10];
  uint64_t v21 = a1 + v20;
  uint64_t v22 = a2 + v20;
  uint64_t v23 = type metadata accessor for Date(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t, __n128))(v24 + 16);
  __n128 v26 = swift_bridgeObjectRetain(v19);
  v25(v21, v22, v23, v26);
  uint64_t v27 = a3[11];
  uint64_t v28 = (void *)(a1 + v27);
  uint64_t v29 = (const void *)(a2 + v27);
  v242 = (void (*)(void *, const void *, uint64_t))v25;
  uint64_t v243 = v23;
  uint64_t v240 = v24;
  uint64_t v241 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v24 + 48);
  if (v241(a2 + v27, 1LL, v23))
  {
    uint64_t v30 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v28, v29, *(void *)(*(void *)(v30 - 8) + 64LL));
  }

  else
  {
    ((void (*)(void *, const void *, uint64_t))v25)(v28, v29, v23);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v24 + 56))(v28, 0LL, 1LL, v23);
  }

  uint64_t v31 = a3[12];
  uint64_t v32 = a3[13];
  uint64_t v33 = a1 + v31;
  uint64_t v34 = a2 + v31;
  *(_BYTE *)uint64_t v33 = *(_BYTE *)v34;
  uint64_t v35 = *(void *)(v34 + 8);
  uint64_t v36 = *(void *)(v34 + 16);
  LOBYTE(v34) = *(_BYTE *)(a2 + v32);
  *(void *)(v33 + 8) = v35;
  *(void *)(v33 + 16) = v36;
  *(_BYTE *)(a1 + v32) = v34;
  v244 = a3;
  uint64_t v37 = a3[14];
  uint64_t v38 = (char *)(a1 + v37);
  unint64_t v39 = (char *)(a2 + v37);
  uint64_t v40 = (int *)type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v41 = *((void *)v40 - 1);
  uint64_t v42 = *(unsigned int (**)(char *, uint64_t, int *, __n128))(v41 + 48);
  __n128 v43 = swift_bridgeObjectRetain(v36);
  if (v42(v39, 1LL, v40, v43))
  {
    uint64_t v44 = sub_100004AEC(&qword_1009B9250);
    memcpy(v38, v39, *(void *)(*(void *)(v44 - 8) + 64LL));
  }

  else
  {
    v238(v38, v39, v6);
    uint64_t v45 = v40[5];
    uint64_t v46 = (uint64_t *)&v38[v45];
    uint64_t v47 = (uint64_t *)&v39[v45];
    uint64_t v48 = *v47;
    unint64_t v49 = v47[1];
    sub_10001736C(*v47, v49);
    *uint64_t v46 = v48;
    v46[1] = v49;
    uint64_t v50 = v40[6];
    unint64_t v51 = &v38[v50];
    uint64_t v52 = &v39[v50];
    uint64_t v53 = *((void *)v52 + 1);
    *(void *)unint64_t v51 = *(void *)v52;
    *((void *)v51 + 1) = v53;
    uint64_t v54 = v40[7];
    uint64_t v55 = &v38[v54];
    uint64_t v56 = &v39[v54];
    uint64_t v57 = *((void *)v56 + 1);
    *(void *)uint64_t v55 = *(void *)v56;
    *((void *)v55 + 1) = v57;
    *(_DWORD *)&v38[v40[8]] = *(_DWORD *)&v39[v40[8]];
    uint64_t v58 = v40[9];
    uint64_t v59 = &v38[v58];
    uint64_t v60 = &v39[v58];
    *(_DWORD *)uint64_t v59 = *(_DWORD *)v60;
    v59[4] = v60[4];
    uint64_t v61 = v40[10];
    uint64_t v62 = &v38[v61];
    uint64_t v63 = &v39[v61];
    *(_OWORD *)uint64_t v62 = *(_OWORD *)v63;
    v62[16] = v63[16];
    uint64_t v64 = v40[11];
    uint64_t v65 = &v38[v64];
    uint64_t v66 = &v39[v64];
    v65[8] = v66[8];
    *(void *)uint64_t v65 = *(void *)v66;
    uint64_t v67 = v40[12];
    uint64_t v68 = &v38[v67];
    uint64_t v69 = &v39[v67];
    *(_DWORD *)uint64_t v68 = *(_DWORD *)v69;
    v68[4] = v69[4];
    v38[v40[13]] = v39[v40[13]];
    v38[v40[14]] = v39[v40[14]];
    uint64_t v70 = v40[15];
    char v71 = &v38[v70];
    uint64_t v72 = &v39[v70];
    uint64_t v73 = *((void *)v72 + 1);
    *(void *)char v71 = *(void *)v72;
    *((void *)v71 + 1) = v73;
    uint64_t v74 = *(void (**)(char *, void, uint64_t, int *, __n128))(v41 + 56);
    swift_bridgeObjectRetain(v53);
    swift_bridgeObjectRetain(v57);
    __n128 v75 = swift_bridgeObjectRetain(v73);
    v74(v38, 0LL, 1LL, v40, v75);
  }

  uint64_t v76 = v243;
  __n128 v77 = v244;
  uint64_t v78 = v244[15];
  uint64_t v79 = (_BYTE *)(a1 + v78);
  uint64_t v80 = (_BYTE *)(a2 + v78);
  uint64_t v81 = (int *)type metadata accessor for AccessoryProductInfo(0LL);
  uint64_t v82 = *((void *)v81 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v82 + 48))(v80, 1LL, v81))
  {
    uint64_t v83 = sub_100004AEC(&qword_10099CE68);
    memcpy(v79, v80, *(void *)(*(void *)(v83 - 8) + 64LL));
    uint64_t v85 = (unsigned int (*)(const void *, uint64_t, uint64_t, __n128))v241;
    uint64_t v84 = v242;
  }

  else
  {
    uint64_t v233 = a1;
    uint64_t v234 = v82;
    uint64_t v235 = a2;
    *(void *)uint64_t v79 = *(void *)v80;
    v79[8] = v80[8];
    uint64_t v86 = v81[5];
    uint64_t v87 = &v79[v86];
    uint64_t v88 = &v80[v86];
    uint64_t v89 = type metadata accessor for ServerStatusCode(0LL);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v89 - 8) + 16LL))(v87, v88, v89);
    v79[v81[6]] = v80[v81[6]];
    v79[v81[7]] = v80[v81[7]];
    uint64_t v90 = v81[8];
    uint64_t v91 = &v79[v90];
    uint64_t v92 = &v80[v90];
    uint64_t v231 = v92[1];
    *uint64_t v91 = *v92;
    v91[1] = v231;
    v79[v81[9]] = v80[v81[9]];
    v79[v81[10]] = v80[v81[10]];
    v79[v81[11]] = v80[v81[11]];
    uint64_t v93 = v81[12];
    uint64_t v94 = &v79[v93];
    uint64_t v95 = &v80[v93];
    uint64_t v96 = v95[1];
    void *v94 = *v95;
    v94[1] = v96;
    uint64_t v97 = v81[13];
    uint64_t v98 = &v79[v97];
    uint64_t v99 = &v80[v97];
    uint64_t v100 = v99[1];
    *uint64_t v98 = *v99;
    v98[1] = v100;
    uint64_t v101 = v81[14];
    uint64_t v102 = &v79[v101];
    uint64_t v103 = &v80[v101];
    *(void *)uint64_t v102 = *(void *)v103;
    v102[8] = v103[8];
    uint64_t v104 = v81[15];
    uint64_t v105 = &v79[v104];
    uint64_t v106 = &v80[v104];
    uint64_t v107 = v106[1];
    *uint64_t v105 = *v106;
    v105[1] = v107;
    uint64_t v108 = v81[16];
    __dst = &v79[v108];
    uint64_t v229 = &v80[v108];
    uint64_t v109 = type metadata accessor for URL(0LL);
    uint64_t v110 = *(void *)(v109 - 8);
    uint64_t v111 = *(unsigned int (**)(void))(v110 + 48);
    swift_bridgeObjectRetain(v231);
    swift_bridgeObjectRetain(v96);
    swift_bridgeObjectRetain(v100);
    __n128 v112 = swift_bridgeObjectRetain(v107);
    uint64_t v239 = v110;
    if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t, __n128))v111)(v229, 1LL, v109, v112))
    {
      uint64_t v113 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(__dst, v229, *(void *)(*(void *)(v113 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v110 + 16))(__dst, v229, v109);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v110 + 56))(__dst, 0LL, 1LL, v109);
    }

    uint64_t v114 = v81[17];
    uint64_t v115 = &v79[v114];
    uint64_t v116 = &v80[v114];
    uint64_t v117 = v111;
    __dsta = (void *)v109;
    if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v111)(&v80[v114], 1LL, v109))
    {
      uint64_t v118 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v115, v116, *(void *)(*(void *)(v118 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v239 + 16))(v115, v116, v109);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v239 + 56))(v115, 0LL, 1LL, v109);
    }

    uint64_t v119 = v81[18];
    uint64_t v120 = &v79[v119];
    char v121 = &v80[v119];
    uint64_t v122 = v121[1];
    *uint64_t v120 = *v121;
    v120[1] = v122;
    *(void *)&v79[v81[19]] = *(void *)&v80[v81[19]];
    uint64_t v123 = v81[20];
    uint64_t v124 = &v79[v123];
    char v125 = &v80[v123];
    __int16 v126 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
    uint64_t v127 = *((void *)v126 - 1);
    uint64_t v128 = *(unsigned int (**)(void *, uint64_t, int *, __n128))(v127 + 48);
    __n128 v129 = swift_bridgeObjectRetain(v122);
    if (v128(v125, 1LL, v126, v129))
    {
      uint64_t v130 = sub_100004AEC(&qword_1009A6DD0);
      memcpy(v124, v125, *(void *)(*(void *)(v130 - 8) + 64LL));
    }

    else
    {
      uint64_t v232 = v127;
      uint64_t v131 = v125[1];
      *uint64_t v124 = *v125;
      v124[1] = v131;
      uint64_t v132 = v125[3];
      v124[2] = v125[2];
      v124[3] = v132;
      uint64_t v133 = v125[5];
      v124[4] = v125[4];
      v124[5] = v133;
      *((_WORD *)v124 + 24) = *((_WORD *)v125 + 24);
      *((_BYTE *)v124 + 72) = *((_BYTE *)v125 + 72);
      uint64_t v134 = v125[8];
      v124[7] = v125[7];
      v124[8] = v134;
      uint64_t v135 = v126[10];
      uint64_t v230 = (char *)v124 + v135;
      uint64_t v136 = (char *)v125 + v135;
      swift_bridgeObjectRetain(v131);
      swift_bridgeObjectRetain(v132);
      __n128 v137 = swift_bridgeObjectRetain(v133);
      if (((unsigned int (*)(char *, uint64_t, void *, __n128))v117)(v136, 1LL, __dsta, v137))
      {
        uint64_t v138 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v230, v136, *(void *)(*(void *)(v138 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, void *))(v239 + 16))(v230, v136, __dsta);
        (*(void (**)(char *, void, uint64_t, void *))(v239 + 56))(v230, 0LL, 1LL, __dsta);
      }

      uint64_t v139 = v126[11];
      __n128 v140 = (char *)v124 + v139;
      uint64_t v141 = (char *)v125 + v139;
      if (v117())
      {
        uint64_t v142 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v140, v141, *(void *)(*(void *)(v142 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, void *))(v239 + 16))(v140, v141, __dsta);
        (*(void (**)(char *, void, uint64_t, void *))(v239 + 56))(v140, 0LL, 1LL, __dsta);
      }

      uint64_t v143 = v126[12];
      uint64_t v144 = (char *)v124 + v143;
      uint64_t v145 = (char *)v125 + v143;
      *(void *)uint64_t v144 = *(void *)v145;
      v144[8] = v145[8];
      uint64_t v146 = v126[13];
      uint64_t v147 = (void *)((char *)v124 + v146);
      uint64_t v148 = (void *)((char *)v125 + v146);
      uint64_t v149 = v148[1];
      *uint64_t v147 = *v148;
      v147[1] = v149;
      uint64_t v150 = v126[14];
      uint64_t v151 = *(void *)((char *)v125 + v150);
      *(void *)((char *)v124 + v150) = v151;
      uint64_t v152 = v126[15];
      uint64_t v153 = (void *)((char *)v124 + v152);
      unint64_t v154 = (void *)((char *)v125 + v152);
      uint64_t v155 = v154[1];
      *uint64_t v153 = *v154;
      v153[1] = v155;
      uint64_t v156 = v126[16];
      uint64_t v157 = *(void *)((char *)v125 + v156);
      *(void *)((char *)v124 + v156) = v157;
      uint64_t v158 = v126[17];
      uint64_t v159 = (char *)v124 + v158;
      uint64_t v160 = (char *)v125 + v158;
      *(_OWORD *)uint64_t v159 = *(_OWORD *)v160;
      v159[16] = v160[16];
      uint64_t v161 = v126[18];
      uint64_t v162 = (char *)v124 + v161;
      uint64_t v163 = (char *)v125 + v161;
      *(_OWORD *)uint64_t v162 = *(_OWORD *)v163;
      v162[16] = v163[16];
      v164 = *(void (**)(void *, void, uint64_t, int *, __n128))(v232 + 56);
      swift_bridgeObjectRetain(v149);
      swift_bridgeObjectRetain(v151);
      swift_bridgeObjectRetain(v155);
      __n128 v165 = swift_bridgeObjectRetain(v157);
      v164(v124, 0LL, 1LL, v126, v165);
    }

    *(_DWORD *)&v79[v81[21]] = *(_DWORD *)&v80[v81[21]];
    uint64_t v166 = v81[22];
    uint64_t v167 = *(void *)&v80[v166];
    *(void *)&v79[v166] = v167;
    uint64_t v168 = v81[23];
    v169 = &v79[v168];
    __n128 v170 = (uint64_t *)&v80[v168];
    unint64_t v171 = *(void *)&v80[v168 + 8];
    swift_bridgeObjectRetain(v167);
    if (v171 >> 60 == 15)
    {
      *(_OWORD *)v169 = *(_OWORD *)v170;
    }

    else
    {
      uint64_t v172 = *v170;
      sub_10001736C(*v170, v171);
      *(void *)v169 = v172;
      *((void *)v169 + 1) = v171;
    }

    uint64_t v173 = v81[24];
    uint64_t v174 = &v79[v173];
    uint64_t v175 = &v80[v173];
    unint64_t v176 = *((void *)v175 + 1);
    if (v176 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v174 = *(_OWORD *)v175;
    }

    else
    {
      uint64_t v177 = *(void *)v175;
      sub_10001736C(*(void *)v175, *((void *)v175 + 1));
      *(void *)uint64_t v174 = v177;
      *((void *)v174 + 1) = v176;
    }

    uint64_t v178 = *(void (**)(_BYTE *, _BYTE *, void *))(v239 + 16);
    v178(&v79[v81[25]], &v80[v81[25]], __dsta);
    v178(&v79[v81[26]], &v80[v81[26]], __dsta);
    v178(&v79[v81[27]], &v80[v81[27]], __dsta);
    v178(&v79[v81[28]], &v80[v81[28]], __dsta);
    v178(&v79[v81[29]], &v80[v81[29]], __dsta);
    v178(&v79[v81[30]], &v80[v81[30]], __dsta);
    uint64_t v179 = v81[31];
    uint64_t v180 = &v79[v179];
    unint64_t v181 = &v80[v179];
    uint64_t v182 = v181[1];
    *uint64_t v180 = *v181;
    v180[1] = v182;
    uint64_t v183 = v81[32];
    uint64_t v184 = *(void *)&v80[v183];
    *(void *)&v79[v183] = v184;
    uint64_t v185 = v81[33];
    uint64_t v186 = &v79[v185];
    uint64_t v187 = &v80[v185];
    uint64_t v188 = v187[1];
    *uint64_t v186 = *v187;
    v186[1] = v188;
    uint64_t v189 = v81[34];
    uint64_t v190 = *(void *)&v80[v189];
    *(void *)&v79[v189] = v190;
    uint64_t v191 = v81[35];
    uint64_t v192 = &v79[v191];
    uint64_t v193 = &v80[v191];
    *(_OWORD *)uint64_t v192 = *(_OWORD *)v193;
    v192[16] = v193[16];
    uint64_t v194 = v81[36];
    uint64_t v195 = &v79[v194];
    uint64_t v196 = &v80[v194];
    *(_OWORD *)uint64_t v195 = *(_OWORD *)v196;
    v195[16] = v196[16];
    uint64_t v197 = v81[37];
    v198 = &v79[v197];
    uint64_t v199 = &v80[v197];
    swift_bridgeObjectRetain(v182);
    swift_bridgeObjectRetain(v184);
    swift_bridgeObjectRetain(v188);
    __n128 v200 = swift_bridgeObjectRetain(v190);
    ((void (*)(_BYTE *, _BYTE *, void *, __n128))v178)(v198, v199, __dsta, v200);
    v178(&v79[v81[38]], &v80[v81[38]], __dsta);
    v178(&v79[v81[39]], &v80[v81[39]], __dsta);
    v178(&v79[v81[40]], &v80[v81[40]], __dsta);
    v178(&v79[v81[41]], &v80[v81[41]], __dsta);
    v178(&v79[v81[42]], &v80[v81[42]], __dsta);
    v79[v81[43]] = v80[v81[43]];
    v79[v81[44]] = v80[v81[44]];
    v79[v81[45]] = v80[v81[45]];
    uint64_t v201 = v81[46];
    uint64_t v202 = &v79[v201];
    __n128 v203 = &v80[v201];
    uint64_t v204 = v203[1];
    *uint64_t v202 = *v203;
    v202[1] = v204;
    uint64_t v205 = v81[47];
    uint64_t v206 = &v79[v205];
    uint64_t v207 = &v80[v205];
    uint64_t v208 = v207[1];
    *uint64_t v206 = *v207;
    v206[1] = v208;
    v209 = *(void (**)(_BYTE *, void, uint64_t, int *, __n128))(v234 + 56);
    swift_bridgeObjectRetain(v204);
    __n128 v210 = swift_bridgeObjectRetain(v208);
    v209(v79, 0LL, 1LL, v81, v210);
    a2 = v235;
    uint64_t v76 = v243;
    __n128 v77 = v244;
    uint64_t v85 = (unsigned int (*)(const void *, uint64_t, uint64_t, __n128))v241;
    uint64_t v84 = v242;
    a1 = v233;
  }

  uint64_t v211 = v77[17];
  *(_BYTE *)(a1 + v77[16]) = *(_BYTE *)(a2 + v77[16]);
  uint64_t v212 = *(void *)(a2 + v211);
  *(void *)(a1 + v211) = v212;
  uint64_t v213 = v77[18];
  uint64_t v214 = (void *)(a1 + v213);
  uint64_t v215 = (const void *)(a2 + v213);
  __n128 v216 = swift_bridgeObjectRetain(v212);
  if (v85(v215, 1LL, v76, v216))
  {
    uint64_t v217 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v214, v215, *(void *)(*(void *)(v217 - 8) + 64LL));
  }

  else
  {
    v84(v214, v215, v76);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v240 + 56))(v214, 0LL, 1LL, v76);
  }

  uint64_t v218 = v77[19];
  __n128 v219 = (void *)(a1 + v218);
  uint64_t v220 = (const void *)(a2 + v218);
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v85)(a2 + v218, 1LL, v76))
  {
    uint64_t v221 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v219, v220, *(void *)(*(void *)(v221 - 8) + 64LL));
  }

  else
  {
    v84(v219, v220, v76);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v240 + 56))(v219, 0LL, 1LL, v76);
  }

  uint64_t v222 = v77[20];
  uint64_t v223 = a1 + v222;
  uint64_t v224 = (uint64_t *)(a2 + v222);
  unint64_t v225 = v224[1];
  if (((v225 >> 60) | 4) == 0xF)
  {
    *(_OWORD *)uint64_t v223 = *(_OWORD *)v224;
  }

  else
  {
    uint64_t v226 = *v224;
    sub_10001736C(*v224, v224[1]);
    *(void *)uint64_t v223 = v226;
    *(void *)(v223 + 8) = v225;
  }

  uint64_t v227 = v77[22];
  *(_BYTE *)(a1 + v77[21]) = *(_BYTE *)(a2 + v77[21]);
  *(_WORD *)(a1 + v227) = *(_WORD *)(a2 + v227);
  return a1;
}

uint64_t sub_1000EA060(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  v475 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 24);
  v475(a1, a2, v6);
  uint64_t v8 = a3[5];
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (const void *)(a2 + v8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  int v12 = v11(a1 + v8, 1LL, v6);
  int v13 = v11((uint64_t)v10, 1LL, v6);
  if (v12)
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(v7 + 16))(v9, v10, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v9, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v7 + 8))(v9, v6);
LABEL_6:
    uint64_t v14 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v9, v10, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  v475((uint64_t)v9, (uint64_t)v10, v6);
LABEL_7:
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  uint64_t v15 = a3[7];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 24LL))(v16, v17, v18);
  uint64_t v19 = a3[8];
  uint64_t v20 = *(void *)(a2 + v19);
  *(void *)(a1 + v19) = v20;
  swift_bridgeObjectRetain(v20);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  uint64_t v21 = a3[10];
  uint64_t v22 = a1 + v21;
  uint64_t v23 = a2 + v21;
  uint64_t v24 = type metadata accessor for Date(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  v478 = *(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 24);
  v478(v22, v23, v24);
  uint64_t v26 = a3[11];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (const void *)(a2 + v26);
  uint64_t v483 = v25;
  uint64_t v29 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v25 + 48);
  LODWORD(v25) = v29(a1 + v26, 1LL, v24);
  v479 = v29;
  int v30 = v29((uint64_t)v28, 1LL, v24);
  uint64_t v482 = v24;
  if ((_DWORD)v25)
  {
    if (!v30)
    {
      (*(void (**)(void *, const void *, uint64_t))(v483 + 16))(v27, v28, v24);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v483 + 56))(v27, 0LL, 1LL, v24);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v30)
  {
    (*(void (**)(void *, uint64_t))(v483 + 8))(v27, v24);
LABEL_12:
    uint64_t v31 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v27, v28, *(void *)(*(void *)(v31 - 8) + 64LL));
    goto LABEL_13;
  }

  v478((uint64_t)v27, (uint64_t)v28, v24);
LABEL_13:
  uint64_t v32 = a3[12];
  uint64_t v33 = a1 + v32;
  uint64_t v34 = a2 + v32;
  *(_BYTE *)uint64_t v33 = *(_BYTE *)v34;
  *(void *)(v33 + 8) = *(void *)(v34 + 8);
  uint64_t v35 = *(void *)(v34 + 16);
  *(void *)(v33 + 16) = v35;
  swift_bridgeObjectRetain(v35);
  swift_bridgeObjectRelease();
  *(_BYTE *)(a1 + a3[13]) = *(_BYTE *)(a2 + a3[13]);
  v480 = a3;
  uint64_t v481 = a2;
  uint64_t v36 = a3[14];
  uint64_t v37 = (_BYTE *)(a1 + v36);
  uint64_t v38 = (_BYTE *)(a2 + v36);
  unint64_t v39 = (int *)type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v40 = *((void *)v39 - 1);
  uint64_t v41 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v40 + 48);
  int v42 = v41(v37, 1LL, v39);
  int v43 = v41(v38, 1LL, v39);
  if (v42)
  {
    if (!v43)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v7 + 16))(v37, v38, v6);
      uint64_t v44 = v39[5];
      uint64_t v45 = (uint64_t *)&v37[v44];
      uint64_t v46 = (uint64_t *)&v38[v44];
      uint64_t v47 = *v46;
      unint64_t v48 = v46[1];
      sub_10001736C(*v46, v48);
      *uint64_t v45 = v47;
      v45[1] = v48;
      uint64_t v49 = v39[6];
      uint64_t v50 = &v37[v49];
      unint64_t v51 = &v38[v49];
      *uint64_t v50 = *v51;
      uint64_t v52 = v51[1];
      v50[1] = v52;
      uint64_t v53 = v39[7];
      uint64_t v54 = &v37[v53];
      uint64_t v55 = &v38[v53];
      *uint64_t v54 = *v55;
      uint64_t v56 = v55[1];
      v54[1] = v56;
      *(_DWORD *)&v37[v39[8]] = *(_DWORD *)&v38[v39[8]];
      uint64_t v57 = v39[9];
      uint64_t v58 = &v37[v57];
      uint64_t v59 = &v38[v57];
      int v60 = *(_DWORD *)v59;
      v58[4] = v59[4];
      *(_DWORD *)uint64_t v58 = v60;
      uint64_t v61 = v39[10];
      uint64_t v62 = &v37[v61];
      uint64_t v63 = &v38[v61];
      __int128 v64 = *(_OWORD *)v63;
      v62[16] = v63[16];
      *(_OWORD *)uint64_t v62 = v64;
      uint64_t v65 = v39[11];
      uint64_t v66 = &v37[v65];
      uint64_t v67 = &v38[v65];
      uint64_t v68 = *(void *)v67;
      v66[8] = v67[8];
      *(void *)uint64_t v66 = v68;
      uint64_t v69 = v39[12];
      uint64_t v70 = &v37[v69];
      char v71 = &v38[v69];
      LODWORD(v68) = *(_DWORD *)v71;
      v70[4] = v71[4];
      *(_DWORD *)uint64_t v70 = v68;
      v37[v39[13]] = v38[v39[13]];
      v37[v39[14]] = v38[v39[14]];
      uint64_t v72 = v39[15];
      uint64_t v73 = &v37[v72];
      uint64_t v74 = &v38[v72];
      *uint64_t v73 = *v74;
      uint64_t v75 = v74[1];
      v73[1] = v75;
      uint64_t v76 = *(void (**)(_BYTE *, void, uint64_t, int *, __n128))(v40 + 56);
      swift_bridgeObjectRetain(v52);
      swift_bridgeObjectRetain(v56);
      __n128 v77 = swift_bridgeObjectRetain(v75);
      v76(v37, 0LL, 1LL, v39, v77);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v43)
  {
    sub_100018C68((uint64_t)v37, type metadata accessor for AccessoryMetadata);
LABEL_18:
    uint64_t v78 = sub_100004AEC(&qword_1009B9250);
    memcpy(v37, v38, *(void *)(*(void *)(v78 - 8) + 64LL));
    goto LABEL_19;
  }

  v475((uint64_t)v37, (uint64_t)v38, v6);
  uint64_t v123 = v39[5];
  uint64_t v124 = (uint64_t *)&v37[v123];
  char v125 = (uint64_t *)&v38[v123];
  uint64_t v126 = *v125;
  unint64_t v127 = v125[1];
  sub_10001736C(*v125, v127);
  uint64_t v128 = *v124;
  unint64_t v129 = v124[1];
  *uint64_t v124 = v126;
  v124[1] = v127;
  sub_100016F9C(v128, v129);
  uint64_t v130 = v39[6];
  uint64_t v131 = &v37[v130];
  uint64_t v132 = &v38[v130];
  *uint64_t v131 = *v132;
  uint64_t v133 = v132[1];
  v131[1] = v133;
  swift_bridgeObjectRetain(v133);
  swift_bridgeObjectRelease();
  uint64_t v134 = v39[7];
  uint64_t v135 = &v37[v134];
  uint64_t v136 = &v38[v134];
  *uint64_t v135 = *v136;
  uint64_t v137 = v136[1];
  v135[1] = v137;
  swift_bridgeObjectRetain(v137);
  swift_bridgeObjectRelease();
  uint64_t v138 = v39[8];
  uint64_t v139 = &v37[v138];
  __n128 v140 = &v38[v138];
  *(_WORD *)uint64_t v139 = *(_WORD *)v140;
  v139[2] = v140[2];
  v139[3] = v140[3];
  uint64_t v141 = v39[9];
  uint64_t v142 = &v37[v141];
  uint64_t v143 = &v38[v141];
  int v144 = *(_DWORD *)v143;
  v142[4] = v143[4];
  *(_DWORD *)uint64_t v142 = v144;
  uint64_t v145 = v39[10];
  uint64_t v146 = &v37[v145];
  uint64_t v147 = &v38[v145];
  __int128 v148 = *(_OWORD *)v147;
  v146[16] = v147[16];
  *(_OWORD *)uint64_t v146 = v148;
  uint64_t v149 = v39[11];
  uint64_t v150 = &v37[v149];
  uint64_t v151 = &v38[v149];
  uint64_t v152 = *(void *)v151;
  v150[8] = v151[8];
  *(void *)uint64_t v150 = v152;
  uint64_t v153 = v39[12];
  unint64_t v154 = &v37[v153];
  uint64_t v155 = &v38[v153];
  LODWORD(v152) = *(_DWORD *)v155;
  v154[4] = v155[4];
  *(_DWORD *)unint64_t v154 = v152;
  v37[v39[13]] = v38[v39[13]];
  v37[v39[14]] = v38[v39[14]];
  uint64_t v156 = v39[15];
  uint64_t v157 = &v37[v156];
  uint64_t v158 = &v38[v156];
  *uint64_t v157 = *v158;
  uint64_t v159 = v158[1];
  v157[1] = v159;
  swift_bridgeObjectRetain(v159);
  swift_bridgeObjectRelease();
LABEL_19:
  uint64_t v80 = v480;
  uint64_t v79 = v481;
  uint64_t v81 = v482;
  uint64_t v82 = v480[15];
  uint64_t v83 = (_BYTE *)(a1 + v82);
  uint64_t v84 = (_BYTE *)(v481 + v82);
  uint64_t v85 = (int *)type metadata accessor for AccessoryProductInfo(0LL);
  uint64_t v86 = *((void *)v85 - 1);
  uint64_t v87 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v86 + 48);
  int v88 = v87(v83, 1LL, v85);
  int v89 = v87(v84, 1LL, v85);
  if (!v88)
  {
    if (v89)
    {
      sub_100018C68((uint64_t)v83, type metadata accessor for AccessoryProductInfo);
      goto LABEL_25;
    }

    uint64_t v160 = *(void *)v84;
    v83[8] = v84[8];
    *(void *)uint64_t v83 = v160;
    uint64_t v161 = v85[5];
    uint64_t v162 = &v83[v161];
    uint64_t v163 = &v84[v161];
    uint64_t v164 = type metadata accessor for ServerStatusCode(0LL);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v164 - 8) + 24LL))(v162, v163, v164);
    v83[v85[6]] = v84[v85[6]];
    v83[v85[7]] = v84[v85[7]];
    uint64_t v165 = v85[8];
    uint64_t v166 = &v83[v165];
    uint64_t v167 = &v84[v165];
    *uint64_t v166 = *v167;
    uint64_t v168 = v167[1];
    v166[1] = v168;
    swift_bridgeObjectRetain(v168);
    swift_bridgeObjectRelease();
    v83[v85[9]] = v84[v85[9]];
    v83[v85[10]] = v84[v85[10]];
    v83[v85[11]] = v84[v85[11]];
    uint64_t v169 = v85[12];
    __n128 v170 = &v83[v169];
    unint64_t v171 = &v84[v169];
    *__n128 v170 = *v171;
    uint64_t v172 = v171[1];
    v170[1] = v172;
    swift_bridgeObjectRetain(v172);
    swift_bridgeObjectRelease();
    uint64_t v173 = v85[13];
    uint64_t v174 = &v83[v173];
    uint64_t v175 = &v84[v173];
    *uint64_t v174 = *v175;
    uint64_t v176 = v175[1];
    v174[1] = v176;
    swift_bridgeObjectRetain(v176);
    swift_bridgeObjectRelease();
    uint64_t v177 = v85[14];
    uint64_t v178 = &v83[v177];
    uint64_t v179 = &v84[v177];
    uint64_t v180 = *(void *)v179;
    v178[8] = v179[8];
    *(void *)uint64_t v178 = v180;
    uint64_t v181 = v85[15];
    uint64_t v182 = &v83[v181];
    uint64_t v183 = &v84[v181];
    *uint64_t v182 = *v183;
    uint64_t v184 = v183[1];
    v182[1] = v184;
    swift_bridgeObjectRetain(v184);
    swift_bridgeObjectRelease();
    uint64_t v185 = v85[16];
    uint64_t v186 = &v83[v185];
    uint64_t v187 = &v84[v185];
    uint64_t v188 = type metadata accessor for URL(0LL);
    uint64_t v189 = *(void *)(v188 - 8);
    uint64_t v190 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v189 + 48);
    int v191 = v190(v186, 1LL, v188);
    int v192 = v190(v187, 1LL, v188);
    if (v191)
    {
      if (!v192)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v189 + 16))(v186, v187, v188);
        (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v189 + 56))(v186, 0LL, 1LL, v188);
        goto LABEL_44;
      }
    }

    else
    {
      if (!v192)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v189 + 24))(v186, v187, v188);
LABEL_44:
        uint64_t v218 = v85[17];
        __n128 v219 = &v83[v218];
        uint64_t v220 = &v84[v218];
        int v221 = v190(&v83[v218], 1LL, v188);
        int v222 = v190(v220, 1LL, v188);
        uint64_t v477 = v189;
        v471 = (unsigned int (*)(_BYTE *, uint64_t, uint64_t, __n128))v190;
        if (v221)
        {
          if (!v222)
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v189 + 16))(v219, v220, v188);
            (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v189 + 56))(v219, 0LL, 1LL, v188);
            goto LABEL_50;
          }
        }

        else
        {
          if (!v222)
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v189 + 24))(v219, v220, v188);
LABEL_50:
            uint64_t v224 = v85[18];
            unint64_t v225 = &v83[v224];
            uint64_t v226 = &v84[v224];
            *unint64_t v225 = *v226;
            uint64_t v227 = v226[1];
            v225[1] = v227;
            swift_bridgeObjectRetain(v227);
            swift_bridgeObjectRelease();
            *(void *)&v83[v85[19]] = *(void *)&v84[v85[19]];
            uint64_t v228 = v85[20];
            uint64_t v229 = (uint64_t)&v83[v228];
            uint64_t v230 = &v84[v228];
            uint64_t v231 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
            __srca = (void *)*((void *)v231 - 1);
            uint64_t v232 = (uint64_t (*)(uint64_t, uint64_t, int *))__srca[6];
            int v233 = v232(v229, 1LL, v231);
            v474 = v231;
            int v234 = v232((uint64_t)v230, 1LL, v231);
            if (v233)
            {
              if (!v234)
              {
                *(void *)uint64_t v229 = *(void *)v230;
                uint64_t v235 = *((void *)v230 + 1);
                *(void *)(v229 + 8) = v235;
                *(void *)(v229 + 16) = *((void *)v230 + 2);
                uint64_t v236 = *((void *)v230 + 3);
                *(void *)(v229 + 24) = v236;
                *(void *)(v229 + 32) = *((void *)v230 + 4);
                uint64_t v237 = *((void *)v230 + 5);
                *(void *)(v229 + 40) = v237;
                *(_WORD *)(v229 + 48) = *((_WORD *)v230 + 24);
                *(void *)(v229 + 56) = *((void *)v230 + 7);
                uint64_t v238 = *((void *)v230 + 8);
                *(_BYTE *)(v229 + 72) = v230[72];
                *(void *)(v229 + 64) = v238;
                uint64_t v239 = v231[10];
                __dstb = (void *)(v229 + v239);
                uint64_t v240 = &v230[v239];
                swift_bridgeObjectRetain(v235);
                swift_bridgeObjectRetain(v236);
                __n128 v241 = swift_bridgeObjectRetain(v237);
                if (v471(v240, 1LL, v188, v241))
                {
                  uint64_t v242 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
                  memcpy(__dstb, v240, *(void *)(*(void *)(v242 - 8) + 64LL));
                }

                else
                {
                  (*(void (**)(void *, _BYTE *, uint64_t))(v477 + 16))(__dstb, v240, v188);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v477 + 56))(__dstb, 0LL, 1LL, v188);
                }

                uint64_t v355 = v474[11];
                v356 = (void *)(v229 + v355);
                v357 = &v230[v355];
                if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v471)(&v230[v355], 1LL, v188))
                {
                  uint64_t v358 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
                  memcpy(v356, v357, *(void *)(*(void *)(v358 - 8) + 64LL));
                }

                else
                {
                  (*(void (**)(void *, _BYTE *, uint64_t))(v477 + 16))(v356, v357, v188);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v477 + 56))(v356, 0LL, 1LL, v188);
                }

                uint64_t v359 = v474[12];
                uint64_t v360 = v229 + v359;
                v361 = &v230[v359];
                uint64_t v362 = *(void *)v361;
                *(_BYTE *)(v360 + 8) = v361[8];
                *(void *)uint64_t v360 = v362;
                uint64_t v363 = v474[13];
                v364 = (void *)(v229 + v363);
                v365 = &v230[v363];
                void *v364 = *v365;
                uint64_t v366 = v365[1];
                v364[1] = v366;
                uint64_t v367 = v474[14];
                uint64_t v472 = *(void *)&v230[v367];
                *(void *)(v229 + v367) = v472;
                uint64_t v368 = v474[15];
                v369 = (void *)(v229 + v368);
                v370 = &v230[v368];
                void *v369 = *v370;
                uint64_t v371 = v370[1];
                v369[1] = v371;
                uint64_t v372 = v474[16];
                __dste = *(void **)&v230[v372];
                *(void *)(v229 + v372) = __dste;
                uint64_t v373 = v474[17];
                uint64_t v374 = v229 + v373;
                v375 = &v230[v373];
                __int128 v376 = *(_OWORD *)v375;
                *(_BYTE *)(v374 + 16) = v375[16];
                *(_OWORD *)uint64_t v374 = v376;
                uint64_t v377 = v474[18];
                uint64_t v378 = v229 + v377;
                v379 = &v230[v377];
                __int128 v380 = *(_OWORD *)v379;
                *(_BYTE *)(v378 + 16) = v379[16];
                *(_OWORD *)uint64_t v378 = v380;
                v381 = (void (*)(uint64_t, void, uint64_t, int *, __n128))__srca[7];
                swift_bridgeObjectRetain(v366);
                swift_bridgeObjectRetain(v472);
                swift_bridgeObjectRetain(v371);
                __n128 v382 = swift_bridgeObjectRetain(__dste);
                v381(v229, 0LL, 1LL, v474, v382);
LABEL_115:
                *(_DWORD *)&v83[v85[21]] = *(_DWORD *)&v84[v85[21]];
                uint64_t v413 = v85[22];
                uint64_t v414 = *(void *)&v84[v413];
                *(void *)&v83[v413] = v414;
                swift_bridgeObjectRetain(v414);
                swift_bridgeObjectRelease();
                uint64_t v415 = v85[23];
                v416 = (uint64_t *)&v83[v415];
                v417 = (uint64_t *)&v84[v415];
                unint64_t v418 = *(void *)&v84[v415 + 8];
                if (*(void *)&v83[v415 + 8] >> 60 == 15LL)
                {
                  if (v418 >> 60 != 15)
                  {
                    uint64_t v419 = *v417;
                    sub_10001736C(*v417, v418);
                    uint64_t *v416 = v419;
                    v416[1] = v418;
                    goto LABEL_122;
                  }
                }

                else
                {
                  if (v418 >> 60 != 15)
                  {
                    uint64_t v420 = *v417;
                    sub_10001736C(*v417, v418);
                    uint64_t v421 = *v416;
                    unint64_t v422 = v416[1];
                    uint64_t *v416 = v420;
                    v416[1] = v418;
                    sub_100016F9C(v421, v422);
LABEL_122:
                    uint64_t v423 = v85[24];
                    v424 = (uint64_t *)&v83[v423];
                    v425 = (uint64_t *)&v84[v423];
                    unint64_t v426 = *(void *)&v84[v423 + 8];
                    if (*(void *)&v83[v423 + 8] >> 60 == 15LL)
                    {
                      if (v426 >> 60 != 15)
                      {
                        uint64_t v427 = *v425;
                        sub_10001736C(*v425, v426);
                        uint64_t *v424 = v427;
                        v424[1] = v426;
LABEL_129:
                        uint64_t v80 = v480;
                        uint64_t v79 = v481;
                        v431 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v477 + 24);
                        v431(&v83[v85[25]], &v84[v85[25]], v188);
                        v431(&v83[v85[26]], &v84[v85[26]], v188);
                        v431(&v83[v85[27]], &v84[v85[27]], v188);
                        v431(&v83[v85[28]], &v84[v85[28]], v188);
                        v431(&v83[v85[29]], &v84[v85[29]], v188);
                        v431(&v83[v85[30]], &v84[v85[30]], v188);
                        uint64_t v432 = v85[31];
                        v433 = &v83[v432];
                        v434 = &v84[v432];
                        void *v433 = *v434;
                        uint64_t v435 = v434[1];
                        v433[1] = v435;
                        swift_bridgeObjectRetain(v435);
                        swift_bridgeObjectRelease();
                        uint64_t v436 = v85[32];
                        uint64_t v437 = *(void *)&v84[v436];
                        *(void *)&v83[v436] = v437;
                        swift_bridgeObjectRetain(v437);
                        swift_bridgeObjectRelease();
                        uint64_t v438 = v85[33];
                        v439 = &v83[v438];
                        v440 = &v84[v438];
                        void *v439 = *v440;
                        uint64_t v441 = v440[1];
                        v439[1] = v441;
                        swift_bridgeObjectRetain(v441);
                        swift_bridgeObjectRelease();
                        uint64_t v442 = v85[34];
                        uint64_t v443 = *(void *)&v84[v442];
                        *(void *)&v83[v442] = v443;
                        swift_bridgeObjectRetain(v443);
                        swift_bridgeObjectRelease();
                        uint64_t v444 = v85[35];
                        v445 = &v83[v444];
                        v446 = &v84[v444];
                        __int128 v447 = *(_OWORD *)v446;
                        v445[16] = v446[16];
                        *(_OWORD *)v445 = v447;
                        uint64_t v448 = v85[36];
                        v449 = &v83[v448];
                        v450 = &v84[v448];
                        __int128 v451 = *(_OWORD *)v450;
                        v449[16] = v450[16];
                        *(_OWORD *)v449 = v451;
                        v431(&v83[v85[37]], &v84[v85[37]], v188);
                        v431(&v83[v85[38]], &v84[v85[38]], v188);
                        v431(&v83[v85[39]], &v84[v85[39]], v188);
                        v431(&v83[v85[40]], &v84[v85[40]], v188);
                        v431(&v83[v85[41]], &v84[v85[41]], v188);
                        v431(&v83[v85[42]], &v84[v85[42]], v188);
                        v83[v85[43]] = v84[v85[43]];
                        v83[v85[44]] = v84[v85[44]];
                        v83[v85[45]] = v84[v85[45]];
                        uint64_t v452 = v85[46];
                        v453 = &v83[v452];
                        v454 = &v84[v452];
                        void *v453 = *v454;
                        uint64_t v455 = v454[1];
                        v453[1] = v455;
                        swift_bridgeObjectRetain(v455);
                        swift_bridgeObjectRelease();
                        uint64_t v456 = v85[47];
                        v457 = &v83[v456];
                        v458 = &v84[v456];
                        void *v457 = *v458;
                        uint64_t v459 = v458[1];
                        v457[1] = v459;
                        swift_bridgeObjectRetain(v459);
                        swift_bridgeObjectRelease();
                        uint64_t v81 = v482;
                        goto LABEL_26;
                      }
                    }

                    else
                    {
                      if (v426 >> 60 != 15)
                      {
                        uint64_t v428 = *v425;
                        sub_10001736C(*v425, v426);
                        uint64_t v429 = *v424;
                        unint64_t v430 = v424[1];
                        uint64_t *v424 = v428;
                        v424[1] = v426;
                        sub_100016F9C(v429, v430);
                        goto LABEL_129;
                      }

                      sub_100041D4C((uint64_t)v424);
                    }

                    *(_OWORD *)v424 = *(_OWORD *)v425;
                    goto LABEL_129;
                  }

                  sub_100041D4C((uint64_t)v416);
                }

                *(_OWORD *)v416 = *(_OWORD *)v417;
                goto LABEL_122;
              }

uint64_t sub_1000EBD80(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a2 + v9, 1LL, v6))
  {
    uint64_t v12 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v10, v11, *(void *)(*(void *)(v12 - 8) + 64LL));
  }

  else
  {
    v8((uint64_t)v10, (uint64_t)v11, v6);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v7 + 56))(v10, 0LL, 1LL, v6);
  }

  uint64_t v13 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  uint64_t v14 = a1 + v13;
  uint64_t v15 = a2 + v13;
  uint64_t v16 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 32LL))(v14, v15, v16);
  uint64_t v17 = a3[9];
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v17) = *(_BYTE *)(a2 + v17);
  uint64_t v18 = a3[10];
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = type metadata accessor for Date(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  uint64_t v23 = *(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 32);
  v23(v19, v20, v21);
  uint64_t v24 = a3[11];
  uint64_t v25 = (void *)(a1 + v24);
  uint64_t v26 = (const void *)(a2 + v24);
  uint64_t v126 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v22 + 48);
  uint64_t v127 = v22;
  uint64_t v128 = v23;
  if (v126(a2 + v24, 1LL, v21))
  {
    uint64_t v27 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64LL));
  }

  else
  {
    v23((uint64_t)v25, (uint64_t)v26, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v22 + 56))(v25, 0LL, 1LL, v21);
  }

  uint64_t v28 = a3[12];
  uint64_t v29 = a3[13];
  uint64_t v30 = a1 + v28;
  uint64_t v31 = a2 + v28;
  *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
  char v32 = *(_BYTE *)(a2 + v29);
  *(void *)(v30 + 16) = *(void *)(v31 + 16);
  *(_BYTE *)(a1 + v29) = v32;
  uint64_t v33 = a3[14];
  uint64_t v34 = (char *)(a1 + v33);
  uint64_t v35 = (char *)(a2 + v33);
  uint64_t v36 = (int *)type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v37 = *((void *)v36 - 1);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v37 + 48))(v35, 1LL, v36))
  {
    uint64_t v38 = sub_100004AEC(&qword_1009B9250);
    memcpy(v34, v35, *(void *)(*(void *)(v38 - 8) + 64LL));
  }

  else
  {
    v8((uint64_t)v34, (uint64_t)v35, v6);
    *(_OWORD *)&v34[v36[5]] = *(_OWORD *)&v35[v36[5]];
    *(_OWORD *)&v34[v36[6]] = *(_OWORD *)&v35[v36[6]];
    *(_OWORD *)&v34[v36[7]] = *(_OWORD *)&v35[v36[7]];
    *(_DWORD *)&v34[v36[8]] = *(_DWORD *)&v35[v36[8]];
    uint64_t v39 = v36[9];
    uint64_t v40 = &v34[v39];
    uint64_t v41 = &v35[v39];
    *(_DWORD *)uint64_t v40 = *(_DWORD *)v41;
    v40[4] = v41[4];
    uint64_t v42 = v36[10];
    int v43 = &v34[v42];
    uint64_t v44 = &v35[v42];
    *(_OWORD *)int v43 = *(_OWORD *)v44;
    v43[16] = v44[16];
    uint64_t v45 = v36[11];
    uint64_t v46 = &v34[v45];
    uint64_t v47 = &v35[v45];
    v46[8] = v47[8];
    *(void *)uint64_t v46 = *(void *)v47;
    uint64_t v48 = v36[12];
    uint64_t v49 = &v34[v48];
    uint64_t v50 = &v35[v48];
    *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
    v49[4] = v50[4];
    v34[v36[13]] = v35[v36[13]];
    v34[v36[14]] = v35[v36[14]];
    *(_OWORD *)&v34[v36[15]] = *(_OWORD *)&v35[v36[15]];
    (*(void (**)(char *, void, uint64_t, int *))(v37 + 56))(v34, 0LL, 1LL, v36);
  }

  unint64_t v51 = (void (*)(void *, const void *, uint64_t))v128;
  uint64_t v52 = a3[15];
  uint64_t v53 = (_BYTE *)(a1 + v52);
  uint64_t v54 = (_BYTE *)(a2 + v52);
  uint64_t v55 = (int *)type metadata accessor for AccessoryProductInfo(0LL);
  uint64_t v56 = *((void *)v55 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v56 + 48))(v54, 1LL, v55))
  {
    uint64_t v57 = sub_100004AEC(&qword_10099CE68);
    memcpy(v53, v54, *(void *)(*(void *)(v57 - 8) + 64LL));
    uint64_t v58 = v127;
  }

  else
  {
    uint64_t v119 = v56;
    *(void *)uint64_t v53 = *(void *)v54;
    v53[8] = v54[8];
    uint64_t v59 = v55[5];
    int v60 = &v53[v59];
    uint64_t v61 = &v54[v59];
    uint64_t v62 = type metadata accessor for ServerStatusCode(0LL);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v62 - 8) + 32LL))(v60, v61, v62);
    v53[v55[6]] = v54[v55[6]];
    v53[v55[7]] = v54[v55[7]];
    *(_OWORD *)&v53[v55[8]] = *(_OWORD *)&v54[v55[8]];
    v53[v55[9]] = v54[v55[9]];
    v53[v55[10]] = v54[v55[10]];
    v53[v55[11]] = v54[v55[11]];
    *(_OWORD *)&v53[v55[12]] = *(_OWORD *)&v54[v55[12]];
    *(_OWORD *)&v53[v55[13]] = *(_OWORD *)&v54[v55[13]];
    uint64_t v63 = v55[14];
    __int128 v64 = &v53[v63];
    uint64_t v65 = &v54[v63];
    v64[8] = v65[8];
    *(void *)__int128 v64 = *(void *)v65;
    *(_OWORD *)&v53[v55[15]] = *(_OWORD *)&v54[v55[15]];
    uint64_t v66 = v55[16];
    __dst = &v53[v66];
    uint64_t v67 = &v54[v66];
    uint64_t v68 = type metadata accessor for URL(0LL);
    uint64_t v69 = *(void *)(v68 - 8);
    uint64_t v124 = *(unsigned int (**)(void))(v69 + 48);
    uint64_t v125 = v69;
    if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v124)(v67, 1LL, v68))
    {
      uint64_t v70 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(__dst, v67, *(void *)(*(void *)(v70 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v69 + 32))(__dst, v67, v68);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v69 + 56))(__dst, 0LL, 1LL, v68);
    }

    uint64_t v71 = v55[17];
    uint64_t v72 = &v53[v71];
    uint64_t v73 = &v54[v71];
    uint64_t v120 = v21;
    uint64_t v118 = v68;
    if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v124)(&v54[v71], 1LL, v68))
    {
      uint64_t v74 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v72, v73, *(void *)(*(void *)(v74 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v125 + 32))(v72, v73, v68);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v125 + 56))(v72, 0LL, 1LL, v68);
    }

    *(_OWORD *)&v53[v55[18]] = *(_OWORD *)&v54[v55[18]];
    *(void *)&v53[v55[19]] = *(void *)&v54[v55[19]];
    uint64_t v75 = v55[20];
    uint64_t v76 = &v53[v75];
    __n128 v77 = &v54[v75];
    uint64_t v78 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
    uint64_t v79 = *((void *)v78 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v79 + 48))(v77, 1LL, v78))
    {
      uint64_t v80 = sub_100004AEC(&qword_1009A6DD0);
      memcpy(v76, v77, *(void *)(*(void *)(v80 - 8) + 64LL));
      uint64_t v81 = v118;
    }

    else
    {
      uint64_t v117 = v76;
      __int128 v82 = v77[1];
      *uint64_t v76 = *v77;
      v76[1] = v82;
      v76[2] = v77[2];
      *((_WORD *)v76 + 24) = *((_WORD *)v77 + 24);
      uint64_t v83 = *((void *)v77 + 8);
      *((void *)v76 + 7) = *((void *)v77 + 7);
      *((void *)v76 + 8) = v83;
      *((_BYTE *)v76 + 72) = *((_BYTE *)v77 + 72);
      uint64_t v84 = v78[10];
      __dsta = (char *)v76 + v84;
      __src = (char *)v77 + v84;
      uint64_t v81 = v118;
      if (v124())
      {
        uint64_t v85 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(__dsta, __src, *(void *)(*(void *)(v85 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v125 + 32))(__dsta, __src, v118);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v125 + 56))(__dsta, 0LL, 1LL, v118);
      }

      uint64_t v86 = v78[11];
      __dstb = (char *)v117 + v86;
      __srca = (char *)v77 + v86;
      if (v124())
      {
        uint64_t v87 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(__dstb, __srca, *(void *)(*(void *)(v87 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v125 + 32))(__dstb, __srca, v118);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v125 + 56))(__dstb, 0LL, 1LL, v118);
      }

      uint64_t v88 = v78[12];
      int v89 = (char *)v117 + v88;
      uint64_t v90 = (char *)v77 + v88;
      *(void *)int v89 = *(void *)v90;
      v89[8] = v90[8];
      *(_OWORD *)((char *)v117 + v78[13]) = *(_OWORD *)((char *)v77 + v78[13]);
      *(void *)((char *)v117 + v78[14]) = *(void *)((char *)v77 + v78[14]);
      *(_OWORD *)((char *)v117 + v78[15]) = *(_OWORD *)((char *)v77 + v78[15]);
      *(void *)((char *)v117 + v78[16]) = *(void *)((char *)v77 + v78[16]);
      uint64_t v91 = v78[17];
      uint64_t v92 = (char *)v117 + v91;
      uint64_t v93 = (char *)v77 + v91;
      v92[16] = v93[16];
      *(_OWORD *)uint64_t v92 = *(_OWORD *)v93;
      uint64_t v94 = v78[18];
      uint64_t v95 = (char *)v117 + v94;
      uint64_t v96 = (char *)v77 + v94;
      v95[16] = v96[16];
      *(_OWORD *)uint64_t v95 = *(_OWORD *)v96;
      (*(void (**)(_OWORD *, void, uint64_t, int *))(v79 + 56))(v117, 0LL, 1LL, v78);
    }

    *(_DWORD *)&v53[v55[21]] = *(_DWORD *)&v54[v55[21]];
    *(void *)&v53[v55[22]] = *(void *)&v54[v55[22]];
    *(_OWORD *)&v53[v55[23]] = *(_OWORD *)&v54[v55[23]];
    *(_OWORD *)&v53[v55[24]] = *(_OWORD *)&v54[v55[24]];
    uint64_t v97 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v125 + 32);
    v97(&v53[v55[25]], &v54[v55[25]], v81);
    v97(&v53[v55[26]], &v54[v55[26]], v81);
    v97(&v53[v55[27]], &v54[v55[27]], v81);
    v97(&v53[v55[28]], &v54[v55[28]], v81);
    v97(&v53[v55[29]], &v54[v55[29]], v81);
    v97(&v53[v55[30]], &v54[v55[30]], v81);
    *(_OWORD *)&v53[v55[31]] = *(_OWORD *)&v54[v55[31]];
    *(void *)&v53[v55[32]] = *(void *)&v54[v55[32]];
    *(_OWORD *)&v53[v55[33]] = *(_OWORD *)&v54[v55[33]];
    *(void *)&v53[v55[34]] = *(void *)&v54[v55[34]];
    uint64_t v98 = v55[35];
    uint64_t v99 = &v53[v98];
    uint64_t v100 = &v54[v98];
    v99[16] = v100[16];
    *(_OWORD *)uint64_t v99 = *(_OWORD *)v100;
    uint64_t v101 = v55[36];
    uint64_t v102 = &v53[v101];
    uint64_t v103 = &v54[v101];
    v102[16] = v103[16];
    *(_OWORD *)uint64_t v102 = *(_OWORD *)v103;
    v97(&v53[v55[37]], &v54[v55[37]], v81);
    v97(&v53[v55[38]], &v54[v55[38]], v81);
    v97(&v53[v55[39]], &v54[v55[39]], v81);
    v97(&v53[v55[40]], &v54[v55[40]], v81);
    v97(&v53[v55[41]], &v54[v55[41]], v81);
    v97(&v53[v55[42]], &v54[v55[42]], v81);
    v53[v55[43]] = v54[v55[43]];
    v53[v55[44]] = v54[v55[44]];
    v53[v55[45]] = v54[v55[45]];
    *(_OWORD *)&v53[v55[46]] = *(_OWORD *)&v54[v55[46]];
    *(_OWORD *)&v53[v55[47]] = *(_OWORD *)&v54[v55[47]];
    (*(void (**)(_BYTE *, void, uint64_t, int *))(v119 + 56))(v53, 0LL, 1LL, v55);
    uint64_t v21 = v120;
    uint64_t v58 = v127;
    unint64_t v51 = (void (*)(void *, const void *, uint64_t))v128;
  }

  uint64_t v104 = a3[17];
  *(_BYTE *)(a1 + a3[16]) = *(_BYTE *)(a2 + a3[16]);
  *(void *)(a1 + v104) = *(void *)(a2 + v104);
  uint64_t v105 = a3[18];
  uint64_t v106 = (void *)(a1 + v105);
  uint64_t v107 = (const void *)(a2 + v105);
  if (v126(a2 + v105, 1LL, v21))
  {
    uint64_t v108 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v106, v107, *(void *)(*(void *)(v108 - 8) + 64LL));
  }

  else
  {
    v51(v106, v107, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v58 + 56))(v106, 0LL, 1LL, v21);
  }

  uint64_t v109 = a3[19];
  uint64_t v110 = (void *)(a1 + v109);
  uint64_t v111 = (const void *)(a2 + v109);
  if (v126(a2 + v109, 1LL, v21))
  {
    uint64_t v112 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v110, v111, *(void *)(*(void *)(v112 - 8) + 64LL));
  }

  else
  {
    v51(v110, v111, v21);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v58 + 56))(v110, 0LL, 1LL, v21);
  }

  uint64_t v113 = a3[21];
  *(_OWORD *)(a1 + a3[20]) = *(_OWORD *)(a2 + a3[20]);
  *(_BYTE *)(a1 + v113) = *(_BYTE *)(a2 + v113);
  *(_WORD *)(a1 + a3[22]) = *(_WORD *)(a2 + a3[22]);
  return a1;
}

uint64_t sub_1000EC844(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 40);
  v8(a1, a2, v6);
  uint64_t v9 = a3[5];
  uint64_t v10 = (void *)(a1 + v9);
  uint64_t v11 = (const void *)(a2 + v9);
  uint64_t v335 = v7;
  uint64_t v12 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  LODWORD(v7) = v12(a1 + v9, 1LL, v6);
  int v13 = v12((uint64_t)v11, 1LL, v6);
  v331 = v8;
  if ((_DWORD)v7)
  {
    if (!v13)
    {
      (*(void (**)(void *, const void *, uint64_t))(v335 + 32))(v10, v11, v6);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v335 + 56))(v10, 0LL, 1LL, v6);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v13)
  {
    (*(void (**)(void *, uint64_t))(v335 + 8))(v10, v6);
LABEL_6:
    uint64_t v14 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v10, v11, *(void *)(*(void *)(v14 - 8) + 64LL));
    goto LABEL_7;
  }

  v8((uint64_t)v10, (uint64_t)v11, v6);
LABEL_7:
  uint64_t v15 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  uint64_t v16 = a1 + v15;
  uint64_t v17 = a2 + v15;
  uint64_t v18 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 40LL))(v16, v17, v18);
  *(void *)(a1 + a3[8]) = *(void *)(a2 + a3[8]);
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[10];
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  uint64_t v20 = a1 + v19;
  uint64_t v21 = a2 + v19;
  uint64_t v22 = type metadata accessor for Date(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v334 = *(void (**)(uint64_t, uint64_t, uint64_t))(v23 + 40);
  v334(v20, v21, v22);
  uint64_t v24 = a3[11];
  uint64_t v25 = a1;
  uint64_t v26 = (void *)(a1 + v24);
  uint64_t v27 = a2;
  uint64_t v28 = (void *)(a2 + v24);
  uint64_t v29 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v23 + 48);
  int v30 = v29(v26, 1LL, v22);
  uint64_t v339 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))v29;
  int v31 = v29(v28, 1LL, v22);
  uint64_t v341 = v22;
  uint64_t v338 = v23;
  if (v30)
  {
    if (!v31)
    {
      (*(void (**)(void *, void *, uint64_t))(v23 + 32))(v26, v28, v22);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v23 + 56))(v26, 0LL, 1LL, v22);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v31)
  {
    (*(void (**)(void *, uint64_t))(v23 + 8))(v26, v22);
LABEL_12:
    uint64_t v32 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v26, v28, *(void *)(*(void *)(v32 - 8) + 64LL));
    goto LABEL_13;
  }

  v334((uint64_t)v26, (uint64_t)v28, v22);
LABEL_13:
  uint64_t v33 = v27;
  uint64_t v34 = v25;
  uint64_t v35 = a3[12];
  uint64_t v36 = v25 + v35;
  uint64_t v37 = v33 + v35;
  *(_BYTE *)uint64_t v36 = *(_BYTE *)v37;
  uint64_t v39 = *(void *)(v37 + 8);
  uint64_t v38 = *(void *)(v37 + 16);
  *(void *)(v36 + 8) = v39;
  *(void *)(v36 + 16) = v38;
  swift_bridgeObjectRelease();
  uint64_t v40 = a3[14];
  unint64_t v340 = a3;
  *(_BYTE *)(v25 + a3[13]) = *(_BYTE *)(v33 + a3[13]);
  uint64_t v41 = (_BYTE *)(v25 + v40);
  uint64_t v42 = (_BYTE *)(v33 + v40);
  int v43 = (int *)type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v44 = *((void *)v43 - 1);
  uint64_t v45 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v44 + 48);
  int v46 = v45(v41, 1LL, v43);
  int v47 = v45(v42, 1LL, v43);
  if (v46)
  {
    if (!v47)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v335 + 32))(v41, v42, v6);
      *(_OWORD *)&v41[v43[5]] = *(_OWORD *)&v42[v43[5]];
      *(_OWORD *)&v41[v43[6]] = *(_OWORD *)&v42[v43[6]];
      *(_OWORD *)&v41[v43[7]] = *(_OWORD *)&v42[v43[7]];
      *(_DWORD *)&v41[v43[8]] = *(_DWORD *)&v42[v43[8]];
      uint64_t v48 = v43[9];
      uint64_t v49 = &v41[v48];
      uint64_t v50 = &v42[v48];
      *(_DWORD *)uint64_t v49 = *(_DWORD *)v50;
      v49[4] = v50[4];
      uint64_t v51 = v43[10];
      uint64_t v52 = &v41[v51];
      uint64_t v53 = &v42[v51];
      *(_OWORD *)uint64_t v52 = *(_OWORD *)v53;
      v52[16] = v53[16];
      uint64_t v54 = v43[11];
      uint64_t v55 = &v41[v54];
      uint64_t v56 = &v42[v54];
      v55[8] = v56[8];
      *(void *)uint64_t v55 = *(void *)v56;
      uint64_t v57 = v43[12];
      uint64_t v58 = &v41[v57];
      uint64_t v59 = &v42[v57];
      *(_DWORD *)uint64_t v58 = *(_DWORD *)v59;
      v58[4] = v59[4];
      v41[v43[13]] = v42[v43[13]];
      v41[v43[14]] = v42[v43[14]];
      *(_OWORD *)&v41[v43[15]] = *(_OWORD *)&v42[v43[15]];
      (*(void (**)(_BYTE *, void, uint64_t, int *))(v44 + 56))(v41, 0LL, 1LL, v43);
      goto LABEL_19;
    }

    goto LABEL_18;
  }

  if (v47)
  {
    sub_100018C68((uint64_t)v41, type metadata accessor for AccessoryMetadata);
LABEL_18:
    uint64_t v60 = sub_100004AEC(&qword_1009B9250);
    memcpy(v41, v42, *(void *)(*(void *)(v60 - 8) + 64LL));
    goto LABEL_19;
  }

  v331((uint64_t)v41, (uint64_t)v42, v6);
  uint64_t v85 = v43[5];
  uint64_t v86 = *(void *)&v41[v85];
  unint64_t v87 = *(void *)&v41[v85 + 8];
  *(_OWORD *)&v41[v85] = *(_OWORD *)&v42[v85];
  sub_100016F9C(v86, v87);
  uint64_t v88 = v43[6];
  int v89 = &v41[v88];
  uint64_t v90 = (uint64_t *)&v42[v88];
  uint64_t v92 = *v90;
  uint64_t v91 = v90[1];
  void *v89 = v92;
  v89[1] = v91;
  swift_bridgeObjectRelease();
  uint64_t v93 = v43[7];
  uint64_t v94 = &v41[v93];
  uint64_t v95 = (uint64_t *)&v42[v93];
  uint64_t v97 = *v95;
  uint64_t v96 = v95[1];
  void *v94 = v97;
  v94[1] = v96;
  swift_bridgeObjectRelease();
  *(_DWORD *)&v41[v43[8]] = *(_DWORD *)&v42[v43[8]];
  uint64_t v98 = v43[9];
  uint64_t v99 = &v41[v98];
  uint64_t v100 = &v42[v98];
  *(_DWORD *)uint64_t v99 = *(_DWORD *)v100;
  v99[4] = v100[4];
  uint64_t v101 = v43[10];
  uint64_t v102 = &v41[v101];
  uint64_t v103 = &v42[v101];
  *(_OWORD *)uint64_t v102 = *(_OWORD *)v103;
  v102[16] = v103[16];
  uint64_t v104 = v43[11];
  uint64_t v105 = &v41[v104];
  uint64_t v106 = &v42[v104];
  *(void *)uint64_t v105 = *(void *)v106;
  v105[8] = v106[8];
  uint64_t v107 = v43[12];
  uint64_t v108 = &v41[v107];
  uint64_t v109 = &v42[v107];
  *(_DWORD *)uint64_t v108 = *(_DWORD *)v109;
  v108[4] = v109[4];
  v41[v43[13]] = v42[v43[13]];
  v41[v43[14]] = v42[v43[14]];
  uint64_t v110 = v43[15];
  uint64_t v111 = &v41[v110];
  uint64_t v112 = (uint64_t *)&v42[v110];
  uint64_t v114 = *v112;
  uint64_t v113 = v112[1];
  void *v111 = v114;
  v111[1] = v113;
  swift_bridgeObjectRelease();
LABEL_19:
  uint64_t v61 = v340;
  uint64_t v62 = v341;
  uint64_t v63 = v340[15];
  __int128 v64 = (_BYTE *)(v25 + v63);
  uint64_t v65 = (_BYTE *)(v33 + v63);
  uint64_t v66 = (int *)type metadata accessor for AccessoryProductInfo(0LL);
  uint64_t v67 = *((void *)v66 - 1);
  uint64_t v68 = *(uint64_t (**)(_BYTE *, uint64_t, int *))(v67 + 48);
  int v69 = v68(v64, 1LL, v66);
  int v70 = v68(v65, 1LL, v66);
  if (v69)
  {
    if (!v70)
    {
      *(void *)__int128 v64 = *(void *)v65;
      v64[8] = v65[8];
      uint64_t v71 = v66[5];
      uint64_t v72 = &v64[v71];
      uint64_t v73 = &v65[v71];
      uint64_t v74 = type metadata accessor for ServerStatusCode(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v74 - 8) + 32LL))(v72, v73, v74);
      v64[v66[6]] = v65[v66[6]];
      v64[v66[7]] = v65[v66[7]];
      *(_OWORD *)&v64[v66[8]] = *(_OWORD *)&v65[v66[8]];
      v64[v66[9]] = v65[v66[9]];
      v64[v66[10]] = v65[v66[10]];
      v64[v66[11]] = v65[v66[11]];
      *(_OWORD *)&v64[v66[12]] = *(_OWORD *)&v65[v66[12]];
      *(_OWORD *)&v64[v66[13]] = *(_OWORD *)&v65[v66[13]];
      uint64_t v75 = v66[14];
      uint64_t v76 = &v64[v75];
      __n128 v77 = &v65[v75];
      v76[8] = v77[8];
      *(void *)uint64_t v76 = *(void *)v77;
      *(_OWORD *)&v64[v66[15]] = *(_OWORD *)&v65[v66[15]];
      uint64_t v78 = v66[16];
      uint64_t v79 = &v64[v78];
      uint64_t v80 = &v65[v78];
      uint64_t v81 = type metadata accessor for URL(0LL);
      uint64_t v82 = *(void *)(v81 - 8);
      v336 = *(unsigned int (**)(void))(v82 + 48);
      if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v336)(v80, 1LL, v81))
      {
        uint64_t v83 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v79, v80, *(void *)(*(void *)(v83 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v82 + 32))(v79, v80, v81);
        (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v82 + 56))(v79, 0LL, 1LL, v81);
      }

      uint64_t v151 = v66[17];
      uint64_t v152 = &v64[v151];
      uint64_t v153 = &v65[v151];
      uint64_t v330 = v67;
      uint64_t v333 = v82;
      if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v336)(&v65[v151], 1LL, v81))
      {
        uint64_t v154 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v152, v153, *(void *)(*(void *)(v154 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v82 + 32))(v152, v153, v81);
        (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v82 + 56))(v152, 0LL, 1LL, v81);
      }

      *(_OWORD *)&v64[v66[18]] = *(_OWORD *)&v65[v66[18]];
      *(void *)&v64[v66[19]] = *(void *)&v65[v66[19]];
      uint64_t v155 = v66[20];
      uint64_t v156 = &v64[v155];
      uint64_t v157 = &v65[v155];
      uint64_t v158 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
      uint64_t v159 = *((void *)v158 - 1);
      if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v159 + 48))(v157, 1LL, v158))
      {
        uint64_t v160 = sub_100004AEC(&qword_1009A6DD0);
        memcpy(v156, v157, *(void *)(*(void *)(v160 - 8) + 64LL));
      }

      else
      {
        __int128 v161 = v157[1];
        *uint64_t v156 = *v157;
        v156[1] = v161;
        v156[2] = v157[2];
        *((_WORD *)v156 + 24) = *((_WORD *)v157 + 24);
        uint64_t v162 = *((void *)v157 + 8);
        *((void *)v156 + 7) = *((void *)v157 + 7);
        *((void *)v156 + 8) = v162;
        *((_BYTE *)v156 + 72) = *((_BYTE *)v157 + 72);
        uint64_t v163 = v158[10];
        uint64_t v323 = (char *)v157 + v163;
        __src = (char *)v156 + v163;
        if (v336())
        {
          uint64_t v164 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
          memcpy(__src, v323, *(void *)(*(void *)(v164 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v333 + 32))(__src, v323, v81);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v333 + 56))(__src, 0LL, 1LL, v81);
        }

        uint64_t v166 = v158[11];
        v324 = (char *)v157 + v166;
        __srca = (char *)v156 + v166;
        if (v336())
        {
          uint64_t v167 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
          memcpy(__srca, v324, *(void *)(*(void *)(v167 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v333 + 32))(__srca, v324, v81);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v333 + 56))(__srca, 0LL, 1LL, v81);
        }

        uint64_t v168 = v158[12];
        uint64_t v169 = (char *)v156 + v168;
        __n128 v170 = (char *)v157 + v168;
        *(void *)uint64_t v169 = *(void *)v170;
        v169[8] = v170[8];
        *(_OWORD *)((char *)v156 + v158[13]) = *(_OWORD *)((char *)v157 + v158[13]);
        *(void *)((char *)v156 + v158[14]) = *(void *)((char *)v157 + v158[14]);
        *(_OWORD *)((char *)v156 + v158[15]) = *(_OWORD *)((char *)v157 + v158[15]);
        *(void *)((char *)v156 + v158[16]) = *(void *)((char *)v157 + v158[16]);
        uint64_t v171 = v158[17];
        uint64_t v172 = (char *)v156 + v171;
        uint64_t v173 = (char *)v157 + v171;
        v172[16] = v173[16];
        *(_OWORD *)uint64_t v172 = *(_OWORD *)v173;
        uint64_t v174 = v158[18];
        uint64_t v175 = (char *)v156 + v174;
        uint64_t v176 = (char *)v157 + v174;
        v175[16] = v176[16];
        *(_OWORD *)uint64_t v175 = *(_OWORD *)v176;
        (*(void (**)(_OWORD *, void, uint64_t, int *))(v159 + 56))(v156, 0LL, 1LL, v158);
      }

      uint64_t v61 = v340;
      *(_DWORD *)&v64[v66[21]] = *(_DWORD *)&v65[v66[21]];
      *(void *)&v64[v66[22]] = *(void *)&v65[v66[22]];
      *(_OWORD *)&v64[v66[23]] = *(_OWORD *)&v65[v66[23]];
      *(_OWORD *)&v64[v66[24]] = *(_OWORD *)&v65[v66[24]];
      uint64_t v177 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v333 + 32);
      v177(&v64[v66[25]], &v65[v66[25]], v81);
      v177(&v64[v66[26]], &v65[v66[26]], v81);
      v177(&v64[v66[27]], &v65[v66[27]], v81);
      v177(&v64[v66[28]], &v65[v66[28]], v81);
      v177(&v64[v66[29]], &v65[v66[29]], v81);
      v177(&v64[v66[30]], &v65[v66[30]], v81);
      *(_OWORD *)&v64[v66[31]] = *(_OWORD *)&v65[v66[31]];
      *(void *)&v64[v66[32]] = *(void *)&v65[v66[32]];
      *(_OWORD *)&v64[v66[33]] = *(_OWORD *)&v65[v66[33]];
      *(void *)&v64[v66[34]] = *(void *)&v65[v66[34]];
      uint64_t v178 = v66[35];
      uint64_t v179 = &v64[v178];
      uint64_t v180 = &v65[v178];
      v179[16] = v180[16];
      *(_OWORD *)uint64_t v179 = *(_OWORD *)v180;
      uint64_t v181 = v66[36];
      uint64_t v182 = &v64[v181];
      uint64_t v183 = &v65[v181];
      v182[16] = v183[16];
      *(_OWORD *)uint64_t v182 = *(_OWORD *)v183;
      v177(&v64[v66[37]], &v65[v66[37]], v81);
      v177(&v64[v66[38]], &v65[v66[38]], v81);
      v177(&v64[v66[39]], &v65[v66[39]], v81);
      v177(&v64[v66[40]], &v65[v66[40]], v81);
      v177(&v64[v66[41]], &v65[v66[41]], v81);
      v177(&v64[v66[42]], &v65[v66[42]], v81);
      v64[v66[43]] = v65[v66[43]];
      v64[v66[44]] = v65[v66[44]];
      v64[v66[45]] = v65[v66[45]];
      *(_OWORD *)&v64[v66[46]] = *(_OWORD *)&v65[v66[46]];
      *(_OWORD *)&v64[v66[47]] = *(_OWORD *)&v65[v66[47]];
      (*(void (**)(_BYTE *, void, uint64_t, int *))(v330 + 56))(v64, 0LL, 1LL, v66);
      goto LABEL_97;
    }

uint64_t sub_1000EE114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EE120);
}

uint64_t sub_1000EE120(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  uint64_t v11 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v12 = *(void *)(v11 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v11;
    uint64_t v13 = a3[5];
LABEL_18:
    uint64_t v10 = a1 + v13;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v12 + 48);
    return v9(v10, a2, v8);
  }

  uint64_t v14 = type metadata accessor for MACAddress(0LL);
  uint64_t v12 = *(void *)(v14 - 8);
  if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v14;
    uint64_t v13 = a3[7];
    goto LABEL_18;
  }

  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    uint64_t v17 = type metadata accessor for Date(0LL);
    uint64_t v12 = *(void *)(v17 - 8);
    if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
    {
      uint64_t v8 = v17;
      uint64_t v13 = a3[10];
    }

    else
    {
      uint64_t v18 = sub_100004AEC((uint64_t *)&unk_10099D720);
      uint64_t v12 = *(void *)(v18 - 8);
      if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
      {
        uint64_t v8 = v18;
        uint64_t v13 = a3[11];
      }

      else
      {
        uint64_t v19 = sub_100004AEC(&qword_1009B9250);
        uint64_t v12 = *(void *)(v19 - 8);
        if (*(_DWORD *)(v12 + 84) == (_DWORD)a2)
        {
          uint64_t v8 = v19;
          uint64_t v13 = a3[14];
        }

        else
        {
          uint64_t v8 = sub_100004AEC(&qword_10099CE68);
          uint64_t v12 = *(void *)(v8 - 8);
          uint64_t v13 = a3[15];
        }
      }
    }

    goto LABEL_18;
  }

  unint64_t v15 = *(void *)(a1 + a3[8]);
  if (v15 >= 0xFFFFFFFF) {
    LODWORD(v15) = -1;
  }
  return (v15 + 1);
}

uint64_t sub_1000EE28C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EE298);
}

uint64_t sub_1000EE298(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v13 = sub_100004AEC(&qword_10099D8A0);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v15 = a4[5];
    }

    else
    {
      uint64_t result = type metadata accessor for MACAddress(0LL);
      uint64_t v14 = *(void *)(result - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        uint64_t v10 = result;
        uint64_t v15 = a4[7];
      }

      else
      {
        if (a3 == 0x7FFFFFFF)
        {
          *(void *)(a1 + a4[8]) = (a2 - 1);
          return result;
        }

        uint64_t v17 = type metadata accessor for Date(0LL);
        uint64_t v14 = *(void *)(v17 - 8);
        if (*(_DWORD *)(v14 + 84) == a3)
        {
          uint64_t v10 = v17;
          uint64_t v15 = a4[10];
        }

        else
        {
          uint64_t v18 = sub_100004AEC((uint64_t *)&unk_10099D720);
          uint64_t v14 = *(void *)(v18 - 8);
          if (*(_DWORD *)(v14 + 84) == a3)
          {
            uint64_t v10 = v18;
            uint64_t v15 = a4[11];
          }

          else
          {
            uint64_t v19 = sub_100004AEC(&qword_1009B9250);
            uint64_t v14 = *(void *)(v19 - 8);
            if (*(_DWORD *)(v14 + 84) == a3)
            {
              uint64_t v10 = v19;
              uint64_t v15 = a4[14];
            }

            else
            {
              uint64_t v10 = sub_100004AEC(&qword_10099CE68);
              uint64_t v14 = *(void *)(v10 - 8);
              uint64_t v15 = a4[15];
            }
          }
        }
      }
    }

    uint64_t v12 = a1 + v15;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_1000EE400(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v17[0] = *(void *)(v2 - 8) + 64LL;
    sub_10009361C( 319LL,  (unint64_t *)&qword_1009AFA50,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID);
    if (v5 <= 0x3F)
    {
      v17[1] = *(void *)(v4 - 8) + 64LL;
      uint64_t v17[2] = &unk_1007EBB28;
      uint64_t v6 = type metadata accessor for MACAddress(319LL);
      if (v7 <= 0x3F)
      {
        v17[3] = *(void *)(v6 - 8) + 64LL;
        v17[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
        v17[5] = &unk_1007EBB40;
        uint64_t v8 = type metadata accessor for Date(319LL);
        if (v9 <= 0x3F)
        {
          v17[6] = *(void *)(v8 - 8) + 64LL;
          sub_10009361C( 319LL,  (unint64_t *)&qword_1009A09E0,  (uint64_t (*)(uint64_t))&type metadata accessor for Date);
          if (v11 <= 0x3F)
          {
            uint64_t v12 = *(void *)(v10 - 8) + 64LL;
            v17[7] = v12;
            v17[8] = &unk_1007EBB58;
            uint64_t v17[9] = &unk_1007EBB40;
            sub_10009361C(319LL, (unint64_t *)&unk_1009A05A0, type metadata accessor for AccessoryMetadata);
            if (v14 <= 0x3F)
            {
              v17[10] = *(void *)(v13 - 8) + 64LL;
              sub_10009361C( 319LL,  (unint64_t *)&qword_10099EDA0,  type metadata accessor for AccessoryProductInfo);
              if (v16 <= 0x3F)
              {
                v17[11] = *(void *)(v15 - 8) + 64LL;
                v17[12] = &unk_1007EBB70;
                v17[13] = (char *)&value witness table for Builtin.BridgeObject + 64;
                v17[14] = v12;
                v17[15] = v12;
                v17[16] = &unk_1007EBB88;
                v17[17] = &unk_1007EBBA0;
                v17[18] = &unk_1007EBBB8;
                swift_initStructMetadata(a1, 256LL, 19LL, v17, a1 + 16);
              }
            }
          }
        }
      }
    }
  }

uint64_t sub_1000EE5B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000EE5C0);
}

uint64_t sub_1000EE5C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = a1 + *(int *)(a3 + 28);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 48LL))(v4, a2, v5);
}

uint64_t sub_1000EE600(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000EE60C);
}

uint64_t sub_1000EE60C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a1 + *(int *)(a4 + 28);
  uint64_t v6 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(v5, a2, a2, v6);
}

uint64_t sub_1000EE650()
{
  return sub_100007864(&qword_1009A1188, type metadata accessor for WildModeTrackingLocation, (uint64_t)&unk_1007EBBEC);
}

uint64_t sub_1000EE67C()
{
  return sub_100007864(&qword_1009A1190, type metadata accessor for WildModeAssociationRecord, (uint64_t)&unk_1007EBC54);
}

unint64_t sub_1000EE6AC()
{
  unint64_t result = qword_1009A1198;
  if (!qword_1009A1198)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EBD84, &type metadata for WildModeAssociationRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1198);
  }

  return result;
}

unint64_t sub_1000EE6F4()
{
  unint64_t result = qword_1009A11A0;
  if (!qword_1009A11A0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EBE24, &type metadata for UnauthorizedTrackingType);
    atomic_store(result, (unint64_t *)&qword_1009A11A0);
  }

  return result;
}

unint64_t sub_1000EE73C()
{
  unint64_t result = qword_1009A11A8;
  if (!qword_1009A11A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EBEC4, &type metadata for WildModeAlertState);
    atomic_store(result, (unint64_t *)&qword_1009A11A8);
  }

  return result;
}

unint64_t sub_1000EE784()
{
  unint64_t result = qword_1009A11B0;
  if (!qword_1009A11B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EBF64, &type metadata for WildModeObservationState);
    atomic_store(result, (unint64_t *)&qword_1009A11B0);
  }

  return result;
}

unint64_t sub_1000EE7CC()
{
  unint64_t result = qword_1009A11B8;
  if (!qword_1009A11B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EBCBC, &type metadata for WildModeAssociationRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A11B8);
  }

  return result;
}

unint64_t sub_1000EE814()
{
  unint64_t result = qword_1009A11C0;
  if (!qword_1009A11C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EBCE4, &type metadata for WildModeAssociationRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A11C0);
  }

  return result;
}

unint64_t sub_1000EE858(unint64_t result)
{
  if (result >= 5) {
    return 5LL;
  }
  return result;
}

unint64_t sub_1000EE868(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1009330E8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 8) {
    return 8LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_1000EE8B0(uint64_t a1, uint64_t a2)
{
  unint64_t v3 = _findStringSwitchCaseWithCache(cases:string:cache:)(&off_1009331C8, a1, a2, &unk_10099BA68);
  swift_bridgeObjectRelease(a2);
  if (v3 >= 0x13) {
    return 19LL;
  }
  else {
    return v3;
  }
}

unint64_t sub_1000EE900()
{
  unint64_t result = qword_1009A11C8;
  if (!qword_1009A11C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EBDEC, &type metadata for UnauthorizedTrackingType);
    atomic_store(result, (unint64_t *)&qword_1009A11C8);
  }

  return result;
}

unint64_t sub_1000EE944()
{
  unint64_t result = qword_1009A11D8;
  if (!qword_1009A11D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EC254, &type metadata for WildModeTrackingLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A11D8);
  }

  return result;
}

unint64_t sub_1000EE988()
{
  unint64_t result = qword_1009A11E0;
  if (!qword_1009A11E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EBE4C, &type metadata for WildModeAlertState);
    atomic_store(result, (unint64_t *)&qword_1009A11E0);
  }

  return result;
}

unint64_t sub_1000EE9CC()
{
  unint64_t result = qword_1009A11E8;
  if (!qword_1009A11E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EBEEC, &type metadata for WildModeObservationState);
    atomic_store(result, (unint64_t *)&qword_1009A11E8);
  }

  return result;
}

uint64_t sub_1000EEA10(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009A59B0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t storeEnumTagSinglePayload for WildModeTrackingLocation.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000EEAA4 + 4 * byte_1007EBA27[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000EEAD8 + 4 * byte_1007EBA22[v4]))();
}

uint64_t sub_1000EEAD8(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EEAE0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000EEAE8LL);
  }
  return result;
}

uint64_t sub_1000EEAF4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000EEAFCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000EEB00(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EEB08(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for WildModeTrackingLocation.CodingKeys()
{
  return &type metadata for WildModeTrackingLocation.CodingKeys;
}

uint64_t *destroy for WildModeAssociationRecord.AdvertisementType(uint64_t *result)
{
  unint64_t v1 = result[1];
  if ((v1 & 0x3000000000000000LL) == 0) {
    return (uint64_t *)sub_100016F9C(*result, v1);
  }
  return result;
}

uint64_t _s12searchpartyd25WildModeAssociationRecordV17AdvertisementTypeOwCP_0(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = a2[1];
  if ((v3 & 0x3000000000000000LL) != 0)
  {
    *(_OWORD *)a1 = *(_OWORD *)a2;
  }

  else
  {
    uint64_t v4 = *a2;
    sub_10001736C(*a2, a2[1]);
    *(void *)a1 = v4;
    *(void *)(a1 + 8) = v3;
  }

  return a1;
}

uint64_t *assignWithCopy for WildModeAssociationRecord.AdvertisementType(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  unint64_t v5 = a2[1];
  uint64_t v6 = v5 & 0x3000000000000000LL;
  if ((v4 & 0x3000000000000000LL) == 0)
  {
    if (!v6)
    {
      uint64_t v9 = *a2;
      sub_10001736C(v9, v5);
      uint64_t v10 = *a1;
      unint64_t v11 = a1[1];
      *a1 = v9;
      a1[1] = v5;
      sub_100016F9C(v10, v11);
      return a1;
    }

    sub_100016F9C(*a1, v4);
    goto LABEL_6;
  }

  if (v6)
  {
LABEL_6:
    *(_OWORD *)a1 = *(_OWORD *)a2;
    return a1;
  }

  uint64_t v7 = *a2;
  sub_10001736C(v7, v5);
  *a1 = v7;
  a1[1] = v5;
  return a1;
}

uint64_t *assignWithTake for WildModeAssociationRecord.AdvertisementType(uint64_t *a1, uint64_t *a2)
{
  unint64_t v4 = a1[1];
  if ((v4 & 0x3000000000000000LL) == 0)
  {
    uint64_t v5 = a2[1];
    if ((v5 & 0x3000000000000000LL) == 0)
    {
      uint64_t v7 = *a1;
      *a1 = *a2;
      a1[1] = v5;
      sub_100016F9C(v7, v4);
      return a1;
    }

    sub_100016F9C(*a1, v4);
  }

  *(_OWORD *)a1 = *(_OWORD *)a2;
  return a1;
}

uint64_t getEnumTagSinglePayload for WildModeAssociationRecord.AdvertisementType(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xB && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 11);
  }
  uint64_t v3 = *(void *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v3) & 0xC) != 0) {
    unsigned int v4 = 16 - ((4 * v3) & 0xC | (v3 >> 2));
  }
  else {
    unsigned int v4 = 0;
  }
  if (v4 >= 3) {
    return v4 - 2;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for WildModeAssociationRecord.AdvertisementType( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xA)
  {
    *(void *)unint64_t result = 0LL;
    *(void *)(result + 8) = 0LL;
    *(_DWORD *)unint64_t result = a2 - 11;
    if (a3 >= 0xB) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0xB) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0LL;
      *(void *)(result + 8) = (unint64_t)((4 * (14 - a2)) | ((14 - a2) >> 2)) << 60;
    }
  }

  return result;
}

uint64_t sub_1000EED34(uint64_t a1)
{
  uint64_t v1 = *(void *)(a1 + 8) >> 60;
  if (((4 * (_DWORD)v1) & 0xC) != 0) {
    return 16 - ((4 * (_DWORD)v1) & 0xC | (v1 >> 2));
  }
  else {
    return 0LL;
  }
}

void *sub_1000EED5C(void *result, unsigned int a2)
{
  if (a2 > 0xC)
  {
    *unint64_t result = a2 - 13;
    result[1] = 0LL;
  }

  else if (a2)
  {
    *unint64_t result = 0LL;
    result[1] = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
  }

  return result;
}

ValueMetadata *type metadata accessor for WildModeAssociationRecord.AdvertisementType()
{
  return &type metadata for WildModeAssociationRecord.AdvertisementType;
}

unint64_t sub_1000EEDA0()
{
  unint64_t result = qword_1009A1200;
  if (!qword_1009A1200)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EC134, &type metadata for WildModeAssociationRecord.AdvertisementType);
    atomic_store(result, (unint64_t *)&qword_1009A1200);
  }

  return result;
}

unint64_t sub_1000EEDE8()
{
  unint64_t result = qword_1009A1208;
  if (!qword_1009A1208)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EC22C, &type metadata for WildModeTrackingLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1208);
  }

  return result;
}

unint64_t sub_1000EEE30()
{
  unint64_t result = qword_1009A1210;
  if (!qword_1009A1210)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EC19C, &type metadata for WildModeTrackingLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1210);
  }

  return result;
}

unint64_t sub_1000EEE78()
{
  unint64_t result = qword_1009A1218;
  if (!qword_1009A1218)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EC1C4, &type metadata for WildModeTrackingLocation.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1218);
  }

  return result;
}

uint64_t sub_1000EEEBC(void *a1, uint64_t a2)
{
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100012ED8(a1, v4);
  dispatch thunk of BinaryEncoding.container()(v24, v4, v5);
  if (a2 == 2LL || (a2 & 0x10000) != 0)
  {
    char v23 = 2;
    uint64_t v15 = v25;
    uint64_t v16 = v26;
    sub_100037298((uint64_t)v24, v25);
    unint64_t v12 = sub_100041584();
    uint64_t v13 = v15;
    uint64_t v14 = v16;
LABEL_8:
    dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v23, &type metadata for UInt8, v12, v13, v14);
    if (!v2)
    {
      char v23 = BYTE3(a2);
      uint64_t v17 = v25;
      uint64_t v18 = v26;
      sub_100037298((uint64_t)v24, v25);
      unint64_t v19 = sub_100041584();
      dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v23, &type metadata for UInt8, v19, v17, v18);
      char v23 = BYTE4(a2);
      uint64_t v20 = v25;
      uint64_t v21 = v26;
      sub_100037298((uint64_t)v24, v25);
      dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v23, &type metadata for UInt8, v19, v20, v21);
    }

    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
  }

  char v23 = 3;
  uint64_t v6 = v25;
  uint64_t v7 = v26;
  sub_100037298((uint64_t)v24, v25);
  unint64_t v8 = sub_100041584();
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v23, &type metadata for UInt8, v8, v6, v7);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
  }
  unint64_t v9 = Bool.intValue.getter(a2 & 1);
  if ((v9 & 0x8000000000000000LL) != 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  }

  else
  {
    if (v9 < 0x100)
    {
      char v23 = v9 & BYTE1(a2);
      uint64_t v10 = v25;
      uint64_t v11 = v26;
      sub_100037298((uint64_t)v24, v25);
      unint64_t v12 = v8;
      uint64_t v13 = v10;
      uint64_t v14 = v11;
      goto LABEL_8;
    }

    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  }

  __break(1u);
  return result;
}

uint64_t sub_1000EF128(void *a1, unint64_t a2)
{
  uint64_t v5 = sub_100004AEC(&qword_1009A1240);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = &v15[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1000EFED0();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AdvInfo.CodingKeys,  &type metadata for AdvInfo.CodingKeys,  v11,  v9,  v10);
  char v19 = 0;
  KeyedEncodingContainer.encodeIfPresent(_:forKey:)(a2, &v19, v5);
  if (!v2)
  {
    char v18 = 1;
    HIDWORD(v12) = WORD1(a2) & 1;
    LODWORD(v12) = (_DWORD)a2 << 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)((v12 >> 24), &v18, v5);
    v17[0] = BYTE3(a2);
    char v16 = 2;
    unint64_t v13 = sub_1000ABA84();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v16, v5, &type metadata for ExtraKeyBits, v13);
    v15[10] = 3;
    KeyedEncodingContainer.encode(_:forKey:)(HIDWORD(a2));
  }

  return (*(uint64_t (**)(_BYTE *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1000EF2AC()
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000EF2E0 + 4 * byte_1007EC2A4[*v0]))( 0x656E774F7261656ELL,  0xE900000000000072LL);
}

uint64_t sub_1000EF2E0()
{
  return 0x6465767265736572LL;
}

uint64_t sub_1000EF2F8()
{
  return 0x79654B6172747865LL;
}

uint64_t sub_1000EF318()
{
  return 1953393000LL;
}

uint64_t sub_1000EF328@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1000EFB30(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1000EF34C(uint64_t a1)
{
  unint64_t v2 = sub_1000EFED0();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000EF374(uint64_t a1)
{
  unint64_t v2 = sub_1000EFED0();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1000EF39C@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EF3F0((uint64_t (*)(void))sub_1000EF950, a1);
}

uint64_t sub_1000EF3B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EF454(a1, a2, a3, (uint64_t (*)(uint64_t, unint64_t))sub_1000EEEBC);
}

uint64_t sub_1000EF3D4@<X0>(uint64_t a1@<X8>)
{
  return sub_1000EF3F0((uint64_t (*)(void))sub_1000EFCFC, a1);
}

uint64_t sub_1000EF3F0@<X0>(uint64_t (*a1)(void)@<X3>, uint64_t a2@<X8>)
{
  uint64_t result = a1();
  if (!v2)
  {
    *(_WORD *)a2 = result;
    *(_BYTE *)(a2 + 2) = BYTE2(result) & 1;
    *(_BYTE *)(a2 + 3) = BYTE3(result);
    *(_BYTE *)(a2 + 4) = BYTE4(result);
  }

  return result;
}

uint64_t sub_1000EF438(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1000EF454(a1, a2, a3, (uint64_t (*)(uint64_t, unint64_t))sub_1000EF128);
}

uint64_t sub_1000EF454( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t, unint64_t))
{
  return a4( a1,  *(unsigned __int16 *)v4 | ((unint64_t)v4[3] << 24) | ((unint64_t)v4[4] << 32) | ((unint64_t)v4[2] << 16));
}

BOOL sub_1000EF494(unsigned __int8 *a1, unsigned __int8 *a2)
{
  return sub_1000EF4E8( *(unsigned __int16 *)a1 | ((unint64_t)a1[3] << 24) | ((unint64_t)a1[4] << 32) | ((unint64_t)a1[2] << 16),  *(unsigned __int16 *)a2 | ((unint64_t)a2[3] << 24) | ((unint64_t)a2[4] << 32) | ((unint64_t)a2[2] << 16));
}

BOOL sub_1000EF4E8(uint64_t a1, uint64_t a2)
{
  if (a1 == 2LL)
  {
  }

  else if (a2 == 2 || ((((a1 & 1) == 0) ^ a2) & 1) == 0)
  {
    return 0LL;
  }

  if ((a1 & 0x10000) != 0)
  {
    if ((a2 & 0x10000) == 0) {
      return 0LL;
    }
  }

  else if ((a2 & 0x10000) != 0 || BYTE1(a1) != BYTE1(a2))
  {
    return 0LL;
  }

  if (BYTE3(a1) != BYTE3(a2)) {
    return 0LL;
  }
  return BYTE4(a1) == BYTE4(a2);
}

void sub_1000EF574(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

unint64_t sub_1000EF760()
{
  unint64_t result = qword_1009A1220;
  if (!qword_1009A1220)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EC3FC, &type metadata for AdvInfo.Error);
    atomic_store(result, (unint64_t *)&qword_1009A1220);
  }

  return result;
}

uint64_t initializeBufferWithCopyOfBuffer for AdvInfo(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for AdvInfo(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && a1[5]) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *a1;
  if (v3 >= 2) {
    int v4 = ((v3 + 2147483646) & 0x7FFFFFFF) - 1;
  }
  else {
    int v4 = -2;
  }
  if (v4 < 0) {
    int v4 = -1;
  }
  return (v4 + 1);
}

uint64_t storeEnumTagSinglePayload for AdvInfo(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 5) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 5) = 0;
    }
    if (a2) {
      *(_BYTE *)unint64_t result = a2 + 2;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AdvInfo()
{
  return &type metadata for AdvInfo;
}

uint64_t storeEnumTagSinglePayload for AdvInfo.Error(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000EF8AC + 4 * byte_1007EC2A8[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000EF8CC + 4 * byte_1007EC2AD[v4]))();
  }
}

_BYTE *sub_1000EF8AC(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000EF8CC(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000EF8D4(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000EF8DC(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000EF8E4(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000EF8EC(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AdvInfo.Error()
{
  return &type metadata for AdvInfo.Error;
}

unint64_t sub_1000EF90C()
{
  unint64_t result = qword_1009A1228;
  if (!qword_1009A1228)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EC30C, &type metadata for AdvInfo.Error);
    atomic_store(result, (unint64_t *)&qword_1009A1228);
  }

  return result;
}

unint64_t sub_1000EF950(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  dispatch thunk of BinaryDecoding.container()(v24, v3, v4);
  uint64_t v5 = v25;
  uint64_t v6 = v26;
  sub_100037298((uint64_t)v24, v25);
  uint64_t v7 = dispatch thunk of BinaryDecodingContaining.decode(length:)(1LL, v5, v6);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    uint64_t v9 = v7;
    unint64_t v10 = v8;
    sub_100042F34();
    uint64_t v11 = DataProtocol.intValue.getter(&type metadata for Data);
    uint64_t v12 = v25;
    uint64_t v13 = v26;
    sub_100037298((uint64_t)v24, v25);
    uint64_t v14 = dispatch thunk of BinaryDecodingContaining.decode(length:)(v11, v12, v13);
    unint64_t v16 = v15;
    sub_10001736C(v9, v10);
    sub_10001736C(v14, v16);
    sub_1004A8638(v14, v16);
    sub_100016F9C(v14, v16);
    sub_1003B6EB8(v9, v10);
    uint64_t v18 = v17;
    unint64_t v20 = v19;
    sub_1000EF574(v17, v19);
    uint64_t v22 = v21;
    sub_100016F9C(v18, v20);
    sub_100016F9C(v14, v16);
    sub_100016F9C(v9, v10);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v24);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    return v22 & 0xFFFF00FFFFLL | ((unint64_t)(BYTE2(v22) & 1) << 16);
  }

uint64_t sub_1000EFB30(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x656E774F7261656ELL && a2 == 0xE900000000000072LL)
  {
    unint64_t v5 = 0xE900000000000072LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x656E774F7261656ELL, 0xE900000000000072LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6465767265736572LL && a2 == 0xE800000000000000LL)
  {
    unint64_t v7 = 0xE800000000000000LL;
LABEL_14:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6465767265736572LL, 0xE800000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
    goto LABEL_14;
  }

  if (a1 == 0x79654B6172747865LL && a2 == 0xEC00000073746942LL)
  {
    unint64_t v8 = 0xEC00000073746942LL;
LABEL_20:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x79654B6172747865LL, 0xEC00000073746942LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
    goto LABEL_20;
  }

  if (a1 == 1953393000 && a2 == 0xE400000000000000LL)
  {
    swift_bridgeObjectRelease(0xE400000000000000LL);
    return 3LL;
  }

  else
  {
    char v9 = _stringCompareWithSmolCheck(_:_:expecting:)(1953393000LL, 0xE400000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v9 & 1) != 0) {
      return 3LL;
    }
    else {
      return 4LL;
    }
  }

unint64_t sub_1000EFCFC(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009A1230);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100012ED8(a1, v7);
  unint64_t v9 = sub_1000EFED0();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AdvInfo.CodingKeys,  &type metadata for AdvInfo.CodingKeys,  v9,  v7,  v8);
  if (v1) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  BYTE2(v19) = 0;
  unsigned __int8 v10 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)((char *)&v19 + 2, v3);
  BYTE1(v19) = 1;
  __int16 v11 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)((char *)&v19 + 1, v3);
  char v18 = 2;
  unint64_t v12 = sub_1000AB974();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v19,  &type metadata for ExtraKeyBits,  &v18,  v3,  &type metadata for ExtraKeyBits,  v12);
  uint64_t v13 = v19;
  char v17 = 3;
  unsigned __int8 v14 = KeyedDecodingContainer.decode(_:forKey:)(&v17, v3);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return (v13 << 24) | ((unint64_t)v14 << 32) | ((unint64_t)(HIBYTE(v11) & 1) << 16) | ((unint64_t)v11 << 8) | v10;
}

unint64_t sub_1000EFED0()
{
  unint64_t result = qword_1009A1238;
  if (!qword_1009A1238)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EC500, &type metadata for AdvInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1238);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for AdvInfo.CodingKeys(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000EFF60 + 4 * byte_1007EC2B7[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000EFF94 + 4 * byte_1007EC2B2[v4]))();
}

uint64_t sub_1000EFF94(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EFF9C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000EFFA4LL);
  }
  return result;
}

uint64_t sub_1000EFFB0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000EFFB8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000EFFBC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000EFFC4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AdvInfo.CodingKeys()
{
  return &type metadata for AdvInfo.CodingKeys;
}

unint64_t sub_1000EFFE4()
{
  unint64_t result = qword_1009A1248;
  if (!qword_1009A1248)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EC4D8, &type metadata for AdvInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1248);
  }

  return result;
}

unint64_t sub_1000F002C()
{
  unint64_t result = qword_1009A1250;
  if (!qword_1009A1250)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EC448, &type metadata for AdvInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1250);
  }

  return result;
}

unint64_t sub_1000F0074()
{
  unint64_t result = qword_1009A1258;
  if (!qword_1009A1258)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EC470, &type metadata for AdvInfo.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1258);
  }

  return result;
}

uint64_t sub_1000F00B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000F04DC();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000F0114(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000F04DC();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000F0160@<X0>(unsigned __int8 *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1000F0230(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1000F0188(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000F0520();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1000F01E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1000F0520();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1000F0230(uint64_t result)
{
  else {
    return result;
  }
}

uint64_t sub_1000F0244(double a1)
{
  if (a1 >= 0.0 && a1 < 65.0) {
    return 3LL;
  }
  if (a1 >= 65.0 && a1 < 400.0) {
    return 2LL;
  }
  if (a1 <= 9.22337204e18) {
    return a1 >= 400.0;
  }
  return 0LL;
}

uint64_t storeEnumTagSinglePayload for BeaconPayloadMetaData.BeaconType( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_1000F02F0 + 4 * byte_1007EC555[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1000F0324 + 4 * byte_1007EC550[v4]))();
}

uint64_t sub_1000F0324(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F032C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000F0334LL);
  }
  return result;
}

uint64_t sub_1000F0340(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000F0348LL);
  }
  *(_BYTE *)uint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1000F034C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F0354(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconPayloadMetaData.BeaconType()
{
  return &type metadata for BeaconPayloadMetaData.BeaconType;
}

ValueMetadata *type metadata accessor for BeaconPayloadMetaData()
{
  return &type metadata for BeaconPayloadMetaData;
}

uint64_t storeEnumTagSinglePayload for BeaconPayloadMetaData.ConfidenceScore( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1000F03CC + 4 * byte_1007EC55F[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1000F0400 + 4 * byte_1007EC55A[v4]))();
}

uint64_t sub_1000F0400(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F0408(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000F0410LL);
  }
  return result;
}

uint64_t sub_1000F041C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000F0424LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1000F0428(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F0430(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconPayloadMetaData.ConfidenceScore()
{
  return &type metadata for BeaconPayloadMetaData.ConfidenceScore;
}

unint64_t sub_1000F0450()
{
  unint64_t result = qword_1009A1260;
  if (!qword_1009A1260)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EC660, &type metadata for BeaconPayloadMetaData.ConfidenceScore);
    atomic_store(result, (unint64_t *)&qword_1009A1260);
  }

  return result;
}

unint64_t sub_1000F0498()
{
  unint64_t result = qword_1009A1268;
  if (!qword_1009A1268)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EC7B0, &type metadata for BeaconPayloadMetaData.BeaconType);
    atomic_store(result, (unint64_t *)&qword_1009A1268);
  }

  return result;
}

unint64_t sub_1000F04DC()
{
  unint64_t result = qword_1009A1270;
  if (!qword_1009A1270)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EC6E8, &type metadata for BeaconPayloadMetaData.BeaconType);
    atomic_store(result, (unint64_t *)&qword_1009A1270);
  }

  return result;
}

unint64_t sub_1000F0520()
{
  unint64_t result = qword_1009A1278;
  if (!qword_1009A1278)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EC598, &type metadata for BeaconPayloadMetaData.ConfidenceScore);
    atomic_store(result, (unint64_t *)&qword_1009A1278);
  }

  return result;
}

uint64_t sub_1000F0564@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  unint64_t v9 = (char *)&v30 - v8;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  unsigned __int8 v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v30 - v15;
  uint64_t v17 = *(void *)(a1 + 16);
  if (!v17)
  {
    char v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v18(v9, 1LL, 1LL, v10);
    goto LABEL_7;
  }

  unint64_t v31 = (*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v33 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  v33(v9, a1 + v31, v10);
  char v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v18(v9, 0LL, 1LL, v10);
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v35(v9, 1LL, v10) == 1)
  {
LABEL_7:
    sub_100015794((uint64_t)v9, (uint64_t *)&unk_10099D720);
    char v23 = a2;
    uint64_t v24 = 1LL;
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v18)(v23, v24, 1LL, v10);
  }

  int v30 = a2;
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v19(v16, v9, v10);
  uint64_t v32 = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v20 = v17 - 1;
  uint64_t v21 = v33;
  if (v20)
  {
    uint64_t v34 = *(void *)(v11 + 72);
    unint64_t v26 = v32 + v34 + v31;
    while (1)
    {
      v21(v7, v26, v10);
      v18(v7, 0LL, 1LL, v10);
      if (v35(v7, 1LL, v10) == 1) {
        break;
      }
      v19(v14, v7, v10);
      uint64_t v27 = sub_1000F30E8(&qword_1009A1280, (uint64_t)&protocol conformance descriptor for Date);
      char v28 = dispatch thunk of static Comparable.< infix(_:_:)(v16, v14, v10, v27);
      uint64_t v29 = *(void (**)(char *, uint64_t))(v11 + 8);
      if ((v28 & 1) != 0)
      {
        v29(v16, v10);
        v19(v16, v14, v10);
      }

      else
      {
        v29(v14, v10);
      }

      v26 += v34;
      if (!--v20) {
        goto LABEL_4;
      }
    }
  }

  else
  {
LABEL_4:
    v18(v7, 1LL, 1LL, v10);
  }

  swift_bridgeObjectRelease(v32);
  sub_100015794((uint64_t)v7, (uint64_t *)&unk_10099D720);
  uint64_t v22 = v30;
  v19(v30, v16, v10);
  char v23 = v22;
  uint64_t v24 = 0LL;
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v18)(v23, v24, 1LL, v10);
}

uint64_t sub_1000F084C(uint64_t result)
{
  uint64_t v1 = result + 64;
  char v2 = *(_BYTE *)(result + 32);
  uint64_t v3 = 1LL << v2;
  uint64_t v4 = -1LL;
  if (1LL << v2 < 64) {
    uint64_t v4 = ~(-1LL << (1LL << v2));
  }
  unint64_t v5 = v4 & *(void *)(result + 64);
  if (v5)
  {
    uint64_t v6 = 0LL;
    unint64_t v7 = __clz(__rbit64(v5));
    unint64_t v8 = (v5 - 1) & v5;
    int64_t v9 = (unint64_t)(v3 + 63) >> 6;
  }

  else
  {
    LODWORD(v6) = v2 & 0x3F;
    int64_t v9 = (unint64_t)(v3 + 63) >> 6;
    unint64_t v17 = *(void *)(result + 72);
    if (v17)
    {
      uint64_t v6 = 1LL;
    }

    else
    {
      unint64_t v17 = *(void *)(result + 80);
      if (v17)
      {
        uint64_t v6 = 2LL;
      }

      else
      {
        unint64_t v17 = *(void *)(result + 88);
        if (v17)
        {
          uint64_t v6 = 3LL;
        }

        else
        {
LABEL_37:
          unint64_t v17 = *(void *)(result + 96);
          if (v17)
          {
            uint64_t v6 = 4LL;
          }

          else
          {
            unint64_t v17 = *(void *)(result + 104);
            if (!v17) {
              goto LABEL_43;
            }
            uint64_t v6 = 5LL;
          }
        }
      }
    }

uint64_t sub_1000F0A44@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v17 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (!v11) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1LL, 1LL, v4);
  }
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_10001DC4C(a1 + v12, (uint64_t)&v17 - v9, type metadata accessor for BeaconObservation);
  swift_bridgeObjectRetain(a1);
  uint64_t v13 = v11 - 1;
  if (v11 != 1)
  {
    uint64_t v15 = *(void *)(v5 + 72);
    uint64_t v16 = a1 + v15 + v12;
    do
    {
      sub_10001DC4C(v16, (uint64_t)v8, type metadata accessor for BeaconObservation);
      if ((static Date.< infix(_:_:)(&v10[*(int *)(v4 + 20)], &v8[*(int *)(v4 + 20)]) & 1) != 0)
      {
        sub_100018C68((uint64_t)v10, type metadata accessor for BeaconObservation);
        sub_10002218C((uint64_t)v8, (uint64_t)v10, type metadata accessor for BeaconObservation);
      }

      else
      {
        sub_100018C68((uint64_t)v8, type metadata accessor for BeaconObservation);
      }

      v16 += v15;
      --v13;
    }

    while (v13);
  }

  swift_bridgeObjectRelease();
  sub_10002218C((uint64_t)v10, a2, type metadata accessor for BeaconObservation);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(a2, 0LL, 1LL, v4);
}

uint64_t sub_1000F0BF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  unint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v17 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (!v11) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1LL, 1LL, v4);
  }
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_10001DC4C(a1 + v12, (uint64_t)&v17 - v9, type metadata accessor for BeaconEstimatedLocation);
  swift_bridgeObjectRetain(a1);
  uint64_t v13 = v11 - 1;
  if (v11 != 1)
  {
    uint64_t v15 = *(void *)(v5 + 72);
    uint64_t v16 = a1 + v15 + v12;
    do
    {
      sub_10001DC4C(v16, (uint64_t)v8, type metadata accessor for BeaconEstimatedLocation);
      if ((static Date.< infix(_:_:)(&v10[*(int *)(v4 + 40)], &v8[*(int *)(v4 + 40)]) & 1) != 0)
      {
        sub_100018C68((uint64_t)v10, type metadata accessor for BeaconEstimatedLocation);
        sub_10002218C((uint64_t)v8, (uint64_t)v10, type metadata accessor for BeaconEstimatedLocation);
      }

      else
      {
        sub_100018C68((uint64_t)v8, type metadata accessor for BeaconEstimatedLocation);
      }

      v16 += v15;
      --v13;
    }

    while (v13);
  }

  swift_bridgeObjectRelease();
  sub_10002218C((uint64_t)v10, a2, type metadata accessor for BeaconEstimatedLocation);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(a2, 0LL, 1LL, v4);
}

uint64_t sub_1000F0D9C@<X0>(uint64_t a1@<X0>, char *a2@<X8>)
{
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v30 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v30 - v8;
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  int64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v30 - v15;
  uint64_t v17 = *(void *)(a1 + 16);
  if (!v17)
  {
    uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
    v18(v9, 1LL, 1LL, v10);
    goto LABEL_7;
  }

  unint64_t v31 = (*(unsigned __int8 *)(v11 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v11 + 80);
  uint64_t v33 = *(void (**)(char *, unint64_t, uint64_t))(v11 + 16);
  v33(v9, a1 + v31, v10);
  uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v11 + 56);
  v18(v9, 0LL, 1LL, v10);
  uint64_t v35 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v11 + 48);
  if (v35(v9, 1LL, v10) == 1)
  {
LABEL_7:
    sub_100015794((uint64_t)v9, (uint64_t *)&unk_10099D720);
    char v23 = a2;
    uint64_t v24 = 1LL;
    return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v18)(v23, v24, 1LL, v10);
  }

  int v30 = a2;
  uint64_t v19 = *(void (**)(char *, char *, uint64_t))(v11 + 32);
  v19(v16, v9, v10);
  uint64_t v32 = a1;
  swift_bridgeObjectRetain(a1);
  uint64_t v20 = v17 - 1;
  uint64_t v21 = v33;
  if (v20)
  {
    uint64_t v34 = *(void *)(v11 + 72);
    unint64_t v26 = v32 + v34 + v31;
    while (1)
    {
      v21(v7, v26, v10);
      v18(v7, 0LL, 1LL, v10);
      if (v35(v7, 1LL, v10) == 1) {
        break;
      }
      v19(v14, v7, v10);
      uint64_t v27 = sub_1000F30E8(&qword_1009A1280, (uint64_t)&protocol conformance descriptor for Date);
      char v28 = dispatch thunk of static Comparable.< infix(_:_:)(v14, v16, v10, v27);
      uint64_t v29 = *(void (**)(char *, uint64_t))(v11 + 8);
      if ((v28 & 1) != 0)
      {
        v29(v16, v10);
        v19(v16, v14, v10);
      }

      else
      {
        v29(v14, v10);
      }

      v26 += v34;
      if (!--v20) {
        goto LABEL_4;
      }
    }
  }

  else
  {
LABEL_4:
    v18(v7, 1LL, 1LL, v10);
  }

  swift_bridgeObjectRelease(v32);
  sub_100015794((uint64_t)v7, (uint64_t *)&unk_10099D720);
  uint64_t v22 = v30;
  v19(v30, v16, v10);
  char v23 = v22;
  uint64_t v24 = 0LL;
  return ((uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))v18)(v23, v24, 1LL, v10);
}

uint64_t sub_1000F1084@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v17 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (!v11) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1LL, 1LL, v4);
  }
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_10001DC4C(a1 + v12, (uint64_t)&v17 - v9, type metadata accessor for BeaconEstimatedLocation);
  swift_bridgeObjectRetain(a1);
  uint64_t v13 = v11 - 1;
  if (v11 != 1)
  {
    uint64_t v15 = *(void *)(v5 + 72);
    uint64_t v16 = a1 + v15 + v12;
    do
    {
      sub_10001DC4C(v16, (uint64_t)v8, type metadata accessor for BeaconEstimatedLocation);
      if ((static Date.< infix(_:_:)(&v8[*(int *)(v4 + 40)], &v10[*(int *)(v4 + 40)]) & 1) != 0)
      {
        sub_100018C68((uint64_t)v10, type metadata accessor for BeaconEstimatedLocation);
        sub_10002218C((uint64_t)v8, (uint64_t)v10, type metadata accessor for BeaconEstimatedLocation);
      }

      else
      {
        sub_100018C68((uint64_t)v8, type metadata accessor for BeaconEstimatedLocation);
      }

      v16 += v15;
      --v13;
    }

    while (v13);
  }

  swift_bridgeObjectRelease();
  sub_10002218C((uint64_t)v10, a2, type metadata accessor for BeaconEstimatedLocation);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(a2, 0LL, 1LL, v4);
}

uint64_t sub_1000F1230@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v17 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (!v11) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v5 + 56))(a2, 1LL, 1LL, v4);
  }
  unint64_t v12 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  sub_10001DC4C(a1 + v12, (uint64_t)&v17 - v9, type metadata accessor for BeaconObservation);
  swift_bridgeObjectRetain(a1);
  uint64_t v13 = v11 - 1;
  if (v11 != 1)
  {
    uint64_t v15 = *(void *)(v5 + 72);
    uint64_t v16 = a1 + v15 + v12;
    do
    {
      sub_10001DC4C(v16, (uint64_t)v8, type metadata accessor for BeaconObservation);
      if ((static Date.< infix(_:_:)(&v8[*(int *)(v4 + 20)], &v10[*(int *)(v4 + 20)]) & 1) != 0)
      {
        sub_100018C68((uint64_t)v10, type metadata accessor for BeaconObservation);
        sub_10002218C((uint64_t)v8, (uint64_t)v10, type metadata accessor for BeaconObservation);
      }

      else
      {
        sub_100018C68((uint64_t)v8, type metadata accessor for BeaconObservation);
      }

      v16 += v15;
      --v13;
    }

    while (v13);
  }

  swift_bridgeObjectRelease();
  sub_10002218C((uint64_t)v10, a2, type metadata accessor for BeaconObservation);
  return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(a2, 0LL, 1LL, v4);
}

uint64_t sub_1000F13DC(uint64_t a1, uint64_t a2)
{
  return sub_1000F13F4(a1, a2, (void (*)(uint64_t))sub_1000F0564);
}

uint64_t sub_1000F13E8(uint64_t a1, uint64_t a2)
{
  return sub_1000F13F4(a1, a2, (void (*)(uint64_t))sub_1000F0D9C);
}

uint64_t sub_1000F13F4(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  unint64_t v4 = sub_1000F26E0();
  uint64_t v5 = sub_1000B88B0(v4);
  swift_bridgeObjectRelease();
  a3(v5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000F1450(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  unint64_t v4 = sub_1000F318C();
  uint64_t v5 = sub_1000B88B0(v4);
  swift_bridgeObjectRelease();
  a3(v5);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1000F14C4(char a1, char a2)
{
  if ((a2 & 1) != 0) {
    unsigned int v2 = 2;
  }
  else {
    unsigned int v2 = 3;
  }
  if ((a1 & 1) != 0) {
    return v2;
  }
  else {
    return (a2 & 1) == 0;
  }
}

uint64_t sub_1000F14EC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v60 = a1;
  uint64_t v61 = a2;
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v54 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v54 - v6;
  uint64_t v8 = type metadata accessor for Date(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v54 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v62 = (char *)&v54 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v57 = (char *)&v54 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v58 = (char *)&v54 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v54 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v59 = (char *)&v54 - v23;
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v54 - v24;
  unint64_t v26 = sub_1000F26E0();
  uint64_t v27 = sub_1000B88B0(v26);
  swift_bridgeObjectRelease();
  sub_1000F0D9C(v27, v7);
  swift_bridgeObjectRelease();
  char v28 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48);
  if (v28(v7, 1LL, v8) == 1)
  {
    uint64_t v5 = v7;
LABEL_5:
    uint64_t v32 = sub_100015794((uint64_t)v5, (uint64_t *)&unk_10099D720);
    uint64_t v33 = v62;
    Date.init()(v32);
    if (qword_10099B028 != -1) {
      swift_once(&qword_10099B028, sub_10000B224);
    }
    uint64_t v34 = type metadata accessor for Logger(0LL);
    sub_10000A720(v34, (uint64_t)qword_100A29E40);
    uint64_t v35 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 16))(v12, v33, v8);
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v37 = static os_log_type_t.default.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = (_DWORD *)swift_slowAlloc(22LL, -1LL);
      uint64_t v63 = swift_slowAlloc(64LL, -1LL);
      *uint64_t v38 = 136446466;
      __asm { BR              X10 }
    }

    (*(void (**)(char *, uint64_t))(v9 + 8))(v12, v8);

    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v9 + 32))(v61, v33, v8);
  }

  uint64_t v29 = *(void (**)(char *, char *, uint64_t))(v9 + 32);
  v29(v25, v7, v8);
  unint64_t v30 = sub_1000F26E0();
  uint64_t v31 = sub_1000B88B0(v30);
  swift_bridgeObjectRelease();
  sub_1000F0564(v31, v5);
  swift_bridgeObjectRelease();
  if (v28(v5, 1LL, v8) == 1)
  {
    (*(void (**)(char *, uint64_t))(v9 + 8))(v25, v8);
    goto LABEL_5;
  }

  uint64_t v39 = v59;
  v29(v59, v5, v8);
  sub_1000F2DE8(v60);
  if (v40 <= 1) {
    uint64_t v41 = 1LL;
  }
  else {
    uint64_t v41 = v40;
  }
  Date.addingTimeInterval(_:)(v40, 86400.0);
  double v42 = Date.timeIntervalSince(_:)(v39);
  int v43 = *(uint64_t (**)(char *, uint64_t))(v9 + 8);
  uint64_t v44 = v43(v21, v8);
  uint64_t v62 = (char *)v41;
  double v45 = v42 / (double)v41;
  int v46 = v58;
  Date.addingTimeInterval(_:)(v44, v45);
  if (qword_10099B028 != -1) {
    swift_once(&qword_10099B028, sub_10000B224);
  }
  uint64_t v47 = type metadata accessor for Logger(0LL);
  sub_10000A720(v47, (uint64_t)qword_100A29E40);
  uint64_t v48 = v57;
  uint64_t v49 = (*(uint64_t (**)(char *, char *, uint64_t))(v9 + 16))(v57, v46, v8);
  uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
  int v51 = static os_log_type_t.default.getter(v50);
  if (os_log_type_enabled(v50, (os_log_type_t)v51))
  {
    int v56 = v51;
    uint64_t v52 = (_DWORD *)swift_slowAlloc(52LL, -1LL);
    uint64_t v55 = swift_slowAlloc(64LL, -1LL);
    uint64_t v63 = v55;
    *uint64_t v52 = 136447234;
    __asm { BR              X10 }
  }

  v43(v48, v8);
  v43(v59, v8);
  v43(v25, v8);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v29)(v61, v46, v8);
}

uint64_t sub_1000F1D30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v61 = a1;
  uint64_t v62 = a4;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v55 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v55 - v10;
  uint64_t v12 = type metadata accessor for Date(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v59 = (char *)&v55 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v60 = (char *)&v55 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  int v56 = (char *)&v55 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v57 = (char *)&v55 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v24 = (char *)&v55 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v58 = (char *)&v55 - v26;
  __chkstk_darwin(v25);
  char v28 = (char *)&v55 - v27;
  (*(void (**)(uint64_t, uint64_t))(a3 + 24))(a2, a3);
  uint64_t v29 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48);
  if (v29(v11, 1LL, v12) == 1)
  {
    uint64_t v9 = v11;
LABEL_5:
    uint64_t v32 = sub_100015794((uint64_t)v9, (uint64_t *)&unk_10099D720);
    uint64_t v33 = v60;
    Date.init()(v32);
    uint64_t v34 = v59;
    if (qword_10099B028 != -1) {
      swift_once(&qword_10099B028, sub_10000B224);
    }
    uint64_t v35 = type metadata accessor for Logger(0LL);
    sub_10000A720(v35, (uint64_t)qword_100A29E40);
    uint64_t v36 = (*(uint64_t (**)(char *, char *, uint64_t))(v13 + 16))(v34, v33, v12);
    os_log_type_t v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.default.getter(v37);
    if (os_log_type_enabled(v37, v38))
    {
      uint64_t v39 = (_DWORD *)swift_slowAlloc(22LL, -1LL);
      uint64_t v58 = (char *)swift_slowAlloc(64LL, -1LL);
      uint64_t v63 = v58;
      *uint64_t v39 = 136446466;
      __asm { BR              X10 }
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v34, v12);

    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v13 + 32))(v62, v33, v12);
  }

  unint64_t v30 = v11;
  uint64_t v31 = *(void (**)(char *, char *, uint64_t))(v13 + 32);
  v31(v28, v30, v12);
  (*(void (**)(uint64_t, uint64_t))(a3 + 8))(a2, a3);
  if (v29(v9, 1LL, v12) == 1)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v28, v12);
    goto LABEL_5;
  }

  uint64_t v40 = v58;
  uint64_t v60 = (char *)v31;
  v31(v58, v9, v12);
  uint64_t v41 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(a3 + 72))(v61, a2, a3);
  if (v41 <= 1) {
    uint64_t v42 = 1LL;
  }
  else {
    uint64_t v42 = v41;
  }
  Date.addingTimeInterval(_:)(v41, 86400.0);
  double v43 = Date.timeIntervalSince(_:)(v40);
  uint64_t v44 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
  uint64_t v45 = v44(v24, v12);
  int v46 = v57;
  Date.addingTimeInterval(_:)(v45, v43 / (double)v42);
  if (qword_10099B028 != -1) {
    swift_once(&qword_10099B028, sub_10000B224);
  }
  uint64_t v47 = type metadata accessor for Logger(0LL);
  sub_10000A720(v47, (uint64_t)qword_100A29E40);
  uint64_t v48 = *(uint64_t (**)(char *, char *, uint64_t))(v13 + 16);
  uint64_t v49 = v56;
  uint64_t v50 = v48(v56, v46, v12);
  int v51 = (os_log_s *)Logger.logObject.getter(v50);
  os_log_type_t v52 = static os_log_type_t.default.getter(v51);
  if (os_log_type_enabled(v51, v52))
  {
    uint64_t v59 = v28;
    uint64_t v53 = (_DWORD *)swift_slowAlloc(52LL, -1LL);
    uint64_t v55 = swift_slowAlloc(64LL, -1LL);
    uint64_t v63 = (char *)v55;
    *uint64_t v53 = 136447234;
    __asm { BR              X10 }
  }

  v44(v49, v12);
  v44(v58, v12);
  v44(v28, v12);
  return ((uint64_t (*)(uint64_t, char *, uint64_t))v60)(v62, v46, v12);
}

uint64_t sub_1000F2554@<X0>(uint64_t a1@<X8>)
{
  id v2 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 objectForKey:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v9, v4);
    swift_unknownObjectRelease(v4);
  }

  else
  {
    memset(v9, 0, sizeof(v9));
  }

  sub_1000F3128((uint64_t)v9, (uint64_t)v10);
  if (v11)
  {
    uint64_t v5 = type metadata accessor for Date(0LL);
    int v6 = swift_dynamicCast(a1, v10, (char *)&type metadata for Any + 8, v5, 6LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))( a1,  v6 ^ 1u,  1LL,  v5);
  }

  else
  {
    sub_100015794((uint64_t)v10, &qword_10099E200);
    uint64_t v8 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))( a1,  1LL,  1LL,  v8);
  }

uint64_t sub_1000F26A0(uint64_t a1, uint64_t a2)
{
  return sub_1000F1450(a1, a2, (void (*)(uint64_t))sub_1000F0564);
}

uint64_t sub_1000F26BC(uint64_t a1, uint64_t a2)
{
  return sub_1000F1450(a1, a2, (void (*)(uint64_t))sub_1000F0D9C);
}

unint64_t sub_1000F26E0()
{
  id v0 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v6, v2);
    swift_unknownObjectRelease(v2);
  }

  else
  {
    memset(v6, 0, sizeof(v6));
  }

  sub_1000F3128((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    uint64_t v3 = sub_100004AEC(&qword_1009A1288);
  }

  else
  {
    sub_100015794((uint64_t)v7, &qword_10099E200);
  }

  return sub_100412710((uint64_t)_swiftEmptyArrayStorage);
}

void sub_1000F2800(char a1)
{
  __asm { BR              X10 }

double sub_1000F2834()
{
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  sub_1006A10A4(v3);
  double v1 = v0;
  swift_bridgeObjectRelease();
  return v1;
}

void sub_1000F29D8(char a1)
{
  unint64_t v2 = sub_1000F318C();
  double v3 = 0.0;
  double v4 = 0.0;
  if (*(void *)(v2 + 16))
  {
    uint64_t v5 = sub_10030CF14(0x4669577265776F70LL, 0xE900000000000069LL);
    if ((v6 & 1) != 0) {
      double v4 = (double)*(uint64_t *)(*(void *)(*(void *)(v2 + 56) + 8 * v5) + 16LL);
    }
  }

  sub_1000F2800(0);
  double v8 = v4 / v7;
  if (*(void *)(v2 + 16))
  {
    uint64_t v9 = sub_10030CF14(0x6C65437265776F70LL, 0xE90000000000006CLL);
    if ((v10 & 1) != 0) {
      double v3 = (double)*(uint64_t *)(*(void *)(*(void *)(v2 + 56) + 8 * v9) + 16LL);
    }
  }

  sub_1000F2800(1);
  double v12 = v8 + v3 / v11;
  double v13 = 0.0;
  if (*(void *)(v2 + 16))
  {
    uint64_t v14 = sub_10030CF14(0x5779726574746162LL, 0xEB00000000694669LL);
    if ((v15 & 1) != 0) {
      double v13 = (double)*(uint64_t *)(*(void *)(*(void *)(v2 + 56) + 8 * v14) + 16LL);
    }
  }

  sub_1000F2800(2);
  double v17 = v12 + v13 / v16;
  if (*(void *)(v2 + 16) && (uint64_t v18 = sub_10030CF14(0x4379726574746162LL, 0xEB000000006C6C65LL), (v19 & 1) != 0))
  {
    uint64_t v20 = *(void *)(*(void *)(v2 + 56) + 8 * v18);
    swift_bridgeObjectRetain(v20);
    swift_bridgeObjectRelease();
    uint64_t v21 = *(void *)(v20 + 16);
    swift_bridgeObjectRelease();
    double v22 = (double)v21;
  }

  else
  {
    swift_bridgeObjectRelease();
    double v22 = 0.0;
  }

  sub_1000F2800(3);
  double v24 = 24.0 - (v17 + v22 / v23);
  sub_1000F2800(a1);
  double v26 = v25 * v24;
  if ((~*(void *)&v26 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_19;
  }

  if (v26 <= -9.22337204e18)
  {
LABEL_19:
    __break(1u);
    goto LABEL_20;
  }

  if (v26 >= 9.22337204e18) {
LABEL_20:
  }
    __break(1u);
}

void sub_1000F2C10(char a1)
{
  __asm { BR              X10 }

double sub_1000F2C44()
{
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  sub_1006A10A4(v3);
  double v1 = v0;
  swift_bridgeObjectRelease();
  return v1;
}

void sub_1000F2DE8(char a1)
{
  unint64_t v2 = sub_1000F26E0();
  double v3 = 0.0;
  if (*(void *)(v2 + 16))
  {
    uint64_t v4 = sub_10030CF14(0x4669577265776F70LL, 0xE900000000000069LL);
    if ((v5 & 1) != 0) {
      double v3 = (double)*(uint64_t *)(*(void *)(*(void *)(v2 + 56) + 8 * v4) + 16LL);
    }
  }

  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  sub_1006A10A4(v30);
  double v7 = v6;
  swift_bridgeObjectRelease();
  double v8 = 0.0;
  double v9 = 0.0;
  double v10 = v3 / v7;
  if (*(void *)(v2 + 16))
  {
    uint64_t v11 = sub_10030CF14(0x6C65437265776F70LL, 0xE90000000000006CLL);
    if ((v12 & 1) != 0) {
      double v9 = (double)*(uint64_t *)(*(void *)(*(void *)(v2 + 56) + 8 * v11) + 16LL);
    }
  }

  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  sub_1006A10B0(v30);
  double v14 = v13;
  swift_bridgeObjectRelease();
  double v15 = v10 + v9 / v14;
  if (*(void *)(v2 + 16))
  {
    uint64_t v16 = sub_10030CF14(0x5779726574746162LL, 0xEB00000000694669LL);
    if ((v17 & 1) != 0) {
      double v8 = (double)*(uint64_t *)(*(void *)(*(void *)(v2 + 56) + 8 * v16) + 16LL);
    }
  }

  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  sub_1006A10BC(v30);
  double v19 = v18;
  swift_bridgeObjectRelease();
  double v20 = v15 + v8 / v19;
  if (*(void *)(v2 + 16) && (uint64_t v21 = sub_10030CF14(0x4379726574746162LL, 0xEB000000006C6C65LL), (v22 & 1) != 0))
  {
    uint64_t v23 = *(void *)(*(void *)(v2 + 56) + 8 * v21);
    swift_bridgeObjectRetain(v23);
    swift_bridgeObjectRelease();
    uint64_t v24 = *(void *)(v23 + 16);
    swift_bridgeObjectRelease();
    double v25 = (double)v24;
  }

  else
  {
    swift_bridgeObjectRelease();
    double v25 = 0.0;
  }

  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  sub_1006A10C8(v30);
  double v27 = v26;
  swift_bridgeObjectRelease();
  sub_1000F2C10(a1);
  double v29 = v28 * (24.0 - (v20 + v25 / v27));
  if ((~*(void *)&v29 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_21;
  }

  if (v29 <= -9.22337204e18)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  if (v29 >= 9.22337204e18) {
LABEL_22:
  }
    __break(1u);
}

uint64_t sub_1000F30E8(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for Date(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t sub_1000F3128(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099E200);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1000F3170()
{
  return sub_1000F318C();
}

unint64_t sub_1000F318C()
{
  id v0 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v1 = String._bridgeToObjectiveC()();
  id v2 = [v0 objectForKey:v1];

  if (v2)
  {
    _bridgeAnyObjectToAny(_:)(v6, v2);
    swift_unknownObjectRelease(v2);
  }

  else
  {
    memset(v6, 0, sizeof(v6));
  }

  sub_1000F3128((uint64_t)v6, (uint64_t)v7);
  if (v8)
  {
    uint64_t v3 = sub_100004AEC(&qword_1009A1288);
  }

  else
  {
    sub_100015794((uint64_t)v7, &qword_10099E200);
  }

  return sub_100412710((uint64_t)_swiftEmptyArrayStorage);
}

void sub_1000F32A4(char a1)
{
  __asm { BR              X10 }

ValueMetadata *sub_1000F32CC()
{
  return &type metadata for AccessoryGenericPayload;
}

void sub_1000F32EC()
{
}

void sub_1000F32FC()
{
}

void sub_1000F330C()
{
}

void sub_1000F331C()
{
}

void sub_1000F332C()
{
}

void sub_1000F333C()
{
}

void sub_1000F334C()
{
}

uint64_t sub_1000F335C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_1000F3398 + 4 * byte_1007EC883[a1]))( 0x7453646E756F732ELL,  0xEB00000000747261LL);
}

  ;
}

unint64_t sub_1000F33A4()
{
  return 0xD00000000000001BLL;
}

uint64_t sub_1000F3564(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)())((char *)sub_1000F3590 + 4
                                                * byte_1007EC896[(a4 >> 59) & 6 | ((a2 & 0x2000000000000000LL) != 0)]))();
}

uint64_t sub_1000F3590()
{
  return 10LL;
}

uint64_t sub_1000F3598()
{
  return 14LL;
}

uint64_t sub_1000F35A0()
{
  return 17LL;
}

uint64_t sub_1000F35A8()
{
  return 9LL;
}

uint64_t sub_1000F35B0()
{
  return 11LL;
}

uint64_t sub_1000F35BC()
{
  return 13LL;
}

void sub_1000F37A0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  __asm { BR              X10 }

unint64_t sub_1000F37E8()
{
  *(void *)(v0 + 24) = &type metadata for AccessorySetMaxConnectionsPayload;
  unint64_t result = sub_1000F4FBC();
  *(void *)(v0 + 32) = result;
  *(_BYTE *)uint64_t v0 = v1;
  return result;
}

__int16 *sub_1000F3A98(void *a1)
{
  unint64_t result = sub_1000F4AE8(a1);
  if (v1) {
    return (__int16 *)v3;
  }
  return result;
}

uint64_t sub_1000F3AC0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  uint64_t v23 = type metadata accessor for Endianness(0LL);
  uint64_t v10 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  char v12 = (char *)v22 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v14);
  dispatch thunk of BinaryEncoding.container()(v26, v14, v13);
  v22[1] = a2;
  v22[2] = a3;
  v22[3] = a4;
  __int128 v22[4] = a5;
  uint64_t v15 = sub_1000F3564(a2, a3, a4, a5);
  char v16 = v15;
  LOWORD(v24) = word_1007ECA06[v15];
  static Endianness.current.getter(v15);
  unint64_t v17 = sub_1000F4D24();
  FixedWidthInteger.convert(to:)(&v25, v12, &type metadata for UInt16, v17);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v23);
  LOWORD(v24) = v25;
  uint64_t v18 = v27;
  uint64_t v19 = v28;
  sub_100037298((uint64_t)v26, v27);
  uint64_t v20 = v29;
  dispatch thunk of BinaryEncodingContaining.encode<A>(_:)(&v24, &type metadata for UInt16, v17, v18, v19);
  if (!v20) {
    __asm { BR              X10 }
  }

  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v26);
}

__int16 *sub_1000F4018@<X0>(void *a1@<X0>, __int16 **a2@<X8>)
{
  unint64_t result = sub_1000F3A98(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }

  return result;
}

uint64_t sub_1000F4044(void *a1)
{
  return sub_1000F3AC0(a1, *(void *)v1, *(void *)(v1 + 8), *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1000F4060(__int16 a1)
{
  else {
    return byte_1007ECA2C[(__int16)(a1 - 512)];
  }
}

uint64_t destroy for AccessoryConfigCommand(uint64_t a1)
{
  return sub_1000F40B4(*(void *)a1, *(void *)(a1 + 8), *(void *)(a1 + 16), *(void *)(a1 + 24), sub_100016F9C);
}

uint64_t sub_1000F40B4( uint64_t result, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t (*a5)(uint64_t, unint64_t))
{
  int v5 = (a4 >> 59) & 6 | ((a2 & 0x2000000000000000LL) != 0);
  if (v5 == 6 || v5 == 4) {
    return a5(result, a2 & 0xDFFFFFFFFFFFFFFFLL);
  }
  if (v5 == 1)
  {
    unint64_t v7 = a4 & 0xCFFFFFFFFFFFFFFFLL;
    a5(result, a2 & 0xDFFFFFFFFFFFFFFFLL);
    return a5(a3, v7);
  }

  return result;
}

uint64_t *initializeWithCopy for AccessoryConfigCommand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  sub_1000F40B4(*a2, v4, v5, v6, sub_10001736C);
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  return a1;
}

uint64_t *assignWithCopy for AccessoryConfigCommand(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a2[2];
  unint64_t v6 = a2[3];
  sub_1000F40B4(*a2, v4, v5, v6, sub_10001736C);
  uint64_t v7 = *a1;
  uint64_t v8 = a1[1];
  uint64_t v9 = a1[2];
  unint64_t v10 = a1[3];
  *a1 = v3;
  a1[1] = v4;
  a1[2] = v5;
  a1[3] = v6;
  sub_1000F40B4(v7, v8, v9, v10, sub_100016F9C);
  return a1;
}

__n128 initializeWithTake for FeatureSupportMatrixProductType(_OWORD *a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *a1 = *(_OWORD *)a2;
  a1[1] = v3;
  return result;
}

uint64_t *assignWithTake for AccessoryConfigCommand(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v4 = a1[2];
  unint64_t v6 = a1[3];
  __int128 v7 = a2[1];
  *(_OWORD *)a1 = *a2;
  *((_OWORD *)a1 + 1) = v7;
  sub_1000F40B4(v3, v5, v4, v6, sub_100016F9C);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryConfigCommand(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 9 && *(_BYTE *)(a1 + 32)) {
    return (*(_DWORD *)a1 + 9);
  }
  unsigned int v3 = ((((*(void *)(a1 + 24) >> 58) & 0xC | (*(void *)(a1 + 8) >> 60) & 2) >> 1) & 0xFFFFFFF7 | (8 * ((*(void *)(a1 + 8) & 0x1000000000000000LL) != 0))) ^ 0xF;
  if (v3 >= 8) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AccessoryConfigCommand( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 8)
  {
    *(void *)(result + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)__n128 result = a2 - 9;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 9) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if (a3 >= 9) {
      *(_BYTE *)(result + 32) = 0;
    }
    if (a2)
    {
      *(void *)__n128 result = 0LL;
      *(void *)(result + 8) = (unint64_t)((-2 * (_BYTE)a2) & 2 | 1u) << 60;
      *(void *)(result + 16) = 0LL;
      *(void *)(result + 24) = ((unint64_t)((-2 * a2) & 0x1E | 1) << 58) & 0x3000000000000000LL;
    }
  }

  return result;
}

uint64_t sub_1000F430C(uint64_t a1)
{
  unsigned int v1 = (*(void *)(a1 + 24) >> 59) & 6 | ((*(void *)(a1 + 8) & 0x2000000000000000LL) != 0);
  if (v1 == 7) {
    return (*(_DWORD *)a1 + 7);
  }
  else {
    return v1;
  }
}

uint64_t sub_1000F4338(uint64_t result)
{
  unint64_t v1 = *(void *)(result + 24) & 0xCFFFFFFFFFFFFFFFLL;
  *(void *)(result + 8) &= ~0x2000000000000000uLL;
  *(void *)(result + 24) = v1;
  return result;
}

void *sub_1000F4354(void *result, unsigned int a2)
{
  if (a2 < 7)
  {
    unint64_t v2 = result[3] & 0xCFFFFFFFFFFFFFFFLL | ((((unint64_t)a2 >> 1) & 3) << 60);
    result[1] = result[1] & 0xCFFFFFFFFFFFFFFFLL | ((unint64_t)(a2 & 1) << 61);
    result[3] = v2;
  }

  else
  {
    *__n128 result = a2 - 7;
    *(_OWORD *)(result + 1) = xmmword_1007ECA40;
    result[3] = 0x3000000000000000LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for AccessoryConfigCommand()
{
  return &type metadata for AccessoryConfigCommand;
}

void sub_1000F43B0(char a1, uint64_t a2)
{
  uint64_t v4 = v3;
  uint64_t v5 = v9;
  unint64_t v6 = sub_100012ED8(v8, v9);
  uint64_t DynamicType = swift_getDynamicType(v6, v5, 1LL);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
  if (v4 == DynamicType) {
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1000F4A9CLL);
}

__int16 *sub_1000F4AE8(void *a1)
{
  uint64_t v3 = type metadata accessor for Endianness(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v26[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  sub_100012ED8(a1, v7);
  dispatch thunk of BinaryDecoding.container()(v28, v7, v8);
  uint64_t v9 = v29;
  uint64_t v10 = v30;
  uint64_t v11 = (__int16 *)sub_100037298((uint64_t)v28, v29);
  unint64_t v12 = sub_1000F4D24();
  uint64_t v13 = dispatch thunk of BinaryDecodingContaining.decode<A>(_:)( v26,  &type metadata for UInt16,  &type metadata for UInt16,  v12,  v9,  v10);
  if (v1) {
    goto LABEL_5;
  }
  __int16 v31 = v26[0];
  static Endianness.current.getter(v13);
  uint64_t v11 = &v31;
  FixedWidthInteger.convert(to:)(v27, v6, &type metadata for UInt16, v12);
  (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
  char v14 = sub_1000F4060(v27[0]);
  if (v14 == 19)
  {
    unint64_t v15 = sub_1000F4D68();
    uint64_t v16 = swift_allocError(&type metadata for AccessoryConfigCommand.AccessoryConfigCommandError, v15, 0LL, 0LL);
    *unint64_t v17 = 1;
    swift_willThrow(v16);
LABEL_5:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    return v11;
  }

  char v18 = v14;
  sub_1000F32A4(v14);
  uint64_t v20 = v19;
  uint64_t v22 = v21;
  sub_100013044((uint64_t)a1, (uint64_t)v26);
  v27[3] = v20;
  v27[4] = v22;
  sub_10000A7C8(v27);
  dispatch thunk of BinaryDecodable.init(from:)(v26, v20, *(void *)(v22 + 8));
  sub_100013044((uint64_t)v27, (uint64_t)v26);
  sub_1000F43B0(v18, (uint64_t)v26);
  uint64_t v11 = v24;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v28);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v11;
}

unint64_t sub_1000F4D24()
{
  unint64_t result = qword_1009A1290;
  if (!qword_1009A1290)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UInt16, &type metadata for UInt16);
    atomic_store(result, (unint64_t *)&qword_1009A1290);
  }

  return result;
}

unint64_t sub_1000F4D68()
{
  unint64_t result = qword_1009A1298;
  if (!qword_1009A1298)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007EC9C4,  &type metadata for AccessoryConfigCommand.AccessoryConfigCommandError);
    atomic_store(result, (unint64_t *)&qword_1009A1298);
  }

  return result;
}

void *sub_1000F4DAC(void *result)
{
  uint64_t v1 = *(void *)(result[3] - 8LL);
  if ((*(_DWORD *)(v1 + 80) & 0x20000) != 0) {
    return (void *)swift_slowDealloc( *result,  *(void *)(v1 + 64)
  }
                     + ((*(_DWORD *)(v1 + 80) + 16LL) & ~(unint64_t)*(_DWORD *)(v1 + 80)),
                       *(_DWORD *)(v1 + 80) | 7LL);
  return result;
}

unint64_t sub_1000F4DE0()
{
  unint64_t result = qword_1009A12A8;
  if (!qword_1009A12A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FB4E8, &type metadata for AccessoryGenericPayload);
    atomic_store(result, (unint64_t *)&qword_1009A12A8);
  }

  return result;
}

unint64_t sub_1000F4E24()
{
  unint64_t result = qword_1009A12B0;
  if (!qword_1009A12B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008064C0, &type metadata for AccessoryTXPowerResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009A12B0);
  }

  return result;
}

unint64_t sub_1000F4E68()
{
  unint64_t result = qword_1009A12B8;
  if (!qword_1009A12B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10081893C, &type metadata for AccessoryStartAggressiveAdvertisingPayload);
    atomic_store(result, (unint64_t *)&qword_1009A12B8);
  }

  return result;
}

unint64_t sub_1000F4EAC()
{
  unint64_t result = qword_1009A12C0;
  if (!qword_1009A12C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080B87C, &type metadata for AccessoryLatchSeparatedKeyResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009A12C0);
  }

  return result;
}

unint64_t sub_1000F4EF0()
{
  unint64_t result = qword_1009A12C8;
  if (!qword_1009A12C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F76C4, &type metadata for AccessoryMultistatusResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009A12C8);
  }

  return result;
}

unint64_t sub_1000F4F34()
{
  unint64_t result = qword_1009A12D0;
  if (!qword_1009A12D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE56C, &type metadata for AccessoryCommandResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009A12D0);
  }

  return result;
}

unint64_t sub_1000F4F78()
{
  unint64_t result = qword_1009A12D8;
  if (!qword_1009A12D8)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080C694, &type metadata for AccessoryKeyrollIndicationPayload);
    atomic_store(result, (unint64_t *)&qword_1009A12D8);
  }

  return result;
}

unint64_t sub_1000F4FBC()
{
  unint64_t result = qword_1009A12E0;
  if (!qword_1009A12E0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100807074, &type metadata for AccessorySetMaxConnectionsPayload);
    atomic_store(result, (unint64_t *)&qword_1009A12E0);
  }

  return result;
}

unint64_t sub_1000F5000()
{
  unint64_t result = qword_1009A12E8;
  if (!qword_1009A12E8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FB4C0, &type metadata for AccessoryGenericPayload);
    atomic_store(result, (unint64_t *)&qword_1009A12E8);
  }

  return result;
}

unint64_t sub_1000F5044()
{
  unint64_t result = qword_1009A12F0;
  if (!qword_1009A12F0)
  {
    unint64_t result = swift_getWitnessTable(&unk_100806498, &type metadata for AccessoryTXPowerResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009A12F0);
  }

  return result;
}

unint64_t sub_1000F5088()
{
  unint64_t result = qword_1009A12F8;
  if (!qword_1009A12F8)
  {
    unint64_t result = swift_getWitnessTable(&unk_100818914, &type metadata for AccessoryStartAggressiveAdvertisingPayload);
    atomic_store(result, (unint64_t *)&qword_1009A12F8);
  }

  return result;
}

unint64_t sub_1000F50CC()
{
  unint64_t result = qword_1009A1300;
  if (!qword_1009A1300)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080B854, &type metadata for AccessoryLatchSeparatedKeyResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009A1300);
  }

  return result;
}

unint64_t sub_1000F5110()
{
  unint64_t result = qword_1009A1308;
  if (!qword_1009A1308)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F769C, &type metadata for AccessoryMultistatusResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009A1308);
  }

  return result;
}

unint64_t sub_1000F5154()
{
  unint64_t result = qword_1009A1310;
  if (!qword_1009A1310)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE544, &type metadata for AccessoryCommandResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009A1310);
  }

  return result;
}

unint64_t sub_1000F5198()
{
  unint64_t result = qword_1009A1318;
  if (!qword_1009A1318)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080C66C, &type metadata for AccessoryKeyrollIndicationPayload);
    atomic_store(result, (unint64_t *)&qword_1009A1318);
  }

  return result;
}

unint64_t sub_1000F51DC()
{
  unint64_t result = qword_1009A1320;
  if (!qword_1009A1320)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080704C, &type metadata for AccessorySetMaxConnectionsPayload);
    atomic_store(result, (unint64_t *)&qword_1009A1320);
  }

  return result;
}

uint64_t sub_1000F5220()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t storeEnumTagSinglePayload for AccessoryConfigCommand.AccessoryConfigCommandError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1000F5298 + 4 * byte_1007EC8BE[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1000F52CC + 4 * byte_1007EC8B9[v4]))();
}

uint64_t sub_1000F52CC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F52D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1000F52DCLL);
  }
  return result;
}

uint64_t sub_1000F52E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1000F52F0LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1000F52F4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1000F52FC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryConfigCommand.AccessoryConfigCommandError()
{
  return &type metadata for AccessoryConfigCommand.AccessoryConfigCommandError;
}

unint64_t sub_1000F531C()
{
  unint64_t result = qword_1009A1328;
  if (!qword_1009A1328)
  {
    unint64_t result = swift_getWitnessTable( &unk_1007EC99C,  &type metadata for AccessoryConfigCommand.AccessoryConfigCommandError);
    atomic_store(result, (unint64_t *)&qword_1009A1328);
  }

  return result;
}

uint64_t *initializeBufferWithCopyOfBuffer for AccessoryProductData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_10001736C(*a2, v4);
  *a1 = v3;
  a1[1] = v4;
  return a1;
}

uint64_t *assignWithCopy for AccessoryProductData(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  unint64_t v4 = a2[1];
  sub_10001736C(*a2, v4);
  uint64_t v5 = *a1;
  unint64_t v6 = a1[1];
  *a1 = v3;
  a1[1] = v4;
  sub_100016F9C(v5, v6);
  return a1;
}

uint64_t *assignWithTake for AccessoryProductData(uint64_t *a1, _OWORD *a2)
{
  uint64_t v3 = *a1;
  unint64_t v4 = a1[1];
  *(_OWORD *)a1 = *a2;
  sub_100016F9C(v3, v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for AccessoryProductData(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xD && *(_BYTE *)(a1 + 16)) {
    return (*(_DWORD *)a1 + 13);
  }
  unsigned int v3 = (((*(void *)(a1 + 8) >> 60) >> 2) & 0xFFFFFFF3 | (4 * ((*(void *)(a1 + 8) >> 60) & 3))) ^ 0xF;
  if (v3 >= 0xC) {
    unsigned int v3 = -1;
  }
  return v3 + 1;
}

uint64_t storeEnumTagSinglePayload for AccessoryProductData(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xC)
  {
    *(void *)unint64_t result = a2 - 13;
    *(void *)(result + 8) = 0LL;
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 16) = 1;
    }
  }

  else
  {
    if (a3 >= 0xD) {
      *(_BYTE *)(result + 16) = 0;
    }
    if (a2)
    {
      *(void *)unint64_t result = 0LL;
      *(void *)(result + 8) = (unint64_t)(((-a2 >> 2) & 3) - 4 * a2) << 60;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AccessoryProductData()
{
  return &type metadata for AccessoryProductData;
}

void sub_1000F54C8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for Endianness(0LL);
  __chkstk_darwin(v3);
  __asm { BR              X11 }

uint64_t sub_1000F5538()
{
  uint64_t v4 = ((uint64_t (*)(void, uint64_t, uint64_t, uint64_t))Data.subdata(in:))( 0LL,  (uint64_t)BYTE6(v1) >> 1,  v2,  v1);
  uint64_t v6 = v5;
  static Endianness.current.getter(v4);
  sub_100018B30();
  FixedWidthInteger.init(data:ofEndianness:)((void *)(v3 - 40), v4, v6, v0);
  if (*(_BYTE *)(v3 - 36)) {
    return 0LL;
  }
  else {
    return *(int *)(v3 - 40);
  }
}

uint64_t sub_1000F55FC(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void, void, uint64_t, unint64_t))((char *)&loc_1000F5614
                                                                            + *((int *)qword_1000F5688 + (a2 >> 62))))( 0LL,  0LL,  a1,  a2);
}

uint64_t sub_1000F5628(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if (BYTE6(a4) < (uint64_t)(BYTE6(a4) >> 1))
  {
    __break(1u);
    JUMPOUT(0x1000F5680LL);
  }

  return Data.subdata(in:)();
}

uint64_t sub_1000F5698(uint64_t a1, unint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v29 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Endianness(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = 0LL;
  unint64_t v32 = 0xE000000000000000LL;
  _StringGuts.grow(_:)(57LL);
  v11._countAndFlagsBits = 0x49726F646E65763CLL;
  v11._object = (void *)0xEB00000000203A64LL;
  String.append(_:)(v11);
  sub_1000F54C8(a1, a2);
  *(void *)&__int128 v30 = v12;
  v13._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v13);
  swift_bridgeObjectRelease();
  v14._countAndFlagsBits = 0x746375646F727020LL;
  v14._object = (void *)0xEC000000203A6449LL;
  String.append(_:)(v14);
  uint64_t v15 = sub_1000F55FC(a1, a2);
  uint64_t v17 = v16;
  static Endianness.current.getter(v15);
  sub_100018B30();
  FixedWidthInteger.init(data:ofEndianness:)(&v30, v15, v17, v10);
  uint64_t v18 = (int)v30;
  if (BYTE4(v30)) {
    uint64_t v18 = 0LL;
  }
  *(void *)&__int128 v30 = v18;
  v19._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v19);
  swift_bridgeObjectRelease();
  v20._object = (void *)0xEB00000000203A65LL;
  v20._countAndFlagsBits = 0x756C615677617220LL;
  String.append(_:)(v20);
  v21._countAndFlagsBits = Data.hexString.getter(a1, a2);
  String.append(_:)(v21);
  swift_bridgeObjectRelease();
  v22._countAndFlagsBits = 0x746375646F727020LL;
  v22._object = (void *)0xEE00203A44495555LL;
  String.append(_:)(v22);
  if (qword_10099B108 != -1) {
    swift_once(&qword_10099B108, sub_1000F5DDC);
  }
  __int128 v30 = xmmword_1009A1330;
  sub_10001736C(xmmword_1009A1330, *((unint64_t *)&xmmword_1009A1330 + 1));
  Data.append(_:)(a1, a2);
  __int128 v23 = v30;
  __int128 v29 = v30;
  unint64_t v24 = sub_100042F34();
  DataProtocol.stableUUID.getter(&type metadata for Data, v24);
  sub_100016F9C(v23, *((unint64_t *)&v23 + 1));
  unint64_t v25 = sub_1000F620C();
  v26._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v4, v25);
  String.append(_:)(v26);
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  v27._countAndFlagsBits = 62LL;
  v27._object = (void *)0xE100000000000000LL;
  String.append(_:)(v27);
  return v31;
}

uint64_t sub_1000F5990(void *a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100004AEC(&qword_1009A1370);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100012ED8(a1, v10);
  unint64_t v12 = sub_1000F63F8();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AccessoryProductData.CodingKeys,  &type metadata for AccessoryProductData.CodingKeys,  v12,  v10,  v11);
  v16[0] = a2;
  v16[1] = a3;
  unint64_t v13 = sub_1000170A4();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v16, v14, v6, &type metadata for Data, v13);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_1000F5A94()
{
  return 0x65756C6156776172LL;
}

uint64_t sub_1000F5AAC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x65756C6156776172LL && a2 == 0xE800000000000000LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xE800000000000000LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65756C6156776172LL, 0xE800000000000000LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_1000F5B40(uint64_t a1)
{
  unint64_t v2 = sub_1000F63F8();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1000F5B68(uint64_t a1)
{
  unint64_t v2 = sub_1000F63F8();
  return CodingKey.debugDescription.getter(a1, v2);
}

void sub_1000F5B90(uint64_t *a1@<X0>, void *a2@<X8>)
{
  *a2 = v3;
  a2[1] = v4;
}

uint64_t sub_1000F5BBC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  *a1 = *v1;
  a1[1] = v3;
  return sub_10001736C(v2, v3);
}

void *sub_1000F5BC8@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t result = sub_1000F62D4(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

uint64_t sub_1000F5BF0(void *a1)
{
  return sub_1000F5990(a1, *v1, v1[1]);
}

Swift::Int sub_1000F5C08()
{
  uint64_t v1 = *v0;
  unint64_t v2 = v0[1];
  Hasher.init(_seed:)(v4, 0LL);
  sub_10001736C(v1, v2);
  Data.hash(into:)(v4, v1, v2);
  sub_100016F9C(v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1000F5C68(uint64_t a1)
{
  uint64_t v4 = *v1;
  unint64_t v3 = v1[1];
  sub_10001736C(v4, v3);
  Data.hash(into:)(a1, v4, v3);
  return sub_100016F9C(v4, v3);
}

Swift::Int sub_1000F5CB4(uint64_t a1)
{
  uint64_t v2 = *v1;
  unint64_t v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  sub_10001736C(v2, v3);
  Data.hash(into:)(v5, v2, v3);
  sub_100016F9C(v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_1000F5D10()
{
  return sub_1000F5698(*(void *)v0, *(void *)(v0 + 8));
}

uint64_t sub_1000F5D18(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = *a1;
  unint64_t v3 = a1[1];
  uint64_t v4 = *a2;
  unint64_t v5 = a2[1];
  sub_10001736C(*a1, v3);
  sub_10001736C(v4, v5);
  _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v2, v3);
  char v7 = v6;
  sub_100016F9C(v4, v5);
  sub_100016F9C(v2, v3);
  return v7 & 1;
}

unint64_t sub_1000F5D98()
{
  unint64_t result = qword_1009A1358;
  if (!qword_1009A1358)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ECA88, &type metadata for AccessoryProductData);
    atomic_store(result, (unint64_t *)&qword_1009A1358);
  }

  return result;
}

uint64_t sub_1000F5DDC()
{
  uint64_t v0 = type metadata accessor for UUID(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  unint64_t v3 = (char *)&v9 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = UUID.init(uuid:)(113LL, 248LL, 20LL, 73LL, 47LL, 84LL, 72LL, 29LL, 0x8F67B3C3EE7C3D93LL);
  uint64_t v5 = UUID.data.getter(v4);
  uint64_t v7 = v6;
  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v3, v0);
  qword_1009A1330 = v5;
  *(void *)algn_1009A1338 = v7;
  return result;
}

uint64_t sub_1000F5EA8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_1009A1340);
  sub_10000A720(v0, (uint64_t)qword_1009A1340);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000014LL,  0x80000001008544F0LL);
}

uint64_t sub_1000F5F2C(uint64_t a1, uint64_t a2)
{
  if (a1 == (int)a1)
  {
    if (a2 == (int)a2)
    {
      unint64_t v10 = sub_100018B30();
      uint64_t v16 = FixedWidthInteger.data.getter(&type metadata for Int32, v10);
      unint64_t v17 = v11;
      int v15 = a2;
      uint64_t v12 = FixedWidthInteger.data.getter(&type metadata for Int32, v10);
      unint64_t v14 = v13;
      Data.append(_:)(v12, v13);
      sub_100016F9C(v12, v14);
      __asm { BR              X10 }
    }

    if (qword_10099B6A0 != -1) {
      swift_once(&qword_10099B6A0, sub_100626B90);
    }
    uint64_t v16 = 0x7365547265646E75LL;
    unint64_t v17 = 0xE900000000000074LL;
  }

  else
  {
    if (qword_10099B6A0 != -1) {
      swift_once(&qword_10099B6A0, sub_100626B90);
    }
    uint64_t v16 = 0x7365547265646E75LL;
    unint64_t v17 = 0xE900000000000074LL;
  }

  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v15, &v16, sub_10000A71C, 0LL, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if ((v15 & 1) == 0)
  {
    if (qword_10099B110 != -1) {
      swift_once(&qword_10099B110, sub_1000F5EA8);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_1009A1340);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.fault.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = swift_slowAlloc(22LL, -1LL);
      *(_DWORD *)uint64_t v8 = 134218240;
      uint64_t v16 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v8 + 4, v8 + 12);
      *(_WORD *)(v8 + 12) = 2048;
      uint64_t v16 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v16, &v17, v8 + 14, v8 + 22);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Invalid vendorId: %ld productId: %ld", (uint8_t *)v8, 0x16u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }
  }

  return 0LL;
}

unint64_t sub_1000F620C()
{
  unint64_t result = qword_10099DFD0[0];
  if (!qword_10099DFD0[0])
  {
    uint64_t v1 = type metadata accessor for UUID(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, qword_10099DFD0);
  }

  return result;
}

void sub_1000F6254(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_1000F6278(uint64_t result, unint64_t a2)
{
  if (BYTE6(a2) != 8LL)
  {
    sub_100016F9C(result, a2);
    return 0LL;
  }

  return result;
}

void *sub_1000F62D4(void *a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009A1360);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = a1[3];
  uint64_t v8 = a1[4];
  uint64_t v9 = sub_100012ED8(a1, v7);
  unint64_t v10 = sub_1000F63F8();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AccessoryProductData.CodingKeys,  &type metadata for AccessoryProductData.CodingKeys,  v10,  v7,  v8);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    unint64_t v11 = sub_100016FE0();
    KeyedDecodingContainer.decode<A>(_:forKey:)(&v14, &type metadata for Data, v12, v3, &type metadata for Data, v11);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    uint64_t v9 = v14;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  return v9;
}

unint64_t sub_1000F63F8()
{
  unint64_t result = qword_1009A1368;
  if (!qword_1009A1368)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ECC64, &type metadata for AccessoryProductData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1368);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for AccessoryProductData.CodingKeys(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1000F647C + 4 * byte_1007ECA60[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1000F649C + 4 * byte_1007ECA65[v4]))();
  }
}

_BYTE *sub_1000F647C(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1000F649C(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000F64A4(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000F64AC(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1000F64B4(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1000F64BC(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryProductData.CodingKeys()
{
  return &type metadata for AccessoryProductData.CodingKeys;
}

unint64_t sub_1000F64DC()
{
  unint64_t result = qword_1009A1378;
  if (!qword_1009A1378)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ECC3C, &type metadata for AccessoryProductData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1378);
  }

  return result;
}

unint64_t sub_1000F6524()
{
  unint64_t result = qword_1009A1380;
  if (!qword_1009A1380)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ECBAC, &type metadata for AccessoryProductData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1380);
  }

  return result;
}

unint64_t sub_1000F656C()
{
  unint64_t result = qword_1009A1388;
  if (!qword_1009A1388)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ECBD4, &type metadata for AccessoryProductData.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1388);
  }

  return result;
}

uint64_t sub_1000F65B4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) == 0)
  {
    *(_BYTE *)a1 = *(_BYTE *)a2;
    uint64_t v5 = a2[2];
    *(void *)(a1 + 8) = a2[1];
    *(void *)(a1 + 16) = v5;
    uint64_t v6 = *(int *)(a3 + 24);
    uint64_t v7 = (uint64_t *)(a1 + v6);
    uint64_t v8 = (uint64_t)a2 + v6;
    uint64_t v9 = *(uint64_t *)((char *)a2 + v6);
    unint64_t v10 = *(uint64_t *)((char *)a2 + v6 + 8);
    swift_bridgeObjectRetain(v5);
    sub_10001736C(v9, v10);
    *uint64_t v7 = v9;
    v7[1] = v10;
    uint64_t v11 = type metadata accessor for OwnedBeaconRecord(0LL);
    uint64_t v12 = *(int *)(v11 + 20);
    unint64_t v13 = (char *)v7 + v12;
    uint64_t v14 = v8 + v12;
    uint64_t v15 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
    uint64_t v16 = v8 + *(int *)(v11 + 24);
    uint64_t v21 = type metadata accessor for StableIdentifier(0LL);
    unint64_t v17 = (char *)&loc_1000F66A8 + 4 * byte_1007ECCC0[swift_getEnumCaseMultiPayload(v16, v21)];
    __asm { BR              X10 }
  }

  uint64_t v18 = *a2;
  *(void *)a1 = *a2;
  uint64_t v19 = v18 + ((v4 + 16LL) & ~(unint64_t)v4);
  swift_retain();
  return v19;
}

uint64_t sub_1000F6AD8(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[6];
  sub_100016F9C(*(void *)v4, *(void *)(v4 + 8));
  uint64_t v5 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v6 = v4 + v5[5];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
  v9(v6, v7);
  uint64_t v10 = v4 + v5[6];
  uint64_t v11 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v10, v11))
  {
    case 0u:
    case 4u:
      goto LABEL_5;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 2u:
      v9(v10, v7);
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v9(v10, v7);
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v12 = v4 + v5[7];
  uint64_t v13 = v4 + v5[8];
  uint64_t v14 = type metadata accessor for Date(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  Swift::String v22 = *(void (**)(uint64_t, uint64_t))(v15 + 8);
  v22(v13, v14);
  sub_100016F9C(*(void *)(v4 + v5[9]), *(void *)(v4 + v5[9] + 8));
  uint64_t v16 = (uint64_t *)(v4 + v5[10]);
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15) {
    sub_100016F9C(*v16, v17);
  }
  uint64_t v18 = (uint64_t *)(v4 + v5[11]);
  unint64_t v19 = v18[1];
  if (v19 >> 60 != 15) {
    sub_100016F9C(*v18, v19);
  }
  sub_100016F9C(*(void *)(v4 + v5[12]), *(void *)(v4 + v5[12] + 8));
  sub_100016F9C(*(void *)(v4 + v5[13]), *(void *)(v4 + v5[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v9(a1 + a2[8], v7);
  uint64_t v20 = a1 + a2[9];
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v15 + 48))(v20, 1LL, v14);
  if (!(_DWORD)result) {
    return ((uint64_t (*)(uint64_t, uint64_t))v22)(v20, v14);
  }
  return result;
}

void sub_1000F6DC4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v4 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v4;
  uint64_t v5 = *(int *)(a3 + 24);
  uint64_t v6 = (uint64_t *)(a1 + v5);
  uint64_t v7 = a2 + v5;
  uint64_t v8 = *(void *)(a2 + v5);
  unint64_t v9 = *(void *)(a2 + v5 + 8);
  swift_bridgeObjectRetain(v4);
  sub_10001736C(v8, v9);
  *uint64_t v6 = v8;
  v6[1] = v9;
  uint64_t v10 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v11 = *(int *)(v10 + 20);
  uint64_t v12 = (char *)v6 + v11;
  uint64_t v13 = v7 + v11;
  uint64_t v14 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v14 - 8) + 16LL))(v12, v13, v14);
  uint64_t v15 = v7 + *(int *)(v10 + 24);
  uint64_t v16 = type metadata accessor for StableIdentifier(0LL);
  unint64_t v17 = (char *)sub_1000F6EA8 + 4 * byte_1007ECCCA[swift_getEnumCaseMultiPayload(v15, v16)];
  __asm { BR              X10 }

uint64_t sub_1000F6EA8()
{
  uint64_t v9 = v8[1];
  *uint64_t v5 = *v8;
  v5[1] = v9;
  swift_bridgeObjectRetain(v9);
  swift_storeEnumTagMultiPayload(v5, v6, v3);
  uint64_t v10 = v4[7];
  uint64_t v11 = (void *)(v7 + v10);
  uint64_t v12 = (const void *)(v1 + v10);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v66 + 48))(v1 + v10, 1LL, v2))
  {
    uint64_t v13 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v11, v12, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    v69(v11, v12, v2);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v66 + 56))(v11, 0LL, 1LL, v2);
  }

  uint64_t v14 = v4[8];
  uint64_t v15 = v7 + v14;
  uint64_t v16 = v1 + v14;
  uint64_t v17 = type metadata accessor for Date(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  unint64_t v19 = *(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 16);
  v19(v15, v16, v17);
  uint64_t v20 = v4[9];
  uint64_t v21 = (uint64_t *)(v7 + v20);
  Swift::String v22 = (uint64_t *)(v1 + v20);
  uint64_t v23 = *v22;
  unint64_t v24 = v22[1];
  sub_10001736C(*v22, v24);
  *uint64_t v21 = v23;
  v21[1] = v24;
  uint64_t v25 = v4[10];
  uint64_t v26 = v7 + v25;
  Swift::String v27 = (uint64_t *)(v1 + v25);
  unint64_t v28 = v27[1];
  if (v28 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v26 = *(_OWORD *)v27;
  }

  else
  {
    uint64_t v29 = *v27;
    sub_10001736C(*v27, v27[1]);
    *(void *)uint64_t v26 = v29;
    *(void *)(v26 + 8) = v28;
  }

  uint64_t v30 = v4[11];
  uint64_t v31 = v7 + v30;
  unint64_t v32 = (uint64_t *)(v1 + v30);
  unint64_t v33 = v32[1];
  if (v33 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v31 = *(_OWORD *)v32;
  }

  else
  {
    uint64_t v34 = *v32;
    sub_10001736C(*v32, v32[1]);
    *(void *)uint64_t v31 = v34;
    *(void *)(v31 + 8) = v33;
  }

  uint64_t v35 = v4[12];
  uint64_t v36 = (uint64_t *)(v7 + v35);
  os_log_type_t v37 = (uint64_t *)(v1 + v35);
  uint64_t v38 = *v37;
  unint64_t v39 = v37[1];
  sub_10001736C(*v37, v39);
  *uint64_t v36 = v38;
  v36[1] = v39;
  uint64_t v40 = v4[13];
  uint64_t v41 = (uint64_t *)(v7 + v40);
  uint64_t v42 = (uint64_t *)(v1 + v40);
  uint64_t v43 = *v42;
  unint64_t v44 = v42[1];
  sub_10001736C(*v42, v44);
  *uint64_t v41 = v43;
  v41[1] = v44;
  uint64_t v45 = v4[14];
  int v46 = (void *)(v7 + v45);
  uint64_t v47 = (void *)(v1 + v45);
  uint64_t v48 = v47[1];
  *int v46 = *v47;
  v46[1] = v48;
  uint64_t v49 = v4[15];
  uint64_t v50 = (void *)(v7 + v49);
  int v51 = (void *)(v1 + v49);
  uint64_t v52 = v51[1];
  *uint64_t v50 = *v51;
  v50[1] = v52;
  *(void *)(v7 + v4[16]) = *(void *)(v1 + v4[16]);
  *(void *)(v7 + v4[17]) = *(void *)(v1 + v4[17]);
  *(_BYTE *)(v7 + v4[18]) = *(_BYTE *)(v1 + v4[18]);
  *(_BYTE *)(v7 + v4[19]) = *(_BYTE *)(v1 + v4[19]);
  *(_BYTE *)(v7 + v4[20]) = *(_BYTE *)(v1 + v4[20]);
  uint64_t v53 = v67[7];
  uint64_t v54 = v67[8];
  uint64_t v55 = v0 + v53;
  uint64_t v56 = v68 + v53;
  *(_BYTE *)uint64_t v55 = *(_BYTE *)v56;
  uint64_t v57 = *(void *)(v56 + 16);
  *(void *)(v55 + 8) = *(void *)(v56 + 8);
  *(void *)(v55 + 16) = v57;
  uint64_t v58 = v0 + v54;
  uint64_t v59 = v68 + v54;
  swift_bridgeObjectRetain(v48);
  swift_bridgeObjectRetain(v52);
  __n128 v60 = swift_bridgeObjectRetain(v57);
  ((void (*)(uint64_t, uint64_t, uint64_t, __n128))v69)(v58, v59, v70, v60);
  uint64_t v61 = v67[9];
  uint64_t v62 = (void *)(v0 + v61);
  uint64_t v63 = (const void *)(v68 + v61);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))(v68 + v61, 1LL, v17))
  {
    uint64_t v64 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v62, v63, *(void *)(*(void *)(v64 - 8) + 64LL));
  }

  else
  {
    v19((uint64_t)v62, (uint64_t)v63, v17);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v18 + 56))(v62, 0LL, 1LL, v17);
  }

  return v0;
}

uint64_t sub_1000F72B0(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  uint64_t v94 = a3;
  uint64_t v7 = a3[6];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a2 + v7);
  unint64_t v11 = *(void *)(a2 + v7 + 8);
  sub_10001736C(v10, v11);
  uint64_t v12 = *v8;
  unint64_t v13 = v8[1];
  *uint64_t v8 = v10;
  v8[1] = v11;
  sub_100016F9C(v12, v13);
  uint64_t v14 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v15 = v14[5];
  uint64_t v16 = (char *)v8 + v15;
  uint64_t v17 = v9 + v15;
  uint64_t v18 = type metadata accessor for UUID(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v97 = *(void (**)(char *, uint64_t, uint64_t))(v19 + 24);
  v97(v16, v17, v18);
  uint64_t v95 = a2;
  uint64_t v96 = a1;
  if (a1 != a2)
  {
    uint64_t v20 = v14[6];
    uint64_t v21 = v9 + v20;
    sub_1000F7994((uint64_t)v8 + v20);
    uint64_t v22 = type metadata accessor for StableIdentifier(0LL);
    uint64_t v23 = (char *)&loc_1000F73C8 + 4 * byte_1007ECCCF[swift_getEnumCaseMultiPayload(v21, v22)];
    __asm { BR              X10 }
  }

  uint64_t v24 = v14[7];
  uint64_t v25 = (char *)v8 + v24;
  uint64_t v26 = (char *)(v9 + v24);
  Swift::String v27 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 48);
  int v28 = v27((char *)v8 + v24, 1LL, v18);
  int v29 = v27(v26, 1LL, v18);
  if (v28)
  {
    if (!v29)
    {
      (*(void (**)(char *, char *, uint64_t))(v19 + 16))(v25, v26, v18);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v19 + 56))(v25, 0LL, 1LL, v18);
      goto LABEL_9;
    }

    goto LABEL_8;
  }

  if (v29)
  {
    (*(void (**)(char *, uint64_t))(v19 + 8))(v25, v18);
LABEL_8:
    uint64_t v30 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v25, v26, *(void *)(*(void *)(v30 - 8) + 64LL));
    goto LABEL_9;
  }

  v97(v25, (uint64_t)v26, v18);
LABEL_9:
  uint64_t v31 = v14[8];
  unint64_t v32 = (char *)v8 + v31;
  uint64_t v33 = v9 + v31;
  uint64_t v34 = type metadata accessor for Date(0LL);
  uint64_t v35 = *(void *)(v34 - 8);
  uint64_t v36 = *(void (**)(char *, uint64_t, uint64_t))(v35 + 24);
  v36(v32, v33, v34);
  uint64_t v37 = v14[9];
  uint64_t v38 = (uint64_t *)((char *)v8 + v37);
  unint64_t v39 = (uint64_t *)(v9 + v37);
  uint64_t v40 = *v39;
  unint64_t v41 = v39[1];
  sub_10001736C(*v39, v41);
  uint64_t v42 = *v38;
  unint64_t v43 = v38[1];
  *uint64_t v38 = v40;
  v38[1] = v41;
  sub_100016F9C(v42, v43);
  uint64_t v44 = v14[10];
  uint64_t v45 = (uint64_t *)((char *)v8 + v44);
  int v46 = (uint64_t *)(v9 + v44);
  unint64_t v47 = *(void *)(v9 + v44 + 8);
  if (*(unint64_t *)((char *)v8 + v44 + 8) >> 60 == 15)
  {
    if (v47 >> 60 != 15)
    {
      uint64_t v48 = *v46;
      sub_10001736C(v48, v47);
      *uint64_t v45 = v48;
      v45[1] = v47;
      goto LABEL_16;
    }

    goto LABEL_14;
  }

  if (v47 >> 60 == 15)
  {
    sub_1000F79D0((uint64_t)v45);
LABEL_14:
    *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
    goto LABEL_16;
  }

  uint64_t v49 = *v46;
  sub_10001736C(v49, v47);
  uint64_t v50 = *v45;
  unint64_t v51 = v45[1];
  *uint64_t v45 = v49;
  v45[1] = v47;
  sub_100016F9C(v50, v51);
LABEL_16:
  uint64_t v52 = v14[11];
  uint64_t v53 = (uint64_t *)((char *)v8 + v52);
  uint64_t v54 = (uint64_t *)(v9 + v52);
  unint64_t v55 = *(void *)(v9 + v52 + 8);
  if (*(unint64_t *)((char *)v8 + v52 + 8) >> 60 == 15)
  {
    if (v55 >> 60 != 15)
    {
      uint64_t v56 = *v54;
      sub_10001736C(v56, v55);
      *uint64_t v53 = v56;
      v53[1] = v55;
      goto LABEL_23;
    }

    goto LABEL_21;
  }

  if (v55 >> 60 == 15)
  {
    sub_1000F79D0((uint64_t)v53);
LABEL_21:
    *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
    goto LABEL_23;
  }

  uint64_t v57 = *v54;
  sub_10001736C(v57, v55);
  uint64_t v58 = *v53;
  unint64_t v59 = v53[1];
  *uint64_t v53 = v57;
  v53[1] = v55;
  sub_100016F9C(v58, v59);
LABEL_23:
  uint64_t v60 = v14[12];
  uint64_t v61 = (uint64_t *)((char *)v8 + v60);
  uint64_t v62 = (uint64_t *)(v9 + v60);
  uint64_t v63 = *v62;
  unint64_t v64 = v62[1];
  sub_10001736C(*v62, v64);
  uint64_t v65 = *v61;
  unint64_t v66 = v61[1];
  *uint64_t v61 = v63;
  v61[1] = v64;
  sub_100016F9C(v65, v66);
  uint64_t v67 = v14[13];
  uint64_t v68 = (uint64_t *)((char *)v8 + v67);
  int v69 = (uint64_t *)(v9 + v67);
  uint64_t v70 = *v69;
  unint64_t v71 = v69[1];
  sub_10001736C(*v69, v71);
  uint64_t v72 = *v68;
  unint64_t v73 = v68[1];
  *uint64_t v68 = v70;
  v68[1] = v71;
  sub_100016F9C(v72, v73);
  uint64_t v74 = v14[14];
  uint64_t v75 = (uint64_t *)((char *)v8 + v74);
  uint64_t v76 = (void *)(v9 + v74);
  *uint64_t v75 = *v76;
  uint64_t v77 = v76[1];
  v75[1] = v77;
  swift_bridgeObjectRetain(v77);
  swift_bridgeObjectRelease();
  uint64_t v78 = v14[15];
  uint64_t v79 = (uint64_t *)((char *)v8 + v78);
  uint64_t v80 = (void *)(v9 + v78);
  *uint64_t v79 = *v80;
  uint64_t v81 = v80[1];
  v79[1] = v81;
  swift_bridgeObjectRetain(v81);
  swift_bridgeObjectRelease();
  *(uint64_t *)((char *)v8 + v14[16]) = *(void *)(v9 + v14[16]);
  *(uint64_t *)((char *)v8 + v14[17]) = *(void *)(v9 + v14[17]);
  *((_BYTE *)v8 + v14[18]) = *(_BYTE *)(v9 + v14[18]);
  *((_BYTE *)v8 + v14[19]) = *(_BYTE *)(v9 + v14[19]);
  *((_BYTE *)v8 + v14[20]) = *(_BYTE *)(v9 + v14[20]);
  uint64_t v82 = v94[7];
  uint64_t v83 = v96 + v82;
  uint64_t v84 = v95 + v82;
  *(_BYTE *)uint64_t v83 = *(_BYTE *)v84;
  *(void *)(v83 + 8) = *(void *)(v84 + 8);
  uint64_t v85 = *(void *)(v84 + 16);
  *(void *)(v83 + 16) = v85;
  swift_bridgeObjectRetain(v85);
  swift_bridgeObjectRelease();
  v97((char *)(v96 + v94[8]), v95 + v94[8], v18);
  uint64_t v86 = v94[9];
  unint64_t v87 = (char *)(v96 + v86);
  uint64_t v88 = (const void *)(v95 + v86);
  int v89 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v35 + 48);
  int v90 = v89(v96 + v86, 1LL, v34);
  int v91 = v89((uint64_t)v88, 1LL, v34);
  if (!v90)
  {
    if (!v91)
    {
      v36(v87, (uint64_t)v88, v34);
      return v96;
    }

    (*(void (**)(char *, uint64_t))(v35 + 8))(v87, v34);
    goto LABEL_28;
  }

  if (v91)
  {
LABEL_28:
    uint64_t v92 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v87, v88, *(void *)(*(void *)(v92 - 8) + 64LL));
    return v96;
  }

  (*(void (**)(char *, const void *, uint64_t))(v35 + 16))(v87, v88, v34);
  (*(void (**)(char *, void, uint64_t, uint64_t))(v35 + 56))(v87, 0LL, 1LL, v34);
  return v96;
}

uint64_t sub_1000F7994(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for StableIdentifier(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1000F79D0(uint64_t a1)
{
  return a1;
}

uint64_t sub_1000F7A04(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  *(_OWORD *)(a1 + 8) = *(_OWORD *)(a2 + 8);
  uint64_t v4 = a3[6];
  uint64_t v5 = a1 + v4;
  uint64_t v6 = a2 + v4;
  *(_OWORD *)(a1 + v4) = *(_OWORD *)(a2 + v4);
  uint64_t v7 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v8 = v7[5];
  uint64_t v9 = v5 + v8;
  uint64_t v10 = v6 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  unint64_t v13 = *(void (**)(uint64_t, uint64_t, uint64_t))(v12 + 32);
  v13(v9, v10, v11);
  uint64_t v14 = v7[6];
  uint64_t v15 = (_BYTE *)(v5 + v14);
  uint64_t v16 = (_BYTE *)(v6 + v14);
  uint64_t v17 = type metadata accessor for StableIdentifier(0LL);
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v16, v17);
  if (EnumCaseMultiPayload == 3)
  {
    v13((uint64_t)v15, (uint64_t)v16, v11);
    uint64_t v20 = (int *)sub_100004AEC((uint64_t *)&unk_1009AF840);
    *(_OWORD *)&v15[v20[12]] = *(_OWORD *)&v16[v20[12]];
    *(_OWORD *)&v15[v20[16]] = *(_OWORD *)&v16[v20[16]];
    *(_OWORD *)&v15[v20[20]] = *(_OWORD *)&v16[v20[20]];
    v15[v20[24]] = v16[v20[24]];
    swift_storeEnumTagMultiPayload(v15, v17, 3LL);
  }

  else if (EnumCaseMultiPayload == 2)
  {
    v13((uint64_t)v15, (uint64_t)v16, v11);
    uint64_t v19 = (int *)sub_100004AEC((uint64_t *)&unk_1009B0520);
    *(_OWORD *)&v15[v19[12]] = *(_OWORD *)&v16[v19[12]];
    *(_OWORD *)&v15[v19[16]] = *(_OWORD *)&v16[v19[16]];
    *(_OWORD *)&v15[v19[20]] = *(_OWORD *)&v16[v19[20]];
    *(_WORD *)&v15[v19[24]] = *(_WORD *)&v16[v19[24]];
    *(_OWORD *)&v15[v19[28]] = *(_OWORD *)&v16[v19[28]];
    swift_storeEnumTagMultiPayload(v15, v17, 2LL);
  }

  else
  {
    memcpy(v15, v16, *(void *)(*(void *)(v17 - 8) + 64LL));
  }

  uint64_t v21 = v7[7];
  uint64_t v22 = (void *)(v5 + v21);
  uint64_t v23 = (const void *)(v6 + v21);
  unint64_t v41 = v13;
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v6 + v21, 1LL, v11))
  {
    uint64_t v24 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v22, v23, *(void *)(*(void *)(v24 - 8) + 64LL));
  }

  else
  {
    v13((uint64_t)v22, (uint64_t)v23, v11);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v12 + 56))(v22, 0LL, 1LL, v11);
  }

  uint64_t v25 = v7[8];
  uint64_t v26 = v5 + v25;
  uint64_t v27 = v6 + v25;
  uint64_t v28 = type metadata accessor for Date(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = v26;
  uint64_t v31 = *(void (**)(uint64_t, uint64_t, uint64_t))(v29 + 32);
  v31(v30, v27, v28);
  *(_OWORD *)(v5 + v7[9]) = *(_OWORD *)(v6 + v7[9]);
  *(_OWORD *)(v5 + v7[10]) = *(_OWORD *)(v6 + v7[10]);
  *(_OWORD *)(v5 + v7[11]) = *(_OWORD *)(v6 + v7[11]);
  *(_OWORD *)(v5 + v7[12]) = *(_OWORD *)(v6 + v7[12]);
  *(_OWORD *)(v5 + v7[13]) = *(_OWORD *)(v6 + v7[13]);
  *(_OWORD *)(v5 + v7[14]) = *(_OWORD *)(v6 + v7[14]);
  *(_OWORD *)(v5 + v7[15]) = *(_OWORD *)(v6 + v7[15]);
  *(void *)(v5 + v7[16]) = *(void *)(v6 + v7[16]);
  *(void *)(v5 + v7[17]) = *(void *)(v6 + v7[17]);
  *(_BYTE *)(v5 + v7[18]) = *(_BYTE *)(v6 + v7[18]);
  *(_BYTE *)(v5 + v7[19]) = *(_BYTE *)(v6 + v7[19]);
  *(_BYTE *)(v5 + v7[20]) = *(_BYTE *)(v6 + v7[20]);
  uint64_t v32 = a3[7];
  uint64_t v33 = a3[8];
  uint64_t v34 = a1 + v32;
  uint64_t v35 = a2 + v32;
  *(void *)(v34 + 16) = *(void *)(v35 + 16);
  *(_OWORD *)uint64_t v34 = *(_OWORD *)v35;
  v41(a1 + v33, a2 + v33, v11);
  uint64_t v36 = a3[9];
  uint64_t v37 = (void *)(a1 + v36);
  uint64_t v38 = (const void *)(a2 + v36);
  if ((*(unsigned int (**)(const void *, uint64_t, uint64_t))(v29 + 48))(v38, 1LL, v28))
  {
    uint64_t v39 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v37, v38, *(void *)(*(void *)(v39 - 8) + 64LL));
  }

  else
  {
    v31((uint64_t)v37, (uint64_t)v38, v28);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v29 + 56))(v37, 0LL, 1LL, v28);
  }

  return a1;
}

uint64_t sub_1000F7DA0(uint64_t a1, uint64_t a2, int *a3)
{
  *(_BYTE *)a1 = *(_BYTE *)a2;
  uint64_t v6 = *(void *)(a2 + 16);
  *(void *)(a1 + 8) = *(void *)(a2 + 8);
  *(void *)(a1 + 16) = v6;
  swift_bridgeObjectRelease();
  uint64_t v86 = a3;
  uint64_t v7 = a3[6];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)(a1 + v7);
  unint64_t v11 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  sub_100016F9C(v10, v11);
  uint64_t v12 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v13 = v12[5];
  uint64_t v14 = v8 + v13;
  uint64_t v15 = v9 + v13;
  uint64_t v16 = type metadata accessor for UUID(0LL);
  uint64_t v17 = *(void *)(v16 - 8);
  unint64_t v87 = *(void (**)(uint64_t, uint64_t, uint64_t))(v17 + 40);
  v87(v14, v15, v16);
  if (a1 != a2)
  {
    uint64_t v18 = v12[6];
    uint64_t v19 = (_BYTE *)(v8 + v18);
    uint64_t v20 = (_BYTE *)(v9 + v18);
    sub_1000F7994(v8 + v18);
    uint64_t v21 = type metadata accessor for StableIdentifier(0LL);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v20, v21);
    if (EnumCaseMultiPayload == 3)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 32))(v19, v20, v16);
      uint64_t v24 = (int *)sub_100004AEC((uint64_t *)&unk_1009AF840);
      *(_OWORD *)&v19[v24[12]] = *(_OWORD *)&v20[v24[12]];
      *(_OWORD *)&v19[v24[16]] = *(_OWORD *)&v20[v24[16]];
      *(_OWORD *)&v19[v24[20]] = *(_OWORD *)&v20[v24[20]];
      v19[v24[24]] = v20[v24[24]];
      swift_storeEnumTagMultiPayload(v19, v21, 3LL);
    }

    else if (EnumCaseMultiPayload == 2)
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v17 + 32))(v19, v20, v16);
      uint64_t v23 = (int *)sub_100004AEC((uint64_t *)&unk_1009B0520);
      *(_OWORD *)&v19[v23[12]] = *(_OWORD *)&v20[v23[12]];
      *(_OWORD *)&v19[v23[16]] = *(_OWORD *)&v20[v23[16]];
      *(_OWORD *)&v19[v23[20]] = *(_OWORD *)&v20[v23[20]];
      *(_WORD *)&v19[v23[24]] = *(_WORD *)&v20[v23[24]];
      *(_OWORD *)&v19[v23[28]] = *(_OWORD *)&v20[v23[28]];
      swift_storeEnumTagMultiPayload(v19, v21, 2LL);
    }

    else
    {
      memcpy(v19, v20, *(void *)(*(void *)(v21 - 8) + 64LL));
    }
  }

  uint64_t v84 = a1;
  uint64_t v25 = v12[7];
  uint64_t v26 = (void *)(v8 + v25);
  uint64_t v27 = (const void *)(v9 + v25);
  uint64_t v28 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v17 + 48);
  int v29 = v28(v8 + v25, 1LL, v16);
  int v30 = v28((uint64_t)v27, 1LL, v16);
  if (v29)
  {
    if (v30)
    {
      uint64_t v31 = sub_100004AEC(&qword_10099D8A0);
      memcpy(v26, v27, *(void *)(*(void *)(v31 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(void *, const void *, uint64_t))(v17 + 32))(v26, v27, v16);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v17 + 56))(v26, 0LL, 1LL, v16);
    }
  }

  else if (v30)
  {
    (*(void (**)(void *, uint64_t))(v17 + 8))(v26, v16);
    uint64_t v32 = sub_100004AEC(&qword_10099D8A0);
    memcpy(v26, v27, *(void *)(*(void *)(v32 - 8) + 64LL));
  }

  else
  {
    v87((uint64_t)v26, (uint64_t)v27, v16);
  }

  uint64_t v33 = v84;
  uint64_t v34 = v12[8];
  uint64_t v35 = v8 + v34;
  uint64_t v36 = v9 + v34;
  uint64_t v37 = type metadata accessor for Date(0LL);
  uint64_t v85 = *(void *)(v37 - 8);
  uint64_t v38 = v36;
  uint64_t v39 = *(void (**)(uint64_t, uint64_t, uint64_t))(v85 + 40);
  v39(v35, v38, v37);
  uint64_t v40 = v12[9];
  uint64_t v41 = *(void *)(v8 + v40);
  unint64_t v42 = *(void *)(v8 + v40 + 8);
  *(_OWORD *)(v8 + v40) = *(_OWORD *)(v9 + v40);
  sub_100016F9C(v41, v42);
  uint64_t v43 = v12[10];
  uint64_t v44 = v8 + v43;
  uint64_t v45 = v9 + v43;
  unint64_t v46 = *(void *)(v8 + v43 + 8);
  if (v46 >> 60 == 15) {
    goto LABEL_17;
  }
  unint64_t v47 = *(void *)(v45 + 8);
  if (v47 >> 60 == 15)
  {
    sub_1000F79D0(v44);
LABEL_17:
    *(_OWORD *)uint64_t v44 = *(_OWORD *)v45;
    goto LABEL_19;
  }

  uint64_t v48 = *(void *)v44;
  *(void *)uint64_t v44 = *(void *)v45;
  *(void *)(v44 + 8) = v47;
  sub_100016F9C(v48, v46);
LABEL_19:
  uint64_t v49 = v12[11];
  uint64_t v50 = v8 + v49;
  uint64_t v51 = v9 + v49;
  unint64_t v52 = *(void *)(v8 + v49 + 8);
  if (v52 >> 60 == 15)
  {
LABEL_22:
    *(_OWORD *)uint64_t v50 = *(_OWORD *)v51;
    goto LABEL_24;
  }

  unint64_t v53 = *(void *)(v51 + 8);
  if (v53 >> 60 == 15)
  {
    sub_1000F79D0(v50);
    goto LABEL_22;
  }

  uint64_t v54 = *(void *)v50;
  *(void *)uint64_t v50 = *(void *)v51;
  *(void *)(v50 + 8) = v53;
  sub_100016F9C(v54, v52);
LABEL_24:
  uint64_t v55 = v12[12];
  uint64_t v56 = *(void *)(v8 + v55);
  unint64_t v57 = *(void *)(v8 + v55 + 8);
  *(_OWORD *)(v8 + v55) = *(_OWORD *)(v9 + v55);
  sub_100016F9C(v56, v57);
  uint64_t v58 = v12[13];
  uint64_t v59 = *(void *)(v8 + v58);
  unint64_t v60 = *(void *)(v8 + v58 + 8);
  *(_OWORD *)(v8 + v58) = *(_OWORD *)(v9 + v58);
  sub_100016F9C(v59, v60);
  uint64_t v61 = v12[14];
  uint64_t v62 = (void *)(v8 + v61);
  uint64_t v63 = (uint64_t *)(v9 + v61);
  uint64_t v65 = *v63;
  uint64_t v64 = v63[1];
  *uint64_t v62 = v65;
  v62[1] = v64;
  swift_bridgeObjectRelease();
  uint64_t v66 = v12[15];
  uint64_t v67 = (void *)(v8 + v66);
  uint64_t v68 = (uint64_t *)(v9 + v66);
  uint64_t v70 = *v68;
  uint64_t v69 = v68[1];
  *uint64_t v67 = v70;
  v67[1] = v69;
  swift_bridgeObjectRelease();
  *(void *)(v8 + v12[16]) = *(void *)(v9 + v12[16]);
  *(void *)(v8 + v12[17]) = *(void *)(v9 + v12[17]);
  *(_BYTE *)(v8 + v12[18]) = *(_BYTE *)(v9 + v12[18]);
  *(_BYTE *)(v8 + v12[19]) = *(_BYTE *)(v9 + v12[19]);
  *(_BYTE *)(v8 + v12[20]) = *(_BYTE *)(v9 + v12[20]);
  uint64_t v71 = v86[7];
  uint64_t v72 = v33 + v71;
  uint64_t v73 = a2 + v71;
  *(_BYTE *)uint64_t v72 = *(_BYTE *)v73;
  uint64_t v75 = *(void *)(v73 + 8);
  uint64_t v74 = *(void *)(v73 + 16);
  *(void *)(v72 + 8) = v75;
  *(void *)(v72 + 16) = v74;
  swift_bridgeObjectRelease();
  v87(v33 + v86[8], a2 + v86[8], v16);
  uint64_t v76 = v86[9];
  uint64_t v77 = (void *)(v33 + v76);
  uint64_t v78 = (const void *)(a2 + v76);
  uint64_t v79 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v85 + 48);
  int v80 = v79(v33 + v76, 1LL, v37);
  int v81 = v79((uint64_t)v78, 1LL, v37);
  if (!v80)
  {
    if (!v81)
    {
      v39((uint64_t)v77, (uint64_t)v78, v37);
      return v33;
    }

    (*(void (**)(void *, uint64_t))(v85 + 8))(v77, v37);
    goto LABEL_29;
  }

  if (v81)
  {
LABEL_29:
    uint64_t v82 = sub_100004AEC((uint64_t *)&unk_10099D720);
    memcpy(v77, v78, *(void *)(*(void *)(v82 - 8) + 64LL));
    return v33;
  }

  (*(void (**)(void *, const void *, uint64_t))(v85 + 32))(v77, v78, v37);
  (*(void (**)(void *, void, uint64_t, uint64_t))(v85 + 56))(v77, 0LL, 1LL, v37);
  return v33;
}

uint64_t sub_1000F8320(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F832C);
}

uint64_t sub_1000F832C(uint64_t a1, uint64_t a2, int *a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 16);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for OwnedBeaconRecord(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a3[6];
    }

    else
    {
      uint64_t v12 = type metadata accessor for UUID(0LL);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == (_DWORD)a2)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a3[8];
      }

      else
      {
        uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D720);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a3[9];
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1 + v11, a2, v10);
  }

uint64_t sub_1000F83F4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F8400);
}

uint64_t sub_1000F8400(uint64_t result, uint64_t a2, int a3, int *a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 16) = (a2 - 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for OwnedBeaconRecord(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (*(_DWORD *)(v9 + 84) == a3)
    {
      uint64_t v10 = v8;
      uint64_t v11 = a4[6];
    }

    else
    {
      uint64_t v12 = type metadata accessor for UUID(0LL);
      uint64_t v9 = *(void *)(v12 - 8);
      if (*(_DWORD *)(v9 + 84) == a3)
      {
        uint64_t v10 = v12;
        uint64_t v11 = a4[8];
      }

      else
      {
        uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D720);
        uint64_t v9 = *(void *)(v10 - 8);
        uint64_t v11 = a4[9];
      }
    }

    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v5 + v11, a2, a2, v10);
  }

  return result;
}

uint64_t type metadata accessor for ShareInstruction(uint64_t a1)
{
  uint64_t result = qword_1009A13E8;
  if (!qword_1009A13E8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for ShareInstruction);
  }
  return result;
}

void sub_1000F8500(uint64_t a1)
{
  v8[0] = &unk_1007ECCF8;
  v8[1] = &unk_1007ECD10;
  uint64_t v2 = type metadata accessor for OwnedBeaconRecord(319LL);
  if (v3 <= 0x3F)
  {
    v8[2] = *(void *)(v2 - 8) + 64LL;
    void v8[3] = &unk_1007ECD28;
    uint64_t v4 = type metadata accessor for UUID(319LL);
    if (v5 <= 0x3F)
    {
      v8[4] = *(void *)(v4 - 8) + 64LL;
      sub_10003FEF4(319LL);
      if (v7 <= 0x3F)
      {
        v8[5] = *(void *)(v6 - 8) + 64LL;
        swift_initStructMetadata(a1, 256LL, 6LL, v8, a1 + 16);
      }
    }
  }

void sub_1000F85BC(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v20 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Hasher._combine(_:)(qword_1007ECDB0[*v1]);
  uint64_t v11 = *((void *)v1 + 1);
  uint64_t v12 = *((void *)v2 + 2);
  swift_bridgeObjectRetain(v12);
  String.hash(into:)(a1, v11, v12);
  swift_bridgeObjectRelease();
  uint64_t v13 = type metadata accessor for ShareInstruction(0LL);
  sub_1005D3D98(a1);
  uint64_t v14 = &v2[*(int *)(v13 + 28)];
  uint64_t v15 = *((void *)v14 + 1);
  uint64_t v16 = *((void *)v14 + 2);
  Hasher._combine(_:)(*v14);
  swift_bridgeObjectRetain(v16);
  String.hash(into:)(a1, v15, v16);
  swift_bridgeObjectRelease();
  uint64_t v17 = type metadata accessor for UUID(0LL);
  uint64_t v18 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v17, v18);
  sub_10000A824((uint64_t)&v2[*(int *)(v13 + 36)], (uint64_t)v10);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v5 + 48))(v10, 1LL, v4) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v5 + 32))(v7, v10, v4);
    Hasher._combine(_:)(1u);
    uint64_t v19 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(a1, v4, v19);
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

Swift::Int sub_1000F87DC()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for Date(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v20[-1] - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v20[-1] - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Hasher.init(_seed:)(v20, 0LL);
  Hasher._combine(_:)(qword_1007ECDB0[*v0]);
  uint64_t v9 = *((void *)v0 + 1);
  uint64_t v10 = *((void *)v1 + 2);
  swift_bridgeObjectRetain(v10);
  String.hash(into:)(v20, v9, v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = type metadata accessor for ShareInstruction(0LL);
  sub_1005D3D98((uint64_t)v20);
  uint64_t v12 = &v1[*(int *)(v11 + 28)];
  uint64_t v13 = *((void *)v12 + 1);
  uint64_t v14 = *((void *)v12 + 2);
  Hasher._combine(_:)(*v12);
  swift_bridgeObjectRetain(v14);
  String.hash(into:)(v20, v13, v14);
  swift_bridgeObjectRelease();
  uint64_t v15 = type metadata accessor for UUID(0LL);
  uint64_t v16 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v20, v15, v16);
  sub_10000A824((uint64_t)&v1[*(int *)(v11 + 36)], (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v3 + 48))(v8, 1LL, v2) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v3 + 32))(v5, v8, v2);
    Hasher._combine(_:)(1u);
    uint64_t v17 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(v20, v2, v17);
    (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  }

  return Hasher._finalize()();
}

Swift::Int sub_1000F8A18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = v2;
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v23[-1] - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v23[-1] - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Hasher.init(_seed:)(v23, a1);
  Hasher._combine(_:)(qword_1007ECDB0[*v4]);
  uint64_t v13 = *((void *)v4 + 1);
  uint64_t v14 = *((void *)v4 + 2);
  swift_bridgeObjectRetain(v14);
  String.hash(into:)(v23, v13, v14);
  swift_bridgeObjectRelease();
  sub_1005D3D98((uint64_t)v23);
  uint64_t v15 = &v4[*(int *)(a2 + 28)];
  uint64_t v16 = *((void *)v15 + 1);
  uint64_t v17 = *((void *)v15 + 2);
  Hasher._combine(_:)(*v15);
  swift_bridgeObjectRetain(v17);
  String.hash(into:)(v23, v16, v17);
  swift_bridgeObjectRelease();
  uint64_t v18 = type metadata accessor for UUID(0LL);
  uint64_t v19 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v23, v18, v19);
  sub_10000A824((uint64_t)&v4[*(int *)(a2 + 36)], (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v12, 1LL, v6) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v12, v6);
    Hasher._combine(_:)(1u);
    uint64_t v20 = sub_100007864( (unint64_t *)&unk_10099D840,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    dispatch thunk of Hashable.hash(into:)(v23, v6, v20);
    (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  }

  return Hasher._finalize()();
}

uint64_t sub_1000F8C4C()
{
  return sub_100007864(&qword_1009A1430, type metadata accessor for ShareInstruction, (uint64_t)&unk_1007ECD40);
}

BOOL sub_1000F8C78(char *a1, char *a2)
{
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v43 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099D760);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v43 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v12 = __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v43 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v17 = (char *)&v43 - v16;
  __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v43 - v18;
  if (qword_1007ECDB0[*a1] != qword_1007ECDB0[*a2]) {
    return 0LL;
  }
  uint64_t v44 = v10;
  uint64_t v20 = *((void *)a1 + 1);
  uint64_t v21 = *((void *)a1 + 2);
  uint64_t v22 = *((void *)a2 + 1);
  uint64_t v23 = *((void *)a2 + 2);
  if (v20 == v22 && v21 == v23
    || (char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v21, v22, v23, 0LL), result = 0LL, (v24 & 1) != 0))
  {
    uint64_t v26 = (int *)type metadata accessor for ShareInstruction(0LL);
    uint64_t v27 = v26[7];
    uint64_t v28 = &a1[v27];
    int v29 = a1[v27];
    int v30 = &a2[v27];
    uint64_t v31 = *((void *)v28 + 1);
    uint64_t v32 = *((void *)v28 + 2);
    uint64_t v33 = *((void *)v30 + 1);
    uint64_t v34 = *((void *)v30 + 2);
    if (v31 == v33 && v32 == v34
      || (v35 = _stringCompareWithSmolCheck(_:_:expecting:)(v31, v32, v33, v34, 0LL), BOOL result = 0LL, (v35 & 1) != 0))
    {
      if ((static UUID.== infix(_:_:)(&a1[v26[8]], &a2[v26[8]]) & 1) != 0)
      {
        sub_10000A824((uint64_t)&a1[v26[9]], (uint64_t)v19);
        sub_10000A824((uint64_t)&a2[v26[9]], (uint64_t)v17);
        uint64_t v36 = *(int *)(v8 + 48);
        uint64_t v37 = (uint64_t)v44;
        uint64_t v38 = (uint64_t)&v44[v36];
        sub_10000A824((uint64_t)v19, (uint64_t)v44);
        sub_10000A824((uint64_t)v17, v38);
        uint64_t v39 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v5 + 48);
        if (v39(v37, 1LL, v4) == 1)
        {
          sub_100015794((uint64_t)v17, (uint64_t *)&unk_10099D720);
          sub_100015794((uint64_t)v19, (uint64_t *)&unk_10099D720);
          if (v39(v38, 1LL, v4) == 1)
          {
            sub_100015794(v37, (uint64_t *)&unk_10099D720);
            return 1LL;
          }
        }

        else
        {
          sub_10000A824(v37, (uint64_t)v14);
          if (v39(v38, 1LL, v4) != 1)
          {
            (*(void (**)(char *, uint64_t, uint64_t))(v5 + 32))(v7, v38, v4);
            uint64_t v40 = sub_100007864( &qword_10099DA90,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
            char v41 = dispatch thunk of static Equatable.== infix(_:_:)(v14, v7, v4, v40);
            unint64_t v42 = *(void (**)(char *, uint64_t))(v5 + 8);
            v42(v7, v4);
            sub_100015794((uint64_t)v17, (uint64_t *)&unk_10099D720);
            sub_100015794((uint64_t)v19, (uint64_t *)&unk_10099D720);
            v42(v14, v4);
            sub_100015794(v37, (uint64_t *)&unk_10099D720);
            return (v41 & 1) != 0;
          }

          sub_100015794((uint64_t)v17, (uint64_t *)&unk_10099D720);
          sub_100015794((uint64_t)v19, (uint64_t *)&unk_10099D720);
          (*(void (**)(char *, uint64_t))(v5 + 8))(v14, v4);
        }

        sub_100015794(v37, (uint64_t *)&unk_10099D760);
      }

      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_1000F9024(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v3 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  uint64_t v4 = *a2;
  *a1 = *a2;
  if ((v3 & 0x20000) != 0)
  {
    uint64_t v5 = (uint64_t *)(v4 + ((v3 + 16LL) & ~(unint64_t)v3));
    swift_retain(v4);
  }

  else
  {
    uint64_t v5 = a1;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for FMNAccountType(0LL);
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
    swift_retain(v4);
    v10(v7, v8, v9);
  }

  return v5;
}

uint64_t sub_1000F90BC(void *a1, uint64_t a2)
{
  uint64_t v4 = (char *)a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for FMNAccountType(0LL);
  return (*(uint64_t (**)(char *, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t *sub_1000F9104(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for FMNAccountType(0LL);
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL);
  swift_retain(v4);
  v9(v6, v7, v8);
  return a1;
}

uint64_t *sub_1000F9174(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a2;
  uint64_t v7 = *a1;
  *a1 = *a2;
  swift_retain(v6);
  swift_release(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for FMNAccountType(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  return a1;
}

void *sub_1000F91E8(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for FMNAccountType(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

uint64_t *sub_1000F9244(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v6 = *a1;
  *a1 = *a2;
  swift_release(v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (char *)a1 + v7;
  uint64_t v9 = (char *)a2 + v7;
  uint64_t v10 = type metadata accessor for FMNAccountType(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  return a1;
}

uint64_t sub_1000F92B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1000F92BC);
}

uint64_t sub_1000F92BC(char *a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    uint64_t v4 = *(void *)a1;
    if (*(void *)a1 >= 0xFFFFFFFFuLL) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for FMNAccountType(0LL);
    return (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( &a1[*(int *)(a3 + 20)],  a2,  v8);
  }

uint64_t sub_1000F9338(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1000F9344);
}

char *sub_1000F9344(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)BOOL result = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for FMNAccountType(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 20)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for SubmitEndpoint(uint64_t a1)
{
  uint64_t result = qword_1009A1490;
  if (!qword_1009A1490) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SubmitEndpoint);
  }
  return result;
}

uint64_t sub_1000F93F4(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = type metadata accessor for FMNAccountType(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1000F946C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A14C8);
  uint64_t v3 = OS_dispatch_queue.sync<A>(execute:)(sub_1000F9588, v1, v2);
  URLComponents.init()(v3);
  URLComponents.scheme.setter(0x7370747468LL, 0xE500000000000000LL);
  URLComponents.host.setter(v7[2], v7[3]);
  URLComponents.path.setter(v7[0], v7[1]);
  uint64_t v4 = (uint64_t (*)(void *, void))URLComponents.path.modify(v7);
  v5._countAndFlagsBits = 0x74696D6275732FLL;
  v5._object = (void *)0xE700000000000000LL;
  String.append(_:)(v5);
  return v4(v7, 0LL);
}

uint64_t sub_1000F9544@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for FMNAccountType(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_1000F9588@<X0>(void *a1@<X8>)
{
  return sub_10009CA14(v1, a1);
}

uint64_t sub_1000F95A0()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A1C8);
  sub_10000A720(v0, (uint64_t)qword_100A2A1C8);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x6857796669746F6ELL,  0xEF646E756F466E65LL);
}

uint64_t sub_1000F9620(uint64_t a1)
{
  v1[10] = a1;
  uint64_t v2 = type metadata accessor for XPCActivity.Criteria.Options(0LL);
  v1[11] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[12] = v3;
  v1[13] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for XPCActivity.Priority(0LL);
  v1[14] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[15] = v5;
  v1[16] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1000F96A8, 0LL, 0LL);
}

uint64_t sub_1000F96A8()
{
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  uint64_t v1 = qword_100A2A710;
  v0[17] = qword_100A2A710;
  uint64_t v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc(v2);
  v0[18] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1000F9774;
  return unsafeBlocking<A>(_:)(v0 + 6, sub_100015814, v1, &type metadata for Configuration);
}

uint64_t sub_1000F9774()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 136LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 144LL));
  swift_release(v1);
  return swift_task_switch(sub_1000F97D0, 0LL, 0LL);
}

uint64_t sub_1000F97D0()
{
  uint64_t v1 = sub_1006A0DB4(*(void *)(v0 + 48));
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v3 = (unsigned __int128)(v1 * (__int128)60LL) >> 64;
  *(void *)(v0 + 16) = 60 * v1;
  *(_BYTE *)(v0 + 24) = v3 != (60 * v1) >> 63;
  if (v3 == (60 * v1) >> 63)
  {
    uint64_t v4 = qword_100A2A710;
    *(void *)(v0 + 152) = qword_100A2A710;
    uint64_t v5 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    uint64_t v6 = (void *)swift_task_alloc(v5);
    *(void *)(v0 + 160) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1000F9898;
    return unsafeBlocking<A>(_:)(v0 + 56, sub_100015814, v4, &type metadata for Configuration);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000F9898()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 152LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 160LL));
  swift_release(v1);
  return swift_task_switch(sub_1000F98F4, 0LL, 0LL);
}

uint64_t sub_1000F98F4()
{
  uint64_t v1 = sub_1006A0DDC(*(void *)(v0 + 56));
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v3 = (unsigned __int128)(v1 * (__int128)60LL) >> 64;
  *(void *)(v0 + 32) = 60 * v1;
  *(_BYTE *)(v0 + 40) = v3 != (60 * v1) >> 63;
  if (v3 == (60 * v1) >> 63)
  {
    uint64_t v4 = qword_100A2A710;
    *(void *)(v0 + 168) = qword_100A2A710;
    uint64_t v5 = async function pointer to unsafeBlocking<A>(_:)[1];
    swift_retain();
    uint64_t v6 = (void *)swift_task_alloc(v5);
    *(void *)(v0 + 176) = v6;
    *uint64_t v6 = v0;
    v6[1] = sub_1000F99BC;
    return unsafeBlocking<A>(_:)(v0 + 64, sub_100015814, v4, &type metadata for Configuration);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000F99BC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 168LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 176LL));
  swift_release(v1);
  return swift_task_switch(sub_1000F9A18, 0LL, 0LL);
}

uint64_t sub_1000F9A18()
{
  uint64_t v1 = sub_1006A0DB4(*(void *)(v0 + 64));
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v3 = (unsigned __int128)(v1 * (__int128)60LL) >> 64;
  uint64_t v4 = 60 * v1;
  if (v3 == v4 >> 63)
  {
    uint64_t v5 = *(void *)(v0 + 128);
    uint64_t v7 = *(void *)(v0 + 96);
    uint64_t v6 = *(void *)(v0 + 104);
    uint64_t v8 = *(void *)(v0 + 88);
    uint64_t v19 = *(void *)(v0 + 32);
    uint64_t v18 = *(void *)(v0 + 16) / 10LL;
    uint64_t v9 = sub_100004AEC(&qword_1009A17D0);
    uint64_t v10 = swift_allocObject( v9,  ((*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80))
          + 5LL * *(void *)(v7 + 72),
            *(unsigned __int8 *)(v7 + 80) | 7LL);
    *(_OWORD *)(v10 + 16) = xmmword_1007E8280;
    uint64_t v11 = static XPCActivity.Criteria.Options.wakeDevice.getter();
    uint64_t v12 = static XPCActivity.Criteria.Options.powerNap.getter(v11);
    uint64_t v13 = static XPCActivity.Criteria.Options.allowBattery.getter(v12);
    uint64_t v14 = static XPCActivity.Criteria.Options.requiresNetwork.getter(v13);
    static XPCActivity.Criteria.Options.requiresClassC.getter(v14);
    *(void *)(v0 + 72) = v10;
    uint64_t v15 = sub_100015C48( &qword_10099CAF8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity.Criteria.Options,  (uint64_t)&protocol conformance descriptor for XPCActivity.Criteria.Options);
    uint64_t v16 = sub_100004AEC(&qword_1009A17D8);
    unint64_t v17 = sub_10011858C();
    dispatch thunk of SetAlgebra.init<A>(_:)(v0 + 72, v16, v17, v8, v15);
    XPCActivity.Criteria.init(priority:repeating:delay:gracePeriod:interval:options:)(v5, 1LL, v18, v19, v4, v6);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000F9BC0()
{
  *(void *)(v1 + 120) = v0;
  return swift_task_switch(sub_1000F9BD8, v0, 0LL);
}

uint64_t sub_1000F9BD8()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 128) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1000F9CC4;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1000F9CC4(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 120LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 128LL);
  *(void *)(*(void *)v1 + 136LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000F9D20, v3, 0LL);
}

uint64_t sub_1000F9D20()
{
  uint64_t v1 = (void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 136);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v2);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B118 != -1) {
      swift_once(&qword_10099B118, sub_1000F95A0);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2A1C8);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      uint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No BeaconStoreActor available!", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    unint64_t v9 = sub_1000157D0();
    uint64_t v10 = swift_allocError(&type metadata for DaemonError, v9, 0LL, 0LL);
    *uint64_t v11 = 0xD000000000000010LL;
    v11[1] = 0x8000000100850F20LL;
    swift_willThrow(v10);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000F9E74(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = a4;
  uint64_t v5 = (void *)swift_task_alloc(dword_1009A153C);
  *(void *)(v4 + 32) = v5;
  *uint64_t v5 = v4;
  v5[1] = sub_1000F9EC0;
  return sub_100103B5C();
}

uint64_t sub_1000F9EC0()
{
  uint64_t v3 = *(void *)(*(void *)v1 + 24LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 32LL);
  *(void *)(*(void *)v1 + 4Hasher.init(_seed:)(v1, 0LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v4 = sub_1000F9F54;
  }
  else {
    uint64_t v4 = sub_1000F9F24;
  }
  return swift_task_switch(v4, v3, 0LL);
}

uint64_t sub_1000F9F24()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000F9F54()
{
  if (qword_10099B118 != -1) {
    swift_once(&qword_10099B118, sub_1000F95A0);
  }
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2A1C8);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 40);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    unint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138543362;
    swift_errorRetain(v7);
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(void *)(v0 + 16) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *unint64_t v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to checkin xpc activity: %{public}@.", v8, 0xCu);
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);

    swift_errorRelease(v7);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 40));
    swift_errorRelease(v7);
    swift_errorRelease(v7);
  }

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FA120(uint64_t a1, uint64_t a2)
{
  v3[15] = a2;
  v3[16] = v2;
  v3[14] = a1;
  uint64_t v4 = sub_100004AEC(&qword_1009AA830);
  v3[17] = v4;
  v3[18] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for OwnedBeaconGroup(0LL);
  v3[19] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[20] = v6;
  v3[21] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  v3[22] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[23] = v8;
  uint64_t v9 = *(void *)(v8 + 64);
  v3[24] = v9;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v3[25] = swift_task_alloc(v10);
  v3[26] = swift_task_alloc(v10);
  uint64_t v11 = (void *)swift_task_alloc(dword_1009A14FC);
  v3[27] = v11;
  *uint64_t v11 = v3;
  v11[1] = sub_1000FA210;
  v11[15] = v2;
  return swift_task_switch(sub_1000F9BD8, v2, 0LL);
}

uint64_t sub_1000FA210(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 216);
  *(void *)(*v2 + 224) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = *(void *)(v4 + 128);
    uint64_t v7 = sub_1000FAC48;
  }

  else
  {
    *(void *)(v4 + 232) = a1;
    uint64_t v7 = sub_1000FA288;
    uint64_t v6 = a1;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_1000FA288()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v5 = *(void *)(v0 + 176);
  uint64_t v6 = *(void *)(v0 + 120);
  *(void *)(v0 + 240) = *(void *)(v1 + 136);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 248) = v7;
  v7(v2, v6, v5);
  LODWORD(v8) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 376) = v8;
  uint64_t v8 = v8;
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_10093EA78, v9 + v3, v8 | 7LL);
  *(void *)(v0 + 256) = v10;
  *(void *)(v10 + 16) = v1;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(void *)(v0 + 264) = v11;
  v11(v10 + v9, v2, v5);
  swift_retain();
  return swift_task_switch(sub_1000FA34C, 0LL, 0LL);
}

uint64_t sub_1000FA34C()
{
  uint64_t v1 = v0[32];
  uint64_t v2 = v0[30];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[34] = v3;
  v3[2] = v2;
  v3[3] = sub_1001185F0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[35] = v4;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A9C40);
  *uint64_t v4 = v0;
  v4[1] = sub_1000FA40C;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 7,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100118960,  v3,  v5);
}

uint64_t sub_1000FA40C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 272LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 128LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 280LL));
  swift_release();
  swift_release();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1000FA48C, v2, 0LL);
}

uint64_t sub_1000FA48C()
{
  uint64_t v1 = (__int128 *)(v0 + 7);
  if (v0[10])
  {
    sub_100012EC0(v1, (uint64_t)(v0 + 2));
    uint64_t v2 = (void *)swift_task_alloc(dword_1009A1514);
    v0[36] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1000FA54C;
    return sub_1000FDDD0(v0[14], (uint64_t)(v0 + 2));
  }

  else
  {
    sub_100015794((uint64_t)v1, (uint64_t *)&unk_1009A9C40);
    uint64_t v4 = (void *)swift_task_alloc(dword_1009A14FC);
    v0[38] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1000FA614;
    uint64_t v5 = v0[16];
    v4[15] = v5;
    return swift_task_switch(sub_1000F9BD8, v5, 0LL);
  }

uint64_t sub_1000FA54C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 288);
  *(void *)(*v1 + 296) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_1000FACA4;
  }
  else {
    uint64_t v4 = sub_1000FA5B0;
  }
  return swift_task_switch(v4, *(void *)(v2 + 128), 0LL);
}

uint64_t sub_1000FA5B0()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 144);
  swift_task_dealloc(*(void *)(v0 + 208));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FA614(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 304);
  *(void *)(*v2 + 312) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = *(void *)(v4 + 128);
    uint64_t v7 = sub_1000FAD08;
  }

  else
  {
    *(void *)(v4 + 320) = a1;
    uint64_t v7 = sub_1000FA68C;
    uint64_t v6 = a1;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_1000FA68C()
{
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 264);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 376);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 248);
  uint64_t v5 = *(void *)(v0 + 208);
  uint64_t v6 = *(void *)(v0 + 176);
  uint64_t v7 = *(void *)(v0 + 120);
  uint64_t v8 = (v3 + 24) & ~v3;
  uint64_t v9 = v8 + *(void *)(v0 + 192);
  uint64_t v10 = v3 | 7;
  *(void *)(v0 + 328) = *(void *)(v1 + 136);
  v4(v5, v7, v6);
  uint64_t v11 = swift_allocObject(&unk_10093EAA0, v9, v10);
  *(void *)(v0 + 336) = v11;
  *(void *)(v11 + 16) = v1;
  v2(v11 + v8, v5, v6);
  swift_retain();
  return swift_task_switch(sub_1000FA750, 0LL, 0LL);
}

uint64_t sub_1000FA750()
{
  uint64_t v2 = v0[41];
  uint64_t v1 = v0[42];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[43] = v3;
  v3[2] = v2;
  v3[3] = sub_100118674;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[44] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000FA7F8;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[18],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100118964,  v3,  v0[17]);
}

uint64_t sub_1000FA7F8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 344LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 128LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 352LL));
  swift_release();
  swift_release();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1000FA878, v2, 0LL);
}

uint64_t sub_1000FA878()
{
  uint64_t v1 = *(void *)(v0 + 144);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 160) + 48LL))( v1,  1LL,  *(void *)(v0 + 152)) == 1)
  {
    sub_100015794(v1, &qword_1009AA830);
    if (qword_10099B118 != -1) {
      swift_once(&qword_10099B118, sub_1000F95A0);
    }
    uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 248);
    uint64_t v3 = *(void *)(v0 + 200);
    uint64_t v4 = *(void *)(v0 + 176);
    uint64_t v5 = *(void *)(v0 + 120);
    uint64_t v6 = type metadata accessor for Logger(0LL);
    sub_10000A720(v6, (uint64_t)qword_100A2A1C8);
    uint64_t v7 = v2(v3, v5, v4);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.error.getter(v8);
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void *)(v0 + 200);
    uint64_t v12 = *(void *)(v0 + 176);
    uint64_t v13 = *(void *)(v0 + 184);
    if (v10)
    {
      uint64_t v14 = swift_slowAlloc(22LL, -1LL);
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      uint64_t v27 = v15;
      *(_DWORD *)uint64_t v14 = 141558275;
      *(void *)(v0 + 96) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v14 + 4, v14 + 12);
      *(_WORD *)(v14 + 12) = 2081;
      uint64_t v16 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v12, v16);
      *(void *)(v0 + 104) = sub_1003F11D4(v17, v18, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v14 + 14, v14 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "Beacon/group does not exist for given UUID %{private,mask.hash}s",  (uint8_t *)v14,  0x16u);
      swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(void, void))(v13 + 8))(*(void *)(v0 + 200), *(void *)(v0 + 176));
    }

    unint64_t v21 = sub_1001177B0();
    uint64_t v22 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v21, 0LL, 0LL);
    _BYTE *v23 = 0;
    swift_willThrow(v22);
    uint64_t v24 = *(void *)(v0 + 200);
    uint64_t v25 = *(void *)(v0 + 168);
    uint64_t v26 = *(void *)(v0 + 144);
    swift_task_dealloc(*(void *)(v0 + 208));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    sub_10002218C(v1, *(void *)(v0 + 168), type metadata accessor for OwnedBeaconGroup);
    uint64_t v19 = (void *)swift_task_alloc(dword_1009A150C);
    *(void *)(v0 + 360) = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_1000FAB78;
    return sub_1000FADD0(*(void *)(v0 + 112), *(void *)(v0 + 168));
  }

uint64_t sub_1000FAB78()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 360);
  *(void *)(*v1 + 368) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_1000FAD64;
  }
  else {
    uint64_t v4 = sub_1000FABDC;
  }
  return swift_task_switch(v4, *(void *)(v2 + 128), 0LL);
}

uint64_t sub_1000FABDC()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 144);
  swift_task_dealloc(*(void *)(v0 + 208));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FAC48()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 144);
  swift_task_dealloc(*(void *)(v0 + 208));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FACA4()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 144);
  swift_task_dealloc(*(void *)(v0 + 208));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FAD08()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 144);
  swift_task_dealloc(*(void *)(v0 + 208));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FAD64()
{
  uint64_t v1 = *(void *)(v0 + 200);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 144);
  swift_task_dealloc(*(void *)(v0 + 208));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FADD0(uint64_t a1, uint64_t a2)
{
  v3[38] = a2;
  v3[39] = v2;
  v3[37] = a1;
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009B14F0);
  v3[40] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[41] = v5;
  v3[42] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord(0LL);
  v3[43] = swift_task_alloc((*(void *)(*(void *)(found - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  v3[44] = v7;
  v3[45] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OwnedBeaconRecord(0LL);
  v3[46] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[47] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[48] = swift_task_alloc(v10);
  v3[49] = swift_task_alloc(v10);
  v3[50] = swift_task_alloc(v10);
  uint64_t v11 = sub_100004AEC(&qword_1009A1800);
  v3[51] = v11;
  v3[52] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_10099D8A0);
  v3[53] = swift_task_alloc((*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  v3[54] = v13;
  uint64_t v14 = *(void *)(v13 - 8);
  v3[55] = v14;
  uint64_t v15 = *(void *)(v14 + 64);
  v3[56] = v15;
  unint64_t v16 = (v15 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v3[57] = swift_task_alloc(v16);
  v3[58] = swift_task_alloc(v16);
  v3[59] = swift_task_alloc(v16);
  v3[60] = swift_task_alloc(v16);
  v3[61] = swift_task_alloc(v16);
  v3[62] = swift_task_alloc(v16);
  v3[63] = swift_task_alloc(v16);
  v3[64] = swift_task_alloc(v16);
  return swift_task_switch(sub_1000FAF94, v2, 0LL);
}

uint64_t sub_1000FAF94()
{
  uint64_t v1 = *(void *)(v0 + 512);
  uint64_t v2 = *(void *)(v0 + 432);
  uint64_t v3 = *(void *)(v0 + 440);
  uint64_t v4 = *(void *)(v0 + 304);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for OwnedBeaconGroup(0LL) + 24);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 520) = v6;
  v6(v1, v5, v2);
  if (qword_10099B118 != -1) {
    swift_once(&qword_10099B118, sub_1000F95A0);
  }
  uint64_t v7 = *(void *)(v0 + 504);
  uint64_t v8 = *(void *)(v0 + 512);
  uint64_t v9 = *(void *)(v0 + 496);
  uint64_t v10 = *(void *)(v0 + 432);
  uint64_t v11 = *(void *)(v0 + 296);
  uint64_t v12 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 528) = sub_10000A720(v12, (uint64_t)qword_100A2A1C8);
  v6(v7, v8, v10);
  uint64_t v13 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v9, v11, v10);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter(v14);
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v18 = *(void *)(v0 + 496);
  uint64_t v17 = *(void *)(v0 + 504);
  uint64_t v20 = *(void *)(v0 + 432);
  uint64_t v19 = *(void *)(v0 + 440);
  if (v16)
  {
    uint64_t v93 = *(void *)(v0 + 496);
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v97 = swift_slowAlloc(64LL, -1LL);
    v100[0] = v97;
    *(_DWORD *)uint64_t v21 = 141558531;
    *(void *)(v0 + 272) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v21 + 4, v21 + 12);
    *(_WORD *)(v21 + 12) = 2081;
    os_log_type_t type = v15;
    uint64_t v22 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v20, v22);
    *(void *)(v0 + 280) = sub_1003F11D4(v23, v24, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease();
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v25(v17, v20);
    *(_WORD *)(v21 + 22) = 2082;
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v20, v22);
    *(void *)(v0 + 288) = sub_1003F11D4(v26, v27, v100);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v21 + 24, v21 + 32);
    swift_bridgeObjectRelease();
    v25(v93, v20);
    _os_log_impl( (void *)&_mh_execute_header,  v14,  type,  "enableNotifyWhenFound for group %{private,mask.hash}s, commandId %{public}s",  (uint8_t *)v21,  0x20u);
    swift_arrayDestroy(v97, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v97, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  else
  {
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v25(*(void *)(v0 + 504), *(void *)(v0 + 432));
    v25(v18, v20);
  }

  *(void *)(v0 + 536) = v25;
  sub_1001CC778();
  *(void *)(v0 + 544) = v28;
  char v29 = *(_BYTE *)(v28 + 32);
  *(_BYTE *)(v0 + 832) = v29;
  uint64_t v30 = -1LL;
  uint64_t v31 = -1LL << v29;
  uint64_t v32 = *(void *)(v28 + 56);
  if (-v31 < 64) {
    uint64_t v30 = ~(-1LL << -(char)v31);
  }
  *(void *)(v0 + 552) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 568) = v25;
  *(void *)(v0 + 560) = v25;
  unint64_t v33 = v30 & v32;
  if (v33)
  {
    uint64_t v34 = 0LL;
    unint64_t v35 = __clz(__rbit64(v33));
    uint64_t v36 = (v33 - 1) & v33;
    goto LABEL_10;
  }

  unint64_t v47 = 63 - v31;
  if (v47 <= 0x7F) {
    goto LABEL_34;
  }
  unint64_t v48 = *(void *)(v28 + 64);
  if (!v48)
  {
    if (v47 >= 0xC0)
    {
      unint64_t v48 = *(void *)(v28 + 72);
      if (v48)
      {
        uint64_t v34 = 2LL;
        goto LABEL_18;
      }

      if (v47 >= 0x100)
      {
        unint64_t v48 = *(void *)(v28 + 80);
        if (v48)
        {
          uint64_t v34 = 3LL;
          goto LABEL_18;
        }

        if (v47 >= 0x140)
        {
          unint64_t v48 = *(void *)(v28 + 88);
          if (v48)
          {
            uint64_t v34 = 4LL;
            goto LABEL_18;
          }

          uint64_t v49 = 0LL;
          uint64_t v50 = v47 >> 6;
          if (v50 <= 5) {
            uint64_t v50 = 5LL;
          }
          uint64_t v51 = v50 - 5;
          while (v51 != v49)
          {
            unint64_t v48 = *(void *)(v28 + 96 + 8 * v49++);
            if (v48)
            {
              uint64_t v34 = v49 + 4;
              goto LABEL_18;
            }
          }
        }
      }
    }

LABEL_34:
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 440) + 56LL))( *(void *)(v0 + 424),  1LL,  1LL,  *(void *)(v0 + 432));
    goto LABEL_35;
  }

  uint64_t v34 = 1LL;
LABEL_18:
  uint64_t v36 = (v48 - 1) & v48;
  unint64_t v35 = __clz(__rbit64(v48)) + (v34 << 6);
LABEL_10:
  *(void *)(v0 + 584) = v36;
  *(void *)(v0 + 576) = v34;
  uint64_t v37 = *(void *)(v0 + 432);
  uint64_t v38 = *(void *)(v0 + 440);
  uint64_t v39 = *(void *)(v0 + 424);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 520))( v39,  *(void *)(v28 + 48) + *(void *)(v38 + 72) * v35,  v37);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v39, 0LL, 1LL, v37);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v39, 1LL, v37) == 1)
  {
LABEL_35:
    swift_release();
    uint64_t v52 = *(void *)(v0 + 552);
    uint64_t v53 = *(void *)(v52 + 16);
    *(void *)(v0 + 696) = v53;
    if (v53)
    {
      uint64_t v55 = *(void *)(v0 + 368);
      uint64_t v54 = *(void *)(v0 + 376);
      int v56 = *(_DWORD *)(v54 + 80);
      *(_DWORD *)(v0 + 828) = v56;
      *(void *)(v0 + 704) = *(void *)(v54 + 72);
      *(void *)(v0 + 720) = _swiftEmptyArrayStorage;
      *(void *)(v0 + 712) = 0LL;
      uint64_t v57 = *(void *)(v0 + 384);
      uint64_t v58 = sub_10001DC4C( v52 + ((v56 + 32LL) & ~(unint64_t)v56),  v57,  type metadata accessor for OwnedBeaconRecord);
      UUID.init()(v58);
      uint64_t v59 = v57 + *(int *)(v55 + 20);
      unint64_t v60 = (void *)swift_task_alloc(dword_1009A151C);
      *(void *)(v0 + 728) = v60;
      *unint64_t v60 = v0;
      v60[1] = sub_1000FCF34;
      return sub_1000FEA58(*(void *)(v0 + 344), *(void *)(v0 + 472), v59);
    }

    uint64_t v61 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 520);
    uint64_t v62 = *(void *)(v0 + 512);
    uint64_t v63 = *(void *)(v0 + 456);
    uint64_t v64 = *(void *)(v0 + 432);
    swift_bridgeObjectRelease();
    uint64_t v65 = v61(v63, v62, v64);
    uint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
    os_log_type_t v67 = static os_log_type_t.error.getter(v66);
    BOOL v68 = os_log_type_enabled(v66, v67);
    uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v0 + 536);
    uint64_t v70 = *(void *)(v0 + 456);
    uint64_t v71 = *(void *)(v0 + 432);
    if (v68)
    {
      uint64_t v72 = swift_slowAlloc(22LL, -1LL);
      uint64_t v73 = swift_slowAlloc(32LL, -1LL);
      v100[0] = v73;
      *(_DWORD *)uint64_t v72 = 141558275;
      *(void *)(v0 + 248) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v72 + 4, v72 + 12);
      *(_WORD *)(v72 + 12) = 2081;
      uint64_t v74 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter(v71, v74);
      *(void *)(v0 + 240) = sub_1003F11D4(v75, v76, v100);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v72 + 14, v72 + 22);
      swift_bridgeObjectRelease();
      v69(v70, v71);
      _os_log_impl( (void *)&_mh_execute_header,  v66,  v67,  "No eligible member beacon to enable notify when found for group %{private,mask.hash}s",  (uint8_t *)v72,  0x16u);
      swift_arrayDestroy(v73, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v73, -1LL, -1LL);
      swift_slowDealloc(v72, -1LL, -1LL);
    }

    else
    {
      v69(*(void *)(v0 + 456), *(void *)(v0 + 432));
    }

    unint64_t v77 = sub_1001177B0();
    uint64_t v99 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v77, 0LL, 0LL);
    *uint64_t v78 = 0;
    swift_willThrow(v99);
    uint64_t v80 = *(void *)(v0 + 504);
    uint64_t v79 = *(void *)(v0 + 512);
    uint64_t v82 = *(void *)(v0 + 488);
    uint64_t v81 = *(void *)(v0 + 496);
    uint64_t v83 = *(void *)(v0 + 472);
    uint64_t v84 = *(void *)(v0 + 480);
    uint64_t v86 = *(void *)(v0 + 456);
    uint64_t v85 = *(void *)(v0 + 464);
    uint64_t v87 = *(void *)(v0 + 424);
    uint64_t v88 = *(void *)(v0 + 416);
    uint64_t v89 = *(void *)(v0 + 400);
    uint64_t v90 = *(void *)(v0 + 392);
    *(void *)typea = *(void *)(v0 + 384);
    uint64_t v94 = *(void *)(v0 + 360);
    os_log_t log = *(os_log_t *)(v0 + 344);
    uint64_t v96 = *(void *)(v0 + 336);
    (*(void (**)(uint64_t, void))(v0 + 536))(v79, *(void *)(v0 + 432));
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    swift_task_dealloc(v83);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(*(void *)typea);
    swift_task_dealloc(v94);
    swift_task_dealloc(log);
    swift_task_dealloc(v96);
    unint64_t v46 = *(uint64_t (**)(void))(v0 + 8);
    return v46();
  }

  uint64_t v40 = *(void *)(v0 + 488);
  uint64_t v41 = *(void *)(v0 + 432);
  uint64_t v42 = *(void *)(v0 + 424);
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 440) + 32LL);
  *(void *)(v0 + 592) = v43;
  v43(v40, v42, v41);
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 216, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 136, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 160))
  {
    sub_100012EC0((__int128 *)(v0 + 136), v0 + 176);
    sub_100012ED8((void *)(v0 + 176), *(void *)(v0 + 200));
    uint64_t v98 = (uint64_t (*)(void))((char *)&dword_10099C890 + dword_10099C890);
    uint64_t v45 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 600) = v45;
    *uint64_t v45 = v0;
    v45[1] = sub_1000FB830;
    unint64_t v46 = v98;
    return v46();
  }

  __break(1u);
  return result;
}

    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 344) + 56LL))( *(void *)(v0 + 328),  1LL,  1LL,  *(void *)(v0 + 336));
    goto LABEL_35;
  }

  uint64_t v34 = 1LL;
LABEL_18:
  uint64_t v36 = (v48 - 1) & v48;
  unint64_t v35 = __clz(__rbit64(v48)) + (v34 << 6);
LABEL_10:
  *(void *)(v0 + 464) = v34;
  *(void *)(v0 + 472) = v36;
  uint64_t v37 = *(void *)(v0 + 336);
  uint64_t v38 = *(void *)(v0 + 344);
  uint64_t v39 = *(void *)(v0 + 328);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 416))( v39,  *(void *)(v28 + 48) + *(void *)(v38 + 72) * v35,  v37);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v38 + 56))(v39, 0LL, 1LL, v37);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v38 + 48))(v39, 1LL, v37) == 1)
  {
LABEL_35:
    swift_release();
    uint64_t v52 = *(void *)(v0 + 448);
    uint64_t v53 = *(void *)(v52 + 16);
    *(void *)(v0 + 536) = v53;
    if (v53)
    {
      uint64_t v55 = *(void *)(v0 + 280);
      uint64_t v54 = *(void *)(v0 + 288);
      int v56 = *(_DWORD *)(v54 + 80);
      *(_DWORD *)(v0 + 648) = v56;
      *(void *)(v0 + 544) = *(void *)(v54 + 72);
      *(_OWORD *)(v0 + 552) = 0u;
      uint64_t v57 = *(void *)(v0 + 304);
      sub_10001DC4C( v52 + ((v56 + 32LL) & ~(unint64_t)v56),  v57,  type metadata accessor for OwnedBeaconRecord);
      *(void *)(v0 + 40) = v55;
      *(void *)(v0 + 48) = sub_100015C48( (unint64_t *)&qword_10099D000,  255LL,  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_10080B120);
      uint64_t v58 = sub_10000A7C8((void *)(v0 + 16));
      sub_10001DC4C(v57, (uint64_t)v58, type metadata accessor for OwnedBeaconRecord);
      uint64_t v59 = (void *)swift_task_alloc(dword_1009A1534);
      *(void *)(v0 + 568) = v59;
      *uint64_t v59 = v0;
      v59[1] = sub_1001018CC;
      return sub_1001026D0(*(void *)(v0 + 240), v0 + 16);
    }

    unint64_t v60 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 416);
    uint64_t v61 = *(void *)(v0 + 408);
    uint64_t v62 = *(void *)(v0 + 360);
    uint64_t v63 = *(void *)(v0 + 336);
    swift_bridgeObjectRelease();
    uint64_t v64 = v60(v62, v61, v63);
    uint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
    uint64_t v66 = static os_log_type_t.error.getter(v65);
    os_log_type_t v67 = os_log_type_enabled(v65, v66);
    BOOL v68 = *(void (**)(uint64_t, uint64_t))(v0 + 432);
    uint64_t v69 = *(void *)(v0 + 360);
    uint64_t v70 = *(void *)(v0 + 336);
    if (v67)
    {
      uint64_t v71 = swift_slowAlloc(22LL, -1LL);
      uint64_t v72 = swift_slowAlloc(32LL, -1LL);
      v95[0] = v72;
      *(_DWORD *)uint64_t v71 = 141558275;
      *(void *)(v0 + 176) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v71 + 4, v71 + 12);
      *(_WORD *)(v71 + 12) = 2081;
      uint64_t v73 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v74 = dispatch thunk of CustomStringConvertible.description.getter(v70, v73);
      *(void *)(v0 + 184) = sub_1003F11D4(v74, v75, v95);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v71 + 14, v71 + 22);
      swift_bridgeObjectRelease();
      v68(v69, v70);
      _os_log_impl( (void *)&_mh_execute_header,  v65,  v66,  "No eligible member beacon to disable notify when found for group %{private,mask.hash}s",  (uint8_t *)v71,  0x16u);
      swift_arrayDestroy(v72, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v72, -1LL, -1LL);
      swift_slowDealloc(v71, -1LL, -1LL);
    }

    else
    {
      v68(*(void *)(v0 + 360), *(void *)(v0 + 336));
    }

    unint64_t v76 = sub_1001177B0();
    loga = (os_log_t)swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v76, 0LL, 0LL);
    void *v77 = 0;
    swift_willThrow(loga);
    uint64_t v79 = *(void *)(v0 + 400);
    uint64_t v78 = *(void *)(v0 + 408);
    uint64_t v81 = *(void *)(v0 + 384);
    uint64_t v80 = *(void *)(v0 + 392);
    uint64_t v83 = *(void *)(v0 + 368);
    uint64_t v82 = *(void *)(v0 + 376);
    uint64_t v84 = *(void *)(v0 + 360);
    uint64_t v85 = *(void *)(v0 + 328);
    uint64_t v86 = *(void *)(v0 + 320);
    uint64_t v87 = *(void *)(v0 + 312);
    uint64_t v88 = *(void *)(v0 + 304);
    *(void *)typea = *(void *)(v0 + 296);
    uint64_t v92 = *(void *)(v0 + 272);
    (*(void (**)(uint64_t, void))(v0 + 432))(v78, *(void *)(v0 + 336));
    swift_task_dealloc(v78);
    swift_task_dealloc(v79);
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(*(void *)typea);
    swift_task_dealloc(v92);
    unint64_t v46 = *(uint64_t (**)(void))(v0 + 8);
    return v46();
  }

  uint64_t v40 = *(void *)(v0 + 384);
  uint64_t v41 = *(void *)(v0 + 336);
  uint64_t v42 = *(void *)(v0 + 328);
  uint64_t v43 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 344) + 32LL);
  *(void *)(v0 + 480) = v43;
  v43(v40, v42, v41);
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 136, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 96);
    sub_100012ED8((void *)(v0 + 96), *(void *)(v0 + 120));
    os_log_t log = (os_log_t)((char *)&dword_10099C890 + dword_10099C890);
    uint64_t v45 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 488) = v45;
    *uint64_t v45 = v0;
    v45[1] = sub_100100D78;
    unint64_t v46 = (uint64_t (*)(void))log;
    return v46();
  }

  __break(1u);
  return result;
}

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v16, 1LL, 1LL, v8);
LABEL_35:
  swift_release();
  uint64_t v57 = v58;
  sub_1001ABC0C(a3);
  if (v57) {
    dispatch_group_leave(v57);
  }
}

  __break(1u);
LABEL_35:
  __break(1u);
LABEL_36:
  __break(1u);
}

  __break(1u);
}

    BOOL v16 = (v25 - 1) & v25;
    uint64_t v17 = __clz(__rbit64(v25)) + (v18 << 6);
    goto LABEL_35;
  }

  __break(1u);
}

    uint64_t v18 = (v27 - 1) & v27;
    uint64_t v19 = __clz(__rbit64(v27)) + (v20 << 6);
    goto LABEL_35;
  }

  __break(1u);
}

    swift_once(&qword_10099B850, sub_1006BAC84);
    goto LABEL_17;
  }

  uint64_t v54 = v152;
  sub_10002218C((uint64_t)v18, v152, type metadata accessor for SecureLocationsCachedSharedKey);
  uint64_t v75 = (uint64_t *)(v54 + v51[7]);
  unint64_t v76 = v75[1];
  if (v76 >> 60 == 15)
  {
    unint64_t v46 = v159;
    if (qword_10099B5E0 != -1) {
      swift_once(&qword_10099B5E0, sub_1005C6624);
    }
    unint64_t v77 = type metadata accessor for Logger(0LL);
    sub_10000A720(v77, (uint64_t)qword_100A2AE08);
    uint64_t v78 = swift_bridgeObjectRetain_n(v46, 2LL);
    uint64_t v79 = (os_log_s *)Logger.logObject.getter(v78);
    uint64_t v80 = static os_log_type_t.default.getter(v79);
    uint64_t v81 = os_log_type_enabled(v79, v80);
    uint64_t v45 = v157;
    if (v81)
    {
      uint64_t v82 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v83 = swift_slowAlloc(32LL, -1LL);
      *(void *)&uint64_t v167 = v83;
      *(_DWORD *)uint64_t v82 = 136315138;
      swift_bridgeObjectRetain(v46);
      *(void *)&uint64_t v164 = sub_1003F11D4(v45, v46, (uint64_t *)&v167);
      uint64_t v50 = (uint64_t)v156;
      uint64_t v54 = v152;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, (char *)&v164 + 8, v82 + 4, v82 + 12);
      swift_bridgeObjectRelease_n(v46, 3LL);
      _os_log_impl( (void *)&_mh_execute_header,  v79,  v80,  "Found shared key record but no locationId for %s. Looks like we didn't receive keys",  v82,  0xCu);
      swift_arrayDestroy(v83, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v83, -1LL, -1LL);
      swift_slowDealloc(v82, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v46, 2LL);
    }

    uint64_t v49 = v158;
    if (qword_10099B850 == -1) {
      goto LABEL_17;
    }
    goto LABEL_34;
  }

  uint64_t v84 = *v75;
  LOBYTE(v170) = 0;
  uint64_t v151 = v84;
  uint64_t v153 = v76;
  sub_10001736C(v84, v76);
  unint64_t v46 = v159;
  uint64_t v142 = v31;
  if ((v147 & 1) == 0)
  {
    uint64_t v85 = v50;
    uint64_t v86 = v146;
    sub_10050C994(v85, v146);
    uint64_t v87 = type metadata accessor for SecureLocationsCachedPayload(0LL);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v87 - 8) + 48LL))(v86, 1LL, v87) == 1)
    {
      sub_100015794(v86, &qword_1009A7110);
      LOBYTE(v170) = 1;
      if (qword_10099B850 != -1) {
        swift_once(&qword_10099B850, sub_1006BAC84);
      }
      swift_retain();
      uint64_t v88 = v157;
      sub_1006BC458(v157, v46, 0);
      swift_release();
      if (qword_10099B5E0 != -1) {
        swift_once(&qword_10099B5E0, sub_1005C6624);
      }
      uint64_t v89 = type metadata accessor for Logger(0LL);
      sub_10000A720(v89, (uint64_t)qword_100A2AE08);
      uint64_t v90 = swift_bridgeObjectRetain_n(v46, 2LL);
      int v91 = (os_log_s *)Logger.logObject.getter(v90);
      uint64_t v92 = static os_log_type_t.default.getter(v91);
      if (os_log_type_enabled(v91, v92))
      {
        uint64_t v154 = v30;
        uint64_t v93 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v94 = swift_slowAlloc(32LL, -1LL);
        *(void *)&uint64_t v167 = v94;
        *(_DWORD *)uint64_t v93 = 136315138;
        swift_bridgeObjectRetain(v46);
        *(void *)&uint64_t v164 = sub_1003F11D4(v88, v46, (uint64_t *)&v167);
        uint64_t v30 = v154;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, (char *)&v164 + 8, v93 + 4, v93 + 12);
        swift_bridgeObjectRelease_n(v46, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v91, v92, "subscribeAndFetch data %s no cached location", v93, 0xCu);
        swift_arrayDestroy(v94, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v94, -1LL, -1LL);
        swift_slowDealloc(v93, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v46, 2LL);
      }

      uint64_t v53 = &off_10099B000;
    }

    else
    {
      uint64_t v95 = v143;
      sub_10001DC4C(v86 + *(int *)(v87 + 20), v143, type metadata accessor for SecureLocation);
      sub_100018C68(v86, type metadata accessor for SecureLocationsCachedPayload);
      uint64_t v96 = v145;
      sub_10002218C(v95, v145, type metadata accessor for SecureLocation);
      if (qword_10099B5E8 != -1) {
        swift_once(&qword_10099B5E8, sub_1005C66A4);
      }
      uint64_t v154 = v30;
      swift_retain();
      uint64_t v97 = sub_1005C825C(v96);
      swift_release();
      uint64_t v98 = (v97 & 1) != 0 && [v155 subscriptionMode] == 0;
      uint64_t v99 = v157;
      uint64_t v100 = (uint64_t)v144;
      LODWORD(v150) = v98;
      LOBYTE(v170) = v98;
      if (qword_10099B850 != -1) {
        swift_once(&qword_10099B850, sub_1006BAC84);
      }
      swift_retain();
      unint64_t v46 = v159;
      sub_1006BC458(v99, v159, 2);
      swift_release();
      if (qword_10099B5E0 != -1) {
        swift_once(&qword_10099B5E0, sub_1005C6624);
      }
      uint64_t v101 = type metadata accessor for Logger(0LL);
      sub_10000A720(v101, (uint64_t)qword_100A2AE08);
      sub_10001DC4C(v96, v100, type metadata accessor for SecureLocation);
      uint64_t v102 = swift_bridgeObjectRetain_n(v46, 2LL);
      uint64_t v103 = (os_log_s *)Logger.logObject.getter(v102);
      uint64_t v104 = static os_log_type_t.default.getter(v103);
      if (os_log_type_enabled(v103, v104))
      {
        uint64_t v105 = swift_slowAlloc(28LL, -1LL);
        uint64_t v106 = swift_slowAlloc(64LL, -1LL);
        *(void *)&uint64_t v167 = v106;
        *(_DWORD *)uint64_t v105 = 136315650;
        swift_bridgeObjectRetain(v46);
        *(void *)&uint64_t v164 = sub_1003F11D4(v99, v46, (uint64_t *)&v167);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, (char *)&v164 + 8, v105 + 4, v105 + 12);
        swift_bridgeObjectRelease_n(v46, 3LL);
        *(_WORD *)(v105 + 12) = 2080;
        uint64_t v107 = sub_1005EE53C();
        *(void *)&uint64_t v164 = sub_1003F11D4(v107, v108, (uint64_t *)&v167);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, (char *)&v164 + 8, v105 + 14, v105 + 22);
        swift_bridgeObjectRelease();
        sub_100018C68(v100, type metadata accessor for SecureLocation);
        *(_WORD *)(v105 + 22) = 1024;
        LODWORD(v164) = v150;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v164, (char *)&v164 + 4, v105 + 24, v105 + 28);
        _os_log_impl( (void *)&_mh_execute_header,  v103,  v104,  "subscribeAndFetch data %s got cached location %s isAging %{BOOL}d",  (uint8_t *)v105,  0x1Cu);
        swift_arrayDestroy(v106, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v106, -1LL, -1LL);
        uint64_t v109 = v105;
        uint64_t v53 = &off_10099B000;
        swift_slowDealloc(v109, -1LL, -1LL);

        uint64_t v110 = v145;
      }

      else
      {

        sub_100018C68(v100, type metadata accessor for SecureLocation);
        swift_bridgeObjectRelease_n(v46, 2LL);
        uint64_t v110 = v96;
      }

      sub_100018C68(v110, type metadata accessor for SecureLocation);
      uint64_t v30 = v154;
    }
  }

  if (v53[266] != (_UNKNOWN *)-1LL) {
    swift_once(&qword_10099B850, sub_1006BAC84);
  }
  swift_retain();
  uint64_t v45 = v157;
  sub_1006BC188(v157, v46, 1);
  swift_release();
  *(void *)&uint64_t v111 = swift_beginAccess(&v170, &v167, 0LL, 0LL).n128_u64[0];
  if ((v170 & 1) == 0 && (v147 & 1) == 0) {
    goto LABEL_58;
  }
  uint64_t v112 = objc_msgSend(v155, "clientApp", v111, v142);
  uint64_t v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v112);
  uint64_t v115 = v114;

  if (v113 == 0xD000000000000017LL && v115 == 0x800000010085B0C0LL) {
    goto LABEL_56;
  }
  uint64_t v116 = _stringCompareWithSmolCheck(_:_:expecting:)(v113, v115, 0xD000000000000017LL, 0x800000010085B0C0LL, 0LL);
  swift_bridgeObjectRelease();
  if ((v116 & 1) == 0)
  {
    uint64_t v127 = [v155 clientApp];
    uint64_t v128 = static String._unconditionallyBridgeFromObjectiveC(_:)(v127);
    uint64_t v130 = v129;

    if (v128 == 0xD000000000000015LL && v130 == 0x800000010085B0A0LL)
    {
LABEL_56:
      swift_bridgeObjectRelease();
      goto LABEL_58;
    }

    uint64_t v131 = _stringCompareWithSmolCheck(_:_:expecting:)(v128, v130, 0xD000000000000015LL, 0x800000010085B0A0LL, 0LL);
    swift_bridgeObjectRelease();
    if ((v131 & 1) == 0)
    {
      if (qword_10099B5E0 != -1) {
        swift_once(&qword_10099B5E0, sub_1005C6624);
      }
      uint64_t v132 = type metadata accessor for Logger(0LL);
      sub_10000A720(v132, (uint64_t)qword_100A2AE08);
      uint64_t v133 = swift_bridgeObjectRetain_n(v46, 2LL);
      uint64_t v134 = (os_log_s *)Logger.logObject.getter(v133);
      uint64_t v135 = static os_log_type_t.default.getter(v134);
      if (os_log_type_enabled(v134, v135))
      {
        uint64_t v136 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v137 = swift_slowAlloc(32LL, -1LL);
        *(void *)&uint64_t v164 = v137;
        *(_DWORD *)uint64_t v136 = 136315138;
        swift_bridgeObjectRetain(v46);
        uint64_t v162 = sub_1003F11D4(v45, v46, (uint64_t *)&v164);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v162, &v163, v136 + 4, v136 + 12);
        swift_bridgeObjectRelease_n(v46, 3LL);
        _os_log_impl( (void *)&_mh_execute_header,  v134,  v135,  "We may have stale locationId. Requesting new keys for %s",  v136,  0xCu);
        swift_arrayDestroy(v137, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v137, -1LL, -1LL);
        swift_slowDealloc(v136, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v46, 2LL);
      }

      uint64_t v49 = v158;
      uint64_t v138 = v142;
      uint64_t v139 = v151;
      uint64_t v140 = sub_100004AEC(&qword_10099D3B8);
      unint64_t v47 = (void *)swift_allocObject(v140, 48LL, 7LL);
      *((_OWORD *)v47 + 1) = xmmword_1007E67D0;
      uint64_t v141 = v153;
      v47[4] = v139;
      v47[5] = v141;
      sub_100018C68(v54, type metadata accessor for SecureLocationsCachedSharedKey);
      (*(void (**)(char *, uint64_t))(v138 + 8))(v156, v30);
      swift_bridgeObjectRetain(v46);
      unint64_t v48 = 1;
      goto LABEL_11;
    }
  }

    swift_bridgeObjectRelease();
    uint64_t v65 = (uint64_t)v118;
    sub_1000F0A44((uint64_t)v46, (uint64_t)v118);
    swift_release();
    uint64_t v66 = v124;
    sub_10001581C(v65, v124, (uint64_t *)&unk_1009A5990);
    if ((*((unsigned int (**)(uint64_t, uint64_t, uint64_t))v131 + 6))(v66, 1LL, v47) == 1)
    {
      sub_100015794(v66, (uint64_t *)&unk_1009A5990);
      os_log_type_t v67 = v128;
      if (qword_10099B4C8 != -1) {
        swift_once(&qword_10099B4C8, sub_10047B404);
      }
      BOOL v68 = type metadata accessor for Logger(0LL);
      sub_10000A720(v68, (uint64_t)qword_100A2AAA0);
      uint64_t v69 = sub_100013044((uint64_t)v141, (uint64_t)&v134);
      uint64_t v70 = (os_log_s *)Logger.logObject.getter(v69);
      uint64_t v71 = static os_log_type_t.default.getter(v70);
      if (os_log_type_enabled(v70, v71))
      {
        uint64_t v72 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v73 = swift_slowAlloc(32LL, -1LL);
        uint64_t v133 = v73;
        *(_DWORD *)uint64_t v72 = 136315138;
        uint64_t v74 = (char *)sub_100012ED8(&v134, *((uint64_t *)&v135 + 1));
        uint64_t v75 = v120;
        (*(void (**)(char *, char *, uint64_t))(v126 + 16))(v120, &v74[*(int *)(v127 + 20)], v67);
        unint64_t v76 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        unint64_t v77 = dispatch thunk of CustomStringConvertible.description.getter(v67, v76);
        uint64_t v79 = v78;
        v117((uint64_t)v75, v67);
        uint64_t v132 = sub_1003F11D4(v77, v79, &v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v72 + 4, v72 + 12);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v134);
        _os_log_impl( (void *)&_mh_execute_header,  v70,  v71,  "Can't monitor beacon: %s due to: airpods but missing last BT observation.",  v72,  0xCu);
        swift_arrayDestroy(v73, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v73, -1LL, -1LL);
        swift_slowDealloc(v72, -1LL, -1LL);

        uint64_t v80 = (uint64_t)v118;
        goto LABEL_52;
      }

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v134);
LABEL_51:
      uint64_t v80 = v65;
LABEL_52:
      sub_100015794(v80, (uint64_t *)&unk_1009A5990);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v137);
LABEL_53:
      uint64_t v34 = 1LL;
      goto LABEL_54;
    }

    uint64_t v81 = v66;
    uint64_t v82 = (uint64_t)v119;
    sub_10002218C(v81, (uint64_t)v119, type metadata accessor for BeaconObservation);
    uint64_t v83 = v121;
    static Date.trustedNow.getter(v121);
    uint64_t v84 = Date.timeIntervalSince(_:)(v82 + *(int *)(v47 + 20));
    (*(void (**)(uint64_t, uint64_t))(v122 + 8))(v83, v123);
    OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
    sub_1006A14F4(v134);
    uint64_t v86 = v85;
    swift_bridgeObjectRelease();
    if (v86 < v84)
    {
      uint64_t v87 = v128;
      if (qword_10099B4C8 != -1) {
        swift_once(&qword_10099B4C8, sub_10047B404);
      }
      uint64_t v88 = type metadata accessor for Logger(0LL);
      sub_10000A720(v88, (uint64_t)qword_100A2AAA0);
      uint64_t v89 = sub_100013044((uint64_t)v141, (uint64_t)&v134);
      uint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
      int v91 = static os_log_type_t.default.getter(v90);
      if (os_log_type_enabled(v90, v91))
      {
        uint64_t v92 = swift_slowAlloc(32LL, -1LL);
        uint64_t v93 = swift_slowAlloc(32LL, -1LL);
        uint64_t v133 = v93;
        *(_DWORD *)uint64_t v92 = 136315650;
        uint64_t v131 = (uint8_t *)(v92 + 4);
        uint64_t v94 = (char *)sub_100012ED8(&v134, *((uint64_t *)&v135 + 1));
        uint64_t v95 = (void (*)(char *, uint64_t))v40;
        uint64_t v96 = v120;
        (*(void (**)(char *, char *, uint64_t))(v126 + 16))(v120, &v94[*(int *)(v127 + 20)], v87);
        uint64_t v97 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v98 = dispatch thunk of CustomStringConvertible.description.getter(v87, v97);
        uint64_t v100 = v99;
        v95(v96, v87);
        uint64_t v132 = sub_1003F11D4(v98, v100, &v133);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v131, v92 + 12);
        swift_bridgeObjectRelease();
        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v134);
        *(_WORD *)(v92 + 12) = 2048;
        uint64_t v132 = *(void *)&v84;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v92 + 14, v92 + 22);
        *(_WORD *)(v92 + 22) = 2048;
        uint64_t v132 = *(void *)&v86;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v92 + 24, v92 + 32);
        _os_log_impl( (void *)&_mh_execute_header,  v90,  v91,  "Can't monitor beacon: %s due to: airpods but expired (%f > %f sec ago)",  (uint8_t *)v92,  0x20u);
        swift_arrayDestroy(v93, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v93, -1LL, -1LL);
        swift_slowDealloc(v92, -1LL, -1LL);
      }

      else
      {

        _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v134);
      }

      sub_100018C68((uint64_t)v119, type metadata accessor for BeaconObservation);
      goto LABEL_51;
    }

    uint64_t v101 = v128;
    if (qword_10099B4C8 != -1) {
      swift_once(&qword_10099B4C8, sub_10047B404);
    }
    uint64_t v102 = type metadata accessor for Logger(0LL);
    sub_10000A720(v102, (uint64_t)qword_100A2AAA0);
    uint64_t v103 = sub_100013044((uint64_t)v141, (uint64_t)&v134);
    uint64_t v104 = (os_log_s *)Logger.logObject.getter(v103);
    uint64_t v105 = static os_log_type_t.default.getter(v104);
    if (os_log_type_enabled(v104, v105))
    {
      uint64_t v106 = swift_slowAlloc(32LL, -1LL);
      uint64_t v107 = swift_slowAlloc(32LL, -1LL);
      uint64_t v133 = v107;
      *(_DWORD *)uint64_t v106 = 136315650;
      uint64_t v131 = (uint8_t *)(v106 + 4);
      uint64_t v108 = (char *)sub_100012ED8(&v134, *((uint64_t *)&v135 + 1));
      uint64_t v109 = (void (*)(char *, uint64_t))v40;
      uint64_t v110 = v120;
      (*(void (**)(char *, char *, uint64_t))(v126 + 16))(v120, &v108[*(int *)(v127 + 20)], v101);
      uint64_t v111 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v112 = dispatch thunk of CustomStringConvertible.description.getter(v101, v111);
      uint64_t v114 = v113;
      v109(v110, v101);
      uint64_t v132 = sub_1003F11D4(v112, v114, &v133);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v131, v106 + 12);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v134);
      *(_WORD *)(v106 + 12) = 2048;
      uint64_t v132 = *(void *)&v84;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v106 + 14, v106 + 22);
      *(_WORD *)(v106 + 22) = 2048;
      uint64_t v132 = *(void *)&v86;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v132, &v133, v106 + 24, v106 + 32);
      _os_log_impl( (void *)&_mh_execute_header,  v104,  v105,  "Will monitor beacon: %s due to: airpods, not expired (%f < %f sec ago)",  (uint8_t *)v106,  0x20u);
      swift_arrayDestroy(v107, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v107, -1LL, -1LL);
      swift_slowDealloc(v106, -1LL, -1LL);
    }

    else
    {

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v134);
    }

    sub_100018C68((uint64_t)v119, type metadata accessor for BeaconObservation);
    sub_100015794(v65, (uint64_t *)&unk_1009A5990);
    unint64_t v33 = v137;
  }

  else
  {
    unint64_t v33 = v140;
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v33);
  uint64_t v34 = 0LL;
LABEL_54:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v141);
  return v34;
}

          __break(1u);
          return result;
        }
      }
    }
  }

              uint64_t v135 = sub_100004AEC(&qword_1009A6DD0);
              memcpy((void *)v121, v122, *(void *)(*(void *)(v135 - 8) + 64LL));
              goto LABEL_71;
            }

            if (v126)
            {
              sub_100018C68(v121, type metadata accessor for AccessoryInfoResponseContent.Configuration);
              goto LABEL_34;
            }

            *(void *)uint64_t v121 = *(void *)v122;
            uint64_t v213 = *((void *)v122 + 1);
            *(void *)(v121 + 8) = v213;
            swift_bridgeObjectRetain(v213);
            swift_bridgeObjectRelease();
            *(void *)(v121 + 16) = *((void *)v122 + 2);
            uint64_t v214 = *((void *)v122 + 3);
            *(void *)(v121 + 24) = v214;
            swift_bridgeObjectRetain(v214);
            swift_bridgeObjectRelease();
            *(void *)(v121 + 32) = *((void *)v122 + 4);
            __n128 v215 = *((void *)v122 + 5);
            *(void *)(v121 + 40) = v215;
            swift_bridgeObjectRetain(v215);
            swift_bridgeObjectRelease();
            *(_WORD *)(v121 + 48) = *((_WORD *)v122 + 24);
            *(void *)(v121 + 56) = *((void *)v122 + 7);
            int v216 = *((void *)v122 + 8);
            *(_BYTE *)(v121 + 72) = v122[72];
            *(void *)(v121 + 64) = v216;
            size_t v217 = v123[10];
            uint64_t v218 = &v122[v217];
            uint64_t v338 = (void *)(v121 + v217);
            uint64_t v219 = ((uint64_t (*)(void))v80)();
            uint64_t v220 = v80(v218, 1LL, v78);
            if (v219)
            {
              if (v220)
              {
                uint64_t v221 = *(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL);
                uint64_t v222 = v338;
LABEL_59:
                memcpy(v222, v218, v221);
                goto LABEL_62;
              }

              (*(void (**)(void *, _BYTE *, uint64_t))(v344 + 16))(v338, v218, v78);
              (*(void (**)(void *, void, uint64_t, uint64_t))(v344 + 56))(v338, 0LL, 1LL, v78);
            }

            else
            {
              if (v220)
              {
                (*(void (**)(void *, uint64_t))(v344 + 8))(v338, v78);
                uint64_t v221 = *(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL);
                uint64_t v222 = v338;
                goto LABEL_59;
              }

              (*(void (**)(void *, _BYTE *, uint64_t))(v344 + 24))(v338, v218, v78);
            }

              uint64_t v105 = sub_100004AEC(&qword_1009A6DD0);
              memcpy((void *)v93, v94, *(void *)(*(void *)(v105 - 8) + 64LL));
              uint64_t v106 = v224;
              goto LABEL_64;
            }

            if (v98)
            {
              sub_100018C68(v93, type metadata accessor for AccessoryInfoResponseContent.Configuration);
              goto LABEL_34;
            }

            uint64_t v127 = *((void *)v94 + 1);
            *(void *)uint64_t v93 = *(void *)v94;
            *(void *)(v93 + 8) = v127;
            swift_bridgeObjectRelease();
            uint64_t v128 = *((void *)v94 + 3);
            *(void *)(v93 + 16) = *((void *)v94 + 2);
            *(void *)(v93 + 24) = v128;
            swift_bridgeObjectRelease();
            uint64_t v129 = *((void *)v94 + 5);
            *(void *)(v93 + 32) = *((void *)v94 + 4);
            *(void *)(v93 + 40) = v129;
            swift_bridgeObjectRelease();
            *(_WORD *)(v93 + 48) = *((_WORD *)v94 + 24);
            uint64_t v130 = *((void *)v94 + 8);
            *(void *)(v93 + 56) = *((void *)v94 + 7);
            *(void *)(v93 + 64) = v130;
            *(_BYTE *)(v93 + 72) = v94[72];
            uint64_t v131 = v95[10];
            uint64_t v132 = &v94[v131];
            uint64_t v220 = (void *)(v93 + v131);
            __n128 v215 = v222();
            uint64_t v133 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v222)(v132, 1LL, v59);
            if (v215)
            {
              if (!v133)
              {
                (*(void (**)(void *, _BYTE *, uint64_t))(v224 + 32))(v220, v132, v59);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v224 + 56))(v220, 0LL, 1LL, v59);
                goto LABEL_56;
              }

              uint64_t v134 = *(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL);
              uint64_t v135 = v220;
            }

            else
            {
              if (!v133)
              {
                (*(void (**)(void *, _BYTE *, uint64_t))(v224 + 40))(v220, v132, v59);
                goto LABEL_56;
              }

              (*(void (**)(void *, uint64_t))(v224 + 8))(v220, v59);
              uint64_t v134 = *(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL);
              uint64_t v135 = v220;
            }

            memcpy(v135, v132, v134);
LABEL_56:
            uint64_t v150 = v95[11];
            uint64_t v151 = &v94[v150];
            __srca = (void *)(v93 + v150);
            uint64_t v152 = v222();
            uint64_t v153 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v222)(v151, 1LL, v59);
            if (v152)
            {
              if (v153)
              {
                uint64_t v154 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
                memcpy(__srca, v151, *(void *)(*(void *)(v154 - 8) + 64LL));
                uint64_t v106 = v224;
              }

              else
              {
                uint64_t v106 = v224;
                (*(void (**)(void *, _BYTE *, uint64_t))(v224 + 32))(__srca, v151, v59);
                (*(void (**)(void *, void, uint64_t, uint64_t))(v224 + 56))(__srca, 0LL, 1LL, v59);
              }
            }

            else
            {
              uint64_t v106 = v224;
              if (v153)
              {
                (*(void (**)(void *, uint64_t))(v224 + 8))(__srca, v59);
                uint64_t v155 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
                memcpy(__srca, v151, *(void *)(*(void *)(v155 - 8) + 64LL));
              }

              else
              {
                (*(void (**)(void *, _BYTE *, uint64_t))(v224 + 40))(__srca, v151, v59);
              }
            }

            uint64_t v156 = v95[12];
            uint64_t v157 = v93 + v156;
            uint64_t v158 = &v94[v156];
            *(void *)uint64_t v157 = *(void *)v158;
            *(_BYTE *)(v157 + 8) = v158[8];
            uint64_t v159 = v95[13];
            uint64_t v160 = (void *)(v93 + v159);
            __int128 v161 = (uint64_t *)&v94[v159];
            uint64_t v163 = *v161;
            uint64_t v162 = v161[1];
            *uint64_t v160 = v163;
            v160[1] = v162;
            swift_bridgeObjectRelease();
            *(void *)(v93 + v95[14]) = *(void *)&v94[v95[14]];
            swift_bridgeObjectRelease();
            uint64_t v164 = v95[15];
            uint64_t v165 = (void *)(v93 + v164);
            uint64_t v166 = (uint64_t *)&v94[v164];
            uint64_t v168 = *v166;
            uint64_t v167 = v166[1];
            char *v165 = v168;
            v165[1] = v167;
            swift_bridgeObjectRelease();
            *(void *)(v93 + v95[16]) = *(void *)&v94[v95[16]];
            swift_bridgeObjectRelease();
            uint64_t v169 = v95[17];
            __n128 v170 = v93 + v169;
            uint64_t v171 = &v94[v169];
            *(_OWORD *)__n128 v170 = *(_OWORD *)v171;
            *(_BYTE *)(v170 + 16) = v171[16];
            uint64_t v172 = v95[18];
            uint64_t v173 = v93 + v172;
            uint64_t v174 = &v94[v172];
            *(_BYTE *)(v173 + 16) = v174[16];
            *(_OWORD *)uint64_t v173 = *(_OWORD *)v174;
LABEL_64:
            *(_DWORD *)&v8[v10[21]] = *(_DWORD *)&v9[v10[21]];
            *(void *)&v8[v10[22]] = *(void *)&v9[v10[22]];
            swift_bridgeObjectRelease();
            uint64_t v175 = v10[23];
            uint64_t v176 = (uint64_t *)&v8[v175];
            uint64_t v177 = (uint64_t *)&v9[v175];
            uint64_t v178 = *(void *)&v8[v175 + 8];
            if (v178 >> 60 != 15)
            {
              uint64_t v179 = v177[1];
              if (v179 >> 60 != 15)
              {
                uint64_t v180 = *v176;
                *uint64_t v176 = *v177;
                v176[1] = v179;
                sub_100016F9C(v180, v178);
LABEL_69:
                uint64_t v181 = v10[24];
                uint64_t v182 = (uint64_t *)&v8[v181];
                uint64_t v183 = (uint64_t *)&v9[v181];
                uint64_t v184 = *(void *)&v8[v181 + 8];
                if (v184 >> 60 != 15)
                {
                  uint64_t v185 = v183[1];
                  if (v185 >> 60 != 15)
                  {
                    uint64_t v186 = *v182;
                    *uint64_t v182 = *v183;
                    v182[1] = v185;
                    sub_100016F9C(v186, v184);
                    goto LABEL_74;
                  }

                  sub_100041D4C((uint64_t)v182);
                }

                *(_OWORD *)uint64_t v182 = *(_OWORD *)v183;
LABEL_74:
                int v187 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v106 + 40);
                v187(&v8[v10[25]], &v9[v10[25]], v59);
                v187(&v8[v10[26]], &v9[v10[26]], v59);
                v187(&v8[v10[27]], &v9[v10[27]], v59);
                v187(&v8[v10[28]], &v9[v10[28]], v59);
                v187(&v8[v10[29]], &v9[v10[29]], v59);
                v187(&v8[v10[30]], &v9[v10[30]], v59);
                int v188 = v10[31];
                uint64_t v189 = &v8[v188];
                uint64_t v190 = (uint64_t *)&v9[v188];
                int v192 = *v190;
                int v191 = v190[1];
                *uint64_t v189 = v192;
                v189[1] = v191;
                swift_bridgeObjectRelease();
                *(void *)&v8[v10[32]] = *(void *)&v9[v10[32]];
                swift_bridgeObjectRelease();
                uint64_t v193 = v10[33];
                uint64_t v194 = &v8[v193];
                uint64_t v195 = (uint64_t *)&v9[v193];
                uint64_t v197 = *v195;
                uint64_t v196 = v195[1];
                *uint64_t v194 = v197;
                v194[1] = v196;
                swift_bridgeObjectRelease();
                *(void *)&v8[v10[34]] = *(void *)&v9[v10[34]];
                swift_bridgeObjectRelease();
                v198 = v10[35];
                uint64_t v199 = &v8[v198];
                uint64_t v200 = &v9[v198];
                *(_OWORD *)uint64_t v199 = *(_OWORD *)v200;
                v199[16] = v200[16];
                int v201 = v10[36];
                __int128 v202 = &v8[v201];
                uint64_t v203 = &v9[v201];
                v202[16] = v203[16];
                *(_OWORD *)__int128 v202 = *(_OWORD *)v203;
                v187(&v8[v10[37]], &v9[v10[37]], v59);
                v187(&v8[v10[38]], &v9[v10[38]], v59);
                v187(&v8[v10[39]], &v9[v10[39]], v59);
                v187(&v8[v10[40]], &v9[v10[40]], v59);
                v187(&v8[v10[41]], &v9[v10[41]], v59);
                v187(&v8[v10[42]], &v9[v10[42]], v59);
                v8[v10[43]] = v9[v10[43]];
                v8[v10[44]] = v9[v10[44]];
                v8[v10[45]] = v9[v10[45]];
                uint64_t v204 = v10[46];
                uint64_t v205 = &v8[v204];
                uint64_t v206 = (uint64_t *)&v9[v204];
                uint64_t v208 = *v206;
                uint64_t v207 = v206[1];
                *uint64_t v205 = v208;
                v205[1] = v207;
                swift_bridgeObjectRelease();
                uint64_t v209 = v10[47];
                uint64_t v210 = &v8[v209];
                uint64_t v211 = (uint64_t *)&v9[v209];
                uint64_t v213 = *v211;
                uint64_t v212 = v211[1];
                char *v210 = v213;
                v210[1] = v212;
                swift_bridgeObjectRelease();
                return a1;
              }

              sub_100041D4C((uint64_t)v176);
            }

            *(_OWORD *)uint64_t v176 = *(_OWORD *)v177;
            goto LABEL_69;
          }

          (*(void (**)(_BYTE *, uint64_t))(v60 + 8))(v82, v59);
        }

        uint64_t v86 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v82, v83, *(void *)(*(void *)(v86 - 8) + 64LL));
        goto LABEL_28;
      }

      (*(void (**)(_BYTE *, uint64_t))(v60 + 8))(v57, v59);
    }

    uint64_t v80 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v57, v58, *(void *)(*(void *)(v80 - 8) + 64LL));
    goto LABEL_22;
  }

  if (v14)
  {
LABEL_7:
    uint64_t v28 = sub_100004AEC(&qword_10099CE68);
    memcpy(v8, v9, *(void *)(*(void *)(v28 - 8) + 64LL));
    return a1;
  }

  *(void *)uint64_t v8 = *(void *)v9;
  v8[8] = v9[8];
  os_log_type_t v15 = v10[5];
  BOOL v16 = &v8[v15];
  uint64_t v17 = &v9[v15];
  uint64_t v18 = type metadata accessor for ServerStatusCode(0LL);
  (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v18 - 8) + 32LL))(v16, v17, v18);
  v8[v10[6]] = v9[v10[6]];
  v8[v10[7]] = v9[v10[7]];
  *(_OWORD *)&v8[v10[8]] = *(_OWORD *)&v9[v10[8]];
  v8[v10[9]] = v9[v10[9]];
  v8[v10[10]] = v9[v10[10]];
  v8[v10[11]] = v9[v10[11]];
  *(_OWORD *)&v8[v10[12]] = *(_OWORD *)&v9[v10[12]];
  *(_OWORD *)&v8[v10[13]] = *(_OWORD *)&v9[v10[13]];
  uint64_t v19 = v10[14];
  uint64_t v20 = &v8[v19];
  uint64_t v21 = &v9[v19];
  v20[8] = v21[8];
  *(void *)uint64_t v20 = *(void *)v21;
  *(_OWORD *)&v8[v10[15]] = *(_OWORD *)&v9[v10[15]];
  uint64_t v22 = v10[16];
  uint64_t v23 = &v8[v22];
  unint64_t v24 = &v9[v22];
  uint64_t v25 = type metadata accessor for URL(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v223 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v26 + 48);
  if (v223(v24, 1LL, v25))
  {
    unint64_t v27 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v23, v24, *(void *)(*(void *)(v27 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v26 + 32))(v23, v24, v25);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v26 + 56))(v23, 0LL, 1LL, v25);
  }

  uint64_t v64 = v10[17];
  uint64_t v65 = &v8[v64];
  uint64_t v66 = &v9[v64];
  uint64_t v221 = v26;
  if (v223(&v9[v64], 1LL, v25))
  {
    os_log_type_t v67 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v65, v66, *(void *)(*(void *)(v67 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v26 + 32))(v65, v66, v25);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v26 + 56))(v65, 0LL, 1LL, v25);
  }

  *(_OWORD *)&v8[v10[18]] = *(_OWORD *)&v9[v10[18]];
  *(void *)&v8[v10[19]] = *(void *)&v9[v10[19]];
  BOOL v68 = v10[20];
  uint64_t v69 = &v8[v68];
  uint64_t v70 = &v9[v68];
  uint64_t v71 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  uint64_t v72 = (unsigned int (**)(_OWORD *, uint64_t, int *))*((void *)v71 - 1);
  if (v72[6](v70, 1LL, v71))
  {
    uint64_t v73 = sub_100004AEC(&qword_1009A6DD0);
    memcpy(v69, v70, *(void *)(*(void *)(v73 - 8) + 64LL));
  }

  else
  {
    __src = v72;
    uint64_t v218 = v11;
    uint64_t v74 = v70[1];
    *uint64_t v69 = *v70;
    v69[1] = v74;
    v69[2] = v70[2];
    *((_WORD *)v69 + 24) = *((_WORD *)v70 + 24);
    uint64_t v75 = *((void *)v70 + 8);
    *((void *)v69 + 7) = *((void *)v70 + 7);
    *((void *)v69 + 8) = v75;
    *((_BYTE *)v69 + 72) = *((_BYTE *)v70 + 72);
    unint64_t v76 = v71[10];
    unint64_t v77 = (char *)v69 + v76;
    uint64_t v78 = (char *)v70 + v76;
    if (v223((_BYTE *)v70 + v76, 1LL, v25))
    {
      uint64_t v79 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v77, v78, *(void *)(*(void *)(v79 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v221 + 32))(v77, v78, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v221 + 56))(v77, 0LL, 1LL, v25);
    }

    uint64_t v107 = v71[11];
    uint64_t v108 = (char *)v69 + v107;
    uint64_t v109 = (char *)v70 + v107;
    if (v223((_BYTE *)v70 + v107, 1LL, v25))
    {
      uint64_t v110 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v108, v109, *(void *)(*(void *)(v110 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v221 + 32))(v108, v109, v25);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v221 + 56))(v108, 0LL, 1LL, v25);
    }

    uint64_t v111 = v71[12];
    uint64_t v112 = (char *)v69 + v111;
    uint64_t v113 = (char *)v70 + v111;
    *(void *)uint64_t v112 = *(void *)v113;
    v112[8] = v113[8];
    *(_OWORD *)((char *)v69 + v71[13]) = *(_OWORD *)((char *)v70 + v71[13]);
    *(void *)((char *)v69 + v71[14]) = *(void *)((char *)v70 + v71[14]);
    *(_OWORD *)((char *)v69 + v71[15]) = *(_OWORD *)((char *)v70 + v71[15]);
    *(void *)((char *)v69 + v71[16]) = *(void *)((char *)v70 + v71[16]);
    uint64_t v114 = v71[17];
    uint64_t v115 = (char *)v69 + v114;
    uint64_t v116 = (char *)v70 + v114;
    v115[16] = v116[16];
    *(_OWORD *)uint64_t v115 = *(_OWORD *)v116;
    uint64_t v117 = v71[18];
    uint64_t v118 = (char *)v69 + v117;
    uint64_t v119 = (char *)v70 + v117;
    v118[16] = v119[16];
    *(_OWORD *)uint64_t v118 = *(_OWORD *)v119;
    (*((void (**)(_OWORD *, void, uint64_t, int *))__src + 7))(v69, 0LL, 1LL, v71);
    uint64_t v11 = v218;
  }

  *(_DWORD *)&v8[v10[21]] = *(_DWORD *)&v9[v10[21]];
  *(void *)&v8[v10[22]] = *(void *)&v9[v10[22]];
  *(_OWORD *)&v8[v10[23]] = *(_OWORD *)&v9[v10[23]];
  *(_OWORD *)&v8[v10[24]] = *(_OWORD *)&v9[v10[24]];
  uint64_t v120 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v221 + 32);
  v120(&v8[v10[25]], &v9[v10[25]], v25);
  v120(&v8[v10[26]], &v9[v10[26]], v25);
  v120(&v8[v10[27]], &v9[v10[27]], v25);
  v120(&v8[v10[28]], &v9[v10[28]], v25);
  v120(&v8[v10[29]], &v9[v10[29]], v25);
  v120(&v8[v10[30]], &v9[v10[30]], v25);
  *(_OWORD *)&v8[v10[31]] = *(_OWORD *)&v9[v10[31]];
  *(void *)&v8[v10[32]] = *(void *)&v9[v10[32]];
  *(_OWORD *)&v8[v10[33]] = *(_OWORD *)&v9[v10[33]];
  *(void *)&v8[v10[34]] = *(void *)&v9[v10[34]];
  uint64_t v121 = v10[35];
  uint64_t v122 = &v8[v121];
  uint64_t v123 = &v9[v121];
  v122[16] = v123[16];
  *(_OWORD *)uint64_t v122 = *(_OWORD *)v123;
  uint64_t v124 = v10[36];
  uint64_t v125 = &v8[v124];
  uint64_t v126 = &v9[v124];
  v125[16] = v126[16];
  *(_OWORD *)uint64_t v125 = *(_OWORD *)v126;
  v120(&v8[v10[37]], &v9[v10[37]], v25);
  v120(&v8[v10[38]], &v9[v10[38]], v25);
  v120(&v8[v10[39]], &v9[v10[39]], v25);
  v120(&v8[v10[40]], &v9[v10[40]], v25);
  v120(&v8[v10[41]], &v9[v10[41]], v25);
  v120(&v8[v10[42]], &v9[v10[42]], v25);
  v8[v10[43]] = v9[v10[43]];
  v8[v10[44]] = v9[v10[44]];
  v8[v10[45]] = v9[v10[45]];
  *(_OWORD *)&v8[v10[46]] = *(_OWORD *)&v9[v10[46]];
  *(_OWORD *)&v8[v10[47]] = *(_OWORD *)&v9[v10[47]];
  ((void (*)(_BYTE *, void, uint64_t, int *))v11[7])(v8, 0LL, 1LL, v10);
  return a1;
}

          char v29 = 0LL;
          uint64_t v31 = 1LL;
          uint64_t v26 = v43;
          goto LABEL_8;
        }

        char v29 = 0LL;
        uint64_t v31 = 1LL;
        v26 += 3LL;
LABEL_8:
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v13 + 56))(v11, v31, 1LL, v12);
        *a5 = v24;
        a5[1] = v25;
        a5[2] = v56;
        a5[3] = v26;
        a5[4] = v29;
        if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v11, 1LL, v12) == 1)
        {
          sub_100015794((uint64_t)v11, &qword_1009AC300);
          uint64_t v49 = v58;
          swift_retain();
          return (void *)sub_10054645C(v53, v51, v52, v49);
        }

        (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v59, v11, v12);
        uint64_t v32 = v58;
        unint64_t v33 = *(void *)(v58 + 40);
        uint64_t v34 = sub_100007864( &qword_1009AC308,  (uint64_t (*)(uint64_t))&type metadata accessor for CorrelationIdentifier,  (uint64_t)&protocol conformance descriptor for CorrelationIdentifier);
        unint64_t v35 = dispatch thunk of Hashable._rawHashValue(seed:)(v33, v12, v34);
        uint64_t v36 = -1LL << *(_BYTE *)(v32 + 32);
        uint64_t v37 = v35 & ~v36;
        if (((*(void *)(v57 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v37) & 1) != 0) {
          break;
        }
        uint64_t v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
LABEL_4:
        uint64_t result = (void *)v23(v59, v12);
        uint64_t v11 = v54;
        a5 = v55;
      }

      uint64_t v38 = ~v36;
      uint64_t v39 = *(void *)(v13 + 72);
      uint64_t v40 = *(void (**)(char *, unint64_t, uint64_t))(v13 + 16);
      while (1)
      {
        v40(v16, *(void *)(v58 + 48) + v39 * v37, v12);
        uint64_t v41 = sub_100007864( (unint64_t *)&unk_1009AC310,  (uint64_t (*)(uint64_t))&type metadata accessor for CorrelationIdentifier,  (uint64_t)&protocol conformance descriptor for CorrelationIdentifier);
        uint64_t v42 = dispatch thunk of static Equatable.== infix(_:_:)(v16, v59, v12, v41);
        uint64_t v23 = *(uint64_t (**)(char *, uint64_t))(v13 + 8);
        v23(v16, v12);
        if ((v42 & 1) != 0) {
          break;
        }
        uint64_t v37 = (v37 + 1) & v38;
        if (((*(void *)(v57 + ((v37 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v37) & 1) == 0) {
          goto LABEL_4;
        }
      }

      uint64_t result = (void *)v23(v59, v12);
      unint64_t v46 = (v37 >> 3) & 0x1FFFFFFFFFFFFFF8LL;
      uint64_t v11 = v54;
      unint64_t v47 = *(unint64_t *)((char *)v53 + v46);
      *(unint64_t *)((char *)v53 + v46) = v47 & ~(1LL << v37);
      a5 = v55;
    }

    while ((v47 & (1LL << v37)) == 0);
    uint64_t v22 = v52 - 1;
    if (__OFSUB__(v52, 1LL))
    {
LABEL_42:
      __break(1u);
      return result;
    }

    if (v52 != 1) {
      continue;
    }
    return &_swiftEmptySetSingleton;
  }

              sub_1000A6F30(v7);
              return;
            }
          }
        }
      }
    }

    __break(1u);
LABEL_35:
    __break(1u);
    goto LABEL_36;
  }

  sub_100049DAC(v66, isUniquelyReferenced_nonNull_native);
  uint64_t v61 = v128;
  os_log_type_t v67 = sub_10030CF14(v115, (uint64_t)v59);
  if ((v22 & 1) == (v68 & 1))
  {
    uint64_t v63 = v67;
    goto LABEL_14;
  }

  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(&type metadata for String);
  __break(1u);
  return result;
}

        uint64_t v11 = (v20 - 1) & v20;
        os_log_type_t v15 = __clz(__rbit64(v20)) + (v13 << 6);
      }

      BOOL v16 = *(void *)(v0 + 56);
      uint64_t v17 = *(void *)(v0 + 40);
      (*(void (**)(uint64_t, unint64_t, uint64_t))(v6 + 16))( v16,  *(void *)(v8 + 56) + *(void *)(v6 + 72) * v15,  v17);
      *(void *)(v0 + 16) = v2;
      uint64_t v18 = v2;
      CheckedContinuation.resume(returning:)(v0 + 16, v17);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v16, v17);
    }
  }

  if (v1 < 0) {
    uint64_t v5 = *(void *)(v0 + 24);
  }
  else {
    uint64_t v5 = v1 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  uint64_t v2 = (id)_CocoaArrayWrapper.endIndex.getter(v5);
  if (!v2) {
    goto LABEL_12;
  }
LABEL_3:
  if ((v1 & 0xC000000000000001LL) != 0)
  {
LABEL_38:
    uint64_t v2 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(0LL, *(void *)(v0 + 24));
LABEL_6:
    swift_bridgeObjectRelease();
    uint64_t v3 = v2;
    uint64_t v4 = sub_100658D94();

    if ((v4 & 1) != 0)
    {

      uint64_t v2 = 0LL;
    }

    goto LABEL_13;
  }

  if (*(void *)((v1 & 0xFFFFFFFFFFFFF8LL) + 0x10))
  {
    uint64_t v2 = *(id *)(*(void *)(v0 + 24) + 32LL);
    goto LABEL_6;
  }

  __break(1u);
}

    uint64_t v20 = (v29 - 1) & v29;
    uint64_t v21 = __clz(__rbit64(v29)) + (v22 << 6);
    goto LABEL_35;
  }

  __break(1u);
}

              sub_1000A6F30(v1);
              return;
            }
          }
        }
      }
    }

  if (v9 == v32)
  {
    v42[0] = v38;
    v42[1] = a2;
    v42[2] = v7;
    v42[3] = a4;
    v42[4] = v29;
    return sub_10069FCF8(v42);
  }

  return result;
}

  __break(1u);
}

      __break(1u);
      goto LABEL_35;
    }

    swift_release(v35);
    return;
  }

  if (qword_10099B8B8 != -1) {
    swift_once(&qword_10099B8B8, sub_100713ED8);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_10000A720(v9, (uint64_t)qword_100A2B330);
  uint64_t v10 = swift_retain();
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  uint64_t v12 = static os_log_type_t.info.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    uint64_t v40 = v14;
    *(_DWORD *)uint64_t v13 = 136446210;
    swift_bridgeObjectRetain(v5);
    *(void *)&uint64_t v36 = sub_1003F11D4(v6, v5, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v36, (char *)&v36 + 8, v13 + 4, v13 + 12);
    swift_bridgeObjectRelease();
    swift_release(v2);
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "AnalyticsEvent not computing disallowed analytics event %{public}s.",  v13,  0xCu);
    swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  else
  {
    swift_release(v2);
  }

  __break(1u);
  return result;
}

uint64_t sub_1000FB830(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 600LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 312LL);
  *(void *)(*(void *)v1 + 608LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000FB890, v3, 0LL);
}

uint64_t sub_1000FB890()
{
  uint64_t v1 = (void *)(v0 + 176);
  if (*(void *)(v0 + 608))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return swift_task_switch(sub_1000FBAD0, *(void *)(v0 + 608), 0LL);
  }

  else
  {
    uint64_t v3 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No BeaconStoreActor available!", v6, 2u);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 536);
    uint64_t v8 = *(void *)(v0 + 488);
    uint64_t v9 = *(void *)(v0 + 432);

    unint64_t v10 = sub_1000157D0();
    uint64_t v28 = swift_allocError(&type metadata for DaemonError, v10, 0LL, 0LL);
    *uint64_t v11 = 0xD000000000000010LL;
    v11[1] = 0x8000000100850F20LL;
    swift_willThrow(v28);
    swift_bridgeObjectRelease();
    v7(v8, v9);
    swift_release();
    uint64_t v13 = *(void *)(v0 + 504);
    uint64_t v12 = *(void *)(v0 + 512);
    uint64_t v15 = *(void *)(v0 + 488);
    uint64_t v14 = *(void *)(v0 + 496);
    uint64_t v16 = *(void *)(v0 + 472);
    uint64_t v17 = *(void *)(v0 + 480);
    uint64_t v19 = *(void *)(v0 + 456);
    uint64_t v18 = *(void *)(v0 + 464);
    uint64_t v20 = *(void *)(v0 + 424);
    uint64_t v21 = *(void *)(v0 + 416);
    uint64_t v22 = *(void *)(v0 + 400);
    uint64_t v23 = *(void *)(v0 + 392);
    uint64_t v24 = *(void *)(v0 + 384);
    uint64_t v25 = *(void *)(v0 + 360);
    uint64_t v26 = *(void *)(v0 + 344);
    uint64_t v27 = *(void *)(v0 + 336);
    (*(void (**)(uint64_t, void))(v0 + 536))(v12, *(void *)(v0 + 432));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v17);
    swift_task_dealloc(v16);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000FBAD0()
{
  uint64_t v1 = *(void *)(v0 + 608);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 592);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 520);
  uint64_t v5 = *(void *)(v0 + 480);
  uint64_t v4 = *(void *)(v0 + 488);
  uint64_t v7 = *(void *)(v0 + 440);
  uint64_t v6 = *(void *)(v0 + 448);
  uint64_t v8 = *(void *)(v0 + 432);
  *(void *)(v0 + 616) = *(void *)(v1 + 136);
  v3(v5, v4, v8);
  LODWORD(v9) = *(_DWORD *)(v7 + 80);
  *(_DWORD *)(v0 + 824) = v9;
  uint64_t v9 = v9;
  uint64_t v10 = (v9 + 24) & ~v9;
  uint64_t v11 = v10 + v6;
  uint64_t v12 = swift_allocObject(&unk_10093EA28, v10 + v6 + 1, v9 | 7LL);
  *(void *)(v0 + 624) = v12;
  *(void *)(v12 + 16) = v1;
  v2(v12 + v10, v5, v8);
  *(_BYTE *)(v12 + v11) = 1;
  swift_retain();
  return swift_task_switch(sub_1000FBBA0, 0LL, 0LL);
}

uint64_t sub_1000FBBA0()
{
  uint64_t v1 = v0[78];
  uint64_t v2 = v0[77];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[79] = v3;
  v3[2] = v2;
  v3[3] = sub_100118730;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[80] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000FBC4C;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[52],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_10011877C,  v3,  v0[51]);
}

uint64_t sub_1000FBC4C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 632);
  swift_task_dealloc(*(void *)(*v0 + 640));
  swift_release();
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000FBCBC, *(void *)(v1 + 608), 0LL);
}

uint64_t sub_1000FBCBC()
{
  uint64_t v2 = *(void *)(v0 + 408);
  uint64_t v1 = *(_BYTE **)(v0 + 416);
  uint64_t v3 = *(void *)(v0 + 312);
  *(_BYTE *)(v0 + 833) = *v1;
  sub_100015794((uint64_t)&v1[*(int *)(v2 + 48)], (uint64_t *)&unk_10099D720);
  swift_release();
  return swift_task_switch(sub_1000FBD20, v3, 0LL);
}

uint64_t sub_1000FBD20()
{
  if ((*(_BYTE *)(v0 + 833) & 1) == 0)
  {
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 80))
    {
      sub_100012EC0((__int128 *)(v0 + 56), v0 + 96);
      sub_100012ED8((void *)(v0 + 96), *(void *)(v0 + 120));
      uint64_t v66 = (uint64_t (*)(void))((char *)&dword_10099C890 + dword_10099C890);
      uint64_t v11 = (void *)swift_task_alloc(unk_10099C894);
      *(void *)(v0 + 648) = v11;
      uint64_t v12 = sub_1000FC388;
LABEL_12:
      *uint64_t v11 = v0;
      v11[1] = v12;
      uint64_t v17 = v66;
      return v17();
    }

    goto LABEL_37;
  }

  uint64_t result = (*(uint64_t (**)(void, void))(v0 + 536))(*(void *)(v0 + 488), *(void *)(v0 + 432));
  uint64_t v2 = *(void *)(v0 + 536);
  unint64_t v3 = *(void *)(v0 + 584);
  int64_t v4 = *(void *)(v0 + 576);
  *(void *)(v0 + 568) = v2;
  *(void *)(v0 + 560) = v2;
  if (v3)
  {
    uint64_t v5 = (v3 - 1) & v3;
    unint64_t v6 = __clz(__rbit64(v3)) | (v4 << 6);
    uint64_t v7 = *(void *)(v0 + 544);
    goto LABEL_4;
  }

  int64_t v18 = v4 + 1;
  if (__OFADD__(v4, 1LL))
  {
    __break(1u);
LABEL_36:
    __break(1u);
LABEL_37:
    __break(1u);
    goto LABEL_38;
  }

  int64_t v19 = (unint64_t)((1LL << *(_BYTE *)(v0 + 832)) + 63) >> 6;
  uint64_t v7 = *(void *)(v0 + 544);
  if (v18 >= v19)
  {
LABEL_28:
    (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 440) + 56LL))( *(void *)(v0 + 424),  1LL,  1LL,  *(void *)(v0 + 432));
LABEL_29:
    swift_release();
    uint64_t v23 = *(void *)(v0 + 552);
    uint64_t v24 = *(void *)(v23 + 16);
    *(void *)(v0 + 696) = v24;
    if (v24)
    {
      uint64_t v26 = *(void *)(v0 + 368);
      uint64_t v25 = *(void *)(v0 + 376);
      int v27 = *(_DWORD *)(v25 + 80);
      *(_DWORD *)(v0 + 828) = v27;
      *(void *)(v0 + 704) = *(void *)(v25 + 72);
      *(void *)(v0 + 720) = _swiftEmptyArrayStorage;
      *(void *)(v0 + 712) = 0LL;
      uint64_t v28 = *(void *)(v0 + 384);
      uint64_t v29 = sub_10001DC4C( v23 + ((v27 + 32LL) & ~(unint64_t)v27),  v28,  type metadata accessor for OwnedBeaconRecord);
      UUID.init()(v29);
      uint64_t v30 = v28 + *(int *)(v26 + 20);
      uint64_t v31 = (void *)swift_task_alloc(dword_1009A151C);
      *(void *)(v0 + 728) = v31;
      void *v31 = v0;
      v31[1] = sub_1000FCF34;
      return sub_1000FEA58(*(void *)(v0 + 344), *(void *)(v0 + 472), v30);
    }

    uint64_t v32 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 520);
    uint64_t v33 = *(void *)(v0 + 512);
    uint64_t v34 = *(void *)(v0 + 456);
    uint64_t v35 = *(void *)(v0 + 432);
    swift_bridgeObjectRelease();
    uint64_t v36 = v32(v34, v33, v35);
    uint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
    os_log_type_t v38 = static os_log_type_t.error.getter(v37);
    BOOL v39 = os_log_type_enabled(v37, v38);
    uint64_t v40 = *(void (**)(uint64_t, uint64_t))(v0 + 536);
    uint64_t v41 = *(void *)(v0 + 456);
    uint64_t v42 = *(void *)(v0 + 432);
    if (v39)
    {
      uint64_t v43 = swift_slowAlloc(22LL, -1LL);
      uint64_t v44 = swift_slowAlloc(32LL, -1LL);
      uint64_t v68 = v44;
      *(_DWORD *)uint64_t v43 = 141558275;
      *(void *)(v0 + 248) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v43 + 4, v43 + 12);
      *(_WORD *)(v43 + 12) = 2081;
      uint64_t v45 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter(v42, v45);
      *(void *)(v0 + 240) = sub_1003F11D4(v46, v47, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v43 + 14, v43 + 22);
      swift_bridgeObjectRelease();
      v40(v41, v42);
      _os_log_impl( (void *)&_mh_execute_header,  v37,  v38,  "No eligible member beacon to enable notify when found for group %{private,mask.hash}s",  (uint8_t *)v43,  0x16u);
      swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v44, -1LL, -1LL);
      swift_slowDealloc(v43, -1LL, -1LL);
    }

    else
    {
      v40(*(void *)(v0 + 456), *(void *)(v0 + 432));
    }

    unint64_t v48 = sub_1001177B0();
    uint64_t v67 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v48, 0LL, 0LL);
    *uint64_t v49 = 0;
    swift_willThrow(v67);
    uint64_t v51 = *(void *)(v0 + 504);
    uint64_t v50 = *(void *)(v0 + 512);
    uint64_t v53 = *(void *)(v0 + 488);
    uint64_t v52 = *(void *)(v0 + 496);
    uint64_t v54 = *(void *)(v0 + 472);
    uint64_t v55 = *(void *)(v0 + 480);
    uint64_t v57 = *(void *)(v0 + 456);
    uint64_t v56 = *(void *)(v0 + 464);
    uint64_t v58 = *(void *)(v0 + 424);
    uint64_t v59 = *(void *)(v0 + 416);
    uint64_t v60 = *(void *)(v0 + 400);
    uint64_t v61 = *(void *)(v0 + 392);
    uint64_t v62 = *(void *)(v0 + 384);
    uint64_t v63 = *(void *)(v0 + 360);
    uint64_t v64 = *(void *)(v0 + 344);
    uint64_t v65 = *(void *)(v0 + 336);
    (*(void (**)(uint64_t, void))(v0 + 536))(v50, *(void *)(v0 + 432));
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v55);
    swift_task_dealloc(v54);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    uint64_t v17 = *(uint64_t (**)(void))(v0 + 8);
    return v17();
  }

  uint64_t v20 = v7 + 56;
  unint64_t v21 = *(void *)(v7 + 56 + 8 * v18);
  ++v4;
  if (!v21)
  {
    int64_t v4 = v18 + 1;
    if (v18 + 1 < v19)
    {
      unint64_t v21 = *(void *)(v20 + 8 * v4);
      if (v21) {
        goto LABEL_17;
      }
      int64_t v4 = v18 + 2;
      if (v18 + 2 < v19)
      {
        unint64_t v21 = *(void *)(v20 + 8 * v4);
        if (v21) {
          goto LABEL_17;
        }
        int64_t v22 = v18 + 3;
        if (v22 < v19)
        {
          unint64_t v21 = *(void *)(v20 + 8 * v22);
          if (v21)
          {
            int64_t v4 = v22;
            goto LABEL_17;
          }

          while (1)
          {
            int64_t v4 = v22 + 1;
            if (__OFADD__(v22, 1LL)) {
              goto LABEL_36;
            }
            if (v4 >= v19) {
              goto LABEL_28;
            }
            unint64_t v21 = *(void *)(v20 + 8 * v4);
            ++v22;
            if (v21) {
              goto LABEL_17;
            }
          }
        }
      }
    }

    goto LABEL_28;
  }

uint64_t sub_1000FC388(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 648LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 312LL);
  *(void *)(*(void *)v1 + 656LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1000FC3E8, v3, 0LL);
}

uint64_t sub_1000FC3E8()
{
  uint64_t v1 = (void *)(v0 + 96);
  if (*(void *)(v0 + 656))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return swift_task_switch(sub_1000FC628, *(void *)(v0 + 656), 0LL);
  }

  else
  {
    uint64_t v3 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    int64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      unint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No BeaconStoreActor available!", v6, 2u);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 560);
    uint64_t v8 = *(void *)(v0 + 488);
    uint64_t v9 = *(void *)(v0 + 432);

    unint64_t v10 = sub_1000157D0();
    uint64_t v28 = swift_allocError(&type metadata for DaemonError, v10, 0LL, 0LL);
    *uint64_t v11 = 0xD000000000000010LL;
    v11[1] = 0x8000000100850F20LL;
    swift_willThrow(v28);
    swift_bridgeObjectRelease();
    v7(v8, v9);
    swift_release();
    uint64_t v13 = *(void *)(v0 + 504);
    uint64_t v12 = *(void *)(v0 + 512);
    uint64_t v15 = *(void *)(v0 + 488);
    uint64_t v14 = *(void *)(v0 + 496);
    uint64_t v16 = *(void *)(v0 + 472);
    uint64_t v17 = *(void *)(v0 + 480);
    uint64_t v19 = *(void *)(v0 + 456);
    uint64_t v18 = *(void *)(v0 + 464);
    uint64_t v20 = *(void *)(v0 + 424);
    uint64_t v21 = *(void *)(v0 + 416);
    uint64_t v22 = *(void *)(v0 + 400);
    uint64_t v23 = *(void *)(v0 + 392);
    uint64_t v24 = *(void *)(v0 + 384);
    uint64_t v25 = *(void *)(v0 + 360);
    uint64_t v26 = *(void *)(v0 + 344);
    uint64_t v27 = *(void *)(v0 + 336);
    (*(void (**)(uint64_t, void))(v0 + 560))(v12, *(void *)(v0 + 432));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v17);
    swift_task_dealloc(v16);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000FC628()
{
  uint64_t v1 = *(void *)(v0 + 656);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 824);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 592);
  int64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 520);
  uint64_t v6 = *(void *)(v0 + 480);
  uint64_t v5 = *(void *)(v0 + 488);
  uint64_t v7 = *(void *)(v0 + 432);
  uint64_t v8 = (v2 + 24) & ~v2;
  uint64_t v9 = *(void *)(v0 + 448) + v8;
  uint64_t v10 = v2 | 7;
  *(void *)(v0 + 664) = *(void *)(v1 + 136);
  v4(v6, v5, v7);
  uint64_t v11 = swift_allocObject(&unk_10093EA50, v9, v10);
  *(void *)(v0 + 672) = v11;
  *(void *)(v11 + 16) = v1;
  v3(v11 + v8, v6, v7);
  swift_retain();
  return swift_task_switch(sub_1000FC6E8, 0LL, 0LL);
}

uint64_t sub_1000FC6E8()
{
  uint64_t v1 = v0[84];
  uint64_t v2 = v0[83];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[85] = v3;
  v3[2] = v2;
  v3[3] = sub_10011795C;
  v3[4] = v1;
  int64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[86] = v4;
  *int64_t v4 = v0;
  v4[1] = sub_1000FC794;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[45],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100118954,  v3,  v0[44]);
}

uint64_t sub_1000FC794()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 680LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 312LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 688LL));
  swift_release();
  swift_release();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1000FC818, v2, 0LL);
}

uint64_t sub_1000FC818()
{
  uint64_t v1 = *(void *)(v0 + 360);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 376) + 48LL))( v1,  1LL,  *(void *)(v0 + 368)) != 1)
  {
    uint64_t v13 = *(void *)(v0 + 552);
    uint64_t v15 = *(void *)(v0 + 392);
    uint64_t v14 = *(void *)(v0 + 400);
    sub_10002218C(v1, v14, type metadata accessor for OwnedBeaconRecord);
    sub_10001DC4C(v14, v15, type metadata accessor for OwnedBeaconRecord);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v13);
    unint64_t v17 = *(void *)(v0 + 552);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      unint64_t v17 = sub_1004C46DC(0, *(void *)(v17 + 16) + 1LL, 1, *(void *)(v0 + 552));
    }
    unint64_t v19 = *(void *)(v17 + 16);
    unint64_t v18 = *(void *)(v17 + 24);
    if (v19 >= v18 >> 1) {
      unint64_t v17 = sub_1004C46DC(v18 > 1, v19 + 1, 1, v17);
    }
    uint64_t v20 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 568);
    uint64_t v21 = *(void *)(v0 + 488);
    uint64_t v22 = *(void *)(v0 + 432);
    uint64_t v23 = *(void *)(v0 + 392);
    uint64_t v24 = *(void *)(v0 + 400);
    uint64_t v25 = *(void *)(v0 + 376);
    *(void *)(v17 + 16) = v19 + 1;
    sub_10002218C( v23,  v17 + ((*(unsigned __int8 *)(v25 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80))
    + *(void *)(v25 + 72) * v19,
      type metadata accessor for OwnedBeaconRecord);
    sub_100018C68(v24, type metadata accessor for OwnedBeaconRecord);
    uint64_t result = v20(v21, v22);
    unint64_t v4 = *(void *)(v0 + 584);
    int64_t v5 = *(void *)(v0 + 576);
    __int128 v26 = *(_OWORD *)(v0 + 560);
    *(void *)(v0 + 552) = v17;
    *(_OWORD *)(v0 + 560) = v26;
    if (v4) {
      goto LABEL_3;
    }
LABEL_11:
    int64_t v27 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
    }

    else
    {
      int64_t v28 = (unint64_t)((1LL << *(_BYTE *)(v0 + 832)) + 63) >> 6;
      uint64_t v9 = *(void *)(v0 + 544);
      if (v27 >= v28) {
        goto LABEL_29;
      }
      uint64_t v29 = v9 + 56;
      unint64_t v30 = *(void *)(v9 + 56 + 8 * v27);
      ++v5;
      if (v30)
      {
LABEL_14:
        uint64_t v7 = (v30 - 1) & v30;
        unint64_t v8 = __clz(__rbit64(v30)) + (v5 << 6);
        goto LABEL_4;
      }

      int64_t v5 = v27 + 1;
      if (v27 + 1 >= v28) {
        goto LABEL_29;
      }
      unint64_t v30 = *(void *)(v29 + 8 * v5);
      if (v30) {
        goto LABEL_14;
      }
      int64_t v5 = v27 + 2;
      if (v27 + 2 >= v28) {
        goto LABEL_29;
      }
      unint64_t v30 = *(void *)(v29 + 8 * v5);
      if (v30) {
        goto LABEL_14;
      }
      int64_t v37 = v27 + 3;
      if (v37 >= v28)
      {
LABEL_29:
        (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 440) + 56LL))( *(void *)(v0 + 424),  1LL,  1LL,  *(void *)(v0 + 432));
LABEL_30:
        swift_release();
        uint64_t v38 = *(void *)(v0 + 552);
        uint64_t v39 = *(void *)(v38 + 16);
        *(void *)(v0 + 696) = v39;
        if (v39)
        {
          uint64_t v41 = *(void *)(v0 + 368);
          uint64_t v40 = *(void *)(v0 + 376);
          int v42 = *(_DWORD *)(v40 + 80);
          *(_DWORD *)(v0 + 828) = v42;
          *(void *)(v0 + 704) = *(void *)(v40 + 72);
          *(void *)(v0 + 720) = _swiftEmptyArrayStorage;
          *(void *)(v0 + 712) = 0LL;
          uint64_t v43 = *(void *)(v0 + 384);
          uint64_t v44 = sub_10001DC4C( v38 + ((v42 + 32LL) & ~(unint64_t)v42),  v43,  type metadata accessor for OwnedBeaconRecord);
          UUID.init()(v44);
          uint64_t v45 = v43 + *(int *)(v41 + 20);
          uint64_t v46 = (void *)swift_task_alloc(dword_1009A151C);
          *(void *)(v0 + 728) = v46;
          *uint64_t v46 = v0;
          v46[1] = sub_1000FCF34;
          return sub_1000FEA58(*(void *)(v0 + 344), *(void *)(v0 + 472), v45);
        }

        unint64_t v47 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 520);
        uint64_t v48 = *(void *)(v0 + 512);
        uint64_t v49 = *(void *)(v0 + 456);
        uint64_t v50 = *(void *)(v0 + 432);
        swift_bridgeObjectRelease();
        uint64_t v51 = v47(v49, v48, v50);
        uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
        os_log_type_t v53 = static os_log_type_t.error.getter(v52);
        BOOL v54 = os_log_type_enabled(v52, v53);
        uint64_t v55 = *(void (**)(uint64_t, uint64_t))(v0 + 536);
        uint64_t v56 = *(void *)(v0 + 456);
        uint64_t v57 = *(void *)(v0 + 432);
        if (v54)
        {
          uint64_t v58 = swift_slowAlloc(22LL, -1LL);
          uint64_t v59 = swift_slowAlloc(32LL, -1LL);
          uint64_t v83 = v59;
          *(_DWORD *)uint64_t v58 = 141558275;
          *(void *)(v0 + 248) = 1752392040LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v58 + 4, v58 + 12);
          *(_WORD *)(v58 + 12) = 2081;
          uint64_t v60 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter(v57, v60);
          *(void *)(v0 + 240) = sub_1003F11D4(v61, v62, &v83);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v58 + 14, v58 + 22);
          swift_bridgeObjectRelease();
          v55(v56, v57);
          _os_log_impl( (void *)&_mh_execute_header,  v52,  v53,  "No eligible member beacon to enable notify when found for group %{private,mask.hash}s",  (uint8_t *)v58,  0x16u);
          swift_arrayDestroy(v59, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v59, -1LL, -1LL);
          swift_slowDealloc(v58, -1LL, -1LL);
        }

        else
        {
          v55(*(void *)(v0 + 456), *(void *)(v0 + 432));
        }

        unint64_t v63 = sub_1001177B0();
        uint64_t v82 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v63, 0LL, 0LL);
        *uint64_t v64 = 0;
        swift_willThrow(v82);
        uint64_t v66 = *(void *)(v0 + 504);
        uint64_t v65 = *(void *)(v0 + 512);
        uint64_t v68 = *(void *)(v0 + 488);
        uint64_t v67 = *(void *)(v0 + 496);
        uint64_t v69 = *(void *)(v0 + 472);
        uint64_t v70 = *(void *)(v0 + 480);
        uint64_t v72 = *(void *)(v0 + 456);
        uint64_t v71 = *(void *)(v0 + 464);
        uint64_t v73 = *(void *)(v0 + 424);
        uint64_t v74 = *(void *)(v0 + 416);
        uint64_t v75 = *(void *)(v0 + 400);
        uint64_t v76 = *(void *)(v0 + 392);
        uint64_t v77 = *(void *)(v0 + 384);
        uint64_t v78 = *(void *)(v0 + 360);
        uint64_t v79 = *(void *)(v0 + 344);
        uint64_t v80 = *(void *)(v0 + 336);
        (*(void (**)(uint64_t, void))(v0 + 536))(v65, *(void *)(v0 + 432));
        swift_task_dealloc(v65);
        swift_task_dealloc(v66);
        swift_task_dealloc(v67);
        swift_task_dealloc(v68);
        swift_task_dealloc(v70);
        swift_task_dealloc(v69);
        swift_task_dealloc(v71);
        swift_task_dealloc(v72);
        swift_task_dealloc(v73);
        swift_task_dealloc(v74);
        swift_task_dealloc(v75);
        swift_task_dealloc(v76);
        swift_task_dealloc(v77);
        swift_task_dealloc(v78);
        swift_task_dealloc(v79);
        swift_task_dealloc(v80);
        uint64_t v36 = *(uint64_t (**)(void))(v0 + 8);
        return v36();
      }

      unint64_t v30 = *(void *)(v29 + 8 * v37);
      if (v30)
      {
        int64_t v5 = v37;
        goto LABEL_14;
      }

      while (1)
      {
        int64_t v5 = v37 + 1;
        if (__OFADD__(v37, 1LL)) {
          break;
        }
        if (v5 >= v28) {
          goto LABEL_29;
        }
        unint64_t v30 = *(void *)(v29 + 8 * v5);
        ++v37;
        if (v30) {
          goto LABEL_14;
        }
      }
    }

    __break(1u);
    goto LABEL_39;
  }

  (*(void (**)(void, void))(v0 + 560))(*(void *)(v0 + 488), *(void *)(v0 + 432));
  uint64_t result = sub_100015794(v1, (uint64_t *)&unk_1009A9C30);
  unint64_t v4 = *(void *)(v0 + 584);
  int64_t v5 = *(void *)(v0 + 576);
  uint64_t v2 = (const double *)(v0 + 560);
  float64x2_t v6 = vld1q_dup_f64(v2);
  *(float64x2_t *)(v0 + 560) = v6;
  if (!v4) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v7 = (v4 - 1) & v4;
  unint64_t v8 = __clz(__rbit64(v4)) | (v5 << 6);
  uint64_t v9 = *(void *)(v0 + 544);
LABEL_4:
  *(void *)(v0 + 584) = v7;
  *(void *)(v0 + 576) = v5;
  uint64_t v10 = *(void *)(v0 + 432);
  uint64_t v11 = *(void *)(v0 + 440);
  uint64_t v12 = *(void *)(v0 + 424);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 520))( v12,  *(void *)(v9 + 48) + *(void *)(v11 + 72) * v8,  v10);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(v12, 0LL, 1LL, v10);
  uint64_t v31 = *(void *)(v0 + 488);
  uint64_t v32 = *(void *)(v0 + 432);
  uint64_t v33 = *(void *)(v0 + 424);
  uint64_t v34 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 440) + 32LL);
  *(void *)(v0 + 592) = v34;
  v34(v31, v33, v32);
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 216, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 136, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 160))
  {
    sub_100012EC0((__int128 *)(v0 + 136), v0 + 176);
    sub_100012ED8((void *)(v0 + 176), *(void *)(v0 + 200));
    uint64_t v81 = (uint64_t (*)(void))((char *)&dword_10099C890 + dword_10099C890);
    uint64_t v35 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 600) = v35;
    *uint64_t v35 = v0;
    v35[1] = sub_1000FB830;
    uint64_t v36 = v81;
    return v36();
  }

uint64_t sub_1000FCF34()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 728LL);
  *(void *)(*(void *)v1 + 736LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    unint64_t v4 = (void (*)(uint64_t, uint64_t))v2[67];
    uint64_t v5 = v2[59];
    uint64_t v6 = v2[54];
    uint64_t v7 = v2[39];
    v4(v5, v6);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    unint64_t v8 = sub_1000FD800;
    uint64_t v9 = v7;
  }

  else
  {
    uint64_t v10 = v2[39];
    ((void (*)(void, void))v2[67])(v2[59], v2[54]);
    unint64_t v8 = sub_1000FCFE4;
    uint64_t v9 = v10;
  }

  return swift_task_switch(v8, v9, 0LL);
}

uint64_t sub_1000FCFE4()
{
  uint64_t v1 = *(void *)(v0 + 720);
  uint64_t v2 = *(void *)(v0 + 384);
  uint64_t v4 = *(void *)(v0 + 336);
  uint64_t v3 = *(void *)(v0 + 344);
  uint64_t v5 = *(void *)(v0 + 320);
  *(void *)(v0 + 40) = *(void *)(v0 + 368);
  *(void *)(v0 + 48) = sub_100015C48( (unint64_t *)&qword_10099D000,  255LL,  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_10080B120);
  uint64_t v6 = sub_10000A7C8((void *)(v0 + 16));
  sub_10001DC4C(v2, (uint64_t)v6, type metadata accessor for OwnedBeaconRecord);
  uint64_t v7 = v4 + *(int *)(v5 + 48);
  sub_100012EC0((__int128 *)(v0 + 16), v4);
  sub_10001DC4C(v3, v7, type metadata accessor for NotifyWhenFoundRecord);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  uint64_t v9 = *(void *)(v0 + 720);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v9 = sub_1004C51FC(0, *(void *)(v9 + 16) + 1LL, 1, *(void *)(v0 + 720));
  }
  unint64_t v11 = *(void *)(v9 + 16);
  unint64_t v10 = *(void *)(v9 + 24);
  if (v11 >= v10 >> 1) {
    uint64_t v9 = sub_1004C51FC(v10 > 1, v11 + 1, 1, v9);
  }
  *(void *)(v0 + 744) = v9;
  uint64_t v12 = *(void *)(v0 + 696);
  uint64_t v13 = *(void *)(v0 + 384);
  uint64_t v14 = *(void *)(v0 + 336);
  uint64_t v15 = *(void *)(v0 + 344);
  uint64_t v16 = *(void *)(v0 + 328);
  uint64_t v17 = *(void *)(v0 + 712) + 1LL;
  *(void *)(v9 + 16) = v11 + 1;
  sub_100015750( v14,  v9 + ((*(unsigned __int8 *)(v16 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v16 + 80))
  + *(void *)(v16 + 72) * v11,
    (uint64_t *)&unk_1009B14F0);
  sub_100018C68(v15, type metadata accessor for NotifyWhenFoundRecord);
  sub_100018C68(v13, type metadata accessor for OwnedBeaconRecord);
  if (v17 == v12)
  {
    swift_bridgeObjectRelease();
    unint64_t v18 = (void *)swift_task_alloc(dword_1009A155C);
    *(void *)(v0 + 752) = v18;
    *unint64_t v18 = v0;
    v18[1] = sub_1000FD248;
    return sub_100111BEC(v9);
  }

  else
  {
    uint64_t v20 = *(void *)(v0 + 712) + 1LL;
    *(void *)(v0 + 720) = v9;
    *(void *)(v0 + 712) = v20;
    uint64_t v21 = *(void *)(v0 + 384);
    uint64_t v22 = *(void *)(v0 + 368);
    uint64_t v23 = sub_10001DC4C( *(void *)(v0 + 552)
          + ((*(unsigned __int8 *)(v0 + 828) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 828))
          + *(void *)(v0 + 704) * v20,
            v21,
            type metadata accessor for OwnedBeaconRecord);
    UUID.init()(v23);
    uint64_t v24 = v21 + *(int *)(v22 + 20);
    uint64_t v25 = (void *)swift_task_alloc(dword_1009A151C);
    *(void *)(v0 + 728) = v25;
    *uint64_t v25 = v0;
    v25[1] = sub_1000FCF34;
    return sub_1000FEA58(*(void *)(v0 + 344), *(void *)(v0 + 472), v24);
  }

uint64_t sub_1000FD248()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 752);
  *(void *)(*v1 + 760) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 312);
    uint64_t v5 = sub_1000FD930;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 312);
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_1000FD2BC;
    uint64_t v4 = v6;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_1000FD2BC()
{
  uint64_t v1 = (*(uint64_t (**)(void, void, void))(v0 + 520))( *(void *)(v0 + 464),  *(void *)(v0 + 512),  *(void *)(v0 + 432));
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v0 + 536);
    uint64_t v4 = *(void *)(v0 + 464);
    uint64_t v5 = *(void *)(v0 + 432);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v7;
    *(_DWORD *)uint64_t v6 = 136315138;
    uint64_t v8 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v9 = dispatch thunk of CustomStringConvertible.description.getter(v5, v8);
    *(void *)(v0 + 256) = sub_1003F11D4(v9, v10, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 256, v0 + 264, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    v14(v4, v5);
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Enabled notify when found for group %s.", v6, 0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(void, void))(v0 + 536))(*(void *)(v0 + 464), *(void *)(v0 + 432));
  }

  unint64_t v11 = (void *)swift_task_alloc(dword_1009A14FC);
  *(void *)(v0 + 768) = v11;
  *unint64_t v11 = v0;
  v11[1] = sub_1000FD49C;
  uint64_t v12 = *(void *)(v0 + 312);
  v11[15] = v12;
  return swift_task_switch(sub_1000F9BD8, v12, 0LL);
}

uint64_t sub_1000FD49C(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 768);
  *(void *)(*v2 + 776) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = *(void *)(v4 + 312);
    uint64_t v7 = sub_1000FDB84;
  }

  else
  {
    *(void *)(v4 + 784) = a1;
    uint64_t v7 = sub_1000FD514;
    uint64_t v6 = a1;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_1000FD514()
{
  uint64_t v1 = v0[98];
  v0[99] = *(void *)(v1 + 136);
  uint64_t v2 = swift_allocObject(&unk_10093EA00, 25LL, 7LL);
  v0[100] = v2;
  *(void *)(v2 + 16) = v1;
  *(_BYTE *)(v2 + 24) = 17;
  swift_retain();
  return swift_task_switch(sub_1000FD580, 0LL, 0LL);
}

uint64_t sub_1000FD580()
{
  uint64_t v1 = v0[100];
  uint64_t v2 = v0[99];
  os_log_type_t v3 = (void *)swift_task_alloc(48LL);
  v0[101] = v3;
  v3[2] = v2;
  v3[3] = sub_100118990;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[102] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000FD630;
  return withCheckedContinuation<A>(isolation:function:_:)( v4,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_10011895C,  v3,  (char *)&type metadata for () + 8);
}

uint64_t sub_1000FD630()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 808LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 784LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 816LL));
  swift_release();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1000FD6A8, v2, 0LL);
}

uint64_t sub_1000FD6A8()
{
  uint64_t v1 = *(void *)(v0 + 312);
  swift_release();
  return swift_task_switch(sub_1000FD6E8, v1, 0LL);
}

uint64_t sub_1000FD6E8()
{
  uint64_t v2 = *(void *)(v0 + 504);
  uint64_t v1 = *(void *)(v0 + 512);
  uint64_t v4 = *(void *)(v0 + 488);
  uint64_t v3 = *(void *)(v0 + 496);
  uint64_t v6 = *(void *)(v0 + 472);
  uint64_t v5 = *(void *)(v0 + 480);
  uint64_t v7 = *(void *)(v0 + 456);
  uint64_t v8 = *(void *)(v0 + 464);
  uint64_t v9 = *(void *)(v0 + 424);
  uint64_t v11 = *(void *)(v0 + 416);
  uint64_t v12 = *(void *)(v0 + 400);
  uint64_t v13 = *(void *)(v0 + 392);
  uint64_t v14 = *(void *)(v0 + 384);
  uint64_t v15 = *(void *)(v0 + 360);
  uint64_t v16 = *(void *)(v0 + 344);
  uint64_t v17 = *(void *)(v0 + 336);
  (*(void (**)(uint64_t, void))(v0 + 536))(v1, *(void *)(v0 + 432));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FD800()
{
  uint64_t v2 = *(void *)(v0 + 504);
  uint64_t v1 = *(void *)(v0 + 512);
  uint64_t v4 = *(void *)(v0 + 488);
  uint64_t v3 = *(void *)(v0 + 496);
  uint64_t v5 = *(void *)(v0 + 472);
  uint64_t v6 = *(void *)(v0 + 480);
  uint64_t v8 = *(void *)(v0 + 456);
  uint64_t v7 = *(void *)(v0 + 464);
  uint64_t v9 = *(void *)(v0 + 424);
  uint64_t v11 = *(void *)(v0 + 416);
  uint64_t v12 = *(void *)(v0 + 400);
  uint64_t v13 = *(void *)(v0 + 392);
  uint64_t v14 = *(void *)(v0 + 384);
  uint64_t v15 = *(void *)(v0 + 360);
  uint64_t v16 = *(void *)(v0 + 344);
  uint64_t v17 = *(void *)(v0 + 336);
  (*(void (**)(uint64_t, void))(v0 + 536))(v1, *(void *)(v0 + 432));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FD930()
{
  uint64_t v1 = *(void *)(v0 + 760);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v5 = 138543362;
    swift_errorRetain(v1);
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 264) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v5 + 4, v5 + 12);
    *uint64_t v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error publishing notifyWhenFound keys: %{public}@", v5, 0xCu);
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v6, 1LL, v8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  swift_willThrow(v9);
  uint64_t v11 = *(void *)(v0 + 504);
  uint64_t v10 = *(void *)(v0 + 512);
  uint64_t v13 = *(void *)(v0 + 488);
  uint64_t v12 = *(void *)(v0 + 496);
  uint64_t v14 = *(void *)(v0 + 472);
  uint64_t v15 = *(void *)(v0 + 480);
  uint64_t v17 = *(void *)(v0 + 456);
  uint64_t v16 = *(void *)(v0 + 464);
  uint64_t v19 = *(void *)(v0 + 424);
  uint64_t v20 = *(void *)(v0 + 416);
  uint64_t v21 = *(void *)(v0 + 400);
  uint64_t v22 = *(void *)(v0 + 392);
  uint64_t v23 = *(void *)(v0 + 384);
  uint64_t v24 = *(void *)(v0 + 360);
  uint64_t v25 = *(void *)(v0 + 344);
  uint64_t v26 = *(void *)(v0 + 336);
  (*(void (**)(uint64_t, void))(v0 + 536))(v10, *(void *)(v0 + 432));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FDB84()
{
  uint64_t v1 = *(void *)(v0 + 776);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v5 = 138543362;
    swift_errorRetain(v1);
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 264) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 264, v0 + 272, v5 + 4, v5 + 12);
    *uint64_t v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error publishing notifyWhenFound keys: %{public}@", v5, 0xCu);
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v6, 1LL, v8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  swift_willThrow(v9);
  uint64_t v11 = *(void *)(v0 + 504);
  uint64_t v10 = *(void *)(v0 + 512);
  uint64_t v13 = *(void *)(v0 + 488);
  uint64_t v12 = *(void *)(v0 + 496);
  uint64_t v14 = *(void *)(v0 + 472);
  uint64_t v15 = *(void *)(v0 + 480);
  uint64_t v17 = *(void *)(v0 + 456);
  uint64_t v16 = *(void *)(v0 + 464);
  uint64_t v19 = *(void *)(v0 + 424);
  uint64_t v20 = *(void *)(v0 + 416);
  uint64_t v21 = *(void *)(v0 + 400);
  uint64_t v22 = *(void *)(v0 + 392);
  uint64_t v23 = *(void *)(v0 + 384);
  uint64_t v24 = *(void *)(v0 + 360);
  uint64_t v25 = *(void *)(v0 + 344);
  uint64_t v26 = *(void *)(v0 + 336);
  (*(void (**)(uint64_t, void))(v0 + 536))(v10, *(void *)(v0 + 432));
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v15);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FDDD0(uint64_t a1, uint64_t a2)
{
  v3[12] = a2;
  v3[13] = v2;
  v3[11] = a1;
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord(0LL);
  v3[14] = swift_task_alloc((*(void *)(*(void *)(found - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  v3[15] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[16] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[17] = swift_task_alloc(v7);
  v3[18] = swift_task_alloc(v7);
  v3[19] = swift_task_alloc(v7);
  return swift_task_switch(sub_1000FDE70, v2, 0LL);
}

uint64_t sub_1000FDE70()
{
  if (qword_10099B118 != -1) {
    swift_once(&qword_10099B118, sub_1000F95A0);
  }
  uint64_t v1 = v0[11];
  uint64_t v2 = v0[19];
  uint64_t v3 = v0[15];
  uint64_t v4 = v0[16];
  uint64_t v5 = v0[12];
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v0[20] = sub_10000A720(v6, (uint64_t)qword_100A2A1C8);
  sub_100013044(v5, (uint64_t)(v0 + 2));
  uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v2, v1, v3);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = v0[19];
  if (v10)
  {
    os_log_type_t type = v9;
    uint64_t v12 = v0[18];
    uint64_t v13 = v0[15];
    uint64_t v32 = v0[16];
    uint64_t v14 = swift_slowAlloc(32LL, -1LL);
    uint64_t v34 = swift_slowAlloc(64LL, -1LL);
    uint64_t v36 = v34;
    *(_DWORD *)uint64_t v14 = 141558531;
    v0[8] = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    os_log_t log = v8;
    uint64_t v16 = v0[5];
    uint64_t v15 = v0[6];
    sub_100012ED8(v0 + 2, v16);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v15 + 8) + 8LL) + 32LL))(v16);
    uint64_t v17 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter(v13, v17);
    uint64_t v31 = v11;
    unint64_t v20 = v19;
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
    v21(v12, v13);
    v0[9] = sub_1003F11D4(v18, v20, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 9, v0 + 10, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
    *(_WORD *)(v14 + 22) = 2082;
    uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter(v13, v17);
    v0[10] = sub_1003F11D4(v22, v23, &v36);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 10, v0 + 11, v14 + 24, v14 + 32);
    swift_bridgeObjectRelease();
    v21(v31, v13);
    _os_log_impl( (void *)&_mh_execute_header,  log,  type,  "enableNotifyWhenFound for %{private,mask.hash}s, commandId %{public}s",  (uint8_t *)v14,  0x20u);
    swift_arrayDestroy(v34, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
    uint64_t v25 = v0[15];
    uint64_t v24 = v0[16];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v21(v11, v25);
  }

  v0[21] = v21;
  uint64_t v26 = (void *)v0[12];
  uint64_t v27 = v26[3];
  uint64_t v28 = v26[4];
  sub_100012ED8(v26, v27);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v28 + 8) + 8LL) + 32LL))(v27);
  uint64_t v29 = (void *)swift_task_alloc(dword_1009A151C);
  v0[22] = v29;
  *uint64_t v29 = v0;
  v29[1] = sub_1000FE1DC;
  return sub_1000FEA58(v0[14], v0[11], v0[17]);
}

uint64_t sub_1000FE1DC()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 176LL);
  *(void *)(*(void *)v1 + 184LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v2[21];
  uint64_t v5 = v2[17];
  uint64_t v6 = v2[15];
  uint64_t v7 = v2[13];
  v4(v5, v6);
  if (v0) {
    uint64_t v8 = sub_1000FE684;
  }
  else {
    uint64_t v8 = sub_1000FE254;
  }
  return swift_task_switch(v8, v7, 0LL);
}

uint64_t sub_1000FE254()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[12];
  uint64_t v3 = sub_100004AEC(&qword_1009A17F8);
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009B14F0);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 72);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 + 32) & ~v7;
  uint64_t v9 = swift_allocObject(v3, v8 + v6, v7 | 7);
  v0[24] = v9;
  *(_OWORD *)(v9 + 16) = xmmword_1007E67D0;
  uint64_t v10 = v9 + v8 + *(int *)(v4 + 48);
  sub_100013044(v2, v9 + v8);
  sub_10001DC4C(v1, v10, type metadata accessor for NotifyWhenFoundRecord);
  uint64_t v11 = (void *)swift_task_alloc(dword_1009A155C);
  v0[25] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1000FE338;
  return sub_100111BEC(v9);
}

uint64_t sub_1000FE338()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 200LL);
  uint64_t v3 = *(void **)v1;
  v3[26] = v0;
  swift_task_dealloc(v2);
  if (v0)
  {
    uint64_t v4 = v3[13];
    uint64_t v5 = sub_1000FE6E0;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v6 = (void *)swift_task_alloc(dword_1009A14FC);
    v3[27] = v6;
    *uint64_t v6 = v3;
    v6[1] = sub_1000FE3D0;
    uint64_t v4 = v3[13];
    v6[15] = v4;
    uint64_t v5 = sub_1000F9BD8;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_1000FE3D0(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 216);
  *(void *)(*v2 + 224) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = *(void *)(v4 + 104);
    uint64_t v7 = sub_1000FE8A0;
  }

  else
  {
    *(void *)(v4 + 232) = a1;
    uint64_t v7 = sub_1000FE448;
    uint64_t v6 = a1;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_1000FE448()
{
  uint64_t v1 = v0[29];
  v0[30] = *(void *)(v1 + 136);
  uint64_t v2 = swift_allocObject(&unk_10093E9D8, 25LL, 7LL);
  v0[31] = v2;
  *(void *)(v2 + 16) = v1;
  *(_BYTE *)(v2 + 24) = 17;
  swift_retain();
  return swift_task_switch(sub_1000FE4B4, 0LL, 0LL);
}

uint64_t sub_1000FE4B4()
{
  uint64_t v2 = v0[30];
  uint64_t v1 = v0[31];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[32] = v3;
  v3[2] = v2;
  v3[3] = sub_100118990;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[33] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000FE560;
  return withCheckedContinuation<A>(isolation:function:_:)( v4,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_10011895C,  v3,  (char *)&type metadata for () + 8);
}

uint64_t sub_1000FE560()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 256LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 232LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 264LL));
  swift_release();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1000FE5D4, v2, 0LL);
}

uint64_t sub_1000FE5D4()
{
  uint64_t v1 = *(void *)(v0 + 104);
  swift_release();
  return swift_task_switch(sub_1000FE614, v1, 0LL);
}

uint64_t sub_1000FE614()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v4 = *(void *)(v0 + 112);
  sub_100018C68(v4, type metadata accessor for NotifyWhenFoundRecord);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FE684()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 152));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FE6E0()
{
  uint64_t v1 = *(void *)(v0 + 208);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v5 = 138543362;
    swift_errorRetain(v1);
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 56) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v5 + 4, v5 + 12);
    *uint64_t v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error publishing notifyWhenFound keys: %{public}@", v5, 0xCu);
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v6, 1LL, v8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v9 = *(void *)(v0 + 112);

  swift_willThrow(v10);
  sub_100018C68(v9, type metadata accessor for NotifyWhenFoundRecord);
  uint64_t v11 = *(void *)(v0 + 144);
  uint64_t v12 = *(void *)(v0 + 136);
  uint64_t v13 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 152));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FE8A0()
{
  uint64_t v1 = *(void *)(v0 + 224);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v5 = 138543362;
    swift_errorRetain(v1);
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 56) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v5 + 4, v5 + 12);
    *uint64_t v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error publishing notifyWhenFound keys: %{public}@", v5, 0xCu);
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v6, 1LL, v8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v9 = *(void *)(v0 + 112);

  swift_willThrow(v10);
  sub_100018C68(v9, type metadata accessor for NotifyWhenFoundRecord);
  uint64_t v11 = *(void *)(v0 + 144);
  uint64_t v12 = *(void *)(v0 + 136);
  uint64_t v13 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 152));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FEA58(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[7] = a3;
  v4[8] = v3;
  v4[5] = a1;
  v4[6] = a2;
  uint64_t v5 = sub_100004AEC(&qword_1009A1718);
  void v4[9] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  v4[10] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v4[11] = v7;
  uint64_t v8 = *(void *)(v7 + 64);
  v4[12] = v8;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v4[13] = swift_task_alloc(v9);
  v4[14] = swift_task_alloc(v9);
  uint64_t v10 = sub_100004AEC(&qword_1009AA900);
  v4[15] = v10;
  v4[16] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord(0LL);
  v4[17] = found;
  uint64_t v12 = *(void *)(found - 8);
  v4[18] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[19] = swift_task_alloc(v13);
  v4[20] = swift_task_alloc(v13);
  v4[21] = swift_task_alloc(v13);
  v4[22] = swift_task_alloc(v13);
  uint64_t v14 = (void *)swift_task_alloc(dword_1009A14FC);
  v4[23] = v14;
  *uint64_t v14 = v4;
  v14[1] = sub_1000FEB94;
  v14[15] = v3;
  return swift_task_switch(sub_1000F9BD8, v3, 0LL);
}

uint64_t sub_1000FEB94(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 184);
  *(void *)(*v2 + 192) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = *(void *)(v4 + 64);
    uint64_t v7 = sub_1000FF7F8;
  }

  else
  {
    *(void *)(v4 + 200) = a1;
    uint64_t v7 = sub_1000FEC0C;
    uint64_t v6 = a1;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_1000FEC0C()
{
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[14];
  uint64_t v4 = v0[11];
  uint64_t v3 = v0[12];
  uint64_t v5 = v0[10];
  uint64_t v6 = v0[7];
  v0[26] = *(void *)(v1 + 136);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[27] = v7;
  v7(v2, v6, v5);
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_10093E9B0, v9 + v3, v8 | 7);
  v0[28] = v10;
  *(void *)(v10 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v10 + v9, v2, v5);
  swift_retain();
  return swift_task_switch(sub_1000FECC4, 0LL, 0LL);
}

uint64_t sub_1000FECC4()
{
  uint64_t v1 = v0[28];
  uint64_t v2 = v0[26];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[29] = v3;
  v3[2] = v2;
  v3[3] = sub_100117B8C;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[30] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000FED70;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[16],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100118958,  v3,  v0[15]);
}

uint64_t sub_1000FED70()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 232LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 64LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 240LL));
  swift_release();
  swift_release();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1000FEDF0, v2, 0LL);
}

uint64_t sub_1000FEDF0()
{
  uint64_t v1 = *(void *)(v0 + 128);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 144) + 48LL))( v1,  1LL,  *(void *)(v0 + 136)) == 1)
  {
    sub_100015794(v1, &qword_1009AA900);
    if (qword_10099B118 != -1) {
      swift_once(&qword_10099B118, sub_1000F95A0);
    }
    uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 216);
    uint64_t v3 = *(void *)(v0 + 104);
    uint64_t v4 = *(void *)(v0 + 80);
    uint64_t v5 = *(void *)(v0 + 56);
    uint64_t v6 = type metadata accessor for Logger(0LL);
    sub_10000A720(v6, (uint64_t)qword_100A2A1C8);
    uint64_t v7 = v2(v3, v5, v4);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter(v8);
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void *)(v0 + 104);
    uint64_t v12 = *(void *)(v0 + 80);
    uint64_t v13 = *(void *)(v0 + 88);
    if (v10)
    {
      uint64_t v14 = swift_slowAlloc(22LL, -1LL);
      uint64_t v47 = swift_slowAlloc(32LL, -1LL);
      uint64_t v48 = v47;
      *(_DWORD *)uint64_t v14 = 141558275;
      *(void *)(v0 + 16) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v14 + 4, v14 + 12);
      *(_WORD *)(v14 + 12) = 2081;
      uint64_t v15 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
      *(void *)(v0 + 24) = sub_1003F11D4(v16, v17, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v14 + 14, v14 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "Creating new NWF record for %{private,mask.hash}s",  (uint8_t *)v14,  0x16u);
      swift_arrayDestroy(v47, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(void, void))(v13 + 8))(*(void *)(v0 + 104), *(void *)(v0 + 80));
    }

    uint64_t v32 = *(void (**)(char *, uint64_t, uint64_t))(v0 + 216);
    uint64_t v33 = *(char **)(v0 + 152);
    uint64_t v34 = *(void *)(v0 + 136);
    uint64_t v35 = *(void *)(v0 + 80);
    uint64_t v36 = *(void *)(v0 + 56);
    v32(&v33[*(int *)(v34 + 20)], *(void *)(v0 + 48), v35);
    v32(&v33[*(int *)(v34 + 24)], v36, v35);
    *(_OWORD *)uint64_t v33 = xmmword_1007E4480;
    int64_t v37 = (void *)swift_task_alloc(dword_1009A14FC);
    *(void *)(v0 + 248) = v37;
    *int64_t v37 = v0;
    v37[1] = sub_1000FF2F0;
    uint64_t v38 = *(void *)(v0 + 64);
    v37[15] = v38;
    return swift_task_switch(sub_1000F9BD8, v38, 0LL);
  }

  else
  {
    sub_10002218C(v1, *(void *)(v0 + 176), type metadata accessor for NotifyWhenFoundRecord);
    if (qword_10099B118 != -1) {
      swift_once(&qword_10099B118, sub_1000F95A0);
    }
    uint64_t v19 = *(void *)(v0 + 168);
    uint64_t v18 = *(void *)(v0 + 176);
    uint64_t v20 = type metadata accessor for Logger(0LL);
    sub_10000A720(v20, (uint64_t)qword_100A2A1C8);
    uint64_t v21 = sub_10001DC4C(v18, v19, type metadata accessor for NotifyWhenFoundRecord);
    uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
    os_log_type_t v23 = static os_log_type_t.default.getter(v22);
    BOOL v24 = os_log_type_enabled(v22, v23);
    uint64_t v25 = *(void *)(v0 + 168);
    if (v24)
    {
      uint64_t v26 = *(void *)(v0 + 160);
      uint64_t v27 = *(void *)(v0 + 136);
      uint64_t v28 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v29 = swift_slowAlloc(32LL, -1LL);
      uint64_t v48 = v29;
      *(_DWORD *)uint64_t v28 = 136315138;
      sub_10001DC4C(v25, v26, type metadata accessor for NotifyWhenFoundRecord);
      uint64_t v30 = String.init<A>(describing:)(v26, v27);
      *(void *)(v0 + 32) = sub_1003F11D4(v30, v31, &v48);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v28 + 4, v28 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68(v25, type metadata accessor for NotifyWhenFoundRecord);
      _os_log_impl((void *)&_mh_execute_header, v22, v23, "Found existing NWF record %s", v28, 0xCu);
      swift_arrayDestroy(v29, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v28, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(*(void *)(v0 + 168), type metadata accessor for NotifyWhenFoundRecord);
    }

    sub_10002218C(*(void *)(v0 + 176), *(void *)(v0 + 40), type metadata accessor for NotifyWhenFoundRecord);
    uint64_t v40 = *(void *)(v0 + 168);
    uint64_t v42 = *(void *)(v0 + 152);
    uint64_t v41 = *(void *)(v0 + 160);
    uint64_t v43 = *(void *)(v0 + 128);
    uint64_t v45 = *(void *)(v0 + 104);
    uint64_t v44 = *(void *)(v0 + 112);
    uint64_t v46 = *(void *)(v0 + 72);
    swift_task_dealloc(*(void *)(v0 + 176));
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1000FF2F0(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 248LL);
  v3[32] = a1;
  v3[33] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_1000FF88C;
  }
  else {
    uint64_t v5 = sub_1000FF35C;
  }
  return swift_task_switch(v5, v3[8], 0LL);
}

uint64_t sub_1000FF35C()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 72);
  uint64_t v4 = swift_task_alloc(32LL);
  *(void *)(v4 + 16) = v2;
  sub_100611BB0((void (*)(uint64_t, char **))sub_100118690, v3);
  uint64_t v5 = *(void *)(v0 + 256);
  if (v1)
  {
    uint64_t v6 = *(void *)(v0 + 152);
    swift_release();
    swift_task_dealloc(v4);
    sub_100018C68(v6, type metadata accessor for NotifyWhenFoundRecord);
    uint64_t v7 = *(void *)(v0 + 168);
    uint64_t v9 = *(void *)(v0 + 152);
    uint64_t v8 = *(void *)(v0 + 160);
    uint64_t v10 = *(void *)(v0 + 128);
    uint64_t v12 = *(void *)(v0 + 104);
    uint64_t v11 = *(void *)(v0 + 112);
    uint64_t v13 = *(void *)(v0 + 72);
    swift_task_dealloc(*(void *)(v0 + 176));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    swift_task_dealloc(v4);
    return swift_task_switch(sub_1000FF48C, v5, 0LL);
  }

uint64_t sub_1000FF48C()
{
  *(void *)(v0 + 272) = *(void *)(*(void *)(v0 + 256) + 128LL);
  return swift_task_switch(sub_1000FF4AC, 0LL, 0LL);
}

uint64_t sub_1000FF4AC()
{
  uint64_t v1 = v0[34];
  uint64_t v2 = v0[9];
  uint64_t v3 = swift_task_alloc(32LL);
  v0[35] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[36] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000FF550;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v4,  0LL,  0LL,  0xD000000000000011LL,  0x80000001008545C0LL,  sub_10011898C,  v3,  (char *)&type metadata for () + 8);
}

uint64_t sub_1000FF550()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 288);
  *(void *)(*v1 + 296) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_1000FF6C4;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 280));
    uint64_t v4 = sub_1000FF5BC;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1000FF5BC()
{
  uint64_t v1 = *(void *)(v0 + 64);
  sub_100015794(*(void *)(v0 + 72), &qword_1009A1718);
  swift_release();
  return swift_task_switch(sub_1000FF60C, v1, 0LL);
}

uint64_t sub_1000FF60C()
{
  uint64_t v1 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 40);
  sub_100104784();
  sub_10002218C(v1, v2, type metadata accessor for NotifyWhenFoundRecord);
  uint64_t v3 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 160);
  uint64_t v6 = *(void *)(v0 + 128);
  uint64_t v8 = *(void *)(v0 + 104);
  uint64_t v7 = *(void *)(v0 + 112);
  uint64_t v9 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 176));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FF6C4()
{
  uint64_t v1 = *(void *)(v0 + 256);
  swift_task_dealloc(*(void *)(v0 + 280));
  return swift_task_switch(sub_1000FF704, v1, 0LL);
}

uint64_t sub_1000FF704()
{
  uint64_t v1 = *(void *)(v0 + 64);
  sub_100015794(*(void *)(v0 + 72), &qword_1009A1718);
  swift_release();
  return swift_task_switch(sub_1000FF754, v1, 0LL);
}

uint64_t sub_1000FF754()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v6 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v7 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 176));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FF7F8()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v6 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v7 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 176));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FF88C()
{
  uint64_t v1 = *(void *)(v0 + 168);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v2 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v6 = *(void *)(v0 + 104);
  uint64_t v5 = *(void *)(v0 + 112);
  uint64_t v7 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 176));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1000FF930(uint64_t a1, uint64_t a2)
{
  v3[15] = a2;
  v3[16] = v2;
  v3[14] = a1;
  uint64_t v4 = sub_100004AEC(&qword_1009AA830);
  v3[17] = v4;
  v3[18] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for OwnedBeaconGroup(0LL);
  v3[19] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[20] = v6;
  v3[21] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  v3[22] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v3[23] = v8;
  uint64_t v9 = *(void *)(v8 + 64);
  v3[24] = v9;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v3[25] = swift_task_alloc(v10);
  v3[26] = swift_task_alloc(v10);
  uint64_t v11 = (void *)swift_task_alloc(dword_1009A14FC);
  v3[27] = v11;
  *uint64_t v11 = v3;
  v11[1] = sub_1000FFA20;
  v11[15] = v2;
  return swift_task_switch(sub_1000F9BD8, v2, 0LL);
}

uint64_t sub_1000FFA20(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 216);
  *(void *)(*v2 + 224) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = *(void *)(v4 + 128);
    uint64_t v7 = sub_100118938;
  }

  else
  {
    *(void *)(v4 + 232) = a1;
    uint64_t v7 = sub_1000FFA98;
    uint64_t v6 = a1;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_1000FFA98()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 208);
  uint64_t v4 = *(void *)(v0 + 184);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v5 = *(void *)(v0 + 176);
  uint64_t v6 = *(void *)(v0 + 120);
  *(void *)(v0 + 240) = *(void *)(v1 + 136);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 248) = v7;
  v7(v2, v6, v5);
  LODWORD(v8) = *(_DWORD *)(v4 + 80);
  *(_DWORD *)(v0 + 376) = v8;
  uint64_t v8 = v8;
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_10093E960, v9 + v3, v8 | 7LL);
  *(void *)(v0 + 256) = v10;
  *(void *)(v10 + 16) = v1;
  uint64_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32);
  *(void *)(v0 + 264) = v11;
  v11(v10 + v9, v2, v5);
  swift_retain();
  return swift_task_switch(sub_1000FFB5C, 0LL, 0LL);
}

uint64_t sub_1000FFB5C()
{
  uint64_t v1 = v0[32];
  uint64_t v2 = v0[30];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[34] = v3;
  v3[2] = v2;
  v3[3] = sub_1001185F0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[35] = v4;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A9C40);
  *uint64_t v4 = v0;
  v4[1] = sub_1000FFC1C;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 7,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100118960,  v3,  v5);
}

uint64_t sub_1000FFC1C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 272LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 128LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 280LL));
  swift_release();
  swift_release();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1000FFC9C, v2, 0LL);
}

uint64_t sub_1000FFC9C()
{
  uint64_t v1 = (__int128 *)(v0 + 7);
  if (v0[10])
  {
    sub_100012EC0(v1, (uint64_t)(v0 + 2));
    uint64_t v2 = (void *)swift_task_alloc(dword_1009A1534);
    v0[36] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1000FFD5C;
    return sub_1001026D0(v0[14], (uint64_t)(v0 + 2));
  }

  else
  {
    sub_100015794((uint64_t)v1, (uint64_t *)&unk_1009A9C40);
    uint64_t v4 = (void *)swift_task_alloc(dword_1009A14FC);
    v0[38] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1000FFDC0;
    uint64_t v5 = v0[16];
    v4[15] = v5;
    return swift_task_switch(sub_1000F9BD8, v5, 0LL);
  }

uint64_t sub_1000FFD5C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 288);
  *(void *)(*v1 + 296) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_100118988;
  }
  else {
    uint64_t v4 = sub_100118980;
  }
  return swift_task_switch(v4, *(void *)(v2 + 128), 0LL);
}

uint64_t sub_1000FFDC0(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 304);
  *(void *)(*v2 + 312) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = *(void *)(v4 + 128);
    uint64_t v7 = sub_100118984;
  }

  else
  {
    *(void *)(v4 + 320) = a1;
    uint64_t v7 = sub_1000FFE38;
    uint64_t v6 = a1;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_1000FFE38()
{
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 264);
  uint64_t v3 = *(unsigned __int8 *)(v0 + 376);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 248);
  uint64_t v5 = *(void *)(v0 + 208);
  uint64_t v6 = *(void *)(v0 + 176);
  uint64_t v7 = *(void *)(v0 + 120);
  uint64_t v8 = (v3 + 24) & ~v3;
  uint64_t v9 = v8 + *(void *)(v0 + 192);
  uint64_t v10 = v3 | 7;
  *(void *)(v0 + 328) = *(void *)(v1 + 136);
  v4(v5, v7, v6);
  uint64_t v11 = swift_allocObject(&unk_10093E988, v9, v10);
  *(void *)(v0 + 336) = v11;
  *(void *)(v11 + 16) = v1;
  v2(v11 + v8, v5, v6);
  swift_retain();
  return swift_task_switch(sub_1000FFEFC, 0LL, 0LL);
}

uint64_t sub_1000FFEFC()
{
  uint64_t v2 = v0[41];
  uint64_t v1 = v0[42];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[43] = v3;
  v3[2] = v2;
  v3[3] = sub_100118674;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[44] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1000FFFA4;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[18],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100118680,  v3,  v0[17]);
}

uint64_t sub_1000FFFA4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 344LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 128LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 352LL));
  swift_release();
  swift_release();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100100024, v2, 0LL);
}

uint64_t sub_100100024()
{
  uint64_t v1 = *(void *)(v0 + 144);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 160) + 48LL))( v1,  1LL,  *(void *)(v0 + 152)) == 1)
  {
    sub_100015794(v1, &qword_1009AA830);
    if (qword_10099B118 != -1) {
      swift_once(&qword_10099B118, sub_1000F95A0);
    }
    uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 248);
    uint64_t v3 = *(void *)(v0 + 200);
    uint64_t v4 = *(void *)(v0 + 176);
    uint64_t v5 = *(void *)(v0 + 120);
    uint64_t v6 = type metadata accessor for Logger(0LL);
    sub_10000A720(v6, (uint64_t)qword_100A2A1C8);
    uint64_t v7 = v2(v3, v5, v4);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.error.getter(v8);
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void *)(v0 + 200);
    uint64_t v12 = *(void *)(v0 + 176);
    uint64_t v13 = *(void *)(v0 + 184);
    if (v10)
    {
      uint64_t v14 = swift_slowAlloc(22LL, -1LL);
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      uint64_t v27 = v15;
      *(_DWORD *)uint64_t v14 = 141558275;
      *(void *)(v0 + 96) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v14 + 4, v14 + 12);
      *(_WORD *)(v14 + 12) = 2081;
      uint64_t v16 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v12, v16);
      *(void *)(v0 + 104) = sub_1003F11D4(v17, v18, &v27);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v14 + 14, v14 + 22);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v11, v12);
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "Beacon/group does not exist for given UUID %{private,mask.hash}s",  (uint8_t *)v14,  0x16u);
      swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(void, void))(v13 + 8))(*(void *)(v0 + 200), *(void *)(v0 + 176));
    }

    unint64_t v21 = sub_1001177B0();
    uint64_t v22 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v21, 0LL, 0LL);
    _BYTE *v23 = 0;
    swift_willThrow(v22);
    uint64_t v24 = *(void *)(v0 + 200);
    uint64_t v25 = *(void *)(v0 + 168);
    uint64_t v26 = *(void *)(v0 + 144);
    swift_task_dealloc(*(void *)(v0 + 208));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    sub_10002218C(v1, *(void *)(v0 + 168), type metadata accessor for OwnedBeaconGroup);
    uint64_t v19 = (void *)swift_task_alloc(dword_1009A152C);
    *(void *)(v0 + 360) = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_100100324;
    return sub_100100388(*(void *)(v0 + 112), *(void *)(v0 + 168));
  }

uint64_t sub_100100324()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 360);
  *(void *)(*v1 + 368) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_100118978;
  }
  else {
    uint64_t v4 = sub_10011893C;
  }
  return swift_task_switch(v4, *(void *)(v2 + 128), 0LL);
}

uint64_t sub_100100388(uint64_t a1, uint64_t a2)
{
  v3[31] = a2;
  v3[32] = v2;
  v3[30] = a1;
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  v3[33] = v4;
  v3[34] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for OwnedBeaconRecord(0LL);
  v3[35] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[36] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[37] = swift_task_alloc(v7);
  v3[38] = swift_task_alloc(v7);
  v3[39] = swift_task_alloc(v7);
  v3[40] = swift_task_alloc(v7);
  uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
  v3[41] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  v3[42] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v3[43] = v10;
  uint64_t v11 = *(void *)(v10 + 64);
  v3[44] = v11;
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v3[45] = swift_task_alloc(v12);
  v3[46] = swift_task_alloc(v12);
  v3[47] = swift_task_alloc(v12);
  v3[48] = swift_task_alloc(v12);
  v3[49] = swift_task_alloc(v12);
  v3[50] = swift_task_alloc(v12);
  v3[51] = swift_task_alloc(v12);
  return swift_task_switch(sub_1001004D8, v2, 0LL);
}

uint64_t sub_1001004D8()
{
  uint64_t v1 = *(void *)(v0 + 408);
  uint64_t v2 = *(void *)(v0 + 336);
  uint64_t v3 = *(void *)(v0 + 344);
  uint64_t v4 = *(void *)(v0 + 248);
  uint64_t v5 = v4 + *(int *)(type metadata accessor for OwnedBeaconGroup(0LL) + 24);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  *(void *)(v0 + 416) = v6;
  v6(v1, v5, v2);
  if (qword_10099B118 != -1) {
    swift_once(&qword_10099B118, sub_1000F95A0);
  }
  uint64_t v7 = *(void *)(v0 + 240);
  uint64_t v9 = *(void *)(v0 + 400);
  uint64_t v8 = *(void *)(v0 + 408);
  uint64_t v10 = *(void *)(v0 + 392);
  uint64_t v11 = *(void *)(v0 + 336);
  uint64_t v12 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 424) = sub_10000A720(v12, (uint64_t)qword_100A2A1C8);
  v6(v9, v8, v11);
  uint64_t v13 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v6)(v10, v7, v11);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter(v14);
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v18 = *(void *)(v0 + 392);
  uint64_t v17 = *(void *)(v0 + 400);
  uint64_t v20 = *(void *)(v0 + 336);
  uint64_t v19 = *(void *)(v0 + 344);
  if (v16)
  {
    os_log_type_t type = v15;
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v91 = swift_slowAlloc(64LL, -1LL);
    v95[0] = v91;
    *(_DWORD *)uint64_t v21 = 141558531;
    *(void *)(v0 + 216) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v21 + 4, v21 + 12);
    *(_WORD *)(v21 + 12) = 2081;
    uint64_t v22 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v20, v22);
    *(void *)(v0 + 224) = sub_1003F11D4(v23, v24, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease();
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v25(v17, v20);
    *(_WORD *)(v21 + 22) = 2082;
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v20, v22);
    *(void *)(v0 + 232) = sub_1003F11D4(v26, v27, v95);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v21 + 24, v21 + 32);
    swift_bridgeObjectRelease();
    v25(v18, v20);
    _os_log_impl( (void *)&_mh_execute_header,  v14,  type,  "disableNotifyWhenFound for %{private,mask.hash}s, commandId %{public}s",  (uint8_t *)v21,  0x20u);
    swift_arrayDestroy(v91, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v91, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  else
  {
    uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v25(*(void *)(v0 + 400), *(void *)(v0 + 336));
    v25(v18, v20);
  }

  *(void *)(v0 + 432) = v25;
  sub_1001CC778();
  *(void *)(v0 + 440) = v28;
  char v29 = *(_BYTE *)(v28 + 32);
  *(_BYTE *)(v0 + 652) = v29;
  uint64_t v30 = -1LL;
  uint64_t v31 = -1LL << v29;
  uint64_t v32 = *(void *)(v28 + 56);
  if (-v31 < 64) {
    uint64_t v30 = ~(-1LL << -(char)v31);
  }
  *(void *)(v0 + 448) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 456) = v25;
  unint64_t v33 = v30 & v32;
  if (v33)
  {
    uint64_t v34 = 0LL;
    unint64_t v35 = __clz(__rbit64(v33));
    uint64_t v36 = (v33 - 1) & v33;
    goto LABEL_10;
  }

  unint64_t v47 = 63 - v31;
  if (v47 <= 0x7F) {
    goto LABEL_34;
  }
  unint64_t v48 = *(void *)(v28 + 64);
  if (!v48)
  {
    if (v47 >= 0xC0)
    {
      unint64_t v48 = *(void *)(v28 + 72);
      if (v48)
      {
        uint64_t v34 = 2LL;
        goto LABEL_18;
      }

      if (v47 >= 0x100)
      {
        unint64_t v48 = *(void *)(v28 + 80);
        if (v48)
        {
          uint64_t v34 = 3LL;
          goto LABEL_18;
        }

        if (v47 >= 0x140)
        {
          unint64_t v48 = *(void *)(v28 + 88);
          if (v48)
          {
            uint64_t v34 = 4LL;
            goto LABEL_18;
          }

          uint64_t v49 = 0LL;
          uint64_t v50 = v47 >> 6;
          if (v50 <= 5) {
            uint64_t v50 = 5LL;
          }
          uint64_t v51 = v50 - 5;
          while (v51 != v49)
          {
            unint64_t v48 = *(void *)(v28 + 96 + 8 * v49++);
            if (v48)
            {
              uint64_t v34 = v49 + 4;
              goto LABEL_18;
            }
          }
        }
      }
    }

uint64_t sub_100100D78(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 488LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 256LL);
  *(void *)(*(void *)v1 + 496LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100100DD8, v3, 0LL);
}

uint64_t sub_100100DD8()
{
  uint64_t v1 = (void *)(v0 + 96);
  if (*(void *)(v0 + 496))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return swift_task_switch(sub_100100FE8, *(void *)(v0 + 496), 0LL);
  }

  else
  {
    uint64_t v3 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No BeaconStoreActor available!", v6, 2u);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    uint64_t v7 = *(void (**)(uint64_t, uint64_t))(v0 + 432);
    uint64_t v8 = *(void *)(v0 + 384);
    uint64_t v9 = *(void *)(v0 + 336);

    unint64_t v10 = sub_1000157D0();
    uint64_t v25 = swift_allocError(&type metadata for DaemonError, v10, 0LL, 0LL);
    *uint64_t v11 = 0xD000000000000010LL;
    v11[1] = 0x8000000100850F20LL;
    swift_willThrow(v25);
    swift_bridgeObjectRelease();
    v7(v8, v9);
    swift_release();
    uint64_t v13 = *(void *)(v0 + 400);
    uint64_t v12 = *(void *)(v0 + 408);
    uint64_t v15 = *(void *)(v0 + 384);
    uint64_t v14 = *(void *)(v0 + 392);
    uint64_t v17 = *(void *)(v0 + 368);
    uint64_t v16 = *(void *)(v0 + 376);
    uint64_t v18 = *(void *)(v0 + 360);
    uint64_t v19 = *(void *)(v0 + 328);
    uint64_t v20 = *(void *)(v0 + 320);
    uint64_t v21 = *(void *)(v0 + 312);
    uint64_t v22 = *(void *)(v0 + 304);
    uint64_t v23 = *(void *)(v0 + 296);
    uint64_t v24 = *(void *)(v0 + 272);
    (*(void (**)(uint64_t, void))(v0 + 432))(v12, *(void *)(v0 + 336));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100100FE8()
{
  uint64_t v1 = v0[62];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[60];
  uint64_t v3 = (void (*)(uint64_t, uint64_t, uint64_t))v0[52];
  uint64_t v5 = v0[47];
  uint64_t v4 = v0[48];
  uint64_t v7 = v0[43];
  uint64_t v6 = v0[44];
  uint64_t v8 = v0[42];
  v0[63] = *(void *)(v1 + 136);
  v3(v5, v4, v8);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v9 + 24) & ~v9;
  uint64_t v11 = swift_allocObject(&unk_10093E938, v10 + v6, v9 | 7);
  v0[64] = v11;
  *(void *)(v11 + 16) = v1;
  v2(v11 + v10, v5, v8);
  swift_retain();
  return swift_task_switch(sub_100101098, 0LL, 0LL);
}

uint64_t sub_100101098()
{
  uint64_t v2 = v0[63];
  uint64_t v1 = v0[64];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[65] = v3;
  v3[2] = v2;
  v3[3] = sub_10011795C;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[66] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100101140;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[34],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100118954,  v3,  v0[33]);
}

uint64_t sub_100101140()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 520LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 256LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 528LL));
  swift_release();
  swift_release();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1001011C4, v2, 0LL);
}

uint64_t sub_1001011C4()
{
  uint64_t v1 = *(void *)(v0 + 272);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 288) + 48LL))( v1,  1LL,  *(void *)(v0 + 280)) != 1)
  {
    uint64_t v11 = *(void *)(v0 + 448);
    uint64_t v13 = *(void *)(v0 + 312);
    uint64_t v12 = *(void *)(v0 + 320);
    sub_10002218C(v1, v12, type metadata accessor for OwnedBeaconRecord);
    sub_10001DC4C(v12, v13, type metadata accessor for OwnedBeaconRecord);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v11);
    unint64_t v15 = *(void *)(v0 + 448);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      unint64_t v15 = sub_1004C46DC(0, *(void *)(v15 + 16) + 1LL, 1, *(void *)(v0 + 448));
    }
    unint64_t v17 = *(void *)(v15 + 16);
    unint64_t v16 = *(void *)(v15 + 24);
    if (v17 >= v16 >> 1) {
      unint64_t v15 = sub_1004C46DC(v16 > 1, v17 + 1, 1, v15);
    }
    uint64_t v18 = *(uint64_t (**)(uint64_t, uint64_t))(v0 + 456);
    uint64_t v19 = *(void *)(v0 + 384);
    uint64_t v20 = *(void *)(v0 + 336);
    uint64_t v21 = *(void *)(v0 + 312);
    uint64_t v22 = *(void *)(v0 + 320);
    uint64_t v23 = *(void *)(v0 + 288);
    *(void *)(v15 + 16) = v17 + 1;
    sub_10002218C( v21,  v15 + ((*(unsigned __int8 *)(v23 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v23 + 80))
    + *(void *)(v23 + 72) * v17,
      type metadata accessor for OwnedBeaconRecord);
    sub_100018C68(v22, type metadata accessor for OwnedBeaconRecord);
    uint64_t result = v18(v19, v20);
    int64_t v3 = *(void *)(v0 + 464);
    unint64_t v4 = *(void *)(v0 + 472);
    uint64_t v24 = *(void *)(v0 + 456);
    *(void *)(v0 + 448) = v15;
    *(void *)(v0 + 456) = v24;
    if (v4) {
      goto LABEL_3;
    }
LABEL_11:
    int64_t v25 = v3 + 1;
    if (__OFADD__(v3, 1LL))
    {
      __break(1u);
    }

    else
    {
      int64_t v26 = (unint64_t)((1LL << *(_BYTE *)(v0 + 652)) + 63) >> 6;
      uint64_t v7 = *(void *)(v0 + 440);
      if (v25 >= v26) {
        goto LABEL_29;
      }
      uint64_t v27 = v7 + 56;
      unint64_t v28 = *(void *)(v7 + 56 + 8 * v25);
      ++v3;
      if (v28)
      {
LABEL_14:
        uint64_t v5 = (v28 - 1) & v28;
        unint64_t v6 = __clz(__rbit64(v28)) + (v3 << 6);
        goto LABEL_4;
      }

      int64_t v3 = v25 + 1;
      if (v25 + 1 >= v26) {
        goto LABEL_29;
      }
      unint64_t v28 = *(void *)(v27 + 8 * v3);
      if (v28) {
        goto LABEL_14;
      }
      int64_t v3 = v25 + 2;
      if (v25 + 2 >= v26) {
        goto LABEL_29;
      }
      unint64_t v28 = *(void *)(v27 + 8 * v3);
      if (v28) {
        goto LABEL_14;
      }
      int64_t v35 = v25 + 3;
      if (v35 >= v26)
      {
LABEL_29:
        (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 344) + 56LL))( *(void *)(v0 + 328),  1LL,  1LL,  *(void *)(v0 + 336));
LABEL_30:
        swift_release();
        uint64_t v36 = *(void *)(v0 + 448);
        uint64_t v37 = *(void *)(v36 + 16);
        *(void *)(v0 + 536) = v37;
        if (v37)
        {
          uint64_t v39 = *(void *)(v0 + 280);
          uint64_t v38 = *(void *)(v0 + 288);
          int v40 = *(_DWORD *)(v38 + 80);
          *(_DWORD *)(v0 + 648) = v40;
          *(void *)(v0 + 544) = *(void *)(v38 + 72);
          *(_OWORD *)(v0 + 552) = 0u;
          uint64_t v41 = *(void *)(v0 + 304);
          sub_10001DC4C( v36 + ((v40 + 32LL) & ~(unint64_t)v40),  v41,  type metadata accessor for OwnedBeaconRecord);
          *(void *)(v0 + 40) = v39;
          *(void *)(v0 + 48) = sub_100015C48( (unint64_t *)&qword_10099D000,  255LL,  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_10080B120);
          uint64_t v42 = sub_10000A7C8((void *)(v0 + 16));
          sub_10001DC4C(v41, (uint64_t)v42, type metadata accessor for OwnedBeaconRecord);
          uint64_t v43 = (void *)swift_task_alloc(dword_1009A1534);
          *(void *)(v0 + 568) = v43;
          *uint64_t v43 = v0;
          v43[1] = sub_1001018CC;
          return sub_1001026D0(*(void *)(v0 + 240), v0 + 16);
        }

        uint64_t v44 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 416);
        uint64_t v45 = *(void *)(v0 + 408);
        uint64_t v46 = *(void *)(v0 + 360);
        uint64_t v47 = *(void *)(v0 + 336);
        swift_bridgeObjectRelease();
        uint64_t v48 = v44(v46, v45, v47);
        uint64_t v49 = (os_log_s *)Logger.logObject.getter(v48);
        os_log_type_t v50 = static os_log_type_t.error.getter(v49);
        BOOL v51 = os_log_type_enabled(v49, v50);
        uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v0 + 432);
        uint64_t v53 = *(void *)(v0 + 360);
        uint64_t v54 = *(void *)(v0 + 336);
        if (v51)
        {
          uint64_t v55 = swift_slowAlloc(22LL, -1LL);
          uint64_t v56 = swift_slowAlloc(32LL, -1LL);
          uint64_t v77 = v56;
          *(_DWORD *)uint64_t v55 = 141558275;
          *(void *)(v0 + 176) = 1752392040LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v55 + 4, v55 + 12);
          *(_WORD *)(v55 + 12) = 2081;
          uint64_t v57 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter(v54, v57);
          *(void *)(v0 + 184) = sub_1003F11D4(v58, v59, &v77);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v55 + 14, v55 + 22);
          swift_bridgeObjectRelease();
          v52(v53, v54);
          _os_log_impl( (void *)&_mh_execute_header,  v49,  v50,  "No eligible member beacon to disable notify when found for group %{private,mask.hash}s",  (uint8_t *)v55,  0x16u);
          swift_arrayDestroy(v56, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v56, -1LL, -1LL);
          swift_slowDealloc(v55, -1LL, -1LL);
        }

        else
        {
          v52(*(void *)(v0 + 360), *(void *)(v0 + 336));
        }

        unint64_t v60 = sub_1001177B0();
        uint64_t v76 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v60, 0LL, 0LL);
        *uint64_t v61 = 0;
        swift_willThrow(v76);
        uint64_t v63 = *(void *)(v0 + 400);
        uint64_t v62 = *(void *)(v0 + 408);
        uint64_t v65 = *(void *)(v0 + 384);
        uint64_t v64 = *(void *)(v0 + 392);
        uint64_t v67 = *(void *)(v0 + 368);
        uint64_t v66 = *(void *)(v0 + 376);
        uint64_t v68 = *(void *)(v0 + 360);
        uint64_t v69 = *(void *)(v0 + 328);
        uint64_t v70 = *(void *)(v0 + 320);
        uint64_t v71 = *(void *)(v0 + 312);
        uint64_t v72 = *(void *)(v0 + 304);
        uint64_t v73 = *(void *)(v0 + 296);
        uint64_t v74 = *(void *)(v0 + 272);
        (*(void (**)(uint64_t, void))(v0 + 432))(v62, *(void *)(v0 + 336));
        swift_task_dealloc(v62);
        swift_task_dealloc(v63);
        swift_task_dealloc(v64);
        swift_task_dealloc(v65);
        swift_task_dealloc(v66);
        swift_task_dealloc(v67);
        swift_task_dealloc(v68);
        swift_task_dealloc(v69);
        swift_task_dealloc(v70);
        swift_task_dealloc(v71);
        swift_task_dealloc(v72);
        swift_task_dealloc(v73);
        swift_task_dealloc(v74);
        uint64_t v34 = *(uint64_t (**)(void))(v0 + 8);
        return v34();
      }

      unint64_t v28 = *(void *)(v27 + 8 * v35);
      if (v28)
      {
        int64_t v3 = v35;
        goto LABEL_14;
      }

      while (1)
      {
        int64_t v3 = v35 + 1;
        if (__OFADD__(v35, 1LL)) {
          break;
        }
        if (v3 >= v26) {
          goto LABEL_29;
        }
        unint64_t v28 = *(void *)(v27 + 8 * v3);
        ++v35;
        if (v28) {
          goto LABEL_14;
        }
      }
    }

    __break(1u);
    goto LABEL_39;
  }

  (*(void (**)(void, void))(v0 + 432))(*(void *)(v0 + 384), *(void *)(v0 + 336));
  uint64_t result = sub_100015794(v1, (uint64_t *)&unk_1009A9C30);
  int64_t v3 = *(void *)(v0 + 464);
  unint64_t v4 = *(void *)(v0 + 472);
  *(void *)(v0 + 456) = *(void *)(v0 + 432);
  if (!v4) {
    goto LABEL_11;
  }
LABEL_3:
  uint64_t v5 = (v4 - 1) & v4;
  unint64_t v6 = __clz(__rbit64(v4)) | (v3 << 6);
  uint64_t v7 = *(void *)(v0 + 440);
LABEL_4:
  *(void *)(v0 + 464) = v3;
  *(void *)(v0 + 472) = v5;
  uint64_t v8 = *(void *)(v0 + 336);
  uint64_t v9 = *(void *)(v0 + 344);
  uint64_t v10 = *(void *)(v0 + 328);
  (*(void (**)(uint64_t, unint64_t, uint64_t))(v0 + 416))( v10,  *(void *)(v7 + 48) + *(void *)(v9 + 72) * v6,  v8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(v10, 0LL, 1LL, v8);
  uint64_t v29 = *(void *)(v0 + 384);
  uint64_t v30 = *(void *)(v0 + 336);
  uint64_t v31 = *(void *)(v0 + 328);
  uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 344) + 32LL);
  *(void *)(v0 + 480) = v32;
  v32(v29, v31, v30);
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 136, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 96);
    sub_100012ED8((void *)(v0 + 96), *(void *)(v0 + 120));
    unint64_t v75 = (uint64_t (*)(void))((char *)&dword_10099C890 + dword_10099C890);
    unint64_t v33 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 488) = v33;
    *unint64_t v33 = v0;
    v33[1] = sub_100100D78;
    uint64_t v34 = v75;
    return v34();
  }

uint64_t sub_1001018CC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 568);
  *(void *)(*v1 + 576) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 256);
    uint64_t v5 = sub_100102038;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 256);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v2 + 16));
    uint64_t v5 = sub_100101940;
    uint64_t v4 = v6;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_100101940()
{
  *(void *)(v0 + 584) = *(void *)(v0 + 552);
  uint64_t v1 = *(void *)(v0 + 560) + 1LL;
  if (v1 == *(void *)(v0 + 536))
  {
    uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 416);
    uint64_t v3 = *(void *)(v0 + 408);
    uint64_t v4 = *(void *)(v0 + 368);
    uint64_t v5 = *(void *)(v0 + 336);
    swift_bridgeObjectRelease();
    uint64_t v6 = v2(v4, v3, v5);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.default.getter(v7);
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v0 + 432);
    uint64_t v11 = *(void *)(v0 + 368);
    uint64_t v12 = *(void *)(v0 + 336);
    if (v9)
    {
      uint64_t v13 = swift_slowAlloc(22LL, -1LL);
      uint64_t v14 = swift_slowAlloc(32LL, -1LL);
      uint64_t v25 = v14;
      *(_DWORD *)uint64_t v13 = 141558275;
      *(void *)(v0 + 208) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v13 + 4, v13 + 12);
      *(_WORD *)(v13 + 12) = 2081;
      uint64_t v15 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
      *(void *)(v0 + 200) = sub_1003F11D4(v16, v17, &v25);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v13 + 14, v13 + 22);
      swift_bridgeObjectRelease();
      v10(v11, v12);
      _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Disabled notify when found for group %{private,mask.hash}s.",  (uint8_t *)v13,  0x16u);
      swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    else
    {
      v10(*(void *)(v0 + 368), *(void *)(v0 + 336));
    }

    uint64_t v23 = (void *)swift_task_alloc(dword_1009A14FC);
    *(void *)(v0 + 592) = v23;
    void *v23 = v0;
    v23[1] = sub_100101C40;
    uint64_t v24 = *(void *)(v0 + 256);
    v23[15] = v24;
    return swift_task_switch(sub_1000F9BD8, v24, 0LL);
  }

  else
  {
    *(void *)(v0 + 560) = v1;
    uint64_t v18 = *(void *)(v0 + 304);
    uint64_t v19 = *(void *)(v0 + 280);
    sub_10001DC4C( *(void *)(v0 + 448)
    + ((*(unsigned __int8 *)(v0 + 648) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 648))
    + *(void *)(v0 + 544) * v1,
      v18,
      type metadata accessor for OwnedBeaconRecord);
    *(void *)(v0 + 40) = v19;
    *(void *)(v0 + 48) = sub_100015C48( (unint64_t *)&qword_10099D000,  255LL,  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_10080B120);
    uint64_t v20 = sub_10000A7C8((void *)(v0 + 16));
    sub_10001DC4C(v18, (uint64_t)v20, type metadata accessor for OwnedBeaconRecord);
    uint64_t v21 = (void *)swift_task_alloc(dword_1009A1534);
    *(void *)(v0 + 568) = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_1001018CC;
    return sub_1001026D0(*(void *)(v0 + 240), v0 + 16);
  }

uint64_t sub_100101C40(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 592);
  *(void *)(*v2 + 600) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = *(void *)(v4 + 256);
    uint64_t v7 = sub_1001025D4;
  }

  else
  {
    *(void *)(v4 + 608) = a1;
    uint64_t v7 = sub_100101CB8;
    uint64_t v6 = a1;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_100101CB8()
{
  uint64_t v1 = v0[76];
  v0[77] = *(void *)(v1 + 136);
  uint64_t v2 = swift_allocObject(&unk_10093E910, 25LL, 7LL);
  v0[78] = v2;
  *(void *)(v2 + 16) = v1;
  *(_BYTE *)(v2 + 24) = 17;
  swift_retain();
  return swift_task_switch(sub_100101D24, 0LL, 0LL);
}

uint64_t sub_100101D24()
{
  uint64_t v1 = v0[78];
  uint64_t v2 = v0[77];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[79] = v3;
  v3[2] = v2;
  v3[3] = sub_100118990;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[80] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100101DD4;
  return withCheckedContinuation<A>(isolation:function:_:)( v4,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_10011895C,  v3,  (char *)&type metadata for () + 8);
}

uint64_t sub_100101DD4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 632LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 608LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 640LL));
  swift_release();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100101E4C, v2, 0LL);
}

uint64_t sub_100101E4C()
{
  uint64_t v1 = *(void *)(v0 + 256);
  swift_release();
  return swift_task_switch(sub_100101E8C, v1, 0LL);
}

uint64_t sub_100101E8C()
{
  if (*(void *)(v0 + 584))
  {
    swift_willThrow();
    uint64_t v2 = *(void *)(v0 + 400);
    uint64_t v1 = *(void *)(v0 + 408);
    uint64_t v4 = *(void *)(v0 + 384);
    uint64_t v3 = *(void *)(v0 + 392);
    uint64_t v6 = *(void *)(v0 + 368);
    uint64_t v5 = *(void *)(v0 + 376);
    uint64_t v7 = *(void *)(v0 + 360);
    uint64_t v8 = *(void *)(v0 + 328);
    uint64_t v19 = *(void *)(v0 + 320);
    uint64_t v20 = *(void *)(v0 + 312);
    uint64_t v21 = *(void *)(v0 + 304);
    uint64_t v22 = *(void *)(v0 + 296);
    uint64_t v23 = *(void *)(v0 + 272);
    (*(void (**)(uint64_t, void))(v0 + 432))(v1, *(void *)(v0 + 336));
    swift_task_dealloc(v1);
    swift_task_dealloc(v2);
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v19);
  }

  else
  {
    uint64_t v9 = *(void *)(v0 + 400);
    uint64_t v10 = *(void *)(v0 + 408);
    uint64_t v12 = *(void *)(v0 + 384);
    uint64_t v11 = *(void *)(v0 + 392);
    uint64_t v14 = *(void *)(v0 + 368);
    uint64_t v13 = *(void *)(v0 + 376);
    uint64_t v15 = *(void *)(v0 + 360);
    uint64_t v16 = *(void *)(v0 + 328);
    uint64_t v17 = *(void *)(v0 + 320);
    uint64_t v20 = *(void *)(v0 + 312);
    uint64_t v21 = *(void *)(v0 + 304);
    uint64_t v22 = *(void *)(v0 + 296);
    uint64_t v23 = *(void *)(v0 + 272);
    (*(void (**)(uint64_t, void))(v0 + 432))(v10, *(void *)(v0 + 336));
    swift_task_dealloc(v10);
    swift_task_dealloc(v9);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
  }

  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100102038()
{
  uint64_t v1 = (void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 576);
  uint64_t v4 = *(void *)(v0 + 296);
  uint64_t v3 = *(void *)(v0 + 304);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  sub_10001DC4C(v3, v4, type metadata accessor for OwnedBeaconRecord);
  swift_errorRetain(v2);
  uint64_t v5 = swift_errorRetain(v2);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter(v6);
  if (os_log_type_enabled(v6, v7))
  {
    uint64_t v8 = *(void *)(v0 + 576);
    uint64_t v9 = *(void *)(v0 + 336);
    uint64_t v49 = *(void *)(v0 + 552);
    uint64_t v50 = *(void *)(v0 + 304);
    uint64_t v10 = *(void *)(v0 + 296);
    uint64_t v11 = swift_slowAlloc(32LL, -1LL);
    uint64_t v47 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v48 = swift_slowAlloc(32LL, -1LL);
    uint64_t v51 = v48;
    *(_DWORD *)uint64_t v11 = 141558531;
    *(void *)(v0 + 192) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v11 + 4, v11 + 12);
    *(_WORD *)(v11 + 12) = 2081;
    uint64_t v12 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter(v9, v12);
    *(void *)(v0 + 160) = sub_1003F11D4(v13, v14, &v51);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v11 + 14, v11 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68(v10, type metadata accessor for OwnedBeaconRecord);
    *(_WORD *)(v11 + 22) = 2114;
    swift_errorRetain(v8);
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError(v8);
    *(void *)(v0 + 168) = v15;
    uint64_t v1 = (void *)(v0 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v11 + 24, v11 + 32);
    *uint64_t v47 = v15;
    swift_errorRelease(v8);
    swift_errorRelease(v8);
    _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "Could not disable notify when found for %{private,mask.hash}s, error: %{public}@",  (uint8_t *)v11,  0x20u);
    uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v47, 1LL, v16);
    swift_slowDealloc(v47, -1LL, -1LL);
    swift_arrayDestroy(v48, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v48, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);

    swift_errorRelease(v49);
    uint64_t v17 = v50;
  }

  else
  {
    uint64_t v18 = *(void *)(v0 + 576);
    uint64_t v19 = *(void *)(v0 + 552);
    uint64_t v21 = *(void *)(v0 + 296);
    uint64_t v20 = *(void *)(v0 + 304);

    swift_errorRelease(v18);
    swift_errorRelease(v18);
    sub_100018C68(v21, type metadata accessor for OwnedBeaconRecord);
    swift_errorRelease(v19);
    uint64_t v17 = v20;
  }

  sub_100018C68(v17, type metadata accessor for OwnedBeaconRecord);
  uint64_t v22 = *(void *)(v0 + 576);
  *(void *)(v0 + 584) = v22;
  uint64_t v23 = *(void *)(v0 + 560) + 1LL;
  if (v23 == *(void *)(v0 + 536))
  {
    uint64_t v24 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 416);
    uint64_t v25 = *(void *)(v0 + 408);
    uint64_t v26 = *(void *)(v0 + 368);
    uint64_t v27 = *(void *)(v0 + 336);
    swift_bridgeObjectRelease();
    uint64_t v28 = v24(v26, v25, v27);
    uint64_t v29 = (os_log_s *)Logger.logObject.getter(v28);
    os_log_type_t v30 = static os_log_type_t.default.getter(v29);
    BOOL v31 = os_log_type_enabled(v29, v30);
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v0 + 432);
    uint64_t v33 = *(void *)(v0 + 368);
    uint64_t v34 = *(void *)(v0 + 336);
    if (v31)
    {
      uint64_t v35 = swift_slowAlloc(22LL, -1LL);
      uint64_t v36 = swift_slowAlloc(32LL, -1LL);
      uint64_t v51 = v36;
      *(_DWORD *)uint64_t v35 = 141558275;
      *(void *)(v0 + 208) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v35 + 4, v35 + 12);
      *(_WORD *)(v35 + 12) = 2081;
      uint64_t v37 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter(v34, v37);
      *(void *)(v0 + 200) = sub_1003F11D4(v38, v39, &v51);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v35 + 14, v35 + 22);
      swift_bridgeObjectRelease();
      v32(v33, v34);
      _os_log_impl( (void *)&_mh_execute_header,  v29,  v30,  "Disabled notify when found for group %{private,mask.hash}s.",  (uint8_t *)v35,  0x16u);
      swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v36, -1LL, -1LL);
      swift_slowDealloc(v35, -1LL, -1LL);
    }

    else
    {
      v32(*(void *)(v0 + 368), *(void *)(v0 + 336));
    }

    uint64_t v45 = (void *)swift_task_alloc(dword_1009A14FC);
    *(void *)(v0 + 592) = v45;
    *uint64_t v45 = v0;
    v45[1] = sub_100101C40;
    uint64_t v46 = *(void *)(v0 + 256);
    v45[15] = v46;
    return swift_task_switch(sub_1000F9BD8, v46, 0LL);
  }

  else
  {
    *(void *)(v0 + 560) = v23;
    *(void *)(v0 + 552) = v22;
    uint64_t v40 = *(void *)(v0 + 304);
    uint64_t v41 = *(void *)(v0 + 280);
    sub_10001DC4C( *(void *)(v0 + 448)
    + ((*(unsigned __int8 *)(v0 + 648) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 648))
    + *(void *)(v0 + 544) * v23,
      v40,
      type metadata accessor for OwnedBeaconRecord);
    *(void *)(v0 + 40) = v41;
    *(void *)(v0 + 48) = sub_100015C48( (unint64_t *)&qword_10099D000,  255LL,  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_10080B120);
    uint64_t v42 = sub_10000A7C8(v1);
    sub_10001DC4C(v40, (uint64_t)v42, type metadata accessor for OwnedBeaconRecord);
    uint64_t v43 = (void *)swift_task_alloc(dword_1009A1534);
    *(void *)(v0 + 568) = v43;
    *uint64_t v43 = v0;
    v43[1] = sub_1001018CC;
    return sub_1001026D0(*(void *)(v0 + 240), (uint64_t)v1);
  }

uint64_t sub_1001025D4()
{
  uint64_t v2 = *(void *)(v0 + 400);
  uint64_t v1 = *(void *)(v0 + 408);
  uint64_t v4 = *(void *)(v0 + 384);
  uint64_t v3 = *(void *)(v0 + 392);
  uint64_t v6 = *(void *)(v0 + 368);
  uint64_t v5 = *(void *)(v0 + 376);
  uint64_t v7 = *(void *)(v0 + 360);
  uint64_t v8 = *(void *)(v0 + 328);
  uint64_t v9 = *(void *)(v0 + 320);
  uint64_t v11 = *(void *)(v0 + 312);
  uint64_t v12 = *(void *)(v0 + 304);
  uint64_t v13 = *(void *)(v0 + 296);
  uint64_t v14 = *(void *)(v0 + 272);
  (*(void (**)(uint64_t, void))(v0 + 432))(v1, *(void *)(v0 + 336));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001026D0(uint64_t a1, uint64_t a2)
{
  v3[17] = a2;
  v3[18] = v2;
  v3[16] = a1;
  uint64_t v4 = sub_100004AEC(&qword_1009A1718);
  v3[19] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC(&qword_1009AA900);
  v3[20] = v5;
  v3[21] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord(0LL);
  v3[22] = found;
  uint64_t v7 = *(void *)(found - 8);
  v3[23] = v7;
  v3[24] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  v3[25] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[26] = v9;
  uint64_t v10 = *(void *)(v9 + 64);
  v3[27] = v10;
  unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v3[28] = swift_task_alloc(v11);
  v3[29] = swift_task_alloc(v11);
  v3[30] = swift_task_alloc(v11);
  return swift_task_switch(sub_1001027C8, v2, 0LL);
}

uint64_t sub_1001027C8()
{
  if (qword_10099B118 != -1) {
    swift_once(&qword_10099B118, sub_1000F95A0);
  }
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[30];
  uint64_t v3 = v0[25];
  uint64_t v4 = v0[26];
  uint64_t v5 = v0[17];
  uint64_t v6 = type metadata accessor for Logger(0LL);
  v0[31] = sub_10000A720(v6, (uint64_t)qword_100A2A1C8);
  sub_100013044(v5, (uint64_t)(v0 + 2));
  uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  v0[32] = v7;
  uint64_t v8 = v7(v2, v1, v3);
  uint64_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.default.getter(v9);
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = v0[30];
  if (v11)
  {
    uint64_t v13 = v0[29];
    uint64_t v15 = v0[25];
    uint64_t v14 = v0[26];
    uint64_t v31 = v0[30];
    uint64_t v16 = swift_slowAlloc(22LL, -1LL);
    uint64_t v34 = swift_slowAlloc(64LL, -1LL);
    uint64_t v35 = v34;
    *(_DWORD *)uint64_t v16 = 136315394;
    os_log_t log = v9;
    os_log_type_t type = v10;
    uint64_t v18 = v0[5];
    uint64_t v17 = v0[6];
    sub_100012ED8(v0 + 2, v18);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v17 + 8) + 8LL) + 32LL))(v18);
    uint64_t v19 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v20 = dispatch thunk of CustomStringConvertible.description.getter(v15, v19);
    unint64_t v22 = v21;
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
    v23(v13, v15);
    v0[14] = sub_1003F11D4(v20, v22, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 14, v0 + 15, v16 + 4, v16 + 12);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
    *(_WORD *)(v16 + 12) = 2080;
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v15, v19);
    v0[15] = sub_1003F11D4(v24, v25, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 15, v0 + 16, v16 + 14, v16 + 22);
    swift_bridgeObjectRelease();
    v23(v31, v15);
    _os_log_impl( (void *)&_mh_execute_header,  log,  type,  "disableNotifyWhenFound for %s, commandId %s",  (uint8_t *)v16,  0x16u);
    swift_arrayDestroy(v34, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  else
  {
    uint64_t v27 = v0[25];
    uint64_t v26 = v0[26];
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 2);
    uint64_t v23 = *(void (**)(uint64_t, uint64_t))(v26 + 8);
    v23(v12, v27);
  }

  v0[33] = v23;
  uint64_t v28 = (void *)swift_task_alloc(dword_1009A14FC);
  v0[34] = v28;
  *uint64_t v28 = v0;
  v28[1] = sub_100102AD8;
  uint64_t v29 = v0[18];
  v28[15] = v29;
  return swift_task_switch(sub_1000F9BD8, v29, 0LL);
}

uint64_t sub_100102AD8(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 272);
  *(void *)(*v2 + 280) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = *(void *)(v4 + 144);
  if (v1)
  {
    uint64_t v7 = sub_10010393C;
  }

  else
  {
    *(void *)(v4 + 288) = a1;
    uint64_t v7 = sub_100102B4C;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_100102B4C()
{
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = *(void **)(v0 + 136);
  uint64_t v3 = v2[3];
  uint64_t v4 = v2[4];
  sub_100012ED8(v2, v3);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v4 + 8) + 8LL) + 32LL))(v3);
  return swift_task_switch(sub_100102BBC, v1, 0LL);
}

uint64_t sub_100102BBC()
{
  uint64_t v1 = v0[36];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[32];
  uint64_t v4 = v0[28];
  uint64_t v3 = v0[29];
  uint64_t v6 = v0[26];
  uint64_t v5 = v0[27];
  uint64_t v7 = v0[25];
  v0[37] = *(void *)(v1 + 136);
  v2(v4, v3, v7);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_10093E8C0, v9 + v5, v8 | 7);
  v0[38] = v10;
  *(void *)(v10 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v10 + v9, v4, v7);
  swift_retain();
  return swift_task_switch(sub_100102C6C, 0LL, 0LL);
}

uint64_t sub_100102C6C()
{
  uint64_t v2 = v0[37];
  uint64_t v1 = v0[38];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[39] = v3;
  v3[2] = v2;
  v3[3] = sub_100117B8C;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[40] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100102D14;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[21],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100118958,  v3,  v0[20]);
}

uint64_t sub_100102D14()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 312LL);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 264LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 232LL);
  uint64_t v4 = *(void *)(*(void *)v0 + 200LL);
  uint64_t v5 = *(void *)(*(void *)v0 + 144LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 320LL));
  swift_release();
  swift_release();
  swift_task_dealloc(v1);
  v2(v3, v4);
  return swift_task_switch(sub_100102DBC, v5, 0LL);
}

uint64_t sub_100102DBC()
{
  uint64_t v1 = *(void *)(v0 + 168);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 184) + 48LL))( v1,  1LL,  *(void *)(v0 + 176)) == 1)
  {
    uint64_t v2 = *(void *)(v0 + 136);
    sub_100015794(v1, &qword_1009AA900);
    uint64_t v3 = sub_100013044(v2, v0 + 56);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v0 + 264);
      uint64_t v6 = *(void *)(v0 + 232);
      uint64_t v7 = *(void *)(v0 + 200);
      uint64_t v8 = swift_slowAlloc(22LL, -1LL);
      uint64_t v9 = swift_slowAlloc(32LL, -1LL);
      uint64_t v28 = v9;
      *(_DWORD *)uint64_t v8 = 141558275;
      *(void *)(v0 + 96) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v8 + 4, v8 + 12);
      *(_WORD *)(v8 + 12) = 2081;
      uint64_t v11 = *(void *)(v0 + 80);
      uint64_t v10 = *(void *)(v0 + 88);
      sub_100012ED8((void *)(v0 + 56), v11);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8LL) + 32LL))(v11);
      uint64_t v12 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter(v7, v12);
      unint64_t v15 = v14;
      v27(v6, v7);
      *(void *)(v0 + 104) = sub_1003F11D4(v13, v15, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v8 + 14, v8 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
      _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "No notify when found record for beacon %{private,mask.hash}s.",  (uint8_t *)v8,  0x16u);
      swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v9, -1LL, -1LL);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
    }

    unint64_t v19 = sub_1001177B0();
    uint64_t v20 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v19, 0LL, 0LL);
    *unint64_t v21 = 0;
    swift_willThrow(v20);
    uint64_t v22 = *(void *)(v0 + 232);
    uint64_t v23 = *(void *)(v0 + 224);
    uint64_t v24 = *(void *)(v0 + 192);
    uint64_t v25 = *(void *)(v0 + 168);
    uint64_t v26 = *(void *)(v0 + 152);
    swift_task_dealloc(*(void *)(v0 + 240));
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    sub_10002218C(v1, *(void *)(v0 + 192), type metadata accessor for NotifyWhenFoundRecord);
    uint64_t v16 = (void *)swift_task_alloc(dword_1009A14FC);
    *(void *)(v0 + 328) = v16;
    void *v16 = v0;
    v16[1] = sub_1001030D0;
    uint64_t v17 = *(void *)(v0 + 144);
    v16[15] = v17;
    return swift_task_switch(sub_1000F9BD8, v17, 0LL);
  }

uint64_t sub_1001030D0(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 328LL);
  v3[42] = a1;
  v3[43] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    os_log_type_t v5 = sub_1001039B8;
  }
  else {
    os_log_type_t v5 = sub_10010313C;
  }
  return swift_task_switch(v5, v3[18], 0LL);
}

uint64_t sub_10010313C()
{
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v3 = *(void *)(v0 + 152);
  uint64_t v4 = swift_task_alloc(32LL);
  *(void *)(v4 + 16) = v2;
  sub_100611BB0((void (*)(uint64_t, char **))sub_100118604, v3);
  uint64_t v5 = *(void *)(v0 + 336);
  if (v1)
  {
    uint64_t v6 = *(void *)(v0 + 192);
    swift_release();
    swift_task_dealloc(v4);
    sub_100018C68(v6, type metadata accessor for NotifyWhenFoundRecord);
    uint64_t v7 = *(void *)(v0 + 232);
    uint64_t v8 = *(void *)(v0 + 224);
    uint64_t v9 = *(void *)(v0 + 192);
    uint64_t v10 = *(void *)(v0 + 168);
    uint64_t v11 = *(void *)(v0 + 152);
    swift_task_dealloc(*(void *)(v0 + 240));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    swift_task_dealloc(v4);
    return swift_task_switch(sub_100103250, v5, 0LL);
  }

uint64_t sub_100103250()
{
  *(void *)(v0 + 352) = *(void *)(*(void *)(v0 + 336) + 128LL);
  return swift_task_switch(sub_100103270, 0LL, 0LL);
}

uint64_t sub_100103270()
{
  uint64_t v1 = v0[44];
  uint64_t v2 = v0[19];
  uint64_t v3 = swift_task_alloc(32LL);
  v0[45] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[46] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100103314;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v4,  0LL,  0LL,  0xD000000000000011LL,  0x80000001008545C0LL,  sub_10011898C,  v3,  (char *)&type metadata for () + 8);
}

uint64_t sub_100103314()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 368);
  *(void *)(*v1 + 376) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_1001034E8;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 360));
    uint64_t v4 = sub_100103380;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100103380()
{
  uint64_t v1 = *(void *)(v0 + 144);
  sub_100015794(*(void *)(v0 + 152), &qword_1009A1718);
  swift_release();
  return swift_task_switch(sub_1001033D0, v1, 0LL);
}

uint64_t sub_1001033D0()
{
  uint64_t v1 = v0[23];
  uint64_t v2 = v0[24];
  uint64_t v3 = sub_100004AEC(&qword_1009A17F0);
  uint64_t v4 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = swift_allocObject(v3, v5 + *(void *)(v1 + 72), v4 | 7);
  v0[48] = v6;
  *(_OWORD *)(v6 + 16) = xmmword_1007E67D0;
  sub_10001DC4C(v2, v6 + v5, type metadata accessor for NotifyWhenFoundRecord);
  uint64_t v7 = (void *)swift_task_alloc(dword_1009A1564);
  v0[49] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100103478;
  return sub_100113050(v6);
}

uint64_t sub_100103478()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 392);
  *(void *)(*v1 + 400) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 144);
  swift_bridgeObjectRelease();
  if (v0) {
    uint64_t v5 = sub_100103A44;
  }
  else {
    uint64_t v5 = sub_100103604;
  }
  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_1001034E8()
{
  uint64_t v1 = *(void *)(v0 + 336);
  swift_task_dealloc(*(void *)(v0 + 360));
  return swift_task_switch(sub_100103528, v1, 0LL);
}

uint64_t sub_100103528()
{
  uint64_t v1 = *(void *)(v0 + 144);
  sub_100015794(*(void *)(v0 + 152), &qword_1009A1718);
  swift_release();
  return swift_task_switch(sub_100103578, v1, 0LL);
}

uint64_t sub_100103578()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 152);
  swift_task_dealloc(*(void *)(v0 + 240));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100103604()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1009A14FC);
  *(void *)(v0 + 408) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100103668;
  uint64_t v2 = *(void *)(v0 + 144);
  v1[15] = v2;
  return swift_task_switch(sub_1000F9BD8, v2, 0LL);
}

uint64_t sub_100103668(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 408);
  *(void *)(*v2 + 416) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = *(void *)(v4 + 144);
    uint64_t v7 = sub_100103AD0;
  }

  else
  {
    *(void *)(v4 + 424) = a1;
    uint64_t v7 = sub_1001036E0;
    uint64_t v6 = a1;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_1001036E0()
{
  uint64_t v1 = v0[53];
  v0[54] = *(void *)(v1 + 136);
  uint64_t v2 = swift_allocObject(&unk_10093E8E8, 25LL, 7LL);
  v0[55] = v2;
  *(void *)(v2 + 16) = v1;
  *(_BYTE *)(v2 + 24) = 17;
  swift_retain();
  return swift_task_switch(sub_10010374C, 0LL, 0LL);
}

uint64_t sub_10010374C()
{
  uint64_t v2 = v0[54];
  uint64_t v1 = v0[55];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[56] = v3;
  v3[2] = v2;
  v3[3] = sub_100118650;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[57] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1001037F8;
  return withCheckedContinuation<A>(isolation:function:_:)( v4,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_10011865C,  v3,  (char *)&type metadata for () + 8);
}

uint64_t sub_1001037F8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 448LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 424LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 456LL));
  swift_release();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_10010386C, v2, 0LL);
}

uint64_t sub_10010386C()
{
  uint64_t v1 = *(void *)(v0 + 144);
  swift_release();
  return swift_task_switch(sub_1001038AC, v1, 0LL);
}

uint64_t sub_1001038AC()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 224);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v5 = *(void *)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 152);
  sub_100018C68(v4, type metadata accessor for NotifyWhenFoundRecord);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10010393C()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 152);
  swift_task_dealloc(*(void *)(v0 + 240));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001039B8()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 152);
  swift_task_dealloc(*(void *)(v0 + 240));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100103A44()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 152);
  swift_task_dealloc(*(void *)(v0 + 240));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100103AD0()
{
  uint64_t v1 = *(void *)(v0 + 232);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v5 = *(void *)(v0 + 152);
  swift_task_dealloc(*(void *)(v0 + 240));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100103B5C()
{
  v1[2] = v0;
  v1[3] = *v0;
  uint64_t v2 = type metadata accessor for DispatchQoS(0LL);
  __int128 v1[4] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100103BBC, v0, 0LL);
}

uint64_t sub_100103BBC()
{
  if (qword_10099B118 != -1) {
    swift_once(&qword_10099B118, sub_1000F95A0);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2A1C8);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Registering new xpc activity for Notify WhenFound.", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = (void *)swift_task_alloc(dword_1009A14FC);
  *(void *)(v0 + 40) = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100103CCC;
  uint64_t v7 = *(void *)(v0 + 16);
  v6[15] = v7;
  return swift_task_switch(sub_1000F9BD8, v7, 0LL);
}

uint64_t sub_100103CCC(uint64_t a1)
{
  os_log_type_t v4 = (void *)*v2;
  uint64_t v5 = *(void *)(*v2 + 40);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_task_dealloc(v4[4]);
    return (*(uint64_t (**)(void))(v6 + 8))();
  }

  else
  {
    uint64_t v8 = v4[2];
    v4[6] = a1;
    return swift_task_switch(sub_100103D50, v8, 0LL);
  }

uint64_t sub_100103D50()
{
  uint64_t v1 = v0[6];
  uint64_t v2 = v0[3];
  uint64_t v3 = v0[2];
  type metadata accessor for XPCActivity(0LL);
  static DispatchQoS.default.getter();
  uint64_t v4 = swift_allocObject(&unk_10093E848, 32LL, 7LL);
  *(void *)(v4 + 16) = v1;
  *(void *)(v4 + 24) = v2;
  uint64_t v5 = swift_allocObject(&unk_10093E870, 24LL, 7LL);
  swift_weakInit(v5 + 16, v3);
  uint64_t v6 = async function pointer to XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)[1];
  swift_retain();
  uint64_t v7 = (void *)swift_task_alloc(v6);
  v0[7] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_100103E48;
  return XPCActivity.__allocating_init(name:qos:criteriaBlock:handler:)( 0xD000000000000026LL,  0x80000001008546A0LL,  v0[4],  &unk_1009A17A0,  v4,  &unk_1009A17B0,  v5);
}

uint64_t sub_100103E48(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 56LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 16LL);
  *(void *)(*(void *)v1 + 64LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100103EA8, v3, 0LL);
}

uint64_t sub_100103EA8()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 16);
  swift_release(*(void *)(v0 + 48));
  uint64_t v4 = *(void *)(v3 + 136);
  *(void *)(v3 + 136) = v1;
  swift_release(v4);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100103F04(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  void v4[3] = a2;
  v4[4] = a4;
  void v4[2] = a1;
  uint64_t v6 = sub_100004AEC(&qword_1009A17B8);
  v4[5] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for XPCActivity.Criteria(0LL);
  v4[6] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v4[7] = v8;
  v4[8] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = (void *)swift_task_alloc(dword_1009A17C4);
  void v4[9] = v9;
  *uint64_t v9 = v4;
  v9[1] = sub_100103FA4;
  return sub_100117D4C(a3);
}

uint64_t sub_100103FA4(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 72LL);
  *(_BYTE *)(*(void *)v1 + 88LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100104000, 0LL, 0LL);
}

uint64_t sub_100104000()
{
  if (*(_BYTE *)(v0 + 88) == 1)
  {
    uint64_t v1 = *(void *)(v0 + 48);
    uint64_t v2 = *(void *)(v0 + 56);
    uint64_t v3 = *(void *)(v0 + 40);
    sub_10001581C(*(void *)(v0 + 24), v3, &qword_1009A17B8);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) == 1)
    {
      sub_100015794(*(void *)(v0 + 40), &qword_1009A17B8);
      uint64_t v4 = (void *)swift_task_alloc(dword_1009A17CC);
      *(void *)(v0 + 80) = v4;
      *uint64_t v4 = v0;
      v4[1] = sub_100104124;
      return sub_1000F9620(*(void *)(v0 + 16));
    }

    uint64_t v7 = *(void *)(v0 + 64);
    uint64_t v8 = *(void *)(v0 + 48);
    uint64_t v9 = *(void *)(v0 + 16);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 56) + 32LL);
    v10(v7, *(void *)(v0 + 40), v8);
    v10(v9, v7, v8);
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v6 = 1LL;
  }

  uint64_t v11 = *(void *)(v0 + 64);
  uint64_t v12 = *(void *)(v0 + 40);
  (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 56) + 56LL))( *(void *)(v0 + 16),  v6,  1LL,  *(void *)(v0 + 48));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100104124()
{
  return swift_task_switch(sub_100104178, 0LL, 0LL);
}

uint64_t sub_100104178()
{
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v2 = *(void *)(v0 + 40);
  (*(void (**)(void, void, uint64_t, void))(*(void *)(v0 + 56) + 56LL))( *(void *)(v0 + 16),  0LL,  1LL,  *(void *)(v0 + 48));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001041CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[7] = a2;
  v3[8] = a3;
  v3[6] = a1;
  uint64_t v4 = type metadata accessor for XPCActivity.State(0LL);
  void v3[9] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[10] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[11] = swift_task_alloc(v6);
  v3[12] = swift_task_alloc(v6);
  return swift_task_switch(sub_100104240, 0LL, 0LL);
}

uint64_t sub_100104240()
{
  if (qword_10099B118 != -1) {
    swift_once(&qword_10099B118, sub_1000F95A0);
  }
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 72);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_10000A720(v5, (uint64_t)qword_100A2A1C8);
  unint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16);
  uint64_t v7 = v6(v1, v4, v2);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = *(void *)(v0 + 96);
  uint64_t v12 = *(void *)(v0 + 72);
  uint64_t v13 = *(void *)(v0 + 80);
  if (v10)
  {
    unint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    unint64_t v39 = v6;
    uint64_t v40 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v40;
    *(_DWORD *)unint64_t v14 = 136446210;
    uint64_t v16 = sub_100015C48( &qword_10099CAD8,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity.State,  (uint64_t)&protocol conformance descriptor for XPCActivity.State);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v12, v16);
    *(void *)(v0 + 40) = sub_1003F11D4(v17, v18, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    unint64_t v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(v11, v12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "Notify when found activity state: %{public}s.", v14, 0xCu);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v20 = v15;
    unint64_t v6 = v39;
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
  }

  else
  {
    unint64_t v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v19(*(void *)(v0 + 96), *(void *)(v0 + 72));
  }

  uint64_t v22 = *(void *)(v0 + 80);
  uint64_t v21 = *(void *)(v0 + 88);
  uint64_t v23 = *(void *)(v0 + 72);
  v6(v21, *(void *)(v0 + 56), v23);
  int v24 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 88))(v21, v23);
  if (v24 == enum case for XPCActivity.State.checkIn(_:) || v24 == enum case for XPCActivity.State.wait(_:)) {
    goto LABEL_11;
  }
  if (v24 != enum case for XPCActivity.State.run(_:))
  {
    if (v24 == enum case for XPCActivity.State.defer(_:))
    {
      uint64_t v31 = type metadata accessor for XPCActivity(0LL);
      uint64_t v32 = sub_100015C48( &qword_10099CAD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity,  (uint64_t)&protocol conformance descriptor for XPCActivity);
      uint64_t v33 = dispatch thunk of Actor.unownedExecutor.getter(v31, v32);
      return swift_task_switch(sub_100104638, v33, v34);
    }

    if (v24 != enum case for XPCActivity.State.continue(_:)
      && v24 != enum case for XPCActivity.State.done(_:)
      && v24 != enum case for XPCActivity.State.invalidated(_:))
    {
      v19(*(void *)(v0 + 88), *(void *)(v0 + 72));
    }

uint64_t sub_100104638()
{
  return swift_task_switch(sub_100104674, 0LL, 0LL);
}

uint64_t sub_100104674()
{
  uint64_t v1 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 96));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001046AC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 104LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 112LL));
  swift_release(v1);
  uint64_t v2 = type metadata accessor for XPCActivity(0LL);
  uint64_t v3 = sub_100015C48( &qword_10099CAD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for XPCActivity,  (uint64_t)&protocol conformance descriptor for XPCActivity);
  uint64_t v4 = dispatch thunk of Actor.unownedExecutor.getter(v2, v3);
  return swift_task_switch(sub_100104748, v4, v5);
}

uint64_t sub_100104748()
{
  return swift_task_switch(sub_10011897C, 0LL, 0LL);
}

uint64_t sub_100104784()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v24 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for TaskPriority(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1LL, 1LL, v5);
  uint64_t v7 = (void *)swift_allocObject(&unk_10093E7F8, 40LL, 7LL);
  v7[2] = 0LL;
  uint64_t v8 = v7 + 2;
  v7[3] = 0LL;
  void v7[4] = v1;
  int v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5);
  uint64_t v10 = swift_retain();
  if (v9 == 1)
  {
    sub_100015794((uint64_t)v4, &qword_1009A9BF0);
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 7168LL;
  }

  else
  {
    unsigned __int8 v14 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    uint64_t v13 = v14 | 0x1C00LL;
    uint64_t v15 = *v8;
    if (*v8)
    {
      uint64_t v16 = v7[3];
      uint64_t ObjectType = swift_getObjectType(*v8);
      swift_unknownObjectRetain(v15);
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      uint64_t v12 = v18;
      swift_unknownObjectRelease(v15);
    }

    else
    {
      uint64_t v11 = 0LL;
      uint64_t v12 = 0LL;
    }
  }

  uint64_t v19 = swift_allocObject(&unk_10093E820, 32LL, 7LL);
  *(void *)(v19 + 16) = &unk_1009A1788;
  *(void *)(v19 + 24) = v7;
  uint64_t v20 = sub_100004AEC(&qword_1009A1748);
  if (v12 | v11)
  {
    v24[0] = 0LL;
    v24[1] = 0LL;
    uint64_t v21 = v24;
    v24[2] = v11;
    void v24[3] = v12;
  }

  else
  {
    uint64_t v21 = 0LL;
  }

  uint64_t v22 = swift_task_create(v13, v21, v20, &unk_1009A1790, v19);
  return swift_release(v22);
}

uint64_t sub_100104960(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 16) = a1;
  *(void *)(v4 + 24) = a4;
  return swift_task_switch(sub_100104978, a4, 0LL);
}

uint64_t sub_100104978()
{
  *(void *)(v0 + 32) = *(void *)(*(void *)(v0 + 24) + 136LL);
  swift_retain();
  return swift_task_switch(sub_1001049BC, 0LL, 0LL);
}

uint64_t sub_1001049BC()
{
  if (*(void *)(v0 + 32))
  {
    *(void *)(v0 + 40) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_100104A60;
    return v5(*(void *)(v0 + 16));
  }

  else
  {
    uint64_t v3 = *(void *)(v0 + 16);
    uint64_t v4 = type metadata accessor for XPCActivity.State(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100104A60()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 32LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 40LL));
  swift_release(v1);
  return swift_task_switch(sub_100104ABC, 0LL, 0LL);
}

uint64_t sub_100104ABC()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = type metadata accessor for XPCActivity.State(0LL);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 0LL, 1LL, v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100104B0C()
{
  v1[22] = v0;
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009B14F0);
  v1[23] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[24] = v3;
  v1[25] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v1[26] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[27] = v5;
  uint64_t v6 = *(void *)(v5 + 64);
  v1[28] = v6;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v1[29] = swift_task_alloc(v7);
  v1[30] = swift_task_alloc(v7);
  uint64_t v8 = sub_100004AEC(&qword_1009AA900);
  v1[31] = v8;
  v1[32] = swift_task_alloc((*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord(0LL);
  v1[33] = found;
  uint64_t v10 = *(void *)(found - 8);
  v1[34] = v10;
  v1[35] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100104BFC, v0, 0LL);
}

uint64_t sub_100104BFC()
{
  if (qword_10099B118 != -1) {
    swift_once(&qword_10099B118, sub_1000F95A0);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2A1C8);
  v0[36] = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "schedulerFired", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = (void *)swift_task_alloc(dword_1009A14FC);
  v0[37] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100104D10;
  uint64_t v7 = v0[22];
  v6[15] = v7;
  return swift_task_switch(sub_1000F9BD8, v7, 0LL);
}

uint64_t sub_100104D10(uint64_t a1)
{
  os_log_type_t v4 = (void *)*v2;
  uint64_t v5 = *(void *)(*v2 + 296);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
  {
    swift_errorRelease(v1);
    uint64_t v7 = v4[35];
    uint64_t v8 = v4[32];
    uint64_t v10 = v4[29];
    uint64_t v9 = v4[30];
    uint64_t v11 = v4[25];
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v6 + 8))();
  }

  else
  {
    v4[38] = a1;
    return swift_task_switch(sub_100104DC8, a1, 0LL);
  }

uint64_t sub_100104DC8()
{
  *(void *)(v0 + 312) = *(void *)(*(void *)(v0 + 304) + 136LL);
  swift_retain();
  return swift_task_switch(sub_100104E0C, 0LL, 0LL);
}

uint64_t sub_100104E0C()
{
  uint64_t v2 = v0[38];
  uint64_t v1 = v0[39];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[40] = v3;
  v3[2] = v1;
  v3[3] = sub_100117B74;
  v3[4] = v2;
  os_log_type_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[41] = v4;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009AE510);
  *os_log_type_t v4 = v0;
  v4[1] = sub_100104EC8;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 20,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100117B7C,  v3,  v5);
}

uint64_t sub_100104EC8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 320);
  uint64_t v3 = *(void *)(*v0 + 304);
  swift_task_dealloc(*(void *)(*v0 + 328));
  swift_release(v3);
  swift_task_dealloc(v2);
  *(void *)(v1 + 336) = *(void *)(v1 + 160);
  return swift_task_switch(sub_100104F3C, v3, 0LL);
}

uint64_t sub_100104F3C()
{
  uint64_t v1 = *(void *)(v0 + 176);
  swift_release(*(void *)(v0 + 304));
  return swift_task_switch(sub_100104F7C, v1, 0LL);
}

uint64_t sub_100104F7C()
{
  uint64_t v1 = *(void *)(v0 + 336);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 344) = v2;
  if (v2)
  {
    *(void *)(v0 + 352) = 0LL;
    *(void *)(v0 + 360) = _swiftEmptyArrayStorage;
    sub_100013044(v1 + 32, v0 + 16);
    if (qword_10099B9E0 != -1) {
      swift_once(&qword_10099B9E0, sub_10076012C);
    }
    swift_beginAccess(&xmmword_1009BED80, v0 + 136, 0LL, 0LL);
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 96, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 120))
    {
      sub_100012EC0((__int128 *)(v0 + 96), v0 + 56);
      sub_100012ED8((void *)(v0 + 56), *(void *)(v0 + 80));
      unsigned __int8 v14 = (uint64_t (*)(void))((char *)&dword_10099C890 + dword_10099C890);
      os_log_type_t v4 = (void *)swift_task_alloc(unk_10099C894);
      *(void *)(v0 + 368) = v4;
      *os_log_type_t v4 = v0;
      v4[1] = sub_1001051C0;
      return v14();
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v0 + 416) = _swiftEmptyArrayStorage;
    if (_swiftEmptyArrayStorage[2])
    {
      uint64_t v5 = (void *)swift_task_alloc(dword_1009A155C);
      *(void *)(v0 + 424) = v5;
      *uint64_t v5 = v0;
      v5[1] = sub_100105B18;
      return sub_100111BEC((uint64_t)_swiftEmptyArrayStorage);
    }

    else
    {
      uint64_t v6 = swift_bridgeObjectRelease();
      uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
      os_log_type_t v8 = static os_log_type_t.default.getter(v7);
      if (os_log_type_enabled(v7, v8))
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v9 = 0;
        _os_log_impl((void *)&_mh_execute_header, v7, v8, "No notify records to publish", v9, 2u);
        swift_slowDealloc(v9, -1LL, -1LL);
      }

      uint64_t v10 = *(void *)(v0 + 256);
      uint64_t v12 = *(void *)(v0 + 232);
      uint64_t v11 = *(void *)(v0 + 240);
      uint64_t v13 = *(void *)(v0 + 200);
      swift_task_dealloc(*(void *)(v0 + 280));
      swift_task_dealloc(v10);
      swift_task_dealloc(v11);
      swift_task_dealloc(v12);
      swift_task_dealloc(v13);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }

  return result;
}

uint64_t sub_1001051C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 368LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 176LL);
  *(void *)(*(void *)v1 + 376LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100105220, v3, 0LL);
}

uint64_t sub_100105220()
{
  if (*(void *)(v0 + 376))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
    uint64_t v1 = *(void *)(v0 + 40);
    uint64_t v2 = *(void *)(v0 + 48);
    sub_100012ED8((void *)(v0 + 16), v1);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v2 + 8) + 8LL) + 32LL))(v1);
    return swift_task_switch(sub_100105594, *(void *)(v0 + 376), 0LL);
  }

  else
  {
    uint64_t v4 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No BeaconStoreActor available!", v7, 2u);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    uint64_t v8 = *(void *)(v0 + 264);
    uint64_t v9 = *(void *)(v0 + 272);
    uint64_t v10 = *(void *)(v0 + 256);

    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(v10, 1LL, 1LL, v8);
    sub_100015794(*(void *)(v0 + 256), &qword_1009AA900);
    uint64_t v11 = *(void *)(v0 + 360);
    uint64_t v12 = *(void *)(v0 + 344);
    uint64_t v13 = *(void *)(v0 + 352) + 1LL;
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
    if (v13 == v12)
    {
      swift_bridgeObjectRelease();
      *(void *)(v0 + 416) = v11;
      if (*(void *)(v11 + 16))
      {
        unsigned __int8 v14 = (void *)swift_task_alloc(dword_1009A155C);
        *(void *)(v0 + 424) = v14;
        *unsigned __int8 v14 = v0;
        v14[1] = sub_100105B18;
        return sub_100111BEC(v11);
      }

      else
      {
        uint64_t v17 = swift_bridgeObjectRelease();
        uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
        os_log_type_t v19 = static os_log_type_t.default.getter(v18);
        if (os_log_type_enabled(v18, v19))
        {
          uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
          *(_WORD *)uint64_t v20 = 0;
          _os_log_impl((void *)&_mh_execute_header, v18, v19, "No notify records to publish", v20, 2u);
          swift_slowDealloc(v20, -1LL, -1LL);
        }

        uint64_t v21 = *(void *)(v0 + 256);
        uint64_t v23 = *(void *)(v0 + 232);
        uint64_t v22 = *(void *)(v0 + 240);
        uint64_t v24 = *(void *)(v0 + 200);
        swift_task_dealloc(*(void *)(v0 + 280));
        swift_task_dealloc(v21);
        swift_task_dealloc(v22);
        swift_task_dealloc(v23);
        swift_task_dealloc(v24);
        return (*(uint64_t (**)(void))(v0 + 8))();
      }
    }

    else
    {
      uint64_t v15 = *(void *)(v0 + 352) + 1LL;
      *(void *)(v0 + 352) = v15;
      *(void *)(v0 + 360) = v11;
      sub_100013044(*(void *)(v0 + 336) + 40 * v15 + 32, v0 + 16);
      if (qword_10099B9E0 != -1) {
        swift_once(&qword_10099B9E0, sub_10076012C);
      }
      swift_beginAccess(&xmmword_1009BED80, v0 + 136, 0LL, 0LL);
      uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 96, (uint64_t *)&unk_10099FA80);
      if (*(void *)(v0 + 120))
      {
        sub_100012EC0((__int128 *)(v0 + 96), v0 + 56);
        sub_100012ED8((void *)(v0 + 56), *(void *)(v0 + 80));
        uint64_t v25 = (uint64_t (*)(void))((char *)&dword_10099C890 + dword_10099C890);
        uint64_t v16 = (void *)swift_task_alloc(unk_10099C894);
        *(void *)(v0 + 368) = v16;
        void *v16 = v0;
        v16[1] = sub_1001051C0;
        return v25();
      }

      else
      {
        __break(1u);
      }
    }
  }

  return result;
}

uint64_t sub_100105594()
{
  uint64_t v1 = v0[47];
  uint64_t v3 = v0[29];
  uint64_t v2 = v0[30];
  uint64_t v5 = v0[27];
  uint64_t v4 = v0[28];
  uint64_t v6 = v0[26];
  v0[48] = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v6);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 + 24) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_10093E7D0, v8 + v4, v7 | 7);
  v0[49] = v9;
  *(void *)(v9 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v9 + v8, v3, v6);
  swift_retain();
  return swift_task_switch(sub_100105644, 0LL, 0LL);
}

uint64_t sub_100105644()
{
  uint64_t v2 = v0[48];
  uint64_t v1 = v0[49];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[50] = v3;
  v3[2] = v2;
  v3[3] = sub_100117B8C;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[51] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1001056EC;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[32],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100118958,  v3,  v0[31]);
}

uint64_t sub_1001056EC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 400LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 392LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 376LL);
  uint64_t v4 = *(void *)(*(void *)v0 + 240LL);
  uint64_t v5 = *(void *)(*(void *)v0 + 208LL);
  uint64_t v6 = *(void *)(*(void *)v0 + 216LL);
  uint64_t v7 = *(void *)(*(void *)v0 + 176LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 408LL));
  swift_release(v3);
  swift_release(v2);
  swift_task_dealloc(v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  return swift_task_switch(sub_100105794, v7, 0LL);
}

uint64_t sub_100105794()
{
  uint64_t v1 = *(void *)(v0 + 256);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 272) + 48LL))( v1,  1LL,  *(void *)(v0 + 264)) == 1)
  {
    sub_100015794(v1, &qword_1009AA900);
    uint64_t v2 = *(void *)(v0 + 360);
  }

  else
  {
    uint64_t v3 = *(void *)(v0 + 360);
    uint64_t v4 = *(void *)(v0 + 280);
    uint64_t v5 = *(void *)(v0 + 200);
    uint64_t v6 = *(void *)(v0 + 184);
    sub_10002218C(v1, v4, type metadata accessor for NotifyWhenFoundRecord);
    uint64_t v7 = v5 + *(int *)(v6 + 48);
    sub_100013044(v0 + 16, v5);
    sub_10001DC4C(v4, v7, type metadata accessor for NotifyWhenFoundRecord);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
    uint64_t v2 = *(void *)(v0 + 360);
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      uint64_t v2 = sub_1004C51FC(0, *(void *)(v2 + 16) + 1LL, 1, *(void *)(v0 + 360));
    }
    unint64_t v10 = *(void *)(v2 + 16);
    unint64_t v9 = *(void *)(v2 + 24);
    if (v10 >= v9 >> 1) {
      uint64_t v2 = sub_1004C51FC(v9 > 1, v10 + 1, 1, v2);
    }
    uint64_t v11 = *(void *)(v0 + 280);
    uint64_t v13 = *(void *)(v0 + 192);
    uint64_t v12 = *(void *)(v0 + 200);
    *(void *)(v2 + 16) = v10 + 1;
    sub_100015750( v12,  v2 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))
    + *(void *)(v13 + 72) * v10,
      (uint64_t *)&unk_1009B14F0);
    sub_100018C68(v11, type metadata accessor for NotifyWhenFoundRecord);
  }

  uint64_t v14 = *(void *)(v0 + 344);
  uint64_t v15 = *(void *)(v0 + 352) + 1LL;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v15 == v14)
  {
    swift_bridgeObjectRelease();
    *(void *)(v0 + 416) = v2;
    if (*(void *)(v2 + 16))
    {
      uint64_t v16 = (void *)swift_task_alloc(dword_1009A155C);
      *(void *)(v0 + 424) = v16;
      void *v16 = v0;
      v16[1] = sub_100105B18;
      return sub_100111BEC(v2);
    }

    else
    {
      uint64_t v20 = swift_bridgeObjectRelease();
      uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
      os_log_type_t v22 = static os_log_type_t.default.getter(v21);
      if (os_log_type_enabled(v21, v22))
      {
        uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v23 = 0;
        _os_log_impl((void *)&_mh_execute_header, v21, v22, "No notify records to publish", v23, 2u);
        swift_slowDealloc(v23, -1LL, -1LL);
      }

      uint64_t v24 = *(void *)(v0 + 256);
      uint64_t v26 = *(void *)(v0 + 232);
      uint64_t v25 = *(void *)(v0 + 240);
      uint64_t v27 = *(void *)(v0 + 200);
      swift_task_dealloc(*(void *)(v0 + 280));
      swift_task_dealloc(v24);
      swift_task_dealloc(v25);
      swift_task_dealloc(v26);
      swift_task_dealloc(v27);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }
  }

  else
  {
    uint64_t v18 = *(void *)(v0 + 352) + 1LL;
    *(void *)(v0 + 352) = v18;
    *(void *)(v0 + 360) = v2;
    sub_100013044(*(void *)(v0 + 336) + 40 * v18 + 32, v0 + 16);
    if (qword_10099B9E0 != -1) {
      swift_once(&qword_10099B9E0, sub_10076012C);
    }
    swift_beginAccess(&xmmword_1009BED80, v0 + 136, 0LL, 0LL);
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 96, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 120))
    {
      sub_100012EC0((__int128 *)(v0 + 96), v0 + 56);
      sub_100012ED8((void *)(v0 + 56), *(void *)(v0 + 80));
      uint64_t v28 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
      os_log_type_t v19 = (void *)swift_task_alloc(unk_10099C894);
      *(void *)(v0 + 368) = v19;
      *os_log_type_t v19 = v0;
      v19[1] = sub_1001051C0;
      return v28();
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_100105B18()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 424);
  *(void *)(*v1 + 432) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 176);
    uint64_t v5 = sub_100105C60;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 176);
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_100105B8C;
    uint64_t v4 = v6;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_100105B8C()
{
  uint64_t v1 = (os_log_s *)Logger.logObject.getter();
  os_log_type_t v2 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v1, v2))
  {
    uint64_t v3 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v3 = 0;
    _os_log_impl((void *)&_mh_execute_header, v1, v2, "Successfully published", v3, 2u);
    swift_slowDealloc(v3, -1LL, -1LL);
  }

  uint64_t v4 = *(void *)(v0 + 256);
  uint64_t v6 = *(void *)(v0 + 232);
  uint64_t v5 = *(void *)(v0 + 240);
  uint64_t v7 = *(void *)(v0 + 200);
  swift_task_dealloc(*(void *)(v0 + 280));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100105C60()
{
  uint64_t v1 = *(void *)(v0 + 432);
  swift_bridgeObjectRelease();
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 432);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138543362;
    swift_errorRetain(v5);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + 168) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v6 + 4, v6 + 12);
    *uint64_t v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Failed to publish keys: %{public}@", v6, 0xCu);
    uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    swift_errorRelease(v5);
  }

  else
  {
    uint64_t v10 = *(void *)(v0 + 432);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  uint64_t v11 = *(void *)(v0 + 256);
  uint64_t v13 = *(void *)(v0 + 232);
  uint64_t v12 = *(void *)(v0 + 240);
  uint64_t v14 = *(void *)(v0 + 200);
  swift_task_dealloc(*(void *)(v0 + 280));
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100105E20(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  *(_BYTE *)(v5 + 192) = a4;
  *(void *)(v5 + 40) = a3;
  *(void *)(v5 + 48) = v4;
  *(void *)(v5 + 24) = a1;
  *(void *)(v5 + 32) = a2;
  uint64_t v6 = type metadata accessor for TimeBasedKey(0LL);
  *(void *)(v5 + 56) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v5 + 64) = v7;
  *(void *)(v5 + 72) = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DateInterval(0LL);
  *(void *)(v5 + 80) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v5 + 88) = v9;
  *(void *)(v5 + 96) = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099D720);
  *(void *)(v5 + 104) = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = (void *)swift_task_alloc(dword_1009A14FC);
  *(void *)(v5 + 112) = v11;
  *uint64_t v11 = v5;
  v11[1] = sub_100105EFC;
  v11[15] = v4;
  return swift_task_switch(sub_1000F9BD8, v4, 0LL);
}

uint64_t sub_100105EFC(uint64_t a1)
{
  uint64_t v4 = (void *)*v2;
  uint64_t v5 = *(void *)(*v2 + 112);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v8 = v4[12];
    uint64_t v7 = v4[13];
    uint64_t v9 = v4[9];
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v6 + 8))();
  }

  else
  {
    v4[15] = a1;
    return swift_task_switch(sub_100105F94, a1, 0LL);
  }

uint64_t sub_100105F94()
{
  *(void *)(v0 + 128) = *(void *)(*(void *)(v0 + 120) + 136LL);
  swift_retain();
  return swift_task_switch(sub_100105FD8, 0LL, 0LL);
}

uint64_t sub_100105FD8()
{
  uint64_t v2 = v0[15];
  uint64_t v1 = v0[16];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[17] = v3;
  v3[2] = v1;
  v3[3] = sub_100117B18;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[18] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0LL);
  *uint64_t v4 = v0;
  v4[1] = sub_100106090;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 2,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100117B20,  v3,  v5);
}

uint64_t sub_100106090()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 136);
  uint64_t v3 = *(void *)(*v0 + 120);
  swift_task_dealloc(*(void *)(*v0 + 144));
  swift_release(v3);
  swift_task_dealloc(v2);
  *(void *)(v1 + 152) = *(void *)(v1 + 16);
  return swift_task_switch(sub_100106104, v3, 0LL);
}

uint64_t sub_100106104()
{
  uint64_t v3 = (uint64_t (*)(uint64_t, uint64_t, char, char, char))((char *)&dword_1009A8010 + dword_1009A8010);
  uint64_t v1 = (void *)swift_task_alloc(unk_1009A8014);
  *(void *)(v0 + 160) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10010617C;
  return v3(*(void *)(v0 + 32), *(void *)(v0 + 40), *(_BYTE *)(v0 + 192), 1, 0);
}

uint64_t sub_10010617C(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v6 = *v4;
  uint64_t v7 = *(void *)(*v4 + 160);
  *(void *)(v6 + 168) = a1;
  *(void *)(v6 + 176) = a2;
  *(void *)(v6 + 184) = v3;
  swift_task_dealloc(v7);
  if (v3)
  {
    uint64_t v8 = *(void *)(v6 + 48);
    uint64_t v9 = sub_100106758;
  }

  else
  {
    uint64_t v10 = *(void *)(v6 + 48);
    swift_release(*(void *)(v6 + 152));
    *(_BYTE *)(v6 + 193) = a3;
    uint64_t v9 = sub_10010620C;
    uint64_t v8 = v10;
  }

  return swift_task_switch(v9, v8, 0LL);
}

uint64_t sub_10010620C()
{
  if (*(_BYTE *)(v0 + 193))
  {
    if (*(_BYTE *)(v0 + 193) != 1)
    {
      if (qword_10099B118 != -1) {
        swift_once(&qword_10099B118, sub_1000F95A0);
      }
      uint64_t v26 = type metadata accessor for Logger(0LL);
      uint64_t v27 = sub_10000A720(v26, (uint64_t)qword_100A2A1C8);
      uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
      os_log_type_t v29 = static os_log_type_t.default.getter(v28);
      if (os_log_type_enabled(v28, v29))
      {
        os_log_type_t v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)os_log_type_t v30 = 0;
        swift_slowDealloc(v30, -1LL, -1LL);
      }

      goto LABEL_21;
    }

    uint64_t v1 = *(void *)(v0 + 168);
  }

  else
  {
    uint64_t v1 = *(void *)(v0 + 168);
    uint64_t v2 = qword_10099B118;
    swift_bridgeObjectRetain(v1);
    if (v2 != -1) {
      swift_once(&qword_10099B118, sub_1000F95A0);
    }
    uint64_t v3 = type metadata accessor for Logger(0LL);
    uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2A1C8);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.default.getter(v5);
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v9 = *(void *)(v0 + 168);
    uint64_t v8 = *(void *)(v0 + 176);
    if (v7)
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v10 = 0;
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    sub_100117B2C(v9, v8, 0);
  }

  uint64_t v11 = *(void *)(v0 + 104);
  if (!*(void *)(v1 + 16))
  {
    uint64_t v31 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v31 - 8) + 56LL))(v11, 1LL, 1LL, v31);
    goto LABEL_20;
  }

  uint64_t v13 = *(void *)(v0 + 88);
  uint64_t v12 = *(void *)(v0 + 96);
  uint64_t v14 = *(void *)(v0 + 80);
  uint64_t v15 = *(unsigned __int8 *)(*(void *)(v0 + 64) + 80LL);
  uint64_t v16 = (v15 + 32) & ~v15;
  uint64_t v17 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))( v12,  v1 + v16 + *(int *)(*(void *)(v0 + 56) + 20LL),  v14);
  DateInterval.start.getter(v17);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  uint64_t v18 = type metadata accessor for Date(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v19 + 56))(v11, 0LL, 1LL, v18);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48))(v11, 1LL, v18) == 1)
  {
LABEL_20:
    uint64_t v32 = *(void *)(v0 + 104);
    swift_bridgeObjectRelease();
    sub_100015794(v32, (uint64_t *)&unk_10099D720);
LABEL_21:
    unint64_t v33 = sub_1001177B0();
    uint64_t v34 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v33, 0LL, 0LL);
    *uint64_t v35 = 0;
    swift_willThrow(v34);
    uint64_t v36 = *(void *)(v0 + 96);
    uint64_t v37 = *(void *)(v0 + 72);
    swift_task_dealloc(*(void *)(v0 + 104));
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  (*(void (**)(void, void, uint64_t))(v19 + 32))(*(void *)(v0 + 24), *(void *)(v0 + 104), v18);
  int64_t v20 = *(void *)(v1 + 16);
  if (v20)
  {
    uint64_t v21 = *(void *)(v0 + 64);
    sub_1000329E4(0, v20, 0);
    uint64_t v22 = *(void *)(v21 + 72);
    uint64_t v23 = *(void *)(v0 + 184);
    uint64_t v24 = *(void *)(v0 + 72);
    sub_10001DC4C(v1 + v16, v24, type metadata accessor for TimeBasedKey);
    sub_1001067B0(v24, v49);
    sub_100018C68(v24, type metadata accessor for TimeBasedKey);
    if (v23) {
      return swift_release(_swiftEmptyArrayStorage);
    }
    __int128 v47 = *(_OWORD *)v49;
    if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
      sub_1000329E4(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
    }
    unint64_t v39 = _swiftEmptyArrayStorage[2];
    unint64_t v38 = _swiftEmptyArrayStorage[3];
    if (v39 >= v38 >> 1) {
      sub_1000329E4(v38 > 1, v39 + 1, 1);
    }
    _swiftEmptyArrayStorage[2] = v39 + 1;
    *(_OWORD *)&_swiftEmptyArrayStorage[2 * v39 + 4] = v47;
    int64_t v40 = v20 - 1;
    if (v20 != 1)
    {
      uint64_t v43 = v1 + v22 + v16;
      do
      {
        uint64_t v44 = *(void *)(v0 + 72);
        sub_10001DC4C(v43, v44, type metadata accessor for TimeBasedKey);
        sub_1001067B0(v44, v49);
        sub_100018C68(v44, type metadata accessor for TimeBasedKey);
        __int128 v48 = *(_OWORD *)v49;
        if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
          sub_1000329E4(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
        }
        unint64_t v46 = _swiftEmptyArrayStorage[2];
        unint64_t v45 = _swiftEmptyArrayStorage[3];
        if (v46 >= v45 >> 1) {
          sub_1000329E4(v45 > 1, v46 + 1, 1);
        }
        _swiftEmptyArrayStorage[2] = v46 + 1;
        *(_OWORD *)&_swiftEmptyArrayStorage[2 * v46 + 4] = v48;
        v43 += v22;
        --v40;
      }

      while (v40);
    }

    swift_bridgeObjectRelease();
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v41 = *(void *)(v0 + 96);
  uint64_t v42 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 104));
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  return (*(uint64_t (**)(void *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_100106758()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = *(void *)(v0 + 72);
  swift_task_dealloc(*(void *)(v0 + 104));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

void sub_1001067B0(uint64_t a1@<X0>, uint64_t *a2@<X8>)
{
  int64_t v40 = a2;
  uint64_t v3 = type metadata accessor for TimeBasedKey(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = &v36[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v6 = type metadata accessor for HashAlgorithm(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = &v36[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v39 = v3;
  uint64_t v10 = (__int128 *)(a1 + *(int *)(v3 + 24));
  __int128 v11 = v10[1];
  __int128 v43 = *v10;
  __int128 v44 = v11;
  __int128 v45 = v10[2];
  uint64_t v12 = sub_1004DA048();
  unint64_t v14 = v13;
  (*(void (**)(_BYTE *, void, uint64_t))(v7 + 104))(v9, enum case for HashAlgorithm.sha256(_:), v6);
  uint64_t v15 = Data.hash(algorithm:)(v9, v12, v14);
  unint64_t v17 = v16;
  (*(void (**)(_BYTE *, uint64_t))(v7 + 8))(v9, v6);
  sub_100016F9C(v12, v14);
  if (qword_10099B118 != -1) {
    swift_once(&qword_10099B118, sub_1000F95A0);
  }
  uint64_t v18 = type metadata accessor for Logger(0LL);
  sub_10000A720(v18, (uint64_t)qword_100A2A1C8);
  sub_10001DC4C(a1, (uint64_t)v5, type metadata accessor for TimeBasedKey);
  sub_10001736C(v15, v17);
  sub_10001736C(v15, v17);
  sub_10001736C(v15, v17);
  uint64_t v19 = sub_10001736C(v15, v17);
  int64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.info.getter(v20);
  int v22 = v21;
  if (os_log_type_enabled(v20, v21))
  {
    uint64_t v23 = swift_slowAlloc(32LL, -1LL);
    uint64_t v38 = swift_slowAlloc(96LL, -1LL);
    uint64_t v46 = v38;
    *(_DWORD *)uint64_t v23 = 136315650;
    uint64_t v41 = v15;
    unint64_t v42 = v17;
    unint64_t v24 = sub_10009BDE4();
    int v37 = v22;
    unint64_t v25 = v24;
    uint64_t v26 = RawRepresentable<>.hexString.getter(&type metadata for HashedAdvertisement, v24);
    uint64_t v41 = sub_1003F11D4(v26, v27, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v23 + 4, v23 + 12);
    swift_bridgeObjectRelease();
    sub_100016F9C(v15, v17);
    sub_100016F9C(v15, v17);
    *(_WORD *)(v23 + 12) = 2080;
    uint64_t v41 = v15;
    unint64_t v42 = v17;
    uint64_t v28 = RawRepresentable<>.base64EncodedString(options:)(0LL, &type metadata for HashedAdvertisement, v25);
    uint64_t v41 = sub_1003F11D4(v28, v29, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v23 + 14, v23 + 22);
    swift_bridgeObjectRelease();
    sub_100016F9C(v15, v17);
    sub_100016F9C(v15, v17);
    *(_WORD *)(v23 + 22) = 2080;
    uint64_t v30 = type metadata accessor for DateInterval(0LL);
    uint64_t v31 = sub_100015C48( &qword_1009A0DE0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval,  (uint64_t)&protocol conformance descriptor for DateInterval);
    uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter(v30, v31);
    uint64_t v41 = sub_1003F11D4(v32, v33, &v46);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v41, &v42, v23 + 24, v23 + 32);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v5, type metadata accessor for TimeBasedKey);
    _os_log_impl( (void *)&_mh_execute_header,  v20,  (os_log_type_t)v37,  "Key hashed: %s, base64: %s, dateInterval: %s.",  (uint8_t *)v23,  0x20u);
    uint64_t v34 = v38;
    swift_arrayDestroy(v38, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_slowDealloc(v23, -1LL, -1LL);
  }

  else
  {
    sub_100016F9C(v15, v17);
    sub_100016F9C(v15, v17);
    sub_100016F9C(v15, v17);
    sub_100016F9C(v15, v17);
    sub_100018C68((uint64_t)v5, type metadata accessor for TimeBasedKey);
  }

  uint64_t v35 = v40;
  *int64_t v40 = v15;
  v35[1] = v17;
}

uint64_t sub_100106BD8(uint64_t a1)
{
  v2[109] = v1;
  v2[108] = a1;
  uint64_t v3 = sub_100004AEC(&qword_10099D8A0);
  v2[110] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for NotifyMeRequest.Subscription(0LL);
  v2[111] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[112] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[113] = swift_task_alloc(v6);
  v2[114] = swift_task_alloc(v6);
  v2[115] = swift_task_alloc(v6);
  uint64_t v7 = type metadata accessor for HashAlgorithm(0LL);
  v2[116] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[117] = v8;
  v2[118] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009A1760);
  v2[119] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for OwnedBeaconRecord(0LL);
  v2[120] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[121] = v11;
  v2[122] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  v2[123] = v12;
  unint64_t v13 = (*(void *)(*(void *)(v12 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[124] = swift_task_alloc(v13);
  v2[125] = swift_task_alloc(v13);
  uint64_t v14 = sub_100004AEC(&qword_1009A1768);
  v2[126] = v14;
  unint64_t v15 = (*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[127] = swift_task_alloc(v15);
  v2[128] = swift_task_alloc(v15);
  v2[129] = swift_task_alloc(v15);
  v2[130] = swift_task_alloc(v15);
  v2[131] = swift_task_alloc(v15);
  uint64_t v16 = type metadata accessor for DateInterval(0LL);
  v2[132] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v2[133] = v17;
  unint64_t v18 = (*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[134] = swift_task_alloc(v18);
  v2[135] = swift_task_alloc(v18);
  v2[136] = swift_task_alloc(v18);
  unint64_t v19 = (*(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_10099D720) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[137] = swift_task_alloc(v19);
  v2[138] = swift_task_alloc(v19);
  v2[139] = swift_task_alloc(v19);
  uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009AE460);
  v2[140] = v20;
  v2[141] = swift_task_alloc((*(void *)(*(void *)(v20 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for UUID(0LL);
  v2[142] = v21;
  uint64_t v22 = *(void *)(v21 - 8);
  v2[143] = v22;
  uint64_t v23 = *(void *)(v22 + 64);
  v2[144] = v23;
  unint64_t v24 = (v23 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v2[145] = swift_task_alloc(v24);
  v2[146] = swift_task_alloc(v24);
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord(0LL);
  v2[147] = found;
  v2[148] = swift_task_alloc((*(void *)(*(void *)(found - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009B14F0);
  v2[149] = v26;
  uint64_t v27 = *(void *)(v26 - 8);
  v2[150] = v27;
  v2[151] = swift_task_alloc((*(void *)(v27 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = type metadata accessor for Date(0LL);
  v2[152] = v28;
  uint64_t v29 = *(void *)(v28 - 8);
  v2[153] = v29;
  unint64_t v30 = (*(void *)(v29 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[154] = swift_task_alloc(v30);
  v2[155] = swift_task_alloc(v30);
  v2[156] = swift_task_alloc(v30);
  v2[157] = swift_task_alloc(v30);
  v2[158] = swift_task_alloc(v30);
  v2[159] = swift_task_alloc(v30);
  v2[160] = swift_task_alloc(v30);
  v2[161] = swift_task_alloc(v30);
  v2[162] = swift_task_alloc(v30);
  v2[163] = swift_task_alloc(v30);
  v2[164] = swift_task_alloc(v30);
  return swift_task_switch(sub_100106F94, v1, 0LL);
}

uint64_t sub_100106F94()
{
  uint64_t v1 = *(void *)(v0 + 864);
  static Date.trustedNow.getter(*(void *)(v0 + 1312));
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 1320) = v2;
  if (v2)
  {
    uint64_t v3 = *(__int128 **)(v0 + 1208);
    uint64_t v4 = *(void *)(v0 + 1200);
    uint64_t v5 = *(void *)(v0 + 864);
    uint64_t v6 = *(int *)(*(void *)(v0 + 1192) + 48LL);
    *(_DWORD *)(v0 + 1696) = v6;
    int v7 = *(_DWORD *)(v4 + 80);
    *(_DWORD *)(v0 + 1700) = v7;
    *(void *)(v0 + 1328) = *(void *)(v4 + 72);
    *(_DWORD *)(v0 + 1704) = enum case for Feature.FindMy.networkScalingImprovements(_:);
    *(_DWORD *)(v0 + 1708) = enum case for HashAlgorithm.sha256(_:);
    *(void *)(v0 + 1352) = _swiftEmptyArrayStorage;
    *(_OWORD *)(v0 + 1336) = 0u;
    uint64_t v8 = *(void *)(v0 + 1184);
    uint64_t v9 = v5 + ((v7 + 32LL) & ~(unint64_t)v7);
    uint64_t v10 = (uint64_t)v3 + v6;
    swift_bridgeObjectRetain(v5);
    sub_10001581C(v9, (uint64_t)v3, (uint64_t *)&unk_1009B14F0);
    sub_100012EC0(v3, v0 + 16);
    sub_10002218C(v10, v8, type metadata accessor for NotifyWhenFoundRecord);
    if (qword_10099B118 != -1) {
      swift_once(&qword_10099B118, sub_1000F95A0);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    *(void *)(v0 + 1360) = v11;
    *(void *)(v0 + 1368) = sub_10000A720(v11, (uint64_t)qword_100A2A1C8);
    uint64_t v12 = sub_100013044(v0 + 16, v0 + 56);
    unint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = *(void *)(v0 + 1168);
      uint64_t v59 = *(void *)(v0 + 1144);
      uint64_t v16 = *(void *)(v0 + 1136);
      uint64_t v17 = swift_slowAlloc(22LL, -1LL);
      uint64_t v18 = swift_slowAlloc(32LL, -1LL);
      v62[0] = v18;
      *(_DWORD *)uint64_t v17 = 141558275;
      *(void *)(v0 + 848) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 848, v0 + 856, v17 + 4, v17 + 12);
      *(_WORD *)(v17 + 12) = 2081;
      uint64_t v20 = *(void *)(v0 + 80);
      uint64_t v19 = *(void *)(v0 + 88);
      sub_100012ED8((void *)(v0 + 56), v20);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v19 + 8) + 8LL) + 32LL))(v20);
      uint64_t v21 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter(v16, v21);
      unint64_t v24 = v23;
      (*(void (**)(uint64_t, uint64_t))(v59 + 8))(v15, v16);
      *(void *)(v0 + 856) = sub_1003F11D4(v22, v24, v62);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 856, v0 + 864, v17 + 14, v17 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
      _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "publishKeys for beacon: %{private,mask.hash}s",  (uint8_t *)v17,  0x16u);
      swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v18, -1LL, -1LL);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
    }

    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    *(void *)(v0 + 1376) = qword_100A2A710;
    return swift_task_switch(sub_100107560, 0LL, 0LL);
  }

  else
  {
    (*(void (**)(void, void))(*(void *)(v0 + 1224) + 8LL))( *(void *)(v0 + 1312),  *(void *)(v0 + 1216));
    uint64_t v25 = *(void *)(v0 + 1304);
    uint64_t v26 = *(void *)(v0 + 1296);
    uint64_t v27 = *(void *)(v0 + 1288);
    uint64_t v28 = *(void *)(v0 + 1280);
    uint64_t v29 = *(void *)(v0 + 1272);
    uint64_t v30 = *(void *)(v0 + 1264);
    uint64_t v31 = *(void *)(v0 + 1256);
    uint64_t v32 = *(void *)(v0 + 1248);
    uint64_t v33 = *(void *)(v0 + 1240);
    uint64_t v35 = *(void *)(v0 + 1232);
    uint64_t v36 = *(void *)(v0 + 1208);
    uint64_t v37 = *(void *)(v0 + 1184);
    uint64_t v38 = *(void *)(v0 + 1168);
    uint64_t v39 = *(void *)(v0 + 1160);
    uint64_t v40 = *(void *)(v0 + 1128);
    uint64_t v41 = *(void *)(v0 + 1112);
    uint64_t v42 = *(void *)(v0 + 1104);
    uint64_t v43 = *(void *)(v0 + 1096);
    uint64_t v44 = *(void *)(v0 + 1088);
    uint64_t v45 = *(void *)(v0 + 1080);
    uint64_t v46 = *(void *)(v0 + 1072);
    uint64_t v47 = *(void *)(v0 + 1048);
    uint64_t v48 = *(void *)(v0 + 1040);
    uint64_t v49 = *(void *)(v0 + 1032);
    uint64_t v50 = *(void *)(v0 + 1024);
    uint64_t v51 = *(void *)(v0 + 1016);
    uint64_t v52 = *(void *)(v0 + 1000);
    uint64_t v53 = *(void *)(v0 + 992);
    uint64_t v54 = *(void *)(v0 + 976);
    uint64_t v55 = *(void *)(v0 + 952);
    uint64_t v56 = *(void *)(v0 + 944);
    uint64_t v57 = *(void *)(v0 + 920);
    uint64_t v58 = *(void *)(v0 + 912);
    uint64_t v60 = *(void *)(v0 + 904);
    uint64_t v61 = *(void *)(v0 + 880);
    swift_task_dealloc(*(void *)(v0 + 1312));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    swift_task_dealloc(v52);
    swift_task_dealloc(v53);
    swift_task_dealloc(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    return (*(uint64_t (**)(void *))(v0 + 8))(_swiftEmptyArrayStorage);
  }

uint64_t sub_100107560()
{
  uint64_t v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc(v1);
  *(void *)(v0 + 1384) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1001075FC;
  return unsafeBlocking<A>(_:)(v0 + 824, sub_100015814, *(void *)(v0 + 1376), &type metadata for Configuration);
}

uint64_t sub_1001075FC()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1376LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 1384LL));
  swift_release(v1);
  return swift_task_switch(sub_100107688, 0LL, 0LL);
}

uint64_t sub_100107688()
{
  uint64_t v1 = v0[109];
  v0[174] = v0[103];
  return swift_task_switch(sub_1001076F0, v1, 0LL);
}

uint64_t sub_1001076F0()
{
  uint64_t v3 = sub_1006A0DF0(v2[174]);
  if ((unsigned __int128)(v3 * (__int128)60LL) >> 64 == (60 * v3) >> 63)
  {
    uint64_t v1 = (__int128 *)v2[174];
    v2[175] = 60 * v3;
    uint64_t v0 = sub_1006A0DC8((uint64_t)v1);
    swift_bridgeObjectRelease();
    uint64_t v4 = 60 * v0;
    if ((unsigned __int128)(v0 * (__int128)60LL) >> 64 == (60 * v0) >> 63)
    {
      uint64_t v1 = (__int128 *)(v2 + 27);
      uint64_t v0 = (uint64_t)(v2 + 72);
      v2[176] = v4;
      if (qword_10099B9E0 == -1) {
        goto LABEL_4;
      }
      goto LABEL_8;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
LABEL_8:
  swift_once(&qword_10099B9E0, sub_10076012C);
LABEL_4:
  swift_beginAccess(&xmmword_1009BED80, v0, 0LL, 0LL);
  sub_10001581C((uint64_t)&xmmword_1009BED80, (uint64_t)v1, (uint64_t *)&unk_10099FA80);
  if (!v2[30]) {
    __break(1u);
  }
  sub_100012EC0(v1, (uint64_t)(v2 + 17));
  sub_100012ED8(v2 + 17, v2[20]);
  uint64_t v5 = dword_10099C878;
  uint64_t v6 = (void *)swift_task_alloc(unk_10099C87C);
  v2[177] = v6;
  *uint64_t v6 = v2;
  v6[1] = sub_100107860;
  return ((uint64_t (__cdecl *)())((char *)&dword_10099C878 + v5))();
}

uint64_t sub_100107860(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1416LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 872LL);
  *(void *)(*(void *)v1 + 1424LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001078EC, v3, 0LL);
}

uint64_t sub_1001078EC()
{
  if (*(void *)(v0 + 1424))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 136));
    uint64_t v2 = *(void *)(v0 + 40);
    uint64_t v1 = *(void *)(v0 + 48);
    sub_100012ED8((void *)(v0 + 16), v2);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v1 + 8) + 8LL) + 32LL))(v2);
    uint64_t v3 = *(void *)(v0 + 40);
    uint64_t v4 = *(void *)(v0 + 48);
    sub_100012ED8((void *)(v0 + 16), v3);
    (*(void (**)(uint64_t, uint64_t))(v4 + 184))(v3, v4);
    uint64_t v5 = *(void *)(v0 + 40);
    uint64_t v6 = *(void *)(v0 + 48);
    sub_100012ED8((void *)(v0 + 16), v5);
    LOBYTE(v1) = (*(uint64_t (**)(uint64_t, uint64_t))(v6 + 112))(v5, v6);
    int v7 = (void *)swift_task_alloc(dword_1009BCE34);
    *(void *)(v0 + 1432) = v7;
    *int v7 = v0;
    v7[1] = sub_100107D1C;
    return sub_1006D4FEC(*(void *)(v0 + 1128), *(void *)(v0 + 1168), *(void *)(v0 + 1304), v1 & 1);
  }

  else
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 136));
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.error.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl((void *)&_mh_execute_header, v10, v11, "No ObservationStoreService available!", v12, 2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    uint64_t v13 = *(void *)(v0 + 1312);
    uint64_t v14 = *(void *)(v0 + 1224);
    uint64_t v15 = *(void *)(v0 + 1216);
    uint64_t v16 = *(void *)(v0 + 1184);

    sub_100018C68(v16, type metadata accessor for NotifyWhenFoundRecord);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
    uint64_t v17 = *(void *)(v0 + 1304);
    uint64_t v18 = *(void *)(v0 + 1296);
    uint64_t v19 = *(void *)(v0 + 1288);
    uint64_t v20 = *(void *)(v0 + 1280);
    uint64_t v21 = *(void *)(v0 + 1272);
    uint64_t v22 = *(void *)(v0 + 1264);
    uint64_t v23 = *(void *)(v0 + 1256);
    uint64_t v24 = *(void *)(v0 + 1248);
    uint64_t v25 = *(void *)(v0 + 1240);
    uint64_t v26 = *(void *)(v0 + 1232);
    uint64_t v27 = *(void *)(v0 + 1208);
    uint64_t v28 = *(void *)(v0 + 1184);
    uint64_t v29 = *(void *)(v0 + 1168);
    uint64_t v30 = *(void *)(v0 + 1160);
    uint64_t v31 = *(void *)(v0 + 1128);
    uint64_t v32 = *(void *)(v0 + 1112);
    uint64_t v33 = *(void *)(v0 + 1104);
    uint64_t v34 = *(void *)(v0 + 1096);
    uint64_t v35 = *(void *)(v0 + 1088);
    uint64_t v36 = *(void *)(v0 + 1080);
    uint64_t v37 = *(void *)(v0 + 1072);
    uint64_t v38 = *(void *)(v0 + 1048);
    uint64_t v39 = *(void *)(v0 + 1040);
    uint64_t v40 = *(void *)(v0 + 1032);
    uint64_t v41 = *(void *)(v0 + 1024);
    uint64_t v42 = *(void *)(v0 + 1016);
    uint64_t v43 = *(void *)(v0 + 1000);
    uint64_t v44 = *(void *)(v0 + 992);
    uint64_t v45 = *(void *)(v0 + 976);
    uint64_t v46 = *(void *)(v0 + 952);
    uint64_t v47 = *(void *)(v0 + 944);
    uint64_t v48 = *(void *)(v0 + 920);
    uint64_t v49 = *(void *)(v0 + 912);
    uint64_t v50 = *(void *)(v0 + 904);
    uint64_t v51 = *(void *)(v0 + 880);
    swift_task_dealloc(*(void *)(v0 + 1312));
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v49);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    return (*(uint64_t (**)(void *))(v0 + 8))(_swiftEmptyArrayStorage);
  }

uint64_t sub_100107D1C()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 1304);
  uint64_t v3 = *(void *)(*v0 + 1224);
  uint64_t v4 = *(void *)(*v0 + 1216);
  uint64_t v5 = *(void *)(*v0 + 1168);
  uint64_t v6 = *(void *)(*v0 + 1144);
  uint64_t v7 = *(void *)(*v0 + 1136);
  uint64_t v8 = *(void *)(*v0 + 872);
  swift_task_dealloc(*(void *)(*v0 + 1432));
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  *(void *)(v1 + 1440) = v9;
  v9(v2, v4);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
  *(void *)(v1 + 1448) = v10;
  v10(v5, v7);
  return swift_task_switch(sub_100107DFC, v8, 0LL);
}

uint64_t sub_100107DFC()
{
  int v147 = (void *)(v0 + 16);
  uint64_t v118 = *(void *)(v0 + 1336);
  uint64_t v1 = *(void *)(v0 + 1312);
  uint64_t v134 = *(void *)(v0 + 1304);
  uint64_t v2 = *(void *)(v0 + 1296);
  uint64_t v3 = *(char **)(v0 + 1288);
  uint64_t v123 = *(void *)(v0 + 1280);
  uint64_t v127 = *(void *)(v0 + 1272);
  uint64_t v137 = *(void *)(v0 + 1264);
  uint64_t v141 = *(void *)(v0 + 1256);
  uint64_t v4 = *(void *)(v0 + 1224);
  uint64_t v5 = *(void *)(v0 + 1216);
  uint64_t v6 = *(uint64_t (**)(uint64_t, char *, uint64_t))(v0 + 1112);
  uint64_t v7 = *(void *)(v0 + 1104);
  double v8 = (double)*(uint64_t *)(v0 + 1408);
  double v9 = (double)*(uint64_t *)(v0 + 1400);
  uint64_t v10 = *(void *)(v0 + 1128) + *(int *)(*(void *)(v0 + 1120) + 36LL);
  os_log_type_t v11 = *(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
  *(void *)(v0 + 1456) = v11;
  v11(v2, v10, v5);
  uint64_t v12 = *(void (**)(uint64_t (*)(uint64_t, char *, uint64_t), uint64_t, uint64_t, uint64_t))(v4 + 56);
  *(void *)(v0 + 1464) = v12;
  v12(v6, 1LL, 1LL, v5);
  v11(v7, v2, v5);
  v12((uint64_t (*)(uint64_t, char *, uint64_t))v7, 0LL, 1LL, v5);
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v13 = *(void *)(v0 + 680);
  *(void *)(v0 + 280) = &type metadata for Configuration;
  *(void *)(v0 + 288) = &off_10093C838;
  *(void *)(v0 + 256) = v13;
  sub_1003DBB9C((void *)(v0 + 16), v1, v6, v7, 0LL, (void *)(v0 + 256), v3);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 256));
  uint64_t v14 = v7;
  uint64_t v15 = (void *)(v0 + 16);
  sub_100015794(v14, (uint64_t *)&unk_10099D720);
  sub_100015794((uint64_t)v6, (uint64_t *)&unk_10099D720);
  uint64_t v16 = sub_100015C48( &qword_1009A1280,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  if ((dispatch thunk of static Comparable.>= infix(_:_:)(v1, v3, v5, v16) & 1) != 0) {
    uint64_t v17 = v1;
  }
  else {
    uint64_t v17 = (uint64_t)v3;
  }
  v11(v123, v17, v5);
  double v18 = Date.timeIntervalSince(_:)(v3);
  uint64_t v19 = *(void *)(v0 + 40);
  uint64_t v20 = *(void *)(v0 + 48);
  sub_100012ED8(v15, v19);
  char v120 = (*(uint64_t (**)(uint64_t, uint64_t))(v20 + 112))(v19, v20);
  uint64_t v21 = *(void *)(v0 + 40);
  uint64_t v22 = *(void *)(v0 + 48);
  sub_100012ED8(v15, v21);
  uint64_t v23 = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 112))(v21, v22);
  char v24 = v23;
  Date.addingTimeInterval(_:)(v23, v9);
  v11(v134, (uint64_t)v3, v5);
  v11(v137, v127, v5);
  uint64_t v25 = DateInterval.init(start:end:)(v134, v137);
  Date.addingTimeInterval(_:)(v25, v8);
  v11(v134, (uint64_t)v3, v5);
  v11(v137, v141, v5);
  DateInterval.init(start:end:)(v134, v137);
  if ((v120 & 1) == 0 || v18 <= v9)
  {
    uint64_t v33 = *(int *)(*(void *)(v0 + 1008) + 48LL);
    *(_DWORD *)(v0 + 1716) = v33;
    uint64_t v34 = (void *)swift_task_alloc(dword_1009A154C);
    *(void *)(v0 + 1496) = v34;
    *uint64_t v34 = v0;
    if ((v24 & 1) != 0)
    {
      uint64_t v35 = *(void *)(v0 + 1024);
      uint64_t v36 = sub_10010999C;
    }

    else
    {
      uint64_t v35 = *(void *)(v0 + 1032);
      uint64_t v36 = sub_100109240;
    }

    v34[1] = v36;
    uint64_t v29 = *(void *)(v0 + 1088);
    uint64_t v30 = v35 + v33;
    uint64_t v31 = v0 + 16;
    char v32 = 0;
    return sub_100105E20(v30, v31, v29, v32);
  }

  if ((v24 & 1) != 0)
  {
    uint64_t v26 = *(void *)(v0 + 1048);
    uint64_t v27 = *(int *)(*(void *)(v0 + 1008) + 48LL);
    *(_DWORD *)(v0 + 1712) = v27;
    uint64_t v28 = (void *)swift_task_alloc(dword_1009A154C);
    *(void *)(v0 + 1472) = v28;
    *uint64_t v28 = v0;
    v28[1] = sub_100108AE0;
    uint64_t v29 = *(void *)(v0 + 1080);
    uint64_t v30 = v26 + v27;
    uint64_t v31 = v0 + 16;
    char v32 = 1;
    return sub_100105E20(v30, v31, v29, v32);
  }

  uint64_t v38 = sub_100013044((uint64_t)v147, v0 + 336);
  uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
  os_log_type_t v40 = static os_log_type_t.error.getter(v39);
  int v144 = v39;
  if (os_log_type_enabled(v39, v40))
  {
    uint64_t v103 = *(void (**)(uint64_t, uint64_t))(v0 + 1448);
    uint64_t v112 = *(void *)(v0 + 1424);
    uint64_t v114 = *(void (**)(uint64_t, uint64_t))(v0 + 1440);
    uint64_t v138 = *(void *)(v0 + 1296);
    uint64_t v128 = *(void *)(v0 + 1280);
    uint64_t v131 = *(void *)(v0 + 1288);
    uint64_t v121 = *(void *)(v0 + 1256);
    uint64_t v124 = *(void *)(v0 + 1272);
    uint64_t v41 = *(void *)(v0 + 1216);
    uint64_t v142 = *(void *)(v0 + 1184);
    uint64_t v42 = *(void *)(v0 + 1168);
    uint64_t v101 = *(void *)(v0 + 1136);
    uint64_t v135 = *(void *)(v0 + 1128);
    uint64_t v116 = *(void *)(v0 + 1088);
    uint64_t v108 = *(void *)(v0 + 1064);
    uint64_t v110 = *(void *)(v0 + 1080);
    uint64_t v105 = *(void *)(v0 + 1056);
    uint64_t v43 = swift_slowAlloc(22LL, -1LL);
    uint64_t v44 = swift_slowAlloc(32LL, -1LL);
    v149[0] = v44;
    *(_DWORD *)uint64_t v43 = 141558275;
    *(void *)(v0 + 656) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 656, v0 + 664, v43 + 4, v43 + 12);
    *(_WORD *)(v43 + 12) = 2081;
    uint64_t v46 = *(void *)(v0 + 360);
    uint64_t v45 = *(void *)(v0 + 368);
    sub_100012ED8((void *)(v0 + 336), v46);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v45 + 8) + 8LL) + 32LL))(v46);
    uint64_t v47 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter(v101, v47);
    unint64_t v50 = v49;
    v103(v42, v101);
    *(void *)(v0 + 648) = sub_1003F11D4(v48, v50, v149);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 648, v0 + 656, v43 + 14, v43 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 336));
    _os_log_impl( (void *)&_mh_execute_header,  v144,  v40,  "Not subscribing beacon: %{private,mask.hash}s",  (uint8_t *)v43,  0x16u);
    swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1LL, -1LL);
    swift_slowDealloc(v43, -1LL, -1LL);

    swift_release(v112);
    uint64_t v51 = *(void (**)(uint64_t, uint64_t))(v108 + 8);
    v51(v110, v105);
    uint64_t v52 = v114;
    v114(v121, v41);
    v51(v116, v105);
    v114(v124, v41);
    v114(v128, v41);
    v114(v131, v41);
    uint64_t v53 = v138;
    uint64_t v54 = v41;
  }

  else
  {
    uint64_t v52 = *(void (**)(uint64_t, uint64_t))(v0 + 1440);
    uint64_t v55 = *(void *)(v0 + 1424);
    uint64_t v139 = *(void *)(v0 + 1296);
    uint64_t v129 = *(void *)(v0 + 1280);
    uint64_t v132 = *(void *)(v0 + 1288);
    uint64_t v125 = *(void *)(v0 + 1272);
    uint64_t v56 = *(void *)(v0 + 1256);
    uint64_t v57 = *(void *)(v0 + 1216);
    uint64_t v142 = *(void *)(v0 + 1184);
    uint64_t v135 = *(void *)(v0 + 1128);
    uint64_t v58 = *(void *)(v0 + 1088);
    uint64_t v59 = *(void *)(v0 + 1080);
    uint64_t v60 = *(void *)(v0 + 1064);
    uint64_t v61 = *(void *)(v0 + 1056);

    swift_release(v55);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 336));
    uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v60 + 8);
    v62(v59, v61);
    v52(v56, v57);
    v62(v58, v61);
    v52(v125, v57);
    v52(v129, v57);
    v52(v132, v57);
    uint64_t v53 = v139;
    uint64_t v54 = v57;
  }

  v52(v53, v54);
  sub_100015794(v135, (uint64_t *)&unk_1009AE460);
  sub_100018C68(v142, type metadata accessor for NotifyWhenFoundRecord);
  uint64_t v63 = *(void *)(v0 + 1352);
  uint64_t v64 = *(void *)(v0 + 1320);
  uint64_t v65 = *(void *)(v0 + 1344) + 1LL;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v147);
  if (v65 == v64)
  {
    uint64_t v93 = v63;
    swift_bridgeObjectRelease();
    (*(void (**)(void, void))(v0 + 1440))(*(void *)(v0 + 1312), *(void *)(v0 + 1216));
    uint64_t v66 = *(void *)(v0 + 1304);
    uint64_t v67 = *(void *)(v0 + 1296);
    uint64_t v68 = *(void *)(v0 + 1288);
    uint64_t v69 = *(void *)(v0 + 1280);
    uint64_t v70 = *(void *)(v0 + 1272);
    uint64_t v71 = *(void *)(v0 + 1264);
    uint64_t v72 = *(void *)(v0 + 1256);
    uint64_t v73 = *(void *)(v0 + 1248);
    uint64_t v74 = *(void *)(v0 + 1240);
    uint64_t v94 = *(void *)(v0 + 1232);
    uint64_t v95 = *(void *)(v0 + 1208);
    uint64_t v96 = *(void *)(v0 + 1184);
    uint64_t v97 = *(void *)(v0 + 1168);
    uint64_t v98 = *(void *)(v0 + 1160);
    uint64_t v99 = *(void *)(v0 + 1128);
    uint64_t v100 = *(void *)(v0 + 1112);
    uint64_t v102 = *(void *)(v0 + 1104);
    uint64_t v104 = *(void *)(v0 + 1096);
    uint64_t v106 = *(void *)(v0 + 1088);
    uint64_t v107 = *(void *)(v0 + 1080);
    uint64_t v109 = *(void *)(v0 + 1072);
    uint64_t v111 = *(void *)(v0 + 1048);
    uint64_t v113 = *(void *)(v0 + 1040);
    uint64_t v115 = *(void *)(v0 + 1032);
    uint64_t v117 = *(void *)(v0 + 1024);
    uint64_t v119 = *(void *)(v0 + 1016);
    uint64_t v122 = *(void *)(v0 + 1000);
    uint64_t v126 = *(void *)(v0 + 992);
    uint64_t v130 = *(void *)(v0 + 976);
    uint64_t v133 = *(void *)(v0 + 952);
    uint64_t v136 = *(void *)(v0 + 944);
    uint64_t v140 = *(void *)(v0 + 920);
    uint64_t v143 = *(void *)(v0 + 912);
    uint64_t v145 = *(void *)(v0 + 904);
    uint64_t v148 = *(void *)(v0 + 880);
    swift_task_dealloc(*(void *)(v0 + 1312));
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v102);
    swift_task_dealloc(v104);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v109);
    swift_task_dealloc(v111);
    swift_task_dealloc(v113);
    swift_task_dealloc(v115);
    swift_task_dealloc(v117);
    swift_task_dealloc(v119);
    swift_task_dealloc(v122);
    swift_task_dealloc(v126);
    swift_task_dealloc(v130);
    swift_task_dealloc(v133);
    swift_task_dealloc(v136);
    swift_task_dealloc(v140);
    swift_task_dealloc(v143);
    swift_task_dealloc(v145);
    swift_task_dealloc(v148);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v93);
  }

  else
  {
    uint64_t v75 = *(void *)(v0 + 1344) + 1LL;
    *(void *)(v0 + 1352) = v63;
    *(void *)(v0 + 1344) = v75;
    *(void *)(v0 + 1336) = v118;
    uint64_t v76 = *(__int128 **)(v0 + 1208);
    uint64_t v77 = *(void *)(v0 + 1184);
    uint64_t v78 = (uint64_t)v76 + *(int *)(v0 + 1696);
    sub_10001581C( *(void *)(v0 + 864)
    + ((*(unsigned __int8 *)(v0 + 1700) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1700))
    + *(void *)(v0 + 1328) * v75,
      (uint64_t)v76,
      (uint64_t *)&unk_1009B14F0);
    sub_100012EC0(v76, (uint64_t)v147);
    sub_10002218C(v78, v77, type metadata accessor for NotifyWhenFoundRecord);
    if (qword_10099B118 != -1) {
      swift_once(&qword_10099B118, sub_1000F95A0);
    }
    uint64_t v79 = type metadata accessor for Logger(0LL);
    *(void *)(v0 + 1360) = v79;
    *(void *)(v0 + 1368) = sub_10000A720(v79, (uint64_t)qword_100A2A1C8);
    uint64_t v80 = sub_100013044((uint64_t)v147, v0 + 56);
    uint64_t v81 = (os_log_s *)Logger.logObject.getter(v80);
    os_log_type_t v82 = static os_log_type_t.default.getter(v81);
    if (os_log_type_enabled(v81, v82))
    {
      uint64_t v83 = *(void *)(v0 + 1168);
      uint64_t v146 = *(void *)(v0 + 1144);
      uint64_t v84 = *(void *)(v0 + 1136);
      uint64_t v85 = swift_slowAlloc(22LL, -1LL);
      uint64_t v86 = swift_slowAlloc(32LL, -1LL);
      v149[0] = v86;
      *(_DWORD *)uint64_t v85 = 141558275;
      *(void *)(v0 + 848) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 848, v0 + 856, v85 + 4, v85 + 12);
      *(_WORD *)(v85 + 12) = 2081;
      uint64_t v88 = *(void *)(v0 + 80);
      uint64_t v87 = *(void *)(v0 + 88);
      sub_100012ED8((void *)(v0 + 56), v88);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v87 + 8) + 8LL) + 32LL))(v88);
      uint64_t v89 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v90 = dispatch thunk of CustomStringConvertible.description.getter(v84, v89);
      unint64_t v92 = v91;
      (*(void (**)(uint64_t, uint64_t))(v146 + 8))(v83, v84);
      *(void *)(v0 + 856) = sub_1003F11D4(v90, v92, v149);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 856, v0 + 864, v85 + 14, v85 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
      _os_log_impl( (void *)&_mh_execute_header,  v81,  v82,  "publishKeys for beacon: %{private,mask.hash}s",  (uint8_t *)v85,  0x16u);
      swift_arrayDestroy(v86, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v86, -1LL, -1LL);
      swift_slowDealloc(v85, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
    }

    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    *(void *)(v0 + 1376) = qword_100A2A710;
    return swift_task_switch(sub_100107560, 0LL, 0LL);
  }

uint64_t sub_100108AE0(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 1472LL);
  v3[185] = a1;
  v3[186] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_10010C924;
  }
  else {
    uint64_t v5 = sub_100108B9C;
  }
  return swift_task_switch(v5, v3[109], 0LL);
}

uint64_t sub_100108B9C()
{
  uint64_t v1 = *(void *)(v0 + 1480);
  uint64_t v2 = *(void (**)(char *, char *, uint64_t))(v0 + 1456);
  uint64_t v70 = *(void (**)(char *, uint64_t, __n128))(v0 + 1440);
  uint64_t v3 = *(void *)(v0 + 1248);
  uint64_t v4 = *(void *)(v0 + 1224);
  uint64_t v5 = *(void *)(v0 + 1216);
  uint64_t v6 = *(void **)(v0 + 1048);
  uint64_t v7 = *(void **)(v0 + 1040);
  uint64_t v8 = *(void *)(v0 + 1008);
  double v9 = (char *)v6 + *(int *)(v0 + 1712);
  *uint64_t v6 = v1;
  uint64_t v10 = (char *)v7 + *(int *)(v8 + 48);
  v2(v10, v9, v5);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v3, v10, v5);
  os_log_type_t v11 = (char *)v7 + *(int *)(v8 + 48);
  *uint64_t v7 = v1;
  v2(v11, v9, v5);
  __n128 v12 = swift_bridgeObjectRetain(v1);
  v70(v11, v5, v12);
  uint64_t v13 = (void *)(v0 + 536);
  uint64_t v14 = sub_100013044(v0 + 16, v0 + 536);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v0 + 1448);
    uint64_t v17 = *(void *)(v0 + 1168);
    uint64_t v18 = *(void *)(v0 + 1136);
    *(void *)os_log_type_t type = *(void *)(v0 + 1048);
    uint64_t v19 = swift_slowAlloc(22LL, -1LL);
    uint64_t v20 = swift_slowAlloc(32LL, -1LL);
    v76[0] = v20;
    *(_DWORD *)uint64_t v19 = 141558275;
    *(void *)(v0 + 784) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 784, v0 + 792, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2081;
    uint64_t v21 = *(void *)(v0 + 560);
    uint64_t v22 = *(void *)(v0 + 568);
    sub_100012ED8(v13, v21);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v22 + 8) + 8LL) + 32LL))(v21);
    uint64_t v23 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v18, v23);
    unint64_t v26 = v25;
    v68(v17, v18);
    *(void *)(v0 + 792) = sub_1003F11D4(v24, v26, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 792, v0 + 800, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v13);
    _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "Subscribing secondary keys for beacon: %{private,mask.hash}s",  (uint8_t *)v19,  0x16u);
    swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);

    uint64_t v27 = *(void *)type;
  }

  else
  {
    uint64_t v28 = *(void *)(v0 + 1048);

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v13);
    uint64_t v27 = v28;
  }

  sub_100015794(v27, &qword_1009A1768);
  uint64_t v29 = *(void *)(v0 + 1480);
  *(void *)(v0 + 1560) = _swiftEmptyArrayStorage;
  *(void *)(v0 + 1552) = v29;
  uint64_t v30 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1456);
  *(void *)typea = *(void *)(v0 + 1248);
  uint64_t v31 = *(void *)(v0 + 1240);
  uint64_t v64 = *(void *)(v0 + 1296);
  uint64_t v66 = *(void *)(v0 + 1232);
  uint64_t v32 = *(void *)(v0 + 1216);
  uint64_t v33 = *(uint64_t (**)(uint64_t))(v0 + 1168);
  uint64_t v34 = *(void *)(v0 + 1136);
  uint64_t v35 = *(void *)(v0 + 1096);
  uint64_t v69 = *(void *)(v0 + 1072);
  uint64_t v71 = *(void *)(v0 + 1080);
  uint64_t v62 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))(v0 + 1448);
  uint64_t v63 = *(void *)(v0 + 1064);
  os_log_t log = *(os_log_t *)(v0 + 1056);
  type metadata accessor for NotifyWhenFoundManager();
  uint64_t v37 = *(void *)(v0 + 40);
  uint64_t v36 = *(void *)(v0 + 48);
  sub_100012ED8((void *)(v0 + 16), v37);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v36 + 8) + 8LL) + 32LL))(v37);
  sub_100111854(v33, v35);
  v62(v33, v34);
  v30(v31, v64, v32);
  v30(v66, *(void *)typea, v32);
  uint64_t v38 = (*(uint64_t (**)(uint64_t, uint64_t, os_log_t))(v63 + 16))(v69, v71, log);
  uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
  os_log_type_t v40 = static os_log_type_t.default.getter(v39);
  BOOL v41 = os_log_type_enabled(v39, v40);
  uint64_t v42 = *(void (**)(uint64_t, uint64_t))(v0 + 1440);
  uint64_t v43 = *(void *)(v0 + 1240);
  uint64_t v44 = *(void *)(v0 + 1232);
  uint64_t v45 = *(void *)(v0 + 1216);
  uint64_t v46 = *(void *)(v0 + 1072);
  uint64_t v47 = *(void *)(v0 + 1064);
  uint64_t v48 = *(void *)(v0 + 1056);
  if (v41)
  {
    uint64_t v72 = *(void *)(v0 + 1056);
    uint64_t v49 = swift_slowAlloc(32LL, -1LL);
    uint64_t v75 = swift_slowAlloc(96LL, -1LL);
    v76[0] = v75;
    *(_DWORD *)uint64_t v49 = 136315650;
    uint64_t v65 = v46;
    uint64_t v50 = sub_100015C48( (unint64_t *)&qword_1009AFB20,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter(v45, v50);
    *(void *)(v0 + 760) = sub_1003F11D4(v51, v52, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 760, v0 + 768, v49 + 4, v49 + 12);
    swift_bridgeObjectRelease();
    v42(v43, v45);
    *(_WORD *)(v49 + 12) = 2080;
    uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter(v45, v50);
    *(void *)(v0 + 768) = sub_1003F11D4(v53, v54, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 768, v0 + 776, v49 + 14, v49 + 22);
    swift_bridgeObjectRelease();
    v42(v44, v45);
    *(_WORD *)(v49 + 22) = 2080;
    uint64_t v55 = sub_100015C48( &qword_1009A0DE0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval,  (uint64_t)&protocol conformance descriptor for DateInterval);
    uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter(v72, v55);
    *(void *)(v0 + 776) = sub_1003F11D4(v56, v57, v76);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 776, v0 + 784, v49 + 24, v49 + 32);
    swift_bridgeObjectRelease();
    uint64_t v58 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
    v58(v65, v72);
    _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "lastGoodKeyDate: %s, startDate: %s, secondaryDateInterval: %s",  (uint8_t *)v49,  0x20u);
    swift_arrayDestroy(v75, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v75, -1LL, -1LL);
    swift_slowDealloc(v49, -1LL, -1LL);
  }

  else
  {
    v42(*(void *)(v0 + 1240), *(void *)(v0 + 1216));
    v42(v44, v45);
    uint64_t v58 = *(void (**)(uint64_t, uint64_t))(v47 + 8);
    v58(v46, v48);
  }

  *(void *)(v0 + 1568) = v58;
  uint64_t v59 = (void *)swift_task_alloc(dword_1009A14FC);
  *(void *)(v0 + 1576) = v59;
  *uint64_t v59 = v0;
  v59[1] = sub_10010A290;
  uint64_t v60 = *(void *)(v0 + 872);
  v59[15] = v60;
  return swift_task_switch(sub_1000F9BD8, v60, 0LL);
}

uint64_t sub_100109240(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 1496LL);
  v3[188] = a1;
  v3[189] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_10010D308;
  }
  else {
    uint64_t v5 = sub_1001092FC;
  }
  return swift_task_switch(v5, v3[109], 0LL);
}

uint64_t sub_1001092FC()
{
  uint64_t v1 = *(void *)(v0 + 1504);
  uint64_t v2 = *(void (**)(char *, char *, uint64_t))(v0 + 1456);
  uint64_t v69 = *(void (**)(char *, uint64_t, __n128))(v0 + 1440);
  uint64_t v3 = *(void *)(v0 + 1248);
  uint64_t v4 = *(void *)(v0 + 1224);
  uint64_t v5 = *(void *)(v0 + 1216);
  uint64_t v6 = *(void **)(v0 + 1040);
  uint64_t v7 = *(void **)(v0 + 1032);
  uint64_t v8 = *(void *)(v0 + 1008);
  double v9 = (char *)v7 + *(int *)(v0 + 1716);
  *uint64_t v7 = v1;
  uint64_t v10 = (char *)v6 + *(int *)(v8 + 48);
  v2(v10, v9, v5);
  (*(void (**)(uint64_t, char *, uint64_t))(v4 + 32))(v3, v10, v5);
  os_log_type_t v11 = (char *)v6 + *(int *)(v8 + 48);
  *uint64_t v6 = v1;
  v2(v11, v9, v5);
  __n128 v12 = swift_bridgeObjectRetain(v1);
  v69(v11, v5, v12);
  uint64_t v13 = (void *)(v0 + 176);
  uint64_t v14 = sub_100013044(v0 + 16, v0 + 176);
  uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
  os_log_type_t v16 = static os_log_type_t.default.getter(v15);
  if (os_log_type_enabled(v15, v16))
  {
    uint64_t v67 = *(void (**)(uint64_t, uint64_t))(v0 + 1448);
    uint64_t v17 = *(void *)(v0 + 1168);
    uint64_t v18 = *(void *)(v0 + 1136);
    *(void *)os_log_type_t type = *(void *)(v0 + 1032);
    uint64_t v19 = swift_slowAlloc(22LL, -1LL);
    uint64_t v20 = swift_slowAlloc(32LL, -1LL);
    v75[0] = v20;
    *(_DWORD *)uint64_t v19 = 141558275;
    *(void *)(v0 + 808) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 808, v0 + 816, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2081;
    uint64_t v22 = *(void *)(v0 + 200);
    uint64_t v21 = *(void *)(v0 + 208);
    sub_100012ED8(v13, v22);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v21 + 8) + 8LL) + 32LL))(v22);
    uint64_t v23 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v18, v23);
    unint64_t v26 = v25;
    v67(v17, v18);
    *(void *)(v0 + 816) = sub_1003F11D4(v24, v26, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 816, v0 + 824, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v13);
    _os_log_impl( (void *)&_mh_execute_header,  v15,  v16,  "Subscribing primary keys for beacon: %{private,mask.hash}s",  (uint8_t *)v19,  0x16u);
    swift_arrayDestroy(v20, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v20, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);

    uint64_t v27 = *(void *)type;
  }

  else
  {
    uint64_t v28 = *(void *)(v0 + 1032);

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v13);
    uint64_t v27 = v28;
  }

  sub_100015794(v27, &qword_1009A1768);
  *(void *)(v0 + 1560) = *(void *)(v0 + 1504);
  *(void *)(v0 + 1552) = _swiftEmptyArrayStorage;
  uint64_t v29 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1456);
  *(void *)typea = *(void *)(v0 + 1248);
  uint64_t v30 = *(void *)(v0 + 1240);
  uint64_t v63 = *(void *)(v0 + 1296);
  uint64_t v65 = *(void *)(v0 + 1232);
  uint64_t v31 = *(void *)(v0 + 1216);
  uint64_t v32 = *(uint64_t (**)(uint64_t))(v0 + 1168);
  uint64_t v33 = *(void *)(v0 + 1136);
  uint64_t v34 = *(void *)(v0 + 1096);
  uint64_t v68 = *(void *)(v0 + 1072);
  uint64_t v70 = *(void *)(v0 + 1080);
  uint64_t v61 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))(v0 + 1448);
  uint64_t v62 = *(void *)(v0 + 1064);
  os_log_t log = *(os_log_t *)(v0 + 1056);
  type metadata accessor for NotifyWhenFoundManager();
  uint64_t v36 = *(void *)(v0 + 40);
  uint64_t v35 = *(void *)(v0 + 48);
  sub_100012ED8((void *)(v0 + 16), v36);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v35 + 8) + 8LL) + 32LL))(v36);
  sub_100111854(v32, v34);
  v61(v32, v33);
  v29(v30, v63, v31);
  v29(v65, *(void *)typea, v31);
  uint64_t v37 = (*(uint64_t (**)(uint64_t, uint64_t, os_log_t))(v62 + 16))(v68, v70, log);
  uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
  os_log_type_t v39 = static os_log_type_t.default.getter(v38);
  BOOL v40 = os_log_type_enabled(v38, v39);
  BOOL v41 = *(void (**)(uint64_t, uint64_t))(v0 + 1440);
  uint64_t v42 = *(void *)(v0 + 1240);
  uint64_t v43 = *(void *)(v0 + 1232);
  uint64_t v44 = *(void *)(v0 + 1216);
  uint64_t v45 = *(void *)(v0 + 1072);
  uint64_t v46 = *(void *)(v0 + 1064);
  uint64_t v47 = *(void *)(v0 + 1056);
  if (v40)
  {
    uint64_t v71 = *(void *)(v0 + 1056);
    uint64_t v48 = swift_slowAlloc(32LL, -1LL);
    uint64_t v74 = swift_slowAlloc(96LL, -1LL);
    v75[0] = v74;
    *(_DWORD *)uint64_t v48 = 136315650;
    uint64_t v64 = v45;
    uint64_t v49 = sub_100015C48( (unint64_t *)&qword_1009AFB20,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter(v44, v49);
    *(void *)(v0 + 760) = sub_1003F11D4(v50, v51, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 760, v0 + 768, v48 + 4, v48 + 12);
    swift_bridgeObjectRelease();
    v41(v42, v44);
    *(_WORD *)(v48 + 12) = 2080;
    uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter(v44, v49);
    *(void *)(v0 + 768) = sub_1003F11D4(v52, v53, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 768, v0 + 776, v48 + 14, v48 + 22);
    swift_bridgeObjectRelease();
    v41(v43, v44);
    *(_WORD *)(v48 + 22) = 2080;
    uint64_t v54 = sub_100015C48( &qword_1009A0DE0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval,  (uint64_t)&protocol conformance descriptor for DateInterval);
    uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter(v71, v54);
    *(void *)(v0 + 776) = sub_1003F11D4(v55, v56, v75);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 776, v0 + 784, v48 + 24, v48 + 32);
    swift_bridgeObjectRelease();
    unint64_t v57 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
    v57(v64, v71);
    _os_log_impl( (void *)&_mh_execute_header,  v38,  v39,  "lastGoodKeyDate: %s, startDate: %s, secondaryDateInterval: %s",  (uint8_t *)v48,  0x20u);
    swift_arrayDestroy(v74, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v74, -1LL, -1LL);
    swift_slowDealloc(v48, -1LL, -1LL);
  }

  else
  {
    v41(*(void *)(v0 + 1240), *(void *)(v0 + 1216));
    v41(v43, v44);
    unint64_t v57 = *(void (**)(uint64_t, uint64_t))(v46 + 8);
    v57(v45, v47);
  }

  *(void *)(v0 + 1568) = v57;
  uint64_t v58 = (void *)swift_task_alloc(dword_1009A14FC);
  *(void *)(v0 + 1576) = v58;
  *uint64_t v58 = v0;
  v58[1] = sub_10010A290;
  uint64_t v59 = *(void *)(v0 + 872);
  v58[15] = v59;
  return swift_task_switch(sub_1000F9BD8, v59, 0LL);
}

uint64_t sub_10010999C(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 1496);
  uint64_t v5 = *v2;
  *(void *)(v5 + 1520) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return swift_task_switch(sub_10010DCEC, *(void *)(v5 + 872), 0LL);
  }
  uint64_t v7 = *(void *)(v5 + 1016);
  uint64_t v8 = *(void *)(v5 + 1008);
  **(void **)(v5 + 1024) = a1;
  uint64_t v9 = *(int *)(v8 + 48);
  *(_DWORD *)(v5 + 1720) = v9;
  uint64_t v10 = (void *)swift_task_alloc(dword_1009A154C);
  *(void *)(v5 + 1528) = v10;
  void *v10 = v5;
  v10[1] = sub_100109AB4;
  return sub_100105E20(v7 + v9, v5 + 16, *(void *)(v5 + 1080), 1);
}

uint64_t sub_100109AB4(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 1528);
  *(void *)(*v2 + 1536) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = *(void *)(v4 + 872);
  if (v1)
  {
    uint64_t v7 = sub_10010E6D0;
  }

  else
  {
    *(void *)(v4 + 1544) = a1;
    uint64_t v7 = sub_100109B6C;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_100109B6C()
{
  uint64_t v1 = *(void (**)(char *, char *, uint64_t))(v0 + 1456);
  os_log_t log = *(os_log_t *)(v0 + 1440);
  uint64_t v80 = *(void *)(v0 + 1248);
  uint64_t v2 = *(void *)(v0 + 1224);
  uint64_t v3 = *(void *)(v0 + 1216);
  uint64_t v4 = *(uint64_t **)(v0 + 1040);
  uint64_t v5 = *(uint64_t **)(v0 + 1024);
  uint64_t v6 = *(uint64_t **)(v0 + 1016);
  uint64_t v7 = *(void *)(v0 + 1008);
  uint64_t v73 = (char *)v6 + *(int *)(v0 + 1720);
  uint64_t v8 = (char *)v5 + *(int *)(v0 + 1716);
  *uint64_t v6 = *(void *)(v0 + 1544);
  uint64_t v9 = (char *)v4 + *(int *)(v7 + 48);
  uint64_t v10 = *v5;
  v1(v9, v8, v3);
  (*(void (**)(uint64_t, char *, uint64_t))(v2 + 32))(v80, v9, v3);
  os_log_type_t v11 = (char *)v4 + *(int *)(v7 + 48);
  *uint64_t v4 = v10;
  v1(v11, v8, v3);
  uint64_t v81 = v10;
  __n128 v12 = swift_bridgeObjectRetain(v10);
  ((void (*)(char *, uint64_t, __n128))log)(v11, v3, v12);
  uint64_t v13 = (char *)v4 + *(int *)(v7 + 48);
  uint64_t v14 = *v6;
  *uint64_t v4 = *v6;
  v1(v13, v73, v3);
  __n128 v15 = swift_bridgeObjectRetain(v14);
  ((void (*)(char *, uint64_t, __n128))log)(v13, v3, v15);
  os_log_type_t v16 = (void *)(v0 + 96);
  uint64_t v17 = sub_100013044(v0 + 16, v0 + 96);
  uint64_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    uint64_t v20 = *(void *)(v0 + 1168);
    uint64_t v21 = *(void *)(v0 + 1136);
    uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v0 + 1448);
    uint64_t v74 = *(void *)(v0 + 1016);
    uint64_t v76 = *(void *)(v0 + 1024);
    uint64_t v22 = swift_slowAlloc(22LL, -1LL);
    uint64_t v66 = swift_slowAlloc(32LL, -1LL);
    v83[0] = v66;
    *(_DWORD *)uint64_t v22 = 141558275;
    *(void *)(v0 + 832) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 832, v0 + 840, v22 + 4, v22 + 12);
    *(_WORD *)(v22 + 12) = 2081;
    uint64_t v24 = *(void *)(v0 + 120);
    uint64_t v23 = *(void *)(v0 + 128);
    sub_100012ED8(v16, v24);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v23 + 8) + 8LL) + 32LL))(v24);
    uint64_t v25 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v21, v25);
    unint64_t v28 = v27;
    v69(v20, v21);
    *(void *)(v0 + 840) = sub_1003F11D4(v26, v28, v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 840, v0 + 848, v22 + 14, v22 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
    _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "Subscribing primary and secondary keys for beacon: %{private,mask.hash}s",  (uint8_t *)v22,  0x16u);
    swift_arrayDestroy(v66, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v66, -1LL, -1LL);
    swift_slowDealloc(v22, -1LL, -1LL);

    sub_100015794(v74, &qword_1009A1768);
    uint64_t v29 = v76;
  }

  else
  {
    uint64_t v30 = *(void *)(v0 + 1024);
    uint64_t v31 = *(void *)(v0 + 1016);

    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
    sub_100015794(v31, &qword_1009A1768);
    uint64_t v29 = v30;
  }

  sub_100015794(v29, &qword_1009A1768);
  *(void *)(v0 + 1560) = v81;
  *(void *)(v0 + 1552) = v14;
  uint64_t v32 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1456);
  *(void *)os_log_type_t type = *(void *)(v0 + 1248);
  uint64_t v33 = *(void *)(v0 + 1240);
  uint64_t v67 = *(void *)(v0 + 1296);
  uint64_t v70 = *(void *)(v0 + 1232);
  uint64_t v34 = *(void *)(v0 + 1216);
  uint64_t v35 = *(uint64_t (**)(uint64_t))(v0 + 1168);
  uint64_t v36 = *(void *)(v0 + 1136);
  uint64_t v37 = *(void *)(v0 + 1096);
  uint64_t v75 = *(void *)(v0 + 1072);
  uint64_t v77 = *(void *)(v0 + 1080);
  uint64_t v64 = *(void (**)(uint64_t (*)(uint64_t), uint64_t))(v0 + 1448);
  uint64_t v65 = *(void *)(v0 + 1064);
  os_log_t loga = *(os_log_t *)(v0 + 1056);
  type metadata accessor for NotifyWhenFoundManager();
  uint64_t v39 = *(void *)(v0 + 40);
  uint64_t v38 = *(void *)(v0 + 48);
  sub_100012ED8((void *)(v0 + 16), v39);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v38 + 8) + 8LL) + 32LL))(v39);
  sub_100111854(v35, v37);
  v64(v35, v36);
  v32(v33, v67, v34);
  v32(v70, *(void *)type, v34);
  uint64_t v40 = (*(uint64_t (**)(uint64_t, uint64_t, os_log_t))(v65 + 16))(v75, v77, loga);
  BOOL v41 = (os_log_s *)Logger.logObject.getter(v40);
  os_log_type_t v42 = static os_log_type_t.default.getter(v41);
  BOOL v43 = os_log_type_enabled(v41, v42);
  uint64_t v44 = *(void (**)(uint64_t, uint64_t))(v0 + 1440);
  uint64_t v45 = *(void *)(v0 + 1240);
  uint64_t v46 = *(void *)(v0 + 1232);
  uint64_t v47 = *(void *)(v0 + 1216);
  uint64_t v48 = *(void *)(v0 + 1072);
  uint64_t v49 = *(void *)(v0 + 1064);
  uint64_t v50 = *(void *)(v0 + 1056);
  if (v43)
  {
    uint64_t v78 = *(void *)(v0 + 1056);
    uint64_t v51 = swift_slowAlloc(32LL, -1LL);
    uint64_t v82 = swift_slowAlloc(96LL, -1LL);
    v83[0] = v82;
    *(_DWORD *)uint64_t v51 = 136315650;
    uint64_t v68 = v48;
    uint64_t v52 = sub_100015C48( (unint64_t *)&qword_1009AFB20,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter(v47, v52);
    *(void *)(v0 + 760) = sub_1003F11D4(v53, v54, v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 760, v0 + 768, v51 + 4, v51 + 12);
    swift_bridgeObjectRelease();
    v44(v45, v47);
    *(_WORD *)(v51 + 12) = 2080;
    uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter(v47, v52);
    *(void *)(v0 + 768) = sub_1003F11D4(v55, v56, v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 768, v0 + 776, v51 + 14, v51 + 22);
    swift_bridgeObjectRelease();
    v44(v46, v47);
    *(_WORD *)(v51 + 22) = 2080;
    uint64_t v57 = sub_100015C48( &qword_1009A0DE0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval,  (uint64_t)&protocol conformance descriptor for DateInterval);
    uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter(v78, v57);
    *(void *)(v0 + 776) = sub_1003F11D4(v58, v59, v83);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 776, v0 + 784, v51 + 24, v51 + 32);
    swift_bridgeObjectRelease();
    uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
    v60(v68, v78);
    _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "lastGoodKeyDate: %s, startDate: %s, secondaryDateInterval: %s",  (uint8_t *)v51,  0x20u);
    swift_arrayDestroy(v82, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v82, -1LL, -1LL);
    swift_slowDealloc(v51, -1LL, -1LL);
  }

  else
  {
    v44(*(void *)(v0 + 1240), *(void *)(v0 + 1216));
    v44(v46, v47);
    uint64_t v60 = *(void (**)(uint64_t, uint64_t))(v49 + 8);
    v60(v48, v50);
  }

  *(void *)(v0 + 1568) = v60;
  uint64_t v61 = (void *)swift_task_alloc(dword_1009A14FC);
  *(void *)(v0 + 1576) = v61;
  *uint64_t v61 = v0;
  v61[1] = sub_10010A290;
  uint64_t v62 = *(void *)(v0 + 872);
  v61[15] = v62;
  return swift_task_switch(sub_1000F9BD8, v62, 0LL);
}

uint64_t sub_10010A290(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 1576);
  *(void *)(*v2 + 1584) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = *(void *)(v4 + 872);
  if (v1)
  {
    swift_errorRelease(v1);
    uint64_t v7 = sub_10010F0E4;
  }

  else
  {
    *(void *)(v4 + 1592) = a1;
    uint64_t v7 = sub_10010A35C;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_10010A35C()
{
  uint64_t v1 = v0[199];
  uint64_t v2 = v0[5];
  uint64_t v3 = v0[6];
  sub_100012ED8(v0 + 2, v2);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v3 + 8) + 8LL) + 32LL))(v2);
  return swift_task_switch(sub_10010A400, v1, 0LL);
}

uint64_t sub_10010A400()
{
  uint64_t v1 = v0[199];
  uint64_t v2 = v0[146];
  uint64_t v3 = v0[145];
  uint64_t v4 = v0[144];
  uint64_t v5 = v0[143];
  uint64_t v6 = v0[142];
  v0[200] = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v6);
  uint64_t v7 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v8 = (v7 + 24) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_10093E7A8, v8 + v4, v7 | 7);
  v0[201] = v9;
  *(void *)(v9 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v9 + v8, v3, v6);
  swift_retain();
  return swift_task_switch(sub_10010A4EC, 0LL, 0LL);
}

uint64_t sub_10010A4EC()
{
  uint64_t v1 = v0[201];
  uint64_t v2 = v0[200];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[202] = v3;
  v3[2] = v2;
  v3[3] = sub_10011795C;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[203] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_10010A5C8;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[125],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100118954,  v3,  v0[123]);
}

uint64_t sub_10010A5C8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 1616LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 1608LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 1592LL);
  uint64_t v4 = *(void (**)(uint64_t, uint64_t))(*(void *)v0 + 1448LL);
  uint64_t v5 = *(void *)(*(void *)v0 + 1168LL);
  uint64_t v6 = *(void *)(*(void *)v0 + 1136LL);
  uint64_t v7 = *(void *)(*(void *)v0 + 872LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 1624LL));
  swift_release(v3);
  swift_release(v2);
  swift_task_dealloc(v1);
  v4(v5, v6);
  return swift_task_switch(sub_10010A6A0, v7, 0LL);
}

uint64_t sub_10010A6A0()
{
  uint64_t v1 = (void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 1000);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 968) + 48LL))( v2,  1LL,  *(void *)(v0 + 960)) == 1)
  {
    sub_100015794(v2, (uint64_t *)&unk_1009A9C30);
LABEL_4:
    uint64_t v6 = 0LL;
    uint64_t v7 = 0LL;
    goto LABEL_6;
  }

  uint64_t v3 = sub_1005D2984();
  unint64_t v5 = v4;
  sub_100018C68(v2, type metadata accessor for OwnedBeaconRecord);
  if (v5 >> 60 == 15) {
    goto LABEL_4;
  }
  *(void *)(v0 + 600) = v3;
  *(void *)(v0 + 608) = v5;
  unint64_t v8 = sub_10008A064();
  uint64_t v6 = RawRepresentable<>.hexString.getter(&type metadata for AccessoryProductData, v8);
  uint64_t v7 = v9;
  sub_1000182F0(v3, v5);
LABEL_6:
  uint64_t v10 = *(void *)(v0 + 1584);
  *(void *)(v0 + 1640) = v7;
  *(void *)(v0 + 1632) = v6;
  uint64_t v11 = *(unsigned int *)(v0 + 1704);
  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  *(void *)(v0 + 520) = My;
  *(void *)(v0 + 528) = sub_100015C48( (unint64_t *)&qword_1009B04D0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  uint64_t v13 = sub_10000A7C8((void *)(v0 + 496));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(My - 8) + 104LL))(v13, v11, My);
  LOBYTE(v11) = isFeatureEnabled(_:)(v0 + 496);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 496));
  if ((v11 & 1) != 0)
  {
    uint64_t v14 = *(void *)(v0 + 992);
    uint64_t v15 = *(void *)(v0 + 968);
    uint64_t v16 = *(void *)(v0 + 960);
    sub_100013044(v0 + 16, v0 + 416);
    uint64_t v17 = sub_100004AEC(&qword_1009B0530);
    int v18 = swift_dynamicCast(v14, v0 + 416, v17, v16, 6LL);
    os_log_type_t v19 = *(void (**)(void, uint64_t, uint64_t, void))(v15 + 56);
    uint64_t v20 = *(void *)(v0 + 992);
    if (v18)
    {
      uint64_t v21 = *(void *)(v0 + 976);
      v19(*(void *)(v0 + 992), 0LL, 1LL, *(void *)(v0 + 960));
      sub_10002218C(v20, v21, type metadata accessor for OwnedBeaconRecord);
      uint64_t v22 = (void *)swift_task_alloc(dword_1009A14FC);
      *(void *)(v0 + 1648) = v22;
      void *v22 = v0;
      v22[1] = sub_10010B4BC;
      uint64_t v23 = *(void *)(v0 + 872);
      v22[15] = v23;
      uint64_t v24 = sub_1000F9BD8;
      return swift_task_switch(v24, v23, 0LL);
    }

    v19(*(void *)(v0 + 992), 1LL, 1LL, *(void *)(v0 + 960));
    sub_100015794(v20, (uint64_t *)&unk_1009A9C30);
    if (qword_10099BA30 != -1) {
      swift_once(&qword_10099BA30, sub_100795FD8);
    }
    sub_10000A720(*(void *)(v0 + 1360), (uint64_t)qword_100A2B7D8);
    uint64_t v25 = sub_100013044(v0 + 16, v0 + 376);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.error.getter(v26);
    if (os_log_type_enabled(v26, v27))
    {
      uint64_t v148 = *(void (**)(uint64_t, uint64_t))(v0 + 1448);
      uint64_t v28 = *(void *)(v0 + 1168);
      uint64_t v29 = *(void *)(v0 + 1136);
      uint64_t v124 = v10;
      uint64_t v30 = swift_slowAlloc(22LL, -1LL);
      v157[0] = swift_slowAlloc(32LL, -1LL);
      uint64_t v31 = v157[0];
      *(_DWORD *)uint64_t v30 = 141558275;
      *(void *)(v0 + 664) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 664, v0 + 672, v30 + 4, v30 + 12);
      *(_WORD *)(v30 + 12) = 2081;
      uint64_t v32 = *(void *)(v0 + 400);
      uint64_t v33 = *(void *)(v0 + 408);
      sub_100012ED8((void *)(v0 + 376), v32);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v33 + 8) + 8LL) + 32LL))(v32);
      uint64_t v34 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter(v29, v34);
      unint64_t v37 = v36;
      v148(v28, v29);
      *(void *)(v0 + 672) = sub_1003F11D4(v35, v37, v157);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 672, v0 + 680, v30 + 14, v30 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 376));
      _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "Not an OwnedBeaconRecord not including the owned device keys %{private,mask.hash}s.",  (uint8_t *)v30,  0x16u);
      swift_arrayDestroy(v31, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v38 = v31;
      uint64_t v1 = (void *)(v0 + 16);
      swift_slowDealloc(v38, -1LL, -1LL);
      uint64_t v39 = v30;
      uint64_t v10 = v124;
      swift_slowDealloc(v39, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 376));
    }
  }

  uint64_t v125 = v10;
  uint64_t v139 = *(void *)(v0 + 1560);
  uint64_t v142 = *(void *)(v0 + 1632);
  uint64_t v145 = *(void *)(v0 + 1552);
  uint64_t v149 = *(void *)(v0 + 1640);
  uint64_t v40 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 1464);
  uint64_t v155 = v1;
  uint64_t v41 = *(void *)(v0 + 1216);
  uint64_t v42 = *(void *)(v0 + 1184);
  uint64_t v43 = *(void *)(v0 + 1176);
  uint64_t v44 = *(void *)(v0 + 1144);
  uint64_t v45 = *(void *)(v0 + 1112);
  uint64_t v130 = *(void *)(v0 + 1136);
  uint64_t v133 = *(void *)(v0 + 1096);
  uint64_t v46 = *(void *)(v0 + 920);
  uint64_t v136 = *(void *)(v0 + 912);
  uint64_t v47 = *(int **)(v0 + 888);
  uint64_t v48 = *(void *)(v0 + 880);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 1456))(v45, *(void *)(v0 + 1248), v41);
  v40(v45, 0LL, 1LL, v41);
  uint64_t v49 = v42 + *(int *)(v43 + 20);
  uint64_t v51 = *(void *)(v0 + 40);
  uint64_t v50 = *(void *)(v0 + 48);
  sub_100012ED8(v155, v51);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v50 + 8) + 8LL) + 32LL))(v51);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v44 + 56))(v48, 0LL, 1LL, v130);
  sub_10001581C(v133, v46 + v47[9], (uint64_t *)&unk_10099D720);
  sub_100015750(v45, v46, (uint64_t *)&unk_10099D720);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v44 + 16))(v46 + v47[5], v49, v130);
  *(_BYTE *)(v46 + v47[6]) = 1;
  sub_100015750(v48, v46 + v47[7], &qword_10099D8A0);
  *(void *)(v46 + v47[8]) = v139;
  uint64_t v52 = (void *)(v46 + v47[10]);
  *uint64_t v52 = v142;
  v52[1] = v149;
  *(void *)(v46 + v47[11]) = v145;
  *(void *)(v46 + v47[12]) = _swiftEmptyArrayStorage;
  uint64_t v53 = sub_10001DC4C(v46, v136, type metadata accessor for NotifyMeRequest.Subscription);
  unint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
  os_log_type_t v55 = static os_log_type_t.default.getter(v54);
  BOOL v56 = os_log_type_enabled(v54, v55);
  uint64_t v57 = *(void *)(v0 + 912);
  if (v56)
  {
    uint64_t v58 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v59 = swift_slowAlloc(32LL, -1LL);
    v157[0] = v59;
    *(_DWORD *)uint64_t v58 = 136315138;
    uint64_t v60 = sub_100154744();
    *(void *)(v0 + 720) = sub_1003F11D4(v60, v61, v157);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 720, v0 + 728, v58 + 4, v58 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68(v57, type metadata accessor for NotifyMeRequest.Subscription);
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "publishKeys subscription: %s.", v58, 0xCu);
    swift_arrayDestroy(v59, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v59, -1LL, -1LL);
    swift_slowDealloc(v58, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(*(void *)(v0 + 912), type metadata accessor for NotifyMeRequest.Subscription);
  }

  uint64_t v62 = *(void *)(v0 + 1352);
  sub_10001DC4C(*(void *)(v0 + 920), *(void *)(v0 + 904), type metadata accessor for NotifyMeRequest.Subscription);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v62);
  unint64_t v64 = *(void *)(v0 + 1352);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v64 = sub_1004C51E8(0, *(void *)(v64 + 16) + 1LL, 1, v64);
  }
  unint64_t v66 = *(void *)(v64 + 16);
  unint64_t v65 = *(void *)(v64 + 24);
  unint64_t v67 = v66 + 1;
  if (v66 >= v65 >> 1)
  {
    uint64_t v107 = sub_1004C51E8(v65 > 1, v66 + 1, 1, v64);
    unint64_t v67 = v66 + 1;
    unint64_t v64 = v107;
  }

  unint64_t v127 = v64;
  uint64_t v68 = *(void (**)(uint64_t, uint64_t))(v0 + 1568);
  uint64_t v69 = *(void (**)(uint64_t, uint64_t))(v0 + 1440);
  uint64_t v70 = *(void *)(v0 + 1424);
  uint64_t v150 = *(void *)(v0 + 1296);
  uint64_t v140 = *(void *)(v0 + 1280);
  uint64_t v143 = *(void *)(v0 + 1288);
  uint64_t v137 = *(void *)(v0 + 1272);
  uint64_t v134 = *(void *)(v0 + 1256);
  uint64_t v128 = *(void *)(v0 + 1248);
  uint64_t v71 = *(void *)(v0 + 1216);
  uint64_t v152 = *(void *)(v0 + 1184);
  uint64_t v146 = *(void *)(v0 + 1128);
  uint64_t v72 = *(void *)(v0 + 1096);
  uint64_t v131 = *(void *)(v0 + 1088);
  uint64_t v73 = *(void *)(v0 + 1080);
  uint64_t v74 = *(void *)(v0 + 1056);
  uint64_t v75 = *(void *)(v0 + 920);
  uint64_t v76 = *(void *)(v0 + 904);
  uint64_t v77 = *(void *)(v0 + 896);
  *(void *)(v64 + 16) = v67;
  sub_10002218C( v76,  v64 + ((*(unsigned __int8 *)(v77 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v77 + 80))
  + *(void *)(v77 + 72) * v66,
    type metadata accessor for NotifyMeRequest.Subscription);
  swift_release(v70);
  sub_100018C68(v75, type metadata accessor for NotifyMeRequest.Subscription);
  sub_100015794(v72, (uint64_t *)&unk_10099D720);
  v69(v128, v71);
  v68(v73, v74);
  v69(v134, v71);
  v68(v131, v74);
  v69(v137, v71);
  v69(v140, v71);
  v69(v143, v71);
  v69(v150, v71);
  sub_100015794(v146, (uint64_t *)&unk_1009AE460);
  sub_100018C68(v152, type metadata accessor for NotifyWhenFoundRecord);
  uint64_t v78 = *(void *)(v0 + 1320);
  uint64_t v79 = *(void *)(v0 + 1344) + 1LL;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v155);
  if (v79 == v78)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(void, void))(v0 + 1440))(*(void *)(v0 + 1312), *(void *)(v0 + 1216));
    uint64_t v80 = *(void *)(v0 + 1304);
    uint64_t v81 = *(void *)(v0 + 1296);
    uint64_t v82 = *(void *)(v0 + 1288);
    uint64_t v83 = *(void *)(v0 + 1280);
    uint64_t v84 = *(void *)(v0 + 1272);
    uint64_t v85 = *(void *)(v0 + 1264);
    uint64_t v86 = *(void *)(v0 + 1256);
    uint64_t v87 = *(void *)(v0 + 1248);
    uint64_t v108 = *(void *)(v0 + 1240);
    uint64_t v109 = *(void *)(v0 + 1232);
    uint64_t v110 = *(void *)(v0 + 1208);
    uint64_t v111 = *(void *)(v0 + 1184);
    uint64_t v112 = *(void *)(v0 + 1168);
    uint64_t v113 = *(void *)(v0 + 1160);
    uint64_t v114 = *(void *)(v0 + 1128);
    uint64_t v115 = *(void *)(v0 + 1112);
    uint64_t v116 = *(void *)(v0 + 1104);
    uint64_t v117 = *(void *)(v0 + 1096);
    uint64_t v118 = *(void *)(v0 + 1088);
    uint64_t v119 = *(void *)(v0 + 1080);
    uint64_t v120 = *(void *)(v0 + 1072);
    uint64_t v121 = *(void *)(v0 + 1048);
    uint64_t v122 = *(void *)(v0 + 1040);
    uint64_t v123 = *(void *)(v0 + 1032);
    uint64_t v126 = *(void *)(v0 + 1024);
    uint64_t v129 = *(void *)(v0 + 1016);
    uint64_t v132 = *(void *)(v0 + 1000);
    uint64_t v135 = *(void *)(v0 + 992);
    uint64_t v138 = *(void *)(v0 + 976);
    uint64_t v141 = *(void *)(v0 + 952);
    uint64_t v144 = *(void *)(v0 + 944);
    uint64_t v147 = *(void *)(v0 + 920);
    uint64_t v151 = *(void *)(v0 + 912);
    uint64_t v153 = *(void *)(v0 + 904);
    uint64_t v156 = *(void *)(v0 + 880);
    swift_task_dealloc(*(void *)(v0 + 1312));
    swift_task_dealloc(v80);
    swift_task_dealloc(v81);
    swift_task_dealloc(v82);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v115);
    swift_task_dealloc(v116);
    swift_task_dealloc(v117);
    swift_task_dealloc(v118);
    swift_task_dealloc(v119);
    swift_task_dealloc(v120);
    swift_task_dealloc(v121);
    swift_task_dealloc(v122);
    swift_task_dealloc(v123);
    swift_task_dealloc(v126);
    swift_task_dealloc(v129);
    swift_task_dealloc(v132);
    swift_task_dealloc(v135);
    swift_task_dealloc(v138);
    swift_task_dealloc(v141);
    swift_task_dealloc(v144);
    swift_task_dealloc(v147);
    swift_task_dealloc(v151);
    swift_task_dealloc(v153);
    swift_task_dealloc(v156);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v127);
  }

  uint64_t v89 = *(void *)(v0 + 1344) + 1LL;
  *(void *)(v0 + 1352) = v127;
  *(void *)(v0 + 1344) = v89;
  *(void *)(v0 + 1336) = v125;
  uint64_t v90 = *(__int128 **)(v0 + 1208);
  uint64_t v91 = *(void *)(v0 + 1184);
  uint64_t v92 = (uint64_t)v90 + *(int *)(v0 + 1696);
  sub_10001581C( *(void *)(v0 + 864)
  + ((*(unsigned __int8 *)(v0 + 1700) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1700))
  + *(void *)(v0 + 1328) * v89,
    (uint64_t)v90,
    (uint64_t *)&unk_1009B14F0);
  sub_100012EC0(v90, (uint64_t)v155);
  sub_10002218C(v92, v91, type metadata accessor for NotifyWhenFoundRecord);
  if (qword_10099B118 != -1) {
    swift_once(&qword_10099B118, sub_1000F95A0);
  }
  uint64_t v93 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 1360) = v93;
  *(void *)(v0 + 1368) = sub_10000A720(v93, (uint64_t)qword_100A2A1C8);
  uint64_t v94 = sub_100013044((uint64_t)v155, v0 + 56);
  uint64_t v95 = (os_log_s *)Logger.logObject.getter(v94);
  os_log_type_t v96 = static os_log_type_t.default.getter(v95);
  if (os_log_type_enabled(v95, v96))
  {
    uint64_t v97 = *(void *)(v0 + 1168);
    uint64_t v154 = *(void *)(v0 + 1144);
    uint64_t v98 = *(void *)(v0 + 1136);
    uint64_t v99 = swift_slowAlloc(22LL, -1LL);
    uint64_t v100 = swift_slowAlloc(32LL, -1LL);
    v157[0] = v100;
    *(_DWORD *)uint64_t v99 = 141558275;
    *(void *)(v0 + 848) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 848, v0 + 856, v99 + 4, v99 + 12);
    *(_WORD *)(v99 + 12) = 2081;
    uint64_t v102 = *(void *)(v0 + 80);
    uint64_t v101 = *(void *)(v0 + 88);
    sub_100012ED8((void *)(v0 + 56), v102);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v101 + 8) + 8LL) + 32LL))(v102);
    uint64_t v103 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v104 = dispatch thunk of CustomStringConvertible.description.getter(v98, v103);
    unint64_t v106 = v105;
    (*(void (**)(uint64_t, uint64_t))(v154 + 8))(v97, v98);
    *(void *)(v0 + 856) = sub_1003F11D4(v104, v106, v157);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 856, v0 + 864, v99 + 14, v99 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
    _os_log_impl( (void *)&_mh_execute_header,  v95,  v96,  "publishKeys for beacon: %{private,mask.hash}s",  (uint8_t *)v99,  0x16u);
    swift_arrayDestroy(v100, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v100, -1LL, -1LL);
    swift_slowDealloc(v99, -1LL, -1LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
  }

  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  *(void *)(v0 + 1376) = qword_100A2A710;
  uint64_t v24 = sub_100107560;
  uint64_t v23 = 0LL;
  return swift_task_switch(v24, v23, 0LL);
}

uint64_t sub_10010B4BC(uint64_t a1)
{
  uint64_t v4 = *(void *)(*(void *)v2 + 1648LL);
  unint64_t v5 = *(void **)v2;
  v5[207] = a1;
  v5[208] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    return swift_task_switch(sub_10010FE4C, v5[109], 0LL);
  }
  uint64_t v7 = v5[122];
  uint64_t v8 = *(int *)(v5[120] + 20LL);
  uint64_t v9 = (void *)swift_task_alloc(dword_1009B63AC);
  v5[209] = v9;
  *uint64_t v9 = v5;
  v9[1] = sub_10010B5C0;
  return sub_1005EC05C(v7 + v8);
}

uint64_t sub_10010B5C0(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 1672LL);
  v3[210] = a1;
  v3[211] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    uint64_t v5 = v3[109];
    uint64_t v6 = sub_100110B4C;
  }

  else
  {
    uint64_t v7 = v3[109];
    swift_release(v3[207]);
    uint64_t v6 = sub_10010B68C;
    uint64_t v5 = v7;
  }

  return swift_task_switch(v6, v5, 0LL);
}

uint64_t sub_10010B68C()
{
  uint64_t v1 = *(void **)(v0 + 1680);
  if (!v1[2])
  {
    uint64_t v156 = *(void *)(v0 + 1688);
    uint64_t v47 = (void *)(v0 + 16);
    uint64_t v48 = *(void *)(v0 + 976);
    swift_bridgeObjectRelease();
    sub_100018C68(v48, type metadata accessor for OwnedBeaconRecord);
    uint64_t v182 = *(void *)(v0 + 1640);
    uint64_t v173 = *(void *)(v0 + 1632);
    uint64_t v169 = *(void *)(v0 + 1560);
    uint64_t v177 = *(void *)(v0 + 1552);
    uint64_t v49 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 1464);
    uint64_t v50 = *(void (**)(uint64_t, uint64_t, uint64_t))(v0 + 1456);
    uint64_t v51 = *(void *)(v0 + 1248);
    uint64_t v52 = *(void *)(v0 + 1216);
    uint64_t v53 = *(void *)(v0 + 1184);
    uint64_t v54 = *(void *)(v0 + 1176);
    uint64_t v55 = *(void *)(v0 + 1144);
    uint64_t v56 = *(void *)(v0 + 1112);
    uint64_t v160 = *(void *)(v0 + 1136);
    uint64_t v163 = *(void *)(v0 + 1096);
    uint64_t v57 = *(void *)(v0 + 920);
    uint64_t v166 = *(void *)(v0 + 912);
    uint64_t v58 = *(int **)(v190 + 888);
    uint64_t v59 = *(void *)(v190 + 880);
    v50(v56, v51, v52);
    v49(v56, 0LL, 1LL, v52);
    uint64_t v60 = v53 + *(int *)(v54 + 20);
    uint64_t v61 = *(void *)(v190 + 40);
    uint64_t v62 = *(void *)(v190 + 48);
    int v192 = v47;
    sub_100012ED8(v47, v61);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v62 + 8) + 8LL) + 32LL))(v61);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v55 + 56))(v59, 0LL, 1LL, v160);
    sub_10001581C(v163, v57 + v58[9], (uint64_t *)&unk_10099D720);
    sub_100015750(v56, v57, (uint64_t *)&unk_10099D720);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v55 + 16))(v57 + v58[5], v60, v160);
    *(_BYTE *)(v57 + v58[6]) = 1;
    sub_100015750(v59, v57 + v58[7], &qword_10099D8A0);
    *(void *)(v57 + v58[8]) = v169;
    uint64_t v63 = (void *)(v57 + v58[10]);
    *uint64_t v63 = v173;
    v63[1] = v182;
    *(void *)(v57 + v58[11]) = v177;
    uint64_t v64 = v58[12];
    uint64_t v0 = v190;
    *(void *)(v57 + v64) = _swiftEmptyArrayStorage;
    uint64_t v65 = sub_10001DC4C(v57, v166, type metadata accessor for NotifyMeRequest.Subscription);
    unint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
    os_log_type_t v67 = static os_log_type_t.default.getter(v66);
    BOOL v68 = os_log_type_enabled(v66, v67);
    uint64_t v69 = *(void *)(v190 + 912);
    if (v68)
    {
      uint64_t v70 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v71 = swift_slowAlloc(32LL, -1LL);
      v195[0] = v71;
      *(_DWORD *)uint64_t v70 = 136315138;
      uint64_t v0 = v190;
      uint64_t v72 = sub_100154744();
      *(void *)(v190 + 720) = sub_1003F11D4(v72, v73, v195);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v190 + 720, v190 + 728, v70 + 4, v70 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68(v69, type metadata accessor for NotifyMeRequest.Subscription);
      _os_log_impl((void *)&_mh_execute_header, v66, v67, "publishKeys subscription: %s.", v70, 0xCu);
      swift_arrayDestroy(v71, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1LL, -1LL);
      swift_slowDealloc(v70, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(*(void *)(v190 + 912), type metadata accessor for NotifyMeRequest.Subscription);
    }

    uint64_t v74 = *(void *)(v0 + 1352);
    sub_10001DC4C(*(void *)(v0 + 920), *(void *)(v0 + 904), type metadata accessor for NotifyMeRequest.Subscription);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v74);
    unint64_t v27 = *(void *)(v0 + 1352);
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_36;
    }
    goto LABEL_58;
  }

  uint64_t v172 = (uint64_t *)(v0 + 712);
  uint64_t v176 = (void *)(v0 + 632);
  uint64_t v2 = (size_t *)(v0 + 736);
  uint64_t v3 = *(void *)(v0 + 1688);
  int v192 = v1 + 7;
  uint64_t v4 = v1[4];
  unint64_t v5 = v1[5];
  uint64_t v6 = v1[6];
  unint64_t v7 = v1[7];
  sub_10001736C(v4, v5);
  sub_10001736C(v6, v7);
  sub_100016F9C(v6, v7);
  sub_10001736C(v4, v5);
  sub_1004DFE7C(v4, v5);
  if (v3)
  {
    uint64_t v31 = v3;
LABEL_50:
    unint64_t v124 = v5;
    uint64_t v125 = static os_log_type_t.error.getter(v8);
    if (qword_10099B520 != -1) {
      swift_once(&qword_10099B520, sub_1004DC610);
    }
    uint64_t v126 = qword_100A2AC90;
    uint64_t v127 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v128 = swift_allocObject(v127, 72LL, 7LL);
    *(_OWORD *)(v128 + 16) = xmmword_1007E67D0;
    *uint64_t v172 = v31;
    swift_errorRetain(v31);
    uint64_t v129 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v130 = String.init<A>(describing:)(v172, v129);
    uint64_t v132 = v131;
    *(void *)(v128 + 56) = &type metadata for String;
    *(void *)(v128 + 64) = sub_1000226F4();
    *(void *)(v128 + 32) = v130;
    *(void *)(v128 + 40) = v132;
    os_log(_:dso:log:_:_:)(v125, &_mh_execute_header, v126, "Error deriving advertisementKey: %@", 35LL, 2LL, v128);
    swift_bridgeObjectRelease();
    unint64_t v133 = sub_100117A8C();
    uint64_t v136 = swift_allocError(&type metadata for CryptoTokenError, v133, 0LL, 0LL);
    *uint64_t v134 = 0;
    swift_willThrow(v136);
    swift_errorRelease(v31);
    unint64_t v138 = v124;
    goto LABEL_53;
  }

  uint64_t v9 = v8;
  *uint64_t v2 = 57LL;
  uint64_t v10 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  uint64_t v11 = __DataStorage.init(length:)(57LL);
  if ((swift_isUniquelyReferenced_nonNull_native(v11) & 1) == 0)
  {
    uint64_t v12 = ((uint64_t (*)(void))__DataStorage._bytes.getter)();
    if (v12)
    {
      uint64_t v13 = v12;
      uint64_t v14 = __DataStorage._offset.getter();
      if (__OFSUB__(0LL, v14))
      {
LABEL_56:
        __break(1u);
        JUMPOUT(0x10010C860LL);
      }

      uint64_t v15 = v13 - v14;
    }

    else
    {
      uint64_t v15 = 0LL;
    }

    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v16 = __DataStorage.init(bytes:length:copy:deallocator:offset:)(v15, 57LL, 1LL, 0LL, 0LL, 0LL);
    swift_release(v11);
    uint64_t v11 = v16;
  }

  uint64_t v17 = ((uint64_t (*)(void))__DataStorage._bytes.getter)();
  if (!v17) {
    __break(1u);
  }
  uint64_t v18 = v17;
  uint64_t v19 = __DataStorage._offset.getter();
  if (__OFSUB__(0LL, v19))
  {
    __break(1u);
    goto LABEL_55;
  }

  uint64_t v20 = v18 - v19;
  __DataStorage._length.getter();
  uint64_t v21 = CCECCryptorExportKey(2LL, v20, v0 + 736, 0LL, v9);
  if ((_DWORD)v21)
  {
    int v32 = v21;
    unint64_t v181 = v5;
    uint64_t v33 = (int)v21;
    uint64_t v34 = static os_log_type_t.error.getter(v21);
    if (qword_10099B520 != -1) {
      swift_once(&qword_10099B520, sub_1004DC610);
    }
    uint64_t v35 = *(void *)(v0 + 952);
    uint64_t v36 = qword_100A2AC90;
    uint64_t v37 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v38 = swift_allocObject(v37, 72LL, 7LL);
    *(_OWORD *)(v38 + 16) = xmmword_1007E67D0;
    *(void *)(v38 + 56) = &type metadata for Int32;
    *(void *)(v38 + 64) = &protocol witness table for Int32;
    *(_DWORD *)(v38 + 32) = v32;
    os_log(_:dso:log:_:_:)(v34, &_mh_execute_header, v36, "Error running CCECCryptorExportKey. Code: %d.", v141);
    swift_bridgeObjectRelease();
    CryptoError.init(rawValue:)(v33);
    uint64_t v39 = type metadata accessor for CryptoError(0LL);
    uint64_t v40 = sub_100015C48( (unint64_t *)&qword_1009A1778,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for CryptoError,  (uint64_t)&protocol conformance descriptor for CryptoError);
    uint64_t v31 = swift_allocError(v39, v40, 0LL, 0LL);
    uint64_t v42 = v41;
    uint64_t v43 = *(void *)(v39 - 8);
    int v44 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v43 + 48))(v35, 1LL, v39);
    uint64_t v45 = *(void *)(v0 + 952);
    if (v44 == 1)
    {
      (*(void (**)(uint64_t, void, uint64_t))(v43 + 104))( v42,  enum case for CryptoError.unspecifiedError(_:),  v39);
      uint64_t v46 = sub_100015794(v45, &qword_1009A1760);
    }

    else
    {
      uint64_t v46 = (*(uint64_t (**)(uint64_t, void, uint64_t))(v43 + 32))(v42, *(void *)(v0 + 952), v39);
    }

    unint64_t v5 = v181;
    swift_willThrow(v46);
    uint64_t v8 = swift_release(v11);
    goto LABEL_50;
  }

  if ((*v2 & 0x8000000000000000LL) != 0)
  {
LABEL_55:
    __break(1u);
    goto LABEL_56;
  }

  if (*v2 >= 0x39) {
    size_t v22 = 57LL;
  }
  else {
    size_t v22 = *v2;
  }
  if (!v22)
  {
    swift_release(v11);
    CCECCryptorRelease(v9);
    sub_100016F9C(v4, v5);
    unint64_t v135 = sub_100117AD0();
    uint64_t v136 = swift_allocError(&type metadata for KeyRepresentableError, v135, 0LL, 0LL);
    *(void *)uint64_t v137 = 28LL;
    *(void *)(v137 + 8) = 0LL;
    *(_BYTE *)(v137 + 16) = 0;
    swift_willThrow(v136);
    unint64_t v138 = 0xC000000000000000LL;
    uint64_t v4 = 0LL;
    uint64_t v0 = v190;
LABEL_53:
    sub_100016F9C(v4, v138);
    v195[0] = 0LL;
    v195[1] = 0xE000000000000000LL;
    _StringGuts.grow(_:)(35LL);
    *(void *)(v0 + 616) = 0LL;
    *(void *)(v0 + 624) = 0xE000000000000000LL;
    v139._object = (void *)0x8000000100854640LL;
    v139._countAndFlagsBits = 0xD000000000000021LL;
    String.append(_:)(v139);
    *(void *)(v0 + 728) = v136;
    uint64_t v140 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    _print_unlocked<A, B>(_:_:)( v0 + 728,  v0 + 616,  v140,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  *(void *)(v0 + 616),  *(void *)(v0 + 624),  "searchpartyd/KeyRepresentable.swift",  35LL,  2LL,  256LL,  0);
  }

  if (v22 > 0xE)
  {
    uint64_t v23 = v11 | 0x4000000000000000LL;
    goto LABEL_24;
  }

  unint64_t v180 = v5;
  *(void *)(v0 + 638) = 0LL;
  *uint64_t v176 = 0LL;
  *(_BYTE *)(v0 + 646) = v22;
  uint64_t v24 = swift_retain();
  uint64_t v25 = __DataStorage._bytes.getter(v24);
  if (!v25)
  {
    size_t v22 = v22;
    __DataStorage._length.getter();
    uint64_t v29 = 0LL;
    goto LABEL_23;
  }

  uint64_t v26 = __DataStorage._offset.getter();
  uint64_t v28 = -v26;
  if (!__OFSUB__(0LL, v26))
  {
    __DataStorage._length.getter();
    memcpy(v176, (const void *)(v25 + v28), v22);
    uint64_t v29 = *(unsigned __int8 *)(v0 + 644);
    uint64_t v25 = *(unsigned __int8 *)(v0 + 645);
    size_t v22 = *(unsigned __int8 *)(v0 + 646);
LABEL_23:
    uint64_t v30 = *(unsigned int *)(v190 + 640);
    swift_release_n(v11, 2LL);
    uint64_t v23 = v30 | (v29 << 32) | (v25 << 40) | (v22 << 48);
    unint64_t v5 = v180;
LABEL_24:
    CCECCryptorRelease(v9);
    sub_100016F9C(v4, v5);
    __asm { BR              X9 }
  }

  __break(1u);
LABEL_58:
  unint64_t v27 = sub_1004C51E8(0, *(void *)(v27 + 16) + 1LL, 1, v27);
LABEL_36:
  unint64_t v77 = *(void *)(v27 + 16);
  unint64_t v76 = *(void *)(v27 + 24);
  if (v77 >= v76 >> 1) {
    unint64_t v27 = sub_1004C51E8(v76 > 1, v77 + 1, 1, v27);
  }
  uint64_t v78 = *(void (**)(uint64_t, uint64_t))(v0 + 1568);
  uint64_t v79 = *(void (**)(uint64_t, uint64_t))(v0 + 1440);
  uint64_t v80 = *(void *)(v0 + 1424);
  uint64_t v185 = *(void *)(v0 + 1296);
  uint64_t v174 = *(void *)(v0 + 1280);
  uint64_t v178 = *(void *)(v0 + 1288);
  uint64_t v167 = *(void *)(v0 + 1256);
  uint64_t v170 = *(void *)(v0 + 1272);
  uint64_t v161 = *(void *)(v0 + 1248);
  uint64_t v81 = *(void *)(v0 + 1216);
  uint64_t v187 = *(void *)(v0 + 1184);
  uint64_t v183 = *(void *)(v0 + 1128);
  uint64_t v82 = *(void *)(v0 + 1096);
  uint64_t v164 = *(void *)(v0 + 1088);
  uint64_t v158 = *(void *)(v0 + 1080);
  uint64_t v83 = *(void *)(v0 + 1056);
  uint64_t v84 = *(void *)(v0 + 920);
  uint64_t v85 = *(void *)(v0 + 904);
  uint64_t v86 = *(void *)(v0 + 896);
  *(void *)(v27 + 16) = v77 + 1;
  uint64_t v87 = v27
  unint64_t v88 = v27;
  sub_10002218C(v85, v87, type metadata accessor for NotifyMeRequest.Subscription);
  swift_release(v80);
  sub_100018C68(v84, type metadata accessor for NotifyMeRequest.Subscription);
  sub_100015794(v82, (uint64_t *)&unk_10099D720);
  v79(v161, v81);
  v78(v158, v83);
  v79(v167, v81);
  v78(v164, v83);
  v79(v170, v81);
  v79(v174, v81);
  v79(v178, v81);
  v79(v185, v81);
  sub_100015794(v183, (uint64_t *)&unk_1009AE460);
  sub_100018C68(v187, type metadata accessor for NotifyWhenFoundRecord);
  uint64_t v89 = *(void *)(v0 + 1320);
  uint64_t v90 = *(void *)(v0 + 1344) + 1LL;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v192);
  if (v90 == v89)
  {
    unint64_t v91 = v88;
    swift_bridgeObjectRelease();
    (*(void (**)(void, void))(v0 + 1440))(*(void *)(v0 + 1312), *(void *)(v0 + 1216));
    uint64_t v92 = *(void *)(v0 + 1304);
    uint64_t v93 = *(void *)(v0 + 1296);
    uint64_t v94 = *(void *)(v0 + 1288);
    uint64_t v95 = *(void *)(v0 + 1280);
    uint64_t v96 = *(void *)(v0 + 1272);
    uint64_t v97 = *(void *)(v0 + 1264);
    uint64_t v98 = *(void *)(v0 + 1256);
    uint64_t v99 = *(void *)(v0 + 1248);
    uint64_t v142 = *(void *)(v0 + 1240);
    uint64_t v143 = *(void *)(v0 + 1232);
    uint64_t v144 = *(void *)(v0 + 1208);
    uint64_t v145 = *(void *)(v0 + 1184);
    uint64_t v146 = *(void *)(v0 + 1168);
    uint64_t v147 = *(void *)(v0 + 1160);
    uint64_t v148 = *(void *)(v0 + 1128);
    uint64_t v149 = *(void *)(v0 + 1112);
    uint64_t v150 = *(void *)(v0 + 1104);
    uint64_t v151 = *(void *)(v0 + 1096);
    uint64_t v152 = *(void *)(v0 + 1088);
    uint64_t v153 = *(void *)(v0 + 1080);
    uint64_t v154 = *(void *)(v0 + 1072);
    uint64_t v155 = *(void *)(v0 + 1048);
    uint64_t v157 = *(void *)(v0 + 1040);
    uint64_t v159 = *(void *)(v0 + 1032);
    uint64_t v162 = *(void *)(v0 + 1024);
    uint64_t v165 = *(void *)(v0 + 1016);
    uint64_t v168 = *(void *)(v0 + 1000);
    uint64_t v171 = *(void *)(v0 + 992);
    uint64_t v175 = *(void *)(v0 + 976);
    uint64_t v179 = *(void *)(v0 + 952);
    uint64_t v184 = *(void *)(v0 + 944);
    uint64_t v186 = *(void *)(v0 + 920);
    uint64_t v188 = *(void *)(v0 + 912);
    uint64_t v191 = *(void *)(v0 + 904);
    uint64_t v193 = *(void *)(v0 + 880);
    swift_task_dealloc(*(void *)(v0 + 1312));
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v142);
    swift_task_dealloc(v143);
    swift_task_dealloc(v144);
    swift_task_dealloc(v145);
    swift_task_dealloc(v146);
    swift_task_dealloc(v147);
    swift_task_dealloc(v148);
    swift_task_dealloc(v149);
    swift_task_dealloc(v150);
    swift_task_dealloc(v151);
    swift_task_dealloc(v152);
    swift_task_dealloc(v153);
    swift_task_dealloc(v154);
    swift_task_dealloc(v155);
    swift_task_dealloc(v157);
    swift_task_dealloc(v159);
    swift_task_dealloc(v162);
    swift_task_dealloc(v165);
    swift_task_dealloc(v168);
    swift_task_dealloc(v171);
    swift_task_dealloc(v175);
    swift_task_dealloc(v179);
    swift_task_dealloc(v184);
    swift_task_dealloc(v186);
    swift_task_dealloc(v188);
    swift_task_dealloc(v191);
    swift_task_dealloc(v193);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v91);
  }

  else
  {
    uint64_t v101 = (void *)(v0 + 56);
    uint64_t v102 = *(void *)(v0 + 1344) + 1LL;
    *(void *)(v0 + 1352) = v88;
    *(void *)(v0 + 1344) = v102;
    *(void *)(v0 + 1336) = v156;
    uint64_t v103 = *(__int128 **)(v0 + 1208);
    uint64_t v104 = *(void *)(v0 + 1184);
    uint64_t v105 = (uint64_t)v103 + *(int *)(v0 + 1696);
    sub_10001581C( *(void *)(v0 + 864)
    + ((*(unsigned __int8 *)(v0 + 1700) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1700))
    + *(void *)(v0 + 1328) * v102,
      (uint64_t)v103,
      (uint64_t *)&unk_1009B14F0);
    sub_100012EC0(v103, (uint64_t)v192);
    sub_10002218C(v105, v104, type metadata accessor for NotifyWhenFoundRecord);
    if (qword_10099B118 != -1) {
      swift_once(&qword_10099B118, sub_1000F95A0);
    }
    uint64_t v106 = type metadata accessor for Logger(0LL);
    *(void *)(v0 + 1360) = v106;
    *(void *)(v0 + 1368) = sub_10000A720(v106, (uint64_t)qword_100A2A1C8);
    uint64_t v107 = sub_100013044((uint64_t)v192, v0 + 56);
    uint64_t v108 = (os_log_s *)Logger.logObject.getter(v107);
    os_log_type_t v109 = static os_log_type_t.default.getter(v108);
    if (os_log_type_enabled(v108, v109))
    {
      uint64_t v110 = v0 + 848;
      uint64_t v111 = v0 + 856;
      uint64_t v189 = v0 + 856;
      uint64_t v194 = v0 + 864;
      uint64_t v112 = *(void *)(v0 + 1168);
      uint64_t v113 = *(void *)(v190 + 1144);
      uint64_t v114 = *(void *)(v190 + 1136);
      uint64_t v115 = swift_slowAlloc(22LL, -1LL);
      uint64_t v116 = swift_slowAlloc(32LL, -1LL);
      v195[0] = v116;
      *(_DWORD *)uint64_t v115 = 141558275;
      *(void *)(v190 + 848) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v110, v111, v115 + 4, v115 + 12);
      *(_WORD *)(v115 + 12) = 2081;
      uint64_t v117 = *(void *)(v190 + 80);
      uint64_t v118 = *(void *)(v190 + 88);
      sub_100012ED8(v101, v117);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v118 + 8) + 8LL) + 32LL))(v117);
      uint64_t v119 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v120 = dispatch thunk of CustomStringConvertible.description.getter(v114, v119);
      unint64_t v122 = v121;
      uint64_t v123 = *(void (**)(uint64_t, uint64_t))(v113 + 8);
      uint64_t v0 = v190;
      v123(v112, v114);
      *(void *)(v190 + 856) = sub_1003F11D4(v120, v122, v195);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v189, v194, v115 + 14, v115 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v101);
      _os_log_impl( (void *)&_mh_execute_header,  v108,  v109,  "publishKeys for beacon: %{private,mask.hash}s",  (uint8_t *)v115,  0x16u);
      swift_arrayDestroy(v116, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v116, -1LL, -1LL);
      swift_slowDealloc(v115, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
    }

    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    *(void *)(v0 + 1376) = qword_100A2A710;
    return swift_task_switch(sub_100107560, 0LL, 0LL);
  }

uint64_t sub_10010C924()
{
  uint64_t v1 = *(void *)(v0 + 1488);
  uint64_t v106 = (void *)(v0 + 16);
  sub_100013044(v0 + 16, v0 + 456);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  uint64_t v103 = v3;
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v0 + 1448);
    unint64_t v66 = *(void (**)(uint64_t, uint64_t))(v0 + 1440);
    uint64_t v78 = *(void *)(v0 + 1424);
    uint64_t v98 = *(void *)(v0 + 1296);
    uint64_t v90 = *(void *)(v0 + 1280);
    uint64_t v93 = *(void *)(v0 + 1288);
    uint64_t v84 = *(void *)(v0 + 1256);
    uint64_t v87 = *(void *)(v0 + 1272);
    uint64_t v82 = *(void *)(v0 + 1216);
    uint64_t v101 = *(void *)(v0 + 1184);
    uint64_t v5 = *(void *)(v0 + 1168);
    uint64_t v6 = *(void *)(v0 + 1136);
    uint64_t v96 = *(void *)(v0 + 1128);
    uint64_t v80 = *(void *)(v0 + 1088);
    uint64_t v74 = *(void *)(v0 + 1064);
    uint64_t v76 = *(void *)(v0 + 1080);
    uint64_t v72 = *(void *)(v0 + 1056);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v64 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v70 = swift_slowAlloc(32LL, -1LL);
    v108[0] = v70;
    *(_DWORD *)uint64_t v7 = 141558531;
    *(void *)(v0 + 744) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 744, v0 + 752, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2081;
    uint64_t v8 = *(void *)(v0 + 480);
    uint64_t v9 = *(void *)(v0 + 488);
    sub_100012ED8((void *)(v0 + 456), v8);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v9 + 8) + 8LL) + 32LL))(v8);
    uint64_t v10 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter(v6, v10);
    unint64_t v13 = v12;
    v62(v5, v6);
    *(void *)(v0 + 752) = sub_1003F11D4(v11, v13, v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 752, v0 + 760, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 456));
    *(_WORD *)(v7 + 22) = 2114;
    swift_errorRetain(v1);
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 800) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 800, v0 + 808, v7 + 24, v7 + 32);
    *uint64_t v64 = v14;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl( (void *)&_mh_execute_header,  v103,  v4,  "Could not obtain keys for %{private,mask.hash}s - %{public}@",  (uint8_t *)v7,  0x20u);
    uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v64, 1LL, v15);
    swift_slowDealloc(v64, -1LL, -1LL);
    swift_arrayDestroy(v70, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v70, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);

    swift_release(v78);
    swift_errorRelease(v1);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
    v16(v76, v72);
    v66(v84, v82);
    v16(v80, v72);
    v66(v87, v82);
    v66(v90, v82);
    v66(v93, v82);
    v66(v98, v82);
  }

  else
  {
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v0 + 1440);
    uint64_t v18 = *(void *)(v0 + 1424);
    uint64_t v99 = *(void *)(v0 + 1296);
    uint64_t v91 = *(void *)(v0 + 1280);
    uint64_t v94 = *(void *)(v0 + 1288);
    uint64_t v88 = *(void *)(v0 + 1272);
    uint64_t v19 = *(void *)(v0 + 1256);
    uint64_t v20 = *(void *)(v0 + 1216);
    uint64_t v101 = *(void *)(v0 + 1184);
    uint64_t v96 = *(void *)(v0 + 1128);
    uint64_t v85 = *(void *)(v0 + 1088);
    uint64_t v21 = *(void *)(v0 + 1080);
    uint64_t v22 = *(void *)(v0 + 1064);
    uint64_t v23 = *(void *)(v0 + 1056);

    swift_release(v18);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 456));
    swift_errorRelease(v1);
    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v24(v21, v23);
    v17(v19, v20);
    v24(v85, v23);
    v17(v88, v20);
    v17(v91, v20);
    v17(v94, v20);
    v17(v99, v20);
  }

  sub_100015794(v96, (uint64_t *)&unk_1009AE460);
  sub_100018C68(v101, type metadata accessor for NotifyWhenFoundRecord);
  uint64_t v25 = *(void *)(v0 + 1352);
  uint64_t v26 = *(void *)(v0 + 1320);
  uint64_t v27 = *(void *)(v0 + 1344) + 1LL;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v106);
  if (v27 == v26)
  {
    uint64_t v56 = v25;
    swift_bridgeObjectRelease();
    (*(void (**)(void, void))(v0 + 1440))(*(void *)(v0 + 1312), *(void *)(v0 + 1216));
    uint64_t v28 = *(void *)(v0 + 1304);
    uint64_t v29 = *(void *)(v0 + 1296);
    uint64_t v30 = *(void *)(v0 + 1288);
    uint64_t v31 = *(void *)(v0 + 1280);
    uint64_t v32 = *(void *)(v0 + 1272);
    uint64_t v33 = *(void *)(v0 + 1264);
    uint64_t v34 = *(void *)(v0 + 1256);
    uint64_t v35 = *(void *)(v0 + 1248);
    uint64_t v36 = *(void *)(v0 + 1240);
    uint64_t v57 = *(void *)(v0 + 1232);
    uint64_t v58 = *(void *)(v0 + 1208);
    uint64_t v59 = *(void *)(v0 + 1184);
    uint64_t v60 = *(void *)(v0 + 1168);
    uint64_t v61 = *(void *)(v0 + 1160);
    uint64_t v63 = *(void *)(v0 + 1128);
    uint64_t v65 = *(void *)(v0 + 1112);
    uint64_t v67 = *(void *)(v0 + 1104);
    uint64_t v68 = *(void *)(v0 + 1096);
    uint64_t v69 = *(void *)(v0 + 1088);
    uint64_t v71 = *(void *)(v0 + 1080);
    uint64_t v73 = *(void *)(v0 + 1072);
    uint64_t v75 = *(void *)(v0 + 1048);
    uint64_t v77 = *(void *)(v0 + 1040);
    uint64_t v79 = *(void *)(v0 + 1032);
    uint64_t v81 = *(void *)(v0 + 1024);
    uint64_t v83 = *(void *)(v0 + 1016);
    uint64_t v86 = *(void *)(v0 + 1000);
    uint64_t v89 = *(void *)(v0 + 992);
    uint64_t v92 = *(void *)(v0 + 976);
    uint64_t v95 = *(void *)(v0 + 952);
    uint64_t v97 = *(void *)(v0 + 944);
    uint64_t v100 = *(void *)(v0 + 920);
    uint64_t v102 = *(void *)(v0 + 912);
    uint64_t v104 = *(void *)(v0 + 904);
    uint64_t v107 = *(void *)(v0 + 880);
    swift_task_dealloc(*(void *)(v0 + 1312));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v63);
    swift_task_dealloc(v65);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v71);
    swift_task_dealloc(v73);
    swift_task_dealloc(v75);
    swift_task_dealloc(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v81);
    swift_task_dealloc(v83);
    swift_task_dealloc(v86);
    swift_task_dealloc(v89);
    swift_task_dealloc(v92);
    swift_task_dealloc(v95);
    swift_task_dealloc(v97);
    swift_task_dealloc(v100);
    swift_task_dealloc(v102);
    swift_task_dealloc(v104);
    swift_task_dealloc(v107);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v56);
  }

  else
  {
    uint64_t v38 = *(void *)(v0 + 1344) + 1LL;
    *(void *)(v0 + 1352) = v25;
    *(void *)(v0 + 1344) = v38;
    *(void *)(v0 + 1336) = 0LL;
    uint64_t v39 = *(__int128 **)(v0 + 1208);
    uint64_t v40 = *(void *)(v0 + 1184);
    uint64_t v41 = (uint64_t)v39 + *(int *)(v0 + 1696);
    sub_10001581C( *(void *)(v0 + 864)
    + ((*(unsigned __int8 *)(v0 + 1700) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1700))
    + *(void *)(v0 + 1328) * v38,
      (uint64_t)v39,
      (uint64_t *)&unk_1009B14F0);
    sub_100012EC0(v39, (uint64_t)v106);
    sub_10002218C(v41, v40, type metadata accessor for NotifyWhenFoundRecord);
    if (qword_10099B118 != -1) {
      swift_once(&qword_10099B118, sub_1000F95A0);
    }
    uint64_t v42 = type metadata accessor for Logger(0LL);
    *(void *)(v0 + 1360) = v42;
    *(void *)(v0 + 1368) = sub_10000A720(v42, (uint64_t)qword_100A2A1C8);
    uint64_t v43 = sub_100013044((uint64_t)v106, v0 + 56);
    int v44 = (os_log_s *)Logger.logObject.getter(v43);
    os_log_type_t v45 = static os_log_type_t.default.getter(v44);
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = *(void *)(v0 + 1168);
      uint64_t v105 = *(void *)(v0 + 1144);
      uint64_t v47 = *(void *)(v0 + 1136);
      uint64_t v48 = swift_slowAlloc(22LL, -1LL);
      uint64_t v49 = swift_slowAlloc(32LL, -1LL);
      v108[0] = v49;
      *(_DWORD *)uint64_t v48 = 141558275;
      *(void *)(v0 + 848) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 848, v0 + 856, v48 + 4, v48 + 12);
      *(_WORD *)(v48 + 12) = 2081;
      uint64_t v51 = *(void *)(v0 + 80);
      uint64_t v50 = *(void *)(v0 + 88);
      sub_100012ED8((void *)(v0 + 56), v51);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v50 + 8) + 8LL) + 32LL))(v51);
      uint64_t v52 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter(v47, v52);
      unint64_t v55 = v54;
      (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v46, v47);
      *(void *)(v0 + 856) = sub_1003F11D4(v53, v55, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 856, v0 + 864, v48 + 14, v48 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
      _os_log_impl( (void *)&_mh_execute_header,  v44,  v45,  "publishKeys for beacon: %{private,mask.hash}s",  (uint8_t *)v48,  0x16u);
      swift_arrayDestroy(v49, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1LL, -1LL);
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
    }

    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    *(void *)(v0 + 1376) = qword_100A2A710;
    return swift_task_switch(sub_100107560, 0LL, 0LL);
  }

uint64_t sub_10010D308()
{
  uint64_t v1 = *(void *)(v0 + 1512);
  uint64_t v106 = (void *)(v0 + 16);
  sub_100013044(v0 + 16, v0 + 456);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  uint64_t v103 = v3;
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v0 + 1448);
    unint64_t v66 = *(void (**)(uint64_t, uint64_t))(v0 + 1440);
    uint64_t v78 = *(void *)(v0 + 1424);
    uint64_t v98 = *(void *)(v0 + 1296);
    uint64_t v90 = *(void *)(v0 + 1280);
    uint64_t v93 = *(void *)(v0 + 1288);
    uint64_t v84 = *(void *)(v0 + 1256);
    uint64_t v87 = *(void *)(v0 + 1272);
    uint64_t v82 = *(void *)(v0 + 1216);
    uint64_t v101 = *(void *)(v0 + 1184);
    uint64_t v5 = *(void *)(v0 + 1168);
    uint64_t v6 = *(void *)(v0 + 1136);
    uint64_t v96 = *(void *)(v0 + 1128);
    uint64_t v80 = *(void *)(v0 + 1088);
    uint64_t v74 = *(void *)(v0 + 1064);
    uint64_t v76 = *(void *)(v0 + 1080);
    uint64_t v72 = *(void *)(v0 + 1056);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v64 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v70 = swift_slowAlloc(32LL, -1LL);
    v108[0] = v70;
    *(_DWORD *)uint64_t v7 = 141558531;
    *(void *)(v0 + 744) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 744, v0 + 752, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2081;
    uint64_t v8 = *(void *)(v0 + 480);
    uint64_t v9 = *(void *)(v0 + 488);
    sub_100012ED8((void *)(v0 + 456), v8);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v9 + 8) + 8LL) + 32LL))(v8);
    uint64_t v10 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter(v6, v10);
    unint64_t v13 = v12;
    v62(v5, v6);
    *(void *)(v0 + 752) = sub_1003F11D4(v11, v13, v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 752, v0 + 760, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 456));
    *(_WORD *)(v7 + 22) = 2114;
    swift_errorRetain(v1);
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 800) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 800, v0 + 808, v7 + 24, v7 + 32);
    *uint64_t v64 = v14;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl( (void *)&_mh_execute_header,  v103,  v4,  "Could not obtain keys for %{private,mask.hash}s - %{public}@",  (uint8_t *)v7,  0x20u);
    uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v64, 1LL, v15);
    swift_slowDealloc(v64, -1LL, -1LL);
    swift_arrayDestroy(v70, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v70, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);

    swift_release(v78);
    swift_errorRelease(v1);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
    v16(v76, v72);
    v66(v84, v82);
    v16(v80, v72);
    v66(v87, v82);
    v66(v90, v82);
    v66(v93, v82);
    v66(v98, v82);
  }

  else
  {
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v0 + 1440);
    uint64_t v18 = *(void *)(v0 + 1424);
    uint64_t v99 = *(void *)(v0 + 1296);
    uint64_t v91 = *(void *)(v0 + 1280);
    uint64_t v94 = *(void *)(v0 + 1288);
    uint64_t v88 = *(void *)(v0 + 1272);
    uint64_t v19 = *(void *)(v0 + 1256);
    uint64_t v20 = *(void *)(v0 + 1216);
    uint64_t v101 = *(void *)(v0 + 1184);
    uint64_t v96 = *(void *)(v0 + 1128);
    uint64_t v85 = *(void *)(v0 + 1088);
    uint64_t v21 = *(void *)(v0 + 1080);
    uint64_t v22 = *(void *)(v0 + 1064);
    uint64_t v23 = *(void *)(v0 + 1056);

    swift_release(v18);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 456));
    swift_errorRelease(v1);
    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v24(v21, v23);
    v17(v19, v20);
    v24(v85, v23);
    v17(v88, v20);
    v17(v91, v20);
    v17(v94, v20);
    v17(v99, v20);
  }

  sub_100015794(v96, (uint64_t *)&unk_1009AE460);
  sub_100018C68(v101, type metadata accessor for NotifyWhenFoundRecord);
  uint64_t v25 = *(void *)(v0 + 1352);
  uint64_t v26 = *(void *)(v0 + 1320);
  uint64_t v27 = *(void *)(v0 + 1344) + 1LL;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v106);
  if (v27 == v26)
  {
    uint64_t v56 = v25;
    swift_bridgeObjectRelease();
    (*(void (**)(void, void))(v0 + 1440))(*(void *)(v0 + 1312), *(void *)(v0 + 1216));
    uint64_t v28 = *(void *)(v0 + 1304);
    uint64_t v29 = *(void *)(v0 + 1296);
    uint64_t v30 = *(void *)(v0 + 1288);
    uint64_t v31 = *(void *)(v0 + 1280);
    uint64_t v32 = *(void *)(v0 + 1272);
    uint64_t v33 = *(void *)(v0 + 1264);
    uint64_t v34 = *(void *)(v0 + 1256);
    uint64_t v35 = *(void *)(v0 + 1248);
    uint64_t v36 = *(void *)(v0 + 1240);
    uint64_t v57 = *(void *)(v0 + 1232);
    uint64_t v58 = *(void *)(v0 + 1208);
    uint64_t v59 = *(void *)(v0 + 1184);
    uint64_t v60 = *(void *)(v0 + 1168);
    uint64_t v61 = *(void *)(v0 + 1160);
    uint64_t v63 = *(void *)(v0 + 1128);
    uint64_t v65 = *(void *)(v0 + 1112);
    uint64_t v67 = *(void *)(v0 + 1104);
    uint64_t v68 = *(void *)(v0 + 1096);
    uint64_t v69 = *(void *)(v0 + 1088);
    uint64_t v71 = *(void *)(v0 + 1080);
    uint64_t v73 = *(void *)(v0 + 1072);
    uint64_t v75 = *(void *)(v0 + 1048);
    uint64_t v77 = *(void *)(v0 + 1040);
    uint64_t v79 = *(void *)(v0 + 1032);
    uint64_t v81 = *(void *)(v0 + 1024);
    uint64_t v83 = *(void *)(v0 + 1016);
    uint64_t v86 = *(void *)(v0 + 1000);
    uint64_t v89 = *(void *)(v0 + 992);
    uint64_t v92 = *(void *)(v0 + 976);
    uint64_t v95 = *(void *)(v0 + 952);
    uint64_t v97 = *(void *)(v0 + 944);
    uint64_t v100 = *(void *)(v0 + 920);
    uint64_t v102 = *(void *)(v0 + 912);
    uint64_t v104 = *(void *)(v0 + 904);
    uint64_t v107 = *(void *)(v0 + 880);
    swift_task_dealloc(*(void *)(v0 + 1312));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v63);
    swift_task_dealloc(v65);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v71);
    swift_task_dealloc(v73);
    swift_task_dealloc(v75);
    swift_task_dealloc(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v81);
    swift_task_dealloc(v83);
    swift_task_dealloc(v86);
    swift_task_dealloc(v89);
    swift_task_dealloc(v92);
    swift_task_dealloc(v95);
    swift_task_dealloc(v97);
    swift_task_dealloc(v100);
    swift_task_dealloc(v102);
    swift_task_dealloc(v104);
    swift_task_dealloc(v107);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v56);
  }

  else
  {
    uint64_t v38 = *(void *)(v0 + 1344) + 1LL;
    *(void *)(v0 + 1352) = v25;
    *(void *)(v0 + 1344) = v38;
    *(void *)(v0 + 1336) = 0LL;
    uint64_t v39 = *(__int128 **)(v0 + 1208);
    uint64_t v40 = *(void *)(v0 + 1184);
    uint64_t v41 = (uint64_t)v39 + *(int *)(v0 + 1696);
    sub_10001581C( *(void *)(v0 + 864)
    + ((*(unsigned __int8 *)(v0 + 1700) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1700))
    + *(void *)(v0 + 1328) * v38,
      (uint64_t)v39,
      (uint64_t *)&unk_1009B14F0);
    sub_100012EC0(v39, (uint64_t)v106);
    sub_10002218C(v41, v40, type metadata accessor for NotifyWhenFoundRecord);
    if (qword_10099B118 != -1) {
      swift_once(&qword_10099B118, sub_1000F95A0);
    }
    uint64_t v42 = type metadata accessor for Logger(0LL);
    *(void *)(v0 + 1360) = v42;
    *(void *)(v0 + 1368) = sub_10000A720(v42, (uint64_t)qword_100A2A1C8);
    uint64_t v43 = sub_100013044((uint64_t)v106, v0 + 56);
    int v44 = (os_log_s *)Logger.logObject.getter(v43);
    os_log_type_t v45 = static os_log_type_t.default.getter(v44);
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = *(void *)(v0 + 1168);
      uint64_t v105 = *(void *)(v0 + 1144);
      uint64_t v47 = *(void *)(v0 + 1136);
      uint64_t v48 = swift_slowAlloc(22LL, -1LL);
      uint64_t v49 = swift_slowAlloc(32LL, -1LL);
      v108[0] = v49;
      *(_DWORD *)uint64_t v48 = 141558275;
      *(void *)(v0 + 848) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 848, v0 + 856, v48 + 4, v48 + 12);
      *(_WORD *)(v48 + 12) = 2081;
      uint64_t v51 = *(void *)(v0 + 80);
      uint64_t v50 = *(void *)(v0 + 88);
      sub_100012ED8((void *)(v0 + 56), v51);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v50 + 8) + 8LL) + 32LL))(v51);
      uint64_t v52 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter(v47, v52);
      unint64_t v55 = v54;
      (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v46, v47);
      *(void *)(v0 + 856) = sub_1003F11D4(v53, v55, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 856, v0 + 864, v48 + 14, v48 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
      _os_log_impl( (void *)&_mh_execute_header,  v44,  v45,  "publishKeys for beacon: %{private,mask.hash}s",  (uint8_t *)v48,  0x16u);
      swift_arrayDestroy(v49, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1LL, -1LL);
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
    }

    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    *(void *)(v0 + 1376) = qword_100A2A710;
    return swift_task_switch(sub_100107560, 0LL, 0LL);
  }

uint64_t sub_10010DCEC()
{
  uint64_t v1 = *(void *)(v0 + 1520);
  uint64_t v106 = (void *)(v0 + 16);
  sub_100013044(v0 + 16, v0 + 456);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  uint64_t v103 = v3;
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v62 = *(void (**)(uint64_t, uint64_t))(v0 + 1448);
    unint64_t v66 = *(void (**)(uint64_t, uint64_t))(v0 + 1440);
    uint64_t v78 = *(void *)(v0 + 1424);
    uint64_t v98 = *(void *)(v0 + 1296);
    uint64_t v90 = *(void *)(v0 + 1280);
    uint64_t v93 = *(void *)(v0 + 1288);
    uint64_t v84 = *(void *)(v0 + 1256);
    uint64_t v87 = *(void *)(v0 + 1272);
    uint64_t v82 = *(void *)(v0 + 1216);
    uint64_t v101 = *(void *)(v0 + 1184);
    uint64_t v5 = *(void *)(v0 + 1168);
    uint64_t v6 = *(void *)(v0 + 1136);
    uint64_t v96 = *(void *)(v0 + 1128);
    uint64_t v80 = *(void *)(v0 + 1088);
    uint64_t v74 = *(void *)(v0 + 1064);
    uint64_t v76 = *(void *)(v0 + 1080);
    uint64_t v72 = *(void *)(v0 + 1056);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v64 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v70 = swift_slowAlloc(32LL, -1LL);
    v108[0] = v70;
    *(_DWORD *)uint64_t v7 = 141558531;
    *(void *)(v0 + 744) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 744, v0 + 752, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2081;
    uint64_t v8 = *(void *)(v0 + 480);
    uint64_t v9 = *(void *)(v0 + 488);
    sub_100012ED8((void *)(v0 + 456), v8);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v9 + 8) + 8LL) + 32LL))(v8);
    uint64_t v10 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter(v6, v10);
    unint64_t v13 = v12;
    v62(v5, v6);
    *(void *)(v0 + 752) = sub_1003F11D4(v11, v13, v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 752, v0 + 760, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 456));
    *(_WORD *)(v7 + 22) = 2114;
    swift_errorRetain(v1);
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 800) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 800, v0 + 808, v7 + 24, v7 + 32);
    *uint64_t v64 = v14;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl( (void *)&_mh_execute_header,  v103,  v4,  "Could not obtain keys for %{private,mask.hash}s - %{public}@",  (uint8_t *)v7,  0x20u);
    uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v64, 1LL, v15);
    swift_slowDealloc(v64, -1LL, -1LL);
    swift_arrayDestroy(v70, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v70, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);

    swift_release(v78);
    swift_errorRelease(v1);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v74 + 8);
    v16(v76, v72);
    v66(v84, v82);
    v16(v80, v72);
    v66(v87, v82);
    v66(v90, v82);
    v66(v93, v82);
    v66(v98, v82);
  }

  else
  {
    uint64_t v17 = *(void (**)(uint64_t, uint64_t))(v0 + 1440);
    uint64_t v18 = *(void *)(v0 + 1424);
    uint64_t v99 = *(void *)(v0 + 1296);
    uint64_t v91 = *(void *)(v0 + 1280);
    uint64_t v94 = *(void *)(v0 + 1288);
    uint64_t v88 = *(void *)(v0 + 1272);
    uint64_t v19 = *(void *)(v0 + 1256);
    uint64_t v20 = *(void *)(v0 + 1216);
    uint64_t v101 = *(void *)(v0 + 1184);
    uint64_t v96 = *(void *)(v0 + 1128);
    uint64_t v85 = *(void *)(v0 + 1088);
    uint64_t v21 = *(void *)(v0 + 1080);
    uint64_t v22 = *(void *)(v0 + 1064);
    uint64_t v23 = *(void *)(v0 + 1056);

    swift_release(v18);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 456));
    swift_errorRelease(v1);
    uint64_t v24 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
    v24(v21, v23);
    v17(v19, v20);
    v24(v85, v23);
    v17(v88, v20);
    v17(v91, v20);
    v17(v94, v20);
    v17(v99, v20);
  }

  sub_100015794(v96, (uint64_t *)&unk_1009AE460);
  sub_100018C68(v101, type metadata accessor for NotifyWhenFoundRecord);
  uint64_t v25 = *(void *)(v0 + 1352);
  uint64_t v26 = *(void *)(v0 + 1320);
  uint64_t v27 = *(void *)(v0 + 1344) + 1LL;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v106);
  if (v27 == v26)
  {
    uint64_t v56 = v25;
    swift_bridgeObjectRelease();
    (*(void (**)(void, void))(v0 + 1440))(*(void *)(v0 + 1312), *(void *)(v0 + 1216));
    uint64_t v28 = *(void *)(v0 + 1304);
    uint64_t v29 = *(void *)(v0 + 1296);
    uint64_t v30 = *(void *)(v0 + 1288);
    uint64_t v31 = *(void *)(v0 + 1280);
    uint64_t v32 = *(void *)(v0 + 1272);
    uint64_t v33 = *(void *)(v0 + 1264);
    uint64_t v34 = *(void *)(v0 + 1256);
    uint64_t v35 = *(void *)(v0 + 1248);
    uint64_t v36 = *(void *)(v0 + 1240);
    uint64_t v57 = *(void *)(v0 + 1232);
    uint64_t v58 = *(void *)(v0 + 1208);
    uint64_t v59 = *(void *)(v0 + 1184);
    uint64_t v60 = *(void *)(v0 + 1168);
    uint64_t v61 = *(void *)(v0 + 1160);
    uint64_t v63 = *(void *)(v0 + 1128);
    uint64_t v65 = *(void *)(v0 + 1112);
    uint64_t v67 = *(void *)(v0 + 1104);
    uint64_t v68 = *(void *)(v0 + 1096);
    uint64_t v69 = *(void *)(v0 + 1088);
    uint64_t v71 = *(void *)(v0 + 1080);
    uint64_t v73 = *(void *)(v0 + 1072);
    uint64_t v75 = *(void *)(v0 + 1048);
    uint64_t v77 = *(void *)(v0 + 1040);
    uint64_t v79 = *(void *)(v0 + 1032);
    uint64_t v81 = *(void *)(v0 + 1024);
    uint64_t v83 = *(void *)(v0 + 1016);
    uint64_t v86 = *(void *)(v0 + 1000);
    uint64_t v89 = *(void *)(v0 + 992);
    uint64_t v92 = *(void *)(v0 + 976);
    uint64_t v95 = *(void *)(v0 + 952);
    uint64_t v97 = *(void *)(v0 + 944);
    uint64_t v100 = *(void *)(v0 + 920);
    uint64_t v102 = *(void *)(v0 + 912);
    uint64_t v104 = *(void *)(v0 + 904);
    uint64_t v107 = *(void *)(v0 + 880);
    swift_task_dealloc(*(void *)(v0 + 1312));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v57);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v63);
    swift_task_dealloc(v65);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v71);
    swift_task_dealloc(v73);
    swift_task_dealloc(v75);
    swift_task_dealloc(v77);
    swift_task_dealloc(v79);
    swift_task_dealloc(v81);
    swift_task_dealloc(v83);
    swift_task_dealloc(v86);
    swift_task_dealloc(v89);
    swift_task_dealloc(v92);
    swift_task_dealloc(v95);
    swift_task_dealloc(v97);
    swift_task_dealloc(v100);
    swift_task_dealloc(v102);
    swift_task_dealloc(v104);
    swift_task_dealloc(v107);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v56);
  }

  else
  {
    uint64_t v38 = *(void *)(v0 + 1344) + 1LL;
    *(void *)(v0 + 1352) = v25;
    *(void *)(v0 + 1344) = v38;
    *(void *)(v0 + 1336) = 0LL;
    uint64_t v39 = *(__int128 **)(v0 + 1208);
    uint64_t v40 = *(void *)(v0 + 1184);
    uint64_t v41 = (uint64_t)v39 + *(int *)(v0 + 1696);
    sub_10001581C( *(void *)(v0 + 864)
    + ((*(unsigned __int8 *)(v0 + 1700) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1700))
    + *(void *)(v0 + 1328) * v38,
      (uint64_t)v39,
      (uint64_t *)&unk_1009B14F0);
    sub_100012EC0(v39, (uint64_t)v106);
    sub_10002218C(v41, v40, type metadata accessor for NotifyWhenFoundRecord);
    if (qword_10099B118 != -1) {
      swift_once(&qword_10099B118, sub_1000F95A0);
    }
    uint64_t v42 = type metadata accessor for Logger(0LL);
    *(void *)(v0 + 1360) = v42;
    *(void *)(v0 + 1368) = sub_10000A720(v42, (uint64_t)qword_100A2A1C8);
    uint64_t v43 = sub_100013044((uint64_t)v106, v0 + 56);
    int v44 = (os_log_s *)Logger.logObject.getter(v43);
    os_log_type_t v45 = static os_log_type_t.default.getter(v44);
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v46 = *(void *)(v0 + 1168);
      uint64_t v105 = *(void *)(v0 + 1144);
      uint64_t v47 = *(void *)(v0 + 1136);
      uint64_t v48 = swift_slowAlloc(22LL, -1LL);
      uint64_t v49 = swift_slowAlloc(32LL, -1LL);
      v108[0] = v49;
      *(_DWORD *)uint64_t v48 = 141558275;
      *(void *)(v0 + 848) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 848, v0 + 856, v48 + 4, v48 + 12);
      *(_WORD *)(v48 + 12) = 2081;
      uint64_t v51 = *(void *)(v0 + 80);
      uint64_t v50 = *(void *)(v0 + 88);
      sub_100012ED8((void *)(v0 + 56), v51);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v50 + 8) + 8LL) + 32LL))(v51);
      uint64_t v52 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter(v47, v52);
      unint64_t v55 = v54;
      (*(void (**)(uint64_t, uint64_t))(v105 + 8))(v46, v47);
      *(void *)(v0 + 856) = sub_1003F11D4(v53, v55, v108);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 856, v0 + 864, v48 + 14, v48 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
      _os_log_impl( (void *)&_mh_execute_header,  v44,  v45,  "publishKeys for beacon: %{private,mask.hash}s",  (uint8_t *)v48,  0x16u);
      swift_arrayDestroy(v49, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1LL, -1LL);
      swift_slowDealloc(v48, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
    }

    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    *(void *)(v0 + 1376) = qword_100A2A710;
    return swift_task_switch(sub_100107560, 0LL, 0LL);
  }

uint64_t sub_10010E6D0()
{
  uint64_t v1 = *(void *)(v0 + 1536);
  uint64_t v110 = (void *)(v0 + 16);
  uint64_t v105 = (void *)(v0 + 456);
  sub_100013044(v0 + 16, v0 + 456);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  uint64_t v107 = v3;
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v63 = *(void (**)(uint64_t, uint64_t))(v0 + 1448);
    uint64_t v67 = *(void (**)(uint64_t, uint64_t))(v0 + 1440);
    uint64_t v79 = *(void *)(v0 + 1424);
    uint64_t v99 = *(void *)(v0 + 1296);
    uint64_t v93 = *(void *)(v0 + 1288);
    uint64_t v87 = *(void *)(v0 + 1272);
    uint64_t v90 = *(void *)(v0 + 1280);
    uint64_t v83 = *(void *)(v0 + 1216);
    uint64_t v85 = *(void *)(v0 + 1256);
    uint64_t v102 = *(void *)(v0 + 1184);
    uint64_t v5 = *(void *)(v0 + 1168);
    uint64_t v6 = *(void *)(v0 + 1136);
    uint64_t v96 = *(void *)(v0 + 1128);
    uint64_t v81 = *(void *)(v0 + 1088);
    uint64_t v75 = *(void *)(v0 + 1064);
    uint64_t v77 = *(void *)(v0 + 1080);
    uint64_t v73 = *(void *)(v0 + 1056);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v65 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v71 = swift_slowAlloc(32LL, -1LL);
    v112[0] = v71;
    *(_DWORD *)uint64_t v7 = 141558531;
    *(void *)(v0 + 744) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 744, v0 + 752, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2081;
    uint64_t v8 = *(void *)(v0 + 480);
    uint64_t v9 = *(void *)(v0 + 488);
    sub_100012ED8(v105, v8);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v9 + 8) + 8LL) + 32LL))(v8);
    uint64_t v10 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter(v6, v10);
    unint64_t v13 = v12;
    v63(v5, v6);
    *(void *)(v0 + 752) = sub_1003F11D4(v11, v13, v112);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 752, v0 + 760, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v105);
    *(_WORD *)(v7 + 22) = 2114;
    swift_errorRetain(v1);
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 800) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 800, v0 + 808, v7 + 24, v7 + 32);
    *uint64_t v65 = v14;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl( (void *)&_mh_execute_header,  v107,  v4,  "Could not obtain keys for %{private,mask.hash}s - %{public}@",  (uint8_t *)v7,  0x20u);
    uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v65, 1LL, v15);
    swift_slowDealloc(v65, -1LL, -1LL);
    swift_arrayDestroy(v71, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v71, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);

    swift_release(v79);
    swift_errorRelease(v1);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t))(v75 + 8);
    v16(v77, v73);
    v67(v85, v83);
    v16(v81, v73);
    v67(v87, v83);
    v67(v90, v83);
    v67(v93, v83);
    v67(v99, v83);
    sub_100015794(v96, (uint64_t *)&unk_1009AE460);
    uint64_t v17 = v102;
  }

  else
  {
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v0 + 1440);
    uint64_t v19 = *(void *)(v0 + 1424);
    uint64_t v103 = *(void *)(v0 + 1296);
    uint64_t v94 = *(void *)(v0 + 1280);
    uint64_t v97 = *(void *)(v0 + 1288);
    uint64_t v91 = *(void *)(v0 + 1272);
    uint64_t v20 = *(void *)(v0 + 1256);
    uint64_t v21 = *(void *)(v0 + 1216);
    uint64_t v22 = *(void *)(v0 + 1184);
    uint64_t v100 = *(void *)(v0 + 1128);
    uint64_t v88 = *(void *)(v0 + 1088);
    uint64_t v23 = *(void *)(v0 + 1080);
    uint64_t v24 = *(void *)(v0 + 1064);
    uint64_t v25 = *(void *)(v0 + 1056);

    swift_release(v19);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v105);
    swift_errorRelease(v1);
    uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v24 + 8);
    v26(v23, v25);
    v18(v20, v21);
    v26(v88, v25);
    v18(v91, v21);
    v18(v94, v21);
    v18(v97, v21);
    v18(v103, v21);
    sub_100015794(v100, (uint64_t *)&unk_1009AE460);
    uint64_t v17 = v22;
  }

  sub_100018C68(v17, type metadata accessor for NotifyWhenFoundRecord);
  uint64_t v27 = *(void *)(v0 + 1352);
  uint64_t v28 = *(void *)(v0 + 1320);
  uint64_t v29 = *(void *)(v0 + 1344) + 1LL;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v110);
  if (v29 == v28)
  {
    uint64_t v58 = v27;
    swift_bridgeObjectRelease();
    (*(void (**)(void, void))(v0 + 1440))(*(void *)(v0 + 1312), *(void *)(v0 + 1216));
    uint64_t v30 = *(void *)(v0 + 1304);
    uint64_t v31 = *(void *)(v0 + 1296);
    uint64_t v32 = *(void *)(v0 + 1288);
    uint64_t v33 = *(void *)(v0 + 1280);
    uint64_t v34 = *(void *)(v0 + 1272);
    uint64_t v35 = *(void *)(v0 + 1264);
    uint64_t v36 = *(void *)(v0 + 1256);
    uint64_t v37 = *(void *)(v0 + 1248);
    uint64_t v38 = *(void *)(v0 + 1240);
    uint64_t v59 = *(void *)(v0 + 1232);
    uint64_t v60 = *(void *)(v0 + 1208);
    uint64_t v61 = *(void *)(v0 + 1184);
    uint64_t v62 = *(void *)(v0 + 1168);
    uint64_t v64 = *(void *)(v0 + 1160);
    uint64_t v66 = *(void *)(v0 + 1128);
    uint64_t v68 = *(void *)(v0 + 1112);
    uint64_t v69 = *(void *)(v0 + 1104);
    uint64_t v70 = *(void *)(v0 + 1096);
    uint64_t v72 = *(void *)(v0 + 1088);
    uint64_t v74 = *(void *)(v0 + 1080);
    uint64_t v76 = *(void *)(v0 + 1072);
    uint64_t v78 = *(void *)(v0 + 1048);
    uint64_t v80 = *(void *)(v0 + 1040);
    uint64_t v82 = *(void *)(v0 + 1032);
    uint64_t v84 = *(void *)(v0 + 1024);
    uint64_t v86 = *(void *)(v0 + 1016);
    uint64_t v89 = *(void *)(v0 + 1000);
    uint64_t v92 = *(void *)(v0 + 992);
    uint64_t v95 = *(void *)(v0 + 976);
    uint64_t v98 = *(void *)(v0 + 952);
    uint64_t v101 = *(void *)(v0 + 944);
    uint64_t v104 = *(void *)(v0 + 920);
    uint64_t v106 = *(void *)(v0 + 912);
    uint64_t v108 = *(void *)(v0 + 904);
    uint64_t v111 = *(void *)(v0 + 880);
    swift_task_dealloc(*(void *)(v0 + 1312));
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v64);
    swift_task_dealloc(v66);
    swift_task_dealloc(v68);
    swift_task_dealloc(v69);
    swift_task_dealloc(v70);
    swift_task_dealloc(v72);
    swift_task_dealloc(v74);
    swift_task_dealloc(v76);
    swift_task_dealloc(v78);
    swift_task_dealloc(v80);
    swift_task_dealloc(v82);
    swift_task_dealloc(v84);
    swift_task_dealloc(v86);
    swift_task_dealloc(v89);
    swift_task_dealloc(v92);
    swift_task_dealloc(v95);
    swift_task_dealloc(v98);
    swift_task_dealloc(v101);
    swift_task_dealloc(v104);
    swift_task_dealloc(v106);
    swift_task_dealloc(v108);
    swift_task_dealloc(v111);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v58);
  }

  else
  {
    uint64_t v40 = *(void *)(v0 + 1344) + 1LL;
    *(void *)(v0 + 1352) = v27;
    *(void *)(v0 + 1344) = v40;
    *(void *)(v0 + 1336) = 0LL;
    uint64_t v41 = *(__int128 **)(v0 + 1208);
    uint64_t v42 = *(void *)(v0 + 1184);
    uint64_t v43 = (uint64_t)v41 + *(int *)(v0 + 1696);
    sub_10001581C( *(void *)(v0 + 864)
    + ((*(unsigned __int8 *)(v0 + 1700) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1700))
    + *(void *)(v0 + 1328) * v40,
      (uint64_t)v41,
      (uint64_t *)&unk_1009B14F0);
    sub_100012EC0(v41, (uint64_t)v110);
    sub_10002218C(v43, v42, type metadata accessor for NotifyWhenFoundRecord);
    if (qword_10099B118 != -1) {
      swift_once(&qword_10099B118, sub_1000F95A0);
    }
    uint64_t v44 = type metadata accessor for Logger(0LL);
    *(void *)(v0 + 1360) = v44;
    *(void *)(v0 + 1368) = sub_10000A720(v44, (uint64_t)qword_100A2A1C8);
    uint64_t v45 = sub_100013044((uint64_t)v110, v0 + 56);
    uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v47 = static os_log_type_t.default.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = *(void *)(v0 + 1168);
      uint64_t v109 = *(void *)(v0 + 1144);
      uint64_t v49 = *(void *)(v0 + 1136);
      uint64_t v50 = swift_slowAlloc(22LL, -1LL);
      uint64_t v51 = swift_slowAlloc(32LL, -1LL);
      v112[0] = v51;
      *(_DWORD *)uint64_t v50 = 141558275;
      *(void *)(v0 + 848) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 848, v0 + 856, v50 + 4, v50 + 12);
      *(_WORD *)(v50 + 12) = 2081;
      uint64_t v53 = *(void *)(v0 + 80);
      uint64_t v52 = *(void *)(v0 + 88);
      sub_100012ED8((void *)(v0 + 56), v53);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v52 + 8) + 8LL) + 32LL))(v53);
      uint64_t v54 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter(v49, v54);
      unint64_t v57 = v56;
      (*(void (**)(uint64_t, uint64_t))(v109 + 8))(v48, v49);
      *(void *)(v0 + 856) = sub_1003F11D4(v55, v57, v112);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 856, v0 + 864, v50 + 14, v50 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
      _os_log_impl( (void *)&_mh_execute_header,  v46,  v47,  "publishKeys for beacon: %{private,mask.hash}s",  (uint8_t *)v50,  0x16u);
      swift_arrayDestroy(v51, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v51, -1LL, -1LL);
      swift_slowDealloc(v50, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
    }

    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    *(void *)(v0 + 1376) = qword_100A2A710;
    return swift_task_switch(sub_100107560, 0LL, 0LL);
  }

uint64_t sub_10010F0E4()
{
  uint64_t v1 = (void *)(v0 + 16);
  *(_OWORD *)(v0 + 1632) = 0u;
  uint64_t v2 = *(unsigned int *)(v0 + 1704);
  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  *(void *)(v0 + 520) = My;
  *(void *)(v0 + 528) = sub_100015C48( (unint64_t *)&qword_1009B04D0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  os_log_type_t v4 = sub_10000A7C8((void *)(v0 + 496));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(My - 8) + 104LL))(v4, v2, My);
  LOBYTE(v2) = isFeatureEnabled(_:)(v0 + 496);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 496));
  if ((v2 & 1) != 0)
  {
    uint64_t v5 = *(void *)(v0 + 992);
    uint64_t v6 = *(void *)(v0 + 968);
    uint64_t v7 = *(void *)(v0 + 960);
    sub_100013044(v0 + 16, v0 + 416);
    uint64_t v8 = sub_100004AEC(&qword_1009B0530);
    int v9 = swift_dynamicCast(v5, v0 + 416, v8, v7, 6LL);
    uint64_t v10 = *(void (**)(void, uint64_t, uint64_t, void))(v6 + 56);
    uint64_t v11 = *(void *)(v0 + 992);
    if (v9)
    {
      uint64_t v12 = *(void *)(v0 + 976);
      v10(*(void *)(v0 + 992), 0LL, 1LL, *(void *)(v0 + 960));
      sub_10002218C(v11, v12, type metadata accessor for OwnedBeaconRecord);
      unint64_t v13 = (void *)swift_task_alloc(dword_1009A14FC);
      *(void *)(v0 + 1648) = v13;
      void *v13 = v0;
      v13[1] = sub_10010B4BC;
      uint64_t v14 = *(void *)(v0 + 872);
      v13[15] = v14;
      uint64_t v15 = sub_1000F9BD8;
      return swift_task_switch(v15, v14, 0LL);
    }

    v10(*(void *)(v0 + 992), 1LL, 1LL, *(void *)(v0 + 960));
    sub_100015794(v11, (uint64_t *)&unk_1009A9C30);
    if (qword_10099BA30 != -1) {
      swift_once(&qword_10099BA30, sub_100795FD8);
    }
    sub_10000A720(*(void *)(v0 + 1360), (uint64_t)qword_100A2B7D8);
    uint64_t v16 = sub_100013044(v0 + 16, v0 + 376);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      uint64_t v136 = *(void (**)(uint64_t, uint64_t))(v0 + 1448);
      uint64_t v19 = *(void *)(v0 + 1168);
      uint64_t v20 = *(void *)(v0 + 1136);
      uint64_t v21 = swift_slowAlloc(22LL, -1LL);
      v145[0] = swift_slowAlloc(32LL, -1LL);
      uint64_t v22 = v145[0];
      *(_DWORD *)uint64_t v21 = 141558275;
      *(void *)(v0 + 664) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 664, v0 + 672, v21 + 4, v21 + 12);
      *(_WORD *)(v21 + 12) = 2081;
      uint64_t v23 = *(void *)(v0 + 400);
      uint64_t v24 = *(void *)(v0 + 408);
      sub_100012ED8((void *)(v0 + 376), v23);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v24 + 8) + 8LL) + 32LL))(v23);
      uint64_t v25 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v20, v25);
      unint64_t v28 = v27;
      v136(v19, v20);
      *(void *)(v0 + 672) = sub_1003F11D4(v26, v28, v145);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 672, v0 + 680, v21 + 14, v21 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 376));
      _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Not an OwnedBeaconRecord not including the owned device keys %{private,mask.hash}s.",  (uint8_t *)v21,  0x16u);
      swift_arrayDestroy(v22, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v29 = v22;
      uint64_t v1 = (void *)(v0 + 16);
      swift_slowDealloc(v29, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 376));
    }
  }

  uint64_t v127 = *(void *)(v0 + 1560);
  uint64_t v130 = *(void *)(v0 + 1632);
  uint64_t v133 = *(void *)(v0 + 1552);
  uint64_t v137 = *(void *)(v0 + 1640);
  uint64_t v30 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 1464);
  uint64_t v143 = v1;
  uint64_t v31 = *(void *)(v0 + 1216);
  uint64_t v32 = *(void *)(v0 + 1184);
  uint64_t v33 = *(void *)(v0 + 1176);
  uint64_t v34 = *(void *)(v0 + 1144);
  uint64_t v35 = *(void *)(v0 + 1112);
  uint64_t v118 = *(void *)(v0 + 1136);
  uint64_t v121 = *(void *)(v0 + 1096);
  uint64_t v36 = *(void *)(v0 + 920);
  uint64_t v124 = *(void *)(v0 + 912);
  uint64_t v37 = *(int **)(v0 + 888);
  uint64_t v38 = *(void *)(v0 + 880);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 1456))(v35, *(void *)(v0 + 1248), v31);
  v30(v35, 0LL, 1LL, v31);
  uint64_t v39 = v32 + *(int *)(v33 + 20);
  uint64_t v41 = *(void *)(v0 + 40);
  uint64_t v40 = *(void *)(v0 + 48);
  sub_100012ED8(v143, v41);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v40 + 8) + 8LL) + 32LL))(v41);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v34 + 56))(v38, 0LL, 1LL, v118);
  sub_10001581C(v121, v36 + v37[9], (uint64_t *)&unk_10099D720);
  sub_100015750(v35, v36, (uint64_t *)&unk_10099D720);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v34 + 16))(v36 + v37[5], v39, v118);
  *(_BYTE *)(v36 + v37[6]) = 1;
  sub_100015750(v38, v36 + v37[7], &qword_10099D8A0);
  *(void *)(v36 + v37[8]) = v127;
  uint64_t v42 = (void *)(v36 + v37[10]);
  void *v42 = v130;
  v42[1] = v137;
  *(void *)(v36 + v37[11]) = v133;
  *(void *)(v36 + v37[12]) = _swiftEmptyArrayStorage;
  uint64_t v43 = sub_10001DC4C(v36, v124, type metadata accessor for NotifyMeRequest.Subscription);
  uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
  os_log_type_t v45 = static os_log_type_t.default.getter(v44);
  BOOL v46 = os_log_type_enabled(v44, v45);
  uint64_t v47 = *(void *)(v0 + 912);
  if (v46)
  {
    uint64_t v48 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v49 = swift_slowAlloc(32LL, -1LL);
    v145[0] = v49;
    *(_DWORD *)uint64_t v48 = 136315138;
    uint64_t v50 = sub_100154744();
    *(void *)(v0 + 720) = sub_1003F11D4(v50, v51, v145);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 720, v0 + 728, v48 + 4, v48 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68(v47, type metadata accessor for NotifyMeRequest.Subscription);
    _os_log_impl((void *)&_mh_execute_header, v44, v45, "publishKeys subscription: %s.", v48, 0xCu);
    swift_arrayDestroy(v49, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1LL, -1LL);
    swift_slowDealloc(v48, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(*(void *)(v0 + 912), type metadata accessor for NotifyMeRequest.Subscription);
  }

  uint64_t v52 = *(void *)(v0 + 1352);
  sub_10001DC4C(*(void *)(v0 + 920), *(void *)(v0 + 904), type metadata accessor for NotifyMeRequest.Subscription);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v52);
  unint64_t v54 = *(void *)(v0 + 1352);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v54 = sub_1004C51E8(0, *(void *)(v54 + 16) + 1LL, 1, v54);
  }
  unint64_t v56 = *(void *)(v54 + 16);
  unint64_t v55 = *(void *)(v54 + 24);
  unint64_t v57 = v56 + 1;
  if (v56 >= v55 >> 1)
  {
    uint64_t v97 = sub_1004C51E8(v55 > 1, v56 + 1, 1, v54);
    unint64_t v57 = v56 + 1;
    unint64_t v54 = v97;
  }

  unint64_t v115 = v54;
  uint64_t v58 = *(void (**)(uint64_t, uint64_t))(v0 + 1568);
  uint64_t v59 = *(void (**)(uint64_t, uint64_t))(v0 + 1440);
  uint64_t v60 = *(void *)(v0 + 1424);
  uint64_t v138 = *(void *)(v0 + 1296);
  uint64_t v128 = *(void *)(v0 + 1280);
  uint64_t v131 = *(void *)(v0 + 1288);
  uint64_t v125 = *(void *)(v0 + 1272);
  uint64_t v122 = *(void *)(v0 + 1256);
  uint64_t v116 = *(void *)(v0 + 1248);
  uint64_t v61 = *(void *)(v0 + 1216);
  uint64_t v140 = *(void *)(v0 + 1184);
  uint64_t v134 = *(void *)(v0 + 1128);
  uint64_t v62 = *(void *)(v0 + 1096);
  uint64_t v119 = *(void *)(v0 + 1088);
  uint64_t v63 = *(void *)(v0 + 1080);
  uint64_t v64 = *(void *)(v0 + 1056);
  uint64_t v65 = *(void *)(v0 + 920);
  uint64_t v66 = *(void *)(v0 + 904);
  uint64_t v67 = *(void *)(v0 + 896);
  *(void *)(v54 + 16) = v57;
  sub_10002218C( v66,  v54 + ((*(unsigned __int8 *)(v67 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v67 + 80))
  + *(void *)(v67 + 72) * v56,
    type metadata accessor for NotifyMeRequest.Subscription);
  swift_release(v60);
  sub_100018C68(v65, type metadata accessor for NotifyMeRequest.Subscription);
  sub_100015794(v62, (uint64_t *)&unk_10099D720);
  v59(v116, v61);
  v58(v63, v64);
  v59(v122, v61);
  v58(v119, v64);
  v59(v125, v61);
  v59(v128, v61);
  v59(v131, v61);
  v59(v138, v61);
  sub_100015794(v134, (uint64_t *)&unk_1009AE460);
  sub_100018C68(v140, type metadata accessor for NotifyWhenFoundRecord);
  uint64_t v68 = *(void *)(v0 + 1320);
  uint64_t v69 = *(void *)(v0 + 1344) + 1LL;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v143);
  if (v69 == v68)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(void, void))(v0 + 1440))(*(void *)(v0 + 1312), *(void *)(v0 + 1216));
    uint64_t v70 = *(void *)(v0 + 1304);
    uint64_t v71 = *(void *)(v0 + 1296);
    uint64_t v72 = *(void *)(v0 + 1288);
    uint64_t v73 = *(void *)(v0 + 1280);
    uint64_t v74 = *(void *)(v0 + 1272);
    uint64_t v75 = *(void *)(v0 + 1264);
    uint64_t v76 = *(void *)(v0 + 1256);
    uint64_t v77 = *(void *)(v0 + 1248);
    uint64_t v98 = *(void *)(v0 + 1240);
    uint64_t v99 = *(void *)(v0 + 1232);
    uint64_t v100 = *(void *)(v0 + 1208);
    uint64_t v101 = *(void *)(v0 + 1184);
    uint64_t v102 = *(void *)(v0 + 1168);
    uint64_t v103 = *(void *)(v0 + 1160);
    uint64_t v104 = *(void *)(v0 + 1128);
    uint64_t v105 = *(void *)(v0 + 1112);
    uint64_t v106 = *(void *)(v0 + 1104);
    uint64_t v107 = *(void *)(v0 + 1096);
    uint64_t v108 = *(void *)(v0 + 1088);
    uint64_t v109 = *(void *)(v0 + 1080);
    uint64_t v110 = *(void *)(v0 + 1072);
    uint64_t v111 = *(void *)(v0 + 1048);
    uint64_t v112 = *(void *)(v0 + 1040);
    uint64_t v113 = *(void *)(v0 + 1032);
    uint64_t v114 = *(void *)(v0 + 1024);
    uint64_t v117 = *(void *)(v0 + 1016);
    uint64_t v120 = *(void *)(v0 + 1000);
    uint64_t v123 = *(void *)(v0 + 992);
    uint64_t v126 = *(void *)(v0 + 976);
    uint64_t v129 = *(void *)(v0 + 952);
    uint64_t v132 = *(void *)(v0 + 944);
    uint64_t v135 = *(void *)(v0 + 920);
    uint64_t v139 = *(void *)(v0 + 912);
    uint64_t v141 = *(void *)(v0 + 904);
    uint64_t v144 = *(void *)(v0 + 880);
    swift_task_dealloc(*(void *)(v0 + 1312));
    swift_task_dealloc(v70);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v73);
    swift_task_dealloc(v74);
    swift_task_dealloc(v75);
    swift_task_dealloc(v76);
    swift_task_dealloc(v77);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v103);
    swift_task_dealloc(v104);
    swift_task_dealloc(v105);
    swift_task_dealloc(v106);
    swift_task_dealloc(v107);
    swift_task_dealloc(v108);
    swift_task_dealloc(v109);
    swift_task_dealloc(v110);
    swift_task_dealloc(v111);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    swift_task_dealloc(v114);
    swift_task_dealloc(v117);
    swift_task_dealloc(v120);
    swift_task_dealloc(v123);
    swift_task_dealloc(v126);
    swift_task_dealloc(v129);
    swift_task_dealloc(v132);
    swift_task_dealloc(v135);
    swift_task_dealloc(v139);
    swift_task_dealloc(v141);
    swift_task_dealloc(v144);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v115);
  }

  uint64_t v79 = *(void *)(v0 + 1344) + 1LL;
  *(void *)(v0 + 1352) = v115;
  *(void *)(v0 + 1344) = v79;
  *(void *)(v0 + 1336) = 0LL;
  uint64_t v80 = *(__int128 **)(v0 + 1208);
  uint64_t v81 = *(void *)(v0 + 1184);
  uint64_t v82 = (uint64_t)v80 + *(int *)(v0 + 1696);
  sub_10001581C( *(void *)(v0 + 864)
  + ((*(unsigned __int8 *)(v0 + 1700) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1700))
  + *(void *)(v0 + 1328) * v79,
    (uint64_t)v80,
    (uint64_t *)&unk_1009B14F0);
  sub_100012EC0(v80, (uint64_t)v143);
  sub_10002218C(v82, v81, type metadata accessor for NotifyWhenFoundRecord);
  if (qword_10099B118 != -1) {
    swift_once(&qword_10099B118, sub_1000F95A0);
  }
  uint64_t v83 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 1360) = v83;
  *(void *)(v0 + 1368) = sub_10000A720(v83, (uint64_t)qword_100A2A1C8);
  uint64_t v84 = sub_100013044((uint64_t)v143, v0 + 56);
  uint64_t v85 = (os_log_s *)Logger.logObject.getter(v84);
  os_log_type_t v86 = static os_log_type_t.default.getter(v85);
  if (os_log_type_enabled(v85, v86))
  {
    uint64_t v87 = *(void *)(v0 + 1168);
    uint64_t v142 = *(void *)(v0 + 1144);
    uint64_t v88 = *(void *)(v0 + 1136);
    uint64_t v89 = swift_slowAlloc(22LL, -1LL);
    uint64_t v90 = swift_slowAlloc(32LL, -1LL);
    v145[0] = v90;
    *(_DWORD *)uint64_t v89 = 141558275;
    *(void *)(v0 + 848) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 848, v0 + 856, v89 + 4, v89 + 12);
    *(_WORD *)(v89 + 12) = 2081;
    uint64_t v92 = *(void *)(v0 + 80);
    uint64_t v91 = *(void *)(v0 + 88);
    sub_100012ED8((void *)(v0 + 56), v92);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v91 + 8) + 8LL) + 32LL))(v92);
    uint64_t v93 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v94 = dispatch thunk of CustomStringConvertible.description.getter(v88, v93);
    unint64_t v96 = v95;
    (*(void (**)(uint64_t, uint64_t))(v142 + 8))(v87, v88);
    *(void *)(v0 + 856) = sub_1003F11D4(v94, v96, v145);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 856, v0 + 864, v89 + 14, v89 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
    _os_log_impl( (void *)&_mh_execute_header,  v85,  v86,  "publishKeys for beacon: %{private,mask.hash}s",  (uint8_t *)v89,  0x16u);
    swift_arrayDestroy(v90, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v90, -1LL, -1LL);
    swift_slowDealloc(v89, -1LL, -1LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
  }

  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  *(void *)(v0 + 1376) = qword_100A2A710;
  uint64_t v15 = sub_100107560;
  uint64_t v14 = 0LL;
  return swift_task_switch(v15, v14, 0LL);
}

uint64_t sub_10010FE4C()
{
  uint64_t v1 = *(void *)(v0 + 1664);
  if (qword_10099BA30 != -1) {
    swift_once(&qword_10099BA30, sub_100795FD8);
  }
  sub_10000A720(*(void *)(v0 + 1360), (uint64_t)qword_100A2B7D8);
  uint64_t v134 = (void *)(v0 + 16);
  sub_100013044(v0 + 16, v0 + 296);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v112 = *(void (**)(uint64_t, uint64_t))(v0 + 1448);
    uint64_t v5 = *(void *)(v0 + 1168);
    uint64_t v6 = *(void *)(v0 + 1136);
    uint64_t v130 = *(void *)(v0 + 976);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v119 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v126 = swift_slowAlloc(32LL, -1LL);
    v136[0] = v126;
    *(_DWORD *)uint64_t v7 = 141558531;
    *(void *)(v0 + 688) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 688, v0 + 696, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2081;
    uint64_t v9 = *(void *)(v0 + 320);
    uint64_t v8 = *(void *)(v0 + 328);
    sub_100012ED8((void *)(v0 + 296), v9);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v8 + 8) + 8LL) + 32LL))(v9);
    uint64_t v10 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter(v6, v10);
    unint64_t v13 = v12;
    v112(v5, v6);
    *(void *)(v0 + 696) = sub_1003F11D4(v11, v13, v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 696, v0 + 704, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 296));
    *(_WORD *)(v7 + 22) = 2114;
    swift_errorRetain(v1);
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 704) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 704, v0 + 712, v7 + 24, v7 + 32);
    *uint64_t v119 = v14;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "Unable to get ownedDevice keys for %{private,mask.hash}s error: %{public}@.",  (uint8_t *)v7,  0x20u);
    uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v119, 1LL, v15);
    swift_slowDealloc(v119, -1LL, -1LL);
    swift_arrayDestroy(v126, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v126, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);

    swift_errorRelease(v1);
    uint64_t v16 = v130;
  }

  else
  {
    uint64_t v17 = *(void *)(v0 + 976);

    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 296));
    swift_errorRelease(v1);
    uint64_t v16 = v17;
  }

  sub_100018C68(v16, type metadata accessor for OwnedBeaconRecord);
  uint64_t v116 = *(void *)(v0 + 1560);
  uint64_t v120 = *(void *)(v0 + 1632);
  uint64_t v123 = *(void *)(v0 + 1552);
  uint64_t v127 = *(void *)(v0 + 1640);
  os_log_type_t v18 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 1464);
  uint64_t v19 = *(void *)(v0 + 1216);
  uint64_t v20 = *(void *)(v0 + 1184);
  uint64_t v21 = *(void *)(v0 + 1176);
  uint64_t v22 = *(void *)(v0 + 1144);
  uint64_t v23 = *(void *)(v0 + 1112);
  uint64_t v106 = *(void *)(v0 + 1136);
  uint64_t v109 = *(void *)(v0 + 1096);
  uint64_t v24 = *(void *)(v0 + 920);
  uint64_t v113 = *(void *)(v0 + 912);
  uint64_t v25 = *(int **)(v0 + 888);
  uint64_t v26 = *(void *)(v0 + 880);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 1456))(v23, *(void *)(v0 + 1248), v19);
  v18(v23, 0LL, 1LL, v19);
  uint64_t v27 = v20 + *(int *)(v21 + 20);
  uint64_t v28 = *(void *)(v0 + 40);
  uint64_t v29 = *(void *)(v0 + 48);
  sub_100012ED8(v134, v28);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v29 + 8) + 8LL) + 32LL))(v28);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v26, 0LL, 1LL, v106);
  sub_10001581C(v109, v24 + v25[9], (uint64_t *)&unk_10099D720);
  sub_100015750(v23, v24, (uint64_t *)&unk_10099D720);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v24 + v25[5], v27, v106);
  *(_BYTE *)(v24 + v25[6]) = 1;
  sub_100015750(v26, v24 + v25[7], &qword_10099D8A0);
  *(void *)(v24 + v25[8]) = v116;
  uint64_t v30 = (void *)(v24 + v25[10]);
  void *v30 = v120;
  v30[1] = v127;
  *(void *)(v24 + v25[11]) = v123;
  *(void *)(v24 + v25[12]) = _swiftEmptyArrayStorage;
  uint64_t v31 = sub_10001DC4C(v24, v113, type metadata accessor for NotifyMeRequest.Subscription);
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.default.getter(v32);
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v35 = *(void *)(v0 + 912);
  if (v34)
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v37 = swift_slowAlloc(32LL, -1LL);
    v136[0] = v37;
    *(_DWORD *)uint64_t v36 = 136315138;
    uint64_t v38 = sub_100154744();
    *(void *)(v0 + 720) = sub_1003F11D4(v38, v39, v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 720, v0 + 728, v36 + 4, v36 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68(v35, type metadata accessor for NotifyMeRequest.Subscription);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "publishKeys subscription: %s.", v36, 0xCu);
    swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_slowDealloc(v36, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(*(void *)(v0 + 912), type metadata accessor for NotifyMeRequest.Subscription);
  }

  uint64_t v40 = *(void *)(v0 + 1352);
  sub_10001DC4C(*(void *)(v0 + 920), *(void *)(v0 + 904), type metadata accessor for NotifyMeRequest.Subscription);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v40);
  unint64_t v42 = *(void *)(v0 + 1352);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v42 = sub_1004C51E8(0, *(void *)(v42 + 16) + 1LL, 1, v42);
  }
  unint64_t v44 = *(void *)(v42 + 16);
  unint64_t v43 = *(void *)(v42 + 24);
  unint64_t v45 = v44 + 1;
  if (v44 >= v43 >> 1)
  {
    uint64_t v85 = sub_1004C51E8(v43 > 1, v44 + 1, 1, v42);
    unint64_t v45 = v44 + 1;
    unint64_t v42 = v85;
  }

  unint64_t v103 = v42;
  BOOL v46 = *(void (**)(uint64_t, uint64_t))(v0 + 1568);
  uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v0 + 1440);
  uint64_t v48 = *(void *)(v0 + 1424);
  uint64_t v128 = *(void *)(v0 + 1296);
  uint64_t v117 = *(void *)(v0 + 1280);
  uint64_t v121 = *(void *)(v0 + 1288);
  uint64_t v114 = *(void *)(v0 + 1272);
  uint64_t v110 = *(void *)(v0 + 1256);
  uint64_t v104 = *(void *)(v0 + 1248);
  uint64_t v49 = *(void *)(v0 + 1216);
  uint64_t v131 = *(void *)(v0 + 1184);
  uint64_t v124 = *(void *)(v0 + 1128);
  uint64_t v50 = *(void *)(v0 + 1096);
  uint64_t v107 = *(void *)(v0 + 1088);
  uint64_t v51 = *(void *)(v0 + 1080);
  uint64_t v52 = *(void *)(v0 + 1056);
  uint64_t v53 = *(void *)(v0 + 920);
  uint64_t v54 = *(void *)(v0 + 904);
  uint64_t v55 = *(void *)(v0 + 896);
  *(void *)(v42 + 16) = v45;
  sub_10002218C( v54,  v42 + ((*(unsigned __int8 *)(v55 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))
  + *(void *)(v55 + 72) * v44,
    type metadata accessor for NotifyMeRequest.Subscription);
  swift_release(v48);
  sub_100018C68(v53, type metadata accessor for NotifyMeRequest.Subscription);
  sub_100015794(v50, (uint64_t *)&unk_10099D720);
  v47(v104, v49);
  v46(v51, v52);
  v47(v110, v49);
  v46(v107, v52);
  v47(v114, v49);
  v47(v117, v49);
  v47(v121, v49);
  v47(v128, v49);
  sub_100015794(v124, (uint64_t *)&unk_1009AE460);
  sub_100018C68(v131, type metadata accessor for NotifyWhenFoundRecord);
  uint64_t v56 = *(void *)(v0 + 1320);
  uint64_t v57 = *(void *)(v0 + 1344) + 1LL;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v134);
  if (v57 == v56)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(void, void))(v0 + 1440))(*(void *)(v0 + 1312), *(void *)(v0 + 1216));
    uint64_t v58 = *(void *)(v0 + 1304);
    uint64_t v59 = *(void *)(v0 + 1296);
    uint64_t v60 = *(void *)(v0 + 1288);
    uint64_t v61 = *(void *)(v0 + 1280);
    uint64_t v62 = *(void *)(v0 + 1272);
    uint64_t v63 = *(void *)(v0 + 1264);
    uint64_t v64 = *(void *)(v0 + 1256);
    uint64_t v65 = *(void *)(v0 + 1248);
    uint64_t v86 = *(void *)(v0 + 1240);
    uint64_t v87 = *(void *)(v0 + 1232);
    uint64_t v88 = *(void *)(v0 + 1208);
    uint64_t v89 = *(void *)(v0 + 1184);
    uint64_t v90 = *(void *)(v0 + 1168);
    uint64_t v91 = *(void *)(v0 + 1160);
    uint64_t v92 = *(void *)(v0 + 1128);
    uint64_t v93 = *(void *)(v0 + 1112);
    uint64_t v94 = *(void *)(v0 + 1104);
    uint64_t v95 = *(void *)(v0 + 1096);
    uint64_t v96 = *(void *)(v0 + 1088);
    uint64_t v97 = *(void *)(v0 + 1080);
    uint64_t v98 = *(void *)(v0 + 1072);
    uint64_t v99 = *(void *)(v0 + 1048);
    uint64_t v100 = *(void *)(v0 + 1040);
    uint64_t v101 = *(void *)(v0 + 1032);
    uint64_t v102 = *(void *)(v0 + 1024);
    uint64_t v105 = *(void *)(v0 + 1016);
    uint64_t v108 = *(void *)(v0 + 1000);
    uint64_t v111 = *(void *)(v0 + 992);
    uint64_t v115 = *(void *)(v0 + 976);
    uint64_t v118 = *(void *)(v0 + 952);
    uint64_t v122 = *(void *)(v0 + 944);
    uint64_t v125 = *(void *)(v0 + 920);
    uint64_t v129 = *(void *)(v0 + 912);
    uint64_t v132 = *(void *)(v0 + 904);
    uint64_t v135 = *(void *)(v0 + 880);
    swift_task_dealloc(*(void *)(v0 + 1312));
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v105);
    swift_task_dealloc(v108);
    swift_task_dealloc(v111);
    swift_task_dealloc(v115);
    swift_task_dealloc(v118);
    swift_task_dealloc(v122);
    swift_task_dealloc(v125);
    swift_task_dealloc(v129);
    swift_task_dealloc(v132);
    swift_task_dealloc(v135);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v103);
  }

  else
  {
    uint64_t v67 = *(void *)(v0 + 1344) + 1LL;
    *(void *)(v0 + 1352) = v103;
    *(void *)(v0 + 1344) = v67;
    *(void *)(v0 + 1336) = 0LL;
    uint64_t v68 = *(__int128 **)(v0 + 1208);
    uint64_t v69 = *(void *)(v0 + 1184);
    uint64_t v70 = (uint64_t)v68 + *(int *)(v0 + 1696);
    sub_10001581C( *(void *)(v0 + 864)
    + ((*(unsigned __int8 *)(v0 + 1700) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1700))
    + *(void *)(v0 + 1328) * v67,
      (uint64_t)v68,
      (uint64_t *)&unk_1009B14F0);
    sub_100012EC0(v68, (uint64_t)v134);
    sub_10002218C(v70, v69, type metadata accessor for NotifyWhenFoundRecord);
    if (qword_10099B118 != -1) {
      swift_once(&qword_10099B118, sub_1000F95A0);
    }
    uint64_t v71 = type metadata accessor for Logger(0LL);
    *(void *)(v0 + 1360) = v71;
    *(void *)(v0 + 1368) = sub_10000A720(v71, (uint64_t)qword_100A2A1C8);
    uint64_t v72 = sub_100013044((uint64_t)v134, v0 + 56);
    uint64_t v73 = (os_log_s *)Logger.logObject.getter(v72);
    os_log_type_t v74 = static os_log_type_t.default.getter(v73);
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v75 = *(void *)(v0 + 1168);
      uint64_t v133 = *(void *)(v0 + 1144);
      uint64_t v76 = *(void *)(v0 + 1136);
      uint64_t v77 = swift_slowAlloc(22LL, -1LL);
      uint64_t v78 = swift_slowAlloc(32LL, -1LL);
      v136[0] = v78;
      *(_DWORD *)uint64_t v77 = 141558275;
      *(void *)(v0 + 848) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 848, v0 + 856, v77 + 4, v77 + 12);
      *(_WORD *)(v77 + 12) = 2081;
      uint64_t v80 = *(void *)(v0 + 80);
      uint64_t v79 = *(void *)(v0 + 88);
      sub_100012ED8((void *)(v0 + 56), v80);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v79 + 8) + 8LL) + 32LL))(v80);
      uint64_t v81 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter(v76, v81);
      unint64_t v84 = v83;
      (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v75, v76);
      *(void *)(v0 + 856) = sub_1003F11D4(v82, v84, v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 856, v0 + 864, v77 + 14, v77 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
      _os_log_impl( (void *)&_mh_execute_header,  v73,  v74,  "publishKeys for beacon: %{private,mask.hash}s",  (uint8_t *)v77,  0x16u);
      swift_arrayDestroy(v78, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v78, -1LL, -1LL);
      swift_slowDealloc(v77, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
    }

    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    *(void *)(v0 + 1376) = qword_100A2A710;
    return swift_task_switch(sub_100107560, 0LL, 0LL);
  }

uint64_t sub_100110B4C()
{
  uint64_t v1 = *(void *)(v0 + 1688);
  if (qword_10099BA30 != -1) {
    swift_once(&qword_10099BA30, sub_100795FD8);
  }
  sub_10000A720(*(void *)(v0 + 1360), (uint64_t)qword_100A2B7D8);
  uint64_t v134 = (void *)(v0 + 16);
  sub_100013044(v0 + 16, v0 + 296);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v112 = *(void (**)(uint64_t, uint64_t))(v0 + 1448);
    uint64_t v5 = *(void *)(v0 + 1168);
    uint64_t v6 = *(void *)(v0 + 1136);
    uint64_t v130 = *(void *)(v0 + 976);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v119 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v126 = swift_slowAlloc(32LL, -1LL);
    v136[0] = v126;
    *(_DWORD *)uint64_t v7 = 141558531;
    *(void *)(v0 + 688) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 688, v0 + 696, v7 + 4, v7 + 12);
    *(_WORD *)(v7 + 12) = 2081;
    uint64_t v9 = *(void *)(v0 + 320);
    uint64_t v8 = *(void *)(v0 + 328);
    sub_100012ED8((void *)(v0 + 296), v9);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v8 + 8) + 8LL) + 32LL))(v9);
    uint64_t v10 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v11 = dispatch thunk of CustomStringConvertible.description.getter(v6, v10);
    unint64_t v13 = v12;
    v112(v5, v6);
    *(void *)(v0 + 696) = sub_1003F11D4(v11, v13, v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 696, v0 + 704, v7 + 14, v7 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 296));
    *(_WORD *)(v7 + 22) = 2114;
    swift_errorRetain(v1);
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 704) = v14;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 704, v0 + 712, v7 + 24, v7 + 32);
    *uint64_t v119 = v14;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "Unable to get ownedDevice keys for %{private,mask.hash}s error: %{public}@.",  (uint8_t *)v7,  0x20u);
    uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v119, 1LL, v15);
    swift_slowDealloc(v119, -1LL, -1LL);
    swift_arrayDestroy(v126, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v126, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);

    swift_errorRelease(v1);
    uint64_t v16 = v130;
  }

  else
  {
    uint64_t v17 = *(void *)(v0 + 976);

    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 296));
    swift_errorRelease(v1);
    uint64_t v16 = v17;
  }

  sub_100018C68(v16, type metadata accessor for OwnedBeaconRecord);
  uint64_t v116 = *(void *)(v0 + 1560);
  uint64_t v120 = *(void *)(v0 + 1632);
  uint64_t v123 = *(void *)(v0 + 1552);
  uint64_t v127 = *(void *)(v0 + 1640);
  os_log_type_t v18 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 1464);
  uint64_t v19 = *(void *)(v0 + 1216);
  uint64_t v20 = *(void *)(v0 + 1184);
  uint64_t v21 = *(void *)(v0 + 1176);
  uint64_t v22 = *(void *)(v0 + 1144);
  uint64_t v23 = *(void *)(v0 + 1112);
  uint64_t v106 = *(void *)(v0 + 1136);
  uint64_t v109 = *(void *)(v0 + 1096);
  uint64_t v24 = *(void *)(v0 + 920);
  uint64_t v113 = *(void *)(v0 + 912);
  uint64_t v25 = *(int **)(v0 + 888);
  uint64_t v26 = *(void *)(v0 + 880);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 1456))(v23, *(void *)(v0 + 1248), v19);
  v18(v23, 0LL, 1LL, v19);
  uint64_t v27 = v20 + *(int *)(v21 + 20);
  uint64_t v28 = *(void *)(v0 + 40);
  uint64_t v29 = *(void *)(v0 + 48);
  sub_100012ED8(v134, v28);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v29 + 8) + 8LL) + 32LL))(v28);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v22 + 56))(v26, 0LL, 1LL, v106);
  sub_10001581C(v109, v24 + v25[9], (uint64_t *)&unk_10099D720);
  sub_100015750(v23, v24, (uint64_t *)&unk_10099D720);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v24 + v25[5], v27, v106);
  *(_BYTE *)(v24 + v25[6]) = 1;
  sub_100015750(v26, v24 + v25[7], &qword_10099D8A0);
  *(void *)(v24 + v25[8]) = v116;
  uint64_t v30 = (void *)(v24 + v25[10]);
  void *v30 = v120;
  v30[1] = v127;
  *(void *)(v24 + v25[11]) = v123;
  *(void *)(v24 + v25[12]) = _swiftEmptyArrayStorage;
  uint64_t v31 = sub_10001DC4C(v24, v113, type metadata accessor for NotifyMeRequest.Subscription);
  uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
  os_log_type_t v33 = static os_log_type_t.default.getter(v32);
  BOOL v34 = os_log_type_enabled(v32, v33);
  uint64_t v35 = *(void *)(v0 + 912);
  if (v34)
  {
    uint64_t v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v37 = swift_slowAlloc(32LL, -1LL);
    v136[0] = v37;
    *(_DWORD *)uint64_t v36 = 136315138;
    uint64_t v38 = sub_100154744();
    *(void *)(v0 + 720) = sub_1003F11D4(v38, v39, v136);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 720, v0 + 728, v36 + 4, v36 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68(v35, type metadata accessor for NotifyMeRequest.Subscription);
    _os_log_impl((void *)&_mh_execute_header, v32, v33, "publishKeys subscription: %s.", v36, 0xCu);
    swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_slowDealloc(v36, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(*(void *)(v0 + 912), type metadata accessor for NotifyMeRequest.Subscription);
  }

  uint64_t v40 = *(void *)(v0 + 1352);
  sub_10001DC4C(*(void *)(v0 + 920), *(void *)(v0 + 904), type metadata accessor for NotifyMeRequest.Subscription);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v40);
  unint64_t v42 = *(void *)(v0 + 1352);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    unint64_t v42 = sub_1004C51E8(0, *(void *)(v42 + 16) + 1LL, 1, v42);
  }
  unint64_t v44 = *(void *)(v42 + 16);
  unint64_t v43 = *(void *)(v42 + 24);
  unint64_t v45 = v44 + 1;
  if (v44 >= v43 >> 1)
  {
    uint64_t v85 = sub_1004C51E8(v43 > 1, v44 + 1, 1, v42);
    unint64_t v45 = v44 + 1;
    unint64_t v42 = v85;
  }

  unint64_t v103 = v42;
  BOOL v46 = *(void (**)(uint64_t, uint64_t))(v0 + 1568);
  uint64_t v47 = *(void (**)(uint64_t, uint64_t))(v0 + 1440);
  uint64_t v48 = *(void *)(v0 + 1424);
  uint64_t v128 = *(void *)(v0 + 1296);
  uint64_t v117 = *(void *)(v0 + 1280);
  uint64_t v121 = *(void *)(v0 + 1288);
  uint64_t v114 = *(void *)(v0 + 1272);
  uint64_t v110 = *(void *)(v0 + 1256);
  uint64_t v104 = *(void *)(v0 + 1248);
  uint64_t v49 = *(void *)(v0 + 1216);
  uint64_t v131 = *(void *)(v0 + 1184);
  uint64_t v124 = *(void *)(v0 + 1128);
  uint64_t v50 = *(void *)(v0 + 1096);
  uint64_t v107 = *(void *)(v0 + 1088);
  uint64_t v51 = *(void *)(v0 + 1080);
  uint64_t v52 = *(void *)(v0 + 1056);
  uint64_t v53 = *(void *)(v0 + 920);
  uint64_t v54 = *(void *)(v0 + 904);
  uint64_t v55 = *(void *)(v0 + 896);
  *(void *)(v42 + 16) = v45;
  sub_10002218C( v54,  v42 + ((*(unsigned __int8 *)(v55 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v55 + 80))
  + *(void *)(v55 + 72) * v44,
    type metadata accessor for NotifyMeRequest.Subscription);
  swift_release(v48);
  sub_100018C68(v53, type metadata accessor for NotifyMeRequest.Subscription);
  sub_100015794(v50, (uint64_t *)&unk_10099D720);
  v47(v104, v49);
  v46(v51, v52);
  v47(v110, v49);
  v46(v107, v52);
  v47(v114, v49);
  v47(v117, v49);
  v47(v121, v49);
  v47(v128, v49);
  sub_100015794(v124, (uint64_t *)&unk_1009AE460);
  sub_100018C68(v131, type metadata accessor for NotifyWhenFoundRecord);
  uint64_t v56 = *(void *)(v0 + 1320);
  uint64_t v57 = *(void *)(v0 + 1344) + 1LL;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v134);
  if (v57 == v56)
  {
    swift_bridgeObjectRelease();
    (*(void (**)(void, void))(v0 + 1440))(*(void *)(v0 + 1312), *(void *)(v0 + 1216));
    uint64_t v58 = *(void *)(v0 + 1304);
    uint64_t v59 = *(void *)(v0 + 1296);
    uint64_t v60 = *(void *)(v0 + 1288);
    uint64_t v61 = *(void *)(v0 + 1280);
    uint64_t v62 = *(void *)(v0 + 1272);
    uint64_t v63 = *(void *)(v0 + 1264);
    uint64_t v64 = *(void *)(v0 + 1256);
    uint64_t v65 = *(void *)(v0 + 1248);
    uint64_t v86 = *(void *)(v0 + 1240);
    uint64_t v87 = *(void *)(v0 + 1232);
    uint64_t v88 = *(void *)(v0 + 1208);
    uint64_t v89 = *(void *)(v0 + 1184);
    uint64_t v90 = *(void *)(v0 + 1168);
    uint64_t v91 = *(void *)(v0 + 1160);
    uint64_t v92 = *(void *)(v0 + 1128);
    uint64_t v93 = *(void *)(v0 + 1112);
    uint64_t v94 = *(void *)(v0 + 1104);
    uint64_t v95 = *(void *)(v0 + 1096);
    uint64_t v96 = *(void *)(v0 + 1088);
    uint64_t v97 = *(void *)(v0 + 1080);
    uint64_t v98 = *(void *)(v0 + 1072);
    uint64_t v99 = *(void *)(v0 + 1048);
    uint64_t v100 = *(void *)(v0 + 1040);
    uint64_t v101 = *(void *)(v0 + 1032);
    uint64_t v102 = *(void *)(v0 + 1024);
    uint64_t v105 = *(void *)(v0 + 1016);
    uint64_t v108 = *(void *)(v0 + 1000);
    uint64_t v111 = *(void *)(v0 + 992);
    uint64_t v115 = *(void *)(v0 + 976);
    uint64_t v118 = *(void *)(v0 + 952);
    uint64_t v122 = *(void *)(v0 + 944);
    uint64_t v125 = *(void *)(v0 + 920);
    uint64_t v129 = *(void *)(v0 + 912);
    uint64_t v132 = *(void *)(v0 + 904);
    uint64_t v135 = *(void *)(v0 + 880);
    swift_task_dealloc(*(void *)(v0 + 1312));
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v61);
    swift_task_dealloc(v62);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v86);
    swift_task_dealloc(v87);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v91);
    swift_task_dealloc(v92);
    swift_task_dealloc(v93);
    swift_task_dealloc(v94);
    swift_task_dealloc(v95);
    swift_task_dealloc(v96);
    swift_task_dealloc(v97);
    swift_task_dealloc(v98);
    swift_task_dealloc(v99);
    swift_task_dealloc(v100);
    swift_task_dealloc(v101);
    swift_task_dealloc(v102);
    swift_task_dealloc(v105);
    swift_task_dealloc(v108);
    swift_task_dealloc(v111);
    swift_task_dealloc(v115);
    swift_task_dealloc(v118);
    swift_task_dealloc(v122);
    swift_task_dealloc(v125);
    swift_task_dealloc(v129);
    swift_task_dealloc(v132);
    swift_task_dealloc(v135);
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v103);
  }

  else
  {
    uint64_t v67 = *(void *)(v0 + 1344) + 1LL;
    *(void *)(v0 + 1352) = v103;
    *(void *)(v0 + 1344) = v67;
    *(void *)(v0 + 1336) = 0LL;
    uint64_t v68 = *(__int128 **)(v0 + 1208);
    uint64_t v69 = *(void *)(v0 + 1184);
    uint64_t v70 = (uint64_t)v68 + *(int *)(v0 + 1696);
    sub_10001581C( *(void *)(v0 + 864)
    + ((*(unsigned __int8 *)(v0 + 1700) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 1700))
    + *(void *)(v0 + 1328) * v67,
      (uint64_t)v68,
      (uint64_t *)&unk_1009B14F0);
    sub_100012EC0(v68, (uint64_t)v134);
    sub_10002218C(v70, v69, type metadata accessor for NotifyWhenFoundRecord);
    if (qword_10099B118 != -1) {
      swift_once(&qword_10099B118, sub_1000F95A0);
    }
    uint64_t v71 = type metadata accessor for Logger(0LL);
    *(void *)(v0 + 1360) = v71;
    *(void *)(v0 + 1368) = sub_10000A720(v71, (uint64_t)qword_100A2A1C8);
    uint64_t v72 = sub_100013044((uint64_t)v134, v0 + 56);
    uint64_t v73 = (os_log_s *)Logger.logObject.getter(v72);
    os_log_type_t v74 = static os_log_type_t.default.getter(v73);
    if (os_log_type_enabled(v73, v74))
    {
      uint64_t v75 = *(void *)(v0 + 1168);
      uint64_t v133 = *(void *)(v0 + 1144);
      uint64_t v76 = *(void *)(v0 + 1136);
      uint64_t v77 = swift_slowAlloc(22LL, -1LL);
      uint64_t v78 = swift_slowAlloc(32LL, -1LL);
      v136[0] = v78;
      *(_DWORD *)uint64_t v77 = 141558275;
      *(void *)(v0 + 848) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 848, v0 + 856, v77 + 4, v77 + 12);
      *(_WORD *)(v77 + 12) = 2081;
      uint64_t v80 = *(void *)(v0 + 80);
      uint64_t v79 = *(void *)(v0 + 88);
      sub_100012ED8((void *)(v0 + 56), v80);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v79 + 8) + 8LL) + 32LL))(v80);
      uint64_t v81 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter(v76, v81);
      unint64_t v84 = v83;
      (*(void (**)(uint64_t, uint64_t))(v133 + 8))(v75, v76);
      *(void *)(v0 + 856) = sub_1003F11D4(v82, v84, v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 856, v0 + 864, v77 + 14, v77 + 22);
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
      _os_log_impl( (void *)&_mh_execute_header,  v73,  v74,  "publishKeys for beacon: %{private,mask.hash}s",  (uint8_t *)v77,  0x16u);
      swift_arrayDestroy(v78, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v78, -1LL, -1LL);
      swift_slowDealloc(v77, -1LL, -1LL);
    }

    else
    {
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 56));
    }

    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    *(void *)(v0 + 1376) = qword_100A2A710;
    return swift_task_switch(sub_100107560, 0LL, 0LL);
  }

uint64_t sub_100111854@<X0>(uint64_t (*a1)(uint64_t a1)@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v32 - v9;
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_1009A5990);
  __chkstk_darwin(v11);
  unint64_t v13 = (unint64_t)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B300 != -1) {
    goto LABEL_22;
  }
  while (1)
  {
    uint64_t v14 = qword_100A2A6C8;
    BOOL v34 = objc_autoreleasePoolPush();
    uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009AF790);
    OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, v14, v15);
    uint64_t v16 = v38;
    if (!v38[2] || (unint64_t v17 = sub_10030D124((uint64_t)a1), (v18 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      uint64_t v23 = _swiftEmptyArrayStorage;
      goto LABEL_18;
    }

    uint64_t v19 = *(void *)(v16[7] + 8 * v17);
    swift_bridgeObjectRetain(v19);
    swift_bridgeObjectRelease();
    uint64_t v20 = sub_1002FE5F8(v19);
    swift_bridgeObjectRelease();
    sub_1002FFE1C((uint64_t)v20);
    uint64_t v22 = v21;
    swift_release(v20);
    uint64_t v23 = _swiftEmptyArrayStorage;
    uint64_t v38 = _swiftEmptyArrayStorage;
    uint64_t v37 = *(void *)(v22 + 16);
    if (!v37) {
      break;
    }
    unint64_t v32 = v13;
    uint64_t v33 = a2;
    unint64_t v13 = 0LL;
    a1 = type metadata accessor for BeaconObservation;
    uint64_t v35 = v4;
    uint64_t v36 = v5;
    while (v13 < *(void *)(v22 + 16))
    {
      unint64_t v24 = (*(unsigned __int8 *)(v5 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
      a2 = *(void *)(v5 + 72);
      sub_10001DC4C(v22 + v24 + a2 * v13, (uint64_t)v10, type metadata accessor for BeaconObservation);
      if (v10[*(int *)(v4 + 24)])
      {
        sub_100018C68((uint64_t)v10, type metadata accessor for BeaconObservation);
      }

      else
      {
        sub_10002218C((uint64_t)v10, (uint64_t)v8, type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native(v23) & 1) == 0) {
          sub_100032AA8(0, v23[2] + 1LL, 1);
        }
        uint64_t v23 = v38;
        unint64_t v26 = v38[2];
        unint64_t v25 = v38[3];
        if (v26 >= v25 >> 1)
        {
          sub_100032AA8(v25 > 1, v26 + 1, 1);
          uint64_t v23 = v38;
        }

        v23[2] = v26 + 1;
        sub_10002218C((uint64_t)v8, (uint64_t)v23 + v24 + v26 * a2, type metadata accessor for BeaconObservation);
        uint64_t v4 = v35;
        uint64_t v5 = v36;
      }

      if (v37 == ++v13)
      {
        uint64_t v23 = v38;
        unint64_t v13 = v32;
        a2 = v33;
        goto LABEL_17;
      }
    }

    __break(1u);
LABEL_22:
    swift_once(&qword_10099B300, sub_1003459EC);
  }

uint64_t sub_100111BEC(uint64_t a1)
{
  v2[12] = a1;
  v2[13] = v1;
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_1009A6DB0);
  v2[14] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for FMNAccountType(0LL);
  v2[15] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[16] = v5;
  v2[17] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for NotifyMeEndpoint(0LL);
  v2[18] = v6;
  unint64_t v7 = (*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[19] = swift_task_alloc(v7);
  v2[20] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  v2[21] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[22] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[23] = swift_task_alloc(v10);
  v2[24] = swift_task_alloc(v10);
  v2[25] = swift_task_alloc(v10);
  v2[26] = swift_task_alloc(v10);
  return swift_task_switch(sub_100111CF4, v1, 0LL);
}

uint64_t sub_100111CF4()
{
  if (qword_10099B118 != -1) {
    swift_once(&qword_10099B118, sub_1000F95A0);
  }
  uint64_t v1 = v0[12];
  uint64_t v2 = type metadata accessor for Logger(0LL);
  v0[27] = sub_10000A720(v2, (uint64_t)qword_100A2A1C8);
  uint64_t v3 = swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = v0[12];
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v16 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain(v7);
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009B14F0);
    uint64_t v11 = Array.description.getter(v7, v10);
    unint64_t v13 = v12;
    swift_bridgeObjectRelease();
    v0[11] = sub_1003F11D4(v11, v13, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 11, v0 + 12, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease_n(v7, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "publishKeys for beacons: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v7, 2LL);
  }

  uint64_t v14 = (void *)swift_task_alloc(dword_1009A1554);
  v0[28] = v14;
  *uint64_t v14 = v0;
  v14[1] = sub_100111F08;
  return sub_100106BD8(v0[12]);
}

uint64_t sub_100111F08(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 224LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 104LL);
  *(void *)(*(void *)v1 + 232LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100111F68, v3, 0LL);
}

uint64_t sub_100111F68()
{
  uint64_t v1 = *(void *)(v0[13] + 128LL);
  uint64_t v2 = unk_1009A267C;
  os_log_type_t v5 = (char *)&dword_1009A2678 + dword_1009A2678;
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc(v2);
  v0[30] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100111FE4;
  return ((uint64_t (*)(void, uint64_t))v5)(v0[29], v1);
}

uint64_t sub_100111FE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(*(void *)v3 + 240LL);
  uint64_t v6 = *(void *)(*(void *)v3 + 104LL);
  v4[31] = a1;
  v4[32] = a2;
  v4[33] = a3;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_100112048, v6, 0LL);
}

uint64_t sub_100112048(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 248);
  if (v2)
  {
    uint64_t v3 = *(void *)(v1 + 256);
    unint64_t v4 = *(void *)(v1 + 264);
    uint64_t v5 = *(void **)(v1 + 160);
    uint64_t v33 = *(void *)(v1 + 152);
    uint64_t v6 = *(void *)(v1 + 136);
    uint64_t v7 = *(void *)(v1 + 120);
    uint64_t v31 = *(void *)(v1 + 144);
    uint64_t v32 = *(void *)(v1 + 112);
    uint64_t v8 = enum case for FMNAccountType.searchParty(_:);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 128) + 104LL);
    v9(v6, enum case for FMNAccountType.searchParty(_:), v7);
    uint64_t v10 = type metadata accessor for AccountURLComponents();
    swift_allocObject(v10, 56LL, 7LL);
    swift_bridgeObjectRetain(v2);
    sub_10001736C(v3, v4);
    *uint64_t v5 = sub_1006C217C(v6);
    v9((uint64_t)v5 + *(int *)(v31 + 20), v8, v7);
    uint64_t v11 = type metadata accessor for SearchPartyURLSessionFactory(0LL);
    swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v12 = type metadata accessor for FMNMockingPreferences(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v32, 1LL, 1LL, v12);
    uint64_t v13 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0LL, 0LL, v32);
    uint64_t v14 = type metadata accessor for ServerInteractionController(0LL);
    uint64_t v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    sub_10001DC4C((uint64_t)v5, v33, type metadata accessor for NotifyMeEndpoint);
    *(void *)(v1 + 272) = sub_1004317C8(v33, v13, v15);
    sub_100018C68((uint64_t)v5, type metadata accessor for NotifyMeEndpoint);
    *(void *)(v1 + 40) = &type metadata for NotifyMeRequest;
    *(void *)(v1 + 48) = sub_100117A14();
    *(void *)(v1 + 16) = v2;
    *(void *)(v1 + 24) = v3;
    *(void *)(v1 + 32) = v4;
    swift_bridgeObjectRetain(v2);
    sub_10001736C(v3, v4);
    uint64_t v16 = (void *)swift_task_alloc(dword_1009A4BF4);
    *(void *)(v1 + 280) = v16;
    void *v16 = v1;
    v16[1] = sub_100112348;
    return sub_1001B5210(*(void *)(v1 + 208), v1 + 16);
  }

  else
  {
    char v18 = (os_log_s *)Logger.logObject.getter(a1);
    uint64_t v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, (os_log_type_t)v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v19, "Could not create notify me request", v20, 2u);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    unint64_t v21 = sub_1001177B0();
    uint64_t v22 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v21, 0LL, 0LL);
    _BYTE *v23 = 4;
    swift_willThrow(v22);
    uint64_t v24 = *(void *)(v1 + 200);
    uint64_t v26 = *(void *)(v1 + 184);
    uint64_t v25 = *(void *)(v1 + 192);
    uint64_t v28 = *(void *)(v1 + 152);
    uint64_t v27 = *(void *)(v1 + 160);
    uint64_t v29 = *(void *)(v1 + 136);
    uint64_t v30 = *(void *)(v1 + 112);
    swift_task_dealloc(*(void *)(v1 + 208));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

uint64_t sub_100112348()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 280LL);
  *(void *)(*(void *)v1 + 288LL) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = v2[13];
    swift_release(v2[34]);
    uint64_t v5 = sub_100112C50;
    uint64_t v6 = v4;
  }

  else
  {
    uint64_t v7 = v2 + 2;
    uint64_t v8 = v2[34];
    uint64_t v9 = v2[13];
    swift_release(v8);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v7);
    uint64_t v5 = sub_1001123D4;
    uint64_t v6 = v9;
  }

  return swift_task_switch(v5, v6, 0LL);
}

uint64_t sub_1001123D4()
{
  uint64_t v1 = FMNServerInteractionController.FMNResponseFields.statusCode.getter();
  if (v1 == 500 || v1 == 404)
  {
    uint64_t v15 = (*(uint64_t (**)(void, void, void))(*(void *)(v0 + 176) + 16LL))( *(void *)(v0 + 192),  *(void *)(v0 + 208),  *(void *)(v0 + 168));
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.error.getter(v16);
    BOOL v18 = os_log_type_enabled(v16, v17);
    uint64_t v19 = *(void *)(v0 + 192);
    uint64_t v21 = *(void *)(v0 + 168);
    uint64_t v20 = *(void *)(v0 + 176);
    uint64_t v73 = v0 + 64;
    if (v18)
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v71 = swift_slowAlloc(32LL, -1LL);
      v74[0] = v71;
      *(_DWORD *)uint64_t v22 = 136446210;
      uint64_t v23 = sub_100015C48( &qword_1009A6DC0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields,  (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v21, v23);
      *(void *)(v0 + 72) = sub_1003F11D4(v24, v25, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v22 + 4, v22 + 12);
      swift_bridgeObjectRelease();
      uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      v26(v19, v21);
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "Publish failed: %{public}s", v22, 0xCu);
      swift_arrayDestroy(v71, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v71, -1LL, -1LL);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    else
    {
      uint64_t v26 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
      v26(v19, v21);
    }

    uint64_t v39 = *(void *)(v0 + 208);
    uint64_t v40 = *(void *)(v0 + 168);
    unint64_t v41 = sub_1001177B0();
    uint64_t v42 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v41, 0LL, 0LL);
    *unint64_t v43 = 0;
    swift_willThrow(v42);
    v26(v39, v40);
  }

  else
  {
    if (v1 == 200)
    {
      uint64_t v2 = (*(uint64_t (**)(void, void, void))(*(void *)(v0 + 176) + 16LL))( *(void *)(v0 + 200),  *(void *)(v0 + 208),  *(void *)(v0 + 168));
      uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
      os_log_type_t v4 = static os_log_type_t.default.getter(v3);
      BOOL v5 = os_log_type_enabled(v3, v4);
      uint64_t v6 = *(void *)(v0 + 200);
      uint64_t v8 = *(void *)(v0 + 168);
      uint64_t v7 = *(void *)(v0 + 176);
      if (v5)
      {
        uint64_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v10 = swift_slowAlloc(32LL, -1LL);
        *(_DWORD *)uint64_t v9 = 136315138;
        v74[0] = v10;
        uint64_t v11 = sub_100015C48( &qword_1009A6DC0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields,  (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
        uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter(v8, v11);
        *(void *)(v0 + 80) = sub_1003F11D4(v12, v13, v74);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v9 + 4, v9 + 12);
        swift_bridgeObjectRelease();
        uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
        v14(v6, v8);
        _os_log_impl((void *)&_mh_execute_header, v3, v4, "Publish success: %s", v9, 0xCu);
        swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v10, -1LL, -1LL);
        swift_slowDealloc(v9, -1LL, -1LL);
      }

      else
      {
        uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
        v14(*(void *)(v0 + 200), *(void *)(v0 + 168));
      }

      *(void *)(v0 + 296) = v14;
      uint64_t v44 = FMNServerInteractionController.FMNResponseFields.data.getter();
      uint64_t v46 = v45;
      *(void *)(v0 + 304) = v44;
      *(void *)(v0 + 312) = v45;
      uint64_t v47 = (void *)swift_task_alloc(dword_1009A156C);
      *(void *)(v0 + 320) = v47;
      *uint64_t v47 = v0;
      v47[1] = sub_100112AFC;
      return sub_100115160(v44, v46);
    }

    uint64_t v27 = (*(uint64_t (**)(void, void, void))(*(void *)(v0 + 176) + 16LL))( *(void *)(v0 + 184),  *(void *)(v0 + 208),  *(void *)(v0 + 168));
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.error.getter(v28);
    BOOL v30 = os_log_type_enabled(v28, v29);
    uint64_t v32 = *(void *)(v0 + 176);
    uint64_t v31 = *(void *)(v0 + 184);
    uint64_t v33 = *(void *)(v0 + 168);
    uint64_t v73 = v0 + 64;
    if (v30)
    {
      BOOL v34 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v72 = swift_slowAlloc(32LL, -1LL);
      v74[0] = v72;
      *(_DWORD *)BOOL v34 = 136446210;
      uint64_t v35 = sub_100015C48( &qword_1009A6DC0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields,  (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter(v33, v35);
      *(void *)(v0 + 64) = sub_1003F11D4(v36, v37, v74);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v34 + 4, v34 + 12);
      swift_bridgeObjectRelease();
      uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
      v38(v31, v33);
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Publish failed: %{public}s", v34, 0xCu);
      swift_arrayDestroy(v72, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v72, -1LL, -1LL);
      swift_slowDealloc(v34, -1LL, -1LL);
    }

    else
    {
      uint64_t v38 = *(void (**)(uint64_t, uint64_t))(v32 + 8);
      v38(v31, v33);
    }

    uint64_t v49 = *(void *)(v0 + 208);
    uint64_t v50 = *(void *)(v0 + 168);
    unint64_t v51 = sub_1001177B0();
    uint64_t v42 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v51, 0LL, 0LL);
    *uint64_t v52 = 2;
    swift_willThrow(v42);
    v38(v49, v50);
  }

  swift_errorRetain(v42);
  uint64_t v53 = swift_errorRetain(v42);
  uint64_t v54 = (os_log_s *)Logger.logObject.getter(v53);
  os_log_type_t v55 = static os_log_type_t.error.getter(v54);
  if (os_log_type_enabled(v54, v55))
  {
    uint64_t v56 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v57 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v56 = 138543362;
    swift_errorRetain(v42);
    uint64_t v58 = _swift_stdlib_bridgeErrorToNSError(v42);
    *(void *)(v0 + 56) = v58;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v73, v56 + 4, v56 + 12);
    uint64_t *v57 = v58;
    swift_errorRelease(v42);
    swift_errorRelease(v42);
    _os_log_impl((void *)&_mh_execute_header, v54, v55, "Server error publishing keys: %{public}@", v56, 0xCu);
    uint64_t v59 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v57, 1LL, v59);
    swift_slowDealloc(v57, -1LL, -1LL);
    swift_slowDealloc(v56, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v42);
    swift_errorRelease(v42);
  }

  uint64_t v61 = *(void *)(v0 + 256);
  unint64_t v60 = *(void *)(v0 + 264);
  uint64_t v62 = *(void *)(v0 + 248);

  swift_willThrow(v63);
  sub_100117A58(v62, v61, v60);
  sub_100117A58(v62, v61, v60);
  uint64_t v64 = *(void *)(v0 + 200);
  uint64_t v66 = *(void *)(v0 + 184);
  uint64_t v65 = *(void *)(v0 + 192);
  uint64_t v68 = *(void *)(v0 + 152);
  uint64_t v67 = *(void *)(v0 + 160);
  uint64_t v69 = *(void *)(v0 + 136);
  uint64_t v70 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 208));
  swift_task_dealloc(v64);
  swift_task_dealloc(v65);
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100112AFC()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 320LL);
  *(void *)(*(void *)v1 + 328LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = v2[38];
  unint64_t v5 = v2[39];
  uint64_t v6 = v2[13];
  sub_100016F9C(v4, v5);
  if (v0) {
    uint64_t v7 = sub_100112E4C;
  }
  else {
    uint64_t v7 = sub_100112B6C;
  }
  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_100112B6C()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 296);
  uint64_t v2 = *(void *)(v0 + 256);
  unint64_t v3 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 248);
  uint64_t v6 = *(void *)(v0 + 200);
  uint64_t v5 = *(void *)(v0 + 208);
  uint64_t v8 = *(void *)(v0 + 184);
  uint64_t v7 = *(void *)(v0 + 192);
  uint64_t v9 = *(void *)(v0 + 168);
  uint64_t v11 = *(void *)(v0 + 160);
  uint64_t v12 = *(void *)(v0 + 152);
  uint64_t v13 = *(void *)(v0 + 136);
  uint64_t v14 = *(void *)(v0 + 112);
  sub_100117A58(v4, v2, v3);
  sub_100117A58(v4, v2, v3);
  v1(v5, v9);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100112C50()
{
  uint64_t v1 = *(void *)(v0 + 288);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  unint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v5 = 138543362;
    swift_errorRetain(v1);
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 56) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v5 + 4, v5 + 12);
    *uint64_t v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Server error publishing keys: %{public}@", v5, 0xCu);
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v6, 1LL, v8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v10 = *(void *)(v0 + 256);
  unint64_t v9 = *(void *)(v0 + 264);
  uint64_t v11 = *(void *)(v0 + 248);

  swift_willThrow(v12);
  sub_100117A58(v11, v10, v9);
  sub_100117A58(v11, v10, v9);
  uint64_t v13 = *(void *)(v0 + 200);
  uint64_t v15 = *(void *)(v0 + 184);
  uint64_t v14 = *(void *)(v0 + 192);
  uint64_t v17 = *(void *)(v0 + 152);
  uint64_t v16 = *(void *)(v0 + 160);
  uint64_t v18 = *(void *)(v0 + 136);
  uint64_t v19 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 208));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100112E4C()
{
  uint64_t v1 = *(void *)(v0 + 328);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  unint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v5 = 138543362;
    swift_errorRetain(v1);
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 56) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v5 + 4, v5 + 12);
    *uint64_t v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Server error publishing keys: %{public}@", v5, 0xCu);
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v6, 1LL, v8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v10 = *(void *)(v0 + 256);
  unint64_t v9 = *(void *)(v0 + 264);
  uint64_t v11 = *(void *)(v0 + 248);

  swift_willThrow(v12);
  sub_100117A58(v11, v10, v9);
  sub_100117A58(v11, v10, v9);
  uint64_t v13 = *(void *)(v0 + 200);
  uint64_t v15 = *(void *)(v0 + 184);
  uint64_t v14 = *(void *)(v0 + 192);
  uint64_t v17 = *(void *)(v0 + 152);
  uint64_t v16 = *(void *)(v0 + 160);
  uint64_t v18 = *(void *)(v0 + 136);
  uint64_t v19 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 208));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100113050(uint64_t a1)
{
  v2[27] = a1;
  v2[28] = v1;
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_1009A6DB0);
  v2[29] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for FMNAccountType(0LL);
  v2[30] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[31] = v5;
  v2[32] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for NotifyMeEndpoint(0LL);
  v2[33] = v6;
  unint64_t v7 = (*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[34] = swift_task_alloc(v7);
  v2[35] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  v2[36] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[37] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[38] = swift_task_alloc(v10);
  v2[39] = swift_task_alloc(v10);
  v2[40] = swift_task_alloc(v10);
  v2[41] = swift_task_alloc(v10);
  uint64_t v11 = type metadata accessor for NotifyMeRequest.Subscription(0LL);
  v2[42] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[43] = v12;
  unint64_t v13 = (*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[44] = swift_task_alloc(v13);
  v2[45] = swift_task_alloc(v13);
  uint64_t v14 = type metadata accessor for StableIdentifier(0LL);
  v2[46] = v14;
  v2[47] = swift_task_alloc((*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for UUID(0LL);
  v2[48] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v2[49] = v16;
  uint64_t v17 = *(void *)(v16 + 64);
  v2[50] = v17;
  v2[51] = swift_task_alloc((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  v2[52] = v18;
  v2[53] = swift_task_alloc((*(void *)(*(void *)(v18 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord(0LL);
  v2[54] = found;
  uint64_t v20 = *(void *)(found - 8);
  v2[55] = v20;
  v2[56] = swift_task_alloc((*(void *)(v20 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100113230, v1, 0LL);
}

uint64_t sub_100113230()
{
  if (qword_10099B118 != -1) {
    swift_once(&qword_10099B118, sub_1000F95A0);
  }
  uint64_t v1 = *(void *)(v0 + 216);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 456) = sub_10000A720(v2, (uint64_t)qword_100A2A1C8);
  uint64_t v3 = swift_bridgeObjectRetain_n(v1, 2LL);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v0 + 432);
    uint64_t v7 = *(void *)(v0 + 216);
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = swift_slowAlloc(32LL, -1LL);
    uint64_t v29 = v9;
    *(_DWORD *)uint64_t v8 = 136315138;
    swift_bridgeObjectRetain(v7);
    uint64_t v11 = Array.description.getter(v10, v6);
    unint64_t v13 = v12;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 208) = sub_1003F11D4(v11, v13, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease_n(v7, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unsubscribe for beacons: %s", v8, 0xCu);
    swift_arrayDestroy(v9, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    uint64_t v14 = *(void *)(v0 + 216);

    swift_bridgeObjectRelease_n(v14, 2LL);
  }

  uint64_t v15 = *(void *)(v0 + 216);
  uint64_t v16 = *(void *)(v15 + 16);
  *(void *)(v0 + 464) = v16;
  if (v16)
  {
    uint64_t v17 = *(void *)(v0 + 440);
    uint64_t v18 = *(void *)(v0 + 448);
    int v19 = *(_DWORD *)(v17 + 80);
    *(_DWORD *)(v0 + 648) = v19;
    uint64_t v20 = *(void *)(v17 + 72);
    *(void *)(v0 + 480) = 0LL;
    *(void *)(v0 + 488) = _swiftEmptyArrayStorage;
    *(void *)(v0 + 472) = v20;
    uint64_t v21 = v15 + ((v19 + 32LL) & ~(unint64_t)v19);
    swift_bridgeObjectRetain(v15);
    sub_10001DC4C(v21, v18, type metadata accessor for NotifyWhenFoundRecord);
    if (qword_10099B9E0 != -1) {
      swift_once(&qword_10099B9E0, sub_10076012C);
    }
    swift_beginAccess(&xmmword_1009BED80, v0 + 136, 0LL, 0LL);
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 80))
    {
      sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
      sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
      uint64_t v27 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
      uint64_t v23 = (void *)swift_task_alloc(unk_10099C894);
      *(void *)(v0 + 496) = v23;
      void *v23 = v0;
      v23[1] = sub_1001135A0;
      return v27();
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    uint64_t v24 = *(void *)(*(void *)(v0 + 224) + 128LL);
    uint64_t v25 = unk_1009A267C;
    uint64_t v28 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1009A2678 + dword_1009A2678);
    swift_retain();
    uint64_t v26 = (void *)swift_task_alloc(v25);
    *(void *)(v0 + 552) = v26;
    *uint64_t v26 = v0;
    v26[1] = sub_100113F2C;
    return v28((uint64_t)_swiftEmptyArrayStorage, v24);
  }

  return result;
}

uint64_t sub_1001135A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 496LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 224LL);
  *(void *)(*(void *)v1 + 504LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100113600, v3, 0LL);
}

uint64_t sub_100113600()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 504))
  {
    uint64_t v2 = *(void *)(v0 + 432);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    *(_DWORD *)(v0 + 652) = *(_DWORD *)(v2 + 24);
    return swift_task_switch(sub_10011381C, *(void *)(v0 + 504), 0LL);
  }

  else
  {
    uint64_t v4 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    os_log_type_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No BeaconStoreActor available!", v7, 2u);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    uint64_t v8 = *(void *)(v0 + 448);

    unint64_t v9 = sub_1000157D0();
    uint64_t v24 = swift_allocError(&type metadata for DaemonError, v9, 0LL, 0LL);
    void *v10 = 0xD000000000000010LL;
    v10[1] = 0x8000000100850F20LL;
    swift_willThrow(v24);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_100018C68(v8, type metadata accessor for NotifyWhenFoundRecord);
    uint64_t v11 = *(void *)(v0 + 424);
    uint64_t v12 = *(void *)(v0 + 408);
    uint64_t v13 = *(void *)(v0 + 376);
    uint64_t v15 = *(void *)(v0 + 352);
    uint64_t v14 = *(void *)(v0 + 360);
    uint64_t v17 = *(void *)(v0 + 320);
    uint64_t v16 = *(void *)(v0 + 328);
    uint64_t v18 = *(void *)(v0 + 304);
    uint64_t v19 = *(void *)(v0 + 312);
    uint64_t v20 = *(void *)(v0 + 280);
    uint64_t v21 = *(void *)(v0 + 272);
    uint64_t v22 = *(void *)(v0 + 256);
    uint64_t v23 = *(void *)(v0 + 232);
    swift_task_dealloc(*(void *)(v0 + 448));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v19);
    swift_task_dealloc(v18);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10011381C()
{
  uint64_t v1 = *(void *)(v0 + 504);
  uint64_t v3 = *(void *)(v0 + 400);
  uint64_t v2 = *(void *)(v0 + 408);
  uint64_t v4 = *(void *)(v0 + 384);
  uint64_t v5 = *(void *)(v0 + 392);
  uint64_t v6 = *(void *)(v0 + 448) + *(int *)(v0 + 652);
  *(void *)(v0 + 512) = *(void *)(v1 + 136);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
  *(void *)(v0 + 520) = v7;
  v7(v2, v6, v4);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_10093E780, v9 + v3, v8 | 7);
  *(void *)(v0 + 528) = v10;
  *(void *)(v10 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v10 + v9, v2, v4);
  swift_retain();
  return swift_task_switch(sub_1001138D8, 0LL, 0LL);
}

uint64_t sub_1001138D8()
{
  uint64_t v1 = v0[66];
  uint64_t v2 = v0[64];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[67] = v3;
  v3[2] = v2;
  v3[3] = sub_10011795C;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[68] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100113984;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[53],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100117968,  v3,  v0[52]);
}

uint64_t sub_100113984()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 536LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 224LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 544LL));
  swift_release();
  swift_release();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100113A08, v2, 0LL);
}

uint64_t sub_100113A08()
{
  uint64_t v1 = *(void *)(v0 + 424);
  uint64_t v2 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(*((void *)v2 - 1) + 48LL))(v1, 1LL, v2) == 1)
  {
    sub_100015794(v1, (uint64_t *)&unk_1009A9C30);
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 368);
    uint64_t v3 = *(void *)(v0 + 376);
    sub_10001DC4C(v1 + v2[6], v3, type metadata accessor for StableIdentifier);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v3, v4);
    if (EnumCaseMultiPayload == 3)
    {
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    else
    {
      if (EnumCaseMultiPayload != 2)
      {
        uint64_t v16 = *(void *)(v0 + 424);
        sub_100018C68(*(void *)(v0 + 376), type metadata accessor for StableIdentifier);
        sub_100018C68(v16, type metadata accessor for OwnedBeaconRecord);
        goto LABEL_10;
      }

      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    uint64_t v6 = *(void *)(v0 + 424);
    uint64_t v7 = *(void *)(v0 + 384);
    uint64_t v8 = *(void *)(v0 + 392);
    uint64_t v9 = *(void *)(v0 + 376);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v9, v7);
    uint64_t v10 = sub_1000F5F2C(*(void *)(v6 + v2[16]), *(void *)(v6 + v2[17]));
    unint64_t v12 = v11;
    sub_100018C68(v6, type metadata accessor for OwnedBeaconRecord);
    if (v12 >> 60 != 15)
    {
      *(void *)(v0 + 160) = v10;
      *(void *)(v0 + 168) = v12;
      unint64_t v13 = sub_10008A064();
      uint64_t v14 = RawRepresentable<>.hexString.getter(&type metadata for AccessoryProductData, v13);
      uint64_t v45 = v15;
      uint64_t v46 = v14;
      sub_1000182F0(v10, v12);
      goto LABEL_11;
    }
  }

uint64_t sub_100113F2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(*(void *)v3 + 552LL);
  uint64_t v6 = *(void *)(*(void *)v3 + 224LL);
  v4[70] = a1;
  v4[71] = a2;
  v4[72] = a3;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_100113F94, v6, 0LL);
}

uint64_t sub_100113F94(uint64_t a1)
{
  uint64_t v2 = *(void *)(v1 + 560);
  if (v2)
  {
    unint64_t v3 = *(void *)(v1 + 576);
    uint64_t v4 = *(void *)(v1 + 568);
    uint64_t v5 = *(void **)(v1 + 280);
    uint64_t v38 = *(void *)(v1 + 272);
    uint64_t v6 = *(void *)(v1 + 256);
    uint64_t v7 = *(void *)(v1 + 240);
    uint64_t v32 = *(void *)(v1 + 264);
    uint64_t v34 = *(void *)(v1 + 232);
    uint64_t v8 = enum case for FMNAccountType.searchParty(_:);
    uint64_t v9 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 + 248) + 104LL);
    v9(v6, enum case for FMNAccountType.searchParty(_:), v7);
    uint64_t v10 = type metadata accessor for AccountURLComponents();
    swift_allocObject(v10, 56LL, 7LL);
    swift_bridgeObjectRetain(v2);
    sub_10001736C(v4, v3);
    *uint64_t v5 = sub_1006C217C(v6);
    v9((uint64_t)v5 + *(int *)(v32 + 20), v8, v7);
    uint64_t v11 = type metadata accessor for SearchPartyURLSessionFactory(0LL);
    swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
    uint64_t v12 = type metadata accessor for FMNMockingPreferences(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(v34, 1LL, 1LL, v12);
    uint64_t v13 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0LL, 0LL, v34);
    uint64_t v14 = type metadata accessor for ServerInteractionController(0LL);
    uint64_t v15 = swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    sub_10001DC4C((uint64_t)v5, v38, type metadata accessor for NotifyMeEndpoint);
    *(void *)(v1 + 584) = sub_1004317C8(v38, v13, v15);
    sub_100018C68((uint64_t)v5, type metadata accessor for NotifyMeEndpoint);
    *(void *)(v1 + 120) = &type metadata for NotifyMeRequest;
    *(void *)(v1 + 128) = sub_100117A14();
    *(void *)(v1 + 96) = v2;
    *(void *)(v1 + 104) = v4;
    *(void *)(v1 + 112) = v3;
    swift_bridgeObjectRetain(v2);
    sub_10001736C(v4, v3);
    uint64_t v16 = (void *)swift_task_alloc(dword_1009A4BF4);
    *(void *)(v1 + 592) = v16;
    void *v16 = v1;
    v16[1] = sub_1001142EC;
    return sub_1001B5210(*(void *)(v1 + 328), v1 + 96);
  }

  else
  {
    uint64_t v18 = (os_log_s *)Logger.logObject.getter(a1);
    uint64_t v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, (os_log_type_t)v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl((void *)&_mh_execute_header, v18, (os_log_type_t)v19, "Could not create notify me request", v20, 2u);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    unint64_t v21 = sub_1001177B0();
    uint64_t v39 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v21, 0LL, 0LL);
    _BYTE *v22 = 3;
    swift_willThrow(v39);
    uint64_t v23 = *(void *)(v1 + 424);
    uint64_t v24 = *(void *)(v1 + 408);
    uint64_t v25 = *(void *)(v1 + 376);
    uint64_t v27 = *(void *)(v1 + 352);
    uint64_t v26 = *(void *)(v1 + 360);
    uint64_t v29 = *(void *)(v1 + 320);
    uint64_t v28 = *(void *)(v1 + 328);
    uint64_t v30 = *(void *)(v1 + 304);
    uint64_t v31 = *(void *)(v1 + 312);
    uint64_t v33 = *(void *)(v1 + 280);
    uint64_t v35 = *(void *)(v1 + 272);
    uint64_t v36 = *(void *)(v1 + 256);
    uint64_t v37 = *(void *)(v1 + 232);
    swift_task_dealloc(*(void *)(v1 + 448));
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v31);
    swift_task_dealloc(v30);
    swift_task_dealloc(v33);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

uint64_t sub_1001142EC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 592);
  *(void *)(*v1 + 600) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 224);
    swift_release();
    uint64_t v5 = sub_100114CB0;
    uint64_t v6 = v4;
  }

  else
  {
    uint64_t v7 = (void *)(v2 + 96);
    uint64_t v8 = *(void *)(v2 + 224);
    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v7);
    uint64_t v5 = sub_100114378;
    uint64_t v6 = v8;
  }

  return swift_task_switch(v5, v6, 0LL);
}

uint64_t sub_100114378(uint64_t a1)
{
  uint64_t v2 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(a1);
  if (v2 == 500 || v2 == 404)
  {
    uint64_t v16 = (*(uint64_t (**)(void, void, void))(*(void *)(v1 + 296) + 16LL))( *(void *)(v1 + 312),  *(void *)(v1 + 328),  *(void *)(v1 + 288));
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter(v17);
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = *(void *)(v1 + 312);
    uint64_t v21 = *(void *)(v1 + 288);
    uint64_t v22 = *(void *)(v1 + 296);
    uint64_t v79 = v1 + 200;
    if (v19)
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      v81[0] = v24;
      *(_DWORD *)uint64_t v23 = 136446210;
      uint64_t v25 = sub_100015C48( &qword_1009A6DC0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields,  (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v21, v25);
      *(void *)(v1 + 184) = sub_1003F11D4(v26, v27, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 184, v1 + 192, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease();
      uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
      v28(v20, v21);
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "Unsubscribe failed: %{public}s", v23, 0xCu);
      swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {
      uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v22 + 8);
      v28(v20, v21);
    }

    uint64_t v41 = *(void *)(v1 + 328);
    uint64_t v42 = *(void *)(v1 + 288);
    unint64_t v43 = sub_1001177B0();
    uint64_t v44 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v43, 0LL, 0LL);
    uint64_t v45 = v44;
    *uint64_t v46 = 0;
  }

  else
  {
    if (v2 == 200)
    {
      uint64_t v77 = (uint64_t *)(v1 + 192);
      uint64_t v3 = (*(uint64_t (**)(void, void, void))(*(void *)(v1 + 296) + 16LL))( *(void *)(v1 + 320),  *(void *)(v1 + 328),  *(void *)(v1 + 288));
      uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
      os_log_type_t v5 = static os_log_type_t.default.getter(v4);
      BOOL v6 = os_log_type_enabled(v4, v5);
      uint64_t v7 = *(void *)(v1 + 320);
      uint64_t v9 = *(void *)(v1 + 288);
      uint64_t v8 = *(void *)(v1 + 296);
      if (v6)
      {
        uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v11 = swift_slowAlloc(32LL, -1LL);
        v81[0] = v11;
        *(_DWORD *)uint64_t v10 = 136315138;
        uint64_t v12 = sub_100015C48( &qword_1009A6DC0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields,  (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
        uint64_t v13 = dispatch thunk of CustomStringConvertible.description.getter(v9, v12);
        uint64_t *v77 = sub_1003F11D4(v13, v14, v81);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v77, v1 + 200, v10 + 4, v10 + 12);
        swift_bridgeObjectRelease();
        uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
        v15(v7, v9);
        _os_log_impl((void *)&_mh_execute_header, v4, v5, "Unsubscribe success: %s", v10, 0xCu);
        swift_arrayDestroy(v11, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v11, -1LL, -1LL);
        swift_slowDealloc(v10, -1LL, -1LL);
      }

      else
      {
        uint64_t v15 = *(void (**)(uint64_t, uint64_t))(v8 + 8);
        v15(*(void *)(v1 + 320), *(void *)(v1 + 288));
      }

      *(void *)(v1 + 608) = v15;
      uint64_t v48 = FMNServerInteractionController.FMNResponseFields.data.getter(v47);
      uint64_t v50 = v49;
      *(void *)(v1 + 616) = v48;
      *(void *)(v1 + 624) = v49;
      unint64_t v51 = (void *)swift_task_alloc(dword_1009A156C);
      *(void *)(v1 + 632) = v51;
      *unint64_t v51 = v1;
      v51[1] = sub_100114AFC;
      return sub_100115160(v48, v50);
    }

    uint64_t v79 = v1 + 200;
    uint64_t v29 = (*(uint64_t (**)(void, void, void))(*(void *)(v1 + 296) + 16LL))( *(void *)(v1 + 304),  *(void *)(v1 + 328),  *(void *)(v1 + 288));
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.error.getter(v30);
    BOOL v32 = os_log_type_enabled(v30, v31);
    uint64_t v33 = *(void *)(v1 + 296);
    uint64_t v34 = *(void *)(v1 + 304);
    uint64_t v35 = *(void *)(v1 + 288);
    if (v32)
    {
      uint64_t v36 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v37 = swift_slowAlloc(32LL, -1LL);
      v81[0] = v37;
      *(_DWORD *)uint64_t v36 = 136446210;
      uint64_t v38 = sub_100015C48( &qword_1009A6DC0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields,  (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter(v35, v38);
      *(void *)(v1 + 176) = sub_1003F11D4(v39, v40, v81);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 176, v1 + 184, v36 + 4, v36 + 12);
      swift_bridgeObjectRelease();
      uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
      v28(v34, v35);
      _os_log_impl((void *)&_mh_execute_header, v30, v31, "Unsubscribe failed: %{public}s", v36, 0xCu);
      swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v37, -1LL, -1LL);
      swift_slowDealloc(v36, -1LL, -1LL);
    }

    else
    {
      uint64_t v28 = *(void (**)(uint64_t, uint64_t))(v33 + 8);
      v28(*(void *)(v1 + 304), *(void *)(v1 + 288));
    }

    uint64_t v41 = *(void *)(v1 + 328);
    uint64_t v42 = *(void *)(v1 + 288);
    unint64_t v53 = sub_1001177B0();
    uint64_t v44 = swift_allocError(&type metadata for NotifyWhenFoundManager.NotifyWhenFoundError, v53, 0LL, 0LL);
    uint64_t v45 = v44;
    *uint64_t v54 = 2;
  }

  swift_willThrow(v44);
  v28(v41, v42);
  swift_errorRetain(v45);
  uint64_t v55 = swift_errorRetain(v45);
  uint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
  os_log_type_t v57 = static os_log_type_t.error.getter(v56);
  if (os_log_type_enabled(v56, v57))
  {
    uint64_t v58 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v59 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v58 = 138543362;
    swift_errorRetain(v45);
    uint64_t v60 = _swift_stdlib_bridgeErrorToNSError(v45);
    *(void *)(v1 + 200) = v60;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v79, v1 + 208, v58 + 4, v58 + 12);
    *uint64_t v59 = v60;
    swift_errorRelease(v45);
    swift_errorRelease(v45);
    _os_log_impl((void *)&_mh_execute_header, v56, v57, "Server error unsubscribing: %{public}@", v58, 0xCu);
    uint64_t v61 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v59, 1LL, v61);
    swift_slowDealloc(v59, -1LL, -1LL);
    swift_slowDealloc(v58, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v45);
    swift_errorRelease(v45);
  }

  unint64_t v62 = *(void *)(v1 + 576);
  uint64_t v63 = *(void *)(v1 + 568);
  uint64_t v64 = *(void *)(v1 + 560);

  swift_willThrow(v65);
  sub_100117A58(v64, v63, v62);
  sub_100117A58(v64, v63, v62);
  uint64_t v66 = *(void *)(v1 + 424);
  uint64_t v67 = *(void *)(v1 + 408);
  uint64_t v68 = *(void *)(v1 + 376);
  uint64_t v70 = *(void *)(v1 + 352);
  uint64_t v69 = *(void *)(v1 + 360);
  uint64_t v72 = *(void *)(v1 + 320);
  uint64_t v71 = *(void *)(v1 + 328);
  uint64_t v73 = *(void *)(v1 + 312);
  uint64_t v74 = *(void *)(v1 + 304);
  uint64_t v75 = *(void *)(v1 + 280);
  uint64_t v76 = *(void *)(v1 + 272);
  uint64_t v78 = *(void *)(v1 + 256);
  uint64_t v80 = *(void *)(v1 + 232);
  swift_task_dealloc(*(void *)(v1 + 448));
  swift_task_dealloc(v66);
  swift_task_dealloc(v67);
  swift_task_dealloc(v68);
  swift_task_dealloc(v69);
  swift_task_dealloc(v70);
  swift_task_dealloc(v71);
  swift_task_dealloc(v72);
  swift_task_dealloc(v73);
  swift_task_dealloc(v74);
  swift_task_dealloc(v75);
  swift_task_dealloc(v76);
  swift_task_dealloc(v78);
  swift_task_dealloc(v80);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100114AFC()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 632LL);
  *(void *)(*(void *)v1 + 64Hasher.init(_seed:)(v1, 0LL) = v0;
  swift_task_dealloc(v3);
  unint64_t v4 = v2[78];
  uint64_t v5 = v2[77];
  uint64_t v6 = v2[28];
  sub_100016F9C(v5, v4);
  if (v0) {
    uint64_t v7 = sub_100114F04;
  }
  else {
    uint64_t v7 = sub_100114B70;
  }
  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_100114B70()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 608);
  unint64_t v2 = *(void *)(v0 + 576);
  uint64_t v3 = *(void *)(v0 + 568);
  uint64_t v4 = *(void *)(v0 + 560);
  uint64_t v5 = *(void *)(v0 + 448);
  uint64_t v6 = *(void *)(v0 + 424);
  uint64_t v7 = *(void *)(v0 + 408);
  uint64_t v11 = *(void *)(v0 + 376);
  uint64_t v12 = *(void *)(v0 + 360);
  uint64_t v8 = *(void *)(v0 + 328);
  uint64_t v13 = *(void *)(v0 + 352);
  uint64_t v14 = *(void *)(v0 + 320);
  uint64_t v15 = *(void *)(v0 + 312);
  uint64_t v16 = *(void *)(v0 + 304);
  uint64_t v9 = *(void *)(v0 + 288);
  uint64_t v17 = *(void *)(v0 + 280);
  uint64_t v18 = *(void *)(v0 + 272);
  uint64_t v19 = *(void *)(v0 + 256);
  uint64_t v20 = *(void *)(v0 + 232);
  sub_100117A58(v4, v3, v2);
  sub_100117A58(v4, v3, v2);
  v1(v8, v9);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v8);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100114CB0()
{
  uint64_t v1 = *(void *)(v0 + 600);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v5 = 138543362;
    swift_errorRetain(v1);
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 200) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v5 + 4, v5 + 12);
    *uint64_t v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Server error unsubscribing: %{public}@", v5, 0xCu);
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v6, 1LL, v8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  unint64_t v9 = *(void *)(v0 + 576);
  uint64_t v10 = *(void *)(v0 + 568);
  uint64_t v11 = *(void *)(v0 + 560);

  swift_willThrow(v12);
  sub_100117A58(v11, v10, v9);
  sub_100117A58(v11, v10, v9);
  uint64_t v13 = *(void *)(v0 + 424);
  uint64_t v14 = *(void *)(v0 + 408);
  uint64_t v15 = *(void *)(v0 + 376);
  uint64_t v17 = *(void *)(v0 + 352);
  uint64_t v16 = *(void *)(v0 + 360);
  uint64_t v19 = *(void *)(v0 + 320);
  uint64_t v18 = *(void *)(v0 + 328);
  uint64_t v20 = *(void *)(v0 + 312);
  uint64_t v22 = *(void *)(v0 + 304);
  uint64_t v23 = *(void *)(v0 + 280);
  uint64_t v24 = *(void *)(v0 + 272);
  uint64_t v25 = *(void *)(v0 + 256);
  uint64_t v26 = *(void *)(v0 + 232);
  swift_task_dealloc(*(void *)(v0 + 448));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100114F04()
{
  uint64_t v1 = *(void *)(v0 + 640);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v5 = 138543362;
    swift_errorRetain(v1);
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 200) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 200, v0 + 208, v5 + 4, v5 + 12);
    *uint64_t v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Server error unsubscribing: %{public}@", v5, 0xCu);
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v6, 1LL, v8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  unint64_t v9 = *(void *)(v0 + 576);
  uint64_t v10 = *(void *)(v0 + 568);
  uint64_t v11 = *(void *)(v0 + 560);

  swift_willThrow(v12);
  sub_100117A58(v11, v10, v9);
  sub_100117A58(v11, v10, v9);
  uint64_t v13 = *(void *)(v0 + 424);
  uint64_t v14 = *(void *)(v0 + 408);
  uint64_t v15 = *(void *)(v0 + 376);
  uint64_t v17 = *(void *)(v0 + 352);
  uint64_t v16 = *(void *)(v0 + 360);
  uint64_t v19 = *(void *)(v0 + 320);
  uint64_t v18 = *(void *)(v0 + 328);
  uint64_t v20 = *(void *)(v0 + 312);
  uint64_t v22 = *(void *)(v0 + 304);
  uint64_t v23 = *(void *)(v0 + 280);
  uint64_t v24 = *(void *)(v0 + 272);
  uint64_t v25 = *(void *)(v0 + 256);
  uint64_t v26 = *(void *)(v0 + 232);
  swift_task_dealloc(*(void *)(v0 + 448));
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100115160(uint64_t a1, uint64_t a2)
{
  v3[33] = a2;
  v3[34] = v2;
  v3[32] = a1;
  uint64_t v4 = sub_100004AEC(&qword_1009A9BF0);
  v3[35] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC(&qword_1009A1718);
  v3[36] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_1009AA900);
  v3[37] = v6;
  v3[38] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord(0LL);
  v3[39] = found;
  uint64_t v8 = *(void *)(found - 8);
  v3[40] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[41] = swift_task_alloc(v9);
  v3[42] = swift_task_alloc(v9);
  v3[43] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for UUID(0LL);
  v3[44] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v3[45] = v11;
  uint64_t v12 = *(void *)(v11 + 64);
  v3[46] = v12;
  unint64_t v13 = (v12 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v3[47] = swift_task_alloc(v13);
  v3[48] = swift_task_alloc(v13);
  uint64_t v14 = type metadata accessor for NotifyMeResponseResult(0LL);
  v3[49] = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  v3[50] = v15;
  unint64_t v16 = (*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[51] = swift_task_alloc(v16);
  v3[52] = swift_task_alloc(v16);
  v3[53] = swift_task_alloc(v16);
  return swift_task_switch(sub_1001152D0, v2, 0LL);
}

uint64_t sub_1001152D0()
{
  uint64_t v2 = *(void *)(v0 + 256);
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v3 = type metadata accessor for JSONDecoder(0LL);
  uint64_t v4 = swift_allocObject(v3, *(unsigned int *)(v3 + 48), *(unsigned __int16 *)(v3 + 52));
  uint64_t v5 = JSONDecoder.init()(v4);
  *(void *)(v0 + 432) = v5;
  unint64_t v6 = sub_10011776C();
  dispatch thunk of JSONDecoder.decode<A>(_:from:)( &type metadata for NotifyMeResponse,  v2,  v1,  &type metadata for NotifyMeResponse,  v6);
  uint64_t v7 = *(void *)(v0 + 232);
  *(void *)(v0 + 440) = v7;
  if (qword_10099B118 != -1) {
    swift_once(&qword_10099B118, sub_1000F95A0);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  *(void *)(v0 + 448) = sub_10000A720(v8, (uint64_t)qword_100A2A1C8);
  uint64_t v9 = swift_bridgeObjectRetain_n(v7, 2LL);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = swift_slowAlloc(32LL, -1LL);
    v59[0] = v13;
    *(_DWORD *)uint64_t v12 = 136315138;
    *(void *)(v0 + 240) = v7;
    swift_bridgeObjectRetain(v7);
    uint64_t v14 = String.init<A>(describing:)(v0 + 240, &type metadata for NotifyMeResponse);
    *(void *)(v0 + 248) = sub_1003F11D4(v14, v15, v59);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease_n(v7, 2LL);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "NotifyMeResponse: %s", v12, 0xCu);
    swift_arrayDestroy(v13, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {

    swift_bridgeObjectRelease_n(v7, 2LL);
  }

  uint64_t v16 = *(void *)(v7 + 16);
  *(void *)(v0 + 456) = v16;
  if (!v16)
  {
LABEL_16:
    swift_bridgeObjectRelease();
    swift_release(v5);
    uint64_t v40 = *(void *)(v0 + 416);
    uint64_t v41 = *(void *)(v0 + 408);
    uint64_t v43 = *(void *)(v0 + 376);
    uint64_t v42 = *(void *)(v0 + 384);
    uint64_t v45 = *(void *)(v0 + 336);
    uint64_t v44 = *(void *)(v0 + 344);
    uint64_t v46 = *(void *)(v0 + 328);
    uint64_t v47 = *(void *)(v0 + 304);
    uint64_t v48 = *(void *)(v0 + 288);
    uint64_t v57 = *(void *)(v0 + 280);
    swift_task_dealloc(*(void *)(v0 + 424));
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v47);
    swift_task_dealloc(v48);
    swift_task_dealloc(v57);
    uint64_t v49 = *(uint64_t (**)(void))(v0 + 8);
    return v49();
  }

  uint64_t v17 = 0LL;
  unint64_t v53 = (__int128 *)(v0 + 96);
  uint64_t v52 = (void *)(v0 + 56);
  uint64_t v18 = *(void *)(v0 + 400);
  *(_DWORD *)(v0 + 592) = *(_DWORD *)(v18 + 80);
  *(void *)(v0 + 464) = *(void *)(v18 + 72);
  while (1)
  {
    *(void *)(v0 + 472) = 0LL;
    *(void *)(v0 + 480) = v17;
    uint64_t v20 = *(void *)(v0 + 424);
    uint64_t v21 = *(void *)(v0 + 384);
    uint64_t v22 = *(void *)(v0 + 392);
    uint64_t v23 = *(void *)(v0 + 352);
    uint64_t v24 = *(void *)(v0 + 360);
    sub_10001DC4C( *(void *)(v0 + 440)
    + ((*(unsigned __int8 *)(v0 + 592) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 592))
    + *(void *)(v0 + 464) * v17,
      v20,
      type metadata accessor for NotifyMeResponseResult);
    uint64_t v25 = *(void (**)(uint64_t, uint64_t, uint64_t))(v24 + 16);
    *(void *)(v0 + 488) = v25;
    v25(v21, v20, v23);
    uint64_t v19 = *(void *)(v0 + 424);
    (*(void (**)(void, void))(*(void *)(v0 + 360) + 8LL))(*(void *)(v0 + 384), *(void *)(v0 + 352));
LABEL_9:
    sub_100018C68(v19, type metadata accessor for NotifyMeResponseResult);
    uint64_t v17 = *(void *)(v0 + 480) + 1LL;
    if (v17 == *(void *)(v0 + 456))
    {
      uint64_t v5 = *(void *)(v0 + 432);
      goto LABEL_16;
    }
  }

  if (*(_BYTE *)(v20 + *(int *)(v22 + 20)) == 2)
  {
    uint64_t v26 = sub_10001DC4C(*(void *)(v0 + 424), *(void *)(v0 + 416), type metadata accessor for NotifyMeResponseResult);
    unint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.error.getter(v27);
    BOOL v29 = os_log_type_enabled(v27, v28);
    uint64_t v30 = *(void *)(v0 + 416);
    uint64_t v19 = *(void *)(v0 + 424);
    if (v29)
    {
      uint64_t v31 = *(void *)(v0 + 408);
      uint64_t v32 = *(void *)(v0 + 392);
      uint64_t v54 = *(void *)(v0 + 360);
      uint64_t v55 = *(void *)(v0 + 352);
      uint64_t v56 = *(void *)(v0 + 384);
      uint64_t v33 = swift_slowAlloc(12LL, -1LL);
      uint64_t v34 = swift_slowAlloc(32LL, -1LL);
      v59[0] = v34;
      *(_DWORD *)uint64_t v33 = 136446210;
      sub_10001DC4C(v30, v31, type metadata accessor for NotifyMeResponseResult);
      uint64_t v35 = String.init<A>(describing:)(v31, v32);
      *(void *)(v33 + 4) = sub_1003F11D4(v35, v36, v59);
      swift_bridgeObjectRelease();
      sub_100018C68(v30, type metadata accessor for NotifyMeResponseResult);
      _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "Failed to process notify request: %{public}s",  (uint8_t *)v33,  0xCu);
      swift_arrayDestroy(v34, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v34, -1LL, -1LL);
      swift_slowDealloc(v33, -1LL, -1LL);

      (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v56, v55);
    }

    else
    {
      uint64_t v37 = *(void *)(v0 + 384);
      uint64_t v38 = *(void *)(v0 + 352);
      uint64_t v39 = *(void *)(v0 + 360);

      sub_100018C68(v30, type metadata accessor for NotifyMeResponseResult);
      (*(void (**)(uint64_t, uint64_t))(v39 + 8))(v37, v38);
    }

    goto LABEL_9;
  }

  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 208, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, (uint64_t)v53, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 120))
  {
    sub_100012EC0(v53, (uint64_t)v52);
    sub_100012ED8(v52, *(void *)(v0 + 80));
    uint64_t v58 = (uint64_t (*)(void))((char *)&dword_10099C890 + dword_10099C890);
    unint64_t v51 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 496) = v51;
    *unint64_t v51 = v0;
    v51[1] = sub_100115950;
    uint64_t v49 = v58;
    return v49();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100115950(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 496LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 272LL);
  *(void *)(*(void *)v1 + 504LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001159B0, v3, 0LL);
}

uint64_t sub_1001159B0()
{
  uint64_t v1 = (void *)(v0 + 56);
  if (*(void *)(v0 + 504))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    return swift_task_switch(sub_100115BA8, *(void *)(v0 + 504), 0LL);
  }

  else
  {
    uint64_t v3 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.error.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      unint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "No BeaconStoreActor available!", v6, 2u);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    uint64_t v7 = *(void *)(v0 + 432);
    uint64_t v8 = *(void *)(v0 + 424);
    uint64_t v9 = *(void *)(v0 + 384);
    uint64_t v10 = *(void *)(v0 + 352);
    uint64_t v11 = *(void *)(v0 + 360);

    unint64_t v12 = sub_1000157D0();
    uint64_t v24 = swift_allocError(&type metadata for DaemonError, v12, 0LL, 0LL);
    void *v13 = 0xD000000000000010LL;
    v13[1] = 0x8000000100850F20LL;
    swift_willThrow(v24);
    swift_release(v7);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    sub_100018C68(v8, type metadata accessor for NotifyMeResponseResult);
    uint64_t v14 = *(void *)(v0 + 416);
    uint64_t v15 = *(void *)(v0 + 408);
    uint64_t v17 = *(void *)(v0 + 376);
    uint64_t v16 = *(void *)(v0 + 384);
    uint64_t v19 = *(void *)(v0 + 336);
    uint64_t v18 = *(void *)(v0 + 344);
    uint64_t v20 = *(void *)(v0 + 328);
    uint64_t v21 = *(void *)(v0 + 304);
    uint64_t v22 = *(void *)(v0 + 288);
    uint64_t v23 = *(void *)(v0 + 280);
    swift_task_dealloc(*(void *)(v0 + 424));
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100115BA8()
{
  uint64_t v1 = v0[63];
  uint64_t v2 = (void (*)(uint64_t, uint64_t, uint64_t))v0[61];
  uint64_t v4 = v0[47];
  uint64_t v3 = v0[48];
  uint64_t v6 = v0[45];
  uint64_t v5 = v0[46];
  uint64_t v7 = v0[44];
  v0[64] = *(void *)(v1 + 136);
  v2(v4, v3, v7);
  uint64_t v8 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_10093E708, v9 + v5, v8 | 7);
  v0[65] = v10;
  *(void *)(v10 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v10 + v9, v4, v7);
  swift_retain();
  return swift_task_switch(sub_100115C58, 0LL, 0LL);
}

uint64_t sub_100115C58()
{
  uint64_t v1 = v0[65];
  uint64_t v2 = v0[64];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[66] = v3;
  v3[2] = v2;
  v3[3] = sub_1001177F8;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[67] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100115D04;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[38],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100117804,  v3,  v0[37]);
}

uint64_t sub_100115D04()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 528LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 520LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 504LL);
  uint64_t v4 = *(void *)(*(void *)v0 + 272LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 536LL));
  swift_release(v3);
  swift_release(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100115D88, v4, 0LL);
}

uint64_t sub_100115D88()
{
  uint64_t v1 = *(void *)(v0 + 304);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 320) + 48LL))( v1,  1LL,  *(void *)(v0 + 312)) != 1)
  {
    uint64_t v15 = *(void *)(v0 + 336);
    uint64_t v14 = *(void *)(v0 + 344);
    sub_10002218C(v1, v14, type metadata accessor for NotifyWhenFoundRecord);
    uint64_t v16 = sub_10001DC4C(v14, v15, type metadata accessor for NotifyWhenFoundRecord);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.default.getter(v17);
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = *(void *)(v0 + 336);
    if (v19)
    {
      uint64_t v21 = *(void *)(v0 + 328);
      uint64_t v22 = *(void *)(v0 + 312);
      uint64_t v23 = swift_slowAlloc(12LL, -1LL);
      uint64_t v24 = swift_slowAlloc(32LL, -1LL);
      uint64_t v63 = v24;
      *(_DWORD *)uint64_t v23 = 136315138;
      sub_10001DC4C(v20, v21, type metadata accessor for NotifyWhenFoundRecord);
      uint64_t v25 = String.init<A>(describing:)(v21, v22);
      *(void *)(v23 + 4) = sub_1003F11D4(v25, v26, &v63);
      swift_bridgeObjectRelease();
      sub_100018C68(v20, type metadata accessor for NotifyWhenFoundRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Delete notification record (204 response): %s",  (uint8_t *)v23,  0xCu);
      swift_arrayDestroy(v24, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v24, -1LL, -1LL);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(*(void *)(v0 + 336), type metadata accessor for NotifyWhenFoundRecord);
    }

    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 136, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 160))
    {
      sub_100012EC0((__int128 *)(v0 + 136), v0 + 16);
      sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
      unint64_t v62 = (uint64_t (*)(void))((char *)&dword_10099C890 + dword_10099C890);
      unint64_t v53 = (void *)swift_task_alloc(unk_10099C894);
      *(void *)(v0 + 544) = v53;
      uint64_t v54 = sub_100116370;
      goto LABEL_18;
    }

    __break(1u);
    goto LABEL_25;
  }

  uint64_t v2 = *(void *)(v0 + 424);
  (*(void (**)(void, void))(*(void *)(v0 + 360) + 8LL))(*(void *)(v0 + 384), *(void *)(v0 + 352));
  sub_100018C68(v2, type metadata accessor for NotifyMeResponseResult);
  sub_100015794(v1, &qword_1009AA900);
  uint64_t v3 = *(void *)(v0 + 480) + 1LL;
  if (v3 == *(void *)(v0 + 456))
  {
LABEL_3:
    swift_release(*(void *)(v0 + 432));
    swift_bridgeObjectRelease();
    uint64_t v4 = *(void *)(v0 + 416);
    uint64_t v5 = *(void *)(v0 + 408);
    uint64_t v7 = *(void *)(v0 + 376);
    uint64_t v6 = *(void *)(v0 + 384);
    uint64_t v9 = *(void *)(v0 + 336);
    uint64_t v8 = *(void *)(v0 + 344);
    uint64_t v10 = *(void *)(v0 + 328);
    uint64_t v11 = *(void *)(v0 + 304);
    uint64_t v12 = *(void *)(v0 + 288);
    uint64_t v60 = *(void *)(v0 + 280);
    swift_task_dealloc(*(void *)(v0 + 424));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v60);
    uint64_t v13 = *(uint64_t (**)(void))(v0 + 8);
    return v13();
  }

  uint64_t v56 = (__int128 *)(v0 + 96);
  uint64_t v55 = (void *)(v0 + 56);
  uint64_t v27 = *(void *)(v0 + 472);
  while (1)
  {
    *(void *)(v0 + 472) = v27;
    *(void *)(v0 + 480) = v3;
    uint64_t v37 = *(void *)(v0 + 424);
    uint64_t v38 = *(void *)(v0 + 384);
    uint64_t v39 = *(void *)(v0 + 392);
    uint64_t v40 = *(void *)(v0 + 352);
    uint64_t v41 = *(void *)(v0 + 360);
    sub_10001DC4C( *(void *)(v0 + 440)
    + ((*(unsigned __int8 *)(v0 + 592) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 592))
    + *(void *)(v0 + 464) * v3,
      v37,
      type metadata accessor for NotifyMeResponseResult);
    uint64_t v42 = *(void (**)(uint64_t, uint64_t, uint64_t))(v41 + 16);
    *(void *)(v0 + 488) = v42;
    v42(v38, v37, v40);
    if (!*(_BYTE *)(v37 + *(int *)(v39 + 20)))
    {
      uint64_t v47 = *(void *)(v0 + 424);
      (*(void (**)(void, void))(*(void *)(v0 + 360) + 8LL))( *(void *)(v0 + 384),  *(void *)(v0 + 352));
      goto LABEL_14;
    }

    uint64_t v43 = sub_10001DC4C(*(void *)(v0 + 424), *(void *)(v0 + 416), type metadata accessor for NotifyMeResponseResult);
    uint64_t v44 = (os_log_s *)Logger.logObject.getter(v43);
    os_log_type_t v45 = static os_log_type_t.error.getter(v44);
    BOOL v46 = os_log_type_enabled(v44, v45);
    uint64_t v48 = *(void *)(v0 + 416);
    uint64_t v47 = *(void *)(v0 + 424);
    if (!v46)
    {
      uint64_t v49 = *(void *)(v0 + 384);
      uint64_t v50 = *(void *)(v0 + 352);
      uint64_t v51 = *(void *)(v0 + 360);

      sub_100018C68(v48, type metadata accessor for NotifyMeResponseResult);
      (*(void (**)(uint64_t, uint64_t))(v51 + 8))(v49, v50);
LABEL_14:
      uint64_t v36 = v47;
      goto LABEL_8;
    }

    uint64_t v61 = *(void *)(v0 + 424);
    uint64_t v28 = v27;
    uint64_t v29 = *(void *)(v0 + 408);
    uint64_t v30 = *(void *)(v0 + 392);
    uint64_t v57 = *(void *)(v0 + 360);
    uint64_t v58 = *(void *)(v0 + 352);
    uint64_t v59 = *(void *)(v0 + 384);
    uint64_t v31 = swift_slowAlloc(12LL, -1LL);
    uint64_t v32 = swift_slowAlloc(32LL, -1LL);
    uint64_t v63 = v32;
    *(_DWORD *)uint64_t v31 = 136446210;
    sub_10001DC4C(v48, v29, type metadata accessor for NotifyMeResponseResult);
    uint64_t v33 = v29;
    uint64_t v27 = v28;
    uint64_t v34 = String.init<A>(describing:)(v33, v30);
    *(void *)(v31 + 4) = sub_1003F11D4(v34, v35, &v63);
    swift_bridgeObjectRelease();
    sub_100018C68(v48, type metadata accessor for NotifyMeResponseResult);
    _os_log_impl( (void *)&_mh_execute_header,  v44,  v45,  "Failed to process notify request: %{public}s",  (uint8_t *)v31,  0xCu);
    swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v32, -1LL, -1LL);
    swift_slowDealloc(v31, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v59, v58);
    uint64_t v36 = v61;
LABEL_8:
    sub_100018C68(v36, type metadata accessor for NotifyMeResponseResult);
    uint64_t v3 = *(void *)(v0 + 480) + 1LL;
    if (v3 == *(void *)(v0 + 456)) {
      goto LABEL_3;
    }
  }

  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 208, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, (uint64_t)v56, (uint64_t *)&unk_10099FA80);
  if (!*(void *)(v0 + 120))
  {
LABEL_25:
    __break(1u);
    return result;
  }

  sub_100012EC0(v56, (uint64_t)v55);
  sub_100012ED8(v55, *(void *)(v0 + 80));
  unint64_t v62 = (uint64_t (*)(void))((char *)&dword_10099C890 + dword_10099C890);
  unint64_t v53 = (void *)swift_task_alloc(unk_10099C894);
  *(void *)(v0 + 496) = v53;
  uint64_t v54 = (uint64_t (*)(uint64_t))sub_100115950;
LABEL_18:
  *unint64_t v53 = v0;
  v53[1] = v54;
  uint64_t v13 = v62;
  return v13();
}

uint64_t sub_100116370(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 544LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 272LL);
  *(void *)(*(void *)v1 + 552LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001163D0, v3, 0LL);
}

uint64_t sub_1001163D0()
{
  uint64_t v1 = (void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 552);
  if (!v2)
  {
    uint64_t v12 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "No BeaconStoreActor available!", v15, 2u);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    uint64_t v16 = *(void *)(v0 + 432);
    uint64_t v17 = *(void *)(v0 + 424);
    uint64_t v18 = *(void *)(v0 + 384);
    uint64_t v19 = *(void *)(v0 + 352);
    uint64_t v20 = *(void *)(v0 + 360);
    uint64_t v11 = *(void *)(v0 + 344);

    unint64_t v21 = sub_1000157D0();
    uint64_t v22 = swift_allocError(&type metadata for DaemonError, v21, 0LL, 0LL);
    void *v23 = 0xD000000000000010LL;
    v23[1] = 0x8000000100850F20LL;
    swift_willThrow(v22);
    swift_release(v16);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v18, v19);
    sub_100018C68(v17, type metadata accessor for NotifyMeResponseResult);
    goto LABEL_7;
  }

  uint64_t v3 = *(void *)(v0 + 472);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v5 = *(void *)(v0 + 288);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  uint64_t v6 = swift_task_alloc(32LL);
  *(void *)(v6 + 16) = v4;
  sub_100611BB0((void (*)(uint64_t, char **))sub_100118940, v5);
  if (v3)
  {
    uint64_t v7 = *(void *)(v0 + 424);
    uint64_t v8 = *(void *)(v0 + 384);
    uint64_t v10 = *(void *)(v0 + 352);
    uint64_t v9 = *(void *)(v0 + 360);
    uint64_t v11 = *(void *)(v0 + 344);
    swift_release(*(void *)(v0 + 432));
    swift_release(v2);
    swift_task_dealloc(v6);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
    sub_100018C68(v7, type metadata accessor for NotifyMeResponseResult);
    swift_bridgeObjectRelease();
LABEL_7:
    sub_100018C68(v11, type metadata accessor for NotifyWhenFoundRecord);
    uint64_t v24 = *(void *)(v0 + 416);
    uint64_t v25 = *(void *)(v0 + 408);
    uint64_t v27 = *(void *)(v0 + 376);
    uint64_t v26 = *(void *)(v0 + 384);
    uint64_t v29 = *(void *)(v0 + 336);
    uint64_t v28 = *(void *)(v0 + 344);
    uint64_t v30 = *(void *)(v0 + 328);
    uint64_t v31 = *(void *)(v0 + 304);
    uint64_t v32 = *(void *)(v0 + 288);
    uint64_t v34 = *(void *)(v0 + 280);
    swift_task_dealloc(*(void *)(v0 + 424));
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v34);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  swift_task_dealloc(v6);
  return swift_task_switch(sub_100116670, *(void *)(v0 + 552), 0LL);
}

uint64_t sub_100116670()
{
  *(void *)(v0 + 560) = *(void *)(*(void *)(v0 + 552) + 128LL);
  return swift_task_switch(sub_100116690, 0LL, 0LL);
}

uint64_t sub_100116690()
{
  uint64_t v1 = v0[70];
  uint64_t v2 = v0[36];
  uint64_t v3 = swift_task_alloc(32LL);
  v0[71] = v3;
  *(void *)(v3 + 16) = v1;
  *(void *)(v3 + 24) = v2;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[72] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100116734;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v4,  0LL,  0LL,  0xD000000000000011LL,  0x80000001008545C0LL,  sub_100117810,  v3,  (char *)&type metadata for () + 8);
}

uint64_t sub_100116734()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 576);
  *(void *)(*v1 + 584) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = sub_100116D7C;
  }

  else
  {
    swift_task_dealloc(*(void *)(v2 + 568));
    uint64_t v4 = sub_1001167A0;
  }

  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1001167A0()
{
  uint64_t v1 = v0[69];
  uint64_t v2 = v0[34];
  sub_100015794(v0[36], &qword_1009A1718);
  swift_release(v1);
  return swift_task_switch(sub_1001167F4, v2, 0LL);
}

uint64_t sub_1001167F4()
{
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v3 = type metadata accessor for TaskPriority(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v1, 1LL, 1LL, v3);
  uint64_t v5 = (void *)swift_allocObject(&unk_10093E730, 40LL, 7LL);
  v5[2] = 0LL;
  uint64_t v6 = v5 + 2;
  v5[3] = 0LL;
  v5[4] = v2;
  int v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v1, 1LL, v3);
  uint64_t v8 = swift_retain();
  uint64_t v9 = *(void *)(v0 + 280);
  if (v7 == 1)
  {
    sub_100015794(*(void *)(v0 + 280), &qword_1009A9BF0);
    uint64_t v10 = 0LL;
    uint64_t v11 = 0LL;
    uint64_t v12 = 7168LL;
  }

  else
  {
    unsigned __int8 v13 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v9, v3);
    uint64_t v12 = v13 | 0x1C00LL;
    uint64_t v14 = *v6;
    if (*v6)
    {
      uint64_t v15 = v5[3];
      uint64_t ObjectType = swift_getObjectType(*v6);
      swift_unknownObjectRetain(v14);
      uint64_t v10 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v15);
      uint64_t v11 = v17;
      swift_unknownObjectRelease(v14);
    }

    else
    {
      uint64_t v10 = 0LL;
      uint64_t v11 = 0LL;
    }
  }

  uint64_t v18 = swift_allocObject(&unk_10093E758, 32LL, 7LL);
  *(void *)(v18 + 16) = &unk_1009A1738;
  *(void *)(v18 + 24) = v5;
  uint64_t v19 = sub_100004AEC(&qword_1009A1748);
  if (v11 | v10)
  {
    uint64_t v20 = v0 + 176;
    *(void *)(v0 + 176) = 0LL;
    *(void *)(v0 + 184) = 0LL;
    *(void *)(v0 + 192) = v10;
    *(void *)(v0 + 200) = v11;
  }

  else
  {
    uint64_t v20 = 0LL;
  }

  uint64_t v21 = *(void *)(v0 + 424);
  uint64_t v22 = *(void *)(v0 + 384);
  uint64_t v23 = *(void *)(v0 + 352);
  uint64_t v24 = *(void *)(v0 + 360);
  uint64_t v25 = *(void *)(v0 + 344);
  uint64_t v26 = swift_task_create(v12, v20, v19, &unk_1009A1740, v18);
  swift_release(v26);
  (*(void (**)(uint64_t, uint64_t))(v24 + 8))(v22, v23);
  sub_100018C68(v21, type metadata accessor for NotifyMeResponseResult);
  sub_100018C68(v25, type metadata accessor for NotifyWhenFoundRecord);
  uint64_t v27 = *(void *)(v0 + 480) + 1LL;
  if (v27 == *(void *)(v0 + 456))
  {
LABEL_10:
    swift_release(*(void *)(v0 + 432));
    swift_bridgeObjectRelease();
    uint64_t v28 = *(void *)(v0 + 416);
    uint64_t v29 = *(void *)(v0 + 408);
    uint64_t v31 = *(void *)(v0 + 376);
    uint64_t v30 = *(void *)(v0 + 384);
    uint64_t v33 = *(void *)(v0 + 336);
    uint64_t v32 = *(void *)(v0 + 344);
    uint64_t v34 = *(void *)(v0 + 328);
    uint64_t v35 = *(void *)(v0 + 304);
    uint64_t v36 = *(void *)(v0 + 288);
    uint64_t v70 = *(void *)(v0 + 280);
    swift_task_dealloc(*(void *)(v0 + 424));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v70);
    uint64_t v37 = *(uint64_t (**)(void))(v0 + 8);
    return v37();
  }

  uint64_t v66 = (__int128 *)(v0 + 96);
  uint64_t v65 = (void *)(v0 + 56);
  uint64_t v39 = *(void *)(v0 + 584);
  while (1)
  {
    *(void *)(v0 + 472) = v39;
    *(void *)(v0 + 480) = v27;
    uint64_t v49 = *(void *)(v0 + 424);
    uint64_t v50 = *(void *)(v0 + 384);
    uint64_t v51 = *(void *)(v0 + 392);
    uint64_t v52 = *(void *)(v0 + 352);
    uint64_t v53 = *(void *)(v0 + 360);
    sub_10001DC4C( *(void *)(v0 + 440)
    + ((*(unsigned __int8 *)(v0 + 592) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 592))
    + *(void *)(v0 + 464) * v27,
      v49,
      type metadata accessor for NotifyMeResponseResult);
    uint64_t v54 = *(void (**)(uint64_t, uint64_t, uint64_t))(v53 + 16);
    *(void *)(v0 + 488) = v54;
    v54(v50, v49, v52);
    if (!*(_BYTE *)(v49 + *(int *)(v51 + 20)))
    {
      uint64_t v59 = *(void *)(v0 + 424);
      (*(void (**)(void, void))(*(void *)(v0 + 360) + 8LL))( *(void *)(v0 + 384),  *(void *)(v0 + 352));
      goto LABEL_20;
    }

    uint64_t v55 = sub_10001DC4C(*(void *)(v0 + 424), *(void *)(v0 + 416), type metadata accessor for NotifyMeResponseResult);
    uint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
    os_log_type_t v57 = static os_log_type_t.error.getter(v56);
    BOOL v58 = os_log_type_enabled(v56, v57);
    uint64_t v60 = *(void *)(v0 + 416);
    uint64_t v59 = *(void *)(v0 + 424);
    if (!v58)
    {
      uint64_t v61 = *(void *)(v0 + 384);
      uint64_t v62 = *(void *)(v0 + 352);
      uint64_t v63 = *(void *)(v0 + 360);

      sub_100018C68(v60, type metadata accessor for NotifyMeResponseResult);
      (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v61, v62);
LABEL_20:
      uint64_t v48 = v59;
      goto LABEL_14;
    }

    uint64_t v71 = *(void *)(v0 + 424);
    uint64_t v40 = v39;
    uint64_t v41 = *(void *)(v0 + 408);
    uint64_t v42 = *(void *)(v0 + 392);
    uint64_t v67 = *(void *)(v0 + 360);
    uint64_t v68 = *(void *)(v0 + 352);
    uint64_t v69 = *(void *)(v0 + 384);
    uint64_t v43 = swift_slowAlloc(12LL, -1LL);
    uint64_t v44 = swift_slowAlloc(32LL, -1LL);
    uint64_t v73 = v44;
    *(_DWORD *)uint64_t v43 = 136446210;
    sub_10001DC4C(v60, v41, type metadata accessor for NotifyMeResponseResult);
    uint64_t v45 = v41;
    uint64_t v39 = v40;
    uint64_t v46 = String.init<A>(describing:)(v45, v42);
    *(void *)(v43 + 4) = sub_1003F11D4(v46, v47, &v73);
    swift_bridgeObjectRelease();
    sub_100018C68(v60, type metadata accessor for NotifyMeResponseResult);
    _os_log_impl( (void *)&_mh_execute_header,  v56,  v57,  "Failed to process notify request: %{public}s",  (uint8_t *)v43,  0xCu);
    swift_arrayDestroy(v44, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v44, -1LL, -1LL);
    swift_slowDealloc(v43, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v69, v68);
    uint64_t v48 = v71;
LABEL_14:
    sub_100018C68(v48, type metadata accessor for NotifyMeResponseResult);
    uint64_t v27 = *(void *)(v0 + 480) + 1LL;
    if (v27 == *(void *)(v0 + 456)) {
      goto LABEL_10;
    }
  }

  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 208, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, (uint64_t)v66, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 120))
  {
    sub_100012EC0(v66, (uint64_t)v65);
    sub_100012ED8(v65, *(void *)(v0 + 80));
    uint64_t v72 = (uint64_t (*)(void))((char *)&dword_10099C890 + dword_10099C890);
    uint64_t v64 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 496) = v64;
    *uint64_t v64 = v0;
    v64[1] = sub_100115950;
    uint64_t v37 = v72;
    return v37();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100116D7C()
{
  return swift_task_switch(sub_100116DB8, *(void *)(v0 + 552), 0LL);
}

uint64_t sub_100116DB8()
{
  uint64_t v1 = v0[36];
  uint64_t v2 = v0[34];
  swift_release(v0[69]);
  sub_100015794(v1, &qword_1009A1718);
  swift_bridgeObjectRelease();
  return swift_task_switch(sub_100116E20, v2, 0LL);
}

uint64_t sub_100116E20()
{
  uint64_t v1 = *(void *)(v0 + 424);
  uint64_t v2 = *(void *)(v0 + 384);
  uint64_t v3 = *(void *)(v0 + 352);
  uint64_t v4 = *(void *)(v0 + 360);
  uint64_t v5 = *(void *)(v0 + 344);
  swift_release(*(void *)(v0 + 432));
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  sub_100018C68(v1, type metadata accessor for NotifyMeResponseResult);
  sub_100018C68(v5, type metadata accessor for NotifyWhenFoundRecord);
  uint64_t v6 = *(void *)(v0 + 416);
  uint64_t v7 = *(void *)(v0 + 408);
  uint64_t v9 = *(void *)(v0 + 376);
  uint64_t v8 = *(void *)(v0 + 384);
  uint64_t v11 = *(void *)(v0 + 336);
  uint64_t v10 = *(void *)(v0 + 344);
  uint64_t v12 = *(void *)(v0 + 328);
  uint64_t v13 = *(void *)(v0 + 304);
  uint64_t v14 = *(void *)(v0 + 288);
  uint64_t v16 = *(void *)(v0 + 280);
  swift_task_dealloc(*(void *)(v0 + 424));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100116F28()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for NotifyWhenFoundManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd22NotifyWhenFoundManager);
}

uint64_t sub_100116F8C()
{
  *(void *)(v1 + 16) = v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A9BF0);
  *(void *)(v1 + 24) = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100116FE8, v0, 0LL);
}

uint64_t sub_100116FE8()
{
  uint64_t v1 = *(void *)(v0 + 16);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))(v2, 1LL, 1LL, v3);
  uint64_t v5 = sub_100015C48( &qword_1009A1700,  v4,  (uint64_t (*)(uint64_t))type metadata accessor for NotifyWhenFoundManager,  (uint64_t)&unk_1007ECEB4);
  uint64_t v6 = (void *)swift_allocObject(&unk_10093E6E0, 40LL, 7LL);
  _OWORD v6[2] = v1;
  v6[3] = v5;
  v6[4] = v1;
  swift_retain_n(v1, 2LL);
  uint64_t v7 = sub_1003EDB00(v2, (uint64_t)&unk_1009A1710, (uint64_t)v6);
  swift_release(v7);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001170AC(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100015C48( &qword_1009A1700,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for NotifyWhenFoundManager,  (uint64_t)&unk_1007ECEB4);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1001170EC()
{
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = (void *)swift_task_alloc(dword_1009A170C);
  *(void *)(v1 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100015D58;
  v3[3] = v2;
  uint64_t v4 = (void *)swift_task_alloc(dword_1009A153C);
  v3[4] = v4;
  *uint64_t v4 = v3;
  v4[1] = sub_1000F9EC0;
  return sub_100103B5C();
}

void sub_100117158(uint64_t a1)
{
  __asm { BR              X12 }

void sub_1001173F4(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_10099E530);
  __chkstk_darwin(v2);
  __asm { BR              X12 }

unint64_t sub_10011776C()
{
  unint64_t result = qword_1009A1720;
  if (!qword_1009A1720)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080F538, &type metadata for NotifyMeResponse);
    atomic_store(result, (unint64_t *)&qword_1009A1720);
  }

  return result;
}

unint64_t sub_1001177B0()
{
  unint64_t result = qword_1009A1728;
  if (!qword_1009A1728)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ECF60, &type metadata for NotifyWhenFoundManager.NotifyWhenFoundError);
    atomic_store(result, &qword_1009A1728);
  }

  return result;
}

uint64_t sub_1001177F8()
{
  return sub_1001187D4((uint64_t (*)(void, uint64_t))sub_1005EBF58);
}

uint64_t sub_100117804(uint64_t a1)
{
  return sub_10036CB00(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100117810(uint64_t a1)
{
  return sub_1004FBC9C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_10011781C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 32);
  uint64_t v5 = (void *)swift_task_alloc(dword_1009A1734);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100015D58;
  v5[2] = a1;
  v5[3] = v4;
  return swift_task_switch(sub_100104978, v4, 0LL);
}

uint64_t sub_100117880()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1001178A4(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_10099C9FC);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100015D58;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10099C9F8 + dword_10099C9F8))(a1, v4);
}

unint64_t sub_100117914()
{
  unint64_t result = qword_1009A1750;
  if (!qword_1009A1750)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080EC50, &type metadata for CloudKitChangeSet.Error);
    atomic_store(result, (unint64_t *)&qword_1009A1750);
  }

  return result;
}

uint64_t sub_10011795C()
{
  return sub_1001187D4((uint64_t (*)(void, uint64_t))sub_1005EA75C);
}

uint64_t sub_100117968(uint64_t a1)
{
  return sub_10036CA70(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100117974(uint64_t a1, void *a2)
{
  uint64_t v3 = v2;
  Swift::Int v6 = *v2;
  if ((*v2 & 0xC000000000000001LL) == 0) {
    goto LABEL_7;
  }
  if (v6 < 0) {
    uint64_t v7 = *v2;
  }
  else {
    uint64_t v7 = v6 & 0xFFFFFFFFFFFFFF8LL;
  }
  uint64_t result = __CocoaDictionary.count.getter(v7);
  if (!__OFADD__(result, 1LL))
  {
    Swift::Int v6 = sub_100687884(v7, result + 1);
    *uint64_t v3 = v6;
LABEL_7:
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v6);
    Swift::Int v10 = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    sub_10005C93C(a1, a2, isUniquelyReferenced_nonNull_native);
    *uint64_t v3 = v10;
    return swift_bridgeObjectRelease();
  }

  __break(1u);
  return result;
}

unint64_t sub_100117A14()
{
  unint64_t result = qword_1009A1758;
  if (!qword_1009A1758)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007EE0C0, &type metadata for NotifyMeRequest);
    atomic_store(result, (unint64_t *)&qword_1009A1758);
  }

  return result;
}

uint64_t sub_100117A58(uint64_t result, uint64_t a2, unint64_t a3)
{
  if (result)
  {
    swift_bridgeObjectRelease();
    return sub_100016F9C(a2, a3);
  }

  return result;
}

unint64_t sub_100117A8C()
{
  unint64_t result = qword_1009A1770;
  if (!qword_1009A1770)
  {
    unint64_t result = swift_getWitnessTable(&unk_100805F5C, &type metadata for CryptoTokenError);
    atomic_store(result, (unint64_t *)&qword_1009A1770);
  }

  return result;
}

unint64_t sub_100117AD0()
{
  unint64_t result = qword_1009A1780;
  if (!qword_1009A1780)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F3E70, &type metadata for KeyRepresentableError);
    atomic_store(result, (unint64_t *)&qword_1009A1780);
  }

  return result;
}

uint64_t sub_100117B18@<X0>(void *a1@<X8>)
{
  return sub_1005EA574(v1, a1);
}

uint64_t sub_100117B20(uint64_t a1)
{
  return sub_10036CB24(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100117B2C(uint64_t result, uint64_t a2, char a3)
{
  if (a3 == 1) {
    return swift_bridgeObjectRelease(result);
  }
  if (!a3)
  {
    swift_bridgeObjectRelease(result);
    return swift_bridgeObjectRelease(a2);
  }

  return result;
}

void *sub_100117B74@<X0>(void *a1@<X8>)
{
  return sub_1005EA6B4(a1);
}

uint64_t sub_100117B7C(uint64_t a1)
{
  return sub_10036CA04(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100117B8C()
{
  return sub_1001187D4((uint64_t (*)(void, uint64_t))sub_1005EBF80);
}

uint64_t sub_100117B9C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100117BC8(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_10099C9FC);
  *(void *)(v2 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000159BC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_10099C9F8 + dword_10099C9F8))(a1, v4);
}

uint64_t sub_100117C38()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100117C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v7 = *(void *)(v2 + 16);
  uint64_t v6 = *(void *)(v2 + 24);
  uint64_t v8 = (void *)swift_task_alloc(dword_1009A179C);
  *(void *)(v3 + 16) = v8;
  *uint64_t v8 = v3;
  v8[1] = sub_1000159BC;
  return sub_100103F04(a1, a2, v7, v6);
}

uint64_t sub_100117CC8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100117CEC(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = (void *)swift_task_alloc(dword_1009A17AC);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v6;
  *uint64_t v6 = v3;
  v6[1] = sub_100015D58;
  return sub_1001041CC(a1, a2, v2);
}

uint64_t sub_100117D4C(uint64_t a1)
{
  v1[8] = a1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v1[9] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[10] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v1[11] = v5;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v1[12] = swift_task_alloc(v6);
  v1[13] = swift_task_alloc(v6);
  uint64_t found = type metadata accessor for NotifyWhenFoundRecord(0LL);
  v1[14] = found;
  uint64_t v8 = *(void *)(found - 8);
  v1[15] = v8;
  v1[16] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100117DEC, a1, 0LL);
}

uint64_t sub_100117DEC()
{
  *(void *)(v0 + 136) = *(void *)(*(void *)(v0 + 64) + 136LL);
  swift_retain();
  return swift_task_switch(sub_100117E30, 0LL, 0LL);
}

uint64_t sub_100117E30()
{
  uint64_t v1 = v0[17];
  uint64_t v2 = v0[8];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[18] = v3;
  v3[2] = v1;
  v3[3] = sub_1001185D8;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[19] = v4;
  uint64_t v5 = sub_100004AEC(&qword_1009A17E8);
  *uint64_t v4 = v0;
  v4[1] = sub_100117EF0;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 7,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_1001185E0,  v3,  v5);
}

uint64_t sub_100117EF0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 144);
  uint64_t v3 = *(void *)(*v0 + 64);
  swift_task_dealloc(*(void *)(*v0 + 152));
  swift_release(v3);
  swift_task_dealloc(v2);
  *(void *)(v1 + 160) = *(void *)(v1 + 56);
  return swift_task_switch(sub_100117F64, 0LL, 0LL);
}

uint64_t sub_100117F64()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 168) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 120);
    uint64_t v4 = *(void *)(v0 + 128);
    uint64_t v5 = *(void *)(v0 + 72);
    uint64_t v6 = *(void *)(v0 + 80);
    uint64_t v7 = *(void *)(v0 + 104);
    uint64_t v8 = *(int *)(*(void *)(v0 + 112) + 24LL);
    *(_DWORD *)(v0 + 224) = v8;
    int v9 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 228) = v9;
    *(void *)(v0 + 176) = *(void *)(v3 + 72);
    *(void *)(v0 + 184) = 0LL;
    uint64_t v10 = *(void *)(v0 + 64);
    uint64_t v11 = v4 + v8;
    sub_10001DC4C( v1 + ((v9 + 32LL) & ~(unint64_t)v9),  v4,  type metadata accessor for NotifyWhenFoundRecord);
    uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
    *(void *)(v0 + 192) = v12;
    v12(v7, v11, v5);
    sub_100018C68(v4, type metadata accessor for NotifyWhenFoundRecord);
    return swift_task_switch(sub_100118128, v10, 0LL);
  }

  else
  {
    swift_bridgeObjectRelease();
    if (qword_10099B118 != -1) {
      swift_once(&qword_10099B118, sub_1000F95A0);
    }
    uint64_t v14 = type metadata accessor for Logger(0LL);
    uint64_t v15 = sub_10000A720(v14, (uint64_t)qword_100A2A1C8);
    uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
    os_log_type_t v17 = static os_log_type_t.default.getter(v16);
    if (os_log_type_enabled(v16, v17))
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v16, v17, "No Notify when found activity required.", v18, 2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    uint64_t v19 = *(void *)(v0 + 128);
    uint64_t v21 = *(void *)(v0 + 96);
    uint64_t v20 = *(void *)(v0 + 104);

    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v0 + 8))(0LL);
  }

uint64_t sub_100118128()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 72);
  (*(void (**)(uint64_t, void, uint64_t))(v0 + 192))(v1, *(void *)(v0 + 104), v4);
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 24) & ~v6;
  uint64_t v8 = swift_allocObject(&unk_10093E898, v7 + v2, v6 | 7);
  *(void *)(v0 + 200) = v8;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = v5;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v8 + v7, v1, v4);
  swift_retain();
  return swift_task_switch(sub_1001181CC, 0LL, 0LL);
}

uint64_t sub_1001181CC()
{
  uint64_t v1 = v0[25];
  uint64_t v2 = v0[17];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[26] = v3;
  v3[2] = v2;
  v3[3] = sub_1001185F0;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[27] = v4;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A9C40);
  *uint64_t v4 = v0;
  v4[1] = sub_10011828C;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 2,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_1001185F4,  v3,  v5);
}

uint64_t sub_10011828C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 208LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 200LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 104LL);
  uint64_t v4 = *(void *)(*(void *)v0 + 72LL);
  uint64_t v5 = *(void *)(*(void *)v0 + 80LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 216LL));
  swift_release(v2);
  swift_task_dealloc(v1);
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v3, v4);
  return swift_task_switch(sub_10011831C, 0LL, 0LL);
}

uint64_t sub_10011831C()
{
  uint64_t v1 = v0 + 16;
  uint64_t v2 = *(void *)(v0 + 40);
  if (v2)
  {
    sub_100015794(v1, (uint64_t *)&unk_1009A9C40);
    swift_bridgeObjectRelease();
    if (qword_10099B118 != -1) {
      swift_once(&qword_10099B118, sub_1000F95A0);
    }
    uint64_t v3 = type metadata accessor for Logger(0LL);
    uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2A1C8);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.default.getter(v5);
    if (!os_log_type_enabled(v5, v6)) {
      goto LABEL_12;
    }
    uint64_t v7 = "Notify when found activity updating criteria required.";
LABEL_11:
    uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v12 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, v7, v12, 2u);
    swift_slowDealloc(v12, -1LL, -1LL);
LABEL_12:
    BOOL v13 = v2 != 0;
    uint64_t v14 = *(void *)(v0 + 128);
    uint64_t v16 = *(void *)(v0 + 96);
    uint64_t v15 = *(void *)(v0 + 104);

    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(BOOL))(v0 + 8))(v13);
  }

  uint64_t v8 = *(void *)(v0 + 168);
  uint64_t v9 = *(void *)(v0 + 184) + 1LL;
  sub_100015794(v1, (uint64_t *)&unk_1009A9C40);
  if (v9 == v8)
  {
    swift_bridgeObjectRelease();
    if (qword_10099B118 != -1) {
      swift_once(&qword_10099B118, sub_1000F95A0);
    }
    uint64_t v10 = type metadata accessor for Logger(0LL);
    uint64_t v11 = sub_10000A720(v10, (uint64_t)qword_100A2A1C8);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v11);
    os_log_type_t v6 = static os_log_type_t.default.getter(v5);
    if (!os_log_type_enabled(v5, v6)) {
      goto LABEL_12;
    }
    uint64_t v7 = "No Notify when found activity required.";
    goto LABEL_11;
  }

  *(void *)(v0 + 184) = v9;
  uint64_t v18 = *(void *)(v0 + 128);
  uint64_t v19 = *(void *)(v0 + 104);
  uint64_t v20 = *(void *)(v0 + 72);
  uint64_t v21 = *(void *)(v0 + 80);
  uint64_t v22 = *(void *)(v0 + 64);
  uint64_t v23 = v18 + *(int *)(v0 + 224);
  sub_10001DC4C( *(void *)(v0 + 160)
  + ((*(unsigned __int8 *)(v0 + 228) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 228))
  + *(void *)(v0 + 176) * v9,
    v18,
    type metadata accessor for NotifyWhenFoundRecord);
  uint64_t v24 = *(void (**)(uint64_t, uint64_t, uint64_t))(v21 + 16);
  *(void *)(v0 + 192) = v24;
  v24(v19, v23, v20);
  sub_100018C68(v18, type metadata accessor for NotifyWhenFoundRecord);
  return swift_task_switch(sub_100118128, v22, 0LL);
}

unint64_t sub_10011858C()
{
  unint64_t result = qword_1009A17E0;
  if (!qword_1009A17E0)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A17D8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009A17E0);
  }

  return result;
}

void *sub_1001185D8@<X0>(void *a1@<X8>)
{
  return sub_1005EC030(a1);
}

uint64_t sub_1001185E0(uint64_t a1)
{
  return sub_10036CBB4(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1001185F4(uint64_t a1)
{
  return sub_10036CADC(a1, v1[2], v1[3], v1[4]);
}

void sub_100118604()
{
}

uint64_t sub_10011862C()
{
  return swift_deallocObject(v0, 25LL, 7LL);
}

uint64_t sub_100118650()
{
  return sub_1005EA5EC(*(void *)(v0 + 16), *(_BYTE *)(v0 + 24));
}

uint64_t sub_10011865C(uint64_t a1)
{
  return sub_10036CA4C(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100118674()
{
  return sub_1001187D4((uint64_t (*)(void, uint64_t))sub_1005EB4B8);
}

uint64_t sub_100118680(uint64_t a1)
{
  return sub_10036CB6C(a1, v1[2], v1[3], v1[4]);
}

void sub_100118690()
{
}

uint64_t sub_1001186B8()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + v4 + 1;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100118730@<X0>(_BYTE *a1@<X8>)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return sub_1005EB3CC(v1 + v4, *(_BYTE *)(v1 + v4 + *(void *)(v3 + 64)), a1);
}

uint64_t sub_10011877C(uint64_t a1)
{
  return sub_10036CB90(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100118790@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  return sub_1005EA6DC(v1 + ((v3 + 24) & ~v3), a1);
}

uint64_t sub_1001187D4(uint64_t (*a1)(void, uint64_t))
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  return a1(*(void *)(v1 + 16), v1 + ((v2 + 24) & ~v2));
}

uint64_t storeEnumTagSinglePayload for NotifyWhenFoundManager.NotifyWhenFoundError( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 4 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 4) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFB) {
    return ((uint64_t (*)(void))((char *)&loc_100118870 + 4 * byte_1007ECE25[v4]))();
  }
  *a1 = a2 + 4;
  return ((uint64_t (*)(void))((char *)sub_1001188A4 + 4 * byte_1007ECE20[v4]))();
}

uint64_t sub_1001188A4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001188AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1001188B4LL);
  }
  return result;
}

uint64_t sub_1001188C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1001188C8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 4;
  return result;
}

uint64_t sub_1001188CC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1001188D4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for NotifyWhenFoundManager.NotifyWhenFoundError()
{
  return &type metadata for NotifyWhenFoundManager.NotifyWhenFoundError;
}

unint64_t sub_1001188F4()
{
  unint64_t result = qword_1009A1808;
  if (!qword_1009A1808)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ECF38, &type metadata for NotifyWhenFoundManager.NotifyWhenFoundError);
    atomic_store(result, (unint64_t *)&qword_1009A1808);
  }

  return result;
}

void sub_100118940()
{
}

uint64_t sub_100118994()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A1E0);
  sub_10000A720(v0, (uint64_t)qword_100A2A1E0);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x617461646174656DLL,  0xE800000000000000LL);
}

uint64_t sub_100118A08()
{
  uint64_t v0 = type metadata accessor for DeviceIdentityUtility(0LL);
  uint64_t v1 = swift_allocObject(v0, *(unsigned int *)(v0 + 48), *(unsigned __int16 *)(v0 + 52));
  swift_defaultActor_initialize();
  uint64_t v2 = v1 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certExpiryDate;
  uint64_t v3 = type metadata accessor for Date(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 56LL))( v2,  1LL,  1LL,  v3);
  *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_refKey) = 0LL;
  *(void *)(v1 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_certs) = _swiftEmptyArrayStorage;
  *(_BYTE *)(v1 + OBJC_IVAR____TtC12searchpartyd21DeviceIdentityUtility_signingType) = 8;
  qword_100A2A1F8 = v1;
  return result;
}

void sub_100118AA4()
{
  uint64_t v1 = type metadata accessor for AccessoryMetadata(0LL);
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for MACAddress(0LL);
  __chkstk_darwin(v2);
  uint64_t v3 = type metadata accessor for AccessoryMetadataManager.Error(0LL);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001DC4C(v0, (uint64_t)v5, v6);
  uint64_t v7 = (char *)sub_100118BB4 + 4 * byte_1007ECFA0[swift_getEnumCaseMultiPayload(v5, v3)];
  __asm { BR              X10 }

uint64_t sub_100118BB4()
{
  uint64_t v2 = *v0;
  *(void *)(v1 - 80) = 0LL;
  *(void *)(v1 - 72) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(21LL);
  swift_bridgeObjectRelease();
  *(void *)(v1 - 80) = 0xD000000000000013LL;
  *(void *)(v1 - 72) = 0x8000000100851E70LL;
  *(void *)(v1 - 88) = v2;
  swift_errorRetain(v2);
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  v4._countAndFlagsBits = String.init<A>(describing:)(v1 - 88, v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  swift_errorRelease(v2);
  return *(void *)(v1 - 80);
}

uint64_t sub_100118E80()
{
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

uint64_t sub_100118EF8()
{
  swift_bridgeObjectRelease(*(void *)(v0 + 40));
  swift_bridgeObjectRelease(*(void *)(v0 + 48));
  return swift_deallocClassInstance(v0, 56LL, 7LL);
}

uint64_t type metadata accessor for AccessoryMetadataManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd24AccessoryMetadataManager);
}

uint64_t sub_100118F5C()
{
  return type metadata accessor for AccessoryMetadataManager.MetadataCoordinator(0LL);
}

uint64_t type metadata accessor for AccessoryMetadataManager.MetadataCoordinator(uint64_t a1)
{
  return sub_10008BED8( a1,  qword_1009A19A8,  (uint64_t)&nominal type descriptor for AccessoryMetadataManager.MetadataCoordinator);
}

uint64_t sub_100118F78(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  uint64_t result = type metadata accessor for AccessoryMetadataManager.MetadataInfo(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[3] = &unk_1007ED028;
    v4[4] = &unk_1007ED040;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t type metadata accessor for AccessoryMetadataManager.MetadataInfo(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009A1B20, (uint64_t)&nominal type descriptor for AccessoryMetadataManager.MetadataInfo);
}

uint64_t *sub_100119028(uint64_t *a1, uint64_t *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    unint64_t v11 = *((void *)v10 + 1);
    if (v11 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
    }

    else
    {
      uint64_t v13 = *(void *)v10;
      sub_10001736C(*(void *)v10, *((void *)v10 + 1));
      *(void *)uint64_t v9 = v13;
      *((void *)v9 + 1) = v11;
    }

    uint64_t v14 = a3[6];
    uint64_t v15 = a3[7];
    uint64_t v16 = (uint64_t *)((char *)a1 + v14);
    os_log_type_t v17 = (uint64_t *)((char *)a2 + v14);
    uint64_t v18 = v17[1];
    void *v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = (char *)a1 + v15;
    uint64_t v20 = (char *)a2 + v15;
    v19[4] = v20[4];
    *(_DWORD *)uint64_t v19 = *(_DWORD *)v20;
    *(_DWORD *)((char *)a1 + a3[8]) = *(_DWORD *)((char *)a2 + a3[8]);
    swift_bridgeObjectRetain(v18);
  }

  return a1;
}

uint64_t sub_100119124(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  int v5 = (uint64_t *)(a1 + *(int *)(a2 + 20));
  unint64_t v6 = v5[1];
  if (v6 >> 60 != 15) {
    sub_100016F9C(*v5, v6);
  }
  return swift_bridgeObjectRelease();
}

uint64_t sub_10011918C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = v9[1];
  if (v10 >> 60 == 15)
  {
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  }

  else
  {
    uint64_t v11 = *v9;
    sub_10001736C(*v9, v9[1]);
    *(void *)uint64_t v8 = v11;
    *(void *)(v8 + 8) = v10;
  }

  uint64_t v12 = a3[6];
  uint64_t v13 = a3[7];
  uint64_t v14 = (void *)(a1 + v12);
  uint64_t v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = a1 + v13;
  uint64_t v18 = a2 + v13;
  *(_BYTE *)(v17 + 4) = *(_BYTE *)(v18 + 4);
  *(_DWORD *)uint64_t v17 = *(_DWORD *)v18;
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  swift_bridgeObjectRetain(v16);
  return a1;
}

uint64_t sub_10011925C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a2 + v7 + 8);
  if (*(void *)(a1 + v7 + 8) >> 60 != 15LL)
  {
    if (v10 >> 60 != 15)
    {
      uint64_t v12 = *v9;
      sub_10001736C(v12, v10);
      uint64_t v13 = *v8;
      unint64_t v14 = v8[1];
      *uint64_t v8 = v12;
      v8[1] = v10;
      sub_100016F9C(v13, v14);
      goto LABEL_8;
    }

    sub_100119388((uint64_t)v8);
    goto LABEL_6;
  }

  if (v10 >> 60 == 15)
  {
LABEL_6:
    *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
    goto LABEL_8;
  }

  uint64_t v11 = *v9;
  sub_10001736C(v11, v10);
  *uint64_t v8 = v11;
  v8[1] = v10;
LABEL_8:
  uint64_t v15 = a3[6];
  uint64_t v16 = (void *)(a1 + v15);
  uint64_t v17 = (void *)(a2 + v15);
  void *v16 = *v17;
  uint64_t v18 = v17[1];
  v16[1] = v18;
  swift_bridgeObjectRetain(v18);
  swift_bridgeObjectRelease();
  uint64_t v19 = a3[7];
  uint64_t v20 = a1 + v19;
  uint64_t v21 = (int *)(a2 + v19);
  int v22 = *v21;
  *(_BYTE *)(v20 + 4) = *((_BYTE *)v21 + 4);
  *(_DWORD *)uint64_t v20 = v22;
  *(_DWORD *)(a1 + a3[8]) = *(_DWORD *)(a2 + a3[8]);
  return a1;
}

uint64_t sub_100119388(uint64_t a1)
{
  return a1;
}

uint64_t sub_1001193BC(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_OWORD *)(a1 + a3[5]) = *(_OWORD *)(a2 + a3[5]);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  uint64_t v8 = a3[7];
  uint64_t v9 = a3[8];
  uint64_t v10 = a1 + v8;
  uint64_t v11 = a2 + v8;
  *(_DWORD *)uint64_t v10 = *(_DWORD *)v11;
  *(_BYTE *)(v10 + 4) = *(_BYTE *)(v11 + 4);
  *(_DWORD *)(a1 + v9) = *(_DWORD *)(a2 + v9);
  return a1;
}

uint64_t sub_100119444(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = (uint64_t *)(a1 + v7);
  uint64_t v9 = (uint64_t *)(a2 + v7);
  unint64_t v10 = *(void *)(a1 + v7 + 8);
  if (v10 >> 60 != 15)
  {
    unint64_t v11 = v9[1];
    if (v11 >> 60 != 15)
    {
      uint64_t v12 = *v8;
      *uint64_t v8 = *v9;
      v8[1] = v11;
      sub_100016F9C(v12, v10);
      goto LABEL_6;
    }

    sub_100119388((uint64_t)v8);
  }

  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
LABEL_6:
  uint64_t v13 = a3[6];
  unint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *unint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[7];
  uint64_t v19 = a3[8];
  uint64_t v20 = a1 + v18;
  uint64_t v21 = a2 + v18;
  *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
  *(_BYTE *)(v20 + 4) = *(_BYTE *)(v21 + 4);
  *(_DWORD *)(a1 + v19) = *(_DWORD *)(a2 + v19);
  return a1;
}

uint64_t sub_10011952C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100119538);
}

uint64_t sub_100119538(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 24) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  int v10 = v9 - 1;
  if (v10 < 0) {
    int v10 = -1;
  }
  return (v10 + 1);
}

uint64_t sub_1001195C4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1001195D0);
}

uint64_t sub_1001195D0(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 24) + 8) = a2;
  return result;
}

uint64_t sub_10011964C(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = &unk_1007ED028;
    void v4[2] = &unk_1007ED040;
    void v4[3] = &unk_1007ED068;
    v4[4] = (char *)&value witness table for Builtin.Int32 + 64;
    swift_initStructMetadata(a1, 256LL, 5LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1001196E0(uint64_t a1)
{
  uint64_t v3 = *v1;
  uint64_t v4 = swift_allocObject(&unk_10093EBE8, 40LL, 7LL);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a1;
  *(_BYTE *)(v4 + 24) = 3;
  *(void *)(v4 + 32) = v3;
  uint64_t v5 = sub_100004AEC(&qword_1009A1B68);
  swift_allocObject(v5, *(unsigned int *)(v5 + 48), *(unsigned __int16 *)(v5 + 52));
  swift_bridgeObjectRetain(a1);
  return Future.init(_:)(sub_100119DD0, v4);
}

uint64_t sub_100119768(void (*a1)(void), uint64_t a2, uint64_t a3, int a4, uint64_t a5)
{
  int v10 = (uint64_t *)sub_100004AEC(&qword_1009A1B70);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v59 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for AccessoryMetadata(0LL);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v69 = (char *)v59 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v68 = *(void *)(a3 + 16);
  if (v68)
  {
    int v62 = a4;
    uint64_t v17 = a3 + ((v15[80] + 32LL) & ~(unint64_t)v15[80]);
    uint64_t v18 = *(int *)(v14 + 20);
    uint64_t v66 = v15;
    uint64_t v67 = v17;
    uint64_t v19 = (uint64_t *)(v17 + v18);
    uint64_t v20 = *v19;
    unint64_t v21 = v19[1];
    sub_10001736C(*v19, v21);
    BOOL v22 = sub_1005E22FC(v20, v21);
    sub_100016F9C(v20, v21);
    if (v22)
    {
      if (qword_10099B120 != -1) {
        swift_once(&qword_10099B120, sub_100118994);
      }
      uint64_t v23 = type metadata accessor for Logger(0LL);
      uint64_t v24 = sub_10000A720(v23, (uint64_t)qword_100A2A1E0);
      uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
      os_log_type_t v26 = static os_log_type_t.default.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v27 = 0;
        _os_log_impl((void *)&_mh_execute_header, v25, v26, "Skip fetching product info for AirTag", v27, 2u);
        swift_slowDealloc(v27, -1LL, -1LL);
      }

      uint64_t v28 = type metadata accessor for BluetoothCommunicationCoordinator.Error(0LL);
      uint64_t v29 = v12;
      uint64_t v30 = 12LL;
      goto LABEL_27;
    }

    uint64_t v37 = swift_allocObject(&unk_10093EC10, 40LL, 7LL);
    *(void *)(v37 + swift_weakDestroy(v0 + 16) = a3;
    *(_BYTE *)(v37 + 24) = v62;
    *(void *)(v37 + 32) = a5;
    swift_bridgeObjectRetain(a3);
    uint64_t v38 = sub_100004AEC(&qword_1009A1B88);
    unsafeFromAsyncTask<A>(_:)(&unk_1009A1B80, v37, v38);
    swift_release();
    if (!v72)
    {
      if (qword_10099B120 != -1) {
        swift_once(&qword_10099B120, sub_100118994);
      }
      uint64_t v57 = type metadata accessor for Logger(0LL);
      uint64_t v58 = sub_10000A720(v57, (uint64_t)qword_100A2A1E0);
      uint64_t v33 = (os_log_s *)Logger.logObject.getter(v58);
      os_log_type_t v34 = static os_log_type_t.error.getter(v33);
      if (!os_log_type_enabled(v33, v34)) {
        goto LABEL_26;
      }
      uint64_t v35 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v35 = 0;
      uint64_t v36 = "retrieveProductInfo: invalid parameters";
      goto LABEL_25;
    }

    uint64_t v60 = a2;
    uint64_t v61 = a1;
    uint64_t v74 = (uint64_t)v72;
    __int128 v75 = v73;
    uint64_t v39 = qword_10099B120;
    v59[1] = a3;
    __n128 v40 = swift_bridgeObjectRetain(a3);
    if (v39 != -1) {
      swift_once(&qword_10099B120, sub_100118994);
    }
    uint64_t v41 = 0LL;
    uint64_t v65 = &v71;
    int v10 = qword_100A2A1E0;
    v40.n128_u64[0] = 136315138LL;
    __n128 v64 = v40;
    uint64_t v63 = (char *)&type metadata for Any + 8;
    uint64_t v12 = v66;
    uint64_t v42 = (uint64_t)v69;
    while (1)
    {
      uint64_t v43 = v41 + 1;
      if (__OFADD__(v41, 1LL)) {
        break;
      }
      uint64_t v44 = v67 + *((void *)v12 + 9) * v41;
      uint64_t v45 = type metadata accessor for Logger(0LL);
      sub_10000A720(v45, (uint64_t)qword_100A2A1E0);
      uint64_t v46 = sub_10001DC4C(v44, v42, type metadata accessor for AccessoryMetadata);
      unint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
      os_log_type_t v48 = static os_log_type_t.info.getter(v47);
      if (os_log_type_enabled(v47, v48))
      {
        uint64_t v49 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        a1 = (void (*)(void))swift_slowAlloc(32LL, -1LL);
        uint64_t v72 = a1;
        *(_DWORD *)uint64_t v49 = v64.n128_u32[0];
        uint64_t v50 = sub_100089B5C();
        uint64_t v70 = sub_1003F11D4(v50, v51, (uint64_t *)&v72);
        uint64_t v12 = v66;
        uint64_t v42 = (uint64_t)v69;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v70, v65, v49 + 4, v49 + 12);
        swift_bridgeObjectRelease();
        sub_100018C68(v42, type metadata accessor for AccessoryMetadata);
        _os_log_impl((void *)&_mh_execute_header, v47, v48, "retrieveProductInfo: %s", v49, 0xCu);
        swift_arrayDestroy(a1, 1LL, v63);
        swift_slowDealloc(a1, -1LL, -1LL);
        uint64_t v52 = v49;
        int v10 = qword_100A2A1E0;
        swift_slowDealloc(v52, -1LL, -1LL);
      }

      else
      {
        sub_100018C68(v42, type metadata accessor for AccessoryMetadata);
      }

      ++v41;
      if (v43 == v68)
      {
        swift_bridgeObjectRelease();
        uint64_t v53 = type metadata accessor for Transaction(0LL);
        __chkstk_darwin(v53);
        LOBYTE(v59[-4]) = v62;
        v59[-3] = &v74;
        uint64_t v54 = v60;
        v59[-2] = v61;
        v59[-1] = v54;
        static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.BluetoothCommunicationCoordinator.retrieveProductInfo",  83LL,  2LL,  sub_100122BC4,  &v59[-6]);
        __int128 v55 = v75;
        swift_bridgeObjectRelease();
        return sub_100016F9C(v55, *((unint64_t *)&v55 + 1));
      }
    }

    __break(1u);
  }

  else if (qword_10099B120 == -1)
  {
    goto LABEL_9;
  }

  swift_once(&qword_10099B120, sub_100118994);
LABEL_9:
  uint64_t v31 = type metadata accessor for Logger(0LL);
  uint64_t v32 = sub_10000A720(v31, (uint64_t)qword_100A2A1E0);
  uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
  os_log_type_t v34 = static os_log_type_t.error.getter(v33);
  if (os_log_type_enabled(v33, v34))
  {
    uint64_t v35 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v35 = 0;
    uint64_t v36 = "retrieveProductInfo: No metadata found.";
LABEL_25:
    _os_log_impl((void *)&_mh_execute_header, v33, v34, v36, v35, 2u);
    swift_slowDealloc(v35, -1LL, -1LL);
  }

uint64_t sub_100119DAC()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100119DD0(void (*a1)(void), uint64_t a2)
{
  return sub_100119768(a1, a2, *(void *)(v2 + 16), *(unsigned __int8 *)(v2 + 24), *(void *)(v2 + 32));
}

uint64_t sub_100119DE0(uint64_t a1, uint64_t a2, char a3)
{
  *(_BYTE *)(v3 + 64) = a3;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  return swift_task_switch(sub_100119DFC, 0LL, 0LL);
}

uint64_t sub_100119DFC()
{
  uint64_t v1 = qword_10099B128;
  swift_bridgeObjectRetain(*(void *)(v0 + 24));
  if (v1 != -1) {
    swift_once(&qword_10099B128, sub_100118A08);
  }
  uint64_t v2 = qword_100A2A1F8;
  uint64_t v3 = unk_1009B7A64;
  uint64_t v6 = (char *)&dword_1009B7A60 + dword_1009B7A60;
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc(v3);
  *(void *)(v0 + 32) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100119EB0;
  return ((uint64_t (*)(void, void, void, uint64_t))v6)( *(void *)(v0 + 24),  0LL,  *(unsigned __int8 *)(v0 + 64),  v2);
}

uint64_t sub_100119EB0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(*(void *)v3 + 32LL);
  void v4[5] = a1;
  v4[6] = a2;
  v4[7] = a3;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_100119F10, 0LL, 0LL);
}

uint64_t sub_100119F10()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 16);
  *(_OWORD *)uint64_t v2 = *(_OWORD *)(v0 + 40);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v1;
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100119F2C(uint64_t a1)
{
  uint64_t v4 = *(void *)(v1 + 16);
  char v5 = *(_BYTE *)(v1 + 24);
  uint64_t v6 = swift_task_alloc(dword_1009A1B7C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)uint64_t v6 = v2;
  *(void *)(v6 + 8) = sub_1000159BC;
  *(_BYTE *)(v6 + 64) = v5;
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v6 + 24) = v4;
  return swift_task_switch(sub_100119DFC, 0LL, 0LL);
}

uint64_t sub_100119FA0(uint64_t a1, char a2, uint64_t *a3, uint64_t a4, uint64_t a5)
{
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A6DB0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v37 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for AccessoryInfoEndPoint(0LL);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v37 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v37 - v18;
  __chkstk_darwin(v17);
  unint64_t v21 = (char *)&v37 - v20;
  if (a2 == 2) {
    BOOL v22 = (unsigned int *)&enum case for FMNAccountType.thirdPartyAccessory(_:);
  }
  else {
    BOOL v22 = (unsigned int *)&enum case for FMNAccountType.accessory(_:);
  }
  uint64_t v23 = *v22;
  uint64_t v24 = type metadata accessor for FMNAccountType(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v24 - 8) + 104LL))(v19, v23, v24);
  sub_10002218C((uint64_t)v19, (uint64_t)v21, type metadata accessor for AccessoryInfoEndPoint);
  uint64_t v25 = type metadata accessor for SearchPartyURLSessionFactory(0LL);
  swift_allocObject(v25, *(unsigned int *)(v25 + 48), *(unsigned __int16 *)(v25 + 52));
  uint64_t v26 = type metadata accessor for FMNMockingPreferences(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v26 - 8) + 56LL))(v12, 1LL, 1LL, v26);
  uint64_t v27 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0LL, 0LL, v12);
  uint64_t v28 = type metadata accessor for ServerInteractionController(0LL);
  uint64_t v29 = swift_allocObject(v28, *(unsigned int *)(v28 + 48), *(unsigned __int16 *)(v28 + 52));
  sub_10001DC4C((uint64_t)v21, (uint64_t)v16, type metadata accessor for AccessoryInfoEndPoint);
  uint64_t v30 = (void *)sub_1004317E4((uint64_t)v16, v27, v29);
  sub_100018C68((uint64_t)v21, type metadata accessor for AccessoryInfoEndPoint);
  uint64_t v31 = *a3;
  uint64_t v32 = a3[1];
  unint64_t v33 = a3[2];
  swift_bridgeObjectRetain(v31);
  sub_10001736C(v32, v33);
  sub_100431DCC(v31, v32, v33, 0LL, v30);
  swift_bridgeObjectRelease();
  sub_100016F9C(v32, v33);
  os_log_type_t v34 = (void *)swift_allocObject(&unk_10093EC38, 40LL, 7LL);
  v34[2] = a1;
  v34[3] = a4;
  v34[4] = a5;
  swift_retain();
  swift_retain();
  Future.addFailure(block:)(sub_100122BE8, v34);
  swift_release();
  swift_release();
  uint64_t v35 = (void *)swift_allocObject(&unk_10093EC60, 40LL, 7LL);
  v35[2] = a1;
  v35[3] = a4;
  v35[4] = a5;
  swift_retain();
  swift_retain();
  Future.addSuccess(block:)(sub_100122C24, v35);
  swift_release();
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10011A294(uint64_t a1, uint64_t a2, void (*a3)(void))
{
  uint64_t v5 = sub_100004AEC(&qword_1009A1B70);
  __chkstk_darwin(v5);
  uint64_t v7 = (uint64_t *)((char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  Transaction.capture()();
  if (qword_10099B120 != -1) {
    swift_once(&qword_10099B120, sub_100118994);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  sub_10000A720(v8, (uint64_t)qword_100A2A1E0);
  swift_errorRetain(a1);
  uint64_t v9 = swift_errorRetain(a1);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.error.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v20 = a3;
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v19 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v12 = 138543362;
    swift_errorRetain(a1);
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError(a1);
    uint64_t v21 = v13;
    a3 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v21, &v22, v12 + 4, v12 + 12);
    uint64_t v14 = v19;
    *uint64_t v19 = v13;
    swift_errorRelease(a1);
    swift_errorRelease(a1);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Error in product info request %{public}@", v12, 0xCu);
    uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v14, 1LL, v15);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(a1);
    swift_errorRelease(a1);
  }

  *uint64_t v7 = a1;
  uint64_t v16 = type metadata accessor for BluetoothCommunicationCoordinator.Error(0LL);
  swift_storeEnumTagMultiPayload(v7, v16, 0LL);
  swift_storeEnumTagMultiPayload(v7, v5, 1LL);
  swift_errorRetain(a1);
  a3(v7);
  return sub_100015794((uint64_t)v7, &qword_1009A1B70);
}

uint64_t sub_10011A4EC(uint64_t a1, uint64_t a2, void (*a3)(uint64_t), uint64_t a4)
{
  uint64_t v7 = sub_100004AEC(&qword_10099CE68);
  __chkstk_darwin(v7);
  uint64_t v132 = (uint64_t)&v116 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for AccessoryProductInfo(0LL);
  uint64_t v131 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v134 = (uint8_t *)&v116 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v130 = (uint64_t)&v116 - v12;
  uint64_t v120 = type metadata accessor for AccessoryInfoResponseContent(0LL);
  uint64_t v122 = *(void *)(v120 - 8);
  uint64_t v13 = __chkstk_darwin(v120);
  uint64_t v133 = (uint64_t)&v116 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v116 - v15;
  uint64_t v17 = sub_100004AEC(&qword_1009A1B70);
  __chkstk_darwin(v17);
  uint64_t v127 = (uint8_t **)((char *)&v116 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v128 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  uint64_t v19 = *(void *)(v128 - 8);
  uint64_t v20 = __chkstk_darwin(v128);
  uint64_t v22 = (char *)&v116 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v20);
  uint64_t v121 = (char *)&v116 - v24;
  __chkstk_darwin(v23);
  uint64_t v125 = (char *)&v116 - v25;
  uint64_t v26 = type metadata accessor for String.Encoding(0LL);
  __chkstk_darwin(v26);
  uint64_t v28 = (char *)&v116 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Transaction.capture()();
  if (FMNServerInteractionController.FMNResponseFields.statusCode.getter(v29) == 200)
  {
    uint64_t v126 = a3;
    uint64_t v30 = FMNServerInteractionController.FMNResponseFields.data.getter(200LL);
    unint64_t v32 = v31;
    static String.Encoding.utf8.getter(v30);
    uint64_t v33 = String.init(data:encoding:)(v30, v32, v28);
    unint64_t v35 = v34;
    sub_100016F9C(v30, v32);
    uint64_t v129 = v9;
    uint64_t v123 = a4;
    uint64_t v124 = v17;
    if (v35)
    {
      if (qword_10099B120 != -1) {
        swift_once(&qword_10099B120, sub_100118994);
      }
      uint64_t v36 = type metadata accessor for Logger(0LL);
      sub_10000A720(v36, (uint64_t)qword_100A2A1E0);
      swift_bridgeObjectRetain(v35);
      uint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
      os_log_type_t v39 = static os_log_type_t.info.getter(v38);
      if (os_log_type_enabled(v38, v39))
      {
        __n128 v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v41 = swift_slowAlloc(32LL, -1LL);
        uint64_t v135 = v41;
        *(_DWORD *)__n128 v40 = 136315138;
        uint64_t v119 = v40 + 4;
        swift_bridgeObjectRetain(v35);
        uint64_t v137 = sub_1003F11D4(v33, v35, &v135);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v119, v40 + 12);
        swift_bridgeObjectRelease_n(v35, 3LL);
        _os_log_impl((void *)&_mh_execute_header, v38, v39, "response data: %s", v40, 0xCu);
        swift_arrayDestroy(v41, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v41, -1LL, -1LL);
        swift_slowDealloc(v40, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v35, 2LL);
      }
    }

    uint64_t v58 = v125;
    if (qword_10099B120 != -1) {
      swift_once(&qword_10099B120, sub_100118994);
    }
    uint64_t v59 = type metadata accessor for Logger(0LL);
    uint64_t v60 = sub_10000A720(v59, (uint64_t)qword_100A2A1E0);
    uint64_t v61 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 16);
    uint64_t v118 = a1;
    uint64_t v62 = a1;
    uint64_t v63 = v128;
    uint64_t v117 = v61;
    uint64_t v64 = v61(v58, v62, v128);
    uint64_t v119 = (uint8_t *)v60;
    uint64_t v65 = (os_log_s *)Logger.logObject.getter(v64);
    os_log_type_t v66 = static os_log_type_t.default.getter(v65);
    if (os_log_type_enabled(v65, v66))
    {
      uint64_t v67 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v68 = swift_slowAlloc(32LL, -1LL);
      uint64_t v135 = v68;
      *(_DWORD *)uint64_t v67 = 136446210;
      uint64_t v116 = v67 + 4;
      uint64_t v69 = sub_100007864( &qword_1009A6DC0,  (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields,  (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter(v63, v69);
      uint64_t v137 = sub_1003F11D4(v70, v71, &v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v116, v67 + 12);
      swift_bridgeObjectRelease();
      uint64_t v72 = *(void (**)(char *, uint64_t))(v19 + 8);
      v72(v58, v63);
      _os_log_impl((void *)&_mh_execute_header, v65, v66, "response: %{public}s", v67, 0xCu);
      swift_arrayDestroy(v68, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v68, -1LL, -1LL);
      swift_slowDealloc(v67, -1LL, -1LL);
    }

    else
    {
      uint64_t v72 = *(void (**)(char *, uint64_t))(v19 + 8);
      v72(v58, v63);
    }

    __int128 v73 = v126;
    uint64_t v74 = type metadata accessor for JSONDecoder(0LL);
    uint64_t v75 = swift_allocObject(v74, *(unsigned int *)(v74 + 48), *(unsigned __int16 *)(v74 + 52));
    uint64_t v76 = JSONDecoder.init()(v75);
    uint64_t v77 = v118;
    uint64_t v78 = FMNServerInteractionController.FMNResponseFields.data.getter(v76);
    unint64_t v80 = v79;
    unint64_t v81 = sub_100122C30();
    uint64_t v125 = (char *)v76;
    dispatch thunk of JSONDecoder.decode<A>(_:from:)( &type metadata for AccessoryInfoResponse,  v78,  v80,  &type metadata for AccessoryInfoResponse,  v81);
    sub_100016F9C(v78, v80);
    uint64_t v82 = v135;
    uint64_t v83 = *(void *)(v135 + 16);
    if (v83)
    {
      uint64_t v84 = swift_bridgeObjectRetain_n(v135, 2LL);
      uint64_t v85 = (os_log_s *)Logger.logObject.getter(v84);
      os_log_type_t v86 = static os_log_type_t.info.getter(v85);
      BOOL v87 = os_log_type_enabled(v85, v86);
      uint64_t v128 = v82;
      if (v87)
      {
        uint64_t v88 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v89 = swift_slowAlloc(32LL, -1LL);
        *(_DWORD *)uint64_t v88 = 136315138;
        uint64_t v137 = v89;
        uint64_t v121 = (char *)(v88 + 4);
        uint64_t v135 = 0LL;
        unint64_t v136 = 0xE000000000000000LL;
        swift_bridgeObjectRetain(v82);
        _StringGuts.grow(_:)(34LL);
        swift_bridgeObjectRelease();
        uint64_t v135 = 0xD000000000000020LL;
        unint64_t v136 = 0x8000000100854800LL;
        swift_bridgeObjectRetain(v82);
        v91._countAndFlagsBits = Array.description.getter(v90, v120);
        String.append(_:)(v91);
        swift_bridgeObjectRelease_n(v128, 2LL);
        uint64_t v82 = v128;
        swift_bridgeObjectRelease();
        uint64_t v135 = sub_1003F11D4(v135, v136, &v137);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v135, &v136, v121, v88 + 12);
        swift_bridgeObjectRelease_n(v82, 2LL);
        swift_bridgeObjectRelease();
        _os_log_impl((void *)&_mh_execute_header, v85, v86, "decodedResponse: %s", v88, 0xCu);
        swift_arrayDestroy(v89, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v89, -1LL, -1LL);
        swift_slowDealloc(v88, -1LL, -1LL);
      }

      else
      {

        swift_bridgeObjectRelease_n(v82, 2LL);
      }

      uint64_t v103 = v129;
      uint64_t v104 = v82 + ((*(unsigned __int8 *)(v122 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v122 + 80));
      uint64_t v105 = *(void *)(v122 + 72);
      swift_bridgeObjectRetain(v82);
      uint64_t v106 = _swiftEmptyArrayStorage;
      uint64_t v107 = v131;
      do
      {
        sub_10001DC4C(v104, (uint64_t)v16, type metadata accessor for AccessoryInfoResponseContent);
        uint64_t v108 = v133;
        sub_10001DC4C((uint64_t)v16, v133, type metadata accessor for AccessoryInfoResponseContent);
        uint64_t v109 = v108;
        uint64_t v110 = v132;
        sub_1007438A8(v109, v132);
        sub_100018C68((uint64_t)v16, type metadata accessor for AccessoryInfoResponseContent);
        if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v107 + 48))(v110, 1LL, v103) == 1)
        {
          sub_100015794(v110, &qword_10099CE68);
        }

        else
        {
          uint64_t v111 = v130;
          sub_10002218C(v110, v130, type metadata accessor for AccessoryProductInfo);
          sub_10002218C(v111, (uint64_t)v134, type metadata accessor for AccessoryProductInfo);
          if ((swift_isUniquelyReferenced_nonNull_native(v106) & 1) == 0) {
            uint64_t v106 = (void *)sub_1004C5210(0, v106[2] + 1LL, 1, (unint64_t)v106);
          }
          unint64_t v113 = v106[2];
          unint64_t v112 = v106[3];
          if (v113 >= v112 >> 1) {
            uint64_t v106 = (void *)sub_1004C5210(v112 > 1, v113 + 1, 1, (unint64_t)v106);
          }
          v106[2] = v113 + 1;
          uint64_t v107 = v131;
          sub_10002218C( (uint64_t)v134,  (uint64_t)v106 + ((*(unsigned __int8 *)(v107 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v107 + 80))
          + *(void *)(v131 + 72) * v113,
            type metadata accessor for AccessoryProductInfo);
          uint64_t v103 = v129;
        }

        v104 += v105;
        --v83;
      }

      while (v83);
      swift_bridgeObjectRelease_n(v128, 2LL);
      uint64_t v57 = (uint64_t)v127;
      *uint64_t v127 = v106;
      swift_storeEnumTagMultiPayload(v57, v124, 0LL);
      v126(v57);
    }

    else
    {
      swift_bridgeObjectRelease();
      uint64_t v92 = v121;
      uint64_t v93 = v77;
      uint64_t v94 = v128;
      uint64_t v95 = v117(v121, v93, v128);
      uint64_t v96 = (os_log_s *)Logger.logObject.getter(v95);
      os_log_type_t v97 = static os_log_type_t.error.getter(v96);
      if (os_log_type_enabled(v96, v97))
      {
        uint64_t v98 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v99 = swift_slowAlloc(32LL, -1LL);
        *(_DWORD *)uint64_t v98 = 136446210;
        uint64_t v134 = v98 + 4;
        uint64_t v135 = v99;
        uint64_t v100 = sub_100007864( &qword_1009A6DC0,  (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields,  (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
        uint64_t v101 = dispatch thunk of CustomStringConvertible.description.getter(v94, v100);
        uint64_t v137 = sub_1003F11D4(v101, v102, &v135);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v134, v98 + 12);
        swift_bridgeObjectRelease();
        v72(v92, v94);
        _os_log_impl((void *)&_mh_execute_header, v96, v97, "invalidResponse: %{public}s", v98, 0xCu);
        swift_arrayDestroy(v99, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v99, -1LL, -1LL);
        swift_slowDealloc(v98, -1LL, -1LL);
      }

      else
      {
        v72(v92, v94);
      }

      uint64_t v57 = (uint64_t)v127;
      uint64_t v114 = type metadata accessor for BluetoothCommunicationCoordinator.Error(0LL);
      swift_storeEnumTagMultiPayload(v57, v114, 11LL);
      swift_storeEnumTagMultiPayload(v57, v124, 1LL);
      v73(v57);
    }

    swift_release();
  }

  else
  {
    if (qword_10099B120 != -1) {
      swift_once(&qword_10099B120, sub_100118994);
    }
    uint64_t v42 = type metadata accessor for Logger(0LL);
    sub_10000A720(v42, (uint64_t)qword_100A2A1E0);
    uint64_t v43 = a1;
    uint64_t v44 = v128;
    uint64_t v45 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v19 + 16))(v22, v43, v128);
    uint64_t v46 = (os_log_s *)Logger.logObject.getter(v45);
    os_log_type_t v47 = static os_log_type_t.error.getter(v46);
    if (os_log_type_enabled(v46, v47))
    {
      uint64_t v48 = swift_slowAlloc(12LL, -1LL);
      uint64_t v123 = a4;
      uint64_t v49 = (uint8_t *)v48;
      uint64_t v50 = swift_slowAlloc(32LL, -1LL);
      uint64_t v126 = a3;
      uint64_t v124 = v17;
      uint64_t v51 = v50;
      uint64_t v135 = v50;
      *(_DWORD *)uint64_t v49 = 136315138;
      uint64_t v52 = sub_100007864( &qword_1009A6DC0,  (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields,  (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter(v44, v52);
      uint64_t v137 = sub_1003F11D4(v53, v54, &v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v137, &v138, v49 + 4, v49 + 12);
      swift_bridgeObjectRelease();
      (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v44);
      _os_log_impl((void *)&_mh_execute_header, v46, v47, "Product info check failed: %s", v49, 0xCu);
      swift_arrayDestroy(v51, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v55 = v51;
      uint64_t v17 = v124;
      a3 = v126;
      swift_slowDealloc(v55, -1LL, -1LL);
      swift_slowDealloc(v49, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(char *, uint64_t))(v19 + 8))(v22, v44);
    }

    uint64_t v56 = type metadata accessor for BluetoothCommunicationCoordinator.Error(0LL);
    uint64_t v57 = (uint64_t)v127;
    swift_storeEnumTagMultiPayload(v127, v56, 11LL);
    swift_storeEnumTagMultiPayload(v57, v17, 1LL);
    a3(v57);
  }

  return sub_100015794(v57, &qword_1009A1B70);
}

uint64_t sub_10011B39C(uint64_t a1, uint64_t a2, char a3)
{
  *(_BYTE *)(v3 + 176) = a3;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  uint64_t v4 = type metadata accessor for CentralManager.State(0LL);
  *(void *)(v3 + 32) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v3 + 40) = v5;
  *(void *)(v3 + 48) = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009B9450);
  *(void *)(v3 + 56) = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10011B424, 0LL, 0LL);
}

uint64_t sub_10011B424()
{
  uint64_t v1 = v0[7];
  v0[8] = type metadata accessor for CentralManager(0LL);
  uint64_t v2 = type metadata accessor for CentralManager.Options(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to CentralManager.__allocating_init(options:)[1]);
  v0[9] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_10011B4B0;
  return CentralManager.__allocating_init(options:)(v0[7]);
}

uint64_t sub_10011B4B0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 72LL);
  *(void *)(*(void *)v1 + 8Hasher.init(_seed:)(v1, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10011B50C, 0LL, 0LL);
}

uint64_t sub_10011B50C()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to CentralManagerProtocol.await(state:)[1]);
  v0[11] = v1;
  uint64_t v2 = sub_100007864( &qword_1009A1BA0,  (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager,  (uint64_t)&protocol conformance descriptor for CentralManager);
  *uint64_t v1 = v0;
  v1[1] = sub_10011B5A0;
  return CentralManagerProtocol.await(state:)(v0[6], v0[8], v2);
}

uint64_t sub_10011B5A0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 88LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 40LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 48LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 32LL);
  uint64_t v6 = *(void **)v1;
  v6[12] = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    return swift_task_switch(sub_10011B994, 0LL, 0LL);
  }
  v6[13] = v8;
  *uint64_t v8 = v6;
  v8[1] = sub_10011B678;
  return v9(v6[3]);
}

uint64_t sub_10011B678(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 104);
  *(void *)(v3 + 112) = a1;
  *(void *)(v3 + 120) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_10011B9D8;
  }
  else {
    uint64_t v5 = sub_10011B6E4;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_10011B6E4()
{
  uint64_t v1 = *(void *)(v0 + 112);
  if (v1)
  {
    uint64_t v12 = (uint64_t (*)(uint64_t, uint64_t, char))((char *)&dword_1009A1BB0 + dword_1009A1BB0);
    uint64_t v2 = (void *)swift_task_alloc(unk_1009A1BB4);
    *(void *)(v0 + 128) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10011B820;
    return v12(*(void *)(v0 + 16), v1, *(_BYTE *)(v0 + 176));
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 24);
    uint64_t v5 = type metadata accessor for AccessoryMetadataManager.Error(0LL);
    uint64_t v6 = sub_100007864( &qword_1009A1BA8,  type metadata accessor for AccessoryMetadataManager.Error,  (uint64_t)&unk_1007ED0C8);
    swift_allocError(v5, v6, 0LL, 0LL);
    uint64_t v8 = v7;
    uint64_t v9 = type metadata accessor for MACAddress(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL))(v8, v4, v9);
    uint64_t v10 = swift_storeEnumTagMultiPayload(v8, v5, 1LL);
    swift_willThrow(v10);
    swift_release();
    uint64_t v11 = *(void *)(v0 + 48);
    swift_task_dealloc(*(void *)(v0 + 56));
    swift_task_dealloc(v11);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10011B820()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = *(void *)(*v1 + 128);
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  if (v0)
  {
    v2[19] = v0;
    v2[20] = v5;
    uint64_t v6 = sub_10011BA1C;
  }

  else
  {
    v2[17] = v5;
    uint64_t v6 = sub_10011B8D4;
  }

  *uint64_t v5 = v4;
  v5[1] = v6;
  return v8();
}

uint64_t sub_10011B8D4()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 136LL);
  *(void *)(*(void *)v1 + 144LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10011BAE4;
  }
  else {
    uint64_t v3 = sub_10011B938;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10011B938()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 56);
  swift_release(*(void *)(v0 + 80));
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011B994()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 56));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011B9D8()
{
  uint64_t v1 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 56));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011BA1C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 160LL);
  *(void *)(*(void *)v1 + 168LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10011BB58;
  }
  else {
    uint64_t v3 = sub_10011BA80;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10011BA80()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 80);
  swift_willThrow();
  swift_release(v1);
  swift_release(v2);
  uint64_t v3 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 56));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011BAE4()
{
  v0[19] = v0[18];
  v0[20] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = (uint64_t *)sub_10011BA1C;
  return v3();
}

uint64_t sub_10011BB58()
{
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 80);
  swift_errorRelease(*(void *)(v0 + 152));
  swift_release(v1);
  swift_release(v2);
  uint64_t v3 = *(void *)(v0 + 48);
  swift_task_dealloc(*(void *)(v0 + 56));
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10011BBB4(uint64_t a1, uint64_t a2, char a3)
{
  *(_BYTE *)(v3 + 1480) = a3;
  *(void *)(v3 + 200) = a1;
  *(void *)(v3 + 208) = a2;
  uint64_t v4 = type metadata accessor for CentralManager.Error(0LL);
  *(void *)(v3 + 2swift_weakDestroy(v0 + 16) = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  *(void *)(v3 + 224) = v5;
  *(void *)(v3 + 232) = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for UUID(0LL);
  *(void *)(v3 + 240) = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  *(void *)(v3 + 248) = v7;
  *(void *)(v3 + 256) = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_10099E338);
  *(void *)(v3 + 264) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v3 + 272) = v9;
  *(void *)(v3 + 280) = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0LL);
  *(void *)(v3 + 288) = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  *(void *)(v3 + 296) = v11;
  *(void *)(v3 + 304) = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for Logger(0LL);
  *(void *)(v3 + 312) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v3 + 320) = v13;
  *(void *)(v3 + 328) = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009B9340);
  *(void *)(v3 + 336) = v14;
  uint64_t v15 = *(void *)(v14 - 8);
  *(void *)(v3 + 344) = v15;
  unint64_t v16 = (*(void *)(v15 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v3 + 352) = swift_task_alloc(v16);
  *(void *)(v3 + 360) = swift_task_alloc(v16);
  *(void *)(v3 + 368) = swift_task_alloc(v16);
  *(void *)(v3 + 376) = swift_task_alloc(v16);
  *(void *)(v3 + 384) = swift_task_alloc(v16);
  *(void *)(v3 + 392) = swift_task_alloc(v16);
  *(void *)(v3 + 400) = swift_task_alloc(v16);
  *(void *)(v3 + 408) = swift_task_alloc(v16);
  *(void *)(v3 + 4swift_weakDestroy(v0 + 16) = swift_task_alloc(v16);
  *(void *)(v3 + 424) = swift_task_alloc(v16);
  *(void *)(v3 + 432) = swift_task_alloc(v16);
  uint64_t v17 = sub_100004AEC(&qword_1009A1BB8);
  *(void *)(v3 + 440) = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  *(void *)(v3 + 448) = v18;
  unint64_t v19 = (*(void *)(v18 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v3 + 456) = swift_task_alloc(v19);
  *(void *)(v3 + 464) = swift_task_alloc(v19);
  *(void *)(v3 + 472) = swift_task_alloc(v19);
  *(void *)(v3 + 480) = swift_task_alloc(v19);
  *(void *)(v3 + 488) = swift_task_alloc(v19);
  *(void *)(v3 + 496) = swift_task_alloc(v19);
  *(void *)(v3 + 504) = swift_task_alloc(v19);
  *(void *)(v3 + 512) = swift_task_alloc(v19);
  *(void *)(v3 + 520) = swift_task_alloc(v19);
  *(void *)(v3 + 528) = swift_task_alloc(v19);
  uint64_t v20 = type metadata accessor for ContinuousClock.Instant(0LL);
  *(void *)(v3 + 536) = v20;
  uint64_t v21 = *(void *)(v20 - 8);
  *(void *)(v3 + 544) = v21;
  unint64_t v22 = (*(void *)(v21 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v3 + 552) = swift_task_alloc(v22);
  *(void *)(v3 + 560) = swift_task_alloc(v22);
  *(void *)(v3 + 568) = swift_task_alloc(v22);
  *(void *)(v3 + 576) = swift_task_alloc(v22);
  uint64_t v23 = sub_100004AEC(&qword_1009A1BC0);
  *(void *)(v3 + 584) = v23;
  uint64_t v24 = *(void *)(v23 - 8);
  *(void *)(v3 + 592) = v24;
  *(void *)(v3 + 600) = swift_task_alloc((*(void *)(v24 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = type metadata accessor for ContinuousClock(0LL);
  *(void *)(v3 + 608) = v25;
  uint64_t v26 = *(void *)(v25 - 8);
  *(void *)(v3 + 6swift_weakDestroy(v0 + 16) = v26;
  *(void *)(v3 + 624) = swift_task_alloc((*(void *)(v26 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10011BEA4, 0LL, 0LL);
}

uint64_t sub_10011BEA4(uint64_t a1)
{
  unsigned int v2 = *(unsigned __int8 *)(v1 + 1480);
  ContinuousClock.init()(a1);
  if (v2 >= 2)
  {
    uint64_t v15 = type metadata accessor for Service(0LL);
    if (v2 == 2)
    {
      unint64_t v16 = "87290102-3C51-43B1-A1A9-11B9DC38478B";
      uint64_t v17 = 36LL;
    }

    else
    {
      unint64_t v16 = "FD44";
      uint64_t v17 = 4LL;
    }

    uint64_t v18 = Identifier.init(stringLiteral:)(v16, v17, 2LL, v15);
    uint64_t v19 = ContinuousClock.now.getter(v18);
    static Task<>.checkCancellation()(v19);
    uint64_t v20 = type metadata accessor for Peripheral(0LL);
    *(void *)(v1 + 632) = v20;
    uint64_t v21 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
    *(void *)(v1 + 640) = v21;
    unint64_t v22 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.connect()[1]);
    *(void *)(v1 + 648) = v22;
    void *v22 = v1;
    v22[1] = sub_10011C288;
    return dispatch thunk of PeripheralProtocol.connect()(v20, v21);
  }

  else
  {
    unint64_t v3 = sub_100122CD4();
    uint64_t v46 = swift_allocError(&type metadata for CentralManager.Error, v3, 0LL, 0LL);
    *(void *)uint64_t v4 = 2LL;
    *(_OWORD *)(v4 + 8) = 0u;
    *(_OWORD *)(v4 + 24) = 0u;
    *(_BYTE *)(v4 + 40) = 11;
    swift_willThrow(v46);
    uint64_t v5 = *(void *)(v1 + 624);
    uint64_t v6 = *(void *)(v1 + 600);
    uint64_t v7 = *(void *)(v1 + 576);
    uint64_t v8 = *(void *)(v1 + 568);
    uint64_t v9 = *(void *)(v1 + 560);
    uint64_t v10 = *(void *)(v1 + 552);
    uint64_t v11 = *(void *)(v1 + 528);
    uint64_t v12 = *(void *)(v1 + 520);
    uint64_t v13 = *(void *)(v1 + 512);
    uint64_t v23 = *(void *)(v1 + 504);
    uint64_t v24 = *(void *)(v1 + 496);
    uint64_t v25 = *(void *)(v1 + 488);
    uint64_t v26 = *(void *)(v1 + 480);
    uint64_t v27 = *(void *)(v1 + 472);
    uint64_t v28 = *(void *)(v1 + 464);
    uint64_t v29 = *(void *)(v1 + 456);
    uint64_t v30 = *(void *)(v1 + 432);
    uint64_t v31 = *(void *)(v1 + 424);
    uint64_t v32 = *(void *)(v1 + 416);
    uint64_t v33 = *(void *)(v1 + 408);
    uint64_t v34 = *(void *)(v1 + 400);
    uint64_t v35 = *(void *)(v1 + 392);
    uint64_t v36 = *(void *)(v1 + 384);
    uint64_t v37 = *(void *)(v1 + 376);
    uint64_t v38 = *(void *)(v1 + 368);
    uint64_t v39 = *(void *)(v1 + 360);
    uint64_t v40 = *(void *)(v1 + 352);
    uint64_t v41 = *(void *)(v1 + 328);
    uint64_t v42 = *(void *)(v1 + 280);
    uint64_t v43 = *(void *)(v1 + 304);
    uint64_t v44 = *(void *)(v1 + 256);
    uint64_t v45 = *(void *)(v1 + 232);
    (*(void (**)(uint64_t, void))(*(void *)(v1 + 616) + 8LL))(v5, *(void *)(v1 + 608));
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v43);
    swift_task_dealloc(v42);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

uint64_t sub_10011C288()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 648LL);
  unint64_t v3 = *(void **)v1;
  v3[82] = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_10011C398, 0LL, 0LL);
  }
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.subscript.getter[1]);
  v3[83] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_10011C328;
  return dispatch thunk of PeripheralProtocol.subscript.getter(v3[75], v3[79], v3[80]);
}

uint64_t sub_10011C328(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 664);
  *(void *)(v3 + 672) = a1;
  *(void *)(v3 + 680) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_10011C7F0;
  }
  else {
    uint64_t v5 = sub_10011C43C;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_10011C398()
{
  v0[182] = v0[82];
  uint64_t v1 = type metadata accessor for Peripheral(0LL);
  uint64_t v2 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v1, v2);
}

uint64_t sub_10011C43C(uint64_t a1)
{
  uint64_t v2 = v1[85];
  static Task<>.checkCancellation()(a1);
  if (!v2)
  {
    sub_10003285C(0, 11LL, 0);
    __asm { BR              X9 }
  }

  (*(void (**)(void, void))(v1[68] + 8LL))(v1[72], v1[67]);
  swift_release();
  v1[182] = v2;
  uint64_t v3 = type metadata accessor for Peripheral(0LL);
  uint64_t v4 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v1[183] = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v3, v4);
}

uint64_t sub_10011C7F0()
{
  v0[182] = v0[85];
  uint64_t v1 = type metadata accessor for Peripheral(0LL);
  uint64_t v2 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v1, v2);
}

uint64_t sub_10011C894()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 712LL);
  *(void *)(*(void *)v1 + 72Hasher.init(_seed:)(v1, 0LL) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  if (v0)
  {
    uint64_t v3 = sub_10011CA50;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v3 = sub_10011C920;
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_10011C920(uint64_t a1)
{
  uint64_t v2 = v1[90];
  static Task<>.checkCancellation()(a1);
  if (v2)
  {
    (*(void (**)(void, void))(v1[68] + 8LL))(v1[72], v1[67]);
    swift_release();
    v1[182] = v2;
    uint64_t v3 = type metadata accessor for Peripheral(0LL);
    uint64_t v4 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
    uint64_t v5 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v1[183] = v5;
    *uint64_t v5 = v1;
    v5[1] = sub_100121C38;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v3, v4);
  }

  else
  {
    uint64_t v7 = type metadata accessor for Characteristic(0LL);
    v1[91] = v7;
    Identifier.init(stringLiteral:)("6AA50001-6352-4D57-A7B4-003A416FBB0B", 36LL, 2LL, v7);
    uint64_t v8 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
    v1[92] = v8;
    *uint64_t v8 = v1;
    v8[1] = sub_10011CB04;
    return dispatch thunk of ServiceProtocol.subscript.getter(v1[54], v1[87], v1[88]);
  }

uint64_t sub_10011CA50()
{
  uint64_t v1 = v0[72];
  uint64_t v2 = v0[68];
  uint64_t v3 = v0[67];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[182] = v0[90];
  uint64_t v4 = type metadata accessor for Peripheral(0LL);
  uint64_t v5 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v6 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v4, v5);
}

uint64_t sub_10011CB04(uint64_t a1)
{
  uint64_t v4 = *(void *)(*(void *)v2 + 736LL);
  uint64_t v5 = *(void **)v2;
  v5[93] = a1;
  v5[94] = v1;
  swift_task_dealloc(v4);
  uint64_t v6 = v5[54];
  uint64_t v7 = v5[42];
  uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v5[43] + 8LL);
  if (v1)
  {
    v8(v6, v7);
    return swift_task_switch(sub_10011CCBC, 0LL, 0LL);
  }

  else
  {
    v5[95] = v8;
    v8(v6, v7);
    uint64_t v10 = sub_100007864( &qword_1009A1BD8,  (uint64_t (*)(uint64_t))&type metadata accessor for Characteristic,  (uint64_t)&protocol conformance descriptor for Characteristic);
    v5[96] = v10;
    uint64_t v11 = (void *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.read()[1]);
    v5[97] = v11;
    *uint64_t v11 = v5;
    v11[1] = sub_10011CBF4;
    return dispatch thunk of CharacteristicProtocol.read()(v5[66], v5[91], v10);
  }

uint64_t sub_10011CBF4()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 776LL);
  uint64_t v3 = *(void **)v1;
  v3[98] = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0) {
    return swift_task_switch(sub_10011CDEC, 0LL, 0LL);
  }
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
  v3[99] = v5;
  unint64_t v6 = sub_100122C88();
  v3[100] = v6;
  *uint64_t v5 = v3;
  v5[1] = sub_10011CD70;
  return AsyncSequence.first()(v3 + 4, v3[55], v6);
}

uint64_t sub_10011CCBC()
{
  uint64_t v1 = v0[72];
  uint64_t v2 = v0[68];
  uint64_t v3 = v0[67];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[182] = v0[94];
  uint64_t v4 = type metadata accessor for Peripheral(0LL);
  uint64_t v5 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  unint64_t v6 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v6;
  *unint64_t v6 = v0;
  v6[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v4, v5);
}

uint64_t sub_10011CD70()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 792LL);
  *(void *)(*(void *)v1 + 808LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = v2[66];
  uint64_t v5 = v2[55];
  unint64_t v6 = *(void (**)(uint64_t, uint64_t))(v2[56] + 8LL);
  if (v0)
  {
    v6(v4, v5);
    uint64_t v7 = sub_10011CFE4;
  }

  else
  {
    v2[102] = v6;
    v6(v4, v5);
    uint64_t v7 = sub_10011CEA0;
  }

  return swift_task_switch(v7, 0LL, 0LL);
}

uint64_t sub_10011CDEC()
{
  uint64_t v1 = v0[72];
  uint64_t v2 = v0[68];
  uint64_t v3 = v0[67];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[182] = v0[98];
  uint64_t v4 = type metadata accessor for Peripheral(0LL);
  uint64_t v5 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  unint64_t v6 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v6;
  *unint64_t v6 = v0;
  v6[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v4, v5);
}

uint64_t sub_10011CEA0(uint64_t a1)
{
  uint64_t v2 = v1[101];
  uint64_t v4 = v1[4];
  unint64_t v3 = v1[5];
  v1[103] = v4;
  v1[104] = v3;
  static Task<>.checkCancellation()(a1);
  if (v2)
  {
    (*(void (**)(void, void))(v1[68] + 8LL))(v1[72], v1[67]);
    sub_1000182F0(v4, v3);
    swift_release();
    v1[182] = v2;
    uint64_t v5 = type metadata accessor for Peripheral(0LL);
    uint64_t v6 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
    uint64_t v7 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v1[183] = v7;
    *uint64_t v7 = v1;
    v7[1] = sub_100121C38;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v5, v6);
  }

  else
  {
    Identifier.init(stringLiteral:)("6AA50002-6352-4D57-A7B4-003A416FBB0B", 36LL, 2LL, v1[91]);
    uint64_t v9 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
    v1[105] = v9;
    *uint64_t v9 = v1;
    v9[1] = sub_10011D098;
    return dispatch thunk of ServiceProtocol.subscript.getter(v1[53], v1[87], v1[88]);
  }

uint64_t sub_10011CFE4()
{
  uint64_t v1 = v0[72];
  uint64_t v2 = v0[68];
  uint64_t v3 = v0[67];
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  v0[182] = v0[101];
  uint64_t v4 = type metadata accessor for Peripheral(0LL);
  uint64_t v5 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v6 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v4, v5);
}

uint64_t sub_10011D098(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 840);
  uint64_t v5 = *v2;
  *(void *)(v5 + 848) = a1;
  *(void *)(v5 + 856) = v1;
  swift_task_dealloc(v4);
  (*(void (**)(void, void))(v5 + 760))(*(void *)(v5 + 424), *(void *)(v5 + 336));
  if (v1) {
    return swift_task_switch(sub_10011D21C, 0LL, 0LL);
  }
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.read()[1]);
  *(void *)(v5 + 864) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_10011D15C;
  return dispatch thunk of CharacteristicProtocol.read()( *(void *)(v5 + 520),  *(void *)(v5 + 728),  *(void *)(v5 + 768));
}

uint64_t sub_10011D15C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 864LL);
  uint64_t v3 = *(void **)v1;
  v3[109] = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0) {
    return swift_task_switch(sub_10011D360, 0LL, 0LL);
  }
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
  v3[110] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_10011D2EC;
  return AsyncSequence.first()(v3 + 6, v3[55], v3[100]);
}

uint64_t sub_10011D21C()
{
  unint64_t v1 = v0[104];
  uint64_t v2 = v0[103];
  uint64_t v3 = v0[72];
  uint64_t v4 = v0[68];
  uint64_t v5 = v0[67];
  swift_release();
  sub_1000182F0(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v0[182] = v0[107];
  uint64_t v6 = type metadata accessor for Peripheral(0LL);
  uint64_t v7 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v6, v7);
}

uint64_t sub_10011D2EC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 880);
  *(void *)(*v1 + 888) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2 + 816))(*(void *)(v2 + 520), *(void *)(v2 + 440));
  if (v0) {
    uint64_t v4 = sub_10011D594;
  }
  else {
    uint64_t v4 = sub_10011D430;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10011D360()
{
  unint64_t v1 = v0[104];
  uint64_t v2 = v0[103];
  uint64_t v3 = v0[72];
  uint64_t v4 = v0[68];
  uint64_t v5 = v0[67];
  swift_release();
  sub_1000182F0(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v0[182] = v0[109];
  uint64_t v6 = type metadata accessor for Peripheral(0LL);
  uint64_t v7 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v6, v7);
}

uint64_t sub_10011D430(uint64_t a1)
{
  uint64_t v2 = v1[111];
  uint64_t v4 = v1[6];
  unint64_t v3 = v1[7];
  v1[112] = v4;
  v1[113] = v3;
  static Task<>.checkCancellation()(a1);
  if (v2)
  {
    unint64_t v5 = v1[104];
    uint64_t v6 = v1[103];
    (*(void (**)(void, void))(v1[68] + 8LL))(v1[72], v1[67]);
    sub_1000182F0(v4, v3);
    sub_1000182F0(v6, v5);
    swift_release();
    v1[182] = v2;
    uint64_t v7 = type metadata accessor for Peripheral(0LL);
    uint64_t v8 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
    uint64_t v9 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v1[183] = v9;
    *uint64_t v9 = v1;
    v9[1] = sub_100121C38;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v7, v8);
  }

  else
  {
    Identifier.init(stringLiteral:)("6AA50003-6352-4D57-A7B4-003A416FBB0B", 36LL, 2LL, v1[91]);
    uint64_t v11 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
    v1[114] = v11;
    *uint64_t v11 = v1;
    v11[1] = sub_10011D664;
    return dispatch thunk of ServiceProtocol.subscript.getter(v1[52], v1[87], v1[88]);
  }

uint64_t sub_10011D594()
{
  unint64_t v1 = v0[104];
  uint64_t v2 = v0[103];
  uint64_t v3 = v0[72];
  uint64_t v4 = v0[68];
  uint64_t v5 = v0[67];
  swift_release();
  sub_1000182F0(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  v0[182] = v0[111];
  uint64_t v6 = type metadata accessor for Peripheral(0LL);
  uint64_t v7 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v8 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v8;
  *uint64_t v8 = v0;
  v8[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v6, v7);
}

uint64_t sub_10011D664(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 912);
  uint64_t v5 = *v2;
  *(void *)(v5 + 920) = a1;
  *(void *)(v5 + 928) = v1;
  swift_task_dealloc(v4);
  (*(void (**)(void, void))(v5 + 760))(*(void *)(v5 + 416), *(void *)(v5 + 336));
  if (v1) {
    return swift_task_switch(sub_10011D7E8, 0LL, 0LL);
  }
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.read()[1]);
  *(void *)(v5 + 936) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_10011D728;
  return dispatch thunk of CharacteristicProtocol.read()( *(void *)(v5 + 512),  *(void *)(v5 + 728),  *(void *)(v5 + 768));
}

uint64_t sub_10011D728()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 936LL);
  uint64_t v3 = *(void **)v1;
  v3[118] = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0) {
    return swift_task_switch(sub_10011D948, 0LL, 0LL);
  }
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
  v3[119] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_10011D8D4;
  return AsyncSequence.first()(v3 + 8, v3[55], v3[100]);
}

uint64_t sub_10011D7E8()
{
  unint64_t v1 = v0[113];
  uint64_t v2 = v0[112];
  unint64_t v3 = v0[104];
  uint64_t v4 = v0[103];
  uint64_t v5 = v0[72];
  uint64_t v6 = v0[68];
  uint64_t v7 = v0[67];
  swift_release();
  sub_1000182F0(v4, v3);
  sub_1000182F0(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v0[182] = v0[116];
  uint64_t v8 = type metadata accessor for Peripheral(0LL);
  uint64_t v9 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v10;
  void *v10 = v0;
  v10[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v8, v9);
}

uint64_t sub_10011D8D4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 952);
  *(void *)(*v1 + 960) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2 + 816))(*(void *)(v2 + 512), *(void *)(v2 + 440));
  if (v0) {
    uint64_t v4 = sub_10011DBB8;
  }
  else {
    uint64_t v4 = sub_10011DA34;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10011D948()
{
  unint64_t v1 = v0[113];
  uint64_t v2 = v0[112];
  unint64_t v3 = v0[104];
  uint64_t v4 = v0[103];
  uint64_t v5 = v0[72];
  uint64_t v6 = v0[68];
  uint64_t v7 = v0[67];
  swift_release();
  sub_1000182F0(v4, v3);
  sub_1000182F0(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v0[182] = v0[118];
  uint64_t v8 = type metadata accessor for Peripheral(0LL);
  uint64_t v9 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v10;
  void *v10 = v0;
  v10[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v8, v9);
}

uint64_t sub_10011DA34(uint64_t a1)
{
  uint64_t v2 = v1[120];
  uint64_t v4 = v1[8];
  unint64_t v3 = v1[9];
  v1[121] = v4;
  v1[122] = v3;
  static Task<>.checkCancellation()(a1);
  if (v2)
  {
    unint64_t v5 = v1[113];
    uint64_t v6 = v1[112];
    unint64_t v7 = v1[104];
    uint64_t v8 = v1[103];
    (*(void (**)(void, void))(v1[68] + 8LL))(v1[72], v1[67]);
    sub_1000182F0(v4, v3);
    sub_1000182F0(v6, v5);
    sub_1000182F0(v8, v7);
    swift_release();
    v1[182] = v2;
    uint64_t v9 = type metadata accessor for Peripheral(0LL);
    uint64_t v10 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
    uint64_t v11 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v1[183] = v11;
    *uint64_t v11 = v1;
    v11[1] = sub_100121C38;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v9, v10);
  }

  else
  {
    Identifier.init(stringLiteral:)("6AA50004-6352-4D57-A7B4-003A416FBB0B", 36LL, 2LL, v1[91]);
    uint64_t v13 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
    v1[123] = v13;
    void *v13 = v1;
    v13[1] = sub_10011DCA4;
    return dispatch thunk of ServiceProtocol.subscript.getter(v1[51], v1[87], v1[88]);
  }

uint64_t sub_10011DBB8()
{
  unint64_t v1 = v0[113];
  uint64_t v2 = v0[112];
  unint64_t v3 = v0[104];
  uint64_t v4 = v0[103];
  uint64_t v5 = v0[72];
  uint64_t v6 = v0[68];
  uint64_t v7 = v0[67];
  swift_release();
  sub_1000182F0(v4, v3);
  sub_1000182F0(v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  v0[182] = v0[120];
  uint64_t v8 = type metadata accessor for Peripheral(0LL);
  uint64_t v9 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v10 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v10;
  void *v10 = v0;
  v10[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v8, v9);
}

uint64_t sub_10011DCA4(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 984);
  uint64_t v5 = *v2;
  *(void *)(v5 + 992) = a1;
  *(void *)(v5 + 1000) = v1;
  swift_task_dealloc(v4);
  (*(void (**)(void, void))(v5 + 760))(*(void *)(v5 + 408), *(void *)(v5 + 336));
  if (v1) {
    return swift_task_switch(sub_10011DE20, 0LL, 0LL);
  }
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.read()[1]);
  *(void *)(v5 + 1008) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_10011DD68;
  return dispatch thunk of CharacteristicProtocol.read()( *(void *)(v5 + 504),  *(void *)(v5 + 728),  *(void *)(v5 + 768));
}

uint64_t sub_10011DD68()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1008LL);
  unint64_t v3 = *(void **)v1;
  v3[127] = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_10011E1A0, 0LL, 0LL);
  }
  swift_release();
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
  v3[128] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_10011E12C;
  return AsyncSequence.first()(v3 + 10, v3[55], v3[100]);
}

uint64_t sub_10011DE20()
{
  uint64_t v1 = *(void *)(v0 + 1000);
  *(void *)(v0 + 184) = v1;
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 216);
  swift_errorRetain(v1);
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  if ((swift_dynamicCast(v2, v0 + 184, v4, v3, 0LL) & 1) != 0)
  {
    if ((*(unsigned int (**)(void, void))(*(void *)(v0 + 224) + 88LL))( *(void *)(v0 + 232),  *(void *)(v0 + 216)) == enum case for CentralManager.Error.missingCharacteristic(_:))
    {
      swift_errorRelease(v1);
      uint64_t v5 = swift_errorRelease(*(void *)(v0 + 184));
      *(_OWORD *)(v0 + 1040) = xmmword_1007E7660;
      static Task<>.checkCancellation()(v5);
      Identifier.init(stringLiteral:)("6AA50005-6352-4D57-A7B4-003A416FBB0B", 36LL, 2LL, *(void *)(v0 + 728));
      uint64_t v25 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
      *(void *)(v0 + 1056) = v25;
      *uint64_t v25 = v0;
      v25[1] = sub_10011E964;
      return dispatch thunk of ServiceProtocol.subscript.getter( *(void *)(v0 + 400),  *(void *)(v0 + 696),  *(void *)(v0 + 704));
    }

    uint64_t v14 = *(void *)(v0 + 968);
    unint64_t v15 = *(void *)(v0 + 904);
    uint64_t v16 = *(void *)(v0 + 896);
    unint64_t v17 = *(void *)(v0 + 832);
    uint64_t v18 = *(void *)(v0 + 824);
    uint64_t v19 = *(void *)(v0 + 576);
    uint64_t v20 = *(void *)(v0 + 544);
    uint64_t v21 = *(void *)(v0 + 536);
    unint64_t v29 = *(void *)(v0 + 976);
    uint64_t v31 = *(void *)(v0 + 232);
    uint64_t v27 = *(void *)(v0 + 224);
    uint64_t v28 = *(void *)(v0 + 216);
    swift_release();
    sub_1000182F0(v18, v17);
    sub_1000182F0(v16, v15);
    sub_1000182F0(v14, v29);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v31, v28);
  }

  else
  {
    unint64_t v30 = *(void *)(v0 + 976);
    uint64_t v6 = *(void *)(v0 + 968);
    unint64_t v7 = *(void *)(v0 + 904);
    uint64_t v8 = *(void *)(v0 + 896);
    unint64_t v9 = *(void *)(v0 + 832);
    uint64_t v10 = *(void *)(v0 + 824);
    uint64_t v11 = *(void *)(v0 + 576);
    uint64_t v12 = *(void *)(v0 + 544);
    uint64_t v13 = *(void *)(v0 + 536);
    swift_release();
    sub_1000182F0(v10, v9);
    sub_1000182F0(v8, v7);
    sub_1000182F0(v6, v30);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }

  swift_errorRelease(*(void *)(v0 + 184));
  *(void *)(v0 + 1456) = v1;
  uint64_t v22 = type metadata accessor for Peripheral(0LL);
  uint64_t v23 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v24 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  *(void *)(v0 + 1464) = v24;
  *uint64_t v24 = v0;
  v24[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v22, v23);
}

uint64_t sub_10011E12C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1024);
  *(void *)(*v1 + 1032) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2 + 816))(*(void *)(v2 + 504), *(void *)(v2 + 440));
  if (v0) {
    uint64_t v4 = sub_10011E658;
  }
  else {
    uint64_t v4 = sub_10011E4B4;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10011E1A0()
{
  uint64_t v1 = *(void *)(v0 + 1016);
  *(void *)(v0 + 184) = v1;
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 216);
  swift_errorRetain(v1);
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  if ((swift_dynamicCast(v2, v0 + 184, v4, v3, 0LL) & 1) != 0)
  {
    if ((*(unsigned int (**)(void, void))(*(void *)(v0 + 224) + 88LL))( *(void *)(v0 + 232),  *(void *)(v0 + 216)) == enum case for CentralManager.Error.missingCharacteristic(_:))
    {
      swift_errorRelease(v1);
      uint64_t v5 = swift_errorRelease(*(void *)(v0 + 184));
      *(_OWORD *)(v0 + 1040) = xmmword_1007E7660;
      static Task<>.checkCancellation()(v5);
      Identifier.init(stringLiteral:)("6AA50005-6352-4D57-A7B4-003A416FBB0B", 36LL, 2LL, *(void *)(v0 + 728));
      uint64_t v25 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
      *(void *)(v0 + 1056) = v25;
      *uint64_t v25 = v0;
      v25[1] = sub_10011E964;
      return dispatch thunk of ServiceProtocol.subscript.getter( *(void *)(v0 + 400),  *(void *)(v0 + 696),  *(void *)(v0 + 704));
    }

    uint64_t v14 = *(void *)(v0 + 968);
    unint64_t v15 = *(void *)(v0 + 904);
    uint64_t v16 = *(void *)(v0 + 896);
    unint64_t v17 = *(void *)(v0 + 832);
    uint64_t v18 = *(void *)(v0 + 824);
    uint64_t v19 = *(void *)(v0 + 576);
    uint64_t v20 = *(void *)(v0 + 544);
    uint64_t v21 = *(void *)(v0 + 536);
    unint64_t v29 = *(void *)(v0 + 976);
    uint64_t v31 = *(void *)(v0 + 232);
    uint64_t v27 = *(void *)(v0 + 224);
    uint64_t v28 = *(void *)(v0 + 216);
    swift_release();
    sub_1000182F0(v18, v17);
    sub_1000182F0(v16, v15);
    sub_1000182F0(v14, v29);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v31, v28);
  }

  else
  {
    unint64_t v30 = *(void *)(v0 + 976);
    uint64_t v6 = *(void *)(v0 + 968);
    unint64_t v7 = *(void *)(v0 + 904);
    uint64_t v8 = *(void *)(v0 + 896);
    unint64_t v9 = *(void *)(v0 + 832);
    uint64_t v10 = *(void *)(v0 + 824);
    uint64_t v11 = *(void *)(v0 + 576);
    uint64_t v12 = *(void *)(v0 + 544);
    uint64_t v13 = *(void *)(v0 + 536);
    swift_release();
    sub_1000182F0(v10, v9);
    sub_1000182F0(v8, v7);
    sub_1000182F0(v6, v30);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }

  swift_errorRelease(*(void *)(v0 + 184));
  *(void *)(v0 + 1456) = v1;
  uint64_t v22 = type metadata accessor for Peripheral(0LL);
  uint64_t v23 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v24 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  *(void *)(v0 + 1464) = v24;
  *uint64_t v24 = v0;
  v24[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v22, v23);
}

uint64_t sub_10011E4B4()
{
  uint64_t v2 = v0[10];
  unint64_t v1 = v0[11];
  uint64_t v3 = v0[129];
  v0[131] = v1;
  v0[130] = v2;
  static Task<>.checkCancellation()();
  if (v3)
  {
    unint64_t v4 = v0[122];
    uint64_t v5 = v0[121];
    unint64_t v6 = v0[113];
    uint64_t v7 = v0[112];
    unint64_t v8 = v0[104];
    uint64_t v9 = v0[103];
    uint64_t v15 = v0[68];
    uint64_t v16 = v0[67];
    uint64_t v17 = v0[72];
    swift_release();
    sub_1000182F0(v9, v8);
    sub_1000182F0(v7, v6);
    sub_1000182F0(v5, v4);
    sub_1000182F0(v2, v1);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    v0[182] = v3;
    uint64_t v10 = type metadata accessor for Peripheral(0LL);
    uint64_t v11 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
    uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v0[183] = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_100121C38;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
  }

  else
  {
    Identifier.init(stringLiteral:)("6AA50005-6352-4D57-A7B4-003A416FBB0B", 36LL, 2LL, v0[91]);
    uint64_t v14 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
    v0[132] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_10011E964;
    return dispatch thunk of ServiceProtocol.subscript.getter(v0[50], v0[87], v0[88]);
  }

uint64_t sub_10011E658()
{
  uint64_t v1 = *(void *)(v0 + 1032);
  *(void *)(v0 + 184) = v1;
  uint64_t v2 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 216);
  swift_errorRetain(v1);
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  if ((swift_dynamicCast(v2, v0 + 184, v4, v3, 0LL) & 1) != 0)
  {
    if ((*(unsigned int (**)(void, void))(*(void *)(v0 + 224) + 88LL))( *(void *)(v0 + 232),  *(void *)(v0 + 216)) == enum case for CentralManager.Error.missingCharacteristic(_:))
    {
      swift_errorRelease(v1);
      uint64_t v5 = swift_errorRelease(*(void *)(v0 + 184));
      *(_OWORD *)(v0 + 1040) = xmmword_1007E7660;
      static Task<>.checkCancellation()(v5);
      Identifier.init(stringLiteral:)("6AA50005-6352-4D57-A7B4-003A416FBB0B", 36LL, 2LL, *(void *)(v0 + 728));
      uint64_t v25 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
      *(void *)(v0 + 1056) = v25;
      *uint64_t v25 = v0;
      v25[1] = sub_10011E964;
      return dispatch thunk of ServiceProtocol.subscript.getter( *(void *)(v0 + 400),  *(void *)(v0 + 696),  *(void *)(v0 + 704));
    }

    uint64_t v14 = *(void *)(v0 + 968);
    unint64_t v15 = *(void *)(v0 + 904);
    uint64_t v16 = *(void *)(v0 + 896);
    unint64_t v17 = *(void *)(v0 + 832);
    uint64_t v18 = *(void *)(v0 + 824);
    uint64_t v19 = *(void *)(v0 + 576);
    uint64_t v20 = *(void *)(v0 + 544);
    uint64_t v21 = *(void *)(v0 + 536);
    unint64_t v29 = *(void *)(v0 + 976);
    uint64_t v31 = *(void *)(v0 + 232);
    uint64_t v27 = *(void *)(v0 + 224);
    uint64_t v28 = *(void *)(v0 + 216);
    swift_release();
    sub_1000182F0(v18, v17);
    sub_1000182F0(v16, v15);
    sub_1000182F0(v14, v29);
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v19, v21);
    (*(void (**)(uint64_t, uint64_t))(v27 + 8))(v31, v28);
  }

  else
  {
    unint64_t v30 = *(void *)(v0 + 976);
    uint64_t v6 = *(void *)(v0 + 968);
    unint64_t v7 = *(void *)(v0 + 904);
    uint64_t v8 = *(void *)(v0 + 896);
    unint64_t v9 = *(void *)(v0 + 832);
    uint64_t v10 = *(void *)(v0 + 824);
    uint64_t v11 = *(void *)(v0 + 576);
    uint64_t v12 = *(void *)(v0 + 544);
    uint64_t v13 = *(void *)(v0 + 536);
    swift_release();
    sub_1000182F0(v10, v9);
    sub_1000182F0(v8, v7);
    sub_1000182F0(v6, v30);
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }

  swift_errorRelease(*(void *)(v0 + 184));
  *(void *)(v0 + 1456) = v1;
  uint64_t v22 = type metadata accessor for Peripheral(0LL);
  uint64_t v23 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v24 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  *(void *)(v0 + 1464) = v24;
  *uint64_t v24 = v0;
  v24[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v22, v23);
}

uint64_t sub_10011E964(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 1056);
  uint64_t v5 = *v2;
  *(void *)(v5 + 1064) = a1;
  *(void *)(v5 + 1072) = v1;
  swift_task_dealloc(v4);
  (*(void (**)(void, void))(v5 + 760))(*(void *)(v5 + 400), *(void *)(v5 + 336));
  if (v1) {
    return swift_task_switch(sub_10011EAE8, 0LL, 0LL);
  }
  unint64_t v7 = (void *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.read()[1]);
  *(void *)(v5 + 1080) = v7;
  *unint64_t v7 = v5;
  v7[1] = sub_10011EA28;
  return dispatch thunk of CharacteristicProtocol.read()( *(void *)(v5 + 496),  *(void *)(v5 + 728),  *(void *)(v5 + 768));
}

uint64_t sub_10011EA28()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1080LL);
  uint64_t v3 = *(void **)v1;
  v3[136] = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0) {
    return swift_task_switch(sub_10011EC78, 0LL, 0LL);
  }
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
  v3[137] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_10011EC04;
  return AsyncSequence.first()(v3 + 2, v3[55], v3[100]);
}

uint64_t sub_10011EAE8()
{
  uint64_t v14 = v0[130];
  unint64_t v15 = v0[131];
  unint64_t v1 = v0[122];
  uint64_t v2 = v0[121];
  unint64_t v3 = v0[113];
  uint64_t v4 = v0[112];
  unint64_t v5 = v0[104];
  uint64_t v6 = v0[103];
  uint64_t v7 = v0[72];
  uint64_t v8 = v0[68];
  uint64_t v9 = v0[67];
  swift_release();
  sub_1000182F0(v6, v5);
  sub_1000182F0(v4, v3);
  sub_1000182F0(v2, v1);
  sub_1000182F0(v14, v15);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  v0[182] = v0[134];
  uint64_t v10 = type metadata accessor for Peripheral(0LL);
  uint64_t v11 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_10011EC04()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1096);
  *(void *)(*v1 + 1104) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2 + 816))(*(void *)(v2 + 496), *(void *)(v2 + 440));
  if (v0) {
    uint64_t v4 = sub_10011EF4C;
  }
  else {
    uint64_t v4 = sub_10011ED94;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10011EC78()
{
  uint64_t v14 = v0[130];
  unint64_t v15 = v0[131];
  unint64_t v1 = v0[122];
  uint64_t v2 = v0[121];
  unint64_t v3 = v0[113];
  uint64_t v4 = v0[112];
  unint64_t v5 = v0[104];
  uint64_t v6 = v0[103];
  uint64_t v7 = v0[72];
  uint64_t v8 = v0[68];
  uint64_t v9 = v0[67];
  swift_release();
  sub_1000182F0(v6, v5);
  sub_1000182F0(v4, v3);
  sub_1000182F0(v2, v1);
  sub_1000182F0(v14, v15);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  v0[182] = v0[136];
  uint64_t v10 = type metadata accessor for Peripheral(0LL);
  uint64_t v11 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_10011ED94()
{
  uint64_t v1 = v0[138];
  uint64_t v3 = v0[2];
  unint64_t v2 = v0[3];
  v0[139] = v3;
  v0[140] = v2;
  static Task<>.checkCancellation()();
  if (v1)
  {
    uint64_t v18 = v0[130];
    unint64_t v19 = v0[131];
    unint64_t v4 = v0[122];
    uint64_t v5 = v0[121];
    unint64_t v6 = v0[113];
    uint64_t v7 = v0[112];
    unint64_t v8 = v0[104];
    uint64_t v9 = v0[103];
    uint64_t v15 = v0[68];
    uint64_t v16 = v0[67];
    uint64_t v17 = v0[72];
    swift_release();
    sub_1000182F0(v9, v8);
    sub_1000182F0(v7, v6);
    sub_1000182F0(v5, v4);
    sub_1000182F0(v3, v2);
    sub_1000182F0(v18, v19);
    (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v17, v16);
    v0[182] = v1;
    uint64_t v10 = type metadata accessor for Peripheral(0LL);
    uint64_t v11 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
    uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v0[183] = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_100121C38;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
  }

  else
  {
    Identifier.init(stringLiteral:)("6AA50006-6352-4D57-A7B4-003A416FBB0B", 36LL, 2LL, v0[91]);
    uint64_t v14 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
    v0[141] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_10011F068;
    return dispatch thunk of ServiceProtocol.subscript.getter(v0[49], v0[87], v0[88]);
  }

uint64_t sub_10011EF4C()
{
  uint64_t v14 = v0[130];
  unint64_t v15 = v0[131];
  unint64_t v1 = v0[122];
  uint64_t v2 = v0[121];
  unint64_t v3 = v0[113];
  uint64_t v4 = v0[112];
  unint64_t v5 = v0[104];
  uint64_t v6 = v0[103];
  uint64_t v7 = v0[72];
  uint64_t v8 = v0[68];
  uint64_t v9 = v0[67];
  swift_release();
  sub_1000182F0(v6, v5);
  sub_1000182F0(v4, v3);
  sub_1000182F0(v2, v1);
  sub_1000182F0(v14, v15);
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
  v0[182] = v0[138];
  uint64_t v10 = type metadata accessor for Peripheral(0LL);
  uint64_t v11 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_10011F068(uint64_t a1)
{
  uint64_t v4 = *(void *)(*(void *)v2 + 1128LL);
  unint64_t v5 = *(void **)v2;
  v5[142] = a1;
  swift_task_dealloc(v4);
  uint64_t v6 = (void (*)(uint64_t, uint64_t))v5[95];
  uint64_t v7 = v5[49];
  uint64_t v8 = v5[42];
  if (v1)
  {
    swift_errorRelease(v1);
    v6(v7, v8);
    return swift_task_switch(sub_10011F214, 0LL, 0LL);
  }

  else
  {
    v6(v5[49], v5[42]);
    uint64_t v10 = (void *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.read()[1]);
    v5[143] = v10;
    void *v10 = v5;
    v10[1] = sub_10011F150;
    return dispatch thunk of CharacteristicProtocol.read()(v5[61], v5[91], v5[96]);
  }

uint64_t sub_10011F150()
{
  uint64_t v2 = (void *)*v1;
  uint64_t v3 = *(void *)(*v1 + 1144);
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  swift_release();
  if (v0)
  {
    swift_errorRelease(v0);
    return swift_task_switch(sub_100123870, 0LL, 0LL);
  }

  else
  {
    uint64_t v6 = (void *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
    v2[144] = v6;
    *uint64_t v6 = v4;
    v6[1] = sub_10011F3E0;
    return AsyncSequence.first()(v2 + 16, v2[55], v2[100]);
  }

uint64_t sub_10011F214()
{
  *(_OWORD *)(v0 + 1168) = xmmword_1007E7660;
  static Task<>.checkCancellation()();
  Identifier.init(stringLiteral:)("6AA50007-6352-4D57-A7B4-003A416FBB0B", 36LL, 2LL, *(void *)(v0 + 728));
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
  *(void *)(v0 + 1184) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_10011F644;
  return dispatch thunk of ServiceProtocol.subscript.getter( *(void *)(v0 + 384),  *(void *)(v0 + 696),  *(void *)(v0 + 704));
}

uint64_t sub_10011F3E0()
{
  uint64_t v2 = *(void **)v1;
  uint64_t v3 = *(void *)(*(void *)v1 + 1152LL);
  *(void *)(*(void *)v1 + 116Hasher.init(_seed:)(v1, 0LL) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = (void (*)(uint64_t, uint64_t))v2[102];
  uint64_t v5 = v2[61];
  uint64_t v6 = v2[55];
  if (v0)
  {
    swift_errorRelease(v0);
    v4(v5, v6);
    uint64_t v7 = sub_100123870;
  }

  else
  {
    v4(v5, v6);
    uint64_t v7 = sub_10011F478;
  }

  return swift_task_switch(v7, 0LL, 0LL);
}

uint64_t sub_10011F478()
{
  uint64_t v2 = v0[16];
  unint64_t v1 = v0[17];
  uint64_t v3 = v0[145];
  v0[147] = v1;
  v0[146] = v2;
  static Task<>.checkCancellation()();
  if (v3)
  {
    uint64_t v15 = v0[139];
    unint64_t v16 = v0[140];
    uint64_t v20 = v0[130];
    unint64_t v21 = v0[131];
    unint64_t v4 = v0[122];
    uint64_t v5 = v0[121];
    unint64_t v6 = v0[113];
    uint64_t v7 = v0[112];
    unint64_t v8 = v0[104];
    uint64_t v9 = v0[103];
    uint64_t v17 = v0[68];
    uint64_t v18 = v0[67];
    uint64_t v19 = v0[72];
    swift_release();
    sub_1000182F0(v9, v8);
    sub_1000182F0(v7, v6);
    sub_1000182F0(v5, v4);
    sub_1000182F0(v15, v16);
    sub_1000182F0(v2, v1);
    sub_1000182F0(v20, v21);
    (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v18);
    v0[182] = v3;
    uint64_t v10 = type metadata accessor for Peripheral(0LL);
    uint64_t v11 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
    uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v0[183] = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_100121C38;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
  }

  else
  {
    Identifier.init(stringLiteral:)("6AA50007-6352-4D57-A7B4-003A416FBB0B", 36LL, 2LL, v0[91]);
    uint64_t v14 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
    v0[148] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_10011F644;
    return dispatch thunk of ServiceProtocol.subscript.getter(v0[48], v0[87], v0[88]);
  }

uint64_t sub_10011F644(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 1184);
  uint64_t v5 = *v2;
  *(void *)(v5 + 1192) = a1;
  *(void *)(v5 + 1200) = v1;
  swift_task_dealloc(v4);
  (*(void (**)(void, void))(v5 + 760))(*(void *)(v5 + 384), *(void *)(v5 + 336));
  if (v1) {
    return swift_task_switch(sub_10011F7C8, 0LL, 0LL);
  }
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.read()[1]);
  *(void *)(v5 + 1208) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_10011F708;
  return dispatch thunk of CharacteristicProtocol.read()( *(void *)(v5 + 480),  *(void *)(v5 + 728),  *(void *)(v5 + 768));
}

uint64_t sub_10011F708()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1208LL);
  uint64_t v3 = *(void **)v1;
  v3[152] = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0) {
    return swift_task_switch(sub_10011F988, 0LL, 0LL);
  }
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
  v3[153] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_10011F914;
  return AsyncSequence.first()(v3 + 18, v3[55], v3[100]);
}

uint64_t sub_10011F7C8()
{
  unint64_t v1 = v0[140];
  uint64_t v2 = v0[139];
  unint64_t v18 = v0[147];
  unint64_t v19 = v0[131];
  uint64_t v16 = v0[146];
  uint64_t v17 = v0[130];
  unint64_t v3 = v0[122];
  uint64_t v4 = v0[121];
  unint64_t v5 = v0[113];
  uint64_t v6 = v0[112];
  unint64_t v7 = v0[104];
  uint64_t v8 = v0[103];
  uint64_t v9 = v0[68];
  uint64_t v14 = v0[67];
  uint64_t v15 = v0[72];
  swift_release();
  sub_1000182F0(v8, v7);
  sub_1000182F0(v6, v5);
  sub_1000182F0(v4, v3);
  sub_1000182F0(v2, v1);
  sub_1000182F0(v16, v18);
  sub_1000182F0(v17, v19);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v15, v14);
  v0[182] = v0[150];
  uint64_t v10 = type metadata accessor for Peripheral(0LL);
  uint64_t v11 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_10011F914()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1224);
  *(void *)(*v1 + 1232) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2 + 816))(*(void *)(v2 + 480), *(void *)(v2 + 440));
  if (v0) {
    uint64_t v4 = sub_10011FCBC;
  }
  else {
    uint64_t v4 = sub_10011FAD4;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10011F988()
{
  unint64_t v1 = v0[140];
  uint64_t v2 = v0[139];
  unint64_t v18 = v0[147];
  unint64_t v19 = v0[131];
  uint64_t v16 = v0[146];
  uint64_t v17 = v0[130];
  unint64_t v3 = v0[122];
  uint64_t v4 = v0[121];
  unint64_t v5 = v0[113];
  uint64_t v6 = v0[112];
  unint64_t v7 = v0[104];
  uint64_t v8 = v0[103];
  uint64_t v9 = v0[68];
  uint64_t v14 = v0[67];
  uint64_t v15 = v0[72];
  swift_release();
  sub_1000182F0(v8, v7);
  sub_1000182F0(v6, v5);
  sub_1000182F0(v4, v3);
  sub_1000182F0(v2, v1);
  sub_1000182F0(v16, v18);
  sub_1000182F0(v17, v19);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v15, v14);
  v0[182] = v0[152];
  uint64_t v10 = type metadata accessor for Peripheral(0LL);
  uint64_t v11 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_10011FAD4()
{
  uint64_t v1 = v0[154];
  uint64_t v3 = v0[18];
  unint64_t v2 = v0[19];
  v0[155] = v3;
  v0[156] = v2;
  static Task<>.checkCancellation()();
  if (v1)
  {
    unint64_t v19 = v0[147];
    unint64_t v16 = v0[140];
    uint64_t v17 = v0[146];
    uint64_t v15 = v0[139];
    uint64_t v22 = v0[130];
    unint64_t v23 = v0[131];
    unint64_t v4 = v0[122];
    uint64_t v5 = v0[121];
    unint64_t v6 = v0[113];
    uint64_t v7 = v0[112];
    unint64_t v8 = v0[104];
    uint64_t v9 = v0[103];
    uint64_t v18 = v0[68];
    uint64_t v20 = v0[67];
    uint64_t v21 = v0[72];
    swift_release();
    sub_1000182F0(v9, v8);
    sub_1000182F0(v7, v6);
    sub_1000182F0(v5, v4);
    sub_1000182F0(v15, v16);
    sub_1000182F0(v17, v19);
    sub_1000182F0(v3, v2);
    sub_1000182F0(v22, v23);
    (*(void (**)(uint64_t, uint64_t))(v18 + 8))(v21, v20);
    v0[182] = v1;
    uint64_t v10 = type metadata accessor for Peripheral(0LL);
    uint64_t v11 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
    uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v0[183] = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_100121C38;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
  }

  else
  {
    Identifier.init(stringLiteral:)("6AA50008-6352-4D57-A7B4-003A416FBB0B", 36LL, 2LL, v0[91]);
    uint64_t v14 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
    v0[157] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_10011FE08;
    return dispatch thunk of ServiceProtocol.subscript.getter(v0[47], v0[87], v0[88]);
  }

uint64_t sub_10011FCBC()
{
  unint64_t v1 = v0[140];
  uint64_t v2 = v0[139];
  unint64_t v18 = v0[147];
  unint64_t v19 = v0[131];
  uint64_t v16 = v0[146];
  uint64_t v17 = v0[130];
  unint64_t v3 = v0[122];
  uint64_t v4 = v0[121];
  unint64_t v5 = v0[113];
  uint64_t v6 = v0[112];
  unint64_t v7 = v0[104];
  uint64_t v8 = v0[103];
  uint64_t v9 = v0[68];
  uint64_t v14 = v0[67];
  uint64_t v15 = v0[72];
  swift_release();
  sub_1000182F0(v8, v7);
  sub_1000182F0(v6, v5);
  sub_1000182F0(v4, v3);
  sub_1000182F0(v2, v1);
  sub_1000182F0(v16, v18);
  sub_1000182F0(v17, v19);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v15, v14);
  v0[182] = v0[154];
  uint64_t v10 = type metadata accessor for Peripheral(0LL);
  uint64_t v11 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_10011FE08(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 1256);
  uint64_t v5 = *v2;
  *(void *)(v5 + 1264) = a1;
  *(void *)(v5 + 1272) = v1;
  swift_task_dealloc(v4);
  (*(void (**)(void, void))(v5 + 760))(*(void *)(v5 + 376), *(void *)(v5 + 336));
  if (v1) {
    return swift_task_switch(sub_10011FF8C, 0LL, 0LL);
  }
  unint64_t v7 = (void *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.read()[1]);
  *(void *)(v5 + 1280) = v7;
  *unint64_t v7 = v5;
  v7[1] = sub_10011FECC;
  return dispatch thunk of CharacteristicProtocol.read()( *(void *)(v5 + 472),  *(void *)(v5 + 728),  *(void *)(v5 + 768));
}

uint64_t sub_10011FECC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1280LL);
  unint64_t v3 = *(void **)v1;
  v3[161] = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0) {
    return swift_task_switch(sub_100120168, 0LL, 0LL);
  }
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
  v3[162] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_1001200F4;
  return AsyncSequence.first()(v3 + 20, v3[55], v3[100]);
}

uint64_t sub_10011FF8C()
{
  uint64_t v1 = v0[146];
  unint64_t v2 = v0[140];
  uint64_t v3 = v0[139];
  unint64_t v20 = v0[131];
  unint64_t v21 = v0[156];
  uint64_t v18 = v0[130];
  uint64_t v19 = v0[155];
  unint64_t v4 = v0[122];
  uint64_t v5 = v0[121];
  unint64_t v6 = v0[113];
  uint64_t v7 = v0[112];
  unint64_t v8 = v0[104];
  uint64_t v9 = v0[103];
  uint64_t v14 = v0[68];
  unint64_t v15 = v0[147];
  uint64_t v16 = v0[67];
  uint64_t v17 = v0[72];
  swift_release();
  sub_1000182F0(v9, v8);
  sub_1000182F0(v7, v6);
  sub_1000182F0(v5, v4);
  sub_1000182F0(v3, v2);
  sub_1000182F0(v1, v15);
  sub_1000182F0(v19, v21);
  sub_1000182F0(v18, v20);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v17, v16);
  v0[182] = v0[159];
  uint64_t v10 = type metadata accessor for Peripheral(0LL);
  uint64_t v11 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_1001200F4()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1296);
  *(void *)(*v1 + 1304) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2 + 816))(*(void *)(v2 + 472), *(void *)(v2 + 440));
  if (v0) {
    unint64_t v4 = sub_1001204CC;
  }
  else {
    unint64_t v4 = sub_1001202D0;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_100120168()
{
  uint64_t v1 = v0[146];
  unint64_t v2 = v0[140];
  uint64_t v3 = v0[139];
  unint64_t v20 = v0[131];
  unint64_t v21 = v0[156];
  uint64_t v18 = v0[130];
  uint64_t v19 = v0[155];
  unint64_t v4 = v0[122];
  uint64_t v5 = v0[121];
  unint64_t v6 = v0[113];
  uint64_t v7 = v0[112];
  unint64_t v8 = v0[104];
  uint64_t v9 = v0[103];
  uint64_t v14 = v0[68];
  unint64_t v15 = v0[147];
  uint64_t v16 = v0[67];
  uint64_t v17 = v0[72];
  swift_release();
  sub_1000182F0(v9, v8);
  sub_1000182F0(v7, v6);
  sub_1000182F0(v5, v4);
  sub_1000182F0(v3, v2);
  sub_1000182F0(v1, v15);
  sub_1000182F0(v19, v21);
  sub_1000182F0(v18, v20);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v17, v16);
  v0[182] = v0[161];
  uint64_t v10 = type metadata accessor for Peripheral(0LL);
  uint64_t v11 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_1001202D0()
{
  uint64_t v1 = v0[163];
  uint64_t v3 = v0[20];
  unint64_t v2 = v0[21];
  v0[164] = v3;
  v0[165] = v2;
  static Task<>.checkCancellation()();
  if (v1)
  {
    uint64_t v20 = v0[155];
    uint64_t v17 = v0[146];
    unint64_t v18 = v0[147];
    uint64_t v15 = v0[139];
    unint64_t v16 = v0[140];
    unint64_t v25 = v0[131];
    unint64_t v23 = v0[156];
    uint64_t v24 = v0[130];
    unint64_t v4 = v0[122];
    uint64_t v5 = v0[121];
    unint64_t v6 = v0[113];
    uint64_t v7 = v0[112];
    unint64_t v8 = v0[104];
    uint64_t v9 = v0[103];
    uint64_t v19 = v0[68];
    uint64_t v21 = v0[67];
    uint64_t v22 = v0[72];
    swift_release();
    sub_1000182F0(v9, v8);
    sub_1000182F0(v7, v6);
    sub_1000182F0(v5, v4);
    sub_1000182F0(v15, v16);
    sub_1000182F0(v17, v18);
    sub_1000182F0(v20, v23);
    sub_1000182F0(v3, v2);
    sub_1000182F0(v24, v25);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v22, v21);
    v0[182] = v1;
    uint64_t v10 = type metadata accessor for Peripheral(0LL);
    uint64_t v11 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
    uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v0[183] = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_100121C38;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
  }

  else
  {
    Identifier.init(stringLiteral:)("6AA50009-6352-4D57-A7B4-003A416FBB0B", 36LL, 2LL, v0[91]);
    uint64_t v14 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
    v0[166] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_100120634;
    return dispatch thunk of ServiceProtocol.subscript.getter(v0[46], v0[87], v0[88]);
  }

uint64_t sub_1001204CC()
{
  uint64_t v1 = v0[146];
  unint64_t v2 = v0[140];
  uint64_t v3 = v0[139];
  unint64_t v20 = v0[131];
  unint64_t v21 = v0[156];
  uint64_t v18 = v0[130];
  uint64_t v19 = v0[155];
  unint64_t v4 = v0[122];
  uint64_t v5 = v0[121];
  unint64_t v6 = v0[113];
  uint64_t v7 = v0[112];
  unint64_t v8 = v0[104];
  uint64_t v9 = v0[103];
  uint64_t v14 = v0[68];
  unint64_t v15 = v0[147];
  uint64_t v16 = v0[67];
  uint64_t v17 = v0[72];
  swift_release();
  sub_1000182F0(v9, v8);
  sub_1000182F0(v7, v6);
  sub_1000182F0(v5, v4);
  sub_1000182F0(v3, v2);
  sub_1000182F0(v1, v15);
  sub_1000182F0(v19, v21);
  sub_1000182F0(v18, v20);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v17, v16);
  v0[182] = v0[163];
  uint64_t v10 = type metadata accessor for Peripheral(0LL);
  uint64_t v11 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_100120634(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 1328);
  uint64_t v5 = *v2;
  *(void *)(v5 + 1336) = a1;
  *(void *)(v5 + 1344) = v1;
  swift_task_dealloc(v4);
  (*(void (**)(void, void))(v5 + 760))(*(void *)(v5 + 368), *(void *)(v5 + 336));
  if (v1) {
    return swift_task_switch(sub_1001207B8, 0LL, 0LL);
  }
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.read()[1]);
  *(void *)(v5 + 1352) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_1001206F8;
  return dispatch thunk of CharacteristicProtocol.read()( *(void *)(v5 + 464),  *(void *)(v5 + 728),  *(void *)(v5 + 768));
}

uint64_t sub_1001206F8()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1352LL);
  uint64_t v3 = *(void **)v1;
  v3[170] = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0) {
    return swift_task_switch(sub_1001209A8, 0LL, 0LL);
  }
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
  v3[171] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_100120934;
  return AsyncSequence.first()(v3 + 14, v3[55], v3[100]);
}

uint64_t sub_1001207B8()
{
  uint64_t v22 = v0[164];
  unint64_t v23 = v0[165];
  unint64_t v14 = v0[147];
  uint64_t v1 = v0[146];
  unint64_t v2 = v0[140];
  uint64_t v3 = v0[139];
  unint64_t v21 = v0[131];
  unint64_t v19 = v0[156];
  uint64_t v20 = v0[130];
  unint64_t v4 = v0[122];
  uint64_t v5 = v0[121];
  unint64_t v6 = v0[113];
  uint64_t v7 = v0[112];
  unint64_t v8 = v0[104];
  uint64_t v9 = v0[103];
  uint64_t v15 = v0[68];
  uint64_t v16 = v0[155];
  uint64_t v17 = v0[67];
  uint64_t v18 = v0[72];
  swift_release();
  sub_1000182F0(v9, v8);
  sub_1000182F0(v7, v6);
  sub_1000182F0(v5, v4);
  sub_1000182F0(v3, v2);
  sub_1000182F0(v1, v14);
  sub_1000182F0(v16, v19);
  sub_1000182F0(v22, v23);
  sub_1000182F0(v20, v21);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v17);
  v0[182] = v0[168];
  uint64_t v10 = type metadata accessor for Peripheral(0LL);
  uint64_t v11 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_100120934()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1368);
  *(void *)(*v1 + 1376) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2 + 816))(*(void *)(v2 + 464), *(void *)(v2 + 440));
  if (v0) {
    unint64_t v4 = sub_100120D3C;
  }
  else {
    unint64_t v4 = sub_100120B24;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_1001209A8()
{
  uint64_t v22 = v0[164];
  unint64_t v23 = v0[165];
  unint64_t v14 = v0[147];
  uint64_t v1 = v0[146];
  unint64_t v2 = v0[140];
  uint64_t v3 = v0[139];
  unint64_t v21 = v0[131];
  unint64_t v19 = v0[156];
  uint64_t v20 = v0[130];
  unint64_t v4 = v0[122];
  uint64_t v5 = v0[121];
  unint64_t v6 = v0[113];
  uint64_t v7 = v0[112];
  unint64_t v8 = v0[104];
  uint64_t v9 = v0[103];
  uint64_t v15 = v0[68];
  uint64_t v16 = v0[155];
  uint64_t v17 = v0[67];
  uint64_t v18 = v0[72];
  swift_release();
  sub_1000182F0(v9, v8);
  sub_1000182F0(v7, v6);
  sub_1000182F0(v5, v4);
  sub_1000182F0(v3, v2);
  sub_1000182F0(v1, v14);
  sub_1000182F0(v16, v19);
  sub_1000182F0(v22, v23);
  sub_1000182F0(v20, v21);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v17);
  v0[182] = v0[170];
  uint64_t v10 = type metadata accessor for Peripheral(0LL);
  uint64_t v11 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_100120B24()
{
  uint64_t v1 = v0[172];
  uint64_t v3 = v0[14];
  unint64_t v2 = v0[15];
  v0[173] = v3;
  v0[174] = v2;
  static Task<>.checkCancellation()();
  if (v1)
  {
    unint64_t v26 = v0[165];
    uint64_t v24 = v0[164];
    uint64_t v19 = v0[155];
    unint64_t v20 = v0[156];
    uint64_t v17 = v0[146];
    unint64_t v18 = v0[147];
    uint64_t v15 = v0[139];
    unint64_t v16 = v0[140];
    unint64_t v27 = v0[131];
    uint64_t v25 = v0[130];
    unint64_t v4 = v0[122];
    uint64_t v5 = v0[121];
    unint64_t v6 = v0[113];
    uint64_t v7 = v0[112];
    unint64_t v8 = v0[104];
    uint64_t v9 = v0[103];
    uint64_t v21 = v0[68];
    uint64_t v22 = v0[67];
    uint64_t v23 = v0[72];
    swift_release();
    sub_1000182F0(v9, v8);
    sub_1000182F0(v7, v6);
    sub_1000182F0(v5, v4);
    sub_1000182F0(v15, v16);
    sub_1000182F0(v17, v18);
    sub_1000182F0(v19, v20);
    sub_1000182F0(v24, v26);
    sub_1000182F0(v3, v2);
    sub_1000182F0(v25, v27);
    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v23, v22);
    v0[182] = v1;
    uint64_t v10 = type metadata accessor for Peripheral(0LL);
    uint64_t v11 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
    uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
    v0[183] = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_100121C38;
    return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
  }

  else
  {
    Identifier.init(stringLiteral:)("6AA5000A-6352-4D57-A7B4-003A416FBB0B", 36LL, 2LL, v0[91]);
    unint64_t v14 = (void *)swift_task_alloc(async function pointer to dispatch thunk of ServiceProtocol.subscript.getter[1]);
    v0[175] = v14;
    *unint64_t v14 = v0;
    v14[1] = sub_100120EB8;
    return dispatch thunk of ServiceProtocol.subscript.getter(v0[45], v0[87], v0[88]);
  }

uint64_t sub_100120D3C()
{
  uint64_t v22 = v0[164];
  unint64_t v23 = v0[165];
  unint64_t v14 = v0[147];
  uint64_t v1 = v0[146];
  unint64_t v2 = v0[140];
  uint64_t v3 = v0[139];
  unint64_t v21 = v0[131];
  unint64_t v19 = v0[156];
  uint64_t v20 = v0[130];
  unint64_t v4 = v0[122];
  uint64_t v5 = v0[121];
  unint64_t v6 = v0[113];
  uint64_t v7 = v0[112];
  unint64_t v8 = v0[104];
  uint64_t v9 = v0[103];
  uint64_t v15 = v0[68];
  uint64_t v16 = v0[155];
  uint64_t v17 = v0[67];
  uint64_t v18 = v0[72];
  swift_release();
  sub_1000182F0(v9, v8);
  sub_1000182F0(v7, v6);
  sub_1000182F0(v5, v4);
  sub_1000182F0(v3, v2);
  sub_1000182F0(v1, v14);
  sub_1000182F0(v16, v19);
  sub_1000182F0(v22, v23);
  sub_1000182F0(v20, v21);
  (*(void (**)(uint64_t, uint64_t))(v15 + 8))(v18, v17);
  v0[182] = v0[172];
  uint64_t v10 = type metadata accessor for Peripheral(0LL);
  uint64_t v11 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_100120EB8(uint64_t a1)
{
  uint64_t v4 = *(void *)(*v2 + 1400);
  uint64_t v5 = *v2;
  *(void *)(v5 + 1408) = a1;
  *(void *)(v5 + 14swift_weakDestroy(v0 + 16) = v1;
  swift_task_dealloc(v4);
  (*(void (**)(void, void))(v5 + 760))(*(void *)(v5 + 360), *(void *)(v5 + 336));
  if (v1) {
    return swift_task_switch(sub_10012103C, 0LL, 0LL);
  }
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to dispatch thunk of CharacteristicProtocol.read()[1]);
  *(void *)(v5 + 1424) = v7;
  *uint64_t v7 = v5;
  v7[1] = sub_100120F7C;
  return dispatch thunk of CharacteristicProtocol.read()( *(void *)(v5 + 456),  *(void *)(v5 + 728),  *(void *)(v5 + 768));
}

uint64_t sub_100120F7C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1424LL);
  uint64_t v3 = *(void **)v1;
  v3[179] = v0;
  swift_task_dealloc(v2);
  swift_release();
  if (v0) {
    return swift_task_switch(sub_10012124C, 0LL, 0LL);
  }
  uint64_t v5 = (void *)swift_task_alloc(async function pointer to AsyncSequence.first()[1]);
  v3[180] = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_1001211D8;
  return AsyncSequence.first()(v3 + 12, v3[55], v3[100]);
}

uint64_t sub_10012103C()
{
  unint64_t v25 = v0[174];
  uint64_t v20 = v0[164];
  uint64_t v15 = v0[155];
  unint64_t v16 = v0[156];
  unint64_t v14 = v0[147];
  uint64_t v1 = v0[146];
  unint64_t v2 = v0[140];
  uint64_t v3 = v0[139];
  unint64_t v23 = v0[131];
  uint64_t v24 = v0[173];
  uint64_t v21 = v0[130];
  unint64_t v22 = v0[165];
  unint64_t v4 = v0[122];
  uint64_t v5 = v0[121];
  unint64_t v6 = v0[113];
  uint64_t v7 = v0[112];
  unint64_t v8 = v0[104];
  uint64_t v9 = v0[103];
  uint64_t v17 = v0[68];
  uint64_t v18 = v0[67];
  uint64_t v19 = v0[72];
  swift_release();
  sub_1000182F0(v9, v8);
  sub_1000182F0(v7, v6);
  sub_1000182F0(v5, v4);
  sub_1000182F0(v3, v2);
  sub_1000182F0(v1, v14);
  sub_1000182F0(v15, v16);
  sub_1000182F0(v20, v22);
  sub_1000182F0(v24, v25);
  sub_1000182F0(v21, v23);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v18);
  v0[182] = v0[177];
  uint64_t v10 = type metadata accessor for Peripheral(0LL);
  uint64_t v11 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_1001211D8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 1440);
  *(void *)(*v1 + 1448) = v0;
  swift_task_dealloc(v3);
  (*(void (**)(void, void))(v2 + 816))(*(void *)(v2 + 456), *(void *)(v2 + 440));
  if (v0) {
    unint64_t v4 = sub_100121A9C;
  }
  else {
    unint64_t v4 = sub_1001213E8;
  }
  return swift_task_switch(v4, 0LL, 0LL);
}

uint64_t sub_10012124C()
{
  unint64_t v25 = v0[174];
  uint64_t v20 = v0[164];
  uint64_t v15 = v0[155];
  unint64_t v16 = v0[156];
  unint64_t v14 = v0[147];
  uint64_t v1 = v0[146];
  unint64_t v2 = v0[140];
  uint64_t v3 = v0[139];
  unint64_t v23 = v0[131];
  uint64_t v24 = v0[173];
  uint64_t v21 = v0[130];
  unint64_t v22 = v0[165];
  unint64_t v4 = v0[122];
  uint64_t v5 = v0[121];
  unint64_t v6 = v0[113];
  uint64_t v7 = v0[112];
  unint64_t v8 = v0[104];
  uint64_t v9 = v0[103];
  uint64_t v17 = v0[68];
  uint64_t v18 = v0[67];
  uint64_t v19 = v0[72];
  swift_release();
  sub_1000182F0(v9, v8);
  sub_1000182F0(v7, v6);
  sub_1000182F0(v5, v4);
  sub_1000182F0(v3, v2);
  sub_1000182F0(v1, v14);
  sub_1000182F0(v15, v16);
  sub_1000182F0(v20, v22);
  sub_1000182F0(v24, v25);
  sub_1000182F0(v21, v23);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v18);
  v0[182] = v0[179];
  uint64_t v10 = type metadata accessor for Peripheral(0LL);
  uint64_t v11 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_1001213E8(uint64_t a1)
{
  uint64_t v112 = *(void *)(v1 + 104);
  uint64_t v113 = *(void *)(v1 + 96);
  ContinuousClock.now.getter(a1);
  if (qword_10099B120 != -1) {
    swift_once(&qword_10099B120, sub_100118994);
  }
  uint64_t v2 = *(void *)(v1 + 576);
  uint64_t v3 = *(void *)(v1 + 568);
  uint64_t v4 = *(void *)(v1 + 560);
  uint64_t v5 = *(void *)(v1 + 552);
  uint64_t v6 = *(void *)(v1 + 544);
  uint64_t v7 = *(void *)(v1 + 536);
  uint64_t v9 = *(void *)(v1 + 320);
  uint64_t v8 = *(void *)(v1 + 328);
  uint64_t v10 = *(void *)(v1 + 312);
  uint64_t v11 = sub_10000A720(v10, (uint64_t)qword_100A2A1E0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v11, v10);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  v12(v4, v2, v7);
  uint64_t v13 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v12)(v5, v3, v7);
  unint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter(v14);
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v17 = *(void *)(v1 + 560);
  uint64_t v18 = *(void *)(v1 + 552);
  uint64_t v19 = *(void *)(v1 + 544);
  uint64_t v20 = *(void *)(v1 + 536);
  uint64_t v22 = *(void *)(v1 + 320);
  uint64_t v21 = *(void *)(v1 + 328);
  uint64_t v23 = *(void *)(v1 + 312);
  if (v16)
  {
    os_log_type_t v107 = v15;
    uint64_t v24 = *(void *)(v1 + 304);
    uint64_t v96 = *(void *)(v1 + 296);
    uint64_t v98 = *(void *)(v1 + 288);
    uint64_t v110 = *(void *)(v1 + 328);
    uint64_t v103 = v14;
    unint64_t v25 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v105 = swift_slowAlloc(32LL, -1LL);
    uint64_t v114 = v105;
    *(_DWORD *)unint64_t v25 = 136446210;
    static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v105);
    uint64_t v26 = sub_100007864( &qword_1009AE520,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant,  (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
    uint64_t v101 = v22;
    uint64_t v27 = static Duration.description<A>(_:_:units:)(v17, v18, v24, v20, v26);
    unint64_t v29 = v28;
    (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v24, v98);
    *(void *)(v1 + 192) = sub_1003F11D4(v27, v29, &v114);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 192, v1 + 200, v25 + 4, v25 + 12);
    swift_bridgeObjectRelease();
    unint64_t v30 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v30(v17, v20);
    uint64_t v88 = v30;
    v30(v18, v20);
    _os_log_impl((void *)&_mh_execute_header, v103, v107, "Raw metadata read time: %{public}s", v25, 0xCu);
    swift_arrayDestroy(v105, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v105, -1LL, -1LL);
    swift_slowDealloc(v25, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v101 + 8))(v110, v23);
  }

  else
  {
    uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v19 + 8);
    v31(*(void *)(v1 + 560), *(void *)(v1 + 536));
    uint64_t v88 = v31;
    v31(v18, v20);

    (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v21, v23);
  }

  uint64_t v79 = *(void *)(v1 + 1384);
  uint64_t v80 = *(void *)(v1 + 1392);
  uint64_t v76 = *(void *)(v1 + 1320);
  uint64_t v73 = *(void *)(v1 + 1248);
  uint64_t v74 = *(void *)(v1 + 1312);
  uint64_t v71 = *(void *)(v1 + 1176);
  uint64_t v72 = *(void *)(v1 + 1240);
  uint64_t v69 = *(void *)(v1 + 1120);
  uint64_t v70 = *(void *)(v1 + 1168);
  uint64_t v67 = *(void *)(v1 + 1048);
  uint64_t v68 = *(void *)(v1 + 1112);
  uint64_t v65 = *(void *)(v1 + 976);
  uint64_t v66 = *(void *)(v1 + 1040);
  uint64_t v63 = *(void *)(v1 + 904);
  uint64_t v64 = *(void *)(v1 + 968);
  uint64_t v61 = *(void *)(v1 + 832);
  uint64_t v62 = *(void *)(v1 + 896);
  uint64_t v59 = *(void *)(v1 + 624);
  uint64_t v60 = *(void *)(v1 + 824);
  uint64_t v57 = *(void *)(v1 + 616);
  uint64_t v58 = *(void *)(v1 + 608);
  uint64_t v54 = *(void *)(v1 + 592);
  uint64_t v55 = *(void *)(v1 + 584);
  uint64_t v56 = *(void *)(v1 + 600);
  uint64_t v53 = *(void *)(v1 + 576);
  uint64_t v52 = *(void *)(v1 + 568);
  uint64_t v75 = *(void *)(v1 + 560);
  uint64_t v32 = *(void *)(v1 + 536);
  uint64_t v77 = *(void *)(v1 + 552);
  uint64_t v78 = *(void *)(v1 + 528);
  uint64_t v81 = *(void *)(v1 + 520);
  uint64_t v82 = *(void *)(v1 + 512);
  uint64_t v83 = *(void *)(v1 + 504);
  uint64_t v84 = *(void *)(v1 + 496);
  uint64_t v85 = *(void *)(v1 + 488);
  uint64_t v86 = *(void *)(v1 + 480);
  uint64_t v87 = *(void *)(v1 + 472);
  uint64_t v89 = *(void *)(v1 + 464);
  uint64_t v90 = *(void *)(v1 + 456);
  uint64_t v91 = *(void *)(v1 + 432);
  uint64_t v92 = *(void *)(v1 + 424);
  uint64_t v93 = *(void *)(v1 + 416);
  uint64_t v94 = *(void *)(v1 + 408);
  uint64_t v95 = *(void *)(v1 + 400);
  uint64_t v97 = *(void *)(v1 + 392);
  uint64_t v99 = *(void *)(v1 + 384);
  uint64_t v100 = *(void *)(v1 + 376);
  uint64_t v102 = *(void *)(v1 + 368);
  uint64_t v104 = *(void *)(v1 + 360);
  uint64_t v106 = *(void *)(v1 + 352);
  uint64_t v108 = *(void *)(v1 + 328);
  uint64_t v33 = *(void *)(v1 + 272);
  uint64_t v34 = *(void *)(v1 + 280);
  uint64_t v35 = *(void *)(v1 + 256);
  uint64_t v36 = *(void *)(v1 + 264);
  uint64_t v38 = *(void *)(v1 + 240);
  uint64_t v37 = *(void *)(v1 + 248);
  uint64_t v109 = *(void *)(v1 + 304);
  uint64_t v111 = *(void *)(v1 + 232);
  uint64_t v39 = *(void *)(v1 + 200);
  dispatch thunk of PeripheralProtocol.id.getter(*(void *)(v1 + 632), *(void *)(v1 + 640));
  Identifier.id.getter(v36);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v34, v36);
  v88(v52, v32);
  v88(v53, v32);
  (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v56, v55);
  (*(void (**)(uint64_t, uint64_t))(v57 + 8))(v59, v58);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v37 + 32))(v39, v35, v38);
  uint64_t v40 = (int *)type metadata accessor for RawAccessoryMetadata(0LL);
  uint64_t v41 = (void *)(v39 + v40[5]);
  *uint64_t v41 = v60;
  v41[1] = v61;
  uint64_t v42 = (void *)(v39 + v40[6]);
  void *v42 = v62;
  v42[1] = v63;
  uint64_t v43 = (void *)(v39 + v40[7]);
  *uint64_t v43 = v64;
  v43[1] = v65;
  uint64_t v44 = (void *)(v39 + v40[8]);
  *uint64_t v44 = v66;
  v44[1] = v67;
  uint64_t v45 = (void *)(v39 + v40[9]);
  *uint64_t v45 = v68;
  v45[1] = v69;
  uint64_t v46 = (void *)(v39 + v40[10]);
  *uint64_t v46 = v70;
  v46[1] = v71;
  os_log_type_t v47 = (void *)(v39 + v40[11]);
  *os_log_type_t v47 = v72;
  v47[1] = v73;
  uint64_t v48 = (void *)(v39 + v40[12]);
  *uint64_t v48 = v74;
  v48[1] = v76;
  uint64_t v49 = (void *)(v39 + v40[13]);
  *uint64_t v49 = v79;
  v49[1] = v80;
  uint64_t v50 = (void *)(v39 + v40[14]);
  *uint64_t v50 = v113;
  v50[1] = v112;
  swift_task_dealloc(v59);
  swift_task_dealloc(v56);
  swift_task_dealloc(v53);
  swift_task_dealloc(v52);
  swift_task_dealloc(v75);
  swift_task_dealloc(v77);
  swift_task_dealloc(v78);
  swift_task_dealloc(v81);
  swift_task_dealloc(v82);
  swift_task_dealloc(v83);
  swift_task_dealloc(v84);
  swift_task_dealloc(v85);
  swift_task_dealloc(v86);
  swift_task_dealloc(v87);
  swift_task_dealloc(v89);
  swift_task_dealloc(v90);
  swift_task_dealloc(v91);
  swift_task_dealloc(v92);
  swift_task_dealloc(v93);
  swift_task_dealloc(v94);
  swift_task_dealloc(v95);
  swift_task_dealloc(v97);
  swift_task_dealloc(v99);
  swift_task_dealloc(v100);
  swift_task_dealloc(v102);
  swift_task_dealloc(v104);
  swift_task_dealloc(v106);
  swift_task_dealloc(v108);
  swift_task_dealloc(v109);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v111);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100121A9C()
{
  unint64_t v25 = v0[174];
  uint64_t v20 = v0[164];
  uint64_t v15 = v0[155];
  unint64_t v16 = v0[156];
  unint64_t v14 = v0[147];
  uint64_t v1 = v0[146];
  unint64_t v2 = v0[140];
  uint64_t v3 = v0[139];
  unint64_t v23 = v0[131];
  uint64_t v24 = v0[173];
  uint64_t v21 = v0[130];
  unint64_t v22 = v0[165];
  unint64_t v4 = v0[122];
  uint64_t v5 = v0[121];
  unint64_t v6 = v0[113];
  uint64_t v7 = v0[112];
  unint64_t v8 = v0[104];
  uint64_t v9 = v0[103];
  uint64_t v17 = v0[68];
  uint64_t v18 = v0[67];
  uint64_t v19 = v0[72];
  swift_release();
  sub_1000182F0(v9, v8);
  sub_1000182F0(v7, v6);
  sub_1000182F0(v5, v4);
  sub_1000182F0(v3, v2);
  sub_1000182F0(v1, v14);
  sub_1000182F0(v15, v16);
  sub_1000182F0(v20, v22);
  sub_1000182F0(v24, v25);
  sub_1000182F0(v21, v23);
  (*(void (**)(uint64_t, uint64_t))(v17 + 8))(v19, v18);
  v0[182] = v0[181];
  uint64_t v10 = type metadata accessor for Peripheral(0LL);
  uint64_t v11 = sub_100007864( &qword_1009A1BC8,  (uint64_t (*)(uint64_t))&type metadata accessor for Peripheral,  (uint64_t)&protocol conformance descriptor for Peripheral);
  uint64_t v12 = (void *)swift_task_alloc(async function pointer to dispatch thunk of PeripheralProtocol.cancelConnection()[1]);
  v0[183] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_100121C38;
  return dispatch thunk of PeripheralProtocol.cancelConnection()(v10, v11);
}

uint64_t sub_100121C38()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 1464LL);
  *(void *)(*(void *)v1 + 1472LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100121ED4;
  }
  else {
    uint64_t v3 = sub_100121C9C;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100121C9C()
{
  uint64_t v1 = *(void *)(v0 + 600);
  uint64_t v2 = *(void *)(v0 + 592);
  uint64_t v3 = *(void *)(v0 + 584);
  swift_willThrow();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  uint64_t v4 = *(void *)(v0 + 624);
  uint64_t v5 = *(void *)(v0 + 600);
  uint64_t v6 = *(void *)(v0 + 576);
  uint64_t v7 = *(void *)(v0 + 568);
  uint64_t v8 = *(void *)(v0 + 560);
  uint64_t v9 = *(void *)(v0 + 552);
  uint64_t v10 = *(void *)(v0 + 528);
  uint64_t v11 = *(void *)(v0 + 520);
  uint64_t v12 = *(void *)(v0 + 512);
  uint64_t v14 = *(void *)(v0 + 504);
  uint64_t v15 = *(void *)(v0 + 496);
  uint64_t v16 = *(void *)(v0 + 488);
  uint64_t v17 = *(void *)(v0 + 480);
  uint64_t v18 = *(void *)(v0 + 472);
  uint64_t v19 = *(void *)(v0 + 464);
  uint64_t v20 = *(void *)(v0 + 456);
  uint64_t v21 = *(void *)(v0 + 432);
  uint64_t v22 = *(void *)(v0 + 424);
  uint64_t v23 = *(void *)(v0 + 416);
  uint64_t v24 = *(void *)(v0 + 408);
  uint64_t v25 = *(void *)(v0 + 400);
  uint64_t v26 = *(void *)(v0 + 392);
  uint64_t v27 = *(void *)(v0 + 384);
  uint64_t v28 = *(void *)(v0 + 376);
  uint64_t v29 = *(void *)(v0 + 368);
  uint64_t v30 = *(void *)(v0 + 360);
  uint64_t v31 = *(void *)(v0 + 352);
  uint64_t v32 = *(void *)(v0 + 304);
  uint64_t v33 = *(void *)(v0 + 328);
  uint64_t v34 = *(void *)(v0 + 280);
  uint64_t v35 = *(void *)(v0 + 256);
  uint64_t v36 = *(void *)(v0 + 232);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 616) + 8LL))(v4, *(void *)(v0 + 608));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v33);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100121ED4()
{
  if (qword_10099B6E8 != -1) {
    swift_once(&qword_10099B6E8, sub_100651020);
  }
  uint64_t v1 = *(void *)(v0 + 1472);
  sub_10000A720(*(void *)(v0 + 312), (uint64_t)qword_100A2AFE8);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void *)(v0 + 1472);
  if (v5)
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v7 = 138543362;
    uint64_t v9 = _convertErrorToNSError(_:)(v6);
    *(void *)(v0 + 176) = v9;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v7 + 4, v7 + 12);
    *uint64_t v8 = v9;
    swift_errorRelease(v6);
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "cancelConnection error in readRawAccessoryMetadata() catch block: %{public}@",  v7,  0xCu);
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v8, 1LL, v10);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);

    uint64_t v11 = swift_errorRelease(v6);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 1472));
    swift_errorRelease(v6);
  }

  uint64_t v12 = *(void *)(v0 + 600);
  uint64_t v13 = *(void *)(v0 + 592);
  uint64_t v14 = *(void *)(v0 + 584);
  swift_willThrow(v11);
  (*(void (**)(uint64_t, uint64_t))(v13 + 8))(v12, v14);
  uint64_t v15 = *(void *)(v0 + 624);
  uint64_t v16 = *(void *)(v0 + 600);
  uint64_t v17 = *(void *)(v0 + 576);
  uint64_t v18 = *(void *)(v0 + 568);
  uint64_t v19 = *(void *)(v0 + 560);
  uint64_t v20 = *(void *)(v0 + 552);
  uint64_t v21 = *(void *)(v0 + 528);
  uint64_t v22 = *(void *)(v0 + 520);
  uint64_t v23 = *(void *)(v0 + 512);
  uint64_t v25 = *(void *)(v0 + 504);
  uint64_t v26 = *(void *)(v0 + 496);
  uint64_t v27 = *(void *)(v0 + 488);
  uint64_t v28 = *(void *)(v0 + 480);
  uint64_t v29 = *(void *)(v0 + 472);
  uint64_t v30 = *(void *)(v0 + 464);
  uint64_t v31 = *(void *)(v0 + 456);
  uint64_t v32 = *(void *)(v0 + 432);
  uint64_t v33 = *(void *)(v0 + 424);
  uint64_t v34 = *(void *)(v0 + 416);
  uint64_t v35 = *(void *)(v0 + 408);
  uint64_t v36 = *(void *)(v0 + 400);
  uint64_t v37 = *(void *)(v0 + 392);
  uint64_t v38 = *(void *)(v0 + 384);
  uint64_t v39 = *(void *)(v0 + 376);
  uint64_t v40 = *(void *)(v0 + 368);
  uint64_t v41 = *(void *)(v0 + 360);
  uint64_t v42 = *(void *)(v0 + 352);
  uint64_t v43 = *(void *)(v0 + 304);
  uint64_t v44 = *(void *)(v0 + 328);
  uint64_t v45 = *(void *)(v0 + 280);
  uint64_t v46 = *(void *)(v0 + 256);
  uint64_t v47 = *(void *)(v0 + 232);
  (*(void (**)(uint64_t, void))(*(void *)(v0 + 616) + 8LL))(v15, *(void *)(v0 + 608));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  swift_task_dealloc(v44);
  swift_task_dealloc(v43);
  swift_task_dealloc(v45);
  swift_task_dealloc(v46);
  swift_task_dealloc(v47);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012226C(uint64_t a1, uint64_t a2, char a3)
{
  *(_BYTE *)(v3 + 192) = a3;
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = a1;
  *(void *)(v3 + 24) = a2;
  uint64_t v4 = type metadata accessor for RawAccessoryMetadata(0LL);
  *(void *)(v3 + 32) = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for CentralManager.State(0LL);
  *(void *)(v3 + 40) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v3 + 48) = v6;
  *(void *)(v3 + 56) = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC((uint64_t *)&unk_1009B9450);
  *(void *)(v3 + 64) = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100122314, 0LL, 0LL);
}

uint64_t sub_100122314()
{
  uint64_t v1 = v0[8];
  v0[9] = type metadata accessor for CentralManager(0LL);
  uint64_t v2 = type metadata accessor for CentralManager.Options(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 56LL))(v1, 1LL, 1LL, v2);
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to CentralManager.__allocating_init(options:)[1]);
  v0[10] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1001223A0;
  return CentralManager.__allocating_init(options:)(v0[8]);
}

uint64_t sub_1001223A0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 80LL);
  *(void *)(*(void *)v1 + 88LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1001223FC, 0LL, 0LL);
}

uint64_t sub_1001223FC()
{
  uint64_t v1 = (void *)swift_task_alloc(async function pointer to CentralManagerProtocol.await(state:)[1]);
  v0[12] = v1;
  uint64_t v2 = sub_100007864( &qword_1009A1BA0,  (uint64_t (*)(uint64_t))&type metadata accessor for CentralManager,  (uint64_t)&protocol conformance descriptor for CentralManager);
  *uint64_t v1 = v0;
  v1[1] = sub_100122490;
  return CentralManagerProtocol.await(state:)(v0[7], v0[9], v2);
}

uint64_t sub_100122490()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 96LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 48LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 56LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 40LL);
  uint64_t v6 = *(void **)v1;
  v6[13] = v0;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  if (v0) {
    return swift_task_switch(sub_10012295C, 0LL, 0LL);
  }
  v6[14] = v8;
  *uint64_t v8 = v6;
  v8[1] = sub_100122568;
  return v9(v6[3]);
}

uint64_t sub_100122568(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 112);
  *(void *)(v3 + 120) = a1;
  *(void *)(v3 + 128) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_1001229B4;
  }
  else {
    uint64_t v5 = sub_1001225D4;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_1001225D4()
{
  uint64_t v1 = *(void *)(v0 + 120);
  if (v1)
  {
    uint64_t v13 = (uint64_t (*)(uint64_t, uint64_t, char))((char *)&dword_1009A1BB0 + dword_1009A1BB0);
    uint64_t v2 = (void *)swift_task_alloc(unk_1009A1BB4);
    *(void *)(v0 + 136) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10012271C;
    return v13(*(void *)(v0 + 32), v1, *(_BYTE *)(v0 + 192));
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 24);
    uint64_t v5 = type metadata accessor for AccessoryMetadataManager.Error(0LL);
    uint64_t v6 = sub_100007864( &qword_1009A1BA8,  type metadata accessor for AccessoryMetadataManager.Error,  (uint64_t)&unk_1007ED0C8);
    swift_allocError(v5, v6, 0LL, 0LL);
    uint64_t v8 = v7;
    uint64_t v9 = type metadata accessor for MACAddress(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 16LL))(v8, v4, v9);
    uint64_t v10 = swift_storeEnumTagMultiPayload(v8, v5, 1LL);
    swift_willThrow(v10);
    swift_release();
    uint64_t v11 = *(void *)(v0 + 56);
    uint64_t v12 = *(void *)(v0 + 32);
    swift_task_dealloc(*(void *)(v0 + 64));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10012271C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 136LL);
  *(void *)(*(void *)v1 + 144LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_10012282C;
  }
  else {
    uint64_t v3 = sub_100122780;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100122780()
{
  uint64_t v1 = v0[18];
  sub_10008A850(v0[4], v0[2]);
  if (v1)
  {
    v0[21] = v1;
    v0[22] = (uint64_t)v2;
    uint64_t v3 = sub_100122A0C;
  }

  else
  {
    v0[19] = (uint64_t)v2;
    uint64_t v3 = sub_100122890;
  }

  *uint64_t v2 = v0;
  v2[1] = (uint64_t *)v3;
  return v5();
}

uint64_t sub_10012282C()
{
  v0[21] = v0[18];
  v0[22] = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100122A0C;
  return v3();
}

uint64_t sub_100122890()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 152LL);
  *(void *)(*(void *)v1 + 16Hasher.init(_seed:)(v1, 0LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100122AE0;
  }
  else {
    uint64_t v3 = sub_1001228F4;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1001228F4()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 64);
  uint64_t v4 = *(void *)(v0 + 32);
  swift_release(*(void *)(v0 + 88));
  swift_release(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10012295C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 32);
  swift_task_dealloc(*(void *)(v0 + 64));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1001229B4()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 32);
  swift_task_dealloc(*(void *)(v0 + 64));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100122A0C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 176LL);
  *(void *)(*(void *)v1 + 184LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_100122B54;
  }
  else {
    uint64_t v3 = sub_100122A70;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_100122A70()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 88);
  swift_willThrow();
  swift_release(v1);
  swift_release(v2);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 32);
  swift_task_dealloc(*(void *)(v0 + 64));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100122AE0()
{
  v0[21] = v0[20];
  v0[22] = (uint64_t)v1;
  *uint64_t v1 = v0;
  v1[1] = (uint64_t *)sub_100122A0C;
  return v3();
}

uint64_t sub_100122B54()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 88);
  swift_errorRelease(*(void *)(v0 + 168));
  swift_release(v1);
  swift_release(v2);
  uint64_t v3 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 32);
  swift_task_dealloc(*(void *)(v0 + 64));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100122BC4(uint64_t a1)
{
  return sub_100119FA0(a1, *(_BYTE *)(v1 + 16), *(uint64_t **)(v1 + 24), *(void *)(v1 + 32), *(void *)(v1 + 40));
}

uint64_t sub_100122BE8(uint64_t a1)
{
  return sub_10011A294(a1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24));
}

uint64_t sub_100122BF8()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_100122C24(uint64_t a1)
{
  return sub_10011A4EC(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24), *(void *)(v1 + 32));
}

unint64_t sub_100122C30()
{
  unint64_t result = qword_1009A1B90;
  if (!qword_1009A1B90)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FAA74, &type metadata for AccessoryInfoResponse);
    atomic_store(result, &qword_1009A1B90);
  }

  return result;
}

uint64_t type metadata accessor for AccessoryMetadataManager.Error(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009A1C58, (uint64_t)&nominal type descriptor for AccessoryMetadataManager.Error);
}

unint64_t sub_100122C88()
{
  unint64_t result = qword_1009B9420;
  if (!qword_1009B9420)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A1BB8);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for AsyncThrowingStream<A, B>, v1);
    atomic_store(result, (unint64_t *)&qword_1009B9420);
  }

  return result;
}

unint64_t sub_100122CD4()
{
  unint64_t result = qword_1009A6B20;
  if (!qword_1009A6B20)
  {
    unint64_t result = swift_getWitnessTable(&unk_10081D2A0, &type metadata for CentralManager.Error);
    atomic_store(result, (unint64_t *)&qword_1009A6B20);
  }

  return result;
}

void *sub_100122D18(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (void *)(v10 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain();
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v11 = type metadata accessor for UUID(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v11 - 8) + 16LL))(a1, a2, v11);
      uint64_t v12 = (int *)type metadata accessor for AccessoryMetadata(0LL);
      uint64_t v13 = v12[5];
      uint64_t v14 = (void *)((char *)a1 + v13);
      uint64_t v15 = (void *)((char *)a2 + v13);
      uint64_t v16 = *v15;
      unint64_t v17 = v15[1];
      sub_10001736C(*v15, v17);
      *uint64_t v14 = v16;
      v14[1] = v17;
      uint64_t v18 = v12[6];
      uint64_t v19 = (void *)((char *)a1 + v18);
      uint64_t v20 = (void *)((char *)a2 + v18);
      uint64_t v21 = v20[1];
      *uint64_t v19 = *v20;
      v19[1] = v21;
      uint64_t v22 = v12[7];
      uint64_t v23 = (void *)((char *)a1 + v22);
      uint64_t v24 = (void *)((char *)a2 + v22);
      uint64_t v25 = v24[1];
      void *v23 = *v24;
      v23[1] = v25;
      *(_DWORD *)((char *)a1 + v12[8]) = *(_DWORD *)((char *)a2 + v12[8]);
      uint64_t v26 = v12[9];
      uint64_t v27 = (char *)a1 + v26;
      uint64_t v28 = (char *)a2 + v26;
      *(_DWORD *)uint64_t v27 = *(_DWORD *)v28;
      v27[4] = v28[4];
      uint64_t v29 = v12[10];
      uint64_t v30 = (char *)a1 + v29;
      uint64_t v31 = (char *)a2 + v29;
      *(_OWORD *)uint64_t v30 = *(_OWORD *)v31;
      v30[16] = v31[16];
      uint64_t v32 = v12[11];
      uint64_t v33 = (char *)a1 + v32;
      uint64_t v34 = (char *)a2 + v32;
      v33[8] = v34[8];
      *(void *)uint64_t v33 = *(void *)v34;
      uint64_t v35 = v12[12];
      uint64_t v36 = (char *)a1 + v35;
      uint64_t v37 = (char *)a2 + v35;
      *(_DWORD *)uint64_t v36 = *(_DWORD *)v37;
      v36[4] = v37[4];
      *((_BYTE *)a1 + v12[13]) = *((_BYTE *)a2 + v12[13]);
      *((_BYTE *)a1 + v12[14]) = *((_BYTE *)a2 + v12[14]);
      uint64_t v38 = v12[15];
      uint64_t v39 = (void *)((char *)a1 + v38);
      uint64_t v40 = (void *)((char *)a2 + v38);
      uint64_t v41 = v40[1];
      *uint64_t v39 = *v40;
      v39[1] = v41;
      swift_bridgeObjectRetain(v21);
      swift_bridgeObjectRetain(v25);
      swift_bridgeObjectRetain(v41);
      swift_storeEnumTagMultiPayload(a1, a3, 2LL);
    }

    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v42 = type metadata accessor for MACAddress(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v42 - 8) + 16LL))(a1, a2, v42);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      uint64_t v9 = *a2;
      swift_errorRetain(v9);
      *a1 = v9;
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t sub_100122F50(void *a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  switch((_DWORD)result)
  {
    case 2:
      uint64_t v4 = type metadata accessor for UUID(0LL);
      (*(void (**)(void *, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
      uint64_t v5 = type metadata accessor for AccessoryMetadata(0LL);
      sub_100016F9C(*(void *)((char *)a1 + *(int *)(v5 + 20)), *(void *)((char *)a1 + *(int *)(v5 + 20) + 8));
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      return swift_bridgeObjectRelease();
    case 1:
      uint64_t v6 = type metadata accessor for MACAddress(0LL);
      return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v6 - 8) + 8LL))(a1, v6);
    case 0:
      return swift_errorRelease(*a1);
  }

  return result;
}

void *sub_100123028(void *a1, void *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v8 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
    uint64_t v9 = (int *)type metadata accessor for AccessoryMetadata(0LL);
    uint64_t v10 = v9[5];
    uint64_t v11 = (void *)((char *)a1 + v10);
    uint64_t v12 = (void *)((char *)a2 + v10);
    uint64_t v13 = *v12;
    unint64_t v14 = v12[1];
    sub_10001736C(*v12, v14);
    *uint64_t v11 = v13;
    v11[1] = v14;
    uint64_t v15 = v9[6];
    uint64_t v16 = (void *)((char *)a1 + v15);
    unint64_t v17 = (void *)((char *)a2 + v15);
    uint64_t v18 = v17[1];
    void *v16 = *v17;
    v16[1] = v18;
    uint64_t v19 = v9[7];
    uint64_t v20 = (void *)((char *)a1 + v19);
    uint64_t v21 = (void *)((char *)a2 + v19);
    uint64_t v22 = v21[1];
    *uint64_t v20 = *v21;
    v20[1] = v22;
    *(_DWORD *)((char *)a1 + v9[8]) = *(_DWORD *)((char *)a2 + v9[8]);
    uint64_t v23 = v9[9];
    uint64_t v24 = (char *)a1 + v23;
    uint64_t v25 = (char *)a2 + v23;
    *(_DWORD *)uint64_t v24 = *(_DWORD *)v25;
    void v24[4] = v25[4];
    uint64_t v26 = v9[10];
    uint64_t v27 = (char *)a1 + v26;
    uint64_t v28 = (char *)a2 + v26;
    *(_OWORD *)uint64_t v27 = *(_OWORD *)v28;
    v27[16] = v28[16];
    uint64_t v29 = v9[11];
    uint64_t v30 = (char *)a1 + v29;
    uint64_t v31 = (char *)a2 + v29;
    v30[8] = v31[8];
    *(void *)uint64_t v30 = *(void *)v31;
    uint64_t v32 = v9[12];
    uint64_t v33 = (char *)a1 + v32;
    uint64_t v34 = (char *)a2 + v32;
    *(_DWORD *)uint64_t v33 = *(_DWORD *)v34;
    v33[4] = v34[4];
    *((_BYTE *)a1 + v9[13]) = *((_BYTE *)a2 + v9[13]);
    *((_BYTE *)a1 + v9[14]) = *((_BYTE *)a2 + v9[14]);
    uint64_t v35 = v9[15];
    uint64_t v36 = (void *)((char *)a1 + v35);
    uint64_t v37 = (void *)((char *)a2 + v35);
    uint64_t v38 = v37[1];
    *uint64_t v36 = *v37;
    v36[1] = v38;
    swift_bridgeObjectRetain(v18);
    swift_bridgeObjectRetain(v22);
    swift_bridgeObjectRetain(v38);
    swift_storeEnumTagMultiPayload(a1, a3, 2LL);
  }

  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v39 = type metadata accessor for MACAddress(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v39 - 8) + 16LL))(a1, a2, v39);
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v7 = *a2;
    swift_errorRetain(v7);
    *a1 = v7;
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

void *sub_100123238(void *a1, void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100018C68((uint64_t)a1, type metadata accessor for AccessoryMetadataManager.Error);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v8 = type metadata accessor for UUID(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v8 - 8) + 16LL))(a1, a2, v8);
      uint64_t v9 = (int *)type metadata accessor for AccessoryMetadata(0LL);
      uint64_t v10 = v9[5];
      uint64_t v11 = (void *)((char *)a1 + v10);
      uint64_t v12 = (void *)((char *)a2 + v10);
      uint64_t v13 = *v12;
      unint64_t v14 = v12[1];
      sub_10001736C(*v12, v14);
      *uint64_t v11 = v13;
      v11[1] = v14;
      uint64_t v15 = v9[6];
      uint64_t v16 = (void *)((char *)a1 + v15);
      unint64_t v17 = (void *)((char *)a2 + v15);
      void *v16 = *v17;
      uint64_t v18 = v17[1];
      v16[1] = v18;
      uint64_t v19 = v9[7];
      uint64_t v20 = (void *)((char *)a1 + v19);
      uint64_t v21 = (void *)((char *)a2 + v19);
      *uint64_t v20 = *v21;
      uint64_t v22 = v21[1];
      v20[1] = v22;
      *(_DWORD *)((char *)a1 + v9[8]) = *(_DWORD *)((char *)a2 + v9[8]);
      uint64_t v23 = v9[9];
      uint64_t v24 = (char *)a1 + v23;
      uint64_t v25 = (char *)a2 + v23;
      int v26 = *(_DWORD *)v25;
      void v24[4] = v25[4];
      *(_DWORD *)uint64_t v24 = v26;
      uint64_t v27 = v9[10];
      uint64_t v28 = (char *)a1 + v27;
      uint64_t v29 = (char *)a2 + v27;
      __int128 v30 = *(_OWORD *)v29;
      v28[16] = v29[16];
      *(_OWORD *)uint64_t v28 = v30;
      uint64_t v31 = v9[11];
      uint64_t v32 = (char *)a1 + v31;
      uint64_t v33 = (char *)a2 + v31;
      uint64_t v34 = *(void *)v33;
      v32[8] = v33[8];
      *(void *)uint64_t v32 = v34;
      uint64_t v35 = v9[12];
      uint64_t v36 = (char *)a1 + v35;
      uint64_t v37 = (char *)a2 + v35;
      LODWORD(v34) = *(_DWORD *)v37;
      v36[4] = v37[4];
      *(_DWORD *)uint64_t v36 = v34;
      *((_BYTE *)a1 + v9[13]) = *((_BYTE *)a2 + v9[13]);
      *((_BYTE *)a1 + v9[14]) = *((_BYTE *)a2 + v9[14]);
      uint64_t v38 = v9[15];
      uint64_t v39 = (void *)((char *)a1 + v38);
      uint64_t v40 = (void *)((char *)a2 + v38);
      *uint64_t v39 = *v40;
      uint64_t v41 = v40[1];
      v39[1] = v41;
      swift_bridgeObjectRetain(v18);
      swift_bridgeObjectRetain(v22);
      swift_bridgeObjectRetain(v41);
      swift_storeEnumTagMultiPayload(a1, a3, 2LL);
    }

    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v42 = type metadata accessor for MACAddress(0LL);
      (*(void (**)(void *, void *, uint64_t))(*(void *)(v42 - 8) + 16LL))(a1, a2, v42);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      uint64_t v7 = *a2;
      swift_errorRetain(v7);
      *a1 = v7;
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

_BYTE *sub_100123478(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 2)
  {
    uint64_t v8 = type metadata accessor for UUID(0LL);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
    uint64_t v9 = (int *)type metadata accessor for AccessoryMetadata(0LL);
    *(_OWORD *)&a1[v9[5]] = *(_OWORD *)&a2[v9[5]];
    *(_OWORD *)&a1[v9[6]] = *(_OWORD *)&a2[v9[6]];
    *(_OWORD *)&a1[v9[7]] = *(_OWORD *)&a2[v9[7]];
    *(_DWORD *)&a1[v9[8]] = *(_DWORD *)&a2[v9[8]];
    uint64_t v10 = v9[9];
    uint64_t v11 = &a1[v10];
    uint64_t v12 = &a2[v10];
    v11[4] = v12[4];
    *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
    uint64_t v13 = v9[10];
    unint64_t v14 = &a1[v13];
    uint64_t v15 = &a2[v13];
    v14[16] = v15[16];
    *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
    uint64_t v16 = v9[11];
    unint64_t v17 = &a1[v16];
    uint64_t v18 = &a2[v16];
    *(void *)unint64_t v17 = *(void *)v18;
    v17[8] = v18[8];
    uint64_t v19 = v9[12];
    uint64_t v20 = &a1[v19];
    uint64_t v21 = &a2[v19];
    *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
    v20[4] = v21[4];
    a1[v9[13]] = a2[v9[13]];
    a1[v9[14]] = a2[v9[14]];
    *(_OWORD *)&a1[v9[15]] = *(_OWORD *)&a2[v9[15]];
    swift_storeEnumTagMultiPayload(a1, a3, 2LL);
  }

  else if (EnumCaseMultiPayload == 1)
  {
    uint64_t v7 = type metadata accessor for MACAddress(0LL);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  return a1;
}

_BYTE *sub_10012360C(_BYTE *a1, _BYTE *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100018C68((uint64_t)a1, type metadata accessor for AccessoryMetadataManager.Error);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 2)
    {
      uint64_t v8 = type metadata accessor for UUID(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v8 - 8) + 32LL))(a1, a2, v8);
      uint64_t v9 = (int *)type metadata accessor for AccessoryMetadata(0LL);
      *(_OWORD *)&a1[v9[5]] = *(_OWORD *)&a2[v9[5]];
      *(_OWORD *)&a1[v9[6]] = *(_OWORD *)&a2[v9[6]];
      *(_OWORD *)&a1[v9[7]] = *(_OWORD *)&a2[v9[7]];
      *(_DWORD *)&a1[v9[8]] = *(_DWORD *)&a2[v9[8]];
      uint64_t v10 = v9[9];
      uint64_t v11 = &a1[v10];
      uint64_t v12 = &a2[v10];
      v11[4] = v12[4];
      *(_DWORD *)uint64_t v11 = *(_DWORD *)v12;
      uint64_t v13 = v9[10];
      unint64_t v14 = &a1[v13];
      uint64_t v15 = &a2[v13];
      v14[16] = v15[16];
      *(_OWORD *)unint64_t v14 = *(_OWORD *)v15;
      uint64_t v16 = v9[11];
      unint64_t v17 = &a1[v16];
      uint64_t v18 = &a2[v16];
      *(void *)unint64_t v17 = *(void *)v18;
      v17[8] = v18[8];
      uint64_t v19 = v9[12];
      uint64_t v20 = &a1[v19];
      uint64_t v21 = &a2[v19];
      *(_DWORD *)uint64_t v20 = *(_DWORD *)v21;
      v20[4] = v21[4];
      a1[v9[13]] = a2[v9[13]];
      a1[v9[14]] = a2[v9[14]];
      *(_OWORD *)&a1[v9[15]] = *(_OWORD *)&a2[v9[15]];
      swift_storeEnumTagMultiPayload(a1, a3, 2LL);
    }

    else if (EnumCaseMultiPayload == 1)
    {
      uint64_t v7 = type metadata accessor for MACAddress(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v7 - 8) + 32LL))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }
  }

  return a1;
}

uint64_t getEnumTagSinglePayload for TimeBasedKeysCriteria(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return (*(uint64_t (**)(void))(*(void *)(a3 - 8) + 48LL))();
}

uint64_t storeEnumTagSinglePayload for TimeBasedKeysCriteria(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(void))(*(void *)(a4 - 8) + 56LL))();
}

uint64_t sub_1001237D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_storeEnumTagMultiPayload(a1, a3, a2);
}

uint64_t sub_1001237E4(uint64_t a1)
{
  v5[0] = "\b";
  uint64_t result = type metadata accessor for MACAddress(319LL);
  if (v3 <= 0x3F)
  {
    v5[1] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for AccessoryMetadata(319LL);
    if (v4 <= 0x3F)
    {
      v5[2] = *(void *)(result - 8) + 64LL;
      swift_initEnumMetadataMultiPayload(a1, 256LL, 3LL, v5);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1001238A4( void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void (*a6)(char *, void *, id))
{
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a4);
  id v15 = a3;
  id v16 = a1;
  id v17 = a5;
  a6(v14, a5, v16);

  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

uint64_t sub_10012398C( void *a1, uint64_t a2, void *a3, uint64_t a4, void *a5, void (*a6)(char *, void *))
{
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  unint64_t v14 = (char *)&v19 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  static UUID._unconditionallyBridgeFromObjectiveC(_:)(a4);
  id v15 = a3;
  id v16 = a1;
  id v17 = a5;
  a6(v14, a5);

  return (*(uint64_t (**)(char *, uint64_t))(v12 + 8))(v14, v11);
}

void sub_100123E9C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = sub_100004AEC(&qword_10099E488);
  __chkstk_darwin(v6);
  uint64_t v103 = (void (*)(char *, uint64_t))((char *)&v94 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v96 = (char *)&v94 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v10);
  unint64_t v14 = (char *)&v94 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v98 = (char *)&v94 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v99 = (char *)&v94 - v18;
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v94 - v19;
  uint64_t v21 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v22 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  uint64_t v24 = (uint64_t *)((char *)&v94 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v102 = a3;
  uint64_t v25 = *(void **)(a3 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  *uint64_t v24 = v25;
  (*(void (**)(void *, void, uint64_t))(v22 + 104))(v24, enum case for DispatchPredicate.onQueue(_:), v21);
  id v26 = v25;
  LOBYTE(v25) = _dispatchPreconditionTest(_:)(v24);
  (*(void (**)(void *, uint64_t))(v22 + 8))(v24, v21);
  if ((v25 & 1) != 0)
  {
    if (qword_10099B330 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B330, sub_100374304);
LABEL_3:
  uint64_t v97 = v14;
  uint64_t v27 = type metadata accessor for Logger(0LL);
  uint64_t v28 = sub_10000A720(v27, (uint64_t)qword_100A2A748);
  uint64_t v100 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v29 = v100(v20, a1, v8);
  uint64_t v101 = v28;
  __int128 v30 = (os_log_s *)Logger.logObject.getter(v29);
  os_log_type_t v31 = static os_log_type_t.default.getter(v30);
  if (os_log_type_enabled(v30, v31))
  {
    uint64_t v32 = swift_slowAlloc(12LL, -1LL);
    uint64_t v95 = a2;
    uint64_t v33 = v8;
    uint64_t v34 = (uint8_t *)v32;
    uint64_t v35 = swift_slowAlloc(32LL, -1LL);
    v108[0] = v35;
    *(_DWORD *)uint64_t v34 = 136315138;
    uint64_t v94 = v9;
    unint64_t v36 = sub_1000F620C();
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter(v33, v36);
    uint64_t v105 = sub_1003F11D4(v37, v38, v108);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v34 + 4, v34 + 12);
    swift_bridgeObjectRelease();
    uint64_t v39 = *(void (**)(char *, uint64_t))(v94 + 8);
    v39(v20, v33);
    _os_log_impl((void *)&_mh_execute_header, v30, v31, "didStartPlayingUnauthorizedSoundOnDevice %s", v34, 0xCu);
    swift_arrayDestroy(v35, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v35, -1LL, -1LL);
    uint64_t v40 = v34;
    uint64_t v8 = v33;
    a2 = v95;
    swift_slowDealloc(v40, -1LL, -1LL);
  }

  else
  {
    uint64_t v39 = *(void (**)(char *, uint64_t))(v9 + 8);
    v39(v20, v8);
  }

  uint64_t v42 = v102;
  uint64_t v41 = v103;
  uint64_t v43 = (uint64_t *)(v102 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators);
  swift_beginAccess(v102 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators, v108, 0LL, 0LL);
  uint64_t v44 = *v43;
  if (!*(void *)(v44 + 16))
  {
    uint64_t v52 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
    (*(void (**)(void (*)(char *, uint64_t), uint64_t, uint64_t, uint64_t))(*(void *)(v52 - 8) + 56LL))( v41,  1LL,  1LL,  v52);
    goto LABEL_12;
  }

  swift_bridgeObjectRetain(v44);
  unint64_t v45 = sub_10030D124(a1);
  if ((v46 & 1) != 0)
  {
    unint64_t v47 = v45;
    uint64_t v48 = *(void *)(v44 + 56);
    uint64_t v49 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
    uint64_t v50 = *(void *)(v49 - 8);
    uint64_t v51 = v48 + *(void *)(v50 + 72) * v47;
    uint64_t v41 = v103;
    sub_100125198(v51, (uint64_t)v103);
    (*(void (**)(void (*)(char *, uint64_t), void, uint64_t, uint64_t))(v50 + 56))( v41,  0LL,  1LL,  v49);
  }

  else
  {
    uint64_t v49 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
    (*(void (**)(void (*)(char *, uint64_t), uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56LL))( v41,  1LL,  1LL,  v49);
  }

  swift_bridgeObjectRelease();
  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
  if ((*(unsigned int (**)(void (*)(char *, uint64_t), uint64_t, uint64_t))(*(void *)(v49 - 8)
                                                                                              + 48LL))( v41,  1LL,  v49) == 1)
  {
LABEL_12:
    sub_100015794((uint64_t)v41, &qword_10099E488);
    uint64_t v53 = v99;
    uint64_t v54 = v100(v99, a1, v8);
    uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
    os_log_type_t v56 = static os_log_type_t.error.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v58 = swift_slowAlloc(32LL, -1LL);
      uint64_t v105 = v58;
      *(_DWORD *)uint64_t v57 = 136315138;
      unint64_t v59 = sub_1000F620C();
      uint64_t v60 = dispatch thunk of CustomStringConvertible.description.getter(v8, v59);
      uint64_t v107 = sub_1003F11D4(v60, v61, &v105);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v107, v108, v57 + 4, v57 + 12);
      swift_bridgeObjectRelease();
      v39(v53, v8);
      uint64_t v62 = "didStartPlayingUnauthorizedSoundOnDevice called with unknown device %s";
LABEL_22:
      _os_log_impl((void *)&_mh_execute_header, v55, v56, v62, v57, 0xCu);
      swift_arrayDestroy(v58, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v58, -1LL, -1LL);
      swift_slowDealloc(v57, -1LL, -1LL);
LABEL_24:

      return;
    }

    goto LABEL_23;
  }

  sub_100015794((uint64_t)v41, &qword_10099E488);
  uint64_t v63 = (uint64_t *)(v42 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_playSoundSubjects);
  __n128 v64 = swift_beginAccess(v42 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_playSoundSubjects, &v105, 0LL, 0LL);
  uint64_t v65 = *v63;
  if (!*(void *)(v65 + 16))
  {
LABEL_20:
    uint64_t v53 = v98;
    uint64_t v81 = ((uint64_t (*)(char *, uint64_t, uint64_t, __n128))v100)(v98, a1, v8, v64);
    uint64_t v55 = (os_log_s *)Logger.logObject.getter(v81);
    os_log_type_t v56 = static os_log_type_t.error.getter(v55);
    if (os_log_type_enabled(v55, v56))
    {
      uint64_t v57 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v58 = swift_slowAlloc(32LL, -1LL);
      uint64_t v107 = v58;
      *(_DWORD *)uint64_t v57 = 136315138;
      unint64_t v82 = sub_1000F620C();
      uint64_t v83 = dispatch thunk of CustomStringConvertible.description.getter(v8, v82);
      uint64_t v104 = sub_1003F11D4(v83, v84, &v107);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v104, &v105, v57 + 4, v57 + 12);
      swift_bridgeObjectRelease();
      v39(v53, v8);
      uint64_t v62 = "Missing playSoundSubject for device %s!";
      goto LABEL_22;
    }

void sub_100124918(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v85 = a1;
  uint64_t v5 = sub_100004AEC(&qword_10099E488);
  __chkstk_darwin(v5);
  uint64_t v84 = (uint64_t)&v77 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v78 = (char *)&v77 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  unint64_t v79 = (char *)&v77 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v80 = (char *)&v77 - v14;
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v77 - v15;
  uint64_t v17 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (uint64_t *)((char *)&v77 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v21 = *(void **)(a3 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  *uint64_t v20 = v21;
  (*(void (**)(void *, void, uint64_t))(v18 + 104))(v20, enum case for DispatchPredicate.onQueue(_:), v17);
  id v22 = v21;
  LOBYTE(v21) = _dispatchPreconditionTest(_:)(v20);
  (*(void (**)(void *, uint64_t))(v18 + 8))(v20, v17);
  if ((v21 & 1) != 0)
  {
    uint64_t v83 = a3;
    if (qword_10099B330 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B330, sub_100374304);
LABEL_3:
  uint64_t v23 = type metadata accessor for Logger(0LL);
  uint64_t v24 = sub_10000A720(v23, (uint64_t)qword_100A2A748);
  uint64_t v25 = v85;
  uint64_t v81 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 16);
  uint64_t v26 = v81(v16, v85, v7);
  uint64_t v82 = v24;
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.default.getter(v27);
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = swift_slowAlloc(12LL, -1LL);
    uint64_t v77 = a2;
    uint64_t v30 = v7;
    os_log_type_t v31 = (uint8_t *)v29;
    uint64_t v32 = swift_slowAlloc(32LL, -1LL);
    v88[0] = v32;
    *(_DWORD *)os_log_type_t v31 = 136315138;
    unint64_t v33 = sub_1000F620C();
    uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter(v30, v33);
    uint64_t v87 = sub_1003F11D4(v34, v35, v88);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v87, v88, v31 + 4, v31 + 12);
    swift_bridgeObjectRelease();
    unint64_t v36 = *(void (**)(char *, uint64_t))(v8 + 8);
    v36(v16, v30);
    _os_log_impl((void *)&_mh_execute_header, v27, v28, "didCompletePlayingUnauthorizedSoundOnDevice %s", v31, 0xCu);
    swift_arrayDestroy(v32, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v37 = v32;
    uint64_t v25 = v85;
    swift_slowDealloc(v37, -1LL, -1LL);
    unint64_t v38 = v31;
    uint64_t v7 = v30;
    a2 = v77;
    swift_slowDealloc(v38, -1LL, -1LL);
  }

  else
  {
    unint64_t v36 = *(void (**)(char *, uint64_t))(v8 + 8);
    v36(v16, v7);
  }

  uint64_t v39 = (uint64_t *)(v83 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators);
  swift_beginAccess(v83 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators, v88, 0LL, 0LL);
  uint64_t v40 = *v39;
  uint64_t v41 = v84;
  if (!*(void *)(v40 + 16))
  {
    uint64_t v49 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v49 - 8) + 56LL))(v41, 1LL, 1LL, v49);
    goto LABEL_12;
  }

  swift_bridgeObjectRetain(v40);
  unint64_t v42 = sub_10030D124(v25);
  if ((v43 & 1) != 0)
  {
    unint64_t v44 = v42;
    uint64_t v45 = *(void *)(v40 + 56);
    uint64_t v46 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
    uint64_t v47 = *(void *)(v46 - 8);
    uint64_t v48 = v45 + *(void *)(v47 + 72) * v44;
    uint64_t v41 = v84;
    sub_100125198(v48, v84);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v47 + 56))(v41, 0LL, 1LL, v46);
  }

  else
  {
    uint64_t v46 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 56LL))(v41, 1LL, 1LL, v46);
  }

  swift_bridgeObjectRelease();
  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v46 - 8) + 48LL))(v41, 1LL, v46) == 1)
  {
LABEL_12:
    sub_100015794(v41, &qword_10099E488);
    uint64_t v50 = v80;
    uint64_t v51 = v81(v80, v25, v7);
    uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
    os_log_type_t v53 = static os_log_type_t.error.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v55 = swift_slowAlloc(32LL, -1LL);
      uint64_t v87 = v55;
      *(_DWORD *)uint64_t v54 = 136315138;
      unint64_t v56 = sub_1000F620C();
      uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter(v7, v56);
      uint64_t v86 = sub_1003F11D4(v57, v58, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v54 + 4, v54 + 12);
      swift_bridgeObjectRelease();
      v36(v50, v7);
      unint64_t v59 = "didCompletePlayingUnauthorizedSoundOnDevice called with unknown device %s";
LABEL_14:
      _os_log_impl((void *)&_mh_execute_header, v52, v53, v59, v54, 0xCu);
      swift_arrayDestroy(v55, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1LL, -1LL);
      swift_slowDealloc(v54, -1LL, -1LL);
LABEL_21:

      return;
    }

    goto LABEL_20;
  }

  sub_100015794(v41, &qword_10099E488);
  sub_100381A9C(v25, 0, 0LL);
  if (!a2)
  {
    uint64_t v50 = v78;
    uint64_t v73 = v81(v78, v25, v7);
    uint64_t v52 = (os_log_s *)Logger.logObject.getter(v73);
    os_log_type_t v53 = static os_log_type_t.default.getter(v52);
    if (os_log_type_enabled(v52, v53))
    {
      uint64_t v54 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v55 = swift_slowAlloc(32LL, -1LL);
      uint64_t v87 = v55;
      *(_DWORD *)uint64_t v54 = 136315138;
      unint64_t v74 = sub_1000F620C();
      uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter(v7, v74);
      uint64_t v86 = sub_1003F11D4(v75, v76, &v87);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v86, &v87, v54 + 4, v54 + 12);
      swift_bridgeObjectRelease();
      v36(v50, v7);
      unint64_t v59 = "didCompletePlayingUnauthorizedSoundOnDevice %s succeeded";
      goto LABEL_14;
    }

uint64_t sub_100125198(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t AllMacBeaconConfigs.normalBattery.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_1001251E8(v1, a1);
}

uint64_t sub_1001251E8(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a1 + 16);
  *(_OWORD *)a2 = *(_OWORD *)a1;
  *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v3;
  *(_OWORD *)(a2 + 32) = *(_OWORD *)(a1 + 32);
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(a2 + 48) = v4;
  swift_bridgeObjectRetain(v4);
  return a2;
}

uint64_t AllMacBeaconConfigs.lowBattery.getter@<X0>(uint64_t a1@<X8>)
{
  return sub_100125230(v1 + 56, a1);
}

uint64_t sub_100125230(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A1CF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

BOOL static MacBeaconConfig.== infix(_:_:)(uint64_t a1, uint64_t a2)
{
  return *(double *)a1 == *(double *)a2
      && *(double *)(a1 + 8) == *(double *)(a2 + 8)
      && *(double *)(a1 + 16) == *(double *)(a2 + 16)
      && *(double *)(a1 + 24) == *(double *)(a2 + 24)
      && *(double *)(a1 + 32) == *(double *)(a2 + 32)
}

uint64_t sub_1001252F0()
{
  if (*v0) {
    return 0x6574746142776F6CLL;
  }
  else {
    return 0x61426C616D726F6ELL;
  }
}

uint64_t sub_10012533C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1001272D8(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100125360(uint64_t a1)
{
  unint64_t v2 = sub_100127208();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100125388(uint64_t a1)
{
  unint64_t v2 = sub_100127208();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t AllMacBeaconConfigs.encode(to:)(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A1CF8);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v15 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_100127208();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for AllMacBeaconConfigs.CodingKeys,  &type metadata for AllMacBeaconConfigs.CodingKeys,  v11,  v9,  v10);
  __int128 v12 = *(_OWORD *)(v3 + 16);
  v17[0] = *(_OWORD *)v3;
  v17[1] = v12;
  _BYTE v17[2] = *(_OWORD *)(v3 + 32);
  uint64_t v18 = *(void *)(v3 + 48);
  char v16 = 0;
  unint64_t v13 = sub_10012724C();
  KeyedEncodingContainer.encode<A>(_:forKey:)(v17, &v16, v5, &type metadata for MacBeaconConfig, v13);
  if (!v2)
  {
    sub_100127290(v3 + 56, (uint64_t)v19);
    sub_100127290((uint64_t)v19, (uint64_t)v17);
    char v16 = 1;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v17, &v16, v5, &type metadata for MacBeaconConfig, v13);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

__n128 AllMacBeaconConfigs.init(from:)@<Q0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[5];
    *(_OWORD *)(a2 + 64) = v7[4];
    *(_OWORD *)(a2 + 80) = v5;
    *(_OWORD *)(a2 + 96) = v7[6];
    __int128 v6 = v7[1];
    *(_OWORD *)a2 = v7[0];
    *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v6;
    __n128 result = (__n128)v7[3];
    *(_OWORD *)(a2 + 32) = v7[2];
    *(__n128 *)(a2 + 48) = result;
  }

  return result;
}

uint64_t sub_100125564(void *a1)
{
  return AllMacBeaconConfigs.encode(to:)(a1);
}

uint64_t sub_1001255AC(_OWORD *a1, __int128 *a2)
{
  __int128 v2 = a1[5];
  v13[4] = a1[4];
  v13[5] = v2;
  __int128 v3 = a1[6];
  __int128 v4 = a1[1];
  v13[0] = *a1;
  v13[1] = v4;
  __int128 v5 = a1[3];
  v13[2] = a1[2];
  v13[3] = v5;
  __int128 v6 = *a2;
  __int128 v7 = a2[1];
  v13[6] = v3;
  v14[0] = v6;
  __int128 v8 = a2[2];
  __int128 v9 = a2[3];
  __int128 v10 = a2[6];
  v14[5] = a2[5];
  v14[6] = v10;
  __int128 v11 = a2[4];
  v14[3] = v9;
  v14[4] = v11;
  v14[1] = v7;
  v14[2] = v8;
  return _s12searchpartyd19AllMacBeaconConfigsV23__derived_struct_equalsySbAC_ACtFZ_0((uint64_t)v13, (uint64_t)v14) & 1;
}

double MacBeaconConfig.slowRollAdvertisementDuration.getter()
{
  return *(double *)(v0 + 24);
}

double MacBeaconConfig.slowRollNoAdvertisementDuration.getter()
{
  return *(double *)(v0 + 32);
}

double MacBeaconConfig.noAdvertisementDurationDecayFactor.getter()
{
  return *(double *)(v0 + 40);
}

uint64_t MacBeaconConfig.postInitialDayAdvertisementTimes.getter()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 48));
}

uint64_t sub_100125630(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_10012566C + 4 * byte_1007ED110[a1]))( 0xD00000000000001BLL,  0x800000010084DD00LL);
}

unint64_t sub_10012566C()
{
  return 0xD000000000000016LL;
}

uint64_t sub_1001256A4()
{
  return v0 + 15;
}

uint64_t sub_1001256B4()
{
  return v0 + 20;
}

void sub_1001256C4()
{
}

uint64_t sub_1001256DC(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_100125718 + 4 * byte_1007ED117[a1]))( 0xD00000000000001BLL,  0x800000010084DD00LL);
}

unint64_t sub_100125718()
{
  return 0xD000000000000016LL;
}

uint64_t sub_100125750()
{
  return v0 + 15;
}

uint64_t sub_100125760()
{
  return v0 + 20;
}

void sub_100125770()
{
}

void sub_100125788(char *a1)
{
}

void sub_100125794()
{
}

void sub_1001257A0(uint64_t a1)
{
}

void sub_1001257A8(uint64_t a1)
{
}

unint64_t sub_1001257B0@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100127610(*a1);
  *a2 = result;
  return result;
}

uint64_t sub_1001257DC@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = sub_100125630(*v1);
  *a1 = result;
  a1[1] = v4;
  return result;
}

uint64_t sub_100125804()
{
  return sub_1001256DC(*v0);
}

unint64_t sub_10012580C@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_100127610(a1);
  *a2 = result;
  return result;
}

void sub_100125830(_BYTE *a1@<X8>)
{
  *a1 = 7;
}

uint64_t sub_10012583C(uint64_t a1)
{
  unint64_t v2 = sub_1001278D4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100125864(uint64_t a1)
{
  unint64_t v2 = sub_1001278D4();
  return CodingKey.debugDescription.getter(a1, v2);
}

void __swiftcall MacBeaconConfig.init(initialNoBeaconDuration:fastRollAdvertisementDuration:fastRollAdvertisementInterval:slowRollAdvertisementDuration:slowRollNoAdvertisementDuration:noAdvertisementDurationDecayFactor:postInitialDayAdvertisementTimes:)( searchpartyd::MacBeaconConfig *__return_ptr retstr, Swift::Double initialNoBeaconDuration, Swift::Double fastRollAdvertisementDuration, Swift::Double fastRollAdvertisementInterval, Swift::Double slowRollAdvertisementDuration, Swift::Double slowRollNoAdvertisementDuration, Swift::Double noAdvertisementDurationDecayFactor, Swift::OpaquePointer postInitialDayAdvertisementTimes)
{
  retstr->initialNoBeaconDuration = initialNoBeaconDuration;
  retstr->fastRollAdvertisementDuration = fastRollAdvertisementDuration;
  retstr->fastRollAdvertisementInterval = fastRollAdvertisementInterval;
  retstr->slowRollAdvertisementDuration = slowRollAdvertisementDuration;
  retstr->slowRollNoAdvertisementDuration = slowRollNoAdvertisementDuration;
  retstr->noAdvertisementDurationDecayFactor = noAdvertisementDurationDecayFactor;
  retstr->postInitialDayAdvertisementTimes = postInitialDayAdvertisementTimes;
}

double MacBeaconConfig.init(from:)@<D0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *(_OWORD *)a2 = v6[0];
    *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v5;
    double result = *(double *)&v7;
    *(_OWORD *)(a2 + 32) = v7;
    *(void *)(a2 + 48) = v8;
  }

  return result;
}

uint64_t MacBeaconConfig.encode(to:)(void *a1)
{
  __int128 v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A1D10);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1001278D4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for MacBeaconConfig.CodingKeys,  &type metadata for MacBeaconConfig.CodingKeys,  v11,  v9,  v10);
  double v12 = *v3;
  char v29 = 0;
  KeyedEncodingContainer.encode(_:forKey:)(&v29, v5, v12);
  if (!v2)
  {
    double v13 = v3[1];
    char v28 = 1;
    KeyedEncodingContainer.encode(_:forKey:)(&v28, v5, v13);
    double v14 = v3[2];
    char v27 = 2;
    KeyedEncodingContainer.encode(_:forKey:)(&v27, v5, v14);
    double v15 = v3[3];
    char v26 = 3;
    KeyedEncodingContainer.encode(_:forKey:)(&v26, v5, v15);
    double v16 = v3[4];
    char v25 = 4;
    KeyedEncodingContainer.encode(_:forKey:)(&v25, v5, v16);
    double v17 = v3[5];
    char v24 = 5;
    KeyedEncodingContainer.encode(_:forKey:)(&v24, v5, v17);
    uint64_t v23 = *((void *)v3 + 6);
    char v22 = 6;
    uint64_t v18 = sub_100004AEC(&qword_10099D5E0);
    uint64_t v19 = sub_10012816C( &qword_1009A1D20,  (uint64_t)&protocol witness table for Int,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v23, &v22, v5, v18, v19);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100125B04(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  uint64_t v5 = a1[4];
  uint64_t v6 = a1[5];
  uint64_t v7 = a2[4];
  uint64_t v8 = a2[5];
  BOOL v9 = v5 == v7 && v6 == v8;
  if (v9 || (v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v7, v8, 0LL), uint64_t result = 0LL, (v10 & 1) != 0))
  {
    uint64_t v12 = v2 - 1;
    if (!v12) {
      return 1LL;
    }
    double v13 = a2 + 7;
    for (uint64_t i = a1 + 7; ; i += 2)
    {
      uint64_t v15 = *(i - 1);
      uint64_t v16 = *i;
      uint64_t v17 = *(v13 - 1);
      uint64_t v18 = *v13;
      BOOL v19 = v15 == v17 && v16 == v18;
      if (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(v15, v16, v17, v18, 0LL) & 1) == 0) {
        break;
      }
      v13 += 2;
      if (!--v12) {
        return 1LL;
      }
    }

    return 0LL;
  }

  return result;
}

uint64_t sub_100125BC8(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 == *(void *)(a2 + 16))
  {
    if (!v2 || a1 == a2) {
      return 1LL;
    }
    if (*(unsigned __int8 *)(a1 + 32) == *(unsigned __int8 *)(a2 + 32)) {
      __asm { BR              X10 }
    }
  }

  return 0LL;
}

uint64_t sub_1001265D0(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = 0LL;
    uint64_t v19 = a1;
    uint64_t v20 = a2;
    while (1)
    {
      uint64_t v4 = a1 + v3;
      uint64_t v5 = a2 + v3;
      uint64_t v6 = *(void *)(v4 + 40);
      uint64_t v7 = *(void *)(v4 + 48);
      uint64_t v8 = *(void *)(v4 + 56);
      uint64_t v9 = *(void *)(v4 + 64);
      uint64_t v10 = *(void *)(v4 + 80);
      int v11 = *(unsigned __int8 *)(v4 + 88);
      uint64_t v12 = *(void *)(v5 + 40);
      uint64_t v13 = *(void *)(v5 + 48);
      uint64_t v14 = *(void *)(v5 + 56);
      uint64_t v15 = *(void *)(v5 + 64);
      uint64_t v16 = *(void *)(v5 + 80);
      uint64_t v21 = *(void *)(v5 + 72);
      uint64_t v22 = *(void *)(v4 + 72);
      int v17 = *(unsigned __int8 *)(v5 + 88);
      if ((v6 != v12 || v7 != v13) && (_stringCompareWithSmolCheck(_:_:expecting:)(v6, v7, v12, v13, 0LL) & 1) == 0) {
        break;
      }
      if ((v8 != v14 || v9 != v15) && (_stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v14, v15, 0LL) & 1) == 0) {
        break;
      }
      if (v10)
      {
        if (!v16
          || (v22 != v21 || v10 != v16)
          && (_stringCompareWithSmolCheck(_:_:expecting:)(v22, v10, v21, v16, 0LL) & 1) == 0)
        {
          return 0LL;
        }
      }

      else if (v16)
      {
        return 0LL;
      }

      if (v11 == 2)
      {
        if (v17 != 2) {
          return 0LL;
        }
      }

      else
      {
        uint64_t result = 0LL;
        if (v17 == 2 || ((((v11 & 1) == 0) ^ v17) & 1) == 0) {
          return result;
        }
      }

      v3 += 64LL;
      --v2;
      a1 = v19;
      a2 = v20;
      if (!v2) {
        return 1LL;
      }
    }

    return 0LL;
  }

  return 1LL;
}

uint64_t sub_100126740(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for WildModeTrackingLocation(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (double *)((char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v5);
  uint64_t v10 = (double *)((char *)&v19 - v9);
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 != *(void *)(a2 + 16))
  {
LABEL_16:
    char v15 = 0;
    return v15 & 1;
  }

  if (v11 && a1 != a2)
  {
    unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
    uint64_t v13 = *(void *)(v8 + 72);
    uint64_t v14 = v11 - 1;
    while (1)
    {
      sub_10001DC4C(a1 + v12, (uint64_t)v10, type metadata accessor for WildModeTrackingLocation);
      sub_10001DC4C(a2 + v12, (uint64_t)v7, type metadata accessor for WildModeTrackingLocation);
      if (*v10 != *v7 || v10[1] != v7[1] || v10[2] != v7[2]) {
        break;
      }
      char v15 = static Date.== infix(_:_:)((char *)v10 + *(int *)(v4 + 28), (char *)v7 + *(int *)(v4 + 28));
      sub_100018C68((uint64_t)v7, type metadata accessor for WildModeTrackingLocation);
      sub_100018C68((uint64_t)v10, type metadata accessor for WildModeTrackingLocation);
      BOOL v17 = v14-- != 0;
      if ((v15 & 1) != 0)
      {
        v12 += v13;
        if (v17) {
          continue;
        }
      }

      return v15 & 1;
    }

    sub_100018C68((uint64_t)v7, type metadata accessor for WildModeTrackingLocation);
    sub_100018C68((uint64_t)v10, type metadata accessor for WildModeTrackingLocation);
    goto LABEL_16;
  }

  char v15 = 1;
  return v15 & 1;
}

uint64_t sub_1001268D4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = 0LL;
    uint64_t v29 = a1 + 32;
    uint64_t v4 = a2 + 32;
    while (1)
    {
      uint64_t v6 = (void *)(v29 + 32 * v3);
      uint64_t v7 = (void *)(v4 + 32 * v3);
      if (*v6 != *v7) {
        return 0LL;
      }
      uint64_t v8 = v6[1];
      uint64_t v9 = v6[2];
      uint64_t v10 = v6[3];
      uint64_t v11 = v7[1];
      uint64_t v12 = v7[2];
      uint64_t v13 = v7[3];
      BOOL v14 = v8 == v11 && v9 == v12;
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)(v8, v9, v11, v12, 0LL) & 1) == 0) {
        return 0LL;
      }
      uint64_t v15 = *(void *)(v10 + 16);
      if (v15 != *(void *)(v13 + 16)) {
        return 0LL;
      }
      if (v15) {
        BOOL v16 = v10 == v13;
      }
      else {
        BOOL v16 = 1;
      }
      if (!v16)
      {
        BOOL v17 = (uint64_t *)(v13 + 64);
        uint64_t v18 = (uint64_t *)(v10 + 64);
        while (*(v18 - 4) == *(v17 - 4))
        {
          uint64_t v19 = *(v18 - 3);
          uint64_t v20 = *(v18 - 2);
          uint64_t v21 = *(v18 - 1);
          uint64_t v22 = *v18;
          uint64_t v23 = *(v17 - 3);
          uint64_t v24 = *(v17 - 2);
          uint64_t v25 = *(v17 - 1);
          uint64_t v26 = *v17;
          BOOL v27 = v19 == v23 && v20 == v24;
          if (!v27 && (_stringCompareWithSmolCheck(_:_:expecting:)(v19, v20, v23, v24, 0LL) & 1) == 0) {
            break;
          }
          BOOL v28 = v21 == v25 && v22 == v26;
          if (!v28 && (_stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, v25, v26, 0LL) & 1) == 0) {
            break;
          }
          v17 += 5;
          v18 += 5;
          if (!--v15) {
            goto LABEL_5;
          }
        }

        return 0LL;
      }

uint64_t sub_100126A40(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (void *)(a1 + 32);
    uint64_t v4 = (uint64_t *)(a2 + 32);
    do
    {
      uint64_t v5 = *v4;
      uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(*v3);
      uint64_t v8 = v7;
      uint64_t v9 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      if (v6 == v9 && v8 == v10)
      {
        swift_bridgeObjectRelease_n(v8, 2LL);
      }

      else
      {
        uint64_t v12 = v10;
        char v13 = _stringCompareWithSmolCheck(_:_:expecting:)(v6, v8, v9, v10, 0LL);
        swift_bridgeObjectRelease(v8);
        swift_bridgeObjectRelease(v12);
        if ((v13 & 1) == 0) {
          return 0LL;
        }
      }

      ++v3;
      ++v4;
      --v2;
    }

    while (v2);
  }

  return 1LL;
}

BOOL sub_100126B14(void *a1, void *a2)
{
  uint64_t v2 = a1[2];
  if (v2 != a2[2]) {
    return 0LL;
  }
  if (!v2 || a1 == a2) {
    return 1LL;
  }
  if (a1[4] != a2[4]) {
    return 0LL;
  }
  uint64_t v3 = a1 + 5;
  uint64_t v4 = a2 + 5;
  uint64_t v5 = v2 - 1;
  do
  {
    BOOL result = v5 == 0;
    if (!v5) {
      break;
    }
    uint64_t v8 = *v3++;
    uint64_t v7 = v8;
    uint64_t v9 = *v4++;
    --v5;
  }

  while (v7 == v9);
  return result;
}

uint64_t sub_100126B80(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (v2 != *(void *)(a2 + 16)) {
    return 0LL;
  }
  if (v2 && a1 != a2)
  {
    uint64_t v3 = (uint64_t *)(a2 + 64);
    for (uint64_t i = (uint64_t *)(a1 + 64); *(i - 4) == *(v3 - 4); i += 5)
    {
      uint64_t v5 = *(i - 3);
      uint64_t v6 = *(i - 2);
      uint64_t v7 = *(i - 1);
      uint64_t v8 = *i;
      uint64_t v9 = *(v3 - 3);
      uint64_t v10 = *(v3 - 2);
      uint64_t v11 = *(v3 - 1);
      uint64_t v12 = *v3;
      BOOL v13 = v5 == v9 && v6 == v10;
      if (!v13 && (_stringCompareWithSmolCheck(_:_:expecting:)(v5, v6, v9, v10, 0LL) & 1) == 0) {
        break;
      }
      BOOL v14 = v7 == v11 && v8 == v12;
      if (!v14 && (_stringCompareWithSmolCheck(_:_:expecting:)(v7, v8, v11, v12, 0LL) & 1) == 0) {
        break;
      }
      v3 += 5;
      if (!--v2) {
        return 1LL;
      }
    }

    return 0LL;
  }

  return 1LL;
}

uint64_t sub_100126C54(uint64_t a1, uint64_t a2)
{
  return sub_100126C7C( a1,  a2,  type metadata accessor for RawSearchResult,  (uint64_t (*)(char *, char *))sub_1005BA700);
}

uint64_t sub_100126C68(uint64_t a1, uint64_t a2)
{
  return sub_100126C7C( a1,  a2,  type metadata accessor for DefaultConfigurationLayer,  (uint64_t (*)(char *, char *))sub_10041E470);
}

uint64_t sub_100126C7C( uint64_t a1, uint64_t a2, uint64_t (*a3)(void), uint64_t (*a4)(char *, char *))
{
  uint64_t v8 = a3(0LL);
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v23 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  BOOL v14 = (char *)&v23 - v13;
  uint64_t v15 = *(void *)(a1 + 16);
  if (v15 == *(void *)(a2 + 16))
  {
    if (!v15 || a1 == a2)
    {
      char v19 = 1;
    }

    else
    {
      unint64_t v16 = (*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80);
      uint64_t v17 = *(void *)(v12 + 72);
      uint64_t v18 = v15 - 1;
      do
      {
        sub_10001DC4C(a1 + v16, (uint64_t)v14, a3);
        sub_10001DC4C(a2 + v16, (uint64_t)v11, a3);
        char v19 = a4(v14, v11);
        sub_100018C68((uint64_t)v11, a3);
        sub_100018C68((uint64_t)v14, a3);
        BOOL v21 = v18-- != 0;
        if ((v19 & 1) == 0) {
          break;
        }
        v16 += v17;
      }

      while (v21);
    }
  }

  else
  {
    char v19 = 0;
  }

  return v19 & 1;
}

uint64_t sub_100126DB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v23 - v9;
  uint64_t v11 = *(void *)(a1 + 16);
  if (v11 == *(void *)(a2 + 16))
  {
    if (!v11 || a1 == a2)
    {
      char v18 = 1;
    }

    else
    {
      unint64_t v12 = (*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
      uint64_t v23 = *(void *)(v8 + 72);
      uint64_t v24 = v8;
      uint64_t v13 = *(void (**)(char *, unint64_t, uint64_t))(v8 + 16);
      uint64_t v14 = v11 - 1;
      do
      {
        uint64_t v15 = a1;
        v13(v10, a1 + v12, v4);
        uint64_t v16 = a2;
        v13(v7, a2 + v12, v4);
        unint64_t v17 = sub_100128124();
        char v18 = dispatch thunk of static Equatable.== infix(_:_:)(v10, v7, v4, v17);
        char v19 = *(void (**)(char *, uint64_t))(v24 + 8);
        v19(v7, v4);
        v19(v10, v4);
        BOOL v21 = v14-- != 0;
        if ((v18 & 1) == 0) {
          break;
        }
        v12 += v23;
        a2 = v16;
        a1 = v15;
      }

      while (v21);
    }
  }

  else
  {
    char v18 = 0;
  }

  return v18 & 1;
}

id MacBeaconConfig.xpcObject()()
{
  uint64_t v1 = *((void *)v0 + 6);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    sub_100127918((uint64_t)v0);
    specialized ContiguousArray.reserveCapacity(_:)(v2);
    uint64_t v3 = (uint64_t *)(v1 + 32);
    do
    {
      uint64_t v4 = *v3++;
      id v5 = [objc_allocWithZone(NSNumber) initWithInteger:v4];
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v5);
      uint64_t v6 = _swiftEmptyArrayStorage[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v6);
      uint64_t v7 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v6, v5);
      specialized ContiguousArray._endMutation()(v7);
      --v2;
    }

    while (v2);
    sub_100127940((uint64_t)v0);
  }

  double v8 = *v0;
  double v9 = v0[1];
  double v10 = v0[2];
  double v11 = v0[3];
  double v12 = v0[4];
  double v13 = v0[5];
  id v14 = objc_allocWithZone(&OBJC_CLASS___SPMacBeaconConfig);
  sub_100127968();
  Class isa = Array._bridgeToObjectiveC()().super.isa;
  swift_bridgeObjectRelease();
  id v16 = [v14 initWithInitialNoBeaconDuration:isa fastRollAdvertisementDuration:v8 fastRollAdvertisementInterval:v9 slowRollAdvertisem entDuration:v10 slowRollNoAdvertisementDuration:v11 noAdvertisementDurationDecayFactor:v12 postInitialDayAdvertisementTimes:v13];

  return v16;
}

uint64_t sub_100127088(void *a1)
{
  return MacBeaconConfig.encode(to:)(a1);
}

BOOL sub_10012709C(uint64_t a1, uint64_t a2)
{
  return (vminv_u16((uint16x4_t)vcltz_s16( vshl_n_s16( vmovn_s32( vuzp1q_s32( (int32x4_t)vceqq_f64(*(float64x2_t *)a1, *(float64x2_t *)a2),  (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 16), *(float64x2_t *)(a2 + 16)))),  0xFuLL))) & 1) != 0 && *(double *)(a1 + 32) == *(double *)(a2 + 32)
}

uint64_t _s12searchpartyd19AllMacBeaconConfigsV23__derived_struct_equalsySbAC_ACtFZ_0(uint64_t a1, uint64_t a2)
{
  uint64_t result = 0LL;
  if ((vminv_u16((uint16x4_t)vcltz_s16( vshl_n_s16( vmovn_s32( vuzp1q_s32( (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 8), *(float64x2_t *)(a2 + 8)),  (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 24), *(float64x2_t *)(a2 + 24)))),  0xFuLL))) & 1) != 0 && *(double *)(a1 + 40) == *(double *)(a2 + 40))
  {
    if (sub_100126B14(*(void **)(a1 + 48), *(void **)(a2 + 48)))
    {
      id v5 = *(void **)(a1 + 104);
      uint64_t v6 = *(void **)(a2 + 104);
      if (v5)
      {
        if (v6
          && (vminv_u16((uint16x4_t)vcltz_s16( vshl_n_s16( vmovn_s32( vuzp1q_s32( (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 56), *(float64x2_t *)(a2 + 56)),  (int32x4_t)vceqq_f64(*(float64x2_t *)(a1 + 72), *(float64x2_t *)(a2 + 72)))),  0xFuLL))) & 1) != 0 && *(double *)(a1 + 88) == *(double *)(a2 + 88)
          && *(double *)(a1 + 96) == *(double *)(a2 + 96)
          && sub_100126B14(v5, v6))
        {
          return 1LL;
        }
      }

      else if (!v6)
      {
        return 1LL;
      }
    }

    return 0LL;
  }

  return result;
}

unint64_t sub_100127208()
{
  unint64_t result = qword_1009A1D00;
  if (!qword_1009A1D00)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ED458, &type metadata for AllMacBeaconConfigs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1D00);
  }

  return result;
}

unint64_t sub_10012724C()
{
  unint64_t result = qword_1009A1D08;
  if (!qword_1009A1D08)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MacBeaconConfig,  &type metadata for MacBeaconConfig);
    atomic_store(result, (unint64_t *)&qword_1009A1D08);
  }

  return result;
}

uint64_t sub_100127290(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A1CF0);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1001272D8(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x61426C616D726F6ELL && a2 == 0xED00007972657474LL)
  {
    unint64_t v5 = 0xED00007972657474LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x61426C616D726F6ELL, 0xED00007972657474LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x6574746142776F6CLL && a2 == 0xEA00000000007972LL)
  {
    swift_bridgeObjectRelease(0xEA00000000007972LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6574746142776F6CLL, 0xEA00000000007972LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t sub_1001273F8@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009A1D68);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  double v8 = (char *)&v22 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_100127208();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AllMacBeaconConfigs.CodingKeys,  &type metadata for AllMacBeaconConfigs.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  char v29 = 0;
  unint64_t v12 = sub_1001281CC();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v24,  &type metadata for MacBeaconConfig,  &v29,  v5,  &type metadata for MacBeaconConfig,  v12);
  __int128 v13 = v24;
  __int128 v14 = v25;
  uint64_t v15 = v26;
  uint64_t v16 = v27;
  uint64_t v17 = v28;
  char v29 = 1;
  swift_bridgeObjectRetain(v28);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for MacBeaconConfig,  &v29,  v5,  &type metadata for MacBeaconConfig,  v12);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  __int128 v22 = v25;
  __int128 v23 = v24;
  uint64_t v18 = v26;
  uint64_t v19 = v27;
  uint64_t v20 = v28;
  swift_bridgeObjectRetain(v28);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  swift_bridgeObjectRelease();
  uint64_t result = swift_bridgeObjectRelease();
  *(_OWORD *)a2 = v13;
  *(_OWORD *)(a2 + swift_weakDestroy(v0 + 16) = v14;
  *(void *)(a2 + 32) = v15;
  *(void *)(a2 + 40) = v16;
  *(void *)(a2 + 48) = v17;
  *(_OWORD *)(a2 + 56) = v23;
  *(_OWORD *)(a2 + 72) = v22;
  *(void *)(a2 + 88) = v18;
  *(void *)(a2 + 96) = v19;
  *(void *)(a2 + 104) = v20;
  return result;
}

unint64_t sub_100127610(Swift::String string)
{
  object = string._object;
  v2._countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_100933468, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 7) {
    return 7LL;
  }
  else {
    return v3;
  }
}

uint64_t sub_100127658@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009A1D58);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  double v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1001278D4();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for MacBeaconConfig.CodingKeys,  &type metadata for MacBeaconConfig.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  char v36 = 0;
  KeyedDecodingContainer.decode(_:forKey:)(&v36, v5);
  uint64_t v13 = v12;
  char v35 = 1;
  KeyedDecodingContainer.decode(_:forKey:)(&v35, v5);
  uint64_t v15 = v14;
  char v34 = 2;
  KeyedDecodingContainer.decode(_:forKey:)(&v34, v5);
  uint64_t v17 = v16;
  char v33 = 3;
  KeyedDecodingContainer.decode(_:forKey:)(&v33, v5);
  uint64_t v19 = v18;
  char v32 = 4;
  KeyedDecodingContainer.decode(_:forKey:)(&v32, v5);
  uint64_t v21 = v20;
  char v31 = 5;
  KeyedDecodingContainer.decode(_:forKey:)(&v31, v5);
  uint64_t v23 = v22;
  uint64_t v24 = sub_100004AEC(&qword_10099D5E0);
  char v30 = 6;
  uint64_t v25 = sub_10012816C( &qword_1009A1D60,  (uint64_t)&protocol witness table for Int,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decode<A>(_:forKey:)(&v29, v24, &v30, v5, v24, v25);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t v26 = v29;
  uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  *a2 = v13;
  a2[1] = v15;
  a2[2] = v17;
  a2[3] = v19;
  a2[4] = v21;
  a2[5] = v23;
  a2[6] = v26;
  return result;
}

unint64_t sub_1001278D4()
{
  unint64_t result = qword_1009A1D18;
  if (!qword_1009A1D18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ED408, &type metadata for MacBeaconConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1D18);
  }

  return result;
}

uint64_t sub_100127918(uint64_t a1)
{
  return a1;
}

uint64_t sub_100127940(uint64_t a1)
{
  return a1;
}

unint64_t sub_100127968()
{
  unint64_t result = qword_1009A9C80;
  if (!qword_1009A9C80)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNumber);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1009A9C80);
  }

  return result;
}

uint64_t destroy for AllMacBeaconConfigs(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 104));
}

uint64_t initializeWithCopy for AllMacBeaconConfigs(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  uint64_t v5 = *(void *)(a2 + 104);
  *(void *)(a1 + 104) = v5;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

void *assignWithCopy for AllMacBeaconConfigs(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  uint64_t v4 = a2[6];
  uint64_t v5 = a1[6];
  a1[6] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[7] = a2[7];
  a1[8] = a2[8];
  a1[9] = a2[9];
  a1[10] = a2[10];
  a1[11] = a2[11];
  a1[12] = a2[12];
  uint64_t v6 = a2[13];
  uint64_t v7 = a1[13];
  a1[13] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  return a1;
}

__n128 initializeWithTake for AllMacBeaconConfigs(uint64_t a1, __int128 *a2)
{
  __int128 v2 = *a2;
  __int128 v3 = a2[2];
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = a2[1];
  *(_OWORD *)(a1 + 32) = v3;
  *(_OWORD *)a1 = v2;
  __n128 result = (__n128)a2[3];
  __int128 v5 = a2[4];
  __int128 v6 = a2[6];
  *(_OWORD *)(a1 + 80) = a2[5];
  *(_OWORD *)(a1 + 96) = v6;
  *(__n128 *)(a1 + 48) = result;
  *(_OWORD *)(a1 + 64) = v5;
  return result;
}

uint64_t assignWithTake for AllMacBeaconConfigs(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v5 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + 56) = *(_OWORD *)(a2 + 56);
  *(_OWORD *)(a1 + 72) = *(_OWORD *)(a2 + 72);
  *(_OWORD *)(a1 + 88) = *(_OWORD *)(a2 + 88);
  uint64_t v6 = *(void *)(a1 + 104);
  *(void *)(a1 + 104) = *(void *)(a2 + 104);
  swift_bridgeObjectRelease(v6);
  return a1;
}

uint64_t getEnumTagSinglePayload for AllMacBeaconConfigs(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 112)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for AllMacBeaconConfigs(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 104) = 0LL;
    *(_OWORD *)(result + 88) = 0u;
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 112) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 112) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for AllMacBeaconConfigs()
{
  return &type metadata for AllMacBeaconConfigs;
}

uint64_t destroy for MacBeaconConfig(uint64_t a1)
{
  return swift_bridgeObjectRelease(*(void *)(a1 + 48));
}

uint64_t initializeWithCopy for MacBeaconConfig(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v4;
  swift_bridgeObjectRetain(v4);
  return a1;
}

void *assignWithCopy for MacBeaconConfig(void *a1, void *a2)
{
  *a1 = *a2;
  a1[1] = a2[1];
  a1[2] = a2[2];
  a1[3] = a2[3];
  a1[4] = a2[4];
  a1[5] = a2[5];
  uint64_t v3 = a2[6];
  uint64_t v4 = a1[6];
  a1[6] = v3;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRelease(v4);
  return a1;
}

__n128 initializeWithTake for MacBeaconConfig(uint64_t a1, uint64_t a2)
{
  __n128 result = *(__n128 *)a2;
  __int128 v3 = *(_OWORD *)(a2 + 16);
  __int128 v4 = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  *(_OWORD *)(a1 + 32) = v4;
  *(__n128 *)a1 = result;
  return result;
}

uint64_t assignWithTake for MacBeaconConfig(uint64_t a1, uint64_t a2)
{
  __int128 v3 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  uint64_t v4 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease(v4);
  return a1;
}

uint64_t getEnumTagSinglePayload for MacBeaconConfig(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 56)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 48);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for MacBeaconConfig(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 56) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 48) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 56) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for MacBeaconConfig()
{
  return &type metadata for MacBeaconConfig;
}

uint64_t storeEnumTagSinglePayload for MacBeaconConfig.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_100127E28 + 4 * byte_1007ED123[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_100127E5C + 4 * byte_1007ED11E[v4]))();
}

uint64_t sub_100127E5C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100127E64(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100127E6CLL);
  }
  return result;
}

uint64_t sub_100127E78(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100127E80LL);
  }
  *(_BYTE *)__n128 result = a2 + 6;
  return result;
}

uint64_t sub_100127E84(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100127E8C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for MacBeaconConfig.CodingKeys()
{
  return &type metadata for MacBeaconConfig.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for AllMacBeaconConfigs.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100127EF4 + 4 * byte_1007ED12D[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100127F28 + 4 * byte_1007ED128[v4]))();
}

uint64_t sub_100127F28(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_100127F30(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100127F38LL);
  }
  return result;
}

uint64_t sub_100127F44(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100127F4CLL);
  }
  *(_BYTE *)__n128 result = a2 + 1;
  return result;
}

uint64_t sub_100127F50(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100127F58(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AllMacBeaconConfigs.CodingKeys()
{
  return &type metadata for AllMacBeaconConfigs.CodingKeys;
}

unint64_t sub_100127F78()
{
  unint64_t result = qword_1009A1D28;
  if (!qword_1009A1D28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ED2F0, &type metadata for AllMacBeaconConfigs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1D28);
  }

  return result;
}

unint64_t sub_100127FC0()
{
  unint64_t result = qword_1009A1D30;
  if (!qword_1009A1D30)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ED3E0, &type metadata for MacBeaconConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1D30);
  }

  return result;
}

unint64_t sub_100128008()
{
  unint64_t result = qword_1009A1D38;
  if (!qword_1009A1D38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ED318, &type metadata for MacBeaconConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1D38);
  }

  return result;
}

unint64_t sub_100128050()
{
  unint64_t result = qword_1009A1D40;
  if (!qword_1009A1D40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ED340, &type metadata for MacBeaconConfig.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1D40);
  }

  return result;
}

unint64_t sub_100128098()
{
  unint64_t result = qword_1009A1D48;
  if (!qword_1009A1D48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ED260, &type metadata for AllMacBeaconConfigs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1D48);
  }

  return result;
}

unint64_t sub_1001280E0()
{
  unint64_t result = qword_1009A1D50;
  if (!qword_1009A1D50)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ED288, &type metadata for AllMacBeaconConfigs.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1D50);
  }

  return result;
}

unint64_t sub_100128124()
{
  unint64_t result = qword_1009A0A40;
  if (!qword_1009A0A40)
  {
    uint64_t v1 = type metadata accessor for UUID(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_1009A0A40);
  }

  return result;
}

uint64_t sub_10012816C(unint64_t *a1, uint64_t a2, uint64_t a3)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v6 = sub_100004B78(&qword_10099D5E0);
    uint64_t result = swift_getWitnessTable(a3, v6);
    atomic_store(result, a1);
  }

  return result;
}

unint64_t sub_1001281CC()
{
  unint64_t result = qword_1009A1D70;
  if (!qword_1009A1D70)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for MacBeaconConfig,  &type metadata for MacBeaconConfig);
    atomic_store(result, (unint64_t *)&qword_1009A1D70);
  }

  return result;
}

uint64_t sub_100128210@<X0>(uint64_t a1@<X8>)
{
  uint64_t v34 = a1;
  uint64_t v1 = sub_100004AEC(&qword_1009A1D88);
  __chkstk_darwin(v1);
  int v3 = (char *)&v31 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v33 = type metadata accessor for URLComponents(0LL);
  uint64_t v4 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  char v32 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for FMNAccountType(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v31 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v31 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for FMNAuthenticationProvider(0LL);
  (*(void (**)(char *, void, uint64_t))(v7 + 104))(v9, enum case for FMNAccountType.secureLocations(_:), v6);
  static FMNAuthenticationProvider.configurationURL(accountType:)(v9);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) == 1)
  {
    uint64_t v17 = (uint64_t *)&unk_1009A34D0;
    uint64_t v18 = (uint64_t)v12;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    URLComponents.init(url:resolvingAgainstBaseURL:)(v16, 0LL);
    uint64_t v19 = v33;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v4 + 48))(v3, 1LL, v33) != 1)
    {
      uint64_t v27 = *(void (**)(char *, char *, uint64_t))(v4 + 32);
      uint64_t v28 = v32;
      v27(v32, v3, v19);
      uint64_t v29 = (void (*)(_BYTE *, void))URLComponents.path.modify(v35);
      v30._countAndFlagsBits = 0x74696D627573LL;
      v30._object = (void *)0xE600000000000000LL;
      String.append(_:)(v30);
      v29(v35, 0LL);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v27)(v34, v28, v19);
    }

    (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    uint64_t v17 = &qword_1009A1D88;
    uint64_t v18 = (uint64_t)v3;
  }

  sub_100015794(v18, v17);
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v20 = type metadata accessor for Logger(0LL);
  uint64_t v21 = sub_10000A720(v20, (uint64_t)qword_100A2AE08);
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.default.getter(v22);
  if (os_log_type_enabled(v22, v23))
  {
    uint64_t v24 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v24 = 0;
    _os_log_impl((void *)&_mh_execute_header, v22, v23, "No url found in account bag.", v24, 2u);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  URLComponents.init()(v25);
  URLComponents.scheme.setter(0x7370747468LL, 0xE500000000000000LL);
  URLComponents.path.setter(0xD000000000000015LL, 0x8000000100854BC0LL);
  return URLComponents.host.setter(0xD000000000000012LL, 0x8000000100854BE0LL);
}

uint64_t sub_1001285C4@<X0>(uint64_t a1@<X8>)
{
  uint64_t v54 = a1;
  uint64_t v1 = sub_100004AEC(&qword_1009A1D88);
  __chkstk_darwin(v1);
  uint64_t v52 = (char *)&v50 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for URLComponents(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  os_log_type_t v53 = (char *)&v50 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v51 = (char *)&v50 - v7;
  uint64_t v8 = type metadata accessor for FMNAccountType(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for URL(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v50 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for FMNAuthenticationProvider(0LL);
  (*(void (**)(char *, void, uint64_t))(v9 + 104))( v11,  enum case for FMNAccountType.ownedDeviceLocations(_:),  v8);
  static FMNAuthenticationProvider.configurationURL(accountType:)(v11);
  (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15) == 1)
  {
    sub_100015794((uint64_t)v14, (uint64_t *)&unk_1009A34D0);
    uint64_t v19 = v3;
    uint64_t v20 = v4;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v18, v14, v15);
    uint64_t v21 = (uint64_t)v52;
    URLComponents.init(url:resolvingAgainstBaseURL:)(v18, 0LL);
    uint64_t v19 = v3;
    uint64_t v20 = v4;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v21, 1LL, v3) != 1)
    {
      char v43 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 32);
      unint64_t v44 = v51;
      v43(v51, v21, v3);
      uint64_t v45 = (void (*)(uint64_t *, void))URLComponents.path.modify(&v55);
      v46._countAndFlagsBits = 0x696D6275732F3276LL;
      v46._object = (void *)0xE900000000000074LL;
      String.append(_:)(v46);
      v45(&v55, 0LL);
      (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
      return ((uint64_t (*)(uint64_t, char *, uint64_t))v43)(v54, v44, v3);
    }

    (*(void (**)(char *, uint64_t))(v16 + 8))(v18, v15);
    sub_100015794(v21, &qword_1009A1D88);
  }

  uint64_t v22 = v53;
  if (qword_10099B5E0 != -1) {
    swift_once(&qword_10099B5E0, sub_1005C6624);
  }
  uint64_t v23 = type metadata accessor for Logger(0LL);
  uint64_t v24 = sub_10000A720(v23, (uint64_t)qword_100A2AE08);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.default.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v27 = 0;
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "No url found in account bag.", v27, 2u);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  URLComponents.init()(v28);
  URLComponents.scheme.setter(0x7370747468LL, 0xE500000000000000LL);
  id v29 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  id v30 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v31 = [v30 isInternalBuild];

  if (v31
    && (NSString v32 = String._bridgeToObjectiveC()(),
        id v33 = [v29 stringForKey:v32],
        v32,
        v33))
  {
    uint64_t v34 = static String._unconditionallyBridgeFromObjectiveC(_:)(v33);
    char v36 = v35;

    swift_bridgeObjectRetain_n(v36, 2LL);
    unint64_t v38 = (os_log_s *)Logger.logObject.getter(v37);
    os_log_type_t v39 = static os_log_type_t.default.getter(v38);
    if (os_log_type_enabled(v38, v39))
    {
      uint64_t v40 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v41 = swift_slowAlloc(32LL, -1LL);
      uint64_t v55 = v41;
      *(_DWORD *)uint64_t v40 = 136315138;
      swift_bridgeObjectRetain(v36);
      uint64_t v57 = sub_1003F11D4(v34, (unint64_t)v36, &v55);
      uint64_t v22 = v53;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v57, &v58, v40 + 4, v40 + 12);
      swift_bridgeObjectRelease_n(v36, 3LL);
      _os_log_impl((void *)&_mh_execute_header, v38, v39, "Override url found in user defaults %s. ", v40, 0xCu);
      swift_arrayDestroy(v41, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v36, 2LL);
    }

    uint64_t v42 = v54;
    uint64_t v55 = 47LL;
    unint64_t v56 = 0xE100000000000000LL;
    v48._countAndFlagsBits = v34;
    v48._object = v36;
    String.append(_:)(v48);
    swift_bridgeObjectRelease();
    v49._countAndFlagsBits = 0x6D6275732F32762FLL;
    v49._object = (void *)0xEA00000000007469LL;
    String.append(_:)(v49);
    URLComponents.path.setter(v55, v56);
  }

  else
  {

    URLComponents.path.setter(0xD000000000000018LL, 0x8000000100854C20LL);
    uint64_t v42 = v54;
  }

  URLComponents.host.setter(0xD000000000000012LL, 0x8000000100854BE0LL);
  return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v20 + 32))(v42, v22, v19);
}

uint64_t sub_100128C20@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for FMNAccountType(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(a1, v1, v3);
}

uint64_t sub_100128C58@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 20);
  uint64_t v5 = type metadata accessor for URLComponents(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_100128C98(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009A1EB0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_10012AA8C();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for SecureLocationsSubmitRequestBody.CodingKeys,  &type metadata for SecureLocationsSubmitRequestBody.CodingKeys,  v11,  v9,  v10);
  __int128 v12 = *(_OWORD *)(v3 + 48);
  v20[2] = *(_OWORD *)(v3 + 32);
  v20[3] = v12;
  v20[4] = *(_OWORD *)(v3 + 64);
  __int128 v13 = *(_OWORD *)(v3 + 16);
  v20[0] = *(_OWORD *)v3;
  v20[1] = v13;
  char v19 = 0;
  unint64_t v14 = sub_10012AAD0();
  KeyedEncodingContainer.encode<A>(_:forKey:)( v20,  &v19,  v5,  &type metadata for SecureLocationsPublishClientContext,  v14);
  if (!v2)
  {
    *(void *)&v20[0] = *(void *)(v3 + 80);
    char v19 = 1;
    uint64_t v15 = sub_100004AEC(&qword_1009A1EC8);
    unint64_t v16 = sub_10012AB14();
    KeyedEncodingContainer.encode<A>(_:forKey:)(v20, &v19, v5, v15, v16);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_100128DF8()
{
  uint64_t v1 = *(void *)(v0 + 8);
  sub_10001736C(v1, *(void *)(v0 + 16));
  return v1;
}

uint64_t sub_100128E28()
{
  return swift_bridgeObjectRetain(*v0);
}

uint64_t sub_100128E30(uint64_t a1)
{
  uint64_t result = swift_bridgeObjectRelease(*v1);
  *uint64_t v1 = a1;
  return result;
}

void (__swiftcall *sub_100128E58())()
{
  return DeviceInformationProviderFactory.init();
}

uint64_t sub_100128E74()
{
  if (*v0) {
    return 0x74696D627573LL;
  }
  else {
    return 0x6F43746E65696C63LL;
  }
}

uint64_t sub_100128EB8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_10012AF18(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_100128EDC(uint64_t a1)
{
  unint64_t v2 = sub_10012AA8C();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100128F04(uint64_t a1)
{
  unint64_t v2 = sub_10012AA8C();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_100128F2C(void *a1)
{
  return sub_100128C98(a1);
}

uint64_t sub_100128F40()
{
  return 0x65566769666E6F63LL;
}

uint64_t sub_100128F64@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  if (a1 == 0x65566769666E6F63LL && a2 == 0xED00006E6F697372LL)
  {
    uint64_t result = swift_bridgeObjectRelease(0xED00006E6F697372LL);
    char v8 = 0;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x65566769666E6F63LL, 0xED00006E6F697372LL, a1, a2, 0LL);
    uint64_t result = swift_bridgeObjectRelease(a2);
    char v8 = v6 ^ 1;
  }

  *a3 = v8 & 1;
  return result;
}

uint64_t sub_10012901C(uint64_t a1)
{
  unint64_t v2 = sub_10012ABBC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_100129044(uint64_t a1)
{
  unint64_t v2 = sub_10012ABBC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_10012906C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = sub_100004AEC(&qword_1009A1EE0);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  char v8 = (char *)&v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_10012ABBC();
  uint64_t v12 = dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for SecureLocationsSubmitResponseBody.CodingKeys,  &type metadata for SecureLocationsSubmitResponseBody.CodingKeys,  v11,  v9,  v10);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v13 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v12, v5);
  char v15 = v14;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  *(void *)a2 = v13;
  *(_BYTE *)(a2 + 8) = v15 & 1;
  return result;
}

uint64_t sub_100129198(uint64_t a1, uint64_t a2, uint64_t a3, char a4, void *a5)
{
  uint64_t v8 = sub_100658360();
  if (!v9) {
    goto LABEL_24;
  }
  uint64_t v12 = v8;
  uint64_t v13 = v9;
  uint64_t v14 = v10;
  uint64_t v15 = v11;
  unint64_t v16 = (void *)*a5;
  unint64_t v18 = sub_10030CF14(v8, v9);
  uint64_t v19 = v16[2];
  BOOL v20 = (v17 & 1) == 0;
  uint64_t v21 = v19 + v20;
  if (__OFADD__(v19, v20))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  char v22 = v17;
  if (v16[3] >= v21)
  {
    if ((a4 & 1) != 0)
    {
      uint64_t v25 = (void *)*a5;
      if ((v17 & 1) != 0) {
        goto LABEL_9;
      }
    }

    else
    {
      sub_100062930();
      uint64_t v25 = (void *)*a5;
      if ((v22 & 1) != 0) {
        goto LABEL_9;
      }
    }

uint64_t sub_1001294A0(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  *(void *)(v3 + 160) = a1;
  *(void *)(v3 + 168) = a2;
  uint64_t v4 = *a2;
  *(void *)(v3 + 176) = a3;
  *(void *)(v3 + 184) = v4;
  *(_OWORD *)(v3 + 192) = *(_OWORD *)(a2 + 1);
  *(void *)(v3 + 208) = a2[3];
  *(_OWORD *)(v3 + 2swift_weakDestroy(v0 + 16) = *((_OWORD *)a2 + 2);
  *(_BYTE *)(v3 + 408) = *((_BYTE *)a2 + 48);
  *(void *)(v3 + 232) = a2[7];
  *(_OWORD *)(v3 + 240) = *((_OWORD *)a2 + 4);
  uint64_t v5 = type metadata accessor for HashAlgorithm(0LL);
  *(void *)(v3 + 256) = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  *(void *)(v3 + 264) = v6;
  *(void *)(v3 + 272) = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Date(0LL);
  *(void *)(v3 + 280) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v3 + 288) = v8;
  *(void *)(v3 + 296) = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100129560, 0LL, 0LL);
}

id sub_100129560()
{
  if (*(void *)(*(void *)(v0 + 160) + 16LL))
  {
    uint64_t v1 = (unint64_t *)(v0 + 104);
    unint64_t v2 = sub_100412D14((uint64_t)_swiftEmptyArrayStorage);
    *(void *)(v0 + 104) = v2;
    id result = [(id)objc_opt_self(AKDevice) currentDevice];
    if (result)
    {
      uint64_t v4 = result;
      id v5 = [result serverFriendlyDescription];

      if (v5)
      {
        uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
        uint64_t v8 = v7;

        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v2);
        *uint64_t v1 = 0x8000000000000000LL;
        sub_10005C260(v6, v8, 0xD000000000000011LL, 0x8000000100854B60LL, isUniquelyReferenced_nonNull_native);
        swift_bridgeObjectRelease();
      }

      else
      {
        sub_100047E14(0xD000000000000011LL, 0x8000000100854B60LL);
        swift_bridgeObjectRelease();
        unint64_t v2 = *v1;
      }

      uint64_t v11 = *(void *)(v0 + 288);
      uint64_t v12 = *(void *)(v0 + 296);
      uint64_t v13 = *(void *)(v0 + 280);
      uint64_t v14 = *(void *)(v0 + 224);
      uint64_t v36 = *(void *)(v0 + 232);
      char v35 = *(_BYTE *)(v0 + 408);
      uint64_t v15 = *(void *)(v0 + 216);
      __int128 v32 = *(_OWORD *)(v0 + 184);
      __int128 v33 = *(_OWORD *)(v0 + 200);
      uint64_t v16 = *(void *)(v0 + 160);
      __int128 v34 = *(_OWORD *)(v0 + 240);
      char v17 = swift_isUniquelyReferenced_nonNull_native(v2);
      sub_10005C260(49LL, 0xE100000000000000LL, 0x562D747065636341LL, 0xEE006E6F69737265LL, v17);
      swift_bridgeObjectRelease();
      char v18 = swift_isUniquelyReferenced_nonNull_native(v2);
      sub_10005C260(0xD000000000000010LL, 0x8000000100854B80LL, 0x2D746E65746E6F43LL, 0xEC00000065707954LL, v18);
      unint64_t v19 = v2;
      uint64_t v20 = swift_bridgeObjectRelease();
      uint64_t v21 = Date.init()(v20);
      uint64_t v22 = Date.epoch.getter(v21);
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v12, v13);
      *(void *)(v0 + 144) = v22;
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
      uint64_t v25 = v24;
      char v26 = swift_isUniquelyReferenced_nonNull_native(v19);
      *(void *)(v0 + 104) = 0x8000000000000000LL;
      sub_10005C260(v23, v25, 0xD000000000000015LL, 0x8000000100854BA0LL, v26);
      *(void *)(v0 + 104) = v19;
      swift_bridgeObjectRelease();
      uint64_t v27 = type metadata accessor for JSONEncoder(0LL);
      swift_allocObject(v27, *(unsigned int *)(v27 + 48), *(unsigned __int16 *)(v27 + 52));
      *(void *)(v0 + 304) = JSONEncoder.init()();
      *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = v32;
      *(_OWORD *)(v0 + 32) = v33;
      *(void *)(v0 + 48) = v15;
      *(void *)(v0 + 56) = v14;
      *(_BYTE *)(v0 + 64) = v35;
      *(void *)(v0 + 72) = v36;
      *(_OWORD *)(v0 + 80) = v34;
      *(void *)(v0 + 96) = v16;
      unint64_t v28 = sub_100129FB0();
      *(void *)(v0 + 312) = dispatch thunk of JSONEncoder.encode<A>(_:)( v0 + 16,  &type metadata for SecureLocationsSubmitRequestBody,  v28);
      *(void *)(v0 + 320) = v29;
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v37 = (uint64_t (__cdecl *)())((char *)&dword_1009AD0B0 + dword_1009AD0B0);
      uint64_t v31 = (void *)swift_task_alloc(unk_1009AD0B4);
      *(void *)(v0 + 328) = v31;
      void *v31 = v0;
      v31[1] = sub_100129A80;
      return (id)v37();
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    uint64_t v10 = *(void **)(v0 + 168);
    swift_release(*(void *)(v0 + 176));
    swift_bridgeObjectRelease();
    sub_100129FF4(v10);
    uint64_t v30 = *(void *)(v0 + 272);
    swift_task_dealloc(*(void *)(v0 + 296));
    swift_task_dealloc(v30);
    return (id)(*(uint64_t (**)(void, void, void))(v0 + 8))(0LL, 0LL, 0LL);
  }

  return result;
}

uint64_t sub_100129A80(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 328);
  *(void *)(v3 + 336) = a1;
  *(void *)(v3 + 344) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_100129ADC, 0LL, 0LL);
}

uint64_t sub_100129ADC()
{
  uint64_t v2 = v0[42];
  unint64_t v1 = v0[43];
  uint64_t v4 = v0[39];
  unint64_t v3 = v0[40];
  uint64_t v6 = v0[33];
  uint64_t v5 = v0[34];
  uint64_t v7 = v0[32];
  v0[16] = v2;
  v0[17] = v1;
  sub_10001736C(v2, v1);
  sub_10001736C(v4, v3);
  sub_1004A8638(v4, v3);
  sub_100016F9C(v4, v3);
  sub_100016F9C(v2, v1);
  uint64_t v8 = v0[16];
  uint64_t v9 = v0[17];
  v0[44] = v8;
  v0[45] = v9;
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  uint64_t v10 = Data.hash(algorithm:)(v5, v8, v9);
  uint64_t v12 = v11;
  v0[46] = v10;
  v0[47] = v11;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v15 = (char *)&dword_1009AD0A8 + dword_1009AD0A8;
  uint64_t v13 = (void *)swift_task_alloc(unk_1009AD0AC);
  v0[48] = v13;
  void *v13 = v0;
  v13[1] = sub_100129C08;
  return ((uint64_t (*)(uint64_t, uint64_t, void))v15)(v10, v12, v0[22]);
}

uint64_t sub_100129C08(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 384LL);
  *(void *)(*(void *)v2 + 392LL) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_100129D78;
  }

  else
  {
    uint64_t v7 = v4[46];
    unint64_t v8 = v4[47];
    v4[50] = a1;
    sub_100016F9C(v7, v8);
    uint64_t v6 = sub_100129C84;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_100129C84()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v3 = *(void *)(v0 + 392);
  uint64_t v2 = *(void *)(v0 + 400);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  uint64_t v14 = v1;
  *(void *)(v0 + 104) = 0x8000000000000000LL;
  sub_100129198(v2, (uint64_t)sub_1003F68BC, 0LL, isUniquelyReferenced_nonNull_native, &v14);
  if (v3) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v6 = *(void *)(v0 + 352);
  unint64_t v7 = *(void *)(v0 + 360);
  uint64_t v8 = *(void *)(v0 + 304);
  uint64_t v9 = *(void *)(v0 + 176);
  *(void *)(v0 + 104) = v14;
  swift_bridgeObjectRelease();
  swift_release(v9);
  swift_release(v8);
  sub_100016F9C(v6, v7);
  uint64_t v10 = *(void *)(v0 + 104);
  uint64_t v12 = *(void *)(v0 + 312);
  uint64_t v11 = *(void *)(v0 + 320);
  uint64_t v13 = *(void *)(v0 + 272);
  swift_task_dealloc(*(void *)(v0 + 296));
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v10, v12, v11);
}

uint64_t sub_100129D78()
{
  uint64_t v1 = *(void *)(v0 + 352);
  unint64_t v2 = *(void *)(v0 + 360);
  sub_100016F9C(*(void *)(v0 + 368), *(void *)(v0 + 376));
  sub_100016F9C(v1, v2);
  if (qword_10099B5A8 != -1) {
    swift_once(&qword_10099B5A8, sub_1005ADA84);
  }
  uint64_t v3 = *(void *)(v0 + 392);
  uint64_t v4 = type metadata accessor for Logger(0LL);
  sub_10000A720(v4, (uint64_t)qword_100A2AD60);
  swift_errorRetain(v3);
  uint64_t v5 = swift_errorRetain(v3);
  uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
  os_log_type_t v7 = static os_log_type_t.error.getter(v6);
  BOOL v8 = os_log_type_enabled(v6, v7);
  uint64_t v9 = *(void *)(v0 + 392);
  uint64_t v10 = *(void *)(v0 + 176);
  if (v8)
  {
    uint64_t v20 = *(void *)(v0 + 304);
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v12 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v11 = 138543362;
    swift_errorRetain(v9);
    uint64_t v13 = _swift_stdlib_bridgeErrorToNSError(v9);
    *(void *)(v0 + 152) = v13;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v11 + 4, v11 + 12);
    *uint64_t v12 = v13;
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Failed to generate attestation header: %{public}@.", v11, 0xCu);
    uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v12, 1LL, v14);
    swift_slowDealloc(v12, -1LL, -1LL);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_release(v20);
    swift_release(v10);

    swift_errorRelease(v9);
  }

  else
  {
    swift_release(*(void *)(v0 + 304));
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    swift_errorRelease(v9);
    swift_release(v10);
  }

  uint64_t v15 = *(void *)(v0 + 104);
  uint64_t v17 = *(void *)(v0 + 312);
  uint64_t v16 = *(void *)(v0 + 320);
  uint64_t v18 = *(void *)(v0 + 272);
  swift_task_dealloc(*(void *)(v0 + 296));
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 8))(v15, v17, v16);
}

unint64_t sub_100129FB0()
{
  unint64_t result = qword_1009A1D80;
  if (!qword_1009A1D80)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ED628, &type metadata for SecureLocationsSubmitRequestBody);
    atomic_store(result, (unint64_t *)&qword_1009A1D80);
  }

  return result;
}

void *sub_100129FF4(void *a1)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[5];
  uint64_t v5 = a1[8];
  swift_bridgeObjectRelease(a1[9]);
  swift_bridgeObjectRelease(v5);
  swift_bridgeObjectRelease(v4);
  swift_bridgeObjectRelease(v3);
  swift_bridgeObjectRelease(v2);
  return a1;
}

uint64_t initializeBufferWithCopyOfBuffer for OwnedBeaconGroup.Version(uint64_t result, uint64_t *a2)
{
  uint64_t v2 = *a2;
  *(_BYTE *)(result + 8) = *((_BYTE *)a2 + 8);
  *(void *)unint64_t result = v2;
  return result;
}

uint64_t getEnumTagSinglePayload for OwnedBeaconGroup.Version(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 9)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for SecureLocationsSubmitResponseBody(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(result + 8) = 0;
    *(void *)unint64_t result = (a2 - 1);
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 9) = v3;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsSubmitResponseBody()
{
  return &type metadata for SecureLocationsSubmitResponseBody;
}

uint64_t sub_10012A0E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012A0EC);
}

uint64_t sub_10012A0F0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012A0FC);
}

uint64_t type metadata accessor for OwnedDeviceSubmitEndpoint(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009A1DE8, (uint64_t)&nominal type descriptor for OwnedDeviceSubmitEndpoint);
}

uint64_t destroy for SecureLocationsSubmitRequestBody(void *a1)
{
  return swift_bridgeObjectRelease(a1[10]);
}

uint64_t initializeWithCopy for SecureLocationsSubmitRequestBody(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  uint64_t v5 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v5;
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  uint64_t v7 = *(void *)(a2 + 72);
  uint64_t v8 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = v7;
  *(void *)(a1 + 80) = v8;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(v8);
  return a1;
}

uint64_t assignWithCopy for SecureLocationsSubmitRequestBody(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 72);
  uint64_t v13 = *(void *)(a1 + 72);
  *(void *)(a1 + 72) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  uint64_t v14 = *(void *)(a2 + 80);
  uint64_t v15 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  return a1;
}

__n128 initializeWithTake for SecureLocationsSubmitRequestBody(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t assignWithTake for SecureLocationsSubmitRequestBody(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 40);
  uint64_t v9 = *(void *)(a1 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v8;
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 48) = *(_BYTE *)(a2 + 48);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_bridgeObjectRelease(*(void *)(a1 + 64));
  uint64_t v10 = *(void *)(a1 + 72);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  swift_bridgeObjectRelease(v10);
  uint64_t v11 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = *(void *)(a2 + 80);
  swift_bridgeObjectRelease(v11);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsSubmitRequestBody(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 88)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsSubmitRequestBody(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(_OWORD *)(result + 72) = 0u;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 88) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 88) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsSubmitRequestBody()
{
  return &type metadata for SecureLocationsSubmitRequestBody;
}

uint64_t destroy for SecureLocationsSubmitRequest(uint64_t a1)
{
  return sub_100016F9C(*(void *)(a1 + 8), *(void *)(a1 + 16));
}

uint64_t *_s12searchpartyd28SecureLocationsSubmitRequestVwCP_0(uint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  *a1 = *a2;
  unint64_t v5 = a2[2];
  swift_bridgeObjectRetain(v3);
  sub_10001736C(v4, v5);
  a1[1] = v4;
  a1[2] = v5;
  return a1;
}

uint64_t *assignWithCopy for SecureLocationsSubmitRequest(uint64_t *a1, uint64_t *a2)
{
  uint64_t v4 = *a2;
  *a1 = *a2;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  uint64_t v6 = a2[1];
  unint64_t v5 = a2[2];
  sub_10001736C(v6, v5);
  uint64_t v7 = a1[1];
  unint64_t v8 = a1[2];
  a1[1] = v6;
  a1[2] = v5;
  sub_100016F9C(v7, v8);
  return a1;
}

__n128 initializeWithTake for MessagingDestination(__n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  a1[1].n128_u64[0] = a2[1].n128_u64[0];
  *a1 = result;
  return result;
}

void *assignWithTake for SecureLocationsSubmitRequest(void *a1, uint64_t a2)
{
  *a1 = *(void *)a2;
  swift_bridgeObjectRelease();
  uint64_t v4 = a1[1];
  unint64_t v5 = a1[2];
  *(_OWORD *)(a1 + 1) = *(_OWORD *)(a2 + 8);
  sub_100016F9C(v4, v5);
  return a1;
}

uint64_t getEnumTagSinglePayload for SecureLocationsSubmitRequest(uint64_t *a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *((_BYTE *)a1 + 24)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  uint64_t v2 = *a1;
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for SecureLocationsSubmitRequest(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 8) = 0LL;
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 24) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)__n128 result = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 24) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsSubmitRequest()
{
  return &type metadata for SecureLocationsSubmitRequest;
}

uint64_t *sub_10012A5F0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v12);
  }

  else
  {
    uint64_t v7 = type metadata accessor for FMNAccountType(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = (char *)a1 + v8;
    uint64_t v10 = (char *)a2 + v8;
    uint64_t v11 = type metadata accessor for URLComponents(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 16LL))(v9, v10, v11);
  }

  return a1;
}

uint64_t sub_10012A698(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FMNAccountType(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  uint64_t v6 = type metadata accessor for URLComponents(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v5, v6);
}

uint64_t sub_10012A6F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FMNAccountType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URLComponents(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
  return a1;
}

uint64_t sub_10012A770(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FMNAccountType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URLComponents(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 24LL))(v8, v9, v10);
  return a1;
}

uint64_t sub_10012A7EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FMNAccountType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URLComponents(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 32LL))(v8, v9, v10);
  return a1;
}

uint64_t sub_10012A868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FMNAccountType(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = type metadata accessor for URLComponents(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 40LL))(v8, v9, v10);
  return a1;
}

uint64_t sub_10012A8E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012A8F0);
}

uint64_t sub_10012A8F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for FMNAccountType(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
  }

  else
  {
    uint64_t v8 = type metadata accessor for URLComponents(0LL);
    uint64_t v10 = a1 + *(int *)(a3 + 20);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
  }

  return v9(v10, a2, v8);
}

uint64_t sub_10012A968(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012A974);
}

uint64_t sub_10012A978(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for FMNAccountType(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = v8;
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    uint64_t v10 = type metadata accessor for URLComponents(0LL);
    uint64_t v12 = a1 + *(int *)(a4 + 20);
    uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SecureLocationsSubmitEndpoint(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009A1E78, (uint64_t)&nominal type descriptor for SecureLocationsSubmitEndpoint);
}

uint64_t sub_10012AA08(uint64_t a1)
{
  uint64_t result = type metadata accessor for FMNAccountType(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for URLComponents(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 256LL, 2LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

unint64_t sub_10012AA8C()
{
  unint64_t result = qword_1009A1EB8;
  if (!qword_1009A1EB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ED874, &type metadata for SecureLocationsSubmitRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1EB8);
  }

  return result;
}

unint64_t sub_10012AAD0()
{
  unint64_t result = qword_1009A1EC0;
  if (!qword_1009A1EC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6E4C, &type metadata for SecureLocationsPublishClientContext);
    atomic_store(result, (unint64_t *)&qword_1009A1EC0);
  }

  return result;
}

unint64_t sub_10012AB14()
{
  unint64_t result = qword_1009A1ED0;
  if (!qword_1009A1ED0)
  {
    uint64_t v1 = sub_100004B78(&qword_1009A1EC8);
    sub_10012AB78();
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for <A> [A], v1);
    atomic_store(result, (unint64_t *)&qword_1009A1ED0);
  }

  return result;
}

unint64_t sub_10012AB78()
{
  unint64_t result = qword_1009A1ED8;
  if (!qword_1009A1ED8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F8110, &type metadata for SecureLocationsEncodedPayload);
    atomic_store(result, (unint64_t *)&qword_1009A1ED8);
  }

  return result;
}

unint64_t sub_10012ABBC()
{
  unint64_t result = qword_1009A1EE8;
  if (!qword_1009A1EE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ED824, &type metadata for SecureLocationsSubmitResponseBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1EE8);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsSubmitResponseBody.CodingKeys( uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_10012AC40 + 4 * byte_1007ED4B0[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_10012AC60 + 4 * byte_1007ED4B5[v4]))();
  }
}

_BYTE *sub_10012AC40(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_10012AC60(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10012AC68(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10012AC70(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_10012AC78(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_10012AC80(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsSubmitResponseBody.CodingKeys()
{
  return &type metadata for SecureLocationsSubmitResponseBody.CodingKeys;
}

uint64_t storeEnumTagSinglePayload for SecureLocationsSubmitRequestBody.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_10012ACE8 + 4 * byte_1007ED4BF[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_10012AD1C + 4 * byte_1007ED4BA[v4]))();
}

uint64_t sub_10012AD1C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012AD24(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10012AD2CLL);
  }
  return result;
}

uint64_t sub_10012AD38(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10012AD40LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10012AD44(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10012AD4C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SecureLocationsSubmitRequestBody.CodingKeys()
{
  return &type metadata for SecureLocationsSubmitRequestBody.CodingKeys;
}

unint64_t sub_10012AD6C()
{
  unint64_t result = qword_1009A1EF0;
  if (!qword_1009A1EF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ED744, &type metadata for SecureLocationsSubmitRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1EF0);
  }

  return result;
}

unint64_t sub_10012ADB4()
{
  unint64_t result = qword_1009A1EF8;
  if (!qword_1009A1EF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ED7FC, &type metadata for SecureLocationsSubmitResponseBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1EF8);
  }

  return result;
}

unint64_t sub_10012ADFC()
{
  unint64_t result = qword_1009A1F00;
  if (!qword_1009A1F00)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ED76C, &type metadata for SecureLocationsSubmitResponseBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1F00);
  }

  return result;
}

unint64_t sub_10012AE44()
{
  unint64_t result = qword_1009A1F08;
  if (!qword_1009A1F08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ED794, &type metadata for SecureLocationsSubmitResponseBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1F08);
  }

  return result;
}

unint64_t sub_10012AE8C()
{
  unint64_t result = qword_1009A1F10;
  if (!qword_1009A1F10)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ED6B4, &type metadata for SecureLocationsSubmitRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1F10);
  }

  return result;
}

unint64_t sub_10012AED4()
{
  unint64_t result = qword_1009A1F18;
  if (!qword_1009A1F18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ED6DC, &type metadata for SecureLocationsSubmitRequestBody.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009A1F18);
  }

  return result;
}

uint64_t sub_10012AF18(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6F43746E65696C63LL && a2 == 0xED0000747865746ELL)
  {
    unint64_t v5 = 0xED0000747865746ELL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6F43746E65696C63LL, 0xED0000747865746ELL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0x74696D627573LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0x74696D627573LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

uint64_t destroy for FamilyMember(void *a1)
{
  return swift_bridgeObjectRelease(a1[10]);
}

uint64_t initializeWithCopy for FamilyMember(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  uint64_t v4 = *(void *)(a2 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v6;
  uint64_t v7 = *(void *)(a2 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v7;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRetain(v7);
  return a1;
}

uint64_t assignWithCopy for FamilyMember(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a1 + 64);
  *(void *)(a1 + 64) = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease(v11);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  uint64_t v12 = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a1 + 80);
  *(void *)(a1 + 80) = v12;
  swift_bridgeObjectRetain(v12);
  swift_bridgeObjectRelease(v13);
  return a1;
}

uint64_t assignWithTake for FamilyMember(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  uint64_t v6 = *(void *)(a2 + 24);
  uint64_t v7 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(void *)(a1 + 24) = v6;
  swift_bridgeObjectRelease(v7);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRelease(v9);
  uint64_t v10 = *(void *)(a2 + 64);
  uint64_t v11 = *(void *)(a1 + 64);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  *(void *)(a1 + 64) = v10;
  swift_bridgeObjectRelease(v11);
  uint64_t v12 = *(void *)(a2 + 80);
  uint64_t v13 = *(void *)(a1 + 80);
  *(void *)(a1 + 72) = *(void *)(a2 + 72);
  *(void *)(a1 + 80) = v12;
  swift_bridgeObjectRelease(v13);
  return a1;
}

ValueMetadata *type metadata accessor for FamilyMember()
{
  return &type metadata for FamilyMember;
}

unint64_t sub_10012B248()
{
  uint64_t v1 = *(void *)v0;
  uint64_t v2 = *(void **)(v0 + 8);
  swift_bridgeObjectRetain(v2);
  v3._countAndFlagsBits = v1;
  v3._object = v2;
  String.append(_:)(v3);
  swift_bridgeObjectRelease(v2);
  v4._countAndFlagsBits = 0x4449656C70706120LL;
  v4._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v4);
  uint64_t v5 = *(void *)(v0 + 16);
  uint64_t v6 = *(void **)(v0 + 24);
  swift_bridgeObjectRetain(v6);
  v7._countAndFlagsBits = v5;
  v7._object = v6;
  String.append(_:)(v7);
  swift_bridgeObjectRelease(v6);
  v8._countAndFlagsBits = 0x203A654D736920LL;
  v8._object = (void *)0xE700000000000000LL;
  String.append(_:)(v8);
  if ((*(_BYTE *)(v0 + 32) & 1) != 0) {
    uint64_t v9 = 1702195828LL;
  }
  else {
    uint64_t v9 = 0x65736C6166LL;
  }
  if ((*(_BYTE *)(v0 + 32) & 1) != 0) {
    unint64_t v10 = 0xE400000000000000LL;
  }
  else {
    unint64_t v10 = 0xE500000000000000LL;
  }
  unint64_t v11 = v10;
  String.append(_:)(*(Swift::String *)&v9);
  swift_bridgeObjectRelease(v10);
  v12._countAndFlagsBits = 62LL;
  v12._object = (void *)0xE100000000000000LL;
  String.append(_:)(v12);
  return 0xD000000000000017LL;
}

Swift::Int sub_10012B384()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)(v4, 0LL);
  String.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_10012B3CC(uint64_t a1)
{
  return String.hash(into:)(a1, *v1, v1[1]);
}

Swift::Int sub_10012B3D4(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  Hasher.init(_seed:)(v5, a1);
  String.hash(into:)(v5, v2, v3);
  return Hasher._finalize()();
}

uint64_t sub_10012B41C(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a1 + 48);
  v7[2] = *(_OWORD *)(a1 + 32);
  v7[3] = v2;
  void v7[4] = *(_OWORD *)(a1 + 64);
  uint64_t v8 = *(void *)(a1 + 80);
  __int128 v3 = *(_OWORD *)(a1 + 16);
  v7[0] = *(_OWORD *)a1;
  v7[1] = v3;
  __int128 v4 = *(_OWORD *)(a2 + 48);
  _OWORD v9[2] = *(_OWORD *)(a2 + 32);
  v9[3] = v4;
  v9[4] = *(_OWORD *)(a2 + 64);
  uint64_t v10 = *(void *)(a2 + 80);
  __int128 v5 = *(_OWORD *)(a2 + 16);
  v9[0] = *(_OWORD *)a2;
  v9[1] = v5;
  return sub_10012B4CC((uint64_t *)v7, (uint64_t)v9) & 1;
}

unint64_t sub_10012B488()
{
  unint64_t result = qword_1009A1F20;
  if (!qword_1009A1F20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007ED8D4, &type metadata for FamilyMember);
    atomic_store(result, (unint64_t *)&qword_1009A1F20);
  }

  return result;
}

uint64_t sub_10012B4CC(uint64_t *a1, uint64_t a2)
{
  uint64_t v4 = *a1;
  uint64_t v5 = a1[1];
  uint64_t v6 = *(void *)(a2 + 8);
  if (v4 != *(void *)a2 || v5 != v6)
  {
    char v8 = _stringCompareWithSmolCheck(_:_:expecting:)(v4, v5, *(void *)a2, v6, 0LL);
    uint64_t result = 0LL;
    if ((v8 & 1) == 0) {
      return result;
    }
  }

  uint64_t v10 = a1[2];
  uint64_t v11 = a1[3];
  uint64_t v12 = *(void *)(a2 + 16);
  uint64_t v13 = *(void *)(a2 + 24);
  if (v10 != v12 || v11 != v13)
  {
    char v15 = _stringCompareWithSmolCheck(_:_:expecting:)(v10, v11, v12, v13, 0LL);
    uint64_t result = 0LL;
    if ((v15 & 1) == 0) {
      return result;
    }
  }

  uint64_t v16 = a1[6];
  uint64_t v17 = *(void *)(a2 + 48);
  if (v16)
  {
    if (!v17) {
      return 0LL;
    }
    uint64_t v18 = a1[5];
    uint64_t v19 = *(void *)(a2 + 40);
    if (v18 != v19 || v16 != v17)
    {
      char v20 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v16, v19, v17, 0LL);
      uint64_t result = 0LL;
      if ((v20 & 1) == 0) {
        return result;
      }
    }
  }

  else if (v17)
  {
    return 0LL;
  }

  uint64_t v21 = a1[8];
  uint64_t v22 = *(void *)(a2 + 64);
  if (!v21)
  {
    if (v22) {
      return 0LL;
    }
    goto LABEL_28;
  }

  if (!v22) {
    return 0LL;
  }
  uint64_t v23 = a1[7];
  uint64_t v24 = *(void *)(a2 + 56);
  if (v23 == v24 && v21 == v22
    || (char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v23, v21, v24, v22, 0LL), result = 0LL, (v25 & 1) != 0))
  {
LABEL_28:
    uint64_t v26 = a1[10];
    uint64_t v27 = *(void *)(a2 + 80);
    if (v26)
    {
      if (!v27) {
        return 0LL;
      }
      uint64_t v28 = a1[9];
      uint64_t v29 = *(void *)(a2 + 72);
      if ((v28 != v29 || v26 != v27) && (_stringCompareWithSmolCheck(_:_:expecting:)(v28, v26, v29, v27, 0LL) & 1) == 0) {
        return 0LL;
      }
    }

    else if (v27)
    {
      return 0LL;
    }

    return 1LL;
  }

  return result;
}

uint64_t sub_10012B620@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = *(void *)(v2 + 16);
  if (*(void *)(v5 + 16) && (unint64_t v6 = sub_10030D124(a1), (v7 & 1) != 0))
  {
    unint64_t v8 = v6;
    uint64_t v9 = *(void *)(v5 + 56);
    uint64_t v10 = type metadata accessor for UUID(0LL);
    uint64_t v11 = *(void *)(v10 - 8);
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v11 + 16))(a2, v9 + *(void *)(v11 + 72) * v8, v10);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v11 + 56))(a2, 0LL, 1LL, v10);
  }

  else
  {
    uint64_t v12 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL))(a2, 1LL, 1LL, v12);
  }

  return swift_endAccess(v14);
}

uint64_t sub_10012B6F8()
{
  return swift_deallocClassInstance(v0, 32LL, 7LL);
}

uint64_t _s22SharedBeaconUUIDMapperCMa()
{
  return objc_opt_self(&OBJC_CLASS____TtCC12searchpartyd11BeaconStore22SharedBeaconUUIDMapper);
}

uint64_t sub_10012B75C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012B768);
}

uint64_t sub_10012B76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012B778);
}

uint64_t type metadata accessor for ServiceUUID(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009A2028, (uint64_t)&nominal type descriptor for ServiceUUID);
}

uint64_t sub_10012B794(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (**(uint64_t (***)(uint64_t, uint64_t, uint64_t))(v4 - 8))(a1, a2, v4);
}

uint64_t sub_10012B7D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_10012B814(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_10012B858(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_10012B89C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a1, a2, v4);
  return a1;
}

uint64_t sub_10012B8E0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012B8EC);
}

uint64_t sub_10012B8F0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t sub_10012B92C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012B938);
}

uint64_t sub_10012B93C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for CharacteristicUUID(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009A20B8, (uint64_t)&nominal type descriptor for CharacteristicUUID);
}

uint64_t sub_10012B990(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 1LL, &v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void *sub_10012B9F8()
{
  return &protocol witness table for String;
}

uint64_t sub_10012BA04()
{
  v0._countAndFlagsBits = UUID.uuidString.getter();
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 41LL;
  v2._object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  return v4[0];
}

unint64_t sub_10012BA84()
{
  uint64_t v0 = swift_bridgeObjectRelease(0xE000000000000000LL);
  v1._countAndFlagsBits = UUID.uuidString.getter(v0);
  object = v1._object;
  String.append(_:)(v1);
  swift_bridgeObjectRelease(object);
  v3._countAndFlagsBits = 41LL;
  v3._object = (void *)0xE100000000000000LL;
  String.append(_:)(v3);
  return 0xD000000000000013LL;
}

Swift::Int sub_10012BB14()
{
  uint64_t v0 = type metadata accessor for UUID(0LL);
  uint64_t v1 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_10012BB80(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

Swift::Int sub_10012BBD8(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_10012BC40@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v10 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  UUID.init(uuidString:)(*a1, a1[1]);
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t result = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7);
  if ((_DWORD)result != 1) {
    return (*(uint64_t (**)(uint64_t, char *, uint64_t))(v8 + 32))(a2, v6, v7);
  }
  __break(1u);
  return result;
}

uint64_t sub_10012BD00()
{
  return sub_100007864(&qword_1009A20F0, type metadata accessor for CharacteristicUUID, (uint64_t)&unk_1007EDA04);
}

void *sub_10012BD2C()
{
  return &protocol witness table for String;
}

uint64_t sub_10012BD38()
{
  return sub_100007864(&qword_1009A20F8, type metadata accessor for CharacteristicUUID, (uint64_t)&unk_1007EDA3C);
}

uint64_t sub_10012BD64()
{
  return sub_100007864(&qword_1009A2100, type metadata accessor for CharacteristicUUID, (uint64_t)&unk_1007EDA64);
}

void *sub_10012BD90()
{
  return &protocol witness table for String;
}

uint64_t sub_10012BD9C()
{
  return sub_100007864(&qword_1009A2108, type metadata accessor for ServiceUUID, (uint64_t)&unk_1007EDB4C);
}

uint64_t sub_10012BDC8()
{
  return sub_100007864(&qword_1009A2110, type metadata accessor for ServiceUUID, (uint64_t)&unk_1007EDB84);
}

uint64_t sub_10012BDF4()
{
  return sub_100007864(&qword_1009A2118, type metadata accessor for ServiceUUID, (uint64_t)&unk_1007EDBAC);
}

id sub_10012BE24(uint64_t a1, uint64_t a2)
{
  uint64_t v39 = a2;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v45 = *(void *)(v4 - 8);
  uint64_t v46 = v4;
  __chkstk_darwin(v4);
  uint64_t v42 = (char *)&v31 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v43 = *(void *)(v6 - 8);
  uint64_t v44 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = *(void *)(a2 + 8);
  uint64_t v10 = *(void *)(v9 + 8);
  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v10 + 24);
  unsigned __int8 v12 = v11(a1, v10);
  __int128 v49 = xmmword_1007E4480;
  char v47 = v12 >> 6;
  v48[3] = &type metadata for UnsafeRawBufferPointer;
  v48[4] = &protocol witness table for UnsafeRawBufferPointer;
  v48[0] = &v47;
  v48[1] = v48;
  uint64_t v13 = sub_100012ED8(v48, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  Data._Representation.append(contentsOf:)(*v13, v13[1]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v48);
  uint64_t v14 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(a1, v10);
  unint64_t v40 = v15;
  uint64_t v41 = v14;
  uint64_t v16 = (*(uint64_t (**)(uint64_t, uint64_t))(v9 + 16))(a1, v9);
  unint64_t v37 = v17;
  uint64_t v38 = v16;
  unint64_t v33 = *((void *)&v49 + 1);
  uint64_t v34 = v49;
  sub_10001736C(v49, *((unint64_t *)&v49 + 1));
  int v36 = v11(a1, v10);
  uint64_t v35 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 40))(a1, v10);
  uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v10 + 48);
  __int128 v32 = v8;
  v18(a1, v10);
  uint64_t v19 = v42;
  (*(void (**)(uint64_t))(*(void *)(v39 + 16) + 8LL))(a1);
  id v20 = objc_allocWithZone(&OBJC_CLASS___SPBeaconAdvertisement);
  Class isa = Data._bridgeToObjectiveC()().super.isa;
  Class v22 = Data._bridgeToObjectiveC()().super.isa;
  Class v23 = Data._bridgeToObjectiveC()().super.isa;
  uint64_t v24 = v34;
  unint64_t v25 = v33;
  Class v26 = Data._bridgeToObjectiveC()().super.isa;
  Class v27 = Date._bridgeToObjectiveC()().super.isa;
  Class v28 = UUID._bridgeToObjectiveC()().super.isa;
  id v29 = [v20 initWithAddress:isa publicKey:v22 deviceType:v23 batteryState:v26 rawStatus:v36 rssi:v35 scanDate:v27 recordIdentifier:v28];

  (*(void (**)(char *, uint64_t))(v45 + 8))(v19, v46);
  (*(void (**)(char *, uint64_t))(v43 + 8))(v32, v44);
  sub_100016F9C(v24, v25);
  sub_100016F9C(v38, v37);
  sub_100016F9C(v41, v40);
  sub_100016F9C(v24, v25);
  return v29;
}

uint64_t DeviceIdentitySignature.signature.getter()
{
  uint64_t v1 = *(void *)v0;
  sub_10001736C(*(void *)v0, *(void *)(v0 + 8));
  return v1;
}

uint64_t sub_10012C17C()
{
  uint64_t v1 = *(void *)(v0 + 16);
  sub_10001736C(v1, *(void *)(v0 + 24));
  return v1;
}

uint64_t sub_10012C1AC()
{
  return *(unsigned __int8 *)(v0 + 32);
}

uint64_t sub_10012C1B4()
{
  return *(void *)(v0 + 56);
}

uint64_t sub_10012C1BC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 36);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_10012C1FC@<X0>(void *a1@<X8>)
{
  id v3 = [v1 location];
  if (v3)
  {
    uint64_t v4 = v3;
    [v3 latitude];
    uint64_t v6 = v5;
    [v4 longitude];
    uint64_t v8 = v7;
    [v4 horizontalAccuracy];
    uint64_t v10 = v9;
    id v11 = [v4 timestamp];
    uint64_t v12 = type metadata accessor for CachedHistoricalLocation(0LL);
    static Date._unconditionallyBridgeFromObjectiveC(_:)(v11);

    *a1 = v6;
    a1[1] = v8;
    a1[2] = v10;
    uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 56LL);
    uint64_t v14 = a1;
    uint64_t v15 = 0LL;
    uint64_t v16 = v12;
  }

  else
  {
    uint64_t v16 = type metadata accessor for CachedHistoricalLocation(0LL);
    uint64_t v13 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 56LL);
    uint64_t v14 = a1;
    uint64_t v15 = 1LL;
  }

  return v13(v14, v15, 1LL, v16);
}

uint64_t sub_10012C308@<X0>(void *a1@<X8>)
{
  return sub_10012C1FC(a1);
}

uint64_t sub_10012C328(uint64_t a1, uint64_t a2)
{
  return sub_10012C340(a1, a2, (SEL *)&selRef_address);
}

uint64_t sub_10012C334(uint64_t a1, uint64_t a2)
{
  return sub_10012C340(a1, a2, (SEL *)&selRef_advertisementData);
}

uint64_t sub_10012C340(uint64_t a1, uint64_t a2, SEL *a3)
{
  id v5 = [*v3 advertisement];
  id v6 = [v5 *a3];

  uint64_t v7 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v6);
  return v7;
}

id sub_10012C3B4()
{
  id v1 = [*v0 advertisement];
  id v2 = [v1 status];

  return v2;
}

id sub_10012C400()
{
  id v1 = [*v0 advertisement];
  id v2 = [v1 rssi];

  return v2;
}

void sub_10012C44C()
{
  id v1 = [*v0 advertisement];
  id v2 = [v1 scanDate];

  static Date._unconditionallyBridgeFromObjectiveC(_:)(v2);
}

uint64_t sub_10012C4B8()
{
  id v1 = [v0 fetchLimit];
  if (v1)
  {
    id v2 = v1;
    [v1 integerValue];
  }

  else
  {
    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
    sub_1006A0BEC(v4);
    swift_bridgeObjectRelease();
  }

  if (qword_10099B8A0 != -1) {
    swift_once(&qword_10099B8A0, sub_1006E0F98);
  }
  return 0LL;
}

unint64_t sub_10012C5B8(unint64_t a1, uint64_t a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v17 = *(void *)a2;
    *(void *)a1 = *(void *)a2;
    a1 = v17 + ((v5 + 16LL) & ~(unint64_t)v5);
    swift_retain();
  }

  else
  {
    uint64_t v7 = *(void *)a2;
    unint64_t v8 = *(void *)(a2 + 8);
    sub_10001736C(*(void *)a2, v8);
    *(void *)a1 = v7;
    *(void *)(a1 + 8) = v8;
    uint64_t v9 = *(void *)(a2 + 16);
    unint64_t v10 = *(void *)(a2 + 24);
    sub_10001736C(v9, v10);
    *(void *)(a1 + swift_weakDestroy(v0 + 16) = v9;
    *(void *)(a1 + 24) = v10;
    *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
    uint64_t v11 = *(void *)(a2 + 40);
    unint64_t v12 = *(void *)(a2 + 48);
    sub_10001736C(v11, v12);
    *(void *)(a1 + 40) = v11;
    *(void *)(a1 + 48) = v12;
    *(void *)(a1 + 56) = *(void *)(a2 + 56);
    uint64_t v13 = *(int *)(a3 + 36);
    uint64_t v14 = a1 + v13;
    uint64_t v15 = a2 + v13;
    uint64_t v16 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v16 - 8) + 16LL))(v14, v15, v16);
  }

  return a1;
}

uint64_t sub_10012C694(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 36);
  uint64_t v5 = type metadata accessor for Date(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

uint64_t sub_10012C6F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_10001736C(*(void *)a2, v7);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  uint64_t v8 = *(void *)(a2 + 16);
  unint64_t v9 = *(void *)(a2 + 24);
  sub_10001736C(v8, v9);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v8;
  *(void *)(a1 + 24) = v9;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v10 = *(void *)(a2 + 40);
  unint64_t v11 = *(void *)(a2 + 48);
  sub_10001736C(v10, v11);
  *(void *)(a1 + 40) = v10;
  *(void *)(a1 + 48) = v11;
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v12 = *(int *)(a3 + 36);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL))(v13, v14, v15);
  return a1;
}

uint64_t sub_10012C7A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a2;
  unint64_t v7 = *(void *)(a2 + 8);
  sub_10001736C(*(void *)a2, v7);
  uint64_t v8 = *(void *)a1;
  unint64_t v9 = *(void *)(a1 + 8);
  *(void *)a1 = v6;
  *(void *)(a1 + 8) = v7;
  sub_100016F9C(v8, v9);
  uint64_t v10 = *(void *)(a2 + 16);
  unint64_t v11 = *(void *)(a2 + 24);
  sub_10001736C(v10, v11);
  uint64_t v12 = *(void *)(a1 + 16);
  unint64_t v13 = *(void *)(a1 + 24);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v10;
  *(void *)(a1 + 24) = v11;
  sub_100016F9C(v12, v13);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v14 = *(void *)(a2 + 40);
  unint64_t v15 = *(void *)(a2 + 48);
  sub_10001736C(v14, v15);
  uint64_t v16 = *(void *)(a1 + 40);
  unint64_t v17 = *(void *)(a1 + 48);
  *(void *)(a1 + 40) = v14;
  *(void *)(a1 + 48) = v15;
  sub_100016F9C(v16, v17);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v18 = *(int *)(a3 + 36);
  uint64_t v19 = a1 + v18;
  uint64_t v20 = a2 + v18;
  uint64_t v21 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 24LL))(v19, v20, v21);
  return a1;
}

uint64_t sub_10012C868(uint64_t a1, uint64_t a2, uint64_t a3)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v5 = *(int *)(a3 + 36);
  uint64_t v6 = a1 + v5;
  uint64_t v7 = a2 + v5;
  uint64_t v8 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 32LL))(v6, v7, v8);
  return a1;
}

uint64_t sub_10012C8DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)a1;
  unint64_t v7 = *(void *)(a1 + 8);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  sub_100016F9C(v6, v7);
  uint64_t v8 = *(void *)(a1 + 16);
  unint64_t v9 = *(void *)(a1 + 24);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  sub_100016F9C(v8, v9);
  *(_BYTE *)(a1 + 32) = *(_BYTE *)(a2 + 32);
  uint64_t v10 = *(void *)(a1 + 40);
  unint64_t v11 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  sub_100016F9C(v10, v11);
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  uint64_t v12 = *(int *)(a3 + 36);
  uint64_t v13 = a1 + v12;
  uint64_t v14 = a2 + v12;
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 40LL))(v13, v14, v15);
  return a1;
}

uint64_t sub_10012C97C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_10012C988);
}

uint64_t sub_10012C988(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 12)
  {
    uint64_t v4 = *(void *)(a1 + 8) >> 60;
    if (((4 * (_DWORD)v4) & 0xC) != 0) {
      return 16 - ((4 * (_DWORD)v4) & 0xC | (v4 >> 2));
    }
    else {
      return 0LL;
    }
  }

  else
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 36),  a2,  v8);
  }

uint64_t sub_10012CA10(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_10012CA1C);
}

char *sub_10012CA1C(char *result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 12)
  {
    *(void *)uint64_t result = 0LL;
    *((void *)result + 1) = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  }

  else
  {
    uint64_t v7 = type metadata accessor for Date(0LL);
    return (char *)(*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( &v5[*(int *)(a4 + 36)],  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for SPCachedAdvertisement(uint64_t a1)
{
  uint64_t result = qword_1009A2178;
  if (!qword_1009A2178) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SPCachedAdvertisement);
  }
  return result;
}

uint64_t sub_10012CAD4(uint64_t a1)
{
  v4[0] = &unk_1007EDD08;
  v4[1] = &unk_1007EDD08;
  void v4[2] = (char *)&value witness table for Builtin.Int8 + 64;
  void v4[3] = &unk_1007EDD08;
  v4[4] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    void v4[5] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_10012CB68()
{
  uint64_t v1 = v0;
  uint64_t v28 = sub_100004AEC(&qword_1009B0800);
  uint64_t v26 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  unint64_t v25 = (char *)&v25 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v27 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v25 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AB0();
  uint64_t v10 = (void *)static OS_dispatch_queue.main.getter();
  uint64_t v11 = swift_allocObject(&unk_10093F6C0, 24LL, 7LL);
  swift_weakInit(v11 + 16, v1);
  aBlock[4] = sub_10012DEA0;
  uint64_t v30 = v11;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  void aBlock[3] = &unk_10093F6D8;
  uint64_t v12 = _Block_copy(aBlock);
  uint64_t v13 = swift_release(v30);
  static DispatchQoS.unspecified.getter(v13);
  aBlock[0] = _swiftEmptyArrayStorage;
  unint64_t v14 = sub_10012DDCC();
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  unint64_t v16 = sub_100012FF8();
  unint64_t v17 = v14;
  uint64_t v18 = v26;
  dispatch thunk of SetAlgebra.init<A>(_:)(aBlock, v15, v16, v3, v17);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v5, v12);
  _Block_release(v12);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v5, v3);
  uint64_t v19 = *(void (**)(char *, uint64_t))(v7 + 8);
  uint64_t v20 = v28;
  v19(v9, v6);
  [*(id *)(v1 + 64) invalidate];
  uint64_t v21 = *(void **)(v1 + 64);
  *(void *)(v1 + 64) = 0LL;

  uint64_t v22 = v1 + OBJC_IVAR____TtC12searchpartyd22BeaconNearOwnerService_observationSubscription;
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v18 + 48))( v1 + OBJC_IVAR____TtC12searchpartyd22BeaconNearOwnerService_observationSubscription,  1LL,  v20))
  {
    Class v23 = v25;
    (*(void (**)(char *, uint64_t, uint64_t))(v18 + 16))(v25, v22, v20);
    Subscription.unsubscribe(completion:)(sub_10012CF08, 0LL, v20);
    (*(void (**)(char *, uint64_t))(v18 + 8))(v23, v20);
  }

  swift_release(*(void *)(v1 + 16));

  swift_release(*(void *)(v1 + 40));
  swift_release(*(void *)(v1 + 48));

  swift_bridgeObjectRelease();
  swift_release(*(void *)(v1 + 80));
  sub_100015794(v22, &qword_1009A23B8);
  return v1;
}

void sub_10012CE60(uint64_t a1)
{
  uint64_t v1 = a1 + 16;
  swift_beginAccess(a1 + 16, v8, 0LL, 0LL);
  uint64_t Strong = swift_weakLoadStrong(v1);
  if (Strong)
  {
    uint64_t v3 = Strong;
    id v4 = *(id *)(Strong + 56);
    swift_release(v3);
    [v4 invalidate];
  }

  swift_beginAccess(v1, &v7, 0LL, 0LL);
  uint64_t v5 = swift_weakLoadStrong(v1);
  if (v5)
  {
    uint64_t v6 = *(void **)(v5 + 56);
    *(void *)(v5 + 56) = 0LL;
    swift_release(v5);
  }

uint64_t sub_10012CF08(uint64_t a1)
{
  if (a1)
  {
    uint64_t v2 = swift_errorRetain(a1);
    uint64_t v3 = static os_log_type_t.error.getter(v2);
    if (qword_10099B740 != -1) {
      swift_once(&qword_10099B740, sub_100651418);
    }
    uint64_t v4 = qword_100A2B050;
    uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v6 = swift_allocObject(v5, 72LL, 7LL);
    *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    swift_getErrorValue(a1, v13, v12);
    uint64_t v7 = Error.localizedDescription.getter(v12[1], v12[2]);
    uint64_t v9 = v8;
    *(void *)(v6 + 56) = &type metadata for String;
    *(void *)(v6 + 64) = sub_1000226F4();
    *(void *)(v6 + 32) = v7;
    *(void *)(v6 + 40) = v9;
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "Unsubscribe error: %@", 21LL, 2LL, v6);
    swift_bridgeObjectRelease();
    return swift_errorRelease(a1);
  }

  else
  {
    uint64_t v11 = static os_log_type_t.default.getter(0LL);
    if (qword_10099B740 != -1) {
      swift_once(&qword_10099B740, sub_100651418);
    }
    return os_log(_:dso:log:_:_:)( v11,  &_mh_execute_header,  qword_100A2B050,  "Unsubscribed successfuly from observations",  42LL,  2LL,  _swiftEmptyArrayStorage);
  }

uint64_t sub_10012D08C()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_10012D0B0()
{
  return type metadata accessor for BeaconNearOwnerService(0LL);
}

uint64_t type metadata accessor for BeaconNearOwnerService(uint64_t a1)
{
  uint64_t result = qword_1009A21F8;
  if (!qword_1009A21F8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconNearOwnerService);
  }
  return result;
}

uint64_t sub_10012D0F4(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v24 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v24 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = *(void *)(v3 + 24);
  uint64_t v14 = swift_unownedRetainStrong(v3);
  uint64_t v15 = swift_unownedRetain(v14);
  uint64_t v16 = swift_unownedRetain(v15);
  swift_release(v16);
  unint64_t v17 = (void *)swift_allocObject(&unk_10093F670, 40LL, 7LL);
  _BYTE v17[2] = v3;
  _OWORD v17[3] = a1;
  v17[4] = a2;
  aBlock[4] = sub_10012DE40;
  uint64_t v27 = v17;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  void aBlock[3] = &unk_10093F688;
  uint64_t v18 = _Block_copy(aBlock);
  uint64_t v19 = swift_retain();
  static DispatchQoS.unspecified.getter(v19);
  unint64_t v25 = _swiftEmptyArrayStorage;
  unint64_t v20 = sub_10012DDCC();
  uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  unint64_t v22 = sub_100012FF8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v25, v21, v22, v6, v20);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v13, v9, v18);
  swift_unownedRelease(v3);
  _Block_release(v18);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  return swift_release(v27);
}

uint64_t sub_10012D2D4(uint64_t a1, void (*a2)(void *), uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v45 = *(void *)(v6 - 8);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v43 = (char *)v41 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)v41 - v9;
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v11);
  uint64_t v44 = (uint64_t)v41 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_unownedRetainStrong(a1);
  uint64_t v13 = *(void *)(a1 + 16);
  swift_retain();
  swift_release(a1);
  uint64_t v14 = sub_100508644();
  swift_release(v13);
  uint64_t v15 = v14;
  uint64_t v16 = v14[2];
  if (v16)
  {
    v41[1] = a3;
    uint64_t v42 = a2;
    v41[0] = v15;
    uint64_t v17 = (uint64_t)(v15 + 4);
    uint64_t v46 = &_swiftEmptyDictionarySingleton;
    do
    {
      uint64_t v18 = v6;
      sub_100013044(v17, (uint64_t)v49);
      swift_unownedRetainStrong(a1);
      uint64_t v19 = *(void *)(a1 + 16);
      swift_retain();
      swift_release(a1);
      uint64_t v21 = v50;
      uint64_t v20 = v51;
      sub_100012ED8(v49, v50);
      (*(void (**)(uint64_t))(*(void *)(*(void *)(v20 + 8) + 8LL) + 32LL))(v21);
      if (qword_10099B300 != -1) {
        swift_once(&qword_10099B300, sub_1003459EC);
      }
      uint64_t v22 = qword_100A2A6C8;
      Class v23 = objc_autoreleasePoolPush();
      uint64_t v24 = sub_100004AEC((uint64_t *)&unk_1009AF790);
      OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, v22, v24);
      uint64_t v25 = v48[0];
      if (*(void *)(v48[0] + 16LL) && (unint64_t v26 = sub_10030D124((uint64_t)v10), (v27 & 1) != 0))
      {
        uint64_t v28 = *(void *)(*(void *)(v25 + 56) + 8 * v26);
        swift_bridgeObjectRetain(v28);
        swift_bridgeObjectRelease();
        id v29 = sub_1002FE5F8(v28);
        swift_bridgeObjectRelease();
        sub_1002FFE1C((uint64_t)v29);
        uint64_t v31 = v30;
        swift_release(v29);
      }

      else
      {
        swift_bridgeObjectRelease();
        uint64_t v31 = (uint64_t (*)(char *, uint64_t, uint64_t, uint64_t))_swiftEmptyArrayStorage;
      }

      objc_autoreleasePoolPop(v23);
      uint64_t v32 = v44;
      char v33 = sub_100518274(v44, (uint64_t)v10, v31, 1);
      swift_release(v19);
      swift_bridgeObjectRelease();
      uint64_t v34 = *(void (**)(char *, uint64_t))(v45 + 8);
      uint64_t v6 = v18;
      v34(v10, v18);
      sub_100015794(v32, (uint64_t *)&unk_10099D720);
      if ((v33 & 1) != 0)
      {
        uint64_t v36 = v50;
        uint64_t v35 = v51;
        sub_100012ED8(v49, v50);
        uint64_t v37 = (uint64_t)v43;
        (*(void (**)(uint64_t))(*(void *)(*(void *)(v35 + 8) + 8LL) + 32LL))(v36);
        sub_100013044((uint64_t)v49, (uint64_t)v48);
        uint64_t v38 = v46;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v46);
        char v47 = v38;
        sub_10005CAC0((uint64_t)v48, v37, isUniquelyReferenced_nonNull_native);
        uint64_t v46 = v47;
        swift_bridgeObjectRelease();
        v34((char *)v37, v6);
      }

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v49);
      v17 += 40LL;
      --v16;
    }

    while (v16);
    swift_bridgeObjectRelease();
    v42(v46);
  }

  else
  {
    swift_bridgeObjectRelease();
    a2(&_swiftEmptyDictionarySingleton);
  }

  return swift_bridgeObjectRelease();
}

uint64_t sub_10012D668()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v16 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v16 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void *)(v0 + 24);
  aBlock[4] = DeviceInformationProviderFactory.init();
  void aBlock[5] = 0LL;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  void aBlock[3] = &unk_10093F638;
  uint64_t v10 = _Block_copy(aBlock);
  uint64_t v11 = swift_unownedRetain(v0);
  static DispatchQoS.unspecified.getter(v11);
  uint64_t v17 = _swiftEmptyArrayStorage;
  unint64_t v12 = sub_10012DDCC();
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  unint64_t v14 = sub_100012FF8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v17, v13, v14, v2, v12);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v5, v10);
  swift_unownedRelease(v1);
  _Block_release(v10);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
}

uint64_t sub_10012D808()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v19 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v19 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *(void *)(v0 + 24);
  uint64_t v10 = swift_unownedRetainStrong(v0);
  uint64_t v11 = swift_unownedRetain(v10);
  uint64_t v12 = swift_unownedRetain(v11);
  swift_release(v12);
  uint64_t v13 = swift_allocObject(&unk_10093F5F8, 24LL, 7LL);
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = v0;
  aBlock[4] = sub_10012DDAC;
  uint64_t v22 = v13;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  void aBlock[3] = &unk_10093F610;
  unint64_t v14 = _Block_copy(aBlock);
  static DispatchQoS.unspecified.getter(v14);
  uint64_t v20 = _swiftEmptyArrayStorage;
  unint64_t v15 = sub_10012DDCC();
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  unint64_t v17 = sub_100012FF8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v2, v15);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v5, v14);
  swift_unownedRelease(v1);
  _Block_release(v14);
  (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
  (*(void (**)(char *, uint64_t))(v7 + 8))(v9, v6);
  return swift_release(v22);
}

uint64_t sub_10012D9D4(uint64_t a1)
{
  uint64_t v2 = *(void *)(swift_unownedRetainStrong(a1) + 72);
  swift_bridgeObjectRetain(v2);
  swift_release(a1);
  uint64_t v3 = *(void *)(v2 + 16);
  uint64_t result = swift_bridgeObjectRelease();
  if (v3)
  {
    swift_unownedRetainStrong(a1);
    sub_10012D668();
    return swift_release(a1);
  }

  return result;
}

void sub_10012DAA8(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v4[2] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[4] = (char *)&value witness table for Builtin.NativeObject + 64;
  void v4[5] = "\b";
  void v4[6] = "\b";
  v4[7] = (char *)&value witness table for Builtin.BridgeObject + 64;
  v4[8] = (char *)&value witness table for Builtin.NativeObject + 64;
  sub_10012DB5C(319LL);
  if (v3 <= 0x3F)
  {
    void v4[9] = *(void *)(v2 - 8) + 64LL;
    v4[10] = &unk_1007EDDB0;
    swift_updateClassMetadata2(a1, 256LL, 11LL, v4, a1 + 80);
  }

void sub_10012DB5C(uint64_t a1)
{
  if (!qword_1009A2208)
  {
    uint64_t v2 = sub_100004B78(&qword_1009B0800);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1009A2208);
    }
  }

uint64_t sub_10012DBB4(uint64_t a1)
{
  uint64_t result = type metadata accessor for BeaconObservation(0LL);
  unsigned int v3 = *(unsigned __int8 *)(a1 + *(int *)(result + 24));
  BOOL v4 = v3 > 0x22;
  uint64_t v5 = (1LL << v3) & 0x600018000LL;
  if (!v4 && v5 != 0)
  {
    uint64_t v7 = static os_log_type_t.info.getter(result);
    if (qword_10099B740 != -1) {
      swift_once(&qword_10099B740, sub_100651418);
    }
    os_log(_:dso:log:_:_:)( v7,  &_mh_execute_header,  qword_100A2B050,  "Sending Near Owner Event to Intents Session",  45LL,  2LL,  _swiftEmptyArrayStorage);
    sub_100504C28(a1, (uint64_t)&v18);
    if (v19)
    {
      sub_100012EC0(&v18, (uint64_t)v20);
      uint64_t v8 = sub_100004AEC(&qword_1009A23A8);
      uint64_t v9 = sub_100004AEC(&qword_1009A23B0);
      uint64_t v10 = *(void *)(v9 - 8);
      uint64_t v11 = *(void *)(v10 + 72);
      uint64_t v12 = *(unsigned __int8 *)(v10 + 80);
      uint64_t v13 = (v12 + 32) & ~v12;
      uint64_t v14 = swift_allocObject(v8, v13 + v11, v12 | 7);
      *(_OWORD *)(v14 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v15 = v14 + v13;
      uint64_t v16 = v15 + *(int *)(v9 + 48);
      uint64_t v17 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 16LL))(v15, a1, v17);
      sub_100013044((uint64_t)v20, v16);
      *(void *)&__int128 v18 = sub_100413004(v14);
      PassthroughSubject.send(_:)(&v18);
      swift_bridgeObjectRelease();
      return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v20);
    }

    else
    {
      return sub_100015794((uint64_t)&v18, (uint64_t *)&unk_1009A9C40);
    }
  }

  return result;
}

uint64_t sub_10012DD68(uint64_t a1)
{
  return sub_10012DBB4(a1);
}

uint64_t sub_10012DD88()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_10012DDAC()
{
  return sub_10012D9D4(*(void *)(v0 + 16));
}

uint64_t sub_10012DDB4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_10012DDC4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

unint64_t sub_10012DDCC()
{
  unint64_t result = qword_10099FAB0;
  if (!qword_10099FAB0)
  {
    uint64_t v1 = type metadata accessor for DispatchWorkItemFlags(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DispatchWorkItemFlags, v1);
    atomic_store(result, (unint64_t *)&qword_10099FAB0);
  }

  return result;
}

uint64_t sub_10012DE14()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_10012DE40()
{
  return sub_10012D2D4(*(void *)(v0 + 16), *(void (**)(void *))(v0 + 24), *(void *)(v0 + 32));
}

uint64_t sub_10012DE4C(uint64_t a1)
{
  uint64_t v2 = a1;
  return PassthroughSubject.send(_:)(&v2);
}

uint64_t sub_10012DE7C()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

void sub_10012DEA0()
{
}

uint64_t sub_10012DEC0()
{
  uint64_t result = sub_10012DEDC();
  qword_1009A23C0 = result;
  return result;
}

uint64_t sub_10012DEDC()
{
  id v0 = [objc_allocWithZone(GEOMapRegion) init];
  if (v0)
  {
    uint64_t v1 = v0;
    id v2 = [objc_allocWithZone(GEOLatLng) initWithLatitude:38.3767625 longitude:123.875419];
    [v1 addVertex:v2];

    id v3 = [objc_allocWithZone(GEOLatLng) initWithLatitude:31.8502665 longitude:125.094901];
    [v1 addVertex:v3];

    id v4 = [objc_allocWithZone(GEOLatLng) initWithLatitude:36.7747537 longitude:133.334647];
    [v1 addVertex:v4];

    id v5 = [objc_allocWithZone(GEOLatLng) initWithLatitude:39.1903306 longitude:130.434257];
    [v1 addVertex:v5];

    id v6 = [objc_allocWithZone(GEOLatLng) initWithLatitude:38.3767625 longitude:123.875419];
    [v1 addVertex:v6];

    return (uint64_t)v1;
  }

  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000024LL,  0x8000000100854ED0LL,  "searchpartyd/CLLocationRepresentable.swift",  42LL,  2LL,  25LL,  0);
    __break(1u);
  }

  return result;
}

id sub_10012E0AC()
{
  return [*v0 coordinate];
}

double sub_10012E0BC()
{
  return v1;
}

id sub_10012E0E0()
{
  return [*v0 horizontalAccuracy];
}

void sub_10012E0F0()
{
  id v1 = [*v0 timestamp];
  static Date._unconditionallyBridgeFromObjectiveC(_:)(v1);
}

id sub_10012E13C()
{
  return [*v0 latitude];
}

id sub_10012E14C()
{
  return [*v0 longitude];
}

uint64_t sub_10012E15C()
{
  id v0 = [objc_allocWithZone(GEOMapRegion) init];
  if (v0)
  {
    id v1 = v0;
    for (uint64_t i = 0LL; i != 576; i += 16LL)
    {
      id v3 = [objc_allocWithZone(GEOLatLng) initWithLatitude:*(double *)((char *)&off_100933530 + i + 40) longitude:*(double *)((char *)&off_100933530 + i + 32)];
      [v1 addVertex:v3];
    }

    return (uint64_t)v1;
  }

  else
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  0xD000000000000024LL,  0x8000000100854ED0LL,  "searchpartyd/CLLocationRepresentable.swift",  42LL,  2LL,  41LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t sub_10012E26C(uint64_t a1)
{
  uint64_t v58 = sub_100004AEC(&qword_1009A2570);
  uint64_t v3 = __chkstk_darwin(v58);
  uint64_t v57 = (uint64_t *)((char *)&v47 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v56 = (char *)&v47 - v6;
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v55 = (uint64_t *)((char *)&v47 - v8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v54 = (uint64_t *)((char *)&v47 - v10);
  __chkstk_darwin(v9);
  os_log_type_t v53 = (uint64_t *)((char *)&v47 - v11);
  int64_t v12 = *(void *)(a1 + 16);
  uint64_t v13 = _swiftEmptyArrayStorage;
  if (!v12) {
    return (uint64_t)v13;
  }
  uint64_t v47 = v1;
  uint64_t v61 = _swiftEmptyArrayStorage;
  sub_100032888(0, v12, 0);
  uint64_t result = sub_10036D714(a1);
  uint64_t v16 = result;
  uint64_t v17 = 0LL;
  uint64_t v18 = a1 + 64;
  uint64_t v48 = a1 + 80;
  int64_t v49 = v12;
  uint64_t v51 = a1 + 64;
  uint64_t v52 = a1;
  uint64_t v50 = v15;
  while ((v16 & 0x8000000000000000LL) == 0 && v16 < 1LL << *(_BYTE *)(a1 + 32))
  {
    unint64_t v21 = (unint64_t)v16 >> 6;
    if (*(_DWORD *)(a1 + 36) != (_DWORD)v15) {
      goto LABEL_26;
    }
    uint64_t v59 = v17;
    uint64_t v60 = 1LL << v16;
    uint64_t v22 = v58;
    uint64_t v23 = (uint64_t)v53;
    uint64_t v24 = (uint64_t)v53 + *(int *)(v58 + 48);
    uint64_t v25 = *(void *)(a1 + 48);
    uint64_t v26 = *(void *)(a1 + 56);
    char v27 = (uint64_t *)(v25 + 16 * v16);
    uint64_t v28 = *v27;
    unint64_t v29 = v27[1];
    *os_log_type_t v53 = *v27;
    *(void *)(v23 + 8) = v29;
    uint64_t v30 = type metadata accessor for OwnedBeaconGroup.PairingState(0LL);
    sub_10001DC4C( v26 + *(void *)(*(void *)(v30 - 8) + 72LL) * v16,  v24,  type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v31 = (uint64_t)v54;
    *uint64_t v54 = v28;
    *(void *)(v31 + 8) = v29;
    sub_10001DC4C(v24, v31 + *(int *)(v22 + 48), type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v32 = v55;
    sub_100015750(v31, (uint64_t)v55, &qword_1009A2570);
    sub_10001736C(v28, v29);
    sub_10001736C(v28, v29);
    sub_100015794(v23, &qword_1009A2570);
    uint64_t v33 = *(int *)(v22 + 48);
    uint64_t v34 = (uint64_t)&v56[v33];
    uint64_t v35 = *v32;
    unint64_t v36 = v32[1];
    sub_10001DC4C((uint64_t)v32 + v33, (uint64_t)&v56[v33], type metadata accessor for OwnedBeaconGroup.PairingState);
    uint64_t v37 = (uint64_t)v57;
    uint64_t v38 = (uint64_t)v57 + *(int *)(v22 + 48);
    uint64_t *v57 = v35;
    *(void *)(v37 + 8) = v36;
    sub_10002218C(v34, v38, type metadata accessor for OwnedBeaconGroup.PairingState);
    sub_10001736C(v35, v36);
    sub_10001736C(v35, v36);
    sub_100015794(v37, &qword_1009A2570);
    sub_100015794((uint64_t)v32, &qword_1009A2570);
    uint64_t v13 = v61;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(v61);
    if ((result & 1) == 0)
    {
      uint64_t result = sub_100032888(0, v13[2] + 1LL, 1);
      uint64_t v13 = v61;
    }

    unint64_t v40 = v13[2];
    unint64_t v39 = v13[3];
    if (v40 >= v39 >> 1)
    {
      uint64_t result = sub_100032888(v39 > 1, v40 + 1, 1);
      uint64_t v13 = v61;
    }

    v13[2] = v40 + 1;
    uint64_t v41 = &v13[2 * v40];
    v41[4] = v35;
    v41[5] = v36;
    a1 = v52;
    int64_t v19 = 1LL << *(_BYTE *)(v52 + 32);
    if (v16 >= v19) {
      goto LABEL_27;
    }
    uint64_t v18 = v51;
    uint64_t v42 = *(void *)(v51 + 8 * v21);
    if ((v42 & v60) == 0) {
      goto LABEL_28;
    }
    LODWORD(v15) = v50;
    if (*(_DWORD *)(v52 + 36) != (_DWORD)v50) {
      goto LABEL_29;
    }
    unint64_t v43 = v42 & (-2LL << (v16 & 0x3F));
    if (v43)
    {
      int64_t v19 = __clz(__rbit64(v43)) | v16 & 0xFFFFFFFFFFFFFFC0LL;
      int64_t v20 = v49;
    }

    else
    {
      unint64_t v44 = v21 + 1;
      unint64_t v45 = (unint64_t)(v19 + 63) >> 6;
      int64_t v20 = v49;
      if (v21 + 1 < v45)
      {
        unint64_t v46 = *(void *)(v51 + 8 * v44);
        if (v46)
        {
LABEL_22:
          int64_t v19 = __clz(__rbit64(v46)) + (v44 << 6);
        }

        else
        {
          while (v45 - 2 != v21)
          {
            unint64_t v46 = *(void *)(v48 + 8 * v21++);
            if (v46)
            {
              unint64_t v44 = v21 + 1;
              goto LABEL_22;
            }
          }
        }
      }
    }

    uint64_t v17 = v59 + 1;
    uint64_t v16 = v19;
    if (v59 + 1 == v20) {
      return (uint64_t)v13;
    }
  }

  __break(1u);
LABEL_25:
  __break(1u);
LABEL_26:
  __break(1u);
LABEL_27:
  __break(1u);
LABEL_28:
  __break(1u);
LABEL_29:
  __break(1u);
  return result;
}

uint64_t sub_10012E678()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A200);
  sub_10000A720(v0, (uint64_t)qword_100A2A200);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x676E6972696170LL,  0xE700000000000000LL);
}

uint64_t sub_10012E6EC(uint64_t a1)
{
  uint64_t v2 = static os_log_type_t.default.getter(a1);
  if (qword_10099B6F8 != -1) {
    swift_once(&qword_10099B6F8, sub_100651098);
  }
  os_log(_:dso:log:_:_:)( v2,  &_mh_execute_header,  qword_100A2B008,  "Destroy pending creatingLocalBeaconFuture",  41LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v3 = *(dispatch_queue_s **)(v1 + 72);
  uint64_t v4 = swift_allocObject(&unk_100940000, 32LL, 7LL);
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = sub_1001534CC;
  *(void *)(v4 + 24) = v1;
  void v7[4] = sub_100095030;
  _OWORD v7[5] = v4;
  v7[0] = _NSConcreteStackBlock;
  v7[1] = 1107296256LL;
  v7[2] = sub_100025BD4;
  v7[3] = &unk_100940018;
  uint64_t v5 = _Block_copy(v7);
  swift_retain();
  swift_retain();
  swift_release();
  dispatch_sync(v3, v5);
  _Block_release(v5);
  LOBYTE(v3) = swift_isEscapingClosureAtFileLocation(v4, "", 152LL, 633LL, 43LL, 1LL);
  swift_release();
  uint64_t result = swift_release();
  return result;
}

uint64_t sub_10012E854@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t v49 = a2;
  uint64_t v50 = a3;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v39 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  int64_t v12 = (char *)&v39 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v14 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v39 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *(void *)(a1 + 80);
  if (v19)
  {
    uint64_t v20 = swift_retain();
    uint64_t v21 = static os_log_type_t.default.getter(v20);
    if (qword_10099B6F8 != -1) {
      swift_once(&qword_10099B6F8, sub_100651098);
    }
    uint64_t result = os_log(_:dso:log:_:_:)( v21,  &_mh_execute_header,  qword_100A2B008,  "Returning existing creatingLocalBeaconFuture",  44LL,  2LL,  _swiftEmptyArrayStorage);
  }

  else
  {
    uint64_t v40 = v16;
    uint64_t v41 = v14;
    uint64_t v42 = v15;
    unint64_t v43 = v12;
    uint64_t v44 = v10;
    uint64_t v45 = v9;
    unint64_t v46 = v8;
    uint64_t v47 = v6;
    uint64_t v39 = v5;
    uint64_t v48 = v3;
    uint64_t v23 = sub_100004AEC(&qword_1009A2658);
    swift_allocObject(v23, *(unsigned int *)(v23 + 48), *(unsigned __int16 *)(v23 + 52));
    uint64_t v19 = Future.init()(v24);
    uint64_t v25 = static os_log_type_t.default.getter(v19);
    if (qword_10099B6F8 != -1) {
      swift_once(&qword_10099B6F8, sub_100651098);
    }
    os_log(_:dso:log:_:_:)( v25,  &_mh_execute_header,  qword_100A2B008,  "Created new creatingLocalBeaconFuture",  37LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v26 = v42;
    *(void *)(v42 + 80) = v19;
    swift_retain();
    swift_release();
    sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
    uint64_t v28 = v40;
    uint64_t v27 = v41;
    (*(void (**)(char *, void, uint64_t))(v40 + 104))( v18,  enum case for DispatchQoS.QoSClass.default(_:),  v41);
    unint64_t v29 = (void *)static OS_dispatch_queue.global(qos:)(v18);
    (*(void (**)(char *, uint64_t))(v28 + 8))(v18, v27);
    uint64_t v30 = (void *)swift_allocObject(&unk_1009403C0, 40LL, 7LL);
    v30[2] = v26;
    v30[3] = v19;
    v30[4] = v49;
    aBlock[4] = sub_1001538D0;
    void aBlock[5] = v30;
    aBlock[0] = _NSConcreteStackBlock;
    aBlock[1] = 1107296256LL;
    aBlock[2] = sub_1001C31E8;
    void aBlock[3] = &unk_1009403D8;
    uint64_t v31 = _Block_copy(aBlock);
    swift_retain();
    swift_retain();
    uint64_t v32 = swift_retain();
    uint64_t v33 = v43;
    static DispatchQoS.unspecified.getter(v32);
    uint64_t v52 = _swiftEmptyArrayStorage;
    uint64_t v34 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v35 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v36 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v37 = v46;
    uint64_t v38 = v39;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v35, v36, v39, v34);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v33, v37, v31);
    _Block_release(v31);

    (*(void (**)(char *, uint64_t))(v47 + 8))(v37, v38);
    (*(void (**)(char *, uint64_t))(v44 + 8))(v33, v45);
    uint64_t result = swift_release();
  }

  *uint64_t v50 = v19;
  return result;
}

uint64_t sub_10012EC30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a1 + 256);
  swift_retain();
  swift_retain();
  swift_retain();
  sub_100552024(v6, a1, a2, a3);
  swift_release();
  swift_release();
  return swift_release();
}

uint64_t sub_10012EC9C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10014B7A4(a2, a3, a4);
}

uint64_t sub_10012ECAC()
{
  uint64_t v0 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  uint64_t v1 = __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10012E6EC(v1);
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(v3, 1LL, 1LL, v4);
  Future.finish(result:)(v3);
  return sub_100015794((uint64_t)v3, (uint64_t *)&unk_1009A9C30);
}

uint64_t sub_10012ED54(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v36 = a3;
  uint64_t v37 = a4;
  uint64_t v35 = a2;
  uint64_t v33 = a1;
  uint64_t v4 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v40 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v38 = *(void *)(v7 - 8);
  uint64_t v39 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v32 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v32 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = (char *)&v32 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  (*(void (**)(char *, void, uint64_t))(v15 + 104))( v17,  enum case for DispatchQoS.QoSClass.default(_:),  v14);
  uint64_t v34 = static OS_dispatch_queue.global(qos:)(v17);
  (*(void (**)(char *, uint64_t))(v15 + 8))(v17, v14);
  sub_10001581C(v33, (uint64_t)v13, (uint64_t *)&unk_1009B0830);
  uint64_t v18 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v19 = (v18 + 16) & ~v18;
  unint64_t v20 = (v12 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v23 = swift_allocObject(&unk_100940488, v22 + 8, v18 | 7);
  sub_100015750((uint64_t)v13, v23 + v19, (uint64_t *)&unk_1009B0830);
  uint64_t v24 = v36;
  *(void *)(v23 + v20) = v35;
  *(void *)(v23 + v21) = v24;
  *(void *)(v23 + v22) = v37;
  aBlock[4] = sub_100153C64;
  void aBlock[5] = v23;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  void aBlock[3] = &unk_1009404A0;
  uint64_t v25 = _Block_copy(aBlock);
  swift_retain();
  swift_retain();
  uint64_t v26 = swift_retain();
  static DispatchQoS.unspecified.getter(v26);
  uint64_t v41 = _swiftEmptyArrayStorage;
  uint64_t v27 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v28 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v29 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v41, v28, v29, v4, v27);
  uint64_t v30 = (void *)v34;
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v9, v6, v25);
  _Block_release(v25);

  (*(void (**)(char *, uint64_t))(v40 + 8))(v6, v4);
  (*(void (**)(char *, uint64_t))(v38 + 8))(v9, v39);
  return swift_release();
}

uint64_t sub_10012F080(uint64_t a1, uint64_t a2)
{
  uint64_t v27 = a2;
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009B0830);
  __chkstk_darwin(v10);
  uint64_t v12 = (uint64_t *)((char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v12, (uint64_t *)&unk_1009B0830);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v12, v10);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v14 = *v12;
    uint64_t v15 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_10099B748 != -1) {
      swift_once(&qword_10099B748, sub_100651480);
    }
    uint64_t v16 = qword_100A2B058;
    uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
    *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v28 = v14;
    swift_errorRetain(v14);
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v20 = String.init<A>(describing:)(&v28, v19);
    uint64_t v22 = v21;
    *(void *)(v18 + 56) = &type metadata for String;
    *(void *)(v18 + 64) = sub_1000226F4();
    *(void *)(v18 + 32) = v20;
    *(void *)(v18 + 40) = v22;
    os_log(_:dso:log:_:_:)( v15,  &_mh_execute_header,  v16,  "Could not create local pairing record: %@",  41LL,  2LL,  v18,  v27);
    uint64_t v23 = swift_bridgeObjectRelease();
    sub_10012E6EC(v23);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v7 + 56))(v5, 1LL, 1LL, v6);
    Future.finish(result:)(v5);
    swift_errorRelease(v14);
    return sub_100015794((uint64_t)v5, (uint64_t *)&unk_1009A9C30);
  }

  else
  {
    uint64_t v25 = sub_10002218C((uint64_t)v12, (uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
    uint64_t v26 = static os_log_type_t.default.getter(v25);
    if (qword_10099B748 != -1) {
      swift_once(&qword_10099B748, sub_100651480);
    }
    os_log(_:dso:log:_:_:)( v26,  &_mh_execute_header,  qword_100A2B058,  "Self beaconing completed successfully for this device.",  54LL,  2LL,  _swiftEmptyArrayStorage,  v27);
    sub_10001DC4C((uint64_t)v9, (uint64_t)v5, type metadata accessor for OwnedBeaconRecord);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v7 + 56))(v5, 0LL, 1LL, v6);
    Future.finish(result:)(v5);
    sub_100015794((uint64_t)v5, (uint64_t *)&unk_1009A9C30);
    sub_1004BDCEC((uint64_t)v9);
    return sub_100018C68((uint64_t)v9, type metadata accessor for OwnedBeaconRecord);
  }

uint64_t sub_10012F398()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for ShareRecord(0LL);
  uint64_t v160 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v145 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v171 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v183 = *(void *)(v171 - 8);
  uint64_t v5 = *(void *)(v183 + 64);
  uint64_t v6 = __chkstk_darwin(v171);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v167 = (uint64_t)&v145 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v176 = (uint64_t)&v145 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v168 = (uint64_t)&v145 - v12;
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v175 = (uint64_t)&v145 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v177 = (uint64_t)&v145 - v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v145 - v17;
  uint64_t v186 = type metadata accessor for StableIdentifier(0LL);
  uint64_t v19 = __chkstk_darwin(v186);
  uint64_t v184 = (uint64_t)&v145 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v148 = (uint64_t *)((char *)&v145 - v21);
  uint64_t v22 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v145 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v145 - v28;
  static SystemInfo.lockState.getter(v27);
  uint64_t v30 = *(void (**)(void))(v23 + 104);
  unsigned int v163 = enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:);
  uint64_t v162 = (void (*)(char *, void, uint64_t))v30;
  v30(v26);
  uint64_t v31 = sub_100007864( (unint64_t *)&qword_1009A2650,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  char v32 = dispatch thunk of static Equatable.== infix(_:_:)(v29, v26, v22, v31);
  uint64_t v33 = *(void (**)(char *, uint64_t))(v23 + 8);
  uint64_t v165 = v26;
  v33(v26, v22);
  uint64_t v164 = v29;
  uint64_t v166 = v22;
  uint64_t v161 = v33;
  uint64_t v34 = ((uint64_t (*)(char *, uint64_t))v33)(v29, v22);
  if ((v32 & 1) != 0)
  {
    uint64_t v35 = static os_log_type_t.default.getter(v34);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    return os_log(_:dso:log:_:_:)( v35,  &_mh_execute_header,  qword_100A2B018,  "removeDuplicateLocalBeacons call failed because we're beforeFirstUnlock state",  77LL,  2LL,  _swiftEmptyArrayStorage);
  }

  uint64_t v146 = v18;
  id v37 = (id)MobileGestalt_get_current_device(v34);
  if (!v37) {
    goto LABEL_38;
  }
  uint64_t v38 = v37;
  id v39 = (id)MobileGestalt_copy_uniqueDeviceID_obj();

  if (v39)
  {
    uint64_t v40 = static String._unconditionallyBridgeFromObjectiveC(_:)(v39);
    unint64_t v42 = v41;
  }

  else
  {
    uint64_t v40 = 0LL;
    unint64_t v42 = 0xE000000000000000LL;
  }

  uint64_t v43 = HIBYTE(v42) & 0xF;
  if ((v42 & 0x2000000000000000LL) == 0) {
    uint64_t v43 = v40 & 0xFFFFFFFFFFFFLL;
  }
  if (v43)
  {
    uint64_t v169 = (uint64_t)&v145 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v44 = v148;
    *uint64_t v148 = v40;
    v44[1] = v42;
    swift_storeEnumTagMultiPayload(v44, v186, 0LL);
    uint64_t v45 = objc_autoreleasePoolPush();
    uint64_t v178 = v1;
    uint64_t v46 = *(void *)(v1 + 256);
    uint64_t v47 = sub_100506C30();
    __chkstk_darwin(v47);
    uint64_t v144 = v44;
    uint64_t v190 = sub_100023858((uint64_t (*)(char *))sub_100153CC0, &v143, v48);
    swift_bridgeObjectRetain(v190);
    sub_10013E80C(&v190, sub_100141320);
    swift_bridgeObjectRelease();
    uint64_t v49 = v190;
    objc_autoreleasePoolPop(v45);
    uint64_t v50 = *(void *)(v49 + 16);
    if (!v50)
    {
      swift_release();
      return sub_100018C68((uint64_t)v148, type metadata accessor for StableIdentifier);
    }

    uint64_t v51 = *(unsigned __int8 *)(v183 + 80);
    uint64_t v52 = (uint64_t)v146;
    uint64_t v53 = sub_10001DC4C(v49 + ((v51 + 32) & ~v51), (uint64_t)v146, type metadata accessor for OwnedBeaconRecord);
    if (v50 == 1)
    {
      swift_release();
      uint64_t v54 = v52;
LABEL_35:
      sub_100018C68(v54, type metadata accessor for OwnedBeaconRecord);
      return sub_100018C68((uint64_t)v148, type metadata accessor for StableIdentifier);
    }

    uint64_t v182 = (v51 + 32) & ~v51;
    uint64_t v159 = v46;
    __chkstk_darwin(v53);
    uint64_t v144 = (void *)v52;
    uint64_t v57 = sub_100023858((uint64_t (*)(char *))sub_100153D0C, &v143, v49);
    uint64_t v58 = static os_log_type_t.error.getter(v57);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v59 = qword_100A2B018;
    uint64_t v180 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v60 = swift_allocObject(v180, 72LL, 7LL);
    __int128 v185 = xmmword_1007E67D0;
    *(_OWORD *)(v60 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v61 = v184;
    sub_10001DC4C((uint64_t)v148, v184, type metadata accessor for StableIdentifier);
    uint64_t v62 = String.init<A>(describing:)(v61, v186);
    uint64_t v64 = v63;
    *(void *)(v60 + 56) = &type metadata for String;
    unint64_t v179 = sub_1000226F4();
    *(void *)(v60 + 64) = v179;
    *(void *)(v60 + 32) = v62;
    *(void *)(v60 + 40) = v64;
    os_log(_:dso:log:_:_:)( v58,  &_mh_execute_header,  v59,  "Multiple beaconRecords found matching stableIdentifer of %@",  59LL,  2LL,  v60);
    swift_bridgeObjectRelease();
    uint64_t v158 = *(void *)(v57 + 16);
    if (!v158)
    {
LABEL_34:
      swift_bridgeObjectRelease();
      uint64_t v54 = (uint64_t)v146;
      goto LABEL_35;
    }

    uint64_t v65 = 0LL;
    uint64_t v145 = v57;
    uint64_t v157 = v57 + v182;
    uint64_t v174 = *(void *)(v178 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_localPairingMonitor);
    uint64_t v184 = (v51 + 16) & ~v51;
    uint64_t v155 = *(void *)(v183 + 72);
    uint64_t v183 = v51 | 7;
    uint64_t v156 = v184 + v5;
    unint64_t v173 = (v184 + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v66 = (v173 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v154 = v66 + 8;
    unint64_t v153 = (v66 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v152 = v153 + 8;
    unint64_t v151 = v66 + 9;
    unint64_t v172 = v66;
    unint64_t v150 = v66 + 10;
    __int128 v147 = xmmword_1007E4750;
    uint64_t v67 = v169;
    uint64_t v68 = v175;
    uint64_t v69 = v176;
    uint64_t v70 = v177;
    while (1)
    {
      uint64_t v186 = v65;
      uint64_t v99 = sub_10001DC4C(v157 + v155 * v65, v70, type metadata accessor for OwnedBeaconRecord);
      uint64_t v100 = static os_log_type_t.default.getter(v99);
      uint64_t v101 = qword_100A2B018;
      uint64_t v102 = swift_allocObject(v180, 72LL, 7LL);
      *(_OWORD *)(v102 + swift_weakDestroy(v0 + 16) = v185;
      sub_10001DC4C(v70, v68, type metadata accessor for OwnedBeaconRecord);
      uint64_t v103 = v68;
      uint64_t v104 = v171;
      uint64_t v105 = String.init<A>(describing:)(v103, v171);
      unint64_t v106 = v179;
      *(void *)(v102 + 56) = &type metadata for String;
      *(void *)(v102 + 64) = v106;
      *(void *)(v102 + 32) = v105;
      *(void *)(v102 + 40) = v107;
      os_log(_:dso:log:_:_:)(v100, &_mh_execute_header, v101, "Removing duplicate record: %@", 29LL, 2LL, v102, v145);
      swift_bridgeObjectRelease();
      uint64_t v108 = v168;
      sub_10001DC4C(v70, v168, type metadata accessor for OwnedBeaconRecord);
      sub_10001DC4C(v108, v69, type metadata accessor for OwnedBeaconRecord);
      uint64_t v182 = swift_allocObject(&unk_1009404D8, v156, v183);
      sub_10002218C(v108, v182 + v184, type metadata accessor for OwnedBeaconRecord);
      uint64_t v181 = v70 + *(int *)(v104 + 20);
      uint64_t v109 = sub_1005777D8();
      uint64_t v110 = v109[2];
      if (v110) {
        break;
      }
      swift_bridgeObjectRelease();
      uint64_t v113 = v178;
LABEL_31:
      uint64_t v114 = v167;
      sub_10001DC4C(v70, v167, type metadata accessor for OwnedBeaconRecord);
      sub_10001DC4C(v114, v67, type metadata accessor for OwnedBeaconRecord);
      uint64_t v115 = swift_allocObject(&unk_100940500, v152, v183);
      sub_10002218C(v114, v115 + v184, type metadata accessor for OwnedBeaconRecord);
      uint64_t v116 = (uint64_t (**)(uint64_t))(v115 + v173);
      uint64_t v117 = v182;
      *uint64_t v116 = sub_100153FD4;
      v116[1] = (uint64_t (*)(uint64_t))v117;
      uint64_t v118 = v174;
      *(void *)(v115 + v172) = v174;
      uint64_t v170 = v115;
      *(void *)(v115 + v153) = v113;
      swift_retain_n(v117, 2LL);
      swift_retain_n(v118, 2LL);
      uint64_t v119 = swift_retain_n(v113, 2LL);
      uint64_t v120 = static os_log_type_t.default.getter(v119);
      uint64_t v121 = qword_100A2B018;
      uint64_t v122 = swift_allocObject(v180, 72LL, 7LL);
      *(_OWORD *)(v122 + swift_weakDestroy(v0 + 16) = v185;
      uint64_t v123 = type metadata accessor for UUID(0LL);
      uint64_t v124 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v125 = dispatch thunk of CustomStringConvertible.description.getter(v123, v124);
      unint64_t v126 = v179;
      *(void *)(v122 + 56) = &type metadata for String;
      *(void *)(v122 + 64) = v126;
      *(void *)(v122 + 32) = v125;
      *(void *)(v122 + 40) = v127;
      os_log(_:dso:log:_:_:)(v120, &_mh_execute_header, v121, "Unpair owned beacon: %@", 23LL, 2LL, v122);
      uint64_t v128 = swift_bridgeObjectRelease();
      uint64_t v129 = v164;
      static SystemInfo.lockState.getter(v128);
      uint64_t v130 = v165;
      uint64_t v131 = v166;
      v162(v165, v163, v166);
      uint64_t v132 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
      dispatch thunk of RawRepresentable.rawValue.getter(&v190, v131, v132);
      dispatch thunk of RawRepresentable.rawValue.getter(&v189, v131, v132);
      uint64_t v134 = v189;
      uint64_t v133 = v190;
      uint64_t v135 = v130;
      unint64_t v136 = (uint64_t (*)(char *, uint64_t))v161;
      v161(v135, v131);
      uint64_t v137 = v136(v129, v131);
      if (v133 == v134)
      {
        uint64_t v138 = static os_log_type_t.default.getter(v137);
        os_log(_:dso:log:_:_:)( v138,  &_mh_execute_header,  qword_100A2B018,  "unpair call failed because in device is in beforeFirstUnlock state",  66LL,  2LL,  _swiftEmptyArrayStorage);
        unint64_t v139 = sub_1000220F0();
        uint64_t v140 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v139, 0LL, 0LL);
        *uint64_t v141 = 0;
        uint64_t v142 = static os_log_type_t.default.getter(v140);
        if (qword_10099B748 != -1) {
          swift_once(&qword_10099B748, sub_100651480);
        }
        uint64_t v71 = qword_100A2B058;
        uint64_t v72 = v180;
        uint64_t v73 = swift_allocObject(v180, 72LL, 7LL);
        *(_OWORD *)(v73 + swift_weakDestroy(v0 + 16) = v185;
        uint64_t v74 = v171;
        uint64_t v75 = dispatch thunk of CustomStringConvertible.description.getter(v123, v124);
        unint64_t v76 = v179;
        *(void *)(v73 + 56) = &type metadata for String;
        *(void *)(v73 + 64) = v76;
        *(void *)(v73 + 32) = v75;
        *(void *)(v73 + 40) = v77;
        os_log(_:dso:log:_:_:)(v142, &_mh_execute_header, v71, "Unpair for beacon, %@, unsuccessful", 35LL, 2LL, v73);
        swift_bridgeObjectRelease();
        uint64_t v78 = swift_errorRetain(v140);
        uint64_t v79 = static os_log_type_t.error.getter(v78);
        uint64_t v149 = qword_100A2B018;
        uint64_t v80 = swift_allocObject(v72, 112LL, 7LL);
        *(_OWORD *)(v80 + swift_weakDestroy(v0 + 16) = v147;
        uint64_t v81 = v175;
        sub_10001DC4C(v176, v175, type metadata accessor for OwnedBeaconRecord);
        uint64_t v82 = String.init<A>(describing:)(v81, v74);
        *(void *)(v80 + 56) = &type metadata for String;
        *(void *)(v80 + 64) = v76;
        *(void *)(v80 + 32) = v82;
        *(void *)(v80 + 40) = v83;
        swift_getErrorValue(v140, v188, v187);
        uint64_t v84 = Error.localizedDescription.getter(v187[1], v187[2]);
        *(void *)(v80 + 96) = &type metadata for String;
        *(void *)(v80 + 104) = v76;
        *(void *)(v80 + 72) = v84;
        *(void *)(v80 + 80) = v85;
        os_log(_:dso:log:_:_:)( v79,  &_mh_execute_header,  v149,  "Failed to remove duplicate record: %@. Error - %@",  49LL,  2LL,  v80);
        swift_bridgeObjectRelease();
        swift_errorRelease(v140);
        swift_errorRelease(v140);
      }

      ++v186;
      uint64_t v86 = dispatch_group_create();
      dispatch_group_enter(v86);
      uint64_t v87 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
      uint64_t v88 = *(void *)(v123 - 8);
      uint64_t v89 = *(unsigned __int8 *)(v88 + 80);
      uint64_t v90 = (v89 + 32) & ~v89;
      uint64_t v91 = swift_allocObject(v87, v90 + *(void *)(v88 + 72), v89 | 7);
      *(_OWORD *)(v91 + swift_weakDestroy(v0 + 16) = v185;
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v88 + 16))(v91 + v90, v181, v123);
      uint64_t v92 = swift_allocObject(&unk_100940528, 24LL, 7LL);
      *(void *)(v92 + swift_weakDestroy(v0 + 16) = v86;
      unint64_t v93 = v86;
      uint64_t v94 = v159;
      sub_10047B904(v91, (uint64_t)sub_100154694, v92);
      swift_bridgeObjectRelease();
      swift_release();
      OS_dispatch_group.wait()();
      uint64_t v95 = v177;
      uint64_t v68 = v175;
      sub_10001DC4C(v177, v175, type metadata accessor for OwnedBeaconRecord);
      uint64_t v96 = swift_allocObject(&unk_100940550, v150, v183);
      sub_10002218C(v68, v96 + v184, type metadata accessor for OwnedBeaconRecord);
      uint64_t v97 = (uint64_t (**)(uint64_t))(v96 + v173);
      uint64_t v98 = (uint64_t (*)(uint64_t))v170;
      *uint64_t v97 = sub_10014F0B4;
      v97[1] = v98;
      *(void *)(v96 + v172) = v94;
      *(_BYTE *)(v96 + v154) = 1;
      *(_BYTE *)(v96 + v151) = 1;
      swift_retain();
      swift_retain();
      sub_10013F7C0( v95,  (void (*)(void))sub_10014F0C8,  v96,  type metadata accessor for OwnedBeaconRecord,  &qword_10099B610,  (uint64_t)qword_100A2AE80,  (uint64_t)sub_100154730,  (uint64_t)sub_10014F0CC,  (uint64_t)sub_100021ABC,  (uint64_t)&unk_10093FB00,  (uint64_t)sub_10014F0EC,  byte_10093FB28,  (char *)sub_10014F3D4,  (uint64_t)sub_1005D3C50);
      uint64_t v70 = v95;
      swift_release();
      swift_release();

      uint64_t v67 = v169;
      sub_100018C68(v169, type metadata accessor for OwnedBeaconRecord);
      swift_release();
      swift_release();
      swift_release_n(v182, 2LL);
      uint64_t v69 = v176;
      sub_100018C68(v176, type metadata accessor for OwnedBeaconRecord);
      sub_100018C68(v70, type metadata accessor for OwnedBeaconRecord);
      uint64_t v65 = v186;
      if (v186 == v158) {
        goto LABEL_34;
      }
    }

    uint64_t v111 = (uint64_t)v109
         + ((*(unsigned __int8 *)(v160 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v160 + 80));
    uint64_t v112 = *(void *)(v160 + 72);
    uint64_t v113 = v178;
    while (1)
    {
      sub_10001DC4C(v111, (uint64_t)v4, type metadata accessor for ShareRecord);
      if (!*(void *)(v113 + 40)) {
        break;
      }
      swift_retain();
      sub_1001DD324((uint64_t)v4, (uint64_t)sub_10013C010, 0LL);
      swift_release();
      sub_100018C68((uint64_t)v4, type metadata accessor for ShareRecord);
      v111 += v112;
      if (!--v110)
      {
        swift_bridgeObjectRelease();
        uint64_t v70 = v177;
        goto LABEL_31;
      }
    }

    sub_100018C68(v69, type metadata accessor for OwnedBeaconRecord);
    __break(1u);
LABEL_38:
    __break(1u);
    uint64_t result = swift_release();
    __break(1u);
    return result;
  }

  uint64_t v55 = swift_bridgeObjectRelease();
  uint64_t v56 = static os_log_type_t.error.getter(v55);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  return os_log(_:dso:log:_:_:)( v56,  &_mh_execute_header,  qword_100A2B018,  "removeDuplicateLocalBeacons could not get UUID!",  47LL,  2LL,  _swiftEmptyArrayStorage);
}

uint64_t sub_100130388(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)v27 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    uint64_t v8 = swift_errorRetain(a1);
    uint64_t v9 = static os_log_type_t.error.getter(v8);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v10 = qword_100A2B018;
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v12 = swift_allocObject(v11, 112LL, 7LL);
    *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    sub_10001DC4C(a2, (uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
    uint64_t v13 = String.init<A>(describing:)(v7, v4);
    uint64_t v15 = v14;
    *(void *)(v12 + 56) = &type metadata for String;
    unint64_t v16 = sub_1000226F4();
    *(void *)(v12 + 64) = v16;
    *(void *)(v12 + 32) = v13;
    *(void *)(v12 + 40) = v15;
    swift_getErrorValue(a1, v28, v27);
    uint64_t v17 = Error.localizedDescription.getter(v27[1], v27[2]);
    *(void *)(v12 + 96) = &type metadata for String;
    *(void *)(v12 + 104) = v16;
    *(void *)(v12 + 72) = v17;
    *(void *)(v12 + 80) = v18;
    os_log(_:dso:log:_:_:)( v9,  &_mh_execute_header,  v10,  "Failed to remove duplicate record: %@. Error - %@",  49LL,  2LL,  v12);
    swift_bridgeObjectRelease();
    return swift_errorRelease(a1);
  }

  else
  {
    uint64_t v20 = static os_log_type_t.default.getter(v5);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v21 = qword_100A2B018;
    uint64_t v22 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v23 = swift_allocObject(v22, 72LL, 7LL);
    *(_OWORD *)(v23 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    sub_10001DC4C(a2, (uint64_t)v7, type metadata accessor for OwnedBeaconRecord);
    uint64_t v24 = String.init<A>(describing:)(v7, v4);
    uint64_t v26 = v25;
    *(void *)(v23 + 56) = &type metadata for String;
    *(void *)(v23 + 64) = sub_1000226F4();
    *(void *)(v23 + 32) = v24;
    *(void *)(v23 + 40) = v26;
    os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Successfully removed duplicate record: %@", 41LL, 2LL, v23);
    return swift_bridgeObjectRelease();
  }

uint64_t sub_1001305E0(uint64_t a1, int a2, void (*a3)(uint64_t), void (*a4)(uint64_t))
{
  uint64_t v5 = v4;
  uint64_t v101 = a4;
  uint64_t v97 = a3;
  int v95 = a2;
  uint64_t v7 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v91 = *(void *)(v7 - 8);
  uint64_t v92 = v7;
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v90 = (char *)&v82 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v89 = (char *)&v82 - v10;
  uint64_t v11 = type metadata accessor for OwnedBeaconRecord(0LL);
  unint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v93 = (uint64_t)&v82 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v102 = (uint64_t)&v82 - v16;
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)&v82 - v17;
  uint64_t v19 = type metadata accessor for ShareRecord(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v22 = (char *)&v82 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v99 = *(void *)(v5 + OBJC_IVAR____TtC12searchpartyd20BeaconManagerService_localPairingMonitor);
  uint64_t v23 = *(void *)(v5 + 256);
  uint64_t v84 = v11;
  uint64_t v24 = *(int *)(v11 + 20);
  uint64_t v100 = a1;
  uint64_t v94 = v23;
  uint64_t v98 = a1 + v24;
  uint64_t v25 = sub_1005777D8();
  uint64_t v26 = v25[2];
  if (v26)
  {
    unint64_t v88 = v12;
    *(void *)&__int128 v96 = v18;
    uint64_t v27 = (uint64_t)v25 + ((*(unsigned __int8 *)(v20 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v20 + 80));
    uint64_t v28 = *(void *)(v20 + 72);
    while (1)
    {
      uint64_t result = sub_10001DC4C(v27, (uint64_t)v22, type metadata accessor for ShareRecord);
      if (!*(void *)(v5 + 40)) {
        break;
      }
      swift_retain();
      sub_1001DD324((uint64_t)v22, (uint64_t)sub_10013C010, 0LL);
      swift_release();
      sub_100018C68((uint64_t)v22, type metadata accessor for ShareRecord);
      v27 += v28;
      if (!--v26)
      {
        swift_bridgeObjectRelease();
        uint64_t v18 = (char *)v96;
        unint64_t v12 = v88;
        goto LABEL_7;
      }
    }

    __break(1u);
  }

  else
  {
    swift_bridgeObjectRelease();
LABEL_7:
    sub_10001DC4C(v100, (uint64_t)v18, type metadata accessor for OwnedBeaconRecord);
    sub_10001DC4C((uint64_t)v18, v102, type metadata accessor for OwnedBeaconRecord);
    uint64_t v30 = *(unsigned __int8 *)(v12 + 80);
    uint64_t v31 = (v30 + 16) & ~v30;
    unint64_t v32 = (v13 + v31 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v33 = (v32 + 23) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v34 = (v33 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v85 = v30 | 7;
    uint64_t v35 = swift_allocObject(&unk_10093FA88, v34 + 8, v30 | 7);
    uint64_t v86 = v31;
    sub_10002218C((uint64_t)v18, v35 + v31, type metadata accessor for OwnedBeaconRecord);
    unint64_t v87 = v32;
    unint64_t v88 = v33;
    uint64_t v36 = (void (**)(uint64_t))(v35 + v32);
    id v37 = v101;
    *uint64_t v36 = v97;
    v36[1] = v37;
    uint64_t v38 = v99;
    *(void *)(v35 + v33) = v99;
    *(void *)(v35 + v34) = v5;
    swift_retain_n(v37, 2LL);
    swift_retain_n(v38, 2LL);
    uint64_t v39 = swift_retain_n(v5, 2LL);
    uint64_t v40 = static os_log_type_t.default.getter(v39);
    if (qword_10099B708 != -1) {
      swift_once(&qword_10099B708, sub_100651168);
    }
    uint64_t v41 = qword_100A2B018;
    uint64_t v83 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v42 = swift_allocObject(v83, 72LL, 7LL);
    __int128 v96 = xmmword_1007E67D0;
    *(_OWORD *)(v42 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v43 = type metadata accessor for UUID(0LL);
    uint64_t v82 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter(v43, v82);
    uint64_t v46 = v45;
    *(void *)(v42 + 56) = &type metadata for String;
    unint64_t v47 = sub_1000226F4();
    *(void *)(v42 + 64) = v47;
    *(void *)(v42 + 32) = v44;
    *(void *)(v42 + 40) = v46;
    os_log(_:dso:log:_:_:)(v40, &_mh_execute_header, v41, "Unpair owned beacon: %@", 23LL, 2LL, v42);
    uint64_t v48 = swift_bridgeObjectRelease();
    uint64_t v49 = v89;
    static SystemInfo.lockState.getter(v48);
    uint64_t v51 = v90;
    uint64_t v50 = v91;
    uint64_t v52 = v92;
    (*(void (**)(char *, void, uint64_t))(v91 + 104))( v90,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v92);
    uint64_t v53 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
    dispatch thunk of RawRepresentable.rawValue.getter(&v104, v52, v53);
    dispatch thunk of RawRepresentable.rawValue.getter(&v103, v52, v53);
    uint64_t v55 = v103;
    uint64_t v54 = v104;
    uint64_t v56 = *(void (**)(char *, uint64_t))(v50 + 8);
    v56(v51, v52);
    uint64_t v57 = ((uint64_t (*)(char *, uint64_t))v56)(v49, v52);
    if (v54 == v55)
    {
      uint64_t v58 = static os_log_type_t.default.getter(v57);
      os_log(_:dso:log:_:_:)( v58,  &_mh_execute_header,  qword_100A2B018,  "unpair call failed because in device is in beforeFirstUnlock state",  66LL,  2LL,  _swiftEmptyArrayStorage);
      unint64_t v59 = sub_1000220F0();
      uint64_t v60 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v59, 0LL, 0LL);
      *uint64_t v61 = 0;
      uint64_t v62 = static os_log_type_t.default.getter(v60);
      if (qword_10099B748 != -1) {
        swift_once(&qword_10099B748, sub_100651480);
      }
      uint64_t v63 = qword_100A2B058;
      uint64_t v64 = swift_allocObject(v83, 72LL, 7LL);
      *(_OWORD *)(v64 + swift_weakDestroy(v0 + 16) = v96;
      uint64_t v65 = dispatch thunk of CustomStringConvertible.description.getter(v43, v82);
      *(void *)(v64 + 56) = &type metadata for String;
      *(void *)(v64 + 64) = v47;
      *(void *)(v64 + 32) = v65;
      *(void *)(v64 + 40) = v66;
      os_log(_:dso:log:_:_:)(v62, &_mh_execute_header, v63, "Unpair for beacon, %@, unsuccessful", 35LL, 2LL, v64);
      swift_bridgeObjectRelease();
      v97(v60);
      swift_errorRelease(v60);
    }

    uint64_t v67 = dispatch_group_create();
    dispatch_group_enter(v67);
    uint64_t v68 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
    uint64_t v69 = *(void *)(v43 - 8);
    uint64_t v70 = *(unsigned __int8 *)(v69 + 80);
    uint64_t v71 = (v70 + 32) & ~v70;
    uint64_t v72 = swift_allocObject(v68, v71 + *(void *)(v69 + 72), v70 | 7);
    *(_OWORD *)(v72 + swift_weakDestroy(v0 + 16) = v96;
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v69 + 16))(v72 + v71, v98, v43);
    uint64_t v73 = swift_allocObject(&unk_10093FAB0, 24LL, 7LL);
    *(void *)(v73 + swift_weakDestroy(v0 + 16) = v67;
    uint64_t v74 = v67;
    uint64_t v75 = v94;
    sub_10047B904(v72, (uint64_t)sub_10014F0B8, v73);
    swift_bridgeObjectRelease();
    swift_release();
    OS_dispatch_group.wait()();
    uint64_t v76 = v100;
    uint64_t v77 = v93;
    sub_10001DC4C(v100, v93, type metadata accessor for OwnedBeaconRecord);
    unint64_t v78 = v88;
    uint64_t v79 = swift_allocObject(&unk_10093FAD8, v88 + 10, v85);
    sub_10002218C(v77, v79 + v86, type metadata accessor for OwnedBeaconRecord);
    uint64_t v80 = (uint64_t (**)(uint64_t))(v79 + v87);
    *uint64_t v80 = sub_10014F0B4;
    v80[1] = (uint64_t (*)(uint64_t))v35;
    unint64_t v81 = v79 + v78;
    *(void *)unint64_t v81 = v75;
    *(_BYTE *)(v81 + 8) = v95 & 1;
    *(_BYTE *)(v81 + 9) = 1;
    swift_retain();
    swift_retain();
    sub_10013F7C0( v76,  (void (*)(void))sub_10014F0C8,  v79,  type metadata accessor for OwnedBeaconRecord,  &qword_10099B610,  (uint64_t)qword_100A2AE80,  (uint64_t)sub_100154730,  (uint64_t)sub_10014F0CC,  (uint64_t)sub_100021ABC,  (uint64_t)&unk_10093FB00,  (uint64_t)sub_10014F0EC,  byte_10093FB28,  (char *)sub_10014F3D4,  (uint64_t)sub_1005D3C50);
    swift_release();
    swift_release();

    sub_100018C68(v102, type metadata accessor for OwnedBeaconRecord);
    swift_release();
    swift_release();
    return swift_release();
  }

  return result;
}