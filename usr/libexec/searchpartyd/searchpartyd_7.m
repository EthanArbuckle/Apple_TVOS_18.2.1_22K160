void sub_1003833E0( uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, char *a6, unint64_t a7, uint64_t a8, double a9, unsigned __int8 a10)
{
  uint64_t v13;
  uint64_t v14;
  uint64_t v15;
  _BYTE *v16;
  uint64_t v17;
  uint64_t v18;
  _BYTE *v19;
  uint64_t v20;
  uint64_t v21;
  _BYTE *v22;
  uint64_t v23;
  uint64_t v24;
  uint64_t v25;
  uint64_t v26;
  uint64_t v27;
  uint64_t v28;
  uint64_t v29;
  uint64_t v30;
  uint64_t v31;
  uint64_t v32;
  unint64_t *v33;
  uint64_t v34;
  uint64_t v35;
  uint64_t v36;
  unint64_t *v37;
  uint64_t Strong;
  char *v39;
  unint64_t v40;
  uint64_t v41;
  uint64_t v42;
  uint64_t v43;
  uint64_t v44;
  os_log_s *v45;
  os_log_type_t v46;
  uint64_t v47;
  uint64_t v48;
  uint64_t v49;
  uint64_t v50;
  uint64_t v51;
  unint64_t v52;
  _BYTE *v53;
  uint64_t v54;
  unint64_t v55;
  uint64_t v56;
  uint64_t v57;
  unint64_t v58;
  os_log_s *v59;
  os_log_type_t v60;
  uint64_t v61;
  uint64_t v62;
  uint64_t v63;
  uint64_t v64;
  uint64_t v65;
  unint64_t v66;
  uint64_t v67;
  unint64_t v68;
  uint64_t v69;
  uint64_t v70;
  unint64_t v71;
  os_log_s *v72;
  os_log_type_t v73;
  uint64_t v74;
  uint64_t v75;
  uint64_t v76;
  uint64_t v77;
  uint64_t v78;
  unint64_t v79;
  uint64_t v80;
  unint64_t v81;
  uint64_t v82;
  uint64_t v83;
  uint64_t v84;
  uint64_t v85;
  void (*v86)(_BYTE *, uint64_t, uint64_t);
  _BYTE *v87;
  _BYTE *v88;
  unint64_t v89;
  uint64_t v90;
  os_log_s *v91;
  os_log_type_t v92;
  int v93;
  uint64_t v94;
  uint64_t v95;
  uint64_t v96;
  uint64_t v97;
  unint64_t v98;
  void (*v99)(_BYTE *, uint64_t);
  _BYTE *v100;
  uint64_t v101;
  unint64_t v102;
  uint64_t v103;
  uint64_t v104;
  char *v105;
  unint64_t v106;
  char v107;
  uint64_t v108;
  uint64_t v109;
  uint64_t v110;
  char *v111;
  _BYTE *v112;
  uint64_t v113;
  os_log_s *v114;
  os_log_type_t v115;
  uint8_t *v116;
  uint64_t v117;
  uint64_t v118;
  uint64_t v119;
  unint64_t v120;
  _BYTE v121[4];
  int v122;
  uint64_t v123;
  uint64_t (*v124)(_BYTE *, uint64_t, uint64_t);
  uint64_t v125;
  char *v126;
  int v127;
  uint64_t v128;
  _BYTE *v129;
  unint64_t v130;
  _BYTE *v131;
  unint64_t v132;
  uint64_t v133;
  _BYTE *v134;
  _BYTE *v135;
  char *v136;
  uint64_t v137;
  _BYTE *v138;
  uint64_t v139;
  uint64_t v140;
  uint64_t v141;
  uint64_t v142[3];
  uint64_t v143;
  _BYTE v144[32];
  v132 = a7;
  v133 = a8;
  v136 = a6;
  v139 = a5;
  v130 = a4;
  v128 = a3;
  v137 = type metadata accessor for UUID(0LL);
  v13 = *(void *)(v137 - 8);
  v14 = __chkstk_darwin(v137);
  v16 = &v121[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  v17 = __chkstk_darwin(v14);
  v19 = &v121[-v18];
  v20 = __chkstk_darwin(v17);
  v22 = &v121[-v21];
  v23 = __chkstk_darwin(v20);
  v129 = &v121[-v24];
  v25 = __chkstk_darwin(v23);
  v134 = &v121[-v26];
  v27 = __chkstk_darwin(v25);
  v131 = &v121[-v28];
  __chkstk_darwin(v27);
  v135 = &v121[-v29];
  v30 = sub_100004AEC(&qword_1009AAE30);
  v31 = __chkstk_darwin(v30);
  v33 = (unint64_t *)&v121[-((v32 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v31);
  v138 = &v121[-v34];
  v35 = sub_100004AEC(&qword_1009AAE90);
  __chkstk_darwin(v35);
  v37 = (unint64_t *)&v121[-((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  a2 += 16LL;
  swift_beginAccess(a2, v144, 0LL, 0LL);
  Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    v39 = (char *)Strong;
    sub_10001581C(a1, (uint64_t)v37, &qword_1009AAE90);
    if (swift_getEnumCaseMultiPayload(v37, v35) == 1)
    {
      v40 = *v37;
      v41 = v13;
      if (*v37 == 3)
      {
        if (qword_10099B330 != -1) {
          swift_once(&qword_10099B330, sub_100374304);
        }
        v42 = type metadata accessor for Logger(0LL);
        sub_10000A720(v42, (uint64_t)qword_100A2A748);
        v43 = v137;
        v44 = (*(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v19, v139, v137);
        v45 = (os_log_s *)Logger.logObject.getter(v44);
        v46 = static os_log_type_t.error.getter(v45);
        if (os_log_type_enabled(v45, v46))
        {
          v47 = swift_slowAlloc(22LL, -1LL);
          v48 = swift_slowAlloc(32LL, -1LL);
          v136 = v39;
          v49 = v48;
          v142[0] = v48;
          *(_DWORD *)v47 = 136446466;
          v50 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          v51 = dispatch thunk of CustomStringConvertible.description.getter(v43, v50);
          v143 = sub_1003F11D4(v51, v52, v142);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v47 + 4, v47 + 12);
          swift_bridgeObjectRelease();
          (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v19, v43);
          *(_WORD *)(v47 + 12) = 2048;
          v143 = *(void *)&a9;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v47 + 14, v47 + 22);
          _os_log_impl( (void *)&_mh_execute_header,  v45,  v46,  "Play sound timed out for %{public}s after %f. CL should have completed by now",  (uint8_t *)v47,  0x16u);
          swift_arrayDestroy(v49, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v49, -1LL, -1LL);
          swift_slowDealloc(v47, -1LL, -1LL);
        }

        else
        {

          (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v19, v43);
        }
      }

      else
      {
        if (qword_10099B330 != -1) {
          swift_once(&qword_10099B330, sub_100374304);
        }
        v69 = type metadata accessor for Logger(0LL);
        sub_10000A720(v69, (uint64_t)qword_100A2A748);
        v70 = v137;
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16))(v16, v139, v137);
        sub_100399234(v40);
        v71 = sub_100399234(v40);
        v72 = (os_log_s *)Logger.logObject.getter(v71);
        v73 = static os_log_type_t.error.getter(v72);
        if (os_log_type_enabled(v72, v73))
        {
          v74 = swift_slowAlloc(22LL, -1LL);
          v136 = v39;
          v75 = v74;
          v76 = swift_slowAlloc(64LL, -1LL);
          v142[0] = v76;
          *(_DWORD *)v75 = 136446466;
          v77 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          v78 = dispatch thunk of CustomStringConvertible.description.getter(v70, v77);
          v143 = sub_1003F11D4(v78, v79, v142);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v75 + 4, v75 + 12);
          swift_bridgeObjectRelease();
          (*(void (**)(_BYTE *, uint64_t))(v41 + 8))(v16, v70);
          *(_WORD *)(v75 + 12) = 2082;
          v143 = v40;
          sub_100399234(v40);
          v80 = String.init<A>(describing:)(&v143, &type metadata for SoundPlaybackManager.SoundPlaybackManagerError);
          v143 = sub_1003F11D4(v80, v81, v142);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v75 + 14, v75 + 22);
          swift_bridgeObjectRelease();
          sub_100399244(v40);
          sub_100399244(v40);
          _os_log_impl( (void *)&_mh_execute_header,  v72,  v73,  "Play sound failed for %{public}s with unexpected error %{public}s",  (uint8_t *)v75,  0x16u);
          swift_arrayDestroy(v76, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v76, -1LL, -1LL);
          swift_slowDealloc(v75, -1LL, -1LL);
        }

        else
        {

          (*(void (**)(_BYTE *, uint64_t))(v13 + 8))(v16, v70);
          sub_100399244(v40);
          sub_100399244(v40);
        }

        sub_100399244(v40);
      }
    }

    else
    {
      v53 = v138;
      sub_100399254((uint64_t)v37, (uint64_t)v138);
      sub_10001581C((uint64_t)v53, (uint64_t)v33, &qword_1009AAE30);
      v54 = v13;
      if (swift_getEnumCaseMultiPayload(v33, v30) == 1)
      {
        v136 = v39;
        v55 = *v33;
        v56 = v137;
        if (qword_10099B330 != -1) {
          swift_once(&qword_10099B330, sub_100374304);
        }
        v57 = type metadata accessor for Logger(0LL);
        sub_10000A720(v57, (uint64_t)qword_100A2A748);
        (*(void (**)(_BYTE *, uint64_t, uint64_t))(v54 + 16))(v22, v139, v56);
        sub_100399234(v55);
        v58 = sub_100399234(v55);
        v59 = (os_log_s *)Logger.logObject.getter(v58);
        v60 = static os_log_type_t.error.getter(v59);
        if (os_log_type_enabled(v59, v60))
        {
          v61 = v54;
          v62 = swift_slowAlloc(22LL, -1LL);
          v63 = swift_slowAlloc(64LL, -1LL);
          v142[0] = v63;
          *(_DWORD *)v62 = 136446466;
          v64 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          v65 = dispatch thunk of CustomStringConvertible.description.getter(v56, v64);
          v143 = sub_1003F11D4(v65, v66, v142);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v62 + 4, v62 + 12);
          swift_bridgeObjectRelease();
          (*(void (**)(_BYTE *, uint64_t))(v61 + 8))(v22, v56);
          *(_WORD *)(v62 + 12) = 2082;
          v143 = v55;
          sub_100399234(v55);
          v67 = String.init<A>(describing:)(&v143, &type metadata for SoundPlaybackManager.SoundPlaybackManagerError);
          v143 = sub_1003F11D4(v67, v68, v142);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v62 + 14, v62 + 22);
          swift_bridgeObjectRelease();
          sub_100399244(v55);
          sub_100399244(v55);
          _os_log_impl( (void *)&_mh_execute_header,  v59,  v60,  "Play sound failed for %{public}s. Error %{public}s",  (uint8_t *)v62,  0x16u);
          swift_arrayDestroy(v63, 2LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v63, -1LL, -1LL);
          swift_slowDealloc(v62, -1LL, -1LL);
        }

        else
        {

          sub_100399244(v55);
          sub_100399244(v55);
          (*(void (**)(_BYTE *, uint64_t))(v54 + 8))(v22, v56);
        }

        sub_100399244(v55);
        sub_100015794((uint64_t)v138, &qword_1009AAE30);
      }

      else
      {
        v126 = v136 + 16;
        v82 = (uint64_t)v135;
        v83 = v137;
        (*(void (**)(_BYTE *, unint64_t *, uint64_t))(v13 + 32))(v135, v33, v137);
        if (qword_10099B330 != -1) {
          swift_once(&qword_10099B330, sub_100374304);
        }
        v127 = a10;
        v84 = type metadata accessor for Logger(0LL);
        v85 = sub_10000A720(v84, (uint64_t)qword_100A2A748);
        v86 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v13 + 16);
        v87 = v131;
        v86(v131, v82, v83);
        v88 = v134;
        v124 = (uint64_t (*)(_BYTE *, uint64_t, uint64_t))v86;
        v86(v134, v139, v83);
        v89 = v130;
        v90 = swift_bridgeObjectRetain_n(v130, 2LL);
        v125 = v85;
        v91 = (os_log_s *)Logger.logObject.getter(v90);
        v92 = static os_log_type_t.default.getter(v91);
        v93 = v92;
        if (os_log_type_enabled(v91, v92))
        {
          v94 = swift_slowAlloc(42LL, -1LL);
          v123 = swift_slowAlloc(96LL, -1LL);
          v142[0] = v123;
          *(_DWORD *)v94 = 136446979;
          v122 = v93;
          swift_bridgeObjectRetain(v89);
          v143 = sub_1003F11D4(v128, v89, v142);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v94 + 4, v94 + 12);
          swift_bridgeObjectRelease_n(v89, 3LL);
          *(_WORD *)(v94 + 12) = 2160;
          v143 = 1752392040LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v94 + 14, v94 + 22);
          *(_WORD *)(v94 + 22) = 2081;
          v95 = v54;
          v96 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          v97 = dispatch thunk of CustomStringConvertible.description.getter(v83, v96);
          v143 = sub_1003F11D4(v97, v98, v142);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v94 + 24, v94 + 32);
          swift_bridgeObjectRelease();
          v99 = *(void (**)(_BYTE *, uint64_t))(v95 + 8);
          v99(v87, v83);
          *(_WORD *)(v94 + 32) = 2082;
          v100 = v134;
          v101 = dispatch thunk of CustomStringConvertible.description.getter(v83, v96);
          v143 = sub_1003F11D4(v101, v102, v142);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v143, v144, v94 + 34, v94 + 42);
          swift_bridgeObjectRelease();
          v99(v100, v83);
          _os_log_impl( (void *)&_mh_execute_header,  v91,  (os_log_type_t)v122,  "%{public}s play sound started for %{private,mask.hash}s. Group: %{public}s",  (uint8_t *)v94,  0x2Au);
          v103 = v123;
          swift_arrayDestroy(v123, 3LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v103, -1LL, -1LL);
          v104 = v94;
          v82 = (uint64_t)v135;
          swift_slowDealloc(v104, -1LL, -1LL);
        }

        else
        {
          swift_bridgeObjectRelease_n(v89, 2LL);
          v99 = *(void (**)(_BYTE *, uint64_t))(v54 + 8);
          v99(v87, v83);
          v99(v88, v83);
        }

        swift_beginAccess(v126, v142, 1LL, 0LL);
        v105 = v136;
        v106 = *((void *)v136 + 2);
        v107 = v136[24];
        *((void *)v136 + 2) = 0LL;
        v105[24] = 0;
        sub_10039A258(v106, v107);
        sub_100384230(v82, v132, a9);
        sub_1001CC778();
        __chkstk_darwin(v108);
        *(void *)&v121[-16] = v82;
        v110 = sub_100549EC8((uint64_t)sub_10039BB8C, (uint64_t)&v121[-32], v109);
        v111 = v39;
        sub_100397878(v110, (uint64_t)v111);
        swift_release();

        if ((v127 & 1) != 0)
        {
          v112 = v129;
          v113 = v124(v129, v139, v83);
          v114 = (os_log_s *)Logger.logObject.getter(v113);
          v115 = static os_log_type_t.default.getter(v114);
          if (os_log_type_enabled(v114, v115))
          {
            v116 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
            v117 = swift_slowAlloc(32LL, -1LL);
            v143 = v117;
            *(_DWORD *)v116 = 136446210;
            v118 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            v119 = dispatch thunk of CustomStringConvertible.description.getter(v83, v118);
            v140 = sub_1003F11D4(v119, v120, &v143);
            v82 = (uint64_t)v135;
            UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, &v141, v116 + 4, v116 + 12);
            swift_bridgeObjectRelease();
            v99(v129, v83);
            _os_log_impl((void *)&_mh_execute_header, v114, v115, "Posting success alert for %{public}s", v116, 0xCu);
            swift_arrayDestroy(v117, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v117, -1LL, -1LL);
            swift_slowDealloc(v116, -1LL, -1LL);
          }

          else
          {
            v99(v112, v83);
          }

          sub_1003857F0(v139, 1);
          sub_100015794((uint64_t)v138, &qword_1009AAE30);
        }

        else
        {
          sub_100015794((uint64_t)v138, &qword_1009AAE30);
        }

        v99((_BYTE *)v82, v83);
      }
    }
  }

uint64_t sub_100384230(uint64_t a1, unint64_t a2, double a3)
{
  uint64_t v4 = v3;
  unint64_t v173 = a2;
  uint64_t v190 = a1;
  uint64_t v187 = type metadata accessor for DispatchTime(0LL);
  uint64_t v185 = *(void *)(v187 - 8);
  uint64_t v6 = __chkstk_darwin(v187);
  v184 = (char *)v159 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  v186 = (char *)v159 - v8;
  uint64_t v9 = sub_100004AEC(&qword_1009A4890);
  __chkstk_darwin(v9);
  uint64_t v182 = (uint64_t)v159 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v180 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v174 = *(void *)(v180 - 8);
  __chkstk_darwin(v180);
  v181 = (char *)v159 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v179 = type metadata accessor for Date(0LL);
  uint64_t v178 = *(void *)(v179 - 8);
  __chkstk_darwin(v179);
  uint64_t v177 = (uint64_t)v159 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v13);
  v172 = (char *)v159 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v171 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v170 = *(void *)(v171 - 8);
  __chkstk_darwin(v171);
  uint64_t v167 = (uint64_t)v159 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100004AEC(&qword_1009A7D38);
  __chkstk_darwin(v16);
  v18 = (char *)v159 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v169 = type metadata accessor for BeaconStatus(0LL);
  __chkstk_darwin(v169);
  uint64_t v168 = (uint64_t)v159 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v188 = type metadata accessor for UUID(0LL);
  uint64_t v20 = *(void *)(v188 - 8);
  uint64_t v21 = __chkstk_darwin(v188);
  v176 = (char *)v159 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = __chkstk_darwin(v21);
  v166 = (char *)v159 - v24;
  __chkstk_darwin(v23);
  v26 = (char *)v159 - v25;
  uint64_t v27 = sub_100004AEC(&qword_10099E488);
  uint64_t v28 = __chkstk_darwin(v27);
  uint64_t v175 = (uint64_t)v159 - ((v29 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v28);
  v31 = (char *)v159 - v30;
  uint64_t v191 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
  uint64_t v32 = *(void *)(v191 - 8);
  __chkstk_darwin(v191);
  uint64_t v189 = (uint64_t)v159 - ((v33 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v34 = type metadata accessor for DispatchPredicate(0LL);
  v35 = *(void **)(v34 - 8);
  __chkstk_darwin(v34);
  v37 = (void *)((char *)v159 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  v38 = *(void **)(v4 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  void *v37 = v38;
  ((void (*)(void *, void, uint64_t))v35[13])(v37, enum case for DispatchPredicate.onQueue(_:), v34);
  id v183 = v38;
  uint64_t v39 = _dispatchPreconditionTest(_:)(v37);
  ((void (*)(void *, uint64_t))v35[1])(v37, v34);
  if ((v39 & 1) == 0)
  {
    __break(1u);
LABEL_63:
    swift_once(&qword_10099B330, sub_100374304);
    goto LABEL_10;
  }

  v35 = (void *)(v4 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators);
  __n128 v40 = swift_beginAccess(v4 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators, v201, 0LL, 0LL);
  uint64_t v41 = *v35;
  if (!*(void *)(*v35 + 16LL))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v32 + 56))(v31, 1LL, 1LL, v191, v40);
    return sub_100015794((uint64_t)v31, &qword_10099E488);
  }

  swift_bridgeObjectRetain(*v35);
  uint64_t v39 = v190;
  unint64_t v42 = sub_10030D124(v190);
  if ((v43 & 1) != 0)
  {
    sub_10001DC4C( *(void *)(v41 + 56) + *(void *)(v32 + 72) * v42,  (uint64_t)v31,  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    uint64_t v44 = 0LL;
  }

  else
  {
    uint64_t v44 = 1LL;
  }

  uint64_t v45 = v191;
  v165 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v32 + 56);
  v165(v31, v44, 1LL, v191);
  swift_bridgeObjectRelease();
  sub_10002218C((uint64_t)v31, v189, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  uint64_t v163 = *(void *)(v4 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_beaconStore);
  sub_100504C28(v39, (uint64_t)v200);
  if (qword_10099B330 != -1) {
    goto LABEL_63;
  }
LABEL_10:
  v161 = v35;
  uint64_t v164 = type metadata accessor for Logger(0LL);
  uint64_t v47 = sub_10000A720(v164, (uint64_t)qword_100A2A748);
  v48 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v20 + 16);
  uint64_t v49 = v39;
  uint64_t v50 = v188;
  uint64_t v51 = v48(v26, v49, v188);
  v159[1] = v47;
  v52 = (os_log_s *)Logger.logObject.getter(v51);
  os_log_type_t v53 = static os_log_type_t.default.getter(v52);
  BOOL v54 = os_log_type_enabled(v52, v53);
  uint64_t v162 = v4;
  if (v54)
  {
    uint64_t v55 = swift_slowAlloc(32LL, -1LL);
    uint64_t v56 = swift_slowAlloc(32LL, -1LL);
    v160 = v48;
    uint64_t v57 = v56;
    uint64_t v197 = v56;
    *(_DWORD *)uint64_t v55 = 141558531;
    *(void *)&__int128 v195 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v195, (char *)&v195 + 8, v55 + 4, v55 + 12);
    *(_WORD *)(v55 + 12) = 2081;
    uint64_t v58 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter(v188, v58);
    *(void *)&__int128 v195 = sub_1003F11D4(v59, v60, &v197);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v195, (char *)&v195 + 8, v55 + 14, v55 + 22);
    swift_bridgeObjectRelease();
    v61 = *(void (**)(char *, uint64_t))(v20 + 8);
    v61(v26, v188);
    *(_WORD *)(v55 + 22) = 2048;
    *(double *)&__int128 v195 = a3;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v195, (char *)&v195 + 8, v55 + 24, v55 + 32);
    _os_log_impl( (void *)&_mh_execute_header,  v52,  v53,  "Play sound running: for %{private,mask.hash}s, timeout: %f.",  (uint8_t *)v55,  0x20u);
    swift_arrayDestroy(v57, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v62 = v57;
    v48 = v160;
    swift_slowDealloc(v62, -1LL, -1LL);
    uint64_t v63 = v55;
    uint64_t v50 = v188;
    swift_slowDealloc(v63, -1LL, -1LL);
  }

  else
  {
    v61 = *(void (**)(char *, uint64_t))(v20 + 8);
    v61(v26, v50);
  }

  sub_10001581C((uint64_t)v200, (uint64_t)&v195, (uint64_t *)&unk_1009A9C40);
  uint64_t v64 = v189;
  if (!v196)
  {
    sub_100015794((uint64_t)&v195, (uint64_t *)&unk_1009A9C40);
    uint64_t v71 = v174;
LABEL_19:
    v72 = (int *)v191;
    *(_BYTE *)(v64 + *(int *)(v191 + 40)) = 0;
    goto LABEL_27;
  }

  uint64_t v65 = v189;
  sub_100012EC0(&v195, (uint64_t)&v197);
  uint64_t v66 = v198;
  uint64_t v67 = v199;
  sub_100012ED8(&v197, v198);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v67 + 120))(v66, v67) & 1) == 0)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v197);
    uint64_t v71 = v174;
    uint64_t v64 = v65;
    goto LABEL_19;
  }

  sub_10050FF80(v190, (uint64_t)v18);
  uint64_t v68 = sub_100004AEC(&qword_1009A7D40);
  uint64_t v64 = v65;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(*(void *)(v68 - 8) + 48LL))(v18, 1LL, v68) == 1)
  {
    v69 = &qword_1009A7D38;
    uint64_t v70 = (uint64_t)v18;
  }

  else
  {
    uint64_t v73 = (uint64_t)v18;
    uint64_t v74 = v168;
    sub_10002218C(v73, v168, type metadata accessor for BeaconStatus);
    char v75 = *(_BYTE *)(v74 + *(int *)(v169 + 20));
    sub_100018C68(v74, type metadata accessor for BeaconStatus);
    unsigned int v76 = sub_100041014(v75 & 0xB);
    sub_100013044((uint64_t)&v197, (uint64_t)&v195);
    uint64_t v77 = sub_100004AEC(&qword_1009B0530);
    uint64_t v78 = (uint64_t)v172;
    uint64_t v79 = v171;
    char v80 = swift_dynamicCast(v172, &v195, v77, v171, 6LL);
    v81 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v170 + 56);
    if ((v80 & 1) != 0)
    {
      v81(v78, 0LL, 1LL, v79);
      uint64_t v82 = v167;
      sub_10002218C(v78, v167, type metadata accessor for OwnedBeaconRecord);
      sub_1005D36FC();
      v72 = (int *)v191;
      if ((v83 & 0x100) != 0)
      {
        sub_100018C68(v82, type metadata accessor for OwnedBeaconRecord);
        uint64_t v71 = v174;
        uint64_t v64 = v65;
      }

      else
      {
        char v84 = v83;
        v85 = (int *)v191;
        v160 = v48;
        uint64_t v86 = v198;
        uint64_t v87 = v199;
        v88 = sub_100012ED8(&v197, v198);
        v89 = sub_10055A04C((uint64_t)v88, (v76 >> 8) & 1, HIWORD(v76) & 1, HIBYTE(v76) & 1, v86, v87);
        BOOL v90 = v89[2] == 2LL && (sub_1004E5A94(2u, (uint64_t)v89) || v84 == 2);
        uint64_t v50 = v188;
        v48 = v160;
        v143 = v166;
        *(_BYTE *)(v65 + v85[10]) = v90;
        v48(v143, v190, v50);
        uint64_t v144 = swift_bridgeObjectRetain_n(v89, 3LL);
        v145 = (os_log_s *)Logger.logObject.getter(v144);
        os_log_type_t v146 = static os_log_type_t.default.getter(v145);
        if (os_log_type_enabled(v145, v146))
        {
          uint64_t v147 = swift_slowAlloc(48LL, -1LL);
          uint64_t v148 = swift_slowAlloc(64LL, -1LL);
          unint64_t v193 = v148;
          *(_DWORD *)uint64_t v147 = 67110147;
          swift_beginAccess(v65, &v195, 0LL, 0LL);
          LODWORD(v192) = *(unsigned __int8 *)(v65 + *(int *)(v191 + 40));
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, (char *)&v192 + 4, v147 + 4, v147 + 8);
          *(_WORD *)(v147 + 8) = 2160;
          uint64_t v192 = 1752392040LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, &v193, v147 + 10, v147 + 18);
          *(_WORD *)(v147 + 18) = 2081;
          uint64_t v149 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v150 = dispatch thunk of CustomStringConvertible.description.getter(v188, v149);
          uint64_t v192 = sub_1003F11D4(v150, v151, (uint64_t *)&v193);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, &v193, v147 + 20, v147 + 28);
          swift_bridgeObjectRelease();
          v61(v143, v188);
          *(_WORD *)(v147 + 28) = 2048;
          uint64_t v152 = v89[2];
          swift_bridgeObjectRelease();
          uint64_t v192 = v152;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, &v193, v147 + 30, v147 + 38);
          swift_bridgeObjectRelease();
          *(_WORD *)(v147 + 38) = 2082;
          swift_bridgeObjectRetain(v89);
          uint64_t v154 = Set.description.getter(v153, &type metadata for UInt8, &protocol witness table for UInt8);
          unint64_t v156 = v155;
          swift_bridgeObjectRelease();
          uint64_t v192 = sub_1003F11D4(v154, v156, (uint64_t *)&v193);
          uint64_t v50 = v188;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v192, &v193, v147 + 40, v147 + 48);
          swift_bridgeObjectRelease_n(v89, 2LL);
          uint64_t v157 = v189;
          swift_bridgeObjectRelease();
          _os_log_impl( (void *)&_mh_execute_header,  v145,  v146,  "Play sound running: airPodPlayingSoundWithBothBudsInCase %{BOOL}d for %{private,mask.hash}s. Nearby Count: % ld, nearby: %{public}s.",  (uint8_t *)v147,  0x30u);
          swift_arrayDestroy(v148, 2LL, (char *)&type metadata for Any + 8);
          v72 = (int *)v191;
          swift_slowDealloc(v148, -1LL, -1LL);
          uint64_t v158 = v147;
          v48 = v160;
          swift_slowDealloc(v158, -1LL, -1LL);

          uint64_t v64 = v157;
          sub_100018C68(v167, type metadata accessor for OwnedBeaconRecord);
          uint64_t v71 = v174;
        }

        else
        {

          swift_bridgeObjectRelease_n(v89, 4LL);
          v61(v143, v50);
          sub_100018C68(v167, type metadata accessor for OwnedBeaconRecord);
          uint64_t v71 = v174;
          v72 = v85;
          uint64_t v64 = v65;
        }
      }

      goto LABEL_26;
    }

    v81(v78, 1LL, 1LL, v79);
    v69 = (uint64_t *)&unk_1009A9C30;
    uint64_t v70 = v78;
  }

  sub_100015794(v70, v69);
  v72 = (int *)v191;
  uint64_t v71 = v174;
LABEL_26:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v197);
LABEL_27:
  uint64_t v91 = v190;
  swift_beginAccess(v64, &v197, 33LL, 0LL);
  *(_BYTE *)(v64 + v72[6]) = 2;
  uint64_t v92 = v177;
  static Date.trustedNow.getter(v177);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v178 + 40))(v64 + v72[8], v92, v179);
  swift_endAccess(&v197);
  uint64_t v93 = (uint64_t)v176;
  v48(v176, v91, v50);
  uint64_t v94 = v64;
  uint64_t v95 = v175;
  sub_10001DC4C(v94, v175, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  v165((char *)v95, 0LL, 1LL, (uint64_t)v72);
  swift_beginAccess(v161, &v197, 33LL, 0LL);
  sub_1000451A8(v95, v93);
  swift_endAccess(&v197);
  if (qword_10099B300 != -1) {
    swift_once(&qword_10099B300, sub_1003459EC);
  }
  uint64_t v96 = qword_100A2A6C8;
  uint64_t v97 = (uint64_t)v181;
  v48(v181, v91, v50);
  uint64_t v98 = v180;
  static Date.trustedNow.getter(v97 + *(int *)(v180 + 20));
  *(_BYTE *)(v97 + *(int *)(v98 + 24)) = 25;
  uint64_t v99 = sub_100004AEC(&qword_10099D318);
  uint64_t v100 = *(unsigned __int8 *)(v71 + 80);
  uint64_t v101 = (v100 + 32) & ~v100;
  uint64_t v102 = swift_allocObject(v99, v101 + *(void *)(v71 + 72), v100 | 7);
  *(_OWORD *)(v102 + 16) = xmmword_1007E67D0;
  sub_10001DC4C(v97, v102 + v101, type metadata accessor for BeaconObservation);
  uint64_t v103 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v103);
  v159[-4] = v96;
  v159[-3] = v102;
  v159[-2] = 0LL;
  v159[-1] = 0LL;
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.BeaconObservationStore.save",  57LL,  2LL,  sub_1002DDE58);
  swift_bridgeObjectRelease();
  sub_100018C68(v97, type metadata accessor for BeaconObservation);
  uint64_t v104 = v182;
  sub_10050BDEC(v91, v182);
  uint64_t v105 = type metadata accessor for WildModeAssociationRecord(0LL);
  LODWORD(v102) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v105 - 8) + 48LL))(v104, 1LL, v105);
  sub_100015794(v104, &qword_1009A4890);
  if ((_DWORD)v102 == 1) {
    sub_1004E696C(0xAu);
  }
  else {
    sub_1004E97E0();
  }
  char v106 = sub_10037E2F0(v91);
  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  uint64_t v198 = My;
  uint64_t v199 = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  v108 = sub_10000A7C8(&v197);
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v108,  enum case for Feature.FindMy.spPlaySoundAll(_:),  My);
  LOBYTE(My) = isFeatureEnabled(_:)(&v197);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v197);
  if ((My & 1) == 0 || (v106 & 1) != 0) {
    goto LABEL_52;
  }
  if (v173 > 5)
  {
    if (qword_10099B340 != -1) {
      swift_once(&qword_10099B340, sub_10037453C);
    }
    uint64_t v120 = sub_10000A720(v164, (uint64_t)qword_1009AACC8);
    v121 = (os_log_s *)Logger.logObject.getter(v120);
    os_log_type_t v122 = static os_log_type_t.error.getter(v121);
    if (os_log_type_enabled(v121, v122))
    {
      uint64_t v123 = swift_slowAlloc(22LL, -1LL);
      uint64_t v124 = swift_slowAlloc(32LL, -1LL);
      uint64_t v197 = v124;
      *(_DWORD *)uint64_t v123 = 136315394;
      unint64_t v193 = sub_1003F11D4(0xD000000000000029LL, 0x800000010085F940LL, &v197);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194, v123 + 4, v123 + 12);
      *(_WORD *)(v123 + 12) = 2048;
      unint64_t v193 = v173;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v193, v194, v123 + 14, v123 + 22);
      _os_log_impl( (void *)&_mh_execute_header,  v121,  v122,  "%s Unexpected play sound context %ld!",  (uint8_t *)v123,  0x16u);
      swift_arrayDestroy(v124, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v124, -1LL, -1LL);
      swift_slowDealloc(v123, -1LL, -1LL);
    }

    sub_10001581C((uint64_t)v200, (uint64_t)&v197, (uint64_t *)&unk_1009A9C40);
    uint64_t v125 = v198;
    if (v198)
    {
      uint64_t v126 = v199;
      sub_100012ED8(&v197, v198);
      v111 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v126 + 176))(v125, v126);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v197);
      v112 = (void *)SPBeaconTypeHele;
      uint64_t v113 = static String._unconditionallyBridgeFromObjectiveC(_:)(v111);
      uint64_t v115 = v127;
      uint64_t v117 = static String._unconditionallyBridgeFromObjectiveC(_:)(v112);
      uint64_t v118 = v128;
      if (v113 == v117 && v115 == v128) {
        goto LABEL_39;
      }
      goto LABEL_48;
    }

uint64_t sub_1003857F0(uint64_t a1, int a2)
{
  int v47 = a2;
  uint64_t v46 = type metadata accessor for PlaySoundUserNotification(0LL);
  __chkstk_darwin(v46);
  uint64_t v4 = (char *)&v40 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for LocalizationUtility.Table(0LL);
  uint64_t v42 = *(void *)(v5 - 8);
  uint64_t v43 = v5;
  __chkstk_darwin(v5);
  uint64_t v41 = (char *)&v40 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v45 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v10 = *(void *)(v45 - 8);
  __chkstk_darwin(v45);
  uint64_t v44 = (uint64_t)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009A4890);
  __chkstk_darwin(v12);
  uint64_t v14 = (char *)&v40 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  v18 = (char *)&v40 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10050BDEC(a1, (uint64_t)v14);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v16 + 48))(v14, 1LL, v15) == 1)
  {
    sub_100015794((uint64_t)v14, &qword_1009A4890);
    sub_10050F124(a1, (uint64_t)v9);
    uint64_t v19 = v45;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v9, 1LL, v45) == 1)
    {
      sub_100015794((uint64_t)v9, &qword_1009AA830);
      uint64_t v20 = a1;
      uint64_t v21 = sub_1004F0010(a1);
      if (v22)
      {
        uint64_t v23 = v21;
        uint64_t v24 = v22;
      }

      else
      {
        uint64_t v30 = v41;
        uint64_t v29 = v42;
        uint64_t v31 = v43;
        (*(void (**)(char *, void, uint64_t))(v42 + 104))( v41,  enum case for LocalizationUtility.Table.default(_:),  v43);
        uint64_t v23 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000029LL, 0x8000000100854150LL, v30);
        uint64_t v24 = v32;
        (*(void (**)(char *, uint64_t))(v29 + 8))(v30, v31);
      }
    }

    else
    {
      uint64_t v20 = a1;
      uint64_t v27 = v44;
      sub_10002218C((uint64_t)v9, v44, type metadata accessor for OwnedBeaconGroup);
      uint64_t v28 = (uint64_t *)(v27 + *(int *)(v19 + 36));
      uint64_t v23 = *v28;
      uint64_t v24 = v28[1];
      swift_bridgeObjectRetain(v24);
      sub_100018C68(v27, type metadata accessor for OwnedBeaconGroup);
    }

    char v26 = 0x80;
  }

  else
  {
    uint64_t v20 = a1;
    sub_10002218C((uint64_t)v14, (uint64_t)v18, type metadata accessor for WildModeAssociationRecord);
    uint64_t v23 = sub_1000E5600();
    uint64_t v24 = v25;
    sub_100018C68((uint64_t)v18, type metadata accessor for WildModeAssociationRecord);
    char v26 = -127;
  }

  char v33 = v47;
  uint64_t v34 = v46;
  v35 = &v4[*(int *)(v46 + 36)];
  uint64_t v36 = type metadata accessor for UUID(0LL);
  uint64_t v37 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v36 - 8) + 16LL))(v35, v20, v36);
  *uint64_t v4 = 1;
  v4[1] = v26;
  UUID.init()(v37);
  v38 = (uint64_t *)&v4[*(int *)(v34 + 28)];
  uint64_t *v38 = v23;
  v38[1] = v24;
  v4[*(int *)(v34 + 32)] = v33 & 1;
  if (qword_10099B640 != -1) {
    swift_once(&qword_10099B640, sub_1005E6BFC);
  }
  sub_1006EE25C((uint64_t)v4, 0LL, 0LL);
  return sub_100018C68((uint64_t)v4, type metadata accessor for PlaySoundUserNotification);
}

uint64_t sub_100385BBC(uint64_t a1, void *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v209 = a5;
  uint64_t v208 = a4;
  uint64_t v10 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v10);
  v216 = &v195[-((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v218 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v218);
  v217 = &v195[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v234 = type metadata accessor for Date(0LL);
  uint64_t v236 = *(void *)(v234 - 8);
  __chkstk_darwin(v234);
  v235 = &v195[-((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v228 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v227 = *(void *)(v228 - 8);
  __chkstk_darwin(v228);
  v226 = &v195[-((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v204 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v203 = *(void *)(v204 - 8);
  __chkstk_darwin(v204);
  v202 = &v195[-((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v212 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v16 = *(void *)(v212 - 8);
  __chkstk_darwin(v212);
  v210 = &v195[-((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v207 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v206 = *(void *)(v207 - 8);
  __chkstk_darwin(v207);
  v205 = &v195[-((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v19 = sub_100004AEC(&qword_10099E488);
  __chkstk_darwin(v19);
  v237 = &v195[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  int64_t v223 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
  uint64_t v222 = *(void *)(v223 - 8);
  uint64_t v21 = __chkstk_darwin(v223);
  v200 = &v195[-((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v21);
  v221 = &v195[-v23];
  uint64_t v24 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v25 = __chkstk_darwin(v24);
  v229 = &v195[-((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v25);
  v224 = &v195[-v27];
  uint64_t v28 = type metadata accessor for UUID(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  uint64_t v30 = __chkstk_darwin(v28);
  v238 = &v195[-((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v32 = __chkstk_darwin(v30);
  v232 = &v195[-v33];
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v199 = &v195[-v35];
  uint64_t v36 = __chkstk_darwin(v34);
  v233 = &v195[-v37];
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v40 = &v195[-v39];
  uint64_t v41 = __chkstk_darwin(v38);
  uint64_t v43 = &v195[-v42];
  __chkstk_darwin(v41);
  uint64_t v45 = &v195[-v44];
  uint64_t v46 = a1 + *(int *)(type metadata accessor for OwnedBeaconGroup(0LL) + 24);
  uint64_t v230 = v29;
  int v47 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v29 + 16);
  v47(v45, v46, v28);
  uint64_t v215 = a1;
  sub_1001CC778();
  uint64_t v49 = v48;
  uint64_t v50 = a2;
  sub_100398690(v49, (uint64_t)v50);
  LODWORD(v225) = v51;
  swift_bridgeObjectRelease();
  v213 = v50;

  if (qword_10099B330 != -1) {
    swift_once(&qword_10099B330, sub_100374304);
  }
  uint64_t v52 = type metadata accessor for Logger(0LL);
  uint64_t v53 = sub_10000A720(v52, (uint64_t)qword_100A2A748);
  v47(v43, (uint64_t)v45, v28);
  v231 = (void (*)(_BYTE *, _BYTE *, uint64_t))v47;
  uint64_t v54 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v47)(v40, a3, v28);
  uint64_t v198 = v53;
  uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
  os_log_type_t v56 = static os_log_type_t.default.getter(v55);
  int v57 = v56;
  BOOL v58 = os_log_type_enabled(v55, v56);
  uint64_t v220 = v28;
  uint64_t v211 = v16;
  v214 = v45;
  uint64_t v201 = a3;
  if (v58)
  {
    uint64_t v59 = swift_slowAlloc(32LL, -1LL);
    uint64_t v197 = swift_slowAlloc(64LL, -1LL);
    double aBlock = *(double *)&v197;
    *(_DWORD *)uint64_t v59 = 136315650;
    uint64_t v60 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    int v196 = v57;
    uint64_t v61 = v60;
    uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter(v220, v60);
    uint64_t v240 = sub_1003F11D4(v62, v63, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v240, v241, v59 + 4, v59 + 12);
    swift_bridgeObjectRelease();
    uint64_t v64 = v230;
    uint64_t v65 = *(void (**)(_BYTE *, uint64_t))(v230 + 8);
    v65(v43, v220);
    *(_WORD *)(v59 + 12) = 2048;
    uint64_t v240 = *(void *)&a6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v240, v241, v59 + 14, v59 + 22);
    *(_WORD *)(v59 + 22) = 2080;
    uint64_t v66 = v61;
    uint64_t v45 = v214;
    uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter(v220, v66);
    uint64_t v240 = sub_1003F11D4(v67, v68, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v240, v241, v59 + 24, v59 + 32);
    swift_bridgeObjectRelease();
    v219 = (void (*)(void, void))v65;
    v65(v40, v220);
    _os_log_impl( (void *)&_mh_execute_header,  v55,  (os_log_type_t)v196,  "Stop sound %s timeout %f. CommandId %s",  (uint8_t *)v59,  0x20u);
    uint64_t v69 = v197;
    swift_arrayDestroy(v197, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v69, -1LL, -1LL);
    uint64_t v70 = v59;
    uint64_t v28 = v220;
    swift_slowDealloc(v70, -1LL, -1LL);
  }

  else
  {
    uint64_t v64 = v230;
    uint64_t v71 = *(void (**)(_BYTE *, uint64_t))(v230 + 8);
    v71(v43, v28);
    v219 = (void (*)(void, void))v71;
    v71(v40, v28);
  }

  uint64_t v72 = (uint64_t)v233;
  uint64_t v73 = v232;
  uint64_t v74 = (uint64_t)v237;
  if ((v225 & 1) == 0) {
    goto LABEL_9;
  }
  sub_1001CC778();
  char v75 = v224;
  sub_1006F2C58(v76, (uint64_t)v224);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v64 + 48))(v75, 1LL, v28) == 1)
  {
    sub_100015794((uint64_t)v75, &qword_10099D8A0);
LABEL_9:
    uint64_t v77 = v219;
    goto LABEL_10;
  }

  (*(void (**)(uint64_t, _BYTE *, uint64_t))(v64 + 32))(v72, v75, v28);
  uint64_t v150 = &v213[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators];
  __n128 v151 = swift_beginAccess(&v213[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators], v239, 0LL, 0LL);
  uint64_t v152 = *(void *)v150;
  if (*(void *)(v152 + 16))
  {
    swift_bridgeObjectRetain(v152);
    unint64_t v153 = sub_10030D124(v72);
    if ((v154 & 1) != 0)
    {
      uint64_t v155 = v222;
      sub_10001DC4C( *(void *)(v152 + 56) + *(void *)(v222 + 72) * v153,  v74,  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      uint64_t v156 = v155;
      uint64_t v157 = 0LL;
    }

    else
    {
      uint64_t v157 = 1LL;
      uint64_t v156 = v222;
    }

    int64_t v158 = v223;
    uint64_t v159 = v156;
    (*(void (**)(uint64_t, uint64_t, uint64_t, int64_t))(v156 + 56))(v74, v157, 1LL, v223);
    int64_t v160 = v158;
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, int64_t))(v159 + 48))(v74, 1LL, v158) != 1)
    {
      uint64_t v162 = v221;
      sub_10002218C(v74, (uint64_t)v221, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      if (v162[*(int *)(v160 + 24)] == 4)
      {
        uint64_t v163 = v72;
        uint64_t v164 = v199;
        v231(v199, v45, v28);
        v165 = v200;
        uint64_t v166 = sub_10001DC4C( (uint64_t)v162,  (uint64_t)v200,  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
        uint64_t v167 = (os_log_s *)Logger.logObject.getter(v166);
        os_log_type_t v168 = static os_log_type_t.error.getter(v167);
        if (os_log_type_enabled(v167, v168))
        {
          uint64_t v169 = swift_slowAlloc(22LL, -1LL);
          double aBlock = COERCE_DOUBLE(swift_slowAlloc(64LL, -1LL));
          *(_DWORD *)uint64_t v169 = 136315394;
          uint64_t v170 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v171 = dispatch thunk of CustomStringConvertible.description.getter(v28, v170);
          uint64_t v240 = sub_1003F11D4(v171, v172, (uint64_t *)&aBlock);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v240, v241, v169 + 4, v169 + 12);
          swift_bridgeObjectRelease();
          v219(v164, v28);
          *(_WORD *)(v169 + 12) = 2080;
          __asm { BR              X10 }
        }

        uint64_t v177 = v219;
        v219(v164, v28);
        sub_100018C68((uint64_t)v165, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);

        uint64_t v178 = v28;
        uint64_t v179 = v163;
        sub_100004AB0();
        uint64_t v180 = v206;
        v181 = v205;
        uint64_t v182 = v207;
        (*(void (**)(_BYTE *, void, uint64_t))(v206 + 104))( v205,  enum case for DispatchQoS.QoSClass.default(_:),  v207);
        id v183 = (void *)static OS_dispatch_queue.global(qos:)(v181);
        (*(void (**)(_BYTE *, uint64_t))(v180 + 8))(v181, v182);
        uint64_t v184 = swift_allocObject(&unk_1009547C8, 32LL, 7LL);
        uint64_t v185 = v209;
        *(void *)(v184 + 16) = v208;
        *(void *)(v184 + 24) = v185;
        uint64_t v248 = (uint64_t)sub_10039BBA4;
        uint64_t v249 = v184;
        double aBlock = COERCE_DOUBLE(_NSConcreteStackBlock);
        uint64_t v245 = 1107296256LL;
        v246 = sub_1001C31E8;
        v247 = &unk_1009547E0;
        v186 = _Block_copy(&aBlock);
        uint64_t v187 = swift_retain();
        uint64_t v188 = v210;
        static DispatchQoS.unspecified.getter(v187);
        uint64_t v240 = (uint64_t)_swiftEmptyArrayStorage;
        uint64_t v189 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
        uint64_t v190 = sub_100004AEC((uint64_t *)&unk_1009AB860);
        uint64_t v191 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
        uint64_t v192 = v202;
        uint64_t v193 = v190;
        uint64_t v194 = v204;
        dispatch thunk of SetAlgebra.init<A>(_:)(&v240, v193, v191, v204, v189);
        OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v188, v192, v186);
        _Block_release(v186);

        (*(void (**)(_BYTE *, uint64_t))(v203 + 8))(v192, v194);
        (*(void (**)(_BYTE *, uint64_t))(v211 + 8))(v188, v212);
        sub_100018C68((uint64_t)v221, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
        v177(v179, v178);
        v177((uint64_t)v214, v178);
        return swift_release();
      }

      sub_1001CC778();
      uint64_t v174 = v173;
      uint64_t v175 = v213;
      sub_100397878(v174, (uint64_t)v175);
      swift_bridgeObjectRelease();

      uint64_t v73 = v232;
      sub_100018C68((uint64_t)v162, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      uint64_t v176 = v72;
      uint64_t v77 = v219;
      v219(v176, v28);
      goto LABEL_10;
    }
  }

  else
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, int64_t, __n128))(v222 + 56))(v74, 1LL, 1LL, v223, v151);
  }

  uint64_t v161 = v72;
  uint64_t v77 = v219;
  v219(v161, v28);
  sub_100015794(v74, &qword_10099E488);
LABEL_10:
  sub_1001CC778();
  uint64_t v79 = *(void *)(v78 + 56);
  uint64_t v222 = v78 + 56;
  uint64_t v80 = 1LL << *(_BYTE *)(v78 + 32);
  uint64_t v81 = -1LL;
  if (v80 < 64) {
    uint64_t v81 = ~(-1LL << v80);
  }
  unint64_t v82 = v81 & v79;
  int64_t v223 = (unint64_t)(v80 + 63) >> 6;
  LODWORD(v224) = enum case for Feature.FindMy.trustedNowUsesReferenceClock(_:);
  v233 = (_BYTE *)v78;
  swift_bridgeObjectRetain(v78);
  int64_t v83 = 0LL;
  v221 = (char *)&type metadata for () + 8;
  __int128 v225 = xmmword_1007E67D0;
  while (1)
  {
    uint64_t v93 = v231;
    uint64_t v94 = v229;
    if (v82)
    {
      unint64_t v95 = __clz(__rbit64(v82));
      v82 &= v82 - 1;
      unint64_t v96 = v95 | (v83 << 6);
      uint64_t v97 = v236;
      goto LABEL_32;
    }

    BOOL v98 = __OFADD__(v83++, 1LL);
    uint64_t v97 = v236;
    if (v98)
    {
      __break(1u);
      JUMPOUT(0x100387218LL);
    }

    if (v83 >= v223) {
      goto LABEL_64;
    }
    unint64_t v99 = *(void *)(v222 + 8 * v83);
    if (!v99) {
      break;
    }
LABEL_31:
    unint64_t v82 = (v99 - 1) & v99;
    unint64_t v96 = __clz(__rbit64(v99)) + (v83 << 6);
LABEL_32:
    v231(v229, (_BYTE *)(*((void *)v233 + 6) + *(void *)(v64 + 72) * v96), v28);
    (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v64 + 56))(v94, 0LL, 1LL, v28);
    if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v64 + 48))(v94, 1LL, v28) == 1)
    {
      swift_release();
      swift_bridgeObjectRelease();
      uint64_t v131 = v204;
      uint64_t v132 = v203;
      os_log_type_t v133 = v202;
      goto LABEL_65;
    }

    uint64_t v101 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v64 + 32);
    v101(v73, v94, v28);
    if (qword_10099B300 != -1) {
      swift_once(&qword_10099B300, sub_1003459EC);
    }
    v237 = (_BYTE *)qword_100A2A6C8;
    v93(v238, v73, v28);
    if (qword_10099B6A0 != -1) {
      swift_once(&qword_10099B6A0, sub_100626B90);
    }
    double aBlock = 7.45683732e247;
    *(double *)&uint64_t v245 = -5.98008217e197;
    SynchronousCache.cachedValue<A>(key:computeBlock:)(&v243, &aBlock, sub_10000A71C, 0LL, &type metadata for Bool);
    swift_bridgeObjectRelease();
    uint64_t v102 = (void *)&unk_1009B8000;
    if (v243 == 1)
    {
      id v103 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
      unsigned int v104 = [v103 isInternalBuild];

      if (v104)
      {
        uint64_t v105 = v77;
        if (qword_10099B020 != -1) {
          swift_once(&qword_10099B020, sub_10000A320);
        }
        uint64_t v106 = sub_10000A720(v218, (uint64_t)qword_10099C630);
        swift_beginAccess(v106, &v240, 0LL, 0LL);
        v107 = v217;
        sub_10001581C(v106, (uint64_t)v217, (uint64_t *)&unk_10099D720);
        uint64_t v85 = v234;
        if ((*(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v97 + 48))(v107, 1LL, v234) != 1)
        {
          char v84 = v235;
          (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v97 + 32))(v235, v107, v85);
          uint64_t v77 = v105;
          goto LABEL_14;
        }

        sub_100015794((uint64_t)v107, (uint64_t *)&unk_10099D720);
        uint64_t v77 = v105;
        uint64_t v102 = &unk_1009B8000;
      }
    }

    uint64_t My = type metadata accessor for Feature.FindMy(0LL);
    v247 = (void *)My;
    uint64_t v248 = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
    uint64_t v109 = sub_10000A7C8(&aBlock);
    (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))(v109, v224, My);
    LOBYTE(My) = isFeatureEnabled(_:)(&aBlock);
    uint64_t v110 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
    if ((My & 1) == 0)
    {
      char v84 = v235;
      Date.init()(v110);
      uint64_t v85 = v234;
      goto LABEL_14;
    }

    sub_10063090C();
    double Current = CFAbsoluteTimeGetCurrent();
    char v84 = v235;
    if (qword_10099B6B0 != -1) {
      swift_once(&qword_10099B6B0, sub_1006307C8);
    }
    uint64_t v112 = v102[490];
    uint64_t v113 = sub_100004AEC(&qword_10099CA88);
    uint64_t v114 = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_100015878, 0LL, v112, v221, v113);
    if (Current - aBlock - *(double *)&v245 > 86400.0)
    {
      OSAllocatedUnfairLock.callAsFunction<A>(_:)( sub_10001588C,  0LL,  v102[490],  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
      uint64_t v115 = type metadata accessor for TaskPriority(0LL);
      uint64_t v116 = *(void *)(v115 - 8);
      uint64_t v117 = (uint64_t)v216;
      (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v116 + 56))(v216, 1LL, 1LL, v115);
      uint64_t v118 = swift_allocObject(&unk_100954778, 32LL, 7LL);
      *(void *)(v118 + 16) = 0LL;
      id v119 = (uint64_t *)(v118 + 16);
      *(void *)(v118 + 24) = 0LL;
      uint64_t v120 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v116 + 48))(v117, 1LL, v115);
      if ((_DWORD)v120 == 1)
      {
        sub_100015794(v117, &qword_1009A9BF0);
        uint64_t v121 = 0LL;
        uint64_t v122 = *v119;
        if (*v119) {
          goto LABEL_49;
        }
LABEL_53:
        uint64_t v125 = 0LL;
        uint64_t v127 = 0LL;
      }

      else
      {
        unsigned __int8 v128 = TaskPriority.rawValue.getter(v120);
        (*(void (**)(uint64_t, uint64_t))(v116 + 8))(v117, v115);
        uint64_t v121 = v128;
        uint64_t v122 = *v119;
        if (!*v119) {
          goto LABEL_53;
        }
LABEL_49:
        uint64_t v123 = *(void *)(v118 + 24);
        uint64_t ObjectType = swift_getObjectType(v122);
        swift_unknownObjectRetain(v122);
        uint64_t v125 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v123);
        uint64_t v127 = v126;
        swift_unknownObjectRelease(v122);
      }

      uint64_t v85 = v234;
      uint64_t v129 = swift_allocObject(&unk_1009547A0, 32LL, 7LL);
      *(void *)(v129 + 16) = &unk_10099CA90;
      *(void *)(v129 + 24) = v118;
      if (v127 | v125)
      {
        v242[0] = 0LL;
        v242[1] = 0LL;
        id v130 = v242;
        v242[2] = v125;
        v242[3] = v127;
      }

      else
      {
        id v130 = 0LL;
      }

      uint64_t v28 = v220;
      uint64_t v97 = v236;
      char v84 = v235;
      swift_task_create(v121 | 0x1C00, v130, (char *)&type metadata for () + 8, &unk_1009AB890, v129);
      uint64_t v114 = swift_release();
      uint64_t v77 = v219;
      goto LABEL_58;
    }

    uint64_t v85 = v234;
LABEL_58:
    Date.init(timeIntervalSinceReferenceDate:)(v114);
LABEL_14:
    uint64_t v86 = (uint64_t)v226;
    v101(v226, v238, v28);
    uint64_t v87 = v228;
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(v97 + 32))(v86 + *(int *)(v228 + 20), v84, v85);
    *(_BYTE *)(v86 + *(int *)(v87 + 24)) = 26;
    uint64_t v88 = sub_100004AEC(&qword_10099D318);
    uint64_t v89 = *(unsigned __int8 *)(v227 + 80);
    uint64_t v90 = (v89 + 32) & ~v89;
    uint64_t v91 = swift_allocObject(v88, v90 + *(void *)(v227 + 72), v89 | 7);
    *(_OWORD *)(v91 + 16) = v225;
    sub_10001DC4C(v86, v91 + v90, type metadata accessor for BeaconObservation);
    uint64_t v92 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v92);
    *(void *)&v195[-32] = v237;
    *(void *)&v195[-24] = v91;
    *(void *)&v195[-16] = 0LL;
    *(void *)&v195[-8] = 0LL;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.BeaconObservationStore.save",  57LL,  2LL,  sub_1000DF788);
    swift_bridgeObjectRelease();
    sub_100018C68(v86, type metadata accessor for BeaconObservation);
    uint64_t v73 = v232;
    v77(v232, v28);
    uint64_t v64 = v230;
  }

  int64_t v100 = v83 + 1;
  if (v83 + 1 >= v223) {
    goto LABEL_64;
  }
  unint64_t v99 = *(void *)(v222 + 8 * v100);
  if (v99) {
    goto LABEL_30;
  }
  int64_t v100 = v83 + 2;
  if (v83 + 2 >= v223) {
    goto LABEL_64;
  }
  unint64_t v99 = *(void *)(v222 + 8 * v100);
  if (v99) {
    goto LABEL_30;
  }
  int64_t v100 = v83 + 3;
  if (v83 + 3 >= v223) {
    goto LABEL_64;
  }
  unint64_t v99 = *(void *)(v222 + 8 * v100);
  if (v99) {
    goto LABEL_30;
  }
  int64_t v100 = v83 + 4;
  if (v83 + 4 >= v223) {
    goto LABEL_64;
  }
  unint64_t v99 = *(void *)(v222 + 8 * v100);
  if (v99) {
    goto LABEL_30;
  }
  int64_t v100 = v83 + 5;
  if (v83 + 5 >= v223) {
    goto LABEL_64;
  }
  unint64_t v99 = *(void *)(v222 + 8 * v100);
  if (v99)
  {
LABEL_30:
    int64_t v83 = v100;
    goto LABEL_31;
  }

  while (1)
  {
    int64_t v83 = v100 + 1;
    if (__OFADD__(v100, 1LL))
    {
      __break(1u);
      JUMPOUT(0x100387564LL);
    }

    if (v83 >= v223) {
      break;
    }
    unint64_t v99 = *(void *)(v222 + 8 * v83);
    ++v100;
    if (v99) {
      goto LABEL_31;
    }
  }

uint64_t sub_100387580(uint64_t a1, uint64_t a2, char *a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v138 = a4;
  uint64_t v129 = a5;
  uint64_t v134 = a1;
  uint64_t v9 = sub_100004AEC(&qword_1009AADF0);
  unint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v104 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_1009AADF8);
  uint64_t v137 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v104 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v124 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v126 = v17;
  uint64_t v132 = (uint64_t)&v104 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v128 = type metadata accessor for UUID(0LL);
  uint64_t v125 = *(void *)(v128 - 8);
  __chkstk_darwin(v128);
  uint64_t v120 = v18;
  uint64_t v131 = (char *)&v104 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = sub_100004AEC(&qword_1009B0670);
  __chkstk_darwin(v19);
  id v119 = (char *)&v104 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0LL);
  uint64_t v110 = *(void *)(v21 - 8);
  __chkstk_darwin(v21);
  v108 = (char *)&v104 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v106 = sub_100004AEC(&qword_1009AAE00);
  uint64_t v105 = *(void *)(v106 - 8);
  __chkstk_darwin(v106);
  unsigned int v104 = (char *)&v104 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v111 = sub_100004AEC(&qword_1009AAE08);
  uint64_t v109 = *(void *)(v111 - 8);
  __chkstk_darwin(v111);
  v107 = (char *)&v104 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v115 = sub_100004AEC(&qword_1009AAE10);
  uint64_t v114 = *(void *)(v115 - 8);
  __chkstk_darwin(v115);
  uint64_t v113 = (char *)&v104 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v118 = sub_100004AEC(&qword_1009AAE18);
  uint64_t v117 = *(void *)(v118 - 8);
  __chkstk_darwin(v118);
  uint64_t v116 = (char *)&v104 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v123 = sub_100004AEC(&qword_1009AAE20);
  uint64_t v122 = *(void *)(v123 - 8);
  __chkstk_darwin(v123);
  uint64_t v127 = (char *)&v104 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = _swiftEmptyArrayStorage;
  uint64_t v146 = _swiftEmptyArrayStorage;
  uint64_t v130 = a2;
  sub_1001CC778();
  uint64_t v141 = &v146;
  uint64_t v142 = a3;
  os_log_type_t v133 = a3;
  uint64_t v29 = v139;
  uint64_t v143 = v138;
  sub_1002188CC((void (*)(char *))sub_100398E34, (uint64_t)v140, v30);
  uint64_t v121 = v29;
  uint64_t v31 = swift_bridgeObjectRelease();
  uint64_t v139 = (uint64_t)v146;
  uint64_t v138 = v146[2];
  uint64_t v112 = v21;
  if (v138)
  {
    uint64_t v145 = _swiftEmptyArrayStorage;
    swift_bridgeObjectRetain(v139);
    specialized ContiguousArray.reserveCapacity(_:)(v138);
    uint64_t v32 = sub_1000372EC( &qword_1009AAE38,  &qword_1009AAE28,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    unint64_t v135 = v10;
    uint64_t v136 = v32;
    uint64_t v33 = 0LL;
    uint64_t v34 = v9;
    do
    {
      uint64_t v35 = v33 + 1;
      uint64_t v144 = *(void *)(v139 + 8 * v33 + 32);
      swift_retain();
      uint64_t v36 = sub_100004AEC(&qword_1009AAE28);
      uint64_t v37 = sub_100004AEC(&qword_1009AAE30);
      Publisher.map<A>(_:)(sub_10038249C, 0LL, v36, v37, v136);
      uint64_t v38 = sub_100004AEC(&qword_1009AAE40);
      uint64_t v39 = sub_1000372EC( &qword_1009AAE48,  &qword_1009AADF0,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
      uint64_t v40 = sub_1000372EC(&qword_1009AAE50, &qword_1009AAE40, (uint64_t)&protocol conformance descriptor for Just<A>);
      Publisher.catch<A>(_:)(sub_1003824A0, 0LL, v34, v38, v39, v40);
      (*(void (**)(char *, uint64_t))(v135 + 8))(v12, v34);
      uint64_t v41 = sub_1000372EC( &qword_1009AAE58,  &qword_1009AADF8,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
      uint64_t v42 = Publisher.eraseToAnyPublisher()(v13, v41);
      (*(void (**)(char *, uint64_t))(v137 + 8))(v15, v13);
      uint64_t v43 = swift_release();
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v43);
      uint64_t v44 = v145[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v44);
      uint64_t v45 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v44, v42);
      specialized ContiguousArray._endMutation()(v45);
      uint64_t v33 = v35;
    }

    while (v138 != v35);
    uint64_t v28 = v145;
    uint64_t v31 = swift_bridgeObjectRelease();
  }

  uint64_t v139 = Transaction.subscriptionCleaner.getter(v31);
  uint64_t v138 = swift_allocObject(&unk_100954818, 17LL, 7LL);
  *(_BYTE *)(v138 + 16) = 0;
  uint64_t v145 = v28;
  uint64_t v46 = sub_100004AEC(&qword_1009AAE60);
  uint64_t v47 = sub_1000372EC(&qword_1009AAE68, &qword_1009AAE60, (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v48 = sub_1000372EC( &qword_1009AAE70,  &qword_1009AAE78,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v49 = (void *)Sequence<>.merged()(v46, v47, v48);
  swift_bridgeObjectRelease();
  uint64_t v145 = v49;
  uint64_t v50 = sub_100004AEC(&qword_1009AAE78);
  unint64_t v51 = sub_100398E60();
  uint64_t v52 = v104;
  Publisher<>.setFailureType<A>(to:)( &type metadata for SoundPlaybackManager.SoundPlaybackManagerError,  v50,  &type metadata for SoundPlaybackManager.SoundPlaybackManagerError,  v48,  v51);
  uint64_t v53 = swift_release();
  uint64_t v54 = v108;
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(v53, a6);
  uint64_t v145 = *(void **)&v133[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
  id v55 = v145;
  uint64_t v56 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
  uint64_t v137 = *(void *)(*(void *)(v56 - 8) + 56LL);
  uint64_t v57 = (uint64_t)v119;
  ((void (*)(char *, uint64_t, uint64_t, uint64_t))v137)(v119, 1LL, 1LL, v56);
  unint64_t v58 = sub_100004AB0();
  unint64_t v135 = v58;
  uint64_t v59 = sub_1000372EC( &qword_1009AAE88,  &qword_1009AAE00,  (uint64_t)&protocol conformance descriptor for Publishers.SetFailureType<A, B>);
  uint64_t v60 = sub_100007864( (unint64_t *)&qword_1009B06C0,  (uint64_t (*)(uint64_t))sub_100004AB0,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  uint64_t v136 = v60;
  uint64_t v61 = v55;
  uint64_t v103 = v60;
  uint64_t v62 = v107;
  uint64_t v63 = v106;
  Publisher.timeout<A>(_:scheduler:options:customError:)(v54, &v145, v57, sub_1003824AC, 0LL, v106, v58, v59, v103);
  sub_100015794(v57, &qword_1009B0670);

  (*(void (**)(char *, uint64_t))(v110 + 8))(v54, v112);
  (*(void (**)(char *, uint64_t))(v105 + 8))(v52, v63);
  uint64_t v64 = sub_100004AEC(&qword_1009AAE90);
  uint64_t v65 = sub_1000372EC( &qword_1009AAE98,  &qword_1009AAE08,  (uint64_t)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  uint64_t v66 = v113;
  uint64_t v67 = v111;
  Publisher.map<A>(_:)(sub_1003824B8, 0LL, v111, v64, v65);
  (*(void (**)(char *, uint64_t))(v109 + 8))(v62, v67);
  uint64_t v68 = sub_100004AEC(&qword_1009AAEA0);
  uint64_t v69 = sub_1000372EC( &qword_1009AAEA8,  &qword_1009AAE10,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  uint64_t v70 = sub_1000372EC(&qword_1009AAEB0, &qword_1009AAEA0, (uint64_t)&protocol conformance descriptor for Just<A>);
  uint64_t v71 = v116;
  uint64_t v72 = v115;
  Publisher.catch<A>(_:)(sub_1003824BC, 0LL, v115, v68, v69, v70);
  (*(void (**)(char *, uint64_t))(v114 + 8))(v66, v72);
  uint64_t v145 = v61;
  ((void (*)(uint64_t, uint64_t, uint64_t, uint64_t))v137)(v57, 1LL, 1LL, v56);
  uint64_t v73 = sub_1000372EC( &qword_1009AAEB8,  &qword_1009AAE18,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
  uint64_t v74 = v61;
  uint64_t v75 = v118;
  Publisher.receive<A>(on:options:)(&v145, v57, v118, v135, v73, v136);
  sub_100015794(v57, &qword_1009B0670);

  (*(void (**)(char *, uint64_t))(v117 + 8))(v71, v75);
  uint64_t v76 = v125;
  uint64_t v137 = *(void *)(v125 + 16);
  uint64_t v77 = v128;
  ((void (*)(char *, uint64_t, uint64_t))v137)(v131, v129, v128);
  sub_10001DC4C(v130, v132, type metadata accessor for OwnedBeaconGroup);
  uint64_t v78 = *(unsigned __int8 *)(v76 + 80);
  uint64_t v79 = (v78 + 32) & ~v78;
  uint64_t v136 = v120 + 7;
  unint64_t v80 = (v120 + 7 + v79) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v81 = *(unsigned __int8 *)(v124 + 80);
  unint64_t v135 = v81 + 8;
  uint64_t v82 = (v81 + 8 + v80) & ~v81;
  uint64_t v124 = v78 | v81 | 7;
  v126 += 7LL;
  unint64_t v83 = (v126 + v82) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v84 = swift_allocObject(&unk_100954840, v83 + 8, v124);
  uint64_t v85 = v139;
  *(void *)(v84 + 16) = v134;
  *(void *)(v84 + 24) = v85;
  uint64_t v125 = *(void *)(v76 + 32);
  uint64_t v86 = v131;
  ((void (*)(uint64_t, char *, uint64_t))v125)(v84 + v79, v131, v77);
  uint64_t v87 = v138;
  *(void *)(v84 + v80) = v138;
  uint64_t v88 = v132;
  sub_10002218C(v132, v84 + v82, type metadata accessor for OwnedBeaconGroup);
  *(void *)(v84 + v83) = v133;
  ((void (*)(char *, uint64_t, uint64_t))v137)(v86, v129, v77);
  sub_10001DC4C(v130, v88, type metadata accessor for OwnedBeaconGroup);
  uint64_t v89 = (v78 + 16) & ~v78;
  unint64_t v90 = (v136 + v89) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v91 = (v135 + v90) & ~v81;
  unint64_t v92 = (v126 + v91) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v93 = (v92 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v94 = swift_allocObject(&unk_100954868, v93 + 8, v124);
  ((void (*)(uint64_t, char *, uint64_t))v125)(v94 + v89, v131, v128);
  *(void *)(v94 + v90) = v87;
  sub_10002218C(v132, v94 + v91, type metadata accessor for OwnedBeaconGroup);
  unint64_t v95 = v133;
  *(void *)(v94 + v92) = v133;
  *(double *)(v94 + v93) = a6;
  uint64_t v96 = sub_1000372EC( &qword_1009AAEC0,  &qword_1009AAE20,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  swift_retain_n(v87, 2LL);
  id v97 = v95;
  uint64_t v98 = v134;
  swift_retain();
  uint64_t v99 = v139;
  swift_unknownObjectRetain(v139);
  uint64_t v100 = v123;
  uint64_t v101 = v127;
  Publisher.sink(receiveCompletion:receiveValue:)(sub_100398FDC, v84, sub_10039919C, v94, v123, v96);
  swift_release();
  swift_release();
  (*(void (**)(char *, uint64_t))(v122 + 8))(v101, v100);
  AnyCancellable.store(in:)(v98);
  swift_unknownObjectRelease(v99);
  swift_release();
  swift_release();
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003881B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = sub_100004AEC(&qword_10099E488);
  __chkstk_darwin(v8);
  unint64_t v10 = (char *)&v38 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = type metadata accessor for DispatchWorkItemFlags(0LL);
  __chkstk_darwin(v39);
  uint64_t v41 = (char *)&v38 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  __chkstk_darwin(v12);
  uint64_t v43 = (char *)&v38 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = a1;
  uint64_t v42 = a4;
  uint64_t v15 = sub_10038857C(a1, a4);
  specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v15);
  unint64_t v17 = *(void *)(*(void *)a2 + 16LL);
  unint64_t v16 = *(void *)(*(void *)a2 + 24LL);
  if (v17 >= v16 >> 1) {
    specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)(v16 > 1, v17 + 1, 1LL);
  }
  uint64_t v18 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)(v17, v15);
  specialized Array._endMutation()(v18);
  uint64_t v19 = swift_allocObject(&unk_100954890, 24LL, 7LL);
  swift_unknownObjectWeakInit(v19 + 16, a3);
  uint64_t v40 = a3;
  uint64_t v20 = *(void (**)(char *, uint64_t, uint64_t))(v13 + 16);
  uint64_t v21 = v43;
  v20(v43, v44, v12);
  uint64_t v22 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v23 = (v22 + 16) & ~v22;
  unint64_t v24 = (v14 + v23 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v25 = swift_allocObject(&unk_1009548B8, v24 + 8, v22 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v13 + 32))(v25 + v23, v21, v12);
  *(void *)(v25 + v24) = v19;
  aBlock[4] = sub_100399350;
  aBlock[5] = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_1009548D0;
  uint64_t v26 = _Block_copy(aBlock);
  uint64_t v46 = _swiftEmptyArrayStorage;
  uint64_t v27 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  swift_retain();
  uint64_t v28 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v29 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v30 = v41;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v46, v28, v29, v39, v27);
  uint64_t v31 = type metadata accessor for DispatchWorkItem(0LL);
  swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
  uint64_t v32 = DispatchWorkItem.init(flags:block:)(v30, v26);
  swift_release();
  swift_release();
  uint64_t v33 = (uint64_t)v43;
  uint64_t v34 = v44;
  v20(v43, v44, v12);
  v20(v10, v42, v12);
  uint64_t v35 = (int *)type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
  v20(&v10[v35[5]], v34, v12);
  uint64_t v36 = (uint64_t)&v10[v35[8]];
  swift_retain();
  static Date.trustedNow.getter(v36);
  v10[v35[6]] = 4;
  *(void *)&v10[v35[7]] = v32;
  *(void *)&v10[v35[9]] = 0LL;
  v10[v35[10]] = 0;
  (*(void (**)(char *, void, uint64_t, int *))(*((void *)v35 - 1) + 56LL))(v10, 0LL, 1LL, v35);
  swift_beginAccess(v40 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators, aBlock, 33LL, 0LL);
  sub_1000451A8((uint64_t)v10, v33);
  swift_endAccess(aBlock);
  return swift_release();
}

uint64_t sub_10038857C(uint64_t a1, uint64_t a2)
{
  uint64_t v62 = a2;
  uint64_t v65 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v65 - 8);
  uint64_t v5 = __chkstk_darwin(v65);
  uint64_t v61 = (char *)&v58 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v58 - v8;
  __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v58 - v10;
  uint64_t v12 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (uint64_t *)((char *)&v58 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v64 = v2;
  unint64_t v16 = *(void **)(v2 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  *uint64_t v15 = v16;
  (*(void (**)(void *, void, uint64_t))(v13 + 104))(v15, enum case for DispatchPredicate.onQueue(_:), v12);
  id v17 = v16;
  char v18 = _dispatchPreconditionTest(_:)(v15);
  (*(void (**)(void *, uint64_t))(v13 + 8))(v15, v12);
  if ((v18 & 1) != 0)
  {
    if (qword_10099B330 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B330, sub_100374304);
LABEL_3:
  uint64_t v60 = (void (*)(char *, uint64_t))type metadata accessor for Logger(0LL);
  sub_10000A720((uint64_t)v60, (uint64_t)qword_100A2A748);
  uint64_t v19 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v4 + 16);
  uint64_t v20 = v65;
  uint64_t v21 = v19(v11, a1, v65);
  uint64_t v22 = (os_log_s *)Logger.logObject.getter(v21);
  os_log_type_t v23 = static os_log_type_t.default.getter(v22);
  BOOL v24 = os_log_type_enabled(v22, v23);
  uint64_t v63 = a1;
  if (v24)
  {
    uint64_t v25 = swift_slowAlloc(22LL, -1LL);
    uint64_t v59 = v19;
    uint64_t v26 = v25;
    uint64_t v27 = swift_slowAlloc(32LL, -1LL);
    v66[0] = v27;
    *(_DWORD *)uint64_t v26 = 141558275;
    uint64_t v67 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v26 + 4, v26 + 12);
    *(_WORD *)(v26 + 12) = 2081;
    uint64_t v28 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter(v65, v28);
    uint64_t v67 = sub_1003F11D4(v29, v30, v66);
    uint64_t v20 = v65;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v26 + 14, v26 + 22);
    swift_bridgeObjectRelease();
    uint64_t v31 = *(void (**)(char *, uint64_t))(v4 + 8);
    v31(v11, v20);
    _os_log_impl( (void *)&_mh_execute_header,  v22,  v23,  "Calling stop sound on device %{private,mask.hash}s",  (uint8_t *)v26,  0x16u);
    swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v32 = v27;
    a1 = v63;
    swift_slowDealloc(v32, -1LL, -1LL);
    uint64_t v33 = v26;
    uint64_t v19 = v59;
    swift_slowDealloc(v33, -1LL, -1LL);
  }

  else
  {
    uint64_t v31 = *(void (**)(char *, uint64_t))(v4 + 8);
    v31(v11, v20);
  }

  uint64_t v34 = sub_100004AEC(&qword_1009AAEC8);
  swift_allocObject(v34, *(unsigned int *)(v34 + 48), *(unsigned __int16 *)(v34 + 52));
  uint64_t v35 = PassthroughSubject.init()();
  v19(v9, a1, v20);
  uint64_t v36 = (uint64_t *)(v64 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_stopSoundSubjects);
  swift_beginAccess(v64 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_stopSoundSubjects, v66, 33LL, 0LL);
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v36);
  uint64_t v67 = *v36;
  *uint64_t v36 = 0x8000000000000000LL;
  sub_10005E5BC(v35, (uint64_t)v9, isUniquelyReferenced_nonNull_native);
  *uint64_t v36 = v67;
  swift_bridgeObjectRelease();
  v31(v9, v20);
  swift_endAccess(v66);
  char v38 = sub_10037E2F0(a1);
  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  v66[3] = My;
  v66[4] = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
  uint64_t v40 = sub_10000A7C8(v66);
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v40,  enum case for Feature.FindMy.spPlaySoundAll(_:),  My);
  LOBYTE(My) = isFeatureEnabled(_:)(v66);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v66);
  if ((My & 1) == 0 || (v38 & 1) != 0)
  {
    id v50 = sub_1003745CC();
    uint64_t v52 = v51;
    uint64_t ObjectType = swift_getObjectType(v50);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v52 + 64))(a1, ObjectType, v52);
    swift_unknownObjectRelease(v50);
    v66[0] = v35;
    uint64_t v54 = sub_1000372EC( &qword_1009AAED0,  &qword_1009AAEC8,  (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
    uint64_t v55 = Publisher.eraseToAnyPublisher()(v34, v54);
  }

  else
  {
    if (qword_10099B340 != -1) {
      swift_once(&qword_10099B340, sub_10037453C);
    }
    sub_10000A720((uint64_t)v60, (uint64_t)qword_1009AACC8);
    uint64_t v41 = v61;
    uint64_t v42 = v19(v61, a1, v20);
    uint64_t v43 = (os_log_s *)Logger.logObject.getter(v42);
    os_log_type_t v44 = static os_log_type_t.default.getter(v43);
    if (os_log_type_enabled(v43, v44))
    {
      uint64_t v45 = swift_slowAlloc(32LL, -1LL);
      uint64_t v65 = swift_slowAlloc(64LL, -1LL);
      v66[0] = v65;
      *(_DWORD *)uint64_t v45 = 136315651;
      uint64_t v67 = sub_1003F11D4(0xD00000000000001CLL, 0x800000010085F890LL, v66);
      uint64_t v60 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v45 + 4, v45 + 12);
      *(_WORD *)(v45 + 12) = 2160;
      uint64_t v67 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v45 + 14, v45 + 22);
      *(_WORD *)(v45 + 22) = 2081;
      uint64_t v46 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter(v20, v46);
      uint64_t v67 = sub_1003F11D4(v47, v48, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v45 + 24, v45 + 32);
      swift_bridgeObjectRelease();
      v60(v41, v20);
      _os_log_impl( (void *)&_mh_execute_header,  v43,  v44,  "%s SPPlaySoundAll: %{private,mask.hash}s does NOT support ranging",  (uint8_t *)v45,  0x20u);
      uint64_t v49 = v65;
      swift_arrayDestroy(v65, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v49, -1LL, -1LL);
      swift_slowDealloc(v45, -1LL, -1LL);
    }

    else
    {
      v31(v41, v20);
    }

    uint64_t v55 = sub_100393A90(v63, v62, v35);
  }

  uint64_t v56 = v55;
  swift_release();
  return v56;
}

void sub_100388C4C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v22 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = a2 + 16;
  if (qword_10099B330 != -1) {
    swift_once(&qword_10099B330, sub_100374304);
  }
  uint64_t v9 = type metadata accessor for Logger(0LL);
  sub_10000A720(v9, (uint64_t)qword_100A2A748);
  uint64_t v10 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  uint64_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    uint64_t v23 = a1;
    uint64_t v13 = swift_slowAlloc(12LL, -1LL);
    uint64_t v22 = a2 + 16;
    uint64_t v14 = (uint8_t *)v13;
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    v25[0] = v15;
    *(_DWORD *)uint64_t v14 = 136315138;
    uint64_t v16 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v4, v16);
    uint64_t v24 = sub_1003F11D4(v17, v18, v25);
    a1 = v23;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, v25, v14 + 4, v14 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "Timed out stop sound waiting for CL. Beacon %s", v14, 0xCu);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    uint64_t v19 = v14;
    uint64_t v8 = v22;
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  else
  {
    (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  }

  swift_beginAccess(v8, v25, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v8);
  if (Strong)
  {
    uint64_t v21 = (void *)Strong;
    sub_100381A9C(a1, 0, 0LL);
  }

uint64_t sub_100388EA8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = sub_100004AEC(&qword_1009AAE90);
  return swift_storeEnumTagMultiPayload(a2, v3, 0LL);
}

void sub_100388EEC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, void *a7)
{
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v30 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  Transaction.capture()();
  if (qword_10099B330 != -1) {
    swift_once(&qword_10099B330, sub_100374304);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  sub_10000A720(v15, (uint64_t)qword_100A2A748);
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a4, v11);
  uint64_t v16 = swift_retain_n(a5, 2LL);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = swift_slowAlloc(18LL, -1LL);
    uint64_t v31 = a7;
    uint64_t v20 = v19;
    uint64_t v21 = swift_slowAlloc(32LL, -1LL);
    uint64_t v35 = v21;
    *(_DWORD *)uint64_t v20 = 136315394;
    uint64_t v30 = a6;
    uint64_t v22 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v11, v22);
    uint64_t v33 = sub_1003F11D4(v23, v24, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v33, &v34, v20 + 4, v20 + 12);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
    *(_WORD *)(v20 + 12) = 1024;
    swift_beginAccess(a5 + 16, &v33, 0LL, 0LL);
    int v25 = *(unsigned __int8 *)(a5 + 16);
    swift_release();
    int v32 = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v32, &v33, v20 + 14, v20 + 18);
    swift_release();
    _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Stop sound for group %s completion. Success? %{BOOL}d",  (uint8_t *)v20,  0x12u);
    swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v21, -1LL, -1LL);
    uint64_t v26 = v20;
    a7 = v31;
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  else
  {
    swift_release();
    (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);

    swift_release();
  }

  sub_1001CC778();
  uint64_t v28 = v27;
  id v29 = a7;
  sub_100397BBC(v28, (uint64_t)v29, 1);
  swift_bridgeObjectRelease();
}

void sub_1003891B4(uint64_t a1, uint64_t a2, _BYTE *a3, uint64_t a4, void *a5, double a6)
{
  uint64_t v93 = a4;
  id v94 = a5;
  unint64_t v91 = a3;
  uint64_t v96 = a2;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v97 = *(void *)(v8 - 8);
  uint64_t v98 = v8;
  uint64_t v9 = __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v90 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = __chkstk_darwin(v9);
  uint64_t v14 = (char *)&v90 - v13;
  uint64_t v15 = __chkstk_darwin(v12);
  unint64_t v92 = (char *)&v90 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v90 - v18;
  __chkstk_darwin(v17);
  unint64_t v95 = (char *)&v90 - v20;
  uint64_t v21 = sub_100004AEC(&qword_1009AAE30);
  uint64_t v22 = __chkstk_darwin(v21);
  unint64_t v24 = (unint64_t *)((char *)&v90 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v22);
  uint64_t v26 = (char *)&v90 - v25;
  uint64_t v27 = sub_100004AEC(&qword_1009AAE90);
  __chkstk_darwin(v27);
  id v29 = (unint64_t *)((char *)&v90 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_10001581C(a1, (uint64_t)v29, &qword_1009AAE90);
  if (swift_getEnumCaseMultiPayload(v29, v27) == 1)
  {
    unint64_t v30 = *v29;
    if (*v29 == 3)
    {
      if (qword_10099B330 != -1) {
        swift_once(&qword_10099B330, sub_100374304);
      }
      uint64_t v31 = type metadata accessor for Logger(0LL);
      uint64_t v32 = sub_10000A720(v31, (uint64_t)qword_100A2A748);
      uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
      os_log_type_t v34 = static os_log_type_t.error.getter(v33);
      if (os_log_type_enabled(v33, v34))
      {
        uint64_t v35 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        *(_DWORD *)uint64_t v35 = 134217984;
        double v99 = a6;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v99, &v100, v35 + 4, v35 + 12);
        _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "Stop sound timed out after %f. CL should have completed by now",  v35,  0xCu);
        swift_slowDealloc(v35, -1LL, -1LL);
      }
    }

    else
    {
      if (qword_10099B330 != -1) {
        swift_once(&qword_10099B330, sub_100374304);
      }
      uint64_t v52 = type metadata accessor for Logger(0LL);
      sub_10000A720(v52, (uint64_t)qword_100A2A748);
      uint64_t v53 = v97;
      uint64_t v54 = v98;
      (*(void (**)(char *, uint64_t, uint64_t))(v97 + 16))(v11, v96, v98);
      sub_100399234(v30);
      unint64_t v55 = sub_100399234(v30);
      uint64_t v56 = (os_log_s *)Logger.logObject.getter(v55);
      os_log_type_t v57 = static os_log_type_t.error.getter(v56);
      if (os_log_type_enabled(v56, v57))
      {
        uint64_t v58 = swift_slowAlloc(22LL, -1LL);
        uint64_t v59 = swift_slowAlloc(64LL, -1LL);
        double v99 = *(double *)&v59;
        *(_DWORD *)uint64_t v58 = 136315394;
        uint64_t v60 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v61 = dispatch thunk of CustomStringConvertible.description.getter(v54, v60);
        uint64_t v101 = sub_1003F11D4(v61, v62, (uint64_t *)&v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v58 + 4, v58 + 12);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v53 + 8))(v11, v54);
        *(_WORD *)(v58 + 12) = 2080;
        uint64_t v101 = v30;
        sub_100399234(v30);
        uint64_t v63 = String.init<A>(describing:)(&v101, &type metadata for SoundPlaybackManager.SoundPlaybackManagerError);
        uint64_t v101 = sub_1003F11D4(v63, v64, (uint64_t *)&v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v58 + 14, v58 + 22);
        swift_bridgeObjectRelease();
        sub_100399244(v30);
        sub_100399244(v30);
        _os_log_impl( (void *)&_mh_execute_header,  v56,  v57,  "Stop sound failed for %s with unexpected error %s",  (uint8_t *)v58,  0x16u);
        swift_arrayDestroy(v59, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v59, -1LL, -1LL);
        swift_slowDealloc(v58, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v53 + 8))(v11, v54);
        sub_100399244(v30);
        sub_100399244(v30);
      }

      sub_100399244(v30);
    }
  }

  else
  {
    sub_100399254((uint64_t)v29, (uint64_t)v26);
    sub_10001581C((uint64_t)v26, (uint64_t)v24, &qword_1009AAE30);
    uint64_t v36 = (uint64_t)v26;
    if (swift_getEnumCaseMultiPayload(v24, v21) == 1)
    {
      unint64_t v37 = *v24;
      uint64_t v38 = v97;
      if (qword_10099B330 != -1) {
        swift_once(&qword_10099B330, sub_100374304);
      }
      uint64_t v39 = type metadata accessor for Logger(0LL);
      sub_10000A720(v39, (uint64_t)qword_100A2A748);
      uint64_t v40 = v98;
      (*(void (**)(char *, uint64_t, uint64_t))(v38 + 16))(v14, v96, v98);
      sub_100399234(v37);
      unint64_t v41 = sub_100399234(v37);
      uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
      os_log_type_t v43 = static os_log_type_t.error.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = swift_slowAlloc(22LL, -1LL);
        uint64_t v96 = v36;
        uint64_t v45 = v44;
        uint64_t v46 = swift_slowAlloc(64LL, -1LL);
        double v99 = *(double *)&v46;
        *(_DWORD *)uint64_t v45 = 136315394;
        uint64_t v47 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v48 = dispatch thunk of CustomStringConvertible.description.getter(v40, v47);
        uint64_t v101 = sub_1003F11D4(v48, v49, (uint64_t *)&v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v45 + 4, v45 + 12);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v40);
        *(_WORD *)(v45 + 12) = 2080;
        uint64_t v101 = v37;
        sub_100399234(v37);
        uint64_t v50 = String.init<A>(describing:)(&v101, &type metadata for SoundPlaybackManager.SoundPlaybackManagerError);
        uint64_t v101 = sub_1003F11D4(v50, v51, (uint64_t *)&v99);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v45 + 14, v45 + 22);
        swift_bridgeObjectRelease();
        sub_100399244(v37);
        sub_100399244(v37);
        _os_log_impl( (void *)&_mh_execute_header,  v42,  v43,  "Stop sound failed for %s with error %s",  (uint8_t *)v45,  0x16u);
        swift_arrayDestroy(v46, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v46, -1LL, -1LL);
        swift_slowDealloc(v45, -1LL, -1LL);

        sub_100399244(v37);
        sub_100015794(v96, &qword_1009AAE30);
      }

      else
      {

        sub_100399244(v37);
        sub_100399244(v37);
        (*(void (**)(char *, uint64_t))(v38 + 8))(v14, v40);
        sub_100399244(v37);
        sub_100015794(v36, &qword_1009AAE30);
      }
    }

    else
    {
      uint64_t v65 = v97;
      uint64_t v66 = v95;
      uint64_t v67 = v24;
      uint64_t v68 = v98;
      (*(void (**)(char *, unint64_t *, uint64_t))(v97 + 32))(v95, v67, v98);
      if (qword_10099B330 != -1) {
        swift_once(&qword_10099B330, sub_100374304);
      }
      v91 += 16;
      uint64_t v69 = type metadata accessor for Logger(0LL);
      sub_10000A720(v69, (uint64_t)qword_100A2A748);
      uint64_t v70 = *(void (**)(char *, char *, uint64_t))(v65 + 16);
      v70(v19, v66, v68);
      uint64_t v71 = v92;
      uint64_t v72 = ((uint64_t (*)(char *, uint64_t, uint64_t))v70)(v92, v96, v68);
      uint64_t v73 = (os_log_s *)Logger.logObject.getter(v72);
      os_log_type_t v74 = static os_log_type_t.default.getter(v73);
      if (os_log_type_enabled(v73, v74))
      {
        uint64_t v75 = swift_slowAlloc(22LL, -1LL);
        uint64_t v90 = swift_slowAlloc(64LL, -1LL);
        double v99 = *(double *)&v90;
        *(_DWORD *)uint64_t v75 = 136315394;
        uint64_t v76 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v77 = dispatch thunk of CustomStringConvertible.description.getter(v98, v76);
        uint64_t v101 = sub_1003F11D4(v77, v78, (uint64_t *)&v99);
        uint64_t v96 = v36;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v75 + 4, v75 + 12);
        swift_bridgeObjectRelease();
        uint64_t v79 = *(void (**)(char *, uint64_t))(v65 + 8);
        v79(v19, v98);
        *(_WORD *)(v75 + 12) = 2080;
        uint64_t v80 = v76;
        uint64_t v68 = v98;
        uint64_t v81 = dispatch thunk of CustomStringConvertible.description.getter(v98, v80);
        uint64_t v101 = sub_1003F11D4(v81, v82, (uint64_t *)&v99);
        uint64_t v36 = v96;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v101, &v102, v75 + 14, v75 + 22);
        swift_bridgeObjectRelease();
        v79(v71, v68);
        _os_log_impl( (void *)&_mh_execute_header,  v73,  v74,  "Stop sound succeeded for %s. Group: %s",  (uint8_t *)v75,  0x16u);
        uint64_t v83 = v90;
        swift_arrayDestroy(v90, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v83, -1LL, -1LL);
        uint64_t v84 = v75;
        uint64_t v66 = v95;
        swift_slowDealloc(v84, -1LL, -1LL);
      }

      else
      {
        uint64_t v79 = *(void (**)(char *, uint64_t))(v65 + 8);
        v79(v19, v68);
        v79(v71, v68);
      }

      uint64_t v85 = v91;
      swift_beginAccess(v91, &v99, 1LL, 0LL);
      _BYTE *v85 = 1;
      sub_1001CC778();
      __chkstk_darwin(v86);
      *(&v90 - 2) = (uint64_t)v66;
      uint64_t v88 = sub_100549EC8((uint64_t)sub_10039929C, (uint64_t)(&v90 - 4), v87);
      id v89 = v94;
      sub_100397E6C(v88, (uint64_t)v89);
      swift_release();

      sub_100015794(v36, &qword_1009AAE30);
      v79(v66, v68);
    }
  }

BOOL sub_100389BF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  return (dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, v4, v5) & 1) == 0;
}

uint64_t sub_100389C70(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v69 = a5;
  uint64_t v68 = a4;
  uint64_t v66 = a3;
  uint64_t v65 = a1;
  uint64_t v9 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v74 = *(void *)(v9 - 8);
  uint64_t v75 = v9;
  __chkstk_darwin(v9);
  uint64_t v73 = (char *)&v62 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v71 = *(void *)(v11 - 8);
  uint64_t v72 = v11;
  __chkstk_darwin(v11);
  uint64_t v70 = (char *)&v62 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v67 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v64 = *(void *)(v67 - 8);
  __chkstk_darwin(v67);
  uint64_t v63 = (char *)&v62 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for UUID(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v77 = v16;
  unint64_t v78 = (char *)&v62 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC(&qword_1009A4890);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v62 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v21 = *(void *)(v20 - 8);
  __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v62 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v80 = v6;
  if ((sub_10037E0F4(a2) & 1) != 0) {
    char v24 = 23;
  }
  else {
    char v24 = 24;
  }
  if (qword_10099B300 != -1) {
    swift_once(&qword_10099B300, sub_1003459EC);
  }
  uint64_t v25 = qword_100A2A6C8;
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t))(v15 + 16);
  uint64_t v79 = v14;
  uint64_t v76 = v26;
  v26(v23, a2, v14);
  static Date.trustedNow.getter((uint64_t)&v23[*(int *)(v20 + 20)]);
  v23[*(int *)(v20 + 24)] = v24;
  uint64_t v27 = sub_100004AEC(&qword_10099D318);
  uint64_t v28 = *(unsigned __int8 *)(v21 + 80);
  uint64_t v29 = (v28 + 32) & ~v28;
  uint64_t v30 = swift_allocObject(v27, v29 + *(void *)(v21 + 72), v28 | 7);
  *(_OWORD *)(v30 + 16) = xmmword_1007E67D0;
  sub_10001DC4C((uint64_t)v23, v30 + v29, type metadata accessor for BeaconObservation);
  uint64_t v31 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v31);
  *(&v62 - 4) = v25;
  *(&v62 - 3) = v30;
  *(&v62 - 2) = 0LL;
  *(&v62 - 1) = 0LL;
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.BeaconObservationStore.save",  57LL,  2LL,  sub_1002DDE58);
  swift_bridgeObjectRelease();
  sub_100018C68((uint64_t)v23, type metadata accessor for BeaconObservation);
  uint64_t v32 = v80;
  sub_10050BDEC(a2, (uint64_t)v19);
  uint64_t v33 = type metadata accessor for WildModeAssociationRecord(0LL);
  int v34 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(*(void *)(v33 - 8) + 48LL))(v19, 1LL, v33);
  sub_100015794((uint64_t)v19, &qword_1009A4890);
  if (v34 == 1) {
    sub_1004E696C(0xAu);
  }
  else {
    sub_1004E97E0();
  }
  uint64_t v35 = *(dispatch_queue_s **)&v32[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
  unint64_t v37 = v78;
  uint64_t v36 = v79;
  v76(v78, a2, v79);
  uint64_t v38 = *(unsigned __int8 *)(v15 + 80);
  uint64_t v39 = (v38 + 24) & ~v38;
  uint64_t v40 = swift_allocObject(&unk_100955060, v39 + v77, v38 | 7);
  *(void *)(v40 + 16) = v32;
  (*(void (**)(uint64_t, char *, uint64_t))(v15 + 32))(v40 + v39, v37, v36);
  uint64_t v41 = swift_allocObject(&unk_100955088, 32LL, 7LL);
  *(void *)(v41 + 16) = sub_10039AEA4;
  *(void *)(v41 + 24) = v40;
  uint64_t v86 = sub_100154688;
  uint64_t v87 = v41;
  double aBlock = _NSConcreteStackBlock;
  uint64_t v83 = 1107296256LL;
  uint64_t v84 = sub_100025BD4;
  uint64_t v85 = &unk_1009550A0;
  uint64_t v42 = _Block_copy(&aBlock);
  os_log_type_t v43 = v32;
  swift_retain();
  swift_release();
  dispatch_sync(v35, v42);
  _Block_release(v42);
  LOBYTE(v35) = swift_isEscapingClosureAtFileLocation(v41, "", 129LL, 784LL, 27LL, 1LL);
  uint64_t result = swift_release();
  if ((v35 & 1) != 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v45 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v45);
    *(&v62 - 6) = (uint64_t)v43;
    *(&v62 - 5) = a2;
    *((double *)&v62 - 4) = a6;
    uint64_t v46 = v66;
    *(&v62 - 3) = v65;
    *(&v62 - 2) = v46;
    static Transaction.named<A>(_:with:)( "SoundPlaybackManager.queuePlaySoundSingle",  41LL,  2LL,  sub_10039AEE4,  &v62 - 8);
    sub_100004AB0();
    uint64_t v47 = v64;
    uint64_t v48 = v63;
    uint64_t v49 = v67;
    (*(void (**)(char *, void, uint64_t))(v64 + 104))( v63,  enum case for DispatchQoS.QoSClass.default(_:),  v67);
    uint64_t v50 = (void *)static OS_dispatch_queue.global(qos:)(v48);
    (*(void (**)(char *, uint64_t))(v47 + 8))(v48, v49);
    uint64_t v51 = swift_allocObject(&unk_1009550D8, 32LL, 7LL);
    uint64_t v52 = v69;
    *(void *)(v51 + 16) = v68;
    *(void *)(v51 + 24) = v52;
    uint64_t v86 = sub_10020FF70;
    uint64_t v87 = v51;
    double aBlock = _NSConcreteStackBlock;
    uint64_t v83 = 1107296256LL;
    uint64_t v84 = sub_1001C31E8;
    uint64_t v85 = &unk_1009550F0;
    uint64_t v53 = _Block_copy(&aBlock);
    uint64_t v54 = swift_retain();
    unint64_t v55 = v70;
    static DispatchQoS.unspecified.getter(v54);
    uint64_t v81 = _swiftEmptyArrayStorage;
    uint64_t v56 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    uint64_t v57 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v58 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v59 = v73;
    uint64_t v60 = v57;
    uint64_t v61 = v75;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v81, v60, v58, v75, v56);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v55, v59, v53);
    _Block_release(v53);

    (*(void (**)(char *, uint64_t))(v74 + 8))(v59, v61);
    (*(void (**)(char *, uint64_t))(v71 + 8))(v55, v72);
    swift_release();
    return swift_release();
  }

  return result;
}

uint64_t sub_10038A344(uint64_t a1, double a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v46 = a4;
  uint64_t v48 = a5;
  uint64_t v49 = a6;
  uint64_t v52 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v55 = *(void *)(v52 - 8);
  __chkstk_darwin(v52);
  uint64_t v51 = (char *)&v42 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v53 = *(void *)(v10 - 8);
  uint64_t v54 = v10;
  __chkstk_darwin(v10);
  uint64_t v47 = (char *)&v42 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = *(void *)(v13 + 64);
  uint64_t v15 = __chkstk_darwin(v12);
  uint64_t v44 = (char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v15);
  os_log_type_t v43 = (char *)&v42 - v16;
  uint64_t v50 = *(void *)(v6 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  uint64_t v17 = *(void (**)(void))(v13 + 16);
  v17();
  ((void (*)(char *, uint64_t, uint64_t))v17)((char *)&v42 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL), a1, v12);
  uint64_t v18 = *(unsigned __int8 *)(v13 + 80);
  uint64_t v19 = (v18 + 16) & ~v18;
  unint64_t v20 = (v14 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v21 = (v20 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v23 = (v22 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v24 = (v18 + 16 + v23) & ~v18;
  uint64_t v25 = swift_allocObject(&unk_100954EF8, v24 + v14, v18 | 7);
  uint64_t v26 = v25 + v19;
  uint64_t v27 = *(void (**)(uint64_t, char *, uint64_t))(v13 + 32);
  v27(v26, v43, v12);
  *(void *)(v25 + v20) = v46;
  *(double *)(v25 + v21) = a2;
  uint64_t v28 = v44;
  uint64_t v29 = v45;
  *(void *)(v25 + v22) = v45;
  uint64_t v30 = (void *)(v25 + v23);
  uint64_t v31 = v49;
  *uint64_t v30 = v48;
  v30[1] = v31;
  v27(v25 + v24, v28, v12);
  aBlock[4] = sub_10039AC54;
  aBlock[5] = v25;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100954F10;
  uint64_t v32 = _Block_copy(aBlock);
  id v33 = v29;
  uint64_t v34 = swift_retain();
  uint64_t v35 = v47;
  static DispatchQoS.unspecified.getter(v34);
  uint64_t v56 = _swiftEmptyArrayStorage;
  uint64_t v36 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v37 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v38 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v40 = v51;
  uint64_t v39 = v52;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v56, v37, v38, v52, v36);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v35, v40, v32);
  _Block_release(v32);
  (*(void (**)(char *, uint64_t))(v55 + 8))(v40, v39);
  (*(void (**)(char *, uint64_t))(v53 + 8))(v35, v54);
  return swift_release();
}

void sub_10038A664(void (*a1)(void *), uint64_t a2, uint64_t a3)
{
  uint64_t v6 = v5;
  uint64_t v10 = a3;
  unint64_t v7 = sub_100463778((uint64_t)_swiftEmptyArrayStorage);
  uint64_t v8 = sub_100007864( (unint64_t *)&qword_10099C2E0,  (uint64_t (*)(uint64_t))type metadata accessor for CommandError,  (uint64_t)&unk_1007E3980);
  _BridgedStoredNSError.init(_:userInfo:)(&v11, &v10, v7, v6, v8);
  uint64_t v9 = v11;
  a1(v11);
}

uint64_t sub_10038A70C(uint64_t a1, void **a2, void **a3, uint64_t a4, uint64_t a5, void **a6, double a7)
{
  os_log_type_t v168 = a6;
  uint64_t v158 = a5;
  uint64_t v152 = a4;
  uint64_t v11 = sub_100004AEC(&qword_1009A4890);
  __chkstk_darwin(v11);
  uint64_t v151 = (uint64_t)&v138 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v148 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v149 = *(void *)(v148 - 8);
  __chkstk_darwin(v148);
  uint64_t v150 = (char *)&v138 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v165 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v161 = *(void *)(v165 - 8);
  __chkstk_darwin(v165);
  uint64_t v164 = (char *)&v138 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v153 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v160 = *(void *)(v153 - 8);
  __chkstk_darwin(v153);
  uint64_t v159 = (char *)&v138 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v157 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v156 = *(void *)(v157 - 8);
  __chkstk_darwin(v157);
  uint64_t v155 = (char *)&v138 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC(&qword_10099E488);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v146 = (char *)&v138 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  unint64_t v21 = (char *)&v138 - v20;
  uint64_t v167 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
  uint64_t v163 = *(void *)(v167 - 8);
  uint64_t v22 = __chkstk_darwin(v167);
  uint64_t v143 = (void ***)((char *)&v138 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v22);
  uint64_t v142 = (uint64_t)&v138 - v24;
  uint64_t v25 = type metadata accessor for UUID(0LL);
  uint64_t v26 = *(void **)(v25 - 8);
  uint64_t v27 = v26[8];
  uint64_t v28 = __chkstk_darwin(v25);
  uint64_t v144 = (char *)&v138 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = __chkstk_darwin(v28);
  uint64_t v147 = (char *)&v138 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v141 = (char *)&v138 - v32;
  __chkstk_darwin(v31);
  uint64_t v34 = (char *)&v138 - v33;
  if (qword_10099B330 != -1) {
    swift_once(&qword_10099B330, sub_100374304);
  }
  uint64_t v35 = type metadata accessor for Logger(0LL);
  uint64_t v36 = sub_10000A720(v35, (uint64_t)qword_100A2A748);
  uint64_t v37 = (void (*)(char *, void **, uint64_t))v26[2];
  uint64_t v169 = (void **)a1;
  char v154 = v37;
  uint64_t v38 = ((uint64_t (*)(char *, uint64_t, uint64_t))v37)(v34, a1, v25);
  uint64_t v140 = v36;
  uint64_t v39 = (os_log_s *)Logger.logObject.getter(v38);
  os_log_type_t v40 = static os_log_type_t.default.getter(v39);
  BOOL v41 = os_log_type_enabled(v39, v40);
  uint64_t v162 = a2;
  uint64_t v166 = a3;
  uint64_t v145 = v26;
  if (v41)
  {
    uint64_t v42 = swift_slowAlloc(32LL, -1LL);
    uint64_t v138 = (void **)swift_slowAlloc(64LL, -1LL);
    double aBlock = v138;
    *(_DWORD *)uint64_t v42 = 136446722;
    uint64_t v43 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v44 = dispatch thunk of CustomStringConvertible.description.getter(v25, v43);
    uint64_t v177 = sub_1003F11D4(v44, v45, (uint64_t *)&aBlock);
    uint64_t v46 = v162;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease();
    uint64_t v139 = (void (*)(char *, uint64_t))v26[1];
    v139(v34, v25);
    *(_WORD *)(v42 + 12) = 2082;
    unint64_t v47 = 0xE800000000000000LL;
    uint64_t v48 = 0x746C75616665642ELL;
    switch((unint64_t)v46)
    {
      case 0uLL:
        break;
      case 1uLL:
        uint64_t v48 = 0x676E69676E61722ELL;
        break;
      case 2uLL:
        unint64_t v47 = 0xE900000000000067LL;
        goto LABEL_12;
      case 3uLL:
        unint64_t v47 = 0x8000000100857490LL;
        uint64_t v48 = 0xD000000000000010LL;
        break;
      case 4uLL:
        unint64_t v47 = 0xEF64656D7269666ELL;
        uint64_t v48 = 0x6F4365756575712ELL;
        break;
      case 5uLL:
        unint64_t v47 = 0xEE0074726F685367LL;
LABEL_12:
        uint64_t v48 = 0x6E696B636172742ELL;
        break;
      default:
        unint64_t v47 = 0xE700000000000000LL;
        uint64_t v48 = 0x6E776F6E6B6E75LL;
        break;
    }

    uint64_t v177 = sub_1003F11D4(v48, v47, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v42 + 14, v42 + 22);
    swift_bridgeObjectRelease();
    *(_WORD *)(v42 + 22) = 2048;
    uint64_t v177 = *(void *)&a7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v177, v178, v42 + 24, v42 + 32);
    _os_log_impl( (void *)&_mh_execute_header,  v39,  v40,  "playSoundOneShot %{public}s context %{public}s timeout %f",  (uint8_t *)v42,  0x20u);
    uint64_t v49 = v138;
    swift_arrayDestroy(v138, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v49, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);

    a3 = v166;
  }

  else
  {
    uint64_t v139 = (void (*)(char *, uint64_t))v26[1];
    v139(v34, v25);
  }

  uint64_t v50 = (void **)((char *)a3 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators);
  __n128 v51 = swift_beginAccess( (char *)a3 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators,  &v177,  0LL,  0LL);
  uint64_t v52 = *v50;
  uint64_t v53 = v163;
  if (!*(void *)(*v50 + 16LL))
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v163 + 56))(v21, 1LL, 1LL, v167, v51);
LABEL_20:
    uint64_t v143 = v50;
    sub_100015794((uint64_t)v21, &qword_10099E488);
LABEL_21:
    uint64_t v58 = swift_allocObject(&unk_100954890, 24LL, 7LL);
    swift_unknownObjectWeakInit(v58 + 16, a3);
    uint64_t v59 = (uint64_t)v147;
    uint64_t v60 = v154;
    v154(v147, v169, v25);
    uint64_t v61 = v144;
    v60(v144, v168, v25);
    uint64_t v62 = v25;
    uint64_t v63 = v145;
    uint64_t v64 = *((unsigned __int8 *)v145 + 80);
    uint64_t v65 = (v64 + 16) & ~v64;
    uint64_t v66 = (v27 + v64 + v65) & ~v64;
    unint64_t v67 = (v27 + v66 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v68 = swift_allocObject(&unk_100954F48, v67 + 8, v64 | 7);
    uint64_t v69 = v68 + v65;
    uint64_t v70 = (void (*)(uint64_t, uint64_t, uint64_t))v63[4];
    uint64_t v71 = v62;
    v70(v69, v59, v62);
    v70(v68 + v66, (uint64_t)v61, v62);
    *(void *)(v68 + v67) = v58;
    uint64_t v72 = (void (*)(uint64_t, uint64_t, uint64_t))v60;
    uint64_t v175 = sub_10039ACCC;
    uint64_t v176 = v68;
    double aBlock = _NSConcreteStackBlock;
    uint64_t v172 = 1107296256LL;
    uint64_t v173 = sub_1001C31E8;
    uint64_t v174 = &unk_100954F60;
    uint64_t v73 = _Block_copy(&aBlock);
    uint64_t v170 = _swiftEmptyArrayStorage;
    uint64_t v74 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    swift_retain();
    uint64_t v75 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v76 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v77 = v164;
    uint64_t v144 = (char *)v75;
    uint64_t v145 = (void *)v74;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v170, v75, v76, v165, v74);
    uint64_t v78 = type metadata accessor for DispatchWorkItem(0LL);
    swift_allocObject(v78, *(unsigned int *)(v78 + 48), *(unsigned __int16 *)(v78 + 52));
    uint64_t v79 = DispatchWorkItem.init(flags:block:)(v77, v73);
    swift_release();
    swift_release();
    v72(v59, (uint64_t)v169, v71);
    uint64_t v80 = (uint64_t)v146;
    uint64_t v81 = (uint64_t)v169;
    v72((uint64_t)v146, (uint64_t)v168, v71);
    unint64_t v82 = (int *)v167;
    v72(v80 + *(int *)(v167 + 20), v81, v71);
    uint64_t v83 = v80 + v82[8];
    swift_retain();
    static Date.trustedNow.getter(v83);
    *(_BYTE *)(v80 + v82[6]) = 1;
    *(void *)(v80 + v82[7]) = v79;
    *(void *)(v80 + v82[9]) = 0LL;
    *(_BYTE *)(v80 + v82[10]) = 0;
    (*(void (**)(uint64_t, void, uint64_t, int *))(v163 + 56))(v80, 0LL, 1LL, v82);
    swift_beginAccess(v143, &aBlock, 33LL, 0LL);
    sub_1000451A8(v80, v59);
    swift_endAccess(&aBlock);
    if (qword_10099B300 != -1) {
      swift_once(&qword_10099B300, sub_1003459EC);
    }
    uint64_t v84 = qword_100A2A6C8;
    uint64_t v85 = (uint64_t)v150;
    v72((uint64_t)v150, v81, v71);
    uint64_t v86 = v148;
    static Date.trustedNow.getter(v85 + *(int *)(v148 + 20));
    *(_BYTE *)(v85 + *(int *)(v86 + 24)) = 24;
    uint64_t v87 = sub_100004AEC(&qword_10099D318);
    uint64_t v88 = *(unsigned __int8 *)(v149 + 80);
    uint64_t v89 = (v88 + 32) & ~v88;
    uint64_t v90 = swift_allocObject(v87, v89 + *(void *)(v149 + 72), v88 | 7);
    *(_OWORD *)(v90 + 16) = xmmword_1007E67D0;
    sub_10001DC4C(v85, v90 + v89, type metadata accessor for BeaconObservation);
    uint64_t v91 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v91);
    *(&v138 - 4) = (void **)v84;
    *(&v138 - 3) = (void **)v90;
    *(&v138 - 2) = 0LL;
    *(&v138 - 1) = 0LL;
    static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.BeaconObservationStore.save",  57LL,  2LL,  sub_1002DDE58);
    uint64_t v167 = 0LL;
    swift_bridgeObjectRelease();
    sub_100018C68(v85, type metadata accessor for BeaconObservation);
    uint64_t v92 = v151;
    sub_10050BDEC(v81, v151);
    uint64_t v93 = type metadata accessor for WildModeAssociationRecord(0LL);
    LODWORD(v90) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v93 - 8) + 48LL))(v92, 1LL, v93);
    sub_100015794(v92, &qword_1009A4890);
    if ((_DWORD)v90 == 1) {
      sub_1004E696C(0xAu);
    }
    else {
      sub_1004E97E0();
    }
    uint64_t v94 = v153;
    uint64_t v95 = v152;
    sub_100004AB0();
    uint64_t v96 = v156;
    uint64_t v97 = v155;
    uint64_t v98 = v157;
    (*(void (**)(char *, void, uint64_t))(v156 + 104))( v155,  enum case for DispatchQoS.QoSClass.default(_:),  v157);
    double v99 = (void *)static OS_dispatch_queue.global(qos:)(v97);
    (*(void (**)(char *, uint64_t))(v96 + 8))(v97, v98);
    uint64_t v100 = swift_allocObject(&unk_100954F98, 32LL, 7LL);
    uint64_t v101 = v158;
    *(void *)(v100 + 16) = v95;
    *(void *)(v100 + 24) = v101;
    uint64_t v175 = sub_10020FF70;
    uint64_t v176 = v100;
    double aBlock = _NSConcreteStackBlock;
    uint64_t v172 = 1107296256LL;
    uint64_t v173 = sub_1001C31E8;
    uint64_t v174 = &unk_100954FB0;
    uint64_t v102 = _Block_copy(&aBlock);
    uint64_t v103 = swift_retain();
    unsigned int v104 = v159;
    static DispatchQoS.unspecified.getter(v103);
    uint64_t v170 = _swiftEmptyArrayStorage;
    uint64_t v105 = v164;
    uint64_t v106 = v76;
    uint64_t v107 = v165;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v170, v144, v106, v165, v145);
    OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v104, v105, v102);
    _Block_release(v102);

    (*(void (**)(char *, uint64_t))(v161 + 8))(v105, v107);
    (*(void (**)(char *, uint64_t))(v160 + 8))(v104, v94);
    swift_release();
    uint64_t v108 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v108);
    uint64_t v109 = (uint64_t)v169;
    *(&v138 - 6) = v166;
    *(&v138 - 5) = (void **)v109;
    uint64_t v110 = v162;
    *(&v138 - 4) = v168;
    *(&v138 - 3) = v110;
    *((double *)&v138 - 2) = a7;
    static Transaction.named<A>(_:with:)("SoundPlaybackManager.playSoundOneShot", 37LL, 2LL, sub_10039ACE0, &v138 - 8);
    return swift_release();
  }

  swift_bridgeObjectRetain(*v50);
  unint64_t v54 = sub_10030D124((uint64_t)v169);
  if ((v55 & 1) != 0)
  {
    sub_10001DC4C( *(void *)(v52 + 56) + *(void *)(v53 + 72) * v54,  (uint64_t)v21,  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    uint64_t v56 = 0LL;
  }

  else
  {
    uint64_t v56 = 1LL;
  }

  uint64_t v57 = v167;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v53 + 56))(v21, v56, 1LL, v167);
  swift_bridgeObjectRelease();
  uint64_t v112 = v142;
  sub_10002218C((uint64_t)v21, v142, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  if (qword_10099B338 != -1) {
    swift_once(&qword_10099B338, sub_100374388);
  }
  if (sub_1000BAD04(*(unsigned __int8 *)(v112 + *(int *)(v167 + 24)), qword_100A2A760))
  {
    uint64_t v143 = v50;
    sub_100018C68(v112, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    goto LABEL_21;
  }

  uint64_t v113 = v141;
  v154(v141, v169, v25);
  uint64_t v114 = (uint64_t)v143;
  uint64_t v115 = sub_10001DC4C(v112, (uint64_t)v143, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  uint64_t v116 = (os_log_s *)Logger.logObject.getter(v115);
  os_log_type_t v117 = static os_log_type_t.error.getter(v116);
  if (os_log_type_enabled(v116, v117))
  {
    uint64_t v118 = swift_slowAlloc(22LL, -1LL);
    double aBlock = (void **)swift_slowAlloc(64LL, -1LL);
    *(_DWORD *)uint64_t v118 = 136315394;
    uint64_t v119 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v120 = dispatch thunk of CustomStringConvertible.description.getter(v25, v119);
    uint64_t v170 = (void *)sub_1003F11D4(v120, v121, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v170, &aBlock, v118 + 4, v118 + 12);
    swift_bridgeObjectRelease();
    v139(v113, v25);
    *(_WORD *)(v118 + 12) = 2080;
    __asm { BR              X10 }
  }

  v139(v113, v25);
  sub_100018C68(v114, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);

  uint64_t v122 = v153;
  sub_100004AB0();
  uint64_t v123 = v156;
  uint64_t v124 = v155;
  uint64_t v125 = v157;
  (*(void (**)(char *, void, uint64_t))(v156 + 104))( v155,  enum case for DispatchQoS.QoSClass.default(_:),  v157);
  uint64_t v126 = (void *)static OS_dispatch_queue.global(qos:)(v124);
  (*(void (**)(char *, uint64_t))(v123 + 8))(v124, v125);
  uint64_t v127 = swift_allocObject(&unk_100954FE8, 32LL, 7LL);
  uint64_t v128 = v158;
  *(void *)(v127 + 16) = v152;
  *(void *)(v127 + 24) = v128;
  uint64_t v175 = sub_10039AD00;
  uint64_t v176 = v127;
  double aBlock = _NSConcreteStackBlock;
  uint64_t v172 = 1107296256LL;
  uint64_t v173 = sub_1001C31E8;
  uint64_t v174 = &unk_100955000;
  uint64_t v129 = _Block_copy(&aBlock);
  uint64_t v130 = swift_retain();
  uint64_t v131 = v159;
  static DispatchQoS.unspecified.getter(v130);
  uint64_t v170 = _swiftEmptyArrayStorage;
  uint64_t v132 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v133 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v134 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  unint64_t v135 = v164;
  uint64_t v136 = v133;
  uint64_t v137 = v165;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v170, v136, v134, v165, v132);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v131, v135, v129);
  _Block_release(v129);

  (*(void (**)(char *, uint64_t))(v161 + 8))(v135, v137);
  (*(void (**)(char *, uint64_t))(v160 + 8))(v131, v122);
  sub_100018C68(v142, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  return swift_release();
}

void sub_10038B998(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), const char *a5)
{
  BOOL v41 = a5;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = &v37[-((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  __chkstk_darwin(v11);
  uint64_t v15 = &v37[-v14];
  uint64_t v42 = a3 + 16;
  if (qword_10099B330 != -1) {
    swift_once(&qword_10099B330, sub_100374304);
  }
  uint64_t v16 = type metadata accessor for Logger(0LL);
  sub_10000A720(v16, (uint64_t)qword_100A2A748);
  uint64_t v17 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v10 + 16);
  v17(v15, a1, v9);
  uint64_t v18 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v17)(v13, a2, v9);
  uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v20 = a4();
  int v21 = v20;
  if (os_log_type_enabled(v19, v20))
  {
    uint64_t v22 = swift_slowAlloc(32LL, -1LL);
    uint64_t v40 = a1;
    uint64_t v23 = v22;
    uint64_t v24 = swift_slowAlloc(64LL, -1LL);
    uint64_t v39 = v24;
    *(_DWORD *)uint64_t v23 = 141558531;
    uint64_t v43 = 1752392040LL;
    v44[0] = v24;
    int v38 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v23 + 4, v23 + 12);
    *(_WORD *)(v23 + 12) = 2081;
    uint64_t v25 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v9, v25);
    uint64_t v43 = sub_1003F11D4(v26, v27, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v23 + 14, v23 + 22);
    swift_bridgeObjectRelease();
    uint64_t v28 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
    v28(v15, v9);
    *(_WORD *)(v23 + 22) = 2082;
    uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter(v9, v25);
    uint64_t v43 = sub_1003F11D4(v29, v30, v44);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v43, v44, v23 + 24, v23 + 32);
    swift_bridgeObjectRelease();
    v28(v13, v9);
    _os_log_impl((void *)&_mh_execute_header, v19, (os_log_type_t)v38, v41, (uint8_t *)v23, 0x20u);
    uint64_t v31 = v39;
    swift_arrayDestroy(v39, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1LL, -1LL);
    uint64_t v32 = v23;
    a1 = v40;
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  else
  {
    uint64_t v33 = *(void (**)(_BYTE *, uint64_t))(v10 + 8);
    v33(v15, v9);
    v33(v13, v9);
  }

  uint64_t v34 = v42;
  swift_beginAccess(v42, v44, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(v34);
  if (Strong)
  {
    uint64_t v36 = (void *)Strong;
    sub_100381A9C(a1, 0, 0LL);
  }

uint64_t sub_10038BCB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v83 = a1;
  uint64_t v84 = a5;
  uint64_t v81 = a3;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v89 = *(void *)(v11 - 8);
  uint64_t v90 = v11;
  uint64_t v91 = *(void *)(v89 + 64);
  __chkstk_darwin(v11);
  uint64_t v88 = (char *)&v67 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0LL);
  uint64_t v78 = *(void *)(v13 - 8);
  uint64_t v79 = v13;
  __chkstk_darwin(v13);
  uint64_t v71 = (char *)&v67 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009B0670);
  __chkstk_darwin(v15);
  uint64_t v17 = (char *)&v67 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v72 = sub_100004AEC(&qword_1009AAED8);
  uint64_t v74 = *(void *)(v72 - 8);
  __chkstk_darwin(v72);
  uint64_t v19 = (char *)&v67 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v20 = sub_100004AEC(&qword_1009AAEE0);
  uint64_t v21 = *(void *)(v20 - 8);
  uint64_t v75 = v20;
  uint64_t v76 = v21;
  __chkstk_darwin(v20);
  uint64_t v70 = (char *)&v67 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v80 = sub_100004AEC(&qword_1009AAEE8);
  uint64_t v82 = *(void *)(v80 - 8);
  __chkstk_darwin(v80);
  uint64_t v73 = (char *)&v67 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = sub_100004AEC(&qword_1009AAEF0);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v86 = v24;
  uint64_t v87 = v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v92 = (char *)&v67 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v85 = Transaction.subscriptionCleaner.getter(v26);
  uint64_t v77 = a2;
  uint64_t v28 = (void *)sub_100381194(a3, a4, a5);
  id v93 = *(id *)(a2 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  id v29 = v93;
  v94[0] = v28;
  uint64_t v30 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
  uint64_t v69 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL);
  v69(v17, 1LL, 1LL, v30);
  id v31 = v29;
  uint64_t v32 = sub_100004AEC(&qword_1009AAE28);
  unint64_t v33 = sub_100004AB0();
  unint64_t v68 = v33;
  uint64_t v34 = sub_1000372EC( &qword_1009AAE38,  &qword_1009AAE28,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v35 = sub_100007864( (unint64_t *)&qword_1009B06C0,  (uint64_t (*)(uint64_t))sub_100004AB0,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(&v93, v17, v32, v33, v34, v35);
  sub_100015794((uint64_t)v17, &qword_1009B0670);

  uint64_t v36 = swift_release();
  uint64_t v37 = v71;
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(v36, a6);
  v94[0] = v31;
  v69(v17, 1LL, 1LL, v30);
  uint64_t v38 = sub_1000372EC( &qword_1009AAEF8,  &qword_1009AAED8,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  id v39 = v31;
  uint64_t v40 = v70;
  uint64_t v41 = v72;
  Publisher.timeout<A>(_:scheduler:options:customError:)(v37, v94, v17, sub_1003824AC, 0LL, v72, v68, v38, v35);
  sub_100015794((uint64_t)v17, &qword_1009B0670);

  (*(void (**)(char *, uint64_t))(v78 + 8))(v37, v79);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v19, v41);
  uint64_t v42 = sub_100004AEC(&qword_1009AAE30);
  uint64_t v43 = sub_1000372EC( &qword_1009AAF00,  &qword_1009AAEE0,  (uint64_t)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  uint64_t v44 = v73;
  uint64_t v45 = v75;
  Publisher.map<A>(_:)(sub_10038249C, 0LL, v75, v42, v43);
  (*(void (**)(char *, uint64_t))(v76 + 8))(v40, v45);
  uint64_t v46 = sub_100004AEC(&qword_1009AAE40);
  uint64_t v47 = sub_1000372EC( &qword_1009AAF08,  &qword_1009AAEE8,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  uint64_t v48 = sub_1000372EC(&qword_1009AAE50, &qword_1009AAE40, (uint64_t)&protocol conformance descriptor for Just<A>);
  uint64_t v49 = v80;
  Publisher.catch<A>(_:)(sub_1003824A0, 0LL, v80, v46, v47, v48);
  (*(void (**)(char *, uint64_t))(v82 + 8))(v44, v49);
  uint64_t v50 = swift_allocObject(&unk_100954890, 24LL, 7LL);
  swift_unknownObjectWeakInit(v50 + 16, v77);
  uint64_t v52 = v88;
  uint64_t v51 = v89;
  uint64_t v53 = v90;
  (*(void (**)(char *, uint64_t, uint64_t))(v89 + 16))(v88, v81, v90);
  uint64_t v54 = *(unsigned __int8 *)(v51 + 80);
  uint64_t v55 = v51;
  uint64_t v56 = (v54 + 32) & ~v54;
  unint64_t v57 = (v91 + v56 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v58 = (v57 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v59 = (v58 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v60 = swift_allocObject(&unk_100955038, v59 + 8, v54 | 7);
  *(void *)(v60 + 16) = v50;
  uint64_t v61 = v83;
  *(void *)(v60 + 24) = v83;
  (*(void (**)(uint64_t, char *, uint64_t))(v55 + 32))(v60 + v56, v52, v53);
  *(double *)(v60 + v57) = a6;
  *(void *)(v60 + v58) = v84;
  uint64_t v62 = v85;
  *(void *)(v60 + v59) = v85;
  uint64_t v63 = sub_1000372EC( &qword_1009AAF10,  &qword_1009AAEF0,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
  swift_retain();
  swift_unknownObjectRetain(v62);
  uint64_t v64 = v86;
  uint64_t v65 = v92;
  Publisher<>.sink(receiveValue:)(sub_10039ADC4, v60, v86, v63);
  swift_release();
  (*(void (**)(char *, uint64_t))(v87 + 8))(v65, v64);
  AnyCancellable.store(in:)(v61);
  swift_unknownObjectRelease(v62);
  return swift_release();
}

unint64_t sub_10038C32C( uint64_t a1, uint64_t a2, double a3, uint64_t a4, uint64_t a5, unint64_t a6)
{
  uint64_t v54 = a6;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v12 = __chkstk_darwin(v10);
  uint64_t v14 = (char *)&v50 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v50 - v15;
  uint64_t v17 = sub_100004AEC(&qword_1009AAE30);
  __chkstk_darwin(v17);
  uint64_t v19 = (unint64_t *)((char *)&v50 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  a2 += 16LL;
  swift_beginAccess(a2, v57, 0LL, 0LL);
  unint64_t result = swift_unknownObjectWeakLoadStrong(a2);
  if (result)
  {
    uint64_t v21 = (void *)result;
    Transaction.capture()();
    sub_10001581C(a1, (uint64_t)v19, &qword_1009AAE30);
    if (swift_getEnumCaseMultiPayload(v19, v17) == 1)
    {
      uint64_t v53 = a5;
      unint64_t v22 = *v19;
      if (qword_10099B330 != -1) {
        swift_once(&qword_10099B330, sub_100374304);
      }
      uint64_t v23 = type metadata accessor for Logger(0LL);
      sub_10000A720(v23, (uint64_t)qword_100A2A748);
      (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v14, v53, v10);
      sub_100399234(v22);
      unint64_t v24 = sub_100399234(v22);
      uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
      os_log_type_t v26 = static os_log_type_t.error.getter(v25);
      if (os_log_type_enabled(v25, v26))
      {
        uint64_t v27 = swift_slowAlloc(22LL, -1LL);
        uint64_t v54 = swift_slowAlloc(64LL, -1LL);
        unint64_t v56 = v54;
        *(_DWORD *)uint64_t v27 = 136315394;
        uint64_t v28 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v29 = dispatch thunk of CustomStringConvertible.description.getter(v10, v28);
        uint64_t v55 = sub_1003F11D4(v29, v30, (uint64_t *)&v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v27 + 4, v27 + 12);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
        *(_WORD *)(v27 + 12) = 2080;
        uint64_t v55 = v22;
        sub_100399234(v22);
        uint64_t v31 = String.init<A>(describing:)(&v55, &type metadata for SoundPlaybackManager.SoundPlaybackManagerError);
        uint64_t v55 = sub_1003F11D4(v31, v32, (uint64_t *)&v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v27 + 14, v27 + 22);
        swift_bridgeObjectRelease();
        sub_100399244(v22);
        sub_100399244(v22);
        _os_log_impl( (void *)&_mh_execute_header,  v25,  v26,  "Play sound oneShot failed for %s. Error %s",  (uint8_t *)v27,  0x16u);
        unint64_t v33 = v54;
        swift_arrayDestroy(v54, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v33, -1LL, -1LL);
        swift_slowDealloc(v27, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v11 + 8))(v14, v10);
        sub_100399244(v22);
        sub_100399244(v22);
      }

      unint64_t v45 = sub_100398E60();
      uint64_t v46 = swift_allocError(&type metadata for SoundPlaybackManager.SoundPlaybackManagerError, v45, 0LL, 0LL);
      *uint64_t v47 = v22;
      uint64_t v48 = swift_allocError(&type metadata for SoundPlaybackManager.SoundPlaybackManagerError, v45, 0LL, 0LL);
      *uint64_t v49 = v46;
      sub_100399234(v22);
      sub_100381A9C(v53, 0, v48);

      swift_errorRelease(v48);
      return sub_100399244(v22);
    }

    else
    {
      if (qword_10099B330 != -1) {
        swift_once(&qword_10099B330, sub_100374304);
      }
      uint64_t v34 = type metadata accessor for Logger(0LL);
      sub_10000A720(v34, (uint64_t)qword_100A2A748);
      uint64_t v35 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v11 + 16))(v16, a5, v10);
      uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
      os_log_type_t v37 = static os_log_type_t.default.getter(v36);
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = swift_slowAlloc(12LL, -1LL);
        uint64_t v53 = a5;
        id v39 = (uint8_t *)v38;
        uint64_t v52 = swift_slowAlloc(32LL, -1LL);
        unint64_t v56 = v52;
        *(_DWORD *)id v39 = 136315138;
        uint64_t v51 = v39 + 4;
        uint64_t v40 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(v10, v40);
        uint64_t v55 = sub_1003F11D4(v41, v42, (uint64_t *)&v56);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v55, &v56, v51, v39 + 12);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
        _os_log_impl((void *)&_mh_execute_header, v36, v37, "Play sound oneShot started successfully for %s", v39, 0xCu);
        uint64_t v43 = v52;
        swift_arrayDestroy(v52, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v43, -1LL, -1LL);
        uint64_t v44 = v39;
        a5 = v53;
        swift_slowDealloc(v44, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v11 + 8))(v16, v10);
      }

      sub_100384230(a5, v54, a3);
      return sub_100015794((uint64_t)v19, &qword_1009AAE30);
    }
  }

  return result;
}

uint64_t sub_10038C8D0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099E488);
  __chkstk_darwin(v4);
  uint64_t v6 = &v14[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v7 = type metadata accessor for UUID(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = &v14[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  (*(void (**)(_BYTE *, uint64_t))(v10 + 16))(v9, a2);
  uint64_t v11 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v6, 1LL, 1LL, v11);
  swift_beginAccess(a1 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators, v14, 33LL, 0LL);
  sub_1000451A8((uint64_t)v6, (uint64_t)v9);
  return swift_endAccess(v14);
}

uint64_t sub_10038C9D8(uint64_t a1, char *a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  id v51 = a2;
  uint64_t v43 = a1;
  uint64_t v44 = a5;
  uint64_t v47 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v50 = *(void *)(v47 - 8);
  __chkstk_darwin(v47);
  uint64_t v46 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v48 = *(void *)(v11 - 8);
  uint64_t v49 = v11;
  __chkstk_darwin(v11);
  unint64_t v42 = (char *)&v40 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v41 = (char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v40 - v17;
  uint64_t v45 = *(void *)&a2[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
  uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t))(v14 + 16);
  v19((char *)&v40 - v17, a3, v13);
  v19((char *)&v40 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL), a4, v13);
  uint64_t v20 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v21 = (v20 + 24) & ~v20;
  uint64_t v22 = v15 + 7;
  unint64_t v23 = (v15 + 7 + v21) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v24 = (v20 + v23 + 8) & ~v20;
  unint64_t v25 = (v22 + v24) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v26 = (v25 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v27 = swift_allocObject(&unk_100955128, v26 + 8, v20 | 7);
  *(void *)(v27 + 16) = v51;
  uint64_t v28 = *(void (**)(uint64_t, char *, uint64_t))(v14 + 32);
  v28(v27 + v21, v18, v13);
  *(double *)(v27 + v23) = a6;
  v28(v27 + v24, v41, v13);
  uint64_t v29 = v43;
  *(void *)(v27 + v25) = v44;
  *(void *)(v27 + v26) = v29;
  aBlock[4] = sub_10039AFB8;
  aBlock[5] = v27;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100955140;
  unint64_t v30 = _Block_copy(aBlock);
  id v31 = v51;
  uint64_t v32 = swift_retain();
  unint64_t v33 = v42;
  static DispatchQoS.unspecified.getter(v32);
  uint64_t v52 = _swiftEmptyArrayStorage;
  uint64_t v34 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v35 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v36 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v38 = v46;
  uint64_t v37 = v47;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v52, v35, v36, v47, v34);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v33, v38, v30);
  _Block_release(v30);
  (*(void (**)(char *, uint64_t))(v50 + 8))(v38, v37);
  (*(void (**)(char *, uint64_t))(v48 + 8))(v33, v49);
  return swift_release();
}

uint64_t sub_10038CCF4(char *a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, double a6)
{
  uint64_t v246 = a5;
  uint64_t v248 = a4;
  uint64_t v231 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0LL);
  uint64_t v230 = *(void *)(v231 - 8);
  __chkstk_darwin(v231);
  v229 = (char *)&v203 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_1009B0670);
  __chkstk_darwin(v11);
  int64_t v223 = (char *)&v203 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v225 = sub_100004AEC(&qword_1009AAED8);
  uint64_t v224 = *(void *)(v225 - 8);
  __chkstk_darwin(v225);
  uint64_t v222 = (char *)&v203 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v228 = sub_100004AEC(&qword_1009AAEE0);
  uint64_t v227 = *(void *)(v228 - 8);
  __chkstk_darwin(v228);
  v226 = (char *)&v203 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v234 = sub_100004AEC(&qword_1009AAEE8);
  uint64_t v233 = *(void *)(v234 - 8);
  __chkstk_darwin(v234);
  v232 = (char *)&v203 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v236 = sub_100004AEC(&qword_1009AAEF0);
  uint64_t v235 = *(void *)(v236 - 8);
  __chkstk_darwin(v236);
  uint64_t v245 = (char *)&v203 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v239 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v212 = *(void *)(v239 - 8);
  __chkstk_darwin(v239);
  uint64_t v240 = (char *)&v203 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v211 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v210 = *(void *)(v211 - 8);
  __chkstk_darwin(v211);
  uint64_t v209 = (char *)&v203 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v214 = type metadata accessor for DispatchTime(0LL);
  uint64_t v208 = *(void *)(v214 - 8);
  uint64_t v19 = __chkstk_darwin(v214);
  uint64_t v207 = (char *)&v203 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  v213 = (char *)&v203 - v21;
  uint64_t v217 = type metadata accessor for Date(0LL);
  uint64_t v216 = *(void *)(v217 - 8);
  __chkstk_darwin(v217);
  uint64_t v215 = (uint64_t)&v203 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v23 = sub_100004AEC(&qword_10099E488);
  uint64_t v24 = __chkstk_darwin(v23);
  v221 = (char *)&v203 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v24);
  v241 = (char *)&v203 - v26;
  uint64_t v243 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
  uint64_t v244 = *(void *)(v243 - 8);
  uint64_t v27 = __chkstk_darwin(v243);
  uint64_t v219 = (uint64_t)&v203 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v206 = (uint64_t)&v203 - v30;
  __chkstk_darwin(v29);
  uint64_t v220 = (uint64_t)&v203 - v31;
  uint64_t v255 = type metadata accessor for UUID(0LL);
  uint64_t v32 = *(void *)(v255 - 8);
  uint64_t v33 = __chkstk_darwin(v255);
  v242 = (char *)&v203 - ((v34 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v35 = __chkstk_darwin(v33);
  v251 = (char *)&v203 - v36;
  uint64_t v37 = __chkstk_darwin(v35);
  v247 = (char *)&v203 - v38;
  uint64_t v39 = __chkstk_darwin(v37);
  uint64_t v41 = (char *)&v203 - v40;
  uint64_t v237 = v42;
  __chkstk_darwin(v39);
  uint64_t v44 = (char *)&v203 - v43;
  v254 = a1;
  int v45 = sub_10037E0F4(a2);
  LODWORD(v249) = v45;
  if ((v45 & 1) != 0) {
    uint64_t v46 = 0x6575657551LL;
  }
  else {
    uint64_t v46 = 0LL;
  }
  if ((v45 & 1) != 0) {
    unint64_t v47 = 0xE500000000000000LL;
  }
  else {
    unint64_t v47 = 0xE000000000000000LL;
  }
  if (qword_10099B330 != -1) {
    swift_once(&qword_10099B330, sub_100374304);
  }
  uint64_t v48 = type metadata accessor for Logger(0LL);
  uint64_t v49 = sub_10000A720(v48, (uint64_t)qword_100A2A748);
  uint64_t v50 = *(void (**)(char *, uint64_t, uint64_t))(v32 + 16);
  uint64_t v51 = v255;
  v50(v44, a2, v255);
  v253 = v50;
  v50(v41, a3, v51);
  swift_bridgeObjectRetain(v47);
  uint64_t v218 = v49;
  uint64_t v53 = (os_log_s *)Logger.logObject.getter(v52);
  os_log_type_t v54 = static os_log_type_t.default.getter(v53);
  int v55 = v54;
  BOOL v56 = os_log_type_enabled(v53, v54);
  uint64_t v252 = a3;
  uint64_t v250 = a2;
  uint64_t v238 = v32;
  if (v56)
  {
    uint64_t v57 = swift_slowAlloc(52LL, -1LL);
    int v205 = v55;
    uint64_t v58 = v57;
    uint64_t v204 = (void **)swift_slowAlloc(96LL, -1LL);
    double aBlock = v204;
    *(_DWORD *)uint64_t v58 = 136447235;
    os_log_t v203 = v53;
    swift_bridgeObjectRetain(v47);
    uint64_t v256 = sub_1003F11D4(v46, v47, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v256, v257, v58 + 4, v58 + 12);
    swift_bridgeObjectRelease_n(v47, 3LL);
    *(_WORD *)(v58 + 12) = 2160;
    uint64_t v256 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v256, v257, v58 + 14, v58 + 22);
    *(_WORD *)(v58 + 22) = 2081;
    uint64_t v59 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v60 = v255;
    uint64_t v61 = v59;
    uint64_t v62 = dispatch thunk of CustomStringConvertible.description.getter(v255, v59);
    uint64_t v256 = sub_1003F11D4(v62, v63, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v256, v257, v58 + 24, v58 + 32);
    swift_bridgeObjectRelease();
    uint64_t v64 = *(void (**)(char *, uint64_t))(v32 + 8);
    v64(v44, v60);
    *(_WORD *)(v58 + 32) = 2048;
    uint64_t v256 = *(void *)&a6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v256, v257, v58 + 34, v58 + 42);
    *(_WORD *)(v58 + 42) = 2082;
    uint64_t v65 = v61;
    a2 = v250;
    uint64_t v66 = dispatch thunk of CustomStringConvertible.description.getter(v60, v65);
    uint64_t v256 = sub_1003F11D4(v66, v67, (uint64_t *)&aBlock);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v256, v257, v58 + 44, v58 + 52);
    swift_bridgeObjectRelease();
    uint64_t v68 = v60;
    uint64_t v69 = v64;
    v64(v41, v68);
    os_log_t v70 = v203;
    _os_log_impl( (void *)&_mh_execute_header,  v203,  (os_log_type_t)v205,  "%{public}s playSoundSingle for %{private,mask.hash}s with timeout %f. CommandId %{public}s",  (uint8_t *)v58,  0x34u);
    uint64_t v71 = v204;
    swift_arrayDestroy(v204, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v71, -1LL, -1LL);
    swift_slowDealloc(v58, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v47, 2LL);
    uint64_t v69 = *(void (**)(char *, uint64_t))(v32 + 8);
    uint64_t v72 = v255;
    v69(v44, v255);
    v69(v41, v72);
  }

  uint64_t v73 = (int *)v243;
  uint64_t v74 = v242;
  uint64_t v75 = (uint64_t)v241;
  uint64_t v76 = &v254[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators];
  __n128 v77 = swift_beginAccess(&v254[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators], &v256, 0LL, 0LL);
  uint64_t v78 = *(void *)v76;
  if (!*(void *)(v78 + 16))
  {
    (*(void (**)(uint64_t, uint64_t, uint64_t, int *, __n128))(v244 + 56))(v75, 1LL, 1LL, v73, v77);
LABEL_19:
    sub_100015794(v75, &qword_10099E488);
    goto LABEL_20;
  }

  swift_bridgeObjectRetain(v78);
  unint64_t v79 = sub_10030D124(a2);
  uint64_t v80 = v244;
  if ((v81 & 1) != 0)
  {
    sub_10001DC4C( *(void *)(v78 + 56) + *(void *)(v244 + 72) * v79,  v75,  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    uint64_t v82 = 0LL;
  }

  else
  {
    uint64_t v82 = 1LL;
  }

  (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v80 + 56))(v75, v82, 1LL, v73);
  swift_bridgeObjectRelease();
  uint64_t v153 = v75;
  uint64_t v154 = v220;
  sub_10002218C(v153, v220, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  if (!*(_BYTE *)(v154 + v73[6]))
  {
    uint64_t v166 = v215;
    static Date.trustedNow.getter(v215);
    double v167 = Date.timeIntervalSince(_:)(v154 + v73[8]);
    (*(void (**)(uint64_t, uint64_t))(v216 + 8))(v166, v217);
    if (a6 * 0.5 >= v167)
    {
      uint64_t v168 = v252;
      uint64_t v169 = v206;
      uint64_t v170 = sub_10001DC4C(v154, v206, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      uint64_t v171 = (os_log_s *)Logger.logObject.getter(v170);
      os_log_type_t v172 = static os_log_type_t.error.getter(v171);
      if (os_log_type_enabled(v171, v172))
      {
        uint64_t v173 = swift_slowAlloc(22LL, -1LL);
        uint64_t v174 = (void **)swift_slowAlloc(32LL, -1LL);
        double aBlock = v174;
        *(_DWORD *)uint64_t v173 = 136446466;
        uint64_t v175 = Date.localISO8601.getter();
        double v258 = COERCE_DOUBLE(sub_1003F11D4(v175, v176, (uint64_t *)&aBlock));
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v258, &aBlock, v173 + 4, v173 + 12);
        swift_bridgeObjectRelease();
        sub_100018C68(v169, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
        *(_WORD *)(v173 + 12) = 2050;
        double v258 = v167;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v258, &aBlock, v173 + 14, v173 + 22);
        _os_log_impl( (void *)&_mh_execute_header,  v171,  v172,  "Last retry %{public}s.\nTime since: %{public}f. Defer retry",  (uint8_t *)v173,  0x16u);
        swift_arrayDestroy(v174, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v174, -1LL, -1LL);
        swift_slowDealloc(v173, -1LL, -1LL);
      }

      else
      {
        sub_100018C68(v169, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      }

      uint64_t v177 = v254;
      uint64_t v246 = *(void *)&v254[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
      uint64_t v178 = v207;
      static DispatchTime.now()(v179);
      + infix(_:_:)(v178, a6 - v167);
      uint64_t v249 = *(void (**)(char *, uint64_t))(v208 + 8);
      v249(v178, v214);
      uint64_t v180 = v247;
      uint64_t v181 = v255;
      uint64_t v182 = v253;
      v253(v247, v168, v255);
      id v183 = v251;
      v182(v251, v250, v181);
      uint64_t v184 = v238;
      uint64_t v185 = *(unsigned __int8 *)(v238 + 80);
      uint64_t v186 = (v185 + 24) & ~v185;
      uint64_t v187 = (v237 + v185 + v186) & ~v185;
      unint64_t v188 = (v237 + v187 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      unint64_t v189 = (v188 + 15) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v190 = swift_allocObject(&unk_1009551F0, v189 + 8, v185 | 7);
      *(void *)(v190 + 16) = v177;
      uint64_t v191 = v190 + v186;
      uint64_t v192 = *(void (**)(uint64_t, char *, uint64_t))(v184 + 32);
      v192(v191, v180, v181);
      v192(v190 + v187, v183, v181);
      *(void *)(v190 + v188) = v248;
      *(double *)(v190 + v189) = a6;
      v263 = sub_10039B328;
      uint64_t v264 = v190;
      double aBlock = _NSConcreteStackBlock;
      uint64_t v260 = 1107296256LL;
      v261 = sub_1001C31E8;
      v262 = &unk_100955208;
      uint64_t v193 = _Block_copy(&aBlock);
      id v194 = v177;
      __int128 v195 = v209;
      static DispatchQoS.unspecified.getter(v194);
      double v258 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
      uint64_t v196 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
      uint64_t v197 = sub_100004AEC((uint64_t *)&unk_1009AB860);
      uint64_t v198 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
      uint64_t v199 = v240;
      uint64_t v200 = v197;
      uint64_t v201 = v239;
      dispatch thunk of SetAlgebra.init<A>(_:)(&v258, v200, v198, v239, v196);
      v202 = v213;
      OS_dispatch_queue.asyncAfter(deadline:qos:flags:execute:)(v213, v195, v199, v193);
      _Block_release(v193);
      (*(void (**)(char *, uint64_t))(v212 + 8))(v199, v201);
      (*(void (**)(char *, uint64_t))(v210 + 8))(v195, v211);
      v249(v202, v214);
      sub_100018C68(v220, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      return swift_release();
    }

    sub_100018C68(v154, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
LABEL_20:
    uint64_t v83 = swift_allocObject(&unk_100954890, 24LL, 7LL);
    swift_unknownObjectWeakInit(v83 + 16, v254);
    uint64_t v84 = (uint64_t)v247;
    uint64_t v85 = v255;
    uint64_t v86 = v253;
    v253(v247, a2, v255);
    uint64_t v87 = v251;
    v86(v251, v252, v85);
    uint64_t v88 = v238;
    uint64_t v220 = *(unsigned __int8 *)(v238 + 80);
    uint64_t v89 = (v220 + 16) & ~v220;
    uint64_t v243 = v220 | 7;
    uint64_t v90 = (v237 + v220 + v89) & ~v220;
    v241 = (char *)(v237 + 7);
    unint64_t v91 = (v237 + 7 + v90) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v92 = swift_allocObject(&unk_100955178, v91 + 8, v220 | 7);
    id v93 = *(char **)(v88 + 32);
    v242 = v93;
    ((void (*)(uint64_t, uint64_t, uint64_t))v93)(v92 + v89, v84, v85);
    ((void (*)(uint64_t, char *, uint64_t))v93)(v92 + v90, v87, v85);
    *(void *)(v92 + v91) = v83;
    v263 = sub_10039ACCC;
    uint64_t v264 = v92;
    double aBlock = _NSConcreteStackBlock;
    uint64_t v260 = 1107296256LL;
    v261 = sub_1001C31E8;
    v262 = &unk_100955190;
    uint64_t v94 = _Block_copy(&aBlock);
    double v258 = COERCE_DOUBLE(_swiftEmptyArrayStorage);
    uint64_t v95 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
    swift_retain();
    uint64_t v96 = sub_100004AEC((uint64_t *)&unk_1009AB860);
    uint64_t v97 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
    uint64_t v98 = v240;
    dispatch thunk of SetAlgebra.init<A>(_:)(&v258, v96, v97, v239, v95);
    uint64_t v99 = type metadata accessor for DispatchWorkItem(0LL);
    swift_allocObject(v99, *(unsigned int *)(v99 + 48), *(unsigned __int16 *)(v99 + 52));
    uint64_t v100 = DispatchWorkItem.init(flags:block:)(v98, v94);
    swift_release();
    swift_release();
    uint64_t v101 = v250;
    uint64_t v102 = v253;
    v253((char *)v84, v250, v85);
    uint64_t v103 = (uint64_t)v221;
    uint64_t v104 = v252;
    v102(v221, v252, v85);
    v102((char *)(v103 + v73[5]), v101, v85);
    uint64_t v105 = v103 + v73[8];
    uint64_t v240 = (char *)v100;
    swift_retain();
    static Date.trustedNow.getter(v105);
    *(_BYTE *)(v103 + v73[6]) = 0;
    *(void *)(v103 + v73[7]) = v100;
    *(void *)(v103 + v73[9]) = 0LL;
    *(_BYTE *)(v103 + v73[10]) = 0;
    (*(void (**)(uint64_t, void, uint64_t, int *))(v244 + 56))(v103, 0LL, 1LL, v73);
    uint64_t v106 = v254;
    swift_beginAccess(&v254[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators], &aBlock, 33LL, 0LL);
    sub_1000451A8(v103, v84);
    uint64_t v107 = swift_endAccess(&aBlock);
    uint64_t v244 = Transaction.subscriptionCleaner.getter(v107);
    uint64_t v108 = (void **)sub_100381194(v101, v104, v248);
    double v258 = *(double *)&v106[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
    double v109 = v258;
    double aBlock = v108;
    uint64_t v110 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
    uint64_t v111 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v110 - 8) + 56LL);
    uint64_t v112 = (uint64_t)v223;
    v111(v223, 1LL, 1LL, v110);
    uint64_t v113 = (void **)*(id *)&v109;
    uint64_t v114 = sub_100004AEC(&qword_1009AAE28);
    unint64_t v115 = sub_100004AB0();
    uint64_t v116 = sub_1000372EC( &qword_1009AAE38,  &qword_1009AAE28,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
    uint64_t v117 = sub_100007864( (unint64_t *)&qword_1009B06C0,  (uint64_t (*)(uint64_t))sub_100004AB0,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
    uint64_t v118 = v222;
    Publisher.receive<A>(on:options:)(&v258, v112, v114, v115, v116, v117);
    sub_100015794(v112, &qword_1009B0670);

    uint64_t v119 = swift_release();
    uint64_t v120 = v229;
    static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(v119, a6);
    double aBlock = v113;
    v111((char *)v112, 1LL, 1LL, v110);
    uint64_t v121 = sub_1000372EC( &qword_1009AAEF8,  &qword_1009AAED8,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
    uint64_t v122 = v113;
    uint64_t v123 = v226;
    uint64_t v124 = v225;
    Publisher.timeout<A>(_:scheduler:options:customError:)( v120,  &aBlock,  v112,  sub_1003824AC,  0LL,  v225,  v115,  v121,  v117);
    sub_100015794(v112, &qword_1009B0670);

    (*(void (**)(char *, uint64_t))(v230 + 8))(v120, v231);
    (*(void (**)(char *, uint64_t))(v224 + 8))(v118, v124);
    uint64_t v125 = sub_100004AEC(&qword_1009AAE30);
    uint64_t v126 = sub_1000372EC( &qword_1009AAF00,  &qword_1009AAEE0,  (uint64_t)&protocol conformance descriptor for Publishers.Timeout<A, B>);
    uint64_t v127 = v232;
    uint64_t v128 = v228;
    Publisher.map<A>(_:)(sub_10038249C, 0LL, v228, v125, v126);
    (*(void (**)(char *, uint64_t))(v227 + 8))(v123, v128);
    uint64_t v129 = sub_100004AEC(&qword_1009AAE40);
    uint64_t v130 = sub_1000372EC( &qword_1009AAF08,  &qword_1009AAEE8,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
    uint64_t v131 = sub_1000372EC(&qword_1009AAE50, &qword_1009AAE40, (uint64_t)&protocol conformance descriptor for Just<A>);
    uint64_t v132 = v234;
    Publisher.catch<A>(_:)(sub_1003824A0, 0LL, v234, v129, v130, v131);
    (*(void (**)(char *, uint64_t))(v233 + 8))(v127, v132);
    uint64_t v133 = swift_allocObject(&unk_100954890, 24LL, 7LL);
    swift_unknownObjectWeakInit(v133 + 16, v254);
    uint64_t v134 = v247;
    uint64_t v135 = v255;
    uint64_t v136 = v253;
    v253(v247, v250, v255);
    v136(v251, v252, v135);
    uint64_t v137 = v220;
    uint64_t v138 = (v137 + 32) & ~v137;
    unint64_t v139 = (unint64_t)&v241[v138] & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v140 = (v139 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v141 = (v137 + v140 + 9) & ~v137;
    unint64_t v142 = (unint64_t)&v241[v141] & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v143 = swift_allocObject(&unk_1009551C8, v142 + 8, v243);
    uint64_t v144 = v246;
    *(void *)(v143 + 16) = v133;
    *(void *)(v143 + 24) = v144;
    uint64_t v145 = v143 + v138;
    uint64_t v146 = (void (*)(uint64_t, char *, uint64_t))v242;
    ((void (*)(uint64_t, char *, uint64_t))v242)(v145, v134, v135);
    *(double *)(v143 + v139) = a6;
    unint64_t v147 = v143 + v140;
    *(void *)unint64_t v147 = v248;
    *(_BYTE *)(v147 + 8) = v249 & 1;
    v146(v143 + v141, v251, v135);
    uint64_t v148 = v244;
    *(void *)(v143 + v142) = v244;
    uint64_t v149 = sub_1000372EC( &qword_1009AAF10,  &qword_1009AAEF0,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
    swift_retain();
    swift_unknownObjectRetain(v148);
    uint64_t v150 = v236;
    uint64_t v151 = v245;
    Publisher<>.sink(receiveValue:)(sub_10039B1FC, v143, v236, v149);
    swift_release();
    (*(void (**)(char *, uint64_t))(v235 + 8))(v151, v150);
    AnyCancellable.store(in:)(v144);
    swift_release();
    swift_unknownObjectRelease(v148);
    return swift_release();
  }

  v253(v74, a2, v255);
  uint64_t v155 = v219;
  uint64_t v156 = sub_10001DC4C(v154, v219, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  uint64_t v157 = (os_log_s *)Logger.logObject.getter(v156);
  os_log_type_t v158 = static os_log_type_t.error.getter(v157);
  if (os_log_type_enabled(v157, v158))
  {
    uint64_t v159 = swift_slowAlloc(22LL, -1LL);
    uint64_t v160 = v155;
    v254 = (char *)swift_slowAlloc(64LL, -1LL);
    double aBlock = (void **)v254;
    *(_DWORD *)uint64_t v159 = 136315394;
    uint64_t v161 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v162 = v69;
    uint64_t v163 = v255;
    uint64_t v164 = dispatch thunk of CustomStringConvertible.description.getter(v255, v161);
    double v258 = COERCE_DOUBLE(sub_1003F11D4(v164, v165, (uint64_t *)&aBlock));
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v258, &aBlock, v159 + 4, v159 + 12);
    swift_bridgeObjectRelease();
    v162(v74, v163);
    *(_WORD *)(v159 + 12) = 2080;
    __asm { BR              X10 }
  }

  sub_100018C68(v155, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  v69(v74, v255);
  return sub_100018C68(v154, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
}

uint64_t sub_10038E528( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, double a8)
{
  v17[2] = a1;
  v17[3] = a3;
  *(double *)&v17[4] = a8;
  v17[5] = a2;
  v17[6] = a4;
  return static Transaction.named<A>(_:with:)(a5, a6, 2LL, a7, v17, (char *)&type metadata for () + 8);
}

void sub_10038E5CC( uint64_t a1, uint64_t a2, double a3, uint64_t a4, unint64_t a5, uint64_t (*a6)(uint64_t a1), int a7, uint64_t (*a8)(uint64_t a1))
{
  uint64_t v69 = a8;
  os_log_t v70 = a6;
  LODWORD(v71) = a7;
  unint64_t v73 = a5;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v65 - v17;
  __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v65 - v19;
  uint64_t v21 = sub_100004AEC(&qword_1009AAE30);
  __chkstk_darwin(v21);
  uint64_t v23 = (unint64_t *)((char *)&v65 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  a2 += 16LL;
  swift_beginAccess(a2, v76, 0LL, 0LL);
  uint64_t Strong = swift_unknownObjectWeakLoadStrong(a2);
  if (Strong)
  {
    Transaction.capture()();
    sub_10001581C(a1, (uint64_t)v23, &qword_1009AAE30);
    if (swift_getEnumCaseMultiPayload(v23, v21) == 1)
    {
      unint64_t v24 = *v23;
      unint64_t v25 = v73;
      if (qword_10099B330 != -1) {
        swift_once(&qword_10099B330, sub_100374304);
      }
      uint64_t v26 = type metadata accessor for Logger(0LL);
      sub_10000A720(v26, (uint64_t)qword_100A2A748);
      (*(void (**)(char *, unint64_t, uint64_t))(v12 + 16))(v15, v25, v11);
      sub_100399234(v24);
      unint64_t v27 = sub_100399234(v24);
      uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
      os_log_type_t v29 = static os_log_type_t.error.getter(v28);
      if (os_log_type_enabled(v28, v29))
      {
        uint64_t v30 = swift_slowAlloc(22LL, -1LL);
        uint64_t v31 = swift_slowAlloc(64LL, -1LL);
        uint64_t v75 = v31;
        *(_DWORD *)uint64_t v30 = 136315394;
        uint64_t v32 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter(v11, v32);
        uint64_t v74 = sub_1003F11D4(v33, v34, &v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v30 + 4, v30 + 12);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
        *(_WORD *)(v30 + 12) = 2080;
        uint64_t v74 = v24;
        sub_100399234(v24);
        uint64_t v35 = String.init<A>(describing:)(&v74, &type metadata for SoundPlaybackManager.SoundPlaybackManagerError);
        uint64_t v74 = sub_1003F11D4(v35, v36, &v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v30 + 14, v30 + 22);
        swift_bridgeObjectRelease();
        sub_100399244(v24);
        sub_100399244(v24);
        _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "Play sound single failed for %s. Error %s",  (uint8_t *)v30,  0x16u);
        swift_arrayDestroy(v31, 2LL, (char *)&type metadata for Any + 8);
        uint64_t v37 = v31;
        unint64_t v25 = v73;
        swift_slowDealloc(v37, -1LL, -1LL);
        swift_slowDealloc(v30, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v12 + 8))(v15, v11);
        sub_100399244(v24);
        sub_100399244(v24);
      }

      uint64_t v51 = (void *)Strong;
      if ((v71 & 1) != 0)
      {
        sub_10038ED10(v69, v25, v70, a3);
        sub_100399244(v24);
      }

      else
      {
        unint64_t v62 = sub_100398E60();
        uint64_t v63 = swift_allocError(&type metadata for SoundPlaybackManager.SoundPlaybackManagerError, v62, 0LL, 0LL);
        *uint64_t v64 = v24;
        sub_100399234(v24);
        sub_100381A9C(v25, 0, v63);
        sub_100399244(v24);

        swift_errorRelease(v63);
      }
    }

    else
    {
      uint64_t v38 = v73;
      if (qword_10099B330 != -1) {
        swift_once(&qword_10099B330, sub_100374304);
      }
      uint64_t v39 = type metadata accessor for Logger(0LL);
      uint64_t v40 = (uint64_t (*)(uint64_t))sub_10000A720(v39, (uint64_t)qword_100A2A748);
      uint64_t v68 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v12 + 16);
      uint64_t v41 = v68(v20, v38, v11);
      uint64_t v69 = v40;
      uint64_t v42 = (os_log_s *)Logger.logObject.getter(v41);
      os_log_type_t v43 = static os_log_type_t.default.getter(v42);
      if (os_log_type_enabled(v42, v43))
      {
        uint64_t v44 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v67 = swift_slowAlloc(32LL, -1LL);
        uint64_t v75 = v67;
        *(_DWORD *)uint64_t v44 = 136315138;
        uint64_t v66 = v44 + 4;
        uint64_t v45 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v46 = dispatch thunk of CustomStringConvertible.description.getter(v11, v45);
        uint64_t v74 = sub_1003F11D4(v46, v47, &v75);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v66, v44 + 12);
        swift_bridgeObjectRelease();
        uint64_t v48 = *(void (**)(char *, uint64_t))(v12 + 8);
        v48(v20, v11);
        _os_log_impl((void *)&_mh_execute_header, v42, v43, "Play sound single started successfully for %s", v44, 0xCu);
        uint64_t v49 = v67;
        swift_arrayDestroy(v67, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v49, -1LL, -1LL);
        uint64_t v50 = v44;
        uint64_t v38 = v73;
        swift_slowDealloc(v50, -1LL, -1LL);
      }

      else
      {
        uint64_t v48 = *(void (**)(char *, uint64_t))(v12 + 8);
        v48(v20, v11);
      }

      uint64_t v52 = (void *)Strong;
      sub_100384230(v38, (unint64_t)v70, a3);
      if ((v71 & 1) != 0)
      {
        uint64_t v53 = v68(v18, v38, v11);
        os_log_type_t v54 = (os_log_s *)Logger.logObject.getter(v53);
        os_log_type_t v55 = static os_log_type_t.default.getter(v54);
        if (os_log_type_enabled(v54, v55))
        {
          BOOL v56 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
          uint64_t v57 = swift_slowAlloc(32LL, -1LL);
          uint64_t v75 = v57;
          *(_DWORD *)BOOL v56 = 136315138;
          uint64_t v71 = v56 + 4;
          uint64_t v58 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
          uint64_t v59 = dispatch thunk of CustomStringConvertible.description.getter(v11, v58);
          uint64_t v74 = sub_1003F11D4(v59, v60, &v75);
          uint64_t v38 = v73;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v74, &v75, v71, v56 + 12);
          swift_bridgeObjectRelease();
          v48(v18, v11);
          _os_log_impl((void *)&_mh_execute_header, v54, v55, "Posting success alert for %s", v56, 0xCu);
          swift_arrayDestroy(v57, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v57, -1LL, -1LL);
          uint64_t v61 = v56;
          uint64_t v52 = (void *)Strong;
          swift_slowDealloc(v61, -1LL, -1LL);
        }

        else
        {
          v48(v18, v11);
        }

        sub_1003857F0(v38, 1);
      }

      sub_100015794((uint64_t)v23, &qword_1009AAE30);
    }
  }

void sub_10038ED10( uint64_t (*a1)(uint64_t a1), unint64_t a2, uint64_t (*a3)(uint64_t a1), double a4)
{
  unint64_t v5 = v4;
  uint64_t v80 = a1;
  char v81 = a3;
  uint64_t v8 = (uint64_t (*)(uint64_t))type metadata accessor for UUID(0LL);
  uint64_t v87 = *((void *)v8 - 1);
  __chkstk_darwin(v8);
  uint64_t v85 = (char *)&v76 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v83 = *(void *)(v10 - 8);
  uint64_t v84 = v10;
  __chkstk_darwin(v10);
  uint64_t v82 = (uint64_t)&v76 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009A5990);
  __chkstk_darwin(v12);
  uint64_t v89 = (char *)&v76 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v91 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v93 = *(void *)(v91 - 8);
  uint64_t v14 = __chkstk_darwin(v91);
  uint64_t v90 = (char *)&v76 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v14);
  uint64_t v92 = (uint64_t)&v76 - v17;
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v20 = (char *)&v76 - v19;
  __chkstk_darwin(v18);
  uint64_t v22 = (char *)&v76 - v21;
  uint64_t v23 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v24 = *(void *)(v23 - 8);
  __chkstk_darwin(v23);
  uint64_t v26 = (uint64_t (**)(uint64_t))((char *)&v76 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v27 = *(void **)(v5 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  void *v26 = v27;
  (*(void (**)(void *, void, uint64_t))(v24 + 104))(v26, enum case for DispatchPredicate.onQueue(_:), v23);
  id v28 = v27;
  char v29 = _dispatchPreconditionTest(_:)(v26);
  (*(void (**)(void *, uint64_t))(v24 + 8))(v26, v23);
  if ((v29 & 1) == 0) {
    goto LABEL_38;
  }
  if (qword_10099B300 != -1) {
    goto LABEL_39;
  }
  while (1)
  {
    uint64_t v30 = qword_100A2A6C8;
    uint64_t v88 = objc_autoreleasePoolPush();
    uint64_t v31 = sub_100004AEC((uint64_t *)&unk_1009AF790);
    OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, v30, v31);
    uint64_t v79 = 0LL;
    uint64_t v32 = v96[0];
    uint64_t v33 = v91;
    if (!*(void *)(v96[0] + 16) || (unint64_t v34 = sub_10030D124(a2), (v35 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      uint64_t v39 = _swiftEmptyArrayStorage;
      goto LABEL_19;
    }

    uint64_t v78 = v22;
    uint64_t v36 = *(void *)(*(void *)(v32 + 56) + 8 * v34);
    swift_bridgeObjectRetain(v36);
    swift_bridgeObjectRelease();
    uint64_t v37 = sub_1002FE5F8(v36);
    swift_bridgeObjectRelease();
    sub_1002FFE1C((uint64_t)v37);
    uint64_t v22 = v38;
    swift_release();
    uint64_t v39 = _swiftEmptyArrayStorage;
    v96[0] = (uint64_t)_swiftEmptyArrayStorage;
    uint64_t v40 = *((void *)v22 + 2);
    if (!v40) {
      break;
    }
    uint64_t v76 = v8;
    unint64_t v77 = a2;
    unint64_t v86 = v5;
    a2 = 0LL;
    uint64_t v8 = type metadata accessor for BeaconObservation;
    while (a2 < *((void *)v22 + 2))
    {
      unint64_t v5 = (*(unsigned __int8 *)(v93 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v93 + 80);
      uint64_t v41 = *(void *)(v93 + 72);
      sub_10001DC4C((uint64_t)&v22[v5 + v41 * a2], (uint64_t)v20, type metadata accessor for BeaconObservation);
      if (v20[*(int *)(v33 + 24)] == 23)
      {
        sub_10002218C((uint64_t)v20, v92, type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native(v39) & 1) == 0) {
          sub_100032AA8(0, v39[2] + 1LL, 1);
        }
        uint64_t v39 = (void *)v96[0];
        unint64_t v43 = *(void *)(v96[0] + 16);
        unint64_t v42 = *(void *)(v96[0] + 24);
        if (v43 >= v42 >> 1)
        {
          sub_100032AA8(v42 > 1, v43 + 1, 1);
          uint64_t v39 = (void *)v96[0];
        }

        v39[2] = v43 + 1;
        sub_10002218C(v92, (uint64_t)v39 + v5 + v43 * v41, type metadata accessor for BeaconObservation);
        uint64_t v33 = v91;
      }

      else
      {
        sub_100018C68((uint64_t)v20, type metadata accessor for BeaconObservation);
      }

      if (v40 == ++a2)
      {
        uint64_t v39 = (void *)v96[0];
        unint64_t v5 = v86;
        a2 = v77;
        uint64_t v8 = v76;
        goto LABEL_18;
      }
    }

    __break(1u);
LABEL_38:
    __break(1u);
LABEL_39:
    swift_once(&qword_10099B300, sub_1003459EC);
  }

uint64_t sub_10038F6A0( void (*a1)(void, void, void, void), char *a2, uint64_t a3, uint64_t a4, char *a5, double a6)
{
  uint64_t v255 = a4;
  uint64_t v254 = a3;
  v267 = a2;
  uint64_t v243 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v244 = *(void *)(v243 - 8);
  __chkstk_darwin(v243);
  uint64_t v246 = (char *)&v225 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v258 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v225 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v259 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v257 = *(void *)(v259 - 8);
  __chkstk_darwin(v259);
  uint64_t v256 = (char *)&v225 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v253 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v252 = *(void *)(v253 - 8);
  __chkstk_darwin(v253);
  v251 = (char *)&v225 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_10099E488);
  uint64_t v16 = __chkstk_darwin(v15);
  v242 = (char *)&v225 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v249 = (char *)&v225 - v18;
  uint64_t v262 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
  uint64_t v261 = *(void *)(v262 - 8);
  uint64_t v19 = __chkstk_darwin(v262);
  uint64_t v237 = (uint64_t)&v225 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v21 = __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v225 - v22;
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v245 = (uint64_t)&v225 - v25;
  uint64_t v26 = __chkstk_darwin(v24);
  uint64_t v227 = (uint64_t)&v225 - v27;
  uint64_t v28 = __chkstk_darwin(v26);
  uint64_t v228 = (uint64_t)&v225 - v29;
  uint64_t v30 = __chkstk_darwin(v28);
  uint64_t v229 = (uint64_t)&v225 - v31;
  __chkstk_darwin(v30);
  uint64_t v230 = (uint64_t)&v225 - v32;
  uint64_t v33 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v34 = __chkstk_darwin(v33);
  uint64_t v232 = (uint64_t)&v225 - ((v35 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v34);
  uint64_t v37 = (__int128 *)((char *)&v225 - v36);
  uint64_t v38 = type metadata accessor for UUID(0LL);
  uint64_t v39 = *(void **)(v38 - 8);
  uint64_t v40 = __chkstk_darwin(v38);
  v241 = (char *)&v225 - ((v41 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v42 = __chkstk_darwin(v40);
  uint64_t v240 = (char *)&v225 - v43;
  uint64_t v44 = __chkstk_darwin(v42);
  v265 = (char *)&v225 - v45;
  uint64_t v46 = __chkstk_darwin(v44);
  uint64_t v234 = (char *)&v225 - v47;
  uint64_t v48 = __chkstk_darwin(v46);
  uint64_t v260 = (char *)&v225 - v49;
  uint64_t v50 = __chkstk_darwin(v48);
  v226 = (char *)&v225 - v51;
  uint64_t v52 = __chkstk_darwin(v50);
  uint64_t v225 = (char *)&v225 - v53;
  uint64_t v54 = __chkstk_darwin(v52);
  uint64_t v231 = (char *)&v225 - v55;
  uint64_t v56 = __chkstk_darwin(v54);
  uint64_t v236 = (char *)&v225 - v57;
  uint64_t v58 = __chkstk_darwin(v56);
  v270 = (char *)&v225 - v59;
  __chkstk_darwin(v58);
  uint64_t v61 = (char *)&v225 - v60;
  if (qword_10099B330 != -1) {
    swift_once(&qword_10099B330, sub_100374304);
  }
  uint64_t v235 = v23;
  uint64_t v250 = v12;
  uint64_t v62 = type metadata accessor for Logger(0LL);
  uint64_t v63 = sub_10000A720(v62, (uint64_t)qword_100A2A748);
  uint64_t v64 = (void (*)(void, void, void))v39[2];
  uint64_t v264 = a1;
  v269 = v64;
  uint64_t v65 = ((uint64_t (*)(char *, void (*)(void, void, void, void), uint64_t))v64)( v61,  a1,  v38);
  uint64_t v263 = v63;
  uint64_t v66 = (os_log_s *)Logger.logObject.getter(v65);
  os_log_type_t v67 = static os_log_type_t.default.getter(v66);
  BOOL v68 = os_log_type_enabled(v66, v67);
  v268 = v39;
  uint64_t v248 = v10;
  v266 = a5;
  if (v68)
  {
    uint64_t v69 = swift_slowAlloc(32LL, -1LL);
    uint64_t v70 = swift_slowAlloc(32LL, -1LL);
    uint64_t aBlock = v70;
    *(_DWORD *)uint64_t v69 = 141558531;
    *(void *)&__int128 v280 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v280, (char *)&v280 + 8, v69 + 4, v69 + 12);
    *(_WORD *)(v69 + 12) = 2081;
    uint64_t v71 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v72 = dispatch thunk of CustomStringConvertible.description.getter(v38, v71);
    *(void *)&__int128 v280 = sub_1003F11D4(v72, v73, &aBlock);
    uint64_t v39 = v268;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v280, (char *)&v280 + 8, v69 + 14, v69 + 22);
    swift_bridgeObjectRelease();
    unint64_t v74 = (void (*)(char *, uint64_t))v39[1];
    v74(v61, v38);
    *(_WORD *)(v69 + 22) = 2048;
    *(double *)&__int128 v280 = a6;
    uint64_t v75 = v74;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v280, (char *)&v280 + 8, v69 + 24, v69 + 32);
    _os_log_impl( (void *)&_mh_execute_header,  v66,  v67,  "stopSoundSingle %{private,mask.hash}s timeout %f",  (uint8_t *)v69,  0x20u);
    swift_arrayDestroy(v70, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v70, -1LL, -1LL);
    swift_slowDealloc(v69, -1LL, -1LL);
  }

  else
  {
    uint64_t v75 = (void (*)(char *, uint64_t))v39[1];
    v75(v61, v38);
  }

  uint64_t v76 = v267;
  unint64_t v77 = &v267[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators];
  swift_beginAccess(&v267[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators], v283, 0LL, 0LL);
  uint64_t v239 = v77;
  uint64_t v78 = *(void *)v77;
  uint64_t v79 = *(void *)&v76[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_beaconStore];
  swift_bridgeObjectRetain(v78);
  uint64_t v80 = v264;
  uint64_t v247 = v79;
  sub_100504C28((uint64_t)v264, (uint64_t)&v280);
  uint64_t v238 = v75;
  if (!v281)
  {
    sub_100015794((uint64_t)&v280, (uint64_t *)&unk_1009A9C40);
LABEL_17:
    uint64_t v104 = (uint64_t)v270;
    uint64_t v105 = v269;
    goto LABEL_18;
  }

  sub_100012EC0(&v280, (uint64_t)&aBlock);
  char v81 = v277;
  uint64_t v82 = v278;
  sub_100012ED8(&aBlock, (uint64_t)v277);
  if ((v82[15](v81, v82) & 1) == 0)
  {
LABEL_16:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
    goto LABEL_17;
  }

  uint64_t v83 = v277;
  uint64_t v84 = (void (**)(void *, void *))v278;
  sub_100012ED8(&aBlock, (uint64_t)v277);
  v84[24](v83, v84);
  uint64_t v85 = v39;
  unint64_t v86 = (unsigned int (*)(__int128 *, uint64_t, uint64_t))v39[6];
  if (v86(v37, 1LL, v38) == 1)
  {
    uint64_t v87 = &qword_10099D8A0;
    uint64_t v88 = v37;
LABEL_15:
    sub_100015794((uint64_t)v88, v87);
    goto LABEL_16;
  }

  uint64_t v89 = (void (*)(char *, __int128 *, uint64_t))v85[4];
  uint64_t v90 = (uint64_t)v236;
  v89(v236, v37, v38);
  sub_100513108(v90, (uint64_t)&v272);
  if (!v273)
  {
    uint64_t v75 = v238;
    v238((char *)v90, v38);
    uint64_t v87 = (uint64_t *)&unk_1009AA790;
    uint64_t v88 = &v272;
    goto LABEL_15;
  }

  uint64_t v233 = v78;
  sub_100012EC0(&v272, (uint64_t)&v280);
  uint64_t v91 = v281;
  uint64_t v92 = v282;
  sub_100012ED8(&v280, v281);
  uint64_t v93 = (*(uint64_t (**)(uint64_t, uint64_t))(v92 + 16))(v91, v92);
  uint64_t v94 = sub_100004AEC((uint64_t *)&unk_1009A9C20);
  uint64_t v95 = *((unsigned __int8 *)v85 + 80);
  uint64_t v96 = (v95 + 32) & ~v95;
  uint64_t v97 = swift_allocObject(v94, v96 + v85[9], v95 | 7);
  *(_OWORD *)(v97 + 16) = xmmword_1007E67D0;
  uint64_t v98 = v97 + v96;
  uint64_t v100 = v277;
  uint64_t v99 = v278;
  sub_100012ED8(&aBlock, (uint64_t)v277);
  (*(void (**)(void *))(*((void *)v99[1] + 1) + 32LL))(v100);
  uint64_t v101 = sub_1003CE474(v97, v93);
  swift_setDeallocating(v97);
  swift_arrayDestroy(v98, *(void *)(v97 + 16), v38);
  swift_deallocClassInstance(v97, 32LL, 7LL);
  uint64_t v102 = v232;
  sub_1006F2C58((uint64_t)v101, v232);
  swift_release();
  unsigned int v103 = v86((__int128 *)v102, 1LL, v38);
  uint64_t v104 = (uint64_t)v270;
  if (v103 == 1)
  {
    uint64_t v75 = v238;
    v238(v236, v38);
    sub_100015794(v102, &qword_10099D8A0);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v280);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
    uint64_t v105 = v269;
    uint64_t v78 = v233;
LABEL_18:
    uint64_t v106 = v260;
LABEL_19:
    uint64_t v107 = ((uint64_t (*)(char *, void (*)(void, void, void, void), uint64_t))v105)( v106,  v80,  v38);
    goto LABEL_20;
  }

  uint64_t v126 = (uint64_t)v231;
  v89(v231, (__int128 *)v102, v38);
  uint64_t v78 = v233;
  uint64_t v105 = v269;
  uint64_t v106 = v260;
  if (!*(void *)(v233 + 16) || (unint64_t v127 = sub_10030D124(v126), (v128 & 1) == 0))
  {
    uint64_t v75 = v238;
    v238((char *)v126, v38);
    v75(v236, v38);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v280);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
    goto LABEL_19;
  }

  uint64_t v129 = *(void *)(v261 + 72);
  uint64_t v130 = v229;
  sub_10001DC4C( *(void *)(v78 + 56) + v129 * v127,  v229,  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  uint64_t v131 = v230;
  sub_10002218C(v130, v230, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  uint64_t v75 = v238;
  if (!*(void *)(v78 + 16) || (unint64_t v132 = sub_10030D124((uint64_t)v80), (v133 & 1) == 0))
  {
    uint64_t v155 = v131;
LABEL_36:
    sub_100018C68(v155, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    uint64_t v156 = (char *)v126;
LABEL_37:
    v75(v156, v38);
    v75(v236, v38);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v280);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
    uint64_t v106 = v260;
    uint64_t v105 = v269;
    uint64_t v107 = ((uint64_t (*)(char *, void (*)(void, void, void, void), uint64_t))v269)( v260,  v80,  v38);
LABEL_20:
    uint64_t v108 = (os_log_s *)Logger.logObject.getter(v107);
    os_log_type_t v109 = static os_log_type_t.default.getter(v108);
    if (os_log_type_enabled(v108, v109))
    {
      uint64_t v110 = v106;
      uint64_t v111 = swift_slowAlloc(22LL, -1LL);
      uint64_t v112 = swift_slowAlloc(32LL, -1LL);
      uint64_t v233 = v78;
      uint64_t v113 = v112;
      uint64_t aBlock = v112;
      *(_DWORD *)uint64_t v111 = 141558275;
      *(void *)&__int128 v280 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v280, (char *)&v280 + 8, v111 + 4, v111 + 12);
      *(_WORD *)(v111 + 12) = 2081;
      uint64_t v114 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v115 = dispatch thunk of CustomStringConvertible.description.getter(v38, v114);
      *(void *)&__int128 v280 = sub_1003F11D4(v115, v116, &aBlock);
      uint64_t v104 = (uint64_t)v270;
      uint64_t v80 = v264;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v280, (char *)&v280 + 8, v111 + 14, v111 + 22);
      swift_bridgeObjectRelease();
      uint64_t v117 = v110;
      uint64_t v105 = v269;
      v75(v117, v38);
      _os_log_impl( (void *)&_mh_execute_header,  v108,  v109,  "stopSoundSingle for %{private,mask.hash}s directly.",  (uint8_t *)v111,  0x16u);
      swift_arrayDestroy(v113, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v118 = v113;
      uint64_t v78 = v233;
      swift_slowDealloc(v118, -1LL, -1LL);
      swift_slowDealloc(v111, -1LL, -1LL);
    }

    else
    {
      v75(v106, v38);
    }

    v105(v104, v80, v38);
    uint64_t v119 = v250;
    uint64_t v120 = (int *)v262;
    uint64_t v121 = (uint64_t)v249;
    uint64_t v122 = v261;
    if (!*(void *)(v78 + 16)) {
      goto LABEL_42;
    }
    goto LABEL_24;
  }

  uint64_t v134 = v227;
  sub_10001DC4C( *(void *)(v78 + 56) + v132 * v129,  v227,  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  uint64_t v135 = v134;
  uint64_t v136 = v228;
  sub_10002218C(v135, v228, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  if ((static UUID.== infix(_:_:)(v136, v131) & 1) == 0)
  {
    sub_100018C68(v136, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    uint64_t v155 = v131;
    goto LABEL_36;
  }

  uint64_t v120 = (int *)v262;
  if (*(_BYTE *)(v131 + *(int *)(v262 + 40)) != 1)
  {
    sub_100018C68(v136, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    sub_100018C68(v131, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    uint64_t v156 = v231;
    goto LABEL_37;
  }

  uint64_t v137 = v231;
  uint64_t v138 = v269;
  v269(v104, v231, v38);
  unint64_t v139 = v225;
  v138(v225, v80, v38);
  unint64_t v140 = v226;
  uint64_t v141 = ((uint64_t (*)(char *, char *, uint64_t))v138)(v226, v137, v38);
  unint64_t v142 = (os_log_s *)Logger.logObject.getter(v141);
  os_log_type_t v143 = static os_log_type_t.default.getter(v142);
  int v144 = v143;
  if (os_log_type_enabled(v142, v143))
  {
    uint64_t v145 = swift_slowAlloc(42LL, -1LL);
    uint64_t v146 = swift_slowAlloc(64LL, -1LL);
    *(void *)&__int128 v272 = v146;
    *(_DWORD *)uint64_t v145 = 141558787;
    uint64_t v271 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v271, &v272, v145 + 4, v145 + 12);
    *(_WORD *)(v145 + 12) = 2081;
    uint64_t v147 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    LODWORD(v264) = v144;
    uint64_t v148 = dispatch thunk of CustomStringConvertible.description.getter(v38, v147);
    uint64_t v271 = sub_1003F11D4(v148, v149, (uint64_t *)&v272);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v271, &v272, v145 + 14, v145 + 22);
    swift_bridgeObjectRelease();
    v238(v139, v38);
    *(_WORD *)(v145 + 22) = 2160;
    uint64_t v271 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v271, &v272, v145 + 24, v145 + 32);
    *(_WORD *)(v145 + 32) = 2081;
    uint64_t v150 = v147;
    uint64_t v104 = (uint64_t)v270;
    uint64_t v151 = dispatch thunk of CustomStringConvertible.description.getter(v38, v150);
    uint64_t v271 = sub_1003F11D4(v151, v152, (uint64_t *)&v272);
    uint64_t v78 = v233;
    uint64_t v105 = v269;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v271, &v272, v145 + 34, v145 + 42);
    swift_bridgeObjectRelease();
    v238(v140, v38);
    _os_log_impl( (void *)&_mh_execute_header,  v142,  (os_log_type_t)v264,  "Overriding stopSoundSingle %{private,mask.hash}s because %{private,mask.hash}s is indicating it was playing both in-case.",  (uint8_t *)v145,  0x2Au);
    swift_arrayDestroy(v146, 2LL, (char *)&type metadata for Any + 8);
    uint64_t v153 = v238;
    swift_slowDealloc(v146, -1LL, -1LL);
    uint64_t v154 = v145;
    uint64_t v120 = (int *)v262;
    swift_slowDealloc(v154, -1LL, -1LL);

    sub_100018C68(v228, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    sub_100018C68(v230, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    v153(v231, v38);
    v153(v236, v38);
    uint64_t v121 = (uint64_t)v249;
    uint64_t v122 = v261;
  }

  else
  {

    v75(v140, v38);
    v75(v139, v38);
    sub_100018C68(v228, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    sub_100018C68(v131, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    v75(v231, v38);
    v75(v236, v38);
    uint64_t v121 = (uint64_t)v249;
    uint64_t v122 = v261;
    uint64_t v105 = v269;
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v280);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&aBlock);
  uint64_t v119 = v250;
  if (!*(void *)(v78 + 16)) {
    goto LABEL_42;
  }
LABEL_24:
  unint64_t v123 = sub_10030D124(v104);
  if ((v124 & 1) != 0)
  {
    sub_10001DC4C( *(void *)(v78 + 56) + *(void *)(v122 + 72) * v123,  v121,  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    uint64_t v125 = *(void (**)(uint64_t, void, uint64_t, int *))(v122 + 56);
    v125(v121, 0LL, 1LL, v120);
    goto LABEL_43;
  }

uint64_t sub_10039144C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, double a5)
{
  uint64_t v79 = a3;
  uint64_t v81 = a1;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v86 = *(void *)(v9 - 8);
  uint64_t v87 = v9;
  uint64_t v88 = *(void *)(v86 + 64);
  __chkstk_darwin(v9);
  uint64_t v85 = (char *)&v65 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for OS_dispatch_queue.SchedulerTimeType.Stride(0LL);
  uint64_t v76 = *(void *)(v11 - 8);
  uint64_t v77 = v11;
  __chkstk_darwin(v11);
  BOOL v68 = (char *)&v65 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_1009B0670);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v69 = sub_100004AEC(&qword_1009AAED8);
  uint64_t v71 = *(void *)(v69 - 8);
  __chkstk_darwin(v69);
  uint64_t v17 = (char *)&v65 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100004AEC(&qword_1009AAEE0);
  uint64_t v19 = *(void *)(v18 - 8);
  uint64_t v73 = v18;
  uint64_t v74 = v19;
  __chkstk_darwin(v18);
  os_log_type_t v67 = (char *)&v65 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v78 = sub_100004AEC(&qword_1009AAEE8);
  uint64_t v80 = *(void *)(v78 - 8);
  __chkstk_darwin(v78);
  uint64_t v70 = (char *)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v22 = sub_100004AEC(&qword_1009AAEF0);
  uint64_t v23 = *(void *)(v22 - 8);
  uint64_t v83 = v22;
  uint64_t v84 = v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v72 = (char *)&v65 - ((v25 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v82 = Transaction.subscriptionCleaner.getter(v24);
  uint64_t v75 = a2;
  uint64_t v26 = (void *)sub_10038857C(a3, a4);
  id v89 = *(id *)(a2 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  id v27 = v89;
  v90[0] = v26;
  uint64_t v28 = type metadata accessor for OS_dispatch_queue.SchedulerOptions(0LL);
  uint64_t v66 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL);
  v66(v15, 1LL, 1LL, v28);
  id v29 = v27;
  uint64_t v30 = sub_100004AEC(&qword_1009AAE28);
  unint64_t v31 = sub_100004AB0();
  uint64_t v32 = sub_1000372EC( &qword_1009AAE38,  &qword_1009AAE28,  (uint64_t)&protocol conformance descriptor for AnyPublisher<A, B>);
  uint64_t v33 = sub_100007864( (unint64_t *)&qword_1009B06C0,  (uint64_t (*)(uint64_t))sub_100004AB0,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue);
  Publisher.receive<A>(on:options:)(&v89, v15, v30, v31, v32, v33);
  sub_100015794((uint64_t)v15, &qword_1009B0670);

  uint64_t v34 = swift_release();
  uint64_t v35 = v68;
  static OS_dispatch_queue.SchedulerTimeType.Stride.seconds(_:)(v34, a5);
  v90[0] = v29;
  v66(v15, 1LL, 1LL, v28);
  uint64_t v36 = sub_1000372EC( &qword_1009AAEF8,  &qword_1009AAED8,  (uint64_t)&protocol conformance descriptor for Publishers.ReceiveOn<A, B>);
  id v37 = v29;
  uint64_t v64 = v33;
  uint64_t v38 = v67;
  uint64_t v39 = v69;
  Publisher.timeout<A>(_:scheduler:options:customError:)(v35, v90, v15, sub_1003824AC, 0LL, v69, v31, v36, v64);
  sub_100015794((uint64_t)v15, &qword_1009B0670);

  (*(void (**)(char *, uint64_t))(v76 + 8))(v35, v77);
  (*(void (**)(char *, uint64_t))(v71 + 8))(v17, v39);
  uint64_t v40 = sub_100004AEC(&qword_1009AAE30);
  uint64_t v41 = sub_1000372EC( &qword_1009AAF00,  &qword_1009AAEE0,  (uint64_t)&protocol conformance descriptor for Publishers.Timeout<A, B>);
  uint64_t v42 = v70;
  uint64_t v43 = v73;
  Publisher.map<A>(_:)(sub_10038249C, 0LL, v73, v40, v41);
  (*(void (**)(char *, uint64_t))(v74 + 8))(v38, v43);
  uint64_t v44 = sub_100004AEC(&qword_1009AAE40);
  uint64_t v45 = sub_1000372EC( &qword_1009AAF08,  &qword_1009AAEE8,  (uint64_t)&protocol conformance descriptor for Publishers.Map<A, B>);
  uint64_t v46 = sub_1000372EC(&qword_1009AAE50, &qword_1009AAE40, (uint64_t)&protocol conformance descriptor for Just<A>);
  uint64_t v47 = v72;
  uint64_t v48 = v78;
  Publisher.catch<A>(_:)(sub_1003824A0, 0LL, v78, v44, v45, v46);
  (*(void (**)(char *, uint64_t))(v80 + 8))(v42, v48);
  uint64_t v49 = swift_allocObject(&unk_100954890, 24LL, 7LL);
  swift_unknownObjectWeakInit(v49 + 16, v75);
  uint64_t v51 = v85;
  uint64_t v50 = v86;
  uint64_t v52 = v87;
  (*(void (**)(char *, uint64_t, uint64_t))(v86 + 16))(v85, v79, v87);
  uint64_t v53 = *(unsigned __int8 *)(v50 + 80);
  uint64_t v54 = v50;
  uint64_t v55 = (v53 + 32) & ~v53;
  unint64_t v56 = (v88 + v55 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v57 = swift_allocObject(&unk_100954A98, v56 + 8, v53 | 7);
  uint64_t v58 = v81;
  *(void *)(v57 + 16) = v81;
  *(void *)(v57 + 24) = v49;
  (*(void (**)(uint64_t, char *, uint64_t))(v54 + 32))(v57 + v55, v51, v52);
  uint64_t v59 = v82;
  *(void *)(v57 + v56) = v82;
  uint64_t v60 = sub_1000372EC( &qword_1009AAF10,  &qword_1009AAEF0,  (uint64_t)&protocol conformance descriptor for Publishers.Catch<A, B>);
  swift_retain();
  uint64_t v61 = v59;
  swift_unknownObjectRetain(v59);
  uint64_t v62 = v83;
  Publisher<>.sink(receiveValue:)(sub_10039965C, v57, v83, v60);
  swift_release();
  (*(void (**)(char *, uint64_t))(v84 + 8))(v47, v62);
  AnyCancellable.store(in:)(v58);
  swift_unknownObjectRelease(v61);
  return swift_release();
}

uint64_t sub_100391A8C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  uint64_t v5 = sub_100004AEC(&qword_1009AAE30);
  return swift_storeEnumTagMultiPayload(a2, v5, 0LL);
}

uint64_t sub_100391AE4(unint64_t *a1, uint64_t *a2)
{
  uint64_t v3 = sub_100004AEC(a2);
  __chkstk_darwin(v3);
  uint64_t v5 = (unint64_t *)((char *)&v8 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  unint64_t v6 = *a1;
  *uint64_t v5 = v6;
  swift_storeEnumTagMultiPayload(v5, v3, 1LL);
  sub_100399234(v6);
  return Just.init(_:)(v5, v3);
}

uint64_t sub_100391B78(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v70 = a4;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v68 = v6;
  uint64_t v69 = v7;
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v65 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v65 - v11;
  uint64_t v13 = sub_100004AEC(&qword_1009AAE30);
  __chkstk_darwin(v13);
  uint64_t v15 = (unint64_t *)((char *)&v65 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v16 = sub_100004AEC(&qword_10099E488);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v65 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
  uint64_t v20 = *(void *)(v19 - 8);
  __chkstk_darwin(v19);
  uint64_t v67 = (uint64_t)&v65 - ((v21 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  a3 += 16LL;
  Transaction.capture()();
  swift_beginAccess(a3, v74, 0LL, 0LL);
  uint64_t result = swift_unknownObjectWeakLoadStrong(a3);
  if (result)
  {
    uint64_t v23 = (void *)result;
    uint64_t v24 = (uint64_t *)(result + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators);
    __n128 v25 = swift_beginAccess(result + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators, v73, 0LL, 0LL);
    uint64_t v26 = *v24;
    if (!*(void *)(v26 + 16))
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v20 + 56))(v18, 1LL, 1LL, v19, v25);
LABEL_8:

      return sub_100015794((uint64_t)v18, &qword_10099E488);
    }

    swift_bridgeObjectRetain(v26);
    unint64_t v27 = sub_10030D124(v70);
    if ((v28 & 1) != 0)
    {
      sub_10001DC4C( *(void *)(v26 + 56) + *(void *)(v20 + 72) * v27,  (uint64_t)v18,  type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
      uint64_t v29 = 0LL;
    }

    else
    {
      uint64_t v29 = 1LL;
    }

    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v20 + 56))(v18, v29, 1LL, v19);
    swift_bridgeObjectRelease();
    uint64_t v30 = v67;
    sub_10002218C((uint64_t)v18, v67, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
    sub_10001581C(a1, (uint64_t)v15, &qword_1009AAE30);
    if (swift_getEnumCaseMultiPayload(v15, v13) == 1)
    {
      unint64_t v31 = *v15;
      uint64_t v32 = v68;
      uint64_t v33 = v69;
      if (qword_10099B330 != -1) {
        swift_once(&qword_10099B330, sub_100374304);
      }
      uint64_t v34 = type metadata accessor for Logger(0LL);
      sub_10000A720(v34, (uint64_t)qword_100A2A748);
      (*(void (**)(char *, uint64_t, uint64_t))(v33 + 16))(v10, v70, v32);
      sub_100399234(v31);
      unint64_t v35 = sub_100399234(v31);
      uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
      os_log_type_t v37 = static os_log_type_t.error.getter(v36);
      int v38 = v37;
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v39 = swift_slowAlloc(32LL, -1LL);
        LODWORD(v65) = v38;
        uint64_t v40 = v39;
        uint64_t v41 = swift_slowAlloc(64LL, -1LL);
        uint64_t v66 = v41;
        *(_DWORD *)uint64_t v40 = 141558531;
        uint64_t v71 = 1752392040LL;
        uint64_t v72 = v41;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v40 + 4, v40 + 12);
        *(_WORD *)(v40 + 12) = 2081;
        uint64_t v42 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter(v32, v42);
        uint64_t v71 = sub_1003F11D4(v43, v44, &v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v40 + 14, v40 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v69 + 8))(v10, v32);
        *(_WORD *)(v40 + 22) = 2080;
        uint64_t v71 = v31;
        sub_100399234(v31);
        uint64_t v45 = String.init<A>(describing:)(&v71, &type metadata for SoundPlaybackManager.SoundPlaybackManagerError);
        uint64_t v71 = sub_1003F11D4(v45, v46, &v72);
        uint64_t v30 = v67;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v40 + 24, v40 + 32);
        swift_bridgeObjectRelease();
        sub_100399244(v31);
        sub_100399244(v31);
        _os_log_impl( (void *)&_mh_execute_header,  v36,  (os_log_type_t)v65,  "Stop sound failed for %{private,mask.hash}s. Error %s",  (uint8_t *)v40,  0x20u);
        uint64_t v47 = v66;
        swift_arrayDestroy(v66, 2LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v47, -1LL, -1LL);
        swift_slowDealloc(v40, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v32);
        sub_100399244(v31);
        sub_100399244(v31);
      }

      unint64_t v61 = sub_100398E60();
      uint64_t v62 = swift_allocError(&type metadata for SoundPlaybackManager.SoundPlaybackManagerError, v61, 0LL, 0LL);
      *uint64_t v63 = v31;
      uint64_t v64 = *(int *)(v19 + 36);
      swift_errorRelease(*(void *)(v30 + v64));
      *(void *)(v30 + v64) = v62;
    }

    else
    {
      uint64_t v48 = v68;
      uint64_t v49 = v69;
      if (qword_10099B330 != -1) {
        swift_once(&qword_10099B330, sub_100374304);
      }
      uint64_t v50 = type metadata accessor for Logger(0LL);
      sub_10000A720(v50, (uint64_t)qword_100A2A748);
      uint64_t v51 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v49 + 16))(v12, v70, v48);
      uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
      os_log_type_t v53 = static os_log_type_t.default.getter(v52);
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = swift_slowAlloc(22LL, -1LL);
        uint64_t v55 = swift_slowAlloc(32LL, -1LL);
        uint64_t v66 = v55;
        *(_DWORD *)uint64_t v54 = 141558275;
        uint64_t v71 = 1752392040LL;
        uint64_t v72 = v55;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v54 + 4, v54 + 12);
        *(_WORD *)(v54 + 12) = 2081;
        uint64_t v65 = v54 + 14;
        uint64_t v56 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v57 = v68;
        uint64_t v58 = dispatch thunk of CustomStringConvertible.description.getter(v68, v56);
        uint64_t v71 = sub_1003F11D4(v58, v59, &v72);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v65, v54 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v69 + 8))(v12, v57);
        _os_log_impl( (void *)&_mh_execute_header,  v52,  v53,  "Stop sound completed successfully for %{private,mask.hash}s",  (uint8_t *)v54,  0x16u);
        uint64_t v60 = v66;
        swift_arrayDestroy(v66, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v60, -1LL, -1LL);
        swift_slowDealloc(v54, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v49 + 8))(v12, v48);
      }

      sub_100015794((uint64_t)v15, &qword_1009AAE30);
    }

    sub_100381A9C(v70, 1, 0LL);

    return sub_100018C68(v30, type metadata accessor for SoundPlaybackManager.PlaybackCoordinator);
  }

  return result;
}

uint64_t sub_100392294(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v67 = a3;
  uint64_t v68 = a4;
  uint64_t v71 = a1;
  uint64_t v72 = a2;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v9 = &v60[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = __chkstk_darwin(v7);
  uint64_t v12 = &v60[-v11];
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v70 = &v60[-v14];
  uint64_t v65 = v15;
  __chkstk_darwin(v13);
  uint64_t v17 = &v60[-v16];
  uint64_t v18 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v19 = *(void *)(v18 - 8);
  __chkstk_darwin(v18);
  uint64_t v21 = &v60[-((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v66 = v4;
  uint64_t v22 = *(void **)&v4[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
  *uint64_t v21 = v22;
  (*(void (**)(void *, void, uint64_t))(v19 + 104))(v21, enum case for DispatchPredicate.onQueue(_:), v18);
  id v23 = v22;
  LOBYTE(v22) = _dispatchPreconditionTest(_:)(v21);
  (*(void (**)(void *, uint64_t))(v19 + 8))(v21, v18);
  if ((v22 & 1) != 0)
  {
    if (qword_10099B330 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B330, sub_100374304);
LABEL_3:
  uint64_t v64 = v9;
  uint64_t v24 = type metadata accessor for Logger(0LL);
  sub_10000A720(v24, (uint64_t)qword_100A2A748);
  __n128 v25 = *(void (**)(_BYTE *, uint64_t, uint64_t))(v6 + 16);
  v25(v17, v71, v5);
  uint64_t v26 = v70;
  uint64_t v27 = ((uint64_t (*)(void *, uint64_t, uint64_t))v25)(v70, v72, v5);
  char v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.default.getter(v28);
  int v30 = v29;
  BOOL v31 = os_log_type_enabled(v28, v29);
  uint64_t v69 = v12;
  uint64_t v63 = v6;
  if (v31)
  {
    uint64_t v32 = swift_slowAlloc(32LL, -1LL);
    uint64_t v33 = swift_slowAlloc(64LL, -1LL);
    uint64_t v62 = v33;
    *(_DWORD *)uint64_t v32 = 141558531;
    uint64_t v73 = 1752392040LL;
    uint64_t v74 = v33;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v32 + 4, v32 + 12);
    *(_WORD *)(v32 + 12) = 2081;
    uint64_t v34 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    int v61 = v30;
    uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter(v5, v34);
    uint64_t v73 = sub_1003F11D4(v35, v36, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v32 + 14, v32 + 22);
    swift_bridgeObjectRelease();
    os_log_type_t v37 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
    v37(v17, v5);
    *(_WORD *)(v32 + 22) = 2082;
    int v38 = v70;
    uint64_t v39 = dispatch thunk of CustomStringConvertible.description.getter(v5, v34);
    uint64_t v73 = sub_1003F11D4(v39, v40, &v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v73, &v74, v32 + 24, v32 + 32);
    swift_bridgeObjectRelease();
    v37(v38, v5);
    uint64_t v12 = v69;
    _os_log_impl( (void *)&_mh_execute_header,  v28,  (os_log_type_t)v61,  "SPPlaySound play sound on device %{private,mask.hash}s commandId: %{public}s.",  (uint8_t *)v32,  0x20u);
    uint64_t v41 = v62;
    swift_arrayDestroy(v62, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1LL, -1LL);
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  else
  {
    uint64_t v42 = *(void (**)(_BYTE *, uint64_t))(v6 + 8);
    v42(v17, v5);
    v42(v26, v5);
  }

  uint64_t v43 = v66;
  uint64_t v70 = sub_100012ED8( &v66[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_findMyCommandManager],  *(void *)&v66[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_findMyCommandManager + 24]);
  uint64_t v44 = v71;
  v25(v12, v71, v5);
  uint64_t v45 = v64;
  uint64_t v46 = v72;
  v25(v64, v72, v5);
  uint64_t v47 = v5;
  uint64_t v48 = v63;
  uint64_t v49 = *(unsigned __int8 *)(v63 + 80);
  uint64_t v50 = (v49 + 16) & ~v49;
  uint64_t v51 = (v65 + v49 + v50) & ~v49;
  unint64_t v52 = (v65 + v51 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v53 = swift_allocObject(&unk_100954D40, v52 + 8, v49 | 7);
  uint64_t v54 = v53 + v50;
  uint64_t v55 = *(void (**)(uint64_t, _BYTE *, uint64_t))(v48 + 32);
  v55(v54, v69, v47);
  v55(v53 + v51, v45, v47);
  *(void *)(v53 + v52) = v43;
  id v56 = v43;
  sub_1002860C8(v44, v46, v67, (uint64_t)sub_10039A978, v53);
  swift_release();
  uint64_t v74 = v68;
  uint64_t v57 = sub_100004AEC(&qword_1009AAEC8);
  uint64_t v58 = sub_1000372EC( &qword_1009AAED0,  &qword_1009AAEC8,  (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  return Publisher.eraseToAnyPublisher()(v57, v58);
}

uint64_t sub_100392770(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = a4;
  uint64_t v32 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v35 = *(void *)(v32 - 8);
  __chkstk_darwin(v32);
  int v30 = (char *)&v29 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v33 = *(void *)(v8 - 8);
  uint64_t v34 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v29 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v29 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v31 = *(void *)&a2[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
  uint64_t v15 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = (v15 + 32) & ~v15;
  unint64_t v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v18 = swift_allocObject(&unk_100954D68, v17 + 8, v15 | 7);
  *(void *)(v18 + 16) = a1;
  *(void *)(v18 + 24) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v18 + v16, v14, v11);
  uint64_t v19 = v29;
  *(void *)(v18 + v17) = v29;
  aBlock[4] = sub_10039AAD4;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100954D80;
  uint64_t v20 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v21 = a2;
  uint64_t v22 = swift_errorRetain(v19);
  static DispatchQoS.unspecified.getter(v22);
  os_log_type_t v37 = _swiftEmptyArrayStorage;
  uint64_t v23 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v24 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v25 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v26 = v30;
  uint64_t v27 = v32;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v37, v24, v25, v32, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v26, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v35 + 8))(v26, v27);
  (*(void (**)(char *, uint64_t))(v33 + 8))(v10, v34);
  return swift_release();
}

void sub_100392A18(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v138 = a2;
  uint64_t v5 = sub_100004AEC(&qword_10099E488);
  __chkstk_darwin(v5);
  uint64_t v146 = (char *)&v134 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v134 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v147 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v147 - 8);
  uint64_t v11 = __chkstk_darwin(v147);
  os_log_type_t v143 = (char *)&v134 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v139 = (char *)&v134 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v137 = (char *)&v134 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  unint64_t v142 = (char *)&v134 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v134 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v141 = (char *)&v134 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  unint64_t v140 = (char *)&v134 - v25;
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v134 - v26;
  uint64_t v28 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v31 = (os_log_t *)((char *)&v134 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v32 = *(void **)(v3 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  void *v31 = v32;
  (*(void (**)(void *, void, uint64_t))(v29 + 104))(v31, enum case for DispatchPredicate.onQueue(_:), v28);
  id v33 = v32;
  LOBYTE(v32) = _dispatchPreconditionTest(_:)(v31);
  (*(void (**)(void *, uint64_t))(v29 + 8))(v31, v28);
  if ((v32 & 1) == 0)
  {
    __break(1u);
    goto LABEL_52;
  }

  uint64_t v144 = v3;
  uint64_t v148 = a1;
  sub_100504C28(a1, (uint64_t)v153);
  uint64_t v34 = v154;
  if (!v154)
  {
    sub_100015794((uint64_t)v153, (uint64_t *)&unk_1009A9C40);
    uint64_t v29 = v147;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v9, 1LL, 1LL, v147);
LABEL_10:
    sub_100015794((uint64_t)v9, &qword_10099D8A0);
    if (qword_10099B330 == -1)
    {
LABEL_11:
      uint64_t v56 = type metadata accessor for Logger(0LL);
      sub_10000A720(v56, (uint64_t)qword_100A2A748);
      uint64_t v40 = v148;
      uint64_t v145 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
      uint64_t v57 = v145(v21, v148, v29);
      uint64_t v58 = (os_log_s *)Logger.logObject.getter(v57);
      os_log_type_t v59 = static os_log_type_t.default.getter(v58);
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = swift_slowAlloc(22LL, -1LL);
        uint64_t v61 = swift_slowAlloc(32LL, -1LL);
        v153[0] = v61;
        *(_DWORD *)uint64_t v60 = 141558275;
        uint64_t v150 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, v151, v60 + 4, v60 + 12);
        *(_WORD *)(v60 + 12) = 2081;
        uint64_t v62 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter(v29, v62);
        uint64_t v150 = sub_1003F11D4(v63, v64, v153);
        uint64_t v40 = v148;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v150, v151, v60 + 14, v60 + 22);
        swift_bridgeObjectRelease();
        uint64_t v50 = *(void (**)(char *, uint64_t))(v10 + 8);
        v50(v21, v29);
        _os_log_impl( (void *)&_mh_execute_header,  v58,  v59,  "didStartPlayingSoundOnDevice %{private,mask.hash}s",  (uint8_t *)v60,  0x16u);
        swift_arrayDestroy(v61, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v61, -1LL, -1LL);
        swift_slowDealloc(v60, -1LL, -1LL);
      }

      else
      {
        uint64_t v50 = *(void (**)(char *, uint64_t))(v10 + 8);
        v50(v21, v29);
      }

      goto LABEL_16;
    }

uint64_t sub_100393A90(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v64 = a3;
  uint64_t v66 = a2;
  uint64_t v67 = a1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void **)(v4 - 8);
  uint64_t v6 = v5[8];
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v62 = &v56[-v9];
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v65 = &v56[-v11];
  __chkstk_darwin(v10);
  uint64_t v13 = &v56[-v12];
  uint64_t v14 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v15 = *(void *)(v14 - 8);
  __chkstk_darwin(v14);
  uint64_t v17 = &v56[-((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v63 = v3;
  uint64_t v18 = *(void **)&v3[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
  *uint64_t v17 = v18;
  (*(void (**)(void *, void, uint64_t))(v15 + 104))(v17, enum case for DispatchPredicate.onQueue(_:), v14);
  id v19 = v18;
  LOBYTE(v18) = _dispatchPreconditionTest(_:)(v17);
  (*(void (**)(void *, uint64_t))(v15 + 8))(v17, v14);
  if ((v18 & 1) != 0)
  {
    uint64_t v61 = v6;
    if (qword_10099B330 == -1) {
      goto LABEL_3;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B330, sub_100374304);
LABEL_3:
  uint64_t v60 = &v56[-((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v20 = type metadata accessor for Logger(0LL);
  sub_10000A720(v20, (uint64_t)qword_100A2A748);
  uint64_t v21 = (void (*)(_BYTE *, uint64_t, uint64_t))v5[2];
  v21(v13, v67, v4);
  uint64_t v22 = v65;
  uint64_t v23 = ((uint64_t (*)(void *, uint64_t, uint64_t))v21)(v65, v66, v4);
  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
  os_log_type_t v25 = static os_log_type_t.default.getter(v24);
  int v26 = v25;
  BOOL v27 = os_log_type_enabled(v24, v25);
  os_log_type_t v59 = v5;
  if (v27)
  {
    uint64_t v28 = swift_slowAlloc(32LL, -1LL);
    uint64_t v29 = swift_slowAlloc(64LL, -1LL);
    uint64_t v58 = v29;
    *(_DWORD *)uint64_t v28 = 141558531;
    uint64_t v68 = 1752392040LL;
    uint64_t v69 = v29;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v28 + 4, v28 + 12);
    *(_WORD *)(v28 + 12) = 2081;
    uint64_t v30 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    int v57 = v26;
    uint64_t v31 = dispatch thunk of CustomStringConvertible.description.getter(v4, v30);
    uint64_t v68 = sub_1003F11D4(v31, v32, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v28 + 14, v28 + 22);
    swift_bridgeObjectRelease();
    id v33 = (void (*)(_BYTE *, uint64_t))v5[1];
    v33(v13, v4);
    *(_WORD *)(v28 + 22) = 2082;
    uint64_t v34 = v65;
    uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter(v4, v30);
    uint64_t v68 = sub_1003F11D4(v35, v36, &v69);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v68, &v69, v28 + 24, v28 + 32);
    swift_bridgeObjectRelease();
    v33(v34, v4);
    _os_log_impl( (void *)&_mh_execute_header,  v24,  (os_log_type_t)v57,  "SPPlaySound stop sound on device %{private,mask.hash}s commandId: %{public}s.",  (uint8_t *)v28,  0x20u);
    uint64_t v37 = v58;
    swift_arrayDestroy(v58, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_slowDealloc(v28, -1LL, -1LL);
  }

  else
  {
    int v38 = (void (*)(_BYTE *, uint64_t))v5[1];
    v38(v13, v4);
    v38(v22, v4);
  }

  uint64_t v39 = v63;
  uint64_t v65 = sub_100012ED8( &v63[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_findMyCommandManager],  *(void *)&v63[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_findMyCommandManager + 24]);
  uint64_t v40 = v62;
  v21(v62, v67, v4);
  uint64_t v41 = v60;
  uint64_t v42 = v66;
  v21(v60, v66, v4);
  uint64_t v43 = v4;
  os_log_type_t v44 = v59;
  uint64_t v45 = *((unsigned __int8 *)v59 + 80);
  uint64_t v46 = (v45 + 16) & ~v45;
  uint64_t v47 = (v61 + v45 + v46) & ~v45;
  unint64_t v48 = (v61 + v47 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v49 = swift_allocObject(&unk_100954908, v48 + 8, v45 | 7);
  uint64_t v50 = v49 + v46;
  uint64_t v51 = (void (*)(uint64_t, _BYTE *, uint64_t))v44[4];
  v51(v50, v40, v43);
  v51(v49 + v47, v41, v43);
  *(void *)(v49 + v48) = v39;
  id v52 = v39;
  sub_10028657C(v67, v42, (uint64_t)sub_100399368, v49);
  swift_release();
  uint64_t v69 = v64;
  uint64_t v53 = sub_100004AEC(&qword_1009AAEC8);
  uint64_t v54 = sub_1000372EC( &qword_1009AAED0,  &qword_1009AAEC8,  (uint64_t)&protocol conformance descriptor for PassthroughSubject<A, B>);
  return Publisher.eraseToAnyPublisher()(v53, v54);
}

void sub_100393F60( uint64_t a1, uint64_t a2, uint64_t a3, const char *a4, const char *a5, uint64_t a6, const char *a7)
{
  uint64_t v64 = a5;
  uint64_t v65 = a4;
  uint64_t v66 = a2;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v60 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = __chkstk_darwin(v13);
  uint64_t v18 = (char *)&v60 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v60 - v20;
  __chkstk_darwin(v19);
  uint64_t v23 = (char *)&v60 - v22;
  if (a1)
  {
    uint64_t v63 = a6;
    swift_errorRetain(a1);
    if (qword_10099B330 != -1) {
      swift_once(&qword_10099B330, sub_100374304);
    }
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_10000A720(v24, (uint64_t)qword_100A2A748);
    os_log_type_t v25 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v25(v18, v66, v11);
    v25(v15, a3, v11);
    swift_errorRetain(a1);
    uint64_t v26 = swift_errorRetain(a1);
    BOOL v27 = (os_log_s *)Logger.logObject.getter(v26);
    os_log_type_t v28 = static os_log_type_t.error.getter(v27);
    int v29 = v28;
    if (os_log_type_enabled(v27, v28))
    {
      uint64_t v30 = swift_slowAlloc(42LL, -1LL);
      uint64_t v31 = swift_slowAlloc(96LL, -1LL);
      uint64_t v62 = v31;
      *(_DWORD *)uint64_t v30 = 141558787;
      uint64_t v67 = 1752392040LL;
      uint64_t v68 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v30 + 4, v30 + 12);
      *(_WORD *)(v30 + 12) = 2081;
      uint64_t v60 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      int v61 = v29;
      uint64_t v32 = dispatch thunk of CustomStringConvertible.description.getter(v11, v60);
      uint64_t v67 = sub_1003F11D4(v32, v33, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v30 + 14, v30 + 22);
      swift_bridgeObjectRelease();
      uint64_t v34 = *(void (**)(char *, uint64_t))(v12 + 8);
      v34(v18, v11);
      *(_WORD *)(v30 + 22) = 2082;
      uint64_t v67 = a1;
      swift_errorRetain(a1);
      uint64_t v35 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v36 = String.init<A>(describing:)(&v67, v35);
      uint64_t v67 = sub_1003F11D4(v36, v37, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v30 + 24, v30 + 32);
      swift_bridgeObjectRelease();
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      *(_WORD *)(v30 + 32) = 2082;
      uint64_t v38 = dispatch thunk of CustomStringConvertible.description.getter(v11, v60);
      uint64_t v67 = sub_1003F11D4(v38, v39, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v30 + 34, v30 + 42);
      swift_bridgeObjectRelease();
      v34(v15, v11);
      _os_log_impl((void *)&_mh_execute_header, v27, (os_log_type_t)v61, v64, (uint8_t *)v30, 0x2Au);
      uint64_t v40 = v62;
      swift_arrayDestroy(v62, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v40, -1LL, -1LL);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    else
    {
      uint64_t v56 = *(void (**)(char *, uint64_t))(v12 + 8);
      v56(v18, v11);
      swift_errorRelease(a1);
      swift_errorRelease(a1);
      v56(v15, v11);
    }

    uint64_t v57 = type metadata accessor for Transaction(0LL);
    __chkstk_darwin(v57);
    uint64_t v58 = v66;
    *(&v60 - 4) = (uint64_t)v65;
    *(&v60 - 3) = v58;
    *(&v60 - 2) = a1;
    static Transaction.named<A>(_:with:)("SoundPlaybackManager.SPPlaySound", 32LL, 2LL, v63, &v60 - 6);
    swift_errorRelease(a1);
  }

  else
  {
    uint64_t v65 = a7;
    if (qword_10099B330 != -1) {
      swift_once(&qword_10099B330, sub_100374304);
    }
    uint64_t v41 = type metadata accessor for Logger(0LL);
    sub_10000A720(v41, (uint64_t)qword_100A2A748);
    uint64_t v42 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
    v42(v23, v66, v11);
    uint64_t v43 = ((uint64_t (*)(char *, uint64_t, uint64_t))v42)(v21, a3, v11);
    os_log_type_t v44 = (os_log_s *)Logger.logObject.getter(v43);
    os_log_type_t v45 = static os_log_type_t.default.getter(v44);
    int v46 = v45;
    if (os_log_type_enabled(v44, v45))
    {
      uint64_t v47 = swift_slowAlloc(32LL, -1LL);
      uint64_t v48 = swift_slowAlloc(64LL, -1LL);
      uint64_t v66 = v48;
      *(_DWORD *)uint64_t v47 = 141558531;
      uint64_t v67 = 1752392040LL;
      uint64_t v68 = v48;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v47 + 4, v47 + 12);
      *(_WORD *)(v47 + 12) = 2081;
      uint64_t v49 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      LODWORD(v64) = v46;
      uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter(v11, v49);
      uint64_t v67 = sub_1003F11D4(v50, v51, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v47 + 14, v47 + 22);
      swift_bridgeObjectRelease();
      id v52 = *(void (**)(char *, uint64_t))(v12 + 8);
      v52(v23, v11);
      *(_WORD *)(v47 + 22) = 2082;
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter(v11, v49);
      uint64_t v67 = sub_1003F11D4(v53, v54, &v68);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v67, &v68, v47 + 24, v47 + 32);
      swift_bridgeObjectRelease();
      v52(v21, v11);
      _os_log_impl((void *)&_mh_execute_header, v44, (os_log_type_t)v64, v65, (uint8_t *)v47, 0x20u);
      uint64_t v55 = v66;
      swift_arrayDestroy(v66, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v55, -1LL, -1LL);
      swift_slowDealloc(v47, -1LL, -1LL);
    }

    else
    {
      os_log_type_t v59 = *(void (**)(char *, uint64_t))(v12 + 8);
      v59(v23, v11);
      v59(v21, v11);
    }
  }

uint64_t sub_1003945B4(uint64_t a1, char *a2, uint64_t a3, uint64_t a4)
{
  uint64_t v29 = a4;
  uint64_t v31 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v34 = *(void *)(v31 - 8);
  __chkstk_darwin(v31);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v32 = *(void *)(v8 - 8);
  uint64_t v33 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = *(void *)(v12 + 64);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v28 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v30 = *(void *)&a2[OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue];
  (*(void (**)(char *, uint64_t, uint64_t))(v12 + 16))(v14, a3, v11);
  uint64_t v15 = *(unsigned __int8 *)(v12 + 80);
  uint64_t v16 = (v15 + 24) & ~v15;
  unint64_t v17 = (v13 + v16 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v18 = swift_allocObject(&unk_100954930, v17 + 8, v15 | 7);
  *(void *)(v18 + 16) = a2;
  (*(void (**)(uint64_t, char *, uint64_t))(v12 + 32))(v18 + v16, v14, v11);
  uint64_t v19 = v29;
  *(void *)(v18 + v17) = v29;
  aBlock[4] = sub_100399430;
  aBlock[5] = v18;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100954948;
  uint64_t v20 = _Block_copy(aBlock);
  uint64_t v21 = a2;
  uint64_t v22 = swift_errorRetain(v19);
  static DispatchQoS.unspecified.getter(v22);
  uint64_t v36 = _swiftEmptyArrayStorage;
  uint64_t v23 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v24 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v25 = sub_1000372EC( (unint64_t *)&qword_10099FAC0,  (uint64_t *)&unk_1009AB860,  (uint64_t)&protocol conformance descriptor for [A]);
  uint64_t v26 = v31;
  dispatch thunk of SetAlgebra.init<A>(_:)(&v36, v24, v25, v31, v23);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v7, v20);
  _Block_release(v20);
  (*(void (**)(char *, uint64_t))(v34 + 8))(v7, v26);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v10, v33);
  return swift_release();
}

void sub_100394848(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v128 = a2;
  uint64_t v5 = sub_100004AEC(&qword_10099E488);
  __chkstk_darwin(v5);
  int v135 = (char *)&v124 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v124 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v137 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v137 - 8);
  uint64_t v11 = __chkstk_darwin(v137);
  uint64_t v136 = (char *)&v124 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v129 = (char *)&v124 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v127 = (char *)&v124 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v132 = (char *)&v124 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v124 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v131 = (char *)&v124 - v23;
  uint64_t v24 = __chkstk_darwin(v22);
  uint64_t v130 = (char *)&v124 - v25;
  __chkstk_darwin(v24);
  BOOL v27 = (char *)&v124 - v26;
  uint64_t v28 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v29 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v31 = (os_log_t *)((char *)&v124 - ((v30 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v32 = *(void **)(v3 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  void *v31 = v32;
  (*(void (**)(void *, void, uint64_t))(v29 + 104))(v31, enum case for DispatchPredicate.onQueue(_:), v28);
  id v33 = v32;
  LOBYTE(v32) = _dispatchPreconditionTest(_:)(v31);
  (*(void (**)(void *, uint64_t))(v29 + 8))(v31, v28);
  if ((v32 & 1) == 0)
  {
    __break(1u);
    goto LABEL_50;
  }

  uint64_t v133 = v3;
  uint64_t v138 = a1;
  sub_100504C28(a1, (uint64_t)v143);
  uint64_t v34 = v144;
  if (!v144)
  {
    sub_100015794((uint64_t)v143, (uint64_t *)&unk_1009A9C40);
    uint64_t v29 = v137;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v9, 1LL, 1LL, v137);
LABEL_10:
    sub_100015794((uint64_t)v9, &qword_10099D8A0);
    if (qword_10099B330 == -1)
    {
LABEL_11:
      uint64_t v56 = type metadata accessor for Logger(0LL);
      sub_10000A720(v56, (uint64_t)qword_100A2A748);
      uint64_t v40 = v138;
      os_log_t v134 = *(uint64_t (**)(char *, uint64_t, uint64_t))(v10 + 16);
      uint64_t v57 = v134(v21, v138, v29);
      uint64_t v58 = (os_log_s *)Logger.logObject.getter(v57);
      os_log_type_t v59 = static os_log_type_t.default.getter(v58);
      if (os_log_type_enabled(v58, v59))
      {
        uint64_t v60 = swift_slowAlloc(22LL, -1LL);
        uint64_t v61 = swift_slowAlloc(32LL, -1LL);
        v143[0] = v61;
        *(_DWORD *)uint64_t v60 = 141558275;
        uint64_t v140 = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, v141, v60 + 4, v60 + 12);
        *(_WORD *)(v60 + 12) = 2081;
        uint64_t v62 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v63 = dispatch thunk of CustomStringConvertible.description.getter(v29, v62);
        uint64_t v140 = sub_1003F11D4(v63, v64, v143);
        uint64_t v40 = v138;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v140, v141, v60 + 14, v60 + 22);
        swift_bridgeObjectRelease();
        uint64_t v50 = *(void (**)(char *, uint64_t))(v10 + 8);
        v50(v21, v29);
        _os_log_impl( (void *)&_mh_execute_header,  v58,  v59,  "didStopPlayingSoundOnDevice %{private,mask.hash}s",  (uint8_t *)v60,  0x16u);
        swift_arrayDestroy(v61, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v61, -1LL, -1LL);
        swift_slowDealloc(v60, -1LL, -1LL);
      }

      else
      {
        uint64_t v50 = *(void (**)(char *, uint64_t))(v10 + 8);
        v50(v21, v29);
      }

      goto LABEL_16;
    }

void sub_1003958C0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v126 = a2;
  uint64_t v5 = sub_100004AEC(&qword_10099E488);
  __chkstk_darwin(v5);
  uint64_t v130 = (char *)&v117 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v117 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v131 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v131 - 8);
  uint64_t v11 = __chkstk_darwin(v131);
  uint64_t v132 = (char *)&v117 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  os_log_t v124 = (char *)&v117 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  unint64_t v127 = (char *)&v117 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v117 - v18;
  uint64_t v20 = __chkstk_darwin(v17);
  int v125 = (char *)&v117 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v128 = (void (*)(char *, uint64_t))((char *)&v117 - v23);
  __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v117 - v24;
  uint64_t v26 = type metadata accessor for DispatchPredicate(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v29 = (uint64_t *)((char *)&v117 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v30 = *(_UNKNOWN **)((char *)v3 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_commandQueue);
  *uint64_t v29 = v30;
  (*(void (**)(void *, void, uint64_t))(v27 + 104))(v29, enum case for DispatchPredicate.onQueue(_:), v26);
  id v31 = v30;
  uint64_t v32 = _dispatchPreconditionTest(_:)(v29);
  (*(void (**)(void *, uint64_t))(v27 + 8))(v29, v26);
  if ((v32 & 1) == 0)
  {
    __break(1u);
    goto LABEL_41;
  }

  uint64_t v129 = v3;
  sub_100504C28(a1, (uint64_t)v135);
  uint64_t v33 = v136;
  uint64_t v3 = &off_10099B000;
  uint64_t v32 = a1;
  if (!v136)
  {
    sub_100015794((uint64_t)v135, (uint64_t *)&unk_1009A9C40);
    uint64_t v29 = (void *)v10;
    uint64_t v27 = v131;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v9, 1LL, 1LL, v131);
LABEL_9:
    sub_100015794((uint64_t)v9, &qword_10099D8A0);
    if (qword_10099B330 == -1)
    {
LABEL_10:
      uint64_t v59 = type metadata accessor for Logger(0LL);
      sub_10000A720(v59, (uint64_t)qword_100A2A748);
      uint64_t v40 = (uint64_t (*)(char *, uint64_t, uint64_t))v29[2];
      uint64_t v60 = v40(v19, v32, v27);
      uint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
      os_log_type_t v62 = static os_log_type_t.default.getter(v61);
      if (os_log_type_enabled(v61, v62))
      {
        uint64_t v63 = swift_slowAlloc(22LL, -1LL);
        unint64_t v123 = v40;
        uint64_t v64 = v63;
        uint64_t v65 = swift_slowAlloc(32LL, -1LL);
        int v125 = (char *)v65;
        *(_DWORD *)uint64_t v64 = 141558275;
        uint64_t v134 = 1752392040LL;
        v135[0] = v65;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, v135, v64 + 4, v64 + 12);
        *(_WORD *)(v64 + 12) = 2081;
        uint64_t v66 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter(v27, v66);
        uint64_t v134 = sub_1003F11D4(v67, v68, v135);
        uint64_t v3 = &off_10099B000;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v134, v135, v64 + 14, v64 + 22);
        swift_bridgeObjectRelease();
        uint64_t v128 = (void (*)(char *, uint64_t))v29[1];
        v128(v19, v27);
        _os_log_impl( (void *)&_mh_execute_header,  v61,  v62,  "didCompletePlayingSoundOnDevice %{private,mask.hash}s",  (uint8_t *)v64,  0x16u);
        uint64_t v69 = v125;
        swift_arrayDestroy(v125, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v69, -1LL, -1LL);
        uint64_t v70 = v64;
        uint64_t v40 = v123;
        swift_slowDealloc(v70, -1LL, -1LL);
      }

      else
      {
        uint64_t v128 = (void (*)(char *, uint64_t))v29[1];
        v128(v19, v27);
      }

      goto LABEL_14;
    }

unint64_t SPBeaconTaskState.description.getter(uint64_t a1)
{
  uint64_t v1 = a1 + 1;
  unint64_t result = 0x676E696E6E75722ELL;
  switch(v1)
  {
    case 0LL:
      unint64_t result = 0x6E776F6E6B6E752ELL;
      break;
    case 1LL:
      return result;
    case 2LL:
      unint64_t result = 0x676E69646E65702ELL;
      break;
    case 3LL:
      unint64_t result = 0x656C64692ELL;
      break;
    case 4LL:
      unint64_t result = 0x726F7272652ELL;
      break;
    case 5LL:
      unint64_t result = 0x6465756575712ELL;
      break;
    default:
      unint64_t result = 0xD000000000000010LL;
      break;
  }

  return result;
}

unint64_t sub_1003967A0()
{
  return SPBeaconTaskState.description.getter(*v0);
}

uint64_t type metadata accessor for SoundPlaybackManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd20SoundPlaybackManager);
}

void *sub_1003967C8(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v18 = *a2;
    *a1 = *a2;
    a1 = (void *)(v18 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v18);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    uint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    v8((void *)((char *)a1 + a3[5]), (void *)((char *)a2 + a3[5]), v7);
    uint64_t v9 = a3[7];
    *((_BYTE *)a1 + a3[6]) = *((_BYTE *)a2 + a3[6]);
    uint64_t v10 = *(void *)((char *)a2 + v9);
    *(void *)((char *)a1 + v9) = v10;
    uint64_t v11 = a3[8];
    uint64_t v12 = (char *)a1 + v11;
    uint64_t v13 = (char *)a2 + v11;
    uint64_t v14 = type metadata accessor for Date(0LL);
    uint64_t v15 = *(void (**)(char *, char *, uint64_t))(*(void *)(v14 - 8) + 16LL);
    swift_retain(v10);
    v15(v12, v13, v14);
    uint64_t v16 = a3[9];
    uint64_t v17 = *(void *)((char *)a2 + v16);
    swift_errorRetain(v17);
    *(void *)((char *)a1 + v16) = v17;
    *((_BYTE *)a1 + a3[10]) = *((_BYTE *)a2 + a3[10]);
  }

  return a1;
}

uint64_t sub_1003968D8(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v5(a1, v4);
  v5(a1 + a2[5], v4);
  swift_release(*(void *)(a1 + a2[7]));
  uint64_t v6 = a1 + a2[8];
  uint64_t v7 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v7 - 8) + 8LL))(v6, v7);
  return swift_errorRelease(*(void *)(a1 + a2[9]));
}

uint64_t sub_100396968(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  uint64_t v9 = *(void *)(a2 + v8);
  *(void *)(a1 + v8) = v9;
  uint64_t v10 = a3[8];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date(0LL);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 16LL);
  swift_retain(v9);
  v14(v11, v12, v13);
  uint64_t v15 = a3[9];
  uint64_t v16 = *(void *)(a2 + v15);
  swift_errorRetain(v16);
  *(void *)(a1 + v15) = v16;
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_100396A4C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  uint64_t v8 = a3[7];
  uint64_t v9 = *(void *)(a2 + v8);
  uint64_t v10 = *(void *)(a1 + v8);
  *(void *)(a1 + v8) = v9;
  swift_retain(v9);
  swift_release(v10);
  uint64_t v11 = a3[8];
  uint64_t v12 = a1 + v11;
  uint64_t v13 = a2 + v11;
  uint64_t v14 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 24LL))(v12, v13, v14);
  uint64_t v15 = a3[9];
  uint64_t v16 = *(void *)(a1 + v15);
  uint64_t v17 = *(void *)(a2 + v15);
  swift_errorRetain(v17);
  *(void *)(a1 + v15) = v17;
  swift_errorRelease(v16);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_100396B3C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  uint64_t v9 = a3[8];
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  uint64_t v12 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v12 - 8) + 32LL))(v10, v11, v12);
  uint64_t v13 = a3[10];
  *(void *)(a1 + a3[9]) = *(void *)(a2 + a3[9]);
  *(_BYTE *)(a1 + v13) = *(_BYTE *)(a2 + v13);
  return a1;
}

uint64_t sub_100396C00(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL);
  v7(a1, a2, v6);
  v7(a1 + a3[5], a2 + a3[5], v6);
  uint64_t v8 = a3[7];
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  uint64_t v9 = *(void *)(a1 + v8);
  *(void *)(a1 + v8) = *(void *)(a2 + v8);
  swift_release(v9);
  uint64_t v10 = a3[8];
  uint64_t v11 = a1 + v10;
  uint64_t v12 = a2 + v10;
  uint64_t v13 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 40LL))(v11, v12, v13);
  uint64_t v14 = a3[9];
  uint64_t v15 = *(void *)(a1 + v14);
  *(void *)(a1 + v14) = *(void *)(a2 + v14);
  swift_errorRelease(v15);
  *(_BYTE *)(a1 + a3[10]) = *(_BYTE *)(a2 + a3[10]);
  return a1;
}

uint64_t sub_100396CD8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_100396CE4);
}

uint64_t sub_100396CE4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    uint64_t v8 = type metadata accessor for Date(0LL);
    uint64_t v10 = a1 + *(int *)(a3 + 32);
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL);
    return v9(v10, a2, v8);
  }

  unint64_t v11 = *(void *)(a1 + *(int *)(a3 + 28));
  if (v11 >= 0xFFFFFFFF) {
    LODWORD(v11) = -1;
  }
  return (v11 + 1);
}

uint64_t sub_100396D8C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_100396D98);
}

uint64_t sub_100396D98(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
      return result;
    }

    uint64_t v10 = type metadata accessor for Date(0LL);
    uint64_t v12 = a1 + *(int *)(a4 + 32);
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL);
  }

  return v11(v12, a2, a2, v10);
}

uint64_t type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(uint64_t a1)
{
  uint64_t result = qword_1009AAD98;
  if (!qword_1009AAD98) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SoundPlaybackManager.PlaybackCoordinator);
  }
  return result;
}

uint64_t sub_100396E78(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    v5[1] = v5[0];
    v5[2] = &unk_1007FD7C8;
    v5[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    uint64_t result = type metadata accessor for Date(319LL);
    if (v4 <= 0x3F)
    {
      v5[4] = *(void *)(result - 8) + 64LL;
      v5[5] = &unk_1007FD7E0;
      v5[6] = &unk_1007FD7F8;
      swift_initStructMetadata(a1, 256LL, 7LL, v5, a1 + 16);
      return 0LL;
    }
  }

  return result;
}

unint64_t *assignWithTake for SoundPlaybackManager.SoundPlaybackManagerError( unint64_t *a1, unint64_t *a2)
{
  unint64_t v3 = *a1;
  unint64_t v4 = *a2;
  if (v3 < 0xFFFFFFFF) {
    goto LABEL_5;
  }
  if (v4 < 0xFFFFFFFF)
  {
    swift_errorRelease(v3);
LABEL_5:
    *a1 = v4;
    return a1;
  }

  *a1 = v4;
  swift_errorRelease(v3);
  return a1;
}

uint64_t getEnumTagSinglePayload for SoundPlaybackManager.SoundPlaybackManagerError( uint64_t *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0x7FFFFFFC && *((_BYTE *)a1 + 8)) {
    return (*(_DWORD *)a1 + 2147483644);
  }
  uint64_t v3 = *a1;
  unsigned int v4 = v3 + 1;
  unsigned int v5 = v3 - 3;
  if (v4 >= 5) {
    return v5;
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for SoundPlaybackManager.SoundPlaybackManagerError( uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0x7FFFFFFB)
  {
    *(void *)uint64_t result = 0LL;
    *(_DWORD *)uint64_t result = a2 - 2147483644;
    if (a3 >= 0x7FFFFFFC) {
      *(_BYTE *)(result + 8) = 1;
    }
  }

  else
  {
    if (a3 >= 0x7FFFFFFC) {
      *(_BYTE *)(result + 8) = 0;
    }
    if (a2) {
      *(void *)uint64_t result = a2 + 3;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for SoundPlaybackManager.SoundPlaybackManagerError()
{
  return &type metadata for SoundPlaybackManager.SoundPlaybackManagerError;
}

void sub_10039703C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099E488);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v53 = (uint64_t)&v49 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v49 - v7;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v49 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v49 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = *(void *)(a1 + 56);
  uint64_t v50 = a1 + 56;
  uint64_t v17 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v18 = -1LL;
  if (v17 < 64) {
    uint64_t v18 = ~(-1LL << v17);
  }
  unint64_t v19 = v18 & v16;
  uint64_t v20 = (uint64_t *)(a2 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators);
  uint64_t v54 = a1;
  uint64_t v21 = a1;
  uint64_t v22 = (uint64_t)v12;
  swift_bridgeObjectRetain(v21);
  __n128 v23 = swift_beginAccess(v20, v60, 0LL, 0LL);
  int64_t v24 = 0LL;
  int64_t v51 = (unint64_t)(v17 + 63) >> 6;
  unint64_t v52 = v15;
  uint64_t v55 = v8;
  uint64_t v56 = v22;
  while (1)
  {
    if (v19)
    {
      uint64_t v58 = (v19 - 1) & v19;
      unint64_t v27 = __clz(__rbit64(v19)) | (v24 << 6);
      goto LABEL_24;
    }

    int64_t v28 = v24 + 1;
    if (__OFADD__(v24, 1LL))
    {
      __break(1u);
      goto LABEL_41;
    }

    if (v28 >= v51) {
      goto LABEL_38;
    }
    unint64_t v29 = *(void *)(v50 + 8 * v28);
    ++v24;
    if (!v29)
    {
      int64_t v24 = v28 + 1;
      if (v28 + 1 >= v51) {
        goto LABEL_38;
      }
      unint64_t v29 = *(void *)(v50 + 8 * v24);
      if (!v29)
      {
        int64_t v24 = v28 + 2;
        if (v28 + 2 >= v51) {
          goto LABEL_38;
        }
        unint64_t v29 = *(void *)(v50 + 8 * v24);
        if (!v29)
        {
          int64_t v24 = v28 + 3;
          if (v28 + 3 >= v51) {
            goto LABEL_38;
          }
          unint64_t v29 = *(void *)(v50 + 8 * v24);
          if (!v29) {
            break;
          }
        }
      }
    }

void sub_100397590(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v26 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v26 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v27 = a1 + 56;
  uint64_t v13 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v28 = (unint64_t)(v13 + 63) >> 6;
  uint64_t v29 = a1;
  __n128 v16 = swift_bridgeObjectRetain(a1);
  int64_t v17 = 0LL;
  if (!v15) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v18 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v18 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v21)) + (v17 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16))( v11,  *(void *)(v29 + 48) + *(void *)(v6 + 72) * i,  v5,  v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v11, 0LL, 1LL, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    unint64_t v23 = sub_100398E60();
    uint64_t v24 = swift_allocError(&type metadata for SoundPlaybackManager.SoundPlaybackManagerError, v23, 0LL, 0LL);
    *uint64_t v25 = a3;
    sub_100399234(a3);
    sub_100381A9C((uint64_t)v8, 0, v24);
    swift_errorRelease(v24);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v20 >= v28) {
      goto LABEL_24;
    }
    unint64_t v21 = *(void *)(v27 + 8 * v20);
    ++v17;
    if (!v21)
    {
      int64_t v17 = v20 + 1;
      if (v20 + 1 >= v28) {
        goto LABEL_24;
      }
      unint64_t v21 = *(void *)(v27 + 8 * v17);
      if (!v21)
      {
        int64_t v17 = v20 + 2;
        if (v20 + 2 >= v28) {
          goto LABEL_24;
        }
        unint64_t v21 = *(void *)(v27 + 8 * v17);
        if (!v21)
        {
          int64_t v17 = v20 + 3;
          if (v20 + 3 >= v28) {
            goto LABEL_24;
          }
          unint64_t v21 = *(void *)(v27 + 8 * v17);
          if (!v21) {
            break;
          }
        }
      }
    }

void sub_100397878(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v25 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1 + 56;
  uint64_t v12 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v13 = -1LL;
  if (v12 < 64) {
    uint64_t v13 = ~(-1LL << v12);
  }
  unint64_t v14 = v13 & *(void *)(a1 + 56);
  unint64_t v15 = (void *)(a2 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_playSoundSubjects);
  swift_bridgeObjectRetain(a1);
  int64_t v28 = v15;
  __n128 v16 = swift_beginAccess(v15, v30, 0LL, 0LL);
  int64_t v17 = 0LL;
  uint64_t v26 = v10;
  int64_t v27 = (unint64_t)(v12 + 63) >> 6;
  while (1)
  {
    if (v14)
    {
      unint64_t v18 = __clz(__rbit64(v14));
      v14 &= v14 - 1;
      int64_t v29 = v17;
      unint64_t v19 = v18 | (v17 << 6);
      goto LABEL_24;
    }

    int64_t v20 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v20 >= v27) {
      goto LABEL_28;
    }
    unint64_t v21 = *(void *)(v11 + 8 * v20);
    int64_t v22 = v17 + 1;
    if (!v21)
    {
      int64_t v22 = v17 + 2;
      if (v17 + 2 >= v27) {
        goto LABEL_28;
      }
      unint64_t v21 = *(void *)(v11 + 8 * v22);
      if (!v21)
      {
        int64_t v22 = v17 + 3;
        if (v17 + 3 >= v27) {
          goto LABEL_28;
        }
        unint64_t v21 = *(void *)(v11 + 8 * v22);
        if (!v21)
        {
          int64_t v22 = v17 + 4;
          if (v17 + 4 >= v27) {
            goto LABEL_28;
          }
          unint64_t v21 = *(void *)(v11 + 8 * v22);
          if (!v21) {
            break;
          }
        }
      }
    }

void sub_100397BBC(uint64_t a1, uint64_t a2, char a3)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v24 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v24 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(a1 + 56);
  uint64_t v25 = a1 + 56;
  uint64_t v13 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v14 = -1LL;
  if (v13 < 64) {
    uint64_t v14 = ~(-1LL << v13);
  }
  unint64_t v15 = v14 & v12;
  int64_t v26 = (unint64_t)(v13 + 63) >> 6;
  __n128 v16 = swift_bridgeObjectRetain(a1);
  int64_t v17 = 0LL;
  int v18 = a3 & 1;
  if (!v15) {
    goto LABEL_5;
  }
LABEL_4:
  unint64_t v19 = __clz(__rbit64(v15));
  v15 &= v15 - 1;
  for (unint64_t i = v19 | (v17 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v17 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v6 + 16))( v11,  *(void *)(a1 + 48) + *(void *)(v6 + 72) * i,  v5,  v16);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v6 + 56))(v11, 0LL, 1LL, v5);
    (*(void (**)(char *, char *, uint64_t))(v6 + 32))(v8, v11, v5);
    sub_100381A9C((uint64_t)v8, v18, 0LL);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
    if (v15) {
      goto LABEL_4;
    }
LABEL_5:
    int64_t v21 = v17 + 1;
    if (__OFADD__(v17, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v21 >= v26) {
      goto LABEL_24;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v17;
    if (!v22)
    {
      int64_t v17 = v21 + 1;
      if (v21 + 1 >= v26) {
        goto LABEL_24;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v17);
      if (!v22)
      {
        int64_t v17 = v21 + 2;
        if (v21 + 2 >= v26) {
          goto LABEL_24;
        }
        unint64_t v22 = *(void *)(v25 + 8 * v17);
        if (!v22)
        {
          int64_t v17 = v21 + 3;
          if (v21 + 3 >= v26) {
            goto LABEL_24;
          }
          unint64_t v22 = *(void *)(v25 + 8 * v17);
          if (!v22) {
            break;
          }
        }
      }
    }

void sub_100397E6C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v28 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v8);
  uint64_t v31 = (char *)&v28 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a1 + 56;
  uint64_t v11 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v12 = -1LL;
  if (v11 < 64) {
    uint64_t v12 = ~(-1LL << v11);
  }
  unint64_t v13 = v12 & *(void *)(a1 + 56);
  uint64_t v14 = (void *)(a2 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_stopSoundSubjects);
  swift_bridgeObjectRetain(a1);
  __n128 v15 = swift_beginAccess(v14, v32, 0LL, 0LL);
  uint64_t v16 = 0LL;
  unint64_t v17 = v11 + 63;
  uint64_t v18 = a1;
  int64_t v29 = v14;
  int64_t v30 = v17 >> 6;
  while (1)
  {
    if (v13)
    {
      unint64_t v19 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      uint64_t v20 = v16;
      unint64_t v21 = v19 | (v16 << 6);
      unint64_t v22 = v31;
      goto LABEL_24;
    }

    int64_t v23 = v16 + 1;
    unint64_t v22 = v31;
    if (__OFADD__(v16, 1LL))
    {
      __break(1u);
      goto LABEL_31;
    }

    if (v23 >= v30) {
      goto LABEL_28;
    }
    unint64_t v24 = *(void *)(v10 + 8 * v23);
    int64_t v25 = v16 + 1;
    if (!v24)
    {
      int64_t v25 = v16 + 2;
      if (v16 + 2 >= v30) {
        goto LABEL_28;
      }
      unint64_t v24 = *(void *)(v10 + 8 * v25);
      if (!v24)
      {
        int64_t v25 = v16 + 3;
        if (v16 + 3 >= v30) {
          goto LABEL_28;
        }
        unint64_t v24 = *(void *)(v10 + 8 * v25);
        if (!v24)
        {
          int64_t v25 = v16 + 4;
          if (v16 + 4 >= v30) {
            goto LABEL_28;
          }
          unint64_t v24 = *(void *)(v10 + 8 * v25);
          if (!v24) {
            break;
          }
        }
      }
    }

void sub_10039819C(uint64_t a1, uint64_t a2)
{
  uint64_t v55 = a2;
  uint64_t v3 = sub_100004AEC(&qword_10099E488);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v44 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v53 = type metadata accessor for SoundPlaybackManager.PlaybackCoordinator(0LL);
  uint64_t v6 = *(void *)(v53 - 8);
  uint64_t v7 = __chkstk_darwin(v53);
  uint64_t v47 = (uint64_t)&v44 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v7);
  uint64_t v46 = (uint64_t)&v44 - v9;
  uint64_t v10 = type metadata accessor for UUID(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  unint64_t v13 = (char *)&v44 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v44 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = *(void *)(a1 + 56);
  uint64_t v50 = a1 + 56;
  uint64_t v18 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v19 = -1LL;
  if (v18 < 64) {
    uint64_t v19 = ~(-1LL << v18);
  }
  unint64_t v20 = v19 & v17;
  unint64_t v21 = (void *)(v55 + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_coordinators);
  uint64_t v55 = a1;
  swift_bridgeObjectRetain(a1);
  unint64_t v52 = v21;
  __n128 v22 = swift_beginAccess(v21, v54, 0LL, 0LL);
  int64_t v23 = 0LL;
  int64_t v51 = (unint64_t)(v18 + 63) >> 6;
  uint64_t v48 = _swiftEmptyArrayStorage;
  uint64_t v49 = v6;
  while (1)
  {
    if (v20)
    {
      unint64_t v24 = __clz(__rbit64(v20));
      v20 &= v20 - 1;
      unint64_t v25 = v24 | (v23 << 6);
      goto LABEL_22;
    }

    int64_t v26 = v23 + 1;
    if (__OFADD__(v23, 1LL))
    {
      __break(1u);
      goto LABEL_39;
    }

    if (v26 >= v51) {
      goto LABEL_36;
    }
    unint64_t v27 = *(void *)(v50 + 8 * v26);
    ++v23;
    if (!v27)
    {
      int64_t v23 = v26 + 1;
      if (v26 + 1 >= v51) {
        goto LABEL_36;
      }
      unint64_t v27 = *(void *)(v50 + 8 * v23);
      if (!v27)
      {
        int64_t v23 = v26 + 2;
        if (v26 + 2 >= v51) {
          goto LABEL_36;
        }
        unint64_t v27 = *(void *)(v50 + 8 * v23);
        if (!v27)
        {
          int64_t v23 = v26 + 3;
          if (v26 + 3 >= v51) {
            goto LABEL_36;
          }
          unint64_t v27 = *(void *)(v50 + 8 * v23);
          if (!v27) {
            break;
          }
        }
      }
    }

void sub_100398690(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A4890);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v40 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for WildModeAssociationRecord(0LL);
  uint64_t v50 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v44 = (uint64_t)&v40 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v40 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v13);
  int64_t v51 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v45 = a1 + 56;
  uint64_t v16 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v17 = -1LL;
  if (v16 < 64) {
    uint64_t v17 = ~(-1LL << v16);
  }
  unint64_t v18 = v17 & v15;
  uint64_t v49 = OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_beaconStore;
  int64_t v46 = (unint64_t)(v16 + 63) >> 6;
  id v48 = (id)SPBeaconTypeHele;
  uint64_t v52 = a1;
  __n128 v19 = swift_bridgeObjectRetain(a1);
  int64_t v20 = 0LL;
  uint64_t v47 = v12;
  uint64_t v42 = v6;
  uint64_t v43 = a2;
  if (v18) {
    goto LABEL_7;
  }
LABEL_9:
  int64_t v26 = v20 + 1;
  unint64_t v24 = v51;
  if (__OFADD__(v20, 1LL))
  {
    __break(1u);
    goto LABEL_40;
  }

  if (v26 >= v46) {
    goto LABEL_35;
  }
  unint64_t v27 = *(void *)(v45 + 8 * v26);
  ++v20;
  if (v27)
  {
LABEL_24:
    unint64_t v18 = (v27 - 1) & v27;
    unint64_t v23 = __clz(__rbit64(v27)) + (v20 << 6);
    while (1)
    {
      (*(void (**)(char *, unint64_t, uint64_t, __n128))(v10 + 16))( v24,  *(void *)(v52 + 48) + *(void *)(v10 + 72) * v23,  v9,  v19);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v10 + 56))(v24, 0LL, 1LL, v9);
      if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v24, 1LL, v9) == 1)
      {
LABEL_38:
        swift_release();
        return;
      }

      int64_t v56 = v20;
      (*(void (**)(char *, char *, uint64_t))(v10 + 32))(v12, v24, v9);
      sub_10050BDEC((uint64_t)v12, (uint64_t)v6);
      uint64_t v29 = v7;
      sub_100015794((uint64_t)v6, &qword_1009A4890);
      sub_100504C28((uint64_t)v12, (uint64_t)v53);
      uint64_t v30 = v54;
      if (!v54)
      {
        sub_100015794((uint64_t)v53, (uint64_t *)&unk_1009A9C40);
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        goto LABEL_38;
      }

      uint64_t v31 = v55;
      sub_100012ED8(v53, v54);
      uint64_t v32 = (void *)(*(uint64_t (**)(uint64_t, uint64_t))(v31 + 176))(v30, v31);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v53);
      uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(v32);
      uint64_t v35 = v34;
      uint64_t v37 = static String._unconditionallyBridgeFromObjectiveC(_:)(v48);
      if (v33 != v37 || v35 != v36)
      {
        int v41 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v37, v36, 0LL);
        id v21 = v48;

        uint64_t v12 = v47;
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
        uint64_t v6 = v42;
        uint64_t v7 = v29;
        int64_t v20 = v56;
        if ((v41 & 1) == 0) {
          goto LABEL_38;
        }
LABEL_6:
        if (!v18) {
          goto LABEL_9;
        }
        goto LABEL_7;
      }

      id v25 = v48;

      swift_bridgeObjectRelease_n(v35, 2LL);
      (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
      uint64_t v6 = v42;
      uint64_t v7 = v29;
      int64_t v20 = v56;
      if (!v18) {
        goto LABEL_9;
      }
LABEL_7:
      unint64_t v22 = __clz(__rbit64(v18));
      v18 &= v18 - 1;
      unint64_t v23 = v22 | (v20 << 6);
      unint64_t v24 = v51;
    }

    uint64_t v38 = v44;
    sub_10002218C((uint64_t)v6, v44, type metadata accessor for WildModeAssociationRecord);
    int v39 = *(unsigned __int8 *)(v38 + *(int *)(v7 + 52));
    sub_100018C68(v38, type metadata accessor for WildModeAssociationRecord);
    if (v39 == 4)
    {
      (*(void (**)(char *, uint64_t))(v10 + 8))(v47, v9);
      goto LABEL_38;
    }

    uint64_t v12 = v47;
    (*(void (**)(char *, uint64_t))(v10 + 8))(v47, v9);
    int64_t v20 = v56;
    if (v39 != 3) {
      goto LABEL_38;
    }
    goto LABEL_6;
  }

  int64_t v20 = v26 + 1;
  if (v26 + 1 >= v46)
  {
LABEL_35:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v10 + 56))(v51, 1LL, 1LL, v9, v19);
    swift_release();
    return;
  }

  unint64_t v27 = *(void *)(v45 + 8 * v20);
  if (v27) {
    goto LABEL_24;
  }
  int64_t v20 = v26 + 2;
  if (v26 + 2 >= v46) {
    goto LABEL_35;
  }
  unint64_t v27 = *(void *)(v45 + 8 * v20);
  if (v27) {
    goto LABEL_24;
  }
  int64_t v20 = v26 + 3;
  if (v26 + 3 >= v46) {
    goto LABEL_35;
  }
  unint64_t v27 = *(void *)(v45 + 8 * v20);
  if (v27) {
    goto LABEL_24;
  }
  int64_t v28 = v26 + 4;
  if (v28 >= v46) {
    goto LABEL_35;
  }
  unint64_t v27 = *(void *)(v45 + 8 * v28);
  if (v27)
  {
    int64_t v20 = v28;
    goto LABEL_24;
  }

  while (1)
  {
    int64_t v20 = v28 + 1;
    if (__OFADD__(v28, 1LL)) {
      break;
    }
    if (v20 >= v46) {
      goto LABEL_35;
    }
    unint64_t v27 = *(void *)(v45 + 8 * v20);
    ++v28;
    if (v27) {
      goto LABEL_24;
    }
  }

uint64_t sub_100398BE8(uint64_t *a1)
{
  return sub_10039A888(a1) & 1;
}

uint64_t sub_100398C00()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (v8 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8) & ~v8;
  uint64_t v15 = v3 | v8 | 7;
  unint64_t v10 = ((*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v11(v0 + v4 + *(int *)(v1 + 24), v6);
  uint64_t v12 = v0 + v4 + *(int *)(v1 + 28);
  uint64_t v13 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(v12, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v11(v0 + v9, v6);
  swift_release();
  return swift_deallocObject(v0, v10, v15);
}

uint64_t sub_100398D40()
{
  uint64_t v1 = *(void *)(type metadata accessor for OwnedBeaconGroup(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v5 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + v4 + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (uint64_t *)(v0 + ((*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  return sub_100385BBC(v0 + v2, *(void **)(v0 + v3), v0 + v6, *v7, v7[1], *(double *)(v0 + v4));
}

uint64_t sub_100398DD4(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_100398DE4(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_100398DEC(uint64_t a1)
{
  return sub_100387580( a1,  *(void *)(v1 + 16),  *(char **)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 48),  *(double *)(v1 + 40));
}

uint64_t sub_100398E10()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100398E34(uint64_t a1)
{
  return sub_1003881B0(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100398E50()
{
  return swift_deallocObject(v0, 17LL, 7LL);
}

unint64_t sub_100398E60()
{
  unint64_t result = qword_1009AAE80;
  if (!qword_1009AAE80)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FD82C, &type metadata for SoundPlaybackManager.SoundPlaybackManagerError);
    atomic_store(result, (unint64_t *)&qword_1009AAE80);
  }

  return result;
}

uint64_t sub_100398EA4()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release();
  swift_unknownObjectRelease(*(void *)(v0 + 24));
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v0 + v4, v1);
  swift_release();
  sub_100016F9C(*(void *)(v0 + v9), *(void *)(v0 + v9 + 8));
  v12(v0 + v9 + *(int *)(v6 + 24), v1);
  uint64_t v13 = v0 + v9 + *(int *)(v6 + 28);
  uint64_t v14 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8LL))(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject(v0, v11 + 8, v10);
}

void sub_100398FDC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = *(void *)(type metadata accessor for OwnedBeaconGroup(0LL) - 8);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  sub_100388EEC( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  v1 + v4,  *(void *)(v1 + v5),  v1 + v7,  *(void **)(v1 + ((*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10039906C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v5 + v8 + 8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = (*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v0 + v4, v1);
  swift_release();
  sub_100016F9C(*(void *)(v0 + v9), *(void *)(v0 + v9 + 8));
  v12(v0 + v9 + *(int *)(v6 + 24), v1);
  uint64_t v13 = v0 + v9 + *(int *)(v6 + 28);
  uint64_t v14 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8LL))(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject(v0, ((v11 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8, v10);
}

void sub_10039919C(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = *(void *)(type metadata accessor for OwnedBeaconGroup(0LL) - 8);
  unint64_t v7 = (v5 + *(unsigned __int8 *)(v6 + 80) + 8) & ~(unint64_t)*(unsigned __int8 *)(v6 + 80);
  unint64_t v8 = (*(void *)(v6 + 64) + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1003891B4( a1,  v1 + v4,  *(_BYTE **)(v1 + v5),  v1 + v7,  *(void **)(v1 + v8),  *(double *)(v1 + ((v8 + 15) & 0xFFFFFFFFFFFFF8LL)));
}

unint64_t sub_100399234(unint64_t result)
{
  if (result >= 4) {
    return swift_errorRetain(result);
  }
  return result;
}

unint64_t sub_100399244(unint64_t result)
{
  if (result >= 4) {
    return swift_errorRelease(result);
  }
  return result;
}

uint64_t sub_100399254(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009AAE30);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

BOOL sub_10039929C(uint64_t a1)
{
  return sub_100389BF8(a1, *(void *)(v1 + 16));
}

uint64_t sub_1003992B8()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1003992DC()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100399350()
{
  return sub_100399F8C( (uint64_t (*)(void))&type metadata accessor for UUID,  (uint64_t (*)(unint64_t, void))sub_100388C4C);
}

void sub_100399368(uint64_t a1)
{
}

uint64_t sub_100399384(uint64_t a1)
{
  return sub_1003945B4(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1003993A0()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_errorRelease(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_100399430()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  sub_100394848(v0 + v2, *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100399484()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  unint64_t v7 = (((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v9 = (v3 + 16 + v8) & ~v3;
  uint64_t v10 = v9 + v5;
  unint64_t v11 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v11(v0 + v4, v1);

  swift_release(*(void *)(v0 + v8 + 8));
  v11(v0 + v9, v1);
  return swift_deallocObject(v0, v10, v6);
}

uint64_t sub_10039953C()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  unint64_t v4 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10038F6A0( (void (*)(void, void, void, void))(v0 + v3),  *(char **)(v0 + ((v4 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((((v4 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((((v4 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8),  (char *)(v0 + ((v2 + 16 + ((((v4 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)) & ~v2)),  *(double *)(v0 + v4));
}

uint64_t sub_1003995A4(uint64_t a1)
{
  return sub_10039144C(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), *(double *)(v1 + 40));
}

uint64_t sub_1003995C4()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_10039965C(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  return sub_100391B78(a1, *(void *)(v1 + 16), *(void *)(v1 + 24), v1 + ((v3 + 32) & ~v3));
}

void *sub_1003996B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(char *))
{
  uint64_t v34 = a2;
  uint64_t v35 = a4;
  uint64_t v33 = type metadata accessor for UUID(0LL);
  uint64_t v31 = *(void *)(v33 - 8);
  uint64_t v6 = __chkstk_darwin(v33);
  uint64_t v32 = (char *)v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v30 = (char *)v28 - v8;
  uint64_t v9 = *(void *)(a1 + 16);
  unint64_t result = _swiftEmptyArrayStorage;
  if (v9)
  {
    v28[1] = v4;
    uint64_t v37 = _swiftEmptyArrayStorage;
    specialized ContiguousArray.reserveCapacity(_:)(v9);
    unint64_t result = (void *)sub_1006F6728(a1);
    uint64_t v11 = (uint64_t)result;
    uint64_t v13 = v12;
    int v15 = v14 & 1;
    uint64_t v29 = a1 + 56;
    uint64_t v16 = v31;
    uint64_t v17 = v32;
    while ((v11 & 0x8000000000000000LL) == 0 && v11 < 1LL << *(_BYTE *)(a1 + 32))
    {
      if (*(_DWORD *)(a1 + 36) != (_DWORD)v13) {
        goto LABEL_12;
      }
      uint64_t v18 = *(void *)(a1 + 48) + *(void *)(v16 + 72) * v11;
      __n128 v19 = *(void (**)(char *, uint64_t, uint64_t))(v16 + 16);
      int64_t v20 = v30;
      uint64_t v21 = v33;
      int v36 = v15;
      v19(v30, v18, v33);
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(v17, v20, v21);
      uint64_t v22 = v35(v17);
      uint64_t v23 = (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v17, v21);
      specialized ContiguousArray._makeUniqueAndReserveCapacityIfNotUnique()(v23);
      uint64_t v24 = v37[2];
      specialized ContiguousArray._reserveCapacityAssumingUniqueBuffer(oldCount:)(v24);
      uint64_t v25 = specialized ContiguousArray._appendElementAssumeUniqueAndCapacity(_:newElement:)(v24, v22);
      specialized ContiguousArray._endMutation()(v25);
      unint64_t result = (void *)sub_1001FE5FC(v11, v13, v36 & 1, a1);
      uint64_t v11 = (uint64_t)result;
      uint64_t v13 = v26;
      int v15 = v27 & 1;
      if (!--v9)
      {
        sub_100086B14((uint64_t)result, v26, v15);
        return v37;
      }
    }

    __break(1u);
LABEL_11:
    __break(1u);
LABEL_12:
    __break(1u);
  }

  return result;
}

BOOL sub_1003998B0(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v42 = (uint64_t)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v38 - v6;
  if (qword_10099B300 != -1) {
    goto LABEL_25;
  }
  while (1)
  {
    uint64_t v8 = qword_100A2A6C8;
    uint64_t v9 = objc_autoreleasePoolPush();
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009AF790);
    OS_dispatch_queue.sync<A>(execute:)(sub_1000DE20C, v8, v10);
    uint64_t v11 = v45;
    if (!v45[2] || (unint64_t v12 = sub_10030D124(a1), (v13 & 1) == 0))
    {
      swift_bridgeObjectRelease();
      uint64_t v17 = _swiftEmptyArrayStorage;
      goto LABEL_18;
    }

    uint64_t v14 = *(void *)(v11[7] + 8 * v12);
    swift_bridgeObjectRetain(v14);
    swift_bridgeObjectRelease();
    int v15 = sub_1002FE5F8(v14);
    swift_bridgeObjectRelease();
    sub_1002FFE1C((uint64_t)v15);
    a1 = v16;
    swift_release();
    uint64_t v17 = _swiftEmptyArrayStorage;
    uint64_t v45 = _swiftEmptyArrayStorage;
    uint64_t v18 = *(void *)(a1 + 16);
    if (!v18) {
      break;
    }
    int v39 = v9;
    unint64_t v19 = 0LL;
    int64_t v20 = _swiftEmptyArrayStorage;
    uint64_t v40 = v3;
    uint64_t v41 = v18;
    while (v19 < *(void *)(a1 + 16))
    {
      unint64_t v21 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
      uint64_t v22 = *(void *)(v3 + 72);
      sub_10001DC4C(a1 + v21 + v22 * v19, (uint64_t)v7, type metadata accessor for BeaconObservation);
      if (v7[*(int *)(v2 + 24)] == 22)
      {
        uint64_t v23 = v2;
        sub_10002218C((uint64_t)v7, v42, type metadata accessor for BeaconObservation);
        if ((swift_isUniquelyReferenced_nonNull_native(v20) & 1) == 0) {
          sub_100032AA8(0, v20[2] + 1LL, 1);
        }
        int64_t v20 = v45;
        unint64_t v25 = v45[2];
        unint64_t v24 = v45[3];
        if (v25 >= v24 >> 1)
        {
          sub_100032AA8(v24 > 1, v25 + 1, 1);
          int64_t v20 = v45;
        }

        v20[2] = v25 + 1;
        sub_10002218C(v42, (uint64_t)v20 + v21 + v25 * v22, type metadata accessor for BeaconObservation);
        uint64_t v2 = v23;
        uint64_t v3 = v40;
        uint64_t v18 = v41;
      }

      else
      {
        sub_100018C68((uint64_t)v7, type metadata accessor for BeaconObservation);
      }

      if (v18 == ++v19)
      {
        uint64_t v17 = v45;
        uint64_t v9 = v39;
        goto LABEL_17;
      }
    }

    __break(1u);
LABEL_25:
    swift_once(&qword_10099B300, sub_1003459EC);
  }

uint64_t sub_100399CEC(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for BeaconObservation(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = &v14[-((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  if (qword_10099B300 != -1) {
    swift_once(&qword_10099B300, sub_1003459EC);
  }
  uint64_t v6 = qword_100A2A6C8;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  (*(void (**)(_BYTE *, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v5, a1, v7);
  static Date.trustedNow.getter((uint64_t)&v5[*(int *)(v2 + 20)]);
  v5[*(int *)(v2 + 24)] = 22;
  uint64_t v8 = sub_100004AEC(&qword_10099D318);
  uint64_t v9 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = (v9 + 32) & ~v9;
  uint64_t v11 = swift_allocObject(v8, v10 + *(void *)(v3 + 72), v9 | 7);
  *(_OWORD *)(v11 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1007E67D0;
  sub_10001DC4C((uint64_t)v5, v11 + v10, type metadata accessor for BeaconObservation);
  uint64_t v12 = type metadata accessor for Transaction(0LL);
  __chkstk_darwin(v12);
  *(void *)&v14[-32] = v6;
  *(void *)&v14[-24] = v11;
  *(void *)&v14[-16] = 0LL;
  *(void *)&v14[-8] = 0LL;
  static Transaction.named<A>(_:with:)( "com.apple.icloud.searchpartyd.BeaconObservationStore.save",  57LL,  2LL,  sub_1002DDE58);
  swift_bridgeObjectRelease();
  return sub_100018C68((uint64_t)v5, type metadata accessor for BeaconObservation);
}

uint64_t sub_100399E90()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v7 + *(int *)(v1 + 24);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  uint64_t v10 = v7 + *(int *)(v1 + 28);
  uint64_t v11 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL))(v10, v11);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_100399F78()
{
  return sub_100399F8C( type metadata accessor for OwnedBeaconGroup,  (uint64_t (*)(unint64_t, void))sub_10037E75C);
}

uint64_t sub_100399F8C(uint64_t (*a1)(void), uint64_t (*a2)(unint64_t, void))
{
  uint64_t v3 = *(void *)(a1(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  return a2(v2 + v4, *(void *)(v2 + ((*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_100399FE0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_100399FF0(uint64_t a1)
{
  return sub_10039B3A0(a1, (uint64_t (*)(uint64_t, void, void, void, void, double))sub_10037E7B8);
}

uint64_t sub_10039A00C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10039A030()
{
  uint64_t v1 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (v8 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8) & ~v8;
  uint64_t v15 = v3 | v8 | 7;
  unint64_t v10 = ((((*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v11 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v11(v0 + v4 + *(int *)(v1 + 24), v6);
  uint64_t v12 = v0 + v4 + *(int *)(v1 + 28);
  uint64_t v13 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v13 - 8) + 8LL))(v12, v13);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();

  v11(v0 + v9, v6);
  swift_release();
  return swift_deallocObject(v0, v10, v15);
}

uint64_t sub_10039A174()
{
  uint64_t v1 = *(void *)(type metadata accessor for OwnedBeaconGroup(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v4 = (v3 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v5 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v6 = (*(unsigned __int8 *)(v5 + 80) + v4 + 8) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80);
  unint64_t v7 = (*(void *)(v5 + 64) + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10037EB0C( v0 + v2,  *(void **)(v0 + v3),  (void (*)(void, void, void))(v0 + v6),  *(void *)(v0 + v7),  *(void *)(v0 + ((v7 + 15) & 0xFFFFFFFFFFFFF8LL)),  *(double *)(v0 + v4));
}

uint64_t sub_10039A210(uint64_t a1)
{
  return sub_100380968(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_10039A230()
{
  return swift_deallocObject(v0, 25LL, 7LL);
}

unint64_t sub_10039A258(unint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return sub_100399244(result);
  }
  return result;
}

uint64_t sub_10039A264()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  unint64_t v6 = (v4 + v5 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = (v3 + v6 + 8) & ~v3;
  uint64_t v8 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v11 = (v5 + v10 + v7) & ~v10;
  uint64_t v18 = v3 | v10 | 7;
  unint64_t v12 = ((((*(void *)(v9 + 64) + v11 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_release();
  swift_unknownObjectRelease(*(void *)(v0 + 24));
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v13(v0 + v4, v1);
  swift_release();

  v13(v0 + v7, v1);
  uint64_t v14 = v0 + v11;
  sub_100016F9C(*(void *)v14, *(void *)(v14 + 8));
  v13(v14 + *(int *)(v8 + 24), v1);
  uint64_t v15 = v14 + *(int *)(v8 + 28);
  uint64_t v16 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v16 - 8) + 8LL))(v15, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v12, v18);
}

void sub_10039A3D0(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  uint64_t v6 = *(void *)(v3 + 64);
  unint64_t v7 = (v5 + v6 + 23) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v8 = (v4 + v7 + 8) & ~v4;
  uint64_t v9 = *(void *)(type metadata accessor for OwnedBeaconGroup(0LL) - 8);
  unint64_t v10 = (v6 + *(unsigned __int8 *)(v9 + 80) + v8) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80);
  unint64_t v11 = (*(void *)(v9 + 64) + v10 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  sub_1003824C8( *(double *)(v1 + ((v11 + 15) & 0xFFFFFFFFFFFFF8LL)),  a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  v1 + v5,  *(void *)(v1 + ((v5 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL)),  *(unsigned __int8 *)(v1 + ((v5 + v6 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8),  *(void **)(v1 + v7),  v1 + v8,  v1 + v10,  *(void *)(v1 + v11));
}

uint64_t sub_10039A4B0()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  unint64_t v5 = (((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 + v5 + 8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  uint64_t v11 = *(void *)(v7 + 64) + v9 + 1;
  swift_release();
  swift_bridgeObjectRelease();
  unint64_t v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v0 + v4, v1);
  swift_release();
  sub_100016F9C(*(void *)(v0 + v9), *(void *)(v0 + v9 + 8));
  v12(v0 + v9 + *(int *)(v6 + 24), v1);
  uint64_t v13 = v0 + v9 + *(int *)(v6 + 28);
  uint64_t v14 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8LL))(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v11, v10);
}

void sub_10039A5E8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v7 = (v6 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v8 = *(void *)(type metadata accessor for OwnedBeaconGroup(0LL) - 8);
  unint64_t v9 = (*(unsigned __int8 *)(v8 + 80) + v7 + 8) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80);
  sub_1003833E0( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  v1 + v4,  *(char **)(v1 + v5),  *(void *)(v1 + v7),  v1 + v9,  *(double *)(v1 + v6),  *(_BYTE *)(v1 + v9 + *(void *)(v8 + 64)));
}

uint64_t sub_10039A6A4()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = ((((*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8;

  unint64_t v12 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v12(v0 + v4, v1);
  sub_100016F9C(*(void *)(v0 + v9), *(void *)(v0 + v9 + 8));
  v12(v0 + v9 + *(int *)(v6 + 24), v1);
  uint64_t v13 = v0 + v9 + *(int *)(v6 + 28);
  uint64_t v14 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8LL))(v13, v14);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v11, v10);
}

uint64_t sub_10039A7B8()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for OwnedBeaconGroup(0LL) - 8);
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10038E528( *(void *)(v0 + 16),  v0 + v2,  v0 + v5,  *(void *)(v0 + v6),  (uint64_t)"SoundPlaybackManager.queuePlaySound",  35LL,  (uint64_t)sub_100399FF0,  *(double *)(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFF8LL)));
}

unint64_t sub_10039A854(unint64_t result)
{
  if (result >= 7) {
    return 7LL;
  }
  return result;
}

unint64_t sub_10039A864(unint64_t result, char a2)
{
  if ((a2 & 1) != 0) {
    return sub_100399234(result);
  }
  return result;
}

void sub_10039A874()
{
}

uint64_t sub_10039A888(uint64_t *a1)
{
  uint64_t v2 = *(void *)(v1 + 16);
  uint64_t v3 = *a1;
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord(0LL);
  return sub_1004E4BF0(v2 + *(int *)(v4 + 20), v3) & 1;
}

uint64_t sub_10039A8D8()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  unint64_t v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);

  return swift_deallocObject(v0, v8 + 8, v6);
}

void sub_10039A978(uint64_t a1)
{
}

void sub_10039A994(uint64_t a1, const char *a2, uint64_t a3, const char *a4)
{
  uint64_t v9 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v10 = *(unsigned __int8 *)(v9 + 80);
  sub_100393F60( a1,  v4 + ((v10 + 16) & ~v10),  v4 + ((*(void *)(v9 + 64) + v10 + ((v10 + 16) & ~v10)) & ~v10),  *(const char **)(v4 + ((*(void *)(v9 + 64) + ((*(void *)(v9 + 64) + v10 + ((v10 + 16) & ~v10)) & ~v10) + 7) & 0xFFFFFFFFFFFFF8LL)),  a2,  a3,  a4);
}

uint64_t sub_10039AA20(uint64_t a1)
{
  return sub_100392770(a1, *(char **)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_10039AA3C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_errorRelease(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

void sub_10039AAD4()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = v0 + v2;
  uint64_t v4 = *(void *)(v0 + ((*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFF8LL));
  Transaction.capture()();
  sub_100392A18(v3, v4);
}

void sub_10039AB40()
{
}

void sub_10039AB5C()
{
}

void sub_10039AB78()
{
}

uint64_t sub_10039AB94()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  unint64_t v7 = (((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v9 = (v3 + 16 + v8) & ~v3;
  uint64_t v10 = v9 + v5;
  unint64_t v11 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v11(v0 + v4, v1);

  swift_release(*(void *)(v0 + v8 + 8));
  v11(v0 + v9, v1);
  return swift_deallocObject(v0, v10, v6);
}

uint64_t sub_10039AC54()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 16) & ~v2;
  unint64_t v4 = (*(void *)(v1 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10038A70C( v0 + v3,  *(void ***)(v0 + v4),  *(void ***)(v0 + v6),  *(void *)(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8),  (void **)(v0 + ((v2 + 16 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL)) & ~v2)),  *(double *)(v0 + v5));
}

void sub_10039ACCC()
{
}

uint64_t sub_10039ACE0(uint64_t a1)
{
  return sub_10038BCB4( a1,  *(void *)(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  *(void *)(v1 + 40),  *(double *)(v1 + 48));
}

void sub_10039AD00()
{
}

uint64_t sub_10039AD1C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 24));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

unint64_t sub_10039ADC4(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10038C32C( a1,  *(void *)(v1 + 16),  *(double *)(v1 + v5),  *(void *)(v1 + 24),  v1 + v4,  *(void *)(v1 + ((v5 + 15) & 0xFFFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10039AE30()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;

  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_10039AEA4()
{
  uint64_t v1 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  return sub_10038C8D0(*(void *)(v0 + 16), v0 + ((v1 + 24) & ~v1));
}

uint64_t sub_10039AED4()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_10039AEE4(uint64_t a1)
{
  return sub_10039B3A0(a1, (uint64_t (*)(uint64_t, void, void, void, void, double))sub_10038C9D8);
}

uint64_t sub_10039AF00()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + 7LL;
  unint64_t v7 = (v3 + ((v6 + v4) & 0xFFFFFFFFFFFFFFF8LL) + 8) & ~v3;
  unint64_t v8 = (((v6 + v7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;

  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  swift_release(*(void *)(v0 + v8));
  return swift_deallocObject(v0, v8 + 8, v5);
}

uint64_t sub_10039AFB8()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64) + 7LL;
  unint64_t v5 = (v4 + v3) & 0xFFFFFFFFFFFFFFF8LL;
  return sub_10038CCF4( *(char **)(v0 + 16),  v0 + v3,  v0 + ((v2 + v5 + 8) & ~v2),  *(void *)(v0 + ((v4 + ((v2 + v5 + 8) & ~v2)) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((((v4 + ((v2 + v5 + 8) & ~v2)) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFF8LL)),  *(double *)(v0 + v5));
}

uint64_t sub_10039B028()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  unint64_t v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  swift_release(*(void *)(v0 + v8));
  return swift_deallocObject(v0, v8 + 8, v6);
}

void sub_10039B0C8(uint64_t (*a1)(void), const char *a2)
{
  uint64_t v5 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  sub_10038B998( v2 + ((v6 + 16) & ~v6),  v2 + ((*(void *)(v5 + 64) + v6 + ((v6 + 16) & ~v6)) & ~v6),  *(void *)(v2 + ((*(void *)(v5 + 64) + ((*(void *)(v5 + 64) + v6 + ((v6 + 16) & ~v6)) & ~v6) + 7) & 0xFFFFFFFFFFFFF8LL)),  a1,  a2);
}

uint64_t sub_10039B13C()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + 7LL;
  unint64_t v7 = (v3 + ((((v6 + v4) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 9) & ~v3;
  unint64_t v8 = (v6 + v7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_release(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 24));
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  swift_unknownObjectRelease(*(void *)(v0 + v8));
  return swift_deallocObject(v0, v8 + 8, v5);
}

void sub_10039B1FC(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v5 = (v4 + 32) & ~v4;
  unint64_t v6 = (*(void *)(v3 + 64) + 7LL + v5) & 0xFFFFFFFFFFFFFFF8LL;
  sub_10038E5CC( a1,  *(void *)(v1 + 16),  *(double *)(v1 + v6),  *(void *)(v1 + 24),  v1 + v5,  *(uint64_t (**)(uint64_t))(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL)),  *(unsigned __int8 *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8),  (uint64_t (*)(uint64_t))(v1 + ((v4 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL) + 9) & ~v4)));
}

uint64_t sub_10039B280()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  unint64_t v8 = ((((v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8;

  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  return swift_deallocObject(v0, v8, v6);
}

uint64_t sub_10039B328()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  return sub_10038E528( *(void *)(v0 + 16),  v0 + v3,  v0 + ((v4 + v2 + v3) & ~v2),  *(void *)(v0 + ((v4 + ((v4 + v2 + v3) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8LL)),  (uint64_t)"SoundPlaybackManager.queuePlaySoundSingle",  41LL,  (uint64_t)sub_10039AEE4,  *(double *)(v0 + ((((v4 + ((v4 + v2 + v3) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFF8LL)));
}

uint64_t sub_10039B3A0(uint64_t a1, uint64_t (*a2)(uint64_t, void, void, void, void, double))
{
  return a2( a1,  *(void *)(v2 + 16),  *(void *)(v2 + 24),  *(void *)(v2 + 40),  *(void *)(v2 + 48),  *(double *)(v2 + 32));
}

uint64_t sub_10039B3C8()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  return sub_100375870( *(void *)(v0 + 16),  v0 + v3,  v0 + ((v4 + v2 + v3) & ~v2),  *(void *)(v0 + ((v4 + ((v4 + v2 + v3) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8LL)),  *(void *)(v0 + ((v4 + ((v4 + v2 + v3) & ~v2) + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8));
}

uint64_t sub_10039B420()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  unint64_t v7 = (v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v8 = (v3 + v7 + 16) & ~v3;
  uint64_t v9 = v8 + v5;
  swift_release(*(void *)(v0 + 16));
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v10(v0 + v4, v1);
  swift_release(*(void *)(v0 + v7 + 8));
  v10(v0 + v8, v1);
  return swift_deallocObject(v0, v9, v6);
}

uint64_t sub_10039B4CC()
{
  uint64_t v2 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v6 = (v3 + v5 + 16) & ~v3;
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = v0 + v4;
  uint64_t v9 = (uint64_t *)(v0 + v5);
  uint64_t v10 = *v9;
  uint64_t v11 = v9[1];
  uint64_t v12 = v0 + v6;
  uint64_t v13 = (void *)swift_task_alloc(dword_1009A78D4);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v13;
  *uint64_t v13 = v1;
  v13[1] = sub_100015D58;
  return sub_10027133C(v7, v8, v10, v11, v12);
}

uint64_t sub_10039B580()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  unint64_t v8 = (v5 + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL;

  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  swift_release(*(void *)(v0 + v8 + 8));
  return swift_deallocObject(v0, v8 + 16, v6);
}

uint64_t sub_10039B62C()
{
  uint64_t v1 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = *(void *)(v1 + 64);
  uint64_t v5 = (v4 + v2 + v3) & ~v2;
  uint64_t v6 = v0 + v3;
  uint64_t v7 = v0 + v5;
  unint64_t v8 = (uint64_t *)(v0 + ((v4 + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v10 = *v8;
  uint64_t v9 = v8[1];
  sub_100012ED8( (void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_findMyCommandManager),  *(void *)(*(void *)(v0 + 16) + OBJC_IVAR____TtC12searchpartyd20SoundPlaybackManager_findMyCommandManager + 24));
  return sub_100285C1C(v6, v7, v10, v9);
}

uint64_t sub_10039B6C8()
{
  uint64_t v1 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v22 = *(void *)(v2 + 64);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v21 = *(void *)(v5 + 64);

  uint64_t v23 = (v3 + 24) & ~v3;
  uint64_t v7 = v0 + v23;
  sub_100016F9C(*(void *)v7, *(void *)(v7 + 8));
  unint64_t v8 = *(void (**)(uint64_t, uint64_t))(v5 + 8);
  v8(v0 + v23 + v1[5], v4);
  uint64_t v9 = v0 + v23 + v1[6];
  uint64_t v10 = type metadata accessor for StableIdentifier(0LL);
  switch(swift_getEnumCaseMultiPayload(v9, v10))
  {
    case 0u:
    case 4u:
      goto LABEL_6;
    case 1u:
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_6;
    case 2u:
      v8(v9, v4);
      uint64_t v11 = v3;
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_5;
    case 3u:
      v8(v9, v4);
      uint64_t v11 = v3;
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_5:
      uint64_t v3 = v11;
LABEL_6:
      swift_bridgeObjectRelease();
      break;
    default:
      break;
  }

  uint64_t v12 = v7 + v1[7];
  uint64_t v13 = v7 + v1[8];
  uint64_t v14 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8LL))(v13, v14);
  sub_100016F9C(*(void *)(v7 + v1[9]), *(void *)(v7 + v1[9] + 8));
  uint64_t v15 = (uint64_t *)(v7 + v1[10]);
  unint64_t v16 = v15[1];
  if (v16 >> 60 != 15) {
    sub_100016F9C(*v15, v16);
  }
  uint64_t v17 = (uint64_t *)(v7 + v1[11]);
  unint64_t v18 = v17[1];
  if (v18 >> 60 != 15) {
    sub_100016F9C(*v17, v18);
  }
  uint64_t v19 = (v23 + v22 + v6) & ~v6;
  sub_100016F9C(*(void *)(v7 + v1[12]), *(void *)(v7 + v1[12] + 8));
  sub_100016F9C(*(void *)(v7 + v1[13]), *(void *)(v7 + v1[13] + 8));
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  v8(v0 + v19, v4);
  swift_release();
  return swift_deallocObject(v0, ((v21 + v19 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | v6 | 7);
}

uint64_t sub_10039B9B8()
{
  uint64_t v1 = *(void *)(type metadata accessor for OwnedBeaconRecord(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = *(void *)(v1 + 64);
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v5 = (v2 + v3 + *(unsigned __int8 *)(v4 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = (uint64_t *)(v0 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  return sub_100375520(*(void *)(v0 + 16), v0 + v2, v0 + v5, *v6, v6[1]);
}

uint64_t storeEnumTagSinglePayload for SoundPlaybackManager.PlaybackState( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 6 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 6) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFA) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF9) {
    return ((uint64_t (*)(void))((char *)&loc_10039BA80 + 4 * byte_1007FD716[v4]))();
  }
  *a1 = a2 + 6;
  return ((uint64_t (*)(void))((char *)sub_10039BAB4 + 4 * byte_1007FD711[v4]))();
}

uint64_t sub_10039BAB4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10039BABC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x10039BAC4LL);
  }
  return result;
}

uint64_t sub_10039BAD0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x10039BAD8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 6;
  return result;
}

uint64_t sub_10039BADC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_10039BAE4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for SoundPlaybackManager.PlaybackState()
{
  return &type metadata for SoundPlaybackManager.PlaybackState;
}

unint64_t sub_10039BB04()
{
  unint64_t result = qword_1009AAF38;
  if (!qword_1009AAF38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FD9D4, &type metadata for SoundPlaybackManager.PlaybackState);
    atomic_store(result, (unint64_t *)&qword_1009AAF38);
  }

  return result;
}

unint64_t sub_10039BB48()
{
  unint64_t result = qword_1009AAF40;
  if (!qword_1009AAF40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FD95C, &type metadata for SoundPlaybackManager.PlaybackState);
    atomic_store(result, (unint64_t *)&qword_1009AAF40);
  }

  return result;
}

BOOL sub_10039BB8C(uint64_t a1)
{
  return sub_10039929C(a1);
}

uint64_t sub_10039BCD8()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10000A8AC(v2, qword_100A2A768);
  sub_10000A720(v0, (uint64_t)qword_100A2A768);
  type metadata accessor for BeaconStore(0LL);
  sub_1004E6208((uint64_t)v4);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000017LL, 0x80000001007FDB60LL, 1LL);
  return (*(uint64_t (**)(char *, uint64_t))(v1 + 8))(v4, v0);
}

uint64_t sub_10039BDA8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  uint64_t v54 = *(void *)(v4 - 8);
  uint64_t v55 = v4;
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v51 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009A6DD0);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v51 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v56 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v52 = (char *)&v51 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v51 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v53 = (uint64_t)&v51 - v16;
  uint64_t v17 = type metadata accessor for UUID(0LL);
  uint64_t v18 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v17, v18);
  uint64_t v19 = (int *)type metadata accessor for BeaconProductInfoRecord(0LL);
  int v20 = *(unsigned __int8 *)(v1 + v19[5]);
  if (v20 == 2)
  {
    Swift::UInt8 v21 = 0;
  }

  else
  {
    Swift::UInt8 v21 = v20 & 1;
    Hasher._combine(_:)(1u);
  }

  Hasher._combine(_:)(v21);
  Hasher._combine(_:)(*(_BYTE *)(v1 + v19[6]));
  Hasher._combine(_:)(*(_BYTE *)(v1 + v19[7]));
  uint64_t v22 = (uint64_t *)(v1 + v19[8]);
  uint64_t v23 = *v22;
  uint64_t v24 = v22[1];
  swift_bridgeObjectRetain(v24);
  String.hash(into:)(a1, v23, v24);
  swift_bridgeObjectRelease();
  unint64_t v25 = (uint64_t *)(v2 + v19[9]);
  uint64_t v26 = *v25;
  uint64_t v27 = v25[1];
  swift_bridgeObjectRetain(v27);
  String.hash(into:)(a1, v26, v27);
  swift_bridgeObjectRelease();
  uint64_t v28 = v2 + v19[10];
  if (*(_BYTE *)(v28 + 8) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    Swift::UInt v29 = *(void *)v28;
    Hasher._combine(_:)(1u);
    Hasher._combine(_:)(v29);
  }

  uint64_t v30 = (uint64_t *)(v2 + v19[11]);
  uint64_t v31 = v30[1];
  if (v31)
  {
    uint64_t v51 = v10;
    uint64_t v32 = v6;
    uint64_t v33 = *v30;
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v31);
    uint64_t v34 = v33;
    uint64_t v6 = v32;
    uint64_t v10 = v51;
    String.hash(into:)(a1, v34, v31);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v35 = v53;
  sub_10001581C(v2 + v19[12], v53, (uint64_t *)&unk_1009A34D0);
  uint64_t v36 = v56;
  uint64_t v37 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v56 + 48);
  if (v37(v35, 1LL, v10) == 1)
  {
    Hasher._combine(_:)(0);
    uint64_t v38 = v56;
  }

  else
  {
    uint64_t v39 = v35;
    uint64_t v40 = v52;
    (*(void (**)(char *, uint64_t, uint64_t))(v36 + 32))(v52, v39, v10);
    Hasher._combine(_:)(1u);
    uint64_t v41 = sub_100007864( &qword_1009A89C0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(a1, v10, v41);
    uint64_t v38 = v56;
    (*(void (**)(char *, uint64_t))(v56 + 8))(v40, v10);
  }

  sub_10001581C(v2 + v19[13], (uint64_t)v15, (uint64_t *)&unk_1009A34D0);
  if (v37((uint64_t)v15, 1LL, v10) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    uint64_t v42 = v52;
    (*(void (**)(char *, char *, uint64_t))(v38 + 32))(v52, v15, v10);
    Hasher._combine(_:)(1u);
    uint64_t v43 = sub_100007864( &qword_1009A89C0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    dispatch thunk of Hashable.hash(into:)(a1, v10, v43);
    (*(void (**)(char *, uint64_t))(v38 + 8))(v42, v10);
  }

  uint64_t v44 = (uint64_t *)(v2 + v19[14]);
  uint64_t v45 = *v44;
  uint64_t v46 = v44[1];
  swift_bridgeObjectRetain(v46);
  String.hash(into:)(a1, v45, v46);
  swift_bridgeObjectRelease();
  if ((*(void *)(v2 + v19[15]) & 0x7FFFFFFFFFFFFFFFLL) != 0) {
    Swift::UInt64 v47 = *(void *)(v2 + v19[15]);
  }
  else {
    Swift::UInt64 v47 = 0LL;
  }
  Hasher._combine(_:)(v47);
  sub_10001581C(v2 + v19[16], (uint64_t)v9, &qword_1009A6DD0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v54 + 48))(v9, 1LL, v55) == 1)
  {
    Hasher._combine(_:)(0);
  }

  else
  {
    sub_1003A1130((uint64_t)v9, (uint64_t)v6);
    Hasher._combine(_:)(1u);
    sub_1002F16AC(a1);
    sub_100018C68((uint64_t)v6, type metadata accessor for AccessoryInfoResponseContent.Configuration);
  }

  Hasher._combine(_:)(*(_DWORD *)(v2 + v19[17]));
  uint64_t v48 = *(void *)(v2 + v19[18]);
  if (v48)
  {
    Hasher._combine(_:)(1u);
    swift_bridgeObjectRetain(v48);
    sub_1005BEDD8(a1, v48);
    swift_bridgeObjectRelease();
  }

  else
  {
    Hasher._combine(_:)(0);
  }

  uint64_t v49 = sub_100007864( &qword_1009A89C0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
  dispatch thunk of Hashable.hash(into:)(a1, v10, v49);
  dispatch thunk of Hashable.hash(into:)(a1, v10, v49);
  dispatch thunk of Hashable.hash(into:)(a1, v10, v49);
  dispatch thunk of Hashable.hash(into:)(a1, v10, v49);
  dispatch thunk of Hashable.hash(into:)(a1, v10, v49);
  return dispatch thunk of Hashable.hash(into:)(a1, v10, v49);
}

uint64_t sub_10039C39C(unsigned __int8 a1)
{
  return ((uint64_t (*)(uint64_t, unint64_t))((char *)sub_10039C3D4 + 4 * byte_1007FDB60[a1]))( 0x696669746E656469LL,  0xEA00000000007265LL);
}

unint64_t sub_10039C3D4()
{
  return 0xD000000000000012LL;
}

uint64_t sub_10039C48C()
{
  return 0x55656C6261736964LL;
}

unint64_t sub_10039C4A8()
{
  return 0xD000000000000011LL;
}

uint64_t sub_10039C5D4(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009AB050);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v50 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1003A10EC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for BeaconProductInfoRecord.CodingKeys,  &type metadata for BeaconProductInfoRecord.CodingKeys,  v11,  v9,  v10);
  LOBYTE(v51) = 0;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v51, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = (int *)type metadata accessor for BeaconProductInfoRecord(0LL);
    uint64_t v15 = *(unsigned __int8 *)(v3 + v14[5]);
    LOBYTE(v51) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, &v51, v5);
    uint64_t v16 = *(unsigned __int8 *)(v3 + v14[6]);
    LOBYTE(v51) = 2;
    KeyedEncodingContainer.encode(_:forKey:)(v16, &v51, v5);
    uint64_t v17 = *(unsigned __int8 *)(v3 + v14[7]);
    LOBYTE(v51) = 3;
    KeyedEncodingContainer.encode(_:forKey:)(v17, &v51, v5);
    uint64_t v18 = (uint64_t *)(v3 + v14[8]);
    uint64_t v19 = *v18;
    uint64_t v20 = v18[1];
    LOBYTE(v51) = 4;
    KeyedEncodingContainer.encode(_:forKey:)(v19, v20, &v51, v5);
    Swift::UInt8 v21 = (uint64_t *)(v3 + v14[9]);
    uint64_t v22 = *v21;
    uint64_t v23 = v21[1];
    LOBYTE(v51) = 5;
    KeyedEncodingContainer.encode(_:forKey:)(v22, v23, &v51, v5);
    uint64_t v24 = (uint64_t *)(v3 + v14[10]);
    uint64_t v25 = *v24;
    uint64_t v26 = *((unsigned __int8 *)v24 + 8);
    LOBYTE(v51) = 6;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, v26, &v51, v5);
    uint64_t v27 = (uint64_t *)(v3 + v14[11]);
    uint64_t v28 = *v27;
    uint64_t v29 = v27[1];
    LOBYTE(v51) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, &v51, v5);
    uint64_t v30 = v3 + v14[12];
    LOBYTE(v51) = 8;
    uint64_t v31 = type metadata accessor for URL(0LL);
    uint64_t v32 = sub_100007864( &qword_1009A8AC8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v30, &v51, v5, v31, v32);
    uint64_t v33 = v3 + v14[13];
    LOBYTE(v51) = 9;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v33, &v51, v5, v31, v32);
    uint64_t v34 = (uint64_t *)(v3 + v14[14]);
    uint64_t v35 = *v34;
    uint64_t v36 = v34[1];
    LOBYTE(v51) = 10;
    KeyedEncodingContainer.encode(_:forKey:)(v35, v36, &v51, v5);
    double v37 = *(double *)(v3 + v14[15]);
    LOBYTE(v51) = 11;
    KeyedEncodingContainer.encode(_:forKey:)(&v51, v5, v37);
    uint64_t v50 = v3 + v14[16];
    LOBYTE(v51) = 12;
    uint64_t v38 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
    uint64_t v39 = sub_100007864( &qword_1009A8A40,  type metadata accessor for AccessoryInfoResponseContent.Configuration,  (uint64_t)&unk_1007FA220);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v50, &v51, v5, v38, v39);
    LODWORD(v51) = *(_DWORD *)(v3 + v14[17]);
    char v52 = 13;
    unint64_t v40 = sub_10008BAC8();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v51, &v52, v5, &type metadata for AccessoryCapabilities, v40);
    uint64_t v51 = *(void *)(v3 + v14[18]);
    char v52 = 14;
    uint64_t v41 = sub_100004AEC(&qword_1009A8A10);
    uint64_t v42 = sub_1002F79D8( &qword_1009A8A60,  (void (*)(void))sub_1002F7A40,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v51, &v52, v5, v41, v42);
    uint64_t v43 = v3 + v14[19];
    LOBYTE(v51) = 15;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v43, &v51, v5, v31, v32);
    uint64_t v44 = v3 + v14[20];
    LOBYTE(v51) = 16;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v44, &v51, v5, v31, v32);
    uint64_t v45 = v3 + v14[21];
    LOBYTE(v51) = 17;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v45, &v51, v5, v31, v32);
    uint64_t v46 = v3 + v14[22];
    LOBYTE(v51) = 18;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v46, &v51, v5, v31, v32);
    uint64_t v47 = v3 + v14[23];
    LOBYTE(v51) = 19;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v47, &v51, v5, v31, v32);
    uint64_t v48 = v3 + v14[24];
    LOBYTE(v51) = 20;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v48, &v51, v5, v31, v32);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_10039CB88@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v115 = a2;
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v114 = (uint64_t *)((char *)&v109 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v110 = (uint64_t *)((char *)&v109 - v8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v113 = (uint64_t *)((char *)&v109 - v10);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v112 = (uint64_t *)((char *)&v109 - v12);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v111 = (uint64_t *)((char *)&v109 - v14);
  __chkstk_darwin(v13);
  unint64_t v116 = (uint64_t *)((char *)&v109 - v15);
  uint64_t v16 = sub_100004AEC(&qword_1009A6DD0);
  __chkstk_darwin(v16);
  uint64_t v117 = (uint64_t)&v109 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  uint64_t v19 = __chkstk_darwin(v18);
  uint64_t v118 = (uint64_t)&v109 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v19);
  uint64_t v121 = (uint64_t)&v109 - v21;
  uint64_t v125 = type metadata accessor for UUID(0LL);
  uint64_t v122 = *(void *)(v125 - 8);
  __chkstk_darwin(v125);
  uint64_t v120 = (uint64_t *)((char *)&v109 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v126 = sub_100004AEC(&qword_1009AB040);
  uint64_t v119 = *(void *)(v126 - 8);
  __chkstk_darwin(v126);
  uint64_t v24 = (char *)&v109 - ((v23 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v25 = (int *)type metadata accessor for BeaconProductInfoRecord(0LL);
  uint64_t v26 = (int *)__chkstk_darwin(v25);
  uint64_t v28 = (char *)&v109 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = &v28[v26[10]];
  *(void *)uint64_t v29 = 0LL;
  v29[8] = 1;
  uint64_t v30 = &v28[v26[11]];
  *(void *)uint64_t v30 = 0LL;
  *((void *)v30 + 1) = 0LL;
  uint64_t v134 = (uint64_t *)v30;
  uint64_t v31 = v26[12];
  uint64_t v128 = v4;
  uint64_t v32 = *(void (**)(void))(v4 + 56);
  uint64_t v132 = &v28[v31];
  v32();
  uint64_t v131 = &v28[v25[13]];
  v32();
  uint64_t v33 = (uint64_t)&v28[v25[16]];
  uint64_t v34 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  uint64_t v35 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL);
  uint64_t v130 = v33;
  v35(v33, 1LL, 1LL, v34);
  int v135 = v25;
  uint64_t v136 = v28;
  uint64_t v127 = v25[18];
  *(void *)&v28[v127] = 0LL;
  uint64_t v36 = a1[3];
  uint64_t v37 = a1[4];
  os_log_t v124 = a1;
  sub_100012ED8(a1, v36);
  unint64_t v38 = sub_1003A10EC();
  unint64_t v123 = v24;
  uint64_t v39 = v133;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for BeaconProductInfoRecord.CodingKeys,  &type metadata for BeaconProductInfoRecord.CodingKeys,  v38,  v36,  v37);
  uint64_t v129 = v3;
  if (v39)
  {
    uint64_t v133 = v39;
    LODWORD(v126) = 0;
    unsigned int v40 = 21376;
    uint64_t v41 = v136;
    uint64_t v42 = v124;
    uint64_t v43 = v125;
  }

  else
  {
    uint64_t v109 = v34;
    uint64_t v44 = v3;
    uint64_t v45 = v119;
    LOBYTE(v137[0]) = 0;
    uint64_t v46 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v47 = v120;
    uint64_t v48 = v125;
    KeyedDecodingContainer.decode<A>(_:forKey:)(v120, v125, v137, v126, v125, v46);
    uint64_t v49 = v136;
    (*(void (**)(char *, void *, uint64_t))(v122 + 32))(v136, v47, v48);
    LOBYTE(v137[0]) = 1;
    char v50 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v137, v126);
    uint64_t v51 = v135;
    v49[v135[5]] = v50;
    LOBYTE(v137[0]) = 2;
    v49[v51[6]] = KeyedDecodingContainer.decode(_:forKey:)(v137, v126) & 1;
    LOBYTE(v137[0]) = 3;
    v49[v51[7]] = KeyedDecodingContainer.decode(_:forKey:)(v137, v126) & 1;
    LOBYTE(v137[0]) = 4;
    uint64_t v52 = KeyedDecodingContainer.decode(_:forKey:)(v137, v126);
    uint64_t v67 = (uint64_t *)&v49[v51[8]];
    *uint64_t v67 = v52;
    v67[1] = v68;
    LOBYTE(v137[0]) = 5;
    uint64_t v69 = KeyedDecodingContainer.decode(_:forKey:)(v137, v126);
    uint64_t v70 = (uint64_t *)&v49[v51[9]];
    *uint64_t v70 = v69;
    v70[1] = v71;
    LOBYTE(v137[0]) = 6;
    MEMORY[0] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v137, v126);
    MEMORY[8] = v72 & 1;
    LOBYTE(v137[0]) = 7;
    uint64_t v73 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v137, v126);
    unint64_t v74 = v134;
    *uint64_t v134 = v73;
    v74[1] = v75;
    LOBYTE(v137[0]) = 8;
    uint64_t v76 = sub_100007864( &qword_1009A8AB8,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v44, v137, v126, v44, v76);
    uint64_t v77 = v48;
    sub_1000D4D50(v121, (uint64_t)v132, (uint64_t *)&unk_1009A34D0);
    LOBYTE(v137[0]) = 9;
    uint64_t v78 = v76;
    KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v44, v137, v126, v44, v76);
    uint64_t v133 = 0LL;
    sub_1000D4D50(v118, (uint64_t)v131, (uint64_t *)&unk_1009A34D0);
    LOBYTE(v137[0]) = 10;
    uint64_t v79 = v133;
    uint64_t v80 = KeyedDecodingContainer.decode(_:forKey:)(v137, v126);
    uint64_t v133 = v79;
    if (v79)
    {
      (*(void (**)(char *, uint64_t))(v45 + 8))(v123, v126);
      LODWORD(v126) = 0;
      unsigned int v40 = 21425;
    }

    else
    {
      os_log_type_t v82 = (uint64_t *)&v136[v135[14]];
      *os_log_type_t v82 = v80;
      v82[1] = v81;
      LOBYTE(v137[0]) = 11;
      uint64_t v83 = v133;
      v84.n128_f64[0] = KeyedDecodingContainer.decode(_:forKey:)(v137, v126);
      uint64_t v133 = v83;
      if (v83) {
        goto LABEL_32;
      }
      *(void *)&v136[v135[15]] = v84.n128_u64[0];
      LOBYTE(v137[0]) = 12;
      uint64_t v85 = sub_100007864( &qword_1009A89F8,  type metadata accessor for AccessoryInfoResponseContent.Configuration,  (uint64_t)&unk_1007FA248);
      uint64_t v86 = v133;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v109, v137, v126, v109, v85);
      uint64_t v133 = v86;
      if (v86) {
        goto LABEL_32;
      }
      sub_1000D4D50(v117, v130, &qword_1009A6DD0);
      char v138 = 13;
      unint64_t v87 = sub_10008B930();
      uint64_t v88 = v133;
      KeyedDecodingContainer.decode<A>(_:forKey:)( v137,  &type metadata for AccessoryCapabilities,  &v138,  v126,  &type metadata for AccessoryCapabilities,  v87);
      uint64_t v133 = v88;
      if (v88) {
        goto LABEL_32;
      }
      *(_DWORD *)&v136[v135[17]] = v137[0];
      uint64_t v89 = sub_100004AEC(&qword_1009A8A10);
      char v138 = 14;
      uint64_t v90 = sub_1002F79D8( &qword_1009A8A18,  (void (*)(void))sub_1002F78C8,  (uint64_t)&protocol conformance descriptor for <A> [A]);
      uint64_t v91 = v133;
      KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v89, &v138, v126, v89, v90);
      uint64_t v133 = v91;
      if (v91) {
        goto LABEL_32;
      }
      uint64_t v93 = v136;
      uint64_t v92 = v137[0];
      uint64_t v94 = v127;
      swift_bridgeObjectRelease();
      *(void *)&v93[v94] = v92;
      LOBYTE(v137[0]) = 15;
      uint64_t v95 = v133;
      KeyedDecodingContainer.decode<A>(_:forKey:)(v116, v129, v137, v126, v129, v76);
      uint64_t v133 = v95;
      if (v95)
      {
LABEL_32:
        (*(void (**)(char *, uint64_t, __n128))(v45 + 8))(v123, v126, v84);
        LODWORD(v126) = 0;
        unsigned int v40 = 22449;
      }

      else
      {
        uint64_t v96 = v129;
        uint64_t v97 = *(void (**)(char *, void *, uint64_t))(v128 + 32);
        v97(&v136[v135[19]], v116, v129);
        LOBYTE(v137[0]) = 16;
        uint64_t v98 = v133;
        KeyedDecodingContainer.decode<A>(_:forKey:)(v111, v96, v137, v126, v96, v76);
        uint64_t v133 = v98;
        if (!v98)
        {
          uint64_t v99 = v129;
          v97(&v136[v135[20]], v111, v129);
          LOBYTE(v137[0]) = 17;
          uint64_t v100 = v133;
          KeyedDecodingContainer.decode<A>(_:forKey:)(v112, v99, v137, v126, v99, v76);
          BOOL v101 = v100 == 0;
          uint64_t v133 = v100;
          if (v100
            || (uint64_t v102 = v129,
                v97(&v136[v135[21]], v112, v129),
                LOBYTE(v137[0]) = 18,
                uint64_t v103 = v133,
                KeyedDecodingContainer.decode<A>(_:forKey:)(v113, v102, v137, v126, v102, v78),
                (uint64_t v133 = v103) != 0))
          {
            (*(void (**)(char *, uint64_t))(v45 + 8))(v123, v126);
            int v56 = 0;
            int v57 = 0;
          }

          else
          {
            uint64_t v104 = v129;
            v97(&v136[v135[22]], v113, v129);
            LOBYTE(v137[0]) = 19;
            uint64_t v105 = v133;
            KeyedDecodingContainer.decode<A>(_:forKey:)(v110, v104, v137, v126, v104, v78);
            uint64_t v133 = v105;
            if (v105)
            {
              (*(void (**)(char *, uint64_t))(v45 + 8))(v123, v126);
              int v57 = 0;
              int v56 = 1;
            }

            else
            {
              uint64_t v106 = v129;
              v97(&v136[v135[23]], v110, v129);
              LOBYTE(v137[0]) = 20;
              uint64_t v107 = v133;
              KeyedDecodingContainer.decode<A>(_:forKey:)(v114, v106, v137, v126, v106, v78);
              uint64_t v133 = v107;
              if (!v107)
              {
                (*(void (**)(char *, uint64_t))(v45 + 8))(v123, v126);
                uint64_t v108 = (uint64_t)v136;
                v97(&v136[v135[24]], v114, v129);
                sub_10039E974(v108, v115);
                _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v124);
                return sub_100018C68(v108, type metadata accessor for BeaconProductInfoRecord);
              }

              (*(void (**)(char *, uint64_t))(v45 + 8))(v123, v126);
              int v56 = 1;
              int v57 = 1;
            }
          }

          _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v124);
          (*(void (**)(char *, uint64_t))(v122 + 8))(v136, v77);
          swift_bridgeObjectRelease();
          int v53 = 1;
          LODWORD(v126) = 1;
          int v54 = 1;
          BOOL v55 = v101;
          goto LABEL_9;
        }

        (*(void (**)(char *, uint64_t))(v45 + 8))(v123, v126);
        unsigned int v40 = 55217;
        LODWORD(v126) = 1;
      }
    }

    uint64_t v41 = v136;
    uint64_t v42 = v124;
    uint64_t v43 = v77;
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v42);
  int v53 = (v40 >> 10) & 1;
  if ((v40 & 1) != 0) {
    (*(void (**)(char *, uint64_t))(v122 + 8))(v41, v43);
  }
  if ((v40 & 0x10) != 0) {
    swift_bridgeObjectRelease();
  }
  int v54 = 0;
  BOOL v55 = 0;
  int v56 = 0;
  int v57 = 0;
  int v58 = 0;
  BOOL v59 = 0;
  int v60 = 0;
  int v61 = 0;
  if ((v40 & 0x20) != 0)
  {
LABEL_9:
    BOOL v59 = v55;
    swift_bridgeObjectRelease();
    int v58 = v54;
    int v60 = v56;
    int v61 = v57;
  }

  swift_bridgeObjectRelease();
  sub_100015794((uint64_t)v132, (uint64_t *)&unk_1009A34D0);
  sub_100015794((uint64_t)v131, (uint64_t *)&unk_1009A34D0);
  uint64_t v63 = v135;
  os_log_type_t v62 = v136;
  if (v53) {
    swift_bridgeObjectRelease();
  }
  sub_100015794(v130, &qword_1009A6DD0);
  uint64_t result = swift_bridgeObjectRelease();
  uint64_t v66 = v128;
  uint64_t v65 = v129;
  if ((_DWORD)v126)
  {
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v128 + 8))(&v62[v63[19]], v129);
    if (!v58) {
      goto LABEL_14;
    }
  }

  else if (!v58)
  {
LABEL_14:
    if (v59) {
      goto LABEL_15;
    }
    goto LABEL_20;
  }

  uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(&v62[v63[20]], v65);
  if (v59)
  {
LABEL_15:
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(&v62[v63[21]], v65);
    if (!v60) {
      goto LABEL_16;
    }
LABEL_21:
    uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(&v62[v63[22]], v65);
    if (!v61) {
      return result;
    }
    return (*(uint64_t (**)(char *, uint64_t))(v66 + 8))(&v62[v63[23]], v65);
  }

uint64_t sub_10039D880@<X0>( uint64_t a1@<X0>, char a2@<W1>, char a3@<W2>, char a4@<W3>, uint64_t a5@<X4>, uint64_t a6@<X5>, uint64_t a7@<X6>, uint64_t a8@<X7>, uint64_t a9@<X8>, double a10@<D0>, uint64_t a11, char a12, uint64_t a13, uint64_t a14, uint64_t a15, uint64_t a16, uint64_t a17, uint64_t a18, uint64_t a19, int a20, uint64_t a21, uint64_t a22, uint64_t a23, uint64_t a24, uint64_t a25, uint64_t a26, uint64_t a27)
{
  uint64_t v33 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 32LL))(a9, a1, v33);
  uint64_t v34 = (int *)type metadata accessor for BeaconProductInfoRecord(0LL);
  *(_BYTE *)(a9 + v34[5]) = a2;
  *(_BYTE *)(a9 + v34[6]) = a3;
  *(_BYTE *)(a9 + v34[7]) = a4;
  uint64_t v35 = (void *)(a9 + v34[8]);
  void *v35 = a5;
  v35[1] = a6;
  uint64_t v36 = (void *)(a9 + v34[9]);
  *uint64_t v36 = a7;
  v36[1] = a8;
  uint64_t v37 = a9 + v34[10];
  *(void *)uint64_t v37 = a11;
  *(_BYTE *)(v37 + 8) = a12 & 1;
  unint64_t v38 = (void *)(a9 + v34[11]);
  void *v38 = a13;
  v38[1] = a14;
  sub_100015750(a15, a9 + v34[12], (uint64_t *)&unk_1009A34D0);
  sub_100015750(a16, a9 + v34[13], (uint64_t *)&unk_1009A34D0);
  uint64_t v39 = (void *)(a9 + v34[14]);
  *uint64_t v39 = a17;
  v39[1] = a18;
  *(double *)(a9 + v34[15]) = a10;
  sub_100015750(a19, a9 + v34[16], &qword_1009A6DD0);
  *(_DWORD *)(a9 + v34[17]) = a20;
  *(void *)(a9 + v34[18]) = a21;
  uint64_t v40 = a9 + v34[19];
  uint64_t v41 = type metadata accessor for URL(0LL);
  uint64_t v47 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v41 - 8) + 32LL);
  v47(v40, a22, v41);
  v47(a9 + v34[20], a23, v41);
  v47(a9 + v34[21], a24, v41);
  v47(a9 + v34[22], a25, v41);
  v47(a9 + v34[23], a26, v41);
  return ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v47)(a9 + v34[24], a27, v41);
}

uint64_t sub_10039DB04()
{
  return sub_10039C39C(*v0);
}

uint64_t sub_10039DB0C@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1003A1EBC(a1, a2);
  *a3 = result;
  return result;
}

void sub_10039DB30(_BYTE *a1@<X8>)
{
  *a1 = 21;
}

uint64_t sub_10039DB3C(uint64_t a1)
{
  unint64_t v2 = sub_1003A10EC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_10039DB64(uint64_t a1)
{
  unint64_t v2 = sub_1003A10EC();
  return CodingKey.debugDescription.getter(a1, v2);
}

Swift::Int sub_10039DB8C()
{
  return Hasher._finalize()();
}

Swift::Int sub_10039DBCC(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_10039DC04@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_10039CB88(a1, a2);
}

uint64_t sub_10039DC18(void *a1)
{
  return sub_10039C5D4(a1);
}

uint64_t sub_10039DC30@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X8>)
{
  uint64_t v77 = a3;
  uint64_t v78 = a2;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v69 = *(void *)(v4 - 8);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v76 = (char *)&v55 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v75 = (char *)&v55 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  char v72 = (char *)&v55 - v10;
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v55 - v12;
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v55 - v15;
  uint64_t v55 = (uint64_t)&v55 - v15;
  __chkstk_darwin(v14);
  uint64_t v18 = (char *)&v55 - v17;
  uint64_t v56 = (uint64_t)&v55 - v17;
  uint64_t v19 = sub_100004AEC(&qword_1009A6DD0);
  __chkstk_darwin(v19);
  uint64_t v21 = (char *)&v55 - ((v20 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v58 = v21;
  uint64_t v22 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  uint64_t v23 = __chkstk_darwin(v22);
  uint64_t v25 = (char *)&v55 - ((v24 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v63 = v25;
  __chkstk_darwin(v23);
  uint64_t v27 = (char *)&v55 - v26;
  uint64_t v64 = (uint64_t)&v55 - v26;
  uint64_t v28 = (int *)type metadata accessor for AccessoryProductInfo(0LL);
  uint64_t v29 = v28[10];
  int v30 = *(unsigned __int8 *)(a1 + v28[6]);
  int v73 = *(unsigned __int8 *)(a1 + v28[7]);
  int v74 = v30;
  uint64_t v31 = v28[13];
  uint64_t v32 = (uint64_t *)(a1 + v28[12]);
  uint64_t v33 = *v32;
  uint64_t v60 = v32[1];
  uint64_t v34 = *(void *)(a1 + v31 + 8);
  uint64_t v70 = *(void *)(a1 + v31);
  uint64_t v71 = v33;
  uint64_t v62 = v34;
  uint64_t v35 = v28[15];
  uint64_t v36 = a1 + v28[14];
  uint64_t v67 = *(void *)v36;
  int v66 = *(unsigned __int8 *)(v36 + 8);
  uint64_t v37 = a1 + v28[17];
  uint64_t v38 = *(void *)(a1 + v35 + 8);
  uint64_t v65 = *(void *)(a1 + v35);
  uint64_t v59 = v38;
  int v68 = *(unsigned __int8 *)(a1 + v29);
  sub_10001581C(v37, (uint64_t)v27, (uint64_t *)&unk_1009A34D0);
  sub_10001581C(a1 + v28[16], (uint64_t)v25, (uint64_t *)&unk_1009A34D0);
  uint64_t v39 = v28[19];
  uint64_t v40 = (uint64_t *)(a1 + v28[18]);
  uint64_t v41 = v40[1];
  uint64_t v61 = *v40;
  double v42 = *(double *)(a1 + v39);
  sub_10001581C(a1 + v28[20], (uint64_t)v21, &qword_1009A6DD0);
  uint64_t v43 = v28[22];
  int v57 = *(_DWORD *)(a1 + v28[21]);
  uint64_t v44 = *(void *)(a1 + v43);
  uint64_t v45 = *(void (**)(char *, uint64_t, uint64_t))(v69 + 16);
  v45(v18, a1 + v28[25], v4);
  v45(v16, a1 + v28[26], v4);
  uint64_t v46 = (uint64_t)v13;
  v45(v13, a1 + v28[27], v4);
  uint64_t v47 = (uint64_t)v72;
  v45(v72, a1 + v28[28], v4);
  uint64_t v48 = (uint64_t)v75;
  v45(v75, a1 + v28[29], v4);
  uint64_t v49 = a1 + v28[30];
  uint64_t v50 = (uint64_t)v76;
  v45(v76, v49, v4);
  swift_bridgeObjectRetain(v44);
  uint64_t v51 = v60;
  swift_bridgeObjectRetain(v60);
  uint64_t v52 = v62;
  swift_bridgeObjectRetain(v62);
  uint64_t v53 = v59;
  swift_bridgeObjectRetain(v59);
  swift_bridgeObjectRetain(v41);
  sub_100018C68(a1, type metadata accessor for AccessoryProductInfo);
  return sub_10039D880( v78,  v68,  v74,  v73,  v71,  v51,  v70,  v52,  v77,  v42,  v67,  v66,  v65,  v53,  v64,  (uint64_t)v63,  v61,  v41,  (uint64_t)v58,  v57,  v44,  v56,  v55,  v46,  v47,  v48,  v50);
}

id sub_10039E040()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v85 = (uint64_t)&v82 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  unint64_t v6 = (unint64_t)&v82 - v5;
  uint64_t v7 = (int *)type metadata accessor for BeaconProductInfoRecord(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v82 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v84 = [objc_allocWithZone(SPDiscoveredAccessoryProductInformation) init];
  if (qword_10099B670 != -1) {
    goto LABEL_49;
  }
  while (1)
  {
    uint64_t v10 = (void *)qword_100A2AF38;
    id v11 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
    unsigned int v12 = [v11 isInternalBuild];

    if (v12)
    {
      NSString v13 = String._bridgeToObjectiveC()();
      unsigned __int8 v14 = [v10 BOOLForKey:v13];

      int v15 = *(unsigned __int8 *)(v1 + v7[5]);
      if (v15 == 2)
      {
        uint64_t v16 = 0LL;
        goto LABEL_9;
      }
    }

    else
    {
      int v15 = *(unsigned __int8 *)(v1 + v7[5]);
      if (v15 == 2)
      {
        [v84 setIsManagedAccessory:0];
        sub_10039E974(v1, (uint64_t)v9);
        goto LABEL_11;
      }

      unsigned __int8 v14 = 0;
    }

    uint64_t v16 = v15 & 1;
LABEL_9:
    [v84 setIsManagedAccessory:v16];
    sub_10039E974(v1, (uint64_t)v9);
    if ((v14 & 1) != 0)
    {
      uint64_t v17 = 0LL;
      goto LABEL_12;
    }

uint64_t type metadata accessor for BeaconProductInfoRecord(uint64_t a1)
{
  uint64_t result = qword_1009AAFA0;
  if (!qword_1009AAFA0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconProductInfoRecord);
  }
  return result;
}

uint64_t sub_10039E974(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for BeaconProductInfoRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_10039E9B8()
{
  unint64_t result = qword_1009A6DD8;
  if (!qword_1009A6DD8)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___SPAccessoryLayoutTemplate);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1009A6DD8);
  }

  return result;
}

void *sub_10039E9F4(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v31 = *a2;
    *a1 = *a2;
    a1 = (void *)(v31 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[6];
    *((_BYTE *)a1 + a3[5]) = *((_BYTE *)a2 + a3[5]);
    *((_BYTE *)a1 + v8) = *((_BYTE *)a2 + v8);
    uint64_t v9 = a3[8];
    *((_BYTE *)a1 + a3[7]) = *((_BYTE *)a2 + a3[7]);
    uint64_t v10 = (void *)((char *)a1 + v9);
    id v11 = (void *)((char *)a2 + v9);
    uint64_t v12 = v11[1];
    *uint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = a3[9];
    uint64_t v14 = a3[10];
    int v15 = (void *)((char *)a1 + v13);
    uint64_t v16 = (void *)((char *)a2 + v13);
    uint64_t v17 = v16[1];
    *int v15 = *v16;
    v15[1] = v17;
    id v18 = (char *)a1 + v14;
    NSString v19 = (char *)a2 + v14;
    *(void *)id v18 = *(void *)v19;
    v18[8] = v19[8];
    uint64_t v20 = a3[11];
    uint64_t v21 = a3[12];
    uint64_t v22 = (void *)((char *)a1 + v20);
    uint64_t v23 = (void *)((char *)a2 + v20);
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
    __dst = (char *)a1 + v21;
    uint64_t v25 = (char *)a2 + v21;
    uint64_t v26 = type metadata accessor for URL(0LL);
    uint64_t v27 = *(void *)(v26 - 8);
    NSString v28 = *(unsigned int (**)(char *, uint64_t, void *, __n128))(v27 + 48);
    swift_bridgeObjectRetain(v12);
    swift_bridgeObjectRetain(v17);
    __n128 v29 = swift_bridgeObjectRetain(v24);
    uint64_t v99 = v28;
    if (v28(v25, 1LL, (void *)v26, v29))
    {
      uint64_t v30 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(__dst, v25, *(void *)(*(void *)(v30 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(__dst, v25, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(__dst, 0LL, 1LL, v26);
    }

    uint64_t v32 = a3[13];
    uint64_t v33 = (char *)a1 + v32;
    uint64_t v34 = (char *)a2 + v32;
    __dsta = (void *)v26;
    if (((unsigned int (*)(char *, uint64_t, uint64_t))v28)((char *)a2 + v32, 1LL, v26))
    {
      uint64_t v35 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v33, v34, *(void *)(*(void *)(v35 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v27 + 16))(v33, v34, v26);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v27 + 56))(v33, 0LL, 1LL, v26);
    }

    uint64_t v36 = a3[14];
    uint64_t v37 = a3[15];
    uint64_t v38 = (void *)((char *)a1 + v36);
    uint64_t v39 = (void *)((char *)a2 + v36);
    uint64_t v40 = *v39;
    uint64_t v41 = v39[1];
    uint64_t v42 = *(void *)((char *)a2 + v37);
    void *v38 = v40;
    v38[1] = v41;
    *(void *)((char *)a1 + v37) = v42;
    uint64_t v43 = a3[16];
    uint64_t v44 = (void *)((char *)a1 + v43);
    NSString v45 = (void *)((char *)a2 + v43);
    uint64_t v46 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
    uint64_t v47 = *((void *)v46 - 1);
    uint64_t v48 = *(unsigned int (**)(void *, uint64_t, int *, __n128))(v47 + 48);
    __n128 v49 = swift_bridgeObjectRetain(v41);
    if (v48(v45, 1LL, v46, v49))
    {
      uint64_t v50 = sub_100004AEC(&qword_1009A6DD0);
      memcpy(v44, v45, *(void *)(*(void *)(v50 - 8) + 64LL));
    }

    else
    {
      uint64_t v96 = v47;
      uint64_t v51 = v45[1];
      *uint64_t v44 = *v45;
      v44[1] = v51;
      uint64_t v52 = v45[3];
      v44[2] = v45[2];
      uint64_t v44[3] = v52;
      uint64_t v53 = v45[5];
      v44[4] = v45[4];
      v44[5] = v53;
      *((_WORD *)v44 + 24) = *((_WORD *)v45 + 24);
      *((_BYTE *)v44 + 72) = *((_BYTE *)v45 + 72);
      uint64_t v54 = v45[8];
      v44[7] = v45[7];
      v44[8] = v54;
      uint64_t v55 = v46[10];
      uint64_t v95 = (char *)v44 + v55;
      uint64_t v56 = (char *)v45 + v55;
      swift_bridgeObjectRetain(v51);
      swift_bridgeObjectRetain(v52);
      __n128 v57 = swift_bridgeObjectRetain(v53);
      if (v99(v56, 1LL, __dsta, v57))
      {
        uint64_t v58 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v95, v56, *(void *)(*(void *)(v58 - 8) + 64LL));
        uint64_t v59 = v27;
      }

      else
      {
        uint64_t v59 = v27;
        (*(void (**)(char *, char *, void *))(v27 + 16))(v95, v56, __dsta);
        (*(void (**)(char *, void, uint64_t, void *))(v27 + 56))(v95, 0LL, 1LL, __dsta);
      }

      uint64_t v60 = v46[11];
      uint64_t v61 = (char *)v44 + v60;
      uint64_t v62 = (char *)v45 + v60;
      if (((unsigned int (*)(char *, uint64_t, void *))v99)((char *)v45 + v60, 1LL, __dsta))
      {
        uint64_t v63 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v61, v62, *(void *)(*(void *)(v63 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, void *))(v59 + 16))(v61, v62, __dsta);
        (*(void (**)(char *, void, uint64_t, void *))(v59 + 56))(v61, 0LL, 1LL, __dsta);
      }

      uint64_t v64 = v46[12];
      NSString v65 = (char *)v44 + v64;
      NSString v66 = (char *)v45 + v64;
      *(void *)NSString v65 = *(void *)v66;
      v65[8] = v66[8];
      uint64_t v67 = v46[13];
      id v68 = (void *)((char *)v44 + v67);
      uint64_t v69 = (void *)((char *)v45 + v67);
      uint64_t v70 = v69[1];
      *id v68 = *v69;
      v68[1] = v70;
      uint64_t v71 = v46[14];
      uint64_t v72 = *(void *)((char *)v45 + v71);
      *(void *)((char *)v44 + v71) = v72;
      uint64_t v73 = v46[15];
      int v74 = (void *)((char *)v44 + v73);
      uint64_t v75 = (void *)((char *)v45 + v73);
      uint64_t v76 = v75[1];
      *int v74 = *v75;
      v74[1] = v76;
      uint64_t v77 = v46[16];
      uint64_t v78 = *(void *)((char *)v45 + v77);
      *(void *)((char *)v44 + v77) = v78;
      uint64_t v79 = v46[17];
      uint64_t v80 = (char *)v44 + v79;
      uint64_t v81 = (char *)v45 + v79;
      *(_OWORD *)uint64_t v80 = *(_OWORD *)v81;
      v80[16] = v81[16];
      uint64_t v82 = v46[18];
      unint64_t v83 = (char *)v44 + v82;
      id v84 = (char *)v45 + v82;
      *(_OWORD *)unint64_t v83 = *(_OWORD *)v84;
      v83[16] = v84[16];
      uint64_t v85 = *(void (**)(void *, void, uint64_t, int *, __n128))(v96 + 56);
      swift_bridgeObjectRetain(v70);
      swift_bridgeObjectRetain(v72);
      swift_bridgeObjectRetain(v76);
      __n128 v86 = swift_bridgeObjectRetain(v78);
      v85(v44, 0LL, 1LL, v46, v86);
    }

    uint64_t v87 = a3[18];
    *(_DWORD *)((char *)a1 + a3[17]) = *(_DWORD *)((char *)a2 + a3[17]);
    uint64_t v88 = *(void *)((char *)a2 + v87);
    *(void *)((char *)a1 + v87) = v88;
    uint64_t v89 = a3[19];
    uint64_t v90 = (char *)a1 + v89;
    uint64_t v91 = (char *)a2 + v89;
    uint64_t v92 = *(void (**)(char *, char *, void *, __n128))(v27 + 16);
    __n128 v93 = swift_bridgeObjectRetain(v88);
    v92(v90, v91, __dsta, v93);
    ((void (*)(char *, char *, void *))v92)((char *)a1 + a3[20], (char *)a2 + a3[20], __dsta);
    ((void (*)(char *, char *, void *))v92)((char *)a1 + a3[21], (char *)a2 + a3[21], __dsta);
    ((void (*)(char *, char *, void *))v92)((char *)a1 + a3[22], (char *)a2 + a3[22], __dsta);
    ((void (*)(char *, char *, void *))v92)((char *)a1 + a3[23], (char *)a2 + a3[23], __dsta);
    ((void (*)(char *, char *, void *))v92)((char *)a1 + a3[24], (char *)a2 + a3[24], __dsta);
  }

  return a1;
}

uint64_t sub_10039EF4C(uint64_t a1, int *a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  uint64_t v5 = a1 + a2[12];
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
  if (!v8(v5, 1LL, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v5, v6);
  }
  uint64_t v9 = a1 + a2[13];
  if (!v8(v9, 1LL, v6)) {
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v9, v6);
  }
  swift_bridgeObjectRelease();
  uint64_t v10 = a1 + a2[16];
  uint64_t v11 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v10, 1LL, v11))
  {
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v12 = v10 + *(int *)(v11 + 40);
    if (!v8(v12, 1LL, v6)) {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v12, v6);
    }
    uint64_t v13 = v10 + *(int *)(v11 + 44);
    if (!v8(v13, 1LL, v6)) {
      (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v13, v6);
    }
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  swift_bridgeObjectRelease();
  int v15 = *(void (**)(uint64_t, uint64_t))(v7 + 8);
  v15(a1 + a2[19], v6);
  v15(a1 + a2[20], v6);
  v15(a1 + a2[21], v6);
  v15(a1 + a2[22], v6);
  v15(a1 + a2[23], v6);
  return ((uint64_t (*)(uint64_t, uint64_t))v15)(a1 + a2[24], v6);
}

uint64_t sub_10039F1B4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (void *)(a2 + v8);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = a3[9];
  uint64_t v13 = a3[10];
  uint64_t v14 = (void *)(a1 + v12);
  int v15 = (void *)(a2 + v12);
  uint64_t v16 = v15[1];
  *uint64_t v14 = *v15;
  v14[1] = v16;
  uint64_t v17 = a1 + v13;
  uint64_t v18 = a2 + v13;
  *(void *)uint64_t v17 = *(void *)v18;
  *(_BYTE *)(v17 + 8) = *(_BYTE *)(v18 + 8);
  uint64_t v19 = a3[11];
  uint64_t v20 = a3[12];
  uint64_t v21 = (void *)(a1 + v19);
  uint64_t v22 = (void *)(a2 + v19);
  uint64_t v23 = v22[1];
  *uint64_t v21 = *v22;
  v21[1] = v23;
  __dst = (void *)(a1 + v20);
  uint64_t v24 = (void *)(a2 + v20);
  uint64_t v25 = type metadata accessor for URL(0LL);
  uint64_t v26 = *(void *)(v25 - 8);
  uint64_t v27 = *(unsigned int (**)(char *, uint64_t, void *, __n128))(v26 + 48);
  swift_bridgeObjectRetain(v11);
  swift_bridgeObjectRetain(v16);
  __n128 v28 = swift_bridgeObjectRetain(v23);
  uint64_t v97 = v27;
  if (v27((char *)v24, 1LL, (void *)v25, v28))
  {
    uint64_t v29 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(__dst, v24, *(void *)(*(void *)(v29 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, void *, uint64_t))(v26 + 16))(__dst, v24, v25);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(__dst, 0LL, 1LL, v25);
  }

  uint64_t v30 = a3[13];
  uint64_t v31 = (void *)(a1 + v30);
  uint64_t v32 = (const void *)(a2 + v30);
  __dsta = (void *)v25;
  if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v27)(a2 + v30, 1LL, v25))
  {
    uint64_t v33 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v31, v32, *(void *)(*(void *)(v33 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v26 + 16))(v31, v32, v25);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v26 + 56))(v31, 0LL, 1LL, v25);
  }

  uint64_t v34 = a3[14];
  uint64_t v35 = a3[15];
  uint64_t v36 = (void *)(a1 + v34);
  uint64_t v37 = (uint64_t *)(a2 + v34);
  uint64_t v38 = *v37;
  uint64_t v39 = v37[1];
  uint64_t v40 = *(void *)(a2 + v35);
  *uint64_t v36 = v38;
  v36[1] = v39;
  *(void *)(a1 + v35) = v40;
  uint64_t v41 = a3[16];
  uint64_t v42 = (void *)(a1 + v41);
  uint64_t v43 = (void *)(a2 + v41);
  uint64_t v44 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  uint64_t v45 = *((void *)v44 - 1);
  uint64_t v46 = *(unsigned int (**)(void *, uint64_t, int *, __n128))(v45 + 48);
  __n128 v47 = swift_bridgeObjectRetain(v39);
  if (v46(v43, 1LL, v44, v47))
  {
    uint64_t v48 = sub_100004AEC(&qword_1009A6DD0);
    memcpy(v42, v43, *(void *)(*(void *)(v48 - 8) + 64LL));
  }

  else
  {
    uint64_t v94 = v45;
    uint64_t v49 = v43[1];
    *uint64_t v42 = *v43;
    v42[1] = v49;
    uint64_t v50 = v43[3];
    v42[2] = v43[2];
    v42[3] = v50;
    uint64_t v51 = v43[5];
    v42[4] = v43[4];
    v42[5] = v51;
    *((_WORD *)v42 + 24) = *((_WORD *)v43 + 24);
    *((_BYTE *)v42 + 72) = *((_BYTE *)v43 + 72);
    uint64_t v52 = v43[8];
    v42[7] = v43[7];
    v42[8] = v52;
    uint64_t v53 = v44[10];
    __n128 v93 = (char *)v42 + v53;
    uint64_t v54 = (char *)v43 + v53;
    swift_bridgeObjectRetain(v49);
    swift_bridgeObjectRetain(v50);
    __n128 v55 = swift_bridgeObjectRetain(v51);
    if (v97(v54, 1LL, __dsta, v55))
    {
      uint64_t v56 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v93, v54, *(void *)(*(void *)(v56 - 8) + 64LL));
      uint64_t v57 = v26;
    }

    else
    {
      uint64_t v57 = v26;
      (*(void (**)(char *, char *, void *))(v26 + 16))(v93, v54, __dsta);
      (*(void (**)(char *, void, uint64_t, void *))(v26 + 56))(v93, 0LL, 1LL, __dsta);
    }

    uint64_t v58 = v44[11];
    uint64_t v59 = (char *)v42 + v58;
    uint64_t v60 = (char *)v43 + v58;
    if (((unsigned int (*)(char *, uint64_t, void *))v97)((char *)v43 + v58, 1LL, __dsta))
    {
      uint64_t v61 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v59, v60, *(void *)(*(void *)(v61 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, void *))(v57 + 16))(v59, v60, __dsta);
      (*(void (**)(char *, void, uint64_t, void *))(v57 + 56))(v59, 0LL, 1LL, __dsta);
    }

    uint64_t v62 = v44[12];
    uint64_t v63 = (char *)v42 + v62;
    uint64_t v64 = (char *)v43 + v62;
    *(void *)uint64_t v63 = *(void *)v64;
    v63[8] = v64[8];
    uint64_t v65 = v44[13];
    NSString v66 = (void *)((char *)v42 + v65);
    uint64_t v67 = (void *)((char *)v43 + v65);
    uint64_t v68 = v67[1];
    *NSString v66 = *v67;
    v66[1] = v68;
    uint64_t v69 = v44[14];
    uint64_t v70 = *(void *)((char *)v43 + v69);
    *(void *)((char *)v42 + v69) = v70;
    uint64_t v71 = v44[15];
    uint64_t v72 = (void *)((char *)v42 + v71);
    uint64_t v73 = (void *)((char *)v43 + v71);
    uint64_t v74 = v73[1];
    void *v72 = *v73;
    v72[1] = v74;
    uint64_t v75 = v44[16];
    uint64_t v76 = *(void *)((char *)v43 + v75);
    *(void *)((char *)v42 + v75) = v76;
    uint64_t v77 = v44[17];
    uint64_t v78 = (char *)v42 + v77;
    uint64_t v79 = (char *)v43 + v77;
    *(_OWORD *)uint64_t v78 = *(_OWORD *)v79;
    v78[16] = v79[16];
    uint64_t v80 = v44[18];
    uint64_t v81 = (char *)v42 + v80;
    uint64_t v82 = (char *)v43 + v80;
    *(_OWORD *)uint64_t v81 = *(_OWORD *)v82;
    v81[16] = v82[16];
    unint64_t v83 = *(void (**)(void *, void, uint64_t, int *, __n128))(v94 + 56);
    swift_bridgeObjectRetain(v68);
    swift_bridgeObjectRetain(v70);
    swift_bridgeObjectRetain(v74);
    __n128 v84 = swift_bridgeObjectRetain(v76);
    v83(v42, 0LL, 1LL, v44, v84);
  }

  uint64_t v85 = a3[18];
  *(_DWORD *)(a1 + a3[17]) = *(_DWORD *)(a2 + a3[17]);
  uint64_t v86 = *(void *)(a2 + v85);
  *(void *)(a1 + v85) = v86;
  uint64_t v87 = a3[19];
  uint64_t v88 = a1 + v87;
  uint64_t v89 = a2 + v87;
  uint64_t v90 = *(void (**)(uint64_t, uint64_t, void *, __n128))(v26 + 16);
  __n128 v91 = swift_bridgeObjectRetain(v86);
  v90(v88, v89, __dsta, v91);
  ((void (*)(uint64_t, uint64_t, void *))v90)(a1 + a3[20], a2 + a3[20], __dsta);
  ((void (*)(uint64_t, uint64_t, void *))v90)(a1 + a3[21], a2 + a3[21], __dsta);
  ((void (*)(uint64_t, uint64_t, void *))v90)(a1 + a3[22], a2 + a3[22], __dsta);
  ((void (*)(uint64_t, uint64_t, void *))v90)(a1 + a3[23], a2 + a3[23], __dsta);
  ((void (*)(uint64_t, uint64_t, void *))v90)(a1 + a3[24], a2 + a3[24], __dsta);
  return a1;
}

uint64_t sub_10039F6E0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + a3[6]) = *(_BYTE *)(a2 + a3[6]);
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  uint64_t v7 = a3[8];
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  uint64_t v10 = v9[1];
  v8[1] = v10;
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  uint64_t v11 = a3[9];
  uint64_t v12 = (void *)(a1 + v11);
  uint64_t v13 = (void *)(a2 + v11);
  *uint64_t v12 = *v13;
  uint64_t v14 = v13[1];
  v12[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease();
  uint64_t v15 = a3[10];
  uint64_t v16 = a1 + v15;
  uint64_t v17 = (uint64_t *)(a2 + v15);
  uint64_t v18 = *v17;
  *(_BYTE *)(v16 + 8) = *((_BYTE *)v17 + 8);
  *(void *)uint64_t v16 = v18;
  uint64_t v19 = a3[11];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (void *)(a2 + v19);
  *uint64_t v20 = *v21;
  uint64_t v22 = v21[1];
  v20[1] = v22;
  swift_bridgeObjectRetain(v22);
  swift_bridgeObjectRelease();
  uint64_t v23 = a3[12];
  uint64_t v24 = (void *)(a1 + v23);
  uint64_t v25 = (void *)(a2 + v23);
  uint64_t v26 = type metadata accessor for URL(0LL);
  uint64_t v27 = *(void *)(v26 - 8);
  __n128 v28 = *(uint64_t (**)(void *, uint64_t, uint64_t))(v27 + 48);
  int v29 = v28(v24, 1LL, v26);
  int v30 = v28(v25, 1LL, v26);
  if (v29)
  {
    if (!v30)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 16))(v24, v25, v26);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v24, 0LL, 1LL, v26);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v30)
  {
    (*(void (**)(void *, uint64_t))(v27 + 8))(v24, v26);
LABEL_6:
    uint64_t v31 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v24, v25, *(void *)(*(void *)(v31 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, void *, uint64_t))(v27 + 24))(v24, v25, v26);
LABEL_7:
  uint64_t v32 = a3[13];
  uint64_t v33 = (void *)(a1 + v32);
  uint64_t v34 = (void *)(a2 + v32);
  int v35 = v28((void *)(a1 + v32), 1LL, v26);
  int v36 = v28(v34, 1LL, v26);
  uint64_t v139 = (unsigned int (*)(const void *, uint64_t, uint64_t, __n128))v28;
  if (v35)
  {
    if (!v36)
    {
      (*(void (**)(void *, void *, uint64_t))(v27 + 16))(v33, v34, v26);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v27 + 56))(v33, 0LL, 1LL, v26);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v36)
  {
    (*(void (**)(void *, uint64_t))(v27 + 8))(v33, v26);
LABEL_12:
    uint64_t v37 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v33, v34, *(void *)(*(void *)(v37 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(void *, void *, uint64_t))(v27 + 24))(v33, v34, v26);
LABEL_13:
  uint64_t v38 = a3[14];
  uint64_t v39 = (void *)(a1 + v38);
  uint64_t v40 = (void *)(a2 + v38);
  *uint64_t v39 = *v40;
  uint64_t v41 = v40[1];
  v39[1] = v41;
  swift_bridgeObjectRetain(v41);
  swift_bridgeObjectRelease();
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  uint64_t v42 = a3[16];
  uint64_t v43 = a1 + v42;
  uint64_t v44 = a2 + v42;
  uint64_t v45 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  __src = (void *)*((void *)v45 - 1);
  uint64_t v46 = (uint64_t (*)(uint64_t, uint64_t, int *))__src[6];
  int v47 = v46(v43, 1LL, v45);
  int v48 = v46(v44, 1LL, v45);
  if (v47)
  {
    if (!v48)
    {
      uint64_t v136 = v27;
      *(void *)uint64_t v43 = *(void *)v44;
      uint64_t v49 = *(void *)(v44 + 8);
      *(void *)(v43 + 8) = v49;
      *(void *)(v43 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(v44 + 16);
      uint64_t v50 = *(void *)(v44 + 24);
      *(void *)(v43 + 24) = v50;
      *(void *)(v43 + 32) = *(void *)(v44 + 32);
      uint64_t v51 = *(void *)(v44 + 40);
      *(void *)(v43 + 40) = v51;
      *(_WORD *)(v43 + 48) = *(_WORD *)(v44 + 48);
      *(void *)(v43 + 56) = *(void *)(v44 + 56);
      uint64_t v52 = *(void *)(v44 + 64);
      *(_BYTE *)(v43 + 72) = *(_BYTE *)(v44 + 72);
      *(void *)(v43 + 64) = v52;
      uint64_t v53 = v45[10];
      __dst = (void *)(v43 + v53);
      uint64_t v54 = (const void *)(v44 + v53);
      swift_bridgeObjectRetain(v49);
      swift_bridgeObjectRetain(v50);
      __n128 v55 = swift_bridgeObjectRetain(v51);
      if (v139(v54, 1LL, v26, v55))
      {
        uint64_t v56 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(__dst, v54, *(void *)(*(void *)(v56 - 8) + 64LL));
        uint64_t v57 = v136;
      }

      else
      {
        uint64_t v57 = v136;
        (*(void (**)(void *, const void *, uint64_t))(v136 + 16))(__dst, v54, v26);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v136 + 56))(__dst, 0LL, 1LL, v26);
      }

      uint64_t v69 = v45[11];
      uint64_t v70 = (void *)(v43 + v69);
      uint64_t v71 = (const void *)(v44 + v69);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v139)(v44 + v69, 1LL, v26))
      {
        uint64_t v72 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v70, v71, *(void *)(*(void *)(v72 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v57 + 16))(v70, v71, v26);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v57 + 56))(v70, 0LL, 1LL, v26);
      }

      uint64_t v73 = v45[12];
      uint64_t v74 = v43 + v73;
      uint64_t v75 = (uint64_t *)(v44 + v73);
      uint64_t v76 = *v75;
      *(_BYTE *)(v74 + 8) = *((_BYTE *)v75 + 8);
      *(void *)uint64_t v74 = v76;
      uint64_t v77 = v45[13];
      uint64_t v78 = (void *)(v43 + v77);
      uint64_t v79 = (void *)(v44 + v77);
      *uint64_t v78 = *v79;
      uint64_t v80 = v79[1];
      v78[1] = v80;
      uint64_t v81 = v45[14];
      uint64_t v82 = *(void *)(v44 + v81);
      *(void *)(v43 + v81) = v82;
      uint64_t v83 = v45[15];
      __n128 v84 = (void *)(v43 + v83);
      uint64_t v85 = (void *)(v44 + v83);
      *__n128 v84 = *v85;
      uint64_t v86 = v85[1];
      v84[1] = v86;
      uint64_t v87 = v45[16];
      uint64_t v88 = *(void *)(v44 + v87);
      *(void *)(v43 + v87) = v88;
      uint64_t v89 = v45[17];
      uint64_t v90 = v43 + v89;
      __n128 v91 = (__int128 *)(v44 + v89);
      __int128 v92 = *v91;
      *(_BYTE *)(v90 + swift_unknownObjectWeakDestroy(v0 + 16) = *((_BYTE *)v91 + 16);
      *(_OWORD *)uint64_t v90 = v92;
      uint64_t v93 = v45[18];
      uint64_t v94 = v43 + v93;
      uint64_t v95 = (__int128 *)(v44 + v93);
      __int128 v96 = *v95;
      *(_BYTE *)(v94 + swift_unknownObjectWeakDestroy(v0 + 16) = *((_BYTE *)v95 + 16);
      *(_OWORD *)uint64_t v94 = v96;
      uint64_t v97 = (void (*)(uint64_t, void, uint64_t, int *, __n128))__src[7];
      swift_bridgeObjectRetain(v80);
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRetain(v86);
      __n128 v98 = swift_bridgeObjectRetain(v88);
      v97(v43, 0LL, 1LL, v45, v98);
      uint64_t v27 = v136;
      goto LABEL_43;
    }

uint64_t sub_1003A006C(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v9 = a3[10];
  *(_OWORD *)(a1 + a3[9]) = *(_OWORD *)(a2 + a3[9]);
  uint64_t v10 = a1 + v9;
  uint64_t v11 = a2 + v9;
  *(void *)uint64_t v10 = *(void *)v11;
  *(_BYTE *)(v10 + 8) = *(_BYTE *)(v11 + 8);
  uint64_t v12 = a3[12];
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (const void *)(a2 + v12);
  *(_OWORD *)(a1 + a3[11]) = *(_OWORD *)(a2 + a3[11]);
  uint64_t v15 = type metadata accessor for URL(0LL);
  uint64_t v16 = *(void *)(v15 - 8);
  uint64_t v17 = *(unsigned int (**)(const void *, uint64_t, uint64_t))(v16 + 48);
  if (v17(v14, 1LL, v15))
  {
    uint64_t v18 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v13, v14, *(void *)(*(void *)(v18 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v13, v14, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v13, 0LL, 1LL, v15);
  }

  uint64_t v19 = a3[13];
  uint64_t v20 = (void *)(a1 + v19);
  uint64_t v21 = (const void *)(a2 + v19);
  if (v17((const void *)(a2 + v19), 1LL, v15))
  {
    uint64_t v22 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v20, v21, *(void *)(*(void *)(v22 - 8) + 64LL));
  }

  else
  {
    (*(void (**)(void *, const void *, uint64_t))(v16 + 32))(v20, v21, v15);
    (*(void (**)(void *, void, uint64_t, uint64_t))(v16 + 56))(v20, 0LL, 1LL, v15);
  }

  uint64_t v23 = a3[15];
  *(_OWORD *)(a1 + a3[14]) = *(_OWORD *)(a2 + a3[14]);
  *(void *)(a1 + v23) = *(void *)(a2 + v23);
  uint64_t v24 = a3[16];
  uint64_t v25 = (_OWORD *)(a1 + v24);
  uint64_t v26 = (_OWORD *)(a2 + v24);
  uint64_t v27 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  uint64_t v28 = *((void *)v27 - 1);
  if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v28 + 48))(v26, 1LL, v27))
  {
    uint64_t v29 = sub_100004AEC(&qword_1009A6DD0);
    memcpy(v25, v26, *(void *)(*(void *)(v29 - 8) + 64LL));
  }

  else
  {
    __int128 v30 = v26[1];
    *uint64_t v25 = *v26;
    v25[1] = v30;
    v25[2] = v26[2];
    *((_WORD *)v25 + 24) = *((_WORD *)v26 + 24);
    uint64_t v31 = *((void *)v26 + 8);
    *((void *)v25 + 7) = *((void *)v26 + 7);
    *((void *)v25 + 8) = v31;
    *((_BYTE *)v25 + 72) = *((_BYTE *)v26 + 72);
    uint64_t v32 = v27[10];
    uint64_t v50 = v28;
    __dst = (char *)v25 + v32;
    uint64_t v33 = (char *)v26 + v32;
    if (v17((char *)v26 + v32, 1LL, v15))
    {
      uint64_t v34 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(__dst, v33, *(void *)(*(void *)(v34 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(__dst, v33, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(__dst, 0LL, 1LL, v15);
    }

    uint64_t v35 = v27[11];
    __dsta = (char *)v25 + v35;
    int v36 = (char *)v26 + v35;
    if (v17((char *)v26 + v35, 1LL, v15))
    {
      uint64_t v37 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(__dsta, v36, *(void *)(*(void *)(v37 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(char *, char *, uint64_t))(v16 + 32))(__dsta, v36, v15);
      (*(void (**)(char *, void, uint64_t, uint64_t))(v16 + 56))(__dsta, 0LL, 1LL, v15);
    }

    uint64_t v38 = v27[12];
    uint64_t v39 = (char *)v25 + v38;
    uint64_t v40 = (char *)v26 + v38;
    *(void *)uint64_t v39 = *(void *)v40;
    v39[8] = v40[8];
    *(_OWORD *)((char *)v25 + v27[13]) = *(_OWORD *)((char *)v26 + v27[13]);
    *(void *)((char *)v25 + v27[14]) = *(void *)((char *)v26 + v27[14]);
    *(_OWORD *)((char *)v25 + v27[15]) = *(_OWORD *)((char *)v26 + v27[15]);
    *(void *)((char *)v25 + v27[16]) = *(void *)((char *)v26 + v27[16]);
    uint64_t v41 = v27[17];
    uint64_t v42 = (char *)v25 + v41;
    uint64_t v43 = (char *)v26 + v41;
    v42[16] = v43[16];
    *(_OWORD *)uint64_t v42 = *(_OWORD *)v43;
    uint64_t v44 = v27[18];
    uint64_t v45 = (char *)v25 + v44;
    uint64_t v46 = (char *)v26 + v44;
    v45[16] = v46[16];
    *(_OWORD *)uint64_t v45 = *(_OWORD *)v46;
    (*(void (**)(_OWORD *, void, uint64_t, int *))(v50 + 56))(v25, 0LL, 1LL, v27);
  }

  uint64_t v47 = a3[18];
  *(_DWORD *)(a1 + a3[17]) = *(_DWORD *)(a2 + a3[17]);
  *(void *)(a1 + v47) = *(void *)(a2 + v47);
  int v48 = *(void (**)(uint64_t, uint64_t, uint64_t))(v16 + 32);
  v48(a1 + a3[19], a2 + a3[19], v15);
  v48(a1 + a3[20], a2 + a3[20], v15);
  v48(a1 + a3[21], a2 + a3[21], v15);
  v48(a1 + a3[22], a2 + a3[22], v15);
  v48(a1 + a3[23], a2 + a3[23], v15);
  v48(a1 + a3[24], a2 + a3[24], v15);
  return a1;
}

uint64_t sub_1003A04D4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[6];
  *(_BYTE *)(a1 + a3[5]) = *(_BYTE *)(a2 + a3[5]);
  *(_BYTE *)(a1 + v7) = *(_BYTE *)(a2 + v7);
  uint64_t v8 = a3[8];
  *(_BYTE *)(a1 + a3[7]) = *(_BYTE *)(a2 + a3[7]);
  uint64_t v9 = (void *)(a1 + v8);
  uint64_t v10 = (uint64_t *)(a2 + v8);
  uint64_t v12 = *v10;
  uint64_t v11 = v10[1];
  *uint64_t v9 = v12;
  v9[1] = v11;
  swift_bridgeObjectRelease();
  uint64_t v13 = a3[9];
  uint64_t v14 = (void *)(a1 + v13);
  uint64_t v15 = (uint64_t *)(a2 + v13);
  uint64_t v17 = *v15;
  uint64_t v16 = v15[1];
  *uint64_t v14 = v17;
  v14[1] = v16;
  swift_bridgeObjectRelease();
  uint64_t v18 = a3[10];
  uint64_t v19 = a3[11];
  uint64_t v20 = a1 + v18;
  uint64_t v21 = a2 + v18;
  *(void *)uint64_t v20 = *(void *)v21;
  *(_BYTE *)(v20 + 8) = *(_BYTE *)(v21 + 8);
  uint64_t v22 = (void *)(a1 + v19);
  uint64_t v23 = (uint64_t *)(a2 + v19);
  uint64_t v25 = *v23;
  uint64_t v24 = v23[1];
  *uint64_t v22 = v25;
  v22[1] = v24;
  swift_bridgeObjectRelease();
  uint64_t v26 = a3[12];
  uint64_t v27 = (void *)(a1 + v26);
  uint64_t v28 = (const void *)(a2 + v26);
  uint64_t v29 = type metadata accessor for URL(0LL);
  uint64_t v30 = *(void *)(v29 - 8);
  uint64_t v31 = *(uint64_t (**)(void))(v30 + 48);
  int v32 = ((uint64_t (*)(void *, uint64_t, uint64_t))v31)(v27, 1LL, v29);
  int v33 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v31)(v28, 1LL, v29);
  if (v32)
  {
    if (!v33)
    {
      (*(void (**)(void *, const void *, uint64_t))(v30 + 32))(v27, v28, v29);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v27, 0LL, 1LL, v29);
      goto LABEL_7;
    }

    goto LABEL_6;
  }

  if (v33)
  {
    (*(void (**)(void *, uint64_t))(v30 + 8))(v27, v29);
LABEL_6:
    uint64_t v34 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v27, v28, *(void *)(*(void *)(v34 - 8) + 64LL));
    goto LABEL_7;
  }

  (*(void (**)(void *, const void *, uint64_t))(v30 + 40))(v27, v28, v29);
LABEL_7:
  uint64_t v35 = a3[13];
  int v36 = (void *)(a1 + v35);
  uint64_t v37 = (const void *)(a2 + v35);
  int v38 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v31)(a1 + v35, 1LL, v29);
  int v39 = ((uint64_t (*)(const void *, uint64_t, uint64_t))v31)(v37, 1LL, v29);
  uint64_t v116 = v30;
  if (v38)
  {
    if (!v39)
    {
      (*(void (**)(void *, const void *, uint64_t))(v30 + 32))(v36, v37, v29);
      (*(void (**)(void *, void, uint64_t, uint64_t))(v30 + 56))(v36, 0LL, 1LL, v29);
      goto LABEL_13;
    }

    goto LABEL_12;
  }

  if (v39)
  {
    (*(void (**)(void *, uint64_t))(v30 + 8))(v36, v29);
LABEL_12:
    uint64_t v40 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    memcpy(v36, v37, *(void *)(*(void *)(v40 - 8) + 64LL));
    goto LABEL_13;
  }

  (*(void (**)(void *, const void *, uint64_t))(v30 + 40))(v36, v37, v29);
LABEL_13:
  uint64_t v41 = a3[14];
  uint64_t v42 = (void *)(a1 + v41);
  uint64_t v43 = (uint64_t *)(a2 + v41);
  uint64_t v45 = *v43;
  uint64_t v44 = v43[1];
  *uint64_t v42 = v45;
  v42[1] = v44;
  swift_bridgeObjectRelease();
  uint64_t v46 = a3[16];
  *(void *)(a1 + a3[15]) = *(void *)(a2 + a3[15]);
  uint64_t v47 = a1 + v46;
  uint64_t v48 = a2 + v46;
  uint64_t v49 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  __src = (void *)*((void *)v49 - 1);
  uint64_t v50 = (uint64_t (*)(uint64_t, uint64_t, int *))__src[6];
  int v51 = v50(v47, 1LL, v49);
  int v52 = v50(v48, 1LL, v49);
  if (v51)
  {
    if (!v52)
    {
      __int128 v53 = *(_OWORD *)(v48 + 16);
      *(_OWORD *)uint64_t v47 = *(_OWORD *)v48;
      *(_OWORD *)(v47 + swift_unknownObjectWeakDestroy(v0 + 16) = v53;
      *(_OWORD *)(v47 + 32) = *(_OWORD *)(v48 + 32);
      *(_WORD *)(v47 + 48) = *(_WORD *)(v48 + 48);
      uint64_t v54 = *(void *)(v48 + 64);
      *(void *)(v47 + 56) = *(void *)(v48 + 56);
      *(void *)(v47 + 64) = v54;
      *(_BYTE *)(v47 + 72) = *(_BYTE *)(v48 + 72);
      uint64_t v55 = v49[10];
      uint64_t v56 = (void *)(v47 + v55);
      uint64_t v57 = (const void *)(v48 + v55);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v31)(v48 + v55, 1LL, v29))
      {
        uint64_t v58 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v56, v57, *(void *)(*(void *)(v58 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(void *, const void *, uint64_t))(v116 + 32))(v56, v57, v29);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v116 + 56))(v56, 0LL, 1LL, v29);
      }

      uint64_t v71 = v49[11];
      uint64_t v72 = (void *)(v47 + v71);
      uint64_t v73 = (const void *)(v48 + v71);
      if (((unsigned int (*)(uint64_t, uint64_t, uint64_t))v31)(v48 + v71, 1LL, v29))
      {
        uint64_t v74 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v72, v73, *(void *)(*(void *)(v74 - 8) + 64LL));
        uint64_t v60 = v116;
      }

      else
      {
        uint64_t v75 = v73;
        uint64_t v60 = v116;
        (*(void (**)(void *, const void *, uint64_t))(v116 + 32))(v72, v75, v29);
        (*(void (**)(void *, void, uint64_t, uint64_t))(v116 + 56))(v72, 0LL, 1LL, v29);
      }

      uint64_t v76 = v49[12];
      uint64_t v77 = v47 + v76;
      uint64_t v78 = v48 + v76;
      *(void *)uint64_t v77 = *(void *)v78;
      *(_BYTE *)(v77 + 8) = *(_BYTE *)(v78 + 8);
      *(_OWORD *)(v47 + v49[13]) = *(_OWORD *)(v48 + v49[13]);
      *(void *)(v47 + v49[14]) = *(void *)(v48 + v49[14]);
      *(_OWORD *)(v47 + v49[15]) = *(_OWORD *)(v48 + v49[15]);
      *(void *)(v47 + v49[16]) = *(void *)(v48 + v49[16]);
      uint64_t v79 = v49[17];
      uint64_t v80 = v47 + v79;
      uint64_t v81 = v48 + v79;
      *(_BYTE *)(v80 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(v81 + 16);
      *(_OWORD *)uint64_t v80 = *(_OWORD *)v81;
      uint64_t v82 = v49[18];
      uint64_t v83 = v47 + v82;
      uint64_t v84 = v48 + v82;
      *(_BYTE *)(v83 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_BYTE *)(v84 + 16);
      *(_OWORD *)uint64_t v83 = *(_OWORD *)v84;
      ((void (*)(uint64_t, void, uint64_t, int *))__src[7])(v47, 0LL, 1LL, v49);
      goto LABEL_43;
    }

uint64_t sub_1003A0D18(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003A0D24);
}

uint64_t sub_1003A0D24(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2)
  {
    uint64_t v8 = v6;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48);
    uint64_t v10 = a1;
    return v9(v10, a2, v8);
  }

  if ((_DWORD)a2 != 0x7FFFFFFF)
  {
    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
    {
      uint64_t v8 = v13;
      uint64_t v15 = a3[12];
    }

    else
    {
      uint64_t v16 = sub_100004AEC(&qword_1009A6DD0);
      uint64_t v14 = *(void *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == (_DWORD)a2)
      {
        uint64_t v8 = v16;
        uint64_t v15 = a3[16];
      }

      else
      {
        uint64_t v8 = type metadata accessor for URL(0LL);
        uint64_t v14 = *(void *)(v8 - 8);
        uint64_t v15 = a3[19];
      }
    }

    uint64_t v10 = a1 + v15;
    uint64_t v9 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v14 + 48);
    return v9(v10, a2, v8);
  }

  unint64_t v11 = *(void *)(a1 + a3[8] + 8);
  if (v11 >= 0xFFFFFFFF) {
    LODWORD(v11) = -1;
  }
  return (v11 + 1);
}

uint64_t sub_1003A0E20(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003A0E2C);
}

uint64_t sub_1003A0E2C(uint64_t a1, uint64_t a2, int a3, int *a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3)
  {
    uint64_t v10 = result;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56);
    uint64_t v12 = a1;
  }

  else
  {
    if (a3 == 0x7FFFFFFF)
    {
      *(void *)(a1 + a4[8] + 8) = (a2 - 1);
      return result;
    }

    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
    uint64_t v14 = *(void *)(v13 - 8);
    if (*(_DWORD *)(v14 + 84) == a3)
    {
      uint64_t v10 = v13;
      uint64_t v15 = a4[12];
    }

    else
    {
      uint64_t v16 = sub_100004AEC(&qword_1009A6DD0);
      uint64_t v14 = *(void *)(v16 - 8);
      if (*(_DWORD *)(v14 + 84) == a3)
      {
        uint64_t v10 = v16;
        uint64_t v15 = a4[16];
      }

      else
      {
        uint64_t v10 = type metadata accessor for URL(0LL);
        uint64_t v14 = *(void *)(v10 - 8);
        uint64_t v15 = a4[19];
      }
    }

    uint64_t v12 = a1 + v15;
    unint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v14 + 56);
  }

  return v11(v12, a2, a2, v10);
}

void sub_1003A0F24(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v10[0] = *(void *)(v2 - 8) + 64LL;
    v10[1] = &unk_1007FDB98;
    v10[2] = &unk_1007FDBB0;
    v10[3] = &unk_1007FDBB0;
    v10[4] = &unk_1007FDBC8;
    v10[5] = &unk_1007FDBC8;
    v10[6] = &unk_1007FDBE0;
    v10[7] = &unk_1007FDBF8;
    sub_10009361C( 319LL,  (unint64_t *)&qword_1009A8928,  (uint64_t (*)(uint64_t))&type metadata accessor for URL);
    if (v5 <= 0x3F)
    {
      uint64_t v11 = *(void *)(v4 - 8) + 64LL;
      uint64_t v12 = v11;
      uint64_t v13 = &unk_1007FDBC8;
      uint64_t v14 = (char *)&value witness table for Builtin.Int64 + 64;
      sub_10009361C(319LL, &qword_1009A87B8, type metadata accessor for AccessoryInfoResponseContent.Configuration);
      if (v7 <= 0x3F)
      {
        uint64_t v15 = *(void *)(v6 - 8) + 64LL;
        uint64_t v16 = (char *)&value witness table for Builtin.Int32 + 64;
        uint64_t v17 = &unk_1007FDC10;
        uint64_t v8 = type metadata accessor for URL(319LL);
        if (v9 <= 0x3F)
        {
          uint64_t v18 = *(void *)(v8 - 8) + 64LL;
          uint64_t v19 = v18;
          uint64_t v20 = v18;
          uint64_t v21 = v18;
          uint64_t v22 = v18;
          uint64_t v23 = v18;
          swift_initStructMetadata(a1, 256LL, 21LL, v10, a1 + 16);
        }
      }
    }
  }

uint64_t sub_1003A1064()
{
  return sub_100007864(&qword_1009AB028, type metadata accessor for BeaconProductInfoRecord, (uint64_t)&unk_1007FDC28);
}

uint64_t sub_1003A1090(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_100007864( &qword_1009AB030,  type metadata accessor for BeaconProductInfoRecord,  (uint64_t)&unk_1007FDCD4);
  uint64_t result = sub_100007864(&qword_1009AB038, type metadata accessor for BeaconProductInfoRecord, (uint64_t)&unk_1007FDCAC);
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_1003A10EC()
{
  unint64_t result = qword_1009AB048;
  if (!qword_1009AB048)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FDDC0, &type metadata for BeaconProductInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AB048);
  }

  return result;
}

uint64_t sub_1003A1130(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003A1174(uint64_t a1, uint64_t a2)
{
  uint64_t v130 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
  uint64_t v127 = *(void *)(v130 - 8);
  __chkstk_darwin(v130);
  uint64_t v124 = (uint64_t)&v118 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v126 = sub_100004AEC(&qword_1009A8A80);
  __chkstk_darwin(v126);
  uint64_t v131 = (uint64_t)&v118 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_1009A6DD0);
  uint64_t v7 = __chkstk_darwin(v6);
  uint64_t v125 = (uint64_t)&v118 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v128 = (uint64_t)&v118 - v10;
  __chkstk_darwin(v9);
  uint64_t v129 = (uint64_t)&v118 - v11;
  uint64_t v12 = type metadata accessor for URL(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v134 = v12;
  uint64_t v135 = v13;
  __chkstk_darwin(v12);
  uint64_t v133 = (char *)&v118 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = sub_100004AEC(&qword_1009A89C8);
  uint64_t v16 = __chkstk_darwin(v15);
  uint64_t v132 = (uint64_t)&v118 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v118 - v18;
  uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  uint64_t v21 = __chkstk_darwin(v20);
  uint64_t v23 = (char *)&v118 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = __chkstk_darwin(v21);
  uint64_t v26 = (char *)&v118 - v25;
  uint64_t v27 = __chkstk_darwin(v24);
  uint64_t v29 = (char *)&v118 - v28;
  uint64_t v30 = __chkstk_darwin(v27);
  int v32 = (char *)&v118 - v31;
  uint64_t v33 = __chkstk_darwin(v30);
  uint64_t v35 = (char *)&v118 - v34;
  __chkstk_darwin(v33);
  uint64_t v37 = (char *)&v118 - v36;
  if ((static UUID.== infix(_:_:)(a1, a2) & 1) == 0) {
    goto LABEL_9;
  }
  int v38 = (int *)type metadata accessor for BeaconProductInfoRecord(0LL);
  uint64_t v39 = v38[5];
  int v40 = *(unsigned __int8 *)(a1 + v39);
  int v41 = *(unsigned __int8 *)(a2 + v39);
  if (v40 == 2)
  {
    if (v41 != 2) {
      goto LABEL_9;
    }
  }

  else
  {
    char v42 = 0;
    BOOL v43 = (v40 & 1) == 0;
    if (v41 == 2 || ((v43 ^ v41) & 1) == 0) {
      return v42 & 1;
    }
  }

  if (*(unsigned __int8 *)(a1 + v38[6]) != *(unsigned __int8 *)(a2 + v38[6])
    || *(unsigned __int8 *)(a1 + v38[7]) != *(unsigned __int8 *)(a2 + v38[7]))
  {
    goto LABEL_9;
  }

  uint64_t v45 = v38[8];
  uint64_t v46 = *(void *)(a1 + v45);
  uint64_t v47 = *(void *)(a1 + v45 + 8);
  uint64_t v48 = (uint64_t *)(a2 + v45);
  uint64_t v49 = *v48;
  uint64_t v50 = v48[1];
  BOOL v51 = v46 == *v48;
  unint64_t v123 = v38;
  if (v51 && v47 == v50
    || (char v52 = _stringCompareWithSmolCheck(_:_:expecting:)(v46, v47, v49, v50, 0LL),
        int v38 = v123,
        char v53 = v52,
        char v42 = 0,
        (v53 & 1) != 0))
  {
    uint64_t v54 = v38[9];
    uint64_t v55 = *(void *)(a1 + v54);
    uint64_t v56 = *(void *)(a1 + v54 + 8);
    uint64_t v57 = (void *)(a2 + v54);
    uint64_t v58 = v57[1];
    if (v55 == *v57 && v56 == v58) {
      goto LABEL_18;
    }
    char v59 = _stringCompareWithSmolCheck(_:_:expecting:)(v55, v56, *v57, v58, 0LL);
    int v38 = v123;
    char v60 = v59;
    char v42 = 0;
    if ((v60 & 1) != 0)
    {
LABEL_18:
      uint64_t v61 = v38[10];
      uint64_t v62 = (void *)(a1 + v61);
      char v63 = *(_BYTE *)(a1 + v61 + 8);
      uint64_t v64 = (void *)(a2 + v61);
      int v65 = *(unsigned __int8 *)(a2 + v61 + 8);
      if ((v63 & 1) != 0)
      {
        if (!v65) {
          goto LABEL_9;
        }
      }

      else
      {
        if (*v62 != *v64) {
          LOBYTE(v65) = 1;
        }
        if ((v65 & 1) != 0) {
          goto LABEL_9;
        }
      }

      uint64_t v66 = v38[11];
      int v67 = (void *)(a1 + v66);
      uint64_t v68 = *(void *)(a1 + v66 + 8);
      size_t v69 = (void *)(a2 + v66);
      uint64_t v70 = v69[1];
      if (v68)
      {
        if (!v70) {
          goto LABEL_9;
        }
        if (*v67 != *v69 || v68 != v70)
        {
          char v71 = _stringCompareWithSmolCheck(_:_:expecting:)(*v67, v68, *v69, v70, 0LL);
          int v38 = v123;
          char v72 = v71;
          char v42 = 0;
          if ((v72 & 1) == 0) {
            return v42 & 1;
          }
        }
      }

      else if (v70)
      {
        goto LABEL_9;
      }

      uint64_t v73 = v38[12];
      uint64_t v120 = a1;
      uint64_t v74 = a1 + v73;
      uint64_t v75 = v38;
      sub_10001581C(v74, (uint64_t)v37, (uint64_t *)&unk_1009A34D0);
      uint64_t v76 = v75[12];
      uint64_t v121 = a2;
      sub_10001581C(a2 + v76, (uint64_t)v35, (uint64_t *)&unk_1009A34D0);
      uint64_t v77 = (uint64_t)&v19[*(int *)(v15 + 48)];
      sub_10001581C((uint64_t)v37, (uint64_t)v19, (uint64_t *)&unk_1009A34D0);
      uint64_t v122 = v77;
      sub_10001581C((uint64_t)v35, v77, (uint64_t *)&unk_1009A34D0);
      uint64_t v78 = v134;
      uint64_t v79 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v135 + 48);
      if (v79((uint64_t)v19, 1LL, v134) == 1)
      {
        sub_100015794((uint64_t)v35, (uint64_t *)&unk_1009A34D0);
        sub_100015794((uint64_t)v37, (uint64_t *)&unk_1009A34D0);
        if (v79(v122, 1LL, v78) == 1)
        {
          uint64_t v119 = v79;
          sub_100015794((uint64_t)v19, (uint64_t *)&unk_1009A34D0);
          goto LABEL_38;
        }
      }

      else
      {
        sub_10001581C((uint64_t)v19, (uint64_t)v32, (uint64_t *)&unk_1009A34D0);
        if (v79(v122, 1LL, v78) != 1)
        {
          uint64_t v119 = v79;
          uint64_t v82 = v133;
          (*(void (**)(char *, uint64_t, uint64_t))(v135 + 32))(v133, v122, v78);
          uint64_t v83 = sub_100007864( &qword_1009A89D0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
          LODWORD(v122) = dispatch thunk of static Equatable.== infix(_:_:)(v32, v82, v78, v83);
          uint64_t v84 = *(void (**)(char *, uint64_t))(v135 + 8);
          v84(v133, v78);
          sub_100015794((uint64_t)v35, (uint64_t *)&unk_1009A34D0);
          sub_100015794((uint64_t)v37, (uint64_t *)&unk_1009A34D0);
          v84(v32, v78);
          sub_100015794((uint64_t)v19, (uint64_t *)&unk_1009A34D0);
          if ((v122 & 1) == 0) {
            goto LABEL_9;
          }
LABEL_38:
          uint64_t v85 = v123;
          sub_10001581C(v120 + v123[13], (uint64_t)v29, (uint64_t *)&unk_1009A34D0);
          sub_10001581C(v121 + v85[13], (uint64_t)v26, (uint64_t *)&unk_1009A34D0);
          uint64_t v86 = v132;
          uint64_t v87 = v132 + *(int *)(v15 + 48);
          sub_10001581C((uint64_t)v29, v132, (uint64_t *)&unk_1009A34D0);
          sub_10001581C((uint64_t)v26, v87, (uint64_t *)&unk_1009A34D0);
          int v88 = v119;
          if (v119(v86, 1LL, v78) == 1)
          {
            sub_100015794((uint64_t)v26, (uint64_t *)&unk_1009A34D0);
            sub_100015794((uint64_t)v29, (uint64_t *)&unk_1009A34D0);
            if (v88(v87, 1LL, v78) == 1)
            {
              sub_100015794(v86, (uint64_t *)&unk_1009A34D0);
              goto LABEL_46;
            }
          }

          else
          {
            sub_10001581C(v86, (uint64_t)v23, (uint64_t *)&unk_1009A34D0);
            if (v88(v87, 1LL, v78) != 1)
            {
              uint64_t v89 = v135;
              uint64_t v90 = v133;
              (*(void (**)(char *, uint64_t, uint64_t))(v135 + 32))(v133, v87, v78);
              uint64_t v91 = sub_100007864( &qword_1009A89D0,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
              char v92 = dispatch thunk of static Equatable.== infix(_:_:)(v23, v90, v78, v91);
              uint64_t v93 = *(void (**)(char *, uint64_t))(v89 + 8);
              v93(v90, v78);
              sub_100015794((uint64_t)v26, (uint64_t *)&unk_1009A34D0);
              sub_100015794((uint64_t)v29, (uint64_t *)&unk_1009A34D0);
              v93(v23, v78);
              sub_100015794(v86, (uint64_t *)&unk_1009A34D0);
              if ((v92 & 1) == 0) {
                goto LABEL_9;
              }
LABEL_46:
              uint64_t v94 = v123;
              uint64_t v95 = v123[14];
              uint64_t v96 = v120;
              uint64_t v97 = *(void *)(v120 + v95);
              uint64_t v98 = *(void *)(v120 + v95 + 8);
              uint64_t v99 = v121;
              uint64_t v100 = (void *)(v121 + v95);
              uint64_t v101 = v100[1];
              if (v97 == *v100 && v98 == v101
                || (char v102 = _stringCompareWithSmolCheck(_:_:expecting:)(v97, v98, *v100, v101, 0LL),
                    uint64_t v94 = v123,
                    uint64_t v96 = v120,
                    uint64_t v99 = v121,
                    char v103 = v102,
                    char v42 = 0,
                    (v103 & 1) != 0))
              {
                uint64_t v104 = v129;
                uint64_t v105 = v99;
                uint64_t v106 = v94;
                sub_10001581C(v96 + v94[16], v129, &qword_1009A6DD0);
                uint64_t v107 = v128;
                sub_10001581C(v105 + v106[16], v128, &qword_1009A6DD0);
                uint64_t v108 = v131;
                uint64_t v109 = v131 + *(int *)(v126 + 48);
                sub_10001581C(v104, v131, &qword_1009A6DD0);
                sub_10001581C(v107, v109, &qword_1009A6DD0);
                uint64_t v110 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v127 + 48);
                uint64_t v111 = v130;
                if (v110(v108, 1LL, v130) == 1)
                {
                  sub_100015794(v107, &qword_1009A6DD0);
                  sub_100015794(v104, &qword_1009A6DD0);
                  if (v110(v109, 1LL, v111) == 1)
                  {
                    sub_100015794(v108, &qword_1009A6DD0);
LABEL_57:
                    if (*(_DWORD *)(v120 + v123[17]) == *(_DWORD *)(v121 + v123[17]))
                    {
                      uint64_t v115 = v123[18];
                      uint64_t v116 = *(void *)(v120 + v115);
                      uint64_t v117 = *(void *)(v121 + v115);
                      if (v116)
                      {
                        if (!v117 || (sub_1001265D0(v116, v117) & 1) == 0) {
                          goto LABEL_9;
                        }
LABEL_63:
                        if ((static URL.== infix(_:_:)(v120 + v123[19], v121 + v123[19]) & 1) != 0
                          && (static URL.== infix(_:_:)(v120 + v123[20], v121 + v123[20]) & 1) != 0
                          && (static URL.== infix(_:_:)(v120 + v123[21], v121 + v123[21]) & 1) != 0
                          && (static URL.== infix(_:_:)(v120 + v123[22], v121 + v123[22]) & 1) != 0
                          && (static URL.== infix(_:_:)(v120 + v123[23], v121 + v123[23]) & 1) != 0)
                        {
                          char v42 = static URL.== infix(_:_:)(v120 + v123[24], v121 + v123[24]);
                          return v42 & 1;
                        }

                        goto LABEL_9;
                      }

                      if (!v117) {
                        goto LABEL_63;
                      }
                    }

uint64_t getEnumTagSinglePayload for BeaconProductInfoRecord.CodingKeys(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xEC) {
    goto LABEL_17;
  }
  if (a2 + 20 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 20) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 20;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 20;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 20;
    }
  }

uint64_t storeEnumTagSinglePayload for BeaconProductInfoRecord.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 20 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 20) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xEC) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xEB) {
    return ((uint64_t (*)(void))((char *)&loc_1003A1D64 + 4 * byte_1007FDB7A[v4]))();
  }
  *a1 = a2 + 20;
  return ((uint64_t (*)(void))((char *)sub_1003A1D98 + 4 * byte_1007FDB75[v4]))();
}

uint64_t sub_1003A1D98(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003A1DA0(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1003A1DA8LL);
  }
  return result;
}

uint64_t sub_1003A1DB4(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1003A1DBCLL);
  }
  *(_BYTE *)unint64_t result = a2 + 20;
  return result;
}

uint64_t sub_1003A1DC0(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003A1DC8(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconProductInfoRecord.CodingKeys()
{
  return &type metadata for BeaconProductInfoRecord.CodingKeys;
}

unint64_t sub_1003A1DE8()
{
  unint64_t result = qword_1009AB058;
  if (!qword_1009AB058)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FDD98, &type metadata for BeaconProductInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AB058);
  }

  return result;
}

unint64_t sub_1003A1E30()
{
  unint64_t result = qword_1009AB060;
  if (!qword_1009AB060)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FDD08, &type metadata for BeaconProductInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AB060);
  }

  return result;
}

unint64_t sub_1003A1E78()
{
  unint64_t result = qword_1009AB068;
  if (!qword_1009AB068)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FDD30, &type metadata for BeaconProductInfoRecord.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AB068);
  }

  return result;
}

uint64_t sub_1003A1EBC(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x696669746E656469LL && a2 == 0xEA00000000007265LL)
  {
    unint64_t v5 = 0xEA00000000007265LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696669746E656469LL, 0xEA00000000007265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v7 = 0x800000010085D650LL;
    if (a2 == 0x800000010085D650LL) {
      goto LABEL_13;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x800000010085D650LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v7 = a2;
LABEL_13:
    swift_bridgeObjectRelease(v7);
    return 1LL;
  }

  if (a1 == 0xD000000000000012LL)
  {
    unint64_t v8 = 0x800000010085FA60LL;
    if (a2 == 0x800000010085FA60LL) {
      goto LABEL_18;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000012LL, 0x800000010085FA60LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v8 = a2;
LABEL_18:
    swift_bridgeObjectRelease(v8);
    return 2LL;
  }

  if (a1 == 0x6E6564646968LL && a2 == 0xE600000000000000LL)
  {
    unint64_t v9 = 0xE600000000000000LL;
LABEL_24:
    swift_bridgeObjectRelease(v9);
    return 3LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6564646968LL, 0xE600000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v9 = a2;
    goto LABEL_24;
  }

  if (a1 == 0x6D614E6C65646F6DLL && a2 == 0xE900000000000065LL)
  {
    unint64_t v10 = 0xE900000000000065LL;
LABEL_30:
    swift_bridgeObjectRelease(v10);
    return 4LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6D614E6C65646F6DLL, 0xE900000000000065LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v10 = a2;
    goto LABEL_30;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x8000000100851DE0LL)
  {
    unint64_t v11 = 0x8000000100851DE0LL;
LABEL_36:
    swift_bridgeObjectRelease(v11);
    return 5LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100851DE0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v11 = a2;
    goto LABEL_36;
  }

  if (a1 == 0x52746C7561666564LL && a2 == 0xEB00000000656C6FLL)
  {
    unint64_t v12 = 0xEB00000000656C6FLL;
LABEL_42:
    swift_bridgeObjectRelease(v12);
    return 6LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x52746C7561666564LL, 0xEB00000000656C6FLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v12 = a2;
    goto LABEL_42;
  }

  if (a1 == 0xD000000000000013LL && a2 == 0x800000010085D540LL)
  {
    unint64_t v13 = 0x800000010085D540LL;
LABEL_48:
    swift_bridgeObjectRelease(v13);
    return 7LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000013LL, 0x800000010085D540LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v13 = a2;
    goto LABEL_48;
  }

  if (a1 == 0x55656C6261736964LL && a2 == 0xEA00000000004C52LL)
  {
    unint64_t v14 = 0xEA00000000004C52LL;
LABEL_54:
    swift_bridgeObjectRelease(v14);
    return 8LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x55656C6261736964LL, 0xEA00000000004C52LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v14 = a2;
    goto LABEL_54;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v15 = 0x800000010085D560LL;
    if (a2 == 0x800000010085D560LL) {
      goto LABEL_59;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000010085D560LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v15 = a2;
LABEL_59:
    swift_bridgeObjectRelease(v15);
    return 9LL;
  }

  if (a1 == 0x6E6F6973726576LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v16 = 0xE700000000000000LL;
LABEL_65:
    swift_bridgeObjectRelease(v16);
    return 10LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E6F6973726576LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v16 = a2;
    goto LABEL_65;
  }

  if (a1 == 0x7265776F507874LL && a2 == 0xE700000000000000LL)
  {
    unint64_t v17 = 0xE700000000000000LL;
LABEL_71:
    swift_bridgeObjectRelease(v17);
    return 11LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x7265776F507874LL, 0xE700000000000000LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v17 = a2;
    goto LABEL_71;
  }

  if (a1 == 0x72756769666E6F63LL && a2 == 0xED00006E6F697461LL)
  {
    unint64_t v18 = 0xED00006E6F697461LL;
LABEL_77:
    swift_bridgeObjectRelease(v18);
    return 12LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x72756769666E6F63LL, 0xED00006E6F697461LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v18 = a2;
    goto LABEL_77;
  }

  if (a1 == 0x696C696261706163LL && a2 == 0xEC00000073656974LL)
  {
    unint64_t v19 = 0xEC00000073656974LL;
LABEL_83:
    swift_bridgeObjectRelease(v19);
    return 13LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x696C696261706163LL, 0xEC00000073656974LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v19 = a2;
    goto LABEL_83;
  }

  if (a1 == 0x655474756F79616CLL && a2 == 0xEE006574616C706DLL)
  {
    unint64_t v20 = 0xEE006574616C706DLL;
LABEL_89:
    swift_bridgeObjectRelease(v20);
    return 14LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x655474756F79616CLL, 0xEE006574616C706DLL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v20 = a2;
    goto LABEL_89;
  }

  if (a1 == 0x48746C7561666564LL && a2 == 0xEF6E6F63496F7265LL)
  {
    unint64_t v21 = 0xEF6E6F63496F7265LL;
LABEL_95:
    swift_bridgeObjectRelease(v21);
    return 15LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x48746C7561666564LL, 0xEF6E6F63496F7265LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v21 = a2;
    goto LABEL_95;
  }

  if (a1 == 0x4C746C7561666564LL && a2 == 0xEF6E6F6349747369LL)
  {
    unint64_t v22 = 0xEF6E6F6349747369LL;
LABEL_101:
    swift_bridgeObjectRelease(v22);
    return 16LL;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x4C746C7561666564LL, 0xEF6E6F6349747369LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v22 = a2;
    goto LABEL_101;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v23 = 0x800000010085D460LL;
    if (a2 == 0x800000010085D460LL) {
      goto LABEL_106;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000010085D460LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v23 = a2;
LABEL_106:
    swift_bridgeObjectRelease(v23);
    return 17LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v24 = 0x800000010085D480LL;
    if (a2 == 0x800000010085D480LL) {
      goto LABEL_111;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000010085D480LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v24 = a2;
LABEL_111:
    swift_bridgeObjectRelease(v24);
    return 18LL;
  }

  if (a1 == 0xD000000000000011LL)
  {
    unint64_t v25 = 0x800000010085D4A0LL;
    if (a2 == 0x800000010085D4A0LL) {
      goto LABEL_116;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000010085D4A0LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v25 = a2;
LABEL_116:
    swift_bridgeObjectRelease(v25);
    return 19LL;
  }

  if (a1 == 0xD000000000000011LL && a2 == 0x800000010085D4C0LL)
  {
    swift_bridgeObjectRelease(0x800000010085D4C0LL);
    return 20LL;
  }

  else
  {
    char v26 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000011LL, 0x800000010085D4C0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v26 & 1) != 0) {
      return 20LL;
    }
    else {
      return 21LL;
    }
  }

uint64_t sub_1003A277C()
{
  uint64_t v1 = type metadata accessor for LocalizationUtility.Table(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v59 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for LeftWhileTravelingUserNotification(0LL);
  uint64_t v6 = v0 + *(int *)(v5 + 20);
  unint64_t v8 = *(void **)(v6 + 8);
  uint64_t v7 = *(void *)(v6 + 16);
  unint64_t v9 = *(void *)(v6 + 24);
  if ((*(_BYTE *)(v6 + 32) & 1) == 0)
  {
    id v14 = v8;
    swift_bridgeObjectRetain(v9);
    if (v9)
    {
      uint64_t v15 = HIBYTE(v9) & 0xF;
      if ((v9 & 0x2000000000000000LL) == 0) {
        uint64_t v15 = v7 & 0xFFFFFFFFFFFFLL;
      }
      if (v15)
      {
        id v60 = v14;
        uint64_t v16 = v1;
        unint64_t v17 = 0xD000000000000039LL;
        uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeAccessory);
        uint64_t v20 = v19;
        uint64_t v21 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
        if (v18 != v21 || v20 != v22)
        {
          char v24 = _stringCompareWithSmolCheck(_:_:expecting:)(v18, v20, v21, v22, 0LL);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v24 & 1) != 0)
          {
            unint64_t v25 = 0x8000000100856E00LL;
LABEL_45:
            uint64_t v1 = v16;
            uint64_t v54 = sub_100004AEC((uint64_t *)&unk_10099D740);
            int v41 = (void *)swift_allocObject(v54, 72LL, 7LL);
            *((_OWORD *)v41 + 1) = xmmword_1007E67D0;
            v41[7] = &type metadata for String;
            v41[8] = sub_1000226F4();
            v41[4] = v7;
            v41[5] = v9;
            id v14 = v60;
            goto LABEL_46;
          }

          uint64_t v49 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeDurian);
          uint64_t v20 = v50;
          uint64_t v52 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
          if (v49 != v52 || v20 != v51)
          {
            char v53 = _stringCompareWithSmolCheck(_:_:expecting:)(v49, v20, v52, v51, 0LL);
            swift_bridgeObjectRelease();
            swift_bridgeObjectRelease();
            if ((v53 & 1) != 0)
            {
              unint64_t v25 = 0x8000000100856E00LL;
            }

            else
            {
              unint64_t v17 = 0xD00000000000003BLL;
              unint64_t v25 = 0x8000000100856DC0LL;
            }

            goto LABEL_45;
          }
        }

        swift_bridgeObjectRelease_n(v20, 2LL);
        unint64_t v25 = 0x8000000100856E00LL;
        goto LABEL_45;
      }

      swift_bridgeObjectRelease();
    }

    uint64_t v33 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeAccessory);
    uint64_t v35 = v34;
    uint64_t v36 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
    if (v33 == v36 && v35 == v37)
    {
      swift_bridgeObjectRelease_n(v35, 2LL);
      unint64_t v17 = 0xD000000000000044LL;
    }

    else
    {
      char v39 = _stringCompareWithSmolCheck(_:_:expecting:)(v33, v35, v36, v37, 0LL);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      if ((v39 & 1) == 0)
      {
        uint64_t v42 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPBeaconTypeDurian);
        uint64_t v44 = v43;
        uint64_t v45 = static String._unconditionallyBridgeFromObjectiveC(_:)(v8);
        if (v42 != v45 || v44 != v46)
        {
          char v48 = _stringCompareWithSmolCheck(_:_:expecting:)(v42, v44, v45, v46, 0LL);
          swift_bridgeObjectRelease();
          swift_bridgeObjectRelease();
          if ((v48 & 1) != 0) {
            unint64_t v17 = 0xD000000000000041LL;
          }
          else {
            unint64_t v17 = 0xD000000000000043LL;
          }
          if ((v48 & 1) != 0) {
            unint64_t v25 = 0x8000000100856D20LL;
          }
          else {
            unint64_t v25 = 0x8000000100856CD0LL;
          }
          goto LABEL_26;
        }

        swift_bridgeObjectRelease_n(v44, 2LL);
        unint64_t v17 = 0xD000000000000041LL;
        int v40 = "SEPARATION_MONITORING_SINGLE_LEFT_BEHIND_GENERIC_ALERT_TITLE_B389";
LABEL_25:
        unint64_t v25 = (unint64_t)(v40 - 32) | 0x8000000000000000LL;
LABEL_26:
        int v41 = _swiftEmptyArrayStorage;
LABEL_46:
        (*(void (**)(char *, void, uint64_t))(v2 + 104))( v4,  enum case for LocalizationUtility.Table.default(_:),  v1);
        uint64_t v55 = static LocalizationUtility.localizedString(key:table:)(v17, v25, v4);
        uint64_t v57 = v56;
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
        uint64_t v32 = String.init(format:arguments:)(v55, v57, v41);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();

        return v32;
      }

      unint64_t v17 = 0xD000000000000044LL;
    }

    int v40 = "SEPARATION_MONITORING_SINGLE_LEFT_BEHIND_GENERIC_ALERT_TITLE_HAWKEYE";
    goto LABEL_25;
  }

  uint64_t v10 = *(void *)v6;
  unsigned int v11 = *(unsigned __int8 *)(v0 + *(int *)(v5 + 32)) - 1;
  (*(void (**)(char *, void, uint64_t))(v2 + 104))( v4,  enum case for LocalizationUtility.Table.default(_:),  v1);
  swift_bridgeObjectRetain(v10);
  if (v11 >= 2)
  {
    unint64_t v12 = 0xD00000000000003ELL;
    unint64_t v13 = "SEPARATION_MONITORING_MULTIPLE_DEVICES_LEFT_BEHIND_ALERT_TITLE";
  }

  else
  {
    unint64_t v12 = 0xD00000000000003CLL;
    unint64_t v13 = "SEPARATION_MONITORING_MULTIPLE_ITEMS_LEFT_BEHIND_ALERT_TITLE";
  }

  uint64_t v26 = static LocalizationUtility.localizedString(key:table:)( v12,  (unint64_t)(v13 - 32) | 0x8000000000000000LL,  v4);
  uint64_t v28 = v27;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v29 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v30 = swift_allocObject(v29, 72LL, 7LL);
  *(_OWORD *)(v30 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v31 = *(void *)(v10 + 16);
  sub_100187C98(v10, v8, v7, v9, 1);
  *(void *)(v30 + 56) = &type metadata for Int;
  *(void *)(v30 + 64) = &protocol witness table for Int;
  *(void *)(v30 + 32) = v31;
  uint64_t v32 = static String.localizedStringWithFormat(_:_:)(v26, v28, v30);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v32;
}

uint64_t sub_1003A2CB0()
{
  uint64_t v1 = type metadata accessor for LocalizationUtility.Table(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v21 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for LeftWhileTravelingUserNotification(0LL);
  uint64_t v6 = (uint64_t *)(v0 + *(int *)(v5 + 24));
  uint64_t v7 = v6[1];
  if (v7)
  {
    uint64_t v8 = v5;
    uint64_t v9 = *v6;
    unsigned int v10 = *(unsigned __int8 *)(v0 + *(int *)(v5 + 32)) - 1;
    (*(void (**)(char *, void, uint64_t))(v2 + 104))( v4,  enum case for LocalizationUtility.Table.default(_:),  v1);
    swift_bridgeObjectRetain(v7);
    if (v10 > 1)
    {
      unint64_t v11 = 0xD000000000000041LL;
      unint64_t v12 = "SEPARATION_MONITORING_MULTIPLE_DEVICES_LEFT_BEHIND_ALERT_SUBTITLE";
    }

    else
    {
      unint64_t v11 = 0xD00000000000003FLL;
      unint64_t v12 = "SEPARATION_MONITORING_MULTIPLE_ITEMS_LEFT_BEHIND_ALERT_SUBTITLE";
    }

    uint64_t v14 = static LocalizationUtility.localizedString(key:table:)( v11,  (unint64_t)(v12 - 32) | 0x8000000000000000LL,  v4);
    uint64_t v16 = v15;
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
    uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v18 = swift_allocObject(v17, 112LL, 7LL);
    *(_OWORD *)(v18 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1007E4750;
    uint64_t v19 = *(void *)(*(void *)(v0 + *(int *)(v8 + 20)) + 16LL);
    *(void *)(v18 + 56) = &type metadata for Int;
    *(void *)(v18 + 64) = &protocol witness table for Int;
    *(void *)(v18 + 32) = v19;
    *(void *)(v18 + 96) = &type metadata for String;
    *(void *)(v18 + 104) = sub_1000226F4();
    *(void *)(v18 + 72) = v9;
    *(void *)(v18 + 80) = v7;
    uint64_t v13 = static String.localizedStringWithFormat(_:_:)(v14, v16, v18);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
  }

  else
  {
    (*(void (**)(char *, void, uint64_t))(v2 + 104))( v4,  enum case for LocalizationUtility.Table.default(_:),  v1);
    uint64_t v13 = static LocalizationUtility.localizedString(key:table:)(0xD000000000000035LL, 0x8000000100856B80LL, v4);
    (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  }

  return v13;
}

unint64_t sub_1003A2EB4()
{
  uint64_t v1 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
  uint64_t v2 = type metadata accessor for LeftWhileTravelingUserNotification(0LL);
  uint64_t v3 = *(void *)(v0 + *(int *)(v2 + 28));
  *(void *)&__int128 v23 = 0LL;
  id v4 = [v1 archivedDataWithRootObject:v3 requiringSecureCoding:1 error:&v23];
  id v5 = (id)v23;
  if (v4)
  {
    uint64_t v6 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v4);
    unint64_t v8 = v7;
  }

  else
  {
    uint64_t v9 = v5;
    uint64_t v10 = _convertNSErrorToError(_:)(v5);

    swift_willThrow(v11);
    swift_errorRelease(v10);
    uint64_t v6 = 0LL;
    unint64_t v8 = 0xF000000000000000LL;
  }

  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009C0FA0);
  uint64_t inited = swift_initStackObject(v12, v25);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1007E4750;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(SPSeparationAlertUserInfoLocationKey);
  *(void *)(inited + 40) = v14;
  if (v8 >> 60 == 15)
  {
    id v15 = [objc_allocWithZone(NSNull) init];
    *(void *)(inited + 72) = sub_1003A3314();
    *(void *)(inited + 48) = v15;
  }

  else
  {
    char v24 = &type metadata for Data;
    *(void *)&__int128 v23 = v6;
    *((void *)&v23 + 1) = v8;
    sub_10006A358(&v23, (_OWORD *)(inited + 48));
  }

  *(void *)(inited + 80) = static String._unconditionallyBridgeFromObjectiveC(_:)(SPSeparationAlertUserInfoBeaconIdentifiersKey);
  *(void *)(inited + 88) = v16;
  uint64_t v17 = *(void *)(v0 + *(int *)(v2 + 20));
  sub_100018BE4(v6, v8);
  swift_bridgeObjectRetain(v17);
  sub_100183E04(v18);
  uint64_t v20 = v19;
  swift_bridgeObjectRelease();
  *(void *)(inited + 120) = sub_100004AEC(&qword_1009AED50);
  *(void *)(inited + 96) = v20;
  unint64_t v21 = sub_100412CF8(inited);
  sub_1000182F0(v6, v8);
  return v21;
}

uint64_t sub_1003A30B8()
{
  *(void *)&v16[0] = 0LL;
  *((void *)&v16[0] + 1) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(88LL);
  __int128 v18 = v16[0];
  v1._object = (void *)0x800000010085FA80LL;
  v1._countAndFlagsBits = 0xD000000000000027LL;
  String.append(_:)(v1);
  uint64_t v2 = type metadata accessor for UUID(0LL);
  unint64_t v3 = sub_1000F620C();
  v4._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v2, v3);
  String.append(_:)(v4);
  swift_bridgeObjectRelease();
  v5._countAndFlagsBits = 0x6E6974736564202CLL;
  v5._object = (void *)0xEF203A6E6F697461LL;
  String.append(_:)(v5);
  uint64_t v6 = (int *)type metadata accessor for LeftWhileTravelingUserNotification(0LL);
  LOBYTE(v16[0]) = *(_BYTE *)(v0 + v6[8]);
  _print_unlocked<A, B>(_:_:)( v16,  &v18,  &type metadata for UserNotificationDestination,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v7._countAndFlagsBits = 0x747865746E6F6320LL;
  v7._object = (void *)0xEA0000000000203ALL;
  String.append(_:)(v7);
  uint64_t v8 = v0 + v6[5];
  char v9 = *(_BYTE *)(v8 + 32);
  __int128 v10 = *(_OWORD *)(v8 + 16);
  v16[0] = *(_OWORD *)v8;
  v16[1] = v10;
  char v17 = v9;
  _print_unlocked<A, B>(_:_:)( v16,  &v18,  &type metadata for SeparationMonitoringBeaconsContext,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v11._countAndFlagsBits = 0x6F697461636F6C20LL;
  v11._object = (void *)0xEB00000000203A6ELL;
  String.append(_:)(v11);
  uint64_t v12 = *(void **)(v0 + v6[7]);
  [v12 coordinate];
  Double.write<A>(to:)( &v18,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v13._countAndFlagsBits = 8236LL;
  v13._object = (void *)0xE200000000000000LL;
  String.append(_:)(v13);
  [v12 coordinate];
  Double.write<A>(to:)( &v18,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v14._countAndFlagsBits = 62LL;
  v14._object = (void *)0xE100000000000000LL;
  String.append(_:)(v14);
  return v18;
}

uint64_t sub_1003A32AC(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 32)) | 0x40u;
}

uint64_t sub_1003A32C8(uint64_t a1)
{
  return *(unsigned __int8 *)(v1 + *(int *)(a1 + 32));
}

uint64_t type metadata accessor for LeftWhileTravelingUserNotification(uint64_t a1)
{
  uint64_t result = qword_1009AB0C8;
  if (!qword_1009AB0C8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for LeftWhileTravelingUserNotification);
  }
  return result;
}

unint64_t sub_1003A3314()
{
  unint64_t result = qword_1009A4778;
  if (!qword_1009A4778)
  {
    uint64_t v1 = objc_opt_self(&OBJC_CLASS___NSNull);
    unint64_t result = swift_getObjCClassMetadata(v1);
    atomic_store(result, (unint64_t *)&qword_1009A4778);
  }

  return result;
}

void *sub_1003A3350(void *a1, void *a2, int *a3)
{
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v24 = *a2;
    *a1 = *a2;
    a1 = (void *)(v24 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = a3[5];
    char v9 = (char *)a1 + v8;
    __int128 v10 = (char *)a2 + v8;
    uint64_t v11 = *(void *)v10;
    uint64_t v12 = (void *)*((void *)v10 + 1);
    uint64_t v13 = *((void *)v10 + 2);
    uint64_t v14 = *((void *)v10 + 3);
    char v15 = v10[32];
    sub_100188848(*(void *)v10, v12, v13, v14, v15);
    *(void *)char v9 = v11;
    *((void *)v9 + 1) = v12;
    *((void *)v9 + 2) = v13;
    *((void *)v9 + 3) = v14;
    v9[32] = v15;
    uint64_t v16 = a3[6];
    uint64_t v17 = a3[7];
    __int128 v18 = (void *)((char *)a1 + v16);
    uint64_t v19 = (void *)((char *)a2 + v16);
    uint64_t v20 = v19[1];
    void *v18 = *v19;
    v18[1] = v20;
    unint64_t v21 = *(void **)((char *)a2 + v17);
    *(void *)((char *)a1 + v17) = v21;
    uint64_t v22 = a3[9];
    *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
    *((_BYTE *)a1 + v22) = *((_BYTE *)a2 + v22);
    swift_bridgeObjectRetain(v20);
    id v23 = v21;
  }

  return a1;
}

void sub_1003A3458(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  uint64_t v5 = a1 + *(int *)(a2 + 20);
  sub_100187C98(*(void *)v5, *(void **)(v5 + 8), *(void *)(v5 + 16), *(void *)(v5 + 24), *(_BYTE *)(v5 + 32));
  swift_bridgeObjectRelease();
}

uint64_t sub_1003A34C4(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *(void **)(v9 + 8);
  uint64_t v12 = *(void *)(v9 + 16);
  uint64_t v13 = *(void *)(v9 + 24);
  char v14 = *(_BYTE *)(v9 + 32);
  sub_100188848(*(void *)v9, v11, v12, v13, v14);
  *(void *)uint64_t v8 = v10;
  *(void *)(v8 + 8) = v11;
  *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
  *(void *)(v8 + 24) = v13;
  *(_BYTE *)(v8 + 32) = v14;
  uint64_t v15 = a3[6];
  uint64_t v16 = a3[7];
  uint64_t v17 = (void *)(a1 + v15);
  __int128 v18 = (void *)(a2 + v15);
  uint64_t v19 = v18[1];
  *uint64_t v17 = *v18;
  v17[1] = v19;
  uint64_t v20 = *(void **)(a2 + v16);
  *(void *)(a1 + vswift_unknownObjectWeakDestroy(v0 + 16) = v20;
  uint64_t v21 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v21) = *(_BYTE *)(a2 + v21);
  swift_bridgeObjectRetain(v19);
  id v22 = v20;
  return a1;
}

uint64_t sub_1003A35A0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  uint64_t v10 = *(void *)v9;
  uint64_t v11 = *(void **)(v9 + 8);
  uint64_t v12 = *(void *)(v9 + 16);
  uint64_t v13 = *(void *)(v9 + 24);
  char v14 = *(_BYTE *)(v9 + 32);
  sub_100188848(*(void *)v9, v11, v12, v13, v14);
  uint64_t v15 = *(void *)v8;
  uint64_t v16 = *(void **)(v8 + 8);
  uint64_t v17 = *(void *)(v8 + 16);
  uint64_t v18 = *(void *)(v8 + 24);
  char v19 = *(_BYTE *)(v8 + 32);
  *(void *)uint64_t v8 = v10;
  *(void *)(v8 + 8) = v11;
  *(void *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = v12;
  *(void *)(v8 + 24) = v13;
  *(_BYTE *)(v8 + 32) = v14;
  sub_100187C98(v15, v16, v17, v18, v19);
  uint64_t v20 = a3[6];
  uint64_t v21 = (void *)(a1 + v20);
  id v22 = (void *)(a2 + v20);
  *uint64_t v21 = *v22;
  uint64_t v23 = v22[1];
  v21[1] = v23;
  swift_bridgeObjectRetain(v23);
  swift_bridgeObjectRelease();
  uint64_t v24 = a3[7];
  unint64_t v25 = *(void **)(a2 + v24);
  uint64_t v26 = *(void **)(a1 + v24);
  *(void *)(a1 + v24) = v25;
  id v27 = v25;

  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1003A36B0(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a3[6];
  uint64_t v9 = a1 + v7;
  uint64_t v10 = a2 + v7;
  __int128 v11 = *(_OWORD *)(v10 + 16);
  *(_OWORD *)uint64_t v9 = *(_OWORD *)v10;
  *(_OWORD *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = v11;
  *(_BYTE *)(v9 + 32) = *(_BYTE *)(v10 + 32);
  *(_OWORD *)(a1 + v8) = *(_OWORD *)(a2 + v8);
  uint64_t v12 = a3[8];
  *(void *)(a1 + a3[7]) = *(void *)(a2 + a3[7]);
  *(_BYTE *)(a1 + v12) = *(_BYTE *)(a2 + v12);
  *(_BYTE *)(a1 + a3[9]) = *(_BYTE *)(a2 + a3[9]);
  return a1;
}

uint64_t sub_1003A3744(uint64_t a1, uint64_t a2, int *a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = a3[5];
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  char v10 = *(_BYTE *)(v9 + 32);
  uint64_t v11 = *(void *)v8;
  uint64_t v12 = *(void **)(v8 + 8);
  uint64_t v13 = *(void *)(v8 + 16);
  uint64_t v14 = *(void *)(v8 + 24);
  char v15 = *(_BYTE *)(v8 + 32);
  __int128 v16 = *(_OWORD *)(v9 + 16);
  *(_OWORD *)uint64_t v8 = *(_OWORD *)v9;
  *(_OWORD *)(v8 + swift_unknownObjectWeakDestroy(v0 + 16) = v16;
  *(_BYTE *)(v8 + 32) = v10;
  sub_100187C98(v11, v12, v13, v14, v15);
  uint64_t v17 = a3[6];
  uint64_t v18 = (void *)(a1 + v17);
  char v19 = (uint64_t *)(a2 + v17);
  uint64_t v21 = *v19;
  uint64_t v20 = v19[1];
  void *v18 = v21;
  v18[1] = v20;
  swift_bridgeObjectRelease();
  uint64_t v22 = a3[7];
  uint64_t v23 = *(void **)(a1 + v22);
  *(void *)(a1 + v22) = *(void *)(a2 + v22);

  uint64_t v24 = a3[9];
  *(_BYTE *)(a1 + a3[8]) = *(_BYTE *)(a2 + a3[8]);
  *(_BYTE *)(a1 + v24) = *(_BYTE *)(a2 + v24);
  return a1;
}

uint64_t sub_1003A3804(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003A3810);
}

uint64_t sub_1003A3810(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 28));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_1003A388C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003A3898);
}

uint64_t sub_1003A3898(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 28)) = (a2 - 1);
  return result;
}

uint64_t sub_1003A3910(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = "!";
    v4[2] = &unk_1007FDEB0;
    v4[3] = (char *)&value witness table for Builtin.UnknownObject + 64;
    v4[4] = &unk_1007FDEC8;
    v4[5] = &unk_1007FDEE0;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

ValueMetadata *type metadata accessor for VerifyFindMyNetworkIdPayload()
{
  return &type metadata for VerifyFindMyNetworkIdPayload;
}

uint64_t sub_1003A39BC@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1003A3AF8(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

uint64_t sub_1003A39E4(void *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100012ED8(a1, v4);
  dispatch thunk of BinaryEncoding.container()(v11, v4, v5);
  v10[0] = v2;
  v10[1] = v3;
  uint64_t v6 = v12;
  uint64_t v7 = v13;
  sub_100037298((uint64_t)v11, v12);
  unint64_t v8 = sub_100042440();
  dispatch thunk of BinaryEncodingContaining.encode<A>(sequence:)(v10, &type metadata for Data, v8, v6, v7);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v11);
}

unint64_t sub_1003A3A88(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1003A3AB4();
  unint64_t result = sub_100256874();
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_1003A3AB4()
{
  unint64_t result = qword_1009AB110;
  if (!qword_1009AB110)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FDF20, &type metadata for VerifyFindMyNetworkIdPayload);
    atomic_store(result, (unint64_t *)&qword_1009AB110);
  }

  return result;
}

uint64_t sub_1003A3AF8(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  dispatch thunk of BinaryDecoding.container()(v10, v3, v4);
  uint64_t v5 = v11;
  uint64_t v6 = v12;
  sub_100037298((uint64_t)v10, v11);
  uint64_t v8 = dispatch thunk of BinaryDecodingContaining.decode(length:)(32LL, v5, v6);
  if (!v1) {
    __asm { BR              X10 }
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v10);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v8;
}

uint64_t sub_1003A3C0C()
{
  uint64_t v1 = type metadata accessor for LocalizationUtility.Table(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v18 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for PlaySoundUserNotification(0LL);
  int v6 = *(unsigned __int8 *)(v0 + *(int *)(v5 + 32));
  (*(void (**)(char *, void, uint64_t))(v2 + 104))( v4,  enum case for LocalizationUtility.Table.default(_:),  v1);
  if (v6 == 1) {
    uint64_t v7 = "PLAY_SOUND_SUCCESS_TITLE_HAWKEYE";
  }
  else {
    uint64_t v7 = "PLAY_SOUND_FAILURE_TITLE_HAWKEYE";
  }
  uint64_t v8 = static LocalizationUtility.localizedString(key:table:)( 0xD000000000000020LL,  (unint64_t)(v7 - 32) | 0x8000000000000000LL,  v4);
  uint64_t v10 = v9;
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
  *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v13 = (uint64_t *)(v0 + *(int *)(v5 + 28));
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  *(void *)(v12 + 56) = &type metadata for String;
  *(void *)(v12 + 64) = sub_1000226F4();
  *(void *)(v12 + 32) = v15;
  *(void *)(v12 + 40) = v14;
  swift_bridgeObjectRetain(v14);
  uint64_t v16 = String.init(format:arguments:)(v8, v10, v12);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v16;
}

uint64_t sub_1003A3D78()
{
  uint64_t v1 = type metadata accessor for LocalizationUtility.Table(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  __chkstk_darwin(v1);
  uint64_t v4 = (char *)&v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v5 = *(unsigned __int8 *)(v0 + 1);
  uint64_t v6 = type metadata accessor for PlaySoundUserNotification(0LL);
  uint64_t v7 = v6;
  if (v5 == 129) {
    unint64_t v8 = 0x800000010085FB40LL;
  }
  else {
    unint64_t v8 = 0x800000010085FAE0LL;
  }
  unint64_t v9 = 0x800000010085FAB0LL;
  if (v5 == 129)
  {
    unint64_t v9 = 0x800000010085FB10LL;
    unint64_t v10 = 0xD00000000000002DLL;
  }

  else
  {
    unint64_t v10 = 0xD000000000000023LL;
  }

  else {
    unint64_t v11 = v8;
  }
  swift_bridgeObjectRelease();
  (*(void (**)(char *, void, uint64_t))(v2 + 104))( v4,  enum case for LocalizationUtility.Table.default(_:),  v1);
  uint64_t v12 = static LocalizationUtility.localizedString(key:table:)(v10, v11, v4);
  uint64_t v14 = v13;
  swift_bridgeObjectRelease();
  (*(void (**)(char *, uint64_t))(v2 + 8))(v4, v1);
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
  *(_OWORD *)(v16 + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v17 = (uint64_t *)(v0 + *(int *)(v7 + 28));
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *(void *)(v16 + 56) = &type metadata for String;
  *(void *)(v16 + 64) = sub_1000226F4();
  *(void *)(v16 + 32) = v19;
  *(void *)(v16 + 40) = v18;
  swift_bridgeObjectRetain(v18);
  uint64_t v20 = String.init(format:arguments:)(v12, v14, v16);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v20;
}

uint64_t sub_1003A3F40()
{
  return *(unsigned __int8 *)(v0 + 1);
}

unint64_t sub_1003A3F50()
{
  uint64_t v0 = sub_100004AEC((uint64_t *)&unk_1009C0FA0);
  uint64_t inited = swift_initStackObject(v0, &v5);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(inited + 32) = 1684632949LL;
  *(void *)(inited + 40) = 0xE400000000000000LL;
  uint64_t v2 = UUID.uuidString.getter(inited);
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = v2;
  *(void *)(inited + 56) = v3;
  return sub_100412CF8(inited);
}

uint64_t type metadata accessor for PlaySoundUserNotification(uint64_t a1)
{
  uint64_t result = qword_1009AB170;
  if (!qword_1009AB170) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PlaySoundUserNotification);
  }
  return result;
}

void *sub_1003A4010(_WORD *a1, void *a2, int *a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*((void *)a3 - 1) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v21 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (void *)(v21 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v21);
  }

  else
  {
    *a1 = *(_WORD *)a2;
    uint64_t v7 = a3[6];
    unint64_t v8 = (char *)a1 + v7;
    unint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for UUID(0LL);
    unint64_t v11 = *(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL);
    v11(v8, v9, v10);
    uint64_t v12 = a3[7];
    uint64_t v13 = a3[8];
    uint64_t v14 = (void *)((char *)v4 + v12);
    uint64_t v15 = (void *)((char *)a2 + v12);
    uint64_t v17 = *v15;
    uint64_t v16 = v15[1];
    LOBYTE(v15) = *((_BYTE *)a2 + v13);
    *uint64_t v14 = v17;
    v14[1] = v16;
    *((_BYTE *)v4 + v13) = (_BYTE)v15;
    uint64_t v18 = a3[9];
    uint64_t v19 = (char *)v4 + v18;
    uint64_t v20 = (char *)a2 + v18;
    swift_bridgeObjectRetain(v16);
    v11(v19, v20, v10);
  }

  return v4;
}

uint64_t sub_1003A40F0(uint64_t a1, int *a2)
{
  uint64_t v4 = a1 + a2[6];
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL);
  v7(v4, v5);
  swift_bridgeObjectRelease(*(void *)(a1 + a2[7] + 8));
  return ((uint64_t (*)(uint64_t, uint64_t))v7)(a1 + a2[9], v5);
}

_WORD *sub_1003A4170(_WORD *a1, _WORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = a3[8];
  uint64_t v13 = (void *)((char *)a1 + v11);
  uint64_t v14 = (uint64_t *)((char *)a2 + v11);
  uint64_t v16 = *v14;
  uint64_t v15 = v14[1];
  LOBYTE(v14) = *((_BYTE *)a2 + v12);
  *uint64_t v13 = v16;
  v13[1] = v15;
  *((_BYTE *)a1 + v12) = (_BYTE)v14;
  uint64_t v17 = a3[9];
  uint64_t v18 = (char *)a1 + v17;
  uint64_t v19 = (char *)a2 + v17;
  swift_bridgeObjectRetain(v15);
  v10(v18, v19, v9);
  return a1;
}

_BYTE *sub_1003A4224(_BYTE *a1, _BYTE *a2, int *a3)
{
  *a1 = *a2;
  a1[1] = a2[1];
  uint64_t v6 = a3[6];
  uint64_t v7 = &a1[v6];
  unint64_t v8 = &a2[v6];
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v9 - 8) + 24LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = &a1[v11];
  uint64_t v13 = &a2[v11];
  *uint64_t v12 = *v13;
  uint64_t v14 = v13[1];
  uint64_t v15 = v12[1];
  v12[1] = v14;
  swift_bridgeObjectRetain(v14);
  swift_bridgeObjectRelease(v15);
  a1[a3[8]] = a2[a3[8]];
  v10(&a1[a3[9]], &a2[a3[9]], v9);
  return a1;
}

_WORD *sub_1003A42F0(_WORD *a1, _WORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[8];
  *(_OWORD *)((char *)a1 + a3[7]) = *(_OWORD *)((char *)a2 + a3[7]);
  *((_BYTE *)a1 + v11) = *((_BYTE *)a2 + v11);
  v10((char *)a1 + a3[9], (char *)a2 + a3[9], v9);
  return a1;
}

_WORD *sub_1003A4390(_WORD *a1, _WORD *a2, int *a3)
{
  *a1 = *a2;
  uint64_t v6 = a3[6];
  uint64_t v7 = (char *)a1 + v6;
  unint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40LL);
  v10(v7, v8, v9);
  uint64_t v11 = a3[7];
  uint64_t v12 = (void *)((char *)a1 + v11);
  uint64_t v13 = (uint64_t *)((char *)a2 + v11);
  uint64_t v15 = *v13;
  uint64_t v14 = v13[1];
  uint64_t v16 = v12[1];
  *uint64_t v12 = v15;
  v12[1] = v14;
  swift_bridgeObjectRelease(v16);
  uint64_t v17 = a3[9];
  *((_BYTE *)a1 + a3[8]) = *((_BYTE *)a2 + a3[8]);
  v10((char *)a1 + v17, (char *)a2 + v17, v9);
  return a1;
}

uint64_t sub_1003A4440(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003A444C);
}

uint64_t sub_1003A444C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 24), a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 28) + 8);
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_1003A44D0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003A44DC);
}

uint64_t sub_1003A44DC(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))( a1 + *(int *)(a4 + 24),  a2,  a2,  result);
  }
  *(void *)(a1 + *(int *)(a4 + 28) + 8) = (a2 - 1);
  return result;
}

uint64_t sub_1003A455C(uint64_t a1)
{
  v4[0] = &unk_1007FDFB0;
  v4[1] = &unk_1007FDFC8;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    uint64_t v5 = *(void *)(result - 8) + 64LL;
    uint64_t v6 = &unk_1007FDFE0;
    uint64_t v7 = &unk_1007FDFF8;
    uint64_t v8 = v5;
    swift_initStructMetadata(a1, 256LL, 6LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t *sub_1003A45EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v9 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v9 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v9);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    uint64_t v8 = *(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    v8((uint64_t *)((char *)a1 + *(int *)(a3 + 20)), (uint64_t *)((char *)a2 + *(int *)(a3 + 20)), v7);
  }

  return a1;
}

uint64_t sub_1003A4688(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v6 = *(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL);
  v6(a1, v4);
  return ((uint64_t (*)(uint64_t, uint64_t))v6)(a1 + *(int *)(a2 + 20), v4);
}

uint64_t sub_1003A46F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_1003A4760(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_1003A47D0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_1003A4840(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL);
  v7(a1, a2, v6);
  v7(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20), v6);
  return a1;
}

uint64_t sub_1003A48B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003A48BC);
}

uint64_t sub_1003A48BC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t sub_1003A48F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003A4904);
}

uint64_t sub_1003A4904(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t type metadata accessor for BeaconIdentifier(uint64_t a1)
{
  uint64_t result = qword_1009AB210;
  if (!qword_1009AB210) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for BeaconIdentifier);
  }
  return result;
}

uint64_t sub_1003A4980(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = v4[0];
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1003A49E8(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009AB260);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v16 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1003A51AC();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for BeaconIdentifier.CodingKeys,  &type metadata for BeaconIdentifier.CodingKeys,  v11,  v9,  v10);
  char v18 = 0;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  KeyedEncodingContainer.encode<A>(_:forKey:)(v3, &v18, v5, v12, v13);
  if (!v2)
  {
    uint64_t v14 = v3 + *(int *)(type metadata accessor for BeaconIdentifier(0LL) + 20);
    char v17 = 1;
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v17, v5, v12, v13);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1003A4B44@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v28 = a2;
  uint64_t v32 = type metadata accessor for UUID(0LL);
  uint64_t v30 = *(void *)(v32 - 8);
  uint64_t v4 = __chkstk_darwin(v32);
  uint64_t v29 = (char *)&v26 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  uint64_t v31 = (uint64_t *)((char *)&v26 - v6);
  uint64_t v33 = sub_100004AEC(&qword_1009AB250);
  uint64_t v7 = *(void *)(v33 - 8);
  __chkstk_darwin(v33);
  uint64_t v9 = (char *)&v26 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for BeaconIdentifier(0LL);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v26 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v14);
  unint64_t v15 = sub_1003A51AC();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for BeaconIdentifier.CodingKeys,  &type metadata for BeaconIdentifier.CodingKeys,  v15,  v14,  v13);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v26 = v10;
  id v27 = a1;
  uint64_t v16 = v7;
  uint64_t v17 = (uint64_t)v12;
  uint64_t v19 = v29;
  uint64_t v18 = v30;
  char v35 = 0;
  uint64_t v20 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v21 = v31;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v31, v32, &v35, v33, v32, v20);
  uint64_t v22 = v21;
  uint64_t v23 = *(void (**)(uint64_t, void *, uint64_t))(v18 + 32);
  uint64_t v24 = v32;
  v23(v17, v22, v32);
  char v34 = 1;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v19, v24, &v34, v33, v24, v20);
  (*(void (**)(char *, uint64_t))(v16 + 8))(v9, v33);
  v23(v17 + *(int *)(v26 + 20), v19, v32);
  sub_100164D58(v17, v28);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
  return sub_100164D9C(v17);
}

uint64_t sub_1003A4DEC()
{
  if (*v0) {
    return 0xD000000000000010LL;
  }
  else {
    return 0x6E65644972657375LL;
  }
}

uint64_t sub_1003A4E38@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1003A5394(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003A4E5C(uint64_t a1)
{
  unint64_t v2 = sub_1003A51AC();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003A4E84(uint64_t a1)
{
  unint64_t v2 = sub_1003A51AC();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003A4EAC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003A4B44(a1, a2);
}

uint64_t sub_1003A4EC0(void *a1)
{
  return sub_1003A49E8(a1);
}

Swift::Int sub_1003A4ED4()
{
  uint64_t v0 = type metadata accessor for UUID(0LL);
  uint64_t v1 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  dispatch thunk of Hashable.hash(into:)(v3, v0, v1);
  return Hasher._finalize()();
}

uint64_t sub_1003A4F68(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  uint64_t v3 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
  return dispatch thunk of Hashable.hash(into:)(a1, v2, v3);
}

Swift::Int sub_1003A4FEC(uint64_t a1)
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  dispatch thunk of Hashable.hash(into:)(v4, v1, v2);
  return Hasher._finalize()();
}

uint64_t sub_1003A507C()
{
  uint64_t v0 = type metadata accessor for UUID(0LL);
  uint64_t v1 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v5 = dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
  v2._countAndFlagsBits = 47LL;
  v2._object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  v3._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v1);
  String.append(_:)(v3);
  swift_bridgeObjectRelease();
  return v5;
}

uint64_t sub_1003A512C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static UUID.== infix(_:_:)(a1, a2) & 1) != 0) {
    return static UUID.== infix(_:_:)(a1 + *(int *)(a3 + 20), a2 + *(int *)(a3 + 20));
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1003A5180()
{
  return sub_100007864(&qword_1009AB248, type metadata accessor for BeaconIdentifier, (uint64_t)&unk_1007FE044);
}

unint64_t sub_1003A51AC()
{
  unint64_t result = qword_1009AB258;
  if (!qword_1009AB258)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FE1E8, &type metadata for BeaconIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AB258);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for BeaconIdentifier.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1003A523C + 4 * byte_1007FE025[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1003A5270 + 4 * byte_1007FE020[v4]))();
}

uint64_t sub_1003A5270(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003A5278(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1003A5280LL);
  }
  return result;
}

uint64_t sub_1003A528C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1003A5294LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1003A5298(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003A52A0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconIdentifier.CodingKeys()
{
  return &type metadata for BeaconIdentifier.CodingKeys;
}

unint64_t sub_1003A52C0()
{
  unint64_t result = qword_1009AB268;
  if (!qword_1009AB268)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FE1C0, &type metadata for BeaconIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AB268);
  }

  return result;
}

unint64_t sub_1003A5308()
{
  unint64_t result = qword_1009AB270;
  if (!qword_1009AB270)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FE130, &type metadata for BeaconIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AB270);
  }

  return result;
}

unint64_t sub_1003A5350()
{
  unint64_t result = qword_1009AB278;
  if (!qword_1009AB278)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FE158, &type metadata for BeaconIdentifier.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AB278);
  }

  return result;
}

uint64_t sub_1003A5394(uint64_t a1, unint64_t a2)
{
  if (a1 == 0x6E65644972657375LL && a2 == 0xEE00726569666974LL)
  {
    unint64_t v5 = 0xEE00726569666974LL;
    goto LABEL_8;
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0x6E65644972657375LL, 0xEE00726569666974LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v5 = a2;
LABEL_8:
    swift_bridgeObjectRelease(v5);
    return 0LL;
  }

  if (a1 == 0xD000000000000010LL && a2 == 0x800000010084D8A0LL)
  {
    swift_bridgeObjectRelease(0x800000010084D8A0LL);
    return 1LL;
  }

  else
  {
    char v7 = _stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x800000010084D8A0LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v7 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

void *sub_1003A54A4(uint64_t a1, uint64_t *a2, uint64_t a3)
{
  int v3 = (void *)a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *int v3 = *a2;
    int v3 = (void *)(v15 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain();
  }

  else
  {
    uint64_t v5 = a2[1];
    *(void *)a1 = *a2;
    *(void *)(a1 + 8) = v5;
    *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *((_OWORD *)a2 + 1);
    uint64_t v6 = a2[4];
    *(void *)(a1 + 32) = v6;
    uint64_t v7 = *(int *)(a3 + 28);
    uint64_t v8 = (_BYTE *)(a1 + v7);
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = (int *)type metadata accessor for AccessoryProductInfo(0LL);
    uint64_t v11 = *((void *)v10 - 1);
    uint64_t v12 = *(unsigned int (**)(_BYTE *, uint64_t, int *, __n128))(v11 + 48);
    swift_bridgeObjectRetain(v5);
    __n128 v13 = swift_bridgeObjectRetain(v6);
    if (v12(v9, 1LL, v10, v13))
    {
      uint64_t v14 = sub_100004AEC(&qword_10099CE68);
      memcpy(v8, v9, *(void *)(*(void *)(v14 - 8) + 64LL));
    }

    else
    {
      uint64_t v149 = v3;
      uint64_t v150 = v11;
      *(void *)uint64_t v8 = *(void *)v9;
      v8[8] = v9[8];
      uint64_t v16 = v10[5];
      uint64_t v17 = &v8[v16];
      uint64_t v18 = &v9[v16];
      uint64_t v19 = type metadata accessor for ServerStatusCode(0LL);
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v19 - 8) + 16LL))(v17, v18, v19);
      v8[v10[6]] = v9[v10[6]];
      v8[v10[7]] = v9[v10[7]];
      uint64_t v20 = v10[8];
      uint64_t v21 = &v8[v20];
      uint64_t v22 = &v9[v20];
      uint64_t v147 = v22[1];
      *uint64_t v21 = *v22;
      v21[1] = v147;
      v8[v10[9]] = v9[v10[9]];
      v8[v10[10]] = v9[v10[10]];
      v8[v10[11]] = v9[v10[11]];
      uint64_t v23 = v10[12];
      uint64_t v24 = &v8[v23];
      unint64_t v25 = &v9[v23];
      uint64_t v26 = v25[1];
      *uint64_t v24 = *v25;
      v24[1] = v26;
      uint64_t v27 = v10[13];
      uint64_t v28 = &v8[v27];
      uint64_t v29 = &v9[v27];
      uint64_t v30 = v29[1];
      *uint64_t v28 = *v29;
      v28[1] = v30;
      uint64_t v31 = v10[14];
      uint64_t v32 = &v8[v31];
      uint64_t v33 = &v9[v31];
      *(void *)uint64_t v32 = *(void *)v33;
      v32[8] = v33[8];
      uint64_t v34 = v10[15];
      char v35 = &v8[v34];
      uint64_t v36 = &v9[v34];
      uint64_t v37 = v36[1];
      void *v35 = *v36;
      v35[1] = v37;
      uint64_t v38 = v10[16];
      __dst = &v8[v38];
      char v39 = &v9[v38];
      uint64_t v40 = type metadata accessor for URL(0LL);
      uint64_t v41 = *(void *)(v40 - 8);
      uint64_t v42 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t, __n128))(v41 + 48);
      swift_bridgeObjectRetain(v147);
      swift_bridgeObjectRetain(v26);
      swift_bridgeObjectRetain(v30);
      __n128 v43 = swift_bridgeObjectRetain(v37);
      if (v42(v39, 1LL, v40, v43))
      {
        uint64_t v44 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(__dst, v39, *(void *)(*(void *)(v44 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v41 + 16))(__dst, v39, v40);
        (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v41 + 56))(__dst, 0LL, 1LL, v40);
      }

      uint64_t v45 = v10[17];
      uint64_t v46 = &v8[v45];
      uint64_t v47 = &v9[v45];
      uint64_t v151 = v41;
      uint64_t v152 = v40;
      if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v42)(&v9[v45], 1LL, v40))
      {
        uint64_t v48 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v46, v47, *(void *)(*(void *)(v48 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v41 + 16))(v46, v47, v40);
        (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v41 + 56))(v46, 0LL, 1LL, v40);
      }

      uint64_t v49 = v10[18];
      uint64_t v50 = &v8[v49];
      uint64_t v51 = &v9[v49];
      uint64_t v52 = v51[1];
      *uint64_t v50 = *v51;
      v50[1] = v52;
      *(void *)&v8[v10[19]] = *(void *)&v9[v10[19]];
      uint64_t v53 = v10[20];
      uint64_t v54 = &v8[v53];
      uint64_t v55 = &v9[v53];
      uint64_t v56 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
      uint64_t v57 = (void *)*((void *)v56 - 1);
      uint64_t v58 = (unsigned int (*)(void *, uint64_t, int *, __n128))v57[6];
      __n128 v59 = swift_bridgeObjectRetain(v52);
      if (v58(v55, 1LL, v56, v59))
      {
        uint64_t v60 = sub_100004AEC(&qword_1009A6DD0);
        memcpy(v54, v55, *(void *)(*(void *)(v60 - 8) + 64LL));
      }

      else
      {
        __dsta = v57;
        uint64_t v148 = v42;
        uint64_t v61 = v55[1];
        *uint64_t v54 = *v55;
        v54[1] = v61;
        uint64_t v62 = v55[3];
        v54[2] = v55[2];
        v54[3] = v62;
        uint64_t v63 = v55[5];
        v54[4] = v55[4];
        v54[5] = v63;
        *((_WORD *)v54 + 24) = *((_WORD *)v55 + 24);
        *((_BYTE *)v54 + 72) = *((_BYTE *)v55 + 72);
        uint64_t v64 = v55[8];
        v54[7] = v55[7];
        v54[8] = v64;
        uint64_t v65 = v56[10];
        uint64_t v66 = (char *)v54 + v65;
        int v67 = (char *)v55 + v65;
        swift_bridgeObjectRetain(v61);
        swift_bridgeObjectRetain(v62);
        __n128 v68 = swift_bridgeObjectRetain(v63);
        if (v148(v67, 1LL, v152, v68))
        {
          uint64_t v69 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
          memcpy(v66, v67, *(void *)(*(void *)(v69 - 8) + 64LL));
          uint64_t v70 = v151;
        }

        else
        {
          char v71 = v66;
          uint64_t v70 = v151;
          (*(void (**)(char *, char *, uint64_t))(v151 + 16))(v71, v67, v152);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v151 + 56))(v71, 0LL, 1LL, v152);
        }

        uint64_t v72 = v56[11];
        uint64_t v73 = (char *)v54 + v72;
        uint64_t v74 = (char *)v55 + v72;
        if (((unsigned int (*)(char *, uint64_t, uint64_t))v148)((char *)v55 + v72, 1LL, v152))
        {
          uint64_t v75 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
          memcpy(v73, v74, *(void *)(*(void *)(v75 - 8) + 64LL));
        }

        else
        {
          (*(void (**)(char *, char *, uint64_t))(v70 + 16))(v73, v74, v152);
          (*(void (**)(char *, void, uint64_t, uint64_t))(v70 + 56))(v73, 0LL, 1LL, v152);
        }

        uint64_t v76 = v56[12];
        uint64_t v77 = (char *)v54 + v76;
        uint64_t v78 = (char *)v55 + v76;
        *(void *)uint64_t v77 = *(void *)v78;
        v77[8] = v78[8];
        uint64_t v79 = v56[13];
        uint64_t v80 = (void *)((char *)v54 + v79);
        uint64_t v81 = (void *)((char *)v55 + v79);
        uint64_t v82 = v81[1];
        *uint64_t v80 = *v81;
        v80[1] = v82;
        uint64_t v83 = v56[14];
        uint64_t v84 = *(void *)((char *)v55 + v83);
        *(void *)((char *)v54 + v83) = v84;
        uint64_t v85 = v56[15];
        uint64_t v86 = (void *)((char *)v54 + v85);
        uint64_t v87 = (void *)((char *)v55 + v85);
        uint64_t v88 = v87[1];
        *uint64_t v86 = *v87;
        v86[1] = v88;
        uint64_t v89 = v56[16];
        uint64_t v90 = *(void *)((char *)v55 + v89);
        *(void *)((char *)v54 + v89) = v90;
        uint64_t v91 = v56[17];
        char v92 = (char *)v54 + v91;
        uint64_t v93 = (char *)v55 + v91;
        *(_OWORD *)char v92 = *(_OWORD *)v93;
        v92[16] = v93[16];
        uint64_t v94 = v56[18];
        uint64_t v95 = (char *)v54 + v94;
        uint64_t v96 = (char *)v55 + v94;
        *(_OWORD *)uint64_t v95 = *(_OWORD *)v96;
        v95[16] = v96[16];
        uint64_t v97 = (void (*)(void *, void, uint64_t, int *, __n128))__dsta[7];
        swift_bridgeObjectRetain(v82);
        swift_bridgeObjectRetain(v84);
        swift_bridgeObjectRetain(v88);
        __n128 v98 = swift_bridgeObjectRetain(v90);
        v97(v54, 0LL, 1LL, v56, v98);
      }

      *(_DWORD *)&v8[v10[21]] = *(_DWORD *)&v9[v10[21]];
      uint64_t v99 = v10[22];
      uint64_t v100 = *(void *)&v9[v99];
      *(void *)&v8[v99] = v100;
      uint64_t v101 = v10[23];
      char v102 = &v8[v101];
      char v103 = &v9[v101];
      unint64_t v104 = *(void *)&v9[v101 + 8];
      swift_bridgeObjectRetain(v100);
      if (v104 >> 60 == 15)
      {
        *(_OWORD *)char v102 = *v103;
      }

      else
      {
        uint64_t v105 = *(void *)v103;
        sub_10001736C(v105, v104);
        *(void *)char v102 = v105;
        *((void *)v102 + 1) = v104;
      }

      uint64_t v106 = v10[24];
      uint64_t v107 = &v8[v106];
      uint64_t v108 = &v9[v106];
      unint64_t v109 = *((void *)v108 + 1);
      if (v109 >> 60 == 15)
      {
        *(_OWORD *)uint64_t v107 = *(_OWORD *)v108;
      }

      else
      {
        uint64_t v110 = *(void *)v108;
        sub_10001736C(*(void *)v108, *((void *)v108 + 1));
        *(void *)uint64_t v107 = v110;
        *((void *)v107 + 1) = v109;
      }

      uint64_t v111 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v151 + 16);
      v111(&v8[v10[25]], &v9[v10[25]], v152);
      v111(&v8[v10[26]], &v9[v10[26]], v152);
      v111(&v8[v10[27]], &v9[v10[27]], v152);
      v111(&v8[v10[28]], &v9[v10[28]], v152);
      v111(&v8[v10[29]], &v9[v10[29]], v152);
      v111(&v8[v10[30]], &v9[v10[30]], v152);
      uint64_t v112 = v10[31];
      uint64_t v113 = &v8[v112];
      BOOL v114 = &v9[v112];
      uint64_t v115 = v114[1];
      *uint64_t v113 = *v114;
      v113[1] = v115;
      uint64_t v116 = v10[32];
      uint64_t v117 = *(void *)&v9[v116];
      *(void *)&v8[v116] = v117;
      uint64_t v118 = v10[33];
      uint64_t v119 = &v8[v118];
      uint64_t v120 = &v9[v118];
      uint64_t v121 = v120[1];
      *uint64_t v119 = *v120;
      v119[1] = v121;
      uint64_t v122 = v10[34];
      uint64_t v123 = *(void *)&v9[v122];
      *(void *)&v8[v122] = v123;
      uint64_t v124 = v10[35];
      uint64_t v125 = &v8[v124];
      uint64_t v126 = &v9[v124];
      *(_OWORD *)uint64_t v125 = *(_OWORD *)v126;
      v125[16] = v126[16];
      uint64_t v127 = v10[36];
      uint64_t v128 = &v8[v127];
      uint64_t v129 = &v9[v127];
      *(_OWORD *)uint64_t v128 = *(_OWORD *)v129;
      v128[16] = v129[16];
      uint64_t v130 = v10[37];
      uint64_t v131 = &v8[v130];
      uint64_t v132 = &v9[v130];
      swift_bridgeObjectRetain(v115);
      swift_bridgeObjectRetain(v117);
      swift_bridgeObjectRetain(v121);
      __n128 v133 = swift_bridgeObjectRetain(v123);
      ((void (*)(_BYTE *, _BYTE *, uint64_t, __n128))v111)(v131, v132, v152, v133);
      v111(&v8[v10[38]], &v9[v10[38]], v152);
      v111(&v8[v10[39]], &v9[v10[39]], v152);
      v111(&v8[v10[40]], &v9[v10[40]], v152);
      v111(&v8[v10[41]], &v9[v10[41]], v152);
      v111(&v8[v10[42]], &v9[v10[42]], v152);
      v8[v10[43]] = v9[v10[43]];
      v8[v10[44]] = v9[v10[44]];
      v8[v10[45]] = v9[v10[45]];
      uint64_t v134 = v10[46];
      uint64_t v135 = &v8[v134];
      uint64_t v136 = &v9[v134];
      uint64_t v137 = v136[1];
      *uint64_t v135 = *v136;
      v135[1] = v137;
      uint64_t v138 = v10[47];
      uint64_t v139 = &v8[v138];
      uint64_t v140 = &v9[v138];
      uint64_t v141 = v140[1];
      *uint64_t v139 = *v140;
      v139[1] = v141;
      uint64_t v142 = *(void (**)(_BYTE *, void, uint64_t, int *, __n128))(v150 + 56);
      swift_bridgeObjectRetain(v137);
      __n128 v143 = swift_bridgeObjectRetain(v141);
      v142(v8, 0LL, 1LL, v10, v143);
      return v149;
    }
  }

  return v3;
}

uint64_t sub_1003A5CD4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 28);
  uint64_t v5 = (int *)type metadata accessor for AccessoryProductInfo(0LL);
  uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, int *))(*((void *)v5 - 1) + 48LL))(v4, 1LL, v5);
  if (!(_DWORD)result)
  {
    uint64_t v7 = v4 + v5[5];
    uint64_t v8 = type metadata accessor for ServerStatusCode(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v9 = v4 + v5[16];
    uint64_t v10 = type metadata accessor for URL(0LL);
    uint64_t v11 = *(void *)(v10 - 8);
    uint64_t v12 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v11 + 48);
    if (!v12(v9, 1LL, v10)) {
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v9, v10);
    }
    uint64_t v13 = v4 + v5[17];
    if (!v12(v13, 1LL, v10)) {
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v13, v10);
    }
    swift_bridgeObjectRelease();
    uint64_t v14 = v4 + v5[20];
    uint64_t v15 = type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
    if (!(*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 48LL))(v14, 1LL, v15))
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      uint64_t v16 = v14 + *(int *)(v15 + 40);
      if (!v12(v16, 1LL, v10)) {
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v16, v10);
      }
      uint64_t v17 = v14 + *(int *)(v15 + 44);
      if (!v12(v17, 1LL, v10)) {
        (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v17, v10);
      }
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
    }

    swift_bridgeObjectRelease();
    uint64_t v18 = (uint64_t *)(v4 + v5[23]);
    unint64_t v19 = v18[1];
    if (v19 >> 60 != 15) {
      sub_100016F9C(*v18, v19);
    }
    uint64_t v20 = (uint64_t *)(v4 + v5[24]);
    unint64_t v21 = v20[1];
    if (v21 >> 60 != 15) {
      sub_100016F9C(*v20, v21);
    }
    uint64_t v22 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
    v22(v4 + v5[25], v10);
    v22(v4 + v5[26], v10);
    v22(v4 + v5[27], v10);
    v22(v4 + v5[28], v10);
    v22(v4 + v5[29], v10);
    v22(v4 + v5[30], v10);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    v22(v4 + v5[37], v10);
    v22(v4 + v5[38], v10);
    v22(v4 + v5[39], v10);
    v22(v4 + v5[40], v10);
    v22(v4 + v5[41], v10);
    v22(v4 + v5[42], v10);
    swift_bridgeObjectRelease();
    return swift_bridgeObjectRelease();
  }

  return result;
}

uint64_t sub_1003A6080(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v3 = a1;
  uint64_t v4 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  uint64_t v5 = *(void *)(a2 + 32);
  *(void *)(a1 + 32) = v5;
  uint64_t v6 = *(int *)(a3 + 28);
  uint64_t v7 = (_BYTE *)(a1 + v6);
  uint64_t v8 = (_BYTE *)(a2 + v6);
  uint64_t v9 = (int *)type metadata accessor for AccessoryProductInfo(0LL);
  uint64_t v10 = *((void *)v9 - 1);
  uint64_t v11 = *(unsigned int (**)(_BYTE *, uint64_t, int *, __n128))(v10 + 48);
  swift_bridgeObjectRetain(v4);
  __n128 v12 = swift_bridgeObjectRetain(v5);
  if (v11(v8, 1LL, v9, v12))
  {
    uint64_t v13 = sub_100004AEC(&qword_10099CE68);
    memcpy(v7, v8, *(void *)(*(void *)(v13 - 8) + 64LL));
  }

  else
  {
    uint64_t v149 = v10;
    uint64_t v150 = v3;
    *(void *)uint64_t v7 = *(void *)v8;
    v7[8] = v8[8];
    uint64_t v14 = v9[5];
    uint64_t v15 = &v7[v14];
    uint64_t v16 = &v8[v14];
    uint64_t v17 = type metadata accessor for ServerStatusCode(0LL);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v17 - 8) + 16LL))(v15, v16, v17);
    v7[v9[6]] = v8[v9[6]];
    v7[v9[7]] = v8[v9[7]];
    uint64_t v18 = v9[8];
    unint64_t v19 = &v7[v18];
    uint64_t v20 = &v8[v18];
    uint64_t v145 = (void *)v20[1];
    *unint64_t v19 = *v20;
    v19[1] = v145;
    v7[v9[9]] = v8[v9[9]];
    v7[v9[10]] = v8[v9[10]];
    v7[v9[11]] = v8[v9[11]];
    uint64_t v21 = v9[12];
    uint64_t v22 = &v7[v21];
    uint64_t v23 = &v8[v21];
    uint64_t v24 = v23[1];
    *uint64_t v22 = *v23;
    v22[1] = v24;
    uint64_t v25 = v9[13];
    uint64_t v26 = &v7[v25];
    uint64_t v27 = &v8[v25];
    uint64_t v28 = v27[1];
    void *v26 = *v27;
    v26[1] = v28;
    uint64_t v29 = v9[14];
    uint64_t v30 = &v7[v29];
    uint64_t v31 = &v8[v29];
    *(void *)uint64_t v30 = *(void *)v31;
    v30[8] = v31[8];
    uint64_t v32 = v9[15];
    uint64_t v33 = &v7[v32];
    uint64_t v34 = &v8[v32];
    uint64_t v35 = v34[1];
    *uint64_t v33 = *v34;
    v33[1] = v35;
    uint64_t v36 = v9[16];
    __dst = &v7[v36];
    uint64_t v37 = &v8[v36];
    uint64_t v38 = type metadata accessor for URL(0LL);
    uint64_t v39 = *(void *)(v38 - 8);
    uint64_t v40 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v39 + 48);
    swift_bridgeObjectRetain(v145);
    swift_bridgeObjectRetain(v24);
    swift_bridgeObjectRetain(v28);
    uint64_t v41 = v35;
    uint64_t v42 = v40;
    __n128 v43 = swift_bridgeObjectRetain(v41);
    if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t, __n128))v40)(v37, 1LL, v38, v43))
    {
      uint64_t v44 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(__dst, v37, *(void *)(*(void *)(v44 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v39 + 16))(__dst, v37, v38);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v39 + 56))(__dst, 0LL, 1LL, v38);
    }

    uint64_t v45 = v39;
    uint64_t v46 = v9[17];
    uint64_t v47 = &v7[v46];
    uint64_t v48 = &v8[v46];
    uint64_t v151 = v45;
    uint64_t v144 = v42;
    if (v42(&v8[v46], 1LL, v38))
    {
      uint64_t v49 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v47, v48, *(void *)(*(void *)(v49 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v45 + 16))(v47, v48, v38);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v45 + 56))(v47, 0LL, 1LL, v38);
    }

    uint64_t v50 = v9[18];
    uint64_t v51 = &v7[v50];
    uint64_t v52 = &v8[v50];
    uint64_t v53 = v52[1];
    *uint64_t v51 = *v52;
    v51[1] = v53;
    *(void *)&v7[v9[19]] = *(void *)&v8[v9[19]];
    uint64_t v54 = v9[20];
    uint64_t v55 = &v7[v54];
    uint64_t v56 = &v8[v54];
    uint64_t v57 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
    uint64_t v58 = (void *)*((void *)v57 - 1);
    __n128 v59 = (unsigned int (*)(void *, uint64_t, int *, __n128))v58[6];
    __n128 v60 = swift_bridgeObjectRetain(v53);
    if (v59(v56, 1LL, v57, v60))
    {
      uint64_t v61 = sub_100004AEC(&qword_1009A6DD0);
      memcpy(v55, v56, *(void *)(*(void *)(v61 - 8) + 64LL));
    }

    else
    {
      __dsta = v58;
      uint64_t v62 = v56[1];
      *uint64_t v55 = *v56;
      v55[1] = v62;
      uint64_t v63 = v56[3];
      v55[2] = v56[2];
      v55[3] = v63;
      uint64_t v64 = v56[5];
      v55[4] = v56[4];
      v55[5] = v64;
      *((_WORD *)v55 + 24) = *((_WORD *)v56 + 24);
      *((_BYTE *)v55 + 72) = *((_BYTE *)v56 + 72);
      uint64_t v65 = v56[8];
      v55[7] = v56[7];
      v55[8] = v65;
      uint64_t v66 = v57[10];
      uint64_t v146 = (char *)v55 + v66;
      int v67 = (char *)v56 + v66;
      swift_bridgeObjectRetain(v62);
      swift_bridgeObjectRetain(v63);
      __n128 v68 = swift_bridgeObjectRetain(v64);
      uint64_t v69 = v144;
      if (((unsigned int (*)(char *, uint64_t, uint64_t, __n128))v144)(v67, 1LL, v38, v68))
      {
        uint64_t v70 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v146, v67, *(void *)(*(void *)(v70 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v151 + 16))(v146, v67, v38);
        uint64_t v69 = v144;
        (*(void (**)(char *, void, uint64_t, uint64_t))(v151 + 56))(v146, 0LL, 1LL, v38);
      }

      uint64_t v71 = v57[11];
      uint64_t v72 = (char *)v55 + v71;
      uint64_t v73 = (char *)v56 + v71;
      if (v69((char *)v56 + v71, 1LL, v38))
      {
        uint64_t v74 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(v72, v73, *(void *)(*(void *)(v74 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v151 + 16))(v72, v73, v38);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v151 + 56))(v72, 0LL, 1LL, v38);
      }

      uint64_t v75 = v57[12];
      uint64_t v76 = (char *)v55 + v75;
      uint64_t v77 = (char *)v56 + v75;
      *(void *)uint64_t v76 = *(void *)v77;
      v76[8] = v77[8];
      uint64_t v78 = v57[13];
      uint64_t v79 = (void *)((char *)v55 + v78);
      uint64_t v80 = (void *)((char *)v56 + v78);
      uint64_t v81 = v80[1];
      *uint64_t v79 = *v80;
      v79[1] = v81;
      uint64_t v82 = v57[14];
      uint64_t v83 = *(void *)((char *)v56 + v82);
      *(void *)((char *)v55 + v82) = v83;
      uint64_t v84 = v57[15];
      uint64_t v85 = (void *)((char *)v55 + v84);
      uint64_t v86 = (void *)((char *)v56 + v84);
      uint64_t v87 = v86[1];
      void *v85 = *v86;
      v85[1] = v87;
      uint64_t v88 = v57[16];
      uint64_t v89 = *(void *)((char *)v56 + v88);
      *(void *)((char *)v55 + v88) = v89;
      uint64_t v90 = v57[17];
      uint64_t v91 = (char *)v55 + v90;
      char v92 = (char *)v56 + v90;
      *(_OWORD *)uint64_t v91 = *(_OWORD *)v92;
      v91[16] = v92[16];
      uint64_t v93 = v57[18];
      uint64_t v94 = (char *)v55 + v93;
      uint64_t v95 = (char *)v56 + v93;
      *(_OWORD *)uint64_t v94 = *(_OWORD *)v95;
      v94[16] = v95[16];
      uint64_t v96 = (void (*)(void *, void, uint64_t, int *, __n128))__dsta[7];
      swift_bridgeObjectRetain(v81);
      swift_bridgeObjectRetain(v83);
      swift_bridgeObjectRetain(v87);
      __n128 v97 = swift_bridgeObjectRetain(v89);
      v96(v55, 0LL, 1LL, v57, v97);
    }

    *(_DWORD *)&v7[v9[21]] = *(_DWORD *)&v8[v9[21]];
    uint64_t v98 = v9[22];
    uint64_t v99 = *(void *)&v8[v98];
    *(void *)&v7[v98] = v99;
    uint64_t v100 = v9[23];
    uint64_t v101 = &v7[v100];
    char v102 = &v8[v100];
    unint64_t v103 = *(void *)&v8[v100 + 8];
    swift_bridgeObjectRetain(v99);
    if (v103 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v101 = *v102;
    }

    else
    {
      uint64_t v104 = *(void *)v102;
      sub_10001736C(v104, v103);
      *(void *)uint64_t v101 = v104;
      *((void *)v101 + 1) = v103;
    }

    uint64_t v105 = v9[24];
    uint64_t v106 = &v7[v105];
    uint64_t v107 = &v8[v105];
    unint64_t v108 = *((void *)v107 + 1);
    if (v108 >> 60 == 15)
    {
      *(_OWORD *)uint64_t v106 = *(_OWORD *)v107;
    }

    else
    {
      uint64_t v109 = *(void *)v107;
      sub_10001736C(*(void *)v107, *((void *)v107 + 1));
      *(void *)uint64_t v106 = v109;
      *((void *)v106 + 1) = v108;
    }

    uint64_t v110 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v151 + 16);
    v110(&v7[v9[25]], &v8[v9[25]], v38);
    v110(&v7[v9[26]], &v8[v9[26]], v38);
    v110(&v7[v9[27]], &v8[v9[27]], v38);
    v110(&v7[v9[28]], &v8[v9[28]], v38);
    v110(&v7[v9[29]], &v8[v9[29]], v38);
    v110(&v7[v9[30]], &v8[v9[30]], v38);
    uint64_t v111 = v9[31];
    uint64_t v112 = &v7[v111];
    uint64_t v113 = &v8[v111];
    uint64_t v114 = v113[1];
    void *v112 = *v113;
    v112[1] = v114;
    uint64_t v115 = v9[32];
    uint64_t v116 = *(void *)&v8[v115];
    *(void *)&v7[v115] = v116;
    uint64_t v117 = v9[33];
    uint64_t v118 = &v7[v117];
    uint64_t v119 = &v8[v117];
    uint64_t v120 = v119[1];
    *uint64_t v118 = *v119;
    v118[1] = v120;
    uint64_t v121 = v9[34];
    uint64_t v122 = *(void *)&v8[v121];
    *(void *)&v7[v121] = v122;
    uint64_t v123 = v9[35];
    uint64_t v124 = &v7[v123];
    uint64_t v125 = &v8[v123];
    *(_OWORD *)uint64_t v124 = *(_OWORD *)v125;
    v124[16] = v125[16];
    uint64_t v126 = v9[36];
    uint64_t v127 = &v7[v126];
    uint64_t v128 = &v8[v126];
    *(_OWORD *)uint64_t v127 = *(_OWORD *)v128;
    v127[16] = v128[16];
    uint64_t v129 = v9[37];
    uint64_t v130 = &v7[v129];
    uint64_t v131 = &v8[v129];
    swift_bridgeObjectRetain(v114);
    swift_bridgeObjectRetain(v116);
    swift_bridgeObjectRetain(v120);
    __n128 v132 = swift_bridgeObjectRetain(v122);
    ((void (*)(_BYTE *, _BYTE *, uint64_t, __n128))v110)(v130, v131, v38, v132);
    v110(&v7[v9[38]], &v8[v9[38]], v38);
    v110(&v7[v9[39]], &v8[v9[39]], v38);
    v110(&v7[v9[40]], &v8[v9[40]], v38);
    v110(&v7[v9[41]], &v8[v9[41]], v38);
    v110(&v7[v9[42]], &v8[v9[42]], v38);
    v7[v9[43]] = v8[v9[43]];
    v7[v9[44]] = v8[v9[44]];
    v7[v9[45]] = v8[v9[45]];
    uint64_t v133 = v9[46];
    uint64_t v134 = &v7[v133];
    uint64_t v135 = &v8[v133];
    uint64_t v136 = v135[1];
    *uint64_t v134 = *v135;
    v134[1] = v136;
    uint64_t v137 = v9[47];
    uint64_t v138 = &v7[v137];
    uint64_t v139 = &v8[v137];
    uint64_t v140 = v139[1];
    void *v138 = *v139;
    v138[1] = v140;
    uint64_t v141 = *(void (**)(_BYTE *, void, uint64_t, int *, __n128))(v149 + 56);
    swift_bridgeObjectRetain(v136);
    __n128 v142 = swift_bridgeObjectRetain(v140);
    v141(v7, 0LL, 1LL, v9, v142);
    return v150;
  }

  return v3;
}

void *sub_1003A688C(void *a1, void *a2, uint64_t a3)
{
  uint64_t v5 = a1;
  *a1 = *a2;
  uint64_t v6 = a2[1];
  v5[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  v5[2] = a2[2];
  v5[3] = a2[3];
  uint64_t v7 = a2[4];
  v5[4] = v7;
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRelease();
  uint64_t v8 = *(int *)(a3 + 28);
  uint64_t v9 = (char *)v5 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = (int *)type metadata accessor for AccessoryProductInfo(0LL);
  __n128 v12 = (void *)*((void *)v11 - 1);
  uint64_t v13 = (uint64_t (*)(_BYTE *, uint64_t, int *))v12[6];
  int v14 = v13(v9, 1LL, v11);
  int v15 = v13(v10, 1LL, v11);
  if (!v14)
  {
    if (v15)
    {
      sub_100018C68((uint64_t)v9, type metadata accessor for AccessoryProductInfo);
      goto LABEL_7;
    }

    uint64_t v50 = *(void *)v10;
    v9[8] = v10[8];
    *(void *)uint64_t v9 = v50;
    uint64_t v51 = v11[5];
    uint64_t v52 = &v9[v51];
    uint64_t v53 = &v10[v51];
    uint64_t v54 = type metadata accessor for ServerStatusCode(0LL);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v54 - 8) + 24LL))(v52, v53, v54);
    v9[v11[6]] = v10[v11[6]];
    v9[v11[7]] = v10[v11[7]];
    uint64_t v55 = v11[8];
    uint64_t v56 = &v9[v55];
    uint64_t v57 = &v10[v55];
    *uint64_t v56 = *v57;
    uint64_t v58 = v57[1];
    v56[1] = v58;
    swift_bridgeObjectRetain(v58);
    swift_bridgeObjectRelease();
    v9[v11[9]] = v10[v11[9]];
    v9[v11[10]] = v10[v11[10]];
    v9[v11[11]] = v10[v11[11]];
    uint64_t v59 = v11[12];
    __n128 v60 = &v9[v59];
    uint64_t v61 = &v10[v59];
    *__n128 v60 = *v61;
    uint64_t v62 = v61[1];
    v60[1] = v62;
    swift_bridgeObjectRetain(v62);
    swift_bridgeObjectRelease();
    uint64_t v63 = v11[13];
    uint64_t v64 = &v9[v63];
    uint64_t v65 = &v10[v63];
    *uint64_t v64 = *v65;
    uint64_t v66 = v65[1];
    v64[1] = v66;
    swift_bridgeObjectRetain(v66);
    swift_bridgeObjectRelease();
    uint64_t v67 = v11[14];
    __n128 v68 = &v9[v67];
    uint64_t v69 = &v10[v67];
    uint64_t v70 = *(void *)v69;
    v68[8] = v69[8];
    *(void *)__n128 v68 = v70;
    uint64_t v71 = v11[15];
    uint64_t v72 = &v9[v71];
    uint64_t v73 = &v10[v71];
    void *v72 = *v73;
    uint64_t v74 = v73[1];
    v72[1] = v74;
    swift_bridgeObjectRetain(v74);
    swift_bridgeObjectRelease();
    uint64_t v75 = v11[16];
    uint64_t v76 = &v9[v75];
    uint64_t v77 = &v10[v75];
    uint64_t v78 = type metadata accessor for URL(0LL);
    uint64_t v79 = *(void *)(v78 - 8);
    uint64_t v80 = *(uint64_t (**)(_BYTE *, uint64_t, uint64_t))(v79 + 48);
    int v81 = v80(v76, 1LL, v78);
    int v82 = v80(v77, 1LL, v78);
    if (v81)
    {
      if (!v82)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v79 + 16))(v76, v77, v78);
        (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v79 + 56))(v76, 0LL, 1LL, v78);
        goto LABEL_22;
      }
    }

    else
    {
      if (!v82)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v79 + 24))(v76, v77, v78);
LABEL_22:
        uint64_t v110 = v11[17];
        uint64_t v111 = &v9[v110];
        uint64_t v112 = &v10[v110];
        int v113 = v80(&v9[v110], 1LL, v78);
        int v114 = v80(v112, 1LL, v78);
        uint64_t v344 = v79;
        v346 = v5;
        if (v113)
        {
          if (!v114)
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v79 + 16))(v111, v112, v78);
            (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v79 + 56))(v111, 0LL, 1LL, v78);
            goto LABEL_28;
          }
        }

        else
        {
          if (!v114)
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v79 + 24))(v111, v112, v78);
LABEL_28:
            uint64_t v116 = v11[18];
            uint64_t v117 = &v9[v116];
            uint64_t v118 = &v10[v116];
            *uint64_t v117 = *v118;
            uint64_t v119 = v118[1];
            v117[1] = v119;
            swift_bridgeObjectRetain(v119);
            swift_bridgeObjectRelease();
            *(void *)&v9[v11[19]] = *(void *)&v10[v11[19]];
            uint64_t v120 = v11[20];
            uint64_t v121 = (uint64_t)&v9[v120];
            uint64_t v122 = &v10[v120];
            uint64_t v123 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
            __srca = (void *)*((void *)v123 - 1);
            uint64_t v124 = (uint64_t (*)(uint64_t, uint64_t, int *))__srca[6];
            int v125 = v124(v121, 1LL, v123);
            int v126 = v124((uint64_t)v122, 1LL, v123);
            if (v125)
            {
              if (!v126)
              {
                *(void *)uint64_t v121 = *(void *)v122;
                uint64_t v127 = *((void *)v122 + 1);
                *(void *)(v121 + 8) = v127;
                *(void *)(v121 + swift_unknownObjectWeakDestroy(v0 + 16) = *((void *)v122 + 2);
                __dstb = (unsigned int (*)(_BYTE *, uint64_t, uint64_t, __n128))v80;
                uint64_t v128 = *((void *)v122 + 3);
                *(void *)(v121 + 24) = v128;
                *(void *)(v121 + 32) = *((void *)v122 + 4);
                uint64_t v129 = *((void *)v122 + 5);
                *(void *)(v121 + 40) = v129;
                *(_WORD *)(v121 + 48) = *((_WORD *)v122 + 24);
                *(void *)(v121 + 56) = *((void *)v122 + 7);
                uint64_t v130 = *((void *)v122 + 8);
                *(_BYTE *)(v121 + 72) = v122[72];
                *(void *)(v121 + 64) = v130;
                uint64_t v131 = v123[10];
                v337 = (void *)(v121 + v131);
                __n128 v132 = &v122[v131];
                swift_bridgeObjectRetain(v127);
                swift_bridgeObjectRetain(v128);
                __n128 v133 = swift_bridgeObjectRetain(v129);
                if (__dstb(v132, 1LL, v78, v133))
                {
                  uint64_t v134 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
                  memcpy(v337, v132, *(void *)(*(void *)(v134 - 8) + 64LL));
                }

                else
                {
                  (*(void (**)(void *, _BYTE *, uint64_t))(v344 + 16))(v337, v132, v78);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v344 + 56))(v337, 0LL, 1LL, v78);
                }

                uint64_t v223 = v123[11];
                uint64_t v224 = (void *)(v121 + v223);
                uint64_t v225 = &v122[v223];
                if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))__dstb)(&v122[v223], 1LL, v78))
                {
                  uint64_t v226 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
                  memcpy(v224, v225, *(void *)(*(void *)(v226 - 8) + 64LL));
                }

                else
                {
                  (*(void (**)(void *, _BYTE *, uint64_t))(v344 + 16))(v224, v225, v78);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v344 + 56))(v224, 0LL, 1LL, v78);
                }

                uint64_t v227 = v123[12];
                uint64_t v228 = v121 + v227;
                uint64_t v229 = &v122[v227];
                uint64_t v230 = *(void *)v229;
                *(_BYTE *)(v228 + 8) = v229[8];
                *(void *)uint64_t v228 = v230;
                uint64_t v231 = v123[13];
                uint64_t v232 = (void *)(v121 + v231);
                uint64_t v233 = &v122[v231];
                void *v232 = *v233;
                uint64_t v234 = v233[1];
                v232[1] = v234;
                uint64_t v235 = v123[14];
                v339 = *(void **)&v122[v235];
                *(void *)(v121 + v235) = v339;
                uint64_t v236 = v123[15];
                uint64_t v237 = (void *)(v121 + v236);
                uint64_t v238 = &v122[v236];
                void *v237 = *v238;
                uint64_t v239 = v238[1];
                v237[1] = v239;
                uint64_t v240 = v123[16];
                uint64_t v241 = *(void *)&v122[v240];
                *(void *)(v121 + v240) = v241;
                uint64_t v242 = v123[17];
                uint64_t v243 = v121 + v242;
                uint64_t v244 = &v122[v242];
                __int128 v245 = *(_OWORD *)v244;
                *(_BYTE *)(v243 + swift_unknownObjectWeakDestroy(v0 + 16) = v244[16];
                *(_OWORD *)uint64_t v243 = v245;
                uint64_t v246 = v123[18];
                uint64_t v247 = v121 + v246;
                uint64_t v248 = &v122[v246];
                __int128 v249 = *(_OWORD *)v248;
                *(_BYTE *)(v247 + swift_unknownObjectWeakDestroy(v0 + 16) = v248[16];
                *(_OWORD *)uint64_t v247 = v249;
                uint64_t v250 = (void (*)(uint64_t, void, uint64_t, int *, __n128))__srca[7];
                swift_bridgeObjectRetain(v234);
                swift_bridgeObjectRetain(v339);
                swift_bridgeObjectRetain(v239);
                __n128 v251 = swift_bridgeObjectRetain(v241);
                v250(v121, 0LL, 1LL, v123, v251);
LABEL_71:
                uint64_t v5 = v346;
                *(_DWORD *)&v9[v11[21]] = *(_DWORD *)&v10[v11[21]];
                uint64_t v282 = v11[22];
                uint64_t v283 = *(void *)&v10[v282];
                *(void *)&v9[v282] = v283;
                swift_bridgeObjectRetain(v283);
                swift_bridgeObjectRelease();
                uint64_t v284 = v11[23];
                v285 = (uint64_t *)&v9[v284];
                v286 = (uint64_t *)&v10[v284];
                unint64_t v287 = *(void *)&v10[v284 + 8];
                if (*(void *)&v9[v284 + 8] >> 60 == 15LL)
                {
                  uint64_t v288 = v344;
                  if (v287 >> 60 != 15)
                  {
                    uint64_t v289 = *v286;
                    sub_10001736C(*v286, v287);
                    uint64_t *v285 = v289;
                    v285[1] = v287;
                    goto LABEL_78;
                  }
                }

                else
                {
                  uint64_t v288 = v344;
                  if (v287 >> 60 != 15)
                  {
                    uint64_t v290 = *v286;
                    sub_10001736C(*v286, v287);
                    uint64_t v291 = *v285;
                    unint64_t v292 = v285[1];
                    uint64_t *v285 = v290;
                    v285[1] = v287;
                    sub_100016F9C(v291, v292);
LABEL_78:
                    uint64_t v293 = v11[24];
                    v294 = (uint64_t *)&v9[v293];
                    v295 = (uint64_t *)&v10[v293];
                    unint64_t v296 = *(void *)&v10[v293 + 8];
                    if (*(void *)&v9[v293 + 8] >> 60 == 15LL)
                    {
                      if (v296 >> 60 != 15)
                      {
                        uint64_t v297 = *v295;
                        sub_10001736C(*v295, v296);
                        uint64_t *v294 = v297;
                        v294[1] = v296;
LABEL_85:
                        v301 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v288 + 24);
                        v301(&v9[v11[25]], &v10[v11[25]], v78);
                        v301(&v9[v11[26]], &v10[v11[26]], v78);
                        v301(&v9[v11[27]], &v10[v11[27]], v78);
                        v301(&v9[v11[28]], &v10[v11[28]], v78);
                        v301(&v9[v11[29]], &v10[v11[29]], v78);
                        v301(&v9[v11[30]], &v10[v11[30]], v78);
                        uint64_t v302 = v11[31];
                        v303 = &v9[v302];
                        v304 = &v10[v302];
                        void *v303 = *v304;
                        uint64_t v305 = v304[1];
                        v303[1] = v305;
                        swift_bridgeObjectRetain(v305);
                        swift_bridgeObjectRelease();
                        uint64_t v306 = v11[32];
                        uint64_t v307 = *(void *)&v10[v306];
                        *(void *)&v9[v306] = v307;
                        swift_bridgeObjectRetain(v307);
                        swift_bridgeObjectRelease();
                        uint64_t v308 = v11[33];
                        v309 = &v9[v308];
                        v310 = &v10[v308];
                        void *v309 = *v310;
                        uint64_t v311 = v310[1];
                        v309[1] = v311;
                        swift_bridgeObjectRetain(v311);
                        swift_bridgeObjectRelease();
                        uint64_t v312 = v11[34];
                        uint64_t v313 = *(void *)&v10[v312];
                        *(void *)&v9[v312] = v313;
                        swift_bridgeObjectRetain(v313);
                        swift_bridgeObjectRelease();
                        uint64_t v314 = v11[35];
                        v315 = &v9[v314];
                        v316 = &v10[v314];
                        __int128 v317 = *(_OWORD *)v316;
                        v315[16] = v316[16];
                        *(_OWORD *)v315 = v317;
                        uint64_t v318 = v11[36];
                        v319 = &v9[v318];
                        v320 = &v10[v318];
                        __int128 v321 = *(_OWORD *)v320;
                        v319[16] = v320[16];
                        *(_OWORD *)v319 = v321;
                        v301(&v9[v11[37]], &v10[v11[37]], v78);
                        v301(&v9[v11[38]], &v10[v11[38]], v78);
                        v301(&v9[v11[39]], &v10[v11[39]], v78);
                        v301(&v9[v11[40]], &v10[v11[40]], v78);
                        v301(&v9[v11[41]], &v10[v11[41]], v78);
                        v301(&v9[v11[42]], &v10[v11[42]], v78);
                        v9[v11[43]] = v10[v11[43]];
                        v9[v11[44]] = v10[v11[44]];
                        v9[v11[45]] = v10[v11[45]];
                        uint64_t v322 = v11[46];
                        v323 = &v9[v322];
                        v324 = &v10[v322];
                        void *v323 = *v324;
                        uint64_t v325 = v324[1];
                        v323[1] = v325;
                        swift_bridgeObjectRetain(v325);
                        swift_bridgeObjectRelease();
                        uint64_t v326 = v11[47];
                        v327 = &v9[v326];
                        v328 = &v10[v326];
                        void *v327 = *v328;
                        uint64_t v329 = v328[1];
                        v327[1] = v329;
                        swift_bridgeObjectRetain(v329);
                        swift_bridgeObjectRelease();
                        return v5;
                      }
                    }

                    else
                    {
                      if (v296 >> 60 != 15)
                      {
                        uint64_t v298 = *v295;
                        sub_10001736C(*v295, v296);
                        uint64_t v299 = *v294;
                        unint64_t v300 = v294[1];
                        uint64_t *v294 = v298;
                        v294[1] = v296;
                        sub_100016F9C(v299, v300);
                        goto LABEL_85;
                      }

                      sub_100041D4C((uint64_t)v294);
                    }

                    *(_OWORD *)v294 = *(_OWORD *)v295;
                    goto LABEL_85;
                  }

                  sub_100041D4C((uint64_t)v285);
                }

                *(_OWORD *)v285 = *(_OWORD *)v286;
                goto LABEL_78;
              }

uint64_t sub_1003A7DC0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(void *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(void *)(a2 + 16);
  *(_OWORD *)(a1 + 24) = *(_OWORD *)(a2 + 24);
  uint64_t v4 = *(int *)(a3 + 28);
  uint64_t v5 = (_BYTE *)(a1 + v4);
  uint64_t v6 = (_BYTE *)(a2 + v4);
  uint64_t v7 = (int *)type metadata accessor for AccessoryProductInfo(0LL);
  uint64_t v8 = *((void *)v7 - 1);
  if ((*(unsigned int (**)(_BYTE *, uint64_t, int *))(v8 + 48))(v6, 1LL, v7))
  {
    uint64_t v9 = sub_100004AEC(&qword_10099CE68);
    memcpy(v5, v6, *(void *)(*(void *)(v9 - 8) + 64LL));
  }

  else
  {
    uint64_t v62 = v8;
    *(void *)uint64_t v5 = *(void *)v6;
    v5[8] = v6[8];
    uint64_t v10 = v7[5];
    uint64_t v11 = &v5[v10];
    __n128 v12 = &v6[v10];
    uint64_t v13 = type metadata accessor for ServerStatusCode(0LL);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v13 - 8) + 32LL))(v11, v12, v13);
    v5[v7[6]] = v6[v7[6]];
    v5[v7[7]] = v6[v7[7]];
    *(_OWORD *)&v5[v7[8]] = *(_OWORD *)&v6[v7[8]];
    v5[v7[9]] = v6[v7[9]];
    v5[v7[10]] = v6[v7[10]];
    v5[v7[11]] = v6[v7[11]];
    *(_OWORD *)&v5[v7[12]] = *(_OWORD *)&v6[v7[12]];
    *(_OWORD *)&v5[v7[13]] = *(_OWORD *)&v6[v7[13]];
    uint64_t v14 = v7[14];
    int v15 = &v5[v14];
    uint64_t v16 = &v6[v14];
    v15[8] = v16[8];
    *(void *)int v15 = *(void *)v16;
    *(_OWORD *)&v5[v7[15]] = *(_OWORD *)&v6[v7[15]];
    uint64_t v17 = v7[16];
    uint64_t v18 = &v5[v17];
    unint64_t v19 = &v6[v17];
    uint64_t v20 = type metadata accessor for URL(0LL);
    uint64_t v21 = *(void *)(v20 - 8);
    uint64_t v22 = *(unsigned int (**)(_BYTE *, uint64_t, uint64_t))(v21 + 48);
    if (v22(v19, 1LL, v20))
    {
      uint64_t v23 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v18, v19, *(void *)(*(void *)(v23 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v21 + 32))(v18, v19, v20);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v21 + 56))(v18, 0LL, 1LL, v20);
    }

    uint64_t v24 = v7[17];
    uint64_t v25 = &v5[v24];
    uint64_t v26 = &v6[v24];
    uint64_t v63 = v21;
    if (v22(&v6[v24], 1LL, v20))
    {
      uint64_t v27 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
      memcpy(v25, v26, *(void *)(*(void *)(v27 - 8) + 64LL));
    }

    else
    {
      (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v21 + 32))(v25, v26, v20);
      (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v21 + 56))(v25, 0LL, 1LL, v20);
    }

    *(_OWORD *)&v5[v7[18]] = *(_OWORD *)&v6[v7[18]];
    *(void *)&v5[v7[19]] = *(void *)&v6[v7[19]];
    uint64_t v28 = v7[20];
    uint64_t v29 = &v5[v28];
    uint64_t v30 = &v6[v28];
    uint64_t v31 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
    uint64_t v32 = *((void *)v31 - 1);
    if ((*(unsigned int (**)(_OWORD *, uint64_t, int *))(v32 + 48))(v30, 1LL, v31))
    {
      uint64_t v33 = sub_100004AEC(&qword_1009A6DD0);
      memcpy(v29, v30, *(void *)(*(void *)(v33 - 8) + 64LL));
    }

    else
    {
      __int128 v34 = v30[1];
      *uint64_t v29 = *v30;
      v29[1] = v34;
      v29[2] = v30[2];
      *((_WORD *)v29 + 24) = *((_WORD *)v30 + 24);
      uint64_t v35 = *((void *)v30 + 8);
      *((void *)v29 + 7) = *((void *)v30 + 7);
      *((void *)v29 + 8) = v35;
      *((_BYTE *)v29 + 72) = *((_BYTE *)v30 + 72);
      uint64_t v36 = v31[10];
      uint64_t v59 = v32;
      __dst = (char *)v29 + v36;
      uint64_t v37 = (char *)v30 + v36;
      if (v22((_BYTE *)v30 + v36, 1LL, v20))
      {
        uint64_t v38 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(__dst, v37, *(void *)(*(void *)(v38 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v63 + 32))(__dst, v37, v20);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(__dst, 0LL, 1LL, v20);
      }

      uint64_t v39 = v31[11];
      __dsta = (char *)v29 + v39;
      uint64_t v40 = (char *)v30 + v39;
      if (v22((_BYTE *)v30 + v39, 1LL, v20))
      {
        uint64_t v41 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
        memcpy(__dsta, v40, *(void *)(*(void *)(v41 - 8) + 64LL));
      }

      else
      {
        (*(void (**)(char *, char *, uint64_t))(v63 + 32))(__dsta, v40, v20);
        (*(void (**)(char *, void, uint64_t, uint64_t))(v63 + 56))(__dsta, 0LL, 1LL, v20);
      }

      uint64_t v42 = v31[12];
      uint64_t v43 = (char *)v29 + v42;
      uint64_t v44 = (char *)v30 + v42;
      *(void *)uint64_t v43 = *(void *)v44;
      v43[8] = v44[8];
      *(_OWORD *)((char *)v29 + v31[13]) = *(_OWORD *)((char *)v30 + v31[13]);
      *(void *)((char *)v29 + v31[14]) = *(void *)((char *)v30 + v31[14]);
      *(_OWORD *)((char *)v29 + v31[15]) = *(_OWORD *)((char *)v30 + v31[15]);
      *(void *)((char *)v29 + v31[16]) = *(void *)((char *)v30 + v31[16]);
      uint64_t v45 = v31[17];
      uint64_t v46 = (char *)v29 + v45;
      __n128 v47 = (char *)v30 + v45;
      v46[16] = v47[16];
      *(_OWORD *)uint64_t v46 = *(_OWORD *)v47;
      uint64_t v48 = v31[18];
      uint64_t v49 = (char *)v29 + v48;
      uint64_t v50 = (char *)v30 + v48;
      v49[16] = v50[16];
      *(_OWORD *)uint64_t v49 = *(_OWORD *)v50;
      (*(void (**)(_OWORD *, void, uint64_t, int *))(v59 + 56))(v29, 0LL, 1LL, v31);
    }

    *(_DWORD *)&v5[v7[21]] = *(_DWORD *)&v6[v7[21]];
    *(void *)&v5[v7[22]] = *(void *)&v6[v7[22]];
    *(_OWORD *)&v5[v7[23]] = *(_OWORD *)&v6[v7[23]];
    *(_OWORD *)&v5[v7[24]] = *(_OWORD *)&v6[v7[24]];
    uint64_t v51 = *(void (**)(_BYTE *, _BYTE *, uint64_t))(v63 + 32);
    v51(&v5[v7[25]], &v6[v7[25]], v20);
    v51(&v5[v7[26]], &v6[v7[26]], v20);
    v51(&v5[v7[27]], &v6[v7[27]], v20);
    v51(&v5[v7[28]], &v6[v7[28]], v20);
    v51(&v5[v7[29]], &v6[v7[29]], v20);
    v51(&v5[v7[30]], &v6[v7[30]], v20);
    *(_OWORD *)&v5[v7[31]] = *(_OWORD *)&v6[v7[31]];
    *(void *)&v5[v7[32]] = *(void *)&v6[v7[32]];
    *(_OWORD *)&v5[v7[33]] = *(_OWORD *)&v6[v7[33]];
    *(void *)&v5[v7[34]] = *(void *)&v6[v7[34]];
    uint64_t v52 = v7[35];
    uint64_t v53 = &v5[v52];
    uint64_t v54 = &v6[v52];
    v53[16] = v54[16];
    *(_OWORD *)uint64_t v53 = *(_OWORD *)v54;
    uint64_t v55 = v7[36];
    uint64_t v56 = &v5[v55];
    uint64_t v57 = &v6[v55];
    v56[16] = v57[16];
    *(_OWORD *)uint64_t v56 = *(_OWORD *)v57;
    v51(&v5[v7[37]], &v6[v7[37]], v20);
    v51(&v5[v7[38]], &v6[v7[38]], v20);
    v51(&v5[v7[39]], &v6[v7[39]], v20);
    v51(&v5[v7[40]], &v6[v7[40]], v20);
    v51(&v5[v7[41]], &v6[v7[41]], v20);
    v51(&v5[v7[42]], &v6[v7[42]], v20);
    v5[v7[43]] = v6[v7[43]];
    v5[v7[44]] = v6[v7[44]];
    v5[v7[45]] = v6[v7[45]];
    *(_OWORD *)&v5[v7[46]] = *(_OWORD *)&v6[v7[46]];
    *(_OWORD *)&v5[v7[47]] = *(_OWORD *)&v6[v7[47]];
    (*(void (**)(_BYTE *, void, uint64_t, int *))(v62 + 56))(v5, 0LL, 1LL, v7);
  }

  return a1;
}

uint64_t sub_1003A844C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v6;
  swift_bridgeObjectRelease();
  *(_OWORD *)(a1 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease();
  uint64_t v7 = *(int *)(a3 + 28);
  uint64_t v8 = (_BYTE *)(a1 + v7);
  uint64_t v9 = (_BYTE *)(a2 + v7);
  uint64_t v10 = (int *)type metadata accessor for AccessoryProductInfo(0LL);
  uint64_t v11 = (void *)*((void *)v10 - 1);
  __n128 v12 = (uint64_t (*)(_BYTE *, uint64_t, int *))v11[6];
  int v13 = v12(v8, 1LL, v10);
  int v14 = v12(v9, 1LL, v10);
  if (!v13)
  {
    if (v14)
    {
      sub_100018C68((uint64_t)v8, type metadata accessor for AccessoryProductInfo);
      goto LABEL_7;
    }

    *(void *)uint64_t v8 = *(void *)v9;
    v8[8] = v9[8];
    uint64_t v29 = v10[5];
    uint64_t v30 = &v8[v29];
    uint64_t v31 = &v9[v29];
    uint64_t v32 = type metadata accessor for ServerStatusCode(0LL);
    (*(void (**)(_BYTE *, _BYTE *, uint64_t))(*(void *)(v32 - 8) + 40LL))(v30, v31, v32);
    v8[v10[6]] = v9[v10[6]];
    v8[v10[7]] = v9[v10[7]];
    uint64_t v33 = v10[8];
    __int128 v34 = &v8[v33];
    uint64_t v35 = (uint64_t *)&v9[v33];
    uint64_t v37 = *v35;
    uint64_t v36 = v35[1];
    *__int128 v34 = v37;
    v34[1] = v36;
    swift_bridgeObjectRelease();
    v8[v10[9]] = v9[v10[9]];
    v8[v10[10]] = v9[v10[10]];
    v8[v10[11]] = v9[v10[11]];
    uint64_t v38 = v10[12];
    uint64_t v39 = &v8[v38];
    uint64_t v40 = (uint64_t *)&v9[v38];
    uint64_t v42 = *v40;
    uint64_t v41 = v40[1];
    *uint64_t v39 = v42;
    v39[1] = v41;
    swift_bridgeObjectRelease();
    uint64_t v43 = v10[13];
    uint64_t v44 = &v8[v43];
    uint64_t v45 = (uint64_t *)&v9[v43];
    uint64_t v47 = *v45;
    uint64_t v46 = v45[1];
    *uint64_t v44 = v47;
    v44[1] = v46;
    swift_bridgeObjectRelease();
    uint64_t v48 = v10[14];
    uint64_t v49 = &v8[v48];
    uint64_t v50 = &v9[v48];
    *(void *)uint64_t v49 = *(void *)v50;
    v49[8] = v50[8];
    uint64_t v51 = v10[15];
    uint64_t v52 = &v8[v51];
    uint64_t v53 = (uint64_t *)&v9[v51];
    uint64_t v55 = *v53;
    uint64_t v54 = v53[1];
    void *v52 = v55;
    v52[1] = v54;
    swift_bridgeObjectRelease();
    uint64_t v56 = v10[16];
    uint64_t v57 = &v8[v56];
    uint64_t v58 = &v9[v56];
    uint64_t v59 = type metadata accessor for URL(0LL);
    uint64_t v60 = *(void *)(v59 - 8);
    uint64_t v61 = *(uint64_t (**)(void))(v60 + 48);
    unsigned int v62 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v61)(v57, 1LL, v59);
    unsigned int v63 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v61)(v58, 1LL, v59);
    if (v62)
    {
      if (!v63)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v60 + 32))(v57, v58, v59);
        (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v60 + 56))(v57, 0LL, 1LL, v59);
        goto LABEL_22;
      }
    }

    else
    {
      if (!v63)
      {
        (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v60 + 40))(v57, v58, v59);
LABEL_22:
        uint64_t v81 = v10[17];
        int v82 = &v8[v81];
        uint64_t v83 = &v9[v81];
        unsigned int v84 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v61)(&v8[v81], 1LL, v59);
        unsigned int v85 = ((uint64_t (*)(_BYTE *, uint64_t, uint64_t))v61)(v83, 1LL, v59);
        uint64_t v222 = v61;
        uint64_t v224 = v60;
        if (v84)
        {
          if (!v85)
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v60 + 32))(v82, v83, v59);
            (*(void (**)(_BYTE *, void, uint64_t, uint64_t))(v60 + 56))(v82, 0LL, 1LL, v59);
            goto LABEL_28;
          }
        }

        else
        {
          if (!v85)
          {
            (*(void (**)(_BYTE *, _BYTE *, uint64_t))(v60 + 40))(v82, v83, v59);
LABEL_28:
            uint64_t v87 = v10[18];
            uint64_t v88 = &v8[v87];
            uint64_t v89 = (uint64_t *)&v9[v87];
            uint64_t v91 = *v89;
            uint64_t v90 = v89[1];
            void *v88 = v91;
            v88[1] = v90;
            swift_bridgeObjectRelease();
            *(void *)&v8[v10[19]] = *(void *)&v9[v10[19]];
            uint64_t v92 = v10[20];
            uint64_t v93 = (uint64_t)&v8[v92];
            uint64_t v94 = &v9[v92];
            uint64_t v95 = (int *)type metadata accessor for AccessoryInfoResponseContent.Configuration(0LL);
            int v219 = (void *)*((void *)v95 - 1);
            uint64_t v96 = (uint64_t (*)(uint64_t, uint64_t, int *))v219[6];
            int v97 = v96(v93, 1LL, v95);
            int v98 = v96((uint64_t)v94, 1LL, v95);
            if (v97)
            {
              if (!v98)
              {
                __int128 v99 = *((_OWORD *)v94 + 1);
                *(_OWORD *)uint64_t v93 = *(_OWORD *)v94;
                *(_OWORD *)(v93 + swift_unknownObjectWeakDestroy(v0 + 16) = v99;
                *(_OWORD *)(v93 + 32) = *((_OWORD *)v94 + 2);
                *(_WORD *)(v93 + 48) = *((_WORD *)v94 + 24);
                uint64_t v100 = *((void *)v94 + 8);
                *(void *)(v93 + 56) = *((void *)v94 + 7);
                *(void *)(v93 + 64) = v100;
                *(_BYTE *)(v93 + 72) = v94[72];
                uint64_t v101 = v95[10];
                uint64_t v102 = (void *)(v93 + v101);
                uint64_t v103 = &v94[v101];
                if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v222)(&v94[v101], 1LL, v59))
                {
                  uint64_t v104 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
                  memcpy(v102, v103, *(void *)(*(void *)(v104 - 8) + 64LL));
                }

                else
                {
                  (*(void (**)(void *, _BYTE *, uint64_t))(v224 + 32))(v102, v103, v59);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v224 + 56))(v102, 0LL, 1LL, v59);
                }

                uint64_t v136 = v95[11];
                uint64_t v137 = (void *)(v93 + v136);
                uint64_t v138 = &v94[v136];
                if (((unsigned int (*)(_BYTE *, uint64_t, uint64_t))v222)(&v94[v136], 1LL, v59))
                {
                  uint64_t v139 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
                  memcpy(v137, v138, *(void *)(*(void *)(v139 - 8) + 64LL));
                  uint64_t v106 = v224;
                }

                else
                {
                  uint64_t v140 = v138;
                  uint64_t v106 = v224;
                  (*(void (**)(void *, const void *, uint64_t))(v224 + 32))(v137, v140, v59);
                  (*(void (**)(void *, void, uint64_t, uint64_t))(v224 + 56))(v137, 0LL, 1LL, v59);
                }

                uint64_t v141 = v95[12];
                uint64_t v142 = v93 + v141;
                uint64_t v143 = &v94[v141];
                *(void *)uint64_t v142 = *(void *)v143;
                *(_BYTE *)(v142 + 8) = v143[8];
                *(_OWORD *)(v93 + v95[13]) = *(_OWORD *)&v94[v95[13]];
                *(void *)(v93 + v95[14]) = *(void *)&v94[v95[14]];
                *(_OWORD *)(v93 + v95[15]) = *(_OWORD *)&v94[v95[15]];
                *(void *)(v93 + v95[16]) = *(void *)&v94[v95[16]];
                uint64_t v144 = v95[17];
                uint64_t v145 = v93 + v144;
                uint64_t v146 = &v94[v144];
                *(_BYTE *)(v145 + swift_unknownObjectWeakDestroy(v0 + 16) = v146[16];
                *(_OWORD *)uint64_t v145 = *(_OWORD *)v146;
                uint64_t v147 = v95[18];
                uint64_t v148 = v93 + v147;
                uint64_t v149 = &v94[v147];
                *(_BYTE *)(v148 + swift_unknownObjectWeakDestroy(v0 + 16) = v149[16];
                *(_OWORD *)uint64_t v148 = *(_OWORD *)v149;
                ((void (*)(uint64_t, void, uint64_t, int *))v219[7])(v93, 0LL, 1LL, v95);
                goto LABEL_64;
              }

uint64_t sub_1003A95A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003A95B4);
}

uint64_t sub_1003A95B4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 2147483646)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    int v5 = v4 - 1;
    if (v5 < 0) {
      int v5 = -1;
    }
    return (v5 + 1);
  }

  else
  {
    uint64_t v9 = sub_100004AEC(&qword_10099CE68);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 48LL))( a1 + *(int *)(a3 + 28),  a2,  v9);
  }

uint64_t sub_1003A9640(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003A964C);
}

uint64_t sub_1003A964C(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 2147483646)
  {
    *(void *)(result + 8) = a2;
  }

  else
  {
    uint64_t v7 = sub_100004AEC(&qword_10099CE68);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 28),  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for PairingConfig(uint64_t a1)
{
  uint64_t result = qword_1009AB2D8;
  if (!qword_1009AB2D8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for PairingConfig);
  }
  return result;
}

void sub_1003A9700(uint64_t a1)
{
  v4[0] = &unk_1007FE250;
  v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[2] = &unk_1007FE250;
  sub_1003A9784(319LL);
  if (v3 <= 0x3F)
  {
    v4[3] = *(void *)(v2 - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 4LL, v4, a1 + 16);
  }

void sub_1003A9784(uint64_t a1)
{
  if (!qword_10099EDA0)
  {
    uint64_t v2 = type metadata accessor for AccessoryProductInfo(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_10099EDA0);
    }
  }

uint64_t sub_1003A97D8()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A780);
  sub_10000A720(v0, (uint64_t)qword_100A2A780);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000013LL,  0x800000010085FC50LL);
}

uint64_t sub_1003A9858()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A798);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2A798);
  if (qword_10099B350 != -1) {
    swift_once(&qword_10099B350, sub_1003A97D8);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_100A2A780);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_1003A98E8(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v14 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  swift_defaultActor_initialize(v2);
  *(void *)(v2 + 112) = 0xD000000000000013LL;
  *(void *)(v2 + 120) = 0x80000001007FE260LL;
  uint64_t v7 = v2 + OBJC_IVAR____TtC12searchpartyd19FinderStateObserver__stateInfoCache;
  uint64_t v8 = type metadata accessor for FinderStateInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v7, 1LL, 1LL, v8);
  *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd19FinderStateObserver_notificationListener) = 0LL;
  uint64_t v9 = OBJC_IVAR____TtC12searchpartyd19FinderStateObserver_workItemQueue;
  uint64_t v10 = type metadata accessor for WorkItemQueue(0LL);
  UUID.init()(v10);
  *(void *)(v2 + v9) = WorkItemQueue.__allocating_init(name:identifier:)( 0xD000000000000018LL,  0x800000010085FC70LL,  v6);
  uint64_t v11 = OBJC_IVAR____TtC12searchpartyd19FinderStateObserver_finderStreamStateProvider;
  uint64_t v12 = sub_100004AEC(&qword_1009AB530);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  *(void *)(v2 + v11) = AsyncStreamProvider.init()();
  *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd19FinderStateObserver_finderStateManager) = a1;
  return v2;
}

uint64_t sub_1003A9A2C()
{
  v1[10] = v0;
  v1[11] = *v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  v1[12] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003A9A8C, v0, 0LL);
}

uint64_t sub_1003A9A8C()
{
  uint64_t v1 = *(void *)(v0 + 96);
  uint64_t v2 = swift_allocObject(&unk_100955B00, 24LL, 7LL);
  __int128 v16 = *(_OWORD *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 80);
  swift_weakInit(v2 + 16, v3);
  uint64_t v4 = sub_100004AEC(&qword_10099FAA8);
  uint64_t inited = swift_initStackObject(v4, v0 + 16);
  *(_OWORD *)(inited + swift_unknownObjectWeakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(SPFinderStateChangedNotification);
  uint64_t v8 = v7;
  uint64_t v9 = swift_allocObject(&unk_100955B28, 32LL, 7LL);
  *(void *)(v9 + swift_unknownObjectWeakDestroy(v0 + 16) = sub_1003AB374;
  *(void *)(v9 + 24) = v2;
  *(void *)(inited + 32) = v6;
  *(void *)(inited + 40) = v8;
  *(void *)(inited + 48) = sub_10009BF1C;
  *(void *)(inited + 56) = v9;
  swift_retain();
  unint64_t v10 = sub_100412BD0(inited);
  uint64_t v11 = type metadata accessor for DarwinNotificationHelper(0LL);
  swift_allocObject(v11, *(unsigned int *)(v11 + 48), *(unsigned __int16 *)(v11 + 52));
  *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd19FinderStateObserver_notificationListener) = DarwinNotificationHelper.init(notificationHandlers:)(v10);
  swift_release();
  type metadata accessor for WorkItemQueue.WorkItem(0LL);
  uint64_t v12 = swift_allocObject(&unk_100955B50, 32LL, 7LL);
  *(_OWORD *)(v12 + swift_unknownObjectWeakDestroy(v0 + 16) = v16;
  swift_retain();
  uint64_t v13 = swift_retain();
  UUID.init()(v13);
  uint64_t v14 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)( v1,  &unk_1009AB528,  v12,  &unk_1009AB4E8,  0LL);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v14);
  swift_release();
  swift_release();
  swift_release();
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003A9C5C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2 + 16;
  swift_beginAccess(a2 + 16, v4, 0LL, 0LL);
  uint64_t result = swift_weakLoadStrong(v2);
  if (result)
  {
    sub_1003AA388();
    return swift_release();
  }

  return result;
}

uint64_t sub_1003A9CB0(uint64_t a1)
{
  v2[2] = a1;
  v2[3] = v1;
  uint64_t v3 = sub_100004AEC(&qword_10099C818);
  v2[4] = v3;
  v2[5] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for FinderStateInfo(0LL);
  v2[6] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[7] = v5;
  v2[8] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003A9D38, v1, 0LL);
}

uint64_t sub_1003A9D38()
{
  uint64_t v1 = v0[3];
  unint64_t v2 = sub_1003AAECC();
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[9] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1003A9DC4;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[5],  v1,  v2,  0x6E4965746174735FLL,  0xEC00000029286F66LL,  sub_100015C40,  v0[3],  v0[4]);
}

uint64_t sub_1003A9DC4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 24LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 72LL));
  return swift_task_switch(sub_1003A9E1C, v1, 0LL);
}

uint64_t sub_1003A9E1C()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 40);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v1 + 48))(v2, 1LL, *(void *)(v0 + 48)) == 1)
  {
    sub_100015794(v2, &qword_10099C818);
    uint64_t v3 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 64);
    sub_100012EFC(v2, v4);
    uint64_t v5 = sub_100004AEC(&qword_1009AB4F0);
    uint64_t v6 = sub_100004AEC(&qword_10099C848);
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v8 = *(void *)(v7 + 72);
    uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v10 = (v9 + 32) & ~v9;
    uint64_t v3 = (void *)swift_allocObject(v5, v10 + v8, v9 | 7);
    *((_OWORD *)v3 + 1) = xmmword_1007E67D0;
    uint64_t v11 = (uint64_t)v3 + v10 + *(int *)(v6 + 48);
    (*(void (**)(void))(v1 + 56))();
    sub_100012EFC(v4, v11);
  }

  uint64_t v12 = *(void *)(v0 + 64);
  uint64_t v13 = *(void *)(v0 + 40);
  AsyncStreamProvider.stream(initialEvents:)(v3);
  swift_bridgeObjectRelease();
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003A9F5C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009AB4F8);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = *(void *)(v5 + 64);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v18 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v18 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v10, 1LL, 1LL, v11);
  (*(void (**)(char *, uint64_t, uint64_t))(v5 + 16))(v7, a1, v4);
  unint64_t v12 = sub_1003AAECC();
  uint64_t v13 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v14 = (v13 + 40) & ~v13;
  uint64_t v15 = (char *)swift_allocObject(&unk_100955AB0, v14 + v6, v13 | 7);
  *((void *)v15 + 2) = a2;
  *((void *)v15 + 3) = v12;
  *((void *)v15 + 4) = a2;
  (*(void (**)(char *, char *, uint64_t))(v5 + 32))(&v15[v14], v7, v4);
  swift_retain_n(a2, 2LL);
  uint64_t v16 = sub_1003EDB00((uint64_t)v10, (uint64_t)&unk_1009AB508, (uint64_t)v15);
  return swift_release(v16);
}

uint64_t sub_1003AA0B0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[2] = a4;
  v5[3] = a5;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  v5[4] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009AB4F8);
  v5[5] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[6] = v9;
  uint64_t v10 = *(void *)(v9 + 64);
  void v5[7] = v10;
  v5[8] = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003AA13C, a4, 0LL);
}

uint64_t sub_1003AA13C()
{
  uint64_t v2 = *(void *)(v0 + 56);
  uint64_t v1 = *(void *)(v0 + 64);
  uint64_t v3 = *(void *)(v0 + 40);
  uint64_t v4 = *(void *)(v0 + 48);
  uint64_t v6 = *(void *)(v0 + 24);
  uint64_t v5 = *(void *)(v0 + 32);
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = *(void *)(v7 + OBJC_IVAR____TtC12searchpartyd19FinderStateObserver_workItemQueue);
  type metadata accessor for WorkItemQueue.WorkItem(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v6, v3);
  uint64_t v9 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v10 = (v9 + 16) & ~v9;
  unint64_t v11 = (v2 + v10 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v12 = swift_allocObject(&unk_100955AD8, v11 + 8, v9 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v12 + v10, v1, v3);
  *(void *)(v12 + v11) = v7;
  swift_retain(v8);
  uint64_t v13 = swift_retain(v7);
  UUID.init()(v13);
  uint64_t v14 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)( v5,  &unk_1009AB518,  v12,  &unk_1009AB520,  0LL);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v14);
  swift_release(v8);
  swift_release(v14);
  swift_task_dealloc(v1);
  swift_task_dealloc(v5);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AA270(uint64_t a1, uint64_t a2)
{
  v2[5] = a1;
  v2[6] = a2;
  uint64_t v4 = sub_100004AEC(&qword_10099C818);
  v2[7] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003AA2D0, a2, 0LL);
}

uint64_t sub_1003AA2D0()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 48) + OBJC_IVAR____TtC12searchpartyd19FinderStateObserver__stateInfoCache;
  swift_beginAccess(v2, v0 + 16, 0LL, 0LL);
  sub_1003AAFFC(v2, v1);
  return swift_task_switch(sub_1003AA334, 0LL, 0LL);
}

uint64_t sub_1003AA334()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = sub_100004AEC(&qword_1009AB4F8);
  CheckedContinuation.resume(returning:)(v1, v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AA388()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v22 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for TaskPriority(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v6 + 56))(v4, 1LL, 1LL, v5);
  uint64_t v7 = (void *)swift_allocObject(&unk_100955A38, 40LL, 7LL);
  v7[2] = 0LL;
  uint64_t v8 = v7 + 2;
  v7[3] = 0LL;
  v7[4] = v1;
  int v9 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v6 + 48))(v4, 1LL, v5);
  uint64_t v10 = swift_retain();
  if (v9 == 1)
  {
    sub_100015794((uint64_t)v4, &qword_1009A9BF0);
    uint64_t v11 = 0LL;
    uint64_t v12 = 0LL;
    uint64_t v13 = 7168LL;
  }

  else
  {
    unsigned __int8 v14 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(char *, uint64_t))(v6 + 8))(v4, v5);
    uint64_t v13 = v14 | 0x1C00LL;
    uint64_t v15 = *v8;
    if (*v8)
    {
      uint64_t v16 = v7[3];
      uint64_t ObjectType = swift_getObjectType(*v8);
      swift_unknownObjectRetain(v15);
      uint64_t v11 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v16);
      uint64_t v12 = v18;
      swift_unknownObjectRelease(v15);
    }

    else
    {
      uint64_t v11 = 0LL;
      uint64_t v12 = 0LL;
    }
  }

  uint64_t v19 = swift_allocObject(&unk_100955A60, 32LL, 7LL);
  *(void *)(v19 + swift_unknownObjectWeakDestroy(v0 + 16) = &unk_1009AB4D0;
  *(void *)(v19 + 24) = v7;
  if (v12 | v11)
  {
    v22[0] = 0LL;
    v22[1] = 0LL;
    uint64_t v20 = v22;
    v22[2] = v11;
    v22[3] = v12;
  }

  else
  {
    uint64_t v20 = 0LL;
  }

  swift_task_create(v13, v20, (char *)&type metadata for () + 8, &unk_1009AB890, v19);
  return swift_release();
}

uint64_t sub_1003AA55C(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  void v4[2] = a4;
  v4[3] = *a4;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  void v4[4] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003AA5C0, a4, 0LL);
}

uint64_t sub_1003AA5C0()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = OBJC_IVAR____TtC12searchpartyd19FinderStateObserver_workItemQueue;
  type metadata accessor for WorkItemQueue.WorkItem(0LL);
  uint64_t v3 = swift_allocObject(&unk_100955A88, 32LL, 7LL);
  uint64_t v4 = *(void *)(v0 + 16);
  uint64_t v5 = *(void *)(v4 + v2);
  *(_OWORD *)(v3 + swift_unknownObjectWeakDestroy(v0 + 16) = *(_OWORD *)(v0 + 16);
  swift_retain(v5);
  uint64_t v6 = swift_retain(v4);
  UUID.init()(v6);
  uint64_t v7 = WorkItemQueue.WorkItem.__allocating_init(identifier:block:completion:)( v1,  &unk_1009AB4E0,  v3,  &unk_1009AB4E8,  0LL);
  dispatch thunk of WorkItemQueue.enqueue(_:)(v7);
  swift_release(v5);
  swift_release(v7);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AA694(uint64_t a1)
{
  void v1[9] = a1;
  uint64_t v3 = sub_100004AEC(&qword_10099C848);
  v1[10] = v3;
  v1[11] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for FinderStateInfo(0LL);
  v1[12] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v1[13] = v5;
  unint64_t v6 = (*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[14] = swift_task_alloc(v6);
  v1[15] = swift_task_alloc(v6);
  unint64_t v7 = (*(void *)(*(void *)(sub_100004AEC(&qword_10099C818) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[16] = swift_task_alloc(v7);
  v1[17] = swift_task_alloc(v7);
  v1[18] = swift_task_alloc(v7);
  v1[19] = swift_task_alloc(v7);
  return swift_task_switch(sub_1003AA77C, a1, 0LL);
}

uint64_t sub_1003AA77C()
{
  uint64_t v1 = v0[19];
  uint64_t v2 = v0[9];
  uint64_t v3 = OBJC_IVAR____TtC12searchpartyd19FinderStateObserver__stateInfoCache;
  v0[20] = OBJC_IVAR____TtC12searchpartyd19FinderStateObserver__stateInfoCache;
  uint64_t v4 = v2 + v3;
  swift_beginAccess(v2 + v3, v0 + 2, 0LL, 0LL);
  sub_1003AAFFC(v4, v1);
  v0[21] = *(void *)(v2 + OBJC_IVAR____TtC12searchpartyd19FinderStateObserver_finderStateManager);
  swift_retain();
  return swift_task_switch(sub_1003AA804, 0LL, 0LL);
}

uint64_t sub_1003AA804()
{
  uint64_t v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc(v1);
  v0[22] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1003AA870;
  return unsafeBlocking<A>(_:)(v0[15], sub_1003AB044, v0[21], v0[12]);
}

uint64_t sub_1003AA870()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 72LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 176LL));
  swift_release();
  return swift_task_switch(sub_1003AA8D0, v1, 0LL);
}

uint64_t sub_1003AA8D0()
{
  uint64_t v2 = v0[17];
  uint64_t v1 = v0[18];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[13];
  uint64_t v5 = v0[9] + v0[20];
  sub_1003AB09C(v0[15], v1);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(v1, 0LL, 1LL, v3);
  sub_1002E75E0(v1, v2);
  swift_beginAccess(v5, v0 + 5, 33LL, 0LL);
  sub_1003AB0E0(v2, v5);
  swift_endAccess(v0 + 5);
  return swift_task_switch(sub_1003AA984, 0LL, 0LL);
}

uint64_t sub_1003AA984()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 96);
  uint64_t v3 = *(void *)(v0 + 104);
  sub_1003AAFFC(*(void *)(v0 + 152), v1);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1LL, v2);
  uint64_t v5 = *(unsigned __int8 **)(v0 + 128);
  if (v4 == 1)
  {
    sub_100015794((uint64_t)v5, &qword_10099C818);
    unint64_t v6 = 0xE300000000000000LL;
    uint64_t v7 = 7104878LL;
  }

  else
  {
    int v8 = *v5;
    sub_100012F40((uint64_t)v5);
    if (v8) {
      uint64_t v7 = 1702195828LL;
    }
    else {
      uint64_t v7 = 0x65736C6166LL;
    }
    if (v8) {
      unint64_t v6 = 0xE400000000000000LL;
    }
    else {
      unint64_t v6 = 0xE500000000000000LL;
    }
  }

  if (qword_10099B358 != -1) {
    swift_once(&qword_10099B358, sub_1003A9858);
  }
  uint64_t v10 = *(void *)(v0 + 112);
  uint64_t v9 = *(void *)(v0 + 120);
  uint64_t v11 = type metadata accessor for Logger(0LL);
  sub_10000A720(v11, (uint64_t)qword_100A2A798);
  sub_1003AB09C(v9, v10);
  swift_bridgeObjectRetain(v6);
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter(v13);
  BOOL v15 = os_log_type_enabled(v13, v14);
  uint64_t v16 = *(unsigned __int8 **)(v0 + 112);
  if (v15)
  {
    uint64_t v17 = swift_slowAlloc(18LL, -1LL);
    uint64_t v18 = swift_slowAlloc(32LL, -1LL);
    uint64_t v29 = v18;
    *(_DWORD *)uint64_t v17 = 136446466;
    swift_bridgeObjectRetain(v6);
    *(void *)(v0 + 64) = sub_1003F11D4(v7, v6, &v29);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v17 + 4, v17 + 12);
    swift_bridgeObjectRelease_n(v6, 3LL);
    *(_WORD *)(v17 + 12) = 1024;
    int v19 = *v16;
    sub_100012F40((uint64_t)v16);
    *(_DWORD *)(v0 + 184) = v19;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 188, v17 + 14, v17 + 18);
    _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Refreshed finder state info. Old: %{public}s, new: %{BOOL}d.",  (uint8_t *)v17,  0x12u);
    swift_arrayDestroy(v18, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v18, -1LL, -1LL);
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {
    sub_100012F40(*(void *)(v0 + 112));
    swift_bridgeObjectRelease_n(v6, 2LL);
  }

  uint64_t v21 = *(void *)(v0 + 144);
  uint64_t v20 = *(void *)(v0 + 152);
  uint64_t v22 = *(void *)(v0 + 128);
  uint64_t v23 = *(void *)(v0 + 136);
  uint64_t v24 = *(void *)(v0 + 120);
  uint64_t v28 = *(void *)(v0 + 112);
  uint64_t v25 = *(void *)(v0 + 88);
  uint64_t v26 = v25 + *(int *)(*(void *)(v0 + 80) + 48LL);
  sub_1003AAFFC(v20, v25);
  sub_1003AB09C(v24, v26);
  AsyncStreamProvider.yield(value:transaction:)(v25, 0LL);
  swift_release();
  sub_100015794(v25, &qword_10099C848);
  sub_100012F40(v24);
  sub_100015794(v20, &qword_10099C818);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v23);
  swift_task_dealloc(v22);
  swift_task_dealloc(v24);
  swift_task_dealloc(v28);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AACB4()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1003AAD30()
{
  return type metadata accessor for FinderStateObserver(0LL);
}

uint64_t type metadata accessor for FinderStateObserver(uint64_t a1)
{
  uint64_t result = qword_1009AB368;
  if (!qword_1009AB368) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FinderStateObserver);
  }
  return result;
}

void sub_1003AAD74(uint64_t a1)
{
  v4[1] = &unk_1007FE2B0;
  sub_1003AAE10(319LL);
  if (v3 <= 0x3F)
  {
    void v4[2] = *(void *)(v2 - 8) + 64LL;
    v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
    void v4[4] = &unk_1007FE2C8;
    v4[5] = (char *)&value witness table for Builtin.NativeObject + 64;
    void v4[6] = (char *)&value witness table for Builtin.NativeObject + 64;
    swift_updateClassMetadata2(a1, 256LL, 7LL, v4, a1 + 80);
  }

void sub_1003AAE10(uint64_t a1)
{
  if (!qword_1009AB388)
  {
    uint64_t v2 = type metadata accessor for FinderStateInfo(255LL);
    unint64_t v3 = type metadata accessor for Optional(a1, v2);
    if (!v4) {
      atomic_store(v3, (unint64_t *)&qword_1009AB388);
    }
  }

uint64_t sub_1003AAE64()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1009AB37C);
  *(void *)(v0 + swift_unknownObjectWeakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_100015D58;
  return sub_1003A9A2C();
}

unint64_t sub_1003AAEA8(uint64_t a1)
{
  unint64_t result = sub_1003AAECC();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1003AAECC()
{
  unint64_t result = qword_10099CAE8;
  if (!qword_10099CAE8)
  {
    uint64_t v1 = type metadata accessor for FinderStateObserver(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1007FE30C, v1);
    atomic_store(result, (unint64_t *)&qword_10099CAE8);
  }

  return result;
}

uint64_t sub_1003AAF14()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1003AAF40(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  unint64_t v6 = (void *)v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1009AB4CC);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_1000159BC;
  return sub_1003AA55C(a1, v4, v5, v6);
}

uint64_t sub_1003AAFAC()
{
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v3 = (void *)swift_task_alloc(dword_1009AB4DC);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_100015D58;
  return sub_1003AA694(v2);
}

uint64_t sub_1003AAFFC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099C818);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003AB044()
{
  uint64_t v1 = type metadata accessor for FinderStateInfo(0LL);
  return OS_dispatch_queue.sync<A>(execute:)(sub_1003AB128, v0, v1);
}

uint64_t sub_1003AB09C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FinderStateInfo(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003AB0E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099C818);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 40LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003AB128@<X0>(_BYTE *a1@<X8>)
{
  return sub_1000B8CC8(v1, a1);
}

uint64_t sub_1003AB140()
{
  uint64_t v1 = sub_100004AEC(&qword_1009AB4F8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1003AB1C0(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(sub_100004AEC(&qword_1009AB4F8) - 8) + 80LL);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  uint64_t v9 = (void *)swift_task_alloc(dword_1009AB504);
  *(void *)(v2 + swift_unknownObjectWeakDestroy(v0 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_100015D58;
  return sub_1003AA0B0(a1, v5, v6, v7, v8);
}

uint64_t sub_1003AB258()
{
  uint64_t v1 = sub_100004AEC(&qword_1009AB4F8);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_release();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_1003AB2D0()
{
  uint64_t v2 = *(void *)(sub_100004AEC(&qword_1009AB4F8) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8LL));
  unint64_t v6 = (void *)swift_task_alloc(dword_1009AB514);
  *(void *)(v1 + swift_unknownObjectWeakDestroy(v0 + 16) = v6;
  *unint64_t v6 = v1;
  v6[1] = sub_100015D58;
  return sub_1003AA270(v4, v5);
}

uint64_t sub_1003AB350()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1003AB374(uint64_t a1)
{
  return sub_1003A9C5C(a1, v1);
}

uint64_t sub_1003AB37C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1003AB3A0()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1003AB3C4()
{
  uint64_t v2 = *(void *)(v0 + 16);
  unint64_t v3 = (void *)swift_task_alloc(dword_1009AB4DC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *unint64_t v3 = v1;
  v3[1] = sub_1000159BC;
  return sub_1003AA694(v2);
}

uint64_t sub_1003AB41C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_1009AB538);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_1009AB538);
  if (qword_10099B3B8 != -1) {
    swift_once(&qword_10099B3B8, sub_1003AD51C);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_100A2A8A0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_1003AB4AC@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = *(void *)(a1 + 56);
  *a2 = v2;
  return swift_retain(v2);
}

_BYTE *sub_1003AB4C8@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X8>)
{
  *a2 = *result;
  return result;
}

uint64_t sub_1003AB4D4()
{
  uint64_t v1 = sub_100004AEC(&qword_1009AB6A8);
  uint64_t v2 = swift_allocObject(v1, 33LL, 7LL);
  *(_OWORD *)(v2 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = (os_unfair_lock_s *)(v3 + 20);
  os_unfair_lock_lock((os_unfair_lock_t)(v3 + 20));
  LOBYTE(v3) = *(_BYTE *)(v3 + 16);
  os_unfair_lock_unlock(v4);
  *(_BYTE *)(v2 + 32) = v3;
  AsyncStreamProvider.stream(initialEvents:)(v2);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003AB560()
{
  uint64_t v0 = sub_100004AEC(&qword_10099E6D8);
  sub_10000A8AC(v0, qword_100A2A7B0);
  sub_10000A720(v0, (uint64_t)qword_100A2A7B0);
  uint64_t v1 = sub_1000372EC(&qword_1009A9020, &qword_10099E6D8, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x696669746E656469LL, 0xEA00000000007265LL, v0, v1);
}

uint64_t sub_1003AB5F4()
{
  uint64_t v0 = sub_100004AEC(&qword_10099E780);
  sub_10000A8AC(v0, qword_100A2A7C8);
  sub_10000A720(v0, (uint64_t)qword_100A2A7C8);
  uint64_t v1 = sub_1000372EC(&qword_10099E7A8, &qword_10099E780, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x657264644163616DLL, 0xEA00000000007373LL, v0, v1);
}

uint64_t sub_1003AB688()
{
  uint64_t v0 = sub_100004AEC(&qword_10099E780);
  sub_10000A8AC(v0, qword_100A2A7E0);
  sub_10000A720(v0, (uint64_t)qword_100A2A7E0);
  uint64_t v1 = sub_1000372EC(&qword_10099E7A8, &qword_10099E780, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000011LL, 0x800000010085FDC0LL, v0, v1);
}

uint64_t sub_1003AB71C()
{
  uint64_t v0 = sub_100004AEC(&qword_1009A9008);
  sub_10000A8AC(v0, qword_100A2A7F8);
  sub_10000A720(v0, (uint64_t)qword_100A2A7F8);
  uint64_t v1 = sub_1000372EC(&qword_1009A9030, &qword_1009A9008, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x754E6C6169726573LL, 0xEC0000007265626DLL, v0, v1);
}

uint64_t sub_1003AB7B4()
{
  uint64_t v0 = sub_100004AEC(&qword_10099E700);
  sub_10000A8AC(v0, qword_100A2A810);
  sub_10000A720(v0, (uint64_t)qword_100A2A810);
  uint64_t v1 = sub_1000372EC(&qword_10099E708, &qword_10099E700, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x6574614472696170LL, 0xE800000000000000LL, v0, v1);
}

uint64_t sub_1003AB844()
{
  uint64_t v0 = sub_100004AEC(&qword_10099E7F8);
  sub_10000A8AC(v0, qword_100A2A828);
  sub_10000A720(v0, (uint64_t)qword_100A2A828);
  uint64_t v1 = sub_1000372EC(&qword_1009AB690, &qword_10099E7F8, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x6449726F646E6576LL, 0xE800000000000000LL, v0, v1);
}

uint64_t sub_1003AB8D4()
{
  uint64_t v0 = sub_100004AEC(&qword_10099E7F8);
  sub_10000A8AC(v0, qword_100A2A840);
  sub_10000A720(v0, (uint64_t)qword_100A2A840);
  uint64_t v1 = sub_1000372EC(&qword_1009AB690, &qword_10099E7F8, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x49746375646F7270LL, 0xE900000000000064LL, v0, v1);
}

uint64_t sub_1003AB968()
{
  uint64_t v0 = sub_100004AEC(&qword_10099E780);
  sub_10000A8AC(v0, qword_100A2A858);
  sub_10000A720(v0, (uint64_t)qword_100A2A858);
  uint64_t v1 = sub_1000372EC(&qword_10099E7A8, &qword_10099E780, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x4B65746176697270LL, 0xEA00000000007965LL, v0, v1);
}

uint64_t sub_1003AB9FC()
{
  uint64_t v0 = sub_100004AEC(&qword_10099E780);
  sub_10000A8AC(v0, qword_100A2A870);
  sub_10000A720(v0, (uint64_t)qword_100A2A870);
  uint64_t v1 = sub_1000372EC(&qword_10099E7A8, &qword_10099E780, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0x6553646572616873LL, 0xEC00000074657263LL, v0, v1);
}

uint64_t sub_1003ABA94()
{
  uint64_t v0 = sub_100004AEC(&qword_10099E780);
  sub_10000A8AC(v0, qword_100A2A888);
  sub_10000A720(v0, (uint64_t)qword_100A2A888);
  uint64_t v1 = sub_1000372EC(&qword_10099E7A8, &qword_10099E780, (uint64_t)&protocol conformance descriptor for Expression<A>);
  return ExpressionType.init(_:)(0xD000000000000015LL, 0x800000010085FDA0LL, v0, v1);
}

uint64_t sub_1003ABB28(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v57 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v57 - v9;
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v57 - v12;
  __chkstk_darwin(v11);
  BOOL v15 = (char *)&v57 - v14;
  uint64_t result = *(void *)(a1 + 56);
  if (result)
  {
    *(void *)(a1 + 56) = 0LL;
    uint64_t result = swift_release();
    if ((*(_BYTE *)(a1 + 48) & 1) == 0)
    {
      uint64_t v60 = v1;
      uint64_t v61 = v13;
      unsigned int v62 = v10;
      sub_1003ABF8C();
      id v63 = [(id)objc_opt_self(NSFileManager) defaultManager];
      if (qword_10099B360 != -1) {
        swift_once(&qword_10099B360, sub_1003AB41C);
      }
      uint64_t v17 = type metadata accessor for Logger(0LL);
      sub_10000A720(v17, (uint64_t)qword_1009AB538);
      uint64_t v18 = (*(uint64_t (**)(char *, char *, uint64_t))(v4 + 16))(v7, v15, v3);
      int v19 = (os_log_s *)Logger.logObject.getter(v18);
      os_log_type_t v20 = static os_log_type_t.default.getter(v19);
      if (os_log_type_enabled(v19, v20))
      {
        uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        uint64_t v59 = (void *)swift_slowAlloc(32LL, -1LL);
        id v65 = v59;
        *(_DWORD *)uint64_t v21 = 136446210;
        uint64_t v58 = v21 + 4;
        uint64_t v22 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v3, v22);
        uint64_t v64 = sub_1003F11D4(v23, v24, (uint64_t *)&v65);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v64, &v65, v58, v21 + 12);
        swift_bridgeObjectRelease();
        uint64_t v25 = *(void (**)(char *, uint64_t))(v4 + 8);
        v25(v7, v3);
        _os_log_impl((void *)&_mh_execute_header, v19, v20, "Purging database: %{public}s", v21, 0xCu);
        uint64_t v26 = v59;
        swift_arrayDestroy(v59, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v26, -1LL, -1LL);
        swift_slowDealloc(v21, -1LL, -1LL);
      }

      else
      {
        uint64_t v25 = *(void (**)(char *, uint64_t))(v4 + 8);
        v25(v7, v3);
      }

      URL._bridgeToObjectiveC()(v27);
      uint64_t v29 = v28;
      id v65 = 0LL;
      unsigned int v30 = [v63 removeItemAtURL:v28 error:&v65];

      id v31 = v65;
      uint64_t v33 = v61;
      uint64_t v32 = v62;
      if (v30)
      {
        id v34 = v65;
      }

      else
      {
        id v36 = v65;
        uint64_t v37 = _convertNSErrorToError(_:)(v31);

        swift_willThrow(v38);
        swift_errorRelease(v37);
      }

      URL._bridgeToObjectiveC()(v35);
      uint64_t v40 = v39;
      id v65 = 0LL;
      unsigned int v41 = [v63 removeItemAtURL:v39 error:&v65];

      id v42 = v65;
      if (v41)
      {
        id v43 = v65;
      }

      else
      {
        id v45 = v65;
        uint64_t v46 = _convertNSErrorToError(_:)(v42);

        swift_willThrow(v47);
        swift_errorRelease(v46);
      }

      URL._bridgeToObjectiveC()(v44);
      uint64_t v49 = v48;
      id v65 = 0LL;
      id v50 = v63;
      unsigned int v51 = [v63 removeItemAtURL:v48 error:&v65];

      id v52 = v65;
      if (v51)
      {
        id v53 = v65;
      }

      else
      {
        id v54 = v65;
        uint64_t v55 = _convertNSErrorToError(_:)(v52);

        swift_willThrow(v56);
        swift_errorRelease(v55);
      }

      v25(v32, v3);
      v25(v33, v3);
      return ((uint64_t (*)(char *, uint64_t))v25)(v15, v3);
    }
  }

  return result;
}

uint64_t sub_1003ABF8C()
{
  uint64_t v0 = type metadata accessor for URL(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  __chkstk_darwin(v0);
  uint64_t v3 = (char *)&v6 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for BeaconStore(0LL);
  sub_1004E6208((uint64_t)v3);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000013LL, 0x800000010085FD20LL, 0LL);
  uint64_t v4 = *(void (**)(char *, uint64_t))(v1 + 8);
  v4(v3, v0);
  sub_1004E6208((uint64_t)v3);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000017LL, 0x800000010085FD40LL, 0LL);
  v4(v3, v0);
  sub_1004E6208((uint64_t)v3);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000017LL, 0x800000010085FD60LL, 0LL);
  return ((uint64_t (*)(char *, uint64_t))v4)(v3, v0);
}

void (*sub_1003AC0D8(uint64_t a1, uint64_t a2))(uint64_t, void *)
{
  if (qword_10099B360 != -1) {
    swift_once(&qword_10099B360, sub_1003AB41C);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = (void *)sub_10000A720(v5, (uint64_t)qword_1009AB538);
  unsigned int v7 = *(unsigned __int8 *)(a1 + 48);
  uint64_t v8 = sub_100007864(&qword_1009AB688, type metadata accessor for StandaloneBeaconDatabase, (uint64_t)&unk_1007FE3F8);
  uint64_t result = static Database.establishConnection(logger:temporary:)(v6, v7, a2, v8);
  if (!v2)
  {
    *(void *)(a1 + 56) = result;
    return (void (*)(uint64_t, void *))swift_release();
  }

  return result;
}

_BYTE *sub_1003AC1A0(_BYTE *result)
{
  *uint64_t result = 1;
  return result;
}

void sub_1003AC1AC(int a1, int a2, uint64_t a3)
{
  uint64_t v4 = v3;
  uint64_t v8 = type metadata accessor for Connection.TransactionMode(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v27 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if ((*(_BYTE *)(v3 + 48) & 1) == 0)
  {
    uint64_t v28 = a3;
    if (qword_10099B360 != -1) {
      swift_once(&qword_10099B360, sub_1003AB41C);
    }
    uint64_t v12 = type metadata accessor for Logger(0LL);
    uint64_t v13 = sub_10000A720(v12, (uint64_t)qword_1009AB538);
    uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
    os_log_type_t v15 = static os_log_type_t.default.getter(v14);
    if (os_log_type_enabled(v14, v15))
    {
      uint64_t v16 = (_DWORD *)swift_slowAlloc(14LL, -1LL);
      uint64_t v27 = v8;
      uint64_t v17 = v16;
      *uint64_t v16 = 67109376;
      int v30 = a1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v30, &v31, v16 + 1, v16 + 2);
      *((_WORD *)v17 + 4) = 1024;
      int v29 = a2;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v29, &v30, (char *)v17 + 10, (char *)v17 + 14);
      _os_log_impl((void *)&_mh_execute_header, v14, v15, "Migrate schema %d -> %d", (uint8_t *)v17, 0xEu);
      uint64_t v18 = v17;
      uint64_t v8 = v27;
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    a3 = v28;
  }

  if (a2 == 1)
  {
    v19._countAndFlagsBits = 0xD00000000000001FLL;
    v19._object = (void *)0x800000010085D940LL;
    Connection.execute(_:)(v19);
    if (!v20)
    {
      v21._object = (void *)0x800000010085D960LL;
      v21._countAndFlagsBits = 0xD000000000000018LL;
      Connection.execute(_:)(v21);
      if (!v23)
      {
        __chkstk_darwin(v22);
        *(&v27 - 2) = a3;
        *(&v27 - 1) = v4;
        (*(void (**)(char *, void, uint64_t))(v9 + 104))( v11,  enum case for Connection.TransactionMode.deferred(_:),  v8);
        Connection.transaction(_:block:)(v11, sub_1003AD9F0, &v27 - 4);
        (*(void (**)(char *, uint64_t))(v9 + 8))(v11, v8);
      }
    }
  }

  else
  {
    unint64_t v24 = sub_100086500();
    uint64_t v25 = swift_allocError(&type metadata for DatabaseError, v24, 0LL, 0LL);
    *(_DWORD *)uint64_t v26 = a2;
    *(_BYTE *)(v26 + 4) = 0;
    swift_willThrow(v25);
  }

uint64_t sub_1003AC458()
{
  uint64_t v1 = Table.create(temporary:ifNotExists:withoutRowid:block:)(0LL, 0LL, 0LL, sub_1003AC610, 0LL);
  Connection.run(_:_:)(v1, v2, _swiftEmptyArrayStorage);
  if (v0) {
    return swift_bridgeObjectRelease();
  }
  swift_bridgeObjectRelease();
  swift_release();
  uint64_t v3 = sub_100004AEC(&qword_10099E6F8);
  uint64_t v4 = swift_allocObject(v3, 72LL, 7LL);
  *(_OWORD *)(v4 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  if (qword_10099B368 != -1) {
    swift_once(&qword_10099B368, sub_1003AB560);
  }
  uint64_t v5 = sub_100004AEC(&qword_10099E6D8);
  uint64_t v6 = sub_10000A720(v5, (uint64_t)qword_100A2A7B0);
  *(void *)(v4 + 56) = v5;
  *(void *)(v4 + 64) = sub_1000372EC( &qword_10099E7D0,  &qword_10099E6D8,  (uint64_t)&protocol conformance descriptor for Expression<A>);
  unsigned int v7 = sub_10000A7C8((void *)(v4 + 32));
  (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(v7, v6, v5);
  uint64_t v8 = Table.createIndex(_:unique:ifNotExists:)(v4, 1LL, 0LL);
  uint64_t v10 = v9;
  swift_bridgeObjectRelease();
  Connection.run(_:_:)(v8, v10, _swiftEmptyArrayStorage);
  swift_bridgeObjectRelease();
  return swift_release();
}

uint64_t sub_1003AC610()
{
  uint64_t v62 = sub_100004AEC(&qword_10099E7A0);
  uint64_t v59 = *(void *)(v62 - 8);
  __chkstk_darwin(v62);
  uint64_t v61 = (char *)&v53 - ((v0 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v63 = sub_100004AEC(&qword_10099E6D0);
  uint64_t v1 = *(void *)(v63 - 8);
  __chkstk_darwin(v63);
  uint64_t v60 = (char *)&v53 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100004AEC(&qword_1009AB698);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v53 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_1009AB6A0);
  __chkstk_darwin(v6);
  id v54 = (char *)&v53 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009A8FF0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v53 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_1009A8FE8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v53 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100004AEC(&qword_1009A8FF8);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v53 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC(&qword_1009A9000);
  __chkstk_darwin(v17);
  Swift::String v19 = (char *)&v53 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B368 != -1) {
    swift_once(&qword_10099B368, sub_1003AB560);
  }
  uint64_t v20 = sub_100004AEC(&qword_10099E6D8);
  uint64_t v21 = sub_10000A720(v20, (uint64_t)qword_100A2A7B0);
  uint64_t v58 = v1;
  uint64_t v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v1 + 56);
  v22(v19, 1LL, 1LL, v63);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v16, 1LL, 1LL, v20);
  uint64_t v23 = type metadata accessor for UUID(0LL);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v21, 0LL, v19, v16, v23, &protocol witness table for UUID);
  sub_100015794((uint64_t)v16, &qword_1009A8FF8);
  sub_100015794((uint64_t)v19, &qword_1009A9000);
  if (qword_10099B370 != -1) {
    swift_once(&qword_10099B370, sub_1003AB5F4);
  }
  uint64_t v24 = sub_100004AEC(&qword_10099E780);
  uint64_t v25 = sub_10000A720(v24, (uint64_t)qword_100A2A7C8);
  v22(v19, 1LL, 1LL, v63);
  uint64_t v26 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v24 - 8) + 56LL);
  v26(v13, 1LL, 1LL, v24);
  uint64_t v57 = v25;
  TableBuilder.column<A>(_:unique:check:defaultValue:)( v25,  0LL,  v19,  v13,  &type metadata for Data,  &protocol witness table for Data);
  sub_100015794((uint64_t)v13, &qword_1009A8FE8);
  sub_100015794((uint64_t)v19, &qword_1009A9000);
  if (qword_10099B378 != -1) {
    swift_once(&qword_10099B378, sub_1003AB688);
  }
  uint64_t v27 = sub_10000A720(v24, (uint64_t)qword_100A2A7E0);
  v22(v19, 1LL, 1LL, v63);
  uint64_t v55 = v26;
  v26(v13, 1LL, 1LL, v24);
  uint64_t v56 = v27;
  TableBuilder.column<A>(_:unique:check:defaultValue:)( v27,  0LL,  v19,  v13,  &type metadata for Data,  &protocol witness table for Data);
  sub_100015794((uint64_t)v13, &qword_1009A8FE8);
  sub_100015794((uint64_t)v19, &qword_1009A9000);
  if (qword_10099B380 != -1) {
    swift_once(&qword_10099B380, sub_1003AB71C);
  }
  uint64_t v28 = sub_100004AEC(&qword_1009A9008);
  uint64_t v29 = sub_10000A720(v28, (uint64_t)qword_100A2A7F8);
  v22(v19, 1LL, 1LL, v63);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v28 - 8) + 56LL))(v10, 1LL, 1LL, v28);
  TableBuilder.column<A>(_:unique:check:defaultValue:)( v29,  0LL,  v19,  v10,  &type metadata for String,  &protocol witness table for String);
  sub_100015794((uint64_t)v10, &qword_1009A8FF0);
  sub_100015794((uint64_t)v19, &qword_1009A9000);
  if (qword_10099B388 != -1) {
    swift_once(&qword_10099B388, sub_1003AB7B4);
  }
  uint64_t v30 = sub_100004AEC(&qword_10099E700);
  uint64_t v31 = sub_10000A720(v30, (uint64_t)qword_100A2A810);
  v22(v19, 1LL, 1LL, v63);
  uint64_t v32 = (uint64_t)v54;
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v30 - 8) + 56LL))(v54, 1LL, 1LL, v30);
  uint64_t v33 = type metadata accessor for Date(0LL);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v31, 0LL, v19, v32, v33, &protocol witness table for Date);
  sub_100015794(v32, &qword_1009AB6A0);
  sub_100015794((uint64_t)v19, &qword_1009A9000);
  if (qword_10099B390 != -1) {
    swift_once(&qword_10099B390, sub_1003AB844);
  }
  uint64_t v34 = sub_100004AEC(&qword_10099E7F8);
  uint64_t v35 = sub_10000A720(v34, (uint64_t)qword_100A2A828);
  v22(v19, 1LL, 1LL, v63);
  id v36 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v34 - 8) + 56LL);
  v36(v5, 1LL, 1LL, v34);
  unint64_t v37 = sub_1000869F0();
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v35, 0LL, v19, v5, &type metadata for UInt32, v37);
  sub_100015794((uint64_t)v5, &qword_1009AB698);
  sub_100015794((uint64_t)v19, &qword_1009A9000);
  if (qword_10099B398 != -1) {
    swift_once(&qword_10099B398, sub_1003AB8D4);
  }
  uint64_t v38 = sub_10000A720(v34, (uint64_t)qword_100A2A840);
  v22(v19, 1LL, 1LL, v63);
  v36(v5, 1LL, 1LL, v34);
  TableBuilder.column<A>(_:unique:check:defaultValue:)(v38, 0LL, v19, v5, &type metadata for UInt32, v37);
  sub_100015794((uint64_t)v5, &qword_1009AB698);
  sub_100015794((uint64_t)v19, &qword_1009A9000);
  if (qword_10099B3A0 != -1) {
    swift_once(&qword_10099B3A0, sub_1003AB968);
  }
  uint64_t v39 = sub_10000A720(v24, (uint64_t)qword_100A2A858);
  v22(v19, 1LL, 1LL, v63);
  uint64_t v40 = v55;
  v55(v13, 1LL, 1LL, v24);
  id v54 = (char *)v39;
  TableBuilder.column<A>(_:unique:check:defaultValue:)( v39,  0LL,  v19,  v13,  &type metadata for Data,  &protocol witness table for Data);
  sub_100015794((uint64_t)v13, &qword_1009A8FE8);
  sub_100015794((uint64_t)v19, &qword_1009A9000);
  if (qword_10099B3A8 != -1) {
    swift_once(&qword_10099B3A8, sub_1003AB9FC);
  }
  uint64_t v41 = sub_10000A720(v24, (uint64_t)qword_100A2A870);
  v22(v19, 1LL, 1LL, v63);
  v40(v13, 1LL, 1LL, v24);
  uint64_t v53 = v41;
  TableBuilder.column<A>(_:unique:check:defaultValue:)( v41,  0LL,  v19,  v13,  &type metadata for Data,  &protocol witness table for Data);
  sub_100015794((uint64_t)v13, &qword_1009A8FE8);
  sub_100015794((uint64_t)v19, &qword_1009A9000);
  if (qword_10099B3B0 != -1) {
    swift_once(&qword_10099B3B0, sub_1003ABA94);
  }
  uint64_t v42 = sub_10000A720(v24, (uint64_t)qword_100A2A888);
  uint64_t v43 = v63;
  v22(v19, 1LL, 1LL, v63);
  v40(v13, 1LL, 1LL, v24);
  TableBuilder.column<A>(_:unique:check:defaultValue:)( v42,  0LL,  v19,  v13,  &type metadata for Data,  &protocol witness table for Data);
  sub_100015794((uint64_t)v13, &qword_1009A8FE8);
  sub_100015794((uint64_t)v19, &qword_1009A9000);
  uint64_t v44 = sub_1000372EC(&qword_10099E7A8, &qword_10099E780, (uint64_t)&protocol conformance descriptor for Expression<A>);
  id v45 = v61;
  uint64_t v46 = ExpressionType<>.length.getter(v24, v44);
  uint64_t v64 = static MACAddress.length.getter(v46);
  uint64_t v47 = v60;
  == infix<A>(_:_:)( v45,  &v64,  &type metadata for Int,  &protocol witness table for Int,  &protocol witness table for Int64);
  uint64_t v48 = *(void (**)(char *, uint64_t))(v59 + 8);
  uint64_t v49 = v62;
  v48(v45, v62);
  TableBuilder.check(_:)(v47);
  id v50 = *(void (**)(char *, uint64_t))(v58 + 8);
  v50(v47, v43);
  uint64_t v51 = ExpressionType<>.length.getter(v24, v44);
  uint64_t v64 = static MACAddress.length.getter(v51);
  == infix<A>(_:_:)( v45,  &v64,  &type metadata for Int,  &protocol witness table for Int,  &protocol witness table for Int64);
  v48(v45, v49);
  TableBuilder.check(_:)(v47);
  v50(v47, v43);
  ExpressionType<>.length.getter(v24, v44);
  uint64_t v64 = 85LL;
  == infix<A>(_:_:)( v45,  &v64,  &type metadata for Int,  &protocol witness table for Int,  &protocol witness table for Int64);
  v48(v45, v49);
  TableBuilder.check(_:)(v47);
  v50(v47, v43);
  ExpressionType<>.length.getter(v24, v44);
  uint64_t v64 = 32LL;
  == infix<A>(_:_:)( v45,  &v64,  &type metadata for Int,  &protocol witness table for Int,  &protocol witness table for Int64);
  v48(v45, v49);
  TableBuilder.check(_:)(v47);
  return ((uint64_t (*)(char *, uint64_t))v50)(v47, v43);
}

uint64_t sub_1003AD148()
{
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC12searchpartyd24StandaloneBeaconDatabase_standaloneBeacon;
  uint64_t v2 = type metadata accessor for Table(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

uint64_t sub_1003AD1B8()
{
  return type metadata accessor for StandaloneBeaconDatabase(0LL);
}

uint64_t type metadata accessor for StandaloneBeaconDatabase(uint64_t a1)
{
  uint64_t result = qword_1009AB578;
  if (!qword_1009AB578) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for StandaloneBeaconDatabase);
  }
  return result;
}

uint64_t sub_1003AD1FC(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[1] = (char *)&value witness table for Builtin.NativeObject + 64;
  void v4[2] = (char *)&value witness table for Builtin.Int32 + 64;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  void v4[4] = &unk_1007FE3A0;
  v4[5] = &unk_1007FE3A0;
  void v4[6] = &unk_1007FE3B8;
  uint64_t result = type metadata accessor for Table(319LL);
  if (v3 <= 0x3F)
  {
    void v4[7] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 8LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1003AD2A0()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = sub_100004AEC(&qword_10099E758);
  OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_1003AD754, v0, v1, (char *)&type metadata for () + 8, v2);
  return v4;
}

uint64_t sub_1003AD308()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = v1 + 4;
  unint64_t v3 = v1 + 5;
  os_unfair_lock_lock(v1 + 5);
  sub_1003AB4C8(v2, &v5);
  os_unfair_lock_unlock(v3);
  return v5;
}

uint64_t sub_1003AD368()
{
  return *(unsigned int *)(v0 + 32);
}

uint64_t sub_1003AD370()
{
  return *(unsigned __int8 *)(v0 + 48);
}

uint64_t sub_1003AD378()
{
  return *(unsigned __int8 *)(v0 + 49);
}

uint64_t sub_1003AD380()
{
  return sub_1003AD5A0();
}

uint64_t sub_1003AD394()
{
  return sub_1003ABF8C();
}

void sub_1003AD3A8(int a1, int a2, uint64_t a3)
{
}

uint64_t sub_1003AD3BC(uint64_t a1, uint64_t a2)
{
  return sub_1003AD3F4(a1, a2, (uint64_t)sub_100086B6C);
}

uint64_t sub_1003AD3D8(uint64_t a1, uint64_t a2)
{
  return sub_1003AD3F4(a1, a2, (uint64_t)sub_100086B84);
}

uint64_t sub_1003AD3F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = v3[5];
  v7[3] = *v3;
  return OSAllocatedUnfairLock.callAsFunction<A>(_:)( a3,  v7,  v5,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8);
}

uint64_t sub_1003AD434()
{
  uint64_t v1 = *(os_unfair_lock_s **)(v0 + 16);
  uint64_t v2 = v1 + 4;
  unint64_t v3 = v1 + 5;
  os_unfair_lock_lock(v1 + 5);
  sub_1003AC1A0(v2);
  os_unfair_lock_unlock(v3);
  v5[0] = 1;
  return AsyncStreamProvider.yield(value:transaction:)(v5, 0LL);
}

uint64_t sub_1003AD4A4(uint64_t a1)
{
  uint64_t WitnessTable = swift_getWitnessTable(&unk_1007FE3F8, a1);
  return Database.description.getter(a1, WitnessTable);
}

uint64_t sub_1003AD4E0(uint64_t a1)
{
  uint64_t result = sub_100007864(&qword_10099E8A8, type metadata accessor for StandaloneBeaconDatabase, (uint64_t)&unk_1007FE3D0);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1003AD51C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A8A0);
  sub_10000A720(v0, (uint64_t)qword_100A2A8A0);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000018LL,  0x80000001007FE360LL);
}

uint64_t sub_1003AD5A0()
{
  uint64_t v2 = type metadata accessor for Keychain.DataProtectionClass(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v12 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = static Keychain.data(account:service:)(0x6170686372616573LL, 0xEB00000000797472LL, 0xD000000000000010LL);
  if (!v1)
  {
    if (v7 >> 60 == 15)
    {
      uint64_t v0 = static Data.random(bytes:)(32LL);
      unint64_t v9 = v8;
      v12[0] = v0;
      v12[1] = v8;
      (*(void (**)(char *, void, uint64_t))(v3 + 104))( v5,  enum case for Keychain.DataProtectionClass.c(_:),  v2);
      sub_10001736C(v0, v9);
      unint64_t v10 = sub_100042F34();
      static Keychain.set<A>(data:account:service:dataProtectionClass:)( v12,  0x6170686372616573LL,  0xEB00000000797472LL,  0xD000000000000010LL,  0x800000010085FD80LL,  v5,  &type metadata for Data,  v10);
      (*(void (**)(char *, uint64_t))(v3 + 8))(v5, v2);
      sub_100016F9C(v0, v9);
    }

    else
    {
      return v6;
    }
  }

  return v0;
}

uint64_t sub_1003AD754@<X0>(void *a1@<X8>)
{
  uint64_t v2 = *(void *)(v1 + 56);
  *a1 = v2;
  return swift_retain(v2);
}

uint64_t sub_1003AD770()
{
  return 1LL;
}

uint64_t sub_1003AD9F0()
{
  return sub_1003AC458();
}

Swift::Int sub_1003ADA08()
{
  return Hasher._finalize()();
}

uint64_t sub_1003ADA5C(uint64_t a1)
{
  return String.hash(into:)(a1, 0xD00000000000002ELL, 0x800000010084E2B0LL);
}

Swift::Int sub_1003ADA78(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1003ADAC8@<X0>(uint64_t *a1@<X0>, BOOL *a2@<X8>)
{
  v3._countAndFlagsBits = *a1;
  uint64_t v4 = (void *)a1[1];
  v3._object = v4;
  Swift::Int v5 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1009348E0, v3);
  uint64_t result = swift_bridgeObjectRelease(v4);
  *a2 = v5 != 0;
  return result;
}

void sub_1003ADB18(void *a1@<X8>)
{
  *a1 = 0xD00000000000002ELL;
  a1[1] = 0x800000010084E2B0LL;
}

uint64_t sub_1003ADBDC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  *(void *)(v5 + 120) = a4;
  *(void *)(v5 + 128) = a5;
  return swift_task_switch(sub_1003ADBF4, 0LL, 0LL);
}

uint64_t sub_1003ADBF4()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001CEB4((uint64_t)&xmmword_1009BED80, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    Swift::String v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C860 + dword_10099C860);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C864);
    *(void *)(v0 + 136) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1003ADCD8;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1003ADCD8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 136LL);
  *(void *)(*(void *)v1 + 144LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003ADD34, 0LL, 0LL);
}

uint64_t sub_1003ADD34()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 144))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc(dword_1009AD304);
    *(void *)(v0 + 152) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1003ADE1C;
    return sub_10040B7E4(0LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    unint64_t v4 = sub_1000157D0();
    uint64_t v5 = swift_allocError(&type metadata for DaemonError, v4, 0LL, 0LL);
    *uint64_t v6 = 0xD00000000000001DLL;
    v6[1] = 0x80000001008509B0LL;
    swift_willThrow(v5);
    unint64_t v7 = *(void (**)(void, uint64_t))(v0 + 120);
    swift_errorRetain(v5);
    v7(0LL, v5);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1003ADE1C(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 152);
  *(void *)(*v2 + 160) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_1003ADEE4;
  }

  else
  {
    *(void *)(v4 + 168) = a1;
    uint64_t v6 = sub_1003ADE90;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1003ADE90()
{
  uint64_t v1 = *(void **)(v0 + 168);
  uint64_t v2 = *(void *)(v0 + 144);
  (*(void (**)(void *, void))(v0 + 120))(v1, 0LL);
  swift_release(v2);

  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003ADEE4()
{
  uint64_t v1 = *(void *)(v0 + 160);
  uint64_t v2 = *(void (**)(void, uint64_t))(v0 + 120);
  swift_errorRetain(v1);
  v2(0LL, v1);
  swift_errorRelease(v1);
  swift_errorRelease(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

id sub_1003ADFF4()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for SchedulerTrampoline();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for SchedulerTrampoline()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartydP33_8F16B571022752B5A0333344EAF60C1619SchedulerTrampoline);
}

id sub_1003AE048()
{
  uint64_t v1 = *(void **)(v0 + 48);
  if (v1)
  {
    id v2 = *(id *)(v0 + 48);
  }

  else
  {
    id v3 = [objc_allocWithZone((Class)type metadata accessor for SchedulerTrampoline()) init];
    uint64_t v4 = *(void **)(v0 + 48);
    *(void *)(v0 + 48) = v3;
    id v2 = v3;

    uint64_t v1 = 0LL;
  }

  id v5 = v1;
  return v2;
}

uint64_t sub_1003AE0B0()
{
  uint64_t v1 = *v0;
  uint64_t v2 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v18 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)v17 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)v17 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = PressuredExitTransactionManager.begin(_:)("com.apple.icloud.searchpartyd.schedulerservice.startup", 54LL, 2LL);
  v17[1] = v0[4];
  unint64_t v10 = (void *)swift_allocObject(&unk_100955C70, 40LL, 7LL);
  void v10[2] = v0;
  void v10[3] = v9;
  v10[4] = v1;
  aBlock[4] = sub_1003AEA30;
  aBlock[5] = v10;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100955C88;
  uint64_t v11 = _Block_copy(aBlock);
  swift_retain();
  uint64_t v12 = swift_retain();
  static DispatchQoS.unspecified.getter(v12);
  Swift::String v19 = _swiftEmptyArrayStorage;
  uint64_t v13 = sub_100007864( (unint64_t *)&qword_10099FAB0,  (uint64_t (*)(uint64_t))&type metadata accessor for DispatchWorkItemFlags,  (uint64_t)&protocol conformance descriptor for DispatchWorkItemFlags);
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  uint64_t v15 = sub_100090114((unint64_t *)&qword_10099FAC0, (uint64_t *)&unk_1009AB860);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v19, v14, v15, v2, v13);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v8, v4, v11);
  _Block_release(v11);
  swift_release();
  (*(void (**)(char *, uint64_t))(v18 + 8))(v4, v2);
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  return swift_release();
}

uint64_t sub_1003AE2D8(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for MachServiceName(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for XPCServiceDescription(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  unint64_t v8 = (char *)&v12 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  MachServiceName.init(_:)(0xD000000000000027LL, 0x800000010085FEC0LL);
  id v9 = sub_1003AE048();
  if (qword_10099B3C0 != -1) {
    swift_once(&qword_10099B3C0, sub_1003AE440);
  }
  id v10 = (id)qword_1009AB6B0;
  swift_retain();
  XPCServiceDescription.init(name:options:exportedObject:exportedInterface:shouldAccept:interruptionHandler:invalidationHandler:)( v4,  0LL,  v9,  v10,  sub_1003AEA54,  a1,  0LL,  0LL,  0LL,  0LL);
  XPCSessionManager.register(service:)(v8);
  Transaction.end()();
  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1003AE440()
{
  id v0 =  [(id)objc_opt_self(NSXPCInterface) interfaceWithProtocol:&OBJC_PROTOCOL___SPSchedulerXPCProtocol];
  uint64_t v1 = sub_1004B8468();
  uint64_t v2 = swift_allocObject( v1,  ((*(unsigned int *)(v1 + 48) + 7LL) & 0x1FFFFFFF8LL) + 8,  *(unsigned __int16 *)(v1 + 52) | 7LL);
  *(_OWORD *)(v2 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(v2 + 32) = sub_100022898( 0LL,  (unint64_t *)&unk_1009AB870,  &OBJC_CLASS___SPSchedulerInformation_ptr);
  NSXPCInterface.setClasses(_:for:argumentIndex:ofReply:)( v2,  "schedulePublishWakeWithInformation:completion:",  0LL,  0LL);
  uint64_t result = swift_bridgeObjectRelease();
  qword_1009AB6B0 = (uint64_t)v0;
  return result;
}

uint64_t sub_1003AE4FC(void *a1)
{
  uint64_t v3 = static os_log_type_t.default.getter(a1);
  if (qword_10099B730 != -1) {
    swift_once(&qword_10099B730, sub_10065134C);
  }
  uint64_t v4 = qword_100A2B040;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v6 = swift_allocObject(v5, 112LL, 7LL);
  *(_OWORD *)(v6 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v8 = *(void *)(v1 + 16);
  uint64_t v7 = *(void *)(v1 + 24);
  *(void *)(v6 + 56) = &type metadata for String;
  *(void *)(v6 + 64) = sub_1000226F4();
  *(void *)(v6 + 32) = v8;
  *(void *)(v6 + 40) = v7;
  *(void *)(v6 + 96) = sub_100022898(0LL, (unint64_t *)&unk_1009AB840, &OBJC_CLASS___NSXPCConnection_ptr);
  *(void *)(v6 + 104) = sub_10009BE70();
  *(void *)(v6 + 72) = a1;
  swift_bridgeObjectRetain(v7);
  id v9 = a1;
  os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v4, "in custom shouldAccept (%@) for %@", 34LL, 2LL, v6);
  swift_bridgeObjectRelease();
  unint64_t v10 = sub_1003AE9C0();
  return NSXPCConnection.hasEntitlement<A>(_:)(v10, &type metadata for SchedulerEntitlement, v10) & 1;
}

uint64_t sub_1003AE624()
{
  swift_release(*(void *)(v0 + 40));
  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd16SchedulerService_transactionManager;
  uint64_t v2 = type metadata accessor for PressuredExitTransactionManager(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t sub_1003AE694()
{
  return type metadata accessor for SchedulerService(0LL);
}

uint64_t type metadata accessor for SchedulerService(uint64_t a1)
{
  uint64_t result = qword_1009AB770;
  if (!qword_1009AB770) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SchedulerService);
  }
  return result;
}

uint64_t sub_1003AE6D8(uint64_t a1)
{
  v4[0] = &unk_1007FE488;
  v4[1] = (char *)&value witness table for Builtin.UnknownObject + 64;
  void v4[2] = (char *)&value witness table for Builtin.NativeObject + 64;
  v4[3] = &unk_1007FE4A0;
  uint64_t result = type metadata accessor for PressuredExitTransactionManager(319LL);
  if (v3 <= 0x3F)
  {
    void v4[4] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

void *sub_1003AE774()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v19 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v1[2] = 0xD000000000000010LL;
  v1[3] = 0x80000001007FE450LL;
  sub_100022898(0LL, (unint64_t *)&qword_1009A0CC0, &OBJC_CLASS___OS_dispatch_queue_ptr);
  uint64_t v12 = (*(uint64_t (**)(char *, void, uint64_t))(v9 + 104))( v11,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v8);
  static DispatchQoS.unspecified.getter(v12);
  uint64_t v20 = _swiftEmptyArrayStorage;
  uint64_t v13 = sub_100007864( (unint64_t *)&qword_10099BAA0,  (uint64_t (*)(uint64_t))&type metadata accessor for OS_dispatch_queue.Attributes,  (uint64_t)&protocol conformance descriptor for OS_dispatch_queue.Attributes);
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
  uint64_t v15 = sub_100090114((unint64_t *)&qword_10099BAB0, (uint64_t *)&unk_1009A0CD0);
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v14, v15, v2, v13);
  v1[4] = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD00000000000002FLL,  0x800000010085FEF0LL,  v7,  v4,  v11,  0LL);
  uint64_t v16 = type metadata accessor for XPCSessionManager(0LL);
  swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
  uint64_t v17 = XPCSessionManager.init(name:)(0xD000000000000010LL, 0x80000001007FE450LL);
  v1[5] = v17;
  v1[6] = 0LL;
  PressuredExitTransactionManager.init()(v17);
  return v1;
}

uint64_t sub_1003AE9A0()
{
  return sub_1003AE0B0();
}

unint64_t sub_1003AE9C0()
{
  unint64_t result = qword_1009AB850;
  if (!qword_1009AB850)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FE640, &type metadata for SchedulerEntitlement);
    atomic_store(result, (unint64_t *)&qword_1009AB850);
  }

  return result;
}

uint64_t sub_1003AEA04()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1003AEA30()
{
  return sub_1003AE2D8(*(void *)(v0 + 16));
}

uint64_t sub_1003AEA3C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1003AEA4C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1003AEA58()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1003AEA7C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for TaskPriority(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1LL, 1LL, v7);
  uint64_t v9 = (void *)swift_allocObject(&unk_100955CE8, 48LL, 7LL);
  v9[2] = 0LL;
  uint64_t v10 = v9 + 2;
  v9[3] = 0LL;
  v9[4] = a1;
  v9[5] = a2;
  LODWORD(a1) = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7);
  uint64_t v11 = swift_retain();
  if ((_DWORD)a1 == 1)
  {
    sub_1003AECDC((uint64_t)v6);
    uint64_t v12 = 0LL;
    uint64_t v13 = 0LL;
    uint64_t v14 = 7168LL;
  }

  else
  {
    unsigned __int8 v15 = TaskPriority.rawValue.getter(v11);
    (*(void (**)(char *, uint64_t))(v8 + 8))(v6, v7);
    uint64_t v14 = v15 | 0x1C00LL;
    uint64_t v16 = *v10;
    if (*v10)
    {
      uint64_t v17 = v9[3];
      uint64_t ObjectType = swift_getObjectType(*v10);
      swift_unknownObjectRetain(v16);
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v17);
      uint64_t v13 = v19;
      swift_unknownObjectRelease(v16);
    }

    else
    {
      uint64_t v12 = 0LL;
      uint64_t v13 = 0LL;
    }
  }

  uint64_t v20 = swift_allocObject(&unk_100955D10, 32LL, 7LL);
  *(void *)(v20 + swift_weakDestroy(v0 + 16) = &unk_1009AB888;
  *(void *)(v20 + 24) = v9;
  if (v13 | v12)
  {
    v23[0] = 0LL;
    v23[1] = 0LL;
    uint64_t v21 = v23;
    v23[2] = v12;
    v23[3] = v13;
  }

  else
  {
    uint64_t v21 = 0LL;
  }

  swift_task_create(v14, v21, (char *)&type metadata for () + 8, &unk_1009AB890, v20);
  return swift_release();
}

uint64_t sub_1003AEC50()
{
  return swift_deallocObject(v0, 48LL, 7LL);
}

uint64_t sub_1003AEC7C()
{
  uint64_t v2 = swift_task_alloc(dword_1009AB884);
  __int128 v3 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *(void *)uint64_t v2 = v1;
  *(void *)(v2 + 8) = sub_1000159BC;
  *(_OWORD *)(v2 + 120) = v3;
  return swift_task_switch(sub_1003ADBF4, 0LL, 0LL);
}

uint64_t sub_1003AECDC(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A9BF0);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1003AED1C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

unint64_t sub_1003AED40()
{
  unint64_t result = qword_1009AB8A8;
  if (!qword_1009AB8A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FE600, &type metadata for SchedulerTrampoline.Error);
    atomic_store(result, (unint64_t *)&qword_1009AB8A8);
  }

  return result;
}

ValueMetadata *type metadata accessor for SchedulerTrampoline.Error()
{
  return &type metadata for SchedulerTrampoline.Error;
}

uint64_t _s12searchpartyd19SchedulerTrampolineC5ErrorOwst_0(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1003AEDD8 + 4 * byte_1007FE420[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1003AEDF8 + 4 * byte_1007FE425[v4]))();
  }
}

_BYTE *sub_1003AEDD8(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1003AEDF8(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1003AEE00(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1003AEE08(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1003AEE10(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1003AEE18(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for SchedulerEntitlement()
{
  return &type metadata for SchedulerEntitlement;
}

unint64_t sub_1003AEE38()
{
  unint64_t result = qword_1009AB8B0;
  if (!qword_1009AB8B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FE570, &type metadata for SchedulerEntitlement);
    atomic_store(result, (unint64_t *)&qword_1009AB8B0);
  }

  return result;
}

unint64_t sub_1003AEE80()
{
  unint64_t result = qword_1009AB8B8;
  if (!qword_1009AB8B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FE5D8, &type metadata for SchedulerTrampoline.Error);
    atomic_store(result, (unint64_t *)&qword_1009AB8B8);
  }

  return result;
}

unint64_t sub_1003AEEC8()
{
  unint64_t result = qword_1009AB8C0;
  if (!qword_1009AB8C0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FE4F8, &type metadata for SchedulerEntitlement);
    atomic_store(result, (unint64_t *)&qword_1009AB8C0);
  }

  return result;
}

uint64_t sub_1003AEF0C@<X0>(uint64_t a1@<X8>)
{
  id v2 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  NSString v3 = String._bridgeToObjectiveC()();
  id v4 = [v2 objectForKey:v3];

  if (v4)
  {
    _bridgeAnyObjectToAny(_:)(v9, v4);
    swift_unknownObjectRelease(v4);
  }

  else
  {
    memset(v9, 0, sizeof(v9));
  }

  sub_1000F3128((uint64_t)v9, (uint64_t)v10);
  if (v11)
  {
    uint64_t v5 = type metadata accessor for Date(0LL);
    int v6 = swift_dynamicCast(a1, v10, (char *)&type metadata for Any + 8, v5, 6LL);
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL))( a1,  v6 ^ 1u,  1LL,  v5);
  }

  else
  {
    sub_100015794((uint64_t)v10, &qword_10099E200);
    uint64_t v8 = type metadata accessor for Date(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))( a1,  1LL,  1LL,  v8);
  }

uint64_t sub_1003AF058()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1009AB8FC);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1003AF0A0;
  return sub_1003AF1CC();
}

uint64_t sub_1003AF0A0()
{
  uint64_t v3 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 16));
  return (*(uint64_t (**)(BOOL))(v3 + 8))(v0 == 0);
}

void sub_1003AF0F8()
{
  if (qword_10099BA30 != -1) {
    swift_once(&qword_10099BA30, sub_100795FD8);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2B7D8);
  id v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    id v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)id v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Skipped publishing own device beacons due to throttle.", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }
}

uint64_t sub_1003AF1CC()
{
  v1[45] = v0;
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_10099D720);
  v1[46] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for Date(0LL);
  v1[47] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[48] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v1[49] = v5;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v1[50] = swift_task_alloc(v6);
  v1[51] = swift_task_alloc(v6);
  v1[52] = swift_task_alloc(v6);
  return swift_task_switch(sub_1003AF270, v0, 0LL);
}

uint64_t sub_1003AF270()
{
  if (qword_10099BA30 != -1) {
    swift_once(&qword_10099BA30, sub_100795FD8);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2B7D8);
  v0[53] = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Start publishing own device beacons.", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = v0[52];

  static Date.trustedNow.getter(v6);
  uint64_t v7 = (void *)swift_task_alloc(dword_1009AB914);
  v0[54] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1003AF37C;
  return sub_1003B4C9C();
}

uint64_t sub_1003AF37C()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 432);
  *(void *)(*v1 + 440) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    os_log_type_t v4 = sub_1003B0A54;
  }
  else {
    os_log_type_t v4 = sub_1003AF3E0;
  }
  return swift_task_switch(v4, *(void *)(v2 + 360), 0LL);
}

uint64_t sub_1003AF3E0(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    os_log_type_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Local disk fetch completed.", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v6 = *(void *)(v1 + 376);
  uint64_t v5 = *(void *)(v1 + 384);
  uint64_t v7 = *(void *)(v1 + 368);

  sub_1003AEF0C(v7);
  int v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v7, 1LL, v6);
  uint64_t v9 = *(void *)(v1 + 408);
  if (v8 == 1)
  {
    uint64_t v10 = *(void *)(v1 + 368);
    static Date.distantPast.getter(v9);
    sub_100015794(v10, (uint64_t *)&unk_10099D720);
  }

  else
  {
    (*(void (**)(uint64_t, void, void))(*(void *)(v1 + 384) + 32LL))( v9,  *(void *)(v1 + 368),  *(void *)(v1 + 376));
  }

  uint64_t v11 = *(void *)(v1 + 360);
  uint64_t v12 = type metadata accessor for DeviceBeaconPayloadPublisher();
  *(void *)(v1 + 40) = v12;
  *(void *)(v1 + 48) = &off_100955F18;
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v11;
  swift_retain();
  uint64_t v13 = sub_1004C635C(0LL, 1LL, 1, _swiftEmptyArrayStorage);
  unint64_t v15 = v13[2];
  unint64_t v14 = v13[3];
  if (v15 >= v14 >> 1) {
    uint64_t v13 = sub_1004C635C((void *)(v14 > 1), v15 + 1, 1, v13);
  }
  *(void *)(v1 + 448) = v13;
  uint64_t v16 = sub_100037298(v1 + 16, v12);
  uint64_t v17 = *(void *)(v12 - 8);
  uint64_t v18 = (uint64_t *)swift_task_alloc((*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(uint64_t *, uint64_t, uint64_t))(v17 + 16))(v18, v16, v12);
  uint64_t v19 = *v18;
  *(void *)(v1 + 80) = v12;
  *(void *)(v1 + 88) = &off_100955F18;
  *(void *)(v1 + 56) = v19;
  v13[2] = v15 + 1;
  sub_100012EC0((__int128 *)(v1 + 56), (uint64_t)&v13[5 * v15 + 4]);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v1 + 16));
  swift_task_dealloc(v18);
  *(void *)(v1 + 312) = _swiftEmptyArrayStorage;
  uint64_t v20 = v13[2];
  *(void *)(v1 + 456) = v20;
  if (v20)
  {
    *(void *)(v1 + 464) = 0LL;
    *(void *)(v1 + 472) = _swiftEmptyArrayStorage;
    sub_100013044(*(void *)(v1 + 448) + 32LL, v1 + 136);
    sub_100012ED8((void *)(v1 + 136), *(void *)(v1 + 160));
    uint64_t v21 = (void *)swift_task_alloc(dword_1009AB904);
    *(void *)(v1 + 480) = v21;
    *uint64_t v21 = v1;
    v21[1] = sub_1003AF8CC;
    return sub_1003B1CB0();
  }

  else
  {
    swift_bridgeObjectRelease();
    *(void *)(v1 + 504) = _swiftEmptyArrayStorage;
    uint64_t v23 = *(void *)(v1 + 312);
    swift_bridgeObjectRetain(v23);
    uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
    os_log_type_t v26 = static os_log_type_t.default.getter(v25);
    if (os_log_type_enabled(v25, v26))
    {
      uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v27 = 134217984;
      *(void *)(v1 + 352) = *(void *)(v23 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 352, v1 + 360, v27 + 4, v27 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v25, v26, "Got %ld payloads to publish for own devices.", v27, 0xCu);
      swift_slowDealloc(v27, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease();
    }

    swift_beginAccess(v1 + 312, v1 + 280, 0LL, 0LL);
    uint64_t v28 = *(void *)(v1 + 312);
    *(void *)(v1 + 512) = v28;
    if (*(void *)(v28 + 16))
    {
      uint64_t v29 = dword_1009ABA7C;
      swift_bridgeObjectRetain(v28);
      uint64_t v30 = (void *)swift_task_alloc(v29);
      *(void *)(v1 + 520) = v30;
      *uint64_t v30 = v1;
      v30[1] = sub_1003AFE70;
      return sub_1003B12A8(v28);
    }

    else
    {
      uint64_t v31 = swift_bridgeObjectRelease();
      uint64_t v32 = (os_log_s *)Logger.logObject.getter(v31);
      os_log_type_t v33 = static os_log_type_t.default.getter(v32);
      if (os_log_type_enabled(v32, v33))
      {
        uint64_t v34 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v34 = 0;
        _os_log_impl((void *)&_mh_execute_header, v32, v33, "No observations to publish for owned devices.", v34, 2u);
        swift_slowDealloc(v34, -1LL, -1LL);
      }

      *(void *)(v1 + 536) = 0LL;
      id v36 = (os_log_s *)Logger.logObject.getter(v35);
      os_log_type_t v37 = static os_log_type_t.default.getter(v36);
      if (os_log_type_enabled(v36, v37))
      {
        uint64_t v38 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)uint64_t v38 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "Result of SML unknown on this platform, returning false.",  v38,  2u);
        swift_slowDealloc(v38, -1LL, -1LL);
      }

      uint64_t v39 = (void *)swift_task_alloc(dword_1009AB90C);
      *(void *)(v1 + 544) = v39;
      *uint64_t v39 = v1;
      v39[1] = sub_1003B00A0;
      return sub_1003B3FA0(*(void *)(v1 + 408));
    }
  }

uint64_t sub_1003AF8CC(uint64_t a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 480);
  *(void *)(*v2 + 488) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = *(void *)(v4 + 360);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_1003AFDE8;
    uint64_t v8 = v6;
  }

  else
  {
    uint64_t v8 = *(void *)(v4 + 360);
    *(void *)(v4 + 496) = a1;
    uint64_t v7 = sub_1003AF968;
  }

  return swift_task_switch(v7, v8, 0LL);
}

uint64_t sub_1003AF968()
{
  uint64_t v1 = *(void *)(v0 + 496);
  uint64_t v39 = *(void *)(v0 + 472);
  uint64_t v2 = *(void *)(v0 + 416);
  uint64_t v3 = *(void *)(v0 + 392);
  uint64_t v4 = *(void *)(v0 + 400);
  uint64_t v6 = *(void *)(v0 + 376);
  uint64_t v5 = *(void *)(v0 + 384);
  swift_bridgeObjectRetain(v1);
  sub_100185C94(v7);
  sub_100013044(v0 + 136, v0 + 176);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v4, v2, v6);
  uint64_t v8 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v9 = (v8 + 64) & ~v8;
  uint64_t v10 = swift_allocObject(&unk_100955FF0, v9 + v3, v8 | 7);
  sub_100012EC0((__int128 *)(v0 + 176), v10 + 16);
  *(void *)(v10 + 56) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v10 + v9, v4, v6);
  uint64_t v11 = swift_allocObject(&unk_100956018, 32LL, 7LL);
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = &unk_1009ABA60;
  *(void *)(v11 + 24) = v10;
  swift_retain();
  swift_retain();
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v39);
  uint64_t v13 = *(void **)(v0 + 472);
  if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
    uint64_t v13 = sub_1004C6498(0LL, v13[2] + 1LL, 1, *(void **)(v0 + 472));
  }
  unint64_t v15 = v13[2];
  unint64_t v14 = v13[3];
  if (v15 >= v14 >> 1) {
    uint64_t v13 = sub_1004C6498((void *)(v14 > 1), v15 + 1, 1, v13);
  }
  uint64_t v16 = *(void *)(v0 + 456);
  uint64_t v17 = *(void *)(v0 + 464) + 1LL;
  v13[2] = v15 + 1;
  uint64_t v18 = &v13[2 * v15];
  v18[4] = &unk_1009ABA70;
  v18[5] = v11;
  swift_release();
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 136));
  if (v17 == v16)
  {
    swift_bridgeObjectRelease();
    *(void *)(v0 + 504) = v13;
    uint64_t v19 = *(void *)(v0 + 312);
    swift_bridgeObjectRetain(v19);
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v20);
    os_log_type_t v22 = static os_log_type_t.default.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v23 = 134217984;
      *(void *)(v0 + 352) = *(void *)(v19 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 352, v0 + 360, v23 + 4, v23 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v21, v22, "Got %ld payloads to publish for own devices.", v23, 0xCu);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease();
    }

    swift_beginAccess(v0 + 312, v0 + 280, 0LL, 0LL);
    uint64_t v27 = *(void *)(v0 + 312);
    *(void *)(v0 + 512) = v27;
    if (*(void *)(v27 + 16))
    {
      uint64_t v28 = dword_1009ABA7C;
      swift_bridgeObjectRetain(v27);
      uint64_t v29 = (void *)swift_task_alloc(v28);
      *(void *)(v0 + 520) = v29;
      *uint64_t v29 = v0;
      v29[1] = sub_1003AFE70;
      return sub_1003B12A8(v27);
    }

    else
    {
      uint64_t v30 = swift_bridgeObjectRelease();
      uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
      os_log_type_t v32 = static os_log_type_t.default.getter(v31);
      if (os_log_type_enabled(v31, v32))
      {
        os_log_type_t v33 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)os_log_type_t v33 = 0;
        _os_log_impl((void *)&_mh_execute_header, v31, v32, "No observations to publish for owned devices.", v33, 2u);
        swift_slowDealloc(v33, -1LL, -1LL);
      }

      *(void *)(v0 + 536) = 0LL;
      uint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
      os_log_type_t v36 = static os_log_type_t.default.getter(v35);
      if (os_log_type_enabled(v35, v36))
      {
        os_log_type_t v37 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
        *(_WORD *)os_log_type_t v37 = 0;
        _os_log_impl( (void *)&_mh_execute_header,  v35,  v36,  "Result of SML unknown on this platform, returning false.",  v37,  2u);
        swift_slowDealloc(v37, -1LL, -1LL);
      }

      uint64_t v38 = (void *)swift_task_alloc(dword_1009AB90C);
      *(void *)(v0 + 544) = v38;
      void *v38 = v0;
      v38[1] = sub_1003B00A0;
      return sub_1003B3FA0(*(void *)(v0 + 408));
    }
  }

  else
  {
    uint64_t v24 = *(void *)(v0 + 464) + 1LL;
    *(void *)(v0 + 464) = v24;
    *(void *)(v0 + 472) = v13;
    sub_100013044(*(void *)(v0 + 448) + 40 * v24 + 32, v0 + 136);
    sub_100012ED8((void *)(v0 + 136), *(void *)(v0 + 160));
    uint64_t v25 = (void *)swift_task_alloc(dword_1009AB904);
    *(void *)(v0 + 480) = v25;
    *uint64_t v25 = v0;
    v25[1] = sub_1003AF8CC;
    return sub_1003B1CB0();
  }

uint64_t sub_1003AFDE8()
{
  uint64_t v1 = *(void *)(v0 + 416);
  uint64_t v2 = *(void *)(v0 + 376);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(*(void *)(v0 + 384) + 8LL);
  v3(*(void *)(v0 + 408), v2);
  v3(v1, v2);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 136));
  uint64_t v4 = *(void *)(v0 + 408);
  uint64_t v5 = *(void *)(v0 + 400);
  uint64_t v6 = *(void *)(v0 + 368);
  swift_task_dealloc(*(void *)(v0 + 416));
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003AFE70()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 520);
  *(void *)(*v1 + 528) = v0;
  swift_task_dealloc(v3);
  uint64_t v4 = *(void *)(v2 + 360);
  swift_bridgeObjectRelease();
  if (v0)
  {
    swift_bridgeObjectRelease();
    uint64_t v5 = sub_1003B0AC0;
  }

  else
  {
    uint64_t v5 = sub_1003AFEF4;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_1003AFEF4()
{
  uint64_t v1 = v0[39];
  swift_bridgeObjectRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v5 = 134217984;
    uint64_t v6 = *(void *)(v1 + 16);
    swift_bridgeObjectRelease();
    v0[43] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 43, v0 + 44, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Completed publish of %ld own device payloads.", v5, 0xCu);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(v1, 2LL);
  }

  v0[67] = 0LL;
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "Result of SML unknown on this platform, returning false.",  v10,  2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  uint64_t v11 = (void *)swift_task_alloc(dword_1009AB90C);
  v0[68] = v11;
  *uint64_t v11 = v0;
  v11[1] = sub_1003B00A0;
  return sub_1003B3FA0(v0[51]);
}

uint64_t sub_1003B00A0(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 544LL);
  v3[69] = a1;
  v3[70] = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_1003B0CDC;
  }
  else {
    uint64_t v5 = sub_1003B0110;
  }
  return swift_task_switch(v5, v3[45], 0LL);
}

uint64_t sub_1003B0110()
{
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 552);
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v5 = 134217984;
    *(void *)(v0 + 328) = *(void *)(v4 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Got %ld anonymous shared device payloads to publish.", v5, 0xCu);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 256, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 96, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 120))
  {
    sub_100012EC0((__int128 *)(v0 + 96), v0 + 216);
    sub_100012ED8((void *)(v0 + 216), *(void *)(v0 + 240));
    uint64_t v8 = (uint64_t (*)(void))((char *)&dword_10099C860 + dword_10099C860);
    uint64_t v7 = (void *)swift_task_alloc(unk_10099C864);
    *(void *)(v0 + 568) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1003B02CC;
    return v8();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1003B02CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 568LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 360LL);
  *(void *)(*(void *)v1 + 576LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003B032C, v3, 0LL);
}

uint64_t sub_1003B032C()
{
  if (*(void *)(v0 + 576))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 216));
    uint64_t v1 = (void *)swift_task_alloc(dword_1009AD30C);
    *(void *)(v0 + 584) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_1003B05D8;
    return sub_10040CF20(*(void *)(v0 + 552));
  }

  else
  {
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 216));
    unint64_t v3 = sub_1000157D0();
    uint64_t v4 = swift_allocError(&type metadata for DaemonError, v3, 0LL, 0LL);
    *uint64_t v5 = 0xD00000000000001DLL;
    v5[1] = 0x80000001008509B0LL;
    swift_willThrow(v4);
    swift_errorRetain(v4);
    uint64_t v6 = swift_errorRetain(v4);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.error.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      uint64_t v22 = *(void *)(v0 + 536);
      os_log_type_t v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v10 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)os_log_type_t v9 = 138543362;
      swift_errorRetain(v4);
      uint64_t v11 = _swift_stdlib_bridgeErrorToNSError(v4);
      *(void *)(v0 + 304) = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v9 + 4, v9 + 12);
      *uint64_t v10 = v11;
      swift_errorRelease(v4);
      swift_errorRelease(v4);
      _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Error publishing owned devices anonymously. Error: %{public}@.",  v9,  0xCu);
      uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v10, 1LL, v12);
      swift_slowDealloc(v10, -1LL, -1LL);
      swift_slowDealloc(v9, -1LL, -1LL);

      swift_errorRelease(v22);
    }

    else
    {
      swift_errorRelease(*(void *)(v0 + 536));
      swift_errorRelease(v4);
      swift_errorRelease(v4);
    }

    swift_errorRetain(v4);
    uint64_t v14 = *(void *)(v0 + 408);
    uint64_t v13 = *(void *)(v0 + 416);
    uint64_t v15 = *(void *)(v0 + 376);
    uint64_t v16 = *(void *)(v0 + 384);
    uint64_t v17 = swift_bridgeObjectRelease();
    swift_willThrow(v17);
    swift_errorRelease(v4);
    uint64_t v18 = *(void (**)(uint64_t, uint64_t))(v16 + 8);
    v18(v14, v15);
    v18(v13, v15);
    uint64_t v19 = *(void *)(v0 + 408);
    uint64_t v20 = *(void *)(v0 + 400);
    uint64_t v21 = *(void *)(v0 + 368);
    swift_task_dealloc(*(void *)(v0 + 416));
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1003B05D8(void *a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 584);
  *(void *)(*v2 + 592) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = *(void *)(v4 + 360);
    swift_bridgeObjectRelease();
    uint64_t v7 = sub_1003B0EDC;
  }

  else
  {
    uint64_t v6 = *(void *)(v4 + 360);

    uint64_t v7 = sub_1003B065C;
  }

  return swift_task_switch(v7, v6, 0LL);
}

uint64_t sub_1003B065C()
{
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[69];
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v5 = 134217984;
    uint64_t v6 = *(void *)(v4 + 16);
    swift_bridgeObjectRelease();
    v0[40] = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 41, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Published %ld anonymous shared device payloads.", v5, 0xCu);
    swift_slowDealloc(v5, -1LL, -1LL);
    swift_release();

    uint64_t v7 = v0[67];
    if (v7)
    {
LABEL_3:
      swift_errorRetain(v7);
      uint64_t v9 = v0[51];
      uint64_t v8 = v0[52];
      uint64_t v10 = v0[47];
      uint64_t v11 = v0[48];
      uint64_t v12 = swift_bridgeObjectRelease();
      swift_willThrow(v12);
      swift_errorRelease(v7);
      uint64_t v13 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v13(v9, v10);
      v13(v8, v10);
      uint64_t v14 = v0[51];
      uint64_t v15 = v0[50];
      uint64_t v16 = v0[46];
      swift_task_dealloc(v0[52]);
      swift_task_dealloc(v14);
      swift_task_dealloc(v15);
      swift_task_dealloc(v16);
      uint64_t v17 = (uint64_t (*)(void))v0[1];
      return v17();
    }
  }

  else
  {
    swift_bridgeObjectRelease_n(v0[69], 2LL);

    swift_release();
    uint64_t v7 = v0[67];
    if (v7) {
      goto LABEL_3;
    }
  }

  uint64_t v19 = (void *)v0[63];
  uint64_t v20 = v19[2];
  v0[75] = v20;
  if (!v20)
  {
    uint64_t v24 = v0[51];
    uint64_t v25 = v0[52];
    uint64_t v26 = v0[50];
    uint64_t v27 = v0[47];
    uint64_t v28 = v0[48];
    uint64_t v29 = v0[46];
    swift_bridgeObjectRelease();
    uint64_t v30 = *(void (**)(uint64_t, uint64_t))(v28 + 8);
    v30(v24, v27);
    v30(v25, v27);
    swift_task_dealloc(v25);
    swift_task_dealloc(v24);
    swift_task_dealloc(v26);
    swift_task_dealloc(v29);
    uint64_t v17 = (uint64_t (*)(void))v0[1];
    return v17();
  }

  v0[76] = 0LL;
  uint64_t v21 = (int *)v19[4];
  v0[77] = v19[5];
  uint64_t v22 = v21[1];
  uint64_t v31 = (uint64_t (*)(void))((char *)v21 + *v21);
  swift_retain();
  uint64_t v23 = (void *)swift_task_alloc(v22);
  v0[78] = v23;
  *uint64_t v23 = v0;
  v23[1] = sub_1003B08D8;
  return v31();
}

uint64_t sub_1003B08D8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 360LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 624LL));
  swift_release();
  return swift_task_switch(sub_1003B093C, v1, 0LL);
}

uint64_t sub_1003B093C()
{
  uint64_t v1 = *(void *)(v0 + 608) + 1LL;
  if (v1 == *(void *)(v0 + 600))
  {
    swift_errorRelease(0LL);
    uint64_t v2 = *(void *)(v0 + 408);
    uint64_t v3 = *(void *)(v0 + 416);
    uint64_t v4 = *(void *)(v0 + 400);
    uint64_t v5 = *(void *)(v0 + 376);
    uint64_t v6 = *(void *)(v0 + 384);
    uint64_t v7 = *(void *)(v0 + 368);
    swift_bridgeObjectRelease();
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v6 + 8);
    v8(v2, v5);
    v8(v3, v5);
    swift_task_dealloc(v3);
    swift_task_dealloc(v2);
    swift_task_dealloc(v4);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    *(void *)(v0 + 608) = v1;
    uint64_t v10 = *(void *)(v0 + 504) + 16 * v1;
    uint64_t v11 = *(int **)(v10 + 32);
    *(void *)(v0 + 6swift_weakDestroy(v0 + 16) = *(void *)(v10 + 40);
    uint64_t v12 = v11[1];
    uint64_t v14 = (uint64_t (*)(void))((char *)v11 + *v11);
    swift_retain();
    uint64_t v13 = (void *)swift_task_alloc(v12);
    *(void *)(v0 + 624) = v13;
    *uint64_t v13 = v0;
    v13[1] = sub_1003B08D8;
    return v14();
  }

uint64_t sub_1003B0A54()
{
  uint64_t v1 = *(void *)(v0 + 408);
  uint64_t v2 = *(void *)(v0 + 400);
  uint64_t v3 = *(void *)(v0 + 368);
  swift_task_dealloc(*(void *)(v0 + 416));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B0AC0()
{
  uint64_t v1 = v0[66];
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = v0[66];
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138543362;
    swift_errorRetain(v5);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v5);
    v0[42] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 42, v0 + 43, v6 + 4, v6 + 12);
    *uint64_t v7 = v8;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Error publishing owned devices. Error: %{public}@.", v6, 0xCu);
    uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);
  }

  else
  {
    uint64_t v10 = v0[66];
    swift_errorRelease(v10);
    swift_errorRelease(v10);
  }

  uint64_t v11 = v0[66];

  v0[67] = v11;
  uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
  os_log_type_t v14 = static os_log_type_t.default.getter(v13);
  if (os_log_type_enabled(v13, v14))
  {
    uint64_t v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v15 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Result of SML unknown on this platform, returning false.",  v15,  2u);
    swift_slowDealloc(v15, -1LL, -1LL);
  }

  uint64_t v16 = (void *)swift_task_alloc(dword_1009AB90C);
  v0[68] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_1003B00A0;
  return sub_1003B3FA0(v0[51]);
}

uint64_t sub_1003B0CDC()
{
  uint64_t v1 = *(void *)(v0 + 560);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v19 = *(void *)(v0 + 536);
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v5 = 138543362;
    swift_errorRetain(v1);
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 304) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v5 + 4, v5 + 12);
    *uint64_t v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "Error publishing owned devices anonymously. Error: %{public}@.",  v5,  0xCu);
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v6, 1LL, v8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);

    swift_errorRelease(v19);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 536));
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  swift_errorRetain(v1);
  uint64_t v10 = *(void *)(v0 + 408);
  uint64_t v9 = *(void *)(v0 + 416);
  uint64_t v11 = *(void *)(v0 + 376);
  uint64_t v12 = *(void *)(v0 + 384);
  uint64_t v13 = swift_bridgeObjectRelease();
  swift_willThrow(v13);
  swift_errorRelease(v1);
  os_log_type_t v14 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v14(v10, v11);
  v14(v9, v11);
  uint64_t v15 = *(void *)(v0 + 408);
  uint64_t v16 = *(void *)(v0 + 400);
  uint64_t v17 = *(void *)(v0 + 368);
  swift_task_dealloc(*(void *)(v0 + 416));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B0EDC()
{
  uint64_t v1 = *(void *)(v0 + 592);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v19 = *(void *)(v0 + 536);
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v6 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v5 = 138543362;
    swift_errorRetain(v1);
    uint64_t v7 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 304) = v7;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 304, v0 + 312, v5 + 4, v5 + 12);
    *uint64_t v6 = v7;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "Error publishing owned devices anonymously. Error: %{public}@.",  v5,  0xCu);
    uint64_t v8 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v6, 1LL, v8);
    swift_slowDealloc(v6, -1LL, -1LL);
    swift_slowDealloc(v5, -1LL, -1LL);

    swift_errorRelease(v19);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 536));
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  swift_errorRetain(v1);
  uint64_t v10 = *(void *)(v0 + 408);
  uint64_t v9 = *(void *)(v0 + 416);
  uint64_t v11 = *(void *)(v0 + 376);
  uint64_t v12 = *(void *)(v0 + 384);
  uint64_t v13 = swift_bridgeObjectRelease();
  swift_willThrow(v13);
  swift_errorRelease(v1);
  os_log_type_t v14 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
  v14(v10, v11);
  v14(v9, v11);
  uint64_t v15 = *(void *)(v0 + 408);
  uint64_t v16 = *(void *)(v0 + 400);
  uint64_t v17 = *(void *)(v0 + 368);
  swift_task_dealloc(*(void *)(v0 + 416));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B10E4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[2] = a1;
  v3[3] = a3;
  unint64_t v4 = (*(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_10099D720) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[4] = swift_task_alloc(v4);
  v3[5] = swift_task_alloc(v4);
  return swift_task_switch(sub_1003B1150, 0LL, 0LL);
}

uint64_t sub_1003B1150()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(void *)(v0 + 24);
  uint64_t v3 = sub_100012ED8(*(void **)(v0 + 16), *(void *)(*(void *)(v0 + 16) + 24LL));
  uint64_t v4 = type metadata accessor for Date(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v1, v2, v4);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v5 + 56))(v1, 0LL, 1LL, v4);
  return swift_task_switch(sub_1003B11E4, *v3, 0LL);
}

uint64_t sub_1003B11E4()
{
  uint64_t v1 = *(void *)(v0 + 32);
  uint64_t v2 = *(void *)(v0 + 40);
  sub_10001581C(v2, v1, (uint64_t *)&unk_10099D720);
  sub_1003B5D28(v1);
  sub_100015794(v2, (uint64_t *)&unk_10099D720);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B1254(uint64_t a1, int *a2)
{
  uint64_t v5 = (uint64_t (*)(void))((char *)a2 + *a2);
  uint64_t v3 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v2;
  v3[1] = sub_100015D58;
  return v5();
}

uint64_t sub_1003B12A8(uint64_t a1)
{
  v2[23] = a1;
  v2[24] = v1;
  uint64_t v3 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  v2[25] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[26] = v4;
  v2[27] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009A6DB0);
  v2[28] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for OwnedDeviceSubmitEndpoint(0LL);
  v2[29] = v6;
  unint64_t v7 = (*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[30] = swift_task_alloc(v7);
  v2[31] = swift_task_alloc(v7);
  return swift_task_switch(sub_1003B1360, v1, 0LL);
}

uint64_t sub_1003B1360()
{
  if (qword_10099BA30 != -1) {
    swift_once(&qword_10099BA30, sub_100795FD8);
  }
  uint64_t v1 = *(void *)(v0 + 184);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2B7D8);
  swift_bridgeObjectRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.default.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 184);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v8 = 134217984;
    *(void *)(v0 + 176) = *(void *)(v7 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Publishing location for %ld devices.", v8, 0xCu);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  id v9 = [(id)objc_opt_self(AKDevice) currentDevice];
  if (v9
    && (uint64_t v10 = v9,
        id v11 = [v9 uniqueDeviceIdentifier],
        v10,
        v11))
  {
    uint64_t v12 = *(void *)(v0 + 184);
    uint64_t v13 = *(void *)(v0 + 192);
    uint64_t v14 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
    uint64_t v16 = v15;

    uint64_t v17 = *(void *)(v13 + 144);
    strcpy((char *)(v0 + 16), "searchpartyd");
    *(_BYTE *)(v0 + 29) = 0;
    *(_WORD *)(v0 + 30) = -5120;
    *(void *)(v0 + 32) = 0x6548656369766564LL;
    *(void *)(v0 + 40) = 0xEF74616562747261LL;
    *(void *)(v0 + 48) = v14;
    *(void *)(v0 + 56) = v16;
    uint64_t v18 = unk_1009B4934;
    uint64_t v31 = (uint64_t (*)(uint64_t, uint64_t, uint64_t))((char *)&dword_1009B4930 + dword_1009B4930);
    swift_bridgeObjectRetain(v12);
    swift_retain();
    uint64_t v19 = (void *)swift_task_alloc(v18);
    *(void *)(v0 + 256) = v19;
    *uint64_t v19 = v0;
    v19[1] = sub_1003B16F8;
    return v31(v0 + 16, *(void *)(v0 + 184), v17);
  }

  else
  {
    uint64_t v21 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v22 = static os_log_type_t.error.getter(v21);
    if (os_log_type_enabled(v21, v22))
    {
      uint64_t v23 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v23 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v21,  v22,  "Unable to get device identifier for publishing ownedDevice payloads",  v23,  2u);
      swift_slowDealloc(v23, -1LL, -1LL);
    }

    sub_100728AF4(0x6548656369766564LL, 0xEF74616562747261LL, 0xD00000000000001ALL, 0x8000000100860010LL);
    uint64_t v24 = type metadata accessor for DeviceBeaconPayloadPublisher.PublishError(0LL);
    uint64_t v25 = sub_100015C48( &qword_1009ABA50,  255LL,  type metadata accessor for DeviceBeaconPayloadPublisher.PublishError,  (uint64_t)&unk_1007FE750);
    swift_allocError(v24, v25, 0LL, 0LL);
    uint64_t v27 = swift_storeEnumTagMultiPayload(v26, v24, 4LL);
    swift_willThrow(v27);
    uint64_t v28 = *(void *)(v0 + 240);
    uint64_t v30 = *(void *)(v0 + 216);
    uint64_t v29 = *(void *)(v0 + 224);
    swift_task_dealloc(*(void *)(v0 + 248));
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1003B16F8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = *(void **)v3;
  uint64_t v5 = *(void *)(*(void *)v3 + 256LL);
  uint64_t v6 = *(void *)(*(void *)v3 + 192LL);
  v4[33] = a1;
  v4[34] = a2;
  v4[35] = a3;
  swift_task_dealloc(v5);
  return swift_task_switch(sub_1003B175C, v6, 0LL);
}

uint64_t sub_1003B175C()
{
  uint64_t v1 = *(void *)(v0 + 264);
  if (v1)
  {
    uint64_t v3 = *(void *)(v0 + 272);
    unint64_t v2 = *(void *)(v0 + 280);
    uint64_t v5 = *(void *)(v0 + 240);
    uint64_t v4 = *(void *)(v0 + 248);
    uint64_t v6 = *(void *)(v0 + 224);
    uint64_t v7 = *(void *)(v0 + 232);
    uint64_t v8 = enum case for FMNAccountType.searchParty(_:);
    uint64_t v9 = type metadata accessor for FMNAccountType(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v9 - 8) + 104LL))(v4, v8, v9);
    sub_1001285C4(v4 + *(int *)(v7 + 20));
    uint64_t v10 = type metadata accessor for SearchPartyURLSessionFactory(0LL);
    swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
    uint64_t v11 = type metadata accessor for FMNMockingPreferences(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 56LL))(v6, 1LL, 1LL, v11);
    uint64_t v12 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0LL, 0LL, v6);
    uint64_t v13 = type metadata accessor for ServerInteractionController(0LL);
    uint64_t v14 = swift_allocObject(v13, *(unsigned int *)(v13 + 48), *(unsigned __int16 *)(v13 + 52));
    sub_10001DC4C(v4, v5, type metadata accessor for OwnedDeviceSubmitEndpoint);
    *(void *)(v0 + 288) = sub_1004319F0(v5, v12, v14);
    sub_100018C68(v4, type metadata accessor for OwnedDeviceSubmitEndpoint);
    *(void *)(v0 + 88) = &type metadata for OwnSubmitRequest;
    *(void *)(v0 + 96) = sub_1003B6608();
    *(void *)(v0 + 64) = v1;
    *(void *)(v0 + 72) = v3;
    *(void *)(v0 + 80) = v2;
    swift_bridgeObjectRetain(v1);
    sub_10001736C(v3, v2);
    uint64_t v15 = (void *)swift_task_alloc(dword_1009A4BF4);
    *(void *)(v0 + 296) = v15;
    *uint64_t v15 = v0;
    v15[1] = sub_1003B19D8;
    return sub_1001B5210(*(void *)(v0 + 216), v0 + 64);
  }

  else
  {
    sub_100728AF4(0x6548656369766564LL, 0xEF74616562747261LL, 0xD000000000000022LL, 0x8000000100860030LL);
    uint64_t v17 = type metadata accessor for DeviceBeaconPayloadPublisher.PublishError(0LL);
    uint64_t v18 = sub_100015C48( &qword_1009ABA50,  255LL,  type metadata accessor for DeviceBeaconPayloadPublisher.PublishError,  (uint64_t)&unk_1007FE750);
    swift_allocError(v17, v18, 0LL, 0LL);
    uint64_t v20 = swift_storeEnumTagMultiPayload(v19, v17, 2LL);
    swift_willThrow(v20);
    uint64_t v21 = *(void *)(v0 + 240);
    uint64_t v23 = *(void *)(v0 + 216);
    uint64_t v22 = *(void *)(v0 + 224);
    swift_task_dealloc(*(void *)(v0 + 248));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1003B19D8()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 296);
  *(void *)(*v1 + 304) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 192);
    uint64_t v5 = sub_1003B1AF0;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 192);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v2 + 64));
    uint64_t v5 = sub_1003B1A4C;
    uint64_t v4 = v6;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_1003B1A4C()
{
  unint64_t v1 = *(void *)(v0 + 280);
  uint64_t v3 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 272);
  uint64_t v5 = *(void *)(v0 + 240);
  uint64_t v4 = *(void *)(v0 + 248);
  uint64_t v7 = *(void *)(v0 + 216);
  uint64_t v6 = *(void *)(v0 + 224);
  uint64_t v8 = *(void *)(v0 + 200);
  uint64_t v9 = *(void *)(v0 + 208);
  swift_release();
  sub_100117A58(v3, v2, v1);
  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v7, v8);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B1AF0()
{
  uint64_t v1 = *(void *)(v0 + 304);
  unint64_t v2 = *(void *)(v0 + 280);
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 272);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 64));
  _StringGuts.grow(_:)(41LL);
  swift_bridgeObjectRelease();
  swift_getErrorValue(v1, v0 + 168, v0 + 128);
  *(void *)(v0 + 152) = Error.code.getter(*(void *)(v0 + 136), *(void *)(v0 + 144));
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  String.append(_:)(v5);
  swift_bridgeObjectRelease();
  v6._countAndFlagsBits = 0x6F44726F72726520LL;
  v6._object = (void *)0xED00003A6E69616DLL;
  String.append(_:)(v6);
  swift_getErrorValue(v1, v0 + 160, v0 + 104);
  v7._countAndFlagsBits = Error.domain.getter(*(void *)(v0 + 112), *(void *)(v0 + 120));
  String.append(_:)(v7);
  swift_bridgeObjectRelease();
  sub_100728AF4(0x6548656369766564LL, 0xEF74616562747261LL, 0xD000000000000018LL, 0x8000000100860060LL);
  uint64_t v8 = swift_bridgeObjectRelease();
  swift_willThrow(v8);
  sub_100117A58(v4, v3, v2);
  uint64_t v9 = *(void *)(v0 + 240);
  uint64_t v11 = *(void *)(v0 + 216);
  uint64_t v10 = *(void *)(v0 + 224);
  swift_task_dealloc(*(void *)(v0 + 248));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B1CB0()
{
  v1[20] = v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  v1[21] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[22] = v3;
  v1[23] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  v1[24] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for SharedBeaconRecord(0LL);
  v1[25] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v1[26] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[27] = swift_task_alloc(v7);
  v1[28] = swift_task_alloc(v7);
  v1[29] = swift_task_alloc(v7);
  v1[30] = swift_task_alloc(v7);
  v1[31] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for StableIdentifier(0LL);
  v1[32] = v8;
  unint64_t v9 = (*(void *)(*(void *)(v8 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[33] = swift_task_alloc(v9);
  v1[34] = swift_task_alloc(v9);
  v1[35] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for OwnedBeaconRecord(0LL);
  v1[36] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v1[37] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[38] = swift_task_alloc(v12);
  v1[39] = swift_task_alloc(v12);
  return swift_task_switch(sub_1003B1E08, v0, 0LL);
}

uint64_t sub_1003B1E08()
{
  uint64_t v1 = v0[20];
  v0[14] = _swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(v1 + 128);
  v0[40] = v2;
  return swift_task_switch(sub_1003B1E30, v2, 0LL);
}

uint64_t sub_1003B1E30()
{
  *(void *)(v0 + 328) = *(void *)(*(void *)(v0 + 320) + 136LL);
  swift_retain();
  return swift_task_switch(sub_1003B1E74, 0LL, 0LL);
}

uint64_t sub_1003B1E74()
{
  uint64_t v2 = v0[40];
  uint64_t v1 = v0[41];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[42] = v3;
  v3[2] = v1;
  v3[3] = sub_10001DD18;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[43] = v4;
  uint64_t v5 = sub_100004AEC(&qword_10099CFB8);
  *uint64_t v4 = v0;
  v4[1] = sub_1003B1F30;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 13,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_10001DD20,  v3,  v5);
}

uint64_t sub_1003B1F30()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 336);
  uint64_t v3 = *(void *)(*v0 + 160);
  swift_task_dealloc(*(void *)(*v0 + 344));
  swift_release();
  swift_task_dealloc(v2);
  *(void *)(v1 + 352) = *(void *)(v1 + 104);
  return swift_task_switch(sub_1003B1FA8, v3, 0LL);
}

void sub_1003B1FA8()
{
  uint64_t v1 = v0[44];
  uint64_t v26 = *(void *)(v1 + 16);
  if (!v26)
  {
LABEL_17:
    uint64_t v21 = v0[40];
    swift_bridgeObjectRelease();
    v0[45] = sub_1004E7578((uint64_t)_swiftEmptyArrayStorage);
    swift_release();
    swift_task_switch(sub_1003B22A4, v21, 0LL);
    return;
  }

  unint64_t v2 = 0LL;
  uint64_t v24 = v0[36];
  uint64_t v25 = v0[37];
  uint64_t v22 = v0[22];
  uint64_t v23 = v0[44];
  while (v2 < *(void *)(v1 + 16))
  {
    uint64_t v5 = v0[39];
    uint64_t v6 = v0[34];
    uint64_t v7 = v0[35];
    uint64_t v8 = v0[32];
    unint64_t v9 = (*(unsigned __int8 *)(v25 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v25 + 80);
    uint64_t v10 = *(void *)(v25 + 72);
    sub_10001DC4C(v0[44] + v9 + v10 * v2, v5, type metadata accessor for OwnedBeaconRecord);
    uint64_t v11 = v5 + *(int *)(v24 + 24);
    sub_10001DC4C(v11, v7, type metadata accessor for StableIdentifier);
    LODWORD(v8) = swift_getEnumCaseMultiPayload(v7, v8);
    sub_100018C68(v7, type metadata accessor for StableIdentifier);
    sub_10001DC4C(v11, v6, type metadata accessor for StableIdentifier);
    uint64_t v12 = v0[34];
    if ((_DWORD)v8 == 1) {
      goto LABEL_12;
    }
    uint64_t v14 = v0[32];
    uint64_t v13 = v0[33];
    sub_10001DC4C(v0[34], v13, type metadata accessor for StableIdentifier);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v13, v14);
    if (EnumCaseMultiPayload == 2)
    {
      sub_100004AEC((uint64_t *)&unk_1009B0520);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      goto LABEL_11;
    }

    if (EnumCaseMultiPayload == 3)
    {
      sub_100004AEC((uint64_t *)&unk_1009AF840);
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
LABEL_11:
      uint64_t v16 = v0[33];
      uint64_t v12 = v0[34];
      uint64_t v17 = v0[21];
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v22 + 8))(v16, v17);
LABEL_12:
      uint64_t v1 = v23;
      sub_100018C68(v12, type metadata accessor for StableIdentifier);
      sub_10002218C(v0[39], v0[38], type metadata accessor for OwnedBeaconRecord);
      if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
        sub_1000328A4(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
      }
      unint64_t v19 = _swiftEmptyArrayStorage[2];
      unint64_t v18 = _swiftEmptyArrayStorage[3];
      if (v19 >= v18 >> 1) {
        sub_1000328A4(v18 > 1, v19 + 1, 1);
      }
      uint64_t v20 = v0[38];
      _swiftEmptyArrayStorage[2] = v19 + 1;
      sub_10002218C( v20,  (uint64_t)_swiftEmptyArrayStorage + v9 + v19 * v10,  type metadata accessor for OwnedBeaconRecord);
      goto LABEL_4;
    }

    uint64_t v3 = v0[39];
    uint64_t v4 = v0[34];
    sub_100018C68(v0[33], type metadata accessor for StableIdentifier);
    sub_100018C68(v4, type metadata accessor for StableIdentifier);
    sub_100018C68(v3, type metadata accessor for OwnedBeaconRecord);
    uint64_t v1 = v23;
LABEL_4:
    if (v26 == ++v2) {
      goto LABEL_17;
    }
  }

  __break(1u);
}

uint64_t sub_1003B22A4()
{
  *(void *)(v0 + 368) = *(void *)(*(void *)(v0 + 320) + 136LL);
  swift_retain();
  return swift_task_switch(sub_1003B22E8, 0LL, 0LL);
}

uint64_t sub_1003B22E8()
{
  uint64_t v1 = v0[46];
  uint64_t v2 = v0[40];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[47] = v3;
  v3[2] = v1;
  v3[3] = sub_1003B5C14;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[48] = v4;
  uint64_t v5 = sub_100004AEC(&qword_1009A6098);
  *uint64_t v4 = v0;
  v4[1] = sub_1003B23A8;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 12,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_1003B6B50,  v3,  v5);
}

uint64_t sub_1003B23A8()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 376);
  uint64_t v3 = *(void *)(*v0 + 160);
  swift_task_dealloc(*(void *)(*v0 + 384));
  swift_release();
  swift_task_dealloc(v2);
  *(void *)(v1 + 392) = *(void *)(v1 + 96);
  return swift_task_switch(sub_1003B2420, v3, 0LL);
}

uint64_t sub_1003B2420()
{
  uint64_t v2 = *(void *)(v1 + 392);
  uint64_t v47 = *(void *)(v2 + 16);
  if (v47)
  {
    unint64_t v3 = 0LL;
    uint64_t v4 = *(void *)(v1 + 200);
    uint64_t v45 = *(void *)(v1 + 208);
    uint64_t v43 = _swiftEmptyArrayStorage;
    uint64_t v49 = v4;
    while (1)
    {
      if (v3 >= *(void *)(v2 + 16))
      {
        __break(1u);
        goto LABEL_29;
      }

      uint64_t v7 = *(void *)(v1 + 240);
      uint64_t v6 = *(void *)(v1 + 248);
      unint64_t v8 = (*(unsigned __int8 *)(v45 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v45 + 80);
      uint64_t v0 = *(void *)(v45 + 72);
      sub_10001DC4C(*(void *)(v1 + 392) + v8 + v0 * v3, v6, type metadata accessor for SharedBeaconRecord);
      int v9 = *(unsigned __int8 *)(v6 + *(int *)(v4 + 64));
      sub_10001DC4C(v6, v7, type metadata accessor for SharedBeaconRecord);
      uint64_t v10 = *(void *)(v1 + 240);
      uint64_t v11 = *(void *)(v1 + 248);
      uint64_t v12 = *(void *)(v1 + 232);
      if (v9 == 1) {
        break;
      }
      unsigned int v13 = *(unsigned __int8 *)(v10 + *(int *)(v4 + 64));
      sub_100018C68(v10, type metadata accessor for SharedBeaconRecord);
      sub_10001DC4C(v11, v12, type metadata accessor for SharedBeaconRecord);
      if (v13 > 2) {
        goto LABEL_4;
      }
      uint64_t v14 = *(void *)(v1 + 232);
      uint64_t v4 = v49;
      uint64_t v15 = *(void *)(v14 + *(int *)(v49 + 44));
      sub_10001DC4C(v14, *(void *)(v1 + 224), type metadata accessor for SharedBeaconRecord);
      uint64_t v16 = *(void *)(v1 + 224);
      uint64_t v5 = *(void *)(v1 + 232);
      if (v15 == -1)
      {
        sub_100018C68(v16, type metadata accessor for SharedBeaconRecord);
        goto LABEL_5;
      }

      uint64_t v17 = *(void *)(v16 + *(int *)(v49 + 48));
      sub_100018C68(v16, type metadata accessor for SharedBeaconRecord);
      sub_100018C68(v5, type metadata accessor for SharedBeaconRecord);
      if (v17 != -1)
      {
        sub_10002218C(*(void *)(v1 + 248), *(void *)(v1 + 216), type metadata accessor for SharedBeaconRecord);
        unint64_t v18 = v43;
        if ((swift_isUniquelyReferenced_nonNull_native(v43) & 1) == 0)
        {
          sub_100032BC4(0, v43[2] + 1LL, 1);
          unint64_t v18 = _swiftEmptyArrayStorage;
        }

        unint64_t v20 = v18[2];
        unint64_t v19 = v18[3];
        if (v20 >= v19 >> 1)
        {
          sub_100032BC4(v19 > 1, v20 + 1, 1);
          unint64_t v18 = _swiftEmptyArrayStorage;
        }

        uint64_t v21 = *(void *)(v1 + 216);
        v18[2] = v20 + 1;
        uint64_t v43 = v18;
        sub_10002218C(v21, (uint64_t)v18 + v8 + v20 * v0, type metadata accessor for SharedBeaconRecord);
        uint64_t v4 = v49;
        goto LABEL_7;
      }

uint64_t sub_1003B2914(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 432LL);
  *(void *)(*(void *)v2 + 44Hasher.init(_seed:)(v1, 0LL) = v1;
  swift_task_dealloc(v5);
  uint64_t v6 = v4[24];
  uint64_t v7 = v4[20];
  if (v1)
  {
    sub_100015794(v6, (uint64_t *)&unk_10099D720);
    unint64_t v8 = sub_1003B2B3C;
  }

  else
  {
    v4[56] = a1;
    sub_100015794(v6, (uint64_t *)&unk_10099D720);
    unint64_t v8 = sub_1003B29A8;
  }

  return swift_task_switch(v8, v7, 0LL);
}

uint64_t sub_1003B29A8()
{
  uint64_t v1 = *(void *)(v0 + 424) + 1LL;
  if (v1 == *(void *)(v0 + 416))
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = *(void *)(v0 + 304);
    uint64_t v3 = *(void *)(v0 + 312);
    uint64_t v5 = *(void *)(v0 + 272);
    uint64_t v4 = *(void *)(v0 + 280);
    uint64_t v6 = *(void *)(v0 + 264);
    uint64_t v8 = *(void *)(v0 + 240);
    uint64_t v7 = *(void *)(v0 + 248);
    uint64_t v9 = *(void *)(v0 + 232);
    uint64_t v13 = *(void *)(v0 + 224);
    uint64_t v14 = *(void *)(v0 + 216);
    uint64_t v15 = *(void *)(v0 + 192);
    uint64_t v16 = *(void *)(v0 + 184);
    uint64_t v17 = sub_1004E8378(*(void *)(v0 + 112));
    swift_bridgeObjectRelease();
    swift_task_dealloc(v3);
    swift_task_dealloc(v2);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void *))(v0 + 8))(v17);
  }

  else
  {
    *(void *)(v0 + 424) = v1;
    uint64_t v11 = *(void *)(v0 + 192);
    sub_100013044(*(void *)(v0 + 408) + 40 * v1 + 32, v0 + 56);
    sub_1003AEF0C(v11);
    uint64_t v12 = (void *)swift_task_alloc(dword_1009ABA44);
    *(void *)(v0 + 432) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_1003B2914;
    return sub_1003B2F74(v0 + 56, *(void *)(v0 + 192));
  }

uint64_t sub_1003B2B3C()
{
  uint64_t v1 = (void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 440);
  sub_100013044(v0 + 56, v0 + 16);
  swift_errorRetain(v2);
  uint64_t v3 = swift_errorRetain(v2);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v36 = *(void *)(v0 + 440);
    uint64_t v6 = *(void *)(v0 + 184);
    uint64_t v31 = *(void *)(v0 + 176);
    uint64_t v7 = *(void *)(v0 + 168);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v34 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v38 = swift_slowAlloc(32LL, -1LL);
    *(void *)(v0 + 120) = 1752392040LL;
    uint64_t v41 = v38;
    *(_DWORD *)uint64_t v8 = 141558531;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2081;
    os_log_type_t type = v5;
    uint64_t v9 = *(void *)(v0 + 40);
    uint64_t v10 = *(void *)(v0 + 48);
    sub_100012ED8((void *)(v0 + 16), v9);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v10 + 8) + 8LL) + 32LL))(v9);
    uint64_t v11 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v12 = dispatch thunk of CustomStringConvertible.description.getter(v7, v11);
    unint64_t v14 = v13;
    (*(void (**)(uint64_t, uint64_t))(v31 + 8))(v6, v7);
    *(void *)(v0 + 128) = sub_1003F11D4(v12, v14, &v41);
    uint64_t v1 = (void *)(v0 + 56);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v8 + 14, v8 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
    *(_WORD *)(v8 + 22) = 2114;
    swift_errorRetain(v36);
    uint64_t v15 = _swift_stdlib_bridgeErrorToNSError(v36);
    *(void *)(v0 + 136) = v15;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v8 + 24, v8 + 32);
    *uint64_t v34 = v15;
    swift_errorRelease(v36);
    swift_errorRelease(v36);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  type,  "Error gathering owned device payloads for %{private,mask.hash}s: %{public}@.",  (uint8_t *)v8,  0x20u);
    uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v34, 1LL, v16);
    swift_slowDealloc(v34, -1LL, -1LL);
    swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);

    uint64_t v17 = v36;
  }

  else
  {
    uint64_t v18 = *(void *)(v0 + 440);

    swift_errorRelease(v18);
    swift_errorRelease(v18);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
    uint64_t v17 = v18;
  }

  swift_errorRelease(v17);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  uint64_t v19 = *(void *)(v0 + 424) + 1LL;
  if (v19 == *(void *)(v0 + 416))
  {
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void *)(v0 + 304);
    uint64_t v21 = *(void *)(v0 + 312);
    uint64_t v23 = *(void *)(v0 + 272);
    uint64_t v22 = *(void *)(v0 + 280);
    uint64_t v24 = *(void *)(v0 + 264);
    uint64_t v26 = *(void *)(v0 + 240);
    uint64_t v25 = *(void *)(v0 + 248);
    uint64_t v27 = *(void *)(v0 + 232);
    uint64_t v33 = *(void *)(v0 + 224);
    uint64_t v35 = *(void *)(v0 + 216);
    uint64_t v37 = *(void *)(v0 + 192);
    uint64_t v39 = *(void *)(v0 + 184);
    uint64_t v40 = sub_1004E8378(*(void *)(v0 + 112));
    swift_bridgeObjectRelease();
    swift_task_dealloc(v21);
    swift_task_dealloc(v20);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v33);
    swift_task_dealloc(v35);
    swift_task_dealloc(v37);
    swift_task_dealloc(v39);
    return (*(uint64_t (**)(void *))(v0 + 8))(v40);
  }

  else
  {
    *(void *)(v0 + 424) = v19;
    uint64_t v29 = *(void *)(v0 + 192);
    sub_100013044(*(void *)(v0 + 408) + 40 * v19 + 32, (uint64_t)v1);
    sub_1003AEF0C(v29);
    uint64_t v30 = (void *)swift_task_alloc(dword_1009ABA44);
    *(void *)(v0 + 432) = v30;
    *uint64_t v30 = v0;
    v30[1] = sub_1003B2914;
    return sub_1003B2F74((uint64_t)v1, *(void *)(v0 + 192));
  }

uint64_t sub_1003B2F74(uint64_t a1, uint64_t a2)
{
  v3[27] = a2;
  v3[28] = v2;
  v3[26] = a1;
  uint64_t v4 = type metadata accessor for OwnedBeaconRecord(0LL);
  v3[29] = v4;
  v3[30] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC(&qword_1009A48E0);
  v3[31] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for BeaconEstimatedLocation(0LL);
  v3[32] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v3[33] = v7;
  v3[34] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for UUID(0LL);
  v3[35] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[36] = v9;
  uint64_t v10 = *(void *)(v9 + 64);
  v3[37] = v10;
  unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v3[38] = swift_task_alloc(v11);
  v3[39] = swift_task_alloc(v11);
  v3[40] = swift_task_alloc(v11);
  v3[41] = swift_task_alloc(v11);
  return swift_task_switch(sub_1003B3074, v2, 0LL);
}

uint64_t sub_1003B3074()
{
  uint64_t v1 = (void *)v0[26];
  uint64_t v2 = v1[3];
  uint64_t v3 = v1[4];
  sub_100012ED8(v1, v2);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v3 + 8) + 8LL) + 32LL))(v2);
  uint64_t v4 = (void *)swift_task_alloc(dword_1009ABA3C);
  v0[42] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1003B3114;
  uint64_t v5 = v0[41];
  uint64_t v6 = v0[31];
  uint64_t v7 = v0[28];
  void v4[4] = v0[27];
  void v4[5] = v7;
  void v4[2] = v6;
  v4[3] = v5;
  return swift_task_switch(sub_1003B4B58, v7, 0LL);
}

uint64_t sub_1003B3114()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 224LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 336LL));
  return swift_task_switch(sub_1003B316C, v1, 0LL);
}

uint64_t sub_1003B316C()
{
  uint64_t v1 = *(void *)(v0 + 248);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(*(void *)(v0 + 264) + 48LL))( v1,  1LL,  *(void *)(v0 + 256)) == 1)
  {
    sub_100015794(v1, &qword_1009A48E0);
    if (qword_10099BA30 != -1) {
      swift_once(&qword_10099BA30, sub_100795FD8);
    }
    uint64_t v2 = *(void *)(v0 + 328);
    uint64_t v3 = *(void *)(v0 + 312);
    uint64_t v4 = *(void *)(v0 + 280);
    uint64_t v5 = *(void *)(v0 + 288);
    uint64_t v6 = type metadata accessor for Logger(0LL);
    sub_10000A720(v6, (uint64_t)qword_100A2B7D8);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v3, v2, v4);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter(v8);
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void *)(v0 + 312);
    uint64_t v12 = *(void *)(v0 + 280);
    uint64_t v13 = *(void *)(v0 + 288);
    if (v10)
    {
      uint64_t v14 = swift_slowAlloc(22LL, -1LL);
      uint64_t v15 = swift_slowAlloc(32LL, -1LL);
      uint64_t v33 = v15;
      *(_DWORD *)uint64_t v14 = 141558275;
      *(void *)(v0 + 192) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 192, v0 + 200, v14 + 4, v14 + 12);
      *(_WORD *)(v14 + 12) = 2081;
      uint64_t v16 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v12, v16);
      *(void *)(v0 + 168) = sub_1003F11D4(v17, v18, &v33);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 168, v0 + 176, v14 + 14, v14 + 22);
      swift_bridgeObjectRelease();
      uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v19(v11, v12);
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "No new location available for publish for : %{private,mask.hash}s",  (uint8_t *)v14,  0x16u);
      swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    else
    {
      uint64_t v19 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
      v19(*(void *)(v0 + 312), *(void *)(v0 + 280));
    }

    v19(*(void *)(v0 + 328), *(void *)(v0 + 280));
    uint64_t v27 = *(void *)(v0 + 320);
    uint64_t v29 = *(void *)(v0 + 304);
    uint64_t v28 = *(void *)(v0 + 312);
    uint64_t v30 = *(void *)(v0 + 272);
    uint64_t v32 = *(void *)(v0 + 240);
    uint64_t v31 = *(void *)(v0 + 248);
    swift_task_dealloc(*(void *)(v0 + 328));
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    return (*(uint64_t (**)(void *))(v0 + 8))(_swiftEmptyArrayStorage);
  }

  else
  {
    uint64_t v21 = *(void *)(v0 + 232);
    uint64_t v20 = *(void *)(v0 + 240);
    uint64_t v22 = *(void *)(v0 + 208);
    sub_10002218C(v1, *(void *)(v0 + 272), type metadata accessor for BeaconEstimatedLocation);
    sub_100013044(v22, v0 + 72);
    uint64_t v23 = sub_100004AEC(&qword_1009B0530);
    int v24 = swift_dynamicCast(v20, v0 + 72, v23, v21, 6LL);
    *(_BYTE *)(v0 + 4swift_weakDestroy(v0 + 16) = v24;
    if (v24) {
      sub_100018C68(*(void *)(v0 + 240), type metadata accessor for OwnedBeaconRecord);
    }
    uint64_t v25 = *(void *)(*(void *)(v0 + 224) + 128LL);
    *(void *)(v0 + 344) = v25;
    return swift_task_switch(sub_1003B34B0, v25, 0LL);
  }

uint64_t sub_1003B34B0()
{
  *(void *)(v0 + 352) = *(void *)(*(void *)(v0 + 344) + 136LL);
  swift_retain();
  return swift_task_switch(sub_1003B34F4, 0LL, 0LL);
}

uint64_t sub_1003B34F4()
{
  uint64_t v2 = v0[43];
  uint64_t v1 = v0[44];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[45] = v3;
  v3[2] = v1;
  v3[3] = sub_100117B18;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[46] = v4;
  uint64_t v5 = type metadata accessor for BeaconKeyManager(0LL);
  *uint64_t v4 = v0;
  v4[1] = sub_1003B35AC;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 20,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100117B20,  v3,  v5);
}

uint64_t sub_1003B35AC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 360);
  uint64_t v3 = *(void *)(*v0 + 224);
  swift_task_dealloc(*(void *)(*v0 + 368));
  swift_release();
  swift_task_dealloc(v2);
  *(void *)(v1 + 376) = *(void *)(v1 + 160);
  return swift_task_switch(sub_1003B3624, v3, 0LL);
}

uint64_t sub_1003B3624()
{
  uint64_t v1 = *(void *)(v0 + 376);
  char v2 = *(_BYTE *)(v0 + 416);
  uint64_t v4 = *(void *)(v0 + 320);
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v6 = *(void *)(v0 + 288);
  uint64_t v5 = *(void *)(v0 + 296);
  uint64_t v7 = *(void *)(v0 + 280);
  uint64_t v8 = *(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16);
  *(void *)(v0 + 384) = v8;
  v8(v4, v3, v7);
  uint64_t v9 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v10 = (v9 + 24) & ~v9;
  uint64_t v11 = v10 + v5;
  uint64_t v12 = swift_allocObject(&unk_100955FC8, v10 + v5 + 1, v9 | 7);
  *(void *)(v0 + 392) = v12;
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v12 + v10, v4, v7);
  *(_BYTE *)(v12 + v11) = v2;
  uint64_t v13 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v14 = (void *)swift_task_alloc(v13);
  *(void *)(v0 + 400) = v14;
  uint64_t v15 = sub_100004AEC(&qword_1009ABA48);
  *uint64_t v14 = v0;
  v14[1] = sub_1003B3730;
  return unsafeBlocking<A>(_:)(v0 + 112, sub_1003B5CBC, v12, v15);
}

uint64_t sub_1003B3730()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 400);
  *(void *)(*v1 + 408) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 224);
    uint64_t v5 = sub_1003B3CB0;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 224);
    swift_release();
    uint64_t v5 = sub_1003B37A4;
    uint64_t v4 = v6;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_1003B37A4()
{
  uint64_t v1 = *(void *)(v0 + 408);
  uint64_t v2 = *(void *)(v0 + 112);
  unint64_t v3 = *(void *)(v0 + 120);
  sub_100016F9C(*(void *)(v0 + 128), *(void *)(v0 + 136));
  sub_10001736C(v2, v3);
  uint64_t v4 = sub_1004DFCF0(v2, v3);
  if (v1)
  {
    sub_100016F9C(v2, v3);
    uint64_t v28 = 0LL;
    unint64_t v29 = 0xE000000000000000LL;
    _StringGuts.grow(_:)(35LL);
    *(void *)(v0 + 144) = 0LL;
    *(void *)(v0 + 152) = 0xE000000000000000LL;
    v8._object = (void *)0x8000000100854640LL;
    v8._countAndFlagsBits = 0xD000000000000021LL;
    String.append(_:)(v8);
    *(void *)(v0 + 200) = v1;
    uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    _print_unlocked<A, B>(_:_:)( v0 + 200,  v0 + 144,  v9,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  *(void *)(v0 + 144),  *(void *)(v0 + 152),  "searchpartyd/KeyRepresentable.swift",  35LL,  2LL,  256LL,  0);
  }

  else
  {
    uint64_t v6 = v4;
    uint64_t v7 = v5;
    sub_100016F9C(v2, v3);
    sub_1001782E4(v6, v7);
    sub_1003B5E68(*(void *)(v0 + 328), *(void *)(v0 + 272), v28, v29, (void *)(v0 + 16));
    sub_100016F9C(v28, v29);
    uint64_t v11 = sub_1004C6370(0LL, 1LL, 1, _swiftEmptyArrayStorage);
    unint64_t v13 = v11[2];
    unint64_t v12 = v11[3];
    if (v13 >= v12 >> 1) {
      uint64_t v11 = sub_1004C6370((void *)(v12 > 1), v13 + 1, 1, v11);
    }
    uint64_t v14 = *(void *)(v0 + 288);
    uint64_t v26 = *(void *)(v0 + 280);
    uint64_t v27 = *(void *)(v0 + 328);
    uint64_t v15 = *(void *)(v0 + 272);
    v11[2] = v13 + 1;
    uint64_t v16 = &v11[7 * v13];
    __int128 v17 = *(_OWORD *)(v0 + 16);
    __int128 v18 = *(_OWORD *)(v0 + 32);
    __int128 v19 = *(_OWORD *)(v0 + 48);
    v16[10] = *(void *)(v0 + 64);
    *((_OWORD *)v16 + 3) = v18;
    *((_OWORD *)v16 + 4) = v19;
    *((_OWORD *)v16 + 2) = v17;
    sub_100016F9C(v2, v3);
    swift_release();
    sub_100018C68(v15, type metadata accessor for BeaconEstimatedLocation);
    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v27, v26);
    uint64_t v20 = *(void *)(v0 + 320);
    uint64_t v22 = *(void *)(v0 + 304);
    uint64_t v21 = *(void *)(v0 + 312);
    uint64_t v23 = *(void *)(v0 + 272);
    uint64_t v25 = *(void *)(v0 + 240);
    uint64_t v24 = *(void *)(v0 + 248);
    swift_task_dealloc(*(void *)(v0 + 328));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    return (*(uint64_t (**)(void *))(v0 + 8))(v11);
  }

uint64_t sub_1003B3CB0()
{
  uint64_t v1 = *(void *)(v0 + 408);
  if (qword_10099BA30 != -1) {
    swift_once(&qword_10099BA30, sub_100795FD8);
  }
  uint64_t v2 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 384);
  uint64_t v3 = *(void *)(v0 + 328);
  uint64_t v4 = *(void *)(v0 + 304);
  uint64_t v5 = *(void *)(v0 + 280);
  uint64_t v6 = type metadata accessor for Logger(0LL);
  sub_10000A720(v6, (uint64_t)qword_100A2B7D8);
  uint64_t v7 = v2(v4, v3, v5);
  Swift::String v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  BOOL v10 = os_log_type_enabled(v8, v9);
  uint64_t v11 = *(void *)(v0 + 328);
  uint64_t v12 = *(void *)(v0 + 304);
  uint64_t v14 = *(void *)(v0 + 280);
  uint64_t v13 = *(void *)(v0 + 288);
  uint64_t v30 = *(void *)(v0 + 272);
  if (v10)
  {
    uint64_t v15 = swift_slowAlloc(22LL, -1LL);
    uint64_t v29 = v13;
    uint64_t v16 = swift_slowAlloc(32LL, -1LL);
    uint64_t v31 = v16;
    *(_DWORD *)uint64_t v15 = 141558275;
    *(void *)(v0 + 176) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 176, v0 + 184, v15 + 4, v15 + 12);
    *(_WORD *)(v15 + 12) = 2081;
    uint64_t v17 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter(v14, v17);
    *(void *)(v0 + 184) = sub_1003F11D4(v18, v19, &v31);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 192, v15 + 14, v15 + 22);
    swift_bridgeObjectRelease();
    uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    v20(v12, v14);
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "No owned device key for shared item: %{private,mask.hash}s",  (uint8_t *)v15,  0x16u);
    swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v16, -1LL, -1LL);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_errorRelease(v1);

    swift_release();
    sub_100018C68(v30, type metadata accessor for BeaconEstimatedLocation);
    v20(v11, v14);
  }

  else
  {
    swift_errorRelease(v1);

    uint64_t v21 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
    v21(v12, v14);
    swift_release();
    sub_100018C68(v30, type metadata accessor for BeaconEstimatedLocation);
    v21(v11, v14);
  }

  uint64_t v22 = *(void *)(v0 + 320);
  uint64_t v24 = *(void *)(v0 + 304);
  uint64_t v23 = *(void *)(v0 + 312);
  uint64_t v25 = *(void *)(v0 + 272);
  uint64_t v27 = *(void *)(v0 + 240);
  uint64_t v26 = *(void *)(v0 + 248);
  swift_task_dealloc(*(void *)(v0 + 328));
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  return (*(uint64_t (**)(void *))(v0 + 8))(_swiftEmptyArrayStorage);
}

uint64_t sub_1003B3FA0(uint64_t a1)
{
  v2[14] = a1;
  v2[15] = v1;
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_10099D720);
  v2[16] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v2[17] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[18] = v5;
  v2[19] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC(&qword_1009A48E0);
  v2[20] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for SharedBeaconRecord(0LL);
  v2[21] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[22] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[23] = swift_task_alloc(v9);
  v2[24] = swift_task_alloc(v9);
  v2[25] = swift_task_alloc(v9);
  v2[26] = swift_task_alloc(v9);
  v2[27] = swift_task_alloc(v9);
  return swift_task_switch(sub_1003B40A4, v1, 0LL);
}

uint64_t sub_1003B40A4()
{
  uint64_t v1 = v0[15];
  v0[10] = _swiftEmptyArrayStorage;
  uint64_t v2 = *(void *)(v1 + 128);
  v0[28] = v2;
  return swift_task_switch(sub_1003B40CC, v2, 0LL);
}

uint64_t sub_1003B40CC()
{
  *(void *)(v0 + 232) = *(void *)(*(void *)(v0 + 224) + 136LL);
  swift_retain();
  return swift_task_switch(sub_1003B4110, 0LL, 0LL);
}

uint64_t sub_1003B4110()
{
  uint64_t v2 = v0[28];
  uint64_t v1 = v0[29];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[30] = v3;
  v3[2] = v1;
  v3[3] = sub_1003B5C14;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[31] = v4;
  uint64_t v5 = sub_100004AEC(&qword_1009A6098);
  *uint64_t v4 = v0;
  v4[1] = sub_1003B41CC;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 11,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_1003B5C1C,  v3,  v5);
}

uint64_t sub_1003B41CC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 240);
  uint64_t v3 = *(void *)(*v0 + 120);
  swift_task_dealloc(*(void *)(*v0 + 248));
  swift_release();
  swift_task_dealloc(v2);
  *(void *)(v1 + 256) = *(void *)(v1 + 88);
  return swift_task_switch(sub_1003B4244, v3, 0LL);
}

uint64_t sub_1003B4244()
{
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v53 = *(void *)(v1 + 16);
  if (v53)
  {
    unint64_t v2 = 0LL;
    uint64_t v3 = *(void *)(v0 + 168);
    uint64_t v52 = *(void *)(v0 + 176);
    uint64_t v51 = _swiftEmptyArrayStorage;
    uint64_t v54 = v3;
    while (1)
    {
      if (v2 >= *(void *)(v1 + 16))
      {
        __break(1u);
LABEL_29:
        swift_once(&qword_10099BA30, sub_100795FD8);
LABEL_24:
        uint64_t v33 = *(void *)(v0 + 264);
        uint64_t v34 = type metadata accessor for Logger(0LL);
        sub_10000A720(v34, (uint64_t)qword_100A2B7D8);
        swift_bridgeObjectRetain(v33);
        uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
        os_log_type_t v37 = static os_log_type_t.default.getter(v36);
        BOOL v38 = os_log_type_enabled(v36, v37);
        uint64_t v39 = *(void *)(v0 + 264);
        if (v38)
        {
          uint64_t v40 = swift_slowAlloc(22LL, -1LL);
          *(_DWORD *)uint64_t v40 = 134218240;
          uint64_t v41 = *(void *)(v39 + 16);
          swift_bridgeObjectRelease();
          *(void *)(v0 + 96) = v41;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v40 + 4, v40 + 12);
          swift_bridgeObjectRelease();
          *(_WORD *)(v40 + 12) = 2048;
          *(void *)(v0 + 104) = 0LL;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v40 + 14, v40 + 22);
          _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "Unpublished anonymous payloads for %ld shared beacons found %ld to publish.",  (uint8_t *)v40,  0x16u);
          swift_slowDealloc(v40, -1LL, -1LL);
        }

        else
        {
          swift_bridgeObjectRelease_n(*(void *)(v0 + 264), 2LL);
        }

        uint64_t v42 = *(void *)(v0 + 208);
        uint64_t v43 = *(void *)(v0 + 216);
        uint64_t v45 = *(void *)(v0 + 192);
        uint64_t v44 = *(void *)(v0 + 200);
        uint64_t v46 = *(void *)(v0 + 184);
        uint64_t v48 = *(void *)(v0 + 152);
        uint64_t v47 = *(void *)(v0 + 160);
        uint64_t v49 = *(void *)(v0 + 128);
        swift_beginAccess(v0 + 80, v0 + 56, 0LL, 0LL);
        uint64_t v50 = *(void *)(v0 + 80);
        swift_task_dealloc(v43);
        swift_task_dealloc(v42);
        swift_task_dealloc(v44);
        swift_task_dealloc(v45);
        swift_task_dealloc(v46);
        swift_task_dealloc(v47);
        swift_task_dealloc(v48);
        swift_task_dealloc(v49);
        return (*(uint64_t (**)(uint64_t))(v0 + 8))(v50);
      }

      uint64_t v6 = *(void *)(v0 + 208);
      uint64_t v5 = *(void *)(v0 + 216);
      unint64_t v7 = (*(unsigned __int8 *)(v52 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v52 + 80);
      uint64_t v8 = *(void *)(v52 + 72);
      sub_10001DC4C(*(void *)(v0 + 256) + v7 + v8 * v2, v5, type metadata accessor for SharedBeaconRecord);
      int v9 = *(unsigned __int8 *)(v5 + *(int *)(v3 + 64));
      sub_10001DC4C(v5, v6, type metadata accessor for SharedBeaconRecord);
      uint64_t v10 = *(void *)(v0 + 208);
      uint64_t v11 = *(void *)(v0 + 216);
      uint64_t v12 = *(void *)(v0 + 200);
      if (v9 == 1) {
        break;
      }
      unsigned int v13 = *(unsigned __int8 *)(v10 + *(int *)(v3 + 64));
      sub_100018C68(v10, type metadata accessor for SharedBeaconRecord);
      sub_10001DC4C(v11, v12, type metadata accessor for SharedBeaconRecord);
      if (v13 > 2) {
        goto LABEL_4;
      }
      uint64_t v14 = *(void *)(v0 + 200);
      uint64_t v3 = v54;
      uint64_t v15 = *(void *)(v14 + *(int *)(v54 + 44));
      sub_10001DC4C(v14, *(void *)(v0 + 192), type metadata accessor for SharedBeaconRecord);
      uint64_t v16 = *(void *)(v0 + 192);
      uint64_t v4 = *(void *)(v0 + 200);
      if (v15 == -1)
      {
        sub_100018C68(v16, type metadata accessor for SharedBeaconRecord);
        goto LABEL_5;
      }

      uint64_t v17 = *(void *)(v16 + *(int *)(v54 + 48));
      sub_100018C68(v16, type metadata accessor for SharedBeaconRecord);
      sub_100018C68(v4, type metadata accessor for SharedBeaconRecord);
      if (v17 != -1)
      {
        sub_10002218C(*(void *)(v0 + 216), *(void *)(v0 + 184), type metadata accessor for SharedBeaconRecord);
        uint64_t v18 = v51;
        if ((swift_isUniquelyReferenced_nonNull_native(v51) & 1) == 0)
        {
          sub_100032BC4(0, v51[2] + 1LL, 1);
          uint64_t v18 = _swiftEmptyArrayStorage;
        }

        unint64_t v20 = v18[2];
        unint64_t v19 = v18[3];
        if (v20 >= v19 >> 1)
        {
          sub_100032BC4(v19 > 1, v20 + 1, 1);
          uint64_t v18 = _swiftEmptyArrayStorage;
        }

        uint64_t v21 = *(void *)(v0 + 184);
        v18[2] = v20 + 1;
        uint64_t v51 = v18;
        sub_10002218C(v21, (uint64_t)v18 + v7 + v20 * v8, type metadata accessor for SharedBeaconRecord);
        uint64_t v3 = v54;
        goto LABEL_7;
      }

uint64_t sub_1003B4750(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 296LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 120LL);
  *(void *)(*(void *)v1 + 304LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003B47B0, v3, 0LL);
}

uint64_t sub_1003B47B0()
{
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 280);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v5 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 144);
  uint64_t v7 = *(void *)(v0 + 128);
  uint64_t v37 = *(void *)(v0 + 288) + 1LL;
  uint64_t v38 = *(void *)(v0 + 272);
  uint64_t v8 = (void *)swift_task_alloc(32LL);
  v8[2] = &off_100934940;
  v8[3] = v7;
  uint64_t v9 = sub_100023D00((uint64_t (*)(char *))sub_1003B5C28, v8, v1);
  swift_task_dealloc(v8);
  sub_1000F0BF0(v9, v3);
  swift_bridgeObjectRelease();
  sub_100015794(v7, (uint64_t *)&unk_10099D720);
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v4, v5);
  sub_100015794(v3, &qword_1009A48E0);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v37 == v38)
  {
    swift_bridgeObjectRelease();
    if (qword_10099BA30 != -1) {
      swift_once(&qword_10099BA30, sub_100795FD8);
    }
    uint64_t v10 = *(void *)(v0 + 264);
    uint64_t v11 = type metadata accessor for Logger(0LL);
    sub_10000A720(v11, (uint64_t)qword_100A2B7D8);
    swift_bridgeObjectRetain(v10);
    unsigned int v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter(v13);
    BOOL v15 = os_log_type_enabled(v13, v14);
    uint64_t v16 = *(void *)(v0 + 264);
    if (v15)
    {
      uint64_t v17 = swift_slowAlloc(22LL, -1LL);
      *(_DWORD *)uint64_t v17 = 134218240;
      uint64_t v18 = *(void *)(v16 + 16);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 96) = v18;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v17 + 4, v17 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v17 + 12) = 2048;
      *(void *)(v0 + 104) = 0LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 104, v0 + 112, v17 + 14, v17 + 22);
      _os_log_impl( (void *)&_mh_execute_header,  v13,  v14,  "Unpublished anonymous payloads for %ld shared beacons found %ld to publish.",  (uint8_t *)v17,  0x16u);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 264), 2LL);
    }

    uint64_t v28 = *(void *)(v0 + 208);
    uint64_t v29 = *(void *)(v0 + 216);
    uint64_t v31 = *(void *)(v0 + 192);
    uint64_t v30 = *(void *)(v0 + 200);
    uint64_t v32 = *(void *)(v0 + 184);
    uint64_t v34 = *(void *)(v0 + 152);
    uint64_t v33 = *(void *)(v0 + 160);
    uint64_t v35 = *(void *)(v0 + 128);
    swift_beginAccess(v0 + 80, v0 + 56, 0LL, 0LL);
    uint64_t v36 = *(void *)(v0 + 80);
    swift_task_dealloc(v29);
    swift_task_dealloc(v28);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(v36);
  }

  else
  {
    uint64_t v19 = *(void *)(v0 + 288) + 1LL;
    *(void *)(v0 + 280) = v2;
    *(void *)(v0 + 288) = v19;
    uint64_t v20 = *(void *)(v0 + 128);
    uint64_t v21 = *(void *)(v0 + 112);
    sub_100013044(*(void *)(v0 + 264) + 40 * v19 + 32, v0 + 16);
    uint64_t v22 = *(void *)(v0 + 40);
    uint64_t v23 = *(void *)(v0 + 48);
    sub_100012ED8((void *)(v0 + 16), v22);
    (*(void (**)(uint64_t))(*(void *)(*(void *)(v23 + 8) + 8LL) + 32LL))(v22);
    uint64_t v24 = type metadata accessor for Date(0LL);
    uint64_t v25 = *(void *)(v24 - 8);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v25 + 16))(v20, v21, v24);
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v25 + 56))(v20, 0LL, 1LL, v24);
    uint64_t v26 = (void *)swift_task_alloc(dword_1009B6394);
    *(void *)(v0 + 296) = v26;
    void *v26 = v0;
    v26[1] = sub_1003B4750;
    return sub_1005EB9CC(*(void *)(v0 + 152));
  }

uint64_t sub_1003B4B3C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  void v4[5] = v3;
  void v4[2] = a1;
  v4[3] = a2;
  return swift_task_switch(sub_1003B4B58, v3, 0LL);
}

uint64_t sub_1003B4B58()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1009B6394);
  *(void *)(v0 + 48) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1003B4BAC;
  return sub_1005EB9CC(*(void *)(v0 + 24));
}

uint64_t sub_1003B4BAC(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 40LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 48LL);
  *(void *)(*(void *)v1 + 56LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003B4C08, v3, 0LL);
}

uint64_t sub_1003B4C08()
{
  uint64_t v1 = *(void *)(v0 + 56);
  uint64_t v2 = *(void *)(v0 + 32);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = (void *)swift_task_alloc(32LL);
  void v4[2] = &off_100934918;
  v4[3] = v2;
  uint64_t v5 = sub_100023D00((uint64_t (*)(char *))sub_1003B6B54, v4, v1);
  swift_task_dealloc(v4);
  sub_1000F0BF0(v5, v3);
  swift_bridgeObjectRelease();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B4C9C()
{
  *(void *)(v1 + 208) = v0;
  uint64_t v2 = type metadata accessor for LocationFetcher(0LL);
  *(void *)(v1 + 2swift_weakDestroy(v0 + 16) = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003B4CF4, v0, 0LL);
}

uint64_t sub_1003B4CF4()
{
  if (qword_10099BA30 != -1) {
    swift_once(&qword_10099BA30, sub_100795FD8);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2B7D8);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "Fetching own device locations from disk before publishing own devices.",  v5,  2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 176, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v8 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
    uint64_t v7 = (void *)swift_task_alloc(unk_10099C894);
    *(void *)(v0 + 224) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1003B4E94;
    return v8();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1003B4E94(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 224LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 208LL);
  *(void *)(*(void *)v1 + 232LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003B4EF4, v3, 0LL);
}

uint64_t sub_1003B4EF4()
{
  uint64_t v1 = *(void *)(v0 + 232);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (!v1)
  {
    uint64_t v5 = *(void *)(v0 + 216);
    unint64_t v6 = sub_1000157D0();
    uint64_t v7 = swift_allocError(&type metadata for DaemonError, v6, 0LL, 0LL);
    *uint64_t v8 = 0xD000000000000010LL;
    v8[1] = 0x8000000100850F20LL;
    swift_willThrow(v7);
    swift_task_dealloc(v5);
    os_log_type_t v4 = *(uint64_t (**)(void))(v0 + 8);
    return v4();
  }

  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 136, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 160))
  {
    sub_100012EC0((__int128 *)(v0 + 136), v0 + 96);
    sub_100012ED8((void *)(v0 + 96), *(void *)(v0 + 120));
    uint64_t v9 = (uint64_t (*)(void))((char *)&dword_10099C8C0 + dword_10099C8C0);
    uint64_t v3 = (void *)swift_task_alloc(unk_10099C8C4);
    *(void *)(v0 + 240) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_1003B5008;
    os_log_type_t v4 = v9;
    return v4();
  }

  __break(1u);
  return result;
}

uint64_t sub_1003B5008(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 240LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 208LL);
  *(void *)(*(void *)v1 + 248LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003B5068, v3, 0LL);
}

uint64_t sub_1003B5068()
{
  uint64_t v1 = *(void *)(v0 + 248);
  if (v1)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 96));
    void v11[3] = &type metadata for DiskFetchPolicy;
    v11[4] = sub_1003B5A58();
    uint64_t v2 = qword_10099B300;
    swift_retain();
    if (v2 != -1) {
      swift_once(&qword_10099B300, sub_1003459EC);
    }
    uint64_t v3 = *(char **)(v0 + 216);
    uint64_t v4 = qword_100A2A6C8;
    swift_retain();
    unint64_t v5 = sub_1004132F8((uint64_t)_swiftEmptyArrayStorage);
    sub_1002190F8(v1, v11, v4, v5, v3);
    return swift_task_switch(sub_1003B51B0, *(void *)(v0 + 232), 0LL);
  }

  else
  {
    swift_release();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 96));
    uint64_t v7 = *(void *)(v0 + 216);
    unint64_t v8 = sub_1000157D0();
    uint64_t v9 = swift_allocError(&type metadata for DaemonError, v8, 0LL, 0LL);
    *uint64_t v10 = 0xD000000000000010LL;
    v10[1] = 0x8000000100850F20LL;
    swift_willThrow(v9);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1003B51B0()
{
  *(void *)(v0 + 256) = *(void *)(*(void *)(v0 + 232) + 136LL);
  swift_retain();
  return swift_task_switch(sub_1003B51F4, 0LL, 0LL);
}

uint64_t sub_1003B51F4()
{
  uint64_t v1 = v0[32];
  uint64_t v2 = v0[29];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[33] = v3;
  v3[2] = v1;
  v3[3] = sub_100117B74;
  v3[4] = v2;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[34] = v4;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009AE510);
  *uint64_t v4 = v0;
  v4[1] = sub_1003B52B4;
  return withCheckedContinuation<A>(isolation:function:_:)( v0 + 25,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100117B7C,  v3,  v5);
}

uint64_t sub_1003B52B4()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 264);
  uint64_t v3 = *(void *)(*v0 + 208);
  swift_task_dealloc(*(void *)(*v0 + 272));
  swift_release();
  swift_task_dealloc(v2);
  *(void *)(v1 + 280) = *(void *)(v1 + 200);
  return swift_task_switch(sub_1003B532C, v3, 0LL);
}

uint64_t sub_1003B532C(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2[35];
  uint64_t v4 = v2[26];
  uint64_t v5 = v2[27];
  uint64_t v6 = sub_100015C48( &qword_1009ABA20,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for DeviceBeaconPayloadPublisher,  (uint64_t)&unk_1007FE6FC);
  uint64_t v7 = swift_task_alloc(32LL);
  v2[36] = v7;
  *(void *)(v7 + swift_weakDestroy(v0 + 16) = v5;
  *(void *)(v7 + 24) = v3;
  unint64_t v8 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v2[37] = v8;
  *unint64_t v8 = v2;
  v8[1] = sub_1003B53F8;
  return withCheckedContinuation<A>(isolation:function:_:)( v8,  v4,  v6,  0xD000000000000018LL,  0x800000010085FFF0LL,  sub_1003B5A9C,  v7,  (char *)&type metadata for () + 8);
}

uint64_t sub_1003B53F8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 288LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 208LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 296LL));
  swift_bridgeObjectRelease();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1003B546C, v2, 0LL);
}

uint64_t sub_1003B546C()
{
  uint64_t v1 = *(void *)(v0 + 216);
  swift_release();
  swift_release();
  sub_100018C68(v1, type metadata accessor for LocationFetcher);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003B54C8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v19 = a2;
  uint64_t v5 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  __chkstk_darwin(v5);
  uint64_t v8 = sub_100004AEC(&qword_1009B1040);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  __chkstk_darwin(v8);
  (*(void (**)(char *, uint64_t, uint64_t))(v9 + 16))( (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a1,  v8);
  uint64_t v11 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v12 = (v11 + 16) & ~v11;
  uint64_t v13 = swift_allocObject(&unk_100955F78, v12 + v10, v11 | 7);
  (*(void (**)(uint64_t, char *, uint64_t))(v9 + 32))( v13 + v12,  (char *)&v18 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v8);
  type metadata accessor for Transaction(0LL);
  sub_10001DC4C(v19, (uint64_t)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL), type metadata accessor for LocationFetcher);
  uint64_t v14 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v15 = (v14 + 40) & ~v14;
  uint64_t v16 = (void *)swift_allocObject(&unk_100955FA0, v15 + v7, v14 | 7);
  _OWORD v16[2] = sub_1003B5B08;
  v16[3] = v13;
  v16[4] = a3;
  sub_10002218C( (uint64_t)&v18 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL),  (uint64_t)v16 + v15,  type metadata accessor for LocationFetcher);
  swift_retain();
  swift_bridgeObjectRetain(a3);
  static Transaction.asyncTask(name:block:)("beaconsFromDisk.FromDisk", 24LL, 2LL, &unk_1009A48C0, v16);
  swift_release();
  return swift_release();
}

uint64_t sub_1003B567C()
{
  if (qword_10099BA30 != -1) {
    swift_once(&qword_10099BA30, sub_100795FD8);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2B7D8);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "Done fetching own device locations from disk before publishing own devices.",  v4,  2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v5 = sub_100004AEC(&qword_1009B1040);
  return CheckedContinuation.resume(returning:)(v5, v5);
}

uint64_t type metadata accessor for DeviceBeaconPayloadPublisher()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd28DeviceBeaconPayloadPublisher);
}

uint64_t sub_1003B5784(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100015C48( &qword_1009ABA20,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for DeviceBeaconPayloadPublisher,  (uint64_t)&unk_1007FE6FC);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_1003B57C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v32 = a3;
  uint64_t v5 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v31 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v31 - v9;
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void **)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v31 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v31 - v16;
  uint64_t result = type metadata accessor for BeaconEstimatedLocation(0LL);
  uint64_t v19 = *(void *)(a2 + 16);
  if (!v19) {
    goto LABEL_12;
  }
  uint64_t v20 = result;
  uint64_t v21 = *(int *)(result + 44);
  uint64_t v31 = a1;
  int v22 = *(unsigned __int8 *)(a1 + v21);
  if (v19 == 1) {
    goto LABEL_12;
  }
  if (*(unsigned __int8 *)(a2 + 33) == v22)
  {
LABEL_5:
    sub_10001581C(v32, (uint64_t)v10, (uint64_t *)&unk_10099D720);
    uint64_t v23 = (unsigned int (*)(char *, uint64_t, uint64_t))v12[6];
    if (v23(v10, 1LL, v11) == 1)
    {
      uint64_t v24 = (uint64_t)v10;
    }

    else
    {
      uint64_t v25 = (void (*)(char *, char *, uint64_t))v12[4];
      v25(v17, v10, v11);
      sub_10001581C(v31 + *(int *)(v20 + 48), (uint64_t)v8, (uint64_t *)&unk_10099D720);
      if (v23(v8, 1LL, v11) != 1)
      {
        v25(v15, v8, v11);
        uint64_t v27 = sub_100015C48( &qword_1009A1280,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
        char v26 = dispatch thunk of static Comparable.< infix(_:_:)(v15, v17, v11, v27) ^ 1;
        uint64_t v28 = (void (*)(char *, uint64_t))v12[1];
        v28(v15, v11);
        v28(v17, v11);
        return v26 & 1;
      }

      ((void (*)(char *, uint64_t))v12[1])(v17, v11);
      uint64_t v24 = (uint64_t)v8;
    }

    sub_100015794(v24, (uint64_t *)&unk_10099D720);
    char v26 = 1;
    return v26 & 1;
  }

  if (v19 == 2)
  {
LABEL_12:
    char v26 = 0;
    return v26 & 1;
  }

  for (uint64_t i = 34LL; ; ++i)
  {
    uint64_t v30 = i - 31;
    if (__OFADD__(i - 32, 1LL)) {
      break;
    }
    char v26 = 0;
    if (v30 == v19) {
      return v26 & 1;
    }
  }

  __break(1u);
  return result;
}

unint64_t sub_1003B5A58()
{
  unint64_t result = qword_1009ABA30;
  if (!qword_1009ABA30)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FF30C, &type metadata for DiskFetchPolicy);
    atomic_store(result, &qword_1009ABA30);
  }

  return result;
}

uint64_t sub_1003B5A9C(uint64_t a1)
{
  return sub_1003B54C8(a1, *(void *)(v1 + 16), *(void *)(v1 + 24));
}

uint64_t sub_1003B5AA4()
{
  uint64_t v1 = sub_100004AEC(&qword_1009B1040);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1003B5B08()
{
  return sub_1003B567C();
}

uint64_t sub_1003B5B48()
{
  uint64_t v1 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + v4 + 24));
  uint64_t v7 = v0 + v4 + *(int *)(v1 + 32);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v5, v6);
}

void *sub_1003B5C14@<X0>(void *a1@<X8>)
{
  return sub_1005EA68C(a1);
}

uint64_t sub_1003B5C1C(uint64_t a1)
{
  return sub_10036CAB8(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_1003B5C28(uint64_t a1)
{
  return sub_1003B57C0(a1, *(void *)(v1 + 16), *(void *)(v1 + 24)) & 1;
}

uint64_t sub_1003B5C44()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + v4 + 1;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

void sub_1003B5CBC(void *a1@<X8>)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  sub_10079E310(v1 + v5, *(unsigned __int8 *)(v1 + v5 + *(void *)(v4 + 64)));
  if (!v2)
  {
    *a1 = v6;
    a1[1] = v7;
    a1[2] = v8;
    a1[3] = v9;
  }

uint64_t sub_1003B5D28(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v5 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  sub_10001581C(a1, (uint64_t)v4, (uint64_t *)&unk_10099D720);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  Class isa = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1LL, v6) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }

  NSString v9 = String._bridgeToObjectiveC()();
  [v5 setObject:isa forKey:v9];

  swift_unknownObjectRelease(isa);
  return sub_100015794(a1, (uint64_t *)&unk_10099D720);
}

void sub_1003B5E68( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, unint64_t a4@<X3>, void *a5@<X8>)
{
  unint64_t v81 = a4;
  uint64_t v75 = a1;
  uint64_t v77 = a5;
  uint64_t v76 = type metadata accessor for UUID(0LL);
  uint64_t v73 = *(void *)(v76 - 8);
  __chkstk_darwin(v76);
  __int128 v74 = (char *)&v66 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v70 = type metadata accessor for OwnSubmitLocationInfo(0LL);
  uint64_t v72 = *(void *)(v70 - 8);
  __chkstk_darwin(v70);
  uint64_t v71 = (char *)&v66 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v9);
  uint64_t v80 = (char *)&v66 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for Date(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v78 = (char *)&v66 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v66 - v15;
  uint64_t v17 = type metadata accessor for BeaconPayloadv1(0LL);
  __chkstk_darwin(v17);
  uint64_t v19 = (uint64_t *)((char *)&v66 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v20 = (int *)type metadata accessor for BeaconEstimatedLocation(0LL);
  double v21 = *(double *)(a2 + v20[9]);
  int v22 = sub_1000F0244(v21);
  uint64_t v23 = a2 + v20[10];
  uint64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v12 + 16);
  uint64_t v79 = v11;
  v24(v16, v23, v11);
  double v25 = *(double *)(a2 + v20[7]);
  double v26 = *(double *)(a2 + v20[8]);
  uint64_t v27 = a3;
  uint64_t v28 = a3;
  unint64_t v29 = v81;
  sub_10001736C(v28, v81);
  uint64_t v30 = v82;
  sub_1004A82A8(v27, v29, (uint64_t)v16, v22, 0, v19, v25, v26, v21);
  if (!v30)
  {
    uint64_t v31 = a2;
    int v82 = v24;
    uint64_t v32 = v79;
    uint64_t v33 = (uint64_t)v80;
    uint64_t v34 = v78;
    uint64_t v35 = BeaconPayloadv1.encode()();
    uint64_t v66 = v19;
    uint64_t v67 = v36;
    unint64_t v68 = v37;
    uint64_t v69 = v35;
    unint64_t v81 = v38;
    sub_10001581C(v31 + v20[12], v33, (uint64_t *)&unk_10099D720);
    uint64_t v39 = v32;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v12 + 48))(v33, 1LL, v32) == 1)
    {
      sub_100015794(v33, (uint64_t *)&unk_10099D720);
      if (qword_10099BA30 != -1) {
        swift_once(&qword_10099BA30, sub_100795FD8);
      }
      uint64_t v40 = type metadata accessor for Logger(0LL);
      sub_10000A720(v40, (uint64_t)qword_100A2B7D8);
      uint64_t v41 = v73;
      uint64_t v42 = v74;
      uint64_t v43 = v76;
      uint64_t v44 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v73 + 16))(v74, v75, v76);
      uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
      os_log_type_t v46 = static os_log_type_t.error.getter(v45);
      if (os_log_type_enabled(v45, v46))
      {
        uint64_t v47 = swift_slowAlloc(22LL, -1LL);
        uint64_t v48 = v41;
        uint64_t v49 = swift_slowAlloc(32LL, -1LL);
        *(_DWORD *)uint64_t v47 = 141558275;
        uint64_t v83 = 1752392040LL;
        v84[0] = v49;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v47 + 4, v47 + 12);
        *(_WORD *)(v47 + 12) = 2081;
        int v82 = (void (*)(char *, uint64_t, uint64_t))(v47 + 14);
        uint64_t v50 = sub_100015C48( qword_10099DFD0,  255LL,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v51 = dispatch thunk of CustomStringConvertible.description.getter(v43, v50);
        uint64_t v83 = sub_1003F11D4(v51, v52, v84);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(&v83, v84, v82, v47 + 22);
        swift_bridgeObjectRelease();
        (*(void (**)(char *, uint64_t))(v48 + 8))(v42, v43);
        _os_log_impl( (void *)&_mh_execute_header,  v45,  v46,  "location does not contain a scanDate %{private,mask.hash}s",  (uint8_t *)v47,  0x16u);
        swift_arrayDestroy(v49, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v49, -1LL, -1LL);
        swift_slowDealloc(v47, -1LL, -1LL);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v41 + 8))(v42, v43);
      }

      uint64_t v61 = (uint64_t)v66;
      uint64_t v62 = type metadata accessor for DeviceBeaconPayloadPublisher.PublishError(0LL);
      uint64_t v63 = sub_100015C48( &qword_1009ABA50,  255LL,  type metadata accessor for DeviceBeaconPayloadPublisher.PublishError,  (uint64_t)&unk_1007FE750);
      swift_allocError(v62, v63, 0LL, 0LL);
      uint64_t v65 = swift_storeEnumTagMultiPayload(v64, v62, 9LL);
      swift_willThrow(v65);
      sub_100016F9C(v69, v81);
      sub_100016F9C(v67, v68);
      sub_100018C68(v61, type metadata accessor for BeaconPayloadv1);
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t))(v12 + 32))(v34, v33, v32);
      uint64_t v53 = v71;
      v82(&v71[*(int *)(v70 + 20)], (uint64_t)v34, v32);
      unint64_t v54 = v68;
      *uint64_t v53 = v67;
      v53[1] = v54;
      uint64_t v55 = sub_100004AEC(&qword_10099D558);
      uint64_t v56 = *(unsigned __int8 *)(v72 + 80);
      uint64_t v57 = (v56 + 32) & ~v56;
      uint64_t v58 = swift_allocObject(v55, v57 + *(void *)(v72 + 72), v56 | 7);
      *(_OWORD *)(v58 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      sub_10002218C((uint64_t)v53, v58 + v57, type metadata accessor for OwnSubmitLocationInfo);
      (*(void (**)(char *, uint64_t))(v12 + 8))(v34, v39);
      sub_100018C68((uint64_t)v66, type metadata accessor for BeaconPayloadv1);
      uint64_t v59 = v77;
      unint64_t v60 = v81;
      *uint64_t v77 = v69;
      v59[1] = v60;
      *((_BYTE *)v59 + swift_weakDestroy(v0 + 16) = 1;
      v59[3] = 0LL;
      v59[4] = 0LL;
      *((_WORD *)v59 + 20) = 5;
      v59[6] = v58;
    }
  }

uint64_t type metadata accessor for DeviceBeaconPayloadPublisher.PublishError(uint64_t a1)
{
  uint64_t result = qword_1009ABB00;
  if (!qword_1009ABB00) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for DeviceBeaconPayloadPublisher.PublishError);
  }
  return result;
}

uint64_t sub_1003B647C()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 64) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1003B64F8()
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for Date(0LL) - 8) + 80LL);
  uint64_t v3 = v0 + 16;
  uint64_t v4 = *(void *)(v0 + 56);
  uint64_t v5 = v0 + ((v2 + 64) & ~v2);
  uint64_t v6 = (void *)swift_task_alloc(dword_1009ABA5C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100015D58;
  return sub_1003B10E4(v3, v4, v5);
}

uint64_t sub_1003B6574()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1003B6598(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1009ABA6C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100015D58;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1009ABA68 + dword_1009ABA68))(a1, v4);
}

unint64_t sub_1003B6608()
{
  unint64_t result = qword_1009ABA80;
  if (!qword_1009ABA80)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080A0C0, &type metadata for OwnSubmitRequest);
    atomic_store(result, (unint64_t *)&qword_1009ABA80);
  }

  return result;
}

uint64_t *sub_1003B664C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v12 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v12 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain();
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v13 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v13);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      uint64_t v9 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16LL))(a1, a2, v9);
      uint64_t v10 = *(int *)(sub_100004AEC(&qword_1009ABA88) + 48);
      uint64_t v11 = *(uint64_t *)((char *)a2 + v10);
      swift_errorRetain(v11);
      *(uint64_t *)((char *)a1 + v10) = v11;
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t sub_1003B6744(uint64_t a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 1) {
    return swift_bridgeObjectRelease();
  }
  if (!(_DWORD)result)
  {
    uint64_t v4 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
    uint64_t v5 = *(void *)(a1 + *(int *)(sub_100004AEC(&qword_1009ABA88) + 48));
    return swift_errorRelease(v5);
  }

  return result;
}

uint64_t *sub_1003B67BC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    swift_bridgeObjectRetain(v10);
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    uint64_t v8 = *(int *)(sub_100004AEC(&qword_1009ABA88) + 48);
    uint64_t v9 = *(uint64_t *)((char *)a2 + v8);
    swift_errorRetain(v9);
    *(uint64_t *)((char *)a1 + v8) = v9;
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

uint64_t *sub_1003B688C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100018C68((uint64_t)a1, type metadata accessor for DeviceBeaconPayloadPublisher.PublishError);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v10 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v10);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      uint64_t v7 = type metadata accessor for UUID(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      uint64_t v8 = *(int *)(sub_100004AEC(&qword_1009ABA88) + 48);
      uint64_t v9 = *(uint64_t *)((char *)a2 + v8);
      swift_errorRetain(v9);
      *(uint64_t *)((char *)a1 + v8) = v9;
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

char *sub_1003B6974(char *a1, char *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v6 = type metadata accessor for UUID(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    uint64_t v7 = sub_100004AEC(&qword_1009ABA88);
    *(void *)&a1[*(int *)(v7 + 48)] = *(void *)&a2[*(int *)(v7 + 48)];
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

char *sub_1003B6A14(char *a1, char *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_100018C68((uint64_t)a1, type metadata accessor for DeviceBeaconPayloadPublisher.PublishError);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      uint64_t v6 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, char *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      uint64_t v7 = sub_100004AEC(&qword_1009ABA88);
      *(void *)&a1[*(int *)(v7 + 48)] = *(void *)&a2[*(int *)(v7 + 48)];
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t sub_1003B6ACC(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    swift_getTupleTypeLayout2(v4, *(void *)(result - 8) + 64LL, "\b");
    v5[0] = v4;
    v5[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 2LL, v5);
    return 0LL;
  }

  return result;
}

uint64_t sub_1003B6B54(uint64_t a1)
{
  return sub_1003B5C28(a1) & 1;
}

uint64_t sub_1003B6B6C()
{
  uint64_t v1 = (char *)v0 + OBJC_IVAR____TtC12searchpartyd40SelfLocatingBeaconPayloadCacheSubscriber_lastPublishedDate;
  uint64_t v2 = type metadata accessor for Date(0LL);
  (*(void (**)(char *, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);

  return swift_deallocClassInstance(v0, *(unsigned int *)(*v0 + 48LL), *(unsigned __int16 *)(*v0 + 52LL));
}

uint64_t sub_1003B6BE4()
{
  return type metadata accessor for SelfLocatingBeaconPayloadCacheSubscriber(0LL);
}

uint64_t type metadata accessor for SelfLocatingBeaconPayloadCacheSubscriber(uint64_t a1)
{
  uint64_t result = qword_1009ABB70;
  if (!qword_1009ABB70) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for SelfLocatingBeaconPayloadCacheSubscriber);
  }
  return result;
}

uint64_t sub_1003B6C28(uint64_t a1)
{
  v4[0] = &unk_1007FE7E0;
  v4[1] = &unk_1007FE7E0;
  void v4[2] = &unk_1007FE7F8;
  uint64_t result = type metadata accessor for Date(319LL);
  if (v3 <= 0x3F)
  {
    v4[3] = *(void *)(result - 8) + 64LL;
    void v4[4] = (char *)&value witness table for Builtin.UnknownObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 5LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1003B6CB8()
{
  uint64_t v1 = v0;
  uint64_t v2 = type metadata accessor for OS_dispatch_queue.Attributes(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v19 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for DispatchQoS(0LL);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v19 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for OS_dispatch_queue.AutoreleaseFrequency(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v19 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v1 + 48) = 0LL;
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = 0u;
  *(_OWORD *)(v1 + 32) = 0u;
  static Date.distantPast.getter(v10);
  uint64_t v13 = OBJC_IVAR____TtC12searchpartyd40SelfLocatingBeaconPayloadCacheSubscriber_serialQueue;
  sub_100004AB0();
  uint64_t v14 = (*(uint64_t (**)(char *, void, uint64_t))(v9 + 104))( v12,  enum case for OS_dispatch_queue.AutoreleaseFrequency.workItem(_:),  v8);
  static DispatchQoS.unspecified.getter(v14);
  uint64_t v20 = _swiftEmptyArrayStorage;
  unint64_t v15 = sub_1003B6E70();
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009A0CD0);
  unint64_t v17 = sub_100004B2C();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v20, v16, v17, v2, v15);
  *(void *)(v1 + v13) = OS_dispatch_queue.init(label:qos:attributes:autoreleaseFrequency:target:)( 0xD000000000000046LL,  0x8000000100860160LL,  v7,  v4,  v12,  0LL);
  return v1;
}

unint64_t sub_1003B6E70()
{
  unint64_t result = qword_10099BAA0;
  if (!qword_10099BAA0)
  {
    uint64_t v1 = type metadata accessor for OS_dispatch_queue.Attributes(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for OS_dispatch_queue.Attributes, v1);
    atomic_store(result, (unint64_t *)&qword_10099BAA0);
  }

  return result;
}

void sub_1003B6EB8(uint64_t a1, uint64_t a2)
{
  v3[3] = &type metadata for Data;
  v3[4] = &protocol witness table for Data;
  v3[0] = a1;
  v3[1] = a2;
  uint64_t v2 = (char *)&loc_1003B6F1C
     + *((int *)qword_1003B7150 + (sub_100012ED8(v3, (uint64_t)&type metadata for Data)[1] >> 62));
  __asm { BR              X10 }

uint64_t sub_1003B6F2C()
{
  uint64_t v6 = v2;
  __int16 v7 = v3;
  char v8 = BYTE2(v3);
  char v9 = BYTE3(v3);
  char v10 = BYTE4(v3);
  char v11 = BYTE5(v3);
  sub_10001736C(v1, v0);
  sub_1003CBAA4(&v6, (_BYTE *)&v6 + BYTE6(v3), &v12);
  sub_100016F9C(v1, v0);
  uint64_t v4 = v12;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v13);
  return v4;
}

uint64_t sub_1003B7160(uint64_t a1, uint64_t a2)
{
  v9[3] = &type metadata for UnsafeMutableRawBufferPointer;
  v9[4] = &protocol witness table for UnsafeMutableRawBufferPointer;
  v9[0] = a1;
  v9[1] = a2;
  uint64_t v2 = sub_100012ED8(v9, (uint64_t)&type metadata for UnsafeMutableRawBufferPointer);
  uint64_t v3 = *v2;
  if (*v2)
  {
    uint64_t v4 = (_BYTE *)v2[1];
    uint64_t v5 = (uint64_t)&v4[-v3];
    if (v4 == (_BYTE *)v3)
    {
      uint64_t v3 = 0LL;
    }

    else if (v5 <= 14)
    {
      uint64_t v3 = sub_1003D55A8((_BYTE *)*v2, v4);
    }

    else
    {
      uint64_t v7 = type metadata accessor for __DataStorage(0LL);
      swift_allocObject(v7, *(unsigned int *)(v7 + 48), *(unsigned __int16 *)(v7 + 52));
      __DataStorage.init(bytes:length:)(v3, v5);
      if ((unint64_t)v5 >= 0x7FFFFFFF)
      {
        uint64_t v8 = type metadata accessor for Data.RangeReference(0LL);
        uint64_t v3 = swift_allocObject(v8, 32LL, 7LL);
        *(void *)(v3 + swift_weakDestroy(v0 + 16) = 0LL;
        *(void *)(v3 + 24) = v5;
      }

      else
      {
        uint64_t v3 = v5 << 32;
      }
    }
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v9);
  return v3;
}

uint64_t sub_1003B7260(uint64_t a1, uint64_t a2)
{
  v8[3] = &type metadata for UnsafeRawBufferPointer;
  v8[4] = &protocol witness table for UnsafeRawBufferPointer;
  v8[0] = a1;
  v8[1] = a2;
  uint64_t v2 = sub_100012ED8(v8, (uint64_t)&type metadata for UnsafeRawBufferPointer);
  uint64_t v3 = (_BYTE *)*v2;
  if (*v2 && (uint64_t v4 = (_BYTE *)v2[1], v5 = v4 - v3, v4 != v3))
  {
    if (v5 <= 14)
    {
      uint64_t v6 = sub_1003D55A8(v3, v4);
    }

    else if ((unint64_t)v5 >= 0x7FFFFFFF)
    {
      uint64_t v6 = sub_1003D5668((uint64_t)v3, (uint64_t)v4);
    }

    else
    {
      uint64_t v6 = sub_1003D56E0((uint64_t)v3, (uint64_t)v4);
    }
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
  return v6;
}

uint64_t sub_1003B7318(uint64_t a1, uint64_t a2, uint64_t a3)
{
  *(void *)(v4 + 64) = a1;
  *(void *)(v4 + 72) = v3;
  if (a2)
  {
    uint64_t ObjectType = swift_getObjectType(a2);
    uint64_t v7 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, a3);
    uint64_t v9 = v8;
  }

  else
  {
    uint64_t v7 = 0LL;
    uint64_t v9 = 0LL;
  }

  return swift_task_switch(sub_1003B7388, v7, v9);
}

uint64_t sub_1003B7388()
{
  __int128 v23 = 0u;
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    uint64_t v16 = 0LL;
    uint64_t v9 = 0LL;
    unint64_t v8 = 0xF000000000000000LL;
    __int128 v15 = 0uLL;
    __int128 v14 = 0uLL;
  }

  else
  {
    double v21 = v0 + 1;
    uint64_t v1 = (uint64_t *)*((void *)v0 + 9);
    uint64_t v2 = *v1;
    unint64_t v3 = v1[1];
    uint64_t v4 = v1[2];
    unint64_t v5 = v1[3];
    uint64_t v19 = v0;
    uint64_t v7 = v1[4];
    unint64_t v6 = v1[5];
    unint64_t v8 = v1[8];
    uint64_t v18 = v1[6];
    uint64_t v9 = v1[7];
    sub_10001736C(v9, v8);
    sub_10001736C(v9, v8);
    sub_100018BE4(v2, v3);
    sub_10001736C(v4, v5);
    uint64_t v20 = v7;
    uint64_t v10 = v7;
    unint64_t v11 = v6;
    sub_10001736C(v10, v6);
    sub_10001736C(v9, v8);
    sub_100018BE4(v2, v3);
    sub_10001736C(v4, v5);
    sub_1004DB8E0(v2, v3, v4, v5, v9, v8, 1, v1 + 6, v21, v1 + 7);
    unint64_t v0 = v19;
    __int128 v22 = v19[2];
    __int128 v23 = v19[1];
    __int128 v17 = v19[3];
    sub_100016F9C(v9, v8);
    sub_100016F9C(v4, v5);
    sub_1000182F0(v2, v3);
    sub_1000182F0(v2, v3);
    sub_100016F9C(v4, v5);
    sub_100016F9C(v20, v11);
    sub_100016F9C(v9, v8);
    __int128 v14 = v17;
    __int128 v15 = v22;
    uint64_t v16 = v18;
  }

  uint64_t v12 = *((void *)v0 + 8);
  *(void *)uint64_t v12 = v16;
  *(void *)(v12 + 8) = v9;
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = v8;
  *(_OWORD *)(v12 + 24) = v23;
  *(_OWORD *)(v12 + 40) = v15;
  *(_OWORD *)(v12 + 56) = v14;
  return (*((uint64_t (**)(void))v0 + 1))();
}

id sub_1003B768C(uint64_t a1)
{
  return sub_1003C7584(a1, (SEL *)&selRef_fileHandleForReadingFromURL_error_);
}

uint64_t sub_1003B76DC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003B76F8(a1, a2, a3, (uint64_t)&type metadata for () + 8);
}

uint64_t sub_1003B76EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003B76F8(a1, a2, a3, (uint64_t)&type metadata for Data);
}

uint64_t sub_1003B76F8(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v8 = type metadata accessor for TaskPriority(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))(a1, 1LL, v8);
  if ((_DWORD)v10 == 1)
  {
    sub_100015794(a1, &qword_1009A9BF0);
    uint64_t v11 = 7168LL;
    uint64_t v12 = *(void *)(a3 + 16);
    if (!v12)
    {
LABEL_6:
      uint64_t v18 = 0LL;
      return swift_task_create(v11, v18, a4, a2, a3);
    }
  }

  else
  {
    unsigned __int8 v19 = TaskPriority.rawValue.getter(v10);
    (*(void (**)(uint64_t, uint64_t))(v9 + 8))(a1, v8);
    uint64_t v11 = v19 | 0x1C00LL;
    uint64_t v12 = *(void *)(a3 + 16);
    if (!v12) {
      goto LABEL_6;
    }
  }

  uint64_t v13 = *(void *)(a3 + 24);
  uint64_t ObjectType = swift_getObjectType(v12);
  swift_unknownObjectRetain(v12);
  uint64_t v15 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v13);
  uint64_t v17 = v16;
  swift_unknownObjectRelease(v12);
  if (!(v17 | v15)) {
    goto LABEL_6;
  }
  v21[0] = 0LL;
  v21[1] = 0LL;
  uint64_t v18 = v21;
  v21[2] = v15;
  v21[3] = v17;
  return swift_task_create(v11, v18, a4, a2, a3);
}

uint64_t sub_1003B7828(uint64_t result, uint64_t a2)
{
  if ((result & 0x8000000000000000LL) == 0) {
    return a2;
  }
  __break(1u);
  return result;
}

void sub_1003B7854(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((a1 & 0x8000000000000000LL) == 0) {
    __asm { BR              X9 }
  }

  __break(1u);
  JUMPOUT(0x1003B79A0LL);
}

Swift::Int sub_1003B79D4(void *a1)
{
  uint64_t v2 = *(void *)(type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo(0LL) - 8);
  unint64_t v3 = (void *)*a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    unint64_t v3 = (void *)sub_1003D4AF0(v3);
  }
  uint64_t v4 = v3[2];
  v6[0] = (uint64_t)v3 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  v6[1] = v4;
  Swift::Int result = sub_1003C96B0(v6);
  *a1 = v3;
  return result;
}

Swift::Int sub_1003B7A54(uint64_t *a1)
{
  uint64_t v2 = *a1;
  if ((swift_isUniquelyReferenced_nonNull_native(*a1) & 1) == 0) {
    uint64_t v2 = sub_1003D4B04(v2);
  }
  uint64_t v3 = *(void *)(v2 + 16);
  v5[0] = v2 + 32;
  v5[1] = v3;
  Swift::Int result = sub_1003CA0FC(v5);
  *a1 = v2;
  return result;
}

uint64_t sub_1003B7ABC(uint64_t a1)
{
  return sub_1003BE864(a1, qword_1009ABC80);
}

uint64_t sub_1003B7AC8()
{
  *(void *)(v1 + 104) = v0;
  return swift_task_switch(sub_1003B7AE0, v0, 0LL);
}

uint64_t sub_1003B7AE0()
{
  if (*(void *)(v0 + 80))
  {
    uint64_t v1 = *(void *)(v0 + 104);
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    uint64_t v2 = *(void *)(v0 + 40);
    uint64_t v3 = *(void *)(v0 + 48);
    sub_100012ED8((void *)(v0 + 16), v2);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 8))( v1 + OBJC_IVAR____TtC12searchpartyd23BeaconKeyServiceBuilder_keyMapDirectory,  v2,  v3);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  }

  else
  {
    sub_100015794(v0 + 56, &qword_1009AC368);
  }

  sub_1003B85DC();
  uint64_t v4 = (void *)swift_task_alloc(dword_1009AC07C);
  *(void *)(v0 + 112) = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1003B7D40;
  return sub_1003B7D88();
}

uint64_t sub_1003B7D40()
{
  uint64_t v2 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 112));
  return (*(uint64_t (**)(void))(v2 + 8))();
}

uint64_t sub_1003B7D88()
{
  v1[10] = v0;
  uint64_t v2 = type metadata accessor for BeaconKeyServiceBuilder.FileKey(0LL);
  v1[11] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[12] = v3;
  v1[13] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for BeaconIdentifier(0LL);
  v1[14] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for KeyGenerationBeaconInfo(0LL);
  v1[15] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v1[16] = v6;
  v1[17] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003B7E30, v0, 0LL);
}

uint64_t sub_1003B7E30()
{
  uint64_t v2 = (void *)(v0 + 80);
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v3 = (void *)(v0 + 72);
  uint64_t v4 = sub_1004759C4(*(void **)(v1 + 144));
  uint64_t v65 = *(void *)(v4 + 16);
  if (!v65)
  {
    swift_bridgeObjectRelease();
LABEL_49:
    if (qword_10099B3C8 != -1) {
      swift_once(&qword_10099B3C8, sub_1003B7ABC);
    }
    uint64_t v53 = type metadata accessor for Logger(0LL);
    sub_10000A720(v53, (uint64_t)qword_1009ABC80);
    uint64_t v54 = swift_retain();
    uint64_t v55 = (os_log_s *)Logger.logObject.getter(v54);
    os_log_type_t v56 = static os_log_type_t.default.getter(v55);
    BOOL v57 = os_log_type_enabled(v55, v56);
    uint64_t v58 = *v2;
    if (v57)
    {
      uint64_t v59 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v59 = 134217984;
      swift_beginAccess(v58 + 160, v2 - 5, 0LL, 0LL);
      *uint64_t v3 = *(void *)(*(void *)(v58 + 160) + 16LL);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v3, v2, v59 + 4, v59 + 12);
      swift_release();
      _os_log_impl((void *)&_mh_execute_header, v55, v56, "opened all keymaps, keymaps.count = %ld", v59, 0xCu);
      swift_slowDealloc(v59, -1LL, -1LL);
    }

    else
    {

      swift_release();
    }

    goto LABEL_54;
  }

  uint64_t v62 = v3;
  unint64_t isUniquelyReferenced_nonNull_native = 0LL;
  uint64_t v72 = v2 - 8;
  uint64_t v67 = *(void *)(v73 + 120);
  uint64_t v68 = *(void *)(v73 + 128);
  uint64_t v70 = *(void *)(v73 + 96);
  uint64_t v71 = *(void *)(v73 + 88);
  uint64_t v15 = (void *)(*(void *)(v73 + 80) + 160LL);
  unint64_t v66 = v4 + ((*(unsigned __int8 *)(v68 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v68 + 80));
  uint64_t v63 = v4;
  uint64_t v64 = v2;
  while (1)
  {
    if (isUniquelyReferenced_nonNull_native >= *(void *)(v4 + 16)) {
      goto LABEL_59;
    }
    uint64_t v17 = *(void *)(v73 + 136);
    uint64_t v18 = *(void *)(v73 + 112);
    unint64_t v69 = isUniquelyReferenced_nonNull_native;
    sub_10001DC4C( v66 + *(void *)(v68 + 72) * isUniquelyReferenced_nonNull_native,  v17,  type metadata accessor for KeyGenerationBeaconInfo);
    sub_10001DC4C(v17, v18, type metadata accessor for BeaconIdentifier);
    uint64_t v19 = v17 + *(int *)(v67 + 24);
    BOOL v20 = *(void *)(v19 + 8) >> 60 != 15LL && *(void *)(v19 + 40) >> 60 != 15LL;
    uint64_t v21 = sub_1003C3F44(*(void *)(v73 + 112), 0);
    if (v21)
    {
      uint64_t v22 = v21;
      uint64_t v23 = swift_retain();
      specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v23);
      unint64_t v24 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
      if (isUniquelyReferenced_nonNull_native >= v24 >> 1) {
        specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v24 > 1,  isUniquelyReferenced_nonNull_native + 1,  1LL);
      }
      uint64_t v25 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)( isUniquelyReferenced_nonNull_native,  v22);
      specialized Array._endMutation()(v25);
      swift_release();
    }

    if (v20)
    {
      uint64_t v26 = sub_1003C3F44(*(void *)(v73 + 112), 1);
      if (v26)
      {
        uint64_t v27 = v26;
        uint64_t v28 = swift_retain();
        specialized Array._makeUniqueAndReserveCapacityIfNotUnique()(v28);
        unint64_t v29 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL) + 0x18);
        if (isUniquelyReferenced_nonNull_native >= v29 >> 1) {
          specialized Array._createNewBuffer(bufferIsUnique:minimumCapacity:growForAppend:)( v29 > 1,  isUniquelyReferenced_nonNull_native + 1,  1LL);
        }
        uint64_t v30 = specialized Array._appendElementAssumeUniqueAndCapacity(_:newElement:)( isUniquelyReferenced_nonNull_native,  v27);
        specialized Array._endMutation()(v30);
        swift_release();
      }
    }

    sub_100018C68(*(void *)(v73 + 112), type metadata accessor for BeaconIdentifier);
    if (!((unint64_t)_swiftEmptyArrayStorage >> 62))
    {
      uint64_t v31 = *(void *)(((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFF8LL) + 0x10);
      if (v31) {
        break;
      }
      goto LABEL_6;
    }

    uint64_t v51 = (uint64_t)_swiftEmptyArrayStorage < 0
        ? _swiftEmptyArrayStorage
        : (void *)((unint64_t)_swiftEmptyArrayStorage & 0xFFFFFFFFFFFFFF8LL);
    swift_bridgeObjectRetain(_swiftEmptyArrayStorage);
    uint64_t v31 = _CocoaArrayWrapper.endIndex.getter(v51);
    swift_bridgeObjectRelease();
    if (v31) {
      break;
    }
LABEL_6:
    unint64_t isUniquelyReferenced_nonNull_native = v69 + 1;
    uint64_t v16 = *(void *)(v73 + 136);
    swift_bridgeObjectRelease();
    sub_100018C68(v16, type metadata accessor for KeyGenerationBeaconInfo);
    uint64_t v2 = v64;
    uint64_t v4 = v63;
    if (v69 + 1 == v65)
    {
      swift_bridgeObjectRelease();
      uint64_t v3 = v62;
      goto LABEL_49;
    }
  }

  uint64_t v32 = 0LL;
  while (((unint64_t)_swiftEmptyArrayStorage & 0xC000000000000001LL) != 0)
  {
    uint64_t v34 = specialized _ArrayBuffer._getElementSlowPath(_:)(v32, _swiftEmptyArrayStorage);
    uint64_t v35 = v32 + 1;
    if (__OFADD__(v32, 1LL)) {
      goto LABEL_56;
    }
LABEL_30:
    uint64_t v36 = v31;
    uint64_t v37 = *(void *)(v73 + 104);
    sub_10001DC4C(*(void *)(v73 + 136), v37, type metadata accessor for BeaconIdentifier);
    *(_BYTE *)(v37 + *(int *)(v71 + 20)) = *(_BYTE *)(v34 + OBJC_IVAR____TtC12searchpartyd17BeaconKeyIndexMap_sequence);
    swift_beginAccess(v15, v72, 33LL, 0LL);
    swift_retain();
    unint64_t isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v15);
    unint64_t v38 = (void *)*v15;
    __int128 v74 = (void *)*v15;
    *uint64_t v15 = 0x8000000000000000LL;
    unint64_t v40 = sub_10030D4F4(v37);
    uint64_t v41 = v38[2];
    BOOL v42 = (v39 & 1) == 0;
    uint64_t v43 = v41 + v42;
    if (__OFADD__(v41, v42)) {
      goto LABEL_57;
    }
    uint64_t v2 = v39;
    if (v38[3] >= v43)
    {
      if ((isUniquelyReferenced_nonNull_native & 1) != 0)
      {
      }

      else
      {
        sub_100064C8C();
        unint64_t v38 = v74;
      }
    }

    else
    {
      uint64_t v44 = *(void *)(v73 + 104);
      sub_10004F6E4(v43, isUniquelyReferenced_nonNull_native);
      unint64_t v38 = v74;
      unint64_t v45 = sub_10030D4F4(v44);
      unint64_t v40 = v45;
      if ((v2 & 1) != 0)
      {
LABEL_23:
        uint64_t v33 = v38[7];
        swift_release();
        *(void *)(v33 + 8 * v40) = v34;
        goto LABEL_24;
      }
    }

    uint64_t v47 = *(void *)(v73 + 104);
    v38[(v40 >> 6) + 8] |= 1LL << v40;
    sub_10001DC4C(v47, v38[6] + *(void *)(v70 + 72) * v40, type metadata accessor for BeaconKeyServiceBuilder.FileKey);
    *(void *)(v38[7] + 8 * v40) = v34;
    uint64_t v48 = v38[2];
    BOOL v49 = __OFADD__(v48, 1LL);
    uint64_t v50 = v48 + 1;
    if (v49) {
      goto LABEL_58;
    }
    v38[2] = v50;
LABEL_24:
    unint64_t isUniquelyReferenced_nonNull_native = *(void *)(v73 + 104);
    *uint64_t v15 = v38;
    swift_bridgeObjectRelease();
    sub_100018C68(isUniquelyReferenced_nonNull_native, type metadata accessor for BeaconKeyServiceBuilder.FileKey);
    swift_endAccess(v72);
    swift_release();
    ++v32;
    uint64_t v31 = v36;
    if (v35 == v36) {
      goto LABEL_6;
    }
  }

  uint64_t v34 = _swiftEmptyArrayStorage[v32 + 4];
  swift_retain();
  uint64_t v35 = v32 + 1;
  if (!__OFADD__(v32, 1LL)) {
    goto LABEL_30;
  }
LABEL_56:
  __break(1u);
LABEL_57:
  __break(1u);
LABEL_58:
  __break(1u);
LABEL_59:
  __break(1u);
  swift_once(&qword_10099B3C8, sub_1003B7ABC);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_10000A720(v5, (uint64_t)qword_1009ABC80);
  uint64_t v6 = swift_errorRetain(isUniquelyReferenced_nonNull_native);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = v2 - 2;
    uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v11 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v10 = 138412290;
    uint64_t v12 = _convertErrorToNSError(_:)(isUniquelyReferenced_nonNull_native);
    *uint64_t v9 = v12;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v9, v15, v10 + 4, v10 + 12);
    *uint64_t v11 = v12;
    swift_errorRelease(isUniquelyReferenced_nonNull_native);
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Error in openAllKeyMaps(): %@", v10, 0xCu);
    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v11, 1LL, v13);
    swift_slowDealloc(v11, -1LL, -1LL);
    swift_slowDealloc(v10, -1LL, -1LL);

    swift_errorRelease(isUniquelyReferenced_nonNull_native);
  }

  else
  {
    swift_errorRelease(isUniquelyReferenced_nonNull_native);
    swift_errorRelease(isUniquelyReferenced_nonNull_native);
  }

void sub_1003B85DC()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = __chkstk_darwin(v1);
  uint64_t v5 = (char *)&v50 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v50 - v6;
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v50 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v54 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v53 = *(void *)(v54 - 8);
  __chkstk_darwin(v54);
  uint64_t v12 = (char *)&v50 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v60 = [(id)objc_opt_self(NSFileManager) defaultManager];
  sub_100022898(0LL, (unint64_t *)&qword_1009AC0D0, &OBJC_CLASS___NSFileManager_ptr);
  uint64_t v13 = v0 + OBJC_IVAR____TtC12searchpartyd23BeaconKeyServiceBuilder_keyMapDirectory;
  static NSFileManager.createDirectoryIfNecessary(url:attributes:)( v0 + OBJC_IVAR____TtC12searchpartyd23BeaconKeyServiceBuilder_keyMapDirectory,  0LL);
  uint64_t v50 = v0 + 176;
  sub_10001581C(v0 + 176, (uint64_t)&v63, &qword_1009AC368);
  uint64_t v59 = v12;
  if (v64)
  {
    sub_100012EC0(&v63, (uint64_t)v65);
    uint64_t v14 = v66;
    uint64_t v15 = v67;
    sub_100012ED8(v65, v66);
    uint64_t v16 = *(void (**)(uint64_t, uint64_t, uint64_t))(v15 + 8);
    uint64_t v17 = v15;
    uint64_t v12 = v59;
    v16(v13, v14, v17);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v65);
  }

  else
  {
    sub_100015794((uint64_t)&v63, &qword_1009AC368);
  }

  uint64_t v51 = v13;
  uint64_t v18 = NSFileManager.deepSequence(at:includingPropertiesForKeys:options:)(v13, 0LL, 0LL);
  DirectorySequence.next()(v18);
  uint64_t v19 = *(unsigned int (**)(void, void, void))(v2 + 48);
  if (v19(v10, 1LL, v1) != 1)
  {
    uint64_t v62 = *(uint64_t (**)(char *, char *, uint64_t))(v2 + 32);
    *(void *)&__int128 v20 = 136315138LL;
    __int128 v56 = v20;
    uint64_t v55 = (char *)&type metadata for Any + 8;
    uint64_t v61 = v10;
    BOOL v57 = v19;
    uint64_t v58 = v2;
    for (uint64_t i = v62(v7, v10, v1); ; uint64_t i = v62(v7, v26, v1))
    {
      URL.lastPathComponent.getter(i);
      v27._countAndFlagsBits = 46LL;
      v27._object = (void *)0xE100000000000000LL;
      Swift::Bool v28 = String.hasPrefix(_:)(v27);
      swift_bridgeObjectRelease();
      if (v28)
      {
        if (qword_10099B3C8 != -1) {
          swift_once(&qword_10099B3C8, sub_1003B7ABC);
        }
        uint64_t v29 = type metadata accessor for Logger(0LL);
        sub_10000A720(v29, (uint64_t)qword_1009ABC80);
        uint64_t v30 = (*(uint64_t (**)(char *, char *, uint64_t))(v2 + 16))(v5, v7, v1);
        uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
        os_log_type_t v32 = static os_log_type_t.default.getter(v31);
        if (os_log_type_enabled(v31, v32))
        {
          uint64_t v33 = swift_slowAlloc(12LL, -1LL);
          uint64_t v34 = (void *)swift_slowAlloc(32LL, -1LL);
          v65[0] = v34;
          *(_DWORD *)uint64_t v33 = v56;
          uint64_t v35 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
          uint64_t v36 = dispatch thunk of CustomStringConvertible.description.getter(v1, v35);
          *(void *)(v33 + 4) = sub_1003F11D4(v36, v37, (uint64_t *)v65);
          swift_bridgeObjectRelease();
          unint64_t v24 = *(void (**)(char *, uint64_t))(v58 + 8);
          v24(v5, v1);
          _os_log_impl((void *)&_mh_execute_header, v31, v32, "cleanup removing %s", (uint8_t *)v33, 0xCu);
          swift_arrayDestroy(v34, 1LL, v55);
          unint64_t v38 = v34;
          uint64_t v19 = v57;
          swift_slowDealloc(v38, -1LL, -1LL);
          uint64_t v39 = v33;
          uint64_t v2 = v58;
          swift_slowDealloc(v39, -1LL, -1LL);
        }

        else
        {
          unint64_t v24 = *(void (**)(char *, uint64_t))(v2 + 8);
          v24(v5, v1);
        }

        uint64_t v12 = v59;
        URL._bridgeToObjectiveC()(v40);
        BOOL v42 = v41;
        v65[0] = 0LL;
        unsigned int v43 = [v60 removeItemAtURL:v41 error:v65];

        id v44 = v65[0];
        if (!v43)
        {
          id v48 = v65[0];
          _convertNSErrorToError(_:)(v44);

          swift_willThrow(v49);
          v24(v7, v1);
          (*(void (**)(char *, uint64_t))(v53 + 8))(v12, v54);
          return;
        }

        id v45 = v65[0];
      }

      else
      {
        unint64_t v24 = *(void (**)(char *, uint64_t))(v2 + 8);
      }

      uint64_t v25 = ((uint64_t (*)(char *, uint64_t))v24)(v7, v1);
      uint64_t v26 = v61;
      DirectorySequence.next()(v25);
      if (v19(v26, 1LL, v1) == 1) {
        break;
      }
    }
  }

  (*(void (**)(char *, uint64_t))(v53 + 8))(v12, v54);
  uint64_t v21 = v51;
  uint64_t v22 = v52;
  NSFileManager.removeEmptyDirectoriesRecursively(baseURL:)(v51);
  if (v22)
  {
  }

  else
  {
    sub_10001581C(v50, (uint64_t)&v63, &qword_1009AC368);
    if (v64)
    {
      sub_100012EC0(&v63, (uint64_t)v65);
      uint64_t v46 = v66;
      uint64_t v47 = v67;
      sub_100012ED8(v65, v66);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(v47 + 16))(v21, v46, v47);

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v65);
    }

    else
    {

      sub_100015794((uint64_t)&v63, &qword_1009AC368);
    }
  }

uint64_t sub_1003B8BB4()
{
  uint64_t v1 = v0 + OBJC_IVAR____TtC12searchpartyd23BeaconKeyServiceBuilder_keyMapDirectory;
  uint64_t v2 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_defaultActor_destroy(v0);
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1003B8C38()
{
  return type metadata accessor for BeaconKeyServiceBuilder(0LL);
}

uint64_t type metadata accessor for BeaconKeyServiceBuilder(uint64_t a1)
{
  return sub_10008BED8(a1, (uint64_t *)&unk_1009ABCE0, (uint64_t)&nominal type descriptor for BeaconKeyServiceBuilder);
}

uint64_t sub_1003B8C54(uint64_t a1)
{
  v4[1] = &unk_1007FE8F0;
  void v4[2] = &unk_1007FE8F0;
  v4[3] = (char *)&value witness table for Builtin.NativeObject + 64;
  void v4[4] = (char *)&value witness table for Builtin.BridgeObject + 64;
  void v4[5] = (char *)&value witness table for Builtin.BridgeObject + 64;
  void v4[6] = (char *)&value witness table for Builtin.Int64 + 64;
  void v4[7] = &unk_1007FE908;
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    void v4[8] = *(void *)(result - 8) + 64LL;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 9LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1003B8D0C()
{
  v1[4] = v0;
  v1[5] = *v0;
  uint64_t v2 = type metadata accessor for UUID(0LL);
  v1[6] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[7] = v3;
  v1[8] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  void v1[9] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for URL(0LL);
  v1[10] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v1[11] = v6;
  uint64_t v7 = *(void *)(v6 + 64);
  v1[12] = v7;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v1[13] = swift_task_alloc(v8);
  v1[14] = swift_task_alloc(v8);
  uint64_t v9 = sub_100004AEC(&qword_1009AC060);
  v1[15] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(type metadata accessor for KeyGenerationBeaconInfo(0LL) - 8);
  v1[16] = v10;
  v1[17] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for BeaconIdentifier(0LL);
  v1[18] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v1[19] = v12;
  uint64_t v13 = *(void *)(v12 + 64);
  v1[20] = v13;
  unint64_t v14 = (v13 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v1[21] = swift_task_alloc(v14);
  v1[22] = swift_task_alloc(v14);
  v1[23] = swift_task_alloc(v14);
  return swift_task_switch(sub_1003B8E64, 0LL, 0LL);
}

uint64_t sub_1003B8E64()
{
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  uint64_t v1 = qword_100A2A710;
  *(void *)(v0 + 192) = qword_100A2A710;
  uint64_t v2 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v3 = (void *)swift_task_alloc(v2);
  *(void *)(v0 + 200) = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1003B8F14;
  return unsafeBlocking<A>(_:)(v0 + 16, sub_100015814, v1, &type metadata for Configuration);
}

uint64_t sub_1003B8F14()
{
  return swift_task_switch(sub_1003B8F70, 0LL, 0LL);
}

unint64_t sub_1003B8F70()
{
  uint64_t v1 = *(void *)(v0 + 16);
  unint64_t result = sub_1006A1370(v1);
  if ((result & 0x8000000000000000LL) != 0) {
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  }
  *(void *)(v0 + 208) = 96 * result;
  if (!is_mul_ok(result, 0x60uLL))
  {
    __break(1u);
LABEL_52:
    __break(1u);
    goto LABEL_53;
  }

  unint64_t result = sub_1006A1384(v1);
  if ((result & 0x8000000000000000LL) != 0) {
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  }
  *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = 96 * result;
  if (!is_mul_ok(result, 0x60uLL)) {
    goto LABEL_52;
  }
  unint64_t result = sub_1006A13C0(v1);
  if ((result & 0x8000000000000000LL) != 0) {
    return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  }
  *(void *)(v0 + 224) = 96 * result;
  if (is_mul_ok(result, 0x60uLL))
  {
    unint64_t v3 = sub_1006A1398(v1);
    unint64_t result = swift_bridgeObjectRelease();
    if ((v3 & 0x8000000000000000LL) == 0)
    {
      *(void *)(v0 + 232) = 96 * v3;
      if (is_mul_ok(v3, 0x60uLL))
      {
        *(void *)(v0 + 240) = mach_continuous_time();
        uint64_t v4 = sub_1003B9FA8();
        *(void *)(v0 + 248) = v4;
        uint64_t v5 = v4;
        uint64_t v6 = sub_10047558C(*(void **)(*(void *)(v0 + 32) + 144LL));
        *(void *)(v0 + 256) = v6;
        uint64_t v7 = v6;
        swift_bridgeObjectRetain(v5);
        uint64_t v9 = sub_1006EF6C0(v8);
        uint64_t v10 = v9;
        int64_t v11 = *(void *)(v7 + 16);
        if (v11)
        {
          uint64_t v77 = v9;
          uint64_t v12 = *(void *)(v0 + 152);
          uint64_t v13 = *(void *)(v0 + 128);
          sub_100032B98(0, v11, 0);
          uint64_t v14 = v7 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80));
          uint64_t v15 = *(void *)(v13 + 72);
          do
          {
            uint64_t v16 = *(void *)(v0 + 184);
            uint64_t v17 = *(void *)(v0 + 136);
            sub_10001DC4C(v14, v17, type metadata accessor for KeyGenerationBeaconInfo);
            sub_10001DC4C(v17, v16, type metadata accessor for BeaconIdentifier);
            sub_100018C68(v17, type metadata accessor for KeyGenerationBeaconInfo);
            if ((swift_isUniquelyReferenced_nonNull_native(_swiftEmptyArrayStorage) & 1) == 0) {
              sub_100032B98(0, _swiftEmptyArrayStorage[2] + 1LL, 1);
            }
            unint64_t v19 = _swiftEmptyArrayStorage[2];
            unint64_t v18 = _swiftEmptyArrayStorage[3];
            if (v19 >= v18 >> 1) {
              sub_100032B98(v18 > 1, v19 + 1, 1);
            }
            uint64_t v20 = *(void *)(v0 + 184);
            _swiftEmptyArrayStorage[2] = v19 + 1;
            sub_10002218C( v20,  (uint64_t)_swiftEmptyArrayStorage + ((*(unsigned __int8 *)(v12 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v12 + 80))
            + *(void *)(v12 + 72) * v19,
              type metadata accessor for BeaconIdentifier);
            v14 += v15;
            --v11;
          }

          while (v11);
          uint64_t v10 = v77;
        }

        uint64_t v21 = sub_1006F1BC0((uint64_t)_swiftEmptyArrayStorage);
        swift_bridgeObjectRelease();
        if (*(void *)(v21 + 16) <= *(void *)(v10 + 16) >> 3)
        {
          sub_1003CC508(v21);
          unint64_t result = swift_bridgeObjectRelease();
          uint64_t v22 = (_BYTE *)v10;
        }

        else
        {
          uint64_t v22 = sub_1003CE8E0(v21, v10);
          unint64_t result = swift_bridgeObjectRelease();
        }

        int64_t v23 = 0LL;
        *(void *)(v0 + 264) = v22;
        char v24 = v22[32];
        *(_BYTE *)(v0 + 336) = v24;
        uint64_t v25 = 1LL << v24;
        if (v25 < 64) {
          uint64_t v26 = ~(-1LL << v25);
        }
        else {
          uint64_t v26 = -1LL;
        }
        unint64_t v27 = v26 & *((void *)v22 + 7);
        while (1)
        {
          if (v27)
          {
            unint64_t v29 = __clz(__rbit64(v27));
            v27 &= v27 - 1;
            unint64_t v30 = v29 | (v23 << 6);
            uint64_t v31 = *(void *)(v0 + 264);
          }

          else
          {
            int64_t v32 = v23 + 1;
            if (__OFADD__(v23, 1LL)) {
              goto LABEL_55;
            }
            int64_t v33 = (unint64_t)((1LL << *(_BYTE *)(v0 + 336)) + 63) >> 6;
            uint64_t v31 = *(void *)(v0 + 264);
            if (v32 >= v33)
            {
LABEL_48:
              (*(void (**)(void, uint64_t, uint64_t, void))(*(void *)(v0 + 152) + 56LL))( *(void *)(v0 + 120),  1LL,  1LL,  *(void *)(v0 + 144));
LABEL_49:
              swift_release();
              swift_bridgeObjectRelease();
              uint64_t v66 = *(void *)(v0 + 256);
              __int128 v79 = *(_OWORD *)(v0 + 224);
              uint64_t v68 = *(void *)(v0 + 208);
              uint64_t v67 = *(void *)(v0 + 216);
              uint64_t v70 = *(void *)(v0 + 32);
              uint64_t v69 = *(void *)(v0 + 40);
              uint64_t v71 = swift_task_alloc(80LL);
              *(void *)(v0 + 312) = v71;
              *(void *)(v71 + swift_weakDestroy(v0 + 16) = v66;
              *(void *)(v71 + 24) = v70;
              *(void *)(v71 + 32) = v68;
              *(void *)(v71 + 40) = v67;
              *(_OWORD *)(v71 + 48) = v79;
              *(void *)(v71 + 64) = v69;
              uint64_t v72 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
              *(void *)(v0 + 320) = v72;
              void *v72 = v0;
              v72[1] = sub_1003B9CE8;
              return withTaskGroup<A, B>(of:returning:isolation:body:)( v72,  (char *)&type metadata for () + 8,  (char *)&type metadata for () + 8,  0LL,  0LL,  &unk_1009AC070,  v71,  (char *)&type metadata for () + 8);
            }

            uint64_t v34 = v31 + 56;
            unint64_t v35 = *(void *)(v31 + 56 + 8 * v32);
            ++v23;
            if (!v35)
            {
              int64_t v23 = v32 + 1;
              if (v32 + 1 >= v33) {
                goto LABEL_48;
              }
              unint64_t v35 = *(void *)(v34 + 8 * v23);
              if (!v35)
              {
                int64_t v23 = v32 + 2;
                if (v32 + 2 >= v33) {
                  goto LABEL_48;
                }
                unint64_t v35 = *(void *)(v34 + 8 * v23);
                if (!v35)
                {
                  int64_t v36 = v32 + 3;
                  if (v36 >= v33) {
                    goto LABEL_48;
                  }
                  unint64_t v35 = *(void *)(v34 + 8 * v36);
                  if (!v35)
                  {
                    while (1)
                    {
                      int64_t v23 = v36 + 1;
                      if (__OFADD__(v36, 1LL)) {
                        goto LABEL_56;
                      }
                      if (v23 >= v33) {
                        goto LABEL_48;
                      }
                      unint64_t v35 = *(void *)(v34 + 8 * v23);
                      ++v36;
                      if (v35) {
                        goto LABEL_41;
                      }
                    }
                  }

                  int64_t v23 = v36;
                }
              }
            }

uint64_t sub_1003B97A8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 296LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 304LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1003B9804, 0LL, 0LL);
}

uint64_t sub_1003B9804()
{
  uint64_t v1 = *(void *)(v0 + 176);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v6 = *(void *)(v0 + 56);
  uint64_t v5 = *(void *)(v0 + 64);
  uint64_t v7 = *(void *)(v0 + 48);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v2, v3);
  uint64_t result = sub_100018C68(v1, type metadata accessor for BeaconIdentifier);
  int64_t v9 = *(void *)(v0 + 272);
  unint64_t v10 = *(void *)(v0 + 280);
  while (1)
  {
    if (v10)
    {
      unint64_t v12 = __clz(__rbit64(v10));
      v10 &= v10 - 1;
      unint64_t v13 = v12 | (v9 << 6);
      uint64_t v14 = *(void *)(v0 + 264);
      goto LABEL_20;
    }

    int64_t v15 = v9 + 1;
    if (__OFADD__(v9, 1LL))
    {
      __break(1u);
      goto LABEL_29;
    }

    int64_t v16 = (unint64_t)((1LL << *(_BYTE *)(v0 + 336)) + 63) >> 6;
    uint64_t v14 = *(void *)(v0 + 264);
    if (v15 >= v16) {
      goto LABEL_26;
    }
    uint64_t v17 = v14 + 56;
    unint64_t v18 = *(void *)(v14 + 56 + 8 * v15);
    ++v9;
    if (!v18)
    {
      int64_t v9 = v15 + 1;
      if (v15 + 1 >= v16) {
        goto LABEL_26;
      }
      unint64_t v18 = *(void *)(v17 + 8 * v9);
      if (!v18)
      {
        int64_t v9 = v15 + 2;
        if (v15 + 2 >= v16) {
          goto LABEL_26;
        }
        unint64_t v18 = *(void *)(v17 + 8 * v9);
        if (!v18) {
          break;
        }
      }
    }

uint64_t sub_1003B9CE8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 312LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 320LL));
  swift_bridgeObjectRelease();
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1003B9D50, 0LL, 0LL);
}

uint64_t sub_1003B9D50()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1009AC07C);
  *(void *)(v0 + 328) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1003B9D98;
  return sub_1003B7D88();
}

uint64_t sub_1003B9D98()
{
  return swift_task_switch(sub_1003B9DEC, 0LL, 0LL);
}

uint64_t sub_1003B9DEC()
{
  uint64_t v2 = *(void *)(v1 + 240);
  uint64_t v3 = mach_continuous_time();
  BOOL v4 = v3 >= v2;
  Swift::UInt64 v5 = v3 - v2;
  if (v4)
  {
    Swift::UInt64 v0 = convertToNanoseconds(_:)(v5);
    if (qword_10099B3C8 == -1) {
      goto LABEL_4;
    }
  }

  else
  {
    __break(1u);
  }

  swift_once(&qword_10099B3C8, sub_1003B7ABC);
LABEL_4:
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_10000A720(v6, (uint64_t)qword_1009ABC80);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.default.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    double v10 = (double)v0 / 1000000.0;
    uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v11 = 134217984;
    *(double *)(v1 + 24) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 24, v1 + 32, v11 + 4, v11 + 12);
    _os_log_impl((void *)&_mh_execute_header, v8, v9, "validateKeys duration: %f ms", v11, 0xCu);
    swift_slowDealloc(v11, -1LL, -1LL);
  }

  uint64_t v13 = *(void *)(v1 + 176);
  uint64_t v12 = *(void *)(v1 + 184);
  uint64_t v14 = *(void *)(v1 + 168);
  uint64_t v15 = *(void *)(v1 + 136);
  uint64_t v17 = *(void *)(v1 + 112);
  uint64_t v16 = *(void *)(v1 + 120);
  uint64_t v18 = *(void *)(v1 + 104);
  uint64_t v19 = *(void *)(v1 + 72);
  uint64_t v21 = *(void *)(v1 + 64);

  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_1003B9FA8()
{
  uint64_t v129 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v126 = *(void *)(v129 - 8);
  uint64_t v1 = __chkstk_darwin(v129);
  uint64_t v132 = (uint64_t)&v125 - ((v2 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v1);
  uint64_t v131 = (uint64_t)&v125 - v3;
  uint64_t v4 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v125 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  os_log_type_t v9 = (char *)&v125 - v8;
  uint64_t v156 = type metadata accessor for UUID(0LL);
  uint64_t v151 = *(void *)(v156 - 8);
  uint64_t v10 = __chkstk_darwin(v156);
  uint64_t v130 = (char *)&v125 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  unsigned int v133 = (char *)&v125 - v12;
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v125 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v15);
  uint64_t v141 = (char *)&v125 - v19;
  uint64_t v20 = __chkstk_darwin(v18);
  uint64_t v127 = (char *)&v125 - v21;
  uint64_t v22 = __chkstk_darwin(v20);
  uint64_t v143 = (char *)&v125 - v23;
  __chkstk_darwin(v22);
  char v25 = (char *)&v125 - v24;
  uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  uint64_t v27 = __chkstk_darwin(v26);
  uint64_t v142 = (char *)&v125 - ((v28 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = __chkstk_darwin(v27);
  uint64_t v128 = (char *)&v125 - v30;
  uint64_t v31 = __chkstk_darwin(v29);
  uint64_t v144 = (char *)&v125 - v32;
  __chkstk_darwin(v31);
  uint64_t v34 = (char *)&v125 - v33;
  uint64_t v136 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v135 = *(void *)(v136 - 8);
  uint64_t v35 = __chkstk_darwin(v136);
  uint64_t v145 = (char *)&v125 - ((v36 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v35);
  uint64_t v38 = (char *)&v125 - v37;
  id v137 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v39 = NSFileManager.flatSequence(at:includingPropertiesForKeys:)( v0 + OBJC_IVAR____TtC12searchpartyd23BeaconKeyServiceBuilder_keyMapDirectory,  0LL);
  uint64_t v150 = v38;
  DirectorySequence.next()(v39);
  uint64_t v155 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48);
  uint64_t v41 = _swiftEmptyDictionarySingleton;
  if (v155(v34, 1LL, v13) == 1) {
    goto LABEL_44;
  }
  unsigned int v153 = *(uint64_t (**)(char *, char *, uint64_t))(v14 + 32);
  *(void *)&__int128 v40 = 136315138LL;
  __int128 v146 = v40;
  uint64_t v140 = (char *)&type metadata for Any + 8;
  uint64_t v147 = v7;
  uint64_t v148 = v9;
  int v152 = v34;
  uint64_t v149 = v17;
  uint64_t v154 = v14;
  while (1)
  {
    uint64_t v134 = (uint64_t)v41;
    while (1)
    {
      uint64_t v44 = v153(v25, v34, v13);
      uint64_t v45 = URL.lastPathComponent.getter(v44);
      UUID.init(uuidString:)(v45, v46);
      swift_bridgeObjectRelease();
      uint64_t v47 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v151 + 48);
      if (v47(v9, 1LL, v156) != 1) {
        break;
      }
      sub_100015794((uint64_t)v9, &qword_10099D8A0);
      if (qword_10099B3C8 != -1) {
        swift_once(&qword_10099B3C8, sub_1003B7ABC);
      }
      uint64_t v48 = type metadata accessor for Logger(0LL);
      sub_10000A720(v48, (uint64_t)qword_1009ABC80);
      uint64_t v49 = v154;
      uint64_t v50 = v149;
      uint64_t v51 = (*(uint64_t (**)(char *, char *, uint64_t))(v154 + 16))(v149, v25, v13);
      uint64_t v52 = (os_log_s *)Logger.logObject.getter(v51);
      os_log_type_t v53 = static os_log_type_t.error.getter(v52);
      if (os_log_type_enabled(v52, v53))
      {
        uint64_t v54 = swift_slowAlloc(12LL, -1LL);
        uint64_t v55 = swift_slowAlloc(32LL, -1LL);
        uint64_t v157 = (void *)v55;
        *(_DWORD *)uint64_t v54 = v146;
        uint64_t v56 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        uint64_t v57 = dispatch thunk of CustomStringConvertible.description.getter(v13, v56);
        *(void *)(v54 + 4) = sub_1003F11D4(v57, v58, (uint64_t *)&v157);
        swift_bridgeObjectRelease();
        uint64_t v42 = *(void (**)(char *, uint64_t))(v49 + 8);
        v42(v50, v13);
        _os_log_impl((void *)&_mh_execute_header, v52, v53, "Skipping unexpected folder: %s", (uint8_t *)v54, 0xCu);
        swift_arrayDestroy(v55, 1LL, v140);
        uint64_t v59 = v55;
        uint64_t v7 = v147;
        swift_slowDealloc(v59, -1LL, -1LL);
        uint64_t v60 = v54;
        os_log_type_t v9 = v148;
        swift_slowDealloc(v60, -1LL, -1LL);
      }

      else
      {

        uint64_t v42 = *(void (**)(char *, uint64_t))(v49 + 8);
        v42(v50, v13);
      }

      uint64_t v43 = ((uint64_t (*)(char *, uint64_t))v42)(v25, v13);
      uint64_t v34 = v152;
      DirectorySequence.next()(v43);
      if (v155(v34, 1LL, v13) == 1)
      {
        uint64_t v41 = (void *)v134;
LABEL_44:
        (*(void (**)(char *, uint64_t))(v135 + 8))(v150, v136);

        return (uint64_t)v41;
      }
    }

    int v125 = *(void (**)(char *, char *, uint64_t))(v151 + 32);
    v125(v133, v9, v156);
    uint64_t v61 = NSFileManager.flatSequence(at:includingPropertiesForKeys:)(v25, 0LL);
    uint64_t v62 = v144;
    DirectorySequence.next()(v61);
    uint64_t v63 = v62;
    unsigned int v64 = v155(v62, 1LL, v13);
    uint64_t v66 = (uint64_t)v142;
    uint64_t v65 = v143;
    if (v64 != 1) {
      break;
    }
LABEL_12:
    (*(void (**)(char *, uint64_t))(v135 + 8))(v145, v136);
    (*(void (**)(char *, uint64_t))(v151 + 8))(v133, v156);
    uint64_t v67 = (*(uint64_t (**)(char *, uint64_t))(v154 + 8))(v25, v13);
    DirectorySequence.next()(v67);
    unsigned int v68 = v155(v34, 1LL, v13);
    uint64_t v41 = (void *)v134;
    if (v68 == 1) {
      goto LABEL_44;
    }
  }

  uint64_t v138 = v25;
  uint64_t v139 = v47;
  while (1)
  {
    while (1)
    {
      uint64_t v69 = v153(v65, v63, v13);
      uint64_t v70 = URL.lastPathComponent.getter(v69);
      UUID.init(uuidString:)(v70, v71);
      swift_bridgeObjectRelease();
      if (v47(v7, 1LL, v156) != 1) {
        break;
      }
      sub_100015794((uint64_t)v7, &qword_10099D8A0);
      if (qword_10099B3C8 != -1) {
        swift_once(&qword_10099B3C8, sub_1003B7ABC);
      }
      uint64_t v72 = type metadata accessor for Logger(0LL);
      sub_10000A720(v72, (uint64_t)qword_1009ABC80);
      uint64_t v73 = v154;
      uint64_t v74 = v141;
      uint64_t v75 = v143;
      uint64_t v76 = (*(uint64_t (**)(char *, char *, uint64_t))(v154 + 16))(v141, v143, v13);
      uint64_t v77 = (os_log_s *)Logger.logObject.getter(v76);
      os_log_type_t v78 = static os_log_type_t.error.getter(v77);
      if (os_log_type_enabled(v77, v78))
      {
        uint64_t v79 = swift_slowAlloc(12LL, -1LL);
        uint64_t v80 = swift_slowAlloc(32LL, -1LL);
        uint64_t v157 = (void *)v80;
        *(_DWORD *)uint64_t v79 = v146;
        uint64_t v81 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
        uint64_t v82 = dispatch thunk of CustomStringConvertible.description.getter(v13, v81);
        *(void *)(v79 + 4) = sub_1003F11D4(v82, v83, (uint64_t *)&v157);
        swift_bridgeObjectRelease();
        unsigned int v84 = *(void (**)(char *, uint64_t))(v73 + 8);
        v84(v74, v13);
        _os_log_impl((void *)&_mh_execute_header, v77, v78, "Skipping unexpected folder: %s", (uint8_t *)v79, 0xCu);
        swift_arrayDestroy(v80, 1LL, (char *)&type metadata for Any + 8);
        uint64_t v85 = v80;
        uint64_t v7 = v147;
        swift_slowDealloc(v85, -1LL, -1LL);
        uint64_t v86 = v79;
        os_log_type_t v9 = v148;
        swift_slowDealloc(v86, -1LL, -1LL);
      }

      else
      {

        unsigned int v84 = *(void (**)(char *, uint64_t))(v73 + 8);
        v84(v74, v13);
      }

      uint64_t v87 = ((uint64_t (*)(char *, uint64_t))v84)(v75, v13);
      uint64_t v65 = v75;
      uint64_t v88 = v144;
      DirectorySequence.next()(v87);
      uint64_t v63 = v88;
      unsigned int v89 = v155(v88, 1LL, v13);
      char v25 = v138;
      uint64_t v66 = (uint64_t)v142;
      uint64_t v34 = v152;
      uint64_t v47 = v139;
      if (v89 == 1) {
        goto LABEL_12;
      }
    }

    uint64_t v90 = v130;
    uint64_t v91 = v156;
    v125(v130, v7, v156);
    uint64_t v92 = *(void (**)(uint64_t, char *, uint64_t))(v151 + 16);
    uint64_t v93 = v131;
    v92(v131, v133, v91);
    v92(v93 + *(int *)(v129 + 20), v90, v91);
    uint64_t v94 = v132;
    sub_10001DC4C(v93, v132, type metadata accessor for BeaconIdentifier);
    uint64_t v95 = v154;
    uint64_t v96 = (uint64_t)v128;
    (*(void (**)(char *, char *, uint64_t))(v154 + 16))(v128, v65, v13);
    int v97 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v95 + 56);
    v97(v96, 0LL, 1LL, v13);
    if (v155((char *)v96, 1LL, v13) == 1)
    {
      sub_100015794(v96, (uint64_t *)&unk_1009A34D0);
      uint64_t v98 = v134;
      swift_bridgeObjectRetain(v134);
      unint64_t v99 = sub_10030D1C4(v94);
      char v101 = v100;
      swift_bridgeObjectRelease();
      if ((v101 & 1) != 0)
      {
        int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v98);
        uint64_t v157 = (void *)v98;
        uint64_t v103 = v98;
        if (!isUniquelyReferenced_nonNull_native)
        {
          sub_100065CF0();
          uint64_t v103 = (uint64_t)v157;
        }

        sub_100018C68( *(void *)(v103 + 48) + *(void *)(v126 + 72) * v99,  type metadata accessor for BeaconIdentifier);
        v153((char *)v66, (char *)(*(void *)(v103 + 56) + *(void *)(v154 + 72) * v99), v13);
        uint64_t v134 = v103;
        sub_10005A2F4(v99, v103);
        swift_bridgeObjectRelease();
        uint64_t v104 = 0LL;
        uint64_t v105 = v132;
      }

      else
      {
        uint64_t v104 = 1LL;
        uint64_t v105 = v132;
      }

      v97(v66, v104, 1LL, v13);
      sub_100018C68(v105, type metadata accessor for BeaconIdentifier);
      sub_100015794(v66, (uint64_t *)&unk_1009A34D0);
      os_log_type_t v9 = v148;
      uint64_t v34 = v152;
      goto LABEL_41;
    }

    v153(v127, (char *)v96, v13);
    uint64_t v106 = v134;
    uint64_t v107 = swift_isUniquelyReferenced_nonNull_native(v134);
    uint64_t v157 = (void *)v106;
    unint64_t v108 = sub_10030D1C4(v94);
    uint64_t v110 = v106;
    unint64_t v111 = v108;
    uint64_t v112 = *(void *)(v110 + 16);
    BOOL v113 = (v109 & 1) == 0;
    uint64_t v114 = v112 + v113;
    if (__OFADD__(v112, v113)) {
      break;
    }
    char v115 = v109;
    if (*(void *)(v110 + 24) >= v114)
    {
      if ((v107 & 1) == 0) {
        sub_100065CF0();
      }
    }

    else
    {
      sub_100051CE4(v114, v107);
      unint64_t v116 = sub_10030D1C4(v132);
      if ((v115 & 1) != (v117 & 1)) {
        goto LABEL_47;
      }
      unint64_t v111 = v116;
    }

    uint64_t v118 = v157;
    if ((v115 & 1) != 0)
    {
      (*(void (**)(unint64_t, char *, uint64_t))(v154 + 40))( v157[7] + *(void *)(v154 + 72) * v111,  v127,  v13);
    }

    else
    {
      v157[(v111 >> 6) + 8] |= 1LL << v111;
      sub_10001DC4C(v132, v118[6] + *(void *)(v126 + 72) * v111, type metadata accessor for BeaconIdentifier);
      v153((char *)(v118[7] + *(void *)(v154 + 72) * v111), v127, v13);
      uint64_t v119 = v118[2];
      BOOL v120 = __OFADD__(v119, 1LL);
      uint64_t v121 = v119 + 1;
      if (v120) {
        goto LABEL_46;
      }
      v118[2] = v121;
    }

    os_log_type_t v9 = v148;
    uint64_t v34 = v152;
    uint64_t v134 = (uint64_t)v157;
    swift_bridgeObjectRelease();
    sub_100018C68(v132, type metadata accessor for BeaconIdentifier);
LABEL_41:
    sub_100018C68(v131, type metadata accessor for BeaconIdentifier);
    (*(void (**)(char *, uint64_t))(v151 + 8))(v130, v156);
    uint64_t v122 = (*(uint64_t (**)(char *, uint64_t))(v154 + 8))(v65, v13);
    DirectorySequence.next()(v122);
    uint64_t v63 = v144;
    unsigned int v123 = v155(v144, 1LL, v13);
    uint64_t v47 = v139;
    if (v123 == 1) {
      goto LABEL_12;
    }
  }

  __break(1u);
LABEL_46:
  __break(1u);
LABEL_47:
  uint64_t result = KEY_TYPE_OF_DICTIONARY_VIOLATES_HASHABLE_REQUIREMENTS(_:)(v129);
  __break(1u);
  return result;
}

uint64_t sub_1003BAD0C(uint64_t a1, uint64_t a2)
{
  v2[8] = a1;
  void v2[9] = a2;
  uint64_t v3 = type metadata accessor for URL(0LL);
  v2[10] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[11] = v4;
  v2[12] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for BeaconIdentifier(0LL);
  v2[13] = v5;
  unint64_t v6 = (*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[14] = swift_task_alloc(v6);
  v2[15] = swift_task_alloc(v6);
  return swift_task_switch(sub_1003BADA0, 0LL, 0LL);
}

uint64_t sub_1003BADA0()
{
  id v1 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL.path.getter(v1);
  NSString v2 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v3 = [v1 fileExistsAtPath:v2];

  if (v3)
  {
    if (qword_10099B3C8 != -1) {
      swift_once(&qword_10099B3C8, sub_1003B7ABC);
    }
    uint64_t v5 = *(void *)(v0 + 112);
    uint64_t v4 = *(void *)(v0 + 120);
    uint64_t v7 = *(void *)(v0 + 88);
    uint64_t v6 = *(void *)(v0 + 96);
    uint64_t v9 = *(void *)(v0 + 72);
    uint64_t v8 = *(void *)(v0 + 80);
    uint64_t v10 = *(void *)(v0 + 64);
    uint64_t v11 = type metadata accessor for Logger(0LL);
    sub_10000A720(v11, (uint64_t)qword_1009ABC80);
    sub_10001DC4C(v9, v4, type metadata accessor for BeaconIdentifier);
    sub_10001DC4C(v9, v5, type metadata accessor for BeaconIdentifier);
    uint64_t v12 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v6, v10, v8);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.default.getter(v13);
    BOOL v15 = os_log_type_enabled(v13, v14);
    uint64_t v17 = *(void *)(v0 + 112);
    uint64_t v16 = *(void *)(v0 + 120);
    if (v15)
    {
      log = v13;
      uint64_t v18 = (uint64_t *)(v0 + 64);
      uint64_t v37 = *(void *)(v0 + 96);
      uint64_t v38 = *(void *)(v0 + 88);
      uint64_t v36 = *(void *)(v0 + 80);
      uint64_t v19 = swift_slowAlloc(52LL, -1LL);
      uint64_t v39 = swift_slowAlloc(96LL, -1LL);
      v41[0] = v39;
      *(_DWORD *)uint64_t v19 = 141559043;
      *(void *)(v0 + 24) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v19 + 4, v19 + 12);
      *(_WORD *)(v19 + 12) = 2081;
      uint64_t v20 = type metadata accessor for UUID(0LL);
      uint64_t v21 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v22 = dispatch thunk of CustomStringConvertible.description.getter(v20, v21);
      *(void *)(v0 + 32) = sub_1003F11D4(v22, v23, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v19 + 14, v19 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v16, type metadata accessor for BeaconIdentifier);
      *(_WORD *)(v19 + 22) = 2160;
      *(void *)(v0 + 40) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v19 + 24, v19 + 32);
      *(_WORD *)(v19 + 32) = 2081;
      uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v20, v21);
      *(void *)(v0 + 48) = sub_1003F11D4(v24, v25, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v19 + 34, v19 + 42);
      swift_bridgeObjectRelease();
      sub_100018C68(v17, type metadata accessor for BeaconIdentifier);
      *(_WORD *)(v19 + 42) = 2080;
      uint64_t v26 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter(v36, v26);
      *(void *)(v0 + 56) = sub_1003F11D4(v27, v28, v41);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v19 + 44, v19 + 52);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v36);
      _os_log_impl( (void *)&_mh_execute_header,  log,  v14,  "Purging KeyMaps for %{private,mask.hash}s/%{private,mask.hash}s: %s",  (uint8_t *)v19,  0x34u);
      swift_arrayDestroy(v39, 3LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v39, -1LL, -1LL);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    else
    {
      uint64_t v30 = *(void *)(v0 + 88);
      uint64_t v29 = *(void *)(v0 + 96);
      uint64_t v31 = *(void *)(v0 + 80);
      sub_100018C68(*(void *)(v0 + 120), type metadata accessor for BeaconIdentifier);
      sub_100018C68(v17, type metadata accessor for BeaconIdentifier);
      (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v29, v31);

      uint64_t v18 = (uint64_t *)(v0 + 64);
    }

    uint64_t v32 = *v18;
    sub_100022898(0LL, (unint64_t *)&qword_1009AC0D0, &OBJC_CLASS___NSFileManager_ptr);
    static NSFileManager.removeDirectory(url:)(v32);
  }

  uint64_t v33 = *(void *)(v0 + 112);
  uint64_t v34 = *(void *)(v0 + 96);
  swift_task_dealloc(*(void *)(v0 + 120));
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003BB340( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[15] = a8;
  v8[16] = v13;
  v8[13] = a6;
  v8[14] = a7;
  v8[11] = a4;
  v8[12] = a5;
  v8[9] = a2;
  v8[10] = a3;
  uint64_t v9 = *(void *)(type metadata accessor for KeyGenerationBeaconInfo(0LL) - 8);
  v8[17] = v9;
  uint64_t v10 = *(void *)(v9 + 64);
  v8[18] = v10;
  v8[19] = swift_task_alloc((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = (*(void *)(*(void *)(sub_100004AEC(&qword_1009A9BF0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[20] = swift_task_alloc(v11);
  v8[21] = swift_task_alloc(v11);
  return swift_task_switch(sub_1003BB3E4, 0LL, 0LL);
}

uint64_t sub_1003BB3E4()
{
  uint64_t v1 = *(void *)(v0 + 80);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 136);
    uint64_t v4 = *(unsigned __int8 *)(v3 + 80);
    uint64_t v5 = v1 + ((v4 + 32) & ~v4);
    uint64_t v40 = (v4 + 40) & ~v4;
    uint64_t v41 = *(void *)(v3 + 72);
    unint64_t v38 = (*(void *)(v0 + 144) + v40 + 7) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v39 = v4 | 7;
    unint64_t v37 = (v38 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v36 = (v37 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v35 = (v36 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    unint64_t v34 = (v35 + 15) & 0xFFFFFFFFFFFFFFF8LL;
    uint64_t v6 = type metadata accessor for TaskPriority(0LL);
    uint64_t v7 = *(void *)(v6 - 8);
    uint64_t v33 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t, __n128))(v7 + 56);
    __n128 v8 = swift_bridgeObjectRetain(v1);
    while (1)
    {
      uint64_t v42 = v2;
      uint64_t v11 = *(void *)(v0 + 160);
      uint64_t v10 = *(void *)(v0 + 168);
      uint64_t v12 = *(void *)(v0 + 152);
      uint64_t v45 = *(void *)(v0 + 120);
      uint64_t v46 = *(void *)(v0 + 128);
      uint64_t v13 = *(void *)(v0 + 96);
      uint64_t v43 = *(void *)(v0 + 104);
      uint64_t v44 = *(void *)(v0 + 112);
      uint64_t v14 = *(void *)(v0 + 88);
      v33(v10, 1LL, 1LL, v6, v8);
      uint64_t v47 = v5;
      sub_10001DC4C(v5, v12, type metadata accessor for KeyGenerationBeaconInfo);
      BOOL v15 = (void *)swift_allocObject(&unk_100956138, v34 + 8, v39);
      v15[2] = 0LL;
      uint64_t v16 = v15 + 2;
      v15[3] = 0LL;
      v15[4] = v14;
      sub_10002218C(v12, (uint64_t)v15 + v40, type metadata accessor for KeyGenerationBeaconInfo);
      *(void *)((char *)v15 + v38) = v13;
      *(void *)((char *)v15 + v37) = v43;
      *(void *)((char *)v15 + v36) = v44;
      *(void *)((char *)v15 + v35) = v45;
      *(void *)((char *)v15 + v34) = v46;
      sub_10001581C(v10, v11, &qword_1009A9BF0);
      LODWORD(v11) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v11, 1LL, v6);
      uint64_t v17 = swift_retain();
      uint64_t v18 = *(void *)(v0 + 160);
      if ((_DWORD)v11 == 1)
      {
        sub_100015794(*(void *)(v0 + 160), &qword_1009A9BF0);
        uint64_t v19 = 0LL;
        uint64_t v20 = *v16;
        if (!*v16) {
          goto LABEL_8;
        }
      }

      else
      {
        unsigned __int8 v26 = TaskPriority.rawValue.getter(v17);
        (*(void (**)(uint64_t, uint64_t))(v7 + 8))(v18, v6);
        uint64_t v19 = v26;
        uint64_t v20 = *v16;
        if (!*v16)
        {
LABEL_8:
          uint64_t v23 = 0LL;
          uint64_t v25 = 0LL;
          goto LABEL_9;
        }
      }

      uint64_t v21 = v15[3];
      uint64_t ObjectType = swift_getObjectType(v20);
      swift_unknownObjectRetain(v20);
      uint64_t v23 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v21);
      uint64_t v25 = v24;
      swift_unknownObjectRelease(v20);
LABEL_9:
      uint64_t v27 = **(void **)(v0 + 72);
      uint64_t v28 = swift_allocObject(&unk_100956160, 32LL, 7LL);
      *(void *)(v28 + swift_weakDestroy(v0 + 16) = &unk_1009AC108;
      *(void *)(v28 + 24) = v15;
      uint64_t v29 = v25 | v23;
      if (v25 | v23)
      {
        uint64_t v29 = v0 + 16;
        *(void *)(v0 + swift_weakDestroy(v0 + 16) = 0LL;
        *(void *)(v0 + 24) = 0LL;
        *(void *)(v0 + 32) = v23;
        *(void *)(v0 + 40) = v25;
      }

      uint64_t v9 = *(void *)(v0 + 168);
      *(void *)(v0 + 48) = 1LL;
      *(void *)(v0 + 56) = v29;
      *(void *)(v0 + 64) = v27;
      swift_task_create(v19 | 0x3100, v0 + 48, (char *)&type metadata for () + 8, &unk_1009AC110, v28);
      swift_release();
      sub_100015794(v9, &qword_1009A9BF0);
      uint64_t v5 = v47 + v41;
      uint64_t v2 = v42 - 1;
      if (v42 == 1)
      {
        swift_bridgeObjectRelease();
        break;
      }
    }
  }

  uint64_t v30 = *(void *)(v0 + 160);
  uint64_t v31 = *(void *)(v0 + 152);
  swift_task_dealloc(*(void *)(v0 + 168));
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003BB738( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[7] = v15;
  v8[8] = v16;
  void v8[5] = a7;
  v8[6] = a8;
  v8[3] = a5;
  v8[4] = a6;
  v8[2] = a4;
  uint64_t v9 = type metadata accessor for UUID(0LL);
  v8[9] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[10] = v10;
  v8[11] = swift_task_alloc((*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = *(void *)(type metadata accessor for KeyGenerationBeaconInfo(0LL) - 8);
  v8[12] = v11;
  uint64_t v12 = *(void *)(v11 + 64);
  v8[13] = v12;
  v8[14] = swift_task_alloc((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for BeaconIdentifier(0LL);
  v8[15] = swift_task_alloc((*(void *)(*(void *)(v13 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003BB7F0, 0LL, 0LL);
}

uint64_t sub_1003BB7F0()
{
  uint64_t v1 = v0[14];
  uint64_t v3 = v0[12];
  uint64_t v2 = v0[13];
  uint64_t v23 = v0[11];
  uint64_t v24 = v0[15];
  uint64_t v21 = v0[7];
  uint64_t v22 = v0[8];
  uint64_t v19 = v0[5];
  uint64_t v20 = v0[6];
  uint64_t v4 = v0[3];
  uint64_t v18 = v0[4];
  uint64_t v5 = v0[2];
  sub_10001DC4C(v4, v24, type metadata accessor for BeaconIdentifier);
  sub_10001DC4C(v4, v1, type metadata accessor for KeyGenerationBeaconInfo);
  uint64_t v6 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v7 = (v6 + 24) & ~v6;
  unint64_t v8 = (v2 + v7 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v9 = (v8 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v10 = (v9 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v11 = (v10 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v13 = swift_allocObject(&unk_100956188, v12 + 8, v6 | 7);
  v0[16] = v13;
  *(void *)(v13 + swift_weakDestroy(v0 + 16) = v5;
  sub_10002218C(v1, v13 + v7, type metadata accessor for KeyGenerationBeaconInfo);
  *(void *)(v13 + v8) = v18;
  *(void *)(v13 + v9) = v19;
  *(void *)(v13 + v10) = v20;
  *(void *)(v13 + v11) = v21;
  *(void *)(v13 + v12) = v22;
  uint64_t v14 = swift_retain();
  UUID.init()(v14);
  uint64_t v15 = (void *)swift_task_alloc(64LL);
  v0[17] = v15;
  v15[2] = v23;
  v15[3] = &unk_1009AC120;
  v15[4] = v13;
  v15[5] = v5;
  v15[6] = v24;
  uint64_t v16 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[18] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_1003BB9B8;
  return withCheckedContinuation<A>(isolation:function:_:)( v16,  0LL,  0LL,  0xD000000000000027LL,  0x80000001008602E0LL,  sub_1003D51D0,  v15,  (char *)&type metadata for () + 8);
}

uint64_t sub_1003BB9B8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 136LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 144LL));
  swift_task_dealloc(v1);
  return swift_task_switch(sub_1003BBA14, 0LL, 0LL);
}

uint64_t sub_1003BBA14()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 72);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_100018C68(v1, type metadata accessor for BeaconIdentifier);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003BBA98(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[10] = a5;
  v6[11] = a6;
  v6[8] = a3;
  v6[9] = a4;
  v6[6] = a1;
  v6[7] = a2;
  uint64_t v8 = *(void *)(type metadata accessor for KeyGenerationBeaconInfo(0LL) - 8);
  v6[12] = v8;
  uint64_t v9 = *(void *)(v8 + 64);
  v6[13] = v9;
  v6[14] = swift_task_alloc((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009A9BF0);
  v6[15] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v11 = (void *)swift_task_alloc(dword_1009AC12C);
  v6[16] = v11;
  *unint64_t v11 = v6;
  v11[1] = sub_1003BBB44;
  return sub_1003BC4A4(a2);
}

uint64_t sub_1003BBB44()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 128LL);
  *(void *)(*(void *)v1 + 136LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1003BC2F0;
  }
  else {
    uint64_t v3 = sub_1003BBBA8;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

void sub_1003BBBA8()
{
  if (v0[9]) {
    BOOL v1 = v0[8] == 0;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = (uint64_t **)swift_task_alloc(dword_1009AC134);
    v0[18] = (uint64_t)v2;
    *uint64_t v2 = v0;
    v2[1] = (uint64_t *)sub_1003BBC10;
    sub_1003D96B8(v0[7], 1LL, v0[8]);
  }

uint64_t sub_1003BBC10(char a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 144);
  *(_BYTE *)(v3 + 25) = a1;
  *(void *)(v3 + 152) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_1003BC13C;
  }
  else {
    uint64_t v5 = sub_1003BBC80;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_1003BBC80()
{
  uint64_t v2 = v0[14];
  uint64_t v1 = v0[15];
  uint64_t v3 = v0[12];
  uint64_t v4 = v0[13];
  uint64_t v5 = v0[10];
  uint64_t v18 = v0[11];
  uint64_t v6 = v0[6];
  uint64_t v7 = v0[7];
  static TaskPriority.background.getter();
  uint64_t v8 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v8 - 8) + 56LL))(v1, 0LL, 1LL, v8);
  sub_10001DC4C(v7, v2, type metadata accessor for KeyGenerationBeaconInfo);
  uint64_t v9 = *(unsigned __int8 *)(v3 + 80);
  uint64_t v10 = (v9 + 40) & ~v9;
  unint64_t v11 = (v4 + v10 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v13 = (void *)swift_allocObject(&unk_1009561B0, v12 + 8, v9 | 7);
  v13[2] = 0LL;
  v13[3] = 0LL;
  v13[4] = v6;
  sub_10002218C(v2, (uint64_t)v13 + v10, type metadata accessor for KeyGenerationBeaconInfo);
  *(void *)((char *)v13 + v11) = v5;
  *(void *)((char *)v13 + v12) = v18;
  swift_retain();
  uint64_t v14 = sub_1003B76F8(v1, (uint64_t)&unk_1009AC140, (uint64_t)v13, (uint64_t)&type metadata for Bool);
  v0[20] = v14;
  uint64_t v15 = (void *)swift_task_alloc(async function pointer to Task.result.getter[1]);
  v0[21] = v15;
  uint64_t v16 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  v0[22] = v16;
  *uint64_t v15 = v0;
  v15[1] = sub_1003BBDFC;
  return Task.result.getter( v0 + 2,  v14,  &type metadata for Bool,  v16,  &protocol self-conformance witness table for Error);
}

uint64_t sub_1003BBDFC()
{
  return swift_task_switch(sub_1003BBE58, 0LL, 0LL);
}

uint64_t sub_1003BBE58()
{
  uint64_t v1 = *(void *)(v0 + 16);
  if (*(_BYTE *)(v0 + 24) != 1)
  {
    if (qword_10099B3C8 != -1) {
      swift_once(&qword_10099B3C8, sub_1003B7ABC);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    uint64_t v12 = sub_10000A720(v11, (uint64_t)qword_1009ABC80);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v13 = static os_log_type_t.default.getter(v5);
    if (os_log_type_enabled(v5, v13))
    {
      int v14 = *(unsigned __int8 *)(v0 + 25);
      uint64_t v15 = swift_slowAlloc(14LL, -1LL);
      *(_DWORD *)uint64_t v15 = 67109376;
      *(_DWORD *)(v0 + 28) = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 28, v0 + 32, v15 + 4, v15 + 8);
      *(_WORD *)(v15 + 8) = 1024;
      *(_DWORD *)(v0 + 184) = v1 & 1;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 184, v0 + 188, v15 + 10, v15 + 14);
      _os_log_impl( (void *)&_mh_execute_header,  v5,  v13,  "lowPriorityModified: %{BOOL}d highPriorityModified: %{BOOL}d",  (uint8_t *)v15,  0xEu);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    goto LABEL_11;
  }

  uint64_t v2 = *(void *)(v0 + 176);
  *(void *)(v0 + 40) = v1;
  swift_willThrowTypedImpl(v0 + 40, v2, &protocol self-conformance witness table for Error);
  if (qword_10099B3C8 != -1) {
    swift_once(&qword_10099B3C8, sub_1003B7ABC);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_10000A720(v3, (uint64_t)qword_1009ABC80);
  uint64_t v4 = swift_errorRetain(v1);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter(v5);
  if (!os_log_type_enabled(v5, v6))
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
LABEL_11:

    goto LABEL_12;
  }

  uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
  uint64_t v8 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
  *(_DWORD *)uint64_t v7 = 138412290;
  uint64_t v9 = _convertErrorToNSError(_:)(v1);
  *(void *)(v0 + 32) = v9;
  UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v7 + 4, v7 + 12);
  *uint64_t v8 = v9;
  swift_errorRelease(v1);
  _os_log_impl((void *)&_mh_execute_header, v5, v6, "Error during perform: %@", v7, 0xCu);
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099FB20);
  swift_arrayDestroy(v8, 1LL, v10);
  swift_slowDealloc(v8, -1LL, -1LL);
  swift_slowDealloc(v7, -1LL, -1LL);

  swift_errorRelease(v1);
LABEL_12:
  uint64_t v16 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 120));
  swift_task_dealloc(v16);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003BC13C()
{
  uint64_t v1 = *(void *)(v0 + 152);
  if (qword_10099B3C8 != -1) {
    swift_once(&qword_10099B3C8, sub_1003B7ABC);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_1009ABC80);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)os_log_type_t v6 = 138412290;
    uint64_t v8 = _convertErrorToNSError(_:)(v1);
    *(void *)(v0 + 32) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 4, v6 + 12);
    *uint64_t v7 = v8;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error during perform: %@", v6, 0xCu);
    uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v10 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 120));
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003BC2F0()
{
  uint64_t v1 = *(void *)(v0 + 136);
  if (qword_10099B3C8 != -1) {
    swift_once(&qword_10099B3C8, sub_1003B7ABC);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_1009ABC80);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    os_log_type_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)os_log_type_t v6 = 138412290;
    uint64_t v8 = _convertErrorToNSError(_:)(v1);
    *(void *)(v0 + 32) = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v6 + 4, v6 + 12);
    *uint64_t v7 = v8;
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Error during perform: %@", v6, 0xCu);
    uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v10 = *(void *)(v0 + 112);
  swift_task_dealloc(*(void *)(v0 + 120));
  swift_task_dealloc(v10);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003BC4A4(uint64_t a1)
{
  v2[6] = a1;
  v2[7] = v1;
  uint64_t v3 = type metadata accessor for KeyGenerationBeaconInfo(0LL);
  v2[8] = v3;
  unint64_t v4 = (*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  void v2[9] = swift_task_alloc(v4);
  v2[10] = swift_task_alloc(v4);
  unint64_t v5 = (*(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[11] = swift_task_alloc(v5);
  v2[12] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for URL(0LL);
  v2[13] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[14] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[15] = swift_task_alloc(v8);
  v2[16] = swift_task_alloc(v8);
  v2[17] = swift_task_alloc(v8);
  v2[18] = swift_task_alloc(v8);
  return swift_task_switch(sub_1003BC594, 0LL, 0LL);
}

uint64_t sub_1003BC594(uint64_t a1)
{
  uint64_t v2 = v1[17];
  uint64_t v4 = v1[13];
  uint64_t v3 = v1[14];
  uint64_t v5 = UUID.uuidString.getter(a1);
  URL.appendingPathComponent(_:)(v5, v6);
  swift_bridgeObjectRelease();
  uint64_t v7 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v8 = UUID.uuidString.getter(v7);
  URL.appendingPathComponent(_:)(v8, v9);
  swift_bridgeObjectRelease();
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(v3 + 8);
  v1[19] = v10;
  v10(v2, v4);
  URL.appendingPathComponent(_:)(0x7972616D697250LL, 0xE700000000000000LL);
  if (qword_10099B3C8 != -1) {
    swift_once(&qword_10099B3C8, sub_1003B7ABC);
  }
  uint64_t v12 = v1[9];
  uint64_t v11 = v1[10];
  uint64_t v13 = v1[6];
  uint64_t v14 = type metadata accessor for Logger(0LL);
  sub_10000A720(v14, (uint64_t)qword_1009ABC80);
  sub_10001DC4C(v13, v11, type metadata accessor for KeyGenerationBeaconInfo);
  uint64_t v15 = sub_10001DC4C(v13, v12, type metadata accessor for KeyGenerationBeaconInfo);
  uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.default.getter(v16);
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v20 = v1[9];
  uint64_t v19 = v1[10];
  if (v18)
  {
    uint64_t v21 = swift_slowAlloc(42LL, -1LL);
    uint64_t v31 = swift_slowAlloc(64LL, -1LL);
    uint64_t v32 = v31;
    *(_DWORD *)uint64_t v21 = 141558787;
    v1[2] = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 2, v1 + 3, v21 + 4, v21 + 12);
    *(_WORD *)(v21 + 12) = 2081;
    uint64_t v22 = type metadata accessor for UUID(0LL);
    uint64_t v23 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v24 = dispatch thunk of CustomStringConvertible.description.getter(v22, v23);
    v1[3] = sub_1003F11D4(v24, v25, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 3, v1 + 4, v21 + 14, v21 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68(v19, type metadata accessor for KeyGenerationBeaconInfo);
    *(_WORD *)(v21 + 22) = 2160;
    v1[4] = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 4, v1 + 5, v21 + 24, v21 + 32);
    *(_WORD *)(v21 + 32) = 2081;
    uint64_t v26 = dispatch thunk of CustomStringConvertible.description.getter(v22, v23);
    v1[5] = sub_1003F11D4(v26, v27, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 5, v1 + 6, v21 + 34, v21 + 42);
    swift_bridgeObjectRelease();
    sub_100018C68(v20, type metadata accessor for KeyGenerationBeaconInfo);
    _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "Verify file integrity for %{private,mask.hash}s/%{private,mask.hash}s",  (uint8_t *)v21,  0x2Au);
    swift_arrayDestroy(v31, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_slowDealloc(v21, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(v1[10], type metadata accessor for KeyGenerationBeaconInfo);
    sub_100018C68(v20, type metadata accessor for KeyGenerationBeaconInfo);
  }

  uint64_t v28 = v1[16];
  v1[20] = sub_100022898(0LL, (unint64_t *)&qword_1009AC0D0, &OBJC_CLASS___NSFileManager_ptr);
  static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v28, 0LL);
  uint64_t v29 = (void *)swift_task_alloc(dword_1009AC1CC);
  v1[21] = v29;
  *uint64_t v29 = v1;
  v29[1] = sub_1003BC98C;
  return sub_1003D66DC(v1[16]);
}

uint64_t sub_1003BC98C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 168LL);
  *(void *)(*(void *)v1 + 176LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1003BCBDC;
  }
  else {
    uint64_t v3 = sub_1003BC9F0;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1003BC9F0()
{
  uint64_t v1 = *(void *)(v0 + 48) + *(int *)(*(void *)(v0 + 64) + 24LL);
  if (*(void *)(v1 + 8) >> 60 == 15LL || *(void *)(v1 + 40) >> 60 == 15LL)
  {
    uint64_t v2 = 1LL;
  }

  else
  {
    URL.appendingPathComponent(_:)(0x7261646E6F636553LL, 0xE900000000000079LL);
    uint64_t v2 = 0LL;
  }

  uint64_t v3 = *(void *)(v0 + 104);
  uint64_t v4 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 88);
  uint64_t v5 = *(void *)(v0 + 96);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(v5, v2, 1LL, v3);
  sub_10001581C(v5, v6, (uint64_t *)&unk_1009A34D0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v6, 1LL, v3) == 1)
  {
    uint64_t v7 = *(void *)(v0 + 144);
    uint64_t v8 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
    uint64_t v9 = *(void *)(v0 + 128);
    uint64_t v10 = *(void *)(v0 + 104);
    uint64_t v11 = *(void *)(v0 + 88);
    sub_100015794(*(void *)(v0 + 96), (uint64_t *)&unk_1009A34D0);
    v8(v9, v10);
    v8(v7, v10);
    sub_100015794(v11, (uint64_t *)&unk_1009A34D0);
    uint64_t v12 = *(void *)(v0 + 136);
    uint64_t v14 = *(void *)(v0 + 120);
    uint64_t v13 = *(void *)(v0 + 128);
    uint64_t v16 = *(void *)(v0 + 88);
    uint64_t v15 = *(void *)(v0 + 96);
    uint64_t v18 = *(void *)(v0 + 72);
    uint64_t v17 = *(void *)(v0 + 80);
    swift_task_dealloc(*(void *)(v0 + 144));
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v20 = *(void *)(v0 + 120);
    (*(void (**)(uint64_t, void, void))(*(void *)(v0 + 112) + 32LL))( v20,  *(void *)(v0 + 88),  *(void *)(v0 + 104));
    static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v20, 0LL);
    uint64_t v21 = (void *)swift_task_alloc(dword_1009AC1CC);
    *(void *)(v0 + 184) = v21;
    *uint64_t v21 = v0;
    v21[1] = sub_1003BCCA0;
    return sub_1003D66DC(*(void *)(v0 + 120));
  }

uint64_t sub_1003BCBDC()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
  uint64_t v4 = *(void *)(v0 + 128);
  uint64_t v3 = *(void *)(v0 + 136);
  uint64_t v5 = *(void *)(v0 + 120);
  uint64_t v7 = *(void *)(v0 + 96);
  uint64_t v6 = *(void *)(v0 + 104);
  uint64_t v9 = *(void *)(v0 + 80);
  uint64_t v8 = *(void *)(v0 + 88);
  uint64_t v11 = *(void *)(v0 + 72);
  v2(v4, v6);
  v2(v1, v6);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003BCCA0()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 184LL);
  *(void *)(*(void *)v1 + 192LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1003BCDD0;
  }
  else {
    uint64_t v3 = sub_1003BCD04;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1003BCD04()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
  uint64_t v3 = *(void *)(v0 + 128);
  uint64_t v5 = *(void *)(v0 + 96);
  uint64_t v4 = *(void *)(v0 + 104);
  v2(*(void *)(v0 + 120), v4);
  sub_100015794(v5, (uint64_t *)&unk_1009A34D0);
  v2(v3, v4);
  v2(v1, v4);
  uint64_t v6 = *(void *)(v0 + 136);
  uint64_t v8 = *(void *)(v0 + 120);
  uint64_t v7 = *(void *)(v0 + 128);
  uint64_t v10 = *(void *)(v0 + 88);
  uint64_t v9 = *(void *)(v0 + 96);
  uint64_t v12 = *(void *)(v0 + 72);
  uint64_t v11 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 144));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003BCDD0()
{
  uint64_t v1 = *(void *)(v0 + 96);
  (*(void (**)(void, void))(v0 + 152))(*(void *)(v0 + 120), *(void *)(v0 + 104));
  sub_100015794(v1, (uint64_t *)&unk_1009A34D0);
  uint64_t v2 = *(void *)(v0 + 144);
  uint64_t v3 = *(void (**)(uint64_t, uint64_t))(v0 + 152);
  uint64_t v5 = *(void *)(v0 + 128);
  uint64_t v4 = *(void *)(v0 + 136);
  uint64_t v6 = *(void *)(v0 + 120);
  uint64_t v8 = *(void *)(v0 + 96);
  uint64_t v7 = *(void *)(v0 + 104);
  uint64_t v10 = *(void *)(v0 + 80);
  uint64_t v9 = *(void *)(v0 + 88);
  uint64_t v12 = *(void *)(v0 + 72);
  v3(v5, v7);
  v3(v2, v7);
  swift_task_dealloc(v2);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003BCEB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[5] = a6;
  v7[6] = a7;
  v7[3] = a4;
  void v7[4] = a5;
  v7[2] = a1;
  return swift_task_switch(sub_1003BCED4, 0LL, 0LL);
}

void sub_1003BCED4()
{
  if (v0[6]) {
    BOOL v1 = v0[5] == 0;
  }
  else {
    BOOL v1 = 1;
  }
  if (v1)
  {
    __break(1u);
  }

  else
  {
    uint64_t v2 = (uint64_t **)swift_task_alloc(dword_1009AC134);
    v0[7] = (uint64_t)v2;
    *uint64_t v2 = v0;
    v2[1] = (uint64_t *)sub_1003BCF3C;
    sub_1003D96B8(v0[4], 1LL, v0[5]);
  }

uint64_t sub_1003BCF3C(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 56);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1) {
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
  *(_BYTE *)(v4 + 64) = a1 & 1;
  return swift_task_switch(sub_1003BCFBC, 0LL, 0LL);
}

uint64_t sub_1003BCFBC()
{
  **(_BYTE **)(v0 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v0 + 64);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003BCFD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  v5[15] = a4;
  v5[16] = a5;
  v5[13] = a2;
  v5[14] = a3;
  v5[12] = a1;
  unint64_t v7 = (*(void *)(*(void *)(sub_100004AEC(&qword_1009A9BF0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[17] = swift_task_alloc(v7);
  v5[18] = swift_task_alloc(v7);
  uint64_t v8 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  v5[19] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v5[20] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[21] = swift_task_alloc(v10);
  v5[22] = swift_task_alloc(v10);
  uint64_t v11 = sub_100004AEC(&qword_1009AC228);
  v5[23] = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009AC230);
  v5[24] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v5[25] = v13;
  unint64_t v14 = (*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v5[26] = swift_task_alloc(v14);
  v5[27] = swift_task_alloc(v14);
  v5[28] = swift_task_alloc(v14);
  v5[29] = swift_task_alloc(v14);
  uint64_t v15 = sub_100004AEC(&qword_1009AC238);
  v5[30] = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  v5[31] = v16;
  v5[32] = swift_task_alloc((*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003BD128, a3, 0LL);
}

void sub_1003BD128()
{
  uint64_t v1 = *(void *)(v0 + 112);
  swift_beginAccess(v1 + 160, v0 + 48, 0LL, 0LL);
  uint64_t v2 = *(void *)(v1 + 160);
  uint64_t v39 = v2 + 64;
  int64_t v38 = *(void *)(v2 + 16);
  uint64_t v3 = -1LL;
  uint64_t v4 = -1LL << *(_BYTE *)(v2 + 32);
  if (-v4 < 64) {
    uint64_t v3 = ~(-1LL << -(char)v4);
  }
  unint64_t v5 = v3 & *(void *)(v2 + 64);
  int64_t v40 = (unint64_t)(63 - v4) >> 6;
  uint64_t v41 = v2;
  swift_bridgeObjectRetain(v2);
  int64_t v6 = 0LL;
  while (1)
  {
    if (v5)
    {
      uint64_t v44 = (v5 - 1) & v5;
      int64_t v43 = v6;
      unint64_t v9 = __clz(__rbit64(v5)) | (v6 << 6);
      goto LABEL_23;
    }

    int64_t v10 = v6 + 1;
    if (__OFADD__(v6, 1LL))
    {
      __break(1u);
      goto LABEL_33;
    }

    if (v10 >= v40) {
      goto LABEL_31;
    }
    unint64_t v11 = *(void *)(v39 + 8 * v10);
    int64_t v12 = v6 + 1;
    if (!v11)
    {
      int64_t v12 = v6 + 2;
      if (v6 + 2 >= v40) {
        goto LABEL_31;
      }
      unint64_t v11 = *(void *)(v39 + 8 * v12);
      if (!v11)
      {
        int64_t v12 = v6 + 3;
        if (v6 + 3 >= v40) {
          goto LABEL_31;
        }
        unint64_t v11 = *(void *)(v39 + 8 * v12);
        if (!v11)
        {
          int64_t v12 = v6 + 4;
          if (v6 + 4 >= v40) {
            goto LABEL_31;
          }
          unint64_t v11 = *(void *)(v39 + 8 * v12);
          if (!v11) {
            break;
          }
        }
      }
    }

uint64_t sub_1003BD52C()
{
  uint64_t v1 = sub_1000372EC( (unint64_t *)&unk_1009AC260,  &qword_1009AC238,  (uint64_t)&protocol conformance descriptor for TaskGroup<A>.Iterator);
  v0[36] = v1;
  uint64_t v2 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
  v0[37] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1003BD5BC;
  return dispatch thunk of AsyncIteratorProtocol.next()(v0[23], v0[30], v1);
}

uint64_t sub_1003BD5BC()
{
  uint64_t v2 = *(void **)v1;
  swift_task_dealloc(*(void *)(*(void *)v1 + 296LL));
  if (v0)
  {
    uint64_t v4 = v2[31];
    uint64_t v3 = v2[32];
    uint64_t v5 = v2[30];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    int64_t v6 = DeviceInformationProviderFactory.init();
  }

  else
  {
    v2[38] = v2[35];
    int64_t v6 = sub_1003BD648;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1003BD648()
{
  uint64_t v1 = v0[23];
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0[25] + 48LL))(v1, 1LL, v0[24]) == 1)
  {
    uint64_t v2 = v0[14];
    (*(void (**)(void, void))(v0[31] + 8LL))(v0[32], v0[30]);
    sub_100015794(v1, &qword_1009AC228);
    return swift_task_switch(sub_1003BD878, v2, 0LL);
  }

  else
  {
    uint64_t v4 = v0[38];
    uint64_t v6 = v0[28];
    uint64_t v5 = v0[29];
    sub_100015750(v1, v5, &qword_1009AC230);
    sub_10001581C(v5, v6, &qword_1009AC230);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v4);
    unint64_t v8 = v0[38];
    if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
      unint64_t v8 = sub_1004C6614(0, *(void *)(v8 + 16) + 1LL, 1, v8);
    }
    unint64_t v10 = *(void *)(v8 + 16);
    unint64_t v9 = *(void *)(v8 + 24);
    if (v10 >= v9 >> 1) {
      unint64_t v8 = sub_1004C6614(v9 > 1, v10 + 1, 1, v8);
    }
    v0[39] = v8;
    uint64_t v11 = v0[28];
    uint64_t v12 = v0[29];
    uint64_t v13 = v0[25];
    *(void *)(v8 + swift_weakDestroy(v0 + 16) = v10 + 1;
    sub_100015750( v11,  v8 + ((*(unsigned __int8 *)(v13 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v13 + 80))
    + *(void *)(v13 + 72) * v10,
      &qword_1009AC230);
    sub_100015794(v12, &qword_1009AC230);
    uint64_t v14 = (void *)swift_task_alloc(async function pointer to dispatch thunk of AsyncIteratorProtocol.next()[1]);
    v0[40] = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_1003BD7EC;
    return dispatch thunk of AsyncIteratorProtocol.next()(v0[23], v0[30], v0[36]);
  }

uint64_t sub_1003BD7EC()
{
  uint64_t v2 = *(void **)v1;
  swift_task_dealloc(*(void *)(*(void *)v1 + 320LL));
  if (v0)
  {
    uint64_t v4 = v2[31];
    uint64_t v3 = v2[32];
    uint64_t v5 = v2[30];
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
    uint64_t v6 = DeviceInformationProviderFactory.init();
  }

  else
  {
    v2[38] = v2[39];
    uint64_t v6 = (void (__swiftcall *)())sub_1003BD648;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1003BD878()
{
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 200);
    uint64_t v4 = *(void *)(v0 + 160);
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v6 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain(v1);
    uint64_t v7 = _swiftEmptyArrayStorage;
    do
    {
      uint64_t v9 = *(void *)(v0 + 208);
      uint64_t v8 = *(void *)(v0 + 216);
      uint64_t v10 = *(void *)(v0 + 152);
      sub_10001581C(v5, v8, &qword_1009AC230);
      sub_100015750(v8, v9, &qword_1009AC230);
      int v11 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 48))(v9, 1LL, v10);
      uint64_t v12 = *(void *)(v0 + 208);
      if (v11 == 1)
      {
        sub_100015794(v12, &qword_1009AC230);
      }

      else
      {
        uint64_t v14 = *(void *)(v0 + 168);
        uint64_t v13 = *(void *)(v0 + 176);
        sub_10002218C(v12, v13, type metadata accessor for BeaconKeyManager.IndexInformation);
        sub_10002218C(v13, v14, type metadata accessor for BeaconKeyManager.IndexInformation);
        if ((swift_isUniquelyReferenced_nonNull_native(v7) & 1) == 0) {
          uint64_t v7 = (void *)sub_1004C6600(0, v7[2] + 1LL, 1, (unint64_t)v7);
        }
        unint64_t v16 = v7[2];
        unint64_t v15 = v7[3];
        if (v16 >= v15 >> 1) {
          uint64_t v7 = (void *)sub_1004C6600(v15 > 1, v16 + 1, 1, (unint64_t)v7);
        }
        uint64_t v17 = *(void *)(v0 + 168);
        v7[2] = v16 + 1;
        sub_10002218C( v17,  (uint64_t)v7 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
        + *(void *)(v4 + 72) * v16,
          type metadata accessor for BeaconKeyManager.IndexInformation);
      }

      v5 += v6;
      --v2;
    }

    while (v2);
    swift_bridgeObjectRelease_n(*(void *)(v0 + 304), 2LL);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease();
  uint64_t v18 = *(void *)(v0 + 256);
  uint64_t v20 = *(void *)(v0 + 224);
  uint64_t v19 = *(void *)(v0 + 232);
  uint64_t v22 = *(void *)(v0 + 208);
  uint64_t v21 = *(void *)(v0 + 216);
  uint64_t v24 = *(void *)(v0 + 176);
  uint64_t v23 = *(void *)(v0 + 184);
  uint64_t v25 = *(void *)(v0 + 168);
  uint64_t v26 = *(void *)(v0 + 144);
  uint64_t v28 = *(void *)(v0 + 136);
  **(void **)(v0 + 96) = v7;
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003BDAB0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  v6[24] = a5;
  v6[25] = a6;
  v6[22] = a1;
  v6[23] = a4;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  v6[26] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v6[27] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v6[28] = swift_task_alloc(v9);
  v6[29] = swift_task_alloc(v9);
  return swift_task_switch(sub_1003BDB50, 0LL, 0LL);
}

uint64_t sub_1003BDB50()
{
  unint64_t v1 = *(void *)(v0 + 192);
  if ((v1 & 0x2000000000000000LL) != 0)
  {
    *(_DWORD *)(v0 + 240) = 0;
    __asm { BR              X10 }
  }

  uint64_t v2 = *(void *)(v0 + 184);
  sub_10001736C(v2, *(void *)(v0 + 192));
  uint64_t v3 = sub_10073F13C(v2, v1);
  if ((v3 & 0x100000000LL) != 0)
  {
    uint64_t v12 = *(void *)(v0 + 184);
    uint64_t v13 = *(void *)(v0 + 192);
    uint64_t v14 = *(void *)(v0 + 176);
    uint64_t v15 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 56LL))(v14, 1LL, 1LL, v15);
    sub_1000869A4(v12, v13);
  }

  else
  {
    unsigned int v4 = v3;
    uint64_t v5 = *(void *)(v0 + 232);
    uint64_t v6 = *(void *)(v0 + 208);
    uint64_t v7 = *(void *)(v0 + 216);
    uint64_t v8 = *(void *)(v0 + 200);
    uint64_t v9 = OBJC_IVAR____TtC12searchpartyd17BeaconKeyIndexMap_beaconIdentifier;
    uint64_t v10 = type metadata accessor for BeaconIdentifier(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v8 + *(int *)(v10 + 20) + v9, v6);
    if (*(_BYTE *)(v8 + OBJC_IVAR____TtC12searchpartyd17BeaconKeyIndexMap_sequence))
    {
      if (*(_BYTE *)(v8 + OBJC_IVAR____TtC12searchpartyd17BeaconKeyIndexMap_sequence) == 1)
      {
        *(void *)(v0 + 40) = &type metadata for SecondaryIndex;
        unint64_t v11 = sub_1000868A0();
      }

      else
      {
        *(void *)(v0 + 40) = &type metadata for SecureLocationsIndex;
        unint64_t v11 = sub_10008685C();
      }
    }

    else
    {
      *(void *)(v0 + 40) = &type metadata for PrimaryIndex;
      unint64_t v11 = sub_1000868E4();
    }

    *(void *)(v0 + 48) = v11;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v4;
    uint64_t v16 = *(void *)(v0 + 232);
    uint64_t v17 = *(void *)(v0 + 208);
    uint64_t v18 = *(void *)(v0 + 216);
    uint64_t v20 = *(void *)(v0 + 184);
    uint64_t v19 = *(void *)(v0 + 192);
    uint64_t v21 = *(void *)(v0 + 176);
    sub_100012EC0((__int128 *)(v0 + 16), v0 + 136);
    sub_1000869A4(v20, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v18 + 32))(v21, v16, v17);
    uint64_t v22 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
    sub_100012EC0((__int128 *)(v0 + 136), v21 + *(int *)(v22 + 20));
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v21, 0LL, 1LL, v22);
  }

  uint64_t v23 = *(void *)(v0 + 224);
  swift_task_dealloc(*(void *)(v0 + 232));
  swift_task_dealloc(v23);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003BE07C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t v39 = a6;
  uint64_t v43 = a4;
  uint64_t v44 = a5;
  uint64_t v42 = a3;
  uint64_t v36 = a2;
  uint64_t v37 = a1;
  uint64_t v6 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v7 = *(void *)(*(void *)(v6 - 8) + 64LL);
  uint64_t v40 = *(void *)(v6 - 8);
  uint64_t v41 = v7;
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v33 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v35 = v9;
  uint64_t v10 = sub_100004AEC(&qword_1009B1040);
  uint64_t v11 = *(void *)(v10 - 8);
  uint64_t v33 = v10;
  uint64_t v12 = *(void *)(v11 + 64);
  __chkstk_darwin(v10);
  uint64_t v34 = (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for UUID(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v33 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v17);
  uint64_t v19 = (char *)&v33 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int64_t v38 = v19;
  uint64_t v20 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v19, 1LL, 1LL, v20);
  (*(void (**)(char *, uint64_t, uint64_t))(v14 + 16))(v16, v36, v13);
  (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))( (char *)&v33 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v37,  v10);
  sub_10001DC4C(v39, (uint64_t)v9, type metadata accessor for BeaconIdentifier);
  uint64_t v21 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v22 = (v21 + 32) & ~v21;
  unint64_t v23 = (v15 + v22 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v24 = *(unsigned __int8 *)(v11 + 80);
  uint64_t v25 = (v24 + v23 + 16) & ~v24;
  unint64_t v26 = (v12 + v25 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v27 = *(unsigned __int8 *)(v40 + 80);
  uint64_t v28 = (v27 + v26 + 8) & ~v27;
  uint64_t v29 = swift_allocObject(&unk_1009560C0, v28 + v41, v21 | v27 | v24 | 7);
  *(void *)(v29 + swift_weakDestroy(v0 + 16) = 0LL;
  *(void *)(v29 + 24) = 0LL;
  (*(void (**)(uint64_t, char *, uint64_t))(v14 + 32))(v29 + v22, v16, v13);
  uint64_t v30 = (void *)(v29 + v23);
  uint64_t v31 = v43;
  *uint64_t v30 = v42;
  v30[1] = v31;
  (*(void (**)(uint64_t, char *, uint64_t))(v11 + 32))(v29 + v25, v34, v33);
  *(void *)(v29 + v26) = v44;
  sub_10002218C((uint64_t)v35, v29 + v28, type metadata accessor for BeaconIdentifier);
  swift_retain();
  swift_retain();
  sub_1003EDB00((uint64_t)v38, (uint64_t)&unk_1009AC0A0, v29);
  return swift_release();
}

uint64_t sub_1003BE304( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8)
{
  v8[6] = a8;
  v8[7] = v17;
  v8[4] = a6;
  void v8[5] = a7;
  v8[2] = a4;
  v8[3] = a5;
  uint64_t v9 = sub_100004AEC(&qword_1009B1040);
  v8[8] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v8[9] = v10;
  uint64_t v11 = *(void *)(v10 + 64);
  v8[10] = v11;
  v8[11] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  v8[12] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v8[13] = v13;
  v8[14] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for BeaconKeyServiceBuilder.WorkItem(0LL);
  v8[15] = v14;
  unint64_t v15 = (*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v8[16] = swift_task_alloc(v15);
  v8[17] = swift_task_alloc(v15);
  return swift_task_switch(sub_1003BE3D4, 0LL, 0LL);
}

uint64_t sub_1003BE3D4()
{
  uint64_t v1 = v0[16];
  uint64_t v2 = v0[14];
  uint64_t v21 = v0[15];
  uint64_t v22 = v0[17];
  uint64_t v4 = v0[12];
  uint64_t v3 = v0[13];
  uint64_t v5 = v0[11];
  uint64_t v6 = v0[8];
  uint64_t v7 = v0[9];
  uint64_t v8 = v0[5];
  uint64_t v20 = v0[4];
  uint64_t v18 = v0[10];
  uint64_t v19 = v0[3];
  (*(void (**)(uint64_t, void, uint64_t))(v3 + 16))(v2, v0[2], v4);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v5, v8, v6);
  uint64_t v9 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v10 = (v9 + 16) & ~v9;
  uint64_t v11 = swift_allocObject(&unk_1009560E8, v10 + v18, v9 | 7);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 32))(v11 + v10, v5, v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 32))(v1, v2, v4);
  uint64_t v12 = swift_allocObject(&unk_100956110, 32LL, 7LL);
  *(void *)(v12 + swift_weakDestroy(v0 + 16) = v19;
  *(void *)(v12 + 24) = v20;
  uint64_t v13 = (void *)(v1 + *(int *)(v21 + 20));
  *uint64_t v13 = &unk_1009AC0C0;
  v13[1] = v12;
  uint64_t v14 = (void *)(v1 + *(int *)(v21 + 24));
  *uint64_t v14 = &unk_1009AC0B0;
  v14[1] = v11;
  sub_10002218C(v1, v22, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
  uint64_t v15 = dword_1009AC0CC;
  swift_retain();
  uint64_t v16 = (void *)swift_task_alloc(v15);
  v0[18] = v16;
  *uint64_t v16 = v0;
  v16[1] = sub_1003BE544;
  return sub_1003BE65C(v0[7], v0[17]);
}

uint64_t sub_1003BE544()
{
  return swift_task_switch(sub_1003BE598, 0LL, 0LL);
}

uint64_t sub_1003BE598()
{
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 88);
  sub_100018C68(v2, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003BE604(uint64_t a1)
{
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = a1;
  return swift_task_switch(sub_1003BE61C, 0LL, 0LL);
}

uint64_t sub_1003BE61C()
{
  uint64_t v1 = sub_100004AEC(&qword_1009B1040);
  CheckedContinuation.resume(returning:)(v1, v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003BE65C(uint64_t a1, uint64_t a2)
{
  v3[3] = a2;
  v3[4] = v2;
  v3[2] = a1;
  unint64_t v4 = (*(void *)(*(void *)(type metadata accessor for BeaconIdentifier(0LL) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  void v3[5] = swift_task_alloc(v4);
  v3[6] = swift_task_alloc(v4);
  return swift_task_switch(sub_1003BE6C8, v2, 0LL);
}

uint64_t sub_1003BE6C8()
{
  uint64_t v1 = v0[4];
  sub_10001DC4C(v0[2], v0[6], type metadata accessor for BeaconIdentifier);
  uint64_t v2 = *(void *)(v1 + 152);
  uint64_t v3 = *(void *)(v2 + 16);
  swift_bridgeObjectRetain(v2);
  if (v3 && (unint64_t v4 = sub_10030D1C4(v0[6]), (v5 & 1) != 0))
  {
    uint64_t v6 = *(void *)(*(void *)(v2 + 56) + 8 * v4);
    swift_retain();
  }

  else
  {
    uint64_t v7 = v0[5];
    sub_10001DC4C(v0[2], v7, type metadata accessor for BeaconIdentifier);
    uint64_t v8 = type metadata accessor for BeaconKeyServiceBuilder.QueueWorker(0LL);
    uint64_t v6 = swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
    swift_defaultActor_initialize(v6);
    *(void *)(v6
              + OBJC_IVAR____TtCC12searchpartyd23BeaconKeyServiceBuilderP33_8A37076506AEEBCEAD161117E4752B2811QueueWorker_queue) = _swiftEmptyArrayStorage;
    sub_10002218C( v7,  v6 + OBJC_IVAR____TtCC12searchpartyd23BeaconKeyServiceBuilderP33_8A37076506AEEBCEAD161117E4752B2811QueueWorker_identifier,  type metadata accessor for BeaconIdentifier);
  }

  v0[7] = v6;
  uint64_t v9 = v0[6];
  swift_bridgeObjectRelease();
  sub_100018C68(v9, type metadata accessor for BeaconIdentifier);
  return swift_task_switch(sub_1003BE7D4, v6, 0LL);
}

uint64_t sub_1003BE7D4()
{
  uint64_t v1 = *(void *)(v0 + 32);
  sub_1003BE8F0(*(void *)(v0 + 24));
  return swift_task_switch(sub_1003BE814, v1, 0LL);
}

uint64_t sub_1003BE814()
{
  uint64_t v1 = *(void *)(v0 + 48);
  uint64_t v2 = *(void *)(v0 + 40);
  swift_release(*(void *)(v0 + 56));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003BE858(uint64_t a1)
{
  return sub_1003BE864(a1, qword_1009ABC98);
}

uint64_t sub_1003BE864(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v3, a2);
  uint64_t v4 = sub_10000A720(v3, (uint64_t)a2);
  if (qword_10099B3D8 != -1) {
    swift_once(&qword_10099B3D8, sub_1003C56F4);
  }
  uint64_t v5 = sub_10000A720(v3, (uint64_t)qword_100A2A8C0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v3 - 8) + 16LL))(v4, v5, v3);
}

uint64_t sub_1003BE8F0(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v4);
  uint64_t v6 = &v16[-((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v7 = sub_100004AEC(&qword_1009AF930);
  __chkstk_darwin(v7);
  uint64_t v9 = &v16[-((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL)];
  uint64_t v10 = v2
      + OBJC_IVAR____TtCC12searchpartyd23BeaconKeyServiceBuilderP33_8A37076506AEEBCEAD161117E4752B2811QueueWorker_queue;
  swift_beginAccess( v2 + OBJC_IVAR____TtCC12searchpartyd23BeaconKeyServiceBuilderP33_8A37076506AEEBCEAD161117E4752B2811QueueWorker_queue,  v17,  0LL,  0LL);
  uint64_t v11 = *(void *)(*(void *)v10 + 16LL);
  swift_beginAccess(v10, v16, 33LL, 0LL);
  sub_10001DC4C(a1, (uint64_t)v9, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
  sub_100495EF4(0LL, 0LL, (uint64_t)v9);
  uint64_t result = swift_endAccess(v16);
  if (!v11)
  {
    uint64_t v13 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v6, 1LL, 1LL, v13);
    uint64_t v14 = sub_100007864( &qword_1009AC358,  type metadata accessor for BeaconKeyServiceBuilder.QueueWorker,  (uint64_t)&unk_1007FE9C0);
    uint64_t v15 = (void *)swift_allocObject(&unk_100956250, 40LL, 7LL);
    v15[2] = v2;
    v15[3] = v14;
    v15[4] = v2;
    swift_retain_n(v2, 2LL);
    sub_1003B76F8((uint64_t)v6, (uint64_t)&unk_1009AC360, (uint64_t)v15, (uint64_t)&type metadata for () + 8);
    return swift_release();
  }

  return result;
}

uint64_t sub_1003BEA9C()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1009ABE64);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000159BC;
  return sub_1003BEAE4();
}

uint64_t sub_1003BEAE4()
{
  void v1[9] = v0;
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009AC340);
  v1[10] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for BeaconKeyServiceBuilder.WorkItem(0LL);
  v1[11] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[12] = v4;
  v1[13] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003BEB68, v0, 0LL);
}

uint64_t sub_1003BEB68()
{
  uint64_t v2 = v0 + 9;
  uint64_t v1 = v0[9];
  uint64_t v3 = OBJC_IVAR____TtCC12searchpartyd23BeaconKeyServiceBuilderP33_8A37076506AEEBCEAD161117E4752B2811QueueWorker_queue;
  v0[14] = OBJC_IVAR____TtCC12searchpartyd23BeaconKeyServiceBuilderP33_8A37076506AEEBCEAD161117E4752B2811QueueWorker_queue;
  uint64_t v4 = (uint64_t *)(v1 + v3);
  swift_beginAccess(v1 + v3, v0 + 2, 0LL, 0LL);
  uint64_t v5 = *v4;
  uint64_t v6 = *(void *)(*v4 + 16);
  if (v6)
  {
    uint64_t v7 = v0[13];
    uint64_t v8 = v0[11];
    sub_10001DC4C( v5 + ((*(unsigned __int8 *)(v0[12] + 80LL) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0[12] + 80LL))
    + *(void *)(v0[12] + 72LL) * (v6 - 1),
      v7,
      type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
    uint64_t v9 = (int **)(v7 + *(int *)(v8 + 20));
    uint64_t v10 = *v9;
    v0[15] = v9[1];
    uint64_t v11 = v10[1];
    uint64_t v32 = (uint64_t (*)(void))((char *)v10 + *v10);
    swift_retain();
    uint64_t v12 = (void *)swift_task_alloc(v11);
    v0[16] = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_1003BEE84;
    uint64_t v13 = v32;
  }

  else
  {
    if (qword_10099B3D0 != -1) {
      swift_once(&qword_10099B3D0, sub_1003BE858);
    }
    uint64_t v14 = *v2;
    uint64_t v15 = type metadata accessor for Logger(0LL);
    sub_10000A720(v15, (uint64_t)qword_1009ABC98);
    uint64_t v16 = swift_retain_n(v14, 2LL);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.default.getter(v17);
    BOOL v19 = os_log_type_enabled(v17, v18);
    uint64_t v20 = *v2;
    if (v19)
    {
      uint64_t v21 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v33 = swift_slowAlloc(32LL, -1LL);
      uint64_t v34 = v33;
      *(_DWORD *)uint64_t v21 = 136315138;
      uint64_t v22 = v21 + 12;
      uint64_t v30 = v21 + 4;
      buf = v21;
      uint64_t v23 = type metadata accessor for UUID(0LL);
      uint64_t v24 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v35 = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
      unint64_t v36 = v25;
      v26._countAndFlagsBits = 47LL;
      v26._object = (void *)0xE100000000000000LL;
      String.append(_:)(v26);
      type metadata accessor for BeaconIdentifier(0LL);
      v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      v0[8] = sub_1003F11D4(v35, v36, &v34);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 8, v0 + 9, v30, v22);
      swift_release_n(v20, 2LL);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v17, v18, "process queue for %s -- no more WorkItems", buf, 0xCu);
      swift_arrayDestroy(v33, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v33, -1LL, -1LL);
      swift_slowDealloc(buf, -1LL, -1LL);
    }

    else
    {

      swift_release_n(v20, 2LL);
    }

    uint64_t v28 = v0[10];
    swift_task_dealloc(v0[13]);
    swift_task_dealloc(v28);
    uint64_t v13 = (uint64_t (*)(void))v0[1];
  }

  return v13();
}

uint64_t sub_1003BEE84()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 128);
  *(void *)(*v1 + 136) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 72);
    swift_release();
    uint64_t v5 = sub_1003BF174;
    uint64_t v6 = v4;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 72);
    uint64_t v5 = sub_1003BEEF8;
  }

  return swift_task_switch(v5, v6, 0LL);
}

uint64_t sub_1003BEEF8()
{
  uint64_t v1 = v0[14];
  uint64_t v2 = v0[13];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[9];
  swift_release();
  swift_beginAccess(v5 + v1, v0 + 5, 33LL, 0LL);
  sub_1003BF22C(v3);
  sub_100015794(v3, (uint64_t *)&unk_1009AC340);
  swift_endAccess(v0 + 5);
  uint64_t v6 = (int **)(v2 + *(int *)(v4 + 24));
  uint64_t v7 = *v6;
  v0[18] = v6[1];
  uint64_t v8 = v7[1];
  uint64_t v11 = (uint64_t (*)(void))((char *)v7 + *v7);
  swift_retain();
  uint64_t v9 = (void *)swift_task_alloc(v8);
  v0[19] = v9;
  *uint64_t v9 = v0;
  v9[1] = sub_1003BEFC8;
  return v11();
}

uint64_t sub_1003BEFC8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 72LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 152LL));
  swift_release();
  return swift_task_switch(sub_1003BF028, v1, 0LL);
}

uint64_t sub_1003BF028()
{
  if (*(void *)(*(void *)(*(void *)(v0 + 72) + *(void *)(v0 + 112)) + 16LL))
  {
    uint64_t v1 = (void *)swift_task_alloc(dword_1009ABE64);
    *(void *)(v0 + 160) = v1;
    *uint64_t v1 = v0;
    v1[1] = sub_1003BF0C0;
    return sub_1003BEAE4();
  }

  else
  {
    sub_100018C68(*(void *)(v0 + 104), type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
    uint64_t v3 = *(void *)(v0 + 80);
    swift_task_dealloc(*(void *)(v0 + 104));
    swift_task_dealloc(v3);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1003BF0C0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 160);
  *(void *)(*v1 + 168) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_1003BF1D0;
  }
  else {
    uint64_t v4 = sub_1003BF124;
  }
  return swift_task_switch(v4, *(void *)(v2 + 72), 0LL);
}

uint64_t sub_1003BF124()
{
  uint64_t v1 = *(void *)(v0 + 80);
  swift_task_dealloc(*(void *)(v0 + 104));
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003BF174()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 80);
  sub_100018C68(v1, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003BF1D0()
{
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = *(void *)(v0 + 80);
  sub_100018C68(v1, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003BF22C@<X0>(uint64_t a1@<X8>)
{
  uint64_t v3 = type metadata accessor for BeaconKeyServiceBuilder.WorkItem(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  uint64_t v5 = __chkstk_darwin(v3);
  uint64_t v7 = (char *)&v14 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v14 - v8;
  unint64_t v10 = *v1;
  if (!*(void *)(*v1 + 16)) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56))(a1, 1LL, 1LL, v3);
  }
  uint64_t result = swift_isUniquelyReferenced_nonNull_native(*v1);
  if ((result & 1) != 0)
  {
    uint64_t v12 = *(void *)(v10 + 16);
    if (v12)
    {
LABEL_4:
      uint64_t v13 = v12 - 1;
      sub_10002218C( v10 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80))
      + *(void *)(v4 + 72) * (v12 - 1),
        (uint64_t)v7,
        type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
      *(void *)(v10 + swift_weakDestroy(v0 + 16) = v13;
      *uint64_t v1 = v10;
      sub_10002218C((uint64_t)v7, (uint64_t)v9, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
      sub_10002218C((uint64_t)v9, a1, type metadata accessor for BeaconKeyServiceBuilder.WorkItem);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v4 + 56))(a1, 0LL, 1LL, v3);
    }
  }

  else
  {
    uint64_t result = sub_100599700(v10);
    unint64_t v10 = result;
    uint64_t v12 = *(void *)(result + 16);
    if (v12) {
      goto LABEL_4;
    }
  }

  __break(1u);
  return result;
}

uint64_t sub_1003BF39C()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t sub_1003BF3E0()
{
  return type metadata accessor for BeaconKeyServiceBuilder.QueueWorker(0LL);
}

uint64_t type metadata accessor for BeaconKeyServiceBuilder.QueueWorker(uint64_t a1)
{
  return sub_10008BED8( a1,  (uint64_t *)&unk_1009ABE50,  (uint64_t)&nominal type descriptor for BeaconKeyServiceBuilder.QueueWorker);
}

uint64_t sub_1003BF3FC(uint64_t a1)
{
  uint64_t result = type metadata accessor for BeaconIdentifier(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t result = swift_updateClassMetadata2(a1, 256LL, 3LL, v4, a1 + 80);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_1003BF480(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    uint64_t v4 = (uint64_t *)(v15 + ((v5 + 16LL) & ~(unint64_t)v5));
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(v4, a2, v7);
    uint64_t v8 = *(int *)(a3 + 20);
    uint64_t v9 = *(int *)(a3 + 24);
    unint64_t v10 = (uint64_t *)((char *)v4 + v8);
    uint64_t v11 = (uint64_t *)((char *)a2 + v8);
    uint64_t v12 = v11[1];
    *unint64_t v10 = *v11;
    v10[1] = v12;
    uint64_t v13 = (uint64_t *)((char *)v4 + v9);
    uint64_t v14 = (uint64_t *)((char *)a2 + v9);
    uint64_t v15 = v14[1];
    *uint64_t v13 = *v14;
    v13[1] = v15;
    swift_retain(v12);
  }

  swift_retain(v15);
  return v4;
}

uint64_t sub_1003BF528(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  swift_release(*(void *)(a1 + *(int *)(a2 + 20) + 8));
  return swift_release(*(void *)(a1 + *(int *)(a2 + 24) + 8));
}

uint64_t sub_1003BF580(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(int *)(a3 + 24);
  uint64_t v9 = (void *)(a1 + v7);
  unint64_t v10 = (void *)(a2 + v7);
  uint64_t v11 = v10[1];
  *uint64_t v9 = *v10;
  v9[1] = v11;
  uint64_t v12 = (void *)(a1 + v8);
  uint64_t v13 = (void *)(a2 + v8);
  uint64_t v14 = v13[1];
  *uint64_t v12 = *v13;
  v12[1] = v14;
  swift_retain(v11);
  swift_retain(v14);
  return a1;
}

uint64_t sub_1003BF600(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  uint64_t v10 = v9[1];
  uint64_t v11 = v8[1];
  *uint64_t v8 = *v9;
  v8[1] = v10;
  swift_retain(v10);
  swift_release(v11);
  uint64_t v12 = *(int *)(a3 + 24);
  uint64_t v13 = (void *)(a1 + v12);
  uint64_t v14 = (void *)(a2 + v12);
  uint64_t v15 = v14[1];
  uint64_t v16 = v13[1];
  *uint64_t v13 = *v14;
  v13[1] = v15;
  swift_retain(v15);
  swift_release(v16);
  return a1;
}

uint64_t sub_1003BF698(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 24);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  return a1;
}

uint64_t sub_1003BF6FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = *(void *)(a1 + v7 + 8);
  *(_OWORD *)(a1 + v7) = *(_OWORD *)(a2 + v7);
  swift_release(v8);
  uint64_t v9 = *(int *)(a3 + 24);
  uint64_t v10 = *(void *)(a1 + v9 + 8);
  *(_OWORD *)(a1 + v9) = *(_OWORD *)(a2 + v9);
  swift_release(v10);
  return a1;
}

uint64_t sub_1003BF77C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003BF788);
}

uint64_t sub_1003BF788(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unint64_t v9 = *(void *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 0xFFFFFFFF) {
    LODWORD(v9) = -1;
  }
  return (v9 + 1);
}

uint64_t sub_1003BF804(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003BF810);
}

uint64_t sub_1003BF810(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(void *)(a1 + *(int *)(a4 + 20)) = (a2 - 1);
  return result;
}

uint64_t type metadata accessor for BeaconKeyServiceBuilder.WorkItem(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009ABF78, (uint64_t)&nominal type descriptor for BeaconKeyServiceBuilder.WorkItem);
}

uint64_t sub_1003BF89C(uint64_t a1)
{
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for () + 64;
    void v4[2] = (char *)&value witness table for () + 64;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

void *sub_1003BF914(void *a1, void *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (void *)(v10 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    uint64_t v8 = *(void (**)(void *, void *, uint64_t))(*(void *)(v7 - 8) + 16LL);
    v8(a1, a2, v7);
    uint64_t v9 = type metadata accessor for BeaconIdentifier(0LL);
    v8((void *)((char *)a1 + *(int *)(v9 + 20)), (void *)((char *)a2 + *(int *)(v9 + 20)), v7);
    *((_BYTE *)a1 + *(int *)(a3 + 20)) = *((_BYTE *)a2 + *(int *)(a3 + 20));
  }

  return a1;
}

uint64_t sub_1003BF9C4(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for UUID(0LL);
  int v5 = *(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL);
  v5(a1, v2);
  uint64_t v3 = a1 + *(int *)(type metadata accessor for BeaconIdentifier(0LL) + 20);
  return ((uint64_t (*)(uint64_t, uint64_t))v5)(v3, v2);
}

uint64_t sub_1003BFA28(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL);
  v7(a1, a2, v6);
  uint64_t v8 = type metadata accessor for BeaconIdentifier(0LL);
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1003BFAAC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL);
  v7(a1, a2, v6);
  uint64_t v8 = type metadata accessor for BeaconIdentifier(0LL);
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1003BFB30(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL);
  v7(a1, a2, v6);
  uint64_t v8 = type metadata accessor for BeaconIdentifier(0LL);
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1003BFBB4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL);
  v7(a1, a2, v6);
  uint64_t v8 = type metadata accessor for BeaconIdentifier(0LL);
  v7(a1 + *(int *)(v8 + 20), a2 + *(int *)(v8 + 20), v6);
  *(_BYTE *)(a1 + *(int *)(a3 + 20)) = *(_BYTE *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1003BFC38(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003BFC44);
}

uint64_t sub_1003BFC44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, a2, v6);
  }
  unsigned int v9 = *(unsigned __int8 *)(a1 + *(int *)(a3 + 20));
  if (v9 >= 3) {
    return v9 - 2;
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1003BFCBC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003BFCC8);
}

uint64_t sub_1003BFCC8(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a1, a2, a2, result);
  }
  *(_BYTE *)(a1 + *(int *)(a4 + 20)) = a2 + 2;
  return result;
}

uint64_t type metadata accessor for BeaconKeyServiceBuilder.FileKey(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009AC010, (uint64_t)&nominal type descriptor for BeaconKeyServiceBuilder.FileKey);
}

uint64_t sub_1003BFD54(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003DB6B4(a1, a2, a3, type metadata accessor for BeaconIdentifier, (uint64_t)&unk_1007FE940);
}

uint64_t sub_1003BFD68(int *a1)
{
  uint64_t v4 = (uint64_t (*)(void))((char *)a1 + *a1);
  uint64_t v2 = (void *)swift_task_alloc(a1[1]);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000136E8;
  return v4();
}

uint64_t sub_1003BFDC0(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v6 + swift_weakDestroy(v0 + 16) = a1;
  uint64_t v11 = (void *)swift_task_alloc(dword_1009AC16C);
  *(void *)(v6 + 24) = v11;
  *uint64_t v11 = v6;
  v11[1] = sub_1003BFE48;
  return sub_1003BFEE0(a3, a4, 0, a5, a6, 1LL);
}

uint64_t sub_1003BFE48(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 24);
  uint64_t v6 = *v2;
  swift_task_dealloc(v5);
  if (v1) {
    return (*(uint64_t (**)(void))(v6 + 8))();
  }
  *(_BYTE *)(v4 + 32) = a1 & 1;
  return swift_task_switch(sub_1003BFEC8, 0LL, 0LL);
}

uint64_t sub_1003BFEC8()
{
  **(_BYTE **)(v0 + swift_weakDestroy(v0 + 16) = *(_BYTE *)(v0 + 32);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003BFEE0(uint64_t a1, uint64_t a2, char a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  *(void *)(v7 + 496) = a6;
  *(void *)(v7 + 504) = v6;
  *(void *)(v7 + 480) = a4;
  *(void *)(v7 + 488) = a5;
  *(_BYTE *)(v7 + 980) = a3;
  *(void *)(v7 + 464) = a1;
  *(void *)(v7 + 472) = a2;
  uint64_t v8 = type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo(0LL);
  *(void *)(v7 + 512) = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  *(void *)(v7 + 520) = v9;
  *(void *)(v7 + 528) = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for KeyGenerationBeaconInfo(0LL);
  *(void *)(v7 + 536) = v10;
  *(void *)(v7 + 544) = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_1009AC170);
  *(void *)(v7 + 552) = swift_task_alloc((*(void *)(*(void *)(v11 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for DirectorySequence(0LL);
  *(void *)(v7 + 560) = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  *(void *)(v7 + 568) = v13;
  *(void *)(v7 + 576) = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v14 = (*(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v7 + 584) = swift_task_alloc(v14);
  *(void *)(v7 + 592) = swift_task_alloc(v14);
  *(void *)(v7 + 600) = swift_task_alloc(v14);
  uint64_t v15 = type metadata accessor for UUID(0LL);
  *(void *)(v7 + 608) = v15;
  uint64_t v16 = *(void *)(v15 - 8);
  *(void *)(v7 + 6swift_weakDestroy(v0 + 16) = v16;
  *(void *)(v7 + 624) = swift_task_alloc((*(void *)(v16 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for URL(0LL);
  *(void *)(v7 + 632) = v17;
  uint64_t v18 = *(void *)(v17 - 8);
  *(void *)(v7 + 640) = v18;
  unint64_t v19 = (*(void *)(v18 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v7 + 648) = swift_task_alloc(v19);
  *(void *)(v7 + 656) = swift_task_alloc(v19);
  *(void *)(v7 + 664) = swift_task_alloc(v19);
  return swift_task_switch(sub_1003C0068, 0LL, 0LL);
}

unint64_t sub_1003C0068()
{
  uint64_t v1 = (uint64_t *)(v0[59] + *(int *)(v0[67] + 24LL));
  uint64_t v2 = *v1;
  v0[84] = *v1;
  unint64_t v3 = v1[1];
  v0[85] = v3;
  uint64_t v4 = v1[2];
  v0[86] = v4;
  unint64_t v5 = v1[3];
  v0[87] = v5;
  uint64_t v6 = v1[4];
  v0[88] = v6;
  unint64_t v7 = v1[5];
  v0[89] = v7;
  if (v3 >> 60 == 15)
  {
    unint64_t v8 = sub_1003DA314();
    uint64_t v9 = swift_allocError(&type metadata for BeaconKeyServiceBuilder.Error, v8, 0LL, 0LL);
    *uint64_t v10 = 1;
    swift_willThrow(v9);
LABEL_4:
    uint64_t v33 = v0[82];
    uint64_t v34 = v0[81];
    uint64_t v35 = v0[78];
    uint64_t v36 = v0[75];
    uint64_t v37 = v0[74];
    uint64_t v38 = v0[73];
    uint64_t v39 = v0[72];
    uint64_t v40 = v0[69];
    uint64_t v41 = v0[68];
    uint64_t v155 = v0[66];
    swift_task_dealloc(v0[83]);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v35);
    swift_task_dealloc(v36);
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v155);
    uint64_t v42 = (uint64_t (*)(BOOL))v0[1];
    BOOL v43 = 0LL;
    return v42(v43);
  }

  uint64_t v11 = v0[78];
  unint64_t v12 = v0[77];
  uint64_t v154 = v0;
  uint64_t v140 = v0[76];
  os_log_t log = (os_log_t)v0[75];
  uint64_t v13 = v0[72];
  uint64_t v145 = v0[71];
  uint64_t v151 = v0[70];
  uint64_t v141 = v0[58];
  uint64_t v14 = v2;
  id v15 = objc_allocWithZone(&OBJC_CLASS___NSProcessInfo);
  uint64_t v137 = v14;
  unint64_t v138 = v3;
  sub_10001736C(v14, v3);
  uint64_t v148 = v4;
  sub_10001736C(v4, v5);
  sub_100018BE4(v6, v7);
  id v16 = [v15 init];
  unint64_t v17 = v5;
  unsigned int v18 = [v16 processIdentifier];

  _StringGuts.grow(_:)(22LL);
  uint64_t v19 = swift_bridgeObjectRelease();
  uint64_t v158 = 46LL;
  unint64_t v159 = 0xE100000000000000LL;
  uint64_t v20 = UUID.init()(v19);
  unint64_t v21 = v7;
  uint64_t v139 = v6;
  uint64_t v22 = UUID.uuidString.getter(v20);
  uint64_t v24 = v23;
  uint64_t v0 = v154;
  (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v140);
  v25._countAndFlagsBits = v22;
  v25._object = v24;
  String.append(_:)(v25);
  swift_bridgeObjectRelease();
  v26._object = (void *)0x8000000100860330LL;
  v26._countAndFlagsBits = 0xD000000000000011LL;
  String.append(_:)(v26);
  *((_DWORD *)v154 + 244) = v18;
  v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  String.append(_:)(v27);
  swift_bridgeObjectRelease();
  URL.appendingPathComponent(_:)(v158, v159);
  swift_bridgeObjectRelease();
  id v28 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v29 = NSFileManager.flatSequence(at:includingPropertiesForKeys:)(v141, 0LL);
  DirectorySequence.next()(v29);

  (*(void (**)(uint64_t, uint64_t))(v145 + 8))(v13, v151);
  uint64_t v30 = sub_1003D80E8((uint64_t)log);
  unint64_t v152 = v17;
  unint64_t v146 = v21;
  uint64_t v45 = v154[80];
  uint64_t v46 = v154[79];
  uint64_t v47 = v154[75];
  uint64_t v48 = v154[74];
  if ((v32 & 1) != 0) {
    unint64_t v49 = 0LL;
  }
  else {
    unint64_t v49 = v31;
  }
  if ((v32 & 1) != 0) {
    unint64_t v50 = 0LL;
  }
  else {
    unint64_t v50 = v30;
  }
  *((_OWORD *)v154 + 19) = *((_OWORD *)v154 + 30);
  sub_10001581C(v47, v48, (uint64_t *)&unk_1009A34D0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v45 + 48))(v48, 1LL, v46) == 1)
  {
    sub_100015794(v154[74], (uint64_t *)&unk_1009A34D0);
    uint64_t v51 = 1LL;
  }

  else
  {
    uint64_t v52 = v154[82];
    uint64_t v53 = v154[79];
    uint64_t v54 = v154[69];
    uint64_t v55 = v154[64];
    unint64_t v12 = *(void *)(v154[80] + 32LL);
    ((void (*)(uint64_t, void, uint64_t))v12)(v52, v154[74], v53);
    ((void (*)(uint64_t, uint64_t, uint64_t))v12)(v54, v52, v53);
    uint64_t v51 = 0LL;
    uint64_t v56 = (unint64_t *)(v54 + *(int *)(v55 + 20));
    *uint64_t v56 = v50;
    v56[1] = v49;
  }

  unint64_t v57 = v152;
  unint64_t v59 = v154[60];
  unint64_t v58 = v154[61];
  int v60 = *((unsigned __int8 *)v154 + 980);
  (*(void (**)(void, uint64_t, uint64_t, void))(v154[65] + 56LL))(v154[69], v51, 1LL, v154[64]);
  unint64_t result = sub_1003D8270(v50, v49, v59, v58);
  unint64_t v62 = result;
  unint64_t v63 = v61;
  if (v60)
  {
    if (v60 != 1)
    {
      uint64_t v69 = v154[83];
      uint64_t v70 = v154[80];
      uint64_t v71 = v154[79];
      uint64_t v72 = v154[75];
      uint64_t v73 = v154[69];
      unint64_t v74 = sub_1003DA610();
      uint64_t v75 = swift_allocError(&type metadata for BeaconKeyService.Error, v74, 0LL, 0LL);
      *uint64_t v76 = 0;
      swift_willThrow(v75);
      sub_1003DA5A4(v137, v138, v148, v152, v139, v146);
      sub_100015794(v73, &qword_1009AC170);
      sub_100015794(v72, (uint64_t *)&unk_1009A34D0);
      (*(void (**)(uint64_t, uint64_t))(v70 + 8))(v69, v71);
      goto LABEL_4;
    }

    unint64_t v64 = v146;
    if (v146 >> 60 == 15)
    {
      __break(1u);
      return result;
    }

    unint64_t v66 = v154[60];
    unint64_t v65 = v154[61];
    sub_100018BE4(v139, v146);
    v154[38] = sub_1003D8484(v66, v65, v62, v63);
    v154[39] = v67;
    unint64_t v59 = v139;
    unint64_t v57 = v146;
    goto LABEL_31;
  }

  unint64_t v68 = v61 - result;
  if (v61 < result)
  {
    unint64_t v64 = v146;
    if ((uint64_t)(result - v61) >= 0)
    {
      unint64_t v68 = v61 - result;
      goto LABEL_24;
    }

    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }

  unint64_t v64 = v146;
LABEL_24:
  uint64_t v77 = v68 + 1;
  if (__OFADD__(v68, 1LL))
  {
LABEL_47:
    __break(1u);
    goto LABEL_48;
  }

  unint64_t v12 = v61;
  unint64_t v59 = v148;
  sub_10001736C(v148, v152);
  if (v77 >= 1345)
  {
    if (qword_10099B3C8 == -1)
    {
LABEL_27:
      uint64_t v78 = v154[68];
      uint64_t v79 = v154[59];
      uint64_t v80 = type metadata accessor for Logger(0LL);
      sub_10000A720(v80, (uint64_t)qword_1009ABC80);
      uint64_t v81 = sub_10001DC4C(v79, v78, type metadata accessor for KeyGenerationBeaconInfo);
      uint64_t v82 = (os_log_s *)Logger.logObject.getter(v81);
      os_log_type_t v83 = static os_log_type_t.default.getter(v82);
      if (os_log_type_enabled(v82, v83))
      {
        uint64_t v84 = v154[76];
        uint64_t v134 = v154[68];
        uint64_t v136 = v154[61];
        uint64_t v135 = v154[60];
        uint64_t v85 = swift_slowAlloc(52LL, -1LL);
        uint64_t v142 = swift_slowAlloc(128LL, -1LL);
        uint64_t v157 = v142;
        *(_DWORD *)uint64_t v85 = 136447235;
        v154[48] = v62;
        v154[49] = v12;
        v154[46] = 0LL;
        v154[47] = 0xE000000000000000LL;
        uint64_t v0 = v154;
        _print_unlocked<A, B>(_:_:)( v154 + 48,  v154 + 46,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
        v86._countAndFlagsBits = 3026478LL;
        v86._object = (void *)0xE300000000000000LL;
        String.append(_:)(v86);
        _print_unlocked<A, B>(_:_:)( v154 + 49,  v154 + 46,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
        v154[51] = sub_1003F11D4(v154[46], v154[47], &v157);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v154 + 51, v154 + 52, v85 + 4, v85 + 12);
        swift_bridgeObjectRelease();
        *(_WORD *)(v85 + 12) = 2160;
        v154[52] = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v154 + 52, v154 + 53, v85 + 14, v85 + 22);
        *(_WORD *)(v85 + 22) = 2081;
        uint64_t v87 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v158 = dispatch thunk of CustomStringConvertible.description.getter(v84, v87);
        unint64_t v159 = v88;
        v89._countAndFlagsBits = 47LL;
        v89._object = (void *)0xE100000000000000LL;
        String.append(_:)(v89);
        type metadata accessor for BeaconIdentifier(0LL);
        uint64_t v90 = v87;
        unint64_t v64 = v146;
        v91._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v84, v90);
        String.append(_:)(v91);
        swift_bridgeObjectRelease();
        v154[53] = sub_1003F11D4(v158, v159, &v157);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v154 + 53, v154 + 54, v85 + 24, v85 + 32);
        swift_bridgeObjectRelease();
        sub_100018C68(v134, type metadata accessor for KeyGenerationBeaconInfo);
        *(_WORD *)(v85 + 32) = 2082;
        v154[54] = v135;
        v154[55] = v136;
        v154[40] = 0LL;
        v154[41] = 0xE000000000000000LL;
        _print_unlocked<A, B>(_:_:)( v154 + 54,  v154 + 40,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
        v92._countAndFlagsBits = 3026478LL;
        v92._object = (void *)0xE300000000000000LL;
        String.append(_:)(v92);
        _print_unlocked<A, B>(_:_:)( v154 + 55,  v154 + 40,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
        v154[57] = sub_1003F11D4(v154[40], v154[41], &v157);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v154 + 57, v154 + 58, v85 + 34, v85 + 42);
        swift_bridgeObjectRelease();
        *(_WORD *)(v85 + 42) = 2082;
        v154[56] = sub_1003F11D4(0x7972616D6972702ELL, 0xE800000000000000LL, &v157);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v154 + 56, v154 + 57, v85 + 44, v85 + 52);
        _os_log_impl( (void *)&_mh_execute_header,  v82,  v83,  "Large hole %{public}s would be created for %{private,mask.hash}s: %{public}s - %{public}s",  (uint8_t *)v85,  0x34u);
        swift_arrayDestroy(v142, 4LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v142, -1LL, -1LL);
        swift_slowDealloc(v85, -1LL, -1LL);
      }

      else
      {
        sub_100018C68(v154[68], type metadata accessor for KeyGenerationBeaconInfo);
      }

      unint64_t v49 = 0LL;
      unint64_t v50 = 0LL;
      unint64_t v59 = v148;
      unint64_t v57 = v152;
      goto LABEL_31;
    }

uint64_t sub_1003C1100()
{
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    uint64_t v1 = *(void *)(v0 + 808);
    uint64_t v2 = *(void *)(v0 + 800);
    *(void *)(v0 + 912) = *(void *)(v0 + 792);
    *(_OWORD *)(v0 + 896) = *(_OWORD *)(v0 + 776);
    *(void *)(v0 + 888) = v2;
    *(void *)(v0 + 880) = v1;
    unint64_t v3 = sub_1003C1420;
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 144);
    uint64_t v22 = *(void *)(v0 + 808);
    uint64_t v5 = *(void *)(v0 + 800);
    uint64_t v6 = *(void *)(v0 + 776);
    *(_OWORD *)(v0 + 832) = *(_OWORD *)(v0 + 784);
    *(void *)(v0 + 824) = v6;
    *(void *)(v0 + 8swift_weakDestroy(v0 + 16) = v5;
    uint64_t v7 = *(void *)(v0 + 88);
    unint64_t v8 = *(void *)(v0 + 96);
    uint64_t v9 = *(void *)(v0 + 104);
    unint64_t v10 = *(void *)(v0 + 112);
    uint64_t v11 = *(void *)(v0 + 120);
    unint64_t v12 = *(void *)(v0 + 128);
    *(void *)(v0 + 848) = *(void *)(v0 + 136);
    *(void *)(v0 + 856) = v4;
    unint64_t v13 = *(void *)(v0 + 152);
    *(void *)(v0 + 864) = v13;
    sub_10001736C(v4, v13);
    sub_10001736C(v4, v13);
    sub_100018BE4(v7, v8);
    sub_10001736C(v9, v10);
    sub_10001736C(v11, v12);
    sub_10001736C(v4, v13);
    sub_100018BE4(v7, v8);
    sub_10001736C(v9, v10);
    sub_1004DB8E0(v7, v8, v9, v10, v4, v13, 1, (void *)(v0 + 136), (_OWORD *)(v0 + 216), (uint64_t *)(v0 + 144));
    *(void *)(v0 + 872) = v22;
    if (v22)
    {
      sub_100016F9C(v4, v13);
      sub_100016F9C(v4, v13);
      sub_100016F9C(v9, v10);
      sub_1000182F0(v7, v8);
      sub_1000182F0(v7, v8);
      sub_100016F9C(v9, v10);
      sub_100016F9C(v11, v12);
      uint64_t v14 = sub_100016F9C(v4, v13);
      uint64_t v15 = static os_log_type_t.error.getter(v14);
      if (qword_10099B520 != -1) {
        swift_once(&qword_10099B520, sub_1004DC610);
      }
      uint64_t v16 = qword_100A2AC90;
      uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v18 = swift_allocObject(v17, 72LL, 7LL);
      *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v19 = _convertErrorToNSError(_:)(v22);
      *(void *)(v18 + 56) = sub_100022898(0LL, (unint64_t *)&qword_10099DFA0, &OBJC_CLASS___NSError_ptr);
      *(void *)(v18 + 64) = sub_100044B18();
      *(void *)(v18 + 32) = v19;
      os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Error in TokenAsyncSequence: %@", 31LL, 2LL, v18);
      swift_bridgeObjectRelease();
      swift_errorRelease(v22);
      unint64_t v3 = sub_1003C2DA8;
    }

    else
    {
      __int128 v20 = *(_OWORD *)(v0 + 232);
      *(_OWORD *)(v0 + 920) = *(_OWORD *)(v0 + 216);
      *(_OWORD *)(v0 + 936) = v20;
      *(_OWORD *)(v0 + 952) = *(_OWORD *)(v0 + 248);
      sub_100016F9C(v4, v13);
      sub_100016F9C(v9, v10);
      sub_1000182F0(v7, v8);
      sub_1000182F0(v7, v8);
      sub_100016F9C(v9, v10);
      sub_100016F9C(v11, v12);
      sub_100016F9C(v4, v13);
      unint64_t v3 = sub_1003C1FEC;
    }
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1003C1420()
{
  uint64_t v1 = v0 + 88;
  unint64_t v107 = *(void *)(v0 + 912);
  uint64_t v110 = v0 + 16;
  uint64_t v2 = *(void *)(v0 + 904);
  unint64_t v105 = *(void *)(v0 + 896);
  unint64_t v102 = *(void *)(v0 + 888);
  uint64_t v3 = *(void *)(v0 + 880);
  uint64_t v4 = *(void *)(v0 + 104);
  unint64_t v5 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 120);
  unint64_t v7 = *(void *)(v0 + 128);
  uint64_t v9 = *(void *)(v0 + 144);
  unint64_t v8 = *(void *)(v0 + 152);
  sub_1000182F0(*(void *)(v0 + 88), *(void *)(v0 + 96));
  sub_100016F9C(v4, v5);
  sub_100016F9C(v6, v7);
  sub_100016F9C(v9, v8);
  uint64_t result = sub_1003C6334(32, (void (*)(uint64_t, uint64_t, uint64_t *, void **, char *))sub_1003C7698);
  uint64_t v104 = v2;
  if (v3)
  {
    uint64_t v100 = *(void *)(v0 + 784);
    unint64_t v103 = *(void *)(v0 + 792);
    unint64_t v11 = *(void *)(v0 + 728);
    uint64_t v12 = *(void *)(v0 + 720);
    unint64_t v13 = *(void *)(v0 + 712);
    uint64_t v14 = *(void *)(v0 + 704);
    unint64_t v15 = *(void *)(v0 + 696);
    uint64_t v16 = *(void *)(v0 + 688);
    unint64_t v17 = *(void *)(v0 + 680);
    uint64_t v18 = *(void *)(v0 + 672);
    uint64_t v98 = *(void *)(v0 + 664);
    uint64_t v99 = *(void *)(v0 + 776);
    uint64_t v96 = *(void *)(v0 + 640);
    uint64_t v97 = *(void *)(v0 + 632);
    uint64_t v94 = *(void *)(v0 + 552);
    uint64_t v95 = *(void *)(v0 + 600);
    sub_100164EE8( (void *)v110,  (void (*)(void, void))sub_1000182F0,  (void (*)(uint64_t, uint64_t))sub_100016F9C);
    swift_release();
    sub_1003DA5A4(v18, v17, v16, v15, v14, v13);
    sub_100016F9C(v12, v11);
    sub_100164D3C(v105, v104, v107);
    swift_bridgeObjectRelease();
    sub_100015794(v94, &qword_1009AC170);
    sub_100015794(v95, (uint64_t *)&unk_1009A34D0);
    (*(void (**)(uint64_t, uint64_t))(v96 + 8))(v98, v97);
    sub_100164D3C(v99, v100, v103);
    uint64_t v26 = *(void *)(v0 + 656);
    uint64_t v27 = *(void *)(v0 + 648);
    uint64_t v28 = *(void *)(v0 + 624);
    uint64_t v29 = *(void *)(v0 + 600);
    uint64_t v30 = *(void *)(v0 + 592);
    uint64_t v31 = *(void *)(v0 + 584);
    uint64_t v32 = *(void *)(v0 + 576);
    uint64_t v33 = *(void *)(v0 + 552);
    uint64_t v34 = *(void *)(v0 + 544);
    uint64_t v111 = *(void *)(v0 + 528);
    swift_task_dealloc(*(void *)(v0 + 664));
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    swift_task_dealloc(v34);
    swift_task_dealloc(v111);
    uint64_t v35 = *(uint64_t (**)(BOOL))(v0 + 8);
    BOOL v36 = 0LL;
    return v35(v36);
  }

  uint64_t v19 = *(void *)(v0 + 768);
  uint64_t v20 = *(unsigned int *)(v19 + qword_1009AC768);
  uint64_t v21 = *(unsigned int *)(v19 + qword_1009AC770);
  if (v21 < v20)
  {
    __break(1u);
    goto LABEL_24;
  }

  uint64_t v22 = *(void *)(v0 + 552);
  uint64_t v23 = *(void *)(v0 + 528);
  uint64_t v24 = *(void *)(v0 + 512);
  (*(void (**)(uint64_t, void, void))(v0 + 760))(v23, *(void *)(v0 + 664), *(void *)(v0 + 632));
  Swift::String v25 = (void *)(v23 + *(int *)(v24 + 20));
  *Swift::String v25 = v20;
  v25[1] = v21;
  uint64_t result = sub_1003D8EAC(v22, v23);
  uint64_t v101 = (uint64_t *)v0;
  if (v107 >> 60 == 15)
  {
    uint64_t v37 = (void *)v0;
    sub_100018C68(*(void *)(v0 + 528), type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    sub_100164EE8( (void *)v110,  (void (*)(void, void))sub_1000182F0,  (void (*)(uint64_t, uint64_t))sub_100016F9C);
    goto LABEL_13;
  }

  uint64_t v37 = (void *)v0;
  if (v105 < v102)
  {
LABEL_24:
    __break(1u);
LABEL_25:
    __break(1u);
    return result;
  }

  uint64_t v38 = *(void *)(v0 + 504);
  if (*(void *)(v38 + 168) >= v105 - v102)
  {
    sub_100018C68(*(void *)(v0 + 528), type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
  }

  else
  {
    uint64_t v39 = *(void *)(v0 + 472);
    uint64_t v40 = *(void *)(v38 + 144);
    char v41 = *(_BYTE *)(v0 + 980);
    uint64_t v42 = sub_100004AEC(&qword_10099D340);
    uint64_t inited = swift_initStackObject(v42, v1 + 72);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(inited + 32) = v105;
    *(void *)(inited + 40) = v104;
    *(void *)(inited + 48) = v107;
    sub_10001736C(v104, v107);
    sub_10001736C(v104, v107);
    sub_100475420(v39, v41, inited, v40);
    sub_100018C68(v101[66], type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    sub_100164D3C(v105, v104, v107);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, *(void *)(inited + 16), &type metadata for KeyGenerationHint);
  }

  sub_100164EE8( (void *)v110,  (void (*)(void, void))sub_1000182F0,  (void (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100164D3C(v105, v104, v107);
LABEL_13:
  unint64_t v44 = v37[99];
  uint64_t v45 = v37[98];
  uint64_t v46 = v37[97];
  uint64_t v47 = v37[94];
  uint64_t v48 = v37[93];
  swift_release();
  uint64_t result = sub_100164D3C(v46, v45, v44);
  if (v47 + 1 == v48)
  {
    unint64_t v49 = v37[91];
    uint64_t v50 = v37[90];
    unint64_t v51 = v37[89];
    uint64_t v52 = v37[88];
    unint64_t v53 = v37[87];
    uint64_t v54 = v37[86];
    uint64_t v55 = v37;
    unint64_t v56 = v37[85];
    uint64_t v57 = v55[84];
    sub_100016F9C(v50, v49);
    sub_1003DA5A4(v57, v56, v54, v53, v52, v51);
    swift_bridgeObjectRelease();
    uint64_t v58 = v55[83];
    uint64_t v59 = v55[82];
    uint64_t v60 = v55[81];
    uint64_t v61 = v55[80];
    uint64_t v62 = v55[79];
    uint64_t v63 = v55[78];
    uint64_t v64 = v55[75];
    uint64_t v65 = v55[74];
    uint64_t v106 = v55[73];
    uint64_t v108 = v55[72];
    uint64_t v66 = v55[69];
    uint64_t v112 = v55[68];
    uint64_t v113 = v55[66];
    sub_100015794(v66, &qword_1009AC170);
    sub_100015794(v64, (uint64_t *)&unk_1009A34D0);
    (*(void (**)(uint64_t, uint64_t))(v61 + 8))(v58, v62);
    swift_task_dealloc(v58);
    swift_task_dealloc(v59);
    swift_task_dealloc(v60);
    swift_task_dealloc(v63);
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v106);
    swift_task_dealloc(v108);
    swift_task_dealloc(v66);
    swift_task_dealloc(v112);
    swift_task_dealloc(v113);
    uint64_t v35 = (uint64_t (*)(BOOL))v55[1];
    BOOL v36 = v55[93] != 0LL;
    return v35(v36);
  }

  unint64_t v67 = v37[94] + 1LL;
  v37[94] = v67;
  uint64_t v68 = v37[92];
  if (v67 >= *(void *)(v68 + 16)) {
    goto LABEL_25;
  }
  uint64_t v69 = v37[83];
  uint64_t v70 = (unint64_t *)v37[81];
  uint64_t v71 = v37[79];
  uint64_t v72 = v37[75];
  uint64_t v73 = v37[73];
  uint64_t v74 = v37[62];
  uint64_t v75 = v68 + 16 * v67;
  unint64_t v77 = *(void *)(v75 + 32);
  unint64_t v76 = *(void *)(v75 + 40);
  uint64_t v78 = *(void (**)(unint64_t *, uint64_t, uint64_t))(v37[80] + 16LL);
  v37[95] = v78;
  v78(v70, v69, v71);
  sub_10001581C(v72, v73, (uint64_t *)&unk_1009A34D0);
  v37[96] = sub_1003C3D10( v70,  v77,  v76,  v73,  v74,  &qword_1009AC0E8,  &qword_1009AC0F0,  &qword_1009AC198,  (uint64_t (*)(char *, unint64_t, uint64_t, char *, uint64_t))sub_1003C5774);
  if (v77 < 2)
  {
    unint64_t v82 = 0LL;
    uint64_t v83 = 0LL;
    uint64_t v84 = 0LL;
    unint64_t v85 = 0xF000000000000000LL;
  }

  else
  {
    uint64_t v79 = sub_100479DC4(v101[59], v77, *(void *)(v101[63] + 144));
    unint64_t v82 = v79;
    uint64_t v83 = v80;
    unint64_t v85 = v81;
    if (v81 >> 60 == 15) {
      uint64_t v84 = 0LL;
    }
    else {
      uint64_t v84 = v79;
    }
  }

  v101[100] = v84;
  v101[99] = v85;
  v101[98] = v83;
  v101[97] = v82;
  unint64_t v86 = v101[91];
  uint64_t v87 = v101[90];
  unint64_t v88 = v101[85];
  uint64_t v89 = v101[84];
  sub_10001736C(v89, v88);
  PrivateKey.publicKey.getter(v89, v88);
  uint64_t v114 = v90;
  unint64_t v109 = v91;
  sub_10001736C(v87, v86);
  sub_100164D20(v82, v83, v85);
  sub_10045C258(v89, v88, v114, v109, v87, v86, v82, v83, (uint64_t *)v110, v85, v77);
  v101[101] = 0LL;
  __int128 v92 = *(_OWORD *)(v110 + 48);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)(v110 + 32);
  *(_OWORD *)(v1 + 48) = v92;
  *(void *)(v1 + 64) = *(void *)(v110 + 64);
  __int128 v93 = *(_OWORD *)(v110 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)v110;
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = v93;
  sub_100164D20(v82, v83, v85);
  sub_100164EE8( (void *)v110,  (void (*)(void, void))sub_100018BE4,  (void (*)(uint64_t, uint64_t))sub_10001736C);
  return swift_task_switch(sub_1003C1100, 0LL, 0LL);
}

void sub_1003C1FEC()
{
  if (*(void *)(v0 + 848) <= *(void *)(v0 + 488))
  {
    uint64_t v23 = *(void *)(v0 + 872);
    unint64_t v24 = *(void *)(v0 + 864);
    uint64_t v25 = *(void *)(v0 + 856);
    sub_100164D3C(*(void *)(v0 + 824), *(void *)(v0 + 832), *(void *)(v0 + 840));
    *(_OWORD *)(v0 + 288) = *(_OWORD *)(v0 + 232);
    uint64_t v26 = *(void *)(v0 + 288);
    uint64_t v27 = *(void *)(v0 + 296);
    sub_10001736C(v25, v24);
    sub_100018BF8(v0 + 288);
    uint64_t v28 = sub_1004DFCF0(v26, v27);
    if (v23)
    {
      sub_100164F64(v0 + 288);
      _StringGuts.grow(_:)(35LL);
      *(void *)(v0 + 352) = 0LL;
      *(void *)(v0 + 360) = 0xE000000000000000LL;
      v50._object = (void *)0x8000000100854640LL;
      v50._countAndFlagsBits = 0xD000000000000021LL;
      String.append(_:)(v50);
      *(void *)(v0 + 400) = v23;
      uint64_t v51 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      _print_unlocked<A, B>(_:_:)( v0 + 400,  v0 + 352,  v51,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  *(void *)(v0 + 352),  *(void *)(v0 + 360),  "searchpartyd/KeyRepresentable.swift",  35LL,  2LL,  256LL,  0);
      return;
    }

    uint64_t v48 = v28;
    uint64_t v49 = v29;
    sub_100164F64(v0 + 288);
    sub_1001782E4(v48, v49);
    uint64_t v52 = *(void *)(v0 + 768);
    uint64_t v54 = *(void *)(v0 + 336);
    unint64_t v53 = *(void *)(v0 + 344);
    uint64_t v55 = objc_autoreleasePoolPush();
    sub_1003C5D94(v52, v54, v53);
    *(void *)(v0 + 968) = 0LL;
    uint64_t v139 = *(void *)(v0 + 952);
    unint64_t v142 = *(void *)(v0 + 960);
    unint64_t v63 = *(void *)(v0 + 944);
    uint64_t v64 = *(void *)(v0 + 936);
    unint64_t v65 = *(void *)(v0 + 928);
    uint64_t v66 = *(void *)(v0 + 920);
    unint64_t v67 = *(void *)(v0 + 864);
    uint64_t v68 = *(void *)(v0 + 856);
    objc_autoreleasePoolPop(v55);
    sub_100016F9C(v68, v67);
    sub_1000182F0(v66, v65);
    sub_100016F9C(v64, v63);
    sub_1000182F0(v139, v142);
    sub_100016F9C(v54, v53);
    uint64_t v69 = sub_1003C3978;
    goto LABEL_15;
  }

  uint64_t v137 = (uint64_t *)(v0 + 16);
  unint64_t v141 = *(void *)(v0 + 960);
  uint64_t v133 = *(void *)(v0 + 952);
  uint64_t v128 = *(void *)(v0 + 936);
  unint64_t v130 = *(void *)(v0 + 944);
  unint64_t v126 = *(void *)(v0 + 928);
  uint64_t v1 = *(void *)(v0 + 920);
  unint64_t v2 = *(void *)(v0 + 864);
  uint64_t v3 = *(void *)(v0 + 856);
  uint64_t v5 = *(void *)(v0 + 104);
  unint64_t v4 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 120);
  unint64_t v7 = *(void *)(v0 + 128);
  uint64_t v8 = *(void *)(v0 + 144);
  unint64_t v9 = *(void *)(v0 + 152);
  sub_1000182F0(*(void *)(v0 + 88), *(void *)(v0 + 96));
  sub_100016F9C(v5, v4);
  sub_100016F9C(v6, v7);
  sub_100016F9C(v8, v9);
  sub_100016F9C(v3, v2);
  sub_1000182F0(v1, v126);
  sub_100016F9C(v128, v130);
  sub_1000182F0(v133, v141);
  uint64_t v10 = *(void *)(v0 + 872);
  unint64_t v11 = *(void *)(v0 + 840);
  uint64_t v12 = *(void *)(v0 + 832);
  unint64_t v13 = *(void *)(v0 + 824);
  unint64_t v14 = *(void *)(v0 + 816);
  sub_1003C6334(32, (void (*)(uint64_t, uint64_t, uint64_t *, void **, char *))sub_1003C7698);
  unint64_t v134 = v13;
  if (v10)
  {
    uint64_t v129 = *(void *)(v0 + 784);
    unint64_t v131 = *(void *)(v0 + 792);
    unint64_t v15 = *(void *)(v0 + 728);
    uint64_t v16 = *(void *)(v0 + 720);
    unint64_t v17 = *(void *)(v0 + 712);
    unint64_t v119 = v11;
    uint64_t v120 = v12;
    uint64_t v18 = *(void *)(v0 + 704);
    unint64_t v19 = *(void *)(v0 + 696);
    uint64_t v20 = *(void *)(v0 + 688);
    unint64_t v21 = *(void *)(v0 + 680);
    uint64_t v22 = *(void *)(v0 + 672);
    uint64_t v125 = *(void *)(v0 + 664);
    uint64_t v127 = *(void *)(v0 + 776);
    uint64_t v123 = *(void *)(v0 + 640);
    uint64_t v124 = *(void *)(v0 + 632);
    uint64_t v121 = *(void *)(v0 + 552);
    uint64_t v122 = *(void *)(v0 + 600);
    sub_100164EE8( v137,  (void (*)(void, void))sub_1000182F0,  (void (*)(uint64_t, uint64_t))sub_100016F9C);
    swift_release();
    sub_1003DA5A4(v22, v21, v20, v19, v18, v17);
    sub_100016F9C(v16, v15);
    sub_100164D3C(v134, v120, v119);
    swift_bridgeObjectRelease();
    sub_100015794(v121, &qword_1009AC170);
    sub_100015794(v122, (uint64_t *)&unk_1009A34D0);
    (*(void (**)(uint64_t, uint64_t))(v123 + 8))(v125, v124);
    sub_100164D3C(v127, v129, v131);
    uint64_t v37 = *(void *)(v0 + 656);
    uint64_t v38 = *(void *)(v0 + 648);
    uint64_t v39 = *(void *)(v0 + 624);
    uint64_t v40 = *(void *)(v0 + 600);
    uint64_t v41 = *(void *)(v0 + 592);
    uint64_t v42 = *(void *)(v0 + 584);
    uint64_t v43 = *(void *)(v0 + 576);
    uint64_t v44 = *(void *)(v0 + 552);
    uint64_t v45 = *(void *)(v0 + 544);
    uint64_t v138 = *(void *)(v0 + 528);
    swift_task_dealloc(*(void *)(v0 + 664));
    swift_task_dealloc(v37);
    swift_task_dealloc(v38);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v42);
    swift_task_dealloc(v43);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v138);
    uint64_t v46 = *(void (**)(BOOL))(v0 + 8);
    BOOL v47 = 0LL;
LABEL_8:
    v46(v47);
    return;
  }

  uint64_t v30 = *(void *)(v0 + 768);
  uint64_t v31 = *(unsigned int *)(v30 + qword_1009AC768);
  uint64_t v32 = *(unsigned int *)(v30 + qword_1009AC770);
  if (v32 < v31)
  {
    __break(1u);
    goto LABEL_29;
  }

  uint64_t v33 = *(void *)(v0 + 552);
  uint64_t v34 = *(void *)(v0 + 528);
  uint64_t v35 = *(void *)(v0 + 512);
  (*(void (**)(uint64_t, void, void))(v0 + 760))(v34, *(void *)(v0 + 664), *(void *)(v0 + 632));
  BOOL v36 = (void *)(v34 + *(int *)(v35 + 20));
  *BOOL v36 = v31;
  v36[1] = v32;
  sub_1003D8EAC(v33, v34);
  if (v11 >> 60 == 15)
  {
    sub_100018C68(*(void *)(v0 + 528), type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    sub_100164EE8( v137,  (void (*)(void, void))sub_1000182F0,  (void (*)(uint64_t, uint64_t))sub_100016F9C);
    goto LABEL_18;
  }

  if (v134 < v14)
  {
LABEL_29:
    __break(1u);
    goto LABEL_30;
  }

  uint64_t v56 = *(void *)(v0 + 504);
  if (*(void *)(v56 + 168) >= v134 - v14)
  {
    sub_100018C68(*(void *)(v0 + 528), type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    sub_100164EE8( v137,  (void (*)(void, void))sub_1000182F0,  (void (*)(uint64_t, uint64_t))sub_100016F9C);
    uint64_t v70 = v134;
    uint64_t v71 = v12;
  }

  else
  {
    uint64_t v57 = *(void *)(v0 + 472);
    uint64_t v58 = *(void *)(v56 + 144);
    char v59 = *(_BYTE *)(v0 + 980);
    uint64_t v60 = sub_100004AEC(&qword_10099D340);
    uint64_t v61 = v12;
    uint64_t inited = swift_initStackObject(v60, v0 + 160);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(inited + 32) = v134;
    *(void *)(inited + 40) = v61;
    *(void *)(inited + 48) = v11;
    sub_10001736C(v61, v11);
    sub_10001736C(v61, v11);
    sub_100475420(v57, v59, inited, v58);
    sub_100018C68(*(void *)(v0 + 528), type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    sub_100164D3C(v134, v61, v11);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, *(void *)(inited + 16), &type metadata for KeyGenerationHint);
    sub_100164EE8( v137,  (void (*)(void, void))sub_1000182F0,  (void (*)(uint64_t, uint64_t))sub_100016F9C);
    uint64_t v70 = v134;
    uint64_t v71 = v61;
  }

  sub_100164D3C(v70, v71, v11);
LABEL_18:
  unint64_t v72 = *(void *)(v0 + 792);
  uint64_t v73 = *(void *)(v0 + 784);
  uint64_t v74 = *(void *)(v0 + 776);
  uint64_t v75 = *(void *)(v0 + 752);
  uint64_t v76 = *(void *)(v0 + 744);
  swift_release();
  sub_100164D3C(v74, v73, v72);
  if (v75 + 1 == v76)
  {
    unint64_t v77 = *(void *)(v0 + 712);
    uint64_t v78 = *(void *)(v0 + 704);
    unint64_t v79 = *(void *)(v0 + 696);
    uint64_t v80 = *(void *)(v0 + 688);
    unint64_t v81 = *(void *)(v0 + 680);
    uint64_t v82 = *(void *)(v0 + 672);
    sub_100016F9C(*(void *)(v0 + 720), *(void *)(v0 + 728));
    sub_1003DA5A4(v82, v81, v80, v79, v78, v77);
    swift_bridgeObjectRelease();
    uint64_t v83 = *(void *)(v0 + 664);
    uint64_t v84 = *(void *)(v0 + 656);
    uint64_t v85 = *(void *)(v0 + 648);
    uint64_t v86 = *(void *)(v0 + 640);
    uint64_t v87 = *(void *)(v0 + 632);
    uint64_t v88 = *(void *)(v0 + 624);
    uint64_t v89 = *(void *)(v0 + 600);
    uint64_t v90 = *(void *)(v0 + 592);
    uint64_t v132 = *(void *)(v0 + 584);
    uint64_t v91 = *(void *)(v0 + 552);
    uint64_t v135 = *(void *)(v0 + 576);
    uint64_t v140 = *(void *)(v0 + 544);
    uint64_t v143 = *(void *)(v0 + 528);
    sub_100015794(v91, &qword_1009AC170);
    sub_100015794(v89, (uint64_t *)&unk_1009A34D0);
    (*(void (**)(uint64_t, uint64_t))(v86 + 8))(v83, v87);
    swift_task_dealloc(v83);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    swift_task_dealloc(v88);
    swift_task_dealloc(v89);
    swift_task_dealloc(v90);
    swift_task_dealloc(v132);
    swift_task_dealloc(v135);
    swift_task_dealloc(v91);
    swift_task_dealloc(v140);
    swift_task_dealloc(v143);
    uint64_t v46 = *(void (**)(BOOL))(v0 + 8);
    BOOL v47 = *(void *)(v0 + 744) != 0LL;
    goto LABEL_8;
  }

  unint64_t v92 = *(void *)(v0 + 752) + 1LL;
  *(void *)(v0 + 752) = v92;
  uint64_t v93 = *(void *)(v0 + 736);
  if (v92 < *(void *)(v93 + 16))
  {
    uint64_t v94 = *(void *)(v0 + 664);
    uint64_t v95 = *(unint64_t **)(v0 + 648);
    uint64_t v96 = *(void *)(v0 + 632);
    uint64_t v97 = *(void *)(v0 + 600);
    uint64_t v98 = *(void *)(v0 + 584);
    uint64_t v99 = *(void *)(v0 + 496);
    uint64_t v100 = v93 + 16 * v92;
    unint64_t v102 = *(void *)(v100 + 32);
    unint64_t v101 = *(void *)(v100 + 40);
    unint64_t v103 = *(void (**)(unint64_t *, uint64_t, uint64_t))(*(void *)(v0 + 640) + 16LL);
    *(void *)(v0 + 760) = v103;
    v103(v95, v94, v96);
    sub_10001581C(v97, v98, (uint64_t *)&unk_1009A34D0);
    *(void *)(v0 + 768) = sub_1003C3D10( v95,  v102,  v101,  v98,  v99,  &qword_1009AC0E8,  &qword_1009AC0F0,  &qword_1009AC198,  (uint64_t (*)(char *, unint64_t, uint64_t, char *, uint64_t))sub_1003C5774);
    if (v102 < 2)
    {
      unint64_t v107 = 0LL;
      uint64_t v108 = 0LL;
      uint64_t v109 = 0LL;
      unint64_t v110 = 0xF000000000000000LL;
    }

    else
    {
      uint64_t v104 = sub_100479DC4(*(void *)(v0 + 472), v102, *(void *)(*(void *)(v0 + 504) + 144LL));
      unint64_t v107 = v104;
      uint64_t v108 = v105;
      unint64_t v110 = v106;
      if (v106 >> 60 == 15) {
        uint64_t v109 = 0LL;
      }
      else {
        uint64_t v109 = v104;
      }
    }

    *(void *)(v0 + 800) = v109;
    *(void *)(v0 + 792) = v110;
    *(void *)(v0 + 784) = v108;
    *(void *)(v0 + 776) = v107;
    unint64_t v111 = *(void *)(v0 + 728);
    uint64_t v112 = *(void *)(v0 + 720);
    unint64_t v113 = *(void *)(v0 + 680);
    uint64_t v114 = *(void *)(v0 + 672);
    sub_10001736C(v114, v113);
    PrivateKey.publicKey.getter(v114, v113);
    uint64_t v144 = v115;
    unint64_t v136 = v116;
    sub_10001736C(v112, v111);
    sub_100164D20(v107, v108, v110);
    sub_10045C258(v114, v113, v144, v136, v112, v111, v107, v108, v137, v110, v102);
    *(void *)(v0 + 808) = 0LL;
    __int128 v117 = *(_OWORD *)(v0 + 64);
    *(_OWORD *)(v0 + 120) = *(_OWORD *)(v0 + 48);
    *(_OWORD *)(v0 + 136) = v117;
    *(void *)(v0 + 152) = *(void *)(v0 + 80);
    __int128 v118 = *(_OWORD *)(v0 + 32);
    *(_OWORD *)(v0 + 88) = *(_OWORD *)v137;
    *(_OWORD *)(v0 + 104) = v118;
    sub_100164D20(v107, v108, v110);
    sub_100164EE8( v137,  (void (*)(void, void))sub_100018BE4,  (void (*)(uint64_t, uint64_t))sub_10001736C);
    uint64_t v69 = sub_1003C1100;
LABEL_15:
    swift_task_switch(v69, 0LL, 0LL);
    return;
  }

uint64_t sub_1003C2DA8()
{
  uint64_t v1 = v0 + 88;
  unint64_t v2 = *(void *)(v0 + 840);
  uint64_t v83 = v0 + 16;
  uint64_t v3 = *(void *)(v0 + 832);
  unint64_t v78 = *(void *)(v0 + 824);
  unint64_t v76 = *(void *)(v0 + 816);
  uint64_t v4 = *(void *)(v0 + 104);
  unint64_t v5 = *(void *)(v0 + 112);
  uint64_t v6 = *(void *)(v0 + 120);
  unint64_t v7 = *(void *)(v0 + 128);
  uint64_t v8 = *(void *)(v0 + 144);
  unint64_t v9 = *(void *)(v0 + 152);
  sub_1000182F0(*(void *)(v0 + 88), *(void *)(v0 + 96));
  sub_100016F9C(v4, v5);
  sub_100016F9C(v6, v7);
  sub_100016F9C(v8, v9);
  uint64_t result = sub_1003C6334(32, (void (*)(uint64_t, uint64_t, uint64_t *, void **, char *))sub_1003C7698);
  unint64_t v80 = v2;
  uint64_t v77 = v3;
  uint64_t v11 = *(void *)(v0 + 768);
  uint64_t v12 = *(unsigned int *)(v11 + qword_1009AC768);
  uint64_t v13 = *(unsigned int *)(v11 + qword_1009AC770);
  if (v13 < v12)
  {
    __break(1u);
    goto LABEL_20;
  }

  uint64_t v14 = *(void *)(v0 + 552);
  uint64_t v15 = *(void *)(v0 + 528);
  uint64_t v16 = *(void *)(v0 + 512);
  (*(void (**)(uint64_t, void, void))(v0 + 760))(v15, *(void *)(v0 + 664), *(void *)(v0 + 632));
  unint64_t v17 = (void *)(v15 + *(int *)(v16 + 20));
  *unint64_t v17 = v12;
  v17[1] = v13;
  uint64_t result = sub_1003D8EAC(v14, v15);
  uint64_t v75 = (uint64_t *)v0;
  if (v80 >> 60 == 15)
  {
    uint64_t v18 = (void *)v0;
    sub_100018C68(*(void *)(v0 + 528), type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    sub_100164EE8( (void *)v83,  (void (*)(void, void))sub_1000182F0,  (void (*)(uint64_t, uint64_t))sub_100016F9C);
    goto LABEL_9;
  }

  uint64_t v18 = (void *)v0;
  if (v78 < v76)
  {
LABEL_20:
    __break(1u);
LABEL_21:
    __break(1u);
    return result;
  }

  uint64_t v19 = *(void *)(v0 + 504);
  if (*(void *)(v19 + 168) >= v78 - v76)
  {
    sub_100018C68(*(void *)(v0 + 528), type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
  }

  else
  {
    uint64_t v20 = *(void *)(v0 + 472);
    uint64_t v21 = *(void *)(v19 + 144);
    char v22 = *(_BYTE *)(v0 + 980);
    uint64_t v23 = sub_100004AEC(&qword_10099D340);
    uint64_t inited = swift_initStackObject(v23, v1 + 72);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    *(void *)(inited + 32) = v78;
    *(void *)(inited + 40) = v77;
    *(void *)(inited + 48) = v80;
    sub_10001736C(v77, v80);
    sub_10001736C(v77, v80);
    sub_100475420(v20, v22, inited, v21);
    sub_100018C68(v75[66], type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    sub_100164D3C(v78, v77, v80);
    swift_setDeallocating(inited);
    swift_arrayDestroy(inited + 32, *(void *)(inited + 16), &type metadata for KeyGenerationHint);
  }

  sub_100164EE8( (void *)v83,  (void (*)(void, void))sub_1000182F0,  (void (*)(uint64_t, uint64_t))sub_100016F9C);
  sub_100164D3C(v78, v77, v80);
LABEL_9:
  unint64_t v25 = v18[99];
  uint64_t v26 = v18[98];
  uint64_t v27 = v18[97];
  uint64_t v28 = v18[94];
  uint64_t v29 = v18[93];
  swift_release();
  uint64_t result = sub_100164D3C(v27, v26, v25);
  if (v28 + 1 == v29)
  {
    unint64_t v30 = v18[91];
    uint64_t v31 = v18[90];
    unint64_t v32 = v18[89];
    uint64_t v33 = v18[88];
    unint64_t v34 = v18[87];
    uint64_t v35 = v18[86];
    BOOL v36 = v18;
    unint64_t v37 = v18[85];
    uint64_t v38 = v36[84];
    sub_100016F9C(v31, v30);
    sub_1003DA5A4(v38, v37, v35, v34, v33, v32);
    swift_bridgeObjectRelease();
    uint64_t v39 = v36[83];
    uint64_t v40 = v36[82];
    uint64_t v41 = v36[81];
    uint64_t v42 = v36[80];
    uint64_t v43 = v36[79];
    uint64_t v44 = v36[78];
    uint64_t v45 = v36[75];
    uint64_t v46 = v36[74];
    uint64_t v79 = v36[73];
    uint64_t v81 = v36[72];
    uint64_t v47 = v36[69];
    uint64_t v84 = v36[68];
    uint64_t v85 = v36[66];
    sub_100015794(v47, &qword_1009AC170);
    sub_100015794(v45, (uint64_t *)&unk_1009A34D0);
    (*(void (**)(uint64_t, uint64_t))(v42 + 8))(v39, v43);
    swift_task_dealloc(v39);
    swift_task_dealloc(v40);
    swift_task_dealloc(v41);
    swift_task_dealloc(v44);
    swift_task_dealloc(v45);
    swift_task_dealloc(v46);
    swift_task_dealloc(v79);
    swift_task_dealloc(v81);
    swift_task_dealloc(v47);
    swift_task_dealloc(v84);
    swift_task_dealloc(v85);
    return ((uint64_t (*)(BOOL))v36[1])(v36[93] != 0LL);
  }

  unint64_t v48 = v18[94] + 1LL;
  v18[94] = v48;
  uint64_t v49 = v18[92];
  if (v48 >= *(void *)(v49 + 16)) {
    goto LABEL_21;
  }
  uint64_t v50 = v18[83];
  uint64_t v51 = (unint64_t *)v18[81];
  uint64_t v52 = v18[79];
  uint64_t v53 = v18[75];
  uint64_t v54 = v18[73];
  uint64_t v55 = v18[62];
  uint64_t v56 = v49 + 16 * v48;
  unint64_t v58 = *(void *)(v56 + 32);
  unint64_t v57 = *(void *)(v56 + 40);
  char v59 = *(void (**)(unint64_t *, uint64_t, uint64_t))(v18[80] + 16LL);
  v18[95] = v59;
  v59(v51, v50, v52);
  sub_10001581C(v53, v54, (uint64_t *)&unk_1009A34D0);
  v18[96] = sub_1003C3D10( v51,  v58,  v57,  v54,  v55,  &qword_1009AC0E8,  &qword_1009AC0F0,  &qword_1009AC198,  (uint64_t (*)(char *, unint64_t, uint64_t, char *, uint64_t))sub_1003C5774);
  if (v58 < 2)
  {
    unint64_t v63 = 0LL;
    uint64_t v64 = 0LL;
    uint64_t v65 = 0LL;
    unint64_t v66 = 0xF000000000000000LL;
  }

  else
  {
    uint64_t v60 = sub_100479DC4(v75[59], v58, *(void *)(v75[63] + 144));
    unint64_t v63 = v60;
    uint64_t v64 = v61;
    unint64_t v66 = v62;
    if (v62 >> 60 == 15) {
      uint64_t v65 = 0LL;
    }
    else {
      uint64_t v65 = v60;
    }
  }

  v75[100] = v65;
  v75[99] = v66;
  v75[98] = v64;
  v75[97] = v63;
  unint64_t v67 = v75[91];
  uint64_t v68 = v75[90];
  unint64_t v69 = v75[85];
  uint64_t v70 = v75[84];
  sub_10001736C(v70, v69);
  PrivateKey.publicKey.getter(v70, v69);
  uint64_t v86 = v71;
  unint64_t v82 = v72;
  sub_10001736C(v68, v67);
  sub_100164D20(v63, v64, v66);
  sub_10045C258(v70, v69, v86, v82, v68, v67, v63, v64, (uint64_t *)v83, v66, v58);
  v75[101] = 0LL;
  __int128 v73 = *(_OWORD *)(v83 + 48);
  *(_OWORD *)(v1 + 32) = *(_OWORD *)(v83 + 32);
  *(_OWORD *)(v1 + 48) = v73;
  *(void *)(v1 + 64) = *(void *)(v83 + 64);
  __int128 v74 = *(_OWORD *)(v83 + 16);
  *(_OWORD *)uint64_t v1 = *(_OWORD *)v83;
  *(_OWORD *)(v1 + swift_weakDestroy(v0 + 16) = v74;
  sub_100164D20(v63, v64, v66);
  sub_100164EE8( (void *)v83,  (void (*)(void, void))sub_100018BE4,  (void (*)(uint64_t, uint64_t))sub_10001736C);
  return swift_task_switch(sub_1003C1100, 0LL, 0LL);
}

uint64_t sub_1003C3978()
{
  if ((static Task<>.isCancelled.getter() & 1) != 0)
  {
    uint64_t v1 = *(void *)(v0 + 968);
    *(void *)(v0 + 912) = *(void *)(v0 + 864);
    __int128 v2 = *(_OWORD *)(v0 + 848);
    *(_OWORD *)(v0 + 896) = v2;
    *(void *)(v0 + 888) = v2;
    *(void *)(v0 + 880) = v1;
    uint64_t v3 = sub_1003C1420;
  }

  else
  {
    uint64_t v4 = *(void *)(v0 + 144);
    uint64_t v21 = *(void *)(v0 + 968);
    *(void *)(v0 + 840) = *(void *)(v0 + 864);
    __int128 v5 = *(_OWORD *)(v0 + 848);
    *(_OWORD *)(v0 + 824) = v5;
    *(void *)(v0 + 8swift_weakDestroy(v0 + 16) = v5;
    uint64_t v6 = *(void *)(v0 + 88);
    unint64_t v7 = *(void *)(v0 + 96);
    uint64_t v8 = *(void *)(v0 + 104);
    unint64_t v9 = *(void *)(v0 + 112);
    uint64_t v10 = *(void *)(v0 + 120);
    unint64_t v11 = *(void *)(v0 + 128);
    *(void *)(v0 + 848) = *(void *)(v0 + 136);
    *(void *)(v0 + 856) = v4;
    unint64_t v12 = *(void *)(v0 + 152);
    *(void *)(v0 + 864) = v12;
    sub_10001736C(v4, v12);
    sub_10001736C(v4, v12);
    sub_100018BE4(v6, v7);
    sub_10001736C(v8, v9);
    sub_10001736C(v10, v11);
    sub_10001736C(v4, v12);
    sub_100018BE4(v6, v7);
    sub_10001736C(v8, v9);
    sub_1004DB8E0(v6, v7, v8, v9, v4, v12, 1, (void *)(v0 + 136), (_OWORD *)(v0 + 216), (uint64_t *)(v0 + 144));
    *(void *)(v0 + 872) = v21;
    if (v21)
    {
      sub_100016F9C(v4, v12);
      sub_100016F9C(v4, v12);
      sub_100016F9C(v8, v9);
      sub_1000182F0(v6, v7);
      sub_1000182F0(v6, v7);
      sub_100016F9C(v8, v9);
      sub_100016F9C(v10, v11);
      uint64_t v13 = sub_100016F9C(v4, v12);
      uint64_t v14 = static os_log_type_t.error.getter(v13);
      if (qword_10099B520 != -1) {
        swift_once(&qword_10099B520, sub_1004DC610);
      }
      uint64_t v15 = qword_100A2AC90;
      uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099D740);
      uint64_t v17 = swift_allocObject(v16, 72LL, 7LL);
      *(_OWORD *)(v17 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
      uint64_t v18 = _convertErrorToNSError(_:)(v21);
      *(void *)(v17 + 56) = sub_100022898(0LL, (unint64_t *)&qword_10099DFA0, &OBJC_CLASS___NSError_ptr);
      *(void *)(v17 + 64) = sub_100044B18();
      *(void *)(v17 + 32) = v18;
      os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "Error in TokenAsyncSequence: %@", 31LL, 2LL, v17);
      swift_bridgeObjectRelease();
      swift_errorRelease(v21);
      uint64_t v3 = sub_1003C2DA8;
    }

    else
    {
      __int128 v19 = *(_OWORD *)(v0 + 232);
      *(_OWORD *)(v0 + 920) = *(_OWORD *)(v0 + 216);
      *(_OWORD *)(v0 + 936) = v19;
      *(_OWORD *)(v0 + 952) = *(_OWORD *)(v0 + 248);
      sub_100016F9C(v4, v12);
      sub_100016F9C(v8, v9);
      sub_1000182F0(v6, v7);
      sub_1000182F0(v6, v7);
      sub_100016F9C(v8, v9);
      sub_100016F9C(v10, v11);
      sub_100016F9C(v4, v12);
      uint64_t v3 = sub_1003C1FEC;
    }
  }

  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1003C3C90( unint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1003C3D10( a1,  a2,  a3,  a4,  a5,  &qword_1009AC0E8,  &qword_1009AC0F0,  &qword_1009AC198,  (uint64_t (*)(char *, unint64_t, uint64_t, char *, uint64_t))sub_1003C5774);
}

uint64_t sub_1003C3CD0( unint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5)
{
  return sub_1003C3D10( a1,  a2,  a3,  a4,  a5,  &qword_1009AC1E8,  &qword_1009AC1F0,  (uint64_t *)&unk_1009AC1F8,  (uint64_t (*)(char *, unint64_t, uint64_t, char *, uint64_t))sub_1003C5A84);
}

uint64_t sub_1003C3D10( unint64_t *a1, unint64_t a2, unint64_t a3, uint64_t a4, uint64_t a5, uint64_t *a6, unint64_t *a7, uint64_t *a8, uint64_t (*a9)(char *, unint64_t, uint64_t, char *, uint64_t))
{
  uint64_t v33 = a7;
  unint64_t v34 = a8;
  uint64_t v35 = a5;
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v14);
  uint64_t v16 = (char *)&v32 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for URL(0LL);
  uint64_t v18 = *(void *)(v17 - 8);
  __chkstk_darwin(v17);
  uint64_t v20 = (char *)&v32 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (!a2)
  {
    uint64_t v24 = sub_100004AEC(a6);
    uint64_t v25 = sub_1000372EC(v33, a6, (uint64_t)&unk_1007FF190);
    uint64_t v26 = swift_allocError(v24, v25, 0LL, 0LL);
    *(_DWORD *)uint64_t v27 = 2;
    *(_BYTE *)(v27 + 4) = 2;
    swift_willThrow(v26);
    sub_100015794(a4, (uint64_t *)&unk_1009A34D0);
    (*(void (**)(unint64_t *, uint64_t))(v18 + 8))(a1, v17);
    return a4;
  }

  uint64_t result = (*(uint64_t (**)(char *, unint64_t *, uint64_t))(v18 + 16))(v20, a1, v17);
  unint64_t v22 = a3 - a2;
  if (a3 < a2)
  {
    if ((uint64_t)(a2 - a3) < 0)
    {
LABEL_14:
      __break(1u);
      goto LABEL_15;
    }

    uint64_t v23 = a4;
    unint64_t v22 = a3 - a2;
LABEL_7:
    a4 = v22 + 1;
    if (!__OFADD__(v22, 1LL))
    {
      uint64_t v33 = a1;
      uint64_t v28 = v23;
      sub_10001581C(v23, (uint64_t)v16, (uint64_t *)&unk_1009A34D0);
      uint64_t v29 = sub_100004AEC(v34);
      swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
      uint64_t v30 = v36;
      uint64_t v31 = a9(v20, a2, a4, v16, v35);
      if (v30)
      {
        sub_100015794(v28, (uint64_t *)&unk_1009A34D0);
        (*(void (**)(unint64_t *, uint64_t))(v18 + 8))(v33, v17);
      }

      else
      {
        a4 = v31;
        sub_100015794(v28, (uint64_t *)&unk_1009A34D0);
        (*(void (**)(unint64_t *, uint64_t))(v18 + 8))(v33, v17);
      }

      return a4;
    }

    __break(1u);
    goto LABEL_14;
  }

  uint64_t v23 = a4;
LABEL_15:
  __break(1u);
  return result;
}

uint64_t sub_1003C3F44(uint64_t a1, int a2)
{
  uint64_t v4 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v5 = __chkstk_darwin(v4);
  unint64_t v7 = (char *)&v36 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v5);
  uint64_t v10 = (char *)&v36 - v9;
  __chkstk_darwin(v8);
  unint64_t v12 = (char *)&v36 - v11;
  id v13 = sub_1003C43FC(a1, a2);
  if (!v13) {
    return 0LL;
  }
  uint64_t v14 = v13;
  int v41 = a2;
  if (qword_10099B3C8 != -1) {
    swift_once(&qword_10099B3C8, sub_1003B7ABC);
  }
  uint64_t v15 = type metadata accessor for Logger(0LL);
  sub_10000A720(v15, (uint64_t)qword_1009ABC80);
  sub_10001DC4C(a1, (uint64_t)v12, type metadata accessor for BeaconIdentifier);
  uint64_t v16 = sub_10001DC4C(a1, (uint64_t)v10, type metadata accessor for BeaconIdentifier);
  uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
  int v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, (os_log_type_t)v18))
  {
    int v37 = v18;
    os_log_t v38 = v17;
    uint64_t v39 = v14;
    uint64_t v40 = v7;
    uint64_t v19 = swift_slowAlloc(52LL, -1LL);
    uint64_t v20 = swift_slowAlloc(96LL, -1LL);
    uint64_t v36 = v20;
    *(_DWORD *)uint64_t v19 = 141559043;
    uint64_t v42 = 1752392040LL;
    uint64_t v43 = v20;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v19 + 4, v19 + 12);
    *(_WORD *)(v19 + 12) = 2081;
    uint64_t v21 = type metadata accessor for UUID(0LL);
    uint64_t v22 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
    uint64_t v42 = sub_1003F11D4(v23, v24, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v19 + 14, v19 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v12, type metadata accessor for BeaconIdentifier);
    *(_WORD *)(v19 + 22) = 2160;
    uint64_t v42 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v19 + 24, v19 + 32);
    *(_WORD *)(v19 + 32) = 2081;
    uint64_t v25 = dispatch thunk of CustomStringConvertible.description.getter(v21, v22);
    uint64_t v42 = sub_1003F11D4(v25, v26, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v19 + 34, v19 + 42);
    swift_bridgeObjectRelease();
    sub_100018C68((uint64_t)v10, type metadata accessor for BeaconIdentifier);
    *(_WORD *)(v19 + 42) = 2082;
    char v27 = v41;
    if ((_BYTE)v41)
    {
      else {
        uint64_t v28 = 0xD000000000000010LL;
      }
      else {
        unint64_t v29 = 0x80000001008533C0LL;
      }
    }

    else
    {
      unint64_t v29 = 0xE800000000000000LL;
      uint64_t v28 = 0x7972616D6972702ELL;
    }

    unint64_t v7 = v40;
    uint64_t v42 = sub_1003F11D4(v28, v29, &v43);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v42, &v43, v19 + 44, v19 + 52);
    swift_bridgeObjectRelease();
    os_log_t v30 = v38;
    _os_log_impl( (void *)&_mh_execute_header,  v38,  (os_log_type_t)v37,  "opened keymap: %{private,mask.hash}s/%{private,mask.hash}s/%{public}s)",  (uint8_t *)v19,  0x34u);
    uint64_t v31 = v36;
    swift_arrayDestroy(v36, 3LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v31, -1LL, -1LL);
    swift_slowDealloc(v19, -1LL, -1LL);

    uint64_t v14 = v39;
  }

  else
  {
    sub_100018C68((uint64_t)v12, type metadata accessor for BeaconIdentifier);
    sub_100018C68((uint64_t)v10, type metadata accessor for BeaconIdentifier);

    char v27 = v41;
  }

  sub_10001DC4C(a1, (uint64_t)v7, type metadata accessor for BeaconIdentifier);
  uint64_t v32 = type metadata accessor for BeaconKeyIndexMap(0LL);
  uint64_t v33 = swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
  uint64_t handle_from_file_descriptor = sp_key_index_map_create_handle_from_file_descriptor([v14 fileDescriptor]);

  if (!handle_from_file_descriptor)
  {
    sub_100018C68((uint64_t)v7, type metadata accessor for BeaconIdentifier);
    swift_deallocPartialClassInstance( v33,  v32,  *(unsigned int *)(*(void *)v33 + 48LL),  *(unsigned __int16 *)(*(void *)v33 + 52LL));
    return 0LL;
  }

  sub_10002218C( (uint64_t)v7,  v33 + OBJC_IVAR____TtC12searchpartyd17BeaconKeyIndexMap_beaconIdentifier,  type metadata accessor for BeaconIdentifier);
  *(_BYTE *)(v33 + OBJC_IVAR____TtC12searchpartyd17BeaconKeyIndexMap_sequence) = v27;
  *(void *)(v33 + OBJC_IVAR____TtC12searchpartyd17BeaconKeyIndexMap_mapHandle) = handle_from_file_descriptor;
  return v33;
}

id sub_1003C43FC(uint64_t a1, int a2)
{
  uint64_t v52 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v4 = __chkstk_darwin(v52);
  uint64_t v6 = (char *)&v48 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v4);
  uint64_t v9 = (char *)&v48 - v8;
  __chkstk_darwin(v7);
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v10);
  unint64_t v12 = (char *)&v48 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v48 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v53 = a2;
  sub_1003C4EF8(a2, v12);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) == 1)
  {
    sub_100015794((uint64_t)v12, (uint64_t *)&unk_1009A34D0);
    if (qword_10099B3C8 != -1) {
      swift_once(&qword_10099B3C8, sub_1003B7ABC);
    }
    uint64_t v17 = type metadata accessor for Logger(0LL);
    sub_10000A720(v17, (uint64_t)qword_1009ABC80);
    uint64_t v18 = sub_10001DC4C(a1, (uint64_t)v6, type metadata accessor for BeaconIdentifier);
    uint64_t v19 = (os_log_s *)Logger.logObject.getter(v18);
    os_log_type_t v20 = static os_log_type_t.error.getter(v19);
    if (os_log_type_enabled(v19, v20))
    {
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t v22 = swift_slowAlloc(64LL, -1LL);
      uint64_t v56 = v22;
      *(_DWORD *)uint64_t v21 = 141558531;
      uint64_t v54 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v21 + 4, v21 + 12);
      *(_WORD *)(v21 + 12) = 2081;
      uint64_t v23 = type metadata accessor for UUID(0LL);
      uint64_t v24 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
      unint64_t v55 = v25;
      v26._countAndFlagsBits = 47LL;
      v26._object = (void *)0xE100000000000000LL;
      String.append(_:)(v26);
      v27._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v23, v24);
      String.append(_:)(v27);
      swift_bridgeObjectRelease();
      uint64_t v54 = sub_1003F11D4(v54, v55, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v21 + 14, v21 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v6, type metadata accessor for BeaconIdentifier);
      *(_WORD *)(v21 + 22) = 2082;
      if ((_BYTE)v53)
      {
        if (v53 == 1)
        {
          uint64_t v28 = 0x61646E6F6365732ELL;
          unint64_t v29 = 0xEA00000000007972LL;
        }

        else
        {
          unint64_t v29 = 0x80000001008533C0LL;
          uint64_t v28 = 0xD000000000000010LL;
        }
      }

      else
      {
        uint64_t v28 = 0x7972616D6972702ELL;
        unint64_t v29 = 0xE800000000000000LL;
      }

      uint64_t v54 = sub_1003F11D4(v28, v29, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v21 + 24, v21 + 32);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v19,  v20,  "no keymap URL for identifier %{private,mask.hash}s, sequence: %{public}s",  (uint8_t *)v21,  0x20u);
      swift_arrayDestroy(v22, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v22, -1LL, -1LL);
      swift_slowDealloc(v21, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v6, type metadata accessor for BeaconIdentifier);
    }

    return 0LL;
  }

  (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
  os_log_t v30 = objc_autoreleasePoolPush();
  sub_1003D5810((uint64_t)v16);
  objc_autoreleasePoolPop(v30);
  URL.path.getter(v31);
  NSString v32 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v33 = [(id)objc_opt_self(NSFileHandle) fileHandleForReadingAtPath:v32];

  if (!v33)
  {
    if (qword_10099B3C8 != -1) {
      swift_once(&qword_10099B3C8, sub_1003B7ABC);
    }
    uint64_t v34 = type metadata accessor for Logger(0LL);
    sub_10000A720(v34, (uint64_t)qword_1009ABC80);
    uint64_t v35 = sub_10001DC4C(a1, (uint64_t)v9, type metadata accessor for BeaconIdentifier);
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
    int v37 = static os_log_type_t.error.getter(v36);
    if (os_log_type_enabled(v36, (os_log_type_t)v37))
    {
      LODWORD(v50) = v37;
      uint64_t v51 = v16;
      uint64_t v38 = swift_slowAlloc(32LL, -1LL);
      uint64_t v49 = swift_slowAlloc(64LL, -1LL);
      uint64_t v56 = v49;
      *(_DWORD *)uint64_t v38 = 141558531;
      uint64_t v54 = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v38 + 4, v38 + 12);
      *(_WORD *)(v38 + 12) = 2081;
      uint64_t v48 = v38 + 14;
      uint64_t v39 = type metadata accessor for UUID(0LL);
      uint64_t v40 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v54 = dispatch thunk of CustomStringConvertible.description.getter(v39, v40);
      unint64_t v55 = v41;
      v42._countAndFlagsBits = 47LL;
      v42._object = (void *)0xE100000000000000LL;
      String.append(_:)(v42);
      v43._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v39, v40);
      String.append(_:)(v43);
      swift_bridgeObjectRelease();
      uint64_t v54 = sub_1003F11D4(v54, v55, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v48, v38 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v9, type metadata accessor for BeaconIdentifier);
      *(_WORD *)(v38 + 22) = 2082;
      if ((_BYTE)v53)
      {
        if (v53 == 1)
        {
          uint64_t v44 = 0x61646E6F6365732ELL;
          unint64_t v45 = 0xEA00000000007972LL;
        }

        else
        {
          unint64_t v45 = 0x80000001008533C0LL;
          uint64_t v44 = 0xD000000000000010LL;
        }
      }

      else
      {
        uint64_t v44 = 0x7972616D6972702ELL;
        unint64_t v45 = 0xE800000000000000LL;
      }

      uint64_t v54 = sub_1003F11D4(v44, v45, &v56);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v54, &v55, v38 + 24, v38 + 32);
      swift_bridgeObjectRelease();
      _os_log_impl( (void *)&_mh_execute_header,  v36,  (os_log_type_t)v50,  "could not open keymap for reading identifier: %{private,mask.hash}s, sequence: %{public}s",  (uint8_t *)v38,  0x20u);
      uint64_t v47 = v49;
      swift_arrayDestroy(v49, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v47, -1LL, -1LL);
      swift_slowDealloc(v38, -1LL, -1LL);

      (*(void (**)(char *, uint64_t))(v14 + 8))(v51, v13);
    }

    else
    {

      sub_100018C68((uint64_t)v9, type metadata accessor for BeaconIdentifier);
      (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
    }

    return 0LL;
  }

  (*(void (**)(char *, uint64_t))(v14 + 8))(v16, v13);
  return v33;
}

uint64_t sub_1003C4EF8@<X0>(char a1@<W1>, char *a2@<X8>)
{
  uint64_t v31 = a2;
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v28 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for DirectorySequence(0LL);
  uint64_t v29 = *(void *)(v6 - 8);
  uint64_t v30 = v6;
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for URL(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v28 - v14;
  sub_1003C519C(a1, (uint64_t)&v28 - v14);
  id v16 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v28 = v15;
  NSFileManager.flatSequence(at:includingPropertiesForKeys:)(v15, 0LL);

  DirectorySequence.next()(v17);
  uint64_t v18 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48);
  if (v18(v5, 1LL, v9) == 1)
  {
LABEL_7:
    (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v30);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v28, v9);
    uint64_t v25 = 1LL;
    Swift::String v26 = v31;
  }

  else
  {
    uint64_t v19 = *(uint64_t (**)(char *, char *, uint64_t))(v10 + 32);
    while (1)
    {
      uint64_t v20 = v19(v13, v5, v9);
      uint64_t v21 = URL.pathExtension.getter(v20);
      if (v21 == 0x70616D79656BLL && v22 == 0xE600000000000000LL) {
        break;
      }
      char v23 = _stringCompareWithSmolCheck(_:_:expecting:)(v21, v22, 0x70616D79656BLL, 0xE600000000000000LL, 0LL);
      swift_bridgeObjectRelease();
      if ((v23 & 1) != 0) {
        goto LABEL_9;
      }
      uint64_t v24 = (*(uint64_t (**)(char *, uint64_t))(v10 + 8))(v13, v9);
      DirectorySequence.next()(v24);
      if (v18(v5, 1LL, v9) == 1) {
        goto LABEL_7;
      }
    }

    swift_bridgeObjectRelease();
LABEL_9:
    (*(void (**)(char *, uint64_t))(v29 + 8))(v8, v30);
    (*(void (**)(char *, uint64_t))(v10 + 8))(v28, v9);
    Swift::String v26 = v31;
    v19(v31, v13, v9);
    uint64_t v25 = 0LL;
  }

  return (*(uint64_t (**)(char *, uint64_t, uint64_t, uint64_t))(v10 + 56))(v26, v25, 1LL, v9);
}

uint64_t sub_1003C519C@<X0>(char a1@<W1>, uint64_t a2@<X8>)
{
  v21[1] = a2;
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)v21 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v11 = (char *)v21 - v10;
  uint64_t v12 = UUID.uuidString.getter(v9);
  URL.appendingPathComponent(_:isDirectory:)(v12, v13, 1LL);
  swift_bridgeObjectRelease();
  uint64_t v14 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v15 = UUID.uuidString.getter(v14);
  URL.appendingPathComponent(_:isDirectory:)(v15, v16, 1LL);
  swift_bridgeObjectRelease();
  uint64_t v17 = *(void (**)(char *, uint64_t))(v5 + 8);
  v17(v8, v4);
  if (a1)
  {
    if (a1 != 1)
    {
      URL.init(fileURLWithPath:)(0xD000000000000012LL, 0x8000000100860310LL);
      return ((uint64_t (*)(char *, uint64_t))v17)(v11, v4);
    }

    uint64_t v18 = v2[16];
    uint64_t v19 = v2[17];
  }

  else
  {
    uint64_t v18 = v2[14];
    uint64_t v19 = v2[15];
  }

  URL.appendingPathComponent(_:isDirectory:)(v18, v19, 1LL);
  return ((uint64_t (*)(char *, uint64_t))v17)(v11, v4);
}

Swift::Int sub_1003C530C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v8, v3, v4);
  type metadata accessor for BeaconIdentifier(0LL);
  dispatch thunk of Hashable.hash(into:)(v8, v3, v4);
  if (*(_BYTE *)(v1 + *(int *)(a1 + 20)))
  {
    if (*(_BYTE *)(v1 + *(int *)(a1 + 20)) == 1)
    {
      unint64_t v5 = 0xE900000000000079LL;
      uint64_t v6 = 0x7261646E6F636553LL;
    }

    else
    {
      unint64_t v5 = 0xEF736E6F69746163LL;
      uint64_t v6 = 0x6F4C657275636553LL;
    }
  }

  else
  {
    unint64_t v5 = 0xE700000000000000LL;
    uint64_t v6 = 0x7972616D697250LL;
  }

  String.hash(into:)(v8, v6, v5);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1003C5430(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for UUID(0LL);
  uint64_t v6 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(a1, v5, v6);
  type metadata accessor for BeaconIdentifier(0LL);
  dispatch thunk of Hashable.hash(into:)(a1, v5, v6);
  if (*(_BYTE *)(v2 + *(int *)(a2 + 20)))
  {
    if (*(_BYTE *)(v2 + *(int *)(a2 + 20)) == 1)
    {
      unint64_t v7 = 0xE900000000000079LL;
      uint64_t v8 = 0x7261646E6F636553LL;
    }

    else
    {
      unint64_t v7 = 0xEF736E6F69746163LL;
      uint64_t v8 = 0x6F4C657275636553LL;
    }
  }

  else
  {
    unint64_t v7 = 0xE700000000000000LL;
    uint64_t v8 = 0x7972616D697250LL;
  }

  String.hash(into:)(a1, v8, v7);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1003C5538(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for UUID(0LL);
  uint64_t v5 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  dispatch thunk of Hashable.hash(into:)(v9, v4, v5);
  type metadata accessor for BeaconIdentifier(0LL);
  dispatch thunk of Hashable.hash(into:)(v9, v4, v5);
  if (*(_BYTE *)(v2 + *(int *)(a2 + 20)))
  {
    if (*(_BYTE *)(v2 + *(int *)(a2 + 20)) == 1)
    {
      unint64_t v6 = 0xE900000000000079LL;
      uint64_t v7 = 0x7261646E6F636553LL;
    }

    else
    {
      unint64_t v6 = 0xEF736E6F69746163LL;
      uint64_t v7 = 0x6F4C657275636553LL;
    }
  }

  else
  {
    unint64_t v6 = 0xE700000000000000LL;
    uint64_t v7 = 0x7972616D697250LL;
  }

  String.hash(into:)(v9, v7, v6);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1003C5658(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((static UUID.== infix(_:_:)(a1, a2) & 1) != 0
    && (uint64_t v6 = type metadata accessor for BeaconIdentifier(0LL),
        (static UUID.== infix(_:_:)(a1 + *(int *)(v6 + 20), a2 + *(int *)(v6 + 20)) & 1) != 0))
  {
    return sub_100305B8C(*(_BYTE *)(a1 + *(int *)(a3 + 20)), *(_BYTE *)(a2 + *(int *)(a3 + 20)));
  }

  else
  {
    return 0LL;
  }

uint64_t sub_1003C56C8()
{
  return sub_100007864( &qword_1009AC048,  type metadata accessor for BeaconKeyServiceBuilder.FileKey,  (uint64_t)&unk_1007FE958);
}

uint64_t sub_1003C56F4()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A8C0);
  sub_10000A720(v0, (uint64_t)qword_100A2A8C0);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000017LL,  0x80000001007FE8A0LL);
}

uint64_t sub_1003C5774(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v28 = a5;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v5 + qword_1009AC780) = 0LL;
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  uint64_t v29 = a1;
  v17(v5 + qword_1009AC758, a1, v13);
  if (!HIDWORD(a2))
  {
    *(_DWORD *)(v5 + qword_1009AC768) = a2;
    *(_DWORD *)(v5 + qword_1009AC770) = a2;
    *(_DWORD *)(v5 + qword_1009AC778) = a2;
    *(void *)(v5 + qword_1009AC760) = a3;
    sub_100004AEC(&qword_1009AC1A0);
    sub_1000372EC(&qword_1009AC1A8, &qword_1009AC1A0, (uint64_t)&unk_1007FF0C0);
    uint64_t v18 = Set.init(minimumCapacity:)(a3 / 256);
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009AC1B0);
    uint64_t v20 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(256LL, v19);
    v20[2] = 256LL;
    v20[4] = v18;
    v20[5] = v18;
    for (uint64_t i = 6LL; i != 260; ++i)
    {
      v20[i] = v18;
      swift_bridgeObjectRetain(v18);
    }

    *(void *)(v5 + qword_1009AC788) = v20;
    sub_10001581C(a4, (uint64_t)v12, (uint64_t *)&unk_1009A34D0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) == 1)
    {
      swift_bridgeObjectRetain(v18);
      sub_100015794(a4, (uint64_t *)&unk_1009A34D0);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v29, v13);
      sub_100015794((uint64_t)v12, (uint64_t *)&unk_1009A34D0);
      return v5;
    }

    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    uint64_t v22 = v28;
    if (!HIDWORD(v28))
    {
      swift_bridgeObjectRetain(v18);
      uint64_t v23 = v22;
      uint64_t v24 = v30;
      sub_1003C8640( (uint64_t)v16,  v23,  sub_1003D5810,  (void (*)(void *, id *, uint64_t, uint64_t))sub_1003C8860);
      if (v24) {
        swift_release(v5);
      }
      sub_100015794(a4, (uint64_t *)&unk_1009A34D0);
      uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
      v25(v29, v13);
      v25((uint64_t)v16, v13);
      return v5;
    }
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_1003C5A84(uint64_t a1, unint64_t a2, uint64_t a3, uint64_t a4, unint64_t a5)
{
  unint64_t v28 = a5;
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v27 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for URL(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v27 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)(v5 + qword_1009AC780) = 0LL;
  uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16);
  uint64_t v29 = a1;
  v17(v5 + qword_1009AC758, a1, v13);
  if (!HIDWORD(a2))
  {
    *(_DWORD *)(v5 + qword_1009AC768) = a2;
    *(_DWORD *)(v5 + qword_1009AC770) = a2;
    *(_DWORD *)(v5 + qword_1009AC778) = a2;
    *(void *)(v5 + qword_1009AC760) = a3;
    sub_100004AEC(&qword_1009A0AD0);
    sub_1000372EC(&qword_1009AC208, &qword_1009A0AD0, (uint64_t)&unk_1007FF0C0);
    uint64_t v18 = Set.init(minimumCapacity:)(a3 / 256);
    uint64_t v19 = sub_100004AEC((uint64_t *)&unk_1009AC210);
    uint64_t v20 = (void *)static Array._allocateBufferUninitialized(minimumCapacity:)(256LL, v19);
    v20[2] = 256LL;
    v20[4] = v18;
    v20[5] = v18;
    for (uint64_t i = 6LL; i != 260; ++i)
    {
      v20[i] = v18;
      swift_bridgeObjectRetain(v18);
    }

    *(void *)(v5 + qword_1009AC788) = v20;
    sub_10001581C(a4, (uint64_t)v12, (uint64_t *)&unk_1009A34D0);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v14 + 48))(v12, 1LL, v13) == 1)
    {
      swift_bridgeObjectRetain(v18);
      sub_100015794(a4, (uint64_t *)&unk_1009A34D0);
      (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v29, v13);
      sub_100015794((uint64_t)v12, (uint64_t *)&unk_1009A34D0);
      return v5;
    }

    (*(void (**)(char *, char *, uint64_t))(v14 + 32))(v16, v12, v13);
    uint64_t v22 = v28;
    if (!HIDWORD(v28))
    {
      swift_bridgeObjectRetain(v18);
      uint64_t v23 = v22;
      uint64_t v24 = v30;
      sub_1003C8640( (uint64_t)v16,  v23,  sub_1003DA668,  (void (*)(void *, id *, uint64_t, uint64_t))sub_1003C8AB4);
      if (v24) {
        swift_release(v5);
      }
      sub_100015794(a4, (uint64_t *)&unk_1009A34D0);
      uint64_t v25 = *(void (**)(uint64_t, uint64_t))(v14 + 8);
      v25(v29, v13);
      v25((uint64_t)v16, v13);
      return v5;
    }
  }

  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Not enough bits to represent the passed value",  45LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3455LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_1003C5D94(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v11 = *(void *)(a1 + qword_1009AC760);
  if (__OFSUB__(v11, 1LL))
  {
    __break(1u);
    goto LABEL_16;
  }

  unint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v4 = a1;
  uint64_t v10 = qword_1009AC780;
  if (v11 - 1 >= *(void *)(a1 + qword_1009AC780)) {
    goto LABEL_6;
  }
  unint64_t v3 = static os_log_type_t.error.getter(a1);
  if (qword_10099B3E8 != -1) {
    goto LABEL_20;
  }
  while (1)
  {
    uint64_t v12 = qword_100A2A8F0;
    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t result = swift_allocObject(v13, 112LL, 7LL);
    *(_OWORD *)(result + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    *(void *)(result + 56) = &type metadata for Int;
    *(void *)(result + 64) = &protocol witness table for Int;
    *(void *)(result + 32) = v11;
    uint64_t v15 = *(void *)(v4 + v10);
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      break;
    }
    *(void *)(result + 96) = &type metadata for Int;
    *(void *)(result + 104) = &protocol witness table for Int;
    *(void *)(result + 72) = v17;
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v12, "Expected %ld keys but received %ld", v25, v26);
    swift_bridgeObjectRelease();
LABEL_6:
    sub_10001736C(v6, v5);
    LOBYTE(v3) = Data.subscript.getter(0LL, v6, v5);
    sub_100016F9C(v6, v5);
    unint64_t v3 = v3;
    uint64_t v11 = qword_1009AC778;
    Swift::UInt32 v9 = *(_DWORD *)(v4 + qword_1009AC778);
    uint64_t v7 = (void **)(v4 + qword_1009AC788);
    swift_beginAccess(v4 + qword_1009AC788, v27, 33LL, 0LL);
    uint64_t v8 = *v7;
    sub_10001736C(v6, v5);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
    *uint64_t v7 = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
LABEL_16:
      uint64_t v8 = sub_1005996EC(v8);
      *uint64_t v7 = v8;
    }

    if (v8[2] <= v3)
    {
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }

    unint64_t v3 = (unint64_t)&v8[v3 + 4];
    sub_10001736C(v6, v5);
    sub_1000C0D9C((uint64_t)&v25, v6, v5, v9);
    sub_100016F9C(v25, v26);
    swift_endAccess(v27);
    uint64_t result = sub_100016F9C(v6, v5);
    unsigned int v19 = *(_DWORD *)(v4 + v11);
    if (v19 < *(_DWORD *)(v4 + qword_1009AC768)) {
      *(_DWORD *)(v4 + qword_1009AC768) = v19;
    }
    if (*(_DWORD *)(v4 + qword_1009AC770) < v19) {
      *(_DWORD *)(v4 + qword_1009AC770) = v19;
    }
    int v20 = *(_DWORD *)(v4 + v11);
    BOOL v21 = __CFADD__(v20, 1);
    int v22 = v20 + 1;
    if (v21) {
      goto LABEL_18;
    }
    *(_DWORD *)(v4 + v11) = v22;
    uint64_t v23 = *(void *)(v4 + v10);
    BOOL v16 = __OFADD__(v23, 1LL);
    uint64_t v24 = v23 + 1;
    if (!v16)
    {
      *(void *)(v4 + v10) = v24;
      return result;
    }

uint64_t sub_1003C6010(uint64_t a1, uint64_t a2, unint64_t a3)
{
  uint64_t v11 = *(void *)(a1 + qword_1009AC760);
  if (__OFSUB__(v11, 1LL))
  {
    __break(1u);
    goto LABEL_16;
  }

  unint64_t v5 = a3;
  uint64_t v6 = a2;
  uint64_t v4 = a1;
  uint64_t v10 = qword_1009AC780;
  if (v11 - 1 >= *(void *)(a1 + qword_1009AC780)) {
    goto LABEL_6;
  }
  unint64_t v3 = static os_log_type_t.error.getter(a1);
  if (qword_10099B3E8 != -1) {
    goto LABEL_20;
  }
  while (1)
  {
    uint64_t v12 = qword_100A2A8F0;
    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t result = swift_allocObject(v13, 112LL, 7LL);
    *(_OWORD *)(result + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    *(void *)(result + 56) = &type metadata for Int;
    *(void *)(result + 64) = &protocol witness table for Int;
    *(void *)(result + 32) = v11;
    uint64_t v15 = *(void *)(v4 + v10);
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      break;
    }
    *(void *)(result + 96) = &type metadata for Int;
    *(void *)(result + 104) = &protocol witness table for Int;
    *(void *)(result + 72) = v17;
    os_log(_:dso:log:_:_:)(v3, &_mh_execute_header, v12, "Expected %ld keys but received %ld", v25, v26);
    swift_bridgeObjectRelease();
LABEL_6:
    sub_10001736C(v6, v5);
    LOBYTE(v3) = Data.subscript.getter(0LL, v6, v5);
    sub_100016F9C(v6, v5);
    unint64_t v3 = v3;
    uint64_t v11 = qword_1009AC778;
    Swift::UInt32 v9 = *(_DWORD *)(v4 + qword_1009AC778);
    uint64_t v7 = (void **)(v4 + qword_1009AC788);
    swift_beginAccess(v4 + qword_1009AC788, v27, 33LL, 0LL);
    uint64_t v8 = *v7;
    sub_10001736C(v6, v5);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v8);
    *uint64_t v7 = v8;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
LABEL_16:
      uint64_t v8 = sub_100599750(v8);
      *uint64_t v7 = v8;
    }

    if (v8[2] <= v3)
    {
      __break(1u);
LABEL_18:
      __break(1u);
      goto LABEL_19;
    }

    unint64_t v3 = (unint64_t)&v8[v3 + 4];
    sub_10001736C(v6, v5);
    sub_1000C1EB4((uint64_t)&v25, v6, v5, v9);
    sub_100016F9C(v25, v26);
    swift_endAccess(v27);
    uint64_t result = sub_100016F9C(v6, v5);
    unsigned int v19 = *(_DWORD *)(v4 + v11);
    if (v19 < *(_DWORD *)(v4 + qword_1009AC768)) {
      *(_DWORD *)(v4 + qword_1009AC768) = v19;
    }
    if (*(_DWORD *)(v4 + qword_1009AC770) < v19) {
      *(_DWORD *)(v4 + qword_1009AC770) = v19;
    }
    int v20 = *(_DWORD *)(v4 + v11);
    BOOL v21 = __CFADD__(v20, 1);
    int v22 = v20 + 1;
    if (v21) {
      goto LABEL_18;
    }
    *(_DWORD *)(v4 + v11) = v22;
    uint64_t v23 = *(void *)(v4 + v10);
    BOOL v16 = __OFADD__(v23, 1LL);
    uint64_t v24 = v23 + 1;
    if (!v16)
    {
      *(void *)(v4 + v10) = v24;
      return result;
    }

uint64_t sub_1003C628C()
{
  return sub_1003C6334(32, (void (*)(uint64_t, uint64_t, uint64_t *, void **, char *))sub_1003C7698);
}

uint64_t sub_1003C62E0()
{
  return sub_1003C6334(10, (void (*)(uint64_t, uint64_t, uint64_t *, void **, char *))sub_1003C7E6C);
}

uint64_t sub_1003C6334(int a1, void (*a2)(uint64_t, uint64_t, uint64_t *, void **, char *))
{
  uint64_t v109 = a2;
  uint64_t v4 = v2;
  uint64_t v112 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v111 = *(void *)(v112 - 8);
  __chkstk_darwin(v112);
  unint64_t v113 = (char *)v98 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v122 = type metadata accessor for URL(0LL);
  uint64_t v121 = *(void **)(v122 - 8);
  uint64_t v6 = __chkstk_darwin(v122);
  unint64_t v110 = (char *)v98 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v120 = (char *)v98 - v9;
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)v98 - v11;
  uint64_t v13 = qword_1009AC780;
  uint64_t v14 = *(void *)(v2 + qword_1009AC760);
  if (*(void *)(v2 + qword_1009AC780) < v14)
  {
    uint64_t v15 = static os_log_type_t.error.getter(v10);
    if (qword_10099B3E8 != -1) {
      swift_once(&qword_10099B3E8, sub_1003E02E8);
    }
    uint64_t v16 = qword_100A2A8F0;
    uint64_t v17 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v18 = swift_allocObject(v17, 112LL, 7LL);
    *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    *(void *)(v18 + 56) = &type metadata for Int;
    *(void *)(v18 + 64) = &protocol witness table for Int;
    *(void *)(v18 + 32) = v14;
    uint64_t v19 = *(void *)(v4 + v13);
    *(void *)(v18 + 96) = &type metadata for Int;
    *(void *)(v18 + 104) = &protocol witness table for Int;
    *(void *)(v18 + 72) = v19;
    os_log(_:dso:log:_:_:)(v15, &_mh_execute_header, v16, "Expected %ld keys but only received %ld", v98[0], v98[1]);
    swift_bridgeObjectRelease();
  }

  int v128 = a1;
  uint64_t v20 = sub_1003B7160((uint64_t)&v128, (uint64_t)&v129);
  uint64_t v22 = v21;
  int v127 = *(_DWORD *)(v4 + qword_1009AC768);
  uint64_t v23 = sub_1003B7160((uint64_t)&v127, (uint64_t)&v128);
  uint64_t v25 = v24;
  int v126 = *(_DWORD *)(v4 + qword_1009AC770);
  uint64_t v26 = sub_1003B7160((uint64_t)&v126, (uint64_t)&v127);
  uint64_t v28 = v27;
  uint64_t v29 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v29, *(unsigned int *)(v29 + 48), *(unsigned __int16 *)(v29 + 52));
  uint64_t v30 = __DataStorage.init(length:)(4128LL);
  uint64_t v136 = 0x102000000000LL;
  unint64_t v137 = v30 | 0x4000000000000000LL;
  Data._Representation.subscript.setter(75LL, 0LL);
  Data._Representation.subscript.setter(73LL, 1LL);
  Data._Representation.subscript.setter(77LL, 2LL);
  Data._Representation.subscript.setter(1LL, 3LL);
  uint64_t v117 = v20;
  unint64_t v118 = v22;
  unint64_t v31 = v119;
  sub_1003D4BB8(v20, v22);
  uint64_t v116 = v23;
  unint64_t v119 = v25;
  sub_1003D4BB8(v23, v25);
  uint64_t v114 = v26;
  unint64_t v115 = v28;
  sub_1003D4BB8(v26, v28);
  id v32 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v33 = sub_100022898(0LL, (unint64_t *)&qword_1009AC0D0, &OBJC_CLASS___NSFileManager_ptr);
  uint64_t v108 = v4;
  uint64_t v34 = v4 + qword_1009AC758;
  URL.deletingLastPathComponent()(v33);
  static NSFileManager.createDirectoryIfNecessary(url:attributes:)(v12, 0LL);
  uint64_t v35 = v121;
  uint64_t v36 = (uint64_t (*)(char *, uint64_t))v121[1];
  int v37 = v12;
  uint64_t v38 = v122;
  uint64_t v39 = v36(v37, v122);
  URL.path.getter(v39);
  NSString v40 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned __int8 v41 = [v32 fileExistsAtPath:v40];

  if ((v41 & 1) == 0)
  {
    URL.path.getter(v42);
    NSString v43 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
    [v32 createFileAtPath:v43 contents:0 attributes:0];
  }

  sub_100022898(0LL, &qword_1009AC0E0, &OBJC_CLASS___NSFileHandle_ptr);
  uint64_t v44 = (void (*)(char *, uint64_t, uint64_t))v35[2];
  uint64_t v45 = (uint64_t)v120;
  v44(v120, v34, v38);
  uint64_t v46 = (char *)sub_1003C7584(v45, (SEL *)&selRef_fileHandleForUpdatingURL_error_);
  if (v31)
  {
    sub_100016F9C(v136, v137);

LABEL_9:
    sub_100016F9C(v114, v115);
    sub_100016F9C(v116, v119);
    uint64_t v47 = v117;
    unint64_t v48 = v118;
    return sub_100016F9C(v47, v48);
  }

  uint64_t v49 = v46;
  id v129 = 0LL;
  unsigned __int8 v50 = [v46 truncateAtOffset:0 error:&v129];
  id v51 = v129;
  if ((v50 & 1) == 0)
  {
    id v56 = v129;
    _convertNSErrorToError(_:)(v51);

    swift_willThrow(v57);
    sub_100016F9C(v114, v115);
    sub_100016F9C(v116, v119);
    sub_100016F9C(v117, v118);
LABEL_13:
    uint64_t v47 = v136;
    unint64_t v48 = v137;
    return sub_100016F9C(v47, v48);
  }

  uint64_t v121 = v32;
  uint64_t v52 = v136;
  unint64_t v53 = v137;
  id v129 = (id)v136;
  unint64_t v130 = v137;
  id v54 = v51;
  sub_10001736C(v52, v53);
  unint64_t v55 = sub_100042F34();
  NSFileHandle.write<A>(contentsOf:)(&v129, &type metadata for Data, v55);
  unint64_t v107 = v55;
  sub_100016F9C(v52, v53);
  NSFileHandle.seekToEnd()();
  if (v59)
  {
    sub_100016F9C(v52, v53);

    goto LABEL_9;
  }

  uint64_t v120 = v49;
  unint64_t v106 = (void (*)(char *, uint64_t))v36;
  uint64_t v60 = sub_100004AEC((uint64_t *)&unk_1009AC188);
  uint64_t inited = swift_initStackObject(v60, v135);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(inited + 32) = NSFileProtectionKey;
  *(void *)(inited + 40) = NSFileProtectionCompleteUntilFirstUserAuthentication;
  unint64_t v62 = NSFileProtectionKey;
  unint64_t v63 = NSFileProtectionCompleteUntilFirstUserAuthentication;
  unint64_t v64 = sub_10041299C(inited);
  uint64_t v65 = v113;
  URLResourceValues.init()(v64);
  sub_10028B9E0(v64);
  swift_bridgeObjectRelease();
  type metadata accessor for FileAttributeKey(0LL);
  sub_100007864( &qword_10099C3A0,  (uint64_t (*)(uint64_t))type metadata accessor for FileAttributeKey,  (uint64_t)&unk_1007E3C0C);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  uint64_t v67 = swift_bridgeObjectRelease();
  URL.path.getter(v67);
  NSString v68 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  id v129 = 0LL;
  id v69 = v121;
  unsigned __int8 v70 = [v121 setAttributes:isa ofItemAtPath:v68 error:&v129];

  id v71 = v129;
  if ((v70 & 1) == 0)
  {
    id v74 = v129;
    _convertNSErrorToError(_:)(v71);

    swift_willThrow(v75);
    sub_100016F9C(v114, v115);
    sub_100016F9C(v116, v119);
    sub_100016F9C(v117, v118);
    (*(void (**)(char *, uint64_t))(v111 + 8))(v65, v112);
    goto LABEL_13;
  }

  id v72 = v129;
  URLResourceValues.isExcludedFromBackup.setter(1LL);
  uint64_t v73 = v122;
  v44(v110, v34, v122);
  URL.setResourceValues(_:)(v65);
  uint64_t v76 = static Array._allocateBufferUninitialized(minimumCapacity:)(256LL, &type metadata for UInt64);
  *(void *)(v76 + swift_weakDestroy(v0 + 16) = 256LL;
  bzero((void *)(v76 + 32), 0x800uLL);
  uint64_t v125 = (void *)v76;
  uint64_t v77 = static Array._allocateBufferUninitialized(minimumCapacity:)(256LL, &type metadata for UInt64);
  *(void *)(v77 + swift_weakDestroy(v0 + 16) = 256LL;
  bzero((void *)(v77 + 32), 0x800uLL);
  uint64_t v124 = v77;
  unint64_t v78 = objc_autoreleasePoolPush();
  uint64_t v79 = v108;
  unint64_t v80 = v109;
  v109(v108, 0LL, &v124, &v125, v120);
  for (uint64_t i = 1LL; ; ++i)
  {
    objc_autoreleasePoolPop(v78);
    if (i == 256) {
      break;
    }
    unint64_t v78 = objc_autoreleasePoolPush();
    v80(v79, i, &v124, &v125, v120);
  }

  id v129 = 0LL;
  id v82 = v120;
  unsigned int v83 = [v120 seekToOffset:32 error:&v129];
  id v84 = v129;
  if (v83)
  {
    uint64_t v85 = v124;
    uint64_t v86 = v125;
    id v87 = v129;
    uint64_t v88 = objc_autoreleasePoolPush();
    uint64_t v101 = v85;
    if (*(void *)(v85 + 16))
    {
      uint64_t v89 = v88;
      uint64_t v100 = v101 + 32;
      uint64_t v99 = &v124;
      uint64_t v123 = *(void *)(v101 + 32);
      if ((swift_isUniquelyReferenced_nonNull_native(v86) & 1) == 0) {
        uint64_t v86 = sub_1005996D8(v86);
      }
      uint64_t v104 = v89;
      uint64_t v102 = -255LL;
      if (v86[2])
      {
        uint64_t v90 = sub_1003B7160((uint64_t)(v86 + 4), (uint64_t)(v86 + 5));
        unint64_t v92 = v91;
        uint64_t v93 = (void *)sub_1003B7160((uint64_t)&v123, (uint64_t)v99);
        uint64_t v108 = v90;
        uint64_t v133 = v90;
        unint64_t v134 = v92;
        uint64_t v109 = (void (*)(uint64_t, uint64_t, uint64_t *, void **, char *))v92;
        unint64_t v131 = &type metadata for Data;
        uint64_t v132 = &protocol witness table for Data;
        id v129 = v93;
        unint64_t v130 = v94;
        unint64_t v105 = v94;
        uint64_t v95 = (char *)&loc_1003C6F2C + dword_1003C7524[sub_100012ED8(&v129, (uint64_t)&type metadata for Data)[1] >> 62];
        uint64_t v103 = 0LL;
        __asm { BR              X9 }
      }

      __break(1u);
    }

    __break(1u);
  }

  id v96 = v129;
  _convertNSErrorToError(_:)(v84);

  swift_willThrow(v97);
  sub_100016F9C(v114, v115);
  sub_100016F9C(v116, v119);
  sub_100016F9C(v117, v118);
  v106(v110, v73);
  (*(void (**)(char *, uint64_t))(v111 + 8))(v65, v112);
  sub_100016F9C(v136, v137);
  swift_bridgeObjectRelease();
  return swift_bridgeObjectRelease();
}

id sub_1003C7534(uint64_t a1)
{
  return sub_1003C7584(a1, (SEL *)&selRef_fileHandleForUpdatingURL_error_);
}

id sub_1003C7584(uint64_t a1, SEL *a2)
{
  uint64_t v4 = v2;
  URL._bridgeToObjectiveC()(__stack_chk_guard);
  uint64_t v7 = v6;
  id v16 = 0LL;
  id v8 = objc_msgSend((id)swift_getObjCClassFromMetadata(v4), *a2, v6, &v16);

  id v9 = v16;
  if (v8)
  {
    uint64_t v10 = type metadata accessor for URL(0LL);
    uint64_t v11 = *(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL);
    id v12 = v9;
    v11(a1, v10);
  }

  else
  {
    id v13 = v16;
    _convertNSErrorToError(_:)(v9);

    swift_willThrow();
    uint64_t v14 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v14 - 8) + 8LL))(a1, v14);
  }

  return v8;
}

uint64_t sub_1003C7698(__int128 *a1, unint64_t a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v7 = a1;
  uint64_t v8 = (uint64_t)a1 + qword_1009AC788;
  swift_beginAccess((char *)a1 + qword_1009AC788, v51, 0LL, 0LL);
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)(*(void *)v8 + 16LL) > a2)
  {
    unint64_t v41 = a2;
    uint64_t v4 = *(void *)(*(void *)(*(void *)v8 + 8 * a2 + 32) + 16LL);
    a2 = *a3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a3);
    *a3 = a2;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_48;
  }

  __break(1u);
LABEL_48:
  a2 = (unint64_t)sub_1005996D8((void *)a2);
LABEL_4:
  if (*(void *)(a2 + 16) <= v41)
  {
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }

  *(void *)(a2 + 8 * v41 + 32) = v4;
  *a3 = a2;
  if (!v4)
  {
    a3 = a4;
    uint64_t v7 = (__int128 *)*a4;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(*a4);
    *a4 = (unint64_t)v7;
    if ((result & 1) != 0) {
      goto LABEL_44;
    }
    goto LABEL_53;
  }

  if (*(void *)(*(void *)v8 + 16LL) <= v41) {
    goto LABEL_50;
  }
  uint64_t v10 = *(void *)((char *)v7 + qword_1009AC760);
  if ((unsigned __int128)(v10 * (__int128)28LL) >> 64 == (28 * v10) >> 63)
  {
    uint64_t v11 = *(void *)(*(void *)v8 + 8 * v41 + 32);
    uint64_t v12 = 28 * v10 / 256;
    swift_bridgeObjectRetain(v11);
    uint64_t v49 = sub_1003D8E18(v12);
    unsigned __int8 v50 = v13;
    uint64_t v14 = 1LL << *(_BYTE *)(v11 + 32);
    uint64_t v15 = -1LL;
    if (v14 < 64) {
      uint64_t v15 = ~(-1LL << v14);
    }
    unint64_t v16 = v15 & *(void *)(v11 + 56);
    int64_t v42 = (unint64_t)(v14 + 63) >> 6;
    swift_bridgeObjectRetain(v11);
    if (v16)
    {
      unint64_t v17 = __clz(__rbit64(v16));
LABEL_29:
      uint64_t v21 = *(void *)(v11 + 48) + 24 * v17;
      uint64_t v23 = *(void *)v21;
      unint64_t v22 = *(void *)(v21 + 8);
      int v43 = *(_DWORD *)(v21 + 16);
      uint64_t v47 = &type metadata for UnsafeRawBufferPointer;
      unint64_t v48 = &protocol witness table for UnsafeRawBufferPointer;
      uint64_t v45 = &v43;
      p_dst = &__dst;
      uint64_t v24 = (const void **)sub_100012ED8(&v45, (uint64_t)&type metadata for UnsafeRawBufferPointer);
      uint64_t v25 = *v24;
      if (*v24 && (v26 = v24[1], uint64_t v27 = v26 - v25, v26 != v25))
      {
        if (v27 <= 14)
        {
          *(void *)((char *)&__dst + 6) = 0LL;
          *(void *)&__int128 __dst = 0LL;
          BYTE14(__dst) = (_BYTE)v26 - (_BYTE)v25;
          memcpy(&__dst, v25, v26 - v25);
          uint64_t v28 = __dst;
          unint64_t v29 = DWORD2(__dst) | ((unint64_t)BYTE12(__dst) << 32) | ((unint64_t)BYTE13(__dst) << 40) | ((unint64_t)BYTE14(__dst) << 48);
          sub_10001736C(v23, v22);
        }

        else
        {
          uint64_t v31 = type metadata accessor for __DataStorage(0LL);
          swift_allocObject(v31, *(unsigned int *)(v31 + 48), *(unsigned __int16 *)(v31 + 52));
          sub_10001736C(v23, v22);
          uint64_t v32 = __DataStorage.init(bytes:length:)(v25, v27);
          uint64_t v33 = v32;
          if ((unint64_t)v27 >= 0x7FFFFFFF)
          {
            uint64_t v34 = type metadata accessor for Data.RangeReference(0LL);
            uint64_t v28 = swift_allocObject(v34, 32LL, 7LL);
            *(void *)(v28 + swift_weakDestroy(v0 + 16) = 0LL;
            *(void *)(v28 + 24) = v27;
            unint64_t v29 = v33 | 0x8000000000000000LL;
          }

          else
          {
            uint64_t v28 = v27 << 32;
            unint64_t v29 = v32 | 0x4000000000000000LL;
          }
        }
      }

      else
      {
        sub_10001736C(v23, v22);
        uint64_t v28 = 0LL;
        unint64_t v29 = 0xC000000000000000LL;
      }

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v45);
      *(void *)&__int128 __dst = v23;
      *((void *)&__dst + 1) = v22;
      uint64_t v47 = &type metadata for Data;
      unint64_t v48 = &protocol witness table for Data;
      uint64_t v45 = (int *)v28;
      p_dst = (__int128 *)v29;
      uint64_t v30 = (char *)&loc_1003C7A40 + dword_1003C7E5C[sub_100012ED8(&v45, (uint64_t)&type metadata for Data)[1] >> 62];
      __asm { BR              X9 }
    }

    if (v42 > 1)
    {
      unint64_t v18 = *(void *)(v11 + 64);
      uint64_t v19 = 1LL;
      if (v18) {
        goto LABEL_28;
      }
      uint64_t v19 = 2LL;
      if (v42 <= 2) {
        goto LABEL_38;
      }
      unint64_t v18 = *(void *)(v11 + 72);
      if (v18) {
        goto LABEL_28;
      }
      uint64_t v19 = 3LL;
      if (v42 <= 3) {
        goto LABEL_38;
      }
      unint64_t v18 = *(void *)(v11 + 80);
      if (v18) {
        goto LABEL_28;
      }
      uint64_t v19 = 4LL;
      if (v42 <= 4) {
        goto LABEL_38;
      }
      unint64_t v18 = *(void *)(v11 + 88);
      if (v18) {
        goto LABEL_28;
      }
      uint64_t v19 = 5LL;
      if (v42 <= 5) {
        goto LABEL_38;
      }
      unint64_t v18 = *(void *)(v11 + 96);
      if (v18)
      {
LABEL_28:
        unint64_t v17 = __clz(__rbit64(v18)) + (v19 << 6);
        goto LABEL_29;
      }

      uint64_t v20 = 6LL;
      if (v42 > 6)
      {
        unint64_t v18 = *(void *)(v11 + 104);
        if (v18)
        {
          uint64_t v19 = 6LL;
          goto LABEL_28;
        }

        while (1)
        {
          uint64_t v19 = v20 + 1;
          if (__OFADD__(v20, 1LL)) {
            goto LABEL_52;
          }
          if (v19 >= v42) {
            break;
          }
          unint64_t v18 = *(void *)(v11 + 56 + 8 * v19);
          ++v20;
          if (v18) {
            goto LABEL_28;
          }
        }
      }
    }

uint64_t sub_1003C7E6C(__int128 *a1, unint64_t a2, unint64_t *a3, unint64_t *a4)
{
  uint64_t v7 = a1;
  uint64_t v8 = (uint64_t)a1 + qword_1009AC788;
  swift_beginAccess((char *)a1 + qword_1009AC788, v53, 0LL, 0LL);
  if ((a2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
  }

  else if (*(void *)(*(void *)v8 + 16LL) > a2)
  {
    unint64_t v43 = a2;
    uint64_t v4 = *(void *)(*(void *)(*(void *)v8 + 8 * a2 + 32) + 16LL);
    a2 = *a3;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*a3);
    *a3 = a2;
    if ((isUniquelyReferenced_nonNull_native & 1) != 0) {
      goto LABEL_4;
    }
    goto LABEL_48;
  }

  __break(1u);
LABEL_48:
  a2 = (unint64_t)sub_1005996D8((void *)a2);
LABEL_4:
  if (*(void *)(a2 + 16) <= v43)
  {
    __break(1u);
LABEL_50:
    __break(1u);
    goto LABEL_51;
  }

  *(void *)(a2 + 8 * v43 + 32) = v4;
  *a3 = a2;
  if (!v4)
  {
    a3 = a4;
    uint64_t v7 = (__int128 *)*a4;
    uint64_t result = swift_isUniquelyReferenced_nonNull_native(*a4);
    *a4 = (unint64_t)v7;
    if ((result & 1) != 0) {
      goto LABEL_44;
    }
    goto LABEL_53;
  }

  if (*(void *)(*(void *)v8 + 16LL) <= v43) {
    goto LABEL_50;
  }
  uint64_t v10 = *(void *)((char *)v7 + qword_1009AC760);
  uint64_t v11 = (unsigned __int128)(v10 * (__int128)6LL) >> 64;
  uint64_t v12 = 6 * v10;
  if (v11 == v12 >> 63)
  {
    uint64_t v13 = *(void *)(*(void *)v8 + 8 * v43 + 32);
    uint64_t v14 = v12 / 256;
    swift_bridgeObjectRetain(v13);
    uint64_t v51 = sub_1003D8E18(v14);
    uint64_t v52 = v15;
    uint64_t v16 = 1LL << *(_BYTE *)(v13 + 32);
    uint64_t v17 = -1LL;
    if (v16 < 64) {
      uint64_t v17 = ~(-1LL << v16);
    }
    unint64_t v18 = v17 & *(void *)(v13 + 56);
    int64_t v44 = (unint64_t)(v16 + 63) >> 6;
    swift_bridgeObjectRetain(v13);
    if (v18)
    {
      unint64_t v19 = __clz(__rbit64(v18));
LABEL_29:
      uint64_t v23 = *(void *)(v13 + 48) + 24 * v19;
      uint64_t v25 = *(void *)v23;
      unint64_t v24 = *(void *)(v23 + 8);
      int v45 = *(_DWORD *)(v23 + 16);
      uint64_t v49 = &type metadata for UnsafeRawBufferPointer;
      unsigned __int8 v50 = &protocol witness table for UnsafeRawBufferPointer;
      uint64_t v47 = &v45;
      p_dst = &__dst;
      uint64_t v26 = (const void **)sub_100012ED8(&v47, (uint64_t)&type metadata for UnsafeRawBufferPointer);
      uint64_t v27 = *v26;
      if (*v26 && (uint64_t v28 = v26[1], v29 = v28 - v27, v28 != v27))
      {
        if (v29 <= 14)
        {
          *(void *)((char *)&__dst + 6) = 0LL;
          *(void *)&__int128 __dst = 0LL;
          BYTE14(__dst) = (_BYTE)v28 - (_BYTE)v27;
          memcpy(&__dst, v27, v28 - v27);
          uint64_t v30 = __dst;
          unint64_t v31 = DWORD2(__dst) | ((unint64_t)BYTE12(__dst) << 32) | ((unint64_t)BYTE13(__dst) << 40) | ((unint64_t)BYTE14(__dst) << 48);
          sub_10001736C(v25, v24);
        }

        else
        {
          uint64_t v33 = type metadata accessor for __DataStorage(0LL);
          swift_allocObject(v33, *(unsigned int *)(v33 + 48), *(unsigned __int16 *)(v33 + 52));
          sub_10001736C(v25, v24);
          uint64_t v34 = __DataStorage.init(bytes:length:)(v27, v29);
          uint64_t v35 = v34;
          if ((unint64_t)v29 >= 0x7FFFFFFF)
          {
            uint64_t v36 = type metadata accessor for Data.RangeReference(0LL);
            uint64_t v30 = swift_allocObject(v36, 32LL, 7LL);
            *(void *)(v30 + swift_weakDestroy(v0 + 16) = 0LL;
            *(void *)(v30 + 24) = v29;
            unint64_t v31 = v35 | 0x8000000000000000LL;
          }

          else
          {
            uint64_t v30 = v29 << 32;
            unint64_t v31 = v34 | 0x4000000000000000LL;
          }
        }
      }

      else
      {
        sub_10001736C(v25, v24);
        uint64_t v30 = 0LL;
        unint64_t v31 = 0xC000000000000000LL;
      }

      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(&v47);
      *(void *)&__int128 __dst = v25;
      *((void *)&__dst + 1) = v24;
      uint64_t v49 = &type metadata for Data;
      unsigned __int8 v50 = &protocol witness table for Data;
      uint64_t v47 = (int *)v30;
      p_dst = (__int128 *)v31;
      uint64_t v32 = (char *)&loc_1003C8214
          + *((int *)qword_1003C8630 + (sub_100012ED8(&v47, (uint64_t)&type metadata for Data)[1] >> 62));
      __asm { BR              X9 }
    }

    if (v44 > 1)
    {
      unint64_t v20 = *(void *)(v13 + 64);
      uint64_t v21 = 1LL;
      if (v20) {
        goto LABEL_28;
      }
      uint64_t v21 = 2LL;
      if (v44 <= 2) {
        goto LABEL_38;
      }
      unint64_t v20 = *(void *)(v13 + 72);
      if (v20) {
        goto LABEL_28;
      }
      uint64_t v21 = 3LL;
      if (v44 <= 3) {
        goto LABEL_38;
      }
      unint64_t v20 = *(void *)(v13 + 80);
      if (v20) {
        goto LABEL_28;
      }
      uint64_t v21 = 4LL;
      if (v44 <= 4) {
        goto LABEL_38;
      }
      unint64_t v20 = *(void *)(v13 + 88);
      if (v20) {
        goto LABEL_28;
      }
      uint64_t v21 = 5LL;
      if (v44 <= 5) {
        goto LABEL_38;
      }
      unint64_t v20 = *(void *)(v13 + 96);
      if (v20)
      {
LABEL_28:
        unint64_t v19 = __clz(__rbit64(v20)) + (v21 << 6);
        goto LABEL_29;
      }

      uint64_t v22 = 6LL;
      if (v44 > 6)
      {
        unint64_t v20 = *(void *)(v13 + 104);
        if (v20)
        {
          uint64_t v21 = 6LL;
          goto LABEL_28;
        }

        while (1)
        {
          uint64_t v21 = v22 + 1;
          if (__OFADD__(v22, 1LL)) {
            goto LABEL_52;
          }
          if (v21 >= v44) {
            break;
          }
          unint64_t v20 = *(void *)(v13 + 56 + 8 * v21);
          ++v22;
          if (v20) {
            goto LABEL_28;
          }
        }
      }
    }

void sub_1003C8640( uint64_t a1, uint64_t a2, void (*a3)(uint64_t), void (*a4)(void *, id *, uint64_t, uint64_t))
{
  uint64_t v28 = a4;
  uint64_t v7 = v4;
  uint64_t v10 = type metadata accessor for URL(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v27 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = objc_autoreleasePoolPush();
  a3(a1);
  if (v5)
  {
    objc_autoreleasePoolPop(v14);
  }

  else
  {
    uint64_t v16 = v15;
    objc_autoreleasePoolPop(v14);
    sub_100022898(0LL, &qword_1009AC0E0, &OBJC_CLASS___NSFileHandle_ptr);
    (*(void (**)(char *, uint64_t, uint64_t))(v11 + 16))(v13, a1, v10);
    id v17 = sub_1003C7584((uint64_t)v13, (SEL *)&selRef_fileHandleForReadingFromURL_error_);
    unint64_t v18 = v17;
    else {
      unsigned int v19 = v16;
    }
    if (v19 < *(_DWORD *)(v7 + qword_1009AC768)) {
      *(_DWORD *)(v7 + qword_1009AC768) = v19;
    }
    unint64_t v20 = v28;
    if (*(_DWORD *)(v7 + qword_1009AC770) < HIDWORD(v16)) {
      *(_DWORD *)(v7 + qword_1009AC770) = HIDWORD(v16);
    }
    id v29 = 0LL;
    unsigned int v21 = [v17 seekToOffset:4128 error:&v29];
    id v22 = v29;
    if (v21)
    {
      LOBYTE(v29) = 0;
      id v23 = v22;
      do
      {
        unint64_t v24 = objc_autoreleasePoolPush();
        v20(v18, &v29, a2, v7);
        objc_autoreleasePoolPop(v24);
      }

      while ((v29 & 1) == 0);
    }

    else
    {
      id v25 = v29;
      _convertNSErrorToError(_:)(v22);

      swift_willThrow(v26);
    }
  }

void sub_1003C8860(void *a1)
{
  id v1 = [a1 readDataOfLength:32];
  static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v3 = v2;

  __asm { BR              X10 }

uint64_t sub_1003C88D8()
{
  if (BYTE6(v2) <= 0x1FuLL)
  {
    uint64_t result = sub_100016F9C(v3, v2);
    *uint64_t v4 = 1;
    return result;
  }

  sub_10001736C(v3, v2);
  sub_1003C8D08(v3, v2);
  if (!v0)
  {
    Swift::UInt32 v7 = v21;
    uint64_t v8 = v19;
    unint64_t v9 = v20;
    if (v21 >= v5)
    {
      sub_10001736C(v19, v20);
      unsigned __int8 v12 = Data.subscript.getter(0LL);
      sub_100016F9C(v19, v20);
      if (v21 < *(_DWORD *)(v1 + qword_1009AC768)) {
        *(_DWORD *)(v1 + qword_1009AC768) = v21;
      }
      if (*(_DWORD *)(v1 + qword_1009AC770) < v7) {
        *(_DWORD *)(v1 + qword_1009AC770) = v7;
      }
      unint64_t v13 = v12;
      uint64_t v14 = (void *)(v1 + qword_1009AC788);
      swift_beginAccess(v14, v18, 33LL, 0LL);
      uint64_t v15 = (void *)*v14;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v14);
      *uint64_t v14 = v15;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v15 = sub_1005996EC(v15);
        *uint64_t v14 = v15;
      }

      if (v15[2] <= v13)
      {
        __break(1u);
        JUMPOUT(0x1003C8AA4LL);
      }

      sub_10001736C(v8, v9);
      sub_1000C0D9C((uint64_t)v17, v8, v9, v7);
      sub_100016F9C(v17[0], v17[1]);
      swift_endAccess(v18);
      sub_100016F9C(v3, v2);
      uint64_t v10 = v8;
      unint64_t v11 = v9;
      return sub_100016F9C(v10, v11);
    }

    sub_100016F9C(v19, v20);
  }

  uint64_t v10 = v3;
  unint64_t v11 = v2;
  return sub_100016F9C(v10, v11);
}

void sub_1003C8AB4(void *a1)
{
  id v1 = [a1 readDataOfLength:10];
  static Data._unconditionallyBridgeFromObjectiveC(_:)(v1);
  uint64_t v3 = v2;

  __asm { BR              X10 }

uint64_t sub_1003C8B2C()
{
  if (BYTE6(v2) <= 9uLL)
  {
    uint64_t result = sub_100016F9C(v3, v2);
    *uint64_t v4 = 1;
    return result;
  }

  sub_10001736C(v3, v2);
  sub_1003C90FC(v3, v2);
  if (!v0)
  {
    Swift::UInt32 v7 = v21;
    uint64_t v8 = v19;
    unint64_t v9 = v20;
    if (v21 >= v5)
    {
      sub_10001736C(v19, v20);
      unsigned __int8 v12 = Data.subscript.getter(0LL);
      sub_100016F9C(v19, v20);
      if (v21 < *(_DWORD *)(v1 + qword_1009AC768)) {
        *(_DWORD *)(v1 + qword_1009AC768) = v21;
      }
      if (*(_DWORD *)(v1 + qword_1009AC770) < v7) {
        *(_DWORD *)(v1 + qword_1009AC770) = v7;
      }
      unint64_t v13 = v12;
      uint64_t v14 = (void *)(v1 + qword_1009AC788);
      swift_beginAccess(v14, v18, 33LL, 0LL);
      uint64_t v15 = (void *)*v14;
      char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v14);
      *uint64_t v14 = v15;
      if ((isUniquelyReferenced_nonNull_native & 1) == 0)
      {
        uint64_t v15 = sub_100599750(v15);
        *uint64_t v14 = v15;
      }

      if (v15[2] <= v13)
      {
        __break(1u);
        JUMPOUT(0x1003C8CF8LL);
      }

      sub_10001736C(v8, v9);
      sub_1000C1EB4((uint64_t)v17, v8, v9, v7);
      sub_100016F9C(v17[0], v17[1]);
      swift_endAccess(v18);
      sub_100016F9C(v3, v2);
      uint64_t v10 = v8;
      unint64_t v11 = v9;
      return sub_100016F9C(v10, v11);
    }

    sub_100016F9C(v19, v20);
  }

  uint64_t v10 = v3;
  unint64_t v11 = v2;
  return sub_100016F9C(v10, v11);
}

void sub_1003C8D08(uint64_t a1, unint64_t a2)
{
  __asm { BR              X10 }

void sub_1003C90FC(uint64_t a1, unint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_1003C94F0(unsigned int *a1, uint64_t a2)
{
  uint64_t v3 = sub_100004AEC(&qword_1009AC0E8);
  uint64_t v4 = sub_1000372EC(&qword_1009AC0F0, &qword_1009AC0E8, (uint64_t)&unk_1007FF190);
  uint64_t v5 = swift_allocError(v3, v4, 0LL, 0LL);
  *(_DWORD *)uint64_t v6 = 1;
  *(_BYTE *)(v6 + 4) = 2;
  return swift_willThrow(v5);
}

uint64_t sub_1003C9588(unsigned int *a1, uint64_t a2)
{
  uint64_t v3 = sub_100004AEC(&qword_1009AC1E8);
  uint64_t v4 = sub_1000372EC(&qword_1009AC1F0, &qword_1009AC1E8, (uint64_t)&unk_1007FF190);
  uint64_t v5 = swift_allocError(v3, v4, 0LL, 0LL);
  *(_DWORD *)uint64_t v6 = 1;
  *(_BYTE *)(v6 + 4) = 2;
  return swift_willThrow(v5);
}

uint64_t sub_1003C9620(uint64_t a1, uint64_t a2)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v5 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v5 += a1 - result;
  }

  BOOL v6 = __OFSUB__(a2, a1);
  uint64_t v7 = a2 - a1;
  if (v6)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v8 = __DataStorage._length.getter();
  if (v8 >= v7) {
    uint64_t v9 = v7;
  }
  else {
    uint64_t v9 = v8;
  }
  uint64_t v10 = v5 + v9;
  if (v5) {
    uint64_t v11 = v10;
  }
  else {
    uint64_t v11 = 0LL;
  }
  return Data._Representation.append(contentsOf:)(v5, v11);
}

Swift::Int sub_1003C96B0(uint64_t *a1)
{
  uint64_t v2 = v1;
  uint64_t v136 = type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo(0LL);
  uint64_t v4 = *(void *)(v136 - 8);
  uint64_t v5 = __chkstk_darwin(v136);
  uint64_t v125 = (uint64_t)&v118 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = __chkstk_darwin(v5);
  uint64_t v137 = (uint64_t)&v118 - v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v132 = (uint64_t)&v118 - v10;
  __chkstk_darwin(v9);
  uint64_t v134 = (uint64_t)&v118 - v11;
  Swift::Int v12 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v12);
  if (result >= v12)
  {
    if (v12 < 0) {
      goto LABEL_138;
    }
    if (v12) {
      return sub_1003CA76C(0LL, v12, 1LL, a1);
    }
    return result;
  }

  if (v12 >= 0) {
    uint64_t v14 = v12;
  }
  else {
    uint64_t v14 = v12 + 1;
  }
  if (v12 < -1) {
    goto LABEL_146;
  }
  Swift::Int v121 = result;
  uint64_t v128 = v4;
  if (v12 < 2)
  {
    uint64_t v19 = (char *)_swiftEmptyArrayStorage;
    unint64_t v127 = (unint64_t)_swiftEmptyArrayStorage
         + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
    uint64_t v120 = _swiftEmptyArrayStorage;
    if (v12 != 1)
    {
      unint64_t v21 = _swiftEmptyArrayStorage[2];
LABEL_104:
      uint64_t v111 = v19;
      if (v21 >= 2)
      {
        uint64_t v112 = *a1;
        do
        {
          unint64_t v113 = v21 - 2;
          if (v21 < 2) {
            goto LABEL_133;
          }
          if (!v112) {
            goto LABEL_145;
          }
          uint64_t v114 = *(void *)&v111[16 * v113 + 32];
          uint64_t v115 = *(void *)&v111[16 * v21 + 24];
          sub_1003CAA40( v112 + *(void *)(v4 + 72) * v114,  v112 + *(void *)(v4 + 72) * *(void *)&v111[16 * v21 + 16],  v112 + *(void *)(v4 + 72) * v115,  v127);
          if (v2) {
            break;
          }
          if (v115 < v114) {
            goto LABEL_134;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v111) & 1) == 0) {
            uint64_t v111 = sub_1003CBA90((uint64_t)v111);
          }
          if (v113 >= *((void *)v111 + 2)) {
            goto LABEL_135;
          }
          uint64_t v116 = &v111[16 * v113 + 32];
          *(void *)uint64_t v116 = v114;
          *((void *)v116 + 1) = v115;
          unint64_t v117 = *((void *)v111 + 2);
          if (v21 > v117) {
            goto LABEL_136;
          }
          memmove(&v111[16 * v21 + 16], &v111[16 * v21 + 32], 16 * (v117 - v21));
          *((void *)v111 + 2) = v117 - 1;
          unint64_t v21 = v117 - 1;
          uint64_t v4 = v128;
        }

        while (v117 > 2);
      }

Swift::Int sub_1003CA0FC(uint64_t *a1)
{
  Swift::Int v3 = a1[1];
  Swift::Int result = _minimumMergeRunLength(_:)(v3);
  if (result >= v3)
  {
    if (v3 < 0) {
      goto LABEL_130;
    }
    if (v3) {
      return sub_1003CA9D0(0LL, v3, 1LL, a1);
    }
    return result;
  }

  if (v3 >= 0) {
    uint64_t v5 = v3;
  }
  else {
    uint64_t v5 = v3 + 1;
  }
  if (v3 < -1) {
    goto LABEL_138;
  }
  Swift::Int v6 = result;
  uint64_t v91 = a1;
  if (v3 < 2)
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
    __int128 __dst = (char *)&_swiftEmptyArrayStorage[4];
    if (v3 != 1)
    {
      unint64_t v14 = _swiftEmptyArrayStorage[2];
      unint64_t v13 = (char *)_swiftEmptyArrayStorage;
LABEL_96:
      uint64_t v83 = v13;
      uint64_t v94 = v10;
      if (v14 >= 2)
      {
        uint64_t v84 = *v91;
        do
        {
          unint64_t v85 = v14 - 2;
          if (v14 < 2) {
            goto LABEL_125;
          }
          if (!v84) {
            goto LABEL_137;
          }
          uint64_t v86 = v83;
          uint64_t v87 = *(void *)&v83[16 * v85 + 32];
          uint64_t v88 = *(void *)&v83[16 * v14 + 24];
          sub_1003CAF64( (char *)(v84 + 8 * v87),  (char *)(v84 + 8LL * *(void *)&v83[16 * v14 + 16]),  v84 + 8 * v88,  __dst);
          if (v1) {
            break;
          }
          if (v88 < v87) {
            goto LABEL_126;
          }
          if ((swift_isUniquelyReferenced_nonNull_native(v86) & 1) == 0) {
            uint64_t v86 = sub_1003CBA90((uint64_t)v86);
          }
          if (v85 >= *((void *)v86 + 2)) {
            goto LABEL_127;
          }
          uint64_t v89 = &v86[16 * v85 + 32];
          *(void *)uint64_t v89 = v87;
          *((void *)v89 + 1) = v88;
          unint64_t v90 = *((void *)v86 + 2);
          if (v14 > v90) {
            goto LABEL_128;
          }
          memmove(&v86[16 * v14 + 16], &v86[16 * v14 + 32], 16 * (v90 - v14));
          uint64_t v83 = v86;
          *((void *)v86 + 2) = v90 - 1;
          unint64_t v14 = v90 - 1;
        }

        while (v90 > 2);
      }

LABEL_93:
      swift_bridgeObjectRelease();
      id v94[2] = 0LL;
      return swift_bridgeObjectRelease();
    }

    uint64_t v94 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = sub_100004AEC(&qword_1009A0AE0);
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(void *)(v9 + swift_weakDestroy(v0 + 16) = v7;
    uint64_t v94 = (void *)v9;
    __int128 __dst = (char *)(v9 + 32);
  }

  Swift::Int v11 = 0LL;
  uint64_t v12 = *a1;
  uint64_t v92 = *a1 - 8;
  uint64_t v93 = *a1 + 16;
  unint64_t v13 = (char *)_swiftEmptyArrayStorage;
  Swift::Int v95 = v6;
  Swift::Int v96 = v3;
  uint64_t v97 = v12;
  while (1)
  {
    Swift::Int v15 = v11++;
    if (v11 < v3)
    {
      unsigned int v16 = *(_DWORD *)(v12 + 8 * v11);
      unsigned int v17 = *(_DWORD *)(v12 + 8 * v15);
      Swift::Int v11 = v15 + 2;
      if (v15 + 2 < v3)
      {
        uint64_t v18 = (unsigned int *)(v93 + 8 * v15);
        unsigned int v19 = v16;
        while (1)
        {
          unsigned int v21 = *v18;
          v18 += 2;
          unsigned int v20 = v21;
          if (v16 < v17 == v21 >= v19) {
            break;
          }
          ++v11;
          unsigned int v19 = v20;
          if (v3 == v11)
          {
            Swift::Int v11 = v3;
            break;
          }
        }
      }

      if (v16 < v17)
      {
        if (v11 < v15) {
          goto LABEL_131;
        }
        if (v15 < v11)
        {
          Swift::Int v22 = (uint64_t *)(v92 + 8 * v11);
          Swift::Int v23 = v11;
          Swift::Int v24 = v15;
          uint64_t v25 = (uint64_t *)(v12 + 8 * v15);
          do
          {
            if (v24 != --v23)
            {
              if (!v12) {
                goto LABEL_136;
              }
              uint64_t v26 = *v25;
              *uint64_t v25 = *v22;
              *Swift::Int v22 = v26;
            }

            ++v24;
            --v22;
            ++v25;
          }

          while (v24 < v23);
        }
      }
    }

    if (v11 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v11, v15)) {
      goto LABEL_129;
    }
    if (v11 - v15 >= v6) {
      goto LABEL_46;
    }
    Swift::Int v27 = v15 + v6;
    if (__OFADD__(v15, v6)) {
      goto LABEL_132;
    }
    if (v27 >= v3) {
      Swift::Int v27 = v3;
    }
    if (v27 < v15) {
      break;
    }
    if (v11 != v27)
    {
      uint64_t v28 = v92 + 8 * v11;
      do
      {
        unsigned int v29 = *(_DWORD *)(v12 + 8 * v11);
        Swift::Int v30 = v15;
        uint64_t v31 = v28;
        do
        {
          if (v29 >= *(_DWORD *)v31) {
            break;
          }
          if (!v12) {
            goto LABEL_134;
          }
          int v32 = *(_DWORD *)(v31 + 12);
          *(void *)(v31 + 8) = *(void *)v31;
          *(_DWORD *)uint64_t v31 = v29;
          *(_DWORD *)(v31 + 4) = v32;
          v31 -= 8LL;
          ++v30;
        }

        while (v11 != v30);
        ++v11;
        v28 += 8LL;
      }

      while (v11 != v27);
      Swift::Int v11 = v27;
    }

      swift_bridgeObjectRelease();
      v111[2] = 0LL;
      return swift_bridgeObjectRelease();
    }

    uint64_t v111 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = sub_100004AEC(&qword_10099D378);
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(void *)(v9 + swift_weakDestroy(v0 + 16) = v7;
    uint64_t v111 = (void *)v9;
    __int128 __dst = (char *)(v9 + 32);
  }

  Swift::Int v11 = 0LL;
  uint64_t v12 = *a1;
  unint64_t v110 = *a1 + 88;
  unint64_t v13 = (char *)_swiftEmptyArrayStorage;
  uint64_t v112 = v6;
  unint64_t v113 = v3;
  uint64_t v114 = v12;
  while (1)
  {
    Swift::Int v15 = v11++;
    if (v11 < v3)
    {
      unsigned int v16 = *(void *)(v12 + 32 * v11 + 24);
      unsigned int v17 = *(void *)(v12 + 32 * v15 + 24);
      Swift::Int v11 = v15 + 2;
      if (v15 + 2 < v3)
      {
        uint64_t v18 = (uint64_t *)(v110 + 32 * v15);
        unsigned int v19 = v16;
        while (1)
        {
          unsigned int v21 = *v18;
          v18 += 4;
          unsigned int v20 = v21;
          if (v17 < v16 == v19 >= v21) {
            break;
          }
          ++v11;
          unsigned int v19 = v20;
          if (v3 == v11)
          {
            Swift::Int v11 = v3;
            break;
          }
        }
      }

      if (v17 < v16)
      {
        if (v11 < v15) {
          goto LABEL_137;
        }
        if (v15 < v11)
        {
          Swift::Int v22 = 32 * v11;
          Swift::Int v23 = 32 * v15;
          Swift::Int v24 = v11;
          uint64_t v25 = v15;
          do
          {
            if (v25 != --v24)
            {
              if (!v12) {
                goto LABEL_143;
              }
              uint64_t v26 = (_OWORD *)(v12 + v23);
              Swift::Int v27 = v12 + v22;
              uint64_t v28 = *(void *)(v12 + v23 + 16);
              unsigned int v29 = *(void *)(v12 + v23 + 24);
              Swift::Int v30 = *(_OWORD *)(v12 + v23);
              uint64_t v31 = *(_OWORD *)(v12 + v22 - 16);
              _BYTE *v26 = *(_OWORD *)(v12 + v22 - 32);
              v26[1] = v31;
              *(_OWORD *)(v27 - 32) = v30;
              *(void *)(v27 - swift_weakDestroy(v0 + 16) = v28;
              *(void *)(v27 - 8) = v29;
            }

            ++v25;
            v22 -= 32LL;
            v23 += 32LL;
          }

          while (v25 < v24);
        }
      }
    }

    if (v11 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v11, v15)) {
      goto LABEL_135;
    }
    if (v11 - v15 >= v6) {
      goto LABEL_46;
    }
    int v32 = v15 + v6;
    if (__OFADD__(v15, v6)) {
      goto LABEL_138;
    }
    if (v32 >= v3) {
      int v32 = v3;
    }
    if (v32 < v15) {
      break;
    }
    if (v11 != v32)
    {
      unint64_t v33 = (__int128 *)(v12 + 32 * v11);
      do
      {
        unint64_t v34 = *(void *)(v12 + 32 * v11 + 24);
        Swift::Int v35 = v15;
        uint64_t v36 = v33;
        do
        {
          if (*((void *)v36 - 1) >= v34) {
            break;
          }
          if (!v12) {
            goto LABEL_141;
          }
          unint64_t v37 = *((void *)v36 + 2);
          uint64_t v38 = *v36;
          uint64_t v39 = *(v36 - 1);
          *uint64_t v36 = *(v36 - 2);
          v36[1] = v39;
          *((void *)v36 - 2) = v37;
          *((void *)v36 - 1) = v34;
          *(v36 - 2) = v38;
          v36 -= 2;
          ++v35;
        }

        while (v11 != v35);
        ++v11;
        v33 += 2;
      }

      while (v11 != v32);
      Swift::Int v11 = v32;
    }

      swift_bridgeObjectRelease();
      v108[2] = 0LL;
      return swift_bridgeObjectRelease();
    }

    uint64_t v108 = _swiftEmptyArrayStorage;
  }

  else
  {
    uint64_t v7 = v5 >> 1;
    uint64_t v8 = sub_100004AEC(&qword_10099D4F8);
    uint64_t v9 = static Array._allocateBufferUninitialized(minimumCapacity:)(v7, v8);
    *(void *)(v9 + swift_weakDestroy(v0 + 16) = v7;
    uint64_t v108 = (void *)v9;
    __int128 __dst = (char *)(v9 + 32);
  }

  Swift::Int v11 = 0LL;
  uint64_t v12 = *a1;
  uint64_t v107 = *a1 + 64;
  unint64_t v13 = (char *)_swiftEmptyArrayStorage;
  uint64_t v109 = v6;
  unint64_t v110 = v3;
  uint64_t v111 = v12;
  while (1)
  {
    Swift::Int v15 = v11++;
    if (v11 < v3)
    {
      unsigned int v16 = *(void *)(v12 + 24 * v11 + 16);
      unsigned int v17 = *(void *)(v12 + 24 * v15 + 16);
      Swift::Int v11 = v15 + 2;
      if (v15 + 2 < v3)
      {
        uint64_t v18 = (unint64_t *)(v107 + 24 * v15);
        unsigned int v19 = v16;
        while (1)
        {
          unsigned int v21 = *v18;
          v18 += 3;
          unsigned int v20 = v21;
          if (v16 < v17 == v21 >= v19) {
            break;
          }
          ++v11;
          unsigned int v19 = v20;
          if (v3 == v11)
          {
            Swift::Int v11 = v3;
            break;
          }
        }
      }

      if (v16 < v17)
      {
        if (v11 < v15) {
          goto LABEL_137;
        }
        if (v15 < v11)
        {
          Swift::Int v22 = 24 * v11;
          Swift::Int v23 = 24 * v15;
          Swift::Int v24 = v11;
          uint64_t v25 = v15;
          do
          {
            if (v25 != --v24)
            {
              if (!v12) {
                goto LABEL_143;
              }
              uint64_t v26 = v12 + v23;
              Swift::Int v27 = v12 + v22;
              uint64_t v28 = *(_OWORD *)(v12 + v23);
              unsigned int v29 = *(void *)(v12 + v23 + 16);
              Swift::Int v30 = *(void *)(v12 + v22 - 8);
              *(_OWORD *)uint64_t v26 = *(_OWORD *)(v12 + v22 - 24);
              *(void *)(v26 + swift_weakDestroy(v0 + 16) = v30;
              *(_OWORD *)(v27 - 24) = v28;
              *(void *)(v27 - 8) = v29;
            }

            ++v25;
            v22 -= 24LL;
            v23 += 24LL;
          }

          while (v25 < v24);
        }
      }
    }

    if (v11 >= v3) {
      goto LABEL_46;
    }
    if (__OFSUB__(v11, v15)) {
      goto LABEL_135;
    }
    if (v11 - v15 >= v6) {
      goto LABEL_46;
    }
    uint64_t v31 = v15 + v6;
    if (__OFADD__(v15, v6)) {
      goto LABEL_138;
    }
    if (v31 >= v3) {
      uint64_t v31 = v3;
    }
    if (v31 < v15) {
      break;
    }
    if (v11 != v31)
    {
      int v32 = (uint64_t *)(v12 + 24 * v11);
      do
      {
        unint64_t v33 = *(void *)(v12 + 24 * v11 + 16);
        unint64_t v34 = v15;
        Swift::Int v35 = v32;
        do
        {
          if (v33 >= *(v35 - 1)) {
            break;
          }
          if (!v12) {
            goto LABEL_141;
          }
          uint64_t v36 = *v35;
          unint64_t v37 = v35[1];
          *(_OWORD *)Swift::Int v35 = *(_OWORD *)(v35 - 3);
          v35[2] = *(v35 - 1);
          *(v35 - 2) = v37;
          *(v35 - 1) = v33;
          *(v35 - 3) = v36;
          v35 -= 3;
          ++v34;
        }

        while (v11 != v34);
        ++v11;
        v32 += 3;
      }

      while (v11 != v31);
      Swift::Int v11 = v31;
    }

        __break(1u);
        goto LABEL_94;
      }

      (*(void (**)(_BYTE *, uint64_t))(v58 + 8))(v64, v57);
LABEL_71:
      swift_bridgeObjectRelease();
      goto LABEL_72;
    }

LABEL_77:
        if ((v60 & 1) != 0) {
          goto LABEL_117;
        }
        char v68 = &v35[16 * v37];
        uint64_t v70 = *(void *)v68;
        uint64_t v69 = *((void *)v68 + 1);
        BOOL v48 = __OFSUB__(v69, v70);
        uint64_t v71 = v69 - v70;
        if (v48) {
          goto LABEL_120;
        }
        if (v71 < v59) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v76 = v37 - 1;
        if (v37 - 1 >= v14)
        {
          __break(1u);
LABEL_110:
          __break(1u);
LABEL_111:
          __break(1u);
LABEL_112:
          __break(1u);
LABEL_113:
          __break(1u);
LABEL_114:
          __break(1u);
LABEL_115:
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
          goto LABEL_133;
        }

        if (!v12) {
          goto LABEL_135;
        }
        uint64_t v77 = &v35[16 * v76];
        uint64_t v78 = *(void *)v77;
        uint64_t v79 = &v35[16 * v37];
        uint64_t v80 = *((void *)v79 + 1);
        sub_1003CAF64((char *)(v12 + 8LL * *(void *)v77), (char *)(v12 + 8LL * *(void *)v79), v12 + 8 * v80, __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v80 < v78) {
          goto LABEL_110;
        }
        if (v37 > *((void *)v13 + 2)) {
          goto LABEL_111;
        }
        *(void *)uint64_t v77 = v78;
        *(void *)&v35[16 * v76 + 8] = v80;
        unint64_t v81 = *((void *)v13 + 2);
        if (v37 >= v81) {
          goto LABEL_112;
        }
        unint64_t v14 = v81 - 1;
        memmove(&v35[16 * v37], v79 + 16, 16 * (v81 - 1 - v37));
        *((void *)v13 + 2) = v81 - 1;
        uint64_t v12 = v97;
        if (v81 <= 2) {
          goto LABEL_15;
        }
      }
    }

    unint64_t v14 = 1LL;
LABEL_15:
    Swift::Int v6 = v95;
    Swift::Int v3 = v96;
    if (v11 >= v96)
    {
      uint64_t v10 = v94;
      goto LABEL_96;
    }
  }

    v270 = v275;
    sub_10001581C((uint64_t)v146 + v149[5], v275, &qword_10099D8A0);
    sub_100018C68((uint64_t)v146, type metadata accessor for SharedBeaconRecord.PropertyListContent);
    if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(v311 + 48))(v270, 1LL, v148) == 1)
    {
      uint64_t v257 = 0LL;
    }

    else
    {
      uint64_t v257 = UUID._bridgeToObjectiveC()().super.isa;
      v326((char *)v270, (uint64_t)v148);
    }

    goto LABEL_80;
  }

  v241(v225, 0LL, 1LL, v224);
  sub_10002218C(v225, v223, type metadata accessor for OwnedBeaconRecord);
  sub_1006DD1E4();
  uint64_t v242 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  [v38 setStableIdentifier:v242];

  uint64_t v243 = v280;
  sub_10001581C(v223 + v224[7], v280, &qword_10099D8A0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, char *))(v311 + 48))(v243, 1LL, v148) == 1)
  {
    uint64_t v244 = 0LL;
  }

  else
  {
    uint64_t v244 = UUID._bridgeToObjectiveC()().super.isa;
    v326((char *)v243, (uint64_t)v148);
  }

  [v38 setGroupIdentifier:v244];

  sub_10054F7E4(v223);
  if (v264)
  {
    uint64_t v265 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v265 = 0LL;
  }

  [v38 setSerialNumber:v265];

  [v38 setPartIdentifier:sub_10054FA7C(v223)];
  [v38 setBatteryLevel:*(unsigned __int8 *)(v223 + v224[19])];
  [v38 setIsZeus:*(unsigned __int8 *)(v223 + v224[20])];
  if (qword_10099B618 != -1) {
    swift_once(&qword_10099B618, sub_1005D3D24);
  }
  [v38 setOwner:qword_100A2AE98];
  [v38 setAccepted:1];
  uint64_t v267 = String._bridgeToObjectiveC()();
  [v38 setCorrelationIdentifier:v267];

  [v38 setInternalShareType:-1];
  [v38 setOwnerBeaconIdentifier:0];
  swift_bridgeObjectRelease();
  swift_release(v147);
  uint64_t v268 = (void (*)(char *, uint64_t))v315;
  v315((uint64_t)v332, v99);
  sub_100018C68(v223, type metadata accessor for OwnedBeaconRecord);
  sub_100015794((uint64_t)v316, &qword_1009A2438);
  v268(v313, v99);
  sub_100015794((uint64_t)v314, &qword_1009A1800);
  v269 = v222;
LABEL_81:
  v326(v269, (uint64_t)v148);
LABEL_82:
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v342);
  return v38;
}

        if ((v67 & 1) != 0) {
          goto LABEL_123;
        }
        uint64_t v75 = &v42[16 * v44];
        uint64_t v77 = *(void *)v75;
        unint64_t v76 = *((void *)v75 + 1);
        uint64_t v55 = __OFSUB__(v76, v77);
        uint64_t v78 = v76 - v77;
        if (v55) {
          goto LABEL_126;
        }
        if (v78 < v66) {
          goto LABEL_15;
        }
LABEL_85:
        uint64_t v83 = v44 - 1;
        if (v44 - 1 >= v14)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }

        if (!v12) {
          goto LABEL_142;
        }
        uint64_t v84 = v13;
        unint64_t v85 = &v42[16 * v83];
        uint64_t v86 = *(void *)v85;
        uint64_t v87 = &v42[16 * v44];
        uint64_t v88 = *((void *)v87 + 1);
        sub_10057B428( (char *)(v12 + 32LL * *(void *)v85),  (char *)(v12 + 32LL * *(void *)v87),  v12 + 32 * v88,  __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v88 < v86) {
          goto LABEL_116;
        }
        if (v44 > *((void *)v84 + 2)) {
          goto LABEL_117;
        }
        *(void *)unint64_t v85 = v86;
        *(void *)&v42[16 * v83 + 8] = v88;
        uint64_t v89 = *((void *)v84 + 2);
        if (v44 >= v89) {
          goto LABEL_118;
        }
        unint64_t v13 = v84;
        unint64_t v14 = v89 - 1;
        memmove(&v42[16 * v44], v87 + 16, 16 * (v89 - 1 - v44));
        *((void *)v84 + 2) = v89 - 1;
        uint64_t v12 = v114;
        if (v89 <= 2) {
          goto LABEL_15;
        }
      }
    }

    unint64_t v14 = 1LL;
LABEL_15:
    Swift::Int v6 = v112;
    Swift::Int v3 = v113;
    if (v11 >= v113)
    {
      uint64_t v10 = v111;
      goto LABEL_102;
    }
  }

  swift_release();
  BOOL v65 = v49[2];
  if (!v65) {
    goto LABEL_86;
  }
  uint64_t v66 = v49[4];
  uint64_t v67 = *((_BYTE *)v49 + 40);
  char v68 = v65 - 1;
  if (v68)
  {
    uint64_t v69 = v49 + 7;
    do
    {
      uint64_t v70 = *((void *)v69 - 1);
      uint64_t v71 = v66 >= v70;
      uint64_t v73 = *v69;
      v69 += 16;
      uint64_t v72 = v73;
      if (v66 <= v70) {
        uint64_t v66 = v70;
      }
      if (!v71) {
        uint64_t v67 = v72;
      }
      --v68;
    }

    while (v68);
  }

  swift_release();
  v195._countAndFlagsBits = 0LL;
  v195._object = (void *)0xE000000000000000LL;
  _StringGuts.grow(_:)(26LL);
  v74._countAndFlagsBits = 0xD000000000000013LL;
  v74._object = (void *)0x800000010086ADF0LL;
  String.append(_:)(v74);
  uint64_t v193 = v38;
  char v194 = v39;
  uint64_t v75 = sub_100004AEC(&qword_1009B6F50);
  _print_unlocked<A, B>(_:_:)( &v193,  &v195,  v75,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v76._countAndFlagsBits = 45LL;
  v76._object = (void *)0xE100000000000000LL;
  String.append(_:)(v76);
  uint64_t v193 = v66;
  char v194 = v67;
  _print_unlocked<A, B>(_:_:)( &v193,  &v195,  v75,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v77._countAndFlagsBits = 8236LL;
  v77._object = (void *)0xE200000000000000LL;
  String.append(_:)(v77);
  String.append(_:)(v195);
  swift_bridgeObjectRelease();
LABEL_87:
  uint64_t v78 = 1LL << *(_BYTE *)(v198 + 32);
  uint64_t v79 = -1LL;
  if (v78 < 64) {
    uint64_t v79 = ~(-1LL << v78);
  }
  uint64_t v80 = v79 & *(void *)(v198 + 64);
  unint64_t v81 = (unint64_t)(v78 + 63) >> 6;
  swift_bridgeObjectRetain(v198);
  id v82 = 0LL;
  uint64_t v83 = _swiftEmptyArrayStorage;
  if (v80) {
    goto LABEL_94;
  }
LABEL_95:
  uint64_t v89 = v82 + 1;
  if (__OFADD__(v82, 1LL)) {
    goto LABEL_186;
  }
  if (v89 >= v81) {
    goto LABEL_123;
  }
  unint64_t v90 = *(void *)(v27 + 8 * v89);
  ++v82;
  if (v90) {
    goto LABEL_112;
  }
  id v82 = v89 + 1;
  if (v89 + 1 >= v81) {
    goto LABEL_123;
  }
  unint64_t v90 = *(void *)(v27 + 8 * v82);
  if (v90) {
    goto LABEL_112;
  }
  id v82 = v89 + 2;
  if (v89 + 2 >= v81) {
    goto LABEL_123;
  }
  unint64_t v90 = *(void *)(v27 + 8 * v82);
  if (v90) {
    goto LABEL_112;
  }
  id v82 = v89 + 3;
  if (v89 + 3 >= v81) {
    goto LABEL_123;
  }
  unint64_t v90 = *(void *)(v27 + 8 * v82);
  if (v90) {
    goto LABEL_112;
  }
  id v82 = v89 + 4;
  if (v89 + 4 >= v81) {
    goto LABEL_123;
  }
  unint64_t v90 = *(void *)(v27 + 8 * v82);
  if (v90)
  {
LABEL_112:
    uint64_t v80 = (v90 - 1) & v90;
    for (k = __clz(__rbit64(v90)) + (v82 << 6); ; k = v87 | (v82 << 6))
    {
      uint64_t v92 = *(void *)(v198 + 56) + 16 * k;
      uint64_t v93 = *(void *)v92;
      uint64_t v94 = *(unsigned __int8 *)(v92 + 8);
      if (*(_BYTE *)(v92 + 8))
      {
        if (v94 != 2)
        {
          swift_bridgeObjectRelease();
          goto LABEL_117;
        }

        unint64_t v85 = 0x6F4C657275636553LL;
        uint64_t v84 = 0xEF736E6F69746163LL;
      }

      else
      {
        uint64_t v84 = 0xE700000000000000LL;
        unint64_t v85 = 0x7972616D697250LL;
      }

      uint64_t v86 = _stringCompareWithSmolCheck(_:_:expecting:)(v85, v84, 0x7261646E6F636553LL, 0xE900000000000079LL, 0LL);
      swift_bridgeObjectRelease();
      if ((v86 & 1) == 0)
      {
        if (!v80) {
          goto LABEL_95;
        }
        goto LABEL_94;
      }

        if ((v65 & 1) != 0) {
          goto LABEL_123;
        }
        uint64_t v73 = &v40[16 * v42];
        uint64_t v75 = *(void *)v73;
        uint64_t v74 = *((void *)v73 + 1);
        uint64_t v53 = __OFSUB__(v74, v75);
        unint64_t v76 = v74 - v75;
        if (v53) {
          goto LABEL_126;
        }
        if (v76 < v64) {
          goto LABEL_15;
        }
LABEL_85:
        unint64_t v81 = v42 - 1;
        if (v42 - 1 >= v14)
        {
          __break(1u);
LABEL_116:
          __break(1u);
LABEL_117:
          __break(1u);
LABEL_118:
          __break(1u);
LABEL_119:
          __break(1u);
LABEL_120:
          __break(1u);
LABEL_121:
          __break(1u);
LABEL_122:
          __break(1u);
LABEL_123:
          __break(1u);
LABEL_124:
          __break(1u);
LABEL_125:
          __break(1u);
LABEL_126:
          __break(1u);
LABEL_127:
          __break(1u);
LABEL_128:
          __break(1u);
LABEL_129:
          __break(1u);
LABEL_130:
          __break(1u);
LABEL_131:
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
          goto LABEL_139;
        }

        if (!v12) {
          goto LABEL_142;
        }
        id v82 = v13;
        uint64_t v83 = &v40[16 * v81];
        uint64_t v84 = *(void *)v83;
        unint64_t v85 = &v40[16 * v42];
        uint64_t v86 = *((void *)v85 + 1);
        sub_100600A38( (char *)(v12 + 24LL * *(void *)v83),  (char *)(v12 + 24LL * *(void *)v85),  v12 + 24 * v86,  __dst);
        if (v1) {
          goto LABEL_93;
        }
        if (v86 < v84) {
          goto LABEL_116;
        }
        if (v42 > *((void *)v82 + 2)) {
          goto LABEL_117;
        }
        *(void *)uint64_t v83 = v84;
        *(void *)&v40[16 * v81 + 8] = v86;
        uint64_t v87 = *((void *)v82 + 2);
        if (v42 >= v87) {
          goto LABEL_118;
        }
        unint64_t v13 = v82;
        unint64_t v14 = v87 - 1;
        memmove(&v40[16 * v42], v85 + 16, 16 * (v87 - 1 - v42));
        *((void *)v82 + 2) = v87 - 1;
        uint64_t v12 = v111;
        if (v87 <= 2) {
          goto LABEL_15;
        }
      }
    }

    unint64_t v14 = 1LL;
LABEL_15:
    Swift::Int v6 = v109;
    Swift::Int v3 = v110;
    if (v11 >= v110)
    {
      uint64_t v10 = v108;
      goto LABEL_102;
    }
  }

LABEL_133:
  __break(1u);
LABEL_134:
  __break(1u);
LABEL_135:
  __break(1u);
LABEL_136:
  __break(1u);
LABEL_137:
  __break(1u);
LABEL_138:
  Swift::Int result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Can't construct Array with count < 0",  36LL,  2LL,  "Swift/Array.swift",  17LL,  2,  936LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_1003CA76C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  uint64_t v38 = a1;
  uint64_t v46 = type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo(0LL);
  uint64_t v7 = __chkstk_darwin(v46);
  uint64_t v47 = (uint64_t)&v36 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v42 = (uint64_t)&v36 - v10;
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v41 = (uint64_t)&v36 - v13;
  uint64_t v45 = a3;
  uint64_t v37 = a2;
  if (a3 != a2)
  {
    uint64_t v14 = *(void *)(v12 + 72);
    uint64_t v39 = v42 + 8;
    uint64_t v40 = v41 + 8;
    uint64_t v15 = v14 * (v45 - 1);
    uint64_t v43 = v14;
    uint64_t v16 = v14 * v45;
    unsigned int v17 = type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo;
    unint64_t v49 = a4;
LABEL_5:
    uint64_t v18 = 0LL;
    uint64_t v19 = v38;
    uint64_t v44 = v16;
    while (1)
    {
      uint64_t v21 = *v49;
      uint64_t v22 = v16 + v18 + *v49;
      uint64_t v23 = v41;
      sub_10001DC4C(v22, v41, v17);
      uint64_t v24 = v15 + v18 + v21;
      uint64_t v25 = v15;
      uint64_t v26 = v42;
      sub_10001DC4C(v24, v42, v17);
      uint64_t v27 = *(int *)(v46 + 20);
      unsigned int v48 = *(_DWORD *)(v40 + v27);
      uint64_t v28 = v17;
      unsigned int v29 = *(_DWORD *)(v39 + v27);
      uint64_t v30 = v26;
      uint64_t v15 = v25;
      sub_100018C68(v30, v28);
      uint64_t v31 = v23;
      uint64_t v16 = v44;
      uint64_t result = sub_100018C68(v31, v28);
      BOOL v32 = v48 >= v29;
      unsigned int v17 = v28;
      if (v32)
      {
LABEL_4:
        v15 += v43;
        v16 += v43;
        if (++v45 == v37) {
          return result;
        }
        goto LABEL_5;
      }

      uint64_t v33 = *v49;
      if (!*v49) {
        break;
      }
      uint64_t v34 = v33 + v16 + v18;
      uint64_t v35 = v33 + v15 + v18;
      sub_10002218C(v34, v47, v28);
      swift_arrayInitWithTakeFrontToBack(v34, v35, 1LL, v46);
      uint64_t v20 = v35;
      unsigned int v17 = v28;
      uint64_t result = sub_10002218C(v47, v20, v28);
      v18 -= v43;
      if (v45 == ++v19) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_1003CA9D0(uint64_t result, uint64_t a2, uint64_t a3, uint64_t *a4)
{
  if (a3 != a2)
  {
    uint64_t v4 = *a4;
    uint64_t v5 = *a4 + 8 * a3 - 8;
LABEL_5:
    unsigned int v6 = *(_DWORD *)(v4 + 8 * a3);
    uint64_t v7 = result;
    uint64_t v8 = v5;
    while (1)
    {
      if (v6 >= *(_DWORD *)v8)
      {
LABEL_4:
        ++a3;
        v5 += 8LL;
        if (a3 == a2) {
          return result;
        }
        goto LABEL_5;
      }

      if (!v4) {
        break;
      }
      int v9 = *(_DWORD *)(v8 + 12);
      *(void *)(v8 + 8) = *(void *)v8;
      *(_DWORD *)uint64_t v8 = v6;
      *(_DWORD *)(v8 + 4) = v9;
      v8 -= 8LL;
      if (a3 == ++v7) {
        goto LABEL_4;
      }
    }

    __break(1u);
  }

  return result;
}

uint64_t sub_1003CAA40(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  uint64_t v53 = type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo(0LL);
  uint64_t v8 = __chkstk_darwin(v53);
  uint64_t v56 = (uint64_t)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v55 = (uint64_t)&v48 - v10;
  uint64_t v12 = *(void *)(v11 + 72);
  if (!v12)
  {
    __break(1u);
LABEL_68:
    __break(1u);
LABEL_69:
    __break(1u);
    goto LABEL_70;
  }

  if (a2 - a1 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_68;
  }
  int64_t v13 = a3 - a2;
  if (a3 - a2 == 0x8000000000000000LL && v12 == -1) {
    goto LABEL_69;
  }
  uint64_t v14 = (uint64_t)(a2 - a1) / v12;
  unint64_t v59 = a1;
  unint64_t v58 = a4;
  uint64_t v15 = v13 / v12;
  if (v14 >= v13 / v12)
  {
    if ((v15 & 0x8000000000000000LL) == 0)
    {
      uint64_t v18 = v15 * v12;
      if (a4 < a2 || a2 + v18 <= a4)
      {
        uint64_t v19 = v53;
        swift_arrayInitWithTakeFrontToBack(a4, a2, v15, v53);
      }

      else
      {
        uint64_t v19 = v53;
        if (a4 != a2) {
          swift_arrayInitWithTakeBackToFront(a4, a2);
        }
      }

      unint64_t v32 = a4 + v18;
      unint64_t v57 = a4 + v18;
      unint64_t v59 = a2;
      if (v18 >= 1 && a1 < a2)
      {
        uint64_t v34 = -v12;
        uint64_t v50 = v56 + 8;
        uint64_t v51 = v55 + 8;
        unint64_t v49 = a4;
        unint64_t v52 = a1;
        do
        {
          unint64_t v54 = a3 + v34;
          uint64_t v35 = v55;
          sub_10001DC4C(v32 + v34, v55, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          unint64_t v36 = a2 + v34;
          unint64_t v37 = a3;
          uint64_t v38 = v56;
          sub_10001DC4C(a2 + v34, v56, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          uint64_t v39 = *(int *)(v19 + 20);
          unsigned int v40 = *(_DWORD *)(v51 + v39);
          unsigned int v41 = *(_DWORD *)(v50 + v39);
          sub_100018C68(v38, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          sub_100018C68(v35, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
          if (v40 >= v41)
          {
            unint64_t v45 = v57;
            unint64_t v46 = v57 + v34;
            v57 += v34;
            a3 = v54;
            if (v37 < v45 || v54 >= v45)
            {
              uint64_t v19 = v53;
              swift_arrayInitWithTakeFrontToBack(v54, v46, 1LL, v53);
              unint64_t v36 = a2;
              unint64_t v44 = v49;
              unint64_t v43 = v52;
            }

            else
            {
              unint64_t v43 = v52;
              uint64_t v19 = v53;
              if (v37 != v45) {
                swift_arrayInitWithTakeBackToFront(v54, v46);
              }
              unint64_t v36 = a2;
              unint64_t v44 = v49;
            }
          }

          else
          {
            a3 = v54;
            if (v37 < a2 || v54 >= a2)
            {
              uint64_t v19 = v53;
              swift_arrayInitWithTakeFrontToBack(v54, a2 + v34, 1LL, v53);
              unint64_t v44 = v49;
              unint64_t v43 = v52;
            }

            else
            {
              BOOL v42 = v37 == a2;
              unint64_t v43 = v52;
              uint64_t v19 = v53;
              unint64_t v44 = v49;
              if (!v42) {
                swift_arrayInitWithTakeBackToFront(v54, a2 + v34);
              }
            }

            v59 += v34;
          }

          unint64_t v32 = v57;
          if (v57 <= v44) {
            break;
          }
          a2 = v36;
        }

        while (v36 > v43);
      }

      goto LABEL_66;
    }
  }

  else if ((v14 & 0x8000000000000000LL) == 0)
  {
    uint64_t v16 = v14 * v12;
    if (a4 < a1 || a1 + v16 <= a4)
    {
      uint64_t v17 = v53;
      swift_arrayInitWithTakeFrontToBack(a4, a1, v14, v53);
    }

    else
    {
      uint64_t v17 = v53;
      if (a4 != a1) {
        swift_arrayInitWithTakeBackToFront(a4, a1);
      }
    }

    unint64_t v54 = a4 + v16;
    unint64_t v57 = a4 + v16;
    if (v16 >= 1 && a2 < a3)
    {
      unint64_t v52 = v56 + 8;
      uint64_t v53 = v55 + 8;
      do
      {
        unint64_t v21 = a3;
        uint64_t v22 = v55;
        sub_10001DC4C(a2, v55, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        uint64_t v23 = v56;
        sub_10001DC4C(a4, v56, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        uint64_t v24 = *(int *)(v17 + 20);
        unsigned int v25 = *(_DWORD *)(v53 + v24);
        unsigned int v26 = *(_DWORD *)(v52 + v24);
        sub_100018C68(v23, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        sub_100018C68(v22, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        unint64_t v27 = v59;
        if (v25 >= v26)
        {
          unint64_t v30 = v58 + v12;
          if (v59 < v58 || v59 >= v30)
          {
            swift_arrayInitWithTakeFrontToBack(v59, v58, 1LL, v17);
            a3 = v21;
          }

          else
          {
            a3 = v21;
            if (v59 != v58) {
              swift_arrayInitWithTakeBackToFront(v59, v58);
            }
          }

          unint64_t v58 = v30;
          unint64_t v28 = a2;
        }

        else
        {
          unint64_t v28 = a2 + v12;
          if (v59 < a2 || v59 >= v28)
          {
            swift_arrayInitWithTakeFrontToBack(v59, a2, 1LL, v17);
            a3 = v21;
          }

          else
          {
            a3 = v21;
            if (v59 == a2) {
              unint64_t v27 = a2;
            }
            else {
              swift_arrayInitWithTakeBackToFront(v59, a2);
            }
          }
        }

        unint64_t v59 = v27 + v12;
        a4 = v58;
        if (v58 >= v54) {
          break;
        }
        a2 = v28;
      }

      while (v28 < a3);
    }

uint64_t sub_1003CAF64(char *__src, char *a2, unint64_t a3, char *__dst)
{
  uint64_t v4 = __dst;
  unsigned int v6 = a2;
  uint64_t v7 = __src;
  int64_t v8 = a2 - __src;
  int64_t v9 = a2 - __src + 7;
  if (a2 - __src >= 0) {
    int64_t v9 = a2 - __src;
  }
  uint64_t v10 = v9 >> 3;
  uint64_t v11 = a3 - (void)a2;
  uint64_t v12 = a3 - (void)a2 + 7;
  uint64_t v13 = v12 >> 3;
  uint64_t v24 = __src;
  uint64_t v23 = __dst;
  if (v10 >= v12 >> 3)
  {
    if (v11 >= -7)
    {
      if (__dst != a2 || &a2[8 * v13] <= __dst) {
        memmove(__dst, a2, 8 * v13);
      }
      uint64_t v16 = &v4[8 * v13];
      uint64_t v22 = v16;
      uint64_t v24 = v6;
      if (v7 < v6 && v11 >= 8)
      {
        uint64_t v17 = (char *)(a3 - 8);
        uint64_t v18 = v6;
        while (1)
        {
          uint64_t v19 = v17 + 8;
          unsigned int v20 = *((_DWORD *)v18 - 2);
          v18 -= 8;
          if (*((_DWORD *)v16 - 2) >= v20)
          {
            uint64_t v22 = v16 - 8;
            if (v19 < v16 || v17 >= v16 || v19 != v16) {
              *(void *)uint64_t v17 = *((void *)v16 - 1);
            }
            uint64_t v18 = v6;
            v16 -= 8;
            if (v6 <= v7) {
              goto LABEL_42;
            }
          }

          else
          {
            if (v19 != v6 || v17 >= v6) {
              *(void *)uint64_t v17 = *(void *)v18;
            }
            uint64_t v24 = v18;
            if (v18 <= v7) {
              goto LABEL_42;
            }
          }

          v17 -= 8;
          unsigned int v6 = v18;
          if (v16 <= v4) {
            goto LABEL_42;
          }
        }
      }

      goto LABEL_42;
    }
  }

  else if (v8 >= -7)
  {
    if (__dst != __src || &__src[8 * v10] <= __dst) {
      memmove(__dst, __src, 8 * v10);
    }
    uint64_t v14 = &v4[8 * v10];
    uint64_t v22 = v14;
    if ((unint64_t)v6 < a3 && v8 >= 8)
    {
      do
      {
        if (*(_DWORD *)v6 >= *(_DWORD *)v4)
        {
          if (v7 != v4) {
            *(void *)uint64_t v7 = *(void *)v4;
          }
          v4 += 8;
          uint64_t v23 = v4;
          uint64_t v15 = v6;
        }

        else
        {
          uint64_t v15 = v6 + 8;
          if (v7 < v6 || v7 >= v15 || v7 != v6) {
            *(void *)uint64_t v7 = *(void *)v6;
          }
        }

        v7 += 8;
        if (v4 >= v14) {
          break;
        }
        unsigned int v6 = v15;
      }

      while ((unint64_t)v15 < a3);
      uint64_t v24 = v7;
    }

char *sub_1003CB1DC(char *result, int64_t a2, char a3, char *a4)
{
  char v5 = (char)result;
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        return result;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  uint64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    uint64_t v9 = *((void *)a4 + 2);
  }
  else {
    uint64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_1009AC1D8);
    uint64_t v11 = (char *)swift_allocObject(v10, 16 * v9 + 32, 7LL);
    int64_t v12 = j__malloc_size(v11);
    uint64_t v13 = v12 - 32;
    if (v12 < 32) {
      uint64_t v13 = v12 - 17;
    }
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * (v13 >> 4);
  }

  else
  {
    uint64_t v11 = (char *)_swiftEmptyArrayStorage;
  }

  uint64_t v14 = v11 + 32;
  uint64_t v15 = a4 + 32;
  if ((v5 & 1) != 0)
  {
    if (v11 != a4 || v14 >= &v15[16 * v8]) {
      memmove(v14, v15, 16 * v8);
    }
    *((void *)a4 + 2) = 0LL;
  }

  else
  {
    memcpy(v14, v15, 16 * v8);
  }

  swift_bridgeObjectRelease();
  return v11;
}

char *sub_1003CB2D4(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 15;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -16)
  {
    char v9 = 2;
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v9,  1046LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 4;
    if (result != v3 || result >= &v3[16 * v7]) {
      return (char *)memmove(result, v3, 16 * v7);
    }
  }

  return result;
}

uint64_t sub_1003CB37C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1003CB394(a1, a2, a3, (uint64_t (*)(void))&type metadata accessor for UUID);
}

uint64_t sub_1003CB388(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1003CB394(a1, a2, a3, type metadata accessor for DefaultConfigurationLayer);
}

uint64_t sub_1003CB394( unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t (*a4)(void))
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t result = a4(0LL);
  uint64_t v8 = *(void *)(*(void *)(result - 8) + 72LL);
  if (!v8)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000LL && v8 == -1) {
    goto LABEL_14;
  }
  uint64_t v11 = v9 / v8;
  if (v9 / v8 < 0)
  {
LABEL_15:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
    __break(1u);
    return result;
  }

  if (v4 < v5 || v4 >= v5 + v11 * v8) {
    return swift_arrayInitWithTakeFrontToBack(v4, v5, v11, result);
  }
  if (v4 != v5) {
    return swift_arrayInitWithTakeBackToFront(v4, v5);
  }
  return result;
}

uint64_t sub_1003CB4A0(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1003CB394(a1, a2, a3, type metadata accessor for PairingErrorRecord);
}

uint64_t sub_1003CB4AC(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1003CB394(a1, a2, a3, type metadata accessor for UpdateDeviceState);
}

uint64_t sub_1003CB4BC(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1003CB394(a1, a2, a3, type metadata accessor for OwnedBeaconRecord);
}

char *sub_1003CB4C8(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 7;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -8)
  {
    char v9 = 2;
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v9,  1046LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 3;
    if (result != v3 || result >= &v3[8 * v7]) {
      return (char *)memmove(result, v3, 8 * v7);
    }
  }

  return result;
}

uint64_t sub_1003CB570(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1003CB394(a1, a2, a3, type metadata accessor for BeaconEstimatedLocation);
}

uint64_t sub_1003CB580(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1003CB394(a1, a2, a3, type metadata accessor for BeaconStatus);
}

uint64_t sub_1003CB58C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1003CB394(a1, a2, a3, type metadata accessor for ShareRecord);
}

char *sub_1003CB598(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -24)
  {
    char v7 = 2;
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v7,  1046LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 24;
    if (result != v3 || result >= &v3[24 * v6]) {
      return (char *)memmove(result, v3, 24 * v6);
    }
  }

  return result;
}

uint64_t sub_1003CB654(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1003CB394(a1, a2, a3, type metadata accessor for FetchRequestBeacon);
}

char *sub_1003CB660(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -40)
  {
    char v7 = 2;
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v7,  1046LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 40;
    if (result != v3 || result >= &v3[40 * v6]) {
      return (char *)memmove(result, v3, 40 * v6);
    }
  }

  return result;
}

uint64_t sub_1003CB718(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1003CB394(a1, a2, a3, type metadata accessor for RawSearchResult);
}

char *sub_1003CB724(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -32)
  {
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    size_t v6 = (v4 + (v4 < 0 ? 0x1FuLL : 0)) & 0xFFFFFFFFFFFFFFE0LL;
    if (result != v3 || result >= &v3[v6]) {
      return (char *)memmove(result, v3, v6);
    }
  }

  return result;
}

uint64_t sub_1003CB7C8(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1003CB394(a1, a2, a3, type metadata accessor for OwnedDeviceKeyRecord);
}

char *sub_1003CB7D4(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  if (v4 <= -88)
  {
    char v7 = 2;
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v7,  1046LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v6 = v4 / 88;
    if (result != v3 || result >= &v3[88 * v6]) {
      return (char *)memmove(result, v3, 88 * v6);
    }
  }

  return result;
}

uint64_t sub_1003CB894(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1003CB960(a1, a2, a3, (uint64_t *)&unk_1009AC320);
}

uint64_t sub_1003CB8A0(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1003CB394(a1, a2, a3, type metadata accessor for KeySyncMetadataDisplay);
}

char *sub_1003CB8AC(void **a1, const void **a2, void *a3)
{
  Swift::Int v3 = (char *)*a2;
  uint64_t v4 = *a3 - (void)v3;
  uint64_t v5 = v4 + 31;
  if (v4 >= 0) {
    uint64_t v5 = *a3 - (void)v3;
  }
  if (v4 <= -32)
  {
    char v9 = 2;
    uint64_t result = (char *)_fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  v9,  1046LL,  0);
    __break(1u);
  }

  else
  {
    uint64_t result = (char *)*a1;
    uint64_t v7 = v5 >> 5;
    if (result != v3 || result >= &v3[32 * v7]) {
      return (char *)memmove(result, v3, 32 * v7);
    }
  }

  return result;
}

uint64_t sub_1003CB954(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1003CB960(a1, a2, a3, &qword_1009AC1E0);
}

uint64_t sub_1003CB960(unint64_t *a1, unint64_t *a2, uint64_t *a3, uint64_t *a4)
{
  unint64_t v4 = *a1;
  unint64_t v5 = *a2;
  uint64_t v6 = *a3;
  uint64_t result = sub_100004AEC(a4);
  uint64_t v8 = *(void *)(*(void *)(result - 8) + 72LL);
  if (!v8)
  {
    __break(1u);
LABEL_14:
    __break(1u);
    goto LABEL_15;
  }

  uint64_t v9 = v6 - v5;
  if (v6 - v5 == 0x8000000000000000LL && v8 == -1) {
    goto LABEL_14;
  }
  uint64_t v11 = v9 / v8;
  if (v9 / v8 < 0)
  {
LABEL_15:
    uint64_t result = _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutablePointer.moveInitialize with negative count",  55LL,  2LL,  "Swift/UnsafePointer.swift",  25LL,  2,  1046LL,  0);
    __break(1u);
    return result;
  }

  if (v4 < v5 || v4 >= v5 + v11 * v8) {
    return swift_arrayInitWithTakeFrontToBack(v4, v5, v11, result);
  }
  if (v4 != v5) {
    return swift_arrayInitWithTakeBackToFront(v4, v5);
  }
  return result;
}

uint64_t sub_1003CBA6C(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1003CB394(a1, a2, a3, type metadata accessor for BeaconKeyManager.PersistenceInstruction);
}

uint64_t sub_1003CBA78(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1003CB394(a1, a2, a3, type metadata accessor for BeaconKeyManager.KeyIndexMapInfo);
}

uint64_t sub_1003CBA84(unint64_t *a1, unint64_t *a2, uint64_t *a3)
{
  return sub_1003CB394(a1, a2, a3, type metadata accessor for BeaconKeyManager.KeyMapInfo);
}

char *sub_1003CBA90(uint64_t a1)
{
  return sub_1003CB1DC(0LL, *(void *)(a1 + 16), 0, (char *)a1);
}

_BYTE *sub_1003CBAA4@<X0>(_BYTE *result@<X0>, _BYTE *a2@<X1>, void *a3@<X8>)
{
  if (!result) {
    goto LABEL_4;
  }
  uint64_t v4 = a2 - result;
  if (a2 == result)
  {
    uint64_t result = 0LL;
LABEL_4:
    unint64_t v5 = 0xC000000000000000LL;
    goto LABEL_5;
  }

  if (v4 <= 14)
  {
    uint64_t result = (_BYTE *)sub_1003D55A8(result, a2);
    unint64_t v5 = v7 & 0xFFFFFFFFFFFFFFLL;
  }

  else if ((unint64_t)v4 >= 0x7FFFFFFF)
  {
    uint64_t result = (_BYTE *)sub_1003D5668((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v8 | 0x8000000000000000LL;
  }

  else
  {
    uint64_t result = (_BYTE *)sub_1003D56E0((uint64_t)result, (uint64_t)a2);
    unint64_t v5 = v6 | 0x4000000000000000LL;
  }

void sub_1003CBB18(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  int64_t v12 = (char *)&v24 - v11;
  if (!*(void *)(*(void *)v1 + 16LL)) {
    return;
  }
  uint64_t v13 = a1 + 56;
  uint64_t v14 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & *(void *)(a1 + 56);
  int64_t v25 = (unint64_t)(v14 + 63) >> 6;
  __n128 v17 = swift_bridgeObjectRetain(a1);
  int64_t v18 = 0LL;
  if (!v16) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v19 | (v18 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v18 << 6))
  {
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v4 + 16))( v12,  *(void *)(a1 + 48) + *(void *)(v4 + 72) * i,  v3,  v17);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v12, 0LL, 1LL, v3);
    (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v12, v3);
    sub_1003CF124((uint64_t)v6, (uint64_t)v10);
    sub_100015794((uint64_t)v10, &qword_10099D8A0);
    (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
    if (v16) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v21 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
      __break(1u);
      goto LABEL_29;
    }

    if (v21 >= v25) {
      goto LABEL_25;
    }
    unint64_t v22 = *(void *)(v13 + 8 * v21);
    ++v18;
    if (!v22)
    {
      int64_t v18 = v21 + 1;
      if (v21 + 1 >= v25) {
        goto LABEL_25;
      }
      unint64_t v22 = *(void *)(v13 + 8 * v18);
      if (!v22)
      {
        int64_t v18 = v21 + 2;
        if (v21 + 2 >= v25) {
          goto LABEL_25;
        }
        unint64_t v22 = *(void *)(v13 + 8 * v18);
        if (!v22)
        {
          int64_t v18 = v21 + 3;
          if (v21 + 3 >= v25) {
            goto LABEL_25;
          }
          unint64_t v22 = *(void *)(v13 + 8 * v18);
          if (!v22) {
            break;
          }
        }
      }
    }

void sub_1003CBDCC(uint64_t a1)
{
  if (!*(void *)(*(void *)v1 + 16LL)) {
    return;
  }
  uint64_t v3 = a1 + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v8 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }

    int64_t v11 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v11 >= v7) {
      goto LABEL_24;
    }
    unint64_t v12 = *(void *)(v3 + 8 * v11);
    ++v8;
    if (!v12)
    {
      int64_t v8 = v11 + 1;
      if (v11 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v12 = *(void *)(v3 + 8 * v8);
      if (!v12)
      {
        int64_t v8 = v11 + 2;
        if (v11 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v12 = *(void *)(v3 + 8 * v8);
        if (!v12)
        {
          int64_t v8 = v11 + 3;
          if (v11 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v12 = *(void *)(v3 + 8 * v8);
          if (!v12) {
            break;
          }
        }
      }
    }

uint64_t sub_1003CBF2C(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for UUID(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  unint64_t v6 = (char *)&v20 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_10099D8A0);
  uint64_t v8 = __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v20 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = __chkstk_darwin(v8);
  int64_t v13 = (char *)&v20 - v12;
  if (*(void *)(*(void *)v1 + 16LL))
  {
    uint64_t v14 = *(void *)(a1 + 16);
    uint64_t v20 = a1;
    if (v14)
    {
      uint64_t v15 = a1;
      uint64_t v16 = a1 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80));
      uint64_t v21 = *(void *)(v4 + 72);
      __n128 v17 = *(void (**)(char *, uint64_t, uint64_t, __n128))(v4 + 16);
      __n128 v18 = swift_bridgeObjectRetain(v15);
      while (1)
      {
        v17(v13, v16, v3, v18);
        unint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56);
        ((void (*)(char *, void, uint64_t, uint64_t))v19)(v13, 0LL, 1LL, v3);
        (*(void (**)(char *, char *, uint64_t))(v4 + 32))(v6, v13, v3);
        sub_1003CF124((uint64_t)v6, (uint64_t)v10);
        sub_100015794((uint64_t)v10, &qword_10099D8A0);
        (*(void (**)(char *, uint64_t))(v4 + 8))(v6, v3);
        v16 += v21;
        if (!--v14) {
          goto LABEL_8;
        }
      }
    }

    else
    {
      unint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v4 + 56);
      __n128 v18 = swift_bridgeObjectRetain(a1);
LABEL_8:
      v19(v13, 1LL, 1LL, v3, v18);
    }

    return swift_bridgeObjectRelease();
  }

  return result;
}

void sub_1003CC0F8(uint64_t a1)
{
  if (!*(void *)(*(void *)v1 + 16LL)) {
    return;
  }
  uint64_t v3 = a1 + 56;
  uint64_t v4 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v5 = -1LL;
  if (v4 < 64) {
    uint64_t v5 = ~(-1LL << v4);
  }
  unint64_t v6 = v5 & *(void *)(a1 + 56);
  int64_t v7 = (unint64_t)(v4 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v8 = 0LL;
  while (1)
  {
    if (v6)
    {
      unint64_t v9 = __clz(__rbit64(v6));
      v6 &= v6 - 1;
      unint64_t v10 = v9 | (v8 << 6);
      goto LABEL_6;
    }

    int64_t v15 = v8 + 1;
    if (__OFADD__(v8, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v15 >= v7) {
      goto LABEL_24;
    }
    unint64_t v16 = *(void *)(v3 + 8 * v15);
    ++v8;
    if (!v16)
    {
      int64_t v8 = v15 + 1;
      if (v15 + 1 >= v7) {
        goto LABEL_24;
      }
      unint64_t v16 = *(void *)(v3 + 8 * v8);
      if (!v16)
      {
        int64_t v8 = v15 + 2;
        if (v15 + 2 >= v7) {
          goto LABEL_24;
        }
        unint64_t v16 = *(void *)(v3 + 8 * v8);
        if (!v16)
        {
          int64_t v8 = v15 + 3;
          if (v15 + 3 >= v7) {
            goto LABEL_24;
          }
          unint64_t v16 = *(void *)(v3 + 8 * v8);
          if (!v16) {
            break;
          }
        }
      }
    }

void sub_1003CC2A4(uint64_t a1)
{
  uint64_t v3 = sub_100004AEC(&qword_1009AC300);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for CorrelationIdentifier(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = __chkstk_darwin(v6);
  unint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v24 - v11;
  if (!*(void *)(*(void *)v1 + 16LL)) {
    return;
  }
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v25 = a1 + 56;
  uint64_t v14 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v17 = (unint64_t)(v14 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v18 = 0LL;
  while (1)
  {
    if (v16)
    {
      unint64_t v19 = __clz(__rbit64(v16));
      v16 &= v16 - 1;
      unint64_t v20 = v19 | (v18 << 6);
      goto LABEL_6;
    }

    int64_t v21 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
      __break(1u);
      goto LABEL_27;
    }

    if (v21 >= v17) {
      goto LABEL_24;
    }
    unint64_t v22 = *(void *)(v25 + 8 * v21);
    ++v18;
    if (!v22)
    {
      int64_t v18 = v21 + 1;
      if (v21 + 1 >= v17) {
        goto LABEL_24;
      }
      unint64_t v22 = *(void *)(v25 + 8 * v18);
      if (!v22)
      {
        int64_t v18 = v21 + 2;
        if (v21 + 2 >= v17) {
          goto LABEL_24;
        }
        unint64_t v22 = *(void *)(v25 + 8 * v18);
        if (!v22)
        {
          int64_t v18 = v21 + 3;
          if (v21 + 3 >= v17) {
            goto LABEL_24;
          }
          unint64_t v22 = *(void *)(v25 + 8 * v18);
          if (!v22) {
            break;
          }
        }
      }
    }

void sub_1003CC508(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v24 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009AC060);
  uint64_t v8 = __chkstk_darwin(v7);
  unint64_t v10 = (char *)&v24 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v24 - v11;
  if (!*(void *)(*(void *)v1 + 16LL)) {
    return;
  }
  uint64_t v13 = *(void *)(a1 + 56);
  uint64_t v24 = a1 + 56;
  uint64_t v14 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v15 = -1LL;
  if (v14 < 64) {
    uint64_t v15 = ~(-1LL << v14);
  }
  unint64_t v16 = v15 & v13;
  int64_t v25 = (unint64_t)(v14 + 63) >> 6;
  __n128 v17 = swift_bridgeObjectRetain(a1);
  int64_t v18 = 0LL;
  if (!v16) {
    goto LABEL_6;
  }
LABEL_5:
  unint64_t v19 = __clz(__rbit64(v16));
  v16 &= v16 - 1;
  for (unint64_t i = v19 | (v18 << 6); ; unint64_t i = __clz(__rbit64(v22)) + (v18 << 6))
  {
    sub_10001DC4C( *(void *)(a1 + 48) + *(void *)(v4 + 72) * i,  (uint64_t)v12,  type metadata accessor for BeaconIdentifier);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v4 + 56))(v12, 0LL, 1LL, v3);
    sub_10002218C((uint64_t)v12, (uint64_t)v6, type metadata accessor for BeaconIdentifier);
    sub_1003D03F8((uint64_t)v6, (uint64_t)v10);
    sub_100015794((uint64_t)v10, &qword_1009AC060);
    sub_100018C68((uint64_t)v6, type metadata accessor for BeaconIdentifier);
    if (v16) {
      goto LABEL_5;
    }
LABEL_6:
    int64_t v21 = v18 + 1;
    if (__OFADD__(v18, 1LL))
    {
      __break(1u);
      goto LABEL_29;
    }

    if (v21 >= v25) {
      goto LABEL_25;
    }
    unint64_t v22 = *(void *)(v24 + 8 * v21);
    ++v18;
    if (!v22)
    {
      int64_t v18 = v21 + 1;
      if (v21 + 1 >= v25) {
        goto LABEL_25;
      }
      unint64_t v22 = *(void *)(v24 + 8 * v18);
      if (!v22)
      {
        int64_t v18 = v21 + 2;
        if (v21 + 2 >= v25) {
          goto LABEL_25;
        }
        unint64_t v22 = *(void *)(v24 + 8 * v18);
        if (!v22)
        {
          int64_t v18 = v21 + 3;
          if (v21 + 3 >= v25) {
            goto LABEL_25;
          }
          unint64_t v22 = *(void *)(v24 + 8 * v18);
          if (!v22) {
            break;
          }
        }
      }
    }

void *sub_1003CC7D4(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v61 = (char *)&v55 - v12;
  if (!*(void *)(a2 + 16))
  {
    swift_release(a2);
    return &_swiftEmptySetSingleton;
  }

  uint64_t v13 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v15 = ~v13;
  uint64_t v16 = -v13;
  if (v16 < 64) {
    uint64_t v17 = ~(-1LL << v16);
  }
  else {
    uint64_t v17 = -1LL;
  }
  uint64_t v62 = a1;
  uint64_t v63 = a1 + 56;
  uint64_t v18 = a1;
  uint64_t v19 = a1 + 56;
  unint64_t v20 = v17 & v14;
  uint64_t v21 = v15;
  uint64_t v64 = v15;
  int64_t v65 = 0LL;
  unint64_t v66 = v17 & v14;
  char v60 = (char *)(a2 + 56);
  uint64_t v22 = v18;
  __n128 v23 = swift_bridgeObjectRetain(v18);
  int64_t v24 = 0LL;
  uint64_t v56 = v6;
  uint64_t v59 = a2;
  unint64_t v57 = v20;
  int64_t v58 = 0LL;
  if (!v20) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v25 = (v20 - 1) & v20;
  unint64_t v26 = __clz(__rbit64(v20)) | (v24 << 6);
  int64_t v27 = v24;
  uint64_t v28 = v19;
LABEL_7:
  (*(void (**)(char *, unint64_t, uint64_t, __n128))(v8 + 16))( v6,  *(void *)(v22 + 48) + *(void *)(v8 + 72) * v26,  v7,  v23);
  uint64_t v29 = 0LL;
  while (1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v29, 1LL, v7);
    uint64_t v62 = v22;
    uint64_t v63 = v28;
    uint64_t v64 = v21;
    int64_t v65 = v27;
    unint64_t v66 = v25;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
    {
      sub_1000A6F30(v22);
      sub_100015794((uint64_t)v6, &qword_10099D8A0);
      return (void *)v59;
    }

    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v61, v6, v7);
    uint64_t v33 = v59;
    uint64_t v34 = *(void *)(v59 + 40);
    uint64_t v35 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v36 = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v7, v35);
    uint64_t v37 = -1LL << *(_BYTE *)(v33 + 32);
    unint64_t v38 = v36 & ~v37;
    if (((*(void *)&v60[(v38 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v38) & 1) != 0) {
      break;
    }
    unint64_t v45 = *(void (**)(char *, uint64_t))(v8 + 8);
LABEL_34:
    v45(v61, v7);
    int64_t v24 = v65;
    unint64_t v20 = v66;
    uint64_t v22 = v62;
    uint64_t v19 = v63;
    uint64_t v21 = v64;
    uint64_t v6 = v56;
    unint64_t v57 = v66;
    int64_t v58 = v65;
    if (v66) {
      goto LABEL_6;
    }
LABEL_8:
    int64_t v27 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      __break(1u);
    }
    uint64_t v28 = v19;
    int64_t v30 = (unint64_t)(v21 + 64) >> 6;
    if (v27 >= v30) {
      goto LABEL_26;
    }
    unint64_t v31 = *(void *)(v19 + 8 * v27);
    if (v31) {
      goto LABEL_11;
    }
    v24 += 2LL;
    if (v27 + 1 >= v30) {
      goto LABEL_36;
    }
    unint64_t v31 = *(void *)(v19 + 8 * v24);
    if (v31) {
      goto LABEL_14;
    }
    if (v27 + 2 >= v30)
    {
LABEL_26:
      uint64_t v25 = 0LL;
      uint64_t v29 = 1LL;
      int64_t v27 = v24;
    }

    else
    {
      unint64_t v31 = *(void *)(v19 + 8 * (v27 + 2));
      if (v31)
      {
        v27 += 2LL;
        goto LABEL_11;
      }

      int64_t v24 = v27 + 3;
      if (v27 + 3 >= v30)
      {
        uint64_t v25 = 0LL;
        uint64_t v29 = 1LL;
        v27 += 2LL;
      }

      else
      {
        unint64_t v31 = *(void *)(v19 + 8 * v24);
        if (v31)
        {
LABEL_14:
          int64_t v27 = v24;
LABEL_11:
          uint64_t v25 = (v31 - 1) & v31;
          unint64_t v26 = __clz(__rbit64(v31)) + (v27 << 6);
          goto LABEL_7;
        }

        v27 += 4LL;
        if (v27 >= v30) {
          goto LABEL_26;
        }
        unint64_t v31 = *(void *)(v19 + 8 * v27);
        if (v31) {
          goto LABEL_11;
        }
        int64_t v27 = v30 - 1;
        uint64_t v32 = v58 + 6;
        while (v30 != v32)
        {
          unint64_t v31 = *(void *)(v19 + 8 * v32++);
          if (v31)
          {
            int64_t v27 = v32 - 1;
            goto LABEL_11;
          }
        }

void *sub_1003CCD90(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = a2;
  if (*(void *)(a2 + 16))
  {
    uint64_t v4 = (void *)(a1 + 56);
    uint64_t v5 = -1LL << *(_BYTE *)(a1 + 32);
    if (-v5 < 64) {
      uint64_t v6 = ~(-1LL << -(char)v5);
    }
    else {
      uint64_t v6 = -1LL;
    }
    unint64_t v7 = v6 & *(void *)(a1 + 56);
    int64_t v14 = (unint64_t)(63 - v5) >> 6;
    swift_bridgeObjectRetain(a1);
    if (v7)
    {
      unint64_t v8 = __clz(__rbit64(v7));
      goto LABEL_22;
    }

    if (v14 > 1)
    {
      unint64_t v9 = v4[1];
      uint64_t v10 = 1LL;
      if (v9) {
        goto LABEL_21;
      }
      uint64_t v10 = 2LL;
      if (v14 > 2)
      {
        unint64_t v9 = v4[2];
        if (v9) {
          goto LABEL_21;
        }
        uint64_t v10 = 3LL;
        if (v14 > 3)
        {
          unint64_t v9 = v4[3];
          if (v9) {
            goto LABEL_21;
          }
          uint64_t v10 = 4LL;
          if (v14 > 4)
          {
            unint64_t v9 = v4[4];
            if (!v9)
            {
              uint64_t v11 = 5LL;
              if (v14 > 5)
              {
                unint64_t v9 = v4[5];
                if (v9)
                {
                  uint64_t v10 = 5LL;
                  goto LABEL_21;
                }

                while (1)
                {
                  uint64_t v10 = v11 + 1;
                  if (__OFADD__(v11, 1LL)) {
                    __break(1u);
                  }
                  if (v10 >= v14) {
                    break;
                  }
                  unint64_t v9 = v4[v10];
                  ++v11;
                  if (v9) {
                    goto LABEL_21;
                  }
                }
              }

              goto LABEL_25;
            }

unint64_t *sub_1003CDA5C(uint64_t a1, unint64_t *a2)
{
  uint64_t v2 = a2;
  if (a2[2])
  {
    uint64_t v3 = *(void *)(a1 + 56);
    uint64_t v41 = a1 + 56;
    uint64_t v4 = -1LL << *(_BYTE *)(a1 + 32);
    uint64_t v39 = ~v4;
    if (-v4 < 64) {
      uint64_t v5 = ~(-1LL << -(char)v4);
    }
    else {
      uint64_t v5 = -1LL;
    }
    unint64_t v6 = v5 & v3;
    int64_t v40 = (unint64_t)(63 - v4) >> 6;
    unint64_t v7 = (char *)(a2 + 7);
    swift_bridgeObjectRetain(a1);
    uint64_t v9 = 0LL;
    uint64_t v42 = v8;
    while (1)
    {
      if (v6)
      {
        unint64_t v10 = __clz(__rbit64(v6));
        v6 &= v6 - 1;
        uint64_t v43 = v9;
        unint64_t v11 = v10 | (v9 << 6);
      }

      else
      {
        int64_t v12 = v9 + 1;
        if (__OFADD__(v9, 1LL))
        {
          __break(1u);
          goto LABEL_42;
        }

        if (v12 >= v40) {
          goto LABEL_39;
        }
        unint64_t v13 = *(void *)(v41 + 8 * v12);
        int64_t v14 = v9 + 1;
        if (!v13)
        {
          int64_t v14 = v9 + 2;
          if (v9 + 2 >= v40) {
            goto LABEL_39;
          }
          unint64_t v13 = *(void *)(v41 + 8 * v14);
          if (!v13)
          {
            int64_t v14 = v9 + 3;
            if (v9 + 3 >= v40) {
              goto LABEL_39;
            }
            unint64_t v13 = *(void *)(v41 + 8 * v14);
            if (!v13)
            {
              int64_t v14 = v9 + 4;
              if (v9 + 4 >= v40) {
                goto LABEL_39;
              }
              unint64_t v13 = *(void *)(v41 + 8 * v14);
              if (!v13)
              {
                uint64_t v15 = v9 + 5;
                if (v9 + 5 >= v40)
                {
LABEL_39:
                  sub_1000A6F30(v8);
                  return v2;
                }

                unint64_t v13 = *(void *)(v41 + 8 * v15);
                if (!v13)
                {
                  while (1)
                  {
                    int64_t v14 = v15 + 1;
                    if (__OFADD__(v15, 1LL)) {
                      break;
                    }
                    if (v14 >= v40) {
                      goto LABEL_39;
                    }
                    unint64_t v13 = *(void *)(v41 + 8 * v14);
                    ++v15;
                    if (v13) {
                      goto LABEL_24;
                    }
                  }

void *sub_1003CDEB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009AC300);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v55 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for CorrelationIdentifier(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v55 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v61 = (char *)&v55 - v12;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }

  uint64_t v13 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v14 = *(void *)(a1 + 56);
  uint64_t v15 = ~v13;
  uint64_t v16 = -v13;
  if (v16 < 64) {
    uint64_t v17 = ~(-1LL << v16);
  }
  else {
    uint64_t v17 = -1LL;
  }
  uint64_t v62 = a1;
  uint64_t v63 = a1 + 56;
  uint64_t v18 = a1;
  uint64_t v19 = a1 + 56;
  unint64_t v20 = v17 & v14;
  uint64_t v21 = v15;
  uint64_t v64 = v15;
  int64_t v65 = 0LL;
  unint64_t v66 = v17 & v14;
  char v60 = (char *)(a2 + 56);
  uint64_t v22 = v18;
  __n128 v23 = swift_bridgeObjectRetain(v18);
  int64_t v24 = 0LL;
  uint64_t v56 = v6;
  uint64_t v59 = a2;
  unint64_t v57 = v20;
  int64_t v58 = 0LL;
  if (!v20) {
    goto LABEL_8;
  }
LABEL_6:
  uint64_t v25 = (v20 - 1) & v20;
  unint64_t v26 = __clz(__rbit64(v20)) | (v24 << 6);
  int64_t v27 = v24;
  uint64_t v28 = v19;
LABEL_7:
  (*(void (**)(char *, unint64_t, uint64_t, __n128))(v8 + 16))( v6,  *(void *)(v22 + 48) + *(void *)(v8 + 72) * v26,  v7,  v23);
  uint64_t v29 = 0LL;
  while (1)
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, v29, 1LL, v7);
    uint64_t v62 = v22;
    uint64_t v63 = v28;
    uint64_t v64 = v21;
    int64_t v65 = v27;
    unint64_t v66 = v25;
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) == 1)
    {
      sub_1000A6F30(v22);
      sub_100015794((uint64_t)v6, &qword_1009AC300);
      return (void *)v59;
    }

    (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v61, v6, v7);
    uint64_t v33 = v59;
    uint64_t v34 = *(void *)(v59 + 40);
    uint64_t v35 = sub_100007864( &qword_1009AC308,  (uint64_t (*)(uint64_t))&type metadata accessor for CorrelationIdentifier,  (uint64_t)&protocol conformance descriptor for CorrelationIdentifier);
    uint64_t v36 = dispatch thunk of Hashable._rawHashValue(seed:)(v34, v7, v35);
    uint64_t v37 = -1LL << *(_BYTE *)(v33 + 32);
    unint64_t v38 = v36 & ~v37;
    if (((*(void *)&v60[(v38 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v38) & 1) != 0) {
      break;
    }
    unint64_t v45 = *(void (**)(char *, uint64_t))(v8 + 8);
LABEL_34:
    v45(v61, v7);
    int64_t v24 = v65;
    unint64_t v20 = v66;
    uint64_t v22 = v62;
    uint64_t v19 = v63;
    uint64_t v21 = v64;
    unint64_t v6 = v56;
    unint64_t v57 = v66;
    int64_t v58 = v65;
    if (v66) {
      goto LABEL_6;
    }
LABEL_8:
    int64_t v27 = v24 + 1;
    if (__OFADD__(v24, 1LL)) {
      __break(1u);
    }
    uint64_t v28 = v19;
    int64_t v30 = (unint64_t)(v21 + 64) >> 6;
    if (v27 >= v30) {
      goto LABEL_26;
    }
    unint64_t v31 = *(void *)(v19 + 8 * v27);
    if (v31) {
      goto LABEL_11;
    }
    v24 += 2LL;
    if (v27 + 1 >= v30) {
      goto LABEL_36;
    }
    unint64_t v31 = *(void *)(v19 + 8 * v24);
    if (v31) {
      goto LABEL_14;
    }
    if (v27 + 2 >= v30)
    {
LABEL_26:
      uint64_t v25 = 0LL;
      uint64_t v29 = 1LL;
      int64_t v27 = v24;
    }

    else
    {
      unint64_t v31 = *(void *)(v19 + 8 * (v27 + 2));
      if (v31)
      {
        v27 += 2LL;
        goto LABEL_11;
      }

      int64_t v24 = v27 + 3;
      if (v27 + 3 >= v30)
      {
        uint64_t v25 = 0LL;
        uint64_t v29 = 1LL;
        v27 += 2LL;
      }

      else
      {
        unint64_t v31 = *(void *)(v19 + 8 * v24);
        if (v31)
        {
LABEL_14:
          int64_t v27 = v24;
LABEL_11:
          uint64_t v25 = (v31 - 1) & v31;
          unint64_t v26 = __clz(__rbit64(v31)) + (v27 << 6);
          goto LABEL_7;
        }

        v27 += 4LL;
        if (v27 >= v30) {
          goto LABEL_26;
        }
        unint64_t v31 = *(void *)(v19 + 8 * v27);
        if (v31) {
          goto LABEL_11;
        }
        int64_t v27 = v30 - 1;
        uint64_t v32 = v58 + 6;
        while (v30 != v32)
        {
          unint64_t v31 = *(void *)(v19 + 8 * v32++);
          if (v31)
          {
            int64_t v27 = v32 - 1;
            goto LABEL_11;
          }
        }

void *sub_1003CE474(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)&v38 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v41 = (char *)&v38 - v12;
  if (*(void *)(a2 + 16))
  {
    uint64_t v42 = a1;
    unint64_t v43 = 0LL;
    unint64_t v13 = *(void *)(a1 + 16);
    __n128 v14 = swift_bridgeObjectRetain(a1);
    if (v13)
    {
      unint64_t v15 = 0LL;
      uint64_t v39 = v6;
      uint64_t v40 = (char *)(a2 + 56);
      while (1)
      {
        if (v15 >= v13) {
          __break(1u);
        }
        uint64_t v16 = *(void *)(v8 + 72);
        uint64_t v17 = *(void (**)(char *, unint64_t, uint64_t, __n128))(v8 + 16);
        v17( v6,  a1 + ((*(unsigned __int8 *)(v8 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80)) + v16 * v15,  v7,  v14);
        unint64_t v43 = v15 + 1;
        uint64_t v18 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56);
        v18(v6, 0LL, 1LL, v7);
        unint64_t v38 = v18;
        (*(void (**)(char *, char *, uint64_t))(v8 + 32))(v41, v6, v7);
        uint64_t v19 = *(void *)(a2 + 40);
        uint64_t v20 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v21 = dispatch thunk of Hashable._rawHashValue(seed:)(v19, v7, v20);
        uint64_t v22 = a2;
        uint64_t v23 = -1LL << *(_BYTE *)(a2 + 32);
        unint64_t v24 = v21 & ~v23;
        if (((*(void *)&v40[(v24 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v24) & 1) != 0)
        {
          uint64_t v25 = ~v23;
          while (1)
          {
            ((void (*)(char *, unint64_t, uint64_t))v17)(v11, *(void *)(v22 + 48) + v24 * v16, v7);
            uint64_t v26 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
            char v27 = dispatch thunk of static Equatable.== infix(_:_:)(v11, v41, v7, v26);
            uint64_t v28 = *(void (**)(char *, uint64_t))(v8 + 8);
            v28(v11, v7);
            if ((v27 & 1) != 0) {
              break;
            }
            unint64_t v24 = (v24 + 1) & v25;
            if (((*(void *)&v40[(v24 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v24) & 1) == 0) {
              goto LABEL_12;
            }
          }

          uint64_t isStackAllocationSafe = ((uint64_t (*)(char *, uint64_t))v28)(v41, v7);
          char v30 = *(_BYTE *)(v22 + 32);
          unsigned int v31 = v30 & 0x3F;
          unint64_t v32 = (1LL << v30) + 63;
          uint64_t v33 = v32 >> 6;
          size_t v34 = 8 * (v32 >> 6);
          if (v31 <= 0xD
            || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v32 >> 6), 8LL),
                (_DWORD)isStackAllocationSafe))
          {
            __chkstk_darwin(isStackAllocationSafe);
            memcpy((char *)&v38 - ((v34 + 15) & 0x3FFFFFFFFFFFFFF0LL), v40, v34);
            uint64_t v35 = sub_1003D2754( (unint64_t *)((char *)&v38 - ((v34 + 15) & 0x3FFFFFFFFFFFFFF0LL)),  v33,  v22,  v24,  &v42);
            swift_release();
            swift_bridgeObjectRelease();
          }

          else
          {
            uint64_t v36 = (void *)swift_slowAlloc(v34, -1LL);
            memcpy(v36, v40, v34);
            uint64_t v35 = sub_1003D2754((unint64_t *)v36, v33, v22, v24, &v42);
            swift_release();
            swift_bridgeObjectRelease();
            swift_slowDealloc(v36, -1LL, -1LL);
          }

          return v35;
        }

        uint64_t v28 = *(void (**)(char *, uint64_t))(v8 + 8);
LABEL_12:
        v28(v41, v7);
        a1 = v42;
        unint64_t v15 = v43;
        unint64_t v13 = *(void *)(v42 + 16);
        a2 = v22;
        unint64_t v6 = v39;
        if (v43 == v13)
        {
          v38(v39, 1LL, 1LL, v7);
          break;
        }
      }
    }

    else
    {
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1LL, 1LL, v7);
    }

    swift_bridgeObjectRelease();
    sub_100015794((uint64_t)v6, &qword_10099D8A0);
  }

  else
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }

  return (void *)a2;
}

void *sub_1003CE8E0(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009AC060);
  __chkstk_darwin(v4);
  unint64_t v6 = (char *)v54 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)v54 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  unint64_t v13 = (char *)v54 - v12;
  if (!*(void *)(a2 + 16))
  {
    swift_release();
    return &_swiftEmptySetSingleton;
  }

  uint64_t v59 = v11;
  unint64_t v57 = v6;
  uint64_t v14 = -1LL << *(_BYTE *)(a1 + 32);
  uint64_t v16 = a1 + 56;
  uint64_t v15 = *(void *)(a1 + 56);
  uint64_t v17 = ~v14;
  uint64_t v18 = -v14;
  if (v18 < 64) {
    uint64_t v19 = ~(-1LL << v18);
  }
  else {
    uint64_t v19 = -1LL;
  }
  uint64_t v63 = a1;
  uint64_t v64 = a1 + 56;
  unint64_t v20 = v19 & v15;
  uint64_t v65 = v17;
  int64_t v66 = 0LL;
  unint64_t v67 = v19 & v15;
  uint64_t v21 = (char *)(a2 + 56);
  swift_bridgeObjectRetain(a1);
  int64_t v22 = 0LL;
  uint64_t v56 = v7;
  uint64_t v58 = a2;
  while (1)
  {
    v54[1] = v20;
    int64_t v55 = v22;
    if (v20)
    {
      uint64_t v23 = v17;
      uint64_t v24 = v16;
      uint64_t v60 = (v20 - 1) & v20;
      int64_t v61 = v22;
      unint64_t v25 = __clz(__rbit64(v20)) | (v22 << 6);
LABEL_9:
      uint64_t v26 = *(void *)(a1 + 48);
      uint64_t v27 = a1;
      uint64_t v28 = v59;
      uint64_t v29 = (uint64_t)v57;
      sub_10001DC4C(v26 + *(void *)(v59 + 72) * v25, (uint64_t)v57, type metadata accessor for BeaconIdentifier);
      uint64_t v30 = 0LL;
      goto LABEL_32;
    }

    int64_t v31 = v22 + 1;
    if (__OFADD__(v22, 1LL)) {
      __break(1u);
    }
    int64_t v32 = (unint64_t)(v17 + 64) >> 6;
    if (v31 >= v32)
    {
LABEL_30:
      uint64_t v23 = v17;
      uint64_t v24 = v16;
      uint64_t v60 = 0LL;
      int64_t v61 = v22;
      goto LABEL_31;
    }

    unint64_t v33 = *(void *)(v16 + 8 * v31);
    if (v33) {
      goto LABEL_13;
    }
    v22 += 2LL;
    if (v31 + 1 >= v32)
    {
      int64_t v61 = v31;
    }

    else
    {
      unint64_t v33 = *(void *)(v16 + 8 * v22);
      if (v33) {
        goto LABEL_16;
      }
      if (v31 + 2 >= v32) {
        goto LABEL_30;
      }
      unint64_t v33 = *(void *)(v16 + 8 * (v31 + 2));
      if (v33)
      {
        v31 += 2LL;
        goto LABEL_13;
      }

      int64_t v22 = v31 + 3;
      if (v31 + 3 >= v32)
      {
        uint64_t v23 = v17;
        uint64_t v24 = v16;
        uint64_t v60 = 0LL;
        int64_t v61 = v31 + 2;
        goto LABEL_31;
      }

      unint64_t v33 = *(void *)(v16 + 8 * v22);
      if (v33)
      {
LABEL_16:
        int64_t v31 = v22;
LABEL_13:
        uint64_t v23 = v17;
        uint64_t v24 = v16;
        uint64_t v60 = (v33 - 1) & v33;
        int64_t v61 = v31;
        unint64_t v25 = __clz(__rbit64(v33)) + (v31 << 6);
        goto LABEL_9;
      }

      v31 += 4LL;
      if (v31 >= v32) {
        goto LABEL_30;
      }
      unint64_t v33 = *(void *)(v16 + 8 * v31);
      if (v33) {
        goto LABEL_13;
      }
      uint64_t v34 = v55 + 6;
      while (v32 != v34)
      {
        unint64_t v33 = *(void *)(v16 + 8 * v34++);
        if (v33)
        {
          int64_t v31 = v34 - 1;
          goto LABEL_13;
        }
      }

      int64_t v61 = v32 - 1;
    }

    uint64_t v23 = v17;
    uint64_t v24 = v16;
    uint64_t v60 = 0LL;
LABEL_31:
    uint64_t v30 = 1LL;
    uint64_t v29 = (uint64_t)v57;
    uint64_t v27 = a1;
    uint64_t v28 = v59;
LABEL_32:
    (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v28 + 56))(v29, v30, 1LL, v7);
    uint64_t v63 = v27;
    uint64_t v64 = v24;
    uint64_t v65 = v23;
    int64_t v66 = v61;
    unint64_t v67 = v60;
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v28 + 48))(v29, 1LL, v7) == 1)
    {
      sub_1000A6F30(v27);
      sub_100015794(v29, &qword_1009AC060);
      return (void *)v58;
    }

    sub_10002218C(v29, (uint64_t)v13, type metadata accessor for BeaconIdentifier);
    uint64_t v35 = v58;
    Hasher.init(_seed:)(v62, *(void *)(v58 + 40));
    uint64_t v36 = type metadata accessor for UUID(0LL);
    uint64_t v37 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    dispatch thunk of Hashable.hash(into:)(v62, v36, v37);
    unint64_t v38 = &v13[*(int *)(v7 + 20)];
    dispatch thunk of Hashable.hash(into:)(v62, v36, v37);
    Swift::Int v39 = Hasher._finalize()();
    uint64_t v40 = -1LL << *(_BYTE *)(v35 + 32);
    unint64_t v41 = v39 & ~v40;
    if (((*(void *)&v21[(v41 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v41) & 1) != 0) {
      break;
    }
LABEL_6:
    sub_100018C68((uint64_t)v13, type metadata accessor for BeaconIdentifier);
    int64_t v22 = v66;
    unint64_t v20 = v67;
    a1 = v63;
    uint64_t v16 = v64;
    uint64_t v17 = v65;
  }

  uint64_t v42 = ~v40;
  uint64_t v43 = *(void *)(v59 + 72);
  while (1)
  {
    sub_10001DC4C(*(void *)(v35 + 48) + v43 * v41, (uint64_t)v10, type metadata accessor for BeaconIdentifier);
    if ((static UUID.== infix(_:_:)(v10, v13) & 1) != 0
      && (static UUID.== infix(_:_:)(&v10[*(int *)(v7 + 20)], v38) & 1) != 0)
    {
      break;
    }

    sub_100018C68((uint64_t)v10, type metadata accessor for BeaconIdentifier);
    unint64_t v41 = (v41 + 1) & v42;
    if (((*(void *)&v21[(v41 >> 3) & 0xFFFFFFFFFFFFF8LL] >> v41) & 1) == 0) {
      goto LABEL_6;
    }
  }

  sub_100018C68((uint64_t)v10, type metadata accessor for BeaconIdentifier);
  uint64_t isStackAllocationSafe = sub_100018C68((uint64_t)v13, type metadata accessor for BeaconIdentifier);
  char v45 = *(_BYTE *)(v35 + 32);
  unsigned int v46 = v45 & 0x3F;
  unint64_t v47 = (1LL << v45) + 63;
  uint64_t v48 = v47 >> 6;
  size_t v49 = 8 * (v47 >> 6);
  if (v46 <= 0xD
    || (uint64_t isStackAllocationSafe = swift_stdlib_isStackAllocationSafe(8 * (v47 >> 6), 8LL), (_DWORD)isStackAllocationSafe))
  {
    __chkstk_darwin(isStackAllocationSafe);
    memcpy((char *)v54 - ((v49 + 15) & 0x3FFFFFFFFFFFFFF0LL), v21, v49);
    uint64_t v50 = sub_1003D2B00((void *)((char *)v54 - ((v49 + 15) & 0x3FFFFFFFFFFFFFF0LL)), v48, v58, v41, &v63);
    swift_release();
    sub_1000A6F30(v63);
    return v50;
  }

  else
  {
    unint64_t v52 = (void *)swift_slowAlloc(v49, -1LL);
    memcpy(v52, v21, v49);
    uint64_t v53 = sub_1003D2B00((unint64_t *)v52, v48, v58, v41, &v63);
    swift_release();
    sub_1000A6F30(v63);
    swift_slowDealloc(v52, -1LL, -1LL);
    return v53;
  }

uint64_t sub_1003CEF14(uint64_t a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  uint64_t v5 = *(void *)(*v1 + 40LL);
  uint64_t v6 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  uint64_t v8 = v7;
  Hasher.init(_seed:)(v30, v5);
  swift_bridgeObjectRetain(v4);
  String.hash(into:)(v30, v6, v8);
  Swift::Int v9 = Hasher._finalize()();
  swift_bridgeObjectRelease();
  uint64_t v10 = -1LL << *(_BYTE *)(v4 + 32);
  unint64_t v11 = v9 & ~v10;
  if (((*(void *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0)
  {
LABEL_15:
    swift_bridgeObjectRelease();
    return 0LL;
  }

  uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v4 + 48) + 8 * v11));
  uint64_t v14 = v13;
  uint64_t v15 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
  if (v12 == v15 && v14 == v16)
  {
LABEL_16:
    swift_bridgeObjectRelease_n(v14, 2LL);
  }

  else
  {
    char v18 = _stringCompareWithSmolCheck(_:_:expecting:)(v12, v14, v15, v16, 0LL);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    if ((v18 & 1) == 0)
    {
      uint64_t v19 = ~v10;
      do
      {
        unint64_t v11 = (v11 + 1) & v19;
        if (((*(void *)(v4 + 56 + ((v11 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v11) & 1) == 0) {
          goto LABEL_15;
        }
        uint64_t v20 = static String._unconditionallyBridgeFromObjectiveC(_:)(*(void *)(*(void *)(v4 + 48) + 8 * v11));
        uint64_t v14 = v21;
        uint64_t v22 = static String._unconditionallyBridgeFromObjectiveC(_:)(a1);
        if (v20 == v22 && v14 == v23) {
          goto LABEL_16;
        }
        char v25 = _stringCompareWithSmolCheck(_:_:expecting:)(v20, v14, v22, v23, 0LL);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
      }

      while ((v25 & 1) == 0);
    }
  }

  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v28 = *v2;
  v30[0] = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000CDCD4();
    uint64_t v28 = v30[0];
  }

  uint64_t v26 = *(void *)(*(void *)(v28 + 48) + 8 * v11);
  sub_1003D3490(v11);
  *uint64_t v2 = v30[0];
  swift_bridgeObjectRelease();
  return v26;
}

uint64_t sub_1003CF124@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  Swift::Int v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40);
  uint64_t v13 = sub_100007864(&qword_1009A58F0, v12, (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v10);
  uint64_t v32 = a1;
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  uint64_t v15 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v16 = v14 & ~v15;
  if (((*(void *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
  {
    uint64_t v30 = v3;
    uint64_t v31 = a2;
    uint64_t v17 = ~v15;
    uint64_t v18 = *(void *)(v7 + 72);
    uint64_t v33 = v7;
    uint64_t v19 = *(void (**)(char *, unint64_t, uint64_t))(v7 + 16);
    while (1)
    {
      unint64_t v20 = v18 * v16;
      v19(v9, *(void *)(v10 + 48) + v18 * v16, v6);
      uint64_t v21 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v32, v6, v21);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v6);
      if ((v22 & 1) != 0) {
        break;
      }
      unint64_t v16 = (v16 + 1) & v17;
      if (((*(void *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v23 = 1LL;
        a2 = v31;
        uint64_t v7 = v33;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1LL, v6);
      }
    }

    swift_bridgeObjectRelease();
    uint64_t v24 = v30;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v30);
    uint64_t v26 = *v24;
    uint64_t v34 = *v24;
    *uint64_t v24 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1000CDCC0();
      uint64_t v26 = v34;
    }

    unint64_t v27 = *(void *)(v26 + 48) + v20;
    uint64_t v7 = v33;
    a2 = v31;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v33 + 32))(v31, v27, v6);
    sub_1003D3CF4( v16,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  &qword_1009A58F0,  (uint64_t)&protocol conformance descriptor for UUID);
    *uint64_t v24 = v34;
    swift_bridgeObjectRelease();
    uint64_t v23 = 0LL;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v23 = 1LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1LL, v6);
}

uint64_t sub_1003CF378(unsigned __int8 a1)
{
  uint64_t v3 = *v1;
  Hasher.init(_seed:)(v9, *(void *)(*v1 + 40));
  uint64_t v4 = sub_100794CB8(a1);
  uint64_t v6 = v5;
  swift_bridgeObjectRetain(v3);
  String.hash(into:)(v9, v4, v6);
  swift_bridgeObjectRelease();
  unint64_t v7 = Hasher._finalize()() & ~(-1LL << *(_BYTE *)(v3 + 32));
  if (((*(void *)(v3 + 56 + ((v7 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v7) & 1) != 0) {
    __asm { BR              X9 }
  }

  swift_bridgeObjectRelease();
  return 21LL;
}

uint64_t sub_1003CFA60(uint64_t a1)
{
  uint64_t v20 = a1;
  uint64_t v2 = *v1;
  if ((*v1 & 0xC000000000000001LL) != 0)
  {
    if (v2 < 0) {
      uint64_t v4 = v2;
    }
    else {
      uint64_t v4 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    uint64_t v5 = swift_retain();
    char v6 = __CocoaSet.contains(_:)(v5, v4);
    swift_release();
    if ((v6 & 1) != 0)
    {
      uint64_t v7 = sub_1003D3140(v4, a1, sub_1000C2BE0, &qword_1009A0C08, &qword_1009A0C10, &qword_1009A0C18);
      swift_bridgeObjectRelease();
      return v7;
    }

uint64_t sub_1003CFC7C(unsigned __int8 a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = *v3;
  Hasher.init(_seed:)(v21, *(void *)(*v3 + 40LL));
  Hasher._combine(_:)(a1);
  swift_bridgeObjectRetain(v7);
  swift_bridgeObjectRetain(a3);
  String.hash(into:)(v21, a2, a3);
  swift_bridgeObjectRelease();
  Swift::Int v8 = Hasher._finalize()();
  uint64_t v9 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v10 = v8 & ~v9;
  if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) != 0)
  {
    uint64_t v11 = ~v9;
    uint64_t v12 = *(void *)(v7 + 48);
    while (1)
    {
      unint64_t v13 = (unsigned __int8 *)(v12 + 24 * v10);
      if (*v13 == a1)
      {
        uint64_t v14 = *((void *)v13 + 1);
        uint64_t v15 = *((void *)v13 + 2);
        BOOL v16 = v14 == a2 && v15 == a3;
        if (v16 || (_stringCompareWithSmolCheck(_:_:expecting:)(v14, v15, a2, a3, 0LL) & 1) != 0) {
          break;
        }
      }

      unint64_t v10 = (v10 + 1) & v11;
      if (((*(void *)(v7 + 56 + ((v10 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v10) & 1) == 0) {
        goto LABEL_13;
      }
    }

    swift_bridgeObjectRelease();
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v3);
    uint64_t v18 = *v3;
    v21[0] = *v3;
    *uint64_t v3 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1000CDCE0();
      uint64_t v18 = v21[0];
    }

    uint64_t v19 = *(unsigned __int8 *)(*(void *)(v18 + 48) + 24 * v10);
    sub_1003D3AEC(v10);
    *uint64_t v3 = v21[0];
    swift_bridgeObjectRelease();
  }

  else
  {
LABEL_13:
    swift_bridgeObjectRelease();
    return 0LL;
  }

  return v19;
}

uint64_t sub_1003CFE2C@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v3 = v2;
  uint64_t v6 = type metadata accessor for CorrelationIdentifier(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)&v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *v3;
  uint64_t v11 = *(void *)(*v3 + 40);
  uint64_t v13 = sub_100007864(&qword_1009AC308, v12, (uint64_t)&protocol conformance descriptor for CorrelationIdentifier);
  swift_bridgeObjectRetain(v10);
  uint64_t v32 = a1;
  uint64_t v14 = dispatch thunk of Hashable._rawHashValue(seed:)(v11, v6, v13);
  uint64_t v15 = -1LL << *(_BYTE *)(v10 + 32);
  unint64_t v16 = v14 & ~v15;
  if (((*(void *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) != 0)
  {
    uint64_t v30 = v3;
    uint64_t v31 = a2;
    uint64_t v17 = ~v15;
    uint64_t v18 = *(void *)(v7 + 72);
    uint64_t v33 = v7;
    uint64_t v19 = *(void (**)(void, void, void))(v7 + 16);
    while (1)
    {
      unint64_t v20 = v18 * v16;
      v19(v9, *(void *)(v10 + 48) + v18 * v16, v6);
      uint64_t v21 = sub_100007864( (unint64_t *)&unk_1009AC310,  (uint64_t (*)(uint64_t))&type metadata accessor for CorrelationIdentifier,  (uint64_t)&protocol conformance descriptor for CorrelationIdentifier);
      char v22 = dispatch thunk of static Equatable.== infix(_:_:)(v9, v32, v6, v21);
      (*(void (**)(char *, uint64_t))(v33 + 8))(v9, v6);
      if ((v22 & 1) != 0) {
        break;
      }
      unint64_t v16 = (v16 + 1) & v17;
      if (((*(void *)(v10 + 56 + ((v16 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v16) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        uint64_t v23 = 1LL;
        a2 = v31;
        uint64_t v7 = v33;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1LL, v6);
      }
    }

    swift_bridgeObjectRelease();
    uint64_t v24 = v30;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v30);
    uint64_t v26 = *v24;
    uint64_t v34 = *v24;
    *uint64_t v24 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1000CE598();
      uint64_t v26 = v34;
    }

    unint64_t v27 = *(void *)(v26 + 48) + v20;
    uint64_t v7 = v33;
    a2 = v31;
    (*(void (**)(uint64_t, unint64_t, uint64_t))(v33 + 32))(v31, v27, v6);
    sub_1003D3CF4( v16,  (uint64_t (*)(uint64_t))&type metadata accessor for CorrelationIdentifier,  &qword_1009AC308,  (uint64_t)&protocol conformance descriptor for CorrelationIdentifier);
    *uint64_t v24 = v34;
    swift_bridgeObjectRelease();
    uint64_t v23 = 0LL;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v23 = 1LL;
  }

  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v7 + 56))(a2, v23, 1LL, v6);
}

uint64_t sub_1003D0080(uint64_t a1)
{
  uint64_t v20 = a1;
  uint64_t v2 = *v1;
  if ((*v1 & 0xC000000000000001LL) != 0)
  {
    if (v2 < 0) {
      uint64_t v4 = v2;
    }
    else {
      uint64_t v4 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    uint64_t v5 = swift_retain();
    char v6 = __CocoaSet.contains(_:)(v5, v4);
    swift_release();
    if ((v6 & 1) != 0)
    {
      uint64_t v7 = sub_1003D2F90(v4, a1);
      swift_bridgeObjectRelease();
      return v7;
    }

uint64_t sub_1003D026C(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = *v2;
  Hasher.init(_seed:)(v21, *(void *)(*v2 + 40LL));
  swift_bridgeObjectRetain(v5);
  String.hash(into:)(v21, a1, a2);
  Swift::Int v6 = Hasher._finalize()();
  uint64_t v7 = -1LL << *(_BYTE *)(v5 + 32);
  unint64_t v8 = v6 & ~v7;
  if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0)
  {
LABEL_18:
    swift_bridgeObjectRelease();
    return 0LL;
  }

  uint64_t v9 = *(void *)(v5 + 48);
  uint64_t v10 = (void *)(v9 + 16 * v8);
  uint64_t v11 = v10[1];
  BOOL v12 = *v10 == a1 && v11 == a2;
  if (!v12 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v10, v11, a1, a2, 0LL) & 1) == 0)
  {
    uint64_t v16 = ~v7;
    do
    {
      unint64_t v8 = (v8 + 1) & v16;
      if (((*(void *)(v5 + 56 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) == 0) {
        goto LABEL_18;
      }
      uint64_t v17 = (void *)(v9 + 16 * v8);
      uint64_t v18 = v17[1];
      BOOL v19 = *v17 == a1 && v18 == a2;
    }

    while (!v19 && (_stringCompareWithSmolCheck(_:_:expecting:)(*v17, v18, a1, a2, 0LL) & 1) == 0);
  }

  swift_bridgeObjectRelease();
  int isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v2);
  uint64_t v14 = *v2;
  v21[0] = *v2;
  *uint64_t v2 = 0x8000000000000000LL;
  if (!isUniquelyReferenced_nonNull_native)
  {
    sub_1000CDB10();
    uint64_t v14 = v21[0];
  }

  uint64_t v15 = *(void *)(*(void *)(v14 + 48) + 16 * v8);
  sub_1003D4150(v8);
  *uint64_t v2 = v21[0];
  swift_bridgeObjectRelease();
  return v15;
}

uint64_t sub_1003D03F8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v5 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v26 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = v2;
  uint64_t v8 = *v2;
  Hasher.init(_seed:)(v28, *(void *)(*v2 + 40));
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  swift_bridgeObjectRetain(v8);
  dispatch thunk of Hashable.hash(into:)(v28, v9, v10);
  uint64_t v27 = v5;
  uint64_t v11 = a1 + *(int *)(v5 + 20);
  dispatch thunk of Hashable.hash(into:)(v28, v9, v10);
  Swift::Int v12 = Hasher._finalize()();
  uint64_t v13 = -1LL << *(_BYTE *)(v8 + 32);
  unint64_t v14 = v12 & ~v13;
  if (((*(void *)(v8 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) != 0)
  {
    uint64_t v25 = a2;
    uint64_t v15 = ~v13;
    uint64_t v16 = *(void *)(v26 + 72);
    while (1)
    {
      sub_10001DC4C(*(void *)(v8 + 48) + v16 * v14, (uint64_t)v7, type metadata accessor for BeaconIdentifier);
      if ((static UUID.== infix(_:_:)(v7, a1) & 1) != 0
        && (static UUID.== infix(_:_:)(&v7[*(int *)(v27 + 20)], v11) & 1) != 0)
      {
        break;
      }

      sub_100018C68((uint64_t)v7, type metadata accessor for BeaconIdentifier);
      unint64_t v14 = (v14 + 1) & v15;
      if (((*(void *)(v8 + 56 + ((v14 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v14) & 1) == 0)
      {
        swift_bridgeObjectRelease();
        a2 = v25;
        return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(a2, 1LL, 1LL, v27);
      }
    }

    sub_100018C68((uint64_t)v7, type metadata accessor for BeaconIdentifier);
    swift_bridgeObjectRelease();
    uint64_t v17 = v24;
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(*v24);
    uint64_t v19 = *v17;
    v28[0] = *v17;
    *uint64_t v17 = 0x8000000000000000LL;
    if ((isUniquelyReferenced_nonNull_native & 1) == 0)
    {
      sub_1000CE968();
      uint64_t v19 = v28[0];
    }

    uint64_t v20 = *(void *)(v19 + 48) + v16 * v14;
    uint64_t v21 = v25;
    sub_10002218C(v20, v25, type metadata accessor for BeaconIdentifier);
    sub_1003D4314(v14);
    *uint64_t v17 = v28[0];
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v26 + 56))(v21, 0LL, 1LL, v27);
  }

  else
  {
    swift_bridgeObjectRelease();
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v26 + 56))(a2, 1LL, 1LL, v27);
  }

uint64_t sub_1003D0674(uint64_t a1)
{
  uint64_t v20 = a1;
  uint64_t v2 = *v1;
  if ((*v1 & 0xC000000000000001LL) != 0)
  {
    if (v2 < 0) {
      uint64_t v4 = v2;
    }
    else {
      uint64_t v4 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    uint64_t v5 = swift_retain();
    char v6 = __CocoaSet.contains(_:)(v5, v4);
    swift_release();
    if ((v6 & 1) != 0)
    {
      uint64_t v7 = sub_1003D3140(v4, a1, sub_1000C2E1C, (uint64_t *)&unk_1009BA0E0, &qword_1009A0B90, &qword_1009A0B98);
      swift_bridgeObjectRelease();
      return v7;
    }

uint64_t sub_1003D0890(uint64_t a1)
{
  uint64_t v20 = a1;
  uint64_t v2 = *v1;
  if ((*v1 & 0xC000000000000001LL) != 0)
  {
    if (v2 < 0) {
      uint64_t v4 = v2;
    }
    else {
      uint64_t v4 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    uint64_t v5 = swift_retain();
    char v6 = __CocoaSet.contains(_:)(v5, v4);
    swift_release();
    if ((v6 & 1) != 0)
    {
      uint64_t v7 = sub_1003D3140( v4,  a1,  sub_1000C2E38,  (uint64_t *)&unk_1009A0080,  (unint64_t *)&unk_1009AC330,  &qword_1009A0C40);
      swift_bridgeObjectRelease();
      return v7;
    }

uint64_t sub_1003D0AAC(uint64_t a1)
{
  uint64_t v20 = a1;
  uint64_t v2 = *v1;
  if ((*v1 & 0xC000000000000001LL) != 0)
  {
    if (v2 < 0) {
      uint64_t v4 = v2;
    }
    else {
      uint64_t v4 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    uint64_t v5 = swift_retain();
    char v6 = __CocoaSet.contains(_:)(v5, v4);
    swift_release();
    if ((v6 & 1) != 0)
    {
      uint64_t v7 = sub_1003D3140( v4,  a1,  sub_1000C3274,  (uint64_t *)&unk_1009A0AB0,  (unint64_t *)&unk_1009A6B00,  (unint64_t *)&unk_1009A0C90);
      swift_bridgeObjectRelease();
      return v7;
    }

uint64_t sub_1003D0CC8(uint64_t a1)
{
  uint64_t v20 = a1;
  uint64_t v2 = *v1;
  if ((*v1 & 0xC000000000000001LL) != 0)
  {
    if (v2 < 0) {
      uint64_t v4 = v2;
    }
    else {
      uint64_t v4 = v2 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v2);
    uint64_t v5 = swift_retain();
    char v6 = __CocoaSet.contains(_:)(v5, v4);
    swift_release();
    if ((v6 & 1) != 0)
    {
      uint64_t v7 = sub_1003D3140( v4,  a1,  sub_1000C3290,  (uint64_t *)&unk_1009AC2E0,  (unint64_t *)&unk_1009A0B00,  (unint64_t *)&unk_1009AC2F0);
      swift_bridgeObjectRelease();
      return v7;
    }

uint64_t sub_1003D0EE4(void *a1)
{
  uint64_t v2 = v1;
  uint64_t v4 = *v1;
  if ((*v1 & 0xC000000000000001LL) != 0)
  {
    if (v4 < 0) {
      uint64_t v5 = *v1;
    }
    else {
      uint64_t v5 = v4 & 0xFFFFFFFFFFFFFF8LL;
    }
    swift_bridgeObjectRetain(v4);
    id v6 = a1;
    char v7 = __CocoaSet.contains(_:)();

    if ((v7 & 1) != 0)
    {
      uint64_t v8 = sub_1003D32F8(v5, (uint64_t)v6);
      swift_bridgeObjectRelease();
      return v8;
    }

void *sub_1003D10B8(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v52 = a2;
  uint64_t v9 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v51 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  id v16 = (char *)&v51 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = (void *)__chkstk_darwin(v14);
  uint64_t v60 = (char *)&v51 - v18;
  uint64_t v19 = *(void *)(a3 + 16);
  uint64_t v20 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL;
  uint64_t v21 = *(unint64_t *)((char *)a1 + v20) & ((-1LL << a4) - 1);
  unint64_t v54 = a1;
  int64_t v55 = v11;
  *(unint64_t *)((char *)a1 + v20) = v21;
  uint64_t v22 = v19 - 1;
  uint64_t v58 = a3 + 56;
  uint64_t v59 = a3;
  uint64_t v56 = a5;
  while (2)
  {
    uint64_t v53 = v22;
    do
    {
      while (1)
      {
        uint64_t v24 = *a5;
        uint64_t v25 = a5[1];
        uint64_t v27 = a5[2];
        int64_t v26 = a5[3];
        unint64_t v28 = a5[4];
        uint64_t v57 = v27;
        if (v28)
        {
          uint64_t v29 = (v28 - 1) & v28;
          unint64_t v30 = __clz(__rbit64(v28)) | (v26 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))( v11,  *(void *)(v24 + 48) + *(void *)(v13 + 72) * v30,  v12);
          uint64_t v31 = 0LL;
          goto LABEL_8;
        }

        int64_t v43 = v26 + 1;
        if (__OFADD__(v26, 1LL))
        {
          __break(1u);
          goto LABEL_44;
        }

        int64_t v44 = (unint64_t)(v27 + 64) >> 6;
        if (v43 >= v44)
        {
          uint64_t v29 = 0LL;
          uint64_t v31 = 1LL;
          goto LABEL_8;
        }

        unint64_t v45 = *(void *)(v25 + 8 * v43);
        if (v45) {
          goto LABEL_17;
        }
        int64_t v48 = v26 + 2;
        if (v26 + 2 >= v44) {
          goto LABEL_35;
        }
        unint64_t v45 = *(void *)(v25 + 8 * v48);
        if (v45) {
          goto LABEL_23;
        }
        if (v26 + 3 >= v44) {
          goto LABEL_36;
        }
        unint64_t v45 = *(void *)(v25 + 8 * (v26 + 3));
        if (v45)
        {
          int64_t v43 = v26 + 3;
          goto LABEL_17;
        }

        int64_t v48 = v26 + 4;
        if (v26 + 4 < v44)
        {
          unint64_t v45 = *(void *)(v25 + 8 * v48);
          if (v45)
          {
LABEL_23:
            int64_t v43 = v48;
LABEL_17:
            uint64_t v29 = (v45 - 1) & v45;
            unint64_t v30 = __clz(__rbit64(v45)) + (v43 << 6);
            int64_t v26 = v43;
            goto LABEL_7;
          }

          int64_t v43 = v26 + 5;
          if (v26 + 5 < v44)
          {
            unint64_t v45 = *(void *)(v25 + 8 * v43);
            if (v45) {
              goto LABEL_17;
            }
            int64_t v43 = v44 - 1;
            int64_t v49 = v26 + 6;
            while (v44 != v49)
            {
              unint64_t v45 = *(void *)(v25 + 8 * v49++);
              if (v45)
              {
                int64_t v43 = v49 - 1;
                goto LABEL_17;
              }
            }

void *sub_1003D1510(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v6 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a4) - 1;
  v21[10] = "";
  uint64_t v19 = v6 - 1;
  int64_t v8 = a5[3];
  unint64_t v7 = a5[4];
  if (v7)
  {
    uint64_t v9 = (v7 - 1) & v7;
    unint64_t v10 = __clz(__rbit64(v7)) | (v8 << 6);
    goto LABEL_19;
  }

  int64_t v11 = v8 + 1;
  if (__OFADD__(v8, 1LL))
  {
    __break(1u);
    JUMPOUT(0x1003D1F38LL);
  }

  int64_t v12 = (unint64_t)(a5[2] + 64LL) >> 6;
  if (v11 >= v12)
  {
    int64_t v11 = a5[3];
  }

  else
  {
    uint64_t v13 = a5[1];
    unint64_t v14 = *(void *)(v13 + 8 * v11);
    if (v14)
    {
LABEL_18:
      uint64_t v9 = (v14 - 1) & v14;
      unint64_t v10 = __clz(__rbit64(v14)) + (v11 << 6);
      int64_t v8 = v11;
LABEL_19:
      uint64_t v16 = *(unsigned __int8 *)(*(void *)(*a5 + 48LL) + v10);
      a5[3] = v8;
      a5[4] = v9;
      Hasher.init(_seed:)(v21, *(void *)(a3 + 40));
      __asm { BR              X8 }
    }

    if (v8 + 2 < v12)
    {
      unint64_t v14 = *(void *)(v13 + 8 * (v8 + 2));
      if (v14)
      {
        int64_t v11 = v8 + 2;
        goto LABEL_18;
      }

      if (v8 + 3 >= v12)
      {
        int64_t v11 = v8 + 2;
      }

      else
      {
        unint64_t v14 = *(void *)(v13 + 8 * (v8 + 3));
        if (v14)
        {
          int64_t v11 = v8 + 3;
          goto LABEL_18;
        }

        int64_t v11 = v8 + 4;
        if (v8 + 4 < v12)
        {
          unint64_t v14 = *(void *)(v13 + 8 * v11);
          if (!v14)
          {
            int64_t v11 = v12 - 1;
            int64_t v15 = v8 + 5;
            do
            {
              if (v12 == v15) {
                goto LABEL_21;
              }
              unint64_t v14 = *(void *)(v13 + 8 * v15++);
            }

            while (!v14);
            int64_t v11 = v15 - 1;
          }

          goto LABEL_18;
        }

        int64_t v11 = v8 + 3;
      }
    }
  }

unint64_t *sub_1003D2038( unint64_t *result, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v6 = a3;
  uint64_t v7 = *(void *)(a3 + 16);
  unint64_t v37 = result;
  *(unint64_t *)((char *)result + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a4) - 1;
  uint64_t v8 = v7 - 1;
  uint64_t v9 = a3 + 56;
  uint64_t v39 = a3;
  while (2)
  {
    uint64_t v36 = v8;
    do
    {
      while (1)
      {
        int64_t v11 = a5[3];
        unint64_t v10 = a5[4];
        if (v10)
        {
          uint64_t v12 = (v10 - 1) & v10;
          unint64_t v13 = __clz(__rbit64(v10)) | (v11 << 6);
          goto LABEL_16;
        }

        int64_t v14 = v11 + 1;
        if (__OFADD__(v11, 1LL))
        {
          __break(1u);
          goto LABEL_43;
        }

        int64_t v15 = (unint64_t)(a5[2] + 64LL) >> 6;
        if (v14 >= v15)
        {
          int64_t v14 = a5[3];
LABEL_39:
          a5[3] = v14;
          a5[4] = 0LL;
          swift_retain();
          return (unint64_t *)sub_1005461A0(v37, a2, v36, v6);
        }

        uint64_t v16 = a5[1];
        unint64_t v17 = *(void *)(v16 + 8 * v14);
        if (!v17)
        {
          int64_t v18 = v11 + 2;
          if (v11 + 2 >= v15) {
            goto LABEL_39;
          }
          unint64_t v17 = *(void *)(v16 + 8 * v18);
          if (!v17)
          {
            if (v11 + 3 >= v15) {
              goto LABEL_40;
            }
            unint64_t v17 = *(void *)(v16 + 8 * (v11 + 3));
            if (v17)
            {
              int64_t v14 = v11 + 3;
              goto LABEL_15;
            }

            int64_t v18 = v11 + 4;
            if (v11 + 4 >= v15)
            {
              int64_t v14 = v11 + 3;
              goto LABEL_39;
            }

            unint64_t v17 = *(void *)(v16 + 8 * v18);
            if (!v17)
            {
              int64_t v14 = v11 + 5;
              if (v11 + 5 >= v15)
              {
LABEL_40:
                int64_t v14 = v18;
                goto LABEL_39;
              }

              unint64_t v17 = *(void *)(v16 + 8 * v14);
              if (!v17)
              {
                int64_t v14 = v15 - 1;
                int64_t v34 = v11 + 6;
                while (v15 != v34)
                {
                  unint64_t v17 = *(void *)(v16 + 8 * v34++);
                  if (v17)
                  {
                    int64_t v14 = v34 - 1;
                    goto LABEL_15;
                  }
                }

                goto LABEL_39;
              }

              goto LABEL_15;
            }
          }

          int64_t v14 = v18;
        }

void *sub_1003D2310(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v51 = a2;
  uint64_t v9 = sub_100004AEC(&qword_1009AC300);
  __chkstk_darwin(v9);
  int64_t v11 = (char *)&v50 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for CorrelationIdentifier(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  uint64_t v14 = __chkstk_darwin(v12);
  uint64_t v16 = (char *)&v50 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = (void *)__chkstk_darwin(v14);
  uint64_t v59 = (char *)&v50 - v18;
  uint64_t v19 = *(void *)(a3 + 16);
  uint64_t v20 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL;
  uint64_t v21 = *(unint64_t *)((char *)a1 + v20) & ((-1LL << a4) - 1);
  uint64_t v53 = a1;
  unint64_t v54 = v11;
  *(unint64_t *)((char *)a1 + v20) = v21;
  uint64_t v22 = v19 - 1;
  uint64_t v57 = a3 + 56;
  uint64_t v58 = a3;
  int64_t v55 = a5;
  while (2)
  {
    uint64_t v52 = v22;
    do
    {
      while (1)
      {
        uint64_t v24 = *a5;
        uint64_t v25 = a5[1];
        uint64_t v27 = a5[2];
        int64_t v26 = a5[3];
        unint64_t v28 = a5[4];
        uint64_t v56 = v27;
        if (v28)
        {
          uint64_t v29 = (v28 - 1) & v28;
          unint64_t v30 = __clz(__rbit64(v28)) | (v26 << 6);
LABEL_7:
          (*(void (**)(char *, unint64_t, uint64_t))(v13 + 16))( v11,  *(void *)(v24 + 48) + *(void *)(v13 + 72) * v30,  v12);
          uint64_t v31 = 0LL;
          goto LABEL_8;
        }

        int64_t v43 = v26 + 1;
        if (__OFADD__(v26, 1LL))
        {
          __break(1u);
          goto LABEL_42;
        }

        int64_t v44 = (unint64_t)(v27 + 64) >> 6;
        if (v43 >= v44)
        {
          uint64_t v29 = 0LL;
          uint64_t v31 = 1LL;
          goto LABEL_8;
        }

        unint64_t v45 = *(void *)(v25 + 8 * v43);
        if (v45) {
          goto LABEL_17;
        }
        if (v26 + 2 >= v44) {
          goto LABEL_34;
        }
        unint64_t v45 = *(void *)(v25 + 8 * (v26 + 2));
        if (v45)
        {
          int64_t v43 = v26 + 2;
LABEL_17:
          uint64_t v29 = (v45 - 1) & v45;
          unint64_t v30 = __clz(__rbit64(v45)) + (v43 << 6);
          int64_t v26 = v43;
          goto LABEL_7;
        }

        if (v26 + 3 >= v44)
        {
          uint64_t v29 = 0LL;
          uint64_t v31 = 1LL;
          v26 += 2LL;
          goto LABEL_8;
        }

        unint64_t v45 = *(void *)(v25 + 8 * (v26 + 3));
        if (v45)
        {
          int64_t v43 = v26 + 3;
          goto LABEL_17;
        }

        int64_t v43 = v26 + 4;
        if (v26 + 4 < v44)
        {
          unint64_t v45 = *(void *)(v25 + 8 * v43);
          if (v45) {
            goto LABEL_17;
          }
          int64_t v43 = v44 - 1;
          int64_t v48 = v26 + 5;
          while (v44 != v48)
          {
            unint64_t v45 = *(void *)(v25 + 8 * v48++);
            if (v45)
            {
              int64_t v43 = v48 - 1;
              goto LABEL_17;
            }
          }

void *sub_1003D2754(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v41 = a2;
  uint64_t v9 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v9);
  int64_t v11 = (char *)&v40 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v40 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = (void *)__chkstk_darwin(v13);
  uint64_t v19 = *(void *)(a3 + 16);
  *(unint64_t *)((char *)a1 + ((a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a4) - 1;
  char v42 = a1;
  uint64_t v43 = v19 - 1;
  uint64_t v20 = *a5;
  unint64_t v21 = a5[1];
  unint64_t v22 = *(void *)(*a5 + 16LL);
  if (v21 == v22)
  {
    uint64_t v23 = v41;
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v18 + 56))(v11, 1LL, 1LL, v12);
LABEL_22:
    sub_100015794((uint64_t)v11, &qword_10099D8A0);
    swift_retain();
    return (void *)sub_100545C40(v42, v23, v43, a3);
  }

  uint64_t v47 = a3 + 56;
  uint64_t v48 = v18;
  uint64_t v24 = v18;
  unint64_t v45 = v11;
  uint64_t v46 = a5;
  uint64_t v49 = (char *)&v40 - v17;
  while (v21 < v22)
  {
    uint64_t v26 = *(void *)(v24 + 72);
    uint64_t v27 = *(void (**)(char *, unint64_t, uint64_t))(v24 + 16);
    v27( v11,  v20 + ((*(unsigned __int8 *)(v24 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v24 + 80)) + v26 * v21,  v12);
    a5[1] = v21 + 1;
    int64_t v44 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(v24 + 56);
    v44(v11, 0LL, 1LL, v12);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v24 + 48))(v11, 1LL, v12) == 1)
    {
      uint64_t v23 = v41;
      goto LABEL_22;
    }

    (*(void (**)(char *, char *, uint64_t))(v24 + 32))(v49, v11, v12);
    uint64_t v28 = *(void *)(a3 + 40);
    uint64_t v29 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v30 = dispatch thunk of Hashable._rawHashValue(seed:)(v28, v12, v29);
    uint64_t v31 = a3;
    uint64_t v32 = -1LL << *(_BYTE *)(a3 + 32);
    unint64_t v33 = v30 & ~v32;
    if (((*(void *)(v47 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v33) & 1) == 0)
    {
      uint64_t v25 = *(uint64_t (**)(char *, uint64_t))(v24 + 8);
LABEL_5:
      uint64_t result = (void *)v25(v49, v12);
      a3 = v31;
      a5 = v46;
      goto LABEL_6;
    }

    uint64_t v34 = ~v32;
    while (1)
    {
      v27(v15, *(void *)(v31 + 48) + v33 * v26, v12);
      uint64_t v35 = sub_100007864( (unint64_t *)&qword_1009A0A40,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      char v36 = dispatch thunk of static Equatable.== infix(_:_:)(v15, v49, v12, v35);
      uint64_t v25 = *(uint64_t (**)(char *, uint64_t))(v48 + 8);
      v25(v15, v12);
      if ((v36 & 1) != 0) {
        break;
      }
      unint64_t v33 = (v33 + 1) & v34;
      if (((*(void *)(v47 + ((v33 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v33) & 1) == 0) {
        goto LABEL_5;
      }
    }

    uint64_t result = (void *)v25(v49, v12);
    uint64_t v37 = (v33 >> 3) & 0x1FFFFFFFFFFFFFF8LL;
    uint64_t v38 = *(unint64_t *)((char *)v42 + v37);
    *(unint64_t *)((char *)v42 + v37) = v38 & ~(1LL << v33);
    a5 = v46;
    if ((v38 & (1LL << v33)) == 0)
    {
      a3 = v31;
LABEL_6:
      uint64_t v24 = v48;
      goto LABEL_7;
    }

    uint64_t v39 = v43 - 1;
    uint64_t v24 = v48;
    if (__OFSUB__(v43, 1LL)) {
      goto LABEL_25;
    }
    a3 = v31;
    --v43;
    if (!v39) {
      return &_swiftEmptySetSingleton;
    }
LABEL_7:
    uint64_t v20 = *a5;
    unint64_t v21 = a5[1];
    unint64_t v22 = *(void *)(*a5 + 16LL);
    int64_t v11 = v45;
    if (v21 == v22)
    {
      uint64_t v23 = v41;
      v44(v45, 1LL, 1LL, v12);
      goto LABEL_22;
    }
  }

  __break(1u);
LABEL_25:
  __break(1u);
  return result;
}

void *sub_1003D2B00(unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t a4, void *a5)
{
  uint64_t v49 = a2;
  uint64_t v57 = a5;
  uint64_t v8 = sub_100004AEC(&qword_1009AC060);
  __chkstk_darwin(v8);
  uint64_t v52 = (uint64_t)&v48 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v60 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v10 = *(void *)(v60 - 8);
  uint64_t v11 = __chkstk_darwin(v60);
  uint64_t v13 = (char *)&v48 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t result = (void *)__chkstk_darwin(v11);
  uint64_t v16 = (char *)&v48 - v15;
  uint64_t v17 = *(void *)(a3 + 16);
  uint64_t v18 = (a4 >> 3) & 0x1FFFFFFFFFFFFFF8LL;
  uint64_t v19 = *(unint64_t *)((char *)a1 + v18) & ((-1LL << a4) - 1);
  uint64_t v51 = a1;
  *(unint64_t *)((char *)a1 + v18) = v19;
  uint64_t v20 = v17 - 1;
  uint64_t v21 = a3 + 56;
  uint64_t v53 = v10;
  while (2)
  {
    uint64_t v50 = v20;
    do
    {
      while (1)
      {
        uint64_t v22 = v57[1];
        uint64_t v58 = *v57;
        uint64_t v23 = v57[2];
        int64_t v24 = v57[3];
        unint64_t v25 = v57[4];
        uint64_t v55 = v23;
        uint64_t v56 = v22;
        if (v25)
        {
          uint64_t v54 = (v25 - 1) & v25;
          unint64_t v26 = __clz(__rbit64(v25)) | (v24 << 6);
LABEL_6:
          uint64_t v27 = v52;
          sub_10001DC4C( *(void *)(v58 + 48) + *(void *)(v10 + 72) * v26,  v52,  type metadata accessor for BeaconIdentifier);
          uint64_t v28 = 0LL;
          goto LABEL_7;
        }

        int64_t v44 = v24 + 1;
        if (__OFADD__(v24, 1LL))
        {
          __break(1u);
          goto LABEL_41;
        }

        int64_t v45 = (unint64_t)(v23 + 64) >> 6;
        if (v44 >= v45)
        {
          uint64_t v54 = 0LL;
          uint64_t v28 = 1LL;
          uint64_t v27 = v52;
          goto LABEL_7;
        }

        unint64_t v46 = *(void *)(v22 + 8 * v44);
        if (v46) {
          goto LABEL_18;
        }
        if (v24 + 2 >= v45) {
          goto LABEL_33;
        }
        unint64_t v46 = *(void *)(v22 + 8 * (v24 + 2));
        if (v46)
        {
          int64_t v44 = v24 + 2;
LABEL_18:
          uint64_t v54 = (v46 - 1) & v46;
          unint64_t v26 = __clz(__rbit64(v46)) + (v44 << 6);
          int64_t v24 = v44;
          goto LABEL_6;
        }

        if (v24 + 3 >= v45)
        {
          uint64_t v54 = 0LL;
          uint64_t v28 = 1LL;
          v24 += 2LL;
          uint64_t v27 = v52;
          goto LABEL_7;
        }

        unint64_t v46 = *(void *)(v22 + 8 * (v24 + 3));
        if (v46)
        {
          int64_t v44 = v24 + 3;
          goto LABEL_18;
        }

        int64_t v44 = v24 + 4;
        if (v24 + 4 < v45)
        {
          unint64_t v46 = *(void *)(v22 + 8 * v44);
          if (v46) {
            goto LABEL_18;
          }
          int64_t v44 = v45 - 1;
          int64_t v47 = v24 + 5;
          while (v45 != v47)
          {
            unint64_t v46 = *(void *)(v22 + 8 * v47++);
            if (v46)
            {
              int64_t v44 = v47 - 1;
              goto LABEL_18;
            }
          }

uint64_t sub_1003D2F90(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  uint64_t v20 = a2;
  swift_bridgeObjectRelease();
  uint64_t v5 = __CocoaSet.count.getter(a1);
  uint64_t v6 = swift_unknownObjectRetain(a1);
  uint64_t v7 = sub_1000C2BFC(v6, v5);
  uint64_t v19 = v7;
  uint64_t v8 = *(void *)(v7 + 40);
  uint64_t v9 = type metadata accessor for AnyCancellable(0LL);
  uint64_t v10 = sub_100007864( (unint64_t *)&unk_1009AC370,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
  swift_retain();
  uint64_t v11 = dispatch thunk of Hashable._rawHashValue(seed:)(v8, v9, v10);
  uint64_t v12 = -1LL << *(_BYTE *)(v7 + 32);
  unint64_t v13 = v11 & ~v12;
  if (((*(void *)(v7 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0)
  {
    uint64_t v14 = ~v12;
    uint64_t v15 = sub_100007864( &qword_1009A0CA0,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
    while (1)
    {
      uint64_t v18 = *(void *)(*(void *)(v7 + 48) + 8 * v13);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v18, &v20, v9, v15) & 1) != 0) {
        break;
      }
      unint64_t v13 = (v13 + 1) & v14;
      if (((*(void *)(v7 + 56 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) == 0)
      {
        swift_release();
        __break(1u);
        break;
      }
    }

    swift_release();
    uint64_t v16 = *(void *)(*(void *)(v7 + 48) + 8 * v13);
    uint64_t v18 = v16;
    sub_1003D3F7C(v13);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v20, &v18, v9, v15) & 1) != 0)
    {
      *uint64_t v3 = v19;
      return v16;
    }

    __break(1u);
  }

  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1003D3140( uint64_t a1, uint64_t a2, uint64_t (*a3)(uint64_t, uint64_t), uint64_t *a4, unint64_t *a5, unint64_t *a6)
{
  uint64_t v11 = v6;
  uint64_t v28 = a2;
  swift_bridgeObjectRelease();
  uint64_t v13 = __CocoaSet.count.getter(a1);
  uint64_t v14 = swift_unknownObjectRetain(a1);
  uint64_t v15 = a3(v14, v13);
  uint64_t v27 = v15;
  uint64_t v16 = *(void *)(v15 + 40);
  swift_retain();
  uint64_t v17 = sub_100004AEC(a4);
  uint64_t v18 = sub_1000372EC(a5, a4, (uint64_t)&protocol conformance descriptor for XPCSession<A>);
  uint64_t v19 = dispatch thunk of Hashable._rawHashValue(seed:)(v16, v17, v18);
  uint64_t v20 = -1LL << *(_BYTE *)(v15 + 32);
  unint64_t v21 = v19 & ~v20;
  if (((*(void *)(v15 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) != 0)
  {
    uint64_t v22 = ~v20;
    uint64_t v23 = sub_1000372EC(a6, a4, (uint64_t)&protocol conformance descriptor for XPCSession<A>);
    while (1)
    {
      uint64_t v26 = *(void *)(*(void *)(v15 + 48) + 8 * v21);
      if ((dispatch thunk of static Equatable.== infix(_:_:)(&v26, &v28, v17, v23) & 1) != 0) {
        break;
      }
      unint64_t v21 = (v21 + 1) & v22;
      if (((*(void *)(v15 + 56 + ((v21 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v21) & 1) == 0)
      {
        swift_release();
        __break(1u);
        break;
      }
    }

    swift_release();
    uint64_t v24 = *(void *)(*(void *)(v15 + 48) + 8 * v21);
    uint64_t v26 = v24;
    sub_1003D45EC(v21, a5, a4);
    if ((dispatch thunk of static Equatable.== infix(_:_:)(&v28, &v26, v17, v23) & 1) != 0)
    {
      *uint64_t v11 = v27;
      return v24;
    }

    __break(1u);
  }

  uint64_t result = swift_release();
  __break(1u);
  return result;
}

uint64_t sub_1003D32F8(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  uint64_t v6 = __CocoaSet.count.getter(a1);
  uint64_t v7 = swift_unknownObjectRetain(a1);
  Swift::Int v8 = sub_1000C34CC(v7, v6);
  Swift::Int v19 = v8;
  Swift::Int v9 = *(void *)(v8 + 40);
  swift_retain();
  Swift::Int v10 = NSObject._rawHashValue(seed:)(v9);
  uint64_t v11 = -1LL << *(_BYTE *)(v8 + 32);
  unint64_t v12 = v10 & ~v11;
  if (((*(void *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) != 0)
  {
    sub_100022898(0LL, &qword_10099E2C0, &OBJC_CLASS___CKRecordZoneID_ptr);
    id v13 = *(id *)(*(void *)(v8 + 48) + 8 * v12);
    char v14 = static NSObject.== infix(_:_:)(v13, a2);

    if ((v14 & 1) != 0)
    {
LABEL_6:
      swift_release(v8);
      Swift::Int v8 = *(void *)(*(void *)(v8 + 48) + 8 * v12);
      sub_1003D47C0(v12);
      if ((static NSObject.== infix(_:_:)(a2, v8) & 1) != 0)
      {
        *uint64_t v3 = v19;
        return v8;
      }

      __break(1u);
    }

    else
    {
      uint64_t v15 = ~v11;
      while (1)
      {
        unint64_t v12 = (v12 + 1) & v15;
        if (((*(void *)(v8 + 56 + ((v12 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v12) & 1) == 0) {
          break;
        }
        id v16 = *(id *)(*(void *)(v8 + 48) + 8 * v12);
        char v17 = static NSObject.== infix(_:_:)(v16, a2);

        if ((v17 & 1) != 0) {
          goto LABEL_6;
        }
      }
    }

    swift_release(v8);
    __break(1u);
  }

  uint64_t result = swift_release(v8);
  __break(1u);
  return result;
}

unint64_t sub_1003D3490(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = *(void *)(v3 + 40);
        uint64_t v11 = *(void **)(*(void *)(v3 + 48) + 8 * v6);
        uint64_t v12 = static String._unconditionallyBridgeFromObjectiveC(_:)(v11);
        uint64_t v14 = v13;
        Hasher.init(_seed:)(v24, v10);
        id v15 = v11;
        String.hash(into:)(v24, v12, v14);
        Swift::Int v16 = Hasher._finalize()();

        swift_bridgeObjectRelease(v14);
        unint64_t v17 = v16 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v17 < v9) {
            goto LABEL_5;
          }
        }

        else if (v17 >= v9)
        {
          goto LABEL_11;
        }

        if (v2 >= (uint64_t)v17)
        {
LABEL_11:
          uint64_t v18 = *(void *)(v3 + 48);
          Swift::Int v19 = (void *)(v18 + 8 * v2);
          uint64_t v20 = (void *)(v18 + 8 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v19 >= v20 + 1))
          {
            *Swift::Int v19 = *v20;
            int64_t v2 = v6;
          }
        }

unint64_t sub_1003D3670(unint64_t result)
{
  unint64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      uint64_t v8 = *(unsigned __int8 *)(*(void *)(v3 + 48) + v6);
      Hasher.init(_seed:)(v12, *(void *)(v3 + 40));
      __asm { BR              X8 }
    }

    *(void *)(v4 + ((v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v9 = *(void *)(v3 + 16);
  BOOL v10 = __OFSUB__(v9, 1LL);
  uint64_t v11 = v9 - 1;
  if (v10)
  {
    __break(1u);
    JUMPOUT(0x1003D3A98LL);
  }

  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v11;
  ++*(_DWORD *)(v3 + 36);
  return result;
}

unint64_t sub_1003D3AEC(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v11 = v4;
        uint64_t v12 = (unsigned __int8 *)(*(void *)(v3 + 48) + 24 * v6);
        Swift::UInt v13 = *v12;
        uint64_t v14 = *((void *)v12 + 1);
        uint64_t v15 = *((void *)v12 + 2);
        Hasher.init(_seed:)(v24, *(void *)(v3 + 40));
        Hasher._combine(_:)(v13);
        swift_bridgeObjectRetain(v15);
        String.hash(into:)(v24, v14, v15);
        Swift::Int v16 = Hasher._finalize()();
        swift_bridgeObjectRelease(v15);
        Swift::Int v17 = v16 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v17 < v9)
          {
            uint64_t v4 = v11;
          }

          else
          {
            uint64_t v4 = v11;
            if (v2 >= v17) {
              goto LABEL_12;
            }
          }
        }

        else
        {
          uint64_t v4 = v11;
          if (v17 >= v9 || v2 >= v17)
          {
LABEL_12:
            uint64_t v18 = *(void *)(v3 + 48);
            unint64_t v19 = v18 + 24 * v2;
            uint64_t v20 = (__int128 *)(v18 + 24 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v19 >= (unint64_t)v20 + 24))
            {
              __int128 v10 = *v20;
              *(void *)(v19 + swift_weakDestroy(v0 + 16) = *((void *)v20 + 2);
              *(_OWORD *)unint64_t v19 = v10;
              int64_t v2 = v6;
            }
          }
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v21 = *(void *)(v3 + 16);
  BOOL v22 = __OFSUB__(v21, 1LL);
  uint64_t v23 = v21 - 1;
  if (v22)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + swift_weakDestroy(v0 + 16) = v23;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

uint64_t sub_1003D3CF4( int64_t a1, uint64_t (*a2)(uint64_t), unint64_t *a3, uint64_t a4)
{
  unint64_t v39 = a3;
  uint64_t v40 = a4;
  uint64_t v38 = a2;
  uint64_t v6 = a2(0LL);
  uint64_t v41 = *(void *)(v6 - 8);
  uint64_t result = __chkstk_darwin(v6);
  unint64_t v9 = (char *)&v34 - v8;
  uint64_t v10 = *v4;
  uint64_t v11 = *v4 + 56;
  uint64_t v12 = -1LL << *(_BYTE *)(*v4 + 32);
  unint64_t v13 = (a1 + 1) & ~v12;
  if (((1LL << v13) & *(void *)(v11 + 8 * (v13 >> 6))) != 0)
  {
    uint64_t v35 = v4;
    uint64_t v14 = ~v12;
    swift_retain();
    uint64_t v15 = _HashTable.previousHole(before:)(a1, v11, v14);
    if ((*(void *)(v11 + 8 * (v13 >> 6)) & (1LL << v13)) != 0)
    {
      unint64_t v37 = (v15 + 1) & v14;
      uint64_t v16 = *(void *)(v41 + 72);
      char v36 = *(void (**)(char *, unint64_t, uint64_t))(v41 + 16);
      do
      {
        uint64_t v17 = v11;
        uint64_t v18 = v16;
        int64_t v19 = v16 * v13;
        v36(v9, *(void *)(v10 + 48) + v16 * v13, v6);
        uint64_t v20 = *(void *)(v10 + 40);
        uint64_t v21 = sub_100007864(v39, v38, v40);
        uint64_t v22 = dispatch thunk of Hashable._rawHashValue(seed:)(v20, v6, v21);
        (*(void (**)(char *, uint64_t))(v41 + 8))(v9, v6);
        unint64_t v23 = v22 & v14;
        if (a1 >= (uint64_t)v37)
        {
          if (v23 >= v37 && a1 >= (uint64_t)v23)
          {
LABEL_16:
            uint64_t v26 = *(void *)(v10 + 48);
            uint64_t v16 = v18;
            int64_t v27 = v18 * a1;
            unint64_t v28 = v26 + v18 * a1;
            uint64_t v29 = v26 + v19;
            if (v18 * a1 < v19 || v28 >= v29 + v18)
            {
              swift_arrayInitWithTakeFrontToBack(v28, v29, 1LL, v6);
              a1 = v13;
            }

            else
            {
              a1 = v13;
              if (v27 != v19)
              {
                swift_arrayInitWithTakeBackToFront(v28, v29);
                a1 = v13;
              }
            }

            goto LABEL_5;
          }
        }

        else if (v23 >= v37 || a1 >= (uint64_t)v23)
        {
          goto LABEL_16;
        }

        uint64_t v16 = v18;
LABEL_5:
        unint64_t v13 = (v13 + 1) & v14;
        uint64_t v11 = v17;
      }

      while (((*(void *)(v17 + ((v13 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v13) & 1) != 0);
    }

    *(void *)(v11 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a1) - 1;
    uint64_t result = swift_release(v10);
    uint64_t v4 = v35;
  }

  else
  {
    *(void *)(v11 + (((unint64_t)a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a1) - 1;
  }

  uint64_t v30 = *v4;
  uint64_t v31 = *(void *)(*v4 + 16);
  BOOL v32 = __OFSUB__(v31, 1LL);
  uint64_t v33 = v31 - 1;
  if (v32)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v30 + swift_weakDestroy(v0 + 16) = v33;
    ++*(_DWORD *)(v30 + 36);
  }

  return result;
}

unint64_t sub_1003D3F7C(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain();
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      uint64_t v10 = type metadata accessor for AnyCancellable(0LL);
      uint64_t v11 = sub_100007864( (unint64_t *)&unk_1009AC370,  (uint64_t (*)(uint64_t))&type metadata accessor for AnyCancellable,  (uint64_t)&protocol conformance descriptor for AnyCancellable);
      do
      {
        uint64_t v12 = dispatch thunk of Hashable._rawHashValue(seed:)(*(void *)(v3 + 40), v10, v11) & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v12 >= v9 && v2 >= v12)
          {
LABEL_16:
            uint64_t v15 = *(void *)(v3 + 48);
            uint64_t v16 = (void *)(v15 + 8 * v2);
            uint64_t v17 = (void *)(v15 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v16 >= v17 + 1))
            {
              *uint64_t v16 = *v17;
              int64_t v2 = v6;
            }
          }
        }

        else if (v12 >= v9 || v2 >= v12)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release();
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v18 = *(void *)(v3 + 16);
  BOOL v19 = __OFSUB__(v18, 1LL);
  uint64_t v20 = v18 - 1;
  if (v19)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + swift_weakDestroy(v0 + 16) = v20;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

unint64_t sub_1003D4150(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        uint64_t v10 = (uint64_t *)(*(void *)(v3 + 48) + 16 * v6);
        uint64_t v11 = *v10;
        uint64_t v12 = v10[1];
        Hasher.init(_seed:)(v21, *(void *)(v3 + 40));
        swift_bridgeObjectRetain(v12);
        String.hash(into:)(v21, v11, v12);
        Swift::Int v13 = Hasher._finalize()();
        swift_bridgeObjectRelease(v12);
        unint64_t v14 = v13 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v14 < v9) {
            goto LABEL_5;
          }
        }

        else if (v14 >= v9)
        {
          goto LABEL_11;
        }

        if (v2 >= (uint64_t)v14)
        {
LABEL_11:
          uint64_t v15 = *(void *)(v3 + 48);
          uint64_t v16 = (_OWORD *)(v15 + 16 * v2);
          uint64_t v17 = (_OWORD *)(v15 + 16 * v6);
          if (v2 != v6 || (int64_t v2 = v6, v16 >= v17 + 1))
          {
            *uint64_t v16 = *v17;
            int64_t v2 = v6;
          }
        }

uint64_t sub_1003D4314(unint64_t a1)
{
  uint64_t v33 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v3 = *(void *)(v33 - 8);
  uint64_t result = __chkstk_darwin(v33);
  BOOL v32 = (char *)&v29 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *v1;
  uint64_t v7 = *v1 + 56;
  uint64_t v8 = -1LL << *(_BYTE *)(*v1 + 32);
  unint64_t v9 = (a1 + 1) & ~v8;
  if (((1LL << v9) & *(void *)(v7 + 8 * (v9 >> 6))) != 0)
  {
    uint64_t v29 = v1;
    uint64_t v10 = ~v8;
    swift_retain();
    int64_t v11 = a1;
    uint64_t v12 = _HashTable.previousHole(before:)(a1, v7, v10);
    if ((*(void *)(v7 + 8 * (v9 >> 6)) & (1LL << v9)) != 0)
    {
      unint64_t v13 = (v12 + 1) & v10;
      uint64_t v14 = *(void *)(v3 + 72);
      uint64_t v30 = v14;
      uint64_t v31 = v7;
      uint64_t v15 = (uint64_t)v32;
      do
      {
        int64_t v16 = v14 * v9;
        sub_10001DC4C(*(void *)(v6 + 48) + v14 * v9, v15, type metadata accessor for BeaconIdentifier);
        Hasher.init(_seed:)(v34, *(void *)(v6 + 40));
        uint64_t v17 = type metadata accessor for UUID(0LL);
        uint64_t v18 = sub_100007864( &qword_1009A58F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        dispatch thunk of Hashable.hash(into:)(v34, v17, v18);
        dispatch thunk of Hashable.hash(into:)(v34, v17, v18);
        Swift::Int v19 = Hasher._finalize()();
        sub_100018C68(v15, type metadata accessor for BeaconIdentifier);
        Swift::Int v20 = v19 & v10;
        if (v11 >= (uint64_t)v13)
        {
          if (v20 < v13)
          {
            uint64_t v14 = v30;
            uint64_t v7 = v31;
            goto LABEL_6;
          }

          uint64_t v14 = v30;
          uint64_t v7 = v31;
          if (v11 < v20) {
            goto LABEL_6;
          }
        }

        else
        {
          uint64_t v14 = v30;
          uint64_t v7 = v31;
          if (v20 < v13 && v11 < v20) {
            goto LABEL_6;
          }
        }

        uint64_t v21 = *(void *)(v6 + 48);
        int64_t v22 = v14 * v11;
        unint64_t v23 = v21 + v14 * v11;
        uint64_t v24 = v21 + v16;
        if (v14 * v11 < v16 || v23 >= v24 + v14)
        {
          swift_arrayInitWithTakeFrontToBack(v23, v24, 1LL, v33);
        }

        else
        {
          int64_t v11 = v9;
          if (v22 == v16) {
            goto LABEL_6;
          }
          swift_arrayInitWithTakeBackToFront(v23, v24);
        }

        int64_t v11 = v9;
LABEL_6:
        unint64_t v9 = (v9 + 1) & v10;
      }

      while (((*(void *)(v7 + ((v9 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v9) & 1) != 0);
    }

    *(void *)(v7 + (((unint64_t)v11 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v11) - 1;
    uint64_t result = swift_release();
    uint64_t v1 = v29;
  }

  else
  {
    *(void *)(v7 + ((a1 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << a1) - 1;
  }

  uint64_t v25 = *v1;
  uint64_t v26 = *(void *)(*v1 + 16);
  BOOL v27 = __OFSUB__(v26, 1LL);
  uint64_t v28 = v26 - 1;
  if (v27)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v25 + swift_weakDestroy(v0 + 16) = v28;
    ++*(_DWORD *)(v25 + 36);
  }

  return result;
}

unint64_t sub_1003D45EC(unint64_t result, unint64_t *a2, uint64_t *a3)
{
  int64_t v4 = result;
  uint64_t v5 = *v3;
  uint64_t v6 = *v3 + 56;
  uint64_t v7 = -1LL << *(_BYTE *)(*v3 + 32);
  unint64_t v8 = (result + 1) & ~v7;
  if (((1LL << v8) & *(void *)(v6 + 8 * (v8 >> 6))) != 0)
  {
    uint64_t v11 = ~v7;
    swift_retain();
    uint64_t v12 = _HashTable.previousHole(before:)(v4, v6, v11);
    if ((*(void *)(v6 + 8 * (v8 >> 6)) & (1LL << v8)) != 0)
    {
      unint64_t v13 = (v12 + 1) & v11;
      uint64_t v14 = sub_1000372EC(a2, a3, (uint64_t)&protocol conformance descriptor for XPCSession<A>);
      do
      {
        uint64_t v15 = *(void *)(v5 + 40);
        uint64_t v16 = sub_100004AEC(a3);
        uint64_t v17 = dispatch thunk of Hashable._rawHashValue(seed:)(v15, v16, v14) & v11;
        if (v4 >= (uint64_t)v13)
        {
          if (v17 >= v13 && v4 >= v17)
          {
LABEL_16:
            uint64_t v20 = *(void *)(v5 + 48);
            uint64_t v21 = (void *)(v20 + 8 * v4);
            int64_t v22 = (void *)(v20 + 8 * v8);
            if (v4 != v8 || (int64_t v4 = v8, v21 >= v22 + 1))
            {
              *uint64_t v21 = *v22;
              int64_t v4 = v8;
            }
          }
        }

        else if (v17 >= v13 || v4 >= v17)
        {
          goto LABEL_16;
        }

        unint64_t v8 = (v8 + 1) & v11;
      }

      while (((*(void *)(v6 + ((v8 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v8) & 1) != 0);
    }

    *(void *)(v6 + (((unint64_t)v4 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v4) - 1;
    uint64_t result = swift_release();
  }

  else
  {
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v23 = *(void *)(v5 + 16);
  BOOL v24 = __OFSUB__(v23, 1LL);
  uint64_t v25 = v23 - 1;
  if (v24)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v5 + swift_weakDestroy(v0 + 16) = v25;
    ++*(_DWORD *)(v5 + 36);
  }

  return result;
}

unint64_t sub_1003D47C0(unint64_t result)
{
  int64_t v2 = result;
  uint64_t v3 = *v1;
  uint64_t v4 = *v1 + 56LL;
  uint64_t v5 = -1LL << *(_BYTE *)(*v1 + 32LL);
  unint64_t v6 = (result + 1) & ~v5;
  if (((1LL << v6) & *(void *)(v4 + 8 * (v6 >> 6))) != 0)
  {
    uint64_t v7 = ~v5;
    swift_retain(*v1);
    uint64_t v8 = _HashTable.previousHole(before:)(v2, v4, v7);
    if ((*(void *)(v4 + 8 * (v6 >> 6)) & (1LL << v6)) != 0)
    {
      unint64_t v9 = (v8 + 1) & v7;
      do
      {
        Swift::Int v10 = *(void *)(v3 + 40);
        id v11 = *(id *)(*(void *)(v3 + 48) + 8 * v6);
        Swift::Int v12 = NSObject._rawHashValue(seed:)(v10);

        Swift::Int v13 = v12 & v7;
        if (v2 >= (uint64_t)v9)
        {
          if (v13 >= v9 && v2 >= v13)
          {
LABEL_16:
            uint64_t v16 = *(void *)(v3 + 48);
            uint64_t v17 = (void *)(v16 + 8 * v2);
            uint64_t v18 = (void *)(v16 + 8 * v6);
            if (v2 != v6 || (int64_t v2 = v6, v17 >= v18 + 1))
            {
              *uint64_t v17 = *v18;
              int64_t v2 = v6;
            }
          }
        }

        else if (v13 >= v9 || v2 >= v13)
        {
          goto LABEL_16;
        }

        unint64_t v6 = (v6 + 1) & v7;
      }

      while (((*(void *)(v4 + ((v6 >> 3) & 0xFFFFFFFFFFFFF8LL)) >> v6) & 1) != 0);
    }

    *(void *)(v4 + (((unint64_t)v2 >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << v2) - 1;
    uint64_t result = swift_release(v3);
  }

  else
  {
    *(void *)(v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) &= (-1LL << result) - 1;
  }

  uint64_t v19 = *(void *)(v3 + 16);
  BOOL v20 = __OFSUB__(v19, 1LL);
  uint64_t v21 = v19 - 1;
  if (v20)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v3 + swift_weakDestroy(v0 + 16) = v21;
    ++*(_DWORD *)(v3 + 36);
  }

  return result;
}

uint64_t sub_1003D4960(uint64_t a1)
{
  return sub_10003389C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1003D4974(void *a1)
{
  return sub_1000339F8(0, a1[2], 0, a1);
}

uint64_t sub_1003D4988(void *a1)
{
  return sub_100033B88(0, a1[2], 0, a1);
}

uint64_t sub_1003D499C(void *a1)
{
  return sub_100034024(0, a1[2], 0, a1);
}

uint64_t sub_1003D49B0(void *a1)
{
  return sub_100034038(0, a1[2], 0, a1);
}

uint64_t sub_1003D49C4(uint64_t a1)
{
  return sub_10003430C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1003D49D8(void *a1)
{
  return sub_100033B74(0, a1[2], 0, a1);
}

uint64_t sub_1003D49EC(uint64_t a1)
{
  return specialized _ContiguousArrayBuffer._consumeAndCreateNew(bufferIsUnique:minimumCapacity:growForAppend:)( 0LL,  *(void *)(a1 + 16),  0LL,  a1);
}

uint64_t sub_1003D4A00(void *a1)
{
  return sub_100034DA0(0, a1[2], 0, a1);
}

uint64_t sub_1003D4A14(void *a1)
{
  return sub_100033B9C(0, a1[2], 0, a1);
}

uint64_t sub_1003D4A28(void *a1)
{
  return sub_100034DB4(0, a1[2], 0, a1);
}

uint64_t sub_1003D4A3C(void *a1)
{
  return sub_1000350D0(0, a1[2], 0, a1);
}

uint64_t sub_1003D4A50(void *a1)
{
  return sub_10003540C(0, a1[2], 0, a1);
}

uint64_t sub_1003D4A64(void *a1)
{
  return sub_1000355B0(0, a1[2], 0, a1);
}

uint64_t sub_1003D4A78(void *a1)
{
  return sub_100034D8C(0, a1[2], 0, a1);
}

uint64_t sub_1003D4A8C(void *a1)
{
  return sub_1000355C4(0, a1[2], 0, a1);
}

uint64_t sub_1003D4AA0(uint64_t a1)
{
  return sub_1000355D8(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1003D4AB4(void *a1)
{
  return sub_100035754(0, a1[2], 0, a1);
}

uint64_t sub_1003D4AC8(uint64_t a1)
{
  return sub_10003404C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1003D4ADC(uint64_t a1)
{
  return sub_10003577C(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1003D4AF0(void *a1)
{
  return sub_100035DA8(0, a1[2], 0, a1);
}

uint64_t sub_1003D4B04(uint64_t a1)
{
  return sub_100035DBC(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1003D4B18(void *a1)
{
  return sub_100036358(0, a1[2], 0, a1);
}

uint64_t sub_1003D4B2C(void *a1)
{
  return sub_100035768(0, a1[2], 0, a1);
}

uint64_t sub_1003D4B40(void *a1)
{
  return sub_1000364EC(0, a1[2], 0, a1);
}

uint64_t sub_1003D4B54(uint64_t a1)
{
  return sub_1000335AC(0, *(void *)(a1 + 16), 0, (char *)a1);
}

uint64_t sub_1003D4B68(void *a1)
{
  return sub_100036DCC(0, a1[2], 0, a1);
}

uint64_t sub_1003D4B7C(void *a1)
{
  return sub_100036FC0(0, a1[2], 0, a1);
}

uint64_t sub_1003D4B90(void *a1)
{
  return sub_100036FD4(0, a1[2], 0, a1);
}

uint64_t sub_1003D4BA4(void *a1)
{
  return sub_100036FE8(0, a1[2], 0, a1);
}

void sub_1003D4BB8(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_1003D4C20()
{
  uint64_t v5 = v2;
  __int16 v6 = v3;
  char v7 = BYTE2(v3);
  char v8 = BYTE3(v3);
  char v9 = BYTE4(v3);
  char v10 = BYTE5(v3);
  return Data._Representation.replaceSubrange(_:with:count:)(v1, v0, &v5, BYTE6(v3));
}

uint64_t sub_1003D4DB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6)
{
  uint64_t result = __DataStorage._bytes.getter();
  uint64_t v11 = result;
  if (result)
  {
    uint64_t result = __DataStorage._offset.getter();
    if (__OFSUB__(a1, result))
    {
LABEL_13:
      __break(1u);
      return result;
    }

    v11 += a1 - result;
  }

  BOOL v12 = __OFSUB__(a2, a1);
  uint64_t v13 = a2 - a1;
  if (v12)
  {
    __break(1u);
    goto LABEL_13;
  }

  uint64_t v14 = __DataStorage._length.getter();
  if (v14 >= v13) {
    uint64_t v15 = v13;
  }
  else {
    uint64_t v15 = v14;
  }
  if (v11) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = 0LL;
  }
  return Data._Representation.replaceSubrange(_:with:count:)(a5, a6, v11, v16);
}

uint64_t sub_1003D4E58(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  BOOL v4 = __OFADD__(a1, a2);
  uint64_t v5 = a1 + a2;
  if (v4)
  {
    __break(1u);
    JUMPOUT(0x1003D4EB8LL);
  }

  return ((uint64_t (*)(uint64_t))((char *)&loc_1003D4E70 + dword_1003D4EBC[a4 >> 62]))(v5);
}

uint64_t sub_1003D4ECC(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  return ((uint64_t (*)(void))((char *)&loc_1003D4EDC + dword_1003D4F84[a4 >> 62]))();
}

uint64_t sub_1003D4EF0@<X0>(uint64_t a1@<X0>, uint64_t a2@<X3>, int a3@<W8>)
{
  if (BYTE6(a2) < a1 || a1 < 0)
  {
    __break(1u);
    JUMPOUT(0x1003D4F7CLL);
  }

  return ((uint64_t (*)(void))((char *)&loc_1003D4F2C + dword_1003D4F94[a3]))();
}

uint64_t sub_1003D4FA4(uint64_t a1, uint64_t a2)
{
  uint64_t v6 = v2[2];
  uint64_t v7 = v2[3];
  uint64_t v8 = v2[4];
  uint64_t v9 = v2[5];
  uint64_t v10 = v2[6];
  uint64_t v11 = v2[7];
  BOOL v12 = (void *)swift_task_alloc(dword_1009AC06C);
  *(void *)(v3 + swift_weakDestroy(v0 + 16) = v12;
  *BOOL v12 = v3;
  v12[1] = sub_1000159BC;
  return sub_1003BB340(a1, a2, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_1003D5048()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = v3 | v8 | 7;
  unint64_t v11 = ((*(void *)(v7 + 64) + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL);
  v13(v0 + v9, v12);
  v13(v0 + v9 + *(int *)(v6 + 20), v12);
  return swift_deallocObject(v0, v11, v10);
}

uint64_t sub_1003D5124()
{
  uint64_t v2 = *(void *)(type metadata accessor for URL(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = *(void *)(v2 + 64);
  uint64_t v5 = *(void *)(type metadata accessor for BeaconIdentifier(0LL) - 8);
  uint64_t v6 = v0 + ((v3 + v4 + *(unsigned __int8 *)(v5 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v5 + 80));
  uint64_t v7 = (void *)swift_task_alloc(dword_1009AC084);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v1;
  v7[1] = sub_100015D58;
  return sub_1003BAD0C(v0 + v3, v6);
}

uint64_t sub_1003D51D4()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  unint64_t v5 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v17 = sub_100004AEC(&qword_1009B1040);
  uint64_t v6 = *(void *)(v17 - 8);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v5 + v7 + 16) & ~v7;
  unint64_t v9 = (*(void *)(v6 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v16 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v10 = *(void *)(v16 - 8);
  uint64_t v11 = *(unsigned __int8 *)(v10 + 80);
  uint64_t v12 = (v11 + v9 + 8) & ~v11;
  uint64_t v18 = v12 + *(void *)(v10 + 64);
  uint64_t v13 = v3 | v11 | v7 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  uint64_t v14 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v14(v0 + v4, v1);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v0 + v8, v17);
  swift_release();
  v14(v0 + v12, v1);
  v14(v0 + v12 + *(int *)(v16 + 20), v1);
  return swift_deallocObject(v0, v18, v13);
}

uint64_t sub_1003D5320(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for UUID(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = *(void *)(sub_100004AEC(&qword_1009B1040) - 8);
  unint64_t v8 = (v6 + *(unsigned __int8 *)(v7 + 80) + 16) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  unint64_t v9 = (*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v10 = *(void *)(v1 + 16);
  uint64_t v11 = *(void *)(v1 + 24);
  uint64_t v12 = v1 + v6;
  uint64_t v13 = *(void *)(v1 + v6);
  uint64_t v14 = *(void *)(v12 + 8);
  uint64_t v15 = *(void *)(v1 + v9);
  uint64_t v16 = (void *)swift_task_alloc(dword_1009AC09C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v16;
  *uint64_t v16 = v2;
  v16[1] = sub_100015D58;
  return sub_1003BE304(a1, v10, v11, v1 + v5, v13, v14, v1 + v8, v15);
}

uint64_t sub_1003D5440()
{
  uint64_t v1 = sub_100004AEC(&qword_1009B1040);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1003D54A4()
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(sub_100004AEC(&qword_1009B1040) - 8) + 80LL);
  uint64_t v3 = v0 + ((v2 + 16) & ~v2);
  uint64_t v4 = (void *)swift_task_alloc(dword_1009AC0AC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v4;
  *uint64_t v4 = v1;
  v4[1] = sub_100015D58;
  void v4[2] = v3;
  return swift_task_switch(sub_1003BE61C, 0LL, 0LL);
}

uint64_t sub_1003D5520()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1003D5544()
{
  uint64_t v2 = *(int **)(v0 + 16);
  uint64_t v3 = (void *)swift_task_alloc(dword_1009AC0BC);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v3;
  *uint64_t v3 = v1;
  v3[1] = sub_100015D58;
  return ((uint64_t (*)(int *))((char *)&dword_1009AC0B8 + dword_1009AC0B8))(v2);
}

uint64_t sub_1003D55A8(_BYTE *__src, _BYTE *a2)
{
  if (__src) {
    unint64_t v2 = a2 - __src;
  }
  else {
    unint64_t v2 = 0LL;
  }
  if ((v2 & 0x8000000000000000LL) != 0)
  {
    __break(1u);
LABEL_11:
    __break(1u);
  }

  if (v2 > 0xFF) {
    goto LABEL_11;
  }
  memset(__dst, 0, sizeof(__dst));
  char v5 = v2;
  if (__src && a2 != __src) {
    memcpy(__dst, __src, a2 - __src);
  }
  return *(void *)__dst;
}

uint64_t sub_1003D5668(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < 0)
  {
    __break(1u);
  }

  else
  {
    uint64_t v6 = type metadata accessor for Data.RangeReference(0LL);
    uint64_t result = swift_allocObject(v6, 32LL, 7LL);
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = v3;
  }

  return result;
}

uint64_t sub_1003D56E0(uint64_t a1, uint64_t a2)
{
  if (a1) {
    uint64_t v3 = a2 - a1;
  }
  else {
    uint64_t v3 = 0LL;
  }
  uint64_t v4 = type metadata accessor for __DataStorage(0LL);
  swift_allocObject(v4, *(unsigned int *)(v4 + 48), *(unsigned __int16 *)(v4 + 52));
  uint64_t result = __DataStorage.init(bytes:length:)(a1, v3);
  if (v3 < (uint64_t)0xFFFFFFFF80000000LL)
  {
    __break(1u);
    goto LABEL_9;
  }

  if (v3 > 0x7FFFFFFF)
  {
LABEL_9:
    __break(1u);
    goto LABEL_10;
  }

  if ((v3 & 0x80000000) == 0) {
    return v3 << 32;
  }
LABEL_10:
  __break(1u);
  return result;
}

uint64_t sub_1003D5760(uint64_t a1)
{
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009AC380);
  uint64_t v10 = sub_1000372EC( &qword_1009A7990,  (uint64_t *)&unk_1009AC380,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  v8[0] = a1;
  unint64_t v2 = sub_100012ED8(v8, v9);
  uint64_t v3 = (_BYTE *)(*v2 + 32LL);
  uint64_t v4 = &v3[*(void *)(*v2 + 16LL)];
  swift_bridgeObjectRetain(a1);
  sub_1003CBAA4(v3, v4, &v7);
  uint64_t v5 = v7;
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
  return v5;
}

void sub_1003D5810(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100022898(0LL, &qword_1009AC0E0, &OBJC_CLASS___NSFileHandle_ptr);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  id v7 = sub_1003C7584((uint64_t)v6, (SEL *)&selRef_fileHandleForReadingFromURL_error_);
  if (!v1)
  {
    unint64_t v8 = v7;
    id v18 = 0LL;
    unsigned __int8 v9 = [v7 seekToOffset:0 error:&v18];
    id v10 = v18;
    if ((v9 & 1) != 0)
    {
      id v11 = v18;
      id v12 = [v8 readDataOfLength:3];
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
      uint64_t v14 = v13;

      __asm { BR              X10 }
    }

    id v15 = v18;
    _convertNSErrorToError(_:)(v10);

    swift_willThrow(v16);
  }

uint64_t sub_1003D6290()
{
  uint64_t v1 = type metadata accessor for KeyGenerationBeaconInfo(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release();
  uint64_t v6 = type metadata accessor for UUID(0LL);
  id v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL);
  v7(v0 + v4, v6);
  uint64_t v8 = type metadata accessor for BeaconIdentifier(0LL);
  v7(v0 + v4 + *(int *)(v8 + 20), v6);
  uint64_t v9 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v9, v10);
  id v11 = (uint64_t *)(v0 + v4 + *(int *)(v1 + 24));
  unint64_t v12 = v11[1];
  if (v12 >> 60 != 15)
  {
    sub_100016F9C(*v11, v12);
    sub_100016F9C(v11[2], v11[3]);
    unint64_t v13 = v11[5];
    if (v13 >> 60 != 15) {
      sub_100016F9C(v11[4], v13);
    }
  }

  return swift_deallocObject( v0,  ((((((((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)
             + 15) & 0xFFFFFFFFFFFFFFF8LL)
           + 15) & 0xFFFFFFFFFFFFFFF8LL)
         + 8,
           v3 | 7);
}

uint64_t sub_1003D63C8(uint64_t a1)
{
  uint64_t v3 = *(void *)(type metadata accessor for KeyGenerationBeaconInfo(0LL) - 8);
  unint64_t v4 = (*(unsigned __int8 *)(v3 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  unint64_t v5 = (*(void *)(v3 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v1[2];
  uint64_t v8 = v1[3];
  uint64_t v9 = v1[4];
  uint64_t v10 = (uint64_t)v1 + v4;
  uint64_t v11 = *(void *)((char *)v1 + v5);
  uint64_t v12 = *(void *)((char *)v1 + v6);
  uint64_t v13 = *(void *)((char *)v1 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v14 = (void *)swift_task_alloc(dword_1009AC0FC);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_100015D58;
  return sub_1003BB738(a1, v7, v8, v9, v10, v11, v12, v13);
}

uint64_t sub_1003D64C0()
{
  uint64_t v1 = type metadata accessor for KeyGenerationBeaconInfo(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL);
  v7(v0 + v4, v6);
  uint64_t v8 = type metadata accessor for BeaconIdentifier(0LL);
  v7(v0 + v4 + *(int *)(v8 + 20), v6);
  uint64_t v9 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v9, v10);
  uint64_t v11 = (uint64_t *)(v0 + v4 + *(int *)(v1 + 24));
  unint64_t v12 = v11[1];
  if (v12 >> 60 != 15)
  {
    sub_100016F9C(*v11, v12);
    sub_100016F9C(v11[2], v11[3]);
    unint64_t v13 = v11[5];
    if (v13 >> 60 != 15) {
      sub_100016F9C(v11[4], v13);
    }
  }

  return swift_deallocObject( v0,  ((((((((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL)
             + 15) & 0xFFFFFFFFFFFFFFF8LL)
           + 15) & 0xFFFFFFFFFFFFFFF8LL)
         + 8,
           v3 | 7);
}

uint64_t sub_1003D65F0()
{
  uint64_t v2 = *(void *)(type metadata accessor for KeyGenerationBeaconInfo(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  unint64_t v4 = (*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v5 = (v4 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = *(void *)(v0 + 16);
  uint64_t v8 = v0 + v3;
  uint64_t v9 = *(void *)(v0 + v4);
  uint64_t v10 = *(void *)(v0 + v5);
  uint64_t v11 = *(void *)(v0 + v6);
  uint64_t v12 = *(void *)(v0 + ((v6 + 15) & 0xFFFFFFFFFFFFFFF8LL));
  unint64_t v13 = (void *)swift_task_alloc(dword_1009AC11C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v13;
  *unint64_t v13 = v1;
  v13[1] = sub_100015D58;
  return sub_1003BBA98(v7, v8, v9, v10, v11, v12);
}

uint64_t sub_1003D66CC(uint64_t a1)
{
  return sub_1003BE07C(a1, v1[2], v1[3], v1[4], v1[5], v1[6]);
}

uint64_t sub_1003D66DC(uint64_t a1)
{
  v1[13] = a1;
  uint64_t v2 = sub_100004AEC(&qword_1009AC1D0);
  v1[14] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo(0LL);
  v1[15] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[16] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[17] = swift_task_alloc(v5);
  v1[18] = swift_task_alloc(v5);
  v1[19] = swift_task_alloc(v5);
  v1[20] = swift_task_alloc(v5);
  v1[21] = swift_task_alloc(v5);
  v1[22] = swift_task_alloc(v5);
  v1[23] = swift_task_alloc(v5);
  v1[24] = swift_task_alloc(v5);
  v1[25] = swift_task_alloc(v5);
  v1[26] = swift_task_alloc(v5);
  v1[27] = swift_task_alloc(v5);
  v1[28] = swift_task_alloc(v5);
  v1[29] = swift_task_alloc(v5);
  unint64_t v6 = (*(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[30] = swift_task_alloc(v6);
  v1[31] = swift_task_alloc(v6);
  v1[32] = swift_task_alloc(v6);
  v1[33] = swift_task_alloc(v6);
  uint64_t v7 = type metadata accessor for DirectorySequence(0LL);
  v1[34] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v1[35] = v8;
  v1[36] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for URL(0LL);
  v1[37] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v1[38] = v10;
  unint64_t v11 = (*(void *)(v10 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[39] = swift_task_alloc(v11);
  v1[40] = swift_task_alloc(v11);
  v1[41] = swift_task_alloc(v11);
  v1[42] = swift_task_alloc(v11);
  v1[43] = swift_task_alloc(v11);
  v1[44] = swift_task_alloc(v11);
  return swift_task_switch(sub_1003D68FC, 0LL, 0LL);
}

uint64_t sub_1003D68FC()
{
  uint64_t v201 = v0 + 80;
  id v215 = [(id)objc_opt_self(NSFileManager) defaultManager];
  if (qword_10099B3C8 != -1) {
    goto LABEL_85;
  }
  while (1)
  {
    uint64_t v1 = *(void *)(v0 + 104);
    uint64_t v2 = *(void *)(v0 + 352);
    uint64_t v3 = *(void *)(v0 + 296);
    uint64_t v4 = *(void *)(v0 + 304);
    uint64_t v5 = type metadata accessor for Logger(0LL);
    sub_10000A720(v5, (uint64_t)qword_1009ABC80);
    uint64_t v209 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v4 + 16);
    uint64_t v6 = v209(v2, v1, v3);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.default.getter(v7);
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = *(void *)(v0 + 352);
    uint64_t v12 = *(void *)(v0 + 296);
    uint64_t v11 = *(void *)(v0 + 304);
    if (v9)
    {
      uint64_t v13 = swift_slowAlloc(22LL, -1LL);
      uint64_t v14 = swift_slowAlloc(32LL, -1LL);
      v223[0] = v14;
      *(_DWORD *)uint64_t v13 = 141558275;
      *(void *)(v0 + 96) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 96, v0 + 104, v13 + 4, v13 + 12);
      *(_WORD *)(v13 + 12) = 2081;
      uint64_t v15 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter(v12, v15);
      *(void *)(v0 + 72) = sub_1003F11D4(v16, v17, v223);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v201, v13 + 14, v13 + 22);
      swift_bridgeObjectRelease();
      uint64_t v216 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v216(v10, v12);
      _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Verify file integrity for directory: %{private,mask.hash}s",  (uint8_t *)v13,  0x16u);
      swift_arrayDestroy(v14, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v14, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);
    }

    else
    {
      uint64_t v216 = *(void (**)(uint64_t, uint64_t))(v11 + 8);
      v216(*(void *)(v0 + 352), *(void *)(v0 + 296));
    }

    uint64_t v18 = *(void *)(v0 + 296);
    uint64_t v19 = *(void *)(v0 + 304);
    uint64_t v20 = *(void *)(v0 + 264);
    uint64_t v21 = NSFileManager.flatSequence(at:includingPropertiesForKeys:)(*(void *)(v0 + 104), 0LL);
    DirectorySequence.next()(v21);
    uint64_t v213 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v19 + 48);
    if (v213(v20, 1LL, v18) == 1)
    {
      int64_t v22 = _swiftEmptyArrayStorage;
    }

    else
    {
      int64_t v22 = _swiftEmptyArrayStorage;
      os_log_t log = *(os_log_t *)(v0 + 120);
      uint64_t v182 = *(void *)(v0 + 128);
      uint64_t v218 = *(uint64_t (**)(void, void, void))(*(void *)(v0 + 304) + 32LL);
      do
      {
        unint64_t v206 = (unint64_t)v22;
        while (1)
        {
          uint64_t v25 = v218(*(void *)(v0 + 344), *(void *)(v0 + 264), *(void *)(v0 + 296));
          uint64_t v26 = URL.pathExtension.getter(v25);
          if (v26 == 0x70616D79656BLL && v27 == 0xE600000000000000LL) {
            break;
          }
          char v29 = _stringCompareWithSmolCheck(_:_:expecting:)(v26, v27, 0x70616D79656BLL, 0xE600000000000000LL, 0LL);
          swift_bridgeObjectRelease();
          if ((v29 & 1) != 0) {
            goto LABEL_18;
          }
          uint64_t v30 = v209(*(void *)(v0 + 336), *(void *)(v0 + 344), *(void *)(v0 + 296));
          uint64_t v31 = (os_log_s *)Logger.logObject.getter(v30);
          os_log_type_t v32 = static os_log_type_t.error.getter(v31);
          BOOL v33 = os_log_type_enabled(v31, v32);
          uint64_t v34 = *(void *)(v0 + 336);
          uint64_t v35 = *(void *)(v0 + 296);
          if (v33)
          {
            uint64_t v36 = swift_slowAlloc(12LL, -1LL);
            uint64_t v37 = swift_slowAlloc(32LL, -1LL);
            v223[0] = v37;
            *(_DWORD *)uint64_t v36 = 136315138;
            uint64_t v38 = URL.path.getter(v37);
            *(void *)(v36 + 4) = sub_1003F11D4(v38, v39, v223);
            swift_bridgeObjectRelease();
            v216(v34, v35);
            _os_log_impl((void *)&_mh_execute_header, v31, v32, "Removing unexpected file: %s", (uint8_t *)v36, 0xCu);
            swift_arrayDestroy(v37, 1LL, (char *)&type metadata for Any + 8);
            swift_slowDealloc(v37, -1LL, -1LL);
            swift_slowDealloc(v36, -1LL, -1LL);
          }

          else
          {
            v216(*(void *)(v0 + 336), *(void *)(v0 + 296));
          }

          URL._bridgeToObjectiveC()(v42);
          int64_t v44 = v43;
          *(void *)(v0 + 40) = 0LL;
          unsigned int v45 = [v215 removeItemAtURL:v43 error:v0 + 40];

          unint64_t v46 = *(void **)(v0 + 40);
          if (v45)
          {
            id v47 = v46;
          }

          else
          {
            id v48 = v46;
            uint64_t v49 = _convertNSErrorToError(_:)(v46);

            swift_willThrow(v50);
            swift_errorRelease(v49);
          }

          uint64_t v51 = ((uint64_t (*)(void, void))v216)(*(void *)(v0 + 344), *(void *)(v0 + 296));
          uint64_t v23 = *(void *)(v0 + 296);
          uint64_t v24 = *(void *)(v0 + 264);
          DirectorySequence.next()(v51);
          if (v213(v24, 1LL, v23) == 1)
          {
            int64_t v22 = (void *)v206;
            goto LABEL_31;
          }
        }

        swift_bridgeObjectRelease();
LABEL_18:
        uint64_t v40 = *(void *)(v0 + 344);
        uint64_t v41 = objc_autoreleasePoolPush();
        sub_1003D5810(v40);
        char v53 = v52;
        LODWORD(v40) = v54;
        uint64_t v55 = *(void *)(v0 + 344);
        uint64_t v56 = *(void *)(v0 + 296);
        unint64_t v57 = HIDWORD(v52);
        uint64_t v58 = *(void *)(v0 + 232);
        unint64_t v177 = HIDWORD(v54);
        uint64_t v179 = *(void *)(v0 + 224);
        objc_autoreleasePoolPop(v41);
        v209(v58, v55, v56);
        uint64_t v59 = v58 + *((int *)log + 5);
        *(_BYTE *)uint64_t v59 = v53;
        *(_DWORD *)(v59 + 4) = v57;
        *(_DWORD *)(v59 + 8) = v40;
        *(_DWORD *)(v59 + 12) = v177;
        sub_10001DC4C(v58, v179, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        unint64_t v60 = v206;
        char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v206);
        if ((isUniquelyReferenced_nonNull_native & 1) == 0) {
          unint64_t v60 = sub_1004C65D8(0, *(void *)(v206 + 16) + 1LL, 1, v206);
        }
        unint64_t v63 = *(void *)(v60 + 16);
        unint64_t v62 = *(void *)(v60 + 24);
        unint64_t v64 = v63 + 1;
        if (v63 >= v62 >> 1)
        {
          uint64_t v71 = sub_1004C65D8(v62 > 1, v63 + 1, 1, v60);
          unint64_t v64 = v63 + 1;
          unint64_t v60 = v71;
        }

        uint64_t v65 = *(void *)(v0 + 344);
        uint64_t v66 = *(void *)(v0 + 296);
        uint64_t v67 = *(void *)(v0 + 264);
        uint64_t v68 = *(void *)(v0 + 224);
        uint64_t v69 = *(void *)(v0 + 232);
        *(void *)(v60 + swift_weakDestroy(v0 + 16) = v64;
        sub_10002218C( v68,  v60 + ((*(unsigned __int8 *)(v182 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v182 + 80))
        + *(void *)(v182 + 72) * v63,
          type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        sub_100018C68(v69, type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
        uint64_t v70 = ((uint64_t (*)(uint64_t, uint64_t))v216)(v65, v66);
        DirectorySequence.next()(v70);
        int64_t v22 = (void *)v60;
      }

      while (v213(v67, 1LL, v66) != 1);
    }

LABEL_82:
  swift_bridgeObjectRelease();
  uint64_t v167 = *(void *)(v0 + 344);
  uint64_t v168 = *(void *)(v0 + 352);
  uint64_t v170 = *(void *)(v0 + 328);
  uint64_t v169 = *(void *)(v0 + 336);
  uint64_t v172 = *(void *)(v0 + 312);
  uint64_t v171 = *(void *)(v0 + 320);
  uint64_t v173 = *(void *)(v0 + 288);
  uint64_t v175 = *(void *)(v0 + 256);
  uint64_t v174 = *(void *)(v0 + 264);
  uint64_t v184 = *(void *)(v0 + 248);
  uint64_t v185 = *(void *)(v0 + 240);
  uint64_t v187 = *(void *)(v0 + 232);
  uint64_t v189 = *(void *)(v0 + 224);
  uint64_t v190 = *(void *)(v0 + 216);
  uint64_t v193 = *(void *)(v0 + 208);
  uint64_t v196 = *(void *)(v0 + 200);
  os_log_t v200 = *(os_log_t *)(v0 + 192);
  uint64_t v204 = *(void *)(v0 + 184);
  uint64_t v205 = *(void *)(v0 + 176);
  uint64_t v208 = *(void *)(v0 + 168);
  uint64_t v211 = *(void *)(v0 + 160);
  uint64_t v212 = *(void *)(v0 + 152);
  uint64_t v214 = *(void *)(v0 + 144);
  uint64_t v217 = *(void *)(v0 + 136);
  uint64_t v222 = *(void *)(v0 + 112);

  sub_100015794(v175, (uint64_t *)&unk_1009A34D0);
  swift_task_dealloc(v168);
  swift_task_dealloc(v167);
  swift_task_dealloc(v169);
  swift_task_dealloc(v170);
  swift_task_dealloc(v171);
  swift_task_dealloc(v172);
  swift_task_dealloc(v173);
  swift_task_dealloc(v174);
  swift_task_dealloc(v175);
  swift_task_dealloc(v184);
  swift_task_dealloc(v185);
  swift_task_dealloc(v187);
  swift_task_dealloc(v189);
  swift_task_dealloc(v190);
  swift_task_dealloc(v193);
  swift_task_dealloc(v196);
  swift_task_dealloc(v200);
  swift_task_dealloc(v204);
  swift_task_dealloc(v205);
  swift_task_dealloc(v208);
  swift_task_dealloc(v211);
  swift_task_dealloc(v212);
  swift_task_dealloc(v214);
  swift_task_dealloc(v217);
  swift_task_dealloc(v222);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

        if ((v87 & 1) != 0) {
          goto LABEL_139;
        }
        int v95 = (uint64_t *)(v62 + 16 * v64);
        unint64_t v97 = *v95;
        uint64_t v96 = v95[1];
        uint64_t v75 = __OFSUB__(v96, v97);
        unint64_t v98 = v96 - v97;
        if (v75) {
          goto LABEL_142;
        }
        if (v98 < v86) {
          goto LABEL_99;
        }
LABEL_90:
        uint64_t v103 = v64 - 1;
        if (v64 - 1 >= v60)
        {
          __break(1u);
LABEL_132:
          __break(1u);
LABEL_133:
          __break(1u);
LABEL_134:
          __break(1u);
LABEL_135:
          __break(1u);
LABEL_136:
          __break(1u);
LABEL_137:
          __break(1u);
LABEL_138:
          __break(1u);
LABEL_139:
          __break(1u);
LABEL_140:
          __break(1u);
LABEL_141:
          __break(1u);
LABEL_142:
          __break(1u);
LABEL_143:
          __break(1u);
LABEL_144:
          __break(1u);
LABEL_145:
          __break(1u);
LABEL_146:
          __break(1u);
LABEL_147:
          __break(1u);
LABEL_148:
          __break(1u);
LABEL_149:
          __break(1u);
LABEL_150:
          __break(1u);
LABEL_151:
          __break(1u);
LABEL_152:
          __break(1u);
LABEL_153:
          __break(1u);
          goto LABEL_154;
        }

        if (!*v160) {
          goto LABEL_156;
        }
        uint64_t v104 = a2;
        uint64_t v105 = v31;
        uint64_t v106 = v62;
        uint64_t v107 = (uint64_t *)(v62 + 16 * v103);
        uint64_t v108 = *v107;
        uint64_t v109 = (void *)(v106 + 16 * v64);
        uint64_t v110 = v109[1];
        sub_100549968( *v160 + *(void *)(v158 + 72) * *v107,  *v160 + *(void *)(v158 + 72) * *v109,  *v160 + *(void *)(v158 + 72) * v110,  v156,  (uint64_t (*)(char *, char *))v161,  v104);
        if (v63) {
          goto LABEL_128;
        }
        if (v110 < v108) {
          goto LABEL_132;
        }
        if (v64 > *((void *)v105 + 2)) {
          goto LABEL_133;
        }
        os_log_s *v107 = v108;
        unint64_t v62 = v154;
        *(void *)(v154 + 16 * v103 + 8) = v110;
        uint64_t v111 = *((void *)v105 + 2);
        if (v64 >= v111) {
          goto LABEL_134;
        }
        uint64_t v31 = v105;
        unint64_t v60 = v111 - 1;
        memmove(v109, v109 + 2, 16 * (v111 - 1 - v64));
        *((void *)v105 + 2) = v111 - 1;
        a2 = v104;
        if (v111 <= 2) {
          goto LABEL_99;
        }
      }
    }

    unint64_t v60 = 1LL;
    unint64_t v63 = v159;
LABEL_99:
    unint64_t v159 = v63;
    uint64_t v25 = v160[1];
    uint64_t v30 = v152;
    char v29 = v142;
    if (v152 >= v25) {
      goto LABEL_114;
    }
  }

uint64_t sub_1003D80E8(uint64_t a1)
{
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_1009A34D0);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v15 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for URL(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  BOOL v9 = (char *)&v15 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_10001581C(a1, (uint64_t)v5, (uint64_t *)&unk_1009A34D0);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6) == 1)
  {
    sub_100015794((uint64_t)v5, (uint64_t *)&unk_1009A34D0);
    return 0LL;
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))(v9, v5, v6);
    uint64_t v11 = objc_autoreleasePoolPush();
    sub_1003D5810((uint64_t)v9);
    if (v1)
    {
      objc_autoreleasePoolPop(v11);
      return (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
    }

    else
    {
      unsigned int v13 = v12;
      unint64_t v14 = HIDWORD(v12);
      objc_autoreleasePoolPop(v11);
      uint64_t result = (*(uint64_t (**)(char *, uint64_t))(v7 + 8))(v9, v6);
      else {
        return v13;
      }
    }
  }

  return result;
}

uint64_t sub_1003D8270(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  char v12 = 0;
  unint64_t v13 = a3;
  while (1)
  {
    BOOL v15 = v13 > a2;
    if (v13 >= a1) {
      break;
    }
    if (v13 > a2 || a4 == v13) {
      goto LABEL_13;
    }
    char v12 = 1;
LABEL_2:
    BOOL v14 = __CFADD__(v13++, 1LL);
    if (v14)
    {
      __break(1u);
LABEL_38:
      __break(1u);
LABEL_39:
      __break(1u);
      goto LABEL_40;
    }
  }

  if (v13 <= a2)
  {
    if (a4 == v13)
    {
      if ((v12 & 1) != 0)
      {
        BOOL v15 = 0;
        goto LABEL_13;
      }

      return 0LL;
    }

    goto LABEL_2;
  }

  if ((v12 & 1) == 0)
  {
    uint64_t v4 = _swiftEmptyArrayStorage;
    goto LABEL_24;
  }

  BOOL v15 = 1;
LABEL_13:
  unint64_t v5 = a1 - 1;
  if (!a1) {
    goto LABEL_38;
  }
  if (v5 >= a4) {
    unint64_t v7 = a4;
  }
  else {
    unint64_t v7 = a1 - 1;
  }
  if (v7 < a3) {
    goto LABEL_39;
  }
  uint64_t v4 = sub_1004C50C8(0LL, 1LL, 1, _swiftEmptyArrayStorage);
  unint64_t v8 = v4[2];
  unint64_t v13 = v4[3];
  unint64_t v6 = v8 + 1;
  if (v8 < v13 >> 1) {
    goto LABEL_19;
  }
LABEL_40:
  uint64_t v4 = sub_1004C50C8((void *)(v13 > 1), v6, 1, v4);
LABEL_19:
  void v4[2] = v6;
  uint64_t v16 = &v4[2 * v8];
  v16[4] = a3;
  v16[5] = v7;
  if (v5 > a4)
  {
    swift_bridgeObjectRelease();
    return a4 + 1;
  }

  if (!v15)
  {
    swift_bridgeObjectRelease();
    return 0LL;
  }

unint64_t sub_1003D8484( unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v4 = a2;
  if (!(a3 | a4)) {
    return a1;
  }
  unint64_t v7 = a3;
  if (a4 >= a1 && a2 >= a3)
  {
    if (qword_10099B3C8 != -1) {
      swift_once(&qword_10099B3C8, sub_1003B7ABC);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    uint64_t v9 = sub_10000A720(v8, (uint64_t)qword_1009ABC80);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.error.getter(v10);
    if (!os_log_type_enabled(v10, v11)) {
      goto LABEL_9;
    }
    uint64_t v12 = swift_slowAlloc(22LL, -1LL);
    uint64_t v23 = swift_slowAlloc(64LL, -1LL);
    uint64_t v24 = 0LL;
    unint64_t v27 = a1;
    uint64_t v28 = v23;
    *(_DWORD *)uint64_t v12 = 136446466;
    unint64_t v25 = 0xE000000000000000LL;
    unint64_t v26 = v4;
    _print_unlocked<A, B>(_:_:)( &v27,  &v24,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    os_log_type_t type = v11;
    v13._countAndFlagsBits = 3026478LL;
    v13._object = (void *)0xE300000000000000LL;
    String.append(_:)(v13);
    _print_unlocked<A, B>(_:_:)( &v26,  &v24,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v24 = sub_1003F11D4(v24, v25, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v12 + 4, v12 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v12 + 12) = 2082;
    unint64_t v26 = a4;
    unint64_t v27 = v7;
    uint64_t v24 = 0LL;
    unint64_t v25 = 0xE000000000000000LL;
    _print_unlocked<A, B>(_:_:)( &v27,  &v24,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    v14._countAndFlagsBits = 3026478LL;
    v14._object = (void *)0xE300000000000000LL;
    String.append(_:)(v14);
    _print_unlocked<A, B>(_:_:)( &v26,  &v24,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
    uint64_t v24 = sub_1003F11D4(v24, v25, &v28);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v12 + 14, v12 + 22);
    swift_bridgeObjectRelease();
    BOOL v15 = "requested [%{public}s] and hole [%{public}s] cannnot overlap!";
    goto LABEL_8;
  }

  if (a1 && a1 - 1 == a4)
  {
    if (a2 >= a3) {
      return v7;
    }
    __break(1u);
  }

  if (a2 == -1LL)
  {
    __break(1u);
  }

  else
  {
    if (a2 + 1 == a3)
    {
      unint64_t v7 = a1;
      unint64_t v4 = a4;
      if (a4 >= a1) {
        return v7;
      }
      __break(1u);
    }

    if (qword_10099B3C8 == -1) {
      goto LABEL_21;
    }
  }

  swift_once(&qword_10099B3C8, sub_1003B7ABC);
LABEL_21:
  uint64_t v17 = type metadata accessor for Logger(0LL);
  uint64_t v18 = sub_10000A720(v17, (uint64_t)qword_1009ABC80);
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v18);
  os_log_type_t v19 = static os_log_type_t.error.getter(v10);
  if (!os_log_type_enabled(v10, v19)) {
    goto LABEL_9;
  }
  uint64_t v12 = swift_slowAlloc(22LL, -1LL);
  uint64_t v23 = swift_slowAlloc(64LL, -1LL);
  uint64_t v24 = 0LL;
  unint64_t v27 = a1;
  uint64_t v28 = v23;
  *(_DWORD *)uint64_t v12 = 136446466;
  unint64_t v25 = 0xE000000000000000LL;
  unint64_t v26 = v4;
  _print_unlocked<A, B>(_:_:)( &v27,  &v24,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  os_log_type_t type = v19;
  v20._countAndFlagsBits = 3026478LL;
  v20._object = (void *)0xE300000000000000LL;
  String.append(_:)(v20);
  _print_unlocked<A, B>(_:_:)( &v26,  &v24,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  uint64_t v24 = sub_1003F11D4(v24, v25, &v28);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v12 + 4, v12 + 12);
  swift_bridgeObjectRelease();
  *(_WORD *)(v12 + 12) = 2082;
  unint64_t v26 = a4;
  unint64_t v27 = v7;
  uint64_t v24 = 0LL;
  unint64_t v25 = 0xE000000000000000LL;
  _print_unlocked<A, B>(_:_:)( &v27,  &v24,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  v21._countAndFlagsBits = 3026478LL;
  v21._object = (void *)0xE300000000000000LL;
  String.append(_:)(v21);
  _print_unlocked<A, B>(_:_:)( &v26,  &v24,  &type metadata for UInt64,  &type metadata for DefaultStringInterpolation,  &protocol witness table for DefaultStringInterpolation);
  uint64_t v24 = sub_1003F11D4(v24, v25, &v28);
  UnsafeMutableRawBufferPointer.copyMemory(from:)(&v24, &v25, v12 + 14, v12 + 22);
  swift_bridgeObjectRelease();
  BOOL v15 = "ERROR: Unadjacent hole! requested [%{public}s] and hole [%{public}s]";
LABEL_8:
  _os_log_impl((void *)&_mh_execute_header, v10, type, v15, (uint8_t *)v12, 0x16u);
  swift_arrayDestroy(v23, 2LL, (char *)&type metadata for Any + 8);
  swift_slowDealloc(v23, -1LL, -1LL);
  swift_slowDealloc(v12, -1LL, -1LL);
LABEL_9:

  return a1;
}

void *sub_1003D895C(unint64_t a1, unint64_t a2, unint64_t a3, unint64_t a4)
{
  unint64_t v10 = a3;
  char v12 = 0;
  unint64_t v13 = a3;
  while (1)
  {
    BOOL v15 = v13 > a2;
    if (v13 < a1)
    {
      if (v13 > a2 || a4 == v13) {
        goto LABEL_13;
      }
      char v12 = 1;
      goto LABEL_2;
    }

    if (v13 > a2)
    {
      if ((v12 & 1) == 0)
      {
        unint64_t v4 = _swiftEmptyArrayStorage;
        unint64_t v23 = a2 + 1;
        if (a2 != -1LL) {
          goto LABEL_27;
        }
        goto LABEL_40;
      }

      BOOL v15 = 1;
LABEL_13:
      unint64_t v7 = a1 - 1;
      if (a1)
      {
        if (v7 >= a4) {
          unint64_t v6 = a4;
        }
        else {
          unint64_t v6 = a1 - 1;
        }
        if (v6 >= a3)
        {
          unint64_t v4 = sub_1004C50C8(0LL, 1LL, 1, _swiftEmptyArrayStorage);
          unint64_t v8 = v4[2];
          unint64_t v13 = v4[3];
          int64_t v5 = v8 + 1;
          if (v8 < v13 >> 1) {
            goto LABEL_19;
          }
          goto LABEL_46;
        }

uint64_t sub_1003D8E18(uint64_t result)
{
  if (result)
  {
    unint64_t v1 = result;
    if (result < 15)
    {
      return 0LL;
    }

    else
    {
      uint64_t v2 = type metadata accessor for __DataStorage(0LL);
      swift_allocObject(v2, *(unsigned int *)(v2 + 48), *(unsigned __int16 *)(v2 + 52));
      __DataStorage.init(capacity:)(v1);
      if (v1 >= 0x7FFFFFFF)
      {
        uint64_t v3 = type metadata accessor for Data.RangeReference(0LL);
        uint64_t result = swift_allocObject(v3, 32LL, 7LL);
        *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
        *(void *)(result + 24) = 0LL;
      }

      else
      {
        return 0LL;
      }
    }
  }

  return result;
}

uint64_t sub_1003D8EAC(uint64_t a1, uint64_t a2)
{
  uint64_t v94 = a1;
  uint64_t v3 = sub_100004AEC(&qword_1009AC170);
  __chkstk_darwin(v3);
  uint64_t v95 = (uint64_t)&v89 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo(0LL);
  uint64_t v92 = *(void *)(v5 - 8);
  uint64_t v6 = __chkstk_darwin(v5);
  uint64_t v99 = (char *)&v89 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = __chkstk_darwin(v6);
  uint64_t v91 = (uint64_t)&v89 - v9;
  __chkstk_darwin(v8);
  uint64_t v98 = (uint64_t)&v89 - v10;
  uint64_t v11 = type metadata accessor for URL(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  uint64_t v13 = __chkstk_darwin(v11);
  unint64_t v97 = (char *)&v89 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = __chkstk_darwin(v13);
  uint64_t v17 = (char *)&v89 - v16;
  uint64_t v18 = __chkstk_darwin(v15);
  os_log_type_t v20 = (char *)&v89 - v19;
  __chkstk_darwin(v18);
  Swift::String v22 = (char *)&v89 - v21;
  id v101 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL.deletingLastPathComponent()(v101);
  uint64_t v93 = v5;
  uint64_t v23 = *(int *)(v5 + 20);
  uint64_t v102 = a2;
  uint64_t v24 = a2 + v23;
  uint64_t v105 = *(void *)(a2 + v23);
  id v106 = (id)dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  uint64_t v107 = v25;
  v26._countAndFlagsBits = 45LL;
  v26._object = (void *)0xE100000000000000LL;
  String.append(_:)(v26);
  uint64_t v27 = *(void *)(v24 + 8);
  uint64_t v28 = v11;
  uint64_t v105 = v27;
  v29._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  String.append(_:)(v29);
  swift_bridgeObjectRelease();
  uint64_t v100 = v22;
  URL.appendingPathComponent(_:)(v106, v107);
  swift_bridgeObjectRelease();
  uint64_t v104 = v20;
  URL.appendingPathExtension(_:)(0x70616D79656BLL, 0xE600000000000000LL);
  uint64_t v103 = *(void (**)(char *, uint64_t))(v12 + 8);
  v103(v17, v11);
  if (qword_10099B3C8 != -1) {
    swift_once(&qword_10099B3C8, sub_1003B7ABC);
  }
  uint64_t v30 = type metadata accessor for Logger(0LL);
  uint64_t v31 = sub_10000A720(v30, (uint64_t)qword_1009ABC80);
  uint64_t v32 = v98;
  sub_10001DC4C(v102, v98, type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
  Swift::String v33 = v97;
  uint64_t v34 = (*(uint64_t (**)(char *, char *, uint64_t))(v12 + 16))(v97, v104, v28);
  uint64_t v89 = v31;
  unint64_t v35 = (os_log_s *)Logger.logObject.getter(v34);
  os_log_type_t v36 = static os_log_type_t.default.getter(v35);
  if (os_log_type_enabled(v35, v36))
  {
    uint64_t v37 = swift_slowAlloc(22LL, -1LL);
    unint64_t v38 = (void *)swift_slowAlloc(64LL, -1LL);
    id v106 = v38;
    *(_DWORD *)uint64_t v37 = 136315394;
    uint64_t v90 = v28;
    uint64_t v39 = URL.path.getter(v38);
    uint64_t v105 = sub_1003F11D4(v39, v40, (uint64_t *)&v106);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v37 + 4, v37 + 12);
    swift_bridgeObjectRelease();
    uint64_t v41 = sub_100018C68(v32, type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    *(_WORD *)(v37 + 12) = 2080;
    uint64_t v42 = URL.path.getter(v41);
    uint64_t v105 = sub_1003F11D4(v42, v43, (uint64_t *)&v106);
    uint64_t v28 = v90;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v37 + 14, v37 + 22);
    swift_bridgeObjectRelease();
    v103(v33, v28);
    _os_log_impl((void *)&_mh_execute_header, v35, v36, "Renaming %s to %s", (uint8_t *)v37, 0x16u);
    swift_arrayDestroy(v38, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v38, -1LL, -1LL);
    swift_slowDealloc(v37, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(v32, type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    v103(v33, v28);
  }

  int64_t v44 = v101;
  uint64_t v45 = (uint64_t)v99;
  URL._bridgeToObjectiveC()(v46);
  id v48 = v47;
  id v106 = 0LL;
  unsigned int v49 = [v44 removeItemAtURL:v47 error:&v106];

  id v50 = v106;
  if (v49)
  {
    id v51 = v106;
  }

  else
  {
    id v53 = v106;
    uint64_t v54 = _convertNSErrorToError(_:)(v50);

    swift_willThrow(v55);
    swift_errorRelease(v54);
    uint64_t v96 = 0LL;
  }

  URL._bridgeToObjectiveC()(v52);
  unint64_t v57 = v56;
  URL._bridgeToObjectiveC()(v58);
  unint64_t v60 = v59;
  id v106 = 0LL;
  unsigned int v61 = [v44 moveItemAtURL:v57 toURL:v59 error:&v106];

  id v62 = v106;
  if (v61)
  {
    uint64_t v63 = v95;
    sub_10001581C(v94, v95, &qword_1009AC170);
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v92 + 48))(v63, 1LL, v93) == 1)
    {
      id v64 = v62;

      uint64_t v65 = v103;
      v103(v104, v28);
      v65(v100, v28);
      return sub_100015794(v63, &qword_1009AC170);
    }

    uint64_t v69 = v63;
    uint64_t v70 = v91;
    sub_10002218C(v69, v91, type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    sub_10001DC4C(v70, v45, type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    uint64_t v71 = (os_log_s *)Logger.logObject.getter(v62);
    os_log_type_t v72 = static os_log_type_t.default.getter(v71);
    if (os_log_type_enabled(v71, v72))
    {
      uint64_t v73 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v74 = (void *)swift_slowAlloc(32LL, -1LL);
      id v106 = v74;
      uint64_t v90 = v28;
      *(_DWORD *)uint64_t v73 = 136315138;
      uint64_t v75 = URL.path.getter(v74);
      uint64_t v105 = sub_1003F11D4(v75, v76, (uint64_t *)&v106);
      uint64_t v28 = v90;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(&v105, &v106, v73 + 4, v73 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68(v45, type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
      _os_log_impl((void *)&_mh_execute_header, v71, v72, "Deleting %s", v73, 0xCu);
      swift_arrayDestroy(v74, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v77 = v74;
      int64_t v44 = v101;
      swift_slowDealloc(v77, -1LL, -1LL);
      uint64_t v78 = v73;
      uint64_t v70 = v91;
      swift_slowDealloc(v78, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(v45, type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
    }

    URL._bridgeToObjectiveC()(v79);
    uint64_t v81 = v80;
    id v106 = 0LL;
    unsigned int v82 = [v44 removeItemAtURL:v80 error:&v106];

    id v83 = v106;
    if (v82)
    {
      id v84 = v106;
    }

    else
    {
      id v85 = v106;
      uint64_t v86 = _convertNSErrorToError(_:)(v83);

      swift_willThrow(v87);
      swift_errorRelease(v86);
    }

    sub_100018C68(v70, type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo);
  }

  else
  {
    id v67 = v106;
    _convertNSErrorToError(_:)(v62);

    swift_willThrow(v68);
  }

  uint64_t v88 = (uint64_t (*)(char *, uint64_t))v103;
  v103(v104, v28);
  return v88(v100, v28);
}

uint64_t sub_1003D96B8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[105] = v3;
  v4[99] = a3;
  v4[93] = a2;
  v4[87] = a1;
  uint64_t v5 = type metadata accessor for KeyGenerationBeaconInfo(0LL);
  v4[106] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[107] = v6;
  uint64_t v7 = *(void *)(v6 + 64);
  v4[108] = v7;
  v4[109] = swift_task_alloc((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v8 = (*(void *)(*(void *)(sub_100004AEC((uint64_t *)&unk_1009A34D0) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[110] = swift_task_alloc(v8);
  v4[111] = swift_task_alloc(v8);
  uint64_t v9 = type metadata accessor for URL(0LL);
  v4[112] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v4[113] = v10;
  uint64_t v11 = *(void *)(v10 + 64);
  v4[114] = v11;
  unint64_t v12 = (v11 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v4[115] = swift_task_alloc(v12);
  v4[116] = swift_task_alloc(v12);
  v4[117] = swift_task_alloc(v12);
  v4[118] = swift_task_alloc(v12);
  v4[119] = swift_task_alloc(v12);
  return swift_task_switch(sub_1003D97BC, 0LL, 0LL);
}

uint64_t sub_1003D97BC()
{
  unint64_t v1 = (uint64_t *)(*(void *)(v0 + 696) + *(int *)(*(void *)(v0 + 848) + 24LL));
  uint64_t v2 = *v1;
  *(void *)(v0 + 960) = *v1;
  unint64_t v3 = v1[1];
  *(void *)(v0 + 968) = v3;
  uint64_t v4 = v1[2];
  *(void *)(v0 + 976) = v4;
  unint64_t v5 = v1[3];
  *(void *)(v0 + 984) = v5;
  uint64_t v6 = v1[4];
  *(void *)(v0 + 992) = v6;
  unint64_t v7 = v1[5];
  *(void *)(v0 + 1000) = v7;
  if (v3 >> 60 == 15)
  {
    unint64_t v8 = sub_1003DA314();
    uint64_t v9 = swift_allocError(&type metadata for BeaconKeyServiceBuilder.Error, v8, 0LL, 0LL);
    *uint64_t v10 = 1;
    swift_willThrow(v9);
    uint64_t v11 = *(void *)(v0 + 944);
    uint64_t v12 = *(void *)(v0 + 936);
    uint64_t v13 = *(void *)(v0 + 928);
    uint64_t v14 = *(void *)(v0 + 920);
    uint64_t v15 = *(void *)(v0 + 888);
    uint64_t v16 = *(void *)(v0 + 880);
    uint64_t v17 = *(void *)(v0 + 872);
    swift_task_dealloc(*(void *)(v0 + 952));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))(0LL);
  }

  uint64_t v59 = v0 + 1048;
  uint64_t v60 = v0 + 16;
  uint64_t v19 = *(void *)(v0 + 944);
  uint64_t v20 = *(void *)(v0 + 904);
  uint64_t v56 = *(void *)(v0 + 896);
  sub_10001736C(v2, v3);
  sub_10001736C(v4, v5);
  uint64_t v21 = sub_100018BE4(v6, v7);
  uint64_t v22 = UUID.uuidString.getter(v21);
  URL.appendingPathComponent(_:)(v22, v23);
  swift_bridgeObjectRelease();
  uint64_t v24 = type metadata accessor for BeaconIdentifier(0LL);
  uint64_t v25 = UUID.uuidString.getter(v24);
  URL.appendingPathComponent(_:)(v25, v26);
  swift_bridgeObjectRelease();
  uint64_t v27 = *(void (**)(uint64_t, uint64_t))(v20 + 8);
  *(void *)(v0 + 1008) = v27;
  v27(v19, v56);
  URL.appendingPathComponent(_:)(0x7972616D697250LL, 0xE700000000000000LL);
  if (v7 >> 60 != 15) {
    URL.appendingPathComponent(_:)(0x7261646E6F636553LL, 0xE900000000000079LL);
  }
  uint64_t v28 = *(void *)(v0 + 936);
  uint64_t v29 = *(void *)(v0 + 928);
  uint64_t v30 = *(void *)(v0 + 904);
  uint64_t v31 = *(void *)(v0 + 896);
  uint64_t v57 = *(void *)(v0 + 888);
  uint64_t v58 = *(void *)(v0 + 880);
  uint64_t v32 = *(void *)(v0 + 872);
  uint64_t v33 = *(void *)(v0 + 864);
  uint64_t v34 = *(void *)(v0 + 856);
  uint64_t v35 = *(void *)(v0 + 840);
  uint64_t v55 = *(void *)(v0 + 792);
  uint64_t v53 = *(void *)(v0 + 912);
  uint64_t v54 = *(void *)(v0 + 744);
  uint64_t v36 = *(void *)(v0 + 696);
  (*(void (**)(void))(v30 + 56))();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 16))(v29, v28, v31);
  sub_10001DC4C(v36, v32, type metadata accessor for KeyGenerationBeaconInfo);
  uint64_t v37 = *(unsigned __int8 *)(v30 + 80);
  uint64_t v38 = (v37 + 24) & ~v37;
  uint64_t v39 = *(unsigned __int8 *)(v34 + 80);
  uint64_t v40 = (v53 + v39 + v38) & ~v39;
  unint64_t v41 = (v33 + v40 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v42 = swift_allocObject(&unk_1009561D8, v41 + 16, v37 | v39 | 7);
  *(void *)(v0 + 10swift_weakDestroy(v0 + 16) = v42;
  *(void *)(v42 + swift_weakDestroy(v0 + 16) = v35;
  uint64_t v43 = v42 + v38;
  int64_t v44 = *(void (**)(uint64_t, uint64_t, uint64_t))(v30 + 32);
  v44(v43, v29, v31);
  sub_10002218C(v32, v42 + v40, type metadata accessor for KeyGenerationBeaconInfo);
  uint64_t v45 = (void *)(v42 + v41);
  *uint64_t v45 = v54;
  v45[1] = v55;
  swift_retain();
  swift_asyncLet_begin(v60, 0LL, &type metadata for Bool, &unk_1009AC160, v42, v59);
  sub_10001581C(v57, v58, (uint64_t *)&unk_1009A34D0);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v30 + 48))(v58, 1LL, v31) == 1)
  {
    sub_100015794(*(void *)(v0 + 880), (uint64_t *)&unk_1009A34D0);
    *(_BYTE *)(v0 + 1050) = 0;
    return swift_asyncLet_get_throwing(v60, v59, sub_1003D9D38, v0 + 656);
  }

  uint64_t v46 = *(void *)(v0 + 744);
  v44(*(void *)(v0 + 920), *(void *)(v0 + 880), *(void *)(v0 + 896));
  if (v46)
  {
    unint64_t v47 = *(void *)(v0 + 792);
    if (v47)
    {
      unint64_t v48 = *(void *)(v0 + 744) / 0x60uLL;
      unint64_t v49 = v47 / 0x60;
      if (v49 >= v48)
      {
        uint64_t v50 = v48 + 1;
        uint64_t v51 = v49 + 1;
        goto LABEL_12;
      }
    }

    __break(1u);
  }

  uint64_t v50 = 0LL;
  uint64_t v51 = 0LL;
LABEL_12:
  unint64_t v52 = (void *)swift_task_alloc(dword_1009AC16C);
  *(void *)(v0 + 1024) = v52;
  void *v52 = v0;
  v52[1] = sub_1003D9C5C;
  return sub_1003BFEE0(*(void *)(v0 + 920), *(void *)(v0 + 696), 1, v50, v51, 1LL);
}

uint64_t sub_1003D9C5C(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 1024);
  *(void *)(*v2 + 1032) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_1003D9EA8;
  }

  else
  {
    *(_BYTE *)(v4 + 1049) = a1 & 1;
    uint64_t v6 = sub_1003D9CD4;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1003D9CD4()
{
  *(_BYTE *)(v0 + 1050) = *(_BYTE *)(v0 + 1049);
  return swift_asyncLet_get_throwing(v0 + 16, v0 + 1048, sub_1003D9D38, v0 + 656);
}

uint64_t sub_1003D9D38()
{
  uint64_t v2 = (_BYTE *)(v1 + 1048);
  *(void *)(v1 + 1040) = v0;
  if (v0)
  {
    uint64_t v3 = v1 + 704;
    uint64_t v4 = sub_1003DA020;
  }

  else
  {
    uint64_t v3 = v1 + 752;
    *(_BYTE *)(v1 + 1051) = *v2;
    uint64_t v4 = sub_1003D9D70;
  }

  return swift_asyncLet_finish(v1 + 16, v2, v4, v3);
}

uint64_t sub_1003D9D70()
{
  return swift_task_switch(sub_1003D9D84, 0LL, 0LL);
}

uint64_t sub_1003D9D84()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 1008);
  uint64_t v2 = *(void *)(v0 + 952);
  uint64_t v3 = *(void *)(v0 + 944);
  uint64_t v4 = *(void *)(v0 + 936);
  uint64_t v5 = *(void *)(v0 + 928);
  uint64_t v6 = *(void *)(v0 + 920);
  uint64_t v7 = *(void *)(v0 + 896);
  uint64_t v8 = *(void *)(v0 + 888);
  uint64_t v10 = *(void *)(v0 + 880);
  uint64_t v11 = *(void *)(v0 + 872);
  sub_1003DA5A4( *(void *)(v0 + 960),  *(void *)(v0 + 968),  *(void *)(v0 + 976),  *(void *)(v0 + 984),  *(void *)(v0 + 992),  *(void *)(v0 + 1000));
  sub_100015794(v8, (uint64_t *)&unk_1009A34D0);
  v1(v4, v7);
  v1(v2, v7);
  swift_release();
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  return (*(uint64_t (**)(void))(v0 + 8))((*(_BYTE *)(v0 + 1051) | *(_BYTE *)(v0 + 1050)) & 1);
}

uint64_t sub_1003D9EA8()
{
  return swift_asyncLet_finish(v0 + 16, v0 + 1048, sub_1003D9F04, v0 + 800);
}

uint64_t sub_1003D9F04()
{
  return swift_task_switch(sub_1003D9F18, 0LL, 0LL);
}

uint64_t sub_1003D9F18()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 1008);
  uint64_t v2 = *(void *)(v0 + 952);
  uint64_t v3 = *(void *)(v0 + 936);
  uint64_t v4 = *(void *)(v0 + 896);
  uint64_t v5 = *(void *)(v0 + 888);
  sub_1003DA5A4( *(void *)(v0 + 960),  *(void *)(v0 + 968),  *(void *)(v0 + 976),  *(void *)(v0 + 984),  *(void *)(v0 + 992),  *(void *)(v0 + 1000));
  sub_100015794(v5, (uint64_t *)&unk_1009A34D0);
  v1(v3, v4);
  v1(v2, v4);
  swift_release();
  uint64_t v6 = *(void *)(v0 + 944);
  uint64_t v7 = *(void *)(v0 + 936);
  uint64_t v8 = *(void *)(v0 + 928);
  uint64_t v9 = *(void *)(v0 + 920);
  uint64_t v10 = *(void *)(v0 + 888);
  uint64_t v11 = *(void *)(v0 + 880);
  uint64_t v12 = *(void *)(v0 + 872);
  swift_task_dealloc(*(void *)(v0 + 952));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_1003DA020()
{
  return swift_task_switch(sub_1003DA034, 0LL, 0LL);
}

uint64_t sub_1003DA034()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 1008);
  uint64_t v2 = *(void *)(v0 + 952);
  uint64_t v3 = *(void *)(v0 + 936);
  uint64_t v4 = *(void *)(v0 + 896);
  uint64_t v5 = *(void *)(v0 + 888);
  sub_1003DA5A4( *(void *)(v0 + 960),  *(void *)(v0 + 968),  *(void *)(v0 + 976),  *(void *)(v0 + 984),  *(void *)(v0 + 992),  *(void *)(v0 + 1000));
  sub_100015794(v5, (uint64_t *)&unk_1009A34D0);
  v1(v3, v4);
  v1(v2, v4);
  swift_release();
  uint64_t v6 = *(void *)(v0 + 944);
  uint64_t v7 = *(void *)(v0 + 936);
  uint64_t v8 = *(void *)(v0 + 928);
  uint64_t v9 = *(void *)(v0 + 920);
  uint64_t v10 = *(void *)(v0 + 888);
  uint64_t v11 = *(void *)(v0 + 880);
  uint64_t v12 = *(void *)(v0 + 872);
  swift_task_dealloc(*(void *)(v0 + 952));
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_1003DA13C()
{
  uint64_t v1 = type metadata accessor for KeyGenerationBeaconInfo(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release();
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL);
  v7(v0 + v4, v6);
  uint64_t v8 = type metadata accessor for BeaconIdentifier(0LL);
  v7(v0 + v4 + *(int *)(v8 + 20), v6);
  uint64_t v9 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v9, v10);
  uint64_t v11 = (uint64_t *)(v0 + v4 + *(int *)(v1 + 24));
  unint64_t v12 = v11[1];
  if (v12 >> 60 != 15)
  {
    sub_100016F9C(*v11, v12);
    sub_100016F9C(v11[2], v11[3]);
    unint64_t v13 = v11[5];
    if (v13 >> 60 != 15) {
      sub_100016F9C(v11[4], v13);
    }
  }

  return swift_deallocObject(v0, ((((v5 + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL) + 8, v3 | 7);
}

uint64_t sub_1003DA25C(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for KeyGenerationBeaconInfo(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 40LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  unint64_t v6 = (*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = *(void *)(v1 + 32);
  uint64_t v8 = v1 + v5;
  uint64_t v9 = *(void *)(v1 + v6);
  uint64_t v10 = *(void *)(v1 + ((v6 + 15) & 0xFFFFFFFFFFFFF8LL));
  uint64_t v11 = (void *)swift_task_alloc(dword_1009AC13C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v11;
  *uint64_t v11 = v2;
  v11[1] = sub_100015D58;
  v11[5] = v9;
  void v11[6] = v10;
  void v11[3] = v7;
  v11[4] = v8;
  v11[2] = a1;
  return swift_task_switch(sub_1003BCED4, 0LL, 0LL);
}

unint64_t sub_1003DA314()
{
  unint64_t result = qword_1009AC150;
  if (!qword_1009AC150)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FEAD8, &type metadata for BeaconKeyServiceBuilder.Error);
    atomic_store(result, &qword_1009AC150);
  }

  return result;
}

uint64_t sub_1003DA358()
{
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = type metadata accessor for KeyGenerationBeaconInfo(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v4 + v5 + v8) & ~v8;
  uint64_t v10 = *(void *)(v7 + 64);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  uint64_t v11 = type metadata accessor for UUID(0LL);
  unint64_t v12 = *(void (**)(uint64_t, uint64_t))(*(void *)(v11 - 8) + 8LL);
  v12(v0 + v9, v11);
  uint64_t v13 = type metadata accessor for BeaconIdentifier(0LL);
  v12(v0 + v9 + *(int *)(v13 + 20), v11);
  uint64_t v14 = v0 + v9 + *(int *)(v6 + 20);
  uint64_t v15 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v15 - 8) + 8LL))(v14, v15);
  uint64_t v16 = (uint64_t *)(v0 + v9 + *(int *)(v6 + 24));
  unint64_t v17 = v16[1];
  if (v17 >> 60 != 15)
  {
    sub_100016F9C(*v16, v17);
    sub_100016F9C(v16[2], v16[3]);
    unint64_t v18 = v16[5];
    if (v18 >> 60 != 15) {
      sub_100016F9C(v16[4], v18);
    }
  }

  return swift_deallocObject(v0, ((v10 + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 16, v3 | v8 | 7);
}

uint64_t sub_1003DA4A8(uint64_t a1)
{
  uint64_t v4 = *(void *)(type metadata accessor for URL(0LL) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = *(void *)(v4 + 64);
  uint64_t v7 = *(void *)(type metadata accessor for KeyGenerationBeaconInfo(0LL) - 8);
  unint64_t v8 = (v5 + v6 + *(unsigned __int8 *)(v7 + 80)) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = v1 + v5;
  uint64_t v10 = v1 + v8;
  uint64_t v11 = (uint64_t *)(v1 + ((*(void *)(v7 + 64) + v8 + 7) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v12 = *v11;
  uint64_t v13 = v11[1];
  uint64_t v14 = (void *)swift_task_alloc(dword_1009AC15C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v14;
  *uint64_t v14 = v2;
  v14[1] = sub_100015D58;
  v14[2] = a1;
  uint64_t v15 = (void *)swift_task_alloc(dword_1009AC16C);
  v14[3] = v15;
  *uint64_t v15 = v14;
  v15[1] = sub_1003BFE48;
  return sub_1003BFEE0(v9, v10, 0, v12, v13, 1LL);
}

uint64_t sub_1003DA5A4( uint64_t result, unint64_t a2, uint64_t a3, unint64_t a4, uint64_t a5, unint64_t a6)
{
  if (a2 >> 60 != 15)
  {
    sub_100016F9C(result, a2);
    sub_100016F9C(a3, a4);
    return sub_1000182F0(a5, a6);
  }

  return result;
}

uint64_t type metadata accessor for BeaconKeyServiceBuilder.FileSwapInfo(uint64_t a1)
{
  return sub_10008BED8(a1, qword_1009AC478, (uint64_t)&nominal type descriptor for BeaconKeyServiceBuilder.FileSwapInfo);
}

unint64_t sub_1003DA610()
{
  unint64_t result = qword_1009AC178;
  if (!qword_1009AC178)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008023C0, &type metadata for BeaconKeyService.Error);
    atomic_store(result, (unint64_t *)&qword_1009AC178);
  }

  return result;
}

uint64_t type metadata accessor for BeaconKeyServiceBuilder.KeyIndexMapInfo(uint64_t a1)
{
  return sub_10008BED8( a1,  qword_1009AC3E8,  (uint64_t)&nominal type descriptor for BeaconKeyServiceBuilder.KeyIndexMapInfo);
}

void sub_1003DA668(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for URL(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v17 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100022898(0LL, &qword_1009AC0E0, &OBJC_CLASS___NSFileHandle_ptr);
  (*(void (**)(char *, uint64_t, uint64_t))(v4 + 16))(v6, a1, v3);
  id v7 = sub_1003C7584((uint64_t)v6, (SEL *)&selRef_fileHandleForReadingFromURL_error_);
  if (!v1)
  {
    unint64_t v8 = v7;
    id v18 = 0LL;
    unsigned __int8 v9 = [v7 seekToOffset:0 error:&v18];
    id v10 = v18;
    if ((v9 & 1) != 0)
    {
      id v11 = v18;
      id v12 = [v8 readDataOfLength:3];
      static Data._unconditionallyBridgeFromObjectiveC(_:)(v12);
      uint64_t v14 = v13;

      __asm { BR              X10 }
    }

    id v15 = v18;
    _convertNSErrorToError(_:)(v10);

    swift_willThrow(v16);
  }

uint64_t sub_1003DB0E8()
{
  return swift_deallocObject(v0, 56LL, 7LL);
}

uint64_t sub_1003DB11C(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = v1[5];
  uint64_t v8 = v1[6];
  unsigned __int8 v9 = (void *)swift_task_alloc(dword_1009AC244);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v9;
  *unsigned __int8 v9 = v2;
  v9[1] = sub_100015D58;
  return sub_1003BDAB0(a1, v4, v5, v6, v7, v8);
}

uint64_t sub_1003DB19C(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1009AC254);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_100015D58;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1009AC250 + dword_1009AC250))(a1, v4);
}

uint64_t sub_1003DB20C()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1003DB238()
{
  uint64_t v1 = (void *)swift_task_alloc(dword_1009AC354);
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v1;
  *uint64_t v1 = v0;
  v1[1] = sub_1000159BC;
  uint64_t v2 = (void *)swift_task_alloc(dword_1009ABE64);
  v1[2] = v2;
  *uint64_t v2 = v1;
  v2[1] = sub_1000159BC;
  return sub_1003BEAE4();
}

uint64_t *sub_1003DB2A0(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v8 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain(v8);
  }

  else
  {
    uint64_t v7 = type metadata accessor for URL(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    *(_OWORD *)((char *)a1 + *(int *)(a3 + 20)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 20));
  }

  return a1;
}

uint64_t sub_1003DB32C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 16LL))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1003DB388(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_BYTE *)uint64_t v8 = *(_BYTE *)v9;
  *(_DWORD *)(v8 + 4) = *(_DWORD *)(v9 + 4);
  *(_DWORD *)(v8 + 8) = *(_DWORD *)(v9 + 8);
  *(_DWORD *)(v8 + 12) = *(_DWORD *)(v9 + 12);
  return a1;
}

uint64_t sub_1003DB404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1003DB460(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = a1 + v7;
  uint64_t v9 = a2 + v7;
  *(_BYTE *)uint64_t v8 = *(_BYTE *)v9;
  *(void *)(v8 + 4) = *(void *)(v9 + 4);
  *(_DWORD *)(v8 + 12) = *(_DWORD *)(v9 + 12);
  return a1;
}

uint64_t sub_1003DB4D4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003DB4E0);
}

uint64_t sub_1003DB4E4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003DB4F0);
}

uint64_t sub_1003DB4F4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003DB6B4( a1,  a2,  a3,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&unk_1007FEA28);
}

uint64_t sub_1003DB508(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
}

uint64_t sub_1003DB53C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 24LL))(a1, a2, v6);
  uint64_t v7 = *(int *)(a3 + 20);
  uint64_t v8 = (void *)(a1 + v7);
  uint64_t v9 = (void *)(a2 + v7);
  *uint64_t v8 = *v9;
  v8[1] = v9[1];
  return a1;
}

uint64_t sub_1003DB5A8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 40LL))(a1, a2, v6);
  *(_OWORD *)(a1 + *(int *)(a3 + 20)) = *(_OWORD *)(a2 + *(int *)(a3 + 20));
  return a1;
}

uint64_t sub_1003DB604(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003DB610);
}

uint64_t sub_1003DB614(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(a1, a2, v4);
}

uint64_t sub_1003DB650(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003DB65C);
}

uint64_t sub_1003DB660(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 56LL))(a1, a2, a2, v4);
}

uint64_t sub_1003DB6A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003DB6B4( a1,  a2,  a3,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&unk_1007FEA50);
}

uint64_t sub_1003DB6B4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(uint64_t), uint64_t a5)
{
  uint64_t result = a4(319LL);
  if (v8 <= 0x3F)
  {
    v9[0] = *(void *)(result - 8) + 64LL;
    v9[1] = a5;
    swift_initStructMetadata(a1, 256LL, 2LL, v9, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for BeaconKeyServiceBuilder.Error( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1003DB76C + 4 * byte_1007FE84F[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1003DB7A0 + 4 * byte_1007FE84A[v4]))();
}

uint64_t sub_1003DB7A0(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003DB7A8(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1003DB7B0LL);
  }
  return result;
}

uint64_t sub_1003DB7BC(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1003DB7C4LL);
  }
  *(_BYTE *)uint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1003DB7C8(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003DB7D0(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconKeyServiceBuilder.Error()
{
  return &type metadata for BeaconKeyServiceBuilder.Error;
}

unint64_t sub_1003DB7F0()
{
  unint64_t result = qword_1009AC4B0;
  if (!qword_1009AC4B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FEAB0, &type metadata for BeaconKeyServiceBuilder.Error);
    atomic_store(result, (unint64_t *)&qword_1009AC4B0);
  }

  return result;
}

uint64_t sub_1003DB840@<X0>(char *a1@<X0>, uint64_t a2@<X1>, unint64_t a3@<X2>, uint64_t a4@<X8>)
{
  uint64_t v50 = a4;
  uint64_t v7 = type metadata accessor for Date(0LL);
  uint64_t v51 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  unint64_t v52 = (char *)&v47 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  id v12 = (char *)&v47 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  id v15 = (char *)&v47 - v14;
  uint64_t v16 = __chkstk_darwin(v13);
  id v18 = (char *)&v47 - v17;
  uint64_t v19 = __chkstk_darwin(v16);
  uint64_t v21 = (char *)&v47 - v20;
  uint64_t v22 = __chkstk_darwin(v19);
  uint64_t v24 = (char *)&v47 - v23;
  uint64_t v25 = __chkstk_darwin(v22);
  uint64_t v27 = (char *)&v47 - v26;
  if (!a2)
  {
    unint64_t v48 = a3;
    unint64_t v49 = a1;
    if (qword_10099B3E0 != -1) {
      swift_once(&qword_10099B3E0, sub_1003DCC84);
    }
    uint64_t v28 = type metadata accessor for Logger(0LL);
    uint64_t v29 = sub_10000A720(v28, (uint64_t)qword_100A2A8D8);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.error.getter(v30);
    if (os_log_type_enabled(v30, v31))
    {
      uint64_t v32 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v32 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "Caller attempted to calculate dateInterval for bucket 0!",  v32,  2u);
      swift_slowDealloc(v32, -1LL, -1LL);
    }

    a2 = 1LL;
    a3 = v48;
    a1 = v49;
  }

  unint64_t v49 = v15;
  double v33 = (double)a3 * 60.0;
  double v34 = v33 * (double)(unint64_t)(a2 - 1);
  Date.timeIntervalSinceReferenceDate.getter(v25);
  Date.init(timeIntervalSinceReferenceDate:)(v35);
  uint64_t v36 = v51;
  uint64_t v37 = *(void (**)(char *, char *, uint64_t))(v51 + 16);
  v37(v21, a1, v7);
  Date.init(timeInterval:since:)(v21, v34);
  v37(v21, v27, v7);
  Date.init(timeInterval:since:)(v21, v34);
  v37(v21, v18, v7);
  uint64_t v38 = Date.init(timeInterval:since:)(v21, v33);
  double v39 = Date.timeIntervalSince1970.getter(v38);
  uint64_t v40 = *(uint64_t (**)(char *, uint64_t))(v36 + 8);
  uint64_t v41 = v40(v12, v7);
  double v42 = 0.0 - v39;
  if (0.0 - v39 < INFINITY) {
    *(void *)&v42 += (*(uint64_t *)&v42 >> 63) | 1;
  }
  uint64_t v43 = v49;
  Date.init(timeIntervalSince1970:)(v41, -v42);
  if (a2 == 1) {
    int64_t v44 = v24;
  }
  else {
    int64_t v44 = v18;
  }
  v37(v21, v44, v7);
  uint64_t v45 = v52;
  v37(v52, v43, v7);
  DateInterval.init(start:end:)(v21, v45);
  v40(v43, v7);
  v40(v18, v7);
  v40(v24, v7);
  return v40(v27, v7);
}

uint64_t sub_1003DBB9C@<X0>( void *a1@<X0>, uint64_t a2@<X1>, uint64_t (*a3)(uint64_t, char *, uint64_t)@<X2>, uint64_t a4@<X3>, void *a5@<X4>, void *a6@<X5>, char *a7@<X8>)
{
  uint64_t v216 = a6;
  id v219 = a5;
  uint64_t v212 = a3;
  uint64_t v199 = a2;
  uint64_t v208 = a7;
  uint64_t v9 = type metadata accessor for Calendar.Component(0LL);
  uint64_t v214 = *(void *)(v9 - 8);
  uint64_t v215 = v9;
  __chkstk_darwin(v9);
  uint64_t v213 = (char *)&v190 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v211 = type metadata accessor for Date(0LL);
  uint64_t v217 = *(void *)(v211 - 8);
  uint64_t v11 = __chkstk_darwin(v211);
  uint64_t v203 = (char *)&v190 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = __chkstk_darwin(v11);
  uint64_t v192 = (char *)&v190 - v14;
  uint64_t v15 = __chkstk_darwin(v13);
  os_log_t v198 = (char *)&v190 - v16;
  uint64_t v17 = __chkstk_darwin(v15);
  os_log_t v200 = (char *)&v190 - v18;
  uint64_t v19 = __chkstk_darwin(v17);
  uint64_t v191 = (char *)&v190 - v20;
  uint64_t v21 = __chkstk_darwin(v19);
  os_log_t v197 = (char *)&v190 - v22;
  uint64_t v23 = __chkstk_darwin(v21);
  uint64_t v201 = (char *)&v190 - v24;
  __chkstk_darwin(v23);
  uint64_t v204 = (char *)&v190 - v25;
  uint64_t v225 = type metadata accessor for UUID(0LL);
  uint64_t v26 = *(void *)(v225 - 8);
  __chkstk_darwin(v225);
  uint64_t v28 = (char *)&v190 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v30 = __chkstk_darwin(v29);
  uint64_t v196 = (uint64_t)&v190 - ((v31 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v32 = __chkstk_darwin(v30);
  int v194 = (char *)&v190 - v33;
  uint64_t v34 = __chkstk_darwin(v32);
  uint64_t v195 = (uint64_t)&v190 - v35;
  uint64_t v36 = __chkstk_darwin(v34);
  uint64_t v193 = (char *)&v190 - v37;
  uint64_t v38 = __chkstk_darwin(v36);
  uint64_t v210 = (uint64_t)&v190 - v39;
  __chkstk_darwin(v38);
  uint64_t v41 = (char *)&v190 - v40;
  uint64_t v207 = type metadata accessor for Calendar(0LL);
  uint64_t v206 = *(void *)(v207 - 8);
  uint64_t v42 = __chkstk_darwin(v207);
  uint64_t v218 = (char *)&v190 - ((v43 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v44 = static Calendar.current.getter(v42);
  LODWORD(v224) = static os_log_type_t.default.getter(v44);
  if (qword_10099B770 != -1) {
    swift_once(&qword_10099B770, sub_100651674);
  }
  uint64_t v223 = qword_100A2B080;
  uint64_t v229 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v45 = swift_allocObject(v229, 112LL, 7LL);
  __int128 v228 = xmmword_1007E4750;
  *(_OWORD *)(v45 + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  uint64_t v205 = a4;
  sub_10000A824(a4, (uint64_t)v41);
  uint64_t v46 = String.init<A>(describing:)(v41, v29);
  uint64_t v48 = v47;
  *(void *)(v45 + 56) = &type metadata for String;
  unint64_t v49 = sub_1000226F4();
  *(void *)(v45 + 64) = v49;
  *(void *)(v45 + 32) = v46;
  *(void *)(v45 + 40) = v48;
  uint64_t v51 = a1[3];
  uint64_t v50 = a1[4];
  uint64_t v227 = sub_100012ED8(a1, v51);
  uint64_t v52 = *(void *)(*(void *)(v50 + 8) + 8LL);
  uint64_t v53 = *(uint64_t (**)(uint64_t, uint64_t))(v52 + 32);
  uint64_t v54 = v53(v51, v52);
  uint64_t v55 = UUID.uuidString.getter(v54);
  uint64_t v57 = v56;
  uint64_t v226 = *(void (**)(char *, uint64_t))(v26 + 8);
  uint64_t v58 = v225;
  v226(v28, v225);
  *(void *)(v45 + 96) = &type metadata for String;
  *(void *)(v45 + 104) = v49;
  *(void *)(v45 + 72) = v55;
  *(void *)(v45 + 80) = v57;
  os_log(_:dso:log:_:_:)( v224,  &_mh_execute_header,  v223,  "Last known good key start date %@ for beacon %@ ",  48LL,  2LL,  v45);
  uint64_t v59 = swift_bridgeObjectRelease();
  uint64_t v60 = static os_log_type_t.default.getter(v59);
  uint64_t v209 = qword_100A2B080;
  uint64_t v61 = swift_allocObject(v229, 112LL, 7LL);
  *(_OWORD *)(v61 + swift_weakDestroy(v0 + 16) = v228;
  id v230 = v219;
  id v202 = v219;
  uint64_t v62 = sub_100004AEC(&qword_1009AC578);
  uint64_t v63 = String.init<A>(describing:)(&v230, v62);
  *(void *)(v61 + 56) = &type metadata for String;
  *(void *)(v61 + 64) = v49;
  *(void *)(v61 + 32) = v63;
  *(void *)(v61 + 40) = v64;
  uint64_t v221 = v52;
  uint64_t v222 = v51;
  int v220 = v53;
  uint64_t v65 = v53(v51, v52);
  uint64_t v66 = UUID.uuidString.getter(v65);
  uint64_t v68 = v67;
  uint64_t v224 = v28;
  v226(v28, v58);
  *(void *)(v61 + 96) = &type metadata for String;
  *(void *)(v61 + 104) = v49;
  uint64_t v223 = v49;
  *(void *)(v61 + 72) = v66;
  *(void *)(v61 + 80) = v68;
  os_log(_:dso:log:_:_:)(v60, &_mh_execute_header, v209, "Last online location info %@ for beacon %@ ", 43LL, 2LL, v61);
  swift_bridgeObjectRelease();
  uint64_t v69 = v210;
  sub_10000A824((uint64_t)v212, v210);
  uint64_t v70 = v217;
  uint64_t v71 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v217 + 48);
  uint64_t v72 = v211;
  if (v71(v69, 1LL, v211) != 1)
  {
    id v85 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 32);
    id v84 = v204;
    v85(v204, v69, v72);
    uint64_t v86 = sub_100012ED8(v216, v216[3]);
    uint64_t v87 = sub_1006A0F74(*v86);
    uint64_t v88 = v213;
    uint64_t v89 = v214;
    uint64_t v90 = v215;
    uint64_t result = (*(uint64_t (**)(char *, void, uint64_t))(v214 + 104))( v213,  enum case for Calendar.Component.minute(_:),  v215);
    if (!__OFSUB__(0LL, v87))
    {
      uint64_t v91 = (uint64_t)v193;
      Calendar.date(byAdding:value:to:wrappingComponents:)(v88, -v87, v84, 0LL);
      (*(void (**)(char *, uint64_t))(v89 + 8))(v88, v90);
      uint64_t v92 = *(void (**)(char *, char *, uint64_t))(v70 + 16);
      uint64_t v93 = v197;
      v92(v197, v84, v72);
      if (v71(v91, 1LL, v72) == 1)
      {
        uint64_t v94 = v201;
        v85(v201, (uint64_t)v93, v72);
        sub_100015794(v91, (uint64_t *)&unk_10099D720);
      }

      else
      {
        (*(void (**)(char *, uint64_t))(v70 + 8))(v93, v72);
        uint64_t v94 = v201;
        v85(v201, v91, v72);
      }

      uint64_t v95 = v208;
      uint64_t v99 = v195;
      sub_10000A824(v205, v195);
      unsigned int v100 = v71(v99, 1LL, v72);
      id v101 = v224;
      uint64_t v212 = (uint64_t (*)(uint64_t, char *, uint64_t))v85;
      if (v100 == 1)
      {
        sub_100015794(v99, (uint64_t *)&unk_10099D720);
      }

      else
      {
        uint64_t v119 = v191;
        v85(v191, v99, v72);
        if ((static Date.> infix(_:_:)(v119, v94) & 1) != 0)
        {
          uint64_t v120 = ((uint64_t (*)(char *, char *, uint64_t))v92)(v95, v119, v72);
          uint64_t v121 = static os_log_type_t.default.getter(v120);
          uint64_t v215 = qword_100A2B080;
          uint64_t v122 = swift_allocObject(v229, 112LL, 7LL);
          *(_OWORD *)(v122 + swift_weakDestroy(v0 + 16) = v228;
          uint64_t v123 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
          uint64_t v124 = dispatch thunk of CustomStringConvertible.description.getter(v72, v123);
          uint64_t v125 = v223;
          *(void *)(v122 + 56) = &type metadata for String;
          *(void *)(v122 + 64) = v125;
          *(void *)(v122 + 32) = v124;
          *(void *)(v122 + 40) = v126;
          uint64_t v127 = v220(v222, v221);
          uint64_t v128 = UUID.uuidString.getter(v127);
          BOOL v129 = v101;
          uint64_t v131 = v130;
          v226(v129, v225);
          *(void *)(v122 + 96) = &type metadata for String;
          *(void *)(v122 + 104) = v125;
          *(void *)(v122 + 72) = v128;
          *(void *)(v122 + 80) = v131;
          os_log(_:dso:log:_:_:)( v121,  &_mh_execute_header,  v215,  "Fetch limit set to most recent key date %@ for beacon %@ ",  57LL,  2LL,  v122);
          swift_bridgeObjectRelease();
          uint64_t v117 = *(void (**)(char *, uint64_t))(v70 + 8);
          v117(v191, v72);
          v117(v201, v72);
LABEL_22:
          uint64_t v118 = v84;
          goto LABEL_25;
        }

        (*(void (**)(char *, uint64_t))(v70 + 8))(v119, v72);
      }

      uint64_t v145 = ((uint64_t (*)(char *, char *, uint64_t))v92)(v95, v94, v72);
      uint64_t v146 = static os_log_type_t.default.getter(v145);
      uint64_t v147 = qword_100A2B080;
      uint64_t v148 = swift_allocObject(v229, 112LL, 7LL);
      *(_OWORD *)(v148 + swift_weakDestroy(v0 + 16) = v228;
      uint64_t v149 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
      uint64_t v150 = v94;
      uint64_t v151 = dispatch thunk of CustomStringConvertible.description.getter(v72, v149);
      uint64_t v152 = v223;
      *(void *)(v148 + 56) = &type metadata for String;
      *(void *)(v148 + 64) = v152;
      *(void *)(v148 + 32) = v151;
      *(void *)(v148 + 40) = v153;
      uint64_t v154 = v220(v222, v221);
      uint64_t v155 = UUID.uuidString.getter(v154);
      int v156 = v101;
      uint64_t v158 = v157;
      v226(v156, v225);
      *(void *)(v148 + 96) = &type metadata for String;
      *(void *)(v148 + 104) = v152;
      *(void *)(v148 + 72) = v155;
      *(void *)(v148 + 80) = v158;
      os_log(_:dso:log:_:_:)( v146,  &_mh_execute_header,  v147,  "Fetch limit set to policy limit %@ for beacon %@ ",  49LL,  2LL,  v148);
      swift_bridgeObjectRelease();
      uint64_t v117 = *(void (**)(char *, uint64_t))(v217 + 8);
      v117(v150, v72);
      uint64_t v118 = v204;
      goto LABEL_25;
    }

uint64_t sub_1003DCB94(char a1)
{
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  if ((a1 & 1) != 0) {
    uint64_t v2 = sub_1006A0BD8(v5);
  }
  else {
    uint64_t v2 = sub_1006A0608(v5);
  }
  uint64_t v3 = v2;
  swift_bridgeObjectRelease();
  if ((v3 & 0x8000000000000000LL) == 0) {
    return v3;
  }
  uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
  __break(1u);
  return result;
}

uint64_t sub_1003DCC84()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A8D8);
  sub_10000A720(v0, (uint64_t)qword_100A2A8D8);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x65736142656D6974LL,  0xED00007379654B64LL);
}

uint64_t TimeBasedKeySequence.description.getter(char a1)
{
  if ((a1 & 1) != 0) {
    return 0x61646E6F6365732ELL;
  }
  else {
    return 0x7972616D6972702ELL;
  }
}

searchpartyd::TimeBasedKeySequence_optional __swiftcall TimeBasedKeySequence.init(rawValue:)(Swift::Int rawValue)
{
  if (rawValue == 2) {
    v1.value = searchpartyd_TimeBasedKeySequence_secondary;
  }
  else {
    v1.value = searchpartyd_TimeBasedKeySequence_unknownDefault;
  }
  if (rawValue == 1) {
    return 0;
  }
  else {
    return v1;
  }
}

uint64_t TimeBasedKeySequence.rawValue.getter(char a1)
{
  return (a1 & 1u) + 1;
}

Swift::Int sub_1003DCD64()
{
  int v1 = *v0;
  Hasher.init(_seed:)(v4, 0LL);
  if (v1) {
    Swift::UInt v2 = 2LL;
  }
  else {
    Swift::UInt v2 = 1LL;
  }
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

void sub_1003DCDB0()
{
  if (*v0) {
    Swift::UInt v1 = 2LL;
  }
  else {
    Swift::UInt v1 = 1LL;
  }
  Hasher._combine(_:)(v1);
}

Swift::Int sub_1003DCDE4(uint64_t a1)
{
  int v2 = *v1;
  Hasher.init(_seed:)(v5, a1);
  if (v2) {
    Swift::UInt v3 = 2LL;
  }
  else {
    Swift::UInt v3 = 1LL;
  }
  Hasher._combine(_:)(v3);
  return Hasher._finalize()();
}

void *sub_1003DCE2C@<X0>(void *result@<X0>, char *a2@<X8>)
{
  if (*result == 2LL) {
    char v2 = 1;
  }
  else {
    char v2 = 2;
  }
  if (*result == 1LL) {
    char v3 = 0;
  }
  else {
    char v3 = v2;
  }
  *a2 = v3;
  return result;
}

void sub_1003DCE4C(uint64_t *a1@<X8>)
{
  uint64_t v2 = 1LL;
  if (*v1) {
    uint64_t v2 = 2LL;
  }
  *a1 = v2;
}

uint64_t sub_1003DCE64()
{
  if (*v0) {
    return 0x61646E6F6365732ELL;
  }
  else {
    return 0x7972616D6972702ELL;
  }
}

uint64_t sub_1003DCEA4@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = sub_100004AEC(&qword_1009AC570);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v60 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for DateInterval(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v11 = (char *)&v60 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v13 = (char *)&v60 - v12;
  uint64_t v14 = type metadata accessor for TimeBasedKeysCriteria(0LL);
  uint64_t v64 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v62 = (uint64_t *)((char *)&v60 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  __chkstk_darwin(v15);
  uint64_t v63 = (char *)&v60 - v17;
  id v18 = [a1 dateInterval];
  if (v18)
  {
    uint64_t v19 = v18;
    static DateInterval._unconditionallyBridgeFromObjectiveC(_:)(v18);

    uint64_t v20 = *(void (**)(char *, char *, uint64_t))(v8 + 32);
    v20(v6, v11, v7);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v8 + 56))(v6, 0LL, 1LL, v7);
    if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v8 + 48))(v6, 1LL, v7) != 1)
    {

      v20(v13, v6, v7);
      uint64_t v21 = v63;
      v20(v63, v13, v7);
      uint64_t v22 = v21;
      uint64_t v23 = v14;
      uint64_t v24 = 0LL;
LABEL_34:
      swift_storeEnumTagMultiPayload(v22, v23, v24);
LABEL_41:
      uint64_t v59 = v64;
      sub_1003DE79C((uint64_t)v21, a2);
      return (*(uint64_t (**)(uint64_t, void, uint64_t, uint64_t))(v59 + 56))(a2, 0LL, 1LL, v14);
    }
  }

  else
  {
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v8 + 56))(v6, 1LL, 1LL, v7);
  }

  sub_100015794((uint64_t)v6, &qword_1009AC570);
  id v25 = [a1 sequence];
  if (v25)
  {
    uint64_t v26 = v25;
    id v27 = [a1 index];
    if (v27)
    {
      uint64_t v28 = v27;
      id v29 = [a1 hint];
      if (v29)
      {
        uint64_t v30 = v29;
        id v31 = [v26 integerValue];
        if (v31 == (id)1)
        {
          uint64_t v32 = v14;
          uint64_t v33 = a2;
          char v34 = 0;
        }

        else
        {
          if (v31 != (id)2)
          {

            return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v64 + 56))(a2, 1LL, 1LL, v14);
          }

          uint64_t v32 = v14;
          uint64_t v33 = a2;
          char v34 = 1;
        }

        id v55 = [v28 unsignedLongLongValue];
        unsigned __int8 v56 = [v30 unsignedCharValue];

        uint64_t v21 = v63;
        *uint64_t v63 = v34;
        *((void *)v21 + 1) = v55;
        v21[16] = v56;
        uint64_t v14 = v32;
        swift_storeEnumTagMultiPayload(v21, v32, 3LL);
        a2 = v33;
        goto LABEL_41;
      }
    }

    else
    {
      uint64_t v28 = v26;
    }
  }

  id v35 = [a1 indices];
  if (!v35)
  {
    id v48 = [a1 index];
    if (v48)
    {
      unint64_t v49 = v48;
      id v50 = [a1 hint];
      if (v50)
      {
        uint64_t v51 = v50;
        uint64_t v52 = v14;
        id v53 = [v49 unsignedLongLongValue];
        unsigned __int8 v54 = [v51 unsignedCharValue];

        uint64_t v21 = v63;
        *(void *)uint64_t v63 = v53;
        uint64_t v14 = v52;
        v21[8] = v54;
        uint64_t v22 = v21;
        uint64_t v23 = v52;
        uint64_t v24 = 2LL;
        goto LABEL_34;
      }
    }

    uint64_t v21 = v63;
    uint64_t v22 = v63;
    uint64_t v23 = v14;
    uint64_t v24 = 4LL;
    goto LABEL_34;
  }

  uint64_t v36 = v35;
  unint64_t v37 = sub_100127968();
  uint64_t v38 = static Array._unconditionallyBridgeFromObjectiveC(_:)(v36, v37);

  if (!((unint64_t)v38 >> 62))
  {
    uint64_t v39 = *(void *)((v38 & 0xFFFFFFFFFFFFF8LL) + 0x10);
    if (v39) {
      goto LABEL_17;
    }
LABEL_39:
    swift_bridgeObjectRelease();

    uint64_t v42 = _swiftEmptyArrayStorage;
LABEL_40:
    uint64_t v58 = (uint64_t)v62;
    *uint64_t v62 = v42;
    swift_storeEnumTagMultiPayload(v58, v14, 1LL);
    uint64_t v21 = v63;
    sub_1003DE79C(v58, (uint64_t)v63);
    goto LABEL_41;
  }

  if (v38 < 0) {
    uint64_t v57 = v38;
  }
  else {
    uint64_t v57 = v38 & 0xFFFFFFFFFFFFFF8LL;
  }
  swift_bridgeObjectRetain(v38);
  uint64_t v39 = _CocoaArrayWrapper.endIndex.getter(v57);
  swift_bridgeObjectRelease();
  if (!v39) {
    goto LABEL_39;
  }
LABEL_17:
  uint64_t v60 = v14;
  uint64_t v61 = a2;
  uint64_t v65 = _swiftEmptyArrayStorage;
  uint64_t result = sub_100032B00(0, v39 & ~(v39 >> 63), 0);
  if ((v39 & 0x8000000000000000LL) == 0)
  {
    uint64_t v41 = 0LL;
    uint64_t v42 = v65;
    do
    {
      if ((v38 & 0xC000000000000001LL) != 0) {
        id v43 = (id)specialized _ArrayBuffer._getElementSlowPath(_:)(v41, v38);
      }
      else {
        id v43 = *(id *)(v38 + 8 * v41 + 32);
      }
      uint64_t v44 = v43;
      id v45 = [v43 unsignedLongLongValue];

      uint64_t v65 = v42;
      unint64_t v47 = v42[2];
      unint64_t v46 = v42[3];
      if (v47 >= v46 >> 1)
      {
        sub_100032B00(v46 > 1, v47 + 1, 1);
        uint64_t v42 = v65;
      }

      ++v41;
      v42[2] = v47 + 1;
      v42[v47 + 4] = v45;
    }

    while (v39 != v41);
    swift_bridgeObjectRelease();

    uint64_t v14 = v60;
    a2 = v61;
    goto LABEL_40;
  }

  __break(1u);
  return result;
}

void TimeBasedKeysCriteria.description.getter()
{
  uint64_t v1 = type metadata accessor for DateInterval(0LL);
  __chkstk_darwin(v1);
  uint64_t v2 = type metadata accessor for TimeBasedKeysCriteria(0LL);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v6 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_1003DD894(v0, (uint64_t)v4);
  uint64_t v5 = (char *)sub_1003DD524 + 4 * byte_1007FEB20[swift_getEnumCaseMultiPayload(v4, v2)];
  __asm { BR              X10 }

uint64_t sub_1003DD524()
{
  *(void *)(v4 - 64) = 0LL;
  *(void *)(v4 - 56) = 0xE000000000000000LL;
  _StringGuts.grow(_:)(17LL);
  swift_bridgeObjectRelease();
  strcpy((char *)(v4 - 64), ".dateInterval(");
  *(_BYTE *)(v4 - 49) = -18;
  uint64_t v5 = sub_100007864( &qword_1009A0DE0,  (uint64_t (*)(uint64_t))&type metadata accessor for DateInterval,  (uint64_t)&protocol conformance descriptor for DateInterval);
  v6._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter(v0, v5);
  String.append(_:)(v6);
  swift_bridgeObjectRelease();
  v7._countAndFlagsBits = 41LL;
  v7._object = (void *)0xE100000000000000LL;
  String.append(_:)(v7);
  uint64_t v8 = *(void *)(v4 - 64);
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v1, v0);
  return v8;
}

uint64_t type metadata accessor for TimeBasedKeysCriteria(uint64_t a1)
{
  uint64_t result = qword_1009AC538;
  if (!qword_1009AC538) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for TimeBasedKeysCriteria);
  }
  return result;
}

uint64_t sub_1003DD894(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimeBasedKeysCriteria(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1003DD8DC()
{
  unint64_t result = qword_1009AC4C0;
  if (!qword_1009AC4C0)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for TimeBasedKeySequence,  &type metadata for TimeBasedKeySequence);
    atomic_store(result, (unint64_t *)&qword_1009AC4C0);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for TimeBasedKeySequence(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1003DD970 + 4 * byte_1007FEB2A[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1003DD9A4 + 4 * byte_1007FEB25[v4]))();
}

uint64_t sub_1003DD9A4(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003DD9AC(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1003DD9B4LL);
  }
  return result;
}

uint64_t sub_1003DD9C0(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1003DD9C8LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1003DD9CC(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003DD9D4(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for TimeBasedKeySequence()
{
  return &type metadata for TimeBasedKeySequence;
}

uint64_t *initializeBufferWithCopyOfBuffer for TimeBasedKeysCriteria(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 - 8);
  int v6 = *(_DWORD *)(v5 + 80);
  if ((v6 & 0x20000) != 0)
  {
    uint64_t v10 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v10 + ((v6 + 16LL) & ~(unint64_t)v6));
    swift_retain(v10);
  }

  else
  {
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v11 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v11);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(v5 + 64));
    }

    else
    {
      uint64_t v9 = type metadata accessor for DateInterval(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v9 - 8) + 16LL))(a1, a2, v9);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t destroy for TimeBasedKeysCriteria(void *a1, uint64_t a2)
{
  uint64_t result = swift_getEnumCaseMultiPayload(a1, a2);
  if ((_DWORD)result == 1) {
    return swift_bridgeObjectRelease(*a1);
  }
  if (!(_DWORD)result)
  {
    uint64_t v4 = type metadata accessor for DateInterval(0LL);
    return (*(uint64_t (**)(void *, uint64_t))(*(void *)(v4 - 8) + 8LL))(a1, v4);
  }

  return result;
}

uint64_t *initializeWithCopy for TimeBasedKeysCriteria(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
  if (EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = *a2;
    *a1 = *a2;
    swift_bridgeObjectRetain(v8);
    swift_storeEnumTagMultiPayload(a1, a3, 1LL);
  }

  else if (EnumCaseMultiPayload)
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v7 = type metadata accessor for DateInterval(0LL);
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

uint64_t *assignWithCopy for TimeBasedKeysCriteria(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1003DDC98((uint64_t)a1);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(a2, a3);
    if (EnumCaseMultiPayload == 1)
    {
      uint64_t v8 = *a2;
      *a1 = *a2;
      swift_bridgeObjectRetain(v8);
      swift_storeEnumTagMultiPayload(a1, a3, 1LL);
    }

    else if (EnumCaseMultiPayload)
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      uint64_t v7 = type metadata accessor for DateInterval(0LL);
      (*(void (**)(uint64_t *, uint64_t *, uint64_t))(*(void *)(v7 - 8) + 16LL))(a1, a2, v7);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t sub_1003DDC98(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for TimeBasedKeysCriteria(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

void *initializeWithTake for TimeBasedKeysCriteria(void *a1, const void *a2, uint64_t a3)
{
  if (swift_getEnumCaseMultiPayload(a2, a3))
  {
    memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
  }

  else
  {
    uint64_t v6 = type metadata accessor for DateInterval(0LL);
    (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
    swift_storeEnumTagMultiPayload(a1, a3, 0LL);
  }

  return a1;
}

void *assignWithTake for TimeBasedKeysCriteria(void *a1, const void *a2, uint64_t a3)
{
  if (a1 != a2)
  {
    sub_1003DDC98((uint64_t)a1);
    if (swift_getEnumCaseMultiPayload(a2, a3))
    {
      memcpy(a1, a2, *(void *)(*(void *)(a3 - 8) + 64LL));
    }

    else
    {
      uint64_t v6 = type metadata accessor for DateInterval(0LL);
      (*(void (**)(void *, const void *, uint64_t))(*(void *)(v6 - 8) + 32LL))(a1, a2, v6);
      swift_storeEnumTagMultiPayload(a1, a3, 0LL);
    }
  }

  return a1;
}

uint64_t sub_1003DDDF4(uint64_t a1)
{
  uint64_t result = type metadata accessor for DateInterval(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.BridgeObject + 64;
    void v4[2] = "\t";
    void v4[3] = &unk_1007FEC80;
    swift_initEnumMetadataMultiPayload(a1, 256LL, 4LL, v4);
    return 0LL;
  }

  return result;
}

uint64_t sub_1003DDE78()
{
  return swift_task_switch(sub_1003DDE8C, 0LL, 0LL);
}

uint64_t sub_1003DDE8C()
{
  uint64_t v1 = type metadata accessor for AnalyticsEvent(0LL);
  uint64_t v2 = (char *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v2;
  swift_defaultActor_initialize(v2);
  unint64_t v3 = sub_10041271C((uint64_t)_swiftEmptyArrayStorage);
  *((void *)v2 + 14) = v3;
  UUID.init()(v3);
  uint64_t v4 = &v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v5 = type metadata accessor for DispatchTime(0LL);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL);
  v6(v4, 1LL, 1LL, v5);
  v6(&v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1LL, 1LL, v5);
  *((void *)v2 + 15) = 0xD00000000000003FLL;
  *((void *)v2 + swift_weakDestroy(v0 + 16) = 0x80000001008605F0LL;
  return swift_task_switch(sub_1003DDF80, v2, 0LL);
}

uint64_t sub_1003DDF80()
{
  return swift_task_switch(sub_1003DDFE0, 0LL, 0LL);
}

uint64_t sub_1003DDFE0()
{
  uint64_t v1 = type metadata accessor for AnalyticsPublisher();
  uint64_t v2 = swift_allocObject(v1, 112LL, 15LL);
  v0[3] = v2;
  swift_defaultActor_initialize(v2);
  unint64_t v3 = (uint64_t **)swift_task_alloc(dword_1009BDE0C);
  v0[4] = (uint64_t)v3;
  *unint64_t v3 = v0;
  v3[1] = (uint64_t *)sub_1003DE04C;
  return sub_100713F88(v0[2]);
}

uint64_t sub_1003DE04C()
{
  return swift_task_switch(sub_1003DE0A8, 0LL, 0LL);
}

uint64_t sub_1003DE0A8()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003DE0D8(uint64_t a1, uint64_t a2, uint64_t a3, char a4)
{
  uint64_t v66 = a1;
  int v6 = a4 & 1;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v67 = v7;
  uint64_t v68 = v8;
  __chkstk_darwin(v7);
  uint64_t v69 = (char *)&v61 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v70 = *(void *)(v10 - 8);
  uint64_t v11 = __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v61 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = __chkstk_darwin(v11);
  uint64_t v16 = (char *)&v61 - v15;
  uint64_t v17 = __chkstk_darwin(v14);
  uint64_t v19 = (char *)&v61 - v18;
  __chkstk_darwin(v17);
  uint64_t v21 = (char *)&v61 - v20;
  int v65 = v6;
  uint64_t v22 = sub_1003DCB94(v6);
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  uint64_t v23 = sub_1006A0608(v74[0]);
  uint64_t v24 = swift_bridgeObjectRelease();
  if (v23 < 0)
  {
    uint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    __break(1u);
    return result;
  }

  Date.timeIntervalSinceReferenceDate.getter(v24);
  Date.init(timeIntervalSinceReferenceDate:)(v25);
  uint64_t v26 = sub_100007864( &qword_1009A1280,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  char v27 = dispatch thunk of static Comparable.>= infix(_:_:)(a2, a3, v10, v26);
  uint64_t v28 = *(void (**)(char *, uint64_t, uint64_t))(v70 + 16);
  if ((v27 & 1) != 0) {
    uint64_t v29 = a2;
  }
  else {
    uint64_t v29 = a3;
  }
  v28(v19, v29, v10);
  double v30 = Date.timeIntervalSince(_:)(v21) / ((double)(unint64_t)v22 * 60.0);
  if ((~*(void *)&v30 & 0x7FF0000000000000LL) == 0)
  {
    __break(1u);
    goto LABEL_23;
  }

  if (v30 <= -1.0)
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  if (v30 >= 1.84467441e19)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if ((unint64_t)v30 == -1LL)
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  v75[0] = (unint64_t)v30 + 1;
  if (qword_10099B3E0 != -1) {
LABEL_26:
  }
    swift_once(&qword_10099B3E0, sub_1003DCC84);
  uint64_t v31 = type metadata accessor for Logger(0LL);
  sub_10000A720(v31, (uint64_t)qword_100A2A8D8);
  v28(v16, a2, v10);
  uint64_t v32 = v13;
  v28(v13, a3, v10);
  uint64_t v34 = v68;
  uint64_t v33 = v69;
  uint64_t v35 = v67;
  uint64_t v36 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v68 + 16))(v69, v66, v67);
  unint64_t v37 = (os_log_s *)Logger.logObject.getter(v36);
  os_log_type_t v38 = static os_log_type_t.info.getter(v37);
  int v39 = v38;
  if (os_log_type_enabled(v37, v38))
  {
    uint64_t v40 = swift_slowAlloc(62LL, -1LL);
    uint64_t v62 = v32;
    uint64_t v41 = v40;
    uint64_t v66 = swift_slowAlloc(128LL, -1LL);
    v74[0] = v66;
    *(_DWORD *)uint64_t v41 = 136447491;
    BOOL v42 = v65 == 0;
    if (v65) {
      uint64_t v43 = 0x61646E6F6365732ELL;
    }
    else {
      uint64_t v43 = 0x7972616D6972702ELL;
    }
    int v65 = v39;
    if (v42) {
      unint64_t v44 = 0xE800000000000000LL;
    }
    else {
      unint64_t v44 = 0xEA00000000007972LL;
    }
    uint64_t v72 = sub_1003F11D4(v43, v44, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v72, &v73, v41 + 4, v41 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v41 + 12) = 2048;
    swift_beginAccess(v75, &v72, 0LL, 0LL);
    uint64_t v71 = v75[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v41 + 14, v41 + 22);
    *(_WORD *)(v41 + 22) = 2082;
    uint64_t v64 = v21;
    uint64_t v45 = sub_100007864( (unint64_t *)&qword_1009AFB20,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    uint64_t v63 = v19;
    uint64_t v46 = v45;
    uint64_t v47 = dispatch thunk of CustomStringConvertible.description.getter(v10, v45);
    uint64_t v71 = sub_1003F11D4(v47, v48, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v41 + 24, v41 + 32);
    swift_bridgeObjectRelease();
    uint64_t v49 = v35;
    id v50 = *(void (**)(char *, uint64_t))(v70 + 8);
    v50(v16, v10);
    *(_WORD *)(v41 + 32) = 2082;
    uint64_t v51 = v62;
    uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter(v10, v46);
    uint64_t v71 = sub_1003F11D4(v52, v53, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v41 + 34, v41 + 42);
    swift_bridgeObjectRelease();
    v50(v51, v10);
    *(_WORD *)(v41 + 42) = 2160;
    uint64_t v71 = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v41 + 44, v41 + 52);
    *(_WORD *)(v41 + 52) = 2081;
    uint64_t v54 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    id v55 = v69;
    uint64_t v56 = dispatch thunk of CustomStringConvertible.description.getter(v49, v54);
    uint64_t v71 = sub_1003F11D4(v56, v57, v74);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v71, &v72, v41 + 54, v41 + 62);
    swift_bridgeObjectRelease();
    (*(void (**)(char *, uint64_t))(v68 + 8))(v55, v49);
    _os_log_impl( (void *)&_mh_execute_header,  v37,  (os_log_type_t)v65,  "Bucket [%{public}s] calculated to ‣%llu baseTime: %{public}s date: %{public}s  beacon: %{private,mask.hash}s.",  (uint8_t *)v41,  0x3Eu);
    uint64_t v58 = v66;
    swift_arrayDestroy(v66, 4LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v58, -1LL, -1LL);
    swift_slowDealloc(v41, -1LL, -1LL);

    v50(v63, v10);
    v50(v64, v10);
  }

  else
  {

    (*(void (**)(char *, uint64_t))(v34 + 8))(v33, v35);
    uint64_t v59 = *(void (**)(char *, uint64_t))(v70 + 8);
    v59(v32, v10);
    v59(v16, v10);
    v59(v19, v10);
    v59(v21, v10);
  }

  swift_beginAccess(v75, v74, 0LL, 0LL);
  return v75[0];
}

uint64_t sub_1003DE79C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for TimeBasedKeysCriteria(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_1003DE7E0(void *a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v31 = a2;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  uint64_t v29 = *(void *)(v7 - 8);
  uint64_t v30 = v7;
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v28 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for Date(0LL);
  uint64_t v11 = *(void *)(v10 - 8);
  __chkstk_darwin(v10);
  uint64_t v13 = (char *)&v28 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v15 = a1[3];
  uint64_t v14 = a1[4];
  sub_100012ED8(a1, v15);
  double v16 = 0.0;
  double v17 = 0.0;
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v14 + 112))(v15, v14) & 1) != 0)
  {
    double v18 = Date.timeIntervalSince(_:)(a3);
    if (v18 > 0.0) {
      double v17 = v18 * 0.0002;
    }
    else {
      double v17 = 0.0;
    }
  }

  double v19 = Date.timeIntervalSince(_:)(a3);
  if (v19 >= 0.0) {
    double v16 = v19;
  }
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
  unint64_t v20 = sub_1006A0608(v32);
  uint64_t v21 = swift_bridgeObjectRelease();
  if ((v20 & 0x8000000000000000LL) != 0) {
    goto LABEL_27;
  }
  if (!is_mul_ok(v20, 0x3CuLL))
  {
    __break(1u);
    goto LABEL_20;
  }

  double v22 = v16 / (double)(60 * v20);
  if ((~*(void *)&v22 & 0x7FF0000000000000LL) == 0)
  {
LABEL_20:
    __break(1u);
    goto LABEL_21;
  }

  if (v22 <= -1.0)
  {
LABEL_21:
    __break(1u);
    goto LABEL_22;
  }

  if (v22 >= 1.84467441e19)
  {
LABEL_22:
    __break(1u);
    goto LABEL_23;
  }

  unint64_t v23 = v31 + (unint64_t)v22;
  if (__CFADD__(v31, (unint64_t)v22))
  {
LABEL_23:
    __break(1u);
    goto LABEL_24;
  }

  Date.addingTimeInterval(_:)(v21, v17);
  uint64_t v25 = a1[3];
  uint64_t v24 = a1[4];
  sub_100012ED8(a1, v25);
  (*(void (**)(uint64_t))(*(void *)(*(void *)(v24 + 8) + 8LL) + 32LL))(v25);
  unint64_t v26 = sub_1003DE0D8((uint64_t)v9, (uint64_t)v13, a4, 0);
  (*(void (**)(char *, uint64_t))(v29 + 8))(v9, v30);
  (*(void (**)(char *, uint64_t))(v11 + 8))(v13, v10);
  unint64_t result = v23 - v26;
  if (v23 < v26)
  {
LABEL_24:
    __break(1u);
    goto LABEL_25;
  }

  if (__CFADD__(v23, v26))
  {
LABEL_25:
    __break(1u);
    goto LABEL_26;
  }

  if (v23 + v26 < result)
  {
LABEL_26:
    __break(1u);
LABEL_27:
    unint64_t result = _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    __break(1u);
  }

  return result;
}

uint64_t sub_1003DEAD8()
{
  return swift_deallocClassInstance(v0, 48LL, 7LL);
}

uint64_t type metadata accessor for WildModeAssociationManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd26WildModeAssociationManager);
}

uint64_t *AirPodsLESendPairingStatusCommandPayload.expectedLength.unsafeMutableAddressor()
{
  return &static AirPodsLESendPairingStatusCommandPayload.expectedLength;
}

uint64_t static AirPodsLESendPairingStatusCommandPayload.expectedLength.getter()
{
  return static AirPodsLESendPairingStatusCommandPayload.expectedLength;
}

uint64_t static AirPodsLESendPairingStatusCommandPayload.expectedLength.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess(&static AirPodsLESendPairingStatusCommandPayload.expectedLength, v3, 1LL, 0LL);
  static AirPodsLESendPairingStatusCommandPayload.expectedLength = a1;
  return result;
}

uint64_t (*static AirPodsLESendPairingStatusCommandPayload.expectedLength.modify( uint64_t a1))(void)
{
  return j__swift_endAccess;
}

double AirPodsLESendPairingStatusCommandPayload.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v7[1];
    *a2 = v7[0];
    a2[1] = v5;
    double result = *(double *)&v8;
    __int128 v6 = v9;
    a2[2] = v8;
    a2[3] = v6;
  }

  return result;
}

uint64_t sub_1003DEC2C(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_1003DEC38 + *((int *)qword_1003DECF0 + (a2 >> 62))))();
}

uint64_t sub_1003DEC48(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (BYTE6(a2) != 60LL)
  {
    __break(1u);
    JUMPOUT(0x1003DECECLL);
  }

  return ((uint64_t (*)(void))((char *)&loc_1003DEC84 + *((int *)qword_1003DED00 + (a4 >> 62))))();
}

uint64_t sub_1003DED10@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100012ED8(a1, v5);
  dispatch thunk of BinaryDecoding.container()(v27, v5, v6);
  uint64_t v7 = v28;
  uint64_t v8 = v29;
  sub_100037298((uint64_t)v27, v28);
  uint64_t v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)(60LL, v7, v8);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    uint64_t v11 = v9;
    unint64_t v12 = v10;
    uint64_t v13 = v28;
    uint64_t v14 = v29;
    sub_100037298((uint64_t)v27, v28);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(4LL, v13, v14);
    uint64_t v34 = v15;
    uint64_t v17 = v28;
    uint64_t v16 = v29;
    sub_100037298((uint64_t)v27, v28);
    uint64_t v25 = dispatch thunk of BinaryDecodingContaining.decode(length:)(100LL, v17, v16);
    unint64_t v26 = v18;
    uint64_t v19 = v28;
    uint64_t v20 = v29;
    sub_100037298((uint64_t)v27, v28);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(1LL, v19, v20);
    sub_10001736C(v25, v26);
    sub_100042F34();
    uint64_t v21 = DataProtocol.intValue.getter(&type metadata for Data);
    sub_100178C64(v21, v25, v26);
    sub_100016F9C(v25, v26);
    sub_1003DEC2C(v11, v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v27);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    __int128 v23 = v31;
    *a2 = v30;
    a2[1] = v23;
    __int128 v24 = v33;
    a2[2] = v32;
    a2[3] = v24;
  }

  return result;
}

unint64_t sub_1003DEF14(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1003DEF40();
  unint64_t result = sub_1003DEF84();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_1003DEF40()
{
  unint64_t result = qword_1009AC660;
  if (!qword_1009AC660)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AirPodsLESendPairingStatusCommandPayload,  &type metadata for AirPodsLESendPairingStatusCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009AC660);
  }

  return result;
}

unint64_t sub_1003DEF84()
{
  unint64_t result = qword_1009AC668;
  if (!qword_1009AC668)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for AirPodsLESendPairingStatusCommandPayload,  &type metadata for AirPodsLESendPairingStatusCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009AC668);
  }

  return result;
}

ValueMetadata *type metadata accessor for AirPodsLESendPairingStatusCommandPayload()
{
  return &type metadata for AirPodsLESendPairingStatusCommandPayload;
}

uint64_t type metadata accessor for PairingValidator()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd16PairingValidator);
}

void __spoils<X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> sub_1003DEFF8( uint64_t a1, uint64_t a2)
{
  v2._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  v4._countAndFlagsBits = 44LL;
  v4._object = (void *)0xE100000000000000LL;
  String.append(_:)(v4);
  v5._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  uint64_t v6 = v5._object;
  String.append(_:)(v5);
  swift_bridgeObjectRelease(v6);
}

uint64_t sub_1003DF0AC()
{
  uint64_t result = *v0;
  sub_1003DEFF8(*v0, v0[1]);
  return result;
}

uint64_t sub_1003DF0B8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t *a3@<X8>)
{
  uint64_t result = sub_1003DF540(a1, a2);
  *a3 = result;
  a3[1] = v5;
  a3[2] = v6;
  a3[3] = v7;
  return result;
}

double sub_1003DF0E0@<D0>(_OWORD *a1@<X8>)
{
  double result = 0.0;
  *a1 = 0u;
  a1[1] = 0u;
  return result;
}

Swift::Int sub_1003DF0EC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = v0[1];
  Hasher.init(_seed:)(v5, 0LL);
  sub_1003DEFF8(v1, v2);
  String.hash(into:)(v5, v1, v3);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1003DF164(uint64_t a1)
{
  uint64_t v3 = *v1;
  sub_1003DEFF8(*v1, v1[1]);
  String.hash(into:)(a1, v3, v4);
  return swift_bridgeObjectRelease();
}

Swift::Int sub_1003DF1A8(uint64_t a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  Hasher.init(_seed:)(v6, a1);
  sub_1003DEFF8(v2, v3);
  String.hash(into:)(v6, v2, v4);
  swift_bridgeObjectRelease();
  return Hasher._finalize()();
}

uint64_t sub_1003DF21C(uint64_t a1)
{
  unint64_t v2 = sub_1001D6068();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003DF244(uint64_t a1)
{
  unint64_t v2 = sub_1001D6068();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003DF26C(uint64_t *a1, uint64_t *a2)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = *a1;
  sub_1003DEFF8(v5, v2);
  uint64_t v7 = v6;
  sub_1003DEFF8(v3, v4);
  if (v5 == v3 && v7 == v8) {
    char v10 = 1;
  }
  else {
    char v10 = _stringCompareWithSmolCheck(_:_:expecting:)(v5, v7, v3, v8, 0LL);
  }
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return v10 & 1;
}

uint64_t sub_1003DF318@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1003DF738(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }

  return result;
}

uint64_t sub_1003DF344(void *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = v1[1];
  uint64_t v4 = a1[3];
  uint64_t v5 = a1[4];
  sub_100012ED8(a1, v4);
  dispatch thunk of Encoder.singleValueContainer()(v12, v4, v5);
  sub_1003DEFF8(v2, v3);
  uint64_t v6 = v2;
  uint64_t v8 = v7;
  uint64_t v9 = v13;
  uint64_t v10 = v14;
  sub_100037298((uint64_t)v12, v13);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(v6, v8, v9, v10);
  swift_bridgeObjectRelease();
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
}

uint64_t sub_1003DF40C@<X0>(uint64_t *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1003DF540(*a1, a1[1]);
  *a2 = result;
  a2[1] = v4;
  a2[2] = v5;
  a2[3] = v6;
  return result;
}

uint64_t sub_1003DF43C@<X0>(uint64_t *a1@<X8>)
{
  uint64_t result = *v1;
  sub_1003DEFF8(*v1, v1[1]);
  *a1 = result;
  a1[1] = v4;
  return result;
}

unint64_t sub_1003DF46C()
{
  unint64_t result = qword_1009AC720;
  if (!qword_1009AC720)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FEE28, &type metadata for FeatureSupportMatrixProductType);
    atomic_store(result, (unint64_t *)&qword_1009AC720);
  }

  return result;
}

unint64_t sub_1003DF4B4()
{
  unint64_t result = qword_1009AC728;
  if (!qword_1009AC728)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FEE50, &type metadata for FeatureSupportMatrixProductType);
    atomic_store(result, (unint64_t *)&qword_1009AC728);
  }

  return result;
}

unint64_t sub_1003DF4FC()
{
  unint64_t result = qword_1009AC730;
  if (!qword_1009AC730)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FEE78, &type metadata for FeatureSupportMatrixProductType);
    atomic_store(result, (unint64_t *)&qword_1009AC730);
  }

  return result;
}

uint64_t sub_1003DF540(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = type metadata accessor for NSScanner.NumberRepresentation(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v27 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for CharacterSet(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v27 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v11 = objc_allocWithZone(&OBJC_CLASS___NSScanner);
  NSString v12 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(a2);
  id v13 = [v11 initWithString:v12];

  static CharacterSet.letters.getter();
  uint64_t v14 = NSScanner.scanCharacters(from:)(v10);
  uint64_t v16 = v15;
  (*(void (**)(char *, uint64_t))(v8 + 8))(v10, v7);
  if (!v16)
  {

    return 0LL;
  }

  uint64_t v17 = enum case for NSScanner.NumberRepresentation.decimal(_:);
  unint64_t v18 = *(void (**)(char *, uint64_t, uint64_t))(v4 + 104);
  v18(v6, enum case for NSScanner.NumberRepresentation.decimal(_:), v3);
  NSScanner.scanInt(representation:)(v6);
  char v20 = v19;
  uint64_t v21 = *(void (**)(char *, uint64_t))(v4 + 8);
  v21(v6, v3);
  if ((v20 & 1) != 0
    || (v22._countAndFlagsBits = 44LL,
        v22._object = (void *)0xE100000000000000LL,
        Swift::String_optional v23 = NSScanner.scanString(_:)(v22),
        !v23.value._object))
  {
    swift_bridgeObjectRelease(v16);

    return 0LL;
  }

  swift_bridgeObjectRelease(v23.value._object);
  v18(v6, v17, v3);
  NSScanner.scanInt(representation:)(v6);
  char v25 = v24;

  v21(v6, v3);
  if ((v25 & 1) != 0)
  {
    swift_bridgeObjectRelease(v16);
    return 0LL;
  }

  return v14;
}

uint64_t sub_1003DF738(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  dispatch thunk of Decoder.singleValueContainer()(v16, v3, v4);
  if (!v1)
  {
    uint64_t v3 = v17;
    uint64_t v5 = v18;
    sub_100012ED8(v16, v17);
    uint64_t v6 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v3, v5);
    uint64_t v9 = v6;
    uint64_t v10 = v7;
    swift_bridgeObjectRetain(v7);
    uint64_t v11 = sub_1003DF540(v9, v10);
    if (v12)
    {
      uint64_t v3 = v11;
      swift_bridgeObjectRelease();
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
      return v3;
    }

    unint64_t v13 = sub_1003DF870();
    uint64_t v14 = swift_allocError(&type metadata for FeatureSupportMatrixProductType.CodingError, v13, 0LL, 0LL);
    *uint64_t v15 = v9;
    v15[1] = v10;
    swift_willThrow(v14);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v16);
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v3;
}

unint64_t sub_1003DF870()
{
  unint64_t result = qword_1009AC738;
  if (!qword_1009AC738)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FEF60, &type metadata for FeatureSupportMatrixProductType.CodingError);
    atomic_store(result, (unint64_t *)&qword_1009AC738);
  }

  return result;
}

ValueMetadata *type metadata accessor for FeatureSupportMatrixProductType.CodingError()
{
  return &type metadata for FeatureSupportMatrixProductType.CodingError;
}

uint64_t initializeWithCopy for FeatureSupportMatrixProductType(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(a2 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v3;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  swift_bridgeObjectRetain(v3);
  return a1;
}

void *assignWithCopy for FeatureSupportMatrixProductType(void *a1, void *a2)
{
  *a1 = *a2;
  uint64_t v4 = a2[1];
  uint64_t v5 = a1[1];
  a1[1] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  a1[2] = a2[2];
  a1[3] = a2[3];
  return a1;
}

uint64_t assignWithTake for FeatureSupportMatrixProductType(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = *(void *)(a2 + 8);
  uint64_t v5 = *(void *)(a1 + 8);
  *(void *)a1 = *(void *)a2;
  *(void *)(a1 + 8) = v4;
  swift_bridgeObjectRelease(v5);
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = *(_OWORD *)(a2 + 16);
  return a1;
}

uint64_t getEnumTagSinglePayload for FeatureSupportMatrixProductType(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 32)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 8);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FeatureSupportMatrixProductType(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + swift_weakDestroy(v0 + 16) = 0LL;
    *(void *)(result + 24) = 0LL;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    *(void *)(result + 8) = 0LL;
    if (a3 < 0) {
      *(_BYTE *)(result + 32) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 8) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 32) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for FeatureSupportMatrixProductType()
{
  return &type metadata for FeatureSupportMatrixProductType;
}

uint64_t sub_1003DFA2C(uint64_t a1, char a2)
{
  uint64_t v4 = type metadata accessor for SharedBeaconRecord(0LL);
  __chkstk_darwin(v4);
  uint64_t v6 = (char *)&v14[-1] - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t My = type metadata accessor for Feature.FindMy(0LL);
  v14[3] = My;
  v14[4] = sub_10000A780();
  uint64_t v8 = sub_10000A7C8(v14);
  (*(void (**)(void *, void, uint64_t))(*(void *)(My - 8) + 104LL))( v8,  enum case for Feature.FindMy.itemSharing(_:),  My);
  LOBYTE(My) = isFeatureEnabled(_:)(v14);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v14);
  if ((My & 1) == 0)
  {
    char v11 = 0;
    return v11 & 1;
  }

  unsigned int v9 = *(unsigned __int8 *)(a1 + *(int *)(v4 + 64));
  sub_1003DFD78(a1, (uint64_t)v6);
  if (v9 >= 3)
  {
    sub_1003DFD3C((uint64_t)v6);
    goto LABEL_7;
  }

  int v10 = v6[*(int *)(v4 + 64)];
  sub_1003DFD3C((uint64_t)v6);
  if (v10 == 1)
  {
LABEL_7:
    char v11 = a2 ^ 1;
    return v11 & 1;
  }

  char v11 = 1;
  return v11 & 1;
}

uint64_t sub_1003DFB44(void *a1)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009AE470);
  __chkstk_darwin(v2);
  uint64_t v4 = &v17[-((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v5 = type metadata accessor for SharedBeaconRecord(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = &v17[-((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL) - 8];
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v10 + 112))(v9, v10) & 1) != 0)
  {
    sub_100013044((uint64_t)a1, (uint64_t)v17);
    uint64_t v11 = sub_100004AEC(&qword_1009B0530);
    char v12 = swift_dynamicCast(v4, v17, v11, v5, 6LL);
    unint64_t v13 = *(void (**)(_BYTE *, uint64_t, uint64_t, uint64_t))(v6 + 56);
    if ((v12 & 1) != 0)
    {
      v13(v4, 0LL, 1LL, v5);
      sub_1003DFCF8((uint64_t)v4, (uint64_t)v8);
      char v14 = sub_1003DFA2C((uint64_t)v8, 1);
      sub_1003DFD3C((uint64_t)v8);
    }

    else
    {
      char v14 = 1;
      v13(v4, 1LL, 1LL, v5);
      sub_1003DFCB8((uint64_t)v4);
    }
  }

  else
  {
    char v14 = 1;
  }

  return v14 & 1;
}

uint64_t sub_1003DFCB8(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009AE470);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1003DFCF8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SharedBeaconRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003DFD3C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for SharedBeaconRecord(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1003DFD78(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for SharedBeaconRecord(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t *SendPairingStatusCommandPayload.expectedLength.unsafeMutableAddressor()
{
  return &static SendPairingStatusCommandPayload.expectedLength;
}

uint64_t static SendPairingStatusCommandPayload.expectedLength.getter()
{
  return static SendPairingStatusCommandPayload.expectedLength;
}

uint64_t static SendPairingStatusCommandPayload.expectedLength.setter(uint64_t a1)
{
  uint64_t result = swift_beginAccess(&static SendPairingStatusCommandPayload.expectedLength, v3, 1LL, 0LL);
  static SendPairingStatusCommandPayload.expectedLength = a1;
  return result;
}

uint64_t (*static SendPairingStatusCommandPayload.expectedLength.modify(uint64_t a1))(void)
{
  return j__swift_endAccess;
}

double SendPairingStatusCommandPayload.init(from:)@<D0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  if (!v2)
  {
    __int128 v5 = v6[1];
    *a2 = v6[0];
    a2[1] = v5;
    double result = *(double *)&v7;
    a2[2] = v7;
  }

  return result;
}

uint64_t sub_1003DFECC(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_1003DFED8 + dword_1003DFFDC[a2 >> 62]))();
}

uint64_t sub_1003DFEE8(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (BYTE6(a2) != 60LL)
  {
    __break(1u);
    JUMPOUT(0x1003DFFD8LL);
  }

  return ((uint64_t (*)(void))((char *)&loc_1003DFF24 + dword_1003DFFEC[a4 >> 62]))();
}

uint64_t sub_1003E000C@<X0>(void *a1@<X0>, _OWORD *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100012ED8(a1, v5);
  dispatch thunk of BinaryDecoding.container()(v20, v5, v6);
  uint64_t v7 = v21;
  uint64_t v8 = v22;
  sub_100037298((uint64_t)v20, v21);
  uint64_t v9 = dispatch thunk of BinaryDecodingContaining.decode(length:)(60LL, v7, v8);
  if (v2)
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v20);
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }

  else
  {
    uint64_t v11 = v9;
    unint64_t v12 = v10;
    uint64_t v13 = v21;
    uint64_t v14 = v22;
    sub_100037298((uint64_t)v20, v21);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(4LL, v13, v14);
    uint64_t v26 = v15;
    uint64_t v17 = v21;
    uint64_t v16 = v22;
    sub_100037298((uint64_t)v20, v21);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(1286LL, v17, v16);
    sub_1003DFECC(v11, v12);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v20);
    uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
    __int128 v19 = v24;
    *a2 = v23;
    a2[1] = v19;
    a2[2] = v25;
  }

  return result;
}

unint64_t sub_1003E0188(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1003E01B4();
  unint64_t result = sub_1003E01F8();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_1003E01B4()
{
  unint64_t result = qword_1009AC748;
  if (!qword_1009AC748)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SendPairingStatusCommandPayload,  &type metadata for SendPairingStatusCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009AC748);
  }

  return result;
}

unint64_t sub_1003E01F8()
{
  unint64_t result = qword_1009AC750;
  if (!qword_1009AC750)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for SendPairingStatusCommandPayload,  &type metadata for SendPairingStatusCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009AC750);
  }

  return result;
}

ValueMetadata *type metadata accessor for SendPairingStatusCommandPayload()
{
  return &type metadata for SendPairingStatusCommandPayload;
}

uint64_t sub_1003E024C(uint64_t a1)
{
  uint64_t result = type metadata accessor for URL(319LL);
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.Int64 + 64;
    void v4[2] = (char *)&value witness table for Builtin.Int32 + 64;
    void v4[3] = (char *)&value witness table for Builtin.Int32 + 64;
    void v4[4] = (char *)&value witness table for Builtin.Int32 + 64;
    void v4[5] = (char *)&value witness table for Builtin.Int64 + 64;
    void v4[6] = (char *)&value witness table for Builtin.BridgeObject + 64;
    uint64_t result = swift_initClassMetadata2(a1, 0LL, 7LL, v4, a1 + 96);
    if (!result) {
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1003E02E8()
{
  uint64_t result = OS_os_log.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x70614D79656BLL,  0xE600000000000000LL);
  qword_100A2A8F0 = result;
  return result;
}

uint64_t sub_1003E0340(uint64_t a1)
{
  int v10 = *(_DWORD *)(v1 + *(int *)(a1 + 36));
  uint64_t v3 = sub_1003B7260((uint64_t)&v10, (uint64_t)v11);
  unint64_t v5 = v4;
  uint64_t v6 = (*(uint64_t (**)(void))(*(void *)(a1 + 24) + 40LL))(*(void *)(a1 + 16));
  unint64_t v8 = v7;
  v11[0] = v6;
  v11[1] = v7;
  sub_10001736C(v6, v7);
  sub_10001736C(v3, v5);
  sub_1004A8638(v3, v5);
  sub_100016F9C(v3, v5);
  sub_100016F9C(v6, v8);
  sub_100016F9C(v3, v5);
  return v11[0];
}

void sub_1003E0424(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  v11[8] = a4;
  uint64_t v7 = type metadata accessor for Optional(0LL, a3);
  uint64_t v8 = __chkstk_darwin(v7);
  v11[7] = (char *)v11 - v9;
  v11[5] = *(void *)(a3 - 8);
  __chkstk_darwin(v8);
  v11[4] = (char *)v11 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  void v11[6] = a2 >> 62;
  sub_10001736C(a1, a2);
  sub_1003B7854(4LL, a1, a2);
  __asm { BR              X10 }

uint64_t sub_1003E0524()
{
  *(void *)(v9 - 128) = v6;
  *(_WORD *)(v9 - 120) = v5;
  *(_BYTE *)(v9 - 118) = BYTE2(v5);
  *(_BYTE *)(v9 - 117) = BYTE3(v5);
  *(_BYTE *)(v9 - 1swift_weakDestroy(v0 + 16) = BYTE4(v5);
  *(_BYTE *)(v9 - 115) = BYTE5(v5);
  sub_1003E09D8((_DWORD *)(v9 - 128), v9 - 128 + BYTE6(v5), v3, v7, (_DWORD *)(v9 - 132));
  if (!v8)
  {
    *(void *)(v9 - 208) = v4;
    *(void *)(v9 - 200) = v1;
    sub_100016F9C(v6, v5);
    int v10 = *(_DWORD *)(v9 - 132);
    *(_DWORD *)(*(void *)(v9 - 144)
              + *(int *)(type metadata accessor for KeyIndexMapGenerator.Record(0LL, v3, v7, v11) + 36)) = v10;
    __asm { BR              X10 }
  }

  sub_100016F9C(v2, v0);
  return sub_100016F9C(v6, v5);
}

uint64_t sub_1003E0934(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v5 = a3;
  uint64_t v6 = *(uint64_t (**)(uint64_t, uint64_t))(a4 + 40);
  uint64_t v7 = v6(a3, a4);
  unint64_t v9 = v8;
  uint64_t v10 = v6(v5, a4);
  unint64_t v12 = v11;
  LOBYTE(v5) = static Data.< infix(_:_:)(v7, v9, v10, v11);
  sub_100016F9C(v10, v12);
  sub_100016F9C(v7, v9);
  return v5 & 1;
}

_DWORD *sub_1003E09D8@<X0>( _DWORD *result@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, _DWORD *a5@<X8>)
{
  if (result && (unint64_t)(a2 - (void)result + 3) >= 7)
  {
    *a5 = *result;
  }

  else
  {
    uint64_t v5 = type metadata accessor for KeyIndexMapGenerator.Error(0LL, a3, a4, a4);
    uint64_t WitnessTable = swift_getWitnessTable(&unk_1007FF190, v5);
    uint64_t v7 = swift_allocError(v5, WitnessTable, 0LL, 0LL);
    *(_DWORD *)uint64_t v8 = 1;
    *(_BYTE *)(v8 + 4) = 2;
    return (_DWORD *)swift_willThrow(v7);
  }

  return result;
}

void sub_1003E0A6C(uint64_t a1, uint64_t a2)
{
}

BOOL sub_1003E0AB4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  if ((dispatch thunk of static Equatable.== infix(_:_:)(a1, a2, a3, *(void *)(*(void *)(a4 + 24) + 8LL)) & 1) == 0) {
    return 0LL;
  }
  uint64_t v9 = type metadata accessor for KeyIndexMapGenerator.Record(0LL, a3, a4, v8);
  return *(_DWORD *)(a1 + *(int *)(v9 + 36)) == *(_DWORD *)(a2 + *(int *)(v9 + 36));
}

Swift::Int sub_1003E0B20(uint64_t a1)
{
  return Hasher._finalize()();
}

uint64_t sub_1003E0B78(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003E0934(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

void sub_1003E0B94(uint64_t a1@<X0>, unint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
}

Swift::Int sub_1003E0BB8(uint64_t a1, uint64_t a2)
{
  return Hasher._finalize()();
}

BOOL sub_1003E0BF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return sub_1003E0AB4(a1, a2, *(void *)(a3 + 16), *(void *)(a3 + 24));
}

uint64_t sub_1003E0C04()
{
  uint64_t v1 = v0 + qword_1009AC758;
  uint64_t v2 = type metadata accessor for URL(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(v1, v2);
  swift_bridgeObjectRelease(*(void *)(v0 + qword_1009AC788));
  return v0;
}

uint64_t sub_1003E0C58()
{
  return swift_deallocClassInstance( v0,  *(unsigned int *)(*(void *)v0 + 48LL),  *(unsigned __int16 *)(*(void *)v0 + 52LL));
}

uint64_t type metadata accessor for KeyIndexMapGenerator(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006A624(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyIndexMapGenerator);
}

uint64_t sub_1003E0C88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 24LL);
}

uint64_t sub_1003E0C90(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    v4[0] = *(void *)(result - 8) + 64LL;
    v4[1] = (char *)&value witness table for Builtin.Int32 + 64;
    swift_initStructMetadata(a1, 0LL, 2LL, v4, a1 + 32);
    return 0LL;
  }

  return result;
}

uint64_t *sub_1003E0D08(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v6 = *(void *)(v5 + 64);
  int v7 = *(_DWORD *)(v5 + 80);
  uint64_t v8 = v7 & 0xFC | 3LL;
  int v9 = v7 & 0x100000;
  if (v8 > 7 || v9 != 0 || ((v6 + 3) & 0xFFFFFFFFFFFFFFFCLL) + 4 > 0x18)
  {
    uint64_t v12 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v12 + ((v8 + 16) & ~v8));
    swift_retain(v12);
  }

  else
  {
    (*(void (**)(uint64_t *, uint64_t *))(v5 + 16))(a1, a2);
    *(_DWORD *)(((unint64_t)v4 + v6 + 3) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)(((unint64_t)a2 + v6 + 3) & 0xFFFFFFFFFFFFFCLL);
  }

  return v4;
}

uint64_t sub_1003E0DB8(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(*(void *)(*(void *)(a2 + 16) - 8LL) + 8LL))();
}

uint64_t sub_1003E0DC8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  *(_DWORD *)((*(void *)(v5 + 64) + 3LL + a1) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(void *)(v5 + 64) + 3LL + a2) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t sub_1003E0E24(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  *(_DWORD *)((*(void *)(v5 + 64) + 3LL + a1) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(void *)(v5 + 64) + 3LL + a2) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t sub_1003E0E80(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  *(_DWORD *)((*(void *)(v5 + 64) + 3LL + a1) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(void *)(v5 + 64) + 3LL + a2) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t sub_1003E0EDC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 16) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  *(_DWORD *)((*(void *)(v5 + 64) + 3LL + a1) & 0xFFFFFFFFFFFFFCLL) = *(_DWORD *)((*(void *)(v5 + 64) + 3LL + a2) & 0xFFFFFFFFFFFFFCLL);
  return a1;
}

uint64_t sub_1003E0F38(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  if (v5 >= a2)
  {
    if (v5) {
      return (*(uint64_t (**)(void))(v4 + 48))();
    }
    return 0LL;
  }

  if (((((*(void *)(v4 + 64) + 3LL) & 0xFFFFFFFFFFFFFFFCLL) + 4) & 0xFFFFFFFC) != 0) {
    unsigned int v6 = 2;
  }
  else {
    unsigned int v6 = a2 - v5 + 1;
  }
  if (v6 >= 0x10000) {
    unsigned int v7 = 4;
  }
  else {
    unsigned int v7 = 2;
  }
  if (v6 < 0x100) {
    unsigned int v7 = 1;
  }
  if (v6 >= 2) {
    uint64_t v8 = v7;
  }
  else {
    uint64_t v8 = 0LL;
  }
  return ((uint64_t (*)(void))((char *)&loc_1003E0FA8 + 4 * byte_1007FF030[v8]))();
}

void sub_1003E1000(unsigned int *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  if (v7 >= a3)
  {
    int v11 = 0;
    if (a2 <= v7) {
      goto LABEL_14;
    }
  }

  else
  {
    unsigned int v8 = a3 - v7;
    if (((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) == 0xFFFFFFFC) {
      unsigned int v9 = v8 + 1;
    }
    else {
      unsigned int v9 = 2;
    }
    if (v9 >= 0x10000) {
      int v10 = 4;
    }
    else {
      int v10 = 2;
    }
    if (v9 < 0x100) {
      int v10 = 1;
    }
    if (v9 >= 2) {
      int v11 = v10;
    }
    else {
      int v11 = 0;
    }
    if (a2 <= v7) {
LABEL_14:
    }
      __asm { BR              X11 }
  }

  if (((*(_DWORD *)(v6 + 64) + 3) & 0xFFFFFFFC) != 0xFFFFFFFC)
  {
    unsigned int v12 = ~v7 + a2;
    bzero(a1, ((*(void *)(v6 + 64) + 3LL) & 0xFFFFFFFFFFFFFFFCLL) + 4);
    *a1 = v12;
  }

  __asm { BR              X10 }

void sub_1003E10E8()
{
  *(_BYTE *)(v0 + v1) = v2;
}

void sub_1003E10F0(uint64_t a1, int a2)
{
  *(_DWORD *)(v2 + v3) = 0;
  if (a2) {
    JUMPOUT(0x1003E10F8LL);
  }
}

void sub_1003E1114()
{
  *(_WORD *)(v0 + v1) = v2;
}

void sub_1003E111C()
{
  *(_DWORD *)(v0 + v1) = v2;
}

uint64_t sub_1003E1124(uint64_t a1, int a2)
{
  *(_WORD *)(v4 + v5) = 0;
  if (!a2) {
    JUMPOUT(0x1003E112CLL);
  }
  return (*(uint64_t (**)(uint64_t))(v3 + 56))(v4);
}

uint64_t type metadata accessor for KeyIndexMapGenerator.Record( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006A624(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyIndexMapGenerator.Record);
}

uint64_t sub_1003E1150(uint64_t a1)
{
  return swift_getWitnessTable(&unk_1007FF098, a1);
}

uint64_t type metadata accessor for KeyIndexMapGenerator.Error( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006A624(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyIndexMapGenerator.Error);
}

uint64_t initializeBufferWithCopyOfBuffer for DatabaseError(uint64_t result, int *a2)
{
  int v2 = *a2;
  *(_BYTE *)(result + 4) = *((_BYTE *)a2 + 4);
  *(_DWORD *)uint64_t result = v2;
  return result;
}

uint64_t sub_1003E1180(uint64_t a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 >= 0xFE && *(_BYTE *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 254);
  }
  unsigned int v3 = *(unsigned __int8 *)(a1 + 4);
  if (v3 <= 2) {
    int v4 = -1;
  }
  else {
    int v4 = v3 ^ 0xFF;
  }
  return (v4 + 1);
}

uint64_t sub_1003E11C8(uint64_t result, unsigned int a2, unsigned int a3)
{
  if (a2 > 0xFD)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)uint64_t result = a2 - 254;
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 5) = 1;
    }
  }

  else
  {
    if (a3 >= 0xFE) {
      *(_BYTE *)(result + 5) = 0;
    }
    if (a2) {
      *(_BYTE *)(result + 4) = -(char)a2;
    }
  }

  return result;
}

uint64_t sub_1003E120C(uint64_t a1)
{
  else {
    return (*(_DWORD *)a1 + 2);
  }
}

uint64_t sub_1003E1224(uint64_t result, unsigned int a2)
{
  if (a2 >= 2)
  {
    *(_DWORD *)uint64_t result = a2 - 2;
    LOBYTE(a2) = 2;
  }

  *(_BYTE *)(result + 4) = a2;
  return result;
}

__n128 initializeBufferWithCopyOfBuffer for LocalFindableAccessoryFirmwareVersionNumber( __n128 *a1, __n128 *a2)
{
  __n128 result = *a2;
  *a1 = *a2;
  return result;
}

uint64_t type metadata accessor for KeyIndexMapGenerator.Header( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006A624(a1, a2, a3, a4, (uint64_t)&nominal type descriptor for KeyIndexMapGenerator.Header);
}

uint64_t sub_1003E1254(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for URL(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  uint64_t v4 = __chkstk_darwin(v2);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v4);
  unsigned int v8 = (char *)&v16 - v7;
  type metadata accessor for BeaconStore(0LL);
  sub_1004E6208((uint64_t)v6);
  URL.appendingPathComponent(_:isDirectory:)(0xD000000000000011LL, 0x80000001008567C0LL, 1LL);
  unsigned int v9 = *(uint64_t (**)(char *, uint64_t))(v3 + 8);
  uint64_t v10 = v9(v6, v2);
  if (a1 == 3)
  {
    uint64_t v11 = 0x646572616853LL;
    goto LABEL_6;
  }

  if (a1 == 2)
  {
    uint64_t v12 = 0x2E65746176697250LL;
LABEL_11:
    unint64_t v13 = 0xED00006E656B6F74LL;
    goto LABEL_12;
  }

  if (a1 != 1)
  {
    uint64_t v14 = static os_log_type_t.error.getter(v10);
    if (qword_10099B710 != -1) {
      swift_once(&qword_10099B710, sub_1006511CC);
    }
    os_log(_:dso:log:_:_:)( v14,  &_mh_execute_header,  qword_100A2B020,  "Unknown CKDatabase.Scope!",  25LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v12 = 0x2E6E776F6E6B6E55LL;
    goto LABEL_11;
  }

  uint64_t v11 = 0x63696C627550LL;
LABEL_6:
  uint64_t v12 = v11 & 0xFFFFFFFFFFFFLL | 0x742E000000000000LL;
  unint64_t v13 = 0xEC0000006E656B6FLL;
LABEL_12:
  URL.appendingPathComponent(_:)(v12, v13);
  return v9(v8, v2);
}

uint64_t sub_1003E1430(uint64_t a1, void *a2)
{
  uint64_t v4 = type metadata accessor for URL(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  type metadata accessor for BeaconStore(0LL);
  sub_1004E6208((uint64_t)v7);
  URL.appendingPathComponent(_:isDirectory:)(0x736E656B6F544B43LL, 0xED0000656E6F5A2FLL, 1LL);
  uint64_t v8 = (*(uint64_t (**)(char *, uint64_t))(v5 + 8))(v7, v4);
  if (a1 == 3)
  {
    uint64_t v9 = 0x646572616853LL;
    unint64_t v10 = 0xE600000000000000LL;
    goto LABEL_11;
  }

  if (a1 == 2)
  {
    uint64_t v9 = 0x65746176697250LL;
LABEL_10:
    unint64_t v10 = 0xE700000000000000LL;
    goto LABEL_11;
  }

  if (a1 != 1)
  {
    uint64_t v11 = static os_log_type_t.error.getter(v8);
    if (qword_10099B710 != -1) {
      swift_once(&qword_10099B710, sub_1006511CC);
    }
    os_log(_:dso:log:_:_:)( v11,  &_mh_execute_header,  qword_100A2B020,  "Unknown CKDatabase.Scope!",  25LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v9 = 0x6E776F6E6B6E55LL;
    goto LABEL_10;
  }

  uint64_t v9 = 0x63696C627550LL;
  unint64_t v10 = 0xE600000000000000LL;
LABEL_11:
  URL.appendPathComponent(_:)(*(Swift::String *)&v9);
  id v12 = [a2 ownerName];
  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  uint64_t v15 = v14;

  v16._countAndFlagsBits = v13;
  v16._object = v15;
  URL.appendPathComponent(_:)(v16);
  swift_bridgeObjectRelease();
  id v17 = [a2 zoneName];
  uint64_t v18 = static String._unconditionallyBridgeFromObjectiveC(_:)(v17);
  char v20 = v19;

  v23._countAndFlagsBits = v18;
  v23._object = v20;
  v21._countAndFlagsBits = 0x6E656B6F742ELL;
  v21._object = (void *)0xE600000000000000LL;
  String.append(_:)(v21);
  URL.appendPathComponent(_:)(v23);
  return swift_bridgeObjectRelease();
}

uint64_t sub_1003E1674(uint64_t a1, uint64_t a2)
{
  uint64_t v5 = type metadata accessor for URL(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v28 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v9 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL.deletingLastPathComponent()(v9);
  URL._bridgeToObjectiveC()(v10);
  id v12 = v11;
  (*(void (**)(char *, uint64_t))(v6 + 8))(v8, v5);
  id v28 = 0LL;
  LODWORD(v8) = [v9 createDirectoryAtURL:v12 withIntermediateDirectories:1 attributes:0 error:&v28];

  id v13 = v28;
  if (!(_DWORD)v8)
  {
    __int128 v25 = v13;
    _convertNSErrorToError(_:)(v13);

    return swift_willThrow(v26);
  }

  uint64_t v14 = (void *)objc_opt_self(&OBJC_CLASS___NSKeyedArchiver);
  id v28 = 0LL;
  id v15 = [v14 archivedDataWithRootObject:a1 requiringSecureCoding:1 error:&v28];
  id v16 = v28;
  if (!v15)
  {
    uint64_t v27 = v16;
    _convertNSErrorToError(_:)(v16);

    return swift_willThrow(v26);
  }

  uint64_t v17 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v15);
  unint64_t v19 = v18;

  char v20 = sub_1006C54D4(v17, v19, 0);
  if (!v2)
  {
    uint64_t v22 = (uint64_t)v20;
    unint64_t v23 = v21;
    Data.write(to:excludeFromBackup:options:)(a2, 1LL, 0LL, 1LL, v20, v21);
    sub_100016F9C(v22, v23);
  }

  return sub_100016F9C(v17, v19);
}

id sub_1003E189C()
{
  id v0 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL._bridgeToObjectiveC()(v1);
  uint64_t v3 = v2;
  id v8 = 0LL;
  unsigned int v4 = [v0 removeItemAtURL:v2 error:&v8];

  id v5 = v8;
  if (v4) {
    return v8;
  }
  id v7 = v8;
  _convertNSErrorToError(_:)(v5);

  return (id)swift_willThrow();
}

uint64_t sub_1003E1980(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for CryptoError(0LL);
  uint64_t v3 = __chkstk_darwin(v2);
  uint64_t v4 = __chkstk_darwin(v3);
  __chkstk_darwin(v4);
  id v5 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL.path.getter(v5);
  NSString v6 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease();
  unsigned int v7 = [v5 fileExistsAtPath:v6];

  uint64_t result = 0LL;
  if (v7)
  {
    uint64_t v9 = Data.init(contentsOf:options:)(a1, 0LL);
    unint64_t v11 = v10;
    uint64_t v12 = sub_1006C5868(v9, v10);
    unint64_t v18 = v13;
    uint64_t v14 = v12;
    sub_100022898(0LL, &qword_1009AC990, &OBJC_CLASS___NSKeyedUnarchiver_ptr);
    uint64_t v15 = sub_100004AEC(&qword_1009AC998);
    uint64_t v16 = swift_allocObject(v15, 40LL, 7LL);
    *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v17 = sub_100022898(0LL, &qword_1009AC9A0, &OBJC_CLASS___CKServerChangeToken_ptr);
    *(void *)(v16 + 32) = v17;
    static NSKeyedUnarchiver.unarchivedObject(ofClasses:from:)(v20, v16, v14, v18);
    sub_100016F9C(v14, v18);
    sub_100016F9C(v9, v11);
    swift_bridgeObjectRelease();
    if (v20[3])
    {
      else {
        return 0LL;
      }
    }

    else
    {
      sub_1001C0D4C((uint64_t)v20);
      return 0LL;
    }
  }

  return result;
}

uint64_t sub_1003E1DF8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v4 = v3;
  v29[0] = a2;
  uint64_t v7 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v32 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)v29 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v30 = *(void *)(v10 - 8);
  uint64_t v31 = v10;
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)v29 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v14 = *(void *)(v13 - 8);
  uint64_t v15 = *(void *)(v14 + 64);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)v29 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  v29[1] = *(void *)(v4 + 16);
  sub_1003E2168(v4, (uint64_t)v16);
  uint64_t v17 = *(unsigned __int8 *)(v14 + 80);
  uint64_t v18 = (v17 + 16) & ~v17;
  unint64_t v19 = (v15 + v18 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  unint64_t v20 = (v19 + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v21 = swift_allocObject(&unk_100956AE0, v20 + 16, v17 | 7);
  sub_1003E2298((uint64_t)v16, v21 + v18);
  *(void *)(v21 + v19) = a1;
  uint64_t v22 = (void *)(v21 + v20);
  *uint64_t v22 = v29[0];
  v22[1] = a3;
  aBlock[4] = sub_1003E22DC;
  aBlock[5] = v21;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100956AF8;
  unint64_t v23 = _Block_copy(aBlock);
  swift_bridgeObjectRetain(a1);
  uint64_t v24 = swift_retain();
  static DispatchQoS.unspecified.getter(v24);
  __int128 v33 = _swiftEmptyArrayStorage;
  unint64_t v25 = sub_10012DDCC();
  uint64_t v26 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  unint64_t v27 = sub_100012FF8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v33, v26, v27, v7, v25);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v12, v9, v23);
  _Block_release(v23);
  (*(void (**)(char *, uint64_t))(v32 + 8))(v9, v7);
  (*(void (**)(char *, uint64_t))(v30 + 8))(v12, v31);
  return swift_release();
}

uint64_t sub_1003E2048(uint64_t a1, uint64_t a2)
{
  return (*(uint64_t (**)(void))(a2 + 16))() / 96;
}

uint64_t sub_1003E2078()
{
  return *(void *)v0;
}

uint64_t sub_1003E2080()
{
  return *(unsigned __int8 *)(v0 + 8);
}

uint64_t sub_1003E2088()
{
  return swift_bridgeObjectRetain(*(void *)(v0 + 16));
}

uint64_t sub_1003E2090()
{
  return sub_1001A64E8() & 1;
}

uint64_t sub_1003E20DC()
{
  uint64_t v1 = *(void *)(v0 + 40);
  uint64_t v2 = *(unsigned __int8 *)(v0 + 24);
  swift_bridgeObjectRetain(v1);
  return v2;
}

uint64_t sub_1003E2118()
{
  return *(unsigned __int8 *)(v0 + 56);
}

uint64_t sub_1003E2120()
{
  return sub_1001A65F0();
}

uint64_t sub_1003E2168(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocationFetcher(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003E21AC()
{
  uint64_t v1 = type metadata accessor for LocationFetcher(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 15) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v7 = v0 + v4;
  swift_release();
  swift_release();

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v7 + 24));
  uint64_t v8 = v7 + *(int *)(v1 + 32);
  uint64_t v9 = type metadata accessor for Logger(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL))(v8, v9);
  swift_bridgeObjectRelease();
  swift_release();
  swift_bridgeObjectRelease();
  swift_release();
  return swift_deallocObject(v0, v6 + 16, v5);
}

uint64_t sub_1003E2298(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for LocationFetcher(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003E22DC()
{
  uint64_t v1 = *(void *)(type metadata accessor for LocationFetcher(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 16LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  unint64_t v3 = (*(void *)(v1 + 64) + v2 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v4 = (void *)(v0 + v2);
  uint64_t v5 = *(void *)(v0 + v3);
  unint64_t v6 = (uint64_t *)(v0 + ((v3 + 15) & 0xFFFFFFFFFFFFFFF8LL));
  uint64_t v7 = *v6;
  uint64_t v8 = v6[1];
  swift_retain();
  sub_100244004(v5, v4, v7, v8);
  return swift_release();
}

uint64_t sub_1003E235C(uint64_t a1, uint64_t a2)
{
  uint64_t v2 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v2;
  return swift_retain(v2);
}

uint64_t sub_1003E236C(uint64_t a1)
{
  return swift_release(*(void *)(a1 + 40));
}

uint64_t sub_1003E2374(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v24 = a2;
  uint64_t v5 = type metadata accessor for DispatchWorkItemFlags(0LL);
  uint64_t v27 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v23 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for DispatchQoS(0LL);
  uint64_t v25 = *(void *)(v8 - 8);
  uint64_t v26 = v8;
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for DispatchQoS.QoSClass(0LL);
  uint64_t v12 = *(void *)(v11 - 8);
  __chkstk_darwin(v11);
  uint64_t v14 = (char *)&v23 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100004AB0();
  (*(void (**)(char *, void, uint64_t))(v12 + 104))( v14,  enum case for DispatchQoS.QoSClass.default(_:),  v11);
  uint64_t v15 = (void *)static OS_dispatch_queue.global(qos:)(v14);
  (*(void (**)(char *, uint64_t))(v12 + 8))(v14, v11);
  uint64_t v16 = (void *)swift_allocObject(&unk_100956B30, 40LL, 7LL);
  _OWORD v16[2] = v24;
  void v16[3] = a3;
  v16[4] = a1;
  aBlock[4] = sub_1000D4F98;
  aBlock[5] = v16;
  aBlock[0] = _NSConcreteStackBlock;
  aBlock[1] = 1107296256LL;
  aBlock[2] = sub_1001C31E8;
  aBlock[3] = &unk_100956B48;
  uint64_t v17 = _Block_copy(aBlock);
  swift_retain();
  swift_bridgeObjectRetain(a1);
  static DispatchQoS.unspecified.getter(v18);
  id v28 = _swiftEmptyArrayStorage;
  unint64_t v19 = sub_10012DDCC();
  uint64_t v20 = sub_100004AEC((uint64_t *)&unk_1009AB860);
  unint64_t v21 = sub_100012FF8();
  dispatch thunk of SetAlgebra.init<A>(_:)(&v28, v20, v21, v5, v19);
  OS_dispatch_queue.async(group:qos:flags:execute:)(0LL, v10, v7, v17);
  _Block_release(v17);

  (*(void (**)(char *, uint64_t))(v27 + 8))(v7, v5);
  (*(void (**)(char *, uint64_t))(v25 + 8))(v10, v26);
  return swift_release();
}

uint64_t sub_1003E25C4()
{
  return -1LL;
}

uint64_t sub_1003E25CC()
{
  id v0 = [(id)objc_opt_self(NSBundle) mainBundle];
  id v1 = [v0 bundleIdentifier];

  if (v1)
  {
    static String._unconditionallyBridgeFromObjectiveC(_:)(v1);
  }

  return 2LL;
}

uint64_t sub_1003E2660()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t storeEnumTagSinglePayload for DiskFetchPolicy(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1003E26CC + 4 * asc_1007FF21C[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1003E26EC + 4 * byte_1007FF221[v4]))();
  }
}

_BYTE *sub_1003E26CC(_BYTE *result, char a2)
{
  *uint64_t result = a2;
  return result;
}

_BYTE *sub_1003E26EC(_BYTE *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1003E26F4(_DWORD *result, int a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1003E26FC(_WORD *result, __int16 a2)
{
  *uint64_t result = a2;
  return result;
}

_WORD *sub_1003E2704(_WORD *result)
{
  *uint64_t result = 0;
  return result;
}

_DWORD *sub_1003E270C(_DWORD *result)
{
  *uint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for DiskFetchPolicy()
{
  return &type metadata for DiskFetchPolicy;
}

uint64_t _s13DefaultPolicyVwxx(void *a1)
{
  return swift_bridgeObjectRelease(a1[6]);
}

uint64_t _s13DefaultPolicyVwcp(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v3 = *(void *)(a2 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v3;
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  uint64_t v4 = *(void *)(a2 + 40);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  *(void *)(a1 + 40) = v4;
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 48) = v5;
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  __int128 v6 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v6;
  swift_bridgeObjectRetain(v3);
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRetain(v5);
  return a1;
}

uint64_t _s13DefaultPolicyVwca(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(void *)(a2 + 16);
  uint64_t v5 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  uint64_t v6 = *(void *)(a2 + 40);
  uint64_t v7 = *(void *)(a1 + 40);
  *(void *)(a1 + 40) = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(void *)(a2 + 48);
  uint64_t v9 = *(void *)(a1 + 48);
  *(void *)(a1 + 48) = v8;
  swift_bridgeObjectRetain(v8);
  swift_bridgeObjectRelease(v9);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  __int128 v10 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 64) = v10;
  return a1;
}

__n128 _s13DefaultPolicyVwtk(uint64_t a1, uint64_t a2)
{
  __int128 v2 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v2;
  __n128 result = *(__n128 *)(a2 + 32);
  __int128 v4 = *(_OWORD *)(a2 + 48);
  __int128 v5 = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  *(_OWORD *)(a1 + 48) = v4;
  *(_OWORD *)(a1 + 64) = v5;
  *(__n128 *)(a1 + 32) = result;
  return result;
}

uint64_t _s13DefaultPolicyVwta(uint64_t a1, uint64_t a2)
{
  *(void *)a1 = *(void *)a2;
  *(_BYTE *)(a1 + 8) = *(_BYTE *)(a2 + 8);
  uint64_t v4 = *(void *)(a1 + 16);
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = *(void *)(a2 + 16);
  swift_bridgeObjectRelease(v4);
  *(_BYTE *)(a1 + 24) = *(_BYTE *)(a2 + 24);
  *(void *)(a1 + 32) = *(void *)(a2 + 32);
  swift_bridgeObjectRelease(*(void *)(a1 + 40));
  uint64_t v5 = *(void *)(a1 + 48);
  *(_OWORD *)(a1 + 40) = *(_OWORD *)(a2 + 40);
  swift_bridgeObjectRelease(v5);
  *(_BYTE *)(a1 + 56) = *(_BYTE *)(a2 + 56);
  *(_OWORD *)(a1 + 64) = *(_OWORD *)(a2 + 64);
  *(_BYTE *)(a1 + 80) = *(_BYTE *)(a2 + 80);
  return a1;
}

uint64_t _s13DefaultPolicyVwet(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 81)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 16);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t _s13DefaultPolicyVwst(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 72) = 0LL;
    *(_OWORD *)(result + 56) = 0u;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(_BYTE *)(result + 80) = 0;
    *(void *)__n128 result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 81) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + swift_weakDestroy(v0 + 16) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 81) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *_s13DefaultPolicyVMa()
{
  return &_s13DefaultPolicyVN;
}

unint64_t sub_1003E29E4()
{
  unint64_t result = qword_1009AC9A8;
  if (!qword_1009AC9A8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FF2E4, &type metadata for DiskFetchPolicy);
    atomic_store(result, (unint64_t *)&qword_1009AC9A8);
  }

  return result;
}

unint64_t sub_1003E2A28(uint64_t a1)
{
  unint64_t result = sub_1003E2A4C();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1003E2A4C()
{
  unint64_t result = qword_1009AC9B0;
  if (!qword_1009AC9B0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FF27C, &type metadata for DiskFetchPolicy);
    atomic_store(result, (unint64_t *)&qword_1009AC9B0);
  }

  return result;
}

unint64_t sub_1003E2A90(uint64_t a1)
{
  unint64_t result = sub_1003E2AB4();
  *(void *)(a1 + 8) = result;
  return result;
}

unint64_t sub_1003E2AB4()
{
  unint64_t result = qword_1009AC9B8;
  if (!qword_1009AC9B8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FF254, &_s13DefaultPolicyVN);
    atomic_store(result, (unint64_t *)&qword_1009AC9B8);
  }

  return result;
}

uint64_t sub_1003E2B00()
{
  return swift_deallocClassInstance(v0, 112LL, 7LL);
}

uint64_t type metadata accessor for FirmwareUpdateAlert()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd19FirmwareUpdateAlert);
}

uint64_t destroy for FirmwareUpdateAlertService(void *a1)
{
  return swift_release(a1[7]);
}

uint64_t initializeWithCopy for FirmwareUpdateAlertService(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 24);
  *(_OWORD *)(a1 + 24) = v4;
  (**(void (***)(void))(v4 - 8))();
  uint64_t v5 = *(void *)(a2 + 48);
  *(void *)(a1 + 40) = *(void *)(a2 + 40);
  *(void *)(a1 + 48) = v5;
  uint64_t v6 = *(void *)(a2 + 56);
  *(void *)(a1 + 56) = v6;
  swift_bridgeObjectRetain(v5);
  swift_retain(v6);
  return a1;
}

void *assignWithCopy for FirmwareUpdateAlertService(void *a1, void *a2)
{
  a1[5] = a2[5];
  uint64_t v4 = a2[6];
  a1[6] = v4;
  swift_bridgeObjectRetain(v4);
  swift_bridgeObjectRelease();
  a1[7] = a2[7];
  swift_retain();
  swift_release();
  return a1;
}

uint64_t assignWithTake for FirmwareUpdateAlertService(uint64_t a1, uint64_t a2)
{
  __int128 v4 = *(_OWORD *)(a2 + 16);
  *(_OWORD *)a1 = *(_OWORD *)a2;
  *(_OWORD *)(a1 + swift_weakDestroy(v0 + 16) = v4;
  *(_OWORD *)(a1 + 32) = *(_OWORD *)(a2 + 32);
  *(void *)(a1 + 48) = *(void *)(a2 + 48);
  swift_bridgeObjectRelease();
  *(void *)(a1 + 56) = *(void *)(a2 + 56);
  swift_release();
  return a1;
}

uint64_t getEnumTagSinglePayload for FirmwareUpdateAlertService(uint64_t a1, int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0 && *(_BYTE *)(a1 + 64)) {
    return *(_DWORD *)a1 + 0x80000000;
  }
  unint64_t v2 = *(void *)(a1 + 24);
  if (v2 >= 0xFFFFFFFF) {
    LODWORD(v2) = -1;
  }
  return (v2 + 1);
}

uint64_t storeEnumTagSinglePayload for FirmwareUpdateAlertService(uint64_t result, int a2, int a3)
{
  if (a2 < 0)
  {
    *(void *)(result + 56) = 0LL;
    *(_OWORD *)(result + 40) = 0u;
    *(_OWORD *)(result + 24) = 0u;
    *(_OWORD *)(result + 8) = 0u;
    *(void *)unint64_t result = a2 ^ 0x80000000;
    if (a3 < 0) {
      *(_BYTE *)(result + 64) = 1;
    }
  }

  else
  {
    if ((a3 & 0x80000000) == 0)
    {
      if (!a2) {
        return result;
      }
LABEL_8:
      *(void *)(result + 24) = (a2 - 1);
      return result;
    }

    *(_BYTE *)(result + 64) = 0;
    if (a2) {
      goto LABEL_8;
    }
  }

  return result;
}

ValueMetadata *type metadata accessor for FirmwareUpdateAlertService()
{
  return &type metadata for FirmwareUpdateAlertService;
}

void *sub_1003E2D58()
{
  return v0;
}

uint64_t sub_1003E2DB4()
{
  return swift_deallocClassInstance(v0, 104LL, 7LL);
}

uint64_t type metadata accessor for CommandCompletion()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd17CommandCompletion);
}

id sub_1003E2E20()
{
  v2.receiver = v0;
  v2.super_class = (Class)type metadata accessor for TagCommandManager();
  return objc_msgSendSuper2(&v2, "dealloc");
}

uint64_t type metadata accessor for TagCommandManager()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd17TagCommandManager);
}

uint64_t sub_1003E2EEC(uint64_t a1)
{
  uint64_t v1 = static os_log_type_t.default.getter(a1);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v2 = qword_100A2B030;
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v4 = swift_allocObject(v3, 72LL, 7LL);
  *(_OWORD *)(v4 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v5 = UUID.uuidString.getter(v4);
  uint64_t v7 = v6;
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_1000226F4();
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v7;
  os_log(_:dso:log:_:_:)( v1,  &_mh_execute_header,  v2,  "#Durian: Will try to connect async on the queue for device %@.",  62LL,  2LL,  v4);
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_100004AEC(&qword_1009A23E8);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  uint64_t v9 = Future.init()();
  type metadata accessor for CommandError(0LL);
  uint64_t v11 = v10;
  uint64_t v20 = 3LL;
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009C0FA0);
  uint64_t inited = swift_initStackObject(v12, v19);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(void *)(inited + 40) = v14;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = 0xD00000000000003ELL;
  *(void *)(inited + 56) = 0x8000000100860A50LL;
  unint64_t v15 = sub_100412CF8(inited);
  unint64_t v16 = sub_1003E30A4();
  _BridgedStoredNSError.init(_:userInfo:)(&v21, &v20, v15, v11, v16);
  uint64_t v17 = v21;
  Future.finish(error:)(v21);

  return v9;
}

unint64_t sub_1003E30A4()
{
  unint64_t result = qword_10099C2E0;
  if (!qword_10099C2E0)
  {
    type metadata accessor for CommandError(255LL);
    unint64_t result = swift_getWitnessTable(&unk_1007E3980, v1);
    atomic_store(result, (unint64_t *)&qword_10099C2E0);
  }

  return result;
}

uint64_t sub_1003E30EC(uint64_t a1)
{
  return sub_1003E33B0( a1,  "#Durian: Will call unpair async on queue.",  41LL,  0xD000000000000039LL,  0x8000000100860AC0LL);
}

uint64_t sub_1003E3114(uint64_t a1)
{
  uint64_t v1 = static os_log_type_t.default.getter(a1);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  uint64_t v2 = qword_100A2B030;
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v4 = swift_allocObject(v3, 72LL, 7LL);
  *(_OWORD *)(v4 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v5 = UUID.uuidString.getter(v4);
  uint64_t v7 = v6;
  *(void *)(v4 + 56) = &type metadata for String;
  *(void *)(v4 + 64) = sub_1000226F4();
  *(void *)(v4 + 32) = v5;
  *(void *)(v4 + 40) = v7;
  os_log(_:dso:log:_:_:)( v1,  &_mh_execute_header,  v2,  "#Durian: Will call play sound async on queue for device %@.",  59LL,  2LL,  v4);
  swift_bridgeObjectRelease();
  uint64_t v8 = sub_100004AEC(&qword_1009A23E8);
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  uint64_t v9 = Future.init()();
  swift_allocObject(v8, *(unsigned int *)(v8 + 48), *(unsigned __int16 *)(v8 + 52));
  Future.init()();
  type metadata accessor for CommandError(0LL);
  uint64_t v11 = v10;
  uint64_t v25 = 3LL;
  uint64_t v12 = sub_100004AEC((uint64_t *)&unk_1009C0FA0);
  uint64_t inited = swift_initStackObject(v12, v24);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(void *)(inited + 40) = v14;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = 0xD00000000000003BLL;
  *(void *)(inited + 56) = 0x8000000100860BB0LL;
  unint64_t v15 = sub_100412CF8(inited);
  unint64_t v16 = sub_1003E30A4();
  _BridgedStoredNSError.init(_:userInfo:)(v26, &v25, v15, v11, v16);
  uint64_t v17 = (void *)v26[0];
  Future.finish(error:)(v26[0]);

  uint64_t v25 = 3LL;
  uint64_t v18 = swift_initStackObject(v12, v23);
  *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(v18 + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(void *)(v18 + 40) = v19;
  *(void *)(v18 + 72) = &type metadata for String;
  *(void *)(v18 + 48) = 0xD00000000000003BLL;
  *(void *)(v18 + 56) = 0x8000000100860BB0LL;
  unint64_t v20 = sub_100412CF8(v18);
  _BridgedStoredNSError.init(_:userInfo:)(v26, &v25, v20, v11, v16);
  unint64_t v21 = (void *)v26[0];
  Future.finish(error:)(v26[0]);

  return v9;
}

uint64_t sub_1003E3388(uint64_t a1)
{
  return sub_1003E33B0( a1,  "#Durian: Will call stop sound async on queue.",  45LL,  0xD00000000000003CLL,  0x8000000100860B30LL);
}

uint64_t sub_1003E33B0(uint64_t a1, const char *a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  uint64_t v9 = static os_log_type_t.default.getter(a1);
  if (qword_10099B720 != -1) {
    swift_once(&qword_10099B720, sub_10065128C);
  }
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_100A2B030, a2, a3, 2LL, _swiftEmptyArrayStorage);
  uint64_t v10 = sub_100004AEC(&qword_1009A23E8);
  swift_allocObject(v10, *(unsigned int *)(v10 + 48), *(unsigned __int16 *)(v10 + 52));
  uint64_t v11 = Future.init()();
  type metadata accessor for CommandError(0LL);
  uint64_t v13 = v12;
  uint64_t v22 = 3LL;
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_1009C0FA0);
  uint64_t inited = swift_initStackObject(v14, &v21);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  *(void *)(inited + 32) = static String._unconditionallyBridgeFromObjectiveC(_:)(NSLocalizedDescriptionKey);
  *(void *)(inited + 40) = v16;
  *(void *)(inited + 72) = &type metadata for String;
  *(void *)(inited + 48) = a4;
  *(void *)(inited + 56) = a5;
  unint64_t v17 = sub_100412CF8(inited);
  unint64_t v18 = sub_1003E30A4();
  _BridgedStoredNSError.init(_:userInfo:)(&v23, &v22, v17, v13, v18);
  uint64_t v19 = v23;
  Future.finish(error:)(v23);

  return v11;
}

uint64_t *sub_1003E350C(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v3 = a1;
  int v4 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v4 & 0x20000) != 0)
  {
    uint64_t v11 = *a2;
    *uint64_t v3 = *a2;
    uint64_t v3 = (uint64_t *)(v11 + ((v4 + 16LL) & ~(unint64_t)v4));
    swift_retain(v11);
  }

  else
  {
    uint64_t v5 = a2[1];
    *a1 = *a2;
    a1[1] = v5;
    uint64_t v6 = *(int *)(a3 + 20);
    uint64_t v7 = (char *)a1 + v6;
    uint64_t v8 = (char *)a2 + v6;
    uint64_t v9 = type metadata accessor for UUID(0LL);
    uint64_t v10 = *(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL);
    swift_bridgeObjectRetain(v5);
    v10(v7, v8, v9);
  }

  return v3;
}

uint64_t sub_1003E35A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
}

void *sub_1003E35F0(void *a1, void *a2, uint64_t a3)
{
  uint64_t v4 = a2[1];
  *a1 = *a2;
  a1[1] = v4;
  uint64_t v5 = *(int *)(a3 + 20);
  uint64_t v6 = (char *)a1 + v5;
  uint64_t v7 = (char *)a2 + v5;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  uint64_t v9 = *(void (**)(char *, char *, uint64_t))(*(void *)(v8 - 8) + 16LL);
  swift_bridgeObjectRetain(v4);
  v9(v6, v7, v8);
  return a1;
}

void *sub_1003E3660(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  a1[1] = v6;
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 24LL))(v9, v10, v11);
  return a1;
}

_OWORD *sub_1003E36DC(_OWORD *a1, _OWORD *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v4 = *(int *)(a3 + 20);
  uint64_t v5 = (char *)a1 + v4;
  uint64_t v6 = (char *)a2 + v4;
  uint64_t v7 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v7 - 8) + 32LL))(v5, v6, v7);
  return a1;
}

void *sub_1003E3738(void *a1, void *a2, uint64_t a3)
{
  uint64_t v6 = a2[1];
  uint64_t v7 = a1[1];
  *a1 = *a2;
  a1[1] = v6;
  swift_bridgeObjectRelease(v7);
  uint64_t v8 = *(int *)(a3 + 20);
  uint64_t v9 = (char *)a1 + v8;
  uint64_t v10 = (char *)a2 + v8;
  uint64_t v11 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v11 - 8) + 40LL))(v9, v10, v11);
  return a1;
}

uint64_t sub_1003E37A4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003E37B0);
}

uint64_t sub_1003E37B0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  if ((_DWORD)a2 == 0x7FFFFFFF)
  {
    unint64_t v4 = *(void *)(a1 + 8);
    if (v4 >= 0xFFFFFFFF) {
      LODWORD(v4) = -1;
    }
    return (v4 + 1);
  }

  else
  {
    uint64_t v8 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))( a1 + *(int *)(a3 + 20),  a2,  v8);
  }

uint64_t sub_1003E382C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003E3838);
}

uint64_t sub_1003E3838(uint64_t result, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t v5 = result;
  if (a3 == 0x7FFFFFFF)
  {
    *(void *)(result + 8) = (a2 - 1);
  }

  else
  {
    uint64_t v7 = type metadata accessor for UUID(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 56LL))( v5 + *(int *)(a4 + 20),  a2,  a2,  v7);
  }

  return result;
}

uint64_t type metadata accessor for AccessoryPairingLockAckResponse(uint64_t a1)
{
  uint64_t result = qword_1009ACDA8;
  if (!qword_1009ACDA8) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for AccessoryPairingLockAckResponse);
  }
  return result;
}

uint64_t sub_1003E38E8(uint64_t a1)
{
  v4[0] = &unk_1007FF5B0;
  uint64_t result = type metadata accessor for UUID(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 256LL, 2LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1003E395C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v23 = a2;
  uint64_t v25 = type metadata accessor for UUID(0LL);
  uint64_t v22 = *(void *)(v25 - 8);
  __chkstk_darwin(v25);
  uint64_t v24 = (char *)&v21 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v26 = sub_100004AEC(&qword_1009ACDE0);
  uint64_t v5 = *(void *)(v26 - 8);
  __chkstk_darwin(v26);
  uint64_t v7 = (char *)&v21 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for AccessoryPairingLockAckResponse(0LL);
  __chkstk_darwin(v8);
  uint64_t v10 = (char *)&v21 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = a1[3];
  uint64_t v12 = a1[4];
  sub_100012ED8(a1, v11);
  unint64_t v13 = sub_1003E3C50();
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for AccessoryPairingLockAckResponse.CodingKeys,  &type metadata for AccessoryPairingLockAckResponse.CodingKeys,  v13,  v11,  v12);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v21 = a1;
  uint64_t v14 = v10;
  uint64_t v16 = v24;
  uint64_t v15 = v25;
  char v28 = 0;
  uint64_t v17 = v26;
  *(void *)uint64_t v14 = KeyedDecodingContainer.decode(_:forKey:)(&v28, v26);
  *((void *)v14 + 1) = v18;
  char v27 = 1;
  unint64_t v19 = sub_1003E3C94();
  KeyedDecodingContainer.decode<A>(_:forKey:)(v16, v15, &v27, v17, v15, v19);
  (*(void (**)(char *, uint64_t))(v5 + 8))(v7, v17);
  (*(void (**)(char *, void *, uint64_t))(v22 + 32))(&v14[*(int *)(v8 + 20)], v16, v15);
  sub_1003E3CDC((uint64_t)v14, v23);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v21);
  return sub_1003E3D20((uint64_t)v14);
}

uint64_t sub_1003E3B8C()
{
  if (*v0) {
    return 0x6449616E6D66LL;
  }
  else {
    return 0xD000000000000010LL;
  }
}

uint64_t sub_1003E3BC8@<X0>(uint64_t a1@<X0>, unint64_t a2@<X1>, _BYTE *a3@<X8>)
{
  uint64_t result = sub_1003E3F00(a1, a2);
  *a3 = result;
  return result;
}

uint64_t sub_1003E3BEC(uint64_t a1)
{
  unint64_t v2 = sub_1003E3C50();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003E3C14(uint64_t a1)
{
  unint64_t v2 = sub_1003E3C50();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003E3C3C@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003E395C(a1, a2);
}

unint64_t sub_1003E3C50()
{
  unint64_t result = qword_1009ACDE8;
  if (!qword_1009ACDE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FF6B4, &type metadata for AccessoryPairingLockAckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009ACDE8);
  }

  return result;
}

unint64_t sub_1003E3C94()
{
  unint64_t result = qword_10099D6F0;
  if (!qword_10099D6F0)
  {
    uint64_t v1 = type metadata accessor for UUID(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for UUID, v1);
    atomic_store(result, (unint64_t *)&qword_10099D6F0);
  }

  return result;
}

uint64_t sub_1003E3CDC(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for AccessoryPairingLockAckResponse(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003E3D20(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for AccessoryPairingLockAckResponse(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t storeEnumTagSinglePayload for AccessoryPairingLockAckResponse.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1003E3DA8 + 4 * byte_1007FF585[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1003E3DDC + 4 * asc_1007FF580[v4]))();
}

uint64_t sub_1003E3DDC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003E3DE4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1003E3DECLL);
  }
  return result;
}

uint64_t sub_1003E3DF8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1003E3E00LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1003E3E04(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003E3E0C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for AccessoryPairingLockAckResponse.CodingKeys()
{
  return &type metadata for AccessoryPairingLockAckResponse.CodingKeys;
}

unint64_t sub_1003E3E2C()
{
  unint64_t result = qword_1009ACDF0;
  if (!qword_1009ACDF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FF68C, &type metadata for AccessoryPairingLockAckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009ACDF0);
  }

  return result;
}

unint64_t sub_1003E3E74()
{
  unint64_t result = qword_1009ACDF8;
  if (!qword_1009ACDF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FF5FC, &type metadata for AccessoryPairingLockAckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009ACDF8);
  }

  return result;
}

unint64_t sub_1003E3EBC()
{
  unint64_t result = qword_1009ACE00;
  if (!qword_1009ACE00)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FF624, &type metadata for AccessoryPairingLockAckResponse.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009ACE00);
  }

  return result;
}

uint64_t sub_1003E3F00(uint64_t a1, unint64_t a2)
{
  if (a1 == 0xD000000000000010LL)
  {
    unint64_t v4 = 0x8000000100850100LL;
    if (a2 == 0x8000000100850100LL) {
      goto LABEL_5;
    }
  }

  if ((_stringCompareWithSmolCheck(_:_:expecting:)(0xD000000000000010LL, 0x8000000100850100LL, a1, a2, 0LL) & 1) != 0)
  {
    unint64_t v4 = a2;
LABEL_5:
    swift_bridgeObjectRelease(v4);
    return 0LL;
  }

  if (a1 == 0x6449616E6D66LL && a2 == 0xE600000000000000LL)
  {
    swift_bridgeObjectRelease(0xE600000000000000LL);
    return 1LL;
  }

  else
  {
    char v6 = _stringCompareWithSmolCheck(_:_:expecting:)(0x6449616E6D66LL, 0xE600000000000000LL, a1, a2, 0LL);
    swift_bridgeObjectRelease(a2);
    if ((v6 & 1) != 0) {
      return 1LL;
    }
    else {
      return 2LL;
    }
  }

ValueMetadata *type metadata accessor for SendPairingDataCommandPayload()
{
  return &type metadata for SendPairingDataCommandPayload;
}

uint64_t sub_1003E3FF4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_1003E41A0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
    a2[2] = v6;
    a2[3] = v7;
  }

  return result;
}

unint64_t sub_1003E4020(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_1003E404C();
  unint64_t result = sub_1003E4090();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_1003E404C()
{
  unint64_t result = qword_1009ACE08;
  if (!qword_1009ACE08)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FF768, &type metadata for SendPairingDataCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009ACE08);
  }

  return result;
}

unint64_t sub_1003E4090()
{
  unint64_t result = qword_1009ACE10;
  if (!qword_1009ACE10)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FF740, &type metadata for SendPairingDataCommandPayload);
    atomic_store(result, (unint64_t *)&qword_1009ACE10);
  }

  return result;
}

uint64_t sub_1003E40D4(uint64_t a1, unint64_t a2)
{
  return ((uint64_t (*)(void))((char *)&loc_1003E40E0 + *((int *)qword_1003E4180 + (a2 >> 62))))();
}

uint64_t sub_1003E40F0(uint64_t a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  if (BYTE6(a2) != 32LL)
  {
    __break(1u);
    JUMPOUT(0x1003E4180LL);
  }

  return ((uint64_t (*)(void))((char *)&loc_1003E412C + *((int *)qword_1003E4190 + (a4 >> 62))))();
}

uint64_t sub_1003E41A0(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  dispatch thunk of BinaryDecoding.container()(v15, v3, v4);
  uint64_t v5 = v16;
  uint64_t v6 = v17;
  uint64_t v7 = sub_100037298((uint64_t)v15, v16);
  uint64_t v8 = dispatch thunk of BinaryDecodingContaining.decode(length:)(32LL, v5, v6);
  if (!v1)
  {
    uint64_t v10 = v8;
    unint64_t v11 = v9;
    uint64_t v12 = v16;
    uint64_t v13 = v17;
    sub_100037298((uint64_t)v15, v16);
    dispatch thunk of BinaryDecodingContaining.decode(length:)(1326LL, v12, v13);
    uint64_t v7 = sub_1003E40D4(v10, v11);
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v15);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v7;
}

void *sub_1003E42D0@<X0>(void *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (__CFADD__(*result, *a2)) {
    __break(1u);
  }
  else {
    *a3 = *result + *a2;
  }
  return result;
}

void *sub_1003E42EC(void *result, void *a2)
{
  if (__CFADD__(*result, *a2)) {
    __break(1u);
  }
  else {
    *result += *a2;
  }
  return result;
}

void *sub_1003E4308@<X0>(void *result@<X0>, void *a2@<X1>, void *a3@<X8>)
{
  if (*result < *a2) {
    __break(1u);
  }
  else {
    *a3 = *result - *a2;
  }
  return result;
}

void *sub_1003E4324(void *result, void *a2)
{
  if (*result < *a2) {
    __break(1u);
  }
  else {
    *result -= *a2;
  }
  return result;
}

BOOL sub_1003E4340(void *a1, void *a2)
{
  return *a1 < *a2;
}

BOOL sub_1003E4354(void *a1, void *a2)
{
  return *a2 >= *a1;
}

BOOL sub_1003E4368(void *a1, void *a2)
{
  return *a1 >= *a2;
}

BOOL sub_1003E437C(void *a1, void *a2)
{
  return *a2 < *a1;
}

uint64_t sub_1003E4390()
{
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for UInt64,  &protocol witness table for UInt64);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 41LL;
  v2._object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  return 0x7972616D6972702ELL;
}

Swift::Int sub_1003E4414()
{
  Swift::UInt64 v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(v1);
  return Hasher._finalize()();
}

void sub_1003E4458()
{
}

Swift::Int sub_1003E4480(uint64_t a1)
{
  Swift::UInt64 v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(v2);
  return Hasher._finalize()();
}

uint64_t *sub_1003E44C0@<X0>(uint64_t *result@<X0>, void *a2@<X8>)
{
  uint64_t v3 = *result;
  uint64_t v4 = *v2;
  if (*result >= (unint64_t)*v2)
  {
    if (*result - *v2 >= 0)
    {
      *a2 = *result - *v2;
      return result;
    }
  }

  else
  {
    if (v4 - v3 >= 0)
    {
      *a2 = v3 - v4;
      return result;
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t *sub_1003E44F8@<X0>(uint64_t *result@<X0>, unint64_t *a2@<X8>)
{
  uint64_t v3 = *result;
  unint64_t v4 = *v2;
  if ((*result & 0x8000000000000000LL) == 0)
  {
    BOOL v5 = __CFADD__(v4, v3);
    v4 += v3;
    if (!v5) {
      goto LABEL_9;
    }
    __break(1u);
  }

  BOOL v6 = __OFSUB__(0LL, v3);
  unint64_t v7 = -v3;
  if (v6)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if ((v7 & 0x8000000000000000LL) == 0)
  {
    BOOL v5 = v4 >= v7;
    v4 -= v7;
    if (v5)
    {
LABEL_9:
      *a2 = v4;
      return result;
    }

    goto LABEL_11;
  }

uint64_t sub_1003E4590( unint64_t *a1, uint64_t a2, uint64_t a3, unint64_t *a4, uint64_t a5, uint64_t *a6)
{
  unint64_t v6 = *a4;
  uint64_t v7 = *a6;
  if ((*a6 & 0x8000000000000000LL) == 0)
  {
    BOOL v8 = __CFADD__(v6, v7);
    v6 += v7;
    if (!v8) {
      goto LABEL_9;
    }
    __break(1u);
  }

  BOOL v9 = __OFSUB__(0LL, v7);
  unint64_t v10 = -v7;
  if (v9)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    goto LABEL_12;
  }

  if ((v10 & 0x8000000000000000LL) == 0)
  {
    BOOL v8 = v6 >= v10;
    v6 -= v10;
    if (v8)
    {
LABEL_9:
      *a1 = v6;
      return 0LL;
    }

    goto LABEL_11;
  }

uint64_t *sub_1003E4630(uint64_t *result, uint64_t *a2)
{
  uint64_t v2 = *result;
  uint64_t v3 = *a2;
  uint64_t v4 = *a2 - *result;
  if (*a2 >= (unint64_t)*result)
  {
    if (*a2 - *result >= 0) {
      return (uint64_t *)(v4 == 0);
    }
  }

  else
  {
    if (v2 - v3 >= 0)
    {
      uint64_t v4 = v3 - v2;
      return (uint64_t *)(v4 == 0);
    }

    __break(1u);
  }

  __break(1u);
  return result;
}

uint64_t sub_1003E4668@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t v5 = a1[3];
  uint64_t v6 = a1[4];
  sub_100012ED8(a1, v5);
  dispatch thunk of Decoder.singleValueContainer()(v12, v5, v6);
  if (v2) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v7 = objc_autoreleasePoolPush();
  uint64_t v8 = v13;
  uint64_t v9 = v14;
  sub_100012ED8(v12, v13);
  uint64_t v10 = dispatch thunk of SingleValueDecodingContainer.decode(_:)(v8, v9);
  objc_autoreleasePoolPop(v7);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
  uint64_t result = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  *a2 = v10;
  return result;
}

uint64_t sub_1003E474C(void *a1)
{
  uint64_t v2 = *v1;
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  dispatch thunk of Encoder.singleValueContainer()(v8, v3, v4);
  uint64_t v5 = v9;
  uint64_t v6 = v10;
  sub_100037298((uint64_t)v8, v9);
  dispatch thunk of SingleValueEncodingContainer.encode(_:)(v2, v5, v6);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v8);
}

ValueMetadata *type metadata accessor for PrimaryWildIndex()
{
  return &type metadata for PrimaryWildIndex;
}

unint64_t sub_1003E47F0()
{
  unint64_t result = qword_1009ACE18;
  if (!qword_1009ACE18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FF96C, &type metadata for PrimaryWildIndex);
    atomic_store(result, (unint64_t *)&qword_1009ACE18);
  }

  return result;
}

void *sub_1003E4834()
{
  return &protocol witness table for Int64;
}

void *sub_1003E4840()
{
  return &protocol witness table for Int64;
}

void *sub_1003E484C()
{
  return &protocol witness table for UInt64;
}

unint64_t sub_1003E485C()
{
  unint64_t result = qword_1009ACE20;
  if (!qword_1009ACE20)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FF814, &type metadata for PrimaryWildIndex);
    atomic_store(result, (unint64_t *)&qword_1009ACE20);
  }

  return result;
}

unint64_t sub_1003E48A0(void *a1)
{
  a1[1] = sub_1003E48FC();
  a1[2] = sub_1003E4940();
  a1[3] = sub_1003E4984();
  a1[4] = sub_1003E49C8();
  a1[5] = sub_1003E4A0C();
  a1[6] = sub_1003E4A50();
  a1[7] = sub_1003E4A94();
  unint64_t result = sub_1003E4AD8();
  a1[8] = result;
  return result;
}

unint64_t sub_1003E48FC()
{
  unint64_t result = qword_1009ACE28;
  if (!qword_1009ACE28)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FF9B4, &type metadata for PrimaryWildIndex);
    atomic_store(result, (unint64_t *)&qword_1009ACE28);
  }

  return result;
}

unint64_t sub_1003E4940()
{
  unint64_t result = qword_1009ACE30;
  if (!qword_1009ACE30)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FF944, &type metadata for PrimaryWildIndex);
    atomic_store(result, (unint64_t *)&qword_1009ACE30);
  }

  return result;
}

unint64_t sub_1003E4984()
{
  unint64_t result = qword_1009ACE38;
  if (!qword_1009ACE38)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FF7D8, &type metadata for PrimaryWildIndex);
    atomic_store(result, (unint64_t *)&qword_1009ACE38);
  }

  return result;
}

unint64_t sub_1003E49C8()
{
  unint64_t result = qword_1009ACE40;
  if (!qword_1009ACE40)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FF7B0, &type metadata for PrimaryWildIndex);
    atomic_store(result, (unint64_t *)&qword_1009ACE40);
  }

  return result;
}

unint64_t sub_1003E4A0C()
{
  unint64_t result = qword_1009ACE48;
  if (!qword_1009ACE48)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FF8CC, &type metadata for PrimaryWildIndex);
    atomic_store(result, (unint64_t *)&qword_1009ACE48);
  }

  return result;
}

unint64_t sub_1003E4A50()
{
  unint64_t result = qword_1009ACE50;
  if (!qword_1009ACE50)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FF904, &type metadata for PrimaryWildIndex);
    atomic_store(result, (unint64_t *)&qword_1009ACE50);
  }

  return result;
}

unint64_t sub_1003E4A94()
{
  unint64_t result = qword_1009ACE58;
  if (!qword_1009ACE58)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FF894, &type metadata for PrimaryWildIndex);
    atomic_store(result, (unint64_t *)&qword_1009ACE58);
  }

  return result;
}

unint64_t sub_1003E4AD8()
{
  unint64_t result = qword_1009ACE60;
  if (!qword_1009ACE60)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FF83C, &type metadata for PrimaryWildIndex);
    atomic_store(result, (unint64_t *)&qword_1009ACE60);
  }

  return result;
}

uint64_t sub_1003E4B1C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A8F8);
  sub_10000A720(v0, (uint64_t)qword_100A2A8F8);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x65646F4D74736F6CLL,  0xE800000000000000LL);
}

uint64_t sub_1003E4B94(uint64_t a1, int a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v120 = a4;
  uint64_t v119 = a3;
  int v111 = a2;
  uint64_t v6 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v108 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v110 = (uint64_t)v108 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v117 = type metadata accessor for UUID(0LL);
  uint64_t v114 = *(void *)(v117 - 8);
  uint64_t v12 = __chkstk_darwin(v117);
  uint64_t v116 = (char *)v108 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v12);
  v108[2] = (char *)v108 - v14;
  uint64_t v112 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v112);
  uint64_t v113 = (uint64_t)v108 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = type metadata accessor for LostModeRecord(0LL);
  uint64_t v17 = __chkstk_darwin(v16);
  uint64_t v109 = (uint64_t)v108 - ((v18 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v17);
  unint64_t v20 = (char *)v108 - v19;
  uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)v108 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  uint64_t v26 = __chkstk_darwin(v24);
  char v28 = (char *)v108 - ((v27 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v115 = v4;
  uint64_t v118 = (int *)v16;
  uint64_t v29 = *(int *)(v16 + 24);
  uint64_t v30 = v26;
  uint64_t v121 = (uint8_t *)a1;
  uint64_t v31 = a1 + v29;
  sub_100504F30(v31, (uint64_t)v23);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48))(v23, 1LL, v30) != 1)
  {
    sub_10002218C((uint64_t)v23, (uint64_t)v28, type metadata accessor for OwnedBeaconRecord);
    unint64_t v44 = v28;
    if (qword_10099B3F0 != -1) {
      swift_once(&qword_10099B3F0, sub_1003E4B1C);
    }
    uint64_t v45 = type metadata accessor for Logger(0LL);
    sub_10000A720(v45, (uint64_t)qword_100A2A8F8);
    uint64_t v46 = sub_10001DC4C((uint64_t)v121, (uint64_t)v20, type metadata accessor for LostModeRecord);
    uint64_t v47 = (os_log_s *)Logger.logObject.getter(v46);
    os_log_type_t v48 = static os_log_type_t.default.getter(v47);
    BOOL v49 = os_log_type_enabled(v47, v48);
    v108[1] = v31;
    if (v49)
    {
      uint64_t v50 = swift_slowAlloc(22LL, -1LL);
      uint64_t v51 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v124 = v51;
      *(_DWORD *)uint64_t v50 = 141558275;
      *(void *)&v122[0] = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v122, (char *)v122 + 8, v50 + 4, v50 + 12);
      *(_WORD *)(v50 + 12) = 2081;
      uint64_t v52 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v53 = dispatch thunk of CustomStringConvertible.description.getter(v117, v52);
      *(void *)&v122[0] = sub_1003F11D4(v53, v54, (uint64_t *)&v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v122, (char *)v122 + 8, v50 + 14, v50 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68((uint64_t)v20, type metadata accessor for LostModeRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v47,  v48,  "updateLostModeServer for beacon %{private,mask.hash}s",  (uint8_t *)v50,  0x16u);
      swift_arrayDestroy(v51, 1LL, (char *)&type metadata for Any + 8);
      uint64_t v55 = v51;
      unint64_t v44 = v28;
      swift_slowDealloc(v55, -1LL, -1LL);
      swift_slowDealloc(v50, -1LL, -1LL);
    }

    else
    {
      sub_100018C68((uint64_t)v20, type metadata accessor for LostModeRecord);
    }

    uint64_t v70 = v113;
    sub_10001DC4C((uint64_t)&v44[*(int *)(v30 + 24)], v113, type metadata accessor for StableIdentifier);
    uint64_t v71 = (char *)&loc_1003E5368 + 4 * word_1007FFA30[swift_getEnumCaseMultiPayload(v70, v112)];
    __asm { BR              X10 }
  }

  sub_100015794((uint64_t)v23, (uint64_t *)&unk_1009A9C30);
  sub_10050F124(v31, (uint64_t)v8);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v10 + 48))(v8, 1LL, v9) == 1)
  {
    uint64_t v32 = sub_100015794((uint64_t)v8, &qword_1009AA830);
    uint64_t v33 = static os_log_type_t.error.getter(v32);
    if (qword_10099B778 != -1) {
      swift_once(&qword_10099B778, sub_1006516DC);
    }
    uint64_t v34 = qword_100A2B088;
    uint64_t v35 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v36 = swift_allocObject(v35, 72LL, 7LL);
    *(_OWORD *)(v36 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v37 = UUID.uuidString.getter(v36);
    uint64_t v39 = v38;
    *(void *)(v36 + 56) = &type metadata for String;
    *(void *)(v36 + 64) = sub_1000226F4();
    *(void *)(v36 + 32) = v37;
    *(void *)(v36 + 40) = v39;
    os_log(_:dso:log:_:_:)( v33,  &_mh_execute_header,  v34,  "updateLostModeServer: beacon/group not found!",  45LL,  2LL,  v36);
    swift_bridgeObjectRelease();
    unint64_t v40 = sub_1003EBF14();
    uint64_t v41 = swift_allocError(&_s13LostModeErrorON, v40, 0LL, 0LL);
    *BOOL v42 = 1;
    v119();
    return swift_errorRelease(v41);
  }

  else
  {
    uint64_t v56 = v110;
    sub_10002218C((uint64_t)v8, v110, type metadata accessor for OwnedBeaconGroup);
    if (qword_10099B3F0 != -1) {
      swift_once(&qword_10099B3F0, sub_1003E4B1C);
    }
    uint64_t v57 = type metadata accessor for Logger(0LL);
    sub_10000A720(v57, (uint64_t)qword_100A2A8F8);
    uint64_t v58 = v109;
    uint64_t v59 = sub_10001DC4C((uint64_t)v121, v109, type metadata accessor for LostModeRecord);
    uint64_t v60 = (os_log_s *)Logger.logObject.getter(v59);
    os_log_type_t v61 = static os_log_type_t.default.getter(v60);
    BOOL v62 = os_log_type_enabled(v60, v61);
    uint64_t v63 = v118;
    if (v62)
    {
      uint64_t v64 = swift_slowAlloc(22LL, -1LL);
      uint64_t v65 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v124 = v65;
      *(_DWORD *)uint64_t v64 = 141558275;
      *(void *)&v122[0] = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v122, (char *)v122 + 8, v64 + 4, v64 + 12);
      *(_WORD *)(v64 + 12) = 2081;
      uint64_t v66 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v67 = dispatch thunk of CustomStringConvertible.description.getter(v117, v66);
      *(void *)&v122[0] = sub_1003F11D4(v67, v68, (uint64_t *)&v124);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v122, (char *)v122 + 8, v64 + 14, v64 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v58, type metadata accessor for LostModeRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v60,  v61,  "updateLostModeServer for group %{private,mask.hash}s",  (uint8_t *)v64,  0x16u);
      swift_arrayDestroy(v65, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v65, -1LL, -1LL);
      swift_slowDealloc(v64, -1LL, -1LL);

      uint64_t v69 = v118;
    }

    else
    {
      sub_100018C68(v58, type metadata accessor for LostModeRecord);

      uint64_t v69 = v63;
    }

    sub_1001CC778();
    uint64_t v73 = v72;
    uint64_t v74 = v115;
    swift_retain();
    sub_1003E7760(v73, v74);
    uint64_t v76 = v75;
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v77 = &v121[v69[9]];
    uint64_t v78 = *(void *)v77;
    uint64_t v79 = *((void *)v77 + 1);
    uint64_t v80 = &v121[v69[7]];
    uint64_t v81 = *(void *)v80;
    uint64_t v82 = *((void *)v80 + 1);
    id v83 = &v121[v69[8]];
    uint64_t v84 = *(void *)v83;
    uint64_t v85 = *((void *)v83 + 1);
    __int128 v124 = xmmword_1007FFA20;
    *(void *)&__int128 v125 = v78;
    *((void *)&v125 + 1) = v79;
    *(void *)&__int128 v126 = v81;
    *((void *)&v126 + 1) = v82;
    *(void *)&__int128 v127 = v84;
    *((void *)&v127 + 1) = v85;
    LOBYTE(v128) = v111 & 1;
    *((void *)&v128 + 1) = v76;
    swift_bridgeObjectRetain_n(v85, 3LL);
    swift_bridgeObjectRetain_n(v76, 2LL);
    swift_bridgeObjectRetain_n(0xE900000000000065LL, 2LL);
    swift_bridgeObjectRetain_n(v79, 3LL);
    swift_bridgeObjectRetain_n(v82, 3LL);
    uint64_t v87 = (os_log_s *)Logger.logObject.getter(v86);
    os_log_type_t v88 = static os_log_type_t.info.getter(v87);
    if (os_log_type_enabled(v87, v88))
    {
      uint64_t v89 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v90 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v89 = 136315138;
      uint64_t v123 = v90;
      uint64_t v121 = v89 + 4;
      v122[2] = v126;
      v122[3] = v127;
      v122[4] = v128;
      v122[1] = v125;
      v122[0] = v124;
      swift_bridgeObjectRetain(0xE900000000000065LL);
      swift_bridgeObjectRetain(v79);
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRetain(v85);
      swift_bridgeObjectRetain(v76);
      uint64_t v91 = String.init<A>(describing:)(v122, &type metadata for AirPodsLostModeContent);
      *(void *)&v122[0] = sub_1003F11D4(v91, v92, &v123);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v122, (char *)v122 + 8, v121, v89 + 12);
      swift_bridgeObjectRelease_n(v76, 2LL);
      swift_bridgeObjectRelease_n(v85, 2LL);
      swift_bridgeObjectRelease_n(v82, 2LL);
      swift_bridgeObjectRelease_n(v79, 2LL);
      swift_bridgeObjectRelease_n(0xE900000000000065LL, 2LL);
      uint64_t v56 = v110;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v87, v88, "AirPodsLostModeContent: %s", v89, 0xCu);
      swift_arrayDestroy(v90, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v90, -1LL, -1LL);
      swift_slowDealloc(v89, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v76, 2LL);
      swift_bridgeObjectRelease_n(v85, 2LL);
      swift_bridgeObjectRelease_n(v82, 2LL);
      swift_bridgeObjectRelease_n(v79, 2LL);
      swift_bridgeObjectRelease_n(0xE900000000000065LL, 2LL);
    }

    sub_1005DFB28((uint64_t)&v124);
    if (v93)
    {
      uint64_t v96 = v93;
      uint64_t v97 = v94;
      unint64_t v98 = v95;
      sub_100339CB4(v93, v94, v95);
      uint64_t v99 = (void *)sub_1003E7BE0(2);
      sub_100439748(v96, v97, v98, v99);
      swift_release();
      uint64_t v100 = swift_allocObject(&unk_100957458, 32LL, 7LL);
      id v101 = v119;
      uint64_t v102 = v120;
      *(void *)(v100 + swift_weakDestroy(v0 + 16) = v119;
      *(void *)(v100 + 24) = v102;
      swift_retain();
      Future.addFailure(block:)(sub_1003ECDFC, v100);
      swift_release();
      swift_release();
      uint64_t v103 = (void *)swift_allocObject(&unk_100957480, 40LL, 7LL);
      v103[2] = v115;
      v103[3] = v101;
      v103[4] = v102;
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)(sub_1003ECDD4, v103);
      swift_release();
      swift_release();
      swift_release();
      sub_100117A58(v96, v97, v98);
      sub_100018C68(v56, type metadata accessor for OwnedBeaconGroup);
      return sub_100117A58(v96, v97, v98);
    }

    else
    {
      uint64_t v104 = static os_log_type_t.error.getter(0LL);
      if (qword_10099B778 != -1) {
        swift_once(&qword_10099B778, sub_1006516DC);
      }
      os_log(_:dso:log:_:_:)( v104,  &_mh_execute_header,  qword_100A2B088,  "Unable to init LostModeRequest.",  31LL,  2LL,  _swiftEmptyArrayStorage);
      unint64_t v105 = sub_1001B25CC();
      uint64_t v106 = swift_allocError(&type metadata for BeaconManagerCommandError, v105, 0LL, 0LL);
      _BYTE *v107 = 0;
      v119();
      swift_errorRelease(v106);
      return sub_100018C68(v56, type metadata accessor for OwnedBeaconGroup);
    }
  }

void sub_1003E5FA8(uint64_t a1, dispatch_group_s *a2)
{
  if ((a1 & 1) != 0)
  {
    uint64_t v3 = static os_log_type_t.default.getter(a1);
    if (qword_10099B778 != -1) {
      swift_once(&qword_10099B778, sub_1006516DC);
    }
    os_log(_:dso:log:_:_:)( v3,  &_mh_execute_header,  qword_100A2B088,  "Successfully reverted CK changes.",  33LL,  2LL,  _swiftEmptyArrayStorage);
  }

  else
  {
    uint64_t v4 = static os_log_type_t.error.getter(a1);
    if (qword_10099B778 != -1) {
      swift_once(&qword_10099B778, sub_1006516DC);
    }
    os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  qword_100A2B088,  "Failed to revert CK changes",  27LL,  2LL,  _swiftEmptyArrayStorage);
  }

  dispatch_group_leave(a2);
}

uint64_t sub_1003E6088(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  uint64_t v14 = (int *)type metadata accessor for LostModeRecord(0LL);
  uint64_t v15 = (void *)(a1 + v14[8]);
  swift_bridgeObjectRetain(a3);
  swift_bridgeObjectRelease();
  *uint64_t v15 = a2;
  v15[1] = a3;
  uint64_t v16 = (void *)(a1 + v14[9]);
  swift_bridgeObjectRetain(a5);
  swift_bridgeObjectRelease();
  *uint64_t v16 = a4;
  v16[1] = a5;
  uint64_t v17 = (void *)(a1 + v14[7]);
  swift_bridgeObjectRetain(a7);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v17 = a6;
  v17[1] = a7;
  return result;
}

void sub_1003E6148(uint64_t a1, uint64_t a2, dispatch_group_s *a3)
{
  uint64_t v5 = swift_projectBox(a2);
  swift_beginAccess(v5, v6, 1LL, 0LL);
  sub_1003ECB00(a1, v5);
  dispatch_group_leave(a3);
}

uint64_t sub_1003E61A8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (int *)type metadata accessor for LostModeRecord(0LL);
  uint64_t v5 = v4[8];
  uint64_t v7 = *(void *)(a2 + v5);
  uint64_t v6 = *(void *)(a2 + v5 + 8);
  uint64_t v8 = (void *)(a1 + v5);
  swift_bridgeObjectRetain(v6);
  swift_bridgeObjectRelease();
  *uint64_t v8 = v7;
  v8[1] = v6;
  uint64_t v9 = v4[9];
  uint64_t v11 = *(void *)(a2 + v9);
  uint64_t v10 = *(void *)(a2 + v9 + 8);
  uint64_t v12 = (void *)(a1 + v9);
  swift_bridgeObjectRetain(v10);
  swift_bridgeObjectRelease();
  *uint64_t v12 = v11;
  v12[1] = v10;
  uint64_t v13 = v4[7];
  uint64_t v15 = *(void *)(a2 + v13);
  uint64_t v14 = *(void *)(a2 + v13 + 8);
  uint64_t v16 = (void *)(a1 + v13);
  swift_bridgeObjectRetain(v14);
  uint64_t result = swift_bridgeObjectRelease();
  *uint64_t v16 = v15;
  v16[1] = v14;
  return result;
}

void sub_1003E6264(uint64_t a1, dispatch_group_s *a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A7F18);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v19 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  sub_1003EBFB8(a1, (uint64_t)v6);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6, v4);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v8 = *v6;
    uint64_t v9 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    if (qword_10099B778 != -1) {
      swift_once(&qword_10099B778, sub_1006516DC);
    }
    uint64_t v10 = qword_100A2B088;
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v12 = swift_allocObject(v11, 72LL, 7LL);
    *(_OWORD *)(v12 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v20 = v8;
    swift_errorRetain(v8);
    uint64_t v13 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v14 = String.init<A>(describing:)(&v20, v13);
    uint64_t v16 = v15;
    *(void *)(v12 + 56) = &type metadata for String;
    *(void *)(v12 + 64) = sub_1000226F4();
    *(void *)(v12 + 32) = v14;
    *(void *)(v12 + 40) = v16;
    os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, v10, "Failed to revert CK changes due to %@", 37LL, 2LL, v12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v8);
  }

  else
  {
    uint64_t v17 = sub_100015794((uint64_t)v6, &qword_1009A7F18);
    uint64_t v18 = static os_log_type_t.default.getter(v17);
    if (qword_10099B778 != -1) {
      swift_once(&qword_10099B778, sub_1006516DC);
    }
    os_log(_:dso:log:_:_:)( v18,  &_mh_execute_header,  qword_100A2B088,  "Successfully reverted CK changes.",  33LL,  2LL,  _swiftEmptyArrayStorage);
  }

  dispatch_group_leave(a2);
}

uint64_t sub_1003E645C@<X0>(uint64_t a1@<X0>, void *a2@<X8>)
{
  uint64_t v106 = sub_100004AEC(&qword_1009ACEA0);
  __chkstk_darwin(v106);
  unint64_t v105 = (char *)&v96 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  int v111 = (char *)type metadata accessor for UUID(0LL);
  uint64_t v109 = *((void *)v111 - 1);
  uint64_t v5 = __chkstk_darwin(v111);
  uint64_t v107 = (char *)&v96 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v108 = (uint64_t)&v96 - v7;
  uint64_t v110 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v110);
  uint64_t v9 = (char *)&v96 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v96 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = (int *)type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v14 = *((void *)v13 - 1);
  __chkstk_darwin(v13);
  uint64_t v16 = (char *)&v96 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  sub_100504F30(a1, (uint64_t)v12);
  if ((*(unsigned int (**)(char *, uint64_t, int *))(v14 + 48))(v12, 1LL, v13) != 1)
  {
    uint64_t v104 = a2;
    sub_10002218C((uint64_t)v12, (uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
    uint64_t v20 = sub_1000F5F2C(*(void *)&v16[v13[16]], *(void *)&v16[v13[17]]);
    uint64_t v22 = v20;
    unint64_t v23 = v21;
    if (v21 >> 60 != 15)
    {
      sub_10001736C(v20, v21);
      uint64_t v25 = sub_1000F55FC(v22, v23);
      unint64_t v27 = v26;
      sub_1000182F0(v22, v23);
      uint64_t v102 = Data.hexString.getter(v25, v27);
      sub_100016F9C(v25, v27);
      __asm { BR              X9 }
    }

    uint64_t v101 = 0LL;
    uint64_t v102 = 0LL;
    uint64_t v103 = 0LL;
    uint64_t v24 = (uint64_t)v111;
    sub_10001DC4C((uint64_t)&v16[v13[6]], (uint64_t)v9, type metadata accessor for StableIdentifier);
    int EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v9, v110);
    if (EnumCaseMultiPayload != 3)
    {
      if (EnumCaseMultiPayload != 2)
      {
        sub_100018C68((uint64_t)v16, type metadata accessor for OwnedBeaconRecord);
        sub_1000182F0(v22, v23);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        uint64_t v56 = type metadata accessor for AirPodsLostModeContent.Device(0LL);
        (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v56 - 8) + 56LL))( (char *)v104,  1LL,  1LL,  v56);
        return sub_100018C68((uint64_t)v9, type metadata accessor for StableIdentifier);
      }

      uint64_t v110 = 0LL;
      int v111 = v16;
      uint64_t v29 = (int *)sub_100004AEC((uint64_t *)&unk_1009B0520);
      uint64_t v30 = &v9[v29[12]];
      uint64_t v31 = *(void (**)(void, void, void))v30;
      uint64_t v107 = (char *)*((void *)v30 + 1);
      uint64_t v32 = &v9[v29[16]];
      uint64_t v33 = *((void *)v32 + 1);
      unint64_t v98 = *(void (**)(uint64_t, char *, uint64_t))v32;
      uint64_t v99 = (void (*)(uint64_t, char *, uint64_t))v31;
      uint64_t v34 = &v9[v29[20]];
      uint64_t v36 = *(void (**)(uint64_t, char *, uint64_t))v34;
      uint64_t v35 = *((void *)v34 + 1);
      swift_bridgeObjectRelease();
      uint64_t v37 = v108;
      uint64_t v38 = v109;
      uint64_t v100 = *(void (**)(uint64_t, char *, uint64_t))(v109 + 32);
      v100(v108, v9, v24);
      uint64_t v112 = v36;
      uint64_t v113 = v35;
      unint64_t v39 = sub_1000155F8();
      uint64_t v40 = Data.init<A>(hexString:)(&v112, &type metadata for String, v39);
      if (v41 >> 60 == 15)
      {
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
        sub_1000182F0(v22, v23);
        (*(void (**)(uint64_t, uint64_t))(v38 + 8))(v37, v24);
        sub_100018C68((uint64_t)v111, type metadata accessor for OwnedBeaconRecord);
        uint64_t v17 = type metadata accessor for AirPodsLostModeContent.Device(0LL);
        uint64_t v18 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL);
        uint64_t v19 = (char *)v104;
        goto LABEL_20;
      }

      unint64_t v58 = v41;
      uint64_t v109 = v40;
      uint64_t v59 = v107;
      uint64_t v60 = (uint64_t)v111;
      if (v33)
      {
        uint64_t v112 = v98;
        uint64_t v113 = v33;
        uint64_t v61 = Data.init<A>(hexString:)(&v112, &type metadata for String, v39);
        uint64_t v97 = v62;
        unint64_t v98 = (void (*)(uint64_t, char *, uint64_t))v61;
        uint64_t v63 = v108;
        if (v59)
        {
LABEL_15:
          uint64_t v112 = v99;
          uint64_t v113 = (uint64_t)v59;
          swift_bridgeObjectRetain(v59);
          uint64_t v64 = Data.init<A>(hexString:)(&v112, &type metadata for String, v39);
          unint64_t v66 = v65;
          sub_1000182F0(v22, v23);
LABEL_27:
          sub_100018C68(v60, type metadata accessor for OwnedBeaconRecord);
          swift_bridgeObjectRelease();
          uint64_t v78 = &v105[*(int *)(v106 + 80)];
          uint64_t v79 = (void (*)(char *, char *, uint64_t))v100;
          v100((uint64_t)v78, (char *)v63, v24);
          uint64_t v80 = (int *)type metadata accessor for AirPodsLostModeContent.Device(0LL);
          uint64_t v81 = v104;
          v79((char *)v104 + v80[7], v78, v24);
          uint64_t v82 = v97;
          *uint64_t v81 = v98;
          v81[1] = v82;
          v81[2] = v64;
          v81[3] = v66;
          v81[4] = v109;
          v81[5] = v58;
          id v83 = (void *)((char *)v81 + v80[8]);
          uint64_t v84 = v110;
          *id v83 = v102;
          v83[1] = v84;
          uint64_t v85 = (void *)((char *)v81 + v80[9]);
          uint64_t v86 = v103;
          void *v85 = v101;
          v85[1] = v86;
          uint64_t v18 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*((void *)v80 - 1) + 56LL);
          uint64_t v19 = (char *)v81;
LABEL_29:
          uint64_t v73 = 0LL;
          uint64_t v17 = (uint64_t)v80;
          return v18(v19, v73, 1LL, v17);
        }
      }

      else
      {
        uint64_t v97 = 0xF000000000000000LL;
        unint64_t v98 = 0LL;
        uint64_t v63 = v108;
        if (v107) {
          goto LABEL_15;
        }
      }

      sub_1000182F0(v22, v23);
      uint64_t v64 = 0LL;
      unint64_t v66 = 0xF000000000000000LL;
      goto LABEL_27;
    }

    uint64_t v110 = 0LL;
    int v111 = v16;
    BOOL v42 = (int *)sub_100004AEC((uint64_t *)&unk_1009AF840);
    uint64_t v43 = &v9[v42[12]];
    unint64_t v44 = *(void (**)(uint64_t, char *, uint64_t))v43;
    uint64_t v108 = *((void *)v43 + 1);
    uint64_t v45 = &v9[v42[16]];
    uint64_t v46 = *(void (**)(uint64_t, char *, uint64_t))v45;
    uint64_t v47 = *((void *)v45 + 1);
    os_log_type_t v48 = &v9[v42[20]];
    uint64_t v49 = *((void *)v48 + 1);
    uint64_t v99 = *(void (**)(uint64_t, char *, uint64_t))v48;
    uint64_t v100 = v44;
    uint64_t v50 = v24;
    uint64_t v51 = v109;
    uint64_t v52 = v107;
    unint64_t v98 = *(void (**)(uint64_t, char *, uint64_t))(v109 + 32);
    v98((uint64_t)v107, v9, v50);
    uint64_t v112 = v46;
    uint64_t v113 = v47;
    unint64_t v53 = sub_1000155F8();
    uint64_t v54 = Data.init<A>(hexString:)(&v112, &type metadata for String, v53);
    if (v55 >> 60 == 15)
    {
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000182F0(v22, v23);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v52, v50);
    }

    else
    {
      unint64_t v67 = v55;
      uint64_t v68 = v49;
      uint64_t v97 = v54;
      uint64_t v69 = v51;
      uint64_t v112 = v100;
      uint64_t v113 = v108;
      uint64_t v70 = Data.init<A>(hexString:)(&v112, &type metadata for String, v53);
      if (v71 >> 60 != 15)
      {
        unint64_t v74 = v71;
        uint64_t v108 = v70;
        uint64_t v112 = v99;
        uint64_t v113 = v68;
        uint64_t v75 = Data.init<A>(hexString:)(&v112, &type metadata for String, v53);
        unint64_t v77 = v76;
        sub_1000182F0(v22, v23);
        sub_100018C68((uint64_t)v111, type metadata accessor for OwnedBeaconRecord);
        uint64_t v72 = (char *)v104;
        if (v77 >> 60 != 15)
        {
          uint64_t v87 = &v105[*(int *)(v106 + 80)];
          uint64_t v88 = v50;
          uint64_t v89 = v50;
          uint64_t v90 = (void (*)(char *, char *, uint64_t))v98;
          v98((uint64_t)v87, v107, v89);
          uint64_t v91 = v75;
          uint64_t v80 = (int *)type metadata accessor for AirPodsLostModeContent.Device(0LL);
          v90(&v72[v80[7]], v87, v88);
          *(void *)uint64_t v72 = v97;
          *((void *)v72 + 1) = v67;
          *((void *)v72 + 2) = v108;
          *((void *)v72 + 3) = v74;
          *((void *)v72 + 4) = v91;
          *((void *)v72 + 5) = v77;
          unint64_t v92 = (uint64_t *)&v72[v80[8]];
          uint64_t v93 = v110;
          *unint64_t v92 = v102;
          v92[1] = v93;
          uint64_t v94 = &v72[v80[9]];
          uint64_t v95 = v103;
          *(void *)uint64_t v94 = v101;
          *((void *)v94 + 1) = v95;
          uint64_t v18 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*((void *)v80 - 1) + 56LL);
          uint64_t v19 = v72;
          goto LABEL_29;
        }

        (*(void (**)(char *, uint64_t))(v69 + 8))(v107, v50);
        sub_1000182F0(v97, v67);
        sub_1000182F0(v108, v74);
        swift_bridgeObjectRelease();
        swift_bridgeObjectRelease();
LABEL_19:
        uint64_t v17 = type metadata accessor for AirPodsLostModeContent.Device(0LL);
        uint64_t v18 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL);
        uint64_t v19 = v72;
        goto LABEL_20;
      }

      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      swift_bridgeObjectRelease();
      sub_1000182F0(v97, v67);
      sub_1000182F0(v22, v23);
      (*(void (**)(char *, uint64_t))(v51 + 8))(v107, v50);
    }

    sub_100018C68((uint64_t)v111, type metadata accessor for OwnedBeaconRecord);
    uint64_t v72 = (char *)v104;
    goto LABEL_19;
  }

  sub_100015794((uint64_t)v12, (uint64_t *)&unk_1009A9C30);
  uint64_t v17 = type metadata accessor for AirPodsLostModeContent.Device(0LL);
  uint64_t v18 = *(uint64_t (**)(void *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL);
  uint64_t v19 = (char *)a2;
LABEL_20:
  uint64_t v73 = 1LL;
  return v18(v19, v73, 1LL, v17);
}

uint64_t sub_1003E6D48(uint64_t a1, uint64_t (*a2)(uint64_t))
{
  uint64_t v4 = static os_log_type_t.error.getter(a1);
  if (qword_10099B778 != -1) {
    swift_once(&qword_10099B778, sub_1006516DC);
  }
  uint64_t v5 = qword_100A2B088;
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v7 = swift_allocObject(v6, 72LL, 7LL);
  *(_OWORD *)(v7 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v13 = a1;
  swift_errorRetain(a1);
  uint64_t v8 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  uint64_t v9 = String.init<A>(describing:)(&v13, v8);
  uint64_t v11 = v10;
  *(void *)(v7 + 56) = &type metadata for String;
  *(void *)(v7 + 64) = sub_1000226F4();
  *(void *)(v7 + 32) = v9;
  *(void *)(v7 + 40) = v11;
  os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  v5,  "Failed to submit lost mode info due to. Error - %@",  50LL,  2LL,  v7);
  swift_bridgeObjectRelease();
  return a2(a1);
}

uint64_t sub_1003E6E68(uint64_t a1, uint64_t a2, void (*a3)(void), uint64_t a4)
{
  uint64_t v45 = a3;
  uint64_t v46 = a4;
  uint64_t v4 = sub_100004AEC(&qword_1009ACE70);
  __chkstk_darwin(v4);
  uint64_t v5 = type metadata accessor for ServerStatusCode(0LL);
  uint64_t v43 = *(void *)(v5 - 8);
  uint64_t v44 = v5;
  __chkstk_darwin(v5);
  uint64_t v40 = (char *)&v37 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for LostModeResponse(0LL);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v42 = (uint64_t)&v37 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v47 = (uint64_t)&v37 - v11;
  uint64_t v12 = static os_log_type_t.debug.getter(v10);
  if (qword_10099B778 != -1) {
    swift_once(&qword_10099B778, sub_1006516DC);
  }
  uint64_t v13 = qword_100A2B088;
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
  __int128 v41 = xmmword_1007E67D0;
  *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v16 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  uint64_t v38 = sub_100007864( &qword_1009A6DC0,  (uint64_t (*)(uint64_t))&type metadata accessor for FMNServerInteractionController.FMNResponseFields,  (uint64_t)&protocol conformance descriptor for FMNServerInteractionController.FMNResponseFields);
  uint64_t v39 = v16;
  uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v16, v38);
  uint64_t v19 = v18;
  *(void *)(v15 + 56) = &type metadata for String;
  unint64_t v20 = sub_1000226F4();
  *(void *)(v15 + 64) = v20;
  *(void *)(v15 + 32) = v17;
  *(void *)(v15 + 40) = v19;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "updateLostModeServer raw response %@.", 37LL, 2LL, v15);
  swift_bridgeObjectRelease();
  uint64_t v21 = type metadata accessor for JSONDecoder(0LL);
  uint64_t v22 = swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
  uint64_t v23 = JSONDecoder.init()(v22);
  uint64_t v24 = FMNServerInteractionController.FMNResponseFields.data.getter(v23);
  unint64_t v26 = v25;
  uint64_t v27 = sub_100007864(&qword_1009ACE78, type metadata accessor for LostModeResponse, (uint64_t)&unk_1007F4810);
  dispatch thunk of JSONDecoder.decode<A>(_:from:)(v7, v24, v26, v7, v27);
  uint64_t v28 = sub_100016F9C(v24, v26);
  uint64_t v29 = static os_log_type_t.default.getter(v28);
  uint64_t v30 = qword_100A2B088;
  uint64_t v31 = swift_allocObject(v14, 72LL, 7LL);
  *(_OWORD *)(v31 + swift_weakDestroy(v0 + 16) = v41;
  uint64_t v32 = v47;
  uint64_t v33 = v42;
  sub_10001DC4C(v47, v42, type metadata accessor for LostModeResponse);
  uint64_t v34 = String.init<A>(describing:)(v33, v7);
  *(void *)(v31 + 56) = &type metadata for String;
  *(void *)(v31 + 64) = v20;
  *(void *)(v31 + 32) = v34;
  *(void *)(v31 + 40) = v35;
  os_log(_:dso:log:_:_:)(v29, &_mh_execute_header, v30, "updateLostModeServer: LostModeResponse %@.", 42LL, 2LL, v31);
  swift_bridgeObjectRelease();
  sub_1003EC578(v32, v45);
  swift_release();
  return sub_100018C68(v32, type metadata accessor for LostModeResponse);
}

uint64_t sub_1003E7314(uint64_t a1, void (*a2)(uint64_t), uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (a1)
  {
    swift_errorRetain(a1);
    a2(a1);
    return swift_errorRelease(a1);
  }

  else
  {
    uint64_t v11 = static os_log_type_t.default.getter(0LL);
    if (qword_10099B778 != -1) {
      swift_once(&qword_10099B778, sub_1006516DC);
    }
    os_log(_:dso:log:_:_:)( v11,  &_mh_execute_header,  qword_100A2B088,  "Removing lost mode info from server",  35LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v12 = (void *)swift_allocObject(&unk_1009576B0, 40LL, 7LL);
    void v12[2] = a4;
    void v12[3] = a2;
    v12[4] = a3;
    swift_retain();
    swift_retain();
    sub_1003E7494(a5, (uint64_t)sub_1003ECCAC, (uint64_t)v12);
    return swift_release();
  }

uint64_t sub_1003E7428(uint64_t a1, uint64_t a2, void (*a3)(uint64_t))
{
  if (a1)
  {
    swift_errorRetain(a1);
    a3(a1);
    return swift_errorRelease(a1);
  }

  else
  {
    sub_1004E696C(0xEu);
    return ((uint64_t (*)(void))a3)(0LL);
  }

uint64_t sub_1003E7494(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v7 = type metadata accessor for LostModeRecord(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v20 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = swift_allocObject(&unk_1009576D8, 32LL, 7LL);
  *(void *)(v10 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v10 + 24) = a3;
  uint64_t v11 = swift_retain();
  uint64_t v12 = static os_log_type_t.default.getter(v11);
  if (qword_10099B708 != -1) {
    swift_once(&qword_10099B708, sub_100651168);
  }
  uint64_t v13 = qword_100A2B018;
  uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v15 = swift_allocObject(v14, 72LL, 7LL);
  *(_OWORD *)(v15 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  sub_10001DC4C(a1, (uint64_t)v9, type metadata accessor for LostModeRecord);
  uint64_t v16 = String.init<A>(describing:)(v9, v7);
  uint64_t v18 = v17;
  *(void *)(v15 + 56) = &type metadata for String;
  *(void *)(v15 + 64) = sub_1000226F4();
  *(void *)(v15 + 32) = v16;
  *(void *)(v15 + 40) = v18;
  os_log(_:dso:log:_:_:)(v12, &_mh_execute_header, v13, "Attempting to remove: %@", 24LL, 2LL, v15);
  swift_bridgeObjectRelease();
  swift_retain();
  sub_100554B14(a1, v3, (uint64_t)sub_1003ECCB8, v10);
  return swift_release_n(v10, 2LL);
}

uint64_t sub_1003E762C(uint64_t a1, void (*a2)(void))
{
  if ((a1 & 1) != 0)
  {
    uint64_t v3 = static os_log_type_t.default.getter(a1);
    if (qword_10099B778 != -1) {
      swift_once(&qword_10099B778, sub_1006516DC);
    }
    os_log(_:dso:log:_:_:)( v3,  &_mh_execute_header,  qword_100A2B088,  "Lost mode record removed",  24LL,  2LL,  _swiftEmptyArrayStorage);
    return ((uint64_t (*)(void))a2)(0LL);
  }

  else
  {
    uint64_t v5 = static os_log_type_t.error.getter(a1);
    if (qword_10099B778 != -1) {
      swift_once(&qword_10099B778, sub_1006516DC);
    }
    os_log(_:dso:log:_:_:)( v5,  &_mh_execute_header,  qword_100A2B088,  "Failed to remove Lost mode record.",  34LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v6 = sub_1000220F0();
    uint64_t v7 = swift_allocError(&type metadata for BeaconStore.BeaconStoreError, v6, 0LL, 0LL);
    *uint64_t v8 = 6;
    a2();
    return swift_errorRelease(v7);
  }

void sub_1003E7760(uint64_t a1, uint64_t a2)
{
  uint64_t v47 = a2;
  uint64_t v4 = sub_100004AEC(&qword_1009ACE98);
  __chkstk_darwin(v4);
  unint64_t v6 = (unint64_t *)((char *)&v37 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = type metadata accessor for AirPodsLostModeContent.Device(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v45 = v7;
  uint64_t v46 = v8;
  uint64_t v9 = __chkstk_darwin(v7);
  uint64_t v41 = (uint64_t)&v37 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v40 = (uint64_t)&v37 - v11;
  uint64_t v12 = type metadata accessor for UUID(0LL);
  uint64_t v13 = *(void *)(v12 - 8);
  __chkstk_darwin(v12);
  uint64_t v15 = (char *)&v37 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v16 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v16);
  uint64_t v18 = (char *)&v37 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = *(void *)(a1 + 56);
  uint64_t v43 = a1 + 56;
  uint64_t v20 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v21 = -1LL;
  if (v20 < 64) {
    uint64_t v21 = ~(-1LL << v20);
  }
  unint64_t v22 = v21 & v19;
  int64_t v44 = (unint64_t)(v20 + 63) >> 6;
  __n128 v23 = swift_bridgeObjectRetain(a1);
  int64_t v24 = 0LL;
  uint64_t v42 = _swiftEmptyArrayStorage;
  while (1)
  {
    if (v22)
    {
      unint64_t v25 = __clz(__rbit64(v22));
      v22 &= v22 - 1;
      unint64_t v26 = v25 | (v24 << 6);
      goto LABEL_19;
    }

    if (__OFADD__(v24++, 1LL))
    {
      __break(1u);
      goto LABEL_37;
    }

    if (v24 >= v44) {
      goto LABEL_34;
    }
    unint64_t v28 = *(void *)(v43 + 8 * v24);
    if (!v28) {
      break;
    }
LABEL_18:
    unint64_t v22 = (v28 - 1) & v28;
    unint64_t v26 = __clz(__rbit64(v28)) + (v24 << 6);
LABEL_19:
    (*(void (**)(char *, unint64_t, uint64_t, __n128))(v13 + 16))( v18,  *(void *)(a1 + 48) + *(void *)(v13 + 72) * v26,  v12,  v23);
    (*(void (**)(char *, void, uint64_t, uint64_t))(v13 + 56))(v18, 0LL, 1LL, v12);
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v18, v12);
    sub_1003E645C((uint64_t)v15, v6);
    if (v2)
    {
      (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
      swift_bridgeObjectRelease();
LABEL_35:
      swift_release();
      return;
    }

    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v12);
    if ((*(unsigned int (**)(void *, uint64_t, uint64_t))(v46 + 48))(v6, 1LL, v45) == 1)
    {
      sub_100015794((uint64_t)v6, &qword_1009ACE98);
    }

    else
    {
      uint64_t v39 = a1;
      uint64_t v30 = v40;
      sub_10002218C((uint64_t)v6, v40, type metadata accessor for AirPodsLostModeContent.Device);
      sub_10002218C(v30, v41, type metadata accessor for AirPodsLostModeContent.Device);
      if ((swift_isUniquelyReferenced_nonNull_native(v42) & 1) == 0) {
        uint64_t v42 = (void *)sub_1004C5A98(0, v42[2] + 1LL, 1, (unint64_t)v42);
      }
      unint64_t v32 = v42[2];
      unint64_t v31 = v42[3];
      unint64_t v33 = v32 + 1;
      a1 = v39;
      if (v32 >= v31 >> 1)
      {
        unint64_t v37 = v42[2];
        unint64_t v38 = v32 + 1;
        uint64_t v36 = (void *)sub_1004C5A98(v31 > 1, v32 + 1, 1, (unint64_t)v42);
        unint64_t v32 = v37;
        unint64_t v33 = v38;
        uint64_t v42 = v36;
      }

      uint64_t v34 = v41;
      uint64_t v35 = v42;
      v42[2] = v33;
      sub_10002218C( v34,  (uint64_t)v35 + ((*(unsigned __int8 *)(v46 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v46 + 80))
      + *(void *)(v46 + 72) * v32,
        type metadata accessor for AirPodsLostModeContent.Device);
    }
  }

  int64_t v29 = v24 + 1;
  if (v24 + 1 >= v44) {
    goto LABEL_34;
  }
  unint64_t v28 = *(void *)(v43 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v29 = v24 + 2;
  if (v24 + 2 >= v44) {
    goto LABEL_34;
  }
  unint64_t v28 = *(void *)(v43 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v29 = v24 + 3;
  if (v24 + 3 >= v44) {
    goto LABEL_34;
  }
  unint64_t v28 = *(void *)(v43 + 8 * v29);
  if (v28) {
    goto LABEL_17;
  }
  int64_t v29 = v24 + 4;
  if (v24 + 4 >= v44)
  {
LABEL_34:
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t, __n128))(v13 + 56))(v18, 1LL, 1LL, v12, v23);
    goto LABEL_35;
  }

  unint64_t v28 = *(void *)(v43 + 8 * v29);
  if (v28)
  {
LABEL_17:
    int64_t v24 = v29;
    goto LABEL_18;
  }

  while (1)
  {
    int64_t v24 = v29 + 1;
    if (__OFADD__(v29, 1LL)) {
      break;
    }
    if (v24 >= v44) {
      goto LABEL_34;
    }
    unint64_t v28 = *(void *)(v43 + 8 * v24);
    ++v29;
    if (v28) {
      goto LABEL_18;
    }
  }

uint64_t sub_1003E7BE0(char a1)
{
  uint64_t v2 = type metadata accessor for URLComponents(0LL);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v51 = (char *)&v48 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for FMNAccountType(0LL);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v48 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009A6DB0);
  __chkstk_darwin(v9);
  uint64_t v11 = (char *)&v48 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    if (a1 == 1)
    {
      uint64_t MyAppURLSessionFactory = type metadata accessor for FindMyAppURLSessionFactory(0LL);
      swift_allocObject( MyAppURLSessionFactory,  *(unsigned int *)(MyAppURLSessionFactory + 48),  *(unsigned __int16 *)(MyAppURLSessionFactory + 52));
      uint64_t v13 = type metadata accessor for FMNMockingPreferences(0LL);
      (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v11, 1LL, 1LL, v13);
      uint64_t v14 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0LL, 0LL, v11);
      uint64_t v58 = type metadata accessor for AccessoryLostModeEndPoint(0LL);
      uint64_t v59 = sub_100007864( &qword_1009ACE88,  type metadata accessor for AccessoryLostModeEndPoint,  (uint64_t)&unk_1007F69FC);
      uint64_t v15 = sub_10000A7C8(v57);
      (*(void (**)(void *, void, uint64_t))(v6 + 104))( v15,  enum case for FMNAccountType.accessory(_:),  v5);
      goto LABEL_7;
    }

    uint64_t v21 = type metadata accessor for FindMyAppURLSessionFactory(0LL);
    swift_allocObject(v21, *(unsigned int *)(v21 + 48), *(unsigned __int16 *)(v21 + 52));
    uint64_t v22 = type metadata accessor for FMNMockingPreferences(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v11, 1LL, 1LL, v22);
    uint64_t v14 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0LL, 0LL, v11);
    uint64_t v18 = type metadata accessor for AirPodsLostModeEndPoint(0LL);
    uint64_t v58 = v18;
    uint64_t v59 = sub_100007864(&qword_1009ACE80, type metadata accessor for AirPodsLostModeEndPoint, (uint64_t)&unk_1007FD2A8);
    uint64_t v19 = (char *)sub_10000A7C8(v57);
    uint64_t v20 = (unsigned int *)&enum case for FMNAccountType.w2Accessory(_:);
  }

  else
  {
    uint64_t v16 = type metadata accessor for FindMyAppURLSessionFactory(0LL);
    swift_allocObject(v16, *(unsigned int *)(v16 + 48), *(unsigned __int16 *)(v16 + 52));
    uint64_t v17 = type metadata accessor for FMNMockingPreferences(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v17 - 8) + 56LL))(v11, 1LL, 1LL, v17);
    uint64_t v14 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0LL, 0LL, v11);
    uint64_t v18 = type metadata accessor for LostModeEndPoint(0LL);
    uint64_t v58 = v18;
    uint64_t v59 = sub_100007864(&qword_1009ACE90, type metadata accessor for LostModeEndPoint, (uint64_t)&unk_100804244);
    uint64_t v19 = (char *)sub_10000A7C8(v57);
    uint64_t v20 = (unsigned int *)&enum case for FMNAccountType.searchParty(_:);
  }

  uint64_t v23 = *v20;
  int64_t v24 = *(void (**)(char *, uint64_t, uint64_t))(v6 + 104);
  v24(v8, v23, v5);
  uint64_t v25 = type metadata accessor for AccountURLComponents();
  swift_allocObject(v25, 56LL, 7LL);
  *(void *)uint64_t v19 = sub_1006C217C((uint64_t)v8);
  v24(&v19[*(int *)(v18 + 20)], v23, v5);
LABEL_7:
  if (qword_10099B3F0 != -1) {
    swift_once(&qword_10099B3F0, sub_1003E4B1C);
  }
  uint64_t v26 = type metadata accessor for Logger(0LL);
  sub_10000A720(v26, (uint64_t)qword_100A2A8F8);
  uint64_t v27 = sub_100013044((uint64_t)v57, (uint64_t)v54);
  unint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
  os_log_type_t v29 = static os_log_type_t.default.getter(v28);
  if (os_log_type_enabled(v28, v29))
  {
    uint64_t v30 = swift_slowAlloc(22LL, -1LL);
    uint64_t v31 = swift_slowAlloc(32LL, -1LL);
    uint64_t v49 = v31;
    *(_DWORD *)uint64_t v30 = 141558275;
    uint64_t v52 = 1752392040LL;
    uint64_t v53 = v31;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v30 + 4, v30 + 12);
    *(_WORD *)(v30 + 12) = 2081;
    uint64_t v48 = v30 + 14;
    uint64_t v50 = v14;
    uint64_t v32 = v2;
    uint64_t v33 = v55;
    uint64_t v34 = v56;
    sub_100012ED8(v54, v55);
    uint64_t v35 = v51;
    dispatch thunk of FMNRequestConfigurating.urlComponents.getter(v33, v34);
    uint64_t v36 = sub_100007864( &qword_1009A4D08,  (uint64_t (*)(uint64_t))&type metadata accessor for URLComponents,  (uint64_t)&protocol conformance descriptor for URLComponents);
    uint64_t v37 = dispatch thunk of CustomStringConvertible.description.getter(v32, v36);
    unint64_t v39 = v38;
    uint64_t v40 = v32;
    uint64_t v14 = v50;
    (*(void (**)(char *, uint64_t))(v3 + 8))(v35, v40);
    uint64_t v52 = sub_1003F11D4(v37, v39, &v53);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v52, &v53, v48, v30 + 22);
    swift_bridgeObjectRelease();
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v54);
    _os_log_impl( (void *)&_mh_execute_header,  v28,  v29,  "Lost Mode endpoint: %{private,mask.hash}s",  (uint8_t *)v30,  0x16u);
    uint64_t v41 = v49;
    swift_arrayDestroy(v49, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v41, -1LL, -1LL);
    swift_slowDealloc(v30, -1LL, -1LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v54);
  }

  uint64_t v42 = type metadata accessor for ServerInteractionController(0LL);
  sub_100013044((uint64_t)v57, (uint64_t)v54);
  uint64_t v43 = v55;
  uint64_t v44 = v56;
  uint64_t v45 = sub_100037298((uint64_t)v54, v55);
  swift_retain();
  uint64_t v46 = sub_1001BAA30(v45, v14, v42, v43, v44);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v54);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v57);
  return v46;
}

uint64_t sub_1003E8164(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  int v118 = a2;
  uint64_t v130 = type metadata accessor for UUID(0LL);
  uint64_t v127 = *(void *)(v130 - 8);
  uint64_t v9 = __chkstk_darwin(v130);
  __int128 v126 = (char *)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v116 = (char *)&v114 - v11;
  uint64_t v122 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v122);
  uint64_t v123 = (uint64_t)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v114 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v120 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v119 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  uint64_t v128 = (uint64_t)&v114 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for LostModeRecord(0LL);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v117 = (uint64_t)&v114 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v121 = (uint64_t)&v114 - v20;
  uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v114 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v114 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = swift_allocObject(&unk_100957340, 32LL, 7LL);
  *(void *)(v28 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v28 + 24) = a5;
  uint64_t v132 = v28;
  uint64_t v124 = a3;
  uint64_t v131 = (int *)v17;
  uint64_t v29 = *(int *)(v17 + 24);
  uint64_t v133 = (uint8_t *)a1;
  uint64_t v30 = a1 + v29;
  uint64_t v129 = a4;
  swift_retain();
  uint64_t v31 = a5;
  sub_100504F30(v30, (uint64_t)v23);
  uint64_t v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  uint64_t v125 = v24;
  if (v32(v23, 1LL, v24) != 1)
  {
    uint64_t v128 = v30;
    sub_10002218C((uint64_t)v23, (uint64_t)v27, type metadata accessor for OwnedBeaconRecord);
    uint64_t v46 = v27;
    if (qword_10099B3F0 != -1) {
      swift_once(&qword_10099B3F0, sub_1003E4B1C);
    }
    uint64_t v47 = type metadata accessor for Logger(0LL);
    sub_10000A720(v47, (uint64_t)qword_100A2A8F8);
    uint64_t v48 = v121;
    uint64_t v49 = sub_10001DC4C((uint64_t)v133, v121, type metadata accessor for LostModeRecord);
    uint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = static os_log_type_t.default.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = swift_slowAlloc(22LL, -1LL);
      uint64_t v53 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v136 = v53;
      *(_DWORD *)uint64_t v52 = 141558275;
      *(void *)&v134[0] = 1752392040LL;
      uint64_t v115 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v134, (char *)v134 + 8, v52 + 4, v52 + 12);
      *(_WORD *)(v52 + 12) = 2081;
      uint64_t v54 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter(v130, v54);
      *(void *)&v134[0] = sub_1003F11D4(v55, v56, (uint64_t *)&v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v134, (char *)v134 + 8, v52 + 14, v52 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v48, type metadata accessor for LostModeRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v50,  v51,  "updateLostModeServer for beacon %{private,mask.hash}s",  (uint8_t *)v52,  0x16u);
      swift_arrayDestroy(v53, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1LL, -1LL);
      swift_slowDealloc(v52, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(v48, type metadata accessor for LostModeRecord);
    }

    uint64_t v72 = v123;
    sub_10001DC4C((uint64_t)&v46[*(int *)(v125 + 24)], v123, type metadata accessor for StableIdentifier);
    uint64_t v73 = (char *)&loc_1003E89F4 + 4 * word_1007FFA3A[swift_getEnumCaseMultiPayload(v72, v122)];
    __asm { BR              X10 }
  }

  sub_100015794((uint64_t)v23, (uint64_t *)&unk_1009A9C30);
  sub_10050F124(v30, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v15, 1LL, v120) == 1)
  {
    uint64_t v33 = sub_100015794((uint64_t)v15, &qword_1009AA830);
    uint64_t v34 = static os_log_type_t.error.getter(v33);
    if (qword_10099B778 != -1) {
      swift_once(&qword_10099B778, sub_1006516DC);
    }
    uint64_t v35 = qword_100A2B088;
    uint64_t v36 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v37 = swift_allocObject(v36, 72LL, 7LL);
    *(_OWORD *)(v37 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v38 = UUID.uuidString.getter(v37);
    uint64_t v40 = v39;
    *(void *)(v37 + 56) = &type metadata for String;
    *(void *)(v37 + 64) = sub_1000226F4();
    *(void *)(v37 + 32) = v38;
    *(void *)(v37 + 40) = v40;
    os_log(_:dso:log:_:_:)( v34,  &_mh_execute_header,  v35,  "updateLostModeServer: beacon/group not found!",  45LL,  2LL,  v37);
    swift_bridgeObjectRelease();
    unint64_t v41 = sub_1003EBF14();
    uint64_t v42 = swift_allocError(&_s13LostModeErrorON, v41, 0LL, 0LL);
    *uint64_t v43 = 1;
    uint64_t v44 = v129;
    swift_beginAccess(v129 + 16, &v136, 1LL, 0LL);
    uint64_t v45 = *(void *)(v44 + 16);
    *(void *)(v44 + swift_weakDestroy(v0 + 16) = v42;
    swift_errorRetain(v42);
    swift_errorRelease(v45);
    dispatch_group_leave(v31);
    swift_errorRelease(v42);
  }

  else
  {
    sub_10002218C((uint64_t)v15, v128, type metadata accessor for OwnedBeaconGroup);
    if (qword_10099B3F0 != -1) {
      swift_once(&qword_10099B3F0, sub_1003E4B1C);
    }
    uint64_t v57 = type metadata accessor for Logger(0LL);
    uint64_t v58 = sub_10000A720(v57, (uint64_t)qword_100A2A8F8);
    uint64_t v59 = v117;
    uint64_t v60 = sub_10001DC4C((uint64_t)v133, v117, type metadata accessor for LostModeRecord);
    uint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
    os_log_type_t v62 = static os_log_type_t.default.getter(v61);
    BOOL v63 = os_log_type_enabled(v61, v62);
    uint64_t v64 = v130;
    uint64_t v115 = v31;
    if (v63)
    {
      uint64_t v65 = swift_slowAlloc(22LL, -1LL);
      uint64_t v66 = swift_slowAlloc(32LL, -1LL);
      uint64_t v127 = v58;
      uint64_t v67 = v66;
      *(void *)&__int128 v136 = v66;
      *(_DWORD *)uint64_t v65 = 141558275;
      *(void *)&v134[0] = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v134, (char *)v134 + 8, v65 + 4, v65 + 12);
      *(_WORD *)(v65 + 12) = 2081;
      uint64_t v68 = v131;
      uint64_t v69 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter(v64, v69);
      *(void *)&v134[0] = sub_1003F11D4(v70, v71, (uint64_t *)&v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v134, (char *)v134 + 8, v65 + 14, v65 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v59, type metadata accessor for LostModeRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v61,  v62,  "updateLostModeServer for group %{private,mask.hash}s",  (uint8_t *)v65,  0x16u);
      swift_arrayDestroy(v67, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1LL, -1LL);
      swift_slowDealloc(v65, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(v59, type metadata accessor for LostModeRecord);

      uint64_t v68 = v131;
    }

    uint64_t v74 = v128;
    sub_1001CC778();
    uint64_t v76 = v75;
    uint64_t v77 = v124;
    swift_retain();
    sub_1003E7760(v76, v77);
    uint64_t v79 = v78;
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v80 = &v133[v68[9]];
    uint64_t v81 = *(void *)v80;
    uint64_t v82 = *((void *)v80 + 1);
    id v83 = &v133[v68[7]];
    uint64_t v84 = *(void *)v83;
    uint64_t v85 = *((void *)v83 + 1);
    uint64_t v86 = &v133[v68[8]];
    uint64_t v87 = *(void *)v86;
    uint64_t v88 = *((void *)v86 + 1);
    __int128 v136 = xmmword_1007FFA20;
    *(void *)&__int128 v137 = v81;
    *((void *)&v137 + 1) = v82;
    *(void *)&__int128 v138 = v84;
    *((void *)&v138 + 1) = v85;
    *(void *)&__int128 v139 = v87;
    *((void *)&v139 + 1) = v88;
    LOBYTE(v140) = v118 & 1;
    *((void *)&v140 + 1) = v79;
    swift_bridgeObjectRetain_n(v88, 3LL);
    swift_bridgeObjectRetain_n(v79, 2LL);
    swift_bridgeObjectRetain_n(0xE900000000000065LL, 2LL);
    swift_bridgeObjectRetain_n(v82, 3LL);
    swift_bridgeObjectRetain_n(v85, 3LL);
    uint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
    os_log_type_t v91 = static os_log_type_t.info.getter(v90);
    if (os_log_type_enabled(v90, v91))
    {
      unint64_t v92 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v93 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)unint64_t v92 = 136315138;
      uint64_t v135 = v93;
      uint64_t v133 = v92 + 4;
      v134[2] = v138;
      v134[3] = v139;
      v134[4] = v140;
      v134[1] = v137;
      v134[0] = v136;
      swift_bridgeObjectRetain(0xE900000000000065LL);
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRetain(v85);
      swift_bridgeObjectRetain(v88);
      swift_bridgeObjectRetain(v79);
      uint64_t v94 = String.init<A>(describing:)(v134, &type metadata for AirPodsLostModeContent);
      *(void *)&v134[0] = sub_1003F11D4(v94, v95, &v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v134, (char *)v134 + 8, v133, v92 + 12);
      swift_bridgeObjectRelease_n(v79, 2LL);
      swift_bridgeObjectRelease_n(v88, 2LL);
      swift_bridgeObjectRelease_n(v85, 2LL);
      swift_bridgeObjectRelease_n(v82, 2LL);
      swift_bridgeObjectRelease_n(0xE900000000000065LL, 2LL);
      uint64_t v74 = v128;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v90, v91, "AirPodsLostModeContent: %s", v92, 0xCu);
      swift_arrayDestroy(v93, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v93, -1LL, -1LL);
      swift_slowDealloc(v92, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v79, 2LL);
      swift_bridgeObjectRelease_n(v88, 2LL);
      swift_bridgeObjectRelease_n(v85, 2LL);
      swift_bridgeObjectRelease_n(v82, 2LL);
      swift_bridgeObjectRelease_n(0xE900000000000065LL, 2LL);
    }

    uint64_t v96 = v132;
    uint64_t v97 = v115;
    sub_1005DFB28((uint64_t)&v136);
    if (v98)
    {
      uint64_t v101 = v98;
      uint64_t v102 = v99;
      unint64_t v103 = v100;
      swift_bridgeObjectRetain(v98);
      sub_10001736C(v102, v103);
      uint64_t v104 = (void *)sub_1003E7BE0(2);
      sub_100439748(v101, v102, v103, v104);
      swift_release();
      uint64_t v105 = swift_allocObject(&unk_100957368, 32LL, 7LL);
      *(void *)(v105 + swift_weakDestroy(v0 + 16) = sub_1002DD7C8;
      *(void *)(v105 + 24) = v96;
      swift_retain();
      Future.addFailure(block:)(sub_1003EC160, v105);
      swift_release();
      swift_release();
      uint64_t v106 = (void *)swift_allocObject(&unk_100957390, 40LL, 7LL);
      v106[2] = v124;
      v106[3] = sub_1002DD7C8;
      v106[4] = v96;
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)(sub_1003EC16C, v106);
      swift_release();
      swift_release();
      swift_release();
      sub_100117A58(v101, v102, v103);
      sub_100018C68(v74, type metadata accessor for OwnedBeaconGroup);
      sub_100117A58(v101, v102, v103);
    }

    else
    {
      uint64_t v107 = static os_log_type_t.error.getter(0LL);
      if (qword_10099B778 != -1) {
        swift_once(&qword_10099B778, sub_1006516DC);
      }
      os_log(_:dso:log:_:_:)( v107,  &_mh_execute_header,  qword_100A2B088,  "Unable to init LostModeRequest.",  31LL,  2LL,  _swiftEmptyArrayStorage);
      unint64_t v108 = sub_1001B25CC();
      uint64_t v109 = swift_allocError(&type metadata for BeaconManagerCommandError, v108, 0LL, 0LL);
      *uint64_t v110 = 0;
      uint64_t v111 = v129;
      swift_beginAccess(v129 + 16, v134, 1LL, 0LL);
      uint64_t v112 = *(void *)(v111 + 16);
      *(void *)(v111 + swift_weakDestroy(v0 + 16) = v109;
      swift_errorRetain(v109);
      swift_errorRelease(v112);
      dispatch_group_leave(v97);
      swift_errorRelease(v109);
      sub_100018C68(v74, type metadata accessor for OwnedBeaconGroup);
    }
  }

  return swift_release();
}

uint64_t sub_1003E9748( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, uint64_t a9)
{
  uint64_t v89 = a7;
  uint64_t v90 = a8;
  uint64_t v83 = a2;
  uint64_t v84 = a6;
  uint64_t v86 = a3;
  uint64_t v82 = a9;
  uint64_t v12 = sub_100004AEC(&qword_1009A7F18);
  __chkstk_darwin(v12);
  uint64_t v88 = (uint64_t *)((char *)&v77 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v14 = type metadata accessor for LostModeRecord(0LL);
  uint64_t v77 = *(void *)(v14 - 8);
  uint64_t v15 = __chkstk_darwin(v14);
  uint64_t v79 = v16;
  uint64_t v80 = (uint64_t)&v77 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = __chkstk_darwin(v15);
  uint64_t v19 = (char *)&v77 - v18;
  uint64_t v20 = static os_log_type_t.default.getter(v17);
  if (qword_10099B778 != -1) {
    swift_once(&qword_10099B778, sub_1006516DC);
  }
  uint64_t v21 = qword_100A2B088;
  uint64_t v87 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v22 = swift_allocObject(v87, 72LL, 7LL);
  __int128 v81 = xmmword_1007E67D0;
  *(_OWORD *)(v22 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  sub_10001DC4C(a1, (uint64_t)v19, type metadata accessor for LostModeRecord);
  uint64_t v78 = v19;
  uint64_t v23 = String.init<A>(describing:)(v19, v14);
  uint64_t v25 = v24;
  *(void *)(v22 + 56) = &type metadata for String;
  unint64_t v85 = sub_1000226F4();
  *(void *)(v22 + 64) = v85;
  *(void *)(v22 + 32) = v23;
  *(void *)(v22 + 40) = v25;
  os_log(_:dso:log:_:_:)(v20, &_mh_execute_header, v21, "Updating existing lost mode record %@.", 38LL, 2LL, v22);
  swift_bridgeObjectRelease();
  uint64_t v26 = dispatch_group_create();
  dispatch_group_enter(v26);
  uint64_t v27 = swift_allocBox(v12);
  uint64_t v29 = v28;
  unint64_t v30 = sub_1003EBF14();
  uint64_t v31 = swift_allocError(&_s13LostModeErrorON, v30, 0LL, 0LL);
  *uint64_t v32 = 8;
  *uint64_t v29 = v31;
  swift_storeEnumTagMultiPayload(v29, v12, 1LL);
  uint64_t v33 = *(void *)(v90 + 256);
  uint64_t v34 = (void *)swift_allocObject(&unk_1009572A0, 64LL, 7LL);
  v34[2] = a4;
  v34[3] = a5;
  uint64_t v35 = v84;
  uint64_t v84 = v12;
  uint64_t v36 = a5;
  uint64_t v37 = v89;
  v34[4] = v35;
  v34[5] = v37;
  uint64_t v38 = v86;
  v34[6] = v83;
  v34[7] = v38;
  uint64_t v39 = swift_allocObject(&unk_1009572C8, 32LL, 7LL);
  *(void *)(v39 + swift_weakDestroy(v0 + 16) = v27;
  *(void *)(v39 + 24) = v26;
  swift_bridgeObjectRetain(v38);
  uint64_t v86 = v27;
  swift_retain();
  uint64_t v40 = v26;
  swift_bridgeObjectRetain(v36);
  swift_bridgeObjectRetain(v37);
  uint64_t v41 = a1;
  uint64_t v89 = v33;
  sub_1002B4120( a1,  0,  (void (*)(uint64_t))sub_1003EBF8C,  (uint64_t)v34,  sub_1003EBFA0,  (void (*)(uint64_t))v39);
  swift_release();
  swift_release();
  OS_dispatch_group.wait()();
  swift_beginAccess(v29, v93, 0LL, 0LL);
  uint64_t v42 = v88;
  sub_1003EBFB8((uint64_t)v29, (uint64_t)v88);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v42, v84);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v44 = *v42;
    uint64_t v45 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    uint64_t v46 = qword_100A2B088;
    uint64_t v47 = swift_allocObject(v87, 72LL, 7LL);
    *(_OWORD *)(v47 + swift_weakDestroy(v0 + 16) = v81;
    v92[0] = v44;
    swift_errorRetain(v44);
    uint64_t v48 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v49 = String.init<A>(describing:)(v92, v48);
    unint64_t v50 = v85;
    *(void *)(v47 + 56) = &type metadata for String;
    *(void *)(v47 + 64) = v50;
    *(void *)(v47 + 32) = v49;
    *(void *)(v47 + 40) = v51;
    os_log(_:dso:log:_:_:)(v45, &_mh_execute_header, v46, "Unable to update LostModeRecord due to %@", 41LL, 2LL, v47);
    swift_bridgeObjectRelease();
    swift_errorRetain(v44);
    uint64_t v52 = (void *)_convertErrorToNSError(_:)(v44);
    (*(void (**)(uint64_t, void *))(v82 + 16))(v82, v52);

    swift_errorRelease(v44);
    swift_errorRelease(v44);
  }

  else
  {
    uint64_t v53 = v87;
    unint64_t v54 = v85;
    uint64_t v55 = v80;
    uint64_t v56 = sub_10002218C((uint64_t)v42, v80, type metadata accessor for LostModeRecord);
    uint64_t v57 = static os_log_type_t.default.getter(v56);
    os_log(_:dso:log:_:_:)( v57,  &_mh_execute_header,  qword_100A2B088,  "Successfully updated LostModeRecord.",  36LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v58 = swift_allocObject(&unk_1009572F0, 24LL, 7LL);
    *(void *)(v58 + swift_weakDestroy(v0 + 16) = 0LL;
    dispatch_group_enter(v40);
    uint64_t v59 = v40;
    swift_retain();
    sub_1003E8164(v55, 1, v90, v58, v59);

    swift_release();
    OS_dispatch_group.wait()();
    swift_beginAccess(v58 + 16, v92, 0LL, 0LL);
    uint64_t v61 = *(void *)(v58 + 16);
    if (v61)
    {
      uint64_t v62 = swift_errorRetain(v61);
      uint64_t v63 = static os_log_type_t.error.getter(v62);
      uint64_t v64 = qword_100A2B088;
      uint64_t v65 = swift_allocObject(v53, 72LL, 7LL);
      *(_OWORD *)(v65 + swift_weakDestroy(v0 + 16) = v81;
      uint64_t v91 = v61;
      swift_errorRetain(v61);
      uint64_t v66 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v67 = String.init<A>(describing:)(&v91, v66);
      *(void *)(v65 + 56) = &type metadata for String;
      *(void *)(v65 + 64) = v54;
      *(void *)(v65 + 32) = v67;
      *(void *)(v65 + 40) = v68;
      os_log(_:dso:log:_:_:)( v63,  &_mh_execute_header,  v64,  "updateLostModeServer failed - %@. Reverting CK changes",  54LL,  2LL,  v65);
      swift_bridgeObjectRelease();
      dispatch_group_enter(v59);
      uint64_t v69 = v41;
      uint64_t v70 = (uint64_t)v78;
      sub_10001DC4C(v69, (uint64_t)v78, type metadata accessor for LostModeRecord);
      uint64_t v71 = *(unsigned __int8 *)(v77 + 80);
      uint64_t v72 = (v71 + 16) & ~v71;
      uint64_t v73 = swift_allocObject(&unk_100957318, v72 + v79, v71 | 7);
      sub_10002218C(v70, v73 + v72, type metadata accessor for LostModeRecord);
      uint64_t v59 = v59;
      sub_100552D38(v55, 0, (void (*)(uint64_t))sub_1003EC0FC, v73, v89, v59);
      swift_release();

      OS_dispatch_group.wait()();
      swift_errorRetain(v61);
      uint64_t v74 = (void *)_convertErrorToNSError(_:)(v61);
      (*(void (**)(uint64_t, void *))(v82 + 16))(v82, v74);

      swift_errorRelease(v61);
      swift_errorRelease(v61);
    }

    else
    {
      uint64_t v75 = static os_log_type_t.default.getter(v60);
      os_log(_:dso:log:_:_:)( v75,  &_mh_execute_header,  qword_100A2B088,  "updateLostModeServer succeeded",  30LL,  2LL,  _swiftEmptyArrayStorage);
      sub_1004E696C(0xEu);
      (*(void (**)(uint64_t, void))(v82 + 16))(v82, 0LL);
    }

    sub_100018C68(v55, type metadata accessor for LostModeRecord);
    swift_release();
  }

  return swift_release();
}

uint64_t sub_1003E9E20(uint64_t a1, int a2, uint64_t a3, uint64_t a4, void *a5)
{
  int v118 = a2;
  uint64_t v130 = type metadata accessor for UUID(0LL);
  uint64_t v127 = *(void *)(v130 - 8);
  uint64_t v9 = __chkstk_darwin(v130);
  __int128 v126 = (char *)&v114 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v9);
  uint64_t v116 = (char *)&v114 - v11;
  uint64_t v122 = type metadata accessor for StableIdentifier(0LL);
  __chkstk_darwin(v122);
  uint64_t v123 = (uint64_t)&v114 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v13 = sub_100004AEC(&qword_1009AA830);
  __chkstk_darwin(v13);
  uint64_t v15 = (char *)&v114 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v120 = type metadata accessor for OwnedBeaconGroup(0LL);
  uint64_t v119 = *(void *)(v120 - 8);
  __chkstk_darwin(v120);
  uint64_t v128 = (uint64_t)&v114 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v17 = type metadata accessor for LostModeRecord(0LL);
  uint64_t v18 = __chkstk_darwin(v17);
  uint64_t v117 = (uint64_t)&v114 - ((v19 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v18);
  uint64_t v121 = (uint64_t)&v114 - v20;
  uint64_t v21 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  __chkstk_darwin(v21);
  uint64_t v23 = (char *)&v114 - ((v22 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v24 = type metadata accessor for OwnedBeaconRecord(0LL);
  uint64_t v25 = *(void *)(v24 - 8);
  __chkstk_darwin(v24);
  uint64_t v27 = (char *)&v114 - ((v26 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v28 = swift_allocObject(&unk_100957548, 32LL, 7LL);
  *(void *)(v28 + swift_weakDestroy(v0 + 16) = a4;
  *(void *)(v28 + 24) = a5;
  uint64_t v132 = v28;
  uint64_t v124 = a3;
  uint64_t v131 = (int *)v17;
  uint64_t v29 = *(int *)(v17 + 24);
  uint64_t v133 = (uint8_t *)a1;
  uint64_t v30 = a1 + v29;
  uint64_t v129 = a4;
  swift_retain();
  uint64_t v31 = a5;
  sub_100504F30(v30, (uint64_t)v23);
  uint64_t v32 = *(unsigned int (**)(char *, uint64_t, uint64_t))(v25 + 48);
  uint64_t v125 = v24;
  if (v32(v23, 1LL, v24) != 1)
  {
    uint64_t v128 = v30;
    sub_10002218C((uint64_t)v23, (uint64_t)v27, type metadata accessor for OwnedBeaconRecord);
    uint64_t v46 = v27;
    if (qword_10099B3F0 != -1) {
      swift_once(&qword_10099B3F0, sub_1003E4B1C);
    }
    uint64_t v47 = type metadata accessor for Logger(0LL);
    sub_10000A720(v47, (uint64_t)qword_100A2A8F8);
    uint64_t v48 = v121;
    uint64_t v49 = sub_10001DC4C((uint64_t)v133, v121, type metadata accessor for LostModeRecord);
    unint64_t v50 = (os_log_s *)Logger.logObject.getter(v49);
    os_log_type_t v51 = static os_log_type_t.default.getter(v50);
    if (os_log_type_enabled(v50, v51))
    {
      uint64_t v52 = swift_slowAlloc(22LL, -1LL);
      uint64_t v53 = swift_slowAlloc(32LL, -1LL);
      *(void *)&__int128 v136 = v53;
      *(_DWORD *)uint64_t v52 = 141558275;
      *(void *)&v134[0] = 1752392040LL;
      uint64_t v115 = v31;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v134, (char *)v134 + 8, v52 + 4, v52 + 12);
      *(_WORD *)(v52 + 12) = 2081;
      uint64_t v54 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter(v130, v54);
      *(void *)&v134[0] = sub_1003F11D4(v55, v56, (uint64_t *)&v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v134, (char *)v134 + 8, v52 + 14, v52 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v48, type metadata accessor for LostModeRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v50,  v51,  "updateLostModeServer for beacon %{private,mask.hash}s",  (uint8_t *)v52,  0x16u);
      swift_arrayDestroy(v53, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v53, -1LL, -1LL);
      swift_slowDealloc(v52, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(v48, type metadata accessor for LostModeRecord);
    }

    uint64_t v72 = v123;
    sub_10001DC4C((uint64_t)&v46[*(int *)(v125 + 24)], v123, type metadata accessor for StableIdentifier);
    uint64_t v73 = (char *)&loc_1003EA6B0 + 4 * word_1007FFA44[swift_getEnumCaseMultiPayload(v72, v122)];
    __asm { BR              X10 }
  }

  sub_100015794((uint64_t)v23, (uint64_t *)&unk_1009A9C30);
  sub_10050F124(v30, (uint64_t)v15);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v119 + 48))(v15, 1LL, v120) == 1)
  {
    uint64_t v33 = sub_100015794((uint64_t)v15, &qword_1009AA830);
    uint64_t v34 = static os_log_type_t.error.getter(v33);
    if (qword_10099B778 != -1) {
      swift_once(&qword_10099B778, sub_1006516DC);
    }
    uint64_t v35 = qword_100A2B088;
    uint64_t v36 = sub_100004AEC((uint64_t *)&unk_10099D740);
    uint64_t v37 = swift_allocObject(v36, 72LL, 7LL);
    *(_OWORD *)(v37 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
    uint64_t v38 = UUID.uuidString.getter(v37);
    uint64_t v40 = v39;
    *(void *)(v37 + 56) = &type metadata for String;
    *(void *)(v37 + 64) = sub_1000226F4();
    *(void *)(v37 + 32) = v38;
    *(void *)(v37 + 40) = v40;
    os_log(_:dso:log:_:_:)( v34,  &_mh_execute_header,  v35,  "updateLostModeServer: beacon/group not found!",  45LL,  2LL,  v37);
    swift_bridgeObjectRelease();
    unint64_t v41 = sub_1003EBF14();
    uint64_t v42 = swift_allocError(&_s13LostModeErrorON, v41, 0LL, 0LL);
    *uint64_t v43 = 1;
    uint64_t v44 = v129;
    swift_beginAccess(v129 + 16, &v136, 1LL, 0LL);
    uint64_t v45 = *(void *)(v44 + 16);
    *(void *)(v44 + swift_weakDestroy(v0 + 16) = v42;
    swift_errorRetain(v42);
    swift_errorRelease(v45);
    dispatch_group_leave(v31);
    swift_errorRelease(v42);
  }

  else
  {
    sub_10002218C((uint64_t)v15, v128, type metadata accessor for OwnedBeaconGroup);
    if (qword_10099B3F0 != -1) {
      swift_once(&qword_10099B3F0, sub_1003E4B1C);
    }
    uint64_t v57 = type metadata accessor for Logger(0LL);
    uint64_t v58 = sub_10000A720(v57, (uint64_t)qword_100A2A8F8);
    uint64_t v59 = v117;
    uint64_t v60 = sub_10001DC4C((uint64_t)v133, v117, type metadata accessor for LostModeRecord);
    uint64_t v61 = (os_log_s *)Logger.logObject.getter(v60);
    os_log_type_t v62 = static os_log_type_t.default.getter(v61);
    BOOL v63 = os_log_type_enabled(v61, v62);
    uint64_t v64 = v130;
    uint64_t v115 = v31;
    if (v63)
    {
      uint64_t v65 = swift_slowAlloc(22LL, -1LL);
      uint64_t v66 = swift_slowAlloc(32LL, -1LL);
      uint64_t v127 = v58;
      uint64_t v67 = v66;
      *(void *)&__int128 v136 = v66;
      *(_DWORD *)uint64_t v65 = 141558275;
      *(void *)&v134[0] = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v134, (char *)v134 + 8, v65 + 4, v65 + 12);
      *(_WORD *)(v65 + 12) = 2081;
      uint64_t v68 = v131;
      uint64_t v69 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v70 = dispatch thunk of CustomStringConvertible.description.getter(v64, v69);
      *(void *)&v134[0] = sub_1003F11D4(v70, v71, (uint64_t *)&v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v134, (char *)v134 + 8, v65 + 14, v65 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v59, type metadata accessor for LostModeRecord);
      _os_log_impl( (void *)&_mh_execute_header,  v61,  v62,  "updateLostModeServer for group %{private,mask.hash}s",  (uint8_t *)v65,  0x16u);
      swift_arrayDestroy(v67, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v67, -1LL, -1LL);
      swift_slowDealloc(v65, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(v59, type metadata accessor for LostModeRecord);

      uint64_t v68 = v131;
    }

    uint64_t v74 = v128;
    sub_1001CC778();
    uint64_t v76 = v75;
    uint64_t v77 = v124;
    swift_retain();
    sub_1003E7760(v76, v77);
    uint64_t v79 = v78;
    swift_bridgeObjectRelease();
    swift_release();
    uint64_t v80 = &v133[v68[9]];
    uint64_t v81 = *(void *)v80;
    uint64_t v82 = *((void *)v80 + 1);
    uint64_t v83 = &v133[v68[7]];
    uint64_t v84 = *(void *)v83;
    uint64_t v85 = *((void *)v83 + 1);
    uint64_t v86 = &v133[v68[8]];
    uint64_t v87 = *(void *)v86;
    uint64_t v88 = *((void *)v86 + 1);
    __int128 v136 = xmmword_1007FFA20;
    *(void *)&__int128 v137 = v81;
    *((void *)&v137 + 1) = v82;
    *(void *)&__int128 v138 = v84;
    *((void *)&v138 + 1) = v85;
    *(void *)&__int128 v139 = v87;
    *((void *)&v139 + 1) = v88;
    LOBYTE(v140) = v118 & 1;
    *((void *)&v140 + 1) = v79;
    swift_bridgeObjectRetain_n(v88, 3LL);
    swift_bridgeObjectRetain_n(v79, 2LL);
    swift_bridgeObjectRetain_n(0xE900000000000065LL, 2LL);
    swift_bridgeObjectRetain_n(v82, 3LL);
    swift_bridgeObjectRetain_n(v85, 3LL);
    uint64_t v90 = (os_log_s *)Logger.logObject.getter(v89);
    os_log_type_t v91 = static os_log_type_t.info.getter(v90);
    if (os_log_type_enabled(v90, v91))
    {
      unint64_t v92 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v93 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)unint64_t v92 = 136315138;
      uint64_t v135 = v93;
      uint64_t v133 = v92 + 4;
      v134[2] = v138;
      v134[3] = v139;
      v134[4] = v140;
      v134[1] = v137;
      v134[0] = v136;
      swift_bridgeObjectRetain(0xE900000000000065LL);
      swift_bridgeObjectRetain(v82);
      swift_bridgeObjectRetain(v85);
      swift_bridgeObjectRetain(v88);
      swift_bridgeObjectRetain(v79);
      uint64_t v94 = String.init<A>(describing:)(v134, &type metadata for AirPodsLostModeContent);
      *(void *)&v134[0] = sub_1003F11D4(v94, v95, &v135);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v134, (char *)v134 + 8, v133, v92 + 12);
      swift_bridgeObjectRelease_n(v79, 2LL);
      swift_bridgeObjectRelease_n(v88, 2LL);
      swift_bridgeObjectRelease_n(v85, 2LL);
      swift_bridgeObjectRelease_n(v82, 2LL);
      swift_bridgeObjectRelease_n(0xE900000000000065LL, 2LL);
      uint64_t v74 = v128;
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v90, v91, "AirPodsLostModeContent: %s", v92, 0xCu);
      swift_arrayDestroy(v93, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v93, -1LL, -1LL);
      swift_slowDealloc(v92, -1LL, -1LL);
    }

    else
    {

      swift_bridgeObjectRelease_n(v79, 2LL);
      swift_bridgeObjectRelease_n(v88, 2LL);
      swift_bridgeObjectRelease_n(v85, 2LL);
      swift_bridgeObjectRelease_n(v82, 2LL);
      swift_bridgeObjectRelease_n(0xE900000000000065LL, 2LL);
    }

    uint64_t v96 = v132;
    uint64_t v97 = v115;
    sub_1005DFB28((uint64_t)&v136);
    if (v98)
    {
      uint64_t v101 = v98;
      uint64_t v102 = v99;
      unint64_t v103 = v100;
      swift_bridgeObjectRetain(v98);
      sub_10001736C(v102, v103);
      uint64_t v104 = (void *)sub_1003E7BE0(2);
      sub_100439748(v101, v102, v103, v104);
      swift_release();
      uint64_t v105 = swift_allocObject(&unk_100957570, 32LL, 7LL);
      *(void *)(v105 + swift_weakDestroy(v0 + 16) = sub_1002DDFF4;
      *(void *)(v105 + 24) = v96;
      swift_retain();
      Future.addFailure(block:)(sub_1003ECDFC, v105);
      swift_release();
      swift_release();
      uint64_t v106 = (void *)swift_allocObject(&unk_100957598, 40LL, 7LL);
      v106[2] = v124;
      v106[3] = sub_1002DDFF4;
      v106[4] = v96;
      swift_retain();
      swift_retain();
      Future.addSuccess(block:)(sub_1003ECDD4, v106);
      swift_release();
      swift_release();
      swift_release();
      sub_100117A58(v101, v102, v103);
      sub_100018C68(v74, type metadata accessor for OwnedBeaconGroup);
      sub_100117A58(v101, v102, v103);
    }

    else
    {
      uint64_t v107 = static os_log_type_t.error.getter(0LL);
      if (qword_10099B778 != -1) {
        swift_once(&qword_10099B778, sub_1006516DC);
      }
      os_log(_:dso:log:_:_:)( v107,  &_mh_execute_header,  qword_100A2B088,  "Unable to init LostModeRequest.",  31LL,  2LL,  _swiftEmptyArrayStorage);
      unint64_t v108 = sub_1001B25CC();
      uint64_t v109 = swift_allocError(&type metadata for BeaconManagerCommandError, v108, 0LL, 0LL);
      *uint64_t v110 = 0;
      uint64_t v111 = v129;
      swift_beginAccess(v129 + 16, v134, 1LL, 0LL);
      uint64_t v112 = *(void *)(v111 + 16);
      *(void *)(v111 + swift_weakDestroy(v0 + 16) = v109;
      swift_errorRetain(v109);
      swift_errorRelease(v112);
      dispatch_group_leave(v97);
      swift_errorRelease(v109);
      sub_100018C68(v74, type metadata accessor for OwnedBeaconGroup);
    }
  }

  return swift_release();
}

uint64_t sub_1003EB404(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v68 = a3;
  uint64_t v70 = a2;
  uint64_t v4 = sub_100004AEC(&qword_1009A7F18);
  __chkstk_darwin(v4);
  uint64_t v6 = (uint64_t *)((char *)&v63 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v7 = type metadata accessor for LostModeRecord(0LL);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v67 = (uint64_t)&v63 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v63 - v11;
  uint64_t v13 = static os_log_type_t.default.getter(v10);
  if (qword_10099B778 != -1) {
    swift_once(&qword_10099B778, sub_1006516DC);
  }
  uint64_t v14 = qword_100A2B088;
  uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v16 = swift_allocObject(v15, 72LL, 7LL);
  __int128 v69 = xmmword_1007E67D0;
  *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  sub_10001DC4C(a1, (uint64_t)v12, type metadata accessor for LostModeRecord);
  uint64_t v65 = v12;
  uint64_t v66 = v7;
  uint64_t v17 = String.init<A>(describing:)(v12, v7);
  uint64_t v19 = v18;
  *(void *)(v16 + 56) = &type metadata for String;
  unint64_t v20 = sub_1000226F4();
  *(void *)(v16 + 64) = v20;
  *(void *)(v16 + 32) = v17;
  *(void *)(v16 + 40) = v19;
  os_log(_:dso:log:_:_:)(v13, &_mh_execute_header, v14, "Saving new LostModeRecord %@.", 29LL, 2LL, v16);
  swift_bridgeObjectRelease();
  uint64_t v21 = dispatch_group_create();
  dispatch_group_enter(v21);
  uint64_t v22 = swift_allocBox(v4);
  uint64_t v24 = v23;
  unint64_t v25 = sub_1003EBF14();
  uint64_t v26 = swift_allocError(&_s13LostModeErrorON, v25, 0LL, 0LL);
  *uint64_t v27 = 8;
  *uint64_t v24 = v26;
  swift_storeEnumTagMultiPayload(v24, v4, 1LL);
  uint64_t v28 = *(void *)(v70 + 256);
  uint64_t v29 = v21;
  sub_1005533C4(a1, 0, v28, v22, v29);

  OS_dispatch_group.wait()();
  swift_beginAccess(v24, v73, 0LL, 0LL);
  sub_1003EBFB8((uint64_t)v24, (uint64_t)v6);
  uint64_t EnumCaseMultiPayload = swift_getEnumCaseMultiPayload(v6, v4);
  if ((_DWORD)EnumCaseMultiPayload == 1)
  {
    uint64_t v31 = *v6;
    uint64_t v32 = static os_log_type_t.error.getter(EnumCaseMultiPayload);
    uint64_t v33 = qword_100A2B088;
    uint64_t v34 = swift_allocObject(v15, 72LL, 7LL);
    *(_OWORD *)(v34 + swift_weakDestroy(v0 + 16) = v69;
    v72[0] = v31;
    swift_errorRetain(v31);
    uint64_t v35 = sub_100004AEC((uint64_t *)&unk_1009A5470);
    uint64_t v36 = String.init<A>(describing:)(v72, v35);
    *(void *)(v34 + 56) = &type metadata for String;
    *(void *)(v34 + 64) = v20;
    *(void *)(v34 + 32) = v36;
    *(void *)(v34 + 40) = v37;
    os_log(_:dso:log:_:_:)(v32, &_mh_execute_header, v33, "Unable to save LostModeRecord due to %@", 39LL, 2LL, v34);
    swift_bridgeObjectRelease();
    swift_errorRetain(v31);
    uint64_t v38 = (void *)_convertErrorToNSError(_:)(v31);
    (*(void (**)(uint64_t, void *))(v68 + 16))(v68, v38);

    swift_errorRelease(v31);
    swift_errorRelease(v31);
  }

  else
  {
    uint64_t v39 = v67;
    uint64_t v40 = sub_10002218C((uint64_t)v6, v67, type metadata accessor for LostModeRecord);
    uint64_t v41 = static os_log_type_t.default.getter(v40);
    os_log(_:dso:log:_:_:)( v41,  &_mh_execute_header,  qword_100A2B088,  "Successfully saved LostModeRecord.",  34LL,  2LL,  _swiftEmptyArrayStorage);
    uint64_t v42 = swift_allocObject(&unk_1009572F0, 24LL, 7LL);
    *(void *)(v42 + swift_weakDestroy(v0 + 16) = 0LL;
    dispatch_group_enter(v29);
    uint64_t v43 = v29;
    swift_retain();
    sub_1003E9E20(v39, 1, v70, v42, v43);

    swift_release();
    OS_dispatch_group.wait()();
    swift_beginAccess(v42 + 16, v72, 0LL, 0LL);
    uint64_t v45 = *(void *)(v42 + 16);
    if (v45)
    {
      uint64_t v64 = v28;
      uint64_t v70 = v22;
      uint64_t v46 = swift_errorRetain(v45);
      uint64_t v47 = static os_log_type_t.error.getter(v46);
      uint64_t v48 = qword_100A2B088;
      uint64_t v49 = swift_allocObject(v15, 72LL, 7LL);
      *(_OWORD *)(v49 + swift_weakDestroy(v0 + 16) = v69;
      uint64_t v71 = v45;
      swift_errorRetain(v45);
      uint64_t v50 = sub_100004AEC((uint64_t *)&unk_1009A5470);
      uint64_t v51 = String.init<A>(describing:)(&v71, v50);
      *(void *)(v49 + 56) = &type metadata for String;
      *(void *)(v49 + 64) = v20;
      *(void *)(v49 + 32) = v51;
      *(void *)(v49 + 40) = v52;
      os_log(_:dso:log:_:_:)( v47,  &_mh_execute_header,  v48,  "updateLostModeServer failed - %@. Deleting newly saved LostModeRecord",  69LL,  2LL,  v49);
      swift_bridgeObjectRelease();
      dispatch_group_enter(v43);
      uint64_t v53 = v43;
      uint64_t v54 = static os_log_type_t.default.getter(v53);
      if (qword_10099B708 != -1) {
        swift_once(&qword_10099B708, sub_100651168);
      }
      uint64_t v55 = qword_100A2B018;
      uint64_t v56 = swift_allocObject(v15, 72LL, 7LL);
      *(_OWORD *)(v56 + swift_weakDestroy(v0 + 16) = v69;
      uint64_t v57 = (uint64_t)v65;
      sub_10001DC4C(v39, (uint64_t)v65, type metadata accessor for LostModeRecord);
      uint64_t v58 = String.init<A>(describing:)(v57, v66);
      *(void *)(v56 + 56) = &type metadata for String;
      *(void *)(v56 + 64) = v20;
      *(void *)(v56 + 32) = v58;
      *(void *)(v56 + 40) = v59;
      os_log(_:dso:log:_:_:)(v54, &_mh_execute_header, v55, "Attempting to remove: %@", 24LL, 2LL, v56);
      swift_bridgeObjectRelease();
      sub_100553B20(v39, v64, v53);

      OS_dispatch_group.wait()();
      swift_errorRetain(v45);
      uint64_t v60 = (void *)_convertErrorToNSError(_:)(v45);
      (*(void (**)(uint64_t, void *))(v68 + 16))(v68, v60);

      swift_errorRelease(v45);
      swift_errorRelease(v45);

      sub_100018C68(v39, type metadata accessor for LostModeRecord);
    }

    else
    {
      uint64_t v61 = static os_log_type_t.default.getter(v44);
      os_log(_:dso:log:_:_:)( v61,  &_mh_execute_header,  qword_100A2B088,  "updateLostModeServer succeeded",  30LL,  2LL,  _swiftEmptyArrayStorage);
      sub_1004E696C(0xEu);
      (*(void (**)(uint64_t, void))(v68 + 16))(v68, 0LL);

      sub_100018C68(v39, type metadata accessor for LostModeRecord);
    }

    swift_release();
  }

  return swift_release();
}

void sub_1003EBA60( uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7, uint64_t a8, const void *a9)
{
  uint64_t v70 = a8;
  uint64_t v65 = a4;
  uint64_t v66 = a7;
  uint64_t v68 = a6;
  uint64_t v64 = a2;
  uint64_t v12 = sub_100004AEC(&qword_1009AA840);
  __chkstk_darwin(v12);
  uint64_t v62 = (uint64_t)&v59 - ((v13 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v63 = type metadata accessor for LostModeRecord(0LL);
  uint64_t v61 = *(void *)(v63 - 8);
  uint64_t v14 = __chkstk_darwin(v63);
  uint64_t v60 = (char *)&v59 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v14);
  uint64_t v59 = (uint64_t)&v59 - v16;
  _Block_copy(a9);
  __int128 v69 = (void (**)(void, void *))a9;
  uint64_t v17 = _Block_copy(a9);
  uint64_t v18 = static os_log_type_t.default.getter(v17);
  if (qword_10099B778 != -1) {
    swift_once(&qword_10099B778, sub_1006516DC);
  }
  uint64_t v19 = qword_100A2B088;
  uint64_t v20 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v21 = swift_allocObject(v20, 72LL, 7LL);
  __int128 v67 = xmmword_1007E67D0;
  *(_OWORD *)(v21 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v22 = UUID.uuidString.getter(v21);
  uint64_t v24 = v23;
  *(void *)(v21 + 56) = &type metadata for String;
  unint64_t v25 = sub_1000226F4();
  *(void *)(v21 + 64) = v25;
  *(void *)(v21 + 32) = v22;
  *(void *)(v21 + 40) = v24;
  os_log(_:dso:log:_:_:)(v18, &_mh_execute_header, v19, "enableLostMode for beacon %@.", 29LL, 2LL, v21);
  uint64_t v26 = swift_bridgeObjectRelease();
  if (a5 | a3)
  {
    uint64_t v37 = a5;
    uint64_t v38 = a3;
    *(void *)&__int128 v67 = a1;
    uint64_t v39 = sub_100577004(a1);
    if (v39[2])
    {
      uint64_t v40 = v61;
      uint64_t v41 = v62;
      sub_10001DC4C( (uint64_t)v39 + ((*(unsigned __int8 *)(v61 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v61 + 80)),  v62,  type metadata accessor for LostModeRecord);
      uint64_t v42 = 0LL;
      uint64_t v43 = v69;
      uint64_t v45 = v65;
      uint64_t v44 = v66;
      uint64_t v46 = (int *)v63;
      uint64_t v47 = v64;
    }

    else
    {
      uint64_t v42 = 1LL;
      uint64_t v43 = v69;
      uint64_t v45 = v65;
      uint64_t v44 = v66;
      uint64_t v46 = (int *)v63;
      uint64_t v47 = v64;
      uint64_t v40 = v61;
      uint64_t v41 = v62;
    }

    (*(void (**)(uint64_t, uint64_t, uint64_t, int *))(v40 + 56))(v41, v42, 1LL, v46);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, int *))(v40 + 48))(v41, 1LL, v46) == 1)
    {
      uint64_t v48 = sub_100015794(v41, &qword_1009AA840);
      uint64_t v49 = v46;
      uint64_t v50 = v60;
      UUID.init()(v48);
      uint64_t v51 = (char *)v50 + v49[6];
      uint64_t v52 = type metadata accessor for UUID(0LL);
      (*(void (**)(char *, void, uint64_t))(*(void *)(v52 - 8) + 16LL))(v51, v67, v52);
      *uint64_t v50 = xmmword_1007E4480;
      uint64_t v53 = (uint64_t *)((char *)v50 + v49[7]);
      *uint64_t v53 = v47;
      v53[1] = v38;
      uint64_t v54 = (uint64_t *)((char *)v50 + v49[8]);
      *uint64_t v54 = v45;
      v54[1] = v37;
      uint64_t v55 = (void *)((char *)v50 + v49[9]);
      *uint64_t v55 = v68;
      v55[1] = v44;
      _Block_copy(v43);
      swift_bridgeObjectRetain(v44);
      swift_bridgeObjectRetain(v38);
      swift_bridgeObjectRetain(v37);
      sub_1003EB404((uint64_t)v50, v70, (uint64_t)v43);
      _Block_release(v43);
      uint64_t v56 = (uint64_t)v50;
    }

    else
    {
      uint64_t v57 = v41;
      uint64_t v58 = v59;
      sub_10002218C(v57, v59, type metadata accessor for LostModeRecord);
      _Block_copy(v43);
      sub_1003E9748(v58, v47, v38, v45, v37, v68, v44, v70, (uint64_t)v43);
      _Block_release(v43);
      uint64_t v56 = v58;
    }

    sub_100018C68(v56, type metadata accessor for LostModeRecord);
    _Block_release(v43);
    _Block_release(v43);
  }

  else
  {
    uint64_t v27 = static os_log_type_t.error.getter(v26);
    uint64_t v28 = qword_100A2B088;
    uint64_t v29 = swift_allocObject(v20, 72LL, 7LL);
    *(_OWORD *)(v29 + swift_weakDestroy(v0 + 16) = v67;
    uint64_t v30 = UUID.uuidString.getter(v29);
    *(void *)(v29 + 56) = &type metadata for String;
    *(void *)(v29 + 64) = v25;
    *(void *)(v29 + 32) = v30;
    *(void *)(v29 + 40) = v31;
    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  v28,  "Must provide either phone number or email - %@",  46LL,  2LL,  v29);
    swift_bridgeObjectRelease();
    unint64_t v32 = sub_1001B25CC();
    uint64_t v33 = swift_allocError(&type metadata for BeaconManagerCommandError, v32, 0LL, 0LL);
    *uint64_t v34 = 0;
    uint64_t v35 = (void *)_convertErrorToNSError(_:)(v33);
    uint64_t v36 = v69;
    v69[2](v69, v35);

    swift_errorRelease(v33);
    _Block_release(v36);
    _Block_release(v36);
  }

unint64_t sub_1003EBF14()
{
  unint64_t result = qword_1009ACE68;
  if (!qword_1009ACE68)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FFAD0, &_s13LostModeErrorON);
    atomic_store(result, (unint64_t *)&qword_1009ACE68);
  }

  return result;
}

uint64_t sub_1003EBF58()
{
  return swift_deallocObject(v0, 64LL, 7LL);
}

uint64_t sub_1003EBF8C(uint64_t a1)
{
  return sub_1003E6088(a1, v1[2], v1[3], v1[4], v1[5], v1[6], v1[7]);
}

void sub_1003EBFA0(uint64_t a1)
{
}

uint64_t sub_1003EBFB8(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A7F18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003EC000()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1003EC024()
{
  uint64_t v1 = type metadata accessor for LostModeRecord(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 16) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v7 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1003EC0FC(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for LostModeRecord(0LL) - 8) + 80LL);
  return sub_1003E61A8(a1, v1 + ((v3 + 16) & ~v3));
}

uint64_t sub_1003EC13C()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1003EC160(uint64_t a1)
{
  return sub_1003E6D48(a1, *(uint64_t (**)(uint64_t))(v1 + 16));
}

uint64_t sub_1003EC16C(uint64_t a1)
{
  return sub_1003E6E68(a1, *(void *)(v1 + 16), *(void (**)(void))(v1 + 24), *(void *)(v1 + 32));
}

uint64_t sub_1003EC18C(uint64_t a1, uint64_t a2, void (**a3)(const void *, void *))
{
  uint64_t v48 = a2;
  uint64_t v5 = sub_100004AEC(&qword_1009AA840);
  __chkstk_darwin(v5);
  uint64_t v7 = (char *)&v41 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for LostModeRecord(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = __chkstk_darwin(v8);
  uint64_t v43 = v11;
  uint64_t v44 = (uint64_t)&v41 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v10);
  uint64_t v45 = (uint64_t)&v41 - v12;
  uint64_t v49 = swift_allocObject(&unk_100957660, 24LL, 7LL);
  *(void *)(v49 + swift_weakDestroy(v0 + 16) = a3;
  uint64_t v47 = a3;
  uint64_t v13 = _Block_copy(a3);
  uint64_t v14 = static os_log_type_t.default.getter(v13);
  if (qword_10099B778 != -1) {
    swift_once(&qword_10099B778, sub_1006516DC);
  }
  uint64_t v15 = qword_100A2B088;
  uint64_t v42 = sub_100004AEC((uint64_t *)&unk_10099D740);
  uint64_t v16 = swift_allocObject(v42, 72LL, 7LL);
  __int128 v41 = xmmword_1007E67D0;
  *(_OWORD *)(v16 + swift_weakDestroy(v0 + 16) = xmmword_1007E67D0;
  uint64_t v17 = UUID.uuidString.getter(v16);
  uint64_t v19 = v18;
  *(void *)(v16 + 56) = &type metadata for String;
  unint64_t v20 = sub_1000226F4();
  *(void *)(v16 + 64) = v20;
  *(void *)(v16 + 32) = v17;
  *(void *)(v16 + 40) = v19;
  os_log(_:dso:log:_:_:)(v14, &_mh_execute_header, v15, "disableLostMode for beacon %@.", 30LL, 2LL, v16);
  swift_bridgeObjectRelease();
  uint64_t v21 = v48;
  uint64_t v46 = a1;
  uint64_t v22 = sub_100577004(a1);
  if (v22[2])
  {
    sub_10001DC4C( (uint64_t)v22 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)),  (uint64_t)v7,  type metadata accessor for LostModeRecord);
    uint64_t v23 = 0LL;
  }

  else
  {
    uint64_t v23 = 1LL;
  }

  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(v9 + 56))(v7, v23, 1LL, v8);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v9 + 48))(v7, 1LL, v8) == 1)
  {
    uint64_t v24 = sub_100015794((uint64_t)v7, &qword_1009AA840);
    uint64_t v25 = static os_log_type_t.error.getter(v24);
    uint64_t v26 = qword_100A2B088;
    uint64_t v27 = swift_allocObject(v42, 72LL, 7LL);
    *(_OWORD *)(v27 + swift_weakDestroy(v0 + 16) = v41;
    uint64_t v28 = UUID.uuidString.getter(v27);
    *(void *)(v27 + 56) = &type metadata for String;
    *(void *)(v27 + 64) = v20;
    *(void *)(v27 + 32) = v28;
    *(void *)(v27 + 40) = v29;
    os_log(_:dso:log:_:_:)(v25, &_mh_execute_header, v26, "lostModeRecord not found for %@.", 32LL, 2LL, v27);
    swift_bridgeObjectRelease();
    unint64_t v30 = sub_1003EBF14();
    uint64_t v31 = swift_allocError(&_s13LostModeErrorON, v30, 0LL, 0LL);
    *unint64_t v32 = 0;
    uint64_t v33 = (void *)_convertErrorToNSError(_:)(v31);
    v47[2](v47, v33);

    swift_errorRelease(v31);
  }

  else
  {
    uint64_t v34 = v45;
    sub_10002218C((uint64_t)v7, v45, type metadata accessor for LostModeRecord);
    uint64_t v35 = v44;
    sub_10001DC4C(v34, v44, type metadata accessor for LostModeRecord);
    uint64_t v36 = *(unsigned __int8 *)(v9 + 80);
    uint64_t v37 = (v36 + 40) & ~v36;
    uint64_t v38 = (void *)swift_allocObject(&unk_100957688, v37 + v43, v36 | 7);
    uint64_t v39 = v49;
    v38[2] = sub_10009C044;
    v38[3] = v39;
    v38[4] = v21;
    sub_10002218C(v35, (uint64_t)v38 + v37, type metadata accessor for LostModeRecord);
    swift_retain();
    swift_retain();
    sub_1003E4B94(v34, 0, (void (*)(void))sub_1003ECC64, (uint64_t)v38);
    swift_release();
    sub_100018C68(v34, type metadata accessor for LostModeRecord);
  }

  return swift_release();
}

uint64_t sub_1003EC578(uint64_t a1, void (*a2)(void))
{
  uint64_t v4 = type metadata accessor for ServerStatusCode(0LL);
  uint64_t v5 = *(void *)(v4 - 8);
  uint64_t v6 = __chkstk_darwin(v4);
  uint64_t v8 = (char *)&v42 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v6);
  uint64_t v10 = (char *)&v42 - v9;
  uint64_t v11 = *(void (**)(char *, uint64_t, uint64_t))(v5 + 16);
  v11((char *)&v42 - v9, a1, v4);
  uint64_t v12 = (*(uint64_t (**)(char *, uint64_t))(v5 + 88))(v10, v4);
  if ((_DWORD)v12 == enum case for ServerStatusCode.success(_:))
  {
    uint64_t v13 = static os_log_type_t.default.getter(v12);
    if (qword_10099B778 != -1) {
      swift_once(&qword_10099B778, sub_1006516DC);
    }
    os_log(_:dso:log:_:_:)( v13,  &_mh_execute_header,  qword_100A2B088,  "Successfully submitted lost mode info.",  38LL,  2LL,  _swiftEmptyArrayStorage);
    return ((uint64_t (*)(void))a2)(0LL);
  }

  int v15 = v12;
  if ((_DWORD)v12 == enum case for ServerStatusCode.notModified(_:))
  {
    uint64_t v16 = static os_log_type_t.error.getter(v12);
    if (qword_10099B778 != -1) {
      swift_once(&qword_10099B778, sub_1006516DC);
    }
    os_log(_:dso:log:_:_:)( v16,  &_mh_execute_header,  qword_100A2B088,  "Failed to submit lost mode: notModified.",  40LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v17 = sub_1003EBF14();
    uint64_t v19 = swift_allocError(&_s13LostModeErrorON, v17, 0LL, 0LL);
    char v20 = 6;
LABEL_21:
    char *v18 = v20;
LABEL_22:
    a2();
    return swift_errorRelease(v19);
  }

  if ((_DWORD)v12 == enum case for ServerStatusCode.badRequest(_:))
  {
    uint64_t v21 = static os_log_type_t.error.getter(v12);
    if (qword_10099B778 != -1) {
      swift_once(&qword_10099B778, sub_1006516DC);
    }
    os_log(_:dso:log:_:_:)( v21,  &_mh_execute_header,  qword_100A2B088,  "Failed to submit lost mode: badRequest.",  39LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v22 = sub_1003EBF14();
    uint64_t v19 = swift_allocError(&_s13LostModeErrorON, v22, 0LL, 0LL);
    *uint64_t v23 = 2;
    goto LABEL_22;
  }

  if ((_DWORD)v12 == enum case for ServerStatusCode.unauthorized(_:))
  {
    uint64_t v24 = static os_log_type_t.error.getter(v12);
    if (qword_10099B778 != -1) {
      swift_once(&qword_10099B778, sub_1006516DC);
    }
    os_log(_:dso:log:_:_:)( v24,  &_mh_execute_header,  qword_100A2B088,  "Failed to submit lost mode: unauthorized.",  41LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v25 = sub_1003EBF14();
    uint64_t v19 = swift_allocError(&_s13LostModeErrorON, v25, 0LL, 0LL);
    char v20 = 3;
    goto LABEL_21;
  }

  int v26 = enum case for ServerStatusCode.serverConflict(_:);
  uint64_t v27 = static os_log_type_t.error.getter(v12);
  if (v15 == v26)
  {
    if (qword_10099B778 != -1)
    {
      uint64_t v41 = v27;
      swift_once(&qword_10099B778, sub_1006516DC);
      uint64_t v27 = v41;
    }

    os_log(_:dso:log:_:_:)( v27,  &_mh_execute_header,  qword_100A2B088,  "Failed to submit lost mode: serverConflict.",  43LL,  2LL,  _swiftEmptyArrayStorage);
    unint64_t v28 = sub_1003EBF14();
    uint64_t v19 = swift_allocError(&_s13LostModeErrorON, v28, 0LL, 0LL);
    char v20 = 5;
    goto LABEL_21;
  }

  os_log_type_t v29 = v27;
  if (qword_10099B778 != -1) {
    swift_once(&qword_10099B778, sub_1006516DC);
  }
  unint64_t v30 = (os_log_s *)qword_100A2B088;
  v11(v8, a1, v4);
  if (os_log_type_enabled(v30, v29))
  {
    uint64_t v31 = swift_slowAlloc(12LL, -1LL);
    os_log_t v44 = v30;
    unint64_t v32 = (uint8_t *)v31;
    uint64_t v45 = swift_slowAlloc(32LL, -1LL);
    uint64_t v47 = v45;
    *(_DWORD *)unint64_t v32 = 136446210;
    uint64_t v43 = v32 + 4;
    uint64_t v33 = sub_100007864( &qword_1009A89B0,  (uint64_t (*)(uint64_t))&type metadata accessor for ServerStatusCode,  (uint64_t)&protocol conformance descriptor for ServerStatusCode);
    uint64_t v34 = dispatch thunk of CustomStringConvertible.description.getter(v4, v33);
    uint64_t v46 = sub_1003F11D4(v34, v35, &v47);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v46, &v47, v43, v32 + 12);
    swift_bridgeObjectRelease();
    uint64_t v36 = *(void (**)(char *, uint64_t))(v5 + 8);
    v36(v8, v4);
    _os_log_impl((void *)&_mh_execute_header, v44, v29, "Failed to submit lost mode: %{public}s.", v32, 0xCu);
    uint64_t v37 = v45;
    swift_arrayDestroy(v45, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v37, -1LL, -1LL);
    swift_slowDealloc(v32, -1LL, -1LL);
  }

  else
  {
    uint64_t v36 = *(void (**)(char *, uint64_t))(v5 + 8);
    v36(v8, v4);
  }

  unint64_t v38 = sub_1003EBF14();
  uint64_t v39 = swift_allocError(&_s13LostModeErrorON, v38, 0LL, 0LL);
  *uint64_t v40 = 4;
  a2();
  swift_errorRelease(v39);
  return ((uint64_t (*)(char *, uint64_t))v36)(v10, v4);
}

uint64_t sub_1003ECB00(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = sub_100004AEC(&qword_1009A7F18);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 24LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003ECB58()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_1003ECB7C()
{
  uint64_t v1 = type metadata accessor for LostModeRecord(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release();
  swift_release();
  uint64_t v7 = v0 + v4;
  sub_100016F9C(*(void *)(v0 + v4), *(void *)(v0 + v4 + 8));
  uint64_t v8 = v0 + v4 + *(int *)(v1 + 20);
  uint64_t v9 = type metadata accessor for UUID(0LL);
  uint64_t v10 = *(void (**)(uint64_t, uint64_t))(*(void *)(v9 - 8) + 8LL);
  v10(v8, v9);
  v10(v7 + *(int *)(v1 + 24), v9);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_1003ECC64(uint64_t a1)
{
  uint64_t v3 = *(unsigned __int8 *)(*(void *)(type metadata accessor for LostModeRecord(0LL) - 8) + 80LL);
  return sub_1003E7314( a1,  *(void (**)(uint64_t))(v1 + 16),  *(void *)(v1 + 24),  *(void *)(v1 + 32),  v1 + ((v3 + 40) & ~v3));
}

uint64_t sub_1003ECCAC(uint64_t a1)
{
  return sub_1003E7428(a1, *(void *)(v1 + 16), *(void (**)(uint64_t))(v1 + 24));
}

uint64_t sub_1003ECCB8(uint64_t a1)
{
  return sub_1003E762C(a1, *(void (**)(void))(v1 + 16));
}

uint64_t _s13LostModeErrorOwst(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 8 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 8) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF8) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF7) {
    return ((uint64_t (*)(void))((char *)&loc_1003ECD0C + 4 * byte_1007FFA53[v4]))();
  }
  *a1 = a2 + 8;
  return ((uint64_t (*)(void))((char *)sub_1003ECD40 + 4 * byte_1007FFA4E[v4]))();
}

uint64_t sub_1003ECD40(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003ECD48(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1003ECD50LL);
  }
  return result;
}

uint64_t sub_1003ECD5C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1003ECD64LL);
  }
  *(_BYTE *)unint64_t result = a2 + 8;
  return result;
}

uint64_t sub_1003ECD68(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003ECD70(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *_s13LostModeErrorOMa()
{
  return &_s13LostModeErrorON;
}

unint64_t sub_1003ECD90()
{
  unint64_t result = qword_1009ACEA8;
  if (!qword_1009ACEA8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FFAA8, &_s13LostModeErrorON);
    atomic_store(result, (unint64_t *)&qword_1009ACEA8);
  }

  return result;
}

BOOL sub_1003ECE00(char *a1, char *a2)
{
  return qword_1007FFC48[*a1] == qword_1007FFC48[*a2];
}

Swift::Int sub_1003ECE24()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(qword_1007FFC48[v1]);
  return Hasher._finalize()();
}

void sub_1003ECE70()
{
}

Swift::Int sub_1003ECEA4(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(qword_1007FFC48[v2]);
  return Hasher._finalize()();
}

uint64_t sub_1003ECEEC@<X0>(unint64_t *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1003ED128(*a1);
  *a2 = result;
  return result;
}

void sub_1003ECF14(void *a1@<X8>)
{
  *a1 = qword_1007FFC48[*v1];
}

uint64_t sub_1003ECF2C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1003ED260();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1003ECF88(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1003ED260();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

void sub_1003ECFD4(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1003ED000()
{
  v0._countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v0._object;
  String.append(_:)(v0);
  swift_bridgeObjectRelease(object);
  v2._countAndFlagsBits = 41LL;
  v2._object = (void *)0xE100000000000000LL;
  String.append(_:)(v2);
  return 0x6E776F6E6B6E752ELL;
}

void sub_1003ED120()
{
}

uint64_t sub_1003ED128(unint64_t a1)
{
  if (a1 >= 5) {
    return 4LL;
  }
  else {
    return (0x302040100uLL >> (8 * a1));
  }
}

uint64_t storeEnumTagSinglePayload for ShareType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1003ED198 + 4 * byte_1007FFB19[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1003ED1CC + 4 * byte_1007FFB14[v4]))();
}

uint64_t sub_1003ED1CC(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003ED1D4(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1003ED1DCLL);
  }
  return result;
}

uint64_t sub_1003ED1E8(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1003ED1F0LL);
  }
  *(_BYTE *)uint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1003ED1F4(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003ED1FC(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for ShareType()
{
  return &type metadata for ShareType;
}

unint64_t sub_1003ED21C()
{
  unint64_t result = qword_1009ACEB0;
  if (!qword_1009ACEB0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FFBD0, &type metadata for ShareType);
    atomic_store(result, (unint64_t *)&qword_1009ACEB0);
  }

  return result;
}

unint64_t sub_1003ED260()
{
  unint64_t result = qword_1009ACEB8;
  if (!qword_1009ACEB8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FFB58, &type metadata for ShareType);
    atomic_store(result, (unint64_t *)&qword_1009ACEB8);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for BeaconSharingSessionMessageType(uint64_t a1, int a2, int a3)
{
  else {
    int v3 = 2;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2) {
    return ((uint64_t (*)(void))((char *)sub_1003ED2E4 + 4 * byte_1007FFC70[v4]))();
  }
  else {
    return ((uint64_t (*)(void))((char *)sub_1003ED304 + 4 * byte_1007FFC75[v4]))();
  }
}

_BYTE *sub_1003ED2E4(_BYTE *result, char a2)
{
  *unint64_t result = a2;
  return result;
}

_BYTE *sub_1003ED304(_BYTE *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1003ED30C(_DWORD *result, int a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1003ED314(_WORD *result, __int16 a2)
{
  *unint64_t result = a2;
  return result;
}

_WORD *sub_1003ED31C(_WORD *result)
{
  *unint64_t result = 0;
  return result;
}

_DWORD *sub_1003ED324(_DWORD *result)
{
  *unint64_t result = 0;
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingSessionMessageType()
{
  return &type metadata for BeaconSharingSessionMessageType;
}

uint64_t getEnumTagSinglePayload for BeaconSharingMessageType(unsigned __int8 *a1, unsigned int a2)
{
  if (!a2) {
    return 0LL;
  }
  if (a2 < 0xF3) {
    goto LABEL_17;
  }
  if (a2 + 13 >= 0xFFFF00) {
    int v2 = 4;
  }
  else {
    int v2 = 2;
  }
  if ((a2 + 13) >> 8 < 0xFF) {
    int v3 = 1;
  }
  else {
    int v3 = v2;
  }
  if (v3 == 4)
  {
    int v4 = *(_DWORD *)(a1 + 1);
    if (v4) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }

  else
  {
    if (v3 == 2)
    {
      int v4 = *(unsigned __int16 *)(a1 + 1);
      if (!*(_WORD *)(a1 + 1)) {
        goto LABEL_17;
      }
      return (*a1 | (v4 << 8)) - 13;
    }

    int v4 = a1[1];
    if (a1[1]) {
      return (*a1 | (v4 << 8)) - 13;
    }
  }

uint64_t storeEnumTagSinglePayload for BeaconSharingMessageType(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 13 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 13) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xF3) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xF2) {
    return ((uint64_t (*)(void))((char *)&loc_1003ED41C + 4 * byte_1007FFC7F[v4]))();
  }
  *a1 = a2 + 13;
  return ((uint64_t (*)(void))((char *)sub_1003ED450 + 4 * byte_1007FFC7A[v4]))();
}

uint64_t sub_1003ED450(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003ED458(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1003ED460LL);
  }
  return result;
}

uint64_t sub_1003ED46C(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1003ED474LL);
  }
  *(_BYTE *)unint64_t result = a2 + 13;
  return result;
}

uint64_t sub_1003ED478(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003ED480(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for BeaconSharingMessageType()
{
  return &type metadata for BeaconSharingMessageType;
}

BOOL sub_1003ED49C(char *a1, char *a2)
{
  return dword_1007FFF58[*a1] == dword_1007FFF58[*a2];
}

Swift::Int sub_1003ED4C0()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  Hasher._combine(_:)(dword_1007FFF58[v1]);
  return Hasher._finalize()();
}

void sub_1003ED50C()
{
}

Swift::Int sub_1003ED540(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  Hasher._combine(_:)(dword_1007FFF58[v2]);
  return Hasher._finalize()();
}

uint64_t sub_1003ED588@<X0>(unsigned int *a1@<X0>, _BYTE *a2@<X8>)
{
  uint64_t result = sub_1003EDAE0(*a1);
  *a2 = result;
  return result;
}

void sub_1003ED5B0(_DWORD *a1@<X8>)
{
  *a1 = dword_1007FFF58[*v1];
}

void sub_1003ED5C8(void *a1@<X8>)
{
  *a1 = &off_100936CE0;
}

uint64_t sub_1003ED5D8(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1003ED724();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1003ED634(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1003ED724();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1003ED680(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1003ED964( a1,  a2,  a3,  (uint64_t (*)(void))sub_1003ED69C,  (uint64_t (*)(void))sub_1003ED6E0,  (uint64_t (*)(void))sub_1003ED724);
}

unint64_t sub_1003ED69C()
{
  unint64_t result = qword_1009ACEC0;
  if (!qword_1009ACEC0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FFCF4, &type metadata for BeaconSharingMessageType);
    atomic_store(result, (unint64_t *)&qword_1009ACEC0);
  }

  return result;
}

unint64_t sub_1003ED6E0()
{
  unint64_t result = qword_1009ACEC8;
  if (!qword_1009ACEC8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FFCCC, &type metadata for BeaconSharingMessageType);
    atomic_store(result, (unint64_t *)&qword_1009ACEC8);
  }

  return result;
}

unint64_t sub_1003ED724()
{
  unint64_t result = qword_1009ACED0;
  if (!qword_1009ACED0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FFD70, &type metadata for BeaconSharingMessageType);
    atomic_store(result, (unint64_t *)&qword_1009ACED0);
  }

  return result;
}

uint64_t sub_1003ED768()
{
  return sub_1001886EC(&qword_1009ACED8, &qword_1009ACEE0);
}

unint64_t sub_1003ED790()
{
  unint64_t result = qword_1009ACEE8;
  if (!qword_1009ACEE8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FFDE8, &type metadata for BeaconSharingMessageType);
    atomic_store(result, (unint64_t *)&qword_1009ACEE8);
  }

  return result;
}

Swift::Int sub_1003ED7D4()
{
  return Hasher._finalize()();
}

void sub_1003ED814()
{
}

Swift::Int sub_1003ED838(uint64_t a1)
{
  return Hasher._finalize()();
}

_DWORD *sub_1003ED874@<X0>(_DWORD *result@<X0>, BOOL *a2@<X8>)
{
  *a2 = *result != 0;
  return result;
}

void sub_1003ED888(_DWORD *a1@<X8>)
{
  *a1 = 0;
}

void sub_1003ED890(void *a1@<X8>)
{
  *a1 = &off_100936D10;
}

uint64_t sub_1003ED8A0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1003EDA30();
  return RawRepresentable<>.init(from:)(a1, a2, a3, v6);
}

uint64_t sub_1003ED8FC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  unint64_t v6 = sub_1003EDA30();
  return RawRepresentable<>.encode(to:)(a1, a2, a3, v6);
}

uint64_t sub_1003ED948(void *a1, uint64_t a2, uint64_t a3)
{
  return sub_1003ED964( a1,  a2,  a3,  (uint64_t (*)(void))sub_1003ED9A8,  (uint64_t (*)(void))sub_1003ED9EC,  (uint64_t (*)(void))sub_1003EDA30);
}

uint64_t sub_1003ED964( void *a1, uint64_t a2, uint64_t a3, uint64_t (*a4)(void), uint64_t (*a5)(void), uint64_t (*a6)(void))
{
  a1[1] = a4();
  a1[2] = a5();
  uint64_t result = a6();
  a1[3] = result;
  return result;
}

unint64_t sub_1003ED9A8()
{
  unint64_t result = qword_1009ACEF0;
  if (!qword_1009ACEF0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FFE38, &type metadata for BeaconSharingSessionMessageType);
    atomic_store(result, (unint64_t *)&qword_1009ACEF0);
  }

  return result;
}

unint64_t sub_1003ED9EC()
{
  unint64_t result = qword_1009ACEF8;
  if (!qword_1009ACEF8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FFE10, &type metadata for BeaconSharingSessionMessageType);
    atomic_store(result, (unint64_t *)&qword_1009ACEF8);
  }

  return result;
}

unint64_t sub_1003EDA30()
{
  unint64_t result = qword_1009ACF00;
  if (!qword_1009ACF00)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FFEB4, &type metadata for BeaconSharingSessionMessageType);
    atomic_store(result, (unint64_t *)&qword_1009ACF00);
  }

  return result;
}

uint64_t sub_1003EDA74()
{
  return sub_1001886EC(&qword_1009ACF08, &qword_1009ACF10);
}

unint64_t sub_1003EDA9C()
{
  unint64_t result = qword_1009ACF18;
  if (!qword_1009ACF18)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007FFF2C, &type metadata for BeaconSharingSessionMessageType);
    atomic_store(result, (unint64_t *)&qword_1009ACF18);
  }

  return result;
}

uint64_t sub_1003EDAE0(unsigned int a1)
{
  if (a1 > 0x10) {
    return 14LL;
  }
  else {
    return byte_1007FFF90[a1];
  }
}

uint64_t sub_1003EDB00(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6) == 1)
  {
    sub_100015794(a1, &qword_1009A9BF0);
    uint64_t v8 = 7168LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9)
    {
LABEL_3:
      uint64_t v10 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v9);
      swift_unknownObjectRetain(v9);
      uint64_t v12 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v10);
      uint64_t v14 = v13;
      swift_unknownObjectRelease(v9);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v15 = TaskPriority.rawValue.getter();
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v8 = v15 | 0x1C00LL;
    uint64_t v9 = *(void *)(a3 + 16);
    if (v9) {
      goto LABEL_3;
    }
  }

  uint64_t v12 = 0LL;
  uint64_t v14 = 0LL;
LABEL_6:
  uint64_t v16 = swift_allocObject(&unk_100957D10, 32LL, 7LL);
  *(void *)(v16 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v16 + 24) = a3;
  if (v14 | v12)
  {
    v19[0] = 0LL;
    v19[1] = 0LL;
    unint64_t v17 = v19;
    v19[2] = v12;
    v19[3] = v14;
  }

  else
  {
    unint64_t v17 = 0LL;
  }

  return swift_task_create(v8, v17, (char *)&type metadata for () + 8, &unk_1009AB890, v16);
}

uint64_t sub_1003EDC4C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for TaskPriority(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1, 1LL, v6);
  if ((_DWORD)v8 == 1)
  {
    sub_100015794(a1, &qword_1009A9BF0);
    uint64_t v9 = 7168LL;
    uint64_t v10 = *(void *)(a3 + 16);
    if (v10)
    {
LABEL_3:
      uint64_t v11 = *(void *)(a3 + 24);
      uint64_t ObjectType = swift_getObjectType(v10);
      swift_unknownObjectRetain(v10);
      uint64_t v13 = dispatch thunk of Actor.unownedExecutor.getter(ObjectType, v11);
      uint64_t v15 = v14;
      swift_unknownObjectRelease(v10);
      goto LABEL_6;
    }
  }

  else
  {
    unsigned __int8 v16 = TaskPriority.rawValue.getter(v8);
    (*(void (**)(uint64_t, uint64_t))(v7 + 8))(a1, v6);
    uint64_t v9 = v16 | 0x1C00LL;
    uint64_t v10 = *(void *)(a3 + 16);
    if (v10) {
      goto LABEL_3;
    }
  }

  uint64_t v13 = 0LL;
  uint64_t v15 = 0LL;
LABEL_6:
  uint64_t v17 = swift_allocObject(&unk_100957CE8, 32LL, 7LL);
  *(void *)(v17 + swift_weakDestroy(v0 + 16) = a2;
  *(void *)(v17 + 24) = a3;
  uint64_t v18 = sub_100004AEC(&qword_1009AE4D0);
  if (v15 | v13)
  {
    v21[0] = 0LL;
    v21[1] = 0LL;
    uint64_t v19 = v21;
    void v21[2] = v13;
    v21[3] = v15;
  }

  else
  {
    uint64_t v19 = 0LL;
  }

  return swift_task_create(v9, v19, v18, &unk_1009ACF60, v17);
}

Swift::Int64 __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database._test_raw_scalar_sql_query(_:)( Swift::String a1)
{
  uint64_t v4 = v2;
  uint64_t v5 = v1;
  object = a1._object;
  uint64_t countAndFlagsBits = a1._countAndFlagsBits;
  if (qword_10099B6A0 != -1) {
    swift_once(&qword_10099B6A0, sub_100626B90);
  }
  v18[0] = 0x7365547265646E75LL;
  v18[1] = 0xE900000000000074LL;
  SynchronousCache.cachedValue<A>(key:computeBlock:)(&v19, v18, sub_10000A71C, 0LL, &type metadata for Bool);
  swift_bridgeObjectRelease();
  if (((*(uint64_t (**)(uint64_t, uint64_t))(v4 + 56))(v5, v4) & 1) != 0
    && static Database.beforeFirstUnlock.getter())
  {
    unint64_t v8 = sub_100086500();
    uint64_t v9 = swift_allocError(&type metadata for DatabaseError, v8, 0LL, 0LL);
    int v11 = 4;
LABEL_14:
    *(_DWORD *)uint64_t v10 = v11;
    *(_BYTE *)(v10 + 4) = 1;
    return swift_willThrow(v9);
  }

  if (!Database.readConnection.getter(v5, v4))
  {
    unint64_t v14 = sub_100086500();
    uint64_t v9 = swift_allocError(&type metadata for DatabaseError, v14, 0LL, 0LL);
    int v11 = 2;
    goto LABEL_14;
  }

  Connection.scalar(_:_:)(v18, countAndFlagsBits, object, _swiftEmptyArrayStorage);
  if (!v3)
  {
    if (v18[3])
    {
      uint64_t v13 = sub_100004AEC(&qword_1009ACF28);
      if (swift_dynamicCast(&v19, v18, v13, &type metadata for Int64, 6LL))
      {
        swift_release();
        return v19;
      }
    }

    else
    {
      sub_100015794((uint64_t)v18, &qword_1009ACF20);
    }

    unint64_t v15 = sub_100086500();
    uint64_t v16 = swift_allocError(&type metadata for DatabaseError, v15, 0LL, 0LL);
    *(_DWORD *)uint64_t v17 = 0;
    *(_BYTE *)(v17 + 4) = 1;
    swift_willThrow(v16);
  }

  return swift_release();
}

uint64_t Database.writeConnection.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 + 24);
  swift_retain(v6);
  swift_release(v5);
  return v6;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.reset()()
{
  uint64_t v3 = v1;
  uint64_t v4 = v0;
  (*(void (**)(void))(v1 + 96))();
  if (!v2) {
    (*(void (**)(uint64_t, uint64_t))(v3 + 80))(v4, v3);
  }
}

uint64_t Database.readConnection.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2);
  if (!v4) {
    return 0LL;
  }
  uint64_t v5 = v4;
  uint64_t v6 = *(void *)(v4 + 16);
  swift_retain(v6);
  swift_release(v5);
  return v6;
}

void *Connection.init(_:readonly:key:)(char *a1, uint64_t a2, uint64_t a3, unint64_t a4)
{
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v25 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v11 = [(id)objc_opt_self(NSFileManager) defaultManager];
  URL.deletingLastPathComponent()(v11);
  URL._bridgeToObjectiveC()(v12);
  unint64_t v14 = v13;
  unint64_t v15 = *(void (**)(char *, uint64_t))(v8 + 8);
  v15(v10, v7);
  id v29 = 0LL;
  LODWORD(v10) = [v11 createDirectoryAtURL:v14 withIntermediateDirectories:1 attributes:0 error:&v29];

  id v16 = v29;
  if (!(_DWORD)v10)
  {
    uint64_t v18 = v16;
    _convertNSErrorToError(_:)(v16);

    swift_willThrow(v23);
    sub_1000182F0(a3, a4);
    uint64_t v21 = a1;
    uint64_t v22 = v7;
    goto LABEL_5;
  }

  uint64_t v26 = v7;
  uint64_t v17 = URL.path.getter(v16);
  uint64_t v18 = v27;
  uint64_t v19 = v28;
  uint64_t v20 = Connection.__allocating_init(_:readonly:)(v17);
  if (v19)
  {
    sub_1000182F0(a3, a4);
    uint64_t v21 = a1;
    uint64_t v22 = v26;
LABEL_5:
    v15(v21, v22);
    return v18;
  }

  uint64_t v18 = (void *)v20;
  if (a4 >> 60 != 15) {
    __asm { BR              X10 }
  }

  swift_retain();
  v15(a1, v26);
  swift_release();
  return v18;
}

uint64_t Database.openOrScheduleOpenAfterFirstUnlockIfNeeded(logger:)(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v35 = a2;
  uint64_t v6 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v6);
  uint64_t v34 = (uint64_t)&v32 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(void *)(v9 + 64);
  uint64_t v11 = __chkstk_darwin(v8);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v32 - v12;
  unint64_t v14 = *(void (**)(char *, uint64_t, uint64_t))(v9 + 16);
  uint64_t v15 = a1;
  uint64_t v16 = a1;
  uint64_t v17 = v35;
  v14((char *)&v32 - v12, v16, v8);
  if (((*(uint64_t (**)(uint64_t, uint64_t))(a3 + 56))(v17, a3) & 1) != 0)
  {
    unint64_t v32 = v14;
    uint64_t v33 = (char *)&v32 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
    uint64_t v18 = v15;
    uint64_t v19 = v34;
    uint64_t v20 = a3;
    if (static Database.beforeFirstUnlock.getter())
    {
      (*(void (**)(char *, uint64_t))(v9 + 8))(v13, v8);
      uint64_t v21 = type metadata accessor for TaskPriority(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL))(v19, 1LL, 1LL, v21);
      uint64_t v22 = v33;
      v32(v33, v18, v8);
      uint64_t v23 = *(unsigned __int8 *)(v9 + 80);
      uint64_t v24 = (v23 + 48) & ~v23;
      unint64_t v25 = (v10 + v24 + 7) & 0xFFFFFFFFFFFFFFF8LL;
      uint64_t v26 = (char *)swift_allocObject(&unk_100957B10, v25 + 8, v23 | 7);
      *((void *)v26 + 2) = 0LL;
      *((void *)v26 + 3) = 0LL;
      *((void *)v26 + 4) = v17;
      *((void *)v26 + 5) = v20;
      (*(void (**)(char *, char *, uint64_t))(v9 + 32))(&v26[v24], v22, v8);
      *(void *)&v26[v25] = v3;
      swift_unknownObjectRetain(v3);
      sub_1003EDB00(v34, (uint64_t)&unk_1009ACF38, (uint64_t)v26);
      return swift_release();
    }

    uint64_t v28 = v3;
    uint64_t v29 = (uint64_t)v13;
    uint64_t v30 = v17;
    uint64_t v31 = a3;
  }

  else
  {
    uint64_t v28 = v3;
    uint64_t v29 = (uint64_t)v13;
    uint64_t v30 = v17;
    uint64_t v31 = a3;
  }

  sub_1003F0244(v28, v29, v30, v31);
  return (*(uint64_t (**)(char *, uint64_t))(v9 + 8))(v13, v8);
}

void (*static Database.establishConnection(logger:temporary:)( void *a1, unsigned int a2, uint64_t a3, uint64_t a4))(uint64_t, void *)
{
  uint64_t v102 = a1;
  uint64_t v7 = type metadata accessor for Connection.Location(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = __chkstk_darwin(v7);
  unint64_t v108 = (char *)&v99 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v9);
  uint64_t v13 = (uint64_t *)((char *)&v99 - v12);
  __chkstk_darwin(v11);
  uint64_t v15 = (char *)&v99 - v14;
  uint64_t v114 = (void *)type metadata accessor for URL(0LL);
  uint64_t v112 = *(v114 - 1);
  uint64_t v16 = __chkstk_darwin(v114);
  unint64_t v103 = (char *)&v99 - ((v17 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = __chkstk_darwin(v16);
  uint64_t v19 = __chkstk_darwin(v18);
  __chkstk_darwin(v19);
  uint64_t v20 = *(uint64_t (**)(void))(a4 + 72);
  uint64_t v115 = (char *)&v99 - v21;
  uint64_t v113 = v22;
  uint64_t v109 = v23;
  uint64_t v24 = v20();
  unsigned int v104 = a2;
  uint64_t v106 = a4;
  uint64_t v107 = v7;
  uint64_t v105 = a3;
  if ((a2 & 1) != 0)
  {
    unint64_t v25 = *(void (**)(char *, void, uint64_t))(v8 + 104);
    v25(v15, enum case for Connection.Location.temporary(_:), v7);
    uint64_t v26 = type metadata accessor for ConnectionPair();
    swift_allocObject(v26, 32LL, 7LL);
    uint64_t v27 = v111;
    uint64_t v28 = ConnectionPair.init(_:readonly:key:)((uint64_t)v15, 0, 0LL, 0xF000000000000000LL);
    if (v27)
    {
      uint64_t v100 = v8;
      uint64_t v101 = (void (*)(void *, void, uint64_t))v25;
      uint64_t v110 = 0LL;
      uint64_t v29 = v27;
      uint64_t v30 = v114;
      goto LABEL_8;
    }

    uint64_t v36 = (void (*)(uint64_t, void *))v28;
    uint64_t v37 = *(void (**)(uint64_t, void *))(v112 + 8);
    uint64_t v30 = v114;
    v37(v109, v114);
LABEL_26:
    v37(v113, v30);
    v37((uint64_t)v115, v30);
    return v36;
  }

  *uint64_t v13 = URL.path.getter(v24);
  v13[1] = v31;
  unint64_t v32 = *(void (**)(void *, void, uint64_t))(v8 + 104);
  v32(v13, enum case for Connection.Location.uri(_:), v7);
  uint64_t v33 = v111;
  uint64_t v34 = (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 64))(a3, a4);
  uint64_t v29 = v33;
  uint64_t v100 = v8;
  if (!v33)
  {
    uint64_t v38 = v34;
    unint64_t v39 = v35;
    uint64_t v40 = type metadata accessor for ConnectionPair();
    swift_allocObject(v40, 32LL, 7LL);
    uint64_t v41 = ConnectionPair.init(_:readonly:key:)((uint64_t)v13, 0, v38, v39);
    uint64_t v30 = v114;
    uint64_t v36 = (void (*)(uint64_t, void *))v41;
    uint64_t v37 = *(void (**)(uint64_t, void *))(v112 + 8);
    v37(v109, v114);
    goto LABEL_26;
  }

  uint64_t v101 = v32;
  (*(void (**)(void *, uint64_t))(v8 + 8))(v13, v7);
  uint64_t v110 = 0LL;
  uint64_t v30 = v114;
LABEL_8:
  uint64_t v42 = v112;
  uint64_t v114 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v43 = v103;
  (*(void (**)(char *, char *, void *))(v42 + 16))(v103, v115, v30);
  swift_errorRetain(v29);
  uint64_t v44 = swift_errorRetain(v29);
  uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
  os_log_type_t v46 = static os_log_type_t.error.getter(v45);
  BOOL v47 = os_log_type_enabled(v45, v46);
  uint64_t v111 = v29;
  if (v47)
  {
    uint64_t v48 = v43;
    uint64_t v49 = swift_slowAlloc(22LL, -1LL);
    uint64_t v50 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v102 = (void *)swift_slowAlloc(32LL, -1LL);
    id v117 = v102;
    *(_DWORD *)uint64_t v49 = 136446466;
    uint64_t v51 = sub_100007864( (unint64_t *)&qword_10099D308,  (uint64_t (*)(uint64_t))&type metadata accessor for URL,  (uint64_t)&protocol conformance descriptor for URL);
    uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter(v30, v51);
    uint64_t v116 = sub_1003F11D4(v52, v53, (uint64_t *)&v117);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v49 + 4, v49 + 12);
    swift_bridgeObjectRelease();
    uint64_t v112 = *(void *)(v112 + 8);
    ((void (*)(char *, void *))v112)(v48, v30);
    *(_WORD *)(v49 + 12) = 2114;
    uint64_t v54 = _convertErrorToNSError(_:)(v111);
    uint64_t v116 = v54;
    uint64_t v55 = v111;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v116, &v117, v49 + 14, v49 + 22);
    *uint64_t v50 = v54;
    swift_errorRelease(v55);
    swift_errorRelease(v55);
    _os_log_impl((void *)&_mh_execute_header, v45, v46, "Unable to open %{public}s: %{public}@", (uint8_t *)v49, 0x16u);
    uint64_t v56 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v50, 1LL, v56);
    swift_slowDealloc(v50, -1LL, -1LL);
    uint64_t v57 = v102;
    swift_arrayDestroy(v102, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v57, -1LL, -1LL);
    swift_slowDealloc(v49, -1LL, -1LL);
  }

  else
  {

    uint64_t v112 = *(void *)(v42 + 8);
    ((void (*)(char *, void *))v112)(v43, v30);
    swift_errorRelease(v29);
    id v58 = (id)swift_errorRelease(v29);
  }

  uint64_t v59 = v109;
  uint64_t v60 = v105;
  uint64_t v61 = v107;
  uint64_t v62 = v101;
  if ((v104 & 1) != 0)
  {
    uint64_t v63 = v108;
    uint64_t v64 = v106;
  }

  else
  {
    uint64_t v65 = v30;
    URL._bridgeToObjectiveC()((NSURL *)v104);
    __int128 v67 = v66;
    id v117 = 0LL;
    unsigned int v68 = [v114 removeItemAtURL:v66 error:&v117];

    id v69 = v117;
    if (v68)
    {
      id v70 = v117;
    }

    else
    {
      id v72 = v117;
      uint64_t v73 = _convertNSErrorToError(_:)(v69);

      swift_willThrow(v74);
      swift_errorRelease(v73);
      uint64_t v110 = 0LL;
    }

    URL._bridgeToObjectiveC()(v71);
    uint64_t v76 = v75;
    id v117 = 0LL;
    unsigned int v77 = [v114 removeItemAtURL:v75 error:&v117];

    id v78 = v117;
    if (v77)
    {
      id v79 = v117;
    }

    else
    {
      id v81 = v117;
      uint64_t v82 = _convertNSErrorToError(_:)(v78);

      swift_willThrow(v83);
      swift_errorRelease(v82);
      uint64_t v110 = 0LL;
    }

    URL._bridgeToObjectiveC()(v80);
    uint64_t v85 = v84;
    id v117 = 0LL;
    unsigned int v86 = [v114 removeItemAtURL:v84 error:&v117];

    id v87 = v117;
    if (v86)
    {
      id v58 = v117;
    }

    else
    {
      id v88 = v117;
      uint64_t v89 = _convertNSErrorToError(_:)(v87);

      swift_willThrow(v90);
      id v58 = (id)swift_errorRelease(v89);
      uint64_t v110 = 0LL;
    }

    uint64_t v30 = v65;
    uint64_t v63 = v108;
    uint64_t v64 = v106;
  }

  *uint64_t v63 = URL.path.getter(v58);
  v63[1] = v91;
  v62(v63, enum case for Connection.Location.uri(_:), v61);
  uint64_t v92 = v110;
  uint64_t v93 = (*(uint64_t (**)(uint64_t, uint64_t))(v64 + 64))(v60, v64);
  if (!v92)
  {
    uint64_t v95 = v93;
    unint64_t v96 = v94;
    uint64_t v97 = type metadata accessor for ConnectionPair();
    swift_allocObject(v97, 32LL, 7LL);
    uint64_t v36 = (void (*)(uint64_t, void *))ConnectionPair.init(_:readonly:key:)((uint64_t)v63, 0, v95, v96);

    swift_errorRelease(v111);
    uint64_t v37 = (void (*)(uint64_t, void *))v112;
    ((void (*)(uint64_t, void *))v112)(v59, v30);
    goto LABEL_26;
  }

  swift_errorRelease(v111);
  (*(void (**)(void *, uint64_t))(v100 + 8))(v63, v61);
  uint64_t v36 = (void (*)(uint64_t, void *))v112;
  ((void (*)(uint64_t, void *))v112)(v59, v30);
  v36(v113, v30);
  v36((uint64_t)v115, v30);
  return v36;
}

void sub_1003EEFB0()
{
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.startup()()
{
  uint64_t v4 = v2;
  uint64_t v5 = v1;
  uint64_t v6 = v0;
  if (((*(uint64_t (**)(void))(v1 + 56))() & 1) != 0 && static Database.beforeFirstUnlock.getter())
  {
    unint64_t v7 = sub_100086500();
    uint64_t v8 = swift_allocError(&type metadata for DatabaseError, v7, 0LL, 0LL);
    int v10 = 4;
LABEL_6:
    *(_DWORD *)uint64_t v9 = v10;
    *(_BYTE *)(v9 + 4) = 1;
    swift_willThrow(v8);
    return;
  }

  uint64_t v11 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 16);
  uint64_t v12 = v11(v6, v5);
  swift_release();
  if (v12)
  {
    unint64_t v13 = sub_100086500();
    uint64_t v8 = swift_allocError(&type metadata for DatabaseError, v13, 0LL, 0LL);
    int v10 = 3;
    goto LABEL_6;
  }

  (*(void (**)(uint64_t, uint64_t))(v5 + 112))(v6, v5);
  if (!v3)
  {
    uint64_t v14 = v11(v6, v5);
    if (!v14)
    {
      unint64_t v30 = sub_100086500();
      uint64_t v8 = swift_allocError(&type metadata for DatabaseError, v30, 0LL, 0LL);
      int v10 = 2;
      goto LABEL_6;
    }

    uint64_t v15 = *(void *)(v14 + 24);
    swift_retain();
    swift_release();
    v16._uint64_t countAndFlagsBits = 0xD000000000000019LL;
    v16._object = (void *)0x8000000100851C30LL;
    Connection.execute(_:)(v16);
    if (v17 || (Database.optimize()(), v19))
    {
LABEL_40:
      swift_release();
      return;
    }

    uint64_t v20 = Connection.handle.getter(v18);
    _sqlite3_maintain_load_factor(v20, 0LL);
    signed int v70 = Connection.userVersion.getter();
    uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t))(v5 + 40);
    if ((int)v21(v6, v5) < v70)
    {
      if (qword_10099B3F8 == -1)
      {
LABEL_14:
        uint64_t v22 = type metadata accessor for Logger(0LL);
        sub_10000A720(v22, (uint64_t)qword_100A2A910);
        uint64_t v23 = swift_unknownObjectRetain_n(v4, 3LL);
        uint64_t v24 = (os_log_s *)Logger.logObject.getter(v23);
        os_log_type_t v25 = static os_log_type_t.fault.getter(v24);
        if (os_log_type_enabled(v24, v25))
        {
          uint64_t v61 = v21;
          uint64_t v26 = swift_slowAlloc(24LL, -1LL);
          uint64_t v67 = swift_slowAlloc(32LL, -1LL);
          uint64_t v73 = v67;
          *(_DWORD *)uint64_t v26 = 136446722;
          uint64_t v75 = v4;
          os_log_type_t typea = v25;
          uint64_t v27 = dispatch thunk of CustomStringConvertible.description.getter(v6, *(void *)(v5 + 8));
          uint64_t v75 = sub_1003F11D4(v27, v28, &v73);
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, &v76, v26 + 4, v26 + 12);
          swift_unknownObjectRelease(v4);
          swift_bridgeObjectRelease();
          *(_WORD *)(v26 + 12) = 1024;
          LODWORD(v75) = v70;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, (char *)&v75 + 4, v26 + 14, v26 + 18);
          *(_WORD *)(v26 + 18) = 1024;
          int v29 = v61(v6, v5);
          swift_unknownObjectRelease(v4);
          LODWORD(v75) = v29;
          UnsafeMutableRawBufferPointer.copyMemory(from:)(&v75, (char *)&v75 + 4, v26 + 20, v26 + 24);
          swift_unknownObjectRelease(v4);
          _os_log_impl( (void *)&_mh_execute_header,  v24,  typea,  "%{public}s Schema too new! (%d) -- expected <= %d",  (uint8_t *)v26,  0x18u);
          swift_arrayDestroy(v67, 1LL, (char *)&type metadata for Any + 8);
          swift_slowDealloc(v67, -1LL, -1LL);
          swift_slowDealloc(v26, -1LL, -1LL);
        }

        else
        {

          swift_unknownObjectRelease_n(v4, 3LL);
        }

        unint64_t v52 = sub_100086500();
        uint64_t v53 = swift_allocError(&type metadata for DatabaseError, v52, 0LL, 0LL);
        *(_DWORD *)uint64_t v54 = v70;
        *(_BYTE *)(v54 + 4) = 0;
        swift_willThrow(v53);
        goto LABEL_40;
      }

void sub_1003EFC4C()
{
}

uint64_t Database.description.getter(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = (*(uint64_t (**)(void))(a2 + 16))();
  if (v4)
  {
    uint64_t v5 = v4;
    _StringGuts.grow(_:)(22LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    uint64_t v6 = *(void *)(a2 + 8);
    v7._uint64_t countAndFlagsBits = CustomStringConvertible.typeDescription.getter(a1, v6);
    object = v7._object;
    String.append(_:)(v7);
    swift_bridgeObjectRelease(object);
    v9._uint64_t countAndFlagsBits = 8250LL;
    v9._object = (void *)0xE200000000000000LL;
    String.append(_:)(v9);
    v10._uint64_t countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(a1, v6);
    uint64_t v11 = v10._object;
    String.append(_:)(v10);
    swift_bridgeObjectRelease(v11);
    v12._uint64_t countAndFlagsBits = 0x206574694C515320LL;
    v12._object = (void *)0xE900000000000076LL;
    String.append(_:)(v12);
    v13._uint64_t countAndFlagsBits = 0x322E33342E33LL;
    v13._object = (void *)0xE600000000000000LL;
    String.append(_:)(v13);
    v14._uint64_t countAndFlagsBits = 32LL;
    v14._object = (void *)0xE100000000000000LL;
    String.append(_:)(v14);
    v15._uint64_t countAndFlagsBits = Connection.description.getter();
    Swift::String v16 = v15._object;
    String.append(_:)(v15);
    swift_bridgeObjectRelease(v16);
    v17._uint64_t countAndFlagsBits = 62LL;
    v17._object = (void *)0xE100000000000000LL;
    String.append(_:)(v17);
    swift_release(v5);
  }

  else
  {
    _StringGuts.grow(_:)(34LL);
    swift_bridgeObjectRelease(0xE000000000000000LL);
    uint64_t v18 = *(void *)(a2 + 8);
    v19._uint64_t countAndFlagsBits = CustomStringConvertible.typeDescription.getter(a1, v18);
    uint64_t v20 = v19._object;
    String.append(_:)(v19);
    swift_bridgeObjectRelease(v20);
    v21._uint64_t countAndFlagsBits = 8250LL;
    v21._object = (void *)0xE200000000000000LL;
    String.append(_:)(v21);
    v22._uint64_t countAndFlagsBits = CustomStringConvertible<>.addressDescription.getter(a1, v18);
    uint64_t v23 = v22._object;
    String.append(_:)(v22);
    swift_bridgeObjectRelease(v23);
    v24._uint64_t countAndFlagsBits = 0x206574694C515320LL;
    v24._object = (void *)0xE900000000000076LL;
    String.append(_:)(v24);
    v25._uint64_t countAndFlagsBits = 0x322E33342E33LL;
    v25._object = (void *)0xE600000000000000LL;
    String.append(_:)(v25);
    v26._object = (void *)0x8000000100851C70LL;
    v26._uint64_t countAndFlagsBits = 0xD000000000000010LL;
    String.append(_:)(v26);
  }

  return 60LL;
}

BOOL static DatabaseCheckpointMode.__derived_enum_equals(_:_:)(char a1, char a2)
{
  return a1 == a2;
}

void DatabaseCheckpointMode.hash(into:)(uint64_t a1, unsigned __int8 a2)
{
}

Swift::Int DatabaseCheckpointMode.hashValue.getter(unsigned __int8 a1)
{
  return Hasher._finalize()();
}

BOOL static Database.beforeFirstUnlock.getter()
{
  uint64_t v0 = type metadata accessor for SystemInfo.DeviceLockState(0LL);
  uint64_t v1 = *(void *)(v0 - 8);
  uint64_t v2 = __chkstk_darwin(v0);
  uint64_t v4 = (char *)&v12 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = __chkstk_darwin(v2);
  Swift::String v7 = (char *)&v12 - v6;
  static SystemInfo.lockState.getter(v5);
  (*(void (**)(char *, void, uint64_t))(v1 + 104))( v4,  enum case for SystemInfo.DeviceLockState.beforeFirstUnlock(_:),  v0);
  uint64_t v8 = sub_100007864( &qword_1009B0560,  (uint64_t (*)(uint64_t))&type metadata accessor for SystemInfo.DeviceLockState,  (uint64_t)&protocol conformance descriptor for SystemInfo.DeviceLockState);
  dispatch thunk of RawRepresentable.rawValue.getter(&v13, v0, v8);
  dispatch thunk of RawRepresentable.rawValue.getter(&v12, v0, v8);
  BOOL v9 = v13 == v12;
  Swift::String v10 = *(void (**)(char *, uint64_t))(v1 + 8);
  v10(v4, v0);
  v10(v7, v0);
  return v9;
}

uint64_t Database.await(state:)()
{
  return sub_1003F1C24(*(uint64_t (**)(void))(v0 + 8));
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.optimize()()
{
}

void *Connection.userVersion.getter()
{
  unint64_t result = Connection.scalar(_:_:)(v6, 0xD000000000000013LL, 0x80000001008611F0LL, _swiftEmptyArrayStorage);
  if (!v0)
  {
    if (!v6[3])
    {
LABEL_7:
      sub_100015794((uint64_t)v6, &qword_1009ACF20);
      goto LABEL_8;
    }

    uint64_t v2 = sub_100004AEC(&qword_1009ACF28);
    if ((swift_dynamicCast(&v7, v6, v2, &type metadata for Int64, 6LL) & 1) == 0)
    {
LABEL_8:
      unint64_t v3 = sub_100086500();
      uint64_t v4 = swift_allocError(&type metadata for DatabaseError, v3, 0LL, 0LL);
      *(_DWORD *)uint64_t v5 = 0;
      *(_BYTE *)(v5 + 4) = 0;
      return (void *)swift_willThrow(v4);
    }

    unint64_t result = (void *)v7;
    if (v7 < (uint64_t)0xFFFFFFFF80000000LL)
    {
      __break(1u);
      return result;
    }

    if (v7 > 0x7FFFFFFF)
    {
      __break(1u);
      goto LABEL_7;
    }
  }

  return result;
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Connection.update(userVersion:)( Swift::Int32 userVersion)
{
  v2._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int32,  &protocol witness table for Int32);
  object = v2._object;
  String.append(_:)(v2);
  swift_bridgeObjectRelease(object);
  uint64_t v4 = Connection.run(_:_:)(0xD000000000000016LL, 0x8000000100851C50LL, &_swiftEmptyArrayStorage);
  swift_bridgeObjectRelease(0x8000000100851C50LL);
  if (!v1) {
    swift_release(v4);
  }
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.excludeFromBackup()()
{
}

uint64_t sub_1003F0244(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return (*(uint64_t (**)(uint64_t, uint64_t))(a4 + 80))(a3, a4);
}

uint64_t sub_1003F03CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[22] = a6;
  v7[23] = a7;
  v7[20] = a4;
  v7[21] = a5;
  return swift_task_switch(sub_1003F03E8, 0LL, 0LL);
}

uint64_t sub_1003F03E8()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001CEB4((uint64_t)&xmmword_1009BED80, v0 + 56);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    unint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099CB08 + dword_10099CB08);
    Swift::String v2 = (void *)swift_task_alloc(unk_10099CB0C);
    *(void *)(v0 + 192) = v2;
    *Swift::String v2 = v0;
    v2[1] = sub_1003F04CC;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1003F04CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 192LL);
  *(void *)(*(void *)v1 + 20Hasher.init(_seed:)(v3, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003F0528, 0LL, 0LL);
}

uint64_t sub_1003F0528()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 200))
  {
    uint64_t v2 = *(void *)(v0 + 168);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v3 = swift_unknownObjectRetain_n(v2, 2LL);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = *(void *)(v0 + 168);
      uint64_t v19 = *(void *)(v0 + 184);
      uint64_t v20 = *(void *)(v0 + 176);
      uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v8 = swift_slowAlloc(32LL, -1LL);
      uint64_t v21 = v8;
      *(_DWORD *)uint64_t v7 = 136446210;
      *(void *)(v0 + 144) = v6;
      uint64_t v9 = CustomStringConvertible.typeDescription.getter(v20, *(void *)(v19 + 8));
      *(void *)(v0 + 152) = sub_1003F11D4(v9, v10, &v21);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 152, v0 + 160, v7 + 4, v7 + 12);
      swift_bridgeObjectRelease();
      swift_unknownObjectRelease_n(v6, 2LL);
      _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Waiting for first unlock to open encrypted SQLite database for %{public}s",  v7,  0xCu);
      swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v8, -1LL, -1LL);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    else
    {
      uint64_t v17 = *(void *)(v0 + 168);

      swift_unknownObjectRelease_n(v17, 2LL);
    }

    uint64_t v18 = (void *)swift_task_alloc(dword_1009A72DC);
    *(void *)(v0 + 208) = v18;
    void *v18 = v0;
    v18[1] = sub_1003F07C4;
    return sub_100265F64();
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B858 != -1) {
      swift_once(&qword_10099B858, sub_1006BF8AC);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    uint64_t v12 = sub_10000A720(v11, (uint64_t)qword_100A2B248);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.error.getter(v13);
    if (os_log_type_enabled(v13, v14))
    {
      Swift::String v15 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)Swift::String v15 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "Unable to get FirstUnlockService", v15, 2u);
      swift_slowDealloc(v15, -1LL, -1LL);
    }

    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1003F07C4()
{
  return swift_task_switch(sub_1003F0818, 0LL, 0LL);
}

uint64_t sub_1003F0818()
{
  uint64_t v1 = swift_unknownObjectRetain_n(*(void *)(v0 + 168), 2LL);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v5 = *(void *)(v0 + 176);
    uint64_t v4 = *(void *)(v0 + 184);
    uint64_t v6 = *(void *)(v0 + 168);
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v13 = v8;
    *(_DWORD *)uint64_t v7 = 136315138;
    *(void *)(v0 + 128) = v6;
    uint64_t v9 = CustomStringConvertible.typeDescription.getter(v5, *(void *)(v4 + 8));
    *(void *)(v0 + 136) = sub_1003F11D4(v9, v10, &v13);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v7 + 4, v7 + 12);
    swift_bridgeObjectRelease();
    swift_unknownObjectRelease_n(v6, 2LL);
    _os_log_impl( (void *)&_mh_execute_header,  v2,  v3,  "SQLite database for %s opened successfully after device unlock.",  v7,  0xCu);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  else
  {
    uint64_t v11 = *(void *)(v0 + 168);

    swift_unknownObjectRelease_n(v11, 2LL);
  }

  swift_release();
  return (*(uint64_t (**)(void))(v0 + 8))();
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.incrementalVacuum()()
{
}

uint64_t sub_1003F0B34(uint64_t a1, uint64_t a2, uint64_t a3, void *a4)
{
  if (((*(uint64_t (**)(void))(a2 + 56))() & 1) != 0 && static Database.beforeFirstUnlock.getter())
  {
    unint64_t v8 = sub_100086500();
    uint64_t v9 = swift_allocError(&type metadata for DatabaseError, v8, 0LL, 0LL);
    int v11 = 4;
  }

  else
  {
    if ((*(uint64_t (**)(uint64_t, uint64_t))(a2 + 16))(a1, a2))
    {
      swift_retain();
      swift_release();
      v12._uint64_t countAndFlagsBits = a3;
      v12._object = a4;
      Connection.execute(_:)(v12);
      return swift_release();
    }

    unint64_t v14 = sub_100086500();
    uint64_t v9 = swift_allocError(&type metadata for DatabaseError, v14, 0LL, 0LL);
    int v11 = 2;
  }

  *(_DWORD *)uint64_t v10 = v11;
  *(_BYTE *)(v10 + 4) = 1;
  return swift_willThrow(v9);
}

Swift::Void __swiftcall __spoils<CF,ZF,NF,VF,X0,X1,X2,X3,X4,X5,X6,X7,X8,X9,X10,X11,X12,X13,X14,X15,X16,X17,X21,Q0,Q1,Q2,Q3,Q4,Q5,Q6,Q7,Q16,Q17,Q18,Q19,Q20,Q21,Q22,Q23,Q24,Q25,Q26,Q27,Q28,Q29,Q30,Q31> Database.checkpoint(mode:)( searchpartyd::DatabaseCheckpointMode mode)
{
  uint64_t v3 = v2;
  uint64_t v4 = v1;
  if (((*(uint64_t (**)())(v2 + 56))() & 1) != 0 && static Database.beforeFirstUnlock.getter())
  {
    unint64_t v6 = sub_100086500();
    uint64_t v7 = swift_allocError(&type metadata for DatabaseError, v6, 0LL, 0LL);
    int v9 = 4;
LABEL_11:
    *(_DWORD *)uint64_t v8 = v9;
    *(_BYTE *)(v8 + 4) = 1;
    swift_willThrow(v7);
    return;
  }

  if (!(*(uint64_t (**)(uint64_t, uint64_t))(v3 + 16))(v4, v3))
  {
    unint64_t v17 = sub_100086500();
    uint64_t v7 = swift_allocError(&type metadata for DatabaseError, v17, 0LL, 0LL);
    int v9 = 2;
    goto LABEL_11;
  }

  swift_retain();
  uint64_t v10 = swift_release();
  *(void *)pnCkpt = 0LL;
  int v11 = (sqlite3 *)Connection.handle.getter(v10);
  sqlite3_wal_checkpoint_v2(v11, "main", mode, &pnCkpt[1], pnCkpt);
  if (qword_10099B320 != -1) {
    swift_once(&qword_10099B320, sub_10035830C);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = sub_10000A720(v12, (uint64_t)qword_100A2A718);
  unint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.default.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = swift_slowAlloc(14LL, -1LL);
    *(_DWORD *)uint64_t v16 = 67109376;
    swift_beginAccess(pnCkpt, v22, 0LL, 0LL);
    int v20 = pnCkpt[0];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v20, &v21, v16 + 4, v16 + 8);
    *(_WORD *)(v16 + 8) = 1024;
    swift_beginAccess(&pnCkpt[1], &v20, 0LL, 0LL);
    int v18 = pnCkpt[1];
    UnsafeMutableRawBufferPointer.copyMemory(from:)(&v18, pnCkpt, v16 + 10, v16 + 14);
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Checkpointed %d/%d", (uint8_t *)v16, 0xEu);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  swift_release();
}

void Connection.rekey(key:)(uint64_t a1, uint64_t a2)
{
  __asm { BR              X10 }

uint64_t sub_1003F0EF8()
{
  uint64_t v7 = v1;
  __int16 v8 = v2;
  char v9 = BYTE2(v2);
  char v10 = BYTE3(v2);
  char v11 = BYTE4(v2);
  char v12 = BYTE5(v2);
  uint64_t v3 = swift_retain();
  uint64_t v4 = Connection.handle.getter(v3);
  uint64_t v5 = ((uint64_t (*)(uint64_t, const char *, uint64_t *, void))sqlite3_rekey_v2)(v4, "main", &v7, BYTE6(v2));
  swift_release();
  sub_100016F9C(v1, v2);
  Connection.scalar(_:_:)(&v7, 0xD000000000000023LL, 0x80000001008611C0LL, _swiftEmptyArrayStorage);
  if (!v0) {
    sub_100015794((uint64_t)&v7, &qword_1009ACF20);
  }
  return v5;
}

uint64_t sub_1003F1160()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A910);
  sub_10000A720(v0, (uint64_t)qword_100A2A910);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0x6573616261746164LL,  0xE800000000000000LL);
}

uint64_t sub_1003F11D4(uint64_t a1, unint64_t a2, uint64_t *a3)
{
  uint64_t v6 = sub_1003F12A4(v12, 0LL, 0LL, 1, a1, a2);
  uint64_t v7 = v12[0];
  if (v6)
  {
    uint64_t v8 = v6;
    uint64_t ObjectType = (void *)swift_getObjectType(v6);
    v12[0] = v8;
    uint64_t v9 = *a3;
    if (*a3)
    {
      sub_10006A650((uint64_t)v12, *a3);
      *a3 = v9 + 32;
    }
  }

  else
  {
    uint64_t ObjectType = &type metadata for _StringGuts;
    v12[0] = a1;
    v12[1] = a2;
    uint64_t v10 = *a3;
    if (*a3)
    {
      sub_10006A650((uint64_t)v12, *a3);
      *a3 = v10 + 32;
    }

    swift_bridgeObjectRetain(a2);
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v12);
  return v7;
}

uint64_t sub_1003F12A4(uint64_t *a1, char *__dst, uint64_t a3, char a4, uint64_t a5, unint64_t a6)
{
  if ((a6 & 0x2000000000000000LL) != 0)
  {
    if ((a4 & 1) == 0)
    {
      if (__dst)
      {
        uint64_t v12 = HIBYTE(a6) & 0xF;
        if (a3 - (uint64_t)__dst > v12)
        {
          __src[0] = a5;
          __src[1] = a6 & 0xFFFFFFFFFFFFFFLL;
          if (__src >= (void *)&__dst[v12] || (char *)__src + v12 <= __dst)
          {
            memcpy(__dst, __src, HIBYTE(a6) & 0xF);
            UnsafeMutableRawBufferPointer.subscript.setter(0LL, HIBYTE(a6) & 0xF, __dst, a3);
            uint64_t result = 0LL;
            *a1 = (uint64_t)__dst;
            return result;
          }

          goto LABEL_17;
        }
      }
    }

uint64_t sub_1003F145C(uint64_t a1, unint64_t a2)
{
  uint64_t v2 = (uint64_t)sub_1003F14F0(a1, a2);
  if ((swift_isUniquelyReferenced_nonNull_native(v2) & 1) == 0) {
    uint64_t v2 = sub_1003F1664(0, *(void *)(v2 + 16) + 1LL, 1, (char *)v2);
  }
  unint64_t v4 = *(void *)(v2 + 16);
  unint64_t v3 = *(void *)(v2 + 24);
  if (v4 >= v3 >> 1) {
    uint64_t v2 = sub_1003F1664(v3 > 1, v4 + 1, 1, (char *)v2);
  }
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v4 + 1;
  *(_BYTE *)(v2 + 32 + v4) = 0;
  return v2;
}

void *sub_1003F14F0(uint64_t a1, unint64_t a2)
{
  if ((a2 & 0x1000000000000000LL) != 0) {
    goto LABEL_10;
  }
  if ((a2 & 0x2000000000000000LL) != 0) {
    uint64_t v4 = HIBYTE(a2) & 0xF;
  }
  else {
    uint64_t v4 = a1 & 0xFFFFFFFFFFFFLL;
  }
  if (v4)
  {
    while (1)
    {
      uint64_t v5 = sub_1001B90C4(v4, 0LL);
      if (v4 < 0) {
        break;
      }
      uint64_t v6 = v5;
      uint64_t v7 = _StringGuts.copyUTF8(into:)(v5 + 4, v4, a1, a2);
      if ((v8 & 1) != 0) {
        goto LABEL_14;
      }
      if (v7 == v4) {
        return v6;
      }
      LOBYTE(v10) = 2;
      _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "invalid Collection: less than 'count' elements in collection",  60LL,  2LL,  "Swift/ContiguousArrayBuffer.swift",  33LL,  v10,  1122LL,  0);
      __break(1u);
LABEL_10:
      uint64_t v4 = String.UTF8View._foreignCount()();
      if (!v4) {
        return &_swiftEmptyArrayStorage;
      }
    }

    LOBYTE(v10) = 2;
    _fatalErrorMessage(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "UnsafeMutableBufferPointer with negative count",  46LL,  2LL,  "Swift/UnsafeBufferPointer.swift",  31LL,  v10,  71LL,  0);
    __break(1u);
LABEL_14:
    LOBYTE(v10) = 2;
    uint64_t result = (void *)_assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Insufficient space allocated to copy string contents",  52LL,  2LL,  "Swift/StringUTF8View.swift",  26LL,  v10,  430LL,  0);
    __break(1u);
  }

  else
  {
    return &_swiftEmptyArrayStorage;
  }

  return result;
}

uint64_t sub_1003F1664(char a1, int64_t a2, char a3, char *a4)
{
  if ((a3 & 1) != 0)
  {
    unint64_t v6 = *((void *)a4 + 3);
    int64_t v7 = v6 >> 1;
    if ((uint64_t)(v6 >> 1) < a2)
    {
      if (v7 + 0x4000000000000000LL < 0)
      {
        __break(1u);
        goto LABEL_30;
      }

      int64_t v7 = v6 & 0xFFFFFFFFFFFFFFFELL;
    }
  }

  else
  {
    int64_t v7 = a2;
  }

  int64_t v8 = *((void *)a4 + 2);
  if (v7 <= v8) {
    int64_t v9 = *((void *)a4 + 2);
  }
  else {
    int64_t v9 = v7;
  }
  if (v9)
  {
    uint64_t v10 = sub_100004AEC(&qword_10099D328);
    char v11 = (char *)swift_allocObject(v10, v9 + 32, 7LL);
    size_t v12 = j__malloc_size(v11);
    *((void *)v11 + 2) = v8;
    *((void *)v11 + 3) = 2 * v12 - 64;
  }

  else
  {
    char v11 = (char *)&_swiftEmptyArrayStorage;
  }

  uint64_t v13 = v11 + 32;
  int v14 = a4 + 32;
  if ((a1 & 1) != 0)
  {
    if (v11 != a4 || v13 >= &v14[v8]) {
      memmove(v13, v14, v8);
    }
    *((void *)a4 + 2) = 0LL;
    goto LABEL_28;
  }

  if (v14 >= &v13[v8] || v13 >= &v14[v8])
  {
    memcpy(v13, v14, v8);
LABEL_28:
    swift_bridgeObjectRelease(a4);
    return (uint64_t)v11;
  }

uint64_t sub_1003F17B0(uint64_t a1, int *a2)
{
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = a1;
  uint64_t v5 = (uint64_t (*)(uint64_t))((char *)a2 + *a2);
  unint64_t v3 = (void *)swift_task_alloc(a2[1]);
  *(void *)(v2 + 24) = v3;
  *unint64_t v3 = v2;
  v3[1] = sub_1003F1818;
  return v5(v2 + 32);
}

uint64_t sub_1003F1818()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(_BYTE **)(*v0 + 16);
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 24));
  *uint64_t v2 = *(_BYTE *)(v1 + 32);
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1003F1868()
{
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = (*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  swift_unknownObjectRelease(*(void *)(v0 + v6));
  return swift_deallocObject(v0, v6 + 8, v5);
}

uint64_t sub_1003F18F8()
{
  uint64_t v2 = *(void *)(type metadata accessor for Logger(0LL) - 8);
  unint64_t v3 = (*(unsigned __int8 *)(v2 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = v0 + v3;
  uint64_t v5 = *(void *)(v0 + ((*(void *)(v2 + 64) + v3 + 7) & 0xFFFFFFFFFFFFF8LL));
  uint64_t v6 = swift_task_alloc(dword_1009ACF34);
  __int128 v7 = *(_OWORD *)(v0 + 32);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v6;
  *(void *)uint64_t v6 = v1;
  *(void *)(v6 + 8) = sub_1000159BC;
  *(_OWORD *)(v6 + 176) = v7;
  *(void *)(v6 + 160) = v4;
  *(void *)(v6 + 168) = v5;
  return swift_task_switch(sub_1003F03E8, 0LL, 0LL);
}

uint64_t sub_1003F1994(uint64_t a1, uint64_t a2)
{
  uint64_t v34 = type metadata accessor for URLResourceValues(0LL);
  uint64_t v33 = *(void *)(v34 - 8);
  __chkstk_darwin(v34);
  uint64_t v6 = (char *)&v32 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for URL(0LL);
  uint64_t v32 = *(void *)(v7 - 8);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v32 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = __chkstk_darwin(v8);
  uint64_t v13 = (char *)&v32 - v12;
  __chkstk_darwin(v11);
  os_log_type_t v15 = (char *)&v32 - v14;
  id v16 = [(id)objc_opt_self(NSFileManager) defaultManager];
  uint64_t v17 = (*(uint64_t (**)(char *, char *, char *, uint64_t, uint64_t))(a2 + 72))(v15, v13, v10, a1, a2);
  URLResourceValues.init()(v17);
  uint64_t v18 = URLResourceValues.isExcludedFromBackup.setter(1LL);
  URL.path.getter(v18);
  uint64_t v20 = v19;
  NSString v21 = String._bridgeToObjectiveC()();
  swift_bridgeObjectRelease(v20);
  LODWORD(v20) = [v16 fileExistsAtPath:v21];

  if (!(_DWORD)v20 || (uint64_t v22 = URL.setResourceValues(_:)(v6), !v2))
  {
    URL.path.getter(v22);
    uint64_t v24 = v23;
    NSString v25 = String._bridgeToObjectiveC()();
    swift_bridgeObjectRelease(v24);
    LODWORD(v24) = [v16 fileExistsAtPath:v25];

    if (!(_DWORD)v24 || (uint64_t v26 = URL.setResourceValues(_:)(v6), !v2))
    {
      URL.path.getter(v26);
      uint64_t v28 = v27;
      NSString v29 = String._bridgeToObjectiveC()();
      swift_bridgeObjectRelease(v28);
      LODWORD(v28) = [v16 fileExistsAtPath:v29];

      if ((_DWORD)v28) {
        URL.setResourceValues(_:)(v6);
      }
    }
  }

  (*(void (**)(char *, uint64_t))(v33 + 8))(v6, v34);
  unint64_t v30 = *(void (**)(char *, uint64_t))(v32 + 8);
  v30(v10, v7);
  v30(v13, v7);
  return ((uint64_t (*)(char *, uint64_t))v30)(v15, v7);
}

uint64_t sub_1003F1C24(uint64_t (*a1)(void))
{
  return a1();
}

void sub_1003F1C30(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5)
{
  if (!__DataStorage._bytes.getter() || !__OFSUB__(a1, __DataStorage._offset.getter()))
  {
    uint64_t v7 = __DataStorage._length.getter();
    Connection.handle.getter(v7);
    __asm { BR              X10 }
  }

  __break(1u);
  JUMPOUT(0x1003F1D28LL);
}

unint64_t sub_1003F1D40()
{
  unint64_t result = qword_1009ACF48;
  if (!qword_1009ACF48)
  {
    unint64_t result = swift_getWitnessTable( &protocol conformance descriptor for DatabaseCheckpointMode,  &type metadata for DatabaseCheckpointMode);
    atomic_store(result, (unint64_t *)&qword_1009ACF48);
  }

  return result;
}

unint64_t sub_1003F1D88()
{
  unint64_t result = qword_1009ACF50;
  if (!qword_1009ACF50)
  {
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for DatabaseState, &type metadata for DatabaseState);
    atomic_store(result, (unint64_t *)&qword_1009ACF50);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for DatabaseCheckpointMode(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 3 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 3) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFD) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFC) {
    return ((uint64_t (*)(void))((char *)&loc_1003F1E18 + 4 * byte_1007FFFB5[v4]))();
  }
  *a1 = a2 + 3;
  return ((uint64_t (*)(void))((char *)sub_1003F1E4C + 4 * byte_1007FFFB0[v4]))();
}

uint64_t sub_1003F1E4C(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003F1E54(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1003F1E5CLL);
  }
  return result;
}

uint64_t sub_1003F1E68(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1003F1E70LL);
  }
  *(_BYTE *)unint64_t result = a2 + 3;
  return result;
}

uint64_t sub_1003F1E74(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003F1E7C(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DatabaseCheckpointMode()
{
  return &type metadata for DatabaseCheckpointMode;
}

uint64_t storeEnumTagSinglePayload for DatabaseState(_BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_1003F1EE4 + 4 * byte_1007FFFBF[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_1003F1F18 + 4 * byte_1007FFFBA[v4]))();
}

uint64_t sub_1003F1F18(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003F1F20(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1003F1F28LL);
  }
  return result;
}

uint64_t sub_1003F1F34(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1003F1F3CLL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_1003F1F40(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003F1F48(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for DatabaseState()
{
  return &type metadata for DatabaseState;
}

uint64_t getEnumTagSinglePayload for DatabaseError(uint64_t a1, int a2)
{
  if (a2 && *(_BYTE *)(a1 + 5)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t storeEnumTagSinglePayload for DatabaseError(uint64_t result, int a2, int a3)
{
  if (a2)
  {
    *(_BYTE *)(result + 4) = 0;
    *(_DWORD *)unint64_t result = a2 - 1;
    if (!a3) {
      return result;
    }
    char v3 = 1;
  }

  else
  {
    if (!a3) {
      return result;
    }
    char v3 = 0;
  }

  *(_BYTE *)(result + 5) = v3;
  return result;
}

uint64_t sub_1003F1FB0(uint64_t a1)
{
  if (*(_BYTE *)(a1 + 4)) {
    return (*(_DWORD *)a1 + 1);
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1003F1FCC(uint64_t result, int a2)
{
  if (a2)
  {
    *(_DWORD *)unint64_t result = a2 - 1;
    *(_BYTE *)(result + 4) = 1;
  }

  else
  {
    *(_BYTE *)(result + 4) = 0;
  }

  return result;
}

ValueMetadata *type metadata accessor for DatabaseError()
{
  return &type metadata for DatabaseError;
}

uint64_t sub_1003F1FFC()
{
  return swift_deallocObject(v0, 32LL, 7LL);
}

uint64_t sub_1003F2020(uint64_t a1)
{
  uint64_t v4 = *(int **)(v1 + 16);
  uint64_t v5 = (void *)swift_task_alloc(dword_1009ACF5C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v2;
  v5[1] = sub_1000159BC;
  return ((uint64_t (*)(uint64_t, int *))((char *)&dword_1009ACF58 + dword_1009ACF58))(a1, v4);
}

uint64_t *sub_1003F2094(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v4 = a1;
  int v5 = *(_DWORD *)(*(void *)(a3 - 8) + 80LL);
  if ((v5 & 0x20000) != 0)
  {
    uint64_t v16 = *a2;
    *uint64_t v4 = *a2;
    uint64_t v4 = (uint64_t *)(v16 + ((v5 + 16LL) & ~(unint64_t)v5));
    swift_retain();
  }

  else
  {
    *a1 = *a2;
    uint64_t v7 = *(int *)(a3 + 20);
    uint64_t v8 = (char *)a1 + v7;
    uint64_t v9 = (char *)a2 + v7;
    uint64_t v10 = type metadata accessor for DateInterval(0LL);
    (*(void (**)(char *, char *, uint64_t))(*(void *)(v10 - 8) + 16LL))(v8, v9, v10);
    uint64_t v11 = *(int *)(a3 + 24);
    uint64_t v12 = (uint64_t *)((char *)v4 + v11);
    uint64_t v13 = (uint64_t *)((char *)a2 + v11);
    uint64_t v14 = *v13;
    unint64_t v15 = v13[1];
    sub_10001736C(*v13, v15);
    *uint64_t v12 = v14;
    v12[1] = v15;
  }

  return v4;
}

uint64_t sub_1003F214C(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = a1 + *(int *)(a2 + 20);
  uint64_t v5 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))(v4, v5);
  return sub_100016F9C(*(void *)(a1 + *(int *)(a2 + 24)), *(void *)(a1 + *(int *)(a2 + 24) + 8));
}

void *sub_1003F21A4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 16LL))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  sub_10001736C(*v12, v14);
  *uint64_t v11 = v13;
  v11[1] = v14;
  return a1;
}

void *sub_1003F2230(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 24LL))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = (void *)((char *)a1 + v10);
  uint64_t v12 = (void *)((char *)a2 + v10);
  uint64_t v13 = *v12;
  unint64_t v14 = v12[1];
  sub_10001736C(*v12, v14);
  uint64_t v15 = *v11;
  unint64_t v16 = v11[1];
  *uint64_t v11 = v13;
  v11[1] = v14;
  sub_100016F9C(v15, v16);
  return a1;
}

void *sub_1003F22C4(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 32LL))(v7, v8, v9);
  *(_OWORD *)((char *)a1 + *(int *)(a3 + swift_release(*(void *)(v0 + 24)) = *(_OWORD *)((char *)a2 + *(int *)(a3 + 24));
  return a1;
}

void *sub_1003F233C(void *a1, void *a2, uint64_t a3)
{
  *a1 = *a2;
  uint64_t v6 = *(int *)(a3 + 20);
  uint64_t v7 = (char *)a1 + v6;
  uint64_t v8 = (char *)a2 + v6;
  uint64_t v9 = type metadata accessor for DateInterval(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v9 - 8) + 40LL))(v7, v8, v9);
  uint64_t v10 = *(int *)(a3 + 24);
  uint64_t v11 = *(void *)((char *)a1 + v10);
  unint64_t v12 = *(void *)((char *)a1 + v10 + 8);
  *(_OWORD *)((char *)a1 + v10) = *(_OWORD *)((char *)a2 + v10);
  sub_100016F9C(v11, v12);
  return a1;
}

uint64_t sub_1003F23C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_getEnumTagSinglePayloadGeneric(a1, a2, a3, sub_1003F23CC);
}

uint64_t sub_1003F23CC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v6 = type metadata accessor for DateInterval(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  if (*(_DWORD *)(v7 + 84) == (_DWORD)a2) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(a1 + *(int *)(a3 + 20), a2, v6);
  }
  uint64_t v9 = *(void *)(a1 + *(int *)(a3 + 24) + 8) >> 60;
  if (((4 * (_DWORD)v9) & 0xC) != 0) {
    return 16 - ((4 * (_DWORD)v9) & 0xC | (v9 >> 2));
  }
  else {
    return 0LL;
  }
}

uint64_t sub_1003F2460(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return swift_storeEnumTagSinglePayloadGeneric(a1, a2, a3, a4, sub_1003F246C);
}

uint64_t sub_1003F246C(uint64_t a1, uint64_t a2, int a3, uint64_t a4)
{
  uint64_t result = type metadata accessor for DateInterval(0LL);
  uint64_t v9 = *(void *)(result - 8);
  if (*(_DWORD *)(v9 + 84) == a3) {
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))( a1 + *(int *)(a4 + 20),  a2,  a2,  result);
  }
  uint64_t v10 = (void *)(a1 + *(int *)(a4 + 24));
  *uint64_t v10 = 0LL;
  v10[1] = (unint64_t)(((-(int)a2 >> 2) & 3) - 4 * (_DWORD)a2) << 60;
  return result;
}

uint64_t type metadata accessor for FamilyCryptoKeysV2(uint64_t a1)
{
  uint64_t result = qword_1009ACFC0;
  if (!qword_1009ACFC0) {
    return swift_getSingletonMetadata(a1, &nominal type descriptor for FamilyCryptoKeysV2);
  }
  return result;
}

uint64_t sub_1003F2534(uint64_t a1)
{
  v4[0] = (char *)&value witness table for Builtin.Int64 + 64;
  uint64_t result = type metadata accessor for DateInterval(319LL);
  if (v3 <= 0x3F)
  {
    v4[1] = *(void *)(result - 8) + 64LL;
    void v4[2] = &unk_100800148;
    swift_initStructMetadata(a1, 256LL, 3LL, v4, a1 + 16);
    return 0LL;
  }

  return result;
}

uint64_t sub_1003F25B4(void *a1)
{
  unint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009AD018);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)&v19 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_1003F2BD4();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for FamilyCryptoKeysV2.CodingKeys,  &type metadata for FamilyCryptoKeysV2.CodingKeys,  v11,  v9,  v10);
  uint64_t v12 = *v3;
  LOBYTE(v21) = 0;
  KeyedEncodingContainer.encode(_:forKey:)(v12, &v21, v5);
  if (!v2)
  {
    uint64_t v13 = type metadata accessor for FamilyCryptoKeysV2(0LL);
    unint64_t v14 = (char *)v3 + *(int *)(v13 + 20);
    LOBYTE(v21) = 1;
    uint64_t v15 = type metadata accessor for DateInterval(0LL);
    uint64_t v16 = sub_1003F2C98(&qword_1009AD020, (uint64_t)&protocol conformance descriptor for DateInterval);
    KeyedEncodingContainer.encode<A>(_:forKey:)(v14, &v21, v5, v15, v16);
    __int128 v21 = *(_OWORD *)((char *)v3 + *(int *)(v13 + 24));
    char v20 = 2;
    unint64_t v17 = sub_10017EF30();
    KeyedEncodingContainer.encode<A>(_:forKey:)(&v21, &v20, v5, &type metadata for PublicKey, v17);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

uint64_t sub_1003F2748@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v25 = a2;
  uint64_t v28 = type metadata accessor for DateInterval(0LL);
  uint64_t v26 = *(void *)(v28 - 8);
  __chkstk_darwin(v28);
  uint64_t v27 = (char *)&v23 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v29 = sub_100004AEC(&qword_1009AD000);
  uint64_t v4 = *(void *)(v29 - 8);
  __chkstk_darwin(v29);
  uint64_t v6 = (char *)&v23 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for FamilyCryptoKeysV2(0LL);
  __chkstk_darwin(v7);
  uint64_t v9 = (char *)&v23 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = a1[3];
  uint64_t v11 = a1[4];
  sub_100012ED8(a1, v10);
  unint64_t v12 = sub_1003F2BD4();
  uint64_t v13 = v30;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for FamilyCryptoKeysV2.CodingKeys,  &type metadata for FamilyCryptoKeysV2.CodingKeys,  v12,  v10,  v11);
  if (v13) {
    return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  }
  uint64_t v24 = v7;
  unint64_t v30 = a1;
  uint64_t v14 = v4;
  uint64_t v15 = v27;
  uint64_t v16 = v28;
  LOBYTE(v31) = 0;
  uint64_t v17 = v29;
  *(void *)uint64_t v9 = KeyedDecodingContainer.decode(_:forKey:)(&v31, v29);
  LOBYTE(v31) = 1;
  uint64_t v18 = sub_1003F2C98(&qword_1009AD010, (uint64_t)&protocol conformance descriptor for DateInterval);
  uint64_t v19 = v15;
  KeyedDecodingContainer.decode<A>(_:forKey:)(v15, v16, &v31, v17, v16, v18);
  uint64_t v20 = v24;
  (*(void (**)(char *, void *, uint64_t))(v26 + 32))(&v9[*(int *)(v24 + 20)], v19, v16);
  char v32 = 2;
  unint64_t v21 = sub_10017EEEC();
  KeyedDecodingContainer.decode<A>(_:forKey:)( &v31,  &type metadata for PublicKey,  &v32,  v17,  &type metadata for PublicKey,  v21);
  (*(void (**)(char *, uint64_t))(v14 + 8))(v6, v17);
  *(_OWORD *)&v9[*(int *)(v20 + 24)] = v31;
  sub_1003F2C18((uint64_t)v9, v25);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v30);
  return sub_1003F2C5C((uint64_t)v9);
}

uint64_t sub_1003F29F4(char *a1, char *a2)
{
  return sub_100308700(*a1, *a2);
}

Swift::Int sub_1003F2A00()
{
  uint64_t v1 = *v0;
  Hasher.init(_seed:)(v3, 0LL);
  String.hash(into:)(v3, qword_100800300[v1], 0xE100000000000000LL);
  swift_bridgeObjectRelease(0xE100000000000000LL);
  return Hasher._finalize()();
}

uint64_t sub_1003F2A58(uint64_t a1)
{
  return swift_bridgeObjectRelease(0xE100000000000000LL);
}

Swift::Int sub_1003F2A84(uint64_t a1)
{
  uint64_t v2 = *v1;
  Hasher.init(_seed:)(v4, a1);
  String.hash(into:)(v4, qword_100800300[v2], 0xE100000000000000LL);
  swift_bridgeObjectRelease(0xE100000000000000LL);
  return Hasher._finalize()();
}

unint64_t sub_1003F2AD8@<X0>(Swift::String *a1@<X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1003F2E7C(*a1);
  *a2 = result;
  return result;
}

void sub_1003F2B04(void *a1@<X8>)
{
  *a1 = qword_100800300[*v1];
  a1[1] = 0xE100000000000000LL;
}

uint64_t sub_1003F2B20()
{
  return qword_100800300[*v0];
}

unint64_t sub_1003F2B38@<X0>(Swift::String a1@<X1:X0>, _BYTE *a2@<X8>)
{
  unint64_t result = sub_1003F2E7C(a1);
  *a2 = result;
  return result;
}

uint64_t sub_1003F2B5C(uint64_t a1)
{
  unint64_t v2 = sub_1003F2BD4();
  return CodingKey.description.getter(a1, v2);
}

uint64_t sub_1003F2B84(uint64_t a1)
{
  unint64_t v2 = sub_1003F2BD4();
  return CodingKey.debugDescription.getter(a1, v2);
}

uint64_t sub_1003F2BAC@<X0>(void *a1@<X0>, uint64_t a2@<X8>)
{
  return sub_1003F2748(a1, a2);
}

uint64_t sub_1003F2BC0(void *a1)
{
  return sub_1003F25B4(a1);
}

unint64_t sub_1003F2BD4()
{
  unint64_t result = qword_1009AD008;
  if (!qword_1009AD008)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008002AC, &type metadata for FamilyCryptoKeysV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AD008);
  }

  return result;
}

uint64_t sub_1003F2C18(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for FamilyCryptoKeysV2(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 16LL))(a2, a1, v4);
  return a2;
}

uint64_t sub_1003F2C5C(uint64_t a1)
{
  uint64_t v2 = type metadata accessor for FamilyCryptoKeysV2(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

uint64_t sub_1003F2C98(unint64_t *a1, uint64_t a2)
{
  uint64_t result = *a1;
  if (!result)
  {
    uint64_t v5 = type metadata accessor for DateInterval(255LL);
    uint64_t result = swift_getWitnessTable(a2, v5);
    atomic_store(result, a1);
  }

  return result;
}

uint64_t storeEnumTagSinglePayload for FamilyCryptoKeysV2.CodingKeys( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 2 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 2) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFE) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFD) {
    return ((uint64_t (*)(void))((char *)&loc_1003F2D24 + 4 * byte_100800125[v4]))();
  }
  *a1 = a2 + 2;
  return ((uint64_t (*)(void))((char *)sub_1003F2D58 + 4 * asc_100800120[v4]))();
}

uint64_t sub_1003F2D58(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003F2D60(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x1003F2D68LL);
  }
  return result;
}

uint64_t sub_1003F2D74(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x1003F2D7CLL);
  }
  *(_BYTE *)uint64_t result = a2 + 2;
  return result;
}

uint64_t sub_1003F2D80(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_1003F2D88(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FamilyCryptoKeysV2.CodingKeys()
{
  return &type metadata for FamilyCryptoKeysV2.CodingKeys;
}

unint64_t sub_1003F2DA8()
{
  unint64_t result = qword_1009AD028;
  if (!qword_1009AD028)
  {
    unint64_t result = swift_getWitnessTable(&unk_100800284, &type metadata for FamilyCryptoKeysV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AD028);
  }

  return result;
}

unint64_t sub_1003F2DF0()
{
  unint64_t result = qword_1009AD030;
  if (!qword_1009AD030)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008001BC, &type metadata for FamilyCryptoKeysV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AD030);
  }

  return result;
}

unint64_t sub_1003F2E38()
{
  unint64_t result = qword_1009AD038;
  if (!qword_1009AD038)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008001E4, &type metadata for FamilyCryptoKeysV2.CodingKeys);
    atomic_store(result, (unint64_t *)&qword_1009AD038);
  }

  return result;
}

unint64_t sub_1003F2E7C(Swift::String string)
{
  object = string._object;
  v2._uint64_t countAndFlagsBits = string._countAndFlagsBits;
  v2._object = object;
  unint64_t v3 = _findStringSwitchCase(cases:string:)((Swift::OpaquePointer)&off_1009351C8, v2);
  swift_bridgeObjectRelease(object);
  if (v3 >= 3) {
    return 3LL;
  }
  else {
    return v3;
  }
}

void sub_1003F2EC4()
{
  __asm { BR              X8 }

void sub_1003F314C(char a1)
{
  __asm { BR              X10 }

uint64_t sub_1003F3178()
{
  if (qword_10099B610 != -1) {
    swift_once(&qword_10099B610, sub_1005D3C50);
  }
  uint64_t v1 = type metadata accessor for URL(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2AE80);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 16LL))(v0, v2, v1);
}

id sub_1003F349C()
{
  id result = (id)MobileGestalt_get_current_device();
  if (!result)
  {
    __break(1u);
LABEL_11:
    __break(1u);
    return result;
  }

  uint64_t v1 = result;
  id v2 = (id)MobileGestalt_copy_productType_obj();

  if (v2)
  {
    uint64_t v3 = static String._unconditionallyBridgeFromObjectiveC(_:)(v2);
    uint64_t v5 = v4;
  }

  else
  {
    uint64_t v3 = 0LL;
    uint64_t v5 = (void *)0xE000000000000000LL;
  }

  id result = (id)MobileGestalt_get_current_device();
  if (!result) {
    goto LABEL_11;
  }
  uint64_t v6 = result;
  id v7 = (id)MobileGestalt_copy_productVersion_obj();

  if (v7)
  {
    uint64_t v8 = static String._unconditionallyBridgeFromObjectiveC(_:)(v7);
    uint64_t v10 = v9;
  }

  else
  {
    uint64_t v8 = 0LL;
    uint64_t v10 = (void *)0xE000000000000000LL;
  }

  id v11 = [(id)objc_opt_self(NSProcessInfo) processInfo];
  id v12 = [v11 processName];

  uint64_t v13 = static String._unconditionallyBridgeFromObjectiveC(_:)(v12);
  v14._uint64_t countAndFlagsBits = 47LL;
  v14._object = (void *)0xE100000000000000LL;
  String.append(_:)(v14);
  v15._uint64_t countAndFlagsBits = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
  object = v15._object;
  String.append(_:)(v15);
  swift_bridgeObjectRelease(object);
  v17._uint64_t countAndFlagsBits = 32LL;
  v17._object = (void *)0xE100000000000000LL;
  String.append(_:)(v17);
  v18._uint64_t countAndFlagsBits = v3;
  v18._object = v5;
  String.append(_:)(v18);
  swift_bridgeObjectRelease(v5);
  v19._uint64_t countAndFlagsBits = 47LL;
  v19._object = (void *)0xE100000000000000LL;
  String.append(_:)(v19);
  v20._uint64_t countAndFlagsBits = v8;
  v20._object = v10;
  String.append(_:)(v20);
  swift_bridgeObjectRelease(v10);
  return (id)v13;
}

uint64_t sub_1003F3664()
{
  uint64_t v1 = type metadata accessor for String.Encoding(0LL);
  v0[5] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(void *)(v2 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100004AEC(&qword_1009AD070);
  uint64_t v4 = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v0[8] = v4;
  uint64_t v5 = type metadata accessor for SearchpartyAccount(0LL);
  v0[9] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  id v7 = (void *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *id v7 = v0;
  v7[1] = sub_1003F372C;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_1003F372C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 96LL);
  *(void *)(*(void *)v1 + 104LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1003F3A7C;
  }
  else {
    uint64_t v3 = sub_1003F3790;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1003F3790()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) == 1)
  {
    sub_1003F7920(v3);
  }

  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(*(void *)(v0 + 88), v3, v1);
    uint64_t v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(void *)(v4 + 16) && (uint64_t v5 = sub_10030CF14(0x7A69726F68747541LL, 0xED00006E6F697461LL), (v6 & 1) != 0))
    {
      uint64_t v8 = *(void *)(v0 + 80);
      uint64_t v7 = *(void *)(v0 + 88);
      uint64_t v9 = *(void *)(v0 + 72);
      uint64_t v11 = *(void *)(v0 + 48);
      uint64_t v10 = *(void *)(v0 + 56);
      uint64_t v12 = *(void *)(v0 + 40);
      uint64_t v13 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v5);
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      uint64_t v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      uint64_t v17 = String.data(using:allowLossyConversion:)(v10, 0LL, v14, v15);
      unint64_t v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15) {
        goto LABEL_13;
      }
    }

    else
    {
      uint64_t v21 = *(void *)(v0 + 80);
      uint64_t v20 = *(void *)(v0 + 88);
      uint64_t v22 = *(void *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }

  if (qword_10099B830 != -1) {
    swift_once(&qword_10099B830, sub_1006A9084);
  }
  uint64_t v23 = type metadata accessor for Logger(0LL);
  uint64_t v24 = sub_10000A720(v23, (uint64_t)qword_100A2B1C8);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v28 = swift_slowAlloc(32LL, -1LL);
    uint64_t v32 = v28;
    *(_DWORD *)uint64_t v27 = 136446210;
    *(void *)(v0 + 32) = sub_1003F11D4(0x654D796669746F4ELL, 0xEF74736575716552LL, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  uint64_t v17 = 0LL;
  unint64_t v19 = 0xC000000000000000LL;
LABEL_13:
  uint64_t v30 = *(void *)(v0 + 56);
  uint64_t v29 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_1003F3A7C()
{
  if (qword_10099B830 != -1) {
    swift_once(&qword_10099B830, sub_1006A9084);
  }
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2B1C8);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 104);
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v16 = v10;
    *(_DWORD *)uint64_t v8 = 136446466;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = sub_1003F11D4(0x654D796669746F4ELL, 0xEF74736575716552LL, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(void *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *uint64_t v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "%{public}s Cannot get authorization header %{public}@.",  (uint8_t *)v8,  0x16u);
    uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v9, 1LL, v12);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  uint64_t v13 = *(void *)(v0 + 56);
  uint64_t v14 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void, unint64_t))(v0 + 8))(0LL, 0xC000000000000000LL);
}

uint64_t sub_1003F3CE4()
{
  uint64_t v1 = type metadata accessor for String.Encoding(0LL);
  v0[5] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(void *)(v2 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100004AEC(&qword_1009AD070);
  uint64_t v4 = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v0[8] = v4;
  uint64_t v5 = type metadata accessor for SearchpartyAccount(0LL);
  v0[9] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1003F3DAC;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_1003F3DAC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 96LL);
  *(void *)(*(void *)v1 + 104LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1003F40F4;
  }
  else {
    uint64_t v3 = sub_1003F3E10;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1003F3E10()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) == 1)
  {
    sub_1003F7920(v3);
  }

  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(*(void *)(v0 + 88), v3, v1);
    uint64_t v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(void *)(v4 + 16) && (uint64_t v5 = sub_10030CF14(0x7A69726F68747541LL, 0xED00006E6F697461LL), (v6 & 1) != 0))
    {
      uint64_t v8 = *(void *)(v0 + 80);
      uint64_t v7 = *(void *)(v0 + 88);
      uint64_t v9 = *(void *)(v0 + 72);
      uint64_t v11 = *(void *)(v0 + 48);
      uint64_t v10 = *(void *)(v0 + 56);
      uint64_t v12 = *(void *)(v0 + 40);
      uint64_t v13 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v5);
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      uint64_t v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      uint64_t v17 = String.data(using:allowLossyConversion:)(v10, 0LL, v14, v15);
      unint64_t v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15) {
        goto LABEL_13;
      }
    }

    else
    {
      uint64_t v21 = *(void *)(v0 + 80);
      uint64_t v20 = *(void *)(v0 + 88);
      uint64_t v22 = *(void *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }

  if (qword_10099B830 != -1) {
    swift_once(&qword_10099B830, sub_1006A9084);
  }
  uint64_t v23 = type metadata accessor for Logger(0LL);
  uint64_t v24 = sub_10000A720(v23, (uint64_t)qword_100A2B1C8);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v28 = swift_slowAlloc(32LL, -1LL);
    uint64_t v32 = v28;
    *(_DWORD *)uint64_t v27 = 136446210;
    *(void *)(v0 + 32) = sub_1003F11D4(0xD00000000000001CLL, 0x8000000100861520LL, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  uint64_t v17 = 0LL;
  unint64_t v19 = 0xC000000000000000LL;
LABEL_13:
  uint64_t v30 = *(void *)(v0 + 56);
  uint64_t v29 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_1003F40F4()
{
  if (qword_10099B830 != -1) {
    swift_once(&qword_10099B830, sub_1006A9084);
  }
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2B1C8);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 104);
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v16 = v10;
    *(_DWORD *)uint64_t v8 = 136446466;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = sub_1003F11D4(0xD00000000000001CLL, 0x8000000100861520LL, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(void *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *uint64_t v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "%{public}s Cannot get authorization header %{public}@.",  (uint8_t *)v8,  0x16u);
    uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v9, 1LL, v12);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  uint64_t v13 = *(void *)(v0 + 56);
  uint64_t v14 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void, unint64_t))(v0 + 8))(0LL, 0xC000000000000000LL);
}

uint64_t sub_1003F4354()
{
  uint64_t v1 = type metadata accessor for String.Encoding(0LL);
  v0[5] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(void *)(v2 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100004AEC(&qword_1009AD070);
  uint64_t v4 = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v0[8] = v4;
  uint64_t v5 = type metadata accessor for SearchpartyAccount(0LL);
  v0[9] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1003F441C;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_1003F441C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 96LL);
  *(void *)(*(void *)v1 + 104LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1003F4764;
  }
  else {
    uint64_t v3 = sub_1003F4480;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1003F4480()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) == 1)
  {
    sub_1003F7920(v3);
  }

  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(*(void *)(v0 + 88), v3, v1);
    uint64_t v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(void *)(v4 + 16) && (uint64_t v5 = sub_10030CF14(0x7A69726F68747541LL, 0xED00006E6F697461LL), (v6 & 1) != 0))
    {
      uint64_t v8 = *(void *)(v0 + 80);
      uint64_t v7 = *(void *)(v0 + 88);
      uint64_t v9 = *(void *)(v0 + 72);
      uint64_t v11 = *(void *)(v0 + 48);
      uint64_t v10 = *(void *)(v0 + 56);
      uint64_t v12 = *(void *)(v0 + 40);
      uint64_t v13 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v5);
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      uint64_t v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      uint64_t v17 = String.data(using:allowLossyConversion:)(v10, 0LL, v14, v15);
      unint64_t v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15) {
        goto LABEL_13;
      }
    }

    else
    {
      uint64_t v21 = *(void *)(v0 + 80);
      uint64_t v20 = *(void *)(v0 + 88);
      uint64_t v22 = *(void *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }

  if (qword_10099B830 != -1) {
    swift_once(&qword_10099B830, sub_1006A9084);
  }
  uint64_t v23 = type metadata accessor for Logger(0LL);
  uint64_t v24 = sub_10000A720(v23, (uint64_t)qword_100A2B1C8);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v28 = swift_slowAlloc(32LL, -1LL);
    uint64_t v32 = v28;
    *(_DWORD *)uint64_t v27 = 136446210;
    *(void *)(v0 + 32) = sub_1003F11D4(0xD00000000000001BLL, 0x8000000100861500LL, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  uint64_t v17 = 0LL;
  unint64_t v19 = 0xC000000000000000LL;
LABEL_13:
  uint64_t v30 = *(void *)(v0 + 56);
  uint64_t v29 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_1003F4764()
{
  if (qword_10099B830 != -1) {
    swift_once(&qword_10099B830, sub_1006A9084);
  }
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2B1C8);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 104);
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v16 = v10;
    *(_DWORD *)uint64_t v8 = 136446466;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = sub_1003F11D4(0xD00000000000001BLL, 0x8000000100861500LL, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(void *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *uint64_t v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "%{public}s Cannot get authorization header %{public}@.",  (uint8_t *)v8,  0x16u);
    uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v9, 1LL, v12);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  uint64_t v13 = *(void *)(v0 + 56);
  uint64_t v14 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void, unint64_t))(v0 + 8))(0LL, 0xC000000000000000LL);
}

uint64_t sub_1003F49C4()
{
  uint64_t v1 = type metadata accessor for String.Encoding(0LL);
  v0[5] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(void *)(v2 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100004AEC(&qword_1009AD070);
  uint64_t v4 = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v0[8] = v4;
  uint64_t v5 = type metadata accessor for SearchpartyAccount(0LL);
  v0[9] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1003F4A8C;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_1003F4A8C()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 96LL);
  *(void *)(*(void *)v1 + 104LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1003F4DD8;
  }
  else {
    uint64_t v3 = sub_1003F4AF0;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1003F4AF0()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) == 1)
  {
    sub_1003F7920(v3);
  }

  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(*(void *)(v0 + 88), v3, v1);
    uint64_t v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(void *)(v4 + 16) && (uint64_t v5 = sub_10030CF14(0x7A69726F68747541LL, 0xED00006E6F697461LL), (v6 & 1) != 0))
    {
      uint64_t v8 = *(void *)(v0 + 80);
      uint64_t v7 = *(void *)(v0 + 88);
      uint64_t v9 = *(void *)(v0 + 72);
      uint64_t v11 = *(void *)(v0 + 48);
      uint64_t v10 = *(void *)(v0 + 56);
      uint64_t v12 = *(void *)(v0 + 40);
      uint64_t v13 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v5);
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      uint64_t v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      uint64_t v17 = String.data(using:allowLossyConversion:)(v10, 0LL, v14, v15);
      unint64_t v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15) {
        goto LABEL_13;
      }
    }

    else
    {
      uint64_t v21 = *(void *)(v0 + 80);
      uint64_t v20 = *(void *)(v0 + 88);
      uint64_t v22 = *(void *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }

  if (qword_10099B830 != -1) {
    swift_once(&qword_10099B830, sub_1006A9084);
  }
  uint64_t v23 = type metadata accessor for Logger(0LL);
  uint64_t v24 = sub_10000A720(v23, (uint64_t)qword_100A2B1C8);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v28 = swift_slowAlloc(32LL, -1LL);
    uint64_t v32 = v28;
    *(_DWORD *)uint64_t v27 = 136446210;
    *(void *)(v0 + 32) = sub_1003F11D4(0x7165526863746546LL, 0xEC00000074736575LL, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  uint64_t v17 = 0LL;
  unint64_t v19 = 0xC000000000000000LL;
LABEL_13:
  uint64_t v30 = *(void *)(v0 + 56);
  uint64_t v29 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_1003F4DD8()
{
  if (qword_10099B830 != -1) {
    swift_once(&qword_10099B830, sub_1006A9084);
  }
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2B1C8);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 104);
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v16 = v10;
    *(_DWORD *)uint64_t v8 = 136446466;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = sub_1003F11D4(0x7165526863746546LL, 0xEC00000074736575LL, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(void *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *uint64_t v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "%{public}s Cannot get authorization header %{public}@.",  (uint8_t *)v8,  0x16u);
    uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v9, 1LL, v12);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  uint64_t v13 = *(void *)(v0 + 56);
  uint64_t v14 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void, unint64_t))(v0 + 8))(0LL, 0xC000000000000000LL);
}

uint64_t sub_1003F503C()
{
  uint64_t v1 = type metadata accessor for String.Encoding(0LL);
  v0[5] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(void *)(v2 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100004AEC(&qword_1009AD070);
  uint64_t v4 = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v0[8] = v4;
  uint64_t v5 = type metadata accessor for SearchpartyAccount(0LL);
  v0[9] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1003F5104;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_1003F5104()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 96LL);
  *(void *)(*(void *)v1 + 104LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1003F544C;
  }
  else {
    uint64_t v3 = sub_1003F5168;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1003F5168()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) == 1)
  {
    sub_1003F7920(v3);
  }

  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(*(void *)(v0 + 88), v3, v1);
    uint64_t v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(void *)(v4 + 16) && (uint64_t v5 = sub_10030CF14(0x7A69726F68747541LL, 0xED00006E6F697461LL), (v6 & 1) != 0))
    {
      uint64_t v8 = *(void *)(v0 + 80);
      uint64_t v7 = *(void *)(v0 + 88);
      uint64_t v9 = *(void *)(v0 + 72);
      uint64_t v11 = *(void *)(v0 + 48);
      uint64_t v10 = *(void *)(v0 + 56);
      uint64_t v12 = *(void *)(v0 + 40);
      uint64_t v13 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v5);
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      uint64_t v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      uint64_t v17 = String.data(using:allowLossyConversion:)(v10, 0LL, v14, v15);
      unint64_t v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15) {
        goto LABEL_13;
      }
    }

    else
    {
      uint64_t v21 = *(void *)(v0 + 80);
      uint64_t v20 = *(void *)(v0 + 88);
      uint64_t v22 = *(void *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }

  if (qword_10099B830 != -1) {
    swift_once(&qword_10099B830, sub_1006A9084);
  }
  uint64_t v23 = type metadata accessor for Logger(0LL);
  uint64_t v24 = sub_10000A720(v23, (uint64_t)qword_100A2B1C8);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v28 = swift_slowAlloc(32LL, -1LL);
    uint64_t v32 = v28;
    *(_DWORD *)uint64_t v27 = 136446210;
    *(void *)(v0 + 32) = sub_1003F11D4(0xD000000000000010LL, 0x8000000100861540LL, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  uint64_t v17 = 0LL;
  unint64_t v19 = 0xC000000000000000LL;
LABEL_13:
  uint64_t v30 = *(void *)(v0 + 56);
  uint64_t v29 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_1003F544C()
{
  if (qword_10099B830 != -1) {
    swift_once(&qword_10099B830, sub_1006A9084);
  }
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2B1C8);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 104);
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v16 = v10;
    *(_DWORD *)uint64_t v8 = 136446466;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = sub_1003F11D4(0xD000000000000010LL, 0x8000000100861540LL, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(void *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *uint64_t v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "%{public}s Cannot get authorization header %{public}@.",  (uint8_t *)v8,  0x16u);
    uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v9, 1LL, v12);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  uint64_t v13 = *(void *)(v0 + 56);
  uint64_t v14 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void, unint64_t))(v0 + 8))(0LL, 0xC000000000000000LL);
}

uint64_t sub_1003F56AC()
{
  uint64_t v1 = type metadata accessor for String.Encoding(0LL);
  v0[5] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[6] = v2;
  v0[7] = swift_task_alloc((*(void *)(v2 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100004AEC(&qword_1009AD070);
  uint64_t v4 = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  v0[8] = v4;
  uint64_t v5 = type metadata accessor for SearchpartyAccount(0LL);
  v0[9] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v0[10] = v6;
  v0[11] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = (void *)swift_task_alloc(async function pointer to static AppleAccount.searchpartyAccount.getter[1]);
  v0[12] = v7;
  *uint64_t v7 = v0;
  v7[1] = sub_1003F5774;
  return static AppleAccount.searchpartyAccount.getter(v4);
}

uint64_t sub_1003F5774()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 96LL);
  *(void *)(*(void *)v1 + 104LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1003F5ABC;
  }
  else {
    uint64_t v3 = sub_1003F57D8;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1003F57D8()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 80);
  uint64_t v3 = *(void *)(v0 + 64);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) == 1)
  {
    sub_1003F7920(v3);
  }

  else
  {
    (*(void (**)(void, uint64_t, uint64_t))(v2 + 32))(*(void *)(v0 + 88), v3, v1);
    uint64_t v4 = RequestCredential.authHeaders.getter(v1, &protocol witness table for SearchpartyAccount);
    if (*(void *)(v4 + 16) && (uint64_t v5 = sub_10030CF14(0x7A69726F68747541LL, 0xED00006E6F697461LL), (v6 & 1) != 0))
    {
      uint64_t v8 = *(void *)(v0 + 80);
      uint64_t v7 = *(void *)(v0 + 88);
      uint64_t v9 = *(void *)(v0 + 72);
      uint64_t v11 = *(void *)(v0 + 48);
      uint64_t v10 = *(void *)(v0 + 56);
      uint64_t v12 = *(void *)(v0 + 40);
      uint64_t v13 = (uint64_t *)(*(void *)(v4 + 56) + 16 * v5);
      uint64_t v14 = *v13;
      uint64_t v15 = v13[1];
      swift_bridgeObjectRetain(v15);
      uint64_t v16 = swift_bridgeObjectRelease();
      static String.Encoding.utf8.getter(v16);
      uint64_t v17 = String.data(using:allowLossyConversion:)(v10, 0LL, v14, v15);
      unint64_t v19 = v18;
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v11 + 8))(v10, v12);
      (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
      if (v19 >> 60 != 15) {
        goto LABEL_13;
      }
    }

    else
    {
      uint64_t v21 = *(void *)(v0 + 80);
      uint64_t v20 = *(void *)(v0 + 88);
      uint64_t v22 = *(void *)(v0 + 72);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
    }
  }

  if (qword_10099B830 != -1) {
    swift_once(&qword_10099B830, sub_1006A9084);
  }
  uint64_t v23 = type metadata accessor for Logger(0LL);
  uint64_t v24 = sub_10000A720(v23, (uint64_t)qword_100A2B1C8);
  uint64_t v25 = (os_log_s *)Logger.logObject.getter(v24);
  os_log_type_t v26 = static os_log_type_t.error.getter(v25);
  if (os_log_type_enabled(v25, v26))
  {
    uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v28 = swift_slowAlloc(32LL, -1LL);
    uint64_t v32 = v28;
    *(_DWORD *)uint64_t v27 = 136446210;
    *(void *)(v0 + 32) = sub_1003F11D4(0xD000000000000014LL, 0x8000000100800310LL, &v32);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v27 + 4, v27 + 12);
    _os_log_impl((void *)&_mh_execute_header, v25, v26, "%{public}s Could not read credential data.", v27, 0xCu);
    swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v28, -1LL, -1LL);
    swift_slowDealloc(v27, -1LL, -1LL);
  }

  uint64_t v17 = 0LL;
  unint64_t v19 = 0xC000000000000000LL;
LABEL_13:
  uint64_t v30 = *(void *)(v0 + 56);
  uint64_t v29 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  return (*(uint64_t (**)(uint64_t, unint64_t))(v0 + 8))(v17, v19);
}

uint64_t sub_1003F5ABC()
{
  if (qword_10099B830 != -1) {
    swift_once(&qword_10099B830, sub_1006A9084);
  }
  uint64_t v1 = *(void *)(v0 + 104);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2B1C8);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 104);
  if (v6)
  {
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    uint64_t v10 = swift_slowAlloc(32LL, -1LL);
    uint64_t v16 = v10;
    *(_DWORD *)uint64_t v8 = 136446466;
    *(void *)(v0 + swift_weakDestroy(v0 + 16) = sub_1003F11D4(0xD000000000000014LL, 0x8000000100800310LL, &v16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v8 + 4, v8 + 12);
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v7);
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(void *)(v0 + 24) = v11;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 14, v8 + 22);
    *uint64_t v9 = v11;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "%{public}s Cannot get authorization header %{public}@.",  (uint8_t *)v8,  0x16u);
    uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v9, 1LL, v12);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_arrayDestroy(v10, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v10, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 104));
    swift_errorRelease(v7);
  }

  swift_errorRelease(v7);
  uint64_t v13 = *(void *)(v0 + 56);
  uint64_t v14 = *(void *)(v0 + 64);
  swift_task_dealloc(*(void *)(v0 + 88));
  swift_task_dealloc(v14);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void, unint64_t))(v0 + 8))(0LL, 0xC000000000000000LL);
}

uint64_t sub_1003F5D1C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[54] = a2;
  v3[55] = a3;
  v3[53] = a1;
  uint64_t v4 = type metadata accessor for HashAlgorithm(0LL);
  v3[56] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[57] = v5;
  v3[58] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003F5D80, 0LL, 0LL);
}

uint64_t sub_1003F5D80()
{
  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  uint64_t v1 = (void *)qword_100A2AF38;
  id v2 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v3 = [v2 isInternalBuild];

  if (v3
    && (NSString v4 = String._bridgeToObjectiveC()(), v5 = [v1 BOOLForKey:v4],
                                             v4,
                                             v5))
  {
    if (qword_10099B830 != -1) {
      swift_once(&qword_10099B830, sub_1006A9084);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    uint64_t v7 = sub_10000A720(v6, (uint64_t)qword_100A2B1C8);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "ExcludeBAACerts defaults is enabled. Skipping BAA", v10, 2u);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    swift_task_dealloc(*(void *)(v0 + 464));
    return (*(uint64_t (**)(void *))(v0 + 8))(&_swiftEmptyDictionarySingleton);
  }

  else
  {
    uint64_t v12 = (void *)swift_task_alloc(dword_1009BB67C);
    *(void *)(v0 + 472) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_1003F5F70;
    return DeviceIdentityUtility.signDataWithDeviceIdentity(dataToSign:)( v0 + 240,  *(void *)(v0 + 424),  *(void *)(v0 + 432));
  }

uint64_t sub_1003F5F70()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 472);
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0) {
    return swift_task_switch(sub_1003F7970, 0LL, 0LL);
  }
  swift_task_dealloc(*(void *)(v2 + 464));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1003F5FE0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v3[54] = a2;
  v3[55] = a3;
  v3[53] = a1;
  uint64_t v4 = type metadata accessor for HashAlgorithm(0LL);
  v3[56] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v3[57] = v5;
  v3[58] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003F6044, 0LL, 0LL);
}

uint64_t sub_1003F6044()
{
  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  uint64_t v1 = (void *)qword_100A2AF38;
  id v2 = [(id)objc_opt_self(FMSystemInfo) sharedInstance];
  unsigned int v3 = [v2 isInternalBuild];

  if (v3
    && (NSString v4 = String._bridgeToObjectiveC()(), v5 = [v1 BOOLForKey:v4],
                                             v4,
                                             v5))
  {
    if (qword_10099B830 != -1) {
      swift_once(&qword_10099B830, sub_1006A9084);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    uint64_t v7 = sub_10000A720(v6, (uint64_t)qword_100A2B1C8);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "ExcludeBAACerts defaults is enabled. Skipping BAA", v10, 2u);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    swift_task_dealloc(*(void *)(v0 + 464));
    return (*(uint64_t (**)(void *))(v0 + 8))(&_swiftEmptyDictionarySingleton);
  }

  else
  {
    uint64_t v12 = (void *)swift_task_alloc(dword_1009BB67C);
    *(void *)(v0 + 472) = v12;
    *uint64_t v12 = v0;
    v12[1] = sub_1003F6234;
    return DeviceIdentityUtility.signDataWithDeviceIdentity(dataToSign:)( v0 + 240,  *(void *)(v0 + 424),  *(void *)(v0 + 432));
  }

uint64_t sub_1003F6234()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 472);
  uint64_t v4 = *v1;
  swift_task_dealloc(v3);
  if (!v0) {
    return swift_task_switch(sub_1003F62A4, 0LL, 0LL);
  }
  swift_task_dealloc(*(void *)(v2 + 464));
  return (*(uint64_t (**)(void))(v4 + 8))();
}

uint64_t sub_1003F62A4()
{
  uint64_t v1 = v0 + 320;
  uint64_t v2 = v0 + 336;
  if (qword_10099B830 != -1) {
    swift_once(&qword_10099B830, sub_1006A9084);
  }
  uint64_t v3 = v0 + 352;
  uint64_t v4 = v0 + 400;
  uint64_t v6 = *(void *)(v0 + 424);
  unint64_t v5 = *(void *)(v0 + 432);
  uint64_t v7 = type metadata accessor for Logger(0LL);
  sub_10000A720(v7, (uint64_t)qword_100A2B1C8);
  sub_10001736C(v6, v5);
  uint64_t v8 = sub_10001736C(v6, v5);
  os_log_type_t v9 = (os_log_s *)Logger.logObject.getter(v8);
  os_log_type_t v10 = static os_log_type_t.info.getter(v9);
  BOOL v11 = os_log_type_enabled(v9, v10);
  uint64_t v12 = *(void *)(v0 + 424);
  unint64_t v13 = *(void *)(v0 + 432);
  if (v11)
  {
    uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v51 = swift_slowAlloc(32LL, -1LL);
    uint64_t v54 = v51;
    *(_DWORD *)uint64_t v14 = 136315138;
    uint64_t v15 = Data.hexString.getter(v12, v13);
    *(void *)(v0 + 4swift_weakDestroy(v0 + 16) = sub_1003F11D4(v15, v16, &v54);
    uint64_t v4 = v0 + 400;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 416, v0 + 424, v14 + 4, v14 + 12);
    uint64_t v3 = v0 + 352;
    swift_bridgeObjectRelease();
    sub_100016F9C(v12, v13);
    sub_100016F9C(v12, v13);
    _os_log_impl((void *)&_mh_execute_header, v9, v10, "Successfully signed request: %s.", v14, 0xCu);
    swift_arrayDestroy(v51, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v1 = v0 + 320;
    swift_slowDealloc(v51, -1LL, -1LL);
    uint64_t v17 = v14;
    uint64_t v2 = v0 + 336;
    swift_slowDealloc(v17, -1LL, -1LL);
  }

  else
  {
    sub_100016F9C(*(void *)(v0 + 424), *(void *)(v0 + 432));
    sub_100016F9C(v12, v13);
  }

  context = objc_autoreleasePoolPush();
  Swift::String v18 = Data.base64EncodedString(options:)(0LL);
  uint64_t countAndFlagsBits = v18._countAndFlagsBits;
  object = v18._object;
  sub_100015750(v0 + 288, v1, &qword_1009A34B0);
  sub_100015750(v0 + 256, v2, &qword_1009AD060);
  sub_100015750(v2, v0 + 384, &qword_1009AD060);
  if (*(void *)(v0 + 392) >> 60 == 15LL)
  {
    sub_10020EE10(v1);
    uint64_t v53 = 0LL;
    uint64_t v21 = 0LL;
  }

  else
  {
    sub_10020EE10(v1);
    Swift::String v22 = Data.base64EncodedString(options:)(0LL);
    uint64_t v53 = v22._countAndFlagsBits;
    uint64_t v21 = v22._object;
  }

  uint64_t v23 = (uint64_t *)(v0 + 240);
  sub_100015750(v0 + 272, v3, &qword_1009AD060);
  sub_100015750(v3, v4, &qword_1009AD060);
  unint64_t v24 = *(void *)(v0 + 408);
  if (v24 >> 60 == 15)
  {
    uint64_t v25 = 0LL;
    os_log_type_t v26 = 0LL;
  }

  else
  {
    uint64_t v27 = v1;
    uint64_t v29 = *(void *)(v0 + 456);
    uint64_t v28 = *(void *)(v0 + 464);
    uint64_t v30 = *(void *)(v0 + 448);
    uint64_t v31 = *(void *)(v0 + 400);
    (*(void (**)(uint64_t, void, uint64_t))(v29 + 104))(v28, enum case for HashAlgorithm.sha256(_:), v30);
    uint64_t v32 = Data.hash(algorithm:)(v28, v31, v24);
    unint64_t v34 = v33;
    uint64_t v35 = *(void (**)(uint64_t, uint64_t))(v29 + 8);
    uint64_t v1 = v27;
    v35(v28, v30);
    Swift::String v36 = Data.base64EncodedString(options:)(0LL);
    uint64_t v25 = v36._countAndFlagsBits;
    os_log_type_t v26 = v36._object;
    uint64_t v37 = v32;
    uint64_t countAndFlagsBits = v18._countAndFlagsBits;
    unint64_t v38 = v34;
    object = v18._object;
    uint64_t v23 = (uint64_t *)(v0 + 240);
    sub_100016F9C(v37, v38);
  }

  objc_autoreleasePoolPop(context);
  if (v21 && v26)
  {
    uint64_t v39 = sub_100004AEC(&qword_1009B9A10);
    uint64_t inited = swift_initStackObject(v39, v0 + 16);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E4050;
    strcpy((char *)(inited + 32), "X-Apple-Sign1");
    *(_WORD *)(inited + 46) = -4864;
    *(void *)(inited + 48) = v53;
    *(void *)(inited + 56) = v21;
    strcpy((char *)(inited + 64), "X-Apple-Sign2");
    *(_WORD *)(inited + 78) = -4864;
    *(void *)(inited + 80) = v25;
    *(void *)(inited + 88) = v26;
    strcpy((char *)(inited + 96), "X-Apple-Sign3");
    *(_WORD *)(inited + 110) = -4864;
    *(void *)(inited + 112) = countAndFlagsBits;
    *(void *)(inited + 120) = object;
    swift_bridgeObjectRetain(object);
    swift_bridgeObjectRetain(v21);
    uint64_t v41 = v26;
LABEL_17:
    swift_bridgeObjectRetain(v41);
    unint64_t v44 = sub_100412D14(inited);
    sub_1003F78B8(v23);
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    swift_bridgeObjectRelease();
    sub_10020EE38(v1);
    swift_task_dealloc(*(void *)(v0 + 464));
    return (*(uint64_t (**)(unint64_t))(v0 + 8))(v44);
  }

  uint64_t v42 = sub_100015750(v1, v0 + 304, &qword_1009A34B0);
  if (*(void *)(v0 + 312))
  {
    *(_OWORD *)(v0 + 368) = *(_OWORD *)(v0 + 304);
    uint64_t v43 = sub_100004AEC(&qword_1009B9A10);
    uint64_t inited = swift_initStackObject(v43, v0 + 144);
    *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
    strcpy((char *)(inited + 32), "X-Apple-Sign");
    *(_BYTE *)(inited + 45) = 0;
    *(_WORD *)(inited + 46) = -5120;
    *(void *)(inited + 48) = countAndFlagsBits;
    *(void *)(inited + 56) = object;
    strcpy((char *)(inited + 64), "X-Apple-Cert");
    *(_BYTE *)(inited + 77) = 0;
    *(_WORD *)(inited + 78) = -5120;
    *(_OWORD *)(inited + 80) = *(_OWORD *)(v0 + 368);
    sub_10020EE10(v1);
    uint64_t v41 = object;
    goto LABEL_17;
  }

  uint64_t v46 = (os_log_s *)Logger.logObject.getter(v42);
  os_log_type_t v47 = static os_log_type_t.error.getter(v46);
  if (os_log_type_enabled(v46, v47))
  {
    unint64_t v48 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v48 = 0;
    _os_log_impl((void *)&_mh_execute_header, v46, v47, "Could not get certs for attestation.", v48, 2u);
    swift_slowDealloc(v48, -1LL, -1LL);
  }

  unint64_t v49 = sub_1003F7874();
  uint64_t v50 = swift_allocError(&type metadata for IdentitySigningHeaderError, v49, 0LL, 0LL);
  swift_willThrow(v50);
  sub_1003F78B8(v23);
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  swift_task_dealloc(*(void *)(v0 + 464));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F68BC@<X0>(void *a1@<X0>, void *a2@<X8>)
{
  uint64_t v2 = a1[1];
  uint64_t v3 = a1[2];
  uint64_t v4 = a1[3];
  *a2 = *a1;
  a2[1] = v2;
  a2[2] = v3;
  a2[3] = v4;
  swift_bridgeObjectRetain(v2);
  return swift_bridgeObjectRetain(v4);
}

uint64_t sub_1003F68F0(uint64_t a1, uint64_t a2)
{
  v2[36] = a1;
  v2[37] = a2;
  uint64_t v3 = type metadata accessor for HashAlgorithm(0LL);
  v2[38] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[39] = v4;
  v2[40] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Date(0LL);
  v2[41] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[42] = v6;
  v2[43] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003F6978, 0LL, 0LL);
}

void sub_1003F6978()
{
  unint64_t v1 = sub_100412D14((uint64_t)_swiftEmptyArrayStorage);
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v1);
  sub_10005C260( 1702195828LL,  0xE400000000000000LL,  0xD00000000000001BLL,  0x8000000100855CD0LL,  isUniquelyReferenced_nonNull_native);
  swift_bridgeObjectRelease();
  id v3 = [(id)objc_opt_self(AKDevice) currentDevice];
  if (v3)
  {
    uint64_t v4 = v3;
    id v5 = [v3 serverFriendlyDescription];

    if (v5)
    {
      uint64_t v6 = *(void *)(v0 + 336);
      uint64_t v7 = *(void *)(v0 + 344);
      uint64_t v8 = *(void *)(v0 + 328);
      os_log_type_t v9 = *(_OWORD **)(v0 + 288);
      uint64_t v10 = static String._unconditionallyBridgeFromObjectiveC(_:)(v5);
      uint64_t v12 = v11;

      char v13 = swift_isUniquelyReferenced_nonNull_native(v1);
      sub_10005C260(v10, v12, 0xD000000000000011LL, 0x8000000100854B60LL, v13);
      unint64_t v14 = v1;
      uint64_t v15 = swift_bridgeObjectRelease();
      uint64_t v16 = Date.init()(v15);
      uint64_t v17 = Date.epoch.getter(v16);
      (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v7, v8);
      *(void *)(v0 + 272) = v17;
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int64,  &protocol witness table for Int64);
      uint64_t v20 = v19;
      char v21 = swift_isUniquelyReferenced_nonNull_native(v14);
      sub_10005C260(v18, v20, 0xD000000000000015LL, 0x8000000100855CF0LL, v21);
      unint64_t v22 = v14;
      swift_bridgeObjectRelease();
      *(void *)(v0 + 280) = 1LL;
      uint64_t v23 = dispatch thunk of CustomStringConvertible.description.getter( &type metadata for Int,  &protocol witness table for Int);
      uint64_t v25 = v24;
      char v26 = swift_isUniquelyReferenced_nonNull_native(v22);
      sub_10005C260(v23, v25, 0xD000000000000013LL, 0x8000000100855D10LL, v26);
      unint64_t v27 = v22;
      swift_bridgeObjectRelease();
      id v28 = sub_1003F349C();
      uint64_t v30 = v29;
      char v31 = swift_isUniquelyReferenced_nonNull_native(v27);
      sub_10005C260((uint64_t)v28, v30, 0x6567412D72657355LL, 0xEA0000000000746ELL, v31);
      *(void *)(v0 + 352) = v27;
      swift_bridgeObjectRelease();
      uint64_t v32 = type metadata accessor for JSONEncoder(0LL);
      swift_allocObject(v32, *(unsigned int *)(v32 + 48), *(unsigned __int16 *)(v32 + 52));
      *(void *)(v0 + 360) = JSONEncoder.init()();
      *(_OWORD *)(v0 + swift_weakDestroy(v0 + 16) = *v9;
      __int128 v33 = v9[4];
      __int128 v35 = v9[1];
      __int128 v34 = v9[2];
      *(_OWORD *)(v0 + 64) = v9[3];
      *(_OWORD *)(v0 + 80) = v33;
      *(_OWORD *)(v0 + 32) = v35;
      *(_OWORD *)(v0 + 48) = v34;
      unint64_t v36 = sub_1003F7830();
      uint64_t v37 = dispatch thunk of JSONEncoder.encode<A>(_:)(v0 + 16, &type metadata for AirPodsUnpairData, v36);
      *(void *)(v0 + 368) = v37;
      *(void *)(v0 + 376) = v38;
      sub_10001736C(v37, v38);
      unint64_t v40 = (void (__cdecl *)())((char *)&dword_1009AD050 + dword_1009AD050);
      uint64_t v39 = (void *)swift_task_alloc(unk_1009AD054);
      *(void *)(v0 + 384) = v39;
      *uint64_t v39 = v0;
      v39[1] = sub_1003F6DF0;
      v40();
      return;
    }
  }

  else
  {
    __break(1u);
  }

  __break(1u);
}

uint64_t sub_1003F6DF0(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 384);
  *(void *)(v3 + 392) = a1;
  *(void *)(v3 + 400) = a2;
  swift_task_dealloc(v4);
  return swift_task_switch(sub_1003F6E4C, 0LL, 0LL);
}

uint64_t sub_1003F6E4C()
{
  uint64_t v2 = v0[49];
  unint64_t v1 = v0[50];
  uint64_t v4 = v0[46];
  unint64_t v3 = v0[47];
  uint64_t v6 = v0[39];
  uint64_t v5 = v0[40];
  uint64_t v7 = v0[38];
  v0[32] = v2;
  v0[33] = v1;
  sub_10001736C(v4, v3);
  sub_10001736C(v2, v1);
  sub_1004A8638(v4, v3);
  sub_100016F9C(v4, v3);
  sub_100016F9C(v2, v1);
  uint64_t v9 = v0[32];
  uint64_t v8 = v0[33];
  v0[51] = v9;
  v0[52] = v8;
  (*(void (**)(uint64_t, void, uint64_t))(v6 + 104))(v5, enum case for HashAlgorithm.sha256(_:), v7);
  uint64_t v10 = Data.hash(algorithm:)(v5, v9, v8);
  uint64_t v12 = v11;
  v0[53] = v10;
  v0[54] = v11;
  (*(void (**)(uint64_t, uint64_t))(v6 + 8))(v5, v7);
  uint64_t v15 = (char *)&dword_1009AD058 + dword_1009AD058;
  char v13 = (void *)swift_task_alloc(unk_1009AD05C);
  v0[55] = v13;
  *char v13 = v0;
  v13[1] = sub_1003F6F70;
  return ((uint64_t (*)(uint64_t, uint64_t, void))v15)(v10, v12, v0[37]);
}

uint64_t sub_1003F6F70(uint64_t a1)
{
  uint64_t v4 = *(void **)v2;
  uint64_t v5 = *(void *)(*(void *)v2 + 440LL);
  *(void *)(*(void *)v2 + 448LL) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_1003F7408;
  }

  else
  {
    uint64_t v7 = v4[53];
    unint64_t v8 = v4[54];
    v4[57] = a1;
    sub_100016F9C(v7, v8);
    uint64_t v6 = sub_1003F6FEC;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1003F6FEC()
{
  uint64_t v2 = v0[56];
  uint64_t v1 = v0[57];
  unint64_t v3 = (_BYTE *)v0[44];
  char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v3);
  uint64_t v53 = v3;
  sub_100129198(v1, (uint64_t)sub_1003F68BC, 0LL, isUniquelyReferenced_nonNull_native, &v53);
  if (v2) {
    return swift_bridgeObjectRelease();
  }
  uint64_t v7 = v0[51];
  unint64_t v6 = v0[52];
  unint64_t v49 = v0;
  unint64_t v8 = v53;
  swift_bridgeObjectRelease();
  uint64_t v9 = sub_100016F9C(v7, v6);
  uint64_t v10 = static os_log_type_t.debug.getter(v9);
  if (qword_10099B798 != -1) {
LABEL_27:
  }
    swift_once(&qword_10099B798, sub_100651870);
  os_log(_:dso:log:_:_:)( v10,  &_mh_execute_header,  qword_100A2B0A8,  "Unpair header:",  14LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v50 = v8 + 64;
  uint64_t v11 = -1LL;
  uint64_t v12 = -1LL << v8[32];
  if (-v12 < 64) {
    uint64_t v11 = ~(-1LL << -(char)v12);
  }
  unint64_t v13 = v11 & *((void *)v8 + 8);
  int64_t v51 = (unint64_t)(63 - v12) >> 6;
  unint64_t v52 = v8;
  swift_bridgeObjectRetain(v8);
  int64_t v14 = 0LL;
  unint64_t v8 = &type metadata for String;
  while (1)
  {
    if (v13)
    {
      unint64_t v15 = __clz(__rbit64(v13));
      v13 &= v13 - 1;
      unint64_t v16 = v15 | (v14 << 6);
      goto LABEL_8;
    }

    int64_t v29 = v14 + 1;
    if (__OFADD__(v14, 1LL))
    {
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }

    if (v29 >= v51) {
      goto LABEL_24;
    }
    unint64_t v30 = *(void *)&v50[8 * v29];
    ++v14;
    if (!v30)
    {
      int64_t v14 = v29 + 1;
      if (v29 + 1 >= v51) {
        goto LABEL_24;
      }
      unint64_t v30 = *(void *)&v50[8 * v14];
      if (!v30)
      {
        int64_t v14 = v29 + 2;
        if (v29 + 2 >= v51) {
          goto LABEL_24;
        }
        unint64_t v30 = *(void *)&v50[8 * v14];
        if (!v30) {
          break;
        }
      }
    }

uint64_t sub_1003F7408()
{
  uint64_t v1 = v0[51];
  unint64_t v2 = v0[52];
  sub_100016F9C(v0[53], v0[54]);
  uint64_t v3 = sub_100016F9C(v1, v2);
  uint64_t v4 = (void *)static os_log_type_t.error.getter(v3);
  int64_t v5 = (int64_t)&off_10099B000;
  if (qword_10099B798 != -1) {
LABEL_27:
  }
    swift_once(&qword_10099B798, sub_100651870);
  uint64_t v6 = v0[56];
  os_log(_:dso:log:_:_:)( v4,  &_mh_execute_header,  qword_100A2B0A8,  "Failed to generate BAA certs",  28LL,  2LL,  _swiftEmptyArrayStorage);
  uint64_t v7 = swift_errorRelease(v6);
  uint64_t v48 = v0;
  uint64_t v8 = v0[44];
  uint64_t v9 = static os_log_type_t.debug.getter(v7);
  if (*(void *)(v5 + 1944) != -1LL) {
    swift_once(&qword_10099B798, sub_100651870);
  }
  os_log(_:dso:log:_:_:)(v9, &_mh_execute_header, qword_100A2B0A8, "Unpair header:", 14LL, 2LL, _swiftEmptyArrayStorage);
  uint64_t v49 = v8 + 64;
  uint64_t v10 = -1LL;
  uint64_t v11 = -1LL << *(_BYTE *)(v8 + 32);
  if (-v11 < 64) {
    uint64_t v10 = ~(-1LL << -(char)v11);
  }
  unint64_t v12 = v10 & *(void *)(v8 + 64);
  int64_t v50 = (unint64_t)(63 - v11) >> 6;
  uint64_t v51 = v8;
  swift_bridgeObjectRetain(v8);
  int64_t v5 = 0LL;
  uint64_t v4 = &type metadata for String;
  while (1)
  {
    if (v12)
    {
      unint64_t v13 = __clz(__rbit64(v12));
      v12 &= v12 - 1;
      unint64_t v14 = v13 | (v5 << 6);
      goto LABEL_8;
    }

    int64_t v27 = v5 + 1;
    if (__OFADD__(v5, 1LL))
    {
      __break(1u);
LABEL_26:
      __break(1u);
      goto LABEL_27;
    }

    if (v27 >= v50) {
      goto LABEL_24;
    }
    unint64_t v28 = *(void *)(v49 + 8 * v27);
    ++v5;
    if (!v28)
    {
      int64_t v5 = v27 + 1;
      if (v27 + 1 >= v50) {
        goto LABEL_24;
      }
      unint64_t v28 = *(void *)(v49 + 8 * v5);
      if (!v28)
      {
        int64_t v5 = v27 + 2;
        if (v27 + 2 >= v50) {
          goto LABEL_24;
        }
        unint64_t v28 = *(void *)(v49 + 8 * v5);
        if (!v28) {
          break;
        }
      }
    }

unint64_t sub_1003F7830()
{
  unint64_t result = qword_1009AD048;
  if (!qword_1009AD048)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008018C4, &type metadata for AirPodsUnpairData);
    atomic_store(result, (unint64_t *)&qword_1009AD048);
  }

  return result;
}

unint64_t sub_1003F7874()
{
  unint64_t result = qword_1009AD068;
  if (!qword_1009AD068)
  {
    unint64_t result = swift_getWitnessTable(&unk_1007F6C74, &type metadata for IdentitySigningHeaderError);
    atomic_store(result, (unint64_t *)&qword_1009AD068);
  }

  return result;
}

uint64_t *sub_1003F78B8(uint64_t *a1)
{
  uint64_t v2 = a1[2];
  unint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  unint64_t v5 = a1[5];
  sub_100016F9C(*a1, a1[1]);
  sub_1000182F0(v2, v3);
  sub_1000182F0(v4, v5);
  swift_bridgeObjectRelease();
  return a1;
}

uint64_t sub_1003F7920(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009AD070);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v2 - 8) + 8LL))(a1, v2);
  return a1;
}

ValueMetadata *type metadata accessor for AirPodsUnpairRequest()
{
  return &type metadata for AirPodsUnpairRequest;
}

void sub_1003F7974(void *a1@<X0>, int a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = type metadata accessor for ObservedAdvertisement(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v45 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v10 = [a1 advertisement];
  id v11 = [v10 address];

  uint64_t v12 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v11);
  uint64_t v14 = v13;

  sub_1001782D0(v12, v14);
  uint64_t v47 = v9;
  uint64_t v48 = v6;
  int v46 = a2;
  v45[4] = v7;
  uint64_t v45[5] = a3;
  uint64_t v16 = v49;
  unint64_t v15 = v50;
  id v17 = [a1 advertisement];
  id v18 = [v17 address];

  uint64_t v19 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v18);
  unint64_t v21 = v20;

  id v22 = [a1 advertisement];
  id v23 = [v22 advertisementData];

  uint64_t v24 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v23);
  unint64_t v26 = v25;

  uint64_t v49 = v19;
  unint64_t v50 = v21;
  sub_10001736C(v19, v21);
  sub_10001736C(v24, v26);
  sub_1004A8638(v24, v26);
  sub_100016F9C(v24, v26);
  sub_100016F9C(v24, v26);
  sub_100016F9C(v19, v21);
  uint64_t v28 = v49;
  uint64_t v27 = v50;
  sub_10001736C(v49, v50);
  v45[0] = v28;
  v45[1] = v27;
  sub_1001782E4(v28, v27);
  v45[2] = v15;
  v45[3] = v16;
  uint64_t v30 = v49;
  uint64_t v29 = v50;
  uint64_t v31 = v47;
  *((void *)v47 + 2) = v49;
  *((void *)v31 + 3) = v29;
  sub_10008699C(v30, v29);
  id v32 = [a1 advertisement];
  LOBYTE(v19) = [v32 status];

  v31[32] = v19;
  id v33 = [a1 advertisement];
  id v34 = [v33 reserved];

  uint64_t v35 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v34);
  unint64_t v37 = v36;

  sub_1006F2B10(v35, v37);
  __int16 v39 = v38;
  sub_100016F9C(v35, v37);
  if ((v39 & 0x100) != 0) {
    char v40 = 0;
  }
  else {
    char v40 = v39;
  }
  v31[33] = v40;
  id v41 = [a1 advertisement];
  id v42 = [v41 reserved];

  static Data._unconditionallyBridgeFromObjectiveC(_:)(v42);
  uint64_t v44 = v43;

  __asm { BR              X10 }

uint64_t sub_1003F8178()
{
  uint64_t v1 = v0;
  uint64_t v2 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v14 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (qword_10099B400 != -1) {
    swift_once(&qword_10099B400, sub_1003F889C);
  }
  uint64_t v5 = type metadata accessor for Logger(0LL);
  uint64_t v6 = sub_10000A720(v5, (uint64_t)qword_100A2A928);
  uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.default.getter(v7);
  if (os_log_type_enabled(v7, v8))
  {
    uint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v9 = 0;
    _os_log_impl((void *)&_mh_execute_header, v7, v8, "Registering leech scanner.", v9, 2u);
    swift_slowDealloc(v9, -1LL, -1LL);
  }

  type metadata accessor for Transaction(0LL);
  static Transaction.asyncTask(name:block:)("LeechScanner.EvaluateState", 26LL, 2LL, &unk_1009AD108, 0LL);
  uint64_t v10 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v4, 1LL, 1LL, v10);
  id v11 = (void *)swift_allocObject(&unk_100957FF8, 40LL, 7LL);
  void v11[2] = 0LL;
  void v11[3] = 0LL;
  v11[4] = v1;
  swift_retain();
  uint64_t v12 = sub_10000BB68((uint64_t)v4, (uint64_t)&unk_1009AD118, (uint64_t)v11);
  swift_release(v12);
  return sub_100015794((uint64_t)v4, &qword_1009A9BF0);
}

uint64_t sub_1003F832C()
{
  v1[20] = v0;
  uint64_t v2 = type metadata accessor for KeyGenerationBeaconInfo(0LL);
  v1[21] = v2;
  uint64_t v3 = *(void *)(v2 - 8);
  v1[22] = v3;
  v1[23] = swift_task_alloc((*(void *)(v3 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003F838C, 0LL, 0LL);
}

uint64_t sub_1003F838C()
{
  if ((**(_BYTE **)(v0 + 160) & 1) != 0)
  {
    swift_task_dealloc(*(void *)(v0 + 184));
    return (*(uint64_t (**)(void))(v0 + 8))(0LL);
  }

  else
  {
    if (qword_10099B9E0 != -1) {
      swift_once(&qword_10099B9E0, sub_10076012C);
    }
    swift_beginAccess(&xmmword_1009BED80, v0 + 136, 0LL, 0LL);
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 80))
    {
      sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
      sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
      uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C8A8 + dword_10099C8A8);
      uint64_t v2 = (void *)swift_task_alloc(unk_10099C8AC);
      *(void *)(v0 + 192) = v2;
      *uint64_t v2 = v0;
      v2[1] = sub_1003F84AC;
      return v3();
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_1003F84AC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 192LL);
  *(void *)(*(void *)v1 + 20Hasher.init(_seed:)(v3, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003F8508, 0LL, 0LL);
}

uint64_t sub_1003F8508()
{
  uint64_t v1 = *(void *)(v0 + 200);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v1) {
    return swift_task_switch(sub_1003F8668, *(void *)(v0 + 200), 0LL);
  }
  if (qword_10099B400 != -1) {
    swift_once(&qword_10099B400, sub_1003F889C);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2A928);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Leech scanner cannot update. Missing BeaconKeyService.", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  unint64_t v8 = sub_1000157D0();
  uint64_t v9 = swift_allocError(&type metadata for DaemonError, v8, 0LL, 0LL);
  *uint64_t v10 = 0xD000000000000010LL;
  v10[1] = 0x8000000100861580LL;
  swift_willThrow(v9);
  swift_task_dealloc(*(void *)(v0 + 184));
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

void *sub_1003F8668()
{
  uint64_t result = *(void **)(v0[25] + 128LL);
  if (result)
  {
    v0[26] = sub_1004759C4(result);
    v0[27] = 0LL;
    return (void *)swift_task_switch(sub_1003F86D0, 0LL, 0LL);
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1003F86D0()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v1 + 16);
  if (v2)
  {
    uint64_t v4 = *(void *)(v0 + 168);
    uint64_t v3 = *(void *)(v0 + 176);
    uint64_t v5 = v1 + ((*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80));
    uint64_t v6 = enum case for Feature.FindMy.spPlaySoundAll(_:);
    uint64_t v7 = *(void *)(v3 + 72);
    swift_bridgeObjectRetain(v1);
    while (1)
    {
      uint64_t v8 = *(void *)(v0 + 184);
      sub_10001DC4C(v5, v8, type metadata accessor for KeyGenerationBeaconInfo);
      unsigned int v9 = *(unsigned __int8 *)(v8 + *(int *)(v4 + 28)) - 1;
      uint64_t v10 = *(void *)(v0 + 184);
      if (v9 < 2) {
        break;
      }
      uint64_t My = type metadata accessor for Feature.FindMy(0LL);
      *(void *)(v0 + 120) = My;
      *(void *)(v0 + 128) = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
      uint64_t v12 = sub_10000A7C8((void *)(v0 + 96));
      (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(My - 8) + 104LL))(v12, v6, My);
      LOBYTE(My) = isFeatureEnabled(_:)(v0 + 96);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 96));
      sub_100018C68(v10, type metadata accessor for KeyGenerationBeaconInfo);
      if ((My & 1) != 0) {
        goto LABEL_9;
      }
      v5 += v7;
      if (!--v2)
      {
        swift_bridgeObjectRelease_n(*(void *)(v0 + 208), 2LL);
        uint64_t v13 = 0LL;
        goto LABEL_10;
      }
    }

    sub_100018C68(*(void *)(v0 + 184), type metadata accessor for KeyGenerationBeaconInfo);
LABEL_9:
    swift_bridgeObjectRelease_n(*(void *)(v0 + 208), 2LL);
    uint64_t v13 = 1LL;
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v13 = 0LL;
  }

uint64_t sub_1003F885C()
{
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_1003F889C()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A928);
  sub_10000A720(v0, (uint64_t)qword_100A2A928);
  return Logger.init(subsystem:category:)( 0xD00000000000001DLL,  0x80000001008507F0LL,  0xD000000000000012LL,  0x8000000100861560LL);
}

uint64_t sub_1003F891C()
{
  uint64_t v1 = sub_100004AEC(&qword_10099C818);
  *(void *)(v0 + 256) = v1;
  *(void *)(v0 + 264) = swift_task_alloc((*(void *)(*(void *)(v1 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003F8978, 0LL, 0LL);
}

uint64_t sub_1003F8978()
{
  if (qword_10099B400 != -1) {
    swift_once(&qword_10099B400, sub_1003F889C);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2A928);
  *(void *)(v0 + 272) = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, ">> Update leech scanner state.", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 176, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v8 = (uint64_t (__cdecl *)())((char *)&dword_10099C8A8 + dword_10099C8A8);
    uint64_t v7 = (void *)swift_task_alloc(unk_10099C8AC);
    *(void *)(v0 + 280) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1003F8B1C;
    return v8();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1003F8B1C(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 280LL);
  *(void *)(*(void *)v1 + 288LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003F8B78, 0LL, 0LL);
}

uint64_t sub_1003F8B78()
{
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v1)
  {
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 136, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 160))
    {
      sub_100012EC0((__int128 *)(v0 + 136), v0 + 96);
      sub_100012ED8((void *)(v0 + 96), *(void *)(v0 + 120));
      uint64_t v8 = (uint64_t (__cdecl *)())((char *)&dword_10099C838 + dword_10099C838);
      os_log_type_t v4 = (void *)swift_task_alloc(unk_10099C83C);
      *(void *)(v0 + 296) = v4;
      *os_log_type_t v4 = v0;
      v4[1] = sub_1003F8CC0;
      return v8();
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v2);
    os_log_type_t v6 = static os_log_type_t.error.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Leech scanner cannot update. Missing BeaconKeyService.",  v7,  2u);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    swift_task_dealloc(*(void *)(v0 + 264));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  return result;
}

uint64_t sub_1003F8CC0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 296LL);
  *(void *)(*(void *)v1 + 304LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003F8D1C, 0LL, 0LL);
}

uint64_t sub_1003F8D1C()
{
  uint64_t v1 = *(void *)(v0 + 304);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 96));
  if (v1)
  {
    uint64_t v2 = *(void *)(v0 + 304);
    swift_retain();
    return swift_task_switch(sub_1003F922C, v2, 0LL);
  }

  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  sub_100605608(0xD000000000000019LL, 0x80000001008615A0LL, (void *)qword_100A2AF38);
  if ((v5 & 1) != 0)
  {
    uint64_t v6 = 0LL;
  }

  else
  {
    uint64_t v6 = v4;
    if (v4 < 0) {
      return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    }
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v8 = static os_log_type_t.default.getter(v7);
    if (os_log_type_enabled(v7, v8))
    {
      unsigned int v9 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)unsigned int v9 = 134217984;
      *(void *)(v0 + 248) = v6;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v9 + 4, v9 + 12);
      _os_log_impl((void *)&_mh_execute_header, v7, v8, "Leech state override: %llu.", v9, 0xCu);
      swift_slowDealloc(v9, -1LL, -1LL);
    }
  }

  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v12 = 134217984;
    *(void *)(v0 + 240) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v12 + 4, v12 + 12);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "Posting com.apple.SPOwner.SPCBLeechScanner Darwin notification state: %llu.",  v12,  0xCu);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  NSString v13 = String._bridgeToObjectiveC()();
  uint64_t v14 = type metadata accessor for DarwinNotificationHelper(0LL);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  id v15 = v13;
  DarwinNotificationHelper.init(notificationName:rateLimit:)(v15, 0.0);
  dispatch thunk of DarwinNotificationHelper.setValue(value:)(v6);
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
  swift_release();

  uint64_t v16 = swift_release();
  id v17 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v18 = static os_log_type_t.default.getter(v17);
  if (os_log_type_enabled(v17, v18))
  {
    uint64_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v19 = 0;
    _os_log_impl((void *)&_mh_execute_header, v17, v18, "<< Update leech scanner state.", v19, 2u);
    swift_slowDealloc(v19, -1LL, -1LL);
  }

  swift_release();
  swift_task_dealloc(*(void *)(v0 + 264));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F922C()
{
  uint64_t v1 = v0[38];
  uint64_t v2 = sub_100007864( (unint64_t *)&qword_10099CAE8,  type metadata accessor for FinderStateObserver,  (uint64_t)&unk_1007FE30C);
  uint64_t v3 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[39] = v3;
  *uint64_t v3 = v0;
  v3[1] = sub_1003F92D0;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[33],  v0[38],  v2,  0x6E4965746174735FLL,  0xEC00000029286F66LL,  sub_100015C40,  v1,  v0[32]);
}

uint64_t sub_1003F92D0()
{
  return swift_task_switch(sub_1003F932C, 0LL, 0LL);
}

uint64_t sub_1003F932C()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = type metadata accessor for FinderStateInfo(0LL);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v2 - 8) + 48LL))(v1, 1LL, v2) != 1)
  {
    unsigned int v9 = (void *)swift_task_alloc(dword_1009AD0E4);
    *(void *)(v0 + 320) = v9;
    *unsigned int v9 = v0;
    v9[1] = sub_1003F9870;
    return sub_1003F832C();
  }

  sub_100015794(v1, &qword_10099C818);
  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  sub_100605608(0xD000000000000019LL, 0x80000001008615A0LL, (void *)qword_100A2AF38);
  if ((v4 & 1) != 0)
  {
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v5 = v3;
    if (v3 < 0) {
      return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    }
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v7 = static os_log_type_t.default.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      os_log_type_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)os_log_type_t v8 = 134217984;
      *(void *)(v0 + 248) = v5;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v8 + 4, v8 + 12);
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Leech state override: %llu.", v8, 0xCu);
      swift_slowDealloc(v8, -1LL, -1LL);
    }
  }

  os_log_type_t v11 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    NSString v13 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)NSString v13 = 134217984;
    *(void *)(v0 + 240) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v13 + 4, v13 + 12);
    _os_log_impl( (void *)&_mh_execute_header,  v11,  v12,  "Posting com.apple.SPOwner.SPCBLeechScanner Darwin notification state: %llu.",  v13,  0xCu);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  NSString v14 = String._bridgeToObjectiveC()();
  uint64_t v15 = type metadata accessor for DarwinNotificationHelper(0LL);
  swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  id v16 = v14;
  DarwinNotificationHelper.init(notificationName:rateLimit:)(v16, 0.0);
  dispatch thunk of DarwinNotificationHelper.setValue(value:)(v5);
  dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
  swift_release();

  uint64_t v17 = swift_release();
  os_log_type_t v18 = (os_log_s *)Logger.logObject.getter(v17);
  os_log_type_t v19 = static os_log_type_t.default.getter(v18);
  if (os_log_type_enabled(v18, v19))
  {
    unint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v20 = 0;
    _os_log_impl((void *)&_mh_execute_header, v18, v19, "<< Update leech scanner state.", v20, 2u);
    swift_slowDealloc(v20, -1LL, -1LL);
  }

  swift_release();
  swift_task_dealloc(*(void *)(v0 + 264));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F9870(char a1)
{
  uint64_t v4 = *v2;
  uint64_t v5 = *(void *)(*v2 + 320);
  *(void *)(*v2 + 328) = v1;
  swift_task_dealloc(v5);
  if (v1)
  {
    uint64_t v6 = sub_1003F9E2C;
  }

  else
  {
    *(_BYTE *)(v4 + 336) = a1 & 1;
    uint64_t v6 = sub_1003F98E8;
  }

  return swift_task_switch(v6, 0LL, 0LL);
}

uint64_t sub_1003F98E8()
{
  char v1 = *(_BYTE *)(v0 + 336);
  sub_100018C68(*(void *)(v0 + 264), type metadata accessor for FinderStateInfo);
  uint64_t v2 = *(void *)(v0 + 328);
  if (qword_10099B670 != -1) {
    swift_once(&qword_10099B670, sub_100605974);
  }
  sub_100605608(0xD000000000000019LL, 0x80000001008615A0LL, (void *)qword_100A2AF38);
  if ((v4 & 1) == 0)
  {
    uint64_t v5 = v3;
    if (v3 < 0) {
      return _assertionFailure(_:_:file:line:flags:)( "Fatal error",  11LL,  2LL,  "Negative value is not representable",  35LL,  2LL,  "Swift/Integers.swift",  20LL,  2,  3451LL,  0);
    }
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v7 = static os_log_type_t.default.getter(v6);
    if (!os_log_type_enabled(v6, v7)) {
      goto LABEL_13;
    }
    os_log_type_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)os_log_type_t v8 = 134217984;
    *(void *)(v0 + 248) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 248, v0 + 256, v8 + 4, v8 + 12);
    _os_log_impl((void *)&_mh_execute_header, v6, v7, "Leech state override: %llu.", v8, 0xCu);
    goto LABEL_10;
  }

  if ((v1 & 1) != 0)
  {
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v9 = static os_log_type_t.default.getter(v6);
    if (!os_log_type_enabled(v6, v9))
    {
      uint64_t v5 = 1LL;
      goto LABEL_13;
    }

    os_log_type_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v8 = 0;
    _os_log_impl((void *)&_mh_execute_header, v6, v9, "Enabling leech scanner.", v8, 2u);
    uint64_t v5 = 1LL;
LABEL_10:
    swift_slowDealloc(v8, -1LL, -1LL);
LABEL_13:

    goto LABEL_14;
  }

  uint64_t v5 = 0LL;
LABEL_14:
  uint64_t v10 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v11 = static os_log_type_t.default.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    os_log_type_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)os_log_type_t v12 = 134217984;
    *(void *)(v0 + 240) = v5;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v12 + 4, v12 + 12);
    _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "Posting com.apple.SPOwner.SPCBLeechScanner Darwin notification state: %llu.",  v12,  0xCu);
    swift_slowDealloc(v12, -1LL, -1LL);
  }

  NSString v13 = String._bridgeToObjectiveC()();
  uint64_t v14 = type metadata accessor for DarwinNotificationHelper(0LL);
  swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
  id v15 = v13;
  DarwinNotificationHelper.init(notificationName:rateLimit:)(v15, 0.0);
  dispatch thunk of DarwinNotificationHelper.setValue(value:)(v5);
  if (v2)
  {
    swift_release();

    swift_release();
    swift_errorRetain(v2);
    uint64_t v17 = swift_errorRetain(v2);
    os_log_type_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      unint64_t v20 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v21 = swift_slowAlloc(32LL, -1LL);
      uint64_t v28 = v21;
      *(_DWORD *)unint64_t v20 = 136446210;
      swift_getErrorValue(v2, v0 + 224, v0 + 200);
      uint64_t v22 = Error.localizedDescription.getter(*(void *)(v0 + 208), *(void *)(v0 + 216));
      *(void *)(v0 + 232) = sub_1003F11D4(v22, v23, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v20 + 4, v20 + 12);
      swift_bridgeObjectRelease();
      swift_errorRelease(v2);
      swift_errorRelease(v2);
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "Failed to post com.apple.SPOwner.SPCBLeechScanner. error: %{public}s.",  v20,  0xCu);
      swift_arrayDestroy(v21, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v21, -1LL, -1LL);
      swift_slowDealloc(v20, -1LL, -1LL);

      uint64_t v16 = swift_errorRelease(v2);
    }

    else
    {
      swift_errorRelease(v2);
      swift_errorRelease(v2);
      swift_errorRelease(v2);
    }
  }

  else
  {
    dispatch thunk of DarwinNotificationHelper.post(bypassRateLimit:)(0LL);
    swift_release();

    uint64_t v16 = swift_release();
  }

  uint64_t v24 = (os_log_s *)Logger.logObject.getter(v16);
  os_log_type_t v25 = static os_log_type_t.default.getter(v24);
  if (os_log_type_enabled(v24, v25))
  {
    unint64_t v26 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)unint64_t v26 = 0;
    _os_log_impl((void *)&_mh_execute_header, v24, v25, "<< Update leech scanner state.", v26, 2u);
    swift_slowDealloc(v26, -1LL, -1LL);
  }

  swift_release();
  swift_task_dealloc(*(void *)(v0 + 264));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003F9E2C()
{
  uint64_t v1 = *(void *)(v0 + 264);
  swift_release();
  sub_100018C68(v1, type metadata accessor for FinderStateInfo);
  uint64_t v2 = *(void *)(v0 + 328);
  swift_errorRetain(v2);
  uint64_t v3 = swift_errorRetain(v2);
  char v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v15 = v7;
    *(_DWORD *)uint64_t v6 = 136446210;
    swift_getErrorValue(v2, v0 + 224, v0 + 200);
    uint64_t v8 = Error.localizedDescription.getter(*(void *)(v0 + 208), *(void *)(v0 + 216));
    *(void *)(v0 + 232) = sub_1003F11D4(v8, v9, &v15);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Failed to post com.apple.SPOwner.SPCBLeechScanner. error: %{public}s.",  v6,  0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    uint64_t v10 = swift_errorRelease(v2);
  }

  else
  {
    swift_errorRelease(v2);
    swift_errorRelease(v2);
    swift_errorRelease(v2);
  }

  os_log_type_t v11 = (os_log_s *)Logger.logObject.getter(v10);
  os_log_type_t v12 = static os_log_type_t.default.getter(v11);
  if (os_log_type_enabled(v11, v12))
  {
    NSString v13 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)NSString v13 = 0;
    _os_log_impl((void *)&_mh_execute_header, v11, v12, "<< Update leech scanner state.", v13, 2u);
    swift_slowDealloc(v13, -1LL, -1LL);
  }

  swift_release();
  swift_task_dealloc(*(void *)(v0 + 264));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003FA074()
{
  uint64_t v1 = sub_100004AEC(&qword_1009AD0F0);
  v0[16] = v1;
  uint64_t v2 = *(void *)(v1 - 8);
  v0[17] = v2;
  v0[18] = swift_task_alloc((*(void *)(v2 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = sub_100004AEC(&qword_1009AD0F8);
  v0[19] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v0[20] = v4;
  v0[21] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = sub_100004AEC(&qword_1009AD100);
  v0[22] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v0[23] = v6;
  v0[24] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003FA12C, 0LL, 0LL);
}

uint64_t sub_1003FA12C()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C8A8 + dword_10099C8A8);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C8AC);
    *(void *)(v0 + 200) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1003FA218;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1003FA218(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 200LL);
  *(void *)(*(void *)v1 + 208LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003FA274, 0LL, 0LL);
}

uint64_t sub_1003FA274()
{
  uint64_t v1 = *(void *)(v0 + 208);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v1)
  {
    if (qword_10099B400 != -1) {
      swift_once(&qword_10099B400, sub_1003F889C);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    uint64_t v3 = sub_10000A720(v2, (uint64_t)qword_100A2A928);
    *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v3;
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v4,  v5,  "Key service updates registered to advertisement cache observation storing.",  v6,  2u);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    uint64_t v8 = *(void *)(v0 + 160);
    uint64_t v7 = *(void *)(v0 + 168);
    uint64_t v10 = *(void *)(v0 + 144);
    uint64_t v9 = *(void *)(v0 + 152);
    uint64_t v12 = *(void *)(v0 + 128);
    uint64_t v11 = *(void *)(v0 + 136);

    (*(void (**)(uint64_t, void, uint64_t))(v11 + 104))( v10,  enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:),  v12);
    AsyncStream.init(_:bufferingPolicy:_:)( &type metadata for BeaconKeyService.KeyStreamChange,  v10,  sub_10040788C,  v1,  &type metadata for BeaconKeyService.KeyStreamChange);
    AsyncStream.makeAsyncIterator()(v9);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    NSString v13 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(void *)(v0 + 224) = v13;
    *NSString v13 = v0;
    v13[1] = sub_1003FA510;
    return AsyncStream.Iterator.next(isolation:)(v0 + 120, 0LL, 0LL, *(void *)(v0 + 176));
  }

  else
  {
    if (qword_10099B400 != -1) {
      swift_once(&qword_10099B400, sub_1003F889C);
    }
    uint64_t v15 = type metadata accessor for Logger(0LL);
    uint64_t v16 = sub_10000A720(v15, (uint64_t)qword_100A2A928);
    uint64_t v17 = (os_log_s *)Logger.logObject.getter(v16);
    os_log_type_t v18 = static os_log_type_t.error.getter(v17);
    if (os_log_type_enabled(v17, v18))
    {
      os_log_type_t v19 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)os_log_type_t v19 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v17,  v18,  "Advertisement cache observation storing cannot register. Missing BeaconKeyService.",  v19,  2u);
      swift_slowDealloc(v19, -1LL, -1LL);
    }

    uint64_t v20 = *(void *)(v0 + 168);
    uint64_t v21 = *(void *)(v0 + 144);
    swift_task_dealloc(*(void *)(v0 + 192));
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1003FA510()
{
  return swift_task_switch(sub_1003FA564, 0LL, 0LL);
}

uint64_t sub_1003FA564()
{
  if (*(void *)(v0 + 120))
  {
    uint64_t v1 = swift_bridgeObjectRelease();
    uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
    os_log_type_t v3 = static os_log_type_t.default.getter(v2);
    if (os_log_type_enabled(v2, v3))
    {
      uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v4 = 0;
      _os_log_impl((void *)&_mh_execute_header, v2, v3, "Key service updated. Updating leech scanner.", v4, 2u);
      swift_slowDealloc(v4, -1LL, -1LL);
    }

    type metadata accessor for Transaction(0LL);
    static Transaction.asyncTask(name:block:)("LeechScanner.EvaluateState", 26LL, 2LL, &unk_1009AD108, 0LL);
    os_log_type_t v5 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(void *)(v0 + 224) = v5;
    *os_log_type_t v5 = v0;
    v5[1] = sub_1003FA510;
    return AsyncStream.Iterator.next(isolation:)(v0 + 120, 0LL, 0LL, *(void *)(v0 + 176));
  }

  else
  {
    uint64_t v7 = *(void *)(v0 + 208);
    (*(void (**)(void, void))(*(void *)(v0 + 184) + 8LL))(*(void *)(v0 + 192), *(void *)(v0 + 176));
    swift_release(v7);
    uint64_t v8 = *(void *)(v0 + 168);
    uint64_t v9 = *(void *)(v0 + 144);
    swift_task_dealloc(*(void *)(v0 + 192));
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1003FA6CC(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  v4[15] = a4;
  uint64_t v5 = *(void *)(type metadata accessor for DiscoveredObject(0LL) - 8);
  v4[16] = v5;
  uint64_t v6 = *(void *)(v5 + 64);
  v4[17] = v6;
  v4[18] = swift_task_alloc((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009AD120);
  v4[19] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = sub_100004AEC(&qword_1009AD128);
  v4[20] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v4[21] = v9;
  v4[22] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC(&qword_1009AD130);
  v4[23] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  _BYTE v4[24] = v11;
  v4[25] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = sub_100004AEC(&qword_1009AD138);
  v4[26] = v12;
  uint64_t v13 = *(void *)(v12 - 8);
  v4[27] = v13;
  v4[28] = swift_task_alloc((*(void *)(v13 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003FA7D4, 0LL, 0LL);
}

uint64_t sub_1003FA7D4()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    os_log_type_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C9B0 + dword_10099C9B0);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C9B4);
    *(void *)(v0 + 232) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1003FA8C0;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1003FA8C0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 232LL);
  *(void *)(*(void *)v1 + 24Hasher.init(_seed:)(v3, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003FA91C, 0LL, 0LL);
}

uint64_t sub_1003FA91C()
{
  uint64_t v1 = *(void *)(v0 + 240);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v1)
  {
    if (qword_10099B400 != -1) {
      swift_once(&qword_10099B400, sub_1003F889C);
    }
    uint64_t v2 = type metadata accessor for Logger(0LL);
    uint64_t v3 = sub_10000A720(v2, (uint64_t)qword_100A2A928);
    uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
    os_log_type_t v5 = static os_log_type_t.default.getter(v4);
    if (os_log_type_enabled(v4, v5))
    {
      uint64_t v6 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v6 = 0;
      _os_log_impl((void *)&_mh_execute_header, v4, v5, "Leech scanner registered for stream.", v6, 2u);
      swift_slowDealloc(v6, -1LL, -1LL);
    }

    uint64_t v8 = *(void *)(v0 + 192);
    uint64_t v7 = *(void *)(v0 + 200);
    uint64_t v10 = *(void *)(v0 + 176);
    uint64_t v9 = *(void *)(v0 + 184);
    uint64_t v11 = *(void *)(v0 + 160);
    uint64_t v12 = *(void *)(v0 + 168);

    uint64_t v13 = sub_100004AEC(&qword_10099E6B0);
    *(void *)(v0 + 248) = v13;
    (*(void (**)(uint64_t, void, uint64_t))(v12 + 104))( v10,  enum case for AsyncStream.Continuation.BufferingPolicy.unbounded<A>(_:),  v11);
    AsyncStream.init(_:bufferingPolicy:_:)(v13, v10, sub_10040792C, v1, v13);
    AsyncStream.makeAsyncIterator()(v9);
    (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v7, v9);
    uint64_t v14 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(void *)(v0 + 256) = v14;
    *uint64_t v14 = v0;
    v14[1] = sub_1003FABD0;
    return AsyncStream.Iterator.next(isolation:)(*(void *)(v0 + 152), 0LL, 0LL, *(void *)(v0 + 208));
  }

  else
  {
    if (qword_10099B400 != -1) {
      swift_once(&qword_10099B400, sub_1003F889C);
    }
    uint64_t v16 = type metadata accessor for Logger(0LL);
    uint64_t v17 = sub_10000A720(v16, (uint64_t)qword_100A2A928);
    os_log_type_t v18 = (os_log_s *)Logger.logObject.getter(v17);
    os_log_type_t v19 = static os_log_type_t.error.getter(v18);
    if (os_log_type_enabled(v18, v19))
    {
      uint64_t v20 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v20 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v18,  v19,  "Leech scanner cannot register. Missing LeechScanningService.",  v20,  2u);
      swift_slowDealloc(v20, -1LL, -1LL);
    }

    uint64_t v21 = *(void *)(v0 + 200);
    uint64_t v22 = *(void *)(v0 + 176);
    uint64_t v24 = *(void *)(v0 + 144);
    uint64_t v23 = *(void *)(v0 + 152);
    swift_task_dealloc(*(void *)(v0 + 224));
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1003FABD0()
{
  return swift_task_switch(sub_1003FAC24, 0LL, 0LL);
}

uint64_t sub_1003FAC24()
{
  uint64_t v1 = *(void *)(v0 + 248);
  uint64_t v2 = *(void *)(v0 + 152);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v1 - 8) + 48LL))(v2, 1LL, v1) == 1)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 216) + 8LL))(*(void *)(v0 + 224), *(void *)(v0 + 208));
    swift_release();
    uint64_t v3 = *(void *)(v0 + 200);
    uint64_t v4 = *(void *)(v0 + 176);
    uint64_t v6 = *(void *)(v0 + 144);
    uint64_t v5 = *(void *)(v0 + 152);
    swift_task_dealloc(*(void *)(v0 + 224));
    swift_task_dealloc(v3);
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v9 = *(void *)(v0 + 136);
    uint64_t v8 = *(void *)(v0 + 144);
    uint64_t v10 = *(void *)(v0 + 120);
    uint64_t v11 = *(void *)(v0 + 128);
    swift_release();
    uint64_t v12 = v2 + *(int *)(v1 + 48);
    type metadata accessor for Transaction(0LL);
    sub_10002218C(v12, v8, type metadata accessor for DiscoveredObject);
    uint64_t v13 = *(unsigned __int8 *)(v11 + 80);
    uint64_t v14 = (v13 + 24) & ~v13;
    uint64_t v15 = swift_allocObject(&unk_100958020, v14 + v9, v13 | 7);
    *(void *)(v15 + swift_weakDestroy(v0 + 16) = v10;
    sub_10002218C(v8, v15 + v14, type metadata accessor for DiscoveredObject);
    swift_retain();
    static Transaction.asyncTask(name:block:)("LeechScanner.ObjectDiscovery", 28LL, 2LL, &unk_1009AD148, v15);
    swift_release();
    uint64_t v16 = (void *)swift_task_alloc(async function pointer to AsyncStream.Iterator.next(isolation:)[1]);
    *(void *)(v0 + 256) = v16;
    *uint64_t v16 = v0;
    v16[1] = sub_1003FABD0;
    return AsyncStream.Iterator.next(isolation:)(*(void *)(v0 + 152), 0LL, 0LL, *(void *)(v0 + 208));
  }

uint64_t sub_1003FADDC(uint64_t a1, uint64_t a2)
{
  v2[19] = a1;
  v2[20] = a2;
  unint64_t v3 = (*(void *)(*(void *)(type metadata accessor for ObservedAdvertisement(0LL) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[21] = swift_task_alloc(v3);
  v2[22] = swift_task_alloc(v3);
  v2[23] = swift_task_alloc(v3);
  v2[24] = swift_task_alloc(v3);
  v2[25] = swift_task_alloc(v3);
  uint64_t v4 = type metadata accessor for DiscoveredObject(0LL);
  v2[26] = v4;
  unint64_t v5 = (*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[27] = swift_task_alloc(v5);
  v2[28] = swift_task_alloc(v5);
  v2[29] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  v2[30] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[31] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[32] = swift_task_alloc(v8);
  v2[33] = swift_task_alloc(v8);
  v2[34] = swift_task_alloc(v8);
  v2[35] = swift_task_alloc(v8);
  v2[36] = swift_task_alloc(v8);
  v2[37] = swift_task_alloc(v8);
  unint64_t v9 = (*(void *)(*(void *)(sub_100004AEC(&qword_1009AC230) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[38] = swift_task_alloc(v9);
  v2[39] = swift_task_alloc(v9);
  v2[40] = swift_task_alloc(v9);
  return swift_task_switch(sub_1003FAF50, 0LL, 0LL);
}

uint64_t sub_1003FAF50()
{
  uint64_t v1 = (uint64_t *)(v0[20] + *(int *)(v0[26] + 36LL));
  uint64_t v3 = *v1;
  uint64_t v2 = v1[1];
  uint64_t v4 = (void *)swift_task_alloc(dword_1009AD154);
  v0[41] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1003FAFC4;
  return sub_1003FCB44(v0[40], v3, v2);
}

uint64_t sub_1003FAFC4()
{
  return swift_task_switch(sub_1003FB018, 0LL, 0LL);
}

uint64_t sub_1003FB018()
{
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 240);
  uint64_t v3 = *(void *)(v0 + 248);
  sub_10001581C(*(void *)(v0 + 320), v1, &qword_1009AC230);
  uint64_t v4 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48);
  *(void *)(v0 + 336) = v4;
  int v5 = v4(v1, 1LL, v2);
  uint64_t v6 = *(void *)(v0 + 312);
  if (v5 == 1)
  {
    sub_100015794(v6, &qword_1009AC230);
    uint64_t v7 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 336);
    uint64_t v8 = *(void *)(v0 + 304);
    uint64_t v9 = *(void *)(v0 + 240);
    sub_10001581C(*(void *)(v0 + 320), v8, &qword_1009AC230);
    int v10 = v7(v8, 1LL, v9);
    uint64_t v11 = *(void *)(v0 + 304);
    if (v10 == 1)
    {
      sub_100015794(v11, &qword_1009AC230);
      if (qword_10099B400 != -1) {
        swift_once(&qword_10099B400, sub_1003F889C);
      }
      uint64_t v12 = *(void *)(v0 + 224);
      uint64_t v13 = *(void *)(v0 + 160);
      uint64_t v14 = type metadata accessor for Logger(0LL);
      sub_10000A720(v14, (uint64_t)qword_100A2A928);
      uint64_t v15 = sub_10001DC4C(v13, v12, type metadata accessor for DiscoveredObject);
      uint64_t v16 = (os_log_s *)Logger.logObject.getter(v15);
      os_log_type_t v17 = static os_log_type_t.info.getter(v16);
      BOOL v18 = os_log_type_enabled(v16, v17);
      uint64_t v19 = *(void *)(v0 + 320);
      uint64_t v20 = *(void *)(v0 + 224);
      if (v18)
      {
        uint64_t v112 = *(void *)(v0 + 320);
        uint64_t v21 = *(void *)(v0 + 208);
        uint64_t v22 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
        os_log_t loga = (os_log_t)swift_slowAlloc(32LL, -1LL);
        *(_DWORD *)uint64_t v22 = 136446210;
        uint64_t v115 = (uint64_t)loga;
        uint64_t v23 = (uint64_t *)(v20 + *(int *)(v21 + 36));
        uint64_t v25 = *v23;
        uint64_t v24 = v23[1];
        sub_10008699C(*v23, v24);
        uint64_t v26 = sub_1000AFD00(v25, v24);
        unint64_t v28 = v27;
        sub_1000869A4(v25, v24);
        *(void *)(v0 + 48) = sub_1003F11D4(v26, v28, &v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v22 + 4, v22 + 12);
        swift_bridgeObjectRelease();
        sub_100018C68(v20, type metadata accessor for DiscoveredObject);
        _os_log_impl( (void *)&_mh_execute_header,  v16,  v17,  "Leech did not reconcile advertisement %{public}s)!",  v22,  0xCu);
        swift_arrayDestroy(loga, 1LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(loga, -1LL, -1LL);
        swift_slowDealloc(v22, -1LL, -1LL);

        uint64_t v29 = v112;
      }

      else
      {

        sub_100018C68(v20, type metadata accessor for DiscoveredObject);
        uint64_t v29 = v19;
      }

      sub_100015794(v29, &qword_1009AC230);
      uint64_t v61 = *(void *)(v0 + 312);
      uint64_t v63 = *(void *)(v0 + 296);
      uint64_t v62 = *(void *)(v0 + 304);
      uint64_t v65 = *(void *)(v0 + 280);
      uint64_t v64 = *(void *)(v0 + 288);
      uint64_t v66 = *(void *)(v0 + 264);
      uint64_t v67 = *(void *)(v0 + 272);
      uint64_t v68 = *(void *)(v0 + 256);
      uint64_t v69 = *(void *)(v0 + 232);
      uint64_t v100 = *(void *)(v0 + 224);
      uint64_t v102 = *(void *)(v0 + 216);
      uint64_t v104 = *(void *)(v0 + 200);
      uint64_t v106 = *(void *)(v0 + 192);
      uint64_t v108 = *(void *)(v0 + 184);
      os_log_t logb = *(os_log_t *)(v0 + 176);
      uint64_t v114 = *(void *)(v0 + 168);
      swift_task_dealloc(*(void *)(v0 + 320));
      swift_task_dealloc(v61);
      swift_task_dealloc(v62);
      swift_task_dealloc(v63);
      swift_task_dealloc(v64);
      swift_task_dealloc(v65);
      swift_task_dealloc(v67);
      swift_task_dealloc(v66);
      swift_task_dealloc(v68);
      swift_task_dealloc(v69);
      swift_task_dealloc(v100);
      swift_task_dealloc(v102);
      swift_task_dealloc(v104);
      swift_task_dealloc(v106);
      swift_task_dealloc(v108);
      swift_task_dealloc(logb);
      swift_task_dealloc(v114);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }

    else
    {
      uint64_t v32 = *(void *)(v0 + 272);
      uint64_t v33 = *(void *)(v0 + 280);
      uint64_t v34 = *(void *)(v0 + 216);
      uint64_t v35 = *(void *)(v0 + 200);
      uint64_t v36 = *(void *)(v0 + 160);
      sub_10002218C(v11, v33, type metadata accessor for BeaconKeyManager.IndexInformation);
      sub_10001DC4C(v36, v34, type metadata accessor for DiscoveredObject);
      sub_10001DC4C(v33, v32, type metadata accessor for BeaconKeyManager.IndexInformation);
      sub_1003FDF68(v34, v32, 2, v35);
      if (qword_10099B400 != -1) {
        swift_once(&qword_10099B400, sub_1003F889C);
      }
      uint64_t v37 = *(void *)(v0 + 280);
      uint64_t v38 = *(void *)(v0 + 264);
      uint64_t v113 = *(void *)(v0 + 256);
      uint64_t v40 = *(void *)(v0 + 192);
      uint64_t v39 = *(void *)(v0 + 200);
      uint64_t v42 = *(void *)(v0 + 176);
      uint64_t v41 = *(void *)(v0 + 184);
      uint64_t v43 = *(void *)(v0 + 168);
      uint64_t v44 = type metadata accessor for Logger(0LL);
      *(void *)(v0 + 352) = sub_10000A720(v44, (uint64_t)qword_100A2A928);
      sub_10001DC4C(v39, v40, type metadata accessor for ObservedAdvertisement);
      sub_10001DC4C(v39, v41, type metadata accessor for ObservedAdvertisement);
      sub_10001DC4C(v39, v42, type metadata accessor for ObservedAdvertisement);
      sub_10001DC4C(v39, v43, type metadata accessor for ObservedAdvertisement);
      sub_10001DC4C(v37, v38, type metadata accessor for BeaconKeyManager.IndexInformation);
      uint64_t v45 = sub_10001DC4C(v37, v113, type metadata accessor for BeaconKeyManager.IndexInformation);
      int v46 = (os_log_s *)Logger.logObject.getter(v45);
      os_log_type_t v47 = static os_log_type_t.info.getter(v46);
      if (os_log_type_enabled(v46, v47))
      {
        os_log_type_t v107 = v47;
        os_log_t log = v46;
        uint64_t v49 = *(void *)(v0 + 184);
        uint64_t v48 = *(void *)(v0 + 192);
        uint64_t v98 = v0 + 96;
        uint64_t v99 = v0 + 104;
        uint64_t v101 = v0 + 112;
        uint64_t v103 = v0 + 120;
        uint64_t v97 = *(void *)(v0 + 176);
        uint64_t v50 = swift_slowAlloc(82LL, -1LL);
        uint64_t v105 = swift_slowAlloc(192LL, -1LL);
        uint64_t v115 = v105;
        *(_DWORD *)uint64_t v50 = 141559811;
        *(void *)(v0 + 64) = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v50 + 4, v50 + 12);
        *(_WORD *)(v50 + 12) = 2081;
        uint64_t v51 = *(void *)(v48 + 16);
        uint64_t v52 = *(void *)(v48 + 24);
        sub_10008699C(v51, v52);
        uint64_t v53 = sub_1000AFD00(v51, v52);
        unint64_t v55 = v54;
        sub_1000869A4(v51, v52);
        *(void *)(v0 + 72) = sub_1003F11D4(v53, v55, &v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v50 + 14, v50 + 22);
        swift_bridgeObjectRelease();
        sub_100018C68(v48, type metadata accessor for ObservedAdvertisement);
        *(_WORD *)(v50 + 22) = 2082;
        int v56 = sub_100041014(*(_BYTE *)(v49 + 32) & 0xB);
        uint64_t v57 = sub_1000409B4(v56 & 0x10101FF);
        *(void *)(v0 + 80) = sub_1003F11D4(v57, v58, &v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v0 + 88, v50 + 24, v50 + 32);
        swift_bridgeObjectRelease();
        sub_100018C68(v49, type metadata accessor for ObservedAdvertisement);
        *(_WORD *)(v50 + 32) = 2082;
        if ((*(_BYTE *)(v97 + 35) & 1) != 0)
        {
          unint64_t v59 = 0xE400000000000000LL;
          uint64_t v60 = 1701736302LL;
        }

        else
        {
          *(_BYTE *)(v0 + 376) = *(_BYTE *)(*(void *)(v0 + 176) + 34LL);
          unint64_t v75 = sub_100041584();
          uint64_t v76 = FixedWidthInteger.data.getter(&type metadata for UInt8, v75);
          unint64_t v78 = v77;
          uint64_t v60 = Data.hexString.getter(v76, v77);
          unint64_t v59 = v79;
          sub_100016F9C(v76, v78);
        }

        uint64_t v80 = *(void *)(v0 + 256);
        uint64_t v81 = *(void *)(v0 + 264);
        uint64_t v82 = *(void *)(v0 + 240);
        uint64_t v84 = *(void *)(v0 + 168);
        uint64_t v83 = *(void *)(v0 + 176);
        *(void *)(v0 + 88) = sub_1003F11D4(v60, v59, &v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 88, v98, v50 + 34, v50 + 42);
        swift_bridgeObjectRelease();
        sub_100018C68(v83, type metadata accessor for ObservedAdvertisement);
        *(_WORD *)(v50 + 42) = 2082;
        uint64_t v85 = sub_100040BA4(*(unsigned __int8 *)(v84 + 32));
        *(void *)(v0 + 96) = sub_1003F11D4(v85, v86, &v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v98, v99, v50 + 44, v50 + 52);
        swift_bridgeObjectRelease();
        sub_100018C68(v84, type metadata accessor for ObservedAdvertisement);
        *(_WORD *)(v50 + 52) = 2080;
        id v87 = (void *)(v81 + *(int *)(v82 + 20));
        uint64_t v89 = v87[3];
        uint64_t v88 = v87[4];
        sub_100012ED8(v87, v89);
        uint64_t v90 = dispatch thunk of CustomStringConvertible.description.getter(v89, *(void *)(v88 + 16));
        *(void *)(v0 + 104) = sub_1003F11D4(v90, v91, &v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v99, v101, v50 + 54, v50 + 62);
        swift_bridgeObjectRelease();
        sub_100018C68(v81, type metadata accessor for BeaconKeyManager.IndexInformation);
        *(_WORD *)(v50 + 62) = 2160;
        *(void *)(v0 + 112) = 1752392040LL;
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v101, v103, v50 + 64, v50 + 72);
        *(_WORD *)(v50 + 72) = 2081;
        uint64_t v92 = type metadata accessor for UUID(0LL);
        uint64_t v93 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
        uint64_t v94 = dispatch thunk of CustomStringConvertible.description.getter(v92, v93);
        *(void *)(v0 + 120) = sub_1003F11D4(v94, v95, &v115);
        UnsafeMutableRawBufferPointer.copyMemory(from:)(v103, v0 + 128, v50 + 74, v50 + 82);
        swift_bridgeObjectRelease();
        sub_100018C68(v80, type metadata accessor for BeaconKeyManager.IndexInformation);
        _os_log_impl( (void *)&_mh_execute_header,  log,  v107,  "Leech Reconciled advertisement %{private,mask.hash}s, multiPart: %{public}s, hint: %{public}s, Type18: %{pub lic}s,\n index: %s, beacon: %{private,mask.hash}s.",  (uint8_t *)v50,  0x52u);
        swift_arrayDestroy(v105, 6LL, (char *)&type metadata for Any + 8);
        swift_slowDealloc(v105, -1LL, -1LL);
        swift_slowDealloc(v50, -1LL, -1LL);
      }

      else
      {
        uint64_t v70 = *(void *)(v0 + 256);
        uint64_t v71 = *(void *)(v0 + 264);
        uint64_t v72 = *(void *)(v0 + 184);
        uint64_t v74 = *(void *)(v0 + 168);
        uint64_t v73 = *(void *)(v0 + 176);
        sub_100018C68(*(void *)(v0 + 192), type metadata accessor for ObservedAdvertisement);
        sub_100018C68(v72, type metadata accessor for ObservedAdvertisement);
        sub_100018C68(v73, type metadata accessor for ObservedAdvertisement);
        sub_100018C68(v74, type metadata accessor for ObservedAdvertisement);
        sub_100018C68(v71, type metadata accessor for BeaconKeyManager.IndexInformation);
        sub_100018C68(v70, type metadata accessor for BeaconKeyManager.IndexInformation);
      }

      unint64_t v96 = (void *)swift_task_alloc(dword_1009AD15C);
      *(void *)(v0 + 360) = v96;
      *unint64_t v96 = v0;
      v96[1] = sub_1003FC6AC;
      return sub_1003FE25C(*(void *)(v0 + 200));
    }
  }

  else
  {
    sub_10002218C(v6, *(void *)(v0 + 296), type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v30 = (void *)swift_task_alloc(dword_1009AD164);
    *(void *)(v0 + 344) = v30;
    *uint64_t v30 = v0;
    v30[1] = sub_1003FBA04;
    return sub_1003FD97C(*(void *)(v0 + 296));
  }

uint64_t sub_1003FBA04(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 344LL);
  *(_BYTE *)(*(void *)v1 + 377LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003FBA60, 0LL, 0LL);
}

uint64_t sub_1003FBA60()
{
  if ((*(_BYTE *)(v0 + 377) & 1) == 0)
  {
    if (qword_10099B400 != -1) {
      swift_once(&qword_10099B400, sub_1003F889C);
    }
    uint64_t v24 = *(void *)(v0 + 288);
    uint64_t v25 = *(void *)(v0 + 296);
    uint64_t v26 = *(void *)(v0 + 232);
    uint64_t v27 = *(void *)(v0 + 160);
    uint64_t v28 = type metadata accessor for Logger(0LL);
    sub_10000A720(v28, (uint64_t)qword_100A2A928);
    sub_10001DC4C(v25, v24, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v29 = sub_10001DC4C(v27, v26, type metadata accessor for DiscoveredObject);
    uint64_t v30 = (os_log_s *)Logger.logObject.getter(v29);
    os_log_type_t v31 = static os_log_type_t.info.getter(v30);
    BOOL v32 = os_log_type_enabled(v30, v31);
    uint64_t v33 = *(void *)(v0 + 320);
    uint64_t v34 = *(void *)(v0 + 288);
    uint64_t v35 = *(void *)(v0 + 296);
    uint64_t v36 = *(void *)(v0 + 232);
    if (v32)
    {
      os_log_t logb = *(os_log_t *)(v0 + 320);
      uint64_t v37 = *(void *)(v0 + 208);
      uint64_t v38 = swift_slowAlloc(32LL, -1LL);
      uint64_t v123 = swift_slowAlloc(64LL, -1LL);
      uint64_t v136 = v123;
      *(_DWORD *)uint64_t v38 = 141558531;
      *(void *)(v0 + 136) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 136, v0 + 144, v38 + 4, v38 + 12);
      *(_WORD *)(v38 + 12) = 2081;
      uint64_t v126 = v35;
      uint64_t v39 = type metadata accessor for UUID(0LL);
      uint64_t v40 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v41 = dispatch thunk of CustomStringConvertible.description.getter(v39, v40);
      *(void *)(v0 + 144) = sub_1003F11D4(v41, v42, &v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 144, v0 + 152, v38 + 14, v38 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v34, type metadata accessor for BeaconKeyManager.IndexInformation);
      *(_WORD *)(v38 + 22) = 2082;
      uint64_t v43 = (uint64_t *)(v36 + *(int *)(v37 + 36));
      uint64_t v44 = *v43;
      uint64_t v45 = v43[1];
      sub_10008699C(*v43, v45);
      uint64_t v46 = sub_1000AFD00(v44, v45);
      unint64_t v48 = v47;
      sub_1000869A4(v44, v45);
      *(void *)(v0 + 128) = sub_1003F11D4(v46, v48, &v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v38 + 24, v38 + 32);
      swift_bridgeObjectRelease();
      sub_100018C68(v36, type metadata accessor for DiscoveredObject);
      _os_log_impl( (void *)&_mh_execute_header,  v30,  v31,  "Leech Ignoring unsupported beacon %{private,mask.hash}s advertisement %{public}s!",  (uint8_t *)v38,  0x20u);
      swift_arrayDestroy(v123, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v123, -1LL, -1LL);
      swift_slowDealloc(v38, -1LL, -1LL);

      sub_100018C68(v126, type metadata accessor for BeaconKeyManager.IndexInformation);
      uint64_t v23 = (uint64_t)logb;
    }

    else
    {

      sub_100018C68(v36, type metadata accessor for DiscoveredObject);
      sub_100018C68(v34, type metadata accessor for BeaconKeyManager.IndexInformation);
      sub_100018C68(v35, type metadata accessor for BeaconKeyManager.IndexInformation);
      uint64_t v23 = v33;
    }

    goto LABEL_18;
  }

  sub_100018C68(*(void *)(v0 + 296), type metadata accessor for BeaconKeyManager.IndexInformation);
  uint64_t v1 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v0 + 336);
  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 240);
  sub_10001581C(*(void *)(v0 + 320), v2, &qword_1009AC230);
  int v4 = v1(v2, 1LL, v3);
  uint64_t v5 = *(void *)(v0 + 304);
  if (v4 == 1)
  {
    sub_100015794(v5, &qword_1009AC230);
    if (qword_10099B400 != -1) {
      swift_once(&qword_10099B400, sub_1003F889C);
    }
    uint64_t v6 = *(void *)(v0 + 224);
    uint64_t v7 = *(void *)(v0 + 160);
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_10000A720(v8, (uint64_t)qword_100A2A928);
    uint64_t v9 = sub_10001DC4C(v7, v6, type metadata accessor for DiscoveredObject);
    int v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.info.getter(v10);
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = *(void *)(v0 + 320);
    uint64_t v14 = *(void *)(v0 + 224);
    if (v12)
    {
      uint64_t v134 = *(void *)(v0 + 320);
      uint64_t v15 = *(void *)(v0 + 208);
      uint64_t v16 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      os_log_t loga = (os_log_t)swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v16 = 136446210;
      uint64_t v136 = (uint64_t)loga;
      os_log_type_t v17 = (uint64_t *)(v14 + *(int *)(v15 + 36));
      uint64_t v19 = *v17;
      uint64_t v18 = v17[1];
      sub_10008699C(*v17, v18);
      uint64_t v20 = sub_1000AFD00(v19, v18);
      unint64_t v22 = v21;
      sub_1000869A4(v19, v18);
      *(void *)(v0 + 48) = sub_1003F11D4(v20, v22, &v136);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v16 + 4, v16 + 12);
      swift_bridgeObjectRelease();
      sub_100018C68(v14, type metadata accessor for DiscoveredObject);
      _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "Leech did not reconcile advertisement %{public}s)!",  v16,  0xCu);
      swift_arrayDestroy(loga, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(loga, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);

      uint64_t v23 = v134;
    }

    else
    {

      sub_100018C68(v14, type metadata accessor for DiscoveredObject);
      uint64_t v23 = v13;
    }

uint64_t sub_1003FC6AC()
{
  uint64_t v2 = *(void *)(*(void *)v1 + 360LL);
  *(void *)(*(void *)v1 + 368LL) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    uint64_t v3 = sub_1003FC854;
  }
  else {
    uint64_t v3 = sub_1003FC710;
  }
  return swift_task_switch(v3, 0LL, 0LL);
}

uint64_t sub_1003FC710()
{
  uint64_t v1 = *(void *)(v0 + 320);
  uint64_t v2 = *(void *)(v0 + 280);
  sub_100018C68(*(void *)(v0 + 200), type metadata accessor for ObservedAdvertisement);
  sub_100018C68(v2, type metadata accessor for BeaconKeyManager.IndexInformation);
  sub_100015794(v1, &qword_1009AC230);
  uint64_t v3 = *(void *)(v0 + 312);
  uint64_t v5 = *(void *)(v0 + 296);
  uint64_t v4 = *(void *)(v0 + 304);
  uint64_t v7 = *(void *)(v0 + 280);
  uint64_t v6 = *(void *)(v0 + 288);
  uint64_t v8 = *(void *)(v0 + 264);
  uint64_t v9 = *(void *)(v0 + 272);
  uint64_t v10 = *(void *)(v0 + 256);
  uint64_t v11 = *(void *)(v0 + 232);
  uint64_t v13 = *(void *)(v0 + 224);
  uint64_t v14 = *(void *)(v0 + 216);
  uint64_t v15 = *(void *)(v0 + 200);
  uint64_t v16 = *(void *)(v0 + 192);
  uint64_t v17 = *(void *)(v0 + 184);
  uint64_t v18 = *(void *)(v0 + 176);
  uint64_t v19 = *(void *)(v0 + 168);
  swift_task_dealloc(*(void *)(v0 + 320));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003FC854()
{
  uint64_t v1 = *(void *)(v0 + 368);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = *(void *)(v0 + 368);
    uint64_t v31 = *(void *)(v0 + 280);
    uint64_t v33 = *(void *)(v0 + 320);
    uint64_t v29 = *(void *)(v0 + 200);
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = swift_slowAlloc(32LL, -1LL);
    uint64_t v35 = v7;
    *(_DWORD *)uint64_t v6 = 136446210;
    swift_getErrorValue(v5, v0 + 40, v0 + 16);
    uint64_t v8 = Error.localizedDescription.getter(*(void *)(v0 + 24), *(void *)(v0 + 32));
    *(void *)(v0 + 56) = sub_1003F11D4(v8, v9, &v35);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v6 + 4, v6 + 12);
    swift_bridgeObjectRelease();
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl( (void *)&_mh_execute_header,  v3,  v4,  "Leech cannot save observedAdvertisement. error: %{public}s.",  v6,  0xCu);
    swift_arrayDestroy(v7, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    swift_errorRelease(v5);
    sub_100018C68(v29, type metadata accessor for ObservedAdvertisement);
    sub_100018C68(v31, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v10 = v33;
  }

  else
  {
    uint64_t v11 = *(void *)(v0 + 368);
    uint64_t v12 = *(void *)(v0 + 320);
    uint64_t v13 = *(void *)(v0 + 280);
    uint64_t v14 = *(void *)(v0 + 200);

    swift_errorRelease(v11);
    swift_errorRelease(v11);
    swift_errorRelease(v11);
    sub_100018C68(v14, type metadata accessor for ObservedAdvertisement);
    sub_100018C68(v13, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v10 = v12;
  }

  sub_100015794(v10, &qword_1009AC230);
  uint64_t v15 = *(void *)(v0 + 312);
  uint64_t v17 = *(void *)(v0 + 296);
  uint64_t v16 = *(void *)(v0 + 304);
  uint64_t v19 = *(void *)(v0 + 280);
  uint64_t v18 = *(void *)(v0 + 288);
  uint64_t v20 = *(void *)(v0 + 264);
  uint64_t v21 = *(void *)(v0 + 272);
  uint64_t v22 = *(void *)(v0 + 256);
  uint64_t v23 = *(void *)(v0 + 232);
  uint64_t v25 = *(void *)(v0 + 224);
  uint64_t v26 = *(void *)(v0 + 216);
  uint64_t v27 = *(void *)(v0 + 200);
  uint64_t v28 = *(void *)(v0 + 192);
  uint64_t v30 = *(void *)(v0 + 184);
  uint64_t v32 = *(void *)(v0 + 176);
  uint64_t v34 = *(void *)(v0 + 168);
  swift_task_dealloc(*(void *)(v0 + 320));
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v21);
  swift_task_dealloc(v20);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v30);
  swift_task_dealloc(v32);
  swift_task_dealloc(v34);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003FCB44(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[30] = a3;
  v4[31] = v3;
  v4[28] = a1;
  v4[29] = a2;
  uint64_t v5 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  _BYTE v4[32] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v4[33] = v6;
  v4[34] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009AC230);
  v4[35] = v7;
  unint64_t v8 = (*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v4[36] = swift_task_alloc(v8);
  v4[37] = swift_task_alloc(v8);
  v4[38] = swift_task_alloc(v8);
  return swift_task_switch(sub_1003FCBEC, v3, 0LL);
}

uint64_t sub_1003FCBEC()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 176, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 96, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 120))
  {
    sub_100012EC0((__int128 *)(v0 + 96), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C8A8 + dword_10099C8A8);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C8AC);
    *(void *)(v0 + 312) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1003FCCD8;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1003FCCD8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 312LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 248LL);
  *(void *)(*(void *)v1 + 32Hasher.init(_seed:)(v3, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003FCD38, v3, 0LL);
}

uint64_t sub_1003FCD38()
{
  uint64_t v1 = *(void *)(v0 + 320);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v1)
  {
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 80))
    {
      sub_100012EC0((__int128 *)(v0 + 56), v0 + 136);
      sub_100012ED8((void *)(v0 + 136), *(void *)(v0 + 160));
      uint64_t v15 = (uint64_t (*)(void))((char *)&dword_10099C968 + dword_10099C968);
      uint64_t v3 = (void *)swift_task_alloc(unk_10099C96C);
      *(void *)(v0 + 328) = v3;
      *uint64_t v3 = v0;
      v3[1] = sub_1003FCF04;
      return v15();
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    if (qword_10099B400 != -1) {
      swift_once(&qword_10099B400, sub_1003F889C);
    }
    uint64_t v4 = type metadata accessor for Logger(0LL);
    uint64_t v5 = sub_10000A720(v4, (uint64_t)qword_100A2A928);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter(v6);
    if (os_log_type_enabled(v6, v7))
    {
      unint64_t v8 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v8 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Cannot reconcile: missing BeaconKeyService.", v8, 2u);
      swift_slowDealloc(v8, -1LL, -1LL);
    }

    uint64_t v9 = *(void *)(v0 + 264);

    uint64_t v10 = *(void (**)(void, uint64_t, uint64_t, void))(v9 + 56);
    uint64_t v11 = *(void *)(v0 + 296);
    uint64_t v12 = *(void *)(v0 + 304);
    uint64_t v13 = *(void *)(v0 + 288);
    uint64_t v14 = *(void *)(v0 + 272);
    v10(*(void *)(v0 + 224), 1LL, 1LL, *(void *)(v0 + 256));
    swift_task_dealloc(v12);
    swift_task_dealloc(v11);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  return result;
}

uint64_t sub_1003FCF04(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 328LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 248LL);
  *(void *)(*(void *)v1 + 336LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003FCF64, v3, 0LL);
}

uint64_t sub_1003FCF64()
{
  uint64_t v1 = v0[42];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 17);
  uint64_t v2 = swift_allocObject(&unk_1009580C0, 24LL, 7LL);
  v0[43] = v2;
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v1;
  uint64_t v3 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v4 = (void *)swift_task_alloc(v3);
  v0[44] = v4;
  uint64_t v5 = sub_100004AEC(&qword_1009AD1A0);
  *uint64_t v4 = v0;
  v4[1] = sub_1003FD014;
  return unsafeBlocking<A>(_:)(v0 + 25, sub_100407CE8, v2, v5);
}

uint64_t sub_1003FD014()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 344LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 248LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 352LL));
  swift_release(v1);
  return swift_task_switch(sub_1003FD074, v2, 0LL);
}

uint64_t sub_1003FD074()
{
  v0[45] = v0[25];
  uint64_t v1 = v0[40];
  swift_retain();
  return swift_task_switch(sub_1003FD0B8, v1, 0LL);
}

uint64_t sub_1003FD0B8()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 320) + 136LL);
  *(void *)(v0 + 368) = v1;
  if (v1) {
    return swift_task_switch(sub_1003FD0DC, v1, 0LL);
  }
  __break(1u);
  return result;
}

uint64_t sub_1003FD0DC()
{
  uint64_t v1 = v0[46];
  uint64_t v3 = v0[29];
  uint64_t v2 = v0[30];
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_1009B9310);
  uint64_t v5 = sub_100007864( (unint64_t *)&unk_1009BA000,  type metadata accessor for BeaconKeyServiceBuilder,  (uint64_t)&unk_1007FE9E8);
  uint64_t v6 = (void *)swift_task_alloc(48LL);
  v0[47] = v6;
  _OWORD v6[2] = v1;
  v6[3] = v3;
  v6[4] = v2;
  os_log_type_t v7 = (void *)swift_task_alloc(async function pointer to withTaskGroup<A, B>(of:returning:isolation:body:)[1]);
  v0[48] = v7;
  *os_log_type_t v7 = v0;
  v7[1] = sub_1003FD1BC;
  return withTaskGroup<A, B>(of:returning:isolation:body:)(v0 + 26, v0[35], v4, v0[46], v5, &unk_1009B9320, v6, v0[35]);
}

uint64_t sub_1003FD1BC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 376);
  swift_task_dealloc(*(void *)(*v0 + 384));
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003FD214, *(void *)(v1 + 368), 0LL);
}

uint64_t sub_1003FD214()
{
  uint64_t v1 = v0[31];
  v0[49] = v0[26];
  return swift_task_switch(sub_1003FD230, v1, 0LL);
}

uint64_t sub_1003FD230()
{
  uint64_t v1 = *(void *)(v0 + 392);
  uint64_t v2 = *(void *)(v0 + 304);
  uint64_t v3 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 264);
  if (*(void *)(v1 + 16))
  {
    sub_10001DC4C( v1 + ((*(unsigned __int8 *)(v4 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80)),  *(void *)(v0 + 304),  type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v5(v2, 0LL, 1LL, v3);
  }

  else
  {
    uint64_t v5 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v4 + 56);
    v5(*(void *)(v0 + 304), 1LL, 1LL, v3);
  }

  *(void *)(v0 + 400) = v5;
  uint64_t v6 = *(void *)(v0 + 296);
  uint64_t v7 = *(void *)(v0 + 304);
  uint64_t v8 = *(void *)(v0 + 256);
  uint64_t v9 = *(void *)(v0 + 264);
  swift_bridgeObjectRelease();
  sub_10001581C(v7, v6, &qword_1009AC230);
  uint64_t v10 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v9 + 48);
  *(void *)(v0 + 408) = v10;
  if (v10(v6, 1LL, v8) == 1)
  {
    sub_100015794(*(void *)(v0 + 296), &qword_1009AC230);
    return swift_task_switch(sub_1003FD3E4, 0LL, 0LL);
  }

  else
  {
    uint64_t v12 = *(void *)(v0 + 336);
    uint64_t v13 = *(void *)(v0 + 320);
    sub_100015794(*(void *)(v0 + 304), &qword_1009AC230);
    swift_release(v12);
    swift_release(v13);
    uint64_t v14 = *(void *)(v0 + 296);
    uint64_t v15 = *(void *)(v0 + 272);
    uint64_t v16 = *(void *)(v0 + 224);
    swift_release_n(*(void *)(v0 + 360), 2LL);
    sub_10002218C(v14, v15, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_10002218C(v15, v16, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v17 = *(void *)(v0 + 296);
    uint64_t v18 = *(void *)(v0 + 304);
    uint64_t v19 = *(void *)(v0 + 288);
    uint64_t v20 = *(void *)(v0 + 272);
    (*(void (**)(void, void, uint64_t, void))(v0 + 400))( *(void *)(v0 + 224),  0LL,  1LL,  *(void *)(v0 + 256));
    swift_task_dealloc(v18);
    swift_task_dealloc(v17);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1003FD3E4()
{
  uint64_t v1 = v0[45];
  uint64_t v2 = v0[29];
  uint64_t v3 = v0[30];
  if ((v3 & 0x2000000000000000LL) != 0)
  {
    uint64_t v4 = (void *)swift_allocObject(&unk_100958110, 40LL, 7LL);
    v0[52] = v4;
    void v4[2] = v1;
    void v4[3] = v2;
    void v4[4] = v3 & 0xDFFFFFFFFFFFFFFFLL;
    sub_10008699C(v2, v3);
    swift_retain();
    sub_10008699C(v2, v3);
    uint64_t v9 = (void *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
    v0[53] = v9;
    *uint64_t v9 = v0;
    v9[1] = sub_1003FD51C;
    uint64_t v7 = v0[35];
    uint64_t v6 = v0[36];
    uint64_t v8 = sub_100407D04;
  }

  else
  {
    uint64_t v4 = (void *)swift_allocObject(&unk_1009580E8, 40LL, 7LL);
    v0[54] = v4;
    void v4[2] = v1;
    void v4[3] = v2;
    void v4[4] = v3;
    sub_10008699C(v2, v3);
    swift_retain();
    sub_10008699C(v2, v3);
    uint64_t v5 = (void *)swift_task_alloc(async function pointer to unsafeBlocking<A>(_:)[1]);
    v0[55] = v5;
    *uint64_t v5 = v0;
    v5[1] = sub_1003FD5C4;
    uint64_t v7 = v0[35];
    uint64_t v6 = v0[36];
    uint64_t v8 = sub_100407CF4;
  }

  return unsafeBlocking<A>(_:)(v6, v8, v4, v7);
}

uint64_t sub_1003FD51C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 416LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 424LL));
  swift_release(v1);
  return swift_task_switch(sub_1003FD578, 0LL, 0LL);
}

uint64_t sub_1003FD578()
{
  uint64_t v1 = v0[45];
  uint64_t v2 = v0[31];
  sub_1000869A4(v0[29], v0[30]);
  swift_release(v1);
  return swift_task_switch(sub_1003FD620, v2, 0LL);
}

uint64_t sub_1003FD5C4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 432LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 440LL));
  swift_release(v1);
  return swift_task_switch(sub_1004094AC, 0LL, 0LL);
}

uint64_t sub_1003FD620()
{
  uint64_t v1 = *(void *)(v0 + 288);
  if ((*(unsigned int (**)(uint64_t, uint64_t, void))(v0 + 408))(v1, 1LL, *(void *)(v0 + 256)) == 1)
  {
    sub_100015794(v1, &qword_1009AC230);
    if (qword_10099B400 != -1) {
      swift_once(&qword_10099B400, sub_1003F889C);
    }
    uint64_t v2 = *(void *)(v0 + 232);
    uint64_t v3 = *(void *)(v0 + 240);
    uint64_t v4 = type metadata accessor for Logger(0LL);
    sub_10000A720(v4, (uint64_t)qword_100A2A928);
    sub_10008699C(v2, v3);
    uint64_t v5 = sub_10008699C(v2, v3);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.info.getter(v6);
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = *(void *)(v0 + 360);
    uint64_t v10 = *(void *)(v0 + 336);
    uint64_t v11 = *(void *)(v0 + 320);
    uint64_t v12 = *(void *)(v0 + 304);
    uint64_t v14 = *(void *)(v0 + 232);
    uint64_t v13 = *(void *)(v0 + 240);
    if (v8)
    {
      uint64_t v34 = *(void *)(v0 + 336);
      uint64_t v32 = *(void *)(v0 + 320);
      uint64_t v15 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v33 = v12;
      uint64_t v16 = swift_slowAlloc(32LL, -1LL);
      uint64_t v35 = v16;
      *(_DWORD *)uint64_t v15 = 136446210;
      sub_10008699C(v14, v13);
      uint64_t v31 = v9;
      uint64_t v17 = sub_1000AFD00(v14, v13);
      unint64_t v19 = v18;
      sub_1000869A4(v14, v13);
      *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = sub_1003F11D4(v17, v19, &v35);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v15 + 4, v15 + 12);
      swift_bridgeObjectRelease();
      sub_1000869A4(v14, v13);
      sub_1000869A4(v14, v13);
      _os_log_impl( (void *)&_mh_execute_header,  v6,  v7,  "AdvertisementCacheService did not reconcile advertisement %{public}s!",  v15,  0xCu);
      uint64_t v20 = 1LL;
      swift_arrayDestroy(v16, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v16, -1LL, -1LL);
      swift_slowDealloc(v15, -1LL, -1LL);
      swift_release(v31);
      swift_release(v32);

      swift_release(v34);
      sub_100015794(v33, &qword_1009AC230);
    }

    else
    {

      swift_release(v9);
      swift_release(v11);
      sub_1000869A4(v14, v13);
      sub_1000869A4(v14, v13);
      swift_release(v10);
      sub_100015794(v12, &qword_1009AC230);
      uint64_t v20 = 1LL;
    }
  }

  else
  {
    uint64_t v21 = *(void *)(v0 + 320);
    sub_100015794(*(void *)(v0 + 304), &qword_1009AC230);
    swift_release(v21);
    uint64_t v22 = *(void *)(v0 + 288);
    uint64_t v23 = *(void *)(v0 + 360);
    uint64_t v24 = *(void *)(v0 + 272);
    uint64_t v25 = *(void *)(v0 + 224);
    swift_release(*(void *)(v0 + 336));
    swift_release(v23);
    sub_10002218C(v22, v24, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_10002218C(v24, v25, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v20 = 0LL;
  }

  uint64_t v26 = *(void *)(v0 + 296);
  uint64_t v27 = *(void *)(v0 + 304);
  uint64_t v28 = *(void *)(v0 + 288);
  uint64_t v29 = *(void *)(v0 + 272);
  (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 400))( *(void *)(v0 + 224),  v20,  1LL,  *(void *)(v0 + 256));
  swift_task_dealloc(v27);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003FD97C(uint64_t a1)
{
  v2[17] = a1;
  v2[18] = v1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[19] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[20] = v4;
  v2[21] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003FD9DC, v1, 0LL);
}

uint64_t sub_1003FD9DC()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    uint64_t v3 = *(void *)(v0 + 144);
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release(v3);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v5 = (uint64_t (__cdecl *)())((char *)&dword_10099C8A8 + dword_10099C8A8);
    uint64_t v4 = (void *)swift_task_alloc(unk_10099C8AC);
    *(void *)(v0 + 176) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1003FDADC;
    return v5();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1003FDADC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 176LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 144LL);
  *(void *)(*(void *)v1 + 184LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003FDB3C, v3, 0LL);
}

uint64_t sub_1003FDB3C()
{
  uint64_t v1 = *(void *)(v0 + 184);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v1) {
    return swift_task_switch(sub_1003FDC58, *(void *)(v0 + 184), 0LL);
  }
  if (qword_10099B400 != -1) {
    swift_once(&qword_10099B400, sub_1003F889C);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2A928);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    os_log_type_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)os_log_type_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to get key service.", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  swift_task_dealloc(*(void *)(v0 + 168));
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

void sub_1003FDC58()
{
  uint64_t v1 = *(void **)(v0[23] + 128);
  if (v1)
  {
    v0[24] = sub_100476670(v0[17], v1);
    v0[25] = 0LL;
    swift_task_switch(sub_1003FDCC4, v0[18], 0LL);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1003FDCC4()
{
  uint64_t v1 = *(void *)(v0 + 192);
  swift_release(*(void *)(v0 + 184));
  uint64_t v2 = *(void *)(v1 + 16);
  swift_bridgeObjectRelease(v1);
  swift_task_dealloc(*(void *)(v0 + 168));
  return (*(uint64_t (**)(BOOL))(v0 + 8))(v2 != 0);
}

uint64_t sub_1003FDD14()
{
  if (qword_10099B400 != -1) {
    swift_once(&qword_10099B400, sub_1003F889C);
  }
  uint64_t v1 = *(void *)(v0 + 136);
  uint64_t v3 = *(void *)(v0 + 160);
  uint64_t v2 = *(void *)(v0 + 168);
  uint64_t v4 = *(void *)(v0 + 152);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  sub_10000A720(v5, (uint64_t)qword_100A2A928);
  uint64_t v6 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v2, v1, v4);
  os_log_type_t v7 = (os_log_s *)Logger.logObject.getter(v6);
  os_log_type_t v8 = static os_log_type_t.error.getter(v7);
  BOOL v9 = os_log_type_enabled(v7, v8);
  uint64_t v10 = *(void *)(v0 + 200);
  uint64_t v12 = *(void *)(v0 + 160);
  uint64_t v11 = *(void *)(v0 + 168);
  uint64_t v13 = *(void *)(v0 + 152);
  if (v9)
  {
    uint64_t v20 = *(void *)(v0 + 160);
    uint64_t v21 = *(void *)(v0 + 184);
    uint64_t v14 = swift_slowAlloc(22LL, -1LL);
    uint64_t v15 = swift_slowAlloc(32LL, -1LL);
    uint64_t v22 = v15;
    *(_DWORD *)uint64_t v14 = 141558275;
    *(void *)(v0 + 120) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 120, v0 + 128, v14 + 4, v14 + 12);
    *(_WORD *)(v14 + 12) = 2081;
    uint64_t v16 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v13, v16);
    *(void *)(v0 + 128) = sub_1003F11D4(v17, v18, &v22);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 128, v0 + 136, v14 + 14, v14 + 22);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v20 + 8))(v11, v13);
    _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Failed to determine beacon info %{private,mask.hash}s.",  (uint8_t *)v14,  0x16u);
    swift_arrayDestroy(v15, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v15, -1LL, -1LL);
    swift_slowDealloc(v14, -1LL, -1LL);
    swift_release(v21);
  }

  else
  {
    swift_release(*(void *)(v0 + 184));
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
  }

  swift_errorRelease(v10);

  swift_task_dealloc(*(void *)(v0 + 168));
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_1003FDF68@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, char a3@<W2>, uint64_t a4@<X8>)
{
  uint64_t v38 = a2;
  uint64_t v8 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v41 = v8;
  uint64_t v42 = v9;
  __chkstk_darwin(v8);
  uint64_t v11 = (char *)&v38 - ((v10 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v39 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  __chkstk_darwin(v39);
  uint64_t v13 = (char *)&v38 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = sub_100004AEC(&qword_1009AA730);
  __chkstk_darwin(v14);
  uint64_t v40 = (uint64_t)&v38 - ((v15 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *(void *)a4 = 0LL;
  *(_BYTE *)(a4 + 8) = 1;
  *(_BYTE *)(a4 + 9) = a3;
  uint64_t v16 = (int *)type metadata accessor for DiscoveredObject(0LL);
  uint64_t v17 = (uint64_t *)(a1 + v16[9]);
  uint64_t v19 = *v17;
  uint64_t v18 = v17[1];
  *(void *)(a4 + swift_weakDestroy(v0 + 16) = *v17;
  *(void *)(a4 + 24) = v18;
  *(_BYTE *)(a4 + 32) = *(_BYTE *)(a1 + v16[11]);
  *(_BYTE *)(a4 + 33) = *(_BYTE *)(a1 + v16[12]);
  uint64_t v20 = (char *)(a1 + v16[13]);
  char v21 = *v20;
  LOBYTE(v20) = v20[1];
  *(_BYTE *)(a4 + 34) = v21;
  *(_BYTE *)(a4 + 35) = (_BYTE)v20;
  *(_DWORD *)(a4 + 36) = *(_DWORD *)(a1 + v16[15]);
  uint64_t v22 = a1 + v16[7];
  uint64_t v23 = (int *)type metadata accessor for ObservedAdvertisement(0LL);
  uint64_t v24 = a4 + v23[11];
  uint64_t v25 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v25 - 8) + 16LL))(v24, v22, v25);
  *(_BYTE *)(a4 + v23[14]) = 0;
  uint64_t v26 = a4 + v23[12];
  uint64_t v27 = type metadata accessor for ObservedAdvertisement.Location(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v27 - 8) + 56LL))(v26, 1LL, 1LL, v27);
  sub_10001DC4C(a2, (uint64_t)v13, type metadata accessor for BeaconKeyManager.IndexInformation);
  uint64_t v28 = type metadata accessor for UUID(0LL);
  (*(void (**)(char *, char *, uint64_t))(*(void *)(v28 - 8) + 16LL))(v11, v13, v28);
  uint64_t v29 = &v13[*(int *)(v39 + 20)];
  uint64_t v30 = *((void *)v29 + 3);
  uint64_t v31 = *((void *)v29 + 4);
  sub_100012ED8(v29, v30);
  sub_10008699C(v19, v18);
  char v32 = sub_1005F5498(v30, v31);
  uint64_t v33 = v41;
  v11[*(int *)(v41 + 20)] = v32;
  uint64_t v34 = *((void *)v29 + 3);
  uint64_t v35 = *((void *)v29 + 4);
  sub_100012ED8(v29, v34);
  dispatch thunk of RawRepresentable.rawValue.getter(&v43, v34, *(void *)(v35 + 56));
  sub_100018C68((uint64_t)v13, type metadata accessor for BeaconKeyManager.IndexInformation);
  *(void *)&v11[*(int *)(v33 + 24)] = v43;
  uint64_t v36 = v40;
  sub_10002218C((uint64_t)v11, v40, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  sub_100018C68(v38, type metadata accessor for BeaconKeyManager.IndexInformation);
  sub_100018C68(a1, type metadata accessor for DiscoveredObject);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v42 + 56))(v36, 0LL, 1LL, v33);
  return sub_100015750(v36, a4 + v23[13], &qword_1009AA730);
}

uint64_t sub_1003FE25C(uint64_t a1)
{
  v2[16] = a1;
  v2[17] = v1;
  uint64_t v3 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0LL);
  v2[18] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[19] = v4;
  v2[20] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Logger(0LL);
  v2[21] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[22] = v6;
  v2[23] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for ContinuousClock.Instant(0LL);
  v2[24] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[25] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[26] = swift_task_alloc(v9);
  v2[27] = swift_task_alloc(v9);
  v2[28] = swift_task_alloc(v9);
  v2[29] = swift_task_alloc(v9);
  uint64_t v10 = type metadata accessor for ContinuousClock(0LL);
  v2[30] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[31] = v11;
  v2[32] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003FE35C, v1, 0LL);
}

uint64_t sub_1003FE35C(uint64_t a1)
{
  uint64_t v2 = ContinuousClock.init()(a1);
  ContinuousClock.now.getter(v2);
  uint64_t v3 = qword_10099B9E0;
  swift_retain();
  if (v3 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v1 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v1 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v1 + 80))
  {
    uint64_t v5 = *(void *)(v1 + 136);
    sub_100012EC0((__int128 *)(v1 + 56), v1 + 16);
    swift_release(v5);
    sub_100012ED8((void *)(v1 + 16), *(void *)(v1 + 40));
    uint64_t v7 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v6 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v1 + 264) = v6;
    *uint64_t v6 = v1;
    v6[1] = sub_1003FE480;
    return v7();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1003FE480(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 264LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 136LL);
  *(void *)(*(void *)v1 + 272LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003FE4E0, v3, 0LL);
}

uint64_t sub_1003FE4E0()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 272))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc(dword_1009BCE14);
    *(void *)(v0 + 280) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1003FE6A0;
    return sub_1006D59B4(*(void *)(v0 + 128));
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B400 != -1) {
      swift_once(&qword_10099B400, sub_1003F889C);
    }
    uint64_t v4 = sub_10000A720(*(void *)(v0 + 168), (uint64_t)qword_100A2A928);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.error.getter(v5);
    BOOL v7 = os_log_type_enabled(v5, v6);
    uint64_t v8 = *(void *)(v0 + 200);
    if (v7)
    {
      unint64_t v9 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)unint64_t v9 = 0;
      _os_log_impl((void *)&_mh_execute_header, v5, v6, "No ObservationStoreService available!", v9, 2u);
      swift_slowDealloc(v9, -1LL, -1LL);
    }

    uint64_t v10 = *(void (**)(uint64_t, void))(v8 + 8);
    uint64_t v12 = *(void *)(v0 + 248);
    uint64_t v11 = *(void *)(v0 + 256);
    uint64_t v14 = *(void *)(v0 + 232);
    uint64_t v13 = *(void *)(v0 + 240);
    uint64_t v16 = *(void *)(v0 + 216);
    uint64_t v15 = *(void *)(v0 + 224);
    uint64_t v17 = *(void *)(v0 + 208);
    uint64_t v18 = *(void *)(v0 + 184);
    uint64_t v19 = *(void *)(v0 + 160);
    v10(v14, *(void *)(v0 + 192));
    (*(void (**)(uint64_t, uint64_t))(v12 + 8))(v11, v13);
    swift_task_dealloc(v11);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1003FE6A0()
{
  uint64_t v2 = (*v1)[35];
  uint64_t v3 = *v1;
  v3[36] = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_1003FEBA8, v3[17], 0LL);
  }
  uint64_t v5 = (uint64_t **)swift_task_alloc(dword_1009AD16C);
  v3[37] = (uint64_t)v5;
  *uint64_t v5 = v3;
  v5[1] = (uint64_t *)sub_1003FE730;
  return sub_100400CF4(v3[16]);
}

uint64_t sub_1003FE730()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 136LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 296LL));
  return swift_task_switch(sub_1003FE788, v1, 0LL);
}

uint64_t sub_1003FE788(uint64_t a1)
{
  if (qword_10099B400 != -1) {
    swift_once(&qword_10099B400, sub_1003F889C);
  }
  uint64_t v2 = v1[28];
  uint64_t v3 = v1[29];
  uint64_t v5 = v1[26];
  uint64_t v4 = v1[27];
  uint64_t v6 = v1[24];
  uint64_t v7 = v1[25];
  uint64_t v9 = v1[22];
  uint64_t v8 = v1[23];
  uint64_t v10 = v1[21];
  uint64_t v11 = sub_10000A720(v10, (uint64_t)qword_100A2A928);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16))(v8, v11, v10);
  uint64_t v12 = *(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16);
  v12(v4, v3, v6);
  uint64_t v13 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v12)(v5, v2, v6);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.debug.getter(v14);
  BOOL v16 = os_log_type_enabled(v14, v15);
  uint64_t v17 = v1[26];
  uint64_t v18 = v1[27];
  uint64_t v19 = v1[24];
  uint64_t v21 = v1[22];
  uint64_t v20 = v1[23];
  uint64_t v22 = v1[21];
  if (v16)
  {
    uint64_t v35 = v1[25];
    os_log_type_t type = v15;
    uint64_t v23 = v1[20];
    uint64_t v33 = v1[19];
    uint64_t v34 = v1[18];
    uint64_t v39 = v1[21];
    uint64_t v38 = v1[23];
    uint64_t v24 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v36 = swift_slowAlloc(32LL, -1LL);
    uint64_t v40 = v36;
    *(_DWORD *)uint64_t v24 = 136446210;
    static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v36);
    uint64_t v25 = sub_100007864( &qword_1009AE520,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant,  (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
    uint64_t v26 = static Duration.description<A>(_:_:units:)(v18, v17, v23, v19, v25);
    unint64_t v28 = v27;
    (*(void (**)(uint64_t, uint64_t))(v33 + 8))(v23, v34);
    v1[15] = sub_1003F11D4(v26, v28, &v40);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 15, v1 + 16, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease();
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v35 + 8);
    v29(v18, v19);
    v29(v17, v19);
    _os_log_impl((void *)&_mh_execute_header, v14, type, "insert(observedAdvertisement:): %{public}s", v24, 0xCu);
    swift_arrayDestroy(v36, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v36, -1LL, -1LL);
    swift_slowDealloc(v24, -1LL, -1LL);

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v38, v39);
  }

  else
  {
    uint64_t v29 = *(void (**)(uint64_t, uint64_t))(v1[25] + 8LL);
    v29(v1[27], v1[24]);
    v29(v17, v19);

    (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v20, v22);
  }

  v1[38] = v29;
  uint64_t v30 = (void *)swift_task_alloc(dword_1009AD174);
  v1[39] = v30;
  *uint64_t v30 = v1;
  v30[1] = sub_1003FEA78;
  uint64_t v31 = v1[17];
  v30[25] = v31;
  return swift_task_switch(sub_100404C80, v31, 0LL);
}

uint64_t sub_1003FEA78()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 136LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 312LL));
  return swift_task_switch(sub_1003FEAD0, v1, 0LL);
}

uint64_t sub_1003FEAD0()
{
  uint64_t v1 = *(void (**)(uint64_t, uint64_t))(v0 + 304);
  uint64_t v2 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 192);
  swift_release(*(void *)(v0 + 272));
  v1(v2, v3);
  uint64_t v5 = *(void *)(v0 + 248);
  uint64_t v4 = *(void *)(v0 + 256);
  uint64_t v7 = *(void *)(v0 + 232);
  uint64_t v6 = *(void *)(v0 + 240);
  uint64_t v9 = *(void *)(v0 + 216);
  uint64_t v8 = *(void *)(v0 + 224);
  uint64_t v10 = *(void *)(v0 + 208);
  uint64_t v11 = *(void *)(v0 + 184);
  uint64_t v12 = *(void *)(v0 + 160);
  (*(void (**)(uint64_t, void))(v0 + 304))(v7, *(void *)(v0 + 192));
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  swift_task_dealloc(v4);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003FEBA8()
{
  uint64_t v2 = *(void *)(v0 + 248);
  uint64_t v1 = *(void *)(v0 + 256);
  uint64_t v4 = *(void *)(v0 + 232);
  uint64_t v3 = *(void *)(v0 + 240);
  uint64_t v6 = *(void *)(v0 + 216);
  uint64_t v5 = *(void *)(v0 + 224);
  uint64_t v8 = *(void *)(v0 + 200);
  uint64_t v7 = *(void *)(v0 + 208);
  uint64_t v9 = *(void *)(v0 + 192);
  uint64_t v11 = *(void *)(v0 + 184);
  uint64_t v12 = *(void *)(v0 + 160);
  swift_release(*(void *)(v0 + 272));
  (*(void (**)(uint64_t, uint64_t))(v8 + 8))(v4, v9);
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1003FEC70(uint64_t a1)
{
  v2[15] = a1;
  v2[16] = v1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[17] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[18] = v4;
  v2[19] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for BeaconStatus(0LL);
  v2[20] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[21] = v6;
  uint64_t v7 = *(void *)(v6 + 64);
  v2[22] = v7;
  unint64_t v8 = (v7 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v2[23] = swift_task_alloc(v8);
  v2[24] = swift_task_alloc(v8);
  uint64_t v9 = *(void *)(type metadata accessor for WildModeAssociationRecord(0LL) - 8);
  v2[25] = v9;
  v2[26] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = sub_100004AEC((uint64_t *)&unk_1009AE480);
  v2[27] = swift_task_alloc((*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = type metadata accessor for MACAddress(0LL);
  v2[28] = v11;
  uint64_t v12 = *(void *)(v11 - 8);
  v2[29] = v12;
  v2[30] = swift_task_alloc((*(void *)(v12 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003FED7C, v1, 0LL);
}

uint64_t sub_1003FED7C()
{
  uint64_t v1 = *(void *)(v0 + 120);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 248) = v2;
  uint64_t v3 = *(void *)(v1 + 24);
  *(void *)(v0 + 256) = v3;
  if ((v3 & 0x2000000000000000LL) != 0)
  {
    if (qword_10099B400 != -1) {
      swift_once(&qword_10099B400, sub_1003F889C);
    }
    uint64_t v8 = type metadata accessor for Logger(0LL);
    uint64_t v9 = sub_10000A720(v8, (uint64_t)qword_100A2A928);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.info.getter(v10);
    if (os_log_type_enabled(v10, v11))
    {
      uint64_t v12 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v12 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "Not a wild advertisement - ignoring wild mode association record update.",  v12,  2u);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    uint64_t v13 = *(void *)(v0 + 208);
    uint64_t v14 = *(void *)(v0 + 216);
    uint64_t v16 = *(void *)(v0 + 184);
    uint64_t v15 = *(void *)(v0 + 192);
    uint64_t v17 = *(void *)(v0 + 152);
    swift_task_dealloc(*(void *)(v0 + 240));
    swift_task_dealloc(v14);
    swift_task_dealloc(v13);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    sub_10008699C(v2, v3);
    uint64_t v4 = qword_10099B9E0;
    swift_retain();
    if (v4 != -1) {
      swift_once(&qword_10099B9E0, sub_10076012C);
    }
    swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 80))
    {
      uint64_t v6 = *(void *)(v0 + 128);
      sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
      swift_release(v6);
      sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
      uint64_t v18 = (uint64_t (__cdecl *)())((char *)&dword_10099C890 + dword_10099C890);
      uint64_t v7 = (void *)swift_task_alloc(unk_10099C894);
      *(void *)(v0 + 264) = v7;
      *uint64_t v7 = v0;
      v7[1] = sub_1003FEFA8;
      return v18();
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_1003FEFA8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 264LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 128LL);
  *(void *)(*(void *)v1 + 272LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003FF008, v3, 0LL);
}

uint64_t sub_1003FF008()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 272))
  {
    uint64_t v3 = *(void *)(v0 + 248);
    unint64_t v2 = *(void *)(v0 + 256);
    uint64_t v4 = *(void *)(v0 + 224);
    uint64_t v5 = *(void *)(v0 + 232);
    uint64_t v6 = *(void *)(v0 + 216);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v7 = sub_10001736C(v3, v2);
    uint64_t v8 = static MACAddress.length.getter(v7);
    sub_100178C64(v8, v3, v2);
    MACAddress.init(data:type:)(v24, v25, 1LL);
    uint64_t result = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 48))(v6, 1LL, v4);
    if ((_DWORD)result == 1)
    {
      __break(1u);
    }

    else
    {
      (*(void (**)(void, void, void))(*(void *)(v0 + 232) + 32LL))( *(void *)(v0 + 240),  *(void *)(v0 + 216),  *(void *)(v0 + 224));
      uint64_t v10 = (void *)swift_task_alloc(dword_1009B6374);
      *(void *)(v0 + 280) = v10;
      *uint64_t v10 = v0;
      v10[1] = sub_1003FF204;
      return sub_1005EAB90(*(void *)(v0 + 240));
    }
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B400 != -1) {
      swift_once(&qword_10099B400, sub_1003F889C);
    }
    uint64_t v11 = type metadata accessor for Logger(0LL);
    uint64_t v12 = sub_10000A720(v11, (uint64_t)qword_100A2A928);
    uint64_t v13 = (os_log_s *)Logger.logObject.getter(v12);
    os_log_type_t v14 = static os_log_type_t.error.getter(v13);
    BOOL v15 = os_log_type_enabled(v13, v14);
    uint64_t v17 = *(void *)(v0 + 248);
    uint64_t v16 = *(void *)(v0 + 256);
    if (v15)
    {
      uint64_t v18 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v18 = 0;
      _os_log_impl((void *)&_mh_execute_header, v13, v14, "No BeaconStoreActor available!", v18, 2u);
      swift_slowDealloc(v18, -1LL, -1LL);
    }

    sub_1000869A4(v17, v16);

    uint64_t v19 = *(void *)(v0 + 208);
    uint64_t v20 = *(void *)(v0 + 216);
    uint64_t v22 = *(void *)(v0 + 184);
    uint64_t v21 = *(void *)(v0 + 192);
    uint64_t v23 = *(void *)(v0 + 152);
    swift_task_dealloc(*(void *)(v0 + 240));
    swift_task_dealloc(v20);
    swift_task_dealloc(v19);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  return result;
}

uint64_t sub_1003FF204(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 280LL);
  uint64_t v4 = *(void *)(*(void *)v1 + 232LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 240LL);
  uint64_t v5 = *(void *)(*(void *)v1 + 224LL);
  uint64_t v6 = *(void *)(*(void *)v1 + 128LL);
  *(void *)(*(void *)v1 + 288LL) = a1;
  swift_task_dealloc(v2);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  return swift_task_switch(sub_1003FF284, v6, 0LL);
}

uint64_t sub_1003FF284()
{
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 296) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 200);
    uint64_t v4 = *(int **)(v0 + 160);
    uint64_t v5 = *(void *)(v0 + 144);
    uint64_t v6 = *(_BYTE **)(v0 + 120);
    uint64_t v7 = *(int *)(type metadata accessor for ObservedAdvertisement(0LL) + 44);
    *(_DWORD *)(v0 + 352) = v7;
    int v8 = *(_DWORD *)(v3 + 80);
    *(_DWORD *)(v0 + 356) = v8;
    *(void *)(v0 + 304) = *(void *)(v3 + 72);
    *(void *)(v0 + 312) = 0LL;
    uint64_t v9 = *(void *)(v0 + 208);
    uint64_t v10 = *(void *)(v0 + 192);
    uint64_t v11 = *(void *)(v0 + 152);
    uint64_t v12 = *(void *)(v0 + 136);
    uint64_t v13 = v1 + ((v8 + 32LL) & ~(unint64_t)v8);
    os_log_type_t v14 = &v6[v7];
    sub_10001DC4C(v13, v9, type metadata accessor for WildModeAssociationRecord);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v11, v9, v12);
    sub_100018C68(v9, type metadata accessor for WildModeAssociationRecord);
    char v15 = v6[32];
    uint64_t v16 = v10 + v4[6];
    uint64_t v17 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(void *)(v17 - 8) + 16LL))(v16, v14, v17);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 32))(v10, v11, v12);
    *(_BYTE *)(v10 + v4[5]) = v15;
    *(_OWORD *)(v10 + v4[7]) = xmmword_1008003C0;
    *(_BYTE *)(v10 + v4[8]) = 1;
    *(void *)(v10 + v4[9]) = 0LL;
    *(_BYTE *)(v0 + 360) = v6[9];
    *(_BYTE *)(v0 + 361) = v6[34];
    *(_BYTE *)(v0 + 362) = v6[35];
    return swift_task_switch(sub_1003FF470, *(void *)(v0 + 272), 0LL);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v19 = *(void *)(v0 + 272);
    sub_1000869A4(*(void *)(v0 + 248), *(void *)(v0 + 256));
    swift_release(v19);
    uint64_t v20 = *(void *)(v0 + 208);
    uint64_t v21 = *(void *)(v0 + 216);
    uint64_t v23 = *(void *)(v0 + 184);
    uint64_t v22 = *(void *)(v0 + 192);
    uint64_t v24 = *(void *)(v0 + 152);
    swift_task_dealloc(*(void *)(v0 + 240));
    swift_task_dealloc(v21);
    swift_task_dealloc(v20);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1003FF470()
{
  char v1 = *(_BYTE *)(v0 + 362);
  __int16 v2 = *(_WORD *)(v0 + 360);
  uint64_t v3 = *(void *)(v0 + 272);
  uint64_t v5 = *(void *)(v0 + 184);
  uint64_t v4 = *(void *)(v0 + 192);
  uint64_t v7 = *(void *)(v0 + 168);
  uint64_t v6 = *(void *)(v0 + 176);
  *(void *)(v0 + 320) = *(void *)(v3 + 136);
  sub_10001DC4C(v4, v5, type metadata accessor for BeaconStatus);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = v9 + v6;
  uint64_t v11 = swift_allocObject(&unk_100958160, v9 + v6 + 3, v8 | 7);
  *(void *)(v0 + 328) = v11;
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v3;
  sub_10002218C(v5, v11 + v9, type metadata accessor for BeaconStatus);
  uint64_t v12 = v11 + v10;
  *(_WORD *)uint64_t v12 = v2;
  *(_BYTE *)(v12 + 2) = v1;
  swift_retain();
  return swift_task_switch(sub_1003FF540, 0LL, 0LL);
}

uint64_t sub_1003FF540()
{
  uint64_t v2 = v0[40];
  uint64_t v1 = v0[41];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[42] = v3;
  v3[2] = v2;
  v3[3] = sub_100409388;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[43] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1003FF5EC;
  return withCheckedContinuation<A>(isolation:function:_:)( v4,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_10011895C,  v3,  (char *)&type metadata for () + 8);
}

uint64_t sub_1003FF5EC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 336);
  uint64_t v3 = *(void *)(*v0 + 328);
  swift_task_dealloc(*(void *)(*v0 + 344));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003FF658, *(void *)(v1 + 272), 0LL);
}

uint64_t sub_1003FF658()
{
  uint64_t v1 = *(void *)(v0 + 128);
  sub_100018C68(*(void *)(v0 + 192), type metadata accessor for BeaconStatus);
  return swift_task_switch(sub_1003FF6A0, v1, 0LL);
}

uint64_t sub_1003FF6A0()
{
  uint64_t v1 = *(void *)(v0 + 312) + 1LL;
  if (v1 == *(void *)(v0 + 296))
  {
    swift_bridgeObjectRelease();
    uint64_t v2 = *(void *)(v0 + 272);
    sub_1000869A4(*(void *)(v0 + 248), *(void *)(v0 + 256));
    swift_release(v2);
    uint64_t v3 = *(void *)(v0 + 208);
    uint64_t v4 = *(void *)(v0 + 216);
    uint64_t v6 = *(void *)(v0 + 184);
    uint64_t v5 = *(void *)(v0 + 192);
    uint64_t v7 = *(void *)(v0 + 152);
    swift_task_dealloc(*(void *)(v0 + 240));
    swift_task_dealloc(v4);
    swift_task_dealloc(v3);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    *(void *)(v0 + 312) = v1;
    uint64_t v9 = *(void *)(v0 + 208);
    uint64_t v10 = *(void *)(v0 + 192);
    uint64_t v11 = *(void *)(v0 + 152);
    uint64_t v12 = *(int **)(v0 + 160);
    uint64_t v13 = *(void *)(v0 + 136);
    uint64_t v14 = *(void *)(v0 + 144);
    char v15 = *(_BYTE **)(v0 + 120);
    uint64_t v16 = &v15[*(int *)(v0 + 352)];
    sub_10001DC4C( *(void *)(v0 + 288)
    + ((*(unsigned __int8 *)(v0 + 356) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 356))
    + *(void *)(v0 + 304) * v1,
      v9,
      type metadata accessor for WildModeAssociationRecord);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 16))(v11, v9, v13);
    sub_100018C68(v9, type metadata accessor for WildModeAssociationRecord);
    char v17 = v15[32];
    uint64_t v18 = v10 + v12[6];
    uint64_t v19 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, _BYTE *, uint64_t))(*(void *)(v19 - 8) + 16LL))(v18, v16, v19);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v14 + 32))(v10, v11, v13);
    *(_BYTE *)(v10 + v12[5]) = v17;
    *(_OWORD *)(v10 + v12[7]) = xmmword_1008003C0;
    *(_BYTE *)(v10 + v12[8]) = 1;
    *(void *)(v10 + v12[9]) = 0LL;
    *(_BYTE *)(v0 + 360) = v15[9];
    *(_BYTE *)(v0 + 361) = v15[34];
    *(_BYTE *)(v0 + 362) = v15[35];
    return swift_task_switch(sub_1003FF470, *(void *)(v0 + 272), 0LL);
  }

uint64_t sub_1003FF878(uint64_t a1)
{
  v2[15] = a1;
  v2[16] = v1;
  uint64_t v3 = type metadata accessor for BeaconStatus(0LL);
  v2[17] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[18] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v2[19] = v5;
  unint64_t v6 = (v5 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v2[20] = swift_task_alloc(v6);
  v2[21] = swift_task_alloc(v6);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  v2[22] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[23] = v8;
  v2[24] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009AA730);
  v2[25] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
  v2[26] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[27] = v11;
  v2[28] = swift_task_alloc((*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1003FF960, v1, 0LL);
}

uint64_t sub_1003FF960()
{
  uint64_t v1 = *(void *)(v0 + 208);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 200);
  uint64_t v4 = *(void *)(v0 + 120);
  uint64_t v5 = type metadata accessor for ObservedAdvertisement(0LL);
  *(void *)(v0 + 232) = v5;
  sub_10001581C(v4 + *(int *)(v5 + 52), v3, &qword_1009AA730);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) == 1)
  {
    sub_100015794(*(void *)(v0 + 200), &qword_1009AA730);
    if (qword_10099B400 != -1) {
      swift_once(&qword_10099B400, sub_1003F889C);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    uint64_t v7 = sub_10000A720(v6, (uint64_t)qword_100A2A928);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.info.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "Ignoring status update for advertisement without beaconInformation.",  v10,  2u);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    uint64_t v11 = *(void *)(v0 + 192);
    uint64_t v12 = *(void *)(v0 + 200);
    uint64_t v14 = *(void *)(v0 + 160);
    uint64_t v13 = *(void *)(v0 + 168);
    swift_task_dealloc(*(void *)(v0 + 224));
    swift_task_dealloc(v12);
    swift_task_dealloc(v11);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    sub_10002218C( *(void *)(v0 + 200),  *(void *)(v0 + 224),  type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    uint64_t v16 = qword_10099B9E0;
    swift_retain();
    if (v16 != -1) {
      swift_once(&qword_10099B9E0, sub_10076012C);
    }
    swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 80))
    {
      uint64_t v17 = *(void *)(v0 + 128);
      sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
      swift_release(v17);
      sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
      uint64_t v19 = (uint64_t (*)(void))((char *)&dword_10099C890 + dword_10099C890);
      uint64_t v18 = (void *)swift_task_alloc(unk_10099C894);
      *(void *)(v0 + 240) = v18;
      void *v18 = v0;
      v18[1] = sub_1003FFBD0;
      return v19();
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_1003FFBD0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 240LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 128LL);
  *(void *)(*(void *)v1 + 248LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1003FFC30, v3, 0LL);
}

uint64_t sub_1003FFC30()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 248))
  {
    uint64_t v2 = *(void *)(v0 + 224);
    uint64_t v28 = *(void *)(v0 + 232);
    uint64_t v3 = *(void *)(v0 + 208);
    uint64_t v5 = *(void *)(v0 + 184);
    uint64_t v4 = *(void *)(v0 + 192);
    uint64_t v7 = *(void *)(v0 + 168);
    uint64_t v6 = *(void *)(v0 + 176);
    uint64_t v8 = *(int **)(v0 + 136);
    uint64_t v9 = *(void *)(v0 + 120);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v10 = *(void (**)(uint64_t, uint64_t, uint64_t))(v5 + 16);
    v10(v4, v2, v6);
    uint64_t v29 = *(void *)(v2 + *(int *)(v3 + 24));
    uint64_t v11 = *(unsigned __int8 *)(v2 + *(int *)(v3 + 20));
    BOOL v12 = (*(void *)(v9 + 24) & 0x2000000000000000LL) == 0;
    v10(v7, v4, v6);
    LOBYTE(v6) = *(_BYTE *)(v9 + 32);
    uint64_t v13 = v9 + *(int *)(v28 + 44);
    uint64_t v14 = v7 + v8[6];
    uint64_t v15 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v15 - 8) + 16LL))(v14, v13, v15);
    *(_BYTE *)(v7 + v8[5]) = v6;
    uint64_t v16 = (void *)(v7 + v8[7]);
    *uint64_t v16 = v11;
    v16[1] = v29;
    *(_BYTE *)(v7 + v8[8]) = v12;
    *(void *)(v7 + v8[9]) = 0LL;
    *(_BYTE *)(v0 + 288) = *(_BYTE *)(v9 + 9);
    *(_BYTE *)(v0 + 289) = *(_BYTE *)(v9 + 34);
    *(_BYTE *)(v0 + 290) = *(_BYTE *)(v9 + 35);
    return swift_task_switch(sub_1003FFE80, *(void *)(v0 + 248), 0LL);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B400 != -1) {
      swift_once(&qword_10099B400, sub_1003F889C);
    }
    uint64_t v18 = type metadata accessor for Logger(0LL);
    uint64_t v19 = sub_10000A720(v18, (uint64_t)qword_100A2A928);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.error.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      uint64_t v22 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v22 = 0;
      _os_log_impl((void *)&_mh_execute_header, v20, v21, "No BeaconStoreActor available!", v22, 2u);
      swift_slowDealloc(v22, -1LL, -1LL);
    }

    uint64_t v23 = *(void *)(v0 + 224);

    sub_100018C68(v23, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    uint64_t v24 = *(void *)(v0 + 192);
    uint64_t v25 = *(void *)(v0 + 200);
    uint64_t v27 = *(void *)(v0 + 160);
    uint64_t v26 = *(void *)(v0 + 168);
    swift_task_dealloc(*(void *)(v0 + 224));
    swift_task_dealloc(v25);
    swift_task_dealloc(v24);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1003FFE80()
{
  char v1 = *(_BYTE *)(v0 + 290);
  __int16 v2 = *(_WORD *)(v0 + 288);
  uint64_t v3 = *(void *)(v0 + 248);
  uint64_t v5 = *(void *)(v0 + 160);
  uint64_t v4 = *(void *)(v0 + 168);
  uint64_t v7 = *(void *)(v0 + 144);
  uint64_t v6 = *(void *)(v0 + 152);
  *(void *)(v0 + 256) = *(void *)(v3 + 136);
  sub_10001DC4C(v4, v5, type metadata accessor for BeaconStatus);
  uint64_t v8 = *(unsigned __int8 *)(v7 + 80);
  uint64_t v9 = (v8 + 24) & ~v8;
  uint64_t v10 = v9 + v6;
  uint64_t v11 = swift_allocObject(&unk_100958138, v9 + v6 + 3, v8 | 7);
  *(void *)(v0 + 264) = v11;
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v3;
  sub_10002218C(v5, v11 + v9, type metadata accessor for BeaconStatus);
  uint64_t v12 = v11 + v10;
  *(_WORD *)uint64_t v12 = v2;
  *(_BYTE *)(v12 + 2) = v1;
  swift_retain();
  return swift_task_switch(sub_1003FFF50, 0LL, 0LL);
}

uint64_t sub_1003FFF50()
{
  uint64_t v2 = v0[32];
  uint64_t v1 = v0[33];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[34] = v3;
  v3[2] = v2;
  v3[3] = sub_100409388;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[35] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_1003FFFFC;
  return withCheckedContinuation<A>(isolation:function:_:)( v4,  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_10011865C,  v3,  (char *)&type metadata for () + 8);
}

uint64_t sub_1003FFFFC()
{
  uint64_t v1 = *v0;
  uint64_t v2 = *(void *)(*v0 + 272);
  uint64_t v3 = *(void *)(*v0 + 264);
  swift_task_dealloc(*(void *)(*v0 + 280));
  swift_release(v3);
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100400068, *(void *)(v1 + 248), 0LL);
}

uint64_t sub_100400068()
{
  uint64_t v1 = *(void *)(v0 + 128);
  sub_100018C68(*(void *)(v0 + 168), type metadata accessor for BeaconStatus);
  return swift_task_switch(sub_1004000B0, v1, 0LL);
}

uint64_t sub_1004000B0()
{
  uint64_t v1 = *(void *)(v0 + 224);
  uint64_t v3 = *(void *)(v0 + 184);
  uint64_t v2 = *(void *)(v0 + 192);
  uint64_t v4 = *(void *)(v0 + 176);
  swift_release(*(void *)(v0 + 248));
  (*(void (**)(uint64_t, uint64_t))(v3 + 8))(v2, v4);
  sub_100018C68(v1, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  uint64_t v5 = *(void *)(v0 + 192);
  uint64_t v6 = *(void *)(v0 + 200);
  uint64_t v8 = *(void *)(v0 + 160);
  uint64_t v7 = *(void *)(v0 + 168);
  swift_task_dealloc(*(void *)(v0 + 224));
  swift_task_dealloc(v6);
  swift_task_dealloc(v5);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100400144(uint64_t a1)
{
  v2[28] = a1;
  v2[29] = v1;
  uint64_t v3 = type metadata accessor for KeyGenerationBeaconInfo(0LL);
  v2[30] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[31] = v4;
  v2[32] = swift_task_alloc((*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for UUID(0LL);
  v2[33] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v2[34] = v6;
  unint64_t v7 = (*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[35] = swift_task_alloc(v7);
  v2[36] = swift_task_alloc(v7);
  return swift_task_switch(sub_1004001DC, v1, 0LL);
}

uint64_t sub_1004001DC()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 136, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C8A8 + dword_10099C8A8);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C8AC);
    *(void *)(v0 + 296) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_1004002C8;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1004002C8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 296LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 232LL);
  *(void *)(*(void *)v1 + 304LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100400328, v3, 0LL);
}

uint64_t sub_100400328()
{
  uint64_t v1 = *(void *)(v0 + 304);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v1) {
    return swift_task_switch(sub_100400548, *(void *)(v0 + 304), 0LL);
  }
  if (qword_10099B400 != -1) {
    swift_once(&qword_10099B400, sub_1003F889C);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2A928);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    unint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = swift_slowAlloc(32LL, -1LL);
    uint64_t v14 = v8;
    *(_DWORD *)unint64_t v7 = 136315138;
    *(void *)(v0 + 160) = sub_1003F11D4(0xD000000000000025LL, 0x8000000100861610LL, &v14);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 160, v0 + 168, v7 + 4, v7 + 12);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "%s Missing BeaconKeyService.", v7, 0xCu);
    swift_arrayDestroy(v8, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  unint64_t v9 = sub_1000157D0();
  uint64_t v10 = swift_allocError(&type metadata for DaemonError, v9, 0LL, 0LL);
  *uint64_t v11 = 0xD000000000000010LL;
  v11[1] = 0x8000000100861580LL;
  swift_willThrow(v10);
  uint64_t v12 = *(void *)(v0 + 280);
  uint64_t v13 = *(void *)(v0 + 256);
  swift_task_dealloc(*(void *)(v0 + 288));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

void sub_100400548()
{
  uint64_t v1 = *(void **)(v0[38] + 128);
  if (v1)
  {
    v0[39] = sub_100476670(v0[28], v1);
    v0[40] = 0LL;
    swift_task_switch(sub_1004005B4, v0[29], 0LL);
  }

  else
  {
    __break(1u);
  }

uint64_t sub_1004005B4()
{
  uint64_t v1 = v0[39];
  *(void *)os_log_type_t v64 = *(void *)(v1 + 16);
  uint64_t v65 = v0 + 25;
  if (*(void *)v64)
  {
    uint64_t v2 = v0[39];
    if (qword_10099B400 != -1)
    {
LABEL_21:
      swift_once(&qword_10099B400, sub_1003F889C);
      uint64_t v2 = v0[39];
    }

    uint64_t v62 = v0 + 12;
    uint64_t v3 = v0[36];
    uint64_t v5 = v0[33];
    uint64_t v4 = v0[34];
    os_log_type_t v6 = v0;
    uint64_t v7 = v0[28];
    uint64_t v8 = type metadata accessor for Logger(0LL);
    sub_10000A720(v8, (uint64_t)qword_100A2A928);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v3, v7, v5);
    swift_bridgeObjectRetain(v2);
    uint64_t v10 = (os_log_s *)Logger.logObject.getter(v9);
    os_log_type_t v11 = static os_log_type_t.debug.getter(v10);
    BOOL v12 = os_log_type_enabled(v10, v11);
    uint64_t v13 = v0[36];
    uint64_t v15 = v0 + 33;
    uint64_t v0 = (void *)v0[33];
    uint64_t v14 = v15[1];
    if (v12)
    {
      uint64_t v16 = swift_slowAlloc(42LL, -1LL);
      uint64_t v60 = swift_slowAlloc(64LL, -1LL);
      v66[0] = v60;
      *(_DWORD *)uint64_t v16 = 136315907;
      uint64_t v59 = v0;
      v6[21] = sub_1003F11D4(0xD000000000000025LL, 0x8000000100861610LL, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 + 21, v6 + 22, v16 + 4, v16 + 12);
      *(_WORD *)(v16 + 12) = 2048;
      v6[22] = *(void *)(v1 + 16);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 + 22, v6 + 23, v16 + 14, v16 + 22);
      swift_bridgeObjectRelease();
      *(_WORD *)(v16 + 22) = 2160;
      v6[23] = 1752392040LL;
      uint64_t v0 = v6 + 24;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 + 23, v6 + 24, v16 + 24, v16 + 32);
      *(_WORD *)(v16 + 32) = 2081;
      uint64_t v17 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v18 = dispatch thunk of CustomStringConvertible.description.getter(v59, v17);
      _BYTE v6[24] = sub_1003F11D4(v18, v19, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v6 + 24, v65, v16 + 34, v16 + 42);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, void *))(v14 + 8))(v13, v59);
      _os_log_impl( (void *)&_mh_execute_header,  v10,  v11,  "%s Found [%ld] beacon infos  for %{private,mask.hash}s",  (uint8_t *)v16,  0x2Au);
      swift_arrayDestroy(v60, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v60, -1LL, -1LL);
      swift_slowDealloc(v16, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, void *))(v14 + 8))(v13, v0);
    }

    uint64_t v35 = v6[39];
    uint64_t v36 = v6[31];
    uint64_t v65 = (uint64_t *)v6[30];
    uint64_t v37 = v35 + ((*(unsigned __int8 *)(v36 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v36 + 80));
    uint64_t v38 = enum case for Feature.FindMy.spPlaySoundAll(_:);
    swift_bridgeObjectRetain(v35);
    uint64_t v39 = 0LL;
    uint64_t v40 = v6;
    while (1)
    {
      uint64_t v41 = v39 + 1;
      if (__OFADD__(v39, 1LL))
      {
        __break(1u);
        goto LABEL_21;
      }

      uint64_t v42 = v40[32];
      sub_10001DC4C(v37 + *(void *)(v36 + 72) * v39, v42, type metadata accessor for KeyGenerationBeaconInfo);
      uint64_t v43 = v40[32];
      uint64_t My = type metadata accessor for Feature.FindMy(0LL);
      v40[15] = My;
      uint64_t v0 = v40;
      v40[16] = sub_100007864( (unint64_t *)&qword_1009B04D0,  (uint64_t (*)(uint64_t))&type metadata accessor for Feature.FindMy,  (uint64_t)&protocol conformance descriptor for Feature.FindMy);
      uint64_t v45 = sub_10000A7C8(v62);
      (*(void (**)(void *, uint64_t, uint64_t))(*(void *)(My - 8) + 104LL))(v45, v38, My);
      uint64_t v1 = isFeatureEnabled(_:)(v62);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v62);
      sub_100018C68(v43, type metadata accessor for KeyGenerationBeaconInfo);
      if ((v1 & 1) == 0)
      {
        ++v39;
        if (v41 != *(void *)v64) {
          continue;
        }
      }

      goto LABEL_19;
    }

    sub_100018C68(v40[32], type metadata accessor for KeyGenerationBeaconInfo);
    LOBYTE(sub_1003F1994(v0, v1) = 1;
LABEL_19:
    uint64_t v54 = v40[38];
    uint64_t v53 = v40[39];
    uint64_t v56 = v40[35];
    uint64_t v55 = v40[36];
    uint64_t v57 = v40;
    uint64_t v58 = v40[32];
    swift_bridgeObjectRelease_n(v53, 2LL);
    swift_release(v54);
    swift_task_dealloc(v55);
    swift_task_dealloc(v56);
    swift_task_dealloc(v58);
    return ((uint64_t (*)(uint64_t))v57[1])(v1 & 1);
  }

  else
  {
    swift_bridgeObjectRelease();
    if (qword_10099B400 != -1) {
      swift_once(&qword_10099B400, sub_1003F889C);
    }
    uint64_t v20 = v0[28];
    uint64_t v22 = v0[34];
    uint64_t v21 = v0[35];
    uint64_t v23 = v0[33];
    uint64_t v24 = type metadata accessor for Logger(0LL);
    sub_10000A720(v24, (uint64_t)qword_100A2A928);
    uint64_t v25 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v22 + 16))(v21, v20, v23);
    uint64_t v26 = (os_log_s *)Logger.logObject.getter(v25);
    os_log_type_t v27 = static os_log_type_t.error.getter(v26);
    BOOL v28 = os_log_type_enabled(v26, v27);
    uint64_t v29 = v0[35];
    uint64_t v30 = v0[33];
    if (v28)
    {
      *(void *)os_log_type_t type = v0[34];
      uint64_t v31 = swift_slowAlloc(32LL, -1LL);
      uint64_t v63 = swift_slowAlloc(64LL, -1LL);
      v66[0] = v63;
      *(_DWORD *)uint64_t v31 = 136315651;
      *uint64_t v65 = sub_1003F11D4(0xD000000000000025LL, 0x8000000100861610LL, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v65, v0 + 26, v31 + 4, v31 + 12);
      *(_WORD *)(v31 + 12) = 2160;
      v0[26] = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 26, v0 + 27, v31 + 14, v31 + 22);
      *(_WORD *)(v31 + 22) = 2081;
      uint64_t v32 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v33 = dispatch thunk of CustomStringConvertible.description.getter(v30, v32);
      v0[27] = sub_1003F11D4(v33, v34, v66);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 27, v0 + 28, v31 + 24, v31 + 32);
      swift_bridgeObjectRelease();
      (*(void (**)(uint64_t, uint64_t))(*(void *)type + 8LL))(v29, v30);
      _os_log_impl( (void *)&_mh_execute_header,  v26,  v27,  "%s Missing beacon info for %{private,mask.hash}s!",  (uint8_t *)v31,  0x20u);
      swift_arrayDestroy(v63, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v63, -1LL, -1LL);
      swift_slowDealloc(v31, -1LL, -1LL);
    }

    else
    {
      (*(void (**)(void, void))(v0[34] + 8LL))(v0[35], v0[33]);
    }

    uint64_t v46 = v0[38];
    unint64_t v47 = sub_10009BC9C();
    uint64_t v48 = swift_allocError(&type metadata for AdvertisementCacheServiceError, v47, 0LL, 0LL);
    *uint64_t v49 = 4;
    swift_willThrow(v48);
    swift_release(v46);
    uint64_t v50 = v0[35];
    uint64_t v51 = v0[32];
    swift_task_dealloc(v0[36]);
    swift_task_dealloc(v50);
    swift_task_dealloc(v51);
    return ((uint64_t (*)(void))v0[1])(0LL);
  }

uint64_t sub_100400C98()
{
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 256);
  swift_task_dealloc(*(void *)(v0 + 288));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_100400CF4(uint64_t a1)
{
  v2[44] = a1;
  v2[45] = v1;
  uint64_t v3 = type metadata accessor for ObservedAdvertisement(0LL);
  v2[46] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[47] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[48] = swift_task_alloc(v5);
  v2[49] = swift_task_alloc(v5);
  v2[50] = swift_task_alloc(v5);
  v2[51] = swift_task_alloc(v5);
  v2[52] = swift_task_alloc(v5);
  uint64_t v6 = type metadata accessor for Duration.UnitsFormatStyle.Unit(0LL);
  v2[53] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[54] = v7;
  v2[55] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for Logger(0LL);
  v2[56] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v2[57] = v9;
  v2[58] = swift_task_alloc((*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for ContinuousClock.Instant(0LL);
  v2[59] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[60] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[61] = swift_task_alloc(v12);
  v2[62] = swift_task_alloc(v12);
  v2[63] = swift_task_alloc(v12);
  v2[64] = swift_task_alloc(v12);
  unint64_t v13 = (*(void *)(*(void *)(sub_100004AEC(&qword_10099FB70) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[65] = swift_task_alloc(v13);
  v2[66] = swift_task_alloc(v13);
  v2[67] = swift_task_alloc(v13);
  v2[68] = swift_task_alloc(v13);
  v2[69] = swift_task_alloc(v13);
  uint64_t v14 = type metadata accessor for BeaconIdentifier(0LL);
  v2[70] = v14;
  unint64_t v15 = (*(void *)(*(void *)(v14 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[71] = swift_task_alloc(v15);
  v2[72] = swift_task_alloc(v15);
  uint64_t v16 = type metadata accessor for ContinuousClock(0LL);
  v2[73] = v16;
  uint64_t v17 = *(void *)(v16 - 8);
  v2[74] = v17;
  v2[75] = swift_task_alloc((*(void *)(v17 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v18 = sub_100004AEC(&qword_1009AA730);
  v2[76] = swift_task_alloc((*(void *)(*(void *)(v18 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v19 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
  v2[77] = v19;
  uint64_t v20 = *(void *)(v19 - 8);
  v2[78] = v20;
  uint64_t v21 = *(void *)(v20 + 64);
  v2[79] = v21;
  unint64_t v22 = (v21 + 15) & 0xFFFFFFFFFFFFFFF0LL;
  v2[80] = swift_task_alloc(v22);
  v2[81] = swift_task_alloc(v22);
  v2[82] = swift_task_alloc(v22);
  v2[83] = swift_task_alloc(v22);
  return swift_task_switch(sub_100400F54, v1, 0LL);
}

uint64_t sub_100400F54()
{
  uint64_t v1 = *(void *)(v0 + 624);
  uint64_t v2 = *(void *)(v0 + 616);
  uint64_t v3 = *(void *)(v0 + 608);
  sub_10001581C(*(void *)(v0 + 352) + *(int *)(*(void *)(v0 + 368) + 52LL), v3, &qword_1009AA730);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v1 + 48))(v3, 1LL, v2) == 1)
  {
    sub_100015794(*(void *)(v0 + 608), &qword_1009AA730);
    uint64_t v4 = *(void *)(v0 + 656);
    uint64_t v5 = *(void *)(v0 + 648);
    uint64_t v6 = *(void *)(v0 + 640);
    uint64_t v7 = *(void *)(v0 + 608);
    uint64_t v8 = *(void *)(v0 + 600);
    uint64_t v9 = *(void *)(v0 + 576);
    uint64_t v10 = *(void *)(v0 + 568);
    uint64_t v11 = *(void *)(v0 + 552);
    uint64_t v12 = *(void *)(v0 + 544);
    uint64_t v17 = *(void *)(v0 + 536);
    uint64_t v18 = *(void *)(v0 + 528);
    uint64_t v19 = *(void *)(v0 + 520);
    uint64_t v20 = *(void *)(v0 + 512);
    uint64_t v21 = *(void *)(v0 + 504);
    uint64_t v22 = *(void *)(v0 + 496);
    uint64_t v23 = *(void *)(v0 + 488);
    uint64_t v24 = *(void *)(v0 + 464);
    uint64_t v25 = *(void *)(v0 + 440);
    uint64_t v26 = *(void *)(v0 + 416);
    uint64_t v27 = *(void *)(v0 + 408);
    uint64_t v28 = *(void *)(v0 + 400);
    uint64_t v29 = *(void *)(v0 + 392);
    uint64_t v30 = *(void *)(v0 + 384);
    swift_task_dealloc(*(void *)(v0 + 664));
    swift_task_dealloc(v4);
    swift_task_dealloc(v5);
    swift_task_dealloc(v6);
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    swift_task_dealloc(v9);
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    sub_10002218C( *(void *)(v0 + 608),  *(void *)(v0 + 664),  type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    uint64_t v14 = qword_10099B9E0;
    swift_retain();
    if (v14 != -1) {
      swift_once(&qword_10099B9E0, sub_10076012C);
    }
    swift_beginAccess(&xmmword_1009BED80, v0 + 248, 0LL, 0LL);
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 96, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 120))
    {
      uint64_t v15 = *(void *)(v0 + 360);
      sub_100012EC0((__int128 *)(v0 + 96), v0 + 16);
      swift_release(v15);
      sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
      uint64_t v31 = (uint64_t (*)(void))((char *)&dword_10099C878 + dword_10099C878);
      uint64_t v16 = (void *)swift_task_alloc(unk_10099C87C);
      *(void *)(v0 + 672) = v16;
      *uint64_t v16 = v0;
      v16[1] = sub_100401238;
      return v31();
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_100401238(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 672LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 360LL);
  *(void *)(*(void *)v1 + 68Hasher.init(_seed:)(v3, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100401298, v3, 0LL);
}

uint64_t sub_100401298()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 680))
  {
    uint64_t v2 = _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    ContinuousClock.init()(v2);
    uint64_t v3 = (void *)swift_task_alloc(dword_1009AD17C);
    *(void *)(v0 + 688) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_100401540;
    return sub_100400144(*(void *)(v0 + 664));
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B400 != -1) {
      swift_once(&qword_10099B400, sub_1003F889C);
    }
    uint64_t v5 = sub_10000A720(*(void *)(v0 + 448), (uint64_t)qword_100A2A928);
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.error.getter(v6);
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = *(void *)(v0 + 664);
    if (v8)
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "No ObservationStoreService available!", v10, 2u);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    sub_100018C68(v9, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    uint64_t v11 = *(void *)(v0 + 656);
    uint64_t v12 = *(void *)(v0 + 648);
    uint64_t v13 = *(void *)(v0 + 640);
    uint64_t v14 = *(void *)(v0 + 608);
    uint64_t v15 = *(void *)(v0 + 600);
    uint64_t v16 = *(void *)(v0 + 576);
    uint64_t v17 = *(void *)(v0 + 568);
    uint64_t v18 = *(void *)(v0 + 552);
    uint64_t v19 = *(void *)(v0 + 544);
    uint64_t v20 = *(void *)(v0 + 536);
    uint64_t v21 = *(void *)(v0 + 528);
    uint64_t v22 = *(void *)(v0 + 520);
    uint64_t v23 = *(void *)(v0 + 512);
    uint64_t v24 = *(void *)(v0 + 504);
    uint64_t v25 = *(void *)(v0 + 496);
    uint64_t v26 = *(void *)(v0 + 488);
    uint64_t v27 = *(void *)(v0 + 464);
    uint64_t v28 = *(void *)(v0 + 440);
    uint64_t v29 = *(void *)(v0 + 416);
    uint64_t v30 = *(void *)(v0 + 408);
    uint64_t v31 = *(void *)(v0 + 400);
    uint64_t v32 = *(void *)(v0 + 392);
    uint64_t v33 = *(void *)(v0 + 384);
    swift_task_dealloc(*(void *)(v0 + 664));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    swift_task_dealloc(v17);
    swift_task_dealloc(v18);
    swift_task_dealloc(v19);
    swift_task_dealloc(v20);
    swift_task_dealloc(v21);
    swift_task_dealloc(v22);
    swift_task_dealloc(v23);
    swift_task_dealloc(v24);
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    swift_task_dealloc(v31);
    swift_task_dealloc(v32);
    swift_task_dealloc(v33);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100401540(char a1)
{
  uint64_t v4 = *v2;
  swift_task_dealloc(*(void *)(*v2 + 688));
  uint64_t v5 = *(void *)(v4 + 360);
  if (v1)
  {
    swift_errorRelease(v1);
    uint64_t v6 = sub_100403604;
  }

  else
  {
    *(_BYTE *)(v4 + 801) = a1 & 1;
    uint64_t v6 = sub_1004015C0;
  }

  return swift_task_switch(v6, v5, 0LL);
}

uint64_t sub_1004015C0()
{
  *(_BYTE *)(v0 + 802) = *(_BYTE *)(v0 + 801);
  uint64_t v1 = *(void *)(v0 + 664);
  uint64_t v2 = *(void *)(v0 + 576);
  uint64_t v3 = *(void *)(v0 + 560);
  uint64_t v4 = *(void *)(v0 + 360);
  uid_t v5 = getuid();
  sub_1005E2270(v5);
  uint64_t v6 = v2 + *(int *)(v3 + 20);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  *(void *)(v0 + 696) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v6, v1, v7);
  uint64_t v8 = OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_lastAdvertisementCache;
  *(void *)(v0 + 704) = OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_lastAdvertisementCache;
  uint64_t v9 = (uint64_t *)(v4 + v8);
  swift_beginAccess(v4 + v8, v0 + 224, 0LL, 0LL);
  uint64_t v10 = *v9;
  if (*(void *)(*v9 + 16))
  {
    uint64_t v11 = *(void *)(v0 + 576);
    swift_bridgeObjectRetain(v10);
    unint64_t v12 = sub_10030D1C4(v11);
    uint64_t v13 = *(void *)(v0 + 552);
    uint64_t v14 = *(void *)(v0 + 368);
    uint64_t v15 = *(void *)(v0 + 376);
    if ((v16 & 1) != 0)
    {
      sub_10001DC4C( *(void *)(v10 + 56) + *(void *)(v15 + 72) * v12,  *(void *)(v0 + 552),  type metadata accessor for ObservedAdvertisement);
      uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
      v17(v13, 0LL, 1LL, v14);
    }

    else
    {
      uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
      v17(*(void *)(v0 + 552), 1LL, 1LL, v14);
    }

    swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 376) + 56LL);
    v17(*(void *)(v0 + 552), 1LL, 1LL, *(void *)(v0 + 368));
  }

  *(void *)(v0 + 712) = v17;
  uint64_t v18 = *(void *)(v0 + 544);
  uint64_t v19 = *(void *)(v0 + 368);
  uint64_t v20 = *(void *)(v0 + 376);
  sub_10001581C(*(void *)(v0 + 552), v18, &qword_10099FB70);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  *(void *)(v0 + 720) = v21;
  LODWORD(v19) = v21(v18, 1LL, v19);
  uint64_t v22 = sub_100015794(v18, &qword_10099FB70);
  if ((_DWORD)v19 == 1)
  {
    ContinuousClock.now.getter(v22);
    uint64_t v23 = (void *)swift_task_alloc(dword_1009BCD4C);
    *(void *)(v0 + 728) = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_100402258;
    return sub_1006D544C(*(void *)(v0 + 536), *(void *)(v0 + 576));
  }

  uint64_t v25 = &off_10099B000;
  if (qword_10099B400 != -1) {
    swift_once(&qword_10099B400, sub_1003F889C);
  }
  uint64_t v26 = sub_10000A720(*(void *)(v0 + 448), (uint64_t)qword_100A2A928);
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.debug.getter(v27);
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "insert(observedAdvertisement:) Using cached lastAdvertisement",  v29,  2u);
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  if (*(_BYTE *)(v0 + 802) == 1)
  {
    if (qword_10099B400 != -1) {
      swift_once(&qword_10099B400, sub_1003F889C);
    }
    uint64_t v30 = *(void *)(v0 + 664);
    uint64_t v31 = *(void *)(v0 + 656);
    sub_10000A720(*(void *)(v0 + 448), (uint64_t)qword_100A2A928);
    uint64_t v32 = sub_10001DC4C(v30, v31, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v34 = static os_log_type_t.info.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = *(void *)(v0 + 696);
      uint64_t v36 = *(void *)(v0 + 656);
      uint64_t v37 = swift_slowAlloc(22LL, -1LL);
      uint64_t v38 = swift_slowAlloc(32LL, -1LL);
      uint64_t v116 = v38;
      *(_DWORD *)uint64_t v37 = 141558275;
      *(void *)(v0 + 336) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v37 + 4, v37 + 12);
      *(_WORD *)(v37 + 12) = 2081;
      uint64_t v39 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter(v35, v39);
      *(void *)(v0 + 344) = sub_1003F11D4(v40, v41, &v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v37 + 14, v37 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v36, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "Managed periphereral: %{private,mask.hash}s",  (uint8_t *)v37,  0x16u);
      swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(*(void *)(v0 + 656), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    }

    uint64_t v55 = (void *)swift_task_alloc(dword_1009AD18C);
    *(void *)(v0 + 744) = v55;
    *uint64_t v55 = v0;
    v55[1] = sub_100402FDC;
    return sub_10040506C(*(void *)(v0 + 552), *(void *)(v0 + 352));
  }

  if (qword_10099B400 != -1) {
    swift_once(&qword_10099B400, sub_1003F889C);
  }
  uint64_t v42 = *(void *)(v0 + 664);
  uint64_t v43 = *(void *)(v0 + 648);
  sub_10000A720(*(void *)(v0 + 448), (uint64_t)qword_100A2A928);
  uint64_t v44 = sub_10001DC4C(v42, v43, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
  os_log_type_t v46 = static os_log_type_t.info.getter(v45);
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = *(void *)(v0 + 696);
    uint64_t v48 = *(void *)(v0 + 648);
    uint64_t v49 = swift_slowAlloc(22LL, -1LL);
    uint64_t v50 = swift_slowAlloc(32LL, -1LL);
    uint64_t v116 = v50;
    *(_DWORD *)uint64_t v49 = 141558275;
    *(void *)(v0 + 320) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v49 + 4, v49 + 12);
    *(_WORD *)(v49 + 12) = 2081;
    uint64_t v51 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter(v47, v51);
    *(void *)(v0 + 328) = sub_1003F11D4(v52, v53, &v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v49 + 14, v49 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68(v48, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    _os_log_impl( (void *)&_mh_execute_header,  v45,  v46,  "Not a managed periphereral: %{private,mask.hash}s",  (uint8_t *)v49,  0x16u);
    swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v54 = v50;
    uint64_t v25 = &off_10099B000;
    swift_slowDealloc(v54, -1LL, -1LL);
    swift_slowDealloc(v49, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(*(void *)(v0 + 648), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  }

  uint64_t v56 = *(void *)(v0 + 360);
  uint64_t v57 = *(void *)(v56 + *(void *)(v0 + 704));
  if (!*(void *)(v57 + 16))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 712))( *(void *)(v0 + 528),  1LL,  1LL,  *(void *)(v0 + 368));
LABEL_31:
    uint64_t v65 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 712);
    uint64_t v66 = *(void *)(v0 + 576);
    uint64_t v67 = *(void *)(v0 + 568);
    uint64_t v68 = *(void *)(v0 + 520);
    uint64_t v69 = *(void *)(v0 + 368);
    uint64_t v70 = *(void *)(v0 + 352);
    uint64_t v71 = *(void *)(v0 + 360) + *(void *)(v0 + 704);
    sub_100015794(*(void *)(v0 + 528), &qword_10099FB70);
    sub_10001DC4C(v66, v67, type metadata accessor for BeaconIdentifier);
    sub_10001DC4C(v70, v68, type metadata accessor for ObservedAdvertisement);
    v65(v68, 0LL, 1LL, v69);
    swift_beginAccess(v71, v0 + 200, 33LL, 0LL);
    sub_100044EEC(v68, v67);
    swift_endAccess(v0 + 200);
    unint64_t v72 = (void *)swift_task_alloc(dword_1009AD184);
    *(void *)(v0 + 760) = v72;
    int v73 = sub_100403154;
LABEL_32:
    void *v72 = v0;
    v72[1] = v73;
    return sub_100405A08(*(void *)(v0 + 352));
  }

  uint64_t v58 = *(void *)(v0 + 576);
  swift_bridgeObjectRetain(*(void *)(v56 + *(void *)(v0 + 704)));
  unint64_t v59 = sub_10030D1C4(v58);
  if ((v60 & 1) != 0)
  {
    sub_10001DC4C( *(void *)(v57 + 56) + *(void *)(*(void *)(v0 + 376) + 72LL) * v59,  *(void *)(v0 + 528),  type metadata accessor for ObservedAdvertisement);
    uint64_t v61 = 0LL;
  }

  else
  {
    uint64_t v61 = 1LL;
  }

  uint64_t v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 720);
  uint64_t v63 = *(void *)(v0 + 528);
  uint64_t v64 = *(void *)(v0 + 368);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 712))(v63, v61, 1LL, v64);
  swift_bridgeObjectRelease();
  if (v62(v63, 1LL, v64) == 1) {
    goto LABEL_31;
  }
  uint64_t v74 = *(void *)(v0 + 416);
  uint64_t v75 = *(void *)(v0 + 368);
  uint64_t v76 = *(void *)(v0 + 352);
  sub_10002218C(*(void *)(v0 + 528), v74, type metadata accessor for ObservedAdvertisement);
  uint64_t v77 = *(int *)(v75 + 44);
  uint64_t v78 = v76 + v77;
  uint64_t v79 = v74 + v77;
  uint64_t v80 = type metadata accessor for Date(0LL);
  uint64_t v81 = sub_100007864( &qword_1009A1280,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  if ((dispatch thunk of static Comparable.< infix(_:_:)(v78, v79, v80, v81) & 1) == 0)
  {
    uint64_t v106 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 712);
    uint64_t v107 = *(void *)(v0 + 568);
    uint64_t v108 = *(void *)(v0 + 520);
    uint64_t v109 = *(void *)(v0 + 368);
    uint64_t v110 = *(void *)(v0 + 352);
    uint64_t v111 = *(void *)(v0 + 360) + *(void *)(v0 + 704);
    sub_10001DC4C(*(void *)(v0 + 576), v107, type metadata accessor for BeaconIdentifier);
    sub_10001DC4C(v110, v108, type metadata accessor for ObservedAdvertisement);
    v106(v108, 0LL, 1LL, v109);
    swift_beginAccess(v111, v0 + 176, 33LL, 0LL);
    sub_100044EEC(v108, v107);
    swift_endAccess(v0 + 176);
    unint64_t v72 = (void *)swift_task_alloc(dword_1009AD184);
    *(void *)(v0 + 752) = v72;
    int v73 = sub_100403048;
    goto LABEL_32;
  }

  uint64_t v114 = (__int128 *)(v0 + 56);
  if (v25[128] != (_UNKNOWN *)-1LL) {
    swift_once(&qword_10099B400, sub_1003F889C);
  }
  uint64_t v82 = *(void *)(v0 + 408);
  uint64_t v83 = *(void *)(v0 + 416);
  uint64_t v85 = *(void *)(v0 + 392);
  uint64_t v84 = *(void *)(v0 + 400);
  uint64_t v86 = *(void *)(v0 + 384);
  uint64_t v87 = *(void *)(v0 + 352);
  sub_10000A720(*(void *)(v0 + 448), (uint64_t)qword_100A2A928);
  sub_10001DC4C(v87, v82, type metadata accessor for ObservedAdvertisement);
  sub_10001DC4C(v83, v84, type metadata accessor for ObservedAdvertisement);
  sub_10001DC4C(v87, v85, type metadata accessor for ObservedAdvertisement);
  uint64_t v88 = sub_10001DC4C(v83, v86, type metadata accessor for ObservedAdvertisement);
  uint64_t v89 = (os_log_s *)Logger.logObject.getter(v88);
  os_log_type_t v90 = static os_log_type_t.debug.getter(v89);
  BOOL v91 = os_log_type_enabled(v89, v90);
  uint64_t v92 = *(void *)(v0 + 408);
  uint64_t v93 = *(void *)(v0 + 416);
  uint64_t v95 = *(void *)(v0 + 392);
  uint64_t v94 = *(void *)(v0 + 400);
  uint64_t v96 = *(void *)(v0 + 384);
  if (v91)
  {
    uint64_t v97 = swift_slowAlloc(42LL, -1LL);
    uint64_t v113 = swift_slowAlloc(64LL, -1LL);
    uint64_t v116 = v113;
    *(_DWORD *)uint64_t v97 = 136315906;
    sub_1000A869C();
    *(void *)(v0 + 288) = sub_1003F11D4(v98, v99, &v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v97 + 4, v97 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68(v92, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v97 + 12) = 2080;
    sub_1000A869C();
    *(void *)(v0 + 296) = sub_1003F11D4(v100, v101, &v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v97 + 14, v97 + 22);
    swift_bridgeObjectRelease();
    uint64_t v102 = sub_100018C68(v94, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v97 + 22) = 2048;
    uint64_t v103 = Date.epoch.getter(v102);
    sub_100018C68(v95, type metadata accessor for ObservedAdvertisement);
    *(void *)(v0 + 272) = v103;
    uint64_t v104 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v97 + 24, v97 + 32);
    *(_WORD *)(v97 + 32) = 2048;
    uint64_t v105 = Date.epoch.getter(v104);
    sub_100018C68(v96, type metadata accessor for ObservedAdvertisement);
    *(void *)(v0 + 312) = v105;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v97 + 34, v97 + 42);
    _os_log_impl( (void *)&_mh_execute_header,  v89,  v90,  "Not caching because observation with equal or newer scanDate already cached.\n observed: %s\n existing: %s\n epochs: [observed: %lld, existing: %lld]",  (uint8_t *)v97,  0x2Au);
    swift_arrayDestroy(v113, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v113, -1LL, -1LL);
    swift_slowDealloc(v97, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(*(void *)(v0 + 384), type metadata accessor for ObservedAdvertisement);
    sub_100018C68(v95, type metadata accessor for ObservedAdvertisement);

    sub_100018C68(v94, type metadata accessor for ObservedAdvertisement);
    sub_100018C68(v92, type metadata accessor for ObservedAdvertisement);
  }

  sub_100018C68(v93, type metadata accessor for ObservedAdvertisement);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, (uint64_t)v114, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0(v114, v0 + 136);
    sub_100012ED8((void *)(v0 + 136), *(void *)(v0 + 160));
    uint64_t v115 = (uint64_t (__cdecl *)())((char *)&dword_10099C968 + dword_10099C968);
    unint64_t v112 = (void *)swift_task_alloc(unk_10099C96C);
    *(void *)(v0 + 768) = v112;
    void *v112 = v0;
    v112[1] = sub_100403250;
    return v115();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100402258()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 728);
  *(void *)(*v1 + 736) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_100404298;
  }
  else {
    uint64_t v4 = sub_1004022BC;
  }
  return swift_task_switch(v4, *(void *)(v2 + 360), 0LL);
}

uint64_t sub_1004022BC()
{
  uint64_t v125 = v0 + 304;
  uint64_t v126 = v0 + 312;
  uint64_t v1 = *(void *)(v0 + 552);
  uint64_t v2 = *(void *)(v0 + 536);
  sub_100015794(v1, &qword_10099FB70);
  uint64_t v3 = sub_100015750(v2, v1, &qword_10099FB70);
  ContinuousClock.now.getter(v3);
  if (qword_10099B400 != -1) {
    swift_once(&qword_10099B400, sub_1003F889C);
  }
  uint64_t v124 = v0 + 336;
  uint64_t v4 = *(void *)(v0 + 504);
  uint64_t v5 = *(void *)(v0 + 512);
  uint64_t v7 = *(void *)(v0 + 488);
  uint64_t v6 = *(void *)(v0 + 496);
  uint64_t v8 = *(void *)(v0 + 472);
  uint64_t v9 = *(void *)(v0 + 480);
  uint64_t v11 = *(void *)(v0 + 456);
  uint64_t v10 = *(void *)(v0 + 464);
  uint64_t v12 = *(void *)(v0 + 448);
  uint64_t v13 = sub_10000A720(v12, (uint64_t)qword_100A2A928);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v10, v13, v12);
  uint64_t v14 = *(void (**)(uint64_t, uint64_t, uint64_t))(v9 + 16);
  v14(v6, v5, v8);
  uint64_t v15 = ((uint64_t (*)(uint64_t, uint64_t, uint64_t))v14)(v7, v4, v8);
  char v16 = (os_log_s *)Logger.logObject.getter(v15);
  os_log_type_t v17 = static os_log_type_t.debug.getter(v16);
  BOOL v18 = os_log_type_enabled(v16, v17);
  uint64_t v20 = *(void *)(v0 + 504);
  uint64_t v19 = *(void *)(v0 + 512);
  uint64_t v22 = *(void *)(v0 + 488);
  uint64_t v21 = *(void *)(v0 + 496);
  uint64_t v23 = *(void *)(v0 + 472);
  uint64_t v127 = *(void *)(v0 + 480);
  uint64_t v24 = *(void *)(v0 + 464);
  uint64_t v128 = *(void *)(v0 + 456);
  uint64_t v25 = *(void *)(v0 + 448);
  if (v18)
  {
    uint64_t v122 = *(void *)(v0 + 464);
    uint64_t v26 = *(void *)(v0 + 440);
    uint64_t v115 = *(void *)(v0 + 432);
    uint64_t v116 = *(void *)(v0 + 424);
    os_log_type_t type = v17;
    *(void *)uint64_t v121 = *(void *)(v0 + 448);
    uint64_t v27 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v118 = swift_slowAlloc(32LL, -1LL);
    uint64_t v131 = v118;
    *(_DWORD *)uint64_t v27 = 136446210;
    static Duration.UnitsFormatStyle.Unit.milliseconds.getter(v118);
    uint64_t v28 = sub_100007864( &qword_1009AE520,  (uint64_t (*)(uint64_t))&type metadata accessor for ContinuousClock.Instant,  (uint64_t)&protocol conformance descriptor for ContinuousClock.Instant);
    uint64_t v29 = static Duration.description<A>(_:_:units:)(v21, v22, v26, v23, v28);
    uint64_t v117 = v20;
    unint64_t v31 = v30;
    (*(void (**)(uint64_t, uint64_t))(v115 + 8))(v26, v116);
    *(void *)(v0 + 304) = sub_1003F11D4(v29, v31, &v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v125, v126, v27 + 4, v27 + 12);
    swift_bridgeObjectRelease();
    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v127 + 8);
    v32(v21, v23);
    v32(v22, v23);
    _os_log_impl((void *)&_mh_execute_header, v16, type, "insert(observedAdvertisement:) fetch: %{public}s", v27, 0xCu);
    swift_arrayDestroy(v118, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v118, -1LL, -1LL);
    swift_slowDealloc(v27, -1LL, -1LL);

    (*(void (**)(uint64_t, os_log_type_t *))(v128 + 8))(v122, *(os_log_type_t **)v121);
    v32(v117, v23);
  }

  else
  {

    uint64_t v32 = *(void (**)(uint64_t, uint64_t))(v127 + 8);
    v32(v21, v23);
    v32(v22, v23);
    (*(void (**)(uint64_t, uint64_t))(v128 + 8))(v24, v25);
    v32(v20, v23);
  }

  v32(v19, v23);
  if (*(_BYTE *)(v0 + 802) == 1)
  {
    if (qword_10099B400 != -1) {
      swift_once(&qword_10099B400, sub_1003F889C);
    }
    uint64_t v33 = *(void *)(v0 + 664);
    uint64_t v34 = *(void *)(v0 + 656);
    sub_10000A720(*(void *)(v0 + 448), (uint64_t)qword_100A2A928);
    uint64_t v35 = sub_10001DC4C(v33, v34, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    uint64_t v36 = (os_log_s *)Logger.logObject.getter(v35);
    os_log_type_t v37 = static os_log_type_t.info.getter(v36);
    if (os_log_type_enabled(v36, v37))
    {
      uint64_t v38 = *(void *)(v0 + 696);
      uint64_t v39 = *(void *)(v0 + 656);
      uint64_t v40 = swift_slowAlloc(22LL, -1LL);
      uint64_t v41 = swift_slowAlloc(32LL, -1LL);
      uint64_t v131 = v41;
      *(_DWORD *)uint64_t v40 = 141558275;
      *(void *)(v0 + 336) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v124, v0 + 344, v40 + 4, v40 + 12);
      *(_WORD *)(v40 + 12) = 2081;
      uint64_t v42 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v43 = dispatch thunk of CustomStringConvertible.description.getter(v38, v42);
      *(void *)(v0 + 344) = sub_1003F11D4(v43, v44, &v131);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v40 + 14, v40 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v39, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      _os_log_impl( (void *)&_mh_execute_header,  v36,  v37,  "Managed periphereral: %{private,mask.hash}s",  (uint8_t *)v40,  0x16u);
      swift_arrayDestroy(v41, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v41, -1LL, -1LL);
      swift_slowDealloc(v40, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(*(void *)(v0 + 656), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    }

    uint64_t v57 = (void *)swift_task_alloc(dword_1009AD18C);
    *(void *)(v0 + 744) = v57;
    *uint64_t v57 = v0;
    v57[1] = sub_100402FDC;
    return sub_10040506C(*(void *)(v0 + 552), *(void *)(v0 + 352));
  }

  if (qword_10099B400 != -1) {
    swift_once(&qword_10099B400, sub_1003F889C);
  }
  uint64_t v45 = *(void *)(v0 + 664);
  uint64_t v46 = *(void *)(v0 + 648);
  sub_10000A720(*(void *)(v0 + 448), (uint64_t)qword_100A2A928);
  uint64_t v47 = sub_10001DC4C(v45, v46, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  uint64_t v48 = (os_log_s *)Logger.logObject.getter(v47);
  os_log_type_t v49 = static os_log_type_t.info.getter(v48);
  if (os_log_type_enabled(v48, v49))
  {
    uint64_t v50 = *(void *)(v0 + 696);
    uint64_t v51 = *(void *)(v0 + 648);
    uint64_t v52 = swift_slowAlloc(22LL, -1LL);
    uint64_t v53 = swift_slowAlloc(32LL, -1LL);
    uint64_t v131 = v53;
    *(_DWORD *)uint64_t v52 = 141558275;
    *(void *)(v0 + 320) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v52 + 4, v52 + 12);
    *(_WORD *)(v52 + 12) = 2081;
    uint64_t v54 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v55 = dispatch thunk of CustomStringConvertible.description.getter(v50, v54);
    *(void *)(v0 + 328) = sub_1003F11D4(v55, v56, &v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v124, v52 + 14, v52 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68(v51, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    _os_log_impl( (void *)&_mh_execute_header,  v48,  v49,  "Not a managed periphereral: %{private,mask.hash}s",  (uint8_t *)v52,  0x16u);
    swift_arrayDestroy(v53, 1LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v53, -1LL, -1LL);
    swift_slowDealloc(v52, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(*(void *)(v0 + 648), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  }

  uint64_t v59 = *(void *)(v0 + 360);
  uint64_t v60 = *(void *)(v59 + *(void *)(v0 + 704));
  if (!*(void *)(v60 + 16))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 712))( *(void *)(v0 + 528),  1LL,  1LL,  *(void *)(v0 + 368));
LABEL_24:
    uint64_t v68 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 712);
    uint64_t v69 = *(void *)(v0 + 576);
    uint64_t v70 = *(void *)(v0 + 568);
    uint64_t v71 = *(void *)(v0 + 520);
    uint64_t v72 = *(void *)(v0 + 368);
    uint64_t v73 = *(void *)(v0 + 352);
    uint64_t v74 = *(void *)(v0 + 360) + *(void *)(v0 + 704);
    sub_100015794(*(void *)(v0 + 528), &qword_10099FB70);
    sub_10001DC4C(v69, v70, type metadata accessor for BeaconIdentifier);
    sub_10001DC4C(v73, v71, type metadata accessor for ObservedAdvertisement);
    v68(v71, 0LL, 1LL, v72);
    swift_beginAccess(v74, v0 + 200, 33LL, 0LL);
    sub_100044EEC(v71, v70);
    swift_endAccess(v0 + 200);
    uint64_t v75 = (void *)swift_task_alloc(dword_1009AD184);
    *(void *)(v0 + 760) = v75;
    uint64_t v76 = sub_100403154;
LABEL_25:
    *uint64_t v75 = v0;
    v75[1] = v76;
    return sub_100405A08(*(void *)(v0 + 352));
  }

  uint64_t v61 = *(void *)(v0 + 576);
  swift_bridgeObjectRetain(*(void *)(v59 + *(void *)(v0 + 704)));
  unint64_t v62 = sub_10030D1C4(v61);
  if ((v63 & 1) != 0)
  {
    sub_10001DC4C( *(void *)(v60 + 56) + *(void *)(*(void *)(v0 + 376) + 72LL) * v62,  *(void *)(v0 + 528),  type metadata accessor for ObservedAdvertisement);
    uint64_t v64 = 0LL;
  }

  else
  {
    uint64_t v64 = 1LL;
  }

  uint64_t v65 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 720);
  uint64_t v66 = *(void *)(v0 + 528);
  uint64_t v67 = *(void *)(v0 + 368);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 712))(v66, v64, 1LL, v67);
  swift_bridgeObjectRelease();
  if (v65(v66, 1LL, v67) == 1) {
    goto LABEL_24;
  }
  uint64_t v77 = *(void *)(v0 + 416);
  uint64_t v78 = *(void *)(v0 + 368);
  uint64_t v79 = *(void *)(v0 + 352);
  sub_10002218C(*(void *)(v0 + 528), v77, type metadata accessor for ObservedAdvertisement);
  uint64_t v80 = *(int *)(v78 + 44);
  uint64_t v81 = v79 + v80;
  uint64_t v82 = v77 + v80;
  uint64_t v83 = type metadata accessor for Date(0LL);
  uint64_t v84 = sub_100007864( &qword_1009A1280,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  if ((dispatch thunk of static Comparable.< infix(_:_:)(v81, v82, v83, v84) & 1) == 0)
  {
    uint64_t v108 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 712);
    uint64_t v109 = *(void *)(v0 + 568);
    uint64_t v110 = *(void *)(v0 + 520);
    uint64_t v111 = *(void *)(v0 + 368);
    uint64_t v112 = *(void *)(v0 + 352);
    uint64_t v113 = *(void *)(v0 + 360) + *(void *)(v0 + 704);
    sub_10001DC4C(*(void *)(v0 + 576), v109, type metadata accessor for BeaconIdentifier);
    sub_10001DC4C(v112, v110, type metadata accessor for ObservedAdvertisement);
    v108(v110, 0LL, 1LL, v111);
    swift_beginAccess(v113, v0 + 176, 33LL, 0LL);
    sub_100044EEC(v110, v109);
    swift_endAccess(v0 + 176);
    uint64_t v75 = (void *)swift_task_alloc(dword_1009AD184);
    *(void *)(v0 + 752) = v75;
    uint64_t v76 = sub_100403048;
    goto LABEL_25;
  }

  uint64_t v129 = (__int128 *)(v0 + 56);
  if (qword_10099B400 != -1) {
    swift_once(&qword_10099B400, sub_1003F889C);
  }
  uint64_t v85 = *(void *)(v0 + 408);
  uint64_t v86 = *(void *)(v0 + 416);
  uint64_t v88 = *(void *)(v0 + 392);
  uint64_t v87 = *(void *)(v0 + 400);
  uint64_t v89 = *(void *)(v0 + 384);
  uint64_t v90 = *(void *)(v0 + 352);
  sub_10000A720(*(void *)(v0 + 448), (uint64_t)qword_100A2A928);
  sub_10001DC4C(v90, v85, type metadata accessor for ObservedAdvertisement);
  sub_10001DC4C(v86, v87, type metadata accessor for ObservedAdvertisement);
  sub_10001DC4C(v90, v88, type metadata accessor for ObservedAdvertisement);
  uint64_t v91 = sub_10001DC4C(v86, v89, type metadata accessor for ObservedAdvertisement);
  uint64_t v92 = (os_log_s *)Logger.logObject.getter(v91);
  os_log_type_t v93 = static os_log_type_t.debug.getter(v92);
  BOOL v94 = os_log_type_enabled(v92, v93);
  uint64_t v95 = *(void *)(v0 + 408);
  uint64_t v96 = *(void *)(v0 + 416);
  uint64_t v97 = *(void *)(v0 + 392);
  uint64_t v98 = *(void *)(v0 + 400);
  if (v94)
  {
    uint64_t typea = *(void *)(v0 + 384);
    uint64_t v99 = swift_slowAlloc(42LL, -1LL);
    uint64_t v123 = swift_slowAlloc(64LL, -1LL);
    uint64_t v131 = v123;
    *(_DWORD *)uint64_t v99 = 136315906;
    sub_1000A869C();
    *(void *)(v0 + 288) = sub_1003F11D4(v100, v101, &v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v99 + 4, v99 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68(v95, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v99 + 12) = 2080;
    sub_1000A869C();
    *(void *)(v0 + 296) = sub_1003F11D4(v102, v103, &v131);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v125, v99 + 14, v99 + 22);
    swift_bridgeObjectRelease();
    uint64_t v104 = sub_100018C68(v98, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v99 + 22) = 2048;
    uint64_t v105 = Date.epoch.getter(v104);
    sub_100018C68(v97, type metadata accessor for ObservedAdvertisement);
    *(void *)(v0 + 272) = v105;
    uint64_t v106 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v99 + 24, v99 + 32);
    *(_WORD *)(v99 + 32) = 2048;
    uint64_t v107 = Date.epoch.getter(v106);
    sub_100018C68(typea, type metadata accessor for ObservedAdvertisement);
    *(void *)(v0 + 312) = v107;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v126, v0 + 320, v99 + 34, v99 + 42);
    _os_log_impl( (void *)&_mh_execute_header,  v92,  v93,  "Not caching because observation with equal or newer scanDate already cached.\n observed: %s\n existing: %s\n epochs: [observed: %lld, existing: %lld]",  (uint8_t *)v99,  0x2Au);
    swift_arrayDestroy(v123, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v123, -1LL, -1LL);
    swift_slowDealloc(v99, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(*(void *)(v0 + 384), type metadata accessor for ObservedAdvertisement);
    sub_100018C68(v97, type metadata accessor for ObservedAdvertisement);

    sub_100018C68(v98, type metadata accessor for ObservedAdvertisement);
    sub_100018C68(v95, type metadata accessor for ObservedAdvertisement);
  }

  sub_100018C68(v96, type metadata accessor for ObservedAdvertisement);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, (uint64_t)v129, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0(v129, v0 + 136);
    sub_100012ED8((void *)(v0 + 136), *(void *)(v0 + 160));
    uint64_t v130 = (uint64_t (*)(void))((char *)&dword_10099C968 + dword_10099C968);
    uint64_t v114 = (void *)swift_task_alloc(unk_10099C96C);
    *(void *)(v0 + 768) = v114;
    *uint64_t v114 = v0;
    v114[1] = sub_100403250;
    return v130();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100402FDC()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 744));
  uint64_t v3 = *(void *)(v2 + 360);
  if (v0)
  {
    swift_errorRelease(v0);
    uint64_t v4 = sub_100404610;
  }

  else
  {
    uint64_t v4 = sub_1004094B0;
  }

  return swift_task_switch(v4, v3, 0LL);
}

uint64_t sub_100403048()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 360LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 752LL));
  return swift_task_switch(sub_1004030A0, v1, 0LL);
}

uint64_t sub_1004030A0()
{
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 136);
    sub_100012ED8((void *)(v0 + 136), *(void *)(v0 + 160));
    uint64_t v3 = (uint64_t (*)(void))((char *)&dword_10099C968 + dword_10099C968);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C96C);
    *(void *)(v0 + 768) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100403250;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100403154()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 360LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 760LL));
  return swift_task_switch(sub_1004031AC, v1, 0LL);
}

uint64_t sub_1004031AC()
{
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 136);
    sub_100012ED8((void *)(v0 + 136), *(void *)(v0 + 160));
    uint64_t v3 = (uint64_t (*)(void))((char *)&dword_10099C968 + dword_10099C968);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C96C);
    *(void *)(v0 + 768) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100403250;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100403250(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 768LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 360LL);
  *(void *)(*(void *)v1 + 776LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1004032B0, v3, 0LL);
}

uint64_t sub_1004032B0()
{
  uint64_t v1 = v0[97];
  uint64_t v2 = v0[83];
  uint64_t v3 = v0[80];
  uint64_t v4 = v0[79];
  uint64_t v5 = v0[78];
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v0 + 17);
  sub_10001DC4C(v2, v3, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  uint64_t v6 = *(unsigned __int8 *)(v5 + 80);
  uint64_t v7 = (v6 + 24) & ~v6;
  uint64_t v8 = swift_allocObject(&unk_100958048, v7 + v4, v6 | 7);
  v0[98] = v8;
  *(void *)(v8 + swift_weakDestroy(v0 + 16) = v1;
  sub_10002218C(v3, v8 + v7, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  uint64_t v9 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v10 = (void *)swift_task_alloc(v9);
  v0[99] = v10;
  uint64_t v11 = sub_100004AEC(&qword_1009AE4D0);
  *uint64_t v10 = v0;
  v10[1] = sub_1004033B4;
  return unsafeBlocking<A>(_:)(v0 + 100, sub_100407B00, v8, v11);
}

uint64_t sub_1004033B4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 784LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 360LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 792LL));
  swift_release(v1);
  return swift_task_switch(sub_100403418, v2, 0LL);
}

uint64_t sub_100403418()
{
  uint64_t v1 = *(void *)(v0 + 680);
  uint64_t v2 = *(void *)(v0 + 664);
  uint64_t v3 = *(void *)(v0 + 600);
  uint64_t v4 = *(void *)(v0 + 592);
  uint64_t v5 = *(void *)(v0 + 584);
  uint64_t v6 = *(void *)(v0 + 576);
  uint64_t v7 = *(void *)(v0 + 552);
  swift_release(*(void *)(v0 + 776));
  swift_release(v1);
  sub_100015794(v7, &qword_10099FB70);
  sub_100018C68(v6, type metadata accessor for BeaconIdentifier);
  (*(void (**)(uint64_t, uint64_t))(v4 + 8))(v3, v5);
  sub_100018C68(v2, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  uint64_t v8 = *(void *)(v0 + 656);
  uint64_t v9 = *(void *)(v0 + 648);
  uint64_t v10 = *(void *)(v0 + 640);
  uint64_t v11 = *(void *)(v0 + 608);
  uint64_t v12 = *(void *)(v0 + 600);
  uint64_t v13 = *(void *)(v0 + 576);
  uint64_t v14 = *(void *)(v0 + 568);
  uint64_t v15 = *(void *)(v0 + 552);
  uint64_t v16 = *(void *)(v0 + 544);
  uint64_t v18 = *(void *)(v0 + 536);
  uint64_t v19 = *(void *)(v0 + 528);
  uint64_t v20 = *(void *)(v0 + 520);
  uint64_t v21 = *(void *)(v0 + 512);
  uint64_t v22 = *(void *)(v0 + 504);
  uint64_t v23 = *(void *)(v0 + 496);
  uint64_t v24 = *(void *)(v0 + 488);
  uint64_t v25 = *(void *)(v0 + 464);
  uint64_t v26 = *(void *)(v0 + 440);
  uint64_t v27 = *(void *)(v0 + 416);
  uint64_t v28 = *(void *)(v0 + 408);
  uint64_t v29 = *(void *)(v0 + 400);
  uint64_t v30 = *(void *)(v0 + 392);
  uint64_t v31 = *(void *)(v0 + 384);
  swift_task_dealloc(*(void *)(v0 + 664));
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100403604()
{
  *(_BYTE *)(v0 + 802) = 0;
  uint64_t v1 = *(void *)(v0 + 664);
  uint64_t v2 = *(void *)(v0 + 576);
  uint64_t v3 = *(void *)(v0 + 560);
  uint64_t v4 = *(void *)(v0 + 360);
  uid_t v5 = getuid();
  sub_1005E2270(v5);
  uint64_t v6 = v2 + *(int *)(v3 + 20);
  uint64_t v7 = type metadata accessor for UUID(0LL);
  *(void *)(v0 + 696) = v7;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v6, v1, v7);
  uint64_t v8 = OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_lastAdvertisementCache;
  *(void *)(v0 + 704) = OBJC_IVAR____TtC12searchpartyd25AdvertisementCacheService_lastAdvertisementCache;
  uint64_t v9 = (uint64_t *)(v4 + v8);
  swift_beginAccess(v4 + v8, v0 + 224, 0LL, 0LL);
  uint64_t v10 = *v9;
  if (*(void *)(*v9 + 16))
  {
    uint64_t v11 = *(void *)(v0 + 576);
    swift_bridgeObjectRetain(v10);
    unint64_t v12 = sub_10030D1C4(v11);
    uint64_t v13 = *(void *)(v0 + 552);
    uint64_t v14 = *(void *)(v0 + 368);
    uint64_t v15 = *(void *)(v0 + 376);
    if ((v16 & 1) != 0)
    {
      sub_10001DC4C( *(void *)(v10 + 56) + *(void *)(v15 + 72) * v12,  *(void *)(v0 + 552),  type metadata accessor for ObservedAdvertisement);
      os_log_type_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
      v17(v13, 0LL, 1LL, v14);
    }

    else
    {
      os_log_type_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v15 + 56);
      v17(*(void *)(v0 + 552), 1LL, 1LL, v14);
    }

    swift_bridgeObjectRelease();
  }

  else
  {
    os_log_type_t v17 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 376) + 56LL);
    v17(*(void *)(v0 + 552), 1LL, 1LL, *(void *)(v0 + 368));
  }

  *(void *)(v0 + 712) = v17;
  uint64_t v18 = *(void *)(v0 + 544);
  uint64_t v19 = *(void *)(v0 + 368);
  uint64_t v20 = *(void *)(v0 + 376);
  sub_10001581C(*(void *)(v0 + 552), v18, &qword_10099FB70);
  uint64_t v21 = *(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v20 + 48);
  *(void *)(v0 + 720) = v21;
  LODWORD(v19) = v21(v18, 1LL, v19);
  uint64_t v22 = sub_100015794(v18, &qword_10099FB70);
  if ((_DWORD)v19 == 1)
  {
    ContinuousClock.now.getter(v22);
    uint64_t v23 = (void *)swift_task_alloc(dword_1009BCD4C);
    *(void *)(v0 + 728) = v23;
    *uint64_t v23 = v0;
    v23[1] = sub_100402258;
    return sub_1006D544C(*(void *)(v0 + 536), *(void *)(v0 + 576));
  }

  uint64_t v25 = &off_10099B000;
  if (qword_10099B400 != -1) {
    swift_once(&qword_10099B400, sub_1003F889C);
  }
  uint64_t v26 = sub_10000A720(*(void *)(v0 + 448), (uint64_t)qword_100A2A928);
  uint64_t v27 = (os_log_s *)Logger.logObject.getter(v26);
  os_log_type_t v28 = static os_log_type_t.debug.getter(v27);
  if (os_log_type_enabled(v27, v28))
  {
    uint64_t v29 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v29 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v27,  v28,  "insert(observedAdvertisement:) Using cached lastAdvertisement",  v29,  2u);
    swift_slowDealloc(v29, -1LL, -1LL);
  }

  if (*(_BYTE *)(v0 + 802) == 1)
  {
    if (qword_10099B400 != -1) {
      swift_once(&qword_10099B400, sub_1003F889C);
    }
    uint64_t v30 = *(void *)(v0 + 664);
    uint64_t v31 = *(void *)(v0 + 656);
    sub_10000A720(*(void *)(v0 + 448), (uint64_t)qword_100A2A928);
    uint64_t v32 = sub_10001DC4C(v30, v31, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    uint64_t v33 = (os_log_s *)Logger.logObject.getter(v32);
    os_log_type_t v34 = static os_log_type_t.info.getter(v33);
    if (os_log_type_enabled(v33, v34))
    {
      uint64_t v35 = *(void *)(v0 + 696);
      uint64_t v36 = *(void *)(v0 + 656);
      uint64_t v37 = swift_slowAlloc(22LL, -1LL);
      uint64_t v38 = swift_slowAlloc(32LL, -1LL);
      uint64_t v116 = v38;
      *(_DWORD *)uint64_t v37 = 141558275;
      *(void *)(v0 + 336) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 336, v0 + 344, v37 + 4, v37 + 12);
      *(_WORD *)(v37 + 12) = 2081;
      uint64_t v39 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v40 = dispatch thunk of CustomStringConvertible.description.getter(v35, v39);
      *(void *)(v0 + 344) = sub_1003F11D4(v40, v41, &v116);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 352, v37 + 14, v37 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v36, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      _os_log_impl( (void *)&_mh_execute_header,  v33,  v34,  "Managed periphereral: %{private,mask.hash}s",  (uint8_t *)v37,  0x16u);
      swift_arrayDestroy(v38, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v38, -1LL, -1LL);
      swift_slowDealloc(v37, -1LL, -1LL);
    }

    else
    {
      sub_100018C68(*(void *)(v0 + 656), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    }

    uint64_t v55 = (void *)swift_task_alloc(dword_1009AD18C);
    *(void *)(v0 + 744) = v55;
    *uint64_t v55 = v0;
    v55[1] = sub_100402FDC;
    return sub_10040506C(*(void *)(v0 + 552), *(void *)(v0 + 352));
  }

  if (qword_10099B400 != -1) {
    swift_once(&qword_10099B400, sub_1003F889C);
  }
  uint64_t v42 = *(void *)(v0 + 664);
  uint64_t v43 = *(void *)(v0 + 648);
  sub_10000A720(*(void *)(v0 + 448), (uint64_t)qword_100A2A928);
  uint64_t v44 = sub_10001DC4C(v42, v43, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  uint64_t v45 = (os_log_s *)Logger.logObject.getter(v44);
  os_log_type_t v46 = static os_log_type_t.info.getter(v45);
  if (os_log_type_enabled(v45, v46))
  {
    uint64_t v47 = *(void *)(v0 + 696);
    uint64_t v48 = *(void *)(v0 + 648);
    uint64_t v49 = swift_slowAlloc(22LL, -1LL);
    uint64_t v50 = swift_slowAlloc(32LL, -1LL);
    uint64_t v116 = v50;
    *(_DWORD *)uint64_t v49 = 141558275;
    *(void *)(v0 + 320) = 1752392040LL;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 320, v0 + 328, v49 + 4, v49 + 12);
    *(_WORD *)(v49 + 12) = 2081;
    uint64_t v51 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    uint64_t v52 = dispatch thunk of CustomStringConvertible.description.getter(v47, v51);
    *(void *)(v0 + 328) = sub_1003F11D4(v52, v53, &v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 328, v0 + 336, v49 + 14, v49 + 22);
    swift_bridgeObjectRelease();
    sub_100018C68(v48, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    _os_log_impl( (void *)&_mh_execute_header,  v45,  v46,  "Not a managed periphereral: %{private,mask.hash}s",  (uint8_t *)v49,  0x16u);
    swift_arrayDestroy(v50, 1LL, (char *)&type metadata for Any + 8);
    uint64_t v54 = v50;
    uint64_t v25 = &off_10099B000;
    swift_slowDealloc(v54, -1LL, -1LL);
    swift_slowDealloc(v49, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(*(void *)(v0 + 648), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  }

  uint64_t v56 = *(void *)(v0 + 360);
  uint64_t v57 = *(void *)(v56 + *(void *)(v0 + 704));
  if (!*(void *)(v57 + 16))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 712))( *(void *)(v0 + 528),  1LL,  1LL,  *(void *)(v0 + 368));
LABEL_31:
    uint64_t v65 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 712);
    uint64_t v66 = *(void *)(v0 + 576);
    uint64_t v67 = *(void *)(v0 + 568);
    uint64_t v68 = *(void *)(v0 + 520);
    uint64_t v69 = *(void *)(v0 + 368);
    uint64_t v70 = *(void *)(v0 + 352);
    uint64_t v71 = *(void *)(v0 + 360) + *(void *)(v0 + 704);
    sub_100015794(*(void *)(v0 + 528), &qword_10099FB70);
    sub_10001DC4C(v66, v67, type metadata accessor for BeaconIdentifier);
    sub_10001DC4C(v70, v68, type metadata accessor for ObservedAdvertisement);
    v65(v68, 0LL, 1LL, v69);
    swift_beginAccess(v71, v0 + 200, 33LL, 0LL);
    sub_100044EEC(v68, v67);
    swift_endAccess(v0 + 200);
    uint64_t v72 = (void *)swift_task_alloc(dword_1009AD184);
    *(void *)(v0 + 760) = v72;
    uint64_t v73 = sub_100403154;
LABEL_32:
    void *v72 = v0;
    v72[1] = v73;
    return sub_100405A08(*(void *)(v0 + 352));
  }

  uint64_t v58 = *(void *)(v0 + 576);
  swift_bridgeObjectRetain(*(void *)(v56 + *(void *)(v0 + 704)));
  unint64_t v59 = sub_10030D1C4(v58);
  if ((v60 & 1) != 0)
  {
    sub_10001DC4C( *(void *)(v57 + 56) + *(void *)(*(void *)(v0 + 376) + 72LL) * v59,  *(void *)(v0 + 528),  type metadata accessor for ObservedAdvertisement);
    uint64_t v61 = 0LL;
  }

  else
  {
    uint64_t v61 = 1LL;
  }

  unint64_t v62 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 720);
  uint64_t v63 = *(void *)(v0 + 528);
  uint64_t v64 = *(void *)(v0 + 368);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 712))(v63, v61, 1LL, v64);
  swift_bridgeObjectRelease();
  if (v62(v63, 1LL, v64) == 1) {
    goto LABEL_31;
  }
  uint64_t v74 = *(void *)(v0 + 416);
  uint64_t v75 = *(void *)(v0 + 368);
  uint64_t v76 = *(void *)(v0 + 352);
  sub_10002218C(*(void *)(v0 + 528), v74, type metadata accessor for ObservedAdvertisement);
  uint64_t v77 = *(int *)(v75 + 44);
  uint64_t v78 = v76 + v77;
  uint64_t v79 = v74 + v77;
  uint64_t v80 = type metadata accessor for Date(0LL);
  uint64_t v81 = sub_100007864( &qword_1009A1280,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  if ((dispatch thunk of static Comparable.< infix(_:_:)(v78, v79, v80, v81) & 1) == 0)
  {
    uint64_t v106 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 712);
    uint64_t v107 = *(void *)(v0 + 568);
    uint64_t v108 = *(void *)(v0 + 520);
    uint64_t v109 = *(void *)(v0 + 368);
    uint64_t v110 = *(void *)(v0 + 352);
    uint64_t v111 = *(void *)(v0 + 360) + *(void *)(v0 + 704);
    sub_10001DC4C(*(void *)(v0 + 576), v107, type metadata accessor for BeaconIdentifier);
    sub_10001DC4C(v110, v108, type metadata accessor for ObservedAdvertisement);
    v106(v108, 0LL, 1LL, v109);
    swift_beginAccess(v111, v0 + 176, 33LL, 0LL);
    sub_100044EEC(v108, v107);
    swift_endAccess(v0 + 176);
    uint64_t v72 = (void *)swift_task_alloc(dword_1009AD184);
    *(void *)(v0 + 752) = v72;
    uint64_t v73 = sub_100403048;
    goto LABEL_32;
  }

  uint64_t v114 = (__int128 *)(v0 + 56);
  if (v25[128] != (_UNKNOWN *)-1LL) {
    swift_once(&qword_10099B400, sub_1003F889C);
  }
  uint64_t v82 = *(void *)(v0 + 408);
  uint64_t v83 = *(void *)(v0 + 416);
  uint64_t v85 = *(void *)(v0 + 392);
  uint64_t v84 = *(void *)(v0 + 400);
  uint64_t v86 = *(void *)(v0 + 384);
  uint64_t v87 = *(void *)(v0 + 352);
  sub_10000A720(*(void *)(v0 + 448), (uint64_t)qword_100A2A928);
  sub_10001DC4C(v87, v82, type metadata accessor for ObservedAdvertisement);
  sub_10001DC4C(v83, v84, type metadata accessor for ObservedAdvertisement);
  sub_10001DC4C(v87, v85, type metadata accessor for ObservedAdvertisement);
  uint64_t v88 = sub_10001DC4C(v83, v86, type metadata accessor for ObservedAdvertisement);
  uint64_t v89 = (os_log_s *)Logger.logObject.getter(v88);
  os_log_type_t v90 = static os_log_type_t.debug.getter(v89);
  BOOL v91 = os_log_type_enabled(v89, v90);
  uint64_t v92 = *(void *)(v0 + 408);
  uint64_t v93 = *(void *)(v0 + 416);
  uint64_t v95 = *(void *)(v0 + 392);
  uint64_t v94 = *(void *)(v0 + 400);
  uint64_t v96 = *(void *)(v0 + 384);
  if (v91)
  {
    uint64_t v97 = swift_slowAlloc(42LL, -1LL);
    uint64_t v113 = swift_slowAlloc(64LL, -1LL);
    uint64_t v116 = v113;
    *(_DWORD *)uint64_t v97 = 136315906;
    sub_1000A869C();
    *(void *)(v0 + 288) = sub_1003F11D4(v98, v99, &v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v97 + 4, v97 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68(v92, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v97 + 12) = 2080;
    sub_1000A869C();
    *(void *)(v0 + 296) = sub_1003F11D4(v100, v101, &v116);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v97 + 14, v97 + 22);
    swift_bridgeObjectRelease();
    uint64_t v102 = sub_100018C68(v94, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v97 + 22) = 2048;
    uint64_t v103 = Date.epoch.getter(v102);
    sub_100018C68(v95, type metadata accessor for ObservedAdvertisement);
    *(void *)(v0 + 272) = v103;
    uint64_t v104 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v97 + 24, v97 + 32);
    *(_WORD *)(v97 + 32) = 2048;
    uint64_t v105 = Date.epoch.getter(v104);
    sub_100018C68(v96, type metadata accessor for ObservedAdvertisement);
    *(void *)(v0 + 312) = v105;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v97 + 34, v97 + 42);
    _os_log_impl( (void *)&_mh_execute_header,  v89,  v90,  "Not caching because observation with equal or newer scanDate already cached.\n observed: %s\n existing: %s\n epochs: [observed: %lld, existing: %lld]",  (uint8_t *)v97,  0x2Au);
    swift_arrayDestroy(v113, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v113, -1LL, -1LL);
    swift_slowDealloc(v97, -1LL, -1LL);
  }

  else
  {
    sub_100018C68(*(void *)(v0 + 384), type metadata accessor for ObservedAdvertisement);
    sub_100018C68(v95, type metadata accessor for ObservedAdvertisement);

    sub_100018C68(v94, type metadata accessor for ObservedAdvertisement);
    sub_100018C68(v92, type metadata accessor for ObservedAdvertisement);
  }

  sub_100018C68(v93, type metadata accessor for ObservedAdvertisement);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, (uint64_t)v114, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0(v114, v0 + 136);
    sub_100012ED8((void *)(v0 + 136), *(void *)(v0 + 160));
    uint64_t v115 = (uint64_t (__cdecl *)())((char *)&dword_10099C968 + dword_10099C968);
    uint64_t v112 = (void *)swift_task_alloc(unk_10099C96C);
    *(void *)(v0 + 768) = v112;
    void *v112 = v0;
    v112[1] = sub_100403250;
    return v115();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100404298()
{
  if (qword_10099B400 != -1) {
    swift_once(&qword_10099B400, sub_1003F889C);
  }
  uint64_t v1 = *(void *)(v0 + 736);
  sub_10000A720(*(void *)(v0 + 448), (uint64_t)qword_100A2A928);
  swift_errorRetain(v1);
  uint64_t v2 = swift_errorRetain(v1);
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.error.getter(v3);
  BOOL v5 = os_log_type_enabled(v3, v4);
  uint64_t v6 = *(void *)(v0 + 736);
  uint64_t v7 = *(void *)(v0 + 680);
  if (v5)
  {
    uint64_t v41 = *(void *)(v0 + 680);
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138412290;
    swift_errorRetain(v6);
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(void *)(v0 + 280) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 280, v0 + 288, v8 + 4, v8 + 12);
    *uint64_t v9 = v10;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Could not get latest advertisement: %@.", v8, 0xCu);
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_release(v41);
  }

  else
  {

    swift_release(v7);
    swift_errorRelease(v6);
    swift_errorRelease(v6);
  }

  uint64_t v12 = *(void *)(v0 + 664);
  uint64_t v13 = *(void *)(v0 + 600);
  uint64_t v14 = *(void *)(v0 + 592);
  uint64_t v15 = *(void *)(v0 + 584);
  uint64_t v16 = *(void *)(v0 + 576);
  uint64_t v17 = *(void *)(v0 + 552);
  swift_errorRelease(*(void *)(v0 + 736));
  sub_100015794(v17, &qword_10099FB70);
  sub_100018C68(v16, type metadata accessor for BeaconIdentifier);
  (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
  sub_100018C68(v12, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  uint64_t v18 = *(void *)(v0 + 656);
  uint64_t v19 = *(void *)(v0 + 648);
  uint64_t v20 = *(void *)(v0 + 640);
  uint64_t v21 = *(void *)(v0 + 608);
  uint64_t v22 = *(void *)(v0 + 600);
  uint64_t v23 = *(void *)(v0 + 576);
  uint64_t v24 = *(void *)(v0 + 568);
  uint64_t v25 = *(void *)(v0 + 552);
  uint64_t v26 = *(void *)(v0 + 544);
  uint64_t v28 = *(void *)(v0 + 536);
  uint64_t v29 = *(void *)(v0 + 528);
  uint64_t v30 = *(void *)(v0 + 520);
  uint64_t v31 = *(void *)(v0 + 512);
  uint64_t v32 = *(void *)(v0 + 504);
  uint64_t v33 = *(void *)(v0 + 496);
  uint64_t v34 = *(void *)(v0 + 488);
  uint64_t v35 = *(void *)(v0 + 464);
  uint64_t v36 = *(void *)(v0 + 440);
  uint64_t v37 = *(void *)(v0 + 416);
  uint64_t v38 = *(void *)(v0 + 408);
  uint64_t v39 = *(void *)(v0 + 400);
  uint64_t v40 = *(void *)(v0 + 392);
  uint64_t v42 = *(void *)(v0 + 384);
  swift_task_dealloc(*(void *)(v0 + 664));
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  swift_task_dealloc(v30);
  swift_task_dealloc(v31);
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v42);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100404610()
{
  uint64_t v1 = *(void *)(*(void *)(v0 + 360) + *(void *)(v0 + 704));
  if (!*(void *)(v1 + 16))
  {
    (*(void (**)(void, uint64_t, uint64_t, void))(v0 + 712))( *(void *)(v0 + 528),  1LL,  1LL,  *(void *)(v0 + 368));
LABEL_7:
    uint64_t v9 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 712);
    uint64_t v10 = *(void *)(v0 + 576);
    uint64_t v11 = *(void *)(v0 + 568);
    uint64_t v12 = *(void *)(v0 + 520);
    uint64_t v13 = *(void *)(v0 + 368);
    uint64_t v14 = *(void *)(v0 + 352);
    uint64_t v15 = *(void *)(v0 + 360) + *(void *)(v0 + 704);
    sub_100015794(*(void *)(v0 + 528), &qword_10099FB70);
    sub_10001DC4C(v10, v11, type metadata accessor for BeaconIdentifier);
    sub_10001DC4C(v14, v12, type metadata accessor for ObservedAdvertisement);
    v9(v12, 0LL, 1LL, v13);
    swift_beginAccess(v15, v0 + 200, 33LL, 0LL);
    sub_100044EEC(v12, v11);
    swift_endAccess(v0 + 200);
    uint64_t v16 = (void *)swift_task_alloc(dword_1009AD184);
    *(void *)(v0 + 760) = v16;
    uint64_t v17 = sub_100403154;
LABEL_8:
    *uint64_t v16 = v0;
    v16[1] = v17;
    return sub_100405A08(*(void *)(v0 + 352));
  }

  uint64_t v2 = *(void *)(v0 + 576);
  swift_bridgeObjectRetain(*(void *)(*(void *)(v0 + 360) + *(void *)(v0 + 704)));
  unint64_t v3 = sub_10030D1C4(v2);
  if ((v4 & 1) != 0)
  {
    sub_10001DC4C( *(void *)(v1 + 56) + *(void *)(*(void *)(v0 + 376) + 72LL) * v3,  *(void *)(v0 + 528),  type metadata accessor for ObservedAdvertisement);
    uint64_t v5 = 0LL;
  }

  else
  {
    uint64_t v5 = 1LL;
  }

  uint64_t v6 = *(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v0 + 720);
  uint64_t v7 = *(void *)(v0 + 528);
  uint64_t v8 = *(void *)(v0 + 368);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v0 + 712))(v7, v5, 1LL, v8);
  swift_bridgeObjectRelease();
  if (v6(v7, 1LL, v8) == 1) {
    goto LABEL_7;
  }
  uint64_t v19 = *(void *)(v0 + 416);
  uint64_t v20 = *(void *)(v0 + 368);
  uint64_t v21 = *(void *)(v0 + 352);
  sub_10002218C(*(void *)(v0 + 528), v19, type metadata accessor for ObservedAdvertisement);
  uint64_t v22 = *(int *)(v20 + 44);
  uint64_t v23 = v21 + v22;
  uint64_t v24 = v19 + v22;
  uint64_t v25 = type metadata accessor for Date(0LL);
  uint64_t v26 = sub_100007864( &qword_1009A1280,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  if ((dispatch thunk of static Comparable.< infix(_:_:)(v23, v24, v25, v26) & 1) == 0)
  {
    uint64_t v52 = *(void (**)(uint64_t, void, uint64_t, uint64_t))(v0 + 712);
    uint64_t v53 = *(void *)(v0 + 568);
    uint64_t v54 = *(void *)(v0 + 520);
    uint64_t v55 = *(void *)(v0 + 368);
    uint64_t v56 = *(void *)(v0 + 352);
    uint64_t v57 = *(void *)(v0 + 360) + *(void *)(v0 + 704);
    sub_10001DC4C(*(void *)(v0 + 576), v53, type metadata accessor for BeaconIdentifier);
    sub_10001DC4C(v56, v54, type metadata accessor for ObservedAdvertisement);
    v52(v54, 0LL, 1LL, v55);
    swift_beginAccess(v57, v0 + 176, 33LL, 0LL);
    sub_100044EEC(v54, v53);
    swift_endAccess(v0 + 176);
    uint64_t v16 = (void *)swift_task_alloc(dword_1009AD184);
    *(void *)(v0 + 752) = v16;
    uint64_t v17 = sub_100403048;
    goto LABEL_8;
  }

  uint64_t v61 = (__int128 *)(v0 + 56);
  if (qword_10099B400 != -1) {
    swift_once(&qword_10099B400, sub_1003F889C);
  }
  uint64_t v27 = *(void *)(v0 + 408);
  uint64_t v28 = *(void *)(v0 + 416);
  uint64_t v30 = *(void *)(v0 + 392);
  uint64_t v29 = *(void *)(v0 + 400);
  uint64_t v31 = *(void *)(v0 + 384);
  uint64_t v32 = *(void *)(v0 + 352);
  sub_10000A720(*(void *)(v0 + 448), (uint64_t)qword_100A2A928);
  sub_10001DC4C(v32, v27, type metadata accessor for ObservedAdvertisement);
  sub_10001DC4C(v28, v29, type metadata accessor for ObservedAdvertisement);
  sub_10001DC4C(v32, v30, type metadata accessor for ObservedAdvertisement);
  uint64_t v33 = sub_10001DC4C(v28, v31, type metadata accessor for ObservedAdvertisement);
  uint64_t v34 = (os_log_s *)Logger.logObject.getter(v33);
  os_log_type_t v35 = static os_log_type_t.debug.getter(v34);
  BOOL v36 = os_log_type_enabled(v34, v35);
  uint64_t v37 = *(void *)(v0 + 408);
  uint64_t v38 = *(void *)(v0 + 416);
  uint64_t v40 = *(void *)(v0 + 392);
  uint64_t v39 = *(void *)(v0 + 400);
  uint64_t v41 = *(void *)(v0 + 384);
  if (v36)
  {
    uint64_t v60 = *(void *)(v0 + 416);
    uint64_t v42 = swift_slowAlloc(42LL, -1LL);
    uint64_t v59 = swift_slowAlloc(64LL, -1LL);
    uint64_t v63 = v59;
    *(_DWORD *)uint64_t v42 = 136315906;
    sub_1000A869C();
    *(void *)(v0 + 288) = sub_1003F11D4(v43, v44, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 288, v0 + 296, v42 + 4, v42 + 12);
    swift_bridgeObjectRelease();
    sub_100018C68(v37, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v42 + 12) = 2080;
    sub_1000A869C();
    *(void *)(v0 + 296) = sub_1003F11D4(v45, v46, &v63);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 296, v0 + 304, v42 + 14, v42 + 22);
    swift_bridgeObjectRelease();
    uint64_t v47 = sub_100018C68(v39, type metadata accessor for ObservedAdvertisement);
    *(_WORD *)(v42 + 22) = 2048;
    uint64_t v48 = Date.epoch.getter(v47);
    sub_100018C68(v40, type metadata accessor for ObservedAdvertisement);
    *(void *)(v0 + 272) = v48;
    uint64_t v49 = UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 272, v0 + 280, v42 + 24, v42 + 32);
    *(_WORD *)(v42 + 32) = 2048;
    uint64_t v50 = Date.epoch.getter(v49);
    sub_100018C68(v41, type metadata accessor for ObservedAdvertisement);
    *(void *)(v0 + 312) = v50;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 312, v0 + 320, v42 + 34, v42 + 42);
    _os_log_impl( (void *)&_mh_execute_header,  v34,  v35,  "Not caching because observation with equal or newer scanDate already cached.\n observed: %s\n existing: %s\n epochs: [observed: %lld, existing: %lld]",  (uint8_t *)v42,  0x2Au);
    swift_arrayDestroy(v59, 2LL, (char *)&type metadata for Any + 8);
    swift_slowDealloc(v59, -1LL, -1LL);
    swift_slowDealloc(v42, -1LL, -1LL);

    uint64_t v51 = v60;
  }

  else
  {
    sub_100018C68(*(void *)(v0 + 384), type metadata accessor for ObservedAdvertisement);
    sub_100018C68(v40, type metadata accessor for ObservedAdvertisement);

    sub_100018C68(v39, type metadata accessor for ObservedAdvertisement);
    sub_100018C68(v37, type metadata accessor for ObservedAdvertisement);
    uint64_t v51 = v38;
  }

  sub_100018C68(v51, type metadata accessor for ObservedAdvertisement);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, (uint64_t)v61, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0(v61, v0 + 136);
    sub_100012ED8((void *)(v0 + 136), *(void *)(v0 + 160));
    unint64_t v62 = (uint64_t (__cdecl *)())((char *)&dword_10099C968 + dword_10099C968);
    uint64_t v58 = (void *)swift_task_alloc(unk_10099C96C);
    *(void *)(v0 + 768) = v58;
    *uint64_t v58 = v0;
    v58[1] = sub_100403250;
    return v62();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100404C68()
{
  *(void *)(v1 + 200) = v0;
  return swift_task_switch(sub_100404C80, v0, 0LL);
}

uint64_t sub_100404C80()
{
  uint64_t v1 = qword_10099B9E0;
  swift_retain();
  if (v1 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 176, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    uint64_t v3 = *(void *)(v0 + 200);
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    swift_release(v3);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v5 = (uint64_t (__cdecl *)())((char *)&dword_10099CA18 + dword_10099CA18);
    char v4 = (void *)swift_task_alloc(unk_10099CA1C);
    *(void *)(v0 + 208) = v4;
    *char v4 = v0;
    v4[1] = sub_100404D80;
    return v5();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100404D80(uint64_t a1)
{
  uint64_t v3 = *(void *)(*(void *)v1 + 200LL);
  uint64_t v2 = *(void *)(*(void *)v1 + 208LL);
  *(void *)(*(void *)v1 + 216LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100404DDC, v3, 0LL);
}

uint64_t sub_100404DDC()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 216))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc(dword_10099C6AC);
    *(void *)(v0 + 224) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100404EC8;
    return sub_10000BD00();
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 136, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 160))
    {
      sub_100012EC0((__int128 *)(v0 + 136), v0 + 96);
      sub_100012ED8((void *)(v0 + 96), *(void *)(v0 + 120));
      uint64_t v5 = (uint64_t (*)(void))((char *)&dword_10099CA00 + dword_10099CA00);
      char v4 = (void *)swift_task_alloc(unk_10099CA04);
      *(void *)(v0 + 232) = v4;
      *char v4 = v0;
      v4[1] = sub_100404FCC;
      return v5();
    }

    else
    {
      __break(1u);
    }
  }

  return result;
}

uint64_t sub_100404EC8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 200LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 224LL));
  return swift_task_switch(sub_100404F20, v1, 0LL);
}

uint64_t sub_100404F20()
{
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 136, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 160))
  {
    sub_100012EC0((__int128 *)(v0 + 136), v0 + 96);
    sub_100012ED8((void *)(v0 + 96), *(void *)(v0 + 120));
    uint64_t v3 = (uint64_t (*)(void))((char *)&dword_10099CA00 + dword_10099CA00);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099CA04);
    *(void *)(v0 + 232) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100404FCC;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100404FCC(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 232LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 200LL);
  *(void *)(*(void *)v1 + 24Hasher.init(_seed:)(v3, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10040502C, v3, 0LL);
}

uint64_t sub_10040502C()
{
  uint64_t v1 = *(void *)(v0 + 240);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 96));
  if (v1) {
    swift_release(*(void *)(v0 + 240));
  }
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10040506C(uint64_t a1, uint64_t a2)
{
  v3[6] = a1;
  v3[7] = a2;
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v3[8] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  void v3[9] = v5;
  v3[10] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  unint64_t v6 = (*(void *)(*(void *)(sub_100004AEC(&qword_1009AA730) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[11] = swift_task_alloc(v6);
  v3[12] = swift_task_alloc(v6);
  uint64_t v7 = sub_100004AEC(&qword_10099FB70);
  v3[13] = swift_task_alloc((*(void *)(*(void *)(v7 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v8 = type metadata accessor for ObservedAdvertisement(0LL);
  v3[14] = v8;
  uint64_t v9 = *(void *)(v8 - 8);
  v3[15] = v9;
  unint64_t v10 = (*(void *)(v9 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v3[16] = swift_task_alloc(v10);
  v3[17] = swift_task_alloc(v10);
  v3[18] = swift_task_alloc(v10);
  v3[19] = swift_task_alloc(v10);
  v3[20] = swift_task_alloc(v10);
  return swift_task_switch(sub_100405180, v2, 0LL);
}

uint64_t sub_100405180()
{
  uint64_t v1 = v0 + 32;
  uint64_t v3 = *(void *)(v0 + 112);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v4 = *(void *)(v0 + 104);
  sub_10001581C(*(void *)(v0 + 48), v4, &qword_10099FB70);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v4, 1LL, v3) != 1)
  {
    uint64_t v21 = *(void *)(v0 + 160);
    uint64_t v22 = *(void *)(v0 + 56);
    sub_10002218C(*(void *)(v0 + 104), v21, type metadata accessor for ObservedAdvertisement);
    uint64_t v23 = *(void *)(v21 + 16);
    uint64_t v24 = *(void *)(v21 + 24);
    uint64_t v25 = *(void *)(v22 + 16);
    uint64_t v26 = *(void *)(v22 + 24);
    if ((v24 & 0x2000000000000000LL) != 0)
    {
      if ((v26 & 0x2000000000000000LL) != 0)
      {
        uint64_t v89 = v0 + 32;
        sub_10008699C(v23, v24);
        sub_10008699C(v25, v26);
        uint64_t v27 = v23;
        unint64_t v28 = v24 & 0xDFFFFFFFFFFFFFFFLL;
LABEL_17:
        _s12searchpartyd24KeyRepresentableInternalV23__derived_struct_equalsySbAC_ACtFZ_0(v27, v28);
        char v88 = v41;
        uint64_t v43 = *(void *)(v0 + 152);
        uint64_t v42 = *(void *)(v0 + 160);
        uint64_t v44 = *(void *)(v0 + 144);
        uint64_t v45 = *(void *)(v0 + 56);
        sub_1000869A4(v25, v26);
        sub_1000869A4(v23, v24);
        sub_10001DC4C(v42, v43, type metadata accessor for ObservedAdvertisement);
        sub_10001DC4C(v45, v44, type metadata accessor for ObservedAdvertisement);
        uint64_t v1 = v89;
        if ((v88 & 1) != 0)
        {
          uint64_t v47 = *(void *)(v0 + 144);
          uint64_t v46 = *(void *)(v0 + 152);
          int v48 = *(unsigned __int8 *)(v46 + 34);
          char v49 = *(_BYTE *)(v46 + 35);
          sub_100018C68(v46, type metadata accessor for ObservedAdvertisement);
          int v50 = *(unsigned __int8 *)(v47 + 34);
          char v51 = *(_BYTE *)(v47 + 35);
          sub_100018C68(v47, type metadata accessor for ObservedAdvertisement);
          if ((v49 & 1) != 0)
          {
            uint64_t v1 = v89;
            if ((v51 & 1) != 0)
            {
LABEL_37:
              sub_100018C68(*(void *)(v0 + 160), type metadata accessor for ObservedAdvertisement);
              goto LABEL_32;
            }
          }

          else
          {
            if (v48 == v50) {
              char v86 = v51;
            }
            else {
              char v86 = 1;
            }
            uint64_t v1 = v89;
            if ((v86 & 1) == 0) {
              goto LABEL_37;
            }
          }

uint64_t sub_100405A08(uint64_t a1)
{
  v2[31] = a1;
  v2[32] = v1;
  uint64_t v3 = type metadata accessor for UUID(0LL);
  v2[33] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v2[34] = v4;
  uint64_t v5 = *(void *)(v4 + 64);
  v2[35] = v5;
  v2[36] = swift_task_alloc((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_1009A9C30);
  v2[37] = v6;
  v2[38] = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for OwnedBeaconRecord(0LL);
  v2[39] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[40] = v8;
  v2[41] = swift_task_alloc((*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = sub_100004AEC(&qword_1009AA730);
  v2[42] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
  v2[43] = v10;
  uint64_t v11 = *(void *)(v10 - 8);
  v2[44] = v11;
  unint64_t v12 = (*(void *)(v11 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[45] = swift_task_alloc(v12);
  v2[46] = swift_task_alloc(v12);
  v2[47] = swift_task_alloc(v12);
  return swift_task_switch(sub_100405B24, v1, 0LL);
}

uint64_t sub_100405B24()
{
  uint64_t v1 = *(void *)(v0 + 344);
  uint64_t v2 = *(void *)(v0 + 352);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 248);
  uint64_t v5 = type metadata accessor for ObservedAdvertisement(0LL);
  *(void *)(v0 + 384) = v5;
  sub_10001581C(v4 + *(int *)(v5 + 52), v3, &qword_1009AA730);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v2 + 48))(v3, 1LL, v1) != 1)
  {
    uint64_t v11 = *(void *)(v0 + 248);
    sub_10002218C( *(void *)(v0 + 336),  *(void *)(v0 + 376),  type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    __asm { BR              X10 }
  }

  sub_100015794(*(void *)(v0 + 336), &qword_1009AA730);
  if (qword_10099B0C0 != -1) {
    swift_once(&qword_10099B0C0, sub_100095C3C);
  }
  uint64_t v6 = type metadata accessor for Logger(0LL);
  uint64_t v7 = sub_10000A720(v6, (uint64_t)qword_100A2A118);
  uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
  os_log_type_t v9 = static os_log_type_t.info.getter(v8);
  if (os_log_type_enabled(v8, v9))
  {
    uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v10 = 0;
    _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "Not updating key sync metadata for unreconciled advertisement.",  v10,  2u);
    swift_slowDealloc(v10, -1LL, -1LL);
  }

  uint64_t v12 = *(void *)(v0 + 368);
  uint64_t v13 = *(void *)(v0 + 360);
  uint64_t v15 = *(void *)(v0 + 328);
  uint64_t v14 = *(void *)(v0 + 336);
  uint64_t v16 = *(void *)(v0 + 304);
  uint64_t v17 = *(void *)(v0 + 288);
  swift_task_dealloc(*(void *)(v0 + 376));
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004060D0()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 392);
  *(void *)(*v1 + 400) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_1004068EC;
  }
  else {
    uint64_t v4 = sub_100406134;
  }
  return swift_task_switch(v4, *(void *)(v2 + 256), 0LL);
}

uint64_t sub_100406134()
{
  uint64_t v1 = *(void *)(v0 + 368);
  uint64_t v2 = *(void *)(v0 + 360);
  uint64_t v4 = *(void *)(v0 + 328);
  uint64_t v3 = *(void *)(v0 + 336);
  uint64_t v5 = *(void *)(v0 + 304);
  uint64_t v6 = *(void *)(v0 + 288);
  swift_task_dealloc(*(void *)(v0 + 376));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004061C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 408LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 256LL);
  *(void *)(*(void *)v1 + 416LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100406224, v3, 0LL);
}

uint64_t sub_100406224()
{
  uint64_t v1 = *(void *)(v0 + 416);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 136));
  if (v1) {
    return swift_task_switch(sub_1004063A8, *(void *)(v0 + 416), 0LL);
  }
  if (qword_10099B0C0 != -1) {
    swift_once(&qword_10099B0C0, sub_100095C3C);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2A118);
  uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v7 = 0;
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Unable to get BeaconStoreActor!", v7, 2u);
    swift_slowDealloc(v7, -1LL, -1LL);
  }

  uint64_t v8 = *(void *)(v0 + 376);

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 96));
  sub_100018C68(v8, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  uint64_t v9 = *(void *)(v0 + 368);
  uint64_t v10 = *(void *)(v0 + 360);
  uint64_t v12 = *(void *)(v0 + 328);
  uint64_t v11 = *(void *)(v0 + 336);
  uint64_t v13 = *(void *)(v0 + 304);
  uint64_t v14 = *(void *)(v0 + 288);
  swift_task_dealloc(*(void *)(v0 + 376));
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004063A8()
{
  uint64_t v1 = v0[52];
  uint64_t v2 = v0[47];
  uint64_t v4 = v0[35];
  uint64_t v3 = v0[36];
  uint64_t v5 = v0[33];
  uint64_t v6 = v0[34];
  v0[53] = *(void *)(v1 + 136);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 16))(v3, v2, v5);
  uint64_t v7 = *(unsigned __int8 *)(v6 + 80);
  uint64_t v8 = (v7 + 24) & ~v7;
  uint64_t v9 = swift_allocObject(&unk_100958098, v8 + v4, v7 | 7);
  v0[54] = v9;
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v1;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v6 + 32))(v9 + v8, v3, v5);
  swift_retain();
  return swift_task_switch(sub_100406458, 0LL, 0LL);
}

uint64_t sub_100406458()
{
  uint64_t v2 = v0[53];
  uint64_t v1 = v0[54];
  uint64_t v3 = (void *)swift_task_alloc(48LL);
  v0[55] = v3;
  v3[2] = v2;
  v3[3] = sub_1001B2A64;
  v3[4] = v1;
  uint64_t v4 = (void *)swift_task_alloc(async function pointer to withCheckedContinuation<A>(isolation:function:_:)[1]);
  v0[56] = v4;
  *uint64_t v4 = v0;
  v4[1] = sub_100406500;
  return withCheckedContinuation<A>(isolation:function:_:)( v0[38],  0LL,  0LL,  0xD000000000000012LL,  0x8000000100850F40LL,  sub_100117968,  v3,  v0[37]);
}

uint64_t sub_100406500()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 440LL);
  uint64_t v2 = *(void *)(*(void *)v0 + 432LL);
  uint64_t v3 = *(void *)(*(void *)v0 + 256LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 448LL));
  swift_release(v2);
  swift_task_dealloc(v1);
  return swift_task_switch(sub_100406574, v3, 0LL);
}

uint64_t sub_100406574()
{
  uint64_t v1 = *(void *)(v0 + 312);
  uint64_t v2 = *(void *)(v0 + 304);
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 + 320) + 48LL))(v2, 1LL, v1) == 1)
  {
    sub_100015794(v2, (uint64_t *)&unk_1009A9C30);
    if (qword_10099B0C0 != -1) {
      swift_once(&qword_10099B0C0, sub_100095C3C);
    }
    uint64_t v3 = type metadata accessor for Logger(0LL);
    uint64_t v4 = sub_10000A720(v3, (uint64_t)qword_100A2A118);
    uint64_t v5 = (os_log_s *)Logger.logObject.getter(v4);
    os_log_type_t v6 = static os_log_type_t.info.getter(v5);
    if (os_log_type_enabled(v5, v6))
    {
      uint64_t v7 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v7 = 0;
      _os_log_impl( (void *)&_mh_execute_header,  v5,  v6,  "Not updating key sync metadata for unreconciled advertisement.",  v7,  2u);
      swift_slowDealloc(v7, -1LL, -1LL);
    }

    uint64_t v8 = *(void *)(v0 + 416);
    uint64_t v9 = *(void *)(v0 + 376);

    swift_release(v8);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 96));
    sub_100018C68(v9, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    uint64_t v10 = *(void *)(v0 + 368);
    uint64_t v11 = *(void *)(v0 + 360);
    uint64_t v13 = *(void *)(v0 + 328);
    uint64_t v12 = *(void *)(v0 + 336);
    uint64_t v14 = *(void *)(v0 + 304);
    uint64_t v15 = *(void *)(v0 + 288);
    swift_task_dealloc(*(void *)(v0 + 376));
    swift_task_dealloc(v10);
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v17 = *(void *)(v0 + 384);
    uint64_t v18 = *(void *)(v0 + 328);
    uint64_t v19 = *(void *)(v0 + 248);
    sub_10002218C(v2, v18, type metadata accessor for OwnedBeaconRecord);
    uint64_t v20 = v19 + *(int *)(v17 + 44);
    *(void *)(v0 + 40) = v1;
    *(void *)(v0 + 48) = sub_100007864( (unint64_t *)&qword_10099D000,  type metadata accessor for OwnedBeaconRecord,  (uint64_t)&unk_10080B120);
    uint64_t v21 = sub_10000A7C8((void *)(v0 + 16));
    sub_10001DC4C(v18, (uint64_t)v21, type metadata accessor for OwnedBeaconRecord);
    uint64_t v22 = (void *)swift_task_alloc(dword_1009BC85C);
    *(void *)(v0 + 456) = v22;
    *uint64_t v22 = v0;
    v22[1] = sub_1004067BC;
    return sub_1006C75A0(v0 + 96, *(_BYTE *)(v0 + 473), v20, v0 + 16);
  }

uint64_t sub_1004067BC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 456);
  *(void *)(*v1 + 464) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 256);
    uint64_t v5 = sub_100406CB0;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 256);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v2 + 16));
    uint64_t v5 = sub_100406830;
    uint64_t v4 = v6;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_100406830()
{
  uint64_t v1 = *(void *)(v0 + 376);
  uint64_t v2 = *(void *)(v0 + 328);
  swift_release(*(void *)(v0 + 416));
  sub_100018C68(v2, type metadata accessor for OwnedBeaconRecord);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 96));
  sub_100018C68(v1, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  uint64_t v3 = *(void *)(v0 + 368);
  uint64_t v4 = *(void *)(v0 + 360);
  uint64_t v6 = *(void *)(v0 + 328);
  uint64_t v5 = *(void *)(v0 + 336);
  uint64_t v7 = *(void *)(v0 + 304);
  uint64_t v8 = *(void *)(v0 + 288);
  swift_task_dealloc(*(void *)(v0 + 376));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004068EC()
{
  uint64_t v1 = *(void *)(v0 + 400);
  *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v1;
  swift_errorRetain(v1);
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  if ((swift_dynamicCast(v0 + 472, v0 + 216, v2, &type metadata for ObservationStore.ObservationStoreError, 0LL) & 1) != 0
    && *(_BYTE *)(v0 + 472) == 1)
  {
    sub_100018C68(*(void *)(v0 + 376), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    swift_errorRelease(v1);
    swift_errorRelease(*(void *)(v0 + 216));
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 216));
    if (qword_10099B0C0 != -1) {
      swift_once(&qword_10099B0C0, sub_100095C3C);
    }
    uint64_t v3 = *(void *)(v0 + 376);
    uint64_t v4 = *(void *)(v0 + 360);
    uint64_t v5 = type metadata accessor for Logger(0LL);
    sub_10000A720(v5, (uint64_t)qword_100A2A118);
    sub_10001DC4C(v3, v4, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    swift_errorRetain(v1);
    uint64_t v6 = swift_errorRetain(v1);
    uint64_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.error.getter(v7);
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = *(void *)(v0 + 376);
    uint64_t v11 = *(void *)(v0 + 360);
    if (v9)
    {
      uint64_t v26 = *(void *)(v0 + 264);
      uint64_t v12 = swift_slowAlloc(32LL, -1LL);
      uint64_t v13 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v27 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v12 = 138543875;
      uint64_t v28 = v27;
      swift_errorRetain(v1);
      uint64_t v14 = _swift_stdlib_bridgeErrorToNSError(v1);
      *(void *)(v0 + 224) = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v12 + 4, v12 + 12);
      *uint64_t v13 = v14;
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      *(_WORD *)(v12 + 12) = 2160;
      *(void *)(v0 + 232) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v12 + 14, v12 + 22);
      *(_WORD *)(v12 + 22) = 2081;
      uint64_t v15 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v16 = dispatch thunk of CustomStringConvertible.description.getter(v26, v15);
      *(void *)(v0 + 240) = sub_1003F11D4(v16, v17, &v28);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v12 + 24, v12 + 32);
      swift_bridgeObjectRelease();
      sub_100018C68(v11, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Failed to update key sync metadata %{public}@ for %{private,mask.hash}s.",  (uint8_t *)v12,  0x20u);
      uint64_t v18 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v13, 1LL, v18);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_arrayDestroy(v27, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v27, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);

      swift_errorRelease(v1);
    }

    else
    {

      sub_100018C68(v11, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      swift_errorRelease(v1);
      swift_errorRelease(v1);
      swift_errorRelease(v1);
    }

    sub_100018C68(v10, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  }

  uint64_t v19 = *(void *)(v0 + 368);
  uint64_t v20 = *(void *)(v0 + 360);
  uint64_t v22 = *(void *)(v0 + 328);
  uint64_t v21 = *(void *)(v0 + 336);
  uint64_t v23 = *(void *)(v0 + 304);
  uint64_t v24 = *(void *)(v0 + 288);
  swift_task_dealloc(*(void *)(v0 + 376));
  swift_task_dealloc(v19);
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100406CB0()
{
  uint64_t v1 = *(void *)(v0 + 328);
  swift_release(*(void *)(v0 + 416));
  sub_100018C68(v1, type metadata accessor for OwnedBeaconRecord);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 96));
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  uint64_t v2 = *(void *)(v0 + 464);
  *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v2;
  swift_errorRetain(v2);
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_1009A5470);
  if ((swift_dynamicCast(v0 + 472, v0 + 216, v3, &type metadata for ObservationStore.ObservationStoreError, 0LL) & 1) != 0
    && *(_BYTE *)(v0 + 472) == 1)
  {
    sub_100018C68(*(void *)(v0 + 376), type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    swift_errorRelease(v2);
    swift_errorRelease(*(void *)(v0 + 216));
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 216));
    if (qword_10099B0C0 != -1) {
      swift_once(&qword_10099B0C0, sub_100095C3C);
    }
    uint64_t v4 = *(void *)(v0 + 376);
    uint64_t v5 = *(void *)(v0 + 360);
    uint64_t v6 = type metadata accessor for Logger(0LL);
    sub_10000A720(v6, (uint64_t)qword_100A2A118);
    sub_10001DC4C(v4, v5, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
    swift_errorRetain(v2);
    uint64_t v7 = swift_errorRetain(v2);
    os_log_type_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.error.getter(v8);
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v11 = *(void *)(v0 + 376);
    uint64_t v12 = *(void *)(v0 + 360);
    if (v10)
    {
      uint64_t v27 = *(void *)(v0 + 264);
      uint64_t v13 = swift_slowAlloc(32LL, -1LL);
      uint64_t v14 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      uint64_t v28 = swift_slowAlloc(32LL, -1LL);
      *(_DWORD *)uint64_t v13 = 138543875;
      uint64_t v29 = v28;
      swift_errorRetain(v2);
      uint64_t v15 = _swift_stdlib_bridgeErrorToNSError(v2);
      *(void *)(v0 + 224) = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v13 + 4, v13 + 12);
      *uint64_t v14 = v15;
      swift_errorRelease(v2);
      swift_errorRelease(v2);
      *(_WORD *)(v13 + 12) = 2160;
      *(void *)(v0 + 232) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 232, v0 + 240, v13 + 14, v13 + 22);
      *(_WORD *)(v13 + 22) = 2081;
      uint64_t v16 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v17 = dispatch thunk of CustomStringConvertible.description.getter(v27, v16);
      *(void *)(v0 + 240) = sub_1003F11D4(v17, v18, &v29);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v13 + 24, v13 + 32);
      swift_bridgeObjectRelease();
      sub_100018C68(v12, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      _os_log_impl( (void *)&_mh_execute_header,  v8,  v9,  "Failed to update key sync metadata %{public}@ for %{private,mask.hash}s.",  (uint8_t *)v13,  0x20u);
      uint64_t v19 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v14, 1LL, v19);
      swift_slowDealloc(v14, -1LL, -1LL);
      swift_arrayDestroy(v28, 1LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v28, -1LL, -1LL);
      swift_slowDealloc(v13, -1LL, -1LL);

      swift_errorRelease(v2);
    }

    else
    {

      sub_100018C68(v12, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
      swift_errorRelease(v2);
      swift_errorRelease(v2);
      swift_errorRelease(v2);
    }

    sub_100018C68(v11, type metadata accessor for ObservedAdvertisement.BeaconIndexInformation);
  }

  uint64_t v20 = *(void *)(v0 + 368);
  uint64_t v21 = *(void *)(v0 + 360);
  uint64_t v23 = *(void *)(v0 + 328);
  uint64_t v22 = *(void *)(v0 + 336);
  uint64_t v24 = *(void *)(v0 + 304);
  uint64_t v25 = *(void *)(v0 + 288);
  swift_task_dealloc(*(void *)(v0 + 376));
  swift_task_dealloc(v20);
  swift_task_dealloc(v21);
  swift_task_dealloc(v22);
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_1004070A8@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, BOOL *a3@<X8>)
{
  uint64_t v6 = type metadata accessor for UUID(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  __chkstk_darwin(v6);
  uint64_t v9 = sub_100004AEC(&qword_1009A9BF0);
  uint64_t result = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v18 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  if (a1)
  {
    uint64_t v13 = type metadata accessor for TaskPriority(0LL);
    (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v12, 1LL, 1LL, v13);
    (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))( (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  a2,  v6);
    uint64_t v14 = *(unsigned __int8 *)(v7 + 80);
    uint64_t v15 = (v14 + 40) & ~v14;
    uint64_t v16 = (char *)swift_allocObject(&unk_100958070, v15 + v8, v14 | 7);
    *((void *)v16 + 2) = 0LL;
    *((void *)v16 + 3) = 0LL;
    *((void *)v16 + 4) = a1;
    (*(void (**)(char *, char *, uint64_t))(v7 + 32))( &v16[v15],  (char *)&v18 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL),  v6);
    swift_retain();
    uint64_t v17 = sub_1003EDB00((uint64_t)v12, (uint64_t)&unk_1009AD190, (uint64_t)v16);
    uint64_t result = swift_release(v17);
  }

  *a3 = a1 == 0;
  return result;
}

uint64_t sub_100407208(uint64_t a1, uint64_t a2, uint64_t a3)
{
  v4[17] = a3;
  v4[18] = v3;
  v4[15] = a1;
  v4[16] = a2;
  uint64_t v5 = type metadata accessor for KeySyncMetadata(0LL);
  v4[19] = v5;
  v4[20] = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_100407268, v3, 0LL);
}

uint64_t sub_100407268()
{
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 168) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_100407354;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_100407354(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 168LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 144LL);
  *(void *)(*(void *)v1 + 176LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1004073B4, v3, 0LL);
}

uint64_t sub_1004073B4()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 176))
  {
    uint64_t v3 = *(int **)(v0 + 152);
    uint64_t v2 = *(void *)(v0 + 160);
    uint64_t v5 = *(void *)(v0 + 128);
    uint64_t v4 = *(void *)(v0 + 136);
    uint64_t v6 = *(void *)(v0 + 120);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v7 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v7 - 8) + 16LL))(v2, v4, v7);
    uint64_t v8 = (void *)(v2 + v3[6]);
    void v8[3] = &type metadata for PrimaryIndex;
    v8[4] = sub_1000868E4();
    *uint64_t v8 = v6;
    uint64_t v9 = v2 + v3[7];
    uint64_t v10 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 16LL))(v9, v5, v10);
    *(_BYTE *)(v2 + v3[5]) = 1;
    uint64_t v11 = (void *)swift_task_alloc(dword_1009BCDBC);
    *(void *)(v0 + 184) = v11;
    *uint64_t v11 = v0;
    v11[1] = sub_100407578;
    return sub_1006D55B8(*(void *)(v0 + 160));
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    if (qword_10099B0C0 != -1) {
      swift_once(&qword_10099B0C0, sub_100095C3C);
    }
    uint64_t v13 = type metadata accessor for Logger(0LL);
    uint64_t v14 = sub_10000A720(v13, (uint64_t)qword_100A2A118);
    uint64_t v15 = (os_log_s *)Logger.logObject.getter(v14);
    os_log_type_t v16 = static os_log_type_t.error.getter(v15);
    if (os_log_type_enabled(v15, v16))
    {
      uint64_t v17 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v17 = 0;
      _os_log_impl((void *)&_mh_execute_header, v15, v16, "No ObservationStoreService available.", v17, 2u);
      swift_slowDealloc(v17, -1LL, -1LL);
    }

    swift_task_dealloc(*(void *)(v0 + 160));
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100407578()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 184);
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_10040762C;
  }
  else {
    uint64_t v4 = sub_1004075DC;
  }
  return swift_task_switch(v4, *(void *)(v2 + 144), 0LL);
}

uint64_t sub_1004075DC()
{
  uint64_t v1 = *(void *)(v0 + 160);
  swift_release(*(void *)(v0 + 176));
  sub_100018C68(v1, type metadata accessor for KeySyncMetadata);
  swift_task_dealloc(*(void *)(v0 + 160));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10040762C()
{
  uint64_t v1 = *(void *)(v0 + 160);
  swift_release(*(void *)(v0 + 176));
  sub_100018C68(v1, type metadata accessor for KeySyncMetadata);
  swift_task_dealloc(v1);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10040767C@<X0>(uint64_t result@<X0>, void *a2@<X8>)
{
  if (result)
  {
    uint64_t v3 = *(void *)(result + 256);
    uint64_t v4 = *(void *)(v3 + OBJC_IVAR____TtC12searchpartyd11BeaconStore_beaconKeyManagerLock);
    uint64_t v5 = type metadata accessor for BeaconKeyManager(0LL);
    uint64_t result = OSAllocatedUnfairLock.callAsFunction<A>(_:)(sub_10014F014, v3, v4, (char *)&type metadata for () + 8, v5);
    uint64_t v6 = v7;
  }

  else
  {
    uint64_t v6 = 0LL;
  }

  *a2 = v6;
  return result;
}

uint64_t sub_100407700@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a1)
  {
    void v12[2] = a1;
    uint64_t v12[3] = a2;
    v12[4] = a3;
    uint64_t v5 = sub_100004AEC((uint64_t *)&unk_1009B9310);
    OS_dispatch_queue.sync<A>(execute:)(sub_100407D10, v12, v5);
    uint64_t v6 = v13;
    uint64_t v7 = *(void *)(v13 + 16);
    uint64_t v8 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
    uint64_t v9 = *(void *)(v8 - 8);
    if (v7)
    {
      sub_10001DC4C( v6 + ((*(unsigned __int8 *)(v9 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v9 + 80)),  a4,  type metadata accessor for BeaconKeyManager.IndexInformation);
      (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v9 + 56))(a4, 0LL, 1LL, v8);
    }

    else
    {
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v9 + 56))(a4, 1LL, 1LL, v8);
    }

    return swift_bridgeObjectRelease();
  }

  else
  {
    uint64_t v10 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
    return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))( a4,  1LL,  1LL,  v10);
  }

uint64_t sub_100407830@<X0>(uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X8>)
{
  if (a1) {
    return sub_10079C18C(a2, a3, a4);
  }
  uint64_t v6 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v6 - 8) + 56LL))(a4, 1LL, 1LL, v6);
}

uint64_t sub_10040788C(uint64_t a1)
{
  return sub_100453280(a1, v1);
}

uint64_t sub_100407894()
{
  return swift_deallocObject(v0, 40LL, 7LL);
}

uint64_t sub_1004078C0(uint64_t a1)
{
  uint64_t v4 = v1[2];
  uint64_t v5 = v1[3];
  uint64_t v6 = v1[4];
  uint64_t v7 = (void *)swift_task_alloc(dword_1009AD114);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v7;
  *uint64_t v7 = v2;
  v7[1] = sub_100015D58;
  return sub_1003FA6CC(a1, v4, v5, v6);
}

uint64_t sub_10040792C(uint64_t a1)
{
  return sub_10006B2A0(a1, v1);
}

uint64_t sub_100407934()
{
  uint64_t v1 = (int *)type metadata accessor for DiscoveredObject(0LL);
  uint64_t v2 = *((void *)v1 - 1);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  swift_release();
  uint64_t v6 = v0 + v4;
  unint64_t v7 = *(void *)(v0 + v4 + 16);
  if (v7 >> 60 != 15) {
    sub_100016F9C(*(void *)(v6 + 8), v7);
  }
  uint64_t v8 = v4 + v5;
  uint64_t v9 = v6 + v1[7];
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v9, v10);
  uint64_t v11 = v6 + v1[8];
  uint64_t v12 = type metadata accessor for MACAddress(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v12 - 8) + 8LL))(v11, v12);
  sub_1000869A4(*(void *)(v6 + v1[9]), *(void *)(v6 + v1[9] + 8));
  sub_100016F9C(*(void *)(v6 + v1[14]), *(void *)(v6 + v1[14] + 8));
  return swift_deallocObject(v0, v8, v3 | 7);
}

uint64_t sub_100407A1C()
{
  uint64_t v2 = *(unsigned __int8 *)(*(void *)(type metadata accessor for DiscoveredObject(0LL) - 8) + 80LL);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = v0 + ((v2 + 24) & ~v2);
  uint64_t v5 = (void *)swift_task_alloc(dword_1009AD144);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v5;
  *uint64_t v5 = v1;
  v5[1] = sub_100015D58;
  return sub_1003FADDC(v3, v4);
}

uint64_t sub_100407A88()
{
  uint64_t v1 = *(void *)(type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL) - 8);
  uint64_t v2 = *(unsigned __int8 *)(v1 + 80);
  uint64_t v3 = (v2 + 24) & ~v2;
  uint64_t v4 = v3 + *(void *)(v1 + 64);
  uint64_t v5 = v2 | 7;
  swift_release();
  uint64_t v6 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v6 - 8) + 8LL))(v0 + v3, v6);
  return swift_deallocObject(v0, v4, v5);
}

uint64_t sub_100407B00@<X0>(BOOL *a1@<X8>)
{
  return sub_1004070A8(*(void *)(v1 + 16), v1 + ((v3 + 24) & ~v3), a1);
}

uint64_t sub_100407B40()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 40) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release(*(void *)(v0 + 32));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100407BBC(uint64_t a1)
{
  uint64_t v4 = *(unsigned __int8 *)(*(void *)(type metadata accessor for UUID(0LL) - 8) + 80LL);
  uint64_t v5 = v1[2];
  uint64_t v6 = v1[3];
  uint64_t v7 = v1[4];
  uint64_t v8 = (uint64_t)v1 + ((v4 + 40) & ~v4);
  uint64_t v9 = (void *)swift_task_alloc(dword_1009A7F6C);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v9;
  *uint64_t v9 = v2;
  v9[1] = sub_1000159BC;
  return sub_100291DF8(a1, v5, v6, v7, v8);
}

uint64_t sub_100407C50()
{
  uint64_t v1 = type metadata accessor for UUID(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v4 + *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  swift_release(*(void *)(v0 + 16));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v5, v6);
}

uint64_t sub_100407CC4()
{
  return swift_deallocObject(v0, 24LL, 7LL);
}

uint64_t sub_100407CE8@<X0>(void *a1@<X8>)
{
  return sub_10040767C(*(void *)(v1 + 16), a1);
}

uint64_t sub_100407CF4@<X0>(uint64_t a1@<X8>)
{
  return sub_100407830(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_100407D04@<X0>(uint64_t a1@<X8>)
{
  return sub_100407700(v1[2], v1[3], v1[4], a1);
}

uint64_t sub_100407D10@<X0>(void *a1@<X8>)
{
  return sub_10079B988(*(void *)(v1 + 16), *(void *)(v1 + 24), *(void *)(v1 + 32), a1);
}

uint64_t sub_100407D2C(uint64_t a1)
{
  v2[15] = a1;
  v2[16] = v1;
  unint64_t v4 = (*(void *)(*(void *)(sub_100004AEC(&qword_10099E770) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[17] = swift_task_alloc(v4);
  v2[18] = swift_task_alloc(v4);
  uint64_t v5 = type metadata accessor for ObservedAdvertisement(0LL);
  v2[19] = v5;
  unint64_t v6 = (*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[20] = swift_task_alloc(v6);
  v2[21] = swift_task_alloc(v6);
  v2[22] = swift_task_alloc(v6);
  v2[23] = swift_task_alloc(v6);
  v2[24] = swift_task_alloc(v6);
  v2[25] = swift_task_alloc(v6);
  v2[26] = swift_task_alloc(v6);
  uint64_t v7 = type metadata accessor for BeaconKeyManager.IndexInformation(0LL);
  v2[27] = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  v2[28] = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[29] = swift_task_alloc(v9);
  v2[30] = swift_task_alloc(v9);
  v2[31] = swift_task_alloc(v9);
  v2[32] = swift_task_alloc(v9);
  unint64_t v10 = (*(void *)(*(void *)(sub_100004AEC(&qword_1009AC230) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[33] = swift_task_alloc(v10);
  v2[34] = swift_task_alloc(v10);
  unint64_t v11 = (*(void *)(*(void *)(sub_100004AEC(&qword_1009AA730) - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[35] = swift_task_alloc(v11);
  v2[36] = swift_task_alloc(v11);
  uint64_t v12 = (void *)swift_task_alloc(dword_1009AD1B4);
  v2[37] = v12;
  *uint64_t v12 = v2;
  v12[1] = sub_100407EE0;
  return sub_1003FEC70(a1);
}

uint64_t sub_100407EE0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 128LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 296LL));
  return swift_task_switch(sub_100407F38, v1, 0LL);
}

uint64_t sub_100407F38()
{
  uint64_t v1 = v0[15];
  uint64_t v3 = *(void *)(v1 + 16);
  uint64_t v2 = *(void *)(v1 + 24);
  unint64_t v4 = (void *)swift_task_alloc(dword_1009AD154);
  v0[38] = v4;
  *unint64_t v4 = v0;
  v4[1] = sub_100407FA0;
  return sub_1003FCB44(v0[34], v3, v2);
}

uint64_t sub_100407FA0()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 128LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 304LL));
  return swift_task_switch(sub_100407FF8, v1, 0LL);
}

uint64_t sub_100407FF8()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 216);
  uint64_t v3 = *(void *)(v0 + 224);
  sub_10001581C(*(void *)(v0 + 272), v1, &qword_1009AC230);
  int v4 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v3 + 48))(v1, 1LL, v2);
  uint64_t v5 = *(void *)(v0 + 264);
  if (v4 == 1)
  {
    uint64_t v6 = *(void *)(v0 + 120);
    sub_100015794(v5, &qword_1009AC230);
    if ((*(_BYTE *)(v6 + 31) & 0x20) != 0
      || (uint64_t v7 = *(void *)(v0 + 136),
          sub_10001581C(*(void *)(v0 + 120) + *(int *)(*(void *)(v0 + 152) + 48LL), v7, &qword_10099E770),
          uint64_t v8 = type metadata accessor for ObservedAdvertisement.Location(0LL),
          int v9 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v8 - 8) + 48LL))(v7, 1LL, v8),
          sub_100015794(v7, &qword_10099E770),
          v9 == 1))
    {
      sub_100015794(*(void *)(v0 + 272), &qword_1009AC230);
      uint64_t v10 = *(void *)(v0 + 280);
      uint64_t v12 = *(void *)(v0 + 264);
      uint64_t v11 = *(void *)(v0 + 272);
      uint64_t v14 = *(void *)(v0 + 248);
      uint64_t v13 = *(void *)(v0 + 256);
      uint64_t v15 = *(void *)(v0 + 232);
      uint64_t v16 = *(void *)(v0 + 240);
      uint64_t v18 = *(void *)(v0 + 200);
      uint64_t v17 = *(void *)(v0 + 208);
      uint64_t v35 = *(void *)(v0 + 192);
      uint64_t v36 = *(void *)(v0 + 184);
      uint64_t v37 = *(void *)(v0 + 176);
      uint64_t v38 = *(void *)(v0 + 168);
      uint64_t v40 = *(void *)(v0 + 160);
      uint64_t v42 = *(void *)(v0 + 144);
      uint64_t v44 = *(void *)(v0 + 136);
      swift_task_dealloc(*(void *)(v0 + 288));
      swift_task_dealloc(v10);
      swift_task_dealloc(v11);
      swift_task_dealloc(v12);
      swift_task_dealloc(v13);
      swift_task_dealloc(v14);
      swift_task_dealloc(v16);
      swift_task_dealloc(v15);
      swift_task_dealloc(v17);
      swift_task_dealloc(v18);
      swift_task_dealloc(v35);
      swift_task_dealloc(v36);
      swift_task_dealloc(v37);
      swift_task_dealloc(v38);
      swift_task_dealloc(v40);
      swift_task_dealloc(v42);
      swift_task_dealloc(v44);
      return (*(uint64_t (**)(void))(v0 + 8))();
    }

    else
    {
      uint64_t v21 = *(void *)(v0 + 288);
      uint64_t v22 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL))(v21, 1LL, 1LL, v22);
      uint64_t v23 = *(void *)(v0 + 288);
      uint64_t v25 = *(int **)(v0 + 152);
      uint64_t v24 = *(void *)(v0 + 160);
      uint64_t v26 = *(void *)(v0 + 120);
      char v27 = *(_BYTE *)(v26 + 9);
      uint64_t v28 = *(void *)(v26 + 16);
      uint64_t v29 = *(void *)(v26 + 24);
      __int16 v45 = *(_WORD *)(v26 + 32);
      char v43 = *(_BYTE *)(v26 + 34);
      char v41 = *(_BYTE *)(v26 + 35);
      int v39 = *(_DWORD *)(v26 + 36);
      uint64_t v30 = v25[11];
      uint64_t v31 = v26 + v30;
      uint64_t v32 = v24 + v30;
      uint64_t v33 = type metadata accessor for Date(0LL);
      (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v33 - 8) + 16LL))(v32, v31, v33);
      LOBYTE(v31) = *(_BYTE *)(v26 + v25[14]);
      sub_10001581C(v26 + v25[12], v24 + v25[12], &qword_10099E770);
      sub_10001581C(v23, v24 + v25[13], &qword_1009AA730);
      *(void *)uint64_t v24 = 0LL;
      *(_BYTE *)(v24 + 8) = 1;
      *(_BYTE *)(v24 + 9) = v27;
      *(void *)(v24 + swift_weakDestroy(v0 + 16) = v28;
      *(void *)(v24 + 24) = v29;
      *(_WORD *)(v24 + 32) = v45;
      *(_BYTE *)(v24 + 34) = v43;
      *(_BYTE *)(v24 + 35) = v41;
      *(_DWORD *)(v24 + 36) = v39;
      *(_BYTE *)(v24 + v25[14]) = v31;
      sub_10008699C(v28, v29);
      uint64_t v34 = (void *)swift_task_alloc(dword_1009AD1BC);
      *(void *)(v0 + 320) = v34;
      *uint64_t v34 = v0;
      v34[1] = sub_100409028;
      return sub_1003FF878(*(void *)(v0 + 160));
    }
  }

  else
  {
    sub_10002218C(v5, *(void *)(v0 + 256), type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v20 = (void *)swift_task_alloc(dword_1009AD164);
    *(void *)(v0 + 312) = v20;
    *uint64_t v20 = v0;
    v20[1] = sub_10040837C;
    return sub_1003FD97C(*(void *)(v0 + 256));
  }

uint64_t sub_10040837C(char a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 312LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 128LL);
  *(_BYTE *)(*(void *)v1 + 349LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_1004083DC, v3, 0LL);
}

uint64_t sub_1004083DC()
{
  if (*(_BYTE *)(v0 + 349) == 1)
  {
    uint64_t v2 = *(void *)(v0 + 280);
    uint64_t v1 = *(void *)(v0 + 288);
    uint64_t v3 = *(void *)(v0 + 256);
    uint64_t v119 = *(void *)(v0 + 216);
    int v4 = (void *)(v3 + *(int *)(v119 + 20));
    uint64_t v5 = v4[3];
    uint64_t v6 = v4[4];
    sub_100012ED8(v4, v5);
    LOBYTE(v5) = sub_1005F5498(v5, v6);
    uint64_t v7 = v4[3];
    uint64_t v8 = v4[4];
    sub_100012ED8(v4, v7);
    dispatch thunk of RawRepresentable.rawValue.getter((void *)(v0 + 48), v7, *(void *)(v8 + 56));
    uint64_t v9 = *(void *)(v0 + 48);
    uint64_t v122 = type metadata accessor for UUID(0LL);
    (*(void (**)(uint64_t, uint64_t))(*(void *)(v122 - 8) + 16LL))(v2, v3);
    uint64_t v10 = type metadata accessor for ObservedAdvertisement.BeaconIndexInformation(0LL);
    *(_BYTE *)(v2 + *(int *)(v10 + 20)) = v5;
    *(void *)(v2 + *(int *)(v10 + swift_release(*(void *)(v0 + 24)) = v9;
    (*(void (**)(uint64_t, void, uint64_t, uint64_t))(*(void *)(v10 - 8) + 56LL))(v2, 0LL, 1LL, v10);
    sub_100015750(v2, v1, &qword_1009AA730);
    if (qword_10099B400 != -1) {
      swift_once(&qword_10099B400, sub_1003F889C);
    }
    uint64_t v11 = *(void *)(v0 + 120);
    uint64_t v13 = *(void *)(v0 + 248);
    uint64_t v12 = *(void *)(v0 + 256);
    uint64_t v125 = *(void *)(v0 + 240);
    uint64_t v15 = *(void *)(v0 + 200);
    uint64_t v14 = *(void *)(v0 + 208);
    uint64_t v16 = *(void *)(v0 + 184);
    uint64_t v17 = *(void *)(v0 + 192);
    uint64_t v130 = *(void *)(v0 + 176);
    uint64_t v18 = type metadata accessor for Logger(0LL);
    sub_10000A720(v18, (uint64_t)qword_100A2A928);
    sub_10001DC4C(v11, v14, type metadata accessor for ObservedAdvertisement);
    sub_10001DC4C(v11, v15, type metadata accessor for ObservedAdvertisement);
    sub_10001DC4C(v11, v17, type metadata accessor for ObservedAdvertisement);
    sub_10001DC4C(v11, v16, type metadata accessor for ObservedAdvertisement);
    sub_10001DC4C(v12, v13, type metadata accessor for BeaconKeyManager.IndexInformation);
    sub_10001DC4C(v12, v125, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v19 = sub_10001DC4C(v11, v130, type metadata accessor for ObservedAdvertisement);
    uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
    os_log_type_t v21 = static os_log_type_t.info.getter(v20);
    if (os_log_type_enabled(v20, v21))
    {
      os_log_type_t v116 = v21;
      uint64_t v126 = v20;
      uint64_t v110 = v0 + 88;
      uint64_t v111 = v0 + 96;
      uint64_t v22 = *(void *)(v0 + 200);
      uint64_t v23 = *(void *)(v0 + 208);
      uint64_t v112 = v0 + 104;
      uint64_t v113 = v0 + 112;
      uint64_t v108 = *(void *)(v0 + 192);
      uint64_t v24 = swift_slowAlloc(88LL, -1LL);
      uint64_t v114 = swift_slowAlloc(192LL, -1LL);
      uint64_t v134 = v114;
      *(_DWORD *)uint64_t v24 = 141560067;
      *(void *)(v0 + 56) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 56, v0 + 64, v24 + 4, v24 + 12);
      *(_WORD *)(v24 + 12) = 2081;
      uint64_t v25 = *(void *)(v23 + 16);
      uint64_t v26 = *(void *)(v23 + 24);
      sub_10008699C(v25, v26);
      uint64_t v27 = sub_1000AFD00(v25, v26);
      unint64_t v29 = v28;
      sub_1000869A4(v25, v26);
      *(void *)(v0 + 64) = sub_1003F11D4(v27, v29, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 64, v0 + 72, v24 + 14, v24 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v23, type metadata accessor for ObservedAdvertisement);
      *(_WORD *)(v24 + 22) = 2082;
      int v30 = sub_100041014(*(_BYTE *)(v22 + 32) & 0xB);
      uint64_t v31 = sub_1000409B4(v30 & 0x10101FF);
      *(void *)(v0 + 72) = sub_1003F11D4(v31, v32, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 72, v0 + 80, v24 + 24, v24 + 32);
      swift_bridgeObjectRelease();
      sub_100018C68(v22, type metadata accessor for ObservedAdvertisement);
      *(_WORD *)(v24 + 32) = 2082;
      if ((*(_BYTE *)(v108 + 35) & 1) != 0)
      {
        unint64_t v33 = 0xE400000000000000LL;
        uint64_t v34 = 1701736302LL;
      }

      else
      {
        *(_BYTE *)(v0 + 348) = *(_BYTE *)(*(void *)(v0 + 192) + 34LL);
        unint64_t v74 = sub_100041584();
        uint64_t v75 = FixedWidthInteger.data.getter(&type metadata for UInt8, v74);
        unint64_t v77 = v76;
        uint64_t v34 = Data.hexString.getter(v75, v76);
        unint64_t v33 = v78;
        sub_100016F9C(v75, v77);
      }

      uint64_t v79 = *(void *)(v0 + 248);
      uint64_t v80 = *(void *)(v0 + 184);
      uint64_t v81 = *(void *)(v0 + 192);
      uint64_t v107 = *(void *)(v0 + 152);
      uint64_t v109 = *(void *)(v0 + 176);
      uint64_t v105 = *(void *)(v0 + 240);
      uint64_t v106 = *(void *)(v0 + 144);
      *(void *)(v0 + 80) = sub_1003F11D4(v34, v33, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 80, v110, v24 + 34, v24 + 42);
      swift_bridgeObjectRelease();
      sub_100018C68(v81, type metadata accessor for ObservedAdvertisement);
      *(_WORD *)(v24 + 42) = 2082;
      uint64_t v82 = sub_100040BA4(*(unsigned __int8 *)(v80 + 32));
      *(void *)(v0 + 88) = sub_1003F11D4(v82, v83, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v110, v111, v24 + 44, v24 + 52);
      swift_bridgeObjectRelease();
      sub_100018C68(v80, type metadata accessor for ObservedAdvertisement);
      *(_WORD *)(v24 + 52) = 2082;
      uint64_t v84 = (void *)(v79 + *(int *)(v119 + 20));
      uint64_t v86 = v84[3];
      uint64_t v85 = v84[4];
      sub_100012ED8(v84, v86);
      uint64_t v87 = dispatch thunk of CustomStringConvertible.description.getter(v86, *(void *)(v85 + 16));
      *(void *)(v0 + 96) = sub_1003F11D4(v87, v88, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v111, v112, v24 + 54, v24 + 62);
      swift_bridgeObjectRelease();
      sub_100018C68(v79, type metadata accessor for BeaconKeyManager.IndexInformation);
      *(_WORD *)(v24 + 62) = 2160;
      *(void *)(v0 + 104) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v112, v113, v24 + 64, v24 + 72);
      *(_WORD *)(v24 + 72) = 2081;
      uint64_t v89 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v90 = dispatch thunk of CustomStringConvertible.description.getter(v122, v89);
      *(void *)(v0 + 112) = sub_1003F11D4(v90, v91, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v113, v0 + 120, v24 + 74, v24 + 82);
      swift_bridgeObjectRelease();
      sub_100018C68(v105, type metadata accessor for BeaconKeyManager.IndexInformation);
      *(_WORD *)(v24 + 82) = 1024;
      sub_10001581C(v109 + *(int *)(v107 + 48), v106, &qword_10099E770);
      uint64_t v92 = type metadata accessor for ObservedAdvertisement.Location(0LL);
      LODWORD(v86) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v92 - 8) + 48LL))( v106,  1LL,  v92) != 1;
      sub_100015794(v106, &qword_10099E770);
      sub_100018C68(v109, type metadata accessor for ObservedAdvertisement);
      *(_DWORD *)(v0 + 344) = v86;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 344, v0 + 348, v24 + 84, v24 + 88);
      _os_log_impl( (void *)&_mh_execute_header,  v126,  v116,  "Reconciled advertisement %{private,mask.hash}s, multiPart: %{public}s, hint: %{public}s, Type18: %{public}s,\n index: %{public}s, beacon: %{private,mask.hash}s,\n hasLocation: %{BOOL}d.",  (uint8_t *)v24,  0x58u);
      swift_arrayDestroy(v114, 6LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v114, -1LL, -1LL);
      swift_slowDealloc(v24, -1LL, -1LL);
    }

    else
    {
      uint64_t v58 = *(void *)(v0 + 240);
      uint64_t v59 = *(void *)(v0 + 248);
      uint64_t v61 = *(void *)(v0 + 200);
      uint64_t v60 = *(void *)(v0 + 208);
      uint64_t v63 = *(void *)(v0 + 184);
      uint64_t v62 = *(void *)(v0 + 192);
      sub_100018C68(*(void *)(v0 + 176), type metadata accessor for ObservedAdvertisement);
      sub_100018C68(v60, type metadata accessor for ObservedAdvertisement);
      sub_100018C68(v61, type metadata accessor for ObservedAdvertisement);
      sub_100018C68(v62, type metadata accessor for ObservedAdvertisement);
      sub_100018C68(v63, type metadata accessor for ObservedAdvertisement);
      sub_100018C68(v59, type metadata accessor for BeaconKeyManager.IndexInformation);
      sub_100018C68(v58, type metadata accessor for BeaconKeyManager.IndexInformation);
    }

    sub_100018C68(*(void *)(v0 + 256), type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v93 = *(void *)(v0 + 288);
    uint64_t v95 = *(int **)(v0 + 152);
    uint64_t v94 = *(void *)(v0 + 160);
    uint64_t v96 = *(void *)(v0 + 120);
    char v97 = *(_BYTE *)(v96 + 9);
    uint64_t v98 = *(void *)(v96 + 16);
    uint64_t v99 = *(void *)(v96 + 24);
    __int16 v133 = *(_WORD *)(v96 + 32);
    char v129 = *(_BYTE *)(v96 + 34);
    char v124 = *(_BYTE *)(v96 + 35);
    int v121 = *(_DWORD *)(v96 + 36);
    uint64_t v100 = v95[11];
    uint64_t v101 = v96 + v100;
    uint64_t v102 = v94 + v100;
    uint64_t v103 = type metadata accessor for Date(0LL);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v103 - 8) + 16LL))(v102, v101, v103);
    LOBYTE(v101) = *(_BYTE *)(v96 + v95[14]);
    sub_10001581C(v96 + v95[12], v94 + v95[12], &qword_10099E770);
    sub_10001581C(v93, v94 + v95[13], &qword_1009AA730);
    *(void *)uint64_t v94 = 0LL;
    *(_BYTE *)(v94 + 8) = 1;
    *(_BYTE *)(v94 + 9) = v97;
    *(void *)(v94 + swift_weakDestroy(v0 + 16) = v98;
    *(void *)(v94 + 24) = v99;
    *(_WORD *)(v94 + 32) = v133;
    *(_BYTE *)(v94 + 34) = v129;
    *(_BYTE *)(v94 + 35) = v124;
    *(_DWORD *)(v94 + 36) = v121;
    *(_BYTE *)(v94 + v95[14]) = v101;
    sub_10008699C(v98, v99);
    uint64_t v104 = (void *)swift_task_alloc(dword_1009AD1BC);
    *(void *)(v0 + 320) = v104;
    *uint64_t v104 = v0;
    v104[1] = sub_100409028;
    return sub_1003FF878(*(void *)(v0 + 160));
  }

  else
  {
    if (qword_10099B400 != -1) {
      swift_once(&qword_10099B400, sub_1003F889C);
    }
    uint64_t v35 = *(void *)(v0 + 256);
    uint64_t v36 = *(void *)(v0 + 232);
    uint64_t v37 = *(void *)(v0 + 168);
    uint64_t v38 = *(void *)(v0 + 120);
    uint64_t v39 = type metadata accessor for Logger(0LL);
    sub_10000A720(v39, (uint64_t)qword_100A2A928);
    sub_10001DC4C(v35, v36, type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v40 = sub_10001DC4C(v38, v37, type metadata accessor for ObservedAdvertisement);
    char v41 = (os_log_s *)Logger.logObject.getter(v40);
    os_log_type_t v42 = static os_log_type_t.info.getter(v41);
    BOOL v43 = os_log_type_enabled(v41, v42);
    uint64_t v44 = *(void *)(v0 + 272);
    uint64_t v45 = *(void *)(v0 + 232);
    uint64_t v46 = *(void *)(v0 + 168);
    if (v43)
    {
      uint64_t v131 = *(void *)(v0 + 272);
      uint64_t v47 = swift_slowAlloc(42LL, -1LL);
      uint64_t v127 = swift_slowAlloc(64LL, -1LL);
      uint64_t v134 = v127;
      *(_DWORD *)uint64_t v47 = 141558787;
      *(void *)(v0 + swift_weakDestroy(v0 + 16) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 16, v0 + 24, v47 + 4, v47 + 12);
      *(_WORD *)(v47 + 12) = 2081;
      uint64_t v48 = type metadata accessor for UUID(0LL);
      uint64_t v49 = sub_100007864( qword_10099DFD0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
      uint64_t v50 = dispatch thunk of CustomStringConvertible.description.getter(v48, v49);
      *(void *)(v0 + 24) = sub_1003F11D4(v50, v51, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v47 + 14, v47 + 22);
      swift_bridgeObjectRelease();
      sub_100018C68(v45, type metadata accessor for BeaconKeyManager.IndexInformation);
      *(_WORD *)(v47 + 22) = 2160;
      *(void *)(v0 + 32) = 1752392040LL;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v47 + 24, v47 + 32);
      *(_WORD *)(v47 + 32) = 2081;
      uint64_t v52 = *(void *)(v46 + 16);
      uint64_t v53 = *(void *)(v46 + 24);
      sub_10008699C(v52, v53);
      uint64_t v54 = sub_1000AFD00(v52, v53);
      unint64_t v56 = v55;
      sub_1000869A4(v52, v53);
      *(void *)(v0 + 40) = sub_1003F11D4(v54, v56, &v134);
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v47 + 34, v47 + 42);
      swift_bridgeObjectRelease();
      sub_100018C68(v46, type metadata accessor for ObservedAdvertisement);
      _os_log_impl( (void *)&_mh_execute_header,  v41,  v42,  "Ignoring unsupported beacon %{private,mask.hash}s,\nadvertisement %{private,mask.hash}s!",  (uint8_t *)v47,  0x2Au);
      swift_arrayDestroy(v127, 2LL, (char *)&type metadata for Any + 8);
      swift_slowDealloc(v127, -1LL, -1LL);
      swift_slowDealloc(v47, -1LL, -1LL);

      uint64_t v57 = v131;
    }

    else
    {

      sub_100018C68(v46, type metadata accessor for ObservedAdvertisement);
      sub_100018C68(v45, type metadata accessor for BeaconKeyManager.IndexInformation);
      uint64_t v57 = v44;
    }

    sub_100015794(v57, &qword_1009AC230);
    sub_100018C68(*(void *)(v0 + 256), type metadata accessor for BeaconKeyManager.IndexInformation);
    uint64_t v64 = *(void *)(v0 + 280);
    uint64_t v66 = *(void *)(v0 + 264);
    uint64_t v65 = *(void *)(v0 + 272);
    uint64_t v68 = *(void *)(v0 + 248);
    uint64_t v67 = *(void *)(v0 + 256);
    uint64_t v69 = *(void *)(v0 + 232);
    uint64_t v70 = *(void *)(v0 + 240);
    uint64_t v72 = *(void *)(v0 + 200);
    uint64_t v71 = *(void *)(v0 + 208);
    uint64_t v115 = *(void *)(v0 + 192);
    uint64_t v117 = *(void *)(v0 + 184);
    uint64_t v118 = *(void *)(v0 + 176);
    uint64_t v120 = *(void *)(v0 + 168);
    uint64_t v123 = *(void *)(v0 + 160);
    uint64_t v128 = *(os_log_s **)(v0 + 144);
    uint64_t v132 = *(void *)(v0 + 136);
    swift_task_dealloc(*(void *)(v0 + 288));
    swift_task_dealloc(v64);
    swift_task_dealloc(v65);
    swift_task_dealloc(v66);
    swift_task_dealloc(v67);
    swift_task_dealloc(v68);
    swift_task_dealloc(v70);
    swift_task_dealloc(v69);
    swift_task_dealloc(v71);
    swift_task_dealloc(v72);
    swift_task_dealloc(v115);
    swift_task_dealloc(v117);
    swift_task_dealloc(v118);
    swift_task_dealloc(v120);
    swift_task_dealloc(v123);
    swift_task_dealloc(v128);
    swift_task_dealloc(v132);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100409028()
{
  uint64_t v1 = *v0;
  uint64_t v4 = *v0;
  swift_task_dealloc(*(void *)(*v0 + 320));
  uint64_t v2 = (void *)swift_task_alloc(dword_1009AD15C);
  *(void *)(v1 + 328) = v2;
  *uint64_t v2 = v4;
  v2[1] = sub_100409094;
  return sub_1003FE25C(*(void *)(v1 + 160));
}

uint64_t sub_100409094()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 328);
  *(void *)(*v1 + 336) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_100409240;
  }
  else {
    uint64_t v4 = sub_1004090F8;
  }
  return swift_task_switch(v4, *(void *)(v2 + 128), 0LL);
}

uint64_t sub_1004090F8()
{
  uint64_t v1 = *(void *)(v0 + 288);
  uint64_t v2 = *(void *)(v0 + 272);
  sub_100018C68(*(void *)(v0 + 160), type metadata accessor for ObservedAdvertisement);
  sub_100015794(v2, &qword_1009AC230);
  sub_100015794(v1, &qword_1009AA730);
  uint64_t v3 = *(void *)(v0 + 280);
  uint64_t v5 = *(void *)(v0 + 264);
  uint64_t v4 = *(void *)(v0 + 272);
  uint64_t v7 = *(void *)(v0 + 248);
  uint64_t v6 = *(void *)(v0 + 256);
  uint64_t v8 = *(void *)(v0 + 232);
  uint64_t v9 = *(void *)(v0 + 240);
  uint64_t v11 = *(void *)(v0 + 200);
  uint64_t v10 = *(void *)(v0 + 208);
  uint64_t v13 = *(void *)(v0 + 192);
  uint64_t v14 = *(void *)(v0 + 184);
  uint64_t v15 = *(void *)(v0 + 176);
  uint64_t v16 = *(void *)(v0 + 168);
  uint64_t v17 = *(void *)(v0 + 160);
  uint64_t v18 = *(void *)(v0 + 144);
  uint64_t v19 = *(void *)(v0 + 136);
  swift_task_dealloc(*(void *)(v0 + 288));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v9);
  swift_task_dealloc(v8);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100409240()
{
  uint64_t v1 = *(void *)(v0 + 280);
  uint64_t v2 = *(void *)(v0 + 288);
  uint64_t v4 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 272);
  uint64_t v6 = *(void *)(v0 + 248);
  uint64_t v5 = *(void *)(v0 + 256);
  uint64_t v8 = *(void *)(v0 + 232);
  uint64_t v7 = *(void *)(v0 + 240);
  uint64_t v11 = *(void *)(v0 + 208);
  uint64_t v12 = *(void *)(v0 + 200);
  uint64_t v13 = *(void *)(v0 + 192);
  uint64_t v14 = *(void *)(v0 + 184);
  uint64_t v9 = *(void *)(v0 + 160);
  uint64_t v15 = *(void *)(v0 + 176);
  uint64_t v16 = *(void *)(v0 + 168);
  uint64_t v17 = *(void *)(v0 + 144);
  uint64_t v18 = *(void *)(v0 + 136);
  sub_100018C68(v9, type metadata accessor for ObservedAdvertisement);
  sub_100015794(v3, &qword_1009AC230);
  sub_100015794(v2, &qword_1009AA730);
  swift_task_dealloc(v2);
  swift_task_dealloc(v1);
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  swift_task_dealloc(v13);
  swift_task_dealloc(v14);
  swift_task_dealloc(v15);
  swift_task_dealloc(v16);
  swift_task_dealloc(v9);
  swift_task_dealloc(v17);
  swift_task_dealloc(v18);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100409390()
{
  uint64_t v1 = type metadata accessor for BeaconStatus(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 24) & ~v3;
  uint64_t v5 = v3 | 7;
  uint64_t v6 = *(void *)(v2 + 64) + v4 + 3;
  swift_release();
  uint64_t v7 = v0 + v4;
  uint64_t v8 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v8 - 8) + 8LL))(v7, v8);
  uint64_t v9 = v7 + *(int *)(v1 + 24);
  uint64_t v10 = type metadata accessor for Date(0LL);
  (*(void (**)(uint64_t, uint64_t))(*(void *)(v10 - 8) + 8LL))(v9, v10);
  swift_bridgeObjectRelease();
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100409448()
{
  uint64_t v1 = *(void *)(type metadata accessor for BeaconStatus(0LL) - 8);
  unint64_t v2 = (*(unsigned __int8 *)(v1 + 80) + 24LL) & ~(unint64_t)*(unsigned __int8 *)(v1 + 80);
  return sub_1005EAE84(*(void *)(v0 + 16), v0 + v2, *(_BYTE *)(v0 + *(void *)(v1 + 64) + v2));
}

uint64_t sub_1004094B4(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 16));
  if (v3 <= 0x3F)
  {
    uint64_t v4 = *(void *)(result - 8) + 64LL;
    swift_initStructMetadata(a1, 0LL, 1LL, &v4, a1 + 32);
    return 0LL;
  }

  return result;
}

uint64_t *sub_100409520(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  unint64_t v3 = a1;
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  uint64_t v5 = *(_DWORD *)(v4 + 80);
  if (v5 <= 7 && *(void *)(v4 + 64) <= 0x18uLL && (*(_DWORD *)(v4 + 80) & 0x100000) == 0)
  {
    (*(void (**)(uint64_t *))(v4 + 16))(a1);
  }

  else
  {
    uint64_t v8 = *a2;
    *unint64_t v3 = *a2;
    unint64_t v3 = (uint64_t *)(v8 + ((v5 + 16) & ~v5));
    swift_retain(v8);
  }

  return v3;
}

uint64_t sub_100409590(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1004095C0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_1004095F0(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_100409620(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return a1;
}

uint64_t sub_100409650(uint64_t a1, unsigned int a2, uint64_t a3)
{
  if (!a2) {
    return 0LL;
  }
  uint64_t v4 = *(void *)(*(void *)(a3 + 16) - 8LL);
  unsigned int v5 = *(_DWORD *)(v4 + 84);
  unsigned int v6 = a2 - v5;
  if (a2 <= v5) {
    goto LABEL_18;
  }
  uint64_t v7 = *(void *)(v4 + 64);
  char v8 = 8 * v7;
  if (v7 <= 3)
  {
    unsigned int v10 = ((v6 + ~(-1 << v8)) >> v8) + 1;
    if (HIWORD(v10))
    {
      int v9 = *(_DWORD *)(a1 + v7);
      if (!v9) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 > 0xFF)
    {
      int v9 = *(unsigned __int16 *)(a1 + v7);
      if (!*(_WORD *)(a1 + v7)) {
        goto LABEL_18;
      }
      goto LABEL_11;
    }

    if (v10 < 2)
    {
LABEL_18:
      if (v5) {
        return (*(uint64_t (**)(void))(v4 + 48))();
      }
      return 0LL;
    }
  }

  int v9 = *(unsigned __int8 *)(a1 + v7);
  if (!*(_BYTE *)(a1 + v7)) {
    goto LABEL_18;
  }
LABEL_11:
  int v11 = (v9 - 1) << v8;
  if (!(_DWORD)v7) {
    return v5 + v11 + 1;
  }
  return ((uint64_t (*)(void))((char *)&loc_100409700 + 4 * byte_1008003F8[(v7 - 1)]))();
}

void sub_100409750(_WORD *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v6 = *(void *)(*(void *)(a4 + 16) - 8LL);
  unsigned int v7 = *(_DWORD *)(v6 + 84);
  size_t v8 = *(void *)(v6 + 64);
  BOOL v9 = a3 >= v7;
  unsigned int v10 = a3 - v7;
  if (v10 != 0 && v9)
  {
    if (v8 <= 3)
    {
      unsigned int v13 = ((v10 + ~(-1 << (8 * v8))) >> (8 * v8)) + 1;
      if (HIWORD(v13))
      {
        unsigned int v11 = &dword_100000004;
      }

      else if (v13 >= 0x100)
      {
        unsigned int v11 = 2;
      }

      else
      {
        unsigned int v11 = v13 > 1;
      }
    }

    else
    {
      unsigned int v11 = &_mh_execute_header.magic + 1;
    }
  }

  else
  {
    unsigned int v11 = 0;
  }

  if (v7 < a2)
  {
    unsigned int v12 = ~v7 + a2;
    if (v8 < 4)
    {
      if ((_DWORD)v8)
      {
        int v14 = v12 & ~(-1 << (8 * v8));
        bzero(a1, v8);
        if ((_DWORD)v8 == 3)
        {
          *a1 = v14;
          *((_BYTE *)a1 + 2) = BYTE2(v14);
        }

        else if ((_DWORD)v8 == 2)
        {
          *a1 = v14;
        }

        else
        {
          *(_BYTE *)a1 = v14;
        }
      }
    }

    else
    {
      bzero(a1, *(void *)(v6 + 64));
      *(_DWORD *)a1 = v12;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X11 }

uint64_t _s11MaterializeVMa(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_10006A624(a1, a2, a3, a4, (uint64_t)&_s11MaterializeVMn);
}

void *sub_10040990C()
{
  return &protocol witness table for Never;
}

uint64_t sub_100409918(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(a3 - 8);
  __chkstk_darwin(a1);
  BOOL v9 = (char *)v22 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v12 = *(void *)(v10 + 24);
  v22[0] = *(void *)(v10 + 16);
  uint64_t v11 = v22[0];
  v22[1] = v13;
  v22[2] = v12;
  v22[3] = v14;
  uint64_t v15 = _s11MaterializeV5InnerVMa(0LL, (uint64_t)v22);
  uint64_t v16 = *(void *)(v15 - 8);
  __chkstk_darwin(v15);
  uint64_t v18 = (char *)v22 - v17;
  (*(void (**)(char *, uint64_t, uint64_t))(v7 + 16))(v9, a1, a3);
  sub_100409A44((uint64_t)v9, v11, a3, v12, a4, (uint64_t)v18);
  uint64_t WitnessTable = swift_getWitnessTable(&unk_100800530, v15);
  Publisher.subscribe<A>(_:)(v18, v11, v15, v12, WitnessTable);
  return (*(uint64_t (**)(char *, uint64_t))(v16 + 8))(v18, v15);
}

uint64_t sub_100409A44@<X0>( uint64_t a1@<X0>, uint64_t a2@<X1>, uint64_t a3@<X2>, uint64_t a4@<X3>, uint64_t a5@<X4>, uint64_t a6@<X8>)
{
  v11[0] = a2;
  v11[1] = a3;
  void v11[2] = a4;
  void v11[3] = a5;
  _s11MaterializeV5InnerVMa(0LL, (uint64_t)v11);
  return CombineIdentifier.init()();
}

uint64_t sub_100409ABC(uint64_t a1)
{
  uint64_t v3 = type metadata accessor for Mirror.AncestorRepresentation(0LL);
  uint64_t v4 = *(void *)(v3 - 8);
  __chkstk_darwin(v3);
  uint64_t v6 = (char *)&v16 - ((v5 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = sub_100004AEC(&qword_1009AD2C0);
  uint64_t v8 = __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v16 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v8);
  uint64_t v12 = (char *)&v16 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(v13 + 16))(v12, v1, a1);
  uint64_t v14 = type metadata accessor for Mirror.DisplayStyle(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v10, 1LL, 1LL, v14);
  (*(void (**)(char *, void, uint64_t))(v4 + 104))( v6,  enum case for Mirror.AncestorRepresentation.generated(_:),  v3);
  return Mirror.init<A>(_:children:displayStyle:ancestorRepresentation:)(v12, _swiftEmptyArrayStorage, v10, v6, a1);
}

void sub_100409C0C(void *a1@<X8>)
{
  a1[3] = &type metadata for String;
  *a1 = 0x6C6169726574614DLL;
  a1[1] = 0xEB00000000657A69LL;
}

uint64_t sub_100409C3C(uint64_t a1, uint64_t a2)
{
  return dispatch thunk of Subscriber.receive(subscription:)(a1, *(void *)(a2 + 24), *(void *)(a2 + 40));
}

uint64_t sub_100409C4C(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[4];
  uint64_t v5 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v4,  v5,  &protocol requirements base descriptor for Publisher,  &associated type descriptor for Publisher.Output);
  uint64_t v7 = swift_getAssociatedTypeWitness( 255LL,  v4,  v5,  &protocol requirements base descriptor for Publisher,  &associated type descriptor for Publisher.Failure);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v4,  v5,  v7,  &protocol requirements base descriptor for Publisher,  &associated conformance descriptor for Publisher.Publisher.Failure: Error);
  uint64_t v9 = type metadata accessor for Result(0LL, AssociatedTypeWitness, v7, AssociatedConformanceWitness);
  uint64_t v10 = *(void *)(v9 - 8);
  __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v15 - v11;
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(AssociatedTypeWitness - 8) + 16LL))( (char *)&v15 - v11,  a1,  AssociatedTypeWitness);
  swift_storeEnumTagMultiPayload(v12, v9, 0LL);
  uint64_t v13 = dispatch thunk of Subscriber.receive(_:)(v12, a2[3], a2[5]);
  (*(void (**)(char *, uint64_t))(v10 + 8))(v12, v9);
  return v13;
}

uint64_t sub_100409D84(uint64_t a1, void *a2)
{
  uint64_t v4 = a2[4];
  uint64_t v5 = a2[2];
  uint64_t AssociatedTypeWitness = swift_getAssociatedTypeWitness( 255LL,  v4,  v5,  &protocol requirements base descriptor for Publisher,  &associated type descriptor for Publisher.Output);
  uint64_t v7 = swift_getAssociatedTypeWitness( 255LL,  v4,  v5,  &protocol requirements base descriptor for Publisher,  &associated type descriptor for Publisher.Failure);
  uint64_t AssociatedConformanceWitness = swift_getAssociatedConformanceWitness( v4,  v5,  v7,  &protocol requirements base descriptor for Publisher,  &associated conformance descriptor for Publisher.Publisher.Failure: Error);
  uint64_t v9 = type metadata accessor for Result(0LL, AssociatedTypeWitness, v7, AssociatedConformanceWitness);
  uint64_t v24 = *(void *)(v9 - 8);
  uint64_t v10 = __chkstk_darwin(v9);
  uint64_t v12 = (char *)&v23 - v11;
  uint64_t v13 = *(void *)(v7 - 8);
  __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v23 - v14;
  uint64_t v16 = type metadata accessor for Subscribers.Completion(0LL, v7, AssociatedConformanceWitness);
  uint64_t v17 = *(void *)(v16 - 8);
  __chkstk_darwin(v16);
  uint64_t v19 = (char *)&v23 - v18;
  (*(void (**)(char *, uint64_t, uint64_t))(v17 + 16))((char *)&v23 - v18, a1, v16);
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v13 + 48))(v19, 1LL, v7) == 1)
  {
    (*(void (**)(char *, uint64_t))(v17 + 8))(v19, v16);
    uint64_t v20 = a2[3];
    uint64_t v21 = a2[5];
  }

  else
  {
    (*(void (**)(char *, char *, uint64_t))(v13 + 32))(v15, v19, v7);
    (*(void (**)(char *, char *, uint64_t))(v13 + 16))(v12, v15, v7);
    swift_storeEnumTagMultiPayload(v12, v9, 1LL);
    uint64_t v20 = a2[3];
    uint64_t v21 = a2[5];
    dispatch thunk of Subscriber.receive(_:)(v12, v20, v21);
    (*(void (**)(char *, uint64_t))(v24 + 8))(v12, v9);
    (*(void (**)(char *, uint64_t))(v13 + 8))(v15, v7);
  }

  char v25 = 1;
  return dispatch thunk of Subscriber.receive(completion:)(&v25, v20, v21);
}

uint64_t sub_100409FD4()
{
  return 0x6C6169726574614DLL;
}

uint64_t sub_100409FFC@<X0>(uint64_t a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v4 = v2 + *(int *)(a1 + 52);
  uint64_t v5 = type metadata accessor for CombineIdentifier(0LL);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 16LL))(a2, v4, v5);
}

uint64_t sub_10040A03C(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  return sub_100409918(a1, a4, a2, a3);
}

uint64_t _s11MaterializeV5InnerVMa(uint64_t a1, uint64_t a2)
{
  return swift_getGenericMetadata(a1, a2, &_s11MaterializeV5InnerVMn);
}

uint64_t sub_10040A05C(uint64_t a1, uint64_t a2, uint64_t a3)
{
  return swift_allocateGenericValueMetadata(a1, a2, a3, 40LL);
}

uint64_t sub_10040A064(uint64_t a1)
{
  uint64_t result = swift_checkMetadataState(319LL, *(void *)(a1 + 24));
  if (v3 <= 0x3F)
  {
    v5[0] = *(void *)(result - 8) + 64LL;
    uint64_t result = type metadata accessor for CombineIdentifier(319LL);
    if (v4 <= 0x3F)
    {
      v5[1] = *(void *)(result - 8) + 64LL;
      swift_initStructMetadata(a1, 0LL, 2LL, v5, a1 + 48);
      return 0LL;
    }
  }

  return result;
}

uint64_t *sub_10040A0EC(uint64_t *a1, uint64_t *a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(void *)(v6 + 64);
  uint64_t v8 = type metadata accessor for CombineIdentifier(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(_DWORD *)(v9 + 80);
  uint64_t v11 = v7 + v10;
  uint64_t v12 = (*(_BYTE *)(v6 + 80) | *(_BYTE *)(v9 + 80));
  if (v12 > 7
    || ((*(_DWORD *)(v6 + 80) | *(_DWORD *)(v9 + 80)) & 0x100000) != 0
    || (v11 & (unint64_t)~v10) + *(void *)(v9 + 64) > 0x18)
  {
    uint64_t v15 = *a2;
    *a1 = *a2;
    a1 = (uint64_t *)(v15 + ((v12 + 16) & ~v12));
    swift_retain(v15);
  }

  else
  {
    uint64_t v16 = v8;
    uint64_t v17 = ~v10;
    (*(void (**)(uint64_t *, uint64_t *, uint64_t))(v6 + 16))(a1, a2, v5);
    (*(void (**)(unint64_t, unint64_t, uint64_t))(v9 + 16))( ((unint64_t)a1 + v11) & v17,  ((unint64_t)a2 + v11) & v17,  v16);
  }

  return a1;
}

uint64_t sub_10040A1CC(uint64_t a1, uint64_t a2)
{
  uint64_t v3 = *(void *)(*(void *)(a2 + 24) - 8LL);
  (*(void (**)(void))(v3 + 8))();
  uint64_t v4 = *(void *)(v3 + 64);
  uint64_t v5 = type metadata accessor for CombineIdentifier(0LL);
  return (*(uint64_t (**)(unint64_t, uint64_t))(*(void *)(v5 - 8) + 8LL))( (v4 + a1 + *(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL)) & ~(unint64_t)*(unsigned __int8 *)(*(void *)(v5 - 8) + 80LL),  v5);
}

uint64_t sub_10040A220(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(void))(v5 + 16))();
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = type metadata accessor for CombineIdentifier(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 16))( (v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  v7);
  return a1;
}

uint64_t sub_10040A290(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(void))(v5 + 24))();
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = type metadata accessor for CombineIdentifier(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 24))( (v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  v7);
  return a1;
}

uint64_t sub_10040A300(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(void))(v5 + 32))();
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = type metadata accessor for CombineIdentifier(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 32))( (v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  v7);
  return a1;
}

uint64_t sub_10040A370(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*(void *)(a3 + 24) - 8LL);
  (*(void (**)(void))(v5 + 40))();
  uint64_t v6 = *(void *)(v5 + 64);
  uint64_t v7 = type metadata accessor for CombineIdentifier(0LL);
  uint64_t v8 = *(void *)(v7 - 8);
  (*(void (**)(unint64_t, unint64_t, uint64_t))(v8 + 40))( (v6 + *(unsigned __int8 *)(v8 + 80) + a1) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  (v6 + *(unsigned __int8 *)(v8 + 80) + a2) & ~(unint64_t)*(unsigned __int8 *)(v8 + 80),  v7);
  return a1;
}

uint64_t sub_10040A3E0(uint64_t a1, unsigned int a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(a3 + 24);
  uint64_t v6 = *(void *)(v5 - 8);
  uint64_t v7 = *(unsigned int *)(v6 + 84);
  uint64_t v8 = type metadata accessor for CombineIdentifier(0LL);
  uint64_t v9 = *(void *)(v8 - 8);
  uint64_t v10 = *(unsigned int *)(v9 + 84);
  else {
    unsigned int v11 = *(_DWORD *)(v9 + 84);
  }
  if (!a2) {
    return 0LL;
  }
  uint64_t v12 = *(unsigned __int8 *)(v9 + 80);
  uint64_t v13 = *(void *)(v6 + 64) + v12;
  if (a2 <= v11) {
    goto LABEL_23;
  }
  uint64_t v14 = (v13 & ~v12) + *(void *)(v9 + 64);
  char v15 = 8 * v14;
  if (v14 <= 3)
  {
    unsigned int v17 = ((a2 - v11 + ~(-1 << v15)) >> v15) + 1;
    if (HIWORD(v17))
    {
      int v16 = *(_DWORD *)(a1 + v14);
      if (!v16) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v17 > 0xFF)
    {
      int v16 = *(unsigned __int16 *)(a1 + v14);
      if (!*(_WORD *)(a1 + v14)) {
        goto LABEL_23;
      }
      goto LABEL_14;
    }

    if (v17 < 2)
    {
LABEL_23:
      if (v11)
      {
        else {
          return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v9 + 48))((v13 + a1) & ~v12, v10, v8);
        }
      }

      return 0LL;
    }
  }

  int v16 = *(unsigned __int8 *)(a1 + v14);
  if (!*(_BYTE *)(a1 + v14)) {
    goto LABEL_23;
  }
LABEL_14:
  int v18 = (v16 - 1) << v15;
  if ((_DWORD)v14)
  {
    else {
      int v19 = 4;
    }
    __asm { BR              X12 }
  }

  return v11 + v18 + 1;
}

void sub_10040A578(_BYTE *a1, unsigned int a2, unsigned int a3, uint64_t a4)
{
  uint64_t v7 = *(void *)(*(void *)(a4 + 24) - 8LL);
  unsigned int v8 = *(_DWORD *)(v7 + 84);
  uint64_t v9 = *(void *)(type metadata accessor for CombineIdentifier(0LL) - 8);
  if (*(_DWORD *)(v9 + 84) <= v8) {
    unsigned int v10 = v8;
  }
  else {
    unsigned int v10 = *(_DWORD *)(v9 + 84);
  }
  if (a3 <= v10)
  {
    unsigned int v12 = 0;
  }

  else if (v11 <= 3)
  {
    unsigned int v14 = ((a3 - v10 + ~(-1 << (8 * v11))) >> (8 * v11)) + 1;
    if (HIWORD(v14))
    {
      unsigned int v12 = &dword_100000004;
    }

    else if (v14 >= 0x100)
    {
      unsigned int v12 = 2;
    }

    else
    {
      unsigned int v12 = v14 > 1;
    }
  }

  else
  {
    unsigned int v12 = &_mh_execute_header.magic + 1;
  }

  if (v10 < a2)
  {
    unsigned int v13 = ~v10 + a2;
    if (v11 < 4)
    {
      if ((_DWORD)v11)
      {
        int v15 = v13 & ~(-1 << (8 * v11));
        bzero(a1, v11);
        if ((_DWORD)v11 == 3)
        {
          *(_WORD *)a1 = v15;
          a1[2] = BYTE2(v15);
        }

        else if ((_DWORD)v11 == 2)
        {
          *(_WORD *)a1 = v15;
        }

        else
        {
          *a1 = v15;
        }
      }
    }

    else
    {
      bzero(a1, v11);
      *(_DWORD *)a1 = v13;
    }

    __asm { BR              X10 }
  }

  __asm { BR              X13 }

uint64_t sub_10040A794(uint64_t a1)
{
  return swift_getWitnessTable(&unk_100800490, a1);
}

uint64_t sub_10040A7A4(uint64_t a1, uint64_t a2)
{
  return swift_getAssociatedConformanceWitness( *(void *)(a2 + 32),  *(void *)(a2 + 16),  a1,  &protocol requirements base descriptor for Publisher,  &associated conformance descriptor for Publisher.Publisher.Failure: Error);
}

ValueMetadata *type metadata accessor for AccessoryProductDataResponsePayload()
{
  return &type metadata for AccessoryProductDataResponsePayload;
}

uint64_t sub_10040A7D4@<X0>(void *a1@<X0>, uint64_t *a2@<X8>)
{
  uint64_t result = sub_10040A8B0(a1);
  if (!v2)
  {
    *a2 = result;
    a2[1] = v5;
  }

  return result;
}

unint64_t sub_10040A7FC(uint64_t a1)
{
  *(void *)(a1 + 8) = sub_10040A828();
  unint64_t result = sub_10040A86C();
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = result;
  return result;
}

unint64_t sub_10040A828()
{
  unint64_t result = qword_1009AD2C8;
  if (!qword_1009AD2C8)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008005B4, &type metadata for AccessoryProductDataResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009AD2C8);
  }

  return result;
}

unint64_t sub_10040A86C()
{
  unint64_t result = qword_1009AD2D0;
  if (!qword_1009AD2D0)
  {
    unint64_t result = swift_getWitnessTable(&unk_1008005DC, &type metadata for AccessoryProductDataResponsePayload);
    atomic_store(result, (unint64_t *)&qword_1009AD2D0);
  }

  return result;
}

uint64_t sub_10040A8B0(void *a1)
{
  uint64_t v3 = a1[3];
  uint64_t v4 = a1[4];
  sub_100012ED8(a1, v3);
  dispatch thunk of BinaryDecoding.container()(v17, v3, v4);
  uint64_t v5 = v18;
  uint64_t v6 = v19;
  sub_100037298((uint64_t)v17, v18);
  uint64_t v7 = dispatch thunk of BinaryDecodingContaining.decode(length:)(8LL, v5, v6);
  if (!v1)
  {
    uint64_t v9 = v7;
    unint64_t v10 = v8;
    sub_10001736C(v7, v8);
    sub_1000F6254(v9, v10);
    if (v12 >> 60 != 15)
    {
      uint64_t v6 = v11;
      sub_100016F9C(v9, v10);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v17);
      _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
      return v6;
    }

    uint64_t v6 = type metadata accessor for BinaryEncodingError(0LL);
    unint64_t v13 = sub_10040A9FC();
    swift_allocError(v6, v13, 0LL, 0LL);
    uint64_t v15 = (*(uint64_t (**)(uint64_t, void, uint64_t))(*(void *)(v6 - 8) + 104LL))( v14,  enum case for BinaryEncodingError.encodingError(_:),  v6);
    swift_willThrow(v15);
    sub_100016F9C(v9, v10);
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v17);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
  return v6;
}

unint64_t sub_10040A9FC()
{
  unint64_t result = qword_1009A0D38;
  if (!qword_1009A0D38)
  {
    uint64_t v1 = type metadata accessor for BinaryEncodingError(255LL);
    unint64_t result = swift_getWitnessTable(&protocol conformance descriptor for BinaryEncodingError, v1);
    atomic_store(result, (unint64_t *)&qword_1009A0D38);
  }

  return result;
}

void sub_10040AA44(uint64_t a1, uint64_t a2)
{
  uint64_t v38 = a2;
  uint64_t v3 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v3);
  uint64_t v5 = (char *)&v31 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  uint64_t v8 = *(void *)(v7 + 64);
  uint64_t v9 = __chkstk_darwin(v6);
  uint64_t v36 = (char *)&v31 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = __chkstk_darwin(v9);
  unint64_t v12 = (char *)&v31 - v11;
  uint64_t v13 = __chkstk_darwin(v10);
  uint64_t v15 = (char *)&v31 - v14;
  __chkstk_darwin(v13);
  unsigned int v17 = (char *)&v31 - v16;
  unint64_t v18 = sub_1000F26E0();
  uint64_t v19 = sub_1000B88B0(v18);
  swift_bridgeObjectRelease();
  sub_1000F0D9C(v19, v5);
  swift_bridgeObjectRelease();
  int v20 = (*(uint64_t (**)(char *, uint64_t, uint64_t))(v7 + 48))(v5, 1LL, v6);
  uint64_t v37 = a1;
  if (v20 == 1)
  {
    sub_100015794((uint64_t)v5, (uint64_t *)&unk_10099D720);
  }

  else
  {
    uint64_t v21 = *(uint64_t (**)(char *, char *, uint64_t))(v7 + 32);
    uint64_t v22 = v21(v17, v5, v6);
    Date.addingTimeInterval(_:)(v22, 86400.0);
    char v23 = static Date.< infix(_:_:)(v15, a1);
    uint64_t v24 = *(void (**)(char *, uint64_t))(v7 + 8);
    v24(v15, v6);
    if ((v23 & 1) != 0)
    {
      uint64_t v33 = type metadata accessor for Transaction(0LL);
      uint64_t v34 = v24;
      char v25 = *(void (**)(char *, uint64_t, uint64_t))(v7 + 16);
      v25(v15, a1, v6);
      v25(v12, (uint64_t)v17, v6);
      uint64_t v26 = *(unsigned __int8 *)(v7 + 80);
      uint64_t v27 = (v26 + 25) & ~v26;
      uint64_t v28 = (v8 + v26 + v27) & ~v26;
      uint64_t v29 = swift_allocObject(&unk_100958488, v28 + v8, v26 | 7);
      *(void *)(v29 + swift_weakDestroy(v0 + 16) = v35;
      unint64_t v32 = v12;
      char v30 = v38;
      *(_BYTE *)(v29 + 24) = v38;
      v21((char *)(v29 + v27), v15, v6);
      v21((char *)(v29 + v28), v32, v6);
      swift_retain();
      static Transaction.asyncTask(name:block:)("PublishRecordCount", 18LL, 2LL, &unk_1009AD470, v29);
      swift_release();
      v34(v17, v6);
      goto LABEL_7;
    }

    v24(v17, v6);
  }

  char v30 = v38;
LABEL_7:
  __asm { BR              X10 }

void sub_10040AD1C()
{
  unint64_t v7 = sub_1000F26E0();
  if (*(void *)(v7 + 16) && (uint64_t v8 = sub_10030CF14(0x6C65437265776F70LL, v1 + 3), (v9 & 1) != 0))
  {
    uint64_t v10 = *(void **)(*(void *)(v7 + 56) + 8 * v8);
    swift_bridgeObjectRetain(v10);
  }

  else
  {
    uint64_t v10 = _swiftEmptyArrayStorage;
  }

  swift_bridgeObjectRelease();
  swift_bridgeObjectRelease();
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v3 + 16))(v4, v0, v2);
  if ((swift_isUniquelyReferenced_nonNull_native(v10) & 1) == 0) {
    uint64_t v10 = (void *)sub_1004C44A8(0, v10[2] + 1LL, 1, (unint64_t)v10);
  }
  unint64_t v12 = v10[2];
  unint64_t v11 = v10[3];
  if (v12 >= v11 >> 1) {
    uint64_t v10 = (void *)sub_1004C44A8(v11 > 1, v12 + 1, 1, (unint64_t)v10);
  }
  void v10[2] = v12 + 1;
  unint64_t v13 = (unint64_t)v10
  uint64_t v14 = *(void (**)(unint64_t, uint64_t, uint64_t))(v3 + 32);
  *(void *)(v6 - 120) = v2;
  v14(v13, v4, v2);
  __asm { BR              X10 }

uint64_t sub_10040B228(uint64_t a1, char a2, uint64_t a3, uint64_t a4)
{
  *(void *)(v4 + 24) = a3;
  *(void *)(v4 + 32) = a4;
  *(_BYTE *)(v4 + 64) = a2;
  *(void *)(v4 + swift_weakDestroy(v0 + 16) = a1;
  return swift_task_switch(sub_10040B248, 0LL, 0LL);
}

uint64_t sub_10040B248()
{
  uint64_t v1 = type metadata accessor for AnalyticsEvent(0LL);
  uint64_t v2 = (char *)swift_allocObject(v1, *(unsigned int *)(v1 + 48), *(unsigned __int16 *)(v1 + 52));
  *(void *)(v0 + 40) = v2;
  swift_defaultActor_initialize(v2);
  unint64_t v3 = sub_10041271C((uint64_t)_swiftEmptyArrayStorage);
  *((void *)v2 + 14) = v3;
  UUID.init()(v3);
  uint64_t v4 = &v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
  uint64_t v5 = type metadata accessor for DispatchTime(0LL);
  uint64_t v6 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v5 - 8) + 56LL);
  v6(v4, 1LL, 1LL, v5);
  v6(&v2[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1LL, 1LL, v5);
  *((void *)v2 + 15) = 0xD000000000000033LL;
  *((void *)v2 + swift_weakDestroy(v0 + 16) = 0x8000000100861AA0LL;
  swift_retain();
  return swift_task_switch(sub_10040B350, v2, 0LL);
}

uint64_t sub_10040B350()
{
  return swift_task_switch(sub_10040B3BC, 0LL, 0LL);
}

uint64_t sub_10040B3BC()
{
  uint64_t v1 = type metadata accessor for AnalyticsPublisher();
  uint64_t v2 = swift_allocObject(v1, 112LL, 15LL);
  v0[6] = v2;
  swift_defaultActor_initialize(v2);
  unint64_t v3 = (uint64_t **)swift_task_alloc(dword_1009BDE0C);
  v0[7] = (uint64_t)v3;
  *unint64_t v3 = v0;
  v3[1] = (uint64_t *)sub_10040B428;
  return sub_100713F88(v0[5]);
}

uint64_t sub_10040B428()
{
  return swift_task_switch(sub_10040B484, 0LL, 0LL);
}

void sub_10040B484()
{
  id v1 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  sub_100004AEC(&qword_1009AD460);
  Class isa = Dictionary._bridgeToObjectiveC()().super.isa;
  NSString v3 = String._bridgeToObjectiveC()();
  [v1 setObject:isa forKey:v3];

  static os_log_type_t.default.getter(v4);
  if (qword_10099B750 != -1) {
    swift_once(&qword_10099B750, sub_1006514DC);
  }
  uint64_t v5 = *(unsigned __int8 *)(v0 + 64);
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D740);
  *(_OWORD *)(swift_allocObject(v6, 192LL, 7LL) + swift_weakDestroy(v0 + 16) = xmmword_1007E8290;
  __asm { BR              X9 }

uint64_t sub_10040B754()
{
  uint64_t v0 = type metadata accessor for Logger(0LL);
  sub_10000A8AC(v0, qword_100A2A940);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2A940);
  if (qword_10099BA18 != -1) {
    swift_once(&qword_10099BA18, sub_1007908B4);
  }
  uint64_t v2 = sub_10000A720(v0, (uint64_t)qword_100A2B7A0);
  return (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v0 - 8) + 16LL))(v1, v2, v0);
}

uint64_t sub_10040B7E4(uint64_t a1)
{
  v2[3] = a1;
  v2[4] = v1;
  v2[5] = *v1;
  return swift_task_switch(sub_10040B804, v1, 0LL);
}

uint64_t sub_10040B804()
{
  if (qword_10099B408 != -1) {
    swift_once(&qword_10099B408, sub_10040B754);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2A940);
  NSString v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Received publish event trigger.", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v6 = v0[4];
  uint64_t v7 = v0[5];
  uint64_t v8 = v0[3];

  uint64_t v10 = sub_100015C48( &qword_1009AD400,  v9,  (uint64_t (*)(uint64_t))type metadata accessor for FindMyNetworkPublisherService,  (uint64_t)&unk_1008006AC);
  unint64_t v11 = (void *)swift_task_alloc(48LL);
  v0[6] = v11;
  void v11[2] = v6;
  void v11[3] = v8;
  void v11[4] = v7;
  unint64_t v12 = (void *)swift_task_alloc(async function pointer to withCheckedThrowingContinuation<A>(isolation:function:_:)[1]);
  v0[7] = v12;
  uint64_t v13 = sub_100004AEC(&qword_1009AD430);
  *unint64_t v12 = v0;
  v12[1] = sub_10040B990;
  return withCheckedThrowingContinuation<A>(isolation:function:_:)( v0 + 2,  v6,  v10,  0xD000000000000018LL,  0x8000000100861A20LL,  sub_100411BD0,  v11,  v13);
}

uint64_t sub_10040B990()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 56);
  *(void *)(*v1 + 64) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 32);
    uint64_t v5 = sub_10040BA04;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 32);
    swift_task_dealloc(*(void *)(v2 + 48));
    uint64_t v5 = sub_10033F464;
    uint64_t v4 = v6;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_10040BA04()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10040BA38(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4)
{
  uint64_t v24 = a4;
  uint64_t v7 = sub_100004AEC(&qword_1009AD438);
  uint64_t v8 = *(void *)(v7 - 8);
  uint64_t v9 = *(void *)(v8 + 64);
  __chkstk_darwin(v7);
  uint64_t v10 = (char *)&v23 - ((v9 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v11 = sub_100004AEC(&qword_1009A9BF0);
  __chkstk_darwin(v11);
  uint64_t v13 = (char *)&v23 - ((v12 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v14 = type metadata accessor for TaskPriority(0LL);
  (*(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v14 - 8) + 56LL))(v13, 1LL, 1LL, v14);
  (*(void (**)(char *, uint64_t, uint64_t))(v8 + 16))(v10, a1, v7);
  uint64_t v16 = sub_100015C48( &qword_1009AD400,  v15,  (uint64_t (*)(uint64_t))type metadata accessor for FindMyNetworkPublisherService,  (uint64_t)&unk_1008006AC);
  uint64_t v17 = *(unsigned __int8 *)(v8 + 80);
  uint64_t v18 = (v17 + 48) & ~v17;
  unint64_t v19 = (v9 + v18 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  int v20 = (char *)swift_allocObject(&unk_100958438, v19 + 8, v17 | 7);
  *((void *)v20 + 2) = a2;
  *((void *)v20 + 3) = v16;
  *((void *)v20 + 4) = a2;
  *((void *)v20 + 5) = a3;
  (*(void (**)(char *, char *, uint64_t))(v8 + 32))(&v20[v18], v10, v7);
  *(void *)&v20[v19] = v24;
  swift_retain(a3);
  swift_retain_n(a2, 2LL);
  uint64_t v21 = sub_1003EDB00((uint64_t)v13, (uint64_t)&unk_1009AD448, (uint64_t)v20);
  return swift_release(v21);
}

uint64_t sub_10040BBD4(uint64_t a1, uint64_t a2, uint64_t a3, uint64_t a4, uint64_t a5, uint64_t a6, uint64_t a7)
{
  v7[8] = a6;
  v7[9] = a7;
  v7[6] = a4;
  v7[7] = a5;
  uint64_t v9 = sub_100004AEC(&qword_1009AD438);
  v7[10] = v9;
  uint64_t v10 = *(void *)(v9 - 8);
  v7[11] = v10;
  uint64_t v11 = *(void *)(v10 + 64);
  v7[12] = v11;
  v7[13] = swift_task_alloc((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10040BC44, a4, 0LL);
}

uint64_t sub_10040BC44()
{
  uint64_t v2 = v0[12];
  uint64_t v1 = v0[13];
  uint64_t v3 = v0[10];
  uint64_t v4 = v0[11];
  uint64_t v5 = v0[8];
  uint64_t v7 = v0[6];
  uint64_t v6 = v0[7];
  uint64_t v15 = v0[9];
  v0[2] = 0x6873696C627550LL;
  v0[3] = 0xE700000000000000LL;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 16))(v1, v5, v3);
  uint64_t v8 = *(unsigned __int8 *)(v4 + 80);
  uint64_t v9 = (v8 + 32) & ~v8;
  unint64_t v10 = (v2 + v9 + 7) & 0xFFFFFFFFFFFFFFF8LL;
  uint64_t v11 = swift_allocObject(&unk_100958460, v10 + 8, v8 | 7);
  v0[14] = v11;
  *(void *)(v11 + swift_weakDestroy(v0 + 16) = v7;
  *(void *)(v11 + 24) = v6;
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v4 + 32))(v11 + v9, v1, v3);
  *(void *)(v11 + v10) = v15;
  swift_retain();
  swift_retain();
  uint64_t v13 = (void *)swift_task_alloc(v12);
  v0[15] = v13;
  *uint64_t v13 = v0;
  v13[1] = sub_10040BD88;
  return ((uint64_t (*)(void *, void *, uint64_t, uint64_t (*)(), void))v16)( v0 + 2,  &unk_1009AD458,  v11,  sub_100411404,  0LL);
}

uint64_t sub_10040BD88()
{
  uint64_t v2 = *(void *)(*v1 + 120);
  uint64_t v3 = *v1;
  *(void *)(v3 + 128) = v0;
  swift_task_dealloc(v2);
  swift_bridgeObjectRelease();
  swift_release();
  if (v0) {
    return swift_task_switch(sub_10040BE18, *(void *)(v3 + 48), 0LL);
  }
  swift_task_dealloc(*(void *)(v3 + 104));
  return (*(uint64_t (**)(void))(v3 + 8))();
}

uint64_t sub_10040BE18()
{
  if (qword_10099B408 != -1) {
    swift_once(&qword_10099B408, sub_10040B754);
  }
  uint64_t v1 = *(void *)(v0 + 128);
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2A940);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  BOOL v6 = os_log_type_enabled(v4, v5);
  uint64_t v7 = *(void *)(v0 + 128);
  if (v6)
  {
    uint64_t v8 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 138543362;
    swift_errorRetain(v7);
    uint64_t v10 = _swift_stdlib_bridgeErrorToNSError(v7);
    *(void *)(v0 + 40) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 40, v0 + 48, v8 + 4, v8 + 12);
    *uint64_t v9 = v10;
    swift_errorRelease(v7);
    swift_errorRelease(v7);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Throttled publish event threw error: %{public}@.", v8, 0xCu);
    uint64_t v11 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v9, 1LL, v11);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    swift_errorRelease(*(void *)(v0 + 128));
    swift_errorRelease(v7);
  }

  uint64_t v12 = *(void *)(v0 + 128);
  uint64_t v13 = *(void *)(v0 + 80);

  *(void *)(v0 + 32) = v12;
  CheckedContinuation.resume(throwing:)(v0 + 32, v13);
  swift_task_dealloc(*(void *)(v0 + 104));
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10040BFF4(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v3[9] = a2;
  v3[10] = a3;
  v3[8] = a1;
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  v3[11] = swift_task_alloc((*(void *)(*(void *)(v4 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v5 = type metadata accessor for Date(0LL);
  v3[12] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  v3[13] = v6;
  v3[14] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_10040C07C, 0LL, 0LL);
}

uint64_t sub_10040C07C()
{
  if (qword_10099B408 != -1) {
    swift_once(&qword_10099B408, sub_10040B754);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2A940);
  v0[15] = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Publish event is executing.", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  uint64_t v7 = v0[13];
  uint64_t v6 = v0[14];
  uint64_t v9 = v0[11];
  uint64_t v8 = v0[12];

  uint64_t MyNetworkPublishDateProvider = type metadata accessor for FindMyNetworkPublishDateProvider();
  uint64_t v11 = swift_allocObject(MyNetworkPublishDateProvider, 112LL, 15LL);
  v0[16] = v11;
  swift_defaultActor_initialize(v11);
  static Date.trustedNow.getter(v6);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(v7 + 16))(v9, v6, v8);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v7 + 56))(v9, 0LL, 1LL, v8);
  sub_10041195C(v9);
  uint64_t v12 = (void *)swift_task_alloc(dword_1009AD31C);
  v0[17] = v12;
  *uint64_t v12 = v0;
  v12[1] = sub_10040C1F8;
  uint64_t v13 = v0[8];
  v12[16] = v13;
  return swift_task_switch(sub_10040FF3C, v13, 0LL);
}

uint64_t sub_10040C1F8()
{
  uint64_t v2 = *(void *)(*v1 + 136);
  uint64_t v3 = *v1;
  *(void *)(v3 + 144) = v0;
  swift_task_dealloc(v2);
  if (v0) {
    return swift_task_switch(sub_10040C8E4, 0LL, 0LL);
  }
  uint64_t v5 = (void *)swift_task_alloc(dword_1009AD314);
  *(void *)(v3 + 152) = v5;
  *uint64_t v5 = v3;
  v5[1] = sub_10040C284;
  return sub_10040F348();
}

uint64_t sub_10040C284(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 152);
  *(void *)(v3 + 160) = a1;
  *(void *)(v3 + 168) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_10040C954;
  }
  else {
    uint64_t v5 = sub_10040C2F0;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_10040C2F0()
{
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = v0[20];
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v5 = 134217984;
    v0[7] = *(void *)(v4 + 16);
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 7, v0 + 8, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Publish found %ld observations to publish.", v5, 0xCu);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  uint64_t v6 = (void *)swift_task_alloc(dword_1009AD30C);
  v0[22] = v6;
  *uint64_t v6 = v0;
  v6[1] = sub_10040C408;
  return sub_10040CF20(v0[20]);
}

uint64_t sub_10040C408(uint64_t a1)
{
  uint64_t v3 = *v2;
  uint64_t v4 = *(void *)(*v2 + 176);
  *(void *)(v3 + 184) = a1;
  *(void *)(v3 + 192) = v1;
  swift_task_dealloc(v4);
  if (v1) {
    uint64_t v5 = sub_10040C9C4;
  }
  else {
    uint64_t v5 = sub_10040C474;
  }
  return swift_task_switch(v5, 0LL, 0LL);
}

uint64_t sub_10040C474()
{
  uint64_t v1 = *(void *)(v0 + 72);
  if (v1)
  {
    uint64_t v2 = dword_1009AD324;
    swift_retain();
    uint64_t v3 = (void *)swift_task_alloc(v2);
    *(void *)(v0 + 200) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10040C6B0;
    return sub_100410468(v1, *(void *)(v0 + 160), 0LL);
  }

  else
  {
    swift_bridgeObjectRetain(*(void *)(v0 + 160));
    uint64_t v6 = (os_log_s *)Logger.logObject.getter(v5);
    os_log_type_t v7 = static os_log_type_t.default.getter(v6);
    BOOL v8 = os_log_type_enabled(v6, v7);
    uint64_t v9 = *(void *)(v0 + 160);
    if (v8)
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v10 = 134217984;
      uint64_t v11 = *(void *)(v9 + 16);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 48) = v11;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v10 + 4, v10 + 12);
      swift_bridgeObjectRelease();
      _os_log_impl((void *)&_mh_execute_header, v6, v7, "Published %ld observations to Find My network.", v10, 0xCu);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 160), 2LL);
    }

    uint64_t v12 = *(void **)(v0 + 184);
    uint64_t v14 = *(void *)(v0 + 104);
    uint64_t v13 = *(void *)(v0 + 112);
    uint64_t v15 = *(void *)(v0 + 96);
    uint64_t v16 = sub_1006F0F78((uint64_t)&off_100936D38);
    unsigned __int8 v17 = sub_100411504();
    BOOL v18 = sub_1004E4AB8(v17, v16);
    swift_bridgeObjectRelease();
    char v19 = sub_100013734();
    if ((v19 & 1) != 0) {
      unsigned int v20 = 2;
    }
    else {
      unsigned int v20 = 3;
    }
    if (v18) {
      uint64_t v21 = v20;
    }
    else {
      uint64_t v21 = (v19 & 1) == 0;
    }
    sub_10040AA44(v13, v21);
    *(void *)(v0 + 40) = v12;
    id v22 = v12;
    uint64_t v23 = sub_100004AEC(&qword_1009AD438);
    CheckedContinuation.resume(returning:)(v0 + 40, v23);
    swift_release();

    (*(void (**)(uint64_t, uint64_t))(v14 + 8))(v13, v15);
    uint64_t v24 = *(void *)(v0 + 88);
    swift_task_dealloc(*(void *)(v0 + 112));
    swift_task_dealloc(v24);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(1LL);
  }

uint64_t sub_10040C6B0()
{
  return swift_task_switch(sub_10040C704, 0LL, 0LL);
}

uint64_t sub_10040C704()
{
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = *(void *)(v0 + 160);
    uint64_t v5 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    *(_DWORD *)uint64_t v5 = 134217984;
    uint64_t v6 = *(void *)(v4 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 48) = v6;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 48, v0 + 56, v5 + 4, v5 + 12);
    swift_bridgeObjectRelease();
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Published %ld observations to Find My network.", v5, 0xCu);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  else
  {
    swift_bridgeObjectRelease_n(*(void *)(v0 + 160), 2LL);
  }

  os_log_type_t v7 = *(void **)(v0 + 184);
  uint64_t v9 = *(void *)(v0 + 104);
  uint64_t v8 = *(void *)(v0 + 112);
  uint64_t v10 = *(void *)(v0 + 96);
  uint64_t v11 = sub_1006F0F78((uint64_t)&off_100936D38);
  unsigned __int8 v12 = sub_100411504();
  BOOL v13 = sub_1004E4AB8(v12, v11);
  swift_bridgeObjectRelease();
  char v14 = sub_100013734();
  if ((v14 & 1) != 0) {
    unsigned int v15 = 2;
  }
  else {
    unsigned int v15 = 3;
  }
  if (v13) {
    uint64_t v16 = v15;
  }
  else {
    uint64_t v16 = (v14 & 1) == 0;
  }
  sub_10040AA44(v8, v16);
  *(void *)(v0 + 40) = v7;
  id v17 = v7;
  uint64_t v18 = sub_100004AEC(&qword_1009AD438);
  CheckedContinuation.resume(returning:)(v0 + 40, v18);
  swift_release();

  (*(void (**)(uint64_t, uint64_t))(v9 + 8))(v8, v10);
  uint64_t v19 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1LL);
}

uint64_t sub_10040C8E4()
{
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 96);
  swift_release(*(void *)(v0 + 128));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_10040C954()
{
  uint64_t v2 = *(void *)(v0 + 104);
  uint64_t v1 = *(void *)(v0 + 112);
  uint64_t v4 = *(void *)(v0 + 88);
  uint64_t v3 = *(void *)(v0 + 96);
  swift_release(*(void *)(v0 + 128));
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v1, v3);
  swift_task_dealloc(v1);
  swift_task_dealloc(v4);
  return (*(uint64_t (**)(void))(v0 + 8))(0LL);
}

uint64_t sub_10040C9C4()
{
  uint64_t v1 = *(void *)(v0 + 72);
  uint64_t v2 = *(void *)(v0 + 192);
  if (v1)
  {
    swift_retain();
    swift_errorRetain(v2);
    uint64_t v3 = (void *)swift_task_alloc(dword_1009AD324);
    *(void *)(v0 + 208) = v3;
    *uint64_t v3 = v0;
    v3[1] = sub_10040CC70;
    return sub_100410468(v1, *(void *)(v0 + 160), v2);
  }

  else
  {
    uint64_t v5 = *(void *)(v0 + 160);
    swift_errorRetain(*(void *)(v0 + 192));
    swift_bridgeObjectRetain(v5);
    uint64_t v6 = swift_errorRetain(v2);
    os_log_type_t v7 = (os_log_s *)Logger.logObject.getter(v6);
    os_log_type_t v8 = static os_log_type_t.error.getter(v7);
    BOOL v9 = os_log_type_enabled(v7, v8);
    uint64_t v10 = *(void *)(v0 + 192);
    uint64_t v11 = *(void *)(v0 + 160);
    if (v9)
    {
      uint64_t v12 = swift_slowAlloc(22LL, -1LL);
      BOOL v13 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v12 = 134218242;
      uint64_t v14 = *(void *)(v11 + 16);
      swift_bridgeObjectRelease();
      *(void *)(v0 + 24) = v14;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v12 + 4, v12 + 12);
      swift_bridgeObjectRelease();
      *(_WORD *)(v12 + 12) = 2114;
      swift_errorRetain(v10);
      uint64_t v15 = _swift_stdlib_bridgeErrorToNSError(v10);
      *(void *)(v0 + 32) = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v12 + 14, v12 + 22);
      *BOOL v13 = v15;
      swift_errorRelease(v10);
      swift_errorRelease(v10);
      _os_log_impl( (void *)&_mh_execute_header,  v7,  v8,  "Failed to publish %ld observations to Find My network. %{public}@.",  (uint8_t *)v12,  0x16u);
      uint64_t v16 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v13, 1LL, v16);
      swift_slowDealloc(v13, -1LL, -1LL);
      swift_slowDealloc(v12, -1LL, -1LL);
    }

    else
    {
      swift_bridgeObjectRelease_n(*(void *)(v0 + 160), 2LL);
      swift_errorRelease(v10);
      swift_errorRelease(v10);
    }

    uint64_t v17 = *(void *)(v0 + 192);
    uint64_t v19 = *(void *)(v0 + 104);
    uint64_t v18 = *(void *)(v0 + 112);
    uint64_t v20 = *(void *)(v0 + 96);

    *(void *)(v0 + swift_weakDestroy(v0 + 16) = v17;
    swift_errorRetain(v17);
    uint64_t v21 = sub_100004AEC(&qword_1009AD438);
    CheckedContinuation.resume(throwing:)(v0 + 16, v21);
    swift_release();
    swift_errorRelease(v17);
    (*(void (**)(uint64_t, uint64_t))(v19 + 8))(v18, v20);
    uint64_t v22 = *(void *)(v0 + 88);
    swift_task_dealloc(*(void *)(v0 + 112));
    swift_task_dealloc(v22);
    return (*(uint64_t (**)(uint64_t))(v0 + 8))(1LL);
  }

uint64_t sub_10040CC70()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 192LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 208LL));
  swift_errorRelease(v1);
  return swift_task_switch(sub_10040CCD0, 0LL, 0LL);
}

uint64_t sub_10040CCD0()
{
  uint64_t v1 = *(void *)(v0 + 192);
  uint64_t v2 = *(void *)(v0 + 160);
  swift_errorRetain(v1);
  swift_bridgeObjectRetain(v2);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = *(void *)(v0 + 192);
    uint64_t v21 = v4;
    uint64_t v7 = *(void *)(v0 + 160);
    uint64_t v8 = swift_slowAlloc(22LL, -1LL);
    BOOL v9 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v8 = 134218242;
    uint64_t v10 = *(void *)(v7 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 24) = v10;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 24, v0 + 32, v8 + 4, v8 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v8 + 12) = 2114;
    swift_errorRetain(v6);
    uint64_t v11 = _swift_stdlib_bridgeErrorToNSError(v6);
    *(void *)(v0 + 32) = v11;
    uint64_t v4 = v21;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 32, v0 + 40, v8 + 14, v8 + 22);
    *BOOL v9 = v11;
    swift_errorRelease(v6);
    swift_errorRelease(v6);
    _os_log_impl( (void *)&_mh_execute_header,  v21,  v5,  "Failed to publish %ld observations to Find My network. %{public}@.",  (uint8_t *)v8,  0x16u);
    uint64_t v12 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v9, 1LL, v12);
    swift_slowDealloc(v9, -1LL, -1LL);
    swift_slowDealloc(v8, -1LL, -1LL);
  }

  else
  {
    uint64_t v13 = *(void *)(v0 + 192);
    swift_bridgeObjectRelease_n(*(void *)(v0 + 160), 2LL);
    swift_errorRelease(v13);
    swift_errorRelease(v13);
  }

  uint64_t v14 = *(void *)(v0 + 192);
  uint64_t v16 = *(void *)(v0 + 104);
  uint64_t v15 = *(void *)(v0 + 112);
  uint64_t v17 = *(void *)(v0 + 96);

  *(void *)(v0 + swift_weakDestroy(v0 + 16) = v14;
  swift_errorRetain(v14);
  uint64_t v18 = sub_100004AEC(&qword_1009AD438);
  CheckedContinuation.resume(throwing:)(v0 + 16, v18);
  swift_release();
  swift_errorRelease(v14);
  (*(void (**)(uint64_t, uint64_t))(v16 + 8))(v15, v17);
  uint64_t v19 = *(void *)(v0 + 88);
  swift_task_dealloc(*(void *)(v0 + 112));
  swift_task_dealloc(v19);
  return (*(uint64_t (**)(uint64_t))(v0 + 8))(1LL);
}

uint64_t sub_10040CF20(uint64_t a1)
{
  v2[33] = a1;
  v2[34] = v1;
  uint64_t v3 = sub_100004AEC(&qword_10099D8A0);
  v2[35] = swift_task_alloc((*(void *)(*(void *)(v3 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v4 = type metadata accessor for UUID(0LL);
  v2[36] = v4;
  uint64_t v5 = *(void *)(v4 - 8);
  v2[37] = v5;
  v2[38] = swift_task_alloc((*(void *)(v5 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = type metadata accessor for FMNServerInteractionController.FMNResponseFields(0LL);
  v2[39] = v6;
  uint64_t v7 = *(void *)(v6 - 8);
  v2[40] = v7;
  unint64_t v8 = (*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[41] = swift_task_alloc(v8);
  v2[42] = swift_task_alloc(v8);
  uint64_t v9 = sub_100004AEC((uint64_t *)&unk_1009A6DB0);
  v2[43] = swift_task_alloc((*(void *)(*(void *)(v9 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = type metadata accessor for SubmitEndpoint(0LL);
  v2[44] = v10;
  unint64_t v11 = (*(void *)(*(void *)(v10 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v2[45] = swift_task_alloc(v11);
  v2[46] = swift_task_alloc(v11);
  return swift_task_switch(sub_10040D034, v1, 0LL);
}

uint64_t sub_10040D034()
{
  uint64_t v1 = *(void *)(v0 + 264);
  if (*(void *)(v1 + 16))
  {
    uint64_t v2 = *(void *)(*(void *)(v0 + 272) + 128LL);
    uint64_t v3 = unk_1009BFEEC;
    uint64_t v17 = (char *)&dword_1009BFEE8 + dword_1009BFEE8;
    swift_bridgeObjectRetain(v1);
    swift_retain();
    uint64_t v4 = (void *)swift_task_alloc(v3);
    *(void *)(v0 + 376) = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_10040D1EC;
    return ((uint64_t (*)(void, uint64_t))v17)(*(void *)(v0 + 264), v2);
  }

  else
  {
    if (qword_10099B408 != -1) {
      swift_once(&qword_10099B408, sub_10040B754);
    }
    uint64_t v6 = type metadata accessor for Logger(0LL);
    uint64_t v7 = sub_10000A720(v6, (uint64_t)qword_100A2A940);
    unint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.default.getter(v8);
    if (os_log_type_enabled(v8, v9))
    {
      uint64_t v10 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v10 = 0;
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "No observations to publish.", v10, 2u);
      swift_slowDealloc(v10, -1LL, -1LL);
    }

    uint64_t v11 = *(void *)(v0 + 360);
    uint64_t v13 = *(void *)(v0 + 336);
    uint64_t v12 = *(void *)(v0 + 344);
    uint64_t v14 = *(void *)(v0 + 328);
    uint64_t v15 = *(void *)(v0 + 304);
    uint64_t v16 = *(void *)(v0 + 280);
    swift_task_dealloc(*(void *)(v0 + 368));
    swift_task_dealloc(v11);
    swift_task_dealloc(v12);
    swift_task_dealloc(v13);
    swift_task_dealloc(v14);
    swift_task_dealloc(v15);
    swift_task_dealloc(v16);
    return (*(uint64_t (**)(void))(v0 + 8))(0LL);
  }

uint64_t sub_10040D1EC(uint64_t a1, uint64_t a2, uint64_t a3)
{
  uint64_t v5 = *(void *)(*v4 + 376);
  uint64_t v6 = *v4;
  *(void *)(v6 + 384) = a1;
  *(void *)(v6 + 392) = a2;
  *(void *)(v6 + 400) = a3;
  swift_task_dealloc(v5);
  if (!v3) {
    return swift_task_switch(sub_10040D2D0, *(void *)(v6 + 272), 0LL);
  }
  uint64_t v7 = *(void *)(v6 + 360);
  uint64_t v9 = *(void *)(v6 + 336);
  uint64_t v8 = *(void *)(v6 + 344);
  uint64_t v10 = *(void *)(v6 + 328);
  uint64_t v11 = *(void *)(v6 + 304);
  uint64_t v12 = *(void *)(v6 + 280);
  swift_task_dealloc(*(void *)(v6 + 368));
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  swift_task_dealloc(v9);
  swift_task_dealloc(v10);
  swift_task_dealloc(v11);
  swift_task_dealloc(v12);
  return (*(uint64_t (**)(void))(v6 + 8))();
}

uint64_t sub_10040D2D0()
{
  uint64_t v2 = v0[49];
  unint64_t v1 = v0[50];
  uint64_t v3 = v0[48];
  uint64_t v5 = v0[45];
  uint64_t v4 = (uint64_t *)v0[46];
  uint64_t v6 = v0[43];
  uint64_t v7 = v0[44];
  uint64_t v8 = type metadata accessor for AnonymousCrowdSourceNetworkURLComponents();
  swift_allocObject(v8, 56LL, 7LL);
  *uint64_t v4 = sub_10009CA4C();
  uint64_t v9 = (char *)v4 + *(int *)(v7 + 20);
  uint64_t v10 = enum case for FMNAccountType.none(_:);
  uint64_t v11 = type metadata accessor for FMNAccountType(0LL);
  (*(void (**)(char *, uint64_t, uint64_t))(*(void *)(v11 - 8) + 104LL))(v9, v10, v11);
  uint64_t v12 = type metadata accessor for SearchPartyURLSessionFactory(0LL);
  swift_allocObject(v12, *(unsigned int *)(v12 + 48), *(unsigned __int16 *)(v12 + 52));
  uint64_t v13 = type metadata accessor for FMNMockingPreferences(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v13 - 8) + 56LL))(v6, 1LL, 1LL, v13);
  uint64_t v14 = FMNURLSessionFactory.init(mockSessionCreationBlock:preferences:)(0LL, 0LL, v6);
  uint64_t v15 = type metadata accessor for ServerInteractionController(0LL);
  uint64_t v16 = swift_allocObject(v15, *(unsigned int *)(v15 + 48), *(unsigned __int16 *)(v15 + 52));
  sub_10001DC4C((uint64_t)v4, v5, type metadata accessor for SubmitEndpoint);
  v0[51] = sub_100431A0C(v5, v14, v16);
  sub_100018C68((uint64_t)v4, type metadata accessor for SubmitEndpoint);
  v0[5] = &type metadata for SubmitUploadv2;
  v0[6] = sub_100411B48();
  v0[2] = v3;
  v0[3] = v2;
  v0[4] = v1;
  swift_bridgeObjectRetain(v3);
  sub_10001736C(v2, v1);
  uint64_t v17 = (void *)swift_task_alloc(dword_1009A4BF4);
  v0[52] = v17;
  *uint64_t v17 = v0;
  v17[1] = sub_10040D474;
  return sub_1001B5210(v0[42], (uint64_t)(v0 + 2));
}

uint64_t sub_10040D474()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 416);
  *(void *)(*v1 + 424) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 272);
    uint64_t v5 = sub_10040E7B8;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 272);
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v2 + 16));
    uint64_t v5 = sub_10040D4E8;
    uint64_t v4 = v6;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_10040D4E8(uint64_t a1)
{
  if ((unint64_t)(FMNServerInteractionController.FMNResponseFields.statusCode.getter(a1) - 300) >= 0xFFFFFFFFFFFFFF9CLL)
  {
    if (qword_10099B9E0 != -1) {
      swift_once(&qword_10099B9E0, sub_10076012C);
    }
    swift_beginAccess(&xmmword_1009BED80, v1 + 216, 0LL, 0LL);
    uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v1 + 136, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v1 + 160))
    {
      sub_100012EC0((__int128 *)(v1 + 136), v1 + 56);
      sub_100012ED8((void *)(v1 + 56), *(void *)(v1 + 80));
      unint64_t v32 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
      uint64_t v17 = (void *)swift_task_alloc(unk_10099C87C);
      *(void *)(v1 + 432) = v17;
      *uint64_t v17 = v1;
      v17[1] = sub_10040D810;
      return v32();
    }

    else
    {
      __break(1u);
    }
  }

  else
  {
    if (qword_10099B400 != -1) {
      swift_once(&qword_10099B400, sub_1003F889C);
    }
    uint64_t v2 = *(void *)(v1 + 328);
    uint64_t v3 = *(void *)(v1 + 336);
    uint64_t v4 = *(void *)(v1 + 312);
    uint64_t v5 = *(void *)(v1 + 320);
    uint64_t v6 = type metadata accessor for Logger(0LL);
    sub_10000A720(v6, (uint64_t)qword_100A2A928);
    uint64_t v7 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v5 + 16))(v2, v3, v4);
    uint64_t v8 = (os_log_s *)Logger.logObject.getter(v7);
    os_log_type_t v9 = static os_log_type_t.error.getter(v8);
    BOOL v10 = os_log_type_enabled(v8, v9);
    uint64_t v12 = *(void *)(v1 + 320);
    uint64_t v11 = *(void *)(v1 + 328);
    uint64_t v13 = *(void *)(v1 + 312);
    if (v10)
    {
      uint64_t v14 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      *(_DWORD *)uint64_t v14 = 134217984;
      uint64_t v15 = FMNServerInteractionController.FMNResponseFields.statusCode.getter(v14);
      uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v31(v11, v13);
      *(void *)(v1 + 256) = v15;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v1 + 256, v1 + 264, v14 + 4, v14 + 12);
      _os_log_impl((void *)&_mh_execute_header, v8, v9, "Failed to publish payloads. Got %ld.", v14, 0xCu);
      swift_slowDealloc(v14, -1LL, -1LL);
    }

    else
    {
      uint64_t v31 = *(void (**)(uint64_t, uint64_t))(v12 + 8);
      v31(*(void *)(v1 + 328), *(void *)(v1 + 312));
    }

    unint64_t v18 = *(void *)(v1 + 400);
    uint64_t v19 = *(void *)(v1 + 392);
    uint64_t v20 = *(void *)(v1 + 336);
    uint64_t v21 = *(void *)(v1 + 312);

    unint64_t v22 = sub_100411B8C();
    uint64_t v23 = swift_allocError(&type metadata for FindMyNetworkPublisherService.Error, v22, 0LL, 0LL);
    *uint64_t v24 = 0;
    swift_willThrow(v23);
    swift_bridgeObjectRelease();
    swift_release();
    sub_100016F9C(v19, v18);
    v31(v20, v21);
    uint64_t v25 = *(void *)(v1 + 360);
    uint64_t v27 = *(void *)(v1 + 336);
    uint64_t v26 = *(void *)(v1 + 344);
    uint64_t v28 = *(void *)(v1 + 328);
    uint64_t v29 = *(void *)(v1 + 304);
    uint64_t v30 = *(void *)(v1 + 280);
    swift_task_dealloc(*(void *)(v1 + 368));
    swift_task_dealloc(v25);
    swift_task_dealloc(v26);
    swift_task_dealloc(v27);
    swift_task_dealloc(v28);
    swift_task_dealloc(v29);
    swift_task_dealloc(v30);
    return (*(uint64_t (**)(void))(v1 + 8))();
  }

  return result;
}

uint64_t sub_10040D810(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 432LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 272LL);
  *(void *)(*(void *)v1 + 44Hasher.init(_seed:)(v3, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10040D870, v3, 0LL);
}

uint64_t sub_10040D870()
{
  uint64_t v1 = v0 + 7;
  if (v0[55])
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc(dword_1009BCE0C);
    v0[56] = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10040DADC;
    return sub_1006D570C(v0[33]);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    unint64_t v4 = sub_1000157D0();
    uint64_t v5 = swift_allocError(&type metadata for DaemonError, v4, 0LL, 0LL);
    *uint64_t v6 = 0xD000000000000017LL;
    v6[1] = 0x800000010085BE10LL;
    swift_willThrow(v5);
    if (qword_10099B408 != -1) {
      swift_once(&qword_10099B408, sub_10040B754);
    }
    uint64_t v7 = type metadata accessor for Logger(0LL);
    sub_10000A720(v7, (uint64_t)qword_100A2A940);
    swift_errorRetain(v5);
    uint64_t v8 = swift_errorRetain(v5);
    os_log_type_t v9 = (os_log_s *)Logger.logObject.getter(v8);
    os_log_type_t v10 = static os_log_type_t.error.getter(v9);
    if (os_log_type_enabled(v9, v10))
    {
      uint64_t v11 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
      uint64_t v12 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
      *(_DWORD *)uint64_t v11 = 138543362;
      swift_errorRetain(v5);
      uint64_t v13 = _swift_stdlib_bridgeErrorToNSError(v5);
      v0[31] = v13;
      UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 31, v0 + 32, v11 + 4, v11 + 12);
      *uint64_t v12 = v13;
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      _os_log_impl((void *)&_mh_execute_header, v9, v10, "Failed to delete observations: %{public}@.", v11, 0xCu);
      uint64_t v14 = sub_100004AEC((uint64_t *)&unk_10099FB20);
      swift_arrayDestroy(v12, 1LL, v14);
      swift_slowDealloc(v12, -1LL, -1LL);
      swift_slowDealloc(v11, -1LL, -1LL);

      swift_errorRelease(v5);
    }

    else
    {
      swift_errorRelease(v5);
      swift_errorRelease(v5);
      swift_errorRelease(v5);
    }

    return swift_task_switch(sub_10040DB4C, v0[34], 0LL);
  }

uint64_t sub_10040DADC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 448);
  *(void *)(*v1 + 456) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 272);
    uint64_t v5 = sub_10040E870;
  }

  else
  {
    swift_release();
    uint64_t v4 = *(void *)(v2 + 272);
    uint64_t v5 = sub_10040DB4C;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_10040DB4C()
{
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 96, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 120))
  {
    sub_100012EC0((__int128 *)(v0 + 96), v0 + 176);
    sub_100012ED8((void *)(v0 + 176), *(void *)(v0 + 200));
    uint64_t v3 = (uint64_t (*)(void))((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 464) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10040DBF0;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10040DBF0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 464LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 272LL);
  *(void *)(*(void *)v1 + 472LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10040DC50, v3, 0LL);
}

uint64_t sub_10040DC50()
{
  uint64_t v1 = (void *)(v0 + 176);
  if (*(void *)(v0 + 472))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc(dword_1009BCE04);
    *(void *)(v0 + 480) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10040E2DC;
    return sub_1006D5860(*(void *)(v0 + 264));
  }

  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
  unint64_t v4 = sub_1000157D0();
  uint64_t v5 = swift_allocError(&type metadata for DaemonError, v4, 0LL, 0LL);
  *uint64_t v6 = 0xD000000000000017LL;
  v6[1] = 0x800000010085BE10LL;
  swift_willThrow(v5);
  uint64_t v7 = &off_10099B000;
  if (qword_10099B408 != -1) {
    swift_once(&qword_10099B408, sub_10040B754);
  }
  uint64_t v8 = type metadata accessor for Logger(0LL);
  sub_10000A720(v8, (uint64_t)qword_100A2A940);
  swift_errorRetain(v5);
  uint64_t v9 = swift_errorRetain(v5);
  os_log_type_t v10 = (os_log_s *)Logger.logObject.getter(v9);
  os_log_type_t v11 = static os_log_type_t.error.getter(v10);
  if (os_log_type_enabled(v10, v11))
  {
    uint64_t v12 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v13 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v12 = 138543362;
    swift_errorRetain(v5);
    uint64_t v14 = _swift_stdlib_bridgeErrorToNSError(v5);
    *(void *)(v0 + 240) = v14;
    uint64_t v7 = &off_10099B000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v12 + 4, v12 + 12);
    *uint64_t v13 = v14;
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    _os_log_impl((void *)&_mh_execute_header, v10, v11, "Failed to mark observations published: %{public}@.", v12, 0xCu);
    uint64_t v15 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v13, 1LL, v15);
    swift_slowDealloc(v13, -1LL, -1LL);
    swift_slowDealloc(v12, -1LL, -1LL);

    uint64_t v16 = swift_errorRelease(v5);
  }

  else
  {
    swift_errorRelease(v5);
    swift_errorRelease(v5);
    swift_errorRelease(v5);
  }

  uint64_t v17 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v16);
  unint64_t v18 = sub_10040F03C(v17);
  swift_bridgeObjectRelease();
  if (!v18[2] || (uint64_t v19 = sub_10030CF14(0xD000000000000014LL, 0x8000000100861A00LL), (v20 & 1) == 0))
  {
    swift_bridgeObjectRelease();
    goto LABEL_13;
  }

  uint64_t v22 = *(void *)(v0 + 288);
  uint64_t v21 = *(void *)(v0 + 296);
  uint64_t v23 = *(void *)(v0 + 280);
  uint64_t v24 = (uint64_t *)(v18[7] + 16 * v19);
  uint64_t v25 = *v24;
  uint64_t v26 = v24[1];
  swift_bridgeObjectRetain(v26);
  swift_bridgeObjectRelease();
  UUID.init(uuidString:)(v25, v26);
  swift_bridgeObjectRelease();
  if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v21 + 48))(v23, 1LL, v22) == 1)
  {
    sub_100015794(*(void *)(v0 + 280), &qword_10099D8A0);
LABEL_13:
    if (v7[129] != (_UNKNOWN *)-1LL) {
      swift_once(&qword_10099B408, sub_10040B754);
    }
    uint64_t v27 = sub_10000A720(v8, (uint64_t)qword_100A2A940);
    uint64_t v28 = (os_log_s *)Logger.logObject.getter(v27);
    os_log_type_t v29 = static os_log_type_t.error.getter(v28);
    if (os_log_type_enabled(v28, v29))
    {
      uint64_t v30 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
      *(_WORD *)uint64_t v30 = 0;
      _os_log_impl((void *)&_mh_execute_header, v28, v29, "Failed to parse X-Apple-Sign1 header", v30, 2u);
      swift_slowDealloc(v30, -1LL, -1LL);
    }

    unint64_t v31 = *(void *)(v0 + 400);
    uint64_t v32 = *(void *)(v0 + 392);
    uint64_t v33 = *(void *)(v0 + 336);
    uint64_t v34 = *(void *)(v0 + 312);
    uint64_t v35 = *(void *)(v0 + 320);
    swift_bridgeObjectRelease();
    swift_release();

    sub_100016F9C(v32, v31);
    (*(void (**)(uint64_t, uint64_t))(v35 + 8))(v33, v34);
    id v36 = 0LL;
    goto LABEL_18;
  }

  uint64_t v43 = *(void *)(v0 + 384);
  (*(void (**)(void, void, void))(*(void *)(v0 + 296) + 32LL))( *(void *)(v0 + 304),  *(void *)(v0 + 280),  *(void *)(v0 + 288));
  uint64_t v44 = sub_10040F03C(v43);
  if (!v44[2] || (uint64_t v45 = sub_10030CF14(0x2D656C7070612D78LL, 0xED0000316E676973LL), (v46 & 1) == 0))
  {
    uint64_t v53 = *(void *)(v0 + 296);
    uint64_t v54 = *(void *)(v0 + 304);
    uint64_t v55 = *(void *)(v0 + 288);
    swift_bridgeObjectRelease();
    (*(void (**)(uint64_t, uint64_t))(v53 + 8))(v54, v55);
    goto LABEL_13;
  }

  uint64_t v47 = (uint64_t *)(v44[7] + 16 * v45);
  uint64_t v48 = *v47;
  uint64_t v49 = v47[1];
  swift_bridgeObjectRetain(v49);
  swift_bridgeObjectRelease();
  uint64_t v50 = Data.init(base64Encoded:options:)(v48, v49, 0LL);
  unint64_t v52 = v51;
  swift_bridgeObjectRelease();
  if (v52 >> 60 == 15)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 296) + 8LL))(*(void *)(v0 + 304), *(void *)(v0 + 288));
    goto LABEL_13;
  }

  Class isa = (const __CFData *)Data._bridgeToObjectiveC()().super.isa;
  SecCertificateRef v57 = SecCertificateCreateWithData(0LL, isa);

  if (!v57)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 296) + 8LL))(*(void *)(v0 + 304), *(void *)(v0 + 288));
LABEL_29:
    sub_1000182F0(v50, v52);
    goto LABEL_13;
  }

  uint64_t v58 = SecCertificateCopySubjectPublicKeyInfoSHA256Digest(v57);
  if (!v58)
  {
    (*(void (**)(void, void))(*(void *)(v0 + 296) + 8LL))(*(void *)(v0 + 304), *(void *)(v0 + 288));

    goto LABEL_29;
  }

  uint64_t v59 = (void *)v58;
  uint64_t v69 = *(void *)(v0 + 392);
  unint64_t v70 = *(void *)(v0 + 400);
  uint64_t v71 = *(void *)(v0 + 320);
  uint64_t v72 = *(void *)(v0 + 312);
  uint64_t v73 = *(void *)(v0 + 336);
  uint64_t v66 = *(void *)(v0 + 304);
  uint64_t v67 = *(void *)(v0 + 296);
  uint64_t v68 = *(void *)(v0 + 288);
  uint64_t v60 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v58);
  unint64_t v62 = v61;

  id v63 = objc_allocWithZone(&OBJC_CLASS___SPPublishResult);
  Class v64 = UUID._bridgeToObjectiveC()().super.isa;
  Class v65 = Data._bridgeToObjectiveC()().super.isa;
  id v36 = [v63 initWithRequestUUID:v64 aaaPubKeyHash:v65];

  sub_100016F9C(v60, v62);
  sub_1000182F0(v50, v52);
  swift_release();

  swift_bridgeObjectRelease();
  sub_100016F9C(v69, v70);
  (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v66, v68);
  (*(void (**)(uint64_t, uint64_t))(v71 + 8))(v73, v72);
LABEL_18:
  uint64_t v37 = *(void *)(v0 + 360);
  uint64_t v39 = *(void *)(v0 + 336);
  uint64_t v38 = *(void *)(v0 + 344);
  uint64_t v40 = *(void *)(v0 + 328);
  uint64_t v41 = *(void *)(v0 + 304);
  uint64_t v42 = *(void *)(v0 + 280);
  swift_task_dealloc(*(void *)(v0 + 368));
  swift_task_dealloc(v37);
  swift_task_dealloc(v38);
  swift_task_dealloc(v39);
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  return (*(uint64_t (**)(id))(v0 + 8))(v36);
}

uint64_t sub_10040E2DC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 480);
  *(void *)(*v1 + 488) = v0;
  swift_task_dealloc(v3);
  if (v0)
  {
    uint64_t v4 = *(void *)(v2 + 272);
    uint64_t v5 = sub_10040EA48;
  }

  else
  {
    uint64_t v6 = *(void *)(v2 + 272);
    swift_release();
    uint64_t v5 = sub_10040E350;
    uint64_t v4 = v6;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_10040E350(uint64_t a1)
{
  uint64_t v2 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(a1);
  uint64_t v3 = sub_10040F03C(v2);
  swift_bridgeObjectRelease();
  if (v3[2] && (uint64_t v4 = sub_10030CF14(0xD000000000000014LL, 0x8000000100861A00LL), (v5 & 1) != 0))
  {
    uint64_t v6 = *(void *)(v1 + 288);
    uint64_t v7 = *(void *)(v1 + 296);
    uint64_t v8 = *(void *)(v1 + 280);
    uint64_t v9 = (uint64_t *)(v3[7] + 16 * v4);
    uint64_t v10 = *v9;
    uint64_t v11 = v9[1];
    swift_bridgeObjectRetain(v11);
    swift_bridgeObjectRelease();
    UUID.init(uuidString:)(v10, v11);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v7 + 48))(v8, 1LL, v6) == 1)
    {
      sub_100015794(*(void *)(v1 + 280), &qword_10099D8A0);
    }

    else
    {
      uint64_t v30 = *(void *)(v1 + 384);
      (*(void (**)(void, void, void))(*(void *)(v1 + 296) + 32LL))( *(void *)(v1 + 304),  *(void *)(v1 + 280),  *(void *)(v1 + 288));
      unint64_t v31 = sub_10040F03C(v30);
      if (v31[2] && (uint64_t v32 = sub_10030CF14(0x2D656C7070612D78LL, 0xED0000316E676973LL), (v33 & 1) != 0))
      {
        uint64_t v34 = (uint64_t *)(v31[7] + 16 * v32);
        uint64_t v35 = *v34;
        uint64_t v36 = v34[1];
        swift_bridgeObjectRetain(v36);
        swift_bridgeObjectRelease();
        uint64_t v37 = Data.init(base64Encoded:options:)(v35, v36, 0LL);
        unint64_t v39 = v38;
        swift_bridgeObjectRelease();
        if (v39 >> 60 == 15)
        {
          (*(void (**)(void, void))(*(void *)(v1 + 296) + 8LL))( *(void *)(v1 + 304),  *(void *)(v1 + 288));
        }

        else
        {
          Class isa = (const __CFData *)Data._bridgeToObjectiveC()().super.isa;
          SecCertificateRef v44 = SecCertificateCreateWithData(0LL, isa);

          if (v44)
          {
            uint64_t v45 = SecCertificateCopySubjectPublicKeyInfoSHA256Digest(v44);
            if (v45)
            {
              char v46 = (void *)v45;
              uint64_t v56 = *(void *)(v1 + 392);
              unint64_t v57 = *(void *)(v1 + 400);
              uint64_t v58 = *(void *)(v1 + 320);
              uint64_t v59 = *(void *)(v1 + 312);
              uint64_t v60 = *(void *)(v1 + 336);
              uint64_t v53 = *(void *)(v1 + 304);
              uint64_t v54 = *(void *)(v1 + 296);
              uint64_t v55 = *(void *)(v1 + 288);
              uint64_t v47 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v45);
              unint64_t v49 = v48;

              id v50 = objc_allocWithZone(&OBJC_CLASS___SPPublishResult);
              Class v51 = UUID._bridgeToObjectiveC()().super.isa;
              Class v52 = Data._bridgeToObjectiveC()().super.isa;
              id v22 = [v50 initWithRequestUUID:v51 aaaPubKeyHash:v52];

              sub_100016F9C(v47, v49);
              sub_1000182F0(v37, v39);
              swift_release();

              swift_bridgeObjectRelease();
              sub_100016F9C(v56, v57);
              (*(void (**)(uint64_t, uint64_t))(v54 + 8))(v53, v55);
              (*(void (**)(uint64_t, uint64_t))(v58 + 8))(v60, v59);
              goto LABEL_11;
            }

            (*(void (**)(void, void))(*(void *)(v1 + 296) + 8LL))( *(void *)(v1 + 304),  *(void *)(v1 + 288));
          }

          else
          {
            (*(void (**)(void, void))(*(void *)(v1 + 296) + 8LL))( *(void *)(v1 + 304),  *(void *)(v1 + 288));
          }

          sub_1000182F0(v37, v39);
        }
      }

      else
      {
        uint64_t v41 = *(void *)(v1 + 296);
        uint64_t v40 = *(void *)(v1 + 304);
        uint64_t v42 = *(void *)(v1 + 288);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v41 + 8))(v40, v42);
      }
    }
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  if (qword_10099B408 != -1) {
    swift_once(&qword_10099B408, sub_10040B754);
  }
  uint64_t v12 = type metadata accessor for Logger(0LL);
  uint64_t v13 = sub_10000A720(v12, (uint64_t)qword_100A2A940);
  uint64_t v14 = (os_log_s *)Logger.logObject.getter(v13);
  os_log_type_t v15 = static os_log_type_t.error.getter(v14);
  if (os_log_type_enabled(v14, v15))
  {
    uint64_t v16 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v16 = 0;
    _os_log_impl((void *)&_mh_execute_header, v14, v15, "Failed to parse X-Apple-Sign1 header", v16, 2u);
    swift_slowDealloc(v16, -1LL, -1LL);
  }

  unint64_t v17 = *(void *)(v1 + 400);
  uint64_t v18 = *(void *)(v1 + 392);
  uint64_t v19 = *(void *)(v1 + 336);
  uint64_t v20 = *(void *)(v1 + 312);
  uint64_t v21 = *(void *)(v1 + 320);
  swift_bridgeObjectRelease();
  swift_release();

  sub_100016F9C(v18, v17);
  (*(void (**)(uint64_t, uint64_t))(v21 + 8))(v19, v20);
  id v22 = 0LL;
LABEL_11:
  uint64_t v23 = *(void *)(v1 + 360);
  uint64_t v25 = *(void *)(v1 + 336);
  uint64_t v24 = *(void *)(v1 + 344);
  uint64_t v26 = *(void *)(v1 + 328);
  uint64_t v27 = *(void *)(v1 + 304);
  uint64_t v28 = *(void *)(v1 + 280);
  swift_task_dealloc(*(void *)(v1 + 368));
  swift_task_dealloc(v23);
  swift_task_dealloc(v24);
  swift_task_dealloc(v25);
  swift_task_dealloc(v26);
  swift_task_dealloc(v27);
  swift_task_dealloc(v28);
  return (*(uint64_t (**)(id))(v1 + 8))(v22);
}

uint64_t sub_10040E7B8()
{
  unint64_t v1 = *(void *)(v0 + 400);
  uint64_t v2 = *(void *)(v0 + 392);
  swift_bridgeObjectRelease();
  sub_100016F9C(v2, v1);
  swift_release();
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  uint64_t v3 = *(void *)(v0 + 360);
  uint64_t v5 = *(void *)(v0 + 336);
  uint64_t v4 = *(void *)(v0 + 344);
  uint64_t v6 = *(void *)(v0 + 328);
  uint64_t v7 = *(void *)(v0 + 304);
  uint64_t v8 = *(void *)(v0 + 280);
  swift_task_dealloc(*(void *)(v0 + 368));
  swift_task_dealloc(v3);
  swift_task_dealloc(v4);
  swift_task_dealloc(v5);
  swift_task_dealloc(v6);
  swift_task_dealloc(v7);
  swift_task_dealloc(v8);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10040E870()
{
  uint64_t v1 = v0[57];
  if (qword_10099B408 != -1) {
    swift_once(&qword_10099B408, sub_10040B754);
  }
  uint64_t v2 = type metadata accessor for Logger(0LL);
  sub_10000A720(v2, (uint64_t)qword_100A2A940);
  swift_errorRetain(v1);
  uint64_t v3 = swift_errorRetain(v1);
  uint64_t v4 = (os_log_s *)Logger.logObject.getter(v3);
  os_log_type_t v5 = static os_log_type_t.error.getter(v4);
  if (os_log_type_enabled(v4, v5))
  {
    uint64_t v6 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v7 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v6 = 138543362;
    swift_errorRetain(v1);
    uint64_t v8 = _swift_stdlib_bridgeErrorToNSError(v1);
    v0[31] = v8;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 31, v0 + 32, v6 + 4, v6 + 12);
    *uint64_t v7 = v8;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v4, v5, "Failed to delete observations: %{public}@.", v6, 0xCu);
    uint64_t v9 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v7, 1LL, v9);
    swift_slowDealloc(v7, -1LL, -1LL);
    swift_slowDealloc(v6, -1LL, -1LL);

    swift_errorRelease(v1);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  return swift_task_switch(sub_10040DB4C, v0[34], 0LL);
}

uint64_t sub_10040EA48()
{
  uint64_t v1 = *(void *)(v0 + 488);
  uint64_t v2 = &off_10099B000;
  if (qword_10099B408 != -1) {
    swift_once(&qword_10099B408, sub_10040B754);
  }
  uint64_t v3 = type metadata accessor for Logger(0LL);
  sub_10000A720(v3, (uint64_t)qword_100A2A940);
  swift_errorRetain(v1);
  uint64_t v4 = swift_errorRetain(v1);
  os_log_type_t v5 = (os_log_s *)Logger.logObject.getter(v4);
  os_log_type_t v6 = static os_log_type_t.error.getter(v5);
  if (os_log_type_enabled(v5, v6))
  {
    uint64_t v7 = (uint8_t *)swift_slowAlloc(12LL, -1LL);
    uint64_t v8 = (uint64_t *)swift_slowAlloc(8LL, -1LL);
    *(_DWORD *)uint64_t v7 = 138543362;
    swift_errorRetain(v1);
    uint64_t v9 = _swift_stdlib_bridgeErrorToNSError(v1);
    *(void *)(v0 + 240) = v9;
    uint64_t v2 = &off_10099B000;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 240, v0 + 248, v7 + 4, v7 + 12);
    *uint64_t v8 = v9;
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    _os_log_impl((void *)&_mh_execute_header, v5, v6, "Failed to mark observations published: %{public}@.", v7, 0xCu);
    uint64_t v10 = sub_100004AEC((uint64_t *)&unk_10099FB20);
    swift_arrayDestroy(v8, 1LL, v10);
    swift_slowDealloc(v8, -1LL, -1LL);
    swift_slowDealloc(v7, -1LL, -1LL);

    uint64_t v11 = swift_errorRelease(v1);
  }

  else
  {
    swift_errorRelease(v1);
    swift_errorRelease(v1);
    swift_errorRelease(v1);
  }

  uint64_t v12 = FMNServerInteractionController.FMNResponseFields.responseHeaders.getter(v11);
  uint64_t v13 = sub_10040F03C(v12);
  swift_bridgeObjectRelease();
  if (v13[2] && (uint64_t v14 = sub_10030CF14(0xD000000000000014LL, 0x8000000100861A00LL), (v15 & 1) != 0))
  {
    uint64_t v17 = *(void *)(v0 + 288);
    uint64_t v16 = *(void *)(v0 + 296);
    uint64_t v18 = *(void *)(v0 + 280);
    uint64_t v19 = (uint64_t *)(v13[7] + 16 * v14);
    uint64_t v20 = *v19;
    uint64_t v21 = v19[1];
    swift_bridgeObjectRetain(v21);
    swift_bridgeObjectRelease();
    UUID.init(uuidString:)(v20, v21);
    swift_bridgeObjectRelease();
    if ((*(unsigned int (**)(uint64_t, uint64_t, uint64_t))(v16 + 48))(v18, 1LL, v17) == 1)
    {
      sub_100015794(*(void *)(v0 + 280), &qword_10099D8A0);
    }

    else
    {
      uint64_t v39 = *(void *)(v0 + 384);
      (*(void (**)(void, void, void))(*(void *)(v0 + 296) + 32LL))( *(void *)(v0 + 304),  *(void *)(v0 + 280),  *(void *)(v0 + 288));
      uint64_t v40 = sub_10040F03C(v39);
      if (v40[2] && (uint64_t v41 = sub_10030CF14(0x2D656C7070612D78LL, 0xED0000316E676973LL), (v42 & 1) != 0))
      {
        uint64_t v43 = (uint64_t *)(v40[7] + 16 * v41);
        uint64_t v44 = *v43;
        uint64_t v45 = v43[1];
        swift_bridgeObjectRetain(v45);
        swift_bridgeObjectRelease();
        uint64_t v46 = Data.init(base64Encoded:options:)(v44, v45, 0LL);
        unint64_t v48 = v47;
        swift_bridgeObjectRelease();
        if (v48 >> 60 == 15)
        {
          (*(void (**)(void, void))(*(void *)(v0 + 296) + 8LL))( *(void *)(v0 + 304),  *(void *)(v0 + 288));
        }

        else
        {
          Class isa = (const __CFData *)Data._bridgeToObjectiveC()().super.isa;
          SecCertificateRef v53 = SecCertificateCreateWithData(0LL, isa);

          if (v53)
          {
            uint64_t v54 = SecCertificateCopySubjectPublicKeyInfoSHA256Digest(v53);
            if (v54)
            {
              uint64_t v55 = (void *)v54;
              uint64_t v65 = *(void *)(v0 + 392);
              unint64_t v66 = *(void *)(v0 + 400);
              uint64_t v67 = *(void *)(v0 + 320);
              uint64_t v68 = *(void *)(v0 + 312);
              uint64_t v69 = *(void *)(v0 + 336);
              uint64_t v62 = *(void *)(v0 + 304);
              uint64_t v63 = *(void *)(v0 + 296);
              uint64_t v64 = *(void *)(v0 + 288);
              uint64_t v56 = static Data._unconditionallyBridgeFromObjectiveC(_:)(v54);
              unint64_t v58 = v57;

              id v59 = objc_allocWithZone(&OBJC_CLASS___SPPublishResult);
              Class v60 = UUID._bridgeToObjectiveC()().super.isa;
              Class v61 = Data._bridgeToObjectiveC()().super.isa;
              id v31 = [v59 initWithRequestUUID:v60 aaaPubKeyHash:v61];

              sub_100016F9C(v56, v58);
              sub_1000182F0(v46, v48);
              swift_release();

              swift_bridgeObjectRelease();
              sub_100016F9C(v65, v66);
              (*(void (**)(uint64_t, uint64_t))(v63 + 8))(v62, v64);
              (*(void (**)(uint64_t, uint64_t))(v67 + 8))(v69, v68);
              goto LABEL_16;
            }

            (*(void (**)(void, void))(*(void *)(v0 + 296) + 8LL))( *(void *)(v0 + 304),  *(void *)(v0 + 288));
          }

          else
          {
            (*(void (**)(void, void))(*(void *)(v0 + 296) + 8LL))( *(void *)(v0 + 304),  *(void *)(v0 + 288));
          }

          sub_1000182F0(v46, v48);
        }
      }

      else
      {
        uint64_t v49 = *(void *)(v0 + 296);
        uint64_t v50 = *(void *)(v0 + 304);
        uint64_t v51 = *(void *)(v0 + 288);
        swift_bridgeObjectRelease();
        (*(void (**)(uint64_t, uint64_t))(v49 + 8))(v50, v51);
      }
    }
  }

  else
  {
    swift_bridgeObjectRelease();
  }

  if (v2[129] != (_UNKNOWN *)-1LL) {
    swift_once(&qword_10099B408, sub_10040B754);
  }
  uint64_t v22 = sub_10000A720(v3, (uint64_t)qword_100A2A940);
  uint64_t v23 = (os_log_s *)Logger.logObject.getter(v22);
  os_log_type_t v24 = static os_log_type_t.error.getter(v23);
  if (os_log_type_enabled(v23, v24))
  {
    uint64_t v25 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v25 = 0;
    _os_log_impl((void *)&_mh_execute_header, v23, v24, "Failed to parse X-Apple-Sign1 header", v25, 2u);
    swift_slowDealloc(v25, -1LL, -1LL);
  }

  unint64_t v26 = *(void *)(v0 + 400);
  uint64_t v27 = *(void *)(v0 + 392);
  uint64_t v28 = *(void *)(v0 + 336);
  uint64_t v29 = *(void *)(v0 + 312);
  uint64_t v30 = *(void *)(v0 + 320);
  swift_bridgeObjectRelease();
  swift_release();

  sub_100016F9C(v27, v26);
  (*(void (**)(uint64_t, uint64_t))(v30 + 8))(v28, v29);
  id v31 = 0LL;
LABEL_16:
  uint64_t v32 = *(void *)(v0 + 360);
  uint64_t v34 = *(void *)(v0 + 336);
  uint64_t v33 = *(void *)(v0 + 344);
  uint64_t v35 = *(void *)(v0 + 328);
  uint64_t v36 = *(void *)(v0 + 304);
  uint64_t v37 = *(void *)(v0 + 280);
  swift_task_dealloc(*(void *)(v0 + 368));
  swift_task_dealloc(v32);
  swift_task_dealloc(v33);
  swift_task_dealloc(v34);
  swift_task_dealloc(v35);
  swift_task_dealloc(v36);
  swift_task_dealloc(v37);
  return (*(uint64_t (**)(id))(v0 + 8))(v31);
}

void *sub_10040F03C(uint64_t a1)
{
  uint64_t v29 = a1 + 64;
  uint64_t v1 = 1LL << *(_BYTE *)(a1 + 32);
  uint64_t v2 = -1LL;
  if (v1 < 64) {
    uint64_t v2 = ~(-1LL << v1);
  }
  unint64_t v3 = v2 & *(void *)(a1 + 64);
  int64_t v30 = (unint64_t)(v1 + 63) >> 6;
  swift_bridgeObjectRetain(a1);
  int64_t v4 = 0LL;
  while (1)
  {
    if (v3)
    {
      unint64_t v6 = __clz(__rbit64(v3));
      v3 &= v3 - 1;
      unint64_t v7 = v6 | (v4 << 6);
    }

    else
    {
      int64_t v8 = v4 + 1;
      if (__OFADD__(v4, 1LL)) {
        goto LABEL_40;
      }
      if (v8 >= v30)
      {
LABEL_37:
        swift_release();
        return _swiftEmptyDictionarySingleton;
      }

      unint64_t v9 = *(void *)(v29 + 8 * v8);
      ++v4;
      if (!v9)
      {
        int64_t v4 = v8 + 1;
        if (v8 + 1 >= v30) {
          goto LABEL_37;
        }
        unint64_t v9 = *(void *)(v29 + 8 * v4);
        if (!v9)
        {
          int64_t v4 = v8 + 2;
          if (v8 + 2 >= v30) {
            goto LABEL_37;
          }
          unint64_t v9 = *(void *)(v29 + 8 * v4);
          if (!v9)
          {
            int64_t v4 = v8 + 3;
            if (v8 + 3 >= v30) {
              goto LABEL_37;
            }
            unint64_t v9 = *(void *)(v29 + 8 * v4);
            if (!v9)
            {
              int64_t v4 = v8 + 4;
              if (v8 + 4 >= v30) {
                goto LABEL_37;
              }
              unint64_t v9 = *(void *)(v29 + 8 * v4);
              if (!v9)
              {
                int64_t v10 = v8 + 5;
                if (v10 >= v30) {
                  goto LABEL_37;
                }
                unint64_t v9 = *(void *)(v29 + 8 * v10);
                if (!v9)
                {
                  while (1)
                  {
                    int64_t v4 = v10 + 1;
                    if (__OFADD__(v10, 1LL)) {
                      goto LABEL_41;
                    }
                    if (v4 >= v30) {
                      goto LABEL_37;
                    }
                    unint64_t v9 = *(void *)(v29 + 8 * v4);
                    ++v10;
                    if (v9) {
                      goto LABEL_25;
                    }
                  }
                }

                int64_t v4 = v10;
              }
            }
          }
        }
      }

uint64_t sub_10040F348()
{
  v1[29] = v0;
  uint64_t v2 = sub_100004AEC(&qword_10099E770);
  v1[30] = swift_task_alloc((*(void *)(*(void *)(v2 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v3 = type metadata accessor for ObservedAdvertisement(0LL);
  v1[31] = v3;
  uint64_t v4 = *(void *)(v3 - 8);
  v1[32] = v4;
  unint64_t v5 = (*(void *)(v4 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  v1[33] = swift_task_alloc(v5);
  v1[34] = swift_task_alloc(v5);
  return swift_task_switch(sub_10040F3DC, v0, 0LL);
}

uint64_t sub_10040F3DC()
{
  if (qword_10099B318 != -1) {
    swift_once(&qword_10099B318, sub_100352F58);
  }
  *(void *)(v0 + 280) = qword_100A2A710;
  return swift_task_switch(sub_10040F444, 0LL, 0LL);
}

uint64_t sub_10040F444()
{
  uint64_t v1 = async function pointer to unsafeBlocking<A>(_:)[1];
  swift_retain();
  uint64_t v2 = (void *)swift_task_alloc(v1);
  *(void *)(v0 + 288) = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10040F4B8;
  return unsafeBlocking<A>(_:)(v0 + 200, sub_100015814, *(void *)(v0 + 280), &type metadata for Configuration);
}

uint64_t sub_10040F4B8()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 280LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 288LL));
  swift_release(v1);
  return swift_task_switch(sub_10040F514, 0LL, 0LL);
}

uint64_t sub_10040F514()
{
  uint64_t v1 = v0[29];
  v0[37] = v0[25];
  return swift_task_switch(sub_10040F530, v1, 0LL);
}

uint64_t sub_10040F530()
{
  *(void *)(v0 + 304) = sub_1006A0BEC(*(void *)(v0 + 296));
  swift_bridgeObjectRelease();
  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 176, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 96, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 120))
  {
    sub_100012EC0((__int128 *)(v0 + 96), v0 + 56);
    sub_100012ED8((void *)(v0 + 56), *(void *)(v0 + 80));
    uint64_t v3 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v2 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 312) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10040F634;
    return v3();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_10040F634(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 312LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 232LL);
  *(void *)(*(void *)v1 + 32Hasher.init(_seed:)(v3, 0LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10040F694, v3, 0LL);
}

uint64_t sub_10040F694()
{
  uint64_t v1 = (void *)(v0 + 56);
  if (*(void *)(v0 + 320))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc(dword_1009BCDD4);
    *(void *)(v0 + 328) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10040F774;
    return sub_1006D5F98(*(void *)(v0 + 304));
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    unint64_t v4 = sub_1000157D0();
    uint64_t v5 = swift_allocError(&type metadata for DaemonError, v4, 0LL, 0LL);
    *unint64_t v6 = 0xD000000000000017LL;
    v6[1] = 0x800000010085BE10LL;
    swift_willThrow(v5);
    uint64_t v7 = *(void *)(v0 + 264);
    uint64_t v8 = *(void *)(v0 + 240);
    swift_task_dealloc(*(void *)(v0 + 272));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10040F774(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 328LL);
  v3[42] = a1;
  v3[43] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    uint64_t v5 = v3[29];
    unint64_t v6 = sub_10040FE68;
  }

  else
  {
    uint64_t v7 = v3[29];
    swift_release(v3[40]);
    unint64_t v6 = sub_10040F7F0;
    uint64_t v5 = v7;
  }

  return swift_task_switch(v6, v5, 0LL);
}

void sub_10040F7F0()
{
  uint64_t v1 = *(void *)(v0 + 304);
  uint64_t v2 = *(void *)(*(void *)(v0 + 336) + 16LL);
  *(void *)(v0 + 352) = v2;
  BOOL v3 = __OFSUB__(v1, v2);
  uint64_t v4 = v1 - v2;
  if (v3)
  {
    __break(1u);
  }

  else
  {
    *(void *)(v0 + 360) = v4 & ~(v4 >> 63);
    sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 136, (uint64_t *)&unk_10099FA80);
    if (*(void *)(v0 + 160))
    {
      sub_100012EC0((__int128 *)(v0 + 136), v0 + 16);
      sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
      unint64_t v6 = (void (*)(void))((char *)&dword_10099C878 + dword_10099C878);
      uint64_t v5 = (void *)swift_task_alloc(unk_10099C87C);
      *(void *)(v0 + 368) = v5;
      *uint64_t v5 = v0;
      v5[1] = sub_10040F8B8;
      v6();
      return;
    }
  }

  __break(1u);
}

uint64_t sub_10040F8B8(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 368LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 232LL);
  *(void *)(*(void *)v1 + 376LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_10040F918, v3, 0LL);
}

uint64_t sub_10040F918()
{
  uint64_t v1 = (void *)(v0 + 16);
  if (*(void *)(v0 + 376))
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    uint64_t v2 = (void *)swift_task_alloc(dword_1009BCE4C);
    *(void *)(v0 + 384) = v2;
    *uint64_t v2 = v0;
    v2[1] = sub_10040FA0C;
    return sub_1006D61B8(*(void *)(v0 + 360), 0);
  }

  else
  {
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v1);
    unint64_t v4 = sub_1000157D0();
    uint64_t v5 = swift_allocError(&type metadata for DaemonError, v4, 0LL, 0LL);
    *unint64_t v6 = 0xD000000000000017LL;
    v6[1] = 0x800000010085BE10LL;
    swift_willThrow(v5);
    swift_bridgeObjectRelease();
    uint64_t v7 = *(void *)(v0 + 264);
    uint64_t v8 = *(void *)(v0 + 240);
    swift_task_dealloc(*(void *)(v0 + 272));
    swift_task_dealloc(v7);
    swift_task_dealloc(v8);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_10040FA0C(uint64_t a1)
{
  uint64_t v3 = *(void **)v2;
  uint64_t v4 = *(void *)(*(void *)v2 + 384LL);
  v3[49] = a1;
  v3[50] = v1;
  swift_task_dealloc(v4);
  if (v1)
  {
    uint64_t v5 = v3[29];
    unint64_t v6 = sub_10040FEC0;
  }

  else
  {
    uint64_t v7 = v3[29];
    swift_release(v3[47]);
    unint64_t v6 = sub_10040FA88;
    uint64_t v5 = v7;
  }

  return swift_task_switch(v6, v5, 0LL);
}

uint64_t sub_10040FA88()
{
  uint64_t v1 = *(void *)(v0 + 392);
  uint64_t v36 = *(void **)(v0 + 336);
  swift_bridgeObjectRetain(v36);
  uint64_t v2 = swift_bridgeObjectRetain(v1);
  sub_1001840AC(v2);
  uint64_t v3 = v36;
  uint64_t v4 = _swiftEmptyArrayStorage;
  uint64_t v5 = v36[2];
  if (v5)
  {
    unint64_t v6 = 0LL;
    uint64_t v7 = *(void *)(v0 + 256);
    uint64_t v32 = *(void *)(v0 + 248);
    uint64_t v31 = v7;
    while (v6 < v36[2])
    {
      uint64_t v8 = v4;
      uint64_t v9 = *(void *)(v0 + 272);
      uint64_t v10 = *(void *)(v0 + 240);
      unint64_t v33 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
      uint64_t v35 = *(void *)(v7 + 72);
      sub_10001DC4C((uint64_t)v36 + v33 + v35 * v6, v9, type metadata accessor for ObservedAdvertisement);
      sub_10001581C(v9 + *(int *)(v32 + 48), v10, &qword_10099E770);
      uint64_t v11 = type metadata accessor for ObservedAdvertisement.Location(0LL);
      LODWORD(v9) = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v11 - 8) + 48LL))(v10, 1LL, v11);
      sub_100015794(v10, &qword_10099E770);
      uint64_t v12 = *(void *)(v0 + 272);
      if ((_DWORD)v9 == 1)
      {
        sub_100018C68(v12, type metadata accessor for ObservedAdvertisement);
        uint64_t v4 = v8;
      }

      else
      {
        sub_100411B04(v12, *(void *)(v0 + 264));
        uint64_t v4 = v8;
        if ((swift_isUniquelyReferenced_nonNull_native(v8) & 1) == 0)
        {
          sub_1000329B8(0, v8[2] + 1LL, 1);
          uint64_t v4 = _swiftEmptyArrayStorage;
        }

        unint64_t v14 = v4[2];
        unint64_t v13 = v4[3];
        if (v14 >= v13 >> 1)
        {
          sub_1000329B8(v13 > 1, v14 + 1, 1);
          uint64_t v4 = _swiftEmptyArrayStorage;
        }

        uint64_t v15 = *(void *)(v0 + 264);
        void v4[2] = v14 + 1;
        sub_100411B04(v15, (uint64_t)v4 + v33 + v14 * v35);
        uint64_t v7 = v31;
      }

      if (v5 == ++v6) {
        goto LABEL_12;
      }
    }

    __break(1u);
  }

  else
  {
LABEL_12:
    uint64_t v3 = v4;
    swift_bridgeObjectRelease();
    if (qword_10099B408 == -1) {
      goto LABEL_13;
    }
  }

  swift_once(&qword_10099B408, sub_10040B754);
LABEL_13:
  uint64_t v16 = *(void *)(v0 + 392);
  uint64_t v17 = *(void *)(v0 + 336);
  uint64_t v18 = type metadata accessor for Logger(0LL);
  sub_10000A720(v18, (uint64_t)qword_100A2A940);
  swift_retain_n(v3, 2LL);
  swift_bridgeObjectRetain(v17);
  uint64_t v19 = swift_bridgeObjectRetain(v16);
  uint64_t v20 = (os_log_s *)Logger.logObject.getter(v19);
  os_log_type_t v21 = static os_log_type_t.default.getter(v20);
  BOOL v22 = os_log_type_enabled(v20, v21);
  uint64_t v23 = *(void *)(v0 + 392);
  if (v22)
  {
    uint64_t v34 = *(void *)(v0 + 352);
    uint64_t v24 = swift_slowAlloc(32LL, -1LL);
    *(_DWORD *)uint64_t v24 = 134218496;
    uint64_t v25 = *(void *)(v23 + 16);
    swift_bridgeObjectRelease();
    *(void *)(v0 + 208) = v25;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 208, v0 + 216, v24 + 4, v24 + 12);
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 12) = 2048;
    swift_bridgeObjectRelease();
    *(void *)(v0 + 2swift_weakDestroy(v0 + 16) = v34;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 216, v0 + 224, v24 + 14, v24 + 22);
    swift_bridgeObjectRelease();
    *(_WORD *)(v24 + 22) = 2048;
    uint64_t v26 = v3[2];
    swift_release(v3);
    *(void *)(v0 + 224) = v26;
    UnsafeMutableRawBufferPointer.copyMemory(from:)(v0 + 224, v0 + 232, v24 + 24, v24 + 32);
    swift_release(v3);
    _os_log_impl( (void *)&_mh_execute_header,  v20,  v21,  "Reconciled = %ld, Anonymous = %ld, with location: %ld.",  (uint8_t *)v24,  0x20u);
    swift_slowDealloc(v24, -1LL, -1LL);
  }

  else
  {
    uint64_t v27 = *(void *)(v0 + 336);
    swift_release_n(v3, 2LL);
    swift_bridgeObjectRelease_n(v27, 2LL);
    swift_bridgeObjectRelease_n(v23, 2LL);
  }

  uint64_t v28 = *(void *)(v0 + 264);
  uint64_t v29 = *(void *)(v0 + 240);
  swift_task_dealloc(*(void *)(v0 + 272));
  swift_task_dealloc(v28);
  swift_task_dealloc(v29);
  return (*(uint64_t (**)(void *))(v0 + 8))(v3);
}

uint64_t sub_10040FE68()
{
  uint64_t v1 = *(void *)(v0 + 264);
  uint64_t v2 = *(void *)(v0 + 240);
  swift_task_dealloc(*(void *)(v0 + 272));
  swift_task_dealloc(v1);
  swift_task_dealloc(v2);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10040FEC0()
{
  uint64_t v1 = *(void *)(v0 + 376);
  swift_bridgeObjectRelease(*(void *)(v0 + 336));
  swift_release(v1);
  uint64_t v2 = *(void *)(v0 + 264);
  uint64_t v3 = *(void *)(v0 + 240);
  swift_task_dealloc(*(void *)(v0 + 272));
  swift_task_dealloc(v2);
  swift_task_dealloc(v3);
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_10040FF24()
{
  *(void *)(v1 + 128) = v0;
  return swift_task_switch(sub_10040FF3C, v0, 0LL);
}

uint64_t sub_10040FF3C()
{
  if (qword_10099B408 != -1) {
    swift_once(&qword_10099B408, sub_10040B754);
  }
  uint64_t v1 = type metadata accessor for Logger(0LL);
  uint64_t v2 = sub_10000A720(v1, (uint64_t)qword_100A2A940);
  *(void *)(v0 + 136) = v2;
  uint64_t v3 = (os_log_s *)Logger.logObject.getter(v2);
  os_log_type_t v4 = static os_log_type_t.default.getter(v3);
  if (os_log_type_enabled(v3, v4))
  {
    uint64_t v5 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v5 = 0;
    _os_log_impl((void *)&_mh_execute_header, v3, v4, "Purge observations start.", v5, 2u);
    swift_slowDealloc(v5, -1LL, -1LL);
  }

  if (qword_10099B9E0 != -1) {
    swift_once(&qword_10099B9E0, sub_10076012C);
  }
  swift_beginAccess(&xmmword_1009BED80, v0 + 96, 0LL, 0LL);
  uint64_t result = sub_10001581C((uint64_t)&xmmword_1009BED80, v0 + 56, (uint64_t *)&unk_10099FA80);
  if (*(void *)(v0 + 80))
  {
    sub_100012EC0((__int128 *)(v0 + 56), v0 + 16);
    sub_100012ED8((void *)(v0 + 16), *(void *)(v0 + 40));
    uint64_t v8 = (uint64_t (__cdecl *)())((char *)&dword_10099C878 + dword_10099C878);
    uint64_t v7 = (void *)swift_task_alloc(unk_10099C87C);
    *(void *)(v0 + 144) = v7;
    *uint64_t v7 = v0;
    v7[1] = sub_1004100E0;
    return v8();
  }

  else
  {
    __break(1u);
  }

  return result;
}

uint64_t sub_1004100E0(uint64_t a1)
{
  uint64_t v2 = *(void *)(*(void *)v1 + 144LL);
  uint64_t v3 = *(void *)(*(void *)v1 + 128LL);
  *(void *)(*(void *)v1 + 152LL) = a1;
  swift_task_dealloc(v2);
  return swift_task_switch(sub_100410140, v3, 0LL);
}

uint64_t sub_100410140()
{
  uint64_t v1 = *(void *)(v0 + 152);
  _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0((void *)(v0 + 16));
  if (v1)
  {
    if (qword_10099B318 != -1) {
      swift_once(&qword_10099B318, sub_100352F58);
    }
    OS_dispatch_queue.sync<A>(execute:)(sub_100022170, qword_100A2A710, &type metadata for Configuration);
    *(void *)(v0 + 160) = 0LL;
    *(void *)(v0 + 168) = sub_1006A1550(*(void *)(v0 + 120));
    swift_bridgeObjectRelease();
    return swift_task_switch(sub_100410254, *(void *)(v0 + 152), 0LL);
  }

  else
  {
    unint64_t v3 = sub_1000157D0();
    uint64_t v4 = swift_allocError(&type metadata for DaemonError, v3, 0LL, 0LL);
    *uint64_t v5 = 0xD000000000000017LL;
    v5[1] = 0x800000010085BE10LL;
    swift_willThrow(v4);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_100410254()
{
  uint64_t v1 = v0[20];
  sub_1006D7810(v0[21]);
  v0[22] = v1;
  if (v1)
  {
    uint64_t v2 = v0[16];
    swift_bridgeObjectRelease();
    return swift_task_switch(sub_100410400, v2, 0LL);
  }

  else
  {
    swift_bridgeObjectRelease();
    uint64_t v4 = (void *)swift_task_alloc(dword_1009BCDCC);
    v0[23] = v4;
    *uint64_t v4 = v0;
    v4[1] = sub_1004102EC;
    return sub_1006D4E20();
  }

uint64_t sub_1004102EC()
{
  uint64_t v2 = *v1;
  uint64_t v3 = *(void *)(*v1 + 184);
  *(void *)(*v1 + 192) = v0;
  swift_task_dealloc(v3);
  if (v0) {
    uint64_t v4 = sub_100410434;
  }
  else {
    uint64_t v4 = sub_100410350;
  }
  return swift_task_switch(v4, *(void *)(v2 + 128), 0LL);
}

uint64_t sub_100410350(uint64_t a1)
{
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(a1);
  os_log_type_t v3 = static os_log_type_t.default.getter();
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Purge observations finished.", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  uint64_t v5 = *(void *)(v1 + 152);

  swift_release(v5);
  return (*(uint64_t (**)(void))(v1 + 8))();
}

uint64_t sub_100410400()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100410434()
{
  return (*(uint64_t (**)(void))(v0 + 8))();
}

uint64_t sub_100410468(uint64_t a1, uint64_t a2, uint64_t a3)
{
  void v4[4] = a3;
  void v4[5] = v3;
  void v4[2] = a1;
  void v4[3] = a2;
  uint64_t v5 = type metadata accessor for UUID(0LL);
  void v4[6] = v5;
  uint64_t v6 = *(void *)(v5 - 8);
  void v4[7] = v6;
  void v4[8] = swift_task_alloc((*(void *)(v6 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = *(void *)(type metadata accessor for ObservedAdvertisement(0LL) - 8);
  void v4[9] = v7;
  v4[10] = swift_task_alloc((*(void *)(v7 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  return swift_task_switch(sub_1004104F0, v3, 0LL);
}

uint64_t sub_1004104F0()
{
  uint64_t v1 = unk_1009BE114;
  uint64_t v4 = (uint64_t (*)(uint64_t, uint64_t))((char *)&dword_1009BE110 + dword_1009BE110);
  swift_bridgeObjectRetain(v0[3]);
  uint64_t v2 = (void *)swift_task_alloc(v1);
  v0[11] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_10041055C;
  return v4(v0[2], v0[3]);
}

uint64_t sub_10041055C()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 88));
  swift_bridgeObjectRelease();
  uint64_t v3 = *(void *)(v2 + 40);
  if (v0)
  {
    swift_errorRelease(v0);
    uint64_t v4 = sub_10041209C;
  }

  else
  {
    uint64_t v4 = sub_1004105DC;
  }

  return swift_task_switch(v4, v3, 0LL);
}

uint64_t sub_1004105DC()
{
  uint64_t v1 = type metadata accessor for AnalyticsPublisher();
  v0[12] = v1;
  uint64_t v2 = swift_allocObject(v1, 112LL, 15LL);
  v0[13] = v2;
  swift_defaultActor_initialize(v2);
  uint64_t v3 = (uint64_t **)swift_task_alloc(dword_1009BDE0C);
  v0[14] = (uint64_t)v3;
  *uint64_t v3 = v0;
  v3[1] = (uint64_t *)sub_10041064C;
  return sub_100713F88(v0[2]);
}

uint64_t sub_10041064C()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 112LL));
  swift_release();
  return swift_task_switch(sub_1004106AC, v1, 0LL);
}

uint64_t sub_1004106AC()
{
  uint64_t v1 = *(void *)(v0 + 24);
  uint64_t v2 = *(void *)(v1 + 16);
  *(void *)(v0 + 120) = v2;
  if (v2)
  {
    uint64_t v3 = *(void *)(v0 + 32);
    uint64_t v4 = *(void *)(v0 + 16);
    uint64_t v5 = OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_identifier;
    *(void *)(v0 + 128) = OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_identifier;
    uint64_t v7 = *(void *)(v0 + 64);
    uint64_t v6 = *(void *)(v0 + 72);
    int v8 = *(_DWORD *)(v6 + 80);
    *(_DWORD *)(v0 + 192) = v8;
    *(void *)(v0 + 136) = *(void *)(v6 + 72);
    *(void *)(v0 + 144) = 0LL;
    uint64_t v9 = *(void *)(v0 + 80);
    uint64_t v10 = *(void *)(v0 + 48);
    uint64_t v11 = *(void *)(v0 + 56);
    uint64_t v12 = v1 + ((v8 + 32LL) & ~(unint64_t)v8);
    uint64_t v13 = v4 + v5;
    swift_bridgeObjectRetain(v1);
    sub_10001DC4C(v12, v9, type metadata accessor for ObservedAdvertisement);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v11 + 16))(v7, v13, v10);
    uint64_t v14 = type metadata accessor for AnalyticsEvent(0LL);
    uint64_t v15 = (char *)swift_allocObject(v14, *(unsigned int *)(v14 + 48), *(unsigned __int16 *)(v14 + 52));
    *(void *)(v0 + 152) = v15;
    swift_defaultActor_initialize(v15);
    unint64_t v16 = sub_10041271C((uint64_t)_swiftEmptyArrayStorage);
    *((void *)v15 + 14) = v16;
    UUID.init()(v16);
    uint64_t v17 = &v15[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
    uint64_t v18 = type metadata accessor for DispatchTime(0LL);
    uint64_t v19 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v18 - 8) + 56LL);
    v19(v17, 1LL, 1LL, v18);
    v19(&v15[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1LL, 1LL, v18);
    *((void *)v15 + 15) = 0xD000000000000038LL;
    *((void *)v15 + swift_weakDestroy(v0 + 16) = 0x8000000100861690LL;
    uint64_t v20 = swift_task_alloc(48LL);
    *(void *)(v0 + 160) = v20;
    *(void *)(v20 + swift_weakDestroy(v0 + 16) = v9;
    *(void *)(v20 + 24) = v7;
    *(_BYTE *)(v20 + 32) = v3 == 0;
    *(void *)(v20 + 40) = v3;
    os_log_type_t v21 = (void *)swift_task_alloc(dword_1009BDCB4);
    *(void *)(v0 + 168) = v21;
    *os_log_type_t v21 = v0;
    v21[1] = sub_1004108B4;
    return sub_100712484((uint64_t)&unk_1009AD410, v20);
  }

  else
  {
    uint64_t v23 = *(void *)(v0 + 64);
    swift_task_dealloc(*(void *)(v0 + 80));
    swift_task_dealloc(v23);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

uint64_t sub_1004108B4()
{
  uint64_t v2 = *v1;
  swift_task_dealloc(*(void *)(*v1 + 168));
  uint64_t v3 = *(void *)(v2 + 160);
  uint64_t v4 = *(void *)(v2 + 40);
  if (v0)
  {
    swift_errorRelease(v0);
    swift_task_dealloc(v3);
    uint64_t v5 = sub_1004120A0;
  }

  else
  {
    swift_task_dealloc(v3);
    uint64_t v5 = sub_10041093C;
  }

  return swift_task_switch(v5, v4, 0LL);
}

uint64_t sub_10041093C()
{
  uint64_t v1 = swift_allocObject(v0[12], 112LL, 15LL);
  v0[22] = v1;
  swift_defaultActor_initialize(v1);
  uint64_t v2 = (void *)swift_task_alloc(dword_1009BDE0C);
  v0[23] = v2;
  *uint64_t v2 = v0;
  v2[1] = sub_1004109A4;
  return sub_100713F88(v0[19]);
}

uint64_t sub_1004109A4()
{
  uint64_t v1 = *(void *)(*(void *)v0 + 40LL);
  swift_task_dealloc(*(void *)(*(void *)v0 + 184LL));
  swift_release();
  return swift_task_switch(sub_100410A04, v1, 0LL);
}

uint64_t sub_100410A04()
{
  uint64_t v1 = *(void *)(v0 + 144);
  uint64_t v2 = *(void *)(v0 + 120);
  uint64_t v3 = *(void *)(v0 + 80);
  uint64_t v5 = *(void *)(v0 + 56);
  uint64_t v4 = *(void *)(v0 + 64);
  uint64_t v6 = *(void *)(v0 + 48);
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v5 + 8))(v4, v6);
  sub_100018C68(v3, type metadata accessor for ObservedAdvertisement);
  if (v1 + 1 == v2)
  {
    swift_bridgeObjectRelease();
    uint64_t v7 = *(void *)(v0 + 64);
    swift_task_dealloc(*(void *)(v0 + 80));
    swift_task_dealloc(v7);
    return (*(uint64_t (**)(void))(v0 + 8))();
  }

  else
  {
    uint64_t v9 = *(void *)(v0 + 136);
    uint64_t v10 = *(void *)(v0 + 144) + 1LL;
    *(void *)(v0 + 144) = v10;
    uint64_t v11 = *(void *)(v0 + 80);
    uint64_t v13 = *(void *)(v0 + 56);
    uint64_t v12 = *(void *)(v0 + 64);
    uint64_t v14 = *(void *)(v0 + 48);
    uint64_t v15 = *(void *)(v0 + 32);
    uint64_t v16 = *(void *)(v0 + 16) + *(void *)(v0 + 128);
    sub_10001DC4C( *(void *)(v0 + 24)
    + ((*(unsigned __int8 *)(v0 + 192) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v0 + 192))
    + v9 * v10,
      v11,
      type metadata accessor for ObservedAdvertisement);
    (*(void (**)(uint64_t, uint64_t, uint64_t))(v13 + 16))(v12, v16, v14);
    uint64_t v17 = type metadata accessor for AnalyticsEvent(0LL);
    uint64_t v18 = (char *)swift_allocObject(v17, *(unsigned int *)(v17 + 48), *(unsigned __int16 *)(v17 + 52));
    *(void *)(v0 + 152) = v18;
    swift_defaultActor_initialize(v18);
    unint64_t v19 = sub_10041271C((uint64_t)_swiftEmptyArrayStorage);
    *((void *)v18 + 14) = v19;
    UUID.init()(v19);
    uint64_t v20 = &v18[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_startTime];
    uint64_t v21 = type metadata accessor for DispatchTime(0LL);
    BOOL v22 = *(void (**)(char *, uint64_t, uint64_t, uint64_t))(*(void *)(v21 - 8) + 56LL);
    v22(v20, 1LL, 1LL, v21);
    v22(&v18[OBJC_IVAR____TtC12searchpartyd14AnalyticsEvent_endTime], 1LL, 1LL, v21);
    *((void *)v18 + 15) = 0xD000000000000038LL;
    *((void *)v18 + swift_weakDestroy(v0 + 16) = 0x8000000100861690LL;
    uint64_t v23 = swift_task_alloc(48LL);
    *(void *)(v0 + 160) = v23;
    *(void *)(v23 + swift_weakDestroy(v0 + 16) = v11;
    *(void *)(v23 + 24) = v12;
    *(_BYTE *)(v23 + 32) = v15 == 0;
    *(void *)(v23 + 40) = v15;
    uint64_t v24 = (void *)swift_task_alloc(dword_1009BDCB4);
    *(void *)(v0 + 168) = v24;
    *uint64_t v24 = v0;
    v24[1] = sub_1004108B4;
    return sub_100712484((uint64_t)&unk_1009AD410, v23);
  }

uint64_t sub_100410C30(uint64_t a1)
{
  *(void *)(v1 + 176) = a1;
  return swift_task_switch(sub_100410C48, 0LL, 0LL);
}

uint64_t sub_100410C48()
{
  unint64_t v1 = *(void *)(*(void *)(v0 + 176) + 16LL);
  uint64_t v2 = sub_100728DAC(v1);
  uint64_t v3 = sub_100004AEC(&qword_10099CA50);
  uint64_t inited = swift_initStackObject(v3, v0 + 16);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_1007E4750;
  *(void *)(inited + 32) = 0xD000000000000010LL;
  *(void *)(inited + 40) = 0x8000000100850890LL;
  *(void *)(inited + 72) = &type metadata for Int;
  unint64_t v5 = sub_10001570C();
  *(void *)(inited + 80) = v5;
  *(void *)(inited + 48) = v1;
  *(_WORD *)(inited + 88) = 2;
  *(void *)(inited + 96) = 0xD000000000000015LL;
  *(void *)(inited + 104) = 0x80000001008619E0LL;
  *(void *)(inited + 136) = &type metadata for Int;
  *(void *)(inited + 144) = v5;
  *(void *)(inited + 112) = v2;
  *(_WORD *)(inited + 152) = 2;
  unint64_t v6 = sub_10041285C(inited);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v6);
}

uint64_t sub_100410D28(uint64_t a1, uint64_t a2, char a3, uint64_t a4)
{
  *(void *)(v4 + 832) = a4;
  *(_BYTE *)(v4 + 602) = a3;
  *(void *)(v4 + 824) = a2;
  *(void *)(v4 + 8swift_weakDestroy(v0 + 16) = a1;
  uint64_t v5 = sub_100004AEC(&qword_10099E770);
  *(void *)(v4 + 840) = swift_task_alloc((*(void *)(*(void *)(v5 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = sub_100004AEC((uint64_t *)&unk_10099D720);
  *(void *)(v4 + 848) = swift_task_alloc((*(void *)(*(void *)(v6 - 8) + 64LL) + 15LL) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v7 = type metadata accessor for Date(0LL);
  *(void *)(v4 + 856) = v7;
  uint64_t v8 = *(void *)(v7 - 8);
  *(void *)(v4 + 864) = v8;
  unint64_t v9 = (*(void *)(v8 + 64) + 15LL) & 0xFFFFFFFFFFFFFFF0LL;
  *(void *)(v4 + 872) = swift_task_alloc(v9);
  *(void *)(v4 + 880) = swift_task_alloc(v9);
  return swift_task_switch(sub_100410DEC, 0LL, 0LL);
}

uint64_t sub_100410DEC()
{
  uint64_t v1 = *(void *)(v0 + 840);
  uint64_t v2 = *(void *)(v0 + 816);
  uint64_t v3 = type metadata accessor for ObservedAdvertisement(0LL);
  sub_10001581C(v2 + *(int *)(v3 + 48), v1, &qword_10099E770);
  uint64_t v4 = type metadata accessor for ObservedAdvertisement.Location(0LL);
  int v5 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 48LL))(v1, 1LL, v4);
  uint64_t v6 = *(void *)(v0 + 864);
  uint64_t v7 = *(void *)(v0 + 856);
  uint64_t v8 = *(void *)(v0 + 848);
  uint64_t v9 = *(void *)(v0 + 840);
  if (v5 == 1)
  {
    sub_100015794(*(void *)(v0 + 840), &qword_10099E770);
    uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t, uint64_t))(v6 + 56))(v8, 1LL, 1LL, v7);
LABEL_4:
    uint64_t v11 = *(void *)(v0 + 848);
    static Date.distantPast.getter(v10);
    sub_100015794(v11, (uint64_t *)&unk_10099D720);
    goto LABEL_6;
  }

  (*(void (**)(void, uint64_t, void))(v6 + 16))( *(void *)(v0 + 848),  v9 + *(int *)(v4 + 28),  *(void *)(v0 + 856));
  sub_100018C68(v9, type metadata accessor for ObservedAdvertisement.Location);
  (*(void (**)(uint64_t, void, uint64_t, uint64_t))(v6 + 56))(v8, 0LL, 1LL, v7);
  uint64_t v10 = (*(uint64_t (**)(uint64_t, uint64_t, uint64_t))(v6 + 48))(v8, 1LL, v7);
  if ((_DWORD)v10 == 1) {
    goto LABEL_4;
  }
  (*(void (**)(void, void, void))(*(void *)(v0 + 864) + 32LL))( *(void *)(v0 + 880),  *(void *)(v0 + 848),  *(void *)(v0 + 856));
LABEL_6:
  uint64_t v12 = *(void *)(v0 + 872);
  uint64_t v13 = *(void *)(v0 + 864);
  uint64_t v14 = *(void *)(v0 + 856);
  uint64_t v47 = *(void *)(v0 + 832);
  char v15 = *(_BYTE *)(v0 + 602);
  uint64_t v16 = *(void *)(v0 + 816);
  uint64_t v17 = v16 + *(int *)(v3 + 44);
  double v18 = Date.timeIntervalSince(_:)(v17);
  static Date.trustedNow.getter(v12);
  double v19 = Date.timeIntervalSince(_:)(v17);
  uint64_t v20 = *(void (**)(uint64_t, uint64_t))(v13 + 8);
  v20(v12, v14);
  uint64_t v21 = sub_100004AEC(&qword_10099CA50);
  uint64_t inited = swift_initStackObject(v21, v0 + 16);
  *(_OWORD *)(inited + swift_weakDestroy(v0 + 16) = xmmword_100800620;
  *(void *)(inited + 32) = 0x496E6F6973736573LL;
  *(void *)(inited + 40) = 0xE900000000000044LL;
  uint64_t v23 = UUID.uuidString.getter(inited);
  uint64_t v25 = v24;
  *(void *)(inited + 72) = &type metadata for String;
  unint64_t v46 = sub_1000155F8();
  *(void *)(inited + 80) = v46;
  *(void *)(inited + 48) = v23;
  *(void *)(inited + 56) = v25;
  *(_WORD *)(inited + 88) = 1;
  *(void *)(inited + 96) = 0xD000000000000016LL;
  *(void *)(inited + 104) = 0x80000001008616D0LL;
  *(void *)(inited + 136) = &type metadata for Double;
  unint64_t v26 = sub_1000156C8();
  *(void *)(inited + 144) = v26;
  *(double *)(inited + 112) = v18;
  *(_WORD *)(inited + 152) = 3;
  *(void *)(inited + 160) = 0xD000000000000015LL;
  *(void *)(inited + 168) = 0x80000001008616F0LL;
  *(void *)(inited + 200) = &type metadata for Double;
  *(void *)(inited + 208) = v26;
  *(double *)(inited + 176) = v19;
  *(_WORD *)(inited + 2swift_weakDestroy(v0 + 16) = 3;
  *(void *)(inited + 224) = 0x7942737574617473LL;
  *(void *)(inited + 232) = 0xEA00000000006574LL;
  LOBYTE(v25) = *(_BYTE *)(v16 + 32);
  *(void *)(inited + 264) = &type metadata for UInt8;
  *(void *)(inited + 272) = sub_1000B1244();
  *(_BYTE *)(inited + 240) = v25;
  *(_WORD *)(inited + 280) = 2;
  *(void *)(inited + 288) = 0xD000000000000015LL;
  *(void *)(inited + 296) = 0x80000001008565E0LL;
  *(void *)(inited + 328) = &type metadata for Int;
  unint64_t v27 = sub_10001570C();
  *(void *)(inited + 336) = v27;
  *(void *)(inited + 304) = 0LL;
  *(_WORD *)(inited + 344) = 2;
  *(void *)(inited + 352) = 0x7265747461426E6FLL;
  *(void *)(inited + 360) = 0xE900000000000079LL;
  uint64_t v28 = sub_1006F0F78((uint64_t)&off_100936D60);
  unsigned __int8 v29 = sub_100411504();
  BOOL v30 = sub_1004E4AB8(v29, v28);
  swift_bridgeObjectRelease();
  *(_BYTE *)(inited + 368) = v30;
  *(_WORD *)(inited + 408) = 0;
  *(void *)(inited + 4swift_weakDestroy(v0 + 16) = 0x696669576E6FLL;
  *(void *)(inited + 424) = 0xE600000000000000LL;
  *(_BYTE *)(inited + 432) = sub_100013734() & 1;
  *(_WORD *)(inited + 472) = 0;
  *(void *)(inited + 480) = 0x6563637553646964LL;
  *(void *)(inited + 488) = 0xEA00000000006465LL;
  *(_BYTE *)(inited + 496) = v15;
  *(_WORD *)(inited + 536) = 0;
  unint64_t v31 = sub_10041285C(inited);
  if (v47)
  {
    uint64_t v48 = *(void *)(v0 + 856);
    uint64_t v32 = *(void *)(v0 + 832);
    uint64_t v45 = *(void *)(v0 + 880);
    swift_getErrorValue(v32, v0 + 800, v0 + 752);
    uint64_t v44 = v20;
    uint64_t v33 = *(void *)(v0 + 760);
    uint64_t v34 = *(void *)(v0 + 768);
    swift_errorRetain(v32);
    uint64_t v35 = Error.domain.getter(v33, v34);
    *(void *)(v0 + 584) = &type metadata for String;
    *(void *)(v0 + 592) = v46;
    *(void *)(v0 + 560) = v35;
    *(void *)(v0 + 568) = v36;
    *(_WORD *)(v0 + 600) = 1;
    sub_10006A420(v0 + 560, v0 + 608);
    char isUniquelyReferenced_nonNull_native = swift_isUniquelyReferenced_nonNull_native(v31);
    sub_10005E5C8(v0 + 608, 0x6D6F44726F727265LL, 0xEB000000006E6961LL, isUniquelyReferenced_nonNull_native);
    swift_bridgeObjectRelease();
    swift_getErrorValue(v32, v0 + 808, v0 + 776);
    uint64_t v38 = Error.code.getter(*(void *)(v0 + 784), *(void *)(v0 + 792));
    *(void *)(v0 + 680) = &type metadata for Int;
    *(void *)(v0 + 688) = v27;
    *(void *)(v0 + 656) = v38;
    *(_WORD *)(v0 + 696) = 2;
    sub_10006A420(v0 + 656, v0 + 704);
    char v39 = swift_isUniquelyReferenced_nonNull_native(v31);
    sub_10005E5C8(v0 + 704, 0x646F43726F727265LL, 0xE900000000000065LL, v39);
    swift_bridgeObjectRelease();
    swift_errorRelease(v32);
    v44(v45, v48);
  }

  else
  {
    v20(*(void *)(v0 + 880), *(void *)(v0 + 856));
  }

  uint64_t v40 = *(void *)(v0 + 872);
  uint64_t v41 = *(void *)(v0 + 848);
  uint64_t v42 = *(void *)(v0 + 840);
  swift_task_dealloc(*(void *)(v0 + 880));
  swift_task_dealloc(v40);
  swift_task_dealloc(v41);
  swift_task_dealloc(v42);
  return (*(uint64_t (**)(unint64_t))(v0 + 8))(v31);
}

uint64_t sub_10041136C()
{
  return swift_defaultActor_deallocate(v0);
}

uint64_t type metadata accessor for FindMyNetworkPublisherService()
{
  return objc_opt_self(&OBJC_CLASS____TtC12searchpartyd29FindMyNetworkPublisherService);
}

uint64_t sub_1004113C8(uint64_t a1, uint64_t a2)
{
  uint64_t result = sub_100015C48( &qword_1009AD400,  a2,  (uint64_t (*)(uint64_t))type metadata accessor for FindMyNetworkPublisherService,  (uint64_t)&unk_1008006AC);
  *(void *)(a1 + 8) = result;
  return result;
}

uint64_t sub_100411404()
{
  if (qword_10099B408 != -1) {
    swift_once(&qword_10099B408, sub_10040B754);
  }
  uint64_t v0 = type metadata accessor for Logger(0LL);
  uint64_t v1 = sub_10000A720(v0, (uint64_t)qword_100A2A940);
  uint64_t v2 = (os_log_s *)Logger.logObject.getter(v1);
  os_log_type_t v3 = static os_log_type_t.default.getter(v2);
  if (os_log_type_enabled(v2, v3))
  {
    uint64_t v4 = (uint8_t *)swift_slowAlloc(2LL, -1LL);
    *(_WORD *)uint64_t v4 = 0;
    _os_log_impl((void *)&_mh_execute_header, v2, v3, "Publish in progress, throttled for delay.", v4, 2u);
    swift_slowDealloc(v4, -1LL, -1LL);
  }

  unint64_t v5 = sub_100411B8C();
  uint64_t v6 = swift_allocError(&type metadata for FindMyNetworkPublisherService.Error, v5, 0LL, 0LL);
  *uint64_t v7 = 1;
  return swift_willThrow(v6);
}

uint64_t sub_100411504()
{
  CFMutableDictionaryRef v0 = IOServiceMatching("IOPMPowerSource");
  if (!v0)
  {
    sub_1001B9018();
    uint64_t v10 = (void *)static OS_os_log.default.getter();
    uint64_t v11 = static os_log_type_t.default.getter(v10);
    os_log(_:dso:log:type:_:)( "PowerStateMonitor: Could not read power source. Battery state unknown.",  70LL,  2LL,  &_mh_execute_header,  v10,  v11,  _swiftEmptyArrayStorage);

    return 0LL;
  }

  uint64_t v1 = v0;
  io_service_t MatchingService = IOServiceGetMatchingService(kIOMainPortDefault, v1);
  if (!MatchingService)
  {
    sub_1001B9018();
    uint64_t v12 = (void *)static OS_os_log.default.getter();
    uint64_t v13 = static os_log_type_t.default.getter(v12);
    uint64_t v14 = "PowerStateMonitor: Could not get matching service for power source. Battery state unknown.";
    uint64_t v15 = 90LL;
LABEL_10:
    os_log(_:dso:log:type:_:)(v14, v15, 2LL, &_mh_execute_header, v12, v13, _swiftEmptyArrayStorage);

LABEL_14:
    return 0LL;
  }

  io_registry_entry_t v3 = MatchingService;
  uint64_t v4 = (__CFString *)String._bridgeToObjectiveC()();
  CFTypeRef CFProperty = IORegistryEntryCreateCFProperty(v3, v4, kCFAllocatorDefault, 0);

  if (!CFProperty)
  {
    sub_1001B9018();
    uint64_t v12 = (void *)static OS_os_log.default.getter();
    uint64_t v13 = static os_log_type_t.default.getter(v12);
    uint64_t v14 = "PowerStateMonitor: Could not create value for fully charged key. Battery state unknown.";
    uint64_t v15 = 87LL;
    goto LABEL_10;
  }

  CFTypeID v6 = CFGetTypeID(CFProperty);
  if (v6 != CFBooleanGetTypeID())
  {
    sub_1001B9018();
    uint64_t v12 = (void *)static OS_os_log.default.getter();
    uint64_t v16 = static os_log_type_t.default.getter(v12);
    uint64_t v17 = "PowerStateMonitor: unexpected type for kIOPMFullyChargedKey. Battery state unknown.";
    uint64_t v18 = 83LL;
LABEL_12:
    os_log(_:dso:log:type:_:)(v17, v18, 2LL, &_mh_execute_header, v12, v16, _swiftEmptyArrayStorage);

    CFTypeRef v19 = CFProperty;
LABEL_13:
    swift_unknownObjectRelease(v19);
    goto LABEL_14;
  }

  CFTypeRef v29 = CFProperty;
  swift_unknownObjectRetain(CFProperty);
  swift_dynamicCast(&v28, &v29, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Bool, 7LL);
  if ((v28 & 1) != 0)
  {
    sub_1001B9018();
    uint64_t v7 = (void *)static OS_os_log.default.getter();
    uint64_t v8 = static os_log_type_t.default.getter(v7);
    os_log(_:dso:log:type:_:)( "PowerStateMonitor: Battery state charged.",  41LL,  2LL,  &_mh_execute_header,  v7,  v8,  _swiftEmptyArrayStorage);

    swift_unknownObjectRelease(CFProperty);
    return 3LL;
  }

  uint64_t v21 = (__CFString *)String._bridgeToObjectiveC()();
  CFTypeRef v22 = IORegistryEntryCreateCFProperty(v3, v21, kCFAllocatorDefault, 0);

  if (!v22)
  {
    sub_1001B9018();
    uint64_t v12 = (void *)static OS_os_log.default.getter();
    uint64_t v16 = static os_log_type_t.default.getter(v12);
    uint64_t v17 = "PowerStateMonitor: Could not create value for is charging key. Battery state unknown.";
    uint64_t v18 = 85LL;
    goto LABEL_12;
  }

  CFTypeID v23 = CFGetTypeID(v22);
  if (v23 != CFBooleanGetTypeID())
  {
    sub_1001B9018();
    uint64_t v12 = (void *)static OS_os_log.default.getter();
    uint64_t v27 = static os_log_type_t.default.getter(v12);
    os_log(_:dso:log:type:_:)( "PowerStateMonitor: unexpected type for kIOPMPSIsChargingKey. Battery state unknown.",  83LL,  2LL,  &_mh_execute_header,  v12,  v27,  _swiftEmptyArrayStorage);

    swift_unknownObjectRelease(CFProperty);
    CFTypeRef v19 = v22;
    goto LABEL_13;
  }

  CFTypeRef v29 = v22;
  swift_unknownObjectRetain(v22);
  swift_dynamicCast(&v28, &v29, (char *)&type metadata for Swift.AnyObject + 8, &type metadata for Bool, 7LL);
  char v24 = v28;
  sub_1001B9018();
  uint64_t v25 = (void *)static OS_os_log.default.getter();
  uint64_t v26 = static os_log_type_t.default.getter(v25);
  if ((v24 & 1) != 0)
  {
    uint64_t v9 = 2LL;
    os_log(_:dso:log:type:_:)( "PowerStateMonitor: Battery state charging.",  42LL,  2LL,  &_mh_execute_header,  v25,  v26,  _swiftEmptyArrayStorage);

    swift_unknownObjectRelease(CFProperty);
    swift_unknownObjectRelease(v22);
  }

  else
  {
    os_log(_:dso:log:type:_:)( "PowerStateMonitor: Battery state discharging.",  45LL,  2LL,  &_mh_execute_header,  v25,  v26,  _swiftEmptyArrayStorage);

    swift_unknownObjectRelease(CFProperty);
    swift_unknownObjectRelease(v22);

    return 1LL;
  }

  return v9;
}

uint64_t sub_10041195C(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC((uint64_t *)&unk_10099D720);
  __chkstk_darwin(v2);
  uint64_t v4 = (char *)&v11 - ((v3 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  id v5 = [(id)objc_opt_self(NSUserDefaults) standardUserDefaults];
  sub_10001581C(a1, (uint64_t)v4, (uint64_t *)&unk_10099D720);
  uint64_t v6 = type metadata accessor for Date(0LL);
  uint64_t v7 = *(void *)(v6 - 8);
  Class isa = 0LL;
  if ((*(unsigned int (**)(char *, uint64_t, uint64_t))(v7 + 48))(v4, 1LL, v6) != 1)
  {
    Class isa = Date._bridgeToObjectiveC()().super.isa;
    (*(void (**)(char *, uint64_t))(v7 + 8))(v4, v6);
  }

  NSString v9 = String._bridgeToObjectiveC()();
  [v5 setObject:isa forKey:v9];

  swift_unknownObjectRelease(isa);
  return sub_100015794(a1, (uint64_t *)&unk_10099D720);
}

uint64_t sub_100411A9C()
{
  uint64_t v2 = *(void *)(v0 + 16);
  uint64_t v3 = *(void *)(v0 + 24);
  char v4 = *(_BYTE *)(v0 + 32);
  uint64_t v5 = *(void *)(v0 + 40);
  uint64_t v6 = (void *)swift_task_alloc(dword_1009AD40C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v6;
  *uint64_t v6 = v1;
  v6[1] = sub_100200060;
  return sub_100410D28(v2, v3, v4, v5);
}

uint64_t sub_100411B04(uint64_t a1, uint64_t a2)
{
  uint64_t v4 = type metadata accessor for ObservedAdvertisement(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t))(*(void *)(v4 - 8) + 32LL))(a2, a1, v4);
  return a2;
}

unint64_t sub_100411B48()
{
  unint64_t result = qword_1009AD420;
  if (!qword_1009AD420)
  {
    unint64_t result = swift_getWitnessTable(&unk_10081BE20, &type metadata for SubmitUploadv2);
    atomic_store(result, (unint64_t *)&qword_1009AD420);
  }

  return result;
}

unint64_t sub_100411B8C()
{
  unint64_t result = qword_1009AD428;
  if (!qword_1009AD428)
  {
    unint64_t result = swift_getWitnessTable(&unk_100800744, &type metadata for FindMyNetworkPublisherService.Error);
    atomic_store(result, (unint64_t *)&qword_1009AD428);
  }

  return result;
}

uint64_t sub_100411BD0(uint64_t a1)
{
  return sub_10040BA38(a1, v1[2], v1[3], v1[4]);
}

uint64_t sub_100411BDC()
{
  uint64_t v1 = sub_100004AEC(&qword_1009AD438);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 48) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_unknownObjectRelease(*(void *)(v0 + 16));
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100411C70(uint64_t a1)
{
  uint64_t v4 = *(void *)(sub_100004AEC(&qword_1009AD438) - 8);
  unint64_t v5 = (*(unsigned __int8 *)(v4 + 80) + 48LL) & ~(unint64_t)*(unsigned __int8 *)(v4 + 80);
  uint64_t v6 = v1[2];
  uint64_t v7 = v1[3];
  uint64_t v8 = v1[4];
  uint64_t v9 = v1[5];
  uint64_t v10 = (uint64_t)v1 + v5;
  uint64_t v11 = *(void *)((char *)v1 + ((*(void *)(v4 + 64) + v5 + 7) & 0xFFFFFFFFFFFFF8LL));
  uint64_t v12 = (void *)swift_task_alloc(dword_1009AD444);
  *(void *)(v2 + swift_weakDestroy(v0 + 16) = v12;
  *uint64_t v12 = v2;
  v12[1] = sub_100015D58;
  return sub_10040BBD4(a1, v6, v7, v8, v9, v10, v11);
}

uint64_t sub_100411D2C()
{
  uint64_t v1 = sub_100004AEC(&qword_1009AD438);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 32) & ~v3;
  uint64_t v5 = v3 | 7;
  unint64_t v6 = ((*(void *)(v2 + 64) + v4 + 7) & 0xFFFFFFFFFFFFFFF8LL) + 8;
  swift_release();
  swift_release();
  (*(void (**)(uint64_t, uint64_t))(v2 + 8))(v0 + v4, v1);
  return swift_deallocObject(v0, v6, v5);
}

uint64_t sub_100411DB8()
{
  uint64_t v2 = *(void *)(sub_100004AEC(&qword_1009AD438) - 8);
  uint64_t v3 = *(void *)(v0 + 16);
  uint64_t v4 = *(void *)(v0 + 24);
  uint64_t v5 = v0 + ((*(unsigned __int8 *)(v2 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v2 + 80));
  unint64_t v6 = (void *)swift_task_alloc(dword_1009AD454);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v6;
  *unint64_t v6 = v1;
  v6[1] = sub_10020D500;
  return sub_10040BFF4(v3, v4, v5);
}

uint64_t sub_100411E4C()
{
  uint64_t v1 = type metadata accessor for Date(0LL);
  uint64_t v2 = *(void *)(v1 - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 25) & ~v3;
  uint64_t v5 = *(void *)(v2 + 64);
  uint64_t v6 = v3 | 7;
  uint64_t v7 = (v5 + v3 + v4) & ~v3;
  uint64_t v8 = v7 + v5;
  swift_release(*(void *)(v0 + 16));
  uint64_t v9 = *(void (**)(uint64_t, uint64_t))(v2 + 8);
  v9(v0 + v4, v1);
  v9(v0 + v7, v1);
  return swift_deallocObject(v0, v8, v6);
}

uint64_t sub_100411EE0()
{
  uint64_t v2 = *(void *)(type metadata accessor for Date(0LL) - 8);
  uint64_t v3 = *(unsigned __int8 *)(v2 + 80);
  uint64_t v4 = (v3 + 25) & ~v3;
  uint64_t v5 = *(void *)(v0 + 16);
  char v6 = *(_BYTE *)(v0 + 24);
  uint64_t v7 = v0 + v4;
  uint64_t v8 = v0 + ((*(void *)(v2 + 64) + v3 + v4) & ~v3);
  uint64_t v9 = swift_task_alloc(dword_1009AD46C);
  *(void *)(v1 + swift_weakDestroy(v0 + 16) = v9;
  *(void *)uint64_t v9 = v1;
  *(void *)(v9 + 8) = sub_1000159BC;
  *(void *)(v9 + 24) = v7;
  *(void *)(v9 + 32) = v8;
  *(_BYTE *)(v9 + 64) = v6;
  *(void *)(v9 + swift_weakDestroy(v0 + 16) = v5;
  return swift_task_switch(sub_10040B248, 0LL, 0LL);
}

uint64_t storeEnumTagSinglePayload for FindMyNetworkPublisherService.Error( _BYTE *a1, unsigned int a2, unsigned int a3)
{
  if (a3 + 1 >= 0xFFFF00) {
    int v3 = 4;
  }
  else {
    int v3 = 2;
  }
  if ((a3 + 1) >> 8 < 0xFF) {
    LODWORD(v4) = 1;
  }
  else {
    LODWORD(v4) = v3;
  }
  if (a3 >= 0xFF) {
    uint64_t v4 = v4;
  }
  else {
    uint64_t v4 = 0LL;
  }
  if (a2 <= 0xFE) {
    return ((uint64_t (*)(void))((char *)&loc_100411FD0 + 4 * byte_100800635[v4]))();
  }
  *a1 = a2 + 1;
  return ((uint64_t (*)(void))((char *)sub_100412004 + 4 * byte_100800630[v4]))();
}

uint64_t sub_100412004(uint64_t result)
{
  *(_BYTE *)(result + 1) = v1;
  return result;
}

uint64_t sub_10041200C(uint64_t result, int a2)
{
  *(_WORD *)(result + 1) = 0;
  if (a2) {
    JUMPOUT(0x100412014LL);
  }
  return result;
}

uint64_t sub_100412020(uint64_t result, int a2)
{
  *(_DWORD *)(result + 1) = 0;
  if (!a2) {
    JUMPOUT(0x100412028LL);
  }
  *(_BYTE *)unint64_t result = a2 + 1;
  return result;
}

uint64_t sub_10041202C(uint64_t result)
{
  *(_DWORD *)(result + 1) = v1;
  return result;
}

uint64_t sub_100412034(uint64_t result)
{
  *(_WORD *)(result + 1) = v1;
  return result;
}

ValueMetadata *type metadata accessor for FindMyNetworkPublisherService.Error()
{
  return &type metadata for FindMyNetworkPublisherService.Error;
}

unint64_t sub_100412054()
{
  unint64_t result = qword_1009AD478;
  if (!qword_1009AD478)
  {
    unint64_t result = swift_getWitnessTable(&unk_10080071C, &type metadata for FindMyNetworkPublisherService.Error);
    atomic_store(result, (unint64_t *)&qword_1009AD478);
  }

  return result;
}

unint64_t sub_1004120A4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100004AEC(&qword_10099E460);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  char v6 = (_BYTE *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *((void *)v6 - 2);
    uint64_t v8 = *((void *)v6 - 1);
    char v9 = *v6;
    swift_bridgeObjectRetain(v8);
    unint64_t result = sub_10030CF14(v7, v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    *(_BYTE *)(v4[7] + result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v6 += 24;
    void v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1004121B4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100004AEC(&qword_10099E1D0);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  char v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    unint64_t result = sub_10030CF14(v7, v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *uint64_t v12 = v7;
    v12[1] = v8;
    *(void *)(v4[7] + 8 * result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    v6 += 3;
    void v4[2] = v15;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1004122C4(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009AD4A0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (uint64_t *)((char *)&v27 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v26 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v26);
    return (unint64_t)v8;
  }

  sub_100004AEC(&qword_1009AD4B0);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_9;
  }
  uint64_t v10 = (char *)v5 + *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v28 = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10001581C(v13, (uint64_t)v5, &qword_1009AD4A0);
    uint64_t v15 = *v5;
    uint64_t v16 = v5[1];
    unint64_t result = sub_10030CF14(*v5, v16);
    if ((v18 & 1) != 0) {
      break;
    }
    unint64_t v19 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v20 = (uint64_t *)(v8[6] + 16 * result);
    *uint64_t v20 = v15;
    v20[1] = v16;
    uint64_t v21 = v8[7];
    uint64_t v22 = type metadata accessor for SystemVersionNumber(0LL);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v22 - 8) + 32LL))( v21 + *(void *)(*(void *)(v22 - 8) + 72LL) * v19,  v10,  v22);
    uint64_t v23 = v8[2];
    BOOL v24 = __OFADD__(v23, 1LL);
    uint64_t v25 = v23 + 1;
    if (v24) {
      goto LABEL_12;
    }
    v8[2] = v25;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      uint64_t v26 = v28;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100412464(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009AD490);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)&v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v24 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v24);
    return (unint64_t)v8;
  }

  sub_100004AEC(&qword_1009AD4A8);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9) {
    goto LABEL_9;
  }
  uint64_t v10 = (uint64_t)&v5[*(int *)(v2 + 48)];
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  uint64_t v26 = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain(v7);
  while (1)
  {
    sub_10001581C(v13, (uint64_t)v5, &qword_1009AD490);
    char v15 = *v5;
    unint64_t result = sub_10030CF28(*v5);
    if ((v17 & 1) != 0) {
      break;
    }
    unint64_t v18 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    *(_BYTE *)(v8[6] + result) = v15;
    uint64_t v19 = v8[7];
    uint64_t v20 = type metadata accessor for FeatureSupportMatrix(0LL);
    unint64_t result = sub_10002218C( v10,  v19 + *(void *)(*(void *)(v20 - 8) + 72LL) * v18,  type metadata accessor for FeatureSupportMatrix);
    uint64_t v21 = v8[2];
    BOOL v22 = __OFADD__(v21, 1LL);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_12;
    }
    v8[2] = v23;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      uint64_t v24 = v26;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_100412600(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100004AEC(&qword_1009AD480);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v4;
  }

  swift_retain(v3);
  uint64_t v6 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v7 = *(v6 - 2);
    uint64_t v8 = *(v6 - 1);
    uint64_t v9 = *v6;
    swift_bridgeObjectRetain(v8);
    unint64_t result = sub_10030CF14(v7, v8);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v4 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    unint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *unint64_t v12 = v7;
    v12[1] = v8;
    *(void *)(v4[7] + 8 * result) = v9;
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v6 += 3;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100412710(uint64_t a1)
{
  return sub_100413A54(a1, &qword_10099E480);
}

unint64_t sub_10041271C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }

  sub_100004AEC(&qword_10099E170);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10001581C(v7, (uint64_t)&v17, &qword_1009AD4C8);
    uint64_t v8 = v17;
    uint64_t v9 = v18;
    unint64_t result = sub_10030CF14(v17, v18);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    unint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *unint64_t v12 = v8;
    v12[1] = v9;
    unint64_t result = sub_10006A2FC((uint64_t)&v19, v4[7] + 48 * result);
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_12;
    }
    void v4[2] = v15;
    v7 += 64LL;
    if (!--v5)
    {
      swift_release(v4);
      uint64_t v16 = a1;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10041285C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
LABEL_9:
    uint64_t v16 = a1;
LABEL_10:
    swift_bridgeObjectRelease(v16);
    return (unint64_t)v4;
  }

  sub_100004AEC(&qword_10099E278);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5) {
    goto LABEL_9;
  }
  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain(v3);
  while (1)
  {
    sub_10001581C(v7, (uint64_t)&v17, &qword_1009AD4D8);
    uint64_t v8 = v17;
    uint64_t v9 = v18;
    unint64_t result = sub_10030CF14(v17, v18);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    unint64_t v12 = (uint64_t *)(v4[6] + 16 * result);
    *unint64_t v12 = v8;
    v12[1] = v9;
    unint64_t result = sub_10006A420((uint64_t)&v19, v4[7] + 48 * result);
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_12;
    }
    void v4[2] = v15;
    v7 += 64LL;
    if (!--v5)
    {
      swift_release(v4);
      uint64_t v16 = a1;
      goto LABEL_10;
    }
  }

  __break(1u);
LABEL_12:
  __break(1u);
  return result;
}

unint64_t sub_10041299C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100004AEC(&qword_1009AD4D0);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }

  swift_retain();
  uint64_t v5 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v6 = *v5;
    id v7 = *(v5 - 1);
    id v8 = v6;
    unint64_t result = sub_10030D054((uint64_t)v7);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v11 = 8 * result;
    *(void *)(v3[6] + v11) = v7;
    *(void *)(v3[7] + v11) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1LL);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v5 += 2;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100412AA4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100004AEC(&qword_10099E178);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }

  swift_retain();
  uint64_t v5 = (char *)(a1 + 56);
  while (1)
  {
    uint64_t v6 = *((void *)v5 - 3);
    uint64_t v7 = *((void *)v5 - 2);
    id v8 = (void *)*((void *)v5 - 1);
    char v9 = *v5;
    swift_bridgeObjectRetain(v7);
    sub_10006A348(v8, v9);
    unint64_t result = sub_10030CF14(v6, v7);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v12 = (uint64_t *)(v3[6] + 16 * result);
    *uint64_t v12 = v6;
    v12[1] = v7;
    uint64_t v13 = v3[7] + 16 * result;
    *(void *)uint64_t v13 = v8;
    *(_BYTE *)(v13 + 8) = v9;
    uint64_t v14 = v3[2];
    BOOL v15 = __OFADD__(v14, 1LL);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v5 += 32;
    v3[2] = v16;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100412BD0(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100004AEC(&qword_10099E458);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }

  swift_retain();
  uint64_t v5 = (_OWORD *)(a1 + 48);
  while (1)
  {
    uint64_t v6 = *((void *)v5 - 2);
    uint64_t v7 = *((void *)v5 - 1);
    __int128 v14 = *v5;
    swift_bridgeObjectRetain(v7);
    swift_retain();
    unint64_t result = sub_10030CF14(v6, v7);
    if ((v9 & 1) != 0) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    char v10 = (uint64_t *)(v3[6] + 16 * result);
    *char v10 = v6;
    v10[1] = v7;
    *(_OWORD *)(v3[7] + 16 * result) = v14;
    uint64_t v11 = v3[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    v3[2] = v13;
    v5 += 2;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100412CF8(uint64_t a1)
{
  return sub_1004131C0( a1,  &qword_10099E1F8,  &qword_1009AD4C0,  (uint64_t (*)(uint64_t *, unint64_t))sub_10006A358);
}

unint64_t sub_100412D14(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100004AEC(&qword_10099E210);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }

  swift_retain();
  uint64_t v5 = (uint64_t *)(a1 + 56);
  while (1)
  {
    uint64_t v6 = *(v5 - 3);
    uint64_t v7 = *(v5 - 2);
    uint64_t v9 = *(v5 - 1);
    uint64_t v8 = *v5;
    swift_bridgeObjectRetain(v7);
    swift_bridgeObjectRetain(v8);
    unint64_t result = sub_10030CF14(v6, v7);
    if ((v11 & 1) != 0) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    BOOL v12 = (uint64_t *)(v3[6] + 16 * result);
    *BOOL v12 = v6;
    v12[1] = v7;
    uint64_t v13 = (void *)(v3[7] + 16 * result);
    *uint64_t v13 = v9;
    v13[1] = v8;
    uint64_t v14 = v3[2];
    BOOL v15 = __OFADD__(v14, 1LL);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    v5 += 4;
    v3[2] = v16;
    if (!--v4)
    {
      swift_release(v3);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100412E34(uint64_t a1)
{
  return sub_100413A54(a1, &qword_1009AD558);
}

unint64_t sub_100412E40(uint64_t a1)
{
  return sub_1004134A0(a1, &qword_1009AD550, &qword_10099E548);
}

unint64_t sub_100412E54(uint64_t a1)
{
  return sub_100413A54(a1, &qword_1009AD520);
}

unint64_t sub_100412E60(uint64_t a1)
{
  return sub_100413A54(a1, &qword_10099E398);
}

unint64_t sub_100412E6C(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009AD4B8);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100004AEC(&qword_10099E4A8);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }

  char v10 = &v5[*(int *)(v2 + 48)];
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10001581C(v13, (uint64_t)v5, &qword_1009AD4B8);
    char v15 = *v5;
    unint64_t result = sub_10030CEE4(*v5);
    if ((v17 & 1) != 0) {
      break;
    }
    unint64_t v18 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    *(_BYTE *)(v8[6] + result) = v15;
    uint64_t v19 = v8[7];
    uint64_t v20 = type metadata accessor for Date(0LL);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v20 - 8) + 32LL))( v19 + *(void *)(*(void *)(v20 - 8) + 72LL) * v18,  v10,  v20);
    uint64_t v21 = v8[2];
    BOOL v22 = __OFADD__(v21, 1LL);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v8[2] = v23;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100413004(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009A23B0);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100004AEC(&qword_10099E508);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }

  char v10 = (__int128 *)&v5[*(int *)(v2 + 48)];
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10001581C(v13, (uint64_t)v5, &qword_1009A23B0);
    unint64_t result = sub_10030D124((uint64_t)v5);
    if ((v16 & 1) != 0) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = type metadata accessor for UUID(0LL);
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32LL))( v18 + *(void *)(*(void *)(v19 - 8) + 72LL) * v17,  v5,  v19);
    unint64_t result = sub_100012EC0(v10, v8[7] + 40 * v17);
    uint64_t v20 = v8[2];
    BOOL v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1004131A4(uint64_t a1)
{
  return sub_1004131C0( a1,  &qword_10099E4F0,  (uint64_t *)&unk_1009A34E0,  (uint64_t (*)(uint64_t *, unint64_t))sub_10006A358);
}

unint64_t sub_1004131C0( uint64_t a1, uint64_t *a2, uint64_t *a3, uint64_t (*a4)(uint64_t *, unint64_t))
{
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
    uint64_t v9 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100004AEC(a2);
  uint64_t v8 = static _DictionaryStorage.allocate(capacity:)(v5);
  uint64_t v9 = (void *)v8;
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v9;
  }

  uint64_t v11 = v8 + 64;
  uint64_t v12 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10001581C(v12, (uint64_t)&v21, a3);
    uint64_t v13 = v21;
    uint64_t v14 = v22;
    unint64_t result = sub_10030CF14(v21, v22);
    if ((v16 & 1) != 0) {
      break;
    }
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    unint64_t v17 = (uint64_t *)(v9[6] + 16 * result);
    *unint64_t v17 = v13;
    v17[1] = v14;
    unint64_t result = a4(&v23, v9[7] + 32 * result);
    uint64_t v18 = v9[2];
    BOOL v19 = __OFADD__(v18, 1LL);
    uint64_t v20 = v18 + 1;
    if (v19) {
      goto LABEL_11;
    }
    void v9[2] = v20;
    v12 += 48LL;
    if (!--v10)
    {
      swift_release(v9);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1004132F8(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009AD528);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100004AEC(&qword_1009AD530);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }

  uint64_t v10 = *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10001581C(v13, (uint64_t)v5, &qword_1009AD528);
    unint64_t result = sub_10030D124((uint64_t)v5);
    if ((v16 & 1) != 0) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = type metadata accessor for UUID(0LL);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32LL))( v18 + *(void *)(*(void *)(v19 - 8) + 72LL) * v17,  v5,  v19);
    *(void *)(v8[7] + 8 * v17) = *(void *)&v5[v10];
    uint64_t v20 = v8[2];
    BOOL v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10041348C(uint64_t a1)
{
  return sub_1004134A0(a1, &qword_1009A6700, &qword_10099E1E8);
}

unint64_t sub_1004134A0(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = sub_100004AEC(a2);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10)
  {
    unint64_t v12 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100004AEC(a3);
  uint64_t v11 = static _DictionaryStorage.allocate(capacity:)(v10);
  unint64_t v12 = (void *)v11;
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v12;
  }

  uint64_t v14 = *(int *)(v6 + 48);
  uint64_t v15 = v11 + 64;
  unint64_t v16 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v27[1] = a1;
  uint64_t v17 = a1 + v16;
  uint64_t v18 = *(void *)(v7 + 72);
  swift_retain();
  while (1)
  {
    sub_10001581C(v17, (uint64_t)v9, a2);
    unint64_t result = sub_10030D124((uint64_t)v9);
    if ((v20 & 1) != 0) {
      break;
    }
    unint64_t v21 = result;
    *(void *)(v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v22 = v12[6];
    uint64_t v23 = type metadata accessor for UUID(0LL);
    unint64_t result = (*(uint64_t (**)(unint64_t, char *, uint64_t))(*(void *)(v23 - 8) + 32LL))( v22 + *(void *)(*(void *)(v23 - 8) + 72LL) * v21,  v9,  v23);
    *(void *)(v12[7] + 8 * v21) = *(void *)&v9[v14];
    uint64_t v24 = v12[2];
    BOOL v25 = __OFADD__(v24, 1LL);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_11;
    }
    void v12[2] = v26;
    v17 += v18;
    if (!--v13)
    {
      swift_release(v12);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_10041362C(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v3 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100004AEC(&qword_10099E2E8);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }

  swift_retain();
  uint64_t v5 = (void **)(a1 + 40);
  while (1)
  {
    uint64_t v6 = *v5;
    id v7 = *(v5 - 1);
    id v8 = v6;
    unint64_t result = sub_10030D388(v7);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v11 = 8 * result;
    *(void *)(v3[6] + v11) = v7;
    *(void *)(v3[7] + v11) = v8;
    uint64_t v12 = v3[2];
    BOOL v13 = __OFADD__(v12, 1LL);
    uint64_t v14 = v12 + 1;
    if (v13) {
      goto LABEL_11;
    }
    v3[2] = v14;
    v5 += 2;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100413734(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009AD540);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v23 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    id v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100004AEC(&qword_10099E3A8);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  id v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }

  uint64_t v10 = *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v23[1] = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10001581C(v13, (uint64_t)v5, &qword_1009AD540);
    unint64_t result = sub_10030D38C((uint64_t)v5);
    if ((v16 & 1) != 0) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = type metadata accessor for OwnedBeaconRecord(0LL);
    unint64_t result = sub_10002218C( (uint64_t)v5,  v18 + *(void *)(*(void *)(v19 - 8) + 72LL) * v17,  type metadata accessor for OwnedBeaconRecord);
    *(void *)(v8[7] + 8 * v17) = *(void *)&v5[v10];
    uint64_t v20 = v8[2];
    BOOL v21 = __OFADD__(v20, 1LL);
    uint64_t v22 = v20 + 1;
    if (v21) {
      goto LABEL_11;
    }
    v8[2] = v22;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1004138CC(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v3 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100004AEC(&qword_10099E3B8);
  uint64_t v3 = (void *)static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = *(void *)(a1 + 16);
  if (!v4)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v3;
  }

  swift_retain();
  uint64_t v5 = (unint64_t *)(a1 + 64);
  while (1)
  {
    unsigned __int8 v6 = *((_BYTE *)v5 - 32);
    uint64_t v7 = *(v5 - 3);
    uint64_t v8 = *(v5 - 2);
    uint64_t v9 = *(v5 - 1);
    unint64_t v10 = *v5;
    swift_bridgeObjectRetain(v8);
    sub_10001736C(v9, v10);
    unint64_t result = sub_10030D3A8(v6, v7, v8);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v3 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = v3[6] + 24 * result;
    *(_BYTE *)uint64_t v13 = v6;
    *(void *)(v13 + 8) = v7;
    *(void *)(v13 + swift_weakDestroy(v0 + 16) = v8;
    uint64_t v14 = (uint64_t *)(v3[7] + 16 * result);
    *uint64_t v14 = v9;
    v14[1] = v10;
    uint64_t v15 = v3[2];
    BOOL v16 = __OFADD__(v15, 1LL);
    uint64_t v17 = v15 + 1;
    if (v16) {
      goto LABEL_11;
    }
    v5 += 5;
    v3[2] = v17;
    if (!--v4)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100413A0C(uint64_t a1)
{
  return sub_1004134A0(a1, &qword_1009A6600, &qword_10099E3F8);
}

unint64_t sub_100413A20(uint64_t a1)
{
  return sub_1004134A0(a1, &qword_1009AD4F8, &qword_10099E2F0);
}

unint64_t sub_100413A34(uint64_t a1)
{
  return sub_1004134A0(a1, &qword_1009AD500, &qword_10099E320);
}

unint64_t sub_100413A48(uint64_t a1)
{
  return sub_100413A54(a1, &qword_1009AD538);
}

unint64_t sub_100413A54(uint64_t a1, uint64_t *a2)
{
  uint64_t v3 = *(void *)(a1 + 16);
  if (!v3)
  {
    uint64_t v5 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100004AEC(a2);
  uint64_t v4 = static _DictionaryStorage.allocate(capacity:)(v3);
  uint64_t v5 = (void *)v4;
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
LABEL_9:
    swift_bridgeObjectRelease(a1);
    return (unint64_t)v5;
  }

  swift_retain(v4);
  uint64_t v7 = (uint64_t *)(a1 + 48);
  while (1)
  {
    uint64_t v8 = *(v7 - 2);
    uint64_t v9 = *(v7 - 1);
    uint64_t v10 = *v7;
    swift_bridgeObjectRetain(v9);
    swift_bridgeObjectRetain(v10);
    unint64_t result = sub_10030CF14(v8, v9);
    if ((v12 & 1) != 0) {
      break;
    }
    *(void *)((char *)v5 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL) + 64) |= 1LL << result;
    uint64_t v13 = (uint64_t *)(v5[6] + 16 * result);
    *uint64_t v13 = v8;
    v13[1] = v9;
    *(void *)(v5[7] + 8 * result) = v10;
    uint64_t v14 = v5[2];
    BOOL v15 = __OFADD__(v14, 1LL);
    uint64_t v16 = v14 + 1;
    if (v15) {
      goto LABEL_11;
    }
    void v5[2] = v16;
    v7 += 3;
    if (!--v6)
    {
      swift_release(v5);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100413B68(uint64_t a1)
{
  return sub_100413B90(a1, &qword_1009AD518, &qword_10099E1E0);
}

unint64_t sub_100413B7C(uint64_t a1)
{
  return sub_100413B90(a1, &qword_1009AD510, &qword_10099E1D8);
}

unint64_t sub_100413B90(uint64_t a1, uint64_t *a2, uint64_t *a3)
{
  uint64_t v6 = sub_100004AEC(a2);
  uint64_t v7 = *(void *)(v6 - 8);
  __chkstk_darwin(v6);
  uint64_t v9 = (char *)v27 - ((v8 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v10 = *(void *)(a1 + 16);
  if (!v10)
  {
    char v12 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100004AEC(a3);
  uint64_t v11 = static _DictionaryStorage.allocate(capacity:)(v10);
  char v12 = (void *)v11;
  uint64_t v13 = *(void *)(a1 + 16);
  if (!v13)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v12;
  }

  uint64_t v14 = *(int *)(v6 + 48);
  uint64_t v15 = v11 + 64;
  unint64_t v16 = (*(unsigned __int8 *)(v7 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v7 + 80);
  v27[1] = a1;
  uint64_t v17 = a1 + v16;
  uint64_t v18 = *(void *)(v7 + 72);
  swift_retain();
  while (1)
  {
    sub_10001581C(v17, (uint64_t)v9, a2);
    unint64_t result = sub_10030D930((uint64_t)v9);
    if ((v20 & 1) != 0) {
      break;
    }
    unint64_t v21 = result;
    *(void *)(v15 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v22 = v12[6];
    uint64_t v23 = type metadata accessor for BeaconKeyManager.FileKey(0LL);
    unint64_t result = sub_10002218C( (uint64_t)v9,  v22 + *(void *)(*(void *)(v23 - 8) + 72LL) * v21,  type metadata accessor for BeaconKeyManager.FileKey);
    *(void *)(v12[7] + 8 * v21) = *(void *)&v9[v14];
    uint64_t v24 = v12[2];
    BOOL v25 = __OFADD__(v24, 1LL);
    uint64_t v26 = v24 + 1;
    if (v25) {
      goto LABEL_11;
    }
    void v12[2] = v26;
    v17 += v18;
    if (!--v13)
    {
      swift_release(v12);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100413D1C(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009AD548);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (void *)((char *)v24 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL));
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t v8 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100004AEC(&qword_10099E528);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }

  uint64_t v10 = (uint64_t)v5 + *(int *)(v2 + 48);
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v24[1] = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10001581C(v13, (uint64_t)v5, &qword_1009AD548);
    uint64_t v15 = *v5;
    unint64_t result = sub_10030D338(*v5);
    if ((v17 & 1) != 0) {
      break;
    }
    unint64_t v18 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    *(void *)(v8[6] + 8 * result) = v15;
    uint64_t v19 = v8[7];
    uint64_t v20 = type metadata accessor for BeaconStoreFileRecord(0LL);
    unint64_t result = sub_10002218C( v10,  v19 + *(void *)(*(void *)(v20 - 8) + 72LL) * v18,  type metadata accessor for BeaconStoreFileRecord);
    uint64_t v21 = v8[2];
    BOOL v22 = __OFADD__(v21, 1LL);
    uint64_t v23 = v21 + 1;
    if (v22) {
      goto LABEL_11;
    }
    v8[2] = v23;
    v13 += v14;
    if (!--v9)
    {
      swift_release(v8);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100413EB8(uint64_t a1)
{
  uint64_t v2 = sub_100004AEC(&qword_1009AD508);
  uint64_t v3 = *(void *)(v2 - 8);
  __chkstk_darwin(v2);
  uint64_t v5 = (char *)v25 - ((v4 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v6 = *(void *)(a1 + 16);
  if (!v6)
  {
    uint64_t v8 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100004AEC(&qword_10099E350);
  uint64_t v7 = static _DictionaryStorage.allocate(capacity:)(v6);
  uint64_t v8 = (void *)v7;
  uint64_t v9 = *(void *)(a1 + 16);
  if (!v9)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v8;
  }

  uint64_t v10 = (uint64_t)&v5[*(int *)(v2 + 48)];
  uint64_t v11 = v7 + 64;
  unint64_t v12 = (*(unsigned __int8 *)(v3 + 80) + 32LL) & ~(unint64_t)*(unsigned __int8 *)(v3 + 80);
  v25[1] = a1;
  uint64_t v13 = a1 + v12;
  uint64_t v14 = *(void *)(v3 + 72);
  swift_retain();
  while (1)
  {
    sub_10001581C(v13, (uint64_t)v5, &qword_1009AD508);
    unint64_t result = sub_10030D124((uint64_t)v5);
    if ((v16 & 1) != 0) {
      break;
    }
    unint64_t v17 = result;
    *(void *)(v11 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v18 = v8[6];
    uint64_t v19 = type metadata accessor for UUID(0LL);
    (*(void (**)(unint64_t, char *, uint64_t))(*(void *)(v19 - 8) + 32LL))( v18 + *(void *)(*(void *)(v19 - 8) + 72LL) * v17,  v5,  v19);
    uint64_t v20 = v8[7];
    uint64_t v21 = type metadata accessor for SafeLocation(0LL);
    unint64_t result = sub_10002218C( v10,  v20 + *(void *)(*(void *)(v21 - 8) + 72LL) * v17,  type metadata accessor for SafeLocation);
    uint64_t v22 = v8[2];
    BOOL v23 = __OFADD__(v22, 1LL);
    uint64_t v24 = v22 + 1;
    if (v23) {
      goto LABEL_11;
    }
    v8[2] = v24;
    v13 += v14;
    if (!--v9)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_100414070(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = _swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100004AEC((uint64_t *)&unk_10099E570);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10001581C(v7, (uint64_t)v16, &qword_1009AD4F0);
    unint64_t result = sub_10030CFCC((uint64_t)v16);
    if ((v9 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    uint64_t v10 = v4[6] + 40 * result;
    __int128 v11 = v16[0];
    __int128 v12 = v16[1];
    *(void *)(v10 + 32) = v17;
    *(_OWORD *)uint64_t v10 = v11;
    *(_OWORD *)(v10 + swift_weakDestroy(v0 + 16) = v12;
    unint64_t result = (unint64_t)sub_10006A358(&v18, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v13 = v4[2];
    BOOL v14 = __OFADD__(v13, 1LL);
    uint64_t v15 = v13 + 1;
    if (v14) {
      goto LABEL_11;
    }
    void v4[2] = v15;
    v7 += 72LL;
    if (!--v5)
    {
      swift_release();
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

unint64_t sub_1004141B0(uint64_t a1)
{
  return sub_1004134A0(a1, &qword_1009AD4E8, &qword_10099E258);
}

unint64_t sub_1004141C4(uint64_t a1)
{
  uint64_t v2 = *(void *)(a1 + 16);
  if (!v2)
  {
    uint64_t v4 = &_swiftEmptyDictionarySingleton;
    goto LABEL_9;
  }

  sub_100004AEC(&qword_1009A7D30);
  uint64_t v3 = static _DictionaryStorage.allocate(capacity:)(v2);
  uint64_t v4 = (void *)v3;
  uint64_t v5 = *(void *)(a1 + 16);
  if (!v5)
  {
LABEL_9:
    swift_bridgeObjectRelease();
    return (unint64_t)v4;
  }

  uint64_t v6 = v3 + 64;
  uint64_t v7 = a1 + 32;
  swift_retain();
  while (1)
  {
    sub_10001581C(v7, (uint64_t)&v14, &qword_1009AD4E0);
    uint64_t v8 = v14;
    unint64_t result = sub_10030D054(v14);
    if ((v10 & 1) != 0) {
      break;
    }
    *(void *)(v6 + ((result >> 3) & 0x1FFFFFFFFFFFFFF8LL)) |= 1LL << result;
    *(void *)(v4[6] + 8 * result) = v8;
    unint64_t result = (unint64_t)sub_10006A358(&v15, (_OWORD *)(v4[7] + 32 * result));
    uint64_t v11 = v4[2];
    BOOL v12 = __OFADD__(v11, 1LL);
    uint64_t v13 = v11 + 1;
    if (v12) {
      goto LABEL_11;
    }
    void v4[2] = v13;
    v7 += 40LL;
    if (!--v5)
    {
      swift_release(v4);
      goto LABEL_9;
    }
  }

  __break(1u);
LABEL_11:
  __break(1u);
  return result;
}

uint64_t sub_1004142F0@<X0>(uint64_t a1@<X8>)
{
  if (qword_10099B410 != -1) {
    swift_once(&qword_10099B410, sub_10041DFE0);
  }
  uint64_t v2 = qword_100A2A960;
  unint64_t v3 = *(void *)algn_100A2A968;
  *(void *)a1 = qword_100A2A960;
  *(void *)(a1 + 8) = v3;
  *(void *)(a1 + swift_weakDestroy(v0 + 16) = 3LL;
  *(_WORD *)(a1 + 24) = 0;
  *(void *)(a1 + 32) = 0x408C200000000000LL;
  *(_BYTE *)(a1 + 40) = 0;
  *(void *)(a1 + 48) = 0x406E000000000000LL;
  *(_WORD *)(a1 + 56) = 0;
  sub_10001736C(v2, v3);
  if (qword_10099B418 != -1) {
    swift_once(&qword_10099B418, sub_10041E068);
  }
  uint64_t v4 = qword_100A2A970;
  *(void *)(a1 + 64) = qword_100A2A970;
  *(_BYTE *)(a1 + 72) = 1;
  *(void *)(a1 + 80) = 0xD000000000000012LL;
  *(void *)(a1 + 88) = 0x8000000100854BE0LL;
  *(void *)(a1 + 96) = 1LL;
  *(_BYTE *)(a1 + 104) = 0;
  *(_WORD *)(a1 + 105) = 256;
  *(void *)(a1 + 112) = 60LL;
  *(_BYTE *)(a1 + 120) = 0;
  *(void *)(a1 + 128) = 15LL;
  *(_BYTE *)(a1 + 136) = 0;
  *(void *)(a1 + 144) = 1440LL;
  *(_BYTE *)(a1 + 152) = 0;
  *(void *)(a1 + 160) = 5000LL;
  *(_BYTE *)(a1 + 168) = 0;
  *(void *)(a1 + 176) = 3LL;
  *(_BYTE *)(a1 + 184) = 0;
  *(void *)(a1 + 192) = 0x4000000000000000LL;
  *(_BYTE *)(a1 + 200) = 0;
  *(void *)(a1 + 208) = 60LL;
  *(_BYTE *)(a1 + 2swift_weakDestroy(v0 + 16) = 0;
  *(void *)(a1 + 224) = 604800LL;
  *(_BYTE *)(a1 + 232) = 0;
  *(void *)(a1 + 240) = 43200LL;
  *(_BYTE *)(a1 + 248) = 0;
  *(void *)(a1 + 256) = 24LL;
  *(_BYTE *)(a1 + 264) = 0;
  *(_BYTE *)(a1 + 265) = 1;
  uint64_t v5 = qword_10099B420;
  swift_bridgeObjectRetain(v4);
  if (v5 != -1) {
    swift_once(&qword_10099B420, sub_10041E07C);
  }
  uint64_t v6 = qword_100A2A978;
  *(void *)(a1 + 272) = qword_100A2A978;
  *(void *)(a1 + 280) = 4LL;
  *(_BYTE *)(a1 + 288) = 0;
  *(void *)(a1 + 296) = 24LL;
  *(_BYTE *)(a1 + 304) = 0;
  *(void *)(a1 + 312) = 1440LL;
  *(_BYTE *)(a1 + 320) = 0;
  *(void *)(a1 + 328) = 1200LL;
  *(_BYTE *)(a1 + 336) = 0;
  *(void *)(a1 + 344) = 600LL;
  *(_BYTE *)(a1 + 352) = 0;
  *(void *)(a1 + 360) = 8640LL;
  *(_BYTE *)(a1 + 368) = 0;
  *(void *)(a1 + 376) = 8640LL;
  *(_BYTE *)(a1 + 384) = 0;
  *(void *)(a1 + 392) = 2880LL;
  *(_BYTE *)(a1 + 400) = 0;
  *(void *)(a1 + 408) = 10080LL;
  *(_BYTE *)(a1 + 4swift_weakDestroy(v0 + 16) = 0;
  *(void *)(a1 + 424) = 2880LL;
  *(_BYTE *)(a1 + 432) = 0;
  *(_BYTE *)(a1 + 433) = 1;
  *(void *)(a1 + 440) = 5LL;
  *(_BYTE *)(a1 + 448) = 0;
  *(void *)(a1 + 456) = 3LL;
  *(_BYTE *)(a1 + 464) = 0;
  *(void *)(a1 + 472) = 10LL;
  *(_BYTE *)(a1 + 480) = 0;
  *(void *)(a1 + 488) = 1200LL;
  *(_BYTE *)(a1 + 496) = 0;
  *(void *)(a1 + 504) = 10080LL;
  *(_BYTE *)(a1 + 512) = 0;
  *(void *)(a1 + 520) = 600LL;
  *(_BYTE *)(a1 + 528) = 0;
  *(void *)(a1 + 536) = 1440LL;
  *(_BYTE *)(a1 + 544) = 0;
  swift_bridgeObjectRetain(v6);
  *(void *)(a1 + 552) = sub_100421918();
  *(void *)(a1 + 560) = 0x403E000000000000LL;
  *(_BYTE *)(a1 + 568) = 0;
  *(void *)(a1 + 576) = 0x408C200000000000LL;
  *(_BYTE *)(a1 + 584) = 0;
  if (qword_10099B428 != -1) {
    swift_once(&qword_10099B428, sub_10041E30C);
  }
  uint64_t v7 = (void *)qword_100A2A980;
  *(void *)(a1 + 592) = qword_100A2A980;
  uint64_t v8 = qword_10099B430;
  id v9 = v7;
  if (v8 != -1) {
    swift_once(&qword_10099B430, sub_10041E324);
  }
  uint64_t v10 = qword_100A2A988;
  *(void *)(a1 + 600) = qword_100A2A988;
  *(void *)(a1 + 624) = 7LL;
  *(_BYTE *)(a1 + 632) = 0;
  *(void *)(a1 + 608) = 20LL;
  *(_BYTE *)(a1 + 6swift_weakDestroy(v0 + 16) = 0;
  *(void *)(a1 + 640) = 300LL;
  *(_BYTE *)(a1 + 648) = 0;
  *(void *)(a1 + 656) = 60LL;
  *(_BYTE *)(a1 + 664) = 0;
  *(void *)(a1 + 672) = 1440LL;
  *(_BYTE *)(a1 + 680) = 0;
  *(_BYTE *)(a1 + 681) = 1;
  uint64_t v11 = qword_10099B438;
  swift_bridgeObjectRetain(v10);
  if (v11 != -1) {
    swift_once(&qword_10099B438, sub_10041E370);
  }
  __int128 v126 = xmmword_100A2A9A0;
  __int128 v127 = xmmword_100A2A990;
  __int128 v12 = xmmword_100A2A9B0;
  uint64_t v13 = qword_100A2A9C0;
  __int128 v124 = unk_100A2A9D8;
  __int128 v125 = unk_100A2A9C8;
  uint64_t v14 = qword_100A2A9E8;
  uint64_t v15 = unk_100A2A9F0;
  uint64_t v16 = qword_100A2A9F8;
  uint64_t v17 = (int *)type metadata accessor for DefaultConfigurationLayer(0LL);
  uint64_t v18 = a1 + v17[67];
  *(_OWORD *)uint64_t v18 = v127;
  *(_OWORD *)(v18 + swift_weakDestroy(v0 + 16) = v126;
  *(_OWORD *)(v18 + 32) = v12;
  *(void *)(v18 + 48) = v13;
  *(_OWORD *)(v18 + 56) = v125;
  *(_OWORD *)(v18 + 72) = v124;
  *(void *)(v18 + 88) = v14;
  *(void *)(v18 + 96) = v15;
  *(void *)(v18 + 104) = v16;
  uint64_t v19 = a1 + v17[57];
  uint64_t v20 = type metadata accessor for UUID(0LL);
  (*(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v20 - 8) + 56LL))(v19, 1LL, 1LL, v20);
  uint64_t v21 = a1 + v17[58];
  uint64_t v22 = type metadata accessor for Date(0LL);
  BOOL v23 = *(void (**)(uint64_t, uint64_t, uint64_t, uint64_t))(*(void *)(v22 - 8) + 56LL);
  v23(v21, 1LL, 1LL, v22);
  uint64_t v24 = a1 + v17[59];
  *(void *)uint64_t v24 = 0LL;
  *(_BYTE *)(v24 + 8) = 1;
  v23(a1 + v17[60], 1LL, 1LL, v22);
  uint64_t v25 = a1 + v17[61];
  *(void *)uint64_t v25 = 48LL;
  *(_BYTE *)(v25 + 8) = 0;
  uint64_t v26 = a1 + v17[62];
  *(void *)uint64_t v26 = 48LL;
  *(_BYTE *)(v26 + 8) = 0;
  uint64_t v27 = a1 + v17[63];
  *(void *)uint64_t v27 = 0x4010000000000000LL;
  *(_BYTE *)(v27 + 8) = 0;
  uint64_t v28 = a1 + v17[64];
  *(void *)uint64_t v28 = 0x4004CCCCCCCCCCCDLL;
  *(_BYTE *)(v28 + 8) = 0;
  strcpy((char *)(a1 + v17[65]), "333333\a@");
  uint64_t v29 = a1 + v17[66];
  *(void *)uint64_t v29 = 0x3FF999999999999ALL;
  *(_BYTE *)(v29 + 8) = 0;
  *(_BYTE *)(a1 + v17[68]) = 1;
  *(_BYTE *)(a1 + v17[69]) = 1;
  *(_BYTE *)(a1 + v17[70]) = 0;
  uint64_t v30 = a1 + v17[71];
  *(void *)uint64_t v30 = 0x4092C00000000000LL;
  *(_BYTE *)(v30 + 8) = 0;
  uint64_t v31 = a1 + v17[72];
  *(void *)uint64_t v31 = 0x4082C00000000000LL;
  *(_BYTE *)(v31 + 8) = 0;
  uint64_t v32 = a1 + v17[73];
  *(void *)uint64_t v32 = 0x4092C00000000000LL;
  *(_BYTE *)(v32 + 8) = 0;
  uint64_t v33 = a1 + v17[74];
  *(void *)uint64_t v33 = 0x4082C00000000000LL;
  *(_BYTE *)(v33 + 8) = 0;
  uint64_t v34 = a1 + v17[75];
  *(void *)uint64_t v34 = 0x40B0E00000000000LL;
  *(_BYTE *)(v34 + 8) = 0;
  uint64_t v35 = a1 + v17[76];
  *(void *)uint64_t v35 = 0x4150266000000000LL;
  *(_BYTE *)(v35 + 8) = 0;
  uint64_t v36 = a1 + v17[77];
  *(void *)uint64_t v36 = 0x4122750000000000LL;
  *(_BYTE *)(v36 + 8) = 0;
  uint64_t v37 = a1 + v17[78];
  *(void *)uint64_t v37 = 0x40AC200000000000LL;
  *(_BYTE *)(v37 + 8) = 0;
  uint64_t v38 = a1 + v17[79];
  *(void *)uint64_t v38 = 60LL;
  *(_BYTE *)(v38 + 8) = 0;
  char v39 = (void *)(a1 + v17[80]);
  *char v39 = 0xD000000000000010LL;
  v39[1] = 0x8000000100861B50LL;
  uint64_t v40 = a1 + v17[81];
  *(void *)uint64_t v40 = 43200LL;
  *(_BYTE *)(v40 + 8) = 0;
  uint64_t v41 = (void *)(a1 + v17[82]);
  *uint64_t v41 = 0xD000000000000019LL;
  v41[1] = 0x8000000100861B70LL;
  uint64_t v42 = a1 + v17[83];
  *(void *)uint64_t v42 = 43200LL;
  *(_BYTE *)(v42 + 8) = 0;
  uint64_t v43 = qword_10099B440;
  swift_bridgeObjectRetain(v13);
  swift_bridgeObjectRetain(v16);
  if (v43 != -1) {
    swift_once(&qword_10099B440, sub_10041E3BC);
  }
  uint64_t v44 = qword_100A2AA00;
  *(void *)(a1 + v17[84]) = qword_100A2AA00;
  uint64_t v45 = (void *)(a1 + v17[85]);
  *uint64_t v45 = 0xD000000000000018LL;
  v45[1] = 0x8000000100861B90LL;
  uint64_t v46 = a1 + v17[86];
  *(void *)uint64_t v46 = 0x404E000000000000LL;
  *(_BYTE *)(v46 + 8) = 0;
  *(_BYTE *)(a1 + v17[87]) = 1;
  *(_BYTE *)(a1 + v17[88]) = 1;
  *(_BYTE *)(a1 + v17[89]) = 1;
  *(_BYTE *)(a1 + v17[90]) = 1;
  uint64_t v47 = qword_10099B448;
  swift_bridgeObjectRetain(v44);
  if (v47 != -1) {
    swift_once(&qword_10099B448, sub_10041E3D8);
  }
  uint64_t v48 = a1 + v17[91];
  *(void *)uint64_t v48 = qword_100A2AA08;
  *(_BYTE *)(v48 + 8) = 0;
  uint64_t v49 = a1 + v17[92];
  *(void *)uint64_t v49 = 15LL;
  *(_BYTE *)(v49 + 8) = 0;
  uint64_t v50 = a1 + v17[93];
  *(void *)uint64_t v50 = 5LL;
  *(_BYTE *)(v50 + 8) = 0;
  uint64_t v51 = a1 + v17[94];
  *(void *)uint64_t v51 = 120LL;
  *(_BYTE *)(v51 + 8) = 0;
  uint64_t v52 = a1 + v17[95];
  *(void *)uint64_t v52 = 24LL;
  *(_BYTE *)(v52 + 8) = 0;
  uint64_t v53 = a1 + v17[96];
  *(void *)uint64_t v53 = 0x4049000000000000LL;
  *(_BYTE *)(v53 + 8) = 0;
  uint64_t v54 = a1 + v17[97];
  *(void *)uint64_t v54 = 0x4024000000000000LL;
  *(_BYTE *)(v54 + 8) = 0;
  uint64_t v55 = a1 + v17[98];
  *(void *)uint64_t v55 = 0x4044000000000000LL;
  *(_BYTE *)(v55 + 8) = 0;
  uint64_t v56 = a1 + v17[99];
  *(void *)uint64_t v56 = 32LL;
  *(_BYTE *)(v56 + 8) = 0;
  uint64_t v57 = a1 + v17[100];
  *(void *)uint64_t v57 = 12LL;
  *(_BYTE *)(v57 + 8) = 0;
  uint64_t v58 = a1 + v17[101];
  *(void *)uint64_t v58 = 32LL;
  *(_BYTE *)(v58 + 8) = 0;
  uint64_t v59 = a1 + v17[102];
  *(void *)uint64_t v59 = 0x4034000000000000LL;
  *(_BYTE *)(v59 + 8) = 0;
  uint64_t v60 = a1 + v17[103];
  *(void *)uint64_t v60 = 0x403E000000000000LL;
  *(_BYTE *)(v60 + 8) = 0;
  uint64_t v61 = a1 + v17[104];
  *(void *)uint64_t v61 = 7LL;
  *(_BYTE *)(v61 + 8) = 0;
  uint64_t v62 = a1 + v17[105];
  *(void *)uint64_t v62 = 30LL;
  *(_BYTE *)(v62 + 8) = 0;
  uint64_t v63 = a1 + v17[106];
  *(void *)uint64_t v63 = 60LL;
  *(_BYTE *)(v63 + 8) = 0;
  uint64_t v64 = a1 + v17[107];
  *(void *)uint64_t v64 = 30LL;
  *(_BYTE *)(v64 + 8) = 0;
  uint64_t v65 = a1 + v17[108];
  *(void *)uint64_t v65 = 14LL;
  *(_BYTE *)(v65 + 8) = 0;
  uint64_t v66 = a1 + v17[109];
  *(void *)uint64_t v66 = 4320LL;
  *(_BYTE *)(v66 + 8) = 0;
  uint64_t v67 = a1 + v17[110];
  *(void *)uint64_t v67 = 2160LL;
  *(_BYTE *)(v67 + 8) = 0;
  uint64_t v68 = a1 + v17[111];
  *(void *)uint64_t v68 = 2160LL;
  *(_BYTE *)(v68 + 8) = 0;
  uint64_t v69 = a1 + v17[112];
  *(void *)uint64_t v69 = 0x405E000000000000LL;
  *(_BYTE *)(v69 + 8) = 0;
  *(_BYTE *)(a1 + v17[113]) = 1;
  if (qword_10099B450 != -1) {
    swift_once(&qword_10099B450, sub_10041E3E8);
  }
  uint64_t v70 = a1 + v17[114];
  *(void *)uint64_t v70 = qword_100A2AA10;
  *(_BYTE *)(v70 + 8) = 0;
  uint64_t v71 = a1 + v17[115];
  *(void *)uint64_t v71 = 0x4000000000000000LL;
  *(_BYTE *)(v71 + 8) = 0;
  uint64_t v72 = a1 + v17[116];
  *(void *)uint64_t v72 = 50LL;
  *(_BYTE *)(v72 + 8) = 0;
  *(_BYTE *)(a1 + v17[117]) = 1;
  *(_BYTE *)(a1 + v17[118]) = 1;
  *(_BYTE *)(a1 + v17[119]) = 1;
  uint64_t v73 = a1 + v17[120];
  *(void *)uint64_t v73 = 86400LL;
  *(_BYTE *)(v73 + 8) = 0;
  uint64_t v74 = a1 + v17[121];
  *(void *)uint64_t v74 = 0x4014000000000000LL;
  *(_BYTE *)(v74 + 8) = 0;
  if (qword_10099B458 != -1) {
    swift_once(&qword_10099B458, sub_10041E3FC);
  }
  uint64_t v75 = a1 + v17[122];
  *(void *)uint64_t v75 = qword_100A2AA18;
  *(_BYTE *)(v75 + 8) = 0;
  uint64_t v76 = a1 + v17[123];
  *(void *)uint64_t v76 = 96LL;
  *(_BYTE *)(v76 + 8) = 0;
  uint64_t v77 = a1 + v17[124];
  *(void *)uint64_t v77 = 0LL;
  *(_BYTE *)(v77 + 8) = 0;
  uint64_t v78 = a1 + v17[125];
  *(void *)uint64_t v78 = 96LL;
  *(_BYTE *)(v78 + 8) = 0;
  uint64_t v79 = a1 + v17[126];
  *(void *)uint64_t v79 = 0LL;
  *(_BYTE *)(v79 + 8) = 0;
  if (qword_10099B460 != -1) {
    swift_once(&qword_10099B460, sub_10041E410);
  }
  uint64_t v80 = a1 + v17[127];
  *(void *)uint64_t v80 = qword_100A2AA20;
  *(_BYTE *)(v80 + 8) = 0;
  *(_BYTE *)(a1 + v17[128]) = 1;
  uint64_t v81 = a1 + v17[129];
  *(void *)uint64_t v81 = 0x404E000000000000LL;
  *(_BYTE *)(v81 + 8) = 0;
  if (qword_10099B470 != -1) {
    swift_once(&qword_10099B470, sub_10041E438);
  }
  uint64_t v82 = qword_100A2AA30;
  *(void *)(a1 + v17[130]) = qword_100A2AA30;
  uint64_t v83 = qword_10099B468;
  swift_bridgeObjectRetain(v82);
  if (v83 != -1) {
    swift_once(&qword_10099B468, sub_10041E424);
  }
  uint64_t v84 = a1 + v17[131];
  *(void *)uint64_t v84 = qword_100A2AA28;
  *(_BYTE *)(v84 + 8) = 0;
  *(_BYTE *)(a1 + v17[132]) = 1;
  if (qword_10099B478 != -1) {
    swift_once(&qword_10099B478, sub_10041E44C);
  }
  uint64_t v85 = qword_100A2AA38;
  *(void *)(a1 + v17[133]) = qword_100A2AA38;
  *(_BYTE *)(a1 + v17[134]) = 0;
  uint64_t v86 = a1 + v17[135];
  *(void *)uint64_t v86 = 0x3FB999999999999ALL;
  *(_BYTE *)(v86 + 8) = 0;
  uint64_t v87 = a1 + v17[136];
  *(void *)uint64_t v87 = 0x40F5180000000000LL;
  *(_BYTE *)(v87 + 8) = 0;
  *(_BYTE *)(a1 + v17[137]) = 1;
  *(_BYTE *)(a1 + v17[138]) = 0;
  uint64_t v88 = a1 + v17[139];
  *(void *)uint64_t v88 = 6LL;
  *(_BYTE *)(v88 + 8) = 0;
  uint64_t v89 = a1 + v17[140];
  *(void *)uint64_t v89 = 8LL;
  *(_BYTE *)(v89 + 8) = 0;
  uint64_t v90 = a1 + v17[141];
  *(void *)uint64_t v90 = 165LL;
  *(_BYTE *)(v90 + 8) = 0;
  uint64_t v91 = a1 + v17[142];
  *(void *)uint64_t v91 = 32LL;
  *(_BYTE *)(v91 + 8) = 0;
  uint64_t v92 = a1 + v17[143];
  *(void *)uint64_t v92 = 32LL;
  *(_BYTE *)(v92 + 8) = 0;
  uint64_t v93 = a1 + v17[144];
  *(void *)uint64_t v93 = 200LL;
  *(_BYTE *)(v93 + 8) = 0;
  uint64_t v94 = a1 + v17[145];
  *(void *)uint64_t v94 = 5LL;
  *(_BYTE *)(v94 + 8) = 0;
  uint64_t v95 = a1 + v17[146];
  *(void *)uint64_t v95 = 32LL;
  *(_BYTE *)(v95 + 8) = 0;
  uint64_t v96 = a1 + v17[147];
  *(void *)uint64_t v96 = 1160LL;
  *(_BYTE *)(v96 + 8) = 0;
  uint64_t v97 = a1 + v17[148];
  *(void *)uint64_t v97 = 7LL;
  *(_BYTE *)(v97 + 8) = 0;
  uint64_t v98 = a1 + v17[149];
  *(void *)uint64_t v98 = 3LL;
  *(_BYTE *)(v98 + 8) = 0;
  uint64_t v99 = a1 + v17[150];
  *(void *)uint64_t v99 = 3LL;
  *(_BYTE *)(v99 + 8) = 0;
  uint64_t v100 = a1 + v17[151];
  *(void *)uint64_t v100 = 30LL;
  *(_BYTE *)(v100 + 8) = 0;
  uint64_t v101 = a1 + v17[152];
  *(void *)uint64_t v101 = 300LL;
  *(_BYTE *)(v101 + 8) = 0;
  uint64_t v102 = a1 + v17[153];
  *(void *)uint64_t v102 = 2160LL;
  *(_BYTE *)(v102 + 8) = 0;
  uint64_t v103 = a1 + v17[154];
  *(void *)uint64_t v103 = 1200LL;
  *(_BYTE *)(v103 + 8) = 0;
  uint64_t v104 = a1 + v17[155];
  *(void *)uint64_t v104 = 0x404E000000000000LL;
  *(_BYTE *)(v104 + 8) = 0;
  uint64_t v105 = a1 + v17[156];
  *(void *)uint64_t v105 = 0x4132750000000000LL;
  *(_BYTE *)(v105 + 8) = 0;
  *(_BYTE *)(a1 + v17[157]) = 0;
  uint64_t v106 = a1 + v17[158];
  *(void *)uint64_t v106 = 0x408A400000000000LL;
  *(_BYTE *)(v106 + 8) = 0;
  uint64_t v107 = a1 + v17[159];
  *(void *)uint64_t v107 = 0x405E000000000000LL;
  *(_BYTE *)(v107 + 8) = 0;
  uint64_t v108 = a1 + v17[160];
  *(void *)uint64_t v108 = 0x4122750000000000LL;
  *(_BYTE *)(v108 + 8) = 0;
  uint64_t v109 = (void *)(a1 + v17[161]);
  *uint64_t v109 = 0xD00000000000001BLL;
  v109[1] = 0x8000000100861BB0LL;
  uint64_t v110 = a1 + v17[162];
  *(void *)uint64_t v110 = 32LL;
  *(_BYTE *)(v110 + 8) = 0;
  *(_BYTE *)(a1 + v17[163]) = 0;
  *(_BYTE *)(a1 + v17[164]) = 0;
  uint64_t v111 = a1 + v17[165];
  *(void *)uint64_t v111 = 0x40AC200000000000LL;
  *(_BYTE *)(v111 + 8) = 0;
  uint64_t v112 = a1 + v17[166];
  *(void *)uint64_t v112 = 0x409C200000000000LL;
  *(_BYTE *)(v112 + 8) = 0;
  *(_BYTE *)(a1 + v17[167]) = 0;
  uint64_t v113 = a1 + v17[168];
  *(_DWORD *)uint64_t v113 = 2;
  *(_BYTE *)(v113 + 4) = 0;
  uint64_t v114 = a1 + v17[169];
  *(void *)uint64_t v114 = 10LL;
  *(_BYTE *)(v114 + 8) = 0;
  uint64_t v115 = a1 + v17[170];
  *(void *)uint64_t v115 = 0x404E000000000000LL;
  *(_BYTE *)(v115 + 8) = 0;
  uint64_t v116 = a1 + v17[171];
  *(void *)uint64_t v116 = 0x4034000000000000LL;
  *(_BYTE *)(v116 + 8) = 0;
  uint64_t v117 = a1 + v17[172];
  *(void *)uint64_t v117 = 0x4014000000000000LL;
  *(_BYTE *)(v117 + 8) = 0;
  uint64_t v118 = a1 + v17[173];
  *(void *)uint64_t v118 = 0x408C200000000000LL;
  *(_BYTE *)(v118 + 8) = 0;
  uint64_t v119 = a1 + v17[174];
  *(void *)uint64_t v119 = 0x408C200000000000LL;
  *(_BYTE *)(v119 + 8) = 0;
  uint64_t v120 = a1 + v17[175];
  *(void *)uint64_t v120 = 0x404E000000000000LL;
  *(_BYTE *)(v120 + 8) = 0;
  *(_BYTE *)(a1 + v17[176]) = 1;
  uint64_t v121 = a1 + v17[177];
  *(void *)uint64_t v121 = 0x40F5180000000000LL;
  *(_BYTE *)(v121 + 8) = 0;
  uint64_t v122 = a1 + v17[178];
  *(void *)uint64_t v122 = 0x4122750000000000LL;
  *(_BYTE *)(v122 + 8) = 0;
  return swift_bridgeObjectRetain(v85);
}

uint64_t sub_10041511C@<X0>(void *a1@<X0>, char a2@<W1>, uint64_t a3@<X8>)
{
  uint64_t v6 = (int *)type metadata accessor for DefaultConfigurationLayer(0LL);
  __chkstk_darwin(v6);
  uint64_t v8 = (char *)v679 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  *(void *)uint64_t v8 = (*(uint64_t (**)(uint64_t, uint64_t))(v10 + 8))(v9, v10);
  *((void *)v8 + 1) = v11;
  v8[25] = a2;
  uint64_t v12 = a1[3];
  uint64_t v13 = a1[4];
  sub_100012ED8(a1, v12);
  *((void *)v8 + 2) = (*(uint64_t (**)(uint64_t, uint64_t))(v13 + 16))(v12, v13);
  v8[24] = v14 & 1;
  uint64_t v15 = a1[3];
  uint64_t v16 = a1[4];
  sub_100012ED8(a1, v15);
  *((void *)v8 + 4) = (*(uint64_t (**)(uint64_t, uint64_t))(v16 + 24))(v15, v16);
  v8[40] = v17 & 1;
  uint64_t v18 = a1[3];
  uint64_t v19 = a1[4];
  sub_100012ED8(a1, v18);
  *((void *)v8 + 6) = (*(uint64_t (**)(uint64_t, uint64_t))(v19 + 32))(v18, v19);
  v8[56] = v20 & 1;
  uint64_t v21 = a1[3];
  uint64_t v22 = a1[4];
  sub_100012ED8(a1, v21);
  v8[57] = (*(uint64_t (**)(uint64_t, uint64_t))(v22 + 40))(v21, v22);
  uint64_t v23 = a1[3];
  uint64_t v24 = a1[4];
  sub_100012ED8(a1, v23);
  *((void *)v8 + 8) = (*(uint64_t (**)(uint64_t, uint64_t))(v24 + 48))(v23, v24);
  uint64_t v25 = a1[3];
  uint64_t v26 = a1[4];
  sub_100012ED8(a1, v25);
  v8[72] = (*(uint64_t (**)(uint64_t, uint64_t))(v26 + 56))(v25, v26);
  uint64_t v27 = a1[3];
  uint64_t v28 = a1[4];
  sub_100012ED8(a1, v27);
  *((void *)v8 + 10) = (*(uint64_t (**)(uint64_t, uint64_t))(v28 + 64))(v27, v28);
  *((void *)v8 + 11) = v29;
  uint64_t v30 = a1[3];
  uint64_t v31 = a1[4];
  sub_100012ED8(a1, v30);
  *((void *)v8 + 12) = (*(uint64_t (**)(uint64_t, uint64_t))(v31 + 80))(v30, v31);
  v8[104] = v32 & 1;
  uint64_t v33 = a1[3];
  uint64_t v34 = a1[4];
  sub_100012ED8(a1, v33);
  v8[105] = (*(uint64_t (**)(uint64_t, uint64_t))(v34 + 72))(v33, v34);
  uint64_t v35 = a1[3];
  uint64_t v36 = a1[4];
  sub_100012ED8(a1, v35);
  v8[106] = (*(uint64_t (**)(uint64_t, uint64_t))(v36 + 88))(v35, v36);
  uint64_t v37 = a1[3];
  uint64_t v38 = a1[4];
  sub_100012ED8(a1, v37);
  *((void *)v8 + 14) = (*(uint64_t (**)(uint64_t, uint64_t))(v38 + 96))(v37, v38);
  v8[120] = v39 & 1;
  uint64_t v40 = a1[3];
  uint64_t v41 = a1[4];
  sub_100012ED8(a1, v40);
  *((void *)v8 + swift_weakDestroy(v0 + 16) = (*(uint64_t (**)(uint64_t, uint64_t))(v41 + 104))(v40, v41);
  v8[136] = v42 & 1;
  uint64_t v43 = a1[3];
  uint64_t v44 = a1[4];
  sub_100012ED8(a1, v43);
  *((void *)v8 + 18) = (*(uint64_t (**)(uint64_t, uint64_t))(v44 + 112))(v43, v44);
  v8[152] = v45 & 1;
  uint64_t v46 = a1[3];
  uint64_t v47 = a1[4];
  sub_100012ED8(a1, v46);
  *((void *)v8 + 20) = (*(uint64_t (**)(uint64_t, uint64_t))(v47 + 120))(v46, v47);
  v8[168] = v48 & 1;
  uint64_t v49 = a1[3];
  uint64_t v50 = a1[4];
  sub_100012ED8(a1, v49);
  *((void *)v8 + 22) = (*(uint64_t (**)(uint64_t, uint64_t))(v50 + 128))(v49, v50);
  v8[184] = v51 & 1;
  uint64_t v52 = a1[3];
  uint64_t v53 = a1[4];
  sub_100012ED8(a1, v52);
  *((void *)v8 + 24) = (*(uint64_t (**)(uint64_t, uint64_t))(v53 + 136))(v52, v53);
  v8[200] = v54 & 1;
  uint64_t v55 = a1[3];
  uint64_t v56 = a1[4];
  sub_100012ED8(a1, v55);
  *((void *)v8 + 26) = (*(uint64_t (**)(uint64_t, uint64_t))(v56 + 144))(v55, v56);
  v8[216] = v57 & 1;
  uint64_t v58 = a1[3];
  uint64_t v59 = a1[4];
  sub_100012ED8(a1, v58);
  *((void *)v8 + 28) = (*(uint64_t (**)(uint64_t, uint64_t))(v59 + 152))(v58, v59);
  v8[232] = v60 & 1;
  uint64_t v61 = a1[3];
  uint64_t v62 = a1[4];
  sub_100012ED8(a1, v61);
  *((void *)v8 + 30) = (*(uint64_t (**)(uint64_t, uint64_t))(v62 + 160))(v61, v62);
  v8[248] = v63 & 1;
  uint64_t v64 = a1[3];
  uint64_t v65 = a1[4];
  sub_100012ED8(a1, v64);
  *((void *)v8 + 32) = (*(uint64_t (**)(uint64_t, uint64_t))(v65 + 168))(v64, v65);
  v8[264] = v66 & 1;
  uint64_t v67 = a1[3];
  uint64_t v68 = a1[4];
  sub_100012ED8(a1, v67);
  v8[265] = (*(uint64_t (**)(uint64_t, uint64_t))(v68 + 176))(v67, v68);
  uint64_t v69 = a1[3];
  uint64_t v70 = a1[4];
  sub_100012ED8(a1, v69);
  *((void *)v8 + 34) = (*(uint64_t (**)(uint64_t, uint64_t))(v70 + 184))(v69, v70);
  uint64_t v71 = a1[3];
  uint64_t v72 = a1[4];
  sub_100012ED8(a1, v71);
  *((void *)v8 + 35) = (*(uint64_t (**)(uint64_t, uint64_t))(v72 + 192))(v71, v72);
  v8[288] = v73 & 1;
  uint64_t v74 = a1[3];
  uint64_t v75 = a1[4];
  sub_100012ED8(a1, v74);
  *((void *)v8 + 37) = (*(uint64_t (**)(uint64_t, uint64_t))(v75 + 200))(v74, v75);
  v8[304] = v76 & 1;
  uint64_t v77 = a1[3];
  uint64_t v78 = a1[4];
  sub_100012ED8(a1, v77);
  *((void *)v8 + 39) = (*(uint64_t (**)(uint64_t, uint64_t))(v78 + 208))(v77, v78);
  v8[320] = v79 & 1;
  uint64_t v80 = a1[3];
  uint64_t v81 = a1[4];
  sub_100012ED8(a1, v80);
  *((void *)v8 + 41) = (*(uint64_t (**)(uint64_t, uint64_t))(v81 + 216))(v80, v81);
  v8[336] = v82 & 1;
  uint64_t v83 = a1[3];
  uint64_t v84 = a1[4];
  sub_100012ED8(a1, v83);
  *((void *)v8 + 43) = (*(uint64_t (**)(uint64_t, uint64_t))(v84 + 224))(v83, v84);
  v8[352] = v85 & 1;
  uint64_t v86 = a1[3];
  uint64_t v87 = a1[4];
  sub_100012ED8(a1, v86);
  *((void *)v8 + 45) = (*(uint64_t (**)(uint64_t, uint64_t))(v87 + 232))(v86, v87);
  v8[368] = v88 & 1;
  uint64_t v89 = a1[3];
  uint64_t v90 = a1[4];
  sub_100012ED8(a1, v89);
  *((void *)v8 + 47) = (*(uint64_t (**)(uint64_t, uint64_t))(v90 + 240))(v89, v90);
  v8[384] = v91 & 1;
  uint64_t v92 = a1[3];
  uint64_t v93 = a1[4];
  sub_100012ED8(a1, v92);
  *((void *)v8 + 49) = (*(uint64_t (**)(uint64_t, uint64_t))(v93 + 240))(v92, v93);
  v8[400] = v94 & 1;
  uint64_t v95 = a1[3];
  uint64_t v96 = a1[4];
  sub_100012ED8(a1, v95);
  *((void *)v8 + 51) = (*(uint64_t (**)(uint64_t, uint64_t))(v96 + 256))(v95, v96);
  v8[416] = v97 & 1;
  uint64_t v98 = a1[3];
  uint64_t v99 = a1[4];
  sub_100012ED8(a1, v98);
  *((void *)v8 + 53) = (*(uint64_t (**)(uint64_t, uint64_t))(v99 + 264))(v98, v99);
  v8[432] = v100 & 1;
  uint64_t v101 = a1[3];
  uint64_t v102 = a1[4];
  sub_100012ED8(a1, v101);
  v8[433] = (*(uint64_t (**)(uint64_t, uint64_t))(v102 + 272))(v101, v102);
  uint64_t v103 = a1[3];
  uint64_t v104 = a1[4];
  sub_100012ED8(a1, v103);
  *((void *)v8 + 55) = (*(uint64_t (**)(uint64_t, uint64_t))(v104 + 280))(v103, v104);
  v8[448] = v105 & 1;
  uint64_t v106 = a1[3];
  uint64_t v107 = a1[4];
  sub_100012ED8(a1, v106);
  *((void *)v8 + 57) = (*(uint64_t (**)(uint64_t, uint64_t))(v107 + 288))(v106, v107);
  v8[464] = v108 & 1;
  uint64_t v109 = a1[3];
  uint64_t v110 = a1[4];
  sub_100012ED8(a1, v109);
  *((void *)v8 + 59) = (*(uint64_t (**)(uint64_t, uint64_t))(v110 + 296))(v109, v110);
  v8[480] = v111 & 1;
  uint64_t v112 = a1[3];
  uint64_t v113 = a1[4];
  sub_100012ED8(a1, v112);
  *((void *)v8 + 61) = (*(uint64_t (**)(uint64_t, uint64_t))(v113 + 304))(v112, v113);
  v8[496] = v114 & 1;
  uint64_t v115 = a1[3];
  uint64_t v116 = a1[4];
  sub_100012ED8(a1, v115);
  *((void *)v8 + 63) = (*(uint64_t (**)(uint64_t, uint64_t))(v116 + 312))(v115, v116);
  v8[512] = v117 & 1;
  uint64_t v118 = a1[3];
  uint64_t v119 = a1[4];
  sub_100012ED8(a1, v118);
  *((void *)v8 + 65) = (*(uint64_t (**)(uint64_t, uint64_t))(v119 + 320))(v118, v119);
  v8[528] = v120 & 1;
  uint64_t v121 = a1[3];
  uint64_t v122 = a1[4];
  sub_100012ED8(a1, v121);
  *((void *)v8 + 67) = (*(uint64_t (**)(uint64_t, uint64_t))(v122 + 328))(v121, v122);
  v8[544] = v123 & 1;
  uint64_t v124 = a1[3];
  uint64_t v125 = a1[4];
  sub_100012ED8(a1, v124);
  *((void *)v8 + 69) = (*(uint64_t (**)(uint64_t, uint64_t))(v125 + 336))(v124, v125);
  uint64_t v126 = a1[3];
  uint64_t v127 = a1[4];
  sub_100012ED8(a1, v126);
  *((void *)v8 + 70) = (*(uint64_t (**)(uint64_t, uint64_t))(v127 + 344))(v126, v127);
  v8[568] = v128 & 1;
  uint64_t v129 = a1[3];
  uint64_t v130 = a1[4];
  sub_100012ED8(a1, v129);
  *((void *)v8 + 72) = (*(uint64_t (**)(uint64_t, uint64_t))(v130 + 352))(v129, v130);
  v8[584] = v131 & 1;
  uint64_t v132 = a1[3];
  uint64_t v133 = a1[4];
  sub_100012ED8(a1, v132);
  *((void *)v8 + 74) = (*(uint64_t (**)(uint64_t, uint64_t))(v133 + 360))(v132, v133);
  uint64_t v134 = a1[3];
  uint64_t v135 = a1[4];
  sub_100012ED8(a1, v134);
  *((void *)v8 + 75) = (*(uint64_t (**)(uint64_t, uint64_t))(v135 + 368))(v134, v135);
  uint64_t v136 = a1[3];
  uint64_t v137 = a1[4];
  sub_100012ED8(a1, v136);
  *((void *)v8 + 76) = (*(uint64_t (**)(uint64_t, uint64_t))(v137 + 376))(v136, v137);
  v8[616] = v138 & 1;
  uint64_t v139 = a1[3];
  uint64_t v140 = a1[4];
  sub_100012ED8(a1, v139);
  *((void *)v8 + 78) = (*(uint64_t (**)(uint64_t, uint64_t))(v140 + 384))(v139, v140);
  v8[632] = v141 & 1;
  uint64_t v142 = a1[3];
  uint64_t v143 = a1[4];
  sub_100012ED8(a1, v142);
  *((void *)v8 + 80) = (*(uint64_t (**)(uint64_t, uint64_t))(v143 + 392))(v142, v143);
  v8[648] = v144 & 1;
  uint64_t v145 = a1[3];
  uint64_t v146 = a1[4];
  sub_100012ED8(a1, v145);
  *((void *)v8 + 82) = (*(uint64_t (**)(uint64_t, uint64_t))(v146 + 400))(v145, v146);
  v8[664] = v147 & 1;
  uint64_t v148 = a1[3];
  uint64_t v149 = a1[4];
  sub_100012ED8(a1, v148);
  *((void *)v8 + 84) = (*(uint64_t (**)(uint64_t, uint64_t))(v149 + 408))(v148, v149);
  v8[680] = v150 & 1;
  uint64_t v151 = a1[3];
  uint64_t v152 = a1[4];
  sub_100012ED8(a1, v151);
  v8[681] = (*(uint64_t (**)(uint64_t, uint64_t))(v152 + 416))(v151, v152);
  uint64_t v153 = a1[3];
  uint64_t v154 = a1[4];
  sub_100012ED8(a1, v153);
  (*(void (**)(uint64_t, uint64_t))(v154 + 424))(v153, v154);
  uint64_t v155 = a1[3];
  uint64_t v156 = a1[4];
  sub_100012ED8(a1, v155);
  (*(void (**)(uint64_t, uint64_t))(v156 + 432))(v155, v156);
  uint64_t v157 = a1[3];
  uint64_t v158 = a1[4];
  sub_100012ED8(a1, v157);
  uint64_t v159 = (*(uint64_t (**)(uint64_t, uint64_t))(v158 + 440))(v157, v158);
  id v160 = &v8[v6[59]];
  *(void *)id v160 = v159;
  v160[8] = v161 & 1;
  uint64_t v162 = a1[3];
  uint64_t v163 = a1[4];
  sub_100012ED8(a1, v162);
  (*(void (**)(uint64_t, uint64_t))(v163 + 448))(v162, v163);
  uint64_t v164 = a1[3];
  uint64_t v165 = a1[4];
  sub_100012ED8(a1, v164);
  uint64_t v166 = (*(uint64_t (**)(uint64_t, uint64_t))(v165 + 456))(v164, v165);
  uint64_t v167 = &v8[v6[61]];
  *(void *)uint64_t v167 = v166;
  v167[8] = v168 & 1;
  uint64_t v169 = a1[3];
  uint64_t v170 = a1[4];
  sub_100012ED8(a1, v169);
  uint64_t v171 = (*(uint64_t (**)(uint64_t, uint64_t))(v170 + 464))(v169, v170);
  uint64_t v172 = &v8[v6[62]];
  *(void *)uint64_t v172 = v171;
  v172[8] = v173 & 1;
  uint64_t v174 = a1[3];
  uint64_t v175 = a1[4];
  sub_100012ED8(a1, v174);
  uint64_t v176 = (*(uint64_t (**)(uint64_t, uint64_t))(v175 + 472))(v174, v175);
  uint64_t v177 = &v8[v6[63]];
  *(void *)uint64_t v177 = v176;
  v177[8] = v178 & 1;
  uint64_t v179 = a1[3];
  uint64_t v180 = a1[4];
  sub_100012ED8(a1, v179);
  uint64_t v181 = (*(uint64_t (**)(uint64_t, uint64_t))(v180 + 480))(v179, v180);
  uint64_t v182 = &v8[v6[64]];
  *(void *)uint64_t v182 = v181;
  v182[8] = v183 & 1;
  uint64_t v184 = a1[3];
  uint64_t v185 = a1[4];
  sub_100012ED8(a1, v184);
  uint64_t v186 = (*(uint64_t (**)(uint64_t, uint64_t))(v185 + 488))(v184, v185);
  uint64_t v187 = &v8[v6[65]];
  *(void *)uint64_t v187 = v186;
  v187[8] = v188 & 1;
  uint64_t v189 = a1[3];
  uint64_t v190 = a1[4];
  sub_100012ED8(a1, v189);
  uint64_t v191 = (*(uint64_t (**)(uint64_t, uint64_t))(v190 + 496))(v189, v190);
  uint64_t v192 = &v8[v6[66]];
  *(void *)uint64_t v192 = v191;
  v192[8] = v193 & 1;
  uint64_t v194 = a1[3];
  uint64_t v195 = a1[4];
  sub_100012ED8(a1, v194);
  (*(void (**)(void *__return_ptr, uint64_t, uint64_t))(v195 + 504))(v679, v194, v195);
  sub_100015750((uint64_t)v679, (uint64_t)&v8[v6[67]], (uint64_t *)&unk_1009B9A80);
  uint64_t v196 = a1[3];
  uint64_t v197 = a1[4];
  sub_100012ED8(a1, v196);
  v8[v6[68]] = (*(uint64_t (**)(uint64_t, uint64_t))(v197 + 512))(v196, v197);
  uint64_t v198 = a1[3];
  uint64_t v199 = a1[4];
  sub_100012ED8(a1, v198);
  v8[v6[69]] = (*(uint64_t (**)(uint64_t, uint64_t))(v199 + 520))(v198, v199);
  uint64_t v200 = a1[3];
  uint64_t v201 = a1[4];
  sub_100012ED8(a1, v200);
  v8[v6[70]] = (*(uint64_t (**)(uint64_t, uint64_t))(v201 + 528))(v200, v201);
  uint64_t v202 = a1[3];
  uint64_t v203 = a1[4];
  sub_100012ED8(a1, v202);
  uint64_t v204 = (*(uint64_t (**)(uint64_t, uint64_t))(v203 + 536))(v202, v203);
  uint64_t v205 = &v8[v6[71]];
  *(void *)uint64_t v205 = v204;
  v205[8] = v206 & 1;
  uint64_t v207 = a1[3];
  uint64_t v208 = a1[4];
  sub_100012ED8(a1, v207);
  uint64_t v209 = (*(uint64_t (**)(uint64_t, uint64_t))(v208 + 544))(v207, v208);
  uint64_t v210 = &v8[v6[72]];
  *(void *)uint64_t v210 = v209;
  v210[8] = v211 & 1;
  uint64_t v212 = a1[3];
  uint64_t v213 = a1[4];
  sub_100012ED8(a1, v212);
  uint64_t v214 = (*(uint64_t (**)(uint64_t, uint64_t))(v213 + 552))(v212, v213);
  uint64_t v215 = &v8[v6[73]];
  *(void *)uint64_t v215 = v214;
  v215[8] = v216 & 1;
  uint64_t v217 = a1[3];
  uint64_t v218 = a1[4];
  sub_100012ED8(a1, v217);
  uint64_t v219 = (*(uint64_t (**)(uint64_t, uint64_t))(v218 + 560))(v217, v218);
  int v220 = &v8[v6[74]];
  *(void *)int v220 = v219;
  v220[8] = v221 & 1;
  uint64_t v222 = a1[3];
  uint64_t v223 = a1[4];
  sub_100012ED8(a1, v222);
  uint64_t v224 = (*(uint64_t (**)(uint64_t, uint64_t))(v223 + 568))(v222, v223);
  uint64_t v225 = &v8[v6[75]];
  *(void *)uint64_t v225 = v224;
  v225[8] = v226 & 1;
  uint64_t v227 = a1[3];
  uint64_t v228 = a1[4];
  sub_100012ED8(a1, v227);
  uint64_t v229 = (*(uint64_t (**)(uint64_t, uint64_t))(v228 + 576))(v227, v228);
  id v230 = &v8[v6[76]];
  *(void *)id v230 = v229;
  v230[8] = v231 & 1;
  uint64_t v232 = a1[3];
  uint64_t v233 = a1[4];
  sub_100012ED8(a1, v232);
  uint64_t v234 = (*(uint64_t (**)(uint64_t, uint64_t))(v233 + 584))(v232, v233);
  uint64_t v235 = &v8[v6[77]];
  *(void *)uint64_t v235 = v234;
  v235[8] = v236 & 1;
  uint64_t v237 = a1[3];
  uint64_t v238 = a1[4];
  sub_100012ED8(a1, v237);
  uint64_t v239 = (*(uint64_t (**)(uint64_t, uint64_t))(v238 + 592))(v237, v238);
  uint64_t v240 = &v8[v6[78]];
  *(void *)uint64_t v240 = v239;
  v240[8] = v241 & 1;
  uint64_t v242 = a1[3];
  uint64_t v243 = a1[4];
  sub_100012ED8(a1, v242);
  uint64_t v244 = (*(uint64_t (**)(uint64_t, uint64_t))(v243 + 600))(v242, v243);
  __int128 v245 = &v8[v6[79]];
  *(void *)__int128 v245 = v244;
  v245[8] = v246 & 1;
  uint64_t v247 = a1[3];
  uint64_t v248 = a1[4];
  sub_100012ED8(a1, v247);
  uint64_t v249 = (*(uint64_t (**)(uint64_t, uint64_t))(v248 + 608))(v247, v248);
  uint64_t v250 = (uint64_t *)&v8[v6[80]];
  *uint64_t v250 = v249;
  v250[1] = v251;
  uint64_t v252 = a1[3];
  uint64_t v253 = a1[4];
  sub_100012ED8(a1, v252);
  uint64_t v254 = (*(uint64_t (**)(uint64_t, uint64_t))(v253 + 616))(v252, v253);
  int v255 = &v8[v6[81]];
  *(void *)int v255 = v254;
  v255[8] = v256 & 1;
  uint64_t v257 = a1[3];
  uint64_t v258 = a1[4];
  sub_100012ED8(a1, v257);
  uint64_t v259 = (*(uint64_t (**)(uint64_t, uint64_t))(v258 + 624))(v257, v258);
  uint64_t v260 = (uint64_t *)&v8[v6[82]];
  *uint64_t v260 = v259;
  v260[1] = v261;
  uint64_t v262 = a1[3];
  uint64_t v263 = a1[4];
  sub_100012ED8(a1, v262);
  uint64_t v264 = (*(uint64_t (**)(uint64_t, uint64_t))(v263 + 632))(v262, v263);
  uint64_t v265 = &v8[v6[83]];
  *(void *)uint64_t v265 = v264;
  v265[8] = v266 & 1;
  uint64_t v267 = a1[3];
  uint64_t v268 = a1[4];
  sub_100012ED8(a1, v267);
  *(void *)&v8[v6[84]] = (*(uint64_t (**)(uint64_t, uint64_t))(v268 + 640))(v267, v268);
  uint64_t v269 = a1[3];
  uint64_t v270 = a1[4];
  sub_100012ED8(a1, v269);
  uint64_t v271 = (*(uint64_t (**)(uint64_t, uint64_t))(v270 + 648))(v269, v270);
  uint64_t v272 = (uint64_t *)&v8[v6[85]];
  *uint64_t v272 = v271;
  v272[1] = v273;
  uint64_t v274 = a1[3];
  uint64_t v275 = a1[4];
  sub_100012ED8(a1, v274);
  uint64_t v276 = (*(uint64_t (**)(uint64_t, uint64_t))(v275 + 656))(v274, v275);
  __int128 v277 = &v8[v6[86]];
  *(void *)__int128 v277 = v276;
  v277[8] = v278 & 1;
  uint64_t v279 = a1[3];
  uint64_t v280 = a1[4];
  sub_100012ED8(a1, v279);
  uint64_t v281 = (*(uint64_t (**)(uint64_t, uint64_t))(v280 + 696))(v279, v280);
  uint64_t v282 = &v8[v6[91]];
  *(void *)uint64_t v282 = v281;
  v282[8] = v283 & 1;
  uint64_t v284 = a1[3];
  uint64_t v285 = a1[4];
  sub_100012ED8(a1, v284);
  uint64_t v286 = (*(uint64_t (**)(uint64_t, uint64_t))(v285 + 704))(v284, v285);
  unint64_t v287 = &v8[v6[92]];
  *(void *)unint64_t v287 = v286;
  v287[8] = v288 & 1;
  uint64_t v289 = a1[3];
  uint64_t v290 = a1[4];
  sub_100012ED8(a1, v289);
  uint64_t v291 = (*(uint64_t (**)(uint64_t, uint64_t))(v290 + 712))(v289, v290);
  unint64_t v292 = &v8[v6[93]];
  *(void *)unint64_t v292 = v291;
  v292[8] = v293 & 1;
  uint64_t v294 = a1[3];
  uint64_t v295 = a1[4];
  sub_100012ED8(a1, v294);
  uint64_t v296 = (*(uint64_t (**)(uint64_t, uint64_t))(v295 + 720))(v294, v295);
  uint64_t v297 = &v8[v6[94]];
  *(void *)uint64_t v297 = v296;
  v297[8] = v298 & 1;
  uint64_t v299 = a1[3];
  uint64_t v300 = a1[4];
  sub_100012ED8(a1, v299);
  uint64_t v301 = (*(uint64_t (**)(uint64_t, uint64_t))(v300 + 728))(v299, v300);
  uint64_t v302 = &v8[v6[95]];
  *(void *)uint64_t v302 = v301;
  v302[8] = v303 & 1;
  uint64_t v304 = a1[3];
  uint64_t v305 = a1[4];
  sub_100012ED8(a1, v304);
  uint64_t v306 = (*(uint64_t (**)(uint64_t, uint64_t))(v305 + 736))(v304, v305);
  uint64_t v307 = &v8[v6[96]];
  *(void *)uint64_t v307 = v306;
  v307[8] = v308 & 1;
  uint64_t v309 = a1[3];
  uint64_t v310 = a1[4];
  sub_100012ED8(a1, v309);
  uint64_t v311 = (*(uint64_t (**)(uint64_t, uint64_t))(v310 + 744))(v309, v310);
  uint64_t v312 = &v8[v6[97]];
  *(void *)uint64_t v312 = v311;
  v312[8] = v313 & 1;
  uint64_t v314 = a1[3];
  uint64_t v315 = a1[4];
  sub_100012ED8(a1, v314);
  uint64_t v316 = (*(uint64_t (**)(uint64_t, uint64_t))(v315 + 752))(v314, v315);
  __int128 v317 = &v8[v6[98]];
  *(void *)__int128 v317 = v316;
  v317[8] = v318 & 1;
  uint64_t v319 = a1[3];
  uint64_t v320 = a1[4];
  sub_100012ED8(a1, v319);
  uint64_t v321 = (*(uint64_t (**)(uint64_t, uint64_t))(v320 + 760))(v319, v320);
  uint64_t v322 = &v8[v6[99]];
  *(void *)uint64_t v322 = v321;
  v322[8] = v323 & 1;
  uint64_t v324 = a1[3];
  uint64_t v325 = a1[4];
  sub_100012ED8(a1, v324);
  uint64_t v326 = (*(uint64_t (**)(uint64_t, uint64_t))(v325 + 768))(v324, v325);
  v327 = &v8[v6[100]];
  *(void *)v327 = v326;
  v327[8] = v328 & 1;
  uint64_t v329 = a1[3];
  uint64_t v330 = a1[4];
  sub_100012ED8(a1, v329);
  uint64_t v331 = (*(uint64_t (**)(uint64_t, uint64_t))(v330 + 776))(v329, v330);
  v332 = &v8[v6[101]];
  *(void *)v332 = v331;
  v332[8] = v333 & 1;
  uint64_t v334 = a1[3];
  uint64_t v335 = a1[4];
  sub_100012ED8(a1, v334);
  v8[v6[87]] = (*(uint64_t (**)(uint64_t, uint64_t))(v335 + 664))(v334, v335);
  uint64_t v336 = a1[3];
  uint64_t v337 = a1[4];
  sub_100012ED8(a1, v336);
  v8[v6[88]] = (*(uint64_t (**)(uint64_t, uint64_t))(v337 + 672))(v336, v337);
  uint64_t v338 = a1[3];
  uint64_t v339 = a1[4];
  sub_100012ED8(a1, v338);
  v8[v6[89]] = (*(uint64_t (**)(uint64_t, uint64_t))(v339 + 680))(v338, v339);
  uint64_t v340 = a1[3];
  uint64_t v341 = a1[4];
  sub_100012ED8(a1, v340);
  v8[v6[90]] = (*(uint64_t (**)(uint64_t, uint64_t))(v341 + 688))(v340, v341);
  uint64_t v342 = a1[3];
  uint64_t v343 = a1[4];
  sub_100012ED8(a1, v342);
  uint64_t v344 = (*(uint64_t (**)(uint64_t, uint64_t))(v343 + 784))(v342, v343);
  v345 = &v8[v6[102]];
  *(void *)v345 = v344;
  v345[8] = v346 & 1;
  uint64_t v347 = a1[3];
  uint64_t v348 = a1[4];
  sub_100012ED8(a1, v347);
  uint64_t v349 = (*(uint64_t (**)(uint64_t, uint64_t))(v348 + 792))(v347, v348);
  v350 = &v8[v6[103]];
  *(void *)v350 = v349;
  v350[8] = v351 & 1;
  uint64_t v352 = a1[3];
  uint64_t v353 = a1[4];
  sub_100012ED8(a1, v352);
  uint64_t v354 = (*(uint64_t (**)(uint64_t, uint64_t))(v353 + 800))(v352, v353);
  v355 = &v8[v6[104]];
  *(void *)v355 = v354;
  v355[8] = v356 & 1;
  uint64_t v357 = a1[3];
  uint64_t v358 = a1[4];
  sub_100012ED8(a1, v357);
  uint64_t v359 = (*(uint64_t (**)(uint64_t, uint64_t))(v358 + 808))(v357, v358);
  v360 = &v8[v6[105]];
  *(void *)v360 = v359;
  v360[8] = v361 & 1;
  uint64_t v362 = a1[3];
  uint64_t v363 = a1[4];
  sub_100012ED8(a1, v362);
  uint64_t v364 = (*(uint64_t (**)(uint64_t, uint64_t))(v363 + 816))(v362, v363);
  v365 = &v8[v6[106]];
  *(void *)v365 = v364;
  v365[8] = v366 & 1;
  uint64_t v367 = a1[3];
  uint64_t v368 = a1[4];
  sub_100012ED8(a1, v367);
  uint64_t v369 = (*(uint64_t (**)(uint64_t, uint64_t))(v368 + 824))(v367, v368);
  v370 = &v8[v6[107]];
  *(void *)v370 = v369;
  v370[8] = v371 & 1;
  uint64_t v372 = a1[3];
  uint64_t v373 = a1[4];
  sub_100012ED8(a1, v372);
  uint64_t v374 = (*(uint64_t (**)(uint64_t, uint64_t))(v373 + 832))(v372, v373);
  v375 = &v8[v6[108]];
  *(void *)v375 = v374;
  v375[8] = v376 & 1;
  uint64_t v377 = a1[3];
  uint64_t v378 = a1[4];
  sub_100012ED8(a1, v377);
  uint64_t v379 = (*(uint64_t (**)(uint64_t, uint64_t))(v378 + 840))(v377, v378);
  v380 = &v8[v6[109]];
  *(void *)v380 = v379;
  v380[8] = v381 & 1;
  uint64_t v382 = a1[3];
  uint64_t v383 = a1[4];
  sub_100012ED8(a1, v382);
  uint64_t v384 = (*(uint64_t (**)(uint64_t, uint64_t))(v383 + 848))(v382, v383);
  v385 = &v8[v6[110]];
  *(void *)v385 = v384;
  v385[8] = v386 & 1;
  uint64_t v387 = a1[3];
  uint64_t v388 = a1[4];
  sub_100012ED8(a1, v387);
  uint64_t v389 = (*(uint64_t (**)(uint64_t, uint64_t))(v388 + 856))(v387, v388);
  v390 = &v8[v6[111]];
  *(void *)v390 = v389;
  v390[8] = v391 & 1;
  uint64_t v392 = a1[3];
  uint64_t v393 = a1[4];
  sub_100012ED8(a1, v392);
  uint64_t v394 = (*(uint64_t (**)(uint64_t, uint64_t))(v393 + 864))(v392, v393);
  v395 = &v8[v6[112]];
  *(void *)v395 = v394;
  v395[8] = v396 & 1;
  uint64_t v397 = a1[3];
  uint64_t v398 = a1[4];
  sub_100012ED8(a1, v397);
  v8[v6[113]] = (*(uint64_t (**)(uint64_t, uint64_t))(v398 + 872))(v397, v398);
  uint64_t v399 = a1[3];
  uint64_t v400 = a1[4];
  sub_100012ED8(a1, v399);
  uint64_t v401 = (*(uint64_t (**)(uint64_t, uint64_t))(v400 + 880))(v399, v400);
  v402 = &v8[v6[114]];
  *(void *)v402 = v401;
  v402[8] = v403 & 1;
  uint64_t v404 = a1[3];
  uint64_t v405 = a1[4];
  sub_100012ED8(a1, v404);
  uint64_t v406 = (*(uint64_t (**)(uint64_t, uint64_t))(v405 + 888))(v404, v405);
  v407 = &v8[v6[115]];
  *(void *)v407 = v406;
  v407[8] = v408 & 1;
  uint64_t v409 = a1[3];
  uint64_t v410 = a1[4];
  sub_100012ED8(a1, v409);
  uint64_t v411 = (*(uint64_t (**)(uint64_t, uint64_t))(v410 + 896))(v409, v410);
  v412 = &v8[v6[116]];
  *(void *)v412 = v411;
  v412[8] = v413 & 1;
  uint64_t v414 = a1[3];
  uint64_t v415 = a1[4];
  sub_100012ED8(a1, v414);
  v8[v6[117]] = (*(uint64_t (**)(uint64_t, uint64_t))(v415 + 904))(v414, v415);
  uint64_t v416 = a1[3];
  uint64_t v417 = a1[4];
  sub_100012ED8(a1, v416);
  v8[v6[118]] = (*(uint64_t (**)(uint64_t, uint64_t))(v417 + 912))(v416, v417);
  uint64_t v418 = a1[3];
  uint64_t v419 = a1[4];
  sub_100012ED8(a1, v418);
  v8[v6[119]] = (*(uint64_t (**)(uint64_t, uint64_t))(v419 + 920))(v418, v419);
  uint64_t v420 = a1[3];
  uint64_t v421 = a1[4];
  sub_100012ED8(a1, v420);
  uint64_t v422 = (*(uint64_t (**)(uint64_t, uint64_t))(v421 + 928))(v420, v421);
  v423 = &v8[v6[120]];
  *(void *)v423 = v422;
  v423[8] = v424 & 1;
  uint64_t v425 = a1[3];
  uint64_t v426 = a1[4];
  sub_100012ED8(a1, v425);
  uint64_t v427 = (*(uint64_t (**)(uint64_t, uint64_t))(v426 + 936))(v425, v426);
  v428 = &v8[v6[121]];
  *(void *)v428 = v427;
  v428[8] = v429 & 1;
  uint64_t v430 = a1[3];
  uint64_t v431 = a1[4];
  sub_100012ED8(a1, v430);
  uint64_t v432 = (*(uint64_t (**)(uint64_t, uint64_t))(v431 + 944))(v430, v431);
  v433 = &v8[v6[122]];
  *(void *)v433 = v432;
  v433[8] = v434 & 1;
  uint64_t v435 = a1[3];
  uint64_t v436 = a1[4];
  sub_100012ED8(a1, v435);
  uint64_t v437 = (*(uint64_t (**)(uint64_t, uint64_t))(v436 + 952))(v435, v436);
  v438 = &v8[v6[123]];
  *(void *)v438 = v437;
  v438[8] = v439 & 1;
  uint64_t v440 = a1[3];
  uint64_t v441 = a1[4];
  sub_100012ED8(a1, v440);
  uint64_t v442 = (*(uint64_t (**)(uint64_t, uint64_t))(v441 + 960))(v440, v441);
  v443 = &v8[v6[124]];
  *(void *)v443 = v442;
  v443[8] = v444 & 1;
  uint64_t v445 = a1[3];
  uint64_t v446 = a1[4];
  sub_100012ED8(a1, v445);
  uint64_t v447 = (*(uint64_t (**)(uint64_t, uint64_t))(v446 + 968))(v445, v446);
  v448 = &v8[v6[125]];
  *(void *)v448 = v447;
  v448[8] = v449 & 1;
  uint64_t v450 = a1[3];
  uint64_t v451 = a1[4];
  sub_100012ED8(a1, v450);
  uint64_t v452 = (*(uint64_t (**)(uint64_t, uint64_t))(v451 + 976))(v450, v451);
  v453 = &v8[v6[126]];
  *(void *)v453 = v452;
  v453[8] = v454 & 1;
  uint64_t v455 = a1[3];
  uint64_t v456 = a1[4];
  sub_100012ED8(a1, v455);
  uint64_t v457 = (*(uint64_t (**)(uint64_t, uint64_t))(v456 + 984))(v455, v456);
  v458 = &v8[v6[127]];
  *(void *)v458 = v457;
  v458[8] = v459 & 1;
  uint64_t v460 = a1[3];
  uint64_t v461 = a1[4];
  sub_100012ED8(a1, v460);
  v8[v6[128]] = (*(uint64_t (**)(uint64_t, uint64_t))(v461 + 992))(v460, v461);
  uint64_t v462 = a1[3];
  uint64_t v463 = a1[4];
  sub_100012ED8(a1, v462);
  uint64_t v464 = (*(uint64_t (**)(uint64_t, uint64_t))(v463 + 1000))(v462, v463);
  v465 = &v8[v6[129]];
  *(void *)v465 = v464;
  v465[8] = v466 & 1;
  uint64_t v467 = a1[3];
  uint64_t v468 = a1[4];
  sub_100012ED8(a1, v467);
  *(void *)&v8[v6[130]] = (*(uint64_t (**)(uint64_t, uint64_t))(v468 + 1008))(v467, v468);
  uint64_t v469 = a1[3];
  uint64_t v470 = a1[4];
  sub_100012ED8(a1, v469);
  uint64_t v471 = (*(uint64_t (**)(uint64_t, uint64_t))(v470 + 1016))(v469, v470);
  v472 = &v8[v6[131]];
  *(void *)v472 = v471;
  v472[8] = v473 & 1;
  uint64_t v474 = a1[3];
  uint64_t v475 = a1[4];
  sub_100012ED8(a1, v474);
  v8[v6[132]] = (*(uint64_t (**)(uint64_t, uint64_t))(v475 + 1024))(v474, v475);
  uint64_t v476 = a1[3];
  uint64_t v477 = a1[4];
  sub_100012ED8(a1, v476);
  *(void *)&v8[v6[133]] = (*(uint64_t (**)(uint64_t, uint64_t))(v477 + 1032))(v476, v477);
  uint64_t v478 = a1[3];
  uint64_t v479 = a1[4];
  sub_100012ED8(a1, v478);
  v8[v6[134]] = (*(uint64_t (**)(uint64_t, uint64_t))(v479 + 1040))(v478, v479);
  uint64_t v480 = a1[3];
  uint64_t v481 = a1[4];
  sub_100012ED8(a1, v480);
  uint64_t v482 = (*(uint64_t (**)(uint64_t, uint64_t))(v481 + 1048))(v480, v481);
  v483 = &v8[v6[135]];
  *(void *)v483 = v482;
  v483[8] = v484 & 1;
  uint64_t v485 = a1[3];
  uint64_t v486 = a1[4];
  sub_100012ED8(a1, v485);
  uint64_t v487 = (*(uint64_t (**)(uint64_t, uint64_t))(v486 + 1056))(v485, v486);
  v488 = &v8[v6[136]];
  *(void *)v488 = v487;
  v488[8] = v489 & 1;
  uint64_t v490 = a1[3];
  uint64_t v491 = a1[4];
  sub_100012ED8(a1, v490);
  v8[v6[137]] = (*(uint64_t (**)(uint64_t, uint64_t))(v491 + 1064))(v490, v491);
  uint64_t v492 = a1[3];
  uint64_t v493 = a1[4];
  sub_100012ED8(a1, v492);
  v8[v6[138]] = (*(uint64_t (**)(uint64_t, uint64_t))(v493 + 1072))(v492, v493);
  uint64_t v494 = a1[3];
  uint64_t v495 = a1[4];
  sub_100012ED8(a1, v494);
  uint64_t v496 = (*(uint64_t (**)(uint64_t, uint64_t))(v495 + 1080))(v494, v495);
  v497 = &v8[v6[139]];
  *(void *)v497 = v496;
  v497[8] = v498 & 1;
  uint64_t v499 = a1[3];
  uint64_t v500 = a1[4];
  sub_100012ED8(a1, v499);
  uint64_t v501 = (*(uint64_t (**)(uint64_t, uint64_t))(v500 + 1088))(v499, v500);
  v502 = &v8[v6[140]];
  *(void *)v502 = v501;
  v502[8] = v503 & 1;
  uint64_t v504 = a1[3];
  uint64_t v505 = a1[4];
  sub_100012ED8(a1, v504);
  uint64_t v506 = (*(uint64_t (**)(uint64_t, uint64_t))(v505 + 1096))(v504, v505);
  v507 = &v8[v6[141]];
  *(void *)v507 = v506;
  v507[8] = v508 & 1;
  uint64_t v509 = a1[3];
  uint64_t v510 = a1[4];
  sub_100012ED8(a1, v509);
  uint64_t v511 = (*(uint64_t (**)(uint64_t, uint64_t))(v510 + 1104))(v509, v510);
  v512 = &v8[v6[142]];
  *(void *)v512 = v511;
  v512[8] = v513 & 1;
  uint64_t v514 = a1[3];
  uint64_t v515 = a1[4];
  sub_100012ED8(a1, v514);
  uint64_t v516 = (*(uint64_t (**)(uint64_t, uint64_t))(v515 + 1112))(v514, v515);
  v517 = &v8[v6[143]];
  *(void *)v517 = v516;
  v517[8] = v518 & 1;
  uint64_t v519 = a1[3];
  uint64_t v520 = a1[4];
  sub_100012ED8(a1, v519);
  uint64_t v521 = (*(uint64_t (**)(uint64_t, uint64_t))(v520 + 1120))(v519, v520);
  v522 = &v8[v6[144]];
  *(void *)v522 = v521;
  v522[8] = v523 & 1;
  uint64_t v524 = a1[3];
  uint64_t v525 = a1[4];
  sub_100012ED8(a1, v524);
  uint64_t v526 = (*(uint64_t (**)(uint64_t, uint64_t))(v525 + 1128))(v524, v525);
  v527 = &v8[v6[145]];
  *(void *)v527 = v526;
  v527[8] = v528 & 1;
  uint64_t v529 = a1[3];
  uint64_t v530 = a1[4];
  sub_100012ED8(a1, v529);
  uint64_t v531 = (*(uint64_t (**)(uint64_t, uint64_t))(v530 + 1136))(v529, v530);
  v532 = &v8[v6[146]];
  *(void *)v532 = v531;
  v532[8] = v533 & 1;
  uint64_t v534 = a1[3];
  uint64_t v535 = a1[4];
  sub_100012ED8(a1, v534);
  uint64_t v536 = (*(uint64_t (**)(uint64_t, uint64_t))(v535 + 1144))(v534, v535);
  v537 = &v8[v6[147]];
  *(void *)v537 = v536;
  v537[8] = v538 & 1;
  uint64_t v539 = a1[3];
  uint64_t v540 = a1[4];
  sub_100012ED8(a1, v539);
  uint64_t v541 = (*(uint64_t (**)(uint64_t, uint64_t))(v540 + 1152))(v539, v540);
  v542 = &v8[v6[148]];
  *(void *)v542 = v541;
  v542[8] = v543 & 1;
  uint64_t v544 = a1[3];
  uint64_t v545 = a1[4];
  sub_100012ED8(a1, v544);
  uint64_t v546 = (*(uint64_t (**)(uint64_t, uint64_t))(v545 + 1160))(v544, v545);
  v547 = &v8[v6[149]];
  *(void *)v547 = v546;
  v547[8] = v548 & 1;
  uint64_t v549 = a1[3];
  uint64_t v550 = a1[4];
  sub_100012ED8(a1, v549);
  uint64_t v551 = (*(uint64_t (**)(uint64_t, uint64_t))(v550 + 1168))(v549, v550);
  v552 = &v8[v6[150]];
  *(void *)v552 = v551;
  v552[8] = v553 & 1;
  uint64_t v554 = a1[3];
  uint64_t v555 = a1[4];
  sub_100012ED8(a1, v554);
  uint64_t v556 = (*(uint64_t (**)(uint64_t, uint64_t))(v555 + 1176))(v554, v555);
  v557 = &v8[v6[151]];
  *(void *)v557 = v556;
  v557[8] = v558 & 1;
  uint64_t v559 = a1[3];
  uint64_t v560 = a1[4];
  sub_100012ED8(a1, v559);
  uint64_t v561 = (*(uint64_t (**)(uint64_t, uint64_t))(v560 + 1184))(v559, v560);
  v562 = &v8[v6[152]];
  *(void *)v562 = v561;
  v562[8] = v563 & 1;
  uint64_t v564 = a1[3];
  uint64_t v565 = a1[4];
  sub_100012ED8(a1, v564);
  uint64_t v566 = (*(uint64_t (**)(uint64_t, uint64_t))(v565 + 1192))(v564, v565);
  v567 = &v8[v6[153]];
  *(void *)v567 = v566;
  v567[8] = v568 & 1;
  uint64_t v569 = a1[3];
  uint64_t v570 = a1[4];
  sub_100012ED8(a1, v569);
  uint64_t v571 = (*(uint64_t (**)(uint64_t, uint64_t))(v570 + 1200))(v569, v570);
  v572 = &v8[v6[154]];
  *(void *)v572 = v571;
  v572[8] = v573 & 1;
  uint64_t v574 = a1[3];
  uint64_t v575 = a1[4];
  sub_100012ED8(a1, v574);
  uint64_t v576 = (*(uint64_t (**)(uint64_t, uint64_t))(v575 + 1208))(v574, v575);
  v577 = &v8[v6[155]];
  *(void *)v577 = v576;
  v577[8] = v578 & 1;
  uint64_t v579 = a1[3];
  uint64_t v580 = a1[4];
  sub_100012ED8(a1, v579);
  uint64_t v581 = (*(uint64_t (**)(uint64_t, uint64_t))(v580 + 1216))(v579, v580);
  v582 = &v8[v6[156]];
  *(void *)v582 = v581;
  v582[8] = v583 & 1;
  uint64_t v584 = a1[3];
  uint64_t v585 = a1[4];
  sub_100012ED8(a1, v584);
  v8[v6[157]] = (*(uint64_t (**)(uint64_t, uint64_t))(v585 + 1224))(v584, v585);
  uint64_t v586 = a1[3];
  uint64_t v587 = a1[4];
  sub_100012ED8(a1, v586);
  uint64_t v588 = (*(uint64_t (**)(uint64_t, uint64_t))(v587 + 1232))(v586, v587);
  v589 = &v8[v6[158]];
  *(void *)v589 = v588;
  v589[8] = v590 & 1;
  uint64_t v591 = a1[3];
  uint64_t v592 = a1[4];
  sub_100012ED8(a1, v591);
  uint64_t v593 = (*(uint64_t (**)(uint64_t, uint64_t))(v592 + 1240))(v591, v592);
  v594 = &v8[v6[159]];
  *(void *)v594 = v593;
  v594[8] = v595 & 1;
  uint64_t v596 = a1[3];
  uint64_t v597 = a1[4];
  sub_100012ED8(a1, v596);
  uint64_t v598 = (*(uint64_t (**)(uint64_t, uint64_t))(v597 + 1248))(v596, v597);
  v599 = &v8[v6[160]];
  *(void *)v599 = v598;
  v599[8] = v600 & 1;
  uint64_t v601 = a1[3];
  uint64_t v602 = a1[4];
  sub_100012ED8(a1, v601);
  uint64_t v603 = (*(uint64_t (**)(uint64_t, uint64_t))(v602 + 1256))(v601, v602);
  v604 = (uint64_t *)&v8[v6[161]];
  uint64_t *v604 = v603;
  v604[1] = v605;
  uint64_t v606 = a1[3];
  uint64_t v607 = a1[4];
  sub_100012ED8(a1, v606);
  uint64_t v608 = (*(uint64_t (**)(uint64_t, uint64_t))(v607 + 1264))(v606, v607);
  v609 = &v8[v6[162]];
  *(void *)v609 = v608;
  v609[8] = v610 & 1;
  uint64_t v611 = a1[3];
  uint64_t v612 = a1[4];
  sub_100012ED8(a1, v611);
  v8[v6[163]] = (*(uint64_t (**)(uint64_t, uint64_t))(v612 + 1272))(v611, v612);
  uint64_t v613 = a1[3];
  uint64_t v614 = a1[4];
  sub_100012ED8(a1, v613);
  v8[v6[164]] = (*(uint64_t (**)(uint64_t, uint64_t))(v614 + 1280))(v613, v614);
  uint64_t v615 = a1[3];
  uint64_t v616 = a1[4];
  sub_100012ED8(a1, v615);
  uint64_t v617 = (*(uint64_t (**)(uint64_t, uint64_t))(v616 + 1288))(v615, v616);
  v618 = &v8[v6[165]];
  *(void *)v618 = v617;
  v618[8] = v619 & 1;
  uint64_t v620 = a1[3];
  uint64_t v621 = a1[4];
  sub_100012ED8(a1, v620);
  uint64_t v622 = (*(uint64_t (**)(uint64_t, uint64_t))(v621 + 1296))(v620, v621);
  v623 = &v8[v6[166]];
  *(void *)v623 = v622;
  v623[8] = v624 & 1;
  uint64_t v625 = a1[3];
  uint64_t v626 = a1[4];
  sub_100012ED8(a1, v625);
  v8[v6[167]] = (*(uint64_t (**)(uint64_t, uint64_t))(v626 + 1304))(v625, v626);
  uint64_t v627 = a1[3];
  uint64_t v628 = a1[4];
  sub_100012ED8(a1, v627);
  uint64_t v629 = (*(uint64_t (**)(uint64_t, uint64_t))(v628 + 1312))(v627, v628);
  v630 = &v8[v6[168]];
  *(_DWORD *)v630 = v629;
  v630[4] = BYTE4(v629) & 1;
  uint64_t v631 = a1[3];
  uint64_t v632 = a1[4];
  sub_100012ED8(a1, v631);
  uint64_t v633 = (*(uint64_t (**)(uint64_t, uint64_t))(v632 + 1320))(v631, v632);
  v634 = &v8[v6[169]];
  *(void *)v634 = v633;
  v634[8] = v635 & 1;
  uint64_t v636 = a1[3];
  uint64_t v637 = a1[4];
  sub_100012ED8(a1, v636);
  uint64_t v638 = (*(uint64_t (**)(uint64_t, uint64_t))(v637 + 1328))(v636, v637);
  v639 = &v8[v6[170]];
  *(void *)v639 = v638;
  v639[8] = v640 & 1;
  uint64_t v641 = a1[3];
  uint64_t v642 = a1[4];
  sub_100012ED8(a1, v641);
  uint64_t v643 = (*(uint64_t (**)(uint64_t, uint64_t))(v642 + 1336))(v641, v642);
  v644 = &v8[v6[171]];
  *(void *)v644 = v643;
  v644[8] = v645 & 1;
  uint64_t v646 = a1[3];
  uint64_t v647 = a1[4];
  sub_100012ED8(a1, v646);
  uint64_t v648 = (*(uint64_t (**)(uint64_t, uint64_t))(v647 + 1344))(v646, v647);
  v649 = &v8[v6[172]];
  *(void *)v649 = v648;
  v649[8] = v650 & 1;
  uint64_t v651 = a1[3];
  uint64_t v652 = a1[4];
  sub_100012ED8(a1, v651);
  uint64_t v653 = (*(uint64_t (**)(uint64_t, uint64_t))(v652 + 1352))(v651, v652);
  v654 = &v8[v6[173]];
  *(void *)v654 = v653;
  v654[8] = v655 & 1;
  uint64_t v656 = a1[3];
  uint64_t v657 = a1[4];
  sub_100012ED8(a1, v656);
  uint64_t v658 = (*(uint64_t (**)(uint64_t, uint64_t))(v657 + 1360))(v656, v657);
  v659 = &v8[v6[174]];
  *(void *)v659 = v658;
  v659[8] = v660 & 1;
  uint64_t v661 = a1[3];
  uint64_t v662 = a1[4];
  sub_100012ED8(a1, v661);
  uint64_t v663 = (*(uint64_t (**)(uint64_t, uint64_t))(v662 + 1368))(v661, v662);
  v664 = &v8[v6[175]];
  *(void *)v664 = v663;
  v664[8] = v665 & 1;
  uint64_t v666 = a1[3];
  uint64_t v667 = a1[4];
  sub_100012ED8(a1, v666);
  v8[v6[176]] = (*(uint64_t (**)(uint64_t, uint64_t))(v667 + 1376))(v666, v667);
  uint64_t v668 = a1[3];
  uint64_t v669 = a1[4];
  sub_100012ED8(a1, v668);
  uint64_t v670 = (*(uint64_t (**)(uint64_t, uint64_t))(v669 + 1384))(v668, v669);
  v671 = &v8[v6[177]];
  *(void *)v671 = v670;
  v671[8] = v672 & 1;
  uint64_t v673 = a1[3];
  uint64_t v674 = a1[4];
  sub_100012ED8(a1, v673);
  uint64_t v675 = (*(uint64_t (**)(uint64_t, uint64_t))(v674 + 1392))(v673, v674);
  v676 = &v8[v6[178]];
  *(void *)v676 = v675;
  v676[8] = v677 & 1;
  sub_10002218C((uint64_t)v8, a3, type metadata accessor for DefaultConfigurationLayer);
  return _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(a1);
}

uint64_t sub_10041746C(unsigned __int8 a1)
{
  return ((uint64_t (*)(unint64_t, unint64_t))((char *)sub_1004174A8 + 4 * word_100800790[a1]))( 0xD000000000000010LL,  0x800000010084E7C0LL);
}

uint64_t sub_1004174A8()
{
  return 0x754E6C6169726573LL;
}

uint64_t sub_1004174C8()
{
  return 0x656372756F73LL;
}

uint64_t sub_1004174DC()
{
  return 0x496873696C627570LL;
}

uint64_t sub_100417500()
{
  return v0 - 11;
}

unint64_t sub_100417FFC()
{
  return 0xD00000000000001DLL;
}

uint64_t sub_100418024(void *a1)
{
  uint64_t v3 = v1;
  uint64_t v5 = sub_100004AEC(&qword_1009AD900);
  uint64_t v6 = *(void *)(v5 - 8);
  __chkstk_darwin(v5);
  uint64_t v8 = (char *)v445 - ((v7 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v9 = a1[3];
  uint64_t v10 = a1[4];
  sub_100012ED8(a1, v9);
  unint64_t v11 = sub_100427F04();
  dispatch thunk of Encoder.container<A>(keyedBy:)( &type metadata for DefaultConfigurationLayer.CodingKeys,  &type metadata for DefaultConfigurationLayer.CodingKeys,  v11,  v9,  v10);
  unint64_t v13 = *(void *)(v3 + 8);
  id v447 = *(id *)v3;
  uint64_t v12 = (uint64_t)v447;
  unint64_t v448 = v13;
  v461[0] = 0;
  sub_100018BE4((uint64_t)v447, v13);
  unint64_t v14 = sub_1000170A4();
  KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v447, v461, v5, &type metadata for Data, v14);
  if (v2)
  {
    sub_1000182F0(v12, v13);
  }

  else
  {
    sub_1000182F0((uint64_t)v447, v448);
    uint64_t v15 = *(void *)(v3 + 16);
    uint64_t v16 = *(unsigned __int8 *)(v3 + 24);
    LOBYTE(v447) = 1;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v15, v16, &v447, v5);
    LOBYTE(v447) = *(_BYTE *)(v3 + 25);
    v461[0] = 2;
    unint64_t v17 = sub_10042819C();
    KeyedEncodingContainer.encode<A>(_:forKey:)( &v447,  v461,  v5,  &type metadata for ConfigurationCoordinator.ConfigurationSource,  v17);
    uint64_t v18 = *(void *)(v3 + 32);
    uint64_t v19 = *(unsigned __int8 *)(v3 + 40);
    LOBYTE(v447) = 3;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v18, v19, &v447, v5);
    uint64_t v20 = *(void *)(v3 + 48);
    uint64_t v21 = *(unsigned __int8 *)(v3 + 56);
    LOBYTE(v447) = 4;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v20, v21, &v447, v5);
    uint64_t v22 = *(unsigned __int8 *)(v3 + 57);
    LOBYTE(v447) = 5;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v22, &v447, v5);
    id v447 = *(id *)(v3 + 64);
    v461[0] = 6;
    swift_bridgeObjectRetain(v447);
    uint64_t v23 = sub_100004AEC(&qword_1009AED50);
    uint64_t v24 = sub_100428398( (unint64_t *)&qword_1009B0650,  &qword_1009AED50,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v447, v461, v5, v23, v24);
    swift_bridgeObjectRelease();
    uint64_t v25 = *(unsigned __int8 *)(v3 + 72);
    LOBYTE(v447) = 7;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v25, &v447, v5);
    uint64_t v26 = *(void *)(v3 + 80);
    uint64_t v27 = *(void *)(v3 + 88);
    LOBYTE(v447) = 8;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v26, v27, &v447, v5);
    uint64_t v28 = *(void *)(v3 + 96);
    uint64_t v29 = *(unsigned __int8 *)(v3 + 104);
    LOBYTE(v447) = 9;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v28, v29, &v447, v5);
    uint64_t v30 = *(unsigned __int8 *)(v3 + 105);
    LOBYTE(v447) = 10;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v30, &v447, v5);
    uint64_t v31 = *(unsigned __int8 *)(v3 + 106);
    LOBYTE(v447) = 11;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v31, &v447, v5);
    uint64_t v32 = *(void *)(v3 + 112);
    uint64_t v33 = *(unsigned __int8 *)(v3 + 120);
    LOBYTE(v447) = 12;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v32, v33, &v447, v5);
    uint64_t v34 = *(void *)(v3 + 128);
    uint64_t v35 = *(unsigned __int8 *)(v3 + 136);
    LOBYTE(v447) = 13;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v34, v35, &v447, v5);
    uint64_t v36 = *(void *)(v3 + 144);
    uint64_t v37 = *(unsigned __int8 *)(v3 + 152);
    LOBYTE(v447) = 14;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v36, v37, &v447, v5);
    uint64_t v38 = *(void *)(v3 + 160);
    uint64_t v39 = *(unsigned __int8 *)(v3 + 168);
    LOBYTE(v447) = 15;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v38, v39, &v447, v5);
    uint64_t v40 = *(void *)(v3 + 176);
    uint64_t v41 = *(unsigned __int8 *)(v3 + 184);
    LOBYTE(v447) = 16;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v40, v41, &v447, v5);
    uint64_t v42 = *(void *)(v3 + 192);
    uint64_t v43 = *(unsigned __int8 *)(v3 + 200);
    LOBYTE(v447) = 17;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v42, v43, &v447, v5);
    uint64_t v44 = *(void *)(v3 + 208);
    uint64_t v45 = *(unsigned __int8 *)(v3 + 216);
    LOBYTE(v447) = 18;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v44, v45, &v447, v5);
    uint64_t v46 = *(void *)(v3 + 224);
    uint64_t v47 = *(unsigned __int8 *)(v3 + 232);
    LOBYTE(v447) = 19;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v46, v47, &v447, v5);
    uint64_t v48 = *(void *)(v3 + 240);
    uint64_t v49 = *(unsigned __int8 *)(v3 + 248);
    LOBYTE(v447) = 20;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v48, v49, &v447, v5);
    uint64_t v50 = *(void *)(v3 + 256);
    uint64_t v51 = *(unsigned __int8 *)(v3 + 264);
    LOBYTE(v447) = 21;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v50, v51, &v447, v5);
    uint64_t v52 = *(unsigned __int8 *)(v3 + 265);
    LOBYTE(v447) = 22;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v52, &v447, v5);
    id v447 = *(id *)(v3 + 272);
    v461[0] = 23;
    swift_bridgeObjectRetain(v447);
    uint64_t v54 = sub_100004AEC(&qword_10099D630);
    unint64_t v55 = sub_1004281E0();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v447, v461, v5, v54, v55);
    swift_bridgeObjectRelease();
    uint64_t v56 = *(void *)(v3 + 280);
    uint64_t v57 = *(unsigned __int8 *)(v3 + 288);
    LOBYTE(v447) = 24;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v56, v57, &v447, v5);
    uint64_t v58 = *(void *)(v3 + 296);
    uint64_t v59 = *(unsigned __int8 *)(v3 + 304);
    LOBYTE(v447) = 25;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v58, v59, &v447, v5);
    uint64_t v60 = *(void *)(v3 + 312);
    uint64_t v61 = *(unsigned __int8 *)(v3 + 320);
    LOBYTE(v447) = 26;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v60, v61, &v447, v5);
    uint64_t v62 = *(void *)(v3 + 328);
    uint64_t v63 = *(unsigned __int8 *)(v3 + 336);
    LOBYTE(v447) = 27;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v62, v63, &v447, v5);
    uint64_t v64 = *(void *)(v3 + 344);
    uint64_t v65 = *(unsigned __int8 *)(v3 + 352);
    LOBYTE(v447) = 28;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v64, v65, &v447, v5);
    uint64_t v66 = *(void *)(v3 + 360);
    uint64_t v67 = *(unsigned __int8 *)(v3 + 368);
    LOBYTE(v447) = 29;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v66, v67, &v447, v5);
    uint64_t v68 = *(void *)(v3 + 376);
    uint64_t v69 = *(unsigned __int8 *)(v3 + 384);
    LOBYTE(v447) = 30;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v68, v69, &v447, v5);
    uint64_t v70 = *(void *)(v3 + 392);
    uint64_t v71 = *(unsigned __int8 *)(v3 + 400);
    LOBYTE(v447) = 31;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v70, v71, &v447, v5);
    uint64_t v72 = *(void *)(v3 + 408);
    uint64_t v73 = *(unsigned __int8 *)(v3 + 416);
    LOBYTE(v447) = 32;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v72, v73, &v447, v5);
    uint64_t v74 = *(void *)(v3 + 424);
    uint64_t v75 = *(unsigned __int8 *)(v3 + 432);
    LOBYTE(v447) = 33;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v74, v75, &v447, v5);
    uint64_t v76 = *(unsigned __int8 *)(v3 + 433);
    LOBYTE(v447) = 34;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v76, &v447, v5);
    uint64_t v77 = *(void *)(v3 + 440);
    uint64_t v78 = *(unsigned __int8 *)(v3 + 448);
    LOBYTE(v447) = 35;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v77, v78, &v447, v5);
    uint64_t v79 = *(void *)(v3 + 456);
    uint64_t v80 = *(unsigned __int8 *)(v3 + 464);
    LOBYTE(v447) = 36;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v79, v80, &v447, v5);
    uint64_t v81 = *(void *)(v3 + 472);
    uint64_t v82 = *(unsigned __int8 *)(v3 + 480);
    LOBYTE(v447) = 37;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v81, v82, &v447, v5);
    uint64_t v83 = *(void *)(v3 + 488);
    uint64_t v84 = *(unsigned __int8 *)(v3 + 496);
    LOBYTE(v447) = 38;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v83, v84, &v447, v5);
    uint64_t v85 = *(void *)(v3 + 504);
    uint64_t v86 = *(unsigned __int8 *)(v3 + 512);
    LOBYTE(v447) = 39;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v85, v86, &v447, v5);
    uint64_t v87 = *(void *)(v3 + 520);
    uint64_t v88 = *(unsigned __int8 *)(v3 + 528);
    LOBYTE(v447) = 40;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v87, v88, &v447, v5);
    uint64_t v89 = *(void *)(v3 + 536);
    uint64_t v90 = *(unsigned __int8 *)(v3 + 544);
    LOBYTE(v447) = 41;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v89, v90, &v447, v5);
    id v447 = *(id *)(v3 + 552);
    v461[0] = 42;
    swift_bridgeObjectRetain(v447);
    uint64_t v91 = sub_100004AEC(&qword_10099D640);
    uint64_t v92 = sub_1004282A8( &qword_1009AD928,  (void (*)(void))sub_100428310,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v447, v461, v5, v91, v92);
    swift_bridgeObjectRelease();
    uint64_t v93 = *(void *)(v3 + 560);
    uint64_t v94 = *(unsigned __int8 *)(v3 + 568);
    LOBYTE(v447) = 43;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v93, v94, &v447, v5);
    uint64_t v95 = *(void *)(v3 + 576);
    uint64_t v96 = *(unsigned __int8 *)(v3 + 584);
    LOBYTE(v447) = 44;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v95, v96, &v447, v5);
    id v447 = *(id *)(v3 + 592);
    id v97 = v447;
    v461[0] = 45;
    type metadata accessor for SPServiceState(0LL);
    uint64_t v99 = v98;
    uint64_t v100 = sub_100007864( &qword_1009AD938,  (uint64_t (*)(uint64_t))type metadata accessor for SPServiceState,  (uint64_t)&protocol conformance descriptor for SPServiceState);
    v97;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v447, v461, v5, v99, v100);

    id v447 = *(id *)(v3 + 600);
    v461[0] = 46;
    swift_bridgeObjectRetain(v447);
    uint64_t v101 = sub_100004AEC(&qword_10099D618);
    uint64_t v102 = sub_100428054( &qword_1009AD940,  &qword_1009AD948,  (uint64_t)&protocol conformance descriptor for SPDisabledReason,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v447, v461, v5, v101, v102);
    swift_bridgeObjectRelease();
    uint64_t v103 = *(void *)(v3 + 608);
    uint64_t v104 = *(unsigned __int8 *)(v3 + 616);
    LOBYTE(v447) = 47;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v103, v104, &v447, v5);
    uint64_t v105 = *(void *)(v3 + 624);
    uint64_t v106 = *(unsigned __int8 *)(v3 + 632);
    LOBYTE(v447) = 48;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v105, v106, &v447, v5);
    uint64_t v107 = *(void *)(v3 + 640);
    uint64_t v108 = *(unsigned __int8 *)(v3 + 648);
    LOBYTE(v447) = 49;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v107, v108, &v447, v5);
    uint64_t v109 = *(void *)(v3 + 656);
    uint64_t v110 = *(unsigned __int8 *)(v3 + 664);
    LOBYTE(v447) = 50;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v109, v110, &v447, v5);
    uint64_t v111 = *(void *)(v3 + 672);
    uint64_t v112 = *(unsigned __int8 *)(v3 + 680);
    LOBYTE(v447) = 51;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v111, v112, &v447, v5);
    uint64_t v113 = *(unsigned __int8 *)(v3 + 681);
    LOBYTE(v447) = 52;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v113, &v447, v5);
    char v114 = (int *)type metadata accessor for DefaultConfigurationLayer(0LL);
    uint64_t v115 = v3 + v114[57];
    LOBYTE(v447) = 53;
    uint64_t v116 = type metadata accessor for UUID(0LL);
    uint64_t v117 = sub_100007864( (unint64_t *)&unk_10099D710,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v115, &v447, v5, v116, v117);
    uint64_t v118 = v3 + v114[58];
    LOBYTE(v447) = 54;
    uint64_t v119 = type metadata accessor for Date(0LL);
    uint64_t v120 = sub_100007864( &qword_10099DA40,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v118, &v447, v5, v119, v120);
    uint64_t v121 = (uint64_t *)(v3 + v114[59]);
    uint64_t v122 = *v121;
    uint64_t v123 = *((unsigned __int8 *)v121 + 8);
    LOBYTE(v447) = 55;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v122, v123, &v447, v5);
    uint64_t v124 = v3 + v114[60];
    LOBYTE(v447) = 56;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(v124, &v447, v5, v119, v120);
    uint64_t v125 = (uint64_t *)(v3 + v114[61]);
    uint64_t v126 = *v125;
    uint64_t v127 = *((unsigned __int8 *)v125 + 8);
    LOBYTE(v447) = 57;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v126, v127, &v447, v5);
    char v128 = (uint64_t *)(v3 + v114[62]);
    uint64_t v129 = *v128;
    uint64_t v130 = *((unsigned __int8 *)v128 + 8);
    LOBYTE(v447) = 58;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v129, v130, &v447, v5);
    char v131 = (uint64_t *)(v3 + v114[63]);
    uint64_t v132 = *v131;
    uint64_t v133 = *((unsigned __int8 *)v131 + 8);
    LOBYTE(v447) = 59;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v132, v133, &v447, v5);
    uint64_t v134 = (uint64_t *)(v3 + v114[64]);
    uint64_t v135 = *v134;
    uint64_t v136 = *((unsigned __int8 *)v134 + 8);
    LOBYTE(v447) = 60;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v135, v136, &v447, v5);
    uint64_t v137 = (uint64_t *)(v3 + v114[65]);
    uint64_t v138 = *v137;
    uint64_t v139 = *((unsigned __int8 *)v137 + 8);
    LOBYTE(v447) = 61;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v138, v139, &v447, v5);
    uint64_t v140 = (uint64_t *)(v3 + v114[66]);
    uint64_t v141 = *v140;
    uint64_t v142 = *((unsigned __int8 *)v140 + 8);
    LOBYTE(v447) = 62;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v141, v142, &v447, v5);
    uint64_t v143 = v3 + v114[67];
    uint64_t v144 = *(void *)(v143 + 8);
    uint64_t v145 = *(void *)(v143 + 16);
    uint64_t v146 = *(void *)(v143 + 24);
    uint64_t v147 = *(void *)(v143 + 32);
    uint64_t v148 = *(void *)(v143 + 40);
    uint64_t v149 = *(void *)(v143 + 48);
    uint64_t v150 = *(void *)(v143 + 56);
    uint64_t v151 = *(void *)(v143 + 64);
    uint64_t v152 = *(void *)(v143 + 72);
    uint64_t v153 = *(void *)(v143 + 80);
    uint64_t v154 = *(void *)(v143 + 88);
    uint64_t v155 = *(void *)(v143 + 96);
    uint64_t v156 = *(void *)(v143 + 104);
    id v447 = *(id *)v143;
    unint64_t v448 = v144;
    uint64_t v449 = v145;
    uint64_t v450 = v146;
    uint64_t v451 = v147;
    uint64_t v452 = v148;
    uint64_t v453 = v149;
    uint64_t v454 = v150;
    uint64_t v455 = v151;
    uint64_t v456 = v152;
    uint64_t v457 = v153;
    uint64_t v458 = v154;
    uint64_t v459 = v155;
    uint64_t v460 = v156;
    v461[0] = 63;
    v445[1] = v154;
    v445[2] = v153;
    v445[3] = v152;
    v445[4] = v151;
    v445[11] = v144;
    uint64_t v446 = (uint64_t)v447;
    v445[9] = v146;
    v445[10] = v145;
    v445[7] = v148;
    v445[8] = v147;
    v445[6] = v149;
    v445[5] = v150;
    sub_1004220C8((uint64_t)v447, v144, v145, v146, v147, v148, v149, v150, v151, v152, v153, v154, v155, v156);
    unint64_t v157 = sub_100428354();
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v447, v461, v5, &type metadata for AllMacBeaconConfigs, v157);
    sub_1004221C0((uint64_t)v447, v448, v449, v450, v451, v452, v453, v454, v455, v456, v457, v458, v459, v460);
    uint64_t v158 = *(unsigned __int8 *)(v3 + v114[68]);
    LOBYTE(v447) = 64;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v158, &v447, v5);
    uint64_t v159 = *(unsigned __int8 *)(v3 + v114[69]);
    LOBYTE(v447) = 65;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v159, &v447, v5);
    uint64_t v160 = *(unsigned __int8 *)(v3 + v114[70]);
    LOBYTE(v447) = 66;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v160, &v447, v5);
    char v161 = (uint64_t *)(v3 + v114[71]);
    uint64_t v162 = *v161;
    uint64_t v163 = *((unsigned __int8 *)v161 + 8);
    LOBYTE(v447) = 67;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v162, v163, &v447, v5);
    uint64_t v164 = (uint64_t *)(v3 + v114[72]);
    uint64_t v165 = *v164;
    uint64_t v166 = *((unsigned __int8 *)v164 + 8);
    LOBYTE(v447) = 68;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v165, v166, &v447, v5);
    uint64_t v167 = (uint64_t *)(v3 + v114[73]);
    uint64_t v168 = *v167;
    uint64_t v169 = *((unsigned __int8 *)v167 + 8);
    LOBYTE(v447) = 69;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v168, v169, &v447, v5);
    uint64_t v170 = (uint64_t *)(v3 + v114[74]);
    uint64_t v171 = *v170;
    uint64_t v172 = *((unsigned __int8 *)v170 + 8);
    LOBYTE(v447) = 70;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v171, v172, &v447, v5);
    char v173 = (uint64_t *)(v3 + v114[75]);
    uint64_t v174 = *v173;
    uint64_t v175 = *((unsigned __int8 *)v173 + 8);
    LOBYTE(v447) = 71;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v174, v175, &v447, v5);
    uint64_t v176 = (uint64_t *)(v3 + v114[76]);
    uint64_t v177 = *v176;
    uint64_t v178 = *((unsigned __int8 *)v176 + 8);
    LOBYTE(v447) = 72;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v177, v178, &v447, v5);
    uint64_t v179 = (uint64_t *)(v3 + v114[77]);
    uint64_t v180 = *v179;
    uint64_t v181 = *((unsigned __int8 *)v179 + 8);
    LOBYTE(v447) = 73;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v180, v181, &v447, v5);
    uint64_t v182 = (uint64_t *)(v3 + v114[78]);
    uint64_t v183 = *v182;
    uint64_t v184 = *((unsigned __int8 *)v182 + 8);
    LOBYTE(v447) = 74;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v183, v184, &v447, v5);
    uint64_t v185 = (uint64_t *)(v3 + v114[79]);
    uint64_t v186 = *v185;
    uint64_t v187 = *((unsigned __int8 *)v185 + 8);
    LOBYTE(v447) = 75;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v186, v187, &v447, v5);
    char v188 = (uint64_t *)(v3 + v114[80]);
    uint64_t v189 = *v188;
    uint64_t v190 = v188[1];
    LOBYTE(v447) = 76;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v189, v190, &v447, v5);
    uint64_t v191 = (uint64_t *)(v3 + v114[81]);
    uint64_t v192 = *v191;
    uint64_t v193 = *((unsigned __int8 *)v191 + 8);
    LOBYTE(v447) = 77;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v192, v193, &v447, v5);
    uint64_t v194 = (uint64_t *)(v3 + v114[82]);
    uint64_t v195 = *v194;
    uint64_t v196 = v194[1];
    LOBYTE(v447) = 78;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v195, v196, &v447, v5);
    uint64_t v197 = (uint64_t *)(v3 + v114[83]);
    uint64_t v198 = *v197;
    uint64_t v199 = *((unsigned __int8 *)v197 + 8);
    LOBYTE(v447) = 79;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v198, v199, &v447, v5);
    id v447 = *(id *)(v3 + v114[84]);
    v461[0] = 80;
    swift_bridgeObjectRetain(v447);
    uint64_t v200 = sub_100004AEC(&qword_10099D5E0);
    uint64_t v201 = sub_100428398( &qword_1009A1D20,  &qword_10099D5E0,  (uint64_t)&protocol witness table for Int,  (uint64_t)&protocol conformance descriptor for <A> [A]);
    uint64_t v446 = v200;
    uint64_t v202 = v200;
    uint64_t v203 = v201;
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v447, v461, v5, v202, v201);
    swift_bridgeObjectRelease();
    uint64_t v204 = (uint64_t *)(v3 + v114[85]);
    uint64_t v205 = *v204;
    uint64_t v206 = v204[1];
    LOBYTE(v447) = 81;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v205, v206, &v447, v5);
    uint64_t v207 = (uint64_t *)(v3 + v114[86]);
    uint64_t v208 = *v207;
    uint64_t v209 = *((unsigned __int8 *)v207 + 8);
    LOBYTE(v447) = 82;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v208, v209, &v447, v5);
    uint64_t v210 = *(unsigned __int8 *)(v3 + v114[87]);
    LOBYTE(v447) = 83;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v210, &v447, v5);
    uint64_t v211 = *(unsigned __int8 *)(v3 + v114[88]);
    LOBYTE(v447) = 84;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v211, &v447, v5);
    uint64_t v212 = *(unsigned __int8 *)(v3 + v114[89]);
    LOBYTE(v447) = 85;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v212, &v447, v5);
    uint64_t v213 = *(unsigned __int8 *)(v3 + v114[90]);
    LOBYTE(v447) = 86;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v213, &v447, v5);
    uint64_t v214 = (uint64_t *)(v3 + v114[91]);
    uint64_t v215 = *v214;
    uint64_t v216 = *((unsigned __int8 *)v214 + 8);
    LOBYTE(v447) = 87;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v215, v216, &v447, v5);
    uint64_t v217 = (uint64_t *)(v3 + v114[92]);
    uint64_t v218 = *v217;
    uint64_t v219 = *((unsigned __int8 *)v217 + 8);
    LOBYTE(v447) = 88;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v218, v219, &v447, v5);
    int v220 = (uint64_t *)(v3 + v114[93]);
    uint64_t v221 = *v220;
    uint64_t v222 = *((unsigned __int8 *)v220 + 8);
    LOBYTE(v447) = 89;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v221, v222, &v447, v5);
    uint64_t v223 = (uint64_t *)(v3 + v114[94]);
    uint64_t v224 = *v223;
    uint64_t v225 = *((unsigned __int8 *)v223 + 8);
    LOBYTE(v447) = 90;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v224, v225, &v447, v5);
    char v226 = (uint64_t *)(v3 + v114[95]);
    uint64_t v227 = *v226;
    uint64_t v228 = *((unsigned __int8 *)v226 + 8);
    LOBYTE(v447) = 91;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v227, v228, &v447, v5);
    uint64_t v229 = (uint64_t *)(v3 + v114[96]);
    uint64_t v230 = *v229;
    uint64_t v231 = *((unsigned __int8 *)v229 + 8);
    LOBYTE(v447) = 92;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v230, v231, &v447, v5);
    uint64_t v232 = (uint64_t *)(v3 + v114[97]);
    uint64_t v233 = *v232;
    uint64_t v234 = *((unsigned __int8 *)v232 + 8);
    LOBYTE(v447) = 93;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v233, v234, &v447, v5);
    uint64_t v235 = (uint64_t *)(v3 + v114[98]);
    uint64_t v236 = *v235;
    uint64_t v237 = *((unsigned __int8 *)v235 + 8);
    LOBYTE(v447) = 94;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v236, v237, &v447, v5);
    uint64_t v238 = (uint64_t *)(v3 + v114[99]);
    uint64_t v239 = *v238;
    uint64_t v240 = *((unsigned __int8 *)v238 + 8);
    LOBYTE(v447) = 95;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v239, v240, &v447, v5);
    char v241 = (uint64_t *)(v3 + v114[100]);
    uint64_t v242 = *v241;
    uint64_t v243 = *((unsigned __int8 *)v241 + 8);
    LOBYTE(v447) = 96;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v242, v243, &v447, v5);
    uint64_t v244 = (uint64_t *)(v3 + v114[101]);
    uint64_t v245 = *v244;
    uint64_t v246 = *((unsigned __int8 *)v244 + 8);
    LOBYTE(v447) = 97;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v245, v246, &v447, v5);
    uint64_t v247 = (uint64_t *)(v3 + v114[102]);
    uint64_t v248 = *v247;
    uint64_t v249 = *((unsigned __int8 *)v247 + 8);
    LOBYTE(v447) = 98;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v248, v249, &v447, v5);
    uint64_t v250 = (uint64_t *)(v3 + v114[103]);
    uint64_t v251 = *v250;
    uint64_t v252 = *((unsigned __int8 *)v250 + 8);
    LOBYTE(v447) = 99;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v251, v252, &v447, v5);
    uint64_t v253 = (uint64_t *)(v3 + v114[104]);
    uint64_t v254 = *v253;
    uint64_t v255 = *((unsigned __int8 *)v253 + 8);
    LOBYTE(v447) = 100;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v254, v255, &v447, v5);
    char v256 = (uint64_t *)(v3 + v114[105]);
    uint64_t v257 = *v256;
    uint64_t v258 = *((unsigned __int8 *)v256 + 8);
    LOBYTE(v447) = 101;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v257, v258, &v447, v5);
    uint64_t v259 = (uint64_t *)(v3 + v114[106]);
    uint64_t v260 = *v259;
    uint64_t v261 = *((unsigned __int8 *)v259 + 8);
    LOBYTE(v447) = 102;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v260, v261, &v447, v5);
    uint64_t v262 = (uint64_t *)(v3 + v114[107]);
    uint64_t v263 = *v262;
    uint64_t v264 = *((unsigned __int8 *)v262 + 8);
    LOBYTE(v447) = 103;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v263, v264, &v447, v5);
    uint64_t v265 = (uint64_t *)(v3 + v114[108]);
    uint64_t v266 = *v265;
    uint64_t v267 = *((unsigned __int8 *)v265 + 8);
    LOBYTE(v447) = 104;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v266, v267, &v447, v5);
    uint64_t v268 = (uint64_t *)(v3 + v114[109]);
    uint64_t v269 = *v268;
    uint64_t v270 = *((unsigned __int8 *)v268 + 8);
    LOBYTE(v447) = 105;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v269, v270, &v447, v5);
    uint64_t v271 = (uint64_t *)(v3 + v114[110]);
    uint64_t v272 = *v271;
    uint64_t v273 = *((unsigned __int8 *)v271 + 8);
    LOBYTE(v447) = 106;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v272, v273, &v447, v5);
    uint64_t v274 = (uint64_t *)(v3 + v114[111]);
    uint64_t v275 = *v274;
    uint64_t v276 = *((unsigned __int8 *)v274 + 8);
    LOBYTE(v447) = 107;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v275, v276, &v447, v5);
    __int128 v277 = (uint64_t *)(v3 + v114[112]);
    uint64_t v278 = *v277;
    uint64_t v279 = *((unsigned __int8 *)v277 + 8);
    LOBYTE(v447) = 108;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v278, v279, &v447, v5);
    uint64_t v280 = *(unsigned __int8 *)(v3 + v114[113]);
    LOBYTE(v447) = 109;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v280, &v447, v5);
    uint64_t v281 = (uint64_t *)(v3 + v114[114]);
    uint64_t v282 = *v281;
    uint64_t v283 = *((unsigned __int8 *)v281 + 8);
    LOBYTE(v447) = 110;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v282, v283, &v447, v5);
    uint64_t v284 = (uint64_t *)(v3 + v114[115]);
    uint64_t v285 = *v284;
    uint64_t v286 = *((unsigned __int8 *)v284 + 8);
    LOBYTE(v447) = 111;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v285, v286, &v447, v5);
    unint64_t v287 = (uint64_t *)(v3 + v114[116]);
    uint64_t v288 = *v287;
    uint64_t v289 = *((unsigned __int8 *)v287 + 8);
    LOBYTE(v447) = 112;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v288, v289, &v447, v5);
    uint64_t v290 = *(unsigned __int8 *)(v3 + v114[117]);
    LOBYTE(v447) = 113;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v290, &v447, v5);
    uint64_t v291 = *(unsigned __int8 *)(v3 + v114[118]);
    LOBYTE(v447) = 114;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v291, &v447, v5);
    uint64_t v292 = *(unsigned __int8 *)(v3 + v114[119]);
    LOBYTE(v447) = 115;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v292, &v447, v5);
    char v293 = (uint64_t *)(v3 + v114[120]);
    uint64_t v294 = *v293;
    uint64_t v295 = *((unsigned __int8 *)v293 + 8);
    LOBYTE(v447) = 116;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v294, v295, &v447, v5);
    uint64_t v296 = (uint64_t *)(v3 + v114[121]);
    uint64_t v297 = *v296;
    uint64_t v298 = *((unsigned __int8 *)v296 + 8);
    LOBYTE(v447) = 117;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v297, v298, &v447, v5);
    uint64_t v299 = (uint64_t *)(v3 + v114[122]);
    uint64_t v300 = *v299;
    uint64_t v301 = *((unsigned __int8 *)v299 + 8);
    LOBYTE(v447) = 118;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v300, v301, &v447, v5);
    uint64_t v302 = (uint64_t *)(v3 + v114[123]);
    uint64_t v303 = *v302;
    uint64_t v304 = *((unsigned __int8 *)v302 + 8);
    LOBYTE(v447) = 119;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v303, v304, &v447, v5);
    uint64_t v305 = (uint64_t *)(v3 + v114[124]);
    uint64_t v306 = *v305;
    uint64_t v307 = *((unsigned __int8 *)v305 + 8);
    LOBYTE(v447) = 120;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v306, v307, &v447, v5);
    char v308 = (uint64_t *)(v3 + v114[125]);
    uint64_t v309 = *v308;
    uint64_t v310 = *((unsigned __int8 *)v308 + 8);
    LOBYTE(v447) = 121;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v309, v310, &v447, v5);
    uint64_t v311 = (uint64_t *)(v3 + v114[126]);
    uint64_t v312 = *v311;
    uint64_t v313 = *((unsigned __int8 *)v311 + 8);
    LOBYTE(v447) = 122;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v312, v313, &v447, v5);
    uint64_t v314 = (uint64_t *)(v3 + v114[127]);
    uint64_t v315 = *v314;
    uint64_t v316 = *((unsigned __int8 *)v314 + 8);
    LOBYTE(v447) = 123;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v315, v316, &v447, v5);
    uint64_t v317 = *(unsigned __int8 *)(v3 + v114[128]);
    LOBYTE(v447) = 124;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v317, &v447, v5);
    char v318 = (uint64_t *)(v3 + v114[129]);
    uint64_t v319 = *v318;
    uint64_t v320 = *((unsigned __int8 *)v318 + 8);
    LOBYTE(v447) = 125;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v319, v320, &v447, v5);
    id v447 = *(id *)(v3 + v114[130]);
    v461[0] = 126;
    swift_bridgeObjectRetain(v447);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v447, v461, v5, v446, v203);
    swift_bridgeObjectRelease();
    uint64_t v321 = (uint64_t *)(v3 + v114[131]);
    uint64_t v322 = *v321;
    uint64_t v323 = *((unsigned __int8 *)v321 + 8);
    LOBYTE(v447) = 127;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v322, v323, &v447, v5);
    uint64_t v324 = *(unsigned __int8 *)(v3 + v114[132]);
    LOBYTE(v447) = 0x80;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v324, &v447, v5);
    id v447 = *(id *)(v3 + v114[133]);
    v461[0] = -127;
    swift_bridgeObjectRetain(v447);
    uint64_t v325 = sub_100004AEC(&qword_10099D5C8);
    uint64_t v326 = sub_1004283F4( &qword_1009AD958,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol witness table for Double,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
    KeyedEncodingContainer.encodeIfPresent<A>(_:forKey:)(&v447, v461, v5, v325, v326);
    swift_bridgeObjectRelease();
    uint64_t v327 = *(unsigned __int8 *)(v3 + v114[134]);
    LOBYTE(v447) = -126;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v327, &v447, v5);
    char v328 = (uint64_t *)(v3 + v114[135]);
    uint64_t v329 = *v328;
    uint64_t v330 = *((unsigned __int8 *)v328 + 8);
    LOBYTE(v447) = -125;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v329, v330, &v447, v5);
    uint64_t v331 = (uint64_t *)(v3 + v114[136]);
    uint64_t v332 = *v331;
    uint64_t v333 = *((unsigned __int8 *)v331 + 8);
    LOBYTE(v447) = -124;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v332, v333, &v447, v5);
    uint64_t v334 = *(unsigned __int8 *)(v3 + v114[137]);
    LOBYTE(v447) = -123;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v334, &v447, v5);
    uint64_t v335 = *(unsigned __int8 *)(v3 + v114[138]);
    LOBYTE(v447) = -122;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v335, &v447, v5);
    uint64_t v336 = (uint64_t *)(v3 + v114[139]);
    uint64_t v337 = *v336;
    uint64_t v338 = *((unsigned __int8 *)v336 + 8);
    LOBYTE(v447) = -121;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v337, v338, &v447, v5);
    uint64_t v339 = (uint64_t *)(v3 + v114[140]);
    uint64_t v340 = *v339;
    uint64_t v341 = *((unsigned __int8 *)v339 + 8);
    LOBYTE(v447) = -120;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v340, v341, &v447, v5);
    uint64_t v342 = (uint64_t *)(v3 + v114[141]);
    uint64_t v343 = *v342;
    uint64_t v344 = *((unsigned __int8 *)v342 + 8);
    LOBYTE(v447) = -119;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v343, v344, &v447, v5);
    v345 = (uint64_t *)(v3 + v114[142]);
    uint64_t v346 = *v345;
    uint64_t v347 = *((unsigned __int8 *)v345 + 8);
    LOBYTE(v447) = -118;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v346, v347, &v447, v5);
    uint64_t v348 = (uint64_t *)(v3 + v114[143]);
    uint64_t v349 = *v348;
    uint64_t v350 = *((unsigned __int8 *)v348 + 8);
    LOBYTE(v447) = -117;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v349, v350, &v447, v5);
    char v351 = (uint64_t *)(v3 + v114[144]);
    uint64_t v352 = *v351;
    uint64_t v353 = *((unsigned __int8 *)v351 + 8);
    LOBYTE(v447) = -116;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v352, v353, &v447, v5);
    uint64_t v354 = (uint64_t *)(v3 + v114[145]);
    uint64_t v355 = *v354;
    uint64_t v356 = *((unsigned __int8 *)v354 + 8);
    LOBYTE(v447) = -115;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v355, v356, &v447, v5);
    uint64_t v357 = (uint64_t *)(v3 + v114[146]);
    uint64_t v358 = *v357;
    uint64_t v359 = *((unsigned __int8 *)v357 + 8);
    LOBYTE(v447) = -114;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v358, v359, &v447, v5);
    v360 = (uint64_t *)(v3 + v114[147]);
    uint64_t v361 = *v360;
    uint64_t v362 = *((unsigned __int8 *)v360 + 8);
    LOBYTE(v447) = -113;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v361, v362, &v447, v5);
    uint64_t v363 = (uint64_t *)(v3 + v114[148]);
    uint64_t v364 = *v363;
    uint64_t v365 = *((unsigned __int8 *)v363 + 8);
    LOBYTE(v447) = -112;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v364, v365, &v447, v5);
    char v366 = (uint64_t *)(v3 + v114[149]);
    uint64_t v367 = *v366;
    uint64_t v368 = *((unsigned __int8 *)v366 + 8);
    LOBYTE(v447) = -111;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v367, v368, &v447, v5);
    uint64_t v369 = (uint64_t *)(v3 + v114[150]);
    uint64_t v370 = *v369;
    uint64_t v371 = *((unsigned __int8 *)v369 + 8);
    LOBYTE(v447) = -110;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v370, v371, &v447, v5);
    uint64_t v372 = (uint64_t *)(v3 + v114[151]);
    uint64_t v373 = *v372;
    uint64_t v374 = *((unsigned __int8 *)v372 + 8);
    LOBYTE(v447) = -109;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v373, v374, &v447, v5);
    v375 = (uint64_t *)(v3 + v114[152]);
    uint64_t v376 = *v375;
    uint64_t v377 = *((unsigned __int8 *)v375 + 8);
    LOBYTE(v447) = -108;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v376, v377, &v447, v5);
    uint64_t v378 = (uint64_t *)(v3 + v114[153]);
    uint64_t v379 = *v378;
    uint64_t v380 = *((unsigned __int8 *)v378 + 8);
    LOBYTE(v447) = -107;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v379, v380, &v447, v5);
    char v381 = (uint64_t *)(v3 + v114[154]);
    uint64_t v382 = *v381;
    uint64_t v383 = *((unsigned __int8 *)v381 + 8);
    LOBYTE(v447) = -106;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v382, v383, &v447, v5);
    uint64_t v384 = (uint64_t *)(v3 + v114[155]);
    uint64_t v385 = *v384;
    uint64_t v386 = *((unsigned __int8 *)v384 + 8);
    LOBYTE(v447) = -105;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v385, v386, &v447, v5);
    uint64_t v387 = (uint64_t *)(v3 + v114[156]);
    uint64_t v388 = *v387;
    uint64_t v389 = *((unsigned __int8 *)v387 + 8);
    LOBYTE(v447) = -104;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v388, v389, &v447, v5);
    uint64_t v390 = *(unsigned __int8 *)(v3 + v114[157]);
    LOBYTE(v447) = -103;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v390, &v447, v5);
    char v391 = (uint64_t *)(v3 + v114[158]);
    uint64_t v392 = *v391;
    uint64_t v393 = *((unsigned __int8 *)v391 + 8);
    LOBYTE(v447) = -102;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v392, v393, &v447, v5);
    uint64_t v394 = (uint64_t *)(v3 + v114[159]);
    uint64_t v395 = *v394;
    uint64_t v396 = *((unsigned __int8 *)v394 + 8);
    LOBYTE(v447) = -101;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v395, v396, &v447, v5);
    uint64_t v397 = (uint64_t *)(v3 + v114[160]);
    uint64_t v398 = *v397;
    uint64_t v399 = *((unsigned __int8 *)v397 + 8);
    LOBYTE(v447) = -100;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v398, v399, &v447, v5);
    uint64_t v400 = (uint64_t *)(v3 + v114[161]);
    uint64_t v401 = *v400;
    uint64_t v402 = v400[1];
    LOBYTE(v447) = -99;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v401, v402, &v447, v5);
    char v403 = (uint64_t *)(v3 + v114[162]);
    uint64_t v404 = *v403;
    uint64_t v405 = *((unsigned __int8 *)v403 + 8);
    LOBYTE(v447) = -98;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v404, v405, &v447, v5);
    uint64_t v406 = *(unsigned __int8 *)(v3 + v114[163]);
    LOBYTE(v447) = -97;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v406, &v447, v5);
    uint64_t v407 = *(unsigned __int8 *)(v3 + v114[164]);
    LOBYTE(v447) = -96;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v407, &v447, v5);
    char v408 = (uint64_t *)(v3 + v114[165]);
    uint64_t v409 = *v408;
    uint64_t v410 = *((unsigned __int8 *)v408 + 8);
    LOBYTE(v447) = -95;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v409, v410, &v447, v5);
    uint64_t v411 = (uint64_t *)(v3 + v114[166]);
    uint64_t v412 = *v411;
    uint64_t v413 = *((unsigned __int8 *)v411 + 8);
    LOBYTE(v447) = -94;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v412, v413, &v447, v5);
    uint64_t v414 = *(unsigned __int8 *)(v3 + v114[167]);
    LOBYTE(v447) = -93;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v414, &v447, v5);
    uint64_t v415 = (unsigned int *)(v3 + v114[168]);
    uint64_t v416 = *v415;
    LOBYTE(v415) = *((_BYTE *)v415 + 4);
    LOBYTE(v447) = -92;
    v461[0] = (_BYTE)v415;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v416 | ((unint64_t)v415 << 32), &v447, v5);
    uint64_t v417 = (uint64_t *)(v3 + v114[169]);
    uint64_t v418 = *v417;
    uint64_t v419 = *((unsigned __int8 *)v417 + 8);
    LOBYTE(v447) = -91;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v418, v419, &v447, v5);
    uint64_t v420 = (uint64_t *)(v3 + v114[170]);
    uint64_t v421 = *v420;
    uint64_t v422 = *((unsigned __int8 *)v420 + 8);
    LOBYTE(v447) = -90;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v421, v422, &v447, v5);
    v423 = (uint64_t *)(v3 + v114[171]);
    uint64_t v424 = *v423;
    uint64_t v425 = *((unsigned __int8 *)v423 + 8);
    LOBYTE(v447) = -89;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v424, v425, &v447, v5);
    uint64_t v426 = (uint64_t *)(v3 + v114[172]);
    uint64_t v427 = *v426;
    uint64_t v428 = *((unsigned __int8 *)v426 + 8);
    LOBYTE(v447) = -88;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v427, v428, &v447, v5);
    char v429 = (uint64_t *)(v3 + v114[173]);
    uint64_t v430 = *v429;
    uint64_t v431 = *((unsigned __int8 *)v429 + 8);
    LOBYTE(v447) = -87;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v430, v431, &v447, v5);
    uint64_t v432 = (uint64_t *)(v3 + v114[174]);
    uint64_t v433 = *v432;
    uint64_t v434 = *((unsigned __int8 *)v432 + 8);
    LOBYTE(v447) = -86;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v433, v434, &v447, v5);
    uint64_t v435 = (uint64_t *)(v3 + v114[175]);
    uint64_t v436 = *v435;
    uint64_t v437 = *((unsigned __int8 *)v435 + 8);
    LOBYTE(v447) = -85;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v436, v437, &v447, v5);
    uint64_t v438 = *(unsigned __int8 *)(v3 + v114[176]);
    LOBYTE(v447) = -84;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v438, &v447, v5);
    char v439 = (uint64_t *)(v3 + v114[177]);
    uint64_t v440 = *v439;
    uint64_t v441 = *((unsigned __int8 *)v439 + 8);
    LOBYTE(v447) = -83;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v440, v441, &v447, v5);
    uint64_t v442 = (uint64_t *)(v3 + v114[178]);
    uint64_t v443 = *v442;
    uint64_t v444 = *((unsigned __int8 *)v442 + 8);
    LOBYTE(v447) = -82;
    KeyedEncodingContainer.encodeIfPresent(_:forKey:)(v443, v444, &v447, v5);
  }

  return (*(uint64_t (**)(char *, uint64_t))(v6 + 8))(v8, v5);
}

void sub_10041A630(void *a1@<X0>, uint64_t a2@<X8>)
{
  uint64_t v624 = a2;
  uint64_t v4 = sub_100004AEC((uint64_t *)&unk_10099D720);
  uint64_t v5 = __chkstk_darwin(v4);
  uint64_t v7 = (char *)&v623 - ((v6 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  __chkstk_darwin(v5);
  uint64_t v9 = (char *)&v623 - v8;
  uint64_t v10 = sub_100004AEC(&qword_10099D8A0);
  __chkstk_darwin(v10);
  uint64_t v12 = (char *)&v623 - ((v11 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v626 = sub_100004AEC(&qword_1009AD8A8);
  uint64_t v13 = *(void *)(v626 - 8);
  __chkstk_darwin(v626);
  uint64_t v15 = (char *)&v623 - ((v14 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  uint64_t v629 = (int *)type metadata accessor for DefaultConfigurationLayer(0LL);
  __chkstk_darwin(v629);
  unint64_t v17 = (char *)&v623 - ((v16 + 15) & 0xFFFFFFFFFFFFFFF0LL);
  *((void *)v17 + 2) = 0LL;
  v630 = v17;
  _BYTE v17[24] = 1;
  uint64_t v18 = a1[3];
  uint64_t v19 = a1[4];
  uint64_t v627 = a1;
  sub_100012ED8(a1, v18);
  unint64_t v20 = sub_100427F04();
  uint64_t v625 = v15;
  dispatch thunk of Decoder.container<A>(keyedBy:)( &type metadata for DefaultConfigurationLayer.CodingKeys,  &type metadata for DefaultConfigurationLayer.CodingKeys,  v20,  v18,  v19);
  uint64_t v628 = v2;
  if (v2) {
    goto LABEL_4;
  }
  char v632 = 0;
  unint64_t v21 = sub_100016FE0();
  uint64_t v22 = v628;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for Data,  &v632,  v626,  &type metadata for Data,  v21);
  if (v22)
  {
    uint64_t v628 = v22;
    (*(void (**)(char *, uint64_t))(v13 + 8))(v625, v626);
LABEL_4:
    LODWORD(v626) = 0;
    unint64_t v23 = 0LL;
    unint64_t v24 = 0LL;
    unint64_t v25 = 0LL;
    goto LABEL_5;
  }

  uint64_t v32 = v630;
  *(_OWORD *)v630 = v631[0];
  LOBYTE(v631[0]) = 1;
  *((void *)v32 + 2) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  char v32[24] = v33 & 1;
  char v632 = 2;
  unint64_t v34 = sub_100427F48();
  KeyedDecodingContainer.decode<A>(_:forKey:)( v631,  &type metadata for ConfigurationCoordinator.ConfigurationSource,  &v632,  v626,  &type metadata for ConfigurationCoordinator.ConfigurationSource,  v34);
  v32[25] = v631[0];
  LOBYTE(v631[0]) = 3;
  *((void *)v32 + 4) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  v32[40] = v35 & 1;
  LOBYTE(v631[0]) = 4;
  *((void *)v32 + 6) = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  v32[56] = v36 & 1;
  LOBYTE(v631[0]) = 5;
  v32[57] = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v37 = sub_100004AEC(&qword_1009AED50);
  char v632 = 6;
  uint64_t v38 = sub_100428398( (unint64_t *)&qword_1009A56C0,  &qword_1009AED50,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v37, &v632, v626, v37, v38);
  *((void *)v32 + 8) = *(void *)&v631[0];
  LOBYTE(v631[0]) = 7;
  char v39 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = 0LL;
  v630[72] = v39;
  LOBYTE(v631[0]) = 8;
  uint64_t v40 = v628;
  uint64_t v41 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v40;
  if (v40)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v625, v626);
    LODWORD(v626) = 0;
    unint64_t v24 = 0LL;
    unint64_t v25 = 0LL;
    unint64_t v23 = 65LL;
    goto LABEL_5;
  }

  uint64_t v43 = v630;
  *((void *)v630 + 10) = v41;
  *((void *)v43 + 11) = v42;
  LOBYTE(v631[0]) = 9;
  uint64_t v44 = v628;
  uint64_t v45 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v44;
  if (v44) {
    goto LABEL_52;
  }
  uint64_t v47 = v630;
  *((void *)v630 + 12) = v45;
  v47[104] = v46 & 1;
  LOBYTE(v631[0]) = 10;
  uint64_t v48 = v628;
  char v49 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v48;
  if (v48) {
    goto LABEL_52;
  }
  v630[105] = v49;
  LOBYTE(v631[0]) = 11;
  uint64_t v50 = v628;
  char v51 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v50;
  if (v50) {
    goto LABEL_52;
  }
  v630[106] = v51;
  LOBYTE(v631[0]) = 12;
  uint64_t v52 = v628;
  uint64_t v53 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v52;
  if (v52) {
    goto LABEL_52;
  }
  unint64_t v55 = v630;
  *((void *)v630 + 14) = v53;
  v55[120] = v54 & 1;
  LOBYTE(v631[0]) = 13;
  uint64_t v56 = v628;
  uint64_t v57 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v56;
  if (v56) {
    goto LABEL_52;
  }
  uint64_t v59 = v630;
  *((void *)v630 + swift_weakDestroy(v0 + 16) = v57;
  v59[136] = v58 & 1;
  LOBYTE(v631[0]) = 14;
  uint64_t v60 = v628;
  uint64_t v61 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v60;
  if (v60) {
    goto LABEL_52;
  }
  uint64_t v63 = v630;
  *((void *)v630 + 18) = v61;
  v63[152] = v62 & 1;
  LOBYTE(v631[0]) = 15;
  uint64_t v64 = v628;
  uint64_t v65 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v64;
  if (v64) {
    goto LABEL_52;
  }
  uint64_t v67 = v630;
  *((void *)v630 + 20) = v65;
  v67[168] = v66 & 1;
  LOBYTE(v631[0]) = 16;
  uint64_t v68 = v628;
  uint64_t v69 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v68;
  if (v68) {
    goto LABEL_52;
  }
  uint64_t v71 = v630;
  *((void *)v630 + 22) = v69;
  v71[184] = v70 & 1;
  LOBYTE(v631[0]) = 17;
  uint64_t v72 = v628;
  uint64_t v73 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v72;
  if (v72) {
    goto LABEL_52;
  }
  uint64_t v75 = v630;
  *((void *)v630 + 24) = v73;
  v75[200] = v74 & 1;
  LOBYTE(v631[0]) = 18;
  uint64_t v76 = v628;
  uint64_t v77 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v76;
  if (v76) {
    goto LABEL_52;
  }
  uint64_t v79 = v630;
  *((void *)v630 + 26) = v77;
  v79[216] = v78 & 1;
  LOBYTE(v631[0]) = 19;
  uint64_t v80 = v628;
  uint64_t v81 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v80;
  if (v80) {
    goto LABEL_52;
  }
  uint64_t v83 = v630;
  *((void *)v630 + 28) = v81;
  v83[232] = v82 & 1;
  LOBYTE(v631[0]) = 20;
  uint64_t v84 = v628;
  uint64_t v85 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v84;
  if (v84) {
    goto LABEL_52;
  }
  uint64_t v87 = v630;
  *((void *)v630 + 30) = v85;
  v87[248] = v86 & 1;
  LOBYTE(v631[0]) = 21;
  uint64_t v88 = v628;
  uint64_t v89 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v88;
  if (v88) {
    goto LABEL_52;
  }
  uint64_t v91 = v630;
  uint64_t v92 = v630 + 264;
  *((void *)v630 + 32) = v89;
  v91[264] = v90 & 1;
  LOBYTE(v631[0]) = 22;
  uint64_t v93 = v628;
  char v94 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v93;
  if (v93
    || (v630[265] = v94,
        uint64_t v95 = sub_100004AEC(&qword_10099D630),
        char v632 = 23,
        unint64_t v96 = sub_100427F8C(),
        uint64_t v97 = v628,
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v95, &v632, v626, v95, v96),
        (uint64_t v628 = v97) != 0))
  {
LABEL_52:
    (*(void (**)(char *, uint64_t))(v13 + 8))(v625, v626);
    LODWORD(v626) = 0;
    unint64_t v24 = 0LL;
    unint64_t v25 = 0LL;
    unint64_t v23 = 321LL;
    goto LABEL_5;
  }

  unint64_t v23 = 8388929LL;
  *((void *)v630 + 34) = *(void *)&v631[0];
  LOBYTE(v631[0]) = 24;
  uint64_t v98 = v628;
  uint64_t v99 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v98;
  if (v98) {
    goto LABEL_88;
  }
  *((void *)v630 + 35) = v99;
  v92[24] = v100 & 1;
  LOBYTE(v631[0]) = 25;
  uint64_t v101 = v628;
  uint64_t v102 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v101;
  if (v101) {
    goto LABEL_88;
  }
  *((void *)v630 + 37) = v102;
  v92[40] = v103 & 1;
  LOBYTE(v631[0]) = 26;
  uint64_t v104 = v628;
  uint64_t v105 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v104;
  if (v104) {
    goto LABEL_88;
  }
  *((void *)v630 + 39) = v105;
  v92[56] = v106 & 1;
  LOBYTE(v631[0]) = 27;
  uint64_t v107 = v628;
  uint64_t v108 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v107;
  if (v107) {
    goto LABEL_88;
  }
  *((void *)v630 + 41) = v108;
  v92[72] = v109 & 1;
  LOBYTE(v631[0]) = 28;
  uint64_t v110 = v628;
  uint64_t v111 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v110;
  if (v110) {
    goto LABEL_88;
  }
  *((void *)v630 + 43) = v111;
  v92[88] = v112 & 1;
  LOBYTE(v631[0]) = 29;
  uint64_t v113 = v628;
  uint64_t v114 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v113;
  if (v113) {
    goto LABEL_88;
  }
  *((void *)v630 + 45) = v114;
  v92[104] = v115 & 1;
  LOBYTE(v631[0]) = 30;
  uint64_t v116 = v628;
  uint64_t v117 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v116;
  if (v116) {
    goto LABEL_88;
  }
  *((void *)v630 + 47) = v117;
  v92[120] = v118 & 1;
  LOBYTE(v631[0]) = 31;
  uint64_t v119 = v628;
  uint64_t v120 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v119;
  if (v119) {
    goto LABEL_88;
  }
  *((void *)v630 + 49) = v120;
  v92[136] = v121 & 1;
  LOBYTE(v631[0]) = 32;
  uint64_t v122 = v628;
  uint64_t v123 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v122;
  if (v122) {
    goto LABEL_88;
  }
  *((void *)v630 + 51) = v123;
  v92[152] = v124 & 1;
  LOBYTE(v631[0]) = 33;
  uint64_t v125 = v628;
  uint64_t v126 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v125;
  if (v125) {
    goto LABEL_88;
  }
  *((void *)v630 + 53) = v126;
  v92[168] = v127 & 1;
  LOBYTE(v631[0]) = 34;
  uint64_t v128 = v628;
  char v129 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v128;
  if (v128) {
    goto LABEL_88;
  }
  v630[433] = v129;
  LOBYTE(v631[0]) = 35;
  uint64_t v130 = v628;
  uint64_t v131 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v130;
  if (v130) {
    goto LABEL_88;
  }
  *((void *)v630 + 55) = v131;
  v92[184] = v132 & 1;
  LOBYTE(v631[0]) = 36;
  uint64_t v133 = v628;
  uint64_t v134 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v133;
  if (v133) {
    goto LABEL_88;
  }
  *((void *)v630 + 57) = v134;
  v92[200] = v135 & 1;
  LOBYTE(v631[0]) = 37;
  uint64_t v136 = v628;
  uint64_t v137 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v136;
  if (v136) {
    goto LABEL_88;
  }
  *((void *)v630 + 59) = v137;
  v92[216] = v138 & 1;
  LOBYTE(v631[0]) = 38;
  uint64_t v139 = v628;
  uint64_t v140 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v139;
  if (v139) {
    goto LABEL_88;
  }
  *((void *)v630 + 61) = v140;
  v92[232] = v141 & 1;
  LOBYTE(v631[0]) = 39;
  uint64_t v142 = v628;
  uint64_t v143 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v142;
  if (v142) {
    goto LABEL_88;
  }
  *((void *)v630 + 63) = v143;
  v92[248] = v144 & 1;
  LOBYTE(v631[0]) = 40;
  uint64_t v145 = v628;
  uint64_t v146 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v145;
  if (v145) {
    goto LABEL_88;
  }
  *((void *)v630 + 65) = v146;
  v92[264] = v147 & 1;
  LOBYTE(v631[0]) = 41;
  uint64_t v148 = v628;
  uint64_t v149 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v148;
  if (v148) {
    goto LABEL_88;
  }
  *((void *)v630 + 67) = v149;
  v92[280] = v150 & 1;
  uint64_t v151 = sub_100004AEC(&qword_10099D640);
  char v632 = 42;
  uint64_t v152 = sub_1004282A8( &qword_1009A82D8,  (void (*)(void))sub_1002E3E88,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  uint64_t v153 = v628;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v151, &v632, v626, v151, v152);
  uint64_t v628 = v153;
  if (v153) {
    goto LABEL_88;
  }
  unint64_t v23 = 0x40000800141LL;
  *((void *)v630 + 69) = *(void *)&v631[0];
  LOBYTE(v631[0]) = 43;
  uint64_t v154 = v628;
  uint64_t v155 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v154;
  if (v154) {
    goto LABEL_88;
  }
  *((void *)v630 + 70) = v155;
  v92[304] = v156 & 1;
  LOBYTE(v631[0]) = 44;
  uint64_t v157 = v628;
  uint64_t v158 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v157;
  if (v157) {
    goto LABEL_88;
  }
  *((void *)v630 + 72) = v158;
  v92[320] = v159 & 1;
  type metadata accessor for SPServiceState(0LL);
  uint64_t v161 = v160;
  char v632 = 45;
  uint64_t v162 = sub_100007864( &qword_1009AD8D8,  (uint64_t (*)(uint64_t))type metadata accessor for SPServiceState,  (uint64_t)&protocol conformance descriptor for SPServiceState);
  uint64_t v163 = v628;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v161, &v632, v626, v161, v162);
  uint64_t v628 = v163;
  if (v163) {
    goto LABEL_88;
  }
  *((void *)v630 + 74) = *(void *)&v631[0];
  uint64_t v164 = sub_100004AEC(&qword_10099D618);
  char v632 = 46;
  uint64_t v165 = sub_100428054( &qword_1009AD8E0,  &qword_1009AD8E8,  (uint64_t)&protocol conformance descriptor for SPDisabledReason,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  uint64_t v166 = v628;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v164, &v632, v626, v164, v165);
  uint64_t v628 = v166;
  if (v166)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v625, v626);
    LODWORD(v626) = 0;
    unint64_t v24 = 0LL;
    unint64_t v25 = 0LL;
    unint64_t v23 = 0x240000800141LL;
    goto LABEL_5;
  }

  unint64_t v23 = 0x640000800141LL;
  *((void *)v630 + 75) = *(void *)&v631[0];
  LOBYTE(v631[0]) = 47;
  uint64_t v167 = v628;
  uint64_t v168 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v167;
  if (v167) {
    goto LABEL_88;
  }
  *((void *)v630 + 76) = v168;
  v92[352] = v169 & 1;
  LOBYTE(v631[0]) = 48;
  uint64_t v170 = v628;
  uint64_t v171 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v170;
  if (v170) {
    goto LABEL_88;
  }
  *((void *)v630 + 78) = v171;
  v92[368] = v172 & 1;
  LOBYTE(v631[0]) = 49;
  uint64_t v173 = v628;
  uint64_t v174 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v173;
  if (v173) {
    goto LABEL_88;
  }
  *((void *)v630 + 80) = v174;
  v92[384] = v175 & 1;
  LOBYTE(v631[0]) = 50;
  uint64_t v176 = v628;
  uint64_t v177 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v176;
  if (v176) {
    goto LABEL_88;
  }
  *((void *)v630 + 82) = v177;
  v92[400] = v178 & 1;
  LOBYTE(v631[0]) = 51;
  uint64_t v179 = v628;
  uint64_t v180 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v179;
  if (v179) {
    goto LABEL_88;
  }
  *((void *)v630 + 84) = v180;
  v92[416] = v181 & 1;
  LOBYTE(v631[0]) = 52;
  uint64_t v182 = v628;
  char v183 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v182;
  if (v182) {
    goto LABEL_88;
  }
  v630[681] = v183;
  uint64_t v184 = type metadata accessor for UUID(0LL);
  LOBYTE(v631[0]) = 53;
  uint64_t v185 = sub_100007864( (unint64_t *)&qword_10099D6F0,  (uint64_t (*)(uint64_t))&type metadata accessor for UUID,  (uint64_t)&protocol conformance descriptor for UUID);
  uint64_t v186 = v628;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v184, v631, v626, v184, v185);
  uint64_t v628 = v186;
  if (v186) {
    goto LABEL_88;
  }
  sub_100015750((uint64_t)v12, (uint64_t)&v630[v629[57]], &qword_10099D8A0);
  uint64_t v187 = type metadata accessor for Date(0LL);
  LOBYTE(v631[0]) = 54;
  uint64_t v188 = sub_100007864( &qword_10099DA70,  (uint64_t (*)(uint64_t))&type metadata accessor for Date,  (uint64_t)&protocol conformance descriptor for Date);
  uint64_t v189 = v628;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v187, v631, v626, v187, v188);
  uint64_t v628 = v189;
  if (v189)
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v625, v626);
    LODWORD(v626) = 0;
    unint64_t v24 = 0LL;
    unint64_t v25 = 0LL;
    unint64_t v23 = 0x20640000800141LL;
    goto LABEL_5;
  }

  unint64_t v23 = 0x60640000800141LL;
  sub_100015750((uint64_t)v9, (uint64_t)&v630[v629[58]], (uint64_t *)&unk_10099D720);
  LOBYTE(v631[0]) = 55;
  uint64_t v190 = v628;
  uint64_t v191 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v190;
  if (v190
    || (uint64_t v193 = &v630[v629[59]],
        *(void *)uint64_t v193 = v191,
        v193[8] = v192 & 1,
        LOBYTE(v631[0]) = 56,
        uint64_t v194 = v628,
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v187, v631, v626, v187, v188),
        (uint64_t v628 = v194) != 0))
  {
LABEL_88:
    (*(void (**)(char *, uint64_t))(v13 + 8))(v625, v626);
    LODWORD(v626) = 0;
    unint64_t v24 = 0LL;
    unint64_t v25 = 0LL;
    goto LABEL_5;
  }

  unint64_t v24 = 0LL;
  unint64_t v23 = 0x160640000800141LL;
  sub_100015750((uint64_t)v7, (uint64_t)&v630[v629[60]], (uint64_t *)&unk_10099D720);
  LOBYTE(v631[0]) = 57;
  uint64_t v195 = v628;
  uint64_t v196 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v195;
  if (v195) {
    goto LABEL_109;
  }
  uint64_t v198 = &v630[v629[61]];
  *(void *)uint64_t v198 = v196;
  v198[8] = v197 & 1;
  LOBYTE(v631[0]) = 58;
  uint64_t v199 = v628;
  uint64_t v200 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v199;
  if (v199) {
    goto LABEL_109;
  }
  uint64_t v202 = &v630[v629[62]];
  *(void *)uint64_t v202 = v200;
  v202[8] = v201 & 1;
  LOBYTE(v631[0]) = 59;
  uint64_t v203 = v628;
  uint64_t v204 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v203;
  if (v203) {
    goto LABEL_109;
  }
  uint64_t v206 = &v630[v629[63]];
  *(void *)uint64_t v206 = v204;
  v206[8] = v205 & 1;
  LOBYTE(v631[0]) = 60;
  uint64_t v207 = v628;
  uint64_t v208 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v207;
  if (v207) {
    goto LABEL_109;
  }
  uint64_t v210 = &v630[v629[64]];
  *(void *)uint64_t v210 = v208;
  v210[8] = v209 & 1;
  LOBYTE(v631[0]) = 61;
  uint64_t v211 = v628;
  uint64_t v212 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v211;
  if (v211) {
    goto LABEL_109;
  }
  uint64_t v214 = &v630[v629[65]];
  *(void *)uint64_t v214 = v212;
  v214[8] = v213 & 1;
  LOBYTE(v631[0]) = 62;
  uint64_t v215 = v628;
  uint64_t v216 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v215;
  if (v215) {
    goto LABEL_109;
  }
  uint64_t v218 = &v630[v629[66]];
  *(void *)uint64_t v218 = v216;
  v218[8] = v217 & 1;
  char v632 = 63;
  unint64_t v219 = sub_1004280D8();
  uint64_t v220 = v628;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)( &type metadata for AllMacBeaconConfigs,  &v632,  v626,  &type metadata for AllMacBeaconConfigs,  v219);
  uint64_t v628 = v220;
  if (v220) {
    goto LABEL_109;
  }
  unint64_t v24 = 0LL;
  unint64_t v23 = 0x8160640000800141LL;
  uint64_t v221 = &v630[v629[67]];
  __int128 v222 = v631[1];
  *(_OWORD *)uint64_t v221 = v631[0];
  *((_OWORD *)v221 + 1) = v222;
  __int128 v223 = v631[3];
  *((_OWORD *)v221 + 2) = v631[2];
  *((_OWORD *)v221 + 3) = v223;
  __int128 v224 = v631[5];
  *((_OWORD *)v221 + 4) = v631[4];
  *((_OWORD *)v221 + 5) = v224;
  *((_OWORD *)v221 + 6) = v631[6];
  LOBYTE(v631[0]) = 64;
  uint64_t v225 = v628;
  char v226 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v225;
  if (v225) {
    goto LABEL_109;
  }
  v630[v629[68]] = v226;
  LOBYTE(v631[0]) = 65;
  uint64_t v227 = v628;
  char v228 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v227;
  if (v227) {
    goto LABEL_109;
  }
  v630[v629[69]] = v228;
  LOBYTE(v631[0]) = 66;
  uint64_t v229 = v628;
  char v230 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v229;
  if (v229) {
    goto LABEL_109;
  }
  v630[v629[70]] = v230;
  LOBYTE(v631[0]) = 67;
  uint64_t v231 = v628;
  uint64_t v232 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v231;
  if (v231) {
    goto LABEL_109;
  }
  uint64_t v234 = &v630[v629[71]];
  *(void *)uint64_t v234 = v232;
  v234[8] = v233 & 1;
  LOBYTE(v631[0]) = 68;
  uint64_t v235 = v628;
  uint64_t v236 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v235;
  if (v235) {
    goto LABEL_109;
  }
  uint64_t v238 = &v630[v629[72]];
  *(void *)uint64_t v238 = v236;
  v238[8] = v237 & 1;
  LOBYTE(v631[0]) = 69;
  uint64_t v239 = v628;
  uint64_t v240 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v239;
  if (v239) {
    goto LABEL_109;
  }
  uint64_t v242 = &v630[v629[73]];
  *(void *)uint64_t v242 = v240;
  v242[8] = v241 & 1;
  LOBYTE(v631[0]) = 70;
  uint64_t v243 = v628;
  uint64_t v244 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v243;
  if (v243) {
    goto LABEL_109;
  }
  uint64_t v246 = &v630[v629[74]];
  *(void *)uint64_t v246 = v244;
  v246[8] = v245 & 1;
  LOBYTE(v631[0]) = 71;
  uint64_t v247 = v628;
  uint64_t v248 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v247;
  if (v247) {
    goto LABEL_109;
  }
  uint64_t v250 = &v630[v629[75]];
  *(void *)uint64_t v250 = v248;
  v250[8] = v249 & 1;
  LOBYTE(v631[0]) = 72;
  uint64_t v251 = v628;
  uint64_t v252 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v251;
  if (v251) {
    goto LABEL_109;
  }
  uint64_t v254 = &v630[v629[76]];
  *(void *)uint64_t v254 = v252;
  v254[8] = v253 & 1;
  LOBYTE(v631[0]) = 73;
  uint64_t v255 = v628;
  uint64_t v256 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v255;
  if (v255) {
    goto LABEL_109;
  }
  uint64_t v258 = &v630[v629[77]];
  *(void *)uint64_t v258 = v256;
  v258[8] = v257 & 1;
  LOBYTE(v631[0]) = 74;
  uint64_t v259 = v628;
  uint64_t v260 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v259;
  if (v259) {
    goto LABEL_109;
  }
  uint64_t v262 = &v630[v629[78]];
  *(void *)uint64_t v262 = v260;
  v262[8] = v261 & 1;
  LOBYTE(v631[0]) = 75;
  uint64_t v263 = v628;
  uint64_t v264 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v263;
  if (v263
    || (uint64_t v266 = &v630[v629[79]],
        *(void *)uint64_t v266 = v264,
        v266[8] = v265 & 1,
        LOBYTE(v631[0]) = 76,
        uint64_t v267 = v628,
        uint64_t v268 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626),
        (uint64_t v628 = v267) != 0))
  {
LABEL_109:
    (*(void (**)(char *, uint64_t))(v13 + 8))(v625, v626);
    LODWORD(v626) = 0;
    unint64_t v25 = 0LL;
    goto LABEL_5;
  }

  unint64_t v25 = 0LL;
  uint64_t v270 = (uint64_t *)&v630[v629[80]];
  uint64_t *v270 = v268;
  v270[1] = v269;
  LOBYTE(v631[0]) = 77;
  uint64_t v271 = v628;
  uint64_t v272 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v271;
  if (v271
    || (uint64_t v274 = &v630[v629[81]],
        *(void *)uint64_t v274 = v272,
        v274[8] = v273 & 1,
        LOBYTE(v631[0]) = 78,
        uint64_t v275 = v628,
        uint64_t v276 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626),
        (uint64_t v628 = v275) != 0))
  {
    (*(void (**)(char *, uint64_t))(v13 + 8))(v625, v626);
    LODWORD(v626) = 0;
    unint64_t v24 = 4096LL;
    goto LABEL_5;
  }

  unint64_t v25 = 0LL;
  uint64_t v278 = (uint64_t *)&v630[v629[82]];
  *uint64_t v278 = v276;
  v278[1] = v277;
  LOBYTE(v631[0]) = 79;
  uint64_t v279 = v628;
  uint64_t v280 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v279;
  if (v279) {
    goto LABEL_115;
  }
  uint64_t v282 = &v630[v629[83]];
  *(void *)uint64_t v282 = v280;
  v282[8] = v281 & 1;
  uint64_t v283 = sub_100004AEC(&qword_10099D5E0);
  char v632 = 80;
  uint64_t v284 = sub_100428398( &qword_1009A1D60,  &qword_10099D5E0,  (uint64_t)&protocol witness table for Int,  (uint64_t)&protocol conformance descriptor for <A> [A]);
  uint64_t v285 = v628;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v283, &v632, v626, v283, v284);
  uint64_t v628 = v285;
  if (v285)
  {
LABEL_115:
    (*(void (**)(char *, uint64_t))(v13 + 8))(v625, v626);
    LODWORD(v626) = 0;
    unint64_t v24 = 20480LL;
    goto LABEL_5;
  }

  *(void *)&v630[v629[84]] = *(void *)&v631[0];
  LOBYTE(v631[0]) = 81;
  uint64_t v286 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = 0LL;
  unint64_t v25 = 0LL;
  unint64_t v287 = (uint64_t *)&v630[v629[85]];
  *unint64_t v287 = v286;
  v287[1] = v288;
  LOBYTE(v631[0]) = 82;
  uint64_t v289 = v628;
  uint64_t v290 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v289;
  if (v289) {
    goto LABEL_161;
  }
  uint64_t v292 = &v630[v629[86]];
  *(void *)uint64_t v292 = v290;
  v292[8] = v291 & 1;
  LOBYTE(v631[0]) = 83;
  uint64_t v293 = v628;
  char v294 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v293;
  if (v293) {
    goto LABEL_161;
  }
  v630[v629[87]] = v294;
  LOBYTE(v631[0]) = 84;
  uint64_t v295 = v628;
  char v296 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v295;
  if (v295) {
    goto LABEL_161;
  }
  v630[v629[88]] = v296;
  LOBYTE(v631[0]) = 85;
  uint64_t v297 = v628;
  char v298 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v297;
  if (v297) {
    goto LABEL_161;
  }
  v630[v629[89]] = v298;
  LOBYTE(v631[0]) = 86;
  uint64_t v299 = v628;
  char v300 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v299;
  if (v299) {
    goto LABEL_161;
  }
  v630[v629[90]] = v300;
  LOBYTE(v631[0]) = 87;
  uint64_t v301 = v628;
  uint64_t v302 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v301;
  if (v301) {
    goto LABEL_161;
  }
  uint64_t v304 = &v630[v629[91]];
  *(void *)uint64_t v304 = v302;
  v304[8] = v303 & 1;
  LOBYTE(v631[0]) = 88;
  uint64_t v305 = v628;
  uint64_t v306 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v305;
  if (v305) {
    goto LABEL_161;
  }
  char v308 = &v630[v629[92]];
  *(void *)char v308 = v306;
  v308[8] = v307 & 1;
  LOBYTE(v631[0]) = 89;
  uint64_t v309 = v628;
  uint64_t v310 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v309;
  if (v309) {
    goto LABEL_161;
  }
  uint64_t v312 = &v630[v629[93]];
  *(void *)uint64_t v312 = v310;
  v312[8] = v311 & 1;
  LOBYTE(v631[0]) = 90;
  uint64_t v313 = v628;
  uint64_t v314 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v313;
  if (v313) {
    goto LABEL_161;
  }
  uint64_t v316 = &v630[v629[94]];
  *(void *)uint64_t v316 = v314;
  v316[8] = v315 & 1;
  LOBYTE(v631[0]) = 91;
  uint64_t v317 = v628;
  uint64_t v318 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v317;
  if (v317) {
    goto LABEL_161;
  }
  uint64_t v320 = &v630[v629[95]];
  *(void *)uint64_t v320 = v318;
  v320[8] = v319 & 1;
  LOBYTE(v631[0]) = 92;
  uint64_t v321 = v628;
  uint64_t v322 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v321;
  if (v321) {
    goto LABEL_161;
  }
  uint64_t v324 = &v630[v629[96]];
  *(void *)uint64_t v324 = v322;
  v324[8] = v323 & 1;
  LOBYTE(v631[0]) = 93;
  uint64_t v325 = v628;
  uint64_t v326 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v325;
  if (v325) {
    goto LABEL_161;
  }
  char v328 = &v630[v629[97]];
  *(void *)char v328 = v326;
  v328[8] = v327 & 1;
  LOBYTE(v631[0]) = 94;
  uint64_t v329 = v628;
  uint64_t v330 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v329;
  if (v329) {
    goto LABEL_161;
  }
  uint64_t v332 = &v630[v629[98]];
  *(void *)uint64_t v332 = v330;
  v332[8] = v331 & 1;
  LOBYTE(v631[0]) = 95;
  uint64_t v333 = v628;
  uint64_t v334 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v333;
  if (v333) {
    goto LABEL_161;
  }
  uint64_t v336 = &v630[v629[99]];
  *(void *)uint64_t v336 = v334;
  v336[8] = v335 & 1;
  LOBYTE(v631[0]) = 96;
  uint64_t v337 = v628;
  uint64_t v338 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v337;
  if (v337) {
    goto LABEL_161;
  }
  uint64_t v340 = &v630[v629[100]];
  *(void *)uint64_t v340 = v338;
  v340[8] = v339 & 1;
  LOBYTE(v631[0]) = 97;
  uint64_t v341 = v628;
  uint64_t v342 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v341;
  if (v341) {
    goto LABEL_161;
  }
  uint64_t v344 = &v630[v629[101]];
  *(void *)uint64_t v344 = v342;
  v344[8] = v343 & 1;
  LOBYTE(v631[0]) = 98;
  uint64_t v345 = v628;
  uint64_t v346 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v345;
  if (v345) {
    goto LABEL_161;
  }
  uint64_t v348 = &v630[v629[102]];
  *(void *)uint64_t v348 = v346;
  v348[8] = v347 & 1;
  LOBYTE(v631[0]) = 99;
  uint64_t v349 = v628;
  uint64_t v350 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v349;
  if (v349) {
    goto LABEL_161;
  }
  uint64_t v352 = &v630[v629[103]];
  *(void *)uint64_t v352 = v350;
  v352[8] = v351 & 1;
  LOBYTE(v631[0]) = 100;
  uint64_t v353 = v628;
  uint64_t v354 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v353;
  if (v353) {
    goto LABEL_161;
  }
  uint64_t v356 = &v630[v629[104]];
  *(void *)uint64_t v356 = v354;
  v356[8] = v355 & 1;
  LOBYTE(v631[0]) = 101;
  uint64_t v357 = v628;
  uint64_t v358 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v357;
  if (v357) {
    goto LABEL_161;
  }
  v360 = &v630[v629[105]];
  *(void *)v360 = v358;
  v360[8] = v359 & 1;
  LOBYTE(v631[0]) = 102;
  uint64_t v361 = v628;
  uint64_t v362 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v361;
  if (v361) {
    goto LABEL_161;
  }
  uint64_t v364 = &v630[v629[106]];
  *(void *)uint64_t v364 = v362;
  v364[8] = v363 & 1;
  LOBYTE(v631[0]) = 103;
  uint64_t v365 = v628;
  uint64_t v366 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v365;
  if (v365) {
    goto LABEL_161;
  }
  uint64_t v368 = &v630[v629[107]];
  *(void *)uint64_t v368 = v366;
  v368[8] = v367 & 1;
  LOBYTE(v631[0]) = 104;
  uint64_t v369 = v628;
  uint64_t v370 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v369;
  if (v369) {
    goto LABEL_161;
  }
  uint64_t v372 = &v630[v629[108]];
  *(void *)uint64_t v372 = v370;
  v372[8] = v371 & 1;
  LOBYTE(v631[0]) = 105;
  uint64_t v373 = v628;
  uint64_t v374 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v373;
  if (v373) {
    goto LABEL_161;
  }
  uint64_t v376 = &v630[v629[109]];
  *(void *)uint64_t v376 = v374;
  v376[8] = v375 & 1;
  LOBYTE(v631[0]) = 106;
  uint64_t v377 = v628;
  uint64_t v378 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v377;
  if (v377) {
    goto LABEL_161;
  }
  uint64_t v380 = &v630[v629[110]];
  *(void *)uint64_t v380 = v378;
  v380[8] = v379 & 1;
  LOBYTE(v631[0]) = 107;
  uint64_t v381 = v628;
  uint64_t v382 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v381;
  if (v381) {
    goto LABEL_161;
  }
  uint64_t v384 = &v630[v629[111]];
  *(void *)uint64_t v384 = v382;
  v384[8] = v383 & 1;
  LOBYTE(v631[0]) = 108;
  uint64_t v385 = v628;
  uint64_t v386 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v385;
  if (v385) {
    goto LABEL_161;
  }
  uint64_t v388 = &v630[v629[112]];
  *(void *)uint64_t v388 = v386;
  v388[8] = v387 & 1;
  LOBYTE(v631[0]) = 109;
  uint64_t v389 = v628;
  char v390 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v389;
  if (v389) {
    goto LABEL_161;
  }
  v630[v629[113]] = v390;
  LOBYTE(v631[0]) = 110;
  uint64_t v391 = v628;
  uint64_t v392 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v391;
  if (v391) {
    goto LABEL_161;
  }
  uint64_t v394 = &v630[v629[114]];
  *(void *)uint64_t v394 = v392;
  v394[8] = v393 & 1;
  LOBYTE(v631[0]) = 111;
  uint64_t v395 = v628;
  uint64_t v396 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v395;
  if (v395) {
    goto LABEL_161;
  }
  uint64_t v398 = &v630[v629[115]];
  *(void *)uint64_t v398 = v396;
  v398[8] = v397 & 1;
  LOBYTE(v631[0]) = 112;
  uint64_t v399 = v628;
  uint64_t v400 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v399;
  if (v399) {
    goto LABEL_161;
  }
  uint64_t v402 = &v630[v629[116]];
  *(void *)uint64_t v402 = v400;
  v402[8] = v401 & 1;
  LOBYTE(v631[0]) = 113;
  uint64_t v403 = v628;
  char v404 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v403;
  if (v403) {
    goto LABEL_161;
  }
  v630[v629[117]] = v404;
  LOBYTE(v631[0]) = 114;
  uint64_t v405 = v628;
  char v406 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v405;
  if (v405) {
    goto LABEL_161;
  }
  v630[v629[118]] = v406;
  LOBYTE(v631[0]) = 115;
  uint64_t v407 = v628;
  char v408 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v407;
  if (v407) {
    goto LABEL_161;
  }
  v630[v629[119]] = v408;
  LOBYTE(v631[0]) = 116;
  uint64_t v409 = v628;
  uint64_t v410 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v409;
  if (v409) {
    goto LABEL_161;
  }
  uint64_t v412 = &v630[v629[120]];
  *(void *)uint64_t v412 = v410;
  v412[8] = v411 & 1;
  LOBYTE(v631[0]) = 117;
  uint64_t v413 = v628;
  uint64_t v414 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v413;
  if (v413) {
    goto LABEL_161;
  }
  uint64_t v416 = &v630[v629[121]];
  *(void *)uint64_t v416 = v414;
  v416[8] = v415 & 1;
  LOBYTE(v631[0]) = 118;
  uint64_t v417 = v628;
  uint64_t v418 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v417;
  if (v417) {
    goto LABEL_161;
  }
  uint64_t v420 = &v630[v629[122]];
  *(void *)uint64_t v420 = v418;
  v420[8] = v419 & 1;
  LOBYTE(v631[0]) = 119;
  uint64_t v421 = v628;
  uint64_t v422 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v421;
  if (v421) {
    goto LABEL_161;
  }
  uint64_t v424 = &v630[v629[123]];
  *(void *)uint64_t v424 = v422;
  v424[8] = v423 & 1;
  LOBYTE(v631[0]) = 120;
  uint64_t v425 = v628;
  uint64_t v426 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v425;
  if (v425) {
    goto LABEL_161;
  }
  uint64_t v428 = &v630[v629[124]];
  *(void *)uint64_t v428 = v426;
  v428[8] = v427 & 1;
  LOBYTE(v631[0]) = 121;
  uint64_t v429 = v628;
  uint64_t v430 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v429;
  if (v429) {
    goto LABEL_161;
  }
  uint64_t v432 = &v630[v629[125]];
  *(void *)uint64_t v432 = v430;
  v432[8] = v431 & 1;
  LOBYTE(v631[0]) = 122;
  uint64_t v433 = v628;
  uint64_t v434 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v433;
  if (v433) {
    goto LABEL_161;
  }
  uint64_t v436 = &v630[v629[126]];
  *(void *)uint64_t v436 = v434;
  v436[8] = v435 & 1;
  LOBYTE(v631[0]) = 123;
  uint64_t v437 = v628;
  uint64_t v438 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v437;
  if (v437) {
    goto LABEL_161;
  }
  uint64_t v440 = &v630[v629[127]];
  *(void *)uint64_t v440 = v438;
  v440[8] = v439 & 1;
  LOBYTE(v631[0]) = 124;
  uint64_t v441 = v628;
  char v442 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v441;
  if (v441) {
    goto LABEL_161;
  }
  v630[v629[128]] = v442;
  LOBYTE(v631[0]) = 125;
  uint64_t v443 = v628;
  uint64_t v444 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v443;
  if (v443
    || (uint64_t v446 = &v630[v629[129]],
        *(void *)uint64_t v446 = v444,
        v446[8] = v445 & 1,
        char v632 = 126,
        uint64_t v447 = v628,
        KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v283, &v632, v626, v283, v284),
        (uint64_t v628 = v447) != 0))
  {
LABEL_161:
    (*(void (**)(char *, uint64_t))(v13 + 8))(v625, v626);
    LODWORD(v626) = 0;
    unint64_t v24 = 217088LL;
    goto LABEL_5;
  }

  unint64_t v25 = 0LL;
  *(void *)&v630[v629[130]] = *(void *)&v631[0];
  LOBYTE(v631[0]) = 127;
  uint64_t v448 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = 0LL;
  uint64_t v449 = &v630[v629[131]];
  *(void *)uint64_t v449 = v448;
  v449[8] = v450 & 1;
  LOBYTE(v631[0]) = 0x80;
  uint64_t v451 = v628;
  char v452 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v451;
  if (v451) {
    goto LABEL_191;
  }
  v630[v629[132]] = v452;
  uint64_t v453 = sub_100004AEC(&qword_10099D5C8);
  char v632 = -127;
  uint64_t v454 = sub_1004283F4( (unint64_t *)&qword_1009AD8F8,  (uint64_t)&protocol witness table for String,  (uint64_t)&protocol witness table for Double,  (uint64_t)&protocol conformance descriptor for <> [A : B]);
  uint64_t v455 = v628;
  KeyedDecodingContainer.decodeIfPresent<A>(_:forKey:)(v453, &v632, v626, v453, v454);
  uint64_t v628 = v455;
  if (v455) {
    goto LABEL_191;
  }
  unint64_t v25 = 2LL;
  *(void *)&v630[v629[133]] = *(void *)&v631[0];
  LOBYTE(v631[0]) = -126;
  char v456 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = 0LL;
  v630[v629[134]] = v456;
  LOBYTE(v631[0]) = -125;
  uint64_t v457 = v628;
  uint64_t v458 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v457;
  if (v457) {
    goto LABEL_191;
  }
  uint64_t v460 = &v630[v629[135]];
  *(void *)uint64_t v460 = v458;
  v460[8] = v459 & 1;
  LOBYTE(v631[0]) = -124;
  uint64_t v461 = v628;
  uint64_t v462 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v461;
  if (v461) {
    goto LABEL_191;
  }
  uint64_t v464 = &v630[v629[136]];
  *(void *)uint64_t v464 = v462;
  v464[8] = v463 & 1;
  LOBYTE(v631[0]) = -123;
  uint64_t v465 = v628;
  char v466 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v465;
  if (v465) {
    goto LABEL_191;
  }
  v630[v629[137]] = v466;
  LOBYTE(v631[0]) = -122;
  uint64_t v467 = v628;
  char v468 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v467;
  if (v467) {
    goto LABEL_191;
  }
  v630[v629[138]] = v468;
  LOBYTE(v631[0]) = -121;
  uint64_t v469 = v628;
  uint64_t v470 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v469;
  if (v469) {
    goto LABEL_191;
  }
  v472 = &v630[v629[139]];
  *(void *)v472 = v470;
  v472[8] = v471 & 1;
  LOBYTE(v631[0]) = -120;
  uint64_t v473 = v628;
  uint64_t v474 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v473;
  if (v473) {
    goto LABEL_191;
  }
  uint64_t v476 = &v630[v629[140]];
  *(void *)uint64_t v476 = v474;
  v476[8] = v475 & 1;
  LOBYTE(v631[0]) = -119;
  uint64_t v477 = v628;
  uint64_t v478 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v477;
  if (v477) {
    goto LABEL_191;
  }
  uint64_t v480 = &v630[v629[141]];
  *(void *)uint64_t v480 = v478;
  v480[8] = v479 & 1;
  LOBYTE(v631[0]) = -118;
  uint64_t v481 = v628;
  uint64_t v482 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v481;
  if (v481) {
    goto LABEL_191;
  }
  char v484 = &v630[v629[142]];
  *(void *)char v484 = v482;
  v484[8] = v483 & 1;
  LOBYTE(v631[0]) = -117;
  uint64_t v485 = v628;
  uint64_t v486 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v485;
  if (v485) {
    goto LABEL_191;
  }
  v488 = &v630[v629[143]];
  *(void *)v488 = v486;
  v488[8] = v487 & 1;
  LOBYTE(v631[0]) = -116;
  uint64_t v489 = v628;
  uint64_t v490 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v489;
  if (v489) {
    goto LABEL_191;
  }
  uint64_t v492 = &v630[v629[144]];
  *(void *)uint64_t v492 = v490;
  v492[8] = v491 & 1;
  LOBYTE(v631[0]) = -115;
  uint64_t v493 = v628;
  uint64_t v494 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v493;
  if (v493) {
    goto LABEL_191;
  }
  uint64_t v496 = &v630[v629[145]];
  *(void *)uint64_t v496 = v494;
  v496[8] = v495 & 1;
  LOBYTE(v631[0]) = -114;
  uint64_t v497 = v628;
  uint64_t v498 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v497;
  if (v497) {
    goto LABEL_191;
  }
  uint64_t v500 = &v630[v629[146]];
  *(void *)uint64_t v500 = v498;
  v500[8] = v499 & 1;
  LOBYTE(v631[0]) = -113;
  uint64_t v501 = v628;
  uint64_t v502 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v501;
  if (v501) {
    goto LABEL_191;
  }
  uint64_t v504 = &v630[v629[147]];
  *(void *)uint64_t v504 = v502;
  v504[8] = v503 & 1;
  LOBYTE(v631[0]) = -112;
  uint64_t v505 = v628;
  uint64_t v506 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v505;
  if (v505) {
    goto LABEL_191;
  }
  char v508 = &v630[v629[148]];
  *(void *)char v508 = v506;
  v508[8] = v507 & 1;
  LOBYTE(v631[0]) = -111;
  uint64_t v509 = v628;
  uint64_t v510 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v509;
  if (v509) {
    goto LABEL_191;
  }
  v512 = &v630[v629[149]];
  *(void *)v512 = v510;
  v512[8] = v511 & 1;
  LOBYTE(v631[0]) = -110;
  uint64_t v513 = v628;
  uint64_t v514 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v513;
  if (v513) {
    goto LABEL_191;
  }
  uint64_t v516 = &v630[v629[150]];
  *(void *)uint64_t v516 = v514;
  v516[8] = v515 & 1;
  LOBYTE(v631[0]) = -109;
  uint64_t v517 = v628;
  uint64_t v518 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v517;
  if (v517) {
    goto LABEL_191;
  }
  uint64_t v520 = &v630[v629[151]];
  *(void *)uint64_t v520 = v518;
  v520[8] = v519 & 1;
  LOBYTE(v631[0]) = -108;
  uint64_t v521 = v628;
  uint64_t v522 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v521;
  if (v521) {
    goto LABEL_191;
  }
  uint64_t v524 = &v630[v629[152]];
  *(void *)uint64_t v524 = v522;
  v524[8] = v523 & 1;
  LOBYTE(v631[0]) = -107;
  uint64_t v525 = v628;
  uint64_t v526 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v525;
  if (v525) {
    goto LABEL_191;
  }
  char v528 = &v630[v629[153]];
  *(void *)char v528 = v526;
  v528[8] = v527 & 1;
  LOBYTE(v631[0]) = -106;
  uint64_t v529 = v628;
  uint64_t v530 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v529;
  if (v529) {
    goto LABEL_191;
  }
  v532 = &v630[v629[154]];
  *(void *)v532 = v530;
  v532[8] = v531 & 1;
  LOBYTE(v631[0]) = -105;
  uint64_t v533 = v628;
  uint64_t v534 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v533;
  if (v533) {
    goto LABEL_191;
  }
  uint64_t v536 = &v630[v629[155]];
  *(void *)uint64_t v536 = v534;
  v536[8] = v535 & 1;
  LOBYTE(v631[0]) = -104;
  uint64_t v537 = v628;
  uint64_t v538 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v537;
  if (v537) {
    goto LABEL_191;
  }
  uint64_t v540 = &v630[v629[156]];
  *(void *)uint64_t v540 = v538;
  v540[8] = v539 & 1;
  LOBYTE(v631[0]) = -103;
  uint64_t v541 = v628;
  char v542 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v541;
  if (v541) {
    goto LABEL_191;
  }
  v630[v629[157]] = v542;
  LOBYTE(v631[0]) = -102;
  uint64_t v543 = v628;
  uint64_t v544 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v543;
  if (v543) {
    goto LABEL_191;
  }
  uint64_t v546 = &v630[v629[158]];
  *(void *)uint64_t v546 = v544;
  v546[8] = v545 & 1;
  LOBYTE(v631[0]) = -101;
  uint64_t v547 = v628;
  uint64_t v548 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v547;
  if (v547) {
    goto LABEL_191;
  }
  uint64_t v550 = &v630[v629[159]];
  *(void *)uint64_t v550 = v548;
  v550[8] = v549 & 1;
  LOBYTE(v631[0]) = -100;
  uint64_t v551 = v628;
  uint64_t v552 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626);
  uint64_t v628 = v551;
  if (v551
    || (uint64_t v554 = &v630[v629[160]],
        *(void *)uint64_t v554 = v552,
        v554[8] = v553 & 1,
        LOBYTE(v631[0]) = -99,
        uint64_t v555 = v628,
        uint64_t v556 = KeyedDecodingContainer.decodeIfPresent(_:forKey:)(v631, v626),
        (uint64_t v628 = v555) != 0))
  {
LABEL_191:
    (*(void (**)(char *, uint64_t))(v13 + 8))(v625, v626);
    LODWORD(v626) = 0;
LABEL_206:
    unint64_t v24 = 0x4000000000035000LL;
LABEL_5:
    _s12searchpartyd26ManagedCBPeripheralManagerVwxx_0(v627);
    uint64_t v13 = (v24 >> 12) & 1;
    uint64_t v26 = (v24 >> 14) & 1;
    uint64_t v27 = (v24 >> 16) & 1;
    uint64_t v28 = (v24 >> 17) & 1;
    __int16 v29 = v24;
    uint64_t v30 = (v24 >> 62) & 1;
    uint64_t v31 = (v25 >> 1) & 1;
    if ((v23 & 1) != 0)
    {
      sub_1000182F0(*(void *)v630, *((void *)v630 + 1));
      if ((v23 & 0x40) == 0)
      {
LABEL_7:
        if ((v23 & 0x100) == 0) {
          goto LABEL_8;
        }
        goto LABEL_19;
      }
    }

    else if ((v23 & 0x40) == 0)
    {
      goto LABEL_7;
    }

    swift_bridgeObjectRelease();
    if ((v23 & 0x100) == 0)
    {
LABEL_8:
      if ((v23 & 0x800000) == 0) {
        goto LABEL_9;
      }
      goto LABEL_20;
    }